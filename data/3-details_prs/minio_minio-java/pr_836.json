{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3MzU5NTYz", "number": 836, "title": "Add new method to set/get object retention & Legal Hold", "bodyText": "Add new method to set/get object retention and Legal Hold\nFunction test not added as it will make the object WORM enabled and cant be deleted after successful run of test.", "createdAt": "2020-01-27T08:02:10Z", "url": "https://github.com/minio/minio-java/pull/836", "merged": true, "mergeCommit": {"oid": "8427afcdac619281e7c55245976341696e8c537a"}, "closed": true, "closedAt": "2020-02-13T02:47:21Z", "author": {"login": "sinhaashish"}, "timelineItems": {"totalCount": 50, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb-f6V8gBqjI5ODI2NDQ2OTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcDxwYfgFqTM1NzkyMzY5OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4a04b78eaf5ba3111c29344f42e2ecec1a4bd91f", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/4a04b78eaf5ba3111c29344f42e2ecec1a4bd91f", "committedDate": "2020-01-27T07:57:36Z", "message": "Add new method to set/get object retention"}, "afterCommit": {"oid": "4546da1e2cfb13cde5ac03b8b2567c052cfff78c", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/4546da1e2cfb13cde5ac03b8b2567c052cfff78c", "committedDate": "2020-01-27T17:08:38Z", "message": "Add new method to set/get object retention"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4546da1e2cfb13cde5ac03b8b2567c052cfff78c", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/4546da1e2cfb13cde5ac03b8b2567c052cfff78c", "committedDate": "2020-01-27T17:08:38Z", "message": "Add new method to set/get object retention"}, "afterCommit": {"oid": "b5c1c8038a7c2d02f53fdb792d5bdde725561cf3", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/b5c1c8038a7c2d02f53fdb792d5bdde725561cf3", "committedDate": "2020-01-27T17:21:16Z", "message": "Add new method to set/get object retention"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDg3Mjk4", "url": "https://github.com/minio/minio-java/pull/836#pullrequestreview-349087298", "createdAt": "2020-01-28T01:37:43Z", "commit": {"oid": "b5c1c8038a7c2d02f53fdb792d5bdde725561cf3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMTozNzo0M1rOFiXDgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMTozNzo0M1rOFiXDgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU3MzYzNQ==", "bodyText": "You could name it similar to S3 API ObjectRetentionConfiguration", "url": "https://github.com/minio/minio-java/pull/836#discussion_r371573635", "createdAt": "2020-01-28T01:37:43Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/messages/ObjectLockRetentionConfiguration.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.messages;\n+\n+import org.xmlpull.v1.XmlPullParserException;\n+import io.minio.DateFormat;\n+import org.joda.time.DateTime;\n+import com.google.api.client.util.Key;\n+\n+\n+/**\n+ * Helper class to construct create bucket configuration request XML for Amazon AWS S3.\n+ */\n+@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")\n+public class ObjectLockRetentionConfiguration extends XmlEntity {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5c1c8038a7c2d02f53fdb792d5bdde725561cf3"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDg3NDk5", "url": "https://github.com/minio/minio-java/pull/836#pullrequestreview-349087499", "createdAt": "2020-01-28T01:38:37Z", "commit": {"oid": "b5c1c8038a7c2d02f53fdb792d5bdde725561cf3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMTozODozN1rOFiXELA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMTozODozN1rOFiXELA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU3MzgwNA==", "bodyText": "versionId is not part of the configuration. It is a param in the API.", "url": "https://github.com/minio/minio-java/pull/836#discussion_r371573804", "createdAt": "2020-01-28T01:38:37Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/messages/ObjectLockRetentionConfiguration.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.messages;\n+\n+import org.xmlpull.v1.XmlPullParserException;\n+import io.minio.DateFormat;\n+import org.joda.time.DateTime;\n+import com.google.api.client.util.Key;\n+\n+\n+/**\n+ * Helper class to construct create bucket configuration request XML for Amazon AWS S3.\n+ */\n+@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")\n+public class ObjectLockRetentionConfiguration extends XmlEntity {\n+  @Key(\"ObjectRetention\")\n+  private ObjectLockRetention objectLockRetention;\n+  @Key(\"BypassGovernanceRetention\")\n+  private boolean bypassGovernanceRetention;\n+  @Key(\"Version\")\n+  private String versionId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5c1c8038a7c2d02f53fdb792d5bdde725561cf3"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDg3NjQ1", "url": "https://github.com/minio/minio-java/pull/836#pullrequestreview-349087645", "createdAt": "2020-01-28T01:39:11Z", "commit": {"oid": "b5c1c8038a7c2d02f53fdb792d5bdde725561cf3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMTozOToxMlrOFiXEng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMTozOToxMlrOFiXEng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU3MzkxOA==", "bodyText": "This is not part of the config. Its a param to the S3 API.", "url": "https://github.com/minio/minio-java/pull/836#discussion_r371573918", "createdAt": "2020-01-28T01:39:12Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/messages/ObjectLockRetentionConfiguration.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.messages;\n+\n+import org.xmlpull.v1.XmlPullParserException;\n+import io.minio.DateFormat;\n+import org.joda.time.DateTime;\n+import com.google.api.client.util.Key;\n+\n+\n+/**\n+ * Helper class to construct create bucket configuration request XML for Amazon AWS S3.\n+ */\n+@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")\n+public class ObjectLockRetentionConfiguration extends XmlEntity {\n+  @Key(\"ObjectRetention\")\n+  private ObjectLockRetention objectLockRetention;\n+  @Key(\"BypassGovernanceRetention\")\n+  private boolean bypassGovernanceRetention;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5c1c8038a7c2d02f53fdb792d5bdde725561cf3"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDg3ODk5", "url": "https://github.com/minio/minio-java/pull/836#pullrequestreview-349087899", "createdAt": "2020-01-28T01:40:10Z", "commit": {"oid": "b5c1c8038a7c2d02f53fdb792d5bdde725561cf3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMTo0MDoxMVrOFiXFVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMTo0MDoxMVrOFiXFVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU3NDEwMA==", "bodyText": "Above two getters are not required", "url": "https://github.com/minio/minio-java/pull/836#discussion_r371574100", "createdAt": "2020-01-28T01:40:11Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/messages/ObjectLockRetentionConfiguration.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.messages;\n+\n+import org.xmlpull.v1.XmlPullParserException;\n+import io.minio.DateFormat;\n+import org.joda.time.DateTime;\n+import com.google.api.client.util.Key;\n+\n+\n+/**\n+ * Helper class to construct create bucket configuration request XML for Amazon AWS S3.\n+ */\n+@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")\n+public class ObjectLockRetentionConfiguration extends XmlEntity {\n+  @Key(\"ObjectRetention\")\n+  private ObjectLockRetention objectLockRetention;\n+  @Key(\"BypassGovernanceRetention\")\n+  private boolean bypassGovernanceRetention;\n+  @Key(\"Version\")\n+  private String versionId;\n+\n+  /**\n+   * Constructs a new ObjectLockRetentionConfiguration object with given input parameters.\n+   */\n+  public ObjectLockRetentionConfiguration(RetentionMode mode, boolean bypassGovernanceRetention, \n+      DateTime retainUntilDate, String versionId) throws XmlPullParserException {\n+    super();\n+    this.bypassGovernanceRetention = bypassGovernanceRetention;\n+    this.versionId = versionId ;\n+    this.objectLockRetention = new ObjectLockRetention(mode, \n+        retainUntilDate.toString(DateFormat.RETENTION_DATE_FORMAT));\n+  }\n+\n+\n+  /**\n+   * Returns mode.\n+   */\n+  public RetentionMode mode() {\n+    if (objectLockRetention == null) {\n+      return null;\n+    }    \n+    return objectLockRetention.mode();\n+  }\n+\n+ \n+  /**\n+   * Returns retantion untill date.\n+   */\n+  public DateTime retainUntil() {\n+    if (objectLockRetention == null) {\n+      return null;\n+    }\n+    return objectLockRetention.retainUntil();\n+  }\n+\n+  /**\n+   * Returns version.\n+   */\n+  public String version() { \n+    return this.versionId;\n+  }\n+\n+  /**\n+   * Returns boolean for governanceBypass.\n+   */\n+  public boolean governanceBypass() { \n+    return this.bypassGovernanceRetention;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5c1c8038a7c2d02f53fdb792d5bdde725561cf3"}, "originalPosition": 83}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDg4MjE5", "url": "https://github.com/minio/minio-java/pull/836#pullrequestreview-349088219", "createdAt": "2020-01-28T01:41:30Z", "commit": {"oid": "b5c1c8038a7c2d02f53fdb792d5bdde725561cf3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMTo0MTozMFrOFiXGRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMTo0MTozMFrOFiXGRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU3NDM0MQ==", "bodyText": "retainUntilDate should be a DateTime object not string.", "url": "https://github.com/minio/minio-java/pull/836#discussion_r371574341", "createdAt": "2020-01-28T01:41:30Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/messages/ObjectLockRetention.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.messages;\n+\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import io.minio.DateFormat;\n+import java.util.Date;\n+import org.joda.time.DateTime;\n+import com.google.api.client.util.Key;\n+\n+/**\n+ * Helper class to parse Amazon AWS S3 response XML containing ObjectLockRetention information.\n+ */\n+@SuppressWarnings(\"SameParameterValue\")\n+public class ObjectLockRetention extends XmlEntity {\n+  @Key(\"Mode\")\n+  private String mode;\n+  @Key(\"RetainUntilDate\")\n+  private String  retainUntilDate;\n+\n+ /**\n+   * Constructs a new ObjectLockRetention object.\n+   */\n+  public ObjectLockRetention() throws XmlPullParserException {\n+    super();\n+    super.name = \"Retention\";\n+  }\n+\n+  /**\n+   * Constructs a new CustomRetention object with given retention.\n+   */\n+  public ObjectLockRetention(RetentionMode mode,  String retainUntilDate) throws XmlPullParserException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5c1c8038a7c2d02f53fdb792d5bdde725561cf3"}, "originalPosition": 47}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDg4ODYy", "url": "https://github.com/minio/minio-java/pull/836#pullrequestreview-349088862", "createdAt": "2020-01-28T01:43:57Z", "commit": {"oid": "b5c1c8038a7c2d02f53fdb792d5bdde725561cf3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMTo0Mzo1OFrOFiXITg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMTo0Mzo1OFrOFiXITg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU3NDg2Mg==", "bodyText": "above two methods are same getter. You would need to remove getRetentionDate()", "url": "https://github.com/minio/minio-java/pull/836#discussion_r371574862", "createdAt": "2020-01-28T01:43:58Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/messages/ObjectLockRetention.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.messages;\n+\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import io.minio.DateFormat;\n+import java.util.Date;\n+import org.joda.time.DateTime;\n+import com.google.api.client.util.Key;\n+\n+/**\n+ * Helper class to parse Amazon AWS S3 response XML containing ObjectLockRetention information.\n+ */\n+@SuppressWarnings(\"SameParameterValue\")\n+public class ObjectLockRetention extends XmlEntity {\n+  @Key(\"Mode\")\n+  private String mode;\n+  @Key(\"RetainUntilDate\")\n+  private String  retainUntilDate;\n+\n+ /**\n+   * Constructs a new ObjectLockRetention object.\n+   */\n+  public ObjectLockRetention() throws XmlPullParserException {\n+    super();\n+    super.name = \"Retention\";\n+  }\n+\n+  /**\n+   * Constructs a new CustomRetention object with given retention.\n+   */\n+  public ObjectLockRetention(RetentionMode mode,  String retainUntilDate) throws XmlPullParserException {\n+    super();\n+    super.name = \"Retention\";\n+    if (mode != null) {\n+      this.mode = mode.toString();\n+    }\n+    if (retainUntilDate != null ) {\n+      this.retainUntilDate = retainUntilDate;\n+    }\n+  }\n+\n+  /**\n+   * Returns mode.\n+   */\n+  public RetentionMode mode() {\n+    return RetentionMode.fromString(mode);\n+  }\n+\n+  /**\n+   * Returns retain until date.\n+   */\n+  public DateTime retainUntil() {\n+    return DateFormat.RETENTION_DATE_FORMAT.parseDateTime(retainUntilDate);\n+  }\n+\n+  /**\n+   * Returns retain until date.\n+   */\n+  public Date getRetentionDate() {\n+    return DateFormat.RETENTION_DATE_FORMAT.parseDateTime(retainUntilDate).toDate();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5c1c8038a7c2d02f53fdb792d5bdde725561cf3"}, "originalPosition": 76}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDg5Mjg0", "url": "https://github.com/minio/minio-java/pull/836#pullrequestreview-349089284", "createdAt": "2020-01-28T01:45:40Z", "commit": {"oid": "b5c1c8038a7c2d02f53fdb792d5bdde725561cf3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMTo0NTo0MFrOFiXJqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMTo0NTo0MFrOFiXJqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU3NTIwOA==", "bodyText": "I guess if retainUntilDate is null,  parseDateTime() may throw an exception which is not needed here. Please check and return null or DateTime", "url": "https://github.com/minio/minio-java/pull/836#discussion_r371575208", "createdAt": "2020-01-28T01:45:40Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/messages/ObjectLockRetention.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.messages;\n+\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import io.minio.DateFormat;\n+import java.util.Date;\n+import org.joda.time.DateTime;\n+import com.google.api.client.util.Key;\n+\n+/**\n+ * Helper class to parse Amazon AWS S3 response XML containing ObjectLockRetention information.\n+ */\n+@SuppressWarnings(\"SameParameterValue\")\n+public class ObjectLockRetention extends XmlEntity {\n+  @Key(\"Mode\")\n+  private String mode;\n+  @Key(\"RetainUntilDate\")\n+  private String  retainUntilDate;\n+\n+ /**\n+   * Constructs a new ObjectLockRetention object.\n+   */\n+  public ObjectLockRetention() throws XmlPullParserException {\n+    super();\n+    super.name = \"Retention\";\n+  }\n+\n+  /**\n+   * Constructs a new CustomRetention object with given retention.\n+   */\n+  public ObjectLockRetention(RetentionMode mode,  String retainUntilDate) throws XmlPullParserException {\n+    super();\n+    super.name = \"Retention\";\n+    if (mode != null) {\n+      this.mode = mode.toString();\n+    }\n+    if (retainUntilDate != null ) {\n+      this.retainUntilDate = retainUntilDate;\n+    }\n+  }\n+\n+  /**\n+   * Returns mode.\n+   */\n+  public RetentionMode mode() {\n+    return RetentionMode.fromString(mode);\n+  }\n+\n+  /**\n+   * Returns retain until date.\n+   */\n+  public DateTime retainUntil() {\n+    return DateFormat.RETENTION_DATE_FORMAT.parseDateTime(retainUntilDate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5c1c8038a7c2d02f53fdb792d5bdde725561cf3"}, "originalPosition": 69}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDg5OTI4", "url": "https://github.com/minio/minio-java/pull/836#pullrequestreview-349089928", "createdAt": "2020-01-28T01:48:07Z", "commit": {"oid": "b5c1c8038a7c2d02f53fdb792d5bdde725561cf3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMTo0ODowN1rOFiXLtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMTo0ODowN1rOFiXLtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU3NTczNA==", "bodyText": "you already have EXPIRATION_DATE_FORMAT", "url": "https://github.com/minio/minio-java/pull/836#discussion_r371575734", "createdAt": "2020-01-28T01:48:07Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/DateFormat.java", "diffHunk": "@@ -40,5 +40,8 @@\n   public static final DateTimeFormatter HTTP_HEADER_DATE_FORMAT =\n       DateTimeFormat.forPattern(\"EEE',' dd MMM yyyy HH':'mm':'ss 'GMT'\").withZoneUTC().withLocale(Locale.US);\n \n+  public static final DateTimeFormatter RETENTION_DATE_FORMAT =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5c1c8038a7c2d02f53fdb792d5bdde725561cf3"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5MDkxNDc0", "url": "https://github.com/minio/minio-java/pull/836#pullrequestreview-349091474", "createdAt": "2020-01-28T01:53:58Z", "commit": {"oid": "b5c1c8038a7c2d02f53fdb792d5bdde725561cf3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMTo1Mzo1OFrOFiXQ7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwMTo1Mzo1OFrOFiXQ7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTU3NzA2OA==", "bodyText": "We need to comply with S3 API names to avoid confusion i.e. setObjectRetention() and getObjectRetention().  Below are right signature as per the spec.\npublic void setObjectRetention(String bucketName, String objectName, String versionId, boolean bypassGovernanceRetention, ObjectRetentionConfiguration config)\npublic ObjectRetentionConfiguration getObjectRetention(String bucketName, String objectName, String versionId)", "url": "https://github.com/minio/minio-java/pull/836#discussion_r371577068", "createdAt": "2020-01-28T01:53:58Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -3895,6 +3898,107 @@ public ObjectLockConfiguration getDefaultRetention(String bucketName)\n   }\n \n \n+  /**\n+   * Applies object retention lock onto an object.\n+   *\n+   * </p><b>Example:</b><br>\n+   * <pre>{@code minioClient.setObjectRetention(\"my-bucketname\", \"my-object\", config );\n+   * System.out.println(\"Set object retention on my-object successfully.\"); }</pre>\n+   *\n+   * @param bucketName Bucket name.\n+   * @param objectName Object name.\n+   * @param config     Object lock configuration.\n+   *\n+   * @throws InvalidBucketNameException  upon invalid bucket name is given\n+   * @throws NoSuchAlgorithmException\n+   *           upon requested algorithm was not found during signature calculation\n+   * @throws InsufficientDataException  upon getting EOFException while reading given\n+   *           InputStream even before reading given length\n+   * @throws IOException                 upon connection error\n+   * @throws InvalidKeyException\n+   *           upon an invalid access key or secret key\n+   * @throws NoResponseException         upon no response from server\n+   * @throws XmlPullParserException      upon parsing response xml\n+   * @throws ErrorResponseException      upon unsuccessful execution\n+   * @throws InternalException           upon internal library error\n+   * @throws InvalidResponseException    upon a non-xml response from server\n+   */\n+  public void setObjectLockRetention(String bucketName, String objectName, ObjectLockRetentionConfiguration config)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b5c1c8038a7c2d02f53fdb792d5bdde725561cf3"}, "originalPosition": 39}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b5c1c8038a7c2d02f53fdb792d5bdde725561cf3", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/b5c1c8038a7c2d02f53fdb792d5bdde725561cf3", "committedDate": "2020-01-27T17:21:16Z", "message": "Add new method to set/get object retention"}, "afterCommit": {"oid": "3dbb3441c78ab783a57e59ba5169aafafe0401bb", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/3dbb3441c78ab783a57e59ba5169aafafe0401bb", "committedDate": "2020-02-02T14:54:52Z", "message": "Add new method to set/get object retention"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxOTQ5ODM3", "url": "https://github.com/minio/minio-java/pull/836#pullrequestreview-351949837", "createdAt": "2020-02-02T15:45:49Z", "commit": {"oid": "3dbb3441c78ab783a57e59ba5169aafafe0401bb"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3dbb3441c78ab783a57e59ba5169aafafe0401bb", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/3dbb3441c78ab783a57e59ba5169aafafe0401bb", "committedDate": "2020-02-02T14:54:52Z", "message": "Add new method to set/get object retention"}, "afterCommit": {"oid": "c6c316b1468f311fcefa47db710aad2274a0842f", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/c6c316b1468f311fcefa47db710aad2274a0842f", "committedDate": "2020-02-02T17:53:25Z", "message": "Add new method to set/get object retention and legal hold"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxOTcwMjc2", "url": "https://github.com/minio/minio-java/pull/836#pullrequestreview-351970276", "createdAt": "2020-02-02T21:55:07Z", "commit": {"oid": "c6c316b1468f311fcefa47db710aad2274a0842f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMTo1NTowN1rOFkjujg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMTo1NTowN1rOFkjujg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg3ODQxNA==", "bodyText": "Not a good approach to pass and remove headers or params for sake of checksum calculation. You could pass a flag from higher level calls whether MD5 checksum calculation is required or not. You could add this improvement and remove these nested if guesses.", "url": "https://github.com/minio/minio-java/pull/836#discussion_r373878414", "createdAt": "2020-02-02T21:55:07Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -976,10 +978,15 @@ private Request createRequest(Method method, String bucketName, String objectNam\n           String[] hashes = Digest.sha256Md5Hashes(data, len);\n           sha256Hash = hashes[0];\n           md5Hash = hashes[1];\n-        } else if (method == Method.PUT && queryParamMap != null && queryParamMap.containsKey(\"lifecycle\")) {\n+        } else if (method == Method.PUT && queryParamMap != null &&  queryParamMap.containsKey(\"lifecycle\"))  {\n           String[] hashes = Digest.sha256Md5Hashes(data, len);\n           sha256Hash = hashes[0];\n           md5Hash = hashes[1];\n+        } else if (method == Method.PUT && headerMap.containsKey(\"retention\")) {\n+          String[] hashes = Digest.sha256Md5Hashes(data, len);\n+          sha256Hash = hashes[0];\n+          md5Hash = hashes[1];\n+          headerMap.remove(\"retention\",\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6c316b1468f311fcefa47db710aad2274a0842f"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxOTcwNjg0", "url": "https://github.com/minio/minio-java/pull/836#pullrequestreview-351970684", "createdAt": "2020-02-02T22:02:22Z", "commit": {"oid": "c6c316b1468f311fcefa47db710aad2274a0842f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMjowMjoyM1rOFkjwhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMjowMjoyM1rOFkjwhQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg3ODkxNw==", "bodyText": "Treat null versionId as empty string to support minio server and add it into query param i.e.\nif (versionId == null) {\n  queryParamMap.put(\"versionId\", \"\");\n} else {\n  queryParamMap.put(\"versionId\", versionId);\n}", "url": "https://github.com/minio/minio-java/pull/836#discussion_r373878917", "createdAt": "2020-02-02T22:02:23Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -3895,6 +3902,201 @@ public ObjectLockConfiguration getDefaultRetention(String bucketName)\n   }\n \n \n+  /**\n+   * Applies object retention lock onto an object.\n+   *\n+   * </p><b>Example:</b><br>\n+   * <pre>{@code minioClient.setObjectRetention(\"my-bucketname\", \"my-object\", config );\n+   * System.out.println(\"Set object retention on my-object successfully.\"); }</pre>\n+   *\n+   * @param bucketName Bucket name.\n+   * @param objectName Object name.\n+   * @param versionId  Object versio id.\n+   * @param bypassGovernanceRetention  By pass governance retention.\n+   * @param config     Object lock configuration.\n+   *\n+   * @throws InvalidBucketNameException  upon invalid bucket name is given\n+   * @throws NoSuchAlgorithmException\n+   *           upon requested algorithm was not found during signature calculation\n+   * @throws InsufficientDataException  upon getting EOFException while reading given\n+   *           InputStream even before reading given length\n+   * @throws IOException                 upon connection error\n+   * @throws InvalidKeyException\n+   *           upon an invalid access key or secret key\n+   * @throws NoResponseException         upon no response from server\n+   * @throws XmlPullParserException      upon parsing response xml\n+   * @throws ErrorResponseException      upon unsuccessful execution\n+   * @throws InternalException           upon internal library error\n+   * @throws InvalidResponseException    upon a non-xml response from server\n+   */\n+  public void setObjectRetention(String bucketName, String objectName, String versionId, \n+          boolean bypassGovernanceRetention, ObjectRetentionConfiguration config)\n+    throws InvalidBucketNameException, NoSuchAlgorithmException, InsufficientDataException, IOException,\n+           InvalidKeyException, NoResponseException, XmlPullParserException, ErrorResponseException,\n+           InternalException, InvalidResponseException {\n+\n+    Map<String, String> queryParamMap = new HashMap<>();\n+    queryParamMap.put(\"retention\", \"\");\n+\n+    if (!versionId.isEmpty()) {\n+      queryParamMap.put(\"versionId\", versionId);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6c316b1468f311fcefa47db710aad2274a0842f"}, "originalPosition": 75}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxOTcwNzU1", "url": "https://github.com/minio/minio-java/pull/836#pullrequestreview-351970755", "createdAt": "2020-02-02T22:03:36Z", "commit": {"oid": "c6c316b1468f311fcefa47db710aad2274a0842f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMjowMzozNlrOFkjwzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMjowMzozNlrOFkjwzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg3ODk4OA==", "bodyText": "move this boolean as last param looks like its optional.", "url": "https://github.com/minio/minio-java/pull/836#discussion_r373878988", "createdAt": "2020-02-02T22:03:36Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -3895,6 +3902,201 @@ public ObjectLockConfiguration getDefaultRetention(String bucketName)\n   }\n \n \n+  /**\n+   * Applies object retention lock onto an object.\n+   *\n+   * </p><b>Example:</b><br>\n+   * <pre>{@code minioClient.setObjectRetention(\"my-bucketname\", \"my-object\", config );\n+   * System.out.println(\"Set object retention on my-object successfully.\"); }</pre>\n+   *\n+   * @param bucketName Bucket name.\n+   * @param objectName Object name.\n+   * @param versionId  Object versio id.\n+   * @param bypassGovernanceRetention  By pass governance retention.\n+   * @param config     Object lock configuration.\n+   *\n+   * @throws InvalidBucketNameException  upon invalid bucket name is given\n+   * @throws NoSuchAlgorithmException\n+   *           upon requested algorithm was not found during signature calculation\n+   * @throws InsufficientDataException  upon getting EOFException while reading given\n+   *           InputStream even before reading given length\n+   * @throws IOException                 upon connection error\n+   * @throws InvalidKeyException\n+   *           upon an invalid access key or secret key\n+   * @throws NoResponseException         upon no response from server\n+   * @throws XmlPullParserException      upon parsing response xml\n+   * @throws ErrorResponseException      upon unsuccessful execution\n+   * @throws InternalException           upon internal library error\n+   * @throws InvalidResponseException    upon a non-xml response from server\n+   */\n+  public void setObjectRetention(String bucketName, String objectName, String versionId, \n+          boolean bypassGovernanceRetention, ObjectRetentionConfiguration config)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6c316b1468f311fcefa47db710aad2274a0842f"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxOTcxMDkz", "url": "https://github.com/minio/minio-java/pull/836#pullrequestreview-351971093", "createdAt": "2020-02-02T22:08:53Z", "commit": {"oid": "c6c316b1468f311fcefa47db710aad2274a0842f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMjowODo1M1rOFkjyQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMjowODo1M1rOFkjyQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg3OTM2MQ==", "bodyText": "config must be non-null and Mode and RetainUntilDate are mandatory configuration. You would need to add this validation properly.", "url": "https://github.com/minio/minio-java/pull/836#discussion_r373879361", "createdAt": "2020-02-02T22:08:53Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -3895,6 +3902,201 @@ public ObjectLockConfiguration getDefaultRetention(String bucketName)\n   }\n \n \n+  /**\n+   * Applies object retention lock onto an object.\n+   *\n+   * </p><b>Example:</b><br>\n+   * <pre>{@code minioClient.setObjectRetention(\"my-bucketname\", \"my-object\", config );\n+   * System.out.println(\"Set object retention on my-object successfully.\"); }</pre>\n+   *\n+   * @param bucketName Bucket name.\n+   * @param objectName Object name.\n+   * @param versionId  Object versio id.\n+   * @param bypassGovernanceRetention  By pass governance retention.\n+   * @param config     Object lock configuration.\n+   *\n+   * @throws InvalidBucketNameException  upon invalid bucket name is given\n+   * @throws NoSuchAlgorithmException\n+   *           upon requested algorithm was not found during signature calculation\n+   * @throws InsufficientDataException  upon getting EOFException while reading given\n+   *           InputStream even before reading given length\n+   * @throws IOException                 upon connection error\n+   * @throws InvalidKeyException\n+   *           upon an invalid access key or secret key\n+   * @throws NoResponseException         upon no response from server\n+   * @throws XmlPullParserException      upon parsing response xml\n+   * @throws ErrorResponseException      upon unsuccessful execution\n+   * @throws InternalException           upon internal library error\n+   * @throws InvalidResponseException    upon a non-xml response from server\n+   */\n+  public void setObjectRetention(String bucketName, String objectName, String versionId, \n+          boolean bypassGovernanceRetention, ObjectRetentionConfiguration config)\n+    throws InvalidBucketNameException, NoSuchAlgorithmException, InsufficientDataException, IOException,\n+           InvalidKeyException, NoResponseException, XmlPullParserException, ErrorResponseException,\n+           InternalException, InvalidResponseException {\n+\n+    Map<String, String> queryParamMap = new HashMap<>();\n+    queryParamMap.put(\"retention\", \"\");\n+\n+    if (!versionId.isEmpty()) {\n+      queryParamMap.put(\"versionId\", versionId);\n+    }\n+\n+    Map<String, String> headerMap = new HashMap<>();\n+    if (bypassGovernanceRetention) {\n+      headerMap.put(\"x-amz-bypass-governance-retention\", \"True\");\n+    }\n+\n+    HttpResponse response = executePut(bucketName, objectName, headerMap, queryParamMap, config, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6c316b1468f311fcefa47db710aad2274a0842f"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxOTcyOTk3", "url": "https://github.com/minio/minio-java/pull/836#pullrequestreview-351972997", "createdAt": "2020-02-02T22:39:00Z", "commit": {"oid": "c6c316b1468f311fcefa47db710aad2274a0842f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMjozOTowMFrOFkj6YQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMjozOTowMFrOFkj6YQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MTQ0MQ==", "bodyText": "You would need to have below more friendlier APIs than boolean flag\npublic void enableObjectLegalHold(String bucketName, String objectName, String versionId)\npublic void disableObjectLegalHold(String bucketName, String objectName, String versionId)\npublic boolean isObjectLegalHoldEnabled(String bucketName, String objectName, String versionId)", "url": "https://github.com/minio/minio-java/pull/836#discussion_r373881441", "createdAt": "2020-02-02T22:39:00Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -3895,6 +3902,201 @@ public ObjectLockConfiguration getDefaultRetention(String bucketName)\n   }\n \n \n+  /**\n+   * Applies object retention lock onto an object.\n+   *\n+   * </p><b>Example:</b><br>\n+   * <pre>{@code minioClient.setObjectRetention(\"my-bucketname\", \"my-object\", config );\n+   * System.out.println(\"Set object retention on my-object successfully.\"); }</pre>\n+   *\n+   * @param bucketName Bucket name.\n+   * @param objectName Object name.\n+   * @param versionId  Object versio id.\n+   * @param bypassGovernanceRetention  By pass governance retention.\n+   * @param config     Object lock configuration.\n+   *\n+   * @throws InvalidBucketNameException  upon invalid bucket name is given\n+   * @throws NoSuchAlgorithmException\n+   *           upon requested algorithm was not found during signature calculation\n+   * @throws InsufficientDataException  upon getting EOFException while reading given\n+   *           InputStream even before reading given length\n+   * @throws IOException                 upon connection error\n+   * @throws InvalidKeyException\n+   *           upon an invalid access key or secret key\n+   * @throws NoResponseException         upon no response from server\n+   * @throws XmlPullParserException      upon parsing response xml\n+   * @throws ErrorResponseException      upon unsuccessful execution\n+   * @throws InternalException           upon internal library error\n+   * @throws InvalidResponseException    upon a non-xml response from server\n+   */\n+  public void setObjectRetention(String bucketName, String objectName, String versionId, \n+          boolean bypassGovernanceRetention, ObjectRetentionConfiguration config)\n+    throws InvalidBucketNameException, NoSuchAlgorithmException, InsufficientDataException, IOException,\n+           InvalidKeyException, NoResponseException, XmlPullParserException, ErrorResponseException,\n+           InternalException, InvalidResponseException {\n+\n+    Map<String, String> queryParamMap = new HashMap<>();\n+    queryParamMap.put(\"retention\", \"\");\n+\n+    if (!versionId.isEmpty()) {\n+      queryParamMap.put(\"versionId\", versionId);\n+    }\n+\n+    Map<String, String> headerMap = new HashMap<>();\n+    if (bypassGovernanceRetention) {\n+      headerMap.put(\"x-amz-bypass-governance-retention\", \"True\");\n+    }\n+\n+    HttpResponse response = executePut(bucketName, objectName, headerMap, queryParamMap, config, 0);\n+    response.body().close();\n+  }\n+\n+  /**\n+   * Fetches object retention lock of an object.\n+   *\n+   * </p><b>Example:</b><br>\n+   * <pre>{@code\n+   * ObjectRetentionConfiguration objectRetentionConfiguration = minioClient.getObjectRetention(\"my-bucketname\", \n+   * \"my-object\", \"version-Id\" );\n+   * System.out.println(\"Mode \" + objectRetentionConfiguration.mode()); \n+   * System.out.println(\"Retanetion Until  \" + objectRetentionConfiguration.getRetentionDate()); }</pre>\n+   *\n+   * @param bucketName Bucket name.\n+   * @param objectName Object name.\n+   * @param versionId  Version Id.\n+   *\n+   * @throws InvalidBucketNameException  upon invalid bucket name is given\n+   * @throws NoSuchAlgorithmException\n+   *           upon requested algorithm was not found during signature calculation\n+   * @throws InsufficientDataException  upon getting EOFException while reading given\n+   *           InputStream even before reading given length\n+   * @throws IOException                 upon connection error\n+   * @throws InvalidKeyException\n+   *           upon an invalid access key or secret key\n+   * @throws NoResponseException         upon no response from server\n+   * @throws XmlPullParserException      upon parsing response xml\n+   * @throws ErrorResponseException      upon unsuccessful execution\n+   * @throws InternalException           upon internal library error\n+   * @throws InvalidResponseException    upon a non-xml response from server\n+   */\n+  public ObjectRetentionConfiguration getObjectRetention(String bucketName, String objectName, String versionId)\n+    throws InvalidBucketNameException, NoSuchAlgorithmException, InsufficientDataException, IOException,\n+           InvalidKeyException, NoResponseException, XmlPullParserException, ErrorResponseException,\n+           InternalException, InvalidResponseException {\n+\n+    Map<String, String> queryParamMap = new HashMap<>();\n+    queryParamMap.put(\"retention\", \"\");\n+\n+    if ( !(versionId == null || versionId.isEmpty())) {\n+      queryParamMap.put(\"versionId\",versionId);\n+    }\n+\n+    HttpResponse response = executeGet(bucketName, objectName, null, queryParamMap);\n+    ObjectRetentionConfiguration result = new ObjectRetentionConfiguration();\n+    try {\n+      result.parseXml(response.body().charStream());\n+    } finally {\n+      response.body().close();\n+    }\n+    return result;\n+  }\n+\n+\n+ \n+  \n+   /**\n+   * Applies object legal hold on an object.\n+   *\n+   * </p><b>Example:</b><br>\n+   * <pre>{@code minioClient.setObjectLegalHold(\"my-bucketname\", \"my-object\", \"\", true );\n+   * System.out.println(\"Legal Hold set on my-object successfully.\"); }</pre>\n+   *\n+   * @param bucketName Bucket name.\n+   * @param objectName Object name.\n+   * @param versionId  Object versio id.   * \n+   * @param legalHold  Legal Hold Status\n+   *\n+   * @throws InvalidBucketNameException  upon invalid bucket name is given\n+   * @throws NoSuchAlgorithmException\n+   *           upon requested algorithm was not found during signature calculation\n+   * @throws InsufficientDataException  upon getting EOFException while reading given\n+   *           InputStream even before reading given length\n+   * @throws IOException                 upon connection error\n+   * @throws InvalidKeyException\n+   *           upon an invalid access key or secret key\n+   * @throws NoResponseException         upon no response from server\n+   * @throws XmlPullParserException      upon parsing response xml\n+   * @throws ErrorResponseException      upon unsuccessful execution\n+   * @throws InternalException           upon internal library error\n+   * @throws InvalidResponseException    upon a non-xml response from server\n+   */\n+  public void setObjectLegalHold(String bucketName, String objectName, String versionId, \n+          boolean legalHold)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6c316b1468f311fcefa47db710aad2274a0842f"}, "originalPosition": 166}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxOTc0MDQ2", "url": "https://github.com/minio/minio-java/pull/836#pullrequestreview-351974046", "createdAt": "2020-02-02T22:55:42Z", "commit": {"oid": "c6c316b1468f311fcefa47db710aad2274a0842f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMjo1NTo0MlrOFkj-lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMjo1NTo0MlrOFkj-lQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4MjUxNw==", "bodyText": "You need to retrurn boolean depending on status; not string", "url": "https://github.com/minio/minio-java/pull/836#discussion_r373882517", "createdAt": "2020-02-02T22:55:42Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/messages/ObjectLockLegalHold.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.messages;\n+\n+import org.xmlpull.v1.XmlPullParserException;\n+import com.google.api.client.util.Key;\n+\n+\n+/**\n+ * Helper class to construct create bucket configuration request XML for Amazon AWS S3.\n+ */\n+@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")\n+public class ObjectLockLegalHold extends XmlEntity{\n+  @Key(\"Status\")\n+  private String status;\n+\n+  /**\n+   * Constructs a new CustomRetention object with given retention.\n+   */\n+  public ObjectLockLegalHold() throws XmlPullParserException {\n+    super();\n+    super.name = \"LegalHold\";\n+  }\n+\n+  /**\n+   * Constructs a new CustomRetention object with given retention.\n+   */\n+  public ObjectLockLegalHold(boolean legalHold) throws  XmlPullParserException {\n+    super();\n+    super.name = \"LegalHold\";\n+    if (legalHold) {\n+      this.status = \"ON\";\n+    } else {\n+      this.status = \"OFF\";\n+    }\n+  }\n+\n+  /**\n+   * Indicates whether the specified object has a Legal Hold in place.\n+   */\n+  public String getStatus() {\n+    return status;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6c316b1468f311fcefa47db710aad2274a0842f"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxOTc0MzA2", "url": "https://github.com/minio/minio-java/pull/836#pullrequestreview-351974306", "createdAt": "2020-02-02T22:59:51Z", "commit": {"oid": "c6c316b1468f311fcefa47db710aad2274a0842f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMjo1OTo1MVrOFkj_nQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMlQyMjo1OTo1MVrOFkj_nQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzg4Mjc4MQ==", "bodyText": "Two things you can do at the time of put object.\n\nretention (Mode and RetainUntilDate are required)\nlegal hold (boolean to say ON or OFF)\n\nYou could send these changes in put object as separate PR.", "url": "https://github.com/minio/minio-java/pull/836#discussion_r373882781", "createdAt": "2020-02-02T22:59:51Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -4711,6 +4961,92 @@ public void putObject(String bucketName, String objectName, InputStream stream,\n     if (!(stream instanceof BufferedInputStream)) {\n       stream = new BufferedInputStream(stream);\n     }\n+    putObject(bucketName, objectName, stream, size, headerMap, sse, contentType, false);\n+  }\n+\n+    /**\n+   * Uploads data from given stream as object to given bucket where the stream size is unknown.\n+   * <p>\n+   * If the stream has more than 525MiB data, the client uses a multipart session automatically.\n+   * </p>\n+   * <p>\n+   * If the session fails, the user may attempt to re-upload the object by attempting to create\n+   * the exact same object again.\n+   * </p>\n+   * <p>\n+   * If the multipart session fails, we abort the uploaded parts automaticlly.\n+   * </p>\n+   *\n+   * </p><b>Example:</b><br>\n+   * <pre>{@code StringBuilder builder = new StringBuilder();\n+   * for (int i = 0; i < 1000; i++) {\n+   *   builder.append(\"Sphinx of black quartz, judge my vow: Used by Adobe InDesign to display font samples. \");\n+   *   builder.append(\"(29 letters)\\n\");\n+   *   builder.append(\"Jackdaws love my big sphinx of quartz: Similarly, used by Windows XP for some fonts. \");\n+   *   builder.append(\"(31 letters)\\n\"); \n+   *   builder.append(\"Pack my box with five dozen liquor jugs: According to Wikipedia, this one is used on \");\n+   *   builder.append(\"NASAs Space Shuttle. (32 letters)\\n\");\n+   *   builder.append(\"The quick onyx goblin jumps over the lazy dwarf: Flavor text from an Unhinged Magic Card. \");\n+   *   builder.append(\"(39 letters)\\n\");\n+   *   builder.append(\"How razorback-jumping frogs can level six piqued gymnasts!: Not going to win any brevity \");\n+   *   builder.append(\"awards at 49 letters long, but old-time Mac users may recognize it.\\n\");\n+   *   builder.append(\"Cozy lummox gives smart squid who asks for job pen: A 41-letter tester sentence for Mac \");\n+   *   builder.append(\"computers after System 7.\\n\");\n+   *   builder.append(\"A few others we like: Amazingly few discotheques provide jukeboxes; Now fax quiz Jack! my \");\n+   *   builder.append(\"brave ghost pled; Watch Jeopardy!, Alex Trebeks fun TV quiz game.\\n\");\n+   *   builder.append(\"---\\n\");\n+   * }\n+   * ByteArrayInputStream bais = new ByteArrayInputStream(builder.toString().getBytes(\"UTF-8\"));\n+   * // create object\n+   * Map<String, String> headerMap = new HashMap<>();\n+   * headerMap.put(\"Content-Type\", \"application/octet-stream\");\n+   * headerMap.put(\"X-Amz-Meta-Key\", \"meta-data\");\n+\n+   * //Generate symmetric 256 bit AES key.\n+   * KeyGenerator symKeyGenerator = KeyGenerator.getInstance(\"AES\");\n+   * symKeyGenerator.init(256);\n+   * SecretKey symKey = symKeyGenerator.generateKey();\n+\n+   * minioClient.putObject(\"my-bucketname\", \"my-objectname\", bais, bais.available(), headerMap, symKey);\n+   * bais.close();\n+   * System.out.println(\"my-objectname is uploaded successfully\"); }</pre>\n+   *\n+   * @param bucketName  Bucket name.\n+   * @param objectName  Object name to create in the bucket.\n+   * @param stream      stream to upload.\n+   * @param size        Size of all the data that will be uploaded.\n+   * @param headerMap   Custom/additional meta data of the object.\n+   * @param sse         encryption metadata.\n+   * @param contentType Content type of the stream.\n+   * @param objectLockRetention Objecct Lock Retention.\n+   *\n+   * @throws InvalidBucketNameException  upon invalid bucket name is given\n+   * @throws NoSuchAlgorithmException\n+   *           upon requested algorithm was not found during signature calculation\n+   * @throws InsufficientDataException  upon getting EOFException while reading given\n+   *           InputStream even before reading given length\n+   * @throws IOException                 upon connection error\n+   * @throws InvalidKeyException\n+   *           upon an invalid access key or secret key\n+   * @throws NoResponseException         upon no response from server\n+   * @throws XmlPullParserException      upon parsing response xml\n+   * @throws ErrorResponseException      upon unsuccessful execution\n+   * @throws InternalException           upon internal library error\n+   * @throws InvalidArgumentException    upon invalid value is passed to a method.\n+   * @throws InvalidResponseException    upon a non-xml response from server\n+   */\n+  public void putObject(String bucketName, String objectName, InputStream stream, Long size, \n+              Map<String, String> headerMap, ServerSideEncryption sse, String contentType, boolean objectLockRetention)\n+    throws InvalidBucketNameException, NoSuchAlgorithmException, IOException,\n+           InvalidKeyException, NoResponseException, XmlPullParserException, ErrorResponseException,\n+           InternalException, InvalidArgumentException, InsufficientDataException, InvalidResponseException {\n+\n+    if (!(stream instanceof BufferedInputStream)) {\n+      stream = new BufferedInputStream(stream);\n+    }\n+    if (objectLockRetention) {\n+      headerMap.put(\"retention\",\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6c316b1468f311fcefa47db710aad2274a0842f"}, "originalPosition": 385}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cdce38b04c03a8bfedc620206c491cd0a9e5dfee", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/cdce38b04c03a8bfedc620206c491cd0a9e5dfee", "committedDate": "2020-02-06T06:00:28Z", "message": "Add argument to calculate md5 id needed"}, "afterCommit": {"oid": "5926cc828236cfe806811c655c326dd8e3eea0a5", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/5926cc828236cfe806811c655c326dd8e3eea0a5", "committedDate": "2020-02-06T06:12:52Z", "message": "Add argument to calculate md5 id needed"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5926cc828236cfe806811c655c326dd8e3eea0a5", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/5926cc828236cfe806811c655c326dd8e3eea0a5", "committedDate": "2020-02-06T06:12:52Z", "message": "Add argument to calculate md5 id needed"}, "afterCommit": {"oid": "47d23dadea2d6921f465528d127e415dcc59f3e7", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/47d23dadea2d6921f465528d127e415dcc59f3e7", "committedDate": "2020-02-06T06:20:42Z", "message": "Add argument to calculate md5 if needed"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "47d23dadea2d6921f465528d127e415dcc59f3e7", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/47d23dadea2d6921f465528d127e415dcc59f3e7", "committedDate": "2020-02-06T06:20:42Z", "message": "Add argument to calculate md5 if needed"}, "afterCommit": {"oid": "e6668cb46d60ea71909f9f868261a73b69cd7d58", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/e6668cb46d60ea71909f9f868261a73b69cd7d58", "committedDate": "2020-02-06T06:23:14Z", "message": "Add argument to calculate md5 if needed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MzA0OTYx", "url": "https://github.com/minio/minio-java/pull/836#pullrequestreview-354304961", "createdAt": "2020-02-06T09:29:49Z", "commit": {"oid": "e6668cb46d60ea71909f9f868261a73b69cd7d58"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwOToyOTo0OVrOFmUXMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQwOToyOTo0OVrOFmUXMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTcyMzgyNA==", "bodyText": "Remove RETENTION_DATE_FORMAT and use EXPIRATION_DATE_FORMAT directly", "url": "https://github.com/minio/minio-java/pull/836#discussion_r375723824", "createdAt": "2020-02-06T09:29:49Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/DateFormat.java", "diffHunk": "@@ -40,5 +40,7 @@\n   public static final DateTimeFormatter HTTP_HEADER_DATE_FORMAT =\n       DateTimeFormat.forPattern(\"EEE',' dd MMM yyyy HH':'mm':'ss 'GMT'\").withZoneUTC().withLocale(Locale.US);\n \n+  public static final DateTimeFormatter RETENTION_DATE_FORMAT = EXPIRATION_DATE_FORMAT;   ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6668cb46d60ea71909f9f868261a73b69cd7d58"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MzI2MjEw", "url": "https://github.com/minio/minio-java/pull/836#pullrequestreview-354326210", "createdAt": "2020-02-06T10:01:19Z", "commit": {"oid": "e6668cb46d60ea71909f9f868261a73b69cd7d58"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMDowMToxOVrOFmVXYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMDowMToxOVrOFmVXYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc0MDI1OQ==", "bodyText": "have status(), not getStatus()\nI don't see javadoc of Boolean parses \"ON\"/\"OFF\" string. Are you sure it works?\nReturn boolean not Boolean", "url": "https://github.com/minio/minio-java/pull/836#discussion_r375740259", "createdAt": "2020-02-06T10:01:19Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/messages/ObjectLockLegalHold.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.messages;\n+\n+import org.xmlpull.v1.XmlPullParserException;\n+import com.google.api.client.util.Key;\n+\n+\n+/**\n+ * Helper class to construct create bucket configuration request XML for Amazon AWS S3.\n+ */\n+@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")\n+public class ObjectLockLegalHold extends XmlEntity{\n+  @Key(\"Status\")\n+  private String status;\n+\n+  /**\n+   * Constructs a new CustomRetention object with given retention.\n+   */\n+  public ObjectLockLegalHold() throws XmlPullParserException {\n+    super();\n+    super.name = \"LegalHold\";\n+  }\n+\n+  /**\n+   * Constructs a new CustomRetention object with given retention.\n+   */\n+  public ObjectLockLegalHold(boolean legalHold) throws  XmlPullParserException {\n+    super();\n+    super.name = \"LegalHold\";\n+    if (legalHold) {\n+      this.status = \"ON\";\n+    } else {\n+      this.status = \"OFF\";\n+    }\n+  }\n+\n+  /**\n+   * Indicates whether the specified object has a Legal Hold in place or not.\n+   */\n+  public Boolean getStatus() {\n+    return Boolean.parseBoolean(status);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6668cb46d60ea71909f9f868261a73b69cd7d58"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MzI3Mjcw", "url": "https://github.com/minio/minio-java/pull/836#pullrequestreview-354327270", "createdAt": "2020-02-06T10:02:50Z", "commit": {"oid": "e6668cb46d60ea71909f9f868261a73b69cd7d58"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMDowMjo1MFrOFmVahg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMDowMjo1MFrOFmVahg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc0MTA2Mg==", "bodyText": "argument is status not legalHold", "url": "https://github.com/minio/minio-java/pull/836#discussion_r375741062", "createdAt": "2020-02-06T10:02:50Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/messages/ObjectLockLegalHold.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.messages;\n+\n+import org.xmlpull.v1.XmlPullParserException;\n+import com.google.api.client.util.Key;\n+\n+\n+/**\n+ * Helper class to construct create bucket configuration request XML for Amazon AWS S3.\n+ */\n+@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")\n+public class ObjectLockLegalHold extends XmlEntity{\n+  @Key(\"Status\")\n+  private String status;\n+\n+  /**\n+   * Constructs a new CustomRetention object with given retention.\n+   */\n+  public ObjectLockLegalHold() throws XmlPullParserException {\n+    super();\n+    super.name = \"LegalHold\";\n+  }\n+\n+  /**\n+   * Constructs a new CustomRetention object with given retention.\n+   */\n+  public ObjectLockLegalHold(boolean legalHold) throws  XmlPullParserException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6668cb46d60ea71909f9f868261a73b69cd7d58"}, "originalPosition": 42}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MzI3OTkz", "url": "https://github.com/minio/minio-java/pull/836#pullrequestreview-354327993", "createdAt": "2020-02-06T10:03:56Z", "commit": {"oid": "e6668cb46d60ea71909f9f868261a73b69cd7d58"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMDowMzo1NlrOFmVcuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMDowMzo1NlrOFmVcuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc0MTYyNw==", "bodyText": "call this() than repeating these two lines", "url": "https://github.com/minio/minio-java/pull/836#discussion_r375741627", "createdAt": "2020-02-06T10:03:56Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/messages/ObjectRetentionConfiguration.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.messages;\n+\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import io.minio.DateFormat;\n+import java.util.Date;\n+import org.joda.time.DateTime;\n+import com.google.api.client.util.Key;\n+import io.minio.errors.InvalidArgumentException;\n+\n+/**\n+ * Helper class to parse Amazon AWS S3 response XML containing ObjectLockRetention information.\n+ */\n+@SuppressWarnings(\"SameParameterValue\")\n+public class ObjectRetentionConfiguration extends XmlEntity {\n+  @Key(\"Mode\")\n+  private String mode;\n+  @Key(\"RetainUntilDate\")\n+  private String retainUntilDate;\n+\n+ /**\n+   * Constructs a new ObjectLockRetention object.\n+   */\n+  public ObjectRetentionConfiguration() throws XmlPullParserException {\n+    super();\n+    super.name = \"Retention\";\n+  }\n+\n+  /**\n+   * Constructs a new CustomRetention object with given retention.\n+   */\n+  public ObjectRetentionConfiguration(RetentionMode mode,  DateTime retainUntilDate) throws XmlPullParserException,\n+          InvalidArgumentException {\n+    super();\n+    super.name = \"Retention\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6668cb46d60ea71909f9f868261a73b69cd7d58"}, "originalPosition": 51}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MzI4NDY1", "url": "https://github.com/minio/minio-java/pull/836#pullrequestreview-354328465", "createdAt": "2020-02-06T10:04:38Z", "commit": {"oid": "e6668cb46d60ea71909f9f868261a73b69cd7d58"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMDowNDozOFrOFmVeAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMDowNDozOFrOFmVeAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc0MTk1Mw==", "bodyText": "use this() and don't repeat logic", "url": "https://github.com/minio/minio-java/pull/836#discussion_r375741953", "createdAt": "2020-02-06T10:04:38Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/messages/ObjectLockLegalHold.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.messages;\n+\n+import org.xmlpull.v1.XmlPullParserException;\n+import com.google.api.client.util.Key;\n+\n+\n+/**\n+ * Helper class to construct create bucket configuration request XML for Amazon AWS S3.\n+ */\n+@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")\n+public class ObjectLockLegalHold extends XmlEntity{\n+  @Key(\"Status\")\n+  private String status;\n+\n+  /**\n+   * Constructs a new CustomRetention object with given retention.\n+   */\n+  public ObjectLockLegalHold() throws XmlPullParserException {\n+    super();\n+    super.name = \"LegalHold\";\n+  }\n+\n+  /**\n+   * Constructs a new CustomRetention object with given retention.\n+   */\n+  public ObjectLockLegalHold(boolean legalHold) throws  XmlPullParserException {\n+    super();\n+    super.name = \"LegalHold\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6668cb46d60ea71909f9f868261a73b69cd7d58"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MzI5MzE3", "url": "https://github.com/minio/minio-java/pull/836#pullrequestreview-354329317", "createdAt": "2020-02-06T10:05:56Z", "commit": {"oid": "e6668cb46d60ea71909f9f868261a73b69cd7d58"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMDowNTo1NlrOFmVgag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMDowNTo1NlrOFmVgag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc0MjU3MA==", "bodyText": "change error message as null mode is not allowed", "url": "https://github.com/minio/minio-java/pull/836#discussion_r375742570", "createdAt": "2020-02-06T10:05:56Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/messages/ObjectRetentionConfiguration.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.messages;\n+\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import io.minio.DateFormat;\n+import java.util.Date;\n+import org.joda.time.DateTime;\n+import com.google.api.client.util.Key;\n+import io.minio.errors.InvalidArgumentException;\n+\n+/**\n+ * Helper class to parse Amazon AWS S3 response XML containing ObjectLockRetention information.\n+ */\n+@SuppressWarnings(\"SameParameterValue\")\n+public class ObjectRetentionConfiguration extends XmlEntity {\n+  @Key(\"Mode\")\n+  private String mode;\n+  @Key(\"RetainUntilDate\")\n+  private String retainUntilDate;\n+\n+ /**\n+   * Constructs a new ObjectLockRetention object.\n+   */\n+  public ObjectRetentionConfiguration() throws XmlPullParserException {\n+    super();\n+    super.name = \"Retention\";\n+  }\n+\n+  /**\n+   * Constructs a new CustomRetention object with given retention.\n+   */\n+  public ObjectRetentionConfiguration(RetentionMode mode,  DateTime retainUntilDate) throws XmlPullParserException,\n+          InvalidArgumentException {\n+    super();\n+    super.name = \"Retention\";\n+    if (mode == null) {\n+      throw new InvalidArgumentException(\"null is not allowed in mode. Valid values are 'COMPLIANCE' and 'GOVERNANCE'\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6668cb46d60ea71909f9f868261a73b69cd7d58"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MzMwMDIy", "url": "https://github.com/minio/minio-java/pull/836#pullrequestreview-354330022", "createdAt": "2020-02-06T10:07:01Z", "commit": {"oid": "e6668cb46d60ea71909f9f868261a73b69cd7d58"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMDowNzowMVrOFmVigA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMDowNzowMVrOFmVigA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc0MzEwNA==", "bodyText": "change error message as null retainUntilDate is not allowed", "url": "https://github.com/minio/minio-java/pull/836#discussion_r375743104", "createdAt": "2020-02-06T10:07:01Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/messages/ObjectRetentionConfiguration.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.messages;\n+\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import io.minio.DateFormat;\n+import java.util.Date;\n+import org.joda.time.DateTime;\n+import com.google.api.client.util.Key;\n+import io.minio.errors.InvalidArgumentException;\n+\n+/**\n+ * Helper class to parse Amazon AWS S3 response XML containing ObjectLockRetention information.\n+ */\n+@SuppressWarnings(\"SameParameterValue\")\n+public class ObjectRetentionConfiguration extends XmlEntity {\n+  @Key(\"Mode\")\n+  private String mode;\n+  @Key(\"RetainUntilDate\")\n+  private String retainUntilDate;\n+\n+ /**\n+   * Constructs a new ObjectLockRetention object.\n+   */\n+  public ObjectRetentionConfiguration() throws XmlPullParserException {\n+    super();\n+    super.name = \"Retention\";\n+  }\n+\n+  /**\n+   * Constructs a new CustomRetention object with given retention.\n+   */\n+  public ObjectRetentionConfiguration(RetentionMode mode,  DateTime retainUntilDate) throws XmlPullParserException,\n+          InvalidArgumentException {\n+    super();\n+    super.name = \"Retention\";\n+    if (mode == null) {\n+      throw new InvalidArgumentException(\"null is not allowed in mode. Valid values are 'COMPLIANCE' and 'GOVERNANCE'\");\n+    }\n+    this.mode = mode.toString();\n+    if (retainUntilDate == null) {\n+      throw new InvalidArgumentException(\"retain until date cant be null, it must be a valid date.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6668cb46d60ea71909f9f868261a73b69cd7d58"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MzMxMTU1", "url": "https://github.com/minio/minio-java/pull/836#pullrequestreview-354331155", "createdAt": "2020-02-06T10:08:45Z", "commit": {"oid": "e6668cb46d60ea71909f9f868261a73b69cd7d58"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMDowODo0NVrOFmVlyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMDowODo0NVrOFmVlyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc0Mzk0Nw==", "bodyText": "Method name should be same as member field retainUntilDate() and return DateTime not Date i.e. should be same as argument type in the constructor", "url": "https://github.com/minio/minio-java/pull/836#discussion_r375743947", "createdAt": "2020-02-06T10:08:45Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/messages/ObjectRetentionConfiguration.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.messages;\n+\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import io.minio.DateFormat;\n+import java.util.Date;\n+import org.joda.time.DateTime;\n+import com.google.api.client.util.Key;\n+import io.minio.errors.InvalidArgumentException;\n+\n+/**\n+ * Helper class to parse Amazon AWS S3 response XML containing ObjectLockRetention information.\n+ */\n+@SuppressWarnings(\"SameParameterValue\")\n+public class ObjectRetentionConfiguration extends XmlEntity {\n+  @Key(\"Mode\")\n+  private String mode;\n+  @Key(\"RetainUntilDate\")\n+  private String retainUntilDate;\n+\n+ /**\n+   * Constructs a new ObjectLockRetention object.\n+   */\n+  public ObjectRetentionConfiguration() throws XmlPullParserException {\n+    super();\n+    super.name = \"Retention\";\n+  }\n+\n+  /**\n+   * Constructs a new CustomRetention object with given retention.\n+   */\n+  public ObjectRetentionConfiguration(RetentionMode mode,  DateTime retainUntilDate) throws XmlPullParserException,\n+          InvalidArgumentException {\n+    super();\n+    super.name = \"Retention\";\n+    if (mode == null) {\n+      throw new InvalidArgumentException(\"null is not allowed in mode. Valid values are 'COMPLIANCE' and 'GOVERNANCE'\");\n+    }\n+    this.mode = mode.toString();\n+    if (retainUntilDate == null) {\n+      throw new InvalidArgumentException(\"retain until date cant be null, it must be a valid date.\");\n+    }\n+    \n+    this.retainUntilDate = retainUntilDate.toString(DateFormat.RETENTION_DATE_FORMAT);  \n+  }\n+\n+  /**\n+   * Returns mode.\n+   */\n+  public RetentionMode mode() {\n+    return RetentionMode.fromString(mode);\n+  }\n+\n+  /**\n+   * Returns retain until date.\n+   */\n+  public Date retainUntil() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6668cb46d60ea71909f9f868261a73b69cd7d58"}, "originalPosition": 73}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MzMzMzc3", "url": "https://github.com/minio/minio-java/pull/836#pullrequestreview-354333377", "createdAt": "2020-02-06T10:12:07Z", "commit": {"oid": "e6668cb46d60ea71909f9f868261a73b69cd7d58"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMDoxMjowN1rOFmVsqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMDoxMjowN1rOFmVsqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc0NTcwNQ==", "bodyText": "Have overloaded executePost() i.e. with/without md5Required argument.", "url": "https://github.com/minio/minio-java/pull/836#discussion_r375745705", "createdAt": "2020-02-06T10:12:07Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -1402,11 +1400,12 @@ private HttpResponse executeDelete(String bucketName, String objectName, Map<Str\n    * @param data           HTTP request body data.\n    */\n   private HttpResponse executePost(String bucketName, String objectName, Map<String,String> headerMap,\n-                                   Map<String,String> queryParamMap, Object data)\n+                                   Map<String,String> queryParamMap, Object data, boolean md5Required)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6668cb46d60ea71909f9f868261a73b69cd7d58"}, "originalPosition": 123}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MzMzODMz", "url": "https://github.com/minio/minio-java/pull/836#pullrequestreview-354333833", "createdAt": "2020-02-06T10:12:49Z", "commit": {"oid": "e6668cb46d60ea71909f9f868261a73b69cd7d58"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMDoxMjo1MFrOFmVuDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMDoxMjo1MFrOFmVuDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc0NjA2Mg==", "bodyText": "Have overloaded executePut() i.e. with/without md5Required", "url": "https://github.com/minio/minio-java/pull/836#discussion_r375746062", "createdAt": "2020-02-06T10:12:50Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -1439,13 +1438,13 @@ private HttpResponse executePost(String bucketName, String objectName, Map<Strin\n    * @param length         Length of HTTP request body data.\n    */\n   private HttpResponse executePut(String bucketName, String objectName, Map<String,String> headerMap,\n-                                  Map<String,String> queryParamMap, String region, Object data, int length)\n+                  Map<String,String> queryParamMap, String region, Object data, int length, boolean md5Required)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6668cb46d60ea71909f9f868261a73b69cd7d58"}, "originalPosition": 138}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MzM0NDQy", "url": "https://github.com/minio/minio-java/pull/836#pullrequestreview-354334442", "createdAt": "2020-02-06T10:13:43Z", "commit": {"oid": "e6668cb46d60ea71909f9f868261a73b69cd7d58"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMDoxMzo0M1rOFmVv7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMDoxMzo0M1rOFmVv7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc0NjU0MA==", "bodyText": "Same as above", "url": "https://github.com/minio/minio-java/pull/836#discussion_r375746540", "createdAt": "2020-02-06T10:13:43Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -1461,11 +1460,12 @@ private HttpResponse executePut(String bucketName, String objectName, Map<String\n    * @param length         Length of HTTP request body data.\n    */\n   private HttpResponse executePut(String bucketName, String objectName, Map<String,String> headerMap,\n-                                  Map<String,String> queryParamMap, Object data, int length)\n+                                  Map<String,String> queryParamMap, Object data, int length,  boolean md5Required)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6668cb46d60ea71909f9f868261a73b69cd7d58"}, "originalPosition": 154}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MzM1MzIy", "url": "https://github.com/minio/minio-java/pull/836#pullrequestreview-354335322", "createdAt": "2020-02-06T10:15:06Z", "commit": {"oid": "e6668cb46d60ea71909f9f868261a73b69cd7d58"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMDoxNTowN1rOFmVycg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMDoxNTowN1rOFmVycg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc0NzE4Ng==", "bodyText": "Use overloaded executePut()/executePost() accepting md5Required argument to avoid unnecessary diffs.", "url": "https://github.com/minio/minio-java/pull/836#discussion_r375747186", "createdAt": "2020-02-06T10:15:07Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -2388,7 +2388,7 @@ public void copyObject(String bucketName, String objectName, Map<String,String>\n       headerMap.putAll(copyConditions.getConditions());\n     }\n \n-    HttpResponse response = executePut(bucketName, objectName, headerMap, null, \"\", 0);\n+    HttpResponse response = executePut(bucketName, objectName, headerMap, null, \"\", 0, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6668cb46d60ea71909f9f868261a73b69cd7d58"}, "originalPosition": 178}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e6668cb46d60ea71909f9f868261a73b69cd7d58", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/e6668cb46d60ea71909f9f868261a73b69cd7d58", "committedDate": "2020-02-06T06:23:14Z", "message": "Add argument to calculate md5 if needed"}, "afterCommit": {"oid": "1462c63754e41ff6a45347cbf98bead336c78032", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/1462c63754e41ff6a45347cbf98bead336c78032", "committedDate": "2020-02-06T19:27:48Z", "message": "Add argument to calculate md5 if needed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a96dde372c48c15346f500883e8b71d862552c07", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/a96dde372c48c15346f500883e8b71d862552c07", "committedDate": "2020-02-07T04:19:34Z", "message": "Add new method to set/get object retention and legal hold"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29bdecdb961f1b58f0bbf4951072c38ceabfad7d", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/29bdecdb961f1b58f0bbf4951072c38ceabfad7d", "committedDate": "2020-02-07T04:19:34Z", "message": "Legal Hold methods modified"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0f3cd296db34a04675dc5a91413b4ee6f45eb41e", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/0f3cd296db34a04675dc5a91413b4ee6f45eb41e", "committedDate": "2020-02-07T01:36:40Z", "message": "Merge branch 'master' into get-set-object-retention"}, "afterCommit": {"oid": "bb595dd63be6d9220d6ebd3cbbfe2f0d4f136372", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/bb595dd63be6d9220d6ebd3cbbfe2f0d4f136372", "committedDate": "2020-02-07T04:19:34Z", "message": "Add argument to calculate md5 if needed"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NTQ4MTQ3", "url": "https://github.com/minio/minio-java/pull/836#pullrequestreview-355548147", "createdAt": "2020-02-08T13:35:54Z", "commit": {"oid": "bb595dd63be6d9220d6ebd3cbbfe2f0d4f136372"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQxMzozNTo1NVrOFnQlVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQxMzozNTo1NVrOFnQlVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxMDQ4Nw==", "bodyText": "mode can be null. You need to return null accordingly", "url": "https://github.com/minio/minio-java/pull/836#discussion_r376710487", "createdAt": "2020-02-08T13:35:55Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/messages/ObjectRetentionConfiguration.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.messages;\n+\n+import org.xmlpull.v1.XmlPullParserException;\n+\n+import io.minio.DateFormat;\n+import org.joda.time.DateTime;\n+import com.google.api.client.util.Key;\n+import io.minio.errors.InvalidArgumentException;\n+\n+/**\n+ * Helper class to parse Amazon AWS S3 response XML containing ObjectLockRetention information.\n+ */\n+@SuppressWarnings(\"SameParameterValue\")\n+public class ObjectRetentionConfiguration extends XmlEntity {\n+  @Key(\"Mode\")\n+  private String mode;\n+  @Key(\"RetainUntilDate\")\n+  private String retainUntilDate;\n+\n+ /**\n+   * Constructs a new ObjectRetentionConfiguration object.\n+   */\n+  public ObjectRetentionConfiguration() throws XmlPullParserException {\n+    super();\n+    super.name = \"Retention\";\n+  }\n+\n+  /**\n+   * Constructs a new ObjectRetentionConfiguration object with given retention \n+   * until date and mode.\n+   */\n+  public ObjectRetentionConfiguration(RetentionMode mode,  DateTime retainUntilDate) throws XmlPullParserException,\n+          InvalidArgumentException {\n+    this();\n+    if (mode == null) {\n+      throw new InvalidArgumentException(\"null mode is not allowed\");\n+    }\n+    this.mode = mode.toString();\n+    if (retainUntilDate == null) {\n+      throw new InvalidArgumentException(\"null retainUntilDate is not allowed\");\n+    }    \n+    this.retainUntilDate = retainUntilDate.toString(DateFormat.EXPIRATION_DATE_FORMAT);  \n+  }\n+\n+  /**\n+   * Returns mode.\n+   */\n+  public RetentionMode mode() {\n+    return RetentionMode.fromString(mode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb595dd63be6d9220d6ebd3cbbfe2f0d4f136372"}, "originalPosition": 65}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NTQ4MjAx", "url": "https://github.com/minio/minio-java/pull/836#pullrequestreview-355548201", "createdAt": "2020-02-08T13:37:28Z", "commit": {"oid": "bb595dd63be6d9220d6ebd3cbbfe2f0d4f136372"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQxMzozNzoyOVrOFnQlqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQxMzozNzoyOVrOFnQlqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxMDU2OQ==", "bodyText": "return status != null && status.equals(\"ON\"); is correct and sufficient", "url": "https://github.com/minio/minio-java/pull/836#discussion_r376710569", "createdAt": "2020-02-08T13:37:29Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/messages/ObjectLockLegalHold.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.messages;\n+\n+import org.xmlpull.v1.XmlPullParserException;\n+import com.google.api.client.util.Key;\n+\n+\n+/**\n+ * Helper class to construct create bucket configuration request XML for Amazon AWS S3.\n+ */\n+@edu.umd.cs.findbugs.annotations.SuppressFBWarnings(value = \"URF_UNREAD_FIELD\")\n+public class ObjectLockLegalHold extends XmlEntity{\n+  @Key(\"Status\")\n+  private String status;\n+\n+  /**\n+   * Constructs a new ObjectLockLegalHold object .\n+   */\n+  public ObjectLockLegalHold() throws XmlPullParserException {\n+    super();\n+    super.name = \"LegalHold\";\n+  }\n+\n+  /**\n+   * Constructs a new ObjectLockLegalHold object with given status.\n+   */\n+  public ObjectLockLegalHold(boolean status) throws  XmlPullParserException {\n+    this();\n+    if (status) {\n+      this.status = \"ON\";\n+    } else {\n+      this.status = \"OFF\";\n+    }\n+  }\n+\n+  /**\n+   * Indicates whether the specified object has a Legal Hold in place or not.\n+   */\n+  public boolean status() {\n+    if (status.equals(\"ON\")) {\n+      return true;\n+    }\n+    return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb595dd63be6d9220d6ebd3cbbfe2f0d4f136372"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NTQ4NTEz", "url": "https://github.com/minio/minio-java/pull/836#pullrequestreview-355548513", "createdAt": "2020-02-08T13:45:26Z", "commit": {"oid": "bb595dd63be6d9220d6ebd3cbbfe2f0d4f136372"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQxMzo0NToyNlrOFnQnGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQxMzo0NToyNlrOFnQnGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxMDkzOA==", "bodyText": "I don't know why you are missing out of versionId handling. Are you deferring in other places?", "url": "https://github.com/minio/minio-java/pull/836#discussion_r376710938", "createdAt": "2020-02-08T13:45:26Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -3895,6 +3956,247 @@ public ObjectLockConfiguration getDefaultRetention(String bucketName)\n   }\n \n \n+  /**\n+   * Applies object retention lock onto an object.\n+   *\n+   * </p><b>Example:</b><br>\n+   * <pre>{@code minioClient.setObjectRetention(\"my-bucketname\", \"my-object\", config, true );\n+   * System.out.println(\"Set object retention on my-object successfully.\"); }</pre>\n+   *\n+   * @param bucketName Bucket name.\n+   * @param objectName Object name.\n+   * @param versionId  Object versio id.\n+   * @param config     Object lock configuration.\n+   * @param bypassGovernanceRetention  By pass governance retention.\n+   *\n+   * @throws InvalidBucketNameException  upon invalid bucket name is given\n+   * @throws NoSuchAlgorithmException\n+   *           upon requested algorithm was not found during signature calculation\n+   * @throws InsufficientDataException  upon getting EOFException while reading given\n+   *           InputStream even before reading given length\n+   * @throws IOException                 upon connection error\n+   * @throws InvalidKeyException\n+   *           upon an invalid access key or secret key\n+   * @throws NoResponseException         upon no response from server\n+   * @throws XmlPullParserException      upon parsing response xml\n+   * @throws ErrorResponseException      upon unsuccessful execution\n+   * @throws InternalException           upon internal library error\n+   * @throws InvalidResponseException    upon a non-xml response from server\n+   * @throws InvalidArgumentException    upon invalid value is passed to a method.\n+   */\n+  public void setObjectRetention(String bucketName, String objectName, String versionId, \n+          ObjectRetentionConfiguration config, boolean bypassGovernanceRetention)\n+    throws InvalidBucketNameException, NoSuchAlgorithmException, InsufficientDataException, IOException,\n+           InvalidKeyException, NoResponseException, XmlPullParserException, ErrorResponseException,\n+           InternalException, InvalidResponseException, InvalidArgumentException {\n+\n+    if (config == null ) {\n+      throw new InvalidArgumentException(\"null value is not allowed in config.\");\n+    }\n+\n+    Map<String, String> queryParamMap = new HashMap<>();\n+    queryParamMap.put(\"retention\", \"\");\n+\n+    if (versionId == null) {\n+      queryParamMap.put(\"versionId\", \"\");\n+    } else {\n+      queryParamMap.put(\"versionId\", versionId);\n+    }\n+\n+    Map<String, String> headerMap = new HashMap<>();\n+    if (bypassGovernanceRetention) {\n+      headerMap.put(\"x-amz-bypass-governance-retention\", \"True\");\n+    }\n+\n+    HttpResponse response = executePut(bucketName, objectName, headerMap, queryParamMap, config, 0);\n+    response.body().close();\n+  }\n+\n+  /**\n+   * Fetches object retention lock of an object.\n+   *\n+   * </p><b>Example:</b><br>\n+   * <pre>{@code\n+   * ObjectRetentionConfiguration objectRetentionConfiguration = minioClient.getObjectRetention(\"my-bucketname\", \n+   * \"my-object\", \"version-Id\" );\n+   * System.out.println(\"Mode \" + objectRetentionConfiguration.mode()); \n+   * System.out.println(\"Retanetion Until  \" + objectRetentionConfiguration.getRetentionDate()); }</pre>\n+   *\n+   * @param bucketName Bucket name.\n+   * @param objectName Object name.\n+   * @param versionId  Version Id.\n+   *\n+   * @throws InvalidBucketNameException  upon invalid bucket name is given\n+   * @throws NoSuchAlgorithmException\n+   *           upon requested algorithm was not found during signature calculation\n+   * @throws InsufficientDataException  upon getting EOFException while reading given\n+   *           InputStream even before reading given length\n+   * @throws IOException                 upon connection error\n+   * @throws InvalidKeyException\n+   *           upon an invalid access key or secret key\n+   * @throws NoResponseException         upon no response from server\n+   * @throws XmlPullParserException      upon parsing response xml\n+   * @throws ErrorResponseException      upon unsuccessful execution\n+   * @throws InternalException           upon internal library error\n+   * @throws InvalidResponseException    upon a non-xml response from server\n+   */\n+  public ObjectRetentionConfiguration getObjectRetention(String bucketName, String objectName, String versionId)\n+    throws InvalidBucketNameException, NoSuchAlgorithmException, InsufficientDataException, IOException,\n+           InvalidKeyException, NoResponseException, XmlPullParserException, ErrorResponseException,\n+           InternalException, InvalidResponseException {\n+\n+    Map<String, String> queryParamMap = new HashMap<>();\n+    queryParamMap.put(\"retention\", \"\");\n+\n+    if ( !(versionId == null || versionId.isEmpty())) {\n+      queryParamMap.put(\"versionId\",versionId);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb595dd63be6d9220d6ebd3cbbfe2f0d4f136372"}, "originalPosition": 340}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NTQ4NjQ1", "url": "https://github.com/minio/minio-java/pull/836#pullrequestreview-355548645", "createdAt": "2020-02-08T13:48:48Z", "commit": {"oid": "bb595dd63be6d9220d6ebd3cbbfe2f0d4f136372"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQxMzo0ODo0OFrOFnQnxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQxMzo0ODo0OFrOFnQnxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcxMTExMA==", "bodyText": "As we agreed previously, you are going to send separate PR to have putObject() with retention and legal hold. Are you still considering to add in this PR?", "url": "https://github.com/minio/minio-java/pull/836#discussion_r376711110", "createdAt": "2020-02-08T13:48:48Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -4096,6 +4398,51 @@ public void putObject(String bucketName, String objectName, String fileName,  Lo\n            InvalidKeyException, NoResponseException, XmlPullParserException, ErrorResponseException,\n            InternalException, InvalidArgumentException, InsufficientDataException, InvalidResponseException {\n \n+    putObject(bucketName, objectName, fileName, size, headerMap, sse, contentType, false);\n+  }\n+\n+\n+   /**\n+   * Uploads given file as object in given bucket.\n+   * <p>\n+   * If the object is larger than 5MB, the client will automatically use a multipart session.\n+   * </p>\n+   * <p>\n+   * If the session fails, the user may attempt to re-upload the object by attempting to create\n+   * the exact same object again.\n+   * </p>\n+   * <p>\n+   * If the multipart session fails, abort the uploaded parts automatically.\n+   * </p>\n+   *\n+   * @param bucketName  Bucket name.\n+   * @param objectName  Object name to create in the bucket.\n+   * @param fileName    File name to upload.\n+   * @param size        Size of all the data that will be uploaded.\n+   * @param headerMap   Custom/additional meta data of the object.\n+   * @param sse         encryption metadata.\n+   * @param contentType Content type of the stream.\n+   * @param objectLockRetention Object lock retention.\n+   *\n+   * @throws InvalidBucketNameException  upon invalid bucket name is given\n+   * @throws NoSuchAlgorithmException\n+   *           upon requested algorithm was not found during signature calculation\n+   * @throws IOException                 upon connection error\n+   * @throws InvalidKeyException\n+   *           upon an invalid access key or secret key\n+   * @throws NoResponseException         upon no response from server\n+   * @throws XmlPullParserException      upon parsing response xml\n+   * @throws ErrorResponseException      upon unsuccessful execution\n+   * @throws InternalException           upon internal library error\n+   * @throws InvalidArgumentException    upon invalid value is passed to a method.\n+   * @throws InsufficientDataException   upon getting EOFException while reading given\n+   */\n+  public void putObject(String bucketName, String objectName, String fileName, Long size, Map<String, String> headerMap,\n+                        ServerSideEncryption sse, String contentType, boolean objectLockRetention)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb595dd63be6d9220d6ebd3cbbfe2f0d4f136372"}, "originalPosition": 534}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc431ebdebd79eedc779d37135ab036109eb3b67", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/fc431ebdebd79eedc779d37135ab036109eb3b67", "committedDate": "2020-02-09T02:07:09Z", "message": "Add argument to calculate md5 if needed"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bb595dd63be6d9220d6ebd3cbbfe2f0d4f136372", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/bb595dd63be6d9220d6ebd3cbbfe2f0d4f136372", "committedDate": "2020-02-07T04:19:34Z", "message": "Add argument to calculate md5 if needed"}, "afterCommit": {"oid": "fc431ebdebd79eedc779d37135ab036109eb3b67", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/fc431ebdebd79eedc779d37135ab036109eb3b67", "committedDate": "2020-02-09T02:07:09Z", "message": "Add argument to calculate md5 if needed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c5206faf76ba3c62d3985b2178d65ed617de8f2", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/2c5206faf76ba3c62d3985b2178d65ed617de8f2", "committedDate": "2020-02-12T14:02:20Z", "message": "Remove overloaded putObject"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fffaeec58d627fa994e681612773135d9ff53135", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/fffaeec58d627fa994e681612773135d9ff53135", "committedDate": "2020-02-12T13:32:25Z", "message": "Remove overloaded putObject"}, "afterCommit": {"oid": "2c5206faf76ba3c62d3985b2178d65ed617de8f2", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/2c5206faf76ba3c62d3985b2178d65ed617de8f2", "committedDate": "2020-02-12T14:02:20Z", "message": "Remove overloaded putObject"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3OTA0MjU2", "url": "https://github.com/minio/minio-java/pull/836#pullrequestreview-357904256", "createdAt": "2020-02-13T01:34:21Z", "commit": {"oid": "2c5206faf76ba3c62d3985b2178d65ed617de8f2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU3OTIzNjk5", "url": "https://github.com/minio/minio-java/pull/836#pullrequestreview-357923699", "createdAt": "2020-02-13T02:46:03Z", "commit": {"oid": "2c5206faf76ba3c62d3985b2178d65ed617de8f2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1957, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}