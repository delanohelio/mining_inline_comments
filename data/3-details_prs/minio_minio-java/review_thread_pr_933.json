{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3OTI3MTEw", "number": 933, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMTo1NzowOVrOEADeog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzoyMzoyOVrOEAF2qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NDkyNDUwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/SetBucketPolicyArgs.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMTo1NzowOVrOGbF30A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNTowNjo1MFrOGbPOoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA2MDk0NA==", "bodyText": "Add @Override annotation to this method", "url": "https://github.com/minio/minio-java/pull/933#discussion_r431060944", "createdAt": "2020-05-27T11:57:09Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/SetBucketPolicyArgs.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+/** Argument class of MinioClient.setBucketPolicy(). */\n+public class SetBucketPolicyArgs extends BucketArgs {\n+  private String config;\n+\n+  public String config() {\n+    return config;\n+  }\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  /** Argument builder of {@link SetBucketPolicyArgs}. */\n+  public static final class Builder extends BucketArgs.Builder<Builder, SetBucketPolicyArgs> {\n+    private void validateConfig(String config) {\n+      if (config == null) {\n+        throw new IllegalArgumentException(\"null policy configuration\");\n+      }\n+    }\n+\n+    protected void validate(SetBucketPolicyArgs args) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d27af9b457f32f5094863474d4a1ceaf554da1da"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIxNDI0MQ==", "bodyText": "Done", "url": "https://github.com/minio/minio-java/pull/933#discussion_r431214241", "createdAt": "2020-05-27T15:06:50Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/SetBucketPolicyArgs.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+/** Argument class of MinioClient.setBucketPolicy(). */\n+public class SetBucketPolicyArgs extends BucketArgs {\n+  private String config;\n+\n+  public String config() {\n+    return config;\n+  }\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  /** Argument builder of {@link SetBucketPolicyArgs}. */\n+  public static final class Builder extends BucketArgs.Builder<Builder, SetBucketPolicyArgs> {\n+    private void validateConfig(String config) {\n+      if (config == null) {\n+        throw new IllegalArgumentException(\"null policy configuration\");\n+      }\n+    }\n+\n+    protected void validate(SetBucketPolicyArgs args) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA2MDk0NA=="}, "originalCommit": {"oid": "d27af9b457f32f5094863474d4a1ceaf554da1da"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTIyMTM1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/MinioClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzowOTo0N1rOGbI5kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNToxMDowNlrOGbPYHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTExMDU0NA==", "bodyText": "This can be replaced with checkArgs(args); after rebasing with latest master branch", "url": "https://github.com/minio/minio-java/pull/933#discussion_r431110544", "createdAt": "2020-05-27T13:09:47Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -4295,20 +4295,53 @@ public void putObject(\n    * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n    * @throws XmlParserException thrown to indicate XML parsing error.\n    */\n+  @Deprecated\n   public String getBucketPolicy(String bucketName)\n       throws BucketPolicyTooLargeException, ErrorResponseException, IllegalArgumentException,\n           InsufficientDataException, InternalException, InvalidBucketNameException,\n           InvalidKeyException, InvalidResponseException, IOException, NoSuchAlgorithmException,\n           XmlParserException {\n+    return getBucketPolicy(GetBucketPolicyArgs.builder().bucket(bucketName).build());\n+  }\n+\n+  /**\n+   * Gets bucket policy configuration of a bucket.\n+   *\n+   * <pre>Example:{@code\n+   * String config =\n+   *     minioClient.getBucketPolicy(GetBucketPolicyArgs.builder().bucket(\"my-bucketname\").build());\n+   * }</pre>\n+   *\n+   * @param args {@link GetBucketPolicyArgs} object.\n+   * @return String - Bucket policy configuration as JSON string.\n+   * @throws BucketPolicyTooLargeException thrown to indicate returned bucket policy is too large.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  public String getBucketPolicy(GetBucketPolicyArgs args)\n+      throws BucketPolicyTooLargeException, ErrorResponseException, IllegalArgumentException,\n+          InsufficientDataException, InternalException, InvalidBucketNameException,\n+          InvalidKeyException, InvalidResponseException, IOException, NoSuchAlgorithmException,\n+          XmlParserException {\n+    if (args == null) {\n+      throw new IllegalArgumentException(\"null arguments\");\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d27af9b457f32f5094863474d4a1ceaf554da1da"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIxNjY2OQ==", "bodyText": "Done", "url": "https://github.com/minio/minio-java/pull/933#discussion_r431216669", "createdAt": "2020-05-27T15:10:06Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -4295,20 +4295,53 @@ public void putObject(\n    * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n    * @throws XmlParserException thrown to indicate XML parsing error.\n    */\n+  @Deprecated\n   public String getBucketPolicy(String bucketName)\n       throws BucketPolicyTooLargeException, ErrorResponseException, IllegalArgumentException,\n           InsufficientDataException, InternalException, InvalidBucketNameException,\n           InvalidKeyException, InvalidResponseException, IOException, NoSuchAlgorithmException,\n           XmlParserException {\n+    return getBucketPolicy(GetBucketPolicyArgs.builder().bucket(bucketName).build());\n+  }\n+\n+  /**\n+   * Gets bucket policy configuration of a bucket.\n+   *\n+   * <pre>Example:{@code\n+   * String config =\n+   *     minioClient.getBucketPolicy(GetBucketPolicyArgs.builder().bucket(\"my-bucketname\").build());\n+   * }</pre>\n+   *\n+   * @param args {@link GetBucketPolicyArgs} object.\n+   * @return String - Bucket policy configuration as JSON string.\n+   * @throws BucketPolicyTooLargeException thrown to indicate returned bucket policy is too large.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  public String getBucketPolicy(GetBucketPolicyArgs args)\n+      throws BucketPolicyTooLargeException, ErrorResponseException, IllegalArgumentException,\n+          InsufficientDataException, InternalException, InvalidBucketNameException,\n+          InvalidKeyException, InvalidResponseException, IOException, NoSuchAlgorithmException,\n+          XmlParserException {\n+    if (args == null) {\n+      throw new IllegalArgumentException(\"null arguments\");\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTExMDU0NA=="}, "originalCommit": {"oid": "d27af9b457f32f5094863474d4a1ceaf554da1da"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTIzMjI3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/MinioClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzoxMToxOFrOGbJA-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNToxNDo0M1rOGbPl3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTExMjQ0Mw==", "bodyText": "Good to add a javadoc comment with @deprecated also providing link to the alternate method to be used", "url": "https://github.com/minio/minio-java/pull/933#discussion_r431112443", "createdAt": "2020-05-27T13:11:18Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -4295,20 +4295,53 @@ public void putObject(\n    * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n    * @throws XmlParserException thrown to indicate XML parsing error.\n    */\n+  @Deprecated", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d27af9b457f32f5094863474d4a1ceaf554da1da"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIyMDE5MQ==", "bodyText": "Done", "url": "https://github.com/minio/minio-java/pull/933#discussion_r431220191", "createdAt": "2020-05-27T15:14:43Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -4295,20 +4295,53 @@ public void putObject(\n    * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n    * @throws XmlParserException thrown to indicate XML parsing error.\n    */\n+  @Deprecated", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTExMjQ0Mw=="}, "originalCommit": {"oid": "d27af9b457f32f5094863474d4a1ceaf554da1da"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4NTMxMzY5OnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzoyMzoyOVrOGbJ5uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxMjoyMTo0NFrOGbyk3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEyNjk2OQ==", "bodyText": "Maybe we should verify that the value returned by getBucketPolicy matches what was set in the previous step?", "url": "https://github.com/minio/minio-java/pull/933#discussion_r431126969", "createdAt": "2020-05-27T13:23:29Z", "author": {"login": "anjalshireesh"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3798,35 +3795,20 @@ public static void getBucketPolicy_test1() throws Exception {\n               + \"\\\"Principal\\\":{\\\"AWS\\\":[\\\"*\\\"]},\\\"Resource\\\":[\\\"arn:aws:s3:::\"\n               + bucketName\n               + \"/myobject*\\\"],\\\"Sid\\\":\\\"\\\"}]}\";\n-      client.setBucketPolicy(bucketName, policy);\n-      client.getBucketPolicy(bucketName);\n-      mintSuccessLog(\"getBucketPolicy(String bucketName)\", null, startTime);\n+      client.setBucketPolicy(\n+          SetBucketPolicyArgs.builder().bucket(bucketName).config(policy).build());\n+      client.getBucketPolicy(GetBucketPolicyArgs.builder().bucket(bucketName).build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d27af9b457f32f5094863474d4a1ceaf554da1da"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTIyNzEyNA==", "bodyText": "I think it is hard to check. For example below two JSON string are same.\n{\"Version\":\"2012-10-17\",\"Statement\":[{\"Action\":[\"s3:GetObject\"],\"Effect\":\"Allow\",\"Principal\":{\"AWS\":[\"*\"]},\"Resource\":[\"arn:aws:s3:::MYBUCKET/myobject*\"],\"Sid\":\"\"}]}\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Action\": [\n                \"s3:GetObject\"\n            ],\n            \"Effect\": \"Allow\",\n            \"Principal\": {\n                \"AWS\": [\n                    \"*\"\n                ]\n            },\n            \"Resource\": [\n                \"arn:aws:s3:::MYBUCKET/myobject*\"\n            ],\n            \"Sid\": \"\"\n        }\n    ]\n}\nServer may return a JSON which can be formatted differently but equally same.", "url": "https://github.com/minio/minio-java/pull/933#discussion_r431227124", "createdAt": "2020-05-27T15:23:53Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3798,35 +3795,20 @@ public static void getBucketPolicy_test1() throws Exception {\n               + \"\\\"Principal\\\":{\\\"AWS\\\":[\\\"*\\\"]},\\\"Resource\\\":[\\\"arn:aws:s3:::\"\n               + bucketName\n               + \"/myobject*\\\"],\\\"Sid\\\":\\\"\\\"}]}\";\n-      client.setBucketPolicy(bucketName, policy);\n-      client.getBucketPolicy(bucketName);\n-      mintSuccessLog(\"getBucketPolicy(String bucketName)\", null, startTime);\n+      client.setBucketPolicy(\n+          SetBucketPolicyArgs.builder().bucket(bucketName).config(policy).build());\n+      client.getBucketPolicy(GetBucketPolicyArgs.builder().bucket(bucketName).build());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEyNjk2OQ=="}, "originalCommit": {"oid": "d27af9b457f32f5094863474d4a1ceaf554da1da"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTc5MzM3Mw==", "bodyText": "Should be possible by marshalling/unmarshalling from/into a java object, but probably not worth the effort here.", "url": "https://github.com/minio/minio-java/pull/933#discussion_r431793373", "createdAt": "2020-05-28T12:21:44Z", "author": {"login": "anjalshireesh"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3798,35 +3795,20 @@ public static void getBucketPolicy_test1() throws Exception {\n               + \"\\\"Principal\\\":{\\\"AWS\\\":[\\\"*\\\"]},\\\"Resource\\\":[\\\"arn:aws:s3:::\"\n               + bucketName\n               + \"/myobject*\\\"],\\\"Sid\\\":\\\"\\\"}]}\";\n-      client.setBucketPolicy(bucketName, policy);\n-      client.getBucketPolicy(bucketName);\n-      mintSuccessLog(\"getBucketPolicy(String bucketName)\", null, startTime);\n+      client.setBucketPolicy(\n+          SetBucketPolicyArgs.builder().bucket(bucketName).config(policy).build());\n+      client.getBucketPolicy(GetBucketPolicyArgs.builder().bucket(bucketName).build());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEyNjk2OQ=="}, "originalCommit": {"oid": "d27af9b457f32f5094863474d4a1ceaf554da1da"}, "originalPosition": 89}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 687, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}