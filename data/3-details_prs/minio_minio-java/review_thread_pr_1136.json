{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM4MTkyODA0", "number": 1136, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNjo1NDo1NFrOFIb8ZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMjo1OTo1MVrOFLRYIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0MzkwNzU3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/errors/BucketPolicyTooLargeException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNjo1NDo1NFrOIKWhvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwNzozMTowNFrOIKYNQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcyNTc1Ng==", "bodyText": "https://docs.aws.amazon.com/AmazonS3/latest/dev/example-bucket-policies.html\naccording to AWS S3 and MinIO the max size is 20 KiB", "url": "https://github.com/minio/minio-java/pull/1136#discussion_r547725756", "createdAt": "2020-12-23T06:54:54Z", "author": {"login": "kannappanr"}, "path": "api/src/main/java/io/minio/errors/BucketPolicyTooLargeException.java", "diffHunk": "@@ -16,23 +16,10 @@\n \n package io.minio.errors;\n \n-/** Thrown to indicate that given bucket name is not valid. */\n+/** Thrown to indicate that received bucket policy is larger than 12KiB size. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e33cf40ed8efa0ad7c05928c4575c5497b857aca"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzc1MzI4Mw==", "bodyText": "Looks like it is increased from 12KB to 20KB", "url": "https://github.com/minio/minio-java/pull/1136#discussion_r547753283", "createdAt": "2020-12-23T07:31:04Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/errors/BucketPolicyTooLargeException.java", "diffHunk": "@@ -16,23 +16,10 @@\n \n package io.minio.errors;\n \n-/** Thrown to indicate that given bucket name is not valid. */\n+/** Thrown to indicate that received bucket policy is larger than 12KiB size. */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzcyNTc1Ng=="}, "originalCommit": {"oid": "e33cf40ed8efa0ad7c05928c4575c5497b857aca"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3Mjc3NjIxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/MinioClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQwODozODowMVrOIOOZiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjo1MDowNFrOIOe5sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc4Njg4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              private static final Set<String> TRACE_QUERY_PARAMS = new HashSet<>();\n          \n          \n            \n            \n          \n          \n            \n              static {\n          \n          \n            \n                TRACE_QUERY_PARAMS.add(\"retention\");\n          \n          \n            \n                TRACE_QUERY_PARAMS.add(\"legal-hold\");\n          \n          \n            \n                TRACE_QUERY_PARAMS.add(\"tagging\");\n          \n          \n            \n                TRACE_QUERY_PARAMS.add(UPLOAD_ID);\n          \n          \n            \n              }\n          \n          \n            \n              private static final Set<String> TRACE_QUERY_PARAMS =\n          \n          \n            \n                ImmutableSet.of(\"retention\", \"legal-hold\", \"tagging\", UPLOAD_ID);\n          \n      \n    \n    \n  \n\nwe can use ImmutableSet from guava library for a simpler initialization of the set.", "url": "https://github.com/minio/minio-java/pull/1136#discussion_r551786889", "createdAt": "2021-01-05T08:38:01Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -229,6 +230,15 @@\n     standardHeaders.add(\"range\");\n   }\n \n+  private static final Set<String> TRACE_QUERY_PARAMS = new HashSet<>();\n+\n+  static {\n+    TRACE_QUERY_PARAMS.add(\"retention\");\n+    TRACE_QUERY_PARAMS.add(\"legal-hold\");\n+    TRACE_QUERY_PARAMS.add(\"tagging\");\n+    TRACE_QUERY_PARAMS.add(UPLOAD_ID);\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "656f94d90b8ad03861ae9c70552bf5e393193572"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkyNjk2NA==", "bodyText": "This pattern needs to be fixed across code base in a different PR", "url": "https://github.com/minio/minio-java/pull/1136#discussion_r551926964", "createdAt": "2021-01-05T13:20:56Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -229,6 +230,15 @@\n     standardHeaders.add(\"range\");\n   }\n \n+  private static final Set<String> TRACE_QUERY_PARAMS = new HashSet<>();\n+\n+  static {\n+    TRACE_QUERY_PARAMS.add(\"retention\");\n+    TRACE_QUERY_PARAMS.add(\"legal-hold\");\n+    TRACE_QUERY_PARAMS.add(\"tagging\");\n+    TRACE_QUERY_PARAMS.add(UPLOAD_ID);\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc4Njg4OQ=="}, "originalCommit": {"oid": "656f94d90b8ad03861ae9c70552bf5e393193572"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA1NzI2Nw==", "bodyText": "May not be a bad idea to change only in this place as it's a new code being added in this PR and later fix the other instances.", "url": "https://github.com/minio/minio-java/pull/1136#discussion_r552057267", "createdAt": "2021-01-05T16:50:04Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -229,6 +230,15 @@\n     standardHeaders.add(\"range\");\n   }\n \n+  private static final Set<String> TRACE_QUERY_PARAMS = new HashSet<>();\n+\n+  static {\n+    TRACE_QUERY_PARAMS.add(\"retention\");\n+    TRACE_QUERY_PARAMS.add(\"legal-hold\");\n+    TRACE_QUERY_PARAMS.add(\"tagging\");\n+    TRACE_QUERY_PARAMS.add(UPLOAD_ID);\n+  }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTc4Njg4OQ=="}, "originalCommit": {"oid": "656f94d90b8ad03861ae9c70552bf5e393193572"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MzYzMDE4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/MinioClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMjo1ODo1MFrOIOWTJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNDoxNTowNlrOIOYyyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkxNjMyNQ==", "bodyText": "Can be extracted into a method, something like initTraceForRequest(request) or traceRequestInfo(request)", "url": "https://github.com/minio/minio-java/pull/1136#discussion_r551916325", "createdAt": "2021-01-05T12:58:50Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -618,25 +628,28 @@ protected Response execute(\n               request.header(\"x-amz-content-sha256\"));\n     }\n \n-    if (this.traceStream != null) {\n-      this.traceStream.println(\"---------START-HTTP---------\");\n-      String encodedPath = request.url().encodedPath();\n-      String encodedQuery = request.url().encodedQuery();\n-      if (encodedQuery != null) {\n-        encodedPath += \"?\" + encodedQuery;\n-      }\n-      this.traceStream.println(request.method() + \" \" + encodedPath + \" HTTP/1.1\");\n-      this.traceStream.println(\n-          request\n-              .headers()\n-              .toString()\n-              .replaceAll(\"Signature=([0-9a-f]+)\", \"Signature=*REDACTED*\")\n-              .replaceAll(\"Credential=([^/]+)\", \"Credential=*REDACTED*\"));\n-      if (traceRequestBody) {\n-        this.traceStream.println(new String((byte[]) body, StandardCharsets.UTF_8));\n-      }\n+    StringBuilder traceBuilder = new StringBuilder();\n+    traceBuilder.append(\"---------START-HTTP---------\\n\");\n+    String encodedPath = request.url().encodedPath();\n+    String encodedQuery = request.url().encodedQuery();\n+    if (encodedQuery != null) {\n+      encodedPath += \"?\" + encodedQuery;\n+    }\n+    traceBuilder.append(request.method()).append(\" \").append(encodedPath).append(\" HTTP/1.1\\n\");\n+    traceBuilder.append(\n+        request\n+            .headers()\n+            .toString()\n+            .replaceAll(\"Signature=([0-9a-f]+)\", \"Signature=*REDACTED*\")\n+            .replaceAll(\"Credential=([^/]+)\", \"Credential=*REDACTED*\"));\n+    if (traceRequestBody) {\n+      traceBuilder.append(\"\\n\").append(new String((byte[]) body, StandardCharsets.UTF_8));\n     }\n \n+    PrintWriter traceStream = this.traceStream;\n+    if (traceStream != null) traceStream.println(traceBuilder.toString());\n+    traceBuilder.append(\"\\n\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "656f94d90b8ad03861ae9c70552bf5e393193572"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk1NzE5NQ==", "bodyText": "Done", "url": "https://github.com/minio/minio-java/pull/1136#discussion_r551957195", "createdAt": "2021-01-05T14:15:06Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -618,25 +628,28 @@ protected Response execute(\n               request.header(\"x-amz-content-sha256\"));\n     }\n \n-    if (this.traceStream != null) {\n-      this.traceStream.println(\"---------START-HTTP---------\");\n-      String encodedPath = request.url().encodedPath();\n-      String encodedQuery = request.url().encodedQuery();\n-      if (encodedQuery != null) {\n-        encodedPath += \"?\" + encodedQuery;\n-      }\n-      this.traceStream.println(request.method() + \" \" + encodedPath + \" HTTP/1.1\");\n-      this.traceStream.println(\n-          request\n-              .headers()\n-              .toString()\n-              .replaceAll(\"Signature=([0-9a-f]+)\", \"Signature=*REDACTED*\")\n-              .replaceAll(\"Credential=([^/]+)\", \"Credential=*REDACTED*\"));\n-      if (traceRequestBody) {\n-        this.traceStream.println(new String((byte[]) body, StandardCharsets.UTF_8));\n-      }\n+    StringBuilder traceBuilder = new StringBuilder();\n+    traceBuilder.append(\"---------START-HTTP---------\\n\");\n+    String encodedPath = request.url().encodedPath();\n+    String encodedQuery = request.url().encodedQuery();\n+    if (encodedQuery != null) {\n+      encodedPath += \"?\" + encodedQuery;\n+    }\n+    traceBuilder.append(request.method()).append(\" \").append(encodedPath).append(\" HTTP/1.1\\n\");\n+    traceBuilder.append(\n+        request\n+            .headers()\n+            .toString()\n+            .replaceAll(\"Signature=([0-9a-f]+)\", \"Signature=*REDACTED*\")\n+            .replaceAll(\"Credential=([^/]+)\", \"Credential=*REDACTED*\"));\n+    if (traceRequestBody) {\n+      traceBuilder.append(\"\\n\").append(new String((byte[]) body, StandardCharsets.UTF_8));\n     }\n \n+    PrintWriter traceStream = this.traceStream;\n+    if (traceStream != null) traceStream.println(traceBuilder.toString());\n+    traceBuilder.append(\"\\n\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkxNjMyNQ=="}, "originalCommit": {"oid": "656f94d90b8ad03861ae9c70552bf5e393193572"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ3MzYzMzYzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/MinioClient.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxMjo1OTo1MVrOIOWVMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0wNVQxNjo1MjoxNFrOIOe_HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkxNjg1MA==", "bodyText": "Can be extracted into a method, say addResponseInfoToTrace(response) or traceResponseInfo(response)", "url": "https://github.com/minio/minio-java/pull/1136#discussion_r551916850", "createdAt": "2021-01-05T12:59:51Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -645,15 +658,27 @@ protected Response execute(\n     }\n \n     Response response = httpClient.newCall(request).execute();\n-    if (this.traceStream != null) {\n-      this.traceStream.println(\n-          response.protocol().toString().toUpperCase(Locale.US) + \" \" + response.code());\n-      this.traceStream.println(response.headers());\n-    }\n+    String trace =\n+        response.protocol().toString().toUpperCase(Locale.US)\n+            + \" \"\n+            + response.code()\n+            + \"\\n\"\n+            + response.headers();\n+    traceBuilder.append(trace).append(\"\\n\");\n+    if (traceStream != null) traceStream.println(trace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "656f94d90b8ad03861ae9c70552bf5e393193572"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTk1Nzg1MA==", "bodyText": "I think it is not useful for the one liner.", "url": "https://github.com/minio/minio-java/pull/1136#discussion_r551957850", "createdAt": "2021-01-05T14:16:08Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -645,15 +658,27 @@ protected Response execute(\n     }\n \n     Response response = httpClient.newCall(request).execute();\n-    if (this.traceStream != null) {\n-      this.traceStream.println(\n-          response.protocol().toString().toUpperCase(Locale.US) + \" \" + response.code());\n-      this.traceStream.println(response.headers());\n-    }\n+    String trace =\n+        response.protocol().toString().toUpperCase(Locale.US)\n+            + \" \"\n+            + response.code()\n+            + \"\\n\"\n+            + response.headers();\n+    traceBuilder.append(trace).append(\"\\n\");\n+    if (traceStream != null) traceStream.println(trace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkxNjg1MA=="}, "originalCommit": {"oid": "656f94d90b8ad03861ae9c70552bf5e393193572"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MjA1ODY1Mw==", "bodyText": "Sometimes it makes sense to have even single-statement methods if it improves readability. In this instance, there are three statements and not one.", "url": "https://github.com/minio/minio-java/pull/1136#discussion_r552058653", "createdAt": "2021-01-05T16:52:14Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -645,15 +658,27 @@ protected Response execute(\n     }\n \n     Response response = httpClient.newCall(request).execute();\n-    if (this.traceStream != null) {\n-      this.traceStream.println(\n-          response.protocol().toString().toUpperCase(Locale.US) + \" \" + response.code());\n-      this.traceStream.println(response.headers());\n-    }\n+    String trace =\n+        response.protocol().toString().toUpperCase(Locale.US)\n+            + \" \"\n+            + response.code()\n+            + \"\\n\"\n+            + response.headers();\n+    traceBuilder.append(trace).append(\"\\n\");\n+    if (traceStream != null) traceStream.println(trace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1MTkxNjg1MA=="}, "originalCommit": {"oid": "656f94d90b8ad03861ae9c70552bf5e393193572"}, "originalPosition": 97}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 649, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}