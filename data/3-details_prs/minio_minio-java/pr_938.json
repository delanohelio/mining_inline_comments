{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4NjY1MzI1", "number": 938, "title": " add arg builder to set/get objectRetention API ", "bodyText": "Added some functional Test to set the object retention with governance mode and then set the lock with empty params so that object can be removed.\nThe test case will will until PR minio/minio#9677 is merged and reflected in play.", "createdAt": "2020-05-15T15:44:53Z", "url": "https://github.com/minio/minio-java/pull/938", "merged": true, "mergeCommit": {"oid": "73ad509cd17346e4e3dd90cf13a841797f222de4"}, "closed": true, "closedAt": "2020-05-27T18:53:33Z", "author": {"login": "sinhaashish"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABchw_YFgFqTQxMzA1MjU2OQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcld7VQAFqTQxOTUxNjcxMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEzMDUyNTY5", "url": "https://github.com/minio/minio-java/pull/938#pullrequestreview-413052569", "createdAt": "2020-05-16T06:26:34Z", "commit": {"oid": "d121a7a32076bcf709b425c391c126bb43e1664a"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwNjoyNjozNVrOGWYkYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNlQwNjo0OTo1N1rOGWYqLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEyNDM4NA==", "bodyText": "As per the conversion, it seems this method is not required. If required, my recommendation is to have method name as overrideGovernance()", "url": "https://github.com/minio/minio-java/pull/938#discussion_r426124384", "createdAt": "2020-05-16T06:26:35Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -3589,23 +3590,62 @@ public void setObjectRetention(\n       throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n           InternalException, InvalidBucketNameException, InvalidKeyException,\n           InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n-    if (config == null) {\n+\n+    this.setObjectRetention(\n+        SetObjectRetentionArgs.builder()\n+            .bucket(bucketName)\n+            .object(objectName)\n+            .versionId(versionId)\n+            .config(config)\n+            .bypassGovernanceRetention(bypassGovernanceRetention)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d121a7a32076bcf709b425c391c126bb43e1664a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEyNDQ1NA==", "bodyText": "Its required to expand examples than prototyping.", "url": "https://github.com/minio/minio-java/pull/938#discussion_r426124454", "createdAt": "2020-05-16T06:27:44Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -3589,23 +3590,62 @@ public void setObjectRetention(\n       throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n           InternalException, InvalidBucketNameException, InvalidKeyException,\n           InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n-    if (config == null) {\n+\n+    this.setObjectRetention(\n+        SetObjectRetentionArgs.builder()\n+            .bucket(bucketName)\n+            .object(objectName)\n+            .versionId(versionId)\n+            .config(config)\n+            .bypassGovernanceRetention(bypassGovernanceRetention)\n+            .build());\n+  }\n+\n+  /**\n+   * Sets retention configuration to an object.\n+   *\n+   * <pre>Example:{@code\n+   * Retention retention =\n+   *     new Retention(RetentionMode.COMPLIANCE, ZonedDateTime.now().plusYears(1));\n+   * minioClient.setObjectRetention(SetObjectRetentionArgs args);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d121a7a32076bcf709b425c391c126bb43e1664a"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEyNDU2OA==", "bodyText": "Its not required to check individual args (it defeats the purpose of arg builder). You would need to throw IllegalArgumentException if (args == null)", "url": "https://github.com/minio/minio-java/pull/938#discussion_r426124568", "createdAt": "2020-05-16T06:29:39Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -3589,23 +3590,62 @@ public void setObjectRetention(\n       throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n           InternalException, InvalidBucketNameException, InvalidKeyException,\n           InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n-    if (config == null) {\n+\n+    this.setObjectRetention(\n+        SetObjectRetentionArgs.builder()\n+            .bucket(bucketName)\n+            .object(objectName)\n+            .versionId(versionId)\n+            .config(config)\n+            .bypassGovernanceRetention(bypassGovernanceRetention)\n+            .build());\n+  }\n+\n+  /**\n+   * Sets retention configuration to an object.\n+   *\n+   * <pre>Example:{@code\n+   * Retention retention =\n+   *     new Retention(RetentionMode.COMPLIANCE, ZonedDateTime.now().plusYears(1));\n+   * minioClient.setObjectRetention(SetObjectRetentionArgs args);\n+   * }</pre>\n+   *\n+   * @param args {@link SetObjectRetentionArgs} object.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  public void setObjectRetention(SetObjectRetentionArgs args)\n+      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n+          InternalException, InvalidBucketNameException, InvalidKeyException,\n+          InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+    if (args.config() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d121a7a32076bcf709b425c391c126bb43e1664a"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEyNDY4MA==", "bodyText": "deprecate this method.", "url": "https://github.com/minio/minio-java/pull/938#discussion_r426124680", "createdAt": "2020-05-16T06:31:00Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -3639,14 +3679,51 @@ public Retention getObjectRetention(String bucketName, String objectName, String\n       throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d121a7a32076bcf709b425c391c126bb43e1664a"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEyNDcwMA==", "bodyText": "Expand the example and no prototyping.", "url": "https://github.com/minio/minio-java/pull/938#discussion_r426124700", "createdAt": "2020-05-16T06:31:33Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -3639,14 +3679,51 @@ public Retention getObjectRetention(String bucketName, String objectName, String\n       throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n           InternalException, InvalidBucketNameException, InvalidKeyException,\n           InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+    return this.getObjectRetention(\n+        GetObjectRetentionArgs.builder()\n+            .bucket(bucketName)\n+            .object(objectName)\n+            .versionId(versionId)\n+            .build());\n+  }\n+\n+  /**\n+   * Gets retention configuration of an object.\n+   *\n+   * <pre>Example:{@code\n+   * Retention retention =\n+   *     minioClient.getObjectRetention(GetObjectRetentionArgs args);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d121a7a32076bcf709b425c391c126bb43e1664a"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEyNDg0Mg==", "bodyText": "I would recommend versionId = \"\" can be allowed i.e. if (args.versionId() != null)", "url": "https://github.com/minio/minio-java/pull/938#discussion_r426124842", "createdAt": "2020-05-16T06:33:52Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -3639,14 +3679,51 @@ public Retention getObjectRetention(String bucketName, String objectName, String\n       throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n           InternalException, InvalidBucketNameException, InvalidKeyException,\n           InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+    return this.getObjectRetention(\n+        GetObjectRetentionArgs.builder()\n+            .bucket(bucketName)\n+            .object(objectName)\n+            .versionId(versionId)\n+            .build());\n+  }\n+\n+  /**\n+   * Gets retention configuration of an object.\n+   *\n+   * <pre>Example:{@code\n+   * Retention retention =\n+   *     minioClient.getObjectRetention(GetObjectRetentionArgs args);\n+   * System.out.println(\n+   *     \"mode: \" + retention.mode() + \"until: \" + retention.retainUntilDate());\n+   * }</pre>\n+   *\n+   * @param args {@link GetObjectRetentionArgs} object.\n+   * @return {@link Retention} - Object retention configuration.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  public Retention getObjectRetention(GetObjectRetentionArgs args)\n+      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n+          InternalException, InvalidBucketNameException, InvalidKeyException,\n+          InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n     Map<String, String> queryParamMap = new HashMap<>();\n     queryParamMap.put(\"retention\", \"\");\n \n-    if (versionId != null && !versionId.isEmpty()) {\n-      queryParamMap.put(\"versionId\", versionId);\n+    if (args.versionId() != null && !args.versionId().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d121a7a32076bcf709b425c391c126bb43e1664a"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEyNDg5MA==", "bodyText": "typo here.", "url": "https://github.com/minio/minio-java/pull/938#discussion_r426124890", "createdAt": "2020-05-16T06:34:53Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/SetObjectRetentionArgs.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+import io.minio.messages.Retention;\n+\n+public class SetObjectRetentionArgs extends ObjectArgs {\n+  private Retention config;\n+  private boolean bypassGovernanceRetention;\n+\n+  public Retention config() {\n+    return config;\n+  }\n+\n+  public boolean bypassGovernanceRetention() {\n+    return bypassGovernanceRetention;\n+  }\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  /** Argument builder of {@link SetObjectRetentionArgs}. */\n+  public static final class Builder extends ObjectArgs.Builder<Builder, SetObjectRetentionArgs> {\n+    public Builder config(Retention config) {\n+      if (config == null) {\n+        throw new IllegalArgumentException(\"null object retention configuration\");\n+      }\n+\n+      operations.add(args -> args.config = config);\n+      return this;\n+    }\n+\n+    public Builder bypassGovernanceRetention(boolean bypassGovernanceRetention) {\n+      operations.add(args -> args.bypassGovernanceRetention = bypassGovernanceRetention);\n+      return this;\n+    }\n+\n+    public SetObjectRetentionArgs build() throws IllegalArgumentException {\n+      SetObjectRetentionArgs args = build(SetObjectRetentionArgs.class);\n+      if (args.config == null) {\n+        throw new IllegalArgumentException(\"null bject retention configuration to build\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d121a7a32076bcf709b425c391c126bb43e1664a"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEyNTIxNg==", "bodyText": "Object retention is a repeating text. I just used Arguments.", "url": "https://github.com/minio/minio-java/pull/938#discussion_r426125216", "createdAt": "2020-05-16T06:39:46Z", "author": {"login": "balamurugana"}, "path": "docs/API.md", "diffHunk": "@@ -1125,26 +1125,42 @@ minioClient.getObject(\"my-bucketname\", \"my-objectname\", ssec, \"my-object-file\");\n ```\n \n  <a name=\"getObjectRetention\"></a>\n-### getObjectRetention(String bucketName, String objectName, String versionId)\n-`public Retention getObjectRetention(String bucketName, String objectName, String versionId)` _[[Javadoc]](http://minio.github.io/minio-java/io/minio/MinioClient.html#getObjectRetention-java.lang.String-java.lang.String-java.lang.String-)_\n+### getObjectRetention(GetObjectRetentionArgs args)\n+`public Retention getObjectRetention(GetObjectRetentionArgs args)` _[[Javadoc]](http://minio.github.io/minio-java/io/minio/MinioClient.html#getObjectRetention-io.minio.GetObjectRetentionArgs-)_\n \n Gets retention configuration of an object.\n \n  __Parameters__\n-| Parameter      | Type     | Description                |\n-|:---------------|:---------|:---------------------------|\n-| ``bucketName`` | _String_ | Name of the bucket.        |\n-| ``objectName`` | _String_ | Object name in the bucket. |\n-| ``versionId``  | _String_ | Version ID of the object.  |\n+ \n+| Parameter      | Type                       | Description                |\n+|:---------------|:---------------------------|:---------------------------|\n+| ``args``       | _[GetObjectRetentionArgs]_ | Object retention arguments |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d121a7a32076bcf709b425c391c126bb43e1664a"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEyNTQyMA==", "bodyText": "Description needs to be consistent. You could check other APIs e.g. bucketName | _String_ | Name of the bucket..", "url": "https://github.com/minio/minio-java/pull/938#discussion_r426125420", "createdAt": "2020-05-16T06:42:36Z", "author": {"login": "balamurugana"}, "path": "docs/API.md", "diffHunk": "@@ -1500,24 +1516,27 @@ stream.close();\n ```\n \n <a name=\"setObjectRetention\"></a>\n-### setObjectRetention(String bucketName, String objectName, String versionId, Retention retention, boolean bypassGovernanceRetention)\n-`public void setObjectLockRetention(String bucketName, String objectName, String versionId, Retention retention, boolean bypassGovernanceRetention)` _[[Javadoc]](http://minio.github.io/minio-java/io/minio/MinioClient.html#setObjectRetention-java.lang.String-java.lang.String-java.lang.String-io.minio.messages.Retention-boolean-)_\n+### setObjectRetention(SetObjectRetentionArgs args)\n+`public void setObjectLockRetention(SetObjectRetentionArgs)` _[[Javadoc]](http://minio.github.io/minio-java/io/minio/MinioClient.html#setObjectRetention-io.minio.SetObjectRetentionArgs-)_\n \n Sets retention configuration to an object.\n \n  __Parameters__\n-| Parameter                     | Type          | Description                     |\n-|:------------------------------|:--------------|:--------------------------------|\n-| ``bucketName``                | _String_      | Name of the bucket.             |\n-| ``objectName``                | _String_      | Object name in the bucket.      |\n-| ``versionId``                 | _String_      | Version ID of the object.       |\n-| ``config``                    | _[Retention]_ | Object retention configuration. |\n-| ``bypassGovernanceRetention`` | _boolean_     | Bypass Governance retention.    |\n+ \n+| Parameter        | Type                       | Description                        |\n+|:-----------------|:---------------------------|:-----------------------------------|\n+| ``args``         | _[SetObjectRetentionArgs]_ | Arguments to set object retention. |", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d121a7a32076bcf709b425c391c126bb43e1664a"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEyNTUwMw==", "bodyText": "Shorten exception list by catching MinioException.", "url": "https://github.com/minio/minio-java/pull/938#discussion_r426125503", "createdAt": "2020-05-16T06:43:52Z", "author": {"login": "balamurugana"}, "path": "examples/GetObjectRetentionConfig.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import io.minio.GetObjectRetentionArgs;\n+import io.minio.MakeBucketArgs;\n+import io.minio.MinioClient;\n+import io.minio.PutObjectOptions;\n+import io.minio.SetObjectRetentionArgs;\n+import io.minio.errors.ErrorResponseException;\n+import io.minio.errors.InsufficientDataException;\n+import io.minio.errors.InternalException;\n+import io.minio.errors.InvalidBucketNameException;\n+import io.minio.errors.InvalidEndpointException;\n+import io.minio.errors.InvalidPortException;\n+import io.minio.errors.InvalidResponseException;\n+import io.minio.errors.MinioException;\n+import io.minio.errors.RegionConflictException;\n+import io.minio.messages.Retention;\n+import io.minio.messages.RetentionMode;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.time.ZonedDateTime;\n+\n+public class GetObjectRetentionConfig {\n+  /** MinioClient.getObjectRetention() example. */\n+  public static void main(String[] args)\n+      throws IOException, NoSuchAlgorithmException, InvalidKeyException, InvalidResponseException,\n+          InsufficientDataException, InternalException, ErrorResponseException,\n+          InvalidBucketNameException, InvalidPortException, InvalidEndpointException,\n+          RegionConflictException, IllegalArgumentException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d121a7a32076bcf709b425c391c126bb43e1664a"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNjEyNTg2OQ==", "bodyText": "I defer by providing example from bucket creation to the end. My suggestion is to specific to the API.", "url": "https://github.com/minio/minio-java/pull/938#discussion_r426125869", "createdAt": "2020-05-16T06:49:57Z", "author": {"login": "balamurugana"}, "path": "examples/GetObjectRetentionConfig.java", "diffHunk": "@@ -0,0 +1,114 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import io.minio.GetObjectRetentionArgs;\n+import io.minio.MakeBucketArgs;\n+import io.minio.MinioClient;\n+import io.minio.PutObjectOptions;\n+import io.minio.SetObjectRetentionArgs;\n+import io.minio.errors.ErrorResponseException;\n+import io.minio.errors.InsufficientDataException;\n+import io.minio.errors.InternalException;\n+import io.minio.errors.InvalidBucketNameException;\n+import io.minio.errors.InvalidEndpointException;\n+import io.minio.errors.InvalidPortException;\n+import io.minio.errors.InvalidResponseException;\n+import io.minio.errors.MinioException;\n+import io.minio.errors.RegionConflictException;\n+import io.minio.messages.Retention;\n+import io.minio.messages.RetentionMode;\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.time.ZonedDateTime;\n+\n+public class GetObjectRetentionConfig {\n+  /** MinioClient.getObjectRetention() example. */\n+  public static void main(String[] args)\n+      throws IOException, NoSuchAlgorithmException, InvalidKeyException, InvalidResponseException,\n+          InsufficientDataException, InternalException, ErrorResponseException,\n+          InvalidBucketNameException, InvalidPortException, InvalidEndpointException,\n+          RegionConflictException, IllegalArgumentException {\n+    try {\n+\n+      /* play.min.io for test and development. */\n+      MinioClient minioClient =\n+          new MinioClient(\n+              \"https://play.min.io\",\n+              \"Q3AM3UQ867SPQQA43P2F\",\n+              \"zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG\");\n+\n+      // Create bucket if it doesn't exist.\n+      boolean found = minioClient.bucketExists(\"my-bucketname\");\n+      if (found) {\n+        System.out.println(\"my-bucketname already exists\");\n+      } else {\n+        // Create bucket 'my-bucketname' with object lock functionality enabled\n+        minioClient.makeBucket(\n+            MakeBucketArgs.builder().bucket(\"my-bucketname\").objectLock(true).build());\n+        System.out.println(\n+            \"my-bucketname is created successfully with object lock functionality enabled.\");\n+      }\n+\n+      StringBuilder builder = new StringBuilder();\n+      for (int i = 0; i < 100; i++) {\n+        builder.append(\n+            \"Sphinx of black quartz, judge my vow: Used by Adobe InDesign to display font samples. \");\n+        builder.append(\"(29 letters)\\n\");\n+        builder.append(\n+            \"Jackdaws love my big sphinx of quartz: Similarly, used by Windows XP for some fonts. \");\n+        builder.append(\"---\\n\");\n+      }\n+\n+      // Create a InputStream for object upload.\n+      ByteArrayInputStream bais = new ByteArrayInputStream(builder.toString().getBytes(\"UTF-8\"));\n+\n+      // Create object 'my-objectname' in 'my-bucketname' with content from the input stream.\n+      minioClient.putObject(\n+          \"my-bucketname\", \"my-objectname\", bais, new PutObjectOptions(bais.available(), -1));\n+      bais.close();\n+      System.out.println(\"my-objectname is uploaded successfully\");\n+\n+      // Declaring config with Retention mode as Compliance and\n+      // retain until one year to current date.\n+      ZonedDateTime retentionUntil = ZonedDateTime.now().plusYears(1);\n+      Retention config = new Retention(RetentionMode.COMPLIANCE, retentionUntil);\n+\n+      // Set object lock configuration\n+      minioClient.setObjectRetention(\n+          SetObjectRetentionArgs.builder()\n+              .bucket(\"my-bucketname\")\n+              .object(\"my-objectname\")\n+              .config(config)\n+              .bypassGovernanceRetention(true)\n+              .build());\n+\n+      // Get object lock retention\n+      Retention retention =\n+          minioClient.getObjectRetention(\n+              GetObjectRetentionArgs.builder()\n+                  .bucket(\"my-bucketname\")\n+                  .object(\"my-objectname\")\n+                  .build());\n+\n+      System.out.println(\"Mode: \" + retention.mode());\n+      System.out.println(\"Retainuntil Date: \" + retention.retainUntilDate());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d121a7a32076bcf709b425c391c126bb43e1664a"}, "originalPosition": 109}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d121a7a32076bcf709b425c391c126bb43e1664a", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/d121a7a32076bcf709b425c391c126bb43e1664a", "committedDate": "2020-05-15T15:39:18Z", "message": "Set/Get Object Retention"}, "afterCommit": {"oid": "19d2729371ef6e106d05ee88b37f633b8c9e4af5", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/19d2729371ef6e106d05ee88b37f633b8c9e4af5", "committedDate": "2020-05-22T08:46:06Z", "message": "add arg builder to objectRetention API"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MjU0MjQw", "url": "https://github.com/minio/minio-java/pull/938#pullrequestreview-417254240", "createdAt": "2020-05-23T06:09:05Z", "commit": {"oid": "19d2729371ef6e106d05ee88b37f633b8c9e4af5"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QwNjowOTowNlrOGZnukg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yM1QwNjoxNjowMVrOGZnwIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUxODQ4Mg==", "bodyText": "As bypassGovernanceMode() is used in removeObject(), we would need to be consistent with names. Sorry for the confusion.", "url": "https://github.com/minio/minio-java/pull/938#discussion_r429518482", "createdAt": "2020-05-23T06:09:06Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -3624,23 +3625,67 @@ public void setObjectRetention(\n       throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n           InternalException, InvalidBucketNameException, InvalidKeyException,\n           InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n-    if (config == null) {\n-      throw new IllegalArgumentException(\"null value is not allowed in config.\");\n+\n+    this.setObjectRetention(\n+        SetObjectRetentionArgs.builder()\n+            .bucket(bucketName)\n+            .object(objectName)\n+            .versionId(versionId)\n+            .config(config)\n+            .overrideGovernance(bypassGovernanceRetention)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19d2729371ef6e106d05ee88b37f633b8c9e4af5"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUxODU1NA==", "bodyText": "You can use versionId() if not null. The validation is already done in ObjectArgs.", "url": "https://github.com/minio/minio-java/pull/938#discussion_r429518554", "createdAt": "2020-05-23T06:10:25Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -3624,23 +3625,67 @@ public void setObjectRetention(\n       throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n           InternalException, InvalidBucketNameException, InvalidKeyException,\n           InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n-    if (config == null) {\n-      throw new IllegalArgumentException(\"null value is not allowed in config.\");\n+\n+    this.setObjectRetention(\n+        SetObjectRetentionArgs.builder()\n+            .bucket(bucketName)\n+            .object(objectName)\n+            .versionId(versionId)\n+            .config(config)\n+            .overrideGovernance(bypassGovernanceRetention)\n+            .build());\n+  }\n+\n+  /**\n+   * Sets retention configuration to an object.\n+   *\n+   * <pre>Example:{@code\n+   *  Retention retention = new Retention(\n+   *       RetentionMode.COMPLIANCE, ZonedDateTime.now().plusYears(1));\n+   *  minioClient.setObjectRetention(\n+   *      SetObjectRetentionArgs.builder()\n+   *          .bucket(\"my-bucketname\")\n+   *          .object(\"my-objectname\")\n+   *          .config(config)\n+   *          .overrideGovernance(true)\n+   *          .build());\n+   * }</pre>\n+   *\n+   * @param args {@link SetObjectRetentionArgs} object.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  public void setObjectRetention(SetObjectRetentionArgs args)\n+      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n+          InternalException, InvalidBucketNameException, InvalidKeyException,\n+          InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+    if (args == null) {\n+      throw new IllegalArgumentException(\"null arguments\");\n     }\n \n     Map<String, String> queryParamMap = new HashMap<>();\n     queryParamMap.put(\"retention\", \"\");\n \n-    if (versionId != null && !versionId.isEmpty()) {\n-      queryParamMap.put(\"versionId\", versionId);\n+    if (args.versionId() != null && !args.versionId().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19d2729371ef6e106d05ee88b37f633b8c9e4af5"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUxODY1OQ==", "bodyText": "use method name and field name similar.", "url": "https://github.com/minio/minio-java/pull/938#discussion_r429518659", "createdAt": "2020-05-23T06:12:17Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/SetObjectRetentionArgs.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+import io.minio.messages.Retention;\n+\n+/** Argument class of MinioClient.setObjectRetention(). */\n+public class SetObjectRetentionArgs extends ObjectArgs {\n+  private Retention config;\n+  private boolean bypassGovernanceRetention;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19d2729371ef6e106d05ee88b37f633b8c9e4af5"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUxODcyNQ==", "bodyText": "Is it still valid or MinIO specific?", "url": "https://github.com/minio/minio-java/pull/938#discussion_r429518725", "createdAt": "2020-05-23T06:13:09Z", "author": {"login": "balamurugana"}, "path": "docs/API.md", "diffHunk": "@@ -1055,26 +1055,42 @@ minioClient.getObject(\"my-bucketname\", \"my-objectname\", ssec, \"my-object-file\");\n ```\n \n  <a name=\"getObjectRetention\"></a>\n-### getObjectRetention(String bucketName, String objectName, String versionId)\n-`public Retention getObjectRetention(String bucketName, String objectName, String versionId)` _[[Javadoc]](http://minio.github.io/minio-java/io/minio/MinioClient.html#getObjectRetention-java.lang.String-java.lang.String-java.lang.String-)_\n+### getObjectRetention(GetObjectRetentionArgs args)\n+`public Retention getObjectRetention(GetObjectRetentionArgs args)` _[[Javadoc]](http://minio.github.io/minio-java/io/minio/MinioClient.html#getObjectRetention-io.minio.GetObjectRetentionArgs-)_\n \n Gets retention configuration of an object.\n \n  __Parameters__\n-| Parameter      | Type     | Description                |\n-|:---------------|:---------|:---------------------------|\n-| ``bucketName`` | _String_ | Name of the bucket.        |\n-| ``objectName`` | _String_ | Object name in the bucket. |\n-| ``versionId``  | _String_ | Version ID of the object.  |\n+ \n+| Parameter      | Type                       | Description   |\n+|:---------------|:---------------------------|:--------------|\n+| ``args``       | _[GetObjectRetentionArgs]_ | Arguments.    |\n \n | Returns                                         |\n |:------------------------------------------------|\n | _[Retention]_ - Object retention configuration. |\n \n  __Example__\n  ```java\n-Retention retention = minioClient.getObjectRetention(\"my-bucketname\", \"my-objectname\", null);\n+// Object without version", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19d2729371ef6e106d05ee88b37f633b8c9e4af5"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUxODc3Mg==", "bodyText": "You could have API name and example name similar.", "url": "https://github.com/minio/minio-java/pull/938#discussion_r429518772", "createdAt": "2020-05-23T06:14:21Z", "author": {"login": "balamurugana"}, "path": "examples/GetObjectRetentionConfig.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19d2729371ef6e106d05ee88b37f633b8c9e4af5"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUxODgwNw==", "bodyText": "Same as above,", "url": "https://github.com/minio/minio-java/pull/938#discussion_r429518807", "createdAt": "2020-05-23T06:15:01Z", "author": {"login": "balamurugana"}, "path": "examples/SetObjectRetentionConfig.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19d2729371ef6e106d05ee88b37f633b8c9e4af5"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTUxODg4Mg==", "bodyText": "You can remove all stale comments.", "url": "https://github.com/minio/minio-java/pull/938#discussion_r429518882", "createdAt": "2020-05-23T06:16:01Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -4253,6 +4561,10 @@ public static void runTests() throws Exception {\n     setDefaultRetention_test();\n     getDefaultRetention_test();\n \n+    setObjectRetention_test();\n+    // getObjectRetention_test1();\n+    // getObjectRetention_test2();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19d2729371ef6e106d05ee88b37f633b8c9e4af5"}, "originalPosition": 349}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "19d2729371ef6e106d05ee88b37f633b8c9e4af5", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/19d2729371ef6e106d05ee88b37f633b8c9e4af5", "committedDate": "2020-05-22T08:46:06Z", "message": "add arg builder to objectRetention API"}, "afterCommit": {"oid": "a9e13be8b16025db1057f299022e2d90f69aaf67", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/a9e13be8b16025db1057f299022e2d90f69aaf67", "committedDate": "2020-05-24T07:29:25Z", "message": "add arg builder to objectRetention API"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3ODk2MTAw", "url": "https://github.com/minio/minio-java/pull/938#pullrequestreview-417896100", "createdAt": "2020-05-25T23:04:14Z", "commit": {"oid": "a9e13be8b16025db1057f299022e2d90f69aaf67"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4MzAyNDIx", "url": "https://github.com/minio/minio-java/pull/938#pullrequestreview-418302421", "createdAt": "2020-05-26T13:34:43Z", "commit": {"oid": "a9e13be8b16025db1057f299022e2d90f69aaf67"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzozNDo0M1rOGaegmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMzo1MDowMlrOGafLAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQxNjAyNw==", "bodyText": "you would need to add validate() method to check for args.config is not null.", "url": "https://github.com/minio/minio-java/pull/938#discussion_r430416027", "createdAt": "2020-05-26T13:34:43Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/SetObjectRetentionArgs.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+import io.minio.messages.Retention;\n+\n+/** Argument class of MinioClient.setObjectRetention(). */\n+public class SetObjectRetentionArgs extends ObjectArgs {\n+  private Retention config;\n+  private boolean bypassGovernanceMode;\n+\n+  public Retention config() {\n+    return config;\n+  }\n+\n+  public boolean bypassGovernanceMode() {\n+    return bypassGovernanceMode;\n+  }\n+\n+  public static Builder builder() {\n+    return new Builder();\n+  }\n+\n+  /** Argument builder of {@link SetObjectRetentionArgs}. */\n+  public static final class Builder extends ObjectArgs.Builder<Builder, SetObjectRetentionArgs> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9e13be8b16025db1057f299022e2d90f69aaf67"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQxNjU5OA==", "bodyText": "you could remove extra new lines before and after the code.", "url": "https://github.com/minio/minio-java/pull/938#discussion_r430416598", "createdAt": "2020-05-26T13:35:33Z", "author": {"login": "balamurugana"}, "path": "docs/API.md", "diffHunk": "@@ -1057,26 +1057,34 @@ minioClient.getObject(\"my-bucketname\", \"my-objectname\", ssec, \"my-object-file\");\n ```\n \n  <a name=\"getObjectRetention\"></a>\n-### getObjectRetention(String bucketName, String objectName, String versionId)\n-`public Retention getObjectRetention(String bucketName, String objectName, String versionId)` _[[Javadoc]](http://minio.github.io/minio-java/io/minio/MinioClient.html#getObjectRetention-java.lang.String-java.lang.String-java.lang.String-)_\n+### getObjectRetention(GetObjectRetentionArgs args)\n+`public Retention getObjectRetention(GetObjectRetentionArgs args)` _[[Javadoc]](http://minio.github.io/minio-java/io/minio/MinioClient.html#getObjectRetention-io.minio.GetObjectRetentionArgs-)_\n \n Gets retention configuration of an object.\n \n  __Parameters__\n-| Parameter      | Type     | Description                |\n-|:---------------|:---------|:---------------------------|\n-| ``bucketName`` | _String_ | Name of the bucket.        |\n-| ``objectName`` | _String_ | Object name in the bucket. |\n-| ``versionId``  | _String_ | Version ID of the object.  |\n+ \n+| Parameter      | Type                       | Description   |\n+|:---------------|:---------------------------|:--------------|\n+| ``args``       | _[GetObjectRetentionArgs]_ | Arguments.    |\n \n | Returns                                         |\n |:------------------------------------------------|\n | _[Retention]_ - Object retention configuration. |\n \n  __Example__\n  ```java\n-Retention retention = minioClient.getObjectRetention(\"my-bucketname\", \"my-objectname\", null);\n+\n+// Object with version id.\n+Retention retention =\n+    minioClient.getObjectRetention(\n+        GetObjectRetentionArgs.builder()\n+            .bucket(\"my-bucketname\")\n+            .object(\"my-objectname\")\n+            .versionId(\"object-version-id\")\n+            .build());\n System.out.println(\"mode: \" + retention.mode() + \"until: \" + retention.retainUntilDate());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9e13be8b16025db1057f299022e2d90f69aaf67"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQxODc0Ng==", "bodyText": "Please fix the comment appropriately", "url": "https://github.com/minio/minio-java/pull/938#discussion_r430418746", "createdAt": "2020-05-26T13:38:43Z", "author": {"login": "balamurugana"}, "path": "examples/SetObjectRetention.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+import io.minio.GetObjectRetentionArgs;\n+import io.minio.MinioClient;\n+import io.minio.SetObjectRetentionArgs;\n+import io.minio.errors.MinioException;\n+import io.minio.messages.Retention;\n+import io.minio.messages.RetentionMode;\n+import java.io.IOException;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import java.time.ZonedDateTime;\n+\n+public class SetObjectRetention {\n+  /** MinioClient.setObjectRetention() example. */\n+  public static void main(String[] args)\n+      throws IOException, NoSuchAlgorithmException, InvalidKeyException, IllegalArgumentException {\n+    try {\n+\n+      /* play.min.io for test and development. */\n+      MinioClient minioClient =\n+          new MinioClient(\n+              \"https://play.min.io\",\n+              \"Q3AM3UQ867SPQQA43P2F\",\n+              \"zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG\");\n+\n+      // Declaring config with Retention mode as Compliance and\n+      // retain until one year to current date.\n+      ZonedDateTime retentionUntil = ZonedDateTime.now().plusYears(1);\n+      Retention config = new Retention(RetentionMode.COMPLIANCE, retentionUntil);\n+\n+      // Set object lock configuration", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9e13be8b16025db1057f299022e2d90f69aaf67"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQxOTI5OA==", "bodyText": "Use handleException() method.", "url": "https://github.com/minio/minio-java/pull/938#discussion_r430419298", "createdAt": "2020-05-26T13:39:35Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3761,6 +3764,309 @@ public static void getDefaultRetention_test() throws Exception {\n     }\n   }\n \n+  /** Test: setObjectRetention(SetObjectRetentionArgs args). */\n+  public static void setObjectRetention_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setObjectRetention(SetObjectRetentionArgs args)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).objectLock(true).build());\n+      try {\n+        ZonedDateTime retentionUntil = ZonedDateTime.now().plusDays(1);\n+        Retention expectedConfig = new Retention(RetentionMode.GOVERNANCE, retentionUntil);\n+\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          PutObjectOptions options = new PutObjectOptions(1 * KB, -1);\n+          options.setContentType(customContentType);\n+          client.putObject(bucketName, objectName, is, options);\n+        }\n+\n+        client.setObjectRetention(\n+            SetObjectRetentionArgs.builder()\n+                .bucket(bucketName)\n+                .object(objectName)\n+                .config(expectedConfig)\n+                .build());\n+        // Set empty object lock configuration by setting bypassGovernanceMode as true\n+        Retention emptyConfig = new Retention();\n+        client.setObjectRetention(\n+            SetObjectRetentionArgs.builder()\n+                .bucket(bucketName)\n+                .object(objectName)\n+                .config(emptyConfig)\n+                .bypassGovernanceMode(true)\n+                .build());\n+\n+      } finally {\n+        client.removeObject(\n+            RemoveObjectArgs.builder().bucket(bucketName).object(objectName).build());\n+        client.removeBucket(RemoveBucketArgs.builder().bucket(bucketName).build());\n+      }\n+\n+      mintSuccessLog(\"setObjectRetention(SetObjectRetentionArgs args)\", null, startTime);\n+\n+    } catch (Exception e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9e13be8b16025db1057f299022e2d90f69aaf67"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyMTc4MQ==", "bodyText": "Too many nesting.\nIsn't ZonedDateTime.equals() working?", "url": "https://github.com/minio/minio-java/pull/938#discussion_r430421781", "createdAt": "2020-05-26T13:43:03Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3761,6 +3764,309 @@ public static void getDefaultRetention_test() throws Exception {\n     }\n   }\n \n+  /** Test: setObjectRetention(SetObjectRetentionArgs args). */\n+  public static void setObjectRetention_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setObjectRetention(SetObjectRetentionArgs args)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).objectLock(true).build());\n+      try {\n+        ZonedDateTime retentionUntil = ZonedDateTime.now().plusDays(1);\n+        Retention expectedConfig = new Retention(RetentionMode.GOVERNANCE, retentionUntil);\n+\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          PutObjectOptions options = new PutObjectOptions(1 * KB, -1);\n+          options.setContentType(customContentType);\n+          client.putObject(bucketName, objectName, is, options);\n+        }\n+\n+        client.setObjectRetention(\n+            SetObjectRetentionArgs.builder()\n+                .bucket(bucketName)\n+                .object(objectName)\n+                .config(expectedConfig)\n+                .build());\n+        // Set empty object lock configuration by setting bypassGovernanceMode as true\n+        Retention emptyConfig = new Retention();\n+        client.setObjectRetention(\n+            SetObjectRetentionArgs.builder()\n+                .bucket(bucketName)\n+                .object(objectName)\n+                .config(emptyConfig)\n+                .bypassGovernanceMode(true)\n+                .build());\n+\n+      } finally {\n+        client.removeObject(\n+            RemoveObjectArgs.builder().bucket(bucketName).object(objectName).build());\n+        client.removeBucket(RemoveBucketArgs.builder().bucket(bucketName).build());\n+      }\n+\n+      mintSuccessLog(\"setObjectRetention(SetObjectRetentionArgs args)\", null, startTime);\n+\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setObjectRetention(SetObjectRetentionArgs args)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setObjectRetention(SetObjectRetentionArgs args)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getObjectRetention(GetObjectRetentionArgs args). */\n+  public static void getObjectRetention_test1() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: getObjectRetention(GetObjectRetentionArgs args)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).objectLock(true).build());\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          PutObjectOptions options = new PutObjectOptions(1 * KB, -1);\n+          options.setContentType(customContentType);\n+          client.putObject(bucketName, objectName, is, options);\n+        }\n+\n+        ZonedDateTime retentionUntil = ZonedDateTime.now().plusDays(3);\n+        Retention expectedConfig = new Retention(RetentionMode.GOVERNANCE, retentionUntil);\n+        client.setObjectRetention(\n+            SetObjectRetentionArgs.builder()\n+                .bucket(bucketName)\n+                .object(objectName)\n+                .config(expectedConfig)\n+                .build());\n+\n+        Retention config =\n+            client.getObjectRetention(\n+                GetObjectRetentionArgs.builder().bucket(bucketName).object(objectName).build());\n+\n+        if ((!(config\n+                .retainUntilDate()\n+                .toString()\n+                .substring(0, config.retainUntilDate().toString().indexOf(\"T\"))\n+                .equals(\n+                    expectedConfig\n+                        .retainUntilDate()\n+                        .toString()\n+                        .substring(0, expectedConfig.retainUntilDate().toString().indexOf(\"T\")))))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9e13be8b16025db1057f299022e2d90f69aaf67"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyMjE1Mw==", "bodyText": "Use handleException()", "url": "https://github.com/minio/minio-java/pull/938#discussion_r430422153", "createdAt": "2020-05-26T13:43:36Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3761,6 +3764,309 @@ public static void getDefaultRetention_test() throws Exception {\n     }\n   }\n \n+  /** Test: setObjectRetention(SetObjectRetentionArgs args). */\n+  public static void setObjectRetention_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setObjectRetention(SetObjectRetentionArgs args)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).objectLock(true).build());\n+      try {\n+        ZonedDateTime retentionUntil = ZonedDateTime.now().plusDays(1);\n+        Retention expectedConfig = new Retention(RetentionMode.GOVERNANCE, retentionUntil);\n+\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          PutObjectOptions options = new PutObjectOptions(1 * KB, -1);\n+          options.setContentType(customContentType);\n+          client.putObject(bucketName, objectName, is, options);\n+        }\n+\n+        client.setObjectRetention(\n+            SetObjectRetentionArgs.builder()\n+                .bucket(bucketName)\n+                .object(objectName)\n+                .config(expectedConfig)\n+                .build());\n+        // Set empty object lock configuration by setting bypassGovernanceMode as true\n+        Retention emptyConfig = new Retention();\n+        client.setObjectRetention(\n+            SetObjectRetentionArgs.builder()\n+                .bucket(bucketName)\n+                .object(objectName)\n+                .config(emptyConfig)\n+                .bypassGovernanceMode(true)\n+                .build());\n+\n+      } finally {\n+        client.removeObject(\n+            RemoveObjectArgs.builder().bucket(bucketName).object(objectName).build());\n+        client.removeBucket(RemoveBucketArgs.builder().bucket(bucketName).build());\n+      }\n+\n+      mintSuccessLog(\"setObjectRetention(SetObjectRetentionArgs args)\", null, startTime);\n+\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setObjectRetention(SetObjectRetentionArgs args)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setObjectRetention(SetObjectRetentionArgs args)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getObjectRetention(GetObjectRetentionArgs args). */\n+  public static void getObjectRetention_test1() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: getObjectRetention(GetObjectRetentionArgs args)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).objectLock(true).build());\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          PutObjectOptions options = new PutObjectOptions(1 * KB, -1);\n+          options.setContentType(customContentType);\n+          client.putObject(bucketName, objectName, is, options);\n+        }\n+\n+        ZonedDateTime retentionUntil = ZonedDateTime.now().plusDays(3);\n+        Retention expectedConfig = new Retention(RetentionMode.GOVERNANCE, retentionUntil);\n+        client.setObjectRetention(\n+            SetObjectRetentionArgs.builder()\n+                .bucket(bucketName)\n+                .object(objectName)\n+                .config(expectedConfig)\n+                .build());\n+\n+        Retention config =\n+            client.getObjectRetention(\n+                GetObjectRetentionArgs.builder().bucket(bucketName).object(objectName).build());\n+\n+        if ((!(config\n+                .retainUntilDate()\n+                .toString()\n+                .substring(0, config.retainUntilDate().toString().indexOf(\"T\"))\n+                .equals(\n+                    expectedConfig\n+                        .retainUntilDate()\n+                        .toString()\n+                        .substring(0, expectedConfig.retainUntilDate().toString().indexOf(\"T\")))))\n+            || (config.mode() != expectedConfig.mode())) {\n+          throw new Exception(\n+              \"[FAILED] Expected: expected duration : \"\n+                  + expectedConfig.retainUntilDate()\n+                  + \", got: \"\n+                  + config.retainUntilDate()\n+                  + \" expected mode :\"\n+                  + expectedConfig.mode()\n+                  + \", got: \"\n+                  + config.mode());\n+        }\n+\n+        // Set empty object lock configuration by setting bypassGovernanceMode as true\n+        Retention emptyConfig = new Retention();\n+        client.setObjectRetention(\n+            SetObjectRetentionArgs.builder()\n+                .bucket(bucketName)\n+                .object(objectName)\n+                .config(emptyConfig)\n+                .bypassGovernanceMode(true)\n+                .build());\n+\n+      } finally {\n+        client.removeObject(\n+            RemoveObjectArgs.builder().bucket(bucketName).object(objectName).build());\n+        client.removeBucket(RemoveBucketArgs.builder().bucket(bucketName).build());\n+      }\n+\n+      mintSuccessLog(\"getObjectRetention(GetObjectRetentionArgs args)\", null, startTime);\n+\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9e13be8b16025db1057f299022e2d90f69aaf67"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQyNjg4MQ==", "bodyText": "I think you are testing bypassGovernanceMode() here. If so it needs to be merged in above.\nI guess bypassGovernanceMode allow to change Retention where RetentionUntil time could be higher or lower.  If this is the test you want to do, you could have the test doing both.", "url": "https://github.com/minio/minio-java/pull/938#discussion_r430426881", "createdAt": "2020-05-26T13:50:02Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3761,6 +3764,309 @@ public static void getDefaultRetention_test() throws Exception {\n     }\n   }\n \n+  /** Test: setObjectRetention(SetObjectRetentionArgs args). */\n+  public static void setObjectRetention_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: setObjectRetention(SetObjectRetentionArgs args)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).objectLock(true).build());\n+      try {\n+        ZonedDateTime retentionUntil = ZonedDateTime.now().plusDays(1);\n+        Retention expectedConfig = new Retention(RetentionMode.GOVERNANCE, retentionUntil);\n+\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          PutObjectOptions options = new PutObjectOptions(1 * KB, -1);\n+          options.setContentType(customContentType);\n+          client.putObject(bucketName, objectName, is, options);\n+        }\n+\n+        client.setObjectRetention(\n+            SetObjectRetentionArgs.builder()\n+                .bucket(bucketName)\n+                .object(objectName)\n+                .config(expectedConfig)\n+                .build());\n+        // Set empty object lock configuration by setting bypassGovernanceMode as true\n+        Retention emptyConfig = new Retention();\n+        client.setObjectRetention(\n+            SetObjectRetentionArgs.builder()\n+                .bucket(bucketName)\n+                .object(objectName)\n+                .config(emptyConfig)\n+                .bypassGovernanceMode(true)\n+                .build());\n+\n+      } finally {\n+        client.removeObject(\n+            RemoveObjectArgs.builder().bucket(bucketName).object(objectName).build());\n+        client.removeBucket(RemoveBucketArgs.builder().bucket(bucketName).build());\n+      }\n+\n+      mintSuccessLog(\"setObjectRetention(SetObjectRetentionArgs args)\", null, startTime);\n+\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"setObjectRetention(SetObjectRetentionArgs args)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"setObjectRetention(SetObjectRetentionArgs args)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getObjectRetention(GetObjectRetentionArgs args). */\n+  public static void getObjectRetention_test1() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: getObjectRetention(GetObjectRetentionArgs args)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).objectLock(true).build());\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          PutObjectOptions options = new PutObjectOptions(1 * KB, -1);\n+          options.setContentType(customContentType);\n+          client.putObject(bucketName, objectName, is, options);\n+        }\n+\n+        ZonedDateTime retentionUntil = ZonedDateTime.now().plusDays(3);\n+        Retention expectedConfig = new Retention(RetentionMode.GOVERNANCE, retentionUntil);\n+        client.setObjectRetention(\n+            SetObjectRetentionArgs.builder()\n+                .bucket(bucketName)\n+                .object(objectName)\n+                .config(expectedConfig)\n+                .build());\n+\n+        Retention config =\n+            client.getObjectRetention(\n+                GetObjectRetentionArgs.builder().bucket(bucketName).object(objectName).build());\n+\n+        if ((!(config\n+                .retainUntilDate()\n+                .toString()\n+                .substring(0, config.retainUntilDate().toString().indexOf(\"T\"))\n+                .equals(\n+                    expectedConfig\n+                        .retainUntilDate()\n+                        .toString()\n+                        .substring(0, expectedConfig.retainUntilDate().toString().indexOf(\"T\")))))\n+            || (config.mode() != expectedConfig.mode())) {\n+          throw new Exception(\n+              \"[FAILED] Expected: expected duration : \"\n+                  + expectedConfig.retainUntilDate()\n+                  + \", got: \"\n+                  + config.retainUntilDate()\n+                  + \" expected mode :\"\n+                  + expectedConfig.mode()\n+                  + \", got: \"\n+                  + config.mode());\n+        }\n+\n+        // Set empty object lock configuration by setting bypassGovernanceMode as true\n+        Retention emptyConfig = new Retention();\n+        client.setObjectRetention(\n+            SetObjectRetentionArgs.builder()\n+                .bucket(bucketName)\n+                .object(objectName)\n+                .config(emptyConfig)\n+                .bypassGovernanceMode(true)\n+                .build());\n+\n+      } finally {\n+        client.removeObject(\n+            RemoveObjectArgs.builder().bucket(bucketName).object(objectName).build());\n+        client.removeBucket(RemoveBucketArgs.builder().bucket(bucketName).build());\n+      }\n+\n+      mintSuccessLog(\"getObjectRetention(GetObjectRetentionArgs args)\", null, startTime);\n+\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"getObjectRetention(GetObjectRetentionArgs args)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"getObjectRetention(GetObjectRetentionArgs args)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: getObjectRetention(GetObjectRetentionArgs args). */\n+  public static void getObjectRetention_test2() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\n+          \"Test: with shortened retention period: getObjectRetention(GetObjectRetentionArgs args)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).objectLock(true).build());\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          PutObjectOptions options = new PutObjectOptions(1 * KB, -1);\n+          options.setContentType(customContentType);\n+          client.putObject(bucketName, objectName, is, options);\n+        }\n+\n+        ZonedDateTime retentionUntil = ZonedDateTime.now().plusDays(3);\n+        Retention expectedConfig = new Retention(RetentionMode.GOVERNANCE, retentionUntil);\n+        client.setObjectRetention(\n+            SetObjectRetentionArgs.builder()\n+                .bucket(bucketName)\n+                .object(objectName)\n+                .config(expectedConfig)\n+                .build());\n+\n+        Retention config =\n+            client.getObjectRetention(\n+                GetObjectRetentionArgs.builder().bucket(bucketName).object(objectName).build());\n+\n+        if ((!(config\n+                .retainUntilDate()\n+                .toString()\n+                .substring(0, config.retainUntilDate().toString().indexOf(\"T\"))\n+                .equals(\n+                    expectedConfig\n+                        .retainUntilDate()\n+                        .toString()\n+                        .substring(0, expectedConfig.retainUntilDate().toString().indexOf(\"T\")))))\n+            || (config.mode() != expectedConfig.mode())) {\n+          throw new Exception(\n+              \"[FAILED] Expected: expected duration : \"\n+                  + expectedConfig.retainUntilDate()\n+                  + \", got: \"\n+                  + config.retainUntilDate()\n+                  + \" expected mode :\"\n+                  + expectedConfig.mode()\n+                  + \", got: \"\n+                  + config.mode());\n+        }\n+\n+        // You can perform operations on object versions that are locked in governance mode as if\n+        // they were unprotected if you have the s3:bypassGovernanceMode permission. These\n+        // operations include deleting an object version, shortening the retention period, or\n+        // removing the Object Lock by placing a new lock with empty parameters.\n+        ZonedDateTime shortenedRetentionUntil = ZonedDateTime.now().plusDays(1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9e13be8b16025db1057f299022e2d90f69aaf67"}, "originalPosition": 244}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a9e13be8b16025db1057f299022e2d90f69aaf67", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/a9e13be8b16025db1057f299022e2d90f69aaf67", "committedDate": "2020-05-24T07:29:25Z", "message": "add arg builder to objectRetention API"}, "afterCommit": {"oid": "c9fbc2a12a13eb1ba565a4be6a7d199b7a24a709", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/c9fbc2a12a13eb1ba565a4be6a7d199b7a24a709", "committedDate": "2020-05-26T13:53:55Z", "message": "add arg builder to objectRetention API"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3ed3923aadb3935b95f90c87d6e8eac66db3ae8", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/d3ed3923aadb3935b95f90c87d6e8eac66db3ae8", "committedDate": "2020-05-27T08:21:29Z", "message": "Set/Get Object Retention"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3298f45d075ce4113f7cf207385611255b95ea35", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/3298f45d075ce4113f7cf207385611255b95ea35", "committedDate": "2020-05-27T08:24:27Z", "message": "add arg builder to objectRetention API"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c9fbc2a12a13eb1ba565a4be6a7d199b7a24a709", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/c9fbc2a12a13eb1ba565a4be6a7d199b7a24a709", "committedDate": "2020-05-26T13:53:55Z", "message": "add arg builder to objectRetention API"}, "afterCommit": {"oid": "03c418fd29bf0528bc4fb3c0a8d209213a6fb1b7", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/03c418fd29bf0528bc4fb3c0a8d209213a6fb1b7", "committedDate": "2020-05-27T09:20:01Z", "message": "address review comment"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04a93745efb2da6db1158c734fdd163a0e987be4", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/04a93745efb2da6db1158c734fdd163a0e987be4", "committedDate": "2020-05-27T10:02:50Z", "message": "address review comment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "03c418fd29bf0528bc4fb3c0a8d209213a6fb1b7", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/03c418fd29bf0528bc4fb3c0a8d209213a6fb1b7", "committedDate": "2020-05-27T09:20:01Z", "message": "address review comment"}, "afterCommit": {"oid": "04a93745efb2da6db1158c734fdd163a0e987be4", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/04a93745efb2da6db1158c734fdd163a0e987be4", "committedDate": "2020-05-27T10:02:50Z", "message": "address review comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MjUxMTg4", "url": "https://github.com/minio/minio-java/pull/938#pullrequestreview-419251188", "createdAt": "2020-05-27T14:13:18Z", "commit": {"oid": "04a93745efb2da6db1158c734fdd163a0e987be4"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MjE3NTM1", "url": "https://github.com/minio/minio-java/pull/938#pullrequestreview-419217535", "createdAt": "2020-05-27T13:40:37Z", "commit": {"oid": "04a93745efb2da6db1158c734fdd163a0e987be4"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMzo0MDozN1rOGbKo6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDo1MzozMVrOGbOWVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEzOTA1MA==", "bodyText": "Its not required to close ContentInputStream", "url": "https://github.com/minio/minio-java/pull/938#discussion_r431139050", "createdAt": "2020-05-27T13:40:37Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3795,6 +3798,155 @@ public static void getDefaultRetention_test() throws Exception {\n     }\n   }\n \n+  /** Test: setObjectRetention(SetObjectRetentionArgs args). */\n+  public static void setObjectRetention_test1() throws Exception {\n+    String methodName = \"setObjectRetention(SetObjectRetentionArgs args)\";\n+    if (!mintEnv) {\n+      System.out.println(\"Test: \" + methodName);\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).objectLock(true).build());\n+      try {\n+        ZonedDateTime retentionUntil = ZonedDateTime.now(Time.UTC).plusDays(1).withNano(0);\n+        Retention expectedConfig = new Retention(RetentionMode.GOVERNANCE, retentionUntil);\n+\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04a93745efb2da6db1158c734fdd163a0e987be4"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTEzOTkzNQ==", "bodyText": "Just have these two lines before setObjectRetention()", "url": "https://github.com/minio/minio-java/pull/938#discussion_r431139935", "createdAt": "2020-05-27T13:41:47Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3795,6 +3798,155 @@ public static void getDefaultRetention_test() throws Exception {\n     }\n   }\n \n+  /** Test: setObjectRetention(SetObjectRetentionArgs args). */\n+  public static void setObjectRetention_test1() throws Exception {\n+    String methodName = \"setObjectRetention(SetObjectRetentionArgs args)\";\n+    if (!mintEnv) {\n+      System.out.println(\"Test: \" + methodName);\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).objectLock(true).build());\n+      try {\n+        ZonedDateTime retentionUntil = ZonedDateTime.now(Time.UTC).plusDays(1).withNano(0);\n+        Retention expectedConfig = new Retention(RetentionMode.GOVERNANCE, retentionUntil);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04a93745efb2da6db1158c734fdd163a0e987be4"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE0MTU3NQ==", "bodyText": "This is not object lock configuration. Either fix the comment or remove it.", "url": "https://github.com/minio/minio-java/pull/938#discussion_r431141575", "createdAt": "2020-05-27T13:43:59Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3795,6 +3798,155 @@ public static void getDefaultRetention_test() throws Exception {\n     }\n   }\n \n+  /** Test: setObjectRetention(SetObjectRetentionArgs args). */\n+  public static void setObjectRetention_test1() throws Exception {\n+    String methodName = \"setObjectRetention(SetObjectRetentionArgs args)\";\n+    if (!mintEnv) {\n+      System.out.println(\"Test: \" + methodName);\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).objectLock(true).build());\n+      try {\n+        ZonedDateTime retentionUntil = ZonedDateTime.now(Time.UTC).plusDays(1).withNano(0);\n+        Retention expectedConfig = new Retention(RetentionMode.GOVERNANCE, retentionUntil);\n+\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          PutObjectOptions options = new PutObjectOptions(1 * KB, -1);\n+          options.setContentType(customContentType);\n+          client.putObject(bucketName, objectName, is, options);\n+        }\n+\n+        client.setObjectRetention(\n+            SetObjectRetentionArgs.builder()\n+                .bucket(bucketName)\n+                .object(objectName)\n+                .config(expectedConfig)\n+                .build());\n+        // Set empty object lock configuration by setting bypassGovernanceMode as true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04a93745efb2da6db1158c734fdd163a0e987be4"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE2MTAzMw==", "bodyText": "same as above.", "url": "https://github.com/minio/minio-java/pull/938#discussion_r431161033", "createdAt": "2020-05-27T14:09:20Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3795,6 +3798,155 @@ public static void getDefaultRetention_test() throws Exception {\n     }\n   }\n \n+  /** Test: setObjectRetention(SetObjectRetentionArgs args). */\n+  public static void setObjectRetention_test1() throws Exception {\n+    String methodName = \"setObjectRetention(SetObjectRetentionArgs args)\";\n+    if (!mintEnv) {\n+      System.out.println(\"Test: \" + methodName);\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).objectLock(true).build());\n+      try {\n+        ZonedDateTime retentionUntil = ZonedDateTime.now(Time.UTC).plusDays(1).withNano(0);\n+        Retention expectedConfig = new Retention(RetentionMode.GOVERNANCE, retentionUntil);\n+\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          PutObjectOptions options = new PutObjectOptions(1 * KB, -1);\n+          options.setContentType(customContentType);\n+          client.putObject(bucketName, objectName, is, options);\n+        }\n+\n+        client.setObjectRetention(\n+            SetObjectRetentionArgs.builder()\n+                .bucket(bucketName)\n+                .object(objectName)\n+                .config(expectedConfig)\n+                .build());\n+        // Set empty object lock configuration by setting bypassGovernanceMode as true\n+        Retention emptyConfig = new Retention();\n+        client.setObjectRetention(\n+            SetObjectRetentionArgs.builder()\n+                .bucket(bucketName)\n+                .object(objectName)\n+                .config(emptyConfig)\n+                .bypassGovernanceMode(true)\n+                .build());\n+\n+      } finally {\n+        client.removeObject(\n+            RemoveObjectArgs.builder().bucket(bucketName).object(objectName).build());\n+        client.removeBucket(RemoveBucketArgs.builder().bucket(bucketName).build());\n+      }\n+      mintSuccessLog(methodName, null, startTime);\n+    } catch (Exception e) {\n+      handleException(methodName, null, startTime, e);\n+    }\n+  }\n+\n+  /** Test: getObjectRetention(GetObjectRetentionArgs args). */\n+  public static void getObjectRetention_test1() throws Exception {\n+    String methodName = \"getObjectRetention(GetObjectRetentionArgs args)\";\n+    if (!mintEnv) {\n+      System.out.println(\"Test: with shortened retention period: \" + methodName);\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).objectLock(true).build());\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04a93745efb2da6db1158c734fdd163a0e987be4"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE4NTM3OA==", "bodyText": "I think you could have separate two if checks.", "url": "https://github.com/minio/minio-java/pull/938#discussion_r431185378", "createdAt": "2020-05-27T14:35:27Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3795,6 +3798,155 @@ public static void getDefaultRetention_test() throws Exception {\n     }\n   }\n \n+  /** Test: setObjectRetention(SetObjectRetentionArgs args). */\n+  public static void setObjectRetention_test1() throws Exception {\n+    String methodName = \"setObjectRetention(SetObjectRetentionArgs args)\";\n+    if (!mintEnv) {\n+      System.out.println(\"Test: \" + methodName);\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).objectLock(true).build());\n+      try {\n+        ZonedDateTime retentionUntil = ZonedDateTime.now(Time.UTC).plusDays(1).withNano(0);\n+        Retention expectedConfig = new Retention(RetentionMode.GOVERNANCE, retentionUntil);\n+\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          PutObjectOptions options = new PutObjectOptions(1 * KB, -1);\n+          options.setContentType(customContentType);\n+          client.putObject(bucketName, objectName, is, options);\n+        }\n+\n+        client.setObjectRetention(\n+            SetObjectRetentionArgs.builder()\n+                .bucket(bucketName)\n+                .object(objectName)\n+                .config(expectedConfig)\n+                .build());\n+        // Set empty object lock configuration by setting bypassGovernanceMode as true\n+        Retention emptyConfig = new Retention();\n+        client.setObjectRetention(\n+            SetObjectRetentionArgs.builder()\n+                .bucket(bucketName)\n+                .object(objectName)\n+                .config(emptyConfig)\n+                .bypassGovernanceMode(true)\n+                .build());\n+\n+      } finally {\n+        client.removeObject(\n+            RemoveObjectArgs.builder().bucket(bucketName).object(objectName).build());\n+        client.removeBucket(RemoveBucketArgs.builder().bucket(bucketName).build());\n+      }\n+      mintSuccessLog(methodName, null, startTime);\n+    } catch (Exception e) {\n+      handleException(methodName, null, startTime, e);\n+    }\n+  }\n+\n+  /** Test: getObjectRetention(GetObjectRetentionArgs args). */\n+  public static void getObjectRetention_test1() throws Exception {\n+    String methodName = \"getObjectRetention(GetObjectRetentionArgs args)\";\n+    if (!mintEnv) {\n+      System.out.println(\"Test: with shortened retention period: \" + methodName);\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).objectLock(true).build());\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          PutObjectOptions options = new PutObjectOptions(1 * KB, -1);\n+          options.setContentType(customContentType);\n+          client.putObject(bucketName, objectName, is, options);\n+        }\n+\n+        ZonedDateTime retentionUntil = ZonedDateTime.now(Time.UTC).plusDays(3).withNano(0);\n+        Retention expectedConfig = new Retention(RetentionMode.GOVERNANCE, retentionUntil);\n+        client.setObjectRetention(\n+            SetObjectRetentionArgs.builder()\n+                .bucket(bucketName)\n+                .object(objectName)\n+                .config(expectedConfig)\n+                .build());\n+\n+        Retention config =\n+            client.getObjectRetention(\n+                GetObjectRetentionArgs.builder().bucket(bucketName).object(objectName).build());\n+\n+        if (!(config.retainUntilDate().equals(expectedConfig.retainUntilDate()))\n+            || (config.mode() != expectedConfig.mode())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04a93745efb2da6db1158c734fdd163a0e987be4"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE4ODA1NQ==", "bodyText": "This test is also checking to shortening retention until. You could just have \"Test: \"", "url": "https://github.com/minio/minio-java/pull/938#discussion_r431188055", "createdAt": "2020-05-27T14:38:03Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3795,6 +3798,155 @@ public static void getDefaultRetention_test() throws Exception {\n     }\n   }\n \n+  /** Test: setObjectRetention(SetObjectRetentionArgs args). */\n+  public static void setObjectRetention_test1() throws Exception {\n+    String methodName = \"setObjectRetention(SetObjectRetentionArgs args)\";\n+    if (!mintEnv) {\n+      System.out.println(\"Test: \" + methodName);\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).objectLock(true).build());\n+      try {\n+        ZonedDateTime retentionUntil = ZonedDateTime.now(Time.UTC).plusDays(1).withNano(0);\n+        Retention expectedConfig = new Retention(RetentionMode.GOVERNANCE, retentionUntil);\n+\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          PutObjectOptions options = new PutObjectOptions(1 * KB, -1);\n+          options.setContentType(customContentType);\n+          client.putObject(bucketName, objectName, is, options);\n+        }\n+\n+        client.setObjectRetention(\n+            SetObjectRetentionArgs.builder()\n+                .bucket(bucketName)\n+                .object(objectName)\n+                .config(expectedConfig)\n+                .build());\n+        // Set empty object lock configuration by setting bypassGovernanceMode as true\n+        Retention emptyConfig = new Retention();\n+        client.setObjectRetention(\n+            SetObjectRetentionArgs.builder()\n+                .bucket(bucketName)\n+                .object(objectName)\n+                .config(emptyConfig)\n+                .bypassGovernanceMode(true)\n+                .build());\n+\n+      } finally {\n+        client.removeObject(\n+            RemoveObjectArgs.builder().bucket(bucketName).object(objectName).build());\n+        client.removeBucket(RemoveBucketArgs.builder().bucket(bucketName).build());\n+      }\n+      mintSuccessLog(methodName, null, startTime);\n+    } catch (Exception e) {\n+      handleException(methodName, null, startTime, e);\n+    }\n+  }\n+\n+  /** Test: getObjectRetention(GetObjectRetentionArgs args). */\n+  public static void getObjectRetention_test1() throws Exception {\n+    String methodName = \"getObjectRetention(GetObjectRetentionArgs args)\";\n+    if (!mintEnv) {\n+      System.out.println(\"Test: with shortened retention period: \" + methodName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04a93745efb2da6db1158c734fdd163a0e987be4"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE4ODkxNA==", "bodyText": "We can reuse expectedConfig itself.", "url": "https://github.com/minio/minio-java/pull/938#discussion_r431188914", "createdAt": "2020-05-27T14:39:10Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3795,6 +3798,155 @@ public static void getDefaultRetention_test() throws Exception {\n     }\n   }\n \n+  /** Test: setObjectRetention(SetObjectRetentionArgs args). */\n+  public static void setObjectRetention_test1() throws Exception {\n+    String methodName = \"setObjectRetention(SetObjectRetentionArgs args)\";\n+    if (!mintEnv) {\n+      System.out.println(\"Test: \" + methodName);\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).objectLock(true).build());\n+      try {\n+        ZonedDateTime retentionUntil = ZonedDateTime.now(Time.UTC).plusDays(1).withNano(0);\n+        Retention expectedConfig = new Retention(RetentionMode.GOVERNANCE, retentionUntil);\n+\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          PutObjectOptions options = new PutObjectOptions(1 * KB, -1);\n+          options.setContentType(customContentType);\n+          client.putObject(bucketName, objectName, is, options);\n+        }\n+\n+        client.setObjectRetention(\n+            SetObjectRetentionArgs.builder()\n+                .bucket(bucketName)\n+                .object(objectName)\n+                .config(expectedConfig)\n+                .build());\n+        // Set empty object lock configuration by setting bypassGovernanceMode as true\n+        Retention emptyConfig = new Retention();\n+        client.setObjectRetention(\n+            SetObjectRetentionArgs.builder()\n+                .bucket(bucketName)\n+                .object(objectName)\n+                .config(emptyConfig)\n+                .bypassGovernanceMode(true)\n+                .build());\n+\n+      } finally {\n+        client.removeObject(\n+            RemoveObjectArgs.builder().bucket(bucketName).object(objectName).build());\n+        client.removeBucket(RemoveBucketArgs.builder().bucket(bucketName).build());\n+      }\n+      mintSuccessLog(methodName, null, startTime);\n+    } catch (Exception e) {\n+      handleException(methodName, null, startTime, e);\n+    }\n+  }\n+\n+  /** Test: getObjectRetention(GetObjectRetentionArgs args). */\n+  public static void getObjectRetention_test1() throws Exception {\n+    String methodName = \"getObjectRetention(GetObjectRetentionArgs args)\";\n+    if (!mintEnv) {\n+      System.out.println(\"Test: with shortened retention period: \" + methodName);\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).objectLock(true).build());\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          PutObjectOptions options = new PutObjectOptions(1 * KB, -1);\n+          options.setContentType(customContentType);\n+          client.putObject(bucketName, objectName, is, options);\n+        }\n+\n+        ZonedDateTime retentionUntil = ZonedDateTime.now(Time.UTC).plusDays(3).withNano(0);\n+        Retention expectedConfig = new Retention(RetentionMode.GOVERNANCE, retentionUntil);\n+        client.setObjectRetention(\n+            SetObjectRetentionArgs.builder()\n+                .bucket(bucketName)\n+                .object(objectName)\n+                .config(expectedConfig)\n+                .build());\n+\n+        Retention config =\n+            client.getObjectRetention(\n+                GetObjectRetentionArgs.builder().bucket(bucketName).object(objectName).build());\n+\n+        if (!(config.retainUntilDate().equals(expectedConfig.retainUntilDate()))\n+            || (config.mode() != expectedConfig.mode())) {\n+          throw new Exception(\n+              \"[FAILED] Expected: expected duration : \"\n+                  + expectedConfig.retainUntilDate()\n+                  + \", got: \"\n+                  + config.retainUntilDate()\n+                  + \" expected mode :\"\n+                  + expectedConfig.mode()\n+                  + \", got: \"\n+                  + config.mode());\n+        }\n+\n+        // You can perform operations on object versions that are locked in governance mode as if\n+        // they were unprotected if you have the s3:bypassGovernanceMode permission. These\n+        // operations include deleting an object version, shortening the retention period, or\n+        // removing the Object Lock by placing a new lock with empty parameters.\n+        ZonedDateTime shortenedRetentionUntil = ZonedDateTime.now(Time.UTC).plusDays(1).withNano(0);\n+        Retention expectedConfigWithShortenedPeriod =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04a93745efb2da6db1158c734fdd163a0e987be4"}, "originalPosition": 149}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5MDE2NQ==", "bodyText": "similarly config can be reused.", "url": "https://github.com/minio/minio-java/pull/938#discussion_r431190165", "createdAt": "2020-05-27T14:40:48Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3795,6 +3798,155 @@ public static void getDefaultRetention_test() throws Exception {\n     }\n   }\n \n+  /** Test: setObjectRetention(SetObjectRetentionArgs args). */\n+  public static void setObjectRetention_test1() throws Exception {\n+    String methodName = \"setObjectRetention(SetObjectRetentionArgs args)\";\n+    if (!mintEnv) {\n+      System.out.println(\"Test: \" + methodName);\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).objectLock(true).build());\n+      try {\n+        ZonedDateTime retentionUntil = ZonedDateTime.now(Time.UTC).plusDays(1).withNano(0);\n+        Retention expectedConfig = new Retention(RetentionMode.GOVERNANCE, retentionUntil);\n+\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          PutObjectOptions options = new PutObjectOptions(1 * KB, -1);\n+          options.setContentType(customContentType);\n+          client.putObject(bucketName, objectName, is, options);\n+        }\n+\n+        client.setObjectRetention(\n+            SetObjectRetentionArgs.builder()\n+                .bucket(bucketName)\n+                .object(objectName)\n+                .config(expectedConfig)\n+                .build());\n+        // Set empty object lock configuration by setting bypassGovernanceMode as true\n+        Retention emptyConfig = new Retention();\n+        client.setObjectRetention(\n+            SetObjectRetentionArgs.builder()\n+                .bucket(bucketName)\n+                .object(objectName)\n+                .config(emptyConfig)\n+                .bypassGovernanceMode(true)\n+                .build());\n+\n+      } finally {\n+        client.removeObject(\n+            RemoveObjectArgs.builder().bucket(bucketName).object(objectName).build());\n+        client.removeBucket(RemoveBucketArgs.builder().bucket(bucketName).build());\n+      }\n+      mintSuccessLog(methodName, null, startTime);\n+    } catch (Exception e) {\n+      handleException(methodName, null, startTime, e);\n+    }\n+  }\n+\n+  /** Test: getObjectRetention(GetObjectRetentionArgs args). */\n+  public static void getObjectRetention_test1() throws Exception {\n+    String methodName = \"getObjectRetention(GetObjectRetentionArgs args)\";\n+    if (!mintEnv) {\n+      System.out.println(\"Test: with shortened retention period: \" + methodName);\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).objectLock(true).build());\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          PutObjectOptions options = new PutObjectOptions(1 * KB, -1);\n+          options.setContentType(customContentType);\n+          client.putObject(bucketName, objectName, is, options);\n+        }\n+\n+        ZonedDateTime retentionUntil = ZonedDateTime.now(Time.UTC).plusDays(3).withNano(0);\n+        Retention expectedConfig = new Retention(RetentionMode.GOVERNANCE, retentionUntil);\n+        client.setObjectRetention(\n+            SetObjectRetentionArgs.builder()\n+                .bucket(bucketName)\n+                .object(objectName)\n+                .config(expectedConfig)\n+                .build());\n+\n+        Retention config =\n+            client.getObjectRetention(\n+                GetObjectRetentionArgs.builder().bucket(bucketName).object(objectName).build());\n+\n+        if (!(config.retainUntilDate().equals(expectedConfig.retainUntilDate()))\n+            || (config.mode() != expectedConfig.mode())) {\n+          throw new Exception(\n+              \"[FAILED] Expected: expected duration : \"\n+                  + expectedConfig.retainUntilDate()\n+                  + \", got: \"\n+                  + config.retainUntilDate()\n+                  + \" expected mode :\"\n+                  + expectedConfig.mode()\n+                  + \", got: \"\n+                  + config.mode());\n+        }\n+\n+        // You can perform operations on object versions that are locked in governance mode as if\n+        // they were unprotected if you have the s3:bypassGovernanceMode permission. These\n+        // operations include deleting an object version, shortening the retention period, or\n+        // removing the Object Lock by placing a new lock with empty parameters.\n+        ZonedDateTime shortenedRetentionUntil = ZonedDateTime.now(Time.UTC).plusDays(1).withNano(0);\n+        Retention expectedConfigWithShortenedPeriod =\n+            new Retention(RetentionMode.GOVERNANCE, shortenedRetentionUntil);\n+        client.setObjectRetention(\n+            SetObjectRetentionArgs.builder()\n+                .bucket(bucketName)\n+                .object(objectName)\n+                .config(expectedConfigWithShortenedPeriod)\n+                .bypassGovernanceMode(true)\n+                .build());\n+\n+        Retention updatedConfig =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04a93745efb2da6db1158c734fdd163a0e987be4"}, "originalPosition": 159}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5MTg2Mg==", "bodyText": "You could fix object lock configuration comment overall. This comment will make confusion with {Get,Put}ObjectLockConfiguration", "url": "https://github.com/minio/minio-java/pull/938#discussion_r431191862", "createdAt": "2020-05-27T14:43:10Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3795,6 +3798,155 @@ public static void getDefaultRetention_test() throws Exception {\n     }\n   }\n \n+  /** Test: setObjectRetention(SetObjectRetentionArgs args). */\n+  public static void setObjectRetention_test1() throws Exception {\n+    String methodName = \"setObjectRetention(SetObjectRetentionArgs args)\";\n+    if (!mintEnv) {\n+      System.out.println(\"Test: \" + methodName);\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).objectLock(true).build());\n+      try {\n+        ZonedDateTime retentionUntil = ZonedDateTime.now(Time.UTC).plusDays(1).withNano(0);\n+        Retention expectedConfig = new Retention(RetentionMode.GOVERNANCE, retentionUntil);\n+\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          PutObjectOptions options = new PutObjectOptions(1 * KB, -1);\n+          options.setContentType(customContentType);\n+          client.putObject(bucketName, objectName, is, options);\n+        }\n+\n+        client.setObjectRetention(\n+            SetObjectRetentionArgs.builder()\n+                .bucket(bucketName)\n+                .object(objectName)\n+                .config(expectedConfig)\n+                .build());\n+        // Set empty object lock configuration by setting bypassGovernanceMode as true\n+        Retention emptyConfig = new Retention();\n+        client.setObjectRetention(\n+            SetObjectRetentionArgs.builder()\n+                .bucket(bucketName)\n+                .object(objectName)\n+                .config(emptyConfig)\n+                .bypassGovernanceMode(true)\n+                .build());\n+\n+      } finally {\n+        client.removeObject(\n+            RemoveObjectArgs.builder().bucket(bucketName).object(objectName).build());\n+        client.removeBucket(RemoveBucketArgs.builder().bucket(bucketName).build());\n+      }\n+      mintSuccessLog(methodName, null, startTime);\n+    } catch (Exception e) {\n+      handleException(methodName, null, startTime, e);\n+    }\n+  }\n+\n+  /** Test: getObjectRetention(GetObjectRetentionArgs args). */\n+  public static void getObjectRetention_test1() throws Exception {\n+    String methodName = \"getObjectRetention(GetObjectRetentionArgs args)\";\n+    if (!mintEnv) {\n+      System.out.println(\"Test: with shortened retention period: \" + methodName);\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).objectLock(true).build());\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          PutObjectOptions options = new PutObjectOptions(1 * KB, -1);\n+          options.setContentType(customContentType);\n+          client.putObject(bucketName, objectName, is, options);\n+        }\n+\n+        ZonedDateTime retentionUntil = ZonedDateTime.now(Time.UTC).plusDays(3).withNano(0);\n+        Retention expectedConfig = new Retention(RetentionMode.GOVERNANCE, retentionUntil);\n+        client.setObjectRetention(\n+            SetObjectRetentionArgs.builder()\n+                .bucket(bucketName)\n+                .object(objectName)\n+                .config(expectedConfig)\n+                .build());\n+\n+        Retention config =\n+            client.getObjectRetention(\n+                GetObjectRetentionArgs.builder().bucket(bucketName).object(objectName).build());\n+\n+        if (!(config.retainUntilDate().equals(expectedConfig.retainUntilDate()))\n+            || (config.mode() != expectedConfig.mode())) {\n+          throw new Exception(\n+              \"[FAILED] Expected: expected duration : \"\n+                  + expectedConfig.retainUntilDate()\n+                  + \", got: \"\n+                  + config.retainUntilDate()\n+                  + \" expected mode :\"\n+                  + expectedConfig.mode()\n+                  + \", got: \"\n+                  + config.mode());\n+        }\n+\n+        // You can perform operations on object versions that are locked in governance mode as if\n+        // they were unprotected if you have the s3:bypassGovernanceMode permission. These\n+        // operations include deleting an object version, shortening the retention period, or\n+        // removing the Object Lock by placing a new lock with empty parameters.\n+        ZonedDateTime shortenedRetentionUntil = ZonedDateTime.now(Time.UTC).plusDays(1).withNano(0);\n+        Retention expectedConfigWithShortenedPeriod =\n+            new Retention(RetentionMode.GOVERNANCE, shortenedRetentionUntil);\n+        client.setObjectRetention(\n+            SetObjectRetentionArgs.builder()\n+                .bucket(bucketName)\n+                .object(objectName)\n+                .config(expectedConfigWithShortenedPeriod)\n+                .bypassGovernanceMode(true)\n+                .build());\n+\n+        Retention updatedConfig =\n+            client.getObjectRetention(\n+                GetObjectRetentionArgs.builder().bucket(bucketName).object(objectName).build());\n+\n+        if (!(updatedConfig\n+                .retainUntilDate()\n+                .equals(expectedConfigWithShortenedPeriod.retainUntilDate()))\n+            || (updatedConfig.mode() != expectedConfigWithShortenedPeriod.mode())) {\n+          throw new Exception(\n+              \"[FAILED] Expected: expected duration : \"\n+                  + expectedConfigWithShortenedPeriod.retainUntilDate()\n+                  + \", got: \"\n+                  + updatedConfig.retainUntilDate()\n+                  + \" expected mode :\"\n+                  + expectedConfigWithShortenedPeriod.mode()\n+                  + \", got: \"\n+                  + updatedConfig.mode());\n+        }\n+\n+        // Set empty object lock configuration by setting bypassGovernanceMode as true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04a93745efb2da6db1158c734fdd163a0e987be4"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5OTgyOQ==", "bodyText": "I don't think this long comment is useful. You could have // Check shortening retention until period", "url": "https://github.com/minio/minio-java/pull/938#discussion_r431199829", "createdAt": "2020-05-27T14:53:31Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -3795,6 +3798,155 @@ public static void getDefaultRetention_test() throws Exception {\n     }\n   }\n \n+  /** Test: setObjectRetention(SetObjectRetentionArgs args). */\n+  public static void setObjectRetention_test1() throws Exception {\n+    String methodName = \"setObjectRetention(SetObjectRetentionArgs args)\";\n+    if (!mintEnv) {\n+      System.out.println(\"Test: \" + methodName);\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).objectLock(true).build());\n+      try {\n+        ZonedDateTime retentionUntil = ZonedDateTime.now(Time.UTC).plusDays(1).withNano(0);\n+        Retention expectedConfig = new Retention(RetentionMode.GOVERNANCE, retentionUntil);\n+\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          PutObjectOptions options = new PutObjectOptions(1 * KB, -1);\n+          options.setContentType(customContentType);\n+          client.putObject(bucketName, objectName, is, options);\n+        }\n+\n+        client.setObjectRetention(\n+            SetObjectRetentionArgs.builder()\n+                .bucket(bucketName)\n+                .object(objectName)\n+                .config(expectedConfig)\n+                .build());\n+        // Set empty object lock configuration by setting bypassGovernanceMode as true\n+        Retention emptyConfig = new Retention();\n+        client.setObjectRetention(\n+            SetObjectRetentionArgs.builder()\n+                .bucket(bucketName)\n+                .object(objectName)\n+                .config(emptyConfig)\n+                .bypassGovernanceMode(true)\n+                .build());\n+\n+      } finally {\n+        client.removeObject(\n+            RemoveObjectArgs.builder().bucket(bucketName).object(objectName).build());\n+        client.removeBucket(RemoveBucketArgs.builder().bucket(bucketName).build());\n+      }\n+      mintSuccessLog(methodName, null, startTime);\n+    } catch (Exception e) {\n+      handleException(methodName, null, startTime, e);\n+    }\n+  }\n+\n+  /** Test: getObjectRetention(GetObjectRetentionArgs args). */\n+  public static void getObjectRetention_test1() throws Exception {\n+    String methodName = \"getObjectRetention(GetObjectRetentionArgs args)\";\n+    if (!mintEnv) {\n+      System.out.println(\"Test: with shortened retention period: \" + methodName);\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    String bucketName = getRandomName();\n+    String objectName = getRandomName();\n+    try {\n+      client.makeBucket(MakeBucketArgs.builder().bucket(bucketName).objectLock(true).build());\n+      try {\n+        try (final InputStream is = new ContentInputStream(1 * KB)) {\n+          PutObjectOptions options = new PutObjectOptions(1 * KB, -1);\n+          options.setContentType(customContentType);\n+          client.putObject(bucketName, objectName, is, options);\n+        }\n+\n+        ZonedDateTime retentionUntil = ZonedDateTime.now(Time.UTC).plusDays(3).withNano(0);\n+        Retention expectedConfig = new Retention(RetentionMode.GOVERNANCE, retentionUntil);\n+        client.setObjectRetention(\n+            SetObjectRetentionArgs.builder()\n+                .bucket(bucketName)\n+                .object(objectName)\n+                .config(expectedConfig)\n+                .build());\n+\n+        Retention config =\n+            client.getObjectRetention(\n+                GetObjectRetentionArgs.builder().bucket(bucketName).object(objectName).build());\n+\n+        if (!(config.retainUntilDate().equals(expectedConfig.retainUntilDate()))\n+            || (config.mode() != expectedConfig.mode())) {\n+          throw new Exception(\n+              \"[FAILED] Expected: expected duration : \"\n+                  + expectedConfig.retainUntilDate()\n+                  + \", got: \"\n+                  + config.retainUntilDate()\n+                  + \" expected mode :\"\n+                  + expectedConfig.mode()\n+                  + \", got: \"\n+                  + config.mode());\n+        }\n+\n+        // You can perform operations on object versions that are locked in governance mode as if\n+        // they were unprotected if you have the s3:bypassGovernanceMode permission. These\n+        // operations include deleting an object version, shortening the retention period, or\n+        // removing the Object Lock by placing a new lock with empty parameters.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "04a93745efb2da6db1158c734fdd163a0e987be4"}, "originalPosition": 147}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92d08641908f41c6a675a4d9c3016da62c6fa40c", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/92d08641908f41c6a675a4d9c3016da62c6fa40c", "committedDate": "2020-05-27T15:06:30Z", "message": "Add withNano(0) to be S3 compatiable"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b726bc09fe87cb548c499ff968ef6b52cbd3701e", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/b726bc09fe87cb548c499ff968ef6b52cbd3701e", "committedDate": "2020-05-27T15:03:34Z", "message": "Add withNano(0) to be S3 compatiable"}, "afterCommit": {"oid": "92d08641908f41c6a675a4d9c3016da62c6fa40c", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/92d08641908f41c6a675a4d9c3016da62c6fa40c", "committedDate": "2020-05-27T15:06:30Z", "message": "Add withNano(0) to be S3 compatiable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b0a6af5420b63d5cb64ef6bb24988a1a5d9f2205", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/b0a6af5420b63d5cb64ef6bb24988a1a5d9f2205", "committedDate": "2020-05-27T16:24:30Z", "message": "Address bala's comment"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2a89bb09bda496f5d5211bff7f3f20cb954d80b5", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/2a89bb09bda496f5d5211bff7f3f20cb954d80b5", "committedDate": "2020-05-27T16:10:56Z", "message": "Address bala's comment"}, "afterCommit": {"oid": "b0a6af5420b63d5cb64ef6bb24988a1a5d9f2205", "author": {"user": {"login": "sinhaashish", "name": "Ashish Kumar Sinha"}}, "url": "https://github.com/minio/minio-java/commit/b0a6af5420b63d5cb64ef6bb24988a1a5d9f2205", "committedDate": "2020-05-27T16:24:30Z", "message": "Address bala's comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NDAwNjU0", "url": "https://github.com/minio/minio-java/pull/938#pullrequestreview-419400654", "createdAt": "2020-05-27T16:27:15Z", "commit": {"oid": "b0a6af5420b63d5cb64ef6bb24988a1a5d9f2205"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NTE2NzEx", "url": "https://github.com/minio/minio-java/pull/938#pullrequestreview-419516711", "createdAt": "2020-05-27T18:53:20Z", "commit": {"oid": "b0a6af5420b63d5cb64ef6bb24988a1a5d9f2205"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1888, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}