{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyNTEwODQ1", "number": 900, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMTo1NDozOFrOD-khtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMjowNjo0NFrOD-ktwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2OTM2NzU4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/MinioClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMTo1NDozOFrOGYwF8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMjozMTozNVrOGYxDGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYwNjk2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                return (endpoint.startsWith(\"s3.\") || endpoint.startsWith(\"s3-accelerate.\"))\n          \n          \n            \n                return (endpoint.startsWith(\"s3.\") || isAwsAccelerateEndpoint(endpoint))", "url": "https://github.com/minio/minio-java/pull/900#discussion_r428606963", "createdAt": "2020-05-21T11:54:38Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -734,53 +779,38 @@ public MinioClient(\n           throw new RuntimeException(e);\n         }\n       }\n+    } else {\n+      this.httpClient = httpClient;\n     }\n+  }\n \n-    HttpUrl url = HttpUrl.parse(endpoint);\n-    if (url != null) {\n-      if (!\"/\".equals(url.encodedPath())) {\n-        throw new InvalidEndpointException(endpoint, \"no path allowed in endpoint\");\n-      }\n-\n-      HttpUrl.Builder urlBuilder = url.newBuilder();\n-      Scheme scheme = Scheme.HTTP;\n-      if (secure) {\n-        scheme = Scheme.HTTPS;\n-      }\n-\n-      urlBuilder.scheme(scheme.toString());\n+  private static boolean isAwsEndpoint(String endpoint) {\n+    return (endpoint.startsWith(\"s3.\") || endpoint.startsWith(\"s3-accelerate.\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b71244433cc9f7c45a2e01a419fa06739a0a728"}, "originalPosition": 502}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYyMjYxNw==", "bodyText": "done", "url": "https://github.com/minio/minio-java/pull/900#discussion_r428622617", "createdAt": "2020-05-21T12:31:35Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -734,53 +779,38 @@ public MinioClient(\n           throw new RuntimeException(e);\n         }\n       }\n+    } else {\n+      this.httpClient = httpClient;\n     }\n+  }\n \n-    HttpUrl url = HttpUrl.parse(endpoint);\n-    if (url != null) {\n-      if (!\"/\".equals(url.encodedPath())) {\n-        throw new InvalidEndpointException(endpoint, \"no path allowed in endpoint\");\n-      }\n-\n-      HttpUrl.Builder urlBuilder = url.newBuilder();\n-      Scheme scheme = Scheme.HTTP;\n-      if (secure) {\n-        scheme = Scheme.HTTPS;\n-      }\n-\n-      urlBuilder.scheme(scheme.toString());\n+  private static boolean isAwsEndpoint(String endpoint) {\n+    return (endpoint.startsWith(\"s3.\") || endpoint.startsWith(\"s3-accelerate.\"))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYwNjk2Mw=="}, "originalCommit": {"oid": "4b71244433cc9f7c45a2e01a419fa06739a0a728"}, "originalPosition": 502}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2OTM3OTkwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/MinioClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMTo1OTozNlrOGYwNlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzowMjozNFrOGYx7qA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYwODkxOA==", "bodyText": "Please add some method level comments explaining the logic, preferably with an example.\nDoes this apply only in case of dualstack endpoint?", "url": "https://github.com/minio/minio-java/pull/900#discussion_r428608918", "createdAt": "2020-05-21T11:59:36Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -734,53 +779,38 @@ public MinioClient(\n           throw new RuntimeException(e);\n         }\n       }\n+    } else {\n+      this.httpClient = httpClient;\n     }\n+  }\n \n-    HttpUrl url = HttpUrl.parse(endpoint);\n-    if (url != null) {\n-      if (!\"/\".equals(url.encodedPath())) {\n-        throw new InvalidEndpointException(endpoint, \"no path allowed in endpoint\");\n-      }\n-\n-      HttpUrl.Builder urlBuilder = url.newBuilder();\n-      Scheme scheme = Scheme.HTTP;\n-      if (secure) {\n-        scheme = Scheme.HTTPS;\n-      }\n-\n-      urlBuilder.scheme(scheme.toString());\n+  private static boolean isAwsEndpoint(String endpoint) {\n+    return (endpoint.startsWith(\"s3.\") || endpoint.startsWith(\"s3-accelerate.\"))\n+        && (endpoint.endsWith(\".amazonaws.com\") || endpoint.endsWith(\".amazonaws.com.cn\"));\n+  }\n \n-      if (port > 0) {\n-        urlBuilder.port(port);\n-      }\n+  private static boolean isAwsAccelerateEndpoint(String endpoint) {\n+    return endpoint.startsWith(\"s3-accelerate.\");\n+  }\n \n-      this.baseUrl = urlBuilder.build();\n-      this.accessKey = accessKey;\n-      this.secretKey = secretKey;\n-      this.region = region;\n+  private static boolean isAwsDualStackEndpoint(String endpoint) {\n+    return endpoint.contains(\".dualstack.\");\n+  }\n \n-      return;\n-    }\n+  private static String extractRegion(String endpoint) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b71244433cc9f7c45a2e01a419fa06739a0a728"}, "originalPosition": 523}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzNzA5Ng==", "bodyText": "Done\nNo. A regular AWS endpoints may contain region.", "url": "https://github.com/minio/minio-java/pull/900#discussion_r428637096", "createdAt": "2020-05-21T13:02:34Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -734,53 +779,38 @@ public MinioClient(\n           throw new RuntimeException(e);\n         }\n       }\n+    } else {\n+      this.httpClient = httpClient;\n     }\n+  }\n \n-    HttpUrl url = HttpUrl.parse(endpoint);\n-    if (url != null) {\n-      if (!\"/\".equals(url.encodedPath())) {\n-        throw new InvalidEndpointException(endpoint, \"no path allowed in endpoint\");\n-      }\n-\n-      HttpUrl.Builder urlBuilder = url.newBuilder();\n-      Scheme scheme = Scheme.HTTP;\n-      if (secure) {\n-        scheme = Scheme.HTTPS;\n-      }\n-\n-      urlBuilder.scheme(scheme.toString());\n+  private static boolean isAwsEndpoint(String endpoint) {\n+    return (endpoint.startsWith(\"s3.\") || endpoint.startsWith(\"s3-accelerate.\"))\n+        && (endpoint.endsWith(\".amazonaws.com\") || endpoint.endsWith(\".amazonaws.com.cn\"));\n+  }\n \n-      if (port > 0) {\n-        urlBuilder.port(port);\n-      }\n+  private static boolean isAwsAccelerateEndpoint(String endpoint) {\n+    return endpoint.startsWith(\"s3-accelerate.\");\n+  }\n \n-      this.baseUrl = urlBuilder.build();\n-      this.accessKey = accessKey;\n-      this.secretKey = secretKey;\n-      this.region = region;\n+  private static boolean isAwsDualStackEndpoint(String endpoint) {\n+    return endpoint.contains(\".dualstack.\");\n+  }\n \n-      return;\n-    }\n+  private static String extractRegion(String endpoint) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYwODkxOA=="}, "originalCommit": {"oid": "4b71244433cc9f7c45a2e01a419fa06739a0a728"}, "originalPosition": 523}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2OTM5MDExOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/MinioClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMjowMzo0MFrOGYwT3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzowNjozNFrOGYyDSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYxMDUyNg==", "bodyText": "This method (buildUrl) seems too big. It might be a good idea to refactor it and make it smaller.\nFor the AWS specific logic in this method, maybe introduce a new class called AwsUrlBuilder and use it from here?", "url": "https://github.com/minio/minio-java/pull/900#discussion_r428610526", "createdAt": "2020-05-21T12:03:40Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -947,55 +977,77 @@ private HttpUrl buildUrl(\n       Multimap<String, String> queryParamMap)\n       throws IllegalArgumentException, InvalidBucketNameException, NoSuchAlgorithmException {\n     if (bucketName == null && objectName != null) {\n-      throw new InvalidBucketNameException(\n-          NULL_STRING, \"null bucket name for object '\" + objectName + \"'\");\n+      throw new IllegalArgumentException(\"null bucket name for object '\" + objectName + \"'\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b71244433cc9f7c45a2e01a419fa06739a0a728"}, "originalPosition": 600}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYzOTA0OA==", "bodyText": "I think this can be done when we bring builder pattern to constructor", "url": "https://github.com/minio/minio-java/pull/900#discussion_r428639048", "createdAt": "2020-05-21T13:06:34Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -947,55 +977,77 @@ private HttpUrl buildUrl(\n       Multimap<String, String> queryParamMap)\n       throws IllegalArgumentException, InvalidBucketNameException, NoSuchAlgorithmException {\n     if (bucketName == null && objectName != null) {\n-      throw new InvalidBucketNameException(\n-          NULL_STRING, \"null bucket name for object '\" + objectName + \"'\");\n+      throw new IllegalArgumentException(\"null bucket name for object '\" + objectName + \"'\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYxMDUyNg=="}, "originalCommit": {"oid": "4b71244433cc9f7c45a2e01a419fa06739a0a728"}, "originalPosition": 600}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2OTM5NTczOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/MinioClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMjowNTo0N1rOGYwXHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzowOTo0NVrOGYyJUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYxMTM1Ng==", "bodyText": "This comment is probably more appropriate just before the line\nAwsRegionCache.INSTANCE.set(bucketName, region);", "url": "https://github.com/minio/minio-java/pull/900#discussion_r428611356", "createdAt": "2020-05-21T12:05:47Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -1317,50 +1373,43 @@ private Response execute(\n         method, bucketName, objectName, region, headerMultiMap, queryParamMultiMap, body, length);\n   }\n \n-  /** Updates Region cache for given bucket. */\n-  private void updateRegionCache(String bucketName)\n+  /** Returns region of given bucket either from region cache or set in constructor. */\n+  private String getRegion(String bucketName)\n       throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n           InternalException, InvalidBucketNameException, InvalidKeyException,\n           InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n-    if (bucketName != null\n-        && this.accessKey != null\n-        && this.secretKey != null\n-        && !BucketRegionCache.INSTANCE.exists(bucketName)) {\n-      Map<String, String> queryParamMap = new HashMap<>();\n-      queryParamMap.put(\"location\", null);\n-\n-      Response response =\n-          execute(Method.GET, bucketName, null, US_EAST_1, null, queryParamMap, null, 0);\n-\n-      String region;\n-      try (ResponseBody body = response.body()) {\n-        LocationConstraint lc = Xml.unmarshal(LocationConstraint.class, body.charStream());\n-        if (lc.location() == null || lc.location().equals(\"\")) {\n-          region = US_EAST_1; // default region\n-        } else if (lc.location().equals(\"EU\")) {\n-          region = \"eu-west-1\"; // eu-west-1 can be sometimes 'EU'.\n-        } else {\n-          region = lc.location();\n-        }\n-      }\n+    if (this.region != null && !this.region.equals(\"\")) {\n+      return this.region;\n+    }\n \n-      // Add the new location.\n-      BucketRegionCache.INSTANCE.set(bucketName, region);\n+    if (!isAwsHost || bucketName == null || this.accessKey == null) {\n+      return US_EAST_1;\n     }\n-  }\n \n-  /** Returns region of given bucket either from region cache or set in constructor. */\n-  private String getRegion(String bucketName)\n-      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n-          InternalException, InvalidBucketNameException, InvalidKeyException,\n-          InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n-    String region;\n-    if (this.region == null || \"\".equals(this.region)) {\n-      updateRegionCache(bucketName);\n-      region = BucketRegionCache.INSTANCE.region(bucketName);\n-    } else {\n-      region = this.region;\n+    String region = AwsRegionCache.INSTANCE.get(bucketName);\n+    if (region != null) {\n+      return region;\n+    }\n+\n+    // Updates region cache for this bucket.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b71244433cc9f7c45a2e01a419fa06739a0a728"}, "originalPosition": 795}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY0MDU5NQ==", "bodyText": "I changed the comment to // Execute GetBucketLocation REST API to get region of the bucket. for specific meaning.", "url": "https://github.com/minio/minio-java/pull/900#discussion_r428640595", "createdAt": "2020-05-21T13:09:45Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -1317,50 +1373,43 @@ private Response execute(\n         method, bucketName, objectName, region, headerMultiMap, queryParamMultiMap, body, length);\n   }\n \n-  /** Updates Region cache for given bucket. */\n-  private void updateRegionCache(String bucketName)\n+  /** Returns region of given bucket either from region cache or set in constructor. */\n+  private String getRegion(String bucketName)\n       throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n           InternalException, InvalidBucketNameException, InvalidKeyException,\n           InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n-    if (bucketName != null\n-        && this.accessKey != null\n-        && this.secretKey != null\n-        && !BucketRegionCache.INSTANCE.exists(bucketName)) {\n-      Map<String, String> queryParamMap = new HashMap<>();\n-      queryParamMap.put(\"location\", null);\n-\n-      Response response =\n-          execute(Method.GET, bucketName, null, US_EAST_1, null, queryParamMap, null, 0);\n-\n-      String region;\n-      try (ResponseBody body = response.body()) {\n-        LocationConstraint lc = Xml.unmarshal(LocationConstraint.class, body.charStream());\n-        if (lc.location() == null || lc.location().equals(\"\")) {\n-          region = US_EAST_1; // default region\n-        } else if (lc.location().equals(\"EU\")) {\n-          region = \"eu-west-1\"; // eu-west-1 can be sometimes 'EU'.\n-        } else {\n-          region = lc.location();\n-        }\n-      }\n+    if (this.region != null && !this.region.equals(\"\")) {\n+      return this.region;\n+    }\n \n-      // Add the new location.\n-      BucketRegionCache.INSTANCE.set(bucketName, region);\n+    if (!isAwsHost || bucketName == null || this.accessKey == null) {\n+      return US_EAST_1;\n     }\n-  }\n \n-  /** Returns region of given bucket either from region cache or set in constructor. */\n-  private String getRegion(String bucketName)\n-      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n-          InternalException, InvalidBucketNameException, InvalidKeyException,\n-          InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n-    String region;\n-    if (this.region == null || \"\".equals(this.region)) {\n-      updateRegionCache(bucketName);\n-      region = BucketRegionCache.INSTANCE.region(bucketName);\n-    } else {\n-      region = this.region;\n+    String region = AwsRegionCache.INSTANCE.get(bucketName);\n+    if (region != null) {\n+      return region;\n+    }\n+\n+    // Updates region cache for this bucket.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYxMTM1Ng=="}, "originalCommit": {"oid": "4b71244433cc9f7c45a2e01a419fa06739a0a728"}, "originalPosition": 795}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2OTM5ODQwOnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMjowNjo0NFrOGYwYrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMVQxMzoxMTo1N1rOGYyN0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYxMTc1Nw==", "bodyText": "The above comment also needs to change accordingly?", "url": "https://github.com/minio/minio-java/pull/900#discussion_r428611757", "createdAt": "2020-05-21T12:06:44Z", "author": {"login": "anjalshireesh"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -4345,7 +4345,7 @@ public static void runTests() throws Exception {\n \n     // SSE_S3 and SSE_KMS only work with endpoint=\"s3.amazonaws.com\"\n     String requestUrl = endpoint;\n-    if (requestUrl.equals(\"s3.amazonaws.com\")) {\n+    if (requestUrl.contains(\".amazonaws.com\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b71244433cc9f7c45a2e01a419fa06739a0a728"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODY0MTc0NQ==", "bodyText": "Done", "url": "https://github.com/minio/minio-java/pull/900#discussion_r428641745", "createdAt": "2020-05-21T13:11:57Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -4345,7 +4345,7 @@ public static void runTests() throws Exception {\n \n     // SSE_S3 and SSE_KMS only work with endpoint=\"s3.amazonaws.com\"\n     String requestUrl = endpoint;\n-    if (requestUrl.equals(\"s3.amazonaws.com\")) {\n+    if (requestUrl.contains(\".amazonaws.com\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODYxMTc1Nw=="}, "originalCommit": {"oid": "4b71244433cc9f7c45a2e01a419fa06739a0a728"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 655, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}