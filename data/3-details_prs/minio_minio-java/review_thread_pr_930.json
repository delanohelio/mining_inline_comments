{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3MjI1NDk3", "number": 930, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo0MjoxN1rOD8ZwNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDoxNDowMFrOD-PTmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NjYzMDkzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/VersionBucketArgs.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo0MjoxN1rOGVUW3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQwOTo0MjoxN1rOGVUW3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTAwNjgxMg==", "bodyText": "I would suggest to have each API has separate Args class.", "url": "https://github.com/minio/minio-java/pull/930#discussion_r425006812", "createdAt": "2020-05-14T09:42:17Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/VersionBucketArgs.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+/**\n+ * Argument class of @see #enableVersioning(VersionBucketArgs args) @see\n+ * #disableVersioning(VersionBucketArgs args).\n+ */\n+public class VersionBucketArgs extends BucketArgs {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "264c36b3e28f439017567cb326d5d2cfeb9d6a43"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NzcyMzk4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/DisableVersionBucketArgs.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDozMzozOVrOGVfPTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDozMzozOVrOGVfPTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE4NTEwMQ==", "bodyText": "We would need to have name consistency with API name. Here, DisableVersioningArgs and EnableVersioningArgs are appropriate.\nRemove any obvious comments for getters (if any).\nFollow consistent comments for Args and Builder class. #934 can be taken as reference.", "url": "https://github.com/minio/minio-java/pull/930#discussion_r425185101", "createdAt": "2020-05-14T14:33:39Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/DisableVersionBucketArgs.java", "diffHunk": "@@ -0,0 +1,31 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+/** Argument class of @see #disableVersioning(DisableVersionBucketArgs args). */\n+public class DisableVersionBucketArgs extends BucketArgs {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a85024ac986f8fb9b33772c952453e38453bd90"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Mzk4ODMxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/MinioClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNDo1NDo0MFrOGX7NnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNDo1NDo0MFrOGX7NnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc0MDU3Mg==", "bodyText": "Please fix to * @param args {@link EnableVersioningArgs} object.", "url": "https://github.com/minio/minio-java/pull/930#discussion_r427740572", "createdAt": "2020-05-20T04:54:40Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -3468,16 +3468,44 @@ public void makeBucket(MakeBucketArgs args)\n    * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n    * @throws XmlParserException thrown to indicate XML parsing error.\n    */\n+  @Deprecated\n   public void enableVersioning(String bucketName)\n       throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n           InternalException, InvalidBucketNameException, InvalidKeyException,\n           InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+    this.enableVersioning(EnableVersioningArgs.builder().bucket(bucketName).build());\n+  }\n+\n+  /**\n+   * Enables object versioning feature in a bucket.\n+   *\n+   * <pre>Example:{@code\n+   * minioClient.enableVersioning(EnableVersioningArgs.builder().bucket(\"my-bucketname\").build());\n+   * }</pre>\n+   *\n+   * @param args {@link EnableVersioningArgs} bucket.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb6e6df45e5de6835f2ee10fe6708d7c1b3dca02"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2Mzk5MDEyOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/MinioClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNDo1NTo0MVrOGX7Onw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwNDo1NTo0MVrOGX7Onw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzc0MDgzMQ==", "bodyText": "throw IllegalArgumentException if args is null", "url": "https://github.com/minio/minio-java/pull/930#discussion_r427740831", "createdAt": "2020-05-20T04:55:41Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -3468,16 +3468,44 @@ public void makeBucket(MakeBucketArgs args)\n    * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n    * @throws XmlParserException thrown to indicate XML parsing error.\n    */\n+  @Deprecated\n   public void enableVersioning(String bucketName)\n       throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n           InternalException, InvalidBucketNameException, InvalidKeyException,\n           InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+    this.enableVersioning(EnableVersioningArgs.builder().bucket(bucketName).build());\n+  }\n+\n+  /**\n+   * Enables object versioning feature in a bucket.\n+   *\n+   * <pre>Example:{@code\n+   * minioClient.enableVersioning(EnableVersioningArgs.builder().bucket(\"my-bucketname\").build());\n+   * }</pre>\n+   *\n+   * @param args {@link EnableVersioningArgs} bucket.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  public void enableVersioning(EnableVersioningArgs args)\n+      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n+          InternalException, InvalidBucketNameException, InvalidKeyException,\n+          InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "eb6e6df45e5de6835f2ee10fe6708d7c1b3dca02"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NDc2NzA4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/MinioClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwOToyMzoyNFrOGYC6cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwOToyMzoyNFrOGYC6cg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg2NjczOA==", "bodyText": "Better to fix > 100 char long line.\nminioClient.disableVersioning(\n    DisableVersioningArgs.builder().bucket(\"my-bucketname\").build());", "url": "https://github.com/minio/minio-java/pull/930#discussion_r427866738", "createdAt": "2020-05-20T09:23:24Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -3501,16 +3533,48 @@ public void enableVersioning(String bucketName)\n    * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n    * @throws XmlParserException thrown to indicate XML parsing error.\n    */\n+  @Deprecated\n   public void disableVersioning(String bucketName)\n       throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n           InternalException, InvalidBucketNameException, InvalidKeyException,\n           InvalidResponseException, IOException, NoSuchAlgorithmException, XmlParserException {\n+    this.disableVersioning(DisableVersioningArgs.builder().bucket(bucketName).build());\n+  }\n+\n+  /**\n+   * Disables object versioning feature in a bucket.\n+   *\n+   * <pre>Example:{@code\n+   * minioClient.disableVersioning(DisableVersioningArgs.builder().bucket(\"my-bucketname\").build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e1fb0bcb7313a666ab0cbbeee374f1683f803d16"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NTg5MDgxOnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDoxNDowMFrOGYN4xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDoxNDowMFrOGYN4xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA0NjUzNA==", "bodyText": "you could add one more check after this by\nclient.enableVersioning(EnableVersioningArgs.builder().bucket(name).build());\nclient.disableVersioning(DisableVersioningArgs.builder().bucket(name).build());", "url": "https://github.com/minio/minio-java/pull/930#discussion_r428046534", "createdAt": "2020-05-20T14:14:00Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -384,6 +386,74 @@ public static void makeBucket_test4() throws Exception {\n     }\n   }\n \n+  /** Test: enableVersioning(EnableVersioningArgs args). */\n+  public static void enableVersioning_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: enableVersioning(EnableVersioningArgs args)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    try {\n+      String name = getRandomName();\n+      client.makeBucket(MakeBucketArgs.builder().bucket(name).build());\n+      client.enableVersioning(EnableVersioningArgs.builder().bucket(name).build());\n+      client.removeBucket(RemoveBucketArgs.builder().bucket(name).build());\n+      mintSuccessLog(\"enableVersioning(EnableVersioningArgs args)\", null, startTime);\n+    } catch (Exception e) {\n+      ErrorResponse errorResponse = null;\n+      if (e instanceof ErrorResponseException) {\n+        ErrorResponseException exp = (ErrorResponseException) e;\n+        errorResponse = exp.errorResponse();\n+      }\n+      // Ignore NotImplemented error\n+      if (errorResponse != null && errorResponse.errorCode() == ErrorCode.NOT_IMPLEMENTED) {\n+        mintIgnoredLog(\"enableVersioning(EnableVersioningArgs args)\", null, startTime);\n+      } else {\n+        mintFailedLog(\n+            \"enableVersioning(EnableVersioningArgs args)\",\n+            null,\n+            startTime,\n+            null,\n+            e.toString() + \" >>> \" + Arrays.toString(e.getStackTrace()));\n+        throw e;\n+      }\n+    }\n+  }\n+\n+  /** Test: disableVersioning(DisableVersioningArgs args). */\n+  public static void disableVersioning_test() throws Exception {\n+    if (!mintEnv) {\n+      System.out.println(\"Test: disableVersioning(DisableVersioningArgs args)\");\n+    }\n+\n+    long startTime = System.currentTimeMillis();\n+    try {\n+      String name = getRandomName();\n+      client.makeBucket(MakeBucketArgs.builder().bucket(name).build());\n+      client.disableVersioning(DisableVersioningArgs.builder().bucket(name).build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b2ebc65d24a07219ec9e6474fa87f94e55e1a89"}, "originalPosition": 57}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 681, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}