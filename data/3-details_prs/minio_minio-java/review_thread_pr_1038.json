{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3ODY3MzM5", "number": 1038, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjoxMDo0MlrOEgW7lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjoxNzozOVrOEgXDmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzY1NTkxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/credentials/IamAwsProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjoxMDo0MlrOHNLIfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNTowMjo0M1rOHNRNLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3NTkzMw==", "bodyText": "To making this call twice with same argument, we can save the output of thisgetProperty in a variable tokenFile and pass it as argument to getToken", "url": "https://github.com/minio/minio-java/pull/1038#discussion_r483575933", "createdAt": "2020-09-04T12:10:42Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/credentials/IamAwsProvider.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.credentials;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.minio.messages.ResponseDate;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Objects;\n+import javax.annotation.Nullable;\n+import okhttp3.HttpUrl;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Protocol;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+/**\n+ * Credential provider using <a\n+ * href=\"http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html\">IAM roles\n+ * for Amazon EC2</a>.\n+ */\n+public class IamAwsProvider extends EnvironmentProvider {\n+  // Custom endpoint to fetch IAM role credentials.\n+  private final HttpUrl customEndpoint;\n+  private final OkHttpClient httpClient;\n+  private final ObjectMapper mapper;\n+  private Credentials credentials;\n+\n+  public IamAwsProvider(@Nullable String customEndpoint, @Nullable OkHttpClient customHttpClient) {\n+    this.customEndpoint =\n+        (customEndpoint != null)\n+            ? Objects.requireNonNull(HttpUrl.parse(customEndpoint), \"Invalid custom endpoint\")\n+            : null;\n+    // HTTP/1.1 is only supported in default client because of HTTP/2 in OkHttpClient cause 5\n+    // minutes timeout on program exit.\n+    this.httpClient =\n+        (customHttpClient != null)\n+            ? customHttpClient\n+            : new OkHttpClient().newBuilder().protocols(Arrays.asList(Protocol.HTTP_1_1)).build();\n+    this.mapper = new ObjectMapper();\n+    this.mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+    this.mapper.configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true);\n+  }\n+\n+  private void checkLoopbackHost(HttpUrl url) {\n+    try {\n+      for (InetAddress addr : InetAddress.getAllByName(url.host())) {\n+        if (!addr.isLoopbackAddress()) {\n+          throw new IllegalArgumentException(url.host() + \" is not loopback only host\");\n+        }\n+      }\n+    } catch (UnknownHostException e) {\n+      throw new IllegalStateException(\"Host in \" + url + \" is not loopback address\");\n+    }\n+  }\n+\n+  private Credentials fetchCredentials(HttpUrl url) {\n+    try (Response response =\n+        httpClient.newCall(new Request.Builder().url(url).method(\"GET\", null).build()).execute()) {\n+      if (!response.isSuccessful()) {\n+        throw new IllegalStateException(url + \" failed with HTTP status code \" + response.code());\n+      }\n+\n+      EcsCredentials creds = mapper.readValue(response.body().charStream(), EcsCredentials.class);\n+      if (!\"Success\".equals(creds.code())) {\n+        throw new IllegalStateException(url + \" failed with message \" + creds.message());\n+      }\n+      return creds.toCredentials();\n+    } catch (IOException e) {\n+      throw new IllegalStateException(\"Unable to parse response\", e);\n+    }\n+  }\n+\n+  private Jwt getToken() {\n+    String tokenFile = getProperty(\"AWS_WEB_IDENTITY_TOKEN_FILE\");\n+    try {\n+      byte[] data = Files.readAllBytes(Paths.get(tokenFile));\n+      return new Jwt(new String(data, StandardCharsets.UTF_8), 0);\n+    } catch (IOException e) {\n+      throw new IllegalStateException(\"Error in reading file \" + tokenFile, e);\n+    }\n+  }\n+\n+  @Override\n+  public synchronized Credentials fetch() {\n+    if (credentials != null && !credentials.isExpired()) {\n+      return credentials;\n+    }\n+\n+    HttpUrl url = this.customEndpoint;\n+    if (getProperty(\"AWS_WEB_IDENTITY_TOKEN_FILE\") != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42e586690415214a1de09ffdc202ab79f06b3066"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY3NTQzNw==", "bodyText": "Moved to fetchCredentials(String tokenFile).", "url": "https://github.com/minio/minio-java/pull/1038#discussion_r483675437", "createdAt": "2020-09-04T15:02:43Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/credentials/IamAwsProvider.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.credentials;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.minio.messages.ResponseDate;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Objects;\n+import javax.annotation.Nullable;\n+import okhttp3.HttpUrl;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Protocol;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+/**\n+ * Credential provider using <a\n+ * href=\"http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html\">IAM roles\n+ * for Amazon EC2</a>.\n+ */\n+public class IamAwsProvider extends EnvironmentProvider {\n+  // Custom endpoint to fetch IAM role credentials.\n+  private final HttpUrl customEndpoint;\n+  private final OkHttpClient httpClient;\n+  private final ObjectMapper mapper;\n+  private Credentials credentials;\n+\n+  public IamAwsProvider(@Nullable String customEndpoint, @Nullable OkHttpClient customHttpClient) {\n+    this.customEndpoint =\n+        (customEndpoint != null)\n+            ? Objects.requireNonNull(HttpUrl.parse(customEndpoint), \"Invalid custom endpoint\")\n+            : null;\n+    // HTTP/1.1 is only supported in default client because of HTTP/2 in OkHttpClient cause 5\n+    // minutes timeout on program exit.\n+    this.httpClient =\n+        (customHttpClient != null)\n+            ? customHttpClient\n+            : new OkHttpClient().newBuilder().protocols(Arrays.asList(Protocol.HTTP_1_1)).build();\n+    this.mapper = new ObjectMapper();\n+    this.mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+    this.mapper.configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true);\n+  }\n+\n+  private void checkLoopbackHost(HttpUrl url) {\n+    try {\n+      for (InetAddress addr : InetAddress.getAllByName(url.host())) {\n+        if (!addr.isLoopbackAddress()) {\n+          throw new IllegalArgumentException(url.host() + \" is not loopback only host\");\n+        }\n+      }\n+    } catch (UnknownHostException e) {\n+      throw new IllegalStateException(\"Host in \" + url + \" is not loopback address\");\n+    }\n+  }\n+\n+  private Credentials fetchCredentials(HttpUrl url) {\n+    try (Response response =\n+        httpClient.newCall(new Request.Builder().url(url).method(\"GET\", null).build()).execute()) {\n+      if (!response.isSuccessful()) {\n+        throw new IllegalStateException(url + \" failed with HTTP status code \" + response.code());\n+      }\n+\n+      EcsCredentials creds = mapper.readValue(response.body().charStream(), EcsCredentials.class);\n+      if (!\"Success\".equals(creds.code())) {\n+        throw new IllegalStateException(url + \" failed with message \" + creds.message());\n+      }\n+      return creds.toCredentials();\n+    } catch (IOException e) {\n+      throw new IllegalStateException(\"Unable to parse response\", e);\n+    }\n+  }\n+\n+  private Jwt getToken() {\n+    String tokenFile = getProperty(\"AWS_WEB_IDENTITY_TOKEN_FILE\");\n+    try {\n+      byte[] data = Files.readAllBytes(Paths.get(tokenFile));\n+      return new Jwt(new String(data, StandardCharsets.UTF_8), 0);\n+    } catch (IOException e) {\n+      throw new IllegalStateException(\"Error in reading file \" + tokenFile, e);\n+    }\n+  }\n+\n+  @Override\n+  public synchronized Credentials fetch() {\n+    if (credentials != null && !credentials.isExpired()) {\n+      return credentials;\n+    }\n+\n+    HttpUrl url = this.customEndpoint;\n+    if (getProperty(\"AWS_WEB_IDENTITY_TOKEN_FILE\") != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3NTkzMw=="}, "originalCommit": {"oid": "42e586690415214a1de09ffdc202ab79f06b3066"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzY1OTA3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/credentials/IamAwsProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjoxMTo0OVrOHNLKZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNTowMzoxN1rOHNROiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3NjQyMQ==", "bodyText": "Can be extracted out into a method fetchUsingAwsTokenFile", "url": "https://github.com/minio/minio-java/pull/1038#discussion_r483576421", "createdAt": "2020-09-04T12:11:49Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/credentials/IamAwsProvider.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.credentials;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.minio.messages.ResponseDate;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Objects;\n+import javax.annotation.Nullable;\n+import okhttp3.HttpUrl;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Protocol;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+/**\n+ * Credential provider using <a\n+ * href=\"http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html\">IAM roles\n+ * for Amazon EC2</a>.\n+ */\n+public class IamAwsProvider extends EnvironmentProvider {\n+  // Custom endpoint to fetch IAM role credentials.\n+  private final HttpUrl customEndpoint;\n+  private final OkHttpClient httpClient;\n+  private final ObjectMapper mapper;\n+  private Credentials credentials;\n+\n+  public IamAwsProvider(@Nullable String customEndpoint, @Nullable OkHttpClient customHttpClient) {\n+    this.customEndpoint =\n+        (customEndpoint != null)\n+            ? Objects.requireNonNull(HttpUrl.parse(customEndpoint), \"Invalid custom endpoint\")\n+            : null;\n+    // HTTP/1.1 is only supported in default client because of HTTP/2 in OkHttpClient cause 5\n+    // minutes timeout on program exit.\n+    this.httpClient =\n+        (customHttpClient != null)\n+            ? customHttpClient\n+            : new OkHttpClient().newBuilder().protocols(Arrays.asList(Protocol.HTTP_1_1)).build();\n+    this.mapper = new ObjectMapper();\n+    this.mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+    this.mapper.configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true);\n+  }\n+\n+  private void checkLoopbackHost(HttpUrl url) {\n+    try {\n+      for (InetAddress addr : InetAddress.getAllByName(url.host())) {\n+        if (!addr.isLoopbackAddress()) {\n+          throw new IllegalArgumentException(url.host() + \" is not loopback only host\");\n+        }\n+      }\n+    } catch (UnknownHostException e) {\n+      throw new IllegalStateException(\"Host in \" + url + \" is not loopback address\");\n+    }\n+  }\n+\n+  private Credentials fetchCredentials(HttpUrl url) {\n+    try (Response response =\n+        httpClient.newCall(new Request.Builder().url(url).method(\"GET\", null).build()).execute()) {\n+      if (!response.isSuccessful()) {\n+        throw new IllegalStateException(url + \" failed with HTTP status code \" + response.code());\n+      }\n+\n+      EcsCredentials creds = mapper.readValue(response.body().charStream(), EcsCredentials.class);\n+      if (!\"Success\".equals(creds.code())) {\n+        throw new IllegalStateException(url + \" failed with message \" + creds.message());\n+      }\n+      return creds.toCredentials();\n+    } catch (IOException e) {\n+      throw new IllegalStateException(\"Unable to parse response\", e);\n+    }\n+  }\n+\n+  private Jwt getToken() {\n+    String tokenFile = getProperty(\"AWS_WEB_IDENTITY_TOKEN_FILE\");\n+    try {\n+      byte[] data = Files.readAllBytes(Paths.get(tokenFile));\n+      return new Jwt(new String(data, StandardCharsets.UTF_8), 0);\n+    } catch (IOException e) {\n+      throw new IllegalStateException(\"Error in reading file \" + tokenFile, e);\n+    }\n+  }\n+\n+  @Override\n+  public synchronized Credentials fetch() {\n+    if (credentials != null && !credentials.isExpired()) {\n+      return credentials;\n+    }\n+\n+    HttpUrl url = this.customEndpoint;\n+    if (getProperty(\"AWS_WEB_IDENTITY_TOKEN_FILE\") != null) {\n+      if (url == null) {\n+        String region = getProperty(\"AWS_REGION\");\n+        url =\n+            HttpUrl.parse(\n+                (region == null)\n+                    ? \"https://sts.amazonaws.com\"\n+                    : \"https://sts.\" + region + \".amazonaws.com\");\n+      }\n+\n+      Provider provider =\n+          new WebIdentityProvider(\n+              () -> getToken(),\n+              url.toString(),\n+              null,\n+              null,\n+              getProperty(\"AWS_ROLE_ARN\"),\n+              getProperty(\"AWS_ROLE_SESSION_NAME\"),\n+              httpClient);\n+      credentials = provider.fetch();\n+      return credentials;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42e586690415214a1de09ffdc202ab79f06b3066"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY3NTc4NQ==", "bodyText": "Moved to fetchCredentials(String tokenFile).", "url": "https://github.com/minio/minio-java/pull/1038#discussion_r483675785", "createdAt": "2020-09-04T15:03:17Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/credentials/IamAwsProvider.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.credentials;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.minio.messages.ResponseDate;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Objects;\n+import javax.annotation.Nullable;\n+import okhttp3.HttpUrl;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Protocol;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+/**\n+ * Credential provider using <a\n+ * href=\"http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html\">IAM roles\n+ * for Amazon EC2</a>.\n+ */\n+public class IamAwsProvider extends EnvironmentProvider {\n+  // Custom endpoint to fetch IAM role credentials.\n+  private final HttpUrl customEndpoint;\n+  private final OkHttpClient httpClient;\n+  private final ObjectMapper mapper;\n+  private Credentials credentials;\n+\n+  public IamAwsProvider(@Nullable String customEndpoint, @Nullable OkHttpClient customHttpClient) {\n+    this.customEndpoint =\n+        (customEndpoint != null)\n+            ? Objects.requireNonNull(HttpUrl.parse(customEndpoint), \"Invalid custom endpoint\")\n+            : null;\n+    // HTTP/1.1 is only supported in default client because of HTTP/2 in OkHttpClient cause 5\n+    // minutes timeout on program exit.\n+    this.httpClient =\n+        (customHttpClient != null)\n+            ? customHttpClient\n+            : new OkHttpClient().newBuilder().protocols(Arrays.asList(Protocol.HTTP_1_1)).build();\n+    this.mapper = new ObjectMapper();\n+    this.mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+    this.mapper.configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true);\n+  }\n+\n+  private void checkLoopbackHost(HttpUrl url) {\n+    try {\n+      for (InetAddress addr : InetAddress.getAllByName(url.host())) {\n+        if (!addr.isLoopbackAddress()) {\n+          throw new IllegalArgumentException(url.host() + \" is not loopback only host\");\n+        }\n+      }\n+    } catch (UnknownHostException e) {\n+      throw new IllegalStateException(\"Host in \" + url + \" is not loopback address\");\n+    }\n+  }\n+\n+  private Credentials fetchCredentials(HttpUrl url) {\n+    try (Response response =\n+        httpClient.newCall(new Request.Builder().url(url).method(\"GET\", null).build()).execute()) {\n+      if (!response.isSuccessful()) {\n+        throw new IllegalStateException(url + \" failed with HTTP status code \" + response.code());\n+      }\n+\n+      EcsCredentials creds = mapper.readValue(response.body().charStream(), EcsCredentials.class);\n+      if (!\"Success\".equals(creds.code())) {\n+        throw new IllegalStateException(url + \" failed with message \" + creds.message());\n+      }\n+      return creds.toCredentials();\n+    } catch (IOException e) {\n+      throw new IllegalStateException(\"Unable to parse response\", e);\n+    }\n+  }\n+\n+  private Jwt getToken() {\n+    String tokenFile = getProperty(\"AWS_WEB_IDENTITY_TOKEN_FILE\");\n+    try {\n+      byte[] data = Files.readAllBytes(Paths.get(tokenFile));\n+      return new Jwt(new String(data, StandardCharsets.UTF_8), 0);\n+    } catch (IOException e) {\n+      throw new IllegalStateException(\"Error in reading file \" + tokenFile, e);\n+    }\n+  }\n+\n+  @Override\n+  public synchronized Credentials fetch() {\n+    if (credentials != null && !credentials.isExpired()) {\n+      return credentials;\n+    }\n+\n+    HttpUrl url = this.customEndpoint;\n+    if (getProperty(\"AWS_WEB_IDENTITY_TOKEN_FILE\") != null) {\n+      if (url == null) {\n+        String region = getProperty(\"AWS_REGION\");\n+        url =\n+            HttpUrl.parse(\n+                (region == null)\n+                    ? \"https://sts.amazonaws.com\"\n+                    : \"https://sts.\" + region + \".amazonaws.com\");\n+      }\n+\n+      Provider provider =\n+          new WebIdentityProvider(\n+              () -> getToken(),\n+              url.toString(),\n+              null,\n+              null,\n+              getProperty(\"AWS_ROLE_ARN\"),\n+              getProperty(\"AWS_ROLE_SESSION_NAME\"),\n+              httpClient);\n+      credentials = provider.fetch();\n+      return credentials;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3NjQyMQ=="}, "originalCommit": {"oid": "42e586690415214a1de09ffdc202ab79f06b3066"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzY2MjY3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/credentials/IamAwsProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjoxMzowMVrOHNLMmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNTowNDowMlrOHNRQQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3Njk4Nw==", "bodyText": "Can be extracted into a method getAwsCredentialsUrl", "url": "https://github.com/minio/minio-java/pull/1038#discussion_r483576987", "createdAt": "2020-09-04T12:13:01Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/credentials/IamAwsProvider.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.credentials;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.minio.messages.ResponseDate;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Objects;\n+import javax.annotation.Nullable;\n+import okhttp3.HttpUrl;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Protocol;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+/**\n+ * Credential provider using <a\n+ * href=\"http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html\">IAM roles\n+ * for Amazon EC2</a>.\n+ */\n+public class IamAwsProvider extends EnvironmentProvider {\n+  // Custom endpoint to fetch IAM role credentials.\n+  private final HttpUrl customEndpoint;\n+  private final OkHttpClient httpClient;\n+  private final ObjectMapper mapper;\n+  private Credentials credentials;\n+\n+  public IamAwsProvider(@Nullable String customEndpoint, @Nullable OkHttpClient customHttpClient) {\n+    this.customEndpoint =\n+        (customEndpoint != null)\n+            ? Objects.requireNonNull(HttpUrl.parse(customEndpoint), \"Invalid custom endpoint\")\n+            : null;\n+    // HTTP/1.1 is only supported in default client because of HTTP/2 in OkHttpClient cause 5\n+    // minutes timeout on program exit.\n+    this.httpClient =\n+        (customHttpClient != null)\n+            ? customHttpClient\n+            : new OkHttpClient().newBuilder().protocols(Arrays.asList(Protocol.HTTP_1_1)).build();\n+    this.mapper = new ObjectMapper();\n+    this.mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+    this.mapper.configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true);\n+  }\n+\n+  private void checkLoopbackHost(HttpUrl url) {\n+    try {\n+      for (InetAddress addr : InetAddress.getAllByName(url.host())) {\n+        if (!addr.isLoopbackAddress()) {\n+          throw new IllegalArgumentException(url.host() + \" is not loopback only host\");\n+        }\n+      }\n+    } catch (UnknownHostException e) {\n+      throw new IllegalStateException(\"Host in \" + url + \" is not loopback address\");\n+    }\n+  }\n+\n+  private Credentials fetchCredentials(HttpUrl url) {\n+    try (Response response =\n+        httpClient.newCall(new Request.Builder().url(url).method(\"GET\", null).build()).execute()) {\n+      if (!response.isSuccessful()) {\n+        throw new IllegalStateException(url + \" failed with HTTP status code \" + response.code());\n+      }\n+\n+      EcsCredentials creds = mapper.readValue(response.body().charStream(), EcsCredentials.class);\n+      if (!\"Success\".equals(creds.code())) {\n+        throw new IllegalStateException(url + \" failed with message \" + creds.message());\n+      }\n+      return creds.toCredentials();\n+    } catch (IOException e) {\n+      throw new IllegalStateException(\"Unable to parse response\", e);\n+    }\n+  }\n+\n+  private Jwt getToken() {\n+    String tokenFile = getProperty(\"AWS_WEB_IDENTITY_TOKEN_FILE\");\n+    try {\n+      byte[] data = Files.readAllBytes(Paths.get(tokenFile));\n+      return new Jwt(new String(data, StandardCharsets.UTF_8), 0);\n+    } catch (IOException e) {\n+      throw new IllegalStateException(\"Error in reading file \" + tokenFile, e);\n+    }\n+  }\n+\n+  @Override\n+  public synchronized Credentials fetch() {\n+    if (credentials != null && !credentials.isExpired()) {\n+      return credentials;\n+    }\n+\n+    HttpUrl url = this.customEndpoint;\n+    if (getProperty(\"AWS_WEB_IDENTITY_TOKEN_FILE\") != null) {\n+      if (url == null) {\n+        String region = getProperty(\"AWS_REGION\");\n+        url =\n+            HttpUrl.parse(\n+                (region == null)\n+                    ? \"https://sts.amazonaws.com\"\n+                    : \"https://sts.\" + region + \".amazonaws.com\");\n+      }\n+\n+      Provider provider =\n+          new WebIdentityProvider(\n+              () -> getToken(),\n+              url.toString(),\n+              null,\n+              null,\n+              getProperty(\"AWS_ROLE_ARN\"),\n+              getProperty(\"AWS_ROLE_SESSION_NAME\"),\n+              httpClient);\n+      credentials = provider.fetch();\n+      return credentials;\n+    }\n+\n+    if (getProperty(\"AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\") != null) {\n+      if (url == null) {\n+        url =\n+            new HttpUrl.Builder()\n+                .scheme(\"http\")\n+                .host(\"169.254.170.2\")\n+                .addPathSegments(getProperty(\"AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\"))\n+                .build();\n+      }\n+    } else if (getProperty(\"AWS_CONTAINER_CREDENTIALS_FULL_URI\") != null) {\n+      if (url == null) {\n+        url = HttpUrl.parse(getProperty(\"AWS_CONTAINER_CREDENTIALS_FULL_URI\"));\n+      }\n+      checkLoopbackHost(url);\n+    } else {\n+      if (url == null) {\n+        url = HttpUrl.parse(\"http://169.254.169.254/latest/meta-data/iam/security-credentials/\");\n+      } else {\n+        url =\n+            new HttpUrl.Builder()\n+                .scheme(url.scheme())\n+                .host(url.host())\n+                .addPathSegments(\"latest/meta-data/iam/security-credentials/\")\n+                .build();\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42e586690415214a1de09ffdc202ab79f06b3066"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY3NjIyNA==", "bodyText": "Moved to getIamRoleNamedUrl()", "url": "https://github.com/minio/minio-java/pull/1038#discussion_r483676224", "createdAt": "2020-09-04T15:04:02Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/credentials/IamAwsProvider.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.credentials;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.minio.messages.ResponseDate;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Objects;\n+import javax.annotation.Nullable;\n+import okhttp3.HttpUrl;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Protocol;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+/**\n+ * Credential provider using <a\n+ * href=\"http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html\">IAM roles\n+ * for Amazon EC2</a>.\n+ */\n+public class IamAwsProvider extends EnvironmentProvider {\n+  // Custom endpoint to fetch IAM role credentials.\n+  private final HttpUrl customEndpoint;\n+  private final OkHttpClient httpClient;\n+  private final ObjectMapper mapper;\n+  private Credentials credentials;\n+\n+  public IamAwsProvider(@Nullable String customEndpoint, @Nullable OkHttpClient customHttpClient) {\n+    this.customEndpoint =\n+        (customEndpoint != null)\n+            ? Objects.requireNonNull(HttpUrl.parse(customEndpoint), \"Invalid custom endpoint\")\n+            : null;\n+    // HTTP/1.1 is only supported in default client because of HTTP/2 in OkHttpClient cause 5\n+    // minutes timeout on program exit.\n+    this.httpClient =\n+        (customHttpClient != null)\n+            ? customHttpClient\n+            : new OkHttpClient().newBuilder().protocols(Arrays.asList(Protocol.HTTP_1_1)).build();\n+    this.mapper = new ObjectMapper();\n+    this.mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+    this.mapper.configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true);\n+  }\n+\n+  private void checkLoopbackHost(HttpUrl url) {\n+    try {\n+      for (InetAddress addr : InetAddress.getAllByName(url.host())) {\n+        if (!addr.isLoopbackAddress()) {\n+          throw new IllegalArgumentException(url.host() + \" is not loopback only host\");\n+        }\n+      }\n+    } catch (UnknownHostException e) {\n+      throw new IllegalStateException(\"Host in \" + url + \" is not loopback address\");\n+    }\n+  }\n+\n+  private Credentials fetchCredentials(HttpUrl url) {\n+    try (Response response =\n+        httpClient.newCall(new Request.Builder().url(url).method(\"GET\", null).build()).execute()) {\n+      if (!response.isSuccessful()) {\n+        throw new IllegalStateException(url + \" failed with HTTP status code \" + response.code());\n+      }\n+\n+      EcsCredentials creds = mapper.readValue(response.body().charStream(), EcsCredentials.class);\n+      if (!\"Success\".equals(creds.code())) {\n+        throw new IllegalStateException(url + \" failed with message \" + creds.message());\n+      }\n+      return creds.toCredentials();\n+    } catch (IOException e) {\n+      throw new IllegalStateException(\"Unable to parse response\", e);\n+    }\n+  }\n+\n+  private Jwt getToken() {\n+    String tokenFile = getProperty(\"AWS_WEB_IDENTITY_TOKEN_FILE\");\n+    try {\n+      byte[] data = Files.readAllBytes(Paths.get(tokenFile));\n+      return new Jwt(new String(data, StandardCharsets.UTF_8), 0);\n+    } catch (IOException e) {\n+      throw new IllegalStateException(\"Error in reading file \" + tokenFile, e);\n+    }\n+  }\n+\n+  @Override\n+  public synchronized Credentials fetch() {\n+    if (credentials != null && !credentials.isExpired()) {\n+      return credentials;\n+    }\n+\n+    HttpUrl url = this.customEndpoint;\n+    if (getProperty(\"AWS_WEB_IDENTITY_TOKEN_FILE\") != null) {\n+      if (url == null) {\n+        String region = getProperty(\"AWS_REGION\");\n+        url =\n+            HttpUrl.parse(\n+                (region == null)\n+                    ? \"https://sts.amazonaws.com\"\n+                    : \"https://sts.\" + region + \".amazonaws.com\");\n+      }\n+\n+      Provider provider =\n+          new WebIdentityProvider(\n+              () -> getToken(),\n+              url.toString(),\n+              null,\n+              null,\n+              getProperty(\"AWS_ROLE_ARN\"),\n+              getProperty(\"AWS_ROLE_SESSION_NAME\"),\n+              httpClient);\n+      credentials = provider.fetch();\n+      return credentials;\n+    }\n+\n+    if (getProperty(\"AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\") != null) {\n+      if (url == null) {\n+        url =\n+            new HttpUrl.Builder()\n+                .scheme(\"http\")\n+                .host(\"169.254.170.2\")\n+                .addPathSegments(getProperty(\"AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\"))\n+                .build();\n+      }\n+    } else if (getProperty(\"AWS_CONTAINER_CREDENTIALS_FULL_URI\") != null) {\n+      if (url == null) {\n+        url = HttpUrl.parse(getProperty(\"AWS_CONTAINER_CREDENTIALS_FULL_URI\"));\n+      }\n+      checkLoopbackHost(url);\n+    } else {\n+      if (url == null) {\n+        url = HttpUrl.parse(\"http://169.254.169.254/latest/meta-data/iam/security-credentials/\");\n+      } else {\n+        url =\n+            new HttpUrl.Builder()\n+                .scheme(url.scheme())\n+                .host(url.host())\n+                .addPathSegments(\"latest/meta-data/iam/security-credentials/\")\n+                .build();\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3Njk4Nw=="}, "originalCommit": {"oid": "42e586690415214a1de09ffdc202ab79f06b3066"}, "originalPosition": 160}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzY2OTc3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/credentials/IamAwsProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjoxNToyOFrOHNLQ4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNTowNDozM1rOHNRRRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3ODA4Mg==", "bodyText": "Can be extracted into a method getAwsRoleName", "url": "https://github.com/minio/minio-java/pull/1038#discussion_r483578082", "createdAt": "2020-09-04T12:15:28Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/credentials/IamAwsProvider.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.credentials;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.minio.messages.ResponseDate;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Objects;\n+import javax.annotation.Nullable;\n+import okhttp3.HttpUrl;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Protocol;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+/**\n+ * Credential provider using <a\n+ * href=\"http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html\">IAM roles\n+ * for Amazon EC2</a>.\n+ */\n+public class IamAwsProvider extends EnvironmentProvider {\n+  // Custom endpoint to fetch IAM role credentials.\n+  private final HttpUrl customEndpoint;\n+  private final OkHttpClient httpClient;\n+  private final ObjectMapper mapper;\n+  private Credentials credentials;\n+\n+  public IamAwsProvider(@Nullable String customEndpoint, @Nullable OkHttpClient customHttpClient) {\n+    this.customEndpoint =\n+        (customEndpoint != null)\n+            ? Objects.requireNonNull(HttpUrl.parse(customEndpoint), \"Invalid custom endpoint\")\n+            : null;\n+    // HTTP/1.1 is only supported in default client because of HTTP/2 in OkHttpClient cause 5\n+    // minutes timeout on program exit.\n+    this.httpClient =\n+        (customHttpClient != null)\n+            ? customHttpClient\n+            : new OkHttpClient().newBuilder().protocols(Arrays.asList(Protocol.HTTP_1_1)).build();\n+    this.mapper = new ObjectMapper();\n+    this.mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+    this.mapper.configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true);\n+  }\n+\n+  private void checkLoopbackHost(HttpUrl url) {\n+    try {\n+      for (InetAddress addr : InetAddress.getAllByName(url.host())) {\n+        if (!addr.isLoopbackAddress()) {\n+          throw new IllegalArgumentException(url.host() + \" is not loopback only host\");\n+        }\n+      }\n+    } catch (UnknownHostException e) {\n+      throw new IllegalStateException(\"Host in \" + url + \" is not loopback address\");\n+    }\n+  }\n+\n+  private Credentials fetchCredentials(HttpUrl url) {\n+    try (Response response =\n+        httpClient.newCall(new Request.Builder().url(url).method(\"GET\", null).build()).execute()) {\n+      if (!response.isSuccessful()) {\n+        throw new IllegalStateException(url + \" failed with HTTP status code \" + response.code());\n+      }\n+\n+      EcsCredentials creds = mapper.readValue(response.body().charStream(), EcsCredentials.class);\n+      if (!\"Success\".equals(creds.code())) {\n+        throw new IllegalStateException(url + \" failed with message \" + creds.message());\n+      }\n+      return creds.toCredentials();\n+    } catch (IOException e) {\n+      throw new IllegalStateException(\"Unable to parse response\", e);\n+    }\n+  }\n+\n+  private Jwt getToken() {\n+    String tokenFile = getProperty(\"AWS_WEB_IDENTITY_TOKEN_FILE\");\n+    try {\n+      byte[] data = Files.readAllBytes(Paths.get(tokenFile));\n+      return new Jwt(new String(data, StandardCharsets.UTF_8), 0);\n+    } catch (IOException e) {\n+      throw new IllegalStateException(\"Error in reading file \" + tokenFile, e);\n+    }\n+  }\n+\n+  @Override\n+  public synchronized Credentials fetch() {\n+    if (credentials != null && !credentials.isExpired()) {\n+      return credentials;\n+    }\n+\n+    HttpUrl url = this.customEndpoint;\n+    if (getProperty(\"AWS_WEB_IDENTITY_TOKEN_FILE\") != null) {\n+      if (url == null) {\n+        String region = getProperty(\"AWS_REGION\");\n+        url =\n+            HttpUrl.parse(\n+                (region == null)\n+                    ? \"https://sts.amazonaws.com\"\n+                    : \"https://sts.\" + region + \".amazonaws.com\");\n+      }\n+\n+      Provider provider =\n+          new WebIdentityProvider(\n+              () -> getToken(),\n+              url.toString(),\n+              null,\n+              null,\n+              getProperty(\"AWS_ROLE_ARN\"),\n+              getProperty(\"AWS_ROLE_SESSION_NAME\"),\n+              httpClient);\n+      credentials = provider.fetch();\n+      return credentials;\n+    }\n+\n+    if (getProperty(\"AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\") != null) {\n+      if (url == null) {\n+        url =\n+            new HttpUrl.Builder()\n+                .scheme(\"http\")\n+                .host(\"169.254.170.2\")\n+                .addPathSegments(getProperty(\"AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\"))\n+                .build();\n+      }\n+    } else if (getProperty(\"AWS_CONTAINER_CREDENTIALS_FULL_URI\") != null) {\n+      if (url == null) {\n+        url = HttpUrl.parse(getProperty(\"AWS_CONTAINER_CREDENTIALS_FULL_URI\"));\n+      }\n+      checkLoopbackHost(url);\n+    } else {\n+      if (url == null) {\n+        url = HttpUrl.parse(\"http://169.254.169.254/latest/meta-data/iam/security-credentials/\");\n+      } else {\n+        url =\n+            new HttpUrl.Builder()\n+                .scheme(url.scheme())\n+                .host(url.host())\n+                .addPathSegments(\"latest/meta-data/iam/security-credentials/\")\n+                .build();\n+      }\n+\n+      String[] roleNames = null;\n+      try (Response response =\n+          httpClient\n+              .newCall(new Request.Builder().url(url).method(\"GET\", null).build())\n+              .execute()) {\n+        if (!response.isSuccessful()) {\n+          throw new IllegalStateException(url + \" failed with HTTP status code \" + response.code());\n+        }\n+\n+        roleNames = response.body().string().split(\"\\\\R\");\n+      } catch (IOException e) {\n+        throw new IllegalStateException(\"Unable to parse response\", e);\n+      }\n+\n+      if (roleNames.length == 0) {\n+        throw new IllegalStateException(\"No IAM roles attached to EC2 service \" + url);\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42e586690415214a1de09ffdc202ab79f06b3066"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY3NjQ4NA==", "bodyText": "Moved to getIamRoleName()", "url": "https://github.com/minio/minio-java/pull/1038#discussion_r483676484", "createdAt": "2020-09-04T15:04:33Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/credentials/IamAwsProvider.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.credentials;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.minio.messages.ResponseDate;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Objects;\n+import javax.annotation.Nullable;\n+import okhttp3.HttpUrl;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Protocol;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+/**\n+ * Credential provider using <a\n+ * href=\"http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html\">IAM roles\n+ * for Amazon EC2</a>.\n+ */\n+public class IamAwsProvider extends EnvironmentProvider {\n+  // Custom endpoint to fetch IAM role credentials.\n+  private final HttpUrl customEndpoint;\n+  private final OkHttpClient httpClient;\n+  private final ObjectMapper mapper;\n+  private Credentials credentials;\n+\n+  public IamAwsProvider(@Nullable String customEndpoint, @Nullable OkHttpClient customHttpClient) {\n+    this.customEndpoint =\n+        (customEndpoint != null)\n+            ? Objects.requireNonNull(HttpUrl.parse(customEndpoint), \"Invalid custom endpoint\")\n+            : null;\n+    // HTTP/1.1 is only supported in default client because of HTTP/2 in OkHttpClient cause 5\n+    // minutes timeout on program exit.\n+    this.httpClient =\n+        (customHttpClient != null)\n+            ? customHttpClient\n+            : new OkHttpClient().newBuilder().protocols(Arrays.asList(Protocol.HTTP_1_1)).build();\n+    this.mapper = new ObjectMapper();\n+    this.mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+    this.mapper.configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true);\n+  }\n+\n+  private void checkLoopbackHost(HttpUrl url) {\n+    try {\n+      for (InetAddress addr : InetAddress.getAllByName(url.host())) {\n+        if (!addr.isLoopbackAddress()) {\n+          throw new IllegalArgumentException(url.host() + \" is not loopback only host\");\n+        }\n+      }\n+    } catch (UnknownHostException e) {\n+      throw new IllegalStateException(\"Host in \" + url + \" is not loopback address\");\n+    }\n+  }\n+\n+  private Credentials fetchCredentials(HttpUrl url) {\n+    try (Response response =\n+        httpClient.newCall(new Request.Builder().url(url).method(\"GET\", null).build()).execute()) {\n+      if (!response.isSuccessful()) {\n+        throw new IllegalStateException(url + \" failed with HTTP status code \" + response.code());\n+      }\n+\n+      EcsCredentials creds = mapper.readValue(response.body().charStream(), EcsCredentials.class);\n+      if (!\"Success\".equals(creds.code())) {\n+        throw new IllegalStateException(url + \" failed with message \" + creds.message());\n+      }\n+      return creds.toCredentials();\n+    } catch (IOException e) {\n+      throw new IllegalStateException(\"Unable to parse response\", e);\n+    }\n+  }\n+\n+  private Jwt getToken() {\n+    String tokenFile = getProperty(\"AWS_WEB_IDENTITY_TOKEN_FILE\");\n+    try {\n+      byte[] data = Files.readAllBytes(Paths.get(tokenFile));\n+      return new Jwt(new String(data, StandardCharsets.UTF_8), 0);\n+    } catch (IOException e) {\n+      throw new IllegalStateException(\"Error in reading file \" + tokenFile, e);\n+    }\n+  }\n+\n+  @Override\n+  public synchronized Credentials fetch() {\n+    if (credentials != null && !credentials.isExpired()) {\n+      return credentials;\n+    }\n+\n+    HttpUrl url = this.customEndpoint;\n+    if (getProperty(\"AWS_WEB_IDENTITY_TOKEN_FILE\") != null) {\n+      if (url == null) {\n+        String region = getProperty(\"AWS_REGION\");\n+        url =\n+            HttpUrl.parse(\n+                (region == null)\n+                    ? \"https://sts.amazonaws.com\"\n+                    : \"https://sts.\" + region + \".amazonaws.com\");\n+      }\n+\n+      Provider provider =\n+          new WebIdentityProvider(\n+              () -> getToken(),\n+              url.toString(),\n+              null,\n+              null,\n+              getProperty(\"AWS_ROLE_ARN\"),\n+              getProperty(\"AWS_ROLE_SESSION_NAME\"),\n+              httpClient);\n+      credentials = provider.fetch();\n+      return credentials;\n+    }\n+\n+    if (getProperty(\"AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\") != null) {\n+      if (url == null) {\n+        url =\n+            new HttpUrl.Builder()\n+                .scheme(\"http\")\n+                .host(\"169.254.170.2\")\n+                .addPathSegments(getProperty(\"AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\"))\n+                .build();\n+      }\n+    } else if (getProperty(\"AWS_CONTAINER_CREDENTIALS_FULL_URI\") != null) {\n+      if (url == null) {\n+        url = HttpUrl.parse(getProperty(\"AWS_CONTAINER_CREDENTIALS_FULL_URI\"));\n+      }\n+      checkLoopbackHost(url);\n+    } else {\n+      if (url == null) {\n+        url = HttpUrl.parse(\"http://169.254.169.254/latest/meta-data/iam/security-credentials/\");\n+      } else {\n+        url =\n+            new HttpUrl.Builder()\n+                .scheme(url.scheme())\n+                .host(url.host())\n+                .addPathSegments(\"latest/meta-data/iam/security-credentials/\")\n+                .build();\n+      }\n+\n+      String[] roleNames = null;\n+      try (Response response =\n+          httpClient\n+              .newCall(new Request.Builder().url(url).method(\"GET\", null).build())\n+              .execute()) {\n+        if (!response.isSuccessful()) {\n+          throw new IllegalStateException(url + \" failed with HTTP status code \" + response.code());\n+        }\n+\n+        roleNames = response.body().string().split(\"\\\\R\");\n+      } catch (IOException e) {\n+        throw new IllegalStateException(\"Unable to parse response\", e);\n+      }\n+\n+      if (roleNames.length == 0) {\n+        throw new IllegalStateException(\"No IAM roles attached to EC2 service \" + url);\n+      }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3ODA4Mg=="}, "originalCommit": {"oid": "42e586690415214a1de09ffdc202ab79f06b3066"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzY3NjQxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/credentials/IamAwsProvider.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxMjoxNzozOVrOHNLU2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQxNTowNzo0N1rOHNRYOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3OTA5Nw==", "bodyText": "Not sure if IllegalArgumentException is the right choice for all the exceptions in this class.", "url": "https://github.com/minio/minio-java/pull/1038#discussion_r483579097", "createdAt": "2020-09-04T12:17:39Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/credentials/IamAwsProvider.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.credentials;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.minio.messages.ResponseDate;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Objects;\n+import javax.annotation.Nullable;\n+import okhttp3.HttpUrl;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Protocol;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+/**\n+ * Credential provider using <a\n+ * href=\"http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html\">IAM roles\n+ * for Amazon EC2</a>.\n+ */\n+public class IamAwsProvider extends EnvironmentProvider {\n+  // Custom endpoint to fetch IAM role credentials.\n+  private final HttpUrl customEndpoint;\n+  private final OkHttpClient httpClient;\n+  private final ObjectMapper mapper;\n+  private Credentials credentials;\n+\n+  public IamAwsProvider(@Nullable String customEndpoint, @Nullable OkHttpClient customHttpClient) {\n+    this.customEndpoint =\n+        (customEndpoint != null)\n+            ? Objects.requireNonNull(HttpUrl.parse(customEndpoint), \"Invalid custom endpoint\")\n+            : null;\n+    // HTTP/1.1 is only supported in default client because of HTTP/2 in OkHttpClient cause 5\n+    // minutes timeout on program exit.\n+    this.httpClient =\n+        (customHttpClient != null)\n+            ? customHttpClient\n+            : new OkHttpClient().newBuilder().protocols(Arrays.asList(Protocol.HTTP_1_1)).build();\n+    this.mapper = new ObjectMapper();\n+    this.mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+    this.mapper.configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true);\n+  }\n+\n+  private void checkLoopbackHost(HttpUrl url) {\n+    try {\n+      for (InetAddress addr : InetAddress.getAllByName(url.host())) {\n+        if (!addr.isLoopbackAddress()) {\n+          throw new IllegalArgumentException(url.host() + \" is not loopback only host\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42e586690415214a1de09ffdc202ab79f06b3066"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY3NTAwNg==", "bodyText": "Using IllegalStateException() now.", "url": "https://github.com/minio/minio-java/pull/1038#discussion_r483675006", "createdAt": "2020-09-04T15:02:00Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/credentials/IamAwsProvider.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.credentials;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.minio.messages.ResponseDate;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Objects;\n+import javax.annotation.Nullable;\n+import okhttp3.HttpUrl;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Protocol;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+/**\n+ * Credential provider using <a\n+ * href=\"http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html\">IAM roles\n+ * for Amazon EC2</a>.\n+ */\n+public class IamAwsProvider extends EnvironmentProvider {\n+  // Custom endpoint to fetch IAM role credentials.\n+  private final HttpUrl customEndpoint;\n+  private final OkHttpClient httpClient;\n+  private final ObjectMapper mapper;\n+  private Credentials credentials;\n+\n+  public IamAwsProvider(@Nullable String customEndpoint, @Nullable OkHttpClient customHttpClient) {\n+    this.customEndpoint =\n+        (customEndpoint != null)\n+            ? Objects.requireNonNull(HttpUrl.parse(customEndpoint), \"Invalid custom endpoint\")\n+            : null;\n+    // HTTP/1.1 is only supported in default client because of HTTP/2 in OkHttpClient cause 5\n+    // minutes timeout on program exit.\n+    this.httpClient =\n+        (customHttpClient != null)\n+            ? customHttpClient\n+            : new OkHttpClient().newBuilder().protocols(Arrays.asList(Protocol.HTTP_1_1)).build();\n+    this.mapper = new ObjectMapper();\n+    this.mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+    this.mapper.configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true);\n+  }\n+\n+  private void checkLoopbackHost(HttpUrl url) {\n+    try {\n+      for (InetAddress addr : InetAddress.getAllByName(url.host())) {\n+        if (!addr.isLoopbackAddress()) {\n+          throw new IllegalArgumentException(url.host() + \" is not loopback only host\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3OTA5Nw=="}, "originalCommit": {"oid": "42e586690415214a1de09ffdc202ab79f06b3066"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzY3ODI2NQ==", "bodyText": "Sorry I wrote this comment at the wrong place with the wrong exception name! I meant to say that I'm not sure if IllegalStateException makes sense for most of the exceptions in the class..", "url": "https://github.com/minio/minio-java/pull/1038#discussion_r483678265", "createdAt": "2020-09-04T15:07:47Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/credentials/IamAwsProvider.java", "diffHunk": "@@ -0,0 +1,218 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio.credentials;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.databind.DeserializationFeature;\n+import com.fasterxml.jackson.databind.MapperFeature;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import io.minio.messages.ResponseDate;\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.UnknownHostException;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.util.Arrays;\n+import java.util.Objects;\n+import javax.annotation.Nullable;\n+import okhttp3.HttpUrl;\n+import okhttp3.OkHttpClient;\n+import okhttp3.Protocol;\n+import okhttp3.Request;\n+import okhttp3.Response;\n+\n+/**\n+ * Credential provider using <a\n+ * href=\"http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/iam-roles-for-amazon-ec2.html\">IAM roles\n+ * for Amazon EC2</a>.\n+ */\n+public class IamAwsProvider extends EnvironmentProvider {\n+  // Custom endpoint to fetch IAM role credentials.\n+  private final HttpUrl customEndpoint;\n+  private final OkHttpClient httpClient;\n+  private final ObjectMapper mapper;\n+  private Credentials credentials;\n+\n+  public IamAwsProvider(@Nullable String customEndpoint, @Nullable OkHttpClient customHttpClient) {\n+    this.customEndpoint =\n+        (customEndpoint != null)\n+            ? Objects.requireNonNull(HttpUrl.parse(customEndpoint), \"Invalid custom endpoint\")\n+            : null;\n+    // HTTP/1.1 is only supported in default client because of HTTP/2 in OkHttpClient cause 5\n+    // minutes timeout on program exit.\n+    this.httpClient =\n+        (customHttpClient != null)\n+            ? customHttpClient\n+            : new OkHttpClient().newBuilder().protocols(Arrays.asList(Protocol.HTTP_1_1)).build();\n+    this.mapper = new ObjectMapper();\n+    this.mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false);\n+    this.mapper.configure(MapperFeature.ACCEPT_CASE_INSENSITIVE_PROPERTIES, true);\n+  }\n+\n+  private void checkLoopbackHost(HttpUrl url) {\n+    try {\n+      for (InetAddress addr : InetAddress.getAllByName(url.host())) {\n+        if (!addr.isLoopbackAddress()) {\n+          throw new IllegalArgumentException(url.host() + \" is not loopback only host\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzU3OTA5Nw=="}, "originalCommit": {"oid": "42e586690415214a1de09ffdc202ab79f06b3066"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 605, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}