{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI4MjA3NTU5", "number": 970, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMTozMDowNlrOED1HNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjozNDo1MVrOED2rMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDUxMzgwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/ObjectWriteArgs.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMTozMDowNlrOGhE9JQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDoyNTo1MlrOGhMvog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMzNzM4MQ==", "bodyText": "Might be a good idea to add this as a method in the Tags class. Something like Tag#getTagging()", "url": "https://github.com/minio/minio-java/pull/970#discussion_r437337381", "createdAt": "2020-06-09T11:30:06Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/ObjectWriteArgs.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+import com.google.common.collect.HashMultimap;\n+import com.google.common.collect.Multimap;\n+import com.google.common.collect.Multimaps;\n+import io.minio.messages.Retention;\n+import io.minio.messages.Tags;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import okhttp3.HttpUrl;\n+\n+public abstract class ObjectWriteArgs extends ObjectArgs {\n+  protected Multimap<String, String> headers =\n+      Multimaps.unmodifiableMultimap(HashMultimap.create());\n+  protected Multimap<String, String> userMetadata =\n+      Multimaps.unmodifiableMultimap(HashMultimap.create());\n+  protected ServerSideEncryption sse;\n+  protected Tags tags = new Tags();\n+  protected Retention retention;\n+  protected boolean legalHold;\n+\n+  public Multimap<String, String> headers() {\n+    return headers;\n+  }\n+\n+  public Multimap<String, String> userMetadata() {\n+    return userMetadata;\n+  }\n+\n+  public ServerSideEncryption sse() {\n+    return sse;\n+  }\n+\n+  public Tags tags() {\n+    return tags;\n+  }\n+\n+  public Retention retention() {\n+    return retention;\n+  }\n+\n+  public boolean legalHold() {\n+    return legalHold;\n+  }\n+\n+  public Multimap<String, String> genHeaders() {\n+    Multimap<String, String> headers = HashMultimap.create();\n+\n+    headers.putAll(this.headers);\n+    headers.putAll(userMetadata);\n+\n+    if (sse != null) {\n+      headers.putAll(Multimaps.forMap(sse.headers()));\n+    }\n+\n+    String tagging =\n+        tags.get().entrySet().stream()\n+            .map(e -> S3Escaper.encode(e.getKey()) + \"=\" + S3Escaper.encode(e.getValue()))\n+            .collect(Collectors.joining(\"&\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6288dcbb2d0940d3b54ac4da784d6cb35dcfa19f"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ2NDk5NA==", "bodyText": "ATM io.minio.S3Escaper is private and not available to io.minio.messages package.", "url": "https://github.com/minio/minio-java/pull/970#discussion_r437464994", "createdAt": "2020-06-09T14:25:52Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/ObjectWriteArgs.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+import com.google.common.collect.HashMultimap;\n+import com.google.common.collect.Multimap;\n+import com.google.common.collect.Multimaps;\n+import io.minio.messages.Retention;\n+import io.minio.messages.Tags;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import okhttp3.HttpUrl;\n+\n+public abstract class ObjectWriteArgs extends ObjectArgs {\n+  protected Multimap<String, String> headers =\n+      Multimaps.unmodifiableMultimap(HashMultimap.create());\n+  protected Multimap<String, String> userMetadata =\n+      Multimaps.unmodifiableMultimap(HashMultimap.create());\n+  protected ServerSideEncryption sse;\n+  protected Tags tags = new Tags();\n+  protected Retention retention;\n+  protected boolean legalHold;\n+\n+  public Multimap<String, String> headers() {\n+    return headers;\n+  }\n+\n+  public Multimap<String, String> userMetadata() {\n+    return userMetadata;\n+  }\n+\n+  public ServerSideEncryption sse() {\n+    return sse;\n+  }\n+\n+  public Tags tags() {\n+    return tags;\n+  }\n+\n+  public Retention retention() {\n+    return retention;\n+  }\n+\n+  public boolean legalHold() {\n+    return legalHold;\n+  }\n+\n+  public Multimap<String, String> genHeaders() {\n+    Multimap<String, String> headers = HashMultimap.create();\n+\n+    headers.putAll(this.headers);\n+    headers.putAll(userMetadata);\n+\n+    if (sse != null) {\n+      headers.putAll(Multimaps.forMap(sse.headers()));\n+    }\n+\n+    String tagging =\n+        tags.get().entrySet().stream()\n+            .map(e -> S3Escaper.encode(e.getKey()) + \"=\" + S3Escaper.encode(e.getValue()))\n+            .collect(Collectors.joining(\"&\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzMzNzM4MQ=="}, "originalCommit": {"oid": "6288dcbb2d0940d3b54ac4da784d6cb35dcfa19f"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDU0MDY0OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/ObjectWriteArgs.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMTozODo0MFrOGhFOEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDozMDoxM1rOGhM9Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM0MTcxNQ==", "bodyText": "It might be better to add this annotation to the Builder class itself instead of one each and every setter method.", "url": "https://github.com/minio/minio-java/pull/970#discussion_r437341715", "createdAt": "2020-06-09T11:38:40Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/ObjectWriteArgs.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+import com.google.common.collect.HashMultimap;\n+import com.google.common.collect.Multimap;\n+import com.google.common.collect.Multimaps;\n+import io.minio.messages.Retention;\n+import io.minio.messages.Tags;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import okhttp3.HttpUrl;\n+\n+public abstract class ObjectWriteArgs extends ObjectArgs {\n+  protected Multimap<String, String> headers =\n+      Multimaps.unmodifiableMultimap(HashMultimap.create());\n+  protected Multimap<String, String> userMetadata =\n+      Multimaps.unmodifiableMultimap(HashMultimap.create());\n+  protected ServerSideEncryption sse;\n+  protected Tags tags = new Tags();\n+  protected Retention retention;\n+  protected boolean legalHold;\n+\n+  public Multimap<String, String> headers() {\n+    return headers;\n+  }\n+\n+  public Multimap<String, String> userMetadata() {\n+    return userMetadata;\n+  }\n+\n+  public ServerSideEncryption sse() {\n+    return sse;\n+  }\n+\n+  public Tags tags() {\n+    return tags;\n+  }\n+\n+  public Retention retention() {\n+    return retention;\n+  }\n+\n+  public boolean legalHold() {\n+    return legalHold;\n+  }\n+\n+  public Multimap<String, String> genHeaders() {\n+    Multimap<String, String> headers = HashMultimap.create();\n+\n+    headers.putAll(this.headers);\n+    headers.putAll(userMetadata);\n+\n+    if (sse != null) {\n+      headers.putAll(Multimaps.forMap(sse.headers()));\n+    }\n+\n+    String tagging =\n+        tags.get().entrySet().stream()\n+            .map(e -> S3Escaper.encode(e.getKey()) + \"=\" + S3Escaper.encode(e.getValue()))\n+            .collect(Collectors.joining(\"&\"));\n+    if (!tagging.isEmpty()) {\n+      headers.put(\"x-amz-tagging\", tagging);\n+    }\n+\n+    if (retention != null && retention.mode() != null) {\n+      headers.put(\"x-amz-object-lock-mode\", retention.mode().name());\n+      headers.put(\n+          \"x-amz-object-lock-retain-until-date\",\n+          retention.retainUntilDate().format(Time.HTTP_HEADER_DATE_FORMAT));\n+    }\n+\n+    if (legalHold) {\n+      headers.put(\"x-amz-object-lock-legal-hold\", \"ON\");\n+    }\n+\n+    return headers;\n+  }\n+\n+  protected void validateSse(HttpUrl url) {\n+    checkSse(sse, url);\n+  }\n+\n+  public abstract static class Builder<B extends Builder<B, A>, A extends ObjectWriteArgs>\n+      extends ObjectArgs.Builder<B, A> {\n+    @SuppressWarnings(\"unchecked\") // Its safe to type cast to B as B is inherited by this class", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6288dcbb2d0940d3b54ac4da784d6cb35dcfa19f"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ2ODQxOQ==", "bodyText": "Done", "url": "https://github.com/minio/minio-java/pull/970#discussion_r437468419", "createdAt": "2020-06-09T14:30:13Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/ObjectWriteArgs.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * MinIO Java SDK for Amazon S3 Compatible Cloud Storage, (C) 2020 MinIO, Inc.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package io.minio;\n+\n+import com.google.common.collect.HashMultimap;\n+import com.google.common.collect.Multimap;\n+import com.google.common.collect.Multimaps;\n+import io.minio.messages.Retention;\n+import io.minio.messages.Tags;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import okhttp3.HttpUrl;\n+\n+public abstract class ObjectWriteArgs extends ObjectArgs {\n+  protected Multimap<String, String> headers =\n+      Multimaps.unmodifiableMultimap(HashMultimap.create());\n+  protected Multimap<String, String> userMetadata =\n+      Multimaps.unmodifiableMultimap(HashMultimap.create());\n+  protected ServerSideEncryption sse;\n+  protected Tags tags = new Tags();\n+  protected Retention retention;\n+  protected boolean legalHold;\n+\n+  public Multimap<String, String> headers() {\n+    return headers;\n+  }\n+\n+  public Multimap<String, String> userMetadata() {\n+    return userMetadata;\n+  }\n+\n+  public ServerSideEncryption sse() {\n+    return sse;\n+  }\n+\n+  public Tags tags() {\n+    return tags;\n+  }\n+\n+  public Retention retention() {\n+    return retention;\n+  }\n+\n+  public boolean legalHold() {\n+    return legalHold;\n+  }\n+\n+  public Multimap<String, String> genHeaders() {\n+    Multimap<String, String> headers = HashMultimap.create();\n+\n+    headers.putAll(this.headers);\n+    headers.putAll(userMetadata);\n+\n+    if (sse != null) {\n+      headers.putAll(Multimaps.forMap(sse.headers()));\n+    }\n+\n+    String tagging =\n+        tags.get().entrySet().stream()\n+            .map(e -> S3Escaper.encode(e.getKey()) + \"=\" + S3Escaper.encode(e.getValue()))\n+            .collect(Collectors.joining(\"&\"));\n+    if (!tagging.isEmpty()) {\n+      headers.put(\"x-amz-tagging\", tagging);\n+    }\n+\n+    if (retention != null && retention.mode() != null) {\n+      headers.put(\"x-amz-object-lock-mode\", retention.mode().name());\n+      headers.put(\n+          \"x-amz-object-lock-retain-until-date\",\n+          retention.retainUntilDate().format(Time.HTTP_HEADER_DATE_FORMAT));\n+    }\n+\n+    if (legalHold) {\n+      headers.put(\"x-amz-object-lock-legal-hold\", \"ON\");\n+    }\n+\n+    return headers;\n+  }\n+\n+  protected void validateSse(HttpUrl url) {\n+    checkSse(sse, url);\n+  }\n+\n+  public abstract static class Builder<B extends Builder<B, A>, A extends ObjectWriteArgs>\n+      extends ObjectArgs.Builder<B, A> {\n+    @SuppressWarnings(\"unchecked\") // Its safe to type cast to B as B is inherited by this class", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM0MTcxNQ=="}, "originalCommit": {"oid": "6288dcbb2d0940d3b54ac4da784d6cb35dcfa19f"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDY0ODI2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/MinioClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjoxMToxMFrOGhGQyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNToyNzo0MFrOGhQKMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM1ODc5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    builder.metadataDirective(Directive.REPLACE);\n          \n          \n            \n                    builder.metadataDirective(value);", "url": "https://github.com/minio/minio-java/pull/970#discussion_r437358793", "createdAt": "2020-06-09T12:11:10Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -2321,48 +2323,184 @@ public void copyObject(\n           InternalException, InvalidBucketNameException, InvalidKeyException,\n           InvalidResponseException, IOException, NoSuchAlgorithmException, ServerException,\n           XmlParserException {\n-    if ((bucketName == null) || (bucketName.isEmpty())) {\n-      throw new IllegalArgumentException(\"bucket name cannot be empty\");\n+    ServerSideEncryptionCustomerKey srcSsec = null;\n+    if (srcSse instanceof ServerSideEncryptionCustomerKey) {\n+      srcSsec = (ServerSideEncryptionCustomerKey) srcSse;\n     }\n+    checkReadRequestSse(srcSse);\n \n-    checkObjectName(objectName);\n+    CopyObjectArgs.Builder builder =\n+        CopyObjectArgs.builder()\n+            .bucket(bucketName)\n+            .object(objectName)\n+            .headers(headerMap)\n+            .sse(sse)\n+            .srcBucket(srcBucketName)\n+            .srcObject(srcObjectName)\n+            .srcSsec(srcSsec);\n \n-    checkWriteRequestSse(sse);\n+    if (copyConditions != null) {\n+      Map<String, String> map = copyConditions.getConditions();\n+      String value;\n+\n+      builder.srcMatchETag(map.get(\"x-amz-copy-source-if-match\"));\n+      builder.srcNotMatchETag(map.get(\"x-amz-copy-source-if-none-match\"));\n \n-    if ((srcBucketName == null) || (srcBucketName.isEmpty())) {\n-      throw new IllegalArgumentException(\"Source bucket name cannot be empty\");\n+      value = map.get(\"x-amz-copy-source-if-modified-since\");\n+      if (value != null) {\n+        builder.srcModifiedSince(ZonedDateTime.parse(value, Time.HTTP_HEADER_DATE_FORMAT));\n+      }\n+\n+      value = map.get(\"x-amz-copy-source-if-unmodified-since\");\n+      if (value != null) {\n+        builder.srcUnmodifiedSince(ZonedDateTime.parse(value, Time.HTTP_HEADER_DATE_FORMAT));\n+      }\n+\n+      value = map.get(\"x-amz-metadata-directive\");\n+      if (value != null) {\n+        builder.metadataDirective(Directive.REPLACE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6288dcbb2d0940d3b54ac4da784d6cb35dcfa19f"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ3MDc5NQ==", "bodyText": "No. CopyConditions sets only \"REPLACE\" string. Hence Directive.REPLACE", "url": "https://github.com/minio/minio-java/pull/970#discussion_r437470795", "createdAt": "2020-06-09T14:33:15Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -2321,48 +2323,184 @@ public void copyObject(\n           InternalException, InvalidBucketNameException, InvalidKeyException,\n           InvalidResponseException, IOException, NoSuchAlgorithmException, ServerException,\n           XmlParserException {\n-    if ((bucketName == null) || (bucketName.isEmpty())) {\n-      throw new IllegalArgumentException(\"bucket name cannot be empty\");\n+    ServerSideEncryptionCustomerKey srcSsec = null;\n+    if (srcSse instanceof ServerSideEncryptionCustomerKey) {\n+      srcSsec = (ServerSideEncryptionCustomerKey) srcSse;\n     }\n+    checkReadRequestSse(srcSse);\n \n-    checkObjectName(objectName);\n+    CopyObjectArgs.Builder builder =\n+        CopyObjectArgs.builder()\n+            .bucket(bucketName)\n+            .object(objectName)\n+            .headers(headerMap)\n+            .sse(sse)\n+            .srcBucket(srcBucketName)\n+            .srcObject(srcObjectName)\n+            .srcSsec(srcSsec);\n \n-    checkWriteRequestSse(sse);\n+    if (copyConditions != null) {\n+      Map<String, String> map = copyConditions.getConditions();\n+      String value;\n+\n+      builder.srcMatchETag(map.get(\"x-amz-copy-source-if-match\"));\n+      builder.srcNotMatchETag(map.get(\"x-amz-copy-source-if-none-match\"));\n \n-    if ((srcBucketName == null) || (srcBucketName.isEmpty())) {\n-      throw new IllegalArgumentException(\"Source bucket name cannot be empty\");\n+      value = map.get(\"x-amz-copy-source-if-modified-since\");\n+      if (value != null) {\n+        builder.srcModifiedSince(ZonedDateTime.parse(value, Time.HTTP_HEADER_DATE_FORMAT));\n+      }\n+\n+      value = map.get(\"x-amz-copy-source-if-unmodified-since\");\n+      if (value != null) {\n+        builder.srcUnmodifiedSince(ZonedDateTime.parse(value, Time.HTTP_HEADER_DATE_FORMAT));\n+      }\n+\n+      value = map.get(\"x-amz-metadata-directive\");\n+      if (value != null) {\n+        builder.metadataDirective(Directive.REPLACE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM1ODc5Mw=="}, "originalCommit": {"oid": "6288dcbb2d0940d3b54ac4da784d6cb35dcfa19f"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzUyMDk0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    builder.metadataDirective(Directive.REPLACE);\n          \n          \n            \n                    builder.metadataDirective(Directive.valueOf(value));", "url": "https://github.com/minio/minio-java/pull/970#discussion_r437520945", "createdAt": "2020-06-09T15:27:40Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -2321,48 +2323,184 @@ public void copyObject(\n           InternalException, InvalidBucketNameException, InvalidKeyException,\n           InvalidResponseException, IOException, NoSuchAlgorithmException, ServerException,\n           XmlParserException {\n-    if ((bucketName == null) || (bucketName.isEmpty())) {\n-      throw new IllegalArgumentException(\"bucket name cannot be empty\");\n+    ServerSideEncryptionCustomerKey srcSsec = null;\n+    if (srcSse instanceof ServerSideEncryptionCustomerKey) {\n+      srcSsec = (ServerSideEncryptionCustomerKey) srcSse;\n     }\n+    checkReadRequestSse(srcSse);\n \n-    checkObjectName(objectName);\n+    CopyObjectArgs.Builder builder =\n+        CopyObjectArgs.builder()\n+            .bucket(bucketName)\n+            .object(objectName)\n+            .headers(headerMap)\n+            .sse(sse)\n+            .srcBucket(srcBucketName)\n+            .srcObject(srcObjectName)\n+            .srcSsec(srcSsec);\n \n-    checkWriteRequestSse(sse);\n+    if (copyConditions != null) {\n+      Map<String, String> map = copyConditions.getConditions();\n+      String value;\n+\n+      builder.srcMatchETag(map.get(\"x-amz-copy-source-if-match\"));\n+      builder.srcNotMatchETag(map.get(\"x-amz-copy-source-if-none-match\"));\n \n-    if ((srcBucketName == null) || (srcBucketName.isEmpty())) {\n-      throw new IllegalArgumentException(\"Source bucket name cannot be empty\");\n+      value = map.get(\"x-amz-copy-source-if-modified-since\");\n+      if (value != null) {\n+        builder.srcModifiedSince(ZonedDateTime.parse(value, Time.HTTP_HEADER_DATE_FORMAT));\n+      }\n+\n+      value = map.get(\"x-amz-copy-source-if-unmodified-since\");\n+      if (value != null) {\n+        builder.srcUnmodifiedSince(ZonedDateTime.parse(value, Time.HTTP_HEADER_DATE_FORMAT));\n+      }\n+\n+      value = map.get(\"x-amz-metadata-directive\");\n+      if (value != null) {\n+        builder.metadataDirective(Directive.REPLACE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM1ODc5Mw=="}, "originalCommit": {"oid": "6288dcbb2d0940d3b54ac4da784d6cb35dcfa19f"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDczMTMwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/MinioClient.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjoyNzo1N1rOGhHBWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDozODoxMlrOGhNU1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3MTIyNA==", "bodyText": "Can be simplified using the Optional class as follows:\nString srcObject = Optional.ofNullable(args.srcObject()).orElse(args.object());", "url": "https://github.com/minio/minio-java/pull/970#discussion_r437371224", "createdAt": "2020-06-09T12:27:57Z", "author": {"login": "anjalshireesh"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -2321,48 +2323,184 @@ public void copyObject(\n           InternalException, InvalidBucketNameException, InvalidKeyException,\n           InvalidResponseException, IOException, NoSuchAlgorithmException, ServerException,\n           XmlParserException {\n-    if ((bucketName == null) || (bucketName.isEmpty())) {\n-      throw new IllegalArgumentException(\"bucket name cannot be empty\");\n+    ServerSideEncryptionCustomerKey srcSsec = null;\n+    if (srcSse instanceof ServerSideEncryptionCustomerKey) {\n+      srcSsec = (ServerSideEncryptionCustomerKey) srcSse;\n     }\n+    checkReadRequestSse(srcSse);\n \n-    checkObjectName(objectName);\n+    CopyObjectArgs.Builder builder =\n+        CopyObjectArgs.builder()\n+            .bucket(bucketName)\n+            .object(objectName)\n+            .headers(headerMap)\n+            .sse(sse)\n+            .srcBucket(srcBucketName)\n+            .srcObject(srcObjectName)\n+            .srcSsec(srcSsec);\n \n-    checkWriteRequestSse(sse);\n+    if (copyConditions != null) {\n+      Map<String, String> map = copyConditions.getConditions();\n+      String value;\n+\n+      builder.srcMatchETag(map.get(\"x-amz-copy-source-if-match\"));\n+      builder.srcNotMatchETag(map.get(\"x-amz-copy-source-if-none-match\"));\n \n-    if ((srcBucketName == null) || (srcBucketName.isEmpty())) {\n-      throw new IllegalArgumentException(\"Source bucket name cannot be empty\");\n+      value = map.get(\"x-amz-copy-source-if-modified-since\");\n+      if (value != null) {\n+        builder.srcModifiedSince(ZonedDateTime.parse(value, Time.HTTP_HEADER_DATE_FORMAT));\n+      }\n+\n+      value = map.get(\"x-amz-copy-source-if-unmodified-since\");\n+      if (value != null) {\n+        builder.srcUnmodifiedSince(ZonedDateTime.parse(value, Time.HTTP_HEADER_DATE_FORMAT));\n+      }\n+\n+      value = map.get(\"x-amz-metadata-directive\");\n+      if (value != null) {\n+        builder.metadataDirective(Directive.REPLACE);\n+      }\n     }\n \n+    copyObject(builder.build());\n+  }\n+\n+  /**\n+   * Creates an object by server-side copying data from another object.\n+   *\n+   * <pre>Example:{@code\n+   * // Create object \"my-objectname\" in bucket \"my-bucketname\" by copying from object\n+   * // \"my-objectname\" in bucket \"my-source-bucketname\".\n+   * minioClient.copyObject(\n+   *     CopyObjectArgs.builder()\n+   *         .bucket(\"my-bucketname\")\n+   *         .object(\"my-objectname\")\n+   *         .srcBucket(\"my-source-bucketname\")\n+   *         .build());\n+   *\n+   * // Create object \"my-objectname\" in bucket \"my-bucketname\" by copying from object\n+   * // \"my-source-objectname\" in bucket \"my-source-bucketname\".\n+   * minioClient.copyObject(\n+   *     CopyObjectArgs.builder()\n+   *         .bucket(\"my-bucketname\")\n+   *         .object(\"my-objectname\")\n+   *         .srcBucket(\"my-source-bucketname\")\n+   *         .srcObject(\"my-source-objectname\")\n+   *         .build());\n+   *\n+   * // Create object \"my-objectname\" in bucket \"my-bucketname\" with server-side encryption by\n+   * // copying from object \"my-objectname\" in bucket \"my-source-bucketname\".\n+   * minioClient.copyObject(\n+   *     CopyObjectArgs.builder()\n+   *         .bucket(\"my-bucketname\")\n+   *         .object(\"my-objectname\")\n+   *         .srcBucket(\"my-source-bucketname\")\n+   *         .sse(sse)\n+   *         .build());\n+   *\n+   * // Create object \"my-objectname\" in bucket \"my-bucketname\" by copying from SSE-C encrypted\n+   * // object \"my-source-objectname\" in bucket \"my-source-bucketname\".\n+   * minioClient.copyObject(\n+   *     CopyObjectArgs.builder()\n+   *         .bucket(\"my-bucketname\")\n+   *         .object(\"my-objectname\")\n+   *         .srcBucket(\"my-source-bucketname\")\n+   *         .srcObject(\"my-source-objectname\")\n+   *         .srcSsec(ssec)\n+   *         .build());\n+   *\n+   * // Create object \"my-objectname\" in bucket \"my-bucketname\" with custom headers by copying from\n+   * // object \"my-objectname\" in bucket \"my-source-bucketname\" using conditions.\n+   * minioClient.copyObject(\n+   *     CopyObjectArgs.builder()\n+   *         .bucket(\"my-bucketname\")\n+   *         .object(\"my-objectname\")\n+   *         .srcBucket(\"my-source-bucketname\")\n+   *         .headers(headers)\n+   *         .srcMatchETag(etag)\n+   *         .build());\n+   * }</pre>\n+   *\n+   * @param args {@link CopyObjectArgs} object.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  public void copyObject(CopyObjectArgs args)\n+      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n+          InternalException, InvalidBucketNameException, InvalidKeyException,\n+          InvalidResponseException, IOException, NoSuchAlgorithmException, ServerException,\n+          XmlParserException {\n+    checkArgs(args);\n+    args.validateSse(this.baseUrl);\n+\n+    Multimap<String, String> headers = args.genHeaders();\n+\n     // Source object name is optional, if empty default to object name.\n-    if (srcObjectName == null) {\n-      srcObjectName = objectName;\n+    String srcObject = args.object();\n+    if (args.srcObject() != null) {\n+      srcObject = args.srcObject();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6288dcbb2d0940d3b54ac4da784d6cb35dcfa19f"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ3NDUxNg==", "bodyText": "Done", "url": "https://github.com/minio/minio-java/pull/970#discussion_r437474516", "createdAt": "2020-06-09T14:38:12Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -2321,48 +2323,184 @@ public void copyObject(\n           InternalException, InvalidBucketNameException, InvalidKeyException,\n           InvalidResponseException, IOException, NoSuchAlgorithmException, ServerException,\n           XmlParserException {\n-    if ((bucketName == null) || (bucketName.isEmpty())) {\n-      throw new IllegalArgumentException(\"bucket name cannot be empty\");\n+    ServerSideEncryptionCustomerKey srcSsec = null;\n+    if (srcSse instanceof ServerSideEncryptionCustomerKey) {\n+      srcSsec = (ServerSideEncryptionCustomerKey) srcSse;\n     }\n+    checkReadRequestSse(srcSse);\n \n-    checkObjectName(objectName);\n+    CopyObjectArgs.Builder builder =\n+        CopyObjectArgs.builder()\n+            .bucket(bucketName)\n+            .object(objectName)\n+            .headers(headerMap)\n+            .sse(sse)\n+            .srcBucket(srcBucketName)\n+            .srcObject(srcObjectName)\n+            .srcSsec(srcSsec);\n \n-    checkWriteRequestSse(sse);\n+    if (copyConditions != null) {\n+      Map<String, String> map = copyConditions.getConditions();\n+      String value;\n+\n+      builder.srcMatchETag(map.get(\"x-amz-copy-source-if-match\"));\n+      builder.srcNotMatchETag(map.get(\"x-amz-copy-source-if-none-match\"));\n \n-    if ((srcBucketName == null) || (srcBucketName.isEmpty())) {\n-      throw new IllegalArgumentException(\"Source bucket name cannot be empty\");\n+      value = map.get(\"x-amz-copy-source-if-modified-since\");\n+      if (value != null) {\n+        builder.srcModifiedSince(ZonedDateTime.parse(value, Time.HTTP_HEADER_DATE_FORMAT));\n+      }\n+\n+      value = map.get(\"x-amz-copy-source-if-unmodified-since\");\n+      if (value != null) {\n+        builder.srcUnmodifiedSince(ZonedDateTime.parse(value, Time.HTTP_HEADER_DATE_FORMAT));\n+      }\n+\n+      value = map.get(\"x-amz-metadata-directive\");\n+      if (value != null) {\n+        builder.metadataDirective(Directive.REPLACE);\n+      }\n     }\n \n+    copyObject(builder.build());\n+  }\n+\n+  /**\n+   * Creates an object by server-side copying data from another object.\n+   *\n+   * <pre>Example:{@code\n+   * // Create object \"my-objectname\" in bucket \"my-bucketname\" by copying from object\n+   * // \"my-objectname\" in bucket \"my-source-bucketname\".\n+   * minioClient.copyObject(\n+   *     CopyObjectArgs.builder()\n+   *         .bucket(\"my-bucketname\")\n+   *         .object(\"my-objectname\")\n+   *         .srcBucket(\"my-source-bucketname\")\n+   *         .build());\n+   *\n+   * // Create object \"my-objectname\" in bucket \"my-bucketname\" by copying from object\n+   * // \"my-source-objectname\" in bucket \"my-source-bucketname\".\n+   * minioClient.copyObject(\n+   *     CopyObjectArgs.builder()\n+   *         .bucket(\"my-bucketname\")\n+   *         .object(\"my-objectname\")\n+   *         .srcBucket(\"my-source-bucketname\")\n+   *         .srcObject(\"my-source-objectname\")\n+   *         .build());\n+   *\n+   * // Create object \"my-objectname\" in bucket \"my-bucketname\" with server-side encryption by\n+   * // copying from object \"my-objectname\" in bucket \"my-source-bucketname\".\n+   * minioClient.copyObject(\n+   *     CopyObjectArgs.builder()\n+   *         .bucket(\"my-bucketname\")\n+   *         .object(\"my-objectname\")\n+   *         .srcBucket(\"my-source-bucketname\")\n+   *         .sse(sse)\n+   *         .build());\n+   *\n+   * // Create object \"my-objectname\" in bucket \"my-bucketname\" by copying from SSE-C encrypted\n+   * // object \"my-source-objectname\" in bucket \"my-source-bucketname\".\n+   * minioClient.copyObject(\n+   *     CopyObjectArgs.builder()\n+   *         .bucket(\"my-bucketname\")\n+   *         .object(\"my-objectname\")\n+   *         .srcBucket(\"my-source-bucketname\")\n+   *         .srcObject(\"my-source-objectname\")\n+   *         .srcSsec(ssec)\n+   *         .build());\n+   *\n+   * // Create object \"my-objectname\" in bucket \"my-bucketname\" with custom headers by copying from\n+   * // object \"my-objectname\" in bucket \"my-source-bucketname\" using conditions.\n+   * minioClient.copyObject(\n+   *     CopyObjectArgs.builder()\n+   *         .bucket(\"my-bucketname\")\n+   *         .object(\"my-objectname\")\n+   *         .srcBucket(\"my-source-bucketname\")\n+   *         .headers(headers)\n+   *         .srcMatchETag(etag)\n+   *         .build());\n+   * }</pre>\n+   *\n+   * @param args {@link CopyObjectArgs} object.\n+   * @throws ErrorResponseException thrown to indicate S3 service returned an error response.\n+   * @throws IllegalArgumentException throws to indicate invalid argument passed.\n+   * @throws InsufficientDataException thrown to indicate not enough data available in InputStream.\n+   * @throws InternalException thrown to indicate internal library error.\n+   * @throws InvalidBucketNameException thrown to indicate invalid bucket name passed.\n+   * @throws InvalidKeyException thrown to indicate missing of HMAC SHA-256 library.\n+   * @throws InvalidResponseException thrown to indicate S3 service returned invalid or no error\n+   *     response.\n+   * @throws IOException thrown to indicate I/O error on S3 operation.\n+   * @throws NoSuchAlgorithmException thrown to indicate missing of MD5 or SHA-256 digest library.\n+   * @throws XmlParserException thrown to indicate XML parsing error.\n+   */\n+  public void copyObject(CopyObjectArgs args)\n+      throws ErrorResponseException, IllegalArgumentException, InsufficientDataException,\n+          InternalException, InvalidBucketNameException, InvalidKeyException,\n+          InvalidResponseException, IOException, NoSuchAlgorithmException, ServerException,\n+          XmlParserException {\n+    checkArgs(args);\n+    args.validateSse(this.baseUrl);\n+\n+    Multimap<String, String> headers = args.genHeaders();\n+\n     // Source object name is optional, if empty default to object name.\n-    if (srcObjectName == null) {\n-      srcObjectName = objectName;\n+    String srcObject = args.object();\n+    if (args.srcObject() != null) {\n+      srcObject = args.srcObject();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3MTIyNA=="}, "originalCommit": {"oid": "6288dcbb2d0940d3b54ac4da784d6cb35dcfa19f"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyNDc2OTc5OnYy", "diffSide": "RIGHT", "path": "functional/FunctionalTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxMjozNDo1MVrOGhHYbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQxNDo0MTo1M1rOGhNgPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3NzEzNA==", "bodyText": "Can be simplified using Optional class as follows:\nString srcObject = Optional.ofNullable(args.srcObject()).orElse(args.object());", "url": "https://github.com/minio/minio-java/pull/970#discussion_r437377134", "createdAt": "2020-06-09T12:34:51Z", "author": {"login": "anjalshireesh"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -2299,660 +2307,368 @@ public static void threadedPutObject() throws Exception {\n     }\n   }\n \n-  /** Test: copyObject(String bucketName, String objectName, String destBucketName). */\n-  public static void copyObject_test1() throws Exception {\n-    String methodName = \"copyObject(String bucketName, String objectName, String destBucketName)\";\n+  public static void testCopyObject(\n+      String testTags, ServerSideEncryption sse, CopyObjectArgs args, boolean negativeCase)\n+      throws Exception {\n+    String methodName = \"copyObject()\";\n     if (!mintEnv) {\n-      System.out.println(\"Test: \" + methodName);\n-    }\n-\n-    long startTime = System.currentTimeMillis();\n-    try {\n-      String objectName = getRandomName();\n-      try (final InputStream is = new ContentInputStream(1 * KB)) {\n-        client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n-      }\n-\n-      String destBucketName = getRandomName();\n-      client.makeBucket(MakeBucketArgs.builder().bucket(destBucketName).build());\n-      client.copyObject(destBucketName, objectName, null, null, bucketName, null, null, null);\n-      client\n-          .getObject(GetObjectArgs.builder().bucket(bucketName).object(objectName).build())\n-          .close();\n-\n-      client.removeObject(RemoveObjectArgs.builder().bucket(bucketName).object(objectName).build());\n-      client.removeObject(\n-          RemoveObjectArgs.builder().bucket(destBucketName).object(objectName).build());\n-      client.removeBucket(RemoveBucketArgs.builder().bucket(destBucketName).build());\n-      mintSuccessLog(methodName, null, startTime);\n-    } catch (Exception e) {\n-      handleException(methodName, null, startTime, e);\n+      System.out.println(\"Test: \" + methodName + \" \" + testTags);\n     }\n-  }\n \n-  /**\n-   * Test: copyObject(String bucketName, String objectName, String destBucketName, CopyConditions\n-   * copyConditions) with ETag to match.\n-   */\n-  public static void copyObject_test2() throws Exception {\n-    if (!mintEnv) {\n-      System.out.println(\n-          \"Test: copyObject(String bucketName, String objectName, String destBucketName,\"\n-              + \"CopyConditions copyConditions) with Matching ETag (Negative Case)\");\n+    String srcObject = args.object();\n+    if (args.srcObject() != null) {\n+      srcObject = args.srcObject();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6288dcbb2d0940d3b54ac4da784d6cb35dcfa19f"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzQ3NzQzOA==", "bodyText": "Done", "url": "https://github.com/minio/minio-java/pull/970#discussion_r437477438", "createdAt": "2020-06-09T14:41:53Z", "author": {"login": "balamurugana"}, "path": "functional/FunctionalTest.java", "diffHunk": "@@ -2299,660 +2307,368 @@ public static void threadedPutObject() throws Exception {\n     }\n   }\n \n-  /** Test: copyObject(String bucketName, String objectName, String destBucketName). */\n-  public static void copyObject_test1() throws Exception {\n-    String methodName = \"copyObject(String bucketName, String objectName, String destBucketName)\";\n+  public static void testCopyObject(\n+      String testTags, ServerSideEncryption sse, CopyObjectArgs args, boolean negativeCase)\n+      throws Exception {\n+    String methodName = \"copyObject()\";\n     if (!mintEnv) {\n-      System.out.println(\"Test: \" + methodName);\n-    }\n-\n-    long startTime = System.currentTimeMillis();\n-    try {\n-      String objectName = getRandomName();\n-      try (final InputStream is = new ContentInputStream(1 * KB)) {\n-        client.putObject(bucketName, objectName, is, new PutObjectOptions(1 * KB, -1));\n-      }\n-\n-      String destBucketName = getRandomName();\n-      client.makeBucket(MakeBucketArgs.builder().bucket(destBucketName).build());\n-      client.copyObject(destBucketName, objectName, null, null, bucketName, null, null, null);\n-      client\n-          .getObject(GetObjectArgs.builder().bucket(bucketName).object(objectName).build())\n-          .close();\n-\n-      client.removeObject(RemoveObjectArgs.builder().bucket(bucketName).object(objectName).build());\n-      client.removeObject(\n-          RemoveObjectArgs.builder().bucket(destBucketName).object(objectName).build());\n-      client.removeBucket(RemoveBucketArgs.builder().bucket(destBucketName).build());\n-      mintSuccessLog(methodName, null, startTime);\n-    } catch (Exception e) {\n-      handleException(methodName, null, startTime, e);\n+      System.out.println(\"Test: \" + methodName + \" \" + testTags);\n     }\n-  }\n \n-  /**\n-   * Test: copyObject(String bucketName, String objectName, String destBucketName, CopyConditions\n-   * copyConditions) with ETag to match.\n-   */\n-  public static void copyObject_test2() throws Exception {\n-    if (!mintEnv) {\n-      System.out.println(\n-          \"Test: copyObject(String bucketName, String objectName, String destBucketName,\"\n-              + \"CopyConditions copyConditions) with Matching ETag (Negative Case)\");\n+    String srcObject = args.object();\n+    if (args.srcObject() != null) {\n+      srcObject = args.srcObject();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzM3NzEzNA=="}, "originalCommit": {"oid": "6288dcbb2d0940d3b54ac4da784d6cb35dcfa19f"}, "originalPosition": 95}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 734, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}