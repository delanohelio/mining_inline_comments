{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0OTQxOTA4", "number": 862, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNDoyMTowOVrODoDnew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNDoyMTowOVrODoDnew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMzI4ODkxOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/io/minio/MinioClient.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNDoyMTowOVrOF2Z6Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNFQxNTozMjozMVrOF2aNCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5MTk1MQ==", "bodyText": "we should keep the comment about exceptions being thrown to be consistent", "url": "https://github.com/minio/minio-java/pull/862#discussion_r392591951", "createdAt": "2020-03-14T14:21:09Z", "author": {"login": "kannappanr"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -4254,925 +3951,39 @@ public void removeBucket(String bucketName)\n   }\n \n   /**\n-   * Uploads given file as object in given bucket.\n-   * <p>\n-   * If the object is larger than 5MB, the client will automatically use a multipart session.\n-   * </p>\n-   * <p>\n-   * If the session fails, the user may attempt to re-upload the object by attempting to create\n-   * the exact same object again.\n-   * </p>\n-   * <p>\n-   * If the multipart session fails, we abort all the uploaded content.\n-   * </p>\n-   *\n-   * @param bucketName  Bucket name.\n-   * @param objectName  Object name to create in the bucket.\n-   * @param fileName    File name to upload.\n-   *\n-   * @throws InvalidBucketNameException  upon invalid bucket name is given\n-   * @throws NoSuchAlgorithmException\n-   *           upon requested algorithm was not found during signature calculation\n-   * @throws IOException                 upon connection error\n-   * @throws InvalidKeyException\n-   *           upon an invalid access key or secret key\n-   * @throws XmlPullParserException      upon parsing response xml\n-   * @throws ErrorResponseException      upon unsuccessful execution\n-   * @throws InternalException           upon internal library error\n-   * @throws IllegalArgumentException    upon invalid value is passed to a method.\n-   * @throws InsufficientDataException   upon getting EOFException while reading given\n-   * @throws InvalidResponseException    upon a non-xml response from server\n+   * Executes put object and returns ETag of the object.\n    *\n-   * @deprecated As of release 7.0\n+   * @param bucketName\n+   *          Bucket name.\n+   * @param objectName\n+   *          Object name in the bucket.\n+   * @param length\n+   *          Length of object data.\n+   * @param data\n+   *          Object data.\n+   * @param uploadId\n+   *          Upload ID of multipart put object.\n+   * @param partNumber\n+   *          Part number of multipart put object.\n    */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "652d934c93a60a53211e993fed3a528371a34b61"}, "originalPosition": 357}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5NTUzNg==", "bodyText": "Its odd to have javadoc for private methods. I would suggest to remove such unnecessary docs.", "url": "https://github.com/minio/minio-java/pull/862#discussion_r392595536", "createdAt": "2020-03-14T15:15:08Z", "author": {"login": "balamurugana"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -4254,925 +3951,39 @@ public void removeBucket(String bucketName)\n   }\n \n   /**\n-   * Uploads given file as object in given bucket.\n-   * <p>\n-   * If the object is larger than 5MB, the client will automatically use a multipart session.\n-   * </p>\n-   * <p>\n-   * If the session fails, the user may attempt to re-upload the object by attempting to create\n-   * the exact same object again.\n-   * </p>\n-   * <p>\n-   * If the multipart session fails, we abort all the uploaded content.\n-   * </p>\n-   *\n-   * @param bucketName  Bucket name.\n-   * @param objectName  Object name to create in the bucket.\n-   * @param fileName    File name to upload.\n-   *\n-   * @throws InvalidBucketNameException  upon invalid bucket name is given\n-   * @throws NoSuchAlgorithmException\n-   *           upon requested algorithm was not found during signature calculation\n-   * @throws IOException                 upon connection error\n-   * @throws InvalidKeyException\n-   *           upon an invalid access key or secret key\n-   * @throws XmlPullParserException      upon parsing response xml\n-   * @throws ErrorResponseException      upon unsuccessful execution\n-   * @throws InternalException           upon internal library error\n-   * @throws IllegalArgumentException    upon invalid value is passed to a method.\n-   * @throws InsufficientDataException   upon getting EOFException while reading given\n-   * @throws InvalidResponseException    upon a non-xml response from server\n+   * Executes put object and returns ETag of the object.\n    *\n-   * @deprecated As of release 7.0\n+   * @param bucketName\n+   *          Bucket name.\n+   * @param objectName\n+   *          Object name in the bucket.\n+   * @param length\n+   *          Length of object data.\n+   * @param data\n+   *          Object data.\n+   * @param uploadId\n+   *          Upload ID of multipart put object.\n+   * @param partNumber\n+   *          Part number of multipart put object.\n    */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5MTk1MQ=="}, "originalCommit": {"oid": "652d934c93a60a53211e993fed3a528371a34b61"}, "originalPosition": 357}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5Njc0Nw==", "bodyText": "ok. got it.", "url": "https://github.com/minio/minio-java/pull/862#discussion_r392596747", "createdAt": "2020-03-14T15:32:31Z", "author": {"login": "kannappanr"}, "path": "api/src/main/java/io/minio/MinioClient.java", "diffHunk": "@@ -4254,925 +3951,39 @@ public void removeBucket(String bucketName)\n   }\n \n   /**\n-   * Uploads given file as object in given bucket.\n-   * <p>\n-   * If the object is larger than 5MB, the client will automatically use a multipart session.\n-   * </p>\n-   * <p>\n-   * If the session fails, the user may attempt to re-upload the object by attempting to create\n-   * the exact same object again.\n-   * </p>\n-   * <p>\n-   * If the multipart session fails, we abort all the uploaded content.\n-   * </p>\n-   *\n-   * @param bucketName  Bucket name.\n-   * @param objectName  Object name to create in the bucket.\n-   * @param fileName    File name to upload.\n-   *\n-   * @throws InvalidBucketNameException  upon invalid bucket name is given\n-   * @throws NoSuchAlgorithmException\n-   *           upon requested algorithm was not found during signature calculation\n-   * @throws IOException                 upon connection error\n-   * @throws InvalidKeyException\n-   *           upon an invalid access key or secret key\n-   * @throws XmlPullParserException      upon parsing response xml\n-   * @throws ErrorResponseException      upon unsuccessful execution\n-   * @throws InternalException           upon internal library error\n-   * @throws IllegalArgumentException    upon invalid value is passed to a method.\n-   * @throws InsufficientDataException   upon getting EOFException while reading given\n-   * @throws InvalidResponseException    upon a non-xml response from server\n+   * Executes put object and returns ETag of the object.\n    *\n-   * @deprecated As of release 7.0\n+   * @param bucketName\n+   *          Bucket name.\n+   * @param objectName\n+   *          Object name in the bucket.\n+   * @param length\n+   *          Length of object data.\n+   * @param data\n+   *          Object data.\n+   * @param uploadId\n+   *          Upload ID of multipart put object.\n+   * @param partNumber\n+   *          Part number of multipart put object.\n    */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjU5MTk1MQ=="}, "originalCommit": {"oid": "652d934c93a60a53211e993fed3a528371a34b61"}, "originalPosition": 357}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 769, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}