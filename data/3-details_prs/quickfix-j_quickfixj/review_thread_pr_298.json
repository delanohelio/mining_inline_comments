{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxMDQ1ODc1", "number": 298, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMDo1MDoxN1rOEDZIig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDoxNjozMlrOEDeU4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxOTkyOTcwOnYy", "diffSide": "RIGHT", "path": "quickfixj-core/src/main/java/quickfix/mina/acceptor/AbstractSocketAcceptor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMDo1MDoxN1rOGgYjrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMDo1MDoxN1rOGgYjrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjYwOTk2Ng==", "bodyText": "Not a big fan of catching general Throwable but made code as similar as possible to AbstractSocketInitiator. Could be changed later.", "url": "https://github.com/quickfix-j/quickfixj/pull/298#discussion_r436609966", "createdAt": "2020-06-08T10:50:17Z", "author": {"login": "chrjohn"}, "path": "quickfixj-core/src/main/java/quickfix/mina/acceptor/AbstractSocketAcceptor.java", "diffHunk": "@@ -227,11 +229,20 @@ private void createSessions(SessionSettings settings) throws ConfigError, FieldC\n             }\n \n             if (connectionType.equals(SessionFactory.ACCEPTOR_CONNECTION_TYPE)) {\n-                AcceptorSocketDescriptor descriptor = getAcceptorSocketDescriptor(settings, sessionID);\n-                if (!isTemplate) {\n-                    Session session = sessionFactory.create(sessionID, settings);\n-                    descriptor.acceptSession(session);\n-                    allSessions.put(sessionID, session);\n+                try {\n+                    AcceptorSocketDescriptor descriptor = getAcceptorSocketDescriptor(settings, sessionID);\n+                    if (!isTemplate) {\n+                        Session session = sessionFactory.create(sessionID, settings);\n+                        descriptor.acceptSession(session);\n+                        allSessions.put(sessionID, session);\n+                    }\n+                } catch (Throwable t) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25aac9327de343aa336fa2ea73a55433372d4a7a"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMDc4MDUwOnYy", "diffSide": "RIGHT", "path": "quickfixj-core/src/test/java/quickfix/MultiAcceptorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNDoxNjozMlrOGggu2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNjowNTozMVrOGglemg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0Mzg5Nw==", "bodyText": "assertFalse(acceptorSessions.contains(session2)); would be good.", "url": "https://github.com/quickfix-j/quickfixj/pull/298#discussion_r436743897", "createdAt": "2020-06-08T14:16:32Z", "author": {"login": "the-thing"}, "path": "quickfixj-core/src/test/java/quickfix/MultiAcceptorTest.java", "diffHunk": "@@ -111,6 +129,26 @@ public void testMessageSentOnWrongAcceptor() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void testContinueInitializationOnError() throws Exception {\n+        testAcceptorApplication = new TestAcceptorApplication(3);\n+        int freePort1 = AvailablePortFinder.getNextAvailable();\n+        int freePort2 = AvailablePortFinder.getNextAvailable();\n+        int freePort3 = AvailablePortFinder.getNextAvailable();\n+\n+        Acceptor acceptor = createAcceptor(freePort1, freePort2, freePort3, true);\n+        acceptor.start();\n+\n+        List<SessionID> acceptorSessions = acceptor.getSessions();\n+        assertEquals(2, acceptorSessions.size());\n+        SessionID session1 = new SessionID(FixVersions.BEGINSTRING_FIX42, \"ACCEPTOR-\" + 1, \"INITIATOR\");\n+        SessionID session3 = new SessionID(FixVersions.BEGINSTRING_FIX42, \"ACCEPTOR-\" + 3, \"INITIATOR\");\n+        assertTrue(acceptorSessions.contains(session1));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "25aac9327de343aa336fa2ea73a55433372d4a7a"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgyMTY1OA==", "bodyText": "Thanks, done.", "url": "https://github.com/quickfix-j/quickfixj/pull/298#discussion_r436821658", "createdAt": "2020-06-08T16:05:31Z", "author": {"login": "chrjohn"}, "path": "quickfixj-core/src/test/java/quickfix/MultiAcceptorTest.java", "diffHunk": "@@ -111,6 +129,26 @@ public void testMessageSentOnWrongAcceptor() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void testContinueInitializationOnError() throws Exception {\n+        testAcceptorApplication = new TestAcceptorApplication(3);\n+        int freePort1 = AvailablePortFinder.getNextAvailable();\n+        int freePort2 = AvailablePortFinder.getNextAvailable();\n+        int freePort3 = AvailablePortFinder.getNextAvailable();\n+\n+        Acceptor acceptor = createAcceptor(freePort1, freePort2, freePort3, true);\n+        acceptor.start();\n+\n+        List<SessionID> acceptorSessions = acceptor.getSessions();\n+        assertEquals(2, acceptorSessions.size());\n+        SessionID session1 = new SessionID(FixVersions.BEGINSTRING_FIX42, \"ACCEPTOR-\" + 1, \"INITIATOR\");\n+        SessionID session3 = new SessionID(FixVersions.BEGINSTRING_FIX42, \"ACCEPTOR-\" + 3, \"INITIATOR\");\n+        assertTrue(acceptorSessions.contains(session1));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc0Mzg5Nw=="}, "originalCommit": {"oid": "25aac9327de343aa336fa2ea73a55433372d4a7a"}, "originalPosition": 98}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2117, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}