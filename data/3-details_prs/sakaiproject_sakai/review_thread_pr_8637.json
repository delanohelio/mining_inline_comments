{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1NTEyNjAz", "number": 8637, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMToxMzoxN1rOEpoeXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzoxNjoyM1rOFDuzIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMDkwMjA2OnYy", "diffSide": "RIGHT", "path": "kernel/kernel-impl/src/main/java/org/sakaiproject/content/impl/FileConversionServiceImpl.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMVQyMToxMzoxN1rOHbbA8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wM1QxNjo1NDozMFrOHs350A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxNjIwOQ==", "bodyText": "You can do straight up sql using hibernate no need to bring in sqlservice", "url": "https://github.com/sakaiproject/sakai/pull/8637#discussion_r498516209", "createdAt": "2020-10-01T21:13:17Z", "author": {"login": "ern"}, "path": "kernel/kernel-impl/src/main/java/org/sakaiproject/content/impl/FileConversionServiceImpl.java", "diffHunk": "@@ -28,39 +28,47 @@\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n \n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+import org.hibernate.criterion.Restrictions;\n+\n import org.sakaiproject.authz.api.SecurityAdvisor;\n import org.sakaiproject.authz.api.SecurityService;\n import org.sakaiproject.component.api.ServerConfigurationService;\n import org.sakaiproject.content.api.ContentHostingService;\n import org.sakaiproject.content.api.ContentResource;\n import org.sakaiproject.content.api.FileConversionService;\n-import org.sakaiproject.content.api.repository.FileConversionQueueItemRepository;\n import org.sakaiproject.content.hbm.FileConversionQueueItem;\n import org.sakaiproject.content.impl.converters.LoolFileConverter;\n+import org.sakaiproject.db.api.SqlService;\n import org.sakaiproject.entity.api.ResourceProperties;\n import org.sakaiproject.entity.api.ResourcePropertiesEdit;\n import org.sakaiproject.exception.IdUnusedException;\n import org.sakaiproject.exception.PermissionException;\n-import org.springframework.transaction.TransactionStatus;\n-import org.springframework.transaction.annotation.Transactional;\n-import org.springframework.transaction.support.TransactionCallbackWithoutResult;\n-import org.springframework.transaction.support.TransactionTemplate;\n \n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.transaction.support.TransactionTemplate;\n \n import lombok.Setter;\n import lombok.extern.slf4j.Slf4j;\n \n+import javax.annotation.Resource;\n+\n @Slf4j\n @Setter\n public class FileConversionServiceImpl implements FileConversionService {\n \n     @Autowired private ContentHostingService contentHostingService;\n-    @Autowired private FileConversionQueueItemRepository repository;\n     @Autowired private SecurityService securityService;\n     @Autowired private ServerConfigurationService serverConfigurationService;\n+    @Autowired private SqlService sqlService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a04079bbb8b9845572461b9c570d003fc0e399ee"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTY0NDAzNA==", "bodyText": "I used sql service as I didn't want to load the entity before updating it with a simple update. Can you do that? Also, there's very little testing you can do with this. The main thing that needs testing is the actual libre office integration, ie: load testing. It seemed real overkill to create a Dao just for these simple calls when there'd be little to no yield in unit testing.\nThe entity is not in the persistence context of the sessions created by the worker threads. You have to load it every time. Or, if you want to use the persisted entity, you do the entire libreoffice call inside a transaction, effectively making the db useless as a mutex, which this code is currently using it for.", "url": "https://github.com/sakaiproject/sakai/pull/8637#discussion_r499644034", "createdAt": "2020-10-05T14:32:40Z", "author": {"login": "adrianfish"}, "path": "kernel/kernel-impl/src/main/java/org/sakaiproject/content/impl/FileConversionServiceImpl.java", "diffHunk": "@@ -28,39 +28,47 @@\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n \n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+import org.hibernate.criterion.Restrictions;\n+\n import org.sakaiproject.authz.api.SecurityAdvisor;\n import org.sakaiproject.authz.api.SecurityService;\n import org.sakaiproject.component.api.ServerConfigurationService;\n import org.sakaiproject.content.api.ContentHostingService;\n import org.sakaiproject.content.api.ContentResource;\n import org.sakaiproject.content.api.FileConversionService;\n-import org.sakaiproject.content.api.repository.FileConversionQueueItemRepository;\n import org.sakaiproject.content.hbm.FileConversionQueueItem;\n import org.sakaiproject.content.impl.converters.LoolFileConverter;\n+import org.sakaiproject.db.api.SqlService;\n import org.sakaiproject.entity.api.ResourceProperties;\n import org.sakaiproject.entity.api.ResourcePropertiesEdit;\n import org.sakaiproject.exception.IdUnusedException;\n import org.sakaiproject.exception.PermissionException;\n-import org.springframework.transaction.TransactionStatus;\n-import org.springframework.transaction.annotation.Transactional;\n-import org.springframework.transaction.support.TransactionCallbackWithoutResult;\n-import org.springframework.transaction.support.TransactionTemplate;\n \n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.transaction.support.TransactionTemplate;\n \n import lombok.Setter;\n import lombok.extern.slf4j.Slf4j;\n \n+import javax.annotation.Resource;\n+\n @Slf4j\n @Setter\n public class FileConversionServiceImpl implements FileConversionService {\n \n     @Autowired private ContentHostingService contentHostingService;\n-    @Autowired private FileConversionQueueItemRepository repository;\n     @Autowired private SecurityService securityService;\n     @Autowired private ServerConfigurationService serverConfigurationService;\n+    @Autowired private SqlService sqlService;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxNjIwOQ=="}, "originalCommit": {"oid": "a04079bbb8b9845572461b9c570d003fc0e399ee"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODc0Nzc5NA==", "bodyText": "You can evict an Entity after making changes.", "url": "https://github.com/sakaiproject/sakai/pull/8637#discussion_r508747794", "createdAt": "2020-10-20T18:29:02Z", "author": {"login": "ern"}, "path": "kernel/kernel-impl/src/main/java/org/sakaiproject/content/impl/FileConversionServiceImpl.java", "diffHunk": "@@ -28,39 +28,47 @@\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n \n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+import org.hibernate.criterion.Restrictions;\n+\n import org.sakaiproject.authz.api.SecurityAdvisor;\n import org.sakaiproject.authz.api.SecurityService;\n import org.sakaiproject.component.api.ServerConfigurationService;\n import org.sakaiproject.content.api.ContentHostingService;\n import org.sakaiproject.content.api.ContentResource;\n import org.sakaiproject.content.api.FileConversionService;\n-import org.sakaiproject.content.api.repository.FileConversionQueueItemRepository;\n import org.sakaiproject.content.hbm.FileConversionQueueItem;\n import org.sakaiproject.content.impl.converters.LoolFileConverter;\n+import org.sakaiproject.db.api.SqlService;\n import org.sakaiproject.entity.api.ResourceProperties;\n import org.sakaiproject.entity.api.ResourcePropertiesEdit;\n import org.sakaiproject.exception.IdUnusedException;\n import org.sakaiproject.exception.PermissionException;\n-import org.springframework.transaction.TransactionStatus;\n-import org.springframework.transaction.annotation.Transactional;\n-import org.springframework.transaction.support.TransactionCallbackWithoutResult;\n-import org.springframework.transaction.support.TransactionTemplate;\n \n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.transaction.support.TransactionTemplate;\n \n import lombok.Setter;\n import lombok.extern.slf4j.Slf4j;\n \n+import javax.annotation.Resource;\n+\n @Slf4j\n @Setter\n public class FileConversionServiceImpl implements FileConversionService {\n \n     @Autowired private ContentHostingService contentHostingService;\n-    @Autowired private FileConversionQueueItemRepository repository;\n     @Autowired private SecurityService securityService;\n     @Autowired private ServerConfigurationService serverConfigurationService;\n+    @Autowired private SqlService sqlService;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxNjIwOQ=="}, "originalCommit": {"oid": "a04079bbb8b9845572461b9c570d003fc0e399ee"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNjgxNTMxMg==", "bodyText": "Changes made. All hibernate now. I still think it seems overkill to add a dao interface and impl, though. You can't even test this meaningfully without bringing up a docker container with libre in it.", "url": "https://github.com/sakaiproject/sakai/pull/8637#discussion_r516815312", "createdAt": "2020-11-03T16:54:30Z", "author": {"login": "adrianfish"}, "path": "kernel/kernel-impl/src/main/java/org/sakaiproject/content/impl/FileConversionServiceImpl.java", "diffHunk": "@@ -28,39 +28,47 @@\n import java.util.concurrent.ScheduledExecutorService;\n import java.util.concurrent.TimeUnit;\n \n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+import org.hibernate.criterion.Restrictions;\n+\n import org.sakaiproject.authz.api.SecurityAdvisor;\n import org.sakaiproject.authz.api.SecurityService;\n import org.sakaiproject.component.api.ServerConfigurationService;\n import org.sakaiproject.content.api.ContentHostingService;\n import org.sakaiproject.content.api.ContentResource;\n import org.sakaiproject.content.api.FileConversionService;\n-import org.sakaiproject.content.api.repository.FileConversionQueueItemRepository;\n import org.sakaiproject.content.hbm.FileConversionQueueItem;\n import org.sakaiproject.content.impl.converters.LoolFileConverter;\n+import org.sakaiproject.db.api.SqlService;\n import org.sakaiproject.entity.api.ResourceProperties;\n import org.sakaiproject.entity.api.ResourcePropertiesEdit;\n import org.sakaiproject.exception.IdUnusedException;\n import org.sakaiproject.exception.PermissionException;\n-import org.springframework.transaction.TransactionStatus;\n-import org.springframework.transaction.annotation.Transactional;\n-import org.springframework.transaction.support.TransactionCallbackWithoutResult;\n-import org.springframework.transaction.support.TransactionTemplate;\n \n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.transaction.support.TransactionTemplate;\n \n import lombok.Setter;\n import lombok.extern.slf4j.Slf4j;\n \n+import javax.annotation.Resource;\n+\n @Slf4j\n @Setter\n public class FileConversionServiceImpl implements FileConversionService {\n \n     @Autowired private ContentHostingService contentHostingService;\n-    @Autowired private FileConversionQueueItemRepository repository;\n     @Autowired private SecurityService securityService;\n     @Autowired private ServerConfigurationService serverConfigurationService;\n+    @Autowired private SqlService sqlService;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODUxNjIwOQ=="}, "originalCommit": {"oid": "a04079bbb8b9845572461b9c570d003fc0e399ee"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1OTIzNTA2OnYy", "diffSide": "RIGHT", "path": "kernel/kernel-impl/src/main/java/org/sakaiproject/content/impl/persistence/FileConversionServiceRepositoryImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNzowMzo1N1rOH-nTMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNzowMzo1N1rOH-nTMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQxNzY0OQ==", "bodyText": "You don't need to manage the session as that is performed by Spring TX Manager", "url": "https://github.com/sakaiproject/sakai/pull/8637#discussion_r535417649", "createdAt": "2020-12-03T17:03:57Z", "author": {"login": "ern"}, "path": "kernel/kernel-impl/src/main/java/org/sakaiproject/content/impl/persistence/FileConversionServiceRepositoryImpl.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.sakaiproject.content.impl.persistence;\n+\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+import org.hibernate.TransientObjectException;\n+import org.hibernate.criterion.Restrictions;\n+\n+import java.util.List;\n+import javax.annotation.Resource;\n+\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import org.sakaiproject.content.api.persistence.FileConversionQueueItem;\n+import org.sakaiproject.content.api.persistence.FileConversionServiceRepository;\n+\n+import lombok.Setter;\n+\n+public class FileConversionServiceRepositoryImpl implements FileConversionServiceRepository {\n+\n+    @Resource(name = \"org.sakaiproject.springframework.orm.hibernate.GlobalSessionFactory\")\n+    @Setter\n+    private SessionFactory sessionFactory;\n+\n+    @Transactional\n+    public List<FileConversionQueueItem> findByStatus(FileConversionQueueItem.Status status) {\n+\n+        Session session = sessionFactory.getCurrentSession();\n+        List<FileConversionQueueItem> items\n+            = session.createCriteria(FileConversionQueueItem.class)\n+                .add(Restrictions.eq(\"status\", status)).list();\n+        session.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c03ef437699220be39865ff74167243c50eb362a"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1OTIzODY2OnYy", "diffSide": "RIGHT", "path": "kernel/kernel-impl/src/main/java/org/sakaiproject/content/impl/persistence/FileConversionServiceRepositoryImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNzowNDoyOVrOH-nVVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNzowNDoyOVrOH-nVVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQxODE5OQ==", "bodyText": "same here no need to manage the session", "url": "https://github.com/sakaiproject/sakai/pull/8637#discussion_r535418199", "createdAt": "2020-12-03T17:04:29Z", "author": {"login": "ern"}, "path": "kernel/kernel-impl/src/main/java/org/sakaiproject/content/impl/persistence/FileConversionServiceRepositoryImpl.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package org.sakaiproject.content.impl.persistence;\n+\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+import org.hibernate.TransientObjectException;\n+import org.hibernate.criterion.Restrictions;\n+\n+import java.util.List;\n+import javax.annotation.Resource;\n+\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import org.sakaiproject.content.api.persistence.FileConversionQueueItem;\n+import org.sakaiproject.content.api.persistence.FileConversionServiceRepository;\n+\n+import lombok.Setter;\n+\n+public class FileConversionServiceRepositoryImpl implements FileConversionServiceRepository {\n+\n+    @Resource(name = \"org.sakaiproject.springframework.orm.hibernate.GlobalSessionFactory\")\n+    @Setter\n+    private SessionFactory sessionFactory;\n+\n+    @Transactional\n+    public List<FileConversionQueueItem> findByStatus(FileConversionQueueItem.Status status) {\n+\n+        Session session = sessionFactory.getCurrentSession();\n+        List<FileConversionQueueItem> items\n+            = session.createCriteria(FileConversionQueueItem.class)\n+                .add(Restrictions.eq(\"status\", status)).list();\n+        session.close();\n+        return items;\n+    }\n+\n+    @Transactional\n+    public FileConversionQueueItem save(FileConversionQueueItem item) {\n+\n+        Session session = sessionFactory.getCurrentSession();\n+        FileConversionQueueItem mergedItem = null;\n+        try {\n+            mergedItem = (FileConversionQueueItem) session.merge(item);\n+        } catch (TransientObjectException toe) {\n+            session.persist(item);\n+            mergedItem = item;\n+        }\n+        session.flush();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c03ef437699220be39865ff74167243c50eb362a"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM1OTI1MjE2OnYy", "diffSide": "LEFT", "path": "kernel/kernel-impl/src/main/java/org/sakaiproject/content/impl/FileConversionServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNzowNjozNlrOH-ndzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QxNzowNjozNlrOH-ndzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNTQyMDM2Nw==", "bodyText": "I think this should be repository it's how it's done in other places", "url": "https://github.com/sakaiproject/sakai/pull/8637#discussion_r535420367", "createdAt": "2020-12-03T17:06:36Z", "author": {"login": "ern"}, "path": "kernel/kernel-impl/src/main/java/org/sakaiproject/content/impl/FileConversionServiceImpl.java", "diffHunk": "@@ -34,32 +34,30 @@\n import org.sakaiproject.content.api.ContentHostingService;\n import org.sakaiproject.content.api.ContentResource;\n import org.sakaiproject.content.api.FileConversionService;\n-import org.sakaiproject.content.api.repository.FileConversionQueueItemRepository;\n-import org.sakaiproject.content.hbm.FileConversionQueueItem;\n+import org.sakaiproject.content.api.persistence.FileConversionQueueItem;\n+import org.sakaiproject.content.api.persistence.FileConversionServiceRepository;\n import org.sakaiproject.content.impl.converters.LoolFileConverter;\n import org.sakaiproject.entity.api.ResourceProperties;\n import org.sakaiproject.entity.api.ResourcePropertiesEdit;\n import org.sakaiproject.exception.IdUnusedException;\n import org.sakaiproject.exception.PermissionException;\n-import org.springframework.transaction.TransactionStatus;\n-import org.springframework.transaction.annotation.Transactional;\n-import org.springframework.transaction.support.TransactionCallbackWithoutResult;\n-import org.springframework.transaction.support.TransactionTemplate;\n \n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n \n import lombok.Setter;\n import lombok.extern.slf4j.Slf4j;\n \n+import javax.annotation.Resource;\n+\n @Slf4j\n @Setter\n public class FileConversionServiceImpl implements FileConversionService {\n \n     @Autowired private ContentHostingService contentHostingService;\n-    @Autowired private FileConversionQueueItemRepository repository;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c03ef437699220be39865ff74167243c50eb362a"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NDU2ODAwOnYy", "diffSide": "RIGHT", "path": "kernel/kernel-impl/src/main/java/org/sakaiproject/content/impl/persistence/FileConversionServiceRepositoryImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzoxNjoyM1rOIDh2Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzoxNjoyM1rOIDh2Ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU3MTIyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    session.close();", "url": "https://github.com/sakaiproject/sakai/pull/8637#discussion_r540571227", "createdAt": "2020-12-10T23:16:23Z", "author": {"login": "ern"}, "path": "kernel/kernel-impl/src/main/java/org/sakaiproject/content/impl/persistence/FileConversionServiceRepositoryImpl.java", "diffHunk": "@@ -0,0 +1,26 @@\n+package org.sakaiproject.content.impl.persistence;\n+\n+import org.hibernate.Session;\n+import org.hibernate.criterion.Restrictions;\n+\n+import java.util.List;\n+\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import org.sakaiproject.content.api.persistence.FileConversionQueueItem;\n+import org.sakaiproject.content.api.persistence.FileConversionServiceRepository;\n+import org.sakaiproject.springframework.data.SpringCrudRepositoryImpl;\n+\n+public class FileConversionServiceRepositoryImpl extends SpringCrudRepositoryImpl<FileConversionQueueItem, Long>  implements FileConversionServiceRepository {\n+\n+    @Transactional\n+    public List<FileConversionQueueItem> findByStatus(FileConversionQueueItem.Status status) {\n+\n+        Session session = sessionFactory.getCurrentSession();\n+        List<FileConversionQueueItem> items\n+            = session.createCriteria(FileConversionQueueItem.class)\n+                .add(Restrictions.eq(\"status\", status)).list();\n+        session.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fca054ad3d12ef6c63effc43a9bc030f162360de"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2694, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}