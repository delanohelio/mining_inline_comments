{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg0MTQ4MzY4", "number": 8550, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yM1QyMzoxMToyM1rOFpizTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yM1QyMzoxODoyMVrOFpi6Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc5MTA2MTI1OnYy", "diffSide": "LEFT", "path": "assignment/api/src/java/org/sakaiproject/assignment/api/AddAssignmentBullhornHandler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yM1QyMzoxMToyM1rOI8OhcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yNFQxMDoyNzo0M1rOI8ihig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDAyMzQwOQ==", "bodyText": "what's the logic around removing this cache?", "url": "https://github.com/sakaiproject/sakai/pull/8550#discussion_r600023409", "createdAt": "2021-03-23T23:11:23Z", "author": {"login": "ottenhoff"}, "path": "assignment/api/src/java/org/sakaiproject/assignment/api/AddAssignmentBullhornHandler.java", "diffHunk": "@@ -150,8 +146,6 @@ protected void doInTransactionWithoutResult(TransactionStatus status) {\n             }\n         });\n \n-        users.forEach(u -> countCache.remove(u));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b62837eb2ed1a3ddc8b1ec9bdadf5df2522ebab"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDM0OTU3Mw==", "bodyText": "We don't maintain counts server side any longer. The clientside stuff just counts them as they come in.", "url": "https://github.com/sakaiproject/sakai/pull/8550#discussion_r600349573", "createdAt": "2021-03-24T10:25:48Z", "author": {"login": "adrianfish"}, "path": "assignment/api/src/java/org/sakaiproject/assignment/api/AddAssignmentBullhornHandler.java", "diffHunk": "@@ -150,8 +146,6 @@ protected void doInTransactionWithoutResult(TransactionStatus status) {\n             }\n         });\n \n-        users.forEach(u -> countCache.remove(u));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDAyMzQwOQ=="}, "originalCommit": {"oid": "7b62837eb2ed1a3ddc8b1ec9bdadf5df2522ebab"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDM1MTExNA==", "bodyText": "In the entityprovider, there used to be a call just to get the counts - that was what got short polled every 5 seconds. That call is no longer happening, so no cache needed.", "url": "https://github.com/sakaiproject/sakai/pull/8550#discussion_r600351114", "createdAt": "2021-03-24T10:27:43Z", "author": {"login": "adrianfish"}, "path": "assignment/api/src/java/org/sakaiproject/assignment/api/AddAssignmentBullhornHandler.java", "diffHunk": "@@ -150,8 +146,6 @@ protected void doInTransactionWithoutResult(TransactionStatus status) {\n             }\n         });\n \n-        users.forEach(u -> countCache.remove(u));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDAyMzQwOQ=="}, "originalCommit": {"oid": "7b62837eb2ed1a3ddc8b1ec9bdadf5df2522ebab"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc5MTA2NzczOnYy", "diffSide": "RIGHT", "path": "deploy/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yM1QyMzoxNDowOVrOI8Oljg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yM1QyMzoxNDowOVrOI8Oljg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDAyNDQ2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        <version>3.3.9.RELEASE</version>\n          \n          \n            \n                        <version>3.3.15.RELEASE</version>", "url": "https://github.com/sakaiproject/sakai/pull/8550#discussion_r600024462", "createdAt": "2021-03-23T23:14:09Z", "author": {"login": "ottenhoff"}, "path": "deploy/pom.xml", "diffHunk": "@@ -392,6 +392,22 @@\n             <artifactId>spring-webmvc</artifactId>\n             <scope>compile</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.reactivestreams</groupId>\n+            <artifactId>reactive-streams</artifactId>\n+            <version>1.0.3</version>\n+            <scope>compile</scope>\n+        </dependency>\n+        <dependency>\n+            <groupId>io.projectreactor</groupId>\n+            <artifactId>reactor-core</artifactId>\n+            <version>3.3.9.RELEASE</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b62837eb2ed1a3ddc8b1ec9bdadf5df2522ebab"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzc5MTA3ODU5OnYy", "diffSide": "RIGHT", "path": "lessonbuilder/api/src/java/org/sakaiproject/lessonbuildertool/api/AddLessonsCommentBullhornHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yM1QyMzoxODoyMVrOI8Or7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMy0yM1QyMzoxODoyMVrOI8Or7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDYwMDAyNjA5Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (comments.size() > 1) {\n          \n          \n            \n                            if (comments != null && comments.size() > 1) {", "url": "https://github.com/sakaiproject/sakai/pull/8550#discussion_r600026093", "createdAt": "2021-03-23T23:18:21Z", "author": {"login": "ottenhoff"}, "path": "lessonbuilder/api/src/java/org/sakaiproject/lessonbuildertool/api/AddLessonsCommentBullhornHandler.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/**\n+ * Copyright (c) 2003-2017 The Apereo Foundation\n+ *\n+ * Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *             http://opensource.org/licenses/ecl2\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.sakaiproject.lessonbuildertool.api;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Optional;\n+\n+import javax.annotation.Resource;\n+\n+import org.sakaiproject.event.api.Event;\n+import org.sakaiproject.lessonbuildertool.SimplePage;\n+import org.sakaiproject.lessonbuildertool.SimplePageComment;\n+import org.sakaiproject.lessonbuildertool.model.SimplePageToolDao;\n+import org.sakaiproject.messaging.api.BullhornData;\n+import org.sakaiproject.messaging.api.bullhornhandlers.AbstractBullhornHandler;\n+import org.sakaiproject.user.api.User;\n+\n+import org.springframework.stereotype.Component;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+@Component\n+public class AddLessonsCommentBullhornHandler extends AbstractBullhornHandler {\n+\n+    @Resource(name = \"org.sakaiproject.lessonbuildertool.model.SimplePageToolDao\")\n+    private SimplePageToolDao simplePageToolDao;\n+\n+    @Override\n+    public List<String> getHandledEvents() {\n+        return Arrays.asList(LessonBuilderEvents.COMMENT_CREATE);\n+    }\n+\n+    @Override\n+    public Optional<List<BullhornData>> handleEvent(Event e) {\n+\n+        List<BullhornData> bhEvents = new ArrayList<>();\n+\n+        String ref = e.getResource();\n+        String context = e.getContext();\n+        String[] pathParts = ref.split(\"/\");\n+        String from = e.getUserId();\n+\n+        try {\n+            long commentId = Long.parseLong(pathParts[pathParts.length - 1]);\n+            SimplePageComment comment = simplePageToolDao.findCommentById(commentId);\n+\n+            String url = simplePageToolDao.getPageUrl(comment.getPageId());\n+\n+            if (url != null) {\n+                List<String> done = new ArrayList<>();\n+                // Alert tutor types.\n+                List<User> receivers = securityService.unlockUsers(\n+                    SimplePage.PERMISSION_LESSONBUILDER_UPDATE, \"/site/\" + context);\n+                for (User receiver : receivers) {\n+                    String to = receiver.getId();\n+                    if (!to.equals(from)) {\n+                        //doInsert(from, to, event, ref, \"title\", context, e.getEventTime(), url);\n+                        bhEvents.add(new BullhornData(from, to, context, \"title\", url));\n+                        done.add(to);\n+                    }\n+                }\n+\n+                // Get all the comments in the same item\n+                List<SimplePageComment> comments\n+                    = simplePageToolDao.findCommentsOnItems(\n+                        Arrays.asList(new Long[] {comment.getItemId()}));\n+\n+                if (comments.size() > 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b62837eb2ed1a3ddc8b1ec9bdadf5df2522ebab"}, "originalPosition": 84}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2628, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}