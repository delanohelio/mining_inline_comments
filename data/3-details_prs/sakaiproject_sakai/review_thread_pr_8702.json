{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1MDg5Nzg0", "number": 8702, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDowNjoyMVrOEvzFOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxODoxMzowOFrOEv6m3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4NTU1NDUxOnYy", "diffSide": "RIGHT", "path": "kernel/kernel-util/src/test/java/org/sakaiproject/util/comparator/UserSortNameComparatorTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDowNjoyMVrOHk-sGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNDowODo0MlrOHk-0Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUzNzg4MQ==", "bodyText": "avoid naming methods after JIRA issues and instead use a comment\ni.e. fullnameWithSpaces()", "url": "https://github.com/sakaiproject/sakai/pull/8702#discussion_r508537881", "createdAt": "2020-10-20T14:06:21Z", "author": {"login": "ern"}, "path": "kernel/kernel-util/src/test/java/org/sakaiproject/util/comparator/UserSortNameComparatorTest.java", "diffHunk": "@@ -68,4 +68,38 @@ public void underscoreCompare() {\n         assertEquals(-1, comparator.compare(userB, userA));\n         assertEquals(0, comparator.compare(userB, userB));\n     }\n+\n+    @Test\n+    public void namesWithSpacesCompare() {\n+        UserSortNameComparator comparator = new UserSortNameComparator();\n+        User userA = Mockito.mock(User.class);\n+        when(userA.getSortName()).thenReturn(\"Dekfort, Apple\");\n+        User userB = Mockito.mock(User.class);\n+        when(userB.getSortName()).thenReturn(\"Del Fintino, Pear\");\n+        User userC = Mockito.mock(User.class);\n+        when(userC.getSortName()).thenReturn(\"Dekford\", \"Orange\");\n+        User userD = Mockito.mock(User.class);\n+        when(userD.getSortName()).thenReturn(\"De'Leon\", \"Cactus\");\n+        User userE = Mockito.mock(User.class);\n+        when(userE.getSortName()).thenReturn(\"Deleverde\", \"Mango\");\n+\n+        assertEquals(-1, comparator.compare(userA, userB));\n+        assertEquals(1, comparator.compare(userB, userA));\n+        assertEquals(0, comparator.compare(userB, userB));\n+        assertEquals(-1, comparator.compare(userD, userC));\n+        assertEquals(-1, comparator.compare(userD, userE));\n+    }\n+\n+    @Test\n+    public void SAK21743() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4219d9a7641a8b77271ccc0992b821ae860f5d6"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUzOTkxNQ==", "bodyText": "feel free to edit and rename. branch is open to editing.", "url": "https://github.com/sakaiproject/sakai/pull/8702#discussion_r508539915", "createdAt": "2020-10-20T14:08:42Z", "author": {"login": "ottenhoff"}, "path": "kernel/kernel-util/src/test/java/org/sakaiproject/util/comparator/UserSortNameComparatorTest.java", "diffHunk": "@@ -68,4 +68,38 @@ public void underscoreCompare() {\n         assertEquals(-1, comparator.compare(userB, userA));\n         assertEquals(0, comparator.compare(userB, userB));\n     }\n+\n+    @Test\n+    public void namesWithSpacesCompare() {\n+        UserSortNameComparator comparator = new UserSortNameComparator();\n+        User userA = Mockito.mock(User.class);\n+        when(userA.getSortName()).thenReturn(\"Dekfort, Apple\");\n+        User userB = Mockito.mock(User.class);\n+        when(userB.getSortName()).thenReturn(\"Del Fintino, Pear\");\n+        User userC = Mockito.mock(User.class);\n+        when(userC.getSortName()).thenReturn(\"Dekford\", \"Orange\");\n+        User userD = Mockito.mock(User.class);\n+        when(userD.getSortName()).thenReturn(\"De'Leon\", \"Cactus\");\n+        User userE = Mockito.mock(User.class);\n+        when(userE.getSortName()).thenReturn(\"Deleverde\", \"Mango\");\n+\n+        assertEquals(-1, comparator.compare(userA, userB));\n+        assertEquals(1, comparator.compare(userB, userA));\n+        assertEquals(0, comparator.compare(userB, userB));\n+        assertEquals(-1, comparator.compare(userD, userC));\n+        assertEquals(-1, comparator.compare(userD, userE));\n+    }\n+\n+    @Test\n+    public void SAK21743() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODUzNzg4MQ=="}, "originalCommit": {"oid": "f4219d9a7641a8b77271ccc0992b821ae860f5d6"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4Njc4MDQ5OnYy", "diffSide": "RIGHT", "path": "kernel/kernel-util/src/test/java/org/sakaiproject/util/comparator/UserSortNameComparatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxODoxMToyNFrOHlK1Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxODoxMToyNFrOHlK1Zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODczNjg3MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                public void SAK21743() {\n          \n          \n            \n                public void fullnamesWithSpacesCompare() {", "url": "https://github.com/sakaiproject/sakai/pull/8702#discussion_r508736870", "createdAt": "2020-10-20T18:11:24Z", "author": {"login": "ern"}, "path": "kernel/kernel-util/src/test/java/org/sakaiproject/util/comparator/UserSortNameComparatorTest.java", "diffHunk": "@@ -68,4 +68,38 @@ public void underscoreCompare() {\n         assertEquals(-1, comparator.compare(userB, userA));\n         assertEquals(0, comparator.compare(userB, userB));\n     }\n+\n+    @Test\n+    public void namesWithSpacesCompare() {\n+        UserSortNameComparator comparator = new UserSortNameComparator();\n+        User userA = Mockito.mock(User.class);\n+        when(userA.getSortName()).thenReturn(\"Dekfort, Apple\");\n+        User userB = Mockito.mock(User.class);\n+        when(userB.getSortName()).thenReturn(\"Del Fintino, Pear\");\n+        User userC = Mockito.mock(User.class);\n+        when(userC.getSortName()).thenReturn(\"Dekford\", \"Orange\");\n+        User userD = Mockito.mock(User.class);\n+        when(userD.getSortName()).thenReturn(\"De'Leon\", \"Cactus\");\n+        User userE = Mockito.mock(User.class);\n+        when(userE.getSortName()).thenReturn(\"Deleverde\", \"Mango\");\n+\n+        assertEquals(-1, comparator.compare(userA, userB));\n+        assertEquals(1, comparator.compare(userB, userA));\n+        assertEquals(0, comparator.compare(userB, userB));\n+        assertEquals(-1, comparator.compare(userD, userC));\n+        assertEquals(-1, comparator.compare(userD, userE));\n+    }\n+\n+    @Test\n+    public void SAK21743() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f4219d9a7641a8b77271ccc0992b821ae860f5d6"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4Njc4NzQ4OnYy", "diffSide": "RIGHT", "path": "kernel/kernel-util/src/test/java/org/sakaiproject/util/comparator/UserSortNameComparatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxODoxMzowOFrOHlK5vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxODoxMzowOFrOHlK5vg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODczNzk4Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                \t// Given two students, whose lastnames are \"Martinez Torcal\" and \"Martin Troncoso\", the logical alphabetical order \n          \n          \n            \n                \t// is first \"Martin Troncoso\" and after \"Martinez Torcal\", just because the blank space is counted as a character.\n          \n          \n            \n                    // Given two students, whose lastnames are \"Martinez Torcal\" and \"Martin Troncoso\", the logical alphabetical order \n          \n          \n            \n                    // is first \"Martin Troncoso\" and after \"Martinez Torcal\", just because the blank space is counted as a character.", "url": "https://github.com/sakaiproject/sakai/pull/8702#discussion_r508737982", "createdAt": "2020-10-20T18:13:08Z", "author": {"login": "ern"}, "path": "kernel/kernel-util/src/test/java/org/sakaiproject/util/comparator/UserSortNameComparatorTest.java", "diffHunk": "@@ -68,4 +68,38 @@ public void underscoreCompare() {\n         assertEquals(-1, comparator.compare(userB, userA));\n         assertEquals(0, comparator.compare(userB, userB));\n     }\n-}\n\\ No newline at end of file\n+\n+    @Test\n+    public void namesWithSpacesCompare() {\n+        UserSortNameComparator comparator = new UserSortNameComparator();\n+        User userA = Mockito.mock(User.class);\n+        when(userA.getSortName()).thenReturn(\"Dekfort, Apple\");\n+        User userB = Mockito.mock(User.class);\n+        when(userB.getSortName()).thenReturn(\"Del Fintino, Pear\");\n+        User userC = Mockito.mock(User.class);\n+        when(userC.getSortName()).thenReturn(\"Dekford\", \"Orange\");\n+        User userD = Mockito.mock(User.class);\n+        when(userD.getSortName()).thenReturn(\"De'Leon\", \"Cactus\");\n+        User userE = Mockito.mock(User.class);\n+        when(userE.getSortName()).thenReturn(\"Deleverde\", \"Mango\");\n+\n+        assertEquals(-1, comparator.compare(userA, userB));\n+        assertEquals(1, comparator.compare(userB, userA));\n+        assertEquals(0, comparator.compare(userB, userB));\n+        assertEquals(-1, comparator.compare(userD, userC));\n+        assertEquals(-1, comparator.compare(userD, userE));\n+    }\n+\n+    @Test\n+    public void fullnamesWithSpacesCompare() {\n+    \t// Given two students, whose lastnames are \"Martinez Torcal\" and \"Martin Troncoso\", the logical alphabetical order \n+    \t// is first \"Martin Troncoso\" and after \"Martinez Torcal\", just because the blank space is counted as a character.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7eb677b406b08535a68a4491f1465e4d38de1d9"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2601, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}