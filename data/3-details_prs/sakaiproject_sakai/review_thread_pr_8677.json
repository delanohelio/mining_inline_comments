{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAwODg2MjU2", "number": 8677, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDozODoxNlrOEsqP2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzowODozOFrOEstpOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjY0OTg1OnYy", "diffSide": "RIGHT", "path": "providers/component/src/webapp/WEB-INF/unboundid-ldap.xml", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNDozODoxNlrOHgBgCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMTo1MDozNlrOHgSokA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM0MTA2Nw==", "bodyText": "this looks good. can you be more definitive with this sentence (\"may not\")? what happens if this is unset?", "url": "https://github.com/sakaiproject/sakai/pull/8677#discussion_r503341067", "createdAt": "2020-10-12T14:38:16Z", "author": {"login": "ottenhoff"}, "path": "providers/component/src/webapp/WEB-INF/unboundid-ldap.xml", "diffHunk": "@@ -144,6 +144,30 @@\n \t\t\t<value>false</value>\n \t\t</property -->\n \n+\t\t<!-- Specifies the length of time in milliseconds between periodic background\n+\t\t\thealth checks against the available connections in this pool.\n+\t\t\tRequires healthCheckMappings's invokeForBackgroundChecks to be set to true\n+\t\t\tDefaults to 60000L -->\n+\t\t<!-- property name=\"healthCheckIntervalMillis\">\n+\t\t\t<value>60000</value>\n+\t\t</property -->\n+\n+\t\t<!-- Provides mapping to create an LDAP connection pool health check implementation\n+\t\t\tthat may be used to check the health of the associated server by verifying that\n+\t\t\ta specified entry can be retrieved in an acceptable period of time\n+\t\t\tDefaults to null (invokes the Unboundid defaut implementation, which may not do any checks) -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea9827a4b2b94b489cdd286568ca2bab12fba592"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYyMTc3Ng==", "bodyText": "done.  I rechecked the LDAPConnectionPoolHealthCheck class in UnboundId's 4.0.12 source code and the default health check methods mostly do:\n// No processing is performed in this default implementation.\nand the only method that does something, ensureConnectionValidAfterException(), only throws an error if the connection is bad.", "url": "https://github.com/sakaiproject/sakai/pull/8677#discussion_r503621776", "createdAt": "2020-10-13T01:50:36Z", "author": {"login": "austin48"}, "path": "providers/component/src/webapp/WEB-INF/unboundid-ldap.xml", "diffHunk": "@@ -144,6 +144,30 @@\n \t\t\t<value>false</value>\n \t\t</property -->\n \n+\t\t<!-- Specifies the length of time in milliseconds between periodic background\n+\t\t\thealth checks against the available connections in this pool.\n+\t\t\tRequires healthCheckMappings's invokeForBackgroundChecks to be set to true\n+\t\t\tDefaults to 60000L -->\n+\t\t<!-- property name=\"healthCheckIntervalMillis\">\n+\t\t\t<value>60000</value>\n+\t\t</property -->\n+\n+\t\t<!-- Provides mapping to create an LDAP connection pool health check implementation\n+\t\t\tthat may be used to check the health of the associated server by verifying that\n+\t\t\ta specified entry can be retrieved in an acceptable period of time\n+\t\t\tDefaults to null (invokes the Unboundid defaut implementation, which may not do any checks) -->", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzM0MTA2Nw=="}, "originalCommit": {"oid": "ea9827a4b2b94b489cdd286568ca2bab12fba592"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MzIwNjMyOnYy", "diffSide": "RIGHT", "path": "providers/unboundid/src/java/org/sakaiproject/unboundid/UnboundidDirectoryProvider.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxNzowODozOFrOHgGwFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xM1QwMTo1MTowNFrOHgSpBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyNzA5Mw==", "bodyText": "please remove the useless javadoc\nYou could also use @getter and @Setter to remove this boiler plate all together", "url": "https://github.com/sakaiproject/sakai/pull/8677#discussion_r503427093", "createdAt": "2020-10-12T17:08:38Z", "author": {"login": "ern"}, "path": "providers/unboundid/src/java/org/sakaiproject/unboundid/UnboundidDirectoryProvider.java", "diffHunk": "@@ -1219,6 +1239,36 @@ public void setRetryFailedOperationsDueToInvalidConnections(boolean retryFailedO\n \t\tthis.retryFailedOperationsDueToInvalidConnections = retryFailedOperationsDueToInvalidConnections;\n \t}\n \n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\tpublic long getHealthCheckIntervalMillis() {\n+\t\treturn healthCheckIntervalMillis;\n+\t}\n+\n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\tpublic void setHealthCheckIntervalMillis(long healthCheckIntervalMillis) {\n+\t\tthis.healthCheckIntervalMillis = healthCheckIntervalMillis;\n+\t}\n+\n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\tpublic Map<String, String> getHealthCheckMappings()\n+\t{\n+\t\treturn healthCheckMappings;\n+\t}\n+\n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\tpublic void setHealthCheckMappings(Map<String, String> healthCheckMappings)\n+\t{\n+\t\tthis.healthCheckMappings = healthCheckMappings;\n+\t}\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea9827a4b2b94b489cdd286568ca2bab12fba592"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzYyMTg5Mg==", "bodyText": "done.  javadoc is removed", "url": "https://github.com/sakaiproject/sakai/pull/8677#discussion_r503621892", "createdAt": "2020-10-13T01:51:04Z", "author": {"login": "austin48"}, "path": "providers/unboundid/src/java/org/sakaiproject/unboundid/UnboundidDirectoryProvider.java", "diffHunk": "@@ -1219,6 +1239,36 @@ public void setRetryFailedOperationsDueToInvalidConnections(boolean retryFailedO\n \t\tthis.retryFailedOperationsDueToInvalidConnections = retryFailedOperationsDueToInvalidConnections;\n \t}\n \n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\tpublic long getHealthCheckIntervalMillis() {\n+\t\treturn healthCheckIntervalMillis;\n+\t}\n+\n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\tpublic void setHealthCheckIntervalMillis(long healthCheckIntervalMillis) {\n+\t\tthis.healthCheckIntervalMillis = healthCheckIntervalMillis;\n+\t}\n+\n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\tpublic Map<String, String> getHealthCheckMappings()\n+\t{\n+\t\treturn healthCheckMappings;\n+\t}\n+\n+\t/**\n+\t * {@inheritDoc}\n+\t */\n+\tpublic void setHealthCheckMappings(Map<String, String> healthCheckMappings)\n+\t{\n+\t\tthis.healthCheckMappings = healthCheckMappings;\n+\t}\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzQyNzA5Mw=="}, "originalCommit": {"oid": "ea9827a4b2b94b489cdd286568ca2bab12fba592"}, "originalPosition": 81}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2585, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}