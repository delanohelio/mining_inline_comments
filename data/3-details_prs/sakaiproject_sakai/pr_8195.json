{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA5ODI3ODQz", "number": 8195, "title": "SAK-43541 Add optional converter for attachments", "bodyText": "https://jira.sakaiproject.org/browse/SAK-43541", "createdAt": "2020-04-28T01:17:14Z", "url": "https://github.com/sakaiproject/sakai/pull/8195", "merged": true, "mergeCommit": {"oid": "2d76e3f5e9182dd950eb9c7578d89d4e80d1306e"}, "closed": true, "closedAt": "2020-06-01T14:14:24Z", "author": {"login": "adrianfish"}, "timelineItems": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABccDwSOgBqjMyODAyNzc5MTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnA2T3gFqTQyMTg3NDM0Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b9420c3b6f5b31429cd872dd17679a548983ad0d", "author": {"user": {"login": "adrianfish", "name": "Adrian Fish"}}, "url": "https://github.com/sakaiproject/sakai/commit/b9420c3b6f5b31429cd872dd17679a548983ad0d", "committedDate": "2020-04-27T19:17:03Z", "message": "SAK-43541 Add optional converter for attachments\n\nhttps://jira.sakaiproject.org/browse/SAK-43541"}, "afterCommit": {"oid": "bc9dd0ec421b517b79a061a9915112b2fb58341e", "author": {"user": {"login": "adrianfish", "name": "Adrian Fish"}}, "url": "https://github.com/sakaiproject/sakai/commit/bc9dd0ec421b517b79a061a9915112b2fb58341e", "committedDate": "2020-04-28T13:18:00Z", "message": "SAK-43541 Add optional converter for attachments\n\nhttps://jira.sakaiproject.org/browse/SAK-43541"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMTI1MDMz", "url": "https://github.com/sakaiproject/sakai/pull/8195#pullrequestreview-410125033", "createdAt": "2020-05-12T14:52:23Z", "commit": {"oid": "bc9dd0ec421b517b79a061a9915112b2fb58341e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDo1MjoyM1rOGUKl1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDo1MjoyM1rOGUKl1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzc5ODIzMA==", "bodyText": "Maybe an index on REFERENCE?", "url": "https://github.com/sakaiproject/sakai/pull/8195#discussion_r423798230", "createdAt": "2020-05-12T14:52:23Z", "author": {"login": "ern"}, "path": "kernel/api/src/main/java/org/sakaiproject/content/hbm/FileConversionQueueItem.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**********************************************************************************\n+ * $URL$\n+ * $Id$\n+ ***********************************************************************************\n+ *\n+ * Copyright (c) 2004, 2005, 2006, 2008 Sakai Foundation\n+ *\n+ * Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.opensource.org/licenses/ECL-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ **********************************************************************************/\n+\n+package org.sakaiproject.content.hbm;\n+\n+import javax.persistence.Cacheable;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Index;\n+import javax.persistence.Table;\n+\n+import java.time.Instant;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+import org.hibernate.annotations.Type;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+@Entity\n+@Table(name = \"FILE_CONVERSION_QUEUE\", indexes = {\n+    @Index(name = \"IDX_FCI_REF_TYPE\", columnList = \"REFERENCE\")\n+  }\n+)\n+@Cacheable\n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@Getter\n+@Setter\n+@ToString\n+public class FileConversionQueueItem {\n+\n+  @Id\n+  @Column(name = \"ID\")\n+  @GeneratedValue\n+  private Long id;\n+\n+  @Column(name = \"REFERENCE\", length = 255)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc9dd0ec421b517b79a061a9915112b2fb58341e"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMTMyODMz", "url": "https://github.com/sakaiproject/sakai/pull/8195#pullrequestreview-410132833", "createdAt": "2020-05-12T14:59:47Z", "commit": {"oid": "bc9dd0ec421b517b79a061a9915112b2fb58341e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDo1OTo0N1rOGUK9Ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNDo1OTo0N1rOGUK9Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwNDIxNA==", "bodyText": "log.warn(\"Could not access properties for resource {}, {}\", resourceId, e.toString())\nmessage vs e.printStackTrace", "url": "https://github.com/sakaiproject/sakai/pull/8195#discussion_r423804214", "createdAt": "2020-05-12T14:59:47Z", "author": {"login": "ern"}, "path": "assignment/tool/src/java/org/sakaiproject/assignment/entityproviders/AssignmentEntityProvider.java", "diffHunk": "@@ -1294,6 +1295,34 @@ public SimpleSubmission(AssignmentSubmission as, boolean anonymousGrading) {\n                     this.late = dateSubmitted.compareTo(as.getAssignment().getDueDate()) > 0;\n                 }\n                 this.submittedAttachments = as.getAttachments();\n+\n+                SecurityAdvisor securityAdvisor = (String userId, String function, String reference) -> {\n+\n+                    if (ContentHostingService.AUTH_RESOURCE_READ.equals(function)) {\n+                        return SecurityAdvisor.SecurityAdvice.ALLOWED;\n+                    } else {\n+                        return SecurityAdvisor.SecurityAdvice.NOT_ALLOWED;\n+                    }\n+                };\n+\n+                try {\n+                    securityService.pushAdvisor(securityAdvisor);\n+                    this.submittedAttachments.forEach(ref -> {\n+\n+                        try {\n+                            ResourceProperties props = contentHostingService.getProperties(ref.replaceFirst(\"\\\\/content\", \"\"));\n+                            String previewId = props.getProperty(ContentHostingService.PREVIEW);\n+                            System.out.println(previewId);\n+                            if (StringUtils.isNotEmpty(previewId)) {\n+                                previewableAttachments.put(ref, contentHostingService.getResource(previewId).getReference());\n+                            }\n+                        } catch (Exception e) {\n+                            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc9dd0ec421b517b79a061a9915112b2fb58341e"}, "originalPosition": 34}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwMTMzMjIx", "url": "https://github.com/sakaiproject/sakai/pull/8195#pullrequestreview-410133221", "createdAt": "2020-05-12T15:00:09Z", "commit": {"oid": "bc9dd0ec421b517b79a061a9915112b2fb58341e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNTowMDowOVrOGUK-fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNTowMDowOVrOGUK-fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzgwNDU0Mw==", "bodyText": ":( securityAdivisor", "url": "https://github.com/sakaiproject/sakai/pull/8195#discussion_r423804543", "createdAt": "2020-05-12T15:00:09Z", "author": {"login": "ern"}, "path": "assignment/tool/src/java/org/sakaiproject/assignment/entityproviders/AssignmentEntityProvider.java", "diffHunk": "@@ -1294,6 +1295,34 @@ public SimpleSubmission(AssignmentSubmission as, boolean anonymousGrading) {\n                     this.late = dateSubmitted.compareTo(as.getAssignment().getDueDate()) > 0;\n                 }\n                 this.submittedAttachments = as.getAttachments();\n+\n+                SecurityAdvisor securityAdvisor = (String userId, String function, String reference) -> {\n+\n+                    if (ContentHostingService.AUTH_RESOURCE_READ.equals(function)) {\n+                        return SecurityAdvisor.SecurityAdvice.ALLOWED;\n+                    } else {\n+                        return SecurityAdvisor.SecurityAdvice.NOT_ALLOWED;\n+                    }\n+                };\n+\n+                try {\n+                    securityService.pushAdvisor(securityAdvisor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc9dd0ec421b517b79a061a9915112b2fb58341e"}, "originalPosition": 23}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bc9dd0ec421b517b79a061a9915112b2fb58341e", "author": {"user": {"login": "adrianfish", "name": "Adrian Fish"}}, "url": "https://github.com/sakaiproject/sakai/commit/bc9dd0ec421b517b79a061a9915112b2fb58341e", "committedDate": "2020-04-28T13:18:00Z", "message": "SAK-43541 Add optional converter for attachments\n\nhttps://jira.sakaiproject.org/browse/SAK-43541"}, "afterCommit": {"oid": "26b6a647fe57cf66ea263c98ad7ba159559faf90", "author": {"user": {"login": "adrianfish", "name": "Adrian Fish"}}, "url": "https://github.com/sakaiproject/sakai/commit/26b6a647fe57cf66ea263c98ad7ba159559faf90", "committedDate": "2020-05-14T18:26:32Z", "message": "SAK-43541 Add optional converter for attachments\n\nhttps://jira.sakaiproject.org/browse/SAK-43541"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "26b6a647fe57cf66ea263c98ad7ba159559faf90", "author": {"user": {"login": "adrianfish", "name": "Adrian Fish"}}, "url": "https://github.com/sakaiproject/sakai/commit/26b6a647fe57cf66ea263c98ad7ba159559faf90", "committedDate": "2020-05-14T18:26:32Z", "message": "SAK-43541 Add optional converter for attachments\n\nhttps://jira.sakaiproject.org/browse/SAK-43541"}, "afterCommit": {"oid": "450c1887e773276b44e93042f8ba4c1173fe61ba", "author": {"user": {"login": "adrianfish", "name": "Adrian Fish"}}, "url": "https://github.com/sakaiproject/sakai/commit/450c1887e773276b44e93042f8ba4c1173fe61ba", "committedDate": "2020-05-14T19:07:09Z", "message": "SAK-43541 Add optional converter for attachments\n\nhttps://jira.sakaiproject.org/browse/SAK-43541"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNzg3MzIw", "url": "https://github.com/sakaiproject/sakai/pull/8195#pullrequestreview-412787320", "createdAt": "2020-05-15T16:17:34Z", "commit": {"oid": "450c1887e773276b44e93042f8ba4c1173fe61ba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNjoxNzozNFrOGWLXmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNjoxNzozNFrOGWLXmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkwODEyMQ==", "bodyText": "prefer use an integer enum as it is less storage on the db side than a string", "url": "https://github.com/sakaiproject/sakai/pull/8195#discussion_r425908121", "createdAt": "2020-05-15T16:17:34Z", "author": {"login": "ern"}, "path": "kernel/api/src/main/java/org/sakaiproject/content/api/FileConversionService.java", "diffHunk": "@@ -0,0 +1,15 @@\n+package org.sakaiproject.content.api;\n+\n+public interface FileConversionService {\n+\n+    enum FileConversionStatus { DISABLED, NOT_STARTED, IN_PROGRESS, COMPLETED, UNKNOWN };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "450c1887e773276b44e93042f8ba4c1173fe61ba"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNzg3NTMy", "url": "https://github.com/sakaiproject/sakai/pull/8195#pullrequestreview-412787532", "createdAt": "2020-05-15T16:17:52Z", "commit": {"oid": "450c1887e773276b44e93042f8ba4c1173fe61ba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNjoxNzo1MlrOGWLYKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNjoxNzo1MlrOGWLYKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkwODI2NQ==", "bodyText": "use integer enum", "url": "https://github.com/sakaiproject/sakai/pull/8195#discussion_r425908265", "createdAt": "2020-05-15T16:17:52Z", "author": {"login": "ern"}, "path": "kernel/api/src/main/java/org/sakaiproject/content/hbm/FileConversionQueueItem.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/**********************************************************************************\n+ * $URL$\n+ * $Id$\n+ ***********************************************************************************\n+ *\n+ * Copyright (c) 2004, 2005, 2006, 2008 Sakai Foundation\n+ *\n+ * Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.opensource.org/licenses/ECL-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ **********************************************************************************/\n+\n+package org.sakaiproject.content.hbm;\n+\n+import javax.persistence.Cacheable;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.Id;\n+import javax.persistence.Index;\n+import javax.persistence.Table;\n+\n+import java.time.Instant;\n+\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n+import org.hibernate.annotations.Type;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import lombok.ToString;\n+\n+@Entity\n+@Table(name = \"FILE_CONVERSION_QUEUE\", indexes = {\n+    @Index(name = \"IDX_FCI_REF_TYPE\", columnList = \"REFERENCE\")\n+  }\n+)\n+@Cacheable\n+@Cache(usage = CacheConcurrencyStrategy.NONSTRICT_READ_WRITE)\n+@Getter\n+@Setter\n+@ToString\n+public class FileConversionQueueItem {\n+\n+  @Id\n+  @Column(name = \"ID\")\n+  @GeneratedValue\n+  private Long id;\n+\n+  @Column(name = \"REFERENCE\", length = 255)\n+  private String reference;\n+\n+  @Column(name = \"STATUS\", length = 16)\n+  private String status;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "450c1887e773276b44e93042f8ba4c1173fe61ba"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNzg4MjA4", "url": "https://github.com/sakaiproject/sakai/pull/8195#pullrequestreview-412788208", "createdAt": "2020-05-15T16:18:45Z", "commit": {"oid": "450c1887e773276b44e93042f8ba4c1173fe61ba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNjoxODo0NVrOGWLaJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNjoxODo0NVrOGWLaJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkwODc3Mw==", "bodyText": "query shouldn't be in the service create a Repository (aka DAO)", "url": "https://github.com/sakaiproject/sakai/pull/8195#discussion_r425908773", "createdAt": "2020-05-15T16:18:45Z", "author": {"login": "ern"}, "path": "kernel/kernel-impl/src/main/java/org/sakaiproject/content/impl/FileConversionServiceImpl.java", "diffHunk": "@@ -0,0 +1,298 @@\n+package org.sakaiproject.content.impl;\n+\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Instant;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.springframework.transaction.PlatformTransactionManager;\n+import org.springframework.transaction.TransactionStatus;\n+import org.springframework.transaction.support.TransactionCallbackWithoutResult;\n+import org.springframework.transaction.support.TransactionTemplate;\n+\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.mime.HttpMultipartMode;\n+import org.apache.http.entity.mime.MultipartEntityBuilder;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.util.EntityUtils;\n+\n+import org.hibernate.criterion.Restrictions;\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+\n+import org.sakaiproject.authz.api.SecurityAdvisor;\n+import org.sakaiproject.authz.api.SecurityService;\n+import org.sakaiproject.component.api.ServerConfigurationService;\n+import org.sakaiproject.content.api.ContentHostingService;\n+import org.sakaiproject.content.api.ContentResource;\n+import org.sakaiproject.content.api.FileConversionService;\n+import org.sakaiproject.content.hbm.FileConversionQueueItem;\n+import org.sakaiproject.entity.api.ResourceProperties;\n+import org.sakaiproject.entity.api.ResourcePropertiesEdit;\n+import org.sakaiproject.exception.IdUnusedException;\n+import org.sakaiproject.exception.PermissionException;\n+\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class FileConversionServiceImpl implements FileConversionService {\n+\n+  private String converterBaseUrl;\n+  private boolean enabled;\n+  private List<String> fromTypes;\n+  private int pause;\n+  private int queueIntervalMinutes;\n+  private ExecutorService workers;\n+  private ScheduledExecutorService master;\n+\n+  @Setter\n+  private ContentHostingService contentHostingService;\n+\n+  @Setter\n+  private PlatformTransactionManager transactionManager;\n+\n+  @Setter\n+  private SecurityService securityService;\n+\n+  @Setter\n+  private ServerConfigurationService serverConfigurationService;\n+\n+  @Setter\n+  private SessionFactory sessionFactory;\n+\n+  private TransactionTemplate transactionTemplate;\n+\n+  public void init() {\n+\n+    transactionTemplate = new TransactionTemplate(transactionManager);\n+\n+    enabled = serverConfigurationService.getBoolean(\"fileconversion.enabled\", false);\n+\n+    if (enabled) {\n+      fromTypes = serverConfigurationService.getStringList(\"fileconversion.fromtypes\",\n+        Arrays.asList(ContentHostingService.DOCX_MIMETYPE\n+                        , ContentHostingService.DOC_MIMETYPE\n+                        , ContentHostingService.ODT_MIMETYPE\n+                        , ContentHostingService.ODP_MIMETYPE\n+                        , ContentHostingService.PPT_MIMETYPE\n+                        , ContentHostingService.PPTX_MIMETYPE));\n+      converterBaseUrl = serverConfigurationService.getString(\"fileconversion.converterurl\", \"http://localhost:9980\");\n+\n+      workers = Executors.newFixedThreadPool(serverConfigurationService.getInt(\"fileconversion.workerthreads\", 20));\n+      master = Executors.newScheduledThreadPool(1);\n+      queueIntervalMinutes = serverConfigurationService.getInt(\"fileconversion.queueintervalminutes\", 1);\n+      pause = serverConfigurationService.getInt(\"fileconversion.pausemillis\", 1000);\n+    }\n+  }\n+\n+  public void startIfEnabled() {\n+\n+    log.debug(\"startIfEnabled()\");\n+\n+    if (!enabled) {\n+        log.debug(\"Not enabled in Sakai properties. Not starting.\");\n+        return;\n+    }\n+\n+    SecurityAdvisor securityAdvisor = (String userId, String function, String reference) -> {\n+\n+      if (ContentHostingService.AUTH_RESOURCE_READ.equals(function)\n+        || ContentHostingService.AUTH_RESOURCE_ADD.equals(function)\n+        || ContentHostingService.AUTH_RESOURCE_WRITE_ANY.equals(function)) {\n+        return SecurityAdvisor.SecurityAdvice.ALLOWED;\n+      } else {\n+        return SecurityAdvisor.SecurityAdvice.NOT_ALLOWED;\n+      }\n+    };\n+\n+    master.scheduleWithFixedDelay(() -> {\n+\n+      log.debug(\"scheduling ...\");\n+\n+      // Read a record from the queue table and create a worker to handle it\n+      Session session = sessionFactory.openSession();\n+      List<FileConversionQueueItem> items\n+        = session.createCriteria(FileConversionQueueItem.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "450c1887e773276b44e93042f8ba4c1173fe61ba"}, "originalPosition": 126}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEyNzg4NDky", "url": "https://github.com/sakaiproject/sakai/pull/8195#pullrequestreview-412788492", "createdAt": "2020-05-15T16:19:10Z", "commit": {"oid": "450c1887e773276b44e93042f8ba4c1173fe61ba"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNjoxOToxMFrOGWLbEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNVQxNjoxOToxMFrOGWLbEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTkwOTAxMA==", "bodyText": "should just use the enum", "url": "https://github.com/sakaiproject/sakai/pull/8195#discussion_r425909010", "createdAt": "2020-05-15T16:19:10Z", "author": {"login": "ern"}, "path": "kernel/kernel-impl/src/main/java/org/sakaiproject/content/impl/FileConversionServiceImpl.java", "diffHunk": "@@ -0,0 +1,298 @@\n+package org.sakaiproject.content.impl;\n+\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.time.Instant;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+import org.springframework.transaction.PlatformTransactionManager;\n+import org.springframework.transaction.TransactionStatus;\n+import org.springframework.transaction.support.TransactionCallbackWithoutResult;\n+import org.springframework.transaction.support.TransactionTemplate;\n+\n+import org.apache.http.HttpEntity;\n+import org.apache.http.client.config.RequestConfig;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPost;\n+import org.apache.http.entity.ContentType;\n+import org.apache.http.entity.mime.HttpMultipartMode;\n+import org.apache.http.entity.mime.MultipartEntityBuilder;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClientBuilder;\n+import org.apache.http.util.EntityUtils;\n+\n+import org.hibernate.criterion.Restrictions;\n+import org.hibernate.Session;\n+import org.hibernate.SessionFactory;\n+\n+import org.sakaiproject.authz.api.SecurityAdvisor;\n+import org.sakaiproject.authz.api.SecurityService;\n+import org.sakaiproject.component.api.ServerConfigurationService;\n+import org.sakaiproject.content.api.ContentHostingService;\n+import org.sakaiproject.content.api.ContentResource;\n+import org.sakaiproject.content.api.FileConversionService;\n+import org.sakaiproject.content.hbm.FileConversionQueueItem;\n+import org.sakaiproject.entity.api.ResourceProperties;\n+import org.sakaiproject.entity.api.ResourcePropertiesEdit;\n+import org.sakaiproject.exception.IdUnusedException;\n+import org.sakaiproject.exception.PermissionException;\n+\n+import lombok.Setter;\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Slf4j\n+public class FileConversionServiceImpl implements FileConversionService {\n+\n+  private String converterBaseUrl;\n+  private boolean enabled;\n+  private List<String> fromTypes;\n+  private int pause;\n+  private int queueIntervalMinutes;\n+  private ExecutorService workers;\n+  private ScheduledExecutorService master;\n+\n+  @Setter\n+  private ContentHostingService contentHostingService;\n+\n+  @Setter\n+  private PlatformTransactionManager transactionManager;\n+\n+  @Setter\n+  private SecurityService securityService;\n+\n+  @Setter\n+  private ServerConfigurationService serverConfigurationService;\n+\n+  @Setter\n+  private SessionFactory sessionFactory;\n+\n+  private TransactionTemplate transactionTemplate;\n+\n+  public void init() {\n+\n+    transactionTemplate = new TransactionTemplate(transactionManager);\n+\n+    enabled = serverConfigurationService.getBoolean(\"fileconversion.enabled\", false);\n+\n+    if (enabled) {\n+      fromTypes = serverConfigurationService.getStringList(\"fileconversion.fromtypes\",\n+        Arrays.asList(ContentHostingService.DOCX_MIMETYPE\n+                        , ContentHostingService.DOC_MIMETYPE\n+                        , ContentHostingService.ODT_MIMETYPE\n+                        , ContentHostingService.ODP_MIMETYPE\n+                        , ContentHostingService.PPT_MIMETYPE\n+                        , ContentHostingService.PPTX_MIMETYPE));\n+      converterBaseUrl = serverConfigurationService.getString(\"fileconversion.converterurl\", \"http://localhost:9980\");\n+\n+      workers = Executors.newFixedThreadPool(serverConfigurationService.getInt(\"fileconversion.workerthreads\", 20));\n+      master = Executors.newScheduledThreadPool(1);\n+      queueIntervalMinutes = serverConfigurationService.getInt(\"fileconversion.queueintervalminutes\", 1);\n+      pause = serverConfigurationService.getInt(\"fileconversion.pausemillis\", 1000);\n+    }\n+  }\n+\n+  public void startIfEnabled() {\n+\n+    log.debug(\"startIfEnabled()\");\n+\n+    if (!enabled) {\n+        log.debug(\"Not enabled in Sakai properties. Not starting.\");\n+        return;\n+    }\n+\n+    SecurityAdvisor securityAdvisor = (String userId, String function, String reference) -> {\n+\n+      if (ContentHostingService.AUTH_RESOURCE_READ.equals(function)\n+        || ContentHostingService.AUTH_RESOURCE_ADD.equals(function)\n+        || ContentHostingService.AUTH_RESOURCE_WRITE_ANY.equals(function)) {\n+        return SecurityAdvisor.SecurityAdvice.ALLOWED;\n+      } else {\n+        return SecurityAdvisor.SecurityAdvice.NOT_ALLOWED;\n+      }\n+    };\n+\n+    master.scheduleWithFixedDelay(() -> {\n+\n+      log.debug(\"scheduling ...\");\n+\n+      // Read a record from the queue table and create a worker to handle it\n+      Session session = sessionFactory.openSession();\n+      List<FileConversionQueueItem> items\n+        = session.createCriteria(FileConversionQueueItem.class)\n+          .add(Restrictions.eq(\"status\", FileConversionStatus.NOT_STARTED.name())).list();\n+      session.close();\n+\n+      log.debug(\"Number of unstarted conversion items: {}\", items.size());\n+\n+      securityService.pushAdvisor(securityAdvisor);\n+\n+      try {\n+        items.forEach(item -> {\n+\n+          final String ref = item.getReference();\n+\n+          log.debug(\"Converting ref {} ...\", ref);\n+\n+          try {\n+            final ContentResource source = contentHostingService.getResource(ref);\n+\n+            workers.submit(() -> {\n+\n+              log.debug(\"Setting item with ref {} to IN_PROGRESS ...\", ref);\n+              item.setStatus(FileConversionStatus.IN_PROGRESS.name());\n+              item.setAttempts(item.getAttempts() + 1);\n+              item.setLastAttemptStarted(Instant.now());\n+\n+              FileConversionQueueItem inProgressItem = transactionTemplate.execute(status -> {\n+                return (FileConversionQueueItem) sessionFactory.getCurrentSession().merge(item);\n+              });\n+\n+              try {\n+                String sourceFileName = ref.substring(ref.lastIndexOf(\"/\") + 1);\n+                log.debug(\"Source Filename: {}\", sourceFileName);\n+                String convertedFileName = \"\";\n+                if (sourceFileName.contains(\".\")) {\n+                  convertedFileName = sourceFileName.split(\"\\\\.\")[0] + \".pdf\";\n+                } else {\n+                  convertedFileName = sourceFileName + \".pdf\";\n+                }\n+\n+                int timeoutMillis = 5000;\n+                RequestConfig config = RequestConfig.custom()\n+                  .setConnectTimeout(timeoutMillis)\n+                  .setConnectionRequestTimeout(timeoutMillis)\n+                  .setSocketTimeout(timeoutMillis * 1000).build();\n+                CloseableHttpClient client = HttpClientBuilder.create().setDefaultRequestConfig(config).build();\n+\n+                HttpPost httpPost = new HttpPost(converterBaseUrl + \"/lool/convert-to/pdf\");\n+\n+                HttpEntity multipart = MultipartEntityBuilder.create()\n+                  .setMode(HttpMultipartMode.BROWSER_COMPATIBLE)\n+                  .addBinaryBody(\"data\", source.streamContent(), ContentType.MULTIPART_FORM_DATA, URLEncoder.encode(convertedFileName, StandardCharsets.UTF_8.toString()))\n+                  .build();\n+\n+                httpPost.setEntity(multipart);\n+                CloseableHttpResponse response = client.execute(httpPost);\n+                byte[] convertedFileBytes = EntityUtils.toByteArray(response.getEntity());\n+                client.close();\n+\n+                String previewId = ref.substring(0, ref.lastIndexOf(\"/\")) + convertedFileName;\n+\n+                log.debug(\"Converted file id: {}\", previewId);\n+                ResourcePropertiesEdit properties = contentHostingService.newResourceProperties();\n+                properties.addProperty(ResourceProperties.PROP_DISPLAY_NAME, convertedFileName);\n+\n+                securityService.pushAdvisor(securityAdvisor);\n+                ContentResource previewResource\n+                    = contentHostingService.addAttachmentResource(convertedFileName, \"application/pdf\", convertedFileBytes, properties);\n+\n+                contentHostingService.addProperty(ref, ContentHostingService.PREVIEW, previewResource.getId());\n+\n+                log.debug(\"Deleting item with ref {}. It's been successfully converted.\", ref);\n+                transactionTemplate.execute(new TransactionCallbackWithoutResult() {\n+\n+                  public void doInTransactionWithoutResult(TransactionStatus status) {\n+                    FileConversionQueueItem di = (FileConversionQueueItem) sessionFactory.getCurrentSession().merge(inProgressItem);\n+                    sessionFactory.getCurrentSession().delete(di);\n+                  }\n+                });\n+              } catch (Exception e) {\n+                item.setStatus(FileConversionStatus.NOT_STARTED.name());\n+                transactionTemplate.execute(new TransactionCallbackWithoutResult() {\n+\n+                  public void doInTransactionWithoutResult(TransactionStatus status) {\n+                    sessionFactory.getCurrentSession().merge(item);\n+                  }\n+                });\n+                log.error(\"Call to conversion service failed\", e);\n+              } finally {\n+                securityService.popAdvisor(securityAdvisor);\n+              }\n+            });\n+          } catch (IdUnusedException iue) {\n+            log.error(\"No resource found for ref {}\", ref);\n+          } catch (PermissionException pe) {\n+            log.error(\"No permissions to get the resource or its properties. Resource: {}\", ref, pe);\n+          } catch (Exception e) {\n+            log.error(\"Failed to convert resource for ref {}\", ref, e);\n+          }\n+          try {\n+            Thread.sleep(pause);\n+          } catch (Exception se) {\n+          }\n+        });\n+      } finally {\n+        securityService.popAdvisor(securityAdvisor);\n+      }\n+    }, 0, queueIntervalMinutes, TimeUnit.MINUTES);\n+  }\n+\n+  public void destroy() {\n+\n+    workers.shutdownNow();\n+    master.shutdownNow();\n+  }\n+\n+  /**\n+   * @inheritDoc\n+   */\n+  public FileConversionStatus getStatus(String ref) {\n+\n+    if (!enabled) {\n+      return FileConversionStatus.DISABLED;\n+    }\n+\n+    List<FileConversionQueueItem> items = sessionFactory.getCurrentSession()\n+      .createCriteria(FileConversionQueueItem.class)\n+        .add(Restrictions.eq(\"reference\", ref)).list();\n+\n+    if (items.isEmpty() || items.size() > 1) {\n+      log.warn(\"There should be a max of one conversion for {}\", ref);\n+      return FileConversionStatus.UNKNOWN;\n+    } else {\n+      switch(items.get(0).getStatus()) {\n+        case \"NOT_STARTED\":\n+          return FileConversionStatus.NOT_STARTED;\n+        case \"IN_PROGRESS\":\n+          return FileConversionStatus.IN_PROGRESS;\n+        case \"COMPLETED\":\n+          return FileConversionStatus.COMPLETED;\n+        default:\n+          return FileConversionStatus.UNKNOWN;\n+      }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "450c1887e773276b44e93042f8ba4c1173fe61ba"}, "originalPosition": 267}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "450c1887e773276b44e93042f8ba4c1173fe61ba", "author": {"user": {"login": "adrianfish", "name": "Adrian Fish"}}, "url": "https://github.com/sakaiproject/sakai/commit/450c1887e773276b44e93042f8ba4c1173fe61ba", "committedDate": "2020-05-14T19:07:09Z", "message": "SAK-43541 Add optional converter for attachments\n\nhttps://jira.sakaiproject.org/browse/SAK-43541"}, "afterCommit": {"oid": "f4d664d6c9b1bdc90c67c6ee9a73ef3267602b88", "author": {"user": {"login": "adrianfish", "name": "Adrian Fish"}}, "url": "https://github.com/sakaiproject/sakai/commit/f4d664d6c9b1bdc90c67c6ee9a73ef3267602b88", "committedDate": "2020-05-15T19:57:52Z", "message": "SAK-43541 Add optional converter for attachments\n\nhttps://jira.sakaiproject.org/browse/SAK-43541"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f4d664d6c9b1bdc90c67c6ee9a73ef3267602b88", "author": {"user": {"login": "adrianfish", "name": "Adrian Fish"}}, "url": "https://github.com/sakaiproject/sakai/commit/f4d664d6c9b1bdc90c67c6ee9a73ef3267602b88", "committedDate": "2020-05-15T19:57:52Z", "message": "SAK-43541 Add optional converter for attachments\n\nhttps://jira.sakaiproject.org/browse/SAK-43541"}, "afterCommit": {"oid": "7e5ac4b1f00ee12fca6d050bcf2a25314c8b37ca", "author": {"user": {"login": "adrianfish", "name": "Adrian Fish"}}, "url": "https://github.com/sakaiproject/sakai/commit/7e5ac4b1f00ee12fca6d050bcf2a25314c8b37ca", "committedDate": "2020-05-18T15:03:50Z", "message": "SAK-43541 Add optional converter for attachments\n\nhttps://jira.sakaiproject.org/browse/SAK-43541"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c0f857c79d45e1d8044ef64047cf65167e92c4cf", "author": {"user": {"login": "adrianfish", "name": "Adrian Fish"}}, "url": "https://github.com/sakaiproject/sakai/commit/c0f857c79d45e1d8044ef64047cf65167e92c4cf", "committedDate": "2020-05-19T18:43:35Z", "message": "Experimental repo stuff"}, "afterCommit": {"oid": "1bd10f315274376640ecaec92ba6cf4ad2efba64", "author": {"user": {"login": "ern", "name": "Earle Nietzel"}}, "url": "https://github.com/sakaiproject/sakai/commit/1bd10f315274376640ecaec92ba6cf4ad2efba64", "committedDate": "2020-05-20T18:48:52Z", "message": "SAK-43541 FileConversionQueue for converting files using an external service"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1bd10f315274376640ecaec92ba6cf4ad2efba64", "author": {"user": {"login": "ern", "name": "Earle Nietzel"}}, "url": "https://github.com/sakaiproject/sakai/commit/1bd10f315274376640ecaec92ba6cf4ad2efba64", "committedDate": "2020-05-20T18:48:52Z", "message": "SAK-43541 FileConversionQueue for converting files using an external service"}, "afterCommit": {"oid": "bfd2094af85bc2c32858ec16b008610c387f567b", "author": {"user": {"login": "ern", "name": "Earle Nietzel"}}, "url": "https://github.com/sakaiproject/sakai/commit/bfd2094af85bc2c32858ec16b008610c387f567b", "committedDate": "2020-05-20T18:59:49Z", "message": "SAK-43541 FileConversionQueue for converting files using an external service"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bfd2094af85bc2c32858ec16b008610c387f567b", "author": {"user": {"login": "ern", "name": "Earle Nietzel"}}, "url": "https://github.com/sakaiproject/sakai/commit/bfd2094af85bc2c32858ec16b008610c387f567b", "committedDate": "2020-05-20T18:59:49Z", "message": "SAK-43541 FileConversionQueue for converting files using an external service"}, "afterCommit": {"oid": "d1dd43b1db67dfa330d5a2d0d0a9b5d025464627", "author": {"user": {"login": "adrianfish", "name": "Adrian Fish"}}, "url": "https://github.com/sakaiproject/sakai/commit/d1dd43b1db67dfa330d5a2d0d0a9b5d025464627", "committedDate": "2020-05-27T15:46:21Z", "message": "SAK-43541 FileConversionQueue for converting files using an external service\n\nhttps://jira.sakaiproject.org/browse/SAK-43541"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "267b050d5afa67ecd8153e0545e860a5af354740", "author": {"user": {"login": "adrianfish", "name": "Adrian Fish"}}, "url": "https://github.com/sakaiproject/sakai/commit/267b050d5afa67ecd8153e0545e860a5af354740", "committedDate": "2020-05-27T15:55:38Z", "message": "SAK-43541 FileConversionQueue for converting files using an external service\n\nhttps://jira.sakaiproject.org/browse/SAK-43541"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d1dd43b1db67dfa330d5a2d0d0a9b5d025464627", "author": {"user": {"login": "adrianfish", "name": "Adrian Fish"}}, "url": "https://github.com/sakaiproject/sakai/commit/d1dd43b1db67dfa330d5a2d0d0a9b5d025464627", "committedDate": "2020-05-27T15:46:21Z", "message": "SAK-43541 FileConversionQueue for converting files using an external service\n\nhttps://jira.sakaiproject.org/browse/SAK-43541"}, "afterCommit": {"oid": "267b050d5afa67ecd8153e0545e860a5af354740", "author": {"user": {"login": "adrianfish", "name": "Adrian Fish"}}, "url": "https://github.com/sakaiproject/sakai/commit/267b050d5afa67ecd8153e0545e860a5af354740", "committedDate": "2020-05-27T15:55:38Z", "message": "SAK-43541 FileConversionQueue for converting files using an external service\n\nhttps://jira.sakaiproject.org/browse/SAK-43541"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxODc0MzQz", "url": "https://github.com/sakaiproject/sakai/pull/8195#pullrequestreview-421874343", "createdAt": "2020-06-01T14:08:27Z", "commit": {"oid": "267b050d5afa67ecd8153e0545e860a5af354740"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2053, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}