{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2NDkyMDM3", "number": 8452, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNjoyNjo0M1rOEXtEOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNDoyODozOVrOEY4xYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjkxMDY3OnYy", "diffSide": "RIGHT", "path": "basiclti/basiclti-blis/src/java/org/sakaiproject/lti13/LTI13Servlet.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNjoyNjo0M1rOG_pFtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxMTo0OToyMVrOHAIArA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM4NjY3Ng==", "bodyText": "these 4 lines seem like defaults ?  why explicitly set them ?", "url": "https://github.com/sakaiproject/sakai/pull/8452#discussion_r469386676", "createdAt": "2020-08-12T16:26:43Z", "author": {"login": "ottenhoff"}, "path": "basiclti/basiclti-blis/src/java/org/sakaiproject/lti13/LTI13Servlet.java", "diffHunk": "@@ -295,6 +301,60 @@ protected void doPost(HttpServletRequest request, HttpServletResponse response)\n \n \t}\n \n+\t// A very locked down proxy - JSON Only\n+\tprotected void handleProxy(HttpServletRequest request, HttpServletResponse response) {\n+\t\tString proxyUrl = request.getParameter(\"proxyUrl\");\n+\t\tif ( proxyUrl == null ) {\n+\t\t\tLTI13Util.return400(response, \"Missing proxyUrl\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tSession sess = SessionManager.getCurrentSession();\n+\t\tif ( sess == null || sess.getUserId() == null ) {\n+\t\t\tLTI13Util.return400(response, \"Must be logged in\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\ttry {\n+\t\t\tjava.net.URL url = new java.net.URL(proxyUrl);\n+\t\t\tjava.net.HttpURLConnection con = (java.net.HttpURLConnection) url.openConnection();\n+\t\t\tcon.setRequestMethod(\"GET\");\n+\t\t\tcon.setConnectTimeout(3000);\n+\t\t\tcon.setReadTimeout(3000);\n+\t\t\tcon.setInstanceFollowRedirects(true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "731c6164ad868c5f5a70fdc1e52a21447e729ac9"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0NTAxMA==", "bodyText": "Really?  Let me check.", "url": "https://github.com/sakaiproject/sakai/pull/8452#discussion_r469545010", "createdAt": "2020-08-12T21:02:31Z", "author": {"login": "csev"}, "path": "basiclti/basiclti-blis/src/java/org/sakaiproject/lti13/LTI13Servlet.java", "diffHunk": "@@ -295,6 +301,60 @@ protected void doPost(HttpServletRequest request, HttpServletResponse response)\n \n \t}\n \n+\t// A very locked down proxy - JSON Only\n+\tprotected void handleProxy(HttpServletRequest request, HttpServletResponse response) {\n+\t\tString proxyUrl = request.getParameter(\"proxyUrl\");\n+\t\tif ( proxyUrl == null ) {\n+\t\t\tLTI13Util.return400(response, \"Missing proxyUrl\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tSession sess = SessionManager.getCurrentSession();\n+\t\tif ( sess == null || sess.getUserId() == null ) {\n+\t\t\tLTI13Util.return400(response, \"Must be logged in\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\ttry {\n+\t\t\tjava.net.URL url = new java.net.URL(proxyUrl);\n+\t\t\tjava.net.HttpURLConnection con = (java.net.HttpURLConnection) url.openConnection();\n+\t\t\tcon.setRequestMethod(\"GET\");\n+\t\t\tcon.setConnectTimeout(3000);\n+\t\t\tcon.setReadTimeout(3000);\n+\t\t\tcon.setInstanceFollowRedirects(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM4NjY3Ng=="}, "originalCommit": {"oid": "731c6164ad868c5f5a70fdc1e52a21447e729ac9"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg5MzI5Mg==", "bodyText": "I like explicitly listing these even if they are the defaults - to be really obvious about what is going on for the casual reader.", "url": "https://github.com/sakaiproject/sakai/pull/8452#discussion_r469893292", "createdAt": "2020-08-13T11:49:21Z", "author": {"login": "csev"}, "path": "basiclti/basiclti-blis/src/java/org/sakaiproject/lti13/LTI13Servlet.java", "diffHunk": "@@ -295,6 +301,60 @@ protected void doPost(HttpServletRequest request, HttpServletResponse response)\n \n \t}\n \n+\t// A very locked down proxy - JSON Only\n+\tprotected void handleProxy(HttpServletRequest request, HttpServletResponse response) {\n+\t\tString proxyUrl = request.getParameter(\"proxyUrl\");\n+\t\tif ( proxyUrl == null ) {\n+\t\t\tLTI13Util.return400(response, \"Missing proxyUrl\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tSession sess = SessionManager.getCurrentSession();\n+\t\tif ( sess == null || sess.getUserId() == null ) {\n+\t\t\tLTI13Util.return400(response, \"Must be logged in\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\ttry {\n+\t\t\tjava.net.URL url = new java.net.URL(proxyUrl);\n+\t\t\tjava.net.HttpURLConnection con = (java.net.HttpURLConnection) url.openConnection();\n+\t\t\tcon.setRequestMethod(\"GET\");\n+\t\t\tcon.setConnectTimeout(3000);\n+\t\t\tcon.setReadTimeout(3000);\n+\t\t\tcon.setInstanceFollowRedirects(true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM4NjY3Ng=="}, "originalCommit": {"oid": "731c6164ad868c5f5a70fdc1e52a21447e729ac9"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjkxMjE3OnYy", "diffSide": "RIGHT", "path": "basiclti/basiclti-blis/src/java/org/sakaiproject/lti13/LTI13Servlet.java", "isResolved": false, "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNjoyNzowNlrOG_pGqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QyMTozNTowN1rOHAeisg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM4NjkyMA==", "bodyText": "better to close() in a finally block", "url": "https://github.com/sakaiproject/sakai/pull/8452#discussion_r469386920", "createdAt": "2020-08-12T16:27:06Z", "author": {"login": "ottenhoff"}, "path": "basiclti/basiclti-blis/src/java/org/sakaiproject/lti13/LTI13Servlet.java", "diffHunk": "@@ -295,6 +301,60 @@ protected void doPost(HttpServletRequest request, HttpServletResponse response)\n \n \t}\n \n+\t// A very locked down proxy - JSON Only\n+\tprotected void handleProxy(HttpServletRequest request, HttpServletResponse response) {\n+\t\tString proxyUrl = request.getParameter(\"proxyUrl\");\n+\t\tif ( proxyUrl == null ) {\n+\t\t\tLTI13Util.return400(response, \"Missing proxyUrl\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tSession sess = SessionManager.getCurrentSession();\n+\t\tif ( sess == null || sess.getUserId() == null ) {\n+\t\t\tLTI13Util.return400(response, \"Must be logged in\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\ttry {\n+\t\t\tjava.net.URL url = new java.net.URL(proxyUrl);\n+\t\t\tjava.net.HttpURLConnection con = (java.net.HttpURLConnection) url.openConnection();\n+\t\t\tcon.setRequestMethod(\"GET\");\n+\t\t\tcon.setConnectTimeout(3000);\n+\t\t\tcon.setReadTimeout(3000);\n+\t\t\tcon.setInstanceFollowRedirects(true);\n+\n+\t\t\tjava.io.BufferedReader in = new java.io.BufferedReader(\n+\t\t\t\tnew java.io.InputStreamReader(con.getInputStream()));\n+\t\t\tString inputLine;\n+\t\t\tStringBuffer content = new StringBuffer();\n+\t\t\twhile ((inputLine = in.readLine()) != null) {\n+\t\t\t\tcontent.append(inputLine);\n+\t\t\t}\n+\t\t\tif ( content.length() > 10000 ) {\n+\t\t\t\tin.close();\n+\t\t\t\tLTI13Util.return400(response, \"Content too long\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tin.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "731c6164ad868c5f5a70fdc1e52a21447e729ac9"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTU0NTE4NA==", "bodyText": "OK - Thanks.", "url": "https://github.com/sakaiproject/sakai/pull/8452#discussion_r469545184", "createdAt": "2020-08-12T21:02:51Z", "author": {"login": "csev"}, "path": "basiclti/basiclti-blis/src/java/org/sakaiproject/lti13/LTI13Servlet.java", "diffHunk": "@@ -295,6 +301,60 @@ protected void doPost(HttpServletRequest request, HttpServletResponse response)\n \n \t}\n \n+\t// A very locked down proxy - JSON Only\n+\tprotected void handleProxy(HttpServletRequest request, HttpServletResponse response) {\n+\t\tString proxyUrl = request.getParameter(\"proxyUrl\");\n+\t\tif ( proxyUrl == null ) {\n+\t\t\tLTI13Util.return400(response, \"Missing proxyUrl\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tSession sess = SessionManager.getCurrentSession();\n+\t\tif ( sess == null || sess.getUserId() == null ) {\n+\t\t\tLTI13Util.return400(response, \"Must be logged in\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\ttry {\n+\t\t\tjava.net.URL url = new java.net.URL(proxyUrl);\n+\t\t\tjava.net.HttpURLConnection con = (java.net.HttpURLConnection) url.openConnection();\n+\t\t\tcon.setRequestMethod(\"GET\");\n+\t\t\tcon.setConnectTimeout(3000);\n+\t\t\tcon.setReadTimeout(3000);\n+\t\t\tcon.setInstanceFollowRedirects(true);\n+\n+\t\t\tjava.io.BufferedReader in = new java.io.BufferedReader(\n+\t\t\t\tnew java.io.InputStreamReader(con.getInputStream()));\n+\t\t\tString inputLine;\n+\t\t\tStringBuffer content = new StringBuffer();\n+\t\t\twhile ((inputLine = in.readLine()) != null) {\n+\t\t\t\tcontent.append(inputLine);\n+\t\t\t}\n+\t\t\tif ( content.length() > 10000 ) {\n+\t\t\t\tin.close();\n+\t\t\t\tLTI13Util.return400(response, \"Content too long\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tin.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM4NjkyMA=="}, "originalCommit": {"oid": "731c6164ad868c5f5a70fdc1e52a21447e729ac9"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg5NDg0Nw==", "bodyText": "I actually disagree.  What if the exception happens before the \"in\" is defined (i.e. in the first 6 lines of the try block) - how would I handle that in a finally clause?", "url": "https://github.com/sakaiproject/sakai/pull/8452#discussion_r469894847", "createdAt": "2020-08-13T11:52:49Z", "author": {"login": "csev"}, "path": "basiclti/basiclti-blis/src/java/org/sakaiproject/lti13/LTI13Servlet.java", "diffHunk": "@@ -295,6 +301,60 @@ protected void doPost(HttpServletRequest request, HttpServletResponse response)\n \n \t}\n \n+\t// A very locked down proxy - JSON Only\n+\tprotected void handleProxy(HttpServletRequest request, HttpServletResponse response) {\n+\t\tString proxyUrl = request.getParameter(\"proxyUrl\");\n+\t\tif ( proxyUrl == null ) {\n+\t\t\tLTI13Util.return400(response, \"Missing proxyUrl\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tSession sess = SessionManager.getCurrentSession();\n+\t\tif ( sess == null || sess.getUserId() == null ) {\n+\t\t\tLTI13Util.return400(response, \"Must be logged in\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\ttry {\n+\t\t\tjava.net.URL url = new java.net.URL(proxyUrl);\n+\t\t\tjava.net.HttpURLConnection con = (java.net.HttpURLConnection) url.openConnection();\n+\t\t\tcon.setRequestMethod(\"GET\");\n+\t\t\tcon.setConnectTimeout(3000);\n+\t\t\tcon.setReadTimeout(3000);\n+\t\t\tcon.setInstanceFollowRedirects(true);\n+\n+\t\t\tjava.io.BufferedReader in = new java.io.BufferedReader(\n+\t\t\t\tnew java.io.InputStreamReader(con.getInputStream()));\n+\t\t\tString inputLine;\n+\t\t\tStringBuffer content = new StringBuffer();\n+\t\t\twhile ((inputLine = in.readLine()) != null) {\n+\t\t\t\tcontent.append(inputLine);\n+\t\t\t}\n+\t\t\tif ( content.length() > 10000 ) {\n+\t\t\t\tin.close();\n+\t\t\t\tLTI13Util.return400(response, \"Content too long\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tin.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM4NjkyMA=="}, "originalCommit": {"oid": "731c6164ad868c5f5a70fdc1e52a21447e729ac9"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg5NjAyMQ==", "bodyText": "You can't even reference \"in\" in the finally clause unless I hoist it outside the try block.  Which is super icky practice IMHO.", "url": "https://github.com/sakaiproject/sakai/pull/8452#discussion_r469896021", "createdAt": "2020-08-13T11:55:10Z", "author": {"login": "csev"}, "path": "basiclti/basiclti-blis/src/java/org/sakaiproject/lti13/LTI13Servlet.java", "diffHunk": "@@ -295,6 +301,60 @@ protected void doPost(HttpServletRequest request, HttpServletResponse response)\n \n \t}\n \n+\t// A very locked down proxy - JSON Only\n+\tprotected void handleProxy(HttpServletRequest request, HttpServletResponse response) {\n+\t\tString proxyUrl = request.getParameter(\"proxyUrl\");\n+\t\tif ( proxyUrl == null ) {\n+\t\t\tLTI13Util.return400(response, \"Missing proxyUrl\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tSession sess = SessionManager.getCurrentSession();\n+\t\tif ( sess == null || sess.getUserId() == null ) {\n+\t\t\tLTI13Util.return400(response, \"Must be logged in\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\ttry {\n+\t\t\tjava.net.URL url = new java.net.URL(proxyUrl);\n+\t\t\tjava.net.HttpURLConnection con = (java.net.HttpURLConnection) url.openConnection();\n+\t\t\tcon.setRequestMethod(\"GET\");\n+\t\t\tcon.setConnectTimeout(3000);\n+\t\t\tcon.setReadTimeout(3000);\n+\t\t\tcon.setInstanceFollowRedirects(true);\n+\n+\t\t\tjava.io.BufferedReader in = new java.io.BufferedReader(\n+\t\t\t\tnew java.io.InputStreamReader(con.getInputStream()));\n+\t\t\tString inputLine;\n+\t\t\tStringBuffer content = new StringBuffer();\n+\t\t\twhile ((inputLine = in.readLine()) != null) {\n+\t\t\t\tcontent.append(inputLine);\n+\t\t\t}\n+\t\t\tif ( content.length() > 10000 ) {\n+\t\t\t\tin.close();\n+\t\t\t\tLTI13Util.return400(response, \"Content too long\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tin.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM4NjkyMA=="}, "originalCommit": {"oid": "731c6164ad868c5f5a70fdc1e52a21447e729ac9"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTg5ODcwNw==", "bodyText": "You can use a try with resources, then you can close the reader in a finally block:\nhttps://docs.oracle.com/javase/tutorial/essential/exceptions/tryResourceClose.html", "url": "https://github.com/sakaiproject/sakai/pull/8452#discussion_r469898707", "createdAt": "2020-08-13T12:00:16Z", "author": {"login": "bjones86"}, "path": "basiclti/basiclti-blis/src/java/org/sakaiproject/lti13/LTI13Servlet.java", "diffHunk": "@@ -295,6 +301,60 @@ protected void doPost(HttpServletRequest request, HttpServletResponse response)\n \n \t}\n \n+\t// A very locked down proxy - JSON Only\n+\tprotected void handleProxy(HttpServletRequest request, HttpServletResponse response) {\n+\t\tString proxyUrl = request.getParameter(\"proxyUrl\");\n+\t\tif ( proxyUrl == null ) {\n+\t\t\tLTI13Util.return400(response, \"Missing proxyUrl\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tSession sess = SessionManager.getCurrentSession();\n+\t\tif ( sess == null || sess.getUserId() == null ) {\n+\t\t\tLTI13Util.return400(response, \"Must be logged in\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\ttry {\n+\t\t\tjava.net.URL url = new java.net.URL(proxyUrl);\n+\t\t\tjava.net.HttpURLConnection con = (java.net.HttpURLConnection) url.openConnection();\n+\t\t\tcon.setRequestMethod(\"GET\");\n+\t\t\tcon.setConnectTimeout(3000);\n+\t\t\tcon.setReadTimeout(3000);\n+\t\t\tcon.setInstanceFollowRedirects(true);\n+\n+\t\t\tjava.io.BufferedReader in = new java.io.BufferedReader(\n+\t\t\t\tnew java.io.InputStreamReader(con.getInputStream()));\n+\t\t\tString inputLine;\n+\t\t\tStringBuffer content = new StringBuffer();\n+\t\t\twhile ((inputLine = in.readLine()) != null) {\n+\t\t\t\tcontent.append(inputLine);\n+\t\t\t}\n+\t\t\tif ( content.length() > 10000 ) {\n+\t\t\t\tin.close();\n+\t\t\t\tLTI13Util.return400(response, \"Content too long\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tin.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM4NjkyMA=="}, "originalCommit": {"oid": "731c6164ad868c5f5a70fdc1e52a21447e729ac9"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkzMzk3MA==", "bodyText": "Yes - but I make two things in the try block - both of which might fail - I could (a) hoist all that into the try or (b) outside of the try completely or (c) make two try blocks.  I think the way I have it is by far the clearest expression of what is happening - but if you both insist I think that it should be two try blocks with hoists.  But to be honest - it makes really easy to read code - almost unreadable.", "url": "https://github.com/sakaiproject/sakai/pull/8452#discussion_r469933970", "createdAt": "2020-08-13T13:02:46Z", "author": {"login": "csev"}, "path": "basiclti/basiclti-blis/src/java/org/sakaiproject/lti13/LTI13Servlet.java", "diffHunk": "@@ -295,6 +301,60 @@ protected void doPost(HttpServletRequest request, HttpServletResponse response)\n \n \t}\n \n+\t// A very locked down proxy - JSON Only\n+\tprotected void handleProxy(HttpServletRequest request, HttpServletResponse response) {\n+\t\tString proxyUrl = request.getParameter(\"proxyUrl\");\n+\t\tif ( proxyUrl == null ) {\n+\t\t\tLTI13Util.return400(response, \"Missing proxyUrl\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tSession sess = SessionManager.getCurrentSession();\n+\t\tif ( sess == null || sess.getUserId() == null ) {\n+\t\t\tLTI13Util.return400(response, \"Must be logged in\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\ttry {\n+\t\t\tjava.net.URL url = new java.net.URL(proxyUrl);\n+\t\t\tjava.net.HttpURLConnection con = (java.net.HttpURLConnection) url.openConnection();\n+\t\t\tcon.setRequestMethod(\"GET\");\n+\t\t\tcon.setConnectTimeout(3000);\n+\t\t\tcon.setReadTimeout(3000);\n+\t\t\tcon.setInstanceFollowRedirects(true);\n+\n+\t\t\tjava.io.BufferedReader in = new java.io.BufferedReader(\n+\t\t\t\tnew java.io.InputStreamReader(con.getInputStream()));\n+\t\t\tString inputLine;\n+\t\t\tStringBuffer content = new StringBuffer();\n+\t\t\twhile ((inputLine = in.readLine()) != null) {\n+\t\t\t\tcontent.append(inputLine);\n+\t\t\t}\n+\t\t\tif ( content.length() > 10000 ) {\n+\t\t\t\tin.close();\n+\t\t\t\tLTI13Util.return400(response, \"Content too long\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tin.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM4NjkyMA=="}, "originalCommit": {"oid": "731c6164ad868c5f5a70fdc1e52a21447e729ac9"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTkzNzAwOA==", "bodyText": "idk about code readability here. whenever i see connections opened without a definitive way of closing it (try-with-resources or finally), i get code smell....\nassuming your code is going to close the conn, or return the conn, or close the SecurityAdvisor as expected seems like a bad recipe", "url": "https://github.com/sakaiproject/sakai/pull/8452#discussion_r469937008", "createdAt": "2020-08-13T13:07:32Z", "author": {"login": "ottenhoff"}, "path": "basiclti/basiclti-blis/src/java/org/sakaiproject/lti13/LTI13Servlet.java", "diffHunk": "@@ -295,6 +301,60 @@ protected void doPost(HttpServletRequest request, HttpServletResponse response)\n \n \t}\n \n+\t// A very locked down proxy - JSON Only\n+\tprotected void handleProxy(HttpServletRequest request, HttpServletResponse response) {\n+\t\tString proxyUrl = request.getParameter(\"proxyUrl\");\n+\t\tif ( proxyUrl == null ) {\n+\t\t\tLTI13Util.return400(response, \"Missing proxyUrl\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tSession sess = SessionManager.getCurrentSession();\n+\t\tif ( sess == null || sess.getUserId() == null ) {\n+\t\t\tLTI13Util.return400(response, \"Must be logged in\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\ttry {\n+\t\t\tjava.net.URL url = new java.net.URL(proxyUrl);\n+\t\t\tjava.net.HttpURLConnection con = (java.net.HttpURLConnection) url.openConnection();\n+\t\t\tcon.setRequestMethod(\"GET\");\n+\t\t\tcon.setConnectTimeout(3000);\n+\t\t\tcon.setReadTimeout(3000);\n+\t\t\tcon.setInstanceFollowRedirects(true);\n+\n+\t\t\tjava.io.BufferedReader in = new java.io.BufferedReader(\n+\t\t\t\tnew java.io.InputStreamReader(con.getInputStream()));\n+\t\t\tString inputLine;\n+\t\t\tStringBuffer content = new StringBuffer();\n+\t\t\twhile ((inputLine = in.readLine()) != null) {\n+\t\t\t\tcontent.append(inputLine);\n+\t\t\t}\n+\t\t\tif ( content.length() > 10000 ) {\n+\t\t\t\tin.close();\n+\t\t\t\tLTI13Util.return400(response, \"Content too long\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tin.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM4NjkyMA=="}, "originalCommit": {"oid": "731c6164ad868c5f5a70fdc1e52a21447e729ac9"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTk0OTUxNw==", "bodyText": "I agree with Sam here, this is standard practise nowadays.", "url": "https://github.com/sakaiproject/sakai/pull/8452#discussion_r469949517", "createdAt": "2020-08-13T13:26:52Z", "author": {"login": "bjones86"}, "path": "basiclti/basiclti-blis/src/java/org/sakaiproject/lti13/LTI13Servlet.java", "diffHunk": "@@ -295,6 +301,60 @@ protected void doPost(HttpServletRequest request, HttpServletResponse response)\n \n \t}\n \n+\t// A very locked down proxy - JSON Only\n+\tprotected void handleProxy(HttpServletRequest request, HttpServletResponse response) {\n+\t\tString proxyUrl = request.getParameter(\"proxyUrl\");\n+\t\tif ( proxyUrl == null ) {\n+\t\t\tLTI13Util.return400(response, \"Missing proxyUrl\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tSession sess = SessionManager.getCurrentSession();\n+\t\tif ( sess == null || sess.getUserId() == null ) {\n+\t\t\tLTI13Util.return400(response, \"Must be logged in\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\ttry {\n+\t\t\tjava.net.URL url = new java.net.URL(proxyUrl);\n+\t\t\tjava.net.HttpURLConnection con = (java.net.HttpURLConnection) url.openConnection();\n+\t\t\tcon.setRequestMethod(\"GET\");\n+\t\t\tcon.setConnectTimeout(3000);\n+\t\t\tcon.setReadTimeout(3000);\n+\t\t\tcon.setInstanceFollowRedirects(true);\n+\n+\t\t\tjava.io.BufferedReader in = new java.io.BufferedReader(\n+\t\t\t\tnew java.io.InputStreamReader(con.getInputStream()));\n+\t\t\tString inputLine;\n+\t\t\tStringBuffer content = new StringBuffer();\n+\t\t\twhile ((inputLine = in.readLine()) != null) {\n+\t\t\t\tcontent.append(inputLine);\n+\t\t\t}\n+\t\t\tif ( content.length() > 10000 ) {\n+\t\t\t\tin.close();\n+\t\t\t\tLTI13Util.return400(response, \"Content too long\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tin.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM4NjkyMA=="}, "originalCommit": {"oid": "731c6164ad868c5f5a70fdc1e52a21447e729ac9"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDAzMzE4Mg==", "bodyText": "This is a crap pattern.\nI will not be rewriting this just to make use of the cool new parenthesis feature.  I tried a rewrite that looked far uglier - and it turns out that thing go bad if there is an exception in the () part - What the ever loving F!  The simple example @bjones86 references of a con.createStatement() - it is a a good but pointless use of the pattern.  Because it will always work and never throws any exceptions and its close() can be called if the follow on code fails.  It is like a pointless tautology dreamed up to prove the point.  The previous example with Zip files - must have exceptions happen if things go wrong in the parenthesis code.  If the bit in the parenthesis does not allow proper handling of exceptions - then it is of supremely limited value.\nFeel free to \"prove me wrong\" by sending me a \"better version\" of the code.", "url": "https://github.com/sakaiproject/sakai/pull/8452#discussion_r470033182", "createdAt": "2020-08-13T15:21:49Z", "author": {"login": "csev"}, "path": "basiclti/basiclti-blis/src/java/org/sakaiproject/lti13/LTI13Servlet.java", "diffHunk": "@@ -295,6 +301,60 @@ protected void doPost(HttpServletRequest request, HttpServletResponse response)\n \n \t}\n \n+\t// A very locked down proxy - JSON Only\n+\tprotected void handleProxy(HttpServletRequest request, HttpServletResponse response) {\n+\t\tString proxyUrl = request.getParameter(\"proxyUrl\");\n+\t\tif ( proxyUrl == null ) {\n+\t\t\tLTI13Util.return400(response, \"Missing proxyUrl\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tSession sess = SessionManager.getCurrentSession();\n+\t\tif ( sess == null || sess.getUserId() == null ) {\n+\t\t\tLTI13Util.return400(response, \"Must be logged in\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\ttry {\n+\t\t\tjava.net.URL url = new java.net.URL(proxyUrl);\n+\t\t\tjava.net.HttpURLConnection con = (java.net.HttpURLConnection) url.openConnection();\n+\t\t\tcon.setRequestMethod(\"GET\");\n+\t\t\tcon.setConnectTimeout(3000);\n+\t\t\tcon.setReadTimeout(3000);\n+\t\t\tcon.setInstanceFollowRedirects(true);\n+\n+\t\t\tjava.io.BufferedReader in = new java.io.BufferedReader(\n+\t\t\t\tnew java.io.InputStreamReader(con.getInputStream()));\n+\t\t\tString inputLine;\n+\t\t\tStringBuffer content = new StringBuffer();\n+\t\t\twhile ((inputLine = in.readLine()) != null) {\n+\t\t\t\tcontent.append(inputLine);\n+\t\t\t}\n+\t\t\tif ( content.length() > 10000 ) {\n+\t\t\t\tin.close();\n+\t\t\t\tLTI13Util.return400(response, \"Content too long\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tin.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM4NjkyMA=="}, "originalCommit": {"oid": "731c6164ad868c5f5a70fdc1e52a21447e729ac9"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA1NjcxOQ==", "bodyText": "try (HttpURLConnection con = new URL(...); BufferReader in = new BufferedReader(...))\n{ ... }\ncatch (...) { ... }\nfinally\n{\n    in.close();\n}\n\nThe benefit is not the fancy braces, but the assurance that the finally block will always run and close the resource(s) if any exception (caught or uncaught) is triggered.\nIn fact, another benefit is that you don't even need to write the finally, when you use try with resources, it automatically closes all the resources for you in a magic finally block, thanks Java.", "url": "https://github.com/sakaiproject/sakai/pull/8452#discussion_r470056719", "createdAt": "2020-08-13T15:57:04Z", "author": {"login": "bjones86"}, "path": "basiclti/basiclti-blis/src/java/org/sakaiproject/lti13/LTI13Servlet.java", "diffHunk": "@@ -295,6 +301,60 @@ protected void doPost(HttpServletRequest request, HttpServletResponse response)\n \n \t}\n \n+\t// A very locked down proxy - JSON Only\n+\tprotected void handleProxy(HttpServletRequest request, HttpServletResponse response) {\n+\t\tString proxyUrl = request.getParameter(\"proxyUrl\");\n+\t\tif ( proxyUrl == null ) {\n+\t\t\tLTI13Util.return400(response, \"Missing proxyUrl\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tSession sess = SessionManager.getCurrentSession();\n+\t\tif ( sess == null || sess.getUserId() == null ) {\n+\t\t\tLTI13Util.return400(response, \"Must be logged in\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\ttry {\n+\t\t\tjava.net.URL url = new java.net.URL(proxyUrl);\n+\t\t\tjava.net.HttpURLConnection con = (java.net.HttpURLConnection) url.openConnection();\n+\t\t\tcon.setRequestMethod(\"GET\");\n+\t\t\tcon.setConnectTimeout(3000);\n+\t\t\tcon.setReadTimeout(3000);\n+\t\t\tcon.setInstanceFollowRedirects(true);\n+\n+\t\t\tjava.io.BufferedReader in = new java.io.BufferedReader(\n+\t\t\t\tnew java.io.InputStreamReader(con.getInputStream()));\n+\t\t\tString inputLine;\n+\t\t\tStringBuffer content = new StringBuffer();\n+\t\t\twhile ((inputLine = in.readLine()) != null) {\n+\t\t\t\tcontent.append(inputLine);\n+\t\t\t}\n+\t\t\tif ( content.length() > 10000 ) {\n+\t\t\t\tin.close();\n+\t\t\t\tLTI13Util.return400(response, \"Content too long\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tin.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM4NjkyMA=="}, "originalCommit": {"oid": "731c6164ad868c5f5a70fdc1e52a21447e729ac9"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA3MzEzOQ==", "bodyText": "I will try it - but what if the URL is a 404 and the () bit blows up - my initial testing is that nothing is caught and it just blows up.  Am I wrong with that?", "url": "https://github.com/sakaiproject/sakai/pull/8452#discussion_r470073139", "createdAt": "2020-08-13T16:23:51Z", "author": {"login": "csev"}, "path": "basiclti/basiclti-blis/src/java/org/sakaiproject/lti13/LTI13Servlet.java", "diffHunk": "@@ -295,6 +301,60 @@ protected void doPost(HttpServletRequest request, HttpServletResponse response)\n \n \t}\n \n+\t// A very locked down proxy - JSON Only\n+\tprotected void handleProxy(HttpServletRequest request, HttpServletResponse response) {\n+\t\tString proxyUrl = request.getParameter(\"proxyUrl\");\n+\t\tif ( proxyUrl == null ) {\n+\t\t\tLTI13Util.return400(response, \"Missing proxyUrl\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tSession sess = SessionManager.getCurrentSession();\n+\t\tif ( sess == null || sess.getUserId() == null ) {\n+\t\t\tLTI13Util.return400(response, \"Must be logged in\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\ttry {\n+\t\t\tjava.net.URL url = new java.net.URL(proxyUrl);\n+\t\t\tjava.net.HttpURLConnection con = (java.net.HttpURLConnection) url.openConnection();\n+\t\t\tcon.setRequestMethod(\"GET\");\n+\t\t\tcon.setConnectTimeout(3000);\n+\t\t\tcon.setReadTimeout(3000);\n+\t\t\tcon.setInstanceFollowRedirects(true);\n+\n+\t\t\tjava.io.BufferedReader in = new java.io.BufferedReader(\n+\t\t\t\tnew java.io.InputStreamReader(con.getInputStream()));\n+\t\t\tString inputLine;\n+\t\t\tStringBuffer content = new StringBuffer();\n+\t\t\twhile ((inputLine = in.readLine()) != null) {\n+\t\t\t\tcontent.append(inputLine);\n+\t\t\t}\n+\t\t\tif ( content.length() > 10000 ) {\n+\t\t\t\tin.close();\n+\t\t\t\tLTI13Util.return400(response, \"Content too long\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tin.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM4NjkyMA=="}, "originalCommit": {"oid": "731c6164ad868c5f5a70fdc1e52a21447e729ac9"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA3NDMzOQ==", "bodyText": "[ERROR] /Users/csev/dev/sakai-scripts/trunk/basiclti/basiclti-blis/src/java/org/sakaiproject/lti13/LTI13Servlet.java:[319,38] incompatible types: try-with-resources not applicable to variable type\n[ERROR]     (java.net.URL cannot be converted to java.lang.AutoCloseable)\n[ERROR] /Users/csev/dev/sakai-scripts/trunk/basiclti/basiclti-blis/src/java/org/sakaiproject/lti13/LTI13Servlet.java:[320,52] incompatible types: try-with-resources not applicable to variable type\n[ERROR]     (java.net.HttpURLConnection cannot be converted to java.lang.AutoCloseable)", "url": "https://github.com/sakaiproject/sakai/pull/8452#discussion_r470074339", "createdAt": "2020-08-13T16:25:46Z", "author": {"login": "csev"}, "path": "basiclti/basiclti-blis/src/java/org/sakaiproject/lti13/LTI13Servlet.java", "diffHunk": "@@ -295,6 +301,60 @@ protected void doPost(HttpServletRequest request, HttpServletResponse response)\n \n \t}\n \n+\t// A very locked down proxy - JSON Only\n+\tprotected void handleProxy(HttpServletRequest request, HttpServletResponse response) {\n+\t\tString proxyUrl = request.getParameter(\"proxyUrl\");\n+\t\tif ( proxyUrl == null ) {\n+\t\t\tLTI13Util.return400(response, \"Missing proxyUrl\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tSession sess = SessionManager.getCurrentSession();\n+\t\tif ( sess == null || sess.getUserId() == null ) {\n+\t\t\tLTI13Util.return400(response, \"Must be logged in\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\ttry {\n+\t\t\tjava.net.URL url = new java.net.URL(proxyUrl);\n+\t\t\tjava.net.HttpURLConnection con = (java.net.HttpURLConnection) url.openConnection();\n+\t\t\tcon.setRequestMethod(\"GET\");\n+\t\t\tcon.setConnectTimeout(3000);\n+\t\t\tcon.setReadTimeout(3000);\n+\t\t\tcon.setInstanceFollowRedirects(true);\n+\n+\t\t\tjava.io.BufferedReader in = new java.io.BufferedReader(\n+\t\t\t\tnew java.io.InputStreamReader(con.getInputStream()));\n+\t\t\tString inputLine;\n+\t\t\tStringBuffer content = new StringBuffer();\n+\t\t\twhile ((inputLine = in.readLine()) != null) {\n+\t\t\t\tcontent.append(inputLine);\n+\t\t\t}\n+\t\t\tif ( content.length() > 10000 ) {\n+\t\t\t\tin.close();\n+\t\t\t\tLTI13Util.return400(response, \"Content too long\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tin.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM4NjkyMA=="}, "originalCommit": {"oid": "731c6164ad868c5f5a70fdc1e52a21447e729ac9"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE1NTIzMg==", "bodyText": "yeah i think you do the HttpUrlConnection first and then try-with-resources on the BufferedReader\nhttps://stackoverflow.com/questions/43708021/proper-use-of-urlconnection-and-try-with-resources-in-java-8", "url": "https://github.com/sakaiproject/sakai/pull/8452#discussion_r470155232", "createdAt": "2020-08-13T18:18:10Z", "author": {"login": "ottenhoff"}, "path": "basiclti/basiclti-blis/src/java/org/sakaiproject/lti13/LTI13Servlet.java", "diffHunk": "@@ -295,6 +301,60 @@ protected void doPost(HttpServletRequest request, HttpServletResponse response)\n \n \t}\n \n+\t// A very locked down proxy - JSON Only\n+\tprotected void handleProxy(HttpServletRequest request, HttpServletResponse response) {\n+\t\tString proxyUrl = request.getParameter(\"proxyUrl\");\n+\t\tif ( proxyUrl == null ) {\n+\t\t\tLTI13Util.return400(response, \"Missing proxyUrl\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tSession sess = SessionManager.getCurrentSession();\n+\t\tif ( sess == null || sess.getUserId() == null ) {\n+\t\t\tLTI13Util.return400(response, \"Must be logged in\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\ttry {\n+\t\t\tjava.net.URL url = new java.net.URL(proxyUrl);\n+\t\t\tjava.net.HttpURLConnection con = (java.net.HttpURLConnection) url.openConnection();\n+\t\t\tcon.setRequestMethod(\"GET\");\n+\t\t\tcon.setConnectTimeout(3000);\n+\t\t\tcon.setReadTimeout(3000);\n+\t\t\tcon.setInstanceFollowRedirects(true);\n+\n+\t\t\tjava.io.BufferedReader in = new java.io.BufferedReader(\n+\t\t\t\tnew java.io.InputStreamReader(con.getInputStream()));\n+\t\t\tString inputLine;\n+\t\t\tStringBuffer content = new StringBuffer();\n+\t\t\twhile ((inputLine = in.readLine()) != null) {\n+\t\t\t\tcontent.append(inputLine);\n+\t\t\t}\n+\t\t\tif ( content.length() > 10000 ) {\n+\t\t\t\tin.close();\n+\t\t\t\tLTI13Util.return400(response, \"Content too long\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tin.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM4NjkyMA=="}, "originalCommit": {"oid": "731c6164ad868c5f5a70fdc1e52a21447e729ac9"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDE5NjMxMA==", "bodyText": "Yeah - That is a try within a try.  That can work. Ugly but not wrong.", "url": "https://github.com/sakaiproject/sakai/pull/8452#discussion_r470196310", "createdAt": "2020-08-13T19:28:04Z", "author": {"login": "csev"}, "path": "basiclti/basiclti-blis/src/java/org/sakaiproject/lti13/LTI13Servlet.java", "diffHunk": "@@ -295,6 +301,60 @@ protected void doPost(HttpServletRequest request, HttpServletResponse response)\n \n \t}\n \n+\t// A very locked down proxy - JSON Only\n+\tprotected void handleProxy(HttpServletRequest request, HttpServletResponse response) {\n+\t\tString proxyUrl = request.getParameter(\"proxyUrl\");\n+\t\tif ( proxyUrl == null ) {\n+\t\t\tLTI13Util.return400(response, \"Missing proxyUrl\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tSession sess = SessionManager.getCurrentSession();\n+\t\tif ( sess == null || sess.getUserId() == null ) {\n+\t\t\tLTI13Util.return400(response, \"Must be logged in\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\ttry {\n+\t\t\tjava.net.URL url = new java.net.URL(proxyUrl);\n+\t\t\tjava.net.HttpURLConnection con = (java.net.HttpURLConnection) url.openConnection();\n+\t\t\tcon.setRequestMethod(\"GET\");\n+\t\t\tcon.setConnectTimeout(3000);\n+\t\t\tcon.setReadTimeout(3000);\n+\t\t\tcon.setInstanceFollowRedirects(true);\n+\n+\t\t\tjava.io.BufferedReader in = new java.io.BufferedReader(\n+\t\t\t\tnew java.io.InputStreamReader(con.getInputStream()));\n+\t\t\tString inputLine;\n+\t\t\tStringBuffer content = new StringBuffer();\n+\t\t\twhile ((inputLine = in.readLine()) != null) {\n+\t\t\t\tcontent.append(inputLine);\n+\t\t\t}\n+\t\t\tif ( content.length() > 10000 ) {\n+\t\t\t\tin.close();\n+\t\t\t\tLTI13Util.return400(response, \"Content too long\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tin.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM4NjkyMA=="}, "originalCommit": {"oid": "731c6164ad868c5f5a70fdc1e52a21447e729ac9"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDI2MjQ1MA==", "bodyText": "I think I got it!  I was being confused by my code logging the exception in my catch block - I kept thinking the catch block was being ignored.", "url": "https://github.com/sakaiproject/sakai/pull/8452#discussion_r470262450", "createdAt": "2020-08-13T21:35:07Z", "author": {"login": "csev"}, "path": "basiclti/basiclti-blis/src/java/org/sakaiproject/lti13/LTI13Servlet.java", "diffHunk": "@@ -295,6 +301,60 @@ protected void doPost(HttpServletRequest request, HttpServletResponse response)\n \n \t}\n \n+\t// A very locked down proxy - JSON Only\n+\tprotected void handleProxy(HttpServletRequest request, HttpServletResponse response) {\n+\t\tString proxyUrl = request.getParameter(\"proxyUrl\");\n+\t\tif ( proxyUrl == null ) {\n+\t\t\tLTI13Util.return400(response, \"Missing proxyUrl\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tSession sess = SessionManager.getCurrentSession();\n+\t\tif ( sess == null || sess.getUserId() == null ) {\n+\t\t\tLTI13Util.return400(response, \"Must be logged in\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\ttry {\n+\t\t\tjava.net.URL url = new java.net.URL(proxyUrl);\n+\t\t\tjava.net.HttpURLConnection con = (java.net.HttpURLConnection) url.openConnection();\n+\t\t\tcon.setRequestMethod(\"GET\");\n+\t\t\tcon.setConnectTimeout(3000);\n+\t\t\tcon.setReadTimeout(3000);\n+\t\t\tcon.setInstanceFollowRedirects(true);\n+\n+\t\t\tjava.io.BufferedReader in = new java.io.BufferedReader(\n+\t\t\t\tnew java.io.InputStreamReader(con.getInputStream()));\n+\t\t\tString inputLine;\n+\t\t\tStringBuffer content = new StringBuffer();\n+\t\t\twhile ((inputLine = in.readLine()) != null) {\n+\t\t\t\tcontent.append(inputLine);\n+\t\t\t}\n+\t\t\tif ( content.length() > 10000 ) {\n+\t\t\t\tin.close();\n+\t\t\t\tLTI13Util.return400(response, \"Content too long\");\n+\t\t\t\treturn;\n+\t\t\t}\n+\t\t\tin.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTM4NjkyMA=="}, "originalCommit": {"oid": "731c6164ad868c5f5a70fdc1e52a21447e729ac9"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NTMxNDI3OnYy", "diffSide": "RIGHT", "path": "basiclti/basiclti-blis/src/java/org/sakaiproject/lti13/LTI13Servlet.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNDoyODozOVrOHBZVTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNDoyOTo0MFrOHBZWKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIyNTY3OA==", "bodyText": "I believe there's potential for a DoS attack here if the input just keeps coming. It would never make it to the check after. You'd either need to use a size limited BufferedReader or a org.apache.commons.io.input.BoundedInputStream.\nThis suggests\nhttps://stackoverflow.com/a/17142341/3708872\nBufferedReader bufferedReader = new BufferedReader(\n  new InputStreamReader(\n    new BoundedInputStream(inputStream, <no-of-bytes>)\n  )\n);", "url": "https://github.com/sakaiproject/sakai/pull/8452#discussion_r471225678", "createdAt": "2020-08-17T04:28:39Z", "author": {"login": "jonespm"}, "path": "basiclti/basiclti-blis/src/java/org/sakaiproject/lti13/LTI13Servlet.java", "diffHunk": "@@ -295,6 +301,62 @@ protected void doPost(HttpServletRequest request, HttpServletResponse response)\n \n \t}\n \n+\t// A very locked down proxy - JSON Only\n+\tprotected void handleProxy(HttpServletRequest request, HttpServletResponse response) {\n+\t\tString proxyUrl = request.getParameter(\"proxyUrl\");\n+\t\tif ( proxyUrl == null ) {\n+\t\t\tLTI13Util.return400(response, \"Missing proxyUrl\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tSession sess = SessionManager.getCurrentSession();\n+\t\tif ( sess == null || sess.getUserId() == null ) {\n+\t\t\tLTI13Util.return400(response, \"Must be logged in\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\t// https://stackoverflow.com/a/43708457/1994792\n+\t\ttry {\n+\t\t\tjava.net.URL url = new java.net.URL(proxyUrl);\n+\t\t\tjava.net.HttpURLConnection con = (java.net.HttpURLConnection) url.openConnection();\n+\t\t\tcon.setRequestMethod(\"GET\");\n+\t\t\tcon.setConnectTimeout(3000);\n+\t\t\tcon.setReadTimeout(3000);\n+\t\t\tcon.setInstanceFollowRedirects(true);\n+\n+\t\t\ttry ( java.io.BufferedReader in = new java.io.BufferedReader(\n+\t\t\t\tnew java.io.InputStreamReader(con.getInputStream())) )\n+\t\t\t{\n+\t\t\t\tString inputLine;\n+\t\t\t\tStringBuffer content = new StringBuffer();\n+\t\t\t\twhile ((inputLine = in.readLine()) != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4db8a4a81481e99dcc7bea58160a12b44ebe3f4a"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIyNTg5OA==", "bodyText": "Oops I didn't see that this was merged as I was typing the comment.", "url": "https://github.com/sakaiproject/sakai/pull/8452#discussion_r471225898", "createdAt": "2020-08-17T04:29:40Z", "author": {"login": "jonespm"}, "path": "basiclti/basiclti-blis/src/java/org/sakaiproject/lti13/LTI13Servlet.java", "diffHunk": "@@ -295,6 +301,62 @@ protected void doPost(HttpServletRequest request, HttpServletResponse response)\n \n \t}\n \n+\t// A very locked down proxy - JSON Only\n+\tprotected void handleProxy(HttpServletRequest request, HttpServletResponse response) {\n+\t\tString proxyUrl = request.getParameter(\"proxyUrl\");\n+\t\tif ( proxyUrl == null ) {\n+\t\t\tLTI13Util.return400(response, \"Missing proxyUrl\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tSession sess = SessionManager.getCurrentSession();\n+\t\tif ( sess == null || sess.getUserId() == null ) {\n+\t\t\tLTI13Util.return400(response, \"Must be logged in\");\n+\t\t\treturn;\n+\t\t}\n+\n+\t\t// https://stackoverflow.com/a/43708457/1994792\n+\t\ttry {\n+\t\t\tjava.net.URL url = new java.net.URL(proxyUrl);\n+\t\t\tjava.net.HttpURLConnection con = (java.net.HttpURLConnection) url.openConnection();\n+\t\t\tcon.setRequestMethod(\"GET\");\n+\t\t\tcon.setConnectTimeout(3000);\n+\t\t\tcon.setReadTimeout(3000);\n+\t\t\tcon.setInstanceFollowRedirects(true);\n+\n+\t\t\ttry ( java.io.BufferedReader in = new java.io.BufferedReader(\n+\t\t\t\tnew java.io.InputStreamReader(con.getInputStream())) )\n+\t\t\t{\n+\t\t\t\tString inputLine;\n+\t\t\t\tStringBuffer content = new StringBuffer();\n+\t\t\t\twhile ((inputLine = in.readLine()) != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTIyNTY3OA=="}, "originalCommit": {"oid": "4db8a4a81481e99dcc7bea58160a12b44ebe3f4a"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2705, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}