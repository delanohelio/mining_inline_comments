{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc1MDAxMTQ1", "number": 7888, "title": "SAK-40672 New Site Group Manager helper including the auto-groups wizard.", "bodyText": "https://jira.sakaiproject.org/browse/SAK-40672", "createdAt": "2020-02-13T17:38:01Z", "url": "https://github.com/sakaiproject/sakai/pull/7888", "merged": true, "mergeCommit": {"oid": "928d76b78a29e383295b4e3d867cf53ddbf633cc"}, "closed": true, "closedAt": "2020-02-18T18:45:51Z", "author": {"login": "mpellicer"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcELH4ygBqjMwMzc4MzI4MjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcFmc60gFqTM2MDU2NDEzNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3f105838ddaea787c9315102939ac55507c07df4", "author": {"user": {"login": "mpellicer", "name": "Miguel Pellicer"}}, "url": "https://github.com/sakaiproject/sakai/commit/3f105838ddaea787c9315102939ac55507c07df4", "committedDate": "2020-02-13T17:34:54Z", "message": "SAK-46072 RSF Deprecation: Remove deprecated RSF group helpers and cleanup properties"}, "afterCommit": {"oid": "66435dee249a03f31bdf4d700eacda115f0017a6", "author": {"user": {"login": "mpellicer", "name": "Miguel Pellicer"}}, "url": "https://github.com/sakaiproject/sakai/commit/66435dee249a03f31bdf4d700eacda115f0017a6", "committedDate": "2020-02-14T08:19:07Z", "message": "SAK-46072 RSF Deprecation: Remove deprecated RSF group helpers and cleanup properties"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bfebdb9c0f03c46b4476a8773438ba4416176800", "author": {"user": {"login": "mpellicer", "name": "Miguel Pellicer"}}, "url": "https://github.com/sakaiproject/sakai/commit/bfebdb9c0f03c46b4476a8773438ba4416176800", "committedDate": "2020-02-17T08:57:30Z", "message": "pp"}, "afterCommit": {"oid": "a34d1276a6996c210c50423bdd4cc5b3b6cf1d8c", "author": {"user": {"login": "mpellicer", "name": "Miguel Pellicer"}}, "url": "https://github.com/sakaiproject/sakai/commit/a34d1276a6996c210c50423bdd4cc5b3b6cf1d8c", "committedDate": "2020-02-17T09:04:26Z", "message": "SAK-46072 RSF Deprecation: Remove deprecated RSF group helpers and cleanup properties"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5NjAwOTY3", "url": "https://github.com/sakaiproject/sakai/pull/7888#pullrequestreview-359600967", "createdAt": "2020-02-17T09:43:09Z", "commit": {"oid": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QwOTo0MzowOVrOFqd9gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxMzoxNTozNFrOFqkCYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA3NTM5NQ==", "bodyText": "Shouldn't this be using the sak-banner type classes? @fostersdesign", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380075395", "createdAt": "2020-02-17T09:43:09Z", "author": {"login": "adrianfish"}, "path": "site-manage/site-group-manager/src/main/webapp/WEB-INF/templates/auto_groups_step2.html", "diffHunk": "@@ -0,0 +1,87 @@\n+<!DOCTYPE html>\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\">\n+<head th:replace=\"fragments/common :: head\" />\n+<body>\n+  <div th:replace=\"fragments/common :: jQuery\" />\n+  <div class=\"portletBody\">\n+    <div id=\"menu\" th:include=\"fragments/menus :: main (autogroups)\" />\n+    <div class=\"page-header\"><h1 th:text=\"#{autogroups.header.wizard}\"></h1></div>\n+    <div th:replace=\"fragments/wizard :: step (step2)\" /><br/>\n+    <div class=\"row\" th:if=\"${step2ErrorMessage != null}\">\n+      <div class=\"col-sm-8\">\n+        <div class=\"sak-banner-error\" th:text=\"${step2ErrorMessage}\">You must at least select a role or a section.</div>\n+      </div>\n+    </div>\n+    <div class=\"row\">\n+      <div class=\"col-sm-8\">\n+        <div class=\"well\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA3OTExMQ==", "bodyText": "The font for this instruction looks really small compared to the rest of the text. It doesn't seem prominent enough, to me.", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380079111", "createdAt": "2020-02-17T09:49:39Z", "author": {"login": "adrianfish"}, "path": "site-manage/site-group-manager/src/main/webapp/WEB-INF/templates/auto_groups_step2.html", "diffHunk": "@@ -0,0 +1,87 @@\n+<!DOCTYPE html>\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\">\n+<head th:replace=\"fragments/common :: head\" />\n+<body>\n+  <div th:replace=\"fragments/common :: jQuery\" />\n+  <div class=\"portletBody\">\n+    <div id=\"menu\" th:include=\"fragments/menus :: main (autogroups)\" />\n+    <div class=\"page-header\"><h1 th:text=\"#{autogroups.header.wizard}\"></h1></div>\n+    <div th:replace=\"fragments/wizard :: step (step2)\" /><br/>\n+    <div class=\"row\" th:if=\"${step2ErrorMessage != null}\">\n+      <div class=\"col-sm-8\">\n+        <div class=\"sak-banner-error\" th:text=\"${step2ErrorMessage}\">You must at least select a role or a section.</div>\n+      </div>\n+    </div>\n+    <div class=\"row\">\n+      <div class=\"col-sm-8\">\n+        <div class=\"well\">\n+          <div th:text=\"#{autogroups.step2.role.info}\">We see that you have selected to make groups of participants in the following role(s):</div>\n+            <ul>\n+              <li th:each=\"role : ${autoGroupsForm.selectedRoleList}\"><span th:text=\"${role}\"></span></li>\n+            </ul>\n+          </div>\n+      </div>\n+    </div>\n+    <div class=\"row\">\n+      <div class=\"col-sm-8\">\n+        <div class=\"instruction\" th:text=\"#{autogroups.step2.info}\">You now have the option to draw group members from specific section(s)/Roster(s). Would you like to do this?</div>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA4MjkyMg==", "bodyText": "IMO, too much indentation here. Also, would it not be better to just have the inputs on the same line as the label? The inputs are really long for the amount of input they'll have so it just seems like a waste of vertical real estate.", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380082922", "createdAt": "2020-02-17T09:56:25Z", "author": {"login": "adrianfish"}, "path": "site-manage/site-group-manager/src/main/webapp/WEB-INF/templates/auto_groups_step3.html", "diffHunk": "@@ -0,0 +1,115 @@\n+<!DOCTYPE html>\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\">\n+<head th:replace=\"fragments/common :: head\" />\n+<body>\n+  <div th:replace=\"fragments/common :: jQuery\" />\n+  <div class=\"portletBody\">\n+    <div id=\"menu\" th:include=\"fragments/menus :: main (autogroups)\" />\n+    <div class=\"page-header\"><h1 th:text=\"#{autogroups.header.wizard}\"></h1></div>\n+    <div th:replace=\"fragments/wizard :: step (step3)\" /><br/>\n+    <div class=\"row\">\n+      <div class=\"col-sm-8\">\n+        <div class=\"well\">\n+          <div th:text=\"#{autogroups.step3.role.info}\">We see that you have selected to make groups of participants in the following role(s):</div>\n+            <ul>\n+              <li th:each=\"role : ${autoGroupsForm.selectedRoleList}\"><span th:text=\"${role}\"></span></li>\n+            </ul>\n+          <div th:if=\"${!selectedSectionList.isEmpty()}\" th:text=\"#{autogroups.step3.section.info}\">who are included in the following section(s)/roster(s):</div>\n+            <ul th:if=\"${!selectedSectionList.isEmpty()}\">\n+              <li th:each=\"section : ${selectedSectionList}\"><span th:text=\"${section.title}\"></span></li>\n+            </ul>\n+        </div>\n+      </div>\n+    </div>\n+    <div class=\"row\">\n+      <div class=\"col-sm-8\">\n+        <div class=\"instruction\" th:text=\"#{autogroups.step3.info}\">Now you are ready to define the group membership format/structure. Please select an option below.</div>\n+      </div>\n+    </div>\n+    <div class=\"row\">\n+      <div class=\"col-sm-8\">\n+        <form id=\"autogroups-wizard-step3-form\" th:action=\"@{/autogroups/submitStep3}\" th:object=\"${autoGroupsForm}\" method=\"post\">\n+          <input type=\"hidden\" name=\"wizardAction\" id=\"wizardAction\" value=\"\"/>\n+          <input type=\"hidden\" th:field=\"*{selectedRoleList}\" name=\"selectedRoleList\">\n+          <input type=\"hidden\" th:field=\"*{selectedSectionList}\" name=\"selectedSectionList\">\n+          <input type=\"hidden\" th:field=\"*{sectionsOption}\" name=\"sectionsOption\">\n+          <div class=\"radio\">\n+            <label for=\"pureConfiguration\"><input id=\"pureConfiguration\" type=\"radio\" name=\"structureConfigurationOption\" checked value=\"0\" th:field=\"*{structureConfigurationOption}\"><span th:text=\"#{autogroups.step3.option.mixture}\">Create groups containing a random mixture of users with the role XX, YY and ZZ </label>\n+          </div>\n+          <div id=\"mixtureStructureOptions\" class=\"col-sm-offset-1\" th:style=\"${autoGroupsForm.structureConfigurationOption == 1 ? 'display:none': 'display:block'}\">\n+            <div id=\"splitByGroups\" th:class=\"${autoGroupsForm.splitOptions == 0 ? 'optGroupSelect optGroupSelectSelected' : 'optGroupSelect'}\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA5ODgyMg==", "bodyText": "The animation between the split options is confusing for me, all the fading out and in, then the accordion type effect. Personally, I hate all that jquery fade in and out stuff, just congnitive load for me. But, that is just my opinion. I'd approach T&L about that, or Pepperdine.\nMy personal preference here would be to have the group title in its own line, outside of the radio groups. You always set a title. Then, just have the two inputs for number of users and groups just appear when you click the radio, no animation. Again, my preference in a UI, that's all. Everybody's different!", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380098822", "createdAt": "2020-02-17T10:26:16Z", "author": {"login": "adrianfish"}, "path": "site-manage/site-group-manager/src/main/webapp/WEB-INF/templates/auto_groups_step3.html", "diffHunk": "@@ -0,0 +1,115 @@\n+<!DOCTYPE html>\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\">\n+<head th:replace=\"fragments/common :: head\" />\n+<body>\n+  <div th:replace=\"fragments/common :: jQuery\" />\n+  <div class=\"portletBody\">\n+    <div id=\"menu\" th:include=\"fragments/menus :: main (autogroups)\" />\n+    <div class=\"page-header\"><h1 th:text=\"#{autogroups.header.wizard}\"></h1></div>\n+    <div th:replace=\"fragments/wizard :: step (step3)\" /><br/>\n+    <div class=\"row\">\n+      <div class=\"col-sm-8\">\n+        <div class=\"well\">\n+          <div th:text=\"#{autogroups.step3.role.info}\">We see that you have selected to make groups of participants in the following role(s):</div>\n+            <ul>\n+              <li th:each=\"role : ${autoGroupsForm.selectedRoleList}\"><span th:text=\"${role}\"></span></li>\n+            </ul>\n+          <div th:if=\"${!selectedSectionList.isEmpty()}\" th:text=\"#{autogroups.step3.section.info}\">who are included in the following section(s)/roster(s):</div>\n+            <ul th:if=\"${!selectedSectionList.isEmpty()}\">\n+              <li th:each=\"section : ${selectedSectionList}\"><span th:text=\"${section.title}\"></span></li>\n+            </ul>\n+        </div>\n+      </div>\n+    </div>\n+    <div class=\"row\">\n+      <div class=\"col-sm-8\">\n+        <div class=\"instruction\" th:text=\"#{autogroups.step3.info}\">Now you are ready to define the group membership format/structure. Please select an option below.</div>\n+      </div>\n+    </div>\n+    <div class=\"row\">\n+      <div class=\"col-sm-8\">\n+        <form id=\"autogroups-wizard-step3-form\" th:action=\"@{/autogroups/submitStep3}\" th:object=\"${autoGroupsForm}\" method=\"post\">\n+          <input type=\"hidden\" name=\"wizardAction\" id=\"wizardAction\" value=\"\"/>\n+          <input type=\"hidden\" th:field=\"*{selectedRoleList}\" name=\"selectedRoleList\">\n+          <input type=\"hidden\" th:field=\"*{selectedSectionList}\" name=\"selectedSectionList\">\n+          <input type=\"hidden\" th:field=\"*{sectionsOption}\" name=\"sectionsOption\">\n+          <div class=\"radio\">\n+            <label for=\"pureConfiguration\"><input id=\"pureConfiguration\" type=\"radio\" name=\"structureConfigurationOption\" checked value=\"0\" th:field=\"*{structureConfigurationOption}\"><span th:text=\"#{autogroups.step3.option.mixture}\">Create groups containing a random mixture of users with the role XX, YY and ZZ </label>\n+          </div>\n+          <div id=\"mixtureStructureOptions\" class=\"col-sm-offset-1\" th:style=\"${autoGroupsForm.structureConfigurationOption == 1 ? 'display:none': 'display:block'}\">\n+            <div id=\"splitByGroups\" th:class=\"${autoGroupsForm.splitOptions == 0 ? 'optGroupSelect optGroupSelectSelected' : 'optGroupSelect'}\">", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDA4MjkyMg=="}, "originalCommit": {"oid": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDEzODEyNA==", "bodyText": "Need some tooltips here, for mouse users.", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380138124", "createdAt": "2020-02-17T11:51:47Z", "author": {"login": "adrianfish"}, "path": "site-manage/site-group-manager/src/main/webapp/WEB-INF/templates/group.html", "diffHunk": "@@ -0,0 +1,151 @@\n+<!DOCTYPE html>\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\">\n+<head th:replace=\"fragments/common :: head\" />\n+<body>\n+  <div th:replace=\"fragments/common :: jQuery\" />\n+  <div class=\"portletBody\">\n+    <div id=\"menu\" th:include=\"fragments/menus :: main (group)\" />\n+    <div class=\"page-header\">\n+      <h1 th:if=\"${groupForm.groupId == null}\" th:text=\"#{groups.header.new}\"></h1>\n+      <h1 th:if=\"${groupForm.groupId != null}\" th:text=\"#{groups.header.edit}\"></h1>\n+    </div>\n+    <div class=\"row\">\n+      <div class=\"col-sm-8\">\n+        <div class=\"sak-banner-error\" th:if=\"${errorMessage != null}\" th:text=\"${errorMessage}\"></div>\n+        <div class=\"instruction\" th:text=\"#{groups.instruction}\"></div>\n+      </div>\n+    </div>\n+    <form id=\"creategroup-form\" action=\"#\" th:action=\"@{/saveGroup}\" th:object=\"${groupForm}\" method=\"post\">\n+      <input type=\"hidden\" id=\"groupId\" name=\"groupId\" th:field=\"*{groupId}\"/>\n+      <input type=\"hidden\" id=\"filterByGroupId\" name=\"filterByGroupId\" th:field=\"*{filterByGroupId}\"/>\n+      <div class=\"form-group row\">\n+        <div class=\"col-sm-8\">\n+          <label for=\"groupTitle\" class=\"form-control-label block\" th:text=\"|* #{groups.title}|\">* Group Title</label>\n+          <input name=\"groupTitle\" id=\"groupTitle\" type=\"text\" th:field=\"*{groupTitle}\" size=\"50\" maxlength=\"99\" class=\"form-control\" th:placeholder=\"#{groups.title}\" required/>\n+        </div>\n+      </div>\n+      <div class=\"form-group row\">\n+        <div class=\"col-sm-8\">\n+          <label for=\"groupDescription\" class=\"form-control-label block\" th:text=\"#{groups.description}\">Description</label>\n+          <textarea name=\"groupDescription\" class=\"form-control\" rows=\"10\" cols=\"80\" th:field=\"*{groupDescription}\" th:placeholder=\"#{groups.description}\"></textarea>\n+        </div>\n+      </div>\n+      <div class=\"checkbox\">\n+        <label for=\"groupAllowViewMembership\" class=\"form-control-label block\">\n+          <input id=\"groupAllowViewMembership\" class=\"form-control\" type=\"checkbox\" th:field=\"*{groupAllowViewMembership}\" th:checked=\"${groupForm.groupAllowViewMembership}\"/>\n+          <span th:text=\"#{groups.allowviewmembership}\"></span>\n+        </label>\n+      </div>\n+      <div class=\"form-group row\" th:if=\"${!joinableSetList.isEmpty()}\">\n+        <div class=\"col-sm-8\">\n+          <label for=\"groupJoinableSet\" class=\"form-control-label block\" th:text=\"#{groups.joinableset}\">Joinable Set</label>\n+          <select class=\"form-control\" id=\"groupJoinableSet\" th:field=\"*{joinableSetName}\">\n+            <option value=\"\" th:text=\"#{groups.none}\">\n+            <option th:each=\"joinableSet : ${joinableSetList}\" th:value=\"${joinableSet}\" th:text=\"${joinableSet}\">\n+          </select>\n+        </div>\n+      </div>\n+      <div id=\"joinableOptionsDiv\" class=\"form-group row\" th:if=\"${!joinableSetList.isEmpty()}\">\n+        <div class=\"col-sm-8\">\n+          <div class=\"well\">\n+            <div class=\"checkbox\">\n+              <label for=\"groupAllowPreviewMembership\" class=\"form-control-label block\">\n+                <input id=\"groupAllowPreviewMembership\" class=\"form-control\" type=\"checkbox\" th:field=\"*{groupAllowPreviewMembership}\" th:checked=\"${groupForm.groupAllowPreviewMembership}\"/>\n+                <span th:text=\"#{groups.joinableset.allowpreviewmembership}\"></span>\n+              </label>\n+            </div>\n+            <div class=\"checkbox\">\n+              <label for=\"groupUnjoinable\" class=\"form-control-label block\">\n+                <input id=\"groupUnjoinable\" class=\"form-control\" type=\"checkbox\" th:field=\"*{groupUnjoinable}\" th:checked=\"${groupForm.groupUnjoinable}\"/>\n+                <span th:text=\"#{groups.joinableset.allowunjoin}\"></span>\n+              </label>\n+            </div>\n+            <label for=\"joinableSetNumOfMembers\" class=\"form-control-label block\" th:text=\"#{groups.joinableset.maxmembers}\">Max members:</label>\n+            <input name=\"joinableSetNumOfMembers\" id=\"joinableSetNumOfMembers\" type=\"number\" th:field=\"*{joinableSetNumOfMembers}\" min=\"0\" max=\"999\" class=\"form-control\" th:placeholder=\"#{groups.joinableset.maxmembers}\"/>\n+          </div>\n+        </div>\n+      </div>\n+      <div class=\"form-group row\" th:if=\"${!groupList.isEmpty() && !sectionList.isEmpty()}\">\n+        <div class=\"col-sm-8\">\n+          <label for=\"groupMembershipFilter\" class=\"form-control-label block\" th:text=\"#{groups.filter.membership}\">Filter membership</label>\n+          <select class=\"form-control\" id=\"groupMembershipFilter\" th:field=\"*{filterByGroupId}\">\n+            <option value=\"\" th:text=\"#{groups.none}\">\n+            <option th:each=\"group : ${groupList}\" th:value=\"${group.id}\" th:text=\"|#{groups.filter.membership.group} ${group.title}|\">\n+            <option th:each=\"section : ${sectionList}\" th:value=\"${section.id}\" th:text=\"|#{groups.filter.membership.section} ${section.title}|\">\n+          </select>\n+        </div>\n+      </div>\n+      <div class=\"form-group row\">\n+          <div class=\"col-sm-3\">\n+            <label for=\"groupMembersFrom\" class=\"form-control-label block\" th:text=\"#{groups.available.members}\">Available Members</label>\n+            <select name=\"groupMembersFrom\" id=\"groupMembersFrom\" class=\"form-control\" multiple=\"multiple\" size=\"8\">\n+              <option th:if=\"${groupForm.groupMembers == null || !groupForm.groupMembers.contains(siteRole.id)}\" th:each=\"siteRole : ${siteRoleList}\" th:value=\"${siteRole.id}\" th:text=\"|#{groups.role} ${siteRole.id}|\"></option>\n+              <option th:if=\"${groupForm.groupMembers == null || !groupForm.groupMembers.contains(siteMember.id)}\" th:each=\"siteMember : ${siteMemberList}\" th:value=\"${siteMember.id}\" th:text=\"|${siteMember.displayName} (${siteMember.eid})|\"></option>\n+            </select>\n+          </div>\n+          <div class=\"col-sm-2\">\n+            <label for=\"groupMembersFrom_rightAll\" class=\"form-control-label block\" th:text=\"#{groups.membership.controls}\">Membership controls</label>\n+            <button type=\"button\" id=\"groupMembersFrom_rightAll\" class=\"btn btn-block\"><i class=\"glyphicon glyphicon-forward\"></i></button>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE0ODI2Mg==", "bodyText": "Need to wrap this a bit!", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380148262", "createdAt": "2020-02-17T12:15:27Z", "author": {"login": "adrianfish"}, "path": "site-manage/site-group-manager/src/main/java/org/sakaiproject/groupmanager/controller/AutoGroupsController.java", "diffHunk": "@@ -0,0 +1,417 @@\n+/****************************************************************************** \n+* Copyright (c) 2020 Apereo Foundation\n+\n+* Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+\n+*          http://opensource.org/licenses/ecl2\n+\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+ ******************************************************************************/\n+package org.sakaiproject.groupmanager.controller;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.ModelAttribute;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+\n+import com.google.gson.Gson;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.collections4.ListUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.sakaiproject.authz.api.Member;\n+import org.sakaiproject.groupmanager.constants.GroupManagerConstants;\n+import org.sakaiproject.groupmanager.form.AutoGroupsForm;\n+import org.sakaiproject.groupmanager.service.SakaiService;\n+import org.sakaiproject.site.api.Group;\n+import org.sakaiproject.site.api.Site;\n+import org.sakaiproject.site.api.SiteService;\n+import org.sakaiproject.sitemanage.api.SiteHelper;\n+import org.sakaiproject.user.api.User;\n+\n+@Slf4j\n+@Controller\n+public class AutoGroupsController {   \n+\n+    @Inject\n+    private MessageSource messageSource;\n+\n+    @Autowired\n+    private SakaiService sakaiService;\n+\n+    @RequestMapping(value = \"/autogroups\")\n+    public String showStep1(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep1() called with values {}\", autoGroupsForm);\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Fill the model attributes.\n+        model.addAttribute(\"siteRoleList\", site.getRoles());\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm == null ? new AutoGroupsForm() : autoGroupsForm);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP1_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep1\")\n+    public String submitStep1(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"submitStep1() called with values {}.\", autoGroupsForm);\n+        \n+        // Display an error if the selected role list is empty.\n+        if (autoGroupsForm.getSelectedRoleList() == null || autoGroupsForm.getSelectedRoleList().isEmpty()) {\n+            model.addAttribute(\"step1ErrorMessage\", messageSource.getMessage(\"autogroups.step1.error.emptyroles\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep1(model, autoGroupsForm);\n+        }\n+\n+        return showStep2(model, autoGroupsForm);\n+    }\n+    \n+    @RequestMapping(value = \"/autogroups/step2\")\n+    public String showStep2(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep2() called with values {}\", autoGroupsForm);\n+\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Build the section list.\n+        List<Group> sectionList = site.getGroups().stream().filter(group -> group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED) == null || !Boolean.valueOf(group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED)).booleanValue()).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1MDA1MQ==", "bodyText": "Don't need <Group>", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380150051", "createdAt": "2020-02-17T12:19:19Z", "author": {"login": "adrianfish"}, "path": "site-manage/site-group-manager/src/main/java/org/sakaiproject/groupmanager/controller/AutoGroupsController.java", "diffHunk": "@@ -0,0 +1,417 @@\n+/****************************************************************************** \n+* Copyright (c) 2020 Apereo Foundation\n+\n+* Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+\n+*          http://opensource.org/licenses/ecl2\n+\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+ ******************************************************************************/\n+package org.sakaiproject.groupmanager.controller;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.ModelAttribute;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+\n+import com.google.gson.Gson;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.collections4.ListUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.sakaiproject.authz.api.Member;\n+import org.sakaiproject.groupmanager.constants.GroupManagerConstants;\n+import org.sakaiproject.groupmanager.form.AutoGroupsForm;\n+import org.sakaiproject.groupmanager.service.SakaiService;\n+import org.sakaiproject.site.api.Group;\n+import org.sakaiproject.site.api.Site;\n+import org.sakaiproject.site.api.SiteService;\n+import org.sakaiproject.sitemanage.api.SiteHelper;\n+import org.sakaiproject.user.api.User;\n+\n+@Slf4j\n+@Controller\n+public class AutoGroupsController {   \n+\n+    @Inject\n+    private MessageSource messageSource;\n+\n+    @Autowired\n+    private SakaiService sakaiService;\n+\n+    @RequestMapping(value = \"/autogroups\")\n+    public String showStep1(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep1() called with values {}\", autoGroupsForm);\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Fill the model attributes.\n+        model.addAttribute(\"siteRoleList\", site.getRoles());\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm == null ? new AutoGroupsForm() : autoGroupsForm);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP1_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep1\")\n+    public String submitStep1(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"submitStep1() called with values {}.\", autoGroupsForm);\n+        \n+        // Display an error if the selected role list is empty.\n+        if (autoGroupsForm.getSelectedRoleList() == null || autoGroupsForm.getSelectedRoleList().isEmpty()) {\n+            model.addAttribute(\"step1ErrorMessage\", messageSource.getMessage(\"autogroups.step1.error.emptyroles\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep1(model, autoGroupsForm);\n+        }\n+\n+        return showStep2(model, autoGroupsForm);\n+    }\n+    \n+    @RequestMapping(value = \"/autogroups/step2\")\n+    public String showStep2(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep2() called with values {}\", autoGroupsForm);\n+\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Build the section list.\n+        List<Group> sectionList = site.getGroups().stream().filter(group -> group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED) == null || !Boolean.valueOf(group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED)).booleanValue()).collect(Collectors.toList());\n+\n+        //Fill the model attributes.\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm);\n+        model.addAttribute(\"sectionList\", sectionList);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP2_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep2\")\n+    public String submitStep2(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm, @RequestParam(required=false) String wizardAction) {\n+        log.debug(\"submitStep2() called with values {} and action {}.\", autoGroupsForm, wizardAction);\n+\n+        // If the submit was done by a back button or link, redirect to the previous step with the wizard values.\n+        if (StringUtils.isNotBlank(wizardAction)) {\n+            switch (wizardAction) {\n+                case GroupManagerConstants.WIZARD_BACK_ACTION:\n+                case GroupManagerConstants.WIZARD_STEP1_ACTION:\n+                default:\n+                    return showStep1(model, autoGroupsForm);\n+            }\n+        }\n+\n+        // Clean the list if the 'dont use sections' option has been selected\n+        if (GroupManagerConstants.SECTIONS_OPTION_DONT_USE_SECTIONS == autoGroupsForm.getSectionsOption()) {\n+            autoGroupsForm.setSelectedSectionList(new ArrayList<String>());\n+        }\n+\n+        // Display an error if 'use sections' option has been selected and the list is empty.\n+        if (GroupManagerConstants.SECTIONS_OPTION_USE_SECTIONS == autoGroupsForm.getSectionsOption() && autoGroupsForm.getSelectedSectionList().isEmpty()) {\n+            model.addAttribute(\"step2ErrorMessage\", messageSource.getMessage(\"autogroups.step2.error.emptysections\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep2(model, autoGroupsForm);\n+        }\n+\n+        // At least one of the lists, roles or sections, should have a value, perform a validation.\n+        if (autoGroupsForm.getSelectedRoleList().isEmpty() && autoGroupsForm.getSelectedSectionList().isEmpty()) {\n+            model.addAttribute(\"step2ErrorMessage\", messageSource.getMessage(\"autogroups.step2.error.emptylists\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep2(model, autoGroupsForm);\n+        }\n+\n+        // Avoid duplicates\n+        autoGroupsForm.setSelectedRoleList(autoGroupsForm.getSelectedRoleList().stream().distinct().collect(Collectors.toList()));\n+        autoGroupsForm.setSelectedSectionList(autoGroupsForm.getSelectedSectionList().stream().distinct().collect(Collectors.toList()));\n+\n+        return showStep3(model, autoGroupsForm);\n+    }\n+\n+    @RequestMapping(value = \"/autogroups/step3\")\n+    public String showStep3(Model model, AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep3() called with values {}\", autoGroupsForm);\n+\n+        List<String> selectedSectionIdList = autoGroupsForm.getSelectedSectionList();\n+        List<Group> selectedSectionList = new ArrayList<Group>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1Mjk0NQ==", "bodyText": "List selectedSectionList = selectedSectionIdList.stream().map(sakaiService::findByGroupId).filter(Objects::nonNull).collect(Collectors.toList());\nMaybe a bit slower. Your choice, of course :)", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380152945", "createdAt": "2020-02-17T12:25:56Z", "author": {"login": "adrianfish"}, "path": "site-manage/site-group-manager/src/main/java/org/sakaiproject/groupmanager/controller/AutoGroupsController.java", "diffHunk": "@@ -0,0 +1,417 @@\n+/****************************************************************************** \n+* Copyright (c) 2020 Apereo Foundation\n+\n+* Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+\n+*          http://opensource.org/licenses/ecl2\n+\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+ ******************************************************************************/\n+package org.sakaiproject.groupmanager.controller;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.ModelAttribute;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+\n+import com.google.gson.Gson;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.collections4.ListUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.sakaiproject.authz.api.Member;\n+import org.sakaiproject.groupmanager.constants.GroupManagerConstants;\n+import org.sakaiproject.groupmanager.form.AutoGroupsForm;\n+import org.sakaiproject.groupmanager.service.SakaiService;\n+import org.sakaiproject.site.api.Group;\n+import org.sakaiproject.site.api.Site;\n+import org.sakaiproject.site.api.SiteService;\n+import org.sakaiproject.sitemanage.api.SiteHelper;\n+import org.sakaiproject.user.api.User;\n+\n+@Slf4j\n+@Controller\n+public class AutoGroupsController {   \n+\n+    @Inject\n+    private MessageSource messageSource;\n+\n+    @Autowired\n+    private SakaiService sakaiService;\n+\n+    @RequestMapping(value = \"/autogroups\")\n+    public String showStep1(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep1() called with values {}\", autoGroupsForm);\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Fill the model attributes.\n+        model.addAttribute(\"siteRoleList\", site.getRoles());\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm == null ? new AutoGroupsForm() : autoGroupsForm);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP1_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep1\")\n+    public String submitStep1(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"submitStep1() called with values {}.\", autoGroupsForm);\n+        \n+        // Display an error if the selected role list is empty.\n+        if (autoGroupsForm.getSelectedRoleList() == null || autoGroupsForm.getSelectedRoleList().isEmpty()) {\n+            model.addAttribute(\"step1ErrorMessage\", messageSource.getMessage(\"autogroups.step1.error.emptyroles\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep1(model, autoGroupsForm);\n+        }\n+\n+        return showStep2(model, autoGroupsForm);\n+    }\n+    \n+    @RequestMapping(value = \"/autogroups/step2\")\n+    public String showStep2(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep2() called with values {}\", autoGroupsForm);\n+\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Build the section list.\n+        List<Group> sectionList = site.getGroups().stream().filter(group -> group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED) == null || !Boolean.valueOf(group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED)).booleanValue()).collect(Collectors.toList());\n+\n+        //Fill the model attributes.\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm);\n+        model.addAttribute(\"sectionList\", sectionList);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP2_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep2\")\n+    public String submitStep2(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm, @RequestParam(required=false) String wizardAction) {\n+        log.debug(\"submitStep2() called with values {} and action {}.\", autoGroupsForm, wizardAction);\n+\n+        // If the submit was done by a back button or link, redirect to the previous step with the wizard values.\n+        if (StringUtils.isNotBlank(wizardAction)) {\n+            switch (wizardAction) {\n+                case GroupManagerConstants.WIZARD_BACK_ACTION:\n+                case GroupManagerConstants.WIZARD_STEP1_ACTION:\n+                default:\n+                    return showStep1(model, autoGroupsForm);\n+            }\n+        }\n+\n+        // Clean the list if the 'dont use sections' option has been selected\n+        if (GroupManagerConstants.SECTIONS_OPTION_DONT_USE_SECTIONS == autoGroupsForm.getSectionsOption()) {\n+            autoGroupsForm.setSelectedSectionList(new ArrayList<String>());\n+        }\n+\n+        // Display an error if 'use sections' option has been selected and the list is empty.\n+        if (GroupManagerConstants.SECTIONS_OPTION_USE_SECTIONS == autoGroupsForm.getSectionsOption() && autoGroupsForm.getSelectedSectionList().isEmpty()) {\n+            model.addAttribute(\"step2ErrorMessage\", messageSource.getMessage(\"autogroups.step2.error.emptysections\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep2(model, autoGroupsForm);\n+        }\n+\n+        // At least one of the lists, roles or sections, should have a value, perform a validation.\n+        if (autoGroupsForm.getSelectedRoleList().isEmpty() && autoGroupsForm.getSelectedSectionList().isEmpty()) {\n+            model.addAttribute(\"step2ErrorMessage\", messageSource.getMessage(\"autogroups.step2.error.emptylists\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep2(model, autoGroupsForm);\n+        }\n+\n+        // Avoid duplicates\n+        autoGroupsForm.setSelectedRoleList(autoGroupsForm.getSelectedRoleList().stream().distinct().collect(Collectors.toList()));\n+        autoGroupsForm.setSelectedSectionList(autoGroupsForm.getSelectedSectionList().stream().distinct().collect(Collectors.toList()));\n+\n+        return showStep3(model, autoGroupsForm);\n+    }\n+\n+    @RequestMapping(value = \"/autogroups/step3\")\n+    public String showStep3(Model model, AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep3() called with values {}\", autoGroupsForm);\n+\n+        List<String> selectedSectionIdList = autoGroupsForm.getSelectedSectionList();\n+        List<Group> selectedSectionList = new ArrayList<Group>();\n+\n+        // Build the section object list, we need the objects to display the section names.\n+        for (String groupId : selectedSectionIdList) {\n+            Group group = sakaiService.findGroupById(groupId);\n+            if (group != null) {\n+                selectedSectionList.add(group);\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1"}, "originalPosition": 162}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1Mzc1Ng==", "bodyText": "You can remove the types on these.", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380153756", "createdAt": "2020-02-17T12:27:48Z", "author": {"login": "adrianfish"}, "path": "site-manage/site-group-manager/src/main/java/org/sakaiproject/groupmanager/controller/AutoGroupsController.java", "diffHunk": "@@ -0,0 +1,417 @@\n+/****************************************************************************** \n+* Copyright (c) 2020 Apereo Foundation\n+\n+* Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+\n+*          http://opensource.org/licenses/ecl2\n+\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+ ******************************************************************************/\n+package org.sakaiproject.groupmanager.controller;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.ModelAttribute;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+\n+import com.google.gson.Gson;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.collections4.ListUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.sakaiproject.authz.api.Member;\n+import org.sakaiproject.groupmanager.constants.GroupManagerConstants;\n+import org.sakaiproject.groupmanager.form.AutoGroupsForm;\n+import org.sakaiproject.groupmanager.service.SakaiService;\n+import org.sakaiproject.site.api.Group;\n+import org.sakaiproject.site.api.Site;\n+import org.sakaiproject.site.api.SiteService;\n+import org.sakaiproject.sitemanage.api.SiteHelper;\n+import org.sakaiproject.user.api.User;\n+\n+@Slf4j\n+@Controller\n+public class AutoGroupsController {   \n+\n+    @Inject\n+    private MessageSource messageSource;\n+\n+    @Autowired\n+    private SakaiService sakaiService;\n+\n+    @RequestMapping(value = \"/autogroups\")\n+    public String showStep1(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep1() called with values {}\", autoGroupsForm);\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Fill the model attributes.\n+        model.addAttribute(\"siteRoleList\", site.getRoles());\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm == null ? new AutoGroupsForm() : autoGroupsForm);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP1_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep1\")\n+    public String submitStep1(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"submitStep1() called with values {}.\", autoGroupsForm);\n+        \n+        // Display an error if the selected role list is empty.\n+        if (autoGroupsForm.getSelectedRoleList() == null || autoGroupsForm.getSelectedRoleList().isEmpty()) {\n+            model.addAttribute(\"step1ErrorMessage\", messageSource.getMessage(\"autogroups.step1.error.emptyroles\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep1(model, autoGroupsForm);\n+        }\n+\n+        return showStep2(model, autoGroupsForm);\n+    }\n+    \n+    @RequestMapping(value = \"/autogroups/step2\")\n+    public String showStep2(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep2() called with values {}\", autoGroupsForm);\n+\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Build the section list.\n+        List<Group> sectionList = site.getGroups().stream().filter(group -> group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED) == null || !Boolean.valueOf(group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED)).booleanValue()).collect(Collectors.toList());\n+\n+        //Fill the model attributes.\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm);\n+        model.addAttribute(\"sectionList\", sectionList);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP2_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep2\")\n+    public String submitStep2(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm, @RequestParam(required=false) String wizardAction) {\n+        log.debug(\"submitStep2() called with values {} and action {}.\", autoGroupsForm, wizardAction);\n+\n+        // If the submit was done by a back button or link, redirect to the previous step with the wizard values.\n+        if (StringUtils.isNotBlank(wizardAction)) {\n+            switch (wizardAction) {\n+                case GroupManagerConstants.WIZARD_BACK_ACTION:\n+                case GroupManagerConstants.WIZARD_STEP1_ACTION:\n+                default:\n+                    return showStep1(model, autoGroupsForm);\n+            }\n+        }\n+\n+        // Clean the list if the 'dont use sections' option has been selected\n+        if (GroupManagerConstants.SECTIONS_OPTION_DONT_USE_SECTIONS == autoGroupsForm.getSectionsOption()) {\n+            autoGroupsForm.setSelectedSectionList(new ArrayList<String>());\n+        }\n+\n+        // Display an error if 'use sections' option has been selected and the list is empty.\n+        if (GroupManagerConstants.SECTIONS_OPTION_USE_SECTIONS == autoGroupsForm.getSectionsOption() && autoGroupsForm.getSelectedSectionList().isEmpty()) {\n+            model.addAttribute(\"step2ErrorMessage\", messageSource.getMessage(\"autogroups.step2.error.emptysections\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep2(model, autoGroupsForm);\n+        }\n+\n+        // At least one of the lists, roles or sections, should have a value, perform a validation.\n+        if (autoGroupsForm.getSelectedRoleList().isEmpty() && autoGroupsForm.getSelectedSectionList().isEmpty()) {\n+            model.addAttribute(\"step2ErrorMessage\", messageSource.getMessage(\"autogroups.step2.error.emptylists\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep2(model, autoGroupsForm);\n+        }\n+\n+        // Avoid duplicates\n+        autoGroupsForm.setSelectedRoleList(autoGroupsForm.getSelectedRoleList().stream().distinct().collect(Collectors.toList()));\n+        autoGroupsForm.setSelectedSectionList(autoGroupsForm.getSelectedSectionList().stream().distinct().collect(Collectors.toList()));\n+\n+        return showStep3(model, autoGroupsForm);\n+    }\n+\n+    @RequestMapping(value = \"/autogroups/step3\")\n+    public String showStep3(Model model, AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep3() called with values {}\", autoGroupsForm);\n+\n+        List<String> selectedSectionIdList = autoGroupsForm.getSelectedSectionList();\n+        List<Group> selectedSectionList = new ArrayList<Group>();\n+\n+        // Build the section object list, we need the objects to display the section names.\n+        for (String groupId : selectedSectionIdList) {\n+            Group group = sakaiService.findGroupById(groupId);\n+            if (group != null) {\n+                selectedSectionList.add(group);\n+            }\n+        }\n+\n+        // Fill the model attributes\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm);\n+        model.addAttribute(\"selectedSectionList\", selectedSectionList);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP3_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep3\")\n+    public String submitStep3(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm, @RequestParam(required=false) String wizardAction) {\n+        log.debug(\"submitStep3() called with values {} and action {}.\", autoGroupsForm, wizardAction);\n+\n+        // If the submit was done by a back button, redirect to the previous step with the wizard values.\n+        if (StringUtils.isNotBlank(wizardAction)) {\n+            switch (wizardAction) {\n+                case GroupManagerConstants.WIZARD_BACK_ACTION:\n+                case GroupManagerConstants.WIZARD_STEP2_ACTION:\n+                    return showStep2(model, autoGroupsForm);\n+                case GroupManagerConstants.WIZARD_STEP1_ACTION:\n+                default:\n+                    return showStep1(model, autoGroupsForm);\n+            }\n+        }\n+\n+        // Variable definition\n+        Locale userLocale = sakaiService.getCurrentUserLocale();\n+\n+        // Avoid duplicates\n+        autoGroupsForm.setSelectedRoleList(autoGroupsForm.getSelectedRoleList().stream().distinct().collect(Collectors.toList()));\n+        autoGroupsForm.setSelectedSectionList(autoGroupsForm.getSelectedSectionList().stream().distinct().collect(Collectors.toList()));\n+\n+        // Check the options and perform the validations considering the options\n+        if (GroupManagerConstants.STRUCTURE_CONFIGURATION_MIXTURE == autoGroupsForm.getStructureConfigurationOption()) {\n+            boolean titleError = false;\n+            boolean numberError = false;\n+\n+            if (GroupManagerConstants.SPLIT_OPTIONS_BY_GROUP == autoGroupsForm.getSplitOptions()) {\n+                titleError = StringUtils.isBlank(autoGroupsForm.getGroupTitleByGroup());\n+                numberError = autoGroupsForm.getGroupNumberByGroup() <= 0 || autoGroupsForm.getGroupNumberByGroup() > 999;\n+            } else {\n+                titleError = StringUtils.isBlank(autoGroupsForm.getGroupTitleByUser());\n+                numberError = autoGroupsForm.getGroupNumberByUser() <= 0 || autoGroupsForm.getGroupNumberByUser() > 999;\n+            }\n+\n+            // Validate the title is not empty.\n+            if (titleError) {\n+                model.addAttribute(\"splitOptionsError\", messageSource.getMessage(\"autogroups.step3.group.title.required\", null, userLocale));\n+                return showStep3(model, autoGroupsForm);\n+            }\n+\n+            // Validate the number of groups is inside the range.\n+            if (numberError) {\n+                model.addAttribute(\"splitOptionsError\", messageSource.getMessage(\"autogroups.step3.group.number.required\", null, userLocale));\n+                return showStep3(model, autoGroupsForm);\n+            }\n+\n+        }\n+\n+        return showStep4(model, autoGroupsForm);\n+    }\n+\n+    @RequestMapping(value = \"/autogroups/step4\")\n+    public String showStep4(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep4() called with values {}\", autoGroupsForm);\n+\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Avoid duplicates\n+        autoGroupsForm.setSelectedRoleList(autoGroupsForm.getSelectedRoleList().stream().distinct().collect(Collectors.toList()));\n+        autoGroupsForm.setSelectedSectionList(autoGroupsForm.getSelectedSectionList().stream().distinct().collect(Collectors.toList()));\n+\n+        // Get the data from the previous steps.\n+        List<String> selectedRoleList = autoGroupsForm.getSelectedRoleList();\n+        List<String> selectedSectionList = autoGroupsForm.getSelectedSectionList();\n+        int sectionsOption = autoGroupsForm.getSectionsOption();\n+        int structureConfigurationOption = autoGroupsForm.getStructureConfigurationOption();\n+        int splitOption = autoGroupsForm.getSplitOptions();\n+\n+        // The map of the groups that will be created with the list of members.\n+        Map<String, List<String>> autoGroupsMap = new TreeMap<String, List<String>>();\n+        // The list of members that will compose the auto groups.\n+        List<Member> filteredMembers = new ArrayList<Member>();\n+        // We need the user objects to display the user name or the eid.\n+        Map<String, User> userMap = new HashMap<String, User>();\n+        // We need the member objects to display the member role.\n+        Map<String, String> userRoleMap = new HashMap<String, String>();\n+        // We need the section title of the member\n+        Map<String, String> sectionMemberMap = new HashMap<String, String>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1"}, "originalPosition": 252}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1NDIwMQ==", "bodyText": "whitespace police here ... we've had reports of a lack of spaces around a + sign.", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380154201", "createdAt": "2020-02-17T12:28:51Z", "author": {"login": "adrianfish"}, "path": "site-manage/site-group-manager/src/main/java/org/sakaiproject/groupmanager/controller/AutoGroupsController.java", "diffHunk": "@@ -0,0 +1,417 @@\n+/****************************************************************************** \n+* Copyright (c) 2020 Apereo Foundation\n+\n+* Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+\n+*          http://opensource.org/licenses/ecl2\n+\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+ ******************************************************************************/\n+package org.sakaiproject.groupmanager.controller;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.ModelAttribute;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+\n+import com.google.gson.Gson;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.collections4.ListUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.sakaiproject.authz.api.Member;\n+import org.sakaiproject.groupmanager.constants.GroupManagerConstants;\n+import org.sakaiproject.groupmanager.form.AutoGroupsForm;\n+import org.sakaiproject.groupmanager.service.SakaiService;\n+import org.sakaiproject.site.api.Group;\n+import org.sakaiproject.site.api.Site;\n+import org.sakaiproject.site.api.SiteService;\n+import org.sakaiproject.sitemanage.api.SiteHelper;\n+import org.sakaiproject.user.api.User;\n+\n+@Slf4j\n+@Controller\n+public class AutoGroupsController {   \n+\n+    @Inject\n+    private MessageSource messageSource;\n+\n+    @Autowired\n+    private SakaiService sakaiService;\n+\n+    @RequestMapping(value = \"/autogroups\")\n+    public String showStep1(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep1() called with values {}\", autoGroupsForm);\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Fill the model attributes.\n+        model.addAttribute(\"siteRoleList\", site.getRoles());\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm == null ? new AutoGroupsForm() : autoGroupsForm);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP1_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep1\")\n+    public String submitStep1(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"submitStep1() called with values {}.\", autoGroupsForm);\n+        \n+        // Display an error if the selected role list is empty.\n+        if (autoGroupsForm.getSelectedRoleList() == null || autoGroupsForm.getSelectedRoleList().isEmpty()) {\n+            model.addAttribute(\"step1ErrorMessage\", messageSource.getMessage(\"autogroups.step1.error.emptyroles\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep1(model, autoGroupsForm);\n+        }\n+\n+        return showStep2(model, autoGroupsForm);\n+    }\n+    \n+    @RequestMapping(value = \"/autogroups/step2\")\n+    public String showStep2(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep2() called with values {}\", autoGroupsForm);\n+\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Build the section list.\n+        List<Group> sectionList = site.getGroups().stream().filter(group -> group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED) == null || !Boolean.valueOf(group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED)).booleanValue()).collect(Collectors.toList());\n+\n+        //Fill the model attributes.\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm);\n+        model.addAttribute(\"sectionList\", sectionList);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP2_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep2\")\n+    public String submitStep2(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm, @RequestParam(required=false) String wizardAction) {\n+        log.debug(\"submitStep2() called with values {} and action {}.\", autoGroupsForm, wizardAction);\n+\n+        // If the submit was done by a back button or link, redirect to the previous step with the wizard values.\n+        if (StringUtils.isNotBlank(wizardAction)) {\n+            switch (wizardAction) {\n+                case GroupManagerConstants.WIZARD_BACK_ACTION:\n+                case GroupManagerConstants.WIZARD_STEP1_ACTION:\n+                default:\n+                    return showStep1(model, autoGroupsForm);\n+            }\n+        }\n+\n+        // Clean the list if the 'dont use sections' option has been selected\n+        if (GroupManagerConstants.SECTIONS_OPTION_DONT_USE_SECTIONS == autoGroupsForm.getSectionsOption()) {\n+            autoGroupsForm.setSelectedSectionList(new ArrayList<String>());\n+        }\n+\n+        // Display an error if 'use sections' option has been selected and the list is empty.\n+        if (GroupManagerConstants.SECTIONS_OPTION_USE_SECTIONS == autoGroupsForm.getSectionsOption() && autoGroupsForm.getSelectedSectionList().isEmpty()) {\n+            model.addAttribute(\"step2ErrorMessage\", messageSource.getMessage(\"autogroups.step2.error.emptysections\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep2(model, autoGroupsForm);\n+        }\n+\n+        // At least one of the lists, roles or sections, should have a value, perform a validation.\n+        if (autoGroupsForm.getSelectedRoleList().isEmpty() && autoGroupsForm.getSelectedSectionList().isEmpty()) {\n+            model.addAttribute(\"step2ErrorMessage\", messageSource.getMessage(\"autogroups.step2.error.emptylists\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep2(model, autoGroupsForm);\n+        }\n+\n+        // Avoid duplicates\n+        autoGroupsForm.setSelectedRoleList(autoGroupsForm.getSelectedRoleList().stream().distinct().collect(Collectors.toList()));\n+        autoGroupsForm.setSelectedSectionList(autoGroupsForm.getSelectedSectionList().stream().distinct().collect(Collectors.toList()));\n+\n+        return showStep3(model, autoGroupsForm);\n+    }\n+\n+    @RequestMapping(value = \"/autogroups/step3\")\n+    public String showStep3(Model model, AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep3() called with values {}\", autoGroupsForm);\n+\n+        List<String> selectedSectionIdList = autoGroupsForm.getSelectedSectionList();\n+        List<Group> selectedSectionList = new ArrayList<Group>();\n+\n+        // Build the section object list, we need the objects to display the section names.\n+        for (String groupId : selectedSectionIdList) {\n+            Group group = sakaiService.findGroupById(groupId);\n+            if (group != null) {\n+                selectedSectionList.add(group);\n+            }\n+        }\n+\n+        // Fill the model attributes\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm);\n+        model.addAttribute(\"selectedSectionList\", selectedSectionList);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP3_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep3\")\n+    public String submitStep3(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm, @RequestParam(required=false) String wizardAction) {\n+        log.debug(\"submitStep3() called with values {} and action {}.\", autoGroupsForm, wizardAction);\n+\n+        // If the submit was done by a back button, redirect to the previous step with the wizard values.\n+        if (StringUtils.isNotBlank(wizardAction)) {\n+            switch (wizardAction) {\n+                case GroupManagerConstants.WIZARD_BACK_ACTION:\n+                case GroupManagerConstants.WIZARD_STEP2_ACTION:\n+                    return showStep2(model, autoGroupsForm);\n+                case GroupManagerConstants.WIZARD_STEP1_ACTION:\n+                default:\n+                    return showStep1(model, autoGroupsForm);\n+            }\n+        }\n+\n+        // Variable definition\n+        Locale userLocale = sakaiService.getCurrentUserLocale();\n+\n+        // Avoid duplicates\n+        autoGroupsForm.setSelectedRoleList(autoGroupsForm.getSelectedRoleList().stream().distinct().collect(Collectors.toList()));\n+        autoGroupsForm.setSelectedSectionList(autoGroupsForm.getSelectedSectionList().stream().distinct().collect(Collectors.toList()));\n+\n+        // Check the options and perform the validations considering the options\n+        if (GroupManagerConstants.STRUCTURE_CONFIGURATION_MIXTURE == autoGroupsForm.getStructureConfigurationOption()) {\n+            boolean titleError = false;\n+            boolean numberError = false;\n+\n+            if (GroupManagerConstants.SPLIT_OPTIONS_BY_GROUP == autoGroupsForm.getSplitOptions()) {\n+                titleError = StringUtils.isBlank(autoGroupsForm.getGroupTitleByGroup());\n+                numberError = autoGroupsForm.getGroupNumberByGroup() <= 0 || autoGroupsForm.getGroupNumberByGroup() > 999;\n+            } else {\n+                titleError = StringUtils.isBlank(autoGroupsForm.getGroupTitleByUser());\n+                numberError = autoGroupsForm.getGroupNumberByUser() <= 0 || autoGroupsForm.getGroupNumberByUser() > 999;\n+            }\n+\n+            // Validate the title is not empty.\n+            if (titleError) {\n+                model.addAttribute(\"splitOptionsError\", messageSource.getMessage(\"autogroups.step3.group.title.required\", null, userLocale));\n+                return showStep3(model, autoGroupsForm);\n+            }\n+\n+            // Validate the number of groups is inside the range.\n+            if (numberError) {\n+                model.addAttribute(\"splitOptionsError\", messageSource.getMessage(\"autogroups.step3.group.number.required\", null, userLocale));\n+                return showStep3(model, autoGroupsForm);\n+            }\n+\n+        }\n+\n+        return showStep4(model, autoGroupsForm);\n+    }\n+\n+    @RequestMapping(value = \"/autogroups/step4\")\n+    public String showStep4(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep4() called with values {}\", autoGroupsForm);\n+\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Avoid duplicates\n+        autoGroupsForm.setSelectedRoleList(autoGroupsForm.getSelectedRoleList().stream().distinct().collect(Collectors.toList()));\n+        autoGroupsForm.setSelectedSectionList(autoGroupsForm.getSelectedSectionList().stream().distinct().collect(Collectors.toList()));\n+\n+        // Get the data from the previous steps.\n+        List<String> selectedRoleList = autoGroupsForm.getSelectedRoleList();\n+        List<String> selectedSectionList = autoGroupsForm.getSelectedSectionList();\n+        int sectionsOption = autoGroupsForm.getSectionsOption();\n+        int structureConfigurationOption = autoGroupsForm.getStructureConfigurationOption();\n+        int splitOption = autoGroupsForm.getSplitOptions();\n+\n+        // The map of the groups that will be created with the list of members.\n+        Map<String, List<String>> autoGroupsMap = new TreeMap<String, List<String>>();\n+        // The list of members that will compose the auto groups.\n+        List<Member> filteredMembers = new ArrayList<Member>();\n+        // We need the user objects to display the user name or the eid.\n+        Map<String, User> userMap = new HashMap<String, User>();\n+        // We need the member objects to display the member role.\n+        Map<String, String> userRoleMap = new HashMap<String, String>();\n+        // We need the section title of the member\n+        Map<String, String> sectionMemberMap = new HashMap<String, String>();\n+\n+        // Remove any potential empty id\n+        selectedRoleList.removeAll(Arrays.asList(StringUtils.EMPTY, null));\n+        selectedSectionList.removeAll(Arrays.asList(StringUtils.EMPTY, null));\n+\n+        // Build the list of users that will compose the groups.\n+        // If the user decided to not use sections, pick all the members of the site. \n+        // If the user decided to use sections, pick all the members of the site that belongs to those sections.\n+        if (GroupManagerConstants.SECTIONS_OPTION_DONT_USE_SECTIONS == sectionsOption || selectedSectionList.isEmpty()) {\n+            // Do not filter by section, use all the members of the site filtering by the selected roles\n+            filteredMembers = site.getMembers().stream().filter(m -> selectedRoleList.contains(m.getRole().getId())).collect(Collectors.toList());\n+        } else {\n+            // Pick the members that belong to the selected sections and have the selected roles.\n+            for (String sectionId : selectedSectionList) {\n+                Group existingGroup = sakaiService.findGroupById(sectionId);\n+\n+                if (existingGroup == null) {\n+                    continue;\n+                }\n+\n+                for (Member member : existingGroup.getMembers()) {\n+                    if (selectedRoleList.contains(member.getRole().getId())) {\n+                        String currentSections = sectionMemberMap.get(member.getUserId());\n+                        // Append any section that the user belongs to\n+                        if (StringUtils.isBlank(currentSections)) {\n+                            currentSections = existingGroup.getTitle();\n+                            filteredMembers.add(member);\n+                        } else {\n+                            currentSections += \", \"+existingGroup.getTitle();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1"}, "originalPosition": 281}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1NDQ4OA==", "bodyText": "No type needed. I realise you've probably lifted this code from the RSF stuff.", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380154488", "createdAt": "2020-02-17T12:29:33Z", "author": {"login": "adrianfish"}, "path": "site-manage/site-group-manager/src/main/java/org/sakaiproject/groupmanager/controller/AutoGroupsController.java", "diffHunk": "@@ -0,0 +1,417 @@\n+/****************************************************************************** \n+* Copyright (c) 2020 Apereo Foundation\n+\n+* Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+\n+*          http://opensource.org/licenses/ecl2\n+\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+ ******************************************************************************/\n+package org.sakaiproject.groupmanager.controller;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.ModelAttribute;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+\n+import com.google.gson.Gson;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.collections4.ListUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.sakaiproject.authz.api.Member;\n+import org.sakaiproject.groupmanager.constants.GroupManagerConstants;\n+import org.sakaiproject.groupmanager.form.AutoGroupsForm;\n+import org.sakaiproject.groupmanager.service.SakaiService;\n+import org.sakaiproject.site.api.Group;\n+import org.sakaiproject.site.api.Site;\n+import org.sakaiproject.site.api.SiteService;\n+import org.sakaiproject.sitemanage.api.SiteHelper;\n+import org.sakaiproject.user.api.User;\n+\n+@Slf4j\n+@Controller\n+public class AutoGroupsController {   \n+\n+    @Inject\n+    private MessageSource messageSource;\n+\n+    @Autowired\n+    private SakaiService sakaiService;\n+\n+    @RequestMapping(value = \"/autogroups\")\n+    public String showStep1(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep1() called with values {}\", autoGroupsForm);\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Fill the model attributes.\n+        model.addAttribute(\"siteRoleList\", site.getRoles());\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm == null ? new AutoGroupsForm() : autoGroupsForm);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP1_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep1\")\n+    public String submitStep1(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"submitStep1() called with values {}.\", autoGroupsForm);\n+        \n+        // Display an error if the selected role list is empty.\n+        if (autoGroupsForm.getSelectedRoleList() == null || autoGroupsForm.getSelectedRoleList().isEmpty()) {\n+            model.addAttribute(\"step1ErrorMessage\", messageSource.getMessage(\"autogroups.step1.error.emptyroles\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep1(model, autoGroupsForm);\n+        }\n+\n+        return showStep2(model, autoGroupsForm);\n+    }\n+    \n+    @RequestMapping(value = \"/autogroups/step2\")\n+    public String showStep2(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep2() called with values {}\", autoGroupsForm);\n+\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Build the section list.\n+        List<Group> sectionList = site.getGroups().stream().filter(group -> group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED) == null || !Boolean.valueOf(group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED)).booleanValue()).collect(Collectors.toList());\n+\n+        //Fill the model attributes.\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm);\n+        model.addAttribute(\"sectionList\", sectionList);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP2_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep2\")\n+    public String submitStep2(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm, @RequestParam(required=false) String wizardAction) {\n+        log.debug(\"submitStep2() called with values {} and action {}.\", autoGroupsForm, wizardAction);\n+\n+        // If the submit was done by a back button or link, redirect to the previous step with the wizard values.\n+        if (StringUtils.isNotBlank(wizardAction)) {\n+            switch (wizardAction) {\n+                case GroupManagerConstants.WIZARD_BACK_ACTION:\n+                case GroupManagerConstants.WIZARD_STEP1_ACTION:\n+                default:\n+                    return showStep1(model, autoGroupsForm);\n+            }\n+        }\n+\n+        // Clean the list if the 'dont use sections' option has been selected\n+        if (GroupManagerConstants.SECTIONS_OPTION_DONT_USE_SECTIONS == autoGroupsForm.getSectionsOption()) {\n+            autoGroupsForm.setSelectedSectionList(new ArrayList<String>());\n+        }\n+\n+        // Display an error if 'use sections' option has been selected and the list is empty.\n+        if (GroupManagerConstants.SECTIONS_OPTION_USE_SECTIONS == autoGroupsForm.getSectionsOption() && autoGroupsForm.getSelectedSectionList().isEmpty()) {\n+            model.addAttribute(\"step2ErrorMessage\", messageSource.getMessage(\"autogroups.step2.error.emptysections\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep2(model, autoGroupsForm);\n+        }\n+\n+        // At least one of the lists, roles or sections, should have a value, perform a validation.\n+        if (autoGroupsForm.getSelectedRoleList().isEmpty() && autoGroupsForm.getSelectedSectionList().isEmpty()) {\n+            model.addAttribute(\"step2ErrorMessage\", messageSource.getMessage(\"autogroups.step2.error.emptylists\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep2(model, autoGroupsForm);\n+        }\n+\n+        // Avoid duplicates\n+        autoGroupsForm.setSelectedRoleList(autoGroupsForm.getSelectedRoleList().stream().distinct().collect(Collectors.toList()));\n+        autoGroupsForm.setSelectedSectionList(autoGroupsForm.getSelectedSectionList().stream().distinct().collect(Collectors.toList()));\n+\n+        return showStep3(model, autoGroupsForm);\n+    }\n+\n+    @RequestMapping(value = \"/autogroups/step3\")\n+    public String showStep3(Model model, AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep3() called with values {}\", autoGroupsForm);\n+\n+        List<String> selectedSectionIdList = autoGroupsForm.getSelectedSectionList();\n+        List<Group> selectedSectionList = new ArrayList<Group>();\n+\n+        // Build the section object list, we need the objects to display the section names.\n+        for (String groupId : selectedSectionIdList) {\n+            Group group = sakaiService.findGroupById(groupId);\n+            if (group != null) {\n+                selectedSectionList.add(group);\n+            }\n+        }\n+\n+        // Fill the model attributes\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm);\n+        model.addAttribute(\"selectedSectionList\", selectedSectionList);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP3_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep3\")\n+    public String submitStep3(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm, @RequestParam(required=false) String wizardAction) {\n+        log.debug(\"submitStep3() called with values {} and action {}.\", autoGroupsForm, wizardAction);\n+\n+        // If the submit was done by a back button, redirect to the previous step with the wizard values.\n+        if (StringUtils.isNotBlank(wizardAction)) {\n+            switch (wizardAction) {\n+                case GroupManagerConstants.WIZARD_BACK_ACTION:\n+                case GroupManagerConstants.WIZARD_STEP2_ACTION:\n+                    return showStep2(model, autoGroupsForm);\n+                case GroupManagerConstants.WIZARD_STEP1_ACTION:\n+                default:\n+                    return showStep1(model, autoGroupsForm);\n+            }\n+        }\n+\n+        // Variable definition\n+        Locale userLocale = sakaiService.getCurrentUserLocale();\n+\n+        // Avoid duplicates\n+        autoGroupsForm.setSelectedRoleList(autoGroupsForm.getSelectedRoleList().stream().distinct().collect(Collectors.toList()));\n+        autoGroupsForm.setSelectedSectionList(autoGroupsForm.getSelectedSectionList().stream().distinct().collect(Collectors.toList()));\n+\n+        // Check the options and perform the validations considering the options\n+        if (GroupManagerConstants.STRUCTURE_CONFIGURATION_MIXTURE == autoGroupsForm.getStructureConfigurationOption()) {\n+            boolean titleError = false;\n+            boolean numberError = false;\n+\n+            if (GroupManagerConstants.SPLIT_OPTIONS_BY_GROUP == autoGroupsForm.getSplitOptions()) {\n+                titleError = StringUtils.isBlank(autoGroupsForm.getGroupTitleByGroup());\n+                numberError = autoGroupsForm.getGroupNumberByGroup() <= 0 || autoGroupsForm.getGroupNumberByGroup() > 999;\n+            } else {\n+                titleError = StringUtils.isBlank(autoGroupsForm.getGroupTitleByUser());\n+                numberError = autoGroupsForm.getGroupNumberByUser() <= 0 || autoGroupsForm.getGroupNumberByUser() > 999;\n+            }\n+\n+            // Validate the title is not empty.\n+            if (titleError) {\n+                model.addAttribute(\"splitOptionsError\", messageSource.getMessage(\"autogroups.step3.group.title.required\", null, userLocale));\n+                return showStep3(model, autoGroupsForm);\n+            }\n+\n+            // Validate the number of groups is inside the range.\n+            if (numberError) {\n+                model.addAttribute(\"splitOptionsError\", messageSource.getMessage(\"autogroups.step3.group.number.required\", null, userLocale));\n+                return showStep3(model, autoGroupsForm);\n+            }\n+\n+        }\n+\n+        return showStep4(model, autoGroupsForm);\n+    }\n+\n+    @RequestMapping(value = \"/autogroups/step4\")\n+    public String showStep4(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep4() called with values {}\", autoGroupsForm);\n+\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Avoid duplicates\n+        autoGroupsForm.setSelectedRoleList(autoGroupsForm.getSelectedRoleList().stream().distinct().collect(Collectors.toList()));\n+        autoGroupsForm.setSelectedSectionList(autoGroupsForm.getSelectedSectionList().stream().distinct().collect(Collectors.toList()));\n+\n+        // Get the data from the previous steps.\n+        List<String> selectedRoleList = autoGroupsForm.getSelectedRoleList();\n+        List<String> selectedSectionList = autoGroupsForm.getSelectedSectionList();\n+        int sectionsOption = autoGroupsForm.getSectionsOption();\n+        int structureConfigurationOption = autoGroupsForm.getStructureConfigurationOption();\n+        int splitOption = autoGroupsForm.getSplitOptions();\n+\n+        // The map of the groups that will be created with the list of members.\n+        Map<String, List<String>> autoGroupsMap = new TreeMap<String, List<String>>();\n+        // The list of members that will compose the auto groups.\n+        List<Member> filteredMembers = new ArrayList<Member>();\n+        // We need the user objects to display the user name or the eid.\n+        Map<String, User> userMap = new HashMap<String, User>();\n+        // We need the member objects to display the member role.\n+        Map<String, String> userRoleMap = new HashMap<String, String>();\n+        // We need the section title of the member\n+        Map<String, String> sectionMemberMap = new HashMap<String, String>();\n+\n+        // Remove any potential empty id\n+        selectedRoleList.removeAll(Arrays.asList(StringUtils.EMPTY, null));\n+        selectedSectionList.removeAll(Arrays.asList(StringUtils.EMPTY, null));\n+\n+        // Build the list of users that will compose the groups.\n+        // If the user decided to not use sections, pick all the members of the site. \n+        // If the user decided to use sections, pick all the members of the site that belongs to those sections.\n+        if (GroupManagerConstants.SECTIONS_OPTION_DONT_USE_SECTIONS == sectionsOption || selectedSectionList.isEmpty()) {\n+            // Do not filter by section, use all the members of the site filtering by the selected roles\n+            filteredMembers = site.getMembers().stream().filter(m -> selectedRoleList.contains(m.getRole().getId())).collect(Collectors.toList());\n+        } else {\n+            // Pick the members that belong to the selected sections and have the selected roles.\n+            for (String sectionId : selectedSectionList) {\n+                Group existingGroup = sakaiService.findGroupById(sectionId);\n+\n+                if (existingGroup == null) {\n+                    continue;\n+                }\n+\n+                for (Member member : existingGroup.getMembers()) {\n+                    if (selectedRoleList.contains(member.getRole().getId())) {\n+                        String currentSections = sectionMemberMap.get(member.getUserId());\n+                        // Append any section that the user belongs to\n+                        if (StringUtils.isBlank(currentSections)) {\n+                            currentSections = existingGroup.getTitle();\n+                            filteredMembers.add(member);\n+                        } else {\n+                            currentSections += \", \"+existingGroup.getTitle();\n+                        }\n+                        sectionMemberMap.put(member.getUserId(), currentSections);\n+                    }\n+                }\n+            }\n+        }\n+\n+        // Fill the user and the member objects to display the names and the eid in the UI.\n+        for (Member member : filteredMembers) {\n+            userRoleMap.put(member.getUserId(), member.getRole().getId());\n+            User user = sakaiService.getUser(member.getUserId());\n+            if (user != null) {\n+                userMap.put(user.getId(), user);\n+            }\n+        }\n+\n+        if (GroupManagerConstants.STRUCTURE_CONFIGURATION_PURE == structureConfigurationOption) {\n+            // Pure configuration, create one group per role.\n+            // Create a group per role using the filtered list of the previous step.\n+            for (String roleId : selectedRoleList) {\n+                List<String> usersWithRoleList = new ArrayList<String>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1"}, "originalPosition": 302}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE1NTk4MA==", "bodyText": "Just stick this on one line", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380155980", "createdAt": "2020-02-17T12:32:57Z", "author": {"login": "adrianfish"}, "path": "site-manage/site-group-manager/src/main/java/org/sakaiproject/groupmanager/controller/AutoGroupsController.java", "diffHunk": "@@ -0,0 +1,417 @@\n+/****************************************************************************** \n+* Copyright (c) 2020 Apereo Foundation\n+\n+* Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+\n+*          http://opensource.org/licenses/ecl2\n+\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+ ******************************************************************************/\n+package org.sakaiproject.groupmanager.controller;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.ModelAttribute;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+\n+import com.google.gson.Gson;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.collections4.ListUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.sakaiproject.authz.api.Member;\n+import org.sakaiproject.groupmanager.constants.GroupManagerConstants;\n+import org.sakaiproject.groupmanager.form.AutoGroupsForm;\n+import org.sakaiproject.groupmanager.service.SakaiService;\n+import org.sakaiproject.site.api.Group;\n+import org.sakaiproject.site.api.Site;\n+import org.sakaiproject.site.api.SiteService;\n+import org.sakaiproject.sitemanage.api.SiteHelper;\n+import org.sakaiproject.user.api.User;\n+\n+@Slf4j\n+@Controller\n+public class AutoGroupsController {   \n+\n+    @Inject\n+    private MessageSource messageSource;\n+\n+    @Autowired\n+    private SakaiService sakaiService;\n+\n+    @RequestMapping(value = \"/autogroups\")\n+    public String showStep1(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep1() called with values {}\", autoGroupsForm);\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Fill the model attributes.\n+        model.addAttribute(\"siteRoleList\", site.getRoles());\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm == null ? new AutoGroupsForm() : autoGroupsForm);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP1_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep1\")\n+    public String submitStep1(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"submitStep1() called with values {}.\", autoGroupsForm);\n+        \n+        // Display an error if the selected role list is empty.\n+        if (autoGroupsForm.getSelectedRoleList() == null || autoGroupsForm.getSelectedRoleList().isEmpty()) {\n+            model.addAttribute(\"step1ErrorMessage\", messageSource.getMessage(\"autogroups.step1.error.emptyroles\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep1(model, autoGroupsForm);\n+        }\n+\n+        return showStep2(model, autoGroupsForm);\n+    }\n+    \n+    @RequestMapping(value = \"/autogroups/step2\")\n+    public String showStep2(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep2() called with values {}\", autoGroupsForm);\n+\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Build the section list.\n+        List<Group> sectionList = site.getGroups().stream().filter(group -> group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED) == null || !Boolean.valueOf(group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED)).booleanValue()).collect(Collectors.toList());\n+\n+        //Fill the model attributes.\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm);\n+        model.addAttribute(\"sectionList\", sectionList);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP2_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep2\")\n+    public String submitStep2(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm, @RequestParam(required=false) String wizardAction) {\n+        log.debug(\"submitStep2() called with values {} and action {}.\", autoGroupsForm, wizardAction);\n+\n+        // If the submit was done by a back button or link, redirect to the previous step with the wizard values.\n+        if (StringUtils.isNotBlank(wizardAction)) {\n+            switch (wizardAction) {\n+                case GroupManagerConstants.WIZARD_BACK_ACTION:\n+                case GroupManagerConstants.WIZARD_STEP1_ACTION:\n+                default:\n+                    return showStep1(model, autoGroupsForm);\n+            }\n+        }\n+\n+        // Clean the list if the 'dont use sections' option has been selected\n+        if (GroupManagerConstants.SECTIONS_OPTION_DONT_USE_SECTIONS == autoGroupsForm.getSectionsOption()) {\n+            autoGroupsForm.setSelectedSectionList(new ArrayList<String>());\n+        }\n+\n+        // Display an error if 'use sections' option has been selected and the list is empty.\n+        if (GroupManagerConstants.SECTIONS_OPTION_USE_SECTIONS == autoGroupsForm.getSectionsOption() && autoGroupsForm.getSelectedSectionList().isEmpty()) {\n+            model.addAttribute(\"step2ErrorMessage\", messageSource.getMessage(\"autogroups.step2.error.emptysections\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep2(model, autoGroupsForm);\n+        }\n+\n+        // At least one of the lists, roles or sections, should have a value, perform a validation.\n+        if (autoGroupsForm.getSelectedRoleList().isEmpty() && autoGroupsForm.getSelectedSectionList().isEmpty()) {\n+            model.addAttribute(\"step2ErrorMessage\", messageSource.getMessage(\"autogroups.step2.error.emptylists\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep2(model, autoGroupsForm);\n+        }\n+\n+        // Avoid duplicates\n+        autoGroupsForm.setSelectedRoleList(autoGroupsForm.getSelectedRoleList().stream().distinct().collect(Collectors.toList()));\n+        autoGroupsForm.setSelectedSectionList(autoGroupsForm.getSelectedSectionList().stream().distinct().collect(Collectors.toList()));\n+\n+        return showStep3(model, autoGroupsForm);\n+    }\n+\n+    @RequestMapping(value = \"/autogroups/step3\")\n+    public String showStep3(Model model, AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep3() called with values {}\", autoGroupsForm);\n+\n+        List<String> selectedSectionIdList = autoGroupsForm.getSelectedSectionList();\n+        List<Group> selectedSectionList = new ArrayList<Group>();\n+\n+        // Build the section object list, we need the objects to display the section names.\n+        for (String groupId : selectedSectionIdList) {\n+            Group group = sakaiService.findGroupById(groupId);\n+            if (group != null) {\n+                selectedSectionList.add(group);\n+            }\n+        }\n+\n+        // Fill the model attributes\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm);\n+        model.addAttribute(\"selectedSectionList\", selectedSectionList);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP3_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep3\")\n+    public String submitStep3(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm, @RequestParam(required=false) String wizardAction) {\n+        log.debug(\"submitStep3() called with values {} and action {}.\", autoGroupsForm, wizardAction);\n+\n+        // If the submit was done by a back button, redirect to the previous step with the wizard values.\n+        if (StringUtils.isNotBlank(wizardAction)) {\n+            switch (wizardAction) {\n+                case GroupManagerConstants.WIZARD_BACK_ACTION:\n+                case GroupManagerConstants.WIZARD_STEP2_ACTION:\n+                    return showStep2(model, autoGroupsForm);\n+                case GroupManagerConstants.WIZARD_STEP1_ACTION:\n+                default:\n+                    return showStep1(model, autoGroupsForm);\n+            }\n+        }\n+\n+        // Variable definition\n+        Locale userLocale = sakaiService.getCurrentUserLocale();\n+\n+        // Avoid duplicates\n+        autoGroupsForm.setSelectedRoleList(autoGroupsForm.getSelectedRoleList().stream().distinct().collect(Collectors.toList()));\n+        autoGroupsForm.setSelectedSectionList(autoGroupsForm.getSelectedSectionList().stream().distinct().collect(Collectors.toList()));\n+\n+        // Check the options and perform the validations considering the options\n+        if (GroupManagerConstants.STRUCTURE_CONFIGURATION_MIXTURE == autoGroupsForm.getStructureConfigurationOption()) {\n+            boolean titleError = false;\n+            boolean numberError = false;\n+\n+            if (GroupManagerConstants.SPLIT_OPTIONS_BY_GROUP == autoGroupsForm.getSplitOptions()) {\n+                titleError = StringUtils.isBlank(autoGroupsForm.getGroupTitleByGroup());\n+                numberError = autoGroupsForm.getGroupNumberByGroup() <= 0 || autoGroupsForm.getGroupNumberByGroup() > 999;\n+            } else {\n+                titleError = StringUtils.isBlank(autoGroupsForm.getGroupTitleByUser());\n+                numberError = autoGroupsForm.getGroupNumberByUser() <= 0 || autoGroupsForm.getGroupNumberByUser() > 999;\n+            }\n+\n+            // Validate the title is not empty.\n+            if (titleError) {\n+                model.addAttribute(\"splitOptionsError\", messageSource.getMessage(\"autogroups.step3.group.title.required\", null, userLocale));\n+                return showStep3(model, autoGroupsForm);\n+            }\n+\n+            // Validate the number of groups is inside the range.\n+            if (numberError) {\n+                model.addAttribute(\"splitOptionsError\", messageSource.getMessage(\"autogroups.step3.group.number.required\", null, userLocale));\n+                return showStep3(model, autoGroupsForm);\n+            }\n+\n+        }\n+\n+        return showStep4(model, autoGroupsForm);\n+    }\n+\n+    @RequestMapping(value = \"/autogroups/step4\")\n+    public String showStep4(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep4() called with values {}\", autoGroupsForm);\n+\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Avoid duplicates\n+        autoGroupsForm.setSelectedRoleList(autoGroupsForm.getSelectedRoleList().stream().distinct().collect(Collectors.toList()));\n+        autoGroupsForm.setSelectedSectionList(autoGroupsForm.getSelectedSectionList().stream().distinct().collect(Collectors.toList()));\n+\n+        // Get the data from the previous steps.\n+        List<String> selectedRoleList = autoGroupsForm.getSelectedRoleList();\n+        List<String> selectedSectionList = autoGroupsForm.getSelectedSectionList();\n+        int sectionsOption = autoGroupsForm.getSectionsOption();\n+        int structureConfigurationOption = autoGroupsForm.getStructureConfigurationOption();\n+        int splitOption = autoGroupsForm.getSplitOptions();\n+\n+        // The map of the groups that will be created with the list of members.\n+        Map<String, List<String>> autoGroupsMap = new TreeMap<String, List<String>>();\n+        // The list of members that will compose the auto groups.\n+        List<Member> filteredMembers = new ArrayList<Member>();\n+        // We need the user objects to display the user name or the eid.\n+        Map<String, User> userMap = new HashMap<String, User>();\n+        // We need the member objects to display the member role.\n+        Map<String, String> userRoleMap = new HashMap<String, String>();\n+        // We need the section title of the member\n+        Map<String, String> sectionMemberMap = new HashMap<String, String>();\n+\n+        // Remove any potential empty id\n+        selectedRoleList.removeAll(Arrays.asList(StringUtils.EMPTY, null));\n+        selectedSectionList.removeAll(Arrays.asList(StringUtils.EMPTY, null));\n+\n+        // Build the list of users that will compose the groups.\n+        // If the user decided to not use sections, pick all the members of the site. \n+        // If the user decided to use sections, pick all the members of the site that belongs to those sections.\n+        if (GroupManagerConstants.SECTIONS_OPTION_DONT_USE_SECTIONS == sectionsOption || selectedSectionList.isEmpty()) {\n+            // Do not filter by section, use all the members of the site filtering by the selected roles\n+            filteredMembers = site.getMembers().stream().filter(m -> selectedRoleList.contains(m.getRole().getId())).collect(Collectors.toList());\n+        } else {\n+            // Pick the members that belong to the selected sections and have the selected roles.\n+            for (String sectionId : selectedSectionList) {\n+                Group existingGroup = sakaiService.findGroupById(sectionId);\n+\n+                if (existingGroup == null) {\n+                    continue;\n+                }\n+\n+                for (Member member : existingGroup.getMembers()) {\n+                    if (selectedRoleList.contains(member.getRole().getId())) {\n+                        String currentSections = sectionMemberMap.get(member.getUserId());\n+                        // Append any section that the user belongs to\n+                        if (StringUtils.isBlank(currentSections)) {\n+                            currentSections = existingGroup.getTitle();\n+                            filteredMembers.add(member);\n+                        } else {\n+                            currentSections += \", \"+existingGroup.getTitle();\n+                        }\n+                        sectionMemberMap.put(member.getUserId(), currentSections);\n+                    }\n+                }\n+            }\n+        }\n+\n+        // Fill the user and the member objects to display the names and the eid in the UI.\n+        for (Member member : filteredMembers) {\n+            userRoleMap.put(member.getUserId(), member.getRole().getId());\n+            User user = sakaiService.getUser(member.getUserId());\n+            if (user != null) {\n+                userMap.put(user.getId(), user);\n+            }\n+        }\n+\n+        if (GroupManagerConstants.STRUCTURE_CONFIGURATION_PURE == structureConfigurationOption) {\n+            // Pure configuration, create one group per role.\n+            // Create a group per role using the filtered list of the previous step.\n+            for (String roleId : selectedRoleList) {\n+                List<String> usersWithRoleList = new ArrayList<String>();\n+                List<Member> membersWithRole = filteredMembers.stream().filter(member -> roleId.equals(member.getRole().getId())).collect(Collectors.toList());\n+                membersWithRole.forEach(member -> {\n+                    usersWithRoleList.add(member.getUserId());\n+                });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1"}, "originalPosition": 306}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2Mjc5Mg==", "bodyText": "Why GSON and not Jackson, just out of interest?", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380162792", "createdAt": "2020-02-17T12:48:43Z", "author": {"login": "adrianfish"}, "path": "site-manage/site-group-manager/src/main/java/org/sakaiproject/groupmanager/controller/AutoGroupsController.java", "diffHunk": "@@ -0,0 +1,417 @@\n+/****************************************************************************** \n+* Copyright (c) 2020 Apereo Foundation\n+\n+* Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+\n+*          http://opensource.org/licenses/ecl2\n+\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+ ******************************************************************************/\n+package org.sakaiproject.groupmanager.controller;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.ModelAttribute;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+\n+import com.google.gson.Gson;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.TreeMap;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.collections4.ListUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.sakaiproject.authz.api.Member;\n+import org.sakaiproject.groupmanager.constants.GroupManagerConstants;\n+import org.sakaiproject.groupmanager.form.AutoGroupsForm;\n+import org.sakaiproject.groupmanager.service.SakaiService;\n+import org.sakaiproject.site.api.Group;\n+import org.sakaiproject.site.api.Site;\n+import org.sakaiproject.site.api.SiteService;\n+import org.sakaiproject.sitemanage.api.SiteHelper;\n+import org.sakaiproject.user.api.User;\n+\n+@Slf4j\n+@Controller\n+public class AutoGroupsController {   \n+\n+    @Inject\n+    private MessageSource messageSource;\n+\n+    @Autowired\n+    private SakaiService sakaiService;\n+\n+    @RequestMapping(value = \"/autogroups\")\n+    public String showStep1(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep1() called with values {}\", autoGroupsForm);\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Fill the model attributes.\n+        model.addAttribute(\"siteRoleList\", site.getRoles());\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm == null ? new AutoGroupsForm() : autoGroupsForm);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP1_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep1\")\n+    public String submitStep1(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"submitStep1() called with values {}.\", autoGroupsForm);\n+        \n+        // Display an error if the selected role list is empty.\n+        if (autoGroupsForm.getSelectedRoleList() == null || autoGroupsForm.getSelectedRoleList().isEmpty()) {\n+            model.addAttribute(\"step1ErrorMessage\", messageSource.getMessage(\"autogroups.step1.error.emptyroles\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep1(model, autoGroupsForm);\n+        }\n+\n+        return showStep2(model, autoGroupsForm);\n+    }\n+    \n+    @RequestMapping(value = \"/autogroups/step2\")\n+    public String showStep2(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep2() called with values {}\", autoGroupsForm);\n+\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Build the section list.\n+        List<Group> sectionList = site.getGroups().stream().filter(group -> group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED) == null || !Boolean.valueOf(group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED)).booleanValue()).collect(Collectors.toList());\n+\n+        //Fill the model attributes.\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm);\n+        model.addAttribute(\"sectionList\", sectionList);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP2_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep2\")\n+    public String submitStep2(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm, @RequestParam(required=false) String wizardAction) {\n+        log.debug(\"submitStep2() called with values {} and action {}.\", autoGroupsForm, wizardAction);\n+\n+        // If the submit was done by a back button or link, redirect to the previous step with the wizard values.\n+        if (StringUtils.isNotBlank(wizardAction)) {\n+            switch (wizardAction) {\n+                case GroupManagerConstants.WIZARD_BACK_ACTION:\n+                case GroupManagerConstants.WIZARD_STEP1_ACTION:\n+                default:\n+                    return showStep1(model, autoGroupsForm);\n+            }\n+        }\n+\n+        // Clean the list if the 'dont use sections' option has been selected\n+        if (GroupManagerConstants.SECTIONS_OPTION_DONT_USE_SECTIONS == autoGroupsForm.getSectionsOption()) {\n+            autoGroupsForm.setSelectedSectionList(new ArrayList<String>());\n+        }\n+\n+        // Display an error if 'use sections' option has been selected and the list is empty.\n+        if (GroupManagerConstants.SECTIONS_OPTION_USE_SECTIONS == autoGroupsForm.getSectionsOption() && autoGroupsForm.getSelectedSectionList().isEmpty()) {\n+            model.addAttribute(\"step2ErrorMessage\", messageSource.getMessage(\"autogroups.step2.error.emptysections\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep2(model, autoGroupsForm);\n+        }\n+\n+        // At least one of the lists, roles or sections, should have a value, perform a validation.\n+        if (autoGroupsForm.getSelectedRoleList().isEmpty() && autoGroupsForm.getSelectedSectionList().isEmpty()) {\n+            model.addAttribute(\"step2ErrorMessage\", messageSource.getMessage(\"autogroups.step2.error.emptylists\", null, sakaiService.getCurrentUserLocale()));\n+            return showStep2(model, autoGroupsForm);\n+        }\n+\n+        // Avoid duplicates\n+        autoGroupsForm.setSelectedRoleList(autoGroupsForm.getSelectedRoleList().stream().distinct().collect(Collectors.toList()));\n+        autoGroupsForm.setSelectedSectionList(autoGroupsForm.getSelectedSectionList().stream().distinct().collect(Collectors.toList()));\n+\n+        return showStep3(model, autoGroupsForm);\n+    }\n+\n+    @RequestMapping(value = \"/autogroups/step3\")\n+    public String showStep3(Model model, AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep3() called with values {}\", autoGroupsForm);\n+\n+        List<String> selectedSectionIdList = autoGroupsForm.getSelectedSectionList();\n+        List<Group> selectedSectionList = new ArrayList<Group>();\n+\n+        // Build the section object list, we need the objects to display the section names.\n+        for (String groupId : selectedSectionIdList) {\n+            Group group = sakaiService.findGroupById(groupId);\n+            if (group != null) {\n+                selectedSectionList.add(group);\n+            }\n+        }\n+\n+        // Fill the model attributes\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm);\n+        model.addAttribute(\"selectedSectionList\", selectedSectionList);\n+        return GroupManagerConstants.AUTO_GROUPS_STEP3_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/autogroups/submitStep3\")\n+    public String submitStep3(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm, @RequestParam(required=false) String wizardAction) {\n+        log.debug(\"submitStep3() called with values {} and action {}.\", autoGroupsForm, wizardAction);\n+\n+        // If the submit was done by a back button, redirect to the previous step with the wizard values.\n+        if (StringUtils.isNotBlank(wizardAction)) {\n+            switch (wizardAction) {\n+                case GroupManagerConstants.WIZARD_BACK_ACTION:\n+                case GroupManagerConstants.WIZARD_STEP2_ACTION:\n+                    return showStep2(model, autoGroupsForm);\n+                case GroupManagerConstants.WIZARD_STEP1_ACTION:\n+                default:\n+                    return showStep1(model, autoGroupsForm);\n+            }\n+        }\n+\n+        // Variable definition\n+        Locale userLocale = sakaiService.getCurrentUserLocale();\n+\n+        // Avoid duplicates\n+        autoGroupsForm.setSelectedRoleList(autoGroupsForm.getSelectedRoleList().stream().distinct().collect(Collectors.toList()));\n+        autoGroupsForm.setSelectedSectionList(autoGroupsForm.getSelectedSectionList().stream().distinct().collect(Collectors.toList()));\n+\n+        // Check the options and perform the validations considering the options\n+        if (GroupManagerConstants.STRUCTURE_CONFIGURATION_MIXTURE == autoGroupsForm.getStructureConfigurationOption()) {\n+            boolean titleError = false;\n+            boolean numberError = false;\n+\n+            if (GroupManagerConstants.SPLIT_OPTIONS_BY_GROUP == autoGroupsForm.getSplitOptions()) {\n+                titleError = StringUtils.isBlank(autoGroupsForm.getGroupTitleByGroup());\n+                numberError = autoGroupsForm.getGroupNumberByGroup() <= 0 || autoGroupsForm.getGroupNumberByGroup() > 999;\n+            } else {\n+                titleError = StringUtils.isBlank(autoGroupsForm.getGroupTitleByUser());\n+                numberError = autoGroupsForm.getGroupNumberByUser() <= 0 || autoGroupsForm.getGroupNumberByUser() > 999;\n+            }\n+\n+            // Validate the title is not empty.\n+            if (titleError) {\n+                model.addAttribute(\"splitOptionsError\", messageSource.getMessage(\"autogroups.step3.group.title.required\", null, userLocale));\n+                return showStep3(model, autoGroupsForm);\n+            }\n+\n+            // Validate the number of groups is inside the range.\n+            if (numberError) {\n+                model.addAttribute(\"splitOptionsError\", messageSource.getMessage(\"autogroups.step3.group.number.required\", null, userLocale));\n+                return showStep3(model, autoGroupsForm);\n+            }\n+\n+        }\n+\n+        return showStep4(model, autoGroupsForm);\n+    }\n+\n+    @RequestMapping(value = \"/autogroups/step4\")\n+    public String showStep4(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm) {\n+        log.debug(\"showStep4() called with values {}\", autoGroupsForm);\n+\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Avoid duplicates\n+        autoGroupsForm.setSelectedRoleList(autoGroupsForm.getSelectedRoleList().stream().distinct().collect(Collectors.toList()));\n+        autoGroupsForm.setSelectedSectionList(autoGroupsForm.getSelectedSectionList().stream().distinct().collect(Collectors.toList()));\n+\n+        // Get the data from the previous steps.\n+        List<String> selectedRoleList = autoGroupsForm.getSelectedRoleList();\n+        List<String> selectedSectionList = autoGroupsForm.getSelectedSectionList();\n+        int sectionsOption = autoGroupsForm.getSectionsOption();\n+        int structureConfigurationOption = autoGroupsForm.getStructureConfigurationOption();\n+        int splitOption = autoGroupsForm.getSplitOptions();\n+\n+        // The map of the groups that will be created with the list of members.\n+        Map<String, List<String>> autoGroupsMap = new TreeMap<String, List<String>>();\n+        // The list of members that will compose the auto groups.\n+        List<Member> filteredMembers = new ArrayList<Member>();\n+        // We need the user objects to display the user name or the eid.\n+        Map<String, User> userMap = new HashMap<String, User>();\n+        // We need the member objects to display the member role.\n+        Map<String, String> userRoleMap = new HashMap<String, String>();\n+        // We need the section title of the member\n+        Map<String, String> sectionMemberMap = new HashMap<String, String>();\n+\n+        // Remove any potential empty id\n+        selectedRoleList.removeAll(Arrays.asList(StringUtils.EMPTY, null));\n+        selectedSectionList.removeAll(Arrays.asList(StringUtils.EMPTY, null));\n+\n+        // Build the list of users that will compose the groups.\n+        // If the user decided to not use sections, pick all the members of the site. \n+        // If the user decided to use sections, pick all the members of the site that belongs to those sections.\n+        if (GroupManagerConstants.SECTIONS_OPTION_DONT_USE_SECTIONS == sectionsOption || selectedSectionList.isEmpty()) {\n+            // Do not filter by section, use all the members of the site filtering by the selected roles\n+            filteredMembers = site.getMembers().stream().filter(m -> selectedRoleList.contains(m.getRole().getId())).collect(Collectors.toList());\n+        } else {\n+            // Pick the members that belong to the selected sections and have the selected roles.\n+            for (String sectionId : selectedSectionList) {\n+                Group existingGroup = sakaiService.findGroupById(sectionId);\n+\n+                if (existingGroup == null) {\n+                    continue;\n+                }\n+\n+                for (Member member : existingGroup.getMembers()) {\n+                    if (selectedRoleList.contains(member.getRole().getId())) {\n+                        String currentSections = sectionMemberMap.get(member.getUserId());\n+                        // Append any section that the user belongs to\n+                        if (StringUtils.isBlank(currentSections)) {\n+                            currentSections = existingGroup.getTitle();\n+                            filteredMembers.add(member);\n+                        } else {\n+                            currentSections += \", \"+existingGroup.getTitle();\n+                        }\n+                        sectionMemberMap.put(member.getUserId(), currentSections);\n+                    }\n+                }\n+            }\n+        }\n+\n+        // Fill the user and the member objects to display the names and the eid in the UI.\n+        for (Member member : filteredMembers) {\n+            userRoleMap.put(member.getUserId(), member.getRole().getId());\n+            User user = sakaiService.getUser(member.getUserId());\n+            if (user != null) {\n+                userMap.put(user.getId(), user);\n+            }\n+        }\n+\n+        if (GroupManagerConstants.STRUCTURE_CONFIGURATION_PURE == structureConfigurationOption) {\n+            // Pure configuration, create one group per role.\n+            // Create a group per role using the filtered list of the previous step.\n+            for (String roleId : selectedRoleList) {\n+                List<String> usersWithRoleList = new ArrayList<String>();\n+                List<Member> membersWithRole = filteredMembers.stream().filter(member -> roleId.equals(member.getRole().getId())).collect(Collectors.toList());\n+                membersWithRole.forEach(member -> {\n+                    usersWithRoleList.add(member.getUserId());\n+                });\n+                autoGroupsMap.put(roleId, usersWithRoleList);\n+            }\n+        } else {\n+            // Mixture configuration\n+\n+            // Shuffle the list first\n+            Collections.shuffle(filteredMembers);\n+\n+            if (GroupManagerConstants.SPLIT_OPTIONS_BY_GROUP == splitOption) {\n+                // Split by group\n+                String groupPrefix = autoGroupsForm.getGroupTitleByGroup();\n+                int groupNumber = autoGroupsForm.getGroupNumberByGroup();\n+                int groupSize = filteredMembers.size() / groupNumber;\n+\n+                for (int groupIndex = 1 ; groupIndex <= groupNumber; groupIndex++) {\n+                    String groupTitle = String.format(\"%s-%d\", groupPrefix, groupIndex);\n+                    List<String> randomMemberList = new ArrayList<String>();\n+                    List<Member> memberSubList = filteredMembers.stream().limit(groupSize).collect(Collectors.toList());\n+                    filteredMembers.removeAll(memberSubList);\n+                    // If there are remaining members, assign them to the last group.\n+                    if(groupIndex == groupNumber && !filteredMembers.isEmpty()) {\n+                        memberSubList.addAll(filteredMembers);\n+                    }\n+                    memberSubList.forEach(member -> {\n+                        randomMemberList.add(member.getUserId());\n+                    });\n+                    autoGroupsMap.put(groupTitle, randomMemberList);\n+                }\n+            } else {\n+                // Split by number of users.\n+                String groupPrefix = autoGroupsForm.getGroupTitleByUser();\n+                int groupNumber = autoGroupsForm.getGroupNumberByUser();\n+                List<List<Member>> partitionedMemberList = ListUtils.partition(filteredMembers, groupNumber);\n+                int groupIndex = 1;\n+                for (List<Member> groupMembers : partitionedMemberList) {\n+                    String groupTitle = String.format(\"%s-%d\", groupPrefix, groupIndex);\n+                    groupIndex++;\n+                    List<String> randomMemberList = new ArrayList<String>();\n+                    groupMembers.forEach(member -> {\n+                        randomMemberList.add(member.getUserId());\n+                    });\n+                    autoGroupsMap.put(groupTitle, randomMemberList);\n+                }\n+            }\n+        }\n+\n+        // Fill the model attributes.\n+        model.addAttribute(\"autoGroupsForm\", autoGroupsForm);\n+        model.addAttribute(\"autoGroupsMap\", autoGroupsMap);\n+        model.addAttribute(\"userMap\", userMap);\n+        model.addAttribute(\"userRoleMap\", userRoleMap);\n+        model.addAttribute(\"sectionMemberMap\", sectionMemberMap);\n+        //Serialize as json the group map to send it back to the controller after the confirmation.\n+        model.addAttribute(\"serializedAutoGroupsMap\", new Gson().toJson(autoGroupsMap));\n+        return GroupManagerConstants.AUTO_GROUPS_STEP4_TEMPLATE;\n+    }\n+\n+    @PostMapping(value=\"/autogroups/confirmAutoGroups\")\n+    public String confirmAutoGroups(Model model, @ModelAttribute AutoGroupsForm autoGroupsForm, @RequestParam(required=false) String serializedAutoGroupsMap, @RequestParam(required=false) String wizardAction) {\n+        log.debug(\"confirmAutoGroups() called with values {} and action {}.\", autoGroupsForm, wizardAction);\n+\n+        // If the submit was done by a back button, redirect to the previous step with the wizard values.\n+        if (StringUtils.isNotBlank(wizardAction)) {\n+            switch (wizardAction) {\n+                case GroupManagerConstants.WIZARD_BACK_ACTION:\n+                case GroupManagerConstants.WIZARD_STEP3_ACTION:\n+                    return showStep3(model, autoGroupsForm);\n+                case GroupManagerConstants.WIZARD_STEP2_ACTION:\n+                    return showStep2(model, autoGroupsForm);\n+                case GroupManagerConstants.WIZARD_STEP1_ACTION:\n+                default:\n+                    return showStep1(model, autoGroupsForm);\n+            }\n+        }\n+\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        if (StringUtils.isBlank(serializedAutoGroupsMap)) {\n+            log.error(\"The auto groups map is empty, aborting the confirmation.\");\n+            return GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Deserialize the autogroups map and create the site groups with the members.\n+        Map<String, List<String>> autoGroupsMap = new Gson().fromJson(serializedAutoGroupsMap, Map.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1"}, "originalPosition": 393}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2MzE2OQ==", "bodyText": "No need for the types", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380163169", "createdAt": "2020-02-17T12:49:37Z", "author": {"login": "adrianfish"}, "path": "site-manage/site-group-manager/src/main/java/org/sakaiproject/groupmanager/controller/ImportController.java", "diffHunk": "@@ -0,0 +1,296 @@\n+/****************************************************************************** \n+* Copyright (c) 2020 Apereo Foundation\n+\n+* Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+\n+*          http://opensource.org/licenses/ecl2\n+\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+ ******************************************************************************/\n+package org.sakaiproject.groupmanager.controller;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.stream.Collectors;\n+import java.util.Optional;\n+import java.util.Scanner;\n+import java.util.StringJoiner;\n+\n+import javax.inject.Inject;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import com.google.gson.Gson;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.fileupload.FileItem;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.sakaiproject.authz.api.Member;\n+import org.sakaiproject.groupmanager.constants.GroupManagerConstants;\n+import org.sakaiproject.groupmanager.service.SakaiService;\n+import org.sakaiproject.site.api.Group;\n+import org.sakaiproject.site.api.Site;\n+import org.sakaiproject.site.api.SiteService;\n+import org.sakaiproject.sitemanage.api.SiteHelper;\n+import org.sakaiproject.user.api.User;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+\n+@Slf4j\n+@Controller\n+public class ImportController {\n+\n+    private final String BULK_LINE_DELIMITER = \"\\r\\n\";\n+    private final String BULK_FIELD_DELIMITER = \",\";\n+\n+    @Inject\n+    private MessageSource messageSource;\n+\n+    @Autowired\n+    private SakaiService sakaiService;\n+\n+    @RequestMapping(value = \"/import\")\n+    public String showImport(Model model) {\n+        log.debug(\"showImport()\");\n+        return GroupManagerConstants.IMPORT_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/importGroups\", consumes = \"multipart/form-data\")\n+    public String showImportGroups(@RequestParam(required=false) String groupUploadedText, Model model, HttpServletRequest req) {\n+        log.debug(\"showImportGroups called with value {}\", groupUploadedText);\n+\n+        // Variable definition\n+        Locale userLocale = sakaiService.getCurrentUserLocale();\n+        Map<String, List<String>> importedGroupMap = new HashMap<String, List<String>>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2NDUyOQ==", "bodyText": "No need for the types", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380164529", "createdAt": "2020-02-17T12:52:56Z", "author": {"login": "adrianfish"}, "path": "site-manage/site-group-manager/src/main/java/org/sakaiproject/groupmanager/controller/ImportController.java", "diffHunk": "@@ -0,0 +1,296 @@\n+/****************************************************************************** \n+* Copyright (c) 2020 Apereo Foundation\n+\n+* Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+\n+*          http://opensource.org/licenses/ecl2\n+\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+ ******************************************************************************/\n+package org.sakaiproject.groupmanager.controller;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import java.util.stream.Collectors;\n+import java.util.Optional;\n+import java.util.Scanner;\n+import java.util.StringJoiner;\n+\n+import javax.inject.Inject;\n+import javax.servlet.http.HttpServletRequest;\n+\n+import com.google.gson.Gson;\n+import lombok.extern.slf4j.Slf4j;\n+import org.apache.commons.fileupload.FileItem;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.sakaiproject.authz.api.Member;\n+import org.sakaiproject.groupmanager.constants.GroupManagerConstants;\n+import org.sakaiproject.groupmanager.service.SakaiService;\n+import org.sakaiproject.site.api.Group;\n+import org.sakaiproject.site.api.Site;\n+import org.sakaiproject.site.api.SiteService;\n+import org.sakaiproject.sitemanage.api.SiteHelper;\n+import org.sakaiproject.user.api.User;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+\n+@Slf4j\n+@Controller\n+public class ImportController {\n+\n+    private final String BULK_LINE_DELIMITER = \"\\r\\n\";\n+    private final String BULK_FIELD_DELIMITER = \",\";\n+\n+    @Inject\n+    private MessageSource messageSource;\n+\n+    @Autowired\n+    private SakaiService sakaiService;\n+\n+    @RequestMapping(value = \"/import\")\n+    public String showImport(Model model) {\n+        log.debug(\"showImport()\");\n+        return GroupManagerConstants.IMPORT_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/importGroups\", consumes = \"multipart/form-data\")\n+    public String showImportGroups(@RequestParam(required=false) String groupUploadedText, Model model, HttpServletRequest req) {\n+        log.debug(\"showImportGroups called with value {}\", groupUploadedText);\n+\n+        // Variable definition\n+        Locale userLocale = sakaiService.getCurrentUserLocale();\n+        Map<String, List<String>> importedGroupMap = new HashMap<String, List<String>>();\n+        String uploadedText = StringUtils.EMPTY;\n+        String groupFileUploadedText = StringUtils.EMPTY;\n+\n+        //Check the uploaded file and contents.\n+        FileItem uploadedFileItem = (FileItem) req.getAttribute(\"groupUploadFile\");\n+        if (uploadedFileItem.getSize() > 0) {\n+            try (Scanner scanner = new Scanner(uploadedFileItem.getInputStream(), StandardCharsets.UTF_8.name())) {\n+                groupFileUploadedText = scanner.useDelimiter(\"\\\\A\").next();\n+            } catch (Exception e) {\n+                log.error(\"The file {} provided is not valid.\", uploadedFileItem.getName());\n+            }\n+        }\n+\n+        // Check if both options are blank and return an error message\n+        if (StringUtils.isAllBlank(groupUploadedText, groupFileUploadedText)) {\n+            return returnImportError(model, \"import.error.inputrequired\", userLocale);\n+        }        \n+\n+        // Process the submitted texts, combine the uploaded and the file into one String\n+        uploadedText = String.format(\"%s\\r\\n%s\", groupUploadedText, groupFileUploadedText);\n+\n+        String[] lineArray = uploadedText.split(BULK_LINE_DELIMITER);\n+        for (String line : lineArray) {\n+\n+            if (StringUtils.isBlank(line)) {\n+                continue;\n+            }\n+\n+            String[] lineContentArray = line.split(BULK_FIELD_DELIMITER);\n+\n+            //Each line must contain a groupTitle and a userEid\n+            if (lineContentArray.length == 2) {\n+                String groupTitle = StringUtils.trimToNull(lineContentArray[0]);\n+                String userEid = StringUtils.trimToNull(lineContentArray[1]);\n+\n+                if (StringUtils.isAnyBlank(groupTitle, userEid)) {\n+                    // One of the items of the line is blank, redirect to the import form again displaying an error. \n+                    return returnImportError(model, \"import.error.wrongformat\", userLocale);\n+                }\n+\n+                if (groupTitle.length() > 99) {\n+                    // One of the items of the line has more than 99 characters, redirect to the import form again displaying an error. \n+                    return returnImportError(model, \"import.error.titlelength\", userLocale);\n+                }\n+\n+                if (importedGroupMap.get(groupTitle) != null) {\n+                    // If the map contains an entry for that group, add the user to the list\n+                    importedGroupMap.get(groupTitle).add(userEid);\n+                } else {\n+                    // If the map does not contain an entry for that group, create a list and add the member to the list\n+                    List<String> newUserlist = new ArrayList<String>();\n+                    newUserlist.add(userEid);\n+                    importedGroupMap.put(groupTitle, newUserlist);\n+                }\n+            } else {\n+                // One line does not contain two items, redirect to the import form again displaying an error.\n+                return returnImportError(model, \"import.error.wrongformat\", userLocale);\n+            }\n+        }\n+\n+        //Redirect to the confirmation page once the map are correct\n+        return showImportConfirmation(model, importedGroupMap);\n+    }\n+    \n+    @RequestMapping(value = \"/importConfirmation\")\n+    public String showImportConfirmation(Model model, Map<String, List<String>> importedGroupMap) {\n+        log.debug(\"showImportConfirmation() called with {} items to import.\", importedGroupMap.entrySet().size());\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+        \treturn GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // List of groups of the site, excluding the ones which GROUP_PROP_WSETUP_CREATED property is false.\n+        List<Group> groupList = (List<Group>) site.getGroups().stream().filter(group -> group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED) != null && Boolean.valueOf(group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED)).booleanValue()).collect(Collectors.toList());\n+        // Variable definition that will be sent to the model\n+        Map<String, Boolean> importedGroups = new HashMap<String, Boolean>();\n+        Map<String, String> nonExistingMemberMap = new HashMap<String, String>();\n+        Map<String, String> nonMemberMap = new HashMap<String, String>();\n+        Map<String, String> existingMemberMap = new HashMap<String, String>();\n+        Map<String, String> newMemberMap = new HashMap<String, String>();\n+        boolean membershipErrors = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1"}, "originalPosition": 160}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2Nzk0OA==", "bodyText": "No need the types", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380167948", "createdAt": "2020-02-17T13:00:16Z", "author": {"login": "adrianfish"}, "path": "site-manage/site-group-manager/src/main/java/org/sakaiproject/groupmanager/controller/JoinableSetController.java", "diffHunk": "@@ -0,0 +1,226 @@\n+/****************************************************************************** \n+* Copyright (c) 2020 Apereo Foundation\n+\n+* Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+\n+*          http://opensource.org/licenses/ecl2\n+\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+ ******************************************************************************/\n+package org.sakaiproject.groupmanager.controller;\n+\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.MessageSource;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.ModelAttribute;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestParam;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.stream.Collectors;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.sakaiproject.authz.api.Member;\n+import org.sakaiproject.groupmanager.constants.GroupManagerConstants;\n+import org.sakaiproject.groupmanager.form.JoinableSetForm;\n+import org.sakaiproject.groupmanager.service.SakaiService;\n+import org.sakaiproject.site.api.Group;\n+import org.sakaiproject.site.api.Site;\n+import org.sakaiproject.user.api.User;\n+\n+@Slf4j\n+@Controller\n+public class JoinableSetController {    \n+\n+    @Inject\n+    private MessageSource messageSource;\n+\n+    @Autowired\n+    private SakaiService sakaiService;\n+\n+    @RequestMapping(value = \"/joinableset\")\n+    public String showJoinableSet(Model model, @RequestParam(value=\"joinableSetId\", required = false) String joinableSetId) {\n+        log.debug(\"showJoinableSet()\");\n+\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+        \treturn GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Variable definition\n+        JoinableSetForm joinableSetForm = new JoinableSetForm();\n+        List<Group> joinableSetGroups = new ArrayList<Group>();\n+        List<User> notJoinedUserList = new ArrayList<User>();\n+\n+        if (StringUtils.isNotBlank(joinableSetId)) {\n+            //Set the joinable set Id\n+            joinableSetForm.setJoinableSetId(joinableSetId);\n+            //Set the joinable set title\n+            joinableSetForm.setGroupTitle(joinableSetId);\n+            // Get the groups associated to the existing joinable set\n+            joinableSetGroups = site.getGroups().stream().filter(g -> joinableSetId.equalsIgnoreCase(g.getProperties().getProperty(Group.GROUP_PROP_JOINABLE_SET))).collect(Collectors.toList());\n+            boolean allowUnjoin = !joinableSetGroups.isEmpty() ? joinableSetGroups.get(0).getProperties().getProperty(Group.GROUP_PROP_JOINABLE_UNJOINABLE) != null ? Boolean.valueOf(joinableSetGroups.get(0).getProperties().getProperty(Group.GROUP_PROP_JOINABLE_UNJOINABLE)) : false : false;\n+            joinableSetForm.setAllowUnjoin(allowUnjoin);\n+            // Get all the members of the groups that belongs to the joinable set. \n+            List<Member> joinedUserList = new ArrayList<Member>();\n+            joinableSetGroups.forEach(group -> {\n+                joinedUserList.addAll(group.getMembers());\n+            });\n+\n+            // Put all the members of the site that does not belong to any group of the set in a list.\n+            site.getUsers().forEach( userId -> {\n+                if (!joinedUserList.stream().anyMatch(member -> userId.equals(member.getUserId()))) {\n+                    notJoinedUserList.add(sakaiService.getUser(userId));\n+                }\n+\n+            });\n+\n+            joinableSetForm.setGroupNumber(0);\n+            joinableSetForm.setGroupMaxMembers(1);\n+        }\n+\n+        // Fill the model with the variables.\n+        model.addAttribute(\"joinableSetForm\", joinableSetForm);\n+        model.addAttribute(\"joinableSetGroups\", joinableSetGroups);\n+        model.addAttribute(\"notJoinedUserList\", notJoinedUserList);\n+\n+        return GroupManagerConstants.JOINABLE_SET_TEMPLATE;\n+    }\n+\n+    @PostMapping(value = \"/saveJoinableSet\")\n+    public String saveJoinableSet(@ModelAttribute JoinableSetForm joinableSetForm, Model model) {\n+        log.debug(\"saveJoinableSet called, saving a group with title {}\", joinableSetForm.getGroupTitle());\n+\n+        Site site = sakaiService.getCurrentSite();\n+        if (site == null) {\n+        \treturn GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Variable definition\n+        Locale userLocale = sakaiService.getCurrentUserLocale();\n+        String joinableSetId = joinableSetForm.getJoinableSetId();\n+        String joinableSetTitle = joinableSetForm.getGroupTitle();\n+        boolean editingJoinableSet = StringUtils.isNotBlank(joinableSetId);\n+        int joinableSetGroupNumber = joinableSetForm.getGroupNumber();\n+        int joinableSetMaxMembers = joinableSetForm.getGroupMaxMembers();\n+        String allowPreviewMembership = Boolean.toString(joinableSetForm.isAllowPreviewMembership());\n+        String allowUnjoin = Boolean.toString(joinableSetForm.isAllowUnjoin());\n+        String allowViewMembership = Boolean.toString(joinableSetForm.isAllowViewMembership());\n+        List<String> groupTitles = new ArrayList<String>();\n+        List<Group> siteGroups = new ArrayList<Group>(site.getGroups());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2OTQ3MA==", "bodyText": "tut tut", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380169470", "createdAt": "2020-02-17T13:03:30Z", "author": {"login": "adrianfish"}, "path": "site-manage/site-group-manager/src/main/java/org/sakaiproject/groupmanager/controller/MainController.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/****************************************************************************** \n+* Copyright (c) 2020 Apereo Foundation\n+\n+* Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+\n+*          http://opensource.org/licenses/ecl2\n+\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+ ******************************************************************************/\n+package org.sakaiproject.groupmanager.controller;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.StringJoiner;\n+import java.util.stream.Collectors;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.ModelAttribute;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.sakaiproject.authz.api.AuthzGroup.RealmLockMode;\n+import org.sakaiproject.authz.api.AuthzRealmLockException;\n+import org.sakaiproject.groupmanager.constants.GroupManagerConstants;\n+import org.sakaiproject.groupmanager.form.MainForm;\n+import org.sakaiproject.groupmanager.service.SakaiService;\n+import org.sakaiproject.site.api.Group;\n+import org.sakaiproject.site.api.Site;\n+import org.sakaiproject.site.util.SiteComparator;\n+import org.sakaiproject.site.util.SiteConstants;\n+import org.sakaiproject.user.api.User;\n+\n+@Slf4j\n+@Controller\n+public class MainController {\n+    \n+    @Autowired\n+    private SakaiService sakaiService;\n+\n+    @RequestMapping(value = {\"/\", \"/index\"})\n+    public String showIndex(Model model) {\n+        log.debug(\"showIndex()\");\n+\n+        Site site = sakaiService.getCurrentSite();\n+        if(site == null) {\n+        \treturn GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Group members for each group, separated by comma\n+        Map<String, String> groupMemberMap = new HashMap<String, String>();\n+        // Joinable sets for each group\n+        Map<String, String> groupJoinableSetMap = new HashMap<String, String>();\n+        // Joinable sets size for each group\n+        Map<String, String> groupJoinableSetSizeMap = new HashMap<String, String>();\n+        // List of groups of the site, excluding the ones which GROUP_PROP_WSETUP_CREATED property is false.\n+        List<Group> groupList = site.getGroups().stream().filter(group -> group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED) != null && Boolean.valueOf(group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED)).booleanValue()).collect(Collectors.toList());\n+        // Sort the group list by title.\n+        Collections.sort(groupList, new Comparator<Group>(){\n+            public int compare(Group g1, Group g2){\n+                return g1.getTitle().compareToIgnoreCase(g2.getTitle());\n+        }});\n+\n+        List<Group> lockedGroupList = site.getGroups().stream().filter(group -> RealmLockMode.ALL.equals(group.getRealmLock()) || RealmLockMode.MODIFY.equals(group.getRealmLock())).collect(Collectors.toList());\n+        List<Group> lockedForDeletionGroupList = site.getGroups().stream().filter(group -> RealmLockMode.ALL.equals(group.getRealmLock()) || RealmLockMode.DELETE.equals(group.getRealmLock())).collect(Collectors.toList());\n+\n+        // For each group of the site, get the members separated by comma, the joinable sets and the size of the joinable sets.\n+        for(Group group: groupList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE2OTc0Mg==", "bodyText": "What is this? Two space indentation? My Lord.", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380169742", "createdAt": "2020-02-17T13:04:05Z", "author": {"login": "adrianfish"}, "path": "site-manage/site-group-manager/src/main/java/org/sakaiproject/groupmanager/controller/MainController.java", "diffHunk": "@@ -0,0 +1,145 @@\n+/****************************************************************************** \n+* Copyright (c) 2020 Apereo Foundation\n+\n+* Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+\n+*          http://opensource.org/licenses/ecl2\n+\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+ ******************************************************************************/\n+package org.sakaiproject.groupmanager.controller;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.StringJoiner;\n+import java.util.stream.Collectors;\n+\n+import lombok.extern.slf4j.Slf4j;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.ui.Model;\n+import org.springframework.web.bind.annotation.ModelAttribute;\n+import org.springframework.web.bind.annotation.PostMapping;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.sakaiproject.authz.api.AuthzGroup.RealmLockMode;\n+import org.sakaiproject.authz.api.AuthzRealmLockException;\n+import org.sakaiproject.groupmanager.constants.GroupManagerConstants;\n+import org.sakaiproject.groupmanager.form.MainForm;\n+import org.sakaiproject.groupmanager.service.SakaiService;\n+import org.sakaiproject.site.api.Group;\n+import org.sakaiproject.site.api.Site;\n+import org.sakaiproject.site.util.SiteComparator;\n+import org.sakaiproject.site.util.SiteConstants;\n+import org.sakaiproject.user.api.User;\n+\n+@Slf4j\n+@Controller\n+public class MainController {\n+    \n+    @Autowired\n+    private SakaiService sakaiService;\n+\n+    @RequestMapping(value = {\"/\", \"/index\"})\n+    public String showIndex(Model model) {\n+        log.debug(\"showIndex()\");\n+\n+        Site site = sakaiService.getCurrentSite();\n+        if(site == null) {\n+        \treturn GroupManagerConstants.REDIRECT_MAIN_TEMPLATE;\n+        }\n+\n+        // Group members for each group, separated by comma\n+        Map<String, String> groupMemberMap = new HashMap<String, String>();\n+        // Joinable sets for each group\n+        Map<String, String> groupJoinableSetMap = new HashMap<String, String>();\n+        // Joinable sets size for each group\n+        Map<String, String> groupJoinableSetSizeMap = new HashMap<String, String>();\n+        // List of groups of the site, excluding the ones which GROUP_PROP_WSETUP_CREATED property is false.\n+        List<Group> groupList = site.getGroups().stream().filter(group -> group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED) != null && Boolean.valueOf(group.getProperties().getProperty(Group.GROUP_PROP_WSETUP_CREATED)).booleanValue()).collect(Collectors.toList());\n+        // Sort the group list by title.\n+        Collections.sort(groupList, new Comparator<Group>(){\n+            public int compare(Group g1, Group g2){\n+                return g1.getTitle().compareToIgnoreCase(g2.getTitle());\n+        }});\n+\n+        List<Group> lockedGroupList = site.getGroups().stream().filter(group -> RealmLockMode.ALL.equals(group.getRealmLock()) || RealmLockMode.MODIFY.equals(group.getRealmLock())).collect(Collectors.toList());\n+        List<Group> lockedForDeletionGroupList = site.getGroups().stream().filter(group -> RealmLockMode.ALL.equals(group.getRealmLock()) || RealmLockMode.DELETE.equals(group.getRealmLock())).collect(Collectors.toList());\n+\n+        // For each group of the site, get the members separated by comma, the joinable sets and the size of the joinable sets.\n+        for(Group group: groupList) {\n+            // Get the group members separated by comma\n+            StringJoiner stringJoiner = new StringJoiner(\", \");\n+            List<User> groupMemberList = new ArrayList<User>(); \n+            group.getMembers().forEach(member -> {\n+            \tUser memberUser = sakaiService.getUser(member.getUserId());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE3MDkzOA==", "bodyText": "I would personally return an Optional from this.", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380170938", "createdAt": "2020-02-17T13:06:39Z", "author": {"login": "adrianfish"}, "path": "site-manage/site-group-manager/src/main/java/org/sakaiproject/groupmanager/service/SakaiService.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/****************************************************************************** \n+* Copyright (c) 2020 Apereo Foundation\n+\n+* Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+\n+*          http://opensource.org/licenses/ecl2\n+\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+ ******************************************************************************/\n+package org.sakaiproject.groupmanager.service;\n+\n+import java.util.Locale;\n+\n+import javax.inject.Inject;\n+\n+import org.sakaiproject.component.api.ServerConfigurationService;\n+import org.sakaiproject.event.api.EventTrackingService;\n+import org.sakaiproject.exception.IdUnusedException;\n+import org.sakaiproject.exception.PermissionException;\n+import org.sakaiproject.site.api.Group;\n+import org.sakaiproject.site.api.Site;\n+import org.sakaiproject.site.api.SiteService;\n+import org.sakaiproject.tool.api.SessionManager;\n+import org.sakaiproject.tool.api.ToolManager;\n+import org.sakaiproject.user.api.PreferencesService;\n+import org.sakaiproject.user.api.User;\n+import org.sakaiproject.user.api.UserDirectoryService;\n+import org.sakaiproject.user.api.UserNotDefinedException;\n+import org.springframework.stereotype.Service;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Service\n+@Slf4j\n+public class SakaiService  {\n+\n+    @Inject\n+    private EventTrackingService eventTrackingService;\n+\n+    @Inject\n+    private SiteService siteService;\n+\n+    @Inject\n+    private PreferencesService preferencesService;\n+\n+    @Inject\n+    private ServerConfigurationService serverConfigurationService;\n+\n+    @Inject\n+    private SessionManager sessionManager;\n+\n+    @Inject\n+    private ToolManager toolManager;\n+\n+    @Inject\n+    private UserDirectoryService userDirectoryService;\n+\n+    public Site getCurrentSite() {\n+        String siteId = toolManager.getCurrentPlacement().getContext();\n+        Site site = null;\n+        try {\n+            site = siteService.getSite(siteId);\n+        } catch (Exception ex) {\n+            log.error(\"Unable to find the site with Id {}.\", siteId);\n+            return null;\n+        }\n+        return site;\n+    }\n+\n+    public Locale getCurrentUserLocale() {\n+        String userId = sessionManager.getCurrentSessionUserId();\n+        return preferencesService.getLocale(userId);\n+    }\n+\n+    public String getCurrentUserId() {\n+        return sessionManager.getCurrentSessionUserId();\n+    }\n+\n+    public boolean saveSite(Site site) {\n+        try {\n+            siteService.save(site);\n+        } catch (IdUnusedException | PermissionException e) {\n+            log.error(\"Error saving the site {}.\", site.getId());\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    public User getUser(String userId) {\n+        try {\n+            return userDirectoryService.getUser(userId);\n+        } catch (UserNotDefinedException e) {\n+            log.error(\"Unable to get user by id {}.\", userId);\n+        }\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1"}, "originalPosition": 101}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE3MTEzMw==", "bodyText": "I'd make this an Optional.", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380171133", "createdAt": "2020-02-17T13:07:06Z", "author": {"login": "adrianfish"}, "path": "site-manage/site-group-manager/src/main/java/org/sakaiproject/groupmanager/service/SakaiService.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/****************************************************************************** \n+* Copyright (c) 2020 Apereo Foundation\n+\n+* Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+\n+*          http://opensource.org/licenses/ecl2\n+\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+ ******************************************************************************/\n+package org.sakaiproject.groupmanager.service;\n+\n+import java.util.Locale;\n+\n+import javax.inject.Inject;\n+\n+import org.sakaiproject.component.api.ServerConfigurationService;\n+import org.sakaiproject.event.api.EventTrackingService;\n+import org.sakaiproject.exception.IdUnusedException;\n+import org.sakaiproject.exception.PermissionException;\n+import org.sakaiproject.site.api.Group;\n+import org.sakaiproject.site.api.Site;\n+import org.sakaiproject.site.api.SiteService;\n+import org.sakaiproject.tool.api.SessionManager;\n+import org.sakaiproject.tool.api.ToolManager;\n+import org.sakaiproject.user.api.PreferencesService;\n+import org.sakaiproject.user.api.User;\n+import org.sakaiproject.user.api.UserDirectoryService;\n+import org.sakaiproject.user.api.UserNotDefinedException;\n+import org.springframework.stereotype.Service;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Service\n+@Slf4j\n+public class SakaiService  {\n+\n+    @Inject\n+    private EventTrackingService eventTrackingService;\n+\n+    @Inject\n+    private SiteService siteService;\n+\n+    @Inject\n+    private PreferencesService preferencesService;\n+\n+    @Inject\n+    private ServerConfigurationService serverConfigurationService;\n+\n+    @Inject\n+    private SessionManager sessionManager;\n+\n+    @Inject\n+    private ToolManager toolManager;\n+\n+    @Inject\n+    private UserDirectoryService userDirectoryService;\n+\n+    public Site getCurrentSite() {\n+        String siteId = toolManager.getCurrentPlacement().getContext();\n+        Site site = null;\n+        try {\n+            site = siteService.getSite(siteId);\n+        } catch (Exception ex) {\n+            log.error(\"Unable to find the site with Id {}.\", siteId);\n+            return null;\n+        }\n+        return site;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE3MTMyNA==", "bodyText": "I'd make this an optional.", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380171324", "createdAt": "2020-02-17T13:07:32Z", "author": {"login": "adrianfish"}, "path": "site-manage/site-group-manager/src/main/java/org/sakaiproject/groupmanager/service/SakaiService.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/****************************************************************************** \n+* Copyright (c) 2020 Apereo Foundation\n+\n+* Licensed under the Educational Community License, Version 2.0 (the \"License\");\n+* you may not use this file except in compliance with the License.\n+* You may obtain a copy of the License at\n+\n+*          http://opensource.org/licenses/ecl2\n+\n+* Unless required by applicable law or agreed to in writing, software\n+* distributed under the License is distributed on an \"AS IS\" BASIS,\n+* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+* See the License for the specific language governing permissions and\n+* limitations under the License.\n+ ******************************************************************************/\n+package org.sakaiproject.groupmanager.service;\n+\n+import java.util.Locale;\n+\n+import javax.inject.Inject;\n+\n+import org.sakaiproject.component.api.ServerConfigurationService;\n+import org.sakaiproject.event.api.EventTrackingService;\n+import org.sakaiproject.exception.IdUnusedException;\n+import org.sakaiproject.exception.PermissionException;\n+import org.sakaiproject.site.api.Group;\n+import org.sakaiproject.site.api.Site;\n+import org.sakaiproject.site.api.SiteService;\n+import org.sakaiproject.tool.api.SessionManager;\n+import org.sakaiproject.tool.api.ToolManager;\n+import org.sakaiproject.user.api.PreferencesService;\n+import org.sakaiproject.user.api.User;\n+import org.sakaiproject.user.api.UserDirectoryService;\n+import org.sakaiproject.user.api.UserNotDefinedException;\n+import org.springframework.stereotype.Service;\n+\n+import lombok.extern.slf4j.Slf4j;\n+\n+@Service\n+@Slf4j\n+public class SakaiService  {\n+\n+    @Inject\n+    private EventTrackingService eventTrackingService;\n+\n+    @Inject\n+    private SiteService siteService;\n+\n+    @Inject\n+    private PreferencesService preferencesService;\n+\n+    @Inject\n+    private ServerConfigurationService serverConfigurationService;\n+\n+    @Inject\n+    private SessionManager sessionManager;\n+\n+    @Inject\n+    private ToolManager toolManager;\n+\n+    @Inject\n+    private UserDirectoryService userDirectoryService;\n+\n+    public Site getCurrentSite() {\n+        String siteId = toolManager.getCurrentPlacement().getContext();\n+        Site site = null;\n+        try {\n+            site = siteService.getSite(siteId);\n+        } catch (Exception ex) {\n+            log.error(\"Unable to find the site with Id {}.\", siteId);\n+            return null;\n+        }\n+        return site;\n+    }\n+\n+    public Locale getCurrentUserLocale() {\n+        String userId = sessionManager.getCurrentSessionUserId();\n+        return preferencesService.getLocale(userId);\n+    }\n+\n+    public String getCurrentUserId() {\n+        return sessionManager.getCurrentSessionUserId();\n+    }\n+\n+    public boolean saveSite(Site site) {\n+        try {\n+            siteService.save(site);\n+        } catch (IdUnusedException | PermissionException e) {\n+            log.error(\"Error saving the site {}.\", site.getId());\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    public User getUser(String userId) {\n+        try {\n+            return userDirectoryService.getUser(userId);\n+        } catch (UserNotDefinedException e) {\n+            log.error(\"Unable to get user by id {}.\", userId);\n+        }\n+        return null;\n+    }\n+\n+    public User getUserByEid(String userEid) {\n+        try {\n+            return userDirectoryService.getUserByEid(userEid);\n+        } catch (UserNotDefinedException e) {\n+            log.error(\"Unable to get user by eid {}.\", userEid);\n+        }\n+        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE3MjE1Ng==", "bodyText": "This should really be in a JS file. We want to move away from embedding scripts in pages.", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380172156", "createdAt": "2020-02-17T13:09:25Z", "author": {"login": "adrianfish"}, "path": "site-manage/site-group-manager/src/main/webapp/WEB-INF/templates/auto_groups_step1.html", "diffHunk": "@@ -0,0 +1,56 @@\n+<!DOCTYPE html>\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\">\n+<head th:replace=\"fragments/common :: head\" />\n+<body>\n+  <div th:replace=\"fragments/common :: jQuery\" />\n+  <div class=\"portletBody\">\n+    <div id=\"menu\" th:include=\"fragments/menus :: main (autogroups)\" />\n+    <div class=\"page-header\"><h1 th:text=\"#{autogroups.header.wizard}\"></h1></div>\n+    <div th:replace=\"fragments/wizard :: step (step1)\" />\n+    <div class=\"row\" th:if=\"${step1ErrorMessage != null}\">\n+      <div class=\"col-sm-8\">\n+        <div class=\"sak-banner-error\" th:text=\"${step1ErrorMessage}\">You must at least select a role.</div>\n+      </div>\n+    </div>    \n+    <div class=\"row\" th:if=\"${!siteRoleList.isEmpty()}\">\n+      <div class=\"col-sm-8\">\n+        <div class=\"instruction\" th:text=\"#{autogroups.step1.info}\">Let's start with the first step. Please select which site role(s) to include in the groups you are creating.</div>\n+      </div>\n+    </div>\n+    <div class=\"row\" th:if=\"${!siteRoleList.isEmpty()}\">\n+      <div class=\"col-sm-8\">\n+          <form id=\"autogroups-wizard-step1-form\" th:action=\"@{/autogroups/submitStep1}\" th:object=\"${autoGroupsForm}\" method=\"post\">\n+            <table class=\"table table-bordered table-striped table-hover\">\n+            <thead>\n+              <tr>\n+                <th><input type=\"checkbox\" id=\"selectAllRoles\" th:text=\"| #{autogroups.step1.table.selectallnone}|\"/></th>\n+                <th th:text=\"#{autogroups.step1.table.role}\"></th>\n+              </tr>\n+            </thead>\n+            <tbody>\n+              <tr th:each=\"role : ${siteRoleList}\">\n+                <td><input type=\"checkbox\" name=\"selectedRoleList\" th:field=\"*{selectedRoleList}\" th:value=\"${role.id}\"/></td>\n+                <td th:text=\"${role.id}\"></td>\n+              </tr>\n+            </tbody>\n+            </table>\n+            <div class=\"act\">\n+              <input accesskey=\"x\" type=\"submit\" class=\"active\" id=\"autogroups-continue-button\" th:value=\"#{autogroups.button.continue}\" onclick=\"SPNR.disableControlsAndSpin( this, null );\">\n+              <a th:href=\"@{/}\" accesskey=\"x\" id=\"autogroups-cancel-button\" class=\"btn btn-default\" th:text=\"#{autogroups.button.cancel}\">Cancel</a>\n+            </div>\n+          </form>\n+      </div>\n+    </div>\n+  </div>\n+  <script th:inline=\"javascript\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE3MjUwMA==", "bodyText": "This should be in a js file.", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380172500", "createdAt": "2020-02-17T13:10:10Z", "author": {"login": "adrianfish"}, "path": "site-manage/site-group-manager/src/main/webapp/WEB-INF/templates/auto_groups_step2.html", "diffHunk": "@@ -0,0 +1,87 @@\n+<!DOCTYPE html>\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\">\n+<head th:replace=\"fragments/common :: head\" />\n+<body>\n+  <div th:replace=\"fragments/common :: jQuery\" />\n+  <div class=\"portletBody\">\n+    <div id=\"menu\" th:include=\"fragments/menus :: main (autogroups)\" />\n+    <div class=\"page-header\"><h1 th:text=\"#{autogroups.header.wizard}\"></h1></div>\n+    <div th:replace=\"fragments/wizard :: step (step2)\" /><br/>\n+    <div class=\"row\" th:if=\"${step2ErrorMessage != null}\">\n+      <div class=\"col-sm-8\">\n+        <div class=\"sak-banner-error\" th:text=\"${step2ErrorMessage}\">You must at least select a role or a section.</div>\n+      </div>\n+    </div>\n+    <div class=\"row\">\n+      <div class=\"col-sm-8\">\n+        <div class=\"well\">\n+          <div th:text=\"#{autogroups.step2.role.info}\">We see that you have selected to make groups of participants in the following role(s):</div>\n+            <ul>\n+              <li th:each=\"role : ${autoGroupsForm.selectedRoleList}\"><span th:text=\"${role}\"></span></li>\n+            </ul>\n+          </div>\n+      </div>\n+    </div>\n+    <div class=\"row\">\n+      <div class=\"col-sm-8\">\n+        <div class=\"instruction\" th:text=\"#{autogroups.step2.info}\">You now have the option to draw group members from specific section(s)/Roster(s). Would you like to do this?</div>\n+      </div>\n+    </div>\n+    <div class=\"row\">\n+      <div class=\"col-sm-8\">\n+        <form id=\"autogroups-wizard-step2-form\" th:action=\"@{/autogroups/submitStep2}\" th:object=\"${autoGroupsForm}\" method=\"post\">\n+          <input type=\"hidden\" name=\"wizardAction\" id=\"wizardAction\" value=\"\"/>\n+          <input type=\"hidden\" th:field=\"*{selectedRoleList}\" name=\"selectedRoleList\">\n+          <div class=\"radio\">\n+            <label for=\"sectionOptionDontUseSections\"><input id=\"sectionOptionDontUseSections\" type=\"radio\" name=\"sectionOption\" checked value=\"0\" th:field=\"*{sectionsOption}\"><span th:utext=\"#{autogroups.step2.no.section}\">No - (Include all site participants, regardless of section/roster, who fit the role(s) selected in Step 1)</span></label>\n+          </div>\n+          <div class=\"radio\" th:if=\"${!sectionList.isEmpty()}\">\n+            <label for=\"sectionOptionUseSections\"><input id=\"sectionOptionUseSections\" type=\"radio\" name=\"sectionOption\" value=\"1\" th:field=\"*{sectionsOption}\"><span th:utext=\"#{autogroups.step2.choose.section}\">Yes - (Select members from specific section/rosters, who fit the role(s) selected in Step 1)</span></label>\n+          </div>\n+          <div id=\"selectSectionDiv\" th:if=\"${!sectionList.isEmpty()}\" th:style=\"${autoGroupsForm.sectionsOption == 0 ? 'display:none' : 'display:block'}\">\n+            <div class=\"instruction\">Which section(s)/roster(s) should be included in the groups?</div>\n+            <table class=\"table table-hovered table-bordered table-striped\">\n+            <thead>\n+              <tr>\n+                <th><input type=\"checkbox\" id=\"selectAllSections\" th:text=\"| #{autogroups.step2.table.selectallnone}|\" onchange=\"checkSubmitButton();\"/></th>\n+                <th th:text=\"#{autogroups.step2.table.sectionroster}\">Section/Roster</th>\n+              </tr>\n+            </thead>\n+            <tbody>\n+              <tr th:each=\"section : ${sectionList}\">\n+                <td><input type=\"checkbox\" name=\"selectedSectionList\" th:field=\"*{selectedSectionList}\" th:value=\"${section.id}\"/></td>\n+                <td th:text=\"${section.title}\"></td>\n+              </tr>\n+            </tbody>\n+            </table>\n+          </div>\n+          <div class=\"act\">\n+            <input accesskey=\"c\" type=\"submit\" class=\"active\" id=\"autogroups-continue-button\" th:value=\"#{autogroups.button.continue}\" onclick=\"SPNR.disableControlsAndSpin( this, null );\">\n+            <a accesskey=\"b\" id=\"autogroups-back-button\" class=\"btn btn-default\" th:text=\"#{autogroups.button.back}\">Back</a>&nbsp;\n+            <a th:href=\"@{/}\" accesskey=\"x\" id=\"autogroups-cancel-button\" class=\"btn btn-default\" th:text=\"#{autogroups.button.cancel}\">Cancel</a>\n+          </div>\n+        </form>\n+      </div>\n+    </div>\n+  </div>\n+  <script th:inline=\"javascript\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE3Mjg0OQ==", "bodyText": "Should move this to an external JS file", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380172849", "createdAt": "2020-02-17T13:10:58Z", "author": {"login": "adrianfish"}, "path": "site-manage/site-group-manager/src/main/webapp/WEB-INF/templates/auto_groups_step3.html", "diffHunk": "@@ -0,0 +1,115 @@\n+<!DOCTYPE html>\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\">\n+<head th:replace=\"fragments/common :: head\" />\n+<body>\n+  <div th:replace=\"fragments/common :: jQuery\" />\n+  <div class=\"portletBody\">\n+    <div id=\"menu\" th:include=\"fragments/menus :: main (autogroups)\" />\n+    <div class=\"page-header\"><h1 th:text=\"#{autogroups.header.wizard}\"></h1></div>\n+    <div th:replace=\"fragments/wizard :: step (step3)\" /><br/>\n+    <div class=\"row\">\n+      <div class=\"col-sm-8\">\n+        <div class=\"well\">\n+          <div th:text=\"#{autogroups.step3.role.info}\">We see that you have selected to make groups of participants in the following role(s):</div>\n+            <ul>\n+              <li th:each=\"role : ${autoGroupsForm.selectedRoleList}\"><span th:text=\"${role}\"></span></li>\n+            </ul>\n+          <div th:if=\"${!selectedSectionList.isEmpty()}\" th:text=\"#{autogroups.step3.section.info}\">who are included in the following section(s)/roster(s):</div>\n+            <ul th:if=\"${!selectedSectionList.isEmpty()}\">\n+              <li th:each=\"section : ${selectedSectionList}\"><span th:text=\"${section.title}\"></span></li>\n+            </ul>\n+        </div>\n+      </div>\n+    </div>\n+    <div class=\"row\">\n+      <div class=\"col-sm-8\">\n+        <div class=\"instruction\" th:text=\"#{autogroups.step3.info}\">Now you are ready to define the group membership format/structure. Please select an option below.</div>\n+      </div>\n+    </div>\n+    <div class=\"row\">\n+      <div class=\"col-sm-8\">\n+        <form id=\"autogroups-wizard-step3-form\" th:action=\"@{/autogroups/submitStep3}\" th:object=\"${autoGroupsForm}\" method=\"post\">\n+          <input type=\"hidden\" name=\"wizardAction\" id=\"wizardAction\" value=\"\"/>\n+          <input type=\"hidden\" th:field=\"*{selectedRoleList}\" name=\"selectedRoleList\">\n+          <input type=\"hidden\" th:field=\"*{selectedSectionList}\" name=\"selectedSectionList\">\n+          <input type=\"hidden\" th:field=\"*{sectionsOption}\" name=\"sectionsOption\">\n+          <div class=\"radio\">\n+            <label for=\"pureConfiguration\"><input id=\"pureConfiguration\" type=\"radio\" name=\"structureConfigurationOption\" checked value=\"0\" th:field=\"*{structureConfigurationOption}\"><span th:text=\"#{autogroups.step3.option.mixture}\">Create groups containing a random mixture of users with the role XX, YY and ZZ </label>\n+          </div>\n+          <div id=\"mixtureStructureOptions\" class=\"col-sm-offset-1\" th:style=\"${autoGroupsForm.structureConfigurationOption == 1 ? 'display:none': 'display:block'}\">\n+            <div id=\"splitByGroups\" th:class=\"${autoGroupsForm.splitOptions == 0 ? 'optGroupSelect optGroupSelectSelected' : 'optGroupSelect'}\">\n+              <div class=\"radio\">\n+                <label for=\"splitByGroup\"><input id=\"splitByGroup\" type=\"radio\" name=\"splitOptions\" checked value=\"0\" th:field=\"*{splitOptions}\"><span th:text=\"#{autogroups.step3.split.by.groups}\">Split by number of groups needed</label>\n+              </div>\n+              <div id=\"splitByGroupsOptions\" th:style=\"${autoGroupsForm.splitOptions == 0 ? 'display:block' : 'display:none'}\">\n+                <div th:if=\"${autoGroupsForm.splitOptions == 0 && splitOptionsError != null}\" class=\"sak-banner-error\" th:text=\"${splitOptionsError}\">Error message.</div>\n+                <div class=\"form-group form-required\">\n+                  <label for=\"groupTitleByGroup\" class=\"form-control-label block\" th:text=\"#{autogroups.step3.group.title}\">Group Title</label>\n+                  <input name=\"groupTitleByGroup\" id=\"groupTitleByGroup\" type=\"text\" th:field=\"*{groupTitleByGroup}\" th:placeholder=\"#{autogroups.step3.group.title}\" class=\"form-control\">\n+                  <div class=\"instruction\" th:text=\"#{autogroups.step3.title.info}\">Note: Numbers will be appended to the title for each group. For example, a title of 'Team' will result in 'Team-1', 'Team-2', etc</div>\n+                </div>\n+                <div class=\"form-group form-required\">\n+                  <label for=\"groupNumberByGroup\" class=\"form-control-label block\" th:text=\"#{autogroups.step3.number.groups}\">Number of groups</label>\n+                  <input name=\"groupNumberByGroup\" id=\"groupNumberByGroup\" type=\"number\" min=\"0\" max=\"999\" class=\"form-control\" th:field=\"*{groupNumberByGroup}\">\n+                </div>\n+              </div>\n+            </div>\n+            <div id=\"splitByUsers\" class=\"optGroupSelect\" th:class=\"${autoGroupsForm.splitOptions == 1 ? 'optGroupSelect optGroupSelectSelected' : 'optGroupSelect'}\">\n+              <div class=\"radio\">\n+                <label for=\"splitByUser\"><input id=\"splitByUser\" type=\"radio\" name=\"splitOptions\" value=\"1\" th:field=\"*{splitOptions}\"><span th:text=\"#{autogroups.step3.split.by.users}\">Split by number of users needed per group </label>\n+              </div>\n+              <div id=\"splitByUsersOptions\" th:style=\"${autoGroupsForm.splitOptions == 1 ? 'display:block' : 'display:none'}\" >\n+                <div th:if=\"${autoGroupsForm.splitOptions == 1 && splitOptionsError != null}\" class=\"sak-banner-error\" th:text=\"${splitOptionsError}\">Error message.</div>\n+                <div class=\"form-group form-required\">\n+                  <label for=\"groupTitleByUser\" class=\"form-control-label block\" th:text=\"#{autogroups.step3.group.title}\">Group Title</label>\n+                  <input name=\"groupTitleByUser\" id=\"groupTitleByUser\" type=\"text\" th:field=\"*{groupTitleByUser}\" th:placeholder=\"#{autogroups.step3.group.title}\" class=\"form-control\">\n+                  <div class=\"instruction\" th:text=\"#{autogroups.step3.title.info}\">Note: Numbers will be appended to the title for each group. For example, a title of 'Team' will result in 'Team-1', 'Team-2', etc</div>\n+                </div>\n+                <div class=\"form-group form-required\">\n+                  <label for=\"groupNumberByUser\" class=\"form-control-label block\" th:text=\"#{autogroups.step3.number.users}\">Number of users</label>\n+                  <input name=\"groupNumberByUser\" id=\"groupNumberByUser\" type=\"number\" min=\"0\" max=\"999\" class=\"form-control\" th:field=\"*{groupNumberByUser}\">\n+                </div>\n+              </div>\n+            </div>\n+          </div>\n+          <div class=\"radio\">\n+            <label for=\"mixtureConfiguration\"><input id=\"mixtureConfiguration\" type=\"radio\" name=\"structureConfigurationOption\" value=\"1\" th:field=\"*{structureConfigurationOption}\"><span th:text=\"#{autogroups.step3.option.pure}\">Create N groups: X group(s) of users with the role XX and Y group(s) of users with the role YY.</span></label>\n+          </div>\n+          <div class=\"act\">\n+            <input accesskey=\"c\" type=\"submit\" class=\"active\" id=\"autogroups-continue-button\" th:value=\"#{autogroups.button.continue}\">\n+            <a accesskey=\"b\" id=\"autogroups-back-button\" class=\"btn btn-default\" th:text=\"#{autogroups.button.back}\">Back</a>&nbsp;\n+            <a th:href=\"@{/}\" accesskey=\"x\" id=\"autogroups-cancel-button\" class=\"btn btn-default\" th:text=\"#{autogroups.button.cancel}\">Cancel</a>\n+          </div>\n+        </form>\n+      </div>\n+    </div>\n+  </div>\n+  <script th:inline=\"javascript\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE3MzkzMg==", "bodyText": "Needs to be in an external JS", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380173932", "createdAt": "2020-02-17T13:13:20Z", "author": {"login": "adrianfish"}, "path": "site-manage/site-group-manager/src/main/webapp/WEB-INF/templates/group.html", "diffHunk": "@@ -0,0 +1,151 @@\n+<!DOCTYPE html>\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\">\n+<head th:replace=\"fragments/common :: head\" />\n+<body>\n+  <div th:replace=\"fragments/common :: jQuery\" />\n+  <div class=\"portletBody\">\n+    <div id=\"menu\" th:include=\"fragments/menus :: main (group)\" />\n+    <div class=\"page-header\">\n+      <h1 th:if=\"${groupForm.groupId == null}\" th:text=\"#{groups.header.new}\"></h1>\n+      <h1 th:if=\"${groupForm.groupId != null}\" th:text=\"#{groups.header.edit}\"></h1>\n+    </div>\n+    <div class=\"row\">\n+      <div class=\"col-sm-8\">\n+        <div class=\"sak-banner-error\" th:if=\"${errorMessage != null}\" th:text=\"${errorMessage}\"></div>\n+        <div class=\"instruction\" th:text=\"#{groups.instruction}\"></div>\n+      </div>\n+    </div>\n+    <form id=\"creategroup-form\" action=\"#\" th:action=\"@{/saveGroup}\" th:object=\"${groupForm}\" method=\"post\">\n+      <input type=\"hidden\" id=\"groupId\" name=\"groupId\" th:field=\"*{groupId}\"/>\n+      <input type=\"hidden\" id=\"filterByGroupId\" name=\"filterByGroupId\" th:field=\"*{filterByGroupId}\"/>\n+      <div class=\"form-group row\">\n+        <div class=\"col-sm-8\">\n+          <label for=\"groupTitle\" class=\"form-control-label block\" th:text=\"|* #{groups.title}|\">* Group Title</label>\n+          <input name=\"groupTitle\" id=\"groupTitle\" type=\"text\" th:field=\"*{groupTitle}\" size=\"50\" maxlength=\"99\" class=\"form-control\" th:placeholder=\"#{groups.title}\" required/>\n+        </div>\n+      </div>\n+      <div class=\"form-group row\">\n+        <div class=\"col-sm-8\">\n+          <label for=\"groupDescription\" class=\"form-control-label block\" th:text=\"#{groups.description}\">Description</label>\n+          <textarea name=\"groupDescription\" class=\"form-control\" rows=\"10\" cols=\"80\" th:field=\"*{groupDescription}\" th:placeholder=\"#{groups.description}\"></textarea>\n+        </div>\n+      </div>\n+      <div class=\"checkbox\">\n+        <label for=\"groupAllowViewMembership\" class=\"form-control-label block\">\n+          <input id=\"groupAllowViewMembership\" class=\"form-control\" type=\"checkbox\" th:field=\"*{groupAllowViewMembership}\" th:checked=\"${groupForm.groupAllowViewMembership}\"/>\n+          <span th:text=\"#{groups.allowviewmembership}\"></span>\n+        </label>\n+      </div>\n+      <div class=\"form-group row\" th:if=\"${!joinableSetList.isEmpty()}\">\n+        <div class=\"col-sm-8\">\n+          <label for=\"groupJoinableSet\" class=\"form-control-label block\" th:text=\"#{groups.joinableset}\">Joinable Set</label>\n+          <select class=\"form-control\" id=\"groupJoinableSet\" th:field=\"*{joinableSetName}\">\n+            <option value=\"\" th:text=\"#{groups.none}\">\n+            <option th:each=\"joinableSet : ${joinableSetList}\" th:value=\"${joinableSet}\" th:text=\"${joinableSet}\">\n+          </select>\n+        </div>\n+      </div>\n+      <div id=\"joinableOptionsDiv\" class=\"form-group row\" th:if=\"${!joinableSetList.isEmpty()}\">\n+        <div class=\"col-sm-8\">\n+          <div class=\"well\">\n+            <div class=\"checkbox\">\n+              <label for=\"groupAllowPreviewMembership\" class=\"form-control-label block\">\n+                <input id=\"groupAllowPreviewMembership\" class=\"form-control\" type=\"checkbox\" th:field=\"*{groupAllowPreviewMembership}\" th:checked=\"${groupForm.groupAllowPreviewMembership}\"/>\n+                <span th:text=\"#{groups.joinableset.allowpreviewmembership}\"></span>\n+              </label>\n+            </div>\n+            <div class=\"checkbox\">\n+              <label for=\"groupUnjoinable\" class=\"form-control-label block\">\n+                <input id=\"groupUnjoinable\" class=\"form-control\" type=\"checkbox\" th:field=\"*{groupUnjoinable}\" th:checked=\"${groupForm.groupUnjoinable}\"/>\n+                <span th:text=\"#{groups.joinableset.allowunjoin}\"></span>\n+              </label>\n+            </div>\n+            <label for=\"joinableSetNumOfMembers\" class=\"form-control-label block\" th:text=\"#{groups.joinableset.maxmembers}\">Max members:</label>\n+            <input name=\"joinableSetNumOfMembers\" id=\"joinableSetNumOfMembers\" type=\"number\" th:field=\"*{joinableSetNumOfMembers}\" min=\"0\" max=\"999\" class=\"form-control\" th:placeholder=\"#{groups.joinableset.maxmembers}\"/>\n+          </div>\n+        </div>\n+      </div>\n+      <div class=\"form-group row\" th:if=\"${!groupList.isEmpty() && !sectionList.isEmpty()}\">\n+        <div class=\"col-sm-8\">\n+          <label for=\"groupMembershipFilter\" class=\"form-control-label block\" th:text=\"#{groups.filter.membership}\">Filter membership</label>\n+          <select class=\"form-control\" id=\"groupMembershipFilter\" th:field=\"*{filterByGroupId}\">\n+            <option value=\"\" th:text=\"#{groups.none}\">\n+            <option th:each=\"group : ${groupList}\" th:value=\"${group.id}\" th:text=\"|#{groups.filter.membership.group} ${group.title}|\">\n+            <option th:each=\"section : ${sectionList}\" th:value=\"${section.id}\" th:text=\"|#{groups.filter.membership.section} ${section.title}|\">\n+          </select>\n+        </div>\n+      </div>\n+      <div class=\"form-group row\">\n+          <div class=\"col-sm-3\">\n+            <label for=\"groupMembersFrom\" class=\"form-control-label block\" th:text=\"#{groups.available.members}\">Available Members</label>\n+            <select name=\"groupMembersFrom\" id=\"groupMembersFrom\" class=\"form-control\" multiple=\"multiple\" size=\"8\">\n+              <option th:if=\"${groupForm.groupMembers == null || !groupForm.groupMembers.contains(siteRole.id)}\" th:each=\"siteRole : ${siteRoleList}\" th:value=\"${siteRole.id}\" th:text=\"|#{groups.role} ${siteRole.id}|\"></option>\n+              <option th:if=\"${groupForm.groupMembers == null || !groupForm.groupMembers.contains(siteMember.id)}\" th:each=\"siteMember : ${siteMemberList}\" th:value=\"${siteMember.id}\" th:text=\"|${siteMember.displayName} (${siteMember.eid})|\"></option>\n+            </select>\n+          </div>\n+          <div class=\"col-sm-2\">\n+            <label for=\"groupMembersFrom_rightAll\" class=\"form-control-label block\" th:text=\"#{groups.membership.controls}\">Membership controls</label>\n+            <button type=\"button\" id=\"groupMembersFrom_rightAll\" class=\"btn btn-block\"><i class=\"glyphicon glyphicon-forward\"></i></button>\n+            <button type=\"button\" id=\"groupMembersFrom_rightSelected\" class=\"btn btn-block\"><i class=\"glyphicon glyphicon-chevron-right\"></i></button>\n+            <button type=\"button\" id=\"groupMembersFrom_leftSelected\" class=\"btn btn-block\"><i class=\"glyphicon glyphicon-chevron-left\"></i></button>\n+            <button type=\"button\" id=\"groupMembersFrom_leftAll\" class=\"btn btn-block\"><i class=\"glyphicon glyphicon-backward\"></i></button>\n+          </div>\n+          <div class=\"col-sm-3\">\n+            <label for=\"groupMembersFrom_to\" class=\"form-control-label block\" th:text=\"#{groups.assigned.members}\">Assigned Members</label>\n+            <select name=\"groupMembers\" th:field=\"*{groupMembers}\" id=\"groupMembersFrom_to\" class=\"form-control\" multiple=\"multiple\" size=\"8\">\n+              <option th:if=\"${groupForm.groupMembers != null && groupForm.groupMembers.contains(siteRole.id)}\" th:each=\"siteRole : ${siteRoleList}\" th:value=\"${siteRole.id}\" th:text=\"|#{groups.role} ${siteRole.id}|\"></option>\n+              <option th:if=\"${groupForm.groupMembers != null && groupForm.groupMembers.contains(siteMember.id)}\" th:each=\"siteMember : ${siteMemberList}\" th:value=\"${siteMember.id}\" th:text=\"|${siteMember.displayName} (${siteMember.eid})|\"></option>\n+            </select>\n+          </div>\n+      </div>\n+      <div class=\"act\">\n+        <input th:if=\"${groupForm.groupId == null}\" accesskey=\"s\" disabled=\"disabled\" id=\"create-group-submit-button\" type=\"submit\" class=\"active\" onclick=\"SPNR.disableControlsAndSpin( this, null );\" th:value=\"#{groups.button.create}\">\n+        <input th:if=\"${groupForm.groupId != null}\" accesskey=\"s\" id=\"save-group-submit-button\" type=\"submit\" class=\"active\" onclick=\"SPNR.disableControlsAndSpin( this, null );\" th:value=\"#{groups.button.save}\">\n+        <a th:href=\"@{/}\" accesskey=\"x\" id=\"create-group-cancel-button\" class=\"btn btn-default\" th:text=\"#{groups.button.cancel}\">Cancel</a>\n+      </div>\n+    </form>\n+  </div>\n+  <script th:inline=\"javascript\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE3NDY4MA==", "bodyText": "Needs to be in a js file", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380174680", "createdAt": "2020-02-17T13:15:02Z", "author": {"login": "adrianfish"}, "path": "site-manage/site-group-manager/src/main/webapp/WEB-INF/templates/index.html", "diffHunk": "@@ -0,0 +1,126 @@\n+<!DOCTYPE html>\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\">\n+<head th:replace=\"fragments/common :: head\" />\n+<body>\n+  <div th:replace=\"fragments/common :: jQuery\" />\n+  <div class=\"portletBody\">\n+    <div id=\"menu\" th:include=\"fragments/menus :: main (index)\" />\n+    <div class=\"page-header\"><h1 th:text=\"#{index.header.grouplist}\"></h1></div>\n+    <div class=\"sak-banner-warn\" th:if=\"${groupList.isEmpty()}\" th:text=\"#{index.warning.groupempty}\">No groups in this site.</div>\n+    <form th:if=\"${!groupList.isEmpty()}\" id=\"group-manager-form\" action=\"#\" th:action=\"@{/removeGroups}\" th:object=\"${mainForm}\" method=\"post\">\n+      <table id=\"groupTable\" class=\"table table-striped table-bordered table-hover\">\n+        <thead>\n+          <tr>\n+            <th th:text=\"#{index.table.grouptitle}\">Group Title</th>\n+            <th th:text=\"#{index.table.joinableset}\">Joinable set</th>\n+            <th class=\"hidden-xs\" th:text=\"#{index.table.groupsize}\">Size (Max)</th>\n+            <th class=\"hidden-xs\" th:text=\"#{index.table.groupmembers}\">Members</th>\n+            <th><input type=\"checkbox\" id=\"selectAllGroups\" th:text=\"| #{index.table.selectallnone}|\"/></th>\n+          </tr>\n+        </thead>\n+        <tbody>\n+          <tr th:each=\"group : ${groupList}\">\n+            <td>\n+              <span th:if=\"${lockedGroupList.contains(group)}\" class=\"fa fa-fw fa-lock\" aria-hidden=\"true\" th:title=\"#{index.table.grouplocked}\"></span>\n+              <a th:if=\"${!lockedGroupList.contains(group)}\" th:href=\"@{/group(groupId=${group.id})}\" th:text=\"${group.title}\"></a>\n+              <span th:if=\"${lockedGroupList.contains(group)}\" th:text=\"${group.title}\"></span>\n+            </td>\n+            <td><a th:if=\"${groupJoinableSetMap.get(group.id) != null}\" th:href=\"@{/joinableset(joinableSetId=${groupJoinableSetMap.get(group.id)})}\" th:text=\"${groupJoinableSetMap.get(group.id)}\"></a></td>\n+            <td class=\"hidden-xs\"><span th:text=\"${group.getMembers().size()}\"></span> <span th:if=\"${groupJoinableSetSizeMap.get(group.id) != null}\" th:text=\"'('+${groupJoinableSetSizeMap.get(group.id)}+')'\"></span></td>\n+            <td class=\"hidden-xs\" th:text=\"${groupMemberMap.get(group.id)}\"></td>\n+            <td>\n+              <input th:if=\"${!lockedForDeletionGroupList.contains(group)}\" th:attr=\"groupInfo=|${group.title} - ${group.getMembers().size()} #{index.table.members}|\" type=\"checkbox\" name=\"deletedGroupList\" th:field=\"*{deletedGroupList}\" th:value=\"${group.id}\" onchange=\"checkSubmitButton();\"/>\n+              <span th:if=\"${lockedForDeletionGroupList.contains(group)}\" class=\"fa fa-fw fa-lock\" aria-hidden=\"true\" th:title=\"#{index.table.grouplocked.deletion}\"></span>\n+            </td>\n+          </tr>\n+        </tbody>\n+      </table>\n+      <div class=\"act\">\n+        <input accesskey=\"s\" disabled=\"disabled\" id=\"delete-groups-submit-button\" type=\"submit\" class=\"active\" th:value=\"#{index.button.removechecked}\">\n+        <a accesskey=\"x\" href=\"#\" id=\"delete-groups-cancel-button\" class=\"btn btn-default\" th:text=\"#{index.button.cancel}\">Cancel</a>\n+      </div>\n+      <div class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\" id=\"confirmation-modal\">\n+        <div class=\"modal-dialog modal-md\">\n+          <div class=\"modal-content\">\n+            <div class=\"modal-header\">\n+              <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span class=\"fa fa-times\" aria-hidden=\"true\"></span></button>\n+              <h4 th:text=\"#{index.modal.confirm}\" class=\"modal-title\">Confirm</h4>\n+            </div>\n+            <div class=\"modal-body\">\n+              <div class=\"sak-banner-warn\" th:text=\"#{index.modal.confirm.instruction}\">You are about delete the following groups:</div>\n+              <ul id=\"deleted-groups-list\"></ul>\n+            </div>\n+            <div class=\"modal-footer act\">\n+              <button type=\"button\" class=\"active\" id=\"modal-btn-confirm\" th:text=\"#{index.modal.button.delete}\" onclick=\"SPNR.disableControlsAndSpin( this, null );\">Delete these groups</button>\n+              <button type=\"button\" class=\"btn btn-default\" id=\"modal-btn-cancel\" th:text=\"#{index.button.cancel}\">Cancel</button>\n+            </div>\n+          </div>\n+        </div>\n+      </div>\n+    </form>\n+  </div>\n+\n+  <script th:inline=\"javascript\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDE3NDk0NQ==", "bodyText": "Needs to be in a js file", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380174945", "createdAt": "2020-02-17T13:15:34Z", "author": {"login": "adrianfish"}, "path": "site-manage/site-group-manager/src/main/webapp/WEB-INF/templates/joinable_set.html", "diffHunk": "@@ -0,0 +1,178 @@\n+<!DOCTYPE html>\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\">\n+<head th:replace=\"fragments/common :: head\" />\n+<body>\n+  <div th:replace=\"fragments/common :: jQuery\" />\n+  <div class=\"portletBody\">\n+    <div id=\"menu\" th:include=\"fragments/menus :: main (joinableset)\" />\n+    <div class=\"page-header\">\n+      <h1 th:if=\"${joinableSetForm.joinableSetId == null}\" th:text=\"#{joinableset.header.new}\"></h1>\n+      <h1 th:if=\"${joinableSetForm.joinableSetId != null}\" th:text=\"#{joinableset.header.edit}\"></h1>\n+    </div>\n+    <div class=\"row\">\n+      <div class=\"col-sm-6\">\n+        <div class=\"sak-banner-error\" th:if=\"${errorMessage != null}\" th:text=\"${errorMessage}\"></div>\n+        <div class=\"instruction\" th:text=\"#{joinableset.instruction}\">Joinable sets consist of automatically created groups that users can elect to join.  Each group in a set begins with the set name and ends with a unique number.  An individual can join one group per set.</div>\n+      </div>\n+    </div>\n+    <form id=\"createnewjoinableset-form\" action=\"#\" th:action=\"@{/saveJoinableSet}\" th:object=\"${joinableSetForm}\" method=\"post\">\n+      <input type=\"hidden\" th:if=\"${joinableSetForm.joinableSetId != null}\" name=\"joinableSetId\" th:value=\"${joinableSetForm.joinableSetId}\">\n+        <div class=\"form-group row\" id=\"setName\">\n+          <div class=\"col-sm-6\"> \n+            <label for=\"groupTitle\" class=\"form-control-label\" th:text=\"|* #{joinableset.setname}|\">Set name:</label>\n+            <input class=\"form-control\" name=\"groupTitle\" id=\"groupTitle\" type=\"text\" th:placeholder=\"#{joinableset.setname}\" th:field=\"*{groupTitle}\" required/>\n+          </div>\n+        </div>\n+        <div class=\"form-group row\" th:if=\"${joinableSetForm.joinableSetId == null}\">\n+          <div class=\"col-sm-6\">\n+            <label class=\"form-control-label\" for=\"groupNumber\" th:text=\"|* #{joinableset.numberofgroups}|\">Number of groups:</label>\n+            <input class=\"form-control\" name=\"groupNumber\" id=\"groupNumber\" type=\"number\" min=\"1\" max=\"999\" th:field=\"*{groupNumber}\"/>\n+          </div>\n+        </div>\n+        <div class=\"form-group row\" th:if=\"${joinableSetForm.joinableSetId == null}\">\n+          <div class=\"col-sm-6\">\n+            <label class=\"form-control-label\" for=\"groupMaxMembers\" th:text=\"|* #{joinableset.maxmembers}|\" th:field=\"*{groupMaxMembers}\">Max members per group:</label>\n+            <input class=\"form-control\" name=\"groupMaxMembers\" id=\"groupMaxMembers\" type=\"number\" min=\"1\" max=\"999\" th:field=\"*{groupMaxMembers}\"/>\n+          </div>\n+        </div>\n+        <div class=\"checkbox\" th:if=\"${joinableSetForm.joinableSetId == null}\">\n+          <label for=\"allowPreviewMembership\">\n+            <input class=\"form-control\" name=\"allowPreviewMembership\" id=\"allowPreviewMembership\" type=\"checkbox\" th:field=\"*{allowPreviewMembership}\">\n+            <span th:text=\"#{joinableset.allow.previewmembership}\">Allow user to see group membership before joining</span>\n+          </label>\n+        </div>\n+        <div class=\"checkbox\" th:if=\"${joinableSetForm.joinableSetId == null}\">\n+          <label for=\"allowViewMembership\">\n+            <input class=\"form-control\" name=\"allowViewMembership\" id=\"allowViewMembership\" type=\"checkbox\" th:field=\"*{allowViewMembership}\">\n+            <span th:text=\"#{joinableset.allow.viewmembership}\">Allow members to see the other members of these groups after joining</span>\n+          </label>\n+        </div>\n+        <div class=\"checkbox\">\n+          <label for=\"allowUnjoin\">\n+            <input class=\"form-control\" name=\"allowUnjoin\" id=\"allowUnjoin\" type=\"checkbox\" th:field=\"*{allowUnjoin}\">\n+            <span th:text=\"#{joinableset.allow.unjoin}\">Allow members to unjoin (leave) groups in this set after joining</span>\n+          </label>\n+        </div>\n+        <div class=\"row\" th:if=\"${joinableSetForm.joinableSetId != null}\">\n+          <div class=\"col-sm-6\">\n+            <div class=\"panel-group\" id=\"accordion\">\n+              <div class=\"panel panel-default\">\n+                <div class=\"panel-heading\">\n+                  <h4 class=\"panel-title\">\n+                    <a data-parent=\"#accordion\" data-toggle=\"collapse\" href=\"#groupCollapsible\" th:text=\"|#{joinableset.current.groups} (${joinableSetGroups.size()})|\">Current Groups:</a>\n+                  </h4>\n+                </div>\n+                <div id=\"groupCollapsible\" class=\"panel-collapse collapse\">\n+                  <ul class=\"list-group\">\n+                    <li class=\"list-group-item\" th:each=\"group : ${joinableSetGroups}\"><span th:text=\"${group.title}\"></span></li>\n+                  </ul>\n+                </div>\n+              </div>\n+              <div class=\"panel panel-default\">\n+                <div class=\"panel-heading\">\n+                  <h4 class=\"panel-title\">\n+                    <a data-parent=\"#accordion\" data-toggle=\"collapse\" href=\"#additionalGroupsCollapsible\" th:text=\"#{joinableset.additional.groups}\">Generate Additional Groups</a>\n+                  </h4>\n+                </div>\n+                <div id=\"additionalGroupsCollapsible\" class=\"panel-collapse collapse\">\n+                  <div class=\"col-sm-12\">\n+                    <div class=\"sak-banner-info\" th:text=\"#{joinableset.additional.instructions}\">These groups will be added after saving the joinable set.</div>\n+                    <label class=\"form-control-label\" for=\"groupNumber\" th:text=\"#{joinableset.numberofgroups}\">Number of groups:</label>\n+                    <input class=\"form-control\" name=\"groupNumber\" id=\"groupNumber\" type=\"number\" min=\"0\" max=\"999\" th:field=\"*{groupNumber}\"/>\n+                    <label class=\"form-control-label\" for=\"groupMaxMembers\" th:text=\"#{joinableset.maxmembers}\" th:field=\"*{groupMaxMembers}\">Max members per group:</label>\n+                    <input class=\"form-control\" name=\"groupMaxMembers\" id=\"groupMaxMembers\" type=\"number\" min=\"1\" max=\"999\" th:field=\"*{groupMaxMembers}\" value=\"1\"/>\n+                    <div class=\"checkbox\">\n+                      <label for=\"allowPreviewMembership\">\n+                        <input class=\"form-control\" name=\"allowPreviewMembership\" id=\"allowPreviewMembership\" type=\"checkbox\" th:field=\"*{allowPreviewMembership}\">\n+                        <span th:text=\"#{joinableset.allow.previewmembership}\">Allow user to see group membership before joining</span>\n+                      </label>\n+                    </div>\n+                    <div class=\"checkbox\">\n+                      <label for=\"allowViewMembership\">\n+                        <input class=\"form-control\" name=\"allowViewMembership\" id=\"allowViewMembership\" type=\"checkbox\" th:field=\"*{allowViewMembership}\">\n+                        <span th:text=\"#{joinableset.allow.viewmembership}\">Allow members to see the other members of these groups after joining</span>\n+                      </label>\n+                    </div>\n+                  </div>\n+                  <div class=\"clearfix\"></div>\n+                </div>\n+              </div>\n+              <div class=\"panel panel-default\">\n+                <div class=\"panel-heading\">\n+                  <h4 class=\"panel-title\">\n+                    <a data-parent=\"#accordion\" data-toggle=\"collapse\" href=\"#notJoinedUsersCollapsible\" th:text=\"|#{joinableset.unjoined.users} (${notJoinedUserList.size()})|\">Users who have not yet joined a group in this set</a>\n+                  </h4>\n+                </div>\n+                <div id=\"notJoinedUsersCollapsible\" class=\"panel-collapse collapse\">\n+                  <ul class=\"list-group\">\n+                    <li class=\"list-group-item\" th:each=\"user : ${notJoinedUserList}\"><span th:text=\"|${user.displayName} (${user.eid})|\"></span></li>\n+                  </ul>\n+                </div>\n+              </div>\n+            </div>\n+          </div>\n+        </div>\n+        <div class=\"act\">\n+          <input th:if=\"${joinableSetForm.joinableSetId == null}\" accesskey=\"s\" disabled=\"disabled\" id=\"create-joinableset-submit-button\" type=\"submit\" class=\"active\" th:value=\"#{joinableset.button.add}\">\n+          <input th:if=\"${joinableSetForm.joinableSetId != null}\" accesskey=\"s\" id=\"save-joinableset-submit-button\" type=\"submit\" class=\"active\" th:value=\"#{joinableset.button.save}\">\n+          <a th:href=\"@{/deleteJoinableSet(joinableSetId=${joinableSetForm.joinableSetId})}\" th:if=\"${joinableSetForm.joinableSetId != null}\" accesskey=\"d\" id=\"delete-joinableset-submit-button\" type=\"submit\" class=\"active\" th:value=\"#{joinableset.button.delete}\">Delete Joinable Set</a>\n+          <a th:href=\"@{/}\" accesskey=\"x\" id=\"create-joinableset-cancel-button\" class=\"btn btn-default\" th:text=\"#{joinableset.button.cancel}\">Cancel</a>\n+        </div>\n+        <div class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-hidden=\"true\" id=\"confirmation-modal\">\n+          <div class=\"modal-dialog modal-md\">\n+            <div class=\"modal-content\">\n+              <div class=\"modal-header\">\n+                <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span class=\"fa fa-times\" aria-hidden=\"true\"></span></button>\n+                <h4 th:text=\"#{joinableset.modal.confirm}\" class=\"modal-title\">Confirm</h4>\n+              </div>\n+              <div class=\"modal-body\">\n+                <div class=\"sak-banner-warn\" th:text=\"#{joinableset.modal.confirm.instruction}\">You are about delete the following joinable set.</div>\n+              </div>\n+              <div class=\"modal-footer act\">\n+                <button type=\"button\" class=\"active\" id=\"modal-btn-confirm\" th:text=\"#{joinableset.button.delete}\" onclick=\"SPNR.disableControlsAndSpin( this, null );\">Delete the joinable set</button>\n+                <button type=\"button\" class=\"btn btn-default\" id=\"modal-btn-cancel\" th:text=\"#{joinableset.button.cancel}\">Cancel</button>\n+              </div>\n+            </div>\n+          </div>\n+        </div>\n+    </form>\n+  </div>\n+  <script th:inline=\"javascript\">", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bc6a6068da359530ac3a15c723bcc2d26a14d5c1"}, "originalPosition": 140}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a34d1276a6996c210c50423bdd4cc5b3b6cf1d8c", "author": {"user": {"login": "mpellicer", "name": "Miguel Pellicer"}}, "url": "https://github.com/sakaiproject/sakai/commit/a34d1276a6996c210c50423bdd4cc5b3b6cf1d8c", "committedDate": "2020-02-17T09:04:26Z", "message": "SAK-46072 RSF Deprecation: Remove deprecated RSF group helpers and cleanup properties"}, "afterCommit": {"oid": "ae85c43959c2daf4318aee4b65a405f804e17537", "author": {"user": {"login": "mpellicer", "name": "Miguel Pellicer"}}, "url": "https://github.com/sakaiproject/sakai/commit/ae85c43959c2daf4318aee4b65a405f804e17537", "committedDate": "2020-02-18T10:59:39Z", "message": "SAK-46072 RSF Deprecation: Remove deprecated RSF group helpers and cleanup properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3a627d7e4e920d7b64fd22c5b8f9c061f09bad72", "author": {"user": {"login": "mpellicer", "name": "Miguel Pellicer"}}, "url": "https://github.com/sakaiproject/sakai/commit/3a627d7e4e920d7b64fd22c5b8f9c061f09bad72", "committedDate": "2020-02-18T11:39:50Z", "message": "SAK-40672 New Site Group Manager helper including the auto-groups wizard."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a55b4f5882bc1975f6839715c91fe3fb3ecb0058", "author": {"user": {"login": "mpellicer", "name": "Miguel Pellicer"}}, "url": "https://github.com/sakaiproject/sakai/commit/a55b4f5882bc1975f6839715c91fe3fb3ecb0058", "committedDate": "2020-02-18T11:40:06Z", "message": "SAK-46072 RSF Deprecation: Remove deprecated RSF group helpers and cleanup properties"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ae85c43959c2daf4318aee4b65a405f804e17537", "author": {"user": {"login": "mpellicer", "name": "Miguel Pellicer"}}, "url": "https://github.com/sakaiproject/sakai/commit/ae85c43959c2daf4318aee4b65a405f804e17537", "committedDate": "2020-02-18T10:59:39Z", "message": "SAK-46072 RSF Deprecation: Remove deprecated RSF group helpers and cleanup properties"}, "afterCommit": {"oid": "a55b4f5882bc1975f6839715c91fe3fb3ecb0058", "author": {"user": {"login": "mpellicer", "name": "Miguel Pellicer"}}, "url": "https://github.com/sakaiproject/sakai/commit/a55b4f5882bc1975f6839715c91fe3fb3ecb0058", "committedDate": "2020-02-18T11:40:06Z", "message": "SAK-46072 RSF Deprecation: Remove deprecated RSF group helpers and cleanup properties"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNTgxMzQw", "url": "https://github.com/sakaiproject/sakai/pull/7888#pullrequestreview-360581340", "createdAt": "2020-02-18T18:43:31Z", "commit": {"oid": "a55b4f5882bc1975f6839715c91fe3fb3ecb0058"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNTY0MTM1", "url": "https://github.com/sakaiproject/sakai/pull/7888#pullrequestreview-360564135", "createdAt": "2020-02-18T18:17:07Z", "commit": {"oid": "3a627d7e4e920d7b64fd22c5b8f9c061f09bad72"}, "state": "APPROVED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODoxNzowOFrOFrNMRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODozMDoyOVrOFrNm3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0OTIyMQ==", "bodyText": "You need to namespace these functions - they're in the window scope and may clash with other tools. You could just use groupmanager.checkSubmitButton, or something like that.", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380849221", "createdAt": "2020-02-18T18:17:08Z", "author": {"login": "adrianfish"}, "path": "site-manage/site-group-manager/src/main/webapp/WEB-INF/templates/fragments/javascript.html", "diffHunk": "@@ -0,0 +1,221 @@\n+<!DOCTYPE html>\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\">\n+<body>\n+<script th:fragment=\"indexJs\" th:inline=\"javascript\">\n+  /*<![CDATA[*/\n+  $('#delete-groups-cancel-button').click(function(e) {\n+    e.preventDefault;\n+    window.location = window.location.href.replace('/sakai-site-group-manager.helper', '');\n+  });\n+\n+  function checkSubmitButton() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a627d7e4e920d7b64fd22c5b8f9c061f09bad72"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1MTYzOQ==", "bodyText": "Indentation a bit odd.", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380851639", "createdAt": "2020-02-18T18:21:55Z", "author": {"login": "adrianfish"}, "path": "site-manage/site-group-manager/src/main/webapp/WEB-INF/templates/fragments/javascript.html", "diffHunk": "@@ -0,0 +1,221 @@\n+<!DOCTYPE html>\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\">\n+<body>\n+<script th:fragment=\"indexJs\" th:inline=\"javascript\">\n+  /*<![CDATA[*/\n+  $('#delete-groups-cancel-button').click(function(e) {\n+    e.preventDefault;\n+    window.location = window.location.href.replace('/sakai-site-group-manager.helper', '');\n+  });\n+\n+  function checkSubmitButton() {\n+    var anyCheckboxEnabled = false;\n+      $(':checkbox').each(function() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a627d7e4e920d7b64fd22c5b8f9c061f09bad72"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg1NjAzMQ==", "bodyText": "Generally, do you need to keep all this code in a thymeleaf template? Why not just have it in a js file and include that like normal. The benefit of doing that is that you can modify js code directly in your deployed webapp. Rapid iteration on your js, all that good stuff. This way, you have to compile your app each time.", "url": "https://github.com/sakaiproject/sakai/pull/7888#discussion_r380856031", "createdAt": "2020-02-18T18:30:29Z", "author": {"login": "adrianfish"}, "path": "site-manage/site-group-manager/src/main/webapp/WEB-INF/templates/fragments/javascript.html", "diffHunk": "@@ -0,0 +1,221 @@\n+<!DOCTYPE html>\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:th=\"http://www.thymeleaf.org\">\n+<body>\n+<script th:fragment=\"indexJs\" th:inline=\"javascript\">\n+  /*<![CDATA[*/\n+  $('#delete-groups-cancel-button').click(function(e) {\n+    e.preventDefault;\n+    window.location = window.location.href.replace('/sakai-site-group-manager.helper', '');\n+  });\n+\n+  function checkSubmitButton() {\n+    var anyCheckboxEnabled = false;\n+      $(':checkbox').each(function() {\n+        if(this.checked) {\n+          $('#delete-groups-submit-button').attr('disabled', false);\n+          anyCheckboxEnabled = true;\n+        }\n+      });\n+\n+      if(!anyCheckboxEnabled) {\n+        $('#delete-groups-submit-button').attr('disabled', true);\n+      }\n+  }\n+\n+  $('#selectAllGroups').click(function(e) {\n+    var selectAllChecked = this.checked;\n+    $(':checkbox').each(function() {\n+      this.checked = selectAllChecked;\n+    });\n+\n+    $('#delete-groups-submit-button').attr('disabled', !selectAllChecked );\n+  });\n+\n+  var confirmationModal = function(callback){\n+    $('#group-manager-form').on('submit', function(e){\n+      e.preventDefault();\n+      $('#confirmation-modal').modal('show');\n+      $('#deleted-groups-list').empty();\n+      $(':checkbox').each(function() {\n+        if(this.checked && this.name == 'deletedGroupList') {\n+          $('#deleted-groups-list').append('<li>' + this.getAttribute('groupinfo') + '</li>');\n+        }\n+      });\n+    });\n+\n+    $('#modal-btn-confirm').on('click', function(){\n+      callback(true);\n+      $('#confirmation-modal').modal('hide');\n+    });\n+\n+    $('#modal-btn-cancel').on('click', function(){\n+      callback(false);\n+      $('#confirmation-modal').modal('hide');\n+    });\n+  };\n+\n+  confirmationModal(function(confirm) {\n+    if (confirm) {\n+      document.getElementById('group-manager-form').submit();\n+    }\n+  });\n+  /*]]>*/\n+</script>\n+\n+<script th:fragment=\"joinableSetJs\" th:inline=\"javascript\">\n+  /*<![CDATA[*/\n+  $(document).ready(function() {\n+    //Disable the submit button\n+    $('#create-joinableset-submit-button').prop('disabled', true);\n+\n+    //Enable or disable the submit button depending on the required fields\n+    $('input[type=\"text\"], input[type=\"number\"]').keyup(function() {\n+      $(':input[type=\"submit\"]').prop('disabled', !($('#groupTitle').val() != '' && $('#groupNumber').val() != '' && $('#groupMaxMembers').val() != ''));\n+    });\n+  });\n+\n+  var confirmationModal = function(callback){\n+    $('#delete-joinableset-submit-button').on('click', function(e){\n+      e.preventDefault();\n+      $('#confirmation-modal').modal('show');\n+    });\n+\n+   $('#modal-btn-confirm').on('click', function(){\n+     $('#confirmation-modal').modal('hide');\n+     window.location.replace($('#delete-joinableset-submit-button').attr('href'));\n+   });\n+\n+   $('#modal-btn-cancel').on('click', function(){\n+     callback(false);\n+     $('#confirmation-modal').modal('hide');\n+   });\n+\n+  };\n+\n+  confirmationModal(function(confirm) {\n+    if (confirm) {\n+      document.getElementById('group-manager-form').submit();\n+    }\n+  });\n+/*]]>*/\n+</script>\n+\n+<script th:fragment=\"groupJs\" th:inline=\"javascript\">\n+  /*<![CDATA[*/\n+  // Load the multiselect two sides library\n+  includeWebjarLibrary('multiselect-two-sides');\n+\n+  $(document).ready(function() {\n+    // Initialize tooltips\n+    $('[data-toggle=\"tooltip\"]').tooltip();\n+\n+    //Disable the submit button\n+    $('#create-group-submit-button').prop('disabled', true);\n+\n+    //Enable or disable the submit button depending on the required fields\n+    $('input[type=\"text\"]').keyup(function() {\n+      $(':input[type=\"submit\"]').prop('disabled', $(this).val() === '');\n+    });\n+\n+    $('#groupMembershipFilter').on('change', function() {\n+      const groupParams = {\n+        filterByGroupId: this.value,\n+        groupId: $('#groupId').val()\n+      };\n+      window.location = 'group?'+new URLSearchParams(groupParams);\n+    });\n+\n+    if ($('#groupJoinableSet').val() == '') {\n+      $('#joinableOptionsDiv').hide();\n+    }\n+\n+    $('#groupJoinableSet').on('change', function() {\n+      this.value != '' ? $('#joinableOptionsDiv').show() : $('#joinableOptionsDiv').hide();\n+    });\n+\n+    //Initialize the multiselect component\n+    var searchPlaceHolderText = /*[[#{groups.multiselect.search}]]*/;\n+    $('#groupMembersFrom').multiselect({\n+      sort: false,\n+      startUp: true,\n+      search: {\n+        left: '<input type=\"text\" name=\"q\" class=\"form-control\" placeholder=\"'+searchPlaceHolderText+'\" />',\n+        right: '<input type=\"text\" name=\"q\" class=\"form-control\" placeholder=\"'+searchPlaceHolderText+'\" />',\n+      }\n+    });\n+\n+  });\n+\n+  /*]]>*/\n+</script>\n+\n+<script th:fragment=\"autoGroupsStep1Js\" th:inline=\"javascript\">\n+  /*<![CDATA[*/\n+  $('#selectAllRoles').click(function(e) {\n+    var selectAllChecked = this.checked;\n+    $(':checkbox').each(function() {\n+      this.checked = selectAllChecked;\n+    });\n+  });\n+  /*]]>*/\n+</script>\n+\n+<script th:fragment=\"autoGroupsStep2Js\" th:inline=\"javascript\">\n+  /*<![CDATA[*/\n+  $(\"input[name='sectionsOption']\").change(function(){\n+    this.value === '0' ? $('#selectSectionDiv').fadeOut() : $('#selectSectionDiv').fadeIn();\n+  });\n+\n+  $('#selectAllSections').click(function(e) {\n+    var selectAllChecked = this.checked;\n+    $(':checkbox').each(function() {\n+      this.checked = selectAllChecked;\n+    });\n+  });\n+\n+  $(\"#autogroups-back-button\").on('click', function () {\n+    $('#wizardAction').val('back');\n+    $('#autogroups-wizard-step2-form').submit();\n+  });\n+  /*]]>*/\n+</script>\n+\n+<script th:fragment=\"autoGroupsStep3Js\" th:inline=\"javascript\">\n+  /*<![CDATA[*/\n+  $(\"input[name='structureConfigurationOption']\").change(function(){\n+    this.value === '1' ? $('#mixtureStructureOptions').fadeOut() : $('#mixtureStructureOptions').fadeIn();\n+  });\n+\n+  $(\"input[name='splitOptions']\").change(function(){\n+    var groupSelectedClass = 'optGroupSelectSelected';\n+    if (this.value === '1') {\n+      $('#splitByGroups').removeClass(groupSelectedClass);\n+      $('#splitByUsers').addClass(groupSelectedClass);\n+      $('#splitByGroupsOptions').fadeOut();\n+      $('#splitByUsersOptions').fadeIn();\n+    } else {\n+      $('#splitByUsers').removeClass(groupSelectedClass);\n+      $('#splitByGroups').addClass(groupSelectedClass);\n+      $('#splitByUsersOptions').fadeOut();\n+      $('#splitByGroupsOptions').fadeIn();\n+    }\n+  });\n+\n+  $(\"#autogroups-back-button\").on('click', function () {\n+    $('#wizardAction').val('back');\n+    $('#autogroups-wizard-step3-form').submit();\n+  });\n+  /*]]>*/\n+</script>\n+\n+<script th:fragment=\"autoGroupsStep4Js\" th:inline=\"javascript\">\n+  /*<![CDATA[*/\n+  $(\"#autogroups-back-button-top,#autogroups-back-button\").on('click', function () {\n+    $('#wizardAction').val('back');\n+    $('#autogroups-wizard-step4-form').submit();\n+  });\n+  /*]]>*/\n+</script>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3a627d7e4e920d7b64fd22c5b8f9c061f09bad72"}, "originalPosition": 218}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2342, "cost": 1, "resetAt": "2021-10-28T20:13:43Z"}}}