{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1NDU4Njg1", "number": 8884, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMDo1OTo0MVrOFDIrfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjowNjo1M1rOFFrHAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM4ODMyMjU0OnYy", "diffSide": "RIGHT", "path": "basiclti/basiclti-common/src/java/org/sakaiproject/basiclti/util/SakaiBLTIUtil.java", "isResolved": false, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOVQyMDo1OTo0MVrOICpOBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjozNDozMlrOIGjC2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0MzM5Ng==", "bodyText": "If you have a nice URL object, then just re-create it from the URL \ud83d\udc4d\nnew URI(uri.getScheme(),\nuri.getAuthority(),\nuri.getPath(),\nnull, // Ignore query\nuri.getFragment()).toString();", "url": "https://github.com/sakaiproject/sakai/pull/8884#discussion_r539643396", "createdAt": "2020-12-09T20:59:41Z", "author": {"login": "ottenhoff"}, "path": "basiclti/basiclti-common/src/java/org/sakaiproject/basiclti/util/SakaiBLTIUtil.java", "diffHunk": "@@ -2725,6 +2725,136 @@ public static Long getLongKey(Object key) {\n \t\treturn getLong(key);\n \t}\n \n+\tpublic static URL getUrlOrNull(String urlString) {\n+\t\tif ( urlString == null ) return null;\n+\t\ttry\n+\t\t{\n+\t\t\tURL url = new URL(urlString);\n+\t\t\turl.toURI();\n+\t\t\treturn url;\n+\t\t} catch (Exception exception) {\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n+\tpublic static String stripOffQuery(String urlString)\n+\t{\n+\t\tif ( urlString == null ) return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d80e37d35be38467e437df3fd3b1a87d4421587"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0NDc3MQ==", "bodyText": "I really wanted to find a StringUtils that did this :(", "url": "https://github.com/sakaiproject/sakai/pull/8884#discussion_r539644771", "createdAt": "2020-12-09T21:01:53Z", "author": {"login": "csev"}, "path": "basiclti/basiclti-common/src/java/org/sakaiproject/basiclti/util/SakaiBLTIUtil.java", "diffHunk": "@@ -2725,6 +2725,136 @@ public static Long getLongKey(Object key) {\n \t\treturn getLong(key);\n \t}\n \n+\tpublic static URL getUrlOrNull(String urlString) {\n+\t\tif ( urlString == null ) return null;\n+\t\ttry\n+\t\t{\n+\t\t\tURL url = new URL(urlString);\n+\t\t\turl.toURI();\n+\t\t\treturn url;\n+\t\t} catch (Exception exception) {\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n+\tpublic static String stripOffQuery(String urlString)\n+\t{\n+\t\tif ( urlString == null ) return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0MzM5Ng=="}, "originalCommit": {"oid": "9d80e37d35be38467e437df3fd3b1a87d4421587"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQyNjM4Nw==", "bodyText": "Sam - I just want this to be a string match.  I don't want a bunch of conditional code with ports, etc.", "url": "https://github.com/sakaiproject/sakai/pull/8884#discussion_r540426387", "createdAt": "2020-12-10T19:09:32Z", "author": {"login": "csev"}, "path": "basiclti/basiclti-common/src/java/org/sakaiproject/basiclti/util/SakaiBLTIUtil.java", "diffHunk": "@@ -2725,6 +2725,136 @@ public static Long getLongKey(Object key) {\n \t\treturn getLong(key);\n \t}\n \n+\tpublic static URL getUrlOrNull(String urlString) {\n+\t\tif ( urlString == null ) return null;\n+\t\ttry\n+\t\t{\n+\t\t\tURL url = new URL(urlString);\n+\t\t\turl.toURI();\n+\t\t\treturn url;\n+\t\t} catch (Exception exception) {\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n+\tpublic static String stripOffQuery(String urlString)\n+\t{\n+\t\tif ( urlString == null ) return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0MzM5Ng=="}, "originalCommit": {"oid": "9d80e37d35be38467e437df3fd3b1a87d4421587"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQyOTA4Nw==", "bodyText": "ok ...... I prefer using the nice URL object because URLs are complex.... but string matching is fine if you know what the URL looks like", "url": "https://github.com/sakaiproject/sakai/pull/8884#discussion_r540429087", "createdAt": "2020-12-10T19:14:01Z", "author": {"login": "ottenhoff"}, "path": "basiclti/basiclti-common/src/java/org/sakaiproject/basiclti/util/SakaiBLTIUtil.java", "diffHunk": "@@ -2725,6 +2725,136 @@ public static Long getLongKey(Object key) {\n \t\treturn getLong(key);\n \t}\n \n+\tpublic static URL getUrlOrNull(String urlString) {\n+\t\tif ( urlString == null ) return null;\n+\t\ttry\n+\t\t{\n+\t\t\tURL url = new URL(urlString);\n+\t\t\turl.toURI();\n+\t\t\treturn url;\n+\t\t} catch (Exception exception) {\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n+\tpublic static String stripOffQuery(String urlString)\n+\t{\n+\t\tif ( urlString == null ) return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0MzM5Ng=="}, "originalCommit": {"oid": "9d80e37d35be38467e437df3fd3b1a87d4421587"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDQyOTMxMA==", "bodyText": "for example, is the fragment ever used or important ?", "url": "https://github.com/sakaiproject/sakai/pull/8884#discussion_r540429310", "createdAt": "2020-12-10T19:14:20Z", "author": {"login": "ottenhoff"}, "path": "basiclti/basiclti-common/src/java/org/sakaiproject/basiclti/util/SakaiBLTIUtil.java", "diffHunk": "@@ -2725,6 +2725,136 @@ public static Long getLongKey(Object key) {\n \t\treturn getLong(key);\n \t}\n \n+\tpublic static URL getUrlOrNull(String urlString) {\n+\t\tif ( urlString == null ) return null;\n+\t\ttry\n+\t\t{\n+\t\t\tURL url = new URL(urlString);\n+\t\t\turl.toURI();\n+\t\t\treturn url;\n+\t\t} catch (Exception exception) {\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n+\tpublic static String stripOffQuery(String urlString)\n+\t{\n+\t\tif ( urlString == null ) return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0MzM5Ng=="}, "originalCommit": {"oid": "9d80e37d35be38467e437df3fd3b1a87d4421587"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ4Nzg2Mg==", "bodyText": "It looks like org.apache.http.client.utils.URIBuilder does this?\n    URIBuilder uriBuilder = new URIBuilder(url);\n    uriBuilder.removeQuery();\n\n    return uriBuilder.build().toString();\n\nhttps://stackoverflow.com/a/54032843/3708872\nThere's some other ideas near the top for just using URI like the top answer which seems like what @ottenhoff suggests https://stackoverflow.com/a/27267375/3708872", "url": "https://github.com/sakaiproject/sakai/pull/8884#discussion_r543487862", "createdAt": "2020-12-15T16:20:45Z", "author": {"login": "jonespm"}, "path": "basiclti/basiclti-common/src/java/org/sakaiproject/basiclti/util/SakaiBLTIUtil.java", "diffHunk": "@@ -2725,6 +2725,136 @@ public static Long getLongKey(Object key) {\n \t\treturn getLong(key);\n \t}\n \n+\tpublic static URL getUrlOrNull(String urlString) {\n+\t\tif ( urlString == null ) return null;\n+\t\ttry\n+\t\t{\n+\t\t\tURL url = new URL(urlString);\n+\t\t\turl.toURI();\n+\t\t\treturn url;\n+\t\t} catch (Exception exception) {\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n+\tpublic static String stripOffQuery(String urlString)\n+\t{\n+\t\tif ( urlString == null ) return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0MzM5Ng=="}, "originalCommit": {"oid": "9d80e37d35be38467e437df3fd3b1a87d4421587"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ5MjAzNw==", "bodyText": "yeah but i'm understanding chuck's concern from the phone call: the URL can't change at all because it's part of the hash..... so putting the URL through any type of processing doesn't make sense.", "url": "https://github.com/sakaiproject/sakai/pull/8884#discussion_r543492037", "createdAt": "2020-12-15T16:25:44Z", "author": {"login": "ottenhoff"}, "path": "basiclti/basiclti-common/src/java/org/sakaiproject/basiclti/util/SakaiBLTIUtil.java", "diffHunk": "@@ -2725,6 +2725,136 @@ public static Long getLongKey(Object key) {\n \t\treturn getLong(key);\n \t}\n \n+\tpublic static URL getUrlOrNull(String urlString) {\n+\t\tif ( urlString == null ) return null;\n+\t\ttry\n+\t\t{\n+\t\t\tURL url = new URL(urlString);\n+\t\t\turl.toURI();\n+\t\t\treturn url;\n+\t\t} catch (Exception exception) {\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n+\tpublic static String stripOffQuery(String urlString)\n+\t{\n+\t\tif ( urlString == null ) return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0MzM5Ng=="}, "originalCommit": {"oid": "9d80e37d35be38467e437df3fd3b1a87d4421587"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzczNjUzOQ==", "bodyText": "I took Matt's suggestion, wrapped in a really cranky unit test - and the URIBuilder code passed with flying colors.   It handles al the things I expected it to handle and then some.  I think it tweaked less than a URL processor because URIs are more strings than URLs - but they do know how to pitch a query string.  So that turned out nicely.", "url": "https://github.com/sakaiproject/sakai/pull/8884#discussion_r543736539", "createdAt": "2020-12-15T22:34:32Z", "author": {"login": "csev"}, "path": "basiclti/basiclti-common/src/java/org/sakaiproject/basiclti/util/SakaiBLTIUtil.java", "diffHunk": "@@ -2725,6 +2725,136 @@ public static Long getLongKey(Object key) {\n \t\treturn getLong(key);\n \t}\n \n+\tpublic static URL getUrlOrNull(String urlString) {\n+\t\tif ( urlString == null ) return null;\n+\t\ttry\n+\t\t{\n+\t\t\tURL url = new URL(urlString);\n+\t\t\turl.toURI();\n+\t\t\treturn url;\n+\t\t} catch (Exception exception) {\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n+\tpublic static String stripOffQuery(String urlString)\n+\t{\n+\t\tif ( urlString == null ) return null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTY0MzM5Ng=="}, "originalCommit": {"oid": "9d80e37d35be38467e437df3fd3b1a87d4421587"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDkzNTA2OnYy", "diffSide": "RIGHT", "path": "basiclti/basiclti-common/src/java/org/sakaiproject/basiclti/util/SakaiBLTIUtil.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNjowNjo1M1rOIGTMNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQyMjozNjowNlrOIGjF7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ3Njc5MA==", "bodyText": "use log.debug much better than System.out", "url": "https://github.com/sakaiproject/sakai/pull/8884#discussion_r543476790", "createdAt": "2020-12-15T16:06:53Z", "author": {"login": "ern"}, "path": "basiclti/basiclti-common/src/java/org/sakaiproject/basiclti/util/SakaiBLTIUtil.java", "diffHunk": "@@ -2725,6 +2725,120 @@ public static Long getLongKey(Object key) {\n \t\treturn getLong(key);\n \t}\n \n+\tpublic static URL getUrlOrNull(String urlString) {\n+\t\tif ( urlString == null ) return null;\n+\t\ttry\n+\t\t{\n+\t\t\tURL url = new URL(urlString);\n+\t\t\turl.toURI();\n+\t\t\treturn url;\n+\t\t} catch (Exception exception) {\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n+\tpublic static String stripOffQuery(String urlString)\n+\t{\n+\t\tif ( urlString == null ) return null;\n+\t\t// Next we snip off the query string\n+\t\tString retval = urlString;\n+\t\tint pos = retval.indexOf('?');\n+\t\tif ( pos > 1 ) {\n+\t\t\tretval = retval.substring(0,pos);\n+\t\t}\n+\t\treturn retval;\n+\t}\n+\n+\tpublic static Map<String, Object> findBestToolMatch(boolean global, String launchUrl, List<Map<String,Object>> tools)\n+\t{\n+\t\tboolean local = ! global;  // Makes it easier to read :)\n+\n+\t\t// First we look for a tool with an exact match\n+\t\tfor ( Map<String,Object> tool : tools ) {\n+\t\t\tString toolLaunch = (String) tool.get(LTIService.LTI_LAUNCH);\n+\t\t\tString toolSite = (String) tool.get(LTIService.LTI_SITE_ID);\n+\n+\t\t\tif ( local && StringUtils.stripToNull(toolSite) == null ) continue;\n+\t\t\tif ( global && StringUtils.stripToNull(toolSite) != null ) continue;\n+\n+\t\t\tif ( launchUrl != null && launchUrl.equals(toolLaunch) ) {\n+\t\t\t\tlog.debug(\"Matched exact tool {}={}\", launchUrl, toolLaunch);\n+\t\t\t\t// System.out.println(\"Matched exact tool\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b0701b75a829648b9ae9452497ba3928f103a54"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ5MzY2NA==", "bodyText": "OK", "url": "https://github.com/sakaiproject/sakai/pull/8884#discussion_r543493664", "createdAt": "2020-12-15T16:27:47Z", "author": {"login": "csev"}, "path": "basiclti/basiclti-common/src/java/org/sakaiproject/basiclti/util/SakaiBLTIUtil.java", "diffHunk": "@@ -2725,6 +2725,120 @@ public static Long getLongKey(Object key) {\n \t\treturn getLong(key);\n \t}\n \n+\tpublic static URL getUrlOrNull(String urlString) {\n+\t\tif ( urlString == null ) return null;\n+\t\ttry\n+\t\t{\n+\t\t\tURL url = new URL(urlString);\n+\t\t\turl.toURI();\n+\t\t\treturn url;\n+\t\t} catch (Exception exception) {\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n+\tpublic static String stripOffQuery(String urlString)\n+\t{\n+\t\tif ( urlString == null ) return null;\n+\t\t// Next we snip off the query string\n+\t\tString retval = urlString;\n+\t\tint pos = retval.indexOf('?');\n+\t\tif ( pos > 1 ) {\n+\t\t\tretval = retval.substring(0,pos);\n+\t\t}\n+\t\treturn retval;\n+\t}\n+\n+\tpublic static Map<String, Object> findBestToolMatch(boolean global, String launchUrl, List<Map<String,Object>> tools)\n+\t{\n+\t\tboolean local = ! global;  // Makes it easier to read :)\n+\n+\t\t// First we look for a tool with an exact match\n+\t\tfor ( Map<String,Object> tool : tools ) {\n+\t\t\tString toolLaunch = (String) tool.get(LTIService.LTI_LAUNCH);\n+\t\t\tString toolSite = (String) tool.get(LTIService.LTI_SITE_ID);\n+\n+\t\t\tif ( local && StringUtils.stripToNull(toolSite) == null ) continue;\n+\t\t\tif ( global && StringUtils.stripToNull(toolSite) != null ) continue;\n+\n+\t\t\tif ( launchUrl != null && launchUrl.equals(toolLaunch) ) {\n+\t\t\t\tlog.debug(\"Matched exact tool {}={}\", launchUrl, toolLaunch);\n+\t\t\t\t// System.out.println(\"Matched exact tool\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ3Njc5MA=="}, "originalCommit": {"oid": "3b0701b75a829648b9ae9452497ba3928f103a54"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzczNzMyNA==", "bodyText": "There were just a few - they are gone now - thanks.", "url": "https://github.com/sakaiproject/sakai/pull/8884#discussion_r543737324", "createdAt": "2020-12-15T22:36:06Z", "author": {"login": "csev"}, "path": "basiclti/basiclti-common/src/java/org/sakaiproject/basiclti/util/SakaiBLTIUtil.java", "diffHunk": "@@ -2725,6 +2725,120 @@ public static Long getLongKey(Object key) {\n \t\treturn getLong(key);\n \t}\n \n+\tpublic static URL getUrlOrNull(String urlString) {\n+\t\tif ( urlString == null ) return null;\n+\t\ttry\n+\t\t{\n+\t\t\tURL url = new URL(urlString);\n+\t\t\turl.toURI();\n+\t\t\treturn url;\n+\t\t} catch (Exception exception) {\n+\t\t\treturn null;\n+\t\t}\n+\t}\n+\n+\tpublic static String stripOffQuery(String urlString)\n+\t{\n+\t\tif ( urlString == null ) return null;\n+\t\t// Next we snip off the query string\n+\t\tString retval = urlString;\n+\t\tint pos = retval.indexOf('?');\n+\t\tif ( pos > 1 ) {\n+\t\t\tretval = retval.substring(0,pos);\n+\t\t}\n+\t\treturn retval;\n+\t}\n+\n+\tpublic static Map<String, Object> findBestToolMatch(boolean global, String launchUrl, List<Map<String,Object>> tools)\n+\t{\n+\t\tboolean local = ! global;  // Makes it easier to read :)\n+\n+\t\t// First we look for a tool with an exact match\n+\t\tfor ( Map<String,Object> tool : tools ) {\n+\t\t\tString toolLaunch = (String) tool.get(LTIService.LTI_LAUNCH);\n+\t\t\tString toolSite = (String) tool.get(LTIService.LTI_SITE_ID);\n+\n+\t\t\tif ( local && StringUtils.stripToNull(toolSite) == null ) continue;\n+\t\t\tif ( global && StringUtils.stripToNull(toolSite) != null ) continue;\n+\n+\t\t\tif ( launchUrl != null && launchUrl.equals(toolLaunch) ) {\n+\t\t\t\tlog.debug(\"Matched exact tool {}={}\", launchUrl, toolLaunch);\n+\t\t\t\t// System.out.println(\"Matched exact tool\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzQ3Njc5MA=="}, "originalCommit": {"oid": "3b0701b75a829648b9ae9452497ba3928f103a54"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2154, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}