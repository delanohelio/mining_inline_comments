{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgwOTg0MjE5", "number": 7953, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNzo1MDowNFrODjuRtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNzo1MDowNFrODjuRtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM4Nzg0OTUwOnYy", "diffSide": "RIGHT", "path": "gradebookng/tool/src/java/org/sakaiproject/gradebookng/rest/GradebookNgEntityProvider.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNzo1MDowNFrOFvsH2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yOFQwNzo1MDowNFrOFvsH2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NTU1MDI5Ng==", "bodyText": "Indentation (this and following lines)", "url": "https://github.com/sakaiproject/sakai/pull/7953#discussion_r385550296", "createdAt": "2020-02-28T07:50:04Z", "author": {"login": "bgarciaentornos"}, "path": "gradebookng/tool/src/java/org/sakaiproject/gradebookng/rest/GradebookNgEntityProvider.java", "diffHunk": "@@ -238,46 +242,29 @@ public String getComments(final EntityView view, final Map<String, Object> param\n \t\tfinal String siteId = (String) params.get(\"siteId\");\n \t\tfinal long assignmentId = NumberUtils.toLong((String) params.get(\"assignmentId\"));\n \t\tfinal String action = (String) params.get(\"action\");\n-\t\tfinal String groupId = (String) params.get(\"groupId\");\n+\t\tfinal String groupRef = (String) params.get(\"groupRef\");\n \t\tfinal String minScoreString  = (String) params.get(\"minScore\");\n \t\tfinal String maxScoreString = (String) params.get(\"maxScore\");\n \n-\t\tfinal String subject = (String) params.get(\"subject\");\n-\t\tfinal String body = (String) params.get(\"body\");\n-\n \t\t// check params supplied are valid\n-\t\tif (StringUtils.isBlank(siteId) || assignmentId == 0 || StringUtils.isBlank(subject) || StringUtils.isBlank(body)) {\n-\t\t\tthrow new IllegalArgumentException(\"You must supply siteId, assignmentId, subject and body\");\n+\t\tif (StringUtils.isBlank(siteId) || assignmentId == 0 || StringUtils.isEmpty(groupRef)) {\n+\t\t\tthrow new IllegalArgumentException(\"You must supply siteId, groupRef and assignmentId\");\n \t\t}\n \n \t\tcheckInstructorOrTA(siteId);\n \n \t\tfinal Double minScore = (!StringUtils.isEmpty(minScoreString)) ? Double.valueOf(minScoreString) : null;\n \t\tfinal Double maxScore = (!StringUtils.isEmpty(maxScoreString)) ? Double.valueOf(maxScoreString) : null;\n \n-\t\tSite site = null;\n-\t\ttry {\n-\t\t\tsite = siteService.getSite(siteId);\n-\t\t} catch(IdUnusedException idue) {\n-\t\t\tthrow new IllegalArgumentException(\"siteId \" + siteId + \" is invalid\");\n-\t\t}\n-\n-\t\tSet<String> recipients = null;\n-\t\tif (StringUtils.isEmpty(groupId)) {\n-\t\t\t// Start with the site users\n-\t\t\trecipients = site.getUsers();\n-\t\t\t// Remove the instructors\n-\t\t\trecipients.removeAll(site.getUsersIsAllowed(Authz.PERMISSION_GRADE_ALL));\n-\t\t} else {\n-\t\t\tGroup group = site.getGroup(groupId);\n-\t\t\tif (group == null) {\n-\t\t\t\tthrow new IllegalArgumentException(\"Invalid groupId supplied.\");\n-\t\t\t}\n-\t\t\t// Start with the group users\n-\t\t\trecipients = group.getUsers();\n+        Set<String> recipients = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28e5bf576968a6d945e0f8550fecb12561ea9478"}, "originalPosition": 80}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2377, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}