{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2NzMzMjEz", "number": 8790, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzo1Nzo1OFrOE2LxYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjoxMjo0NVrOE8z8CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjUxNDI0OnYy", "diffSide": "RIGHT", "path": "msgcntr/messageforums-api/src/java/org/sakaiproject/api/app/messageforums/DraftRecipient.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxNzo1Nzo1OFrOHu3-qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wOVQxNDoyMjoyOFrOHvxGWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkxMzcwNQ==", "bodyText": "minor comment public is redundant on an interface", "url": "https://github.com/sakaiproject/sakai/pull/8790#discussion_r518913705", "createdAt": "2020-11-06T17:57:58Z", "author": {"login": "ern"}, "path": "msgcntr/messageforums-api/src/java/org/sakaiproject/api/app/messageforums/DraftRecipient.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.sakaiproject.api.app.messageforums;\n+\n+/**\n+ * This class represents a saved recipient for a draft message. It can represent a user, a group, a site role, a combination of those, or all participants.\n+ * It can be thought of as a more compact version of MembershipItem.\n+ *\n+ * @author plukasew\n+ */\n+public interface DraftRecipient\n+{\n+\tpublic static final String ALL_PARTICIPANTS_ID = \"all_participants\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1110a9bc7ccfa1f3718c0a0598d8fe56610c5eb"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkxNjY0Mw==", "bodyText": "Personally, I prefer to see it stated explicitly, but this is opinionated.", "url": "https://github.com/sakaiproject/sakai/pull/8790#discussion_r518916643", "createdAt": "2020-11-06T18:03:30Z", "author": {"login": "bjones86"}, "path": "msgcntr/messageforums-api/src/java/org/sakaiproject/api/app/messageforums/DraftRecipient.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.sakaiproject.api.app.messageforums;\n+\n+/**\n+ * This class represents a saved recipient for a draft message. It can represent a user, a group, a site role, a combination of those, or all participants.\n+ * It can be thought of as a more compact version of MembershipItem.\n+ *\n+ * @author plukasew\n+ */\n+public interface DraftRecipient\n+{\n+\tpublic static final String ALL_PARTICIPANTS_ID = \"all_participants\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkxMzcwNQ=="}, "originalCommit": {"oid": "f1110a9bc7ccfa1f3718c0a0598d8fe56610c5eb"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkyMjQxMw==", "bodyText": "It's redundant!", "url": "https://github.com/sakaiproject/sakai/pull/8790#discussion_r518922413", "createdAt": "2020-11-06T18:14:50Z", "author": {"login": "ern"}, "path": "msgcntr/messageforums-api/src/java/org/sakaiproject/api/app/messageforums/DraftRecipient.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.sakaiproject.api.app.messageforums;\n+\n+/**\n+ * This class represents a saved recipient for a draft message. It can represent a user, a group, a site role, a combination of those, or all participants.\n+ * It can be thought of as a more compact version of MembershipItem.\n+ *\n+ * @author plukasew\n+ */\n+public interface DraftRecipient\n+{\n+\tpublic static final String ALL_PARTICIPANTS_ID = \"all_participants\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkxMzcwNQ=="}, "originalCommit": {"oid": "f1110a9bc7ccfa1f3718c0a0598d8fe56610c5eb"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk0NzU0Ng==", "bodyText": "It's actually not redundant. From the official Java tutorial: \"The public access specifier indicates that the interface can be used by any class in any package. If you do not specify that the interface is public, then your interface is accessible only to classes defined in the same package as the interface.\"", "url": "https://github.com/sakaiproject/sakai/pull/8790#discussion_r518947546", "createdAt": "2020-11-06T19:04:05Z", "author": {"login": "plukasew"}, "path": "msgcntr/messageforums-api/src/java/org/sakaiproject/api/app/messageforums/DraftRecipient.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.sakaiproject.api.app.messageforums;\n+\n+/**\n+ * This class represents a saved recipient for a draft message. It can represent a user, a group, a site role, a combination of those, or all participants.\n+ * It can be thought of as a more compact version of MembershipItem.\n+ *\n+ * @author plukasew\n+ */\n+public interface DraftRecipient\n+{\n+\tpublic static final String ALL_PARTICIPANTS_ID = \"all_participants\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkxMzcwNQ=="}, "originalCommit": {"oid": "f1110a9bc7ccfa1f3718c0a0598d8fe56610c5eb"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTgzOTM5NQ==", "bodyText": "The JLS has it as a practice that is both redundant and discouraged, see:\nhttps://docs.oracle.com/javase/specs/jls/se8/html/jls-9.html#jls-9.4\nEvery method declaration in the body of an interface is implicitly public (\u00a76.6). It is permitted, but discouraged as a matter of style, to redundantly specify the public modifier for a method declaration in an interface.", "url": "https://github.com/sakaiproject/sakai/pull/8790#discussion_r519839395", "createdAt": "2020-11-09T14:07:51Z", "author": {"login": "ern"}, "path": "msgcntr/messageforums-api/src/java/org/sakaiproject/api/app/messageforums/DraftRecipient.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.sakaiproject.api.app.messageforums;\n+\n+/**\n+ * This class represents a saved recipient for a draft message. It can represent a user, a group, a site role, a combination of those, or all participants.\n+ * It can be thought of as a more compact version of MembershipItem.\n+ *\n+ * @author plukasew\n+ */\n+public interface DraftRecipient\n+{\n+\tpublic static final String ALL_PARTICIPANTS_ID = \"all_participants\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkxMzcwNQ=="}, "originalCommit": {"oid": "f1110a9bc7ccfa1f3718c0a0598d8fe56610c5eb"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg0MTcwNQ==", "bodyText": "I see, you're talking about methods and I was talking about the interface itself. I'll keep that in mind. Originally this file was a class, and will become a class again after I revise this PR.", "url": "https://github.com/sakaiproject/sakai/pull/8790#discussion_r519841705", "createdAt": "2020-11-09T14:11:24Z", "author": {"login": "plukasew"}, "path": "msgcntr/messageforums-api/src/java/org/sakaiproject/api/app/messageforums/DraftRecipient.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.sakaiproject.api.app.messageforums;\n+\n+/**\n+ * This class represents a saved recipient for a draft message. It can represent a user, a group, a site role, a combination of those, or all participants.\n+ * It can be thought of as a more compact version of MembershipItem.\n+ *\n+ * @author plukasew\n+ */\n+public interface DraftRecipient\n+{\n+\tpublic static final String ALL_PARTICIPANTS_ID = \"all_participants\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkxMzcwNQ=="}, "originalCommit": {"oid": "f1110a9bc7ccfa1f3718c0a0598d8fe56610c5eb"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxOTg0OTU2Mg==", "bodyText": "\ud83d\udc4d  Thanks Paul", "url": "https://github.com/sakaiproject/sakai/pull/8790#discussion_r519849562", "createdAt": "2020-11-09T14:22:28Z", "author": {"login": "ern"}, "path": "msgcntr/messageforums-api/src/java/org/sakaiproject/api/app/messageforums/DraftRecipient.java", "diffHunk": "@@ -0,0 +1,32 @@\n+package org.sakaiproject.api.app.messageforums;\n+\n+/**\n+ * This class represents a saved recipient for a draft message. It can represent a user, a group, a site role, a combination of those, or all participants.\n+ * It can be thought of as a more compact version of MembershipItem.\n+ *\n+ * @author plukasew\n+ */\n+public interface DraftRecipient\n+{\n+\tpublic static final String ALL_PARTICIPANTS_ID = \"all_participants\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkxMzcwNQ=="}, "originalCommit": {"oid": "f1110a9bc7ccfa1f3718c0a0598d8fe56610c5eb"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjUzNTM5OnYy", "diffSide": "RIGHT", "path": "msgcntr/messageforums-component-impl/src/java/org/sakaiproject/component/app/messageforums/MessageForumsMessageManagerImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxODowNDoyNVrOHu4L1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxODowNDoyNVrOHu4L1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkxNzA3OA==", "bodyText": "minor this can be further shortened removing intermediate vars:\nreturn getHibernateTemplate().execute(session -> session.getNamedQuery(\"findDraftRecipientsByMessageId\")\n           .setParameter()\n          .list();", "url": "https://github.com/sakaiproject/sakai/pull/8790#discussion_r518917078", "createdAt": "2020-11-06T18:04:25Z", "author": {"login": "ern"}, "path": "msgcntr/messageforums-component-impl/src/java/org/sakaiproject/component/app/messageforums/MessageForumsMessageManagerImpl.java", "diffHunk": "@@ -2091,4 +2092,28 @@ public List findMovedHistoryByMessageId(final Long messageid){\n \n \t}\n \n+\t@Override\n+\tpublic void saveDraftRecipients(long msgId, List<DraftRecipient> recipients) {\n+\t\tfor (DraftRecipient dr : recipients) {\n+\t\t\tgetHibernateTemplate().persist(dr);\n+\t\t}\n+\t}\n+\n+\t@Override\n+\tpublic List<DraftRecipient> findDraftRecipientsByMessageId(long msgId) {\n+\t\tHibernateCallback<List> hcb = session -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1110a9bc7ccfa1f3718c0a0598d8fe56610c5eb"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjU1MzM1OnYy", "diffSide": "RIGHT", "path": "msgcntr/messageforums-hbm/src/java/org/sakaiproject/component/app/messageforums/dao/hibernate/DraftRecipient.hbm.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxODowOTo1OFrOHu4W-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOTowNjozM1rOHu6Hvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkxOTkzMA==", "bodyText": "Instead of an HBM please use JPA annotations plenty of examples, shouldn't take much to update.\nThe addition of new hbm files is prohibited, as they're all be converted to JPA.", "url": "https://github.com/sakaiproject/sakai/pull/8790#discussion_r518919930", "createdAt": "2020-11-06T18:09:58Z", "author": {"login": "ern"}, "path": "msgcntr/messageforums-hbm/src/java/org/sakaiproject/component/app/messageforums/dao/hibernate/DraftRecipient.hbm.xml", "diffHunk": "@@ -0,0 +1,39 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE hibernate-mapping PUBLIC \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\" \"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\">\n+<hibernate-mapping package=\"org.sakaiproject.component.app.messageforums.dao.hibernate\">\n+\n+  <class name=\"org.sakaiproject.component.app.messageforums.dao.hibernate.DraftRecipientImpl\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1110a9bc7ccfa1f3718c0a0598d8fe56610c5eb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk0ODc5OA==", "bodyText": "I have never used JPA but I'll give it a shot.", "url": "https://github.com/sakaiproject/sakai/pull/8790#discussion_r518948798", "createdAt": "2020-11-06T19:06:33Z", "author": {"login": "plukasew"}, "path": "msgcntr/messageforums-hbm/src/java/org/sakaiproject/component/app/messageforums/dao/hibernate/DraftRecipient.hbm.xml", "diffHunk": "@@ -0,0 +1,39 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!DOCTYPE hibernate-mapping PUBLIC \"-//Hibernate/Hibernate Mapping DTD 3.0//EN\" \"http://www.hibernate.org/dtd/hibernate-mapping-3.0.dtd\">\n+<hibernate-mapping package=\"org.sakaiproject.component.app.messageforums.dao.hibernate\">\n+\n+  <class name=\"org.sakaiproject.component.app.messageforums.dao.hibernate.DraftRecipientImpl\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkxOTkzMA=="}, "originalCommit": {"oid": "f1110a9bc7ccfa1f3718c0a0598d8fe56610c5eb"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI1MjU2Njc3OnYy", "diffSide": "RIGHT", "path": "msgcntr/messageforums-hbm/src/java/org/sakaiproject/component/app/messageforums/dao/hibernate/DraftRecipientImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxODoxNDoxM1rOHu4fUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQxOTowNjoyMVrOHu6HeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkyMjA2Nw==", "bodyText": "POJO's have little need for an interface and an impl move this to the interface and make it class", "url": "https://github.com/sakaiproject/sakai/pull/8790#discussion_r518922067", "createdAt": "2020-11-06T18:14:13Z", "author": {"login": "ern"}, "path": "msgcntr/messageforums-hbm/src/java/org/sakaiproject/component/app/messageforums/dao/hibernate/DraftRecipientImpl.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.sakaiproject.component.app.messageforums.dao.hibernate;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.sakaiproject.api.app.messageforums.DraftRecipient;\n+import org.sakaiproject.api.app.messageforums.MembershipItem;\n+\n+@Getter @Setter\n+public class DraftRecipientImpl implements DraftRecipient", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1110a9bc7ccfa1f3718c0a0598d8fe56610c5eb"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODk0ODcyOQ==", "bodyText": "I was just following the pattern used in the rest of the tool, but I agree so I'll change it.", "url": "https://github.com/sakaiproject/sakai/pull/8790#discussion_r518948729", "createdAt": "2020-11-06T19:06:21Z", "author": {"login": "plukasew"}, "path": "msgcntr/messageforums-hbm/src/java/org/sakaiproject/component/app/messageforums/dao/hibernate/DraftRecipientImpl.java", "diffHunk": "@@ -0,0 +1,73 @@\n+package org.sakaiproject.component.app.messageforums.dao.hibernate;\n+\n+import lombok.Getter;\n+import lombok.Setter;\n+import org.sakaiproject.api.app.messageforums.DraftRecipient;\n+import org.sakaiproject.api.app.messageforums.MembershipItem;\n+\n+@Getter @Setter\n+public class DraftRecipientImpl implements DraftRecipient", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODkyMjA2Nw=="}, "originalCommit": {"oid": "f1110a9bc7ccfa1f3718c0a0598d8fe56610c5eb"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyMjAwOTY4OnYy", "diffSide": "RIGHT", "path": "msgcntr/messageforums-component-impl/src/java/org/sakaiproject/component/app/messageforums/MessageForumsMessageManagerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjoxMjo0NVrOH5KJtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxNjoyMTowNlrOH5KoyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY5NzIwNw==", "bodyText": "Is this always adding a new transient DraftRecipient? if not will need to use merge", "url": "https://github.com/sakaiproject/sakai/pull/8790#discussion_r529697207", "createdAt": "2020-11-24T16:12:45Z", "author": {"login": "ern"}, "path": "msgcntr/messageforums-component-impl/src/java/org/sakaiproject/component/app/messageforums/MessageForumsMessageManagerImpl.java", "diffHunk": "@@ -2091,4 +2092,23 @@ public List findMovedHistoryByMessageId(final Long messageid){\n \n \t}\n \n+\t@Override\n+\tpublic void saveDraftRecipients(long msgId, List<DraftRecipient> recipients) {\n+\t\tfor (DraftRecipient dr : recipients) {\n+\t\t\tgetHibernateTemplate().persist(dr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1ed103b4b6cbf16eb2a0879f858722483411fd56"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTcwNTE2MQ==", "bodyText": "Confirmed with Paul: when the draft is saved or the message is sent, the old rows are deleted and the new rows are added, so persist() is appropriate here. Thanks, @ern!", "url": "https://github.com/sakaiproject/sakai/pull/8790#discussion_r529705161", "createdAt": "2020-11-24T16:21:06Z", "author": {"login": "bjones86"}, "path": "msgcntr/messageforums-component-impl/src/java/org/sakaiproject/component/app/messageforums/MessageForumsMessageManagerImpl.java", "diffHunk": "@@ -2091,4 +2092,23 @@ public List findMovedHistoryByMessageId(final Long messageid){\n \n \t}\n \n+\t@Override\n+\tpublic void saveDraftRecipients(long msgId, List<DraftRecipient> recipients) {\n+\t\tfor (DraftRecipient dr : recipients) {\n+\t\t\tgetHibernateTemplate().persist(dr);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTY5NzIwNw=="}, "originalCommit": {"oid": "1ed103b4b6cbf16eb2a0879f858722483411fd56"}, "originalPosition": 15}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2518, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}