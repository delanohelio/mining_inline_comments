{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyNzY2MjU0", "number": 8539, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMzozMDowN1rOEhrGyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMzozMDowN1rOEhrGyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzQ0NzEzOnYy", "diffSide": "RIGHT", "path": "assignment/impl/src/java/org/sakaiproject/assignment/impl/GradeSheetExporter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMzozMDowN1rOHPHaGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQxMToyNDo0NVrOHV1diw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYxMjA1OA==", "bodyText": "Can produce an NPE either use a lambda to filter nulls or the NullSafeComparator i.e.\nreturn new NullSafeComparator<>(collator, false).compare(s1.getSortName(), s2.getSortName()", "url": "https://github.com/sakaiproject/sakai/pull/8539#discussion_r485612058", "createdAt": "2020-09-09T13:30:07Z", "author": {"login": "ern"}, "path": "assignment/impl/src/java/org/sakaiproject/assignment/impl/GradeSheetExporter.java", "diffHunk": "@@ -70,7 +74,28 @@\n     @Setter private FormattedText formattedText;\n \n     private ResourceLoader rb = new ResourceLoader(\"assignment\");\n+    \n+    /**\n+    * A comparator that sorts by student sortName\n+    */\n+    static final Comparator<Submitter> SUBMITTER_NAME_COMPARATOR = new Comparator<Submitter>() {\n+        Collator collator;\n+        {\n+            this.collator = Collator.getInstance();\n+            try {\n+                this.collator = new RuleBasedCollator(\n+                        ((RuleBasedCollator) this.collator).getRules().replaceAll(\"<'\\u005f'\", \"<' '<'\\u005f'\"));\n+            } catch (final ParseException e) {\n+                log.warn(this + \" Cannot init RuleBasedCollator. Will use the default Collator instead.\", e);\n+            }\n+        }\n \n+        @Override\n+        public int compare(final Submitter s1, final Submitter s2) {\n+            return this.collator.compare(s1.sortName, s2.sortName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57b94e64dfb04d4ccf3f046574ce3ea16ba51ad4"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjY1ODA1OQ==", "bodyText": "Done!", "url": "https://github.com/sakaiproject/sakai/pull/8539#discussion_r492658059", "createdAt": "2020-09-22T11:24:45Z", "author": {"login": "joaquinmarques"}, "path": "assignment/impl/src/java/org/sakaiproject/assignment/impl/GradeSheetExporter.java", "diffHunk": "@@ -70,7 +74,28 @@\n     @Setter private FormattedText formattedText;\n \n     private ResourceLoader rb = new ResourceLoader(\"assignment\");\n+    \n+    /**\n+    * A comparator that sorts by student sortName\n+    */\n+    static final Comparator<Submitter> SUBMITTER_NAME_COMPARATOR = new Comparator<Submitter>() {\n+        Collator collator;\n+        {\n+            this.collator = Collator.getInstance();\n+            try {\n+                this.collator = new RuleBasedCollator(\n+                        ((RuleBasedCollator) this.collator).getRules().replaceAll(\"<'\\u005f'\", \"<' '<'\\u005f'\"));\n+            } catch (final ParseException e) {\n+                log.warn(this + \" Cannot init RuleBasedCollator. Will use the default Collator instead.\", e);\n+            }\n+        }\n \n+        @Override\n+        public int compare(final Submitter s1, final Submitter s2) {\n+            return this.collator.compare(s1.sortName, s2.sortName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYxMjA1OA=="}, "originalCommit": {"oid": "57b94e64dfb04d4ccf3f046574ce3ea16ba51ad4"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2759, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}