{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwODMwNjEz", "number": 7749, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMToyMTo1OFrODW0a5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMTozMDo1MVrODW0kvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MjU0MTE4OnYy", "diffSide": "RIGHT", "path": "rubrics/impl/src/main/java/org/sakaiproject/rubrics/logic/RubricsServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMToyMTo1OFrOFbyt4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMToyMTo1OFrOFbyt4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY4NjgxNg==", "bodyText": "Indentation", "url": "https://github.com/sakaiproject/sakai/pull/7749#discussion_r364686816", "createdAt": "2020-01-09T11:21:58Z", "author": {"login": "adrianfish"}, "path": "rubrics/impl/src/main/java/org/sakaiproject/rubrics/logic/RubricsServiceImpl.java", "diffHunk": "@@ -813,6 +813,87 @@ public void deleteRubricAssociationsByItemIdPrefix(String itemId, String toolId)\n         }\n     }\n \n+\tpublic void softDeleteRubricAssociationsByItemIdPrefix(String itemId, String toolId) {\n+\t\ttry{\n+\t\t\tTypeReferences.ResourcesType<Resource<ToolItemRubricAssociation>> resourceParameterizedTypeReference =\n+\t\t\t\t\tnew TypeReferences.ResourcesType<Resource<ToolItemRubricAssociation>>() {};\n+\n+\t\t\tURI apiBaseUrl = new URI(serverConfigurationService.getServerUrl() + RBCS_SERVICE_URL_PREFIX);\n+\t\t\tTraverson traverson = new Traverson(apiBaseUrl, MediaTypes.HAL_JSON);\n+\n+\t\t\tTraverson.TraversalBuilder builder = traverson.follow(\"rubric-associations\", \"search\", \"by-item-id-prefix\");\n+\n+\t\t\tHttpHeaders headers = new HttpHeaders();\n+\t\t\theaders.add(\"Authorization\", String.format(\"Bearer %s\", generateJsonWebToken(toolId)));\n+\t\t\tbuilder.withHeaders(headers);\n+\n+\t\t\tMap<String, Object> parameters = new HashMap<>();\n+\t\t\tparameters.put(\"toolId\", toolId);\n+\t\t\tparameters.put(\"itemId\", itemId);\n+\n+\t\t\tResources<Resource<ToolItemRubricAssociation>> associationResources = builder.withTemplateParameters(parameters).toObject(resourceParameterizedTypeReference);\n+\n+\t\t\tfor (Resource<ToolItemRubricAssociation> associationResource : associationResources) {\n+                String associationHref = associationResource.getLink(Link.REL_SELF).getHref();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8930cdef495467ba1974110df1ed731e94d4506"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MjU0NjYzOnYy", "diffSide": "RIGHT", "path": "rubrics/impl/src/main/java/org/sakaiproject/rubrics/logic/RubricsServiceImpl.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMToyNDoyMlrOFbyxLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMToyNDoyMlrOFbyxLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY4NzY2Mg==", "bodyText": "If this is a soft delete, should we be deleting the evaluations? If we then recover the associated item, won't we want to get the evaluations back, too?", "url": "https://github.com/sakaiproject/sakai/pull/7749#discussion_r364687662", "createdAt": "2020-01-09T11:24:22Z", "author": {"login": "adrianfish"}, "path": "rubrics/impl/src/main/java/org/sakaiproject/rubrics/logic/RubricsServiceImpl.java", "diffHunk": "@@ -813,6 +813,87 @@ public void deleteRubricAssociationsByItemIdPrefix(String itemId, String toolId)\n         }\n     }\n \n+\tpublic void softDeleteRubricAssociationsByItemIdPrefix(String itemId, String toolId) {\n+\t\ttry{\n+\t\t\tTypeReferences.ResourcesType<Resource<ToolItemRubricAssociation>> resourceParameterizedTypeReference =\n+\t\t\t\t\tnew TypeReferences.ResourcesType<Resource<ToolItemRubricAssociation>>() {};\n+\n+\t\t\tURI apiBaseUrl = new URI(serverConfigurationService.getServerUrl() + RBCS_SERVICE_URL_PREFIX);\n+\t\t\tTraverson traverson = new Traverson(apiBaseUrl, MediaTypes.HAL_JSON);\n+\n+\t\t\tTraverson.TraversalBuilder builder = traverson.follow(\"rubric-associations\", \"search\", \"by-item-id-prefix\");\n+\n+\t\t\tHttpHeaders headers = new HttpHeaders();\n+\t\t\theaders.add(\"Authorization\", String.format(\"Bearer %s\", generateJsonWebToken(toolId)));\n+\t\t\tbuilder.withHeaders(headers);\n+\n+\t\t\tMap<String, Object> parameters = new HashMap<>();\n+\t\t\tparameters.put(\"toolId\", toolId);\n+\t\t\tparameters.put(\"itemId\", itemId);\n+\n+\t\t\tResources<Resource<ToolItemRubricAssociation>> associationResources = builder.withTemplateParameters(parameters).toObject(resourceParameterizedTypeReference);\n+\n+\t\t\tfor (Resource<ToolItemRubricAssociation> associationResource : associationResources) {\n+                String associationHref = associationResource.getLink(Link.REL_SELF).getHref();\n+                deleteRubricEvaluationsForAssociation(associationHref, toolId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8930cdef495467ba1974110df1ed731e94d4506"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MjU1MjA0OnYy", "diffSide": "RIGHT", "path": "rubrics/impl/src/main/java/org/sakaiproject/rubrics/logic/RubricsServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMToyNjoyMVrOFby0NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMToyNjoyMVrOFby0NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY4ODQzNg==", "bodyText": "Some more indentation", "url": "https://github.com/sakaiproject/sakai/pull/7749#discussion_r364688436", "createdAt": "2020-01-09T11:26:21Z", "author": {"login": "adrianfish"}, "path": "rubrics/impl/src/main/java/org/sakaiproject/rubrics/logic/RubricsServiceImpl.java", "diffHunk": "@@ -813,6 +813,87 @@ public void deleteRubricAssociationsByItemIdPrefix(String itemId, String toolId)\n         }\n     }\n \n+\tpublic void softDeleteRubricAssociationsByItemIdPrefix(String itemId, String toolId) {\n+\t\ttry{\n+\t\t\tTypeReferences.ResourcesType<Resource<ToolItemRubricAssociation>> resourceParameterizedTypeReference =\n+\t\t\t\t\tnew TypeReferences.ResourcesType<Resource<ToolItemRubricAssociation>>() {};\n+\n+\t\t\tURI apiBaseUrl = new URI(serverConfigurationService.getServerUrl() + RBCS_SERVICE_URL_PREFIX);\n+\t\t\tTraverson traverson = new Traverson(apiBaseUrl, MediaTypes.HAL_JSON);\n+\n+\t\t\tTraverson.TraversalBuilder builder = traverson.follow(\"rubric-associations\", \"search\", \"by-item-id-prefix\");\n+\n+\t\t\tHttpHeaders headers = new HttpHeaders();\n+\t\t\theaders.add(\"Authorization\", String.format(\"Bearer %s\", generateJsonWebToken(toolId)));\n+\t\t\tbuilder.withHeaders(headers);\n+\n+\t\t\tMap<String, Object> parameters = new HashMap<>();\n+\t\t\tparameters.put(\"toolId\", toolId);\n+\t\t\tparameters.put(\"itemId\", itemId);\n+\n+\t\t\tResources<Resource<ToolItemRubricAssociation>> associationResources = builder.withTemplateParameters(parameters).toObject(resourceParameterizedTypeReference);\n+\n+\t\t\tfor (Resource<ToolItemRubricAssociation> associationResource : associationResources) {\n+                String associationHref = associationResource.getLink(Link.REL_SELF).getHref();\n+                deleteRubricEvaluationsForAssociation(associationHref, toolId);\n+\t\t\t\t\n+                ToolItemRubricAssociation association = associationResource.getContent();\n+                String created = association.getMetadata().getCreated().toString();\n+                String owner = association.getMetadata().getOwnerId();\n+                String ownerType = association.getMetadata().getOwnerType();\n+                String creatorId = association.getMetadata().getCreatorId();\n+                Map <String,Boolean> oldParams = association.getParameters();\n+                oldParams.put(RubricsConstants.RBCS_SOFT_DELETED, true);\n+                String input = \"{\\\"toolId\\\" : \\\"\"+toolId+\"\\\",\\\"itemId\\\" : \\\"\" + association.getItemId() + \"\\\",\\\"rubricId\\\" : \" + association.getRubricId() + \",\\\"metadata\\\" : {\\\"created\\\" : \\\"\" + created + \"\\\",\\\"ownerId\\\" : \\\"\" + owner +\n+                \"\\\",\\\"ownerType\\\" : \\\"\" + ownerType + \"\\\",\\\"creatorId\\\" : \\\"\" + creatorId + \"\\\"},\\\"parameters\\\" : {\" + setConfigurationParametersForDuplication(oldParams) + \"}}\";\n+                log.debug(\"Soft delete association {}\", input);\n+                String resultPut = putRubricResource(associationHref, input, toolId, null);\n+                log.debug(\"resultPUT: {}\",  resultPut);\n+\t\t\t}\n+        } catch (Exception e) {\n+            log.warn(\"Error soft deleting rubric association for id {} : {}\", itemId, e.getMessage());\n+        }\n+    }\n+\n+\tpublic void restoreRubricAssociationsByItemIdPrefix(String itemId, String toolId) {\n+\t\ttry{\n+\t\t\tTypeReferences.ResourcesType<Resource<ToolItemRubricAssociation>> resourceParameterizedTypeReference =\n+\t\t\t\t\tnew TypeReferences.ResourcesType<Resource<ToolItemRubricAssociation>>() {};\n+\n+\t\t\tURI apiBaseUrl = new URI(serverConfigurationService.getServerUrl() + RBCS_SERVICE_URL_PREFIX);\n+\t\t\tTraverson traverson = new Traverson(apiBaseUrl, MediaTypes.HAL_JSON);\n+\n+\t\t\tTraverson.TraversalBuilder builder = traverson.follow(\"rubric-associations\", \"search\", \"by-item-id-prefix\");\n+\n+\t\t\tHttpHeaders headers = new HttpHeaders();\n+\t\t\theaders.add(\"Authorization\", String.format(\"Bearer %s\", generateJsonWebToken(toolId)));\n+\t\t\tbuilder.withHeaders(headers);\n+\n+\t\t\tMap<String, Object> parameters = new HashMap<>();\n+\t\t\tparameters.put(\"toolId\", toolId);\n+\t\t\tparameters.put(\"itemId\", itemId);\n+\n+\t\t\tResources<Resource<ToolItemRubricAssociation>> associationResources = builder.withTemplateParameters(parameters).toObject(resourceParameterizedTypeReference);\n+\t\t\tfor (Resource<ToolItemRubricAssociation> associationResource : associationResources) {\n+                String associationHref = associationResource.getLink(Link.REL_SELF).getHref();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8930cdef495467ba1974110df1ed731e94d4506"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MjU2NjM3OnYy", "diffSide": "RIGHT", "path": "rubrics/tool/src/main/frontend/webcomponents/sakai-item-delete.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMTozMDo1MVrOFby8GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMTozMDo1MVrOFby8GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY5MDQ1Nw==", "bodyText": "Perhaps use console.error here?", "url": "https://github.com/sakaiproject/sakai/pull/7749#discussion_r364690457", "createdAt": "2020-01-09T11:30:51Z", "author": {"login": "adrianfish"}, "path": "rubrics/tool/src/main/frontend/webcomponents/sakai-item-delete.js", "diffHunk": "@@ -137,6 +137,27 @@ export class SakaiItemDelete extends RubricsElement {\n       url += this.rubric.id;\n     }\n \n+    // SAK-42944 removing the soft-deleted associations\n+    $.ajax({\n+      url: `/rubrics-service/rest/rubric-associations/search/by-rubric-id?rubricId=${this.rubric.id}`,\n+      headers: {\"authorization\": this.token}\n+    }).done(data => {\n+      if (data._embedded['rubric-associations'].length) {\n+        data._embedded['rubric-associations'].forEach( assoc => {\t\t\t\t\t\n+          var assocUrl = \"/rubrics-service/rest/rubric-associations/\"+assoc.id;\n+          $.ajax({\n+\t\t    url: assocUrl,\n+\t\t    method: \"DELETE\",\n+\t\t    headers: {\"authorization\": this.token},\n+\t\t    contentType: \"application/json\"\n+\t\t  }).fail((jqXHR, error, message) => {\n+\t\t    console.log(error);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c8930cdef495467ba1974110df1ed731e94d4506"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2845, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}