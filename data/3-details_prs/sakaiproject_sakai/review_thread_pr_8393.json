{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2Nzk5ODg1", "number": 8393, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMzozOToyN1rOESZCUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMzozOToyN1rOESZCUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NzIwMDE2OnYy", "diffSide": "RIGHT", "path": "edu-services/gradebook-service/impl/src/java/org/sakaiproject/component/gradebook/GradebookServiceHibernateImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMzozOToyN1rOG3i35Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwMzoxNzowM1rOG-m7Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg5NjIyOQ==", "bodyText": "can you return the validatedName from your helper function instead? is that cleaner?", "url": "https://github.com/sakaiproject/sakai/pull/8393#discussion_r460896229", "createdAt": "2020-07-27T13:39:27Z", "author": {"login": "ottenhoff"}, "path": "edu-services/gradebook-service/impl/src/java/org/sakaiproject/component/gradebook/GradebookServiceHibernateImpl.java", "diffHunk": "@@ -614,29 +614,27 @@ public Object doInHibernate(final Session session) throws HibernateException {\n \n \t}\n \n+\n \t@Override\n \tpublic Long addAssignment(final String gradebookUid, final org.sakaiproject.service.gradebook.shared.Assignment assignmentDefinition) {\n \t\tif (!getAuthz().isUserAbleToEditAssessments(gradebookUid)) {\n \t\t\tlog.error(\"AUTHORIZATION FAILURE: User {} in gradebook {} attempted to add an assignment\", getUserUid(), gradebookUid);\n \t\t\tthrow new GradebookSecurityException();\n \t\t}\n \n-\t\t// Ensure that points is > zero.\n-\t\tfinal Double points = assignmentDefinition.getPoints();\n-\t\tif ((points == null) || (points <= 0)) {\n-\t\t\tthrow new AssignmentHasIllegalPointsException(\"Points must be > 0\");\n-\t\t}\n+\t\tGradebookHelper.validateAssignmentNameAndPoints(assignmentDefinition);\n \n \t\tfinal Gradebook gradebook = getGradebook(gradebookUid);\n+\t\tfinal String validatedName = StringUtils.trimToNull(assignmentDefinition.getName());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0678c69b4d6206a97ada9e11bc883b0debde9ac2"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODMwMjY2Mg==", "bodyText": "I rewrote both of these methods to return the validatedName based on this suggestion. Eliminated about 20 lines of code.", "url": "https://github.com/sakaiproject/sakai/pull/8393#discussion_r468302662", "createdAt": "2020-08-11T03:17:03Z", "author": {"login": "jonespm"}, "path": "edu-services/gradebook-service/impl/src/java/org/sakaiproject/component/gradebook/GradebookServiceHibernateImpl.java", "diffHunk": "@@ -614,29 +614,27 @@ public Object doInHibernate(final Session session) throws HibernateException {\n \n \t}\n \n+\n \t@Override\n \tpublic Long addAssignment(final String gradebookUid, final org.sakaiproject.service.gradebook.shared.Assignment assignmentDefinition) {\n \t\tif (!getAuthz().isUserAbleToEditAssessments(gradebookUid)) {\n \t\t\tlog.error(\"AUTHORIZATION FAILURE: User {} in gradebook {} attempted to add an assignment\", getUserUid(), gradebookUid);\n \t\t\tthrow new GradebookSecurityException();\n \t\t}\n \n-\t\t// Ensure that points is > zero.\n-\t\tfinal Double points = assignmentDefinition.getPoints();\n-\t\tif ((points == null) || (points <= 0)) {\n-\t\t\tthrow new AssignmentHasIllegalPointsException(\"Points must be > 0\");\n-\t\t}\n+\t\tGradebookHelper.validateAssignmentNameAndPoints(assignmentDefinition);\n \n \t\tfinal Gradebook gradebook = getGradebook(gradebookUid);\n+\t\tfinal String validatedName = StringUtils.trimToNull(assignmentDefinition.getName());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDg5NjIyOQ=="}, "originalCommit": {"oid": "0678c69b4d6206a97ada9e11bc883b0debde9ac2"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2793, "cost": 1, "resetAt": "2021-11-12T12:57:47Z"}}}