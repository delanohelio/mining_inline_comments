{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcxNTE2NDI0", "number": 3663, "title": "[ISSUE#3658] refactor TaskManager and move to nacos-common module", "bodyText": "Please do not create a Pull Request without creating an issue first.\nWhat is the purpose of the change\nFor #3658 .\nRefactor TaskManager and move to nacos-common module\nVerifying this change\nFollow this checklist to help us incorporate your contribution quickly and easily:\n\n Make sure there is a Github issue filed for the change (usually before you start working on it). Trivial changes like typos do not require a Github issue. Your pull request should address just this issue, without pulling in other changes - one PR resolves one issue.\n Format the pull request title like [ISSUE #123] Fix UnknownException when host config not exist. Each commit in the pull request should have a meaningful subject line and body.\n Write a pull request description that is detailed enough to understand what the pull request does, how, and why.\n Write necessary unit-test to verify your logic correction, more mock a little better when cross module dependency exist. If the new feature or significant change is committed, please remember to add integration-test in test module.\n Run mvn -B clean package apache-rat:check findbugs:findbugs -Dmaven.test.skip=true to make sure basic checks pass. Run mvn clean install -DskipITs to make sure unit-test pass. Run mvn clean test-compile failsafe:integration-test  to make sure integration-test pass.", "createdAt": "2020-08-21T09:17:45Z", "url": "https://github.com/alibaba/nacos/pull/3663", "merged": true, "mergeCommit": {"oid": "a0c8353b70bc1524f6d5f764f415bfe81ebf61b3"}, "closed": true, "closedAt": "2020-08-23T08:39:58Z", "author": {"login": "KomachiSion"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdBBGbQgH2gAyNDcxNTE2NDI0OmEwNDg0ZmRhMmE1YTUxNjU3ZWM3MjZhODJkN2EyNjFhYzMyMWE4Zjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdBHKnAgFqTQ3MjYxNDc2Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a0484fda2a5a51657ec726a82d7a261ac321a8f9", "author": {"user": {"login": "KomachiSion", "name": "\u6768\u7fca SionYang"}}, "url": "https://github.com/alibaba/nacos/commit/a0484fda2a5a51657ec726a82d7a261ac321a8f9", "committedDate": "2020-08-21T09:08:05Z", "message": "Add TaskManagerTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c78839f76fae401ea853d22d36f808e6fc2b349", "author": {"user": {"login": "KomachiSion", "name": "\u6768\u7fca SionYang"}}, "url": "https://github.com/alibaba/nacos/commit/0c78839f76fae401ea853d22d36f808e6fc2b349", "committedDate": "2020-08-21T09:08:05Z", "message": "Move Abstract Task and Task processor to nacos-common"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4e2fc3e7fcf1d5dcbe667c02d4d14bde954d18c", "author": {"user": {"login": "KomachiSion", "name": "\u6768\u7fca SionYang"}}, "url": "https://github.com/alibaba/nacos/commit/c4e2fc3e7fcf1d5dcbe667c02d4d14bde954d18c", "committedDate": "2020-08-21T09:08:05Z", "message": "Add Nacos execute engine interface and nacos task interface"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a171de9179e8e71856820f781b9078a827acbd0", "author": {"user": {"login": "KomachiSion", "name": "\u6768\u7fca SionYang"}}, "url": "https://github.com/alibaba/nacos/commit/1a171de9179e8e71856820f781b9078a827acbd0", "committedDate": "2020-08-21T09:08:05Z", "message": "Refactor Task Manager to NacosDelayTaskExecuteEngine"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a458bfd83c4de6bb70f10a9ccb7a0b0078e96bd4", "author": {"user": {"login": "KomachiSion", "name": "\u6768\u7fca SionYang"}}, "url": "https://github.com/alibaba/nacos/commit/a458bfd83c4de6bb70f10a9ccb7a0b0078e96bd4", "committedDate": "2020-08-21T09:14:24Z", "message": "for code style"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNjE0NzYy", "url": "https://github.com/alibaba/nacos/pull/3663#pullrequestreview-472614762", "createdAt": "2020-08-21T16:07:12Z", "commit": {"oid": "a458bfd83c4de6bb70f10a9ccb7a0b0078e96bd4"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjowNzoxMlrOHEy-FQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjowNzoxMlrOHEy-FQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDc5MTQ0NQ==", "bodyText": "\u8fd9\u91cc\u5982\u679c\u4e0d\u9ebb\u70e6\u7684\u8bdd\uff0c\u53ef\u4ee5\u7528\u8fd9\u79cd\u65b9\u5f0f\nfinal Lock lock = this.lock;\nlock.lock()", "url": "https://github.com/alibaba/nacos/pull/3663#discussion_r474791445", "createdAt": "2020-08-21T16:07:12Z", "author": {"login": "chuntaojun"}, "path": "common/src/main/java/com/alibaba/nacos/common/task/engine/AbstractNacosTaskExecuteEngine.java", "diffHunk": "@@ -0,0 +1,179 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.task.engine;\n+\n+import com.alibaba.nacos.api.exception.NacosException;\n+import com.alibaba.nacos.common.executor.ExecutorFactory;\n+import com.alibaba.nacos.common.executor.NameThreadFactory;\n+import com.alibaba.nacos.common.task.NacosTask;\n+import com.alibaba.nacos.common.task.NacosTaskProcessor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.concurrent.locks.ReentrantLock;\n+\n+/**\n+ * Abstract nacos task execute engine.\n+ *\n+ * @author xiweng.yy\n+ */\n+public abstract class AbstractNacosTaskExecuteEngine<T extends NacosTask> implements NacosTaskExecuteEngine<T> {\n+    \n+    private final Logger log;\n+    \n+    private final ScheduledExecutorService processingExecutor;\n+    \n+    private final ConcurrentHashMap<Object, NacosTaskProcessor> taskProcessors = new ConcurrentHashMap<Object, NacosTaskProcessor>();\n+    \n+    private final AtomicBoolean closed = new AtomicBoolean(false);\n+    \n+    protected final ConcurrentHashMap<Object, T> tasks;\n+    \n+    protected final ReentrantLock lock = new ReentrantLock();\n+    \n+    private NacosTaskProcessor defaultTaskProcessor;\n+    \n+    public AbstractNacosTaskExecuteEngine(String name) {\n+        this(name, 32, null, 100L);\n+    }\n+    \n+    public AbstractNacosTaskExecuteEngine(String name, Logger logger) {\n+        this(name, 32, logger, 100L);\n+    }\n+    \n+    public AbstractNacosTaskExecuteEngine(String name, Logger logger, long processInterval) {\n+        this(name, 32, logger, processInterval);\n+    }\n+    \n+    public AbstractNacosTaskExecuteEngine(String name, int initCapacity, Logger logger) {\n+        this(name, initCapacity, logger, 100L);\n+    }\n+    \n+    public AbstractNacosTaskExecuteEngine(String name, int initCapacity, Logger logger, long processInterval) {\n+        this.log = null != logger ? logger : LoggerFactory.getLogger(AbstractNacosTaskExecuteEngine.class.getName());\n+        tasks = new ConcurrentHashMap<Object, T>(initCapacity);\n+        processingExecutor = ExecutorFactory.newSingleScheduledExecutorService(new NameThreadFactory(name));\n+        processingExecutor.scheduleWithFixedDelay(new ProcessRunnable(), processInterval, processInterval, TimeUnit.MILLISECONDS);\n+    }\n+    \n+    @Override\n+    public int size() {\n+        lock.lock();\n+        try {\n+            return tasks.size();\n+        } finally {\n+            lock.unlock();\n+        }\n+    }\n+    \n+    @Override\n+    public boolean isEmpty() {\n+        lock.lock();\n+        try {\n+            return tasks.isEmpty();\n+        } finally {\n+            lock.unlock();\n+        }\n+    }\n+    \n+    @Override\n+    public void addProcessor(Object key, NacosTaskProcessor taskProcessor) {\n+        taskProcessors.putIfAbsent(key, taskProcessor);\n+    }\n+    \n+    @Override\n+    public void removeProcessor(Object key) {\n+        taskProcessors.remove(key);\n+    }\n+    \n+    @Override\n+    public NacosTaskProcessor getProcessor(Object key) {\n+        return taskProcessors.containsKey(key) ? taskProcessors.get(key) : defaultTaskProcessor;\n+    }\n+    \n+    @Override\n+    public Collection<Object> getAllProcessorKey() {\n+        return taskProcessors.keySet();\n+    }\n+    \n+    @Override\n+    public void setDefaultTaskProcessor(NacosTaskProcessor defaultTaskProcessor) {\n+        this.defaultTaskProcessor = defaultTaskProcessor;\n+    }\n+    \n+    @Override\n+    public T removeTask(Object key) {\n+        lock.lock();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a458bfd83c4de6bb70f10a9ccb7a0b0078e96bd4"}, "originalPosition": 126}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4248, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}