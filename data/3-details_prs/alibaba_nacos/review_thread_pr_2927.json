{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NTU4ODcy", "number": 2927, "reviewThreads": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwNTozMzo0NFrOEBKBnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMzo0NzowNlrOEEiAzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjQ4Mjg3OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/com/alibaba/nacos/client/config/http/MetricsHttpAgent.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwNTozMzo0NFrOGc202A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwNTozMzo0NFrOGc202A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkxMTU3Ng==", "bodyText": "use this.serverHttpAgent.start()", "url": "https://github.com/alibaba/nacos/pull/2927#discussion_r432911576", "createdAt": "2020-05-31T05:33:44Z", "author": {"login": "wangweizZZ"}, "path": "client/src/main/java/com/alibaba/nacos/client/config/http/MetricsHttpAgent.java", "diffHunk": "@@ -91,22 +92,32 @@ public HttpResult httpDelete(String path, List<String> headers, List<String> par\n \n     @Override\n     public String getName() {\n-        return httpAgent.getName();\n+        return this.serverHttpAgent.getName();\n     }\n \n     @Override\n     public String getNamespace() {\n-        return httpAgent.getNamespace();\n+        return this.serverHttpAgent.getNamespace();\n     }\n \n     @Override\n     public String getTenant() {\n-        return httpAgent.getTenant();\n+        return this.serverHttpAgent.getTenant();\n     }\n \n     @Override\n     public String getEncode() {\n-        return httpAgent.getEncode();\n+        return this.serverHttpAgent.getEncode();\n+    }\n+\n+    @Override\n+    public void doStart() throws Exception {\n+        this.serverHttpAgent.doStart();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab3b234987458a492eb52738764542c085953c85"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjQ4NDM3OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/com/alibaba/nacos/client/config/http/MetricsHttpAgent.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwNTozNzowNVrOGc21jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwNTozNzowNVrOGc21jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkxMTc1OQ==", "bodyText": "use this.serverHttpAgent.stop()", "url": "https://github.com/alibaba/nacos/pull/2927#discussion_r432911759", "createdAt": "2020-05-31T05:37:05Z", "author": {"login": "wangweizZZ"}, "path": "client/src/main/java/com/alibaba/nacos/client/config/http/MetricsHttpAgent.java", "diffHunk": "@@ -91,22 +92,32 @@ public HttpResult httpDelete(String path, List<String> headers, List<String> par\n \n     @Override\n     public String getName() {\n-        return httpAgent.getName();\n+        return this.serverHttpAgent.getName();\n     }\n \n     @Override\n     public String getNamespace() {\n-        return httpAgent.getNamespace();\n+        return this.serverHttpAgent.getNamespace();\n     }\n \n     @Override\n     public String getTenant() {\n-        return httpAgent.getTenant();\n+        return this.serverHttpAgent.getTenant();\n     }\n \n     @Override\n     public String getEncode() {\n-        return httpAgent.getEncode();\n+        return this.serverHttpAgent.getEncode();\n+    }\n+\n+    @Override\n+    public void doStart() throws Exception {\n+        this.serverHttpAgent.doStart();\n+    }\n+\n+    @Override\n+    public void doStop() throws Exception {\n+        this.serverHttpAgent.doStop();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab3b234987458a492eb52738764542c085953c85"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjQ5ODI3OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/com/alibaba/nacos/client/config/http/ServerHttpAgent.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwNjowOTo1NlrOGc28XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwNjowOTo1NlrOGc28XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkxMzUwMQ==", "bodyText": "The thread pool shutdown code should sink into ThreadUtils", "url": "https://github.com/alibaba/nacos/pull/2927#discussion_r432913501", "createdAt": "2020-05-31T06:09:56Z", "author": {"login": "chuntaojun"}, "path": "client/src/main/java/com/alibaba/nacos/client/config/http/ServerHttpAgent.java", "diffHunk": "@@ -329,7 +315,57 @@ private void initMaxRetry(Properties properties) {\n     }\n \n     @Override\n-    public synchronized void start() throws NacosException {\n+    protected void doStart() throws Exception {\n+        LOGGER.info(\"do start begin\");\n+\n+        // init executorService\n+        this.executorService = new ScheduledThreadPoolExecutor(1, new ThreadFactory() {\n+            @Override\n+            public Thread newThread(Runnable r) {\n+                Thread t = new Thread(r);\n+                t.setName(\"com.alibaba.nacos.client.config.security.updater\");\n+                t.setDaemon(true);\n+                return t;\n+            }\n+        });\n+\n+        this.executorService.scheduleWithFixedDelay(new Runnable() {\n+            @Override\n+            public void run() {\n+                securityProxy.login(serverListMgr.getServerUrls());\n+            }\n+        }, 0, securityInfoRefreshIntervalMills, TimeUnit.MILLISECONDS);\n+\n+        LOGGER.info(\"do start end\");\n+    }\n+\n+    @Override\n+    protected void doStop() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab3b234987458a492eb52738764542c085953c85"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjQ5OTU3OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/alibaba/nacos/common/lifecycle/ResourceLifeCycleManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwNjoxMjoyMFrOGc28-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwNjozNjozNVrOGc3C_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkxMzY1Nw==", "bodyText": "New Object() may be executed multiple times", "url": "https://github.com/alibaba/nacos/pull/2927#discussion_r432913657", "createdAt": "2020-05-31T06:12:20Z", "author": {"login": "chuntaojun"}, "path": "common/src/main/java/com/alibaba/nacos/common/lifecycle/ResourceLifeCycleManager.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.nacos.common.lifecycle;\n+\n+import com.alibaba.nacos.common.utils.ShutdownUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * A class to manage every instances' life cycle which register into it.\n+ * @author zongtanghu\n+ *\n+ */\n+public final class ResourceLifeCycleManager {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ResourceLifeCycleManager.class);\n+\n+    /**\n+     * <Object instance...>\n+     */\n+    private List<AbstractLifeCycle> lifeCycleResources;\n+\n+    /**\n+     * Map<Object instance, Object>\n+     */\n+    private Map<AbstractLifeCycle, Object> lockers = new ConcurrentHashMap<AbstractLifeCycle, Object>(8);\n+\n+    private static final ResourceLifeCycleManager INSTANCE = new ResourceLifeCycleManager();\n+\n+    private static final AtomicBoolean CLOSED = new AtomicBoolean(false);\n+\n+    static {\n+        INSTANCE.init();\n+        ShutdownUtils.addShutdownHook(new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+                LOGGER.warn(\"[LifeCycleManager] Start destroying Every Instance\");\n+                shutdown();\n+                LOGGER.warn(\"[LifeCycleManager] Destruction of the end\");\n+            }\n+        }));\n+    }\n+\n+    private void init() {\n+        this.lifeCycleResources = new CopyOnWriteArrayList<AbstractLifeCycle>();\n+    }\n+\n+    public static ResourceLifeCycleManager getInstance() {\n+        return INSTANCE;\n+    }\n+\n+    /**\n+     * Destroy all of the life cycle resources which are managed by ResourceLifeCycleManager.\n+     *\n+     */\n+    public static void shutdown() {\n+        if (!CLOSED.compareAndSet(false, true)) {\n+            return;\n+        }\n+\n+        List<AbstractLifeCycle> instances = INSTANCE.lifeCycleResources;\n+        for (AbstractLifeCycle instance : instances) {\n+            INSTANCE.destroy(instance);\n+        }\n+    }\n+\n+    /**\n+     * Destroy the life cycle resource instance.\n+     *\n+     * @param instance the life cycle resource instance which is need to be destroyed.\n+     */\n+    public void destroy(AbstractLifeCycle instance) {\n+        final Object monitor = lockers.get(instance);\n+        if (monitor == null) {\n+            return;\n+        }\n+        synchronized (monitor) {\n+            try {\n+                // the life cycle resources which managed are do stop method.\n+                if (LOGGER.isDebugEnabled()) {\n+                    LOGGER.debug(\"Life cycle resources do stop\");\n+                }\n+                instance.stop();\n+                INSTANCE.lifeCycleResources.remove(instance);\n+                INSTANCE.lockers.remove(instance);\n+            } catch (Exception e) {\n+                LOGGER.error(\"An exception occurred during resource do stop : {}\", e);\n+            }\n+        }\n+    }\n+\n+\n+    /**\n+     * Cancel the specified lifecycle resource instance management.\n+     *\n+     * @param instance the management life cycle resource instances;\n+     *\n+     */\n+    public void deregister(AbstractLifeCycle instance) {\n+        if (this.lifeCycleResources.contains(instance)) {\n+            final Object monitor = lockers.get(instance);\n+            synchronized (monitor) {\n+                this.lifeCycleResources.remove(instance);\n+                this.lockers.remove(instance);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Register the life cycle resource instances into the lifeCycleResources lists.\n+     *\n+     * @param instance the management life cycle resource instances.\n+     */\n+    public void register(AbstractLifeCycle instance) {\n+        if (!lifeCycleResources.contains(instance)) {\n+            synchronized(this) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab3b234987458a492eb52738764542c085953c85"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkxMzk4OQ==", "bodyText": "if (!lifeCycleResources.contains(instance)) {\n            synchronized(this) {\n                          if (!lockers.containsKey(instance)) {\n                                      lockers.put(instance, new Objects());\n                          }\n             }\n}", "url": "https://github.com/alibaba/nacos/pull/2927#discussion_r432913989", "createdAt": "2020-05-31T06:17:34Z", "author": {"login": "chuntaojun"}, "path": "common/src/main/java/com/alibaba/nacos/common/lifecycle/ResourceLifeCycleManager.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.nacos.common.lifecycle;\n+\n+import com.alibaba.nacos.common.utils.ShutdownUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * A class to manage every instances' life cycle which register into it.\n+ * @author zongtanghu\n+ *\n+ */\n+public final class ResourceLifeCycleManager {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ResourceLifeCycleManager.class);\n+\n+    /**\n+     * <Object instance...>\n+     */\n+    private List<AbstractLifeCycle> lifeCycleResources;\n+\n+    /**\n+     * Map<Object instance, Object>\n+     */\n+    private Map<AbstractLifeCycle, Object> lockers = new ConcurrentHashMap<AbstractLifeCycle, Object>(8);\n+\n+    private static final ResourceLifeCycleManager INSTANCE = new ResourceLifeCycleManager();\n+\n+    private static final AtomicBoolean CLOSED = new AtomicBoolean(false);\n+\n+    static {\n+        INSTANCE.init();\n+        ShutdownUtils.addShutdownHook(new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+                LOGGER.warn(\"[LifeCycleManager] Start destroying Every Instance\");\n+                shutdown();\n+                LOGGER.warn(\"[LifeCycleManager] Destruction of the end\");\n+            }\n+        }));\n+    }\n+\n+    private void init() {\n+        this.lifeCycleResources = new CopyOnWriteArrayList<AbstractLifeCycle>();\n+    }\n+\n+    public static ResourceLifeCycleManager getInstance() {\n+        return INSTANCE;\n+    }\n+\n+    /**\n+     * Destroy all of the life cycle resources which are managed by ResourceLifeCycleManager.\n+     *\n+     */\n+    public static void shutdown() {\n+        if (!CLOSED.compareAndSet(false, true)) {\n+            return;\n+        }\n+\n+        List<AbstractLifeCycle> instances = INSTANCE.lifeCycleResources;\n+        for (AbstractLifeCycle instance : instances) {\n+            INSTANCE.destroy(instance);\n+        }\n+    }\n+\n+    /**\n+     * Destroy the life cycle resource instance.\n+     *\n+     * @param instance the life cycle resource instance which is need to be destroyed.\n+     */\n+    public void destroy(AbstractLifeCycle instance) {\n+        final Object monitor = lockers.get(instance);\n+        if (monitor == null) {\n+            return;\n+        }\n+        synchronized (monitor) {\n+            try {\n+                // the life cycle resources which managed are do stop method.\n+                if (LOGGER.isDebugEnabled()) {\n+                    LOGGER.debug(\"Life cycle resources do stop\");\n+                }\n+                instance.stop();\n+                INSTANCE.lifeCycleResources.remove(instance);\n+                INSTANCE.lockers.remove(instance);\n+            } catch (Exception e) {\n+                LOGGER.error(\"An exception occurred during resource do stop : {}\", e);\n+            }\n+        }\n+    }\n+\n+\n+    /**\n+     * Cancel the specified lifecycle resource instance management.\n+     *\n+     * @param instance the management life cycle resource instances;\n+     *\n+     */\n+    public void deregister(AbstractLifeCycle instance) {\n+        if (this.lifeCycleResources.contains(instance)) {\n+            final Object monitor = lockers.get(instance);\n+            synchronized (monitor) {\n+                this.lifeCycleResources.remove(instance);\n+                this.lockers.remove(instance);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Register the life cycle resource instances into the lifeCycleResources lists.\n+     *\n+     * @param instance the management life cycle resource instances.\n+     */\n+    public void register(AbstractLifeCycle instance) {\n+        if (!lifeCycleResources.contains(instance)) {\n+            synchronized(this) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkxMzY1Nw=="}, "originalCommit": {"oid": "ab3b234987458a492eb52738764542c085953c85"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkxNTE5Nw==", "bodyText": "Okay I will resolve this issue in the codes.", "url": "https://github.com/alibaba/nacos/pull/2927#discussion_r432915197", "createdAt": "2020-05-31T06:36:35Z", "author": {"login": "zongtanghu"}, "path": "common/src/main/java/com/alibaba/nacos/common/lifecycle/ResourceLifeCycleManager.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.nacos.common.lifecycle;\n+\n+import com.alibaba.nacos.common.utils.ShutdownUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * A class to manage every instances' life cycle which register into it.\n+ * @author zongtanghu\n+ *\n+ */\n+public final class ResourceLifeCycleManager {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ResourceLifeCycleManager.class);\n+\n+    /**\n+     * <Object instance...>\n+     */\n+    private List<AbstractLifeCycle> lifeCycleResources;\n+\n+    /**\n+     * Map<Object instance, Object>\n+     */\n+    private Map<AbstractLifeCycle, Object> lockers = new ConcurrentHashMap<AbstractLifeCycle, Object>(8);\n+\n+    private static final ResourceLifeCycleManager INSTANCE = new ResourceLifeCycleManager();\n+\n+    private static final AtomicBoolean CLOSED = new AtomicBoolean(false);\n+\n+    static {\n+        INSTANCE.init();\n+        ShutdownUtils.addShutdownHook(new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+                LOGGER.warn(\"[LifeCycleManager] Start destroying Every Instance\");\n+                shutdown();\n+                LOGGER.warn(\"[LifeCycleManager] Destruction of the end\");\n+            }\n+        }));\n+    }\n+\n+    private void init() {\n+        this.lifeCycleResources = new CopyOnWriteArrayList<AbstractLifeCycle>();\n+    }\n+\n+    public static ResourceLifeCycleManager getInstance() {\n+        return INSTANCE;\n+    }\n+\n+    /**\n+     * Destroy all of the life cycle resources which are managed by ResourceLifeCycleManager.\n+     *\n+     */\n+    public static void shutdown() {\n+        if (!CLOSED.compareAndSet(false, true)) {\n+            return;\n+        }\n+\n+        List<AbstractLifeCycle> instances = INSTANCE.lifeCycleResources;\n+        for (AbstractLifeCycle instance : instances) {\n+            INSTANCE.destroy(instance);\n+        }\n+    }\n+\n+    /**\n+     * Destroy the life cycle resource instance.\n+     *\n+     * @param instance the life cycle resource instance which is need to be destroyed.\n+     */\n+    public void destroy(AbstractLifeCycle instance) {\n+        final Object monitor = lockers.get(instance);\n+        if (monitor == null) {\n+            return;\n+        }\n+        synchronized (monitor) {\n+            try {\n+                // the life cycle resources which managed are do stop method.\n+                if (LOGGER.isDebugEnabled()) {\n+                    LOGGER.debug(\"Life cycle resources do stop\");\n+                }\n+                instance.stop();\n+                INSTANCE.lifeCycleResources.remove(instance);\n+                INSTANCE.lockers.remove(instance);\n+            } catch (Exception e) {\n+                LOGGER.error(\"An exception occurred during resource do stop : {}\", e);\n+            }\n+        }\n+    }\n+\n+\n+    /**\n+     * Cancel the specified lifecycle resource instance management.\n+     *\n+     * @param instance the management life cycle resource instances;\n+     *\n+     */\n+    public void deregister(AbstractLifeCycle instance) {\n+        if (this.lifeCycleResources.contains(instance)) {\n+            final Object monitor = lockers.get(instance);\n+            synchronized (monitor) {\n+                this.lifeCycleResources.remove(instance);\n+                this.lockers.remove(instance);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Register the life cycle resource instances into the lifeCycleResources lists.\n+     *\n+     * @param instance the management life cycle resource instances.\n+     */\n+    public void register(AbstractLifeCycle instance) {\n+        if (!lifeCycleResources.contains(instance)) {\n+            synchronized(this) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkxMzY1Nw=="}, "originalCommit": {"oid": "ab3b234987458a492eb52738764542c085953c85"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5NjUwMDIxOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/alibaba/nacos/common/lifecycle/ResourceLifeCycleManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwNjoxMzozNFrOGc29Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwNjozNzo0NVrOGc3DRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkxMzczOQ==", "bodyText": "maybe need double check?", "url": "https://github.com/alibaba/nacos/pull/2927#discussion_r432913739", "createdAt": "2020-05-31T06:13:34Z", "author": {"login": "wangweizZZ"}, "path": "common/src/main/java/com/alibaba/nacos/common/lifecycle/ResourceLifeCycleManager.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.nacos.common.lifecycle;\n+\n+import com.alibaba.nacos.common.utils.ShutdownUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * A class to manage every instances' life cycle which register into it.\n+ * @author zongtanghu\n+ *\n+ */\n+public final class ResourceLifeCycleManager {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ResourceLifeCycleManager.class);\n+\n+    /**\n+     * <Object instance...>\n+     */\n+    private List<AbstractLifeCycle> lifeCycleResources;\n+\n+    /**\n+     * Map<Object instance, Object>\n+     */\n+    private Map<AbstractLifeCycle, Object> lockers = new ConcurrentHashMap<AbstractLifeCycle, Object>(8);\n+\n+    private static final ResourceLifeCycleManager INSTANCE = new ResourceLifeCycleManager();\n+\n+    private static final AtomicBoolean CLOSED = new AtomicBoolean(false);\n+\n+    static {\n+        INSTANCE.init();\n+        ShutdownUtils.addShutdownHook(new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+                LOGGER.warn(\"[LifeCycleManager] Start destroying Every Instance\");\n+                shutdown();\n+                LOGGER.warn(\"[LifeCycleManager] Destruction of the end\");\n+            }\n+        }));\n+    }\n+\n+    private void init() {\n+        this.lifeCycleResources = new CopyOnWriteArrayList<AbstractLifeCycle>();\n+    }\n+\n+    public static ResourceLifeCycleManager getInstance() {\n+        return INSTANCE;\n+    }\n+\n+    /**\n+     * Destroy all of the life cycle resources which are managed by ResourceLifeCycleManager.\n+     *\n+     */\n+    public static void shutdown() {\n+        if (!CLOSED.compareAndSet(false, true)) {\n+            return;\n+        }\n+\n+        List<AbstractLifeCycle> instances = INSTANCE.lifeCycleResources;\n+        for (AbstractLifeCycle instance : instances) {\n+            INSTANCE.destroy(instance);\n+        }\n+    }\n+\n+    /**\n+     * Destroy the life cycle resource instance.\n+     *\n+     * @param instance the life cycle resource instance which is need to be destroyed.\n+     */\n+    public void destroy(AbstractLifeCycle instance) {\n+        final Object monitor = lockers.get(instance);\n+        if (monitor == null) {\n+            return;\n+        }\n+        synchronized (monitor) {\n+            try {\n+                // the life cycle resources which managed are do stop method.\n+                if (LOGGER.isDebugEnabled()) {\n+                    LOGGER.debug(\"Life cycle resources do stop\");\n+                }\n+                instance.stop();\n+                INSTANCE.lifeCycleResources.remove(instance);\n+                INSTANCE.lockers.remove(instance);\n+            } catch (Exception e) {\n+                LOGGER.error(\"An exception occurred during resource do stop : {}\", e);\n+            }\n+        }\n+    }\n+\n+\n+    /**\n+     * Cancel the specified lifecycle resource instance management.\n+     *\n+     * @param instance the management life cycle resource instances;\n+     *\n+     */\n+    public void deregister(AbstractLifeCycle instance) {\n+        if (this.lifeCycleResources.contains(instance)) {\n+            final Object monitor = lockers.get(instance);\n+            synchronized (monitor) {\n+                this.lifeCycleResources.remove(instance);\n+                this.lockers.remove(instance);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Register the life cycle resource instances into the lifeCycleResources lists.\n+     *\n+     * @param instance the management life cycle resource instances.\n+     */\n+    public void register(AbstractLifeCycle instance) {\n+        if (!lifeCycleResources.contains(instance)) {\n+            synchronized(this) {\n+                lockers.put(instance, new Object());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab3b234987458a492eb52738764542c085953c85"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkxNTI3MA==", "bodyText": "Yes, you can see @chuntaojun 's review comments above.", "url": "https://github.com/alibaba/nacos/pull/2927#discussion_r432915270", "createdAt": "2020-05-31T06:37:45Z", "author": {"login": "zongtanghu"}, "path": "common/src/main/java/com/alibaba/nacos/common/lifecycle/ResourceLifeCycleManager.java", "diffHunk": "@@ -0,0 +1,141 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.nacos.common.lifecycle;\n+\n+import com.alibaba.nacos.common.utils.ShutdownUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.CopyOnWriteArrayList;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * A class to manage every instances' life cycle which register into it.\n+ * @author zongtanghu\n+ *\n+ */\n+public final class ResourceLifeCycleManager {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ResourceLifeCycleManager.class);\n+\n+    /**\n+     * <Object instance...>\n+     */\n+    private List<AbstractLifeCycle> lifeCycleResources;\n+\n+    /**\n+     * Map<Object instance, Object>\n+     */\n+    private Map<AbstractLifeCycle, Object> lockers = new ConcurrentHashMap<AbstractLifeCycle, Object>(8);\n+\n+    private static final ResourceLifeCycleManager INSTANCE = new ResourceLifeCycleManager();\n+\n+    private static final AtomicBoolean CLOSED = new AtomicBoolean(false);\n+\n+    static {\n+        INSTANCE.init();\n+        ShutdownUtils.addShutdownHook(new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+                LOGGER.warn(\"[LifeCycleManager] Start destroying Every Instance\");\n+                shutdown();\n+                LOGGER.warn(\"[LifeCycleManager] Destruction of the end\");\n+            }\n+        }));\n+    }\n+\n+    private void init() {\n+        this.lifeCycleResources = new CopyOnWriteArrayList<AbstractLifeCycle>();\n+    }\n+\n+    public static ResourceLifeCycleManager getInstance() {\n+        return INSTANCE;\n+    }\n+\n+    /**\n+     * Destroy all of the life cycle resources which are managed by ResourceLifeCycleManager.\n+     *\n+     */\n+    public static void shutdown() {\n+        if (!CLOSED.compareAndSet(false, true)) {\n+            return;\n+        }\n+\n+        List<AbstractLifeCycle> instances = INSTANCE.lifeCycleResources;\n+        for (AbstractLifeCycle instance : instances) {\n+            INSTANCE.destroy(instance);\n+        }\n+    }\n+\n+    /**\n+     * Destroy the life cycle resource instance.\n+     *\n+     * @param instance the life cycle resource instance which is need to be destroyed.\n+     */\n+    public void destroy(AbstractLifeCycle instance) {\n+        final Object monitor = lockers.get(instance);\n+        if (monitor == null) {\n+            return;\n+        }\n+        synchronized (monitor) {\n+            try {\n+                // the life cycle resources which managed are do stop method.\n+                if (LOGGER.isDebugEnabled()) {\n+                    LOGGER.debug(\"Life cycle resources do stop\");\n+                }\n+                instance.stop();\n+                INSTANCE.lifeCycleResources.remove(instance);\n+                INSTANCE.lockers.remove(instance);\n+            } catch (Exception e) {\n+                LOGGER.error(\"An exception occurred during resource do stop : {}\", e);\n+            }\n+        }\n+    }\n+\n+\n+    /**\n+     * Cancel the specified lifecycle resource instance management.\n+     *\n+     * @param instance the management life cycle resource instances;\n+     *\n+     */\n+    public void deregister(AbstractLifeCycle instance) {\n+        if (this.lifeCycleResources.contains(instance)) {\n+            final Object monitor = lockers.get(instance);\n+            synchronized (monitor) {\n+                this.lifeCycleResources.remove(instance);\n+                this.lockers.remove(instance);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Register the life cycle resource instances into the lifeCycleResources lists.\n+     *\n+     * @param instance the management life cycle resource instances.\n+     */\n+    public void register(AbstractLifeCycle instance) {\n+        if (!lifeCycleResources.contains(instance)) {\n+            synchronized(this) {\n+                lockers.put(instance, new Object());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkxMzczOQ=="}, "originalCommit": {"oid": "ab3b234987458a492eb52738764542c085953c85"}, "originalPosition": 136}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjY1Njk0OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/com/alibaba/nacos/client/config/http/ServerHttpAgent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzozMToyMlrOGdxtZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzozMzo1MlrOGdx0Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3NjMyNw==", "bodyText": "Better add the class name to see which Object is currently closed", "url": "https://github.com/alibaba/nacos/pull/2927#discussion_r433876327", "createdAt": "2020-06-02T13:31:22Z", "author": {"login": "chuntaojun"}, "path": "client/src/main/java/com/alibaba/nacos/client/config/http/ServerHttpAgent.java", "diffHunk": "@@ -413,22 +420,29 @@ private static String getSTSResponse() throws IOException {\n \n     @Override\n     public String getName() {\n-        return serverListMgr.getName();\n+        return this.serverListMgr.getName();\n     }\n \n     @Override\n     public String getNamespace() {\n-        return serverListMgr.getNamespace();\n+        return this.serverListMgr.getNamespace();\n     }\n \n     @Override\n     public String getTenant() {\n-        return serverListMgr.getTenant();\n+        return this.serverListMgr.getTenant();\n     }\n \n     @Override\n     public String getEncode() {\n-        return encode;\n+        return this.encode;\n+    }\n+\n+    @Override\n+    public void shutdown() throws NacosException{\n+        LOGGER.info(\"do shutdown begin\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab274216a59cf3e1765de0a940c8ae86d316869"}, "originalPosition": 304}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3ODExMA==", "bodyText": "Okay, I will adjust this codes.", "url": "https://github.com/alibaba/nacos/pull/2927#discussion_r433878110", "createdAt": "2020-06-02T13:33:52Z", "author": {"login": "zongtanghu"}, "path": "client/src/main/java/com/alibaba/nacos/client/config/http/ServerHttpAgent.java", "diffHunk": "@@ -413,22 +420,29 @@ private static String getSTSResponse() throws IOException {\n \n     @Override\n     public String getName() {\n-        return serverListMgr.getName();\n+        return this.serverListMgr.getName();\n     }\n \n     @Override\n     public String getNamespace() {\n-        return serverListMgr.getNamespace();\n+        return this.serverListMgr.getNamespace();\n     }\n \n     @Override\n     public String getTenant() {\n-        return serverListMgr.getTenant();\n+        return this.serverListMgr.getTenant();\n     }\n \n     @Override\n     public String getEncode() {\n-        return encode;\n+        return this.encode;\n+    }\n+\n+    @Override\n+    public void shutdown() throws NacosException{\n+        LOGGER.info(\"do shutdown begin\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3NjMyNw=="}, "originalCommit": {"oid": "2ab274216a59cf3e1765de0a940c8ae86d316869"}, "originalPosition": 304}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjY2OTYyOnYy", "diffSide": "RIGHT", "path": "client/src/main/java/com/alibaba/nacos/client/config/impl/ClientWorker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzozNDoxOFrOGdx1ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzozNToyM1rOGdx4dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3ODQzMA==", "bodyText": "Translate the Chinese annotation into English", "url": "https://github.com/alibaba/nacos/pull/2927#discussion_r433878430", "createdAt": "2020-06-02T13:34:18Z", "author": {"login": "chuntaojun"}, "path": "client/src/main/java/com/alibaba/nacos/client/config/impl/ClientWorker.java", "diffHunk": "@@ -275,39 +277,39 @@ private void checkLocalConfig(CacheData cacheData) {\n         final String dataId = cacheData.dataId;\n         final String group = cacheData.group;\n         final String tenant = cacheData.tenant;\n-        File path = LocalConfigInfoProcessor.getFailoverFile(agent.getName(), dataId, group, tenant);\n+        File path = LocalConfigInfoProcessor.getFailoverFile(this.agent.getName(), dataId, group, tenant);\n \n         // \u6ca1\u6709 -> \u6709", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab274216a59cf3e1765de0a940c8ae86d316869"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3OTE1OQ==", "bodyText": "Okay, I will resolve original issue here.", "url": "https://github.com/alibaba/nacos/pull/2927#discussion_r433879159", "createdAt": "2020-06-02T13:35:23Z", "author": {"login": "zongtanghu"}, "path": "client/src/main/java/com/alibaba/nacos/client/config/impl/ClientWorker.java", "diffHunk": "@@ -275,39 +277,39 @@ private void checkLocalConfig(CacheData cacheData) {\n         final String dataId = cacheData.dataId;\n         final String group = cacheData.group;\n         final String tenant = cacheData.tenant;\n-        File path = LocalConfigInfoProcessor.getFailoverFile(agent.getName(), dataId, group, tenant);\n+        File path = LocalConfigInfoProcessor.getFailoverFile(this.agent.getName(), dataId, group, tenant);\n \n         // \u6ca1\u6709 -> \u6709", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg3ODQzMA=="}, "originalCommit": {"oid": "2ab274216a59cf3e1765de0a940c8ae86d316869"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjY5Njg1OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/com/alibaba/nacos/client/config/impl/ClientWorker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzo0MDoxMFrOGdyGrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzo0OToxMlrOGdygXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4Mjc5Nw==", "bodyText": "I think NumberUtils can be replace by ConvertUtils", "url": "https://github.com/alibaba/nacos/pull/2927#discussion_r433882797", "createdAt": "2020-06-02T13:40:10Z", "author": {"login": "chuntaojun"}, "path": "client/src/main/java/com/alibaba/nacos/client/config/impl/ClientWorker.java", "diffHunk": "@@ -482,12 +484,20 @@ public void run() {\n \n     private void init(Properties properties) {\n \n-        timeout = Math.max(NumberUtils.toInt(properties.getProperty(PropertyKeyConst.CONFIG_LONG_POLL_TIMEOUT),\n+        this.timeout = Math.max(NumberUtils.toInt(properties.getProperty(PropertyKeyConst.CONFIG_LONG_POLL_TIMEOUT),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab274216a59cf3e1765de0a940c8ae86d316869"}, "originalPosition": 344}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4OTM3NA==", "bodyText": "Okay, I will replace it.", "url": "https://github.com/alibaba/nacos/pull/2927#discussion_r433889374", "createdAt": "2020-06-02T13:49:12Z", "author": {"login": "zongtanghu"}, "path": "client/src/main/java/com/alibaba/nacos/client/config/impl/ClientWorker.java", "diffHunk": "@@ -482,12 +484,20 @@ public void run() {\n \n     private void init(Properties properties) {\n \n-        timeout = Math.max(NumberUtils.toInt(properties.getProperty(PropertyKeyConst.CONFIG_LONG_POLL_TIMEOUT),\n+        this.timeout = Math.max(NumberUtils.toInt(properties.getProperty(PropertyKeyConst.CONFIG_LONG_POLL_TIMEOUT),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4Mjc5Nw=="}, "originalCommit": {"oid": "2ab274216a59cf3e1765de0a940c8ae86d316869"}, "originalPosition": 344}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMjY5OTE4OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/com/alibaba/nacos/client/config/impl/ServerListManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzo0MDozOFrOGdyIJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxMzo0OToyNlrOGdyg-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4MzE3NA==", "bodyText": "don't impotr *", "url": "https://github.com/alibaba/nacos/pull/2927#discussion_r433883174", "createdAt": "2020-06-02T13:40:38Z", "author": {"login": "chuntaojun"}, "path": "client/src/main/java/com/alibaba/nacos/client/config/impl/ServerListManager.java", "diffHunk": "@@ -18,32 +18,36 @@\n import com.alibaba.nacos.api.PropertyKeyConst;\n import com.alibaba.nacos.api.SystemPropertyKeyConst;\n import com.alibaba.nacos.api.exception.NacosException;\n+import com.alibaba.nacos.api.naming.NamingFactory;\n import com.alibaba.nacos.client.config.impl.EventDispatcher.ServerlistChangeEvent;\n import com.alibaba.nacos.client.config.impl.HttpSimpleClient.HttpResult;\n import com.alibaba.nacos.client.utils.*;\n+import com.alibaba.nacos.common.executor.ExecutorFactory;\n+import com.alibaba.nacos.common.executor.NameThreadFactory;\n+import com.alibaba.nacos.common.lifecycle.Closeable;\n import com.alibaba.nacos.common.utils.IoUtils;\n import com.alibaba.nacos.common.utils.StringUtils;\n+import com.alibaba.nacos.common.utils.ThreadUtils;\n import org.slf4j.Logger;\n \n import java.io.IOException;\n import java.io.StringReader;\n import java.net.HttpURLConnection;\n import java.util.*;\n-import java.util.concurrent.Callable;\n-import java.util.concurrent.TimeUnit;\n-\n+import java.util.concurrent.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2ab274216a59cf3e1765de0a940c8ae86d316869"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4OTUyOQ==", "bodyText": "Okay, I will adjust it.", "url": "https://github.com/alibaba/nacos/pull/2927#discussion_r433889529", "createdAt": "2020-06-02T13:49:26Z", "author": {"login": "zongtanghu"}, "path": "client/src/main/java/com/alibaba/nacos/client/config/impl/ServerListManager.java", "diffHunk": "@@ -18,32 +18,36 @@\n import com.alibaba.nacos.api.PropertyKeyConst;\n import com.alibaba.nacos.api.SystemPropertyKeyConst;\n import com.alibaba.nacos.api.exception.NacosException;\n+import com.alibaba.nacos.api.naming.NamingFactory;\n import com.alibaba.nacos.client.config.impl.EventDispatcher.ServerlistChangeEvent;\n import com.alibaba.nacos.client.config.impl.HttpSimpleClient.HttpResult;\n import com.alibaba.nacos.client.utils.*;\n+import com.alibaba.nacos.common.executor.ExecutorFactory;\n+import com.alibaba.nacos.common.executor.NameThreadFactory;\n+import com.alibaba.nacos.common.lifecycle.Closeable;\n import com.alibaba.nacos.common.utils.IoUtils;\n import com.alibaba.nacos.common.utils.StringUtils;\n+import com.alibaba.nacos.common.utils.ThreadUtils;\n import org.slf4j.Logger;\n \n import java.io.IOException;\n import java.io.StringReader;\n import java.net.HttpURLConnection;\n import java.util.*;\n-import java.util.concurrent.Callable;\n-import java.util.concurrent.TimeUnit;\n-\n+import java.util.concurrent.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg4MzE3NA=="}, "originalCommit": {"oid": "2ab274216a59cf3e1765de0a940c8ae86d316869"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTQ2Njc5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/alibaba/nacos/api/config/ConfigFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjoxMjoyOVrOGeNXQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzowNDo0MFrOGeOqZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyOTQwOQ==", "bodyText": "This line code is no used.", "url": "https://github.com/alibaba/nacos/pull/2927#discussion_r434329409", "createdAt": "2020-06-03T06:12:29Z", "author": {"login": "KomachiSion"}, "path": "api/src/main/java/com/alibaba/nacos/api/config/ConfigFactory.java", "diffHunk": "@@ -59,4 +59,19 @@ public static ConfigService createConfigService(String serverAddr) throws NacosE\n         return createConfigService(properties);\n     }\n \n+    /**\n+     * Destroy Config Instance's Resources.\n+     *\n+     * @param configService\n+     * @throws NacosException\n+     */\n+    public static void destroyConfigService(ConfigService configService) throws NacosException{\n+        try {\n+            configService.shutDown();\n+            configService = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0320e5851c4bb704dcf9f1e3910db8084012c57d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMzOTY5MA==", "bodyText": "The shutdown method aims to destroy the thread pool resources which managed by it.And \"configservice == null\" aims to destroy the config service object instance exhibitly.", "url": "https://github.com/alibaba/nacos/pull/2927#discussion_r434339690", "createdAt": "2020-06-03T06:39:46Z", "author": {"login": "zongtanghu"}, "path": "api/src/main/java/com/alibaba/nacos/api/config/ConfigFactory.java", "diffHunk": "@@ -59,4 +59,19 @@ public static ConfigService createConfigService(String serverAddr) throws NacosE\n         return createConfigService(properties);\n     }\n \n+    /**\n+     * Destroy Config Instance's Resources.\n+     *\n+     * @param configService\n+     * @throws NacosException\n+     */\n+    public static void destroyConfigService(ConfigService configService) throws NacosException{\n+        try {\n+            configService.shutDown();\n+            configService = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyOTQwOQ=="}, "originalCommit": {"oid": "0320e5851c4bb704dcf9f1e3910db8084012c57d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM1MDY5Mg==", "bodyText": "But it's a formal parameter, configService only has effect in this method. the out quote do not be effected.", "url": "https://github.com/alibaba/nacos/pull/2927#discussion_r434350692", "createdAt": "2020-06-03T07:04:40Z", "author": {"login": "KomachiSion"}, "path": "api/src/main/java/com/alibaba/nacos/api/config/ConfigFactory.java", "diffHunk": "@@ -59,4 +59,19 @@ public static ConfigService createConfigService(String serverAddr) throws NacosE\n         return createConfigService(properties);\n     }\n \n+    /**\n+     * Destroy Config Instance's Resources.\n+     *\n+     * @param configService\n+     * @throws NacosException\n+     */\n+    public static void destroyConfigService(ConfigService configService) throws NacosException{\n+        try {\n+            configService.shutDown();\n+            configService = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyOTQwOQ=="}, "originalCommit": {"oid": "0320e5851c4bb704dcf9f1e3910db8084012c57d"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTQ2ODI1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/alibaba/nacos/api/naming/NamingFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjoxMzowMlrOGeNYCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjo0MDoyMFrOGeOAQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyOTYwOQ==", "bodyText": "This line code is no used.", "url": "https://github.com/alibaba/nacos/pull/2927#discussion_r434329609", "createdAt": "2020-06-03T06:13:02Z", "author": {"login": "KomachiSion"}, "path": "api/src/main/java/com/alibaba/nacos/api/naming/NamingFactory.java", "diffHunk": "@@ -48,4 +49,19 @@ public static NamingService createNamingService(Properties properties) throws Na\n             throw new NacosException(NacosException.CLIENT_INVALID_PARAM, e);\n         }\n     }\n+\n+    /**\n+     * Destroy Config Instance's Resources.\n+     *\n+     * @param namingService\n+     * @throws NacosException\n+     */\n+    public static void destroyNamingService(NamingService namingService) throws NacosException{\n+        try {\n+            namingService.shutDown();\n+            namingService = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0320e5851c4bb704dcf9f1e3910db8084012c57d"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMzOTkwNA==", "bodyText": "As above.", "url": "https://github.com/alibaba/nacos/pull/2927#discussion_r434339904", "createdAt": "2020-06-03T06:40:20Z", "author": {"login": "zongtanghu"}, "path": "api/src/main/java/com/alibaba/nacos/api/naming/NamingFactory.java", "diffHunk": "@@ -48,4 +49,19 @@ public static NamingService createNamingService(Properties properties) throws Na\n             throw new NacosException(NacosException.CLIENT_INVALID_PARAM, e);\n         }\n     }\n+\n+    /**\n+     * Destroy Config Instance's Resources.\n+     *\n+     * @param namingService\n+     * @throws NacosException\n+     */\n+    public static void destroyNamingService(NamingService namingService) throws NacosException{\n+        try {\n+            namingService.shutDown();\n+            namingService = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMyOTYwOQ=="}, "originalCommit": {"oid": "0320e5851c4bb704dcf9f1e3910db8084012c57d"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNTQ4MDQ4OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/com/alibaba/nacos/client/config/http/ServerHttpAgent.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNjoxODoyNFrOGeNfaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNzowNToyOVrOGeOr5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMzMTQ5Nw==", "bodyText": "When using member variables normally, do not need to add this, otherwise the code looks very redundant.\nthis can be used uniformly in the set method and constructor.", "url": "https://github.com/alibaba/nacos/pull/2927#discussion_r434331497", "createdAt": "2020-06-03T06:18:24Z", "author": {"login": "KomachiSion"}, "path": "client/src/main/java/com/alibaba/nacos/client/config/http/ServerHttpAgent.java", "diffHunk": "@@ -465,12 +480,12 @@ public String getCode() {\n         @Override\n         public String toString() {\n             return \"STSCredential{\" +\n-                \"accessKeyId='\" + accessKeyId + '\\'' +\n-                \", accessKeySecret='\" + accessKeySecret + '\\'' +\n-                \", expiration=\" + expiration +\n-                \", securityToken='\" + securityToken + '\\'' +\n-                \", lastUpdated=\" + lastUpdated +\n-                \", code='\" + code + '\\'' +\n+                \"accessKeyId='\" + this.accessKeyId + '\\'' +\n+                \", accessKeySecret='\" + this.accessKeySecret + '\\'' +\n+                \", expiration=\" + this.expiration +\n+                \", securityToken='\" + this.securityToken + '\\'' +\n+                \", lastUpdated=\" + this.lastUpdated +\n+                \", code='\" + this.code + '\\'' +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0320e5851c4bb704dcf9f1e3910db8084012c57d"}, "originalPosition": 326}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM0MDQzOQ==", "bodyText": "\"this\" keywords aims to keep strong unified coding style.", "url": "https://github.com/alibaba/nacos/pull/2927#discussion_r434340439", "createdAt": "2020-06-03T06:41:26Z", "author": {"login": "zongtanghu"}, "path": "client/src/main/java/com/alibaba/nacos/client/config/http/ServerHttpAgent.java", "diffHunk": "@@ -465,12 +480,12 @@ public String getCode() {\n         @Override\n         public String toString() {\n             return \"STSCredential{\" +\n-                \"accessKeyId='\" + accessKeyId + '\\'' +\n-                \", accessKeySecret='\" + accessKeySecret + '\\'' +\n-                \", expiration=\" + expiration +\n-                \", securityToken='\" + securityToken + '\\'' +\n-                \", lastUpdated=\" + lastUpdated +\n-                \", code='\" + code + '\\'' +\n+                \"accessKeyId='\" + this.accessKeyId + '\\'' +\n+                \", accessKeySecret='\" + this.accessKeySecret + '\\'' +\n+                \", expiration=\" + this.expiration +\n+                \", securityToken='\" + this.securityToken + '\\'' +\n+                \", lastUpdated=\" + this.lastUpdated +\n+                \", code='\" + this.code + '\\'' +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMzMTQ5Nw=="}, "originalCommit": {"oid": "0320e5851c4bb704dcf9f1e3910db8084012c57d"}, "originalPosition": 326}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDM1MTA3OQ==", "bodyText": "I know that, I mean it's enough for keep uniformly in constructor and set method.", "url": "https://github.com/alibaba/nacos/pull/2927#discussion_r434351079", "createdAt": "2020-06-03T07:05:29Z", "author": {"login": "KomachiSion"}, "path": "client/src/main/java/com/alibaba/nacos/client/config/http/ServerHttpAgent.java", "diffHunk": "@@ -465,12 +480,12 @@ public String getCode() {\n         @Override\n         public String toString() {\n             return \"STSCredential{\" +\n-                \"accessKeyId='\" + accessKeyId + '\\'' +\n-                \", accessKeySecret='\" + accessKeySecret + '\\'' +\n-                \", expiration=\" + expiration +\n-                \", securityToken='\" + securityToken + '\\'' +\n-                \", lastUpdated=\" + lastUpdated +\n-                \", code='\" + code + '\\'' +\n+                \"accessKeyId='\" + this.accessKeyId + '\\'' +\n+                \", accessKeySecret='\" + this.accessKeySecret + '\\'' +\n+                \", expiration=\" + this.expiration +\n+                \", securityToken='\" + this.securityToken + '\\'' +\n+                \", lastUpdated=\" + this.lastUpdated +\n+                \", code='\" + this.code + '\\'' +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMzMTQ5Nw=="}, "originalCommit": {"oid": "0320e5851c4bb704dcf9f1e3910db8084012c57d"}, "originalPosition": 326}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwNjg4NDEzOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/alibaba/nacos/api/naming/NamingFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzoxNzoxNlrOGebVsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMzoyNzo0M1rOGebwzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU1ODM4NA==", "bodyText": "Why is ConfigService in namingFactory?", "url": "https://github.com/alibaba/nacos/pull/2927#discussion_r434558384", "createdAt": "2020-06-03T13:17:16Z", "author": {"login": "KomachiSion"}, "path": "api/src/main/java/com/alibaba/nacos/api/naming/NamingFactory.java", "diffHunk": "@@ -18,6 +18,7 @@\n import java.lang.reflect.Constructor;\n import java.util.Properties;\n \n+import com.alibaba.nacos.api.config.ConfigService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15fad5d98abf6421231a7d5c997da8c35bb73a3b"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU2NTMyNw==", "bodyText": "Okay, I will remove this unused import, thanks.", "url": "https://github.com/alibaba/nacos/pull/2927#discussion_r434565327", "createdAt": "2020-06-03T13:27:43Z", "author": {"login": "zongtanghu"}, "path": "api/src/main/java/com/alibaba/nacos/api/naming/NamingFactory.java", "diffHunk": "@@ -18,6 +18,7 @@\n import java.lang.reflect.Constructor;\n import java.util.Properties;\n \n+import com.alibaba.nacos.api.config.ConfigService;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU1ODM4NA=="}, "originalCommit": {"oid": "15fad5d98abf6421231a7d5c997da8c35bb73a3b"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyMzIzMDQ4OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/com/alibaba/nacos/client/naming/core/HostReactor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNDozNjoxN1rOGg4crg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwNDozNjoxN1rOGg4crg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEzMjQ2Mg==", "bodyText": "don't import *", "url": "https://github.com/alibaba/nacos/pull/2927#discussion_r437132462", "createdAt": "2020-06-09T04:36:17Z", "author": {"login": "chuntaojun"}, "path": "client/src/main/java/com/alibaba/nacos/client/naming/core/HostReactor.java", "diffHunk": "@@ -23,8 +23,10 @@\n import com.alibaba.nacos.client.naming.cache.DiskCache;\n import com.alibaba.nacos.client.naming.net.NamingProxy;\n import com.alibaba.nacos.client.naming.utils.UtilAndComs;\n+import com.alibaba.nacos.common.lifecycle.Closeable;\n import com.alibaba.nacos.common.utils.JacksonUtils;\n \n+import com.alibaba.nacos.common.utils.ThreadUtils;\n import org.apache.commons.lang3.StringUtils;\n \n import java.util.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8a2921e2cf2c153c3bdd6bbaeba16e8f087aed47"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyODk5NjE4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/alibaba/nacos/api/exception/NacosException.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMTo0MTo1NVrOGhw9-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMTozODozNFrOGiLqJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA1ODQ5MQ==", "bodyText": "1\u3001\u589e\u52a0\u8fd9\u4e2a\u5f02\u5e38\u7684\u573a\u666f\u662f\uff1f\n2\u3001\u5982\u679c\u5fc5\u987b\u8981\u8fd9\u4e2a\u5f02\u5e38\uff0csdk\u4fa7\u7684\u5f02\u5e38\u662f\u8d1f\u6570\uff0c\u800c\u4e14\u9700\u8981\u53c2\u8003\u4e00\u4e0bhttp\u72b6\u6001\u7801\u7684\u8bed\u4e49", "url": "https://github.com/alibaba/nacos/pull/2927#discussion_r438058491", "createdAt": "2020-06-10T11:41:55Z", "author": {"login": "yanlinly"}, "path": "api/src/main/java/com/alibaba/nacos/api/exception/NacosException.java", "diffHunk": "@@ -146,4 +146,9 @@ public String toString() {\n \n \tpublic static final int RESOURCE_NOT_FOUND = -404;\n \n+    /**\n+     * resource instance destroy failed.\n+     */\n+\tpublic static final int RESOURCE_DESTROY_FAILED = 410;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f7fb0f65a51cf959017ee2140ae5a62c8b5cdd4"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5NTc4Mw==", "bodyText": "Okay, \u6211\u5220\u9664\u5148\uff0c\u4e4b\u524d\u6f0f\u5220\u9664\u4e86\u3002", "url": "https://github.com/alibaba/nacos/pull/2927#discussion_r438495783", "createdAt": "2020-06-11T01:38:34Z", "author": {"login": "zongtanghu"}, "path": "api/src/main/java/com/alibaba/nacos/api/exception/NacosException.java", "diffHunk": "@@ -146,4 +146,9 @@ public String toString() {\n \n \tpublic static final int RESOURCE_NOT_FOUND = -404;\n \n+    /**\n+     * resource instance destroy failed.\n+     */\n+\tpublic static final int RESOURCE_DESTROY_FAILED = 410;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA1ODQ5MQ=="}, "originalCommit": {"oid": "8f7fb0f65a51cf959017ee2140ae5a62c8b5cdd4"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTAxNzQ0OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/com/alibaba/nacos/client/config/http/HttpAgent.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMTo0OToxMVrOGhxLOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMTozODoxMVrOGiLp1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA2MTg4MA==", "bodyText": "\u8fd9\u4e2a\u5730\u65b9\u4e0d\u8981\u6539\u4e86\uff0c\u8fd9\u5757\u4e0d\u662f\u7b80\u5355\u7684\u83b7\u53d6\u670d\u52a1\u5217\u8868\n1\u3001HttpAgent\u5c4f\u853d\u4e86\u540e\u9762\u670d\u52a1\u7684\u591a\u4e2a\u8282\u70b9\n2\u3001\u7ef4\u62a4\u591a\u4e2a\u8282\u70b9\u5217\u8868\uff0c\u52a8\u6001\u5237\u65b0\u80fd\u529b\n3\u3001\u7ed9\u51fa\u53ef\u7528ip\u548c\u8bf7\u6c42ip\u6362ip\u903b\u8f91\u3002\n\u8fd9\u4e2a\u662f\u4e00\u4e2a\u4e0eserver\u5efa\u8054\u7684\u4e00\u4e2aagent\uff0c\u542f\u52a8\u5176\u5b9e\u662f\u505a\u5f88\u591a\u4e8b\u60c5\u7684\u3002", "url": "https://github.com/alibaba/nacos/pull/2927#discussion_r438061880", "createdAt": "2020-06-10T11:49:11Z", "author": {"login": "yanlinly"}, "path": "client/src/main/java/com/alibaba/nacos/client/config/http/HttpAgent.java", "diffHunk": "@@ -27,13 +28,14 @@\n  *\n  * @author Nacos\n  */\n-public interface HttpAgent {\n+public interface HttpAgent extends Closeable {\n+\n     /**\n      * start to get nacos ip list\n      * @return Nothing.\n      * @throws NacosException on get ip list error.\n      */\n-    void start() throws NacosException;\n+    void fetchServerIpList() throws NacosException;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f7fb0f65a51cf959017ee2140ae5a62c8b5cdd4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5NTcwMA==", "bodyText": "\u597d\u7684\uff0c\u8fd9\u5757\u4f1a\u8fd8\u539f\u56de\u5230\u4e4b\u524d\u7684\u65b9\u6cd5\u540d\u79f0\uff0c\u5728\u4e0b\u4e00\u4e2acommit", "url": "https://github.com/alibaba/nacos/pull/2927#discussion_r438495700", "createdAt": "2020-06-11T01:38:11Z", "author": {"login": "zongtanghu"}, "path": "client/src/main/java/com/alibaba/nacos/client/config/http/HttpAgent.java", "diffHunk": "@@ -27,13 +28,14 @@\n  *\n  * @author Nacos\n  */\n-public interface HttpAgent {\n+public interface HttpAgent extends Closeable {\n+\n     /**\n      * start to get nacos ip list\n      * @return Nothing.\n      * @throws NacosException on get ip list error.\n      */\n-    void start() throws NacosException;\n+    void fetchServerIpList() throws NacosException;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA2MTg4MA=="}, "originalCommit": {"oid": "8f7fb0f65a51cf959017ee2140ae5a62c8b5cdd4"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTA0NDY0OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/com/alibaba/nacos/client/config/impl/ClientWorker.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMTo1NzozN1rOGhxbxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMToyMzozMFrOGiLb4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA2NjExNg==", "bodyText": "ConvertUtils \u8fd9\u5757\u4e3a\u4ec0\u4e48\u8981\u6539\u5462", "url": "https://github.com/alibaba/nacos/pull/2927#discussion_r438066116", "createdAt": "2020-06-10T11:57:37Z", "author": {"login": "yanlinly"}, "path": "client/src/main/java/com/alibaba/nacos/client/config/impl/ClientWorker.java", "diffHunk": "@@ -482,12 +499,21 @@ public void run() {\n \n     private void init(Properties properties) {\n \n-        timeout = Math.max(NumberUtils.toInt(properties.getProperty(PropertyKeyConst.CONFIG_LONG_POLL_TIMEOUT),\n+        this.timeout = Math.max(ConvertUtils.toInt(properties.getProperty(PropertyKeyConst.CONFIG_LONG_POLL_TIMEOUT),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f7fb0f65a51cf959017ee2140ae5a62c8b5cdd4"}, "originalPosition": 178}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5MjEzMA==", "bodyText": "\u518d\u4e0b\u4e00\u6b21\u63d0\u4ea4\u4e2d\u4fee\u6539\u56de\u539f\u6765\u7684NumberUtils", "url": "https://github.com/alibaba/nacos/pull/2927#discussion_r438492130", "createdAt": "2020-06-11T01:23:30Z", "author": {"login": "zongtanghu"}, "path": "client/src/main/java/com/alibaba/nacos/client/config/impl/ClientWorker.java", "diffHunk": "@@ -482,12 +499,21 @@ public void run() {\n \n     private void init(Properties properties) {\n \n-        timeout = Math.max(NumberUtils.toInt(properties.getProperty(PropertyKeyConst.CONFIG_LONG_POLL_TIMEOUT),\n+        this.timeout = Math.max(ConvertUtils.toInt(properties.getProperty(PropertyKeyConst.CONFIG_LONG_POLL_TIMEOUT),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA2NjExNg=="}, "originalCommit": {"oid": "8f7fb0f65a51cf959017ee2140ae5a62c8b5cdd4"}, "originalPosition": 178}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcyOTA3MDgwOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/alibaba/nacos/common/lifecycle/LifeCycle.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxMjowNjowNlrOGhxsJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMToyNjo1NVrOGiLfUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA3MDMxMA==", "bodyText": "\u76ee\u524d\u770bLifeCycle \u8fd9\u4e2a\u62bd\u8c61\u5bf9\u6574\u4f53\u751f\u547d\u5468\u671f\u7ba1\u7406\u5e2e\u52a9\u4e0d\u5927\uff0c\u53cd\u800c\u4f1a\u589e\u52a0\u4ee3\u7801\u7406\u89e3\u6210\u672c\uff0c\u5efa\u8bae\u8fd9\u5757\u4ee3\u7801\u5148\u4e0d\u8981\u5408\u5165\u4e86\u3002", "url": "https://github.com/alibaba/nacos/pull/2927#discussion_r438070310", "createdAt": "2020-06-10T12:06:06Z", "author": {"login": "yanlinly"}, "path": "common/src/main/java/com/alibaba/nacos/common/lifecycle/LifeCycle.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.nacos.common.lifecycle;\n+\n+import com.alibaba.nacos.api.exception.NacosException;\n+\n+/**\n+ *\n+ * The lifecycle interface for generic service. Classes are need to implement\n+ * this interface have a defined life cycle defined by the methods of this interface.\n+ *\n+ * @author zongtanghu\n+ */\n+public interface LifeCycle {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f7fb0f65a51cf959017ee2140ae5a62c8b5cdd4"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODQ5MzAwOQ==", "bodyText": "\u5728\u4e0b\u4e00\u4e2a\u63d0\u4ea4\u4e2d\uff0c\u5c06\u53bb\u6389Lifecycle\u548cResourceLifeCycleManager", "url": "https://github.com/alibaba/nacos/pull/2927#discussion_r438493009", "createdAt": "2020-06-11T01:26:55Z", "author": {"login": "zongtanghu"}, "path": "common/src/main/java/com/alibaba/nacos/common/lifecycle/LifeCycle.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.nacos.common.lifecycle;\n+\n+import com.alibaba.nacos.api.exception.NacosException;\n+\n+/**\n+ *\n+ * The lifecycle interface for generic service. Classes are need to implement\n+ * this interface have a defined life cycle defined by the methods of this interface.\n+ *\n+ * @author zongtanghu\n+ */\n+public interface LifeCycle {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODA3MDMxMA=="}, "originalCommit": {"oid": "8f7fb0f65a51cf959017ee2140ae5a62c8b5cdd4"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTg2NTI4OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/com/alibaba/nacos/client/config/impl/ServerListManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMzo0Mzo0OFrOGiNf1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMzo0NjoxOFrOGiNiHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUyNTkxMQ==", "bodyText": "\u5efa\u8bae\u505a\u4e00\u4e2a\u79c1\u6709\u7c7b\u521d\u59cb\u5316\uff0c\u8fd9\u7ebf\u7a0b\u8ddf\u8fd9\u4e2a\u7c7b\u4e00\u8d77\u5b58\u5728\u7684\u3002  \u76ee\u524d\u8fd9\u4e2a\u7c7b\u521d\u59cb\u5316\u53e3\u5b50\u6bd4\u8f83\u591a\uff0c\u5230\u5904\u52a0\u4e0d\u592a\u4f18\u96c5", "url": "https://github.com/alibaba/nacos/pull/2927#discussion_r438525911", "createdAt": "2020-06-11T03:43:48Z", "author": {"login": "yanlinly"}, "path": "client/src/main/java/com/alibaba/nacos/client/config/impl/ServerListManager.java", "diffHunk": "@@ -200,14 +217,27 @@ public String call() {\n         if (Boolean.parseBoolean(isUseEndpointRuleParsing)) {\n             String endpointUrl = ParamUtil.parsingEndpointRule(endpointTmp);\n             if (StringUtils.isNotBlank(endpointUrl)) {\n-                serverAddrsStr = \"\";\n+                this.serverAddrsStr = \"\";\n             }\n             return endpointUrl;\n         }\n \n         return StringUtils.isNotBlank(endpointTmp) ? endpointTmp : \"\";\n     }\n \n+    private void initExecutor() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b873797ca07b81220c4f4baa021353353a945a9"}, "originalPosition": 236}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUyNjQ5Mg==", "bodyText": "agree", "url": "https://github.com/alibaba/nacos/pull/2927#discussion_r438526492", "createdAt": "2020-06-11T03:46:18Z", "author": {"login": "chuntaojun"}, "path": "client/src/main/java/com/alibaba/nacos/client/config/impl/ServerListManager.java", "diffHunk": "@@ -200,14 +217,27 @@ public String call() {\n         if (Boolean.parseBoolean(isUseEndpointRuleParsing)) {\n             String endpointUrl = ParamUtil.parsingEndpointRule(endpointTmp);\n             if (StringUtils.isNotBlank(endpointUrl)) {\n-                serverAddrsStr = \"\";\n+                this.serverAddrsStr = \"\";\n             }\n             return endpointUrl;\n         }\n \n         return StringUtils.isNotBlank(endpointTmp) ? endpointTmp : \"\";\n     }\n \n+    private void initExecutor() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUyNTkxMQ=="}, "originalCommit": {"oid": "9b873797ca07b81220c4f4baa021353353a945a9"}, "originalPosition": 236}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMTg3MDIzOnYy", "diffSide": "RIGHT", "path": "client/src/main/java/com/alibaba/nacos/client/naming/backups/FailoverReactor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwMzo0NzowNlrOGiNixQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNDoxOToxNlrOGiN_LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUyNjY2MQ==", "bodyText": "\u8fd9\u5757\u5efa\u8bae\u4fdd\u6301\u8001\u65b9\u5f0f\uff0c\u56e0\u4e3a\u8fd9\u4e2a\u6bcf\u4e2a\u7c7b\u79c1\u6709\u521d\u59cb\u5316\u662f\u8ddf\u5b9e\u4f8b\u4fdd\u6301\u4e00\u81f4\u7684\u3002 \u76f8\u5bf9\u7b80\u5355\u4e00\u4e9b", "url": "https://github.com/alibaba/nacos/pull/2927#discussion_r438526661", "createdAt": "2020-06-11T03:47:06Z", "author": {"login": "yanlinly"}, "path": "client/src/main/java/com/alibaba/nacos/client/naming/backups/FailoverReactor.java", "diffHunk": "@@ -37,29 +40,31 @@\n /**\n  * @author nkorange\n  */\n-public class FailoverReactor {\n+public class FailoverReactor implements Closeable {\n \n     private String failoverDir;\n \n     private HostReactor hostReactor;\n \n+    private ScheduledExecutorService executorService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9b873797ca07b81220c4f4baa021353353a945a9"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUzMzkzMg==", "bodyText": "Okay\uff0c\u6211\u518d\u8c03\u6574\u4e0b\u4ee3\u7801", "url": "https://github.com/alibaba/nacos/pull/2927#discussion_r438533932", "createdAt": "2020-06-11T04:19:16Z", "author": {"login": "zongtanghu"}, "path": "client/src/main/java/com/alibaba/nacos/client/naming/backups/FailoverReactor.java", "diffHunk": "@@ -37,29 +40,31 @@\n /**\n  * @author nkorange\n  */\n-public class FailoverReactor {\n+public class FailoverReactor implements Closeable {\n \n     private String failoverDir;\n \n     private HostReactor hostReactor;\n \n+    private ScheduledExecutorService executorService;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODUyNjY2MQ=="}, "originalCommit": {"oid": "9b873797ca07b81220c4f4baa021353353a945a9"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4487, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}