{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3MzU1ODM5", "number": 4334, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMToxMDowMlrOE9LbDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMToxMDowMlrOE9LbDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTg1NzQxOnYy", "diffSide": "RIGHT", "path": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/RowMapperManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMToxMDowMlrOH5udKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMToxMDowMlrOH5udKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI5MjAwOA==", "bodyText": "\u8fd9\u91cc\u4e0d\u8981\u8f6c\u5927\u5c0f\u5199\uff0c\u62ff\u5230\u4ec0\u4e48\u5c31\u662f\u4ec0\u4e48", "url": "https://github.com/alibaba/nacos/pull/4334#discussion_r530292008", "createdAt": "2020-11-25T11:10:02Z", "author": {"login": "chuntaojun"}, "path": "config/src/main/java/com/alibaba/nacos/config/server/service/repository/RowMapperManager.java", "diffHunk": "@@ -161,12 +165,30 @@\n         // PERMISSION_ROW_MAPPER\n         \n         mapperMap.put(PERMISSION_ROW_MAPPER.getClass().getCanonicalName(), PERMISSION_ROW_MAPPER);\n+        \n+        // MAP_ROW_MAPPER\n+        \n+        mapperMap.put(MAP_ROW_MAPPER.getClass().getCanonicalName(), MAP_ROW_MAPPER);\n     }\n     \n     public static <D> RowMapper<D> getRowMapper(String classFullName) {\n         return (RowMapper<D>) mapperMap.get(classFullName);\n     }\n     \n+    public static final class MapRowMapper implements RowMapper<Map<String, Object>> {\n+    \n+        @Override\n+        public Map<String, Object> mapRow(ResultSet resultSet, int rowNum) throws SQLException {\n+            ResultSetMetaData metaData = resultSet.getMetaData();\n+            int columnCount = metaData.getColumnCount();\n+            Map<String, Object> map = new LinkedHashMap<>(columnCount);\n+            for (int i = 1; i <= columnCount; i++) {\n+                map.put(metaData.getColumnLabel(i).toLowerCase(), resultSet.getObject(i));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c0c8d283e2c0617fd2277cf7651a8f0a1027e64b"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4272, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}