{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1MTY5NDk3", "number": 3084, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzoyNDo0NlrOEF75Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNTozODozMFrOEGMzmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjU5NjgzOnYy", "diffSide": "RIGHT", "path": "config/src/main/java/com/alibaba/nacos/config/server/service/ConfigSubService.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzoyNDo0NlrOGkbHzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzo1MToxMFrOGkcVXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg0NjI4Nw==", "bodyText": "\u4f7f\u7528ClassUtils\u91cc\u9762\u7684\u5de5\u5177\u7c7b\u5904\u7406", "url": "https://github.com/alibaba/nacos/pull/3084#discussion_r440846287", "createdAt": "2020-06-16T13:24:46Z", "author": {"login": "chuntaojun"}, "path": "config/src/main/java/com/alibaba/nacos/config/server/service/ConfigSubService.java", "diffHunk": "@@ -54,16 +57,10 @@\n     public ConfigSubService(ServerMemberManager memberManager) {\n         this.memberManager = memberManager;\n \n-        scheduler = Executors.newScheduledThreadPool(\n-            ThreadUtils.getSuitableThreadCount(), new ThreadFactory() {\n-                @Override\n-                public Thread newThread(Runnable r) {\n-                    Thread t = new Thread(r);\n-                    t.setDaemon(true);\n-                    t.setName(\"com.alibaba.nacos.ConfigSubService\");\n-                    return t;\n-                }\n-            });\n+        scheduler = ExecutorFactory.newScheduledExecutorService(\n+                Config.class.getCanonicalName(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3898974d0f1d74238764b0302ef55b7aa64f83ae"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg1NzkxMg==", "bodyText": "\u5176\u4ed6\u7c7b\u4f3c\u7684\u5730\u65b9\u540c\u4e0a\u5904\u7406", "url": "https://github.com/alibaba/nacos/pull/3084#discussion_r440857912", "createdAt": "2020-06-16T13:40:26Z", "author": {"login": "chuntaojun"}, "path": "config/src/main/java/com/alibaba/nacos/config/server/service/ConfigSubService.java", "diffHunk": "@@ -54,16 +57,10 @@\n     public ConfigSubService(ServerMemberManager memberManager) {\n         this.memberManager = memberManager;\n \n-        scheduler = Executors.newScheduledThreadPool(\n-            ThreadUtils.getSuitableThreadCount(), new ThreadFactory() {\n-                @Override\n-                public Thread newThread(Runnable r) {\n-                    Thread t = new Thread(r);\n-                    t.setDaemon(true);\n-                    t.setName(\"com.alibaba.nacos.ConfigSubService\");\n-                    return t;\n-                }\n-            });\n+        scheduler = ExecutorFactory.newScheduledExecutorService(\n+                Config.class.getCanonicalName(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg0NjI4Nw=="}, "originalCommit": {"oid": "3898974d0f1d74238764b0302ef55b7aa64f83ae"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg2NjE0Mg==", "bodyText": "ok \u6211\u6539\u4e0b", "url": "https://github.com/alibaba/nacos/pull/3084#discussion_r440866142", "createdAt": "2020-06-16T13:51:10Z", "author": {"login": "wangweizZZ"}, "path": "config/src/main/java/com/alibaba/nacos/config/server/service/ConfigSubService.java", "diffHunk": "@@ -54,16 +57,10 @@\n     public ConfigSubService(ServerMemberManager memberManager) {\n         this.memberManager = memberManager;\n \n-        scheduler = Executors.newScheduledThreadPool(\n-            ThreadUtils.getSuitableThreadCount(), new ThreadFactory() {\n-                @Override\n-                public Thread newThread(Runnable r) {\n-                    Thread t = new Thread(r);\n-                    t.setDaemon(true);\n-                    t.setName(\"com.alibaba.nacos.ConfigSubService\");\n-                    return t;\n-                }\n-            });\n+        scheduler = ExecutorFactory.newScheduledExecutorService(\n+                Config.class.getCanonicalName(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg0NjI4Nw=="}, "originalCommit": {"oid": "3898974d0f1d74238764b0302ef55b7aa64f83ae"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTMzNTE5OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/alibaba/nacos/common/executor/ExecutorFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNToyMToxOVrOGk1_2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNTo1NTo0NVrOGk2omw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI4NjYxOA==", "bodyText": "return directly, do not use tmp variable.\nlike return Executors.newFixedThreadPool(1);\nfollow methods are the same.", "url": "https://github.com/alibaba/nacos/pull/3084#discussion_r441286618", "createdAt": "2020-06-17T05:21:19Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/executor/ExecutorFactory.java", "diffHunk": "@@ -27,70 +27,169 @@\n /**\n  * Unified thread pool creation factory, and actively create thread\n  * pool resources by ThreadPoolManager for unified life cycle management\n+ * {@link ExecutorFactory.Managed}\n+ *\n+ * Unified thread pool creation factory without life cycle management\n+ * {@link ExecutorFactory}\n  *\n  * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n  */\n @SuppressWarnings(\"PMD.ThreadPoolCreationRule\")\n public final class ExecutorFactory {\n \n-    private static final ThreadPoolManager THREAD_POOL_MANAGER = ThreadPoolManager.getInstance();\n+    public static ExecutorService newSingleExecutorService() {\n+        ExecutorService executorService = Executors.newFixedThreadPool(1);\n+        return executorService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "315cf811bb2571088fa23b08ce5cac630c305c28"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5NzA1MQ==", "bodyText": "ok", "url": "https://github.com/alibaba/nacos/pull/3084#discussion_r441297051", "createdAt": "2020-06-17T05:55:45Z", "author": {"login": "wangweizZZ"}, "path": "common/src/main/java/com/alibaba/nacos/common/executor/ExecutorFactory.java", "diffHunk": "@@ -27,70 +27,169 @@\n /**\n  * Unified thread pool creation factory, and actively create thread\n  * pool resources by ThreadPoolManager for unified life cycle management\n+ * {@link ExecutorFactory.Managed}\n+ *\n+ * Unified thread pool creation factory without life cycle management\n+ * {@link ExecutorFactory}\n  *\n  * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n  */\n @SuppressWarnings(\"PMD.ThreadPoolCreationRule\")\n public final class ExecutorFactory {\n \n-    private static final ThreadPoolManager THREAD_POOL_MANAGER = ThreadPoolManager.getInstance();\n+    public static ExecutorService newSingleExecutorService() {\n+        ExecutorService executorService = Executors.newFixedThreadPool(1);\n+        return executorService;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI4NjYxOA=="}, "originalCommit": {"oid": "315cf811bb2571088fa23b08ce5cac630c305c28"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTM0MDE4OnYy", "diffSide": "LEFT", "path": "common/src/main/java/com/alibaba/nacos/common/executor/ExecutorFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNToyMzo1MlrOGk2Cvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNTo1OTo0MFrOGk2tpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI4NzM1OQ==", "bodyText": "don't change the old methods.\nremove them after change to use new mehtod will be ok.", "url": "https://github.com/alibaba/nacos/pull/3084#discussion_r441287359", "createdAt": "2020-06-17T05:23:52Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/executor/ExecutorFactory.java", "diffHunk": "@@ -27,70 +27,169 @@\n /**\n  * Unified thread pool creation factory, and actively create thread\n  * pool resources by ThreadPoolManager for unified life cycle management\n+ * {@link ExecutorFactory.Managed}\n+ *\n+ * Unified thread pool creation factory without life cycle management\n+ * {@link ExecutorFactory}\n  *\n  * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n  */\n @SuppressWarnings(\"PMD.ThreadPoolCreationRule\")\n public final class ExecutorFactory {\n \n-    private static final ThreadPoolManager THREAD_POOL_MANAGER = ThreadPoolManager.getInstance();\n+    public static ExecutorService newSingleExecutorService() {\n+        ExecutorService executorService = Executors.newFixedThreadPool(1);\n+        return executorService;\n+    }\n+\n+    public static ExecutorService newSingleExecutorService(final ThreadFactory threadFactory) {\n+        ExecutorService executorService = Executors.newFixedThreadPool(1, threadFactory);\n+        return executorService;\n+    }\n \n-    public static final String DEFAULT_NAMESPACE = \"nacos\";\n+    public static ExecutorService newFixExecutorService(final int nThreads) {\n+        ExecutorService executorService = Executors.newFixedThreadPool(nThreads);\n+        return executorService;\n+    }\n \n+    public static ExecutorService newFixExecutorService(final int nThreads,\n+                                                        final ThreadFactory threadFactory) {\n+        ExecutorService executorService = Executors.newFixedThreadPool(nThreads, threadFactory);\n+        return executorService;\n+    }\n+\n+    public static ScheduledExecutorService newSingleScheduledExecutorService(final ThreadFactory threadFactory) {\n+        ScheduledExecutorService executorService = Executors.newScheduledThreadPool(1, threadFactory);\n+        return executorService;\n+    }\n+\n+    public static ScheduledExecutorService newScheduledExecutorService( final int nThreads,\n+                                                                        final ThreadFactory threadFactory) {\n+        ScheduledExecutorService executorService = Executors.newScheduledThreadPool(nThreads, threadFactory);\n+        return executorService;\n+    }\n+\n+    public static ThreadPoolExecutor newCustomerThreadExecutor(\n+        final int coreThreads,\n+        final int maxThreads,\n+        final long keepAliveTimeMs,\n+        final ThreadFactory threadFactory) {\n+        ThreadPoolExecutor executor = new ThreadPoolExecutor(coreThreads, maxThreads,\n+            keepAliveTimeMs, TimeUnit.MILLISECONDS,\n+            new LinkedBlockingQueue<Runnable>(),\n+            threadFactory);\n+        return executor;\n+    }\n+    //TODO remove Deprecated function after replace all module\n+    @Deprecated\n     public static ExecutorService newSingleExecutorService(final String group) {\n         ExecutorService executorService = Executors.newFixedThreadPool(1);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);\n         return executorService;\n     }\n-\n+    @Deprecated\n     public static ExecutorService newSingleExecutorService(final String group,\n-                                                           final ThreadFactory threadFactory) {\n+        final ThreadFactory threadFactory) {\n         ExecutorService executorService = Executors.newFixedThreadPool(1, threadFactory);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "315cf811bb2571088fa23b08ce5cac630c305c28"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5ODM0Mg==", "bodyText": "ok, i will rollback the old methods now,and remove them after replace all module", "url": "https://github.com/alibaba/nacos/pull/3084#discussion_r441298342", "createdAt": "2020-06-17T05:59:40Z", "author": {"login": "wangweizZZ"}, "path": "common/src/main/java/com/alibaba/nacos/common/executor/ExecutorFactory.java", "diffHunk": "@@ -27,70 +27,169 @@\n /**\n  * Unified thread pool creation factory, and actively create thread\n  * pool resources by ThreadPoolManager for unified life cycle management\n+ * {@link ExecutorFactory.Managed}\n+ *\n+ * Unified thread pool creation factory without life cycle management\n+ * {@link ExecutorFactory}\n  *\n  * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n  */\n @SuppressWarnings(\"PMD.ThreadPoolCreationRule\")\n public final class ExecutorFactory {\n \n-    private static final ThreadPoolManager THREAD_POOL_MANAGER = ThreadPoolManager.getInstance();\n+    public static ExecutorService newSingleExecutorService() {\n+        ExecutorService executorService = Executors.newFixedThreadPool(1);\n+        return executorService;\n+    }\n+\n+    public static ExecutorService newSingleExecutorService(final ThreadFactory threadFactory) {\n+        ExecutorService executorService = Executors.newFixedThreadPool(1, threadFactory);\n+        return executorService;\n+    }\n \n-    public static final String DEFAULT_NAMESPACE = \"nacos\";\n+    public static ExecutorService newFixExecutorService(final int nThreads) {\n+        ExecutorService executorService = Executors.newFixedThreadPool(nThreads);\n+        return executorService;\n+    }\n \n+    public static ExecutorService newFixExecutorService(final int nThreads,\n+                                                        final ThreadFactory threadFactory) {\n+        ExecutorService executorService = Executors.newFixedThreadPool(nThreads, threadFactory);\n+        return executorService;\n+    }\n+\n+    public static ScheduledExecutorService newSingleScheduledExecutorService(final ThreadFactory threadFactory) {\n+        ScheduledExecutorService executorService = Executors.newScheduledThreadPool(1, threadFactory);\n+        return executorService;\n+    }\n+\n+    public static ScheduledExecutorService newScheduledExecutorService( final int nThreads,\n+                                                                        final ThreadFactory threadFactory) {\n+        ScheduledExecutorService executorService = Executors.newScheduledThreadPool(nThreads, threadFactory);\n+        return executorService;\n+    }\n+\n+    public static ThreadPoolExecutor newCustomerThreadExecutor(\n+        final int coreThreads,\n+        final int maxThreads,\n+        final long keepAliveTimeMs,\n+        final ThreadFactory threadFactory) {\n+        ThreadPoolExecutor executor = new ThreadPoolExecutor(coreThreads, maxThreads,\n+            keepAliveTimeMs, TimeUnit.MILLISECONDS,\n+            new LinkedBlockingQueue<Runnable>(),\n+            threadFactory);\n+        return executor;\n+    }\n+    //TODO remove Deprecated function after replace all module\n+    @Deprecated\n     public static ExecutorService newSingleExecutorService(final String group) {\n         ExecutorService executorService = Executors.newFixedThreadPool(1);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);\n         return executorService;\n     }\n-\n+    @Deprecated\n     public static ExecutorService newSingleExecutorService(final String group,\n-                                                           final ThreadFactory threadFactory) {\n+        final ThreadFactory threadFactory) {\n         ExecutorService executorService = Executors.newFixedThreadPool(1, threadFactory);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI4NzM1OQ=="}, "originalCommit": {"oid": "315cf811bb2571088fa23b08ce5cac630c305c28"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTM1ODI0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/alibaba/nacos/core/file/WatchFileCenter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNTozNDozNVrOGk2OHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNjoxNTo0M1rOGk3Ddw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5MDI3MQ==", "bodyText": "If register to managed, whether should shutdown in here?", "url": "https://github.com/alibaba/nacos/pull/3084#discussion_r441290271", "createdAt": "2020-06-17T05:34:35Z", "author": {"login": "KomachiSion"}, "path": "core/src/main/java/com/alibaba/nacos/core/file/WatchFileCenter.java", "diffHunk": "@@ -176,7 +175,8 @@ void addSubscribe(final FileWatcher watcher) {\n \t\t}\n \n \t\tvoid shutdown() {\n-\t\t\twatch = false;\n+\t\t    watch = false;\n+            ThreadUtils.shutdownThreadPool(this.callBackExecutor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "315cf811bb2571088fa23b08ce5cac630c305c28"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMwMzkyNw==", "bodyText": "yes\u3002if register to managed", "url": "https://github.com/alibaba/nacos/pull/3084#discussion_r441303927", "createdAt": "2020-06-17T06:15:43Z", "author": {"login": "wangweizZZ"}, "path": "core/src/main/java/com/alibaba/nacos/core/file/WatchFileCenter.java", "diffHunk": "@@ -176,7 +175,8 @@ void addSubscribe(final FileWatcher watcher) {\n \t\t}\n \n \t\tvoid shutdown() {\n-\t\t\twatch = false;\n+\t\t    watch = false;\n+            ThreadUtils.shutdownThreadPool(this.callBackExecutor);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5MDI3MQ=="}, "originalCommit": {"oid": "315cf811bb2571088fa23b08ce5cac630c305c28"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTM1ODg0OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/alibaba/nacos/common/executor/ExecutorFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNTozNDo1M1rOGk2Ocg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNjowMToyNVrOGk2v9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5MDM1NA==", "bodyText": "\u4e0d\u7eb3\u5165\u81ea\u52a8\u7ba1\u7406\u7684\uff0c\u4e0d\u9700\u8981group\u53c2\u6570", "url": "https://github.com/alibaba/nacos/pull/3084#discussion_r441290354", "createdAt": "2020-06-17T05:34:53Z", "author": {"login": "chuntaojun"}, "path": "common/src/main/java/com/alibaba/nacos/common/executor/ExecutorFactory.java", "diffHunk": "@@ -27,70 +27,169 @@\n /**\n  * Unified thread pool creation factory, and actively create thread\n  * pool resources by ThreadPoolManager for unified life cycle management\n+ * {@link ExecutorFactory.Managed}\n+ *\n+ * Unified thread pool creation factory without life cycle management\n+ * {@link ExecutorFactory}\n  *\n  * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n  */\n @SuppressWarnings(\"PMD.ThreadPoolCreationRule\")\n public final class ExecutorFactory {\n \n-    private static final ThreadPoolManager THREAD_POOL_MANAGER = ThreadPoolManager.getInstance();\n+    public static ExecutorService newSingleExecutorService() {\n+        ExecutorService executorService = Executors.newFixedThreadPool(1);\n+        return executorService;\n+    }\n+\n+    public static ExecutorService newSingleExecutorService(final ThreadFactory threadFactory) {\n+        ExecutorService executorService = Executors.newFixedThreadPool(1, threadFactory);\n+        return executorService;\n+    }\n \n-    public static final String DEFAULT_NAMESPACE = \"nacos\";\n+    public static ExecutorService newFixExecutorService(final int nThreads) {\n+        ExecutorService executorService = Executors.newFixedThreadPool(nThreads);\n+        return executorService;\n+    }\n \n+    public static ExecutorService newFixExecutorService(final int nThreads,\n+                                                        final ThreadFactory threadFactory) {\n+        ExecutorService executorService = Executors.newFixedThreadPool(nThreads, threadFactory);\n+        return executorService;\n+    }\n+\n+    public static ScheduledExecutorService newSingleScheduledExecutorService(final ThreadFactory threadFactory) {\n+        ScheduledExecutorService executorService = Executors.newScheduledThreadPool(1, threadFactory);\n+        return executorService;\n+    }\n+\n+    public static ScheduledExecutorService newScheduledExecutorService( final int nThreads,\n+                                                                        final ThreadFactory threadFactory) {\n+        ScheduledExecutorService executorService = Executors.newScheduledThreadPool(nThreads, threadFactory);\n+        return executorService;\n+    }\n+\n+    public static ThreadPoolExecutor newCustomerThreadExecutor(\n+        final int coreThreads,\n+        final int maxThreads,\n+        final long keepAliveTimeMs,\n+        final ThreadFactory threadFactory) {\n+        ThreadPoolExecutor executor = new ThreadPoolExecutor(coreThreads, maxThreads,\n+            keepAliveTimeMs, TimeUnit.MILLISECONDS,\n+            new LinkedBlockingQueue<Runnable>(),\n+            threadFactory);\n+        return executor;\n+    }\n+    //TODO remove Deprecated function after replace all module\n+    @Deprecated\n     public static ExecutorService newSingleExecutorService(final String group) {\n         ExecutorService executorService = Executors.newFixedThreadPool(1);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);\n         return executorService;\n     }\n-\n+    @Deprecated\n     public static ExecutorService newSingleExecutorService(final String group,\n-                                                           final ThreadFactory threadFactory) {\n+        final ThreadFactory threadFactory) {\n         ExecutorService executorService = Executors.newFixedThreadPool(1, threadFactory);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);\n         return executorService;\n     }\n-\n+    @Deprecated\n     public static ExecutorService newFixExecutorService(final String group,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "315cf811bb2571088fa23b08ce5cac630c305c28"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5ODkzMg==", "bodyText": "\u55ef \u56e0\u4e3a\u8fd9\u4e2apr\u5f53\u524d\u53ea\u662f\u6539\u4e86\u90e8\u5206\u6a21\u5757\uff0c\u5176\u4ed6\u6a21\u5757\u672a\u4fee\u6539\u7684\u8fd8\u5728\u4f7f\u7528\u8fd9\u90e8\u5206group\u7684\uff0c\u76ee\u524d\u5148\u6807\u8bb0deprecated\uff0c\u6539\u5b8c\u6240\u6709\u6a21\u5757\u8fd9\u4e9b\u5e26group\u7684\u5c31\u53ef\u4ee5\u5220\u4e86", "url": "https://github.com/alibaba/nacos/pull/3084#discussion_r441298932", "createdAt": "2020-06-17T06:01:25Z", "author": {"login": "wangweizZZ"}, "path": "common/src/main/java/com/alibaba/nacos/common/executor/ExecutorFactory.java", "diffHunk": "@@ -27,70 +27,169 @@\n /**\n  * Unified thread pool creation factory, and actively create thread\n  * pool resources by ThreadPoolManager for unified life cycle management\n+ * {@link ExecutorFactory.Managed}\n+ *\n+ * Unified thread pool creation factory without life cycle management\n+ * {@link ExecutorFactory}\n  *\n  * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n  */\n @SuppressWarnings(\"PMD.ThreadPoolCreationRule\")\n public final class ExecutorFactory {\n \n-    private static final ThreadPoolManager THREAD_POOL_MANAGER = ThreadPoolManager.getInstance();\n+    public static ExecutorService newSingleExecutorService() {\n+        ExecutorService executorService = Executors.newFixedThreadPool(1);\n+        return executorService;\n+    }\n+\n+    public static ExecutorService newSingleExecutorService(final ThreadFactory threadFactory) {\n+        ExecutorService executorService = Executors.newFixedThreadPool(1, threadFactory);\n+        return executorService;\n+    }\n \n-    public static final String DEFAULT_NAMESPACE = \"nacos\";\n+    public static ExecutorService newFixExecutorService(final int nThreads) {\n+        ExecutorService executorService = Executors.newFixedThreadPool(nThreads);\n+        return executorService;\n+    }\n \n+    public static ExecutorService newFixExecutorService(final int nThreads,\n+                                                        final ThreadFactory threadFactory) {\n+        ExecutorService executorService = Executors.newFixedThreadPool(nThreads, threadFactory);\n+        return executorService;\n+    }\n+\n+    public static ScheduledExecutorService newSingleScheduledExecutorService(final ThreadFactory threadFactory) {\n+        ScheduledExecutorService executorService = Executors.newScheduledThreadPool(1, threadFactory);\n+        return executorService;\n+    }\n+\n+    public static ScheduledExecutorService newScheduledExecutorService( final int nThreads,\n+                                                                        final ThreadFactory threadFactory) {\n+        ScheduledExecutorService executorService = Executors.newScheduledThreadPool(nThreads, threadFactory);\n+        return executorService;\n+    }\n+\n+    public static ThreadPoolExecutor newCustomerThreadExecutor(\n+        final int coreThreads,\n+        final int maxThreads,\n+        final long keepAliveTimeMs,\n+        final ThreadFactory threadFactory) {\n+        ThreadPoolExecutor executor = new ThreadPoolExecutor(coreThreads, maxThreads,\n+            keepAliveTimeMs, TimeUnit.MILLISECONDS,\n+            new LinkedBlockingQueue<Runnable>(),\n+            threadFactory);\n+        return executor;\n+    }\n+    //TODO remove Deprecated function after replace all module\n+    @Deprecated\n     public static ExecutorService newSingleExecutorService(final String group) {\n         ExecutorService executorService = Executors.newFixedThreadPool(1);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);\n         return executorService;\n     }\n-\n+    @Deprecated\n     public static ExecutorService newSingleExecutorService(final String group,\n-                                                           final ThreadFactory threadFactory) {\n+        final ThreadFactory threadFactory) {\n         ExecutorService executorService = Executors.newFixedThreadPool(1, threadFactory);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);\n         return executorService;\n     }\n-\n+    @Deprecated\n     public static ExecutorService newFixExecutorService(final String group,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5MDM1NA=="}, "originalCommit": {"oid": "315cf811bb2571088fa23b08ce5cac630c305c28"}, "originalPosition": 77}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTM2MjUyOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/alibaba/nacos/common/executor/ExecutorFactory.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNTozNjo0NFrOGk2QsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwOTo1ODoyMFrOGk-srQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5MDkyOA==", "bodyText": "\u6216\u8bb8\u53ef\u4ee5\u4e0d\u9700\u8981\u8fd9\u4e2a\uff0c\u6709\u5e26group\u53c2\u6570\u7684\u5c31\u662f\u9700\u8981\u88ab\u81ea\u52a8\u7eb3\u5165\u7ba1\u7406\u7684\uff0c\u6ce8\u91ca\u8bf4\u660e\u5c31\u597d", "url": "https://github.com/alibaba/nacos/pull/3084#discussion_r441290928", "createdAt": "2020-06-17T05:36:44Z", "author": {"login": "chuntaojun"}, "path": "common/src/main/java/com/alibaba/nacos/common/executor/ExecutorFactory.java", "diffHunk": "@@ -27,70 +27,169 @@\n /**\n  * Unified thread pool creation factory, and actively create thread\n  * pool resources by ThreadPoolManager for unified life cycle management\n+ * {@link ExecutorFactory.Managed}\n+ *\n+ * Unified thread pool creation factory without life cycle management\n+ * {@link ExecutorFactory}\n  *\n  * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n  */\n @SuppressWarnings(\"PMD.ThreadPoolCreationRule\")\n public final class ExecutorFactory {\n \n-    private static final ThreadPoolManager THREAD_POOL_MANAGER = ThreadPoolManager.getInstance();\n+    public static ExecutorService newSingleExecutorService() {\n+        ExecutorService executorService = Executors.newFixedThreadPool(1);\n+        return executorService;\n+    }\n+\n+    public static ExecutorService newSingleExecutorService(final ThreadFactory threadFactory) {\n+        ExecutorService executorService = Executors.newFixedThreadPool(1, threadFactory);\n+        return executorService;\n+    }\n \n-    public static final String DEFAULT_NAMESPACE = \"nacos\";\n+    public static ExecutorService newFixExecutorService(final int nThreads) {\n+        ExecutorService executorService = Executors.newFixedThreadPool(nThreads);\n+        return executorService;\n+    }\n \n+    public static ExecutorService newFixExecutorService(final int nThreads,\n+                                                        final ThreadFactory threadFactory) {\n+        ExecutorService executorService = Executors.newFixedThreadPool(nThreads, threadFactory);\n+        return executorService;\n+    }\n+\n+    public static ScheduledExecutorService newSingleScheduledExecutorService(final ThreadFactory threadFactory) {\n+        ScheduledExecutorService executorService = Executors.newScheduledThreadPool(1, threadFactory);\n+        return executorService;\n+    }\n+\n+    public static ScheduledExecutorService newScheduledExecutorService( final int nThreads,\n+                                                                        final ThreadFactory threadFactory) {\n+        ScheduledExecutorService executorService = Executors.newScheduledThreadPool(nThreads, threadFactory);\n+        return executorService;\n+    }\n+\n+    public static ThreadPoolExecutor newCustomerThreadExecutor(\n+        final int coreThreads,\n+        final int maxThreads,\n+        final long keepAliveTimeMs,\n+        final ThreadFactory threadFactory) {\n+        ThreadPoolExecutor executor = new ThreadPoolExecutor(coreThreads, maxThreads,\n+            keepAliveTimeMs, TimeUnit.MILLISECONDS,\n+            new LinkedBlockingQueue<Runnable>(),\n+            threadFactory);\n+        return executor;\n+    }\n+    //TODO remove Deprecated function after replace all module\n+    @Deprecated\n     public static ExecutorService newSingleExecutorService(final String group) {\n         ExecutorService executorService = Executors.newFixedThreadPool(1);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);\n         return executorService;\n     }\n-\n+    @Deprecated\n     public static ExecutorService newSingleExecutorService(final String group,\n-                                                           final ThreadFactory threadFactory) {\n+        final ThreadFactory threadFactory) {\n         ExecutorService executorService = Executors.newFixedThreadPool(1, threadFactory);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);\n         return executorService;\n     }\n-\n+    @Deprecated\n     public static ExecutorService newFixExecutorService(final String group,\n-                                                        final int nThreads) {\n+        final int nThreads) {\n         ExecutorService executorService = Executors.newFixedThreadPool(nThreads);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);\n         return executorService;\n     }\n-\n+    @Deprecated\n     public static ExecutorService newFixExecutorService(final String group,\n-                                                        final int nThreads,\n-                                                        final ThreadFactory threadFactory) {\n+        final int nThreads,\n+        final ThreadFactory threadFactory) {\n         ExecutorService executorService = Executors.newFixedThreadPool(nThreads, threadFactory);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);\n         return executorService;\n     }\n-\n+    @Deprecated\n     public static ScheduledExecutorService newSingleScheduledExecutorService(final String group,\n-                                                                             final ThreadFactory threadFactory) {\n+        final ThreadFactory threadFactory) {\n         ScheduledExecutorService executorService = Executors.newScheduledThreadPool(1, threadFactory);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);\n         return executorService;\n     }\n-\n+    @Deprecated\n     public static ScheduledExecutorService newScheduledExecutorService(final String group,\n-                                                                       final int nThreads,\n-                                                                       final ThreadFactory threadFactory) {\n+        final int nThreads,\n+        final ThreadFactory threadFactory) {\n         ScheduledExecutorService executorService = Executors.newScheduledThreadPool(nThreads, threadFactory);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);\n         return executorService;\n     }\n-\n+    @Deprecated\n     public static ThreadPoolExecutor newCustomerThreadExecutor(final String group,\n+        final int coreThreads,\n+        final int maxThreads,\n+        final long keepAliveTimeMs,\n+        final ThreadFactory threadFactory) {\n+        ThreadPoolExecutor executor = new ThreadPoolExecutor(coreThreads, maxThreads,\n+            keepAliveTimeMs, TimeUnit.MILLISECONDS,\n+            new LinkedBlockingQueue<Runnable>(),\n+            threadFactory);\n+        return executor;\n+    }\n+\n+    public final static class Managed{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "315cf811bb2571088fa23b08ce5cac630c305c28"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMxMTg5NA==", "bodyText": "emmm. \u4e2a\u4eba\u89c9\u5f97\u66f4\u6e05\u6670\u4e00\u70b9\u3002\u8fd9\u4e2a\u53ef\u4ee5\u518d\u770b\u4e0b \u5927\u5bb6\u7684\u610f\u89c1", "url": "https://github.com/alibaba/nacos/pull/3084#discussion_r441311894", "createdAt": "2020-06-17T06:35:48Z", "author": {"login": "wangweizZZ"}, "path": "common/src/main/java/com/alibaba/nacos/common/executor/ExecutorFactory.java", "diffHunk": "@@ -27,70 +27,169 @@\n /**\n  * Unified thread pool creation factory, and actively create thread\n  * pool resources by ThreadPoolManager for unified life cycle management\n+ * {@link ExecutorFactory.Managed}\n+ *\n+ * Unified thread pool creation factory without life cycle management\n+ * {@link ExecutorFactory}\n  *\n  * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n  */\n @SuppressWarnings(\"PMD.ThreadPoolCreationRule\")\n public final class ExecutorFactory {\n \n-    private static final ThreadPoolManager THREAD_POOL_MANAGER = ThreadPoolManager.getInstance();\n+    public static ExecutorService newSingleExecutorService() {\n+        ExecutorService executorService = Executors.newFixedThreadPool(1);\n+        return executorService;\n+    }\n+\n+    public static ExecutorService newSingleExecutorService(final ThreadFactory threadFactory) {\n+        ExecutorService executorService = Executors.newFixedThreadPool(1, threadFactory);\n+        return executorService;\n+    }\n \n-    public static final String DEFAULT_NAMESPACE = \"nacos\";\n+    public static ExecutorService newFixExecutorService(final int nThreads) {\n+        ExecutorService executorService = Executors.newFixedThreadPool(nThreads);\n+        return executorService;\n+    }\n \n+    public static ExecutorService newFixExecutorService(final int nThreads,\n+                                                        final ThreadFactory threadFactory) {\n+        ExecutorService executorService = Executors.newFixedThreadPool(nThreads, threadFactory);\n+        return executorService;\n+    }\n+\n+    public static ScheduledExecutorService newSingleScheduledExecutorService(final ThreadFactory threadFactory) {\n+        ScheduledExecutorService executorService = Executors.newScheduledThreadPool(1, threadFactory);\n+        return executorService;\n+    }\n+\n+    public static ScheduledExecutorService newScheduledExecutorService( final int nThreads,\n+                                                                        final ThreadFactory threadFactory) {\n+        ScheduledExecutorService executorService = Executors.newScheduledThreadPool(nThreads, threadFactory);\n+        return executorService;\n+    }\n+\n+    public static ThreadPoolExecutor newCustomerThreadExecutor(\n+        final int coreThreads,\n+        final int maxThreads,\n+        final long keepAliveTimeMs,\n+        final ThreadFactory threadFactory) {\n+        ThreadPoolExecutor executor = new ThreadPoolExecutor(coreThreads, maxThreads,\n+            keepAliveTimeMs, TimeUnit.MILLISECONDS,\n+            new LinkedBlockingQueue<Runnable>(),\n+            threadFactory);\n+        return executor;\n+    }\n+    //TODO remove Deprecated function after replace all module\n+    @Deprecated\n     public static ExecutorService newSingleExecutorService(final String group) {\n         ExecutorService executorService = Executors.newFixedThreadPool(1);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);\n         return executorService;\n     }\n-\n+    @Deprecated\n     public static ExecutorService newSingleExecutorService(final String group,\n-                                                           final ThreadFactory threadFactory) {\n+        final ThreadFactory threadFactory) {\n         ExecutorService executorService = Executors.newFixedThreadPool(1, threadFactory);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);\n         return executorService;\n     }\n-\n+    @Deprecated\n     public static ExecutorService newFixExecutorService(final String group,\n-                                                        final int nThreads) {\n+        final int nThreads) {\n         ExecutorService executorService = Executors.newFixedThreadPool(nThreads);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);\n         return executorService;\n     }\n-\n+    @Deprecated\n     public static ExecutorService newFixExecutorService(final String group,\n-                                                        final int nThreads,\n-                                                        final ThreadFactory threadFactory) {\n+        final int nThreads,\n+        final ThreadFactory threadFactory) {\n         ExecutorService executorService = Executors.newFixedThreadPool(nThreads, threadFactory);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);\n         return executorService;\n     }\n-\n+    @Deprecated\n     public static ScheduledExecutorService newSingleScheduledExecutorService(final String group,\n-                                                                             final ThreadFactory threadFactory) {\n+        final ThreadFactory threadFactory) {\n         ScheduledExecutorService executorService = Executors.newScheduledThreadPool(1, threadFactory);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);\n         return executorService;\n     }\n-\n+    @Deprecated\n     public static ScheduledExecutorService newScheduledExecutorService(final String group,\n-                                                                       final int nThreads,\n-                                                                       final ThreadFactory threadFactory) {\n+        final int nThreads,\n+        final ThreadFactory threadFactory) {\n         ScheduledExecutorService executorService = Executors.newScheduledThreadPool(nThreads, threadFactory);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);\n         return executorService;\n     }\n-\n+    @Deprecated\n     public static ThreadPoolExecutor newCustomerThreadExecutor(final String group,\n+        final int coreThreads,\n+        final int maxThreads,\n+        final long keepAliveTimeMs,\n+        final ThreadFactory threadFactory) {\n+        ThreadPoolExecutor executor = new ThreadPoolExecutor(coreThreads, maxThreads,\n+            keepAliveTimeMs, TimeUnit.MILLISECONDS,\n+            new LinkedBlockingQueue<Runnable>(),\n+            threadFactory);\n+        return executor;\n+    }\n+\n+    public final static class Managed{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5MDkyOA=="}, "originalCommit": {"oid": "315cf811bb2571088fa23b08ce5cac630c305c28"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQyOTE2NQ==", "bodyText": "\u6211\u89c9\u5f97\u53ef\u4ee5\u7559\uff0c\u66f4\u5bb9\u6613\u8868\u8fbe\u8bed\u610f\uff0c\u4e4b\u540e\u53ef\u4ee5\u770b\u60c5\u51b5\u79fb\u52a8\u5230\u66f4\u5408\u7406\u7684\u4f4d\u7f6e\u3002", "url": "https://github.com/alibaba/nacos/pull/3084#discussion_r441429165", "createdAt": "2020-06-17T09:58:20Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/executor/ExecutorFactory.java", "diffHunk": "@@ -27,70 +27,169 @@\n /**\n  * Unified thread pool creation factory, and actively create thread\n  * pool resources by ThreadPoolManager for unified life cycle management\n+ * {@link ExecutorFactory.Managed}\n+ *\n+ * Unified thread pool creation factory without life cycle management\n+ * {@link ExecutorFactory}\n  *\n  * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n  */\n @SuppressWarnings(\"PMD.ThreadPoolCreationRule\")\n public final class ExecutorFactory {\n \n-    private static final ThreadPoolManager THREAD_POOL_MANAGER = ThreadPoolManager.getInstance();\n+    public static ExecutorService newSingleExecutorService() {\n+        ExecutorService executorService = Executors.newFixedThreadPool(1);\n+        return executorService;\n+    }\n+\n+    public static ExecutorService newSingleExecutorService(final ThreadFactory threadFactory) {\n+        ExecutorService executorService = Executors.newFixedThreadPool(1, threadFactory);\n+        return executorService;\n+    }\n \n-    public static final String DEFAULT_NAMESPACE = \"nacos\";\n+    public static ExecutorService newFixExecutorService(final int nThreads) {\n+        ExecutorService executorService = Executors.newFixedThreadPool(nThreads);\n+        return executorService;\n+    }\n \n+    public static ExecutorService newFixExecutorService(final int nThreads,\n+                                                        final ThreadFactory threadFactory) {\n+        ExecutorService executorService = Executors.newFixedThreadPool(nThreads, threadFactory);\n+        return executorService;\n+    }\n+\n+    public static ScheduledExecutorService newSingleScheduledExecutorService(final ThreadFactory threadFactory) {\n+        ScheduledExecutorService executorService = Executors.newScheduledThreadPool(1, threadFactory);\n+        return executorService;\n+    }\n+\n+    public static ScheduledExecutorService newScheduledExecutorService( final int nThreads,\n+                                                                        final ThreadFactory threadFactory) {\n+        ScheduledExecutorService executorService = Executors.newScheduledThreadPool(nThreads, threadFactory);\n+        return executorService;\n+    }\n+\n+    public static ThreadPoolExecutor newCustomerThreadExecutor(\n+        final int coreThreads,\n+        final int maxThreads,\n+        final long keepAliveTimeMs,\n+        final ThreadFactory threadFactory) {\n+        ThreadPoolExecutor executor = new ThreadPoolExecutor(coreThreads, maxThreads,\n+            keepAliveTimeMs, TimeUnit.MILLISECONDS,\n+            new LinkedBlockingQueue<Runnable>(),\n+            threadFactory);\n+        return executor;\n+    }\n+    //TODO remove Deprecated function after replace all module\n+    @Deprecated\n     public static ExecutorService newSingleExecutorService(final String group) {\n         ExecutorService executorService = Executors.newFixedThreadPool(1);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);\n         return executorService;\n     }\n-\n+    @Deprecated\n     public static ExecutorService newSingleExecutorService(final String group,\n-                                                           final ThreadFactory threadFactory) {\n+        final ThreadFactory threadFactory) {\n         ExecutorService executorService = Executors.newFixedThreadPool(1, threadFactory);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);\n         return executorService;\n     }\n-\n+    @Deprecated\n     public static ExecutorService newFixExecutorService(final String group,\n-                                                        final int nThreads) {\n+        final int nThreads) {\n         ExecutorService executorService = Executors.newFixedThreadPool(nThreads);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);\n         return executorService;\n     }\n-\n+    @Deprecated\n     public static ExecutorService newFixExecutorService(final String group,\n-                                                        final int nThreads,\n-                                                        final ThreadFactory threadFactory) {\n+        final int nThreads,\n+        final ThreadFactory threadFactory) {\n         ExecutorService executorService = Executors.newFixedThreadPool(nThreads, threadFactory);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);\n         return executorService;\n     }\n-\n+    @Deprecated\n     public static ScheduledExecutorService newSingleScheduledExecutorService(final String group,\n-                                                                             final ThreadFactory threadFactory) {\n+        final ThreadFactory threadFactory) {\n         ScheduledExecutorService executorService = Executors.newScheduledThreadPool(1, threadFactory);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);\n         return executorService;\n     }\n-\n+    @Deprecated\n     public static ScheduledExecutorService newScheduledExecutorService(final String group,\n-                                                                       final int nThreads,\n-                                                                       final ThreadFactory threadFactory) {\n+        final int nThreads,\n+        final ThreadFactory threadFactory) {\n         ScheduledExecutorService executorService = Executors.newScheduledThreadPool(nThreads, threadFactory);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);\n         return executorService;\n     }\n-\n+    @Deprecated\n     public static ThreadPoolExecutor newCustomerThreadExecutor(final String group,\n+        final int coreThreads,\n+        final int maxThreads,\n+        final long keepAliveTimeMs,\n+        final ThreadFactory threadFactory) {\n+        ThreadPoolExecutor executor = new ThreadPoolExecutor(coreThreads, maxThreads,\n+            keepAliveTimeMs, TimeUnit.MILLISECONDS,\n+            new LinkedBlockingQueue<Runnable>(),\n+            threadFactory);\n+        return executor;\n+    }\n+\n+    public final static class Managed{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5MDkyOA=="}, "originalCommit": {"oid": "315cf811bb2571088fa23b08ce5cac630c305c28"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTM2NTIzOnYy", "diffSide": "RIGHT", "path": "consistency/src/main/java/com/alibaba/nacos/consistency/ProtocolMetaData.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNTozNzo0NVrOGk2SIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNTo0OTo1MFrOGk2hBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5MTI5OQ==", "bodyText": "\u8fd9\u4e9b\u901a\u8fc7class\u83b7\u53d6\u7c7b\u4fe1\u606f\u7684\uff0c\u90fd\u7528ClassUtils", "url": "https://github.com/alibaba/nacos/pull/3084#discussion_r441291299", "createdAt": "2020-06-17T05:37:45Z", "author": {"login": "chuntaojun"}, "path": "consistency/src/main/java/com/alibaba/nacos/consistency/ProtocolMetaData.java", "diffHunk": "@@ -40,7 +40,10 @@\n @SuppressWarnings(\"PMD.Rule:CollectionInitShouldAssignCapacityRule\")\n public final class ProtocolMetaData {\n \n-    private static final Executor EXECUTOR = ExecutorFactory.newFixExecutorService(ProtocolMetaData.class.getCanonicalName(), 4, new NameThreadFactory(\"nacos.consistency.protocol.metadata\"));\n+    private static final Executor EXECUTOR = ExecutorFactory.Managed.newFixExecutorService(\n+            ProtocolMetaData.class.getCanonicalName(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "315cf811bb2571088fa23b08ce5cac630c305c28"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5NTExMA==", "bodyText": "\u8fd9\u4e2a\u5730\u65b9\u6ca1\u6539\u662f\u56e0\u4e3a\u8fd9\u4e2a consistency \u5e76\u4e0d\u4f9d\u8d56 core\u6a21\u5757,\u6ca1\u6709core \u91cc\u8fb9\u7684 ClassUtils", "url": "https://github.com/alibaba/nacos/pull/3084#discussion_r441295110", "createdAt": "2020-06-17T05:49:50Z", "author": {"login": "wangweizZZ"}, "path": "consistency/src/main/java/com/alibaba/nacos/consistency/ProtocolMetaData.java", "diffHunk": "@@ -40,7 +40,10 @@\n @SuppressWarnings(\"PMD.Rule:CollectionInitShouldAssignCapacityRule\")\n public final class ProtocolMetaData {\n \n-    private static final Executor EXECUTOR = ExecutorFactory.newFixExecutorService(ProtocolMetaData.class.getCanonicalName(), 4, new NameThreadFactory(\"nacos.consistency.protocol.metadata\"));\n+    private static final Executor EXECUTOR = ExecutorFactory.Managed.newFixExecutorService(\n+            ProtocolMetaData.class.getCanonicalName(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5MTI5OQ=="}, "originalCommit": {"oid": "315cf811bb2571088fa23b08ce5cac630c305c28"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0OTM2NzI5OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/alibaba/nacos/core/file/WatchFileCenter.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNTozODozMFrOGk2TRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMDowNjo0NlrOGk-_8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5MTU5MQ==", "bodyText": "Should use Managed. newSingleExecutorService?", "url": "https://github.com/alibaba/nacos/pull/3084#discussion_r441291591", "createdAt": "2020-06-17T05:38:30Z", "author": {"login": "KomachiSion"}, "path": "core/src/main/java/com/alibaba/nacos/core/file/WatchFileCenter.java", "diffHunk": "@@ -154,9 +154,8 @@ public WatchDirJob(String paths) throws NacosException {\n \t\t\t}\n \n \t\t\tthis.callBackExecutor = ExecutorFactory\n-\t\t\t\t\t.newFixExecutorService(WatchFileCenter.class.getCanonicalName(),\n-\t\t\t\t\t\t\t1,\n-\t\t\t\t\t\t\tnew NameThreadFactory(\"com.alibaba.nacos.file.watch-\" + paths));\n+                    .newSingleExecutorService(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "315cf811bb2571088fa23b08ce5cac630c305c28"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMwMzUxMw==", "bodyText": "Because this ExecutorService belong to WatchDirJob instance. I worry about the WatchFileCenter will dymaic add/remove WatchDirJob instance .If exist remove behavior ,it should manage itself", "url": "https://github.com/alibaba/nacos/pull/3084#discussion_r441303513", "createdAt": "2020-06-17T06:14:38Z", "author": {"login": "wangweizZZ"}, "path": "core/src/main/java/com/alibaba/nacos/core/file/WatchFileCenter.java", "diffHunk": "@@ -154,9 +154,8 @@ public WatchDirJob(String paths) throws NacosException {\n \t\t\t}\n \n \t\t\tthis.callBackExecutor = ExecutorFactory\n-\t\t\t\t\t.newFixExecutorService(WatchFileCenter.class.getCanonicalName(),\n-\t\t\t\t\t\t\t1,\n-\t\t\t\t\t\t\tnew NameThreadFactory(\"com.alibaba.nacos.file.watch-\" + paths));\n+                    .newSingleExecutorService(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5MTU5MQ=="}, "originalCommit": {"oid": "315cf811bb2571088fa23b08ce5cac630c305c28"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMwODc0Nw==", "bodyText": "@chuntaojun what do you think", "url": "https://github.com/alibaba/nacos/pull/3084#discussion_r441308747", "createdAt": "2020-06-17T06:28:00Z", "author": {"login": "wangweizZZ"}, "path": "core/src/main/java/com/alibaba/nacos/core/file/WatchFileCenter.java", "diffHunk": "@@ -154,9 +154,8 @@ public WatchDirJob(String paths) throws NacosException {\n \t\t\t}\n \n \t\t\tthis.callBackExecutor = ExecutorFactory\n-\t\t\t\t\t.newFixExecutorService(WatchFileCenter.class.getCanonicalName(),\n-\t\t\t\t\t\t\t1,\n-\t\t\t\t\t\t\tnew NameThreadFactory(\"com.alibaba.nacos.file.watch-\" + paths));\n+                    .newSingleExecutorService(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5MTU5MQ=="}, "originalCommit": {"oid": "315cf811bb2571088fa23b08ce5cac630c305c28"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMxMjcxMg==", "bodyText": "yes, it should be manage itself", "url": "https://github.com/alibaba/nacos/pull/3084#discussion_r441312712", "createdAt": "2020-06-17T06:37:48Z", "author": {"login": "chuntaojun"}, "path": "core/src/main/java/com/alibaba/nacos/core/file/WatchFileCenter.java", "diffHunk": "@@ -154,9 +154,8 @@ public WatchDirJob(String paths) throws NacosException {\n \t\t\t}\n \n \t\t\tthis.callBackExecutor = ExecutorFactory\n-\t\t\t\t\t.newFixExecutorService(WatchFileCenter.class.getCanonicalName(),\n-\t\t\t\t\t\t\t1,\n-\t\t\t\t\t\t\tnew NameThreadFactory(\"com.alibaba.nacos.file.watch-\" + paths));\n+                    .newSingleExecutorService(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5MTU5MQ=="}, "originalCommit": {"oid": "315cf811bb2571088fa23b08ce5cac630c305c28"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQzNDA5Ng==", "bodyText": "ok", "url": "https://github.com/alibaba/nacos/pull/3084#discussion_r441434096", "createdAt": "2020-06-17T10:06:46Z", "author": {"login": "KomachiSion"}, "path": "core/src/main/java/com/alibaba/nacos/core/file/WatchFileCenter.java", "diffHunk": "@@ -154,9 +154,8 @@ public WatchDirJob(String paths) throws NacosException {\n \t\t\t}\n \n \t\t\tthis.callBackExecutor = ExecutorFactory\n-\t\t\t\t\t.newFixExecutorService(WatchFileCenter.class.getCanonicalName(),\n-\t\t\t\t\t\t\t1,\n-\t\t\t\t\t\t\tnew NameThreadFactory(\"com.alibaba.nacos.file.watch-\" + paths));\n+                    .newSingleExecutorService(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5MTU5MQ=="}, "originalCommit": {"oid": "315cf811bb2571088fa23b08ce5cac630c305c28"}, "originalPosition": 7}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4414, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}