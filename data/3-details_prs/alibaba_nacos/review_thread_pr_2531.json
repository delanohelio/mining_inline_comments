{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzOTQ0NDk1", "number": 2531, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMDo1ODo1OVrODr4zpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNjo0MzozNVrOD6HIOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzQ2MDg0OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/alibaba/nacos/common/ThreadPoolManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMDo1ODo1OVrOF8frhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QxMDo0ODo1OVrOF8r-Jw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk3NzkyNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tif (subResource == null) {\n          \n          \n            \n            \t\t\tif (Objects.isNull(subResource)) {", "url": "https://github.com/alibaba/nacos/pull/2531#discussion_r398977927", "createdAt": "2020-03-27T00:58:59Z", "author": {"login": "paderlol"}, "path": "common/src/main/java/com/alibaba/nacos/common/ThreadPoolManager.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.nacos.common;\n+\n+\n+import com.alibaba.nacos.common.utils.ShutdownUtils;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * // TODO Access Metric\n+ *\n+ * For unified management of thread pool resources, the consumer can simply call\n+ * the register method to {@link ThreadPoolManager#register(String, String, ExecutorService)}\n+ * the thread pool that needs to be included in the life cycle management of the resource\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ */\n+public final class ThreadPoolManager {\n+\n+    private Map<String, Map<String, Set<ExecutorService>>> resourcesManager;\n+\n+    private Map<String, Object> lockers = new ConcurrentHashMap<String, Object>(8);\n+\n+    private static final ThreadPoolManager INSTANCE = new ThreadPoolManager();\n+\n+    static {\n+        INSTANCE.init();\n+\t\tShutdownUtils.addShutdownHook(new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+            \tSystem.out.println(\"[ThreadPoolManager] Start destroying ThreadPool\");\n+                INSTANCE.destroyAll();\n+\t\t\t\tSystem.out.println(\"[ThreadPoolManager] Destruction of the end\");\n+            }\n+        }));\n+    }\n+\n+    public static ThreadPoolManager getInstance() {\n+        return INSTANCE;\n+    }\n+\n+    private ThreadPoolManager() {}\n+\n+    private void init() {\n+        resourcesManager = new ConcurrentHashMap<String, Map<String, Set<ExecutorService>>>(8);\n+    }\n+\n+    /**\n+\t * Register the thread pool resources with the resource manager\n+\t *\n+     * @param biz business name\n+\t * @param resourceName resource name\n+\t * @param executor {@link ExecutorService}\n+\t */\n+\tpublic void register(String biz, String resourceName, ExecutorService executor) {\n+        synchronized(this) {\n+            if (!resourcesManager.containsKey(biz)) {\n+                resourcesManager.put(biz, new HashMap<String, Set<ExecutorService>>(8));\n+                lockers.put(biz, new Object());\n+            }\n+        }\n+        final Object monitor = lockers.get(biz);\n+        synchronized (monitor) {\n+            Map<String, Set<ExecutorService>> map = resourcesManager.get(biz);\n+            if (!map.containsKey(resourceName)) {\n+                map.put(resourceName, new HashSet<ExecutorService>());\n+            }\n+            map.get(resourceName).add(executor);\n+        }\n+    }\n+\n+\t/**\n+\t * Cancel the uniform lifecycle management for all threads under this resource\n+\t *\n+     * @param biz business name\n+\t * @param resourceName resource name\n+\t */\n+\tpublic void deregister(String biz, String resourceName) {\n+        if (resourcesManager.containsKey(biz)) {\n+            final Object monitor = lockers.get(biz);\n+            synchronized (monitor) {\n+                resourcesManager.get(biz).remove(resourceName);\n+            }\n+        }\n+    }\n+\n+\t/**\n+\t * Undoing the uniform lifecycle management of {@link ExecutorService} under this resource\n+\t *\n+     * @param biz business name\n+\t * @param resourceName resource name\n+\t * @param executor {@link ExecutorService}\n+\t */\n+\tpublic synchronized void deregister(String biz, String resourceName, ExecutorService executor) {\n+        if (resourcesManager.containsKey(biz)) {\n+            final Map<String, Set<ExecutorService>> subResourceMap = resourcesManager.get(biz);\n+            if (subResourceMap.containsKey(resourceName)) {\n+                subResourceMap.get(resourceName).remove(executor);\n+            }\n+        }\n+    }\n+\n+    public synchronized void destroy(String biz) {\n+\t    final Object monitor = lockers.get(biz);\n+\t    if (monitor == null) {\n+\t        throw new NoSuchElementException(\"This module does not have any thread pool resources : \" + biz);\n+        }\n+\t    synchronized (monitor) {\n+\t        Map<String, Set<ExecutorService>> subResource = resourcesManager.get(biz);\n+\t\t\tif (subResource == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5125dd396233cbed97c3b7fcf79505e0e8e8b65"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE3OTMwMw==", "bodyText": "Because the client also relies on this package, and because of JDK restrictions, this method cannot be used", "url": "https://github.com/alibaba/nacos/pull/2531#discussion_r399179303", "createdAt": "2020-03-27T10:48:59Z", "author": {"login": "chuntaojun"}, "path": "common/src/main/java/com/alibaba/nacos/common/ThreadPoolManager.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.nacos.common;\n+\n+\n+import com.alibaba.nacos.common.utils.ShutdownUtils;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+\n+/**\n+ * // TODO Access Metric\n+ *\n+ * For unified management of thread pool resources, the consumer can simply call\n+ * the register method to {@link ThreadPoolManager#register(String, String, ExecutorService)}\n+ * the thread pool that needs to be included in the life cycle management of the resource\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ */\n+public final class ThreadPoolManager {\n+\n+    private Map<String, Map<String, Set<ExecutorService>>> resourcesManager;\n+\n+    private Map<String, Object> lockers = new ConcurrentHashMap<String, Object>(8);\n+\n+    private static final ThreadPoolManager INSTANCE = new ThreadPoolManager();\n+\n+    static {\n+        INSTANCE.init();\n+\t\tShutdownUtils.addShutdownHook(new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+            \tSystem.out.println(\"[ThreadPoolManager] Start destroying ThreadPool\");\n+                INSTANCE.destroyAll();\n+\t\t\t\tSystem.out.println(\"[ThreadPoolManager] Destruction of the end\");\n+            }\n+        }));\n+    }\n+\n+    public static ThreadPoolManager getInstance() {\n+        return INSTANCE;\n+    }\n+\n+    private ThreadPoolManager() {}\n+\n+    private void init() {\n+        resourcesManager = new ConcurrentHashMap<String, Map<String, Set<ExecutorService>>>(8);\n+    }\n+\n+    /**\n+\t * Register the thread pool resources with the resource manager\n+\t *\n+     * @param biz business name\n+\t * @param resourceName resource name\n+\t * @param executor {@link ExecutorService}\n+\t */\n+\tpublic void register(String biz, String resourceName, ExecutorService executor) {\n+        synchronized(this) {\n+            if (!resourcesManager.containsKey(biz)) {\n+                resourcesManager.put(biz, new HashMap<String, Set<ExecutorService>>(8));\n+                lockers.put(biz, new Object());\n+            }\n+        }\n+        final Object monitor = lockers.get(biz);\n+        synchronized (monitor) {\n+            Map<String, Set<ExecutorService>> map = resourcesManager.get(biz);\n+            if (!map.containsKey(resourceName)) {\n+                map.put(resourceName, new HashSet<ExecutorService>());\n+            }\n+            map.get(resourceName).add(executor);\n+        }\n+    }\n+\n+\t/**\n+\t * Cancel the uniform lifecycle management for all threads under this resource\n+\t *\n+     * @param biz business name\n+\t * @param resourceName resource name\n+\t */\n+\tpublic void deregister(String biz, String resourceName) {\n+        if (resourcesManager.containsKey(biz)) {\n+            final Object monitor = lockers.get(biz);\n+            synchronized (monitor) {\n+                resourcesManager.get(biz).remove(resourceName);\n+            }\n+        }\n+    }\n+\n+\t/**\n+\t * Undoing the uniform lifecycle management of {@link ExecutorService} under this resource\n+\t *\n+     * @param biz business name\n+\t * @param resourceName resource name\n+\t * @param executor {@link ExecutorService}\n+\t */\n+\tpublic synchronized void deregister(String biz, String resourceName, ExecutorService executor) {\n+        if (resourcesManager.containsKey(biz)) {\n+            final Map<String, Set<ExecutorService>> subResourceMap = resourcesManager.get(biz);\n+            if (subResourceMap.containsKey(resourceName)) {\n+                subResourceMap.get(resourceName).remove(executor);\n+            }\n+        }\n+    }\n+\n+    public synchronized void destroy(String biz) {\n+\t    final Object monitor = lockers.get(biz);\n+\t    if (monitor == null) {\n+\t        throw new NoSuchElementException(\"This module does not have any thread pool resources : \" + biz);\n+        }\n+\t    synchronized (monitor) {\n+\t        Map<String, Set<ExecutorService>> subResource = resourcesManager.get(biz);\n+\t\t\tif (subResource == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk3NzkyNw=="}, "originalCommit": {"oid": "f5125dd396233cbed97c3b7fcf79505e0e8e8b65"}, "originalPosition": 131}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3MzQ5MTQ3OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/alibaba/nacos/common/utils/ClassUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMToxNzoyNFrOF8f9Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwMToxNzoyNFrOF8f9Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODk4MjQ2Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tParameterizedType parameterizedType = (ParameterizedType) declaredClass.getGenericSuperclass();\n          \n          \n            \n            \t\tResolvableType.forClass(declaredClass).getSuperType().resolveGeneric(0)", "url": "https://github.com/alibaba/nacos/pull/2531#discussion_r398982463", "createdAt": "2020-03-27T01:17:24Z", "author": {"login": "paderlol"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/ClassUtils.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.utils;\n+\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+\n+/**\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ */\n+public class ClassUtils {\n+\n+\tpublic static <T> Class<T> resolveGenericType(Class<?> declaredClass) {\n+\t\tParameterizedType parameterizedType = (ParameterizedType) declaredClass.getGenericSuperclass();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f5125dd396233cbed97c3b7fcf79505e0e8e8b65"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODA2MjczOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/alibaba/nacos/common/executor/ThreadPoolManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMzo0NDoxN1rOGPoShA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMzo0NDoxN1rOGPoShA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0MTkyNA==", "bodyText": "it's better to change to this way:\nif (!lockers.containsKey(namespace)){  //reduce  entry synchronized\nsynchronized(this) {\nif (!lockers.containsKey(namespace)) {\nlockers.put(namespace, new Object());\n}\n}\n}\nfinal Object monitor = lockers.get(namespace);\nsynchronized (monitor) {\nMap<String, Set> map = resourcesManager.get(namespace);\nif (map==null){\nmap=new HashMap<String, Set>(8);\nmap.put(group, new HashSet());\nmap.get(group).add(executor);\nresourcesManager.put(namespace, map);\nreturn;\n}\nif (!map.containsKey(group)) {\nmap.put(group, new HashSet());\n}\nmap.get(group).add(executor);\n}", "url": "https://github.com/alibaba/nacos/pull/2531#discussion_r419041924", "createdAt": "2020-05-03T03:44:17Z", "author": {"login": "lzp0412"}, "path": "common/src/main/java/com/alibaba/nacos/common/executor/ThreadPoolManager.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.nacos.common.executor;\n+\n+\n+import com.alibaba.nacos.common.utils.ShutdownUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * // TODO Access Metric\n+ *\n+ * For unified management of thread pool resources, the consumer can simply call\n+ * the register method to {@link ThreadPoolManager#register(String, String, ExecutorService)}\n+ * the thread pool that needs to be included in the life cycle management of the resource\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ */\n+public final class ThreadPoolManager {\n+\n+\tprivate static final Logger LOGGER = LoggerFactory.getLogger(ThreadPoolManager.class);\n+\n+    private Map<String, Map<String, Set<ExecutorService>>> resourcesManager;\n+\n+    private Map<String, Object> lockers = new ConcurrentHashMap<String, Object>(8);\n+\n+    private static final ThreadPoolManager INSTANCE = new ThreadPoolManager();\n+\n+    private static final AtomicBoolean CLOSED = new AtomicBoolean(false);\n+\n+    static {\n+        INSTANCE.init();\n+\t\tShutdownUtils.addShutdownHook(new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+\t\t\t\tLOGGER.warn(\"[ThreadPoolManager] Start destroying ThreadPool\");\n+                shutdown();\n+\t\t\t\tLOGGER.warn(\"[ThreadPoolManager] Destruction of the end\");\n+            }\n+        }));\n+    }\n+\n+    public static ThreadPoolManager getInstance() {\n+        return INSTANCE;\n+    }\n+\n+    private ThreadPoolManager() {}\n+\n+    private void init() {\n+        resourcesManager = new ConcurrentHashMap<>(8);\n+    }\n+\n+    /**\n+\t * Register the thread pool resources with the resource manager\n+\t *\n+     * @param namespace namespace name\n+\t * @param group group name\n+\t * @param executor {@link ExecutorService}\n+\t */\n+\tpublic void register(String namespace, String group, ExecutorService executor) {\n+        synchronized(this) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a82bcc1d6ea590bdaeb09ca9a9540b7f5cbb08ae"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwODA2NDczOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/alibaba/nacos/common/executor/ThreadPoolManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wM1QwMzo0Njo1MlrOGPoTaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwMTozODoxMVrOGQX5wA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0MjE1Mg==", "bodyText": "it's no guarantee that the map would not be null\uff0cthe namespace  may be destroy by other thread when concurrent", "url": "https://github.com/alibaba/nacos/pull/2531#discussion_r419042152", "createdAt": "2020-05-03T03:46:52Z", "author": {"login": "lzp0412"}, "path": "common/src/main/java/com/alibaba/nacos/common/executor/ThreadPoolManager.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.nacos.common.executor;\n+\n+\n+import com.alibaba.nacos.common.utils.ShutdownUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * // TODO Access Metric\n+ *\n+ * For unified management of thread pool resources, the consumer can simply call\n+ * the register method to {@link ThreadPoolManager#register(String, String, ExecutorService)}\n+ * the thread pool that needs to be included in the life cycle management of the resource\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ */\n+public final class ThreadPoolManager {\n+\n+\tprivate static final Logger LOGGER = LoggerFactory.getLogger(ThreadPoolManager.class);\n+\n+    private Map<String, Map<String, Set<ExecutorService>>> resourcesManager;\n+\n+    private Map<String, Object> lockers = new ConcurrentHashMap<String, Object>(8);\n+\n+    private static final ThreadPoolManager INSTANCE = new ThreadPoolManager();\n+\n+    private static final AtomicBoolean CLOSED = new AtomicBoolean(false);\n+\n+    static {\n+        INSTANCE.init();\n+\t\tShutdownUtils.addShutdownHook(new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+\t\t\t\tLOGGER.warn(\"[ThreadPoolManager] Start destroying ThreadPool\");\n+                shutdown();\n+\t\t\t\tLOGGER.warn(\"[ThreadPoolManager] Destruction of the end\");\n+            }\n+        }));\n+    }\n+\n+    public static ThreadPoolManager getInstance() {\n+        return INSTANCE;\n+    }\n+\n+    private ThreadPoolManager() {}\n+\n+    private void init() {\n+        resourcesManager = new ConcurrentHashMap<>(8);\n+    }\n+\n+    /**\n+\t * Register the thread pool resources with the resource manager\n+\t *\n+     * @param namespace namespace name\n+\t * @param group group name\n+\t * @param executor {@link ExecutorService}\n+\t */\n+\tpublic void register(String namespace, String group, ExecutorService executor) {\n+        synchronized(this) {\n+            if (!resourcesManager.containsKey(namespace)) {\n+                resourcesManager.put(namespace, new HashMap<String, Set<ExecutorService>>(8));\n+                lockers.put(namespace, new Object());\n+            }\n+        }\n+        final Object monitor = lockers.get(namespace);\n+        synchronized (monitor) {\n+            Map<String, Set<ExecutorService>> map = resourcesManager.get(namespace);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a82bcc1d6ea590bdaeb09ca9a9540b7f5cbb08ae"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTgyMjAxNg==", "bodyText": "yes, I already fix it", "url": "https://github.com/alibaba/nacos/pull/2531#discussion_r419822016", "createdAt": "2020-05-05T01:38:11Z", "author": {"login": "chuntaojun"}, "path": "common/src/main/java/com/alibaba/nacos/common/executor/ThreadPoolManager.java", "diffHunk": "@@ -0,0 +1,182 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.nacos.common.executor;\n+\n+\n+import com.alibaba.nacos.common.utils.ShutdownUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * // TODO Access Metric\n+ *\n+ * For unified management of thread pool resources, the consumer can simply call\n+ * the register method to {@link ThreadPoolManager#register(String, String, ExecutorService)}\n+ * the thread pool that needs to be included in the life cycle management of the resource\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ */\n+public final class ThreadPoolManager {\n+\n+\tprivate static final Logger LOGGER = LoggerFactory.getLogger(ThreadPoolManager.class);\n+\n+    private Map<String, Map<String, Set<ExecutorService>>> resourcesManager;\n+\n+    private Map<String, Object> lockers = new ConcurrentHashMap<String, Object>(8);\n+\n+    private static final ThreadPoolManager INSTANCE = new ThreadPoolManager();\n+\n+    private static final AtomicBoolean CLOSED = new AtomicBoolean(false);\n+\n+    static {\n+        INSTANCE.init();\n+\t\tShutdownUtils.addShutdownHook(new Thread(new Runnable() {\n+            @Override\n+            public void run() {\n+\t\t\t\tLOGGER.warn(\"[ThreadPoolManager] Start destroying ThreadPool\");\n+                shutdown();\n+\t\t\t\tLOGGER.warn(\"[ThreadPoolManager] Destruction of the end\");\n+            }\n+        }));\n+    }\n+\n+    public static ThreadPoolManager getInstance() {\n+        return INSTANCE;\n+    }\n+\n+    private ThreadPoolManager() {}\n+\n+    private void init() {\n+        resourcesManager = new ConcurrentHashMap<>(8);\n+    }\n+\n+    /**\n+\t * Register the thread pool resources with the resource manager\n+\t *\n+     * @param namespace namespace name\n+\t * @param group group name\n+\t * @param executor {@link ExecutorService}\n+\t */\n+\tpublic void register(String namespace, String group, ExecutorService executor) {\n+        synchronized(this) {\n+            if (!resourcesManager.containsKey(namespace)) {\n+                resourcesManager.put(namespace, new HashMap<String, Set<ExecutorService>>(8));\n+                lockers.put(namespace, new Object());\n+            }\n+        }\n+        final Object monitor = lockers.get(namespace);\n+        synchronized (monitor) {\n+            Map<String, Set<ExecutorService>> map = resourcesManager.get(namespace);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTA0MjE1Mg=="}, "originalCommit": {"oid": "a82bcc1d6ea590bdaeb09ca9a9540b7f5cbb08ae"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjIwOTkyOnYy", "diffSide": "RIGHT", "path": "consistency/src/main/java/com/alibaba/nacos/consistency/ProtocolMetaData.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMzoxMzo1NlrOGRs3gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMzozNTo1OFrOGRtMrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxNDA4MQ==", "bodyText": "\u53c2\u6570subKey\u770b\u8d77\u6765\u53ea\u7528\u4e86\u7b2c\u4e00\u4e2a\u503c\uff0c\u4e3a\u4ec0\u4e48\u8981\u652f\u6301\u591a\u53c2\u6570", "url": "https://github.com/alibaba/nacos/pull/2531#discussion_r421214081", "createdAt": "2020-05-07T03:13:56Z", "author": {"login": "JianweiWang"}, "path": "consistency/src/main/java/com/alibaba/nacos/consistency/ProtocolMetaData.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.consistency;\n+\n+import com.alibaba.nacos.common.utils.Observable;\n+import com.alibaba.nacos.common.utils.Observer;\n+import org.javatuples.Pair;\n+\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * Consistent protocol metadata information, <Key, <Key, Value >> structure\n+ * Listeners that can register to listen to changes in value\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ */\n+@SuppressWarnings(\"PMD.Rule:CollectionInitShouldAssignCapacityRule\")\n+public final class ProtocolMetaData {\n+\n+    private transient volatile boolean stopDefer = false;\n+\n+    private Map<String, MetaData> metaDataMap = new ConcurrentHashMap<>(4);\n+\n+    public Map<String, Map<Object, Object>> getMetaDataMap() {\n+        return metaDataMap.entrySet()\n+                .stream()\n+                .map(entry -> {\n+                    return Pair.with(entry.getKey(), entry.getValue().getItemMap()\n+                            .entrySet().stream()\n+                            .collect(TreeMap::new, (m, e) -> m.put(e.getKey(), e.getValue().getData()), TreeMap::putAll));\n+                })\n+                .collect(TreeMap::new, (m, e) -> m.put(e.getValue0(), e.getValue1()), TreeMap::putAll);\n+    }\n+\n+    // Does not guarantee thread safety, there may be two updates of\n+    // time-1 and time-2 (time-1 <time-2), but time-1 data overwrites time-2\n+\n+    public void load(final Map<String, Map<String, Object>> mapMap) {\n+        mapMap.forEach((s, map) -> {\n+            metaDataMap.computeIfAbsent(s, MetaData::new);\n+            final MetaData data = metaDataMap.get(s);\n+            map.forEach(data::put);\n+        });\n+    }\n+\n+    public Object get(String group, String... subKey) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "613a8d6c409d0820fbabd1c0cfbea84e15e9f84e"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxOTUwMw==", "bodyText": "\u7b49\u7b49\u79fb\u9664", "url": "https://github.com/alibaba/nacos/pull/2531#discussion_r421219503", "createdAt": "2020-05-07T03:35:58Z", "author": {"login": "chuntaojun"}, "path": "consistency/src/main/java/com/alibaba/nacos/consistency/ProtocolMetaData.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.consistency;\n+\n+import com.alibaba.nacos.common.utils.Observable;\n+import com.alibaba.nacos.common.utils.Observer;\n+import org.javatuples.Pair;\n+\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * Consistent protocol metadata information, <Key, <Key, Value >> structure\n+ * Listeners that can register to listen to changes in value\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ */\n+@SuppressWarnings(\"PMD.Rule:CollectionInitShouldAssignCapacityRule\")\n+public final class ProtocolMetaData {\n+\n+    private transient volatile boolean stopDefer = false;\n+\n+    private Map<String, MetaData> metaDataMap = new ConcurrentHashMap<>(4);\n+\n+    public Map<String, Map<Object, Object>> getMetaDataMap() {\n+        return metaDataMap.entrySet()\n+                .stream()\n+                .map(entry -> {\n+                    return Pair.with(entry.getKey(), entry.getValue().getItemMap()\n+                            .entrySet().stream()\n+                            .collect(TreeMap::new, (m, e) -> m.put(e.getKey(), e.getValue().getData()), TreeMap::putAll));\n+                })\n+                .collect(TreeMap::new, (m, e) -> m.put(e.getValue0(), e.getValue1()), TreeMap::putAll);\n+    }\n+\n+    // Does not guarantee thread safety, there may be two updates of\n+    // time-1 and time-2 (time-1 <time-2), but time-1 data overwrites time-2\n+\n+    public void load(final Map<String, Map<String, Object>> mapMap) {\n+        mapMap.forEach((s, map) -> {\n+            metaDataMap.computeIfAbsent(s, MetaData::new);\n+            final MetaData data = metaDataMap.get(s);\n+            map.forEach(data::put);\n+        });\n+    }\n+\n+    public Object get(String group, String... subKey) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxNDA4MQ=="}, "originalCommit": {"oid": "613a8d6c409d0820fbabd1c0cfbea84e15e9f84e"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjIxMTU5OnYy", "diffSide": "RIGHT", "path": "consistency/src/main/java/com/alibaba/nacos/consistency/ProtocolMetaData.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMzoxNDo0NVrOGRs4ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMzoxNDo0NVrOGRs4ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxNDMxNA==", "bodyText": "\u6709\u9519\u522b\u5b57\uff0c\u5e94\u8be5\u662funSubscribe", "url": "https://github.com/alibaba/nacos/pull/2531#discussion_r421214314", "createdAt": "2020-05-07T03:14:45Z", "author": {"login": "JianweiWang"}, "path": "consistency/src/main/java/com/alibaba/nacos/consistency/ProtocolMetaData.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.consistency;\n+\n+import com.alibaba.nacos.common.utils.Observable;\n+import com.alibaba.nacos.common.utils.Observer;\n+import org.javatuples.Pair;\n+\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * Consistent protocol metadata information, <Key, <Key, Value >> structure\n+ * Listeners that can register to listen to changes in value\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ */\n+@SuppressWarnings(\"PMD.Rule:CollectionInitShouldAssignCapacityRule\")\n+public final class ProtocolMetaData {\n+\n+    private transient volatile boolean stopDefer = false;\n+\n+    private Map<String, MetaData> metaDataMap = new ConcurrentHashMap<>(4);\n+\n+    public Map<String, Map<Object, Object>> getMetaDataMap() {\n+        return metaDataMap.entrySet()\n+                .stream()\n+                .map(entry -> {\n+                    return Pair.with(entry.getKey(), entry.getValue().getItemMap()\n+                            .entrySet().stream()\n+                            .collect(TreeMap::new, (m, e) -> m.put(e.getKey(), e.getValue().getData()), TreeMap::putAll));\n+                })\n+                .collect(TreeMap::new, (m, e) -> m.put(e.getValue0(), e.getValue1()), TreeMap::putAll);\n+    }\n+\n+    // Does not guarantee thread safety, there may be two updates of\n+    // time-1 and time-2 (time-1 <time-2), but time-1 data overwrites time-2\n+\n+    public void load(final Map<String, Map<String, Object>> mapMap) {\n+        mapMap.forEach((s, map) -> {\n+            metaDataMap.computeIfAbsent(s, MetaData::new);\n+            final MetaData data = metaDataMap.get(s);\n+            map.forEach(data::put);\n+        });\n+    }\n+\n+    public Object get(String group, String... subKey) {\n+        if (subKey == null || subKey.length == 0) {\n+            return metaDataMap.get(group);\n+        } else {\n+            final String key = subKey[0];\n+            if (metaDataMap.containsKey(group)) {\n+                return metaDataMap.get(group).get(key);\n+            }\n+            return null;\n+        }\n+    }\n+\n+    // If MetaData does not exist, actively create a MetaData\n+\n+    public void subscribe(final String group, final String key, final Observer observer) {\n+        metaDataMap.computeIfAbsent(group, s -> new MetaData(group));\n+        metaDataMap.get(group)\n+                .subscribe(key, observer);\n+    }\n+\n+    public void ubSubscribe(final String group, final String key, final Observer observer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "613a8d6c409d0820fbabd1c0cfbea84e15e9f84e"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjIxMzUzOnYy", "diffSide": "RIGHT", "path": "consistency/src/main/java/com/alibaba/nacos/consistency/ProtocolMetaData.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMzoxNTo1OFrOGRs5hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMzoxNTo1OFrOGRs5hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIxNDU5OQ==", "bodyText": "\u4e0d\u662f\u6709\u516c\u5171\u7ebf\u7a0b\u6c60\u4e86\u4e48\uff1f", "url": "https://github.com/alibaba/nacos/pull/2531#discussion_r421214599", "createdAt": "2020-05-07T03:15:58Z", "author": {"login": "JianweiWang"}, "path": "consistency/src/main/java/com/alibaba/nacos/consistency/ProtocolMetaData.java", "diffHunk": "@@ -0,0 +1,205 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.consistency;\n+\n+import com.alibaba.nacos.common.utils.Observable;\n+import com.alibaba.nacos.common.utils.Observer;\n+import org.javatuples.Pair;\n+\n+import java.util.Map;\n+import java.util.TreeMap;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.LinkedBlockingQueue;\n+import java.util.concurrent.locks.ReentrantReadWriteLock;\n+\n+/**\n+ * Consistent protocol metadata information, <Key, <Key, Value >> structure\n+ * Listeners that can register to listen to changes in value\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ */\n+@SuppressWarnings(\"PMD.Rule:CollectionInitShouldAssignCapacityRule\")\n+public final class ProtocolMetaData {\n+\n+    private transient volatile boolean stopDefer = false;\n+\n+    private Map<String, MetaData> metaDataMap = new ConcurrentHashMap<>(4);\n+\n+    public Map<String, Map<Object, Object>> getMetaDataMap() {\n+        return metaDataMap.entrySet()\n+                .stream()\n+                .map(entry -> {\n+                    return Pair.with(entry.getKey(), entry.getValue().getItemMap()\n+                            .entrySet().stream()\n+                            .collect(TreeMap::new, (m, e) -> m.put(e.getKey(), e.getValue().getData()), TreeMap::putAll));\n+                })\n+                .collect(TreeMap::new, (m, e) -> m.put(e.getValue0(), e.getValue1()), TreeMap::putAll);\n+    }\n+\n+    // Does not guarantee thread safety, there may be two updates of\n+    // time-1 and time-2 (time-1 <time-2), but time-1 data overwrites time-2\n+\n+    public void load(final Map<String, Map<String, Object>> mapMap) {\n+        mapMap.forEach((s, map) -> {\n+            metaDataMap.computeIfAbsent(s, MetaData::new);\n+            final MetaData data = metaDataMap.get(s);\n+            map.forEach(data::put);\n+        });\n+    }\n+\n+    public Object get(String group, String... subKey) {\n+        if (subKey == null || subKey.length == 0) {\n+            return metaDataMap.get(group);\n+        } else {\n+            final String key = subKey[0];\n+            if (metaDataMap.containsKey(group)) {\n+                return metaDataMap.get(group).get(key);\n+            }\n+            return null;\n+        }\n+    }\n+\n+    // If MetaData does not exist, actively create a MetaData\n+\n+    public void subscribe(final String group, final String key, final Observer observer) {\n+        metaDataMap.computeIfAbsent(group, s -> new MetaData(group));\n+        metaDataMap.get(group)\n+                .subscribe(key, observer);\n+    }\n+\n+    public void ubSubscribe(final String group, final String key, final Observer observer) {\n+        metaDataMap.computeIfAbsent(group, s -> new MetaData(group));\n+        metaDataMap.get(group)\n+                .unSubscribe(key, observer);\n+    }\n+\n+    public void stopDeferPublish() {\n+        stopDefer = true;\n+    }\n+\n+    @SuppressWarnings(\"PMD.ThreadPoolCreationRule\")\n+    public final class MetaData {\n+\n+        // Each biz does not affect each other\n+\n+        private transient final ExecutorService executor = Executors.newSingleThreadExecutor();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "613a8d6c409d0820fbabd1c0cfbea84e15e9f84e"}, "originalPosition": 102}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjI2NDQwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/alibaba/nacos/core/distributed/raft/JRaftOps.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMzo0Nzo0MVrOGRtXQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwMzo0Nzo0MVrOGRtXQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIyMjIwOQ==", "bodyText": "not support yet?", "url": "https://github.com/alibaba/nacos/pull/2531#discussion_r421222209", "createdAt": "2020-05-07T03:47:41Z", "author": {"login": "JianweiWang"}, "path": "core/src/main/java/com/alibaba/nacos/core/distributed/raft/JRaftOps.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.core.distributed.raft;\n+\n+import com.alibaba.nacos.common.model.RestResult;\n+import com.alibaba.nacos.common.model.RestResultUtils;\n+import com.alibaba.nacos.core.distributed.raft.utils.JRaftConstants;\n+import com.alipay.sofa.jraft.CliService;\n+import com.alipay.sofa.jraft.JRaftUtils;\n+import com.alipay.sofa.jraft.Node;\n+import com.alipay.sofa.jraft.Status;\n+import com.alipay.sofa.jraft.conf.Configuration;\n+import com.alipay.sofa.jraft.entity.PeerId;\n+\n+import java.util.Map;\n+\n+/**\n+ * JRaft operations interface\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ */\n+@SuppressWarnings(\"PMD.ClassNamingShouldBeCamelRule\")\n+public class JRaftOps {\n+\n+\tprivate final JRaftServer raftServer;\n+\n+\tpublic JRaftOps(JRaftServer raftServer) {\n+\t\tthis.raftServer = raftServer;\n+\t}\n+\n+\tpublic RestResult<String> execute(String[] args) {\n+\t\treturn RestResultUtils.failed(\"not support yeah\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "613a8d6c409d0820fbabd1c0cfbea84e15e9f84e"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyMjYwNzk0OnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/alibaba/nacos/core/distributed/raft/NacosStateMachine.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNjo0MzozNVrOGRwfjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNjo0MzozNVrOGRwfjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI3MzQ4NQ==", "bodyText": "debug\u65e5\u5fd7\u6700\u597d\u5148\u5224\u65ad\u4e00\u4e0b\u5f53\u524d\u65e5\u5fd7\u7ea7\u522b", "url": "https://github.com/alibaba/nacos/pull/2531#discussion_r421273485", "createdAt": "2020-05-07T06:43:35Z", "author": {"login": "JianweiWang"}, "path": "core/src/main/java/com/alibaba/nacos/core/distributed/raft/NacosStateMachine.java", "diffHunk": "@@ -0,0 +1,340 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.core.distributed.raft;\n+\n+import com.alibaba.fastjson.JSON;\n+import com.alibaba.nacos.consistency.LogFuture;\n+import com.alibaba.nacos.consistency.LogProcessor;\n+import com.alibaba.nacos.consistency.cp.LogProcessor4CP;\n+import com.alibaba.nacos.consistency.entity.GetRequest;\n+import com.alibaba.nacos.consistency.entity.GetResponse;\n+import com.alibaba.nacos.consistency.entity.Log;\n+import com.alibaba.nacos.consistency.exception.ConsistencyException;\n+import com.alibaba.nacos.consistency.snapshot.LocalFileMeta;\n+import com.alibaba.nacos.consistency.snapshot.Reader;\n+import com.alibaba.nacos.consistency.snapshot.SnapshotOperation;\n+import com.alibaba.nacos.consistency.snapshot.Writer;\n+import com.alibaba.nacos.core.distributed.raft.utils.JRaftConstants;\n+import com.alibaba.nacos.core.distributed.raft.utils.JRaftLogOperation;\n+import com.alibaba.nacos.core.distributed.raft.utils.JRaftUtils;\n+import com.alibaba.nacos.core.notify.NotifyCenter;\n+import com.alibaba.nacos.core.utils.Loggers;\n+import com.alipay.sofa.jraft.Closure;\n+import com.alipay.sofa.jraft.Iterator;\n+import com.alipay.sofa.jraft.Node;\n+import com.alipay.sofa.jraft.RouteTable;\n+import com.alipay.sofa.jraft.Status;\n+import com.alipay.sofa.jraft.conf.Configuration;\n+import com.alipay.sofa.jraft.core.StateMachineAdapter;\n+import com.alipay.sofa.jraft.entity.LeaderChangeContext;\n+import com.alipay.sofa.jraft.entity.LocalFileMetaOutter;\n+import com.alipay.sofa.jraft.error.RaftError;\n+import com.alipay.sofa.jraft.error.RaftException;\n+import com.alipay.sofa.jraft.storage.snapshot.SnapshotReader;\n+import com.alipay.sofa.jraft.storage.snapshot.SnapshotWriter;\n+import org.apache.commons.lang3.BooleanUtils;\n+\n+import java.nio.ByteBuffer;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.Optional;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import java.util.function.BiConsumer;\n+\n+/**\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ */\n+class NacosStateMachine extends StateMachineAdapter {\n+\n+\tprotected final JRaftServer server;\n+\tprotected final LogProcessor processor;\n+\tprivate final AtomicBoolean isLeader = new AtomicBoolean(false);\n+\tprivate final String groupId;\n+\tprivate Collection<JSnapshotOperation> operations;\n+\tprivate Node node;\n+\tprivate volatile long term = -1;\n+\tprivate volatile String leaderIp = \"unknown\";\n+\n+\tNacosStateMachine(JRaftServer server, LogProcessor4CP processor) {\n+\t\tthis.server = server;\n+\t\tthis.processor = processor;\n+\t\tthis.groupId = processor.group();\n+\n+\t\tadapterToJRaftSnapshot(processor.loadSnapshotOperate());\n+\t}\n+\n+\t@Override\n+\tpublic void onApply(Iterator iter) {\n+\t\tint index = 0;\n+\t\tint applied = 0;\n+\t\tLog log = null;\n+\t\tNacosClosure closure = null;\n+\t\ttry {\n+\t\t\twhile (iter.hasNext()) {\n+\t\t\t\tStatus status = Status.OK();\n+\t\t\t\ttry {\n+\t\t\t\t\tif (iter.done() != null) {\n+\t\t\t\t\t\tclosure = (NacosClosure) iter.done();\n+\t\t\t\t\t\tlog = closure.getLog();\n+\t\t\t\t\t}\n+\t\t\t\t\telse {\n+\t\t\t\t\t\tfinal ByteBuffer data = iter.getData();\n+\t\t\t\t\t\tlog = Log.parseFrom(data.array());\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tLoggers.RAFT.debug(\"receive log : {}\", log);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "613a8d6c409d0820fbabd1c0cfbea84e15e9f84e"}, "originalPosition": 104}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4463, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}