{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1NzMwNTIz", "number": 3432, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODoyMjo0NlrOESSOxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMToyNzozMVrOEUBg8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjA4NTE2OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/com/alibaba/nacos/client/config/impl/ClientWorker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODoyMjo0NlrOG3YYoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODoyMjo0NlrOG3YYoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcyNDM4NA==", "bodyText": "remakeCacheDataTaskId -> reMakeCacheDataTaskId is better?", "url": "https://github.com/alibaba/nacos/pull/3432#discussion_r460724384", "createdAt": "2020-07-27T08:22:46Z", "author": {"login": "zongtanghu"}, "path": "client/src/main/java/com/alibaba/nacos/client/config/impl/ClientWorker.java", "diffHunk": "@@ -178,11 +179,39 @@ void removeCache(String dataId, String group, String tenant) {\n             copy.remove(groupKey);\n             cacheMap.set(copy);\n         }\n+        remakeCacheDataTaskId();\n         LOGGER.info(\"[{}] [unsubscribe] {}\", agent.getName(), groupKey);\n         \n         MetricsMonitor.getListenConfigCountMonitor().set(cacheMap.get().size());\n     }\n     \n+    /**\n+     * Remake cacheData taskId.\n+     */\n+    private void remakeCacheDataTaskId() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3057d43841ceac79cfc42601c209187005e2805"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjExMjE1OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/com/alibaba/nacos/client/config/impl/ClientWorker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODoyOTozOFrOG3YojA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwODoyOTozOFrOG3YojA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDcyODQ2MA==", "bodyText": "The parameter run -> isRun is better?", "url": "https://github.com/alibaba/nacos/pull/3432#discussion_r460728460", "createdAt": "2020-07-27T08:29:38Z", "author": {"login": "zongtanghu"}, "path": "client/src/main/java/com/alibaba/nacos/client/config/impl/ClientWorker.java", "diffHunk": "@@ -278,6 +309,20 @@ public CacheData getCache(String dataId, String group, String tenant) {\n         return cacheMap.get().get(GroupKey.getKeyTenant(dataId, group, tenant));\n     }\n     \n+    /**\n+     * Update the thread state corresponding to taskId.\n+     *\n+     * @param schedulerId threads run taskId.\n+     * @param run         whether to run.\n+     */\n+    private void updateSchedulerMap(Integer schedulerId, Boolean run) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3057d43841ceac79cfc42601c209187005e2805"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NDc3NzgyOnYy", "diffSide": "RIGHT", "path": "client/src/test/java/com/alibaba/nacos/client/config/listener/impl/ClientWorkerTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQwNjozNDo1NlrOG4qfqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMFQwODo1Nzo1MVrOG5aTdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA2OTY3Mw==", "bodyText": "\u6211\u60f3\uff0c\u8fd9\u91cc\u65e2\u7136\u7528\u4e86\u53cd\u5c04\uff0c\u90a3\u4e48cacheMap\u548cschedulerMap\u91cc\u9762\u7684\u6570\u636e\u662f\u5426\u4e5f\u53ef\u4ee5\u4e00\u8d77\u6821\u9a8c\u4e0b\uff1f\u5176\u4ed6\u6ca1\u6709\u5565\u95ee\u9898\u4e86\u3002", "url": "https://github.com/alibaba/nacos/pull/3432#discussion_r462069673", "createdAt": "2020-07-29T06:34:56Z", "author": {"login": "zongtanghu"}, "path": "client/src/test/java/com/alibaba/nacos/client/config/listener/impl/ClientWorkerTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.client.config.listener.impl;\n+\n+import com.alibaba.nacos.api.config.listener.Listener;\n+import com.alibaba.nacos.api.exception.NacosException;\n+import com.alibaba.nacos.client.config.filter.impl.ConfigFilterChainManager;\n+import com.alibaba.nacos.client.config.http.MetricsHttpAgent;\n+import com.alibaba.nacos.client.config.impl.ClientWorker;\n+import com.alibaba.nacos.client.utils.ParamUtil;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+import static org.mockito.Mockito.mock;\n+\n+public class ClientWorkerTest {\n+    \n+    @Mock\n+    ScheduledExecutorService scheduledExecutorService;\n+    \n+    private ClientWorker clientWorker;\n+    \n+    private List<Listener> listeners;\n+    \n+    private final String dataId = \"data\";\n+    \n+    private final String group = \"group\";\n+    \n+    private final String currentLongingTaskCount = \"currentLongingTaskCount\";\n+    \n+    @Before\n+    public void init() {\n+        MockitoAnnotations.initMocks(this);\n+        clientWorker = new ClientWorker(mock(MetricsHttpAgent.class), mock(ConfigFilterChainManager.class),\n+                mock(Properties.class));\n+        try {\n+            Field executorServiceField = clientWorker.getClass().getDeclaredField(\"executorService\");\n+            executorServiceField.setAccessible(true);\n+            Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n+            modifiersField.setAccessible(true);\n+            modifiersField.setInt(executorServiceField, executorServiceField.getModifiers() & ~Modifier.FINAL);\n+            executorServiceField.set(clientWorker, scheduledExecutorService);\n+            Listener listener = new Listener() {\n+                @Override\n+                public Executor getExecutor() {\n+                    return null;\n+                }\n+                \n+                @Override\n+                public void receiveConfigInfo(String configInfo) {\n+                \n+                }\n+            };\n+            listeners = Arrays.asList(listener);\n+        } catch (NoSuchFieldException e) {\n+            e.printStackTrace();\n+        } catch (IllegalAccessException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+    \n+    @Test\n+    public void testAddLongPollNumberThreads() {\n+        try {\n+            for (int i = 0; i < ParamUtil.getPerTaskConfigSize(); i++) {\n+                clientWorker.addTenantListeners(dataId + i, group, listeners);\n+            }\n+            Field currentLongingTaskCountField = clientWorker.getClass().getDeclaredField(currentLongingTaskCount);\n+            currentLongingTaskCountField.setAccessible(true);\n+            Assert.assertEquals(currentLongingTaskCount, (int) currentLongingTaskCountField.getDouble(clientWorker), 1);\n+            for (int i = (int) ParamUtil.getPerTaskConfigSize(); i < ParamUtil.getPerTaskConfigSize() * 2; i++) {\n+                clientWorker.addTenantListeners(dataId + i, group, listeners);\n+            }\n+            Assert.assertEquals(currentLongingTaskCount, (int) currentLongingTaskCountField.getDouble(clientWorker), 2);\n+        } catch (NacosException e) {\n+            e.printStackTrace();\n+        } catch (IllegalAccessException e) {\n+            e.printStackTrace();\n+        } catch (NoSuchFieldException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+    \n+    @Test\n+    public void testReduceLongPollNumberThreads() {\n+        try {\n+            for (int i = 0; i < ParamUtil.getPerTaskConfigSize() * 3; i++) {\n+                clientWorker.addTenantListeners(dataId + i, group, listeners);\n+            }\n+            Field currentLongingTaskCountField = clientWorker.getClass().getDeclaredField(currentLongingTaskCount);\n+            currentLongingTaskCountField.setAccessible(true);\n+            Assert.assertEquals(currentLongingTaskCount, (int) currentLongingTaskCountField.getDouble(clientWorker), 3);\n+            \n+            for (int i = (int) ParamUtil.getPerTaskConfigSize(); i < ParamUtil.getPerTaskConfigSize() * 2; i++) {\n+                clientWorker.removeTenantListener(dataId + i, group, listeners.get(0));\n+            }\n+            Assert.assertEquals(currentLongingTaskCount, (int) currentLongingTaskCountField.getDouble(clientWorker), 2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20204cd191be093d999c25050bcf61f355d12645"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjE4NjY4OQ==", "bodyText": "\u53ef\u4ee5\u662f\u53ef\u4ee5\uff0c\u611f\u89c9\u6ca1\u5fc5\u8981\u3002\u6bd5\u7adf\u901a\u8fc7currentLongingTaskCount \u5df2\u7ecf\u53ef\u4ee5\u77e5\u9053\uff0c\u5f53\u524d\u8dd1\u7684\u7ebf\u7a0b\u6570\u91cf\u4e86\u3002", "url": "https://github.com/alibaba/nacos/pull/3432#discussion_r462186689", "createdAt": "2020-07-29T10:05:17Z", "author": {"login": "sanxun0325"}, "path": "client/src/test/java/com/alibaba/nacos/client/config/listener/impl/ClientWorkerTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.client.config.listener.impl;\n+\n+import com.alibaba.nacos.api.config.listener.Listener;\n+import com.alibaba.nacos.api.exception.NacosException;\n+import com.alibaba.nacos.client.config.filter.impl.ConfigFilterChainManager;\n+import com.alibaba.nacos.client.config.http.MetricsHttpAgent;\n+import com.alibaba.nacos.client.config.impl.ClientWorker;\n+import com.alibaba.nacos.client.utils.ParamUtil;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+import static org.mockito.Mockito.mock;\n+\n+public class ClientWorkerTest {\n+    \n+    @Mock\n+    ScheduledExecutorService scheduledExecutorService;\n+    \n+    private ClientWorker clientWorker;\n+    \n+    private List<Listener> listeners;\n+    \n+    private final String dataId = \"data\";\n+    \n+    private final String group = \"group\";\n+    \n+    private final String currentLongingTaskCount = \"currentLongingTaskCount\";\n+    \n+    @Before\n+    public void init() {\n+        MockitoAnnotations.initMocks(this);\n+        clientWorker = new ClientWorker(mock(MetricsHttpAgent.class), mock(ConfigFilterChainManager.class),\n+                mock(Properties.class));\n+        try {\n+            Field executorServiceField = clientWorker.getClass().getDeclaredField(\"executorService\");\n+            executorServiceField.setAccessible(true);\n+            Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n+            modifiersField.setAccessible(true);\n+            modifiersField.setInt(executorServiceField, executorServiceField.getModifiers() & ~Modifier.FINAL);\n+            executorServiceField.set(clientWorker, scheduledExecutorService);\n+            Listener listener = new Listener() {\n+                @Override\n+                public Executor getExecutor() {\n+                    return null;\n+                }\n+                \n+                @Override\n+                public void receiveConfigInfo(String configInfo) {\n+                \n+                }\n+            };\n+            listeners = Arrays.asList(listener);\n+        } catch (NoSuchFieldException e) {\n+            e.printStackTrace();\n+        } catch (IllegalAccessException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+    \n+    @Test\n+    public void testAddLongPollNumberThreads() {\n+        try {\n+            for (int i = 0; i < ParamUtil.getPerTaskConfigSize(); i++) {\n+                clientWorker.addTenantListeners(dataId + i, group, listeners);\n+            }\n+            Field currentLongingTaskCountField = clientWorker.getClass().getDeclaredField(currentLongingTaskCount);\n+            currentLongingTaskCountField.setAccessible(true);\n+            Assert.assertEquals(currentLongingTaskCount, (int) currentLongingTaskCountField.getDouble(clientWorker), 1);\n+            for (int i = (int) ParamUtil.getPerTaskConfigSize(); i < ParamUtil.getPerTaskConfigSize() * 2; i++) {\n+                clientWorker.addTenantListeners(dataId + i, group, listeners);\n+            }\n+            Assert.assertEquals(currentLongingTaskCount, (int) currentLongingTaskCountField.getDouble(clientWorker), 2);\n+        } catch (NacosException e) {\n+            e.printStackTrace();\n+        } catch (IllegalAccessException e) {\n+            e.printStackTrace();\n+        } catch (NoSuchFieldException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+    \n+    @Test\n+    public void testReduceLongPollNumberThreads() {\n+        try {\n+            for (int i = 0; i < ParamUtil.getPerTaskConfigSize() * 3; i++) {\n+                clientWorker.addTenantListeners(dataId + i, group, listeners);\n+            }\n+            Field currentLongingTaskCountField = clientWorker.getClass().getDeclaredField(currentLongingTaskCount);\n+            currentLongingTaskCountField.setAccessible(true);\n+            Assert.assertEquals(currentLongingTaskCount, (int) currentLongingTaskCountField.getDouble(clientWorker), 3);\n+            \n+            for (int i = (int) ParamUtil.getPerTaskConfigSize(); i < ParamUtil.getPerTaskConfigSize() * 2; i++) {\n+                clientWorker.removeTenantListener(dataId + i, group, listeners.get(0));\n+            }\n+            Assert.assertEquals(currentLongingTaskCount, (int) currentLongingTaskCountField.getDouble(clientWorker), 2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA2OTY3Mw=="}, "originalCommit": {"oid": "20204cd191be093d999c25050bcf61f355d12645"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2Mjg1Mjk4MA==", "bodyText": "Okay, \u90a3\u6211\u8fd9\u8fb9\u513f\u6ca1\u6709\u5176\u4ed6\u5565\u95ee\u9898\u4e86\uff0c\u4e0a\u9762\u8fd9\u4e2a\u9a8c\u8bc1\u4e5f\u5df2\u7ecf\u5145\u5206\u4e86\u7684\u3002", "url": "https://github.com/alibaba/nacos/pull/3432#discussion_r462852980", "createdAt": "2020-07-30T08:57:51Z", "author": {"login": "zongtanghu"}, "path": "client/src/test/java/com/alibaba/nacos/client/config/listener/impl/ClientWorkerTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.client.config.listener.impl;\n+\n+import com.alibaba.nacos.api.config.listener.Listener;\n+import com.alibaba.nacos.api.exception.NacosException;\n+import com.alibaba.nacos.client.config.filter.impl.ConfigFilterChainManager;\n+import com.alibaba.nacos.client.config.http.MetricsHttpAgent;\n+import com.alibaba.nacos.client.config.impl.ClientWorker;\n+import com.alibaba.nacos.client.utils.ParamUtil;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Properties;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.ScheduledExecutorService;\n+\n+import static org.mockito.Mockito.mock;\n+\n+public class ClientWorkerTest {\n+    \n+    @Mock\n+    ScheduledExecutorService scheduledExecutorService;\n+    \n+    private ClientWorker clientWorker;\n+    \n+    private List<Listener> listeners;\n+    \n+    private final String dataId = \"data\";\n+    \n+    private final String group = \"group\";\n+    \n+    private final String currentLongingTaskCount = \"currentLongingTaskCount\";\n+    \n+    @Before\n+    public void init() {\n+        MockitoAnnotations.initMocks(this);\n+        clientWorker = new ClientWorker(mock(MetricsHttpAgent.class), mock(ConfigFilterChainManager.class),\n+                mock(Properties.class));\n+        try {\n+            Field executorServiceField = clientWorker.getClass().getDeclaredField(\"executorService\");\n+            executorServiceField.setAccessible(true);\n+            Field modifiersField = Field.class.getDeclaredField(\"modifiers\");\n+            modifiersField.setAccessible(true);\n+            modifiersField.setInt(executorServiceField, executorServiceField.getModifiers() & ~Modifier.FINAL);\n+            executorServiceField.set(clientWorker, scheduledExecutorService);\n+            Listener listener = new Listener() {\n+                @Override\n+                public Executor getExecutor() {\n+                    return null;\n+                }\n+                \n+                @Override\n+                public void receiveConfigInfo(String configInfo) {\n+                \n+                }\n+            };\n+            listeners = Arrays.asList(listener);\n+        } catch (NoSuchFieldException e) {\n+            e.printStackTrace();\n+        } catch (IllegalAccessException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+    \n+    @Test\n+    public void testAddLongPollNumberThreads() {\n+        try {\n+            for (int i = 0; i < ParamUtil.getPerTaskConfigSize(); i++) {\n+                clientWorker.addTenantListeners(dataId + i, group, listeners);\n+            }\n+            Field currentLongingTaskCountField = clientWorker.getClass().getDeclaredField(currentLongingTaskCount);\n+            currentLongingTaskCountField.setAccessible(true);\n+            Assert.assertEquals(currentLongingTaskCount, (int) currentLongingTaskCountField.getDouble(clientWorker), 1);\n+            for (int i = (int) ParamUtil.getPerTaskConfigSize(); i < ParamUtil.getPerTaskConfigSize() * 2; i++) {\n+                clientWorker.addTenantListeners(dataId + i, group, listeners);\n+            }\n+            Assert.assertEquals(currentLongingTaskCount, (int) currentLongingTaskCountField.getDouble(clientWorker), 2);\n+        } catch (NacosException e) {\n+            e.printStackTrace();\n+        } catch (IllegalAccessException e) {\n+            e.printStackTrace();\n+        } catch (NoSuchFieldException e) {\n+            e.printStackTrace();\n+        }\n+    }\n+    \n+    @Test\n+    public void testReduceLongPollNumberThreads() {\n+        try {\n+            for (int i = 0; i < ParamUtil.getPerTaskConfigSize() * 3; i++) {\n+                clientWorker.addTenantListeners(dataId + i, group, listeners);\n+            }\n+            Field currentLongingTaskCountField = clientWorker.getClass().getDeclaredField(currentLongingTaskCount);\n+            currentLongingTaskCountField.setAccessible(true);\n+            Assert.assertEquals(currentLongingTaskCount, (int) currentLongingTaskCountField.getDouble(clientWorker), 3);\n+            \n+            for (int i = (int) ParamUtil.getPerTaskConfigSize(); i < ParamUtil.getPerTaskConfigSize() * 2; i++) {\n+                clientWorker.removeTenantListener(dataId + i, group, listeners.get(0));\n+            }\n+            Assert.assertEquals(currentLongingTaskCount, (int) currentLongingTaskCountField.getDouble(clientWorker), 2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjA2OTY3Mw=="}, "originalCommit": {"oid": "20204cd191be093d999c25050bcf61f355d12645"}, "originalPosition": 122}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDAxNjg5OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/com/alibaba/nacos/client/config/impl/ClientWorker.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwOTozNzozM1rOG6CZZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwOTozODoyMlrOG6Ca-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUwOTg2Mg==", "bodyText": "\u6ce8\u91ca\u91cc\u9762\uff0c\u628avalue\u503c\u5bf9\u5e94\u7684\u542b\u4e49\u4e5f\u7b80\u8981\u5199\u4e0b\u5427\uff0ckey\u548cvalue\u6b63\u597d\u5bf9\u5e94\u8d77\u6765\u561b\uff1b", "url": "https://github.com/alibaba/nacos/pull/3432#discussion_r463509862", "createdAt": "2020-07-31T09:37:33Z", "author": {"login": "zongtanghu"}, "path": "client/src/main/java/com/alibaba/nacos/client/config/impl/ClientWorker.java", "diffHunk": "@@ -687,6 +752,12 @@ private void setHealthServer(boolean isHealthServer) {\n     private final AtomicReference<Map<String, CacheData>> cacheMap = new AtomicReference<Map<String, CacheData>>(\n             new HashMap<String, CacheData>());\n     \n+    /**\n+     * Mark whether the thread corresponding to TasKid is running. key -> taskId", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcaa68c15d6dc57603479bd51b503455d9b57151"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUxMDI2Nw==", "bodyText": "\u5176\u4ed6\u7684\u8bdd\uff0c\u6211\u8fd9\u8fb9\u513f\u6ca1\u6709\u95ee\u9898\u4e86\uff1b", "url": "https://github.com/alibaba/nacos/pull/3432#discussion_r463510267", "createdAt": "2020-07-31T09:38:22Z", "author": {"login": "zongtanghu"}, "path": "client/src/main/java/com/alibaba/nacos/client/config/impl/ClientWorker.java", "diffHunk": "@@ -687,6 +752,12 @@ private void setHealthServer(boolean isHealthServer) {\n     private final AtomicReference<Map<String, CacheData>> cacheMap = new AtomicReference<Map<String, CacheData>>(\n             new HashMap<String, CacheData>());\n     \n+    /**\n+     * Mark whether the thread corresponding to TasKid is running. key -> taskId", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUwOTg2Mg=="}, "originalCommit": {"oid": "dcaa68c15d6dc57603479bd51b503455d9b57151"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDMxNzkzOnYy", "diffSide": "RIGHT", "path": "client/src/main/java/com/alibaba/nacos/client/config/impl/ClientWorker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMToyNzozMVrOG6FOvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMToyNzozMVrOG6FOvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU1NjI4Nw==", "bodyText": "\u65e2\u7136\u7528\u4e86taskFlagMap.remove()\u64cd\u4f5c\uff0c\u90a3\u4e48\u5728\u8fd9\u4e2a\u54c8\u5e0c\u8868taskFlagMap\u4e2d\u5176\u5b9e\u5b58\u5728\u90fd\u7684taskId\u5bf9\u5e94\u7684\u4efb\u52a1\u90fd\u662frunning\u72b6\u6001\u4e86\uff0c\u90a3\u4e48\u6211\u5efa\u8bae\u76f4\u63a5\u5c06HashMap -> HashSet \u5e94\u8be5\u662f\u66f4\u4e3a\u5408\u9002\u7684\u3002", "url": "https://github.com/alibaba/nacos/pull/3432#discussion_r463556287", "createdAt": "2020-07-31T11:27:31Z", "author": {"login": "zongtanghu"}, "path": "client/src/main/java/com/alibaba/nacos/client/config/impl/ClientWorker.java", "diffHunk": "@@ -687,6 +752,12 @@ private void setHealthServer(boolean isHealthServer) {\n     private final AtomicReference<Map<String, CacheData>> cacheMap = new AtomicReference<Map<String, CacheData>>(\n             new HashMap<String, CacheData>());\n     \n+    /**\n+     * Mark whether the thread corresponding to TasKid is running. key -> taskId\n+     */\n+    private final AtomicReference<Map<Integer, Boolean>> taskFlagMap = new AtomicReference<Map<Integer, Boolean>>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcaa68c15d6dc57603479bd51b503455d9b57151"}, "originalPosition": 127}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4376, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}