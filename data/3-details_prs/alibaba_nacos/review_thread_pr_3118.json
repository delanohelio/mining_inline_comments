{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2ODU0MjIx", "number": 3118, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMjo1NjozMVrOEG-Y5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMTo1Njo1MVrOEHW0sA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzQ5MDkyOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/alibaba/nacos/common/notify/NotifyCenter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMjo1NjozMVrOGmGcXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMjo1NjozMVrOGmGcXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYwNDYzNw==", "bodyText": "\u8fd9\u91cc\u53ef\u4ee5\u76f4\u63a5\u629b\u5f02\u5e38\u51fa\u53bb\u4e86\uff0c\u4f60\u8fd4\u56denull\u7b49\u7b49\u4e0b\u9762\u4f1a\u6709NPE", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442604637", "createdAt": "2020-06-19T02:56:31Z", "author": {"login": "chuntaojun"}, "path": "common/src/main/java/com/alibaba/nacos/common/notify/NotifyCenter.java", "diffHunk": "@@ -0,0 +1,291 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.notify;\n+\n+import com.alibaba.nacos.common.JustForTest;\n+import com.alibaba.nacos.common.notify.listener.Subscriber;\n+import com.alibaba.nacos.common.notify.listener.SmartSubscriber;\n+import com.alibaba.nacos.common.utils.BiFunction;\n+import com.alibaba.nacos.common.utils.ClassUtils;\n+import com.alibaba.nacos.common.utils.MapUtils;\n+import com.alibaba.nacos.common.utils.ThreadUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import java.util.Set;\n+import java.util.NoSuchElementException;\n+import java.util.Iterator;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ * @author zongtanghu\n+ */\n+@SuppressWarnings(\"all\")\n+public class NotifyCenter {\n+    \n+    private static final Logger LOGGER = LoggerFactory.getLogger(NotifyCenter.class);\n+    \n+    public static int RING_BUFFER_SIZE = 16384;\n+    \n+    public static int SHARE_BUFFER_SIZE = 1024;\n+    \n+    private static final AtomicBoolean CLOSED = new AtomicBoolean(false);\n+    \n+    private static BiFunction<Class<? extends Event>, Integer, EventPublisher> BUILD_FACTORY = null;\n+    \n+    private static final NotifyCenter INSTANCE = new NotifyCenter();\n+    \n+    private EventPublisher sharePublisher;\n+    \n+    private static Class<? extends EventPublisher> clazz = null;\n+    \n+    /**\n+     * Publisher management container\n+     */\n+    private final Map<String, EventPublisher> publisherMap = new ConcurrentHashMap<String, EventPublisher>(16);\n+    \n+    static {\n+        // Internal ArrayBlockingQueue buffer size. For applications with high write throughput,\n+        // this value needs to be increased appropriately. default value is 16384\n+        String ringBufferSizeProperty = \"nacos.core.notify.ring-buffer-size\";\n+        RING_BUFFER_SIZE = Integer.getInteger(ringBufferSizeProperty, 16384);\n+        \n+        // The size of the public publisher's message staging queue buffer\n+        String shareBufferSizeProperty = \"nacos.core.notify.share-buffer-size\";\n+        SHARE_BUFFER_SIZE = Integer.getInteger(shareBufferSizeProperty, 1024);\n+        \n+        final ServiceLoader<EventPublisher> loader = ServiceLoader.load(EventPublisher.class);\n+        Iterator<EventPublisher> iterator = loader.iterator();\n+        \n+        if (iterator.hasNext()) {\n+            clazz = iterator.next().getClass();\n+        } else {\n+            clazz = DefaultPublisher.class;\n+        }\n+        \n+        BUILD_FACTORY = new BiFunction<Class<? extends Event>, Integer, EventPublisher>() {\n+            \n+            @Override\n+            public EventPublisher apply(Class<? extends Event> cls, Integer buffer) {\n+                try {\n+                    EventPublisher publisher = clazz.newInstance();\n+                    publisher.init(cls, buffer);\n+                    return publisher;\n+                } catch (Exception ex) {\n+                    LOGGER.error(\"Service class newInstance has error : {}\", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b84cf02b09a0e153e14f04ebd73aa4c580f1d125"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzUwNzkyOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/alibaba/nacos/common/utils/ClassUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMzowNzo0OVrOGmGmuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzowODozNFrOGmKZQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYwNzI4OA==", "bodyText": "\u629b\u51faNacosRuntimeException\u5427", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442607288", "createdAt": "2020-06-19T03:07:49Z", "author": {"login": "chuntaojun"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/ClassUtils.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.utils;\n+\n+/**\n+ * Utils for Class.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ */\n+@SuppressWarnings(\"all\")\n+public final class ClassUtils {\n+    \n+    public static Class findClassByName(String className) {\n+        try {\n+            return Class.forName(className);\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"this class name not found\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b84cf02b09a0e153e14f04ebd73aa4c580f1d125"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY0NzU0OQ==", "bodyText": "Okay I will fix this in next commit.", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442647549", "createdAt": "2020-06-19T06:04:24Z", "author": {"login": "zongtanghu"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/ClassUtils.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.utils;\n+\n+/**\n+ * Utils for Class.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ */\n+@SuppressWarnings(\"all\")\n+public final class ClassUtils {\n+    \n+    public static Class findClassByName(String className) {\n+        try {\n+            return Class.forName(className);\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"this class name not found\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYwNzI4OA=="}, "originalCommit": {"oid": "b84cf02b09a0e153e14f04ebd73aa4c580f1d125"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY2OTM3Ng==", "bodyText": "\u76ee\u524d\u6211\u53d1\u73b0\u5728\u53e6\u5916\u7684\u4e00\u4e2apr #3114 \u63d0\u53ca\u4f1a\u4ecenacos-common\u6a21\u5757\u4e2d\u79fb\u9664nacos-api\u6a21\u5757\uff0cNacosRuntimeException\u662f\u6240\u5c5enacos-api\u6a21\u5757\u7684\u3002\u8fd9\u91cc\u662f\u4e0d\u662f\u53ef\u4ee5\u4fdd\u7559\u7528RuntimeException\u4f1a\u6bd4\u8f83\u597d", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442669376", "createdAt": "2020-06-19T07:08:34Z", "author": {"login": "Maijh97"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/ClassUtils.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.utils;\n+\n+/**\n+ * Utils for Class.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ */\n+@SuppressWarnings(\"all\")\n+public final class ClassUtils {\n+    \n+    public static Class findClassByName(String className) {\n+        try {\n+            return Class.forName(className);\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"this class name not found\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYwNzI4OA=="}, "originalCommit": {"oid": "b84cf02b09a0e153e14f04ebd73aa4c580f1d125"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzUzMTc5OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/alibaba/nacos/common/notify/DefaultPublisher.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMzoyNDoyNlrOGmG1Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNTo1MzoyNFrOGmI4Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYxMDk2Ng==", "bodyText": "rename to remove maybe better\uff1f", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442610966", "createdAt": "2020-06-19T03:24:26Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/notify/DefaultPublisher.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.notify;\n+\n+import com.alibaba.nacos.common.notify.listener.Subscriber;\n+import com.alibaba.nacos.common.notify.listener.SmartSubscriber;\n+import com.alibaba.nacos.common.utils.ConcurrentHashSet;\n+import com.alibaba.nacos.common.utils.ThreadUtils;\n+import com.alibaba.nacos.common.utils.CollectionUtils;\n+import com.alibaba.nacos.common.utils.ClassUtils;\n+import com.alibaba.nacos.common.utils.Objects;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+\n+import static com.alibaba.nacos.common.notify.NotifyCenter.RING_BUFFER_SIZE;\n+\n+/**\n+ * The default event publisher implementation.\n+ *\n+ * <p>Internally, use {@link ArrayBlockingQueue <Event/>} as a message staging queue.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ * @author zongtanghu\n+ */\n+public class DefaultPublisher extends Thread implements EventPublisher {\n+    \n+    private static final Logger LOGGER = LoggerFactory.getLogger(NotifyCenter.class);\n+    \n+    private volatile boolean initialized = false;\n+    \n+    private volatile boolean shutdown = false;\n+    \n+    private Class<? extends Event> eventType;\n+    \n+    private final ConcurrentHashSet<Subscriber> subscribers = new ConcurrentHashSet<Subscriber>();\n+    \n+    private int queueMaxSize = -1;\n+    \n+    private BlockingQueue<Event> queue;\n+    \n+    private volatile Long lastEventSequence = -1L;\n+    \n+    private final AtomicReferenceFieldUpdater<DefaultPublisher, Long> updater = AtomicReferenceFieldUpdater\n+            .newUpdater(DefaultPublisher.class, Long.class, \"lastEventSequence\");\n+    \n+    @Override\n+    public void init(Class<? extends Event> type, int bufferSize) {\n+        setDaemon(true);\n+        setName(\"nacos.publisher-\" + type.getName());\n+        this.eventType = type;\n+        this.queueMaxSize = bufferSize;\n+        this.queue = new ArrayBlockingQueue<Event>(bufferSize);\n+        start();\n+    }\n+    \n+    public ConcurrentHashSet<Subscriber> getSubscribers() {\n+        return subscribers;\n+    }\n+    \n+    @Override\n+    public synchronized void start() {\n+        if (!initialized) {\n+            // start just called once\n+            super.start();\n+            if (queueMaxSize == -1) {\n+                queueMaxSize = RING_BUFFER_SIZE;\n+            }\n+            initialized = true;\n+        }\n+    }\n+    \n+    public long currentEventSize() {\n+        return queue.size();\n+    }\n+    \n+    @Override\n+    public void run() {\n+        openEventHandler();\n+    }\n+    \n+    void openEventHandler() {\n+        try {\n+            // To ensure that messages are not lost, enable EventHandler when\n+            // waiting for the first Subscriber to register\n+            for (; ; ) {\n+                if (shutdown || hasSubscriber()) {\n+                    break;\n+                }\n+                ThreadUtils.sleep(1000L);\n+            }\n+            \n+            for (; ; ) {\n+                if (shutdown) {\n+                    break;\n+                }\n+                final Event event = queue.take();\n+                receiveEvent(event);\n+                updater.compareAndSet(this, lastEventSequence, Math.max(lastEventSequence, event.sequence()));\n+            }\n+        } catch (Throwable ex) {\n+            LOGGER.error(\"Event listener exception : {}\", ex);\n+        }\n+    }\n+    \n+    private boolean hasSubscriber() {\n+        return CollectionUtils.isNotEmpty(subscribers) || CollectionUtils.isNotEmpty(SMART_SUBSCRIBERS);\n+    }\n+    \n+    @Override\n+    public void addSubscriber(Subscriber subscriber) {\n+        subscribers.add(subscriber);\n+    }\n+    \n+    @Override\n+    public void unSubscriber(Subscriber subscriber) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a74153d5c9d9b7a14585dd15f89283d2d7d723"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY0NDU1MA==", "bodyText": "Okay I will fix this in next commit.", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442644550", "createdAt": "2020-06-19T05:53:24Z", "author": {"login": "zongtanghu"}, "path": "common/src/main/java/com/alibaba/nacos/common/notify/DefaultPublisher.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.notify;\n+\n+import com.alibaba.nacos.common.notify.listener.Subscriber;\n+import com.alibaba.nacos.common.notify.listener.SmartSubscriber;\n+import com.alibaba.nacos.common.utils.ConcurrentHashSet;\n+import com.alibaba.nacos.common.utils.ThreadUtils;\n+import com.alibaba.nacos.common.utils.CollectionUtils;\n+import com.alibaba.nacos.common.utils.ClassUtils;\n+import com.alibaba.nacos.common.utils.Objects;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+\n+import static com.alibaba.nacos.common.notify.NotifyCenter.RING_BUFFER_SIZE;\n+\n+/**\n+ * The default event publisher implementation.\n+ *\n+ * <p>Internally, use {@link ArrayBlockingQueue <Event/>} as a message staging queue.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ * @author zongtanghu\n+ */\n+public class DefaultPublisher extends Thread implements EventPublisher {\n+    \n+    private static final Logger LOGGER = LoggerFactory.getLogger(NotifyCenter.class);\n+    \n+    private volatile boolean initialized = false;\n+    \n+    private volatile boolean shutdown = false;\n+    \n+    private Class<? extends Event> eventType;\n+    \n+    private final ConcurrentHashSet<Subscriber> subscribers = new ConcurrentHashSet<Subscriber>();\n+    \n+    private int queueMaxSize = -1;\n+    \n+    private BlockingQueue<Event> queue;\n+    \n+    private volatile Long lastEventSequence = -1L;\n+    \n+    private final AtomicReferenceFieldUpdater<DefaultPublisher, Long> updater = AtomicReferenceFieldUpdater\n+            .newUpdater(DefaultPublisher.class, Long.class, \"lastEventSequence\");\n+    \n+    @Override\n+    public void init(Class<? extends Event> type, int bufferSize) {\n+        setDaemon(true);\n+        setName(\"nacos.publisher-\" + type.getName());\n+        this.eventType = type;\n+        this.queueMaxSize = bufferSize;\n+        this.queue = new ArrayBlockingQueue<Event>(bufferSize);\n+        start();\n+    }\n+    \n+    public ConcurrentHashSet<Subscriber> getSubscribers() {\n+        return subscribers;\n+    }\n+    \n+    @Override\n+    public synchronized void start() {\n+        if (!initialized) {\n+            // start just called once\n+            super.start();\n+            if (queueMaxSize == -1) {\n+                queueMaxSize = RING_BUFFER_SIZE;\n+            }\n+            initialized = true;\n+        }\n+    }\n+    \n+    public long currentEventSize() {\n+        return queue.size();\n+    }\n+    \n+    @Override\n+    public void run() {\n+        openEventHandler();\n+    }\n+    \n+    void openEventHandler() {\n+        try {\n+            // To ensure that messages are not lost, enable EventHandler when\n+            // waiting for the first Subscriber to register\n+            for (; ; ) {\n+                if (shutdown || hasSubscriber()) {\n+                    break;\n+                }\n+                ThreadUtils.sleep(1000L);\n+            }\n+            \n+            for (; ; ) {\n+                if (shutdown) {\n+                    break;\n+                }\n+                final Event event = queue.take();\n+                receiveEvent(event);\n+                updater.compareAndSet(this, lastEventSequence, Math.max(lastEventSequence, event.sequence()));\n+            }\n+        } catch (Throwable ex) {\n+            LOGGER.error(\"Event listener exception : {}\", ex);\n+        }\n+    }\n+    \n+    private boolean hasSubscriber() {\n+        return CollectionUtils.isNotEmpty(subscribers) || CollectionUtils.isNotEmpty(SMART_SUBSCRIBERS);\n+    }\n+    \n+    @Override\n+    public void addSubscriber(Subscriber subscriber) {\n+        subscribers.add(subscriber);\n+    }\n+    \n+    @Override\n+    public void unSubscriber(Subscriber subscriber) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYxMDk2Ng=="}, "originalCommit": {"oid": "99a74153d5c9d9b7a14585dd15f89283d2d7d723"}, "originalPosition": 134}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzU1NzcyOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/alibaba/nacos/common/notify/Event.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMzo0Mjo0OVrOGmHEqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNDoyMjo0NlrOGmHk6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYxNDk1Mw==", "bodyText": "set final and change name to sequence?", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442614953", "createdAt": "2020-06-19T03:42:49Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/notify/Event.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.notify;\n+\n+import java.io.Serializable;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * An abstract class for event.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ * @author zongtanghu\n+ */\n+@SuppressWarnings(\"all\")\n+public abstract class Event implements Serializable {\n+    \n+    private static final AtomicLong SEQUENCE = new AtomicLong(0);\n+    \n+    private long no = SEQUENCE.getAndIncrement();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a74153d5c9d9b7a14585dd15f89283d2d7d723"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYyMzIxMA==", "bodyText": "Okay I will fix this in next commit.", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442623210", "createdAt": "2020-06-19T04:22:46Z", "author": {"login": "zongtanghu"}, "path": "common/src/main/java/com/alibaba/nacos/common/notify/Event.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.notify;\n+\n+import java.io.Serializable;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * An abstract class for event.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ * @author zongtanghu\n+ */\n+@SuppressWarnings(\"all\")\n+public abstract class Event implements Serializable {\n+    \n+    private static final AtomicLong SEQUENCE = new AtomicLong(0);\n+    \n+    private long no = SEQUENCE.getAndIncrement();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYxNDk1Mw=="}, "originalCommit": {"oid": "99a74153d5c9d9b7a14585dd15f89283d2d7d723"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzU1OTA3OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/alibaba/nacos/common/notify/Event.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMzo0Mzo1NFrOGmHFfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNDozNzo1NFrOGmHxww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYxNTE2NQ==", "bodyText": "If no special situation, please do not use SuppressWarnings", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442615165", "createdAt": "2020-06-19T03:43:54Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/notify/Event.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.notify;\n+\n+import java.io.Serializable;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * An abstract class for event.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ * @author zongtanghu\n+ */\n+@SuppressWarnings(\"all\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a74153d5c9d9b7a14585dd15f89283d2d7d723"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYyNjQ5OQ==", "bodyText": "Okay I will fix this in next commit.", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442626499", "createdAt": "2020-06-19T04:37:54Z", "author": {"login": "zongtanghu"}, "path": "common/src/main/java/com/alibaba/nacos/common/notify/Event.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.notify;\n+\n+import java.io.Serializable;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * An abstract class for event.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ * @author zongtanghu\n+ */\n+@SuppressWarnings(\"all\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYxNTE2NQ=="}, "originalCommit": {"oid": "99a74153d5c9d9b7a14585dd15f89283d2d7d723"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzU3MTA4OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/alibaba/nacos/common/utils/ClassUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMzo1MzowMVrOGmHMrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNDoxNzoxOFrOGmHgWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYxNzAwNw==", "bodyText": "Is there checkstyle warning miss doc\uff1f", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442617007", "createdAt": "2020-06-19T03:53:01Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/ClassUtils.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.utils;\n+\n+/**\n+ * Utils for Class.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ */\n+@SuppressWarnings(\"all\")\n+public final class ClassUtils {\n+    \n+    public static Class findClassByName(String className) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a74153d5c9d9b7a14585dd15f89283d2d7d723"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYyMjA0MQ==", "bodyText": "Okay, I will add java doc.", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442622041", "createdAt": "2020-06-19T04:17:18Z", "author": {"login": "zongtanghu"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/ClassUtils.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.utils;\n+\n+/**\n+ * Utils for Class.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ */\n+@SuppressWarnings(\"all\")\n+public final class ClassUtils {\n+    \n+    public static Class findClassByName(String className) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYxNzAwNw=="}, "originalCommit": {"oid": "99a74153d5c9d9b7a14585dd15f89283d2d7d723"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzU3MTU2OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/alibaba/nacos/common/utils/BiFunction.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMzo1MzoyNFrOGmHNBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNTo1ODo1OVrOGmI-MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYxNzA5NQ==", "bodyText": "remove unused comments", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442617095", "createdAt": "2020-06-19T03:53:24Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/BiFunction.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.utils;\n+\n+/**\n+ * Represents a function that accepts two arguments and produces a result.\n+ *\n+ * <p>This is a <a href=\"package-summary.html\">functional interface</a>\n+ * whose functional method is {@link #apply(Object, Object)}.\n+ *\n+ * @author zongtanghu\n+ *\n+ */\n+public interface BiFunction<T, U, R> {\n+\n+    //    The following utility functions are extracted from <link>org.apache.commons.lang3</link>\n+    //    start\n+\n+    /**\n+     * Applies this function to the given arguments.\n+     *\n+     * @param t the first function argument\n+     * @param u the second function argument\n+     * @return the function result\n+     */\n+    R apply(T t, U u);\n+\n+    //    end", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a74153d5c9d9b7a14585dd15f89283d2d7d723"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYyMjE4OA==", "bodyText": "This comments represent this part is copy from jdk source codes.", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442622188", "createdAt": "2020-06-19T04:18:06Z", "author": {"login": "zongtanghu"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/BiFunction.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.utils;\n+\n+/**\n+ * Represents a function that accepts two arguments and produces a result.\n+ *\n+ * <p>This is a <a href=\"package-summary.html\">functional interface</a>\n+ * whose functional method is {@link #apply(Object, Object)}.\n+ *\n+ * @author zongtanghu\n+ *\n+ */\n+public interface BiFunction<T, U, R> {\n+\n+    //    The following utility functions are extracted from <link>org.apache.commons.lang3</link>\n+    //    start\n+\n+    /**\n+     * Applies this function to the given arguments.\n+     *\n+     * @param t the first function argument\n+     * @param u the second function argument\n+     * @return the function result\n+     */\n+    R apply(T t, U u);\n+\n+    //    end", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYxNzA5NQ=="}, "originalCommit": {"oid": "99a74153d5c9d9b7a14585dd15f89283d2d7d723"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY0NjA2NA==", "bodyText": "Okay I will fix this in next commit.", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442646064", "createdAt": "2020-06-19T05:58:59Z", "author": {"login": "zongtanghu"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/BiFunction.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.utils;\n+\n+/**\n+ * Represents a function that accepts two arguments and produces a result.\n+ *\n+ * <p>This is a <a href=\"package-summary.html\">functional interface</a>\n+ * whose functional method is {@link #apply(Object, Object)}.\n+ *\n+ * @author zongtanghu\n+ *\n+ */\n+public interface BiFunction<T, U, R> {\n+\n+    //    The following utility functions are extracted from <link>org.apache.commons.lang3</link>\n+    //    start\n+\n+    /**\n+     * Applies this function to the given arguments.\n+     *\n+     * @param t the first function argument\n+     * @param u the second function argument\n+     * @return the function result\n+     */\n+    R apply(T t, U u);\n+\n+    //    end", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYxNzA5NQ=="}, "originalCommit": {"oid": "99a74153d5c9d9b7a14585dd15f89283d2d7d723"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzU3MTY0OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/alibaba/nacos/common/utils/BiFunction.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMzo1MzoyOFrOGmHNGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNTo1ODo1NVrOGmI-Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYxNzExMg==", "bodyText": "remove unused comments", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442617112", "createdAt": "2020-06-19T03:53:28Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/BiFunction.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.utils;\n+\n+/**\n+ * Represents a function that accepts two arguments and produces a result.\n+ *\n+ * <p>This is a <a href=\"package-summary.html\">functional interface</a>\n+ * whose functional method is {@link #apply(Object, Object)}.\n+ *\n+ * @author zongtanghu\n+ *\n+ */\n+public interface BiFunction<T, U, R> {\n+\n+    //    The following utility functions are extracted from <link>org.apache.commons.lang3</link>\n+    //    start", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a74153d5c9d9b7a14585dd15f89283d2d7d723"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYyMjI0MQ==", "bodyText": "This comments represent this part is copy from jdk source codes.", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442622241", "createdAt": "2020-06-19T04:18:17Z", "author": {"login": "zongtanghu"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/BiFunction.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.utils;\n+\n+/**\n+ * Represents a function that accepts two arguments and produces a result.\n+ *\n+ * <p>This is a <a href=\"package-summary.html\">functional interface</a>\n+ * whose functional method is {@link #apply(Object, Object)}.\n+ *\n+ * @author zongtanghu\n+ *\n+ */\n+public interface BiFunction<T, U, R> {\n+\n+    //    The following utility functions are extracted from <link>org.apache.commons.lang3</link>\n+    //    start", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYxNzExMg=="}, "originalCommit": {"oid": "99a74153d5c9d9b7a14585dd15f89283d2d7d723"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY0NjA0Mg==", "bodyText": "Okay I will fix this in next commit.", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442646042", "createdAt": "2020-06-19T05:58:55Z", "author": {"login": "zongtanghu"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/BiFunction.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.utils;\n+\n+/**\n+ * Represents a function that accepts two arguments and produces a result.\n+ *\n+ * <p>This is a <a href=\"package-summary.html\">functional interface</a>\n+ * whose functional method is {@link #apply(Object, Object)}.\n+ *\n+ * @author zongtanghu\n+ *\n+ */\n+public interface BiFunction<T, U, R> {\n+\n+    //    The following utility functions are extracted from <link>org.apache.commons.lang3</link>\n+    //    start", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYxNzExMg=="}, "originalCommit": {"oid": "99a74153d5c9d9b7a14585dd15f89283d2d7d723"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1NzU4NDcxOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/alibaba/nacos/common/utils/MapUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNDowMzoxOVrOGmHVNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNjowNDoxN1rOGmJD5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYxOTE4OQ==", "bodyText": "\u6807\u6ce8\u4e0b\uff0c\u975e\u7ebf\u7a0b\u5b89\u5168\u7684\u64cd\u4f5c", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442619189", "createdAt": "2020-06-19T04:03:19Z", "author": {"login": "chuntaojun"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/MapUtils.java", "diffHunk": "@@ -124,4 +124,31 @@ public static void putIfValNoEmpty(Map target, Object key, Object value) {\n         }\n     }\n     \n+    /**\n+     * ComputeIfAbsent lazy load.\n+     *\n+     * @param target target Map data.\n+     * @param key map key.\n+     * @param mappingFunction funtion which is need to be executed.\n+     * @param param1 function's parameter value1.\n+     * @param param2 function's parameter value1.\n+     * @return\n+     */\n+    public static Object computeIfAbsent(Map target, Object key, BiFunction mappingFunction, Object param1,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a74153d5c9d9b7a14585dd15f89283d2d7d723"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY0NzUyNw==", "bodyText": "Okay I will fix this in next commit.", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442647527", "createdAt": "2020-06-19T06:04:17Z", "author": {"login": "zongtanghu"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/MapUtils.java", "diffHunk": "@@ -124,4 +124,31 @@ public static void putIfValNoEmpty(Map target, Object key, Object value) {\n         }\n     }\n     \n+    /**\n+     * ComputeIfAbsent lazy load.\n+     *\n+     * @param target target Map data.\n+     * @param key map key.\n+     * @param mappingFunction funtion which is need to be executed.\n+     * @param param1 function's parameter value1.\n+     * @param param2 function's parameter value1.\n+     * @return\n+     */\n+    public static Object computeIfAbsent(Map target, Object key, BiFunction mappingFunction, Object param1,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYxOTE4OQ=="}, "originalCommit": {"oid": "99a74153d5c9d9b7a14585dd15f89283d2d7d723"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODc2NzcyOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/alibaba/nacos/common/NotThreadSafe.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMjoyMTowOVrOGmS10w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwMTo0NTo1NVrOGmpJlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwNzc2Mw==", "bodyText": "I know you want to figure out some method may be not thread safe. But I want to know whether is project do like this? I think write some discription in Javadoc is enough.", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442807763", "createdAt": "2020-06-19T12:21:09Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/NotThreadSafe.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Annotation that marks a method as not thread safe.\n+ *\n+ * @author zongtanghu\n+ */\n+@Documented\n+@Target({ElementType.TYPE, ElementType.METHOD})\n+@Retention(RetentionPolicy.SOURCE)\n+public @interface NotThreadSafe {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5f7e6c2315ac3017b6e545eeb2b5c728f3efe5e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkwNjg2NA==", "bodyText": "Some open source project use this annotation to present unsafe method.", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442906864", "createdAt": "2020-06-19T15:30:42Z", "author": {"login": "zongtanghu"}, "path": "common/src/main/java/com/alibaba/nacos/common/NotThreadSafe.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Annotation that marks a method as not thread safe.\n+ *\n+ * @author zongtanghu\n+ */\n+@Documented\n+@Target({ElementType.TYPE, ElementType.METHOD})\n+@Retention(RetentionPolicy.SOURCE)\n+public @interface NotThreadSafe {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwNzc2Mw=="}, "originalCommit": {"oid": "c5f7e6c2315ac3017b6e545eeb2b5c728f3efe5e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3MzI2OA==", "bodyText": "OK", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r443173268", "createdAt": "2020-06-21T01:45:55Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/NotThreadSafe.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Annotation that marks a method as not thread safe.\n+ *\n+ * @author zongtanghu\n+ */\n+@Documented\n+@Target({ElementType.TYPE, ElementType.METHOD})\n+@Retention(RetentionPolicy.SOURCE)\n+public @interface NotThreadSafe {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwNzc2Mw=="}, "originalCommit": {"oid": "c5f7e6c2315ac3017b6e545eeb2b5c728f3efe5e"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODc3NzYyOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/alibaba/nacos/common/notify/Event.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMjoyNDo0MFrOGmS77A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQwMjoyMTo1NFrOGmkQ9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwOTMyNA==", "bodyText": "I mean that  no-->sequence  the constant still is SEQUENCE.", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442809324", "createdAt": "2020-06-19T12:24:40Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/notify/Event.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.notify;\n+\n+import java.io.Serializable;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * An abstract class for event.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ * @author zongtanghu\n+ */\n+@SuppressWarnings({\"PMD.AbstractClassShouldStartWithAbstractNamingRule\", \"PMD.ConstantFieldShouldBeUpperCaseRule\"})\n+public abstract class Event implements Serializable {\n+    \n+    private static final AtomicLong sequence = new AtomicLong(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5f7e6c2315ac3017b6e545eeb2b5c728f3efe5e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjkwNzI1MA==", "bodyText": "Okay, sorry , I disunderstand what's your meaning.", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442907250", "createdAt": "2020-06-19T15:31:25Z", "author": {"login": "zongtanghu"}, "path": "common/src/main/java/com/alibaba/nacos/common/notify/Event.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.notify;\n+\n+import java.io.Serializable;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * An abstract class for event.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ * @author zongtanghu\n+ */\n+@SuppressWarnings({\"PMD.AbstractClassShouldStartWithAbstractNamingRule\", \"PMD.ConstantFieldShouldBeUpperCaseRule\"})\n+public abstract class Event implements Serializable {\n+    \n+    private static final AtomicLong sequence = new AtomicLong(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwOTMyNA=="}, "originalCommit": {"oid": "c5f7e6c2315ac3017b6e545eeb2b5c728f3efe5e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA5MzIzOQ==", "bodyText": "I will fix this in next commit.", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r443093239", "createdAt": "2020-06-20T02:21:54Z", "author": {"login": "zongtanghu"}, "path": "common/src/main/java/com/alibaba/nacos/common/notify/Event.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.notify;\n+\n+import java.io.Serializable;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * An abstract class for event.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ * @author zongtanghu\n+ */\n+@SuppressWarnings({\"PMD.AbstractClassShouldStartWithAbstractNamingRule\", \"PMD.ConstantFieldShouldBeUpperCaseRule\"})\n+public abstract class Event implements Serializable {\n+    \n+    private static final AtomicLong sequence = new AtomicLong(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwOTMyNA=="}, "originalCommit": {"oid": "c5f7e6c2315ac3017b6e545eeb2b5c728f3efe5e"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODc4NDI1OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/alibaba/nacos/common/notify/NotifyCenter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMjoyNjo0NlrOGmS_6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMjoyNjo0NlrOGmS_6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMDM0NQ==", "bodyText": "Why you add this SuppressWarnings", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442810345", "createdAt": "2020-06-19T12:26:46Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/notify/NotifyCenter.java", "diffHunk": "@@ -0,0 +1,297 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.notify;\n+\n+import com.alibaba.nacos.api.exception.NacosException;\n+import com.alibaba.nacos.common.JustForTest;\n+import com.alibaba.nacos.common.notify.listener.Subscriber;\n+import com.alibaba.nacos.common.notify.listener.SmartSubscriber;\n+import com.alibaba.nacos.common.utils.BiFunction;\n+import com.alibaba.nacos.common.utils.ClassUtils;\n+import com.alibaba.nacos.common.utils.MapUtils;\n+import com.alibaba.nacos.common.utils.ThreadUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import java.util.Set;\n+import java.util.NoSuchElementException;\n+import java.util.Iterator;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static com.alibaba.nacos.api.exception.NacosException.SERVER_ERROR;\n+\n+/**\n+ * Unified Event Notify Center.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ * @author zongtanghu\n+ */\n+@SuppressWarnings(\"PMD.ConstantFieldShouldBeUpperCaseRule\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5f7e6c2315ac3017b6e545eeb2b5c728f3efe5e"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODc4NTQxOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/alibaba/nacos/common/notify/NotifyCenter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMjoyNzoxM1rOGmTArw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQwMjoyMjoxNlrOGmkRBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMDU0Mw==", "bodyText": "No constants variable, use lower.", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442810543", "createdAt": "2020-06-19T12:27:13Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/notify/NotifyCenter.java", "diffHunk": "@@ -0,0 +1,297 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.notify;\n+\n+import com.alibaba.nacos.api.exception.NacosException;\n+import com.alibaba.nacos.common.JustForTest;\n+import com.alibaba.nacos.common.notify.listener.Subscriber;\n+import com.alibaba.nacos.common.notify.listener.SmartSubscriber;\n+import com.alibaba.nacos.common.utils.BiFunction;\n+import com.alibaba.nacos.common.utils.ClassUtils;\n+import com.alibaba.nacos.common.utils.MapUtils;\n+import com.alibaba.nacos.common.utils.ThreadUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import java.util.Set;\n+import java.util.NoSuchElementException;\n+import java.util.Iterator;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static com.alibaba.nacos.api.exception.NacosException.SERVER_ERROR;\n+\n+/**\n+ * Unified Event Notify Center.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ * @author zongtanghu\n+ */\n+@SuppressWarnings(\"PMD.ConstantFieldShouldBeUpperCaseRule\")\n+public class NotifyCenter {\n+    \n+    private static final Logger LOGGER = LoggerFactory.getLogger(NotifyCenter.class);\n+    \n+    public static int RING_BUFFER_SIZE = 16384;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5f7e6c2315ac3017b6e545eeb2b5c728f3efe5e"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA5MzI1Mg==", "bodyText": "I will fix this in next commit.", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r443093252", "createdAt": "2020-06-20T02:22:16Z", "author": {"login": "zongtanghu"}, "path": "common/src/main/java/com/alibaba/nacos/common/notify/NotifyCenter.java", "diffHunk": "@@ -0,0 +1,297 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.notify;\n+\n+import com.alibaba.nacos.api.exception.NacosException;\n+import com.alibaba.nacos.common.JustForTest;\n+import com.alibaba.nacos.common.notify.listener.Subscriber;\n+import com.alibaba.nacos.common.notify.listener.SmartSubscriber;\n+import com.alibaba.nacos.common.utils.BiFunction;\n+import com.alibaba.nacos.common.utils.ClassUtils;\n+import com.alibaba.nacos.common.utils.MapUtils;\n+import com.alibaba.nacos.common.utils.ThreadUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import java.util.Set;\n+import java.util.NoSuchElementException;\n+import java.util.Iterator;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static com.alibaba.nacos.api.exception.NacosException.SERVER_ERROR;\n+\n+/**\n+ * Unified Event Notify Center.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ * @author zongtanghu\n+ */\n+@SuppressWarnings(\"PMD.ConstantFieldShouldBeUpperCaseRule\")\n+public class NotifyCenter {\n+    \n+    private static final Logger LOGGER = LoggerFactory.getLogger(NotifyCenter.class);\n+    \n+    public static int RING_BUFFER_SIZE = 16384;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMDU0Mw=="}, "originalCommit": {"oid": "c5f7e6c2315ac3017b6e545eeb2b5c728f3efe5e"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODc4NTY2OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/alibaba/nacos/common/notify/NotifyCenter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMjoyNzoxN1rOGmTA1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQwMjoyMjoyMlrOGmkRBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMDU4MA==", "bodyText": "No constants variable, use lower.", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442810580", "createdAt": "2020-06-19T12:27:17Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/notify/NotifyCenter.java", "diffHunk": "@@ -0,0 +1,297 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.notify;\n+\n+import com.alibaba.nacos.api.exception.NacosException;\n+import com.alibaba.nacos.common.JustForTest;\n+import com.alibaba.nacos.common.notify.listener.Subscriber;\n+import com.alibaba.nacos.common.notify.listener.SmartSubscriber;\n+import com.alibaba.nacos.common.utils.BiFunction;\n+import com.alibaba.nacos.common.utils.ClassUtils;\n+import com.alibaba.nacos.common.utils.MapUtils;\n+import com.alibaba.nacos.common.utils.ThreadUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import java.util.Set;\n+import java.util.NoSuchElementException;\n+import java.util.Iterator;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static com.alibaba.nacos.api.exception.NacosException.SERVER_ERROR;\n+\n+/**\n+ * Unified Event Notify Center.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ * @author zongtanghu\n+ */\n+@SuppressWarnings(\"PMD.ConstantFieldShouldBeUpperCaseRule\")\n+public class NotifyCenter {\n+    \n+    private static final Logger LOGGER = LoggerFactory.getLogger(NotifyCenter.class);\n+    \n+    public static int RING_BUFFER_SIZE = 16384;\n+    \n+    public static int SHARE_BUFFER_SIZE = 1024;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5f7e6c2315ac3017b6e545eeb2b5c728f3efe5e"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA5MzI1NA==", "bodyText": "I will fix this in next commit.", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r443093254", "createdAt": "2020-06-20T02:22:22Z", "author": {"login": "zongtanghu"}, "path": "common/src/main/java/com/alibaba/nacos/common/notify/NotifyCenter.java", "diffHunk": "@@ -0,0 +1,297 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.notify;\n+\n+import com.alibaba.nacos.api.exception.NacosException;\n+import com.alibaba.nacos.common.JustForTest;\n+import com.alibaba.nacos.common.notify.listener.Subscriber;\n+import com.alibaba.nacos.common.notify.listener.SmartSubscriber;\n+import com.alibaba.nacos.common.utils.BiFunction;\n+import com.alibaba.nacos.common.utils.ClassUtils;\n+import com.alibaba.nacos.common.utils.MapUtils;\n+import com.alibaba.nacos.common.utils.ThreadUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import java.util.Set;\n+import java.util.NoSuchElementException;\n+import java.util.Iterator;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static com.alibaba.nacos.api.exception.NacosException.SERVER_ERROR;\n+\n+/**\n+ * Unified Event Notify Center.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ * @author zongtanghu\n+ */\n+@SuppressWarnings(\"PMD.ConstantFieldShouldBeUpperCaseRule\")\n+public class NotifyCenter {\n+    \n+    private static final Logger LOGGER = LoggerFactory.getLogger(NotifyCenter.class);\n+    \n+    public static int RING_BUFFER_SIZE = 16384;\n+    \n+    public static int SHARE_BUFFER_SIZE = 1024;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMDU4MA=="}, "originalCommit": {"oid": "c5f7e6c2315ac3017b6e545eeb2b5c728f3efe5e"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODc4OTcyOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/alibaba/nacos/common/notify/NotifyCenter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMjoyODozOVrOGmTDYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQwMjoyMjoyOFrOGmkRDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMTIzNQ==", "bodyText": "No constants variable, use lower.", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442811235", "createdAt": "2020-06-19T12:28:39Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/notify/NotifyCenter.java", "diffHunk": "@@ -0,0 +1,297 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.notify;\n+\n+import com.alibaba.nacos.api.exception.NacosException;\n+import com.alibaba.nacos.common.JustForTest;\n+import com.alibaba.nacos.common.notify.listener.Subscriber;\n+import com.alibaba.nacos.common.notify.listener.SmartSubscriber;\n+import com.alibaba.nacos.common.utils.BiFunction;\n+import com.alibaba.nacos.common.utils.ClassUtils;\n+import com.alibaba.nacos.common.utils.MapUtils;\n+import com.alibaba.nacos.common.utils.ThreadUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import java.util.Set;\n+import java.util.NoSuchElementException;\n+import java.util.Iterator;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static com.alibaba.nacos.api.exception.NacosException.SERVER_ERROR;\n+\n+/**\n+ * Unified Event Notify Center.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ * @author zongtanghu\n+ */\n+@SuppressWarnings(\"PMD.ConstantFieldShouldBeUpperCaseRule\")\n+public class NotifyCenter {\n+    \n+    private static final Logger LOGGER = LoggerFactory.getLogger(NotifyCenter.class);\n+    \n+    public static int RING_BUFFER_SIZE = 16384;\n+    \n+    public static int SHARE_BUFFER_SIZE = 1024;\n+    \n+    private static final AtomicBoolean CLOSED = new AtomicBoolean(false);\n+    \n+    private static BiFunction<Class<? extends Event>, Integer, EventPublisher> BUILD_FACTORY = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5f7e6c2315ac3017b6e545eeb2b5c728f3efe5e"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA5MzI2Mw==", "bodyText": "I will fix this in next commit.", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r443093263", "createdAt": "2020-06-20T02:22:28Z", "author": {"login": "zongtanghu"}, "path": "common/src/main/java/com/alibaba/nacos/common/notify/NotifyCenter.java", "diffHunk": "@@ -0,0 +1,297 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.notify;\n+\n+import com.alibaba.nacos.api.exception.NacosException;\n+import com.alibaba.nacos.common.JustForTest;\n+import com.alibaba.nacos.common.notify.listener.Subscriber;\n+import com.alibaba.nacos.common.notify.listener.SmartSubscriber;\n+import com.alibaba.nacos.common.utils.BiFunction;\n+import com.alibaba.nacos.common.utils.ClassUtils;\n+import com.alibaba.nacos.common.utils.MapUtils;\n+import com.alibaba.nacos.common.utils.ThreadUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import java.util.Set;\n+import java.util.NoSuchElementException;\n+import java.util.Iterator;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static com.alibaba.nacos.api.exception.NacosException.SERVER_ERROR;\n+\n+/**\n+ * Unified Event Notify Center.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ * @author zongtanghu\n+ */\n+@SuppressWarnings(\"PMD.ConstantFieldShouldBeUpperCaseRule\")\n+public class NotifyCenter {\n+    \n+    private static final Logger LOGGER = LoggerFactory.getLogger(NotifyCenter.class);\n+    \n+    public static int RING_BUFFER_SIZE = 16384;\n+    \n+    public static int SHARE_BUFFER_SIZE = 1024;\n+    \n+    private static final AtomicBoolean CLOSED = new AtomicBoolean(false);\n+    \n+    private static BiFunction<Class<? extends Event>, Integer, EventPublisher> BUILD_FACTORY = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMTIzNQ=="}, "originalCommit": {"oid": "c5f7e6c2315ac3017b6e545eeb2b5c728f3efe5e"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODc5NjQwOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/alibaba/nacos/common/utils/ClassUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMjozMDo1NlrOGmTHVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQwMjoyOTo0NVrOGmkShg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMjI0Ng==", "bodyText": "Remove SuppressWarnings", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442812246", "createdAt": "2020-06-19T12:30:56Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/ClassUtils.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.utils;\n+\n+import com.alibaba.nacos.api.exception.runtime.NacosRuntimeException;\n+\n+import static com.alibaba.nacos.api.exception.NacosException.SERVER_ERROR;\n+\n+\n+/**\n+ * Utils for Class.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ */\n+@SuppressWarnings(\"all\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5f7e6c2315ac3017b6e545eeb2b5c728f3efe5e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA5MzYzOA==", "bodyText": "I will fix this in next commit.", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r443093638", "createdAt": "2020-06-20T02:29:45Z", "author": {"login": "zongtanghu"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/ClassUtils.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.utils;\n+\n+import com.alibaba.nacos.api.exception.runtime.NacosRuntimeException;\n+\n+import static com.alibaba.nacos.api.exception.NacosException.SERVER_ERROR;\n+\n+\n+/**\n+ * Utils for Class.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ */\n+@SuppressWarnings(\"all\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMjI0Ng=="}, "originalCommit": {"oid": "c5f7e6c2315ac3017b6e545eeb2b5c728f3efe5e"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODc5Nzc5OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/alibaba/nacos/common/utils/BiFunction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMjozMToyMVrOGmTILg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQwMjozMzoxMFrOGmkTUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMjQ2Mg==", "bodyText": "Remove SuppressWarnings.", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442812462", "createdAt": "2020-06-19T12:31:21Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/BiFunction.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.utils;\n+\n+import com.alibaba.nacos.api.exception.NacosException;\n+\n+/**\n+ * Represents a function that accepts two arguments and produces a result.\n+ * The following utility functions are extracted from org.apache.commons.lang3.\n+ *\n+ * <p>This is a <a href=\"package-summary.html\">functional interface</a>\n+ * whose functional method is {@link #apply(Object, Object)}.\n+ *\n+ * @author zongtanghu\n+ *\n+ */\n+@SuppressWarnings(\"PMD.AbstractMethodOrInterfaceMethodMustUseJavadocRule\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5f7e6c2315ac3017b6e545eeb2b5c728f3efe5e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA5Mzg0Mg==", "bodyText": "I will fix this in next commit.", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r443093842", "createdAt": "2020-06-20T02:33:10Z", "author": {"login": "zongtanghu"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/BiFunction.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.utils;\n+\n+import com.alibaba.nacos.api.exception.NacosException;\n+\n+/**\n+ * Represents a function that accepts two arguments and produces a result.\n+ * The following utility functions are extracted from org.apache.commons.lang3.\n+ *\n+ * <p>This is a <a href=\"package-summary.html\">functional interface</a>\n+ * whose functional method is {@link #apply(Object, Object)}.\n+ *\n+ * @author zongtanghu\n+ *\n+ */\n+@SuppressWarnings(\"PMD.AbstractMethodOrInterfaceMethodMustUseJavadocRule\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMjQ2Mg=="}, "originalCommit": {"oid": "c5f7e6c2315ac3017b6e545eeb2b5c728f3efe5e"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1ODc5ODcxOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/alibaba/nacos/common/notify/listener/Subscriber.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMjozMTo0MFrOGmTIww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQwMjozMzoxM1rOGmkTVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMjYxMQ==", "bodyText": "remove SuppressWarnings", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442812611", "createdAt": "2020-06-19T12:31:40Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/notify/listener/Subscriber.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.notify.listener;\n+\n+import com.alibaba.nacos.common.notify.Event;\n+\n+import java.util.concurrent.Executor;\n+\n+/**\n+ * An abstract subscriber class for subscriber interface.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ * @author zongtanghu\n+ */\n+@SuppressWarnings(\"all\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5f7e6c2315ac3017b6e545eeb2b5c728f3efe5e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzA5Mzg0Ng==", "bodyText": "I will fix this in next commit.", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r443093846", "createdAt": "2020-06-20T02:33:13Z", "author": {"login": "zongtanghu"}, "path": "common/src/main/java/com/alibaba/nacos/common/notify/listener/Subscriber.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.notify.listener;\n+\n+import com.alibaba.nacos.common.notify.Event;\n+\n+import java.util.concurrent.Executor;\n+\n+/**\n+ * An abstract subscriber class for subscriber interface.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ * @author zongtanghu\n+ */\n+@SuppressWarnings(\"all\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMjYxMQ=="}, "originalCommit": {"oid": "c5f7e6c2315ac3017b6e545eeb2b5c728f3efe5e"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTE5OTA3OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/alibaba/nacos/common/notify/DefaultPublisher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwMTo1OToxNlrOGmpLlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMzozMToxN1rOGmr_Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3Mzc4Mw==", "bodyText": "Not being empty in the smartSubscribers collection does not imply that there are listeners interested in the event", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r443173783", "createdAt": "2020-06-21T01:59:16Z", "author": {"login": "chuntaojun"}, "path": "common/src/main/java/com/alibaba/nacos/common/notify/DefaultPublisher.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.notify;\n+\n+import com.alibaba.nacos.common.notify.listener.Subscriber;\n+import com.alibaba.nacos.common.notify.listener.SmartSubscriber;\n+import com.alibaba.nacos.common.utils.ConcurrentHashSet;\n+import com.alibaba.nacos.common.utils.ThreadUtils;\n+import com.alibaba.nacos.common.utils.CollectionUtils;\n+import com.alibaba.nacos.common.utils.ClassUtils;\n+import com.alibaba.nacos.common.utils.Objects;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+\n+import static com.alibaba.nacos.common.notify.NotifyCenter.ringBufferSize;\n+\n+/**\n+ * The default event publisher implementation.\n+ *\n+ * <p>Internally, use {@link ArrayBlockingQueue <Event/>} as a message staging queue.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ * @author zongtanghu\n+ */\n+public class DefaultPublisher extends Thread implements EventPublisher {\n+    \n+    private static final Logger LOGGER = LoggerFactory.getLogger(NotifyCenter.class);\n+    \n+    private volatile boolean initialized = false;\n+    \n+    private volatile boolean shutdown = false;\n+    \n+    private Class<? extends Event> eventType;\n+    \n+    private final ConcurrentHashSet<Subscriber> subscribers = new ConcurrentHashSet<Subscriber>();\n+    \n+    private int queueMaxSize = -1;\n+    \n+    private BlockingQueue<Event> queue;\n+    \n+    private volatile Long lastEventSequence = -1L;\n+    \n+    private final AtomicReferenceFieldUpdater<DefaultPublisher, Long> updater = AtomicReferenceFieldUpdater\n+            .newUpdater(DefaultPublisher.class, Long.class, \"lastEventSequence\");\n+    \n+    @Override\n+    public void init(Class<? extends Event> type, int bufferSize) {\n+        setDaemon(true);\n+        setName(\"nacos.publisher-\" + type.getName());\n+        this.eventType = type;\n+        this.queueMaxSize = bufferSize;\n+        this.queue = new ArrayBlockingQueue<Event>(bufferSize);\n+        start();\n+    }\n+    \n+    public ConcurrentHashSet<Subscriber> getSubscribers() {\n+        return subscribers;\n+    }\n+    \n+    @Override\n+    public synchronized void start() {\n+        if (!initialized) {\n+            // start just called once\n+            super.start();\n+            if (queueMaxSize == -1) {\n+                queueMaxSize = ringBufferSize ;\n+            }\n+            initialized = true;\n+        }\n+    }\n+    \n+    public long currentEventSize() {\n+        return queue.size();\n+    }\n+    \n+    @Override\n+    public void run() {\n+        openEventHandler();\n+    }\n+    \n+    void openEventHandler() {\n+        try {\n+            // To ensure that messages are not lost, enable EventHandler when\n+            // waiting for the first Subscriber to register\n+            for (; ; ) {\n+                if (shutdown || hasSubscriber()) {\n+                    break;\n+                }\n+                ThreadUtils.sleep(1000L);\n+            }\n+            \n+            for (; ; ) {\n+                if (shutdown) {\n+                    break;\n+                }\n+                final Event event = queue.take();\n+                receiveEvent(event);\n+                updater.compareAndSet(this, lastEventSequence, Math.max(lastEventSequence, event.sequence()));\n+            }\n+        } catch (Throwable ex) {\n+            LOGGER.error(\"Event listener exception : {}\", ex);\n+        }\n+    }\n+    \n+    private boolean hasSubscriber() {\n+        return CollectionUtils.isNotEmpty(subscribers) || CollectionUtils.isNotEmpty(SMART_SUBSCRIBERS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0517324b26bf1b1d7eba85f6842dedc14af9d80c"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxOTc3MA==", "bodyText": "Okay, this issue has already been resolved in this pr.", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r443219770", "createdAt": "2020-06-21T13:31:17Z", "author": {"login": "zongtanghu"}, "path": "common/src/main/java/com/alibaba/nacos/common/notify/DefaultPublisher.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.notify;\n+\n+import com.alibaba.nacos.common.notify.listener.Subscriber;\n+import com.alibaba.nacos.common.notify.listener.SmartSubscriber;\n+import com.alibaba.nacos.common.utils.ConcurrentHashSet;\n+import com.alibaba.nacos.common.utils.ThreadUtils;\n+import com.alibaba.nacos.common.utils.CollectionUtils;\n+import com.alibaba.nacos.common.utils.ClassUtils;\n+import com.alibaba.nacos.common.utils.Objects;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+\n+import static com.alibaba.nacos.common.notify.NotifyCenter.ringBufferSize;\n+\n+/**\n+ * The default event publisher implementation.\n+ *\n+ * <p>Internally, use {@link ArrayBlockingQueue <Event/>} as a message staging queue.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ * @author zongtanghu\n+ */\n+public class DefaultPublisher extends Thread implements EventPublisher {\n+    \n+    private static final Logger LOGGER = LoggerFactory.getLogger(NotifyCenter.class);\n+    \n+    private volatile boolean initialized = false;\n+    \n+    private volatile boolean shutdown = false;\n+    \n+    private Class<? extends Event> eventType;\n+    \n+    private final ConcurrentHashSet<Subscriber> subscribers = new ConcurrentHashSet<Subscriber>();\n+    \n+    private int queueMaxSize = -1;\n+    \n+    private BlockingQueue<Event> queue;\n+    \n+    private volatile Long lastEventSequence = -1L;\n+    \n+    private final AtomicReferenceFieldUpdater<DefaultPublisher, Long> updater = AtomicReferenceFieldUpdater\n+            .newUpdater(DefaultPublisher.class, Long.class, \"lastEventSequence\");\n+    \n+    @Override\n+    public void init(Class<? extends Event> type, int bufferSize) {\n+        setDaemon(true);\n+        setName(\"nacos.publisher-\" + type.getName());\n+        this.eventType = type;\n+        this.queueMaxSize = bufferSize;\n+        this.queue = new ArrayBlockingQueue<Event>(bufferSize);\n+        start();\n+    }\n+    \n+    public ConcurrentHashSet<Subscriber> getSubscribers() {\n+        return subscribers;\n+    }\n+    \n+    @Override\n+    public synchronized void start() {\n+        if (!initialized) {\n+            // start just called once\n+            super.start();\n+            if (queueMaxSize == -1) {\n+                queueMaxSize = ringBufferSize ;\n+            }\n+            initialized = true;\n+        }\n+    }\n+    \n+    public long currentEventSize() {\n+        return queue.size();\n+    }\n+    \n+    @Override\n+    public void run() {\n+        openEventHandler();\n+    }\n+    \n+    void openEventHandler() {\n+        try {\n+            // To ensure that messages are not lost, enable EventHandler when\n+            // waiting for the first Subscriber to register\n+            for (; ; ) {\n+                if (shutdown || hasSubscriber()) {\n+                    break;\n+                }\n+                ThreadUtils.sleep(1000L);\n+            }\n+            \n+            for (; ; ) {\n+                if (shutdown) {\n+                    break;\n+                }\n+                final Event event = queue.take();\n+                receiveEvent(event);\n+                updater.compareAndSet(this, lastEventSequence, Math.max(lastEventSequence, event.sequence()));\n+            }\n+        } catch (Throwable ex) {\n+            LOGGER.error(\"Event listener exception : {}\", ex);\n+        }\n+    }\n+    \n+    private boolean hasSubscriber() {\n+        return CollectionUtils.isNotEmpty(subscribers) || CollectionUtils.isNotEmpty(SMART_SUBSCRIBERS);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3Mzc4Mw=="}, "originalCommit": {"oid": "0517324b26bf1b1d7eba85f6842dedc14af9d80c"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTQ5MzkzOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/alibaba/nacos/common/notify/NotifyCenter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMTo1NjoyMFrOGmrhlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMzozODoyMVrOGmsBrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxMjE4Mw==", "bodyText": "delete SMART_SUBSCRIBERS", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r443212183", "createdAt": "2020-06-21T11:56:20Z", "author": {"login": "chuntaojun"}, "path": "common/src/main/java/com/alibaba/nacos/common/notify/NotifyCenter.java", "diffHunk": "@@ -0,0 +1,331 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.notify;\n+\n+import com.alibaba.nacos.api.exception.NacosException;\n+import com.alibaba.nacos.common.JustForTest;\n+import com.alibaba.nacos.common.notify.listener.Subscriber;\n+import com.alibaba.nacos.common.notify.listener.SmartSubscriber;\n+import com.alibaba.nacos.common.utils.BiFunction;\n+import com.alibaba.nacos.common.utils.ClassUtils;\n+import com.alibaba.nacos.common.utils.MapUtils;\n+import com.alibaba.nacos.common.utils.ThreadUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import java.util.Set;\n+import java.util.NoSuchElementException;\n+import java.util.Iterator;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static com.alibaba.nacos.api.exception.NacosException.SERVER_ERROR;\n+\n+/**\n+ * Unified Event Notify Center.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ * @author zongtanghu\n+ */\n+public class NotifyCenter {\n+    \n+    private static final Logger LOGGER = LoggerFactory.getLogger(NotifyCenter.class);\n+    \n+    public static int ringBufferSize = 16384;\n+    \n+    public static int shareBufferSize = 1024;\n+    \n+    private static final AtomicBoolean CLOSED = new AtomicBoolean(false);\n+    \n+    private static BiFunction<Class<? extends Event>, Integer, EventPublisher> publisherFactory = null;\n+    \n+    private static final NotifyCenter INSTANCE = new NotifyCenter();\n+    \n+    private EventPublisher sharePublisher;\n+    \n+    private static Class<? extends EventPublisher> clazz = null;\n+    \n+    /**\n+     * Publisher management container.\n+     */\n+    private final Map<String, EventPublisher> publisherMap = new ConcurrentHashMap<String, EventPublisher>(16);\n+    \n+    static {\n+        // Internal ArrayBlockingQueue buffer size. For applications with high write throughput,\n+        // this value needs to be increased appropriately. default value is 16384\n+        String ringBufferSizeProperty = \"nacos.core.notify.ring-buffer-size\";\n+        ringBufferSize = Integer.getInteger(ringBufferSizeProperty, 16384);\n+        \n+        // The size of the public publisher's message staging queue buffer\n+        String shareBufferSizeProperty = \"nacos.core.notify.share-buffer-size\";\n+        shareBufferSize = Integer.getInteger(shareBufferSizeProperty, 1024);\n+        \n+        final ServiceLoader<EventPublisher> loader = ServiceLoader.load(EventPublisher.class);\n+        Iterator<EventPublisher> iterator = loader.iterator();\n+        \n+        if (iterator.hasNext()) {\n+            clazz = iterator.next().getClass();\n+        } else {\n+            clazz = DefaultPublisher.class;\n+        }\n+        \n+        publisherFactory = new BiFunction<Class<? extends Event>, Integer, EventPublisher>() {\n+            \n+            @Override\n+            public EventPublisher apply(Class<? extends Event> cls, Integer buffer) throws NacosException {\n+                try {\n+                    EventPublisher publisher = clazz.newInstance();\n+                    publisher.init(cls, buffer);\n+                    return publisher;\n+                } catch (Throwable ex) {\n+                    LOGGER.error(\"Service class newInstance has error : {}\", ex);\n+                    throw new NacosException(SERVER_ERROR, ex);\n+                }\n+            }\n+        };\n+        \n+        try {\n+            INSTANCE.sharePublisher = publisherFactory.apply(SlowEvent.class, shareBufferSize);\n+        } catch (Throwable ex) {\n+            LOGGER.error(\"Service class newInstance has error : {}\", ex);\n+        }\n+        \n+        ThreadUtils.addShutdownHook(new Runnable() {\n+            @Override\n+            public void run() {\n+                shutdown();\n+            }\n+        });\n+    }\n+    \n+    @JustForTest\n+    public static Map<String, EventPublisher> getPublisherMap() {\n+        return INSTANCE.publisherMap;\n+    }\n+    \n+    @JustForTest\n+    public static EventPublisher getPublisher(Class<? extends Event> topic) {\n+        if (ClassUtils.isAssignableFrom(SlowEvent.class, topic)) {\n+            return INSTANCE.sharePublisher;\n+        }\n+        return INSTANCE.publisherMap.get(topic.getCanonicalName());\n+    }\n+    \n+    @JustForTest\n+    public static Set<SmartSubscriber> getSmartSubscribers() {\n+        return EventPublisher.SMART_SUBSCRIBERS;\n+    }\n+    \n+    @JustForTest\n+    public static EventPublisher getSharePublisher() {\n+        return INSTANCE.sharePublisher;\n+    }\n+    \n+    /**\n+     * Shutdown the serveral publisher instance which notifycenter has.\n+     */\n+    public static void shutdown() {\n+        if (!CLOSED.compareAndSet(false, true)) {\n+            return;\n+        }\n+        LOGGER.warn(\"[NotifyCenter] Start destroying Publisher\");\n+        \n+        for (Map.Entry<String, EventPublisher> entry : INSTANCE.publisherMap.entrySet()) {\n+            try {\n+                EventPublisher eventPublisher = entry.getValue();\n+                eventPublisher.shutdown();\n+            } catch (Throwable e) {\n+                LOGGER.error(\"[EventPublisher] shutdown has error : {}\", e);\n+            }\n+        }\n+        \n+        try {\n+            INSTANCE.sharePublisher.shutdown();\n+        } catch (Throwable e) {\n+            LOGGER.error(\"[SharePublisher] shutdown has error : {}\", e);\n+        }\n+        \n+        LOGGER.warn(\"[NotifyCenter] Destruction of the end\");\n+    }\n+    \n+    /**\n+     * Register a Subscriber. If the Publisher concerned by the Subscriber does not exist, then PublihserMap will\n+     * preempt a placeholder Publisher first.\n+     *\n+     * @param consumer subscriber\n+     * @param <T>      event type\n+     */\n+    public static <T> void registerSubscriber(final Subscriber consumer) throws NacosException {\n+        final Class<? extends Event> cls = consumer.subscribeType();\n+        // If you want to listen to multiple events, you do it separately,\n+        // based on subclass's subscribeTypes method return list, it can register to publisher.\n+        if (consumer instanceof SmartSubscriber) {\n+            EventPublisher.SMART_SUBSCRIBERS.add((SmartSubscriber) consumer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85625cc8213094b8e46bc96455be6727ed72d583"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyMDM5Ng==", "bodyText": "I will remove this in next commit.", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r443220396", "createdAt": "2020-06-21T13:38:21Z", "author": {"login": "zongtanghu"}, "path": "common/src/main/java/com/alibaba/nacos/common/notify/NotifyCenter.java", "diffHunk": "@@ -0,0 +1,331 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.notify;\n+\n+import com.alibaba.nacos.api.exception.NacosException;\n+import com.alibaba.nacos.common.JustForTest;\n+import com.alibaba.nacos.common.notify.listener.Subscriber;\n+import com.alibaba.nacos.common.notify.listener.SmartSubscriber;\n+import com.alibaba.nacos.common.utils.BiFunction;\n+import com.alibaba.nacos.common.utils.ClassUtils;\n+import com.alibaba.nacos.common.utils.MapUtils;\n+import com.alibaba.nacos.common.utils.ThreadUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import java.util.Set;\n+import java.util.NoSuchElementException;\n+import java.util.Iterator;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static com.alibaba.nacos.api.exception.NacosException.SERVER_ERROR;\n+\n+/**\n+ * Unified Event Notify Center.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ * @author zongtanghu\n+ */\n+public class NotifyCenter {\n+    \n+    private static final Logger LOGGER = LoggerFactory.getLogger(NotifyCenter.class);\n+    \n+    public static int ringBufferSize = 16384;\n+    \n+    public static int shareBufferSize = 1024;\n+    \n+    private static final AtomicBoolean CLOSED = new AtomicBoolean(false);\n+    \n+    private static BiFunction<Class<? extends Event>, Integer, EventPublisher> publisherFactory = null;\n+    \n+    private static final NotifyCenter INSTANCE = new NotifyCenter();\n+    \n+    private EventPublisher sharePublisher;\n+    \n+    private static Class<? extends EventPublisher> clazz = null;\n+    \n+    /**\n+     * Publisher management container.\n+     */\n+    private final Map<String, EventPublisher> publisherMap = new ConcurrentHashMap<String, EventPublisher>(16);\n+    \n+    static {\n+        // Internal ArrayBlockingQueue buffer size. For applications with high write throughput,\n+        // this value needs to be increased appropriately. default value is 16384\n+        String ringBufferSizeProperty = \"nacos.core.notify.ring-buffer-size\";\n+        ringBufferSize = Integer.getInteger(ringBufferSizeProperty, 16384);\n+        \n+        // The size of the public publisher's message staging queue buffer\n+        String shareBufferSizeProperty = \"nacos.core.notify.share-buffer-size\";\n+        shareBufferSize = Integer.getInteger(shareBufferSizeProperty, 1024);\n+        \n+        final ServiceLoader<EventPublisher> loader = ServiceLoader.load(EventPublisher.class);\n+        Iterator<EventPublisher> iterator = loader.iterator();\n+        \n+        if (iterator.hasNext()) {\n+            clazz = iterator.next().getClass();\n+        } else {\n+            clazz = DefaultPublisher.class;\n+        }\n+        \n+        publisherFactory = new BiFunction<Class<? extends Event>, Integer, EventPublisher>() {\n+            \n+            @Override\n+            public EventPublisher apply(Class<? extends Event> cls, Integer buffer) throws NacosException {\n+                try {\n+                    EventPublisher publisher = clazz.newInstance();\n+                    publisher.init(cls, buffer);\n+                    return publisher;\n+                } catch (Throwable ex) {\n+                    LOGGER.error(\"Service class newInstance has error : {}\", ex);\n+                    throw new NacosException(SERVER_ERROR, ex);\n+                }\n+            }\n+        };\n+        \n+        try {\n+            INSTANCE.sharePublisher = publisherFactory.apply(SlowEvent.class, shareBufferSize);\n+        } catch (Throwable ex) {\n+            LOGGER.error(\"Service class newInstance has error : {}\", ex);\n+        }\n+        \n+        ThreadUtils.addShutdownHook(new Runnable() {\n+            @Override\n+            public void run() {\n+                shutdown();\n+            }\n+        });\n+    }\n+    \n+    @JustForTest\n+    public static Map<String, EventPublisher> getPublisherMap() {\n+        return INSTANCE.publisherMap;\n+    }\n+    \n+    @JustForTest\n+    public static EventPublisher getPublisher(Class<? extends Event> topic) {\n+        if (ClassUtils.isAssignableFrom(SlowEvent.class, topic)) {\n+            return INSTANCE.sharePublisher;\n+        }\n+        return INSTANCE.publisherMap.get(topic.getCanonicalName());\n+    }\n+    \n+    @JustForTest\n+    public static Set<SmartSubscriber> getSmartSubscribers() {\n+        return EventPublisher.SMART_SUBSCRIBERS;\n+    }\n+    \n+    @JustForTest\n+    public static EventPublisher getSharePublisher() {\n+        return INSTANCE.sharePublisher;\n+    }\n+    \n+    /**\n+     * Shutdown the serveral publisher instance which notifycenter has.\n+     */\n+    public static void shutdown() {\n+        if (!CLOSED.compareAndSet(false, true)) {\n+            return;\n+        }\n+        LOGGER.warn(\"[NotifyCenter] Start destroying Publisher\");\n+        \n+        for (Map.Entry<String, EventPublisher> entry : INSTANCE.publisherMap.entrySet()) {\n+            try {\n+                EventPublisher eventPublisher = entry.getValue();\n+                eventPublisher.shutdown();\n+            } catch (Throwable e) {\n+                LOGGER.error(\"[EventPublisher] shutdown has error : {}\", e);\n+            }\n+        }\n+        \n+        try {\n+            INSTANCE.sharePublisher.shutdown();\n+        } catch (Throwable e) {\n+            LOGGER.error(\"[SharePublisher] shutdown has error : {}\", e);\n+        }\n+        \n+        LOGGER.warn(\"[NotifyCenter] Destruction of the end\");\n+    }\n+    \n+    /**\n+     * Register a Subscriber. If the Publisher concerned by the Subscriber does not exist, then PublihserMap will\n+     * preempt a placeholder Publisher first.\n+     *\n+     * @param consumer subscriber\n+     * @param <T>      event type\n+     */\n+    public static <T> void registerSubscriber(final Subscriber consumer) throws NacosException {\n+        final Class<? extends Event> cls = consumer.subscribeType();\n+        // If you want to listen to multiple events, you do it separately,\n+        // based on subclass's subscribeTypes method return list, it can register to publisher.\n+        if (consumer instanceof SmartSubscriber) {\n+            EventPublisher.SMART_SUBSCRIBERS.add((SmartSubscriber) consumer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxMjE4Mw=="}, "originalCommit": {"oid": "85625cc8213094b8e46bc96455be6727ed72d583"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTQ5NDI0OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/alibaba/nacos/common/notify/NotifyCenter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMTo1Njo1MlrOGmrhwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMzozODoyNFrOGmsBtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxMjIyNA==", "bodyText": "delete SMART_SUBSCRIBERS", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r443212224", "createdAt": "2020-06-21T11:56:52Z", "author": {"login": "chuntaojun"}, "path": "common/src/main/java/com/alibaba/nacos/common/notify/NotifyCenter.java", "diffHunk": "@@ -0,0 +1,331 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.notify;\n+\n+import com.alibaba.nacos.api.exception.NacosException;\n+import com.alibaba.nacos.common.JustForTest;\n+import com.alibaba.nacos.common.notify.listener.Subscriber;\n+import com.alibaba.nacos.common.notify.listener.SmartSubscriber;\n+import com.alibaba.nacos.common.utils.BiFunction;\n+import com.alibaba.nacos.common.utils.ClassUtils;\n+import com.alibaba.nacos.common.utils.MapUtils;\n+import com.alibaba.nacos.common.utils.ThreadUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import java.util.Set;\n+import java.util.NoSuchElementException;\n+import java.util.Iterator;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static com.alibaba.nacos.api.exception.NacosException.SERVER_ERROR;\n+\n+/**\n+ * Unified Event Notify Center.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ * @author zongtanghu\n+ */\n+public class NotifyCenter {\n+    \n+    private static final Logger LOGGER = LoggerFactory.getLogger(NotifyCenter.class);\n+    \n+    public static int ringBufferSize = 16384;\n+    \n+    public static int shareBufferSize = 1024;\n+    \n+    private static final AtomicBoolean CLOSED = new AtomicBoolean(false);\n+    \n+    private static BiFunction<Class<? extends Event>, Integer, EventPublisher> publisherFactory = null;\n+    \n+    private static final NotifyCenter INSTANCE = new NotifyCenter();\n+    \n+    private EventPublisher sharePublisher;\n+    \n+    private static Class<? extends EventPublisher> clazz = null;\n+    \n+    /**\n+     * Publisher management container.\n+     */\n+    private final Map<String, EventPublisher> publisherMap = new ConcurrentHashMap<String, EventPublisher>(16);\n+    \n+    static {\n+        // Internal ArrayBlockingQueue buffer size. For applications with high write throughput,\n+        // this value needs to be increased appropriately. default value is 16384\n+        String ringBufferSizeProperty = \"nacos.core.notify.ring-buffer-size\";\n+        ringBufferSize = Integer.getInteger(ringBufferSizeProperty, 16384);\n+        \n+        // The size of the public publisher's message staging queue buffer\n+        String shareBufferSizeProperty = \"nacos.core.notify.share-buffer-size\";\n+        shareBufferSize = Integer.getInteger(shareBufferSizeProperty, 1024);\n+        \n+        final ServiceLoader<EventPublisher> loader = ServiceLoader.load(EventPublisher.class);\n+        Iterator<EventPublisher> iterator = loader.iterator();\n+        \n+        if (iterator.hasNext()) {\n+            clazz = iterator.next().getClass();\n+        } else {\n+            clazz = DefaultPublisher.class;\n+        }\n+        \n+        publisherFactory = new BiFunction<Class<? extends Event>, Integer, EventPublisher>() {\n+            \n+            @Override\n+            public EventPublisher apply(Class<? extends Event> cls, Integer buffer) throws NacosException {\n+                try {\n+                    EventPublisher publisher = clazz.newInstance();\n+                    publisher.init(cls, buffer);\n+                    return publisher;\n+                } catch (Throwable ex) {\n+                    LOGGER.error(\"Service class newInstance has error : {}\", ex);\n+                    throw new NacosException(SERVER_ERROR, ex);\n+                }\n+            }\n+        };\n+        \n+        try {\n+            INSTANCE.sharePublisher = publisherFactory.apply(SlowEvent.class, shareBufferSize);\n+        } catch (Throwable ex) {\n+            LOGGER.error(\"Service class newInstance has error : {}\", ex);\n+        }\n+        \n+        ThreadUtils.addShutdownHook(new Runnable() {\n+            @Override\n+            public void run() {\n+                shutdown();\n+            }\n+        });\n+    }\n+    \n+    @JustForTest\n+    public static Map<String, EventPublisher> getPublisherMap() {\n+        return INSTANCE.publisherMap;\n+    }\n+    \n+    @JustForTest\n+    public static EventPublisher getPublisher(Class<? extends Event> topic) {\n+        if (ClassUtils.isAssignableFrom(SlowEvent.class, topic)) {\n+            return INSTANCE.sharePublisher;\n+        }\n+        return INSTANCE.publisherMap.get(topic.getCanonicalName());\n+    }\n+    \n+    @JustForTest\n+    public static Set<SmartSubscriber> getSmartSubscribers() {\n+        return EventPublisher.SMART_SUBSCRIBERS;\n+    }\n+    \n+    @JustForTest\n+    public static EventPublisher getSharePublisher() {\n+        return INSTANCE.sharePublisher;\n+    }\n+    \n+    /**\n+     * Shutdown the serveral publisher instance which notifycenter has.\n+     */\n+    public static void shutdown() {\n+        if (!CLOSED.compareAndSet(false, true)) {\n+            return;\n+        }\n+        LOGGER.warn(\"[NotifyCenter] Start destroying Publisher\");\n+        \n+        for (Map.Entry<String, EventPublisher> entry : INSTANCE.publisherMap.entrySet()) {\n+            try {\n+                EventPublisher eventPublisher = entry.getValue();\n+                eventPublisher.shutdown();\n+            } catch (Throwable e) {\n+                LOGGER.error(\"[EventPublisher] shutdown has error : {}\", e);\n+            }\n+        }\n+        \n+        try {\n+            INSTANCE.sharePublisher.shutdown();\n+        } catch (Throwable e) {\n+            LOGGER.error(\"[SharePublisher] shutdown has error : {}\", e);\n+        }\n+        \n+        LOGGER.warn(\"[NotifyCenter] Destruction of the end\");\n+    }\n+    \n+    /**\n+     * Register a Subscriber. If the Publisher concerned by the Subscriber does not exist, then PublihserMap will\n+     * preempt a placeholder Publisher first.\n+     *\n+     * @param consumer subscriber\n+     * @param <T>      event type\n+     */\n+    public static <T> void registerSubscriber(final Subscriber consumer) throws NacosException {\n+        final Class<? extends Event> cls = consumer.subscribeType();\n+        // If you want to listen to multiple events, you do it separately,\n+        // based on subclass's subscribeTypes method return list, it can register to publisher.\n+        if (consumer instanceof SmartSubscriber) {\n+            EventPublisher.SMART_SUBSCRIBERS.add((SmartSubscriber) consumer);\n+            for (Class<? extends Event> subscribeType : ((SmartSubscriber) consumer).subscribeTypes()) {\n+                addSubscriber(consumer, subscribeType);\n+            }\n+            return;\n+        }\n+        \n+        if (ClassUtils.isAssignableFrom(SlowEvent.class, cls)) {\n+            INSTANCE.sharePublisher.addSubscriber(consumer);\n+            return;\n+        }\n+        \n+        addSubscriber(consumer, consumer.subscribeType());\n+    }\n+    \n+    /**\n+     * Add a subscriber to pusblisher.\n+     *\n+     * @param consumer      subscriber instance.\n+     * @param subscribeType subscribeType.\n+     * @throws NacosException BiFunction mappingFunction may throw a NacosException.\n+     */\n+    private static void addSubscriber(final Subscriber consumer, Class<? extends Event> subscribeType)\n+            throws NacosException {\n+        \n+        final String topic = ClassUtils.getCanonicalName(subscribeType);\n+        MapUtils.computeIfAbsent(INSTANCE.publisherMap, topic, publisherFactory, subscribeType, ringBufferSize);\n+        EventPublisher publisher = INSTANCE.publisherMap.get(topic);\n+        publisher.addSubscriber(consumer);\n+    }\n+    \n+    /**\n+     * Deregister subscriber.\n+     *\n+     * @param consumer subscriber instance.\n+     */\n+    public static <T> void deregisterSubscriber(final Subscriber consumer) {\n+        final Class<? extends Event> cls = consumer.subscribeType();\n+        if (consumer instanceof SmartSubscriber) {\n+            EventPublisher.SMART_SUBSCRIBERS.remove((SmartSubscriber) consumer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85625cc8213094b8e46bc96455be6727ed72d583"}, "originalPosition": 218}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIyMDQwNA==", "bodyText": "I will remove this in next commit.", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r443220404", "createdAt": "2020-06-21T13:38:24Z", "author": {"login": "zongtanghu"}, "path": "common/src/main/java/com/alibaba/nacos/common/notify/NotifyCenter.java", "diffHunk": "@@ -0,0 +1,331 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.notify;\n+\n+import com.alibaba.nacos.api.exception.NacosException;\n+import com.alibaba.nacos.common.JustForTest;\n+import com.alibaba.nacos.common.notify.listener.Subscriber;\n+import com.alibaba.nacos.common.notify.listener.SmartSubscriber;\n+import com.alibaba.nacos.common.utils.BiFunction;\n+import com.alibaba.nacos.common.utils.ClassUtils;\n+import com.alibaba.nacos.common.utils.MapUtils;\n+import com.alibaba.nacos.common.utils.ThreadUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import java.util.Set;\n+import java.util.NoSuchElementException;\n+import java.util.Iterator;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static com.alibaba.nacos.api.exception.NacosException.SERVER_ERROR;\n+\n+/**\n+ * Unified Event Notify Center.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ * @author zongtanghu\n+ */\n+public class NotifyCenter {\n+    \n+    private static final Logger LOGGER = LoggerFactory.getLogger(NotifyCenter.class);\n+    \n+    public static int ringBufferSize = 16384;\n+    \n+    public static int shareBufferSize = 1024;\n+    \n+    private static final AtomicBoolean CLOSED = new AtomicBoolean(false);\n+    \n+    private static BiFunction<Class<? extends Event>, Integer, EventPublisher> publisherFactory = null;\n+    \n+    private static final NotifyCenter INSTANCE = new NotifyCenter();\n+    \n+    private EventPublisher sharePublisher;\n+    \n+    private static Class<? extends EventPublisher> clazz = null;\n+    \n+    /**\n+     * Publisher management container.\n+     */\n+    private final Map<String, EventPublisher> publisherMap = new ConcurrentHashMap<String, EventPublisher>(16);\n+    \n+    static {\n+        // Internal ArrayBlockingQueue buffer size. For applications with high write throughput,\n+        // this value needs to be increased appropriately. default value is 16384\n+        String ringBufferSizeProperty = \"nacos.core.notify.ring-buffer-size\";\n+        ringBufferSize = Integer.getInteger(ringBufferSizeProperty, 16384);\n+        \n+        // The size of the public publisher's message staging queue buffer\n+        String shareBufferSizeProperty = \"nacos.core.notify.share-buffer-size\";\n+        shareBufferSize = Integer.getInteger(shareBufferSizeProperty, 1024);\n+        \n+        final ServiceLoader<EventPublisher> loader = ServiceLoader.load(EventPublisher.class);\n+        Iterator<EventPublisher> iterator = loader.iterator();\n+        \n+        if (iterator.hasNext()) {\n+            clazz = iterator.next().getClass();\n+        } else {\n+            clazz = DefaultPublisher.class;\n+        }\n+        \n+        publisherFactory = new BiFunction<Class<? extends Event>, Integer, EventPublisher>() {\n+            \n+            @Override\n+            public EventPublisher apply(Class<? extends Event> cls, Integer buffer) throws NacosException {\n+                try {\n+                    EventPublisher publisher = clazz.newInstance();\n+                    publisher.init(cls, buffer);\n+                    return publisher;\n+                } catch (Throwable ex) {\n+                    LOGGER.error(\"Service class newInstance has error : {}\", ex);\n+                    throw new NacosException(SERVER_ERROR, ex);\n+                }\n+            }\n+        };\n+        \n+        try {\n+            INSTANCE.sharePublisher = publisherFactory.apply(SlowEvent.class, shareBufferSize);\n+        } catch (Throwable ex) {\n+            LOGGER.error(\"Service class newInstance has error : {}\", ex);\n+        }\n+        \n+        ThreadUtils.addShutdownHook(new Runnable() {\n+            @Override\n+            public void run() {\n+                shutdown();\n+            }\n+        });\n+    }\n+    \n+    @JustForTest\n+    public static Map<String, EventPublisher> getPublisherMap() {\n+        return INSTANCE.publisherMap;\n+    }\n+    \n+    @JustForTest\n+    public static EventPublisher getPublisher(Class<? extends Event> topic) {\n+        if (ClassUtils.isAssignableFrom(SlowEvent.class, topic)) {\n+            return INSTANCE.sharePublisher;\n+        }\n+        return INSTANCE.publisherMap.get(topic.getCanonicalName());\n+    }\n+    \n+    @JustForTest\n+    public static Set<SmartSubscriber> getSmartSubscribers() {\n+        return EventPublisher.SMART_SUBSCRIBERS;\n+    }\n+    \n+    @JustForTest\n+    public static EventPublisher getSharePublisher() {\n+        return INSTANCE.sharePublisher;\n+    }\n+    \n+    /**\n+     * Shutdown the serveral publisher instance which notifycenter has.\n+     */\n+    public static void shutdown() {\n+        if (!CLOSED.compareAndSet(false, true)) {\n+            return;\n+        }\n+        LOGGER.warn(\"[NotifyCenter] Start destroying Publisher\");\n+        \n+        for (Map.Entry<String, EventPublisher> entry : INSTANCE.publisherMap.entrySet()) {\n+            try {\n+                EventPublisher eventPublisher = entry.getValue();\n+                eventPublisher.shutdown();\n+            } catch (Throwable e) {\n+                LOGGER.error(\"[EventPublisher] shutdown has error : {}\", e);\n+            }\n+        }\n+        \n+        try {\n+            INSTANCE.sharePublisher.shutdown();\n+        } catch (Throwable e) {\n+            LOGGER.error(\"[SharePublisher] shutdown has error : {}\", e);\n+        }\n+        \n+        LOGGER.warn(\"[NotifyCenter] Destruction of the end\");\n+    }\n+    \n+    /**\n+     * Register a Subscriber. If the Publisher concerned by the Subscriber does not exist, then PublihserMap will\n+     * preempt a placeholder Publisher first.\n+     *\n+     * @param consumer subscriber\n+     * @param <T>      event type\n+     */\n+    public static <T> void registerSubscriber(final Subscriber consumer) throws NacosException {\n+        final Class<? extends Event> cls = consumer.subscribeType();\n+        // If you want to listen to multiple events, you do it separately,\n+        // based on subclass's subscribeTypes method return list, it can register to publisher.\n+        if (consumer instanceof SmartSubscriber) {\n+            EventPublisher.SMART_SUBSCRIBERS.add((SmartSubscriber) consumer);\n+            for (Class<? extends Event> subscribeType : ((SmartSubscriber) consumer).subscribeTypes()) {\n+                addSubscriber(consumer, subscribeType);\n+            }\n+            return;\n+        }\n+        \n+        if (ClassUtils.isAssignableFrom(SlowEvent.class, cls)) {\n+            INSTANCE.sharePublisher.addSubscriber(consumer);\n+            return;\n+        }\n+        \n+        addSubscriber(consumer, consumer.subscribeType());\n+    }\n+    \n+    /**\n+     * Add a subscriber to pusblisher.\n+     *\n+     * @param consumer      subscriber instance.\n+     * @param subscribeType subscribeType.\n+     * @throws NacosException BiFunction mappingFunction may throw a NacosException.\n+     */\n+    private static void addSubscriber(final Subscriber consumer, Class<? extends Event> subscribeType)\n+            throws NacosException {\n+        \n+        final String topic = ClassUtils.getCanonicalName(subscribeType);\n+        MapUtils.computeIfAbsent(INSTANCE.publisherMap, topic, publisherFactory, subscribeType, ringBufferSize);\n+        EventPublisher publisher = INSTANCE.publisherMap.get(topic);\n+        publisher.addSubscriber(consumer);\n+    }\n+    \n+    /**\n+     * Deregister subscriber.\n+     *\n+     * @param consumer subscriber instance.\n+     */\n+    public static <T> void deregisterSubscriber(final Subscriber consumer) {\n+        final Class<? extends Event> cls = consumer.subscribeType();\n+        if (consumer instanceof SmartSubscriber) {\n+            EventPublisher.SMART_SUBSCRIBERS.remove((SmartSubscriber) consumer);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxMjIyNA=="}, "originalCommit": {"oid": "85625cc8213094b8e46bc96455be6727ed72d583"}, "originalPosition": 218}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4422, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}