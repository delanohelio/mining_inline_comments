{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3NTg2MDQ4", "number": 3138, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMTo0NjowN1rOEHZ-dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNDowOToxNlrOEINfHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjAxMDc3OnYy", "diffSide": "RIGHT", "path": "client/src/test/java/com/alibaba/nacos/client/NamingTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMTo0NjowN1rOGmv0FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMTo0NjowN1rOGmv0FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4MjQ1Mg==", "bodyText": "When the latch will count down?", "url": "https://github.com/alibaba/nacos/pull/3138#discussion_r443282452", "createdAt": "2020-06-22T01:46:07Z", "author": {"login": "KomachiSion"}, "path": "client/src/test/java/com/alibaba/nacos/client/NamingTest.java", "diffHunk": "@@ -61,7 +62,8 @@ public void testServiceList() throws Exception {\n \n         System.out.println(list);\n \n-        ThreadUtils.sleep(60_000L);\n+        CountDownLatch latch = new CountDownLatch(1);\n+        latch.await();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c0f291506866bf0841cd6799febef75217062f6"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjAxNTI4OnYy", "diffSide": "RIGHT", "path": "config/src/main/java/com/alibaba/nacos/config/server/filter/CurcuitFilter.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMTo1MDoxOFrOGmv2vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMTo1MDoxOFrOGmv2vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI4MzEzNQ==", "bodyText": "blank line between varaible.", "url": "https://github.com/alibaba/nacos/pull/3138#discussion_r443283135", "createdAt": "2020-06-22T01:50:18Z", "author": {"login": "KomachiSion"}, "path": "config/src/main/java/com/alibaba/nacos/config/server/filter/CurcuitFilter.java", "diffHunk": "@@ -53,9 +51,11 @@\n  *\n  * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n  */\n-@SuppressWarnings(\"all\")\n public class CurcuitFilter implements Filter {\n \n+\tprivate volatile boolean isDowngrading = false;\n+\tprivate volatile boolean isOpenService = false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c0f291506866bf0841cd6799febef75217062f6"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDQ1MDIwOnYy", "diffSide": "RIGHT", "path": "core/src/main/java/com/alibaba/nacos/core/utils/DiskUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNDowOToxNlrOGoCRCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNDoxMjoxNFrOGoCTuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzMzM1Mw==", "bodyText": "Is the two method copied?", "url": "https://github.com/alibaba/nacos/pull/3138#discussion_r444633353", "createdAt": "2020-06-24T04:09:16Z", "author": {"login": "KomachiSion"}, "path": "core/src/main/java/com/alibaba/nacos/core/utils/DiskUtils.java", "diffHunk": "@@ -87,6 +90,81 @@ public static void touch(File file) throws IOException {\n         FileUtils.touch(file);\n     }\n     \n+    /**\n+     * Creates a new empty file in the specified directory, using the given\n+     * prefix and suffix strings to generate its name. The resulting\n+     * {@code Path} is associated with the same {@code FileSystem} as the given\n+     * directory.\n+     *\n+     * <p> The details as to how the name of the file is constructed is\n+     * implementation dependent and therefore not specified. Where possible\n+     * the {@code prefix} and {@code suffix} are used to construct candidate\n+     * names in the same manner as the {@link\n+     * java.io.File#createTempFile(String,String,File)} method.\n+     *\n+     *\n+     * @param   dir\n+     *          the path to directory in which to create the file\n+     * @param   prefix\n+     *          the prefix string to be used in generating the file's name;\n+     *          may be {@code null}\n+     * @param   suffix\n+     *          the suffix string to be used in generating the file's name;\n+     *          may be {@code null}, in which case \"{@code .tmp}\" is used\n+     *\n+     * @return  the path to the newly created file that did not exist before\n+     *          this method was invoked\n+     *\n+     * @throws  IllegalArgumentException\n+     *          if the prefix or suffix parameters cannot be used to generate\n+     *          a candidate file name\n+     * @throws  UnsupportedOperationException\n+     *          if the array contains an attribute that cannot be set atomically\n+     *          when creating the directory\n+     * @throws  IOException\n+     *          if an I/O error occurs or {@code dir} does not exist\n+     * @throws  SecurityException\n+     *          In the case of the default provider, and a security manager is\n+     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n+     *          method is invoked to check write access to the file.\n+     */\n+    public static File createTmpFile(String dir, String prefix, String suffix) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87b3bd5c2cab1381d2c8ea2be862969a65d9f466"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzNDA0MA==", "bodyText": "No, just integrate the method into DiskUtils", "url": "https://github.com/alibaba/nacos/pull/3138#discussion_r444634040", "createdAt": "2020-06-24T04:12:14Z", "author": {"login": "chuntaojun"}, "path": "core/src/main/java/com/alibaba/nacos/core/utils/DiskUtils.java", "diffHunk": "@@ -87,6 +90,81 @@ public static void touch(File file) throws IOException {\n         FileUtils.touch(file);\n     }\n     \n+    /**\n+     * Creates a new empty file in the specified directory, using the given\n+     * prefix and suffix strings to generate its name. The resulting\n+     * {@code Path} is associated with the same {@code FileSystem} as the given\n+     * directory.\n+     *\n+     * <p> The details as to how the name of the file is constructed is\n+     * implementation dependent and therefore not specified. Where possible\n+     * the {@code prefix} and {@code suffix} are used to construct candidate\n+     * names in the same manner as the {@link\n+     * java.io.File#createTempFile(String,String,File)} method.\n+     *\n+     *\n+     * @param   dir\n+     *          the path to directory in which to create the file\n+     * @param   prefix\n+     *          the prefix string to be used in generating the file's name;\n+     *          may be {@code null}\n+     * @param   suffix\n+     *          the suffix string to be used in generating the file's name;\n+     *          may be {@code null}, in which case \"{@code .tmp}\" is used\n+     *\n+     * @return  the path to the newly created file that did not exist before\n+     *          this method was invoked\n+     *\n+     * @throws  IllegalArgumentException\n+     *          if the prefix or suffix parameters cannot be used to generate\n+     *          a candidate file name\n+     * @throws  UnsupportedOperationException\n+     *          if the array contains an attribute that cannot be set atomically\n+     *          when creating the directory\n+     * @throws  IOException\n+     *          if an I/O error occurs or {@code dir} does not exist\n+     * @throws  SecurityException\n+     *          In the case of the default provider, and a security manager is\n+     *          installed, the {@link SecurityManager#checkWrite(String) checkWrite}\n+     *          method is invoked to check write access to the file.\n+     */\n+    public static File createTmpFile(String dir, String prefix, String suffix) throws IOException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzMzM1Mw=="}, "originalCommit": {"oid": "87b3bd5c2cab1381d2c8ea2be862969a65d9f466"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4431, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}