{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1MTY5NDk3", "number": 3084, "title": "[ISSUE #2856]Adjust the use of thread pools", "bodyText": "Please do not create a Pull Request without creating an issue first.\nWhat is the purpose of the change\n#2856\nBrief changelog\n\nUnifiedly adjust the current existing way of creating thread pools in Nacos to the way of ExecutorFactory.xx in core and consistency module\nThreadUtils add some shutdownThreadPool(xxx,xxx) function to deregister executorService from ThreadPoolManager\n\nVerifying this change\nFollow this checklist to help us incorporate your contribution quickly and easily:\n\n Make sure there is a Github issue filed for the change (usually before you start working on it). Trivial changes like typos do not require a Github issue. Your pull request should address just this issue, without pulling in other changes - one PR resolves one issue.\n Format the pull request title like [ISSUE #123] Fix UnknownException when host config not exist. Each commit in the pull request should have a meaningful subject line and body.\n Write a pull request description that is detailed enough to understand what the pull request does, how, and why.\n Write necessary unit-test to verify your logic correction, more mock a little better when cross module dependency exist. If the new feature or significant change is committed, please remember to add integration-test in test module.\n Run mvn -B clean package apache-rat:check findbugs:findbugs -Dmaven.test.skip=true to make sure basic checks pass. Run mvn clean install -DskipITs to make sure unit-test pass. Run mvn clean test-compile failsafe:integration-test  to make sure integration-test pass.", "createdAt": "2020-06-16T12:05:22Z", "url": "https://github.com/alibaba/nacos/pull/3084", "merged": true, "mergeCommit": {"oid": "f94e8f8fb4c1caf7b079a07c2ada7781699518dc"}, "closed": true, "closedAt": "2020-06-17T10:21:00Z", "author": {"login": "wangweizZZ"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcr1bwtgFqTQzMTQ5Nzk3Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcsHLnDAFqTQzMjI2MjUyNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNDk3OTc2", "url": "https://github.com/alibaba/nacos/pull/3084#pullrequestreview-431497976", "createdAt": "2020-06-16T13:24:46Z", "commit": {"oid": "3898974d0f1d74238764b0302ef55b7aa64f83ae"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzoyNDo0NlrOGkbHzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMzoyNDo0NlrOGkbHzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg0NjI4Nw==", "bodyText": "\u4f7f\u7528ClassUtils\u91cc\u9762\u7684\u5de5\u5177\u7c7b\u5904\u7406", "url": "https://github.com/alibaba/nacos/pull/3084#discussion_r440846287", "createdAt": "2020-06-16T13:24:46Z", "author": {"login": "chuntaojun"}, "path": "config/src/main/java/com/alibaba/nacos/config/server/service/ConfigSubService.java", "diffHunk": "@@ -54,16 +57,10 @@\n     public ConfigSubService(ServerMemberManager memberManager) {\n         this.memberManager = memberManager;\n \n-        scheduler = Executors.newScheduledThreadPool(\n-            ThreadUtils.getSuitableThreadCount(), new ThreadFactory() {\n-                @Override\n-                public Thread newThread(Runnable r) {\n-                    Thread t = new Thread(r);\n-                    t.setDaemon(true);\n-                    t.setName(\"com.alibaba.nacos.ConfigSubService\");\n-                    return t;\n-                }\n-            });\n+        scheduler = ExecutorFactory.newScheduledExecutorService(\n+                Config.class.getCanonicalName(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3898974d0f1d74238764b0302ef55b7aa64f83ae"}, "originalPosition": 26}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3898974d0f1d74238764b0302ef55b7aa64f83ae", "author": {"user": {"login": "wangweizZZ", "name": "Gagharv"}}, "url": "https://github.com/alibaba/nacos/commit/3898974d0f1d74238764b0302ef55b7aa64f83ae", "committedDate": "2020-06-16T11:09:31Z", "message": "[ISSUE #2856]Adjust the use of thread pools"}, "afterCommit": {"oid": "8c2ef446e2d8a6dbb281dae0cc3bbc894094f431", "author": {"user": {"login": "wangweizZZ", "name": "Gagharv"}}, "url": "https://github.com/alibaba/nacos/commit/8c2ef446e2d8a6dbb281dae0cc3bbc894094f431", "committedDate": "2020-06-16T16:36:05Z", "message": "[ISSUE #2856]Adjust the use of thread pools"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "315cf811bb2571088fa23b08ce5cac630c305c28", "author": {"user": {"login": "wangweizZZ", "name": "Gagharv"}}, "url": "https://github.com/alibaba/nacos/commit/315cf811bb2571088fa23b08ce5cac630c305c28", "committedDate": "2020-06-17T04:45:07Z", "message": "[ISSUE #2856][module:core\u3001consistency]Adjust the use of thread pools\n\nChange-Id: I793770ca0f287157dc88e3ecf1147ea308e4a547"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a4e0d9cf60f15c0f11da503f2d8c81632f8dce52", "author": {"user": {"login": "wangweizZZ", "name": "Gagharv"}}, "url": "https://github.com/alibaba/nacos/commit/a4e0d9cf60f15c0f11da503f2d8c81632f8dce52", "committedDate": "2020-06-16T16:42:37Z", "message": "Merge branch 'develop' into issue_2856"}, "afterCommit": {"oid": "315cf811bb2571088fa23b08ce5cac630c305c28", "author": {"user": {"login": "wangweizZZ", "name": "Gagharv"}}, "url": "https://github.com/alibaba/nacos/commit/315cf811bb2571088fa23b08ce5cac630c305c28", "committedDate": "2020-06-17T04:45:07Z", "message": "[ISSUE #2856][module:core\u3001consistency]Adjust the use of thread pools\n\nChange-Id: I793770ca0f287157dc88e3ecf1147ea308e4a547"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMDY1ODE3", "url": "https://github.com/alibaba/nacos/pull/3084#pullrequestreview-432065817", "createdAt": "2020-06-17T05:21:19Z", "commit": {"oid": "315cf811bb2571088fa23b08ce5cac630c305c28"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNToyMToxOVrOGk1_2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNTozNDozNVrOGk2OHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI4NjYxOA==", "bodyText": "return directly, do not use tmp variable.\nlike return Executors.newFixedThreadPool(1);\nfollow methods are the same.", "url": "https://github.com/alibaba/nacos/pull/3084#discussion_r441286618", "createdAt": "2020-06-17T05:21:19Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/executor/ExecutorFactory.java", "diffHunk": "@@ -27,70 +27,169 @@\n /**\n  * Unified thread pool creation factory, and actively create thread\n  * pool resources by ThreadPoolManager for unified life cycle management\n+ * {@link ExecutorFactory.Managed}\n+ *\n+ * Unified thread pool creation factory without life cycle management\n+ * {@link ExecutorFactory}\n  *\n  * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n  */\n @SuppressWarnings(\"PMD.ThreadPoolCreationRule\")\n public final class ExecutorFactory {\n \n-    private static final ThreadPoolManager THREAD_POOL_MANAGER = ThreadPoolManager.getInstance();\n+    public static ExecutorService newSingleExecutorService() {\n+        ExecutorService executorService = Executors.newFixedThreadPool(1);\n+        return executorService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "315cf811bb2571088fa23b08ce5cac630c305c28"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI4NzM1OQ==", "bodyText": "don't change the old methods.\nremove them after change to use new mehtod will be ok.", "url": "https://github.com/alibaba/nacos/pull/3084#discussion_r441287359", "createdAt": "2020-06-17T05:23:52Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/executor/ExecutorFactory.java", "diffHunk": "@@ -27,70 +27,169 @@\n /**\n  * Unified thread pool creation factory, and actively create thread\n  * pool resources by ThreadPoolManager for unified life cycle management\n+ * {@link ExecutorFactory.Managed}\n+ *\n+ * Unified thread pool creation factory without life cycle management\n+ * {@link ExecutorFactory}\n  *\n  * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n  */\n @SuppressWarnings(\"PMD.ThreadPoolCreationRule\")\n public final class ExecutorFactory {\n \n-    private static final ThreadPoolManager THREAD_POOL_MANAGER = ThreadPoolManager.getInstance();\n+    public static ExecutorService newSingleExecutorService() {\n+        ExecutorService executorService = Executors.newFixedThreadPool(1);\n+        return executorService;\n+    }\n+\n+    public static ExecutorService newSingleExecutorService(final ThreadFactory threadFactory) {\n+        ExecutorService executorService = Executors.newFixedThreadPool(1, threadFactory);\n+        return executorService;\n+    }\n \n-    public static final String DEFAULT_NAMESPACE = \"nacos\";\n+    public static ExecutorService newFixExecutorService(final int nThreads) {\n+        ExecutorService executorService = Executors.newFixedThreadPool(nThreads);\n+        return executorService;\n+    }\n \n+    public static ExecutorService newFixExecutorService(final int nThreads,\n+                                                        final ThreadFactory threadFactory) {\n+        ExecutorService executorService = Executors.newFixedThreadPool(nThreads, threadFactory);\n+        return executorService;\n+    }\n+\n+    public static ScheduledExecutorService newSingleScheduledExecutorService(final ThreadFactory threadFactory) {\n+        ScheduledExecutorService executorService = Executors.newScheduledThreadPool(1, threadFactory);\n+        return executorService;\n+    }\n+\n+    public static ScheduledExecutorService newScheduledExecutorService( final int nThreads,\n+                                                                        final ThreadFactory threadFactory) {\n+        ScheduledExecutorService executorService = Executors.newScheduledThreadPool(nThreads, threadFactory);\n+        return executorService;\n+    }\n+\n+    public static ThreadPoolExecutor newCustomerThreadExecutor(\n+        final int coreThreads,\n+        final int maxThreads,\n+        final long keepAliveTimeMs,\n+        final ThreadFactory threadFactory) {\n+        ThreadPoolExecutor executor = new ThreadPoolExecutor(coreThreads, maxThreads,\n+            keepAliveTimeMs, TimeUnit.MILLISECONDS,\n+            new LinkedBlockingQueue<Runnable>(),\n+            threadFactory);\n+        return executor;\n+    }\n+    //TODO remove Deprecated function after replace all module\n+    @Deprecated\n     public static ExecutorService newSingleExecutorService(final String group) {\n         ExecutorService executorService = Executors.newFixedThreadPool(1);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);\n         return executorService;\n     }\n-\n+    @Deprecated\n     public static ExecutorService newSingleExecutorService(final String group,\n-                                                           final ThreadFactory threadFactory) {\n+        final ThreadFactory threadFactory) {\n         ExecutorService executorService = Executors.newFixedThreadPool(1, threadFactory);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "315cf811bb2571088fa23b08ce5cac630c305c28"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5MDI3MQ==", "bodyText": "If register to managed, whether should shutdown in here?", "url": "https://github.com/alibaba/nacos/pull/3084#discussion_r441290271", "createdAt": "2020-06-17T05:34:35Z", "author": {"login": "KomachiSion"}, "path": "core/src/main/java/com/alibaba/nacos/core/file/WatchFileCenter.java", "diffHunk": "@@ -176,7 +175,8 @@ void addSubscribe(final FileWatcher watcher) {\n \t\t}\n \n \t\tvoid shutdown() {\n-\t\t\twatch = false;\n+\t\t    watch = false;\n+            ThreadUtils.shutdownThreadPool(this.callBackExecutor);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "315cf811bb2571088fa23b08ce5cac630c305c28"}, "originalPosition": 18}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMDcwNTMy", "url": "https://github.com/alibaba/nacos/pull/3084#pullrequestreview-432070532", "createdAt": "2020-06-17T05:34:53Z", "commit": {"oid": "315cf811bb2571088fa23b08ce5cac630c305c28"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNTozNDo1M1rOGk2Ocg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNTozNzo0NVrOGk2SIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5MDM1NA==", "bodyText": "\u4e0d\u7eb3\u5165\u81ea\u52a8\u7ba1\u7406\u7684\uff0c\u4e0d\u9700\u8981group\u53c2\u6570", "url": "https://github.com/alibaba/nacos/pull/3084#discussion_r441290354", "createdAt": "2020-06-17T05:34:53Z", "author": {"login": "chuntaojun"}, "path": "common/src/main/java/com/alibaba/nacos/common/executor/ExecutorFactory.java", "diffHunk": "@@ -27,70 +27,169 @@\n /**\n  * Unified thread pool creation factory, and actively create thread\n  * pool resources by ThreadPoolManager for unified life cycle management\n+ * {@link ExecutorFactory.Managed}\n+ *\n+ * Unified thread pool creation factory without life cycle management\n+ * {@link ExecutorFactory}\n  *\n  * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n  */\n @SuppressWarnings(\"PMD.ThreadPoolCreationRule\")\n public final class ExecutorFactory {\n \n-    private static final ThreadPoolManager THREAD_POOL_MANAGER = ThreadPoolManager.getInstance();\n+    public static ExecutorService newSingleExecutorService() {\n+        ExecutorService executorService = Executors.newFixedThreadPool(1);\n+        return executorService;\n+    }\n+\n+    public static ExecutorService newSingleExecutorService(final ThreadFactory threadFactory) {\n+        ExecutorService executorService = Executors.newFixedThreadPool(1, threadFactory);\n+        return executorService;\n+    }\n \n-    public static final String DEFAULT_NAMESPACE = \"nacos\";\n+    public static ExecutorService newFixExecutorService(final int nThreads) {\n+        ExecutorService executorService = Executors.newFixedThreadPool(nThreads);\n+        return executorService;\n+    }\n \n+    public static ExecutorService newFixExecutorService(final int nThreads,\n+                                                        final ThreadFactory threadFactory) {\n+        ExecutorService executorService = Executors.newFixedThreadPool(nThreads, threadFactory);\n+        return executorService;\n+    }\n+\n+    public static ScheduledExecutorService newSingleScheduledExecutorService(final ThreadFactory threadFactory) {\n+        ScheduledExecutorService executorService = Executors.newScheduledThreadPool(1, threadFactory);\n+        return executorService;\n+    }\n+\n+    public static ScheduledExecutorService newScheduledExecutorService( final int nThreads,\n+                                                                        final ThreadFactory threadFactory) {\n+        ScheduledExecutorService executorService = Executors.newScheduledThreadPool(nThreads, threadFactory);\n+        return executorService;\n+    }\n+\n+    public static ThreadPoolExecutor newCustomerThreadExecutor(\n+        final int coreThreads,\n+        final int maxThreads,\n+        final long keepAliveTimeMs,\n+        final ThreadFactory threadFactory) {\n+        ThreadPoolExecutor executor = new ThreadPoolExecutor(coreThreads, maxThreads,\n+            keepAliveTimeMs, TimeUnit.MILLISECONDS,\n+            new LinkedBlockingQueue<Runnable>(),\n+            threadFactory);\n+        return executor;\n+    }\n+    //TODO remove Deprecated function after replace all module\n+    @Deprecated\n     public static ExecutorService newSingleExecutorService(final String group) {\n         ExecutorService executorService = Executors.newFixedThreadPool(1);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);\n         return executorService;\n     }\n-\n+    @Deprecated\n     public static ExecutorService newSingleExecutorService(final String group,\n-                                                           final ThreadFactory threadFactory) {\n+        final ThreadFactory threadFactory) {\n         ExecutorService executorService = Executors.newFixedThreadPool(1, threadFactory);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);\n         return executorService;\n     }\n-\n+    @Deprecated\n     public static ExecutorService newFixExecutorService(final String group,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "315cf811bb2571088fa23b08ce5cac630c305c28"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5MDkyOA==", "bodyText": "\u6216\u8bb8\u53ef\u4ee5\u4e0d\u9700\u8981\u8fd9\u4e2a\uff0c\u6709\u5e26group\u53c2\u6570\u7684\u5c31\u662f\u9700\u8981\u88ab\u81ea\u52a8\u7eb3\u5165\u7ba1\u7406\u7684\uff0c\u6ce8\u91ca\u8bf4\u660e\u5c31\u597d", "url": "https://github.com/alibaba/nacos/pull/3084#discussion_r441290928", "createdAt": "2020-06-17T05:36:44Z", "author": {"login": "chuntaojun"}, "path": "common/src/main/java/com/alibaba/nacos/common/executor/ExecutorFactory.java", "diffHunk": "@@ -27,70 +27,169 @@\n /**\n  * Unified thread pool creation factory, and actively create thread\n  * pool resources by ThreadPoolManager for unified life cycle management\n+ * {@link ExecutorFactory.Managed}\n+ *\n+ * Unified thread pool creation factory without life cycle management\n+ * {@link ExecutorFactory}\n  *\n  * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n  */\n @SuppressWarnings(\"PMD.ThreadPoolCreationRule\")\n public final class ExecutorFactory {\n \n-    private static final ThreadPoolManager THREAD_POOL_MANAGER = ThreadPoolManager.getInstance();\n+    public static ExecutorService newSingleExecutorService() {\n+        ExecutorService executorService = Executors.newFixedThreadPool(1);\n+        return executorService;\n+    }\n+\n+    public static ExecutorService newSingleExecutorService(final ThreadFactory threadFactory) {\n+        ExecutorService executorService = Executors.newFixedThreadPool(1, threadFactory);\n+        return executorService;\n+    }\n \n-    public static final String DEFAULT_NAMESPACE = \"nacos\";\n+    public static ExecutorService newFixExecutorService(final int nThreads) {\n+        ExecutorService executorService = Executors.newFixedThreadPool(nThreads);\n+        return executorService;\n+    }\n \n+    public static ExecutorService newFixExecutorService(final int nThreads,\n+                                                        final ThreadFactory threadFactory) {\n+        ExecutorService executorService = Executors.newFixedThreadPool(nThreads, threadFactory);\n+        return executorService;\n+    }\n+\n+    public static ScheduledExecutorService newSingleScheduledExecutorService(final ThreadFactory threadFactory) {\n+        ScheduledExecutorService executorService = Executors.newScheduledThreadPool(1, threadFactory);\n+        return executorService;\n+    }\n+\n+    public static ScheduledExecutorService newScheduledExecutorService( final int nThreads,\n+                                                                        final ThreadFactory threadFactory) {\n+        ScheduledExecutorService executorService = Executors.newScheduledThreadPool(nThreads, threadFactory);\n+        return executorService;\n+    }\n+\n+    public static ThreadPoolExecutor newCustomerThreadExecutor(\n+        final int coreThreads,\n+        final int maxThreads,\n+        final long keepAliveTimeMs,\n+        final ThreadFactory threadFactory) {\n+        ThreadPoolExecutor executor = new ThreadPoolExecutor(coreThreads, maxThreads,\n+            keepAliveTimeMs, TimeUnit.MILLISECONDS,\n+            new LinkedBlockingQueue<Runnable>(),\n+            threadFactory);\n+        return executor;\n+    }\n+    //TODO remove Deprecated function after replace all module\n+    @Deprecated\n     public static ExecutorService newSingleExecutorService(final String group) {\n         ExecutorService executorService = Executors.newFixedThreadPool(1);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);\n         return executorService;\n     }\n-\n+    @Deprecated\n     public static ExecutorService newSingleExecutorService(final String group,\n-                                                           final ThreadFactory threadFactory) {\n+        final ThreadFactory threadFactory) {\n         ExecutorService executorService = Executors.newFixedThreadPool(1, threadFactory);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);\n         return executorService;\n     }\n-\n+    @Deprecated\n     public static ExecutorService newFixExecutorService(final String group,\n-                                                        final int nThreads) {\n+        final int nThreads) {\n         ExecutorService executorService = Executors.newFixedThreadPool(nThreads);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);\n         return executorService;\n     }\n-\n+    @Deprecated\n     public static ExecutorService newFixExecutorService(final String group,\n-                                                        final int nThreads,\n-                                                        final ThreadFactory threadFactory) {\n+        final int nThreads,\n+        final ThreadFactory threadFactory) {\n         ExecutorService executorService = Executors.newFixedThreadPool(nThreads, threadFactory);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);\n         return executorService;\n     }\n-\n+    @Deprecated\n     public static ScheduledExecutorService newSingleScheduledExecutorService(final String group,\n-                                                                             final ThreadFactory threadFactory) {\n+        final ThreadFactory threadFactory) {\n         ScheduledExecutorService executorService = Executors.newScheduledThreadPool(1, threadFactory);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);\n         return executorService;\n     }\n-\n+    @Deprecated\n     public static ScheduledExecutorService newScheduledExecutorService(final String group,\n-                                                                       final int nThreads,\n-                                                                       final ThreadFactory threadFactory) {\n+        final int nThreads,\n+        final ThreadFactory threadFactory) {\n         ScheduledExecutorService executorService = Executors.newScheduledThreadPool(nThreads, threadFactory);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);\n         return executorService;\n     }\n-\n+    @Deprecated\n     public static ThreadPoolExecutor newCustomerThreadExecutor(final String group,\n+        final int coreThreads,\n+        final int maxThreads,\n+        final long keepAliveTimeMs,\n+        final ThreadFactory threadFactory) {\n+        ThreadPoolExecutor executor = new ThreadPoolExecutor(coreThreads, maxThreads,\n+            keepAliveTimeMs, TimeUnit.MILLISECONDS,\n+            new LinkedBlockingQueue<Runnable>(),\n+            threadFactory);\n+        return executor;\n+    }\n+\n+    public final static class Managed{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "315cf811bb2571088fa23b08ce5cac630c305c28"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5MTI5OQ==", "bodyText": "\u8fd9\u4e9b\u901a\u8fc7class\u83b7\u53d6\u7c7b\u4fe1\u606f\u7684\uff0c\u90fd\u7528ClassUtils", "url": "https://github.com/alibaba/nacos/pull/3084#discussion_r441291299", "createdAt": "2020-06-17T05:37:45Z", "author": {"login": "chuntaojun"}, "path": "consistency/src/main/java/com/alibaba/nacos/consistency/ProtocolMetaData.java", "diffHunk": "@@ -40,7 +40,10 @@\n @SuppressWarnings(\"PMD.Rule:CollectionInitShouldAssignCapacityRule\")\n public final class ProtocolMetaData {\n \n-    private static final Executor EXECUTOR = ExecutorFactory.newFixExecutorService(ProtocolMetaData.class.getCanonicalName(), 4, new NameThreadFactory(\"nacos.consistency.protocol.metadata\"));\n+    private static final Executor EXECUTOR = ExecutorFactory.Managed.newFixExecutorService(\n+            ProtocolMetaData.class.getCanonicalName(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "315cf811bb2571088fa23b08ce5cac630c305c28"}, "originalPosition": 6}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMDcxODY0", "url": "https://github.com/alibaba/nacos/pull/3084#pullrequestreview-432071864", "createdAt": "2020-06-17T05:38:30Z", "commit": {"oid": "315cf811bb2571088fa23b08ce5cac630c305c28"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNTozODozMFrOGk2TRw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNTozODozMFrOGk2TRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5MTU5MQ==", "bodyText": "Should use Managed. newSingleExecutorService?", "url": "https://github.com/alibaba/nacos/pull/3084#discussion_r441291591", "createdAt": "2020-06-17T05:38:30Z", "author": {"login": "KomachiSion"}, "path": "core/src/main/java/com/alibaba/nacos/core/file/WatchFileCenter.java", "diffHunk": "@@ -154,9 +154,8 @@ public WatchDirJob(String paths) throws NacosException {\n \t\t\t}\n \n \t\t\tthis.callBackExecutor = ExecutorFactory\n-\t\t\t\t\t.newFixExecutorService(WatchFileCenter.class.getCanonicalName(),\n-\t\t\t\t\t\t\t1,\n-\t\t\t\t\t\t\tnew NameThreadFactory(\"com.alibaba.nacos.file.watch-\" + paths));\n+                    .newSingleExecutorService(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "315cf811bb2571088fa23b08ce5cac630c305c28"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7949f034fa8c48755427539b9124b0c9e389e135", "author": {"user": {"login": "wangweizZZ", "name": "Gagharv"}}, "url": "https://github.com/alibaba/nacos/commit/7949f034fa8c48755427539b9124b0c9e389e135", "committedDate": "2020-06-17T07:32:08Z", "message": "code optimize\n\nChange-Id: I023ed73332f3f69c93277f25e57e0ee5c3975f02"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMjQ2MDgz", "url": "https://github.com/alibaba/nacos/pull/3084#pullrequestreview-432246083", "createdAt": "2020-06-17T09:58:20Z", "commit": {"oid": "7949f034fa8c48755427539b9124b0c9e389e135"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwOTo1ODoyMFrOGk-srQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMDowNjo0NlrOGk-_8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQyOTE2NQ==", "bodyText": "\u6211\u89c9\u5f97\u53ef\u4ee5\u7559\uff0c\u66f4\u5bb9\u6613\u8868\u8fbe\u8bed\u610f\uff0c\u4e4b\u540e\u53ef\u4ee5\u770b\u60c5\u51b5\u79fb\u52a8\u5230\u66f4\u5408\u7406\u7684\u4f4d\u7f6e\u3002", "url": "https://github.com/alibaba/nacos/pull/3084#discussion_r441429165", "createdAt": "2020-06-17T09:58:20Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/executor/ExecutorFactory.java", "diffHunk": "@@ -27,70 +27,169 @@\n /**\n  * Unified thread pool creation factory, and actively create thread\n  * pool resources by ThreadPoolManager for unified life cycle management\n+ * {@link ExecutorFactory.Managed}\n+ *\n+ * Unified thread pool creation factory without life cycle management\n+ * {@link ExecutorFactory}\n  *\n  * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n  */\n @SuppressWarnings(\"PMD.ThreadPoolCreationRule\")\n public final class ExecutorFactory {\n \n-    private static final ThreadPoolManager THREAD_POOL_MANAGER = ThreadPoolManager.getInstance();\n+    public static ExecutorService newSingleExecutorService() {\n+        ExecutorService executorService = Executors.newFixedThreadPool(1);\n+        return executorService;\n+    }\n+\n+    public static ExecutorService newSingleExecutorService(final ThreadFactory threadFactory) {\n+        ExecutorService executorService = Executors.newFixedThreadPool(1, threadFactory);\n+        return executorService;\n+    }\n \n-    public static final String DEFAULT_NAMESPACE = \"nacos\";\n+    public static ExecutorService newFixExecutorService(final int nThreads) {\n+        ExecutorService executorService = Executors.newFixedThreadPool(nThreads);\n+        return executorService;\n+    }\n \n+    public static ExecutorService newFixExecutorService(final int nThreads,\n+                                                        final ThreadFactory threadFactory) {\n+        ExecutorService executorService = Executors.newFixedThreadPool(nThreads, threadFactory);\n+        return executorService;\n+    }\n+\n+    public static ScheduledExecutorService newSingleScheduledExecutorService(final ThreadFactory threadFactory) {\n+        ScheduledExecutorService executorService = Executors.newScheduledThreadPool(1, threadFactory);\n+        return executorService;\n+    }\n+\n+    public static ScheduledExecutorService newScheduledExecutorService( final int nThreads,\n+                                                                        final ThreadFactory threadFactory) {\n+        ScheduledExecutorService executorService = Executors.newScheduledThreadPool(nThreads, threadFactory);\n+        return executorService;\n+    }\n+\n+    public static ThreadPoolExecutor newCustomerThreadExecutor(\n+        final int coreThreads,\n+        final int maxThreads,\n+        final long keepAliveTimeMs,\n+        final ThreadFactory threadFactory) {\n+        ThreadPoolExecutor executor = new ThreadPoolExecutor(coreThreads, maxThreads,\n+            keepAliveTimeMs, TimeUnit.MILLISECONDS,\n+            new LinkedBlockingQueue<Runnable>(),\n+            threadFactory);\n+        return executor;\n+    }\n+    //TODO remove Deprecated function after replace all module\n+    @Deprecated\n     public static ExecutorService newSingleExecutorService(final String group) {\n         ExecutorService executorService = Executors.newFixedThreadPool(1);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);\n         return executorService;\n     }\n-\n+    @Deprecated\n     public static ExecutorService newSingleExecutorService(final String group,\n-                                                           final ThreadFactory threadFactory) {\n+        final ThreadFactory threadFactory) {\n         ExecutorService executorService = Executors.newFixedThreadPool(1, threadFactory);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);\n         return executorService;\n     }\n-\n+    @Deprecated\n     public static ExecutorService newFixExecutorService(final String group,\n-                                                        final int nThreads) {\n+        final int nThreads) {\n         ExecutorService executorService = Executors.newFixedThreadPool(nThreads);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);\n         return executorService;\n     }\n-\n+    @Deprecated\n     public static ExecutorService newFixExecutorService(final String group,\n-                                                        final int nThreads,\n-                                                        final ThreadFactory threadFactory) {\n+        final int nThreads,\n+        final ThreadFactory threadFactory) {\n         ExecutorService executorService = Executors.newFixedThreadPool(nThreads, threadFactory);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);\n         return executorService;\n     }\n-\n+    @Deprecated\n     public static ScheduledExecutorService newSingleScheduledExecutorService(final String group,\n-                                                                             final ThreadFactory threadFactory) {\n+        final ThreadFactory threadFactory) {\n         ScheduledExecutorService executorService = Executors.newScheduledThreadPool(1, threadFactory);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);\n         return executorService;\n     }\n-\n+    @Deprecated\n     public static ScheduledExecutorService newScheduledExecutorService(final String group,\n-                                                                       final int nThreads,\n-                                                                       final ThreadFactory threadFactory) {\n+        final int nThreads,\n+        final ThreadFactory threadFactory) {\n         ScheduledExecutorService executorService = Executors.newScheduledThreadPool(nThreads, threadFactory);\n-        THREAD_POOL_MANAGER.register(DEFAULT_NAMESPACE, group, executorService);\n         return executorService;\n     }\n-\n+    @Deprecated\n     public static ThreadPoolExecutor newCustomerThreadExecutor(final String group,\n+        final int coreThreads,\n+        final int maxThreads,\n+        final long keepAliveTimeMs,\n+        final ThreadFactory threadFactory) {\n+        ThreadPoolExecutor executor = new ThreadPoolExecutor(coreThreads, maxThreads,\n+            keepAliveTimeMs, TimeUnit.MILLISECONDS,\n+            new LinkedBlockingQueue<Runnable>(),\n+            threadFactory);\n+        return executor;\n+    }\n+\n+    public final static class Managed{", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5MDkyOA=="}, "originalCommit": {"oid": "315cf811bb2571088fa23b08ce5cac630c305c28"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQzNDA5Ng==", "bodyText": "ok", "url": "https://github.com/alibaba/nacos/pull/3084#discussion_r441434096", "createdAt": "2020-06-17T10:06:46Z", "author": {"login": "KomachiSion"}, "path": "core/src/main/java/com/alibaba/nacos/core/file/WatchFileCenter.java", "diffHunk": "@@ -154,9 +154,8 @@ public WatchDirJob(String paths) throws NacosException {\n \t\t\t}\n \n \t\t\tthis.callBackExecutor = ExecutorFactory\n-\t\t\t\t\t.newFixExecutorService(WatchFileCenter.class.getCanonicalName(),\n-\t\t\t\t\t\t\t1,\n-\t\t\t\t\t\t\tnew NameThreadFactory(\"com.alibaba.nacos.file.watch-\" + paths));\n+                    .newSingleExecutorService(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5MTU5MQ=="}, "originalCommit": {"oid": "315cf811bb2571088fa23b08ce5cac630c305c28"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMjYyNTI3", "url": "https://github.com/alibaba/nacos/pull/3084#pullrequestreview-432262527", "createdAt": "2020-06-17T10:20:46Z", "commit": {"oid": "7949f034fa8c48755427539b9124b0c9e389e135"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4361, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}