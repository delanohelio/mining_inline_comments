{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NDg0ODY5", "number": 2926, "title": "[ISSUE #2858] Unified implementation of Http requests", "bodyText": "Please do not create a Pull Request without creating an issue first.\nWhat is the purpose of the change\nUnified implementation of Http requests fix: #2858\nBrief changelog\n1.Provide NacosRestTemplate to perform synchronous http request.\n2.Provide NacosAsyncRestTemplate to perform asynchronous HTTP requests.\n3.Abstract the HttpClientRequest and HttpClientResponse interfaces.\n4.The currently dependent http client is the Apache http client.\nVerifying this change\nXXXX\nFollow this checklist to help us incorporate your contribution quickly and easily:\n\n Make sure there is a Github issue filed for the change (usually before you start working on it). Trivial changes like typos do not require a Github issue. Your pull request should address just this issue, without pulling in other changes - one PR resolves one issue.\n Format the pull request title like [ISSUE #123] Fix UnknownException when host config not exist. Each commit in the pull request should have a meaningful subject line and body.\n Write a pull request description that is detailed enough to understand what the pull request does, how, and why.\n Write necessary unit-test to verify your logic correction, more mock a little better when cross module dependency exist. If the new feature or significant change is committed, please remember to add integration-test in test module.\n Run mvn -B clean package apache-rat:check findbugs:findbugs -Dmaven.test.skip=true to make sure basic checks pass. Run mvn clean install -DskipITs to make sure unit-test pass. Run mvn clean test-compile failsafe:integration-test  to make sure integration-test pass.", "createdAt": "2020-05-30T15:39:11Z", "url": "https://github.com/alibaba/nacos/pull/2926", "merged": true, "mergeCommit": {"oid": "81f9eff928456e796f63777310b0ef32731e71df"}, "closed": true, "closedAt": "2020-06-12T11:47:42Z", "author": {"login": "Maijh97"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclbqGVAH2gAyNDI1NDg0ODY5OjYwODYwODkzMTQ0Y2MyNzc1ODA2N2I0YTFlZTJmMDk2YjdmMDQ3N2Y=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqNeExgFqTQyODg2MTY0Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "60860893144cc27758067b4a1ee2f096b7f0477f", "author": {"user": {"login": "Maijh97", "name": "mai.jh"}}, "url": "https://github.com/alibaba/nacos/commit/60860893144cc27758067b4a1ee2f096b7f0477f", "committedDate": "2020-05-27T16:14:42Z", "message": "fix #2858 Provide nacosRestTemplate implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d08eac68823fe7ff31b5d825173df9efc0048439", "author": {"user": {"login": "Maijh97", "name": "mai.jh"}}, "url": "https://github.com/alibaba/nacos/commit/d08eac68823fe7ff31b5d825173df9efc0048439", "committedDate": "2020-05-28T02:36:19Z", "message": "change http client implementation, Unified apacheHttpClient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "377bbb88cf9577f0f4d2fe1ad9b5628d65af5a8a", "author": {"user": {"login": "Maijh97", "name": "mai.jh"}}, "url": "https://github.com/alibaba/nacos/commit/377bbb88cf9577f0f4d2fe1ad9b5628d65af5a8a", "committedDate": "2020-05-28T02:45:33Z", "message": "Add some callouts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52426d43b572beda323eb07cd046628309f31290", "author": {"user": {"login": "Maijh97", "name": "mai.jh"}}, "url": "https://github.com/alibaba/nacos/commit/52426d43b572beda323eb07cd046628309f31290", "committedDate": "2020-05-28T06:38:01Z", "message": "change http client implementation, Unified apacheHttpClient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "238b2386a702db384f8b5d7696a33d331defdc94", "author": {"user": {"login": "Maijh97", "name": "mai.jh"}}, "url": "https://github.com/alibaba/nacos/commit/238b2386a702db384f8b5d7696a33d331defdc94", "committedDate": "2020-05-28T10:23:29Z", "message": "change http client implementation, Unified apacheHttpClient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d775ea665b02e4b5e19919e68262f4d29225913", "author": {"user": {"login": "Maijh97", "name": "mai.jh"}}, "url": "https://github.com/alibaba/nacos/commit/0d775ea665b02e4b5e19919e68262f4d29225913", "committedDate": "2020-05-28T10:24:58Z", "message": "change http client implementation, Unified apacheHttpClient"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92ca0e1d66cdd1858521462a0b752d0264ce222e", "author": {"user": {"login": "Maijh97", "name": "mai.jh"}}, "url": "https://github.com/alibaba/nacos/commit/92ca0e1d66cdd1858521462a0b752d0264ce222e", "committedDate": "2020-05-28T14:25:28Z", "message": "Remove extra lines"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57ca56c07bbc18ce44ed845607557b239a832948", "author": {"user": {"login": "Maijh97", "name": "mai.jh"}}, "url": "https://github.com/alibaba/nacos/commit/57ca56c07bbc18ce44ed845607557b239a832948", "committedDate": "2020-05-29T10:09:04Z", "message": "add async http request client"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea03121e2603cd448402253161cf758881556216", "author": {"user": {"login": "Maijh97", "name": "mai.jh"}}, "url": "https://github.com/alibaba/nacos/commit/ea03121e2603cd448402253161cf758881556216", "committedDate": "2020-05-30T14:39:04Z", "message": "add NacosRestTemplate and NacosAsyncRestTemplate test example"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3a64c5fa38187e5543597d2e424cca64649a944", "author": {"user": {"login": "Maijh97", "name": "mai.jh"}}, "url": "https://github.com/alibaba/nacos/commit/a3a64c5fa38187e5543597d2e424cca64649a944", "committedDate": "2020-05-30T15:20:22Z", "message": "change annotate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "066968e9cadb3a0b140f04d379a1b5872daffbce", "author": {"user": {"login": "Maijh97", "name": "mai.jh"}}, "url": "https://github.com/alibaba/nacos/commit/066968e9cadb3a0b140f04d379a1b5872daffbce", "committedDate": "2020-05-30T15:47:51Z", "message": "Merge branch 'develop' into develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11cc8dad021ed0716929fa332db688e963967c73", "author": {"user": {"login": "Maijh97", "name": "mai.jh"}}, "url": "https://github.com/alibaba/nacos/commit/11cc8dad021ed0716929fa332db688e963967c73", "committedDate": "2020-05-30T15:56:17Z", "message": "Resolve conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f3b3e3c9bdb25b1848715428826c009c2fb7c74", "author": {"user": {"login": "Maijh97", "name": "mai.jh"}}, "url": "https://github.com/alibaba/nacos/commit/6f3b3e3c9bdb25b1848715428826c009c2fb7c74", "committedDate": "2020-05-30T16:10:14Z", "message": "test change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b7ebbf5bceb565cf6eaa3f12164f6fb1d5cff77", "author": {"user": {"login": "Maijh97", "name": "mai.jh"}}, "url": "https://github.com/alibaba/nacos/commit/2b7ebbf5bceb565cf6eaa3f12164f6fb1d5cff77", "committedDate": "2020-05-30T16:23:58Z", "message": "test change"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNDUzMjU3", "url": "https://github.com/alibaba/nacos/pull/2926#pullrequestreview-421453257", "createdAt": "2020-05-31T00:52:13Z", "commit": {"oid": "2b7ebbf5bceb565cf6eaa3f12164f6fb1d5cff77"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwMDo1MjoxM1rOGc2Esg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwMDo1OTo0MVrOGc2GAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg5OTI1MA==", "bodyText": "You need to do a content-type substitution", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r432899250", "createdAt": "2020-05-31T00:52:13Z", "author": {"login": "chuntaojun"}, "path": "common/src/main/java/com/alibaba/nacos/common/http/client/NacosAsyncRestTemplate.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.http.client;\n+\n+import com.alibaba.nacos.common.constant.HttpHeaderConsts;\n+import com.alibaba.nacos.common.http.Callback;\n+import com.alibaba.nacos.common.http.param.Header;\n+import com.alibaba.nacos.common.http.param.MediaType;\n+import com.alibaba.nacos.common.http.param.Query;\n+import com.alibaba.nacos.common.model.RequestHttpEntity;\n+import com.alibaba.nacos.common.utils.HttpMethod;\n+import com.alibaba.nacos.common.utils.UriUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Type;\n+import java.net.URI;\n+import java.util.Map;\n+\n+/**\n+ * NacosAsyncRestTemplate async\n+ *\n+ * @author mai.jh\n+ * @date 2020/5/29\n+ * @see AsyncHttpClientRequest\n+ * @see HttpClientResponse\n+ */\n+public class NacosAsyncRestTemplate implements AsyncRestOperations {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(NacosAsyncRestTemplate.class);\n+\n+    private AsyncHttpClientRequest clientRequest;\n+\n+    public NacosAsyncRestTemplate(AsyncHttpClientRequest clientRequest) {\n+        this.clientRequest = clientRequest;\n+    }\n+\n+\n+    @Override\n+    public <T> void get(String url, Header header, Query query, Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.GET, new RequestHttpEntity(header, query), responseType, callback);\n+    }\n+\n+    @Override\n+    public <T> void get(String url, Header header, Map<String, String> paramValues,\n+                        Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.GET, new RequestHttpEntity(header,\n+            Query.newInstance().initParams(paramValues)), responseType, callback);\n+    }\n+\n+    @Override\n+    public <T> void getLarge(String url, Header header, Query query, Object body,\n+                             Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.GET_LARGE,\n+            new RequestHttpEntity(header, query, body), responseType, callback);\n+    }\n+\n+    @Override\n+    public <T> void delete(String url, Header header, Query query,\n+                           Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.DELETE,\n+            new RequestHttpEntity(header, query), responseType, callback);\n+    }\n+\n+    @Override\n+    public <T> void put(String url, Header header, Query query, Object body,\n+                        Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.PUT,\n+            new RequestHttpEntity(header, query, body), responseType, callback);\n+    }\n+\n+    @Override\n+    public <T> void putJson(String url, Header header, Map<String, String> paramValues,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b7ebbf5bceb565cf6eaa3f12164f6fb1d5cff77"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg5OTI2Ng==", "bodyText": "You need to do a content-type substitution", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r432899266", "createdAt": "2020-05-31T00:52:26Z", "author": {"login": "chuntaojun"}, "path": "common/src/main/java/com/alibaba/nacos/common/http/client/NacosAsyncRestTemplate.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.http.client;\n+\n+import com.alibaba.nacos.common.constant.HttpHeaderConsts;\n+import com.alibaba.nacos.common.http.Callback;\n+import com.alibaba.nacos.common.http.param.Header;\n+import com.alibaba.nacos.common.http.param.MediaType;\n+import com.alibaba.nacos.common.http.param.Query;\n+import com.alibaba.nacos.common.model.RequestHttpEntity;\n+import com.alibaba.nacos.common.utils.HttpMethod;\n+import com.alibaba.nacos.common.utils.UriUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Type;\n+import java.net.URI;\n+import java.util.Map;\n+\n+/**\n+ * NacosAsyncRestTemplate async\n+ *\n+ * @author mai.jh\n+ * @date 2020/5/29\n+ * @see AsyncHttpClientRequest\n+ * @see HttpClientResponse\n+ */\n+public class NacosAsyncRestTemplate implements AsyncRestOperations {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(NacosAsyncRestTemplate.class);\n+\n+    private AsyncHttpClientRequest clientRequest;\n+\n+    public NacosAsyncRestTemplate(AsyncHttpClientRequest clientRequest) {\n+        this.clientRequest = clientRequest;\n+    }\n+\n+\n+    @Override\n+    public <T> void get(String url, Header header, Query query, Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.GET, new RequestHttpEntity(header, query), responseType, callback);\n+    }\n+\n+    @Override\n+    public <T> void get(String url, Header header, Map<String, String> paramValues,\n+                        Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.GET, new RequestHttpEntity(header,\n+            Query.newInstance().initParams(paramValues)), responseType, callback);\n+    }\n+\n+    @Override\n+    public <T> void getLarge(String url, Header header, Query query, Object body,\n+                             Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.GET_LARGE,\n+            new RequestHttpEntity(header, query, body), responseType, callback);\n+    }\n+\n+    @Override\n+    public <T> void delete(String url, Header header, Query query,\n+                           Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.DELETE,\n+            new RequestHttpEntity(header, query), responseType, callback);\n+    }\n+\n+    @Override\n+    public <T> void put(String url, Header header, Query query, Object body,\n+                        Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.PUT,\n+            new RequestHttpEntity(header, query, body), responseType, callback);\n+    }\n+\n+    @Override\n+    public <T> void putJson(String url, Header header, Map<String, String> paramValues,\n+                            String body, Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.PUT, new RequestHttpEntity(\n+            header, Query.newInstance().initParams(paramValues), body), responseType, callback);\n+\n+    }\n+\n+    @Override\n+    public <T> void putFrom(String url, Header header, Query query, Map<String, String> bodyValues,\n+                            Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.PUT, new RequestHttpEntity(\n+            header.addParam(HttpHeaderConsts.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED),\n+            query, bodyValues), responseType, callback);\n+    }\n+\n+    @Override\n+    public <T> void putFrom(String url, Header header, Map<String, String> paramValues,\n+                            Map<String, String> bodyValues, Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.PUT, new RequestHttpEntity(\n+            header.addParam(HttpHeaderConsts.CONTENT_TYPE, MediaType.APPLICATION_FORM_URLENCODED),\n+            Query.newInstance().initParams(paramValues), bodyValues), responseType, callback);\n+    }\n+\n+    @Override\n+    public <T> void post(String url, Header header, Query query, Object body,\n+                         Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.POST, new RequestHttpEntity(\n+            header, query, body), responseType, callback);\n+    }\n+\n+    @Override\n+    public <T> void postJson(String url, Header header, Map<String, String> paramValues,\n+                             String body, Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.POST, new RequestHttpEntity(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b7ebbf5bceb565cf6eaa3f12164f6fb1d5cff77"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg5OTQxOQ==", "bodyText": "This is where the ClassCastException happens, so you need to think a little bit more about whether you want to return byte[] to the upper level", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r432899419", "createdAt": "2020-05-31T00:55:32Z", "author": {"login": "chuntaojun"}, "path": "common/src/main/java/com/alibaba/nacos/common/http/handler/ResponseHandler.java", "diffHunk": "@@ -37,4 +45,23 @@\n         return JacksonUtils.toObj(s, type);\n     }\n \n+    public static <T> T convert(InputStream inputStream, Class<T> tClass) throws Exception{\n+        return JacksonUtils.toObj(inputStream, tClass);\n+    }\n+\n+    @SuppressWarnings({\"unchecked\", \"rawtypes\", \"resource\"})\n+    public static <T> RestResult<T> responseEntityExtractor(HttpClientResponse response, Type type) throws Exception{\n+        Header headers = response.getHeaders();\n+        String contentType = headers.getValue(HttpHeaderConsts.CONTENT_TYPE);\n+        String body = IoUtils.toString(response.getBody(), headers.getCharset());\n+        T extractBody = (T) body;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b7ebbf5bceb565cf6eaa3f12164f6fb1d5cff77"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg5OTU1NQ==", "bodyText": "This constructor can only appear in HTTP packages", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r432899555", "createdAt": "2020-05-31T00:58:34Z", "author": {"login": "chuntaojun"}, "path": "common/src/main/java/com/alibaba/nacos/common/model/RestResult.java", "diffHunk": "@@ -25,13 +27,20 @@\n \n     private static final long serialVersionUID = 6095433538316185017L;\n \n+    private Header header;\n     private int code;\n     private String message;\n     private T data;\n \n     public RestResult() {\n     }\n \n+    public RestResult(Header header, int code, T data) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b7ebbf5bceb565cf6eaa3f12164f6fb1d5cff77"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjg5OTU4Nw==", "bodyText": "can move into HttpUtils", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r432899587", "createdAt": "2020-05-31T00:59:41Z", "author": {"login": "chuntaojun"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/UriUtils.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package com.alibaba.nacos.common.utils;\n+\n+import com.alibaba.nacos.common.http.param.Query;\n+\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+\n+/**\n+ * URI build utils\n+ *\n+ * @author mai.jh\n+ * @date 2020/5/24\n+ */\n+public class UriUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2b7ebbf5bceb565cf6eaa3f12164f6fb1d5cff77"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "031c9ef52124fa8d82cd9dff65486f7c7f9be96d", "author": {"user": {"login": "Maijh97", "name": "mai.jh"}}, "url": "https://github.com/alibaba/nacos/commit/031c9ef52124fa8d82cd9dff65486f7c7f9be96d", "committedDate": "2020-05-31T09:24:01Z", "message": "perfect NacosRestTemplate and  restResult"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7e05f3e18ed8b941a425a10f16c3cd102d381147", "author": {"user": {"login": "Maijh97", "name": "mai.jh"}}, "url": "https://github.com/alibaba/nacos/commit/7e05f3e18ed8b941a425a10f16c3cd102d381147", "committedDate": "2020-05-31T10:18:41Z", "message": "add class file license."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c02111eb16835e2e8f143f2dff2ce41d85a7f24", "author": {"user": {"login": "Maijh97", "name": "mai.jh"}}, "url": "https://github.com/alibaba/nacos/commit/0c02111eb16835e2e8f143f2dff2ce41d85a7f24", "committedDate": "2020-05-31T10:19:06Z", "message": "add class file license."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fc79b012f6567bde4ce8adfe473dafe74c39427", "author": {"user": {"login": "Maijh97", "name": "mai.jh"}}, "url": "https://github.com/alibaba/nacos/commit/4fc79b012f6567bde4ce8adfe473dafe74c39427", "committedDate": "2020-06-01T07:42:20Z", "message": "code format."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "177b8aa61c2ae34e403d3ff694a0443f5d08612d", "author": {"user": {"login": "Maijh97", "name": "mai.jh"}}, "url": "https://github.com/alibaba/nacos/commit/177b8aa61c2ae34e403d3ff694a0443f5d08612d", "committedDate": "2020-06-01T07:45:25Z", "message": "Merge branch 'develop' into develop"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8768de406c1273fffa1e18201b24d1f9c2a3171e", "author": {"user": {"login": "Maijh97", "name": "mai.jh"}}, "url": "https://github.com/alibaba/nacos/commit/8768de406c1273fffa1e18201b24d1f9c2a3171e", "committedDate": "2020-06-01T07:49:28Z", "message": "Merge code."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "379aa15c85f0a78b52cd782296ec5fcb9831f9df", "author": {"user": {"login": "Maijh97", "name": "mai.jh"}}, "url": "https://github.com/alibaba/nacos/commit/379aa15c85f0a78b52cd782296ec5fcb9831f9df", "committedDate": "2020-06-01T08:02:41Z", "message": "Added syntax compatible with Java 6"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc", "author": {"user": {"login": "Maijh97", "name": "mai.jh"}}, "url": "https://github.com/alibaba/nacos/commit/a83241205ccf9ff651065a1874a18be6918ceddc", "committedDate": "2020-06-01T15:51:53Z", "message": "optimize response handler, remove AsyncRestOperations\uff0cRestOperations."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NjU3Mzc5", "url": "https://github.com/alibaba/nacos/pull/2926#pullrequestreview-427657379", "createdAt": "2020-06-10T01:50:25Z", "commit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 41, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMTo1MDoyNVrOGhiHGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwMjoyMDowNlrOGhikow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgxNTA2Nw==", "bodyText": "Why add empty ut\uff1f", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437815067", "createdAt": "2020-06-10T01:50:25Z", "author": {"login": "KomachiSion"}, "path": "common/src/test/java/com/alibaba/nacos/common/http/HttpUtilsTest.java", "diffHunk": "@@ -1,12 +1,29 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n package com.alibaba.nacos.common.http;\n \n+\n import org.junit.Test;\n \n public class HttpUtilsTest {\n \n-\t@Test\n-\tpublic void test_url_encode() throws Exception {\n+    @Test\n+    public void test_url_encode() throws Exception {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgxNTc0Ng==", "bodyText": "remove extra blank line", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437815746", "createdAt": "2020-06-10T01:53:07Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/http/HttpClientManager.java", "diffHunk": "@@ -83,4 +104,5 @@ public static void shutdown() {\n \t\tlogger.warn(\"[HttpClientManager] Destruction of the end\");\n \t}\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgxOTMzNQ==", "bodyText": "remove extra blank line", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437819335", "createdAt": "2020-06-10T02:07:20Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/http/client/DefaultAsyncHttpClientRequest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.http.client;\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgxOTQyNA==", "bodyText": "remove extra blank line", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437819424", "createdAt": "2020-06-10T02:07:40Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/http/client/DefaultAsyncHttpClientRequest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.http.client;\n+\n+\n+import com.alibaba.nacos.common.http.Callback;\n+import com.alibaba.nacos.common.http.HttpRestResult;\n+import com.alibaba.nacos.common.http.handler.ResponseHandler;\n+import com.alibaba.nacos.common.model.RequestHttpEntity;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.methods.HttpRequestBase;\n+import org.apache.http.concurrent.FutureCallback;\n+import org.apache.http.impl.nio.client.CloseableHttpAsyncClient;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Type;\n+import java.net.URI;\n+\n+/**\n+ * {@link AsyncHttpClientRequest} implementation that uses apache async http client to\n+ * execute streaming requests\n+ *\n+ * @author mai.jh\n+ * @date 2020/5/29\n+ */\n+public class DefaultAsyncHttpClientRequest implements AsyncHttpClientRequest {\n+\n+    private final CloseableHttpAsyncClient asyncClient;\n+\n+    public DefaultAsyncHttpClientRequest(CloseableHttpAsyncClient asyncClient) {\n+        this.asyncClient = asyncClient;\n+        if (!this.asyncClient.isRunning()) {\n+            this.asyncClient.start();\n+        }\n+    }\n+\n+    @Override\n+    public <T> void execute(URI uri, String httpMethod, RequestHttpEntity requestHttpEntity, final Type responseType, final Callback<T> callback) throws Exception {\n+        HttpRequestBase httpRequestBase = DefaultHttpClientRequest.build(uri, httpMethod, requestHttpEntity);\n+        asyncClient.execute(httpRequestBase, new FutureCallback<HttpResponse>() {\n+            @Override\n+            public void completed(HttpResponse result) {\n+                DefaultClientHttpResponse response = new DefaultClientHttpResponse(result);\n+                try {\n+                    HttpRestResult<T> httpRestResult = ResponseHandler.responseEntityExtractor(response, responseType);\n+                    callback.onReceive(httpRestResult);\n+                } catch (Exception e) {\n+                    callback.onError(e);\n+                }\n+            }\n+\n+            @Override\n+            public void failed(Exception ex) {\n+                callback.onError(ex);\n+            }\n+\n+            @Override\n+            public void cancelled() {\n+\n+            }\n+        });\n+\n+    }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgxOTQ2Ng==", "bodyText": "remove extra blank line", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437819466", "createdAt": "2020-06-10T02:07:50Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/http/client/DefaultClientHttpResponse.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.http.client;\n+\n+import com.alibaba.nacos.common.http.param.Header;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.utils.HttpClientUtils;\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgxOTQ5Mw==", "bodyText": "remove extra blank line", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437819493", "createdAt": "2020-06-10T02:07:55Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/http/client/DefaultClientHttpResponse.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.http.client;\n+\n+import com.alibaba.nacos.common.http.param.Header;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.utils.HttpClientUtils;\n+\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMDE1MQ==", "bodyText": "remove extra blank line", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437820151", "createdAt": "2020-06-10T02:10:11Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/http/client/DefaultHttpClientRequest.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.http.client;\n+\n+import com.alibaba.nacos.common.constant.HttpHeaderConsts;\n+import com.alibaba.nacos.common.http.BaseHttpMethod;\n+import com.alibaba.nacos.common.http.param.Header;\n+import com.alibaba.nacos.common.http.param.MediaType;\n+import com.alibaba.nacos.common.model.RequestHttpEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpRequestBase;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Map;\n+\n+/**\n+ * {@link HttpClientRequest} implementation that uses apache http client to\n+ * execute streaming requests\n+ *\n+ * @author mai.jh\n+ * @date 2020/5/24\n+ */\n+@SuppressWarnings({\"unchecked\", \"rawtypes\", \"resource\"})\n+public class DefaultHttpClientRequest implements HttpClientRequest {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(NacosRestTemplate.class);\n+\n+    private final CloseableHttpClient client;\n+\n+    public DefaultHttpClientRequest(CloseableHttpClient client) {\n+        this.client = client;\n+    }\n+\n+    @Override\n+    public HttpClientResponse execute(URI uri, String httpMethod, RequestHttpEntity requestHttpEntity) throws Exception {\n+        HttpRequestBase request = build(uri, httpMethod, requestHttpEntity);\n+        CloseableHttpResponse response = client.execute(request);\n+        if (logger.isDebugEnabled()) {\n+            logger.debug(\"Request from server: \" + request.getURI().toString());\n+        }\n+        return new DefaultClientHttpResponse(response);\n+    }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMDUyMQ==", "bodyText": "remove extra blank line", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437820521", "createdAt": "2020-06-10T02:11:41Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/http/client/HttpClientRequest.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.http.client;\n+\n+import com.alibaba.nacos.common.model.RequestHttpEntity;\n+\n+import java.io.Closeable;\n+import java.net.URI;\n+\n+/**\n+ * Represents a client-side HTTP request.\n+ * Created via an implementation execute.\n+ *\n+ * @author mai.jh\n+ * @date 2020/5/23\n+ */\n+public interface HttpClientRequest extends Closeable {\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMTA0NA==", "bodyText": "remove extra blank line", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437821044", "createdAt": "2020-06-10T02:13:45Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/http/client/NacosAsyncRestTemplate.java", "diffHunk": "@@ -0,0 +1,353 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.http.client;\n+\n+import com.alibaba.nacos.common.http.Callback;\n+import com.alibaba.nacos.common.http.HttpUtils;\n+import com.alibaba.nacos.common.http.param.Header;\n+import com.alibaba.nacos.common.http.param.MediaType;\n+import com.alibaba.nacos.common.http.param.Query;\n+import com.alibaba.nacos.common.model.RequestHttpEntity;\n+import com.alibaba.nacos.common.utils.HttpMethod;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Type;\n+import java.net.URI;\n+import java.util.Map;\n+\n+/**\n+ * NacosAsyncRestTemplate async\n+ *\n+ * @author mai.jh\n+ * @date 2020/5/29\n+ * @see AsyncHttpClientRequest\n+ * @see HttpClientResponse\n+ */\n+public class NacosAsyncRestTemplate {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(NacosAsyncRestTemplate.class);\n+\n+    private AsyncHttpClientRequest clientRequest;\n+\n+    public NacosAsyncRestTemplate(AsyncHttpClientRequest clientRequest) {\n+        this.clientRequest = clientRequest;\n+    }\n+\n+\n+    /**\n+     * async http get\n+     * URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param responseType return type\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void get(String url, Header header, Query query, Type responseType, Callback<T> callback) throws Exception {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMTA2Nw==", "bodyText": "remove extra blank line", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437821067", "createdAt": "2020-06-10T02:13:50Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/http/client/NacosAsyncRestTemplate.java", "diffHunk": "@@ -0,0 +1,353 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.http.client;\n+\n+import com.alibaba.nacos.common.http.Callback;\n+import com.alibaba.nacos.common.http.HttpUtils;\n+import com.alibaba.nacos.common.http.param.Header;\n+import com.alibaba.nacos.common.http.param.MediaType;\n+import com.alibaba.nacos.common.http.param.Query;\n+import com.alibaba.nacos.common.model.RequestHttpEntity;\n+import com.alibaba.nacos.common.utils.HttpMethod;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Type;\n+import java.net.URI;\n+import java.util.Map;\n+\n+/**\n+ * NacosAsyncRestTemplate async\n+ *\n+ * @author mai.jh\n+ * @date 2020/5/29\n+ * @see AsyncHttpClientRequest\n+ * @see HttpClientResponse\n+ */\n+public class NacosAsyncRestTemplate {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(NacosAsyncRestTemplate.class);\n+\n+    private AsyncHttpClientRequest clientRequest;\n+\n+    public NacosAsyncRestTemplate(AsyncHttpClientRequest clientRequest) {\n+        this.clientRequest = clientRequest;\n+    }\n+\n+\n+    /**\n+     * async http get\n+     * URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param responseType return type\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void get(String url, Header header, Query query, Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.GET, new RequestHttpEntity(header, query), responseType, callback);\n+    }\n+\n+    /**\n+     * async http get\n+     * URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       headers\n+     * @param paramValues  paramValues\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void get(String url, Header header, Map<String, String> paramValues,\n+                        Type responseType, Callback<T> callback) throws Exception {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMTA4Mg==", "bodyText": "remove extra blank line", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437821082", "createdAt": "2020-06-10T02:13:54Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/http/client/NacosAsyncRestTemplate.java", "diffHunk": "@@ -0,0 +1,353 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.http.client;\n+\n+import com.alibaba.nacos.common.http.Callback;\n+import com.alibaba.nacos.common.http.HttpUtils;\n+import com.alibaba.nacos.common.http.param.Header;\n+import com.alibaba.nacos.common.http.param.MediaType;\n+import com.alibaba.nacos.common.http.param.Query;\n+import com.alibaba.nacos.common.model.RequestHttpEntity;\n+import com.alibaba.nacos.common.utils.HttpMethod;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Type;\n+import java.net.URI;\n+import java.util.Map;\n+\n+/**\n+ * NacosAsyncRestTemplate async\n+ *\n+ * @author mai.jh\n+ * @date 2020/5/29\n+ * @see AsyncHttpClientRequest\n+ * @see HttpClientResponse\n+ */\n+public class NacosAsyncRestTemplate {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(NacosAsyncRestTemplate.class);\n+\n+    private AsyncHttpClientRequest clientRequest;\n+\n+    public NacosAsyncRestTemplate(AsyncHttpClientRequest clientRequest) {\n+        this.clientRequest = clientRequest;\n+    }\n+\n+\n+    /**\n+     * async http get\n+     * URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param responseType return type\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void get(String url, Header header, Query query, Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.GET, new RequestHttpEntity(header, query), responseType, callback);\n+    }\n+\n+    /**\n+     * async http get\n+     * URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       headers\n+     * @param paramValues  paramValues\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void get(String url, Header header, Map<String, String> paramValues,\n+                        Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.GET, new RequestHttpEntity(header,\n+            Query.newInstance().initParams(paramValues)), responseType, callback);\n+    }\n+\n+    /**\n+     * async get request, may be pulling a lot of data\n+     * URL request params are expanded using the given query {@link Query},\n+     * More request parameters can be set via body.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param body         get with body\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void getLarge(String url, Header header, Query query, Object body,\n+                             Type responseType, Callback<T> callback) throws Exception {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMTEwNA==", "bodyText": "remove extra blank line", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437821104", "createdAt": "2020-06-10T02:13:58Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/http/client/NacosAsyncRestTemplate.java", "diffHunk": "@@ -0,0 +1,353 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.http.client;\n+\n+import com.alibaba.nacos.common.http.Callback;\n+import com.alibaba.nacos.common.http.HttpUtils;\n+import com.alibaba.nacos.common.http.param.Header;\n+import com.alibaba.nacos.common.http.param.MediaType;\n+import com.alibaba.nacos.common.http.param.Query;\n+import com.alibaba.nacos.common.model.RequestHttpEntity;\n+import com.alibaba.nacos.common.utils.HttpMethod;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Type;\n+import java.net.URI;\n+import java.util.Map;\n+\n+/**\n+ * NacosAsyncRestTemplate async\n+ *\n+ * @author mai.jh\n+ * @date 2020/5/29\n+ * @see AsyncHttpClientRequest\n+ * @see HttpClientResponse\n+ */\n+public class NacosAsyncRestTemplate {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(NacosAsyncRestTemplate.class);\n+\n+    private AsyncHttpClientRequest clientRequest;\n+\n+    public NacosAsyncRestTemplate(AsyncHttpClientRequest clientRequest) {\n+        this.clientRequest = clientRequest;\n+    }\n+\n+\n+    /**\n+     * async http get\n+     * URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param responseType return type\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void get(String url, Header header, Query query, Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.GET, new RequestHttpEntity(header, query), responseType, callback);\n+    }\n+\n+    /**\n+     * async http get\n+     * URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       headers\n+     * @param paramValues  paramValues\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void get(String url, Header header, Map<String, String> paramValues,\n+                        Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.GET, new RequestHttpEntity(header,\n+            Query.newInstance().initParams(paramValues)), responseType, callback);\n+    }\n+\n+    /**\n+     * async get request, may be pulling a lot of data\n+     * URL request params are expanded using the given query {@link Query},\n+     * More request parameters can be set via body.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param body         get with body\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void getLarge(String url, Header header, Query query, Object body,\n+                             Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.GET_LARGE,\n+            new RequestHttpEntity(header, query, body), responseType, callback);\n+    }\n+\n+    /**\n+     * async http delete\n+     * URL request params are expanded using the given query {@link Query},\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void delete(String url, Header header, Query query,\n+                           Type responseType, Callback<T> callback) throws Exception {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 131}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMTE0Mw==", "bodyText": "remove extra blank line", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437821143", "createdAt": "2020-06-10T02:14:06Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/http/client/NacosAsyncRestTemplate.java", "diffHunk": "@@ -0,0 +1,353 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.http.client;\n+\n+import com.alibaba.nacos.common.http.Callback;\n+import com.alibaba.nacos.common.http.HttpUtils;\n+import com.alibaba.nacos.common.http.param.Header;\n+import com.alibaba.nacos.common.http.param.MediaType;\n+import com.alibaba.nacos.common.http.param.Query;\n+import com.alibaba.nacos.common.model.RequestHttpEntity;\n+import com.alibaba.nacos.common.utils.HttpMethod;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Type;\n+import java.net.URI;\n+import java.util.Map;\n+\n+/**\n+ * NacosAsyncRestTemplate async\n+ *\n+ * @author mai.jh\n+ * @date 2020/5/29\n+ * @see AsyncHttpClientRequest\n+ * @see HttpClientResponse\n+ */\n+public class NacosAsyncRestTemplate {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(NacosAsyncRestTemplate.class);\n+\n+    private AsyncHttpClientRequest clientRequest;\n+\n+    public NacosAsyncRestTemplate(AsyncHttpClientRequest clientRequest) {\n+        this.clientRequest = clientRequest;\n+    }\n+\n+\n+    /**\n+     * async http get\n+     * URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param responseType return type\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void get(String url, Header header, Query query, Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.GET, new RequestHttpEntity(header, query), responseType, callback);\n+    }\n+\n+    /**\n+     * async http get\n+     * URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       headers\n+     * @param paramValues  paramValues\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void get(String url, Header header, Map<String, String> paramValues,\n+                        Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.GET, new RequestHttpEntity(header,\n+            Query.newInstance().initParams(paramValues)), responseType, callback);\n+    }\n+\n+    /**\n+     * async get request, may be pulling a lot of data\n+     * URL request params are expanded using the given query {@link Query},\n+     * More request parameters can be set via body.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param body         get with body\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void getLarge(String url, Header header, Query query, Object body,\n+                             Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.GET_LARGE,\n+            new RequestHttpEntity(header, query, body), responseType, callback);\n+    }\n+\n+    /**\n+     * async http delete\n+     * URL request params are expanded using the given query {@link Query},\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void delete(String url, Header header, Query query,\n+                           Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.DELETE,\n+            new RequestHttpEntity(header, query), responseType, callback);\n+    }\n+\n+    /**\n+     * async http put\n+     * Create a new resource by PUTting the given body to http request.\n+     * <p>URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void put(String url, Header header, Query query, Object body,\n+                        Type responseType, Callback<T> callback) throws Exception {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMTE2NQ==", "bodyText": "remove extra blank line", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437821165", "createdAt": "2020-06-10T02:14:12Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/http/client/NacosAsyncRestTemplate.java", "diffHunk": "@@ -0,0 +1,353 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.http.client;\n+\n+import com.alibaba.nacos.common.http.Callback;\n+import com.alibaba.nacos.common.http.HttpUtils;\n+import com.alibaba.nacos.common.http.param.Header;\n+import com.alibaba.nacos.common.http.param.MediaType;\n+import com.alibaba.nacos.common.http.param.Query;\n+import com.alibaba.nacos.common.model.RequestHttpEntity;\n+import com.alibaba.nacos.common.utils.HttpMethod;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Type;\n+import java.net.URI;\n+import java.util.Map;\n+\n+/**\n+ * NacosAsyncRestTemplate async\n+ *\n+ * @author mai.jh\n+ * @date 2020/5/29\n+ * @see AsyncHttpClientRequest\n+ * @see HttpClientResponse\n+ */\n+public class NacosAsyncRestTemplate {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(NacosAsyncRestTemplate.class);\n+\n+    private AsyncHttpClientRequest clientRequest;\n+\n+    public NacosAsyncRestTemplate(AsyncHttpClientRequest clientRequest) {\n+        this.clientRequest = clientRequest;\n+    }\n+\n+\n+    /**\n+     * async http get\n+     * URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param responseType return type\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void get(String url, Header header, Query query, Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.GET, new RequestHttpEntity(header, query), responseType, callback);\n+    }\n+\n+    /**\n+     * async http get\n+     * URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       headers\n+     * @param paramValues  paramValues\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void get(String url, Header header, Map<String, String> paramValues,\n+                        Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.GET, new RequestHttpEntity(header,\n+            Query.newInstance().initParams(paramValues)), responseType, callback);\n+    }\n+\n+    /**\n+     * async get request, may be pulling a lot of data\n+     * URL request params are expanded using the given query {@link Query},\n+     * More request parameters can be set via body.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param body         get with body\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void getLarge(String url, Header header, Query query, Object body,\n+                             Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.GET_LARGE,\n+            new RequestHttpEntity(header, query, body), responseType, callback);\n+    }\n+\n+    /**\n+     * async http delete\n+     * URL request params are expanded using the given query {@link Query},\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void delete(String url, Header header, Query query,\n+                           Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.DELETE,\n+            new RequestHttpEntity(header, query), responseType, callback);\n+    }\n+\n+    /**\n+     * async http put\n+     * Create a new resource by PUTting the given body to http request.\n+     * <p>URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void put(String url, Header header, Query query, Object body,\n+                        Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.PUT,\n+            new RequestHttpEntity(header, query, body), responseType, callback);\n+    }\n+\n+    /**\n+     * async http put Json\n+     * Create a new resource by PUTting the given body to http request,\n+     * http header contentType default 'application/json;charset=UTF-8'.\n+     * <p>URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param paramValues  http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void putJson(String url, Header header, Map<String, String> paramValues,\n+                            String body, Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.PUT, new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_JSON),\n+                Query.newInstance().initParams(paramValues), body),\n+            responseType, callback);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 183}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMTE4OA==", "bodyText": "remove extra blank line", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437821188", "createdAt": "2020-06-10T02:14:18Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/http/client/NacosAsyncRestTemplate.java", "diffHunk": "@@ -0,0 +1,353 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.http.client;\n+\n+import com.alibaba.nacos.common.http.Callback;\n+import com.alibaba.nacos.common.http.HttpUtils;\n+import com.alibaba.nacos.common.http.param.Header;\n+import com.alibaba.nacos.common.http.param.MediaType;\n+import com.alibaba.nacos.common.http.param.Query;\n+import com.alibaba.nacos.common.model.RequestHttpEntity;\n+import com.alibaba.nacos.common.utils.HttpMethod;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Type;\n+import java.net.URI;\n+import java.util.Map;\n+\n+/**\n+ * NacosAsyncRestTemplate async\n+ *\n+ * @author mai.jh\n+ * @date 2020/5/29\n+ * @see AsyncHttpClientRequest\n+ * @see HttpClientResponse\n+ */\n+public class NacosAsyncRestTemplate {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(NacosAsyncRestTemplate.class);\n+\n+    private AsyncHttpClientRequest clientRequest;\n+\n+    public NacosAsyncRestTemplate(AsyncHttpClientRequest clientRequest) {\n+        this.clientRequest = clientRequest;\n+    }\n+\n+\n+    /**\n+     * async http get\n+     * URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param responseType return type\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void get(String url, Header header, Query query, Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.GET, new RequestHttpEntity(header, query), responseType, callback);\n+    }\n+\n+    /**\n+     * async http get\n+     * URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       headers\n+     * @param paramValues  paramValues\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void get(String url, Header header, Map<String, String> paramValues,\n+                        Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.GET, new RequestHttpEntity(header,\n+            Query.newInstance().initParams(paramValues)), responseType, callback);\n+    }\n+\n+    /**\n+     * async get request, may be pulling a lot of data\n+     * URL request params are expanded using the given query {@link Query},\n+     * More request parameters can be set via body.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param body         get with body\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void getLarge(String url, Header header, Query query, Object body,\n+                             Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.GET_LARGE,\n+            new RequestHttpEntity(header, query, body), responseType, callback);\n+    }\n+\n+    /**\n+     * async http delete\n+     * URL request params are expanded using the given query {@link Query},\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void delete(String url, Header header, Query query,\n+                           Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.DELETE,\n+            new RequestHttpEntity(header, query), responseType, callback);\n+    }\n+\n+    /**\n+     * async http put\n+     * Create a new resource by PUTting the given body to http request.\n+     * <p>URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void put(String url, Header header, Query query, Object body,\n+                        Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.PUT,\n+            new RequestHttpEntity(header, query, body), responseType, callback);\n+    }\n+\n+    /**\n+     * async http put Json\n+     * Create a new resource by PUTting the given body to http request,\n+     * http header contentType default 'application/json;charset=UTF-8'.\n+     * <p>URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param paramValues  http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void putJson(String url, Header header, Map<String, String> paramValues,\n+                            String body, Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.PUT, new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_JSON),\n+                Query.newInstance().initParams(paramValues), body),\n+            responseType, callback);\n+\n+    }\n+\n+    /**\n+     * async http put from\n+     * Create a new resource by PUTting the given map {@code bodyValues} to http request,\n+     * http header contentType default 'application/x-www-form-urlencoded;charset=utf-8'.\n+     * <p>URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param bodyValues   http body param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void putFrom(String url, Header header, Query query, Map<String, String> bodyValues,\n+                            Type responseType, Callback<T> callback) throws Exception {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 205}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMTIwOA==", "bodyText": "remove extra blank line", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437821208", "createdAt": "2020-06-10T02:14:22Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/http/client/NacosAsyncRestTemplate.java", "diffHunk": "@@ -0,0 +1,353 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.http.client;\n+\n+import com.alibaba.nacos.common.http.Callback;\n+import com.alibaba.nacos.common.http.HttpUtils;\n+import com.alibaba.nacos.common.http.param.Header;\n+import com.alibaba.nacos.common.http.param.MediaType;\n+import com.alibaba.nacos.common.http.param.Query;\n+import com.alibaba.nacos.common.model.RequestHttpEntity;\n+import com.alibaba.nacos.common.utils.HttpMethod;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Type;\n+import java.net.URI;\n+import java.util.Map;\n+\n+/**\n+ * NacosAsyncRestTemplate async\n+ *\n+ * @author mai.jh\n+ * @date 2020/5/29\n+ * @see AsyncHttpClientRequest\n+ * @see HttpClientResponse\n+ */\n+public class NacosAsyncRestTemplate {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(NacosAsyncRestTemplate.class);\n+\n+    private AsyncHttpClientRequest clientRequest;\n+\n+    public NacosAsyncRestTemplate(AsyncHttpClientRequest clientRequest) {\n+        this.clientRequest = clientRequest;\n+    }\n+\n+\n+    /**\n+     * async http get\n+     * URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param responseType return type\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void get(String url, Header header, Query query, Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.GET, new RequestHttpEntity(header, query), responseType, callback);\n+    }\n+\n+    /**\n+     * async http get\n+     * URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       headers\n+     * @param paramValues  paramValues\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void get(String url, Header header, Map<String, String> paramValues,\n+                        Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.GET, new RequestHttpEntity(header,\n+            Query.newInstance().initParams(paramValues)), responseType, callback);\n+    }\n+\n+    /**\n+     * async get request, may be pulling a lot of data\n+     * URL request params are expanded using the given query {@link Query},\n+     * More request parameters can be set via body.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param body         get with body\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void getLarge(String url, Header header, Query query, Object body,\n+                             Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.GET_LARGE,\n+            new RequestHttpEntity(header, query, body), responseType, callback);\n+    }\n+\n+    /**\n+     * async http delete\n+     * URL request params are expanded using the given query {@link Query},\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void delete(String url, Header header, Query query,\n+                           Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.DELETE,\n+            new RequestHttpEntity(header, query), responseType, callback);\n+    }\n+\n+    /**\n+     * async http put\n+     * Create a new resource by PUTting the given body to http request.\n+     * <p>URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void put(String url, Header header, Query query, Object body,\n+                        Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.PUT,\n+            new RequestHttpEntity(header, query, body), responseType, callback);\n+    }\n+\n+    /**\n+     * async http put Json\n+     * Create a new resource by PUTting the given body to http request,\n+     * http header contentType default 'application/json;charset=UTF-8'.\n+     * <p>URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param paramValues  http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void putJson(String url, Header header, Map<String, String> paramValues,\n+                            String body, Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.PUT, new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_JSON),\n+                Query.newInstance().initParams(paramValues), body),\n+            responseType, callback);\n+\n+    }\n+\n+    /**\n+     * async http put from\n+     * Create a new resource by PUTting the given map {@code bodyValues} to http request,\n+     * http header contentType default 'application/x-www-form-urlencoded;charset=utf-8'.\n+     * <p>URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param bodyValues   http body param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void putFrom(String url, Header header, Query query, Map<String, String> bodyValues,\n+                            Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.PUT, new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_FORM_URLENCODED),\n+            query, bodyValues), responseType, callback);\n+    }\n+\n+    /**\n+     * async http put from\n+     * Create a new resource by PUTting the given map {@code bodyValues} to http request,\n+     * http header contentType default 'application/x-www-form-urlencoded;charset=utf-8'.\n+     * <p>URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param paramValues  http query param\n+     * @param bodyValues   http body param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void putFrom(String url, Header header, Map<String, String> paramValues,\n+                            Map<String, String> bodyValues, Type responseType, Callback<T> callback) throws Exception {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 230}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMTIyMg==", "bodyText": "remove extra blank line", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437821222", "createdAt": "2020-06-10T02:14:27Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/http/client/NacosAsyncRestTemplate.java", "diffHunk": "@@ -0,0 +1,353 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.http.client;\n+\n+import com.alibaba.nacos.common.http.Callback;\n+import com.alibaba.nacos.common.http.HttpUtils;\n+import com.alibaba.nacos.common.http.param.Header;\n+import com.alibaba.nacos.common.http.param.MediaType;\n+import com.alibaba.nacos.common.http.param.Query;\n+import com.alibaba.nacos.common.model.RequestHttpEntity;\n+import com.alibaba.nacos.common.utils.HttpMethod;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Type;\n+import java.net.URI;\n+import java.util.Map;\n+\n+/**\n+ * NacosAsyncRestTemplate async\n+ *\n+ * @author mai.jh\n+ * @date 2020/5/29\n+ * @see AsyncHttpClientRequest\n+ * @see HttpClientResponse\n+ */\n+public class NacosAsyncRestTemplate {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(NacosAsyncRestTemplate.class);\n+\n+    private AsyncHttpClientRequest clientRequest;\n+\n+    public NacosAsyncRestTemplate(AsyncHttpClientRequest clientRequest) {\n+        this.clientRequest = clientRequest;\n+    }\n+\n+\n+    /**\n+     * async http get\n+     * URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param responseType return type\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void get(String url, Header header, Query query, Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.GET, new RequestHttpEntity(header, query), responseType, callback);\n+    }\n+\n+    /**\n+     * async http get\n+     * URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       headers\n+     * @param paramValues  paramValues\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void get(String url, Header header, Map<String, String> paramValues,\n+                        Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.GET, new RequestHttpEntity(header,\n+            Query.newInstance().initParams(paramValues)), responseType, callback);\n+    }\n+\n+    /**\n+     * async get request, may be pulling a lot of data\n+     * URL request params are expanded using the given query {@link Query},\n+     * More request parameters can be set via body.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param body         get with body\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void getLarge(String url, Header header, Query query, Object body,\n+                             Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.GET_LARGE,\n+            new RequestHttpEntity(header, query, body), responseType, callback);\n+    }\n+\n+    /**\n+     * async http delete\n+     * URL request params are expanded using the given query {@link Query},\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void delete(String url, Header header, Query query,\n+                           Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.DELETE,\n+            new RequestHttpEntity(header, query), responseType, callback);\n+    }\n+\n+    /**\n+     * async http put\n+     * Create a new resource by PUTting the given body to http request.\n+     * <p>URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void put(String url, Header header, Query query, Object body,\n+                        Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.PUT,\n+            new RequestHttpEntity(header, query, body), responseType, callback);\n+    }\n+\n+    /**\n+     * async http put Json\n+     * Create a new resource by PUTting the given body to http request,\n+     * http header contentType default 'application/json;charset=UTF-8'.\n+     * <p>URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param paramValues  http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void putJson(String url, Header header, Map<String, String> paramValues,\n+                            String body, Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.PUT, new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_JSON),\n+                Query.newInstance().initParams(paramValues), body),\n+            responseType, callback);\n+\n+    }\n+\n+    /**\n+     * async http put from\n+     * Create a new resource by PUTting the given map {@code bodyValues} to http request,\n+     * http header contentType default 'application/x-www-form-urlencoded;charset=utf-8'.\n+     * <p>URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param bodyValues   http body param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void putFrom(String url, Header header, Query query, Map<String, String> bodyValues,\n+                            Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.PUT, new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_FORM_URLENCODED),\n+            query, bodyValues), responseType, callback);\n+    }\n+\n+    /**\n+     * async http put from\n+     * Create a new resource by PUTting the given map {@code bodyValues} to http request,\n+     * http header contentType default 'application/x-www-form-urlencoded;charset=utf-8'.\n+     * <p>URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param paramValues  http query param\n+     * @param bodyValues   http body param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void putFrom(String url, Header header, Map<String, String> paramValues,\n+                            Map<String, String> bodyValues, Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.PUT, new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_FORM_URLENCODED),\n+            Query.newInstance().initParams(paramValues), bodyValues), responseType, callback);\n+    }\n+\n+    /**\n+     * async http post\n+     * Create a new resource by POSTing the given object to the http request.\n+     * <p>URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void post(String url, Header header, Query query, Object body,\n+                         Type responseType, Callback<T> callback) throws Exception {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 254}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMTI2NA==", "bodyText": "remove extra blank line", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437821264", "createdAt": "2020-06-10T02:14:40Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/http/client/NacosAsyncRestTemplate.java", "diffHunk": "@@ -0,0 +1,353 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.http.client;\n+\n+import com.alibaba.nacos.common.http.Callback;\n+import com.alibaba.nacos.common.http.HttpUtils;\n+import com.alibaba.nacos.common.http.param.Header;\n+import com.alibaba.nacos.common.http.param.MediaType;\n+import com.alibaba.nacos.common.http.param.Query;\n+import com.alibaba.nacos.common.model.RequestHttpEntity;\n+import com.alibaba.nacos.common.utils.HttpMethod;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Type;\n+import java.net.URI;\n+import java.util.Map;\n+\n+/**\n+ * NacosAsyncRestTemplate async\n+ *\n+ * @author mai.jh\n+ * @date 2020/5/29\n+ * @see AsyncHttpClientRequest\n+ * @see HttpClientResponse\n+ */\n+public class NacosAsyncRestTemplate {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(NacosAsyncRestTemplate.class);\n+\n+    private AsyncHttpClientRequest clientRequest;\n+\n+    public NacosAsyncRestTemplate(AsyncHttpClientRequest clientRequest) {\n+        this.clientRequest = clientRequest;\n+    }\n+\n+\n+    /**\n+     * async http get\n+     * URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param responseType return type\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void get(String url, Header header, Query query, Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.GET, new RequestHttpEntity(header, query), responseType, callback);\n+    }\n+\n+    /**\n+     * async http get\n+     * URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       headers\n+     * @param paramValues  paramValues\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void get(String url, Header header, Map<String, String> paramValues,\n+                        Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.GET, new RequestHttpEntity(header,\n+            Query.newInstance().initParams(paramValues)), responseType, callback);\n+    }\n+\n+    /**\n+     * async get request, may be pulling a lot of data\n+     * URL request params are expanded using the given query {@link Query},\n+     * More request parameters can be set via body.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param body         get with body\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void getLarge(String url, Header header, Query query, Object body,\n+                             Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.GET_LARGE,\n+            new RequestHttpEntity(header, query, body), responseType, callback);\n+    }\n+\n+    /**\n+     * async http delete\n+     * URL request params are expanded using the given query {@link Query},\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void delete(String url, Header header, Query query,\n+                           Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.DELETE,\n+            new RequestHttpEntity(header, query), responseType, callback);\n+    }\n+\n+    /**\n+     * async http put\n+     * Create a new resource by PUTting the given body to http request.\n+     * <p>URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void put(String url, Header header, Query query, Object body,\n+                        Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.PUT,\n+            new RequestHttpEntity(header, query, body), responseType, callback);\n+    }\n+\n+    /**\n+     * async http put Json\n+     * Create a new resource by PUTting the given body to http request,\n+     * http header contentType default 'application/json;charset=UTF-8'.\n+     * <p>URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param paramValues  http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void putJson(String url, Header header, Map<String, String> paramValues,\n+                            String body, Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.PUT, new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_JSON),\n+                Query.newInstance().initParams(paramValues), body),\n+            responseType, callback);\n+\n+    }\n+\n+    /**\n+     * async http put from\n+     * Create a new resource by PUTting the given map {@code bodyValues} to http request,\n+     * http header contentType default 'application/x-www-form-urlencoded;charset=utf-8'.\n+     * <p>URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param bodyValues   http body param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void putFrom(String url, Header header, Query query, Map<String, String> bodyValues,\n+                            Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.PUT, new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_FORM_URLENCODED),\n+            query, bodyValues), responseType, callback);\n+    }\n+\n+    /**\n+     * async http put from\n+     * Create a new resource by PUTting the given map {@code bodyValues} to http request,\n+     * http header contentType default 'application/x-www-form-urlencoded;charset=utf-8'.\n+     * <p>URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param paramValues  http query param\n+     * @param bodyValues   http body param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void putFrom(String url, Header header, Map<String, String> paramValues,\n+                            Map<String, String> bodyValues, Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.PUT, new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_FORM_URLENCODED),\n+            Query.newInstance().initParams(paramValues), bodyValues), responseType, callback);\n+    }\n+\n+    /**\n+     * async http post\n+     * Create a new resource by POSTing the given object to the http request.\n+     * <p>URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void post(String url, Header header, Query query, Object body,\n+                         Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.POST, new RequestHttpEntity(\n+            header, query, body), responseType, callback);\n+    }\n+\n+    /**\n+     * async http post Json\n+     * Create a new resource by POSTing the given object to the http request,\n+     * http header contentType default 'application/json;charset=UTF-8'.\n+     * <p>URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param paramValues  http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void postJson(String url, Header header, Map<String, String> paramValues,\n+                             String body, Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.POST, new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_JSON),\n+            Query.newInstance().initParams(paramValues), body),\n+            responseType, callback);\n+    }\n+\n+    /**\n+     * async http post from\n+     * Create a new resource by PUTting the given map {@code bodyValues} to http request,\n+     * http header contentType default 'application/x-www-form-urlencoded;charset=utf-8'.\n+     * <p>URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param bodyValues   http body param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void postFrom(String url, Header header, Query query, Map<String, String> bodyValues,\n+                             Type responseType, Callback<T> callback) throws Exception {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 304}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMTMwOQ==", "bodyText": "remove extra blank line", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437821309", "createdAt": "2020-06-10T02:14:48Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/http/client/NacosAsyncRestTemplate.java", "diffHunk": "@@ -0,0 +1,353 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.http.client;\n+\n+import com.alibaba.nacos.common.http.Callback;\n+import com.alibaba.nacos.common.http.HttpUtils;\n+import com.alibaba.nacos.common.http.param.Header;\n+import com.alibaba.nacos.common.http.param.MediaType;\n+import com.alibaba.nacos.common.http.param.Query;\n+import com.alibaba.nacos.common.model.RequestHttpEntity;\n+import com.alibaba.nacos.common.utils.HttpMethod;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Type;\n+import java.net.URI;\n+import java.util.Map;\n+\n+/**\n+ * NacosAsyncRestTemplate async\n+ *\n+ * @author mai.jh\n+ * @date 2020/5/29\n+ * @see AsyncHttpClientRequest\n+ * @see HttpClientResponse\n+ */\n+public class NacosAsyncRestTemplate {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(NacosAsyncRestTemplate.class);\n+\n+    private AsyncHttpClientRequest clientRequest;\n+\n+    public NacosAsyncRestTemplate(AsyncHttpClientRequest clientRequest) {\n+        this.clientRequest = clientRequest;\n+    }\n+\n+\n+    /**\n+     * async http get\n+     * URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param responseType return type\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void get(String url, Header header, Query query, Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.GET, new RequestHttpEntity(header, query), responseType, callback);\n+    }\n+\n+    /**\n+     * async http get\n+     * URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       headers\n+     * @param paramValues  paramValues\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void get(String url, Header header, Map<String, String> paramValues,\n+                        Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.GET, new RequestHttpEntity(header,\n+            Query.newInstance().initParams(paramValues)), responseType, callback);\n+    }\n+\n+    /**\n+     * async get request, may be pulling a lot of data\n+     * URL request params are expanded using the given query {@link Query},\n+     * More request parameters can be set via body.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param body         get with body\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void getLarge(String url, Header header, Query query, Object body,\n+                             Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.GET_LARGE,\n+            new RequestHttpEntity(header, query, body), responseType, callback);\n+    }\n+\n+    /**\n+     * async http delete\n+     * URL request params are expanded using the given query {@link Query},\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void delete(String url, Header header, Query query,\n+                           Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.DELETE,\n+            new RequestHttpEntity(header, query), responseType, callback);\n+    }\n+\n+    /**\n+     * async http put\n+     * Create a new resource by PUTting the given body to http request.\n+     * <p>URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void put(String url, Header header, Query query, Object body,\n+                        Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.PUT,\n+            new RequestHttpEntity(header, query, body), responseType, callback);\n+    }\n+\n+    /**\n+     * async http put Json\n+     * Create a new resource by PUTting the given body to http request,\n+     * http header contentType default 'application/json;charset=UTF-8'.\n+     * <p>URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param paramValues  http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void putJson(String url, Header header, Map<String, String> paramValues,\n+                            String body, Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.PUT, new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_JSON),\n+                Query.newInstance().initParams(paramValues), body),\n+            responseType, callback);\n+\n+    }\n+\n+    /**\n+     * async http put from\n+     * Create a new resource by PUTting the given map {@code bodyValues} to http request,\n+     * http header contentType default 'application/x-www-form-urlencoded;charset=utf-8'.\n+     * <p>URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param bodyValues   http body param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void putFrom(String url, Header header, Query query, Map<String, String> bodyValues,\n+                            Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.PUT, new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_FORM_URLENCODED),\n+            query, bodyValues), responseType, callback);\n+    }\n+\n+    /**\n+     * async http put from\n+     * Create a new resource by PUTting the given map {@code bodyValues} to http request,\n+     * http header contentType default 'application/x-www-form-urlencoded;charset=utf-8'.\n+     * <p>URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param paramValues  http query param\n+     * @param bodyValues   http body param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void putFrom(String url, Header header, Map<String, String> paramValues,\n+                            Map<String, String> bodyValues, Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.PUT, new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_FORM_URLENCODED),\n+            Query.newInstance().initParams(paramValues), bodyValues), responseType, callback);\n+    }\n+\n+    /**\n+     * async http post\n+     * Create a new resource by POSTing the given object to the http request.\n+     * <p>URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void post(String url, Header header, Query query, Object body,\n+                         Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.POST, new RequestHttpEntity(\n+            header, query, body), responseType, callback);\n+    }\n+\n+    /**\n+     * async http post Json\n+     * Create a new resource by POSTing the given object to the http request,\n+     * http header contentType default 'application/json;charset=UTF-8'.\n+     * <p>URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param paramValues  http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void postJson(String url, Header header, Map<String, String> paramValues,\n+                             String body, Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.POST, new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_JSON),\n+            Query.newInstance().initParams(paramValues), body),\n+            responseType, callback);\n+    }\n+\n+    /**\n+     * async http post from\n+     * Create a new resource by PUTting the given map {@code bodyValues} to http request,\n+     * http header contentType default 'application/x-www-form-urlencoded;charset=utf-8'.\n+     * <p>URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param bodyValues   http body param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void postFrom(String url, Header header, Query query, Map<String, String> bodyValues,\n+                             Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.POST, new RequestHttpEntity(\n+                header.setContentType(MediaType.APPLICATION_FORM_URLENCODED), query, bodyValues),\n+            responseType, callback);\n+    }\n+\n+    /**\n+     * async http post from\n+     * Create a new resource by PUTting the given map {@code bodyValues} to http request,\n+     * http header contentType default 'application/x-www-form-urlencoded;charset=utf-8'.\n+     * <p>URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param paramValues  http query param\n+     * @param bodyValues   http body param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void postFrom(String url, Header header, Map<String, String> paramValues,\n+                             Map<String, String> bodyValues, Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.POST, new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_FORM_URLENCODED),\n+            Query.newInstance().initParams(paramValues),\n+            bodyValues), responseType, callback);\n+\n+    }\n+\n+    private <T> void execute(String url, String httpMethod, RequestHttpEntity requestEntity,\n+                             Type responseType, Callback<T> callback) throws Exception {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 339}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMTMyNg==", "bodyText": "remove extra blank line", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437821326", "createdAt": "2020-06-10T02:14:53Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/http/client/NacosAsyncRestTemplate.java", "diffHunk": "@@ -0,0 +1,353 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.http.client;\n+\n+import com.alibaba.nacos.common.http.Callback;\n+import com.alibaba.nacos.common.http.HttpUtils;\n+import com.alibaba.nacos.common.http.param.Header;\n+import com.alibaba.nacos.common.http.param.MediaType;\n+import com.alibaba.nacos.common.http.param.Query;\n+import com.alibaba.nacos.common.model.RequestHttpEntity;\n+import com.alibaba.nacos.common.utils.HttpMethod;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Type;\n+import java.net.URI;\n+import java.util.Map;\n+\n+/**\n+ * NacosAsyncRestTemplate async\n+ *\n+ * @author mai.jh\n+ * @date 2020/5/29\n+ * @see AsyncHttpClientRequest\n+ * @see HttpClientResponse\n+ */\n+public class NacosAsyncRestTemplate {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(NacosAsyncRestTemplate.class);\n+\n+    private AsyncHttpClientRequest clientRequest;\n+\n+    public NacosAsyncRestTemplate(AsyncHttpClientRequest clientRequest) {\n+        this.clientRequest = clientRequest;\n+    }\n+\n+\n+    /**\n+     * async http get\n+     * URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param responseType return type\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void get(String url, Header header, Query query, Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.GET, new RequestHttpEntity(header, query), responseType, callback);\n+    }\n+\n+    /**\n+     * async http get\n+     * URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       headers\n+     * @param paramValues  paramValues\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void get(String url, Header header, Map<String, String> paramValues,\n+                        Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.GET, new RequestHttpEntity(header,\n+            Query.newInstance().initParams(paramValues)), responseType, callback);\n+    }\n+\n+    /**\n+     * async get request, may be pulling a lot of data\n+     * URL request params are expanded using the given query {@link Query},\n+     * More request parameters can be set via body.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param body         get with body\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void getLarge(String url, Header header, Query query, Object body,\n+                             Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.GET_LARGE,\n+            new RequestHttpEntity(header, query, body), responseType, callback);\n+    }\n+\n+    /**\n+     * async http delete\n+     * URL request params are expanded using the given query {@link Query},\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void delete(String url, Header header, Query query,\n+                           Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.DELETE,\n+            new RequestHttpEntity(header, query), responseType, callback);\n+    }\n+\n+    /**\n+     * async http put\n+     * Create a new resource by PUTting the given body to http request.\n+     * <p>URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void put(String url, Header header, Query query, Object body,\n+                        Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.PUT,\n+            new RequestHttpEntity(header, query, body), responseType, callback);\n+    }\n+\n+    /**\n+     * async http put Json\n+     * Create a new resource by PUTting the given body to http request,\n+     * http header contentType default 'application/json;charset=UTF-8'.\n+     * <p>URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param paramValues  http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void putJson(String url, Header header, Map<String, String> paramValues,\n+                            String body, Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.PUT, new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_JSON),\n+                Query.newInstance().initParams(paramValues), body),\n+            responseType, callback);\n+\n+    }\n+\n+    /**\n+     * async http put from\n+     * Create a new resource by PUTting the given map {@code bodyValues} to http request,\n+     * http header contentType default 'application/x-www-form-urlencoded;charset=utf-8'.\n+     * <p>URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param bodyValues   http body param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void putFrom(String url, Header header, Query query, Map<String, String> bodyValues,\n+                            Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.PUT, new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_FORM_URLENCODED),\n+            query, bodyValues), responseType, callback);\n+    }\n+\n+    /**\n+     * async http put from\n+     * Create a new resource by PUTting the given map {@code bodyValues} to http request,\n+     * http header contentType default 'application/x-www-form-urlencoded;charset=utf-8'.\n+     * <p>URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param paramValues  http query param\n+     * @param bodyValues   http body param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void putFrom(String url, Header header, Map<String, String> paramValues,\n+                            Map<String, String> bodyValues, Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.PUT, new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_FORM_URLENCODED),\n+            Query.newInstance().initParams(paramValues), bodyValues), responseType, callback);\n+    }\n+\n+    /**\n+     * async http post\n+     * Create a new resource by POSTing the given object to the http request.\n+     * <p>URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void post(String url, Header header, Query query, Object body,\n+                         Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.POST, new RequestHttpEntity(\n+            header, query, body), responseType, callback);\n+    }\n+\n+    /**\n+     * async http post Json\n+     * Create a new resource by POSTing the given object to the http request,\n+     * http header contentType default 'application/json;charset=UTF-8'.\n+     * <p>URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param paramValues  http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void postJson(String url, Header header, Map<String, String> paramValues,\n+                             String body, Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.POST, new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_JSON),\n+            Query.newInstance().initParams(paramValues), body),\n+            responseType, callback);\n+    }\n+\n+    /**\n+     * async http post from\n+     * Create a new resource by PUTting the given map {@code bodyValues} to http request,\n+     * http header contentType default 'application/x-www-form-urlencoded;charset=utf-8'.\n+     * <p>URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param bodyValues   http body param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void postFrom(String url, Header header, Query query, Map<String, String> bodyValues,\n+                             Type responseType, Callback<T> callback) throws Exception {\n+\n+        execute(url, HttpMethod.POST, new RequestHttpEntity(\n+                header.setContentType(MediaType.APPLICATION_FORM_URLENCODED), query, bodyValues),\n+            responseType, callback);\n+    }\n+\n+    /**\n+     * async http post from\n+     * Create a new resource by PUTting the given map {@code bodyValues} to http request,\n+     * http header contentType default 'application/x-www-form-urlencoded;charset=utf-8'.\n+     * <p>URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an RestResult or RestResult data {@code T} type.\n+     * <p>{@code callback} Result callback execution,\n+     * if you need response headers, you can convert the received RestResult to HttpRestResult.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param paramValues  http query param\n+     * @param bodyValues   http body param\n+     * @param responseType return type\n+     * @param callback     callback {@link Callback#onReceive(com.alibaba.nacos.common.model.RestResult)}\n+     * @throws Exception ex\n+     */\n+    public <T> void postFrom(String url, Header header, Map<String, String> paramValues,\n+                             Map<String, String> bodyValues, Type responseType, Callback<T> callback) throws Exception {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 329}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMTM2NQ==", "bodyText": "remove extra blank line", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437821365", "createdAt": "2020-06-10T02:15:00Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/http/client/NacosRestTemplate.java", "diffHunk": "@@ -0,0 +1,324 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.http.client;\n+\n+import com.alibaba.nacos.common.http.HttpRestResult;\n+import com.alibaba.nacos.common.http.HttpUtils;\n+import com.alibaba.nacos.common.http.handler.ResponseHandler;\n+import com.alibaba.nacos.common.http.param.Header;\n+import com.alibaba.nacos.common.http.param.MediaType;\n+import com.alibaba.nacos.common.http.param.Query;\n+import com.alibaba.nacos.common.model.RequestHttpEntity;\n+import com.alibaba.nacos.common.utils.HttpMethod;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Type;\n+import java.net.URI;\n+import java.util.Map;\n+\n+/**\n+ * NacosRestTemplate\n+ * Interface specifying a basic set of RESTful operations.\n+ *\n+ * @author mai.jh\n+ * @date 2020/5/24\n+ * @see HttpClientRequest\n+ * @see HttpClientResponse\n+ */\n+public class NacosRestTemplate {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(NacosRestTemplate.class);\n+\n+    private HttpClientRequest requestClient;\n+\n+    public NacosRestTemplate(HttpClientRequest requestClient) {\n+        this.requestClient = requestClient;\n+    }\n+\n+    /**\n+     * http get\n+     * URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> get(String url, Header header, Query query, Type responseType) throws Exception {\n+        return execute(url, HttpMethod.GET, new RequestHttpEntity(header, query), responseType);\n+    }\n+\n+    /**\n+     * http get\n+     * URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       headers\n+     * @param paramValues  paramValues\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> get(String url, Header header, Map<String, String> paramValues, Type responseType) throws Exception {\n+        RequestHttpEntity requestHttpEntity = new RequestHttpEntity(header, Query.newInstance().initParams(paramValues));\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMTQwMQ==", "bodyText": "remove extra blank line", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437821401", "createdAt": "2020-06-10T02:15:09Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/http/client/NacosRestTemplate.java", "diffHunk": "@@ -0,0 +1,324 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.http.client;\n+\n+import com.alibaba.nacos.common.http.HttpRestResult;\n+import com.alibaba.nacos.common.http.HttpUtils;\n+import com.alibaba.nacos.common.http.handler.ResponseHandler;\n+import com.alibaba.nacos.common.http.param.Header;\n+import com.alibaba.nacos.common.http.param.MediaType;\n+import com.alibaba.nacos.common.http.param.Query;\n+import com.alibaba.nacos.common.model.RequestHttpEntity;\n+import com.alibaba.nacos.common.utils.HttpMethod;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Type;\n+import java.net.URI;\n+import java.util.Map;\n+\n+/**\n+ * NacosRestTemplate\n+ * Interface specifying a basic set of RESTful operations.\n+ *\n+ * @author mai.jh\n+ * @date 2020/5/24\n+ * @see HttpClientRequest\n+ * @see HttpClientResponse\n+ */\n+public class NacosRestTemplate {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(NacosRestTemplate.class);\n+\n+    private HttpClientRequest requestClient;\n+\n+    public NacosRestTemplate(HttpClientRequest requestClient) {\n+        this.requestClient = requestClient;\n+    }\n+\n+    /**\n+     * http get\n+     * URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> get(String url, Header header, Query query, Type responseType) throws Exception {\n+        return execute(url, HttpMethod.GET, new RequestHttpEntity(header, query), responseType);\n+    }\n+\n+    /**\n+     * http get\n+     * URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       headers\n+     * @param paramValues  paramValues\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> get(String url, Header header, Map<String, String> paramValues, Type responseType) throws Exception {\n+        RequestHttpEntity requestHttpEntity = new RequestHttpEntity(header, Query.newInstance().initParams(paramValues));\n+\n+        return execute(url, HttpMethod.GET, requestHttpEntity, responseType);\n+    }\n+\n+    /**\n+     * get request, may be pulling a lot of data\n+     * URL request params are expanded using the given query {@link Query},\n+     * More request parameters can be set via body.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param body         get with body\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> getLarge(String url, Header header, Query query, Object body, Type responseType) throws Exception {\n+        return execute(url, HttpMethod.GET_LARGE, new RequestHttpEntity(header, query, body), responseType);\n+    }\n+\n+    /**\n+     * http delete\n+     * URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> delete(String url, Header header, Query query, Type responseType) throws Exception {\n+        return execute(url, HttpMethod.DELETE, new RequestHttpEntity(header, query), responseType);\n+    }\n+\n+    /**\n+     * http put\n+     * Create a new resource by PUTting the given body to http request.\n+     * <p>URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> put(String url, Header header, Query query, Object body, Type responseType) throws Exception {\n+        return execute(url, HttpMethod.PUT, new RequestHttpEntity(header, query, body), responseType);\n+    }\n+\n+    /**\n+     * http put json\n+     * Create a new resource by PUTting the given body to http request,\n+     * http header contentType default 'application/json;charset=UTF-8'.\n+     * <p>URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param paramValues  http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> putJson(String url, Header header, Map<String, String> paramValues, String body, Type responseType) throws Exception {\n+        RequestHttpEntity requestHttpEntity = new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_JSON),\n+            Query.newInstance().initParams(paramValues),\n+            body);\n+\n+        return execute(url, HttpMethod.PUT, requestHttpEntity, responseType);\n+    }\n+\n+    /**\n+     * http put from\n+     * Create a new resource by PUTting the given map {@code bodyValues} to http request,\n+     * http header contentType default 'application/x-www-form-urlencoded;charset=utf-8'.\n+     * <p>URL request params are expanded using the given query {@code Query}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query  http query param\n+     * @param bodyValues   http body param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> putFrom(String url, Header header, Query query, Map<String, String> bodyValues, Type responseType) throws Exception {\n+        RequestHttpEntity requestHttpEntity = new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_FORM_URLENCODED), query, bodyValues);\n+        return execute(url, HttpMethod.PUT, requestHttpEntity, responseType);\n+    }\n+\n+    /**\n+     * http put from\n+     * Create a new resource by PUTting the given map {@code bodyValues} to http request,\n+     * http header contentType default 'application/x-www-form-urlencoded;charset=utf-8'.\n+     * <p>URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param paramValues  http query param\n+     * @param bodyValues   http body param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> putFrom(String url, Header header, Map<String, String> paramValues, Map<String, String> bodyValues, Type responseType) throws Exception {\n+        RequestHttpEntity requestHttpEntity = new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_FORM_URLENCODED),\n+            Query.newInstance().initParams(paramValues),\n+            bodyValues);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMTQyMQ==", "bodyText": "remove extra blank line", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437821421", "createdAt": "2020-06-10T02:15:15Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/http/client/NacosRestTemplate.java", "diffHunk": "@@ -0,0 +1,324 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.http.client;\n+\n+import com.alibaba.nacos.common.http.HttpRestResult;\n+import com.alibaba.nacos.common.http.HttpUtils;\n+import com.alibaba.nacos.common.http.handler.ResponseHandler;\n+import com.alibaba.nacos.common.http.param.Header;\n+import com.alibaba.nacos.common.http.param.MediaType;\n+import com.alibaba.nacos.common.http.param.Query;\n+import com.alibaba.nacos.common.model.RequestHttpEntity;\n+import com.alibaba.nacos.common.utils.HttpMethod;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Type;\n+import java.net.URI;\n+import java.util.Map;\n+\n+/**\n+ * NacosRestTemplate\n+ * Interface specifying a basic set of RESTful operations.\n+ *\n+ * @author mai.jh\n+ * @date 2020/5/24\n+ * @see HttpClientRequest\n+ * @see HttpClientResponse\n+ */\n+public class NacosRestTemplate {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(NacosRestTemplate.class);\n+\n+    private HttpClientRequest requestClient;\n+\n+    public NacosRestTemplate(HttpClientRequest requestClient) {\n+        this.requestClient = requestClient;\n+    }\n+\n+    /**\n+     * http get\n+     * URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> get(String url, Header header, Query query, Type responseType) throws Exception {\n+        return execute(url, HttpMethod.GET, new RequestHttpEntity(header, query), responseType);\n+    }\n+\n+    /**\n+     * http get\n+     * URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       headers\n+     * @param paramValues  paramValues\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> get(String url, Header header, Map<String, String> paramValues, Type responseType) throws Exception {\n+        RequestHttpEntity requestHttpEntity = new RequestHttpEntity(header, Query.newInstance().initParams(paramValues));\n+\n+        return execute(url, HttpMethod.GET, requestHttpEntity, responseType);\n+    }\n+\n+    /**\n+     * get request, may be pulling a lot of data\n+     * URL request params are expanded using the given query {@link Query},\n+     * More request parameters can be set via body.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param body         get with body\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> getLarge(String url, Header header, Query query, Object body, Type responseType) throws Exception {\n+        return execute(url, HttpMethod.GET_LARGE, new RequestHttpEntity(header, query, body), responseType);\n+    }\n+\n+    /**\n+     * http delete\n+     * URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> delete(String url, Header header, Query query, Type responseType) throws Exception {\n+        return execute(url, HttpMethod.DELETE, new RequestHttpEntity(header, query), responseType);\n+    }\n+\n+    /**\n+     * http put\n+     * Create a new resource by PUTting the given body to http request.\n+     * <p>URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> put(String url, Header header, Query query, Object body, Type responseType) throws Exception {\n+        return execute(url, HttpMethod.PUT, new RequestHttpEntity(header, query, body), responseType);\n+    }\n+\n+    /**\n+     * http put json\n+     * Create a new resource by PUTting the given body to http request,\n+     * http header contentType default 'application/json;charset=UTF-8'.\n+     * <p>URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param paramValues  http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> putJson(String url, Header header, Map<String, String> paramValues, String body, Type responseType) throws Exception {\n+        RequestHttpEntity requestHttpEntity = new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_JSON),\n+            Query.newInstance().initParams(paramValues),\n+            body);\n+\n+        return execute(url, HttpMethod.PUT, requestHttpEntity, responseType);\n+    }\n+\n+    /**\n+     * http put from\n+     * Create a new resource by PUTting the given map {@code bodyValues} to http request,\n+     * http header contentType default 'application/x-www-form-urlencoded;charset=utf-8'.\n+     * <p>URL request params are expanded using the given query {@code Query}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query  http query param\n+     * @param bodyValues   http body param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> putFrom(String url, Header header, Query query, Map<String, String> bodyValues, Type responseType) throws Exception {\n+        RequestHttpEntity requestHttpEntity = new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_FORM_URLENCODED), query, bodyValues);\n+        return execute(url, HttpMethod.PUT, requestHttpEntity, responseType);\n+    }\n+\n+    /**\n+     * http put from\n+     * Create a new resource by PUTting the given map {@code bodyValues} to http request,\n+     * http header contentType default 'application/x-www-form-urlencoded;charset=utf-8'.\n+     * <p>URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param paramValues  http query param\n+     * @param bodyValues   http body param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> putFrom(String url, Header header, Map<String, String> paramValues, Map<String, String> bodyValues, Type responseType) throws Exception {\n+        RequestHttpEntity requestHttpEntity = new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_FORM_URLENCODED),\n+            Query.newInstance().initParams(paramValues),\n+            bodyValues);\n+\n+        return execute(url, HttpMethod.PUT, requestHttpEntity, responseType);\n+    }\n+\n+    /**\n+     * http post\n+     * Create a new resource by POSTing the given object to the http request.\n+     * <p>URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> post(String url, Header header, Query query, Object body, Type responseType) throws Exception {\n+        return execute(url, HttpMethod.POST, new RequestHttpEntity(header, query, body),\n+            responseType);\n+    }\n+\n+    /**\n+     * http post json\n+     * Create a new resource by POSTing the given object to the http request,\n+     * http header contentType default 'application/json;charset=UTF-8'.\n+     * <p>URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param paramValues  http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> postJson(String url, Header header, Map<String, String> paramValues, String body, Type responseType) throws Exception {\n+        RequestHttpEntity requestHttpEntity = new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_JSON),\n+            Query.newInstance().initParams(paramValues),\n+            body);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 247}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMTQ0MA==", "bodyText": "remove extra blank line", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437821440", "createdAt": "2020-06-10T02:15:19Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/http/client/NacosRestTemplate.java", "diffHunk": "@@ -0,0 +1,324 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.http.client;\n+\n+import com.alibaba.nacos.common.http.HttpRestResult;\n+import com.alibaba.nacos.common.http.HttpUtils;\n+import com.alibaba.nacos.common.http.handler.ResponseHandler;\n+import com.alibaba.nacos.common.http.param.Header;\n+import com.alibaba.nacos.common.http.param.MediaType;\n+import com.alibaba.nacos.common.http.param.Query;\n+import com.alibaba.nacos.common.model.RequestHttpEntity;\n+import com.alibaba.nacos.common.utils.HttpMethod;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Type;\n+import java.net.URI;\n+import java.util.Map;\n+\n+/**\n+ * NacosRestTemplate\n+ * Interface specifying a basic set of RESTful operations.\n+ *\n+ * @author mai.jh\n+ * @date 2020/5/24\n+ * @see HttpClientRequest\n+ * @see HttpClientResponse\n+ */\n+public class NacosRestTemplate {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(NacosRestTemplate.class);\n+\n+    private HttpClientRequest requestClient;\n+\n+    public NacosRestTemplate(HttpClientRequest requestClient) {\n+        this.requestClient = requestClient;\n+    }\n+\n+    /**\n+     * http get\n+     * URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> get(String url, Header header, Query query, Type responseType) throws Exception {\n+        return execute(url, HttpMethod.GET, new RequestHttpEntity(header, query), responseType);\n+    }\n+\n+    /**\n+     * http get\n+     * URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       headers\n+     * @param paramValues  paramValues\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> get(String url, Header header, Map<String, String> paramValues, Type responseType) throws Exception {\n+        RequestHttpEntity requestHttpEntity = new RequestHttpEntity(header, Query.newInstance().initParams(paramValues));\n+\n+        return execute(url, HttpMethod.GET, requestHttpEntity, responseType);\n+    }\n+\n+    /**\n+     * get request, may be pulling a lot of data\n+     * URL request params are expanded using the given query {@link Query},\n+     * More request parameters can be set via body.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param body         get with body\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> getLarge(String url, Header header, Query query, Object body, Type responseType) throws Exception {\n+        return execute(url, HttpMethod.GET_LARGE, new RequestHttpEntity(header, query, body), responseType);\n+    }\n+\n+    /**\n+     * http delete\n+     * URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> delete(String url, Header header, Query query, Type responseType) throws Exception {\n+        return execute(url, HttpMethod.DELETE, new RequestHttpEntity(header, query), responseType);\n+    }\n+\n+    /**\n+     * http put\n+     * Create a new resource by PUTting the given body to http request.\n+     * <p>URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> put(String url, Header header, Query query, Object body, Type responseType) throws Exception {\n+        return execute(url, HttpMethod.PUT, new RequestHttpEntity(header, query, body), responseType);\n+    }\n+\n+    /**\n+     * http put json\n+     * Create a new resource by PUTting the given body to http request,\n+     * http header contentType default 'application/json;charset=UTF-8'.\n+     * <p>URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param paramValues  http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> putJson(String url, Header header, Map<String, String> paramValues, String body, Type responseType) throws Exception {\n+        RequestHttpEntity requestHttpEntity = new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_JSON),\n+            Query.newInstance().initParams(paramValues),\n+            body);\n+\n+        return execute(url, HttpMethod.PUT, requestHttpEntity, responseType);\n+    }\n+\n+    /**\n+     * http put from\n+     * Create a new resource by PUTting the given map {@code bodyValues} to http request,\n+     * http header contentType default 'application/x-www-form-urlencoded;charset=utf-8'.\n+     * <p>URL request params are expanded using the given query {@code Query}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query  http query param\n+     * @param bodyValues   http body param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> putFrom(String url, Header header, Query query, Map<String, String> bodyValues, Type responseType) throws Exception {\n+        RequestHttpEntity requestHttpEntity = new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_FORM_URLENCODED), query, bodyValues);\n+        return execute(url, HttpMethod.PUT, requestHttpEntity, responseType);\n+    }\n+\n+    /**\n+     * http put from\n+     * Create a new resource by PUTting the given map {@code bodyValues} to http request,\n+     * http header contentType default 'application/x-www-form-urlencoded;charset=utf-8'.\n+     * <p>URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param paramValues  http query param\n+     * @param bodyValues   http body param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> putFrom(String url, Header header, Map<String, String> paramValues, Map<String, String> bodyValues, Type responseType) throws Exception {\n+        RequestHttpEntity requestHttpEntity = new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_FORM_URLENCODED),\n+            Query.newInstance().initParams(paramValues),\n+            bodyValues);\n+\n+        return execute(url, HttpMethod.PUT, requestHttpEntity, responseType);\n+    }\n+\n+    /**\n+     * http post\n+     * Create a new resource by POSTing the given object to the http request.\n+     * <p>URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> post(String url, Header header, Query query, Object body, Type responseType) throws Exception {\n+        return execute(url, HttpMethod.POST, new RequestHttpEntity(header, query, body),\n+            responseType);\n+    }\n+\n+    /**\n+     * http post json\n+     * Create a new resource by POSTing the given object to the http request,\n+     * http header contentType default 'application/json;charset=UTF-8'.\n+     * <p>URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param paramValues  http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> postJson(String url, Header header, Map<String, String> paramValues, String body, Type responseType) throws Exception {\n+        RequestHttpEntity requestHttpEntity = new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_JSON),\n+            Query.newInstance().initParams(paramValues),\n+            body);\n+\n+        return execute(url, HttpMethod.POST, requestHttpEntity, responseType);\n+    }\n+\n+    /**\n+     * http post from\n+     * Create a new resource by PUTting the given map {@code bodyValues} to http request,\n+     * http header contentType default 'application/x-www-form-urlencoded;charset=utf-8'.\n+     * <p>URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query  http query param\n+     * @param bodyValues   http body param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> postFrom(String url, Header header, Query query, Map<String, String> bodyValues, Type responseType) throws Exception {\n+        RequestHttpEntity requestHttpEntity = new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_FORM_URLENCODED), query, bodyValues);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 269}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMTQ2NQ==", "bodyText": "remove extra blank line", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437821465", "createdAt": "2020-06-10T02:15:24Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/http/client/NacosRestTemplate.java", "diffHunk": "@@ -0,0 +1,324 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.http.client;\n+\n+import com.alibaba.nacos.common.http.HttpRestResult;\n+import com.alibaba.nacos.common.http.HttpUtils;\n+import com.alibaba.nacos.common.http.handler.ResponseHandler;\n+import com.alibaba.nacos.common.http.param.Header;\n+import com.alibaba.nacos.common.http.param.MediaType;\n+import com.alibaba.nacos.common.http.param.Query;\n+import com.alibaba.nacos.common.model.RequestHttpEntity;\n+import com.alibaba.nacos.common.utils.HttpMethod;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Type;\n+import java.net.URI;\n+import java.util.Map;\n+\n+/**\n+ * NacosRestTemplate\n+ * Interface specifying a basic set of RESTful operations.\n+ *\n+ * @author mai.jh\n+ * @date 2020/5/24\n+ * @see HttpClientRequest\n+ * @see HttpClientResponse\n+ */\n+public class NacosRestTemplate {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(NacosRestTemplate.class);\n+\n+    private HttpClientRequest requestClient;\n+\n+    public NacosRestTemplate(HttpClientRequest requestClient) {\n+        this.requestClient = requestClient;\n+    }\n+\n+    /**\n+     * http get\n+     * URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> get(String url, Header header, Query query, Type responseType) throws Exception {\n+        return execute(url, HttpMethod.GET, new RequestHttpEntity(header, query), responseType);\n+    }\n+\n+    /**\n+     * http get\n+     * URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       headers\n+     * @param paramValues  paramValues\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> get(String url, Header header, Map<String, String> paramValues, Type responseType) throws Exception {\n+        RequestHttpEntity requestHttpEntity = new RequestHttpEntity(header, Query.newInstance().initParams(paramValues));\n+\n+        return execute(url, HttpMethod.GET, requestHttpEntity, responseType);\n+    }\n+\n+    /**\n+     * get request, may be pulling a lot of data\n+     * URL request params are expanded using the given query {@link Query},\n+     * More request parameters can be set via body.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param body         get with body\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> getLarge(String url, Header header, Query query, Object body, Type responseType) throws Exception {\n+        return execute(url, HttpMethod.GET_LARGE, new RequestHttpEntity(header, query, body), responseType);\n+    }\n+\n+    /**\n+     * http delete\n+     * URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> delete(String url, Header header, Query query, Type responseType) throws Exception {\n+        return execute(url, HttpMethod.DELETE, new RequestHttpEntity(header, query), responseType);\n+    }\n+\n+    /**\n+     * http put\n+     * Create a new resource by PUTting the given body to http request.\n+     * <p>URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> put(String url, Header header, Query query, Object body, Type responseType) throws Exception {\n+        return execute(url, HttpMethod.PUT, new RequestHttpEntity(header, query, body), responseType);\n+    }\n+\n+    /**\n+     * http put json\n+     * Create a new resource by PUTting the given body to http request,\n+     * http header contentType default 'application/json;charset=UTF-8'.\n+     * <p>URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param paramValues  http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> putJson(String url, Header header, Map<String, String> paramValues, String body, Type responseType) throws Exception {\n+        RequestHttpEntity requestHttpEntity = new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_JSON),\n+            Query.newInstance().initParams(paramValues),\n+            body);\n+\n+        return execute(url, HttpMethod.PUT, requestHttpEntity, responseType);\n+    }\n+\n+    /**\n+     * http put from\n+     * Create a new resource by PUTting the given map {@code bodyValues} to http request,\n+     * http header contentType default 'application/x-www-form-urlencoded;charset=utf-8'.\n+     * <p>URL request params are expanded using the given query {@code Query}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query  http query param\n+     * @param bodyValues   http body param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> putFrom(String url, Header header, Query query, Map<String, String> bodyValues, Type responseType) throws Exception {\n+        RequestHttpEntity requestHttpEntity = new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_FORM_URLENCODED), query, bodyValues);\n+        return execute(url, HttpMethod.PUT, requestHttpEntity, responseType);\n+    }\n+\n+    /**\n+     * http put from\n+     * Create a new resource by PUTting the given map {@code bodyValues} to http request,\n+     * http header contentType default 'application/x-www-form-urlencoded;charset=utf-8'.\n+     * <p>URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param paramValues  http query param\n+     * @param bodyValues   http body param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> putFrom(String url, Header header, Map<String, String> paramValues, Map<String, String> bodyValues, Type responseType) throws Exception {\n+        RequestHttpEntity requestHttpEntity = new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_FORM_URLENCODED),\n+            Query.newInstance().initParams(paramValues),\n+            bodyValues);\n+\n+        return execute(url, HttpMethod.PUT, requestHttpEntity, responseType);\n+    }\n+\n+    /**\n+     * http post\n+     * Create a new resource by POSTing the given object to the http request.\n+     * <p>URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> post(String url, Header header, Query query, Object body, Type responseType) throws Exception {\n+        return execute(url, HttpMethod.POST, new RequestHttpEntity(header, query, body),\n+            responseType);\n+    }\n+\n+    /**\n+     * http post json\n+     * Create a new resource by POSTing the given object to the http request,\n+     * http header contentType default 'application/json;charset=UTF-8'.\n+     * <p>URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param paramValues  http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> postJson(String url, Header header, Map<String, String> paramValues, String body, Type responseType) throws Exception {\n+        RequestHttpEntity requestHttpEntity = new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_JSON),\n+            Query.newInstance().initParams(paramValues),\n+            body);\n+\n+        return execute(url, HttpMethod.POST, requestHttpEntity, responseType);\n+    }\n+\n+    /**\n+     * http post from\n+     * Create a new resource by PUTting the given map {@code bodyValues} to http request,\n+     * http header contentType default 'application/x-www-form-urlencoded;charset=utf-8'.\n+     * <p>URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query  http query param\n+     * @param bodyValues   http body param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> postFrom(String url, Header header, Query query, Map<String, String> bodyValues, Type responseType) throws Exception {\n+        RequestHttpEntity requestHttpEntity = new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_FORM_URLENCODED), query, bodyValues);\n+\n+        return execute(url, HttpMethod.POST, requestHttpEntity, responseType);\n+    }\n+\n+    /**\n+     * http post from\n+     * Create a new resource by PUTting the given map {@code bodyValues} to http request,\n+     * http header contentType default 'application/x-www-form-urlencoded;charset=utf-8'.\n+     * <p>URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param paramValues  http query param\n+     * @param bodyValues   http body param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> postFrom(String url, Header header, Map<String, String> paramValues, Map<String, String> bodyValues, Type responseType) throws Exception {\n+        RequestHttpEntity requestHttpEntity = new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_FORM_URLENCODED),\n+            Query.newInstance().initParams(paramValues),\n+            bodyValues);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 293}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMTUzNg==", "bodyText": "remove extra blank line", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437821536", "createdAt": "2020-06-10T02:15:39Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/http/client/NacosRestTemplate.java", "diffHunk": "@@ -0,0 +1,324 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.http.client;\n+\n+import com.alibaba.nacos.common.http.HttpRestResult;\n+import com.alibaba.nacos.common.http.HttpUtils;\n+import com.alibaba.nacos.common.http.handler.ResponseHandler;\n+import com.alibaba.nacos.common.http.param.Header;\n+import com.alibaba.nacos.common.http.param.MediaType;\n+import com.alibaba.nacos.common.http.param.Query;\n+import com.alibaba.nacos.common.model.RequestHttpEntity;\n+import com.alibaba.nacos.common.utils.HttpMethod;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.lang.reflect.Type;\n+import java.net.URI;\n+import java.util.Map;\n+\n+/**\n+ * NacosRestTemplate\n+ * Interface specifying a basic set of RESTful operations.\n+ *\n+ * @author mai.jh\n+ * @date 2020/5/24\n+ * @see HttpClientRequest\n+ * @see HttpClientResponse\n+ */\n+public class NacosRestTemplate {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(NacosRestTemplate.class);\n+\n+    private HttpClientRequest requestClient;\n+\n+    public NacosRestTemplate(HttpClientRequest requestClient) {\n+        this.requestClient = requestClient;\n+    }\n+\n+    /**\n+     * http get\n+     * URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> get(String url, Header header, Query query, Type responseType) throws Exception {\n+        return execute(url, HttpMethod.GET, new RequestHttpEntity(header, query), responseType);\n+    }\n+\n+    /**\n+     * http get\n+     * URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       headers\n+     * @param paramValues  paramValues\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> get(String url, Header header, Map<String, String> paramValues, Type responseType) throws Exception {\n+        RequestHttpEntity requestHttpEntity = new RequestHttpEntity(header, Query.newInstance().initParams(paramValues));\n+\n+        return execute(url, HttpMethod.GET, requestHttpEntity, responseType);\n+    }\n+\n+    /**\n+     * get request, may be pulling a lot of data\n+     * URL request params are expanded using the given query {@link Query},\n+     * More request parameters can be set via body.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param body         get with body\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> getLarge(String url, Header header, Query query, Object body, Type responseType) throws Exception {\n+        return execute(url, HttpMethod.GET_LARGE, new RequestHttpEntity(header, query, body), responseType);\n+    }\n+\n+    /**\n+     * http delete\n+     * URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> delete(String url, Header header, Query query, Type responseType) throws Exception {\n+        return execute(url, HttpMethod.DELETE, new RequestHttpEntity(header, query), responseType);\n+    }\n+\n+    /**\n+     * http put\n+     * Create a new resource by PUTting the given body to http request.\n+     * <p>URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> put(String url, Header header, Query query, Object body, Type responseType) throws Exception {\n+        return execute(url, HttpMethod.PUT, new RequestHttpEntity(header, query, body), responseType);\n+    }\n+\n+    /**\n+     * http put json\n+     * Create a new resource by PUTting the given body to http request,\n+     * http header contentType default 'application/json;charset=UTF-8'.\n+     * <p>URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param paramValues  http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> putJson(String url, Header header, Map<String, String> paramValues, String body, Type responseType) throws Exception {\n+        RequestHttpEntity requestHttpEntity = new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_JSON),\n+            Query.newInstance().initParams(paramValues),\n+            body);\n+\n+        return execute(url, HttpMethod.PUT, requestHttpEntity, responseType);\n+    }\n+\n+    /**\n+     * http put from\n+     * Create a new resource by PUTting the given map {@code bodyValues} to http request,\n+     * http header contentType default 'application/x-www-form-urlencoded;charset=utf-8'.\n+     * <p>URL request params are expanded using the given query {@code Query}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query  http query param\n+     * @param bodyValues   http body param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> putFrom(String url, Header header, Query query, Map<String, String> bodyValues, Type responseType) throws Exception {\n+        RequestHttpEntity requestHttpEntity = new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_FORM_URLENCODED), query, bodyValues);\n+        return execute(url, HttpMethod.PUT, requestHttpEntity, responseType);\n+    }\n+\n+    /**\n+     * http put from\n+     * Create a new resource by PUTting the given map {@code bodyValues} to http request,\n+     * http header contentType default 'application/x-www-form-urlencoded;charset=utf-8'.\n+     * <p>URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param paramValues  http query param\n+     * @param bodyValues   http body param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> putFrom(String url, Header header, Map<String, String> paramValues, Map<String, String> bodyValues, Type responseType) throws Exception {\n+        RequestHttpEntity requestHttpEntity = new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_FORM_URLENCODED),\n+            Query.newInstance().initParams(paramValues),\n+            bodyValues);\n+\n+        return execute(url, HttpMethod.PUT, requestHttpEntity, responseType);\n+    }\n+\n+    /**\n+     * http post\n+     * Create a new resource by POSTing the given object to the http request.\n+     * <p>URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query        http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> post(String url, Header header, Query query, Object body, Type responseType) throws Exception {\n+        return execute(url, HttpMethod.POST, new RequestHttpEntity(header, query, body),\n+            responseType);\n+    }\n+\n+    /**\n+     * http post json\n+     * Create a new resource by POSTing the given object to the http request,\n+     * http header contentType default 'application/json;charset=UTF-8'.\n+     * <p>URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param paramValues  http query param\n+     * @param body         http body param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> postJson(String url, Header header, Map<String, String> paramValues, String body, Type responseType) throws Exception {\n+        RequestHttpEntity requestHttpEntity = new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_JSON),\n+            Query.newInstance().initParams(paramValues),\n+            body);\n+\n+        return execute(url, HttpMethod.POST, requestHttpEntity, responseType);\n+    }\n+\n+    /**\n+     * http post from\n+     * Create a new resource by PUTting the given map {@code bodyValues} to http request,\n+     * http header contentType default 'application/x-www-form-urlencoded;charset=utf-8'.\n+     * <p>URL request params are expanded using the given query {@link Query}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param query  http query param\n+     * @param bodyValues   http body param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> postFrom(String url, Header header, Query query, Map<String, String> bodyValues, Type responseType) throws Exception {\n+        RequestHttpEntity requestHttpEntity = new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_FORM_URLENCODED), query, bodyValues);\n+\n+        return execute(url, HttpMethod.POST, requestHttpEntity, responseType);\n+    }\n+\n+    /**\n+     * http post from\n+     * Create a new resource by PUTting the given map {@code bodyValues} to http request,\n+     * http header contentType default 'application/x-www-form-urlencoded;charset=utf-8'.\n+     * <p>URL request params are expanded using the given map {@code paramValues}.\n+     * <p>{@code responseType} can be an HttpRestResult or HttpRestResult data {@code T} type.\n+     *\n+     * @param url          url\n+     * @param header       http header param\n+     * @param paramValues  http query param\n+     * @param bodyValues   http body param\n+     * @param responseType return type\n+     * @return {@link HttpRestResult}\n+     * @throws Exception ex\n+     */\n+    public <T> HttpRestResult<T> postFrom(String url, Header header, Map<String, String> paramValues, Map<String, String> bodyValues, Type responseType) throws Exception {\n+        RequestHttpEntity requestHttpEntity = new RequestHttpEntity(\n+            header.setContentType(MediaType.APPLICATION_FORM_URLENCODED),\n+            Query.newInstance().initParams(paramValues),\n+            bodyValues);\n+\n+        return execute(url, HttpMethod.POST, requestHttpEntity, responseType);\n+    }\n+\n+\n+    private <T> HttpRestResult<T> execute(String url, String httpMethod, RequestHttpEntity requestEntity,\n+                          Type responseType) throws Exception {\n+        URI uri = HttpUtils.buildUri(url, requestEntity.getQuery());\n+        if (logger.isDebugEnabled()) {\n+            logger.debug(\"HTTP \" + httpMethod + \" \" + url);\n+        }\n+        HttpClientResponse response = null;\n+        try {\n+            response = requestClient.execute(uri, httpMethod, requestEntity);\n+            return ResponseHandler.responseEntityExtractor(response, responseType);\n+        } finally {\n+            if (response != null) {\n+                response.close();\n+            }\n+        }\n+    }\n+\n+    /**\n+     * close request client\n+     */\n+    public void close() throws Exception{\n+        requestClient.close();\n+    }\n+\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 323}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMTYwNg==", "bodyText": "remove extra blank line", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437821606", "createdAt": "2020-06-10T02:15:57Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/http/handler/ResponseHandler.java", "diffHunk": "@@ -37,4 +48,42 @@\n         return JacksonUtils.toObj(s, type);\n     }\n \n+    public static <T> T convert(InputStream inputStream, Type type) throws Exception {\n+        return JacksonUtils.toObj(inputStream, type);\n+    }\n+\n+    @SuppressWarnings({\"unchecked\", \"rawtypes\", \"resource\"})\n+    public static <T> HttpRestResult<T> responseEntityExtractor(HttpClientResponse response, Type type) throws Exception {\n+        Header headers = response.getHeaders();\n+        String contentType = headers.getValue(HttpHeaderConsts.CONTENT_TYPE);\n+        InputStream body = response.getBody();\n+        T extractBody = null;\n+        if (MediaType.APPLICATION_JSON.equals(contentType) && HttpStatus.SC_OK == response.getStatusCode()) {\n+            extractBody = convert(body, type);\n+        }\n+        if (extractBody == null) {\n+            if (!String.class.toString().equals(type.toString())) {\n+                logger.error(\"if the response contentType is not [application/json],\" +\n+                    \" only support to java.lang.String\");\n+                throw new NacosDeserializationException(type);\n+            }\n+            extractBody = (T)IoUtils.toString(body, headers.getCharset());\n+        }\n+        if (extractBody instanceof RestResult) {\n+            HttpRestResult<T> httpRestResult = convert((RestResult<T>) extractBody);\n+            httpRestResult.setHeader(headers);\n+            return httpRestResult;\n+        }\n+        return new HttpRestResult<T>(response.getHeaders(), response.getStatusCode(), extractBody);\n+    }\n+\n+    private static <T> HttpRestResult<T> convert(RestResult<T> restResult) {\n+        HttpRestResult<T> httpRestResult = new HttpRestResult<T>();\n+        httpRestResult.setCode(restResult.getCode());\n+        httpRestResult.setData(restResult.getData());\n+        httpRestResult.setMessage(restResult.getMessage());\n+        return httpRestResult;\n+    }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMTY1Ng==", "bodyText": "remove extra blank lines", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437821656", "createdAt": "2020-06-10T02:16:10Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/http/param/Header.java", "diffHunk": "@@ -91,9 +103,38 @@ public void addAll(Map<String, String> params) {\n         }\n     }\n \n+    public String getCharset() {\n+        String value = getValue(HttpHeaderConsts.CONTENT_TYPE);\n+        return (StringUtils.isNotBlank(value) ? analysisCharset(value) : Constants.ENCODE);\n+    }\n+\n+    private String analysisCharset(String contentType) {\n+        String[] values = contentType.split(\";\");\n+        String charset = Constants.ENCODE;\n+        if (values.length == 0) {\n+            return charset;\n+        }\n+        for (String value : values) {\n+            if (value.startsWith(\"charset=\")) {\n+                charset = value.substring(\"charset=\".length());\n+            }\n+        }\n+        return charset;\n+    }\n+\n+\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMTY3Ng==", "bodyText": "remove extra blank line", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437821676", "createdAt": "2020-06-10T02:16:17Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/http/param/Header.java", "diffHunk": "@@ -91,9 +103,38 @@ public void addAll(Map<String, String> params) {\n         }\n     }\n \n+    public String getCharset() {\n+        String value = getValue(HttpHeaderConsts.CONTENT_TYPE);\n+        return (StringUtils.isNotBlank(value) ? analysisCharset(value) : Constants.ENCODE);\n+    }\n+\n+    private String analysisCharset(String contentType) {\n+        String[] values = contentType.split(\";\");\n+        String charset = Constants.ENCODE;\n+        if (values.length == 0) {\n+            return charset;\n+        }\n+        for (String value : values) {\n+            if (value.startsWith(\"charset=\")) {\n+                charset = value.substring(\"charset=\".length());\n+            }\n+        }\n+        return charset;\n+    }\n+\n+\n+\n+\n     public void clear() {\n         header.clear();\n     }\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMTgyOA==", "bodyText": "remove extra blank line", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437821828", "createdAt": "2020-06-10T02:16:54Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/IoUtils.java", "diffHunk": "@@ -167,6 +167,20 @@ public static void cleanDirectory(File directory) throws IOException {\n         }\n     }\n \n+    public static void copy(byte[] in, OutputStream out) throws IOException {\n+\n+        try {\n+            out.write(in);\n+        } finally {\n+            try {\n+                out.close();\n+            } catch (IOException io) {\n+            }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMTgzNw==", "bodyText": "remove extra blank line", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437821837", "createdAt": "2020-06-10T02:16:58Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/IoUtils.java", "diffHunk": "@@ -167,6 +167,20 @@ public static void cleanDirectory(File directory) throws IOException {\n         }\n     }\n \n+    public static void copy(byte[] in, OutputStream out) throws IOException {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMTg2Nw==", "bodyText": "remove extra blank line", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437821867", "createdAt": "2020-06-10T02:17:04Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/IoUtils.java", "diffHunk": "@@ -167,6 +167,20 @@ public static void cleanDirectory(File directory) throws IOException {\n         }\n     }\n \n+    public static void copy(byte[] in, OutputStream out) throws IOException {\n+\n+        try {\n+            out.write(in);\n+        } finally {\n+            try {\n+                out.close();\n+            } catch (IOException io) {\n+            }\n+\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMjQyNQ==", "bodyText": "remove extra blank line", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437822425", "createdAt": "2020-06-10T02:19:12Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/JacksonUtils.java", "diffHunk": "@@ -71,22 +72,26 @@ public static String toJson(Object obj) {\n \t}\n \n \tpublic static <T> T toObj(byte[] json, Type cls) {\n-\t\ttry {\n-\t\t\treturn toObj(StringUtils.newString4UTF8(json), cls);\n-\t\t}\n-\t\tcatch (Exception e) {\n-\t\t\tthrow new NacosDeserializationException(e);\n-\t\t}\n-\t}\n+        try {\n+            return toObj(StringUtils.newString4UTF8(json), cls);\n+        } catch (Exception e) {\n+            throw new NacosDeserializationException(e);\n+        }\n+  }\n \n-\tpublic static <T> T toObj(byte[] json, TypeReference<T> typeReference) {\n-\t\ttry {\n-\t\t\treturn toObj(StringUtils.newString4UTF8(json), typeReference);\n-\t\t}\n-\t\tcatch (Exception e) {\n-\t\t\tthrow new NacosDeserializationException(e);\n-\t\t}\n-\t}\n+\n+\tpublic static <T> T toObj(InputStream inputStream, Class<T> tClass) throws Exception {\n+\t    return mapper.readValue(inputStream, tClass);\n+    }\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMjQ2MQ==", "bodyText": "remove extra blank line", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437822461", "createdAt": "2020-06-10T02:19:20Z", "author": {"login": "KomachiSion"}, "path": "common/src/test/java/com/alibaba/nacos/common/http/HttpUtilsTest.java", "diffHunk": "@@ -1,12 +1,29 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n package com.alibaba.nacos.common.http;\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMjUxMA==", "bodyText": "remove extra blank line", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437822510", "createdAt": "2020-06-10T02:19:36Z", "author": {"login": "KomachiSion"}, "path": "test/src/test/java/com/alibaba/nacos/test/common/NacosAsyncRestTemplate_ITCase.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.nacos.test.common;\n+\n+import com.alibaba.nacos.Nacos;\n+import com.alibaba.nacos.api.exception.NacosException;\n+import com.alibaba.nacos.common.http.Callback;\n+import com.alibaba.nacos.common.http.HttpClientManager;\n+import com.alibaba.nacos.common.http.HttpRestResult;\n+import com.alibaba.nacos.common.http.client.NacosAsyncRestTemplate;\n+import com.alibaba.nacos.common.http.param.Header;\n+import com.alibaba.nacos.common.http.param.Query;\n+import com.alibaba.nacos.common.model.RestResult;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.MethodSorters;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * NacosAsyncRestTemplate_ITCase\n+ *\n+ * @author mai.jh\n+ * @date 2020/5/29\n+ */\n+@SuppressWarnings(\"all\")\n+@FixMethodOrder(MethodSorters.JVM)\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(classes = Nacos.class, properties = {\"server.servlet.context-path=/nacos\"},\n+    webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+public class NacosAsyncRestTemplate_ITCase {\n+\n+    @LocalServerPort\n+    private int port;\n+\n+    private NacosAsyncRestTemplate nacosRestTemplate = HttpClientManager.getNacosAsyncRestTemplate();\n+\n+    private final String CONFIG_INSTANCE_PATH = \"/nacos/v1/ns\";\n+    private String IP = null;\n+\n+    @Before\n+    public void init() throws NacosException {\n+        IP = String.format(\"http://localhost:%d\", port);\n+    }\n+\n+    private class CallbackMap<T> implements Callback<T> {\n+\n+        private HttpRestResult<T> restResult;\n+        private Throwable throwable;\n+\n+        @Override\n+        public void onReceive(RestResult<T> result) {\n+            restResult = (HttpRestResult<T>) result;\n+        }\n+\n+        @Override\n+        public void onError(Throwable throwable) {\n+            throwable = throwable;\n+        }\n+\n+        public HttpRestResult<T> getRestResult() {\n+            return restResult;\n+        }\n+\n+        public Throwable getThrowable() {\n+            return throwable;\n+        }\n+    }\n+\n+    @Test\n+    public void test_url_post_from() throws Exception{\n+        String url = IP + CONFIG_INSTANCE_PATH + \"/instance\";\n+        Map<String, String> param = new HashMap<>();\n+        param.put(\"serviceName\", \"app-test\");\n+        param.put(\"port\", \"8080\");\n+        param.put(\"ip\", \"11.11.11.11\");\n+        CallbackMap<String> callbackMap = new CallbackMap<>();\n+        nacosRestTemplate.postFrom(url, Header.newInstance(), Query.newInstance(), param, String.class, callbackMap);\n+        Thread.sleep(2000);\n+        HttpRestResult<String> restResult = callbackMap.getRestResult();\n+        System.out.println(restResult.getData());\n+        System.out.println(restResult.getHeader());\n+        Assert.assertTrue(restResult.ok());\n+    }\n+\n+    @Test\n+    public void test_url_put_from() throws Exception{\n+        String url = IP + CONFIG_INSTANCE_PATH + \"/instance\";\n+        Map<String, String> param = new HashMap<>();\n+        param.put(\"serviceName\", \"app-test-change\");\n+        param.put(\"port\", \"8080\");\n+        param.put(\"ip\", \"11.11.11.11\");\n+        CallbackMap<String> callbackMap = new CallbackMap<>();\n+        nacosRestTemplate.putFrom(url, Header.newInstance(), Query.newInstance(), param, String.class, callbackMap);\n+        Thread.sleep(2000);\n+        HttpRestResult<String> restResult = callbackMap.getRestResult();\n+        System.out.println(restResult.getData());\n+        System.out.println(restResult.getHeader());\n+        Assert.assertTrue(restResult.ok());\n+    }\n+\n+\n+    @Test\n+    public void test_url_get() throws Exception {\n+        String url = IP + CONFIG_INSTANCE_PATH + \"/instance/list\";\n+        Query query = Query.newInstance().addParam(\"serviceName\", \"app-test\");\n+        CallbackMap<Map> callbackMap = new CallbackMap<>();\n+        nacosRestTemplate.get(url, Header.newInstance(), query, Map.class, callbackMap);\n+        Thread.sleep(2000);\n+        HttpRestResult<Map> restResult = callbackMap.getRestResult();\n+        System.out.println(restResult.getData());\n+        System.out.println(restResult.getHeader());\n+        Assert.assertTrue(restResult.ok());\n+        Assert.assertEquals(restResult.getData().get(\"dom\"), \"app-test\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMjUyNQ==", "bodyText": "remove extra blank line", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437822525", "createdAt": "2020-06-10T02:19:41Z", "author": {"login": "KomachiSion"}, "path": "test/src/test/java/com/alibaba/nacos/test/common/NacosAsyncRestTemplate_ITCase.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.nacos.test.common;\n+\n+import com.alibaba.nacos.Nacos;\n+import com.alibaba.nacos.api.exception.NacosException;\n+import com.alibaba.nacos.common.http.Callback;\n+import com.alibaba.nacos.common.http.HttpClientManager;\n+import com.alibaba.nacos.common.http.HttpRestResult;\n+import com.alibaba.nacos.common.http.client.NacosAsyncRestTemplate;\n+import com.alibaba.nacos.common.http.param.Header;\n+import com.alibaba.nacos.common.http.param.Query;\n+import com.alibaba.nacos.common.model.RestResult;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.MethodSorters;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * NacosAsyncRestTemplate_ITCase\n+ *\n+ * @author mai.jh\n+ * @date 2020/5/29\n+ */\n+@SuppressWarnings(\"all\")\n+@FixMethodOrder(MethodSorters.JVM)\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(classes = Nacos.class, properties = {\"server.servlet.context-path=/nacos\"},\n+    webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+public class NacosAsyncRestTemplate_ITCase {\n+\n+    @LocalServerPort\n+    private int port;\n+\n+    private NacosAsyncRestTemplate nacosRestTemplate = HttpClientManager.getNacosAsyncRestTemplate();\n+\n+    private final String CONFIG_INSTANCE_PATH = \"/nacos/v1/ns\";\n+    private String IP = null;\n+\n+    @Before\n+    public void init() throws NacosException {\n+        IP = String.format(\"http://localhost:%d\", port);\n+    }\n+\n+    private class CallbackMap<T> implements Callback<T> {\n+\n+        private HttpRestResult<T> restResult;\n+        private Throwable throwable;\n+\n+        @Override\n+        public void onReceive(RestResult<T> result) {\n+            restResult = (HttpRestResult<T>) result;\n+        }\n+\n+        @Override\n+        public void onError(Throwable throwable) {\n+            throwable = throwable;\n+        }\n+\n+        public HttpRestResult<T> getRestResult() {\n+            return restResult;\n+        }\n+\n+        public Throwable getThrowable() {\n+            return throwable;\n+        }\n+    }\n+\n+    @Test\n+    public void test_url_post_from() throws Exception{\n+        String url = IP + CONFIG_INSTANCE_PATH + \"/instance\";\n+        Map<String, String> param = new HashMap<>();\n+        param.put(\"serviceName\", \"app-test\");\n+        param.put(\"port\", \"8080\");\n+        param.put(\"ip\", \"11.11.11.11\");\n+        CallbackMap<String> callbackMap = new CallbackMap<>();\n+        nacosRestTemplate.postFrom(url, Header.newInstance(), Query.newInstance(), param, String.class, callbackMap);\n+        Thread.sleep(2000);\n+        HttpRestResult<String> restResult = callbackMap.getRestResult();\n+        System.out.println(restResult.getData());\n+        System.out.println(restResult.getHeader());\n+        Assert.assertTrue(restResult.ok());\n+    }\n+\n+    @Test\n+    public void test_url_put_from() throws Exception{\n+        String url = IP + CONFIG_INSTANCE_PATH + \"/instance\";\n+        Map<String, String> param = new HashMap<>();\n+        param.put(\"serviceName\", \"app-test-change\");\n+        param.put(\"port\", \"8080\");\n+        param.put(\"ip\", \"11.11.11.11\");\n+        CallbackMap<String> callbackMap = new CallbackMap<>();\n+        nacosRestTemplate.putFrom(url, Header.newInstance(), Query.newInstance(), param, String.class, callbackMap);\n+        Thread.sleep(2000);\n+        HttpRestResult<String> restResult = callbackMap.getRestResult();\n+        System.out.println(restResult.getData());\n+        System.out.println(restResult.getHeader());\n+        Assert.assertTrue(restResult.ok());\n+    }\n+\n+\n+    @Test\n+    public void test_url_get() throws Exception {\n+        String url = IP + CONFIG_INSTANCE_PATH + \"/instance/list\";\n+        Query query = Query.newInstance().addParam(\"serviceName\", \"app-test\");\n+        CallbackMap<Map> callbackMap = new CallbackMap<>();\n+        nacosRestTemplate.get(url, Header.newInstance(), query, Map.class, callbackMap);\n+        Thread.sleep(2000);\n+        HttpRestResult<Map> restResult = callbackMap.getRestResult();\n+        System.out.println(restResult.getData());\n+        System.out.println(restResult.getHeader());\n+        Assert.assertTrue(restResult.ok());\n+        Assert.assertEquals(restResult.getData().get(\"dom\"), \"app-test\");\n+\n+    }\n+\n+    @Test\n+    public void test_url_by_map() throws Exception{\n+        String url = IP + CONFIG_INSTANCE_PATH + \"/instance/list\";\n+        Map<String, String> param = new HashMap<>();\n+        param.put(\"serviceName\", \"app-test\");\n+        CallbackMap<Map> callbackMap = new CallbackMap<>();\n+        nacosRestTemplate.get(url, Header.newInstance(), param, Map.class, callbackMap);\n+        Thread.sleep(2000);\n+        HttpRestResult<Map> restResult = callbackMap.getRestResult();\n+        System.out.println(restResult.getData());\n+        System.out.println(restResult.getHeader());\n+        Assert.assertTrue(restResult.ok());\n+        Assert.assertEquals(restResult.getData().get(\"dom\"), \"app-test\");\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMjU0MA==", "bodyText": "remove extra blank line", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437822540", "createdAt": "2020-06-10T02:19:45Z", "author": {"login": "KomachiSion"}, "path": "test/src/test/java/com/alibaba/nacos/test/common/NacosAsyncRestTemplate_ITCase.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.nacos.test.common;\n+\n+import com.alibaba.nacos.Nacos;\n+import com.alibaba.nacos.api.exception.NacosException;\n+import com.alibaba.nacos.common.http.Callback;\n+import com.alibaba.nacos.common.http.HttpClientManager;\n+import com.alibaba.nacos.common.http.HttpRestResult;\n+import com.alibaba.nacos.common.http.client.NacosAsyncRestTemplate;\n+import com.alibaba.nacos.common.http.param.Header;\n+import com.alibaba.nacos.common.http.param.Query;\n+import com.alibaba.nacos.common.model.RestResult;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.MethodSorters;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * NacosAsyncRestTemplate_ITCase\n+ *\n+ * @author mai.jh\n+ * @date 2020/5/29\n+ */\n+@SuppressWarnings(\"all\")\n+@FixMethodOrder(MethodSorters.JVM)\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(classes = Nacos.class, properties = {\"server.servlet.context-path=/nacos\"},\n+    webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+public class NacosAsyncRestTemplate_ITCase {\n+\n+    @LocalServerPort\n+    private int port;\n+\n+    private NacosAsyncRestTemplate nacosRestTemplate = HttpClientManager.getNacosAsyncRestTemplate();\n+\n+    private final String CONFIG_INSTANCE_PATH = \"/nacos/v1/ns\";\n+    private String IP = null;\n+\n+    @Before\n+    public void init() throws NacosException {\n+        IP = String.format(\"http://localhost:%d\", port);\n+    }\n+\n+    private class CallbackMap<T> implements Callback<T> {\n+\n+        private HttpRestResult<T> restResult;\n+        private Throwable throwable;\n+\n+        @Override\n+        public void onReceive(RestResult<T> result) {\n+            restResult = (HttpRestResult<T>) result;\n+        }\n+\n+        @Override\n+        public void onError(Throwable throwable) {\n+            throwable = throwable;\n+        }\n+\n+        public HttpRestResult<T> getRestResult() {\n+            return restResult;\n+        }\n+\n+        public Throwable getThrowable() {\n+            return throwable;\n+        }\n+    }\n+\n+    @Test\n+    public void test_url_post_from() throws Exception{\n+        String url = IP + CONFIG_INSTANCE_PATH + \"/instance\";\n+        Map<String, String> param = new HashMap<>();\n+        param.put(\"serviceName\", \"app-test\");\n+        param.put(\"port\", \"8080\");\n+        param.put(\"ip\", \"11.11.11.11\");\n+        CallbackMap<String> callbackMap = new CallbackMap<>();\n+        nacosRestTemplate.postFrom(url, Header.newInstance(), Query.newInstance(), param, String.class, callbackMap);\n+        Thread.sleep(2000);\n+        HttpRestResult<String> restResult = callbackMap.getRestResult();\n+        System.out.println(restResult.getData());\n+        System.out.println(restResult.getHeader());\n+        Assert.assertTrue(restResult.ok());\n+    }\n+\n+    @Test\n+    public void test_url_put_from() throws Exception{\n+        String url = IP + CONFIG_INSTANCE_PATH + \"/instance\";\n+        Map<String, String> param = new HashMap<>();\n+        param.put(\"serviceName\", \"app-test-change\");\n+        param.put(\"port\", \"8080\");\n+        param.put(\"ip\", \"11.11.11.11\");\n+        CallbackMap<String> callbackMap = new CallbackMap<>();\n+        nacosRestTemplate.putFrom(url, Header.newInstance(), Query.newInstance(), param, String.class, callbackMap);\n+        Thread.sleep(2000);\n+        HttpRestResult<String> restResult = callbackMap.getRestResult();\n+        System.out.println(restResult.getData());\n+        System.out.println(restResult.getHeader());\n+        Assert.assertTrue(restResult.ok());\n+    }\n+\n+\n+    @Test\n+    public void test_url_get() throws Exception {\n+        String url = IP + CONFIG_INSTANCE_PATH + \"/instance/list\";\n+        Query query = Query.newInstance().addParam(\"serviceName\", \"app-test\");\n+        CallbackMap<Map> callbackMap = new CallbackMap<>();\n+        nacosRestTemplate.get(url, Header.newInstance(), query, Map.class, callbackMap);\n+        Thread.sleep(2000);\n+        HttpRestResult<Map> restResult = callbackMap.getRestResult();\n+        System.out.println(restResult.getData());\n+        System.out.println(restResult.getHeader());\n+        Assert.assertTrue(restResult.ok());\n+        Assert.assertEquals(restResult.getData().get(\"dom\"), \"app-test\");\n+\n+    }\n+\n+    @Test\n+    public void test_url_by_map() throws Exception{\n+        String url = IP + CONFIG_INSTANCE_PATH + \"/instance/list\";\n+        Map<String, String> param = new HashMap<>();\n+        param.put(\"serviceName\", \"app-test\");\n+        CallbackMap<Map> callbackMap = new CallbackMap<>();\n+        nacosRestTemplate.get(url, Header.newInstance(), param, Map.class, callbackMap);\n+        Thread.sleep(2000);\n+        HttpRestResult<Map> restResult = callbackMap.getRestResult();\n+        System.out.println(restResult.getData());\n+        System.out.println(restResult.getHeader());\n+        Assert.assertTrue(restResult.ok());\n+        Assert.assertEquals(restResult.getData().get(\"dom\"), \"app-test\");\n+\n+    }\n+\n+    @Test\n+    public void test_url_delete() throws Exception{\n+        String url = IP + CONFIG_INSTANCE_PATH + \"/instance\";\n+        Query query = Query.newInstance()\n+            .addParam(\"ip\", \"11.11.11.11\")\n+            .addParam(\"port\", \"8080\")\n+            .addParam(\"serviceName\", \"app-test\");\n+        CallbackMap<String> callbackMap = new CallbackMap<>();\n+        nacosRestTemplate.delete(url, Header.newInstance(), query,  String.class, callbackMap);\n+        Thread.sleep(2000);\n+        HttpRestResult<String> restResult = callbackMap.getRestResult();\n+        System.out.println(restResult.getData());\n+        System.out.println(restResult.getHeader());\n+        Assert.assertTrue(restResult.ok());\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMjU2Ng==", "bodyText": "remove extra blank lines.", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437822566", "createdAt": "2020-06-10T02:19:50Z", "author": {"login": "KomachiSion"}, "path": "test/src/test/java/com/alibaba/nacos/test/common/NacosAsyncRestTemplate_ITCase.java", "diffHunk": "@@ -0,0 +1,174 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.nacos.test.common;\n+\n+import com.alibaba.nacos.Nacos;\n+import com.alibaba.nacos.api.exception.NacosException;\n+import com.alibaba.nacos.common.http.Callback;\n+import com.alibaba.nacos.common.http.HttpClientManager;\n+import com.alibaba.nacos.common.http.HttpRestResult;\n+import com.alibaba.nacos.common.http.client.NacosAsyncRestTemplate;\n+import com.alibaba.nacos.common.http.param.Header;\n+import com.alibaba.nacos.common.http.param.Query;\n+import com.alibaba.nacos.common.model.RestResult;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.MethodSorters;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ * NacosAsyncRestTemplate_ITCase\n+ *\n+ * @author mai.jh\n+ * @date 2020/5/29\n+ */\n+@SuppressWarnings(\"all\")\n+@FixMethodOrder(MethodSorters.JVM)\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(classes = Nacos.class, properties = {\"server.servlet.context-path=/nacos\"},\n+    webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+public class NacosAsyncRestTemplate_ITCase {\n+\n+    @LocalServerPort\n+    private int port;\n+\n+    private NacosAsyncRestTemplate nacosRestTemplate = HttpClientManager.getNacosAsyncRestTemplate();\n+\n+    private final String CONFIG_INSTANCE_PATH = \"/nacos/v1/ns\";\n+    private String IP = null;\n+\n+    @Before\n+    public void init() throws NacosException {\n+        IP = String.format(\"http://localhost:%d\", port);\n+    }\n+\n+    private class CallbackMap<T> implements Callback<T> {\n+\n+        private HttpRestResult<T> restResult;\n+        private Throwable throwable;\n+\n+        @Override\n+        public void onReceive(RestResult<T> result) {\n+            restResult = (HttpRestResult<T>) result;\n+        }\n+\n+        @Override\n+        public void onError(Throwable throwable) {\n+            throwable = throwable;\n+        }\n+\n+        public HttpRestResult<T> getRestResult() {\n+            return restResult;\n+        }\n+\n+        public Throwable getThrowable() {\n+            return throwable;\n+        }\n+    }\n+\n+    @Test\n+    public void test_url_post_from() throws Exception{\n+        String url = IP + CONFIG_INSTANCE_PATH + \"/instance\";\n+        Map<String, String> param = new HashMap<>();\n+        param.put(\"serviceName\", \"app-test\");\n+        param.put(\"port\", \"8080\");\n+        param.put(\"ip\", \"11.11.11.11\");\n+        CallbackMap<String> callbackMap = new CallbackMap<>();\n+        nacosRestTemplate.postFrom(url, Header.newInstance(), Query.newInstance(), param, String.class, callbackMap);\n+        Thread.sleep(2000);\n+        HttpRestResult<String> restResult = callbackMap.getRestResult();\n+        System.out.println(restResult.getData());\n+        System.out.println(restResult.getHeader());\n+        Assert.assertTrue(restResult.ok());\n+    }\n+\n+    @Test\n+    public void test_url_put_from() throws Exception{\n+        String url = IP + CONFIG_INSTANCE_PATH + \"/instance\";\n+        Map<String, String> param = new HashMap<>();\n+        param.put(\"serviceName\", \"app-test-change\");\n+        param.put(\"port\", \"8080\");\n+        param.put(\"ip\", \"11.11.11.11\");\n+        CallbackMap<String> callbackMap = new CallbackMap<>();\n+        nacosRestTemplate.putFrom(url, Header.newInstance(), Query.newInstance(), param, String.class, callbackMap);\n+        Thread.sleep(2000);\n+        HttpRestResult<String> restResult = callbackMap.getRestResult();\n+        System.out.println(restResult.getData());\n+        System.out.println(restResult.getHeader());\n+        Assert.assertTrue(restResult.ok());\n+    }\n+\n+\n+    @Test\n+    public void test_url_get() throws Exception {\n+        String url = IP + CONFIG_INSTANCE_PATH + \"/instance/list\";\n+        Query query = Query.newInstance().addParam(\"serviceName\", \"app-test\");\n+        CallbackMap<Map> callbackMap = new CallbackMap<>();\n+        nacosRestTemplate.get(url, Header.newInstance(), query, Map.class, callbackMap);\n+        Thread.sleep(2000);\n+        HttpRestResult<Map> restResult = callbackMap.getRestResult();\n+        System.out.println(restResult.getData());\n+        System.out.println(restResult.getHeader());\n+        Assert.assertTrue(restResult.ok());\n+        Assert.assertEquals(restResult.getData().get(\"dom\"), \"app-test\");\n+\n+    }\n+\n+    @Test\n+    public void test_url_by_map() throws Exception{\n+        String url = IP + CONFIG_INSTANCE_PATH + \"/instance/list\";\n+        Map<String, String> param = new HashMap<>();\n+        param.put(\"serviceName\", \"app-test\");\n+        CallbackMap<Map> callbackMap = new CallbackMap<>();\n+        nacosRestTemplate.get(url, Header.newInstance(), param, Map.class, callbackMap);\n+        Thread.sleep(2000);\n+        HttpRestResult<Map> restResult = callbackMap.getRestResult();\n+        System.out.println(restResult.getData());\n+        System.out.println(restResult.getHeader());\n+        Assert.assertTrue(restResult.ok());\n+        Assert.assertEquals(restResult.getData().get(\"dom\"), \"app-test\");\n+\n+    }\n+\n+    @Test\n+    public void test_url_delete() throws Exception{\n+        String url = IP + CONFIG_INSTANCE_PATH + \"/instance\";\n+        Query query = Query.newInstance()\n+            .addParam(\"ip\", \"11.11.11.11\")\n+            .addParam(\"port\", \"8080\")\n+            .addParam(\"serviceName\", \"app-test\");\n+        CallbackMap<String> callbackMap = new CallbackMap<>();\n+        nacosRestTemplate.delete(url, Header.newInstance(), query,  String.class, callbackMap);\n+        Thread.sleep(2000);\n+        HttpRestResult<String> restResult = callbackMap.getRestResult();\n+        System.out.println(restResult.getData());\n+        System.out.println(restResult.getHeader());\n+        Assert.assertTrue(restResult.ok());\n+\n+    }\n+\n+\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMjU4OQ==", "bodyText": "remove extra blank line", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437822589", "createdAt": "2020-06-10T02:19:56Z", "author": {"login": "KomachiSion"}, "path": "test/src/test/java/com/alibaba/nacos/test/common/NacosRestTemplate_ITCase.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.nacos.test.common;\n+\n+import com.alibaba.nacos.Nacos;\n+import com.alibaba.nacos.api.exception.NacosException;\n+import com.alibaba.nacos.common.http.HttpClientManager;\n+import com.alibaba.nacos.common.http.HttpRestResult;\n+import com.alibaba.nacos.common.http.client.NacosRestTemplate;\n+import com.alibaba.nacos.common.http.param.Header;\n+import com.alibaba.nacos.common.http.param.Query;\n+import com.alibaba.nacos.common.model.RestResult;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.MethodSorters;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ *  NacosRestTemplate_ITCase\n+ *\n+ * @author mai.jh\n+ * @date 2020/5/30\n+ */\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(classes = Nacos.class, properties = {\"server.servlet.context-path=/nacos\"},\n+    webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@FixMethodOrder(MethodSorters.JVM)\n+public class NacosRestTemplate_ITCase {\n+\n+    @LocalServerPort\n+    private int port;\n+\n+    private NacosRestTemplate nacosRestTemplate = HttpClientManager.getNacosRestTemplate();\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMjYwMA==", "bodyText": "remove extra blank line", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437822600", "createdAt": "2020-06-10T02:19:59Z", "author": {"login": "KomachiSion"}, "path": "test/src/test/java/com/alibaba/nacos/test/common/NacosRestTemplate_ITCase.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.nacos.test.common;\n+\n+import com.alibaba.nacos.Nacos;\n+import com.alibaba.nacos.api.exception.NacosException;\n+import com.alibaba.nacos.common.http.HttpClientManager;\n+import com.alibaba.nacos.common.http.HttpRestResult;\n+import com.alibaba.nacos.common.http.client.NacosRestTemplate;\n+import com.alibaba.nacos.common.http.param.Header;\n+import com.alibaba.nacos.common.http.param.Query;\n+import com.alibaba.nacos.common.model.RestResult;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.MethodSorters;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ *  NacosRestTemplate_ITCase\n+ *\n+ * @author mai.jh\n+ * @date 2020/5/30\n+ */\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(classes = Nacos.class, properties = {\"server.servlet.context-path=/nacos\"},\n+    webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@FixMethodOrder(MethodSorters.JVM)\n+public class NacosRestTemplate_ITCase {\n+\n+    @LocalServerPort\n+    private int port;\n+\n+    private NacosRestTemplate nacosRestTemplate = HttpClientManager.getNacosRestTemplate();\n+\n+\n+    private final String INSTANCE_PATH = \"/nacos/v1/ns\";\n+    private final String CONFIG_PATH = \"/nacos/v1/cs\";\n+    private String IP = null;\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzgyMjYyNw==", "bodyText": "remove extra blank lines.", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r437822627", "createdAt": "2020-06-10T02:20:06Z", "author": {"login": "KomachiSion"}, "path": "test/src/test/java/com/alibaba/nacos/test/common/NacosRestTemplate_ITCase.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.nacos.test.common;\n+\n+import com.alibaba.nacos.Nacos;\n+import com.alibaba.nacos.api.exception.NacosException;\n+import com.alibaba.nacos.common.http.HttpClientManager;\n+import com.alibaba.nacos.common.http.HttpRestResult;\n+import com.alibaba.nacos.common.http.client.NacosRestTemplate;\n+import com.alibaba.nacos.common.http.param.Header;\n+import com.alibaba.nacos.common.http.param.Query;\n+import com.alibaba.nacos.common.model.RestResult;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.MethodSorters;\n+import org.springframework.boot.test.context.SpringBootTest;\n+import org.springframework.boot.web.server.LocalServerPort;\n+import org.springframework.test.context.junit4.SpringRunner;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+/**\n+ *  NacosRestTemplate_ITCase\n+ *\n+ * @author mai.jh\n+ * @date 2020/5/30\n+ */\n+@RunWith(SpringRunner.class)\n+@SpringBootTest(classes = Nacos.class, properties = {\"server.servlet.context-path=/nacos\"},\n+    webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n+@FixMethodOrder(MethodSorters.JVM)\n+public class NacosRestTemplate_ITCase {\n+\n+    @LocalServerPort\n+    private int port;\n+\n+    private NacosRestTemplate nacosRestTemplate = HttpClientManager.getNacosRestTemplate();\n+\n+\n+    private final String INSTANCE_PATH = \"/nacos/v1/ns\";\n+    private final String CONFIG_PATH = \"/nacos/v1/cs\";\n+    private String IP = null;\n+\n+\n+    @Before\n+    public void init() throws NacosException {\n+        IP = String.format(\"http://localhost:%d\", port);\n+    }\n+\n+    @Test\n+    public void test_url_get_return_restResult() throws Exception{\n+        String url = IP + CONFIG_PATH + \"/configs\";\n+        Query query = Query.newInstance().addParam(\"beta\", true).addParam(\"dataId\",\"test-1\").addParam(\"group\", \"DEFAULT_GROUP\");\n+        HttpRestResult<String> restResult = nacosRestTemplate.get(url, Header.newInstance(), query, RestResult.class);\n+        Assert.assertTrue(restResult.ok());\n+        System.out.println(restResult.getData());\n+        System.out.println(restResult.getHeader());\n+    }\n+\n+\n+    @Test\n+    public void test_url_post_from() throws Exception{\n+        String url = IP + INSTANCE_PATH + \"/instance\";\n+        Map<String, String> param = new HashMap<>();\n+        param.put(\"serviceName\", \"app-test\");\n+        param.put(\"port\", \"8080\");\n+        param.put(\"ip\", \"11.11.11.11\");\n+        HttpRestResult<String> restResult = nacosRestTemplate.postFrom(url, Header.newInstance(), Query.newInstance(), param, String.class);\n+        Assert.assertTrue(restResult.ok());\n+        System.out.println(restResult.getData());\n+    }\n+\n+    @Test\n+    public void test_url_put_from() throws Exception{\n+        String url = IP + INSTANCE_PATH + \"/instance\";\n+        Map<String, String> param = new HashMap<>();\n+        param.put(\"serviceName\", \"app-test-change\");\n+        param.put(\"port\", \"8080\");\n+        param.put(\"ip\", \"11.11.11.11\");\n+        HttpRestResult<String> restResult = nacosRestTemplate.putFrom(url, Header.newInstance(), Query.newInstance(), param, String.class);\n+        Assert.assertTrue(restResult.ok());\n+        System.out.println(restResult.getData());\n+    }\n+\n+    @Test\n+    public void test_url_get() throws Exception {\n+        String url = IP + INSTANCE_PATH + \"/instance/list\";\n+        Query query = Query.newInstance().addParam(\"serviceName\", \"app-test\");\n+        HttpRestResult<Map> restResult = nacosRestTemplate.get(url, Header.newInstance(), query, Map.class);\n+        Assert.assertTrue(restResult.ok());\n+        Assert.assertEquals(restResult.getData().get(\"dom\"), \"app-test\");\n+        System.out.println(restResult.getData());\n+    }\n+\n+    @Test\n+    public void test_url_get_by_map() throws Exception {\n+        String url = IP + INSTANCE_PATH + \"/instance/list\";\n+        Map<String, String> param = new HashMap<>();\n+        param.put(\"serviceName\", \"app-test\");\n+        HttpRestResult<Map> restResult = nacosRestTemplate.get(url, Header.newInstance(), param, Map.class);\n+        Assert.assertTrue(restResult.ok());\n+        Assert.assertEquals(restResult.getData().get(\"dom\"), \"app-test\");\n+        System.out.println(restResult.getData());\n+    }\n+\n+    @Test\n+    public void test_url_delete() throws Exception{\n+        String url = IP + INSTANCE_PATH + \"/instance\";\n+        Query query = Query.newInstance()\n+            .addParam(\"ip\", \"11.11.11.11\")\n+            .addParam(\"port\", \"8080\")\n+            .addParam(\"serviceName\", \"app-test\");\n+        HttpRestResult<String> restResult = nacosRestTemplate.delete(url, Header.newInstance(), query,  String.class);\n+        Assert.assertTrue(restResult.ok());\n+        System.out.println(restResult);\n+    }\n+\n+\n+\n+\n+\n+\n+\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a83241205ccf9ff651065a1874a18be6918ceddc"}, "originalPosition": 141}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa6bf9951d3484fd46b29c5aa71f543bc0e6ff7e", "author": {"user": {"login": "Maijh97", "name": "mai.jh"}}, "url": "https://github.com/alibaba/nacos/commit/fa6bf9951d3484fd46b29c5aa71f543bc0e6ff7e", "committedDate": "2020-06-11T01:34:15Z", "message": "remove extra blank lines"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NjE2MDI0", "url": "https://github.com/alibaba/nacos/pull/2926#pullrequestreview-428616024", "createdAt": "2020-06-11T06:08:07Z", "commit": {"oid": "fa6bf9951d3484fd46b29c5aa71f543bc0e6ff7e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNjowODowN1rOGiPsMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNzo0ODo1NVrOGiSTNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU2MTg0MQ==", "bodyText": "log class is wrong", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r438561841", "createdAt": "2020-06-11T06:08:07Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/http/client/DefaultHttpClientRequest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.http.client;\n+\n+import com.alibaba.nacos.common.constant.HttpHeaderConsts;\n+import com.alibaba.nacos.common.http.BaseHttpMethod;\n+import com.alibaba.nacos.common.http.param.Header;\n+import com.alibaba.nacos.common.http.param.MediaType;\n+import com.alibaba.nacos.common.model.RequestHttpEntity;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpRequestBase;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.io.IOException;\n+import java.net.URI;\n+import java.util.Map;\n+\n+/**\n+ * {@link HttpClientRequest} implementation that uses apache http client to\n+ * execute streaming requests\n+ *\n+ * @author mai.jh\n+ * @date 2020/5/24\n+ */\n+@SuppressWarnings({\"unchecked\", \"rawtypes\", \"resource\"})\n+public class DefaultHttpClientRequest implements HttpClientRequest {\n+\n+    private static final Logger logger = LoggerFactory.getLogger(NacosRestTemplate.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa6bf9951d3484fd46b29c5aa71f543bc0e6ff7e"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU2NjQ2MA==", "bodyText": "Why close stream in there, what's going on when stream will be used in outer?", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r438566460", "createdAt": "2020-06-11T06:22:00Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/IoUtils.java", "diffHunk": "@@ -167,6 +167,17 @@ public static void cleanDirectory(File directory) throws IOException {\n         }\n     }\n \n+    public static void copy(byte[] in, OutputStream out) throws IOException {\n+        try {\n+            out.write(in);\n+        } finally {\n+            try {\n+                out.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa6bf9951d3484fd46b29c5aa71f543bc0e6ff7e"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU4MDQyOA==", "bodyText": "catch jackson exception in util and throw NacosDeserializationException", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r438580428", "createdAt": "2020-06-11T06:58:25Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/JacksonUtils.java", "diffHunk": "@@ -71,22 +72,24 @@ public static String toJson(Object obj) {\n \t}\n \n \tpublic static <T> T toObj(byte[] json, Type cls) {\n-\t\ttry {\n-\t\t\treturn toObj(StringUtils.newString4UTF8(json), cls);\n-\t\t}\n-\t\tcatch (Exception e) {\n-\t\t\tthrow new NacosDeserializationException(e);\n-\t\t}\n-\t}\n-\n-\tpublic static <T> T toObj(byte[] json, TypeReference<T> typeReference) {\n-\t\ttry {\n-\t\t\treturn toObj(StringUtils.newString4UTF8(json), typeReference);\n-\t\t}\n-\t\tcatch (Exception e) {\n-\t\t\tthrow new NacosDeserializationException(e);\n-\t\t}\n-\t}\n+        try {\n+            return toObj(StringUtils.newString4UTF8(json), cls);\n+        } catch (Exception e) {\n+            throw new NacosDeserializationException(e);\n+        }\n+    }\n+\n+\tpublic static <T> T toObj(InputStream inputStream, Class<T> tClass) throws Exception {\n+\t    return mapper.readValue(inputStream, tClass);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa6bf9951d3484fd46b29c5aa71f543bc0e6ff7e"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU4MDY5NA==", "bodyText": "catch follow } in same line, not next line please.", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r438580694", "createdAt": "2020-06-11T06:59:01Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/JacksonUtils.java", "diffHunk": "@@ -115,6 +118,15 @@ public static String toJson(Object obj) {\n \t\t}\n \t}\n \n+\tpublic static <T> T toObj(InputStream inputStream, Type type) {\n+        try {\n+            return mapper.readValue(inputStream, mapper.constructType(type));\n+        }\n+        catch (IOException e) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa6bf9951d3484fd46b29c5aa71f543bc0e6ff7e"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU4MDkyOQ==", "bodyText": "If it's an empty class, please remove it.", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r438580929", "createdAt": "2020-06-11T06:59:33Z", "author": {"login": "KomachiSion"}, "path": "common/src/test/java/com/alibaba/nacos/common/http/HttpUtilsTest.java", "diffHunk": "@@ -1,12 +1,20 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n package com.alibaba.nacos.common.http;\n \n-import org.junit.Test;\n-\n public class HttpUtilsTest {\n \n-\t@Test\n-\tpublic void test_url_encode() throws Exception {\n-\n-\t}\n-\n-}\n\\ No newline at end of file\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa6bf9951d3484fd46b29c5aa71f543bc0e6ff7e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU5NDc3NA==", "bodyText": "Why add charset in Type? Header.java has add Accept-Charset as UTF-8 default", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r438594774", "createdAt": "2020-06-11T07:29:35Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/http/param/MediaType.java", "diffHunk": "@@ -25,7 +25,7 @@ private MediaType() {}\n \n     public static final String APPLICATION_ATOM_XML = \"application/atom+xml\";\n \n-    public static final String APPLICATION_FORM_URLENCODED = \"application/x-www-form-urlencoded\";\n+    public static final String APPLICATION_FORM_URLENCODED = \"application/x-www-form-urlencoded;charset=utf-8\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa6bf9951d3484fd46b29c5aa71f543bc0e6ff7e"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU5NTY2NA==", "bodyText": "Can you move these all static values to HttpHeadeConsts?", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r438595664", "createdAt": "2020-06-11T07:31:18Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/http/param/Header.java", "diffHunk": "@@ -34,7 +38,7 @@\n \n     private Header() {\n         header = new LinkedHashMap<String, String>();\n-        addParam(\"Content-Type\", \"application/json\");\n+        addParam(HttpHeaderConsts.CONTENT_TYPE, MediaType.APPLICATION_JSON);\n         addParam(\"Accept-Charset\", \"UTF-8\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa6bf9951d3484fd46b29c5aa71f543bc0e6ff7e"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU5NTk4OA==", "bodyText": "Same question as MediaType", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r438595988", "createdAt": "2020-06-11T07:32:00Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/http/param/Header.java", "diffHunk": "@@ -91,9 +103,34 @@ public void addAll(Map<String, String> params) {\n         }\n     }\n \n+    public String getCharset() {\n+        String value = getValue(HttpHeaderConsts.CONTENT_TYPE);\n+        return (StringUtils.isNotBlank(value) ? analysisCharset(value) : Constants.ENCODE);\n+    }\n+\n+    private String analysisCharset(String contentType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa6bf9951d3484fd46b29c5aa71f543bc0e6ff7e"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYwNDU5OA==", "bodyText": "catch follow } in same line", "url": "https://github.com/alibaba/nacos/pull/2926#discussion_r438604598", "createdAt": "2020-06-11T07:48:55Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/http/client/DefaultClientHttpResponse.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.http.client;\n+\n+import com.alibaba.nacos.common.http.param.Header;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.utils.HttpClientUtils;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+/**\n+ * ApacheClientHttpResponse implementation {@link HttpClientResponse}\n+ *\n+ * @author mai.jh\n+ * @date 2020/5/25\n+ */\n+public class DefaultClientHttpResponse implements HttpClientResponse {\n+\n+    private HttpResponse response;\n+\n+    private Header responseHeader;\n+\n+    public DefaultClientHttpResponse(HttpResponse response) {\n+        this.response = response;\n+    }\n+\n+    @Override\n+    public int getStatusCode() {\n+        return this.response.getStatusLine().getStatusCode();\n+    }\n+\n+    @Override\n+    public String getStatusText() {\n+        return this.response.getStatusLine().getReasonPhrase();\n+    }\n+\n+    @Override\n+    public Header getHeaders() {\n+        if (this.responseHeader == null) {\n+            this.responseHeader = Header.newInstance();\n+            org.apache.http.Header[] allHeaders = response.getAllHeaders();\n+            for (org.apache.http.Header header : allHeaders) {\n+                this.responseHeader.addParam(header.getName(), header.getValue());\n+            }\n+        }\n+        return this.responseHeader;\n+    }\n+\n+    @Override\n+    public InputStream getBody() throws IOException{\n+        return response.getEntity().getContent();\n+    }\n+\n+    @Override\n+    public void close() {\n+        try {\n+            if (this.response != null) {\n+                HttpClientUtils.closeQuietly(response);\n+            }\n+        }\n+        catch (Exception ex) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa6bf9951d3484fd46b29c5aa71f543bc0e6ff7e"}, "originalPosition": 76}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95272feb2827d4434636a1a30f5b5658e1ba15cc", "author": {"user": {"login": "Maijh97", "name": "mai.jh"}}, "url": "https://github.com/alibaba/nacos/commit/95272feb2827d4434636a1a30f5b5658e1ba15cc", "committedDate": "2020-06-11T09:38:34Z", "message": "adjust some codes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4ODYxNjQ3", "url": "https://github.com/alibaba/nacos/pull/2926#pullrequestreview-428861647", "createdAt": "2020-06-11T12:32:31Z", "commit": {"oid": "95272feb2827d4434636a1a30f5b5658e1ba15cc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4460, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}