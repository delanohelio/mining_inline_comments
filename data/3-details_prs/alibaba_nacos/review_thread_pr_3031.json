{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMyODg2ODk5", "number": 3031, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNzoyNjo0MFrOEEklNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwMzoxMToyN1rOEFYFmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjI5MTA4OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/com/alibaba/nacos/client/naming/backups/FailoverReactor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNzoyNjo0MFrOGiRnjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNzoyODo0NFrOGiRrbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU5MzQyMg==", "bodyText": "\u8fd9\u91cc\u6539\u7684\u539f\u56e0\u662f\uff1f", "url": "https://github.com/alibaba/nacos/pull/3031#discussion_r438593422", "createdAt": "2020-06-11T07:26:40Z", "author": {"login": "yanlinly"}, "path": "client/src/main/java/com/alibaba/nacos/client/naming/backups/FailoverReactor.java", "diffHunk": "@@ -52,7 +59,7 @@ public FailoverReactor(HostReactor hostReactor, String cacheDir) {\n         this.hostReactor = hostReactor;\n         this.failoverDir = cacheDir + \"/failover\";\n         // init executorService\n-        this.executorService = Executors.newSingleThreadScheduledExecutor(new ThreadFactory() {\n+        this.executorService = new ScheduledThreadPoolExecutor(1, new ThreadFactory() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "042bd352fb4764ae079f56e2012c97cf327a956b"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU5NDQxMg==", "bodyText": "\u8fd9\u4e2a\u662fPMD\u62a5\u51fa\u6765\u7684\u95ee\u9898\u3002\u3002\u3002 \u6240\u4ee5\u6211\u5c31\u987a\u624b\u4fee\u6539\u4e86", "url": "https://github.com/alibaba/nacos/pull/3031#discussion_r438594412", "createdAt": "2020-06-11T07:28:44Z", "author": {"login": "zongtanghu"}, "path": "client/src/main/java/com/alibaba/nacos/client/naming/backups/FailoverReactor.java", "diffHunk": "@@ -52,7 +59,7 @@ public FailoverReactor(HostReactor hostReactor, String cacheDir) {\n         this.hostReactor = hostReactor;\n         this.failoverDir = cacheDir + \"/failover\";\n         // init executorService\n-        this.executorService = Executors.newSingleThreadScheduledExecutor(new ThreadFactory() {\n+        this.executorService = new ScheduledThreadPoolExecutor(1, new ThreadFactory() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU5MzQyMg=="}, "originalCommit": {"oid": "042bd352fb4764ae079f56e2012c97cf327a956b"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjU2OTUwOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/alibaba/nacos/common/utils/ConvertUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwODo1MjowMFrOGiUX5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTozOToyMVrOGiV-yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYzODU2NQ==", "bodyText": "You may need to add a comment, which automatically defaults to 0", "url": "https://github.com/alibaba/nacos/pull/3031#discussion_r438638565", "createdAt": "2020-06-11T08:52:00Z", "author": {"login": "chuntaojun"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/ConvertUtils.java", "diffHunk": "@@ -16,15 +16,17 @@\n \n package com.alibaba.nacos.common.utils;\n \n-import org.apache.commons.lang3.StringUtils;\n-\n /**\n  * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n  */\n public final class ConvertUtils {\n \n     private static final String NULL_STR = \"null\";\n \n+    public static int toInt(String val) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "042bd352fb4764ae079f56e2012c97cf327a956b"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY2NDkwNA==", "bodyText": "Okay, I will add a comment in next commit.", "url": "https://github.com/alibaba/nacos/pull/3031#discussion_r438664904", "createdAt": "2020-06-11T09:39:21Z", "author": {"login": "zongtanghu"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/ConvertUtils.java", "diffHunk": "@@ -16,15 +16,17 @@\n \n package com.alibaba.nacos.common.utils;\n \n-import org.apache.commons.lang3.StringUtils;\n-\n /**\n  * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n  */\n public final class ConvertUtils {\n \n     private static final String NULL_STR = \"null\";\n \n+    public static int toInt(String val) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYzODU2NQ=="}, "originalCommit": {"oid": "042bd352fb4764ae079f56e2012c97cf327a956b"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjU3MjQ4OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/alibaba/nacos/common/utils/ConvertUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwODo1Mjo0OFrOGiUZsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwOTo0MDoyNlrOGiWBFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYzOTAyNw==", "bodyText": "\u76f4\u63a5\u7c7b\u4e0a\u9762\uff0c@SuppressWarnings\uff08\u201call\u201d\uff09\u5427", "url": "https://github.com/alibaba/nacos/pull/3031#discussion_r438639027", "createdAt": "2020-06-11T08:52:48Z", "author": {"login": "chuntaojun"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/ConvertUtils.java", "diffHunk": "@@ -35,18 +37,164 @@ public static int toInt(String val, int defaultValue) {\n         return Integer.parseInt(val);\n     }\n \n+    public static long toLong(String val) {\n+        return toLong(val);\n+    }\n+\n     public static long toLong(String val, long defaultValue) {\n         if (StringUtils.isBlank(val)) {\n             return defaultValue;\n         }\n         return Long.parseLong(val);\n     }\n \n-    public static boolean toBool(String val, boolean defaultValue) {\n+    public static boolean toBoolean(String val, boolean defaultValue) {\n         if (StringUtils.isBlank(val)) {\n             return defaultValue;\n         }\n         return Boolean.parseBoolean(val);\n     }\n \n+    //   The following utility functions are extracted from <link>org.apache.commons.lang3</link>\n+    //   start\n+\n+    /**\n+     * <p>Converts a String to a boolean (optimised for performance).</p>\n+     *\n+     * <p>{@code 'true'}, {@code 'on'}, {@code 'y'}, {@code 't'} or {@code 'yes'}\n+     * (case insensitive) will return {@code true}. Otherwise,\n+     * {@code false} is returned.</p>\n+     *\n+     * <p>This method performs 4 times faster (JDK1.4) than\n+     * {@code Boolean.valueOf(String)}. However, this method accepts\n+     * 'on' and 'yes', 't', 'y' as true values.\n+     *\n+     * <pre>\n+     *   BooleanUtils.toBoolean(null)    = false\n+     *   BooleanUtils.toBoolean(\"true\")  = true\n+     *   BooleanUtils.toBoolean(\"TRUE\")  = true\n+     *   BooleanUtils.toBoolean(\"tRUe\")  = true\n+     *   BooleanUtils.toBoolean(\"on\")    = true\n+     *   BooleanUtils.toBoolean(\"yes\")   = true\n+     *   BooleanUtils.toBoolean(\"false\") = false\n+     *   BooleanUtils.toBoolean(\"x gti\") = false\n+     *   BooleanUtils.toBooleanObject(\"y\") = true\n+     *   BooleanUtils.toBooleanObject(\"n\") = false\n+     *   BooleanUtils.toBooleanObject(\"t\") = true\n+     *   BooleanUtils.toBooleanObject(\"f\") = false\n+     * </pre>\n+     *\n+     * @param str  the String to check\n+     * @return the boolean value of the string, {@code false} if no match or the String is null\n+     */\n+    public static boolean toBoolean(final String str) {\n+        return toBooleanObject(str) == Boolean.TRUE;\n+    }\n+\n+    /**\n+     * <p>Converts a String to a Boolean.</p>\n+     *\n+     * <p>{@code 'true'}, {@code 'on'}, {@code 'y'}, {@code 't'} or {@code 'yes'}\n+     * (case insensitive) will return {@code true}.\n+     * {@code 'false'}, {@code 'off'}, {@code 'n'}, {@code 'f'} or {@code 'no'}\n+     * (case insensitive) will return {@code false}.\n+     * Otherwise, {@code null} is returned.</p>\n+     *\n+     * <p>NOTE: This returns null and will throw a NullPointerException if autoboxed to a boolean. </p>\n+     *\n+     * <pre>\n+     *   // N.B. case is not significant\n+     *   BooleanUtils.toBooleanObject(null)    = null\n+     *   BooleanUtils.toBooleanObject(\"true\")  = Boolean.TRUE\n+     *   BooleanUtils.toBooleanObject(\"T\")     = Boolean.TRUE // i.e. T[RUE]\n+     *   BooleanUtils.toBooleanObject(\"false\") = Boolean.FALSE\n+     *   BooleanUtils.toBooleanObject(\"f\")     = Boolean.FALSE // i.e. f[alse]\n+     *   BooleanUtils.toBooleanObject(\"No\")    = Boolean.FALSE\n+     *   BooleanUtils.toBooleanObject(\"n\")     = Boolean.FALSE // i.e. n[o]\n+     *   BooleanUtils.toBooleanObject(\"on\")    = Boolean.TRUE\n+     *   BooleanUtils.toBooleanObject(\"ON\")    = Boolean.TRUE\n+     *   BooleanUtils.toBooleanObject(\"off\")   = Boolean.FALSE\n+     *   BooleanUtils.toBooleanObject(\"oFf\")   = Boolean.FALSE\n+     *   BooleanUtils.toBooleanObject(\"yes\")   = Boolean.TRUE\n+     *   BooleanUtils.toBooleanObject(\"Y\")     = Boolean.TRUE // i.e. Y[ES]\n+     *   BooleanUtils.toBooleanObject(\"blue\")  = null\n+     *   BooleanUtils.toBooleanObject(\"true \") = null // trailing space (too long)\n+     *   BooleanUtils.toBooleanObject(\"ono\")   = null // does not match on or no\n+     * </pre>\n+     *\n+     * @param str  the String to check; upper and lower case are treated as the same\n+     * @return the Boolean value of the string, {@code null} if no match or {@code null} input\n+     */\n+    @SuppressWarnings({\"PMD.UndefineMagicConstantRule\", \"PMD.AvoidComplexConditionRule\", \"PMD.SwitchStatementRule\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "042bd352fb4764ae079f56e2012c97cf327a956b"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY2NTQ5Mg==", "bodyText": "Okay, I will adjust this codes in next commit.", "url": "https://github.com/alibaba/nacos/pull/3031#discussion_r438665492", "createdAt": "2020-06-11T09:40:26Z", "author": {"login": "zongtanghu"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/ConvertUtils.java", "diffHunk": "@@ -35,18 +37,164 @@ public static int toInt(String val, int defaultValue) {\n         return Integer.parseInt(val);\n     }\n \n+    public static long toLong(String val) {\n+        return toLong(val);\n+    }\n+\n     public static long toLong(String val, long defaultValue) {\n         if (StringUtils.isBlank(val)) {\n             return defaultValue;\n         }\n         return Long.parseLong(val);\n     }\n \n-    public static boolean toBool(String val, boolean defaultValue) {\n+    public static boolean toBoolean(String val, boolean defaultValue) {\n         if (StringUtils.isBlank(val)) {\n             return defaultValue;\n         }\n         return Boolean.parseBoolean(val);\n     }\n \n+    //   The following utility functions are extracted from <link>org.apache.commons.lang3</link>\n+    //   start\n+\n+    /**\n+     * <p>Converts a String to a boolean (optimised for performance).</p>\n+     *\n+     * <p>{@code 'true'}, {@code 'on'}, {@code 'y'}, {@code 't'} or {@code 'yes'}\n+     * (case insensitive) will return {@code true}. Otherwise,\n+     * {@code false} is returned.</p>\n+     *\n+     * <p>This method performs 4 times faster (JDK1.4) than\n+     * {@code Boolean.valueOf(String)}. However, this method accepts\n+     * 'on' and 'yes', 't', 'y' as true values.\n+     *\n+     * <pre>\n+     *   BooleanUtils.toBoolean(null)    = false\n+     *   BooleanUtils.toBoolean(\"true\")  = true\n+     *   BooleanUtils.toBoolean(\"TRUE\")  = true\n+     *   BooleanUtils.toBoolean(\"tRUe\")  = true\n+     *   BooleanUtils.toBoolean(\"on\")    = true\n+     *   BooleanUtils.toBoolean(\"yes\")   = true\n+     *   BooleanUtils.toBoolean(\"false\") = false\n+     *   BooleanUtils.toBoolean(\"x gti\") = false\n+     *   BooleanUtils.toBooleanObject(\"y\") = true\n+     *   BooleanUtils.toBooleanObject(\"n\") = false\n+     *   BooleanUtils.toBooleanObject(\"t\") = true\n+     *   BooleanUtils.toBooleanObject(\"f\") = false\n+     * </pre>\n+     *\n+     * @param str  the String to check\n+     * @return the boolean value of the string, {@code false} if no match or the String is null\n+     */\n+    public static boolean toBoolean(final String str) {\n+        return toBooleanObject(str) == Boolean.TRUE;\n+    }\n+\n+    /**\n+     * <p>Converts a String to a Boolean.</p>\n+     *\n+     * <p>{@code 'true'}, {@code 'on'}, {@code 'y'}, {@code 't'} or {@code 'yes'}\n+     * (case insensitive) will return {@code true}.\n+     * {@code 'false'}, {@code 'off'}, {@code 'n'}, {@code 'f'} or {@code 'no'}\n+     * (case insensitive) will return {@code false}.\n+     * Otherwise, {@code null} is returned.</p>\n+     *\n+     * <p>NOTE: This returns null and will throw a NullPointerException if autoboxed to a boolean. </p>\n+     *\n+     * <pre>\n+     *   // N.B. case is not significant\n+     *   BooleanUtils.toBooleanObject(null)    = null\n+     *   BooleanUtils.toBooleanObject(\"true\")  = Boolean.TRUE\n+     *   BooleanUtils.toBooleanObject(\"T\")     = Boolean.TRUE // i.e. T[RUE]\n+     *   BooleanUtils.toBooleanObject(\"false\") = Boolean.FALSE\n+     *   BooleanUtils.toBooleanObject(\"f\")     = Boolean.FALSE // i.e. f[alse]\n+     *   BooleanUtils.toBooleanObject(\"No\")    = Boolean.FALSE\n+     *   BooleanUtils.toBooleanObject(\"n\")     = Boolean.FALSE // i.e. n[o]\n+     *   BooleanUtils.toBooleanObject(\"on\")    = Boolean.TRUE\n+     *   BooleanUtils.toBooleanObject(\"ON\")    = Boolean.TRUE\n+     *   BooleanUtils.toBooleanObject(\"off\")   = Boolean.FALSE\n+     *   BooleanUtils.toBooleanObject(\"oFf\")   = Boolean.FALSE\n+     *   BooleanUtils.toBooleanObject(\"yes\")   = Boolean.TRUE\n+     *   BooleanUtils.toBooleanObject(\"Y\")     = Boolean.TRUE // i.e. Y[ES]\n+     *   BooleanUtils.toBooleanObject(\"blue\")  = null\n+     *   BooleanUtils.toBooleanObject(\"true \") = null // trailing space (too long)\n+     *   BooleanUtils.toBooleanObject(\"ono\")   = null // does not match on or no\n+     * </pre>\n+     *\n+     * @param str  the String to check; upper and lower case are treated as the same\n+     * @return the Boolean value of the string, {@code null} if no match or {@code null} input\n+     */\n+    @SuppressWarnings({\"PMD.UndefineMagicConstantRule\", \"PMD.AvoidComplexConditionRule\", \"PMD.SwitchStatementRule\"})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODYzOTAyNw=="}, "originalCommit": {"oid": "042bd352fb4764ae079f56e2012c97cf327a956b"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMjU4MDc1OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/alibaba/nacos/common/utils/CharSequenceUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwODo1NTowMVrOGiUe5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwODo1NTowMVrOGiUe5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODY0MDM1Ng==", "bodyText": "\u4e0d\u5fc5\u8981\u5355\u72ec\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u7c7b\uff0c\u8fd9\u4e2a\u653e\u5230StringUtils\u5185\u90e8\u5c31\u597d\u4e86", "url": "https://github.com/alibaba/nacos/pull/3031#discussion_r438640356", "createdAt": "2020-06-11T08:55:01Z", "author": {"login": "chuntaojun"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/CharSequenceUtils.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.nacos.common.utils;\n+\n+/**\n+ * @author zongtanghu\n+ */\n+public class CharSequenceUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "042bd352fb4764ae079f56e2012c97cf327a956b"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDcwODgxOnYy", "diffSide": "RIGHT", "path": "client/src/main/java/com/alibaba/nacos/client/identify/STSConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwMjo1NjowMFrOGjhycg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwMzoyMDoxNFrOGjiE4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkwNjkzMA==", "bodyText": "remove extra blank line.", "url": "https://github.com/alibaba/nacos/pull/3031#discussion_r439906930", "createdAt": "2020-06-15T02:56:00Z", "author": {"login": "KomachiSion"}, "path": "client/src/main/java/com/alibaba/nacos/client/identify/STSConfig.java", "diffHunk": "@@ -15,7 +15,8 @@\n  */\n package com.alibaba.nacos.client.identify;\n \n-import org.apache.commons.lang3.StringUtils;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef34e5e4b5698ec98027d42fb3060e7a239ea087"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkxMTY1MQ==", "bodyText": "In the lasted commit, the extra blank line has aleady been removed.", "url": "https://github.com/alibaba/nacos/pull/3031#discussion_r439911651", "createdAt": "2020-06-15T03:20:14Z", "author": {"login": "zongtanghu"}, "path": "client/src/main/java/com/alibaba/nacos/client/identify/STSConfig.java", "diffHunk": "@@ -15,7 +15,8 @@\n  */\n package com.alibaba.nacos.client.identify;\n \n-import org.apache.commons.lang3.StringUtils;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkwNjkzMA=="}, "originalCommit": {"oid": "ef34e5e4b5698ec98027d42fb3060e7a239ea087"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDcwODk1OnYy", "diffSide": "RIGHT", "path": "client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwMjo1NjowOVrOGjhyiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwMzoyMzo0MVrOGjiHjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkwNjk1Mw==", "bodyText": "remove extra blank line.", "url": "https://github.com/alibaba/nacos/pull/3031#discussion_r439906953", "createdAt": "2020-06-15T02:56:09Z", "author": {"login": "KomachiSion"}, "path": "client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "diffHunk": "@@ -15,8 +15,9 @@\n  */\n package com.alibaba.nacos.client.logging;\n \n-import org.apache.commons.lang3.BooleanUtils;\n-import org.apache.commons.lang3.StringUtils;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef34e5e4b5698ec98027d42fb3060e7a239ea087"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkxMjMzNA==", "bodyText": "In the lasted commit, the extra blank line has aleady been removed.", "url": "https://github.com/alibaba/nacos/pull/3031#discussion_r439912334", "createdAt": "2020-06-15T03:23:41Z", "author": {"login": "zongtanghu"}, "path": "client/src/main/java/com/alibaba/nacos/client/logging/AbstractNacosLogging.java", "diffHunk": "@@ -15,8 +15,9 @@\n  */\n package com.alibaba.nacos.client.logging;\n \n-import org.apache.commons.lang3.BooleanUtils;\n-import org.apache.commons.lang3.StringUtils;\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkwNjk1Mw=="}, "originalCommit": {"oid": "ef34e5e4b5698ec98027d42fb3060e7a239ea087"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDcwOTMzOnYy", "diffSide": "RIGHT", "path": "client/src/main/java/com/alibaba/nacos/client/naming/backups/FailoverReactor.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwMjo1NjoyNlrOGjhyxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwMzoyMToxMlrOGjiFzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkwNzAxMw==", "bodyText": "remove extra blank line.", "url": "https://github.com/alibaba/nacos/pull/3031#discussion_r439907013", "createdAt": "2020-06-15T02:56:26Z", "author": {"login": "KomachiSion"}, "path": "client/src/main/java/com/alibaba/nacos/client/naming/backups/FailoverReactor.java", "diffHunk": "@@ -25,16 +25,23 @@\n import com.alibaba.nacos.common.lifecycle.Closeable;\n import com.alibaba.nacos.common.utils.JacksonUtils;\n \n+import com.alibaba.nacos.common.utils.StringUtils;\n import com.alibaba.nacos.common.utils.ThreadUtils;\n-import org.apache.commons.lang3.StringUtils;\n \n import java.io.BufferedReader;\n import java.io.File;\n import java.io.StringReader;\n import java.nio.charset.Charset;\n-import java.util.*;\n+import java.util.Map;\n+import java.util.Date;\n+import java.util.Calendar;\n+import java.util.TimerTask;\n+import java.util.HashMap;\n+import java.util.Arrays;\n+import java.util.List;\n import java.util.concurrent.*;\n \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef34e5e4b5698ec98027d42fb3060e7a239ea087"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkxMTg4Ng==", "bodyText": "In the next commit, I will remove the blank line.", "url": "https://github.com/alibaba/nacos/pull/3031#discussion_r439911886", "createdAt": "2020-06-15T03:21:12Z", "author": {"login": "zongtanghu"}, "path": "client/src/main/java/com/alibaba/nacos/client/naming/backups/FailoverReactor.java", "diffHunk": "@@ -25,16 +25,23 @@\n import com.alibaba.nacos.common.lifecycle.Closeable;\n import com.alibaba.nacos.common.utils.JacksonUtils;\n \n+import com.alibaba.nacos.common.utils.StringUtils;\n import com.alibaba.nacos.common.utils.ThreadUtils;\n-import org.apache.commons.lang3.StringUtils;\n \n import java.io.BufferedReader;\n import java.io.File;\n import java.io.StringReader;\n import java.nio.charset.Charset;\n-import java.util.*;\n+import java.util.Map;\n+import java.util.Date;\n+import java.util.Calendar;\n+import java.util.TimerTask;\n+import java.util.HashMap;\n+import java.util.Arrays;\n+import java.util.List;\n import java.util.concurrent.*;\n \n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkwNzAxMw=="}, "originalCommit": {"oid": "ef34e5e4b5698ec98027d42fb3060e7a239ea087"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDcyOTcyOnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/alibaba/nacos/common/utils/ConvertUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwMzoxMToyMFrOGjh-iQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwMzoxMToyMFrOGjh-iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkxMDAyNQ==", "bodyText": "\u8fd9\u4e9b\u4ee3\u7801\u662f\u4ece\u54ea\u91cc\u62f7\u8d1d\u7684\uff0c\u8fd8\u662f\u81ea\u5df1\u5199\u7684\u5462\uff1f \u5982\u679c\u662f\u62f7\u8d1d\u8fc7\u6765\u7684\u6ce8\u610f\u4e00\u4e0blicense", "url": "https://github.com/alibaba/nacos/pull/3031#discussion_r439910025", "createdAt": "2020-06-15T03:11:20Z", "author": {"login": "yanlinly"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/ConvertUtils.java", "diffHunk": "@@ -35,18 +44,164 @@ public static int toInt(String val, int defaultValue) {\n         return Integer.parseInt(val);\n     }\n \n+    public static long toLong(String val) {\n+        return toLong(val);\n+    }\n+\n     public static long toLong(String val, long defaultValue) {\n         if (StringUtils.isBlank(val)) {\n             return defaultValue;\n         }\n         return Long.parseLong(val);\n     }\n \n-    public static boolean toBool(String val, boolean defaultValue) {\n+    public static boolean toBoolean(String val, boolean defaultValue) {\n         if (StringUtils.isBlank(val)) {\n             return defaultValue;\n         }\n         return Boolean.parseBoolean(val);\n     }\n \n+    //   The following utility functions are extracted from <link>org.apache.commons.lang3</link>\n+    //   start\n+\n+    /**\n+     * <p>Converts a String to a boolean (optimised for performance).</p>\n+     *\n+     * <p>{@code 'true'}, {@code 'on'}, {@code 'y'}, {@code 't'} or {@code 'yes'}\n+     * (case insensitive) will return {@code true}. Otherwise,\n+     * {@code false} is returned.</p>\n+     *\n+     * <p>This method performs 4 times faster (JDK1.4) than\n+     * {@code Boolean.valueOf(String)}. However, this method accepts\n+     * 'on' and 'yes', 't', 'y' as true values.\n+     *\n+     * <pre>\n+     *   BooleanUtils.toBoolean(null)    = false\n+     *   BooleanUtils.toBoolean(\"true\")  = true\n+     *   BooleanUtils.toBoolean(\"TRUE\")  = true\n+     *   BooleanUtils.toBoolean(\"tRUe\")  = true\n+     *   BooleanUtils.toBoolean(\"on\")    = true\n+     *   BooleanUtils.toBoolean(\"yes\")   = true\n+     *   BooleanUtils.toBoolean(\"false\") = false\n+     *   BooleanUtils.toBoolean(\"x gti\") = false\n+     *   BooleanUtils.toBooleanObject(\"y\") = true\n+     *   BooleanUtils.toBooleanObject(\"n\") = false\n+     *   BooleanUtils.toBooleanObject(\"t\") = true\n+     *   BooleanUtils.toBooleanObject(\"f\") = false\n+     * </pre>\n+     *\n+     * @param str  the String to check\n+     * @return the boolean value of the string, {@code false} if no match or the String is null\n+     */\n+    public static boolean toBoolean(final String str) {\n+        return toBooleanObject(str) == Boolean.TRUE;\n+    }\n+\n+    /**\n+     * <p>Converts a String to a Boolean.</p>\n+     *\n+     * <p>{@code 'true'}, {@code 'on'}, {@code 'y'}, {@code 't'} or {@code 'yes'}\n+     * (case insensitive) will return {@code true}.\n+     * {@code 'false'}, {@code 'off'}, {@code 'n'}, {@code 'f'} or {@code 'no'}\n+     * (case insensitive) will return {@code false}.\n+     * Otherwise, {@code null} is returned.</p>\n+     *\n+     * <p>NOTE: This returns null and will throw a NullPointerException if autoboxed to a boolean. </p>\n+     *\n+     * <pre>\n+     *   // N.B. case is not significant\n+     *   BooleanUtils.toBooleanObject(null)    = null\n+     *   BooleanUtils.toBooleanObject(\"true\")  = Boolean.TRUE\n+     *   BooleanUtils.toBooleanObject(\"T\")     = Boolean.TRUE // i.e. T[RUE]\n+     *   BooleanUtils.toBooleanObject(\"false\") = Boolean.FALSE\n+     *   BooleanUtils.toBooleanObject(\"f\")     = Boolean.FALSE // i.e. f[alse]\n+     *   BooleanUtils.toBooleanObject(\"No\")    = Boolean.FALSE\n+     *   BooleanUtils.toBooleanObject(\"n\")     = Boolean.FALSE // i.e. n[o]\n+     *   BooleanUtils.toBooleanObject(\"on\")    = Boolean.TRUE\n+     *   BooleanUtils.toBooleanObject(\"ON\")    = Boolean.TRUE\n+     *   BooleanUtils.toBooleanObject(\"off\")   = Boolean.FALSE\n+     *   BooleanUtils.toBooleanObject(\"oFf\")   = Boolean.FALSE\n+     *   BooleanUtils.toBooleanObject(\"yes\")   = Boolean.TRUE\n+     *   BooleanUtils.toBooleanObject(\"Y\")     = Boolean.TRUE // i.e. Y[ES]\n+     *   BooleanUtils.toBooleanObject(\"blue\")  = null\n+     *   BooleanUtils.toBooleanObject(\"true \") = null // trailing space (too long)\n+     *   BooleanUtils.toBooleanObject(\"ono\")   = null // does not match on or no\n+     * </pre>\n+     *\n+     * @param str  the String to check; upper and lower case are treated as the same\n+     * @return the Boolean value of the string, {@code null} if no match or {@code null} input\n+     */\n+    @SuppressWarnings(\"all\")\n+    public static Boolean toBooleanObject(String str) {\n+        if (str == \"true\") {\n+            return Boolean.TRUE;\n+        } else if (str == null) {\n+            return null;\n+        } else {\n+            char ch0;\n+            char ch1;\n+            char ch2;\n+            char ch3;\n+            switch(str.length()) {\n+                case 1:\n+                    ch0 = str.charAt(0);\n+                    if (ch0 == 'y' || ch0 == 'Y' || ch0 == 't' || ch0 == 'T') {\n+                        return Boolean.TRUE;\n+                    }\n+\n+                    if (ch0 != 'n' && ch0 != 'N' && ch0 != 'f' && ch0 != 'F') {\n+                        break;\n+                    }\n+\n+                    return Boolean.FALSE;\n+                case 2:\n+                    ch0 = str.charAt(0);\n+                    ch1 = str.charAt(1);\n+                    if ((ch0 == 'o' || ch0 == 'O') && (ch1 == 'n' || ch1 == 'N')) {\n+                        return Boolean.TRUE;\n+                    }\n+\n+                    if ((ch0 == 'n' || ch0 == 'N') && (ch1 == 'o' || ch1 == 'O')) {\n+                        return Boolean.FALSE;\n+                    }\n+                    break;\n+                case 3:\n+                    ch0 = str.charAt(0);\n+                    ch1 = str.charAt(1);\n+                    ch2 = str.charAt(2);\n+                    if ((ch0 == 'y' || ch0 == 'Y') && (ch1 == 'e' || ch1 == 'E') && (ch2 == 's' || ch2 == 'S')) {\n+                        return Boolean.TRUE;\n+                    }\n+\n+                    if ((ch0 == 'o' || ch0 == 'O') && (ch1 == 'f' || ch1 == 'F') && (ch2 == 'f' || ch2 == 'F')) {\n+                        return Boolean.FALSE;\n+                    }\n+                    break;\n+                case 4:\n+                    ch0 = str.charAt(0);\n+                    ch1 = str.charAt(1);\n+                    ch2 = str.charAt(2);\n+                    ch3 = str.charAt(3);\n+                    if ((ch0 == 't' || ch0 == 'T') && (ch1 == 'r' || ch1 == 'R') && (ch2 == 'u' || ch2 == 'U') && (ch3 == 'e' || ch3 == 'E')) {\n+                        return Boolean.TRUE;\n+                    }\n+                    break;\n+                case 5:\n+                    ch0 = str.charAt(0);\n+                    ch1 = str.charAt(1);\n+                    ch2 = str.charAt(2);\n+                    ch3 = str.charAt(3);\n+                    char ch4 = str.charAt(4);\n+                    if ((ch0 == 'f' || ch0 == 'F') && (ch1 == 'a' || ch1 == 'A') && (ch2 == 'l' || ch2 == 'L') && (ch3 == 's' || ch3 == 'S') && (ch4 == 'e' || ch4 == 'E')) {\n+                        return Boolean.FALSE;\n+                    }\n+            }\n+\n+            return null;\n+        }\n+    }\n+\n+    //   end", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef34e5e4b5698ec98027d42fb3060e7a239ea087"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MDcyOTg1OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwMzoxMToyN1rOGjh-mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwMzoxMToyN1rOGjh-mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTkxMDA0Mw==", "bodyText": "\u8fd9\u4e9b\u4ee3\u7801\u662f\u4ece\u54ea\u91cc\u62f7\u8d1d\u7684\uff0c\u8fd8\u662f\u81ea\u5df1\u5199\u7684\u5462\uff1f \u5982\u679c\u662f\u62f7\u8d1d\u8fc7\u6765\u7684\u6ce8\u610f\u4e00\u4e0blicense", "url": "https://github.com/alibaba/nacos/pull/3031#discussion_r439910043", "createdAt": "2020-06-15T03:11:27Z", "author": {"login": "yanlinly"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/StringUtils.java", "diffHunk": "@@ -299,5 +299,84 @@ static boolean regionMatches(final CharSequence cs, final boolean ignoreCase, fi\n         return true;\n     }\n \n-    //    end\n+    /**\n+     * <p>Compares two CharSequences, returning {@code true} if they represent\n+     * equal sequences of characters, ignoring case.</p>\n+     *\n+     * <p>{@code null}s are handled without exceptions. Two {@code null}\n+     * references are considered equal. Comparison is case insensitive.</p>\n+     *\n+     * <pre>\n+     * StringUtils.equalsIgnoreCase(null, null)   = true\n+     * StringUtils.equalsIgnoreCase(null, \"abc\")  = false\n+     * StringUtils.equalsIgnoreCase(\"abc\", null)  = false\n+     * StringUtils.equalsIgnoreCase(\"abc\", \"abc\") = true\n+     * StringUtils.equalsIgnoreCase(\"abc\", \"ABC\") = true\n+     * </pre>\n+     *\n+     * @param str1  the first CharSequence, may be null\n+     * @param str2  the second CharSequence, may be null\n+     * @return {@code true} if the CharSequence are equal, case insensitive, or\n+     *  both {@code null}\n+     * @since 3.0 Changed signature from equalsIgnoreCase(String, String) to equalsIgnoreCase(CharSequence, CharSequence)\n+     */\n+    public static boolean equalsIgnoreCase(final CharSequence str1, final CharSequence str2) {\n+        if (str1 == null || str2 == null) {\n+            return str1 == str2;\n+        } else if (str1 == str2) {\n+            return true;\n+        } else if (str1.length() != str2.length()) {\n+            return false;\n+        } else {\n+            return CharSequenceUtils.regionMatches(str1, true, 0, str2, 0, str1.length());\n+        }\n+    }\n+\n+    static class CharSequenceUtils {\n+\n+        /**\n+         * Green implementation of regionMatches.\n+         *\n+         * @param cs the {@code CharSequence} to be processed\n+         * @param ignoreCase whether or not to be case insensitive\n+         * @param thisStart the index to start on the {@code cs} CharSequence\n+         * @param substring the {@code CharSequence} to be looked for\n+         * @param start the index to start on the {@code substring} CharSequence\n+         * @param length character length of the region\n+         * @return whether the region matched\n+         */\n+        static boolean regionMatches(final CharSequence cs, final boolean ignoreCase, final int thisStart,\n+                                     final CharSequence substring, final int start, final int length)    {\n+            if (cs instanceof String && substring instanceof String) {\n+                return ((String) cs).regionMatches(ignoreCase, thisStart, (String) substring, start, length);\n+            }\n+            int index1 = thisStart;\n+            int index2 = start;\n+            int tmpLen = length;\n+\n+            while (tmpLen-- > 0) {\n+                final char c1 = cs.charAt(index1++);\n+                final char c2 = substring.charAt(index2++);\n+\n+                if (c1 == c2) {\n+                    continue;\n+                }\n+\n+                if (!ignoreCase) {\n+                    return false;\n+                }\n+\n+                // The same check as in String.regionMatches():\n+                if (Character.toUpperCase(c1) != Character.toUpperCase(c2)\n+                    && Character.toLowerCase(c1) != Character.toLowerCase(c2)) {\n+                    return false;\n+                }\n+            }\n+\n+            return true;\n+        }\n+\n+    }\n+\n+    //   end", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ef34e5e4b5698ec98027d42fb3060e7a239ea087"}, "originalPosition": 95}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4401, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}