{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2ODU0MjIx", "number": 3118, "title": "[#3117]Just Sink the Notify implementation into common module and optimize some parts", "bodyText": "Please do not create a Pull Request without creating an issue first.\nWhat is the purpose of the change\nSink the Notify implementation into common module and optimize some parts\nBrief changelog\nSink the Notify implementation into common module and optimize some parts.\nAnd this pr is one part of another bigger pr.The link is #2859.\nVerifying this change\nXXXX\nFollow this checklist to help us incorporate your contribution quickly and easily:\n\n Make sure there is a Github issue filed for the change (usually before you start working on it). Trivial changes like typos do not require a Github issue. Your pull request should address just this issue, without pulling in other changes - one PR resolves one issue.\n Format the pull request title like [ISSUE #123] Fix UnknownException when host config not exist. Each commit in the pull request should have a meaningful subject line and body.\n Write a pull request description that is detailed enough to understand what the pull request does, how, and why.\n Write necessary unit-test to verify your logic correction, more mock a little better when cross module dependency exist. If the new feature or significant change is committed, please remember to add integration-test in test module.\n Run mvn -B clean package apache-rat:check findbugs:findbugs -Dmaven.test.skip=true to make sure basic checks pass. Run mvn clean install -DskipITs to make sure unit-test pass. Run mvn clean test-compile failsafe:integration-test  to make sure integration-test pass.", "createdAt": "2020-06-19T02:34:56Z", "url": "https://github.com/alibaba/nacos/pull/3118", "merged": true, "mergeCommit": {"oid": "1dc29f2d520dc9cb3aab416ffebe83db05dd3fcf"}, "closed": true, "closedAt": "2020-06-21T17:10:57Z", "author": {"login": "zongtanghu"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsprxUAH2gAyNDM2ODU0MjIxOmI4NGNmMDJiMDlhMGUxNTNlMTRmMDRlYmQ3M2FhNGM1ODBmMWQxMjU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABctnbiZgFqTQzNDU2OTE2OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "b84cf02b09a0e153e14f04ebd73aa4c580f1d125", "author": {"user": {"login": "zongtanghu", "name": "Hu Zongtang"}}, "url": "https://github.com/alibaba/nacos/commit/b84cf02b09a0e153e14f04ebd73aa4c580f1d125", "committedDate": "2020-06-19T02:32:40Z", "message": "[#3117]Sink the Notify implementation into common module and optimize some parts."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99a74153d5c9d9b7a14585dd15f89283d2d7d723", "author": {"user": {"login": "zongtanghu", "name": "Hu Zongtang"}}, "url": "https://github.com/alibaba/nacos/commit/99a74153d5c9d9b7a14585dd15f89283d2d7d723", "committedDate": "2020-06-19T03:13:15Z", "message": "[#3117]fix typo and reformat code styles."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNzc4NDcx", "url": "https://github.com/alibaba/nacos/pull/3118#pullrequestreview-433778471", "createdAt": "2020-06-19T03:24:25Z", "commit": {"oid": "99a74153d5c9d9b7a14585dd15f89283d2d7d723"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMzoyNDoyNlrOGmG1Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMzo1MzoyOFrOGmHNGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYxMDk2Ng==", "bodyText": "rename to remove maybe better\uff1f", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442610966", "createdAt": "2020-06-19T03:24:26Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/notify/DefaultPublisher.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.notify;\n+\n+import com.alibaba.nacos.common.notify.listener.Subscriber;\n+import com.alibaba.nacos.common.notify.listener.SmartSubscriber;\n+import com.alibaba.nacos.common.utils.ConcurrentHashSet;\n+import com.alibaba.nacos.common.utils.ThreadUtils;\n+import com.alibaba.nacos.common.utils.CollectionUtils;\n+import com.alibaba.nacos.common.utils.ClassUtils;\n+import com.alibaba.nacos.common.utils.Objects;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+\n+import static com.alibaba.nacos.common.notify.NotifyCenter.RING_BUFFER_SIZE;\n+\n+/**\n+ * The default event publisher implementation.\n+ *\n+ * <p>Internally, use {@link ArrayBlockingQueue <Event/>} as a message staging queue.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ * @author zongtanghu\n+ */\n+public class DefaultPublisher extends Thread implements EventPublisher {\n+    \n+    private static final Logger LOGGER = LoggerFactory.getLogger(NotifyCenter.class);\n+    \n+    private volatile boolean initialized = false;\n+    \n+    private volatile boolean shutdown = false;\n+    \n+    private Class<? extends Event> eventType;\n+    \n+    private final ConcurrentHashSet<Subscriber> subscribers = new ConcurrentHashSet<Subscriber>();\n+    \n+    private int queueMaxSize = -1;\n+    \n+    private BlockingQueue<Event> queue;\n+    \n+    private volatile Long lastEventSequence = -1L;\n+    \n+    private final AtomicReferenceFieldUpdater<DefaultPublisher, Long> updater = AtomicReferenceFieldUpdater\n+            .newUpdater(DefaultPublisher.class, Long.class, \"lastEventSequence\");\n+    \n+    @Override\n+    public void init(Class<? extends Event> type, int bufferSize) {\n+        setDaemon(true);\n+        setName(\"nacos.publisher-\" + type.getName());\n+        this.eventType = type;\n+        this.queueMaxSize = bufferSize;\n+        this.queue = new ArrayBlockingQueue<Event>(bufferSize);\n+        start();\n+    }\n+    \n+    public ConcurrentHashSet<Subscriber> getSubscribers() {\n+        return subscribers;\n+    }\n+    \n+    @Override\n+    public synchronized void start() {\n+        if (!initialized) {\n+            // start just called once\n+            super.start();\n+            if (queueMaxSize == -1) {\n+                queueMaxSize = RING_BUFFER_SIZE;\n+            }\n+            initialized = true;\n+        }\n+    }\n+    \n+    public long currentEventSize() {\n+        return queue.size();\n+    }\n+    \n+    @Override\n+    public void run() {\n+        openEventHandler();\n+    }\n+    \n+    void openEventHandler() {\n+        try {\n+            // To ensure that messages are not lost, enable EventHandler when\n+            // waiting for the first Subscriber to register\n+            for (; ; ) {\n+                if (shutdown || hasSubscriber()) {\n+                    break;\n+                }\n+                ThreadUtils.sleep(1000L);\n+            }\n+            \n+            for (; ; ) {\n+                if (shutdown) {\n+                    break;\n+                }\n+                final Event event = queue.take();\n+                receiveEvent(event);\n+                updater.compareAndSet(this, lastEventSequence, Math.max(lastEventSequence, event.sequence()));\n+            }\n+        } catch (Throwable ex) {\n+            LOGGER.error(\"Event listener exception : {}\", ex);\n+        }\n+    }\n+    \n+    private boolean hasSubscriber() {\n+        return CollectionUtils.isNotEmpty(subscribers) || CollectionUtils.isNotEmpty(SMART_SUBSCRIBERS);\n+    }\n+    \n+    @Override\n+    public void addSubscriber(Subscriber subscriber) {\n+        subscribers.add(subscriber);\n+    }\n+    \n+    @Override\n+    public void unSubscriber(Subscriber subscriber) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a74153d5c9d9b7a14585dd15f89283d2d7d723"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYxNDk1Mw==", "bodyText": "set final and change name to sequence?", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442614953", "createdAt": "2020-06-19T03:42:49Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/notify/Event.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.notify;\n+\n+import java.io.Serializable;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * An abstract class for event.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ * @author zongtanghu\n+ */\n+@SuppressWarnings(\"all\")\n+public abstract class Event implements Serializable {\n+    \n+    private static final AtomicLong SEQUENCE = new AtomicLong(0);\n+    \n+    private long no = SEQUENCE.getAndIncrement();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a74153d5c9d9b7a14585dd15f89283d2d7d723"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYxNTE2NQ==", "bodyText": "If no special situation, please do not use SuppressWarnings", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442615165", "createdAt": "2020-06-19T03:43:54Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/notify/Event.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.notify;\n+\n+import java.io.Serializable;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * An abstract class for event.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ * @author zongtanghu\n+ */\n+@SuppressWarnings(\"all\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a74153d5c9d9b7a14585dd15f89283d2d7d723"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYxNzAwNw==", "bodyText": "Is there checkstyle warning miss doc\uff1f", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442617007", "createdAt": "2020-06-19T03:53:01Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/ClassUtils.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.utils;\n+\n+/**\n+ * Utils for Class.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ */\n+@SuppressWarnings(\"all\")\n+public final class ClassUtils {\n+    \n+    public static Class findClassByName(String className) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a74153d5c9d9b7a14585dd15f89283d2d7d723"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYxNzA5NQ==", "bodyText": "remove unused comments", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442617095", "createdAt": "2020-06-19T03:53:24Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/BiFunction.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.utils;\n+\n+/**\n+ * Represents a function that accepts two arguments and produces a result.\n+ *\n+ * <p>This is a <a href=\"package-summary.html\">functional interface</a>\n+ * whose functional method is {@link #apply(Object, Object)}.\n+ *\n+ * @author zongtanghu\n+ *\n+ */\n+public interface BiFunction<T, U, R> {\n+\n+    //    The following utility functions are extracted from <link>org.apache.commons.lang3</link>\n+    //    start\n+\n+    /**\n+     * Applies this function to the given arguments.\n+     *\n+     * @param t the first function argument\n+     * @param u the second function argument\n+     * @return the function result\n+     */\n+    R apply(T t, U u);\n+\n+    //    end", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a74153d5c9d9b7a14585dd15f89283d2d7d723"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYxNzExMg==", "bodyText": "remove unused comments", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442617112", "createdAt": "2020-06-19T03:53:28Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/BiFunction.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.utils;\n+\n+/**\n+ * Represents a function that accepts two arguments and produces a result.\n+ *\n+ * <p>This is a <a href=\"package-summary.html\">functional interface</a>\n+ * whose functional method is {@link #apply(Object, Object)}.\n+ *\n+ * @author zongtanghu\n+ *\n+ */\n+public interface BiFunction<T, U, R> {\n+\n+    //    The following utility functions are extracted from <link>org.apache.commons.lang3</link>\n+    //    start", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a74153d5c9d9b7a14585dd15f89283d2d7d723"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNzcxMjY3", "url": "https://github.com/alibaba/nacos/pull/3118#pullrequestreview-433771267", "createdAt": "2020-06-19T02:56:31Z", "commit": {"oid": "b84cf02b09a0e153e14f04ebd73aa4c580f1d125"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMjo1NjozMVrOGmGcXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwMzowNzo0OVrOGmGmuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYwNDYzNw==", "bodyText": "\u8fd9\u91cc\u53ef\u4ee5\u76f4\u63a5\u629b\u5f02\u5e38\u51fa\u53bb\u4e86\uff0c\u4f60\u8fd4\u56denull\u7b49\u7b49\u4e0b\u9762\u4f1a\u6709NPE", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442604637", "createdAt": "2020-06-19T02:56:31Z", "author": {"login": "chuntaojun"}, "path": "common/src/main/java/com/alibaba/nacos/common/notify/NotifyCenter.java", "diffHunk": "@@ -0,0 +1,291 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.notify;\n+\n+import com.alibaba.nacos.common.JustForTest;\n+import com.alibaba.nacos.common.notify.listener.Subscriber;\n+import com.alibaba.nacos.common.notify.listener.SmartSubscriber;\n+import com.alibaba.nacos.common.utils.BiFunction;\n+import com.alibaba.nacos.common.utils.ClassUtils;\n+import com.alibaba.nacos.common.utils.MapUtils;\n+import com.alibaba.nacos.common.utils.ThreadUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import java.util.Set;\n+import java.util.NoSuchElementException;\n+import java.util.Iterator;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ * @author zongtanghu\n+ */\n+@SuppressWarnings(\"all\")\n+public class NotifyCenter {\n+    \n+    private static final Logger LOGGER = LoggerFactory.getLogger(NotifyCenter.class);\n+    \n+    public static int RING_BUFFER_SIZE = 16384;\n+    \n+    public static int SHARE_BUFFER_SIZE = 1024;\n+    \n+    private static final AtomicBoolean CLOSED = new AtomicBoolean(false);\n+    \n+    private static BiFunction<Class<? extends Event>, Integer, EventPublisher> BUILD_FACTORY = null;\n+    \n+    private static final NotifyCenter INSTANCE = new NotifyCenter();\n+    \n+    private EventPublisher sharePublisher;\n+    \n+    private static Class<? extends EventPublisher> clazz = null;\n+    \n+    /**\n+     * Publisher management container\n+     */\n+    private final Map<String, EventPublisher> publisherMap = new ConcurrentHashMap<String, EventPublisher>(16);\n+    \n+    static {\n+        // Internal ArrayBlockingQueue buffer size. For applications with high write throughput,\n+        // this value needs to be increased appropriately. default value is 16384\n+        String ringBufferSizeProperty = \"nacos.core.notify.ring-buffer-size\";\n+        RING_BUFFER_SIZE = Integer.getInteger(ringBufferSizeProperty, 16384);\n+        \n+        // The size of the public publisher's message staging queue buffer\n+        String shareBufferSizeProperty = \"nacos.core.notify.share-buffer-size\";\n+        SHARE_BUFFER_SIZE = Integer.getInteger(shareBufferSizeProperty, 1024);\n+        \n+        final ServiceLoader<EventPublisher> loader = ServiceLoader.load(EventPublisher.class);\n+        Iterator<EventPublisher> iterator = loader.iterator();\n+        \n+        if (iterator.hasNext()) {\n+            clazz = iterator.next().getClass();\n+        } else {\n+            clazz = DefaultPublisher.class;\n+        }\n+        \n+        BUILD_FACTORY = new BiFunction<Class<? extends Event>, Integer, EventPublisher>() {\n+            \n+            @Override\n+            public EventPublisher apply(Class<? extends Event> cls, Integer buffer) {\n+                try {\n+                    EventPublisher publisher = clazz.newInstance();\n+                    publisher.init(cls, buffer);\n+                    return publisher;\n+                } catch (Exception ex) {\n+                    LOGGER.error(\"Service class newInstance has error : {}\", ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b84cf02b09a0e153e14f04ebd73aa4c580f1d125"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYwNzI4OA==", "bodyText": "\u629b\u51faNacosRuntimeException\u5427", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442607288", "createdAt": "2020-06-19T03:07:49Z", "author": {"login": "chuntaojun"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/ClassUtils.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.utils;\n+\n+/**\n+ * Utils for Class.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ */\n+@SuppressWarnings(\"all\")\n+public final class ClassUtils {\n+    \n+    public static Class findClassByName(String className) {\n+        try {\n+            return Class.forName(className);\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"this class name not found\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b84cf02b09a0e153e14f04ebd73aa4c580f1d125"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNzg4MjA0", "url": "https://github.com/alibaba/nacos/pull/3118#pullrequestreview-433788204", "createdAt": "2020-06-19T04:03:19Z", "commit": {"oid": "99a74153d5c9d9b7a14585dd15f89283d2d7d723"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNDowMzoxOVrOGmHVNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNDowMzoxOVrOGmHVNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjYxOTE4OQ==", "bodyText": "\u6807\u6ce8\u4e0b\uff0c\u975e\u7ebf\u7a0b\u5b89\u5168\u7684\u64cd\u4f5c", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442619189", "createdAt": "2020-06-19T04:03:19Z", "author": {"login": "chuntaojun"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/MapUtils.java", "diffHunk": "@@ -124,4 +124,31 @@ public static void putIfValNoEmpty(Map target, Object key, Object value) {\n         }\n     }\n     \n+    /**\n+     * ComputeIfAbsent lazy load.\n+     *\n+     * @param target target Map data.\n+     * @param key map key.\n+     * @param mappingFunction funtion which is need to be executed.\n+     * @param param1 function's parameter value1.\n+     * @param param2 function's parameter value1.\n+     * @return\n+     */\n+    public static Object computeIfAbsent(Map target, Object key, BiFunction mappingFunction, Object param1,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a74153d5c9d9b7a14585dd15f89283d2d7d723"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5f7e6c2315ac3017b6e545eeb2b5c728f3efe5e", "author": {"user": {"login": "zongtanghu", "name": "Hu Zongtang"}}, "url": "https://github.com/alibaba/nacos/commit/c5f7e6c2315ac3017b6e545eeb2b5c728f3efe5e", "committedDate": "2020-06-19T06:33:04Z", "message": "[#3117]fix typo and reformat code styles."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0MDMyNTgy", "url": "https://github.com/alibaba/nacos/pull/3118#pullrequestreview-434032582", "createdAt": "2020-06-19T12:21:09Z", "commit": {"oid": "c5f7e6c2315ac3017b6e545eeb2b5c728f3efe5e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMjoyMTowOVrOGmS10w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMjozMTo0MFrOGmTIww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwNzc2Mw==", "bodyText": "I know you want to figure out some method may be not thread safe. But I want to know whether is project do like this? I think write some discription in Javadoc is enough.", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442807763", "createdAt": "2020-06-19T12:21:09Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/NotThreadSafe.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Annotation that marks a method as not thread safe.\n+ *\n+ * @author zongtanghu\n+ */\n+@Documented\n+@Target({ElementType.TYPE, ElementType.METHOD})\n+@Retention(RetentionPolicy.SOURCE)\n+public @interface NotThreadSafe {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5f7e6c2315ac3017b6e545eeb2b5c728f3efe5e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwOTMyNA==", "bodyText": "I mean that  no-->sequence  the constant still is SEQUENCE.", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442809324", "createdAt": "2020-06-19T12:24:40Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/notify/Event.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.notify;\n+\n+import java.io.Serializable;\n+import java.util.concurrent.atomic.AtomicLong;\n+\n+/**\n+ * An abstract class for event.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ * @author zongtanghu\n+ */\n+@SuppressWarnings({\"PMD.AbstractClassShouldStartWithAbstractNamingRule\", \"PMD.ConstantFieldShouldBeUpperCaseRule\"})\n+public abstract class Event implements Serializable {\n+    \n+    private static final AtomicLong sequence = new AtomicLong(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5f7e6c2315ac3017b6e545eeb2b5c728f3efe5e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMDM0NQ==", "bodyText": "Why you add this SuppressWarnings", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442810345", "createdAt": "2020-06-19T12:26:46Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/notify/NotifyCenter.java", "diffHunk": "@@ -0,0 +1,297 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.notify;\n+\n+import com.alibaba.nacos.api.exception.NacosException;\n+import com.alibaba.nacos.common.JustForTest;\n+import com.alibaba.nacos.common.notify.listener.Subscriber;\n+import com.alibaba.nacos.common.notify.listener.SmartSubscriber;\n+import com.alibaba.nacos.common.utils.BiFunction;\n+import com.alibaba.nacos.common.utils.ClassUtils;\n+import com.alibaba.nacos.common.utils.MapUtils;\n+import com.alibaba.nacos.common.utils.ThreadUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import java.util.Set;\n+import java.util.NoSuchElementException;\n+import java.util.Iterator;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static com.alibaba.nacos.api.exception.NacosException.SERVER_ERROR;\n+\n+/**\n+ * Unified Event Notify Center.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ * @author zongtanghu\n+ */\n+@SuppressWarnings(\"PMD.ConstantFieldShouldBeUpperCaseRule\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5f7e6c2315ac3017b6e545eeb2b5c728f3efe5e"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMDU0Mw==", "bodyText": "No constants variable, use lower.", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442810543", "createdAt": "2020-06-19T12:27:13Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/notify/NotifyCenter.java", "diffHunk": "@@ -0,0 +1,297 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.notify;\n+\n+import com.alibaba.nacos.api.exception.NacosException;\n+import com.alibaba.nacos.common.JustForTest;\n+import com.alibaba.nacos.common.notify.listener.Subscriber;\n+import com.alibaba.nacos.common.notify.listener.SmartSubscriber;\n+import com.alibaba.nacos.common.utils.BiFunction;\n+import com.alibaba.nacos.common.utils.ClassUtils;\n+import com.alibaba.nacos.common.utils.MapUtils;\n+import com.alibaba.nacos.common.utils.ThreadUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import java.util.Set;\n+import java.util.NoSuchElementException;\n+import java.util.Iterator;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static com.alibaba.nacos.api.exception.NacosException.SERVER_ERROR;\n+\n+/**\n+ * Unified Event Notify Center.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ * @author zongtanghu\n+ */\n+@SuppressWarnings(\"PMD.ConstantFieldShouldBeUpperCaseRule\")\n+public class NotifyCenter {\n+    \n+    private static final Logger LOGGER = LoggerFactory.getLogger(NotifyCenter.class);\n+    \n+    public static int RING_BUFFER_SIZE = 16384;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5f7e6c2315ac3017b6e545eeb2b5c728f3efe5e"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMDU4MA==", "bodyText": "No constants variable, use lower.", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442810580", "createdAt": "2020-06-19T12:27:17Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/notify/NotifyCenter.java", "diffHunk": "@@ -0,0 +1,297 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.notify;\n+\n+import com.alibaba.nacos.api.exception.NacosException;\n+import com.alibaba.nacos.common.JustForTest;\n+import com.alibaba.nacos.common.notify.listener.Subscriber;\n+import com.alibaba.nacos.common.notify.listener.SmartSubscriber;\n+import com.alibaba.nacos.common.utils.BiFunction;\n+import com.alibaba.nacos.common.utils.ClassUtils;\n+import com.alibaba.nacos.common.utils.MapUtils;\n+import com.alibaba.nacos.common.utils.ThreadUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import java.util.Set;\n+import java.util.NoSuchElementException;\n+import java.util.Iterator;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static com.alibaba.nacos.api.exception.NacosException.SERVER_ERROR;\n+\n+/**\n+ * Unified Event Notify Center.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ * @author zongtanghu\n+ */\n+@SuppressWarnings(\"PMD.ConstantFieldShouldBeUpperCaseRule\")\n+public class NotifyCenter {\n+    \n+    private static final Logger LOGGER = LoggerFactory.getLogger(NotifyCenter.class);\n+    \n+    public static int RING_BUFFER_SIZE = 16384;\n+    \n+    public static int SHARE_BUFFER_SIZE = 1024;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5f7e6c2315ac3017b6e545eeb2b5c728f3efe5e"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMTIzNQ==", "bodyText": "No constants variable, use lower.", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442811235", "createdAt": "2020-06-19T12:28:39Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/notify/NotifyCenter.java", "diffHunk": "@@ -0,0 +1,297 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.notify;\n+\n+import com.alibaba.nacos.api.exception.NacosException;\n+import com.alibaba.nacos.common.JustForTest;\n+import com.alibaba.nacos.common.notify.listener.Subscriber;\n+import com.alibaba.nacos.common.notify.listener.SmartSubscriber;\n+import com.alibaba.nacos.common.utils.BiFunction;\n+import com.alibaba.nacos.common.utils.ClassUtils;\n+import com.alibaba.nacos.common.utils.MapUtils;\n+import com.alibaba.nacos.common.utils.ThreadUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import java.util.Set;\n+import java.util.NoSuchElementException;\n+import java.util.Iterator;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static com.alibaba.nacos.api.exception.NacosException.SERVER_ERROR;\n+\n+/**\n+ * Unified Event Notify Center.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ * @author zongtanghu\n+ */\n+@SuppressWarnings(\"PMD.ConstantFieldShouldBeUpperCaseRule\")\n+public class NotifyCenter {\n+    \n+    private static final Logger LOGGER = LoggerFactory.getLogger(NotifyCenter.class);\n+    \n+    public static int RING_BUFFER_SIZE = 16384;\n+    \n+    public static int SHARE_BUFFER_SIZE = 1024;\n+    \n+    private static final AtomicBoolean CLOSED = new AtomicBoolean(false);\n+    \n+    private static BiFunction<Class<? extends Event>, Integer, EventPublisher> BUILD_FACTORY = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5f7e6c2315ac3017b6e545eeb2b5c728f3efe5e"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMjI0Ng==", "bodyText": "Remove SuppressWarnings", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442812246", "createdAt": "2020-06-19T12:30:56Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/ClassUtils.java", "diffHunk": "@@ -0,0 +1,125 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.utils;\n+\n+import com.alibaba.nacos.api.exception.runtime.NacosRuntimeException;\n+\n+import static com.alibaba.nacos.api.exception.NacosException.SERVER_ERROR;\n+\n+\n+/**\n+ * Utils for Class.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ */\n+@SuppressWarnings(\"all\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5f7e6c2315ac3017b6e545eeb2b5c728f3efe5e"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMjQ2Mg==", "bodyText": "Remove SuppressWarnings.", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442812462", "createdAt": "2020-06-19T12:31:21Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/utils/BiFunction.java", "diffHunk": "@@ -0,0 +1,42 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.utils;\n+\n+import com.alibaba.nacos.api.exception.NacosException;\n+\n+/**\n+ * Represents a function that accepts two arguments and produces a result.\n+ * The following utility functions are extracted from org.apache.commons.lang3.\n+ *\n+ * <p>This is a <a href=\"package-summary.html\">functional interface</a>\n+ * whose functional method is {@link #apply(Object, Object)}.\n+ *\n+ * @author zongtanghu\n+ *\n+ */\n+@SuppressWarnings(\"PMD.AbstractMethodOrInterfaceMethodMustUseJavadocRule\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5f7e6c2315ac3017b6e545eeb2b5c728f3efe5e"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgxMjYxMQ==", "bodyText": "remove SuppressWarnings", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r442812611", "createdAt": "2020-06-19T12:31:40Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/notify/listener/Subscriber.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.notify.listener;\n+\n+import com.alibaba.nacos.common.notify.Event;\n+\n+import java.util.concurrent.Executor;\n+\n+/**\n+ * An abstract subscriber class for subscriber interface.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ * @author zongtanghu\n+ */\n+@SuppressWarnings(\"all\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c5f7e6c2315ac3017b6e545eeb2b5c728f3efe5e"}, "originalPosition": 29}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0517324b26bf1b1d7eba85f6842dedc14af9d80c", "author": {"user": {"login": "zongtanghu", "name": "Hu Zongtang"}}, "url": "https://github.com/alibaba/nacos/commit/0517324b26bf1b1d7eba85f6842dedc14af9d80c", "committedDate": "2020-06-20T03:03:14Z", "message": "[#3118]fix typo and formate."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NDYzODEy", "url": "https://github.com/alibaba/nacos/pull/3118#pullrequestreview-434463812", "createdAt": "2020-06-21T01:45:55Z", "commit": {"oid": "0517324b26bf1b1d7eba85f6842dedc14af9d80c"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwMTo0NTo1NVrOGmpJlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwMTo0NTo1NVrOGmpJlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3MzI2OA==", "bodyText": "OK", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r443173268", "createdAt": "2020-06-21T01:45:55Z", "author": {"login": "KomachiSion"}, "path": "common/src/main/java/com/alibaba/nacos/common/NotThreadSafe.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+/**\n+ * Annotation that marks a method as not thread safe.\n+ *\n+ * @author zongtanghu\n+ */\n+@Documented\n+@Target({ElementType.TYPE, ElementType.METHOD})\n+@Retention(RetentionPolicy.SOURCE)\n+public @interface NotThreadSafe {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjgwNzc2Mw=="}, "originalCommit": {"oid": "c5f7e6c2315ac3017b6e545eeb2b5c728f3efe5e"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NDY0MTY2", "url": "https://github.com/alibaba/nacos/pull/3118#pullrequestreview-434464166", "createdAt": "2020-06-21T01:59:16Z", "commit": {"oid": "0517324b26bf1b1d7eba85f6842dedc14af9d80c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwMTo1OToxNlrOGmpLlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwMTo1OToxNlrOGmpLlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3Mzc4Mw==", "bodyText": "Not being empty in the smartSubscribers collection does not imply that there are listeners interested in the event", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r443173783", "createdAt": "2020-06-21T01:59:16Z", "author": {"login": "chuntaojun"}, "path": "common/src/main/java/com/alibaba/nacos/common/notify/DefaultPublisher.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.notify;\n+\n+import com.alibaba.nacos.common.notify.listener.Subscriber;\n+import com.alibaba.nacos.common.notify.listener.SmartSubscriber;\n+import com.alibaba.nacos.common.utils.ConcurrentHashSet;\n+import com.alibaba.nacos.common.utils.ThreadUtils;\n+import com.alibaba.nacos.common.utils.CollectionUtils;\n+import com.alibaba.nacos.common.utils.ClassUtils;\n+import com.alibaba.nacos.common.utils.Objects;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.concurrent.ArrayBlockingQueue;\n+import java.util.concurrent.BlockingQueue;\n+import java.util.concurrent.Executor;\n+import java.util.concurrent.atomic.AtomicReferenceFieldUpdater;\n+\n+import static com.alibaba.nacos.common.notify.NotifyCenter.ringBufferSize;\n+\n+/**\n+ * The default event publisher implementation.\n+ *\n+ * <p>Internally, use {@link ArrayBlockingQueue <Event/>} as a message staging queue.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ * @author zongtanghu\n+ */\n+public class DefaultPublisher extends Thread implements EventPublisher {\n+    \n+    private static final Logger LOGGER = LoggerFactory.getLogger(NotifyCenter.class);\n+    \n+    private volatile boolean initialized = false;\n+    \n+    private volatile boolean shutdown = false;\n+    \n+    private Class<? extends Event> eventType;\n+    \n+    private final ConcurrentHashSet<Subscriber> subscribers = new ConcurrentHashSet<Subscriber>();\n+    \n+    private int queueMaxSize = -1;\n+    \n+    private BlockingQueue<Event> queue;\n+    \n+    private volatile Long lastEventSequence = -1L;\n+    \n+    private final AtomicReferenceFieldUpdater<DefaultPublisher, Long> updater = AtomicReferenceFieldUpdater\n+            .newUpdater(DefaultPublisher.class, Long.class, \"lastEventSequence\");\n+    \n+    @Override\n+    public void init(Class<? extends Event> type, int bufferSize) {\n+        setDaemon(true);\n+        setName(\"nacos.publisher-\" + type.getName());\n+        this.eventType = type;\n+        this.queueMaxSize = bufferSize;\n+        this.queue = new ArrayBlockingQueue<Event>(bufferSize);\n+        start();\n+    }\n+    \n+    public ConcurrentHashSet<Subscriber> getSubscribers() {\n+        return subscribers;\n+    }\n+    \n+    @Override\n+    public synchronized void start() {\n+        if (!initialized) {\n+            // start just called once\n+            super.start();\n+            if (queueMaxSize == -1) {\n+                queueMaxSize = ringBufferSize ;\n+            }\n+            initialized = true;\n+        }\n+    }\n+    \n+    public long currentEventSize() {\n+        return queue.size();\n+    }\n+    \n+    @Override\n+    public void run() {\n+        openEventHandler();\n+    }\n+    \n+    void openEventHandler() {\n+        try {\n+            // To ensure that messages are not lost, enable EventHandler when\n+            // waiting for the first Subscriber to register\n+            for (; ; ) {\n+                if (shutdown || hasSubscriber()) {\n+                    break;\n+                }\n+                ThreadUtils.sleep(1000L);\n+            }\n+            \n+            for (; ; ) {\n+                if (shutdown) {\n+                    break;\n+                }\n+                final Event event = queue.take();\n+                receiveEvent(event);\n+                updater.compareAndSet(this, lastEventSequence, Math.max(lastEventSequence, event.sequence()));\n+            }\n+        } catch (Throwable ex) {\n+            LOGGER.error(\"Event listener exception : {}\", ex);\n+        }\n+    }\n+    \n+    private boolean hasSubscriber() {\n+        return CollectionUtils.isNotEmpty(subscribers) || CollectionUtils.isNotEmpty(SMART_SUBSCRIBERS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0517324b26bf1b1d7eba85f6842dedc14af9d80c"}, "originalPosition": 125}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85625cc8213094b8e46bc96455be6727ed72d583", "author": {"user": {"login": "zongtanghu", "name": "Hu Zongtang"}}, "url": "https://github.com/alibaba/nacos/commit/85625cc8213094b8e46bc96455be6727ed72d583", "committedDate": "2020-06-21T05:41:21Z", "message": "[#3118]Unify Subsciber and SmartSubscriber, and fix some typo and reformat."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NDk0OTcy", "url": "https://github.com/alibaba/nacos/pull/3118#pullrequestreview-434494972", "createdAt": "2020-06-21T11:56:20Z", "commit": {"oid": "85625cc8213094b8e46bc96455be6727ed72d583"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMTo1NjoyMFrOGmrhlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQxMTo1Njo1MlrOGmrhwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxMjE4Mw==", "bodyText": "delete SMART_SUBSCRIBERS", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r443212183", "createdAt": "2020-06-21T11:56:20Z", "author": {"login": "chuntaojun"}, "path": "common/src/main/java/com/alibaba/nacos/common/notify/NotifyCenter.java", "diffHunk": "@@ -0,0 +1,331 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.notify;\n+\n+import com.alibaba.nacos.api.exception.NacosException;\n+import com.alibaba.nacos.common.JustForTest;\n+import com.alibaba.nacos.common.notify.listener.Subscriber;\n+import com.alibaba.nacos.common.notify.listener.SmartSubscriber;\n+import com.alibaba.nacos.common.utils.BiFunction;\n+import com.alibaba.nacos.common.utils.ClassUtils;\n+import com.alibaba.nacos.common.utils.MapUtils;\n+import com.alibaba.nacos.common.utils.ThreadUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import java.util.Set;\n+import java.util.NoSuchElementException;\n+import java.util.Iterator;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static com.alibaba.nacos.api.exception.NacosException.SERVER_ERROR;\n+\n+/**\n+ * Unified Event Notify Center.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ * @author zongtanghu\n+ */\n+public class NotifyCenter {\n+    \n+    private static final Logger LOGGER = LoggerFactory.getLogger(NotifyCenter.class);\n+    \n+    public static int ringBufferSize = 16384;\n+    \n+    public static int shareBufferSize = 1024;\n+    \n+    private static final AtomicBoolean CLOSED = new AtomicBoolean(false);\n+    \n+    private static BiFunction<Class<? extends Event>, Integer, EventPublisher> publisherFactory = null;\n+    \n+    private static final NotifyCenter INSTANCE = new NotifyCenter();\n+    \n+    private EventPublisher sharePublisher;\n+    \n+    private static Class<? extends EventPublisher> clazz = null;\n+    \n+    /**\n+     * Publisher management container.\n+     */\n+    private final Map<String, EventPublisher> publisherMap = new ConcurrentHashMap<String, EventPublisher>(16);\n+    \n+    static {\n+        // Internal ArrayBlockingQueue buffer size. For applications with high write throughput,\n+        // this value needs to be increased appropriately. default value is 16384\n+        String ringBufferSizeProperty = \"nacos.core.notify.ring-buffer-size\";\n+        ringBufferSize = Integer.getInteger(ringBufferSizeProperty, 16384);\n+        \n+        // The size of the public publisher's message staging queue buffer\n+        String shareBufferSizeProperty = \"nacos.core.notify.share-buffer-size\";\n+        shareBufferSize = Integer.getInteger(shareBufferSizeProperty, 1024);\n+        \n+        final ServiceLoader<EventPublisher> loader = ServiceLoader.load(EventPublisher.class);\n+        Iterator<EventPublisher> iterator = loader.iterator();\n+        \n+        if (iterator.hasNext()) {\n+            clazz = iterator.next().getClass();\n+        } else {\n+            clazz = DefaultPublisher.class;\n+        }\n+        \n+        publisherFactory = new BiFunction<Class<? extends Event>, Integer, EventPublisher>() {\n+            \n+            @Override\n+            public EventPublisher apply(Class<? extends Event> cls, Integer buffer) throws NacosException {\n+                try {\n+                    EventPublisher publisher = clazz.newInstance();\n+                    publisher.init(cls, buffer);\n+                    return publisher;\n+                } catch (Throwable ex) {\n+                    LOGGER.error(\"Service class newInstance has error : {}\", ex);\n+                    throw new NacosException(SERVER_ERROR, ex);\n+                }\n+            }\n+        };\n+        \n+        try {\n+            INSTANCE.sharePublisher = publisherFactory.apply(SlowEvent.class, shareBufferSize);\n+        } catch (Throwable ex) {\n+            LOGGER.error(\"Service class newInstance has error : {}\", ex);\n+        }\n+        \n+        ThreadUtils.addShutdownHook(new Runnable() {\n+            @Override\n+            public void run() {\n+                shutdown();\n+            }\n+        });\n+    }\n+    \n+    @JustForTest\n+    public static Map<String, EventPublisher> getPublisherMap() {\n+        return INSTANCE.publisherMap;\n+    }\n+    \n+    @JustForTest\n+    public static EventPublisher getPublisher(Class<? extends Event> topic) {\n+        if (ClassUtils.isAssignableFrom(SlowEvent.class, topic)) {\n+            return INSTANCE.sharePublisher;\n+        }\n+        return INSTANCE.publisherMap.get(topic.getCanonicalName());\n+    }\n+    \n+    @JustForTest\n+    public static Set<SmartSubscriber> getSmartSubscribers() {\n+        return EventPublisher.SMART_SUBSCRIBERS;\n+    }\n+    \n+    @JustForTest\n+    public static EventPublisher getSharePublisher() {\n+        return INSTANCE.sharePublisher;\n+    }\n+    \n+    /**\n+     * Shutdown the serveral publisher instance which notifycenter has.\n+     */\n+    public static void shutdown() {\n+        if (!CLOSED.compareAndSet(false, true)) {\n+            return;\n+        }\n+        LOGGER.warn(\"[NotifyCenter] Start destroying Publisher\");\n+        \n+        for (Map.Entry<String, EventPublisher> entry : INSTANCE.publisherMap.entrySet()) {\n+            try {\n+                EventPublisher eventPublisher = entry.getValue();\n+                eventPublisher.shutdown();\n+            } catch (Throwable e) {\n+                LOGGER.error(\"[EventPublisher] shutdown has error : {}\", e);\n+            }\n+        }\n+        \n+        try {\n+            INSTANCE.sharePublisher.shutdown();\n+        } catch (Throwable e) {\n+            LOGGER.error(\"[SharePublisher] shutdown has error : {}\", e);\n+        }\n+        \n+        LOGGER.warn(\"[NotifyCenter] Destruction of the end\");\n+    }\n+    \n+    /**\n+     * Register a Subscriber. If the Publisher concerned by the Subscriber does not exist, then PublihserMap will\n+     * preempt a placeholder Publisher first.\n+     *\n+     * @param consumer subscriber\n+     * @param <T>      event type\n+     */\n+    public static <T> void registerSubscriber(final Subscriber consumer) throws NacosException {\n+        final Class<? extends Event> cls = consumer.subscribeType();\n+        // If you want to listen to multiple events, you do it separately,\n+        // based on subclass's subscribeTypes method return list, it can register to publisher.\n+        if (consumer instanceof SmartSubscriber) {\n+            EventPublisher.SMART_SUBSCRIBERS.add((SmartSubscriber) consumer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85625cc8213094b8e46bc96455be6727ed72d583"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzIxMjIyNA==", "bodyText": "delete SMART_SUBSCRIBERS", "url": "https://github.com/alibaba/nacos/pull/3118#discussion_r443212224", "createdAt": "2020-06-21T11:56:52Z", "author": {"login": "chuntaojun"}, "path": "common/src/main/java/com/alibaba/nacos/common/notify/NotifyCenter.java", "diffHunk": "@@ -0,0 +1,331 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package com.alibaba.nacos.common.notify;\n+\n+import com.alibaba.nacos.api.exception.NacosException;\n+import com.alibaba.nacos.common.JustForTest;\n+import com.alibaba.nacos.common.notify.listener.Subscriber;\n+import com.alibaba.nacos.common.notify.listener.SmartSubscriber;\n+import com.alibaba.nacos.common.utils.BiFunction;\n+import com.alibaba.nacos.common.utils.ClassUtils;\n+import com.alibaba.nacos.common.utils.MapUtils;\n+import com.alibaba.nacos.common.utils.ThreadUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Map;\n+import java.util.ServiceLoader;\n+import java.util.Set;\n+import java.util.NoSuchElementException;\n+import java.util.Iterator;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+import static com.alibaba.nacos.api.exception.NacosException.SERVER_ERROR;\n+\n+/**\n+ * Unified Event Notify Center.\n+ *\n+ * @author <a href=\"mailto:liaochuntao@live.com\">liaochuntao</a>\n+ * @author zongtanghu\n+ */\n+public class NotifyCenter {\n+    \n+    private static final Logger LOGGER = LoggerFactory.getLogger(NotifyCenter.class);\n+    \n+    public static int ringBufferSize = 16384;\n+    \n+    public static int shareBufferSize = 1024;\n+    \n+    private static final AtomicBoolean CLOSED = new AtomicBoolean(false);\n+    \n+    private static BiFunction<Class<? extends Event>, Integer, EventPublisher> publisherFactory = null;\n+    \n+    private static final NotifyCenter INSTANCE = new NotifyCenter();\n+    \n+    private EventPublisher sharePublisher;\n+    \n+    private static Class<? extends EventPublisher> clazz = null;\n+    \n+    /**\n+     * Publisher management container.\n+     */\n+    private final Map<String, EventPublisher> publisherMap = new ConcurrentHashMap<String, EventPublisher>(16);\n+    \n+    static {\n+        // Internal ArrayBlockingQueue buffer size. For applications with high write throughput,\n+        // this value needs to be increased appropriately. default value is 16384\n+        String ringBufferSizeProperty = \"nacos.core.notify.ring-buffer-size\";\n+        ringBufferSize = Integer.getInteger(ringBufferSizeProperty, 16384);\n+        \n+        // The size of the public publisher's message staging queue buffer\n+        String shareBufferSizeProperty = \"nacos.core.notify.share-buffer-size\";\n+        shareBufferSize = Integer.getInteger(shareBufferSizeProperty, 1024);\n+        \n+        final ServiceLoader<EventPublisher> loader = ServiceLoader.load(EventPublisher.class);\n+        Iterator<EventPublisher> iterator = loader.iterator();\n+        \n+        if (iterator.hasNext()) {\n+            clazz = iterator.next().getClass();\n+        } else {\n+            clazz = DefaultPublisher.class;\n+        }\n+        \n+        publisherFactory = new BiFunction<Class<? extends Event>, Integer, EventPublisher>() {\n+            \n+            @Override\n+            public EventPublisher apply(Class<? extends Event> cls, Integer buffer) throws NacosException {\n+                try {\n+                    EventPublisher publisher = clazz.newInstance();\n+                    publisher.init(cls, buffer);\n+                    return publisher;\n+                } catch (Throwable ex) {\n+                    LOGGER.error(\"Service class newInstance has error : {}\", ex);\n+                    throw new NacosException(SERVER_ERROR, ex);\n+                }\n+            }\n+        };\n+        \n+        try {\n+            INSTANCE.sharePublisher = publisherFactory.apply(SlowEvent.class, shareBufferSize);\n+        } catch (Throwable ex) {\n+            LOGGER.error(\"Service class newInstance has error : {}\", ex);\n+        }\n+        \n+        ThreadUtils.addShutdownHook(new Runnable() {\n+            @Override\n+            public void run() {\n+                shutdown();\n+            }\n+        });\n+    }\n+    \n+    @JustForTest\n+    public static Map<String, EventPublisher> getPublisherMap() {\n+        return INSTANCE.publisherMap;\n+    }\n+    \n+    @JustForTest\n+    public static EventPublisher getPublisher(Class<? extends Event> topic) {\n+        if (ClassUtils.isAssignableFrom(SlowEvent.class, topic)) {\n+            return INSTANCE.sharePublisher;\n+        }\n+        return INSTANCE.publisherMap.get(topic.getCanonicalName());\n+    }\n+    \n+    @JustForTest\n+    public static Set<SmartSubscriber> getSmartSubscribers() {\n+        return EventPublisher.SMART_SUBSCRIBERS;\n+    }\n+    \n+    @JustForTest\n+    public static EventPublisher getSharePublisher() {\n+        return INSTANCE.sharePublisher;\n+    }\n+    \n+    /**\n+     * Shutdown the serveral publisher instance which notifycenter has.\n+     */\n+    public static void shutdown() {\n+        if (!CLOSED.compareAndSet(false, true)) {\n+            return;\n+        }\n+        LOGGER.warn(\"[NotifyCenter] Start destroying Publisher\");\n+        \n+        for (Map.Entry<String, EventPublisher> entry : INSTANCE.publisherMap.entrySet()) {\n+            try {\n+                EventPublisher eventPublisher = entry.getValue();\n+                eventPublisher.shutdown();\n+            } catch (Throwable e) {\n+                LOGGER.error(\"[EventPublisher] shutdown has error : {}\", e);\n+            }\n+        }\n+        \n+        try {\n+            INSTANCE.sharePublisher.shutdown();\n+        } catch (Throwable e) {\n+            LOGGER.error(\"[SharePublisher] shutdown has error : {}\", e);\n+        }\n+        \n+        LOGGER.warn(\"[NotifyCenter] Destruction of the end\");\n+    }\n+    \n+    /**\n+     * Register a Subscriber. If the Publisher concerned by the Subscriber does not exist, then PublihserMap will\n+     * preempt a placeholder Publisher first.\n+     *\n+     * @param consumer subscriber\n+     * @param <T>      event type\n+     */\n+    public static <T> void registerSubscriber(final Subscriber consumer) throws NacosException {\n+        final Class<? extends Event> cls = consumer.subscribeType();\n+        // If you want to listen to multiple events, you do it separately,\n+        // based on subclass's subscribeTypes method return list, it can register to publisher.\n+        if (consumer instanceof SmartSubscriber) {\n+            EventPublisher.SMART_SUBSCRIBERS.add((SmartSubscriber) consumer);\n+            for (Class<? extends Event> subscribeType : ((SmartSubscriber) consumer).subscribeTypes()) {\n+                addSubscriber(consumer, subscribeType);\n+            }\n+            return;\n+        }\n+        \n+        if (ClassUtils.isAssignableFrom(SlowEvent.class, cls)) {\n+            INSTANCE.sharePublisher.addSubscriber(consumer);\n+            return;\n+        }\n+        \n+        addSubscriber(consumer, consumer.subscribeType());\n+    }\n+    \n+    /**\n+     * Add a subscriber to pusblisher.\n+     *\n+     * @param consumer      subscriber instance.\n+     * @param subscribeType subscribeType.\n+     * @throws NacosException BiFunction mappingFunction may throw a NacosException.\n+     */\n+    private static void addSubscriber(final Subscriber consumer, Class<? extends Event> subscribeType)\n+            throws NacosException {\n+        \n+        final String topic = ClassUtils.getCanonicalName(subscribeType);\n+        MapUtils.computeIfAbsent(INSTANCE.publisherMap, topic, publisherFactory, subscribeType, ringBufferSize);\n+        EventPublisher publisher = INSTANCE.publisherMap.get(topic);\n+        publisher.addSubscriber(consumer);\n+    }\n+    \n+    /**\n+     * Deregister subscriber.\n+     *\n+     * @param consumer subscriber instance.\n+     */\n+    public static <T> void deregisterSubscriber(final Subscriber consumer) {\n+        final Class<? extends Event> cls = consumer.subscribeType();\n+        if (consumer instanceof SmartSubscriber) {\n+            EventPublisher.SMART_SUBSCRIBERS.remove((SmartSubscriber) consumer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "85625cc8213094b8e46bc96455be6727ed72d583"}, "originalPosition": 218}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "051dc704099d937a89b7d1714e6d1ea91fafe94d", "author": {"user": {"login": "zongtanghu", "name": "Hu Zongtang"}}, "url": "https://github.com/alibaba/nacos/commit/051dc704099d937a89b7d1714e6d1ea91fafe94d", "committedDate": "2020-06-21T13:41:15Z", "message": "[#3118]fix some typo and reformat."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NTE3ODY3", "url": "https://github.com/alibaba/nacos/pull/3118#pullrequestreview-434517867", "createdAt": "2020-06-21T17:10:44Z", "commit": {"oid": "051dc704099d937a89b7d1714e6d1ea91fafe94d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NTY5MTY4", "url": "https://github.com/alibaba/nacos/pull/3118#pullrequestreview-434569168", "createdAt": "2020-06-22T02:29:03Z", "commit": {"oid": "051dc704099d937a89b7d1714e6d1ea91fafe94d"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4375, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}