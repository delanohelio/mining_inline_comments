{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MTE2MDM3", "number": 3126, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwMTozODozM1rOEHU-ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMjozMjozMlrOEHaS8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTE5MjM1OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/alibaba/nacos/api/naming/pojo/healthcheck/impl/Http.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwMTozODozM1rOGmpIcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwMTozODozM1rOGmpIcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3Mjk3Nw==", "bodyText": "No need use this for use except in constructor, set, get.", "url": "https://github.com/alibaba/nacos/pull/3126#discussion_r443172977", "createdAt": "2020-06-21T01:38:33Z", "author": {"login": "KomachiSion"}, "path": "api/src/main/java/com/alibaba/nacos/api/naming/pojo/healthcheck/impl/Http.java", "diffHunk": "@@ -32,87 +32,88 @@\n  * @author yangyi\n  */\n public class Http extends AbstractHealthChecker {\n+    \n     public static final String TYPE = \"HTTP\";\n-\n+    \n     private String path = \"\";\n-\n+    \n     private String headers = \"\";\n-\n+    \n     private int expectedResponseCode = 200;\n-\n+    \n     public Http() {\n-        super(TYPE);\n+        super(Http.TYPE);\n     }\n-\n+    \n     public int getExpectedResponseCode() {\n-        return expectedResponseCode;\n+        return this.expectedResponseCode;\n     }\n-\n-    public void setExpectedResponseCode(int expectedResponseCode) {\n+    \n+    public void setExpectedResponseCode(final int expectedResponseCode) {\n         this.expectedResponseCode = expectedResponseCode;\n     }\n-\n+    \n     public String getPath() {\n-        return path;\n+        return this.path;\n     }\n-\n-    public void setPath(String path) {\n+    \n+    public void setPath(final String path) {\n         this.path = path;\n     }\n-\n+    \n     public String getHeaders() {\n-        return headers;\n+        return this.headers;\n     }\n-\n-    public void setHeaders(String headers) {\n+    \n+    public void setHeaders(final String headers) {\n         this.headers = headers;\n     }\n-\n+    \n     @JsonIgnore\n     public Map<String, String> getCustomHeaders() {\n-        if (StringUtils.isBlank(headers)) {\n+        if (StringUtils.isBlank(this.headers)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9900f94c577223655fabaee66ca8f0c882d6b994"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTE5MjM3OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/alibaba/nacos/api/naming/pojo/healthcheck/impl/Http.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwMTozODo0MlrOGmpIcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwMTozODo0MlrOGmpIcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3Mjk3OQ==", "bodyText": "No need use this for use except in constructor, set, get.", "url": "https://github.com/alibaba/nacos/pull/3126#discussion_r443172979", "createdAt": "2020-06-21T01:38:42Z", "author": {"login": "KomachiSion"}, "path": "api/src/main/java/com/alibaba/nacos/api/naming/pojo/healthcheck/impl/Http.java", "diffHunk": "@@ -32,87 +32,88 @@\n  * @author yangyi\n  */\n public class Http extends AbstractHealthChecker {\n+    \n     public static final String TYPE = \"HTTP\";\n-\n+    \n     private String path = \"\";\n-\n+    \n     private String headers = \"\";\n-\n+    \n     private int expectedResponseCode = 200;\n-\n+    \n     public Http() {\n-        super(TYPE);\n+        super(Http.TYPE);\n     }\n-\n+    \n     public int getExpectedResponseCode() {\n-        return expectedResponseCode;\n+        return this.expectedResponseCode;\n     }\n-\n-    public void setExpectedResponseCode(int expectedResponseCode) {\n+    \n+    public void setExpectedResponseCode(final int expectedResponseCode) {\n         this.expectedResponseCode = expectedResponseCode;\n     }\n-\n+    \n     public String getPath() {\n-        return path;\n+        return this.path;\n     }\n-\n-    public void setPath(String path) {\n+    \n+    public void setPath(final String path) {\n         this.path = path;\n     }\n-\n+    \n     public String getHeaders() {\n-        return headers;\n+        return this.headers;\n     }\n-\n-    public void setHeaders(String headers) {\n+    \n+    public void setHeaders(final String headers) {\n         this.headers = headers;\n     }\n-\n+    \n     @JsonIgnore\n     public Map<String, String> getCustomHeaders() {\n-        if (StringUtils.isBlank(headers)) {\n+        if (StringUtils.isBlank(this.headers)) {\n             return Collections.emptyMap();\n         }\n-        Map<String, String> headerMap = new HashMap<String, String>(16);\n-        for (String s : headers.split(Constants.NAMING_HTTP_HEADER_SPILIER)) {\n-            String[] splits = s.split(\":\");\n+        final Map<String, String> headerMap = new HashMap<String, String>(16);\n+        for (final String s : this.headers.split(Constants.NAMING_HTTP_HEADER_SPILIER)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9900f94c577223655fabaee66ca8f0c882d6b994"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTE5MjQ2OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/alibaba/nacos/api/naming/pojo/healthcheck/impl/Http.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwMTozODo1MVrOGmpIfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwMTozODo1MVrOGmpIfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3Mjk4OQ==", "bodyText": "No need use this for use except in constructor, set, get.", "url": "https://github.com/alibaba/nacos/pull/3126#discussion_r443172989", "createdAt": "2020-06-21T01:38:51Z", "author": {"login": "KomachiSion"}, "path": "api/src/main/java/com/alibaba/nacos/api/naming/pojo/healthcheck/impl/Http.java", "diffHunk": "@@ -32,87 +32,88 @@\n  * @author yangyi\n  */\n public class Http extends AbstractHealthChecker {\n+    \n     public static final String TYPE = \"HTTP\";\n-\n+    \n     private String path = \"\";\n-\n+    \n     private String headers = \"\";\n-\n+    \n     private int expectedResponseCode = 200;\n-\n+    \n     public Http() {\n-        super(TYPE);\n+        super(Http.TYPE);\n     }\n-\n+    \n     public int getExpectedResponseCode() {\n-        return expectedResponseCode;\n+        return this.expectedResponseCode;\n     }\n-\n-    public void setExpectedResponseCode(int expectedResponseCode) {\n+    \n+    public void setExpectedResponseCode(final int expectedResponseCode) {\n         this.expectedResponseCode = expectedResponseCode;\n     }\n-\n+    \n     public String getPath() {\n-        return path;\n+        return this.path;\n     }\n-\n-    public void setPath(String path) {\n+    \n+    public void setPath(final String path) {\n         this.path = path;\n     }\n-\n+    \n     public String getHeaders() {\n-        return headers;\n+        return this.headers;\n     }\n-\n-    public void setHeaders(String headers) {\n+    \n+    public void setHeaders(final String headers) {\n         this.headers = headers;\n     }\n-\n+    \n     @JsonIgnore\n     public Map<String, String> getCustomHeaders() {\n-        if (StringUtils.isBlank(headers)) {\n+        if (StringUtils.isBlank(this.headers)) {\n             return Collections.emptyMap();\n         }\n-        Map<String, String> headerMap = new HashMap<String, String>(16);\n-        for (String s : headers.split(Constants.NAMING_HTTP_HEADER_SPILIER)) {\n-            String[] splits = s.split(\":\");\n+        final Map<String, String> headerMap = new HashMap<String, String>(16);\n+        for (final String s : this.headers.split(Constants.NAMING_HTTP_HEADER_SPILIER)) {\n+            final String[] splits = s.split(\":\");\n             if (splits.length != 2) {\n                 continue;\n             }\n             headerMap.put(StringUtils.trim(splits[0]), StringUtils.trim(splits[1]));\n         }\n         return headerMap;\n     }\n-\n+    \n     @Override\n     public int hashCode() {\n-        return Objects.hashCode(path, headers, expectedResponseCode);\n+        return Objects.hashCode(this.path, this.headers, this.expectedResponseCode);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9900f94c577223655fabaee66ca8f0c882d6b994"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTE5MjQ4OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/alibaba/nacos/api/naming/pojo/healthcheck/impl/Http.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwMTozODo1NVrOGmpIgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwMTozODo1NVrOGmpIgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3Mjk5Mw==", "bodyText": "No need use this for use except in constructor, set, get.", "url": "https://github.com/alibaba/nacos/pull/3126#discussion_r443172993", "createdAt": "2020-06-21T01:38:55Z", "author": {"login": "KomachiSion"}, "path": "api/src/main/java/com/alibaba/nacos/api/naming/pojo/healthcheck/impl/Http.java", "diffHunk": "@@ -32,87 +32,88 @@\n  * @author yangyi\n  */\n public class Http extends AbstractHealthChecker {\n+    \n     public static final String TYPE = \"HTTP\";\n-\n+    \n     private String path = \"\";\n-\n+    \n     private String headers = \"\";\n-\n+    \n     private int expectedResponseCode = 200;\n-\n+    \n     public Http() {\n-        super(TYPE);\n+        super(Http.TYPE);\n     }\n-\n+    \n     public int getExpectedResponseCode() {\n-        return expectedResponseCode;\n+        return this.expectedResponseCode;\n     }\n-\n-    public void setExpectedResponseCode(int expectedResponseCode) {\n+    \n+    public void setExpectedResponseCode(final int expectedResponseCode) {\n         this.expectedResponseCode = expectedResponseCode;\n     }\n-\n+    \n     public String getPath() {\n-        return path;\n+        return this.path;\n     }\n-\n-    public void setPath(String path) {\n+    \n+    public void setPath(final String path) {\n         this.path = path;\n     }\n-\n+    \n     public String getHeaders() {\n-        return headers;\n+        return this.headers;\n     }\n-\n-    public void setHeaders(String headers) {\n+    \n+    public void setHeaders(final String headers) {\n         this.headers = headers;\n     }\n-\n+    \n     @JsonIgnore\n     public Map<String, String> getCustomHeaders() {\n-        if (StringUtils.isBlank(headers)) {\n+        if (StringUtils.isBlank(this.headers)) {\n             return Collections.emptyMap();\n         }\n-        Map<String, String> headerMap = new HashMap<String, String>(16);\n-        for (String s : headers.split(Constants.NAMING_HTTP_HEADER_SPILIER)) {\n-            String[] splits = s.split(\":\");\n+        final Map<String, String> headerMap = new HashMap<String, String>(16);\n+        for (final String s : this.headers.split(Constants.NAMING_HTTP_HEADER_SPILIER)) {\n+            final String[] splits = s.split(\":\");\n             if (splits.length != 2) {\n                 continue;\n             }\n             headerMap.put(StringUtils.trim(splits[0]), StringUtils.trim(splits[1]));\n         }\n         return headerMap;\n     }\n-\n+    \n     @Override\n     public int hashCode() {\n-        return Objects.hashCode(path, headers, expectedResponseCode);\n+        return Objects.hashCode(this.path, this.headers, this.expectedResponseCode);\n     }\n-\n+    \n     @Override\n-    public boolean equals(Object obj) {\n+    public boolean equals(final Object obj) {\n         if (!(obj instanceof Http)) {\n             return false;\n         }\n-\n-        Http other = (Http) obj;\n-\n-        if (!StringUtils.equals(type, other.getType())) {\n+        \n+        final Http other = (Http) obj;\n+        \n+        if (!StringUtils.equals(this.type, other.getType())) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9900f94c577223655fabaee66ca8f0c882d6b994"}, "originalPosition": 111}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MTE5MjQ5OnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/alibaba/nacos/api/naming/pojo/healthcheck/impl/Http.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMVQwMTozOTowMVrOGmpIgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMjo1OTo0M1rOGm_hbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3Mjk5NA==", "bodyText": "No need use this for use except in constructor, set, get.", "url": "https://github.com/alibaba/nacos/pull/3126#discussion_r443172994", "createdAt": "2020-06-21T01:39:01Z", "author": {"login": "KomachiSion"}, "path": "api/src/main/java/com/alibaba/nacos/api/naming/pojo/healthcheck/impl/Http.java", "diffHunk": "@@ -32,87 +32,88 @@\n  * @author yangyi\n  */\n public class Http extends AbstractHealthChecker {\n+    \n     public static final String TYPE = \"HTTP\";\n-\n+    \n     private String path = \"\";\n-\n+    \n     private String headers = \"\";\n-\n+    \n     private int expectedResponseCode = 200;\n-\n+    \n     public Http() {\n-        super(TYPE);\n+        super(Http.TYPE);\n     }\n-\n+    \n     public int getExpectedResponseCode() {\n-        return expectedResponseCode;\n+        return this.expectedResponseCode;\n     }\n-\n-    public void setExpectedResponseCode(int expectedResponseCode) {\n+    \n+    public void setExpectedResponseCode(final int expectedResponseCode) {\n         this.expectedResponseCode = expectedResponseCode;\n     }\n-\n+    \n     public String getPath() {\n-        return path;\n+        return this.path;\n     }\n-\n-    public void setPath(String path) {\n+    \n+    public void setPath(final String path) {\n         this.path = path;\n     }\n-\n+    \n     public String getHeaders() {\n-        return headers;\n+        return this.headers;\n     }\n-\n-    public void setHeaders(String headers) {\n+    \n+    public void setHeaders(final String headers) {\n         this.headers = headers;\n     }\n-\n+    \n     @JsonIgnore\n     public Map<String, String> getCustomHeaders() {\n-        if (StringUtils.isBlank(headers)) {\n+        if (StringUtils.isBlank(this.headers)) {\n             return Collections.emptyMap();\n         }\n-        Map<String, String> headerMap = new HashMap<String, String>(16);\n-        for (String s : headers.split(Constants.NAMING_HTTP_HEADER_SPILIER)) {\n-            String[] splits = s.split(\":\");\n+        final Map<String, String> headerMap = new HashMap<String, String>(16);\n+        for (final String s : this.headers.split(Constants.NAMING_HTTP_HEADER_SPILIER)) {\n+            final String[] splits = s.split(\":\");\n             if (splits.length != 2) {\n                 continue;\n             }\n             headerMap.put(StringUtils.trim(splits[0]), StringUtils.trim(splits[1]));\n         }\n         return headerMap;\n     }\n-\n+    \n     @Override\n     public int hashCode() {\n-        return Objects.hashCode(path, headers, expectedResponseCode);\n+        return Objects.hashCode(this.path, this.headers, this.expectedResponseCode);\n     }\n-\n+    \n     @Override\n-    public boolean equals(Object obj) {\n+    public boolean equals(final Object obj) {\n         if (!(obj instanceof Http)) {\n             return false;\n         }\n-\n-        Http other = (Http) obj;\n-\n-        if (!StringUtils.equals(type, other.getType())) {\n+        \n+        final Http other = (Http) obj;\n+        \n+        if (!StringUtils.equals(this.type, other.getType())) {\n             return false;\n         }\n-\n-        if (!StringUtils.equals(path, other.getPath())) {\n+        \n+        if (!StringUtils.equals(this.path, other.getPath())) {\n             return false;\n         }\n-        if (!StringUtils.equals(headers, other.getHeaders())) {\n+        if (!StringUtils.equals(this.headers, other.getHeaders())) {\n             return false;\n         }\n-        return expectedResponseCode == other.getExpectedResponseCode();\n+        return this.expectedResponseCode == other.getExpectedResponseCode();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9900f94c577223655fabaee66ca8f0c882d6b994"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUzOTgyMw==", "bodyText": "\u53bb\u6389 this \u4e86\u54c8", "url": "https://github.com/alibaba/nacos/pull/3126#discussion_r443539823", "createdAt": "2020-06-22T12:59:43Z", "author": {"login": "lin-mt"}, "path": "api/src/main/java/com/alibaba/nacos/api/naming/pojo/healthcheck/impl/Http.java", "diffHunk": "@@ -32,87 +32,88 @@\n  * @author yangyi\n  */\n public class Http extends AbstractHealthChecker {\n+    \n     public static final String TYPE = \"HTTP\";\n-\n+    \n     private String path = \"\";\n-\n+    \n     private String headers = \"\";\n-\n+    \n     private int expectedResponseCode = 200;\n-\n+    \n     public Http() {\n-        super(TYPE);\n+        super(Http.TYPE);\n     }\n-\n+    \n     public int getExpectedResponseCode() {\n-        return expectedResponseCode;\n+        return this.expectedResponseCode;\n     }\n-\n-    public void setExpectedResponseCode(int expectedResponseCode) {\n+    \n+    public void setExpectedResponseCode(final int expectedResponseCode) {\n         this.expectedResponseCode = expectedResponseCode;\n     }\n-\n+    \n     public String getPath() {\n-        return path;\n+        return this.path;\n     }\n-\n-    public void setPath(String path) {\n+    \n+    public void setPath(final String path) {\n         this.path = path;\n     }\n-\n+    \n     public String getHeaders() {\n-        return headers;\n+        return this.headers;\n     }\n-\n-    public void setHeaders(String headers) {\n+    \n+    public void setHeaders(final String headers) {\n         this.headers = headers;\n     }\n-\n+    \n     @JsonIgnore\n     public Map<String, String> getCustomHeaders() {\n-        if (StringUtils.isBlank(headers)) {\n+        if (StringUtils.isBlank(this.headers)) {\n             return Collections.emptyMap();\n         }\n-        Map<String, String> headerMap = new HashMap<String, String>(16);\n-        for (String s : headers.split(Constants.NAMING_HTTP_HEADER_SPILIER)) {\n-            String[] splits = s.split(\":\");\n+        final Map<String, String> headerMap = new HashMap<String, String>(16);\n+        for (final String s : this.headers.split(Constants.NAMING_HTTP_HEADER_SPILIER)) {\n+            final String[] splits = s.split(\":\");\n             if (splits.length != 2) {\n                 continue;\n             }\n             headerMap.put(StringUtils.trim(splits[0]), StringUtils.trim(splits[1]));\n         }\n         return headerMap;\n     }\n-\n+    \n     @Override\n     public int hashCode() {\n-        return Objects.hashCode(path, headers, expectedResponseCode);\n+        return Objects.hashCode(this.path, this.headers, this.expectedResponseCode);\n     }\n-\n+    \n     @Override\n-    public boolean equals(Object obj) {\n+    public boolean equals(final Object obj) {\n         if (!(obj instanceof Http)) {\n             return false;\n         }\n-\n-        Http other = (Http) obj;\n-\n-        if (!StringUtils.equals(type, other.getType())) {\n+        \n+        final Http other = (Http) obj;\n+        \n+        if (!StringUtils.equals(this.type, other.getType())) {\n             return false;\n         }\n-\n-        if (!StringUtils.equals(path, other.getPath())) {\n+        \n+        if (!StringUtils.equals(this.path, other.getPath())) {\n             return false;\n         }\n-        if (!StringUtils.equals(headers, other.getHeaders())) {\n+        if (!StringUtils.equals(this.headers, other.getHeaders())) {\n             return false;\n         }\n-        return expectedResponseCode == other.getExpectedResponseCode();\n+        return this.expectedResponseCode == other.getExpectedResponseCode();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE3Mjk5NA=="}, "originalCommit": {"oid": "9900f94c577223655fabaee66ca8f0c882d6b994"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MjA2MzIwOnYy", "diffSide": "RIGHT", "path": "api/src/main/java/com/alibaba/nacos/api/exception/NacosException.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwMjozMjozMlrOGmwULw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQwNjoyNTowOFrOGmzUJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI5MDY3MQ==", "bodyText": "\u8fd9\u4e2a\u7801\u662f\u4ec0\u4e48\u610f\u601d\uff1f", "url": "https://github.com/alibaba/nacos/pull/3126#discussion_r443290671", "createdAt": "2020-06-22T02:32:32Z", "author": {"login": "yanlinly"}, "path": "api/src/main/java/com/alibaba/nacos/api/exception/NacosException.java", "diffHunk": "@@ -13,136 +13,145 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.alibaba.nacos.api.exception;\n \n import com.alibaba.nacos.api.common.Constants;\n-import org.apache.commons.lang3.StringUtils;\n+import com.alibaba.nacos.api.utils.StringUtils;\n \n /**\n- * Nacos Exception\n+ * Nacos Exception.\n  *\n  * @author Nacos\n  */\n public class NacosException extends Exception {\n-\n-\t/**\n-\t * serialVersionUID\n-\t */\n-\tprivate static final long serialVersionUID = -3913902031489277776L;\n-\n-\tprivate int errCode;\n-\n-\tprivate String errMsg;\n-\n-\tprivate Throwable causeThrowable;\n-\n-\tpublic NacosException() {\n-\t}\n-\n-\tpublic NacosException(int errCode, String errMsg) {\n-\t\tsuper(errMsg);\n-\t\tthis.errCode = errCode;\n-\t\tthis.errMsg = errMsg;\n-\t}\n-\n-\tpublic NacosException(int errCode, Throwable throwable) {\n-\t\tsuper(throwable);\n-\t\tthis.errCode = errCode;\n-\t\tsetCauseThrowable(throwable);\n-\t}\n-\n-\tpublic NacosException(int errCode, String errMsg, Throwable throwable) {\n-\t\tsuper(errMsg, throwable);\n-\t\tthis.errCode = errCode;\n-\t\tthis.errMsg = errMsg;\n-\t\tsetCauseThrowable(throwable);\n-\t}\n-\n-\tpublic int getErrCode() {\n-\t\treturn errCode;\n-\t}\n-\n-\tpublic String getErrMsg() {\n-\t\tif (!StringUtils.isBlank(this.errMsg)) {\n-\t\t\treturn errMsg;\n-\t\t}\n-\t\tif (this.causeThrowable != null) {\n-\t\t\treturn causeThrowable.getMessage();\n-\t\t}\n-\t\treturn Constants.NULL;\n-\t}\n-\n-\tpublic void setErrCode(int errCode) {\n-\t\tthis.errCode = errCode;\n-\t}\n-\n-\tpublic void setErrMsg(String errMsg) {\n-\t\tthis.errMsg = errMsg;\n-\t}\n-\n-\tpublic void setCauseThrowable(Throwable throwable) {\n-\t\tthis.causeThrowable = getCauseThrowable(throwable);\n-\t}\n-\n-\tprivate Throwable getCauseThrowable(Throwable t) {\n-\t\tif (t.getCause() == null) {\n-\t\t\treturn t;\n-\t\t}\n-\t\treturn getCauseThrowable(t.getCause());\n-\t}\n-\n-\t@Override\n-\tpublic String toString() {\n-\t\treturn \"ErrCode:\" + getErrCode() + \", ErrMsg:\" + getErrMsg();\n-\t}\n-\n-\t/**\n-\t * client error code\n-\t * -400 -503 throw exception to user\n-\t */\n-\t/**\n-\t * invalid param\uff08\u53c2\u6570\u9519\u8bef\uff09\n-\t */\n-\tpublic static final int CLIENT_INVALID_PARAM = -400;\n-\t/**\n-\t * over client threshold\uff08\u8d85\u8fc7server\u7aef\u7684\u9650\u6d41\u9608\u503c\uff09\n-\t */\n-\tpublic static final int CLIENT_OVER_THRESHOLD = -503;\n-\n-\t/**\n-\t * server error code\n-\t * 400 403 throw exception to user\n-\t * 500 502 503 change ip and retry\n-\t */\n-\n-\t/**\n-\t * invalid param\uff08\u53c2\u6570\u9519\u8bef\uff09\n-\t */\n-\tpublic static final int INVALID_PARAM = 400;\n-\t/**\n-\t * no right\uff08\u9274\u6743\u5931\u8d25\uff09\n-\t */\n-\tpublic static final int NO_RIGHT = 403;\n-\t/**\n-\t *  not found\n-\t */\n-\tpublic static final int NOT_FOUND = 404;\n-\t/**\n-\t * conflict\uff08\u5199\u5e76\u53d1\u51b2\u7a81\uff09\n-\t */\n-\tpublic static final int CONFLICT = 409;\n-\t/**\n-\t * server error\uff08server\u5f02\u5e38\uff0c\u5982\u8d85\u65f6\uff09\n-\t */\n-\tpublic static final int SERVER_ERROR = 500;\n-\t/**\n-\t * bad gateway\uff08\u8def\u7531\u5f02\u5e38\uff0c\u5982nginx\u540e\u9762\u7684Server\u6302\u6389\uff09\n-\t */\n-\tpublic static final int BAD_GATEWAY = 502;\n-\t/**\n-\t * over threshold\uff08\u8d85\u8fc7server\u7aef\u7684\u9650\u6d41\u9608\u503c\uff09\n-\t */\n-\tpublic static final int OVER_THRESHOLD = 503;\n-\n-\tpublic static final int RESOURCE_NOT_FOUND = -404;\n+    \n+    /**\n+     * serialVersionUID.\n+     */\n+    private static final long serialVersionUID = -3913902031489277776L;\n+    \n+    private int errCode;\n+    \n+    private String errMsg;\n+    \n+    private Throwable causeThrowable;\n+    \n+    public NacosException() {\n+    }\n+    \n+    public NacosException(final int errCode, final String errMsg) {\n+        super(errMsg);\n+        this.errCode = errCode;\n+        this.errMsg = errMsg;\n+    }\n+    \n+    public NacosException(final int errCode, final Throwable throwable) {\n+        super(throwable);\n+        this.errCode = errCode;\n+        this.setCauseThrowable(throwable);\n+    }\n+    \n+    public NacosException(final int errCode, final String errMsg, final Throwable throwable) {\n+        super(errMsg, throwable);\n+        this.errCode = errCode;\n+        this.errMsg = errMsg;\n+        this.setCauseThrowable(throwable);\n+    }\n+    \n+    public int getErrCode() {\n+        return this.errCode;\n+    }\n+    \n+    public String getErrMsg() {\n+        if (!StringUtils.isBlank(this.errMsg)) {\n+            return this.errMsg;\n+        }\n+        if (this.causeThrowable != null) {\n+            return this.causeThrowable.getMessage();\n+        }\n+        return Constants.NULL;\n+    }\n+    \n+    public void setErrCode(final int errCode) {\n+        this.errCode = errCode;\n+    }\n+    \n+    public void setErrMsg(final String errMsg) {\n+        this.errMsg = errMsg;\n+    }\n+    \n+    public void setCauseThrowable(final Throwable throwable) {\n+        this.causeThrowable = this.getCauseThrowable(throwable);\n+    }\n+    \n+    private Throwable getCauseThrowable(final Throwable t) {\n+        if (t.getCause() == null) {\n+            return t;\n+        }\n+        return this.getCauseThrowable(t.getCause());\n+    }\n+    \n+    @Override\n+    public String toString() {\n+        return \"ErrCode:\" + this.getErrCode() + \", ErrMsg:\" + this.getErrMsg();\n+    }\n+    \n+    /*\n+     * client error code.\n+     * -400 -503 throw exception to user.\n+     */\n+    \n+    /**\n+     * invalid param\uff08\u53c2\u6570\u9519\u8bef\uff09.\n+     */\n+    public static final int CLIENT_INVALID_PARAM = -400;\n+    \n+    /**\n+     * over client threshold\uff08\u8d85\u8fc7server\u7aef\u7684\u9650\u6d41\u9608\u503c\uff09.\n+     */\n+    public static final int CLIENT_OVER_THRESHOLD = -503;\n+    \n+    /*\n+     * server error code.\n+     * 400 403 throw exception to user\n+     * 500 502 503 change ip and retry\n+     */\n+    \n+    /**\n+     * invalid param\uff08\u53c2\u6570\u9519\u8bef\uff09.\n+     */\n+    public static final int INVALID_PARAM = 400;\n+    \n+    /**\n+     * no right\uff08\u9274\u6743\u5931\u8d25\uff09.\n+     */\n+    public static final int NO_RIGHT = 403;\n+    \n+    /**\n+     * not found.\n+     */\n+    public static final int NOT_FOUND = 404;\n+    \n+    /**\n+     * conflict\uff08\u5199\u5e76\u53d1\u51b2\u7a81\uff09.\n+     */\n+    public static final int CONFLICT = 409;\n+    \n+    /**\n+     * server error\uff08server\u5f02\u5e38\uff0c\u5982\u8d85\u65f6\uff09.\n+     */\n+    public static final int SERVER_ERROR = 500;\n+    \n+    /**\n+     * bad gateway\uff08\u8def\u7531\u5f02\u5e38\uff0c\u5982nginx\u540e\u9762\u7684Server\u6302\u6389\uff09.\n+     */\n+    public static final int BAD_GATEWAY = 502;\n+    \n+    /**\n+     * over threshold\uff08\u8d85\u8fc7server\u7aef\u7684\u9650\u6d41\u9608\u503c\uff09.\n+     */\n+    public static final int OVER_THRESHOLD = 503;\n+    \n+    public static final int RESOURCE_NOT_FOUND = -404;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9900f94c577223655fabaee66ca8f0c882d6b994"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzMzOTgxNA==", "bodyText": "\u8fd9\u4e2a\u7801\u662f\u4ec0\u4e48\u610f\u601d\uff1f\n\n-404 \u5417\uff0c\u8fd9\u4e2a\u4e4b\u524d\u5c31\u5df2\u7ecf\u5b58\u5728\u4e86\uff0c\u662f @nkorange \u6dfb\u52a0\u7684", "url": "https://github.com/alibaba/nacos/pull/3126#discussion_r443339814", "createdAt": "2020-06-22T06:25:08Z", "author": {"login": "lin-mt"}, "path": "api/src/main/java/com/alibaba/nacos/api/exception/NacosException.java", "diffHunk": "@@ -13,136 +13,145 @@\n  * See the License for the specific language governing permissions and\n  * limitations under the License.\n  */\n+\n package com.alibaba.nacos.api.exception;\n \n import com.alibaba.nacos.api.common.Constants;\n-import org.apache.commons.lang3.StringUtils;\n+import com.alibaba.nacos.api.utils.StringUtils;\n \n /**\n- * Nacos Exception\n+ * Nacos Exception.\n  *\n  * @author Nacos\n  */\n public class NacosException extends Exception {\n-\n-\t/**\n-\t * serialVersionUID\n-\t */\n-\tprivate static final long serialVersionUID = -3913902031489277776L;\n-\n-\tprivate int errCode;\n-\n-\tprivate String errMsg;\n-\n-\tprivate Throwable causeThrowable;\n-\n-\tpublic NacosException() {\n-\t}\n-\n-\tpublic NacosException(int errCode, String errMsg) {\n-\t\tsuper(errMsg);\n-\t\tthis.errCode = errCode;\n-\t\tthis.errMsg = errMsg;\n-\t}\n-\n-\tpublic NacosException(int errCode, Throwable throwable) {\n-\t\tsuper(throwable);\n-\t\tthis.errCode = errCode;\n-\t\tsetCauseThrowable(throwable);\n-\t}\n-\n-\tpublic NacosException(int errCode, String errMsg, Throwable throwable) {\n-\t\tsuper(errMsg, throwable);\n-\t\tthis.errCode = errCode;\n-\t\tthis.errMsg = errMsg;\n-\t\tsetCauseThrowable(throwable);\n-\t}\n-\n-\tpublic int getErrCode() {\n-\t\treturn errCode;\n-\t}\n-\n-\tpublic String getErrMsg() {\n-\t\tif (!StringUtils.isBlank(this.errMsg)) {\n-\t\t\treturn errMsg;\n-\t\t}\n-\t\tif (this.causeThrowable != null) {\n-\t\t\treturn causeThrowable.getMessage();\n-\t\t}\n-\t\treturn Constants.NULL;\n-\t}\n-\n-\tpublic void setErrCode(int errCode) {\n-\t\tthis.errCode = errCode;\n-\t}\n-\n-\tpublic void setErrMsg(String errMsg) {\n-\t\tthis.errMsg = errMsg;\n-\t}\n-\n-\tpublic void setCauseThrowable(Throwable throwable) {\n-\t\tthis.causeThrowable = getCauseThrowable(throwable);\n-\t}\n-\n-\tprivate Throwable getCauseThrowable(Throwable t) {\n-\t\tif (t.getCause() == null) {\n-\t\t\treturn t;\n-\t\t}\n-\t\treturn getCauseThrowable(t.getCause());\n-\t}\n-\n-\t@Override\n-\tpublic String toString() {\n-\t\treturn \"ErrCode:\" + getErrCode() + \", ErrMsg:\" + getErrMsg();\n-\t}\n-\n-\t/**\n-\t * client error code\n-\t * -400 -503 throw exception to user\n-\t */\n-\t/**\n-\t * invalid param\uff08\u53c2\u6570\u9519\u8bef\uff09\n-\t */\n-\tpublic static final int CLIENT_INVALID_PARAM = -400;\n-\t/**\n-\t * over client threshold\uff08\u8d85\u8fc7server\u7aef\u7684\u9650\u6d41\u9608\u503c\uff09\n-\t */\n-\tpublic static final int CLIENT_OVER_THRESHOLD = -503;\n-\n-\t/**\n-\t * server error code\n-\t * 400 403 throw exception to user\n-\t * 500 502 503 change ip and retry\n-\t */\n-\n-\t/**\n-\t * invalid param\uff08\u53c2\u6570\u9519\u8bef\uff09\n-\t */\n-\tpublic static final int INVALID_PARAM = 400;\n-\t/**\n-\t * no right\uff08\u9274\u6743\u5931\u8d25\uff09\n-\t */\n-\tpublic static final int NO_RIGHT = 403;\n-\t/**\n-\t *  not found\n-\t */\n-\tpublic static final int NOT_FOUND = 404;\n-\t/**\n-\t * conflict\uff08\u5199\u5e76\u53d1\u51b2\u7a81\uff09\n-\t */\n-\tpublic static final int CONFLICT = 409;\n-\t/**\n-\t * server error\uff08server\u5f02\u5e38\uff0c\u5982\u8d85\u65f6\uff09\n-\t */\n-\tpublic static final int SERVER_ERROR = 500;\n-\t/**\n-\t * bad gateway\uff08\u8def\u7531\u5f02\u5e38\uff0c\u5982nginx\u540e\u9762\u7684Server\u6302\u6389\uff09\n-\t */\n-\tpublic static final int BAD_GATEWAY = 502;\n-\t/**\n-\t * over threshold\uff08\u8d85\u8fc7server\u7aef\u7684\u9650\u6d41\u9608\u503c\uff09\n-\t */\n-\tpublic static final int OVER_THRESHOLD = 503;\n-\n-\tpublic static final int RESOURCE_NOT_FOUND = -404;\n+    \n+    /**\n+     * serialVersionUID.\n+     */\n+    private static final long serialVersionUID = -3913902031489277776L;\n+    \n+    private int errCode;\n+    \n+    private String errMsg;\n+    \n+    private Throwable causeThrowable;\n+    \n+    public NacosException() {\n+    }\n+    \n+    public NacosException(final int errCode, final String errMsg) {\n+        super(errMsg);\n+        this.errCode = errCode;\n+        this.errMsg = errMsg;\n+    }\n+    \n+    public NacosException(final int errCode, final Throwable throwable) {\n+        super(throwable);\n+        this.errCode = errCode;\n+        this.setCauseThrowable(throwable);\n+    }\n+    \n+    public NacosException(final int errCode, final String errMsg, final Throwable throwable) {\n+        super(errMsg, throwable);\n+        this.errCode = errCode;\n+        this.errMsg = errMsg;\n+        this.setCauseThrowable(throwable);\n+    }\n+    \n+    public int getErrCode() {\n+        return this.errCode;\n+    }\n+    \n+    public String getErrMsg() {\n+        if (!StringUtils.isBlank(this.errMsg)) {\n+            return this.errMsg;\n+        }\n+        if (this.causeThrowable != null) {\n+            return this.causeThrowable.getMessage();\n+        }\n+        return Constants.NULL;\n+    }\n+    \n+    public void setErrCode(final int errCode) {\n+        this.errCode = errCode;\n+    }\n+    \n+    public void setErrMsg(final String errMsg) {\n+        this.errMsg = errMsg;\n+    }\n+    \n+    public void setCauseThrowable(final Throwable throwable) {\n+        this.causeThrowable = this.getCauseThrowable(throwable);\n+    }\n+    \n+    private Throwable getCauseThrowable(final Throwable t) {\n+        if (t.getCause() == null) {\n+            return t;\n+        }\n+        return this.getCauseThrowable(t.getCause());\n+    }\n+    \n+    @Override\n+    public String toString() {\n+        return \"ErrCode:\" + this.getErrCode() + \", ErrMsg:\" + this.getErrMsg();\n+    }\n+    \n+    /*\n+     * client error code.\n+     * -400 -503 throw exception to user.\n+     */\n+    \n+    /**\n+     * invalid param\uff08\u53c2\u6570\u9519\u8bef\uff09.\n+     */\n+    public static final int CLIENT_INVALID_PARAM = -400;\n+    \n+    /**\n+     * over client threshold\uff08\u8d85\u8fc7server\u7aef\u7684\u9650\u6d41\u9608\u503c\uff09.\n+     */\n+    public static final int CLIENT_OVER_THRESHOLD = -503;\n+    \n+    /*\n+     * server error code.\n+     * 400 403 throw exception to user\n+     * 500 502 503 change ip and retry\n+     */\n+    \n+    /**\n+     * invalid param\uff08\u53c2\u6570\u9519\u8bef\uff09.\n+     */\n+    public static final int INVALID_PARAM = 400;\n+    \n+    /**\n+     * no right\uff08\u9274\u6743\u5931\u8d25\uff09.\n+     */\n+    public static final int NO_RIGHT = 403;\n+    \n+    /**\n+     * not found.\n+     */\n+    public static final int NOT_FOUND = 404;\n+    \n+    /**\n+     * conflict\uff08\u5199\u5e76\u53d1\u51b2\u7a81\uff09.\n+     */\n+    public static final int CONFLICT = 409;\n+    \n+    /**\n+     * server error\uff08server\u5f02\u5e38\uff0c\u5982\u8d85\u65f6\uff09.\n+     */\n+    public static final int SERVER_ERROR = 500;\n+    \n+    /**\n+     * bad gateway\uff08\u8def\u7531\u5f02\u5e38\uff0c\u5982nginx\u540e\u9762\u7684Server\u6302\u6389\uff09.\n+     */\n+    public static final int BAD_GATEWAY = 502;\n+    \n+    /**\n+     * over threshold\uff08\u8d85\u8fc7server\u7aef\u7684\u9650\u6d41\u9608\u503c\uff09.\n+     */\n+    public static final int OVER_THRESHOLD = 503;\n+    \n+    public static final int RESOURCE_NOT_FOUND = -404;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzI5MDY3MQ=="}, "originalCommit": {"oid": "9900f94c577223655fabaee66ca8f0c882d6b994"}, "originalPosition": 267}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4425, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}