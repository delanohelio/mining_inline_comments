{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExNjg3MTE2", "number": 243, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNTowMDo0NFrOEzVuPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNToyMjoxOFrOEzWXuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjY4NzM1OnYy", "diffSide": "RIGHT", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/dependencyfile/DependenyListFileParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNTowMDo0NFrOHqgF5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNTowMDo0NFrOHqgF5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyODAzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final String canonicalPath;\n          \n          \n            \n                    try {\n          \n          \n            \n                        canonicalPath = targetFile.getCanonicalPath();\n          \n          \n            \n                    } catch (final IOException e) {\n          \n          \n            \n                        logger.warn(String.format(\"Unable to convert %s to canonical path\", rawPath));\n          \n          \n            \n                        return rawPath;\n          \n          \n            \n                    }\n          \n          \n            \n                    logger.trace(String.format(\"Canonicalized %s to %s\", rawPath, canonicalPath));\n          \n          \n            \n                    return canonicalPath;\n          \n          \n            \n                   String canonicalPath = rawPath;\n          \n          \n            \n                    try {\n          \n          \n            \n                        canonicalPath = targetFile.getCanonicalPath();\n          \n          \n            \n                         logger.trace(String.format(\"Canonicalized %s to %s\", rawPath, canonicalPath));\n          \n          \n            \n                    } catch (final IOException e) {\n          \n          \n            \n                        logger.warn(String.format(\"Unable to convert %s to canonical path\", rawPath));\n          \n          \n            \n                    }\n          \n          \n            \n                   \n          \n          \n            \n                    return canonicalPath;", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/243#discussion_r514328037", "createdAt": "2020-10-29T15:00:44Z", "author": {"login": "psantos1113"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/dependencyfile/DependenyListFileParser.java", "diffHunk": "@@ -61,9 +63,25 @@\n         logger.trace(String.format(\"dependencies, backslashes removed: %s\", depsListString));\n \n         final String[] deps = depsListString.split(\"\\\\s+\");\n+        final List<String> depsList = new ArrayList<>(deps.length);\n         for (final String includeFile : deps) {\n-            logger.trace(String.format(\"\\t%s\", includeFile));\n+            if (StringUtils.isNotBlank(includeFile)) {\n+                depsList.add(toCanonical(includeFile));\n+            }\n         }\n-        return Arrays.asList(deps);\n+        return depsList;\n+    }\n+\n+    private String toCanonical(final String rawPath) {\n+        final File targetFile = new File(rawPath);\n+        final String canonicalPath;\n+        try {\n+            canonicalPath = targetFile.getCanonicalPath();\n+        } catch (final IOException e) {\n+            logger.warn(String.format(\"Unable to convert %s to canonical path\", rawPath));\n+            return rawPath;\n+        }\n+        logger.trace(String.format(\"Canonicalized %s to %s\", rawPath, canonicalPath));\n+        return canonicalPath;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "936b9cb75395c16646b2061ab350991257188c73"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjc5MzUzOnYy", "diffSide": "RIGHT", "path": "detectable/src/test/java/com/synopsys/integration/detectable/detectables/clang/functional/DependencyListFileParserTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNToyMjoxOFrOHqhH7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNToyMjoxOFrOHqhH7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM0NDk0MQ==", "bodyText": "If these files are all empty below can we just create files in the unit test without including empty files in the resources?  The files created in the test would have paths similar to the paths after clang portion of the file paths currently.\ni.e.\n        final File testParent = new File(curDir,\"test\");\n        final File canonicalTestParent = new File(testParent, \"subDir1/subDir2);\n        final File sourceFile = new File(testParent, \"src/process.c\");\n        final File includeFile1 = new File(testParent, \"include/stdc-predef.h\");\n        final File includeFile2 = new File(canonicalTestParent, \"../../include/./assert.h\");\n        canonicalTestParent.mkdirs();\n        sourceFile.create();\n        includeFile1.create();\n        includeFile2.create();\n\nAt the end of the test you can delete the files you created for this test.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/243#discussion_r514344941", "createdAt": "2020-10-29T15:22:18Z", "author": {"login": "psantos1113"}, "path": "detectable/src/test/java/com/synopsys/integration/detectable/detectables/clang/functional/DependencyListFileParserTest.java", "diffHunk": "@@ -0,0 +1,56 @@\n+package com.synopsys.integration.detectable.detectables.clang.functional;\n+\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.synopsys.integration.detectable.detectables.clang.dependencyfile.DependenyListFileParser;\n+\n+public class DependencyListFileParserTest {\n+\n+    @Test\n+    public void testSimple() {\n+        final String curDirPath = System.getProperty(\"user.dir\");\n+        final File curDir = new File(curDirPath);\n+        final File sourceFile = new File(curDir, \"src/test/resources/detectables/functional/clang/src/process.c\");\n+        final File includeFile1 = new File(curDir, \"src/test/resources/detectables/functional/clang/include/stdc-predef.h\");\n+        final File includeFile2 = new File(curDir, \"src/test/resources/detectables/functional/clang/include/assert.h\");\n+        final String fileContents = String.format(\"dependencies: %s \\\\\\n %s %s\\\\\\n\",\n+            sourceFile.getAbsolutePath(), includeFile1.getAbsolutePath(), includeFile2.getAbsolutePath());\n+\n+        final DependenyListFileParser parser = new DependenyListFileParser();\n+        final List<String> deps = parser.parseDepsMk(fileContents);\n+\n+        for (final String dep : deps) {\n+            System.out.printf(\"dep: %s\\n\", dep);\n+        }\n+        assertTrue(deps.contains(sourceFile.getAbsolutePath()));\n+        assertTrue(deps.contains(includeFile1.getAbsolutePath()));\n+        assertTrue(deps.contains(includeFile2.getAbsolutePath()));\n+    }\n+\n+    @Test\n+    public void testNonCanonical() throws IOException {\n+        final String curDirPath = System.getProperty(\"user.dir\");\n+        final File curDir = new File(curDirPath);\n+        final File sourceFile = new File(curDir, \"src/test/resources/detectables/functional/clang/src/process.c\");\n+        final File includeFile1 = new File(curDir, \"src/test/resources/detectables/functional/clang/include/stdc-predef.h\");\n+        final File includeFile2 = new File(curDir, \"src/test/resources/../../test/resources/detectables/functional/clang/include/assert.h\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "936b9cb75395c16646b2061ab350991257188c73"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1517, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}