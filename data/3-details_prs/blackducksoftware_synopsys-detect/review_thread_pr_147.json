{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxMDE1NzM1", "number": 147, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODo0Njo1MFrODwHrtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODo0Njo1MFrODwHrtw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNzg0MTE5OnYy", "diffSide": "RIGHT", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/git/parsing/model/GitConfig.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQxODo0Njo1MFrOGC8V_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQyMDo1MDowMFrOGDAcsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTczOTAwNg==", "bodyText": "Should this go in it's own class? It's only 22 lines and it only relevant to GitConfig which is why I added it here.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/147#discussion_r405739006", "createdAt": "2020-04-08T18:46:50Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/git/parsing/model/GitConfig.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.synopsys.integration.detectable.detectables.git.parsing.model;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+// A List<GitConfigNode> is a rough parsing result. This class provides a better API.\n+public class GitConfig {\n+    // Only including remote and branch nodes since the core node is not being used.\n+    private final List<GitConfigRemote> gitConfigRemotes;\n+    private final List<GitConfigBranch> gitConfigBranches;\n+\n+    public static GitConfig fromGitConfigNodes(final List<GitConfigNode> gitConfigNodes) {\n+        final List<GitConfigRemote> gitConfigRemotes = gitConfigNodes.stream()\n+                                                           .filter(node -> node.getType().equals(\"remote\"))\n+                                                           .map(node -> {\n+                                                               String remoteNodeName = node.getName().orElseThrow(() -> new IllegalArgumentException(\"Expected remote node to have a name.\"));\n+                                                               String remoteNodeUrl = node.getProperty(\"url\").orElseThrow(() -> new IllegalArgumentException(\"Expected remote node to have a url field.\"));\n+                                                               String remoteNodeFetch = node.getProperty(\"fetch\").orElseThrow(() -> new IllegalArgumentException(\"Expected remote node to have a fetch field.\"));\n+                                                               return new GitConfigRemote(remoteNodeName, remoteNodeUrl, remoteNodeFetch);\n+                                                           })\n+                                                           .collect(Collectors.toList());\n+\n+        final List<GitConfigBranch> gitConfigBranches = gitConfigNodes.stream()\n+                                                            .filter(node -> node.getType().equals(\"branch\"))\n+                                                            .map(node -> {\n+                                                                String remoteNodeName = node.getName().orElseThrow(() -> new IllegalArgumentException(\"Expected branch node to have a name.\"));\n+                                                                String remoteNodeRemote = node.getProperty(\"remote\").orElseThrow(() -> new IllegalArgumentException(\"Expected branch node to have a remote field.\"));\n+                                                                String remoteNodeMerge = node.getProperty(\"merge\").orElseThrow(() -> new IllegalArgumentException(\"Expected branch node to have a fetch field.\"));\n+                                                                return new GitConfigBranch(remoteNodeName, remoteNodeRemote, remoteNodeMerge);\n+                                                            })\n+                                                            .collect(Collectors.toList());\n+\n+        return new GitConfig(gitConfigRemotes, gitConfigBranches);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13d86f275fff325d4bbbdbf1b1f82a41993316a0"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc3MTk2MA==", "bodyText": "I think I'd lean toward leaving it in that class as you have it since there's no other complexity in that class, but I could see arguments either way. Could the constructor become private if it stays?", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/147#discussion_r405771960", "createdAt": "2020-04-08T19:47:44Z", "author": {"login": "stevebillings"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/git/parsing/model/GitConfig.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.synopsys.integration.detectable.detectables.git.parsing.model;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+// A List<GitConfigNode> is a rough parsing result. This class provides a better API.\n+public class GitConfig {\n+    // Only including remote and branch nodes since the core node is not being used.\n+    private final List<GitConfigRemote> gitConfigRemotes;\n+    private final List<GitConfigBranch> gitConfigBranches;\n+\n+    public static GitConfig fromGitConfigNodes(final List<GitConfigNode> gitConfigNodes) {\n+        final List<GitConfigRemote> gitConfigRemotes = gitConfigNodes.stream()\n+                                                           .filter(node -> node.getType().equals(\"remote\"))\n+                                                           .map(node -> {\n+                                                               String remoteNodeName = node.getName().orElseThrow(() -> new IllegalArgumentException(\"Expected remote node to have a name.\"));\n+                                                               String remoteNodeUrl = node.getProperty(\"url\").orElseThrow(() -> new IllegalArgumentException(\"Expected remote node to have a url field.\"));\n+                                                               String remoteNodeFetch = node.getProperty(\"fetch\").orElseThrow(() -> new IllegalArgumentException(\"Expected remote node to have a fetch field.\"));\n+                                                               return new GitConfigRemote(remoteNodeName, remoteNodeUrl, remoteNodeFetch);\n+                                                           })\n+                                                           .collect(Collectors.toList());\n+\n+        final List<GitConfigBranch> gitConfigBranches = gitConfigNodes.stream()\n+                                                            .filter(node -> node.getType().equals(\"branch\"))\n+                                                            .map(node -> {\n+                                                                String remoteNodeName = node.getName().orElseThrow(() -> new IllegalArgumentException(\"Expected branch node to have a name.\"));\n+                                                                String remoteNodeRemote = node.getProperty(\"remote\").orElseThrow(() -> new IllegalArgumentException(\"Expected branch node to have a remote field.\"));\n+                                                                String remoteNodeMerge = node.getProperty(\"merge\").orElseThrow(() -> new IllegalArgumentException(\"Expected branch node to have a fetch field.\"));\n+                                                                return new GitConfigBranch(remoteNodeName, remoteNodeRemote, remoteNodeMerge);\n+                                                            })\n+                                                            .collect(Collectors.toList());\n+\n+        return new GitConfig(gitConfigRemotes, gitConfigBranches);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTczOTAwNg=="}, "originalCommit": {"oid": "13d86f275fff325d4bbbdbf1b1f82a41993316a0"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc3NDU5Mw==", "bodyText": "Having the constructor public allows for easier testing. Which isn't a great reason to affect source, but I think the impact is small here.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/147#discussion_r405774593", "createdAt": "2020-04-08T19:52:32Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/git/parsing/model/GitConfig.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.synopsys.integration.detectable.detectables.git.parsing.model;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+// A List<GitConfigNode> is a rough parsing result. This class provides a better API.\n+public class GitConfig {\n+    // Only including remote and branch nodes since the core node is not being used.\n+    private final List<GitConfigRemote> gitConfigRemotes;\n+    private final List<GitConfigBranch> gitConfigBranches;\n+\n+    public static GitConfig fromGitConfigNodes(final List<GitConfigNode> gitConfigNodes) {\n+        final List<GitConfigRemote> gitConfigRemotes = gitConfigNodes.stream()\n+                                                           .filter(node -> node.getType().equals(\"remote\"))\n+                                                           .map(node -> {\n+                                                               String remoteNodeName = node.getName().orElseThrow(() -> new IllegalArgumentException(\"Expected remote node to have a name.\"));\n+                                                               String remoteNodeUrl = node.getProperty(\"url\").orElseThrow(() -> new IllegalArgumentException(\"Expected remote node to have a url field.\"));\n+                                                               String remoteNodeFetch = node.getProperty(\"fetch\").orElseThrow(() -> new IllegalArgumentException(\"Expected remote node to have a fetch field.\"));\n+                                                               return new GitConfigRemote(remoteNodeName, remoteNodeUrl, remoteNodeFetch);\n+                                                           })\n+                                                           .collect(Collectors.toList());\n+\n+        final List<GitConfigBranch> gitConfigBranches = gitConfigNodes.stream()\n+                                                            .filter(node -> node.getType().equals(\"branch\"))\n+                                                            .map(node -> {\n+                                                                String remoteNodeName = node.getName().orElseThrow(() -> new IllegalArgumentException(\"Expected branch node to have a name.\"));\n+                                                                String remoteNodeRemote = node.getProperty(\"remote\").orElseThrow(() -> new IllegalArgumentException(\"Expected branch node to have a remote field.\"));\n+                                                                String remoteNodeMerge = node.getProperty(\"merge\").orElseThrow(() -> new IllegalArgumentException(\"Expected branch node to have a fetch field.\"));\n+                                                                return new GitConfigBranch(remoteNodeName, remoteNodeRemote, remoteNodeMerge);\n+                                                            })\n+                                                            .collect(Collectors.toList());\n+\n+        return new GitConfig(gitConfigRemotes, gitConfigBranches);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTczOTAwNg=="}, "originalCommit": {"oid": "13d86f275fff325d4bbbdbf1b1f82a41993316a0"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc3NTYxNg==", "bodyText": "ah, right.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/147#discussion_r405775616", "createdAt": "2020-04-08T19:54:15Z", "author": {"login": "stevebillings"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/git/parsing/model/GitConfig.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.synopsys.integration.detectable.detectables.git.parsing.model;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+// A List<GitConfigNode> is a rough parsing result. This class provides a better API.\n+public class GitConfig {\n+    // Only including remote and branch nodes since the core node is not being used.\n+    private final List<GitConfigRemote> gitConfigRemotes;\n+    private final List<GitConfigBranch> gitConfigBranches;\n+\n+    public static GitConfig fromGitConfigNodes(final List<GitConfigNode> gitConfigNodes) {\n+        final List<GitConfigRemote> gitConfigRemotes = gitConfigNodes.stream()\n+                                                           .filter(node -> node.getType().equals(\"remote\"))\n+                                                           .map(node -> {\n+                                                               String remoteNodeName = node.getName().orElseThrow(() -> new IllegalArgumentException(\"Expected remote node to have a name.\"));\n+                                                               String remoteNodeUrl = node.getProperty(\"url\").orElseThrow(() -> new IllegalArgumentException(\"Expected remote node to have a url field.\"));\n+                                                               String remoteNodeFetch = node.getProperty(\"fetch\").orElseThrow(() -> new IllegalArgumentException(\"Expected remote node to have a fetch field.\"));\n+                                                               return new GitConfigRemote(remoteNodeName, remoteNodeUrl, remoteNodeFetch);\n+                                                           })\n+                                                           .collect(Collectors.toList());\n+\n+        final List<GitConfigBranch> gitConfigBranches = gitConfigNodes.stream()\n+                                                            .filter(node -> node.getType().equals(\"branch\"))\n+                                                            .map(node -> {\n+                                                                String remoteNodeName = node.getName().orElseThrow(() -> new IllegalArgumentException(\"Expected branch node to have a name.\"));\n+                                                                String remoteNodeRemote = node.getProperty(\"remote\").orElseThrow(() -> new IllegalArgumentException(\"Expected branch node to have a remote field.\"));\n+                                                                String remoteNodeMerge = node.getProperty(\"merge\").orElseThrow(() -> new IllegalArgumentException(\"Expected branch node to have a fetch field.\"));\n+                                                                return new GitConfigBranch(remoteNodeName, remoteNodeRemote, remoteNodeMerge);\n+                                                            })\n+                                                            .collect(Collectors.toList());\n+\n+        return new GitConfig(gitConfigRemotes, gitConfigBranches);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTczOTAwNg=="}, "originalCommit": {"oid": "13d86f275fff325d4bbbdbf1b1f82a41993316a0"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTc4MTQ1Nw==", "bodyText": "I'd very much prefer a GitConfigParser and a GitConfig data object.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/147#discussion_r405781457", "createdAt": "2020-04-08T20:04:58Z", "author": {"login": "taikuukaits"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/git/parsing/model/GitConfig.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.synopsys.integration.detectable.detectables.git.parsing.model;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+// A List<GitConfigNode> is a rough parsing result. This class provides a better API.\n+public class GitConfig {\n+    // Only including remote and branch nodes since the core node is not being used.\n+    private final List<GitConfigRemote> gitConfigRemotes;\n+    private final List<GitConfigBranch> gitConfigBranches;\n+\n+    public static GitConfig fromGitConfigNodes(final List<GitConfigNode> gitConfigNodes) {\n+        final List<GitConfigRemote> gitConfigRemotes = gitConfigNodes.stream()\n+                                                           .filter(node -> node.getType().equals(\"remote\"))\n+                                                           .map(node -> {\n+                                                               String remoteNodeName = node.getName().orElseThrow(() -> new IllegalArgumentException(\"Expected remote node to have a name.\"));\n+                                                               String remoteNodeUrl = node.getProperty(\"url\").orElseThrow(() -> new IllegalArgumentException(\"Expected remote node to have a url field.\"));\n+                                                               String remoteNodeFetch = node.getProperty(\"fetch\").orElseThrow(() -> new IllegalArgumentException(\"Expected remote node to have a fetch field.\"));\n+                                                               return new GitConfigRemote(remoteNodeName, remoteNodeUrl, remoteNodeFetch);\n+                                                           })\n+                                                           .collect(Collectors.toList());\n+\n+        final List<GitConfigBranch> gitConfigBranches = gitConfigNodes.stream()\n+                                                            .filter(node -> node.getType().equals(\"branch\"))\n+                                                            .map(node -> {\n+                                                                String remoteNodeName = node.getName().orElseThrow(() -> new IllegalArgumentException(\"Expected branch node to have a name.\"));\n+                                                                String remoteNodeRemote = node.getProperty(\"remote\").orElseThrow(() -> new IllegalArgumentException(\"Expected branch node to have a remote field.\"));\n+                                                                String remoteNodeMerge = node.getProperty(\"merge\").orElseThrow(() -> new IllegalArgumentException(\"Expected branch node to have a fetch field.\"));\n+                                                                return new GitConfigBranch(remoteNodeName, remoteNodeRemote, remoteNodeMerge);\n+                                                            })\n+                                                            .collect(Collectors.toList());\n+\n+        return new GitConfig(gitConfigRemotes, gitConfigBranches);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTczOTAwNg=="}, "originalCommit": {"oid": "13d86f275fff325d4bbbdbf1b1f82a41993316a0"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwMzcwMg==", "bodyText": "TheGitFileParser already exists. It converts the file into List. The GitConfig model is meant to wrap the GitConfig nodes with a better API.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/147#discussion_r405803702", "createdAt": "2020-04-08T20:45:28Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/git/parsing/model/GitConfig.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.synopsys.integration.detectable.detectables.git.parsing.model;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+// A List<GitConfigNode> is a rough parsing result. This class provides a better API.\n+public class GitConfig {\n+    // Only including remote and branch nodes since the core node is not being used.\n+    private final List<GitConfigRemote> gitConfigRemotes;\n+    private final List<GitConfigBranch> gitConfigBranches;\n+\n+    public static GitConfig fromGitConfigNodes(final List<GitConfigNode> gitConfigNodes) {\n+        final List<GitConfigRemote> gitConfigRemotes = gitConfigNodes.stream()\n+                                                           .filter(node -> node.getType().equals(\"remote\"))\n+                                                           .map(node -> {\n+                                                               String remoteNodeName = node.getName().orElseThrow(() -> new IllegalArgumentException(\"Expected remote node to have a name.\"));\n+                                                               String remoteNodeUrl = node.getProperty(\"url\").orElseThrow(() -> new IllegalArgumentException(\"Expected remote node to have a url field.\"));\n+                                                               String remoteNodeFetch = node.getProperty(\"fetch\").orElseThrow(() -> new IllegalArgumentException(\"Expected remote node to have a fetch field.\"));\n+                                                               return new GitConfigRemote(remoteNodeName, remoteNodeUrl, remoteNodeFetch);\n+                                                           })\n+                                                           .collect(Collectors.toList());\n+\n+        final List<GitConfigBranch> gitConfigBranches = gitConfigNodes.stream()\n+                                                            .filter(node -> node.getType().equals(\"branch\"))\n+                                                            .map(node -> {\n+                                                                String remoteNodeName = node.getName().orElseThrow(() -> new IllegalArgumentException(\"Expected branch node to have a name.\"));\n+                                                                String remoteNodeRemote = node.getProperty(\"remote\").orElseThrow(() -> new IllegalArgumentException(\"Expected branch node to have a remote field.\"));\n+                                                                String remoteNodeMerge = node.getProperty(\"merge\").orElseThrow(() -> new IllegalArgumentException(\"Expected branch node to have a fetch field.\"));\n+                                                                return new GitConfigBranch(remoteNodeName, remoteNodeRemote, remoteNodeMerge);\n+                                                            })\n+                                                            .collect(Collectors.toList());\n+\n+        return new GitConfig(gitConfigRemotes, gitConfigBranches);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTczOTAwNg=="}, "originalCommit": {"oid": "13d86f275fff325d4bbbdbf1b1f82a41993316a0"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTgwNjI1Ng==", "bodyText": "I'd still prefer the operation of transforming some data be separate from the result of the transformation.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/147#discussion_r405806256", "createdAt": "2020-04-08T20:50:00Z", "author": {"login": "taikuukaits"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/git/parsing/model/GitConfig.java", "diffHunk": "@@ -0,0 +1,48 @@\n+package com.synopsys.integration.detectable.detectables.git.parsing.model;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+// A List<GitConfigNode> is a rough parsing result. This class provides a better API.\n+public class GitConfig {\n+    // Only including remote and branch nodes since the core node is not being used.\n+    private final List<GitConfigRemote> gitConfigRemotes;\n+    private final List<GitConfigBranch> gitConfigBranches;\n+\n+    public static GitConfig fromGitConfigNodes(final List<GitConfigNode> gitConfigNodes) {\n+        final List<GitConfigRemote> gitConfigRemotes = gitConfigNodes.stream()\n+                                                           .filter(node -> node.getType().equals(\"remote\"))\n+                                                           .map(node -> {\n+                                                               String remoteNodeName = node.getName().orElseThrow(() -> new IllegalArgumentException(\"Expected remote node to have a name.\"));\n+                                                               String remoteNodeUrl = node.getProperty(\"url\").orElseThrow(() -> new IllegalArgumentException(\"Expected remote node to have a url field.\"));\n+                                                               String remoteNodeFetch = node.getProperty(\"fetch\").orElseThrow(() -> new IllegalArgumentException(\"Expected remote node to have a fetch field.\"));\n+                                                               return new GitConfigRemote(remoteNodeName, remoteNodeUrl, remoteNodeFetch);\n+                                                           })\n+                                                           .collect(Collectors.toList());\n+\n+        final List<GitConfigBranch> gitConfigBranches = gitConfigNodes.stream()\n+                                                            .filter(node -> node.getType().equals(\"branch\"))\n+                                                            .map(node -> {\n+                                                                String remoteNodeName = node.getName().orElseThrow(() -> new IllegalArgumentException(\"Expected branch node to have a name.\"));\n+                                                                String remoteNodeRemote = node.getProperty(\"remote\").orElseThrow(() -> new IllegalArgumentException(\"Expected branch node to have a remote field.\"));\n+                                                                String remoteNodeMerge = node.getProperty(\"merge\").orElseThrow(() -> new IllegalArgumentException(\"Expected branch node to have a fetch field.\"));\n+                                                                return new GitConfigBranch(remoteNodeName, remoteNodeRemote, remoteNodeMerge);\n+                                                            })\n+                                                            .collect(Collectors.toList());\n+\n+        return new GitConfig(gitConfigRemotes, gitConfigBranches);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTczOTAwNg=="}, "originalCommit": {"oid": "13d86f275fff325d4bbbdbf1b1f82a41993316a0"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1586, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}