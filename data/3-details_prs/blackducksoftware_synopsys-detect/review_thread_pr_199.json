{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQyNzg5Njgx", "number": 199, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODowNjo0N1rOELyp9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODoxMDoxMlrOELyuVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwNzk5NzM0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/detect/DetectConfigurationFactoryJava.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODowNjo0N1rOGth4oQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODowNjo0N1rOGth4oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5NDI3Mw==", "bodyText": "Missing a toLowerCase()", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/199#discussion_r450394273", "createdAt": "2020-07-06T18:06:47Z", "author": {"login": "taikuukaits"}, "path": "src/main/java/com/synopsys/integration/detect/DetectConfigurationFactoryJava.java", "diffHunk": "@@ -0,0 +1,466 @@\n+package com.synopsys.integration.detect;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.stream.Collectors.toSet;\n+\n+import java.io.File;\n+import java.io.FileFilter;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.jetbrains.annotations.Nullable;\n+\n+import com.sun.org.apache.xpath.internal.operations.Bool;\n+import com.synopsys.integration.blackduck.api.generated.enumeration.LicenseFamilyLicenseFamilyRiskRulesReleaseDistributionType;\n+import com.synopsys.integration.blackduck.api.generated.enumeration.PolicyRuleSeverityType;\n+import com.synopsys.integration.blackduck.api.generated.enumeration.ProjectCloneCategoriesType;\n+import com.synopsys.integration.blackduck.api.manual.throwaway.generated.enumeration.ProjectVersionPhaseType;\n+import com.synopsys.integration.blackduck.codelocation.signaturescanner.command.IndividualFileMatching;\n+import com.synopsys.integration.blackduck.codelocation.signaturescanner.command.SnippetMatching;\n+import com.synopsys.integration.blackduck.configuration.BlackDuckServerConfigBuilder;\n+import com.synopsys.integration.configuration.config.InvalidPropertyException;\n+import com.synopsys.integration.configuration.config.PropertyConfiguration;\n+import com.synopsys.integration.configuration.property.types.enumextended.ExtendedEnumProperty;\n+import com.synopsys.integration.configuration.property.types.enumextended.ExtendedEnumValue;\n+import com.synopsys.integration.configuration.property.types.enumfilterable.FilterableEnumUtils;\n+import com.synopsys.integration.configuration.property.types.enumfilterable.FilterableEnumValue;\n+import com.synopsys.integration.configuration.property.types.path.PathResolver;\n+import com.synopsys.integration.configuration.property.types.path.PathValue;\n+import com.synopsys.integration.detect.configuration.DetectCustomFieldParser;\n+import com.synopsys.integration.detect.configuration.DetectProperties;\n+import com.synopsys.integration.detect.configuration.DetectorSearchExcludedDirectories;\n+import com.synopsys.integration.detect.configuration.ExcludeIncludeEnumFilter;\n+import com.synopsys.integration.detect.configuration.connection.BlackDuckConnectionDetails;\n+import com.synopsys.integration.detect.configuration.connection.ConnectionDetails;\n+import com.synopsys.integration.detect.configuration.enums.DefaultVersionNameScheme;\n+import com.synopsys.integration.detect.exception.DetectUserFriendlyException;\n+import com.synopsys.integration.detect.exitcode.ExitCodeType;\n+import com.synopsys.integration.detect.lifecycle.boot.product.ProductBootOptions;\n+import com.synopsys.integration.detect.lifecycle.run.RunOptions;\n+import com.synopsys.integration.detect.tool.binaryscanner.BinaryScanOptions;\n+import com.synopsys.integration.detect.tool.detector.DetectFileFinder;\n+import com.synopsys.integration.detect.tool.detector.impl.DetectDetectorFileFilter;\n+import com.synopsys.integration.detect.tool.detector.impl.DetectExecutableOptions;\n+import com.synopsys.integration.detect.tool.signaturescanner.BlackDuckSignatureScannerOptions;\n+import com.synopsys.integration.detect.tool.signaturescanner.enums.ExtendedIndividualFileMatchingMode;\n+import com.synopsys.integration.detect.tool.signaturescanner.enums.ExtendedSnippetMode;\n+import com.synopsys.integration.detect.util.filter.DetectFilter;\n+import com.synopsys.integration.detect.util.filter.DetectToolFilter;\n+import com.synopsys.integration.detect.workflow.airgap.AirGapOptions;\n+import com.synopsys.integration.detect.workflow.bdio.AggregateMode;\n+import com.synopsys.integration.detect.workflow.bdio.BdioOptions;\n+import com.synopsys.integration.detect.workflow.blackduck.BlackDuckPostOptions;\n+import com.synopsys.integration.detect.workflow.blackduck.CustomFieldDocument;\n+import com.synopsys.integration.detect.workflow.blackduck.DetectProjectServiceOptions;\n+import com.synopsys.integration.detect.workflow.file.DirectoryOptions;\n+import com.synopsys.integration.detect.workflow.phonehome.PhoneHomeOptions;\n+import com.synopsys.integration.detect.workflow.project.ProjectNameVersionOptions;\n+import com.synopsys.integration.detectable.detectable.file.FileFinder;\n+import com.synopsys.integration.detector.base.DetectorType;\n+import com.synopsys.integration.detector.evaluation.DetectorEvaluationOptions;\n+import com.synopsys.integration.detector.finder.DetectorFinderOptions;\n+import com.synopsys.integration.log.SilentIntLogger;\n+import com.synopsys.integration.polaris.common.configuration.PolarisServerConfig;\n+import com.synopsys.integration.polaris.common.configuration.PolarisServerConfigBuilder;\n+import com.synopsys.integration.rest.credentials.Credentials;\n+import com.synopsys.integration.rest.credentials.CredentialsBuilder;\n+import com.synopsys.integration.rest.proxy.ProxyInfo;\n+import com.synopsys.integration.rest.proxy.ProxyInfoBuilder;\n+import com.synopsys.integration.util.ExcludedIncludedFilter;\n+import com.synopsys.integration.util.ExcludedIncludedWildcardFilter;\n+\n+import kotlin.jvm.Throws;\n+\n+public class DetectConfigurationFactoryJava {\n+\n+    private PropertyConfiguration detectConfiguration;\n+    private PathResolver pathResolver;\n+\n+    //#region Prefer These Over Any Property\n+    public Long findTimeoutInSeconds() throws InvalidPropertyException {\n+        if (detectConfiguration.wasPropertyProvided(DetectProperties.Companion.getDETECT_API_TIMEOUT())) {\n+            Long timeout = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_API_TIMEOUT());\n+            return timeout / 1000;\n+        } else {\n+            return detectConfiguration.getValue(DetectProperties.Companion.getDETECT_REPORT_TIMEOUT());\n+        }\n+    }\n+\n+    public int findParallelProcessors() throws InvalidPropertyException {\n+        int provided = 0;\n+        if (detectConfiguration.wasPropertyProvided(DetectProperties.Companion.getDETECT_PARALLEL_PROCESSORS())) {\n+            provided = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_PARALLEL_PROCESSORS());\n+        }\n+        else if (detectConfiguration.wasPropertyProvided(DetectProperties.Companion.getDETECT_BLACKDUCK_SIGNATURE_SCANNER_PARALLEL_PROCESSORS())) {\n+            provided = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_BLACKDUCK_SIGNATURE_SCANNER_PARALLEL_PROCESSORS());\n+        }\n+        else if (detectConfiguration.wasPropertyProvided(DetectProperties.Companion.getDETECT_HUB_SIGNATURE_SCANNER_PARALLEL_PROCESSORS())) {\n+            provided = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_HUB_SIGNATURE_SCANNER_PARALLEL_PROCESSORS());\n+        }\n+        else {\n+            provided = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_PARALLEL_PROCESSORS());\n+        }\n+\n+        if (provided > 0) {\n+            return provided;\n+        } else {\n+            return findRuntimeProcessors();\n+        }\n+    }\n+\n+    private int findRuntimeProcessors() {\n+        return Runtime.getRuntime().availableProcessors();\n+    }\n+\n+    @Nullable\n+    public SnippetMatching findSnippetMatching() throws InvalidPropertyException {\n+        ExtendedEnumValue<ExtendedSnippetMode, SnippetMatching> snippetMatching = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_BLACKDUCK_SIGNATURE_SCANNER_SNIPPET_MATCHING());\n+\n+        SnippetMatching deprecatedSnippetMatching;\n+        if (detectConfiguration.getValue(DetectProperties.Companion.getDETECT_BLACKDUCK_SIGNATURE_SCANNER_SNIPPET_MODE())) {\n+            deprecatedSnippetMatching = SnippetMatching.SNIPPET_MATCHING;\n+        } else {\n+            deprecatedSnippetMatching = null;\n+        }\n+\n+        if (snippetMatching.getBaseValue().isPresent()) {\n+            return snippetMatching.getBaseValue().get();\n+        }\n+\n+        if (snippetMatching.getExtendedValue().isPresent()) {\n+            return deprecatedSnippetMatching;\n+        }\n+\n+        return null;\n+    }\n+\n+    @Nullable\n+    public IndividualFileMatching findIndividualFileMatching() throws InvalidPropertyException {\n+        ExtendedEnumValue<ExtendedIndividualFileMatchingMode, IndividualFileMatching> individualFileMatching = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_BLACKDUCK_SIGNATURE_SCANNER_INDIVIDUAL_FILE_MATCHING());\n+\n+        if (individualFileMatching.getBaseValue().isPresent()) {\n+            return individualFileMatching.getBaseValue().get();\n+        }\n+\n+        return null;\n+    }\n+\n+    //#endregion\n+\n+    //#region Creating Connections\n+    public ProxyInfo createBlackDuckProxyInfo() throws DetectUserFriendlyException{\n+        String proxyUsername = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_USERNAME(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_USERNAME()).orElse(null);\n+        String proxyPassword = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_PASSWORD(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_PASSWORD()).orElse(null);\n+        String proxyHost = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_HOST(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_HOST()).orElse(null);\n+        String proxyPort = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_PORT(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_PORT()).orElse(null);\n+        String proxyNtlmDomain = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_NTLM_DOMAIN(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_NTLM_DOMAIN()).orElse(null);\n+        String proxyNtlmWorkstation = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_NTLM_WORKSTATION(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_NTLM_WORKSTATION()).orElse(null);\n+\n+        CredentialsBuilder proxyCredentialsBuilder = new CredentialsBuilder();\n+        proxyCredentialsBuilder.setUsername(proxyUsername);\n+        proxyCredentialsBuilder.setPassword(proxyPassword);\n+        Credentials proxyCredentials;\n+        try {\n+            proxyCredentials = proxyCredentialsBuilder.build();\n+        } catch (IllegalArgumentException e) {\n+            throw new DetectUserFriendlyException(String.format(\"Your proxy credentials configuration is not valid: %s\", e.getMessage()), e, ExitCodeType.FAILURE_PROXY_CONNECTIVITY);\n+        }\n+\n+        ProxyInfoBuilder proxyInfoBuilder = new ProxyInfoBuilder();\n+\n+        proxyInfoBuilder.setCredentials(proxyCredentials);\n+        proxyInfoBuilder.setHost(proxyHost);\n+        proxyInfoBuilder.setPort(NumberUtils.toInt(proxyPort, 0));\n+        proxyInfoBuilder.setNtlmDomain(proxyNtlmDomain);\n+        proxyInfoBuilder.setNtlmWorkstation(proxyNtlmWorkstation);\n+        try {\n+            return proxyInfoBuilder.build();\n+        } catch (IllegalArgumentException e) {\n+            throw new DetectUserFriendlyException(String.format(\"Your proxy configuration is not valid: %s\", e.getMessage()), e, ExitCodeType.FAILURE_PROXY_CONNECTIVITY);\n+        }\n+    }\n+\n+    public ProductBootOptions createProductBootOptions() {\n+        Boolean ignoreFailures = detectConfiguration.getValueOrDefault(DetectProperties.Companion.getDETECT_IGNORE_CONNECTION_FAILURES());\n+        Boolean testConnections = detectConfiguration.getValueOrDefault(DetectProperties.Companion.getDETECT_TEST_CONNECTION());\n+        return new ProductBootOptions(ignoreFailures, testConnections);\n+    }\n+\n+    public ConnectionDetails createConnectionDetails() throws DetectUserFriendlyException, InvalidPropertyException {\n+        Boolean alwaysTrust = PropertyConfigUtils.getFirstProvidedValueOrDefault(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_TRUST_CERT(), DetectProperties.Companion.getBLACKDUCK_HUB_TRUST_CERT());\n+        List<String> proxyIgnoredHosts = PropertyConfigUtils.getFirstProvidedValueOrDefault(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_IGNORED_HOSTS(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_IGNORED_HOSTS());\n+        List<Pattern> proxyPatterns = proxyIgnoredHosts.stream()\n+        .map(it -> Pattern.compile(it))\n+            .collect(Collectors.toList());\n+        ProxyInfo proxyInformation = createBlackDuckProxyInfo();\n+        return new ConnectionDetails(proxyInformation, proxyPatterns, findTimeoutInSeconds(), alwaysTrust);\n+    }\n+\n+    public BlackDuckConnectionDetails createBlackDuckConnectionDetails() throws InvalidPropertyException, DetectUserFriendlyException {\n+        Boolean offline = PropertyConfigUtils.getFirstProvidedValueOrDefault(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_OFFLINE_MODE(), DetectProperties.Companion.getBLACKDUCK_HUB_OFFLINE_MODE());\n+        String blackduckUrl = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_URL(), DetectProperties.Companion.getBLACKDUCK_HUB_URL()).orElse(null);\n+        Set<String> allBlackDuckKeys = new BlackDuckServerConfigBuilder().getPropertyKeys().stream()\n+                                           .filter(it -> !(it .contains(\"proxy\")))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de1970859a0e263e30e13d9fd51587e7252caf4"}, "originalPosition": 213}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODAwMTU4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/detect/DetectConfigurationFactoryJava.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODowNzo1NlrOGth7KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODowNzo1NlrOGth7KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5NDkyMQ==", "bodyText": "Small but should do the orElse(null) on this line. String polarisUrlValue = ...orElse(null);", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/199#discussion_r450394921", "createdAt": "2020-07-06T18:07:56Z", "author": {"login": "taikuukaits"}, "path": "src/main/java/com/synopsys/integration/detect/DetectConfigurationFactoryJava.java", "diffHunk": "@@ -0,0 +1,466 @@\n+package com.synopsys.integration.detect;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.stream.Collectors.toSet;\n+\n+import java.io.File;\n+import java.io.FileFilter;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.jetbrains.annotations.Nullable;\n+\n+import com.sun.org.apache.xpath.internal.operations.Bool;\n+import com.synopsys.integration.blackduck.api.generated.enumeration.LicenseFamilyLicenseFamilyRiskRulesReleaseDistributionType;\n+import com.synopsys.integration.blackduck.api.generated.enumeration.PolicyRuleSeverityType;\n+import com.synopsys.integration.blackduck.api.generated.enumeration.ProjectCloneCategoriesType;\n+import com.synopsys.integration.blackduck.api.manual.throwaway.generated.enumeration.ProjectVersionPhaseType;\n+import com.synopsys.integration.blackduck.codelocation.signaturescanner.command.IndividualFileMatching;\n+import com.synopsys.integration.blackduck.codelocation.signaturescanner.command.SnippetMatching;\n+import com.synopsys.integration.blackduck.configuration.BlackDuckServerConfigBuilder;\n+import com.synopsys.integration.configuration.config.InvalidPropertyException;\n+import com.synopsys.integration.configuration.config.PropertyConfiguration;\n+import com.synopsys.integration.configuration.property.types.enumextended.ExtendedEnumProperty;\n+import com.synopsys.integration.configuration.property.types.enumextended.ExtendedEnumValue;\n+import com.synopsys.integration.configuration.property.types.enumfilterable.FilterableEnumUtils;\n+import com.synopsys.integration.configuration.property.types.enumfilterable.FilterableEnumValue;\n+import com.synopsys.integration.configuration.property.types.path.PathResolver;\n+import com.synopsys.integration.configuration.property.types.path.PathValue;\n+import com.synopsys.integration.detect.configuration.DetectCustomFieldParser;\n+import com.synopsys.integration.detect.configuration.DetectProperties;\n+import com.synopsys.integration.detect.configuration.DetectorSearchExcludedDirectories;\n+import com.synopsys.integration.detect.configuration.ExcludeIncludeEnumFilter;\n+import com.synopsys.integration.detect.configuration.connection.BlackDuckConnectionDetails;\n+import com.synopsys.integration.detect.configuration.connection.ConnectionDetails;\n+import com.synopsys.integration.detect.configuration.enums.DefaultVersionNameScheme;\n+import com.synopsys.integration.detect.exception.DetectUserFriendlyException;\n+import com.synopsys.integration.detect.exitcode.ExitCodeType;\n+import com.synopsys.integration.detect.lifecycle.boot.product.ProductBootOptions;\n+import com.synopsys.integration.detect.lifecycle.run.RunOptions;\n+import com.synopsys.integration.detect.tool.binaryscanner.BinaryScanOptions;\n+import com.synopsys.integration.detect.tool.detector.DetectFileFinder;\n+import com.synopsys.integration.detect.tool.detector.impl.DetectDetectorFileFilter;\n+import com.synopsys.integration.detect.tool.detector.impl.DetectExecutableOptions;\n+import com.synopsys.integration.detect.tool.signaturescanner.BlackDuckSignatureScannerOptions;\n+import com.synopsys.integration.detect.tool.signaturescanner.enums.ExtendedIndividualFileMatchingMode;\n+import com.synopsys.integration.detect.tool.signaturescanner.enums.ExtendedSnippetMode;\n+import com.synopsys.integration.detect.util.filter.DetectFilter;\n+import com.synopsys.integration.detect.util.filter.DetectToolFilter;\n+import com.synopsys.integration.detect.workflow.airgap.AirGapOptions;\n+import com.synopsys.integration.detect.workflow.bdio.AggregateMode;\n+import com.synopsys.integration.detect.workflow.bdio.BdioOptions;\n+import com.synopsys.integration.detect.workflow.blackduck.BlackDuckPostOptions;\n+import com.synopsys.integration.detect.workflow.blackduck.CustomFieldDocument;\n+import com.synopsys.integration.detect.workflow.blackduck.DetectProjectServiceOptions;\n+import com.synopsys.integration.detect.workflow.file.DirectoryOptions;\n+import com.synopsys.integration.detect.workflow.phonehome.PhoneHomeOptions;\n+import com.synopsys.integration.detect.workflow.project.ProjectNameVersionOptions;\n+import com.synopsys.integration.detectable.detectable.file.FileFinder;\n+import com.synopsys.integration.detector.base.DetectorType;\n+import com.synopsys.integration.detector.evaluation.DetectorEvaluationOptions;\n+import com.synopsys.integration.detector.finder.DetectorFinderOptions;\n+import com.synopsys.integration.log.SilentIntLogger;\n+import com.synopsys.integration.polaris.common.configuration.PolarisServerConfig;\n+import com.synopsys.integration.polaris.common.configuration.PolarisServerConfigBuilder;\n+import com.synopsys.integration.rest.credentials.Credentials;\n+import com.synopsys.integration.rest.credentials.CredentialsBuilder;\n+import com.synopsys.integration.rest.proxy.ProxyInfo;\n+import com.synopsys.integration.rest.proxy.ProxyInfoBuilder;\n+import com.synopsys.integration.util.ExcludedIncludedFilter;\n+import com.synopsys.integration.util.ExcludedIncludedWildcardFilter;\n+\n+import kotlin.jvm.Throws;\n+\n+public class DetectConfigurationFactoryJava {\n+\n+    private PropertyConfiguration detectConfiguration;\n+    private PathResolver pathResolver;\n+\n+    //#region Prefer These Over Any Property\n+    public Long findTimeoutInSeconds() throws InvalidPropertyException {\n+        if (detectConfiguration.wasPropertyProvided(DetectProperties.Companion.getDETECT_API_TIMEOUT())) {\n+            Long timeout = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_API_TIMEOUT());\n+            return timeout / 1000;\n+        } else {\n+            return detectConfiguration.getValue(DetectProperties.Companion.getDETECT_REPORT_TIMEOUT());\n+        }\n+    }\n+\n+    public int findParallelProcessors() throws InvalidPropertyException {\n+        int provided = 0;\n+        if (detectConfiguration.wasPropertyProvided(DetectProperties.Companion.getDETECT_PARALLEL_PROCESSORS())) {\n+            provided = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_PARALLEL_PROCESSORS());\n+        }\n+        else if (detectConfiguration.wasPropertyProvided(DetectProperties.Companion.getDETECT_BLACKDUCK_SIGNATURE_SCANNER_PARALLEL_PROCESSORS())) {\n+            provided = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_BLACKDUCK_SIGNATURE_SCANNER_PARALLEL_PROCESSORS());\n+        }\n+        else if (detectConfiguration.wasPropertyProvided(DetectProperties.Companion.getDETECT_HUB_SIGNATURE_SCANNER_PARALLEL_PROCESSORS())) {\n+            provided = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_HUB_SIGNATURE_SCANNER_PARALLEL_PROCESSORS());\n+        }\n+        else {\n+            provided = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_PARALLEL_PROCESSORS());\n+        }\n+\n+        if (provided > 0) {\n+            return provided;\n+        } else {\n+            return findRuntimeProcessors();\n+        }\n+    }\n+\n+    private int findRuntimeProcessors() {\n+        return Runtime.getRuntime().availableProcessors();\n+    }\n+\n+    @Nullable\n+    public SnippetMatching findSnippetMatching() throws InvalidPropertyException {\n+        ExtendedEnumValue<ExtendedSnippetMode, SnippetMatching> snippetMatching = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_BLACKDUCK_SIGNATURE_SCANNER_SNIPPET_MATCHING());\n+\n+        SnippetMatching deprecatedSnippetMatching;\n+        if (detectConfiguration.getValue(DetectProperties.Companion.getDETECT_BLACKDUCK_SIGNATURE_SCANNER_SNIPPET_MODE())) {\n+            deprecatedSnippetMatching = SnippetMatching.SNIPPET_MATCHING;\n+        } else {\n+            deprecatedSnippetMatching = null;\n+        }\n+\n+        if (snippetMatching.getBaseValue().isPresent()) {\n+            return snippetMatching.getBaseValue().get();\n+        }\n+\n+        if (snippetMatching.getExtendedValue().isPresent()) {\n+            return deprecatedSnippetMatching;\n+        }\n+\n+        return null;\n+    }\n+\n+    @Nullable\n+    public IndividualFileMatching findIndividualFileMatching() throws InvalidPropertyException {\n+        ExtendedEnumValue<ExtendedIndividualFileMatchingMode, IndividualFileMatching> individualFileMatching = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_BLACKDUCK_SIGNATURE_SCANNER_INDIVIDUAL_FILE_MATCHING());\n+\n+        if (individualFileMatching.getBaseValue().isPresent()) {\n+            return individualFileMatching.getBaseValue().get();\n+        }\n+\n+        return null;\n+    }\n+\n+    //#endregion\n+\n+    //#region Creating Connections\n+    public ProxyInfo createBlackDuckProxyInfo() throws DetectUserFriendlyException{\n+        String proxyUsername = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_USERNAME(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_USERNAME()).orElse(null);\n+        String proxyPassword = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_PASSWORD(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_PASSWORD()).orElse(null);\n+        String proxyHost = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_HOST(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_HOST()).orElse(null);\n+        String proxyPort = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_PORT(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_PORT()).orElse(null);\n+        String proxyNtlmDomain = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_NTLM_DOMAIN(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_NTLM_DOMAIN()).orElse(null);\n+        String proxyNtlmWorkstation = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_NTLM_WORKSTATION(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_NTLM_WORKSTATION()).orElse(null);\n+\n+        CredentialsBuilder proxyCredentialsBuilder = new CredentialsBuilder();\n+        proxyCredentialsBuilder.setUsername(proxyUsername);\n+        proxyCredentialsBuilder.setPassword(proxyPassword);\n+        Credentials proxyCredentials;\n+        try {\n+            proxyCredentials = proxyCredentialsBuilder.build();\n+        } catch (IllegalArgumentException e) {\n+            throw new DetectUserFriendlyException(String.format(\"Your proxy credentials configuration is not valid: %s\", e.getMessage()), e, ExitCodeType.FAILURE_PROXY_CONNECTIVITY);\n+        }\n+\n+        ProxyInfoBuilder proxyInfoBuilder = new ProxyInfoBuilder();\n+\n+        proxyInfoBuilder.setCredentials(proxyCredentials);\n+        proxyInfoBuilder.setHost(proxyHost);\n+        proxyInfoBuilder.setPort(NumberUtils.toInt(proxyPort, 0));\n+        proxyInfoBuilder.setNtlmDomain(proxyNtlmDomain);\n+        proxyInfoBuilder.setNtlmWorkstation(proxyNtlmWorkstation);\n+        try {\n+            return proxyInfoBuilder.build();\n+        } catch (IllegalArgumentException e) {\n+            throw new DetectUserFriendlyException(String.format(\"Your proxy configuration is not valid: %s\", e.getMessage()), e, ExitCodeType.FAILURE_PROXY_CONNECTIVITY);\n+        }\n+    }\n+\n+    public ProductBootOptions createProductBootOptions() {\n+        Boolean ignoreFailures = detectConfiguration.getValueOrDefault(DetectProperties.Companion.getDETECT_IGNORE_CONNECTION_FAILURES());\n+        Boolean testConnections = detectConfiguration.getValueOrDefault(DetectProperties.Companion.getDETECT_TEST_CONNECTION());\n+        return new ProductBootOptions(ignoreFailures, testConnections);\n+    }\n+\n+    public ConnectionDetails createConnectionDetails() throws DetectUserFriendlyException, InvalidPropertyException {\n+        Boolean alwaysTrust = PropertyConfigUtils.getFirstProvidedValueOrDefault(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_TRUST_CERT(), DetectProperties.Companion.getBLACKDUCK_HUB_TRUST_CERT());\n+        List<String> proxyIgnoredHosts = PropertyConfigUtils.getFirstProvidedValueOrDefault(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_IGNORED_HOSTS(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_IGNORED_HOSTS());\n+        List<Pattern> proxyPatterns = proxyIgnoredHosts.stream()\n+        .map(it -> Pattern.compile(it))\n+            .collect(Collectors.toList());\n+        ProxyInfo proxyInformation = createBlackDuckProxyInfo();\n+        return new ConnectionDetails(proxyInformation, proxyPatterns, findTimeoutInSeconds(), alwaysTrust);\n+    }\n+\n+    public BlackDuckConnectionDetails createBlackDuckConnectionDetails() throws InvalidPropertyException, DetectUserFriendlyException {\n+        Boolean offline = PropertyConfigUtils.getFirstProvidedValueOrDefault(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_OFFLINE_MODE(), DetectProperties.Companion.getBLACKDUCK_HUB_OFFLINE_MODE());\n+        String blackduckUrl = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_URL(), DetectProperties.Companion.getBLACKDUCK_HUB_URL()).orElse(null);\n+        Set<String> allBlackDuckKeys = new BlackDuckServerConfigBuilder().getPropertyKeys().stream()\n+                                           .filter(it -> !(it .contains(\"proxy\")))\n+                                           .collect(Collectors.toSet());\n+        Map<String, String> blackDuckProperties = detectConfiguration.getRaw(allBlackDuckKeys);\n+\n+        return new BlackDuckConnectionDetails(offline, blackduckUrl, blackDuckProperties, findParallelProcessors(), createConnectionDetails());\n+    }\n+    //#endregion\n+\n+    public PolarisServerConfigBuilder createPolarisServerConfigBuilder(File userHome) throws InvalidPropertyException {\n+        PolarisServerConfigBuilder polarisServerConfigBuilder = PolarisServerConfig.newBuilder();\n+        Set<String> allPolarisKeys = polarisServerConfigBuilder.getPropertyKeys();\n+        Map<String, String> polarisProperties = detectConfiguration.getRaw(allPolarisKeys);\n+\n+        // Detect and polaris-common use different property keys for the Polaris URL,\n+        // so we need to pull it from they Detect config using Detect's key,\n+        // and write it to the polaris-common config using the polaris-common key.\n+        Optional<String> polarisUrlValue = detectConfiguration.getRaw(DetectProperties.Companion.getPOLARIS_URL());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de1970859a0e263e30e13d9fd51587e7252caf4"}, "originalPosition": 229}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODAwODUzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/detect/DetectConfigurationFactoryJava.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODoxMDoxMlrOGth_dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODo1OTowOFrOGtjfeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5NjAyMw==", "bodyText": "Could we make some kind of utility method for getting paths?\nFor example but not limited to:\nvar configurationPaths = ConfigurationPathResolver(configuration, pathResolver)\nconfigurationPaths.getPathOrNull(DetectProperties.Companion.getDETECT_SOURCE_PATH())\nOr even just a local method getPathOrNull()", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/199#discussion_r450396023", "createdAt": "2020-07-06T18:10:12Z", "author": {"login": "taikuukaits"}, "path": "src/main/java/com/synopsys/integration/detect/DetectConfigurationFactoryJava.java", "diffHunk": "@@ -0,0 +1,466 @@\n+package com.synopsys.integration.detect;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.stream.Collectors.toSet;\n+\n+import java.io.File;\n+import java.io.FileFilter;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.jetbrains.annotations.Nullable;\n+\n+import com.sun.org.apache.xpath.internal.operations.Bool;\n+import com.synopsys.integration.blackduck.api.generated.enumeration.LicenseFamilyLicenseFamilyRiskRulesReleaseDistributionType;\n+import com.synopsys.integration.blackduck.api.generated.enumeration.PolicyRuleSeverityType;\n+import com.synopsys.integration.blackduck.api.generated.enumeration.ProjectCloneCategoriesType;\n+import com.synopsys.integration.blackduck.api.manual.throwaway.generated.enumeration.ProjectVersionPhaseType;\n+import com.synopsys.integration.blackduck.codelocation.signaturescanner.command.IndividualFileMatching;\n+import com.synopsys.integration.blackduck.codelocation.signaturescanner.command.SnippetMatching;\n+import com.synopsys.integration.blackduck.configuration.BlackDuckServerConfigBuilder;\n+import com.synopsys.integration.configuration.config.InvalidPropertyException;\n+import com.synopsys.integration.configuration.config.PropertyConfiguration;\n+import com.synopsys.integration.configuration.property.types.enumextended.ExtendedEnumProperty;\n+import com.synopsys.integration.configuration.property.types.enumextended.ExtendedEnumValue;\n+import com.synopsys.integration.configuration.property.types.enumfilterable.FilterableEnumUtils;\n+import com.synopsys.integration.configuration.property.types.enumfilterable.FilterableEnumValue;\n+import com.synopsys.integration.configuration.property.types.path.PathResolver;\n+import com.synopsys.integration.configuration.property.types.path.PathValue;\n+import com.synopsys.integration.detect.configuration.DetectCustomFieldParser;\n+import com.synopsys.integration.detect.configuration.DetectProperties;\n+import com.synopsys.integration.detect.configuration.DetectorSearchExcludedDirectories;\n+import com.synopsys.integration.detect.configuration.ExcludeIncludeEnumFilter;\n+import com.synopsys.integration.detect.configuration.connection.BlackDuckConnectionDetails;\n+import com.synopsys.integration.detect.configuration.connection.ConnectionDetails;\n+import com.synopsys.integration.detect.configuration.enums.DefaultVersionNameScheme;\n+import com.synopsys.integration.detect.exception.DetectUserFriendlyException;\n+import com.synopsys.integration.detect.exitcode.ExitCodeType;\n+import com.synopsys.integration.detect.lifecycle.boot.product.ProductBootOptions;\n+import com.synopsys.integration.detect.lifecycle.run.RunOptions;\n+import com.synopsys.integration.detect.tool.binaryscanner.BinaryScanOptions;\n+import com.synopsys.integration.detect.tool.detector.DetectFileFinder;\n+import com.synopsys.integration.detect.tool.detector.impl.DetectDetectorFileFilter;\n+import com.synopsys.integration.detect.tool.detector.impl.DetectExecutableOptions;\n+import com.synopsys.integration.detect.tool.signaturescanner.BlackDuckSignatureScannerOptions;\n+import com.synopsys.integration.detect.tool.signaturescanner.enums.ExtendedIndividualFileMatchingMode;\n+import com.synopsys.integration.detect.tool.signaturescanner.enums.ExtendedSnippetMode;\n+import com.synopsys.integration.detect.util.filter.DetectFilter;\n+import com.synopsys.integration.detect.util.filter.DetectToolFilter;\n+import com.synopsys.integration.detect.workflow.airgap.AirGapOptions;\n+import com.synopsys.integration.detect.workflow.bdio.AggregateMode;\n+import com.synopsys.integration.detect.workflow.bdio.BdioOptions;\n+import com.synopsys.integration.detect.workflow.blackduck.BlackDuckPostOptions;\n+import com.synopsys.integration.detect.workflow.blackduck.CustomFieldDocument;\n+import com.synopsys.integration.detect.workflow.blackduck.DetectProjectServiceOptions;\n+import com.synopsys.integration.detect.workflow.file.DirectoryOptions;\n+import com.synopsys.integration.detect.workflow.phonehome.PhoneHomeOptions;\n+import com.synopsys.integration.detect.workflow.project.ProjectNameVersionOptions;\n+import com.synopsys.integration.detectable.detectable.file.FileFinder;\n+import com.synopsys.integration.detector.base.DetectorType;\n+import com.synopsys.integration.detector.evaluation.DetectorEvaluationOptions;\n+import com.synopsys.integration.detector.finder.DetectorFinderOptions;\n+import com.synopsys.integration.log.SilentIntLogger;\n+import com.synopsys.integration.polaris.common.configuration.PolarisServerConfig;\n+import com.synopsys.integration.polaris.common.configuration.PolarisServerConfigBuilder;\n+import com.synopsys.integration.rest.credentials.Credentials;\n+import com.synopsys.integration.rest.credentials.CredentialsBuilder;\n+import com.synopsys.integration.rest.proxy.ProxyInfo;\n+import com.synopsys.integration.rest.proxy.ProxyInfoBuilder;\n+import com.synopsys.integration.util.ExcludedIncludedFilter;\n+import com.synopsys.integration.util.ExcludedIncludedWildcardFilter;\n+\n+import kotlin.jvm.Throws;\n+\n+public class DetectConfigurationFactoryJava {\n+\n+    private PropertyConfiguration detectConfiguration;\n+    private PathResolver pathResolver;\n+\n+    //#region Prefer These Over Any Property\n+    public Long findTimeoutInSeconds() throws InvalidPropertyException {\n+        if (detectConfiguration.wasPropertyProvided(DetectProperties.Companion.getDETECT_API_TIMEOUT())) {\n+            Long timeout = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_API_TIMEOUT());\n+            return timeout / 1000;\n+        } else {\n+            return detectConfiguration.getValue(DetectProperties.Companion.getDETECT_REPORT_TIMEOUT());\n+        }\n+    }\n+\n+    public int findParallelProcessors() throws InvalidPropertyException {\n+        int provided = 0;\n+        if (detectConfiguration.wasPropertyProvided(DetectProperties.Companion.getDETECT_PARALLEL_PROCESSORS())) {\n+            provided = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_PARALLEL_PROCESSORS());\n+        }\n+        else if (detectConfiguration.wasPropertyProvided(DetectProperties.Companion.getDETECT_BLACKDUCK_SIGNATURE_SCANNER_PARALLEL_PROCESSORS())) {\n+            provided = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_BLACKDUCK_SIGNATURE_SCANNER_PARALLEL_PROCESSORS());\n+        }\n+        else if (detectConfiguration.wasPropertyProvided(DetectProperties.Companion.getDETECT_HUB_SIGNATURE_SCANNER_PARALLEL_PROCESSORS())) {\n+            provided = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_HUB_SIGNATURE_SCANNER_PARALLEL_PROCESSORS());\n+        }\n+        else {\n+            provided = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_PARALLEL_PROCESSORS());\n+        }\n+\n+        if (provided > 0) {\n+            return provided;\n+        } else {\n+            return findRuntimeProcessors();\n+        }\n+    }\n+\n+    private int findRuntimeProcessors() {\n+        return Runtime.getRuntime().availableProcessors();\n+    }\n+\n+    @Nullable\n+    public SnippetMatching findSnippetMatching() throws InvalidPropertyException {\n+        ExtendedEnumValue<ExtendedSnippetMode, SnippetMatching> snippetMatching = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_BLACKDUCK_SIGNATURE_SCANNER_SNIPPET_MATCHING());\n+\n+        SnippetMatching deprecatedSnippetMatching;\n+        if (detectConfiguration.getValue(DetectProperties.Companion.getDETECT_BLACKDUCK_SIGNATURE_SCANNER_SNIPPET_MODE())) {\n+            deprecatedSnippetMatching = SnippetMatching.SNIPPET_MATCHING;\n+        } else {\n+            deprecatedSnippetMatching = null;\n+        }\n+\n+        if (snippetMatching.getBaseValue().isPresent()) {\n+            return snippetMatching.getBaseValue().get();\n+        }\n+\n+        if (snippetMatching.getExtendedValue().isPresent()) {\n+            return deprecatedSnippetMatching;\n+        }\n+\n+        return null;\n+    }\n+\n+    @Nullable\n+    public IndividualFileMatching findIndividualFileMatching() throws InvalidPropertyException {\n+        ExtendedEnumValue<ExtendedIndividualFileMatchingMode, IndividualFileMatching> individualFileMatching = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_BLACKDUCK_SIGNATURE_SCANNER_INDIVIDUAL_FILE_MATCHING());\n+\n+        if (individualFileMatching.getBaseValue().isPresent()) {\n+            return individualFileMatching.getBaseValue().get();\n+        }\n+\n+        return null;\n+    }\n+\n+    //#endregion\n+\n+    //#region Creating Connections\n+    public ProxyInfo createBlackDuckProxyInfo() throws DetectUserFriendlyException{\n+        String proxyUsername = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_USERNAME(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_USERNAME()).orElse(null);\n+        String proxyPassword = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_PASSWORD(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_PASSWORD()).orElse(null);\n+        String proxyHost = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_HOST(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_HOST()).orElse(null);\n+        String proxyPort = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_PORT(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_PORT()).orElse(null);\n+        String proxyNtlmDomain = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_NTLM_DOMAIN(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_NTLM_DOMAIN()).orElse(null);\n+        String proxyNtlmWorkstation = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_NTLM_WORKSTATION(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_NTLM_WORKSTATION()).orElse(null);\n+\n+        CredentialsBuilder proxyCredentialsBuilder = new CredentialsBuilder();\n+        proxyCredentialsBuilder.setUsername(proxyUsername);\n+        proxyCredentialsBuilder.setPassword(proxyPassword);\n+        Credentials proxyCredentials;\n+        try {\n+            proxyCredentials = proxyCredentialsBuilder.build();\n+        } catch (IllegalArgumentException e) {\n+            throw new DetectUserFriendlyException(String.format(\"Your proxy credentials configuration is not valid: %s\", e.getMessage()), e, ExitCodeType.FAILURE_PROXY_CONNECTIVITY);\n+        }\n+\n+        ProxyInfoBuilder proxyInfoBuilder = new ProxyInfoBuilder();\n+\n+        proxyInfoBuilder.setCredentials(proxyCredentials);\n+        proxyInfoBuilder.setHost(proxyHost);\n+        proxyInfoBuilder.setPort(NumberUtils.toInt(proxyPort, 0));\n+        proxyInfoBuilder.setNtlmDomain(proxyNtlmDomain);\n+        proxyInfoBuilder.setNtlmWorkstation(proxyNtlmWorkstation);\n+        try {\n+            return proxyInfoBuilder.build();\n+        } catch (IllegalArgumentException e) {\n+            throw new DetectUserFriendlyException(String.format(\"Your proxy configuration is not valid: %s\", e.getMessage()), e, ExitCodeType.FAILURE_PROXY_CONNECTIVITY);\n+        }\n+    }\n+\n+    public ProductBootOptions createProductBootOptions() {\n+        Boolean ignoreFailures = detectConfiguration.getValueOrDefault(DetectProperties.Companion.getDETECT_IGNORE_CONNECTION_FAILURES());\n+        Boolean testConnections = detectConfiguration.getValueOrDefault(DetectProperties.Companion.getDETECT_TEST_CONNECTION());\n+        return new ProductBootOptions(ignoreFailures, testConnections);\n+    }\n+\n+    public ConnectionDetails createConnectionDetails() throws DetectUserFriendlyException, InvalidPropertyException {\n+        Boolean alwaysTrust = PropertyConfigUtils.getFirstProvidedValueOrDefault(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_TRUST_CERT(), DetectProperties.Companion.getBLACKDUCK_HUB_TRUST_CERT());\n+        List<String> proxyIgnoredHosts = PropertyConfigUtils.getFirstProvidedValueOrDefault(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_IGNORED_HOSTS(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_IGNORED_HOSTS());\n+        List<Pattern> proxyPatterns = proxyIgnoredHosts.stream()\n+        .map(it -> Pattern.compile(it))\n+            .collect(Collectors.toList());\n+        ProxyInfo proxyInformation = createBlackDuckProxyInfo();\n+        return new ConnectionDetails(proxyInformation, proxyPatterns, findTimeoutInSeconds(), alwaysTrust);\n+    }\n+\n+    public BlackDuckConnectionDetails createBlackDuckConnectionDetails() throws InvalidPropertyException, DetectUserFriendlyException {\n+        Boolean offline = PropertyConfigUtils.getFirstProvidedValueOrDefault(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_OFFLINE_MODE(), DetectProperties.Companion.getBLACKDUCK_HUB_OFFLINE_MODE());\n+        String blackduckUrl = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_URL(), DetectProperties.Companion.getBLACKDUCK_HUB_URL()).orElse(null);\n+        Set<String> allBlackDuckKeys = new BlackDuckServerConfigBuilder().getPropertyKeys().stream()\n+                                           .filter(it -> !(it .contains(\"proxy\")))\n+                                           .collect(Collectors.toSet());\n+        Map<String, String> blackDuckProperties = detectConfiguration.getRaw(allBlackDuckKeys);\n+\n+        return new BlackDuckConnectionDetails(offline, blackduckUrl, blackDuckProperties, findParallelProcessors(), createConnectionDetails());\n+    }\n+    //#endregion\n+\n+    public PolarisServerConfigBuilder createPolarisServerConfigBuilder(File userHome) throws InvalidPropertyException {\n+        PolarisServerConfigBuilder polarisServerConfigBuilder = PolarisServerConfig.newBuilder();\n+        Set<String> allPolarisKeys = polarisServerConfigBuilder.getPropertyKeys();\n+        Map<String, String> polarisProperties = detectConfiguration.getRaw(allPolarisKeys);\n+\n+        // Detect and polaris-common use different property keys for the Polaris URL,\n+        // so we need to pull it from they Detect config using Detect's key,\n+        // and write it to the polaris-common config using the polaris-common key.\n+        Optional<String> polarisUrlValue = detectConfiguration.getRaw(DetectProperties.Companion.getPOLARIS_URL());\n+        if (StringUtils.isNotBlank(polarisUrlValue.orElse(null))) {\n+            polarisProperties.put(PolarisServerConfigBuilder.URL_KEY.getKey(), polarisUrlValue.orElse(null));\n+        }\n+\n+        polarisServerConfigBuilder.setLogger(new SilentIntLogger());\n+\n+        polarisServerConfigBuilder.setProperties(polarisProperties.entrySet());\n+        polarisServerConfigBuilder.setUserHome(userHome.getAbsolutePath());\n+        polarisServerConfigBuilder.setTimeoutInSeconds(findTimeoutInSeconds().intValue());\n+        return polarisServerConfigBuilder;\n+    }\n+\n+    public PhoneHomeOptions createPhoneHomeOptions() {\n+        Map<String, String> phoneHomePassthrough = detectConfiguration.getRaw(DetectProperties.Companion.getPHONEHOME_PASSTHROUGH());\n+        return new PhoneHomeOptions(phoneHomePassthrough);\n+    }\n+\n+    public RunOptions createRunOptions() throws InvalidPropertyException {\n+        // This is because it is double deprecated so we must check if either property is set.\n+        Optional<Boolean> sigScanDisabled = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getDETECT_BLACKDUCK_SIGNATURE_SCANNER_DISABLED(), DetectProperties.Companion.getDETECT_HUB_SIGNATURE_SCANNER_DISABLED());\n+        Optional<Boolean> polarisEnabled = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getDETECT_SWIP_ENABLED());\n+\n+        List<FilterableEnumValue<DetectTool>> includedTools = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_TOOLS());\n+        List<FilterableEnumValue<DetectTool>> excludedTools = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_TOOLS_EXCLUDED());\n+        ExcludeIncludeEnumFilter filter = new ExcludeIncludeEnumFilter(excludedTools, includedTools);\n+        DetectToolFilter detectToolFilter = new DetectToolFilter(filter, sigScanDisabled, polarisEnabled);\n+\n+        Boolean unmapCodeLocations = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_PROJECT_CODELOCATION_UNMAP());\n+        String aggregateName = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_BOM_AGGREGATE_NAME()).orElse(null);\n+        AggregateMode aggregateMode = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_BOM_AGGREGATE_REMEDIATION_MODE());\n+        List<DetectTool> preferredTools = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_PROJECT_TOOL());\n+        Boolean useBdio2 = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_BDIO2_ENABLED());\n+\n+        return new RunOptions(unmapCodeLocations, aggregateName, aggregateMode, preferredTools, detectToolFilter, useBdio2);\n+    }\n+\n+    public DirectoryOptions createDirectoryOptions() throws InvalidPropertyException {\n+        Path sourcePath = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_SOURCE_PATH()).map(path -> path.resolvePath(pathResolver)).orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0de1970859a0e263e30e13d9fd51587e7252caf4"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQxNjExOQ==", "bodyText": "I'm cool with that, we'd need to do two separate methods to account for Valued/Nullable properties though", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/199#discussion_r450416119", "createdAt": "2020-07-06T18:50:28Z", "author": {"login": "crowleySynopsys"}, "path": "src/main/java/com/synopsys/integration/detect/DetectConfigurationFactoryJava.java", "diffHunk": "@@ -0,0 +1,466 @@\n+package com.synopsys.integration.detect;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.stream.Collectors.toSet;\n+\n+import java.io.File;\n+import java.io.FileFilter;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.jetbrains.annotations.Nullable;\n+\n+import com.sun.org.apache.xpath.internal.operations.Bool;\n+import com.synopsys.integration.blackduck.api.generated.enumeration.LicenseFamilyLicenseFamilyRiskRulesReleaseDistributionType;\n+import com.synopsys.integration.blackduck.api.generated.enumeration.PolicyRuleSeverityType;\n+import com.synopsys.integration.blackduck.api.generated.enumeration.ProjectCloneCategoriesType;\n+import com.synopsys.integration.blackduck.api.manual.throwaway.generated.enumeration.ProjectVersionPhaseType;\n+import com.synopsys.integration.blackduck.codelocation.signaturescanner.command.IndividualFileMatching;\n+import com.synopsys.integration.blackduck.codelocation.signaturescanner.command.SnippetMatching;\n+import com.synopsys.integration.blackduck.configuration.BlackDuckServerConfigBuilder;\n+import com.synopsys.integration.configuration.config.InvalidPropertyException;\n+import com.synopsys.integration.configuration.config.PropertyConfiguration;\n+import com.synopsys.integration.configuration.property.types.enumextended.ExtendedEnumProperty;\n+import com.synopsys.integration.configuration.property.types.enumextended.ExtendedEnumValue;\n+import com.synopsys.integration.configuration.property.types.enumfilterable.FilterableEnumUtils;\n+import com.synopsys.integration.configuration.property.types.enumfilterable.FilterableEnumValue;\n+import com.synopsys.integration.configuration.property.types.path.PathResolver;\n+import com.synopsys.integration.configuration.property.types.path.PathValue;\n+import com.synopsys.integration.detect.configuration.DetectCustomFieldParser;\n+import com.synopsys.integration.detect.configuration.DetectProperties;\n+import com.synopsys.integration.detect.configuration.DetectorSearchExcludedDirectories;\n+import com.synopsys.integration.detect.configuration.ExcludeIncludeEnumFilter;\n+import com.synopsys.integration.detect.configuration.connection.BlackDuckConnectionDetails;\n+import com.synopsys.integration.detect.configuration.connection.ConnectionDetails;\n+import com.synopsys.integration.detect.configuration.enums.DefaultVersionNameScheme;\n+import com.synopsys.integration.detect.exception.DetectUserFriendlyException;\n+import com.synopsys.integration.detect.exitcode.ExitCodeType;\n+import com.synopsys.integration.detect.lifecycle.boot.product.ProductBootOptions;\n+import com.synopsys.integration.detect.lifecycle.run.RunOptions;\n+import com.synopsys.integration.detect.tool.binaryscanner.BinaryScanOptions;\n+import com.synopsys.integration.detect.tool.detector.DetectFileFinder;\n+import com.synopsys.integration.detect.tool.detector.impl.DetectDetectorFileFilter;\n+import com.synopsys.integration.detect.tool.detector.impl.DetectExecutableOptions;\n+import com.synopsys.integration.detect.tool.signaturescanner.BlackDuckSignatureScannerOptions;\n+import com.synopsys.integration.detect.tool.signaturescanner.enums.ExtendedIndividualFileMatchingMode;\n+import com.synopsys.integration.detect.tool.signaturescanner.enums.ExtendedSnippetMode;\n+import com.synopsys.integration.detect.util.filter.DetectFilter;\n+import com.synopsys.integration.detect.util.filter.DetectToolFilter;\n+import com.synopsys.integration.detect.workflow.airgap.AirGapOptions;\n+import com.synopsys.integration.detect.workflow.bdio.AggregateMode;\n+import com.synopsys.integration.detect.workflow.bdio.BdioOptions;\n+import com.synopsys.integration.detect.workflow.blackduck.BlackDuckPostOptions;\n+import com.synopsys.integration.detect.workflow.blackduck.CustomFieldDocument;\n+import com.synopsys.integration.detect.workflow.blackduck.DetectProjectServiceOptions;\n+import com.synopsys.integration.detect.workflow.file.DirectoryOptions;\n+import com.synopsys.integration.detect.workflow.phonehome.PhoneHomeOptions;\n+import com.synopsys.integration.detect.workflow.project.ProjectNameVersionOptions;\n+import com.synopsys.integration.detectable.detectable.file.FileFinder;\n+import com.synopsys.integration.detector.base.DetectorType;\n+import com.synopsys.integration.detector.evaluation.DetectorEvaluationOptions;\n+import com.synopsys.integration.detector.finder.DetectorFinderOptions;\n+import com.synopsys.integration.log.SilentIntLogger;\n+import com.synopsys.integration.polaris.common.configuration.PolarisServerConfig;\n+import com.synopsys.integration.polaris.common.configuration.PolarisServerConfigBuilder;\n+import com.synopsys.integration.rest.credentials.Credentials;\n+import com.synopsys.integration.rest.credentials.CredentialsBuilder;\n+import com.synopsys.integration.rest.proxy.ProxyInfo;\n+import com.synopsys.integration.rest.proxy.ProxyInfoBuilder;\n+import com.synopsys.integration.util.ExcludedIncludedFilter;\n+import com.synopsys.integration.util.ExcludedIncludedWildcardFilter;\n+\n+import kotlin.jvm.Throws;\n+\n+public class DetectConfigurationFactoryJava {\n+\n+    private PropertyConfiguration detectConfiguration;\n+    private PathResolver pathResolver;\n+\n+    //#region Prefer These Over Any Property\n+    public Long findTimeoutInSeconds() throws InvalidPropertyException {\n+        if (detectConfiguration.wasPropertyProvided(DetectProperties.Companion.getDETECT_API_TIMEOUT())) {\n+            Long timeout = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_API_TIMEOUT());\n+            return timeout / 1000;\n+        } else {\n+            return detectConfiguration.getValue(DetectProperties.Companion.getDETECT_REPORT_TIMEOUT());\n+        }\n+    }\n+\n+    public int findParallelProcessors() throws InvalidPropertyException {\n+        int provided = 0;\n+        if (detectConfiguration.wasPropertyProvided(DetectProperties.Companion.getDETECT_PARALLEL_PROCESSORS())) {\n+            provided = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_PARALLEL_PROCESSORS());\n+        }\n+        else if (detectConfiguration.wasPropertyProvided(DetectProperties.Companion.getDETECT_BLACKDUCK_SIGNATURE_SCANNER_PARALLEL_PROCESSORS())) {\n+            provided = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_BLACKDUCK_SIGNATURE_SCANNER_PARALLEL_PROCESSORS());\n+        }\n+        else if (detectConfiguration.wasPropertyProvided(DetectProperties.Companion.getDETECT_HUB_SIGNATURE_SCANNER_PARALLEL_PROCESSORS())) {\n+            provided = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_HUB_SIGNATURE_SCANNER_PARALLEL_PROCESSORS());\n+        }\n+        else {\n+            provided = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_PARALLEL_PROCESSORS());\n+        }\n+\n+        if (provided > 0) {\n+            return provided;\n+        } else {\n+            return findRuntimeProcessors();\n+        }\n+    }\n+\n+    private int findRuntimeProcessors() {\n+        return Runtime.getRuntime().availableProcessors();\n+    }\n+\n+    @Nullable\n+    public SnippetMatching findSnippetMatching() throws InvalidPropertyException {\n+        ExtendedEnumValue<ExtendedSnippetMode, SnippetMatching> snippetMatching = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_BLACKDUCK_SIGNATURE_SCANNER_SNIPPET_MATCHING());\n+\n+        SnippetMatching deprecatedSnippetMatching;\n+        if (detectConfiguration.getValue(DetectProperties.Companion.getDETECT_BLACKDUCK_SIGNATURE_SCANNER_SNIPPET_MODE())) {\n+            deprecatedSnippetMatching = SnippetMatching.SNIPPET_MATCHING;\n+        } else {\n+            deprecatedSnippetMatching = null;\n+        }\n+\n+        if (snippetMatching.getBaseValue().isPresent()) {\n+            return snippetMatching.getBaseValue().get();\n+        }\n+\n+        if (snippetMatching.getExtendedValue().isPresent()) {\n+            return deprecatedSnippetMatching;\n+        }\n+\n+        return null;\n+    }\n+\n+    @Nullable\n+    public IndividualFileMatching findIndividualFileMatching() throws InvalidPropertyException {\n+        ExtendedEnumValue<ExtendedIndividualFileMatchingMode, IndividualFileMatching> individualFileMatching = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_BLACKDUCK_SIGNATURE_SCANNER_INDIVIDUAL_FILE_MATCHING());\n+\n+        if (individualFileMatching.getBaseValue().isPresent()) {\n+            return individualFileMatching.getBaseValue().get();\n+        }\n+\n+        return null;\n+    }\n+\n+    //#endregion\n+\n+    //#region Creating Connections\n+    public ProxyInfo createBlackDuckProxyInfo() throws DetectUserFriendlyException{\n+        String proxyUsername = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_USERNAME(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_USERNAME()).orElse(null);\n+        String proxyPassword = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_PASSWORD(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_PASSWORD()).orElse(null);\n+        String proxyHost = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_HOST(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_HOST()).orElse(null);\n+        String proxyPort = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_PORT(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_PORT()).orElse(null);\n+        String proxyNtlmDomain = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_NTLM_DOMAIN(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_NTLM_DOMAIN()).orElse(null);\n+        String proxyNtlmWorkstation = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_NTLM_WORKSTATION(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_NTLM_WORKSTATION()).orElse(null);\n+\n+        CredentialsBuilder proxyCredentialsBuilder = new CredentialsBuilder();\n+        proxyCredentialsBuilder.setUsername(proxyUsername);\n+        proxyCredentialsBuilder.setPassword(proxyPassword);\n+        Credentials proxyCredentials;\n+        try {\n+            proxyCredentials = proxyCredentialsBuilder.build();\n+        } catch (IllegalArgumentException e) {\n+            throw new DetectUserFriendlyException(String.format(\"Your proxy credentials configuration is not valid: %s\", e.getMessage()), e, ExitCodeType.FAILURE_PROXY_CONNECTIVITY);\n+        }\n+\n+        ProxyInfoBuilder proxyInfoBuilder = new ProxyInfoBuilder();\n+\n+        proxyInfoBuilder.setCredentials(proxyCredentials);\n+        proxyInfoBuilder.setHost(proxyHost);\n+        proxyInfoBuilder.setPort(NumberUtils.toInt(proxyPort, 0));\n+        proxyInfoBuilder.setNtlmDomain(proxyNtlmDomain);\n+        proxyInfoBuilder.setNtlmWorkstation(proxyNtlmWorkstation);\n+        try {\n+            return proxyInfoBuilder.build();\n+        } catch (IllegalArgumentException e) {\n+            throw new DetectUserFriendlyException(String.format(\"Your proxy configuration is not valid: %s\", e.getMessage()), e, ExitCodeType.FAILURE_PROXY_CONNECTIVITY);\n+        }\n+    }\n+\n+    public ProductBootOptions createProductBootOptions() {\n+        Boolean ignoreFailures = detectConfiguration.getValueOrDefault(DetectProperties.Companion.getDETECT_IGNORE_CONNECTION_FAILURES());\n+        Boolean testConnections = detectConfiguration.getValueOrDefault(DetectProperties.Companion.getDETECT_TEST_CONNECTION());\n+        return new ProductBootOptions(ignoreFailures, testConnections);\n+    }\n+\n+    public ConnectionDetails createConnectionDetails() throws DetectUserFriendlyException, InvalidPropertyException {\n+        Boolean alwaysTrust = PropertyConfigUtils.getFirstProvidedValueOrDefault(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_TRUST_CERT(), DetectProperties.Companion.getBLACKDUCK_HUB_TRUST_CERT());\n+        List<String> proxyIgnoredHosts = PropertyConfigUtils.getFirstProvidedValueOrDefault(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_IGNORED_HOSTS(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_IGNORED_HOSTS());\n+        List<Pattern> proxyPatterns = proxyIgnoredHosts.stream()\n+        .map(it -> Pattern.compile(it))\n+            .collect(Collectors.toList());\n+        ProxyInfo proxyInformation = createBlackDuckProxyInfo();\n+        return new ConnectionDetails(proxyInformation, proxyPatterns, findTimeoutInSeconds(), alwaysTrust);\n+    }\n+\n+    public BlackDuckConnectionDetails createBlackDuckConnectionDetails() throws InvalidPropertyException, DetectUserFriendlyException {\n+        Boolean offline = PropertyConfigUtils.getFirstProvidedValueOrDefault(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_OFFLINE_MODE(), DetectProperties.Companion.getBLACKDUCK_HUB_OFFLINE_MODE());\n+        String blackduckUrl = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_URL(), DetectProperties.Companion.getBLACKDUCK_HUB_URL()).orElse(null);\n+        Set<String> allBlackDuckKeys = new BlackDuckServerConfigBuilder().getPropertyKeys().stream()\n+                                           .filter(it -> !(it .contains(\"proxy\")))\n+                                           .collect(Collectors.toSet());\n+        Map<String, String> blackDuckProperties = detectConfiguration.getRaw(allBlackDuckKeys);\n+\n+        return new BlackDuckConnectionDetails(offline, blackduckUrl, blackDuckProperties, findParallelProcessors(), createConnectionDetails());\n+    }\n+    //#endregion\n+\n+    public PolarisServerConfigBuilder createPolarisServerConfigBuilder(File userHome) throws InvalidPropertyException {\n+        PolarisServerConfigBuilder polarisServerConfigBuilder = PolarisServerConfig.newBuilder();\n+        Set<String> allPolarisKeys = polarisServerConfigBuilder.getPropertyKeys();\n+        Map<String, String> polarisProperties = detectConfiguration.getRaw(allPolarisKeys);\n+\n+        // Detect and polaris-common use different property keys for the Polaris URL,\n+        // so we need to pull it from they Detect config using Detect's key,\n+        // and write it to the polaris-common config using the polaris-common key.\n+        Optional<String> polarisUrlValue = detectConfiguration.getRaw(DetectProperties.Companion.getPOLARIS_URL());\n+        if (StringUtils.isNotBlank(polarisUrlValue.orElse(null))) {\n+            polarisProperties.put(PolarisServerConfigBuilder.URL_KEY.getKey(), polarisUrlValue.orElse(null));\n+        }\n+\n+        polarisServerConfigBuilder.setLogger(new SilentIntLogger());\n+\n+        polarisServerConfigBuilder.setProperties(polarisProperties.entrySet());\n+        polarisServerConfigBuilder.setUserHome(userHome.getAbsolutePath());\n+        polarisServerConfigBuilder.setTimeoutInSeconds(findTimeoutInSeconds().intValue());\n+        return polarisServerConfigBuilder;\n+    }\n+\n+    public PhoneHomeOptions createPhoneHomeOptions() {\n+        Map<String, String> phoneHomePassthrough = detectConfiguration.getRaw(DetectProperties.Companion.getPHONEHOME_PASSTHROUGH());\n+        return new PhoneHomeOptions(phoneHomePassthrough);\n+    }\n+\n+    public RunOptions createRunOptions() throws InvalidPropertyException {\n+        // This is because it is double deprecated so we must check if either property is set.\n+        Optional<Boolean> sigScanDisabled = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getDETECT_BLACKDUCK_SIGNATURE_SCANNER_DISABLED(), DetectProperties.Companion.getDETECT_HUB_SIGNATURE_SCANNER_DISABLED());\n+        Optional<Boolean> polarisEnabled = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getDETECT_SWIP_ENABLED());\n+\n+        List<FilterableEnumValue<DetectTool>> includedTools = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_TOOLS());\n+        List<FilterableEnumValue<DetectTool>> excludedTools = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_TOOLS_EXCLUDED());\n+        ExcludeIncludeEnumFilter filter = new ExcludeIncludeEnumFilter(excludedTools, includedTools);\n+        DetectToolFilter detectToolFilter = new DetectToolFilter(filter, sigScanDisabled, polarisEnabled);\n+\n+        Boolean unmapCodeLocations = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_PROJECT_CODELOCATION_UNMAP());\n+        String aggregateName = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_BOM_AGGREGATE_NAME()).orElse(null);\n+        AggregateMode aggregateMode = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_BOM_AGGREGATE_REMEDIATION_MODE());\n+        List<DetectTool> preferredTools = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_PROJECT_TOOL());\n+        Boolean useBdio2 = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_BDIO2_ENABLED());\n+\n+        return new RunOptions(unmapCodeLocations, aggregateName, aggregateMode, preferredTools, detectToolFilter, useBdio2);\n+    }\n+\n+    public DirectoryOptions createDirectoryOptions() throws InvalidPropertyException {\n+        Path sourcePath = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_SOURCE_PATH()).map(path -> path.resolvePath(pathResolver)).orElse(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5NjAyMw=="}, "originalCommit": {"oid": "0de1970859a0e263e30e13d9fd51587e7252caf4"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQxOTE4Mg==", "bodyText": "or would this just account for NullablePathProperty properties?", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/199#discussion_r450419182", "createdAt": "2020-07-06T18:56:11Z", "author": {"login": "crowleySynopsys"}, "path": "src/main/java/com/synopsys/integration/detect/DetectConfigurationFactoryJava.java", "diffHunk": "@@ -0,0 +1,466 @@\n+package com.synopsys.integration.detect;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.stream.Collectors.toSet;\n+\n+import java.io.File;\n+import java.io.FileFilter;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.jetbrains.annotations.Nullable;\n+\n+import com.sun.org.apache.xpath.internal.operations.Bool;\n+import com.synopsys.integration.blackduck.api.generated.enumeration.LicenseFamilyLicenseFamilyRiskRulesReleaseDistributionType;\n+import com.synopsys.integration.blackduck.api.generated.enumeration.PolicyRuleSeverityType;\n+import com.synopsys.integration.blackduck.api.generated.enumeration.ProjectCloneCategoriesType;\n+import com.synopsys.integration.blackduck.api.manual.throwaway.generated.enumeration.ProjectVersionPhaseType;\n+import com.synopsys.integration.blackduck.codelocation.signaturescanner.command.IndividualFileMatching;\n+import com.synopsys.integration.blackduck.codelocation.signaturescanner.command.SnippetMatching;\n+import com.synopsys.integration.blackduck.configuration.BlackDuckServerConfigBuilder;\n+import com.synopsys.integration.configuration.config.InvalidPropertyException;\n+import com.synopsys.integration.configuration.config.PropertyConfiguration;\n+import com.synopsys.integration.configuration.property.types.enumextended.ExtendedEnumProperty;\n+import com.synopsys.integration.configuration.property.types.enumextended.ExtendedEnumValue;\n+import com.synopsys.integration.configuration.property.types.enumfilterable.FilterableEnumUtils;\n+import com.synopsys.integration.configuration.property.types.enumfilterable.FilterableEnumValue;\n+import com.synopsys.integration.configuration.property.types.path.PathResolver;\n+import com.synopsys.integration.configuration.property.types.path.PathValue;\n+import com.synopsys.integration.detect.configuration.DetectCustomFieldParser;\n+import com.synopsys.integration.detect.configuration.DetectProperties;\n+import com.synopsys.integration.detect.configuration.DetectorSearchExcludedDirectories;\n+import com.synopsys.integration.detect.configuration.ExcludeIncludeEnumFilter;\n+import com.synopsys.integration.detect.configuration.connection.BlackDuckConnectionDetails;\n+import com.synopsys.integration.detect.configuration.connection.ConnectionDetails;\n+import com.synopsys.integration.detect.configuration.enums.DefaultVersionNameScheme;\n+import com.synopsys.integration.detect.exception.DetectUserFriendlyException;\n+import com.synopsys.integration.detect.exitcode.ExitCodeType;\n+import com.synopsys.integration.detect.lifecycle.boot.product.ProductBootOptions;\n+import com.synopsys.integration.detect.lifecycle.run.RunOptions;\n+import com.synopsys.integration.detect.tool.binaryscanner.BinaryScanOptions;\n+import com.synopsys.integration.detect.tool.detector.DetectFileFinder;\n+import com.synopsys.integration.detect.tool.detector.impl.DetectDetectorFileFilter;\n+import com.synopsys.integration.detect.tool.detector.impl.DetectExecutableOptions;\n+import com.synopsys.integration.detect.tool.signaturescanner.BlackDuckSignatureScannerOptions;\n+import com.synopsys.integration.detect.tool.signaturescanner.enums.ExtendedIndividualFileMatchingMode;\n+import com.synopsys.integration.detect.tool.signaturescanner.enums.ExtendedSnippetMode;\n+import com.synopsys.integration.detect.util.filter.DetectFilter;\n+import com.synopsys.integration.detect.util.filter.DetectToolFilter;\n+import com.synopsys.integration.detect.workflow.airgap.AirGapOptions;\n+import com.synopsys.integration.detect.workflow.bdio.AggregateMode;\n+import com.synopsys.integration.detect.workflow.bdio.BdioOptions;\n+import com.synopsys.integration.detect.workflow.blackduck.BlackDuckPostOptions;\n+import com.synopsys.integration.detect.workflow.blackduck.CustomFieldDocument;\n+import com.synopsys.integration.detect.workflow.blackduck.DetectProjectServiceOptions;\n+import com.synopsys.integration.detect.workflow.file.DirectoryOptions;\n+import com.synopsys.integration.detect.workflow.phonehome.PhoneHomeOptions;\n+import com.synopsys.integration.detect.workflow.project.ProjectNameVersionOptions;\n+import com.synopsys.integration.detectable.detectable.file.FileFinder;\n+import com.synopsys.integration.detector.base.DetectorType;\n+import com.synopsys.integration.detector.evaluation.DetectorEvaluationOptions;\n+import com.synopsys.integration.detector.finder.DetectorFinderOptions;\n+import com.synopsys.integration.log.SilentIntLogger;\n+import com.synopsys.integration.polaris.common.configuration.PolarisServerConfig;\n+import com.synopsys.integration.polaris.common.configuration.PolarisServerConfigBuilder;\n+import com.synopsys.integration.rest.credentials.Credentials;\n+import com.synopsys.integration.rest.credentials.CredentialsBuilder;\n+import com.synopsys.integration.rest.proxy.ProxyInfo;\n+import com.synopsys.integration.rest.proxy.ProxyInfoBuilder;\n+import com.synopsys.integration.util.ExcludedIncludedFilter;\n+import com.synopsys.integration.util.ExcludedIncludedWildcardFilter;\n+\n+import kotlin.jvm.Throws;\n+\n+public class DetectConfigurationFactoryJava {\n+\n+    private PropertyConfiguration detectConfiguration;\n+    private PathResolver pathResolver;\n+\n+    //#region Prefer These Over Any Property\n+    public Long findTimeoutInSeconds() throws InvalidPropertyException {\n+        if (detectConfiguration.wasPropertyProvided(DetectProperties.Companion.getDETECT_API_TIMEOUT())) {\n+            Long timeout = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_API_TIMEOUT());\n+            return timeout / 1000;\n+        } else {\n+            return detectConfiguration.getValue(DetectProperties.Companion.getDETECT_REPORT_TIMEOUT());\n+        }\n+    }\n+\n+    public int findParallelProcessors() throws InvalidPropertyException {\n+        int provided = 0;\n+        if (detectConfiguration.wasPropertyProvided(DetectProperties.Companion.getDETECT_PARALLEL_PROCESSORS())) {\n+            provided = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_PARALLEL_PROCESSORS());\n+        }\n+        else if (detectConfiguration.wasPropertyProvided(DetectProperties.Companion.getDETECT_BLACKDUCK_SIGNATURE_SCANNER_PARALLEL_PROCESSORS())) {\n+            provided = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_BLACKDUCK_SIGNATURE_SCANNER_PARALLEL_PROCESSORS());\n+        }\n+        else if (detectConfiguration.wasPropertyProvided(DetectProperties.Companion.getDETECT_HUB_SIGNATURE_SCANNER_PARALLEL_PROCESSORS())) {\n+            provided = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_HUB_SIGNATURE_SCANNER_PARALLEL_PROCESSORS());\n+        }\n+        else {\n+            provided = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_PARALLEL_PROCESSORS());\n+        }\n+\n+        if (provided > 0) {\n+            return provided;\n+        } else {\n+            return findRuntimeProcessors();\n+        }\n+    }\n+\n+    private int findRuntimeProcessors() {\n+        return Runtime.getRuntime().availableProcessors();\n+    }\n+\n+    @Nullable\n+    public SnippetMatching findSnippetMatching() throws InvalidPropertyException {\n+        ExtendedEnumValue<ExtendedSnippetMode, SnippetMatching> snippetMatching = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_BLACKDUCK_SIGNATURE_SCANNER_SNIPPET_MATCHING());\n+\n+        SnippetMatching deprecatedSnippetMatching;\n+        if (detectConfiguration.getValue(DetectProperties.Companion.getDETECT_BLACKDUCK_SIGNATURE_SCANNER_SNIPPET_MODE())) {\n+            deprecatedSnippetMatching = SnippetMatching.SNIPPET_MATCHING;\n+        } else {\n+            deprecatedSnippetMatching = null;\n+        }\n+\n+        if (snippetMatching.getBaseValue().isPresent()) {\n+            return snippetMatching.getBaseValue().get();\n+        }\n+\n+        if (snippetMatching.getExtendedValue().isPresent()) {\n+            return deprecatedSnippetMatching;\n+        }\n+\n+        return null;\n+    }\n+\n+    @Nullable\n+    public IndividualFileMatching findIndividualFileMatching() throws InvalidPropertyException {\n+        ExtendedEnumValue<ExtendedIndividualFileMatchingMode, IndividualFileMatching> individualFileMatching = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_BLACKDUCK_SIGNATURE_SCANNER_INDIVIDUAL_FILE_MATCHING());\n+\n+        if (individualFileMatching.getBaseValue().isPresent()) {\n+            return individualFileMatching.getBaseValue().get();\n+        }\n+\n+        return null;\n+    }\n+\n+    //#endregion\n+\n+    //#region Creating Connections\n+    public ProxyInfo createBlackDuckProxyInfo() throws DetectUserFriendlyException{\n+        String proxyUsername = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_USERNAME(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_USERNAME()).orElse(null);\n+        String proxyPassword = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_PASSWORD(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_PASSWORD()).orElse(null);\n+        String proxyHost = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_HOST(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_HOST()).orElse(null);\n+        String proxyPort = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_PORT(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_PORT()).orElse(null);\n+        String proxyNtlmDomain = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_NTLM_DOMAIN(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_NTLM_DOMAIN()).orElse(null);\n+        String proxyNtlmWorkstation = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_NTLM_WORKSTATION(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_NTLM_WORKSTATION()).orElse(null);\n+\n+        CredentialsBuilder proxyCredentialsBuilder = new CredentialsBuilder();\n+        proxyCredentialsBuilder.setUsername(proxyUsername);\n+        proxyCredentialsBuilder.setPassword(proxyPassword);\n+        Credentials proxyCredentials;\n+        try {\n+            proxyCredentials = proxyCredentialsBuilder.build();\n+        } catch (IllegalArgumentException e) {\n+            throw new DetectUserFriendlyException(String.format(\"Your proxy credentials configuration is not valid: %s\", e.getMessage()), e, ExitCodeType.FAILURE_PROXY_CONNECTIVITY);\n+        }\n+\n+        ProxyInfoBuilder proxyInfoBuilder = new ProxyInfoBuilder();\n+\n+        proxyInfoBuilder.setCredentials(proxyCredentials);\n+        proxyInfoBuilder.setHost(proxyHost);\n+        proxyInfoBuilder.setPort(NumberUtils.toInt(proxyPort, 0));\n+        proxyInfoBuilder.setNtlmDomain(proxyNtlmDomain);\n+        proxyInfoBuilder.setNtlmWorkstation(proxyNtlmWorkstation);\n+        try {\n+            return proxyInfoBuilder.build();\n+        } catch (IllegalArgumentException e) {\n+            throw new DetectUserFriendlyException(String.format(\"Your proxy configuration is not valid: %s\", e.getMessage()), e, ExitCodeType.FAILURE_PROXY_CONNECTIVITY);\n+        }\n+    }\n+\n+    public ProductBootOptions createProductBootOptions() {\n+        Boolean ignoreFailures = detectConfiguration.getValueOrDefault(DetectProperties.Companion.getDETECT_IGNORE_CONNECTION_FAILURES());\n+        Boolean testConnections = detectConfiguration.getValueOrDefault(DetectProperties.Companion.getDETECT_TEST_CONNECTION());\n+        return new ProductBootOptions(ignoreFailures, testConnections);\n+    }\n+\n+    public ConnectionDetails createConnectionDetails() throws DetectUserFriendlyException, InvalidPropertyException {\n+        Boolean alwaysTrust = PropertyConfigUtils.getFirstProvidedValueOrDefault(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_TRUST_CERT(), DetectProperties.Companion.getBLACKDUCK_HUB_TRUST_CERT());\n+        List<String> proxyIgnoredHosts = PropertyConfigUtils.getFirstProvidedValueOrDefault(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_IGNORED_HOSTS(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_IGNORED_HOSTS());\n+        List<Pattern> proxyPatterns = proxyIgnoredHosts.stream()\n+        .map(it -> Pattern.compile(it))\n+            .collect(Collectors.toList());\n+        ProxyInfo proxyInformation = createBlackDuckProxyInfo();\n+        return new ConnectionDetails(proxyInformation, proxyPatterns, findTimeoutInSeconds(), alwaysTrust);\n+    }\n+\n+    public BlackDuckConnectionDetails createBlackDuckConnectionDetails() throws InvalidPropertyException, DetectUserFriendlyException {\n+        Boolean offline = PropertyConfigUtils.getFirstProvidedValueOrDefault(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_OFFLINE_MODE(), DetectProperties.Companion.getBLACKDUCK_HUB_OFFLINE_MODE());\n+        String blackduckUrl = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_URL(), DetectProperties.Companion.getBLACKDUCK_HUB_URL()).orElse(null);\n+        Set<String> allBlackDuckKeys = new BlackDuckServerConfigBuilder().getPropertyKeys().stream()\n+                                           .filter(it -> !(it .contains(\"proxy\")))\n+                                           .collect(Collectors.toSet());\n+        Map<String, String> blackDuckProperties = detectConfiguration.getRaw(allBlackDuckKeys);\n+\n+        return new BlackDuckConnectionDetails(offline, blackduckUrl, blackDuckProperties, findParallelProcessors(), createConnectionDetails());\n+    }\n+    //#endregion\n+\n+    public PolarisServerConfigBuilder createPolarisServerConfigBuilder(File userHome) throws InvalidPropertyException {\n+        PolarisServerConfigBuilder polarisServerConfigBuilder = PolarisServerConfig.newBuilder();\n+        Set<String> allPolarisKeys = polarisServerConfigBuilder.getPropertyKeys();\n+        Map<String, String> polarisProperties = detectConfiguration.getRaw(allPolarisKeys);\n+\n+        // Detect and polaris-common use different property keys for the Polaris URL,\n+        // so we need to pull it from they Detect config using Detect's key,\n+        // and write it to the polaris-common config using the polaris-common key.\n+        Optional<String> polarisUrlValue = detectConfiguration.getRaw(DetectProperties.Companion.getPOLARIS_URL());\n+        if (StringUtils.isNotBlank(polarisUrlValue.orElse(null))) {\n+            polarisProperties.put(PolarisServerConfigBuilder.URL_KEY.getKey(), polarisUrlValue.orElse(null));\n+        }\n+\n+        polarisServerConfigBuilder.setLogger(new SilentIntLogger());\n+\n+        polarisServerConfigBuilder.setProperties(polarisProperties.entrySet());\n+        polarisServerConfigBuilder.setUserHome(userHome.getAbsolutePath());\n+        polarisServerConfigBuilder.setTimeoutInSeconds(findTimeoutInSeconds().intValue());\n+        return polarisServerConfigBuilder;\n+    }\n+\n+    public PhoneHomeOptions createPhoneHomeOptions() {\n+        Map<String, String> phoneHomePassthrough = detectConfiguration.getRaw(DetectProperties.Companion.getPHONEHOME_PASSTHROUGH());\n+        return new PhoneHomeOptions(phoneHomePassthrough);\n+    }\n+\n+    public RunOptions createRunOptions() throws InvalidPropertyException {\n+        // This is because it is double deprecated so we must check if either property is set.\n+        Optional<Boolean> sigScanDisabled = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getDETECT_BLACKDUCK_SIGNATURE_SCANNER_DISABLED(), DetectProperties.Companion.getDETECT_HUB_SIGNATURE_SCANNER_DISABLED());\n+        Optional<Boolean> polarisEnabled = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getDETECT_SWIP_ENABLED());\n+\n+        List<FilterableEnumValue<DetectTool>> includedTools = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_TOOLS());\n+        List<FilterableEnumValue<DetectTool>> excludedTools = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_TOOLS_EXCLUDED());\n+        ExcludeIncludeEnumFilter filter = new ExcludeIncludeEnumFilter(excludedTools, includedTools);\n+        DetectToolFilter detectToolFilter = new DetectToolFilter(filter, sigScanDisabled, polarisEnabled);\n+\n+        Boolean unmapCodeLocations = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_PROJECT_CODELOCATION_UNMAP());\n+        String aggregateName = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_BOM_AGGREGATE_NAME()).orElse(null);\n+        AggregateMode aggregateMode = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_BOM_AGGREGATE_REMEDIATION_MODE());\n+        List<DetectTool> preferredTools = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_PROJECT_TOOL());\n+        Boolean useBdio2 = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_BDIO2_ENABLED());\n+\n+        return new RunOptions(unmapCodeLocations, aggregateName, aggregateMode, preferredTools, detectToolFilter, useBdio2);\n+    }\n+\n+    public DirectoryOptions createDirectoryOptions() throws InvalidPropertyException {\n+        Path sourcePath = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_SOURCE_PATH()).map(path -> path.resolvePath(pathResolver)).orElse(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5NjAyMw=="}, "originalCommit": {"oid": "0de1970859a0e263e30e13d9fd51587e7252caf4"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQyMDYwMg==", "bodyText": "I was just thinking anything that made the call shorter aka that did the map for you.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/199#discussion_r450420602", "createdAt": "2020-07-06T18:59:08Z", "author": {"login": "taikuukaits"}, "path": "src/main/java/com/synopsys/integration/detect/DetectConfigurationFactoryJava.java", "diffHunk": "@@ -0,0 +1,466 @@\n+package com.synopsys.integration.detect;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.stream.Collectors.toSet;\n+\n+import java.io.File;\n+import java.io.FileFilter;\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.regex.Pattern;\n+import java.util.stream.Collectors;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.jetbrains.annotations.Nullable;\n+\n+import com.sun.org.apache.xpath.internal.operations.Bool;\n+import com.synopsys.integration.blackduck.api.generated.enumeration.LicenseFamilyLicenseFamilyRiskRulesReleaseDistributionType;\n+import com.synopsys.integration.blackduck.api.generated.enumeration.PolicyRuleSeverityType;\n+import com.synopsys.integration.blackduck.api.generated.enumeration.ProjectCloneCategoriesType;\n+import com.synopsys.integration.blackduck.api.manual.throwaway.generated.enumeration.ProjectVersionPhaseType;\n+import com.synopsys.integration.blackduck.codelocation.signaturescanner.command.IndividualFileMatching;\n+import com.synopsys.integration.blackduck.codelocation.signaturescanner.command.SnippetMatching;\n+import com.synopsys.integration.blackduck.configuration.BlackDuckServerConfigBuilder;\n+import com.synopsys.integration.configuration.config.InvalidPropertyException;\n+import com.synopsys.integration.configuration.config.PropertyConfiguration;\n+import com.synopsys.integration.configuration.property.types.enumextended.ExtendedEnumProperty;\n+import com.synopsys.integration.configuration.property.types.enumextended.ExtendedEnumValue;\n+import com.synopsys.integration.configuration.property.types.enumfilterable.FilterableEnumUtils;\n+import com.synopsys.integration.configuration.property.types.enumfilterable.FilterableEnumValue;\n+import com.synopsys.integration.configuration.property.types.path.PathResolver;\n+import com.synopsys.integration.configuration.property.types.path.PathValue;\n+import com.synopsys.integration.detect.configuration.DetectCustomFieldParser;\n+import com.synopsys.integration.detect.configuration.DetectProperties;\n+import com.synopsys.integration.detect.configuration.DetectorSearchExcludedDirectories;\n+import com.synopsys.integration.detect.configuration.ExcludeIncludeEnumFilter;\n+import com.synopsys.integration.detect.configuration.connection.BlackDuckConnectionDetails;\n+import com.synopsys.integration.detect.configuration.connection.ConnectionDetails;\n+import com.synopsys.integration.detect.configuration.enums.DefaultVersionNameScheme;\n+import com.synopsys.integration.detect.exception.DetectUserFriendlyException;\n+import com.synopsys.integration.detect.exitcode.ExitCodeType;\n+import com.synopsys.integration.detect.lifecycle.boot.product.ProductBootOptions;\n+import com.synopsys.integration.detect.lifecycle.run.RunOptions;\n+import com.synopsys.integration.detect.tool.binaryscanner.BinaryScanOptions;\n+import com.synopsys.integration.detect.tool.detector.DetectFileFinder;\n+import com.synopsys.integration.detect.tool.detector.impl.DetectDetectorFileFilter;\n+import com.synopsys.integration.detect.tool.detector.impl.DetectExecutableOptions;\n+import com.synopsys.integration.detect.tool.signaturescanner.BlackDuckSignatureScannerOptions;\n+import com.synopsys.integration.detect.tool.signaturescanner.enums.ExtendedIndividualFileMatchingMode;\n+import com.synopsys.integration.detect.tool.signaturescanner.enums.ExtendedSnippetMode;\n+import com.synopsys.integration.detect.util.filter.DetectFilter;\n+import com.synopsys.integration.detect.util.filter.DetectToolFilter;\n+import com.synopsys.integration.detect.workflow.airgap.AirGapOptions;\n+import com.synopsys.integration.detect.workflow.bdio.AggregateMode;\n+import com.synopsys.integration.detect.workflow.bdio.BdioOptions;\n+import com.synopsys.integration.detect.workflow.blackduck.BlackDuckPostOptions;\n+import com.synopsys.integration.detect.workflow.blackduck.CustomFieldDocument;\n+import com.synopsys.integration.detect.workflow.blackduck.DetectProjectServiceOptions;\n+import com.synopsys.integration.detect.workflow.file.DirectoryOptions;\n+import com.synopsys.integration.detect.workflow.phonehome.PhoneHomeOptions;\n+import com.synopsys.integration.detect.workflow.project.ProjectNameVersionOptions;\n+import com.synopsys.integration.detectable.detectable.file.FileFinder;\n+import com.synopsys.integration.detector.base.DetectorType;\n+import com.synopsys.integration.detector.evaluation.DetectorEvaluationOptions;\n+import com.synopsys.integration.detector.finder.DetectorFinderOptions;\n+import com.synopsys.integration.log.SilentIntLogger;\n+import com.synopsys.integration.polaris.common.configuration.PolarisServerConfig;\n+import com.synopsys.integration.polaris.common.configuration.PolarisServerConfigBuilder;\n+import com.synopsys.integration.rest.credentials.Credentials;\n+import com.synopsys.integration.rest.credentials.CredentialsBuilder;\n+import com.synopsys.integration.rest.proxy.ProxyInfo;\n+import com.synopsys.integration.rest.proxy.ProxyInfoBuilder;\n+import com.synopsys.integration.util.ExcludedIncludedFilter;\n+import com.synopsys.integration.util.ExcludedIncludedWildcardFilter;\n+\n+import kotlin.jvm.Throws;\n+\n+public class DetectConfigurationFactoryJava {\n+\n+    private PropertyConfiguration detectConfiguration;\n+    private PathResolver pathResolver;\n+\n+    //#region Prefer These Over Any Property\n+    public Long findTimeoutInSeconds() throws InvalidPropertyException {\n+        if (detectConfiguration.wasPropertyProvided(DetectProperties.Companion.getDETECT_API_TIMEOUT())) {\n+            Long timeout = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_API_TIMEOUT());\n+            return timeout / 1000;\n+        } else {\n+            return detectConfiguration.getValue(DetectProperties.Companion.getDETECT_REPORT_TIMEOUT());\n+        }\n+    }\n+\n+    public int findParallelProcessors() throws InvalidPropertyException {\n+        int provided = 0;\n+        if (detectConfiguration.wasPropertyProvided(DetectProperties.Companion.getDETECT_PARALLEL_PROCESSORS())) {\n+            provided = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_PARALLEL_PROCESSORS());\n+        }\n+        else if (detectConfiguration.wasPropertyProvided(DetectProperties.Companion.getDETECT_BLACKDUCK_SIGNATURE_SCANNER_PARALLEL_PROCESSORS())) {\n+            provided = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_BLACKDUCK_SIGNATURE_SCANNER_PARALLEL_PROCESSORS());\n+        }\n+        else if (detectConfiguration.wasPropertyProvided(DetectProperties.Companion.getDETECT_HUB_SIGNATURE_SCANNER_PARALLEL_PROCESSORS())) {\n+            provided = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_HUB_SIGNATURE_SCANNER_PARALLEL_PROCESSORS());\n+        }\n+        else {\n+            provided = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_PARALLEL_PROCESSORS());\n+        }\n+\n+        if (provided > 0) {\n+            return provided;\n+        } else {\n+            return findRuntimeProcessors();\n+        }\n+    }\n+\n+    private int findRuntimeProcessors() {\n+        return Runtime.getRuntime().availableProcessors();\n+    }\n+\n+    @Nullable\n+    public SnippetMatching findSnippetMatching() throws InvalidPropertyException {\n+        ExtendedEnumValue<ExtendedSnippetMode, SnippetMatching> snippetMatching = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_BLACKDUCK_SIGNATURE_SCANNER_SNIPPET_MATCHING());\n+\n+        SnippetMatching deprecatedSnippetMatching;\n+        if (detectConfiguration.getValue(DetectProperties.Companion.getDETECT_BLACKDUCK_SIGNATURE_SCANNER_SNIPPET_MODE())) {\n+            deprecatedSnippetMatching = SnippetMatching.SNIPPET_MATCHING;\n+        } else {\n+            deprecatedSnippetMatching = null;\n+        }\n+\n+        if (snippetMatching.getBaseValue().isPresent()) {\n+            return snippetMatching.getBaseValue().get();\n+        }\n+\n+        if (snippetMatching.getExtendedValue().isPresent()) {\n+            return deprecatedSnippetMatching;\n+        }\n+\n+        return null;\n+    }\n+\n+    @Nullable\n+    public IndividualFileMatching findIndividualFileMatching() throws InvalidPropertyException {\n+        ExtendedEnumValue<ExtendedIndividualFileMatchingMode, IndividualFileMatching> individualFileMatching = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_BLACKDUCK_SIGNATURE_SCANNER_INDIVIDUAL_FILE_MATCHING());\n+\n+        if (individualFileMatching.getBaseValue().isPresent()) {\n+            return individualFileMatching.getBaseValue().get();\n+        }\n+\n+        return null;\n+    }\n+\n+    //#endregion\n+\n+    //#region Creating Connections\n+    public ProxyInfo createBlackDuckProxyInfo() throws DetectUserFriendlyException{\n+        String proxyUsername = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_USERNAME(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_USERNAME()).orElse(null);\n+        String proxyPassword = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_PASSWORD(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_PASSWORD()).orElse(null);\n+        String proxyHost = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_HOST(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_HOST()).orElse(null);\n+        String proxyPort = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_PORT(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_PORT()).orElse(null);\n+        String proxyNtlmDomain = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_NTLM_DOMAIN(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_NTLM_DOMAIN()).orElse(null);\n+        String proxyNtlmWorkstation = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_NTLM_WORKSTATION(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_NTLM_WORKSTATION()).orElse(null);\n+\n+        CredentialsBuilder proxyCredentialsBuilder = new CredentialsBuilder();\n+        proxyCredentialsBuilder.setUsername(proxyUsername);\n+        proxyCredentialsBuilder.setPassword(proxyPassword);\n+        Credentials proxyCredentials;\n+        try {\n+            proxyCredentials = proxyCredentialsBuilder.build();\n+        } catch (IllegalArgumentException e) {\n+            throw new DetectUserFriendlyException(String.format(\"Your proxy credentials configuration is not valid: %s\", e.getMessage()), e, ExitCodeType.FAILURE_PROXY_CONNECTIVITY);\n+        }\n+\n+        ProxyInfoBuilder proxyInfoBuilder = new ProxyInfoBuilder();\n+\n+        proxyInfoBuilder.setCredentials(proxyCredentials);\n+        proxyInfoBuilder.setHost(proxyHost);\n+        proxyInfoBuilder.setPort(NumberUtils.toInt(proxyPort, 0));\n+        proxyInfoBuilder.setNtlmDomain(proxyNtlmDomain);\n+        proxyInfoBuilder.setNtlmWorkstation(proxyNtlmWorkstation);\n+        try {\n+            return proxyInfoBuilder.build();\n+        } catch (IllegalArgumentException e) {\n+            throw new DetectUserFriendlyException(String.format(\"Your proxy configuration is not valid: %s\", e.getMessage()), e, ExitCodeType.FAILURE_PROXY_CONNECTIVITY);\n+        }\n+    }\n+\n+    public ProductBootOptions createProductBootOptions() {\n+        Boolean ignoreFailures = detectConfiguration.getValueOrDefault(DetectProperties.Companion.getDETECT_IGNORE_CONNECTION_FAILURES());\n+        Boolean testConnections = detectConfiguration.getValueOrDefault(DetectProperties.Companion.getDETECT_TEST_CONNECTION());\n+        return new ProductBootOptions(ignoreFailures, testConnections);\n+    }\n+\n+    public ConnectionDetails createConnectionDetails() throws DetectUserFriendlyException, InvalidPropertyException {\n+        Boolean alwaysTrust = PropertyConfigUtils.getFirstProvidedValueOrDefault(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_TRUST_CERT(), DetectProperties.Companion.getBLACKDUCK_HUB_TRUST_CERT());\n+        List<String> proxyIgnoredHosts = PropertyConfigUtils.getFirstProvidedValueOrDefault(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_PROXY_IGNORED_HOSTS(), DetectProperties.Companion.getBLACKDUCK_HUB_PROXY_IGNORED_HOSTS());\n+        List<Pattern> proxyPatterns = proxyIgnoredHosts.stream()\n+        .map(it -> Pattern.compile(it))\n+            .collect(Collectors.toList());\n+        ProxyInfo proxyInformation = createBlackDuckProxyInfo();\n+        return new ConnectionDetails(proxyInformation, proxyPatterns, findTimeoutInSeconds(), alwaysTrust);\n+    }\n+\n+    public BlackDuckConnectionDetails createBlackDuckConnectionDetails() throws InvalidPropertyException, DetectUserFriendlyException {\n+        Boolean offline = PropertyConfigUtils.getFirstProvidedValueOrDefault(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_OFFLINE_MODE(), DetectProperties.Companion.getBLACKDUCK_HUB_OFFLINE_MODE());\n+        String blackduckUrl = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getBLACKDUCK_URL(), DetectProperties.Companion.getBLACKDUCK_HUB_URL()).orElse(null);\n+        Set<String> allBlackDuckKeys = new BlackDuckServerConfigBuilder().getPropertyKeys().stream()\n+                                           .filter(it -> !(it .contains(\"proxy\")))\n+                                           .collect(Collectors.toSet());\n+        Map<String, String> blackDuckProperties = detectConfiguration.getRaw(allBlackDuckKeys);\n+\n+        return new BlackDuckConnectionDetails(offline, blackduckUrl, blackDuckProperties, findParallelProcessors(), createConnectionDetails());\n+    }\n+    //#endregion\n+\n+    public PolarisServerConfigBuilder createPolarisServerConfigBuilder(File userHome) throws InvalidPropertyException {\n+        PolarisServerConfigBuilder polarisServerConfigBuilder = PolarisServerConfig.newBuilder();\n+        Set<String> allPolarisKeys = polarisServerConfigBuilder.getPropertyKeys();\n+        Map<String, String> polarisProperties = detectConfiguration.getRaw(allPolarisKeys);\n+\n+        // Detect and polaris-common use different property keys for the Polaris URL,\n+        // so we need to pull it from they Detect config using Detect's key,\n+        // and write it to the polaris-common config using the polaris-common key.\n+        Optional<String> polarisUrlValue = detectConfiguration.getRaw(DetectProperties.Companion.getPOLARIS_URL());\n+        if (StringUtils.isNotBlank(polarisUrlValue.orElse(null))) {\n+            polarisProperties.put(PolarisServerConfigBuilder.URL_KEY.getKey(), polarisUrlValue.orElse(null));\n+        }\n+\n+        polarisServerConfigBuilder.setLogger(new SilentIntLogger());\n+\n+        polarisServerConfigBuilder.setProperties(polarisProperties.entrySet());\n+        polarisServerConfigBuilder.setUserHome(userHome.getAbsolutePath());\n+        polarisServerConfigBuilder.setTimeoutInSeconds(findTimeoutInSeconds().intValue());\n+        return polarisServerConfigBuilder;\n+    }\n+\n+    public PhoneHomeOptions createPhoneHomeOptions() {\n+        Map<String, String> phoneHomePassthrough = detectConfiguration.getRaw(DetectProperties.Companion.getPHONEHOME_PASSTHROUGH());\n+        return new PhoneHomeOptions(phoneHomePassthrough);\n+    }\n+\n+    public RunOptions createRunOptions() throws InvalidPropertyException {\n+        // This is because it is double deprecated so we must check if either property is set.\n+        Optional<Boolean> sigScanDisabled = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getDETECT_BLACKDUCK_SIGNATURE_SCANNER_DISABLED(), DetectProperties.Companion.getDETECT_HUB_SIGNATURE_SCANNER_DISABLED());\n+        Optional<Boolean> polarisEnabled = PropertyConfigUtils.getFirstProvidedValueOrEmpty(detectConfiguration, DetectProperties.Companion.getDETECT_SWIP_ENABLED());\n+\n+        List<FilterableEnumValue<DetectTool>> includedTools = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_TOOLS());\n+        List<FilterableEnumValue<DetectTool>> excludedTools = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_TOOLS_EXCLUDED());\n+        ExcludeIncludeEnumFilter filter = new ExcludeIncludeEnumFilter(excludedTools, includedTools);\n+        DetectToolFilter detectToolFilter = new DetectToolFilter(filter, sigScanDisabled, polarisEnabled);\n+\n+        Boolean unmapCodeLocations = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_PROJECT_CODELOCATION_UNMAP());\n+        String aggregateName = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_BOM_AGGREGATE_NAME()).orElse(null);\n+        AggregateMode aggregateMode = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_BOM_AGGREGATE_REMEDIATION_MODE());\n+        List<DetectTool> preferredTools = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_PROJECT_TOOL());\n+        Boolean useBdio2 = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_BDIO2_ENABLED());\n+\n+        return new RunOptions(unmapCodeLocations, aggregateName, aggregateMode, preferredTools, detectToolFilter, useBdio2);\n+    }\n+\n+    public DirectoryOptions createDirectoryOptions() throws InvalidPropertyException {\n+        Path sourcePath = detectConfiguration.getValue(DetectProperties.Companion.getDETECT_SOURCE_PATH()).map(path -> path.resolvePath(pathResolver)).orElse(null);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM5NjAyMw=="}, "originalCommit": {"oid": "0de1970859a0e263e30e13d9fd51587e7252caf4"}, "originalPosition": 267}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1634, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}