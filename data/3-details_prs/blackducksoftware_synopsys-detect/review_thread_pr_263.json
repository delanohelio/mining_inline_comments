{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1OTUzODE5", "number": 263, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxODoxMjozNVrOFDnYDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMjo0NjozNlrOFD-Dcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzM1MTgwOnYy", "diffSide": "RIGHT", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/cli/ConanCliExtractor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxODoxMjozNVrOIDWycQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxODoxMjozNVrOIDWycQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM5MDAwMQ==", "bodyText": "I really like this approach. We should do this more often.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/263#discussion_r540390001", "createdAt": "2020-12-10T18:12:35Z", "author": {"login": "taikuukaits"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/cli/ConanCliExtractor.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.conan.cli;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.jetbrains.annotations.NotNull;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.synopsys.integration.detectable.detectable.executable.DetectableExecutableRunner;\n+import com.synopsys.integration.detectable.detectables.conan.ConanDetectableResult;\n+import com.synopsys.integration.detectable.detectables.conan.cli.parser.ConanInfoParser;\n+import com.synopsys.integration.detectable.extraction.Extraction;\n+import com.synopsys.integration.exception.IntegrationException;\n+import com.synopsys.integration.executable.ExecutableOutput;\n+\n+public class ConanCliExtractor {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+    private final DetectableExecutableRunner executableRunner;\n+    private final ConanInfoParser conanInfoParser;\n+\n+    public ConanCliExtractor(DetectableExecutableRunner executableRunner, ConanInfoParser conanInfoParser) {\n+        this.executableRunner = executableRunner;\n+        this.conanInfoParser = conanInfoParser;\n+    }\n+\n+    public Extraction extract(File projectDir, File conanExe, ConanCliExtractorOptions conanCliExtractorOptions) {\n+        List<String> exeArgs = generateConanInfoCmdArgs(projectDir, conanCliExtractorOptions);\n+        ExecutableOutput conanInfoOutput;\n+        try {\n+            conanInfoOutput = executableRunner.execute(projectDir, conanExe, exeArgs);\n+        } catch (Exception e) {\n+            logger.error(String.format(\"Exception thrown executing conan info command: %s\", e.getMessage()));\n+            return new Extraction.Builder().exception(e).build();\n+        }\n+        if (!wasSuccess(conanInfoOutput)) {\n+            return new Extraction.Builder().failure(\"Conan info command reported errors\").build();\n+        }\n+        if (!producedOutput(conanInfoOutput)) {\n+            return new Extraction.Builder().failure(\"Conan info command produced no output\").build();\n+        }\n+        try {\n+            ConanDetectableResult result = conanInfoParser.generateCodeLocationFromConanInfoOutput(conanInfoOutput.getStandardOutput(),\n+                conanCliExtractorOptions.shouldIncludeDevDependencies(), conanCliExtractorOptions.preferLongFormExternalIds());\n+            return new Extraction.Builder().success(result.getCodeLocation()).projectName(result.getProjectName()).projectVersion(result.getProjectVersion()).build();\n+        } catch (IntegrationException e) {\n+            return new Extraction.Builder().failure(e.getMessage()).build();\n+        }\n+    }\n+\n+    private boolean wasSuccess(ExecutableOutput conanInfoOutput) {\n+        String errorOutput = conanInfoOutput.getErrorOutput();\n+        if (StringUtils.isNotBlank(errorOutput) && errorOutput.contains(\"ERROR: \")) {\n+            logger.error(\"The conan info command reported errors: {}\", errorOutput);\n+            return false;\n+        }\n+        if (StringUtils.isNotBlank(errorOutput)) {\n+            logger.debug(\"The conan info command wrote to stderr: {}\", errorOutput);\n+        }\n+        return true;\n+    }\n+\n+    private boolean producedOutput(ExecutableOutput conanInfoOutput) {\n+        String standardOutput = conanInfoOutput.getStandardOutput();\n+        if (StringUtils.isBlank(standardOutput)) {\n+            logger.error(\"Nothing returned from conan info command\");\n+            return false;\n+        }\n+        return true;\n+    }\n+\n+    @NotNull\n+    private List<String> generateConanInfoCmdArgs(File projectDir, ConanCliExtractorOptions conanCliExtractorOptions) {\n+        List<String> exeArgs = new ArrayList<>();\n+        exeArgs.add(\"info\");\n+        conanCliExtractorOptions.getLockfilePath().ifPresent(lockfilePath -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fd379992c24ca34b0d429a205985400e301d2f8"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzM4Nzg3OnYy", "diffSide": "RIGHT", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/graph/ConanNodeBuilder.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxODoyMToxMFrOIDXIBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzo0MDoxOFrOIDifTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM5NTUyNg==", "bodyText": "It seemed like parsing and model were well separated but here the builder does the parsing? I think ideally this would be in some kind of parser.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/263#discussion_r540395526", "createdAt": "2020-12-10T18:21:10Z", "author": {"login": "taikuukaits"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/graph/ConanNodeBuilder.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.conan.graph;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.StringTokenizer;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+// TODO when ConanNode is re-worked, this class will need to be completely  re-thought\n+public class ConanNodeBuilder {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+    private String ref;\n+    private String path;\n+    private String name;\n+    private String version;\n+    private String user;\n+    private String channel;\n+    private String recipeRevision;\n+    private String packageId;\n+    private String packageRevision;\n+    private final List<String> requiresRefs = new ArrayList<>();\n+    private List<Integer> requiresIndices;\n+    private final List<String> buildRequiresRefs = new ArrayList<>();\n+    private List<Integer> buildRequiresIndices;\n+    private boolean valid = true;\n+    private boolean forcedRootNode = false;\n+\n+    public ConanNodeBuilder forceRootNode() {\n+        forcedRootNode = true;\n+        return this;\n+    }\n+\n+    public ConanNodeBuilder setRefFromLockfile(String ref) {\n+        if (StringUtils.isBlank(ref)) {\n+            return this;\n+        }\n+        ref = ref.trim();\n+        StringTokenizer tokenizer = new StringTokenizer(ref, \"@/#\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fd379992c24ca34b0d429a205985400e301d2f8"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4MTcwOA==", "bodyText": "good point. all parsing is now in the parsers", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/263#discussion_r540581708", "createdAt": "2020-12-10T23:40:18Z", "author": {"login": "stevebillings"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/graph/ConanNodeBuilder.java", "diffHunk": "@@ -0,0 +1,193 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.conan.graph;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.StringTokenizer;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+// TODO when ConanNode is re-worked, this class will need to be completely  re-thought\n+public class ConanNodeBuilder {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+    private String ref;\n+    private String path;\n+    private String name;\n+    private String version;\n+    private String user;\n+    private String channel;\n+    private String recipeRevision;\n+    private String packageId;\n+    private String packageRevision;\n+    private final List<String> requiresRefs = new ArrayList<>();\n+    private List<Integer> requiresIndices;\n+    private final List<String> buildRequiresRefs = new ArrayList<>();\n+    private List<Integer> buildRequiresIndices;\n+    private boolean valid = true;\n+    private boolean forcedRootNode = false;\n+\n+    public ConanNodeBuilder forceRootNode() {\n+        forcedRootNode = true;\n+        return this;\n+    }\n+\n+    public ConanNodeBuilder setRefFromLockfile(String ref) {\n+        if (StringUtils.isBlank(ref)) {\n+            return this;\n+        }\n+        ref = ref.trim();\n+        StringTokenizer tokenizer = new StringTokenizer(ref, \"@/#\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM5NTUyNg=="}, "originalCommit": {"oid": "4fd379992c24ca34b0d429a205985400e301d2f8"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzM5NDgxOnYy", "diffSide": "RIGHT", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/lockfile/ConanLockfileDetectable.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxODoyMjozOVrOIDXL9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzo0MTo1OFrOIDih-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM5NjUzMg==", "bodyText": "I don't love having this code here. Do we follow this pattern in other detectables? Is this something we want to do for all detectables?", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/263#discussion_r540396532", "createdAt": "2020-12-10T18:22:39Z", "author": {"login": "taikuukaits"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/lockfile/ConanLockfileDetectable.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.conan.lockfile;\n+\n+import java.io.File;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.synopsys.integration.detectable.Detectable;\n+import com.synopsys.integration.detectable.DetectableEnvironment;\n+import com.synopsys.integration.detectable.detectable.annotation.DetectableInfo;\n+import com.synopsys.integration.detectable.detectable.exception.DetectableException;\n+import com.synopsys.integration.detectable.detectable.executable.ExecutableFailedException;\n+import com.synopsys.integration.detectable.detectable.file.FileFinder;\n+import com.synopsys.integration.detectable.detectable.result.DetectableResult;\n+import com.synopsys.integration.detectable.detectable.result.FileNotFoundDetectableResult;\n+import com.synopsys.integration.detectable.detectable.result.GivenFileNotFoundDetectableResult;\n+import com.synopsys.integration.detectable.detectable.result.PassedDetectableResult;\n+import com.synopsys.integration.detectable.extraction.Extraction;\n+import com.synopsys.integration.detectable.extraction.ExtractionEnvironment;\n+\n+@DetectableInfo(language = \"C/C++\", forge = \"conan\", requirementsMarkdown = \"Files: conan.lock.\")\n+public class ConanLockfileDetectable extends Detectable {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+    public static final String CONANLOCKFILE = \"conan.lock\";\n+    private final FileFinder fileFinder;\n+    private final ConanLockfileExtractor conanLockfileExtractor;\n+    private final ConanLockfileExtractorOptions conanLockfileExtractorOptions;\n+    private File lockfile;\n+\n+    public ConanLockfileDetectable(DetectableEnvironment environment, FileFinder fileFinder, ConanLockfileExtractor conanLockfileExtractor,\n+        ConanLockfileExtractorOptions conanLockfileExtractorOptions) {\n+        super(environment);\n+        this.fileFinder = fileFinder;\n+        this.conanLockfileExtractor = conanLockfileExtractor;\n+        this.conanLockfileExtractorOptions = conanLockfileExtractorOptions;\n+    }\n+\n+    @Override\n+    public DetectableResult applicable() {\n+        if (conanLockfileExtractorOptions.getLockfilePath().isPresent()) {\n+            logger.debug(\"Conan Lockfile detectable applies because user supplied lockfile path {}\", conanLockfileExtractorOptions.getLockfilePath().get());\n+            return new PassedDetectableResult();\n+        }\n+        File discoveredLockfile = fileFinder.findFile(environment.getDirectory(), CONANLOCKFILE);\n+        if (discoveredLockfile == null) {\n+            return new FileNotFoundDetectableResult(CONANLOCKFILE);\n+        }\n+        logger.debug(\"Conan Lockfile detectable applies because Detect found the default lockfile {}\", discoveredLockfile.getAbsolutePath());\n+        lockfile = discoveredLockfile;\n+        return new PassedDetectableResult();\n+    }\n+\n+    @Override\n+    public DetectableResult extractable() throws DetectableException {\n+        if (conanLockfileExtractorOptions.getLockfilePath().isPresent()) {\n+            String givenLockfilePath = conanLockfileExtractorOptions.getLockfilePath().get();\n+            Optional<File> verifiedLockfile = verifyFile(givenLockfilePath);\n+            if (verifiedLockfile.isPresent()) {\n+                lockfile = verifiedLockfile.get();\n+            } else {\n+                return new GivenFileNotFoundDetectableResult(givenLockfilePath);\n+            }\n+        }\n+        return new PassedDetectableResult();\n+    }\n+\n+    @Override\n+    public Extraction extract(ExtractionEnvironment extractionEnvironment) throws ExecutableFailedException {\n+        return conanLockfileExtractor.extract(lockfile, conanLockfileExtractorOptions);\n+    }\n+\n+    private Optional<File> verifyFile(String filePath) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fd379992c24ca34b0d429a205985400e301d2f8"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4MjM5NQ==", "bodyText": "I also realized that it was inconsistent with what other detectors do. The file finder checks for existence and not readability. So I took out the readability check, and inlined the little bit of code that remained (the existence check).", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/263#discussion_r540582395", "createdAt": "2020-12-10T23:41:58Z", "author": {"login": "stevebillings"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/lockfile/ConanLockfileDetectable.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.conan.lockfile;\n+\n+import java.io.File;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.synopsys.integration.detectable.Detectable;\n+import com.synopsys.integration.detectable.DetectableEnvironment;\n+import com.synopsys.integration.detectable.detectable.annotation.DetectableInfo;\n+import com.synopsys.integration.detectable.detectable.exception.DetectableException;\n+import com.synopsys.integration.detectable.detectable.executable.ExecutableFailedException;\n+import com.synopsys.integration.detectable.detectable.file.FileFinder;\n+import com.synopsys.integration.detectable.detectable.result.DetectableResult;\n+import com.synopsys.integration.detectable.detectable.result.FileNotFoundDetectableResult;\n+import com.synopsys.integration.detectable.detectable.result.GivenFileNotFoundDetectableResult;\n+import com.synopsys.integration.detectable.detectable.result.PassedDetectableResult;\n+import com.synopsys.integration.detectable.extraction.Extraction;\n+import com.synopsys.integration.detectable.extraction.ExtractionEnvironment;\n+\n+@DetectableInfo(language = \"C/C++\", forge = \"conan\", requirementsMarkdown = \"Files: conan.lock.\")\n+public class ConanLockfileDetectable extends Detectable {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+    public static final String CONANLOCKFILE = \"conan.lock\";\n+    private final FileFinder fileFinder;\n+    private final ConanLockfileExtractor conanLockfileExtractor;\n+    private final ConanLockfileExtractorOptions conanLockfileExtractorOptions;\n+    private File lockfile;\n+\n+    public ConanLockfileDetectable(DetectableEnvironment environment, FileFinder fileFinder, ConanLockfileExtractor conanLockfileExtractor,\n+        ConanLockfileExtractorOptions conanLockfileExtractorOptions) {\n+        super(environment);\n+        this.fileFinder = fileFinder;\n+        this.conanLockfileExtractor = conanLockfileExtractor;\n+        this.conanLockfileExtractorOptions = conanLockfileExtractorOptions;\n+    }\n+\n+    @Override\n+    public DetectableResult applicable() {\n+        if (conanLockfileExtractorOptions.getLockfilePath().isPresent()) {\n+            logger.debug(\"Conan Lockfile detectable applies because user supplied lockfile path {}\", conanLockfileExtractorOptions.getLockfilePath().get());\n+            return new PassedDetectableResult();\n+        }\n+        File discoveredLockfile = fileFinder.findFile(environment.getDirectory(), CONANLOCKFILE);\n+        if (discoveredLockfile == null) {\n+            return new FileNotFoundDetectableResult(CONANLOCKFILE);\n+        }\n+        logger.debug(\"Conan Lockfile detectable applies because Detect found the default lockfile {}\", discoveredLockfile.getAbsolutePath());\n+        lockfile = discoveredLockfile;\n+        return new PassedDetectableResult();\n+    }\n+\n+    @Override\n+    public DetectableResult extractable() throws DetectableException {\n+        if (conanLockfileExtractorOptions.getLockfilePath().isPresent()) {\n+            String givenLockfilePath = conanLockfileExtractorOptions.getLockfilePath().get();\n+            Optional<File> verifiedLockfile = verifyFile(givenLockfilePath);\n+            if (verifiedLockfile.isPresent()) {\n+                lockfile = verifiedLockfile.get();\n+            } else {\n+                return new GivenFileNotFoundDetectableResult(givenLockfilePath);\n+            }\n+        }\n+        return new PassedDetectableResult();\n+    }\n+\n+    @Override\n+    public Extraction extract(ExtractionEnvironment extractionEnvironment) throws ExecutableFailedException {\n+        return conanLockfileExtractor.extract(lockfile, conanLockfileExtractorOptions);\n+    }\n+\n+    private Optional<File> verifyFile(String filePath) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM5NjUzMg=="}, "originalCommit": {"oid": "4fd379992c24ca34b0d429a205985400e301d2f8"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5MzM5Nzc3OnYy", "diffSide": "RIGHT", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/lockfile/parser/ConanLockfileParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxODoyMzoyNVrOIDXN1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQyMzo0MjoxMVrOIDiiXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM5NzAxMg==", "bodyText": "Should gson be a constructor parameter?", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/263#discussion_r540397012", "createdAt": "2020-12-10T18:23:25Z", "author": {"login": "taikuukaits"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/lockfile/parser/ConanLockfileParser.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.conan.lockfile.parser;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.synopsys.integration.bdio.model.externalid.ExternalIdFactory;\n+import com.synopsys.integration.detectable.detectables.conan.ConanCodeLocationGenerator;\n+import com.synopsys.integration.detectable.detectables.conan.ConanDetectableResult;\n+import com.synopsys.integration.detectable.detectables.conan.ConanExternalIdVersionGenerator;\n+import com.synopsys.integration.detectable.detectables.conan.graph.ConanNode;\n+import com.synopsys.integration.detectable.detectables.conan.graph.ConanNodeBuilder;\n+import com.synopsys.integration.detectable.detectables.conan.lockfile.parser.model.ConanLockfileData;\n+import com.synopsys.integration.detectable.detectables.conan.lockfile.parser.model.ConanLockfileNode;\n+import com.synopsys.integration.exception.IntegrationException;\n+\n+public class ConanLockfileParser {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+    private final ConanCodeLocationGenerator conanCodeLocationGenerator;\n+    private final ExternalIdFactory externalIdFactory;\n+    private final ConanExternalIdVersionGenerator versionGenerator;\n+\n+    public ConanLockfileParser(ConanCodeLocationGenerator conanCodeLocationGenerator, ExternalIdFactory externalIdFactory, ConanExternalIdVersionGenerator versionGenerator) {\n+        this.conanCodeLocationGenerator = conanCodeLocationGenerator;\n+        this.externalIdFactory = externalIdFactory;\n+        this.versionGenerator = versionGenerator;\n+    }\n+\n+    public ConanDetectableResult generateCodeLocationFromConanLockfileContents(Gson gson, String conanLockfileContents,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fd379992c24ca34b0d429a205985400e301d2f8"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDU4MjQ5Mg==", "bodyText": "yes, done.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/263#discussion_r540582492", "createdAt": "2020-12-10T23:42:11Z", "author": {"login": "stevebillings"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/lockfile/parser/ConanLockfileParser.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.conan.lockfile.parser;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.function.Consumer;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.google.gson.Gson;\n+import com.synopsys.integration.bdio.model.externalid.ExternalIdFactory;\n+import com.synopsys.integration.detectable.detectables.conan.ConanCodeLocationGenerator;\n+import com.synopsys.integration.detectable.detectables.conan.ConanDetectableResult;\n+import com.synopsys.integration.detectable.detectables.conan.ConanExternalIdVersionGenerator;\n+import com.synopsys.integration.detectable.detectables.conan.graph.ConanNode;\n+import com.synopsys.integration.detectable.detectables.conan.graph.ConanNodeBuilder;\n+import com.synopsys.integration.detectable.detectables.conan.lockfile.parser.model.ConanLockfileData;\n+import com.synopsys.integration.detectable.detectables.conan.lockfile.parser.model.ConanLockfileNode;\n+import com.synopsys.integration.exception.IntegrationException;\n+\n+public class ConanLockfileParser {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+    private final ConanCodeLocationGenerator conanCodeLocationGenerator;\n+    private final ExternalIdFactory externalIdFactory;\n+    private final ConanExternalIdVersionGenerator versionGenerator;\n+\n+    public ConanLockfileParser(ConanCodeLocationGenerator conanCodeLocationGenerator, ExternalIdFactory externalIdFactory, ConanExternalIdVersionGenerator versionGenerator) {\n+        this.conanCodeLocationGenerator = conanCodeLocationGenerator;\n+        this.externalIdFactory = externalIdFactory;\n+        this.versionGenerator = versionGenerator;\n+    }\n+\n+    public ConanDetectableResult generateCodeLocationFromConanLockfileContents(Gson gson, String conanLockfileContents,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDM5NzAxMg=="}, "originalCommit": {"oid": "4fd379992c24ca34b0d429a205985400e301d2f8"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM5NzA2NzM4OnYy", "diffSide": "RIGHT", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/ConanExternalIdVersionGenerator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMVQxMjo0NjozNlrOID3R-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQwMDo0MjowMVrOIE7x-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDkyMjM2Mw==", "bodyText": "Since this class contains no state this could be a static method.  That way you don't have to instantiate it first.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/263#discussion_r540922363", "createdAt": "2020-12-11T12:46:36Z", "author": {"login": "psantos1113"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/ConanExternalIdVersionGenerator.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.conan;\n+\n+import com.synopsys.integration.detectable.detectables.conan.graph.ConanNode;\n+\n+// TODO This class needs unit test coverage. Then, it needs to get re-worked\n+// along with ConanNode (which will return Optionals).\n+public class ConanExternalIdVersionGenerator {\n+\n+    public String generateExternalIdVersionString(ConanNode node, boolean preferLongFormExternalIds) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "82b93f28ddd1093662117871517d77bb7f59e1b7"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjA0NDY2NQ==", "bodyText": "It is now static.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/263#discussion_r542044665", "createdAt": "2020-12-14T00:42:01Z", "author": {"login": "stevebillings"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/ConanExternalIdVersionGenerator.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.conan;\n+\n+import com.synopsys.integration.detectable.detectables.conan.graph.ConanNode;\n+\n+// TODO This class needs unit test coverage. Then, it needs to get re-worked\n+// along with ConanNode (which will return Optionals).\n+public class ConanExternalIdVersionGenerator {\n+\n+    public String generateExternalIdVersionString(ConanNode node, boolean preferLongFormExternalIds) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDkyMjM2Mw=="}, "originalCommit": {"oid": "82b93f28ddd1093662117871517d77bb7f59e1b7"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1544, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}