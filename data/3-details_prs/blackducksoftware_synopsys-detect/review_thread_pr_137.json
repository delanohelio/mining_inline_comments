{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkxNzA4MzY3", "number": 137, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDoyNzoxMVrODq9RcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDoyNzoxMVrODq9RcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2MzcwNjczOnYy", "diffSide": "RIGHT", "path": "detectable/src/test/java/com/synopsys/integration/detectable/detectables/maven/functional/MavenParseDetectableTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDoyNzoxMVrOF7BxAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNFQyMDozMDozNFrOF7B4xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzOTIzNA==", "bodyText": "I think we should assert on the code location count - if we expect 2, just expect 2 code locations:\nAssertions.assertEquals(1, extraction.getCodeLocations().size()) for example. Not sure how many others this change might affect but imo we should prefer it.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/137#discussion_r397439234", "createdAt": "2020-03-24T20:27:11Z", "author": {"login": "taikuukaits"}, "path": "detectable/src/test/java/com/synopsys/integration/detectable/detectables/maven/functional/MavenParseDetectableTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.maven.functional;\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.jupiter.api.Assertions;\n+\n+import com.synopsys.integration.bdio.model.Forge;\n+import com.synopsys.integration.bdio.model.externalid.ExternalId;\n+import com.synopsys.integration.bdio.model.externalid.ExternalIdFactory;\n+import com.synopsys.integration.detectable.Detectable;\n+import com.synopsys.integration.detectable.DetectableEnvironment;\n+import com.synopsys.integration.detectable.Extraction;\n+import com.synopsys.integration.detectable.detectables.maven.parsing.MavenParseOptions;\n+import com.synopsys.integration.detectable.functional.DetectableFunctionalTest;\n+import com.synopsys.integration.detectable.util.graph.NameVersionGraphAssert;\n+\n+public class MavenParseDetectableTest extends DetectableFunctionalTest {\n+\n+    public MavenParseDetectableTest() throws IOException {\n+        super(\"mavenparse\");\n+    }\n+\n+    @Override\n+    protected void setup() throws IOException {\n+        addFile(Paths.get(\"pom.xml\"),\n+            \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\",\n+            \"<project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\">\",\n+            \"    <modelVersion>4.0.0</modelVersion>\",\n+            \"    <parent>\",\n+            \"        <groupId>com.blackducksoftware.integration</groupId>\",\n+            \"        <artifactId>common-maven-parent</artifactId>\",\n+            \"        <version>5.0.0</version>\",\n+            \"    </parent>\",\n+            \"\",\n+            \"    <artifactId>hub-teamcity</artifactId>\",\n+            \"    <version>4.0.1-SNAPSHOT</version>\",\n+            \"    <packaging>pom</packaging>\",\n+            \"\",\n+            \"    <dependencyManagement>\",\n+            \"        <dependencies>\",\n+            \"            <dependency>\",\n+            \"                <groupId>com.blackducksoftware.integration</groupId>\",\n+            \"                <artifactId>hub-common</artifactId>\",\n+            \"                <version>1.1.0</version>\",\n+            \"            </dependency>\",\n+            \"            <dependency>\",\n+            \"                <groupId>commons-io</groupId>\",\n+            \"                <artifactId>commons-io</artifactId>\",\n+            \"                <version>2.6</version>\",\n+            \"            </dependency>\",\n+            \"        </dependencies>\",\n+            \"    </dependencyManagement>\",\n+            \"</project>\"\n+        );\n+    }\n+\n+    @NotNull\n+    @Override\n+    public Detectable create(@NotNull final DetectableEnvironment detectableEnvironment) {\n+        return detectableFactory.createMavenParseDetectable(detectableEnvironment, new MavenParseOptions(false));\n+    }\n+\n+    @Override\n+    public void assertExtraction(@NotNull final Extraction extraction) {\n+        Assertions.assertNotEquals(0, extraction.getCodeLocations().size(), \"A code location should have been generated.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c4fc29e646006e6dc04d8b63b1e1f116e507c2b"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQ0MTIyMw==", "bodyText": "I agree, makes much more sense.  I think almost all of the tests have this exact line, I'll go through and update", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/137#discussion_r397441223", "createdAt": "2020-03-24T20:30:34Z", "author": {"login": "crowleySynopsys"}, "path": "detectable/src/test/java/com/synopsys/integration/detectable/detectables/maven/functional/MavenParseDetectableTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.maven.functional;\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+\n+import org.jetbrains.annotations.NotNull;\n+import org.junit.jupiter.api.Assertions;\n+\n+import com.synopsys.integration.bdio.model.Forge;\n+import com.synopsys.integration.bdio.model.externalid.ExternalId;\n+import com.synopsys.integration.bdio.model.externalid.ExternalIdFactory;\n+import com.synopsys.integration.detectable.Detectable;\n+import com.synopsys.integration.detectable.DetectableEnvironment;\n+import com.synopsys.integration.detectable.Extraction;\n+import com.synopsys.integration.detectable.detectables.maven.parsing.MavenParseOptions;\n+import com.synopsys.integration.detectable.functional.DetectableFunctionalTest;\n+import com.synopsys.integration.detectable.util.graph.NameVersionGraphAssert;\n+\n+public class MavenParseDetectableTest extends DetectableFunctionalTest {\n+\n+    public MavenParseDetectableTest() throws IOException {\n+        super(\"mavenparse\");\n+    }\n+\n+    @Override\n+    protected void setup() throws IOException {\n+        addFile(Paths.get(\"pom.xml\"),\n+            \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\",\n+            \"<project xmlns=\\\"http://maven.apache.org/POM/4.0.0\\\" xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" xsi:schemaLocation=\\\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\\\">\",\n+            \"    <modelVersion>4.0.0</modelVersion>\",\n+            \"    <parent>\",\n+            \"        <groupId>com.blackducksoftware.integration</groupId>\",\n+            \"        <artifactId>common-maven-parent</artifactId>\",\n+            \"        <version>5.0.0</version>\",\n+            \"    </parent>\",\n+            \"\",\n+            \"    <artifactId>hub-teamcity</artifactId>\",\n+            \"    <version>4.0.1-SNAPSHOT</version>\",\n+            \"    <packaging>pom</packaging>\",\n+            \"\",\n+            \"    <dependencyManagement>\",\n+            \"        <dependencies>\",\n+            \"            <dependency>\",\n+            \"                <groupId>com.blackducksoftware.integration</groupId>\",\n+            \"                <artifactId>hub-common</artifactId>\",\n+            \"                <version>1.1.0</version>\",\n+            \"            </dependency>\",\n+            \"            <dependency>\",\n+            \"                <groupId>commons-io</groupId>\",\n+            \"                <artifactId>commons-io</artifactId>\",\n+            \"                <version>2.6</version>\",\n+            \"            </dependency>\",\n+            \"        </dependencies>\",\n+            \"    </dependencyManagement>\",\n+            \"</project>\"\n+        );\n+    }\n+\n+    @NotNull\n+    @Override\n+    public Detectable create(@NotNull final DetectableEnvironment detectableEnvironment) {\n+        return detectableFactory.createMavenParseDetectable(detectableEnvironment, new MavenParseOptions(false));\n+    }\n+\n+    @Override\n+    public void assertExtraction(@NotNull final Extraction extraction) {\n+        Assertions.assertNotEquals(0, extraction.getCodeLocations().size(), \"A code location should have been generated.\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NzQzOTIzNA=="}, "originalCommit": {"oid": "9c4fc29e646006e6dc04d8b63b1e1f116e507c2b"}, "originalPosition": 89}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1578, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}