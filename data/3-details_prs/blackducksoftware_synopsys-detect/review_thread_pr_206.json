{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU0NzYyNDk3", "number": 206, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOToxMTozMFrOERlJ5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOToxNDozOVrOERlN-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODY5OTkwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/detect/tool/impactanalysis/VulnerabilityImpactAnalysisTool.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOToxMTozMFrOG2YAJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOToyMjo1MVrOG2YX-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2OTU0Mg==", "bodyText": "Should be directoryManager.getImpactOutputDirectory()", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/206#discussion_r459669542", "createdAt": "2020-07-23T19:11:30Z", "author": {"login": "taikuukaits"}, "path": "src/main/java/com/synopsys/integration/detect/tool/impactanalysis/VulnerabilityImpactAnalysisTool.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * synopsys-detect\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detect.tool.impactanalysis;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.synopsys.integration.detect.tool.impactanalysis.service.ImpactAnalysisService;\n+import com.synopsys.integration.detect.tool.impactanalysis.service.ImpactAnalysisUploadResult;\n+import com.synopsys.integration.detect.workflow.codelocation.CodeLocationNameManager;\n+import com.synopsys.integration.detect.workflow.file.DirectoryManager;\n+import com.synopsys.integration.exception.IntegrationException;\n+import com.synopsys.integration.rest.exception.IntegrationRestException;\n+import com.synopsys.integration.util.NameVersion;\n+import com.synopsys.method.analyzer.core.MethodUseAnalyzer;\n+\n+public class VulnerabilityImpactAnalysisTool {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    private final DirectoryManager directoryManager;\n+    private final CodeLocationNameManager codeLocationNameManager;\n+\n+    public VulnerabilityImpactAnalysisTool(DirectoryManager directoryManager, CodeLocationNameManager codeLocationNameManager) {\n+        this.directoryManager = directoryManager;\n+        this.codeLocationNameManager = codeLocationNameManager;\n+    }\n+\n+    public Path generateReport(NameVersion projectNameVersion) throws IOException {\n+        MethodUseAnalyzer analyzer = new MethodUseAnalyzer();\n+        String impactAnalysisCodeLocationName = codeLocationNameManager.createImpactAnalysisCodeLocationName(directoryManager.getSourceDirectory(), projectNameVersion.getName(), projectNameVersion.getVersion(), null, null);\n+\n+        Path outputReportPath = analyzer.analyze(directoryManager.getSourceDirectory().toPath(), directoryManager.getBinaryOutputDirectory().toPath(), impactAnalysisCodeLocationName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b008def2b887b08620850985a5e317382ea31ab6"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3NTY0MQ==", "bodyText": "Good catch.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/206#discussion_r459675641", "createdAt": "2020-07-23T19:22:51Z", "author": {"login": "JakeMathews"}, "path": "src/main/java/com/synopsys/integration/detect/tool/impactanalysis/VulnerabilityImpactAnalysisTool.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * synopsys-detect\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detect.tool.impactanalysis;\n+\n+import java.io.IOException;\n+import java.nio.file.Path;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import com.synopsys.integration.detect.tool.impactanalysis.service.ImpactAnalysisService;\n+import com.synopsys.integration.detect.tool.impactanalysis.service.ImpactAnalysisUploadResult;\n+import com.synopsys.integration.detect.workflow.codelocation.CodeLocationNameManager;\n+import com.synopsys.integration.detect.workflow.file.DirectoryManager;\n+import com.synopsys.integration.exception.IntegrationException;\n+import com.synopsys.integration.rest.exception.IntegrationRestException;\n+import com.synopsys.integration.util.NameVersion;\n+import com.synopsys.method.analyzer.core.MethodUseAnalyzer;\n+\n+public class VulnerabilityImpactAnalysisTool {\n+    private final Logger logger = LoggerFactory.getLogger(this.getClass());\n+\n+    private final DirectoryManager directoryManager;\n+    private final CodeLocationNameManager codeLocationNameManager;\n+\n+    public VulnerabilityImpactAnalysisTool(DirectoryManager directoryManager, CodeLocationNameManager codeLocationNameManager) {\n+        this.directoryManager = directoryManager;\n+        this.codeLocationNameManager = codeLocationNameManager;\n+    }\n+\n+    public Path generateReport(NameVersion projectNameVersion) throws IOException {\n+        MethodUseAnalyzer analyzer = new MethodUseAnalyzer();\n+        String impactAnalysisCodeLocationName = codeLocationNameManager.createImpactAnalysisCodeLocationName(directoryManager.getSourceDirectory(), projectNameVersion.getName(), projectNameVersion.getVersion(), null, null);\n+\n+        Path outputReportPath = analyzer.analyze(directoryManager.getSourceDirectory().toPath(), directoryManager.getBinaryOutputDirectory().toPath(), impactAnalysisCodeLocationName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2OTU0Mg=="}, "originalCommit": {"oid": "b008def2b887b08620850985a5e317382ea31ab6"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODcwMTE5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/detect/tool/impactanalysis/service/ImpactAnalysisService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOToxMTo1NFrOG2YA6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOToyMTo0MVrOG2YVmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2OTczOQ==", "bodyText": "Would prefer static creation methods like ImpactAnalysisUploadResult.success()", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/206#discussion_r459669739", "createdAt": "2020-07-23T19:11:54Z", "author": {"login": "taikuukaits"}, "path": "src/main/java/com/synopsys/integration/detect/tool/impactanalysis/service/ImpactAnalysisService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * synopsys-detect\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detect.tool.impactanalysis.service;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.gson.Gson;\n+import com.synopsys.integration.blackduck.api.core.BlackDuckPath;\n+import com.synopsys.integration.blackduck.service.BlackDuckService;\n+import com.synopsys.integration.blackduck.service.model.RequestFactory;\n+import com.synopsys.integration.exception.IntegrationException;\n+import com.synopsys.integration.rest.request.Request;\n+import com.synopsys.integration.rest.response.Response;\n+\n+public class ImpactAnalysisService {\n+    private static final BlackDuckPath IMPACT_ANALYSIS_PATH = new BlackDuckPath(\"/api/scans/vulnerability-impact\");\n+\n+    private final BlackDuckService blackDuckService;\n+    private final Gson gson;\n+\n+    public ImpactAnalysisService(BlackDuckService blackDuckService, Gson gson) {\n+        this.blackDuckService = blackDuckService;\n+        this.gson = gson;\n+    }\n+\n+    public ImpactAnalysisUploadResult uploadImpactAnalysisReport(Path reportPath) throws IntegrationException, IOException {\n+        String uri = blackDuckService.getUri(IMPACT_ANALYSIS_PATH);\n+\n+        Map<String, File> fileMap = new HashMap<>();\n+        fileMap.put(\"file\", reportPath.toFile());\n+        Request request = RequestFactory.createCommonPostRequestBuilder(fileMap, new HashMap<>())\n+                              .uri(uri)\n+                              .build();\n+\n+        try (Response response = blackDuckService.execute(request)) {\n+            ImpactAnalysisSuccessResult impactAnalysisSuccessResult = null;\n+            ImpactAnalysisErrorResult impactAnalysisErrorResult = null;\n+\n+            if (response.isStatusCodeSuccess()) {\n+                impactAnalysisSuccessResult = gson.fromJson(response.getContentString(), ImpactAnalysisSuccessResult.class);\n+            } else {\n+                impactAnalysisErrorResult = gson.fromJson(response.getContentString(), ImpactAnalysisErrorResult.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b008def2b887b08620850985a5e317382ea31ab6"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3NTAzNA==", "bodyText": "Done", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/206#discussion_r459675034", "createdAt": "2020-07-23T19:21:41Z", "author": {"login": "JakeMathews"}, "path": "src/main/java/com/synopsys/integration/detect/tool/impactanalysis/service/ImpactAnalysisService.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/**\n+ * synopsys-detect\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detect.tool.impactanalysis.service;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.file.Path;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import com.google.gson.Gson;\n+import com.synopsys.integration.blackduck.api.core.BlackDuckPath;\n+import com.synopsys.integration.blackduck.service.BlackDuckService;\n+import com.synopsys.integration.blackduck.service.model.RequestFactory;\n+import com.synopsys.integration.exception.IntegrationException;\n+import com.synopsys.integration.rest.request.Request;\n+import com.synopsys.integration.rest.response.Response;\n+\n+public class ImpactAnalysisService {\n+    private static final BlackDuckPath IMPACT_ANALYSIS_PATH = new BlackDuckPath(\"/api/scans/vulnerability-impact\");\n+\n+    private final BlackDuckService blackDuckService;\n+    private final Gson gson;\n+\n+    public ImpactAnalysisService(BlackDuckService blackDuckService, Gson gson) {\n+        this.blackDuckService = blackDuckService;\n+        this.gson = gson;\n+    }\n+\n+    public ImpactAnalysisUploadResult uploadImpactAnalysisReport(Path reportPath) throws IntegrationException, IOException {\n+        String uri = blackDuckService.getUri(IMPACT_ANALYSIS_PATH);\n+\n+        Map<String, File> fileMap = new HashMap<>();\n+        fileMap.put(\"file\", reportPath.toFile());\n+        Request request = RequestFactory.createCommonPostRequestBuilder(fileMap, new HashMap<>())\n+                              .uri(uri)\n+                              .build();\n+\n+        try (Response response = blackDuckService.execute(request)) {\n+            ImpactAnalysisSuccessResult impactAnalysisSuccessResult = null;\n+            ImpactAnalysisErrorResult impactAnalysisErrorResult = null;\n+\n+            if (response.isStatusCodeSuccess()) {\n+                impactAnalysisSuccessResult = gson.fromJson(response.getContentString(), ImpactAnalysisSuccessResult.class);\n+            } else {\n+                impactAnalysisErrorResult = gson.fromJson(response.getContentString(), ImpactAnalysisErrorResult.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY2OTczOQ=="}, "originalCommit": {"oid": "b008def2b887b08620850985a5e317382ea31ab6"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODcwMzc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/detect/tool/impactanalysis/service/ImpactAnalysisSuccessResult.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOToxMjo0NFrOG2YClg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOToyMDoxOVrOG2YSfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3MDE2Ng==", "bodyText": "I don't love writing our json pojo's with these constructors but I'm not requesting they be changed, just wanted to note it.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/206#discussion_r459670166", "createdAt": "2020-07-23T19:12:44Z", "author": {"login": "taikuukaits"}, "path": "src/main/java/com/synopsys/integration/detect/tool/impactanalysis/service/ImpactAnalysisSuccessResult.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/**\n+ * synopsys-detect\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detect.tool.impactanalysis.service;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.annotations.SerializedName;\n+\n+public class ImpactAnalysisSuccessResult {\n+\n+    @SerializedName(\"codeLocationId\")\n+    public final String codeLocationId;\n+\n+    @SerializedName(\"scannerVersion\")\n+    public final String scannerVersion;\n+\n+    @SerializedName(\"signatureVersion\")\n+    public final String signatureVersion;\n+\n+    @SerializedName(\"id\")\n+    public final String id;\n+\n+    @SerializedName(\"scanType\")\n+    public final String scanType;\n+\n+    @SerializedName(\"name\")\n+    public final String codeLocationName;\n+\n+    @SerializedName(\"hostName\")\n+    public final String hostName;\n+\n+    @SerializedName(\"baseDir\")\n+    public final String baseDir;\n+\n+    @SerializedName(\"ownerEntityKeyToken\")\n+    public final String ownerEntityKeyToken;\n+\n+    @SerializedName(\"createdOn\")\n+    public final String createdOn;\n+\n+    @SerializedName(\"timeToScan\")\n+    public final Integer timeToScan;\n+\n+    @SerializedName(\"createdByUserId\")\n+    public final String createdByUserId;\n+\n+    @SerializedName(\"status\")\n+    public final String status;\n+\n+    @SerializedName(\"statusMessage\")\n+    public final String statusMessage;\n+\n+    @SerializedName(\"matchCount\")\n+    public final Integer matchCount;\n+\n+    @SerializedName(\"numDirs\")\n+    public final Integer numberOfDirectories;\n+\n+    @SerializedName(\"numNonDirFiles\")\n+    public final Integer numberOfNonDirectoryFiles;\n+\n+    @SerializedName(\"scanSourceType\")\n+    public final String scanSourceType;\n+\n+    @SerializedName(\"scanSourceId\")\n+    public final String scanSourceId;\n+\n+    @SerializedName(\"scanTime\")\n+    public final Integer scanTime;\n+\n+    @SerializedName(\"timeLastModified\")\n+    public final Integer timeLastModified;\n+\n+    @SerializedName(\"timeToPersistMs\")\n+    public final Integer timeToPersistMs;\n+\n+    @SerializedName(\"arguments\")\n+    public final JsonObject arguments;\n+\n+    public ImpactAnalysisSuccessResult(String codeLocationId, String scannerVersion, String signatureVersion, String id, String scanType, String codeLocationName, String hostName, String baseDir, String ownerEntityKeyToken,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b008def2b887b08620850985a5e317382ea31ab6"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3NDIzOA==", "bodyText": "I'm of the belief that data coming into Detect should be final. The risk in allowing the input data to accidentally be modified seems unnecessary. Kotlin or Project Lombok would make this a non-issue. I agree it isn't pretty to look at though.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/206#discussion_r459674238", "createdAt": "2020-07-23T19:20:19Z", "author": {"login": "JakeMathews"}, "path": "src/main/java/com/synopsys/integration/detect/tool/impactanalysis/service/ImpactAnalysisSuccessResult.java", "diffHunk": "@@ -0,0 +1,126 @@\n+/**\n+ * synopsys-detect\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detect.tool.impactanalysis.service;\n+\n+import com.google.gson.JsonObject;\n+import com.google.gson.annotations.SerializedName;\n+\n+public class ImpactAnalysisSuccessResult {\n+\n+    @SerializedName(\"codeLocationId\")\n+    public final String codeLocationId;\n+\n+    @SerializedName(\"scannerVersion\")\n+    public final String scannerVersion;\n+\n+    @SerializedName(\"signatureVersion\")\n+    public final String signatureVersion;\n+\n+    @SerializedName(\"id\")\n+    public final String id;\n+\n+    @SerializedName(\"scanType\")\n+    public final String scanType;\n+\n+    @SerializedName(\"name\")\n+    public final String codeLocationName;\n+\n+    @SerializedName(\"hostName\")\n+    public final String hostName;\n+\n+    @SerializedName(\"baseDir\")\n+    public final String baseDir;\n+\n+    @SerializedName(\"ownerEntityKeyToken\")\n+    public final String ownerEntityKeyToken;\n+\n+    @SerializedName(\"createdOn\")\n+    public final String createdOn;\n+\n+    @SerializedName(\"timeToScan\")\n+    public final Integer timeToScan;\n+\n+    @SerializedName(\"createdByUserId\")\n+    public final String createdByUserId;\n+\n+    @SerializedName(\"status\")\n+    public final String status;\n+\n+    @SerializedName(\"statusMessage\")\n+    public final String statusMessage;\n+\n+    @SerializedName(\"matchCount\")\n+    public final Integer matchCount;\n+\n+    @SerializedName(\"numDirs\")\n+    public final Integer numberOfDirectories;\n+\n+    @SerializedName(\"numNonDirFiles\")\n+    public final Integer numberOfNonDirectoryFiles;\n+\n+    @SerializedName(\"scanSourceType\")\n+    public final String scanSourceType;\n+\n+    @SerializedName(\"scanSourceId\")\n+    public final String scanSourceId;\n+\n+    @SerializedName(\"scanTime\")\n+    public final Integer scanTime;\n+\n+    @SerializedName(\"timeLastModified\")\n+    public final Integer timeLastModified;\n+\n+    @SerializedName(\"timeToPersistMs\")\n+    public final Integer timeToPersistMs;\n+\n+    @SerializedName(\"arguments\")\n+    public final JsonObject arguments;\n+\n+    public ImpactAnalysisSuccessResult(String codeLocationId, String scannerVersion, String signatureVersion, String id, String scanType, String codeLocationName, String hostName, String baseDir, String ownerEntityKeyToken,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3MDE2Ng=="}, "originalCommit": {"oid": "b008def2b887b08620850985a5e317382ea31ab6"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2ODcxMDMzOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/synopsys/integration/detect/tool/impactanalysis/service/ImpactAnalysisServiceTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOToxNDozOVrOG2YGng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxOToyNToyNlrOG2YdcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3MTE5OA==", "bodyText": "I question that these tests provide any tangible value and are worth the 'code liability' though there is something to be said about whether or not tests are considered 'code liability'.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/206#discussion_r459671198", "createdAt": "2020-07-23T19:14:39Z", "author": {"login": "taikuukaits"}, "path": "src/test/java/com/synopsys/integration/detect/tool/impactanalysis/service/ImpactAnalysisServiceTest.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\n+ * synopsys-detect\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detect.tool.impactanalysis.service;\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.synopsys.integration.blackduck.service.BlackDuckService;\n+import com.synopsys.integration.detect.testutils.TestUtil;\n+import com.synopsys.integration.exception.IntegrationException;\n+import com.synopsys.integration.rest.response.Response;\n+\n+class ImpactAnalysisServiceTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b008def2b887b08620850985a5e317382ea31ab6"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3NzA0MA==", "bodyText": "I agree. I would like to add add an integration test when we have a Black Duck instance producing code locations.\nIt would feel weird for this tool to not have any test coverage, as there isn't any logic to test. I agree this particular test is not very useful, and in fact may be a code liability.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/206#discussion_r459677040", "createdAt": "2020-07-23T19:25:26Z", "author": {"login": "JakeMathews"}, "path": "src/test/java/com/synopsys/integration/detect/tool/impactanalysis/service/ImpactAnalysisServiceTest.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/**\n+ * synopsys-detect\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detect.tool.impactanalysis.service;\n+\n+import java.io.IOException;\n+import java.nio.file.Paths;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.Mockito;\n+\n+import com.google.gson.Gson;\n+import com.google.gson.GsonBuilder;\n+import com.synopsys.integration.blackduck.service.BlackDuckService;\n+import com.synopsys.integration.detect.testutils.TestUtil;\n+import com.synopsys.integration.exception.IntegrationException;\n+import com.synopsys.integration.rest.response.Response;\n+\n+class ImpactAnalysisServiceTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTY3MTE5OA=="}, "originalCommit": {"oid": "b008def2b887b08620850985a5e317382ea31ab6"}, "originalPosition": 39}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1640, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}