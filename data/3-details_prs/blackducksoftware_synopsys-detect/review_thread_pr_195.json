{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3MTI4NDcw", "number": 195, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODozNTozMlrOELzN_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODozNTozMlrOELzN_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgwODA4OTU5OnYy", "diffSide": "RIGHT", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/go/gomod/GoModCliExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODozNTozMlrOGtixKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxODozNTozMlrOGtixKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDQwODc0NQ==", "bodyText": "I prefer replacementDataExtractorC but he should return the replacement map (and not be passed a shared map).\nMap<String, String> replacementData = replacementDataExtractorC.extractReplacementData(listUJsonOutput);", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/195#discussion_r450408745", "createdAt": "2020-07-06T18:35:32Z", "author": {"login": "taikuukaits"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/go/gomod/GoModCliExtractor.java", "diffHunk": "@@ -78,20 +80,8 @@ public Extraction extract(final File directory, final File goExe) {\n \n     private List<String> modGraphOutputWithReplacements(File directory, File goExe, List<String> listUJsonOutput) throws ExecutableRunnerException, DetectableException {\n         final List<String> modGraphOutput = execute(directory, goExe, \"Querying for the go mod graph failed:\", \"mod\", \"graph\");\n-        String jsonString = convertOutputToJsonString(listUJsonOutput);\n-\n-        Type goListUJsonEntryType = new TypeToken<List<GoListUJsonData>>() {}.getType();\n-        List<GoListUJsonData> data = gson.fromJson(jsonString, goListUJsonEntryType);\n \n-        for (final GoListUJsonData entry : data) {\n-            ReplaceData replace = entry.getReplace();\n-            if (replace != null) {\n-                String path = entry.getPath();\n-                String originalVersion = entry.getVersion();\n-                String replaceVersion = replace.getVersion();\n-                replacementData.put(String.format(\"%s@%s\", path, originalVersion), String.format(\"%s@%s\", path, replaceVersion));\n-            }\n-        }\n+        replacementDataExtractorC.extractReplacementData(listUJsonOutput);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e2e04abd81ea3b501d7480d716d03f7e3a3b09e9"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1625, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}