{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMwNDQ2MDAy", "number": 256, "title": " Reduce complexity of run method.", "bodyText": "Refactor the run method to encapsulate portions of the method into private methods to make the run  method less complex.", "createdAt": "2020-12-01T17:02:42Z", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/256", "merged": true, "mergeCommit": {"oid": "30b59e9d18ef816853ee1f6f88c4ff6ffdc4dc0d"}, "closed": true, "closedAt": "2020-12-14T19:03:13Z", "author": {"login": "psantos1113"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdh8_6bgH2gAyNTMwNDQ2MDAyOjExMmM1MjE0YzJiNzNmNjU2MGI0NzAwZmYxYjY0M2YyMmFhZmZhY2Y=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmKg5AAH2gAyNTMwNDQ2MDAyOjk0Y2RlMmVkMjQxNWVkYTA4OGYyMzY5ZjlmYjdjMDQ2NzZkNTMxMjA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "112c5214c2b73f6560b4700ff1b643f22aaffacf", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/112c5214c2b73f6560b4700ff1b643f22aaffacf", "committedDate": "2020-12-01T17:00:51Z", "message": "refactor: Reduce complexity of run method."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMTE1OTA1", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/256#pullrequestreview-542115905", "createdAt": "2020-12-01T17:07:54Z", "commit": {"oid": "112c5214c2b73f6560b4700ff1b643f22aaffacf"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNzowNzo1NVrOH83A3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxNzowNzo1NVrOH83A3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzU3Nzk1MQ==", "bodyText": "I think this should be bootApplication for consistency.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/256#discussion_r533577951", "createdAt": "2020-12-01T17:07:55Z", "author": {"login": "taikuukaits"}, "path": "src/main/java/com/synopsys/integration/detect/Application.java", "diffHunk": "@@ -83,152 +82,178 @@ public static boolean shouldExit() {\n         return SHOULD_EXIT;\n     }\n \n-    public static void setShouldExit(final boolean shouldExit) {\n+    public static void setShouldExit(boolean shouldExit) {\n         SHOULD_EXIT = shouldExit;\n     }\n \n-    public static void main(final String[] args) {\n-        final SpringApplicationBuilder builder = new SpringApplicationBuilder(Application.class);\n+    public static void main(String[] args) {\n+        SpringApplicationBuilder builder = new SpringApplicationBuilder(Application.class);\n         builder.logStartupInfo(false);\n         builder.run(args);\n     }\n \n     @Override\n-    public void run(final ApplicationArguments applicationArguments) {\n-        final long startTime = System.currentTimeMillis();\n+    public void run(ApplicationArguments applicationArguments) {\n+        long startTime = System.currentTimeMillis();\n \n         //Events, Status and Exit Codes are required even if boot fails.\n-        final EventSystem eventSystem = new EventSystem();\n-        final DetectStatusManager statusManager = new DetectStatusManager(eventSystem);\n+        EventSystem eventSystem = new EventSystem();\n+        DetectStatusManager statusManager = new DetectStatusManager(eventSystem);\n \n-        final ExitCodeUtility exitCodeUtility = new ExitCodeUtility();\n-        final ExitCodeManager exitCodeManager = new ExitCodeManager(eventSystem, exitCodeUtility);\n+        ExitCodeUtility exitCodeUtility = new ExitCodeUtility();\n+        ExitCodeManager exitCodeManager = new ExitCodeManager(eventSystem, exitCodeUtility);\n \n         ReportListener.createDefault(eventSystem);\n-        final FormattedOutputManager formattedOutputManager = new FormattedOutputManager(eventSystem);\n+        FormattedOutputManager formattedOutputManager = new FormattedOutputManager(eventSystem);\n \n         //Before boot even begins, we create a new Spring context for Detect to work within.\n         logger.debug(\"Initializing detect.\");\n-        final DetectRun detectRun = DetectRun.createDefault();\n-        final DetectContext detectContext = new DetectContext(detectRun);\n+        DetectRun detectRun = DetectRun.createDefault();\n+        DetectContext detectContext = new DetectContext(detectRun);\n \n-        final Gson gson = BlackDuckServicesFactory.createDefaultGsonBuilder().setPrettyPrinting().create();\n-        final DetectInfo detectInfo = DetectInfoUtility.createDefaultDetectInfo();\n+        Gson gson = BlackDuckServicesFactory.createDefaultGsonBuilder().setPrettyPrinting().create();\n+        DetectInfo detectInfo = DetectInfoUtility.createDefaultDetectInfo();\n         detectContext.registerBean(gson);\n         detectContext.registerBean(detectInfo);\n \n-        Optional<DetectBootResult> detectBootResultOptional = Optional.empty();\n         boolean printOutput = true;\n         boolean shouldForceSuccess = false;\n \n+        Optional<DetectBootResult> detectBootResultOptional = executeDetectBoot(detectRun, applicationArguments, eventSystem, detectContext, exitCodeManager);\n+\n+        if (detectBootResultOptional.isPresent()) {\n+            DetectBootResult detectBootResult = detectBootResultOptional.get();\n+\n+            printOutput = detectBootResult.getDetectConfiguration()\n+                              .map(configuration -> !configuration.getValueOrDefault(DetectProperties.DETECT_SUPPRESS_RESULTS_OUTPUT.getProperty()))\n+                              .orElse(Boolean.TRUE);\n+\n+            shouldForceSuccess = detectBootResult.getDetectConfiguration()\n+                                     .map(configuration -> configuration.getValueOrDefault(DetectProperties.DETECT_FORCE_SUCCESS.getProperty()))\n+                                     .orElse(Boolean.FALSE);\n+\n+            runApplication(detectContext, detectRun, eventSystem, exitCodeManager, detectBootResult);\n+\n+            //Create status output file.\n+            logger.info(\"\");\n+            detectBootResult.getDirectoryManager()\n+                .ifPresent(directoryManager -> createStatusOutputFile(formattedOutputManager, detectInfo, directoryManager));\n+\n+        } else {\n+            logger.info(\"Will not create status file, detect did not boot.\");\n+        }\n+\n+        Bdo<DetectBootResult> detectBootResult = Bdo.of(detectBootResultOptional);\n+        shutdownApplication(detectBootResult, exitCodeManager);\n+\n+        logger.debug(\"All Detect actions completed.\");\n+\n+        //Generally, when requesting a failure status, an exit code is also requested, but if it is not, we default to an unknown error.\n+        if (statusManager.hasAnyFailure()) {\n+            eventSystem.publishEvent(Event.ExitCode, new ExitCodeRequest(ExitCodeType.FAILURE_UNKNOWN_ERROR, \"A failure status was requested by one or more of Detect's tools.\"));\n+        }\n+\n+        //Find the final (as requested) exit code\n+        ExitCodeType finalExitCode = exitCodeManager.getWinningExitCode();\n+\n+        //Print detect's status\n+        if (printOutput) {\n+            statusManager.logDetectResults(new Slf4jIntLogger(logger), finalExitCode);\n+        }\n+\n+        //Print duration of run\n+        long endTime = System.currentTimeMillis();\n+        String duration = DurationFormatUtils.formatPeriod(startTime, endTime, \"HH'h' mm'm' ss's' SSS'ms'\");\n+        logger.info(\"Detect duration: {}\", duration);\n+\n+        exitApplication(finalExitCode, shouldForceSuccess);\n+    }\n+\n+    private Optional<DetectBootResult> executeDetectBoot(DetectRun detectRun, ApplicationArguments applicationArguments, EventSystem eventSystem, DetectContext detectContext, ExitCodeManager exitCodeManager) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "112c5214c2b73f6560b4700ff1b643f22aaffacf"}, "originalPosition": 123}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyMTE2OTg3", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/256#pullrequestreview-542116987", "createdAt": "2020-12-01T17:09:11Z", "commit": {"oid": "112c5214c2b73f6560b4700ff1b643f22aaffacf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b97897bd1790b98fd6409130ec535150f6ebefc", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/6b97897bd1790b98fd6409130ec535150f6ebefc", "committedDate": "2020-12-01T19:34:27Z", "message": "refactor: Rename method executeDetectBoot to bootApplication."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a285eed9f9747586971bba4c481af57885f591f7", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/a285eed9f9747586971bba4c481af57885f591f7", "committedDate": "2020-12-11T13:29:54Z", "message": "Merge remote-tracking branch 'origin/master' into ps_application_complexity"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "804dae488e2b352c7ffd22f78726673214d1bd6a", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/804dae488e2b352c7ffd22f78726673214d1bd6a", "committedDate": "2020-12-11T16:10:31Z", "message": "refactor: Some more changes to simplify the Application code."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eca423d8a645609f6826be2d42c6e6ac228af922", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/eca423d8a645609f6826be2d42c6e6ac228af922", "committedDate": "2020-12-11T20:19:05Z", "message": "refactor: Application refactor application exit logic into an ExitManager class."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86cfa716cbc195c51c575b9102adf16d6c56eb28", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/86cfa716cbc195c51c575b9102adf16d6c56eb28", "committedDate": "2020-12-11T20:37:52Z", "message": "Merge remote-tracking branch 'origin/master' into ps_application_complexity"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2eecb85181df6fdf20e58e9fea9fac490bcab703", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/2eecb85181df6fdf20e58e9fea9fac490bcab703", "committedDate": "2020-12-14T17:33:55Z", "message": "Merge remote-tracking branch 'origin/master' into ps_application_complexity"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNzc4NzY3", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/256#pullrequestreview-551778767", "createdAt": "2020-12-14T18:31:09Z", "commit": {"oid": "2eecb85181df6fdf20e58e9fea9fac490bcab703"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODozMTowOVrOIFevbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODozMTowOVrOIFevbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYxNzQ1Mw==", "bodyText": "Is there a case where we return an empty optional?", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/256#discussion_r542617453", "createdAt": "2020-12-14T18:31:09Z", "author": {"login": "taikuukaits"}, "path": "src/main/java/com/synopsys/integration/detect/lifecycle/boot/DetectBoot.java", "diffHunk": "@@ -134,7 +134,8 @@ public DetectBoot(DetectBootFactory detectBootFactory) {\n         this.detectBootFactory = detectBootFactory;\n     }\n \n-    public DetectBootResult boot(DetectRun detectRun, String[] sourceArgs, ConfigurableEnvironment environment, EventSystem eventSystem, DetectContext detectContext) throws DetectUserFriendlyException, IOException, IllegalAccessException {\n+    public Optional<DetectBootResult> boot(DetectRun detectRun, String[] sourceArgs, ConfigurableEnvironment environment, EventSystem eventSystem, DetectContext detectContext)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eecb85181df6fdf20e58e9fea9fac490bcab703"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNzc5NTMy", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/256#pullrequestreview-551779532", "createdAt": "2020-12-14T18:32:08Z", "commit": {"oid": "2eecb85181df6fdf20e58e9fea9fac490bcab703"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODozMjowOFrOIFezcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODozMjowOFrOIFezcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYxODQ4Mw==", "bodyText": "Now that we have exit manager, could we rename exit code manager? Would something like ExitCodeListener make sense?", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/256#discussion_r542618483", "createdAt": "2020-12-14T18:32:08Z", "author": {"login": "taikuukaits"}, "path": "src/main/java/com/synopsys/integration/detect/Application.java", "diffHunk": "@@ -83,152 +80,157 @@ public static boolean shouldExit() {\n         return SHOULD_EXIT;\n     }\n \n-    public static void setShouldExit(final boolean shouldExit) {\n+    public static void setShouldExit(boolean shouldExit) {\n         SHOULD_EXIT = shouldExit;\n     }\n \n-    public static void main(final String[] args) {\n-        final SpringApplicationBuilder builder = new SpringApplicationBuilder(Application.class);\n+    public static void main(String[] args) {\n+        SpringApplicationBuilder builder = new SpringApplicationBuilder(Application.class);\n         builder.logStartupInfo(false);\n         builder.run(args);\n     }\n \n     @Override\n-    public void run(final ApplicationArguments applicationArguments) {\n-        final long startTime = System.currentTimeMillis();\n+    public void run(ApplicationArguments applicationArguments) {\n+        long startTime = System.currentTimeMillis();\n \n         //Events, Status and Exit Codes are required even if boot fails.\n-        final EventSystem eventSystem = new EventSystem();\n-        final DetectStatusManager statusManager = new DetectStatusManager(eventSystem);\n+        EventSystem eventSystem = new EventSystem();\n+        DetectStatusManager statusManager = new DetectStatusManager(eventSystem);\n \n-        final ExitCodeUtility exitCodeUtility = new ExitCodeUtility();\n-        final ExitCodeManager exitCodeManager = new ExitCodeManager(eventSystem, exitCodeUtility);\n+        ExitCodeUtility exitCodeUtility = new ExitCodeUtility();\n+        ExitCodeManager exitCodeManager = new ExitCodeManager(eventSystem, exitCodeUtility);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eecb85181df6fdf20e58e9fea9fac490bcab703"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNzgwNzQy", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/256#pullrequestreview-551780742", "createdAt": "2020-12-14T18:33:38Z", "commit": {"oid": "2eecb85181df6fdf20e58e9fea9fac490bcab703"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODozMzozOFrOIFe5hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODozMzozOFrOIFe5hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYyMDAzNg==", "bodyText": "I don't love having these in application.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/256#discussion_r542620036", "createdAt": "2020-12-14T18:33:38Z", "author": {"login": "taikuukaits"}, "path": "src/main/java/com/synopsys/integration/detect/Application.java", "diffHunk": "@@ -83,152 +80,157 @@ public static boolean shouldExit() {\n         return SHOULD_EXIT;\n     }\n \n-    public static void setShouldExit(final boolean shouldExit) {\n+    public static void setShouldExit(boolean shouldExit) {\n         SHOULD_EXIT = shouldExit;\n     }\n \n-    public static void main(final String[] args) {\n-        final SpringApplicationBuilder builder = new SpringApplicationBuilder(Application.class);\n+    public static void main(String[] args) {\n+        SpringApplicationBuilder builder = new SpringApplicationBuilder(Application.class);\n         builder.logStartupInfo(false);\n         builder.run(args);\n     }\n \n     @Override\n-    public void run(final ApplicationArguments applicationArguments) {\n-        final long startTime = System.currentTimeMillis();\n+    public void run(ApplicationArguments applicationArguments) {\n+        long startTime = System.currentTimeMillis();\n \n         //Events, Status and Exit Codes are required even if boot fails.\n-        final EventSystem eventSystem = new EventSystem();\n-        final DetectStatusManager statusManager = new DetectStatusManager(eventSystem);\n+        EventSystem eventSystem = new EventSystem();\n+        DetectStatusManager statusManager = new DetectStatusManager(eventSystem);\n \n-        final ExitCodeUtility exitCodeUtility = new ExitCodeUtility();\n-        final ExitCodeManager exitCodeManager = new ExitCodeManager(eventSystem, exitCodeUtility);\n+        ExitCodeUtility exitCodeUtility = new ExitCodeUtility();\n+        ExitCodeManager exitCodeManager = new ExitCodeManager(eventSystem, exitCodeUtility);\n+        ExitManager exitManager = new ExitManager(eventSystem, exitCodeManager, statusManager);\n \n         ReportListener.createDefault(eventSystem);\n-        final FormattedOutputManager formattedOutputManager = new FormattedOutputManager(eventSystem);\n+        FormattedOutputManager formattedOutputManager = new FormattedOutputManager(eventSystem);\n \n         //Before boot even begins, we create a new Spring context for Detect to work within.\n         logger.debug(\"Initializing detect.\");\n-        final DetectRun detectRun = DetectRun.createDefault();\n-        final DetectContext detectContext = new DetectContext(detectRun);\n+        DetectRun detectRun = DetectRun.createDefault();\n+        DetectContext detectContext = new DetectContext(detectRun);\n \n-        final Gson gson = BlackDuckServicesFactory.createDefaultGsonBuilder().setPrettyPrinting().create();\n-        final DetectInfo detectInfo = DetectInfoUtility.createDefaultDetectInfo();\n+        Gson gson = BlackDuckServicesFactory.createDefaultGsonBuilder().setPrettyPrinting().create();\n+        DetectInfo detectInfo = DetectInfoUtility.createDefaultDetectInfo();\n         detectContext.registerBean(gson);\n         detectContext.registerBean(detectInfo);\n \n-        Optional<DetectBootResult> detectBootResultOptional = Optional.empty();\n         boolean printOutput = true;\n         boolean shouldForceSuccess = false;\n \n+        Optional<DetectBootResult> detectBootResultOptional = bootApplication(detectRun, applicationArguments, eventSystem, detectContext, exitCodeManager);\n+\n+        if (detectBootResultOptional.isPresent()) {\n+            DetectBootResult detectBootResult = detectBootResultOptional.get();\n+            printOutput = shouldPrintOutput(detectBootResult);\n+            shouldForceSuccess = shouldForceSuccess(detectBootResult);\n+\n+            runApplication(detectContext, detectRun, eventSystem, exitCodeManager, detectBootResult);\n+\n+            //Create status output file.\n+            logger.info(\"\");\n+            detectBootResult.getDirectoryManager()\n+                .ifPresent(directoryManager -> createStatusOutputFile(formattedOutputManager, detectInfo, directoryManager));\n+\n+            shutdownApplication(detectBootResult, exitCodeManager);\n+        } else {\n+            logger.info(\"Will not create status file, detect did not boot.\");\n+        }\n+\n+        logger.debug(\"All Detect actions completed.\");\n+\n+        exitApplication(exitManager, startTime, printOutput, shouldForceSuccess);\n+    }\n+\n+    @NotNull\n+    private Boolean shouldForceSuccess(DetectBootResult detectBootResult) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eecb85181df6fdf20e58e9fea9fac490bcab703"}, "originalPosition": 136}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNzgyMDk5", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/256#pullrequestreview-551782099", "createdAt": "2020-12-14T18:35:21Z", "commit": {"oid": "2eecb85181df6fdf20e58e9fea9fac490bcab703"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODozNToyMVrOIFfA9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODozNToyMVrOIFfA9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYyMTk0MQ==", "bodyText": "Would prefer shouldLogResults.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/256#discussion_r542621941", "createdAt": "2020-12-14T18:35:21Z", "author": {"login": "taikuukaits"}, "path": "src/main/java/com/synopsys/integration/detect/lifecycle/exit/ExitOptions.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/**\n+ * synopsys-detect\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detect.lifecycle.exit;\n+\n+import com.synopsys.integration.util.Stringable;\n+\n+public class ExitOptions extends Stringable {\n+    private final long startTime;\n+    private final boolean logResults;\n+    private final boolean forceSuccessExit;\n+    private final boolean shouldExit;\n+\n+    public ExitOptions(long startTime, boolean logResults, boolean forceSuccessExit, boolean shouldExit) {\n+        this.startTime = startTime;\n+        this.logResults = logResults;\n+        this.forceSuccessExit = forceSuccessExit;\n+        this.shouldExit = shouldExit;\n+    }\n+\n+    public long getStartTime() {\n+        return startTime;\n+    }\n+\n+    public boolean isLogResults() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eecb85181df6fdf20e58e9fea9fac490bcab703"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNzgyMzcw", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/256#pullrequestreview-551782370", "createdAt": "2020-12-14T18:35:41Z", "commit": {"oid": "2eecb85181df6fdf20e58e9fea9fac490bcab703"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODozNTo0MVrOIFfCTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODozNTo0MVrOIFfCTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYyMjI4NQ==", "bodyText": "Would prefer shouldForceSuccess.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/256#discussion_r542622285", "createdAt": "2020-12-14T18:35:41Z", "author": {"login": "taikuukaits"}, "path": "src/main/java/com/synopsys/integration/detect/lifecycle/exit/ExitOptions.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/**\n+ * synopsys-detect\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detect.lifecycle.exit;\n+\n+import com.synopsys.integration.util.Stringable;\n+\n+public class ExitOptions extends Stringable {\n+    private final long startTime;\n+    private final boolean logResults;\n+    private final boolean forceSuccessExit;\n+    private final boolean shouldExit;\n+\n+    public ExitOptions(long startTime, boolean logResults, boolean forceSuccessExit, boolean shouldExit) {\n+        this.startTime = startTime;\n+        this.logResults = logResults;\n+        this.forceSuccessExit = forceSuccessExit;\n+        this.shouldExit = shouldExit;\n+    }\n+\n+    public long getStartTime() {\n+        return startTime;\n+    }\n+\n+    public boolean isLogResults() {\n+        return logResults;\n+    }\n+\n+    public boolean isForceSuccessExit() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eecb85181df6fdf20e58e9fea9fac490bcab703"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNzgyNTA4", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/256#pullrequestreview-551782508", "createdAt": "2020-12-14T18:35:52Z", "commit": {"oid": "2eecb85181df6fdf20e58e9fea9fac490bcab703"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODozNTo1MlrOIFfDEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODozNTo1MlrOIFfDEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYyMjQ4Mg==", "bodyText": "Would prefer just shouldExit.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/256#discussion_r542622482", "createdAt": "2020-12-14T18:35:52Z", "author": {"login": "taikuukaits"}, "path": "src/main/java/com/synopsys/integration/detect/lifecycle/exit/ExitOptions.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/**\n+ * synopsys-detect\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detect.lifecycle.exit;\n+\n+import com.synopsys.integration.util.Stringable;\n+\n+public class ExitOptions extends Stringable {\n+    private final long startTime;\n+    private final boolean logResults;\n+    private final boolean forceSuccessExit;\n+    private final boolean shouldExit;\n+\n+    public ExitOptions(long startTime, boolean logResults, boolean forceSuccessExit, boolean shouldExit) {\n+        this.startTime = startTime;\n+        this.logResults = logResults;\n+        this.forceSuccessExit = forceSuccessExit;\n+        this.shouldExit = shouldExit;\n+    }\n+\n+    public long getStartTime() {\n+        return startTime;\n+    }\n+\n+    public boolean isLogResults() {\n+        return logResults;\n+    }\n+\n+    public boolean isForceSuccessExit() {\n+        return forceSuccessExit;\n+    }\n+\n+    public boolean isShouldExit() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eecb85181df6fdf20e58e9fea9fac490bcab703"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNzgyNzI1", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/256#pullrequestreview-551782725", "createdAt": "2020-12-14T18:36:09Z", "commit": {"oid": "2eecb85181df6fdf20e58e9fea9fac490bcab703"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODozNjowOVrOIFfEQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODozNjowOVrOIFfEQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYyMjc4Ng==", "bodyText": "Did not see this get used anywhere.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/256#discussion_r542622786", "createdAt": "2020-12-14T18:36:09Z", "author": {"login": "taikuukaits"}, "path": "src/main/java/com/synopsys/integration/detect/lifecycle/exit/ExitResult.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * synopsys-detect\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detect.lifecycle.exit;\n+\n+import com.synopsys.integration.detect.configuration.enumeration.ExitCodeType;\n+import com.synopsys.integration.util.Stringable;\n+\n+public class ExitResult extends Stringable {\n+    private final ExitCodeType exitCodeType;\n+    private final String duration;\n+    private final boolean forceSuccess;\n+    private final boolean performExit;\n+\n+    public ExitResult(ExitCodeType exitCodeType, String duration, boolean forceSuccess, boolean performExit) {\n+        this.exitCodeType = exitCodeType;\n+        this.duration = duration;\n+        this.forceSuccess = forceSuccess;\n+        this.performExit = performExit;\n+    }\n+\n+    public ExitCodeType getExitCodeType() {\n+        return exitCodeType;\n+    }\n+\n+    public int getExitCode() {\n+        return exitCodeType.getExitCode();\n+    }\n+\n+    public String getDuration() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eecb85181df6fdf20e58e9fea9fac490bcab703"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNzgzMDky", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/256#pullrequestreview-551783092", "createdAt": "2020-12-14T18:36:37Z", "commit": {"oid": "2eecb85181df6fdf20e58e9fea9fac490bcab703"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODozNjozN1rOIFfGcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODozNjozN1rOIFfGcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYyMzM0Nw==", "bodyText": "Do we really need this? Can we either remove this or make the other getter private?", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/256#discussion_r542623347", "createdAt": "2020-12-14T18:36:37Z", "author": {"login": "taikuukaits"}, "path": "src/main/java/com/synopsys/integration/detect/lifecycle/exit/ExitResult.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * synopsys-detect\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detect.lifecycle.exit;\n+\n+import com.synopsys.integration.detect.configuration.enumeration.ExitCodeType;\n+import com.synopsys.integration.util.Stringable;\n+\n+public class ExitResult extends Stringable {\n+    private final ExitCodeType exitCodeType;\n+    private final String duration;\n+    private final boolean forceSuccess;\n+    private final boolean performExit;\n+\n+    public ExitResult(ExitCodeType exitCodeType, String duration, boolean forceSuccess, boolean performExit) {\n+        this.exitCodeType = exitCodeType;\n+        this.duration = duration;\n+        this.forceSuccess = forceSuccess;\n+        this.performExit = performExit;\n+    }\n+\n+    public ExitCodeType getExitCodeType() {\n+        return exitCodeType;\n+    }\n+\n+    public int getExitCode() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eecb85181df6fdf20e58e9fea9fac490bcab703"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUxNzg0MDgz", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/256#pullrequestreview-551784083", "createdAt": "2020-12-14T18:37:55Z", "commit": {"oid": "2eecb85181df6fdf20e58e9fea9fac490bcab703"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODozNzo1NVrOIFfL1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNFQxODozNzo1NVrOIFfL1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MjYyNDcyNw==", "bodyText": "Seems strange to assert this way - is it just a pass through of the value? Why do it at all then?", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/256#discussion_r542624727", "createdAt": "2020-12-14T18:37:55Z", "author": {"login": "taikuukaits"}, "path": "src/test/java/com/synopsys/integration/detect/lifecycle/exit/ExitManagerTest.java", "diffHunk": "@@ -0,0 +1,83 @@\n+package com.synopsys.integration.detect.lifecycle.exit;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+import org.junit.jupiter.api.Test;\n+\n+import com.synopsys.integration.detect.configuration.enumeration.ExitCodeType;\n+import com.synopsys.integration.detect.lifecycle.shutdown.ExitCodeManager;\n+import com.synopsys.integration.detect.lifecycle.shutdown.ExitCodeRequest;\n+import com.synopsys.integration.detect.lifecycle.shutdown.ExitCodeUtility;\n+import com.synopsys.integration.detect.workflow.event.EventSystem;\n+import com.synopsys.integration.detect.workflow.status.DetectStatusManager;\n+\n+public class ExitManagerTest {\n+    @Test\n+    public void testNormalExit() {\n+        long startTime = System.currentTimeMillis();\n+        EventSystem eventSystem = new EventSystem();\n+        DetectStatusManager statusManager = new DetectStatusManager(eventSystem);\n+        ExitCodeUtility exitCodeUtility = new ExitCodeUtility();\n+        ExitCodeManager exitCodeManager = new ExitCodeManager(eventSystem, exitCodeUtility);\n+        ExitManager exitManager = new ExitManager(eventSystem, exitCodeManager, statusManager);\n+\n+        ExitOptions exitOptions = new ExitOptions(startTime, true, false, true);\n+        ExitResult exitResult = exitManager.exit(exitOptions);\n+\n+        assertEquals(startTime, exitOptions.getStartTime());\n+        assertTrue(exitOptions.isLogResults());\n+        assertEquals(exitOptions.isForceSuccessExit(), exitResult.isForceSuccess());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2eecb85181df6fdf20e58e9fea9fac490bcab703"}, "originalPosition": 31}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44eba0f4500fe335b4faacaf8e9f0ef2da6d5a27", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/44eba0f4500fe335b4faacaf8e9f0ef2da6d5a27", "committedDate": "2020-12-14T19:00:02Z", "message": "refactor: Update the branch with PR comments."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "94cde2ed2415eda088f2369f9fb7c04676d53120", "author": {"user": {"login": "psantos1113", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/94cde2ed2415eda088f2369f9fb7c04676d53120", "committedDate": "2020-12-14T19:01:20Z", "message": "Merge remote-tracking branch 'origin/master' into ps_application_complexity"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3250, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}