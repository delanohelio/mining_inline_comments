{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1OTMwMzM4", "number": 142, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMjo1NToyM1rODs4i2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzoxOTo0MFrODtNZqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzkwMzYxOnYy", "diffSide": "RIGHT", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/compilecommand/CompileCommandParser.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMjo1NToyM1rOF9_OSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMjo1NTo1NFrOF9_PEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU0MzMwNg==", "bodyText": "I'd prefer we changed this as it reads strangely to me. So instead of \"isLastCharWasEscapeChar\" we could do \"wasLastCharEscapeChar\".", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/142#discussion_r400543306", "createdAt": "2020-03-30T22:55:23Z", "author": {"login": "taikuukaits"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/compilecommand/CompileCommandParser.java", "diffHunk": "@@ -103,38 +104,74 @@ private String unEscapeDoubleQuotes(final String givenString) {\n \n     private String escapeQuotedWhitespace(final String givenString) {\n         final StringBuilder newString = new StringBuilder();\n-        boolean lastCharWasEscapeChar = false;\n-        boolean inQuotes = false;\n-        boolean quoteTypeIsDouble = false;\n+        final ParserState parserState = new ParserState();\n         for (int i = 0; i < givenString.length(); i++) {\n             final char c = givenString.charAt(i);\n-            if (!inQuotes) {\n-                if (!lastCharWasEscapeChar && (c == SINGLE_QUOTE_CHAR)) {\n-                    inQuotes = true;\n-                    quoteTypeIsDouble = false;\n-                } else if (!lastCharWasEscapeChar && (c == DOUBLE_QUOTE_CHAR)) {\n-                    inQuotes = true;\n-                    quoteTypeIsDouble = true;\n-                } else {\n-                    newString.append(c);\n-                }\n+            if (!parserState.isInQuotes()) {\n+                processNonQuotedChar(parserState, c, newString);\n             } else {\n-                // Currently inside a quoted substring\n-                if (!lastCharWasEscapeChar && (c == SINGLE_QUOTE_CHAR) && !quoteTypeIsDouble) {\n-                    inQuotes = false;\n-                } else if (!lastCharWasEscapeChar && (c == DOUBLE_QUOTE_CHAR) && quoteTypeIsDouble) {\n-                    inQuotes = false;\n-                } else if (c == SPACE_CHAR) {\n-                    newString.append(ESCAPE_SEQUENCE_FOR_SPACE_CHAR);\n-                } else if (c == TAB_CHAR) {\n-                    newString.append(ESCAPE_SEQUENCE_FOR_TAB_CHAR);\n-                } else {\n-                    newString.append(c);\n-                }\n+                processQuotedChar(parserState, c, newString);\n             }\n-            lastCharWasEscapeChar = (c == ESCAPE_CHAR);\n+            parserState.setLastCharWasEscapeChar(c == ESCAPE_CHAR);\n         }\n         logger.trace(String.format(\"escapeQuotedWhitespace() changed %s to %s\", givenString, newString.toString()));\n         return newString.toString();\n     }\n+\n+    private void processQuotedChar(final ParserState parserState, final char c, final StringBuilder newString) {\n+        // Currently inside a quoted substring\n+        if (!parserState.isLastCharWasEscapeChar() && (c == SINGLE_QUOTE_CHAR) && !parserState.isQuoteTypeIsDouble()) {\n+            parserState.setInQuotes(false);\n+        } else if (!parserState.isLastCharWasEscapeChar() && (c == DOUBLE_QUOTE_CHAR) && parserState.isQuoteTypeIsDouble()) {\n+            parserState.setInQuotes(false);\n+        } else if (c == SPACE_CHAR) {\n+            newString.append(ESCAPE_SEQUENCE_FOR_SPACE_CHAR);\n+        } else if (c == TAB_CHAR) {\n+            newString.append(ESCAPE_SEQUENCE_FOR_TAB_CHAR);\n+        } else {\n+            newString.append(c);\n+        }\n+    }\n+\n+    private void processNonQuotedChar(final ParserState parserState, final char c, final StringBuilder newString) {\n+        if (!parserState.isLastCharWasEscapeChar() && (c == SINGLE_QUOTE_CHAR)) {\n+            parserState.setInQuotes(true);\n+            parserState.setQuoteTypeIsDouble(false);\n+        } else if (!parserState.isLastCharWasEscapeChar() && (c == DOUBLE_QUOTE_CHAR)) {\n+            parserState.setInQuotes(true);\n+            parserState.setQuoteTypeIsDouble(true);\n+        } else {\n+            newString.append(c);\n+        }\n+    }\n+\n+    private class ParserState {\n+        private boolean lastCharWasEscapeChar = false;\n+        private boolean inQuotes = false;\n+        private boolean quoteTypeIsDouble = false;\n+\n+        public boolean isLastCharWasEscapeChar() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6868ccfe8746a34981739c3f5b3d94f990f1f547"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU0MzUwNQ==", "bodyText": "Or if we wanted to keep the \"is\" maybe \"isLastCharEscapeChar\".", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/142#discussion_r400543505", "createdAt": "2020-03-30T22:55:54Z", "author": {"login": "taikuukaits"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/compilecommand/CompileCommandParser.java", "diffHunk": "@@ -103,38 +104,74 @@ private String unEscapeDoubleQuotes(final String givenString) {\n \n     private String escapeQuotedWhitespace(final String givenString) {\n         final StringBuilder newString = new StringBuilder();\n-        boolean lastCharWasEscapeChar = false;\n-        boolean inQuotes = false;\n-        boolean quoteTypeIsDouble = false;\n+        final ParserState parserState = new ParserState();\n         for (int i = 0; i < givenString.length(); i++) {\n             final char c = givenString.charAt(i);\n-            if (!inQuotes) {\n-                if (!lastCharWasEscapeChar && (c == SINGLE_QUOTE_CHAR)) {\n-                    inQuotes = true;\n-                    quoteTypeIsDouble = false;\n-                } else if (!lastCharWasEscapeChar && (c == DOUBLE_QUOTE_CHAR)) {\n-                    inQuotes = true;\n-                    quoteTypeIsDouble = true;\n-                } else {\n-                    newString.append(c);\n-                }\n+            if (!parserState.isInQuotes()) {\n+                processNonQuotedChar(parserState, c, newString);\n             } else {\n-                // Currently inside a quoted substring\n-                if (!lastCharWasEscapeChar && (c == SINGLE_QUOTE_CHAR) && !quoteTypeIsDouble) {\n-                    inQuotes = false;\n-                } else if (!lastCharWasEscapeChar && (c == DOUBLE_QUOTE_CHAR) && quoteTypeIsDouble) {\n-                    inQuotes = false;\n-                } else if (c == SPACE_CHAR) {\n-                    newString.append(ESCAPE_SEQUENCE_FOR_SPACE_CHAR);\n-                } else if (c == TAB_CHAR) {\n-                    newString.append(ESCAPE_SEQUENCE_FOR_TAB_CHAR);\n-                } else {\n-                    newString.append(c);\n-                }\n+                processQuotedChar(parserState, c, newString);\n             }\n-            lastCharWasEscapeChar = (c == ESCAPE_CHAR);\n+            parserState.setLastCharWasEscapeChar(c == ESCAPE_CHAR);\n         }\n         logger.trace(String.format(\"escapeQuotedWhitespace() changed %s to %s\", givenString, newString.toString()));\n         return newString.toString();\n     }\n+\n+    private void processQuotedChar(final ParserState parserState, final char c, final StringBuilder newString) {\n+        // Currently inside a quoted substring\n+        if (!parserState.isLastCharWasEscapeChar() && (c == SINGLE_QUOTE_CHAR) && !parserState.isQuoteTypeIsDouble()) {\n+            parserState.setInQuotes(false);\n+        } else if (!parserState.isLastCharWasEscapeChar() && (c == DOUBLE_QUOTE_CHAR) && parserState.isQuoteTypeIsDouble()) {\n+            parserState.setInQuotes(false);\n+        } else if (c == SPACE_CHAR) {\n+            newString.append(ESCAPE_SEQUENCE_FOR_SPACE_CHAR);\n+        } else if (c == TAB_CHAR) {\n+            newString.append(ESCAPE_SEQUENCE_FOR_TAB_CHAR);\n+        } else {\n+            newString.append(c);\n+        }\n+    }\n+\n+    private void processNonQuotedChar(final ParserState parserState, final char c, final StringBuilder newString) {\n+        if (!parserState.isLastCharWasEscapeChar() && (c == SINGLE_QUOTE_CHAR)) {\n+            parserState.setInQuotes(true);\n+            parserState.setQuoteTypeIsDouble(false);\n+        } else if (!parserState.isLastCharWasEscapeChar() && (c == DOUBLE_QUOTE_CHAR)) {\n+            parserState.setInQuotes(true);\n+            parserState.setQuoteTypeIsDouble(true);\n+        } else {\n+            newString.append(c);\n+        }\n+    }\n+\n+    private class ParserState {\n+        private boolean lastCharWasEscapeChar = false;\n+        private boolean inQuotes = false;\n+        private boolean quoteTypeIsDouble = false;\n+\n+        public boolean isLastCharWasEscapeChar() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU0MzMwNg=="}, "originalCommit": {"oid": "6868ccfe8746a34981739c3f5b3d94f990f1f547"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MzkwNjg4OnYy", "diffSide": "RIGHT", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/compilecommand/CompileCommandParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMjo1Njo1MlrOF9_Qbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMjo1Njo1MlrOF9_Qbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU0Mzg1NQ==", "bodyText": "Similarly this reads strangely. Maybe \"isDoubleQuoteType\" instead.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/142#discussion_r400543855", "createdAt": "2020-03-30T22:56:52Z", "author": {"login": "taikuukaits"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/compilecommand/CompileCommandParser.java", "diffHunk": "@@ -103,38 +104,74 @@ private String unEscapeDoubleQuotes(final String givenString) {\n \n     private String escapeQuotedWhitespace(final String givenString) {\n         final StringBuilder newString = new StringBuilder();\n-        boolean lastCharWasEscapeChar = false;\n-        boolean inQuotes = false;\n-        boolean quoteTypeIsDouble = false;\n+        final ParserState parserState = new ParserState();\n         for (int i = 0; i < givenString.length(); i++) {\n             final char c = givenString.charAt(i);\n-            if (!inQuotes) {\n-                if (!lastCharWasEscapeChar && (c == SINGLE_QUOTE_CHAR)) {\n-                    inQuotes = true;\n-                    quoteTypeIsDouble = false;\n-                } else if (!lastCharWasEscapeChar && (c == DOUBLE_QUOTE_CHAR)) {\n-                    inQuotes = true;\n-                    quoteTypeIsDouble = true;\n-                } else {\n-                    newString.append(c);\n-                }\n+            if (!parserState.isInQuotes()) {\n+                processNonQuotedChar(parserState, c, newString);\n             } else {\n-                // Currently inside a quoted substring\n-                if (!lastCharWasEscapeChar && (c == SINGLE_QUOTE_CHAR) && !quoteTypeIsDouble) {\n-                    inQuotes = false;\n-                } else if (!lastCharWasEscapeChar && (c == DOUBLE_QUOTE_CHAR) && quoteTypeIsDouble) {\n-                    inQuotes = false;\n-                } else if (c == SPACE_CHAR) {\n-                    newString.append(ESCAPE_SEQUENCE_FOR_SPACE_CHAR);\n-                } else if (c == TAB_CHAR) {\n-                    newString.append(ESCAPE_SEQUENCE_FOR_TAB_CHAR);\n-                } else {\n-                    newString.append(c);\n-                }\n+                processQuotedChar(parserState, c, newString);\n             }\n-            lastCharWasEscapeChar = (c == ESCAPE_CHAR);\n+            parserState.setLastCharWasEscapeChar(c == ESCAPE_CHAR);\n         }\n         logger.trace(String.format(\"escapeQuotedWhitespace() changed %s to %s\", givenString, newString.toString()));\n         return newString.toString();\n     }\n+\n+    private void processQuotedChar(final ParserState parserState, final char c, final StringBuilder newString) {\n+        // Currently inside a quoted substring\n+        if (!parserState.isLastCharWasEscapeChar() && (c == SINGLE_QUOTE_CHAR) && !parserState.isQuoteTypeIsDouble()) {\n+            parserState.setInQuotes(false);\n+        } else if (!parserState.isLastCharWasEscapeChar() && (c == DOUBLE_QUOTE_CHAR) && parserState.isQuoteTypeIsDouble()) {\n+            parserState.setInQuotes(false);\n+        } else if (c == SPACE_CHAR) {\n+            newString.append(ESCAPE_SEQUENCE_FOR_SPACE_CHAR);\n+        } else if (c == TAB_CHAR) {\n+            newString.append(ESCAPE_SEQUENCE_FOR_TAB_CHAR);\n+        } else {\n+            newString.append(c);\n+        }\n+    }\n+\n+    private void processNonQuotedChar(final ParserState parserState, final char c, final StringBuilder newString) {\n+        if (!parserState.isLastCharWasEscapeChar() && (c == SINGLE_QUOTE_CHAR)) {\n+            parserState.setInQuotes(true);\n+            parserState.setQuoteTypeIsDouble(false);\n+        } else if (!parserState.isLastCharWasEscapeChar() && (c == DOUBLE_QUOTE_CHAR)) {\n+            parserState.setInQuotes(true);\n+            parserState.setQuoteTypeIsDouble(true);\n+        } else {\n+            newString.append(c);\n+        }\n+    }\n+\n+    private class ParserState {\n+        private boolean lastCharWasEscapeChar = false;\n+        private boolean inQuotes = false;\n+        private boolean quoteTypeIsDouble = false;\n+\n+        public boolean isLastCharWasEscapeChar() {\n+            return lastCharWasEscapeChar;\n+        }\n+\n+        public boolean isInQuotes() {\n+            return inQuotes;\n+        }\n+\n+        public boolean isQuoteTypeIsDouble() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6868ccfe8746a34981739c3f5b3d94f990f1f547"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NzMyMDczOnYy", "diffSide": "RIGHT", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/compilecommand/CompileCommandParser.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzoxOTo0MFrOF-gKZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNzoxOTo0MFrOF-gKZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTA4Mjk4Mg==", "bodyText": "Small nitpick, but could we swap the if so we aren't negating the statement? I think it makes it easier to read.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/142#discussion_r401082982", "createdAt": "2020-03-31T17:19:40Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/compilecommand/CompileCommandParser.java", "diffHunk": "@@ -103,38 +104,74 @@ private String unEscapeDoubleQuotes(final String givenString) {\n \n     private String escapeQuotedWhitespace(final String givenString) {\n         final StringBuilder newString = new StringBuilder();\n-        boolean lastCharWasEscapeChar = false;\n-        boolean inQuotes = false;\n-        boolean quoteTypeIsDouble = false;\n+        final ParserState parserState = new ParserState();\n         for (int i = 0; i < givenString.length(); i++) {\n             final char c = givenString.charAt(i);\n-            if (!inQuotes) {\n-                if (!lastCharWasEscapeChar && (c == SINGLE_QUOTE_CHAR)) {\n-                    inQuotes = true;\n-                    quoteTypeIsDouble = false;\n-                } else if (!lastCharWasEscapeChar && (c == DOUBLE_QUOTE_CHAR)) {\n-                    inQuotes = true;\n-                    quoteTypeIsDouble = true;\n-                } else {\n-                    newString.append(c);\n-                }\n+            if (!parserState.isInQuotes()) {\n+                processNonQuotedChar(parserState, c, newString);\n             } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6868ccfe8746a34981739c3f5b3d94f990f1f547"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1582, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}