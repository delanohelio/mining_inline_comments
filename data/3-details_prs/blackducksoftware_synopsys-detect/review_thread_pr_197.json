{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwNjg2MjIy", "number": 197, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToxNzozMVrOEJPUmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToyNjoxNlrOEJPdzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTIzNjc1OnYy", "diffSide": "RIGHT", "path": "configuration/src/main/java/com/synopsys/integration/configuration/property/PropertyBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToxNzozMlrOGpsA-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMDowNjo0NlrOGptP3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2NTk0Nw==", "bodyText": "We are only using the Jetbrains annotations.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/197#discussion_r446365947", "createdAt": "2020-06-26T19:17:32Z", "author": {"login": "JakeMathews"}, "path": "configuration/src/main/java/com/synopsys/integration/configuration/property/PropertyBuilder.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package com.synopsys.integration.configuration.property;\n+\n+import java.util.List;\n+\n+import org.antlr.v4.runtime.misc.NotNull;\n+import org.jetbrains.annotations.Nullable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56d8a218a3bcd359ccd90f2257d2e989bb1446fb"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM4NjE0Mw==", "bodyText": "Also are you using any of these imports in this class?", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/197#discussion_r446386143", "createdAt": "2020-06-26T20:06:46Z", "author": {"login": "JakeMathews"}, "path": "configuration/src/main/java/com/synopsys/integration/configuration/property/PropertyBuilder.java", "diffHunk": "@@ -0,0 +1,23 @@\n+package com.synopsys.integration.configuration.property;\n+\n+import java.util.List;\n+\n+import org.antlr.v4.runtime.misc.NotNull;\n+import org.jetbrains.annotations.Nullable;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2NTk0Nw=="}, "originalCommit": {"oid": "56d8a218a3bcd359ccd90f2257d2e989bb1446fb"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTI0Nzc1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/synopsys/integration/detect/configuration/PropertyVerificationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToyMTozNFrOGpsH_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToyMTozNFrOGpsH_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2Nzc0MQ==", "bodyText": "I would look into using reflection or something to get all of the properties. How can we be sure it has all the properties?", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/197#discussion_r446367741", "createdAt": "2020-06-26T19:21:34Z", "author": {"login": "JakeMathews"}, "path": "src/test/java/com/synopsys/integration/detect/configuration/PropertyVerificationTest.java", "diffHunk": "@@ -0,0 +1,275 @@\n+package com.synopsys.integration.detect.configuration;\n+\n+import static org.codehaus.groovy.runtime.DefaultGroovyMethods.collect;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.junit.Assert;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import com.synopsys.integration.configuration.property.Property;\n+\n+public class PropertyVerificationTest {\n+\n+    @Test\n+    public void verifyProperties() {\n+        Set<String> missing = new HashSet<>();\n+        List<String> kotlinNames = DetectProperties.Companion.getProperties().stream()\n+                                       .map(Property::getName)\n+                                       .collect(Collectors.toList());\n+\n+        List<String> javaNames = collectJavaProperties().stream()\n+                                       .map(Property::getName)\n+                                       .collect(Collectors.toList());\n+\n+        for (String propertyName : kotlinNames) {\n+            if (!javaNames.contains(propertyName)) {\n+                missing.add(propertyName);\n+            }\n+        }\n+        for (String propertyName : javaNames) {\n+            if (!kotlinNames.contains(propertyName)) {\n+                missing.add(propertyName);\n+            }\n+        }\n+\n+        Assertions.assertTrue(missing.isEmpty());\n+    }\n+\n+    private List<Property> collectJavaProperties() {\n+        List<Property> properties2 = new ArrayList<>();\n+        \n+            properties2.add(DetectPropertiesJava.BLACKDUCK_API_TOKEN);\n+            properties2.add(DetectPropertiesJava.BLACKDUCK_OFFLINE_MODE);\n+            properties2.add(DetectPropertiesJava.BLACKDUCK_PASSWORD);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56d8a218a3bcd359ccd90f2257d2e989bb1446fb"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTI1MDgzOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/synopsys/integration/detect/configuration/PropertyVerificationTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToyMjozM1rOGpsJwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQyMDoxMjoyOFrOGptZHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2ODE5NA==", "bodyText": "We need a lot more verifications then just property names. Everything attached to the property should be checked.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/197#discussion_r446368194", "createdAt": "2020-06-26T19:22:33Z", "author": {"login": "JakeMathews"}, "path": "src/test/java/com/synopsys/integration/detect/configuration/PropertyVerificationTest.java", "diffHunk": "@@ -0,0 +1,275 @@\n+package com.synopsys.integration.detect.configuration;\n+\n+import static org.codehaus.groovy.runtime.DefaultGroovyMethods.collect;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.junit.Assert;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import com.synopsys.integration.configuration.property.Property;\n+\n+public class PropertyVerificationTest {\n+\n+    @Test\n+    public void verifyProperties() {\n+        Set<String> missing = new HashSet<>();\n+        List<String> kotlinNames = DetectProperties.Companion.getProperties().stream()\n+                                       .map(Property::getName)\n+                                       .collect(Collectors.toList());\n+\n+        List<String> javaNames = collectJavaProperties().stream()\n+                                       .map(Property::getName)\n+                                       .collect(Collectors.toList());\n+\n+        for (String propertyName : kotlinNames) {\n+            if (!javaNames.contains(propertyName)) {\n+                missing.add(propertyName);\n+            }\n+        }\n+        for (String propertyName : javaNames) {\n+            if (!kotlinNames.contains(propertyName)) {\n+                missing.add(propertyName);\n+            }\n+        }\n+\n+        Assertions.assertTrue(missing.isEmpty());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56d8a218a3bcd359ccd90f2257d2e989bb1446fb"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM4ODUxMQ==", "bodyText": "I recommend you get all the properties through reflection, and iterate over them, then check against the values method in DetectProperties.kt. You will have to make it public for testing.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/197#discussion_r446388511", "createdAt": "2020-06-26T20:12:28Z", "author": {"login": "JakeMathews"}, "path": "src/test/java/com/synopsys/integration/detect/configuration/PropertyVerificationTest.java", "diffHunk": "@@ -0,0 +1,275 @@\n+package com.synopsys.integration.detect.configuration;\n+\n+import static org.codehaus.groovy.runtime.DefaultGroovyMethods.collect;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import org.junit.Assert;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import com.synopsys.integration.configuration.property.Property;\n+\n+public class PropertyVerificationTest {\n+\n+    @Test\n+    public void verifyProperties() {\n+        Set<String> missing = new HashSet<>();\n+        List<String> kotlinNames = DetectProperties.Companion.getProperties().stream()\n+                                       .map(Property::getName)\n+                                       .collect(Collectors.toList());\n+\n+        List<String> javaNames = collectJavaProperties().stream()\n+                                       .map(Property::getName)\n+                                       .collect(Collectors.toList());\n+\n+        for (String propertyName : kotlinNames) {\n+            if (!javaNames.contains(propertyName)) {\n+                missing.add(propertyName);\n+            }\n+        }\n+        for (String propertyName : javaNames) {\n+            if (!kotlinNames.contains(propertyName)) {\n+                missing.add(propertyName);\n+            }\n+        }\n+\n+        Assertions.assertTrue(missing.isEmpty());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2ODE5NA=="}, "originalCommit": {"oid": "56d8a218a3bcd359ccd90f2257d2e989bb1446fb"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MTI2MDI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/detect/configuration/DetectPropertiesJava.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToyNjoxNlrOGpsPww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQxOToyNjoxNlrOGpsPww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjM2OTczMQ==", "bodyText": "These should have the public final modifier on them as well.\npublic so we can access them through reflection (https://stackoverflow.com/a/14078769). This will help with the tests as well.\nfinal so the variables cannot be overridden.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/197#discussion_r446369731", "createdAt": "2020-06-26T19:26:16Z", "author": {"login": "JakeMathews"}, "path": "src/main/java/com/synopsys/integration/detect/configuration/DetectPropertiesJava.java", "diffHunk": "@@ -0,0 +1,1570 @@\n+package com.synopsys.integration.detect.configuration;\n+\n+import static java.util.Collections.emptyList;\n+import static java.util.Collections.singletonList;\n+\n+import java.util.Arrays;\n+\n+import com.synopsys.integration.blackduck.api.generated.enumeration.LicenseFamilyLicenseFamilyRiskRulesReleaseDistributionType;\n+import com.synopsys.integration.blackduck.api.generated.enumeration.PolicyRuleSeverityType;\n+import com.synopsys.integration.blackduck.api.generated.enumeration.ProjectCloneCategoriesType;\n+import com.synopsys.integration.blackduck.api.manual.throwaway.generated.enumeration.ProjectVersionPhaseType;\n+import com.synopsys.integration.blackduck.codelocation.signaturescanner.command.IndividualFileMatching;\n+import com.synopsys.integration.blackduck.codelocation.signaturescanner.command.SnippetMatching;\n+import com.synopsys.integration.configuration.property.Property;\n+import com.synopsys.integration.configuration.property.PropertyBuilder;\n+import com.synopsys.integration.configuration.property.base.PassthroughProperty;\n+import com.synopsys.integration.configuration.property.types.bool.BooleanProperty;\n+import com.synopsys.integration.configuration.property.types.enumextended.ExtendedEnumProperty;\n+import com.synopsys.integration.configuration.property.types.enumextended.ExtendedEnumValue;\n+import com.synopsys.integration.configuration.property.types.enumfilterable.FilterableEnumListProperty;\n+import com.synopsys.integration.configuration.property.types.enumfilterable.FilterableEnumUtils;\n+import com.synopsys.integration.configuration.property.types.enums.EnumListProperty;\n+import com.synopsys.integration.configuration.property.types.enums.EnumProperty;\n+import com.synopsys.integration.configuration.property.types.integer.IntegerProperty;\n+import com.synopsys.integration.configuration.property.types.integer.NullableIntegerProperty;\n+import com.synopsys.integration.configuration.property.types.longs.LongProperty;\n+import com.synopsys.integration.configuration.property.types.path.NullablePathProperty;\n+import com.synopsys.integration.configuration.property.types.path.PathListProperty;\n+import com.synopsys.integration.configuration.property.types.path.PathProperty;\n+import com.synopsys.integration.configuration.property.types.string.NullableStringProperty;\n+import com.synopsys.integration.configuration.property.types.string.StringListProperty;\n+import com.synopsys.integration.configuration.property.types.string.StringProperty;\n+import com.synopsys.integration.detect.DetectMajorVersion;\n+import com.synopsys.integration.detect.DetectTool;\n+import com.synopsys.integration.detect.configuration.enums.DefaultVersionNameScheme;\n+import com.synopsys.integration.detect.tool.signaturescanner.enums.ExtendedIndividualFileMatchingMode;\n+import com.synopsys.integration.detect.tool.signaturescanner.enums.ExtendedSnippetMode;\n+import com.synopsys.integration.detect.workflow.bdio.AggregateMode;\n+import com.synopsys.integration.detectable.detectables.bazel.WorkspaceRule;\n+import com.synopsys.integration.detector.base.DetectorType;\n+import com.synopsys.integration.configuration.property.types.path.PathValue;\n+import com.synopsys.integration.log.LogLevel;\n+\n+import java.lang.Deprecated;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class DetectPropertiesJava {\n+\n+   static NullableStringProperty BLACKDUCK_API_TOKEN = new PropertyBuilder<>(new NullableStringProperty(\"blackduck.api.token\")).build(property -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56d8a218a3bcd359ccd90f2257d2e989bb1446fb"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1628, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}