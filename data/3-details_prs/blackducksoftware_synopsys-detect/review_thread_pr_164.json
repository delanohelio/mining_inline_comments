{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE0MjI3ODc4", "number": 164, "reviewThreads": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxOTo1MDo1NFrOD6wn7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTo1OToxOVrOD9_MVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTQwNjUzOnYy", "diffSide": "RIGHT", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectable/executable/impl/SimpleExecutableResolver.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQxOTo1MDo1NFrOGSxmrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMDowODoxOFrOGSyGnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0MDI2OA==", "bodyText": "Can you make this multi line to be consistent with the rest of the file?", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r422340268", "createdAt": "2020-05-08T19:50:54Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectable/executable/impl/SimpleExecutableResolver.java", "diffHunk": "@@ -92,6 +93,9 @@ public File resolveBash() {\n         return findCachedSystem(\"bash\");\n     }\n \n+    @Override\n+    public File resolveCargo() { return findCachedSystem(\"cargo\"); }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf9aa77295bc27c0e659263a74b9a8b2127dcc24"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0MjI1MA==", "bodyText": "in Intellij all the methods with a one-line body are single-line", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r422342250", "createdAt": "2020-05-08T19:55:09Z", "author": {"login": "crowleySynopsys"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectable/executable/impl/SimpleExecutableResolver.java", "diffHunk": "@@ -92,6 +93,9 @@ public File resolveBash() {\n         return findCachedSystem(\"bash\");\n     }\n \n+    @Override\n+    public File resolveCargo() { return findCachedSystem(\"cargo\"); }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0MDI2OA=="}, "originalCommit": {"oid": "bf9aa77295bc27c0e659263a74b9a8b2127dcc24"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0ODQ0NQ==", "bodyText": "https://stackoverflow.com/questions/35995083/intellij-collapsing-single-line-methods", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r422348445", "createdAt": "2020-05-08T20:08:18Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectable/executable/impl/SimpleExecutableResolver.java", "diffHunk": "@@ -92,6 +93,9 @@ public File resolveBash() {\n         return findCachedSystem(\"bash\");\n     }\n \n+    @Override\n+    public File resolveCargo() { return findCachedSystem(\"cargo\"); }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0MDI2OA=="}, "originalCommit": {"oid": "bf9aa77295bc27c0e659263a74b9a8b2127dcc24"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTQzMzc5OnYy", "diffSide": "RIGHT", "path": "detectable/src/main/java/com/synopsys/integration/detectable/factory/DetectableFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMDowMDozMlrOGSx4XA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMDowMDozMlrOGSx4XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0NDc5Ng==", "bodyText": "Can you make this multi line to be consistent with the rest of the file?", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r422344796", "createdAt": "2020-05-08T20:00:32Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/factory/DetectableFactory.java", "diffHunk": "@@ -389,6 +396,8 @@ private DependencyFileDetailGenerator dependencyFileDetailGenerator() {\n         return new DependencyFileDetailGenerator(filePathGenerator());\n     }\n \n+    private CargoExtractor cargoExtractor() { return new CargoExtractor(new CargoLockParser()); }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf9aa77295bc27c0e659263a74b9a8b2127dcc24"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTQzNDk1OnYy", "diffSide": "RIGHT", "path": "build.gradle", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMDowMDo1N1rOGSx5Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMDoxNDoxMFrOGSyQ_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0NDk5NQ==", "bodyText": "Is this upgrade required for Cargo support?", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r422344995", "createdAt": "2020-05-08T20:00:57Z", "author": {"login": "JakeMathews"}, "path": "build.gradle", "diffHunk": "@@ -13,7 +13,7 @@ import com.synopsys.integration.log.PrintStreamIntLogger\n buildscript {\n     ext {\n         springBootVersion = '2.2.4.RELEASE'\n-        blackDuckCommonVersion = '47.1.0'\n+        blackDuckCommonVersion = '47.1.3'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf9aa77295bc27c0e659263a74b9a8b2127dcc24"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM1MTEwMg==", "bodyText": "its required to expose the new forge in integration-bdio", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r422351102", "createdAt": "2020-05-08T20:14:10Z", "author": {"login": "crowleySynopsys"}, "path": "build.gradle", "diffHunk": "@@ -13,7 +13,7 @@ import com.synopsys.integration.log.PrintStreamIntLogger\n buildscript {\n     ext {\n         springBootVersion = '2.2.4.RELEASE'\n-        blackDuckCommonVersion = '47.1.0'\n+        blackDuckCommonVersion = '47.1.3'", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0NDk5NQ=="}, "originalCommit": {"oid": "bf9aa77295bc27c0e659263a74b9a8b2127dcc24"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTQzOTMwOnYy", "diffSide": "RIGHT", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/CargoExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMDowMjo0MFrOGSx8GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMDowMjo0MFrOGSx8GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0NTc1Mg==", "bodyText": "The extractor should take in the file and create the InputStream.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r422345752", "createdAt": "2020-05-08T20:02:40Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/CargoExtractor.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.cargo;\n+\n+import java.io.InputStream;\n+\n+import com.synopsys.integration.bdio.graph.DependencyGraph;\n+import com.synopsys.integration.detectable.Extraction;\n+import com.synopsys.integration.detectable.detectable.codelocation.CodeLocation;\n+import com.synopsys.integration.detectable.detectables.cargo.parse.CargoLockParser;\n+\n+public class CargoExtractor {\n+\n+    private final CargoLockParser cargoLockParser;\n+\n+    public CargoExtractor(final CargoLockParser cargoLockParser) {\n+        this.cargoLockParser = cargoLockParser;\n+    }\n+\n+    public Extraction extract(final InputStream goLockInputStream) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf9aa77295bc27c0e659263a74b9a8b2127dcc24"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTQ0MTkwOnYy", "diffSide": "RIGHT", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/model/Package.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMDowMzozNFrOGSx9vQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMDowMzozNFrOGSx9vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0NjE3Mw==", "bodyText": "Could any of these be null? If so their getters should return an Optional.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r422346173", "createdAt": "2020-05-08T20:03:34Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/model/Package.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.cargo.model;\n+\n+import java.util.List;\n+\n+public class Package {\n+    private String name;\n+    private String version;\n+    private String source;\n+    private String checksum;\n+    private List<String> dependencies;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf9aa77295bc27c0e659263a74b9a8b2127dcc24"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTQ0MzgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/detect/configuration/DetectProperties.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMDowNDoxN1rOGSx-6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMjo1NzowN1rOGS18uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0NjQ3Mg==", "bodyText": "Why are we taking in the cargo executable? It doesn't look like you use it anywhere.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r422346472", "createdAt": "2020-05-08T20:04:17Z", "author": {"login": "JakeMathews"}, "path": "src/main/java/com/synopsys/integration/detect/configuration/DetectProperties.kt", "diffHunk": "@@ -304,6 +304,11 @@ class DetectProperties {\n             setHelp(\"If set to true, only Detector's capable of running without a build will be run.\")\n             setGroups(DetectGroup.GENERAL, DetectGroup.GLOBAL)\n         }\n+        val DETECT_CARGO_PATH = NullablePathProperty(\"detect.cargo.path\").apply {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf9aa77295bc27c0e659263a74b9a8b2127dcc24"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjQxMTQ1MQ==", "bodyText": "yeah I'm really not sure why I did that", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r422411451", "createdAt": "2020-05-08T22:57:07Z", "author": {"login": "crowleySynopsys"}, "path": "src/main/java/com/synopsys/integration/detect/configuration/DetectProperties.kt", "diffHunk": "@@ -304,6 +304,11 @@ class DetectProperties {\n             setHelp(\"If set to true, only Detector's capable of running without a build will be run.\")\n             setGroups(DetectGroup.GENERAL, DetectGroup.GLOBAL)\n         }\n+        val DETECT_CARGO_PATH = NullablePathProperty(\"detect.cargo.path\").apply {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0NjQ3Mg=="}, "originalCommit": {"oid": "bf9aa77295bc27c0e659263a74b9a8b2127dcc24"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTQ0NjE1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/detect/tool/detector/impl/DetectDetectableFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMDowNDo1OVrOGSyAYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMDowNDo1OVrOGSyAYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0Njg1MQ==", "bodyText": "Please make this multi-line for consistency.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r422346851", "createdAt": "2020-05-08T20:04:59Z", "author": {"login": "JakeMathews"}, "path": "src/main/java/com/synopsys/integration/detect/tool/detector/impl/DetectDetectableFactory.java", "diffHunk": "@@ -100,6 +101,8 @@ public BitbakeDetectable createBitbakeDetectable(final DetectableEnvironment env\n         return detectableFactory.createBitbakeDetectable(environment, detectableOptionFactory.createBitbakeDetectableOptions(), detectExecutableResolver);\n     }\n \n+    public CargoDetectable createCargoDetectable(final DetectableEnvironment environment) { return detectableFactory.createCargoDetectable(environment); }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf9aa77295bc27c0e659263a74b9a8b2127dcc24"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTQ0NzQzOnYy", "diffSide": "LEFT", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/go/godep/GoDepExtractor.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMDowNToyM1rOGSyBOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMDoyMTo1NVrOGSydtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0NzA2Nw==", "bodyText": "Seems unrelated.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r422347067", "createdAt": "2020-05-08T20:05:23Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/go/godep/GoDepExtractor.java", "diffHunk": "@@ -41,5 +41,4 @@ public Extraction extract(final InputStream goLockInputStream) {\n         final CodeLocation codeLocation = new CodeLocation(graph);\n         return new Extraction.Builder().success(codeLocation).build();\n     }\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf9aa77295bc27c0e659263a74b9a8b2127dcc24"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM1NDM1Nw==", "bodyText": "lol I agree, missed that one", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r422354357", "createdAt": "2020-05-08T20:21:55Z", "author": {"login": "crowleySynopsys"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/go/godep/GoDepExtractor.java", "diffHunk": "@@ -41,5 +41,4 @@ public Extraction extract(final InputStream goLockInputStream) {\n         final CodeLocation codeLocation = new CodeLocation(graph);\n         return new Extraction.Builder().success(codeLocation).build();\n     }\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0NzA2Nw=="}, "originalCommit": {"oid": "bf9aa77295bc27c0e659263a74b9a8b2127dcc24"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYyOTQ1MTI5OnYy", "diffSide": "RIGHT", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/model/CargoLock.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMDowNjozNVrOGSyDhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wOFQyMDoyNjo1MFrOGSymyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0NzY1Mg==", "bodyText": "You do a null check on this later. Can we add an Optional getter instead?", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r422347652", "createdAt": "2020-05-08T20:06:35Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/model/CargoLock.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.cargo.model;\n+\n+import java.util.List;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+public class CargoLock {\n+    @SerializedName(\"package\")\n+    public List<Package> packages;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bf9aa77295bc27c0e659263a74b9a8b2127dcc24"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM1NjY4MQ==", "bodyText": "certainly", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r422356681", "createdAt": "2020-05-08T20:26:50Z", "author": {"login": "crowleySynopsys"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/model/CargoLock.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.cargo.model;\n+\n+import java.util.List;\n+\n+import com.google.gson.annotations.SerializedName;\n+\n+public class CargoLock {\n+    @SerializedName(\"package\")\n+    public List<Package> packages;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjM0NzY1Mg=="}, "originalCommit": {"oid": "bf9aa77295bc27c0e659263a74b9a8b2127dcc24"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTgyNTk1OnYy", "diffSide": "RIGHT", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/CargoDetectable.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxOToyMDo1NVrOGTqAOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxODo0NjozMFrOGUUOKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI2NDMxMw==", "bodyText": "This check should occur in applicable(). Extractable is reserved for environment checking such as looking for executables.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r423264313", "createdAt": "2020-05-11T19:20:55Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/CargoDetectable.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.cargo;\n+\n+import java.io.File;\n+\n+import com.synopsys.integration.detectable.Detectable;\n+import com.synopsys.integration.detectable.DetectableEnvironment;\n+import com.synopsys.integration.detectable.Extraction;\n+import com.synopsys.integration.detectable.ExtractionEnvironment;\n+import com.synopsys.integration.detectable.detectable.annotation.DetectableInfo;\n+import com.synopsys.integration.detectable.detectable.file.FileFinder;\n+import com.synopsys.integration.detectable.detectable.result.CargoGenerateLockfileDetectResult;\n+import com.synopsys.integration.detectable.detectable.result.DetectableResult;\n+import com.synopsys.integration.detectable.detectable.result.FilesNotFoundDetectableResult;\n+import com.synopsys.integration.detectable.detectable.result.PassedDetectableResult;\n+\n+@DetectableInfo(language = \"Rust\", forge = \"crates\", requirementsMarkdown = \"File: Cargo.lock\")\n+public class CargoDetectable extends Detectable {\n+    public static final String CARGO_LOCK_FILENAME = \"Cargo.lock\";\n+    public static final String CARGO_TOML_FILENAME = \"Cargo.toml\";\n+\n+    private final FileFinder fileFinder;\n+    private final CargoExtractor cargoExtractor;\n+\n+    private File cargoLock;\n+    private File cargoToml;\n+\n+    public CargoDetectable(final DetectableEnvironment environment, final FileFinder fileFinder, final CargoExtractor cargoExtractor) {\n+        super(environment);\n+        this.fileFinder = fileFinder;\n+        this.cargoExtractor = cargoExtractor;\n+    }\n+\n+    @Override\n+    public DetectableResult applicable() {\n+        cargoLock = fileFinder.findFile(environment.getDirectory(), CARGO_LOCK_FILENAME);\n+        if (cargoLock == null) {\n+            cargoToml = fileFinder.findFile(environment.getDirectory(), CARGO_TOML_FILENAME);\n+            if (cargoToml == null) {\n+                return new FilesNotFoundDetectableResult(CARGO_LOCK_FILENAME, CARGO_TOML_FILENAME);\n+            }\n+        }\n+        return new PassedDetectableResult();\n+    }\n+\n+    @Override\n+    public DetectableResult extractable() {\n+        if (cargoLock == null && cargoToml != null) {\n+            return new CargoGenerateLockfileDetectResult(environment.getDirectory().getAbsolutePath());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df670a596508ec94e5883234a7c5cae286353d3f"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk1MDE5Ng==", "bodyText": "I was following model of GoDepLockDetectable.  Should I make the same change there?", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r423950196", "createdAt": "2020-05-12T18:36:34Z", "author": {"login": "crowleySynopsys"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/CargoDetectable.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.cargo;\n+\n+import java.io.File;\n+\n+import com.synopsys.integration.detectable.Detectable;\n+import com.synopsys.integration.detectable.DetectableEnvironment;\n+import com.synopsys.integration.detectable.Extraction;\n+import com.synopsys.integration.detectable.ExtractionEnvironment;\n+import com.synopsys.integration.detectable.detectable.annotation.DetectableInfo;\n+import com.synopsys.integration.detectable.detectable.file.FileFinder;\n+import com.synopsys.integration.detectable.detectable.result.CargoGenerateLockfileDetectResult;\n+import com.synopsys.integration.detectable.detectable.result.DetectableResult;\n+import com.synopsys.integration.detectable.detectable.result.FilesNotFoundDetectableResult;\n+import com.synopsys.integration.detectable.detectable.result.PassedDetectableResult;\n+\n+@DetectableInfo(language = \"Rust\", forge = \"crates\", requirementsMarkdown = \"File: Cargo.lock\")\n+public class CargoDetectable extends Detectable {\n+    public static final String CARGO_LOCK_FILENAME = \"Cargo.lock\";\n+    public static final String CARGO_TOML_FILENAME = \"Cargo.toml\";\n+\n+    private final FileFinder fileFinder;\n+    private final CargoExtractor cargoExtractor;\n+\n+    private File cargoLock;\n+    private File cargoToml;\n+\n+    public CargoDetectable(final DetectableEnvironment environment, final FileFinder fileFinder, final CargoExtractor cargoExtractor) {\n+        super(environment);\n+        this.fileFinder = fileFinder;\n+        this.cargoExtractor = cargoExtractor;\n+    }\n+\n+    @Override\n+    public DetectableResult applicable() {\n+        cargoLock = fileFinder.findFile(environment.getDirectory(), CARGO_LOCK_FILENAME);\n+        if (cargoLock == null) {\n+            cargoToml = fileFinder.findFile(environment.getDirectory(), CARGO_TOML_FILENAME);\n+            if (cargoToml == null) {\n+                return new FilesNotFoundDetectableResult(CARGO_LOCK_FILENAME, CARGO_TOML_FILENAME);\n+            }\n+        }\n+        return new PassedDetectableResult();\n+    }\n+\n+    @Override\n+    public DetectableResult extractable() {\n+        if (cargoLock == null && cargoToml != null) {\n+            return new CargoGenerateLockfileDetectResult(environment.getDirectory().getAbsolutePath());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI2NDMxMw=="}, "originalCommit": {"oid": "df670a596508ec94e5883234a7c5cae286353d3f"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk1NjAwOQ==", "bodyText": "Upon discussion Jordan, what occurs in applicable vs. extractable is up to the Detecable to decide (To a degree. What degree? Who knows). The code you wrote is acceptable.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r423956009", "createdAt": "2020-05-12T18:46:30Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/CargoDetectable.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.cargo;\n+\n+import java.io.File;\n+\n+import com.synopsys.integration.detectable.Detectable;\n+import com.synopsys.integration.detectable.DetectableEnvironment;\n+import com.synopsys.integration.detectable.Extraction;\n+import com.synopsys.integration.detectable.ExtractionEnvironment;\n+import com.synopsys.integration.detectable.detectable.annotation.DetectableInfo;\n+import com.synopsys.integration.detectable.detectable.file.FileFinder;\n+import com.synopsys.integration.detectable.detectable.result.CargoGenerateLockfileDetectResult;\n+import com.synopsys.integration.detectable.detectable.result.DetectableResult;\n+import com.synopsys.integration.detectable.detectable.result.FilesNotFoundDetectableResult;\n+import com.synopsys.integration.detectable.detectable.result.PassedDetectableResult;\n+\n+@DetectableInfo(language = \"Rust\", forge = \"crates\", requirementsMarkdown = \"File: Cargo.lock\")\n+public class CargoDetectable extends Detectable {\n+    public static final String CARGO_LOCK_FILENAME = \"Cargo.lock\";\n+    public static final String CARGO_TOML_FILENAME = \"Cargo.toml\";\n+\n+    private final FileFinder fileFinder;\n+    private final CargoExtractor cargoExtractor;\n+\n+    private File cargoLock;\n+    private File cargoToml;\n+\n+    public CargoDetectable(final DetectableEnvironment environment, final FileFinder fileFinder, final CargoExtractor cargoExtractor) {\n+        super(environment);\n+        this.fileFinder = fileFinder;\n+        this.cargoExtractor = cargoExtractor;\n+    }\n+\n+    @Override\n+    public DetectableResult applicable() {\n+        cargoLock = fileFinder.findFile(environment.getDirectory(), CARGO_LOCK_FILENAME);\n+        if (cargoLock == null) {\n+            cargoToml = fileFinder.findFile(environment.getDirectory(), CARGO_TOML_FILENAME);\n+            if (cargoToml == null) {\n+                return new FilesNotFoundDetectableResult(CARGO_LOCK_FILENAME, CARGO_TOML_FILENAME);\n+            }\n+        }\n+        return new PassedDetectableResult();\n+    }\n+\n+    @Override\n+    public DetectableResult extractable() {\n+        if (cargoLock == null && cargoToml != null) {\n+            return new CargoGenerateLockfileDetectResult(environment.getDirectory().getAbsolutePath());\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI2NDMxMw=="}, "originalCommit": {"oid": "df670a596508ec94e5883234a7c5cae286353d3f"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTgyODI2OnYy", "diffSide": "RIGHT", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectable/executable/impl/SimpleExecutableResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxOToyMTozMlrOGTqBlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOTo1Njo0NlrOGUWqiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI2NDY2Mg==", "bodyText": "Why do we need a CargoResolver if we aren't using the executable?", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r423264662", "createdAt": "2020-05-11T19:21:32Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectable/executable/impl/SimpleExecutableResolver.java", "diffHunk": "@@ -92,6 +93,11 @@ public File resolveBash() {\n         return findCachedSystem(\"bash\");\n     }\n \n+    @Override\n+    public File resolveCargo() {\n+        return findCachedSystem(\"cargo\");\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df670a596508ec94e5883234a7c5cae286353d3f"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk5NjA0MA==", "bodyText": "yaaaa that can go", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r423996040", "createdAt": "2020-05-12T19:56:46Z", "author": {"login": "crowleySynopsys"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectable/executable/impl/SimpleExecutableResolver.java", "diffHunk": "@@ -92,6 +93,11 @@ public File resolveBash() {\n         return findCachedSystem(\"bash\");\n     }\n \n+    @Override\n+    public File resolveCargo() {\n+        return findCachedSystem(\"cargo\");\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI2NDY2Mg=="}, "originalCommit": {"oid": "df670a596508ec94e5883234a7c5cae286353d3f"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTg0MzU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/synopsys/integration/detect/workflow/codelocation/CodeLocationNameGenerator.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxOToyNjoyM1rOGTqLSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxODozODozNlrOGUT7_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI2NzE0NA==", "bodyText": "In the future, I would avoid making formatting changes that are unrelated to the code you are modifying in the PR. It's fine for now though.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r423267144", "createdAt": "2020-05-11T19:26:23Z", "author": {"login": "JakeMathews"}, "path": "src/main/java/com/synopsys/integration/detect/workflow/codelocation/CodeLocationNameGenerator.java", "diffHunk": "@@ -127,7 +127,7 @@ private String cleanScanTargetPath(final File scanTargetPath, final File sourceP\n \n         final String finalSourcePathPiece = DetectFileUtils.extractFinalPieceFromPath(canonicalSourcePath);\n         String cleanedTargetPath = \"\";\n-         if (StringUtils.isNotBlank(canonicalTargetPath) && StringUtils.isNotBlank(finalSourcePathPiece)) {\n+        if (StringUtils.isNotBlank(canonicalTargetPath) && StringUtils.isNotBlank(finalSourcePathPiece)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df670a596508ec94e5883234a7c5cae286353d3f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk1MTM1Ng==", "bodyText": "Yeah I'm not even sure how/when I would've made that edit.  I tried to revert it but Intellij claims to not detect a difference in the file.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r423951356", "createdAt": "2020-05-12T18:38:36Z", "author": {"login": "crowleySynopsys"}, "path": "src/main/java/com/synopsys/integration/detect/workflow/codelocation/CodeLocationNameGenerator.java", "diffHunk": "@@ -127,7 +127,7 @@ private String cleanScanTargetPath(final File scanTargetPath, final File sourceP\n \n         final String finalSourcePathPiece = DetectFileUtils.extractFinalPieceFromPath(canonicalSourcePath);\n         String cleanedTargetPath = \"\";\n-         if (StringUtils.isNotBlank(canonicalTargetPath) && StringUtils.isNotBlank(finalSourcePathPiece)) {\n+        if (StringUtils.isNotBlank(canonicalTargetPath) && StringUtils.isNotBlank(finalSourcePathPiece)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI2NzE0NA=="}, "originalCommit": {"oid": "df670a596508ec94e5883234a7c5cae286353d3f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTg3ODAzOnYy", "diffSide": "RIGHT", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/parse/CargoLockParser.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxOTozNjo0NlrOGTqgtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxODo1NjozNFrOGUUmDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI3MjYzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private List<String> trimDependencies(List<String> rawDependencies) {\n          \n          \n            \n                    List<String> trimmedDependencies = new ArrayList<>();\n          \n          \n            \n            \n          \n          \n            \n                    for (String rawDependency : rawDependencies) {\n          \n          \n            \n                        String trimmedDependency = rawDependency.split(\" \")[0];\n          \n          \n            \n                        trimmedDependencies.add(trimmedDependency);\n          \n          \n            \n                    }\n          \n          \n            \n                    return trimmedDependencies;\n          \n          \n            \n                }\n          \n          \n            \n                private List<String> getDependencyNames(List<String> rawDependencies) {\n          \n          \n            \n                    return rawDependencies.stream()\n          \n          \n            \n                        .map(dependency -> dependency.split(\" \")[0])\n          \n          \n            \n                        .collect(Collectors.toList());\n          \n          \n            \n                }", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r423272630", "createdAt": "2020-05-11T19:36:46Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/parse/CargoLockParser.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.cargo.parse;\n+\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.moandjiezana.toml.Toml;\n+import com.synopsys.integration.bdio.graph.DependencyGraph;\n+import com.synopsys.integration.bdio.graph.MutableDependencyGraph;\n+import com.synopsys.integration.bdio.graph.MutableMapDependencyGraph;\n+import com.synopsys.integration.bdio.model.Forge;\n+import com.synopsys.integration.bdio.model.dependency.Dependency;\n+import com.synopsys.integration.bdio.model.externalid.ExternalId;\n+import com.synopsys.integration.bdio.model.externalid.ExternalIdFactory;\n+import com.synopsys.integration.detectable.detectables.cargo.model.CargoLock;\n+import com.synopsys.integration.detectable.detectables.cargo.model.Package;\n+\n+public class CargoLockParser {\n+\n+    private final ExternalIdFactory externalIdFactory = new ExternalIdFactory();\n+\n+    private final Map<String, Dependency> packageMap = new HashMap<>();\n+\n+    public DependencyGraph parseLockFile(final InputStream cargoLockInputStream) {\n+        final CargoLock cargoLock = new Toml().read(cargoLockInputStream).to(CargoLock.class);\n+        if (cargoLock.getPackages().isPresent()) {\n+            return parseDependencies(cargoLock.getPackages().get());\n+        }\n+        return new MutableMapDependencyGraph();\n+    }\n+\n+    private DependencyGraph parseDependencies(final List<Package> lockPackages) {\n+        MutableDependencyGraph graph = new MutableMapDependencyGraph();\n+\n+        Set<String> rootPackages = determineRootPackages(lockPackages);\n+\n+        for (final String rootPackage : rootPackages) {\n+            graph.addChildToRoot(packageMap.get(rootPackage));\n+        }\n+\n+        for (final Package lockPackage : lockPackages) {\n+            if (!lockPackage.getDependencies().isPresent()) {\n+                continue;\n+            }\n+            List<String> trimmedDependencies = trimDependencies(lockPackage.getDependencies().get());\n+            for (final String dependency : trimmedDependencies) {\n+                Dependency child = packageMap.get(dependency);\n+                Dependency parent = packageMap.get(lockPackage.getName().orElse(\"\"));\n+                if (child != null && parent != null) {\n+                    graph.addChildWithParent(child, parent);\n+                }\n+            }\n+        }\n+        return graph;\n+    }\n+\n+    private Set<String> determineRootPackages(List<Package> lockPackages) {\n+        Set<String> rootPackages = new HashSet<>();\n+        Set<String> dependencyPackages = new HashSet<>();\n+\n+        for (final Package lockPackage : lockPackages) {\n+            if (lockPackage != null) {\n+                final String projectName = lockPackage.getName().orElse(\"\");\n+                final String projectVersion = lockPackage.getVersion().orElse(\"\");\n+\n+                packageMap.put(projectName, createCargoDependency(projectName, projectVersion));\n+                rootPackages.add(projectName);\n+                if (lockPackage.getDependencies().isPresent()) {\n+                    dependencyPackages.addAll(trimDependencies(lockPackage.getDependencies().get()));\n+                }\n+\n+            }\n+        }\n+        rootPackages.removeAll(dependencyPackages);\n+\n+        return rootPackages;\n+    }\n+\n+    private List<String> trimDependencies(List<String> rawDependencies) {\n+        List<String> trimmedDependencies = new ArrayList<>();\n+\n+        for (String rawDependency : rawDependencies) {\n+            String trimmedDependency = rawDependency.split(\" \")[0];\n+            trimmedDependencies.add(trimmedDependency);\n+        }\n+        return trimmedDependencies;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df670a596508ec94e5883234a7c5cae286353d3f"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI3MzcwOQ==", "bodyText": "I think this is a bit more readable. Also trimming a String has a meaning. I think the method name could be confusing because you aren't \"trimming\" in the traditional sense.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r423273709", "createdAt": "2020-05-11T19:39:04Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/parse/CargoLockParser.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.cargo.parse;\n+\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.moandjiezana.toml.Toml;\n+import com.synopsys.integration.bdio.graph.DependencyGraph;\n+import com.synopsys.integration.bdio.graph.MutableDependencyGraph;\n+import com.synopsys.integration.bdio.graph.MutableMapDependencyGraph;\n+import com.synopsys.integration.bdio.model.Forge;\n+import com.synopsys.integration.bdio.model.dependency.Dependency;\n+import com.synopsys.integration.bdio.model.externalid.ExternalId;\n+import com.synopsys.integration.bdio.model.externalid.ExternalIdFactory;\n+import com.synopsys.integration.detectable.detectables.cargo.model.CargoLock;\n+import com.synopsys.integration.detectable.detectables.cargo.model.Package;\n+\n+public class CargoLockParser {\n+\n+    private final ExternalIdFactory externalIdFactory = new ExternalIdFactory();\n+\n+    private final Map<String, Dependency> packageMap = new HashMap<>();\n+\n+    public DependencyGraph parseLockFile(final InputStream cargoLockInputStream) {\n+        final CargoLock cargoLock = new Toml().read(cargoLockInputStream).to(CargoLock.class);\n+        if (cargoLock.getPackages().isPresent()) {\n+            return parseDependencies(cargoLock.getPackages().get());\n+        }\n+        return new MutableMapDependencyGraph();\n+    }\n+\n+    private DependencyGraph parseDependencies(final List<Package> lockPackages) {\n+        MutableDependencyGraph graph = new MutableMapDependencyGraph();\n+\n+        Set<String> rootPackages = determineRootPackages(lockPackages);\n+\n+        for (final String rootPackage : rootPackages) {\n+            graph.addChildToRoot(packageMap.get(rootPackage));\n+        }\n+\n+        for (final Package lockPackage : lockPackages) {\n+            if (!lockPackage.getDependencies().isPresent()) {\n+                continue;\n+            }\n+            List<String> trimmedDependencies = trimDependencies(lockPackage.getDependencies().get());\n+            for (final String dependency : trimmedDependencies) {\n+                Dependency child = packageMap.get(dependency);\n+                Dependency parent = packageMap.get(lockPackage.getName().orElse(\"\"));\n+                if (child != null && parent != null) {\n+                    graph.addChildWithParent(child, parent);\n+                }\n+            }\n+        }\n+        return graph;\n+    }\n+\n+    private Set<String> determineRootPackages(List<Package> lockPackages) {\n+        Set<String> rootPackages = new HashSet<>();\n+        Set<String> dependencyPackages = new HashSet<>();\n+\n+        for (final Package lockPackage : lockPackages) {\n+            if (lockPackage != null) {\n+                final String projectName = lockPackage.getName().orElse(\"\");\n+                final String projectVersion = lockPackage.getVersion().orElse(\"\");\n+\n+                packageMap.put(projectName, createCargoDependency(projectName, projectVersion));\n+                rootPackages.add(projectName);\n+                if (lockPackage.getDependencies().isPresent()) {\n+                    dependencyPackages.addAll(trimDependencies(lockPackage.getDependencies().get()));\n+                }\n+\n+            }\n+        }\n+        rootPackages.removeAll(dependencyPackages);\n+\n+        return rootPackages;\n+    }\n+\n+    private List<String> trimDependencies(List<String> rawDependencies) {\n+        List<String> trimmedDependencies = new ArrayList<>();\n+\n+        for (String rawDependency : rawDependencies) {\n+            String trimmedDependency = rawDependency.split(\" \")[0];\n+            trimmedDependencies.add(trimmedDependency);\n+        }\n+        return trimmedDependencies;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI3MjYzMA=="}, "originalCommit": {"oid": "df670a596508ec94e5883234a7c5cae286353d3f"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk1MzM2Nw==", "bodyText": "Ya that is better for sure.  How about extractDependencyNames? I know Jordan isn't a big fan of using 'get' in a method name that isn't a getter", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r423953367", "createdAt": "2020-05-12T18:42:03Z", "author": {"login": "crowleySynopsys"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/parse/CargoLockParser.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.cargo.parse;\n+\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.moandjiezana.toml.Toml;\n+import com.synopsys.integration.bdio.graph.DependencyGraph;\n+import com.synopsys.integration.bdio.graph.MutableDependencyGraph;\n+import com.synopsys.integration.bdio.graph.MutableMapDependencyGraph;\n+import com.synopsys.integration.bdio.model.Forge;\n+import com.synopsys.integration.bdio.model.dependency.Dependency;\n+import com.synopsys.integration.bdio.model.externalid.ExternalId;\n+import com.synopsys.integration.bdio.model.externalid.ExternalIdFactory;\n+import com.synopsys.integration.detectable.detectables.cargo.model.CargoLock;\n+import com.synopsys.integration.detectable.detectables.cargo.model.Package;\n+\n+public class CargoLockParser {\n+\n+    private final ExternalIdFactory externalIdFactory = new ExternalIdFactory();\n+\n+    private final Map<String, Dependency> packageMap = new HashMap<>();\n+\n+    public DependencyGraph parseLockFile(final InputStream cargoLockInputStream) {\n+        final CargoLock cargoLock = new Toml().read(cargoLockInputStream).to(CargoLock.class);\n+        if (cargoLock.getPackages().isPresent()) {\n+            return parseDependencies(cargoLock.getPackages().get());\n+        }\n+        return new MutableMapDependencyGraph();\n+    }\n+\n+    private DependencyGraph parseDependencies(final List<Package> lockPackages) {\n+        MutableDependencyGraph graph = new MutableMapDependencyGraph();\n+\n+        Set<String> rootPackages = determineRootPackages(lockPackages);\n+\n+        for (final String rootPackage : rootPackages) {\n+            graph.addChildToRoot(packageMap.get(rootPackage));\n+        }\n+\n+        for (final Package lockPackage : lockPackages) {\n+            if (!lockPackage.getDependencies().isPresent()) {\n+                continue;\n+            }\n+            List<String> trimmedDependencies = trimDependencies(lockPackage.getDependencies().get());\n+            for (final String dependency : trimmedDependencies) {\n+                Dependency child = packageMap.get(dependency);\n+                Dependency parent = packageMap.get(lockPackage.getName().orElse(\"\"));\n+                if (child != null && parent != null) {\n+                    graph.addChildWithParent(child, parent);\n+                }\n+            }\n+        }\n+        return graph;\n+    }\n+\n+    private Set<String> determineRootPackages(List<Package> lockPackages) {\n+        Set<String> rootPackages = new HashSet<>();\n+        Set<String> dependencyPackages = new HashSet<>();\n+\n+        for (final Package lockPackage : lockPackages) {\n+            if (lockPackage != null) {\n+                final String projectName = lockPackage.getName().orElse(\"\");\n+                final String projectVersion = lockPackage.getVersion().orElse(\"\");\n+\n+                packageMap.put(projectName, createCargoDependency(projectName, projectVersion));\n+                rootPackages.add(projectName);\n+                if (lockPackage.getDependencies().isPresent()) {\n+                    dependencyPackages.addAll(trimDependencies(lockPackage.getDependencies().get()));\n+                }\n+\n+            }\n+        }\n+        rootPackages.removeAll(dependencyPackages);\n+\n+        return rootPackages;\n+    }\n+\n+    private List<String> trimDependencies(List<String> rawDependencies) {\n+        List<String> trimmedDependencies = new ArrayList<>();\n+\n+        for (String rawDependency : rawDependencies) {\n+            String trimmedDependency = rawDependency.split(\" \")[0];\n+            trimmedDependencies.add(trimmedDependency);\n+        }\n+        return trimmedDependencies;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI3MjYzMA=="}, "originalCommit": {"oid": "df670a596508ec94e5883234a7c5cae286353d3f"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk2MjEyNw==", "bodyText": "That's good too.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r423962127", "createdAt": "2020-05-12T18:56:34Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/parse/CargoLockParser.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.cargo.parse;\n+\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.moandjiezana.toml.Toml;\n+import com.synopsys.integration.bdio.graph.DependencyGraph;\n+import com.synopsys.integration.bdio.graph.MutableDependencyGraph;\n+import com.synopsys.integration.bdio.graph.MutableMapDependencyGraph;\n+import com.synopsys.integration.bdio.model.Forge;\n+import com.synopsys.integration.bdio.model.dependency.Dependency;\n+import com.synopsys.integration.bdio.model.externalid.ExternalId;\n+import com.synopsys.integration.bdio.model.externalid.ExternalIdFactory;\n+import com.synopsys.integration.detectable.detectables.cargo.model.CargoLock;\n+import com.synopsys.integration.detectable.detectables.cargo.model.Package;\n+\n+public class CargoLockParser {\n+\n+    private final ExternalIdFactory externalIdFactory = new ExternalIdFactory();\n+\n+    private final Map<String, Dependency> packageMap = new HashMap<>();\n+\n+    public DependencyGraph parseLockFile(final InputStream cargoLockInputStream) {\n+        final CargoLock cargoLock = new Toml().read(cargoLockInputStream).to(CargoLock.class);\n+        if (cargoLock.getPackages().isPresent()) {\n+            return parseDependencies(cargoLock.getPackages().get());\n+        }\n+        return new MutableMapDependencyGraph();\n+    }\n+\n+    private DependencyGraph parseDependencies(final List<Package> lockPackages) {\n+        MutableDependencyGraph graph = new MutableMapDependencyGraph();\n+\n+        Set<String> rootPackages = determineRootPackages(lockPackages);\n+\n+        for (final String rootPackage : rootPackages) {\n+            graph.addChildToRoot(packageMap.get(rootPackage));\n+        }\n+\n+        for (final Package lockPackage : lockPackages) {\n+            if (!lockPackage.getDependencies().isPresent()) {\n+                continue;\n+            }\n+            List<String> trimmedDependencies = trimDependencies(lockPackage.getDependencies().get());\n+            for (final String dependency : trimmedDependencies) {\n+                Dependency child = packageMap.get(dependency);\n+                Dependency parent = packageMap.get(lockPackage.getName().orElse(\"\"));\n+                if (child != null && parent != null) {\n+                    graph.addChildWithParent(child, parent);\n+                }\n+            }\n+        }\n+        return graph;\n+    }\n+\n+    private Set<String> determineRootPackages(List<Package> lockPackages) {\n+        Set<String> rootPackages = new HashSet<>();\n+        Set<String> dependencyPackages = new HashSet<>();\n+\n+        for (final Package lockPackage : lockPackages) {\n+            if (lockPackage != null) {\n+                final String projectName = lockPackage.getName().orElse(\"\");\n+                final String projectVersion = lockPackage.getVersion().orElse(\"\");\n+\n+                packageMap.put(projectName, createCargoDependency(projectName, projectVersion));\n+                rootPackages.add(projectName);\n+                if (lockPackage.getDependencies().isPresent()) {\n+                    dependencyPackages.addAll(trimDependencies(lockPackage.getDependencies().get()));\n+                }\n+\n+            }\n+        }\n+        rootPackages.removeAll(dependencyPackages);\n+\n+        return rootPackages;\n+    }\n+\n+    private List<String> trimDependencies(List<String> rawDependencies) {\n+        List<String> trimmedDependencies = new ArrayList<>();\n+\n+        for (String rawDependency : rawDependencies) {\n+            String trimmedDependency = rawDependency.split(\" \")[0];\n+            trimmedDependencies.add(trimmedDependency);\n+        }\n+        return trimmedDependencies;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI3MjYzMA=="}, "originalCommit": {"oid": "df670a596508ec94e5883234a7c5cae286353d3f"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTg5MDE5OnYy", "diffSide": "RIGHT", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/parse/CargoLockParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxOTo0MTowM1rOGTqowQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxOTo0MTowM1rOGTqowQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI3NDY4OQ==", "bodyText": "Could you add a unit test for this class? Test it with both valid and invalid inputs. Try to break your parser and make sure that it fails gracefully and not with null pointers. I think all of our parsers should have some kind of unit tests and not rely solely on the DetectableTest.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r423274689", "createdAt": "2020-05-11T19:41:03Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/parse/CargoLockParser.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.cargo.parse;\n+\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.moandjiezana.toml.Toml;\n+import com.synopsys.integration.bdio.graph.DependencyGraph;\n+import com.synopsys.integration.bdio.graph.MutableDependencyGraph;\n+import com.synopsys.integration.bdio.graph.MutableMapDependencyGraph;\n+import com.synopsys.integration.bdio.model.Forge;\n+import com.synopsys.integration.bdio.model.dependency.Dependency;\n+import com.synopsys.integration.bdio.model.externalid.ExternalId;\n+import com.synopsys.integration.bdio.model.externalid.ExternalIdFactory;\n+import com.synopsys.integration.detectable.detectables.cargo.model.CargoLock;\n+import com.synopsys.integration.detectable.detectables.cargo.model.Package;\n+\n+public class CargoLockParser {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df670a596508ec94e5883234a7c5cae286353d3f"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTk0OTk5OnYy", "diffSide": "RIGHT", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/parse/CargoLockParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxOTo1OTozMVrOGTrO1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxOTo1NjoyN1rOGUWp6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4NDQzOQ==", "bodyText": "Could there be nulls in this list? I think they should be filtered out when the CargoLock is being created.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r423284439", "createdAt": "2020-05-11T19:59:31Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/parse/CargoLockParser.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.cargo.parse;\n+\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.moandjiezana.toml.Toml;\n+import com.synopsys.integration.bdio.graph.DependencyGraph;\n+import com.synopsys.integration.bdio.graph.MutableDependencyGraph;\n+import com.synopsys.integration.bdio.graph.MutableMapDependencyGraph;\n+import com.synopsys.integration.bdio.model.Forge;\n+import com.synopsys.integration.bdio.model.dependency.Dependency;\n+import com.synopsys.integration.bdio.model.externalid.ExternalId;\n+import com.synopsys.integration.bdio.model.externalid.ExternalIdFactory;\n+import com.synopsys.integration.detectable.detectables.cargo.model.CargoLock;\n+import com.synopsys.integration.detectable.detectables.cargo.model.Package;\n+\n+public class CargoLockParser {\n+\n+    private final ExternalIdFactory externalIdFactory = new ExternalIdFactory();\n+\n+    private final Map<String, Dependency> packageMap = new HashMap<>();\n+\n+    public DependencyGraph parseLockFile(final InputStream cargoLockInputStream) {\n+        final CargoLock cargoLock = new Toml().read(cargoLockInputStream).to(CargoLock.class);\n+        if (cargoLock.getPackages().isPresent()) {\n+            return parseDependencies(cargoLock.getPackages().get());\n+        }\n+        return new MutableMapDependencyGraph();\n+    }\n+\n+    private DependencyGraph parseDependencies(final List<Package> lockPackages) {\n+        MutableDependencyGraph graph = new MutableMapDependencyGraph();\n+\n+        Set<String> rootPackages = determineRootPackages(lockPackages);\n+\n+        for (final String rootPackage : rootPackages) {\n+            graph.addChildToRoot(packageMap.get(rootPackage));\n+        }\n+\n+        for (final Package lockPackage : lockPackages) {\n+            if (!lockPackage.getDependencies().isPresent()) {\n+                continue;\n+            }\n+            List<String> trimmedDependencies = trimDependencies(lockPackage.getDependencies().get());\n+            for (final String dependency : trimmedDependencies) {\n+                Dependency child = packageMap.get(dependency);\n+                Dependency parent = packageMap.get(lockPackage.getName().orElse(\"\"));\n+                if (child != null && parent != null) {\n+                    graph.addChildWithParent(child, parent);\n+                }\n+            }\n+        }\n+        return graph;\n+    }\n+\n+    private Set<String> determineRootPackages(List<Package> lockPackages) {\n+        Set<String> rootPackages = new HashSet<>();\n+        Set<String> dependencyPackages = new HashSet<>();\n+\n+        for (final Package lockPackage : lockPackages) {\n+            if (lockPackage != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df670a596508ec94e5883234a7c5cae286353d3f"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzk5NTg4MA==", "bodyText": "There should never be nulls, I think that check was from before when cargoLock.packages wasn't an Optional.  I'll remove it", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r423995880", "createdAt": "2020-05-12T19:56:27Z", "author": {"login": "crowleySynopsys"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/parse/CargoLockParser.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.cargo.parse;\n+\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.moandjiezana.toml.Toml;\n+import com.synopsys.integration.bdio.graph.DependencyGraph;\n+import com.synopsys.integration.bdio.graph.MutableDependencyGraph;\n+import com.synopsys.integration.bdio.graph.MutableMapDependencyGraph;\n+import com.synopsys.integration.bdio.model.Forge;\n+import com.synopsys.integration.bdio.model.dependency.Dependency;\n+import com.synopsys.integration.bdio.model.externalid.ExternalId;\n+import com.synopsys.integration.bdio.model.externalid.ExternalIdFactory;\n+import com.synopsys.integration.detectable.detectables.cargo.model.CargoLock;\n+import com.synopsys.integration.detectable.detectables.cargo.model.Package;\n+\n+public class CargoLockParser {\n+\n+    private final ExternalIdFactory externalIdFactory = new ExternalIdFactory();\n+\n+    private final Map<String, Dependency> packageMap = new HashMap<>();\n+\n+    public DependencyGraph parseLockFile(final InputStream cargoLockInputStream) {\n+        final CargoLock cargoLock = new Toml().read(cargoLockInputStream).to(CargoLock.class);\n+        if (cargoLock.getPackages().isPresent()) {\n+            return parseDependencies(cargoLock.getPackages().get());\n+        }\n+        return new MutableMapDependencyGraph();\n+    }\n+\n+    private DependencyGraph parseDependencies(final List<Package> lockPackages) {\n+        MutableDependencyGraph graph = new MutableMapDependencyGraph();\n+\n+        Set<String> rootPackages = determineRootPackages(lockPackages);\n+\n+        for (final String rootPackage : rootPackages) {\n+            graph.addChildToRoot(packageMap.get(rootPackage));\n+        }\n+\n+        for (final Package lockPackage : lockPackages) {\n+            if (!lockPackage.getDependencies().isPresent()) {\n+                continue;\n+            }\n+            List<String> trimmedDependencies = trimDependencies(lockPackage.getDependencies().get());\n+            for (final String dependency : trimmedDependencies) {\n+                Dependency child = packageMap.get(dependency);\n+                Dependency parent = packageMap.get(lockPackage.getName().orElse(\"\"));\n+                if (child != null && parent != null) {\n+                    graph.addChildWithParent(child, parent);\n+                }\n+            }\n+        }\n+        return graph;\n+    }\n+\n+    private Set<String> determineRootPackages(List<Package> lockPackages) {\n+        Set<String> rootPackages = new HashSet<>();\n+        Set<String> dependencyPackages = new HashSet<>();\n+\n+        for (final Package lockPackage : lockPackages) {\n+            if (lockPackage != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4NDQzOQ=="}, "originalCommit": {"oid": "df670a596508ec94e5883234a7c5cae286353d3f"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNTk1NzQwOnYy", "diffSide": "RIGHT", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/parse/CargoLockParser.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDowMTo1OFrOGTrTuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQyMDowMTo1OFrOGTrTuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzI4NTY4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            if (lockPackage.getDependencies().isPresent()) {\n          \n          \n            \n                                dependencyPackages.addAll(trimDependencies(lockPackage.getDependencies().get()));\n          \n          \n            \n                            }\n          \n          \n            \n                            lockPackage.getDependencies()\n          \n          \n            \n                                .map(this::trimDependencies)\n          \n          \n            \n                                .ifPresent(dependencyPackages::addAll);", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r423285689", "createdAt": "2020-05-11T20:01:58Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/parse/CargoLockParser.java", "diffHunk": "@@ -0,0 +1,119 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.cargo.parse;\n+\n+import java.io.InputStream;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import com.moandjiezana.toml.Toml;\n+import com.synopsys.integration.bdio.graph.DependencyGraph;\n+import com.synopsys.integration.bdio.graph.MutableDependencyGraph;\n+import com.synopsys.integration.bdio.graph.MutableMapDependencyGraph;\n+import com.synopsys.integration.bdio.model.Forge;\n+import com.synopsys.integration.bdio.model.dependency.Dependency;\n+import com.synopsys.integration.bdio.model.externalid.ExternalId;\n+import com.synopsys.integration.bdio.model.externalid.ExternalIdFactory;\n+import com.synopsys.integration.detectable.detectables.cargo.model.CargoLock;\n+import com.synopsys.integration.detectable.detectables.cargo.model.Package;\n+\n+public class CargoLockParser {\n+\n+    private final ExternalIdFactory externalIdFactory = new ExternalIdFactory();\n+\n+    private final Map<String, Dependency> packageMap = new HashMap<>();\n+\n+    public DependencyGraph parseLockFile(final InputStream cargoLockInputStream) {\n+        final CargoLock cargoLock = new Toml().read(cargoLockInputStream).to(CargoLock.class);\n+        if (cargoLock.getPackages().isPresent()) {\n+            return parseDependencies(cargoLock.getPackages().get());\n+        }\n+        return new MutableMapDependencyGraph();\n+    }\n+\n+    private DependencyGraph parseDependencies(final List<Package> lockPackages) {\n+        MutableDependencyGraph graph = new MutableMapDependencyGraph();\n+\n+        Set<String> rootPackages = determineRootPackages(lockPackages);\n+\n+        for (final String rootPackage : rootPackages) {\n+            graph.addChildToRoot(packageMap.get(rootPackage));\n+        }\n+\n+        for (final Package lockPackage : lockPackages) {\n+            if (!lockPackage.getDependencies().isPresent()) {\n+                continue;\n+            }\n+            List<String> trimmedDependencies = trimDependencies(lockPackage.getDependencies().get());\n+            for (final String dependency : trimmedDependencies) {\n+                Dependency child = packageMap.get(dependency);\n+                Dependency parent = packageMap.get(lockPackage.getName().orElse(\"\"));\n+                if (child != null && parent != null) {\n+                    graph.addChildWithParent(child, parent);\n+                }\n+            }\n+        }\n+        return graph;\n+    }\n+\n+    private Set<String> determineRootPackages(List<Package> lockPackages) {\n+        Set<String> rootPackages = new HashSet<>();\n+        Set<String> dependencyPackages = new HashSet<>();\n+\n+        for (final Package lockPackage : lockPackages) {\n+            if (lockPackage != null) {\n+                final String projectName = lockPackage.getName().orElse(\"\");\n+                final String projectVersion = lockPackage.getVersion().orElse(\"\");\n+\n+                packageMap.put(projectName, createCargoDependency(projectName, projectVersion));\n+                rootPackages.add(projectName);\n+                if (lockPackage.getDependencies().isPresent()) {\n+                    dependencyPackages.addAll(trimDependencies(lockPackage.getDependencies().get()));\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df670a596508ec94e5883234a7c5cae286353d3f"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDgyOTc5OnYy", "diffSide": "RIGHT", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/CargoExtractor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMDo0NTozM1rOGVC4Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMDo0NTozM1rOGVC4Aw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyMDM4Nw==", "bodyText": "Catch DetectableException here as well so it isn't caught in the Detectable's extraction method.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    } catch (final IOException e) {\n          \n          \n            \n                        return new Extraction.Builder().exception(e).build();\n          \n          \n            \n                    }\n          \n          \n            \n                    } catch (final IOException | DetectableException e) {\n          \n          \n            \n                        return new Extraction.Builder().exception(e).build();\n          \n          \n            \n                    }", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r424720387", "createdAt": "2020-05-13T20:45:33Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/CargoExtractor.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.cargo;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import com.synopsys.integration.bdio.graph.DependencyGraph;\n+import com.synopsys.integration.detectable.Extraction;\n+import com.synopsys.integration.detectable.detectable.codelocation.CodeLocation;\n+import com.synopsys.integration.detectable.detectable.exception.DetectableException;\n+import com.synopsys.integration.detectable.detectables.cargo.parse.CargoLockParser;\n+\n+public class CargoExtractor {\n+\n+    private final CargoLockParser cargoLockParser;\n+\n+    public CargoExtractor(final CargoLockParser cargoLockParser) {\n+        this.cargoLockParser = cargoLockParser;\n+    }\n+\n+    public Extraction extract(final File cargoLock) throws DetectableException {\n+        try (final InputStream goLockInputStream = new FileInputStream(cargoLock)) {\n+            final DependencyGraph graph = cargoLockParser.parseLockFile(goLockInputStream);\n+            final CodeLocation codeLocation = new CodeLocation(graph);\n+            return new Extraction.Builder().success(codeLocation).build();\n+        } catch (final IOException e) {\n+            return new Extraction.Builder().exception(e).build();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3989330f124dda26b4c96b78f2b5b5c4325e7e61"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDg0Nzc3OnYy", "diffSide": "RIGHT", "path": "detectable/src/test/java/com/synopsys/integration/detectable/detectables/cargo/unit/CargoLockParserTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMDo1MTowM1rOGVDDOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNDozODo1NFrOGVfd0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyMzI1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    boolean caughtException = false;\n          \n          \n            \n                    try {\n          \n          \n            \n                        CargoLockParser cargoLockParser = new CargoLockParser();\n          \n          \n            \n                        DependencyGraph graph = cargoLockParser.parseLockFile(FunctionalTestFiles.asInputStream(\"/cargo/invalidSyntax.lock\"));\n          \n          \n            \n                    } catch (DetectableException e) {\n          \n          \n            \n                        caughtException = true;\n          \n          \n            \n                    }\n          \n          \n            \n                    Assertions.assertTrue(caughtException);\n          \n          \n            \n                    CargoLockParser cargoLockParser = new CargoLockParser();\n          \n          \n            \n                    Assertions.assertThrows(DetectableException.class, () -> cargoLockParser.parseLockFile(FunctionalTestFiles.asInputStream(\"/cargo/invalidSyntax.lock\")));", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r424723256", "createdAt": "2020-05-13T20:51:03Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/test/java/com/synopsys/integration/detectable/detectables/cargo/unit/CargoLockParserTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.synopsys.integration.detectable.detectables.cargo.unit;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import com.synopsys.integration.bdio.graph.DependencyGraph;\n+import com.synopsys.integration.bdio.model.Forge;\n+import com.synopsys.integration.detectable.detectable.exception.DetectableException;\n+import com.synopsys.integration.detectable.detectables.cargo.parse.CargoLockParser;\n+import com.synopsys.integration.detectable.util.FunctionalTestFiles;\n+import com.synopsys.integration.detectable.util.graph.NameVersionGraphAssert;\n+\n+public class CargoLockParserTest {\n+\n+    @Test\n+    public void testParsesNamesAndVersionsSimple() throws DetectableException {\n+\n+        CargoLockParser cargoLockParser = new CargoLockParser();\n+        DependencyGraph graph = cargoLockParser.parseLockFile(FunctionalTestFiles.asInputStream(\"/cargo/simpleNameAndVersion.lock\"));\n+\n+        NameVersionGraphAssert graphAssert = new NameVersionGraphAssert(Forge.CRATES, graph);\n+        graphAssert.hasRootSize(2);\n+        graphAssert.hasRootDependency(\"test1\", \"1.0.0\");\n+        graphAssert.hasRootDependency(\"test2\", \"2.0.0\");\n+    }\n+\n+    @Test\n+    public void testParsesNoisyDependencyLines() throws DetectableException {\n+\n+        CargoLockParser cargoLockParser = new CargoLockParser();\n+        DependencyGraph graph = cargoLockParser.parseLockFile(FunctionalTestFiles.asInputStream(\"/cargo/noisyDependencyLines.lock\"));\n+\n+        NameVersionGraphAssert graphAssert = new NameVersionGraphAssert(Forge.CRATES, graph);\n+        graphAssert.hasRootSize(1);\n+        graphAssert.hasRootDependency(\"test1\", \"1.0.0\");\n+        graphAssert.hasParentChildRelationship(\"test1\", \"1.0.0\", \"dep1\", \"0.5.0\");\n+        graphAssert.hasParentChildRelationship(\"test1\", \"1.0.0\", \"dep2\", \"2.0.0\");\n+    }\n+\n+    @Test\n+    public void testCorrectNumberOfRootDependencies() throws DetectableException {\n+        CargoLockParser cargoLockParser = new CargoLockParser();\n+        DependencyGraph graph = cargoLockParser.parseLockFile(FunctionalTestFiles.asInputStream(\"/cargo/dependencyHierarchy.lock\"));\n+\n+        NameVersionGraphAssert graphAssert = new NameVersionGraphAssert(Forge.CRATES, graph);\n+        graphAssert.hasRootSize(1);\n+    }\n+\n+    @Test\n+    public void testCatchInvalidSyntaxInLockFile() {\n+        boolean caughtException = false;\n+        try {\n+            CargoLockParser cargoLockParser = new CargoLockParser();\n+            DependencyGraph graph = cargoLockParser.parseLockFile(FunctionalTestFiles.asInputStream(\"/cargo/invalidSyntax.lock\"));\n+        } catch (DetectableException e) {\n+            caughtException = true;\n+        }\n+        Assertions.assertTrue(caughtException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3989330f124dda26b4c96b78f2b5b5c4325e7e61"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTE4ODgxNw==", "bodyText": "Ooo that's very nice", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r425188817", "createdAt": "2020-05-14T14:38:54Z", "author": {"login": "crowleySynopsys"}, "path": "detectable/src/test/java/com/synopsys/integration/detectable/detectables/cargo/unit/CargoLockParserTest.java", "diffHunk": "@@ -0,0 +1,60 @@\n+package com.synopsys.integration.detectable.detectables.cargo.unit;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+import com.synopsys.integration.bdio.graph.DependencyGraph;\n+import com.synopsys.integration.bdio.model.Forge;\n+import com.synopsys.integration.detectable.detectable.exception.DetectableException;\n+import com.synopsys.integration.detectable.detectables.cargo.parse.CargoLockParser;\n+import com.synopsys.integration.detectable.util.FunctionalTestFiles;\n+import com.synopsys.integration.detectable.util.graph.NameVersionGraphAssert;\n+\n+public class CargoLockParserTest {\n+\n+    @Test\n+    public void testParsesNamesAndVersionsSimple() throws DetectableException {\n+\n+        CargoLockParser cargoLockParser = new CargoLockParser();\n+        DependencyGraph graph = cargoLockParser.parseLockFile(FunctionalTestFiles.asInputStream(\"/cargo/simpleNameAndVersion.lock\"));\n+\n+        NameVersionGraphAssert graphAssert = new NameVersionGraphAssert(Forge.CRATES, graph);\n+        graphAssert.hasRootSize(2);\n+        graphAssert.hasRootDependency(\"test1\", \"1.0.0\");\n+        graphAssert.hasRootDependency(\"test2\", \"2.0.0\");\n+    }\n+\n+    @Test\n+    public void testParsesNoisyDependencyLines() throws DetectableException {\n+\n+        CargoLockParser cargoLockParser = new CargoLockParser();\n+        DependencyGraph graph = cargoLockParser.parseLockFile(FunctionalTestFiles.asInputStream(\"/cargo/noisyDependencyLines.lock\"));\n+\n+        NameVersionGraphAssert graphAssert = new NameVersionGraphAssert(Forge.CRATES, graph);\n+        graphAssert.hasRootSize(1);\n+        graphAssert.hasRootDependency(\"test1\", \"1.0.0\");\n+        graphAssert.hasParentChildRelationship(\"test1\", \"1.0.0\", \"dep1\", \"0.5.0\");\n+        graphAssert.hasParentChildRelationship(\"test1\", \"1.0.0\", \"dep2\", \"2.0.0\");\n+    }\n+\n+    @Test\n+    public void testCorrectNumberOfRootDependencies() throws DetectableException {\n+        CargoLockParser cargoLockParser = new CargoLockParser();\n+        DependencyGraph graph = cargoLockParser.parseLockFile(FunctionalTestFiles.asInputStream(\"/cargo/dependencyHierarchy.lock\"));\n+\n+        NameVersionGraphAssert graphAssert = new NameVersionGraphAssert(Forge.CRATES, graph);\n+        graphAssert.hasRootSize(1);\n+    }\n+\n+    @Test\n+    public void testCatchInvalidSyntaxInLockFile() {\n+        boolean caughtException = false;\n+        try {\n+            CargoLockParser cargoLockParser = new CargoLockParser();\n+            DependencyGraph graph = cargoLockParser.parseLockFile(FunctionalTestFiles.asInputStream(\"/cargo/invalidSyntax.lock\"));\n+        } catch (DetectableException e) {\n+            caughtException = true;\n+        }\n+        Assertions.assertTrue(caughtException);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyMzI1Ng=="}, "originalCommit": {"oid": "3989330f124dda26b4c96b78f2b5b5c4325e7e61"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDg1NTQ1OnYy", "diffSide": "RIGHT", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/parse/CargoLockParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMDo1MzozMFrOGVDIEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xNFQxNToxNToxMFrOGVhJ7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyNDQ5OA==", "bodyText": "Does this Toml library require an InputStream? If it can take a String we should do that instead. If not then this is fine.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r424724498", "createdAt": "2020-05-13T20:53:30Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/parse/CargoLockParser.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.cargo.parse;\n+\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.moandjiezana.toml.Toml;\n+import com.synopsys.integration.bdio.graph.DependencyGraph;\n+import com.synopsys.integration.bdio.graph.MutableDependencyGraph;\n+import com.synopsys.integration.bdio.graph.MutableMapDependencyGraph;\n+import com.synopsys.integration.bdio.model.Forge;\n+import com.synopsys.integration.bdio.model.dependency.Dependency;\n+import com.synopsys.integration.bdio.model.externalid.ExternalId;\n+import com.synopsys.integration.bdio.model.externalid.ExternalIdFactory;\n+import com.synopsys.integration.detectable.detectable.exception.DetectableException;\n+import com.synopsys.integration.detectable.detectables.cargo.model.CargoLock;\n+import com.synopsys.integration.detectable.detectables.cargo.model.Package;\n+\n+public class CargoLockParser {\n+\n+    private final ExternalIdFactory externalIdFactory = new ExternalIdFactory();\n+\n+    private final Map<String, Dependency> packageMap = new HashMap<>();\n+\n+    public DependencyGraph parseLockFile(final InputStream cargoLockInputStream) throws DetectableException {\n+        try {\n+            final CargoLock cargoLock = new Toml().read(cargoLockInputStream).to(CargoLock.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3989330f124dda26b4c96b78f2b5b5c4325e7e61"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNTIxNjQ5Mw==", "bodyText": "Turns out it can, good call", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r425216493", "createdAt": "2020-05-14T15:15:10Z", "author": {"login": "crowleySynopsys"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/parse/CargoLockParser.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.cargo.parse;\n+\n+import java.io.InputStream;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n+import com.moandjiezana.toml.Toml;\n+import com.synopsys.integration.bdio.graph.DependencyGraph;\n+import com.synopsys.integration.bdio.graph.MutableDependencyGraph;\n+import com.synopsys.integration.bdio.graph.MutableMapDependencyGraph;\n+import com.synopsys.integration.bdio.model.Forge;\n+import com.synopsys.integration.bdio.model.dependency.Dependency;\n+import com.synopsys.integration.bdio.model.externalid.ExternalId;\n+import com.synopsys.integration.bdio.model.externalid.ExternalIdFactory;\n+import com.synopsys.integration.detectable.detectable.exception.DetectableException;\n+import com.synopsys.integration.detectable.detectables.cargo.model.CargoLock;\n+import com.synopsys.integration.detectable.detectables.cargo.model.Package;\n+\n+public class CargoLockParser {\n+\n+    private final ExternalIdFactory externalIdFactory = new ExternalIdFactory();\n+\n+    private final Map<String, Dependency> packageMap = new HashMap<>();\n+\n+    public DependencyGraph parseLockFile(final InputStream cargoLockInputStream) throws DetectableException {\n+        try {\n+            final CargoLock cargoLock = new Toml().read(cargoLockInputStream).to(CargoLock.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyNDQ5OA=="}, "originalCommit": {"oid": "3989330f124dda26b4c96b78f2b5b5c4325e7e61"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0NDg1ODk4OnYy", "diffSide": "RIGHT", "path": "detectable/src/test/resources/detectables/functional/cargo/dependencyHierarchy.lock", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMDo1NDo0M1rOGVDKWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QyMDo1NDo0M1rOGVDKWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDcyNTA4MA==", "bodyText": "If you are able to have the CargoLockParser take in a String instead of an InputStream then these resource files should removed in favor of a String within the unit test.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r424725080", "createdAt": "2020-05-13T20:54:43Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/test/resources/detectables/functional/cargo/dependencyHierarchy.lock", "diffHunk": "@@ -0,0 +1,18 @@\n+[[package]]", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3989330f124dda26b4c96b78f2b5b5c4325e7e61"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MzI1MDc5OnYy", "diffSide": "RIGHT", "path": "docs/templates/content/90-releasenotes.ftl", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQyMTo1OToxOVrOGX0J5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDowMzoxNFrOGYNXKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYyNDkzNA==", "bodyText": "I think we are only adding ticket numbers to the \"Resolved Issues\" section.\n@stevebillings can you confirm?", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r427624934", "createdAt": "2020-05-19T21:59:19Z", "author": {"login": "JakeMathews"}, "path": "docs/templates/content/90-releasenotes.ftl", "diffHunk": "@@ -5,6 +5,7 @@\n * The Yarn detector extracts project information from package.json files.\n * Added Yarn Detector support for dependencies that are missing a fuzzy version in a lockfile dependency declaration.\n * ${solution_name} logs policy violations when it is configured to [fail on policy violations](../properties/configuration/project/#fail-on-policy-violation-severities).\n+* (IDETECT-1540) Detect now supports projects managed by the Cargo package manager.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68b339776ca4f07e3311871aa73a415e1719d82a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODAzNzkyOQ==", "bodyText": "@JakeMathews @crowleySynopsys Yes, as I understand it that's the guidance from the doc team.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/164#discussion_r428037929", "createdAt": "2020-05-20T14:03:14Z", "author": {"login": "stevebillings"}, "path": "docs/templates/content/90-releasenotes.ftl", "diffHunk": "@@ -5,6 +5,7 @@\n * The Yarn detector extracts project information from package.json files.\n * Added Yarn Detector support for dependencies that are missing a fuzzy version in a lockfile dependency declaration.\n * ${solution_name} logs policy violations when it is configured to [fail on policy violations](../properties/configuration/project/#fail-on-policy-violation-severities).\n+* (IDETECT-1540) Detect now supports projects managed by the Cargo package manager.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzYyNDkzNA=="}, "originalCommit": {"oid": "68b339776ca4f07e3311871aa73a415e1719d82a"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1601, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}