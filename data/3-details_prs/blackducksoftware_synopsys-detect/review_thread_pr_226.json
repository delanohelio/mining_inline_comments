{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2ODA1NjM3", "number": 226, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo0OTowMFrOEjRSEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo0OTowMFrOEjRSEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1NDE4NzY5OnYy", "diffSide": "RIGHT", "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/lerna/LernaMissingDependencyHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxODo0OTowMFrOHRiNfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxOTowNDo1M1rOHRiwAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0ODM1MQ==", "bodyText": "This is definitely not worth delaying the code freeze for, but the noun-like method names caught my eye. Then I saw that they are kinda used like objects (method references), but even so... since they're doing real work, I think I'd lean toward something more verb-like (say, handleMissingXxxDependency())", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/226#discussion_r488148351", "createdAt": "2020-09-14T18:49:00Z", "author": {"login": "stevebillings"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/lerna/LernaMissingDependencyHandler.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.synopsys.integration.detectable.detectables.lerna;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+\n+import com.synopsys.integration.bdio.graph.builder.LazyExternalIdDependencyGraphBuilder;\n+import com.synopsys.integration.bdio.model.Forge;\n+import com.synopsys.integration.bdio.model.dependencyid.DependencyId;\n+import com.synopsys.integration.bdio.model.externalid.ExternalId;\n+import com.synopsys.integration.bdio.model.externalid.ExternalIdFactory;\n+import com.synopsys.integration.detectable.detectables.lerna.model.LernaPackage;\n+import com.synopsys.integration.detectable.detectables.npm.lockfile.model.NpmRequires;\n+import com.synopsys.integration.detectable.detectables.npm.lockfile.parse.NpmLockfilePackager;\n+import com.synopsys.integration.detectable.detectables.yarn.parse.YarnTransformer;\n+\n+public class LernaMissingDependencyHandler {\n+    private final List<LernaPackage> lernaPackages;\n+\n+    public LernaMissingDependencyHandler(List<LernaPackage> lernaPackages) {\n+        this.lernaPackages = lernaPackages;\n+    }\n+\n+    public void missingNpmDependencyHandler(Logger logger, NpmRequires missingDependency) {\n+        boolean isLernaPackage = lernaPackages.stream()\n+                                     .anyMatch(lernaPackage -> lernaPackage.getName().equalsIgnoreCase(missingDependency.getName()));\n+        if (!isLernaPackage) {\n+            NpmLockfilePackager.handleMissingDependency(logger, missingDependency);\n+        }\n+    }\n+\n+    public ExternalId missingYarnDependencyHandler(Logger logger, ExternalIdFactory externalIdFactory, DependencyId dependencyId, LazyExternalIdDependencyGraphBuilder.LazyDependencyInfo lazyDependencyInfo, String yarnLockFilePath) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c93c45d06d8db7b658c0a91407feac3750b9df62"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE1NzE4Ng==", "bodyText": "Good catch. That's a quick fix", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/226#discussion_r488157186", "createdAt": "2020-09-14T19:04:53Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/lerna/LernaMissingDependencyHandler.java", "diffHunk": "@@ -0,0 +1,43 @@\n+package com.synopsys.integration.detectable.detectables.lerna;\n+\n+import java.util.List;\n+import java.util.Optional;\n+\n+import org.slf4j.Logger;\n+\n+import com.synopsys.integration.bdio.graph.builder.LazyExternalIdDependencyGraphBuilder;\n+import com.synopsys.integration.bdio.model.Forge;\n+import com.synopsys.integration.bdio.model.dependencyid.DependencyId;\n+import com.synopsys.integration.bdio.model.externalid.ExternalId;\n+import com.synopsys.integration.bdio.model.externalid.ExternalIdFactory;\n+import com.synopsys.integration.detectable.detectables.lerna.model.LernaPackage;\n+import com.synopsys.integration.detectable.detectables.npm.lockfile.model.NpmRequires;\n+import com.synopsys.integration.detectable.detectables.npm.lockfile.parse.NpmLockfilePackager;\n+import com.synopsys.integration.detectable.detectables.yarn.parse.YarnTransformer;\n+\n+public class LernaMissingDependencyHandler {\n+    private final List<LernaPackage> lernaPackages;\n+\n+    public LernaMissingDependencyHandler(List<LernaPackage> lernaPackages) {\n+        this.lernaPackages = lernaPackages;\n+    }\n+\n+    public void missingNpmDependencyHandler(Logger logger, NpmRequires missingDependency) {\n+        boolean isLernaPackage = lernaPackages.stream()\n+                                     .anyMatch(lernaPackage -> lernaPackage.getName().equalsIgnoreCase(missingDependency.getName()));\n+        if (!isLernaPackage) {\n+            NpmLockfilePackager.handleMissingDependency(logger, missingDependency);\n+        }\n+    }\n+\n+    public ExternalId missingYarnDependencyHandler(Logger logger, ExternalIdFactory externalIdFactory, DependencyId dependencyId, LazyExternalIdDependencyGraphBuilder.LazyDependencyInfo lazyDependencyInfo, String yarnLockFilePath) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE0ODM1MQ=="}, "originalCommit": {"oid": "c93c45d06d8db7b658c0a91407feac3750b9df62"}, "originalPosition": 33}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1652, "cost": 1, "resetAt": "2021-11-12T13:16:51Z"}}}