{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE4MjM4Mzc1", "number": 169, "title": "Poetry detectable", "bodyText": "Description\nSupport for Poetry projects.  The file count is deceivingly high, half of them are just edits to the import for @nullable", "createdAt": "2020-05-14T20:47:55Z", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/169", "merged": true, "mergeCommit": {"oid": "c0b04ce61be62a5ff5f38880af33744fb2a02bf0"}, "closed": true, "closedAt": "2020-06-08T15:51:22Z", "author": {"login": "crowleySynopsys"}, "timelineItems": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcevH76gH2gAyNDE4MjM4Mzc1OjliYTkwM2UyMzQ3Zjc2NDUwMmRjOTRhZTY4YjU3MjFiMzEzMDk2MmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcpSXMSAFqTQyNTM3MzMwMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "9ba903e2347f764502dc94ae68b5721b3130962a", "author": {"user": {"login": "crowleySynopsys", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/9ba903e2347f764502dc94ae68b5721b3130962a", "committedDate": "2020-05-06T20:58:01Z", "message": "feat(poetry): Created channels to create PoetryDetectable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "613db8d5be75662181d63f62f35aa349c5a73ba8", "author": {"user": {"login": "crowleySynopsys", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/613db8d5be75662181d63f62f35aa349c5a73ba8", "committedDate": "2020-05-08T18:16:33Z", "message": "feat(poetry): Added logic for poetry.lock parser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db0ae30bf7800f525296ca1433854cfd71eeda3d", "author": {"user": {"login": "crowleySynopsys", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/db0ae30bf7800f525296ca1433854cfd71eeda3d", "committedDate": "2020-05-08T18:22:19Z", "message": "refactor(pip): Reorganized pip detectables into their own sub-packages"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f94b050dab4c9a52bccd7fc80b57367943ad2eb0", "author": {"user": {"login": "crowleySynopsys", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/f94b050dab4c9a52bccd7fc80b57367943ad2eb0", "committedDate": "2020-05-08T19:49:39Z", "message": "feat(poetry): Added test for poetry detectable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74fe4b2c725522e893aaa51911c45d058cc5c944", "author": {"user": {"login": "crowleySynopsys", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/74fe4b2c725522e893aaa51911c45d058cc5c944", "committedDate": "2020-05-09T18:11:19Z", "message": "feat(build): Importing tomlj TOML parser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "563e748a358945cb7285eeca72af79bdae6b2252", "author": {"user": {"login": "crowleySynopsys", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/563e748a358945cb7285eeca72af79bdae6b2252", "committedDate": "2020-05-12T16:52:58Z", "message": "fix(build): Revised placement of org.tomlj dependency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2ce42781e6370d9ef248373028751f713d01905", "author": {"user": {"login": "crowleySynopsys", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/f2ce42781e6370d9ef248373028751f713d01905", "committedDate": "2020-05-12T16:54:51Z", "message": "feat(poetry): Edited poetry detectable to use new TOML parser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff442888ced7485a91dc3317e84f61d0fd7fca00", "author": {"user": {"login": "crowleySynopsys", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/ff442888ced7485a91dc3317e84f61d0fd7fca00", "committedDate": "2020-05-12T16:56:16Z", "message": "feat(test): Edited PoetryDetectableTest to test parsing of package.dependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa158a7947a32330487de2ab96e80aed99b26abb", "author": {"user": {"login": "crowleySynopsys", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/fa158a7947a32330487de2ab96e80aed99b26abb", "committedDate": "2020-05-12T17:02:35Z", "message": "fix: Replaced org.antlr.v4.runtime.misc.Nullable imports since no longer resolved by Detect"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8db329517f74b6794d90551caeee7bc22ec6723c", "author": {"user": {"login": "crowleySynopsys", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/8db329517f74b6794d90551caeee7bc22ec6723c", "committedDate": "2020-05-12T18:29:46Z", "message": "style: Added copyright tag to new files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "705745b41772397dac40058fc4bdbbce42fdb001", "author": {"user": {"login": "crowleySynopsys", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/705745b41772397dac40058fc4bdbbce42fdb001", "committedDate": "2020-05-12T18:30:49Z", "message": "fix: Removed unnecessary model class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07ada00754cb0961ce900f551a5355ecd0b42b69", "author": {"user": {"login": "crowleySynopsys", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/07ada00754cb0961ce900f551a5355ecd0b42b69", "committedDate": "2020-05-13T21:10:40Z", "message": "feat(poetry): Added unit test for PoetryLockParser"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a9d49b348e61146fe3ca4cc1a852082513fd5641", "author": {"user": {"login": "crowleySynopsys", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/a9d49b348e61146fe3ca4cc1a852082513fd5641", "committedDate": "2020-05-14T15:39:15Z", "message": "feat(poetry): Poetry detectable now parses a String instead of an InputStream"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8189039d85e8ddd4c4fb5206cf874746d10277a9", "author": {"user": {"login": "crowleySynopsys", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/8189039d85e8ddd4c4fb5206cf874746d10277a9", "committedDate": "2020-05-14T20:35:21Z", "message": "fix: Replaced org.springframework.lang.Nullable annotations with org.jetbrains.annotations.Nullable annotations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "906cb9882dcba4045a40ea8e03b156a0723c4145", "author": {"user": {"login": "crowleySynopsys", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/906cb9882dcba4045a40ea8e03b156a0723c4145", "committedDate": "2020-05-14T20:41:30Z", "message": "refactor: Undo reorganization of pip detectable classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d83fd399a16c4b8fb66597fd3cf5fd4722f35834", "author": {"user": {"login": "crowleySynopsys", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/d83fd399a16c4b8fb66597fd3cf5fd4722f35834", "committedDate": "2020-05-15T19:23:48Z", "message": "feat(doc): Added release note for Poetry support"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4267e80327839be54792147d23440cbf1712faf", "author": {"user": {"login": "crowleySynopsys", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/a4267e80327839be54792147d23440cbf1712faf", "committedDate": "2020-05-15T19:44:20Z", "message": "feat(doc): Updated package manager documentation to detail support for Poetry"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c9311d6aba30e0694908f240e878b27e85f8a66d", "author": {"user": {"login": "crowleySynopsys", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/c9311d6aba30e0694908f240e878b27e85f8a66d", "committedDate": "2020-05-19T18:32:23Z", "message": "refactor: Revert to org.antlr.misc.Nullable imports (will be changed on a different branch)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e90a9b60a64a64b64afa396fce89384221c8a498", "author": {"user": {"login": "crowleySynopsys", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/e90a9b60a64a64b64afa396fce89384221c8a498", "committedDate": "2020-05-19T19:00:28Z", "message": "refactor: Revert to org.antlr.misc.Nullable imports (will be changed on a different branch)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b43e985b0104f0c178e5c4acc510479fa71208a", "author": {"user": {"login": "crowleySynopsys", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/2b43e985b0104f0c178e5c4acc510479fa71208a", "committedDate": "2020-05-19T19:43:19Z", "message": "fix: Deleted unnecessary PoetryResolver"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a219435a0a296ad21421912831a05fe6041069f", "author": {"user": {"login": "crowleySynopsys", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/0a219435a0a296ad21421912831a05fe6041069f", "committedDate": "2020-05-20T17:26:55Z", "message": "fix(docs): Removed ticket number from poetry support feature"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NzkwNjY4", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/169#pullrequestreview-424790668", "createdAt": "2020-06-04T20:09:16Z", "commit": {"oid": "0a219435a0a296ad21421912831a05fe6041069f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMDowOToxNlrOGfWCnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMDoyMDozMlrOGfWY1A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUyMDE1Nw==", "bodyText": "Git is showing that you replaced this entire file? I am struggling to see any changes here.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/169#discussion_r435520157", "createdAt": "2020-06-04T20:09:16Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectable/executable/impl/SimpleExecutableFinder.java", "diffHunk": "@@ -1,85 +1,85 @@\n-/**\r\n- * detectable\r\n- *\r\n- * Copyright (c) 2020 Synopsys, Inc.\r\n- *\r\n- * Licensed to the Apache Software Foundation (ASF) under one\r\n- * or more contributor license agreements. See the NOTICE file\r\n- * distributed with this work for additional information\r\n- * regarding copyright ownership. The ASF licenses this file\r\n- * to you under the Apache License, Version 2.0 (the\r\n- * \"License\"); you may not use this file except in compliance\r\n- * with the License. You may obtain a copy of the License at\r\n- *\r\n- * http://www.apache.org/licenses/LICENSE-2.0\r\n- *\r\n- * Unless required by applicable law or agreed to in writing,\r\n- * software distributed under the License is distributed on an\r\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n- * KIND, either express or implied. See the License for the\r\n- * specific language governing permissions and limitations\r\n- * under the License.\r\n- */\r\n-package com.synopsys.integration.detectable.detectable.executable.impl;\r\n-\r\n-import java.io.File;\r\n-import java.util.Arrays;\r\n-import java.util.Collections;\r\n-import java.util.List;\r\n-import java.util.stream.Collectors;\r\n-\r\n-import org.antlr.v4.runtime.misc.Nullable;\r\n-\r\n-import com.synopsys.integration.detectable.detectable.file.FileFinder;\r\n-import com.synopsys.integration.util.OperatingSystemType;\r\n-\r\n-public class SimpleExecutableFinder {\r\n-    private final List<String> extensions;\r\n-    private final FileFinder fileFinder;\r\n-\r\n-    public static SimpleExecutableFinder forCurrentOperatingSystem(final FileFinder fileFinder) {\r\n-        return SimpleExecutableFinder.forOperatingSystem(OperatingSystemType.determineFromSystem(), fileFinder);\r\n-    }\r\n-\r\n-    public static SimpleExecutableFinder forOperatingSystem(final OperatingSystemType operatingSystemType, final FileFinder fileFinder) {\r\n-        if (operatingSystemType == OperatingSystemType.WINDOWS) {\r\n-            return new SimpleExecutableFinder(Arrays.asList(\".cmd\", \".bat\", \".exe\"), fileFinder);\r\n-        } else {\r\n-            return new SimpleExecutableFinder(Collections.emptyList(), fileFinder);\r\n-        }\r\n-    }\r\n-\r\n-    public SimpleExecutableFinder(final List<String> extensions, final FileFinder fileFinder) {\r\n-        this.extensions = extensions;\r\n-        this.fileFinder = fileFinder;\r\n-    }\r\n-\r\n-    private List<String> executablesFromName(final String name) {\r\n-        if (extensions.isEmpty()) {\r\n-            return Collections.singletonList(name);\r\n-        } else {\r\n-            return extensions.stream().map(ext -> name + ext).collect(Collectors.toList());\r\n-        }\r\n-    }\r\n-\r\n-    @Nullable\r\n-    public File findExecutable(final String executable, final File location) {\r\n-        return findExecutable(executable, Collections.singletonList(location));\r\n-    }\r\n-\r\n-    @Nullable\r\n-    public File findExecutable(final String executable, final List<File> locations) {\r\n-        final List<String> executables = executablesFromName(executable);\r\n-\r\n-        for (final File location : locations) {\r\n-            for (final String possibleExecutable : executables) {\r\n-                final File foundFile = fileFinder.findFile(location, possibleExecutable);\r\n-                if (foundFile != null && foundFile.exists() && foundFile.canExecute()) {\r\n-                    return foundFile;\r\n-                }\r\n-            }\r\n-        }\r\n-\r\n-        return null;\r\n-    }\r\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectable.executable.impl;\n+\n+import java.io.File;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.antlr.v4.runtime.misc.Nullable;\n+\n+import com.synopsys.integration.detectable.detectable.file.FileFinder;\n+import com.synopsys.integration.util.OperatingSystemType;\n+\n+public class SimpleExecutableFinder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a219435a0a296ad21421912831a05fe6041069f"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUyMDU3NQ==", "bodyText": "This change is unrelated and should be done on master.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/169#discussion_r435520575", "createdAt": "2020-06-04T20:10:07Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/pip/PipInspectorExtractor.java", "diffHunk": "@@ -35,8 +35,8 @@\n import com.synopsys.integration.detectable.detectable.codelocation.CodeLocation;\n import com.synopsys.integration.detectable.detectable.executable.ExecutableRunner;\n import com.synopsys.integration.detectable.detectable.executable.ExecutableRunnerException;\n-import com.synopsys.integration.detectable.detectables.pip.model.PipenvResult;\n import com.synopsys.integration.detectable.detectables.pip.parser.PipInspectorTreeParser;\n+import com.synopsys.integration.detectable.detectables.pip.model.PipenvResult;\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a219435a0a296ad21421912831a05fe6041069f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUyMTU2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    final List<String> goLockAsList = Files.readAllLines(cargoLock.toPath(), encoding);\n          \n          \n            \n                    return String.join(System.lineSeparator(), goLockAsList);\n          \n          \n            \n                    return FileUtils.readFileToString(cargoLock, encoding);", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/169#discussion_r435521569", "createdAt": "2020-06-04T20:11:57Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/pip/poetry/PoetryExtractor.java", "diffHunk": "@@ -0,0 +1,60 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.pip.poetry;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import com.synopsys.integration.bdio.graph.DependencyGraph;\n+import com.synopsys.integration.detectable.Extraction;\n+import com.synopsys.integration.detectable.detectable.codelocation.CodeLocation;\n+import com.synopsys.integration.detectable.detectables.pip.poetry.parser.PoetryLockParser;\n+\n+public class PoetryExtractor {\n+\n+    private final PoetryLockParser poetryLockParser;\n+\n+    public PoetryExtractor(final PoetryLockParser poetryLockParser) {\n+        this.poetryLockParser = poetryLockParser;\n+    }\n+\n+    public Extraction extract(File poetryLock) {\n+        try {\n+            final DependencyGraph graph = poetryLockParser.parseLockFile(getCargoLockAsString(poetryLock, StandardCharsets.UTF_8));\n+            final CodeLocation codeLocation = new CodeLocation(graph);\n+            return new Extraction.Builder().success(codeLocation).build();\n+        } catch (IOException e) {\n+            return new Extraction.Builder().exception(e).build();\n+        }\n+    }\n+\n+    private String getCargoLockAsString(File cargoLock, Charset encoding) throws IOException {\n+        final List<String> goLockAsList = Files.readAllLines(cargoLock.toPath(), encoding);\n+        return String.join(System.lineSeparator(), goLockAsList);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a219435a0a296ad21421912831a05fe6041069f"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUyMTkyMw==", "bodyText": "It doesn't seem like we need the Poetry executable.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/169#discussion_r435521923", "createdAt": "2020-06-04T20:12:36Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectable/executable/impl/SimpleExecutableResolver.java", "diffHunk": "@@ -134,6 +135,9 @@ public File resolvePipenv() {\n         return findCachedSystem(\"pipenv\");\n     }\n \n+    @Override\n+    public File resolvePoetry() { return findCachedSystem(\"poetry\"); }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a219435a0a296ad21421912831a05fe6041069f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUyMjUzMw==", "bodyText": "Same here \"Can you put this on multiple lines for consistency?\"", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/169#discussion_r435522533", "createdAt": "2020-06-04T20:13:53Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/factory/DetectableFactory.java", "diffHunk": "@@ -597,6 +602,8 @@ private PipInspectorExtractor pipInspectorExtractor() {\n         return new PipInspectorExtractor(executableRunner, pipInspectorTreeParser());\n     }\n \n+    private PoetryExtractor poetryExtractor() { return new PoetryExtractor(new PoetryLockParser()); }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a219435a0a296ad21421912831a05fe6041069f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUyMjc0MA==", "bodyText": "Can you put this on multiple lines for consistency?", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/169#discussion_r435522740", "createdAt": "2020-06-04T20:14:17Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/factory/DetectableFactory.java", "diffHunk": "@@ -351,6 +354,8 @@ public PodlockDetectable createPodLockDetectable(final DetectableEnvironment env\n         return new PodlockDetectable(environment, fileFinder, podlockExtractor());\n     }\n \n+    public PoetryDetectable createPoetryDetectable(final DetectableEnvironment environment) { return new PoetryDetectable(environment, fileFinder, poetryExtractor()); }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a219435a0a296ad21421912831a05fe6041069f"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUyMjk5MA==", "bodyText": "Unrelated changes.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/169#discussion_r435522990", "createdAt": "2020-06-04T20:14:48Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/test/java/com/synopsys/integration/detectable/detectables/pip/unit/PipenvFreezeParserTests.java", "diffHunk": "@@ -54,9 +54,9 @@ void findsThreeNamesAndVersions() {\n \n     private void assertContains(final String name, final String version, final PipFreeze pipFreeze) {\n         final Optional<PipFreezeEntry> found = pipFreeze.getEntries().stream()\n-                                             .filter(it -> it.getName().equals(name))\n-                                             .filter(it -> it.getVersion().equals(version))\n-                                             .findFirst();\n+                                                   .filter(it -> it.getName().equals(name))\n+                                                   .filter(it -> it.getVersion().equals(version))\n+                                                   .findFirst();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a219435a0a296ad21421912831a05fe6041069f"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUyNTI2OQ==", "bodyText": "Poetry uses unique files to queue off of. Since this is a python project, is there a change the other Python detectors are triggered to extract as well such as a requirements.txt?\nDoes it make sense to yield the other python detectors to poetry?", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/169#discussion_r435525269", "createdAt": "2020-06-04T20:19:22Z", "author": {"login": "JakeMathews"}, "path": "src/main/java/com/synopsys/integration/detect/tool/detector/DetectorRuleFactory.java", "diffHunk": "@@ -119,6 +120,7 @@ private DetectorRuleSet createRules(final DetectDetectableFactory detectableFact\n \n         final DetectorRule pipEnv = ruleSet.addDetector(DetectorType.PIP, \"Pip Env\", PipenvDetectable.class, detectableFactory::createPipenvDetectable).defaults().build();\n         final DetectorRule pipInspector = ruleSet.addDetector(DetectorType.PIP, \"Pip Inspector\", PipInspectorDetectable.class, detectableFactory::createPipInspectorDetectable).defaults().build();\n+        final DetectorRule poetry = ruleSet.addDetector(DetectorType.PIP, \"Poetry\", PoetryDetectable.class, detectableFactory::createPoetryDetectable).defaults().build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a219435a0a296ad21421912831a05fe6041069f"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUyNTQzMg==", "bodyText": "Consistency man!", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/169#discussion_r435525432", "createdAt": "2020-06-04T20:19:42Z", "author": {"login": "JakeMathews"}, "path": "src/main/java/com/synopsys/integration/detect/tool/detector/impl/DetectDetectableFactory.java", "diffHunk": "@@ -216,6 +217,8 @@ public PodlockDetectable createPodLockDetectable(final DetectableEnvironment env\n         return detectableFactory.createPodLockDetectable(environment);\n     }\n \n+    public PoetryDetectable createPoetryDetectable(final DetectableEnvironment environment) { return detectableFactory.createPoetryDetectable(environment); }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a219435a0a296ad21421912831a05fe6041069f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUyNTU2NA==", "bodyText": "Seems unrelated.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/169#discussion_r435525564", "createdAt": "2020-06-04T20:20:01Z", "author": {"login": "JakeMathews"}, "path": "src/main/java/com/synopsys/integration/detect/tool/detector/impl/DetectExecutableOptions.java", "diffHunk": "@@ -45,7 +45,8 @@\n     private final Path swiftUserPath;\n \n     public DetectExecutableOptions(final Path bashUserPath, final Path bazelUserPath, final Path condaUserPath, final Path cpanUserPath, final Path cpanmUserPath, final Path gradleUserPath, final Path mavenUserPath,\n-        final Path npmUserPath, final Path pearUserPath, final Path pipenvUserPath, final Path pythonUserPath, final Path rebarUserPath, final Path javaUserPath, final Path dockerUserPath, final Path dotnetUserPath,\n+        final Path npmUserPath, final Path pearUserPath, final Path pipenvUserPath, final Path pythonUserPath, final Path rebarUserPath, final Path javaUserPath, final Path dockerUserPath,\n+        final Path dotnetUserPath,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a219435a0a296ad21421912831a05fe6041069f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUyNTcxMw==", "bodyText": "Seems unrelated.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/169#discussion_r435525713", "createdAt": "2020-06-04T20:20:17Z", "author": {"login": "JakeMathews"}, "path": "src/main/java/com/synopsys/integration/detect/tool/detector/impl/DetectExecutableResolver.java", "diffHunk": "@@ -56,7 +56,8 @@\n import com.synopsys.integration.detectable.detectable.inspector.go.GoResolver;\n \n public class DetectExecutableResolver\n-    implements JavaResolver, GradleResolver, BashResolver, CondaResolver, CpanmResolver, CpanResolver, PearResolver, Rebar3Resolver, PythonResolver, PipResolver, PipenvResolver, MavenResolver, NpmResolver, BazelResolver, DockerResolver,\n+    implements JavaResolver, GradleResolver, BashResolver, CondaResolver, CpanmResolver, CpanResolver, PearResolver, Rebar3Resolver, PythonResolver, PipResolver, PipenvResolver, MavenResolver, NpmResolver, BazelResolver,\n+                   DockerResolver,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a219435a0a296ad21421912831a05fe6041069f"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUyNTg0NA==", "bodyText": "Seems unrelated.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/169#discussion_r435525844", "createdAt": "2020-06-04T20:20:32Z", "author": {"login": "JakeMathews"}, "path": "src/main/java/com/synopsys/integration/detect/workflow/codelocation/CodeLocationNameGenerator.java", "diffHunk": "@@ -127,7 +127,7 @@ private String cleanScanTargetPath(final File scanTargetPath, final File sourceP\n \n         final String finalSourcePathPiece = DetectFileUtils.extractFinalPieceFromPath(canonicalSourcePath);\n         String cleanedTargetPath = \"\";\n-         if (StringUtils.isNotBlank(canonicalTargetPath) && StringUtils.isNotBlank(finalSourcePathPiece)) {\n+        if (StringUtils.isNotBlank(canonicalTargetPath) && StringUtils.isNotBlank(finalSourcePathPiece)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0a219435a0a296ad21421912831a05fe6041069f"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "396eb64293141f7e09a02877e100e9b3c8988491", "author": {"user": {"login": "crowleySynopsys", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/396eb64293141f7e09a02877e100e9b3c8988491", "committedDate": "2020-06-05T14:27:29Z", "message": "Update detectable/src/main/java/com/synopsys/integration/detectable/detectables/pip/poetry/PoetryExtractor.java\n\nCo-authored-by: Jake Mathews <jake.mathews.email@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5fcf0330bfe32480a44719961bf349335802193", "author": {"user": {"login": "crowleySynopsys", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/e5fcf0330bfe32480a44719961bf349335802193", "committedDate": "2020-06-05T14:53:07Z", "message": "fix: Reverted unrelated spacing edits"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "641ea73a3a47eb3d2f3d5731262d51b91fc3615a", "author": {"user": {"login": "crowleySynopsys", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/641ea73a3a47eb3d2f3d5731262d51b91fc3615a", "committedDate": "2020-06-05T14:53:22Z", "message": "Merge branch 'poetryDetectable' of https://github.com/blackducksoftware/synopsys-detect into poetryDetectable"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a0f243ceac236366e7c947e270c1aab8802d07f", "author": {"user": {"login": "crowleySynopsys", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/9a0f243ceac236366e7c947e270c1aab8802d07f", "committedDate": "2020-06-05T14:56:32Z", "message": "fix: Removed accidentally committed detect.sh file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95c38f8a9c1acbf148df7fbfd13b2aba4de225ae", "author": {"user": {"login": "crowleySynopsys", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/95c38f8a9c1acbf148df7fbfd13b2aba4de225ae", "committedDate": "2020-06-05T15:03:25Z", "message": "fix: Reverted spacingchange in class declaration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c879d0b05091db06ce38a621a5c8e1968c29ccf", "author": {"user": {"login": "crowleySynopsys", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/1c879d0b05091db06ce38a621a5c8e1968c29ccf", "committedDate": "2020-06-05T15:07:10Z", "message": "fix: Reverted spacing change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8231ac777a195ca558793b7cb03fb347ad47ab66", "author": {"user": {"login": "crowleySynopsys", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/8231ac777a195ca558793b7cb03fb347ad47ab66", "committedDate": "2020-06-05T15:08:41Z", "message": "fix: Reverted spacing change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b6b92b591c224f2b77d30e1dbe945ee11cacbf5", "author": {"user": {"login": "crowleySynopsys", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/6b6b92b591c224f2b77d30e1dbe945ee11cacbf5", "committedDate": "2020-06-05T15:09:16Z", "message": "fix: Reverted spacing change"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69ebccdd97a1ff92e006b6e272451939a81bab57", "author": {"user": {"login": "crowleySynopsys", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/69ebccdd97a1ff92e006b6e272451939a81bab57", "committedDate": "2020-06-05T15:09:59Z", "message": "fix: Added newline to end of file"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c6c1447cfbbcf1777eab3fbdd1a27673a7667e6", "author": {"user": {"login": "crowleySynopsys", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/3c6c1447cfbbcf1777eab3fbdd1a27673a7667e6", "committedDate": "2020-06-08T15:03:23Z", "message": "fix: Merged master, resolved merge conflicts"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1MzczMzAz", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/169#pullrequestreview-425373303", "createdAt": "2020-06-05T14:52:53Z", "commit": {"oid": "396eb64293141f7e09a02877e100e9b3c8988491"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNDo1Mjo1M1rOGfx0Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNTo0MDoxNVrOGgkY2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk3NTIwMg==", "bodyText": "Since you only use this method once and it's so small, just use the FileUtils cod inline.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/169#discussion_r435975202", "createdAt": "2020-06-05T14:52:53Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/pip/poetry/PoetryExtractor.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.pip.poetry;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.util.List;\n+\n+import com.synopsys.integration.bdio.graph.DependencyGraph;\n+import com.synopsys.integration.detectable.Extraction;\n+import com.synopsys.integration.detectable.detectable.codelocation.CodeLocation;\n+import com.synopsys.integration.detectable.detectables.pip.poetry.parser.PoetryLockParser;\n+\n+public class PoetryExtractor {\n+\n+    private final PoetryLockParser poetryLockParser;\n+\n+    public PoetryExtractor(final PoetryLockParser poetryLockParser) {\n+        this.poetryLockParser = poetryLockParser;\n+    }\n+\n+    public Extraction extract(File poetryLock) {\n+        try {\n+            final DependencyGraph graph = poetryLockParser.parseLockFile(getCargoLockAsString(poetryLock, StandardCharsets.UTF_8));\n+            final CodeLocation codeLocation = new CodeLocation(graph);\n+            return new Extraction.Builder().success(codeLocation).build();\n+        } catch (IOException e) {\n+            return new Extraction.Builder().exception(e).build();\n+        }\n+    }\n+\n+    private String getCargoLockAsString(File cargoLock, Charset encoding) throws IOException {\n+        return FileUtils.readFileToString(cargoLock, encoding);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "396eb64293141f7e09a02877e100e9b3c8988491"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk4ODQ2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (dependencies == null || dependencies.isEmpty()) {\n          \n          \n            \n                        if (dependencies.isEmpty()) {\n          \n      \n    \n    \n  \n\ndependencies  will never be null.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/169#discussion_r435988466", "createdAt": "2020-06-05T15:14:31Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/pip/poetry/parser/PoetryLockParser.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.pip.poetry.parser;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.tomlj.Toml;\n+import org.tomlj.TomlArray;\n+import org.tomlj.TomlParseResult;\n+import org.tomlj.TomlTable;\n+\n+import com.synopsys.integration.bdio.graph.DependencyGraph;\n+import com.synopsys.integration.bdio.graph.MutableDependencyGraph;\n+import com.synopsys.integration.bdio.graph.MutableMapDependencyGraph;\n+import com.synopsys.integration.bdio.model.Forge;\n+import com.synopsys.integration.bdio.model.dependency.Dependency;\n+import com.synopsys.integration.bdio.model.externalid.ExternalId;\n+import com.synopsys.integration.bdio.model.externalid.ExternalIdFactory;\n+\n+public class PoetryLockParser {\n+\n+    private static final String NAME_KEY = \"name\";\n+    private static final String VERSION_KEY = \"version\";\n+    private static final String DEPENDENCIES_KEY = \"dependencies\";\n+    private static final String PACKAGE_KEY = \"package\";\n+\n+    private final ExternalIdFactory externalIdFactory = new ExternalIdFactory();\n+\n+    private final Map<String, Dependency> packageMap = new HashMap<>();\n+\n+    public DependencyGraph parseLockFile(String lockFile) {\n+        TomlParseResult result = Toml.parse(lockFile);\n+        if (result.get(PACKAGE_KEY) != null) {\n+            TomlArray lockPackages = result.getArray(PACKAGE_KEY);\n+            return parseDependencies(lockPackages);\n+        }\n+\n+        return new MutableMapDependencyGraph();\n+    }\n+\n+    private DependencyGraph parseDependencies(final TomlArray lockPackages) {\n+        MutableDependencyGraph graph = new MutableMapDependencyGraph();\n+\n+        Set<String> rootPackages = determineRootPackages(lockPackages);\n+\n+        for (final String rootPackage : rootPackages) {\n+            graph.addChildToRoot(packageMap.get(rootPackage));\n+        }\n+\n+        for (int i = 0; i < lockPackages.size(); i++) {\n+            TomlTable lockPackage = lockPackages.getTable(i);\n+            List<String> dependencies = extractFromDependencyList(lockPackage.getTable(DEPENDENCIES_KEY));\n+            if (dependencies == null || dependencies.isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a0f243ceac236366e7c947e270c1aab8802d07f"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTk4ODk1OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private List<String> extractFromDependencyList(TomlTable dependencyList) {\n          \n          \n            \n                private List<String> extractFromDependencyList(@Nullable TomlTable dependencyList) {", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/169#discussion_r435988958", "createdAt": "2020-06-05T15:15:15Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/pip/poetry/parser/PoetryLockParser.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/**\n+ * detectable\n+ *\n+ * Copyright (c) 2020 Synopsys, Inc.\n+ *\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package com.synopsys.integration.detectable.detectables.pip.poetry.parser;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.tomlj.Toml;\n+import org.tomlj.TomlArray;\n+import org.tomlj.TomlParseResult;\n+import org.tomlj.TomlTable;\n+\n+import com.synopsys.integration.bdio.graph.DependencyGraph;\n+import com.synopsys.integration.bdio.graph.MutableDependencyGraph;\n+import com.synopsys.integration.bdio.graph.MutableMapDependencyGraph;\n+import com.synopsys.integration.bdio.model.Forge;\n+import com.synopsys.integration.bdio.model.dependency.Dependency;\n+import com.synopsys.integration.bdio.model.externalid.ExternalId;\n+import com.synopsys.integration.bdio.model.externalid.ExternalIdFactory;\n+\n+public class PoetryLockParser {\n+\n+    private static final String NAME_KEY = \"name\";\n+    private static final String VERSION_KEY = \"version\";\n+    private static final String DEPENDENCIES_KEY = \"dependencies\";\n+    private static final String PACKAGE_KEY = \"package\";\n+\n+    private final ExternalIdFactory externalIdFactory = new ExternalIdFactory();\n+\n+    private final Map<String, Dependency> packageMap = new HashMap<>();\n+\n+    public DependencyGraph parseLockFile(String lockFile) {\n+        TomlParseResult result = Toml.parse(lockFile);\n+        if (result.get(PACKAGE_KEY) != null) {\n+            TomlArray lockPackages = result.getArray(PACKAGE_KEY);\n+            return parseDependencies(lockPackages);\n+        }\n+\n+        return new MutableMapDependencyGraph();\n+    }\n+\n+    private DependencyGraph parseDependencies(final TomlArray lockPackages) {\n+        MutableDependencyGraph graph = new MutableMapDependencyGraph();\n+\n+        Set<String> rootPackages = determineRootPackages(lockPackages);\n+\n+        for (final String rootPackage : rootPackages) {\n+            graph.addChildToRoot(packageMap.get(rootPackage));\n+        }\n+\n+        for (int i = 0; i < lockPackages.size(); i++) {\n+            TomlTable lockPackage = lockPackages.getTable(i);\n+            List<String> dependencies = extractFromDependencyList(lockPackage.getTable(DEPENDENCIES_KEY));\n+            if (dependencies == null || dependencies.isEmpty()) {\n+                continue;\n+            }\n+            for (final String dependency : dependencies) {\n+                Dependency child = packageMap.get(dependency);\n+                Dependency parent = packageMap.get(lockPackage.getString(NAME_KEY));\n+                if (child != null && parent != null) {\n+                    graph.addChildWithParent(child, parent);\n+                }\n+            }\n+        }\n+\n+        return graph;\n+    }\n+\n+    private Set<String> determineRootPackages(TomlArray lockPackages) {\n+        Set<String> rootPackages = new HashSet<>();\n+        Set<String> dependencyPackages = new HashSet<>();\n+\n+        for (int i = 0; i < lockPackages.size(); i++) {\n+            TomlTable lockPackage = lockPackages.getTable(i);\n+\n+            if (lockPackage != null) {\n+                final String projectName = lockPackage.getString(NAME_KEY);\n+                final String projectVersion = lockPackage.getString(VERSION_KEY);\n+\n+                packageMap.put(projectName, createPoetryDependency(projectName, projectVersion));\n+                rootPackages.add(projectName);\n+\n+                if (lockPackage.getTable(DEPENDENCIES_KEY) != null) {\n+                    List<String> dependencies = extractFromDependencyList(lockPackage.getTable(DEPENDENCIES_KEY));\n+                    dependencyPackages.addAll(dependencies);\n+                }\n+\n+            }\n+        }\n+        rootPackages.removeAll(dependencyPackages);\n+\n+        return rootPackages;\n+    }\n+\n+    private List<String> extractFromDependencyList(TomlTable dependencyList) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a0f243ceac236366e7c947e270c1aab8802d07f"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgwMzgwMA==", "bodyText": "New Detectors should go under the ### New features header.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/169#discussion_r436803800", "createdAt": "2020-06-08T15:40:15Z", "author": {"login": "JakeMathews"}, "path": "docs/templates/content/90-releasenotes.ftl", "diffHunk": "@@ -7,6 +7,9 @@\n * Eliminated any need for the ${blackduck_product_name} Global Code Scanner overall role.\n * The CLANG detector collects any dependency files not recognized by the Linux package manager that reside outside the source directory (the directory containing the compile_commands.json file),\n and writes them to the status.json file.\n+* Detect now supports projects managed by the Poetry package manager.\n+* Added the property [detect.blackduck.signature.scanner.copyright.search](../properties/configuration/signature scanner/#signature-scanner-copyright-search-advanced).\n+* Detect now supports projects managed by the Cargo package manager.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c6c1447cfbbcf1777eab3fbdd1a27673a7667e6"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3315, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}