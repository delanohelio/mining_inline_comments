{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA3NDA2OTMx", "number": 157, "title": "refactor(): Edits for sonarCloud critical code smells", "bodyText": "Description\nEdits for Critical code smells according to SonarCloud.  Included classes have what I consider to be reasonable test coverage, or the edits are minor enough that they pose no risk.", "createdAt": "2020-04-22T16:41:12Z", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/157", "merged": true, "mergeCommit": {"oid": "95afbeaf2e0c284e6336ffaf21de780fc14d63d9"}, "closed": true, "closedAt": "2020-04-24T21:43:23Z", "author": {"login": "crowleySynopsys"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZ7iOLAH2gAyNDA3NDA2OTMxOjA3ODhjZjJiNTBhZDdmM2FkMDU4MTZhODA3OWQxYjFhNjJjZmY5OGE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABca4jodgFqTQwMDI4Nzk1NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0788cf2b50ad7f3ad05816a8079d1b1a62cff98a", "author": {"user": {"login": "crowleySynopsys", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/0788cf2b50ad7f3ad05816a8079d1b1a62cff98a", "committedDate": "2020-04-21T22:35:58Z", "message": "refactor(): Edits for sonarCloud critical code smells"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "96145f931c8de874260bb6cfe301a0ddb3b81394", "author": {"user": {"login": "crowleySynopsys", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/96145f931c8de874260bb6cfe301a0ddb3b81394", "committedDate": "2020-04-22T18:45:24Z", "message": "fix(): Populated POLARIS_CLI_DEPRECATION_MESSAGE"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NDYwMTEw", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/157#pullrequestreview-398460110", "createdAt": "2020-04-22T18:22:45Z", "commit": {"oid": "0788cf2b50ad7f3ad05816a8079d1b1a62cff98a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxODoyMjo0NVrOGKEqyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxOTowMTo1NVrOGKGWDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIxNTQzMg==", "bodyText": "I'd like to see this and it's calling method to return Optional<SpringConfigurationPropertySource> since we are explicitly returning null in some cases. If refactoring it now will cause a lot of changes can you put in a TODO?", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/157#discussion_r413215432", "createdAt": "2020-04-22T18:22:45Z", "author": {"login": "JakeMathews"}, "path": "configuration/src/main/java/com/synopsys/integration/configuration/source/SpringConfigurationPropertySource.java", "diffHunk": "@@ -85,6 +74,21 @@ public SpringConfigurationPropertySource(final String name, final IterableConfig\n \n     }\n \n+    private static SpringConfigurationPropertySource getPropertySource(ConfigurableEnvironment configurableEnvironment, boolean ignoreUnknown, ConfigurationPropertySource configurationPropertySource) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0788cf2b50ad7f3ad05816a8079d1b1a62cff98a"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIxNjkxOQ==", "bodyText": "I'd argue these sample application classes should be removed. @taikuukaits is there value in maintaining these?", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/157#discussion_r413216919", "createdAt": "2020-04-22T18:25:02Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/SingleDetectableApplication.java", "diffHunk": "@@ -49,7 +47,9 @@\n //This sample application will an example detectable tool and execute it against the current folder.\n public class SingleDetectableApplication {\n     public static void main(final String[] args) {\n-\n+        /*\n+            Empty main method\n+         */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0788cf2b50ad7f3ad05816a8079d1b1a62cff98a"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIxNzU3Mg==", "bodyText": "With this many arguments, perhaps this needs more refactoring than just moving it to another method.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/157#discussion_r413217572", "createdAt": "2020-04-22T18:26:03Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectable/file/impl/SimpleFileFinder.java", "diffHunk": "@@ -44,22 +44,28 @@\n         }\n         final File[] allFiles = directoryToSearch.listFiles();\n         if (allFiles != null) {\n-            for (final File file : allFiles) {\n-                final boolean matches = filenameFilter.accept(directoryToSearch, file.getName());\n-                if (matches) {\n-                    foundFiles.add(file);\n-                }\n-                if (!matches || findInsideMatchingDirectories) {\n-                    if (file.isDirectory() && !Files.isSymbolicLink(file.toPath())) {\n-                        foundFiles.addAll(findFiles(file, filenameFilter, depth - 1, findInsideMatchingDirectories));\n-                    }\n-                }\n-            }\n+            foundFiles.addAll(extractFileMathces(allFiles, directoryToSearch, filenameFilter, depth, findInsideMatchingDirectories));\n         }\n \n         return foundFiles;\n     }\n \n+    private List<File> extractFileMathces(final File[] allFiles, final File directoryToSearch, final FilenameFilter filenameFilter, final int depth, final boolean findInsideMatchingDirectories) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0788cf2b50ad7f3ad05816a8079d1b1a62cff98a"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIxODY0Ng==", "bodyText": "Does this change the result of toString()?", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/157#discussion_r413218646", "createdAt": "2020-04-22T18:27:41Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/nuget/model/NugetContainer.java", "diffHunk": "@@ -56,6 +56,6 @@\n \n     @Override\n     public String toString() {\n-        return ReflectionToStringBuilder.toString(this, RecursiveToStringStyle.JSON_STYLE);\n+        return ReflectionToStringBuilder.toString(this, ToStringStyle.JSON_STYLE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0788cf2b50ad7f3ad05816a8079d1b1a62cff98a"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIzNTYxNw==", "bodyText": "Doing this will cause us to iterate over every line multiple times. Yarn.lock files very easily exceed 20k lines. Not sure what the performance impact this will cause, but that's why there was one loop before that would continue if the line didn't matter.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/157#discussion_r413235617", "createdAt": "2020-04-22T18:52:45Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/yarn/parse/YarnLockParser.java", "diffHunk": "@@ -73,6 +80,25 @@ public YarnLock parseYarnLock(final List<String> yarnLockFileAsList) {\n         return new YarnLock(entries);\n     }\n \n+    @NotNull\n+    private Integer getIndexOfFirstLevelZeroLine(final List<String> cleanedYarnLockFileAsList) {\n+        return cleanedYarnLockFileAsList\n+                   .stream()\n+                   .filter(this::isLevel0)\n+                   .findFirst()\n+                   .map(line -> cleanedYarnLockFileAsList.indexOf(line))\n+                   .orElse(-1);\n+    }\n+\n+    @NotNull\n+    private List<String> getCleaned(final List<String> yarnLockFileAsList) {\n+        return yarnLockFileAsList\n+                   .stream()\n+                   .filter(StringUtils::isNotBlank)\n+                   .filter(line -> !line.trim().startsWith(COMMENT_PREFIX))\n+                   .collect(Collectors.toList());\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96145f931c8de874260bb6cfe301a0ddb3b81394"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzIzNzIzNQ==", "bodyText": "I think null may mean no user input here. Can you just verify the code calling this isn't expecting a null.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/157#discussion_r413237235", "createdAt": "2020-04-22T18:55:11Z", "author": {"login": "JakeMathews"}, "path": "src/main/java/com/synopsys/integration/detect/interactive/mode/InteractiveMode.java", "diffHunk": "@@ -108,7 +108,7 @@ public Boolean askYesOrNoWithMessage(final String question, final String message\n             attempts += 1;\n             printStream.println(\"Please answer yes or no.\");\n         }\n-        return null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96145f931c8de874260bb6cfe301a0ddb3b81394"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI0MDQ1NA==", "bodyText": "Why was this not converted to\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (detectorToolResult.getFailedDetectorTypes().size() > 0) {\n          \n          \n            \n                        if (!detectorToolResult.getFailedDetectorTypes().isEmpty()) {\n          \n      \n    \n    \n  \n\nlike in DetectorEvaluator", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/157#discussion_r413240454", "createdAt": "2020-04-22T18:58:19Z", "author": {"login": "JakeMathews"}, "path": "src/main/java/com/synopsys/integration/detect/lifecycle/run/RunManager.java", "diffHunk": "@@ -235,10 +235,10 @@ private UniversalToolsResult runUniversalProjectTools(final PropertyConfiguratio\n             final DetectorTool detectorTool = new DetectorTool(new DetectorFinder(), extractionEnvironmentProvider, eventSystem, codeLocationConverter);\n             final DetectorToolResult detectorToolResult = detectorTool.performDetectors(directoryManager.getSourceDirectory(), detectRuleSet, finderOptions, detectorEvaluationOptions, projectBomTool, requiredDetectors);\n \n-            detectorToolResult.bomToolProjectNameVersion.ifPresent(it -> runResult.addToolNameVersion(DetectTool.DETECTOR, new NameVersion(it.getName(), it.getVersion())));\n-            runResult.addDetectCodeLocations(detectorToolResult.bomToolCodeLocations);\n+            detectorToolResult.getBomToolProjectNameVersion().ifPresent(it -> runResult.addToolNameVersion(DetectTool.DETECTOR, new NameVersion(it.getName(), it.getVersion())));\n+            runResult.addDetectCodeLocations(detectorToolResult.getBomToolCodeLocations());\n \n-            if (detectorToolResult.failedDetectorTypes.size() > 0) {\n+            if (detectorToolResult.getFailedDetectorTypes().size() > 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96145f931c8de874260bb6cfe301a0ddb3b81394"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI0MDk5NQ==", "bodyText": "This looks like an accidental side effect of the refactor.", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/157#discussion_r413240995", "createdAt": "2020-04-22T18:59:11Z", "author": {"login": "JakeMathews"}, "path": "src/main/java/com/synopsys/integration/detect/tool/detector/DetectorTool.java", "diffHunk": "@@ -77,20 +77,12 @@ public DetectorTool(final DetectorFinder detectorFinder, final ExtractionEnviron\n     public DetectorToolResult performDetectors(final File directory, final DetectorRuleSet detectorRuleSet, final DetectorFinderOptions detectorFinderOptions, final DetectorEvaluationOptions evaluationOptions, final String projectDetector,\n         final List<DetectorType> requiredDetectors)\n         throws DetectUserFriendlyException {\n-        logger.debug(\"Initializing detector system.\");\n-        final Optional<DetectorEvaluationTree> possibleRootEvaluation;\n-        try {\n-            logger.debug(\"Starting detector file system traversal.\");\n-            possibleRootEvaluation = detectorFinder.findDetectors(directory, detectorRuleSet, detectorFinderOptions);\n-\n-        } catch (final DetectorFinderDirectoryListException e) {\n-            throw new DetectUserFriendlyException(\"Detect was unable to list a directory while searching for detectors.\", e, ExitCodeType.FAILURE_DETECTOR);\n-        }\n+        Optional<DetectorEvaluationTree> possibleRootEvaluation = intializeDetectorSystem(directory, detectorRuleSet, detectorFinderOptions);\n \n         if (!possibleRootEvaluation.isPresent()) {\n             logger.error(\"The source directory could not be searched for detectors - detector tool failed.\");\n             logger.error(\"Please ensure the provided source path is a directory and detect has access.\");\n-            eventSystem.publishEvent(Event.ExitCode, new ExitCodeRequest(ExitCodeType.FAILURE_CONFIGURATION, \"Detector tool failed to run on the configured source path.\"));\n+            eventSystem.publishEvent(Event.ExitCode, new ExitCodeRequest(ExitCodeType.FAILURE_CONFIGURATION, \"DETECTOR tool failed to run on the configured source path.\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96145f931c8de874260bb6cfe301a0ddb3b81394"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzI0Mjg5Mw==", "bodyText": "If this is returning a ch.qos.logback.classic.Logger why are we using the logger name from slf4j?", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/157#discussion_r413242893", "createdAt": "2020-04-22T19:01:55Z", "author": {"login": "JakeMathews"}, "path": "src/main/java/com/synopsys/integration/detect/workflow/diagnostic/DiagnosticLogUtil.java", "diffHunk": "@@ -37,6 +35,6 @@\n     }\n \n     public static ch.qos.logback.classic.Logger getRootLogger() {\n-        return getLogger(ch.qos.logback.classic.Logger.ROOT_LOGGER_NAME);\n+        return getLogger(org.slf4j.Logger.ROOT_LOGGER_NAME);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96145f931c8de874260bb6cfe301a0ddb3b81394"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c8e79dc41c9a50f7b61d2bb87e7cc87e0d73f87", "author": {"user": {"login": "crowleySynopsys", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/5c8e79dc41c9a50f7b61d2bb87e7cc87e0d73f87", "committedDate": "2020-04-22T21:16:42Z", "message": "refactor(): Changed .size() > 0 to !isEmpty()"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b1e9c3fd3426c77326cef92bd3640fc251e831f8", "author": {"user": {"login": "crowleySynopsys", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/b1e9c3fd3426c77326cef92bd3640fc251e831f8", "committedDate": "2020-04-22T21:20:26Z", "message": "refactor(): Uncapitalized DETECTOR"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68613e6a6c6e03d75cb76e6f21593207895348d2", "author": {"user": {"login": "crowleySynopsys", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/68613e6a6c6e03d75cb76e6f21593207895348d2", "committedDate": "2020-04-23T20:56:15Z", "message": "refactor: Reversed extraction of for loop into a private method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7822f3d3945588d3cdc76256f05c06ca5a77e082", "author": {"user": {"login": "crowleySynopsys", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/7822f3d3945588d3cdc76256f05c06ca5a77e082", "committedDate": "2020-04-24T15:45:53Z", "message": "refactor: Changed names of private methods to no longer sound like getters"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMjcwODUw", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/157#pullrequestreview-400270850", "createdAt": "2020-04-24T21:06:45Z", "commit": {"oid": "7822f3d3945588d3cdc76256f05c06ca5a77e082"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMTowNjo0NVrOGLpQVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNFQyMTowNzoxMlrOGLpRJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg2MzQ0Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                               .filter(this::isLevel0)\n          \n          \n            \n                               .filter(line -> countIndent(line) == 0)", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/157#discussion_r414863447", "createdAt": "2020-04-24T21:06:45Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/yarn/parse/YarnLockParser.java", "diffHunk": "@@ -73,6 +80,25 @@ public YarnLock parseYarnLock(final List<String> yarnLockFileAsList) {\n         return new YarnLock(entries);\n     }\n \n+    @NotNull\n+    private Integer findIndexOfFirstLevelZeroLine(final List<String> cleanedYarnLockFileAsList) {\n+        return cleanedYarnLockFileAsList\n+                   .stream()\n+                   .filter(this::isLevel0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7822f3d3945588d3cdc76256f05c06ca5a77e082"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNDg2MzY1NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \n          \n          \n            \n                private boolean isLevel0(String line) {\n          \n          \n            \n                    int level = countIndent(line);\n          \n          \n            \n                    return level == 0;\n          \n          \n            \n                }", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/157#discussion_r414863655", "createdAt": "2020-04-24T21:07:12Z", "author": {"login": "JakeMathews"}, "path": "detectable/src/main/java/com/synopsys/integration/detectable/detectables/yarn/parse/YarnLockParser.java", "diffHunk": "@@ -115,8 +141,13 @@ public YarnLockEntryId parseSingleEntry(String entry) {\n         }\n     }\n \n-    private String getVersionFromLine(final String line) {\n+    private String parseVersionFromLine(final String line) {\n         final String rawVersion = line.substring(VERSION_PREFIX.length(), line.lastIndexOf(VERSION_SUFFIX));\n         return removeWrappingQuotes(rawVersion);\n     }\n-}\n+\n+    private boolean isLevel0(String line) {\n+        int level = countIndent(line);\n+        return level == 0;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7822f3d3945588d3cdc76256f05c06ca5a77e082"}, "originalPosition": 118}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9407d8574f34732ec38d4a0859fb142a34c64a21", "author": {"user": {"login": "crowleySynopsys", "name": null}}, "url": "https://github.com/blackducksoftware/synopsys-detect/commit/9407d8574f34732ec38d4a0859fb142a34c64a21", "committedDate": "2020-04-24T21:36:43Z", "message": "refactor: Reverted DetectorTool and DetectorToolResult to original state"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwMjg3OTU0", "url": "https://github.com/blackducksoftware/synopsys-detect/pull/157#pullrequestreview-400287954", "createdAt": "2020-04-24T21:41:43Z", "commit": {"oid": "9407d8574f34732ec38d4a0859fb142a34c64a21"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3302, "cost": 1, "resetAt": "2021-11-01T13:07:16Z"}}}