{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM3OTgwMDQ2", "number": 10363, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjowMTo1M1rOEHos2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDoyNzoyNlrOEIY_6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDQyMzI4OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/ssl/ApplicationProtocolNegotiationHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjowMTo1M1rOGnHPqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjowMTo1M1rOGnHPqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY2NjM0Nw==", "bodyText": "possible class cast exception?", "url": "https://github.com/netty/netty/pull/10363#discussion_r443666347", "createdAt": "2020-06-22T16:01:53Z", "author": {"login": "johnou"}, "path": "handler/src/main/java/io/netty/handler/ssl/ApplicationProtocolNegotiationHandler.java", "diffHunk": "@@ -78,30 +81,33 @@ protected ApplicationProtocolNegotiationHandler(String fallbackProtocol) {\n \n     @Override\n     public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n-        if (evt instanceof SslHandshakeCompletionEvent) {\n-\n-            try {\n-                SslHandshakeCompletionEvent handshakeEvent = (SslHandshakeCompletionEvent) evt;\n-                if (handshakeEvent.isSuccess()) {\n-                    SslHandler sslHandler = ctx.pipeline().get(SslHandler.class);\n-                    if (sslHandler == null) {\n-                        throw new IllegalStateException(\"cannot find an SslHandler in the pipeline (required for \"\n-                                + \"application-level protocol negotiation)\");\n-                    }\n-                    String protocol = sslHandler.applicationProtocol();\n-                    configurePipeline(ctx, protocol != null ? protocol : fallbackProtocol);\n-                } else {\n-                    handshakeFailure(ctx, handshakeEvent.cause());\n-                }\n-            } catch (Throwable cause) {\n-                exceptionCaught(ctx, cause);\n-            } finally {\n-                ChannelPipeline pipeline = ctx.pipeline();\n-                if (pipeline.context(this) != null) {\n-                    pipeline.remove(this);\n+        SslHandshakeCompletionEvent handshakeEvent = (SslHandshakeCompletionEvent) evt;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57c8833e6e2d32064dc5b2af6ce2cee48cb724d0"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDQ3NTA3OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/ssl/ApplicationProtocolNegotiationHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjoxNTowNVrOGnHwBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjoxNTowNVrOGnHwBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3NDYzMQ==", "bodyText": "propagate", "url": "https://github.com/netty/netty/pull/10363#discussion_r443674631", "createdAt": "2020-06-22T16:15:05Z", "author": {"login": "johnou"}, "path": "handler/src/main/java/io/netty/handler/ssl/ApplicationProtocolNegotiationHandler.java", "diffHunk": "@@ -91,17 +93,23 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc\n                     String protocol = sslHandler.applicationProtocol();\n                     configurePipeline(ctx, protocol != null ? protocol : fallbackProtocol);\n                 } else {\n-                    handshakeFailure(ctx, handshakeEvent.cause());\n+                    // if the event is not produced because of an successful handshake we will receive the same exception\n+                    // in exceptionCaught(...) and handle it there. This will allow us more fine-granted control over\n+                    // which exception we propergate down the ChannelPipeline.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e774406455530a0406146d5c20ecee80f02364cb"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NDQ3ODk4OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/ssl/ApplicationProtocolNegotiationHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjoxNjoxM1rOGnHyiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxNjoxNjoxM1rOGnHyiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzY3NTI3NQ==", "bodyText": "cannot be reused?", "url": "https://github.com/netty/netty/pull/10363#discussion_r443675275", "createdAt": "2020-06-22T16:16:13Z", "author": {"login": "johnou"}, "path": "handler/src/main/java/io/netty/handler/ssl/ApplicationProtocolNegotiationHandler.java", "diffHunk": "@@ -125,6 +133,18 @@ protected void handshakeFailure(ChannelHandlerContext ctx, Throwable cause) thro\n \n     @Override\n     public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n+        Throwable wrapped;\n+        if (cause instanceof DecoderException && ((wrapped = cause.getCause()) instanceof SSLException)) {\n+            try {\n+                handshakeFailure(ctx, wrapped);\n+                return;\n+            } finally {\n+                ChannelPipeline pipeline = ctx.pipeline();\n+                if (pipeline.context(this) != null) {\n+                    pipeline.remove(this);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e774406455530a0406146d5c20ecee80f02364cb"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NTAxNDg5OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/ssl/ApplicationProtocolNegotiationHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODo1NjowMVrOGnNGqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxODo1NjowMVrOGnNGqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mzc2MjM0NA==", "bodyText": "This line is exceeding 120 characters' length threshold.", "url": "https://github.com/netty/netty/pull/10363#discussion_r443762344", "createdAt": "2020-06-22T18:56:01Z", "author": {"login": "hyperxpro"}, "path": "handler/src/main/java/io/netty/handler/ssl/ApplicationProtocolNegotiationHandler.java", "diffHunk": "@@ -91,17 +93,23 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc\n                     String protocol = sslHandler.applicationProtocol();\n                     configurePipeline(ctx, protocol != null ? protocol : fallbackProtocol);\n                 } else {\n-                    handshakeFailure(ctx, handshakeEvent.cause());\n+                    // if the event is not produced because of an successful handshake we will receive the same exception", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e774406455530a0406146d5c20ecee80f02364cb"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzEyMjY2OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/ssl/ApplicationProtocolNegotiationHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTo0MDozN1rOGnhfoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QwOTo0MzozMVrOGnhmFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5NjQxNw==", "bodyText": "static?", "url": "https://github.com/netty/netty/pull/10363#discussion_r444096417", "createdAt": "2020-06-23T09:40:37Z", "author": {"login": "johnou"}, "path": "handler/src/main/java/io/netty/handler/ssl/ApplicationProtocolNegotiationHandler.java", "diffHunk": "@@ -93,26 +93,31 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc\n                     String protocol = sslHandler.applicationProtocol();\n                     configurePipeline(ctx, protocol != null ? protocol : fallbackProtocol);\n                 } else {\n-                    // if the event is not produced because of an successful handshake we will receive the same exception\n-                    // in exceptionCaught(...) and handle it there. This will allow us more fine-granted control over\n-                    // which exception we propergate down the ChannelPipeline.\n+                    // if the event is not produced because of an successful handshake we will receive the same\n+                    // exception in exceptionCaught(...) and handle it there. This will allow us more fine-grained\n+                    // control over which exception we propagate down the ChannelPipeline.\n                     //\n                     // See https://github.com/netty/netty/issues/10342\n                 }\n             } catch (Throwable cause) {\n                 exceptionCaught(ctx, cause);\n             } finally {\n-                ChannelPipeline pipeline = ctx.pipeline();\n                 // Handshake failures are handled in exceptionCaught(...).\n-                if (handshakeEvent.isSuccess() && pipeline.context(this) != null) {\n-                    pipeline.remove(this);\n+                if (handshakeEvent.isSuccess()) {\n+                    removeSelfIfPresent(ctx);\n                 }\n             }\n         }\n \n         ctx.fireUserEventTriggered(evt);\n     }\n \n+    private void removeSelfIfPresent(ChannelHandlerContext ctx) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "995de7e86111d0c6daeb2ebd3f2a5de268147504"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5ODA3MQ==", "bodyText": "nope ... it uses this", "url": "https://github.com/netty/netty/pull/10363#discussion_r444098071", "createdAt": "2020-06-23T09:43:31Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/ssl/ApplicationProtocolNegotiationHandler.java", "diffHunk": "@@ -93,26 +93,31 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc\n                     String protocol = sslHandler.applicationProtocol();\n                     configurePipeline(ctx, protocol != null ? protocol : fallbackProtocol);\n                 } else {\n-                    // if the event is not produced because of an successful handshake we will receive the same exception\n-                    // in exceptionCaught(...) and handle it there. This will allow us more fine-granted control over\n-                    // which exception we propergate down the ChannelPipeline.\n+                    // if the event is not produced because of an successful handshake we will receive the same\n+                    // exception in exceptionCaught(...) and handle it there. This will allow us more fine-grained\n+                    // control over which exception we propagate down the ChannelPipeline.\n                     //\n                     // See https://github.com/netty/netty/issues/10342\n                 }\n             } catch (Throwable cause) {\n                 exceptionCaught(ctx, cause);\n             } finally {\n-                ChannelPipeline pipeline = ctx.pipeline();\n                 // Handshake failures are handled in exceptionCaught(...).\n-                if (handshakeEvent.isSuccess() && pipeline.context(this) != null) {\n-                    pipeline.remove(this);\n+                if (handshakeEvent.isSuccess()) {\n+                    removeSelfIfPresent(ctx);\n                 }\n             }\n         }\n \n         ctx.fireUserEventTriggered(evt);\n     }\n \n+    private void removeSelfIfPresent(ChannelHandlerContext ctx) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDA5NjQxNw=="}, "originalCommit": {"oid": "995de7e86111d0c6daeb2ebd3f2a5de268147504"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzU0MjgxOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/ssl/ApplicationProtocolNegotiationHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMTo1MDoxM1rOGnlmvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMTo1MDoxM1rOGnlmvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDE2Mzc3NQ==", "bodyText": "\ud83d\udc41\ufe0f", "url": "https://github.com/netty/netty/pull/10363#discussion_r444163775", "createdAt": "2020-06-23T11:50:13Z", "author": {"login": "johnou"}, "path": "handler/src/main/java/io/netty/handler/ssl/ApplicationProtocolNegotiationHandler.java", "diffHunk": "@@ -79,32 +82,43 @@ protected ApplicationProtocolNegotiationHandler(String fallbackProtocol) {\n     @Override\n     public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exception {\n         if (evt instanceof SslHandshakeCompletionEvent) {\n-\n+            SslHandshakeCompletionEvent handshakeEvent = (SslHandshakeCompletionEvent) evt;\n             try {\n-                SslHandshakeCompletionEvent handshakeEvent = (SslHandshakeCompletionEvent) evt;\n                 if (handshakeEvent.isSuccess()) {\n                     SslHandler sslHandler = ctx.pipeline().get(SslHandler.class);\n                     if (sslHandler == null) {\n+                        System.err.println(ctx.pipeline().toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c41a6a63cc271eedb690898b82d77c30bf61f155"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjMzNjQxOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/ssl/ApplicationProtocolNegotiationHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDoyNzoyNlrOGoUqQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNDozNDo0NFrOGoVA9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkzNDcyMg==", "bodyText": "@normanmaurer tbh I would remove the isSuccess check, I think it would be safer to always attempt to remove the handler from the pipeline, what if an exception is not thrown but handshake event is false?", "url": "https://github.com/netty/netty/pull/10363#discussion_r444934722", "createdAt": "2020-06-24T14:27:26Z", "author": {"login": "johnou"}, "path": "handler/src/main/java/io/netty/handler/ssl/ApplicationProtocolNegotiationHandler.java", "diffHunk": "@@ -91,20 +93,31 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc\n                     String protocol = sslHandler.applicationProtocol();\n                     configurePipeline(ctx, protocol != null ? protocol : fallbackProtocol);\n                 } else {\n-                    handshakeFailure(ctx, handshakeEvent.cause());\n+                    // if the event is not produced because of an successful handshake we will receive the same\n+                    // exception in exceptionCaught(...) and handle it there. This will allow us more fine-grained\n+                    // control over which exception we propagate down the ChannelPipeline.\n+                    //\n+                    // See https://github.com/netty/netty/issues/10342\n                 }\n             } catch (Throwable cause) {\n                 exceptionCaught(ctx, cause);\n             } finally {\n-                ChannelPipeline pipeline = ctx.pipeline();\n-                if (pipeline.context(this) != null) {\n-                    pipeline.remove(this);\n+                // Handshake failures are handled in exceptionCaught(...).\n+                if (handshakeEvent.isSuccess()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "181aa62ea7d3180feccca3328c67af86492bf953"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk0MDUzNA==", "bodyText": "thats impossible I think", "url": "https://github.com/netty/netty/pull/10363#discussion_r444940534", "createdAt": "2020-06-24T14:34:44Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/ssl/ApplicationProtocolNegotiationHandler.java", "diffHunk": "@@ -91,20 +93,31 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc\n                     String protocol = sslHandler.applicationProtocol();\n                     configurePipeline(ctx, protocol != null ? protocol : fallbackProtocol);\n                 } else {\n-                    handshakeFailure(ctx, handshakeEvent.cause());\n+                    // if the event is not produced because of an successful handshake we will receive the same\n+                    // exception in exceptionCaught(...) and handle it there. This will allow us more fine-grained\n+                    // control over which exception we propagate down the ChannelPipeline.\n+                    //\n+                    // See https://github.com/netty/netty/issues/10342\n                 }\n             } catch (Throwable cause) {\n                 exceptionCaught(ctx, cause);\n             } finally {\n-                ChannelPipeline pipeline = ctx.pipeline();\n-                if (pipeline.context(this) != null) {\n-                    pipeline.remove(this);\n+                // Handshake failures are handled in exceptionCaught(...).\n+                if (handshakeEvent.isSuccess()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDkzNDcyMg=="}, "originalCommit": {"oid": "181aa62ea7d3180feccca3328c67af86492bf953"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3821, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}