{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQwMjU1MDA5", "number": 10866, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzozNjozN1rOFFl10w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzo0NzoyMFrOFFmK4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDA3MTg3OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/io/netty/util/internal/logging/InternalLoggerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzozNjozN1rOIGLNkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzozNjozN1rOIGLNkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM0NjA2NQ==", "bodyText": "Missing line break", "url": "https://github.com/netty/netty/pull/10866#discussion_r543346065", "createdAt": "2020-12-15T13:36:37Z", "author": {"login": "chrisvest"}, "path": "common/src/main/java/io/netty/util/internal/logging/InternalLoggerFactory.java", "diffHunk": "@@ -39,24 +39,62 @@\n \n     @SuppressWarnings(\"UnusedCatchParameter\")\n     private static InternalLoggerFactory newDefaultFactory(String name) {\n-        InternalLoggerFactory f;\n+        InternalLoggerFactory f = useSlf4JLoggerFactory(name);\n+        if (f != null) {\n+            return f;\n+        }\n+\n+        f = useLog4J2LoggerFactory(name);\n+        if (f != null) {\n+            return f;\n+        }\n+\n+        f = useLog4JLoggerFactory(name);\n+        if (f != null) {\n+            return f;\n+        }\n+\n+        return useJdkLoggerFactory(name);\n+    }\n+\n+    private static InternalLoggerFactory useSlf4JLoggerFactory(String name) {\n         try {\n-            f = new Slf4JLoggerFactory(true);\n+            InternalLoggerFactory f = new Slf4JLoggerFactory(true);\n             f.newInstance(name).debug(\"Using SLF4J as the default logging framework\");\n-        } catch (Throwable ignore1) {\n-            try {\n-                f = Log4J2LoggerFactory.INSTANCE;\n-                f.newInstance(name).debug(\"Using Log4J2 as the default logging framework\");\n-            } catch (Throwable ignore2) {\n-                try {\n-                    f = Log4JLoggerFactory.INSTANCE;\n-                    f.newInstance(name).debug(\"Using Log4J as the default logging framework\");\n-                } catch (Throwable ignore3) {\n-                    f = JdkLoggerFactory.INSTANCE;\n-                    f.newInstance(name).debug(\"Using java.util.logging as the default logging framework\");\n-                }\n-            }\n+            return f;\n+        } catch (LinkageError ignore) {\n+            return null;\n+        } catch (Exception ignore) {\n+            return null;\n         }\n+    }\n+    private static InternalLoggerFactory useLog4J2LoggerFactory(String name) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "929de2c76f054db9fde31a9bcf1edf5df8db3cc4"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQxNDEyNTc3OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/io/netty/util/internal/logging/InternalLoggerFactory.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxMzo0NzoyMFrOIGLsfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQxNDowNjo0OFrOIGMnWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM1Mzk4MQ==", "bodyText": "This can catch the more specific (ReflectiveOperationException | SecurityException ignore) unless for some reason Slf4JLoggerFactory is throwing java.lang.Exception.", "url": "https://github.com/netty/netty/pull/10866#discussion_r543353981", "createdAt": "2020-12-15T13:47:20Z", "author": {"login": "elharo"}, "path": "common/src/main/java/io/netty/util/internal/logging/InternalLoggerFactory.java", "diffHunk": "@@ -39,24 +39,62 @@\n \n     @SuppressWarnings(\"UnusedCatchParameter\")\n     private static InternalLoggerFactory newDefaultFactory(String name) {\n-        InternalLoggerFactory f;\n+        InternalLoggerFactory f = useSlf4JLoggerFactory(name);\n+        if (f != null) {\n+            return f;\n+        }\n+\n+        f = useLog4J2LoggerFactory(name);\n+        if (f != null) {\n+            return f;\n+        }\n+\n+        f = useLog4JLoggerFactory(name);\n+        if (f != null) {\n+            return f;\n+        }\n+\n+        return useJdkLoggerFactory(name);\n+    }\n+\n+    private static InternalLoggerFactory useSlf4JLoggerFactory(String name) {\n         try {\n-            f = new Slf4JLoggerFactory(true);\n+            InternalLoggerFactory f = new Slf4JLoggerFactory(true);\n             f.newInstance(name).debug(\"Using SLF4J as the default logging framework\");\n-        } catch (Throwable ignore1) {\n-            try {\n-                f = Log4J2LoggerFactory.INSTANCE;\n-                f.newInstance(name).debug(\"Using Log4J2 as the default logging framework\");\n-            } catch (Throwable ignore2) {\n-                try {\n-                    f = Log4JLoggerFactory.INSTANCE;\n-                    f.newInstance(name).debug(\"Using Log4J as the default logging framework\");\n-                } catch (Throwable ignore3) {\n-                    f = JdkLoggerFactory.INSTANCE;\n-                    f.newInstance(name).debug(\"Using java.util.logging as the default logging framework\");\n-                }\n-            }\n+            return f;\n+        } catch (LinkageError ignore) {\n+            return null;\n+        } catch (Exception ignore) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "929de2c76f054db9fde31a9bcf1edf5df8db3cc4"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM1NTY4NQ==", "bodyText": "@elharo I did decide to use Exception as ReflectiveOperationeException not exists in JDK6 :/", "url": "https://github.com/netty/netty/pull/10866#discussion_r543355685", "createdAt": "2020-12-15T13:49:41Z", "author": {"login": "normanmaurer"}, "path": "common/src/main/java/io/netty/util/internal/logging/InternalLoggerFactory.java", "diffHunk": "@@ -39,24 +39,62 @@\n \n     @SuppressWarnings(\"UnusedCatchParameter\")\n     private static InternalLoggerFactory newDefaultFactory(String name) {\n-        InternalLoggerFactory f;\n+        InternalLoggerFactory f = useSlf4JLoggerFactory(name);\n+        if (f != null) {\n+            return f;\n+        }\n+\n+        f = useLog4J2LoggerFactory(name);\n+        if (f != null) {\n+            return f;\n+        }\n+\n+        f = useLog4JLoggerFactory(name);\n+        if (f != null) {\n+            return f;\n+        }\n+\n+        return useJdkLoggerFactory(name);\n+    }\n+\n+    private static InternalLoggerFactory useSlf4JLoggerFactory(String name) {\n         try {\n-            f = new Slf4JLoggerFactory(true);\n+            InternalLoggerFactory f = new Slf4JLoggerFactory(true);\n             f.newInstance(name).debug(\"Using SLF4J as the default logging framework\");\n-        } catch (Throwable ignore1) {\n-            try {\n-                f = Log4J2LoggerFactory.INSTANCE;\n-                f.newInstance(name).debug(\"Using Log4J2 as the default logging framework\");\n-            } catch (Throwable ignore2) {\n-                try {\n-                    f = Log4JLoggerFactory.INSTANCE;\n-                    f.newInstance(name).debug(\"Using Log4J as the default logging framework\");\n-                } catch (Throwable ignore3) {\n-                    f = JdkLoggerFactory.INSTANCE;\n-                    f.newInstance(name).debug(\"Using java.util.logging as the default logging framework\");\n-                }\n-            }\n+            return f;\n+        } catch (LinkageError ignore) {\n+            return null;\n+        } catch (Exception ignore) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM1Mzk4MQ=="}, "originalCommit": {"oid": "929de2c76f054db9fde31a9bcf1edf5df8db3cc4"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM2NTAwNA==", "bodyText": "Netty still supports JDK 6? Impressive. In that case, please add a comment to that effect here for anyone who reads this code in the future. And then LGTM.", "url": "https://github.com/netty/netty/pull/10866#discussion_r543365004", "createdAt": "2020-12-15T14:01:50Z", "author": {"login": "elharo"}, "path": "common/src/main/java/io/netty/util/internal/logging/InternalLoggerFactory.java", "diffHunk": "@@ -39,24 +39,62 @@\n \n     @SuppressWarnings(\"UnusedCatchParameter\")\n     private static InternalLoggerFactory newDefaultFactory(String name) {\n-        InternalLoggerFactory f;\n+        InternalLoggerFactory f = useSlf4JLoggerFactory(name);\n+        if (f != null) {\n+            return f;\n+        }\n+\n+        f = useLog4J2LoggerFactory(name);\n+        if (f != null) {\n+            return f;\n+        }\n+\n+        f = useLog4JLoggerFactory(name);\n+        if (f != null) {\n+            return f;\n+        }\n+\n+        return useJdkLoggerFactory(name);\n+    }\n+\n+    private static InternalLoggerFactory useSlf4JLoggerFactory(String name) {\n         try {\n-            f = new Slf4JLoggerFactory(true);\n+            InternalLoggerFactory f = new Slf4JLoggerFactory(true);\n             f.newInstance(name).debug(\"Using SLF4J as the default logging framework\");\n-        } catch (Throwable ignore1) {\n-            try {\n-                f = Log4J2LoggerFactory.INSTANCE;\n-                f.newInstance(name).debug(\"Using Log4J2 as the default logging framework\");\n-            } catch (Throwable ignore2) {\n-                try {\n-                    f = Log4JLoggerFactory.INSTANCE;\n-                    f.newInstance(name).debug(\"Using Log4J as the default logging framework\");\n-                } catch (Throwable ignore3) {\n-                    f = JdkLoggerFactory.INSTANCE;\n-                    f.newInstance(name).debug(\"Using java.util.logging as the default logging framework\");\n-                }\n-            }\n+            return f;\n+        } catch (LinkageError ignore) {\n+            return null;\n+        } catch (Exception ignore) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM1Mzk4MQ=="}, "originalCommit": {"oid": "929de2c76f054db9fde31a9bcf1edf5df8db3cc4"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM2OTA0OQ==", "bodyText": "yes ... unfortunally we do :/", "url": "https://github.com/netty/netty/pull/10866#discussion_r543369049", "createdAt": "2020-12-15T14:06:48Z", "author": {"login": "normanmaurer"}, "path": "common/src/main/java/io/netty/util/internal/logging/InternalLoggerFactory.java", "diffHunk": "@@ -39,24 +39,62 @@\n \n     @SuppressWarnings(\"UnusedCatchParameter\")\n     private static InternalLoggerFactory newDefaultFactory(String name) {\n-        InternalLoggerFactory f;\n+        InternalLoggerFactory f = useSlf4JLoggerFactory(name);\n+        if (f != null) {\n+            return f;\n+        }\n+\n+        f = useLog4J2LoggerFactory(name);\n+        if (f != null) {\n+            return f;\n+        }\n+\n+        f = useLog4JLoggerFactory(name);\n+        if (f != null) {\n+            return f;\n+        }\n+\n+        return useJdkLoggerFactory(name);\n+    }\n+\n+    private static InternalLoggerFactory useSlf4JLoggerFactory(String name) {\n         try {\n-            f = new Slf4JLoggerFactory(true);\n+            InternalLoggerFactory f = new Slf4JLoggerFactory(true);\n             f.newInstance(name).debug(\"Using SLF4J as the default logging framework\");\n-        } catch (Throwable ignore1) {\n-            try {\n-                f = Log4J2LoggerFactory.INSTANCE;\n-                f.newInstance(name).debug(\"Using Log4J2 as the default logging framework\");\n-            } catch (Throwable ignore2) {\n-                try {\n-                    f = Log4JLoggerFactory.INSTANCE;\n-                    f.newInstance(name).debug(\"Using Log4J as the default logging framework\");\n-                } catch (Throwable ignore3) {\n-                    f = JdkLoggerFactory.INSTANCE;\n-                    f.newInstance(name).debug(\"Using java.util.logging as the default logging framework\");\n-                }\n-            }\n+            return f;\n+        } catch (LinkageError ignore) {\n+            return null;\n+        } catch (Exception ignore) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzM1Mzk4MQ=="}, "originalCommit": {"oid": "929de2c76f054db9fde31a9bcf1edf5df8db3cc4"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3564, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}