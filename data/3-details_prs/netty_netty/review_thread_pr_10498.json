{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyMzQ0MTUz", "number": 10498, "reviewThreads": {"totalCount": 95, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowMjowM1rOEbhFdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNzozNzozOVrOEh_XNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjg5MDc5OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/packet/UDPPacket.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowMjowM1rOHFfgBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTozNDo1M1rOHFgdqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyMTAyOQ==", "bodyText": "nit:  I think the method name is a bit misleading as we not really create a packet but we write it to the given ByteBuf. So consider to rename the method and use void as the return method to make it clear it not creates a new ByteBuf.\nSame comment is true for all the other places in the code with the same pattern", "url": "https://github.com/netty/netty/pull/10498#discussion_r475521029", "createdAt": "2020-08-24T11:02:03Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/packet/UDPPacket.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap.packet;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+public final class UDPPacket {\n+\n+    /**\n+     * Create UDP Packet\n+     *\n+     * @param byteBuf ByteBuf where Packet data will be set\n+     * @param payload Payload of this Packet\n+     * @param srcPort Source Port\n+     * @param dstPort Destination Port\n+     */\n+    public static ByteBuf createPacket(ByteBuf byteBuf, ByteBuf payload, int srcPort, int dstPort) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55b652803517ac9bb2fea5eff85a5ff34af59dd7"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUzNjgxMQ==", "bodyText": "Done", "url": "https://github.com/netty/netty/pull/10498#discussion_r475536811", "createdAt": "2020-08-24T11:34:53Z", "author": {"login": "hyperxpro"}, "path": "handler/src/main/java/io/netty/handler/pcap/packet/UDPPacket.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap.packet;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+public final class UDPPacket {\n+\n+    /**\n+     * Create UDP Packet\n+     *\n+     * @param byteBuf ByteBuf where Packet data will be set\n+     * @param payload Payload of this Packet\n+     * @param srcPort Source Port\n+     * @param dstPort Destination Port\n+     */\n+    public static ByteBuf createPacket(ByteBuf byteBuf, ByteBuf payload, int srcPort, int dstPort) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyMTAyOQ=="}, "originalCommit": {"oid": "55b652803517ac9bb2fea5eff85a5ff34af59dd7"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjg5MTY5OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/packet/UDPPacket.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowMjoyMFrOHFfggA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowMjoyMFrOHFfggA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyMTE1Mg==", "bodyText": "this should be package-private and should have a private constructor", "url": "https://github.com/netty/netty/pull/10498#discussion_r475521152", "createdAt": "2020-08-24T11:02:20Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/packet/UDPPacket.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap.packet;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+public final class UDPPacket {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55b652803517ac9bb2fea5eff85a5ff34af59dd7"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjg5MTkwOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/packet/TCPPacket.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowMjoyNVrOHFfgow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowMjoyNVrOHFfgow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyMTE4Nw==", "bodyText": "this should be package-private and should have a private constructor", "url": "https://github.com/netty/netty/pull/10498#discussion_r475521187", "createdAt": "2020-08-24T11:02:25Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/packet/TCPPacket.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap.packet;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+public final class TCPPacket {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55b652803517ac9bb2fea5eff85a5ff34af59dd7"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjg5MjkyOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/packet/TCPPacket.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowMjo0OFrOHFfhRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowMjo0OFrOHFfhRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyMTM0OA==", "bodyText": "same comment as for UDPPacket.createPacket", "url": "https://github.com/netty/netty/pull/10498#discussion_r475521348", "createdAt": "2020-08-24T11:02:48Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/packet/TCPPacket.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap.packet;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+public final class TCPPacket {\n+    /**\n+     * Create TCP Packet\n+     *\n+     * @param byteBuf ByteBuf where Packet data will be set\n+     * @param payload Payload of this Packet\n+     * @param srcPort Source Port\n+     * @param dstPort Destination Port\n+     */\n+    public static ByteBuf createPacket(ByteBuf byteBuf, ByteBuf payload, int srcPort, int dstPort) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55b652803517ac9bb2fea5eff85a5ff34af59dd7"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjg5MzM0OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/packet/IPPacket.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowMjo1M1rOHFfhfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowMjo1M1rOHFfhfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyMTQwNQ==", "bodyText": "same comment as for UDPPacket.createPacket", "url": "https://github.com/netty/netty/pull/10498#discussion_r475521405", "createdAt": "2020-08-24T11:02:53Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/packet/IPPacket.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap.packet;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+public final class IPPacket {\n+\n+    /**\n+     * Create IPv4 Packet for UDP Packet\n+     *\n+     * @param byteBuf    ByteBuf where IP Packet data will be set\n+     * @param payload    Payload of UDP\n+     * @param srcAddress Source IPv4 Address\n+     * @param dstAddress Destination IPv4 Address\n+     */\n+    public static ByteBuf createUDPv4(ByteBuf byteBuf, ByteBuf payload, int srcAddress, int dstAddress) {\n+        return createPacketV4(byteBuf, payload, 17, srcAddress, dstAddress);\n+    }\n+\n+    /**\n+     * Create IPv6 Packet for UDP Packet\n+     *\n+     * @param byteBuf    ByteBuf where IP Packet data will be set\n+     * @param payload    Payload of UDP\n+     * @param srcAddress Source IPv6 Address\n+     * @param dstAddress Destination IPv6 Address\n+     */\n+    public static ByteBuf createUDPv6(ByteBuf byteBuf, ByteBuf payload, byte[] srcAddress, byte[] dstAddress) {\n+        return createPacketV6(byteBuf, payload, 17, srcAddress, dstAddress);\n+    }\n+\n+    /**\n+     * Create IPv4 Packet for TCP Packet\n+     *\n+     * @param byteBuf    ByteBuf where IP Packet data will be set\n+     * @param payload    Payload of TCP\n+     * @param srcAddress Source IPv4 Address\n+     * @param dstAddress Destination IPv4 Address\n+     */\n+    public static ByteBuf createTCP4(ByteBuf byteBuf, ByteBuf payload, int srcAddress, int dstAddress) {\n+        return createPacketV4(byteBuf, payload, 6, srcAddress, dstAddress);\n+    }\n+\n+    /**\n+     * Create IPv6 Packet for TCP Packet\n+     *\n+     * @param byteBuf    ByteBuf where IP Packet data will be set\n+     * @param payload    Payload of TCP\n+     * @param srcAddress Source IPv6 Address\n+     * @param dstAddress Destination IPv6 Address\n+     */\n+    public static ByteBuf createTCP6(ByteBuf byteBuf, ByteBuf payload, byte[] srcAddress, byte[] dstAddress) {\n+        return createPacketV6(byteBuf, payload, 6, srcAddress, dstAddress);\n+    }\n+\n+    private static ByteBuf createPacketV4(ByteBuf byteBuf, ByteBuf payload, int protocol, int srcAddress,\n+                                          int dstAddress) {\n+        byteBuf.writeByte(0x45);      //  Version + IHL\n+        byteBuf.writeByte(0x00);      //  DSCP\n+        byteBuf.writeShort(payload.readableBytes() + 20); // Length\n+        byteBuf.writeShort(0x0000);   // Identification\n+        byteBuf.writeShort(0x0000);   // Fragment\n+        byteBuf.writeByte(0xff);      // TTL\n+        byteBuf.writeByte(protocol);  // Protocol\n+        byteBuf.writeShort(0);        // Checksum\n+        byteBuf.writeInt(srcAddress); // Source IPv4 Address\n+        byteBuf.writeInt(dstAddress); // Destination IPv4 Address\n+        byteBuf.writeBytes(payload);  // Payload of L4\n+        return byteBuf;\n+    }\n+\n+    private static ByteBuf createPacketV6(ByteBuf byteBuf, ByteBuf payload, int protocol, byte[] srcAddress,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55b652803517ac9bb2fea5eff85a5ff34af59dd7"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjg5MzU1OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/packet/IPPacket.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowMjo1OFrOHFfhmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowMjo1OFrOHFfhmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyMTQzNQ==", "bodyText": "same comment as for UDPPacket.createPacket", "url": "https://github.com/netty/netty/pull/10498#discussion_r475521435", "createdAt": "2020-08-24T11:02:58Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/packet/IPPacket.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap.packet;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+public final class IPPacket {\n+\n+    /**\n+     * Create IPv4 Packet for UDP Packet\n+     *\n+     * @param byteBuf    ByteBuf where IP Packet data will be set\n+     * @param payload    Payload of UDP\n+     * @param srcAddress Source IPv4 Address\n+     * @param dstAddress Destination IPv4 Address\n+     */\n+    public static ByteBuf createUDPv4(ByteBuf byteBuf, ByteBuf payload, int srcAddress, int dstAddress) {\n+        return createPacketV4(byteBuf, payload, 17, srcAddress, dstAddress);\n+    }\n+\n+    /**\n+     * Create IPv6 Packet for UDP Packet\n+     *\n+     * @param byteBuf    ByteBuf where IP Packet data will be set\n+     * @param payload    Payload of UDP\n+     * @param srcAddress Source IPv6 Address\n+     * @param dstAddress Destination IPv6 Address\n+     */\n+    public static ByteBuf createUDPv6(ByteBuf byteBuf, ByteBuf payload, byte[] srcAddress, byte[] dstAddress) {\n+        return createPacketV6(byteBuf, payload, 17, srcAddress, dstAddress);\n+    }\n+\n+    /**\n+     * Create IPv4 Packet for TCP Packet\n+     *\n+     * @param byteBuf    ByteBuf where IP Packet data will be set\n+     * @param payload    Payload of TCP\n+     * @param srcAddress Source IPv4 Address\n+     * @param dstAddress Destination IPv4 Address\n+     */\n+    public static ByteBuf createTCP4(ByteBuf byteBuf, ByteBuf payload, int srcAddress, int dstAddress) {\n+        return createPacketV4(byteBuf, payload, 6, srcAddress, dstAddress);\n+    }\n+\n+    /**\n+     * Create IPv6 Packet for TCP Packet\n+     *\n+     * @param byteBuf    ByteBuf where IP Packet data will be set\n+     * @param payload    Payload of TCP\n+     * @param srcAddress Source IPv6 Address\n+     * @param dstAddress Destination IPv6 Address\n+     */\n+    public static ByteBuf createTCP6(ByteBuf byteBuf, ByteBuf payload, byte[] srcAddress, byte[] dstAddress) {\n+        return createPacketV6(byteBuf, payload, 6, srcAddress, dstAddress);\n+    }\n+\n+    private static ByteBuf createPacketV4(ByteBuf byteBuf, ByteBuf payload, int protocol, int srcAddress,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55b652803517ac9bb2fea5eff85a5ff34af59dd7"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjg5MzczOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/packet/IPPacket.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowMzowMVrOHFfhsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowMzowMVrOHFfhsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyMTQ1Nw==", "bodyText": "same comment as for UDPPacket.createPacket", "url": "https://github.com/netty/netty/pull/10498#discussion_r475521457", "createdAt": "2020-08-24T11:03:01Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/packet/IPPacket.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap.packet;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+public final class IPPacket {\n+\n+    /**\n+     * Create IPv4 Packet for UDP Packet\n+     *\n+     * @param byteBuf    ByteBuf where IP Packet data will be set\n+     * @param payload    Payload of UDP\n+     * @param srcAddress Source IPv4 Address\n+     * @param dstAddress Destination IPv4 Address\n+     */\n+    public static ByteBuf createUDPv4(ByteBuf byteBuf, ByteBuf payload, int srcAddress, int dstAddress) {\n+        return createPacketV4(byteBuf, payload, 17, srcAddress, dstAddress);\n+    }\n+\n+    /**\n+     * Create IPv6 Packet for UDP Packet\n+     *\n+     * @param byteBuf    ByteBuf where IP Packet data will be set\n+     * @param payload    Payload of UDP\n+     * @param srcAddress Source IPv6 Address\n+     * @param dstAddress Destination IPv6 Address\n+     */\n+    public static ByteBuf createUDPv6(ByteBuf byteBuf, ByteBuf payload, byte[] srcAddress, byte[] dstAddress) {\n+        return createPacketV6(byteBuf, payload, 17, srcAddress, dstAddress);\n+    }\n+\n+    /**\n+     * Create IPv4 Packet for TCP Packet\n+     *\n+     * @param byteBuf    ByteBuf where IP Packet data will be set\n+     * @param payload    Payload of TCP\n+     * @param srcAddress Source IPv4 Address\n+     * @param dstAddress Destination IPv4 Address\n+     */\n+    public static ByteBuf createTCP4(ByteBuf byteBuf, ByteBuf payload, int srcAddress, int dstAddress) {\n+        return createPacketV4(byteBuf, payload, 6, srcAddress, dstAddress);\n+    }\n+\n+    /**\n+     * Create IPv6 Packet for TCP Packet\n+     *\n+     * @param byteBuf    ByteBuf where IP Packet data will be set\n+     * @param payload    Payload of TCP\n+     * @param srcAddress Source IPv6 Address\n+     * @param dstAddress Destination IPv6 Address\n+     */\n+    public static ByteBuf createTCP6(ByteBuf byteBuf, ByteBuf payload, byte[] srcAddress, byte[] dstAddress) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55b652803517ac9bb2fea5eff85a5ff34af59dd7"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjg5Mzg2OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/packet/IPPacket.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowMzowNFrOHFfhyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowMzowNFrOHFfhyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyMTQ4MA==", "bodyText": "same comment as for UDPPacket.createPacket", "url": "https://github.com/netty/netty/pull/10498#discussion_r475521480", "createdAt": "2020-08-24T11:03:04Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/packet/IPPacket.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap.packet;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+public final class IPPacket {\n+\n+    /**\n+     * Create IPv4 Packet for UDP Packet\n+     *\n+     * @param byteBuf    ByteBuf where IP Packet data will be set\n+     * @param payload    Payload of UDP\n+     * @param srcAddress Source IPv4 Address\n+     * @param dstAddress Destination IPv4 Address\n+     */\n+    public static ByteBuf createUDPv4(ByteBuf byteBuf, ByteBuf payload, int srcAddress, int dstAddress) {\n+        return createPacketV4(byteBuf, payload, 17, srcAddress, dstAddress);\n+    }\n+\n+    /**\n+     * Create IPv6 Packet for UDP Packet\n+     *\n+     * @param byteBuf    ByteBuf where IP Packet data will be set\n+     * @param payload    Payload of UDP\n+     * @param srcAddress Source IPv6 Address\n+     * @param dstAddress Destination IPv6 Address\n+     */\n+    public static ByteBuf createUDPv6(ByteBuf byteBuf, ByteBuf payload, byte[] srcAddress, byte[] dstAddress) {\n+        return createPacketV6(byteBuf, payload, 17, srcAddress, dstAddress);\n+    }\n+\n+    /**\n+     * Create IPv4 Packet for TCP Packet\n+     *\n+     * @param byteBuf    ByteBuf where IP Packet data will be set\n+     * @param payload    Payload of TCP\n+     * @param srcAddress Source IPv4 Address\n+     * @param dstAddress Destination IPv4 Address\n+     */\n+    public static ByteBuf createTCP4(ByteBuf byteBuf, ByteBuf payload, int srcAddress, int dstAddress) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55b652803517ac9bb2fea5eff85a5ff34af59dd7"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjg5Mzk2OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/packet/IPPacket.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowMzowNlrOHFfh2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowMzowNlrOHFfh2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyMTQ5OQ==", "bodyText": "same comment as for UDPPacket.createPacket", "url": "https://github.com/netty/netty/pull/10498#discussion_r475521499", "createdAt": "2020-08-24T11:03:06Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/packet/IPPacket.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap.packet;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+public final class IPPacket {\n+\n+    /**\n+     * Create IPv4 Packet for UDP Packet\n+     *\n+     * @param byteBuf    ByteBuf where IP Packet data will be set\n+     * @param payload    Payload of UDP\n+     * @param srcAddress Source IPv4 Address\n+     * @param dstAddress Destination IPv4 Address\n+     */\n+    public static ByteBuf createUDPv4(ByteBuf byteBuf, ByteBuf payload, int srcAddress, int dstAddress) {\n+        return createPacketV4(byteBuf, payload, 17, srcAddress, dstAddress);\n+    }\n+\n+    /**\n+     * Create IPv6 Packet for UDP Packet\n+     *\n+     * @param byteBuf    ByteBuf where IP Packet data will be set\n+     * @param payload    Payload of UDP\n+     * @param srcAddress Source IPv6 Address\n+     * @param dstAddress Destination IPv6 Address\n+     */\n+    public static ByteBuf createUDPv6(ByteBuf byteBuf, ByteBuf payload, byte[] srcAddress, byte[] dstAddress) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55b652803517ac9bb2fea5eff85a5ff34af59dd7"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjg5NDA4OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/packet/IPPacket.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowMzowOVrOHFfh8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowMzowOVrOHFfh8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyMTUyMQ==", "bodyText": "same comment as for UDPPacket.createPacket", "url": "https://github.com/netty/netty/pull/10498#discussion_r475521521", "createdAt": "2020-08-24T11:03:09Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/packet/IPPacket.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap.packet;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+public final class IPPacket {\n+\n+    /**\n+     * Create IPv4 Packet for UDP Packet\n+     *\n+     * @param byteBuf    ByteBuf where IP Packet data will be set\n+     * @param payload    Payload of UDP\n+     * @param srcAddress Source IPv4 Address\n+     * @param dstAddress Destination IPv4 Address\n+     */\n+    public static ByteBuf createUDPv4(ByteBuf byteBuf, ByteBuf payload, int srcAddress, int dstAddress) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55b652803517ac9bb2fea5eff85a5ff34af59dd7"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjg5NDc5OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/packet/IPPacket.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowMzoyNlrOHFfiZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowMzoyNlrOHFfiZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyMTYzOQ==", "bodyText": "package-private and private constructor", "url": "https://github.com/netty/netty/pull/10498#discussion_r475521639", "createdAt": "2020-08-24T11:03:26Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/packet/IPPacket.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap.packet;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+public final class IPPacket {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55b652803517ac9bb2fea5eff85a5ff34af59dd7"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjg5NTE3OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/packet/EthernetPacket.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowMzozMFrOHFfilw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowMzozMFrOHFfilw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyMTY4Nw==", "bodyText": "same comment as for UDPPacket.createPacket", "url": "https://github.com/netty/netty/pull/10498#discussion_r475521687", "createdAt": "2020-08-24T11:03:30Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/packet/EthernetPacket.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap.packet;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+public final class EthernetPacket {\n+\n+    public static final byte[] DUMMY_ADDRESS = new byte[]{-86, -69, -52, -35, -18, -1};\n+\n+    /**\n+     * Create IPv4 Ethernet Packet\n+     *\n+     * @param byteBuf    ByteBuf where Ethernet Packet data will be set\n+     * @param payload    Payload of IPv4\n+     * @param srcAddress Source MAC Address\n+     * @param dstAddress Destination MAC Address\n+     */\n+    public static ByteBuf createIPv4(ByteBuf byteBuf, ByteBuf payload, byte[] srcAddress, byte[] dstAddress) {\n+        return EthernetPacket.createPacket(byteBuf, payload, srcAddress, dstAddress, 0x0800);\n+    }\n+\n+    /**\n+     * Create IPv6 Ethernet Packet\n+     *\n+     * @param byteBuf    ByteBuf where Ethernet Packet data will be set\n+     * @param payload    Payload of IPv6\n+     * @param srcAddress Source MAC Address\n+     * @param dstAddress Destination MAC Address\n+     */\n+    public static ByteBuf createIPv6(ByteBuf byteBuf, ByteBuf payload, byte[] srcAddress, byte[] dstAddress) {\n+        return EthernetPacket.createPacket(byteBuf, payload, srcAddress, dstAddress, 0x86dd);\n+    }\n+\n+    private static ByteBuf createPacket(ByteBuf byteBuf, ByteBuf payload, byte[] srcAddress, byte[] dstAddress,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55b652803517ac9bb2fea5eff85a5ff34af59dd7"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjg5NTM4OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/packet/EthernetPacket.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowMzozMlrOHFfitA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowMzozMlrOHFfitA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyMTcxNg==", "bodyText": "same comment as for UDPPacket.createPacket", "url": "https://github.com/netty/netty/pull/10498#discussion_r475521716", "createdAt": "2020-08-24T11:03:32Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/packet/EthernetPacket.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap.packet;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+public final class EthernetPacket {\n+\n+    public static final byte[] DUMMY_ADDRESS = new byte[]{-86, -69, -52, -35, -18, -1};\n+\n+    /**\n+     * Create IPv4 Ethernet Packet\n+     *\n+     * @param byteBuf    ByteBuf where Ethernet Packet data will be set\n+     * @param payload    Payload of IPv4\n+     * @param srcAddress Source MAC Address\n+     * @param dstAddress Destination MAC Address\n+     */\n+    public static ByteBuf createIPv4(ByteBuf byteBuf, ByteBuf payload, byte[] srcAddress, byte[] dstAddress) {\n+        return EthernetPacket.createPacket(byteBuf, payload, srcAddress, dstAddress, 0x0800);\n+    }\n+\n+    /**\n+     * Create IPv6 Ethernet Packet\n+     *\n+     * @param byteBuf    ByteBuf where Ethernet Packet data will be set\n+     * @param payload    Payload of IPv6\n+     * @param srcAddress Source MAC Address\n+     * @param dstAddress Destination MAC Address\n+     */\n+    public static ByteBuf createIPv6(ByteBuf byteBuf, ByteBuf payload, byte[] srcAddress, byte[] dstAddress) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55b652803517ac9bb2fea5eff85a5ff34af59dd7"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjg5NTY0OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/packet/EthernetPacket.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowMzozNlrOHFfi2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowMzozNlrOHFfi2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyMTc1Mw==", "bodyText": "same comment as for UDPPacket.createPacket", "url": "https://github.com/netty/netty/pull/10498#discussion_r475521753", "createdAt": "2020-08-24T11:03:36Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/packet/EthernetPacket.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap.packet;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+public final class EthernetPacket {\n+\n+    public static final byte[] DUMMY_ADDRESS = new byte[]{-86, -69, -52, -35, -18, -1};\n+\n+    /**\n+     * Create IPv4 Ethernet Packet\n+     *\n+     * @param byteBuf    ByteBuf where Ethernet Packet data will be set\n+     * @param payload    Payload of IPv4\n+     * @param srcAddress Source MAC Address\n+     * @param dstAddress Destination MAC Address\n+     */\n+    public static ByteBuf createIPv4(ByteBuf byteBuf, ByteBuf payload, byte[] srcAddress, byte[] dstAddress) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55b652803517ac9bb2fea5eff85a5ff34af59dd7"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjg5NjM5OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/packet/EthernetPacket.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowMzo1NVrOHFfjXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowMzo1NVrOHFfjXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyMTg4NQ==", "bodyText": "This is \"dangerous\" as it is modifiable", "url": "https://github.com/netty/netty/pull/10498#discussion_r475521885", "createdAt": "2020-08-24T11:03:55Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/packet/EthernetPacket.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap.packet;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+public final class EthernetPacket {\n+\n+    public static final byte[] DUMMY_ADDRESS = new byte[]{-86, -69, -52, -35, -18, -1};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55b652803517ac9bb2fea5eff85a5ff34af59dd7"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjg5NjkzOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/packet/EthernetPacket.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowNDowNVrOHFfjuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowNDowNVrOHFfjuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyMTk3Nw==", "bodyText": "package private and private constructor", "url": "https://github.com/netty/netty/pull/10498#discussion_r475521977", "createdAt": "2020-08-24T11:04:05Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/packet/EthernetPacket.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap.packet;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+public final class EthernetPacket {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55b652803517ac9bb2fea5eff85a5ff34af59dd7"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3Mjg5ODgzOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/WritePCAPHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowNDo0NVrOHFfk8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowNDo0NVrOHFfk8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyMjI4OA==", "bodyText": "no need to copy() use duplicate()", "url": "https://github.com/netty/netty/pull/10498#discussion_r475522288", "createdAt": "2020-08-24T11:04:45Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/WritePCAPHandler.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.handler.pcap.packet.EthernetPacket;\n+import io.netty.handler.pcap.packet.IPPacket;\n+import io.netty.handler.pcap.packet.TCPPacket;\n+import io.netty.handler.pcap.packet.UDPPacket;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.Inet4Address;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+\n+public final class WritePCAPHandler extends ChannelDuplexHandler {\n+\n+    private final Protocol protocol;\n+    private final PCapFileWriter pCapFileWriter;\n+\n+    public WritePCAPHandler(Protocol protocol, String destinationFile) throws IOException {\n+        this(protocol, new File(destinationFile));\n+    }\n+\n+    public WritePCAPHandler(Protocol protocol, File destinationFile) throws IOException {\n+        this.protocol = protocol;\n+        this.pCapFileWriter = new PCapFileWriter(destinationFile);\n+    }\n+\n+    @Override\n+    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n+        writePacket(ctx, msg, false);\n+        super.channelRead(ctx, msg);\n+    }\n+\n+    @Override\n+    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {\n+        writePacket(ctx, msg, true);\n+        super.write(ctx, msg, promise);\n+    }\n+\n+    private void writePacket(ChannelHandlerContext ctx, Object msg, boolean isWrite) throws IOException {\n+        if (msg instanceof ByteBuf) {\n+            // Copy the ByteBuf\n+            ByteBuf packet = ((ByteBuf) msg).copy();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55b652803517ac9bb2fea5eff85a5ff34af59dd7"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjkwMjA3OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PcapHeaders.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowNTo0MFrOHFfm3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowNTo0MFrOHFfm3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyMjc4Mw==", "bodyText": "same comment as for UDPPacket.createPacket", "url": "https://github.com/netty/netty/pull/10498#discussion_r475522783", "createdAt": "2020-08-24T11:05:40Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/PcapHeaders.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+public final class PcapHeaders {\n+\n+    /**\n+     * Generate Pcap Global Header\n+     * @param byteBuf byteBuf ByteBuf where we'll write header data\n+     */\n+    public static ByteBuf generateGlobalHeader(ByteBuf byteBuf) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55b652803517ac9bb2fea5eff85a5ff34af59dd7"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjkwMjQyOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PcapHeaders.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowNTo0N1rOHFfnEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowNTo0N1rOHFfnEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyMjgzMg==", "bodyText": "same comment as for UDPPacket.createPacket", "url": "https://github.com/netty/netty/pull/10498#discussion_r475522832", "createdAt": "2020-08-24T11:05:47Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/PcapHeaders.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+public final class PcapHeaders {\n+\n+    /**\n+     * Generate Pcap Global Header\n+     * @param byteBuf byteBuf ByteBuf where we'll write header data\n+     */\n+    public static ByteBuf generateGlobalHeader(ByteBuf byteBuf) {\n+        byteBuf.writeInt(0xa1b2c3d4); // magic_number\n+        byteBuf.writeShort(2);        // version_major\n+        byteBuf.writeShort(4);        // version_minor\n+        byteBuf.writeInt(0);          // thiszone\n+        byteBuf.writeInt(0);          // sigfigs\n+        byteBuf.writeInt(0xffff);     // snaplen\n+        byteBuf.writeInt(1);          // network\n+        return byteBuf;\n+    }\n+\n+    /**\n+     * Generate Pcap Packet Header\n+     *\n+     * @param byteBuf ByteBuf where we'll write header data\n+     * @param ts_sec   timestamp seconds\n+     * @param ts_usec  timestamp microseconds\n+     * @param incl_len number of octets of packet saved in file\n+     * @param orig_len actual length of packet\n+     */\n+    public static ByteBuf generatePacketHeader(ByteBuf byteBuf, int ts_sec, int ts_usec, int incl_len, int orig_len) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55b652803517ac9bb2fea5eff85a5ff34af59dd7"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjkwMzE4OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PcapHeaders.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowNjowNVrOHFfnkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowNjowNVrOHFfnkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyMjk2Mg==", "bodyText": "should be package-private and private constructor", "url": "https://github.com/netty/netty/pull/10498#discussion_r475522962", "createdAt": "2020-08-24T11:06:05Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/PcapHeaders.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+public final class PcapHeaders {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55b652803517ac9bb2fea5eff85a5ff34af59dd7"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjkwMzkwOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PCapFileWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowNjoyM1rOHFfoDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMTowNjoyM1rOHFfoDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUyMzA4NA==", "bodyText": "private private ?", "url": "https://github.com/netty/netty/pull/10498#discussion_r475523084", "createdAt": "2020-08-24T11:06:23Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCapFileWriter.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufUtil;\n+import io.netty.buffer.Unpooled;\n+\n+import java.io.Closeable;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+\n+public final class PCapFileWriter implements Closeable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55b652803517ac9bb2fea5eff85a5ff34af59dd7"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzI2MDE4OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/EthernetPacket.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMjo1Mzo1OFrOHFi96Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMjo1Mzo1OFrOHFi96Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU3NzgzMw==", "bodyText": "nit: I would rename all of these methods to write* as this is what these do at the end.", "url": "https://github.com/netty/netty/pull/10498#discussion_r475577833", "createdAt": "2020-08-24T12:53:58Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/EthernetPacket.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+final class EthernetPacket {\n+\n+    private static final byte[] DUMMY_ADDRESS = new byte[]{-86, -69, -52, -35, -18, -1};\n+\n+    private EthernetPacket() {\n+        // Prevent outside initialization\n+    }\n+\n+    /**\n+     * Create IPv4 Ethernet Packet. It uses a dummy MAC address for both source and destination.\n+     *\n+     * @param byteBuf    ByteBuf where Ethernet Packet data will be set\n+     * @param payload    Payload of IPv4\n+     */\n+    static void createIPv4(ByteBuf byteBuf, ByteBuf payload) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d97371572828fe435d2f796feebef161de8be9a4"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzI3MTA3OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PCapFileWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMjo1NToxNlrOHFjEsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMjo1NToxNlrOHFjEsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU3OTU2OA==", "bodyText": "missing byteBuf.release() after usage.", "url": "https://github.com/netty/netty/pull/10498#discussion_r475579568", "createdAt": "2020-08-24T12:55:16Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCapFileWriter.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufUtil;\n+import io.netty.buffer.Unpooled;\n+\n+import java.io.Closeable;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+\n+final class PCapFileWriter implements Closeable {\n+    private final long myStartTime = System.nanoTime();\n+    private final FileOutputStream fileOutputStream;\n+\n+    PCapFileWriter(File file) throws IOException {\n+        fileOutputStream = new FileOutputStream(file);\n+\n+        ByteBuf byteBuf = Unpooled.buffer();\n+        PcapHeaders.generateGlobalHeader(byteBuf);\n+        fileOutputStream.write(ByteBufUtil.getBytes(byteBuf));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d97371572828fe435d2f796feebef161de8be9a4"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzI3MjU5OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PCapFileWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMjo1NTo0MFrOHFjFmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMjo1NTo0MFrOHFjFmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU3OTgwMw==", "bodyText": "use byteBuf.readBytes(fileOutputStream)", "url": "https://github.com/netty/netty/pull/10498#discussion_r475579803", "createdAt": "2020-08-24T12:55:40Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCapFileWriter.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufUtil;\n+import io.netty.buffer.Unpooled;\n+\n+import java.io.Closeable;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+\n+final class PCapFileWriter implements Closeable {\n+    private final long myStartTime = System.nanoTime();\n+    private final FileOutputStream fileOutputStream;\n+\n+    PCapFileWriter(File file) throws IOException {\n+        fileOutputStream = new FileOutputStream(file);\n+\n+        ByteBuf byteBuf = Unpooled.buffer();\n+        PcapHeaders.generateGlobalHeader(byteBuf);\n+        fileOutputStream.write(ByteBufUtil.getBytes(byteBuf));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d97371572828fe435d2f796feebef161de8be9a4"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzI3NzQ5OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PCapFileWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMjo1NzowNFrOHFjIxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMjo1NzowNFrOHFjIxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU4MDYxNA==", "bodyText": "why even depend on the file here and not change the constructor to use ...(OutputStream out) ? Also when doing so rename the the class to PCapWriter", "url": "https://github.com/netty/netty/pull/10498#discussion_r475580614", "createdAt": "2020-08-24T12:57:04Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCapFileWriter.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufUtil;\n+import io.netty.buffer.Unpooled;\n+\n+import java.io.Closeable;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+\n+final class PCapFileWriter implements Closeable {\n+    private final long myStartTime = System.nanoTime();\n+    private final FileOutputStream fileOutputStream;\n+\n+    PCapFileWriter(File file) throws IOException {\n+        fileOutputStream = new FileOutputStream(file);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d97371572828fe435d2f796feebef161de8be9a4"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzI4MjMwOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PCapFileWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMjo1ODoxNVrOHFjLnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMjo1ODoxNVrOHFjLnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU4MTM0MA==", "bodyText": "again use byteBuf.readBytes(fileOutputStream) and packet.readBytes(fileOutputStream);", "url": "https://github.com/netty/netty/pull/10498#discussion_r475581340", "createdAt": "2020-08-24T12:58:15Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCapFileWriter.java", "diffHunk": "@@ -0,0 +1,58 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufUtil;\n+import io.netty.buffer.Unpooled;\n+\n+import java.io.Closeable;\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.io.IOException;\n+\n+final class PCapFileWriter implements Closeable {\n+    private final long myStartTime = System.nanoTime();\n+    private final FileOutputStream fileOutputStream;\n+\n+    PCapFileWriter(File file) throws IOException {\n+        fileOutputStream = new FileOutputStream(file);\n+\n+        ByteBuf byteBuf = Unpooled.buffer();\n+        PcapHeaders.generateGlobalHeader(byteBuf);\n+        fileOutputStream.write(ByteBufUtil.getBytes(byteBuf));\n+    }\n+\n+    void writePacket(ByteBuf byteBuf, ByteBuf packet) throws IOException {\n+        long difference = System.nanoTime() - myStartTime;\n+\n+        PcapHeaders.generatePacketHeader(\n+                byteBuf,\n+                (int) (difference / 1000000000),\n+                (int) difference / 1000000,\n+                packet.readableBytes(),\n+                packet.readableBytes()\n+        );\n+\n+        fileOutputStream.write(ByteBufUtil.getBytes(byteBuf));\n+        fileOutputStream.write(ByteBufUtil.getBytes(packet));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d97371572828fe435d2f796feebef161de8be9a4"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzI4OTAwOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/WritePCAPHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzowMDowMVrOHFjPtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzowMDowMVrOHFjPtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU4MjM4OQ==", "bodyText": "nit: I wonder if you also want to handle DatagramPacket for protocol == Protocol.UDP ?", "url": "https://github.com/netty/netty/pull/10498#discussion_r475582389", "createdAt": "2020-08-24T13:00:01Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/WritePCAPHandler.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPromise;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.Inet4Address;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+\n+public final class WritePCAPHandler extends ChannelDuplexHandler {\n+\n+    private final Protocol protocol;\n+    private final PCapFileWriter pCapFileWriter;\n+\n+    public WritePCAPHandler(Protocol protocol, String destinationFile) throws IOException {\n+        this(protocol, new File(destinationFile));\n+    }\n+\n+    public WritePCAPHandler(Protocol protocol, File destinationFile) throws IOException {\n+        this.protocol = protocol;\n+        this.pCapFileWriter = new PCapFileWriter(destinationFile);\n+    }\n+\n+    @Override\n+    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n+        writePacket(ctx, msg, false);\n+        super.channelRead(ctx, msg);\n+    }\n+\n+    @Override\n+    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {\n+        writePacket(ctx, msg, true);\n+        super.write(ctx, msg, promise);\n+    }\n+\n+    private void writePacket(ChannelHandlerContext ctx, Object msg, boolean isWrite) throws IOException {\n+        if (msg instanceof ByteBuf) {\n+            // Duplicate the ByteBuf\n+            ByteBuf packet = ((ByteBuf) msg).duplicate();\n+\n+            InetSocketAddress srcAddr;\n+            InetSocketAddress dstAddr;\n+            /*\n+             * When `isWrite` it true, it means we're sending data from Netty to somewhere else.\n+             * In this case, source address will be `localAddress` and destination address will\n+             * be `remoteAddress`.\n+             *\n+             * When `isWrite` is false, it means we're reading data from somewhere else in Netty.\n+             * In this case, source address will be `remoteAddress` and destination address will\n+             * be `localAddress`.\n+             */\n+            if (isWrite) {\n+                srcAddr = (InetSocketAddress) ctx.channel().localAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+            } else {\n+                srcAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().localAddress();\n+            }\n+\n+            if (protocol == Protocol.TCP) {\n+                handleTCP(ctx, srcAddr, dstAddr, packet);\n+            } else {\n+                handleUDP(ctx, srcAddr, dstAddr, packet);\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d97371572828fe435d2f796feebef161de8be9a4"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MzI5MjA5OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/WritePCAPHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzowMDo0OFrOHFjRlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzowMDo0OFrOHFjRlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTU4Mjg3MQ==", "bodyText": "better would be to do this in handlerRemoved(....)", "url": "https://github.com/netty/netty/pull/10498#discussion_r475582871", "createdAt": "2020-08-24T13:00:48Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/WritePCAPHandler.java", "diffHunk": "@@ -0,0 +1,159 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPromise;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.net.Inet4Address;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+\n+public final class WritePCAPHandler extends ChannelDuplexHandler {\n+\n+    private final Protocol protocol;\n+    private final PCapFileWriter pCapFileWriter;\n+\n+    public WritePCAPHandler(Protocol protocol, String destinationFile) throws IOException {\n+        this(protocol, new File(destinationFile));\n+    }\n+\n+    public WritePCAPHandler(Protocol protocol, File destinationFile) throws IOException {\n+        this.protocol = protocol;\n+        this.pCapFileWriter = new PCapFileWriter(destinationFile);\n+    }\n+\n+    @Override\n+    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n+        writePacket(ctx, msg, false);\n+        super.channelRead(ctx, msg);\n+    }\n+\n+    @Override\n+    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {\n+        writePacket(ctx, msg, true);\n+        super.write(ctx, msg, promise);\n+    }\n+\n+    private void writePacket(ChannelHandlerContext ctx, Object msg, boolean isWrite) throws IOException {\n+        if (msg instanceof ByteBuf) {\n+            // Duplicate the ByteBuf\n+            ByteBuf packet = ((ByteBuf) msg).duplicate();\n+\n+            InetSocketAddress srcAddr;\n+            InetSocketAddress dstAddr;\n+            /*\n+             * When `isWrite` it true, it means we're sending data from Netty to somewhere else.\n+             * In this case, source address will be `localAddress` and destination address will\n+             * be `remoteAddress`.\n+             *\n+             * When `isWrite` is false, it means we're reading data from somewhere else in Netty.\n+             * In this case, source address will be `remoteAddress` and destination address will\n+             * be `localAddress`.\n+             */\n+            if (isWrite) {\n+                srcAddr = (InetSocketAddress) ctx.channel().localAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+            } else {\n+                srcAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().localAddress();\n+            }\n+\n+            if (protocol == Protocol.TCP) {\n+                handleTCP(ctx, srcAddr, dstAddr, packet);\n+            } else {\n+                handleUDP(ctx, srcAddr, dstAddr, packet);\n+            }\n+        }\n+    }\n+\n+    private void handleTCP(ChannelHandlerContext ctx, InetSocketAddress srcAddr, InetSocketAddress dstAddr,\n+                           ByteBuf packet) throws IOException {\n+        ByteBuf tcpBuf = ctx.alloc().buffer();\n+        TCPPacket.createPacket(tcpBuf, packet, dstAddr.getPort(), srcAddr.getPort());\n+\n+        ByteBuf ipBuf = ctx.alloc().buffer();\n+        if (dstAddr.getAddress() instanceof Inet4Address) {\n+            IPPacket.createTCPv4(ipBuf,\n+                    tcpBuf,\n+                    ipv4ToInt(srcAddr.getAddress()),\n+                    ipv4ToInt(dstAddr.getAddress()));\n+\n+            ByteBuf ethernetBuf = ctx.alloc().buffer();\n+            EthernetPacket.createIPv4(ethernetBuf, ipBuf);\n+            pCapFileWriter.writePacket(ctx.alloc().buffer(), ethernetBuf);\n+        } else {\n+            IPPacket.createTCPv6(ipBuf,\n+                    tcpBuf,\n+                    srcAddr.getAddress().getAddress(),\n+                    dstAddr.getAddress().getAddress());\n+\n+            ByteBuf ethernetBuf = ctx.alloc().buffer();\n+            EthernetPacket.createIPv6(ethernetBuf, ipBuf);\n+            pCapFileWriter.writePacket(ctx.alloc().buffer(), ethernetBuf);\n+        }\n+    }\n+\n+    private void handleUDP(ChannelHandlerContext ctx, InetSocketAddress srcAddr, InetSocketAddress dstAddr,\n+                           ByteBuf packet) throws IOException {\n+        ByteBuf udpBuf = ctx.alloc().buffer();\n+        UDPPacket.createPacket(udpBuf,\n+                packet,\n+                dstAddr.getPort(),\n+                srcAddr.getPort());\n+\n+        ByteBuf ipBuf = ctx.alloc().buffer();\n+        if (dstAddr.getAddress() instanceof Inet4Address) {\n+            IPPacket.createUDPv4(ipBuf,\n+                    udpBuf,\n+                    ipv4ToInt(srcAddr.getAddress()),\n+                    ipv4ToInt(dstAddr.getAddress()));\n+\n+            ByteBuf ethernetBuf = ctx.alloc().buffer();\n+            EthernetPacket.createIPv4(ethernetBuf, ipBuf);\n+            pCapFileWriter.writePacket(ctx.alloc().buffer(), ethernetBuf);\n+        } else {\n+            IPPacket.createUDPv6(ipBuf,\n+                    udpBuf,\n+                    srcAddr.getAddress().getAddress(),\n+                    dstAddr.getAddress().getAddress());\n+\n+            ByteBuf ethernetBuf = ctx.alloc().buffer();\n+            EthernetPacket.createIPv6(ethernetBuf, ipBuf);\n+            pCapFileWriter.writePacket(ctx.alloc().buffer(), ethernetBuf);\n+        }\n+    }\n+\n+    @Override\n+    public void close(ChannelHandlerContext ctx, ChannelPromise promise) throws Exception {\n+        this.pCapFileWriter.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d97371572828fe435d2f796feebef161de8be9a4"}, "originalPosition": 146}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NDk5NTQ4OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PCapWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzoxNjoyMFrOHHV5_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzoxNjoyMFrOHHV5_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2MDk5MQ==", "bodyText": "wouldn't it be better to use byteBuf.readableBytes() ?", "url": "https://github.com/netty/netty/pull/10498#discussion_r477460991", "createdAt": "2020-08-26T17:16:20Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCapWriter.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+\n+final class PCapWriter implements Closeable {\n+    private final long myStartTime = System.nanoTime();\n+    private final OutputStream outputStream;\n+\n+    /**\n+     * This uses {@link OutputStream} for writing Pcap.\n+     * Pcap Global Header is also written on construction.\n+     *\n+     * @throws IOException If {@link OutputStream#write(byte[])} throws an exception\n+     */\n+    PCapWriter(OutputStream outputStream) throws IOException {\n+        this.outputStream = outputStream;\n+\n+        ByteBuf byteBuf = Unpooled.buffer();\n+        io.netty.handler.codec.pcap.PcapHeaders.writeGlobalHeader(byteBuf);\n+        byteBuf.readBytes(outputStream, 24); // Pcap Global Header size is of 24 Bytes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6d078e9c9aa70aad009d645cde80e43e3cf3e1e"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk4NDk5ODMxOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PCapWriter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzoxNzowM1rOHHV7tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNzo0MTo0OFrOHHW1Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2MTQyOA==", "bodyText": "so either the comment is wrong or 16 is wrong ... Also wouldn't it make more sense to use packetHeaderBuf.readableBytes() ?", "url": "https://github.com/netty/netty/pull/10498#discussion_r477461428", "createdAt": "2020-08-26T17:17:03Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCapWriter.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+\n+final class PCapWriter implements Closeable {\n+    private final long myStartTime = System.nanoTime();\n+    private final OutputStream outputStream;\n+\n+    /**\n+     * This uses {@link OutputStream} for writing Pcap.\n+     * Pcap Global Header is also written on construction.\n+     *\n+     * @throws IOException If {@link OutputStream#write(byte[])} throws an exception\n+     */\n+    PCapWriter(OutputStream outputStream) throws IOException {\n+        this.outputStream = outputStream;\n+\n+        ByteBuf byteBuf = Unpooled.buffer();\n+        io.netty.handler.codec.pcap.PcapHeaders.writeGlobalHeader(byteBuf);\n+        byteBuf.readBytes(outputStream, 24); // Pcap Global Header size is of 24 Bytes\n+        byteBuf.release();\n+    }\n+\n+    /**\n+     * Write Packet in Pcap OutputStream.\n+     *\n+     * @param packetHeaderBuf Packer Header {@link ByteBuf}\n+     * @param packet Packet\n+     * @throws IOException If {@link OutputStream#write(byte[])} throws an exception\n+     */\n+    void writePacket(ByteBuf packetHeaderBuf, ByteBuf packet) throws IOException {\n+        long difference = System.nanoTime() - myStartTime;\n+\n+        io.netty.handler.codec.pcap.PcapHeaders.writePacketHeader(\n+                packetHeaderBuf,\n+                (int) difference / 1000000000,\n+                (int) difference / 1000000,\n+                packet.readableBytes(),\n+                packet.readableBytes()\n+        );\n+\n+        packetHeaderBuf.readBytes(outputStream, 16); // Pcap Packet Header size is of 24 Bytes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d6d078e9c9aa70aad009d645cde80e43e3cf3e1e"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ3NjE3OQ==", "bodyText": "Fixed :)", "url": "https://github.com/netty/netty/pull/10498#discussion_r477476179", "createdAt": "2020-08-26T17:41:48Z", "author": {"login": "hyperxpro"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCapWriter.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.Unpooled;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+\n+final class PCapWriter implements Closeable {\n+    private final long myStartTime = System.nanoTime();\n+    private final OutputStream outputStream;\n+\n+    /**\n+     * This uses {@link OutputStream} for writing Pcap.\n+     * Pcap Global Header is also written on construction.\n+     *\n+     * @throws IOException If {@link OutputStream#write(byte[])} throws an exception\n+     */\n+    PCapWriter(OutputStream outputStream) throws IOException {\n+        this.outputStream = outputStream;\n+\n+        ByteBuf byteBuf = Unpooled.buffer();\n+        io.netty.handler.codec.pcap.PcapHeaders.writeGlobalHeader(byteBuf);\n+        byteBuf.readBytes(outputStream, 24); // Pcap Global Header size is of 24 Bytes\n+        byteBuf.release();\n+    }\n+\n+    /**\n+     * Write Packet in Pcap OutputStream.\n+     *\n+     * @param packetHeaderBuf Packer Header {@link ByteBuf}\n+     * @param packet Packet\n+     * @throws IOException If {@link OutputStream#write(byte[])} throws an exception\n+     */\n+    void writePacket(ByteBuf packetHeaderBuf, ByteBuf packet) throws IOException {\n+        long difference = System.nanoTime() - myStartTime;\n+\n+        io.netty.handler.codec.pcap.PcapHeaders.writePacketHeader(\n+                packetHeaderBuf,\n+                (int) difference / 1000000000,\n+                (int) difference / 1000000,\n+                packet.readableBytes(),\n+                packet.readableBytes()\n+        );\n+\n+        packetHeaderBuf.readBytes(outputStream, 16); // Pcap Packet Header size is of 24 Bytes", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQ2MTQyOA=="}, "originalCommit": {"oid": "d6d078e9c9aa70aad009d645cde80e43e3cf3e1e"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTE4MjQ5OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODozNzo0NFrOHJvvrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODozNzo0NFrOHJvvrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk4MTQ4Ng==", "bodyText": "couldn't we detect  these in the methods itself ?\nboolean isTcp = channel instanceof SocketChannel;\nboolean isServer = channel instanceof ServerChannel;", "url": "https://github.com/netty/netty/pull/10498#discussion_r479981486", "createdAt": "2020-08-31T08:37:44Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "diffHunk": "@@ -0,0 +1,372 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.socket.DatagramPacket;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.Inet4Address;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+\n+public final class PCAPWriteHandler extends ChannelDuplexHandler {\n+\n+    private final InternalLogger logger = InternalLoggerFactory.getInstance(PCAPWriteHandler.class);\n+\n+    /**\n+     * TCP Sender Segment Number.\n+     */\n+    private int sendSegmentNumber = 1;\n+\n+    /**\n+     * TCP Receiver Segment Number\n+     */\n+    private int receiveSegmentNumber = 1;\n+\n+    /**\n+     * Source Address [TCP ONLY]\n+     */\n+    private InetSocketAddress srcAddr;\n+\n+    /**\n+     * Destination Address [TCP ONLY]\n+     */\n+    private InetSocketAddress dstAddr;\n+\n+    private final OutputStream outputStream;\n+    private PCapWriter pCapWriter;\n+    private final boolean isTCP;\n+    private final boolean isServer;\n+    private final boolean captureZeroByte;\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance.\n+     * {@code isTCP}, {@code isServer} and {@code captureZeroByte} are set to {@code false}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream) {\n+        this(outputStream, false, false, false);\n+    }\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance.\n+     * {@code captureZeroByte} is set to {@code false}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     * @param isTCP        {@code true} to capture TCP packets\n+     * @param isServer     {@code true} if we'll capture packet as server\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream, boolean isTCP, boolean isServer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTE4NDkwOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODozODoyOVrOHJvxNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODozODoyOVrOHJvxNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk4MTg3Nw==", "bodyText": "better do this in a finally block", "url": "https://github.com/netty/netty/pull/10498#discussion_r479981877", "createdAt": "2020-08-31T08:38:29Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "diffHunk": "@@ -0,0 +1,372 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.socket.DatagramPacket;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.Inet4Address;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+\n+public final class PCAPWriteHandler extends ChannelDuplexHandler {\n+\n+    private final InternalLogger logger = InternalLoggerFactory.getInstance(PCAPWriteHandler.class);\n+\n+    /**\n+     * TCP Sender Segment Number.\n+     */\n+    private int sendSegmentNumber = 1;\n+\n+    /**\n+     * TCP Receiver Segment Number\n+     */\n+    private int receiveSegmentNumber = 1;\n+\n+    /**\n+     * Source Address [TCP ONLY]\n+     */\n+    private InetSocketAddress srcAddr;\n+\n+    /**\n+     * Destination Address [TCP ONLY]\n+     */\n+    private InetSocketAddress dstAddr;\n+\n+    private final OutputStream outputStream;\n+    private PCapWriter pCapWriter;\n+    private final boolean isTCP;\n+    private final boolean isServer;\n+    private final boolean captureZeroByte;\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance.\n+     * {@code isTCP}, {@code isServer} and {@code captureZeroByte} are set to {@code false}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream) {\n+        this(outputStream, false, false, false);\n+    }\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance.\n+     * {@code captureZeroByte} is set to {@code false}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     * @param isTCP        {@code true} to capture TCP packets\n+     * @param isServer     {@code true} if we'll capture packet as server\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream, boolean isTCP, boolean isServer) {\n+        this(outputStream, isTCP, isServer, false);\n+    }\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance\n+     *\n+     * @param outputStream    OutputStream where Pcap data will be written\n+     * @param isTCP           {@code true} to capture TCP packets\n+     * @param isServer        {@code true} if we'll capture packet as server\n+     * @param captureZeroByte {@code true} if we'll capture packets with 0 bytes\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream, boolean isTCP, boolean isServer, boolean captureZeroByte) {\n+        this.outputStream = outputStream;\n+        this.isTCP = isTCP;\n+        this.isServer = isServer;\n+        this.captureZeroByte = captureZeroByte;\n+    }\n+\n+    @Override\n+    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+        this.pCapWriter = new PCapWriter(this.outputStream, ctx.alloc().buffer());\n+\n+        /*\n+         * If `isServer` is set to true, it means we'll be receiving data from client.\n+         * In this case, Source Address will be `remoteAddress` and Destination Address\n+         * will be `localAddress`.\n+         *\n+         * If `isServer` is set to false, it means we'll be sending data to server.\n+         * In this case, Source Address will be `localAddress` and Destination Address\n+         * will be `remoteAddress`.\n+         */\n+        if (isTCP) {\n+            if (isServer) {\n+                srcAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().localAddress();\n+            } else {\n+                srcAddr = (InetSocketAddress) ctx.channel().localAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+            }\n+        }\n+\n+        // If `isTCP` is true, then we'll simulate a fake handshake.\n+        if (isTCP) {\n+            logger.debug(\"Starting Fake TCP 3-Way Handshake\");\n+\n+            ByteBuf tcpBuf = ctx.alloc().buffer();\n+\n+            // Write SYN with Normal Source and Destination Address\n+            TCPPacket.writePacket(tcpBuf, null, 0, 0, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.Flag.SYN);\n+            completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+\n+            // Write SYN+ACK with Reversed Source and Destination Address\n+            TCPPacket.writePacket(tcpBuf, null, 0, 1, dstAddr.getPort(), srcAddr.getPort(), TCPPacket.Flag.SYN,\n+                    TCPPacket.Flag.ACK);\n+            completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc());\n+\n+            // Write ACK with Normal Source and Destination Address\n+            TCPPacket.writePacket(tcpBuf, null, 1, 1, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.Flag.ACK);\n+            completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+\n+            tcpBuf.release();\n+\n+            logger.debug(\"Finished Fake TCP 3-Way Handshake\");\n+        }\n+\n+        super.channelActive(ctx);\n+    }\n+\n+    @Override\n+    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n+        writePacket(ctx, msg, false);\n+        super.channelRead(ctx, msg);\n+    }\n+\n+    @Override\n+    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {\n+        writePacket(ctx, msg, true);\n+        super.write(ctx, msg, promise);\n+    }\n+\n+    private void writePacket(ChannelHandlerContext ctx, Object msg, boolean isWriteOperation) throws Exception {\n+        if (msg instanceof ByteBuf) {\n+\n+            // If bytes are 0 and `captureZeroByte` is false, we won't capture this.\n+            if (((ByteBuf) msg).readableBytes() == 0 && !captureZeroByte) {\n+                logger.debug(\"Discarding Zero Byte TCP Packet. isWriteOperation {}\", isWriteOperation);\n+                return;\n+            }\n+\n+            ByteBuf packet = ((ByteBuf) msg).duplicate();\n+            int bytes = packet.readableBytes();\n+\n+            ByteBuf tcpBuf = ctx.alloc().buffer();\n+\n+            if (isWriteOperation) {\n+                TCPPacket.writePacket(tcpBuf, packet, sendSegmentNumber, receiveSegmentNumber, srcAddr.getPort(),\n+                        dstAddr.getPort(), TCPPacket.Flag.ACK);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+                logTCP(true, bytes, sendSegmentNumber, receiveSegmentNumber, srcAddr, dstAddr, false);\n+\n+                sendSegmentNumber += bytes;\n+\n+                TCPPacket.writePacket(tcpBuf, null, receiveSegmentNumber, sendSegmentNumber, dstAddr.getPort(),\n+                        srcAddr.getPort(), TCPPacket.Flag.ACK);\n+                completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc());\n+                logTCP(true, bytes, sendSegmentNumber, receiveSegmentNumber, dstAddr, srcAddr, true);\n+            } else {\n+                TCPPacket.writePacket(tcpBuf, packet, receiveSegmentNumber, sendSegmentNumber, dstAddr.getPort(),\n+                        srcAddr.getPort(), TCPPacket.Flag.ACK);\n+                completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc());\n+                logTCP(false, bytes, receiveSegmentNumber, sendSegmentNumber, dstAddr, srcAddr, false);\n+\n+                receiveSegmentNumber += bytes;\n+\n+                TCPPacket.writePacket(tcpBuf, null, sendSegmentNumber, receiveSegmentNumber, srcAddr.getPort(),\n+                        dstAddr.getPort(), TCPPacket.Flag.ACK);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+                logTCP(false, bytes, sendSegmentNumber, receiveSegmentNumber, srcAddr, dstAddr, true);\n+            }\n+\n+            tcpBuf.release();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 202}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTE4ODQxOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODozOTozNlrOHJvzag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODozOTozNlrOHJvzag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk4MjQ0Mg==", "bodyText": "I would not do the release here but let the caller handle this.", "url": "https://github.com/netty/netty/pull/10498#discussion_r479982442", "createdAt": "2020-08-31T08:39:36Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "diffHunk": "@@ -0,0 +1,372 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.socket.DatagramPacket;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.Inet4Address;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+\n+public final class PCAPWriteHandler extends ChannelDuplexHandler {\n+\n+    private final InternalLogger logger = InternalLoggerFactory.getInstance(PCAPWriteHandler.class);\n+\n+    /**\n+     * TCP Sender Segment Number.\n+     */\n+    private int sendSegmentNumber = 1;\n+\n+    /**\n+     * TCP Receiver Segment Number\n+     */\n+    private int receiveSegmentNumber = 1;\n+\n+    /**\n+     * Source Address [TCP ONLY]\n+     */\n+    private InetSocketAddress srcAddr;\n+\n+    /**\n+     * Destination Address [TCP ONLY]\n+     */\n+    private InetSocketAddress dstAddr;\n+\n+    private final OutputStream outputStream;\n+    private PCapWriter pCapWriter;\n+    private final boolean isTCP;\n+    private final boolean isServer;\n+    private final boolean captureZeroByte;\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance.\n+     * {@code isTCP}, {@code isServer} and {@code captureZeroByte} are set to {@code false}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream) {\n+        this(outputStream, false, false, false);\n+    }\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance.\n+     * {@code captureZeroByte} is set to {@code false}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     * @param isTCP        {@code true} to capture TCP packets\n+     * @param isServer     {@code true} if we'll capture packet as server\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream, boolean isTCP, boolean isServer) {\n+        this(outputStream, isTCP, isServer, false);\n+    }\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance\n+     *\n+     * @param outputStream    OutputStream where Pcap data will be written\n+     * @param isTCP           {@code true} to capture TCP packets\n+     * @param isServer        {@code true} if we'll capture packet as server\n+     * @param captureZeroByte {@code true} if we'll capture packets with 0 bytes\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream, boolean isTCP, boolean isServer, boolean captureZeroByte) {\n+        this.outputStream = outputStream;\n+        this.isTCP = isTCP;\n+        this.isServer = isServer;\n+        this.captureZeroByte = captureZeroByte;\n+    }\n+\n+    @Override\n+    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+        this.pCapWriter = new PCapWriter(this.outputStream, ctx.alloc().buffer());\n+\n+        /*\n+         * If `isServer` is set to true, it means we'll be receiving data from client.\n+         * In this case, Source Address will be `remoteAddress` and Destination Address\n+         * will be `localAddress`.\n+         *\n+         * If `isServer` is set to false, it means we'll be sending data to server.\n+         * In this case, Source Address will be `localAddress` and Destination Address\n+         * will be `remoteAddress`.\n+         */\n+        if (isTCP) {\n+            if (isServer) {\n+                srcAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().localAddress();\n+            } else {\n+                srcAddr = (InetSocketAddress) ctx.channel().localAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+            }\n+        }\n+\n+        // If `isTCP` is true, then we'll simulate a fake handshake.\n+        if (isTCP) {\n+            logger.debug(\"Starting Fake TCP 3-Way Handshake\");\n+\n+            ByteBuf tcpBuf = ctx.alloc().buffer();\n+\n+            // Write SYN with Normal Source and Destination Address\n+            TCPPacket.writePacket(tcpBuf, null, 0, 0, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.Flag.SYN);\n+            completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+\n+            // Write SYN+ACK with Reversed Source and Destination Address\n+            TCPPacket.writePacket(tcpBuf, null, 0, 1, dstAddr.getPort(), srcAddr.getPort(), TCPPacket.Flag.SYN,\n+                    TCPPacket.Flag.ACK);\n+            completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc());\n+\n+            // Write ACK with Normal Source and Destination Address\n+            TCPPacket.writePacket(tcpBuf, null, 1, 1, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.Flag.ACK);\n+            completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+\n+            tcpBuf.release();\n+\n+            logger.debug(\"Finished Fake TCP 3-Way Handshake\");\n+        }\n+\n+        super.channelActive(ctx);\n+    }\n+\n+    @Override\n+    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n+        writePacket(ctx, msg, false);\n+        super.channelRead(ctx, msg);\n+    }\n+\n+    @Override\n+    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {\n+        writePacket(ctx, msg, true);\n+        super.write(ctx, msg, promise);\n+    }\n+\n+    private void writePacket(ChannelHandlerContext ctx, Object msg, boolean isWriteOperation) throws Exception {\n+        if (msg instanceof ByteBuf) {\n+\n+            // If bytes are 0 and `captureZeroByte` is false, we won't capture this.\n+            if (((ByteBuf) msg).readableBytes() == 0 && !captureZeroByte) {\n+                logger.debug(\"Discarding Zero Byte TCP Packet. isWriteOperation {}\", isWriteOperation);\n+                return;\n+            }\n+\n+            ByteBuf packet = ((ByteBuf) msg).duplicate();\n+            int bytes = packet.readableBytes();\n+\n+            ByteBuf tcpBuf = ctx.alloc().buffer();\n+\n+            if (isWriteOperation) {\n+                TCPPacket.writePacket(tcpBuf, packet, sendSegmentNumber, receiveSegmentNumber, srcAddr.getPort(),\n+                        dstAddr.getPort(), TCPPacket.Flag.ACK);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+                logTCP(true, bytes, sendSegmentNumber, receiveSegmentNumber, srcAddr, dstAddr, false);\n+\n+                sendSegmentNumber += bytes;\n+\n+                TCPPacket.writePacket(tcpBuf, null, receiveSegmentNumber, sendSegmentNumber, dstAddr.getPort(),\n+                        srcAddr.getPort(), TCPPacket.Flag.ACK);\n+                completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc());\n+                logTCP(true, bytes, sendSegmentNumber, receiveSegmentNumber, dstAddr, srcAddr, true);\n+            } else {\n+                TCPPacket.writePacket(tcpBuf, packet, receiveSegmentNumber, sendSegmentNumber, dstAddr.getPort(),\n+                        srcAddr.getPort(), TCPPacket.Flag.ACK);\n+                completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc());\n+                logTCP(false, bytes, receiveSegmentNumber, sendSegmentNumber, dstAddr, srcAddr, false);\n+\n+                receiveSegmentNumber += bytes;\n+\n+                TCPPacket.writePacket(tcpBuf, null, sendSegmentNumber, receiveSegmentNumber, srcAddr.getPort(),\n+                        dstAddr.getPort(), TCPPacket.Flag.ACK);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+                logTCP(false, bytes, sendSegmentNumber, receiveSegmentNumber, srcAddr, dstAddr, true);\n+            }\n+\n+            tcpBuf.release();\n+        } else if (msg instanceof DatagramPacket) {\n+            handleUDP(ctx, ((DatagramPacket) msg).duplicate());\n+        } else {\n+            logger.error(\"Discarding Pcap Write for Object {}\", msg);\n+        }\n+    }\n+\n+    private void logTCP(boolean isWriteOperation, int bytes, int sendSegmentNumber, int receiveSegmentNumber,\n+                        InetSocketAddress srcAddr, InetSocketAddress dstAddr, boolean AckOnly) {\n+        if (AckOnly) {\n+            logger.debug(\"Writing TCP ACK, isWriteOperation {}, Segment Number {}, Ack Number {}, Src Addr {}, \"\n+                    + \"Dst Addr {}\", isWriteOperation, sendSegmentNumber, receiveSegmentNumber, dstAddr, srcAddr);\n+        } else {\n+            logger.debug(\"Writing TCP Data of {} Bytes, isWriteOperation {}, Segment Number {}, Ack Number {}, \" +\n+                            \"Src Addr {}, Dst Addr {}\", bytes, isWriteOperation, sendSegmentNumber,\n+                    receiveSegmentNumber, srcAddr, dstAddr);\n+        }\n+    }\n+\n+    private void handleUDP(ChannelHandlerContext ctx, DatagramPacket datagramPacket) throws IOException {\n+        ByteBuf udpBuf = ctx.alloc().buffer();\n+\n+        InetSocketAddress srcAddr = datagramPacket.sender();\n+        InetSocketAddress dstAddr = datagramPacket.recipient();\n+\n+        logger.debug(\"Writing UDP Data of {} Bytes, Src Addr {}, Dst Addr {}\", datagramPacket.content().readableBytes()\n+                , srcAddr, dstAddr);\n+\n+        UDPPacket.writePacket(udpBuf,\n+                datagramPacket.content(),\n+                srcAddr.getPort(),\n+                dstAddr.getPort());\n+\n+        completeUDPWrite(srcAddr, dstAddr, udpBuf, ctx.alloc());\n+\n+        udpBuf.release();\n+    }\n+\n+    private void completeTCPWrite(InetSocketAddress srcAddr, InetSocketAddress dstAddr, ByteBuf tcpBuf,\n+                                  ByteBufAllocator byteBufAllocator) throws IOException {\n+\n+        ByteBuf ipBuf = byteBufAllocator.buffer();\n+        ByteBuf ethernetBuf = byteBufAllocator.buffer();\n+\n+        try {\n+\n+            if (srcAddr.getAddress() instanceof Inet4Address) {\n+                IPPacket.writeTCPv4(ipBuf,\n+                        tcpBuf,\n+                        ipv4ToInt(srcAddr.getAddress()),\n+                        ipv4ToInt(dstAddr.getAddress()));\n+\n+                EthernetPacket.writeIPv4(ethernetBuf, ipBuf);\n+            } else {\n+                IPPacket.writeTCPv6(ipBuf,\n+                        tcpBuf,\n+                        srcAddr.getAddress().getAddress(),\n+                        dstAddr.getAddress().getAddress());\n+\n+                EthernetPacket.writeIPv6(ethernetBuf, ipBuf);\n+            }\n+\n+            pCapWriter.writePacket(byteBufAllocator.buffer(), ethernetBuf);\n+        } catch (IOException ex) {\n+            tcpBuf.release();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 267}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTE4OTczOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODozOTo1OFrOHJv0OA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODozOTo1OFrOHJv0OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk4MjY0OA==", "bodyText": "I would not do this here but let the caller do this as the caller is the one that allocated this buffer", "url": "https://github.com/netty/netty/pull/10498#discussion_r479982648", "createdAt": "2020-08-31T08:39:58Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "diffHunk": "@@ -0,0 +1,372 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.socket.DatagramPacket;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.Inet4Address;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+\n+public final class PCAPWriteHandler extends ChannelDuplexHandler {\n+\n+    private final InternalLogger logger = InternalLoggerFactory.getInstance(PCAPWriteHandler.class);\n+\n+    /**\n+     * TCP Sender Segment Number.\n+     */\n+    private int sendSegmentNumber = 1;\n+\n+    /**\n+     * TCP Receiver Segment Number\n+     */\n+    private int receiveSegmentNumber = 1;\n+\n+    /**\n+     * Source Address [TCP ONLY]\n+     */\n+    private InetSocketAddress srcAddr;\n+\n+    /**\n+     * Destination Address [TCP ONLY]\n+     */\n+    private InetSocketAddress dstAddr;\n+\n+    private final OutputStream outputStream;\n+    private PCapWriter pCapWriter;\n+    private final boolean isTCP;\n+    private final boolean isServer;\n+    private final boolean captureZeroByte;\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance.\n+     * {@code isTCP}, {@code isServer} and {@code captureZeroByte} are set to {@code false}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream) {\n+        this(outputStream, false, false, false);\n+    }\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance.\n+     * {@code captureZeroByte} is set to {@code false}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     * @param isTCP        {@code true} to capture TCP packets\n+     * @param isServer     {@code true} if we'll capture packet as server\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream, boolean isTCP, boolean isServer) {\n+        this(outputStream, isTCP, isServer, false);\n+    }\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance\n+     *\n+     * @param outputStream    OutputStream where Pcap data will be written\n+     * @param isTCP           {@code true} to capture TCP packets\n+     * @param isServer        {@code true} if we'll capture packet as server\n+     * @param captureZeroByte {@code true} if we'll capture packets with 0 bytes\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream, boolean isTCP, boolean isServer, boolean captureZeroByte) {\n+        this.outputStream = outputStream;\n+        this.isTCP = isTCP;\n+        this.isServer = isServer;\n+        this.captureZeroByte = captureZeroByte;\n+    }\n+\n+    @Override\n+    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+        this.pCapWriter = new PCapWriter(this.outputStream, ctx.alloc().buffer());\n+\n+        /*\n+         * If `isServer` is set to true, it means we'll be receiving data from client.\n+         * In this case, Source Address will be `remoteAddress` and Destination Address\n+         * will be `localAddress`.\n+         *\n+         * If `isServer` is set to false, it means we'll be sending data to server.\n+         * In this case, Source Address will be `localAddress` and Destination Address\n+         * will be `remoteAddress`.\n+         */\n+        if (isTCP) {\n+            if (isServer) {\n+                srcAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().localAddress();\n+            } else {\n+                srcAddr = (InetSocketAddress) ctx.channel().localAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+            }\n+        }\n+\n+        // If `isTCP` is true, then we'll simulate a fake handshake.\n+        if (isTCP) {\n+            logger.debug(\"Starting Fake TCP 3-Way Handshake\");\n+\n+            ByteBuf tcpBuf = ctx.alloc().buffer();\n+\n+            // Write SYN with Normal Source and Destination Address\n+            TCPPacket.writePacket(tcpBuf, null, 0, 0, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.Flag.SYN);\n+            completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+\n+            // Write SYN+ACK with Reversed Source and Destination Address\n+            TCPPacket.writePacket(tcpBuf, null, 0, 1, dstAddr.getPort(), srcAddr.getPort(), TCPPacket.Flag.SYN,\n+                    TCPPacket.Flag.ACK);\n+            completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc());\n+\n+            // Write ACK with Normal Source and Destination Address\n+            TCPPacket.writePacket(tcpBuf, null, 1, 1, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.Flag.ACK);\n+            completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+\n+            tcpBuf.release();\n+\n+            logger.debug(\"Finished Fake TCP 3-Way Handshake\");\n+        }\n+\n+        super.channelActive(ctx);\n+    }\n+\n+    @Override\n+    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n+        writePacket(ctx, msg, false);\n+        super.channelRead(ctx, msg);\n+    }\n+\n+    @Override\n+    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {\n+        writePacket(ctx, msg, true);\n+        super.write(ctx, msg, promise);\n+    }\n+\n+    private void writePacket(ChannelHandlerContext ctx, Object msg, boolean isWriteOperation) throws Exception {\n+        if (msg instanceof ByteBuf) {\n+\n+            // If bytes are 0 and `captureZeroByte` is false, we won't capture this.\n+            if (((ByteBuf) msg).readableBytes() == 0 && !captureZeroByte) {\n+                logger.debug(\"Discarding Zero Byte TCP Packet. isWriteOperation {}\", isWriteOperation);\n+                return;\n+            }\n+\n+            ByteBuf packet = ((ByteBuf) msg).duplicate();\n+            int bytes = packet.readableBytes();\n+\n+            ByteBuf tcpBuf = ctx.alloc().buffer();\n+\n+            if (isWriteOperation) {\n+                TCPPacket.writePacket(tcpBuf, packet, sendSegmentNumber, receiveSegmentNumber, srcAddr.getPort(),\n+                        dstAddr.getPort(), TCPPacket.Flag.ACK);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+                logTCP(true, bytes, sendSegmentNumber, receiveSegmentNumber, srcAddr, dstAddr, false);\n+\n+                sendSegmentNumber += bytes;\n+\n+                TCPPacket.writePacket(tcpBuf, null, receiveSegmentNumber, sendSegmentNumber, dstAddr.getPort(),\n+                        srcAddr.getPort(), TCPPacket.Flag.ACK);\n+                completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc());\n+                logTCP(true, bytes, sendSegmentNumber, receiveSegmentNumber, dstAddr, srcAddr, true);\n+            } else {\n+                TCPPacket.writePacket(tcpBuf, packet, receiveSegmentNumber, sendSegmentNumber, dstAddr.getPort(),\n+                        srcAddr.getPort(), TCPPacket.Flag.ACK);\n+                completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc());\n+                logTCP(false, bytes, receiveSegmentNumber, sendSegmentNumber, dstAddr, srcAddr, false);\n+\n+                receiveSegmentNumber += bytes;\n+\n+                TCPPacket.writePacket(tcpBuf, null, sendSegmentNumber, receiveSegmentNumber, srcAddr.getPort(),\n+                        dstAddr.getPort(), TCPPacket.Flag.ACK);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+                logTCP(false, bytes, sendSegmentNumber, receiveSegmentNumber, srcAddr, dstAddr, true);\n+            }\n+\n+            tcpBuf.release();\n+        } else if (msg instanceof DatagramPacket) {\n+            handleUDP(ctx, ((DatagramPacket) msg).duplicate());\n+        } else {\n+            logger.error(\"Discarding Pcap Write for Object {}\", msg);\n+        }\n+    }\n+\n+    private void logTCP(boolean isWriteOperation, int bytes, int sendSegmentNumber, int receiveSegmentNumber,\n+                        InetSocketAddress srcAddr, InetSocketAddress dstAddr, boolean AckOnly) {\n+        if (AckOnly) {\n+            logger.debug(\"Writing TCP ACK, isWriteOperation {}, Segment Number {}, Ack Number {}, Src Addr {}, \"\n+                    + \"Dst Addr {}\", isWriteOperation, sendSegmentNumber, receiveSegmentNumber, dstAddr, srcAddr);\n+        } else {\n+            logger.debug(\"Writing TCP Data of {} Bytes, isWriteOperation {}, Segment Number {}, Ack Number {}, \" +\n+                            \"Src Addr {}, Dst Addr {}\", bytes, isWriteOperation, sendSegmentNumber,\n+                    receiveSegmentNumber, srcAddr, dstAddr);\n+        }\n+    }\n+\n+    private void handleUDP(ChannelHandlerContext ctx, DatagramPacket datagramPacket) throws IOException {\n+        ByteBuf udpBuf = ctx.alloc().buffer();\n+\n+        InetSocketAddress srcAddr = datagramPacket.sender();\n+        InetSocketAddress dstAddr = datagramPacket.recipient();\n+\n+        logger.debug(\"Writing UDP Data of {} Bytes, Src Addr {}, Dst Addr {}\", datagramPacket.content().readableBytes()\n+                , srcAddr, dstAddr);\n+\n+        UDPPacket.writePacket(udpBuf,\n+                datagramPacket.content(),\n+                srcAddr.getPort(),\n+                dstAddr.getPort());\n+\n+        completeUDPWrite(srcAddr, dstAddr, udpBuf, ctx.alloc());\n+\n+        udpBuf.release();\n+    }\n+\n+    private void completeTCPWrite(InetSocketAddress srcAddr, InetSocketAddress dstAddr, ByteBuf tcpBuf,\n+                                  ByteBufAllocator byteBufAllocator) throws IOException {\n+\n+        ByteBuf ipBuf = byteBufAllocator.buffer();\n+        ByteBuf ethernetBuf = byteBufAllocator.buffer();\n+\n+        try {\n+\n+            if (srcAddr.getAddress() instanceof Inet4Address) {\n+                IPPacket.writeTCPv4(ipBuf,\n+                        tcpBuf,\n+                        ipv4ToInt(srcAddr.getAddress()),\n+                        ipv4ToInt(dstAddr.getAddress()));\n+\n+                EthernetPacket.writeIPv4(ethernetBuf, ipBuf);\n+            } else {\n+                IPPacket.writeTCPv6(ipBuf,\n+                        tcpBuf,\n+                        srcAddr.getAddress().getAddress(),\n+                        dstAddr.getAddress().getAddress());\n+\n+                EthernetPacket.writeIPv6(ethernetBuf, ipBuf);\n+            }\n+\n+            pCapWriter.writePacket(byteBufAllocator.buffer(), ethernetBuf);\n+        } catch (IOException ex) {\n+            tcpBuf.release();\n+            throw ex;\n+        } finally {\n+            ipBuf.release();\n+            ethernetBuf.release();\n+        }\n+    }\n+\n+    private void completeUDPWrite(InetSocketAddress srcAddr, InetSocketAddress dstAddr, ByteBuf udpBuf,\n+                                  ByteBufAllocator byteBufAllocator) throws IOException {\n+\n+        ByteBuf ipBuf = byteBufAllocator.buffer();\n+        ByteBuf ethernetBuf = byteBufAllocator.buffer();\n+\n+        try {\n+\n+            if (srcAddr.getAddress() instanceof Inet4Address) {\n+                IPPacket.writeUDPv4(ipBuf,\n+                        udpBuf,\n+                        ipv4ToInt(srcAddr.getAddress()),\n+                        ipv4ToInt(dstAddr.getAddress()));\n+\n+                EthernetPacket.writeIPv4(ethernetBuf, ipBuf);\n+            } else {\n+                IPPacket.writeUDPv6(ipBuf,\n+                        udpBuf,\n+                        srcAddr.getAddress().getAddress(),\n+                        dstAddr.getAddress().getAddress());\n+\n+                EthernetPacket.writeIPv6(ethernetBuf, ipBuf);\n+            }\n+\n+            pCapWriter.writePacket(byteBufAllocator.buffer(), ethernetBuf);\n+        } catch (IOException ex) {\n+            udpBuf.release();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 301}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTE5MDkyOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODo0MDoyMFrOHJv0_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODo0MDoyMFrOHJv0_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk4Mjg0NA==", "bodyText": "This can use the \"NetUtils.\" method now", "url": "https://github.com/netty/netty/pull/10498#discussion_r479982844", "createdAt": "2020-08-31T08:40:20Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "diffHunk": "@@ -0,0 +1,372 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.socket.DatagramPacket;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.Inet4Address;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+\n+public final class PCAPWriteHandler extends ChannelDuplexHandler {\n+\n+    private final InternalLogger logger = InternalLoggerFactory.getInstance(PCAPWriteHandler.class);\n+\n+    /**\n+     * TCP Sender Segment Number.\n+     */\n+    private int sendSegmentNumber = 1;\n+\n+    /**\n+     * TCP Receiver Segment Number\n+     */\n+    private int receiveSegmentNumber = 1;\n+\n+    /**\n+     * Source Address [TCP ONLY]\n+     */\n+    private InetSocketAddress srcAddr;\n+\n+    /**\n+     * Destination Address [TCP ONLY]\n+     */\n+    private InetSocketAddress dstAddr;\n+\n+    private final OutputStream outputStream;\n+    private PCapWriter pCapWriter;\n+    private final boolean isTCP;\n+    private final boolean isServer;\n+    private final boolean captureZeroByte;\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance.\n+     * {@code isTCP}, {@code isServer} and {@code captureZeroByte} are set to {@code false}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream) {\n+        this(outputStream, false, false, false);\n+    }\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance.\n+     * {@code captureZeroByte} is set to {@code false}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     * @param isTCP        {@code true} to capture TCP packets\n+     * @param isServer     {@code true} if we'll capture packet as server\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream, boolean isTCP, boolean isServer) {\n+        this(outputStream, isTCP, isServer, false);\n+    }\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance\n+     *\n+     * @param outputStream    OutputStream where Pcap data will be written\n+     * @param isTCP           {@code true} to capture TCP packets\n+     * @param isServer        {@code true} if we'll capture packet as server\n+     * @param captureZeroByte {@code true} if we'll capture packets with 0 bytes\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream, boolean isTCP, boolean isServer, boolean captureZeroByte) {\n+        this.outputStream = outputStream;\n+        this.isTCP = isTCP;\n+        this.isServer = isServer;\n+        this.captureZeroByte = captureZeroByte;\n+    }\n+\n+    @Override\n+    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+        this.pCapWriter = new PCapWriter(this.outputStream, ctx.alloc().buffer());\n+\n+        /*\n+         * If `isServer` is set to true, it means we'll be receiving data from client.\n+         * In this case, Source Address will be `remoteAddress` and Destination Address\n+         * will be `localAddress`.\n+         *\n+         * If `isServer` is set to false, it means we'll be sending data to server.\n+         * In this case, Source Address will be `localAddress` and Destination Address\n+         * will be `remoteAddress`.\n+         */\n+        if (isTCP) {\n+            if (isServer) {\n+                srcAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().localAddress();\n+            } else {\n+                srcAddr = (InetSocketAddress) ctx.channel().localAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+            }\n+        }\n+\n+        // If `isTCP` is true, then we'll simulate a fake handshake.\n+        if (isTCP) {\n+            logger.debug(\"Starting Fake TCP 3-Way Handshake\");\n+\n+            ByteBuf tcpBuf = ctx.alloc().buffer();\n+\n+            // Write SYN with Normal Source and Destination Address\n+            TCPPacket.writePacket(tcpBuf, null, 0, 0, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.Flag.SYN);\n+            completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+\n+            // Write SYN+ACK with Reversed Source and Destination Address\n+            TCPPacket.writePacket(tcpBuf, null, 0, 1, dstAddr.getPort(), srcAddr.getPort(), TCPPacket.Flag.SYN,\n+                    TCPPacket.Flag.ACK);\n+            completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc());\n+\n+            // Write ACK with Normal Source and Destination Address\n+            TCPPacket.writePacket(tcpBuf, null, 1, 1, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.Flag.ACK);\n+            completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+\n+            tcpBuf.release();\n+\n+            logger.debug(\"Finished Fake TCP 3-Way Handshake\");\n+        }\n+\n+        super.channelActive(ctx);\n+    }\n+\n+    @Override\n+    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n+        writePacket(ctx, msg, false);\n+        super.channelRead(ctx, msg);\n+    }\n+\n+    @Override\n+    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {\n+        writePacket(ctx, msg, true);\n+        super.write(ctx, msg, promise);\n+    }\n+\n+    private void writePacket(ChannelHandlerContext ctx, Object msg, boolean isWriteOperation) throws Exception {\n+        if (msg instanceof ByteBuf) {\n+\n+            // If bytes are 0 and `captureZeroByte` is false, we won't capture this.\n+            if (((ByteBuf) msg).readableBytes() == 0 && !captureZeroByte) {\n+                logger.debug(\"Discarding Zero Byte TCP Packet. isWriteOperation {}\", isWriteOperation);\n+                return;\n+            }\n+\n+            ByteBuf packet = ((ByteBuf) msg).duplicate();\n+            int bytes = packet.readableBytes();\n+\n+            ByteBuf tcpBuf = ctx.alloc().buffer();\n+\n+            if (isWriteOperation) {\n+                TCPPacket.writePacket(tcpBuf, packet, sendSegmentNumber, receiveSegmentNumber, srcAddr.getPort(),\n+                        dstAddr.getPort(), TCPPacket.Flag.ACK);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+                logTCP(true, bytes, sendSegmentNumber, receiveSegmentNumber, srcAddr, dstAddr, false);\n+\n+                sendSegmentNumber += bytes;\n+\n+                TCPPacket.writePacket(tcpBuf, null, receiveSegmentNumber, sendSegmentNumber, dstAddr.getPort(),\n+                        srcAddr.getPort(), TCPPacket.Flag.ACK);\n+                completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc());\n+                logTCP(true, bytes, sendSegmentNumber, receiveSegmentNumber, dstAddr, srcAddr, true);\n+            } else {\n+                TCPPacket.writePacket(tcpBuf, packet, receiveSegmentNumber, sendSegmentNumber, dstAddr.getPort(),\n+                        srcAddr.getPort(), TCPPacket.Flag.ACK);\n+                completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc());\n+                logTCP(false, bytes, receiveSegmentNumber, sendSegmentNumber, dstAddr, srcAddr, false);\n+\n+                receiveSegmentNumber += bytes;\n+\n+                TCPPacket.writePacket(tcpBuf, null, sendSegmentNumber, receiveSegmentNumber, srcAddr.getPort(),\n+                        dstAddr.getPort(), TCPPacket.Flag.ACK);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+                logTCP(false, bytes, sendSegmentNumber, receiveSegmentNumber, srcAddr, dstAddr, true);\n+            }\n+\n+            tcpBuf.release();\n+        } else if (msg instanceof DatagramPacket) {\n+            handleUDP(ctx, ((DatagramPacket) msg).duplicate());\n+        } else {\n+            logger.error(\"Discarding Pcap Write for Object {}\", msg);\n+        }\n+    }\n+\n+    private void logTCP(boolean isWriteOperation, int bytes, int sendSegmentNumber, int receiveSegmentNumber,\n+                        InetSocketAddress srcAddr, InetSocketAddress dstAddr, boolean AckOnly) {\n+        if (AckOnly) {\n+            logger.debug(\"Writing TCP ACK, isWriteOperation {}, Segment Number {}, Ack Number {}, Src Addr {}, \"\n+                    + \"Dst Addr {}\", isWriteOperation, sendSegmentNumber, receiveSegmentNumber, dstAddr, srcAddr);\n+        } else {\n+            logger.debug(\"Writing TCP Data of {} Bytes, isWriteOperation {}, Segment Number {}, Ack Number {}, \" +\n+                            \"Src Addr {}, Dst Addr {}\", bytes, isWriteOperation, sendSegmentNumber,\n+                    receiveSegmentNumber, srcAddr, dstAddr);\n+        }\n+    }\n+\n+    private void handleUDP(ChannelHandlerContext ctx, DatagramPacket datagramPacket) throws IOException {\n+        ByteBuf udpBuf = ctx.alloc().buffer();\n+\n+        InetSocketAddress srcAddr = datagramPacket.sender();\n+        InetSocketAddress dstAddr = datagramPacket.recipient();\n+\n+        logger.debug(\"Writing UDP Data of {} Bytes, Src Addr {}, Dst Addr {}\", datagramPacket.content().readableBytes()\n+                , srcAddr, dstAddr);\n+\n+        UDPPacket.writePacket(udpBuf,\n+                datagramPacket.content(),\n+                srcAddr.getPort(),\n+                dstAddr.getPort());\n+\n+        completeUDPWrite(srcAddr, dstAddr, udpBuf, ctx.alloc());\n+\n+        udpBuf.release();\n+    }\n+\n+    private void completeTCPWrite(InetSocketAddress srcAddr, InetSocketAddress dstAddr, ByteBuf tcpBuf,\n+                                  ByteBufAllocator byteBufAllocator) throws IOException {\n+\n+        ByteBuf ipBuf = byteBufAllocator.buffer();\n+        ByteBuf ethernetBuf = byteBufAllocator.buffer();\n+\n+        try {\n+\n+            if (srcAddr.getAddress() instanceof Inet4Address) {\n+                IPPacket.writeTCPv4(ipBuf,\n+                        tcpBuf,\n+                        ipv4ToInt(srcAddr.getAddress()),\n+                        ipv4ToInt(dstAddr.getAddress()));\n+\n+                EthernetPacket.writeIPv4(ethernetBuf, ipBuf);\n+            } else {\n+                IPPacket.writeTCPv6(ipBuf,\n+                        tcpBuf,\n+                        srcAddr.getAddress().getAddress(),\n+                        dstAddr.getAddress().getAddress());\n+\n+                EthernetPacket.writeIPv6(ethernetBuf, ipBuf);\n+            }\n+\n+            pCapWriter.writePacket(byteBufAllocator.buffer(), ethernetBuf);\n+        } catch (IOException ex) {\n+            tcpBuf.release();\n+            throw ex;\n+        } finally {\n+            ipBuf.release();\n+            ethernetBuf.release();\n+        }\n+    }\n+\n+    private void completeUDPWrite(InetSocketAddress srcAddr, InetSocketAddress dstAddr, ByteBuf udpBuf,\n+                                  ByteBufAllocator byteBufAllocator) throws IOException {\n+\n+        ByteBuf ipBuf = byteBufAllocator.buffer();\n+        ByteBuf ethernetBuf = byteBufAllocator.buffer();\n+\n+        try {\n+\n+            if (srcAddr.getAddress() instanceof Inet4Address) {\n+                IPPacket.writeUDPv4(ipBuf,\n+                        udpBuf,\n+                        ipv4ToInt(srcAddr.getAddress()),\n+                        ipv4ToInt(dstAddr.getAddress()));\n+\n+                EthernetPacket.writeIPv4(ethernetBuf, ipBuf);\n+            } else {\n+                IPPacket.writeUDPv6(ipBuf,\n+                        udpBuf,\n+                        srcAddr.getAddress().getAddress(),\n+                        dstAddr.getAddress().getAddress());\n+\n+                EthernetPacket.writeIPv6(ethernetBuf, ipBuf);\n+            }\n+\n+            pCapWriter.writePacket(byteBufAllocator.buffer(), ethernetBuf);\n+        } catch (IOException ex) {\n+            udpBuf.release();\n+            throw ex;\n+        } finally {\n+            ipBuf.release();\n+            ethernetBuf.release();\n+        }\n+    }\n+\n+    @Override\n+    public void handlerRemoved(ChannelHandlerContext ctx) throws Exception {\n+\n+        // If `isTCP` is true, then we'll simulate a `FIN` flow.\n+        if (isTCP) {\n+            logger.debug(\"Starting Fake TCP FIN+ACK Flow to close connection\");\n+\n+            ByteBuf tcpBuf = ctx.alloc().buffer();\n+\n+            // Write FIN+ACK with Normal Source and Destination Address\n+            TCPPacket.writePacket(tcpBuf, null, sendSegmentNumber, receiveSegmentNumber, srcAddr.getPort(),\n+                    dstAddr.getPort(), TCPPacket.Flag.FIN, TCPPacket.Flag.ACK);\n+            completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+\n+            // Write FIN+ACK with Reversed Source and Destination Address\n+            TCPPacket.writePacket(tcpBuf, null, receiveSegmentNumber, sendSegmentNumber, dstAddr.getPort(),\n+                    srcAddr.getPort(), TCPPacket.Flag.FIN, TCPPacket.Flag.ACK);\n+            completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc());\n+\n+            // Write ACK with Normal Source and Destination Address\n+            TCPPacket.writePacket(tcpBuf, null, sendSegmentNumber + 1, receiveSegmentNumber + 1,\n+                    srcAddr.getPort(), dstAddr.getPort(), TCPPacket.Flag.ACK);\n+            completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+\n+            tcpBuf.release();\n+\n+            logger.debug(\"Finished Fake TCP FIN+ACK Flow to close connection\");\n+        }\n+\n+        this.pCapWriter.close();\n+        super.handlerRemoved(ctx);\n+    }\n+\n+    private int ipv4ToInt(InetAddress inetAddress) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 342}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTE5MjIxOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODo0MDo0OFrOHJv13g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODo0MDo0OFrOHJv13g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk4MzA3MA==", "bodyText": "Replace with ctx.fireExceptionCause(...)", "url": "https://github.com/netty/netty/pull/10498#discussion_r479983070", "createdAt": "2020-08-31T08:40:48Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "diffHunk": "@@ -0,0 +1,372 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.socket.DatagramPacket;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.Inet4Address;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+\n+public final class PCAPWriteHandler extends ChannelDuplexHandler {\n+\n+    private final InternalLogger logger = InternalLoggerFactory.getInstance(PCAPWriteHandler.class);\n+\n+    /**\n+     * TCP Sender Segment Number.\n+     */\n+    private int sendSegmentNumber = 1;\n+\n+    /**\n+     * TCP Receiver Segment Number\n+     */\n+    private int receiveSegmentNumber = 1;\n+\n+    /**\n+     * Source Address [TCP ONLY]\n+     */\n+    private InetSocketAddress srcAddr;\n+\n+    /**\n+     * Destination Address [TCP ONLY]\n+     */\n+    private InetSocketAddress dstAddr;\n+\n+    private final OutputStream outputStream;\n+    private PCapWriter pCapWriter;\n+    private final boolean isTCP;\n+    private final boolean isServer;\n+    private final boolean captureZeroByte;\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance.\n+     * {@code isTCP}, {@code isServer} and {@code captureZeroByte} are set to {@code false}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream) {\n+        this(outputStream, false, false, false);\n+    }\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance.\n+     * {@code captureZeroByte} is set to {@code false}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     * @param isTCP        {@code true} to capture TCP packets\n+     * @param isServer     {@code true} if we'll capture packet as server\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream, boolean isTCP, boolean isServer) {\n+        this(outputStream, isTCP, isServer, false);\n+    }\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance\n+     *\n+     * @param outputStream    OutputStream where Pcap data will be written\n+     * @param isTCP           {@code true} to capture TCP packets\n+     * @param isServer        {@code true} if we'll capture packet as server\n+     * @param captureZeroByte {@code true} if we'll capture packets with 0 bytes\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream, boolean isTCP, boolean isServer, boolean captureZeroByte) {\n+        this.outputStream = outputStream;\n+        this.isTCP = isTCP;\n+        this.isServer = isServer;\n+        this.captureZeroByte = captureZeroByte;\n+    }\n+\n+    @Override\n+    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+        this.pCapWriter = new PCapWriter(this.outputStream, ctx.alloc().buffer());\n+\n+        /*\n+         * If `isServer` is set to true, it means we'll be receiving data from client.\n+         * In this case, Source Address will be `remoteAddress` and Destination Address\n+         * will be `localAddress`.\n+         *\n+         * If `isServer` is set to false, it means we'll be sending data to server.\n+         * In this case, Source Address will be `localAddress` and Destination Address\n+         * will be `remoteAddress`.\n+         */\n+        if (isTCP) {\n+            if (isServer) {\n+                srcAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().localAddress();\n+            } else {\n+                srcAddr = (InetSocketAddress) ctx.channel().localAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+            }\n+        }\n+\n+        // If `isTCP` is true, then we'll simulate a fake handshake.\n+        if (isTCP) {\n+            logger.debug(\"Starting Fake TCP 3-Way Handshake\");\n+\n+            ByteBuf tcpBuf = ctx.alloc().buffer();\n+\n+            // Write SYN with Normal Source and Destination Address\n+            TCPPacket.writePacket(tcpBuf, null, 0, 0, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.Flag.SYN);\n+            completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+\n+            // Write SYN+ACK with Reversed Source and Destination Address\n+            TCPPacket.writePacket(tcpBuf, null, 0, 1, dstAddr.getPort(), srcAddr.getPort(), TCPPacket.Flag.SYN,\n+                    TCPPacket.Flag.ACK);\n+            completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc());\n+\n+            // Write ACK with Normal Source and Destination Address\n+            TCPPacket.writePacket(tcpBuf, null, 1, 1, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.Flag.ACK);\n+            completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+\n+            tcpBuf.release();\n+\n+            logger.debug(\"Finished Fake TCP 3-Way Handshake\");\n+        }\n+\n+        super.channelActive(ctx);\n+    }\n+\n+    @Override\n+    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n+        writePacket(ctx, msg, false);\n+        super.channelRead(ctx, msg);\n+    }\n+\n+    @Override\n+    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {\n+        writePacket(ctx, msg, true);\n+        super.write(ctx, msg, promise);\n+    }\n+\n+    private void writePacket(ChannelHandlerContext ctx, Object msg, boolean isWriteOperation) throws Exception {\n+        if (msg instanceof ByteBuf) {\n+\n+            // If bytes are 0 and `captureZeroByte` is false, we won't capture this.\n+            if (((ByteBuf) msg).readableBytes() == 0 && !captureZeroByte) {\n+                logger.debug(\"Discarding Zero Byte TCP Packet. isWriteOperation {}\", isWriteOperation);\n+                return;\n+            }\n+\n+            ByteBuf packet = ((ByteBuf) msg).duplicate();\n+            int bytes = packet.readableBytes();\n+\n+            ByteBuf tcpBuf = ctx.alloc().buffer();\n+\n+            if (isWriteOperation) {\n+                TCPPacket.writePacket(tcpBuf, packet, sendSegmentNumber, receiveSegmentNumber, srcAddr.getPort(),\n+                        dstAddr.getPort(), TCPPacket.Flag.ACK);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+                logTCP(true, bytes, sendSegmentNumber, receiveSegmentNumber, srcAddr, dstAddr, false);\n+\n+                sendSegmentNumber += bytes;\n+\n+                TCPPacket.writePacket(tcpBuf, null, receiveSegmentNumber, sendSegmentNumber, dstAddr.getPort(),\n+                        srcAddr.getPort(), TCPPacket.Flag.ACK);\n+                completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc());\n+                logTCP(true, bytes, sendSegmentNumber, receiveSegmentNumber, dstAddr, srcAddr, true);\n+            } else {\n+                TCPPacket.writePacket(tcpBuf, packet, receiveSegmentNumber, sendSegmentNumber, dstAddr.getPort(),\n+                        srcAddr.getPort(), TCPPacket.Flag.ACK);\n+                completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc());\n+                logTCP(false, bytes, receiveSegmentNumber, sendSegmentNumber, dstAddr, srcAddr, false);\n+\n+                receiveSegmentNumber += bytes;\n+\n+                TCPPacket.writePacket(tcpBuf, null, sendSegmentNumber, receiveSegmentNumber, srcAddr.getPort(),\n+                        dstAddr.getPort(), TCPPacket.Flag.ACK);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+                logTCP(false, bytes, sendSegmentNumber, receiveSegmentNumber, srcAddr, dstAddr, true);\n+            }\n+\n+            tcpBuf.release();\n+        } else if (msg instanceof DatagramPacket) {\n+            handleUDP(ctx, ((DatagramPacket) msg).duplicate());\n+        } else {\n+            logger.error(\"Discarding Pcap Write for Object {}\", msg);\n+        }\n+    }\n+\n+    private void logTCP(boolean isWriteOperation, int bytes, int sendSegmentNumber, int receiveSegmentNumber,\n+                        InetSocketAddress srcAddr, InetSocketAddress dstAddr, boolean AckOnly) {\n+        if (AckOnly) {\n+            logger.debug(\"Writing TCP ACK, isWriteOperation {}, Segment Number {}, Ack Number {}, Src Addr {}, \"\n+                    + \"Dst Addr {}\", isWriteOperation, sendSegmentNumber, receiveSegmentNumber, dstAddr, srcAddr);\n+        } else {\n+            logger.debug(\"Writing TCP Data of {} Bytes, isWriteOperation {}, Segment Number {}, Ack Number {}, \" +\n+                            \"Src Addr {}, Dst Addr {}\", bytes, isWriteOperation, sendSegmentNumber,\n+                    receiveSegmentNumber, srcAddr, dstAddr);\n+        }\n+    }\n+\n+    private void handleUDP(ChannelHandlerContext ctx, DatagramPacket datagramPacket) throws IOException {\n+        ByteBuf udpBuf = ctx.alloc().buffer();\n+\n+        InetSocketAddress srcAddr = datagramPacket.sender();\n+        InetSocketAddress dstAddr = datagramPacket.recipient();\n+\n+        logger.debug(\"Writing UDP Data of {} Bytes, Src Addr {}, Dst Addr {}\", datagramPacket.content().readableBytes()\n+                , srcAddr, dstAddr);\n+\n+        UDPPacket.writePacket(udpBuf,\n+                datagramPacket.content(),\n+                srcAddr.getPort(),\n+                dstAddr.getPort());\n+\n+        completeUDPWrite(srcAddr, dstAddr, udpBuf, ctx.alloc());\n+\n+        udpBuf.release();\n+    }\n+\n+    private void completeTCPWrite(InetSocketAddress srcAddr, InetSocketAddress dstAddr, ByteBuf tcpBuf,\n+                                  ByteBufAllocator byteBufAllocator) throws IOException {\n+\n+        ByteBuf ipBuf = byteBufAllocator.buffer();\n+        ByteBuf ethernetBuf = byteBufAllocator.buffer();\n+\n+        try {\n+\n+            if (srcAddr.getAddress() instanceof Inet4Address) {\n+                IPPacket.writeTCPv4(ipBuf,\n+                        tcpBuf,\n+                        ipv4ToInt(srcAddr.getAddress()),\n+                        ipv4ToInt(dstAddr.getAddress()));\n+\n+                EthernetPacket.writeIPv4(ethernetBuf, ipBuf);\n+            } else {\n+                IPPacket.writeTCPv6(ipBuf,\n+                        tcpBuf,\n+                        srcAddr.getAddress().getAddress(),\n+                        dstAddr.getAddress().getAddress());\n+\n+                EthernetPacket.writeIPv6(ethernetBuf, ipBuf);\n+            }\n+\n+            pCapWriter.writePacket(byteBufAllocator.buffer(), ethernetBuf);\n+        } catch (IOException ex) {\n+            tcpBuf.release();\n+            throw ex;\n+        } finally {\n+            ipBuf.release();\n+            ethernetBuf.release();\n+        }\n+    }\n+\n+    private void completeUDPWrite(InetSocketAddress srcAddr, InetSocketAddress dstAddr, ByteBuf udpBuf,\n+                                  ByteBufAllocator byteBufAllocator) throws IOException {\n+\n+        ByteBuf ipBuf = byteBufAllocator.buffer();\n+        ByteBuf ethernetBuf = byteBufAllocator.buffer();\n+\n+        try {\n+\n+            if (srcAddr.getAddress() instanceof Inet4Address) {\n+                IPPacket.writeUDPv4(ipBuf,\n+                        udpBuf,\n+                        ipv4ToInt(srcAddr.getAddress()),\n+                        ipv4ToInt(dstAddr.getAddress()));\n+\n+                EthernetPacket.writeIPv4(ethernetBuf, ipBuf);\n+            } else {\n+                IPPacket.writeUDPv6(ipBuf,\n+                        udpBuf,\n+                        srcAddr.getAddress().getAddress(),\n+                        dstAddr.getAddress().getAddress());\n+\n+                EthernetPacket.writeIPv6(ethernetBuf, ipBuf);\n+            }\n+\n+            pCapWriter.writePacket(byteBufAllocator.buffer(), ethernetBuf);\n+        } catch (IOException ex) {\n+            udpBuf.release();\n+            throw ex;\n+        } finally {\n+            ipBuf.release();\n+            ethernetBuf.release();\n+        }\n+    }\n+\n+    @Override\n+    public void handlerRemoved(ChannelHandlerContext ctx) throws Exception {\n+\n+        // If `isTCP` is true, then we'll simulate a `FIN` flow.\n+        if (isTCP) {\n+            logger.debug(\"Starting Fake TCP FIN+ACK Flow to close connection\");\n+\n+            ByteBuf tcpBuf = ctx.alloc().buffer();\n+\n+            // Write FIN+ACK with Normal Source and Destination Address\n+            TCPPacket.writePacket(tcpBuf, null, sendSegmentNumber, receiveSegmentNumber, srcAddr.getPort(),\n+                    dstAddr.getPort(), TCPPacket.Flag.FIN, TCPPacket.Flag.ACK);\n+            completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+\n+            // Write FIN+ACK with Reversed Source and Destination Address\n+            TCPPacket.writePacket(tcpBuf, null, receiveSegmentNumber, sendSegmentNumber, dstAddr.getPort(),\n+                    srcAddr.getPort(), TCPPacket.Flag.FIN, TCPPacket.Flag.ACK);\n+            completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc());\n+\n+            // Write ACK with Normal Source and Destination Address\n+            TCPPacket.writePacket(tcpBuf, null, sendSegmentNumber + 1, receiveSegmentNumber + 1,\n+                    srcAddr.getPort(), dstAddr.getPort(), TCPPacket.Flag.ACK);\n+            completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+\n+            tcpBuf.release();\n+\n+            logger.debug(\"Finished Fake TCP FIN+ACK Flow to close connection\");\n+        }\n+\n+        this.pCapWriter.close();\n+        super.handlerRemoved(ctx);\n+    }\n+\n+    private int ipv4ToInt(InetAddress inetAddress) {\n+        byte[] octets = inetAddress.getAddress();\n+        assert octets.length == 4;\n+\n+        return (octets[0] & 0xff) << 24 |\n+                (octets[1] & 0xff) << 16 |\n+                (octets[2] & 0xff) << 8 |\n+                (octets[3] & 0xff);\n+    }\n+\n+    @Override\n+    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n+\n+        // If `isTCP` is true, then we'll simulate a `RST` flow.\n+        if (isTCP) {\n+            ByteBuf tcpBuf = ctx.alloc().buffer();\n+\n+            // Write RST+ACK with Normal Source and Destination Address\n+            TCPPacket.writePacket(tcpBuf, null, sendSegmentNumber, receiveSegmentNumber, srcAddr.getPort(),\n+                    dstAddr.getPort(), TCPPacket.Flag.RST, TCPPacket.Flag.ACK);\n+            completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+\n+            tcpBuf.release();\n+\n+            logger.debug(\"Sent Fake TCP RST to close connection\");\n+        }\n+\n+        this.pCapWriter.close();\n+        cause.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 370}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTE5Mjc2OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODo0MDo1OVrOHJv2MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODo0MDo1OVrOHJv2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk4MzE1Mg==", "bodyText": "do in a finally block", "url": "https://github.com/netty/netty/pull/10498#discussion_r479983152", "createdAt": "2020-08-31T08:40:59Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "diffHunk": "@@ -0,0 +1,372 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.socket.DatagramPacket;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.Inet4Address;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+\n+public final class PCAPWriteHandler extends ChannelDuplexHandler {\n+\n+    private final InternalLogger logger = InternalLoggerFactory.getInstance(PCAPWriteHandler.class);\n+\n+    /**\n+     * TCP Sender Segment Number.\n+     */\n+    private int sendSegmentNumber = 1;\n+\n+    /**\n+     * TCP Receiver Segment Number\n+     */\n+    private int receiveSegmentNumber = 1;\n+\n+    /**\n+     * Source Address [TCP ONLY]\n+     */\n+    private InetSocketAddress srcAddr;\n+\n+    /**\n+     * Destination Address [TCP ONLY]\n+     */\n+    private InetSocketAddress dstAddr;\n+\n+    private final OutputStream outputStream;\n+    private PCapWriter pCapWriter;\n+    private final boolean isTCP;\n+    private final boolean isServer;\n+    private final boolean captureZeroByte;\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance.\n+     * {@code isTCP}, {@code isServer} and {@code captureZeroByte} are set to {@code false}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream) {\n+        this(outputStream, false, false, false);\n+    }\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance.\n+     * {@code captureZeroByte} is set to {@code false}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     * @param isTCP        {@code true} to capture TCP packets\n+     * @param isServer     {@code true} if we'll capture packet as server\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream, boolean isTCP, boolean isServer) {\n+        this(outputStream, isTCP, isServer, false);\n+    }\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance\n+     *\n+     * @param outputStream    OutputStream where Pcap data will be written\n+     * @param isTCP           {@code true} to capture TCP packets\n+     * @param isServer        {@code true} if we'll capture packet as server\n+     * @param captureZeroByte {@code true} if we'll capture packets with 0 bytes\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream, boolean isTCP, boolean isServer, boolean captureZeroByte) {\n+        this.outputStream = outputStream;\n+        this.isTCP = isTCP;\n+        this.isServer = isServer;\n+        this.captureZeroByte = captureZeroByte;\n+    }\n+\n+    @Override\n+    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+        this.pCapWriter = new PCapWriter(this.outputStream, ctx.alloc().buffer());\n+\n+        /*\n+         * If `isServer` is set to true, it means we'll be receiving data from client.\n+         * In this case, Source Address will be `remoteAddress` and Destination Address\n+         * will be `localAddress`.\n+         *\n+         * If `isServer` is set to false, it means we'll be sending data to server.\n+         * In this case, Source Address will be `localAddress` and Destination Address\n+         * will be `remoteAddress`.\n+         */\n+        if (isTCP) {\n+            if (isServer) {\n+                srcAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().localAddress();\n+            } else {\n+                srcAddr = (InetSocketAddress) ctx.channel().localAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+            }\n+        }\n+\n+        // If `isTCP` is true, then we'll simulate a fake handshake.\n+        if (isTCP) {\n+            logger.debug(\"Starting Fake TCP 3-Way Handshake\");\n+\n+            ByteBuf tcpBuf = ctx.alloc().buffer();\n+\n+            // Write SYN with Normal Source and Destination Address\n+            TCPPacket.writePacket(tcpBuf, null, 0, 0, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.Flag.SYN);\n+            completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+\n+            // Write SYN+ACK with Reversed Source and Destination Address\n+            TCPPacket.writePacket(tcpBuf, null, 0, 1, dstAddr.getPort(), srcAddr.getPort(), TCPPacket.Flag.SYN,\n+                    TCPPacket.Flag.ACK);\n+            completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc());\n+\n+            // Write ACK with Normal Source and Destination Address\n+            TCPPacket.writePacket(tcpBuf, null, 1, 1, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.Flag.ACK);\n+            completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+\n+            tcpBuf.release();\n+\n+            logger.debug(\"Finished Fake TCP 3-Way Handshake\");\n+        }\n+\n+        super.channelActive(ctx);\n+    }\n+\n+    @Override\n+    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n+        writePacket(ctx, msg, false);\n+        super.channelRead(ctx, msg);\n+    }\n+\n+    @Override\n+    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {\n+        writePacket(ctx, msg, true);\n+        super.write(ctx, msg, promise);\n+    }\n+\n+    private void writePacket(ChannelHandlerContext ctx, Object msg, boolean isWriteOperation) throws Exception {\n+        if (msg instanceof ByteBuf) {\n+\n+            // If bytes are 0 and `captureZeroByte` is false, we won't capture this.\n+            if (((ByteBuf) msg).readableBytes() == 0 && !captureZeroByte) {\n+                logger.debug(\"Discarding Zero Byte TCP Packet. isWriteOperation {}\", isWriteOperation);\n+                return;\n+            }\n+\n+            ByteBuf packet = ((ByteBuf) msg).duplicate();\n+            int bytes = packet.readableBytes();\n+\n+            ByteBuf tcpBuf = ctx.alloc().buffer();\n+\n+            if (isWriteOperation) {\n+                TCPPacket.writePacket(tcpBuf, packet, sendSegmentNumber, receiveSegmentNumber, srcAddr.getPort(),\n+                        dstAddr.getPort(), TCPPacket.Flag.ACK);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+                logTCP(true, bytes, sendSegmentNumber, receiveSegmentNumber, srcAddr, dstAddr, false);\n+\n+                sendSegmentNumber += bytes;\n+\n+                TCPPacket.writePacket(tcpBuf, null, receiveSegmentNumber, sendSegmentNumber, dstAddr.getPort(),\n+                        srcAddr.getPort(), TCPPacket.Flag.ACK);\n+                completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc());\n+                logTCP(true, bytes, sendSegmentNumber, receiveSegmentNumber, dstAddr, srcAddr, true);\n+            } else {\n+                TCPPacket.writePacket(tcpBuf, packet, receiveSegmentNumber, sendSegmentNumber, dstAddr.getPort(),\n+                        srcAddr.getPort(), TCPPacket.Flag.ACK);\n+                completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc());\n+                logTCP(false, bytes, receiveSegmentNumber, sendSegmentNumber, dstAddr, srcAddr, false);\n+\n+                receiveSegmentNumber += bytes;\n+\n+                TCPPacket.writePacket(tcpBuf, null, sendSegmentNumber, receiveSegmentNumber, srcAddr.getPort(),\n+                        dstAddr.getPort(), TCPPacket.Flag.ACK);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+                logTCP(false, bytes, sendSegmentNumber, receiveSegmentNumber, srcAddr, dstAddr, true);\n+            }\n+\n+            tcpBuf.release();\n+        } else if (msg instanceof DatagramPacket) {\n+            handleUDP(ctx, ((DatagramPacket) msg).duplicate());\n+        } else {\n+            logger.error(\"Discarding Pcap Write for Object {}\", msg);\n+        }\n+    }\n+\n+    private void logTCP(boolean isWriteOperation, int bytes, int sendSegmentNumber, int receiveSegmentNumber,\n+                        InetSocketAddress srcAddr, InetSocketAddress dstAddr, boolean AckOnly) {\n+        if (AckOnly) {\n+            logger.debug(\"Writing TCP ACK, isWriteOperation {}, Segment Number {}, Ack Number {}, Src Addr {}, \"\n+                    + \"Dst Addr {}\", isWriteOperation, sendSegmentNumber, receiveSegmentNumber, dstAddr, srcAddr);\n+        } else {\n+            logger.debug(\"Writing TCP Data of {} Bytes, isWriteOperation {}, Segment Number {}, Ack Number {}, \" +\n+                            \"Src Addr {}, Dst Addr {}\", bytes, isWriteOperation, sendSegmentNumber,\n+                    receiveSegmentNumber, srcAddr, dstAddr);\n+        }\n+    }\n+\n+    private void handleUDP(ChannelHandlerContext ctx, DatagramPacket datagramPacket) throws IOException {\n+        ByteBuf udpBuf = ctx.alloc().buffer();\n+\n+        InetSocketAddress srcAddr = datagramPacket.sender();\n+        InetSocketAddress dstAddr = datagramPacket.recipient();\n+\n+        logger.debug(\"Writing UDP Data of {} Bytes, Src Addr {}, Dst Addr {}\", datagramPacket.content().readableBytes()\n+                , srcAddr, dstAddr);\n+\n+        UDPPacket.writePacket(udpBuf,\n+                datagramPacket.content(),\n+                srcAddr.getPort(),\n+                dstAddr.getPort());\n+\n+        completeUDPWrite(srcAddr, dstAddr, udpBuf, ctx.alloc());\n+\n+        udpBuf.release();\n+    }\n+\n+    private void completeTCPWrite(InetSocketAddress srcAddr, InetSocketAddress dstAddr, ByteBuf tcpBuf,\n+                                  ByteBufAllocator byteBufAllocator) throws IOException {\n+\n+        ByteBuf ipBuf = byteBufAllocator.buffer();\n+        ByteBuf ethernetBuf = byteBufAllocator.buffer();\n+\n+        try {\n+\n+            if (srcAddr.getAddress() instanceof Inet4Address) {\n+                IPPacket.writeTCPv4(ipBuf,\n+                        tcpBuf,\n+                        ipv4ToInt(srcAddr.getAddress()),\n+                        ipv4ToInt(dstAddr.getAddress()));\n+\n+                EthernetPacket.writeIPv4(ethernetBuf, ipBuf);\n+            } else {\n+                IPPacket.writeTCPv6(ipBuf,\n+                        tcpBuf,\n+                        srcAddr.getAddress().getAddress(),\n+                        dstAddr.getAddress().getAddress());\n+\n+                EthernetPacket.writeIPv6(ethernetBuf, ipBuf);\n+            }\n+\n+            pCapWriter.writePacket(byteBufAllocator.buffer(), ethernetBuf);\n+        } catch (IOException ex) {\n+            tcpBuf.release();\n+            throw ex;\n+        } finally {\n+            ipBuf.release();\n+            ethernetBuf.release();\n+        }\n+    }\n+\n+    private void completeUDPWrite(InetSocketAddress srcAddr, InetSocketAddress dstAddr, ByteBuf udpBuf,\n+                                  ByteBufAllocator byteBufAllocator) throws IOException {\n+\n+        ByteBuf ipBuf = byteBufAllocator.buffer();\n+        ByteBuf ethernetBuf = byteBufAllocator.buffer();\n+\n+        try {\n+\n+            if (srcAddr.getAddress() instanceof Inet4Address) {\n+                IPPacket.writeUDPv4(ipBuf,\n+                        udpBuf,\n+                        ipv4ToInt(srcAddr.getAddress()),\n+                        ipv4ToInt(dstAddr.getAddress()));\n+\n+                EthernetPacket.writeIPv4(ethernetBuf, ipBuf);\n+            } else {\n+                IPPacket.writeUDPv6(ipBuf,\n+                        udpBuf,\n+                        srcAddr.getAddress().getAddress(),\n+                        dstAddr.getAddress().getAddress());\n+\n+                EthernetPacket.writeIPv6(ethernetBuf, ipBuf);\n+            }\n+\n+            pCapWriter.writePacket(byteBufAllocator.buffer(), ethernetBuf);\n+        } catch (IOException ex) {\n+            udpBuf.release();\n+            throw ex;\n+        } finally {\n+            ipBuf.release();\n+            ethernetBuf.release();\n+        }\n+    }\n+\n+    @Override\n+    public void handlerRemoved(ChannelHandlerContext ctx) throws Exception {\n+\n+        // If `isTCP` is true, then we'll simulate a `FIN` flow.\n+        if (isTCP) {\n+            logger.debug(\"Starting Fake TCP FIN+ACK Flow to close connection\");\n+\n+            ByteBuf tcpBuf = ctx.alloc().buffer();\n+\n+            // Write FIN+ACK with Normal Source and Destination Address\n+            TCPPacket.writePacket(tcpBuf, null, sendSegmentNumber, receiveSegmentNumber, srcAddr.getPort(),\n+                    dstAddr.getPort(), TCPPacket.Flag.FIN, TCPPacket.Flag.ACK);\n+            completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+\n+            // Write FIN+ACK with Reversed Source and Destination Address\n+            TCPPacket.writePacket(tcpBuf, null, receiveSegmentNumber, sendSegmentNumber, dstAddr.getPort(),\n+                    srcAddr.getPort(), TCPPacket.Flag.FIN, TCPPacket.Flag.ACK);\n+            completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc());\n+\n+            // Write ACK with Normal Source and Destination Address\n+            TCPPacket.writePacket(tcpBuf, null, sendSegmentNumber + 1, receiveSegmentNumber + 1,\n+                    srcAddr.getPort(), dstAddr.getPort(), TCPPacket.Flag.ACK);\n+            completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+\n+            tcpBuf.release();\n+\n+            logger.debug(\"Finished Fake TCP FIN+ACK Flow to close connection\");\n+        }\n+\n+        this.pCapWriter.close();\n+        super.handlerRemoved(ctx);\n+    }\n+\n+    private int ipv4ToInt(InetAddress inetAddress) {\n+        byte[] octets = inetAddress.getAddress();\n+        assert octets.length == 4;\n+\n+        return (octets[0] & 0xff) << 24 |\n+                (octets[1] & 0xff) << 16 |\n+                (octets[2] & 0xff) << 8 |\n+                (octets[3] & 0xff);\n+    }\n+\n+    @Override\n+    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n+\n+        // If `isTCP` is true, then we'll simulate a `RST` flow.\n+        if (isTCP) {\n+            ByteBuf tcpBuf = ctx.alloc().buffer();\n+\n+            // Write RST+ACK with Normal Source and Destination Address\n+            TCPPacket.writePacket(tcpBuf, null, sendSegmentNumber, receiveSegmentNumber, srcAddr.getPort(),\n+                    dstAddr.getPort(), TCPPacket.Flag.RST, TCPPacket.Flag.ACK);\n+            completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+\n+            tcpBuf.release();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 364}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTE5NjU1OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PCapWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODo0MjoxNFrOHJv4ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODo0MjoxNFrOHJv4ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk4MzczOQ==", "bodyText": "I would remove this and let the caller handle this. This is also more consistent as you also don't release the packet here", "url": "https://github.com/netty/netty/pull/10498#discussion_r479983739", "createdAt": "2020-08-31T08:42:14Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCapWriter.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+final class PCapWriter implements Closeable {\n+    private final SimpleDateFormat sdf = new SimpleDateFormat(\"SSSSSSSSS\");\n+    private final OutputStream outputStream;\n+\n+    /**\n+     * This uses {@link OutputStream} for writing Pcap.\n+     * Pcap Global Header is also written on construction.\n+     *\n+     * @throws IOException If {@link OutputStream#write(byte[])} throws an exception\n+     */\n+    PCapWriter(OutputStream outputStream, ByteBuf byteBuf) throws IOException {\n+        this.outputStream = outputStream;\n+\n+        PcapHeaders.writeGlobalHeader(byteBuf);\n+        byteBuf.readBytes(outputStream, byteBuf.readableBytes());\n+        byteBuf.release();\n+    }\n+\n+    /**\n+     * Write Packet in Pcap OutputStream.\n+     *\n+     * @param packetHeaderBuf Packer Header {@link ByteBuf}\n+     * @param packet          Packet\n+     * @throws IOException If {@link OutputStream#write(byte[])} throws an exception\n+     */\n+    void writePacket(ByteBuf packetHeaderBuf, ByteBuf packet) throws IOException {\n+        long currentTime = System.currentTimeMillis();\n+\n+        String microsecond = sdf.format(new Date(currentTime));\n+        microsecond = microsecond.substring(microsecond.indexOf(\".\") + 1);\n+\n+        PcapHeaders.writePacketHeader(\n+                packetHeaderBuf,\n+                currentTime,\n+                Integer.parseInt(microsecond),\n+                packet.readableBytes(),\n+                packet.readableBytes()\n+        );\n+\n+        packetHeaderBuf.readBytes(outputStream, packetHeaderBuf.readableBytes());\n+        packet.readBytes(outputStream, packet.readableBytes());\n+        packetHeaderBuf.release();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTE5ODY1OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PCapWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODo0Mjo1M1rOHJv5zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODo0Mjo1M1rOHJv5zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk4NDA3OQ==", "bodyText": "I think we should better have the caller handle this...", "url": "https://github.com/netty/netty/pull/10498#discussion_r479984079", "createdAt": "2020-08-31T08:42:53Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCapWriter.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+final class PCapWriter implements Closeable {\n+    private final SimpleDateFormat sdf = new SimpleDateFormat(\"SSSSSSSSS\");\n+    private final OutputStream outputStream;\n+\n+    /**\n+     * This uses {@link OutputStream} for writing Pcap.\n+     * Pcap Global Header is also written on construction.\n+     *\n+     * @throws IOException If {@link OutputStream#write(byte[])} throws an exception\n+     */\n+    PCapWriter(OutputStream outputStream, ByteBuf byteBuf) throws IOException {\n+        this.outputStream = outputStream;\n+\n+        PcapHeaders.writeGlobalHeader(byteBuf);\n+        byteBuf.readBytes(outputStream, byteBuf.readableBytes());\n+        byteBuf.release();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTE5OTg3OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/TCPPacket.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODo0MzoxN1rOHJv6nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODo0MzoxN1rOHJv6nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk4NDI4NA==", "bodyText": "nit: add default:", "url": "https://github.com/netty/netty/pull/10498#discussion_r479984284", "createdAt": "2020-08-31T08:43:17Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/TCPPacket.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+final class TCPPacket {\n+\n+    private TCPPacket() {\n+        // Prevent outside initialization\n+    }\n+\n+    /**\n+     * Write TCP Packet\n+     *\n+     * @param byteBuf ByteBuf where Packet data will be set\n+     * @param payload Payload of this Packet\n+     * @param srcPort Source Port\n+     * @param dstPort Destination Port\n+     */\n+    static void writePacket(ByteBuf byteBuf, ByteBuf payload, int segmentNumber, int ackNumber, int srcPort, int dstPort, Flag... flags) {\n+        int fin = 0;\n+        int syn = 0;\n+        int rst = 0;\n+        int psh = 0;\n+        int ack = 0;\n+        int urg = 0;\n+        int ece = 0;\n+        int cwr = 0;\n+\n+        for (Flag flag : flags) {\n+            switch (flag) {\n+                case FIN:\n+                    fin = 1;\n+                case SYN:\n+                    syn = 1;\n+                case RST:\n+                    rst = 1;\n+                case PSH:\n+                    psh = 1;\n+                case ACK:\n+                    ack = 1;\n+                case URG:\n+                    urg = 1;\n+                case ECE:\n+                    ece = 1;\n+                case CWR:\n+                    cwr = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTIwNDQ1OnYy", "diffSide": "RIGHT", "path": "handler/src/test/java/io/netty/handler/pcap/PCAPWriteHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODo0NDoyN1rOHJv9LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODo0NDoyN1rOHJv9LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk4NDk0MA==", "bodyText": "release() is missing", "url": "https://github.com/netty/netty/pull/10498#discussion_r479984940", "createdAt": "2020-08-31T08:44:27Z", "author": {"login": "normanmaurer"}, "path": "handler/src/test/java/io/netty/handler/pcap/PCAPWriteHandlerTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufOutputStream;\n+import io.netty.buffer.ByteBufUtil;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.embedded.EmbeddedChannel;\n+import io.netty.channel.socket.DatagramPacket;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+\n+public class PCAPWriteHandlerTest {\n+\n+    @Test\n+    public void udpV4() throws IOException {\n+\n+        ByteBuf byteBuf = Unpooled.buffer();\n+        EmbeddedChannel embeddedChannel = new EmbeddedChannel(new PCAPWriteHandler(\n+                new ByteBufOutputStream(byteBuf), true, false, false\n+        ));\n+\n+        InetSocketAddress srcAddr = new InetSocketAddress(\"127.0.0.1\", 1000);\n+        InetSocketAddress dstAddr = new InetSocketAddress(\"192.168.1.1\", 50000);\n+\n+        embeddedChannel.writeInbound(new DatagramPacket(Unpooled.wrappedBuffer(\"Meow\".getBytes()), dstAddr, srcAddr));\n+        embeddedChannel.flushInbound();\n+\n+        // Verify Pcap Global Headers\n+        Assert.assertEquals(0xa1b2c3d4, byteBuf.readInt()); // magic_number\n+        Assert.assertEquals(2, byteBuf.readShort());        // version_major\n+        Assert.assertEquals(4, byteBuf.readShort());        // version_minor\n+        Assert.assertEquals(0, byteBuf.readInt());          // thiszone\n+        Assert.assertEquals(0, byteBuf.readInt());          // sigfigs\n+        Assert.assertEquals(0xffff, byteBuf.readInt());     // snaplen\n+        Assert.assertEquals(1, byteBuf.readInt());          // network\n+\n+        // Verify Pcap Packet Header\n+        byteBuf.readInt(); // Just read, we don't care about timestamps for now\n+        byteBuf.readInt(); // Just read, we don't care about timestamps for now\n+        Assert.assertEquals(46, byteBuf.readInt()); // Length of Packet Saved In Pcap\n+        Assert.assertEquals(46, byteBuf.readInt()); // Actual Length of Packet\n+\n+        // -------------------------------------------- Verify Packet --------------------------------------------\n+        // Verify Ethernet Packet\n+        ByteBuf ethernetPacket = byteBuf.readBytes(46);\n+        Assert.assertArrayEquals(new byte[]{-86, -69, -52, -35, -18, -1},\n+                ByteBufUtil.getBytes(ethernetPacket.readBytes(6)));\n+        Assert.assertArrayEquals(new byte[]{-86, -69, -52, -35, -18, -1},\n+                ByteBufUtil.getBytes(ethernetPacket.readBytes(6)));\n+        Assert.assertEquals(0x0800, ethernetPacket.readShort());\n+\n+        // Verify IPv4 Packet\n+        ByteBuf ipv4Packet = ethernetPacket.readBytes(32);\n+        Assert.assertEquals(0x45, ipv4Packet.readByte());    // Version + IHL\n+        Assert.assertEquals(0x00, ipv4Packet.readByte());    // DSCP\n+        Assert.assertEquals(32, ipv4Packet.readShort());     // Length\n+        Assert.assertEquals(0x0000, ipv4Packet.readShort()); // Identification\n+        Assert.assertEquals(0x0000, ipv4Packet.readShort()); // Fragment\n+        Assert.assertEquals((byte) 0xff, ipv4Packet.readByte());      // TTL\n+        Assert.assertEquals((byte) 17, ipv4Packet.readByte());        // Protocol\n+        Assert.assertEquals(0, ipv4Packet.readShort());      // Checksum\n+        Assert.assertEquals(ipv4ToInt(srcAddr.getAddress()), ipv4Packet.readInt()); // Source IPv4 Address\n+        Assert.assertEquals(ipv4ToInt(dstAddr.getAddress()), ipv4Packet.readInt()); // Destination IPv4 Address\n+\n+        // Verify UDP Packet\n+        ByteBuf udpPacket = ipv4Packet.readBytes(12);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTIwNDc0OnYy", "diffSide": "RIGHT", "path": "handler/src/test/java/io/netty/handler/pcap/PCAPWriteHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODo0NDozMVrOHJv9WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODo0NDozMVrOHJv9WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk4NDk4NQ==", "bodyText": "release() is missing", "url": "https://github.com/netty/netty/pull/10498#discussion_r479984985", "createdAt": "2020-08-31T08:44:31Z", "author": {"login": "normanmaurer"}, "path": "handler/src/test/java/io/netty/handler/pcap/PCAPWriteHandlerTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufOutputStream;\n+import io.netty.buffer.ByteBufUtil;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.embedded.EmbeddedChannel;\n+import io.netty.channel.socket.DatagramPacket;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+\n+public class PCAPWriteHandlerTest {\n+\n+    @Test\n+    public void udpV4() throws IOException {\n+\n+        ByteBuf byteBuf = Unpooled.buffer();\n+        EmbeddedChannel embeddedChannel = new EmbeddedChannel(new PCAPWriteHandler(\n+                new ByteBufOutputStream(byteBuf), true, false, false\n+        ));\n+\n+        InetSocketAddress srcAddr = new InetSocketAddress(\"127.0.0.1\", 1000);\n+        InetSocketAddress dstAddr = new InetSocketAddress(\"192.168.1.1\", 50000);\n+\n+        embeddedChannel.writeInbound(new DatagramPacket(Unpooled.wrappedBuffer(\"Meow\".getBytes()), dstAddr, srcAddr));\n+        embeddedChannel.flushInbound();\n+\n+        // Verify Pcap Global Headers\n+        Assert.assertEquals(0xa1b2c3d4, byteBuf.readInt()); // magic_number\n+        Assert.assertEquals(2, byteBuf.readShort());        // version_major\n+        Assert.assertEquals(4, byteBuf.readShort());        // version_minor\n+        Assert.assertEquals(0, byteBuf.readInt());          // thiszone\n+        Assert.assertEquals(0, byteBuf.readInt());          // sigfigs\n+        Assert.assertEquals(0xffff, byteBuf.readInt());     // snaplen\n+        Assert.assertEquals(1, byteBuf.readInt());          // network\n+\n+        // Verify Pcap Packet Header\n+        byteBuf.readInt(); // Just read, we don't care about timestamps for now\n+        byteBuf.readInt(); // Just read, we don't care about timestamps for now\n+        Assert.assertEquals(46, byteBuf.readInt()); // Length of Packet Saved In Pcap\n+        Assert.assertEquals(46, byteBuf.readInt()); // Actual Length of Packet\n+\n+        // -------------------------------------------- Verify Packet --------------------------------------------\n+        // Verify Ethernet Packet\n+        ByteBuf ethernetPacket = byteBuf.readBytes(46);\n+        Assert.assertArrayEquals(new byte[]{-86, -69, -52, -35, -18, -1},\n+                ByteBufUtil.getBytes(ethernetPacket.readBytes(6)));\n+        Assert.assertArrayEquals(new byte[]{-86, -69, -52, -35, -18, -1},\n+                ByteBufUtil.getBytes(ethernetPacket.readBytes(6)));\n+        Assert.assertEquals(0x0800, ethernetPacket.readShort());\n+\n+        // Verify IPv4 Packet\n+        ByteBuf ipv4Packet = ethernetPacket.readBytes(32);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTIwNTAxOnYy", "diffSide": "RIGHT", "path": "handler/src/test/java/io/netty/handler/pcap/PCAPWriteHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODo0NDozNlrOHJv9gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODo0NDozNlrOHJv9gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk4NTAyNg==", "bodyText": "release() is missing", "url": "https://github.com/netty/netty/pull/10498#discussion_r479985026", "createdAt": "2020-08-31T08:44:36Z", "author": {"login": "normanmaurer"}, "path": "handler/src/test/java/io/netty/handler/pcap/PCAPWriteHandlerTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufOutputStream;\n+import io.netty.buffer.ByteBufUtil;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.embedded.EmbeddedChannel;\n+import io.netty.channel.socket.DatagramPacket;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+\n+public class PCAPWriteHandlerTest {\n+\n+    @Test\n+    public void udpV4() throws IOException {\n+\n+        ByteBuf byteBuf = Unpooled.buffer();\n+        EmbeddedChannel embeddedChannel = new EmbeddedChannel(new PCAPWriteHandler(\n+                new ByteBufOutputStream(byteBuf), true, false, false\n+        ));\n+\n+        InetSocketAddress srcAddr = new InetSocketAddress(\"127.0.0.1\", 1000);\n+        InetSocketAddress dstAddr = new InetSocketAddress(\"192.168.1.1\", 50000);\n+\n+        embeddedChannel.writeInbound(new DatagramPacket(Unpooled.wrappedBuffer(\"Meow\".getBytes()), dstAddr, srcAddr));\n+        embeddedChannel.flushInbound();\n+\n+        // Verify Pcap Global Headers\n+        Assert.assertEquals(0xa1b2c3d4, byteBuf.readInt()); // magic_number\n+        Assert.assertEquals(2, byteBuf.readShort());        // version_major\n+        Assert.assertEquals(4, byteBuf.readShort());        // version_minor\n+        Assert.assertEquals(0, byteBuf.readInt());          // thiszone\n+        Assert.assertEquals(0, byteBuf.readInt());          // sigfigs\n+        Assert.assertEquals(0xffff, byteBuf.readInt());     // snaplen\n+        Assert.assertEquals(1, byteBuf.readInt());          // network\n+\n+        // Verify Pcap Packet Header\n+        byteBuf.readInt(); // Just read, we don't care about timestamps for now\n+        byteBuf.readInt(); // Just read, we don't care about timestamps for now\n+        Assert.assertEquals(46, byteBuf.readInt()); // Length of Packet Saved In Pcap\n+        Assert.assertEquals(46, byteBuf.readInt()); // Actual Length of Packet\n+\n+        // -------------------------------------------- Verify Packet --------------------------------------------\n+        // Verify Ethernet Packet\n+        ByteBuf ethernetPacket = byteBuf.readBytes(46);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTIwNTM2OnYy", "diffSide": "RIGHT", "path": "handler/src/test/java/io/netty/handler/pcap/PCAPWriteHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODo0NDo0M1rOHJv9uw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODo0NDo0M1rOHJv9uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk4NTA4Mw==", "bodyText": "assert return value", "url": "https://github.com/netty/netty/pull/10498#discussion_r479985083", "createdAt": "2020-08-31T08:44:43Z", "author": {"login": "normanmaurer"}, "path": "handler/src/test/java/io/netty/handler/pcap/PCAPWriteHandlerTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufOutputStream;\n+import io.netty.buffer.ByteBufUtil;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.embedded.EmbeddedChannel;\n+import io.netty.channel.socket.DatagramPacket;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+\n+public class PCAPWriteHandlerTest {\n+\n+    @Test\n+    public void udpV4() throws IOException {\n+\n+        ByteBuf byteBuf = Unpooled.buffer();\n+        EmbeddedChannel embeddedChannel = new EmbeddedChannel(new PCAPWriteHandler(\n+                new ByteBufOutputStream(byteBuf), true, false, false\n+        ));\n+\n+        InetSocketAddress srcAddr = new InetSocketAddress(\"127.0.0.1\", 1000);\n+        InetSocketAddress dstAddr = new InetSocketAddress(\"192.168.1.1\", 50000);\n+\n+        embeddedChannel.writeInbound(new DatagramPacket(Unpooled.wrappedBuffer(\"Meow\".getBytes()), dstAddr, srcAddr));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTIwNjMyOnYy", "diffSide": "RIGHT", "path": "handler/src/test/java/io/netty/handler/pcap/PCAPWriteHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODo0NDo1NlrOHJv-SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODo0NDo1NlrOHJv-SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk4NTIyNQ==", "bodyText": "use method of NetUtils.", "url": "https://github.com/netty/netty/pull/10498#discussion_r479985225", "createdAt": "2020-08-31T08:44:56Z", "author": {"login": "normanmaurer"}, "path": "handler/src/test/java/io/netty/handler/pcap/PCAPWriteHandlerTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufOutputStream;\n+import io.netty.buffer.ByteBufUtil;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.embedded.EmbeddedChannel;\n+import io.netty.channel.socket.DatagramPacket;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+\n+public class PCAPWriteHandlerTest {\n+\n+    @Test\n+    public void udpV4() throws IOException {\n+\n+        ByteBuf byteBuf = Unpooled.buffer();\n+        EmbeddedChannel embeddedChannel = new EmbeddedChannel(new PCAPWriteHandler(\n+                new ByteBufOutputStream(byteBuf), true, false, false\n+        ));\n+\n+        InetSocketAddress srcAddr = new InetSocketAddress(\"127.0.0.1\", 1000);\n+        InetSocketAddress dstAddr = new InetSocketAddress(\"192.168.1.1\", 50000);\n+\n+        embeddedChannel.writeInbound(new DatagramPacket(Unpooled.wrappedBuffer(\"Meow\".getBytes()), dstAddr, srcAddr));\n+        embeddedChannel.flushInbound();\n+\n+        // Verify Pcap Global Headers\n+        Assert.assertEquals(0xa1b2c3d4, byteBuf.readInt()); // magic_number\n+        Assert.assertEquals(2, byteBuf.readShort());        // version_major\n+        Assert.assertEquals(4, byteBuf.readShort());        // version_minor\n+        Assert.assertEquals(0, byteBuf.readInt());          // thiszone\n+        Assert.assertEquals(0, byteBuf.readInt());          // sigfigs\n+        Assert.assertEquals(0xffff, byteBuf.readInt());     // snaplen\n+        Assert.assertEquals(1, byteBuf.readInt());          // network\n+\n+        // Verify Pcap Packet Header\n+        byteBuf.readInt(); // Just read, we don't care about timestamps for now\n+        byteBuf.readInt(); // Just read, we don't care about timestamps for now\n+        Assert.assertEquals(46, byteBuf.readInt()); // Length of Packet Saved In Pcap\n+        Assert.assertEquals(46, byteBuf.readInt()); // Actual Length of Packet\n+\n+        // -------------------------------------------- Verify Packet --------------------------------------------\n+        // Verify Ethernet Packet\n+        ByteBuf ethernetPacket = byteBuf.readBytes(46);\n+        Assert.assertArrayEquals(new byte[]{-86, -69, -52, -35, -18, -1},\n+                ByteBufUtil.getBytes(ethernetPacket.readBytes(6)));\n+        Assert.assertArrayEquals(new byte[]{-86, -69, -52, -35, -18, -1},\n+                ByteBufUtil.getBytes(ethernetPacket.readBytes(6)));\n+        Assert.assertEquals(0x0800, ethernetPacket.readShort());\n+\n+        // Verify IPv4 Packet\n+        ByteBuf ipv4Packet = ethernetPacket.readBytes(32);\n+        Assert.assertEquals(0x45, ipv4Packet.readByte());    // Version + IHL\n+        Assert.assertEquals(0x00, ipv4Packet.readByte());    // DSCP\n+        Assert.assertEquals(32, ipv4Packet.readShort());     // Length\n+        Assert.assertEquals(0x0000, ipv4Packet.readShort()); // Identification\n+        Assert.assertEquals(0x0000, ipv4Packet.readShort()); // Fragment\n+        Assert.assertEquals((byte) 0xff, ipv4Packet.readByte());      // TTL\n+        Assert.assertEquals((byte) 17, ipv4Packet.readByte());        // Protocol\n+        Assert.assertEquals(0, ipv4Packet.readShort());      // Checksum\n+        Assert.assertEquals(ipv4ToInt(srcAddr.getAddress()), ipv4Packet.readInt()); // Source IPv4 Address\n+        Assert.assertEquals(ipv4ToInt(dstAddr.getAddress()), ipv4Packet.readInt()); // Destination IPv4 Address\n+\n+        // Verify UDP Packet\n+        ByteBuf udpPacket = ipv4Packet.readBytes(12);\n+        Assert.assertEquals(1000, udpPacket.readShort());                  // Source Port\n+        Assert.assertEquals(50000, udpPacket.readShort() & 0xffff); // Destination Port\n+        Assert.assertEquals(12, udpPacket.readShort());                    // Length\n+        Assert.assertEquals(0x0001, udpPacket.readShort());                // Checksum\n+        Assert.assertArrayEquals(\"Meow\".getBytes(), ByteBufUtil.getBytes(udpPacket.readBytes(4))); // Payload\n+\n+        Assert.assertTrue(embeddedChannel.close().isSuccess());\n+    }\n+\n+    private int ipv4ToInt(InetAddress inetAddress) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTIxMzU2OnYy", "diffSide": "RIGHT", "path": "handler/src/test/java/io/netty/handler/pcap/PCAPWriteHandlerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODo0Njo1OFrOHJwCdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMzozNDoyN1rOHJ5FFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk4NjI5NQ==", "bodyText": "release() is missing for the buffer created by readBytes(5).", "url": "https://github.com/netty/netty/pull/10498#discussion_r479986295", "createdAt": "2020-08-31T08:46:58Z", "author": {"login": "normanmaurer"}, "path": "handler/src/test/java/io/netty/handler/pcap/PCAPWriteHandlerTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufOutputStream;\n+import io.netty.buffer.ByteBufUtil;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.embedded.EmbeddedChannel;\n+import io.netty.channel.socket.DatagramPacket;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+\n+public class PCAPWriteHandlerTest {\n+\n+    @Test\n+    public void udpV4() throws IOException {\n+\n+        ByteBuf byteBuf = Unpooled.buffer();\n+        EmbeddedChannel embeddedChannel = new EmbeddedChannel(new PCAPWriteHandler(\n+                new ByteBufOutputStream(byteBuf), true, false, false\n+        ));\n+\n+        InetSocketAddress srcAddr = new InetSocketAddress(\"127.0.0.1\", 1000);\n+        InetSocketAddress dstAddr = new InetSocketAddress(\"192.168.1.1\", 50000);\n+\n+        embeddedChannel.writeInbound(new DatagramPacket(Unpooled.wrappedBuffer(\"Meow\".getBytes()), dstAddr, srcAddr));\n+        embeddedChannel.flushInbound();\n+\n+        // Verify Pcap Global Headers\n+        Assert.assertEquals(0xa1b2c3d4, byteBuf.readInt()); // magic_number\n+        Assert.assertEquals(2, byteBuf.readShort());        // version_major\n+        Assert.assertEquals(4, byteBuf.readShort());        // version_minor\n+        Assert.assertEquals(0, byteBuf.readInt());          // thiszone\n+        Assert.assertEquals(0, byteBuf.readInt());          // sigfigs\n+        Assert.assertEquals(0xffff, byteBuf.readInt());     // snaplen\n+        Assert.assertEquals(1, byteBuf.readInt());          // network\n+\n+        // Verify Pcap Packet Header\n+        byteBuf.readInt(); // Just read, we don't care about timestamps for now\n+        byteBuf.readInt(); // Just read, we don't care about timestamps for now\n+        Assert.assertEquals(46, byteBuf.readInt()); // Length of Packet Saved In Pcap\n+        Assert.assertEquals(46, byteBuf.readInt()); // Actual Length of Packet\n+\n+        // -------------------------------------------- Verify Packet --------------------------------------------\n+        // Verify Ethernet Packet\n+        ByteBuf ethernetPacket = byteBuf.readBytes(46);\n+        Assert.assertArrayEquals(new byte[]{-86, -69, -52, -35, -18, -1},\n+                ByteBufUtil.getBytes(ethernetPacket.readBytes(6)));\n+        Assert.assertArrayEquals(new byte[]{-86, -69, -52, -35, -18, -1},\n+                ByteBufUtil.getBytes(ethernetPacket.readBytes(6)));\n+        Assert.assertEquals(0x0800, ethernetPacket.readShort());\n+\n+        // Verify IPv4 Packet\n+        ByteBuf ipv4Packet = ethernetPacket.readBytes(32);\n+        Assert.assertEquals(0x45, ipv4Packet.readByte());    // Version + IHL\n+        Assert.assertEquals(0x00, ipv4Packet.readByte());    // DSCP\n+        Assert.assertEquals(32, ipv4Packet.readShort());     // Length\n+        Assert.assertEquals(0x0000, ipv4Packet.readShort()); // Identification\n+        Assert.assertEquals(0x0000, ipv4Packet.readShort()); // Fragment\n+        Assert.assertEquals((byte) 0xff, ipv4Packet.readByte());      // TTL\n+        Assert.assertEquals((byte) 17, ipv4Packet.readByte());        // Protocol\n+        Assert.assertEquals(0, ipv4Packet.readShort());      // Checksum\n+        Assert.assertEquals(ipv4ToInt(srcAddr.getAddress()), ipv4Packet.readInt()); // Source IPv4 Address\n+        Assert.assertEquals(ipv4ToInt(dstAddr.getAddress()), ipv4Packet.readInt()); // Destination IPv4 Address\n+\n+        // Verify UDP Packet\n+        ByteBuf udpPacket = ipv4Packet.readBytes(12);\n+        Assert.assertEquals(1000, udpPacket.readShort());                  // Source Port\n+        Assert.assertEquals(50000, udpPacket.readShort() & 0xffff); // Destination Port\n+        Assert.assertEquals(12, udpPacket.readShort());                    // Length\n+        Assert.assertEquals(0x0001, udpPacket.readShort());                // Checksum\n+        Assert.assertArrayEquals(\"Meow\".getBytes(), ByteBufUtil.getBytes(udpPacket.readBytes(4))); // Payload", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDEzNDQyMA==", "bodyText": "You mean ByteBuf udpPacket = ipv4Packet.readBytes(12); ?", "url": "https://github.com/netty/netty/pull/10498#discussion_r480134420", "createdAt": "2020-08-31T13:34:27Z", "author": {"login": "hyperxpro"}, "path": "handler/src/test/java/io/netty/handler/pcap/PCAPWriteHandlerTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufOutputStream;\n+import io.netty.buffer.ByteBufUtil;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.embedded.EmbeddedChannel;\n+import io.netty.channel.socket.DatagramPacket;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+\n+public class PCAPWriteHandlerTest {\n+\n+    @Test\n+    public void udpV4() throws IOException {\n+\n+        ByteBuf byteBuf = Unpooled.buffer();\n+        EmbeddedChannel embeddedChannel = new EmbeddedChannel(new PCAPWriteHandler(\n+                new ByteBufOutputStream(byteBuf), true, false, false\n+        ));\n+\n+        InetSocketAddress srcAddr = new InetSocketAddress(\"127.0.0.1\", 1000);\n+        InetSocketAddress dstAddr = new InetSocketAddress(\"192.168.1.1\", 50000);\n+\n+        embeddedChannel.writeInbound(new DatagramPacket(Unpooled.wrappedBuffer(\"Meow\".getBytes()), dstAddr, srcAddr));\n+        embeddedChannel.flushInbound();\n+\n+        // Verify Pcap Global Headers\n+        Assert.assertEquals(0xa1b2c3d4, byteBuf.readInt()); // magic_number\n+        Assert.assertEquals(2, byteBuf.readShort());        // version_major\n+        Assert.assertEquals(4, byteBuf.readShort());        // version_minor\n+        Assert.assertEquals(0, byteBuf.readInt());          // thiszone\n+        Assert.assertEquals(0, byteBuf.readInt());          // sigfigs\n+        Assert.assertEquals(0xffff, byteBuf.readInt());     // snaplen\n+        Assert.assertEquals(1, byteBuf.readInt());          // network\n+\n+        // Verify Pcap Packet Header\n+        byteBuf.readInt(); // Just read, we don't care about timestamps for now\n+        byteBuf.readInt(); // Just read, we don't care about timestamps for now\n+        Assert.assertEquals(46, byteBuf.readInt()); // Length of Packet Saved In Pcap\n+        Assert.assertEquals(46, byteBuf.readInt()); // Actual Length of Packet\n+\n+        // -------------------------------------------- Verify Packet --------------------------------------------\n+        // Verify Ethernet Packet\n+        ByteBuf ethernetPacket = byteBuf.readBytes(46);\n+        Assert.assertArrayEquals(new byte[]{-86, -69, -52, -35, -18, -1},\n+                ByteBufUtil.getBytes(ethernetPacket.readBytes(6)));\n+        Assert.assertArrayEquals(new byte[]{-86, -69, -52, -35, -18, -1},\n+                ByteBufUtil.getBytes(ethernetPacket.readBytes(6)));\n+        Assert.assertEquals(0x0800, ethernetPacket.readShort());\n+\n+        // Verify IPv4 Packet\n+        ByteBuf ipv4Packet = ethernetPacket.readBytes(32);\n+        Assert.assertEquals(0x45, ipv4Packet.readByte());    // Version + IHL\n+        Assert.assertEquals(0x00, ipv4Packet.readByte());    // DSCP\n+        Assert.assertEquals(32, ipv4Packet.readShort());     // Length\n+        Assert.assertEquals(0x0000, ipv4Packet.readShort()); // Identification\n+        Assert.assertEquals(0x0000, ipv4Packet.readShort()); // Fragment\n+        Assert.assertEquals((byte) 0xff, ipv4Packet.readByte());      // TTL\n+        Assert.assertEquals((byte) 17, ipv4Packet.readByte());        // Protocol\n+        Assert.assertEquals(0, ipv4Packet.readShort());      // Checksum\n+        Assert.assertEquals(ipv4ToInt(srcAddr.getAddress()), ipv4Packet.readInt()); // Source IPv4 Address\n+        Assert.assertEquals(ipv4ToInt(dstAddr.getAddress()), ipv4Packet.readInt()); // Destination IPv4 Address\n+\n+        // Verify UDP Packet\n+        ByteBuf udpPacket = ipv4Packet.readBytes(12);\n+        Assert.assertEquals(1000, udpPacket.readShort());                  // Source Port\n+        Assert.assertEquals(50000, udpPacket.readShort() & 0xffff); // Destination Port\n+        Assert.assertEquals(12, udpPacket.readShort());                    // Length\n+        Assert.assertEquals(0x0001, udpPacket.readShort());                // Checksum\n+        Assert.assertArrayEquals(\"Meow\".getBytes(), ByteBufUtil.getBytes(udpPacket.readBytes(4))); // Payload", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk4NjI5NQ=="}, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTIxMzk3OnYy", "diffSide": "RIGHT", "path": "handler/src/test/java/io/netty/handler/pcap/PCAPWriteHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODo0NzowNlrOHJwCuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODo0NzowNlrOHJwCuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk4NjM2MA==", "bodyText": "getBytes(Charset)", "url": "https://github.com/netty/netty/pull/10498#discussion_r479986360", "createdAt": "2020-08-31T08:47:06Z", "author": {"login": "normanmaurer"}, "path": "handler/src/test/java/io/netty/handler/pcap/PCAPWriteHandlerTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufOutputStream;\n+import io.netty.buffer.ByteBufUtil;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.embedded.EmbeddedChannel;\n+import io.netty.channel.socket.DatagramPacket;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+\n+public class PCAPWriteHandlerTest {\n+\n+    @Test\n+    public void udpV4() throws IOException {\n+\n+        ByteBuf byteBuf = Unpooled.buffer();\n+        EmbeddedChannel embeddedChannel = new EmbeddedChannel(new PCAPWriteHandler(\n+                new ByteBufOutputStream(byteBuf), true, false, false\n+        ));\n+\n+        InetSocketAddress srcAddr = new InetSocketAddress(\"127.0.0.1\", 1000);\n+        InetSocketAddress dstAddr = new InetSocketAddress(\"192.168.1.1\", 50000);\n+\n+        embeddedChannel.writeInbound(new DatagramPacket(Unpooled.wrappedBuffer(\"Meow\".getBytes()), dstAddr, srcAddr));\n+        embeddedChannel.flushInbound();\n+\n+        // Verify Pcap Global Headers\n+        Assert.assertEquals(0xa1b2c3d4, byteBuf.readInt()); // magic_number\n+        Assert.assertEquals(2, byteBuf.readShort());        // version_major\n+        Assert.assertEquals(4, byteBuf.readShort());        // version_minor\n+        Assert.assertEquals(0, byteBuf.readInt());          // thiszone\n+        Assert.assertEquals(0, byteBuf.readInt());          // sigfigs\n+        Assert.assertEquals(0xffff, byteBuf.readInt());     // snaplen\n+        Assert.assertEquals(1, byteBuf.readInt());          // network\n+\n+        // Verify Pcap Packet Header\n+        byteBuf.readInt(); // Just read, we don't care about timestamps for now\n+        byteBuf.readInt(); // Just read, we don't care about timestamps for now\n+        Assert.assertEquals(46, byteBuf.readInt()); // Length of Packet Saved In Pcap\n+        Assert.assertEquals(46, byteBuf.readInt()); // Actual Length of Packet\n+\n+        // -------------------------------------------- Verify Packet --------------------------------------------\n+        // Verify Ethernet Packet\n+        ByteBuf ethernetPacket = byteBuf.readBytes(46);\n+        Assert.assertArrayEquals(new byte[]{-86, -69, -52, -35, -18, -1},\n+                ByteBufUtil.getBytes(ethernetPacket.readBytes(6)));\n+        Assert.assertArrayEquals(new byte[]{-86, -69, -52, -35, -18, -1},\n+                ByteBufUtil.getBytes(ethernetPacket.readBytes(6)));\n+        Assert.assertEquals(0x0800, ethernetPacket.readShort());\n+\n+        // Verify IPv4 Packet\n+        ByteBuf ipv4Packet = ethernetPacket.readBytes(32);\n+        Assert.assertEquals(0x45, ipv4Packet.readByte());    // Version + IHL\n+        Assert.assertEquals(0x00, ipv4Packet.readByte());    // DSCP\n+        Assert.assertEquals(32, ipv4Packet.readShort());     // Length\n+        Assert.assertEquals(0x0000, ipv4Packet.readShort()); // Identification\n+        Assert.assertEquals(0x0000, ipv4Packet.readShort()); // Fragment\n+        Assert.assertEquals((byte) 0xff, ipv4Packet.readByte());      // TTL\n+        Assert.assertEquals((byte) 17, ipv4Packet.readByte());        // Protocol\n+        Assert.assertEquals(0, ipv4Packet.readShort());      // Checksum\n+        Assert.assertEquals(ipv4ToInt(srcAddr.getAddress()), ipv4Packet.readInt()); // Source IPv4 Address\n+        Assert.assertEquals(ipv4ToInt(dstAddr.getAddress()), ipv4Packet.readInt()); // Destination IPv4 Address\n+\n+        // Verify UDP Packet\n+        ByteBuf udpPacket = ipv4Packet.readBytes(12);\n+        Assert.assertEquals(1000, udpPacket.readShort());                  // Source Port\n+        Assert.assertEquals(50000, udpPacket.readShort() & 0xffff); // Destination Port\n+        Assert.assertEquals(12, udpPacket.readShort());                    // Length\n+        Assert.assertEquals(0x0001, udpPacket.readShort());                // Checksum\n+        Assert.assertArrayEquals(\"Meow\".getBytes(), ByteBufUtil.getBytes(udpPacket.readBytes(4))); // Payload", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTIxNTYzOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/EthernetPacket.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwODo0Nzo0MVrOHJwDvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMjowNzozOFrOHJ2HtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk4NjYyMQ==", "bodyText": "Please make it clear in the name that this is a MAC address.\nAlso, please use an address in the range reserved for documentation and examples: 00-00-5E-00-53-00 through 00-00-5E-00-53-FF. See RFC7042.", "url": "https://github.com/netty/netty/pull/10498#discussion_r479986621", "createdAt": "2020-08-31T08:47:41Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/pcap/EthernetPacket.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+final class EthernetPacket {\n+\n+    /**\n+     * AA:BB:CC:DD:EE:FF\n+     */\n+    private static final byte[] DUMMY_ADDRESS = new byte[]{-86, -69, -52, -35, -18, -1};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA4NTk0MA==", "bodyText": "It would also be a good idea to have different source and destination addresses, so they can be verified in tests independently.", "url": "https://github.com/netty/netty/pull/10498#discussion_r480085940", "createdAt": "2020-08-31T12:07:38Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/pcap/EthernetPacket.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+final class EthernetPacket {\n+\n+    /**\n+     * AA:BB:CC:DD:EE:FF\n+     */\n+    private static final byte[] DUMMY_ADDRESS = new byte[]{-86, -69, -52, -35, -18, -1};", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk4NjYyMQ=="}, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTI4MjE0OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/EthernetPacket.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwOTowNjo0N1rOHJwq8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxODo1NDoxMVrOHLD8XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk5NjY1Ng==", "bodyText": "Layer 2 ethernet frames end with a CRC-32 checksum.", "url": "https://github.com/netty/netty/pull/10498#discussion_r479996656", "createdAt": "2020-08-31T09:06:47Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/pcap/EthernetPacket.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+final class EthernetPacket {\n+\n+    /**\n+     * AA:BB:CC:DD:EE:FF\n+     */\n+    private static final byte[] DUMMY_ADDRESS = new byte[]{-86, -69, -52, -35, -18, -1};\n+\n+    private EthernetPacket() {\n+        // Prevent outside initialization\n+    }\n+\n+    /**\n+     * Write IPv4 Ethernet Packet. It uses a dummy MAC address for both source and destination.\n+     *\n+     * @param byteBuf    ByteBuf where Ethernet Packet data will be set\n+     * @param payload    Payload of IPv4\n+     */\n+    static void writeIPv4(ByteBuf byteBuf, ByteBuf payload) {\n+        EthernetPacket.writePacket(byteBuf, payload, DUMMY_ADDRESS, DUMMY_ADDRESS, 0x0800);\n+    }\n+\n+    /**\n+     * Write IPv6 Ethernet Packet. It uses a dummy MAC address for both source and destination.\n+     *\n+     * @param byteBuf    ByteBuf where Ethernet Packet data will be set\n+     * @param payload    Payload of IPv6\n+     */\n+    static void writeIPv6(ByteBuf byteBuf, ByteBuf payload) {\n+        EthernetPacket.writePacket(byteBuf, payload, DUMMY_ADDRESS, DUMMY_ADDRESS, 0x86dd);\n+    }\n+\n+    /**\n+     * Write IPv6 Ethernet Packet\n+     *\n+     * @param byteBuf    ByteBuf where Ethernet Packet data will be set\n+     * @param payload    Payload of IPv6\n+     * @param srcAddress Source MAC Address\n+     * @param dstAddress Destination MAC Address\n+     * @param type Type of Frame\n+     */\n+    private static void writePacket(ByteBuf byteBuf, ByteBuf payload, byte[] srcAddress, byte[] dstAddress,\n+                                    int type) {\n+        byteBuf.writeBytes(dstAddress); // Destination MAC Address\n+        byteBuf.writeBytes(srcAddress); // Source MAC Address\n+        byteBuf.writeShort(type);       // Frame Type (IPv4 or IPv6)\n+        byteBuf.writeBytes(payload);    // Payload of L3\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIwMzAxMA==", "bodyText": "Captured real traffic with Wireshark. Didn't find CRC-32 in Ethernet Packet. :-| If I add CRC-32, It doesn't display in Ethernet Tab but marks it as VSS Monitoring Ethernet trailer in UDP packet,", "url": "https://github.com/netty/netty/pull/10498#discussion_r480203010", "createdAt": "2020-08-31T15:22:13Z", "author": {"login": "hyperxpro"}, "path": "handler/src/main/java/io/netty/handler/pcap/EthernetPacket.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+final class EthernetPacket {\n+\n+    /**\n+     * AA:BB:CC:DD:EE:FF\n+     */\n+    private static final byte[] DUMMY_ADDRESS = new byte[]{-86, -69, -52, -35, -18, -1};\n+\n+    private EthernetPacket() {\n+        // Prevent outside initialization\n+    }\n+\n+    /**\n+     * Write IPv4 Ethernet Packet. It uses a dummy MAC address for both source and destination.\n+     *\n+     * @param byteBuf    ByteBuf where Ethernet Packet data will be set\n+     * @param payload    Payload of IPv4\n+     */\n+    static void writeIPv4(ByteBuf byteBuf, ByteBuf payload) {\n+        EthernetPacket.writePacket(byteBuf, payload, DUMMY_ADDRESS, DUMMY_ADDRESS, 0x0800);\n+    }\n+\n+    /**\n+     * Write IPv6 Ethernet Packet. It uses a dummy MAC address for both source and destination.\n+     *\n+     * @param byteBuf    ByteBuf where Ethernet Packet data will be set\n+     * @param payload    Payload of IPv6\n+     */\n+    static void writeIPv6(ByteBuf byteBuf, ByteBuf payload) {\n+        EthernetPacket.writePacket(byteBuf, payload, DUMMY_ADDRESS, DUMMY_ADDRESS, 0x86dd);\n+    }\n+\n+    /**\n+     * Write IPv6 Ethernet Packet\n+     *\n+     * @param byteBuf    ByteBuf where Ethernet Packet data will be set\n+     * @param payload    Payload of IPv6\n+     * @param srcAddress Source MAC Address\n+     * @param dstAddress Destination MAC Address\n+     * @param type Type of Frame\n+     */\n+    private static void writePacket(ByteBuf byteBuf, ByteBuf payload, byte[] srcAddress, byte[] dstAddress,\n+                                    int type) {\n+        byteBuf.writeBytes(dstAddress); // Destination MAC Address\n+        byteBuf.writeBytes(srcAddress); // Source MAC Address\n+        byteBuf.writeShort(type);       // Frame Type (IPv4 or IPv6)\n+        byteBuf.writeBytes(payload);    // Payload of L3\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk5NjY1Ng=="}, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAyODQxMA==", "bodyText": "Ok, weird. Maybe the docs I read are wrong. \ud83e\udd37", "url": "https://github.com/netty/netty/pull/10498#discussion_r481028410", "createdAt": "2020-09-01T10:11:24Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/pcap/EthernetPacket.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+final class EthernetPacket {\n+\n+    /**\n+     * AA:BB:CC:DD:EE:FF\n+     */\n+    private static final byte[] DUMMY_ADDRESS = new byte[]{-86, -69, -52, -35, -18, -1};\n+\n+    private EthernetPacket() {\n+        // Prevent outside initialization\n+    }\n+\n+    /**\n+     * Write IPv4 Ethernet Packet. It uses a dummy MAC address for both source and destination.\n+     *\n+     * @param byteBuf    ByteBuf where Ethernet Packet data will be set\n+     * @param payload    Payload of IPv4\n+     */\n+    static void writeIPv4(ByteBuf byteBuf, ByteBuf payload) {\n+        EthernetPacket.writePacket(byteBuf, payload, DUMMY_ADDRESS, DUMMY_ADDRESS, 0x0800);\n+    }\n+\n+    /**\n+     * Write IPv6 Ethernet Packet. It uses a dummy MAC address for both source and destination.\n+     *\n+     * @param byteBuf    ByteBuf where Ethernet Packet data will be set\n+     * @param payload    Payload of IPv6\n+     */\n+    static void writeIPv6(ByteBuf byteBuf, ByteBuf payload) {\n+        EthernetPacket.writePacket(byteBuf, payload, DUMMY_ADDRESS, DUMMY_ADDRESS, 0x86dd);\n+    }\n+\n+    /**\n+     * Write IPv6 Ethernet Packet\n+     *\n+     * @param byteBuf    ByteBuf where Ethernet Packet data will be set\n+     * @param payload    Payload of IPv6\n+     * @param srcAddress Source MAC Address\n+     * @param dstAddress Destination MAC Address\n+     * @param type Type of Frame\n+     */\n+    private static void writePacket(ByteBuf byteBuf, ByteBuf payload, byte[] srcAddress, byte[] dstAddress,\n+                                    int type) {\n+        byteBuf.writeBytes(dstAddress); // Destination MAC Address\n+        byteBuf.writeBytes(srcAddress); // Source MAC Address\n+        byteBuf.writeShort(type);       // Frame Type (IPv4 or IPv6)\n+        byteBuf.writeBytes(payload);    // Payload of L3\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk5NjY1Ng=="}, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM2MDk4OA==", "bodyText": "I read the same. But adding CRC-32, at last, is giving weird results. Through the entire development, I'm focused on Wireshark usability. Wireshark didn't give any errors so hope it's correct. :p", "url": "https://github.com/netty/netty/pull/10498#discussion_r481360988", "createdAt": "2020-09-01T18:54:11Z", "author": {"login": "hyperxpro"}, "path": "handler/src/main/java/io/netty/handler/pcap/EthernetPacket.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+final class EthernetPacket {\n+\n+    /**\n+     * AA:BB:CC:DD:EE:FF\n+     */\n+    private static final byte[] DUMMY_ADDRESS = new byte[]{-86, -69, -52, -35, -18, -1};\n+\n+    private EthernetPacket() {\n+        // Prevent outside initialization\n+    }\n+\n+    /**\n+     * Write IPv4 Ethernet Packet. It uses a dummy MAC address for both source and destination.\n+     *\n+     * @param byteBuf    ByteBuf where Ethernet Packet data will be set\n+     * @param payload    Payload of IPv4\n+     */\n+    static void writeIPv4(ByteBuf byteBuf, ByteBuf payload) {\n+        EthernetPacket.writePacket(byteBuf, payload, DUMMY_ADDRESS, DUMMY_ADDRESS, 0x0800);\n+    }\n+\n+    /**\n+     * Write IPv6 Ethernet Packet. It uses a dummy MAC address for both source and destination.\n+     *\n+     * @param byteBuf    ByteBuf where Ethernet Packet data will be set\n+     * @param payload    Payload of IPv6\n+     */\n+    static void writeIPv6(ByteBuf byteBuf, ByteBuf payload) {\n+        EthernetPacket.writePacket(byteBuf, payload, DUMMY_ADDRESS, DUMMY_ADDRESS, 0x86dd);\n+    }\n+\n+    /**\n+     * Write IPv6 Ethernet Packet\n+     *\n+     * @param byteBuf    ByteBuf where Ethernet Packet data will be set\n+     * @param payload    Payload of IPv6\n+     * @param srcAddress Source MAC Address\n+     * @param dstAddress Destination MAC Address\n+     * @param type Type of Frame\n+     */\n+    private static void writePacket(ByteBuf byteBuf, ByteBuf payload, byte[] srcAddress, byte[] dstAddress,\n+                                    int type) {\n+        byteBuf.writeBytes(dstAddress); // Destination MAC Address\n+        byteBuf.writeBytes(srcAddress); // Source MAC Address\n+        byteBuf.writeShort(type);       // Frame Type (IPv4 or IPv6)\n+        byteBuf.writeBytes(payload);    // Payload of L3\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3OTk5NjY1Ng=="}, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTMxNDU2OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/EthernetPacket.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwOToxNjo0N1rOHJw-VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwOToxNjo0N1rOHJw-VA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAwMTYyMA==", "bodyText": "Create a constant for 0x0800.", "url": "https://github.com/netty/netty/pull/10498#discussion_r480001620", "createdAt": "2020-08-31T09:16:47Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/pcap/EthernetPacket.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+final class EthernetPacket {\n+\n+    /**\n+     * AA:BB:CC:DD:EE:FF\n+     */\n+    private static final byte[] DUMMY_ADDRESS = new byte[]{-86, -69, -52, -35, -18, -1};\n+\n+    private EthernetPacket() {\n+        // Prevent outside initialization\n+    }\n+\n+    /**\n+     * Write IPv4 Ethernet Packet. It uses a dummy MAC address for both source and destination.\n+     *\n+     * @param byteBuf    ByteBuf where Ethernet Packet data will be set\n+     * @param payload    Payload of IPv4\n+     */\n+    static void writeIPv4(ByteBuf byteBuf, ByteBuf payload) {\n+        EthernetPacket.writePacket(byteBuf, payload, DUMMY_ADDRESS, DUMMY_ADDRESS, 0x0800);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTMxNTU5OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/EthernetPacket.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwOToxNzowMVrOHJw-7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwOToxNzowMVrOHJw-7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAwMTc3NA==", "bodyText": "Create a constant for 0x86dd.", "url": "https://github.com/netty/netty/pull/10498#discussion_r480001774", "createdAt": "2020-08-31T09:17:01Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/pcap/EthernetPacket.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+final class EthernetPacket {\n+\n+    /**\n+     * AA:BB:CC:DD:EE:FF\n+     */\n+    private static final byte[] DUMMY_ADDRESS = new byte[]{-86, -69, -52, -35, -18, -1};\n+\n+    private EthernetPacket() {\n+        // Prevent outside initialization\n+    }\n+\n+    /**\n+     * Write IPv4 Ethernet Packet. It uses a dummy MAC address for both source and destination.\n+     *\n+     * @param byteBuf    ByteBuf where Ethernet Packet data will be set\n+     * @param payload    Payload of IPv4\n+     */\n+    static void writeIPv4(ByteBuf byteBuf, ByteBuf payload) {\n+        EthernetPacket.writePacket(byteBuf, payload, DUMMY_ADDRESS, DUMMY_ADDRESS, 0x0800);\n+    }\n+\n+    /**\n+     * Write IPv6 Ethernet Packet. It uses a dummy MAC address for both source and destination.\n+     *\n+     * @param byteBuf    ByteBuf where Ethernet Packet data will be set\n+     * @param payload    Payload of IPv6\n+     */\n+    static void writeIPv6(ByteBuf byteBuf, ByteBuf payload) {\n+        EthernetPacket.writePacket(byteBuf, payload, DUMMY_ADDRESS, DUMMY_ADDRESS, 0x86dd);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTMzNjU0OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/TCPPacket.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwOToyMzoyOVrOHJxLmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNDo1NDo1MlrOHK6Hpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAwNTAxNw==", "bodyText": "Please move the constants into the Flag enum, and combine them into the tcpFlags variable with bit-wise OR. That'll be much shorter.", "url": "https://github.com/netty/netty/pull/10498#discussion_r480005017", "createdAt": "2020-08-31T09:23:29Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/pcap/TCPPacket.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+final class TCPPacket {\n+\n+    private TCPPacket() {\n+        // Prevent outside initialization\n+    }\n+\n+    /**\n+     * Write TCP Packet\n+     *\n+     * @param byteBuf ByteBuf where Packet data will be set\n+     * @param payload Payload of this Packet\n+     * @param srcPort Source Port\n+     * @param dstPort Destination Port\n+     */\n+    static void writePacket(ByteBuf byteBuf, ByteBuf payload, int segmentNumber, int ackNumber, int srcPort, int dstPort, Flag... flags) {\n+        int fin = 0;\n+        int syn = 0;\n+        int rst = 0;\n+        int psh = 0;\n+        int ack = 0;\n+        int urg = 0;\n+        int ece = 0;\n+        int cwr = 0;\n+\n+        for (Flag flag : flags) {\n+            switch (flag) {\n+                case FIN:\n+                    fin = 1;\n+                case SYN:\n+                    syn = 1;\n+                case RST:\n+                    rst = 1;\n+                case PSH:\n+                    psh = 1;\n+                case ACK:\n+                    ack = 1;\n+                case URG:\n+                    urg = 1;\n+                case ECE:\n+                    ece = 1;\n+                case CWR:\n+                    cwr = 1;\n+            }\n+        }\n+\n+        int tcpFlags = fin << 0 |\n+                syn << 1 |\n+                rst << 2 |\n+                psh << 3 |\n+                ack << 4 |\n+                urg << 5 |\n+                ece << 6 |\n+                cwr << 7;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDM1NTQ0NQ==", "bodyText": "Tried. Makes code more complex.", "url": "https://github.com/netty/netty/pull/10498#discussion_r480355445", "createdAt": "2020-08-31T19:36:45Z", "author": {"login": "hyperxpro"}, "path": "handler/src/main/java/io/netty/handler/pcap/TCPPacket.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+final class TCPPacket {\n+\n+    private TCPPacket() {\n+        // Prevent outside initialization\n+    }\n+\n+    /**\n+     * Write TCP Packet\n+     *\n+     * @param byteBuf ByteBuf where Packet data will be set\n+     * @param payload Payload of this Packet\n+     * @param srcPort Source Port\n+     * @param dstPort Destination Port\n+     */\n+    static void writePacket(ByteBuf byteBuf, ByteBuf payload, int segmentNumber, int ackNumber, int srcPort, int dstPort, Flag... flags) {\n+        int fin = 0;\n+        int syn = 0;\n+        int rst = 0;\n+        int psh = 0;\n+        int ack = 0;\n+        int urg = 0;\n+        int ece = 0;\n+        int cwr = 0;\n+\n+        for (Flag flag : flags) {\n+            switch (flag) {\n+                case FIN:\n+                    fin = 1;\n+                case SYN:\n+                    syn = 1;\n+                case RST:\n+                    rst = 1;\n+                case PSH:\n+                    psh = 1;\n+                case ACK:\n+                    ack = 1;\n+                case URG:\n+                    urg = 1;\n+                case ECE:\n+                    ece = 1;\n+                case CWR:\n+                    cwr = 1;\n+            }\n+        }\n+\n+        int tcpFlags = fin << 0 |\n+                syn << 1 |\n+                rst << 2 |\n+                psh << 3 |\n+                ack << 4 |\n+                urg << 5 |\n+                ece << 6 |\n+                cwr << 7;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAwNTAxNw=="}, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTAyOTMxNw==", "bodyText": "Not sure what you tried. It doesn't seem more complex to me:\nIndex: handler/src/main/java/io/netty/handler/pcap/TCPPacket.java\nIDEA additional info:\nSubsystem: com.intellij.openapi.diff.impl.patch.CharsetEP\n<+>UTF-8\n===================================================================\n--- handler/src/main/java/io/netty/handler/pcap/TCPPacket.java\t(revision 41c98e5e93537a0ff66f85490c616337e3e6ec53)\n+++ handler/src/main/java/io/netty/handler/pcap/TCPPacket.java\t(date 1598953668767)\n@@ -56,53 +56,27 @@\n     }\n \n     enum TCPFlag {\n-        FIN,\n-        SYN,\n-        RST,\n-        PSH,\n-        ACK,\n-        URG,\n-        ECE,\n-        CWR;\n+        FIN(1),\n+        SYN(1 << 1),\n+        RST(1 << 2),\n+        PSH(1 << 3),\n+        ACK(1 << 4),\n+        URG(1 << 5),\n+        ECE(1 << 6),\n+        CWR(1 << 7);\n+        \n+        final int value;\n+        \n+        TCPFlag(int value) {\n+            this.value = value;\n+        }\n \n         static int getFlag(TCPFlag... tcpFlags) {\n-            int fin = 0;\n-            int syn = 0;\n-            int rst = 0;\n-            int psh = 0;\n-            int ack = 0;\n-            int urg = 0;\n-            int ece = 0;\n-            int cwr = 0;\n-\n+            int flags = 0;\n             for (TCPFlag tcpFlag : tcpFlags) {\n-                if (tcpFlag == TCPFlag.FIN) {\n-                    fin = 1;\n-                } else if (tcpFlag == TCPFlag.SYN) {\n-                    syn = 1;\n-                } else if (tcpFlag == TCPFlag.RST) {\n-                    rst = 1;\n-                } else if (tcpFlag == TCPFlag.PSH) {\n-                    psh = 1;\n-                } else if (tcpFlag == TCPFlag.ACK) {\n-                    ack = 1;\n-                } else if (tcpFlag == TCPFlag.URG) {\n-                    urg = 1;\n-                } else if (tcpFlag == TCPFlag.ECE) {\n-                    ece = 1;\n-                } else if (tcpFlag == TCPFlag.CWR) {\n-                    cwr = 1;\n-                }\n+                flags |= tcpFlag.value;\n             }\n-\n-            return  fin << 0 |\n-                    syn << 1 |\n-                    rst << 2 |\n-                    psh << 3 |\n-                    ack << 4 |\n-                    urg << 5 |\n-                    ece << 6 |\n-                    cwr << 7;\n+            return  flags;\n         }\n     }\n }", "url": "https://github.com/netty/netty/pull/10498#discussion_r481029317", "createdAt": "2020-09-01T10:12:47Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/pcap/TCPPacket.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+final class TCPPacket {\n+\n+    private TCPPacket() {\n+        // Prevent outside initialization\n+    }\n+\n+    /**\n+     * Write TCP Packet\n+     *\n+     * @param byteBuf ByteBuf where Packet data will be set\n+     * @param payload Payload of this Packet\n+     * @param srcPort Source Port\n+     * @param dstPort Destination Port\n+     */\n+    static void writePacket(ByteBuf byteBuf, ByteBuf payload, int segmentNumber, int ackNumber, int srcPort, int dstPort, Flag... flags) {\n+        int fin = 0;\n+        int syn = 0;\n+        int rst = 0;\n+        int psh = 0;\n+        int ack = 0;\n+        int urg = 0;\n+        int ece = 0;\n+        int cwr = 0;\n+\n+        for (Flag flag : flags) {\n+            switch (flag) {\n+                case FIN:\n+                    fin = 1;\n+                case SYN:\n+                    syn = 1;\n+                case RST:\n+                    rst = 1;\n+                case PSH:\n+                    psh = 1;\n+                case ACK:\n+                    ack = 1;\n+                case URG:\n+                    urg = 1;\n+                case ECE:\n+                    ece = 1;\n+                case CWR:\n+                    cwr = 1;\n+            }\n+        }\n+\n+        int tcpFlags = fin << 0 |\n+                syn << 1 |\n+                rst << 2 |\n+                psh << 3 |\n+                ack << 4 |\n+                urg << 5 |\n+                ece << 6 |\n+                cwr << 7;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAwNTAxNw=="}, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIwMDAzOA==", "bodyText": "Alright. Get it.", "url": "https://github.com/netty/netty/pull/10498#discussion_r481200038", "createdAt": "2020-09-01T14:54:52Z", "author": {"login": "hyperxpro"}, "path": "handler/src/main/java/io/netty/handler/pcap/TCPPacket.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+final class TCPPacket {\n+\n+    private TCPPacket() {\n+        // Prevent outside initialization\n+    }\n+\n+    /**\n+     * Write TCP Packet\n+     *\n+     * @param byteBuf ByteBuf where Packet data will be set\n+     * @param payload Payload of this Packet\n+     * @param srcPort Source Port\n+     * @param dstPort Destination Port\n+     */\n+    static void writePacket(ByteBuf byteBuf, ByteBuf payload, int segmentNumber, int ackNumber, int srcPort, int dstPort, Flag... flags) {\n+        int fin = 0;\n+        int syn = 0;\n+        int rst = 0;\n+        int psh = 0;\n+        int ack = 0;\n+        int urg = 0;\n+        int ece = 0;\n+        int cwr = 0;\n+\n+        for (Flag flag : flags) {\n+            switch (flag) {\n+                case FIN:\n+                    fin = 1;\n+                case SYN:\n+                    syn = 1;\n+                case RST:\n+                    rst = 1;\n+                case PSH:\n+                    psh = 1;\n+                case ACK:\n+                    ack = 1;\n+                case URG:\n+                    urg = 1;\n+                case ECE:\n+                    ece = 1;\n+                case CWR:\n+                    cwr = 1;\n+            }\n+        }\n+\n+        int tcpFlags = fin << 0 |\n+                syn << 1 |\n+                rst << 2 |\n+                psh << 3 |\n+                ack << 4 |\n+                urg << 5 |\n+                ece << 6 |\n+                cwr << 7;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAwNTAxNw=="}, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTMzODk5OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/TCPPacket.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwOToyNDoxNlrOHJxNGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwOToyNDoxNlrOHJxNGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAwNTQwMA==", "bodyText": "Call this TcpFlag or something, so the context is clear.", "url": "https://github.com/netty/netty/pull/10498#discussion_r480005400", "createdAt": "2020-08-31T09:24:16Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/pcap/TCPPacket.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+final class TCPPacket {\n+\n+    private TCPPacket() {\n+        // Prevent outside initialization\n+    }\n+\n+    /**\n+     * Write TCP Packet\n+     *\n+     * @param byteBuf ByteBuf where Packet data will be set\n+     * @param payload Payload of this Packet\n+     * @param srcPort Source Port\n+     * @param dstPort Destination Port\n+     */\n+    static void writePacket(ByteBuf byteBuf, ByteBuf payload, int segmentNumber, int ackNumber, int srcPort, int dstPort, Flag... flags) {\n+        int fin = 0;\n+        int syn = 0;\n+        int rst = 0;\n+        int psh = 0;\n+        int ack = 0;\n+        int urg = 0;\n+        int ece = 0;\n+        int cwr = 0;\n+\n+        for (Flag flag : flags) {\n+            switch (flag) {\n+                case FIN:\n+                    fin = 1;\n+                case SYN:\n+                    syn = 1;\n+                case RST:\n+                    rst = 1;\n+                case PSH:\n+                    psh = 1;\n+                case ACK:\n+                    ack = 1;\n+                case URG:\n+                    urg = 1;\n+                case ECE:\n+                    ece = 1;\n+                case CWR:\n+                    cwr = 1;\n+            }\n+        }\n+\n+        int tcpFlags = fin << 0 |\n+                syn << 1 |\n+                rst << 2 |\n+                psh << 3 |\n+                ack << 4 |\n+                urg << 5 |\n+                ece << 6 |\n+                cwr << 7;\n+\n+        byteBuf.writeShort(srcPort);     // Source Port\n+        byteBuf.writeShort(dstPort);     // Destination Port\n+        byteBuf.writeInt(segmentNumber); // Segment Number\n+        byteBuf.writeInt(ackNumber);     // Acknowledgment Number\n+        byteBuf.writeShort(5 << 12 | tcpFlags); // Flags\n+        byteBuf.writeShort(65535);       // Window Size\n+        byteBuf.writeShort(0x0001);      // Checksum\n+        byteBuf.writeShort(0);           // Urgent Pointer\n+\n+        if (payload != null) {\n+            byteBuf.writeBytes(payload); //  Payload of Data\n+        }\n+    }\n+\n+    enum Flag {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTQwMjA1OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwOTo0MzozMlrOHJxy3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQwOTo0MzozMlrOHJxy3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAxNTA2OA==", "bodyText": "Please also specify what it means when these parameters are false.", "url": "https://github.com/netty/netty/pull/10498#discussion_r480015068", "createdAt": "2020-08-31T09:43:32Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "diffHunk": "@@ -0,0 +1,372 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.socket.DatagramPacket;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.Inet4Address;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+\n+public final class PCAPWriteHandler extends ChannelDuplexHandler {\n+\n+    private final InternalLogger logger = InternalLoggerFactory.getInstance(PCAPWriteHandler.class);\n+\n+    /**\n+     * TCP Sender Segment Number.\n+     */\n+    private int sendSegmentNumber = 1;\n+\n+    /**\n+     * TCP Receiver Segment Number\n+     */\n+    private int receiveSegmentNumber = 1;\n+\n+    /**\n+     * Source Address [TCP ONLY]\n+     */\n+    private InetSocketAddress srcAddr;\n+\n+    /**\n+     * Destination Address [TCP ONLY]\n+     */\n+    private InetSocketAddress dstAddr;\n+\n+    private final OutputStream outputStream;\n+    private PCapWriter pCapWriter;\n+    private final boolean isTCP;\n+    private final boolean isServer;\n+    private final boolean captureZeroByte;\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance.\n+     * {@code isTCP}, {@code isServer} and {@code captureZeroByte} are set to {@code false}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream) {\n+        this(outputStream, false, false, false);\n+    }\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance.\n+     * {@code captureZeroByte} is set to {@code false}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     * @param isTCP        {@code true} to capture TCP packets\n+     * @param isServer     {@code true} if we'll capture packet as server\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream, boolean isTCP, boolean isServer) {\n+        this(outputStream, isTCP, isServer, false);\n+    }\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance\n+     *\n+     * @param outputStream    OutputStream where Pcap data will be written\n+     * @param isTCP           {@code true} to capture TCP packets\n+     * @param isServer        {@code true} if we'll capture packet as server\n+     * @param captureZeroByte {@code true} if we'll capture packets with 0 bytes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTQ1ODA1OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDowMTo0MFrOHJyVDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDowMTo0MFrOHJyVDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAyMzgyMg==", "bodyText": "Maybe you don't need the isTCP field if you test if ctx.channel() is an instance of DatagramChannel.", "url": "https://github.com/netty/netty/pull/10498#discussion_r480023822", "createdAt": "2020-08-31T10:01:40Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "diffHunk": "@@ -0,0 +1,372 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.socket.DatagramPacket;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.Inet4Address;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+\n+public final class PCAPWriteHandler extends ChannelDuplexHandler {\n+\n+    private final InternalLogger logger = InternalLoggerFactory.getInstance(PCAPWriteHandler.class);\n+\n+    /**\n+     * TCP Sender Segment Number.\n+     */\n+    private int sendSegmentNumber = 1;\n+\n+    /**\n+     * TCP Receiver Segment Number\n+     */\n+    private int receiveSegmentNumber = 1;\n+\n+    /**\n+     * Source Address [TCP ONLY]\n+     */\n+    private InetSocketAddress srcAddr;\n+\n+    /**\n+     * Destination Address [TCP ONLY]\n+     */\n+    private InetSocketAddress dstAddr;\n+\n+    private final OutputStream outputStream;\n+    private PCapWriter pCapWriter;\n+    private final boolean isTCP;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTQ3MDk0OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDowNjowOVrOHJydGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDo1MTo0OFrOHJ8Fiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAyNTg4Mw==", "bodyText": "Can we request a pre-sized buffer?", "url": "https://github.com/netty/netty/pull/10498#discussion_r480025883", "createdAt": "2020-08-31T10:06:09Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "diffHunk": "@@ -0,0 +1,372 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.socket.DatagramPacket;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.Inet4Address;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+\n+public final class PCAPWriteHandler extends ChannelDuplexHandler {\n+\n+    private final InternalLogger logger = InternalLoggerFactory.getInstance(PCAPWriteHandler.class);\n+\n+    /**\n+     * TCP Sender Segment Number.\n+     */\n+    private int sendSegmentNumber = 1;\n+\n+    /**\n+     * TCP Receiver Segment Number\n+     */\n+    private int receiveSegmentNumber = 1;\n+\n+    /**\n+     * Source Address [TCP ONLY]\n+     */\n+    private InetSocketAddress srcAddr;\n+\n+    /**\n+     * Destination Address [TCP ONLY]\n+     */\n+    private InetSocketAddress dstAddr;\n+\n+    private final OutputStream outputStream;\n+    private PCapWriter pCapWriter;\n+    private final boolean isTCP;\n+    private final boolean isServer;\n+    private final boolean captureZeroByte;\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance.\n+     * {@code isTCP}, {@code isServer} and {@code captureZeroByte} are set to {@code false}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream) {\n+        this(outputStream, false, false, false);\n+    }\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance.\n+     * {@code captureZeroByte} is set to {@code false}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     * @param isTCP        {@code true} to capture TCP packets\n+     * @param isServer     {@code true} if we'll capture packet as server\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream, boolean isTCP, boolean isServer) {\n+        this(outputStream, isTCP, isServer, false);\n+    }\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance\n+     *\n+     * @param outputStream    OutputStream where Pcap data will be written\n+     * @param isTCP           {@code true} to capture TCP packets\n+     * @param isServer        {@code true} if we'll capture packet as server\n+     * @param captureZeroByte {@code true} if we'll capture packets with 0 bytes\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream, boolean isTCP, boolean isServer, boolean captureZeroByte) {\n+        this.outputStream = outputStream;\n+        this.isTCP = isTCP;\n+        this.isServer = isServer;\n+        this.captureZeroByte = captureZeroByte;\n+    }\n+\n+    @Override\n+    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+        this.pCapWriter = new PCapWriter(this.outputStream, ctx.alloc().buffer());\n+\n+        /*\n+         * If `isServer` is set to true, it means we'll be receiving data from client.\n+         * In this case, Source Address will be `remoteAddress` and Destination Address\n+         * will be `localAddress`.\n+         *\n+         * If `isServer` is set to false, it means we'll be sending data to server.\n+         * In this case, Source Address will be `localAddress` and Destination Address\n+         * will be `remoteAddress`.\n+         */\n+        if (isTCP) {\n+            if (isServer) {\n+                srcAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().localAddress();\n+            } else {\n+                srcAddr = (InetSocketAddress) ctx.channel().localAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+            }\n+        }\n+\n+        // If `isTCP` is true, then we'll simulate a fake handshake.\n+        if (isTCP) {\n+            logger.debug(\"Starting Fake TCP 3-Way Handshake\");\n+\n+            ByteBuf tcpBuf = ctx.alloc().buffer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE4MzY5MQ==", "bodyText": "We can but not really useful since we know what already know we'll be doing exactly.", "url": "https://github.com/netty/netty/pull/10498#discussion_r480183691", "createdAt": "2020-08-31T14:51:48Z", "author": {"login": "hyperxpro"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "diffHunk": "@@ -0,0 +1,372 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.socket.DatagramPacket;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.Inet4Address;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+\n+public final class PCAPWriteHandler extends ChannelDuplexHandler {\n+\n+    private final InternalLogger logger = InternalLoggerFactory.getInstance(PCAPWriteHandler.class);\n+\n+    /**\n+     * TCP Sender Segment Number.\n+     */\n+    private int sendSegmentNumber = 1;\n+\n+    /**\n+     * TCP Receiver Segment Number\n+     */\n+    private int receiveSegmentNumber = 1;\n+\n+    /**\n+     * Source Address [TCP ONLY]\n+     */\n+    private InetSocketAddress srcAddr;\n+\n+    /**\n+     * Destination Address [TCP ONLY]\n+     */\n+    private InetSocketAddress dstAddr;\n+\n+    private final OutputStream outputStream;\n+    private PCapWriter pCapWriter;\n+    private final boolean isTCP;\n+    private final boolean isServer;\n+    private final boolean captureZeroByte;\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance.\n+     * {@code isTCP}, {@code isServer} and {@code captureZeroByte} are set to {@code false}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream) {\n+        this(outputStream, false, false, false);\n+    }\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance.\n+     * {@code captureZeroByte} is set to {@code false}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     * @param isTCP        {@code true} to capture TCP packets\n+     * @param isServer     {@code true} if we'll capture packet as server\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream, boolean isTCP, boolean isServer) {\n+        this(outputStream, isTCP, isServer, false);\n+    }\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance\n+     *\n+     * @param outputStream    OutputStream where Pcap data will be written\n+     * @param isTCP           {@code true} to capture TCP packets\n+     * @param isServer        {@code true} if we'll capture packet as server\n+     * @param captureZeroByte {@code true} if we'll capture packets with 0 bytes\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream, boolean isTCP, boolean isServer, boolean captureZeroByte) {\n+        this.outputStream = outputStream;\n+        this.isTCP = isTCP;\n+        this.isServer = isServer;\n+        this.captureZeroByte = captureZeroByte;\n+    }\n+\n+    @Override\n+    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+        this.pCapWriter = new PCapWriter(this.outputStream, ctx.alloc().buffer());\n+\n+        /*\n+         * If `isServer` is set to true, it means we'll be receiving data from client.\n+         * In this case, Source Address will be `remoteAddress` and Destination Address\n+         * will be `localAddress`.\n+         *\n+         * If `isServer` is set to false, it means we'll be sending data to server.\n+         * In this case, Source Address will be `localAddress` and Destination Address\n+         * will be `remoteAddress`.\n+         */\n+        if (isTCP) {\n+            if (isServer) {\n+                srcAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().localAddress();\n+            } else {\n+                srcAddr = (InetSocketAddress) ctx.channel().localAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+            }\n+        }\n+\n+        // If `isTCP` is true, then we'll simulate a fake handshake.\n+        if (isTCP) {\n+            logger.debug(\"Starting Fake TCP 3-Way Handshake\");\n+\n+            ByteBuf tcpBuf = ctx.alloc().buffer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAyNTg4Mw=="}, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTQ3MTUxOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDowNjoyNFrOHJydfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDowNjoyNFrOHJydfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAyNTk4MQ==", "bodyText": "Release in finally block.", "url": "https://github.com/netty/netty/pull/10498#discussion_r480025981", "createdAt": "2020-08-31T10:06:24Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "diffHunk": "@@ -0,0 +1,372 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.socket.DatagramPacket;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.Inet4Address;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+\n+public final class PCAPWriteHandler extends ChannelDuplexHandler {\n+\n+    private final InternalLogger logger = InternalLoggerFactory.getInstance(PCAPWriteHandler.class);\n+\n+    /**\n+     * TCP Sender Segment Number.\n+     */\n+    private int sendSegmentNumber = 1;\n+\n+    /**\n+     * TCP Receiver Segment Number\n+     */\n+    private int receiveSegmentNumber = 1;\n+\n+    /**\n+     * Source Address [TCP ONLY]\n+     */\n+    private InetSocketAddress srcAddr;\n+\n+    /**\n+     * Destination Address [TCP ONLY]\n+     */\n+    private InetSocketAddress dstAddr;\n+\n+    private final OutputStream outputStream;\n+    private PCapWriter pCapWriter;\n+    private final boolean isTCP;\n+    private final boolean isServer;\n+    private final boolean captureZeroByte;\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance.\n+     * {@code isTCP}, {@code isServer} and {@code captureZeroByte} are set to {@code false}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream) {\n+        this(outputStream, false, false, false);\n+    }\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance.\n+     * {@code captureZeroByte} is set to {@code false}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     * @param isTCP        {@code true} to capture TCP packets\n+     * @param isServer     {@code true} if we'll capture packet as server\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream, boolean isTCP, boolean isServer) {\n+        this(outputStream, isTCP, isServer, false);\n+    }\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance\n+     *\n+     * @param outputStream    OutputStream where Pcap data will be written\n+     * @param isTCP           {@code true} to capture TCP packets\n+     * @param isServer        {@code true} if we'll capture packet as server\n+     * @param captureZeroByte {@code true} if we'll capture packets with 0 bytes\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream, boolean isTCP, boolean isServer, boolean captureZeroByte) {\n+        this.outputStream = outputStream;\n+        this.isTCP = isTCP;\n+        this.isServer = isServer;\n+        this.captureZeroByte = captureZeroByte;\n+    }\n+\n+    @Override\n+    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+        this.pCapWriter = new PCapWriter(this.outputStream, ctx.alloc().buffer());\n+\n+        /*\n+         * If `isServer` is set to true, it means we'll be receiving data from client.\n+         * In this case, Source Address will be `remoteAddress` and Destination Address\n+         * will be `localAddress`.\n+         *\n+         * If `isServer` is set to false, it means we'll be sending data to server.\n+         * In this case, Source Address will be `localAddress` and Destination Address\n+         * will be `remoteAddress`.\n+         */\n+        if (isTCP) {\n+            if (isServer) {\n+                srcAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().localAddress();\n+            } else {\n+                srcAddr = (InetSocketAddress) ctx.channel().localAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+            }\n+        }\n+\n+        // If `isTCP` is true, then we'll simulate a fake handshake.\n+        if (isTCP) {\n+            logger.debug(\"Starting Fake TCP 3-Way Handshake\");\n+\n+            ByteBuf tcpBuf = ctx.alloc().buffer();\n+\n+            // Write SYN with Normal Source and Destination Address\n+            TCPPacket.writePacket(tcpBuf, null, 0, 0, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.Flag.SYN);\n+            completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+\n+            // Write SYN+ACK with Reversed Source and Destination Address\n+            TCPPacket.writePacket(tcpBuf, null, 0, 1, dstAddr.getPort(), srcAddr.getPort(), TCPPacket.Flag.SYN,\n+                    TCPPacket.Flag.ACK);\n+            completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc());\n+\n+            // Write ACK with Normal Source and Destination Address\n+            TCPPacket.writePacket(tcpBuf, null, 1, 1, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.Flag.ACK);\n+            completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+\n+            tcpBuf.release();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 142}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTQ4Mjk0OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/IPPacket.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDoxMDowOVrOHJykVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDoxMDowOVrOHJykVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAyNzczMg==", "bodyText": "Please define a constant for 17.", "url": "https://github.com/netty/netty/pull/10498#discussion_r480027732", "createdAt": "2020-08-31T10:10:09Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/pcap/IPPacket.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+final class IPPacket {\n+\n+    private IPPacket() {\n+        // Prevent outside initialization\n+    }\n+\n+    /**\n+     * Write IPv4 Packet for UDP Packet\n+     *\n+     * @param byteBuf    ByteBuf where IP Packet data will be set\n+     * @param payload    Payload of UDP\n+     * @param srcAddress Source IPv4 Address\n+     * @param dstAddress Destination IPv4 Address\n+     */\n+    static void writeUDPv4(ByteBuf byteBuf, ByteBuf payload, int srcAddress, int dstAddress) {\n+        writePacketv4(byteBuf, payload, 17, srcAddress, dstAddress);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTQ4Mzk3OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/IPPacket.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDoxMDoyOVrOHJyk9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDoxMDoyOVrOHJyk9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAyNzg5NQ==", "bodyText": "Please define a constant for 6.", "url": "https://github.com/netty/netty/pull/10498#discussion_r480027895", "createdAt": "2020-08-31T10:10:29Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/pcap/IPPacket.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+final class IPPacket {\n+\n+    private IPPacket() {\n+        // Prevent outside initialization\n+    }\n+\n+    /**\n+     * Write IPv4 Packet for UDP Packet\n+     *\n+     * @param byteBuf    ByteBuf where IP Packet data will be set\n+     * @param payload    Payload of UDP\n+     * @param srcAddress Source IPv4 Address\n+     * @param dstAddress Destination IPv4 Address\n+     */\n+    static void writeUDPv4(ByteBuf byteBuf, ByteBuf payload, int srcAddress, int dstAddress) {\n+        writePacketv4(byteBuf, payload, 17, srcAddress, dstAddress);\n+    }\n+\n+    /**\n+     * Write IPv6 Packet for UDP Packet\n+     *\n+     * @param byteBuf    ByteBuf where IP Packet data will be set\n+     * @param payload    Payload of UDP\n+     * @param srcAddress Source IPv6 Address\n+     * @param dstAddress Destination IPv6 Address\n+     */\n+    static void writeUDPv6(ByteBuf byteBuf, ByteBuf payload, byte[] srcAddress, byte[] dstAddress) {\n+        writePacketv6(byteBuf, payload, 17, srcAddress, dstAddress);\n+    }\n+\n+    /**\n+     * Write IPv4 Packet for TCP Packet\n+     *\n+     * @param byteBuf    ByteBuf where IP Packet data will be set\n+     * @param payload    Payload of TCP\n+     * @param srcAddress Source IPv4 Address\n+     * @param dstAddress Destination IPv4 Address\n+     */\n+    static void writeTCPv4(ByteBuf byteBuf, ByteBuf payload, int srcAddress, int dstAddress) {\n+        writePacketv4(byteBuf, payload, 6, srcAddress, dstAddress);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTQ5MjIxOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/IPPacket.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDoxMzoxN1rOHJyqFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDoxMzoxN1rOHJyqFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAyOTIwNA==", "bodyText": "Please define a TCP_HEADER_SIZE constant for 20.", "url": "https://github.com/netty/netty/pull/10498#discussion_r480029204", "createdAt": "2020-08-31T10:13:17Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/pcap/IPPacket.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+final class IPPacket {\n+\n+    private IPPacket() {\n+        // Prevent outside initialization\n+    }\n+\n+    /**\n+     * Write IPv4 Packet for UDP Packet\n+     *\n+     * @param byteBuf    ByteBuf where IP Packet data will be set\n+     * @param payload    Payload of UDP\n+     * @param srcAddress Source IPv4 Address\n+     * @param dstAddress Destination IPv4 Address\n+     */\n+    static void writeUDPv4(ByteBuf byteBuf, ByteBuf payload, int srcAddress, int dstAddress) {\n+        writePacketv4(byteBuf, payload, 17, srcAddress, dstAddress);\n+    }\n+\n+    /**\n+     * Write IPv6 Packet for UDP Packet\n+     *\n+     * @param byteBuf    ByteBuf where IP Packet data will be set\n+     * @param payload    Payload of UDP\n+     * @param srcAddress Source IPv6 Address\n+     * @param dstAddress Destination IPv6 Address\n+     */\n+    static void writeUDPv6(ByteBuf byteBuf, ByteBuf payload, byte[] srcAddress, byte[] dstAddress) {\n+        writePacketv6(byteBuf, payload, 17, srcAddress, dstAddress);\n+    }\n+\n+    /**\n+     * Write IPv4 Packet for TCP Packet\n+     *\n+     * @param byteBuf    ByteBuf where IP Packet data will be set\n+     * @param payload    Payload of TCP\n+     * @param srcAddress Source IPv4 Address\n+     * @param dstAddress Destination IPv4 Address\n+     */\n+    static void writeTCPv4(ByteBuf byteBuf, ByteBuf payload, int srcAddress, int dstAddress) {\n+        writePacketv4(byteBuf, payload, 6, srcAddress, dstAddress);\n+    }\n+\n+    /**\n+     * Write IPv6 Packet for TCP Packet\n+     *\n+     * @param byteBuf    ByteBuf where IP Packet data will be set\n+     * @param payload    Payload of TCP\n+     * @param srcAddress Source IPv6 Address\n+     * @param dstAddress Destination IPv6 Address\n+     */\n+    static void writeTCPv6(ByteBuf byteBuf, ByteBuf payload, byte[] srcAddress, byte[] dstAddress) {\n+        writePacketv6(byteBuf, payload, 6, srcAddress, dstAddress);\n+    }\n+\n+    private static void writePacketv4(ByteBuf byteBuf, ByteBuf payload, int protocol, int srcAddress,\n+                                      int dstAddress) {\n+        byteBuf.writeByte(0x45);      //  Version + IHL\n+        byteBuf.writeByte(0x00);      //  DSCP\n+        byteBuf.writeShort(payload.readableBytes() + 20); // Length", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTQ5NDAyOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/IPPacket.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDoxMzo1NlrOHJyrNg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDoxMzo1NlrOHJyrNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAyOTQ5NA==", "bodyText": "Please define a MAX_TTL or something like that, for 0xFF.", "url": "https://github.com/netty/netty/pull/10498#discussion_r480029494", "createdAt": "2020-08-31T10:13:56Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/pcap/IPPacket.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+final class IPPacket {\n+\n+    private IPPacket() {\n+        // Prevent outside initialization\n+    }\n+\n+    /**\n+     * Write IPv4 Packet for UDP Packet\n+     *\n+     * @param byteBuf    ByteBuf where IP Packet data will be set\n+     * @param payload    Payload of UDP\n+     * @param srcAddress Source IPv4 Address\n+     * @param dstAddress Destination IPv4 Address\n+     */\n+    static void writeUDPv4(ByteBuf byteBuf, ByteBuf payload, int srcAddress, int dstAddress) {\n+        writePacketv4(byteBuf, payload, 17, srcAddress, dstAddress);\n+    }\n+\n+    /**\n+     * Write IPv6 Packet for UDP Packet\n+     *\n+     * @param byteBuf    ByteBuf where IP Packet data will be set\n+     * @param payload    Payload of UDP\n+     * @param srcAddress Source IPv6 Address\n+     * @param dstAddress Destination IPv6 Address\n+     */\n+    static void writeUDPv6(ByteBuf byteBuf, ByteBuf payload, byte[] srcAddress, byte[] dstAddress) {\n+        writePacketv6(byteBuf, payload, 17, srcAddress, dstAddress);\n+    }\n+\n+    /**\n+     * Write IPv4 Packet for TCP Packet\n+     *\n+     * @param byteBuf    ByteBuf where IP Packet data will be set\n+     * @param payload    Payload of TCP\n+     * @param srcAddress Source IPv4 Address\n+     * @param dstAddress Destination IPv4 Address\n+     */\n+    static void writeTCPv4(ByteBuf byteBuf, ByteBuf payload, int srcAddress, int dstAddress) {\n+        writePacketv4(byteBuf, payload, 6, srcAddress, dstAddress);\n+    }\n+\n+    /**\n+     * Write IPv6 Packet for TCP Packet\n+     *\n+     * @param byteBuf    ByteBuf where IP Packet data will be set\n+     * @param payload    Payload of TCP\n+     * @param srcAddress Source IPv6 Address\n+     * @param dstAddress Destination IPv6 Address\n+     */\n+    static void writeTCPv6(ByteBuf byteBuf, ByteBuf payload, byte[] srcAddress, byte[] dstAddress) {\n+        writePacketv6(byteBuf, payload, 6, srcAddress, dstAddress);\n+    }\n+\n+    private static void writePacketv4(ByteBuf byteBuf, ByteBuf payload, int protocol, int srcAddress,\n+                                      int dstAddress) {\n+        byteBuf.writeByte(0x45);      //  Version + IHL\n+        byteBuf.writeByte(0x00);      //  DSCP\n+        byteBuf.writeShort(payload.readableBytes() + 20); // Length\n+        byteBuf.writeShort(0x0000);   // Identification\n+        byteBuf.writeShort(0x0000);   // Fragment\n+        byteBuf.writeByte(0xff);      // TTL", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTU0MDAwOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/IPPacket.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDoyOToxOVrOHJzF1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDoyOToxOVrOHJzF1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAzNjMxMQ==", "bodyText": "This would be easier to read when written in hexadecimal format.", "url": "https://github.com/netty/netty/pull/10498#discussion_r480036311", "createdAt": "2020-08-31T10:29:19Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/pcap/IPPacket.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+final class IPPacket {\n+\n+    private IPPacket() {\n+        // Prevent outside initialization\n+    }\n+\n+    /**\n+     * Write IPv4 Packet for UDP Packet\n+     *\n+     * @param byteBuf    ByteBuf where IP Packet data will be set\n+     * @param payload    Payload of UDP\n+     * @param srcAddress Source IPv4 Address\n+     * @param dstAddress Destination IPv4 Address\n+     */\n+    static void writeUDPv4(ByteBuf byteBuf, ByteBuf payload, int srcAddress, int dstAddress) {\n+        writePacketv4(byteBuf, payload, 17, srcAddress, dstAddress);\n+    }\n+\n+    /**\n+     * Write IPv6 Packet for UDP Packet\n+     *\n+     * @param byteBuf    ByteBuf where IP Packet data will be set\n+     * @param payload    Payload of UDP\n+     * @param srcAddress Source IPv6 Address\n+     * @param dstAddress Destination IPv6 Address\n+     */\n+    static void writeUDPv6(ByteBuf byteBuf, ByteBuf payload, byte[] srcAddress, byte[] dstAddress) {\n+        writePacketv6(byteBuf, payload, 17, srcAddress, dstAddress);\n+    }\n+\n+    /**\n+     * Write IPv4 Packet for TCP Packet\n+     *\n+     * @param byteBuf    ByteBuf where IP Packet data will be set\n+     * @param payload    Payload of TCP\n+     * @param srcAddress Source IPv4 Address\n+     * @param dstAddress Destination IPv4 Address\n+     */\n+    static void writeTCPv4(ByteBuf byteBuf, ByteBuf payload, int srcAddress, int dstAddress) {\n+        writePacketv4(byteBuf, payload, 6, srcAddress, dstAddress);\n+    }\n+\n+    /**\n+     * Write IPv6 Packet for TCP Packet\n+     *\n+     * @param byteBuf    ByteBuf where IP Packet data will be set\n+     * @param payload    Payload of TCP\n+     * @param srcAddress Source IPv6 Address\n+     * @param dstAddress Destination IPv6 Address\n+     */\n+    static void writeTCPv6(ByteBuf byteBuf, ByteBuf payload, byte[] srcAddress, byte[] dstAddress) {\n+        writePacketv6(byteBuf, payload, 6, srcAddress, dstAddress);\n+    }\n+\n+    private static void writePacketv4(ByteBuf byteBuf, ByteBuf payload, int protocol, int srcAddress,\n+                                      int dstAddress) {\n+        byteBuf.writeByte(0x45);      //  Version + IHL\n+        byteBuf.writeByte(0x00);      //  DSCP\n+        byteBuf.writeShort(payload.readableBytes() + 20); // Length\n+        byteBuf.writeShort(0x0000);   // Identification\n+        byteBuf.writeShort(0x0000);   // Fragment\n+        byteBuf.writeByte(0xff);      // TTL\n+        byteBuf.writeByte(protocol);  // Protocol\n+        byteBuf.writeShort(0);        // Checksum\n+        byteBuf.writeInt(srcAddress); // Source IPv4 Address\n+        byteBuf.writeInt(dstAddress); // Destination IPv4 Address\n+        byteBuf.writeBytes(payload);  // Payload of L4\n+    }\n+\n+    private static void writePacketv6(ByteBuf byteBuf, ByteBuf payload, int protocol, byte[] srcAddress,\n+                                      byte[] dstAddress) {\n+        byteBuf.writeInt(6 << 28);          // Version  + Traffic class + Flow label", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTU0MzgyOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/IPPacket.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDozMDozOVrOHJzIJg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDozMDozOVrOHJzIJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDAzNjkwMg==", "bodyText": "Please make a constant for the hop limit.", "url": "https://github.com/netty/netty/pull/10498#discussion_r480036902", "createdAt": "2020-08-31T10:30:39Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/pcap/IPPacket.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+final class IPPacket {\n+\n+    private IPPacket() {\n+        // Prevent outside initialization\n+    }\n+\n+    /**\n+     * Write IPv4 Packet for UDP Packet\n+     *\n+     * @param byteBuf    ByteBuf where IP Packet data will be set\n+     * @param payload    Payload of UDP\n+     * @param srcAddress Source IPv4 Address\n+     * @param dstAddress Destination IPv4 Address\n+     */\n+    static void writeUDPv4(ByteBuf byteBuf, ByteBuf payload, int srcAddress, int dstAddress) {\n+        writePacketv4(byteBuf, payload, 17, srcAddress, dstAddress);\n+    }\n+\n+    /**\n+     * Write IPv6 Packet for UDP Packet\n+     *\n+     * @param byteBuf    ByteBuf where IP Packet data will be set\n+     * @param payload    Payload of UDP\n+     * @param srcAddress Source IPv6 Address\n+     * @param dstAddress Destination IPv6 Address\n+     */\n+    static void writeUDPv6(ByteBuf byteBuf, ByteBuf payload, byte[] srcAddress, byte[] dstAddress) {\n+        writePacketv6(byteBuf, payload, 17, srcAddress, dstAddress);\n+    }\n+\n+    /**\n+     * Write IPv4 Packet for TCP Packet\n+     *\n+     * @param byteBuf    ByteBuf where IP Packet data will be set\n+     * @param payload    Payload of TCP\n+     * @param srcAddress Source IPv4 Address\n+     * @param dstAddress Destination IPv4 Address\n+     */\n+    static void writeTCPv4(ByteBuf byteBuf, ByteBuf payload, int srcAddress, int dstAddress) {\n+        writePacketv4(byteBuf, payload, 6, srcAddress, dstAddress);\n+    }\n+\n+    /**\n+     * Write IPv6 Packet for TCP Packet\n+     *\n+     * @param byteBuf    ByteBuf where IP Packet data will be set\n+     * @param payload    Payload of TCP\n+     * @param srcAddress Source IPv6 Address\n+     * @param dstAddress Destination IPv6 Address\n+     */\n+    static void writeTCPv6(ByteBuf byteBuf, ByteBuf payload, byte[] srcAddress, byte[] dstAddress) {\n+        writePacketv6(byteBuf, payload, 6, srcAddress, dstAddress);\n+    }\n+\n+    private static void writePacketv4(ByteBuf byteBuf, ByteBuf payload, int protocol, int srcAddress,\n+                                      int dstAddress) {\n+        byteBuf.writeByte(0x45);      //  Version + IHL\n+        byteBuf.writeByte(0x00);      //  DSCP\n+        byteBuf.writeShort(payload.readableBytes() + 20); // Length\n+        byteBuf.writeShort(0x0000);   // Identification\n+        byteBuf.writeShort(0x0000);   // Fragment\n+        byteBuf.writeByte(0xff);      // TTL\n+        byteBuf.writeByte(protocol);  // Protocol\n+        byteBuf.writeShort(0);        // Checksum\n+        byteBuf.writeInt(srcAddress); // Source IPv4 Address\n+        byteBuf.writeInt(dstAddress); // Destination IPv4 Address\n+        byteBuf.writeBytes(payload);  // Payload of L4\n+    }\n+\n+    private static void writePacketv6(ByteBuf byteBuf, ByteBuf payload, int protocol, byte[] srcAddress,\n+                                      byte[] dstAddress) {\n+        byteBuf.writeInt(6 << 28);          // Version  + Traffic class + Flow label\n+        byteBuf.writeShort(payload.readableBytes()); // Payload length\n+        byteBuf.writeByte(protocol & 0xff); // Next header\n+        byteBuf.writeByte(255);             // Hop limit", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 94}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTU3MTkzOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PCapWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo0MDo1MFrOHJzYng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo0MDo1MFrOHJzYng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA0MTExOA==", "bodyText": "Do release in a finally block.", "url": "https://github.com/netty/netty/pull/10498#discussion_r480041118", "createdAt": "2020-08-31T10:40:50Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCapWriter.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+final class PCapWriter implements Closeable {\n+    private final SimpleDateFormat sdf = new SimpleDateFormat(\"SSSSSSSSS\");\n+    private final OutputStream outputStream;\n+\n+    /**\n+     * This uses {@link OutputStream} for writing Pcap.\n+     * Pcap Global Header is also written on construction.\n+     *\n+     * @throws IOException If {@link OutputStream#write(byte[])} throws an exception\n+     */\n+    PCapWriter(OutputStream outputStream, ByteBuf byteBuf) throws IOException {\n+        this.outputStream = outputStream;\n+\n+        PcapHeaders.writeGlobalHeader(byteBuf);\n+        byteBuf.readBytes(outputStream, byteBuf.readableBytes());\n+        byteBuf.release();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTU4NjQ5OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PcapHeaders.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo0NDoxNlrOHJzhrA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMDo0NDoxNlrOHJzhrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA0MzQzNg==", "bodyText": "This header could be held in a constant on-heap buffer or byte array. Then we'd have one less allocate/release dance.", "url": "https://github.com/netty/netty/pull/10498#discussion_r480043436", "createdAt": "2020-08-31T10:44:16Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/pcap/PcapHeaders.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+final class PcapHeaders {\n+\n+    private PcapHeaders() {\n+        // Prevent outside initialization\n+    }\n+\n+    /**\n+     * Write Pcap Global Header\n+     * @param byteBuf byteBuf ByteBuf where we'll write header data\n+     */\n+    static void writeGlobalHeader(ByteBuf byteBuf) {\n+        byteBuf.writeInt(0xa1b2c3d4); // magic_number\n+        byteBuf.writeShort(2);        // version_major\n+        byteBuf.writeShort(4);        // version_minor\n+        byteBuf.writeInt(0);          // thiszone\n+        byteBuf.writeInt(0);          // sigfigs\n+        byteBuf.writeInt(0xffff);     // snaplen\n+        byteBuf.writeInt(1);          // network", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTY4NTMwOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/TCPPacket.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMTowODo0M1rOHJ0djw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMTowODo0M1rOHJ0djw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA1ODc2Nw==", "bodyText": "I think writing the data offset part in hexadecimal would be easier to read.", "url": "https://github.com/netty/netty/pull/10498#discussion_r480058767", "createdAt": "2020-08-31T11:08:43Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/pcap/TCPPacket.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+final class TCPPacket {\n+\n+    private TCPPacket() {\n+        // Prevent outside initialization\n+    }\n+\n+    /**\n+     * Write TCP Packet\n+     *\n+     * @param byteBuf ByteBuf where Packet data will be set\n+     * @param payload Payload of this Packet\n+     * @param srcPort Source Port\n+     * @param dstPort Destination Port\n+     */\n+    static void writePacket(ByteBuf byteBuf, ByteBuf payload, int segmentNumber, int ackNumber, int srcPort, int dstPort, Flag... flags) {\n+        int fin = 0;\n+        int syn = 0;\n+        int rst = 0;\n+        int psh = 0;\n+        int ack = 0;\n+        int urg = 0;\n+        int ece = 0;\n+        int cwr = 0;\n+\n+        for (Flag flag : flags) {\n+            switch (flag) {\n+                case FIN:\n+                    fin = 1;\n+                case SYN:\n+                    syn = 1;\n+                case RST:\n+                    rst = 1;\n+                case PSH:\n+                    psh = 1;\n+                case ACK:\n+                    ack = 1;\n+                case URG:\n+                    urg = 1;\n+                case ECE:\n+                    ece = 1;\n+                case CWR:\n+                    cwr = 1;\n+            }\n+        }\n+\n+        int tcpFlags = fin << 0 |\n+                syn << 1 |\n+                rst << 2 |\n+                psh << 3 |\n+                ack << 4 |\n+                urg << 5 |\n+                ece << 6 |\n+                cwr << 7;\n+\n+        byteBuf.writeShort(srcPort);     // Source Port\n+        byteBuf.writeShort(dstPort);     // Destination Port\n+        byteBuf.writeInt(segmentNumber); // Segment Number\n+        byteBuf.writeInt(ackNumber);     // Acknowledgment Number\n+        byteBuf.writeShort(5 << 12 | tcpFlags); // Flags", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTY4NzgyOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/TCPPacket.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMTowOTo0NVrOHJ0fIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDo1ODowNVrOHJ8ViA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA1OTE2OQ==", "bodyText": "Why this particular checksum?", "url": "https://github.com/netty/netty/pull/10498#discussion_r480059169", "createdAt": "2020-08-31T11:09:45Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/pcap/TCPPacket.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+final class TCPPacket {\n+\n+    private TCPPacket() {\n+        // Prevent outside initialization\n+    }\n+\n+    /**\n+     * Write TCP Packet\n+     *\n+     * @param byteBuf ByteBuf where Packet data will be set\n+     * @param payload Payload of this Packet\n+     * @param srcPort Source Port\n+     * @param dstPort Destination Port\n+     */\n+    static void writePacket(ByteBuf byteBuf, ByteBuf payload, int segmentNumber, int ackNumber, int srcPort, int dstPort, Flag... flags) {\n+        int fin = 0;\n+        int syn = 0;\n+        int rst = 0;\n+        int psh = 0;\n+        int ack = 0;\n+        int urg = 0;\n+        int ece = 0;\n+        int cwr = 0;\n+\n+        for (Flag flag : flags) {\n+            switch (flag) {\n+                case FIN:\n+                    fin = 1;\n+                case SYN:\n+                    syn = 1;\n+                case RST:\n+                    rst = 1;\n+                case PSH:\n+                    psh = 1;\n+                case ACK:\n+                    ack = 1;\n+                case URG:\n+                    urg = 1;\n+                case ECE:\n+                    ece = 1;\n+                case CWR:\n+                    cwr = 1;\n+            }\n+        }\n+\n+        int tcpFlags = fin << 0 |\n+                syn << 1 |\n+                rst << 2 |\n+                psh << 3 |\n+                ack << 4 |\n+                urg << 5 |\n+                ece << 6 |\n+                cwr << 7;\n+\n+        byteBuf.writeShort(srcPort);     // Source Port\n+        byteBuf.writeShort(dstPort);     // Destination Port\n+        byteBuf.writeInt(segmentNumber); // Segment Number\n+        byteBuf.writeInt(ackNumber);     // Acknowledgment Number\n+        byteBuf.writeShort(5 << 12 | tcpFlags); // Flags\n+        byteBuf.writeShort(65535);       // Window Size\n+        byteBuf.writeShort(0x0001);      // Checksum", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE4Nzc4NA==", "bodyText": "Just a dummy checksum.", "url": "https://github.com/netty/netty/pull/10498#discussion_r480187784", "createdAt": "2020-08-31T14:58:05Z", "author": {"login": "hyperxpro"}, "path": "handler/src/main/java/io/netty/handler/pcap/TCPPacket.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+final class TCPPacket {\n+\n+    private TCPPacket() {\n+        // Prevent outside initialization\n+    }\n+\n+    /**\n+     * Write TCP Packet\n+     *\n+     * @param byteBuf ByteBuf where Packet data will be set\n+     * @param payload Payload of this Packet\n+     * @param srcPort Source Port\n+     * @param dstPort Destination Port\n+     */\n+    static void writePacket(ByteBuf byteBuf, ByteBuf payload, int segmentNumber, int ackNumber, int srcPort, int dstPort, Flag... flags) {\n+        int fin = 0;\n+        int syn = 0;\n+        int rst = 0;\n+        int psh = 0;\n+        int ack = 0;\n+        int urg = 0;\n+        int ece = 0;\n+        int cwr = 0;\n+\n+        for (Flag flag : flags) {\n+            switch (flag) {\n+                case FIN:\n+                    fin = 1;\n+                case SYN:\n+                    syn = 1;\n+                case RST:\n+                    rst = 1;\n+                case PSH:\n+                    psh = 1;\n+                case ACK:\n+                    ack = 1;\n+                case URG:\n+                    urg = 1;\n+                case ECE:\n+                    ece = 1;\n+                case CWR:\n+                    cwr = 1;\n+            }\n+        }\n+\n+        int tcpFlags = fin << 0 |\n+                syn << 1 |\n+                rst << 2 |\n+                psh << 3 |\n+                ack << 4 |\n+                urg << 5 |\n+                ece << 6 |\n+                cwr << 7;\n+\n+        byteBuf.writeShort(srcPort);     // Source Port\n+        byteBuf.writeShort(dstPort);     // Destination Port\n+        byteBuf.writeInt(segmentNumber); // Segment Number\n+        byteBuf.writeInt(ackNumber);     // Acknowledgment Number\n+        byteBuf.writeShort(5 << 12 | tcpFlags); // Flags\n+        byteBuf.writeShort(65535);       // Window Size\n+        byteBuf.writeShort(0x0001);      // Checksum", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA1OTE2OQ=="}, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTY5MTYxOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/TCPPacket.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMToxMToxMVrOHJ0hWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNDo1OTozMFrOHJ8ZZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA1OTczNw==", "bodyText": "This can just as well be 1, right?", "url": "https://github.com/netty/netty/pull/10498#discussion_r480059737", "createdAt": "2020-08-31T11:11:11Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/pcap/TCPPacket.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+final class TCPPacket {\n+\n+    private TCPPacket() {\n+        // Prevent outside initialization\n+    }\n+\n+    /**\n+     * Write TCP Packet\n+     *\n+     * @param byteBuf ByteBuf where Packet data will be set\n+     * @param payload Payload of this Packet\n+     * @param srcPort Source Port\n+     * @param dstPort Destination Port\n+     */\n+    static void writePacket(ByteBuf byteBuf, ByteBuf payload, int segmentNumber, int ackNumber, int srcPort, int dstPort, Flag... flags) {\n+        int fin = 0;\n+        int syn = 0;\n+        int rst = 0;\n+        int psh = 0;\n+        int ack = 0;\n+        int urg = 0;\n+        int ece = 0;\n+        int cwr = 0;\n+\n+        for (Flag flag : flags) {\n+            switch (flag) {\n+                case FIN:\n+                    fin = 1;\n+                case SYN:\n+                    syn = 1;\n+                case RST:\n+                    rst = 1;\n+                case PSH:\n+                    psh = 1;\n+                case ACK:\n+                    ack = 1;\n+                case URG:\n+                    urg = 1;\n+                case ECE:\n+                    ece = 1;\n+                case CWR:\n+                    cwr = 1;\n+            }\n+        }\n+\n+        int tcpFlags = fin << 0 |\n+                syn << 1 |\n+                rst << 2 |\n+                psh << 3 |\n+                ack << 4 |\n+                urg << 5 |\n+                ece << 6 |\n+                cwr << 7;\n+\n+        byteBuf.writeShort(srcPort);     // Source Port\n+        byteBuf.writeShort(dstPort);     // Destination Port\n+        byteBuf.writeInt(segmentNumber); // Segment Number\n+        byteBuf.writeInt(ackNumber);     // Acknowledgment Number\n+        byteBuf.writeShort(5 << 12 | tcpFlags); // Flags\n+        byteBuf.writeShort(65535);       // Window Size", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDE4ODc3NQ==", "bodyText": "Yes, but we don't know how much a user is going to write into the TCP stream. On LAN, it can be up to 65535 so I set it to 65535.", "url": "https://github.com/netty/netty/pull/10498#discussion_r480188775", "createdAt": "2020-08-31T14:59:30Z", "author": {"login": "hyperxpro"}, "path": "handler/src/main/java/io/netty/handler/pcap/TCPPacket.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+final class TCPPacket {\n+\n+    private TCPPacket() {\n+        // Prevent outside initialization\n+    }\n+\n+    /**\n+     * Write TCP Packet\n+     *\n+     * @param byteBuf ByteBuf where Packet data will be set\n+     * @param payload Payload of this Packet\n+     * @param srcPort Source Port\n+     * @param dstPort Destination Port\n+     */\n+    static void writePacket(ByteBuf byteBuf, ByteBuf payload, int segmentNumber, int ackNumber, int srcPort, int dstPort, Flag... flags) {\n+        int fin = 0;\n+        int syn = 0;\n+        int rst = 0;\n+        int psh = 0;\n+        int ack = 0;\n+        int urg = 0;\n+        int ece = 0;\n+        int cwr = 0;\n+\n+        for (Flag flag : flags) {\n+            switch (flag) {\n+                case FIN:\n+                    fin = 1;\n+                case SYN:\n+                    syn = 1;\n+                case RST:\n+                    rst = 1;\n+                case PSH:\n+                    psh = 1;\n+                case ACK:\n+                    ack = 1;\n+                case URG:\n+                    urg = 1;\n+                case ECE:\n+                    ece = 1;\n+                case CWR:\n+                    cwr = 1;\n+            }\n+        }\n+\n+        int tcpFlags = fin << 0 |\n+                syn << 1 |\n+                rst << 2 |\n+                psh << 3 |\n+                ack << 4 |\n+                urg << 5 |\n+                ece << 6 |\n+                cwr << 7;\n+\n+        byteBuf.writeShort(srcPort);     // Source Port\n+        byteBuf.writeShort(dstPort);     // Destination Port\n+        byteBuf.writeInt(segmentNumber); // Segment Number\n+        byteBuf.writeInt(ackNumber);     // Acknowledgment Number\n+        byteBuf.writeShort(5 << 12 | tcpFlags); // Flags\n+        byteBuf.writeShort(65535);       // Window Size", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA1OTczNw=="}, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTg1MjU3OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/UDPPacket.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMjowNDoxNFrOHJ2Bfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxNTozNjozN1rOHJ9z9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA4NDM1MQ==", "bodyText": "Checksum is allowed to be all-zeros (except in IPv6).", "url": "https://github.com/netty/netty/pull/10498#discussion_r480084351", "createdAt": "2020-08-31T12:04:14Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/pcap/UDPPacket.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+final class UDPPacket {\n+\n+    private UDPPacket() {\n+        // Prevent outside initialization\n+    }\n+\n+    /**\n+     * Write UDP Packet\n+     *\n+     * @param byteBuf ByteBuf where Packet data will be set\n+     * @param payload Payload of this Packet\n+     * @param srcPort Source Port\n+     * @param dstPort Destination Port\n+     */\n+    static void writePacket(ByteBuf byteBuf, ByteBuf payload, int srcPort, int dstPort) {\n+        byteBuf.writeShort(srcPort); // Source Port\n+        byteBuf.writeShort(dstPort); // Destination Port\n+        byteBuf.writeShort(8 + payload.readableBytes()); // UDP Header Length + Payload Length\n+        byteBuf.writeShort(0x0001);  // Checksum", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDIxMTk1Ng==", "bodyText": "Then we need to perform a check for IPv6 and add checksum. Not worth the effort TBH.", "url": "https://github.com/netty/netty/pull/10498#discussion_r480211956", "createdAt": "2020-08-31T15:36:37Z", "author": {"login": "hyperxpro"}, "path": "handler/src/main/java/io/netty/handler/pcap/UDPPacket.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+final class UDPPacket {\n+\n+    private UDPPacket() {\n+        // Prevent outside initialization\n+    }\n+\n+    /**\n+     * Write UDP Packet\n+     *\n+     * @param byteBuf ByteBuf where Packet data will be set\n+     * @param payload Payload of this Packet\n+     * @param srcPort Source Port\n+     * @param dstPort Destination Port\n+     */\n+    static void writePacket(ByteBuf byteBuf, ByteBuf payload, int srcPort, int dstPort) {\n+        byteBuf.writeShort(srcPort); // Source Port\n+        byteBuf.writeShort(dstPort); // Destination Port\n+        byteBuf.writeShort(8 + payload.readableBytes()); // UDP Header Length + Payload Length\n+        byteBuf.writeShort(0x0001);  // Checksum", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA4NDM1MQ=="}, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTg1NDA3OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/UDPPacket.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMjowNDo0M1rOHJ2CWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMjowNDo0M1rOHJ2CWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA4NDU3MQ==", "bodyText": "Let's have a constant for the UDP header length.", "url": "https://github.com/netty/netty/pull/10498#discussion_r480084571", "createdAt": "2020-08-31T12:04:43Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/pcap/UDPPacket.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+final class UDPPacket {\n+\n+    private UDPPacket() {\n+        // Prevent outside initialization\n+    }\n+\n+    /**\n+     * Write UDP Packet\n+     *\n+     * @param byteBuf ByteBuf where Packet data will be set\n+     * @param payload Payload of this Packet\n+     * @param srcPort Source Port\n+     * @param dstPort Destination Port\n+     */\n+    static void writePacket(ByteBuf byteBuf, ByteBuf payload, int srcPort, int dstPort) {\n+        byteBuf.writeShort(srcPort); // Source Port\n+        byteBuf.writeShort(dstPort); // Destination Port\n+        byteBuf.writeShort(8 + payload.readableBytes()); // UDP Header Length + Payload Length", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwMTg1OTcwOnYy", "diffSide": "RIGHT", "path": "handler/src/test/java/io/netty/handler/pcap/PCAPWriteHandlerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMjowNjozMlrOHJ2FlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0zMVQxMjowNjozMlrOHJ2FlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MDA4NTM5Nw==", "bodyText": "Please use static imports for the asset* methods.", "url": "https://github.com/netty/netty/pull/10498#discussion_r480085397", "createdAt": "2020-08-31T12:06:32Z", "author": {"login": "chrisvest"}, "path": "handler/src/test/java/io/netty/handler/pcap/PCAPWriteHandlerTest.java", "diffHunk": "@@ -0,0 +1,89 @@\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufOutputStream;\n+import io.netty.buffer.ByteBufUtil;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.embedded.EmbeddedChannel;\n+import io.netty.channel.socket.DatagramPacket;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import java.io.IOException;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+\n+public class PCAPWriteHandlerTest {\n+\n+    @Test\n+    public void udpV4() throws IOException {\n+\n+        ByteBuf byteBuf = Unpooled.buffer();\n+        EmbeddedChannel embeddedChannel = new EmbeddedChannel(new PCAPWriteHandler(\n+                new ByteBufOutputStream(byteBuf), true, false, false\n+        ));\n+\n+        InetSocketAddress srcAddr = new InetSocketAddress(\"127.0.0.1\", 1000);\n+        InetSocketAddress dstAddr = new InetSocketAddress(\"192.168.1.1\", 50000);\n+\n+        embeddedChannel.writeInbound(new DatagramPacket(Unpooled.wrappedBuffer(\"Meow\".getBytes()), dstAddr, srcAddr));\n+        embeddedChannel.flushInbound();\n+\n+        // Verify Pcap Global Headers\n+        Assert.assertEquals(0xa1b2c3d4, byteBuf.readInt()); // magic_number", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d0c95ec9947fec8eb80460afa57b9d8e1962cc8c"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODAzNDI3OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMTo1Mjo0MlrOHKyyAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMTo1Mjo0MlrOHKyyAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA3OTgwOQ==", "bodyText": "Please fix the formatting so we don't start lines with a comma like that. Like, either extract datagramPacket.content().readableBytes() to a variable, or do the line break before it.", "url": "https://github.com/netty/netty/pull/10498#discussion_r481079809", "createdAt": "2020-09-01T11:52:42Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "diffHunk": "@@ -0,0 +1,371 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.ServerChannel;\n+import io.netty.channel.socket.DatagramPacket;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.util.NetUtil;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.Inet4Address;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+\n+public final class PCAPWriteHandler extends ChannelDuplexHandler {\n+\n+    private final InternalLogger logger = InternalLoggerFactory.getInstance(PCAPWriteHandler.class);\n+\n+    /**\n+     * TCP Sender Segment Number.\n+     */\n+    private int sendSegmentNumber = 1;\n+\n+    /**\n+     * TCP Receiver Segment Number\n+     */\n+    private int receiveSegmentNumber = 1;\n+\n+    /**\n+     * Source Address [TCP ONLY]\n+     */\n+    private InetSocketAddress srcAddr;\n+\n+    /**\n+     * Destination Address [TCP ONLY]\n+     */\n+    private InetSocketAddress dstAddr;\n+\n+    private final OutputStream outputStream;\n+    private PCapWriter pCapWriter;\n+    private final boolean captureZeroByte;\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance.\n+     * {@code captureZeroByte} are set to {@code false}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream) {\n+        this(outputStream, false);\n+    }\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance\n+     *\n+     * @param outputStream    OutputStream where Pcap data will be written\n+     * @param captureZeroByte {@code true} If we'll capture packets with 0 bytes\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream, boolean captureZeroByte) {\n+        this.outputStream = outputStream;\n+        this.captureZeroByte = captureZeroByte;\n+    }\n+\n+    @Override\n+    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+        ByteBuf byteBuf  = ctx.alloc().buffer();\n+\n+        try {\n+            this.pCapWriter = new PCapWriter(this.outputStream, byteBuf);\n+        } catch (IOException ex) {\n+            ctx.fireExceptionCaught(ex);\n+        } finally {\n+            byteBuf.release();\n+        }\n+\n+        /*\n+         * If `isServer` is set to true, it means we'll be receiving data from client.\n+         * In this case, Source Address will be `remoteAddress` and Destination Address\n+         * will be `localAddress`.\n+         *\n+         * If `isServer` is set to false, it means we'll be sending data to server.\n+         * In this case, Source Address will be `localAddress` and Destination Address\n+         * will be `remoteAddress`.\n+         */\n+        if (ctx.channel() instanceof SocketChannel) {\n+            if (ctx.channel() instanceof ServerChannel) {\n+                srcAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().localAddress();\n+            } else {\n+                srcAddr = (InetSocketAddress) ctx.channel().localAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+            }\n+        }\n+\n+        // If `isTCP` is true, then we'll simulate a fake handshake.\n+        if (ctx.channel() instanceof SocketChannel) {\n+            logger.debug(\"Starting Fake TCP 3-Way Handshake\");\n+\n+            ByteBuf tcpBuf = ctx.alloc().buffer();\n+\n+            try {\n+\n+                // Write SYN with Normal Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 0, 0, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.TCPFlag.SYN);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+\n+                // Write SYN+ACK with Reversed Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 0, 1, dstAddr.getPort(), srcAddr.getPort(), TCPPacket.TCPFlag.SYN,\n+                        TCPPacket.TCPFlag.ACK);\n+                completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc());\n+\n+                // Write ACK with Normal Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 1, 1, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+            } catch (IOException ex) {\n+                ctx.fireExceptionCaught(ex);\n+            } finally {\n+                tcpBuf.release();\n+            }\n+\n+            logger.debug(\"Finished Fake TCP 3-Way Handshake\");\n+        }\n+\n+        super.channelActive(ctx);\n+    }\n+\n+    @Override\n+    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n+        writePacket(ctx, msg, false);\n+        super.channelRead(ctx, msg);\n+    }\n+\n+    @Override\n+    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {\n+        writePacket(ctx, msg, true);\n+        super.write(ctx, msg, promise);\n+    }\n+\n+    private void writePacket(ChannelHandlerContext ctx, Object msg, boolean isWriteOperation) {\n+        if (msg instanceof ByteBuf) {\n+\n+            // If bytes are 0 and `captureZeroByte` is false, we won't capture this.\n+            if (((ByteBuf) msg).readableBytes() == 0 && !captureZeroByte) {\n+                logger.debug(\"Discarding Zero Byte TCP Packet. isWriteOperation {}\", isWriteOperation);\n+                return;\n+            }\n+\n+            ByteBuf packet = ((ByteBuf) msg).duplicate();\n+            ByteBuf tcpBuf = ctx.alloc().buffer();\n+            int bytes = packet.readableBytes();\n+\n+            try {\n+                if (isWriteOperation) {\n+                    TCPPacket.writePacket(tcpBuf, packet, sendSegmentNumber, receiveSegmentNumber, srcAddr.getPort(),\n+                            dstAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                    completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+                    logTCP(true, bytes, sendSegmentNumber, receiveSegmentNumber, srcAddr, dstAddr, false);\n+\n+                    sendSegmentNumber += bytes;\n+\n+                    TCPPacket.writePacket(tcpBuf, null, receiveSegmentNumber, sendSegmentNumber, dstAddr.getPort(),\n+                            srcAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                    completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc());\n+                    logTCP(true, bytes, sendSegmentNumber, receiveSegmentNumber, dstAddr, srcAddr, true);\n+                } else {\n+                    TCPPacket.writePacket(tcpBuf, packet, receiveSegmentNumber, sendSegmentNumber, dstAddr.getPort(),\n+                            srcAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                    completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc());\n+                    logTCP(false, bytes, receiveSegmentNumber, sendSegmentNumber, dstAddr, srcAddr, false);\n+\n+                    receiveSegmentNumber += bytes;\n+\n+                    TCPPacket.writePacket(tcpBuf, null, sendSegmentNumber, receiveSegmentNumber, srcAddr.getPort(),\n+                            dstAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                    completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+                    logTCP(false, bytes, sendSegmentNumber, receiveSegmentNumber, srcAddr, dstAddr, true);\n+                }\n+            } catch (IOException ex) {\n+                ctx.fireExceptionCaught(ex);\n+            } finally {\n+                tcpBuf.release();\n+            }\n+\n+        } else if (msg instanceof DatagramPacket) {\n+            handleUDP(ctx, ((DatagramPacket) msg).duplicate());\n+        } else {\n+            logger.error(\"Discarding Pcap Write for Object {}\", msg);\n+        }\n+    }\n+\n+    private void logTCP(boolean isWriteOperation, int bytes, int sendSegmentNumber, int receiveSegmentNumber,\n+                        InetSocketAddress srcAddr, InetSocketAddress dstAddr, boolean ackOnly) {\n+        if (ackOnly) {\n+            logger.debug(\"Writing TCP ACK, isWriteOperation {}, Segment Number {}, Ack Number {}, Src Addr {}, \"\n+                    + \"Dst Addr {}\", isWriteOperation, sendSegmentNumber, receiveSegmentNumber, dstAddr, srcAddr);\n+        } else {\n+            logger.debug(\"Writing TCP Data of {} Bytes, isWriteOperation {}, Segment Number {}, Ack Number {}, \" +\n+                            \"Src Addr {}, Dst Addr {}\", bytes, isWriteOperation, sendSegmentNumber,\n+                    receiveSegmentNumber, srcAddr, dstAddr);\n+        }\n+    }\n+\n+    private void handleUDP(ChannelHandlerContext ctx, DatagramPacket datagramPacket) {\n+        ByteBuf udpBuf = ctx.alloc().buffer();\n+\n+        InetSocketAddress srcAddr = datagramPacket.sender();\n+        InetSocketAddress dstAddr = datagramPacket.recipient();\n+\n+        logger.debug(\"Writing UDP Data of {} Bytes, Src Addr {}, Dst Addr {}\", datagramPacket.content().readableBytes()\n+                , srcAddr, dstAddr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41c98e5e93537a0ff66f85490c616337e3e6ec53"}, "originalPosition": 231}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODAzOTIwOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMTo1NDoxOVrOHKy1Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxNTowNDo1NFrOHK6xZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA4MDU5NA==", "bodyText": "You have a number of these empty lines after { in various places.", "url": "https://github.com/netty/netty/pull/10498#discussion_r481080594", "createdAt": "2020-09-01T11:54:19Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "diffHunk": "@@ -0,0 +1,371 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.ServerChannel;\n+import io.netty.channel.socket.DatagramPacket;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.util.NetUtil;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.Inet4Address;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+\n+public final class PCAPWriteHandler extends ChannelDuplexHandler {\n+\n+    private final InternalLogger logger = InternalLoggerFactory.getInstance(PCAPWriteHandler.class);\n+\n+    /**\n+     * TCP Sender Segment Number.\n+     */\n+    private int sendSegmentNumber = 1;\n+\n+    /**\n+     * TCP Receiver Segment Number\n+     */\n+    private int receiveSegmentNumber = 1;\n+\n+    /**\n+     * Source Address [TCP ONLY]\n+     */\n+    private InetSocketAddress srcAddr;\n+\n+    /**\n+     * Destination Address [TCP ONLY]\n+     */\n+    private InetSocketAddress dstAddr;\n+\n+    private final OutputStream outputStream;\n+    private PCapWriter pCapWriter;\n+    private final boolean captureZeroByte;\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance.\n+     * {@code captureZeroByte} are set to {@code false}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream) {\n+        this(outputStream, false);\n+    }\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance\n+     *\n+     * @param outputStream    OutputStream where Pcap data will be written\n+     * @param captureZeroByte {@code true} If we'll capture packets with 0 bytes\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream, boolean captureZeroByte) {\n+        this.outputStream = outputStream;\n+        this.captureZeroByte = captureZeroByte;\n+    }\n+\n+    @Override\n+    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+        ByteBuf byteBuf  = ctx.alloc().buffer();\n+\n+        try {\n+            this.pCapWriter = new PCapWriter(this.outputStream, byteBuf);\n+        } catch (IOException ex) {\n+            ctx.fireExceptionCaught(ex);\n+        } finally {\n+            byteBuf.release();\n+        }\n+\n+        /*\n+         * If `isServer` is set to true, it means we'll be receiving data from client.\n+         * In this case, Source Address will be `remoteAddress` and Destination Address\n+         * will be `localAddress`.\n+         *\n+         * If `isServer` is set to false, it means we'll be sending data to server.\n+         * In this case, Source Address will be `localAddress` and Destination Address\n+         * will be `remoteAddress`.\n+         */\n+        if (ctx.channel() instanceof SocketChannel) {\n+            if (ctx.channel() instanceof ServerChannel) {\n+                srcAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().localAddress();\n+            } else {\n+                srcAddr = (InetSocketAddress) ctx.channel().localAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+            }\n+        }\n+\n+        // If `isTCP` is true, then we'll simulate a fake handshake.\n+        if (ctx.channel() instanceof SocketChannel) {\n+            logger.debug(\"Starting Fake TCP 3-Way Handshake\");\n+\n+            ByteBuf tcpBuf = ctx.alloc().buffer();\n+\n+            try {\n+\n+                // Write SYN with Normal Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 0, 0, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.TCPFlag.SYN);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+\n+                // Write SYN+ACK with Reversed Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 0, 1, dstAddr.getPort(), srcAddr.getPort(), TCPPacket.TCPFlag.SYN,\n+                        TCPPacket.TCPFlag.ACK);\n+                completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc());\n+\n+                // Write ACK with Normal Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 1, 1, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+            } catch (IOException ex) {\n+                ctx.fireExceptionCaught(ex);\n+            } finally {\n+                tcpBuf.release();\n+            }\n+\n+            logger.debug(\"Finished Fake TCP 3-Way Handshake\");\n+        }\n+\n+        super.channelActive(ctx);\n+    }\n+\n+    @Override\n+    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n+        writePacket(ctx, msg, false);\n+        super.channelRead(ctx, msg);\n+    }\n+\n+    @Override\n+    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {\n+        writePacket(ctx, msg, true);\n+        super.write(ctx, msg, promise);\n+    }\n+\n+    private void writePacket(ChannelHandlerContext ctx, Object msg, boolean isWriteOperation) {\n+        if (msg instanceof ByteBuf) {\n+\n+            // If bytes are 0 and `captureZeroByte` is false, we won't capture this.\n+            if (((ByteBuf) msg).readableBytes() == 0 && !captureZeroByte) {\n+                logger.debug(\"Discarding Zero Byte TCP Packet. isWriteOperation {}\", isWriteOperation);\n+                return;\n+            }\n+\n+            ByteBuf packet = ((ByteBuf) msg).duplicate();\n+            ByteBuf tcpBuf = ctx.alloc().buffer();\n+            int bytes = packet.readableBytes();\n+\n+            try {\n+                if (isWriteOperation) {\n+                    TCPPacket.writePacket(tcpBuf, packet, sendSegmentNumber, receiveSegmentNumber, srcAddr.getPort(),\n+                            dstAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                    completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+                    logTCP(true, bytes, sendSegmentNumber, receiveSegmentNumber, srcAddr, dstAddr, false);\n+\n+                    sendSegmentNumber += bytes;\n+\n+                    TCPPacket.writePacket(tcpBuf, null, receiveSegmentNumber, sendSegmentNumber, dstAddr.getPort(),\n+                            srcAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                    completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc());\n+                    logTCP(true, bytes, sendSegmentNumber, receiveSegmentNumber, dstAddr, srcAddr, true);\n+                } else {\n+                    TCPPacket.writePacket(tcpBuf, packet, receiveSegmentNumber, sendSegmentNumber, dstAddr.getPort(),\n+                            srcAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                    completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc());\n+                    logTCP(false, bytes, receiveSegmentNumber, sendSegmentNumber, dstAddr, srcAddr, false);\n+\n+                    receiveSegmentNumber += bytes;\n+\n+                    TCPPacket.writePacket(tcpBuf, null, sendSegmentNumber, receiveSegmentNumber, srcAddr.getPort(),\n+                            dstAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                    completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+                    logTCP(false, bytes, sendSegmentNumber, receiveSegmentNumber, srcAddr, dstAddr, true);\n+                }\n+            } catch (IOException ex) {\n+                ctx.fireExceptionCaught(ex);\n+            } finally {\n+                tcpBuf.release();\n+            }\n+\n+        } else if (msg instanceof DatagramPacket) {\n+            handleUDP(ctx, ((DatagramPacket) msg).duplicate());\n+        } else {\n+            logger.error(\"Discarding Pcap Write for Object {}\", msg);\n+        }\n+    }\n+\n+    private void logTCP(boolean isWriteOperation, int bytes, int sendSegmentNumber, int receiveSegmentNumber,\n+                        InetSocketAddress srcAddr, InetSocketAddress dstAddr, boolean ackOnly) {\n+        if (ackOnly) {\n+            logger.debug(\"Writing TCP ACK, isWriteOperation {}, Segment Number {}, Ack Number {}, Src Addr {}, \"\n+                    + \"Dst Addr {}\", isWriteOperation, sendSegmentNumber, receiveSegmentNumber, dstAddr, srcAddr);\n+        } else {\n+            logger.debug(\"Writing TCP Data of {} Bytes, isWriteOperation {}, Segment Number {}, Ack Number {}, \" +\n+                            \"Src Addr {}, Dst Addr {}\", bytes, isWriteOperation, sendSegmentNumber,\n+                    receiveSegmentNumber, srcAddr, dstAddr);\n+        }\n+    }\n+\n+    private void handleUDP(ChannelHandlerContext ctx, DatagramPacket datagramPacket) {\n+        ByteBuf udpBuf = ctx.alloc().buffer();\n+\n+        InetSocketAddress srcAddr = datagramPacket.sender();\n+        InetSocketAddress dstAddr = datagramPacket.recipient();\n+\n+        logger.debug(\"Writing UDP Data of {} Bytes, Src Addr {}, Dst Addr {}\", datagramPacket.content().readableBytes()\n+                , srcAddr, dstAddr);\n+\n+        try {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41c98e5e93537a0ff66f85490c616337e3e6ec53"}, "originalPosition": 234}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTIxMDcyNw==", "bodyText": "Just my code style. :p", "url": "https://github.com/netty/netty/pull/10498#discussion_r481210727", "createdAt": "2020-09-01T15:04:54Z", "author": {"login": "hyperxpro"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "diffHunk": "@@ -0,0 +1,371 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.ServerChannel;\n+import io.netty.channel.socket.DatagramPacket;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.util.NetUtil;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.Inet4Address;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+\n+public final class PCAPWriteHandler extends ChannelDuplexHandler {\n+\n+    private final InternalLogger logger = InternalLoggerFactory.getInstance(PCAPWriteHandler.class);\n+\n+    /**\n+     * TCP Sender Segment Number.\n+     */\n+    private int sendSegmentNumber = 1;\n+\n+    /**\n+     * TCP Receiver Segment Number\n+     */\n+    private int receiveSegmentNumber = 1;\n+\n+    /**\n+     * Source Address [TCP ONLY]\n+     */\n+    private InetSocketAddress srcAddr;\n+\n+    /**\n+     * Destination Address [TCP ONLY]\n+     */\n+    private InetSocketAddress dstAddr;\n+\n+    private final OutputStream outputStream;\n+    private PCapWriter pCapWriter;\n+    private final boolean captureZeroByte;\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance.\n+     * {@code captureZeroByte} are set to {@code false}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream) {\n+        this(outputStream, false);\n+    }\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance\n+     *\n+     * @param outputStream    OutputStream where Pcap data will be written\n+     * @param captureZeroByte {@code true} If we'll capture packets with 0 bytes\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream, boolean captureZeroByte) {\n+        this.outputStream = outputStream;\n+        this.captureZeroByte = captureZeroByte;\n+    }\n+\n+    @Override\n+    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+        ByteBuf byteBuf  = ctx.alloc().buffer();\n+\n+        try {\n+            this.pCapWriter = new PCapWriter(this.outputStream, byteBuf);\n+        } catch (IOException ex) {\n+            ctx.fireExceptionCaught(ex);\n+        } finally {\n+            byteBuf.release();\n+        }\n+\n+        /*\n+         * If `isServer` is set to true, it means we'll be receiving data from client.\n+         * In this case, Source Address will be `remoteAddress` and Destination Address\n+         * will be `localAddress`.\n+         *\n+         * If `isServer` is set to false, it means we'll be sending data to server.\n+         * In this case, Source Address will be `localAddress` and Destination Address\n+         * will be `remoteAddress`.\n+         */\n+        if (ctx.channel() instanceof SocketChannel) {\n+            if (ctx.channel() instanceof ServerChannel) {\n+                srcAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().localAddress();\n+            } else {\n+                srcAddr = (InetSocketAddress) ctx.channel().localAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+            }\n+        }\n+\n+        // If `isTCP` is true, then we'll simulate a fake handshake.\n+        if (ctx.channel() instanceof SocketChannel) {\n+            logger.debug(\"Starting Fake TCP 3-Way Handshake\");\n+\n+            ByteBuf tcpBuf = ctx.alloc().buffer();\n+\n+            try {\n+\n+                // Write SYN with Normal Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 0, 0, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.TCPFlag.SYN);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+\n+                // Write SYN+ACK with Reversed Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 0, 1, dstAddr.getPort(), srcAddr.getPort(), TCPPacket.TCPFlag.SYN,\n+                        TCPPacket.TCPFlag.ACK);\n+                completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc());\n+\n+                // Write ACK with Normal Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 1, 1, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+            } catch (IOException ex) {\n+                ctx.fireExceptionCaught(ex);\n+            } finally {\n+                tcpBuf.release();\n+            }\n+\n+            logger.debug(\"Finished Fake TCP 3-Way Handshake\");\n+        }\n+\n+        super.channelActive(ctx);\n+    }\n+\n+    @Override\n+    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n+        writePacket(ctx, msg, false);\n+        super.channelRead(ctx, msg);\n+    }\n+\n+    @Override\n+    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {\n+        writePacket(ctx, msg, true);\n+        super.write(ctx, msg, promise);\n+    }\n+\n+    private void writePacket(ChannelHandlerContext ctx, Object msg, boolean isWriteOperation) {\n+        if (msg instanceof ByteBuf) {\n+\n+            // If bytes are 0 and `captureZeroByte` is false, we won't capture this.\n+            if (((ByteBuf) msg).readableBytes() == 0 && !captureZeroByte) {\n+                logger.debug(\"Discarding Zero Byte TCP Packet. isWriteOperation {}\", isWriteOperation);\n+                return;\n+            }\n+\n+            ByteBuf packet = ((ByteBuf) msg).duplicate();\n+            ByteBuf tcpBuf = ctx.alloc().buffer();\n+            int bytes = packet.readableBytes();\n+\n+            try {\n+                if (isWriteOperation) {\n+                    TCPPacket.writePacket(tcpBuf, packet, sendSegmentNumber, receiveSegmentNumber, srcAddr.getPort(),\n+                            dstAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                    completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+                    logTCP(true, bytes, sendSegmentNumber, receiveSegmentNumber, srcAddr, dstAddr, false);\n+\n+                    sendSegmentNumber += bytes;\n+\n+                    TCPPacket.writePacket(tcpBuf, null, receiveSegmentNumber, sendSegmentNumber, dstAddr.getPort(),\n+                            srcAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                    completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc());\n+                    logTCP(true, bytes, sendSegmentNumber, receiveSegmentNumber, dstAddr, srcAddr, true);\n+                } else {\n+                    TCPPacket.writePacket(tcpBuf, packet, receiveSegmentNumber, sendSegmentNumber, dstAddr.getPort(),\n+                            srcAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                    completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc());\n+                    logTCP(false, bytes, receiveSegmentNumber, sendSegmentNumber, dstAddr, srcAddr, false);\n+\n+                    receiveSegmentNumber += bytes;\n+\n+                    TCPPacket.writePacket(tcpBuf, null, sendSegmentNumber, receiveSegmentNumber, srcAddr.getPort(),\n+                            dstAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                    completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc());\n+                    logTCP(false, bytes, sendSegmentNumber, receiveSegmentNumber, srcAddr, dstAddr, true);\n+                }\n+            } catch (IOException ex) {\n+                ctx.fireExceptionCaught(ex);\n+            } finally {\n+                tcpBuf.release();\n+            }\n+\n+        } else if (msg instanceof DatagramPacket) {\n+            handleUDP(ctx, ((DatagramPacket) msg).duplicate());\n+        } else {\n+            logger.error(\"Discarding Pcap Write for Object {}\", msg);\n+        }\n+    }\n+\n+    private void logTCP(boolean isWriteOperation, int bytes, int sendSegmentNumber, int receiveSegmentNumber,\n+                        InetSocketAddress srcAddr, InetSocketAddress dstAddr, boolean ackOnly) {\n+        if (ackOnly) {\n+            logger.debug(\"Writing TCP ACK, isWriteOperation {}, Segment Number {}, Ack Number {}, Src Addr {}, \"\n+                    + \"Dst Addr {}\", isWriteOperation, sendSegmentNumber, receiveSegmentNumber, dstAddr, srcAddr);\n+        } else {\n+            logger.debug(\"Writing TCP Data of {} Bytes, isWriteOperation {}, Segment Number {}, Ack Number {}, \" +\n+                            \"Src Addr {}, Dst Addr {}\", bytes, isWriteOperation, sendSegmentNumber,\n+                    receiveSegmentNumber, srcAddr, dstAddr);\n+        }\n+    }\n+\n+    private void handleUDP(ChannelHandlerContext ctx, DatagramPacket datagramPacket) {\n+        ByteBuf udpBuf = ctx.alloc().buffer();\n+\n+        InetSocketAddress srcAddr = datagramPacket.sender();\n+        InetSocketAddress dstAddr = datagramPacket.recipient();\n+\n+        logger.debug(\"Writing UDP Data of {} Bytes, Src Addr {}, Dst Addr {}\", datagramPacket.content().readableBytes()\n+                , srcAddr, dstAddr);\n+\n+        try {\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA4MDU5NA=="}, "originalCommit": {"oid": "41c98e5e93537a0ff66f85490c616337e3e6ec53"}, "originalPosition": 234}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODA2NDY4OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PCapWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMjowMTowNlrOHKzEGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMjowMTowNlrOHKzEGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA4NDQ0Mg==", "bodyText": "You need two time components here; seconds and the remainder in microseconds. You can do that with arithmetic instead of these shenanigans with date-time formatting, string slicing and number parsing.\nTo get seconds, you divide by 1000, or use the time unit conversion. And to get microseconds, you first take the modulo of 1000, and then multiply or convert.", "url": "https://github.com/netty/netty/pull/10498#discussion_r481084442", "createdAt": "2020-09-01T12:01:06Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCapWriter.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+final class PCapWriter implements Closeable {\n+    private final SimpleDateFormat sdf = new SimpleDateFormat(\"SSSSSSSSS\");\n+    private final OutputStream outputStream;\n+\n+    /**\n+     * This uses {@link OutputStream} for writing Pcap.\n+     * Pcap Global Header is also written on construction.\n+     *\n+     * @throws IOException If {@link OutputStream#write(byte[])} throws an exception\n+     */\n+    PCapWriter(OutputStream outputStream, ByteBuf byteBuf) throws IOException {\n+        this.outputStream = outputStream;\n+\n+        PcapHeaders.writeGlobalHeader(byteBuf);\n+        byteBuf.readBytes(outputStream, byteBuf.readableBytes());\n+    }\n+\n+    /**\n+     * Write Packet in Pcap OutputStream.\n+     *\n+     * @param packetHeaderBuf Packer Header {@link ByteBuf}\n+     * @param packet          Packet\n+     * @throws IOException If {@link OutputStream#write(byte[])} throws an exception\n+     */\n+    void writePacket(ByteBuf packetHeaderBuf, ByteBuf packet) throws IOException {\n+        long currentTime = System.currentTimeMillis();\n+\n+        String microsecond = sdf.format(new Date(currentTime));\n+        microsecond = microsecond.substring(microsecond.indexOf(\".\") + 1);\n+\n+        PcapHeaders.writePacketHeader(\n+                packetHeaderBuf,\n+                currentTime,\n+                Integer.parseInt(microsecond),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41c98e5e93537a0ff66f85490c616337e3e6ec53"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODA3MTkwOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PCapWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMjowMzowOFrOHKzIiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMjowMzowOFrOHKzIiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA4NTU3Nw==", "bodyText": "this is unnecessary.", "url": "https://github.com/netty/netty/pull/10498#discussion_r481085577", "createdAt": "2020-09-01T12:03:08Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCapWriter.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+import java.io.Closeable;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+\n+final class PCapWriter implements Closeable {\n+    private final SimpleDateFormat sdf = new SimpleDateFormat(\"SSSSSSSSS\");\n+    private final OutputStream outputStream;\n+\n+    /**\n+     * This uses {@link OutputStream} for writing Pcap.\n+     * Pcap Global Header is also written on construction.\n+     *\n+     * @throws IOException If {@link OutputStream#write(byte[])} throws an exception\n+     */\n+    PCapWriter(OutputStream outputStream, ByteBuf byteBuf) throws IOException {\n+        this.outputStream = outputStream;\n+\n+        PcapHeaders.writeGlobalHeader(byteBuf);\n+        byteBuf.readBytes(outputStream, byteBuf.readableBytes());\n+    }\n+\n+    /**\n+     * Write Packet in Pcap OutputStream.\n+     *\n+     * @param packetHeaderBuf Packer Header {@link ByteBuf}\n+     * @param packet          Packet\n+     * @throws IOException If {@link OutputStream#write(byte[])} throws an exception\n+     */\n+    void writePacket(ByteBuf packetHeaderBuf, ByteBuf packet) throws IOException {\n+        long currentTime = System.currentTimeMillis();\n+\n+        String microsecond = sdf.format(new Date(currentTime));\n+        microsecond = microsecond.substring(microsecond.indexOf(\".\") + 1);\n+\n+        PcapHeaders.writePacketHeader(\n+                packetHeaderBuf,\n+                currentTime,\n+                Integer.parseInt(microsecond),\n+                packet.readableBytes(),\n+                packet.readableBytes()\n+        );\n+\n+        packetHeaderBuf.readBytes(outputStream, packetHeaderBuf.readableBytes());\n+        packet.readBytes(outputStream, packet.readableBytes());\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        this.outputStream.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41c98e5e93537a0ff66f85490c616337e3e6ec53"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODA5MDQ3OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PcapHeaders.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMjowODoyNlrOHKzTjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMjowODoyNlrOHKzTjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA4ODM5OQ==", "bodyText": "This is the wrong place to do toSeconds.", "url": "https://github.com/netty/netty/pull/10498#discussion_r481088399", "createdAt": "2020-09-01T12:08:26Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/pcap/PcapHeaders.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+public final class PcapHeaders {\n+\n+    /**\n+     * Pcap Global Header built from:\n+     * <ol>\n+     *      <li> magic_number </li>\n+     *      <li> version_major </li>\n+     *      <li> version_minor </li>\n+     *      <li> thiszone </li>\n+     *      <li> sigfigs </li>\n+     *      <li> snaplen </li>\n+     *      <li> network </li>\n+     * </ol>\n+     */\n+    private static final byte[] GLOBAL_HEADER = new byte[]{-95, -78, -61, -44, 0, 2, 0, 4, 0, 0,\n+            0, 0, 0, 0, 0, 0, 0, 0, -1, -1, 0, 0, 0, 1};\n+\n+    private PcapHeaders() {\n+        // Prevent outside initialization\n+    }\n+\n+    /**\n+     * Write Pcap Global Header\n+     *\n+     * @param byteBuf byteBuf ByteBuf where we'll write header data\n+     */\n+    public static void writeGlobalHeader(ByteBuf byteBuf) {\n+        byteBuf.writeBytes(GLOBAL_HEADER);\n+    }\n+\n+    /**\n+     * Write Pcap Packet Header\n+     *\n+     * @param byteBuf  ByteBuf where we'll write header data\n+     * @param ts_sec   timestamp seconds\n+     * @param ts_usec  timestamp microseconds\n+     * @param incl_len number of octets of packet saved in file\n+     * @param orig_len actual length of packet\n+     */\n+    static void writePacketHeader(ByteBuf byteBuf, long ts_sec, int ts_usec, int incl_len, int orig_len) {\n+        byteBuf.writeInt((int) TimeUnit.MILLISECONDS.toSeconds(ts_sec));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41c98e5e93537a0ff66f85490c616337e3e6ec53"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwODA5NDgxOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/TCPPacket.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMjowOTo0NlrOHKzWLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxMjowOTo0NlrOHKzWLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTA4OTA3MQ==", "bodyText": "Or 0x5000.", "url": "https://github.com/netty/netty/pull/10498#discussion_r481089071", "createdAt": "2020-09-01T12:09:46Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/pcap/TCPPacket.java", "diffHunk": "@@ -0,0 +1,108 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+final class TCPPacket {\n+\n+    /**\n+     * <p> Data Offset + Reserved Bits. </p>\n+     *\n+     * Equivalent to: {@code 5 << 12}\n+     */\n+    private static final short OFFSET = 20480;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "41c98e5e93537a0ff66f85490c616337e3e6ec53"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAwOTkxODM2OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PCapWriter.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMVQxOToyNjowNFrOHLFFQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwNjozNTowOFrOHLeDGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3OTY0OA==", "bodyText": "This value is still in milliseconds, but looks like pcap wants microseconds. It could cause confusion to people using this, if we're off by a factor 1.000.", "url": "https://github.com/netty/netty/pull/10498#discussion_r481379648", "createdAt": "2020-09-01T19:26:04Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCapWriter.java", "diffHunk": "@@ -50,13 +48,10 @@\n     void writePacket(ByteBuf packetHeaderBuf, ByteBuf packet) throws IOException {\n         long currentTime = System.currentTimeMillis();\n \n-        String microsecond = sdf.format(new Date(currentTime));\n-        microsecond = microsecond.substring(microsecond.indexOf(\".\") + 1);\n-\n         PcapHeaders.writePacketHeader(\n                 packetHeaderBuf,\n-                currentTime,\n-                Integer.parseInt(microsecond),\n+                (int) TimeUnit.MILLISECONDS.toSeconds(currentTime),\n+                (int) currentTime % 1000,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac9d5736766cc880194db9bab0c5153110b1e946"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM4MjAzNg==", "bodyText": "Lol, need spoon feeding again. Haha. I tried but value went into negative. Help :p", "url": "https://github.com/netty/netty/pull/10498#discussion_r481382036", "createdAt": "2020-09-01T19:30:44Z", "author": {"login": "hyperxpro"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCapWriter.java", "diffHunk": "@@ -50,13 +48,10 @@\n     void writePacket(ByteBuf packetHeaderBuf, ByteBuf packet) throws IOException {\n         long currentTime = System.currentTimeMillis();\n \n-        String microsecond = sdf.format(new Date(currentTime));\n-        microsecond = microsecond.substring(microsecond.indexOf(\".\") + 1);\n-\n         PcapHeaders.writePacketHeader(\n                 packetHeaderBuf,\n-                currentTime,\n-                Integer.parseInt(microsecond),\n+                (int) TimeUnit.MILLISECONDS.toSeconds(currentTime),\n+                (int) currentTime % 1000,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3OTY0OA=="}, "originalCommit": {"oid": "ac9d5736766cc880194db9bab0c5153110b1e946"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTc4ODY5Nw==", "bodyText": "Finally, after lots of tries. Figured it out.", "url": "https://github.com/netty/netty/pull/10498#discussion_r481788697", "createdAt": "2020-09-02T06:35:08Z", "author": {"login": "hyperxpro"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCapWriter.java", "diffHunk": "@@ -50,13 +48,10 @@\n     void writePacket(ByteBuf packetHeaderBuf, ByteBuf packet) throws IOException {\n         long currentTime = System.currentTimeMillis();\n \n-        String microsecond = sdf.format(new Date(currentTime));\n-        microsecond = microsecond.substring(microsecond.indexOf(\".\") + 1);\n-\n         PcapHeaders.writePacketHeader(\n                 packetHeaderBuf,\n-                currentTime,\n-                Integer.parseInt(microsecond),\n+                (int) TimeUnit.MILLISECONDS.toSeconds(currentTime),\n+                (int) currentTime % 1000,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTM3OTY0OA=="}, "originalCommit": {"oid": "ac9d5736766cc880194db9bab0c5153110b1e946"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxMzM4NjY3OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOTo1MTowM1rOHLnoaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wMlQwOTo1MTowM1rOHLnoaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MTk0NTcwNw==", "bodyText": "The way these parameter docs are written makes the boolean parameters sound like a field that client code is reading, but the boolean values are more like commands that direct behaviour.\nHere's an example of what it looks like when written in that style:\n@param captureZeroByte Set to {@code true} to enable capturing packets with empty (0 bytes) payload. Otherwise, if {@code false}, empty packets will be filtered out.", "url": "https://github.com/netty/netty/pull/10498#discussion_r481945707", "createdAt": "2020-09-02T09:51:03Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "diffHunk": "@@ -99,31 +104,39 @@\n \n     /**\n      * Create new {@link PCAPWriteHandler} Instance.\n-     * {@code captureZeroByte} are set to {@code false}.\n+     * {@code captureZeroByte} is set to {@code false} and\n+     * {@code writePcapGlobalHeader} is set to {@code true}.\n      *\n      * @param outputStream OutputStream where Pcap data will be written\n      */\n     public PCAPWriteHandler(OutputStream outputStream) {\n-        this(outputStream, false);\n+        this(outputStream, false, true);\n     }\n \n     /**\n      * Create new {@link PCAPWriteHandler} Instance\n      *\n-     * @param outputStream    OutputStream where Pcap data will be written\n-     * @param captureZeroByte {@code true} If we'll capture packets with 0 bytes\n+     * @param outputStream          OutputStream where Pcap data will be written\n+     * @param captureZeroByte       {@code true} If we'll capture packets with 0 bytes else {@code false}\n+     * @param writePcapGlobalHeader {@code true} if we want to write Pcap Global Header on initialization\n+     *                              of {@link PCapWriter} else {@code false}.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e77cf5ea937087b0c7198f5651385b289873bd68"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODI2NjU3OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjo0MzoxOVrOHMYGAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjo0MzoxOVrOHMYGAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjczOTcxNQ==", "bodyText": "nit: remove ?", "url": "https://github.com/netty/netty/pull/10498#discussion_r482739715", "createdAt": "2020-09-03T06:43:19Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "diffHunk": "@@ -0,0 +1,410 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.ServerChannel;\n+import io.netty.channel.socket.DatagramPacket;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.util.NetUtil;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.Inet4Address;\n+import java.net.InetSocketAddress;\n+\n+/**\n+ * <p> {@link PCAPWriteHandler} captures {@link ByteBuf} from {@link SocketChannel} / {@link ServerChannel}\n+ * or {@link DatagramPacket} and writes it into Pcap {@link OutputStream}. </p>\n+ * <p></p>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d15aa5313747d13db50d804e3b181f8d67307817"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODI3MzY1OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjo0NTozMFrOHMYKDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzo1ODozOFrOHMavSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MDc1MQ==", "bodyText": "I think this is not correct... Shouldn't this be ctx.channel().parent() ?", "url": "https://github.com/netty/netty/pull/10498#discussion_r482740751", "createdAt": "2020-09-03T06:45:30Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "diffHunk": "@@ -0,0 +1,410 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.ServerChannel;\n+import io.netty.channel.socket.DatagramPacket;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.util.NetUtil;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.Inet4Address;\n+import java.net.InetSocketAddress;\n+\n+/**\n+ * <p> {@link PCAPWriteHandler} captures {@link ByteBuf} from {@link SocketChannel} / {@link ServerChannel}\n+ * or {@link DatagramPacket} and writes it into Pcap {@link OutputStream}. </p>\n+ * <p></p>\n+ *\n+ * <p>\n+ * Things to keep in mind when using {@link PCAPWriteHandler} with TCP:\n+ *\n+ *    <ul>\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#channelActive(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (SYN, SYN+ACK, ACK) is simulated as new connection in Pcap. </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#handlerRemoved(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (FIN+ACK, FIN+ACK, ACK) is simulated as connection shutdown in Pcap.  </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#exceptionCaught(ChannelHandlerContext, Throwable)}\n+ *        is called, a fake TCP RST is sent to simulate connection Reset in Pcap. </li>\n+ *\n+ *        <li> ACK is sent each time data is send / received. </li>\n+ *\n+ *        <li> Zero Length Data Packets can cause TCP Double ACK error in Wireshark. To tackle this,\n+ *        set {@code captureZeroByte} to {@code false}. </li>\n+ *    </ul>\n+ * </p>\n+ */\n+public final class PCAPWriteHandler extends ChannelDuplexHandler {\n+\n+    private final InternalLogger logger = InternalLoggerFactory.getInstance(PCAPWriteHandler.class);\n+\n+    /**\n+     * {@link PCapWriter} Instance\n+     */\n+    private PCapWriter pCapWriter;\n+\n+    /**\n+     * {@link OutputStream} where we'll write Pcap data.\n+     */\n+    private final OutputStream outputStream;\n+\n+    /**\n+     * {@code true} if we want to capture packets with zero bytes else {@code false}.\n+     */\n+    private final boolean captureZeroByte;\n+\n+    /**\n+     * {@code true} if we want to write Pcap Global Header on initialization of\n+     * {@link PCapWriter} else {@code false}.\n+     */\n+    private final boolean writePcapGlobalHeader;\n+\n+    /**\n+     * TCP Sender Segment Number.\n+     */\n+    private int sendSegmentNumber = 1;\n+\n+    /**\n+     * TCP Receiver Segment Number\n+     */\n+    private int receiveSegmentNumber = 1;\n+\n+    /**\n+     * Source Address [TCP ONLY]\n+     */\n+    private InetSocketAddress srcAddr;\n+\n+    /**\n+     * Destination Address [TCP ONLY]\n+     */\n+    private InetSocketAddress dstAddr;\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance.\n+     * {@code captureZeroByte} is set to {@code false} and\n+     * {@code writePcapGlobalHeader} is set to {@code true}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream) {\n+        this(outputStream, false, true);\n+    }\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance\n+     *\n+     * @param outputStream          OutputStream where Pcap data will be written\n+     * @param captureZeroByte       Set to {@code true} to enable capturing packets with empty (0 bytes) payload.\n+     *                              Otherwise, if set to {@code false}, empty packets will be filtered out.\n+     * @param writePcapGlobalHeader Set to {@code true} to write Pcap Global Header on initialization.\n+     *                              Otherwise, if set to {@code false}, Pcap Global Header will not be written\n+     *                              on initialization. This could when writing Pcap data on a existing file where\n+     *                              Pcap Global Header is already present.\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream, boolean captureZeroByte, boolean writePcapGlobalHeader) {\n+        this.outputStream = outputStream;\n+        this.captureZeroByte = captureZeroByte;\n+        this.writePcapGlobalHeader = writePcapGlobalHeader;\n+    }\n+\n+    @Override\n+    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+\n+        /*\n+         * If `writePcapGlobalHeader` is `true`, we'll write Pcap Global Header.\n+         */\n+        if (writePcapGlobalHeader) {\n+\n+            ByteBuf byteBuf = ctx.alloc().buffer();\n+            try {\n+                this.pCapWriter = new PCapWriter(this.outputStream, byteBuf);\n+            } catch (IOException ex) {\n+                ctx.fireExceptionCaught(ex);\n+            } finally {\n+                byteBuf.release();\n+            }\n+\n+        } else {\n+            this.pCapWriter = new PCapWriter(this.outputStream);\n+        }\n+\n+        if (ctx.channel() instanceof SocketChannel) {\n+            if (ctx.channel() instanceof ServerChannel) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d15aa5313747d13db50d804e3b181f8d67307817"}, "originalPosition": 156}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc4MzA0OA==", "bodyText": "Alright. Still learning the internals of Netty so didn't know. Fixed :D", "url": "https://github.com/netty/netty/pull/10498#discussion_r482783048", "createdAt": "2020-09-03T07:58:38Z", "author": {"login": "hyperxpro"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "diffHunk": "@@ -0,0 +1,410 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.ServerChannel;\n+import io.netty.channel.socket.DatagramPacket;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.util.NetUtil;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.Inet4Address;\n+import java.net.InetSocketAddress;\n+\n+/**\n+ * <p> {@link PCAPWriteHandler} captures {@link ByteBuf} from {@link SocketChannel} / {@link ServerChannel}\n+ * or {@link DatagramPacket} and writes it into Pcap {@link OutputStream}. </p>\n+ * <p></p>\n+ *\n+ * <p>\n+ * Things to keep in mind when using {@link PCAPWriteHandler} with TCP:\n+ *\n+ *    <ul>\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#channelActive(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (SYN, SYN+ACK, ACK) is simulated as new connection in Pcap. </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#handlerRemoved(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (FIN+ACK, FIN+ACK, ACK) is simulated as connection shutdown in Pcap.  </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#exceptionCaught(ChannelHandlerContext, Throwable)}\n+ *        is called, a fake TCP RST is sent to simulate connection Reset in Pcap. </li>\n+ *\n+ *        <li> ACK is sent each time data is send / received. </li>\n+ *\n+ *        <li> Zero Length Data Packets can cause TCP Double ACK error in Wireshark. To tackle this,\n+ *        set {@code captureZeroByte} to {@code false}. </li>\n+ *    </ul>\n+ * </p>\n+ */\n+public final class PCAPWriteHandler extends ChannelDuplexHandler {\n+\n+    private final InternalLogger logger = InternalLoggerFactory.getInstance(PCAPWriteHandler.class);\n+\n+    /**\n+     * {@link PCapWriter} Instance\n+     */\n+    private PCapWriter pCapWriter;\n+\n+    /**\n+     * {@link OutputStream} where we'll write Pcap data.\n+     */\n+    private final OutputStream outputStream;\n+\n+    /**\n+     * {@code true} if we want to capture packets with zero bytes else {@code false}.\n+     */\n+    private final boolean captureZeroByte;\n+\n+    /**\n+     * {@code true} if we want to write Pcap Global Header on initialization of\n+     * {@link PCapWriter} else {@code false}.\n+     */\n+    private final boolean writePcapGlobalHeader;\n+\n+    /**\n+     * TCP Sender Segment Number.\n+     */\n+    private int sendSegmentNumber = 1;\n+\n+    /**\n+     * TCP Receiver Segment Number\n+     */\n+    private int receiveSegmentNumber = 1;\n+\n+    /**\n+     * Source Address [TCP ONLY]\n+     */\n+    private InetSocketAddress srcAddr;\n+\n+    /**\n+     * Destination Address [TCP ONLY]\n+     */\n+    private InetSocketAddress dstAddr;\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance.\n+     * {@code captureZeroByte} is set to {@code false} and\n+     * {@code writePcapGlobalHeader} is set to {@code true}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream) {\n+        this(outputStream, false, true);\n+    }\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance\n+     *\n+     * @param outputStream          OutputStream where Pcap data will be written\n+     * @param captureZeroByte       Set to {@code true} to enable capturing packets with empty (0 bytes) payload.\n+     *                              Otherwise, if set to {@code false}, empty packets will be filtered out.\n+     * @param writePcapGlobalHeader Set to {@code true} to write Pcap Global Header on initialization.\n+     *                              Otherwise, if set to {@code false}, Pcap Global Header will not be written\n+     *                              on initialization. This could when writing Pcap data on a existing file where\n+     *                              Pcap Global Header is already present.\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream, boolean captureZeroByte, boolean writePcapGlobalHeader) {\n+        this.outputStream = outputStream;\n+        this.captureZeroByte = captureZeroByte;\n+        this.writePcapGlobalHeader = writePcapGlobalHeader;\n+    }\n+\n+    @Override\n+    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+\n+        /*\n+         * If `writePcapGlobalHeader` is `true`, we'll write Pcap Global Header.\n+         */\n+        if (writePcapGlobalHeader) {\n+\n+            ByteBuf byteBuf = ctx.alloc().buffer();\n+            try {\n+                this.pCapWriter = new PCapWriter(this.outputStream, byteBuf);\n+            } catch (IOException ex) {\n+                ctx.fireExceptionCaught(ex);\n+            } finally {\n+                byteBuf.release();\n+            }\n+\n+        } else {\n+            this.pCapWriter = new PCapWriter(this.outputStream);\n+        }\n+\n+        if (ctx.channel() instanceof SocketChannel) {\n+            if (ctx.channel() instanceof ServerChannel) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MDc1MQ=="}, "originalCommit": {"oid": "d15aa5313747d13db50d804e3b181f8d67307817"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODI3NDUyOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjo0NTo0NlrOHMYKiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjo0NTo0NlrOHMYKiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MDg3NQ==", "bodyText": "nit: you can merge this in the above if block", "url": "https://github.com/netty/netty/pull/10498#discussion_r482740875", "createdAt": "2020-09-03T06:45:46Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "diffHunk": "@@ -0,0 +1,410 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.ServerChannel;\n+import io.netty.channel.socket.DatagramPacket;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.util.NetUtil;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.Inet4Address;\n+import java.net.InetSocketAddress;\n+\n+/**\n+ * <p> {@link PCAPWriteHandler} captures {@link ByteBuf} from {@link SocketChannel} / {@link ServerChannel}\n+ * or {@link DatagramPacket} and writes it into Pcap {@link OutputStream}. </p>\n+ * <p></p>\n+ *\n+ * <p>\n+ * Things to keep in mind when using {@link PCAPWriteHandler} with TCP:\n+ *\n+ *    <ul>\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#channelActive(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (SYN, SYN+ACK, ACK) is simulated as new connection in Pcap. </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#handlerRemoved(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (FIN+ACK, FIN+ACK, ACK) is simulated as connection shutdown in Pcap.  </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#exceptionCaught(ChannelHandlerContext, Throwable)}\n+ *        is called, a fake TCP RST is sent to simulate connection Reset in Pcap. </li>\n+ *\n+ *        <li> ACK is sent each time data is send / received. </li>\n+ *\n+ *        <li> Zero Length Data Packets can cause TCP Double ACK error in Wireshark. To tackle this,\n+ *        set {@code captureZeroByte} to {@code false}. </li>\n+ *    </ul>\n+ * </p>\n+ */\n+public final class PCAPWriteHandler extends ChannelDuplexHandler {\n+\n+    private final InternalLogger logger = InternalLoggerFactory.getInstance(PCAPWriteHandler.class);\n+\n+    /**\n+     * {@link PCapWriter} Instance\n+     */\n+    private PCapWriter pCapWriter;\n+\n+    /**\n+     * {@link OutputStream} where we'll write Pcap data.\n+     */\n+    private final OutputStream outputStream;\n+\n+    /**\n+     * {@code true} if we want to capture packets with zero bytes else {@code false}.\n+     */\n+    private final boolean captureZeroByte;\n+\n+    /**\n+     * {@code true} if we want to write Pcap Global Header on initialization of\n+     * {@link PCapWriter} else {@code false}.\n+     */\n+    private final boolean writePcapGlobalHeader;\n+\n+    /**\n+     * TCP Sender Segment Number.\n+     */\n+    private int sendSegmentNumber = 1;\n+\n+    /**\n+     * TCP Receiver Segment Number\n+     */\n+    private int receiveSegmentNumber = 1;\n+\n+    /**\n+     * Source Address [TCP ONLY]\n+     */\n+    private InetSocketAddress srcAddr;\n+\n+    /**\n+     * Destination Address [TCP ONLY]\n+     */\n+    private InetSocketAddress dstAddr;\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance.\n+     * {@code captureZeroByte} is set to {@code false} and\n+     * {@code writePcapGlobalHeader} is set to {@code true}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream) {\n+        this(outputStream, false, true);\n+    }\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance\n+     *\n+     * @param outputStream          OutputStream where Pcap data will be written\n+     * @param captureZeroByte       Set to {@code true} to enable capturing packets with empty (0 bytes) payload.\n+     *                              Otherwise, if set to {@code false}, empty packets will be filtered out.\n+     * @param writePcapGlobalHeader Set to {@code true} to write Pcap Global Header on initialization.\n+     *                              Otherwise, if set to {@code false}, Pcap Global Header will not be written\n+     *                              on initialization. This could when writing Pcap data on a existing file where\n+     *                              Pcap Global Header is already present.\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream, boolean captureZeroByte, boolean writePcapGlobalHeader) {\n+        this.outputStream = outputStream;\n+        this.captureZeroByte = captureZeroByte;\n+        this.writePcapGlobalHeader = writePcapGlobalHeader;\n+    }\n+\n+    @Override\n+    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+\n+        /*\n+         * If `writePcapGlobalHeader` is `true`, we'll write Pcap Global Header.\n+         */\n+        if (writePcapGlobalHeader) {\n+\n+            ByteBuf byteBuf = ctx.alloc().buffer();\n+            try {\n+                this.pCapWriter = new PCapWriter(this.outputStream, byteBuf);\n+            } catch (IOException ex) {\n+                ctx.fireExceptionCaught(ex);\n+            } finally {\n+                byteBuf.release();\n+            }\n+\n+        } else {\n+            this.pCapWriter = new PCapWriter(this.outputStream);\n+        }\n+\n+        if (ctx.channel() instanceof SocketChannel) {\n+            if (ctx.channel() instanceof ServerChannel) {\n+                srcAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().localAddress();\n+            } else {\n+                srcAddr = (InetSocketAddress) ctx.channel().localAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+            }\n+        }\n+\n+        if (ctx.channel() instanceof SocketChannel) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d15aa5313747d13db50d804e3b181f8d67307817"}, "originalPosition": 165}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODI4NDA1OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjo0OToxMlrOHMYQGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNzozMToxM1rOHMZuRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MjI5OA==", "bodyText": "this is not really correct... Even with UDP we may see ByteBuf messages if the channel is connected. I think you should use ctx.channel() instanceof DatagramChannel to decide if its UDP or not", "url": "https://github.com/netty/netty/pull/10498#discussion_r482742298", "createdAt": "2020-09-03T06:49:12Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "diffHunk": "@@ -0,0 +1,410 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.ServerChannel;\n+import io.netty.channel.socket.DatagramPacket;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.util.NetUtil;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.Inet4Address;\n+import java.net.InetSocketAddress;\n+\n+/**\n+ * <p> {@link PCAPWriteHandler} captures {@link ByteBuf} from {@link SocketChannel} / {@link ServerChannel}\n+ * or {@link DatagramPacket} and writes it into Pcap {@link OutputStream}. </p>\n+ * <p></p>\n+ *\n+ * <p>\n+ * Things to keep in mind when using {@link PCAPWriteHandler} with TCP:\n+ *\n+ *    <ul>\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#channelActive(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (SYN, SYN+ACK, ACK) is simulated as new connection in Pcap. </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#handlerRemoved(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (FIN+ACK, FIN+ACK, ACK) is simulated as connection shutdown in Pcap.  </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#exceptionCaught(ChannelHandlerContext, Throwable)}\n+ *        is called, a fake TCP RST is sent to simulate connection Reset in Pcap. </li>\n+ *\n+ *        <li> ACK is sent each time data is send / received. </li>\n+ *\n+ *        <li> Zero Length Data Packets can cause TCP Double ACK error in Wireshark. To tackle this,\n+ *        set {@code captureZeroByte} to {@code false}. </li>\n+ *    </ul>\n+ * </p>\n+ */\n+public final class PCAPWriteHandler extends ChannelDuplexHandler {\n+\n+    private final InternalLogger logger = InternalLoggerFactory.getInstance(PCAPWriteHandler.class);\n+\n+    /**\n+     * {@link PCapWriter} Instance\n+     */\n+    private PCapWriter pCapWriter;\n+\n+    /**\n+     * {@link OutputStream} where we'll write Pcap data.\n+     */\n+    private final OutputStream outputStream;\n+\n+    /**\n+     * {@code true} if we want to capture packets with zero bytes else {@code false}.\n+     */\n+    private final boolean captureZeroByte;\n+\n+    /**\n+     * {@code true} if we want to write Pcap Global Header on initialization of\n+     * {@link PCapWriter} else {@code false}.\n+     */\n+    private final boolean writePcapGlobalHeader;\n+\n+    /**\n+     * TCP Sender Segment Number.\n+     */\n+    private int sendSegmentNumber = 1;\n+\n+    /**\n+     * TCP Receiver Segment Number\n+     */\n+    private int receiveSegmentNumber = 1;\n+\n+    /**\n+     * Source Address [TCP ONLY]\n+     */\n+    private InetSocketAddress srcAddr;\n+\n+    /**\n+     * Destination Address [TCP ONLY]\n+     */\n+    private InetSocketAddress dstAddr;\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance.\n+     * {@code captureZeroByte} is set to {@code false} and\n+     * {@code writePcapGlobalHeader} is set to {@code true}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream) {\n+        this(outputStream, false, true);\n+    }\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance\n+     *\n+     * @param outputStream          OutputStream where Pcap data will be written\n+     * @param captureZeroByte       Set to {@code true} to enable capturing packets with empty (0 bytes) payload.\n+     *                              Otherwise, if set to {@code false}, empty packets will be filtered out.\n+     * @param writePcapGlobalHeader Set to {@code true} to write Pcap Global Header on initialization.\n+     *                              Otherwise, if set to {@code false}, Pcap Global Header will not be written\n+     *                              on initialization. This could when writing Pcap data on a existing file where\n+     *                              Pcap Global Header is already present.\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream, boolean captureZeroByte, boolean writePcapGlobalHeader) {\n+        this.outputStream = outputStream;\n+        this.captureZeroByte = captureZeroByte;\n+        this.writePcapGlobalHeader = writePcapGlobalHeader;\n+    }\n+\n+    @Override\n+    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+\n+        /*\n+         * If `writePcapGlobalHeader` is `true`, we'll write Pcap Global Header.\n+         */\n+        if (writePcapGlobalHeader) {\n+\n+            ByteBuf byteBuf = ctx.alloc().buffer();\n+            try {\n+                this.pCapWriter = new PCapWriter(this.outputStream, byteBuf);\n+            } catch (IOException ex) {\n+                ctx.fireExceptionCaught(ex);\n+            } finally {\n+                byteBuf.release();\n+            }\n+\n+        } else {\n+            this.pCapWriter = new PCapWriter(this.outputStream);\n+        }\n+\n+        if (ctx.channel() instanceof SocketChannel) {\n+            if (ctx.channel() instanceof ServerChannel) {\n+                srcAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().localAddress();\n+            } else {\n+                srcAddr = (InetSocketAddress) ctx.channel().localAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+            }\n+        }\n+\n+        if (ctx.channel() instanceof SocketChannel) {\n+            logger.debug(\"Starting Fake TCP 3-Way Handshake\");\n+\n+            ByteBuf tcpBuf = ctx.alloc().buffer();\n+\n+            try {\n+                // Write SYN with Normal Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 0, 0, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.TCPFlag.SYN);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc(), ctx);\n+\n+                // Write SYN+ACK with Reversed Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 0, 1, dstAddr.getPort(), srcAddr.getPort(), TCPPacket.TCPFlag.SYN,\n+                        TCPPacket.TCPFlag.ACK);\n+                completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc(), ctx);\n+\n+                // Write ACK with Normal Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 1, 1, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc(), ctx);\n+            } finally {\n+                tcpBuf.release();\n+            }\n+\n+            logger.debug(\"Finished Fake TCP 3-Way Handshake\");\n+        }\n+\n+        super.channelActive(ctx);\n+    }\n+\n+    @Override\n+    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n+        writePacket(ctx, msg, false);\n+        super.channelRead(ctx, msg);\n+    }\n+\n+    @Override\n+    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {\n+        writePacket(ctx, msg, true);\n+        super.write(ctx, msg, promise);\n+    }\n+\n+    private void writePacket(ChannelHandlerContext ctx, Object msg, boolean isWriteOperation) {\n+        if (msg instanceof ByteBuf) {\n+\n+            // If bytes are 0 and `captureZeroByte` is false, we won't capture this.\n+            if (((ByteBuf) msg).readableBytes() == 0 && !captureZeroByte) {\n+                logger.debug(\"Discarding Zero Byte TCP Packet. isWriteOperation {}\", isWriteOperation);\n+                return;\n+            }\n+\n+            ByteBuf packet = ((ByteBuf) msg).duplicate();\n+            ByteBuf tcpBuf = ctx.alloc().buffer();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d15aa5313747d13db50d804e3b181f8d67307817"}, "originalPosition": 215}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc2NjQwNw==", "bodyText": "Handling the EmbeddedChannel with this approach will be an issue then for Unit Tests. I'm replacing the EmbeddedChannel with Bootstrap client in Test Case.", "url": "https://github.com/netty/netty/pull/10498#discussion_r482766407", "createdAt": "2020-09-03T07:31:13Z", "author": {"login": "hyperxpro"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "diffHunk": "@@ -0,0 +1,410 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.ServerChannel;\n+import io.netty.channel.socket.DatagramPacket;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.util.NetUtil;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.Inet4Address;\n+import java.net.InetSocketAddress;\n+\n+/**\n+ * <p> {@link PCAPWriteHandler} captures {@link ByteBuf} from {@link SocketChannel} / {@link ServerChannel}\n+ * or {@link DatagramPacket} and writes it into Pcap {@link OutputStream}. </p>\n+ * <p></p>\n+ *\n+ * <p>\n+ * Things to keep in mind when using {@link PCAPWriteHandler} with TCP:\n+ *\n+ *    <ul>\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#channelActive(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (SYN, SYN+ACK, ACK) is simulated as new connection in Pcap. </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#handlerRemoved(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (FIN+ACK, FIN+ACK, ACK) is simulated as connection shutdown in Pcap.  </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#exceptionCaught(ChannelHandlerContext, Throwable)}\n+ *        is called, a fake TCP RST is sent to simulate connection Reset in Pcap. </li>\n+ *\n+ *        <li> ACK is sent each time data is send / received. </li>\n+ *\n+ *        <li> Zero Length Data Packets can cause TCP Double ACK error in Wireshark. To tackle this,\n+ *        set {@code captureZeroByte} to {@code false}. </li>\n+ *    </ul>\n+ * </p>\n+ */\n+public final class PCAPWriteHandler extends ChannelDuplexHandler {\n+\n+    private final InternalLogger logger = InternalLoggerFactory.getInstance(PCAPWriteHandler.class);\n+\n+    /**\n+     * {@link PCapWriter} Instance\n+     */\n+    private PCapWriter pCapWriter;\n+\n+    /**\n+     * {@link OutputStream} where we'll write Pcap data.\n+     */\n+    private final OutputStream outputStream;\n+\n+    /**\n+     * {@code true} if we want to capture packets with zero bytes else {@code false}.\n+     */\n+    private final boolean captureZeroByte;\n+\n+    /**\n+     * {@code true} if we want to write Pcap Global Header on initialization of\n+     * {@link PCapWriter} else {@code false}.\n+     */\n+    private final boolean writePcapGlobalHeader;\n+\n+    /**\n+     * TCP Sender Segment Number.\n+     */\n+    private int sendSegmentNumber = 1;\n+\n+    /**\n+     * TCP Receiver Segment Number\n+     */\n+    private int receiveSegmentNumber = 1;\n+\n+    /**\n+     * Source Address [TCP ONLY]\n+     */\n+    private InetSocketAddress srcAddr;\n+\n+    /**\n+     * Destination Address [TCP ONLY]\n+     */\n+    private InetSocketAddress dstAddr;\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance.\n+     * {@code captureZeroByte} is set to {@code false} and\n+     * {@code writePcapGlobalHeader} is set to {@code true}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream) {\n+        this(outputStream, false, true);\n+    }\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance\n+     *\n+     * @param outputStream          OutputStream where Pcap data will be written\n+     * @param captureZeroByte       Set to {@code true} to enable capturing packets with empty (0 bytes) payload.\n+     *                              Otherwise, if set to {@code false}, empty packets will be filtered out.\n+     * @param writePcapGlobalHeader Set to {@code true} to write Pcap Global Header on initialization.\n+     *                              Otherwise, if set to {@code false}, Pcap Global Header will not be written\n+     *                              on initialization. This could when writing Pcap data on a existing file where\n+     *                              Pcap Global Header is already present.\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream, boolean captureZeroByte, boolean writePcapGlobalHeader) {\n+        this.outputStream = outputStream;\n+        this.captureZeroByte = captureZeroByte;\n+        this.writePcapGlobalHeader = writePcapGlobalHeader;\n+    }\n+\n+    @Override\n+    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+\n+        /*\n+         * If `writePcapGlobalHeader` is `true`, we'll write Pcap Global Header.\n+         */\n+        if (writePcapGlobalHeader) {\n+\n+            ByteBuf byteBuf = ctx.alloc().buffer();\n+            try {\n+                this.pCapWriter = new PCapWriter(this.outputStream, byteBuf);\n+            } catch (IOException ex) {\n+                ctx.fireExceptionCaught(ex);\n+            } finally {\n+                byteBuf.release();\n+            }\n+\n+        } else {\n+            this.pCapWriter = new PCapWriter(this.outputStream);\n+        }\n+\n+        if (ctx.channel() instanceof SocketChannel) {\n+            if (ctx.channel() instanceof ServerChannel) {\n+                srcAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().localAddress();\n+            } else {\n+                srcAddr = (InetSocketAddress) ctx.channel().localAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+            }\n+        }\n+\n+        if (ctx.channel() instanceof SocketChannel) {\n+            logger.debug(\"Starting Fake TCP 3-Way Handshake\");\n+\n+            ByteBuf tcpBuf = ctx.alloc().buffer();\n+\n+            try {\n+                // Write SYN with Normal Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 0, 0, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.TCPFlag.SYN);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc(), ctx);\n+\n+                // Write SYN+ACK with Reversed Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 0, 1, dstAddr.getPort(), srcAddr.getPort(), TCPPacket.TCPFlag.SYN,\n+                        TCPPacket.TCPFlag.ACK);\n+                completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc(), ctx);\n+\n+                // Write ACK with Normal Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 1, 1, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc(), ctx);\n+            } finally {\n+                tcpBuf.release();\n+            }\n+\n+            logger.debug(\"Finished Fake TCP 3-Way Handshake\");\n+        }\n+\n+        super.channelActive(ctx);\n+    }\n+\n+    @Override\n+    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n+        writePacket(ctx, msg, false);\n+        super.channelRead(ctx, msg);\n+    }\n+\n+    @Override\n+    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {\n+        writePacket(ctx, msg, true);\n+        super.write(ctx, msg, promise);\n+    }\n+\n+    private void writePacket(ChannelHandlerContext ctx, Object msg, boolean isWriteOperation) {\n+        if (msg instanceof ByteBuf) {\n+\n+            // If bytes are 0 and `captureZeroByte` is false, we won't capture this.\n+            if (((ByteBuf) msg).readableBytes() == 0 && !captureZeroByte) {\n+                logger.debug(\"Discarding Zero Byte TCP Packet. isWriteOperation {}\", isWriteOperation);\n+                return;\n+            }\n+\n+            ByteBuf packet = ((ByteBuf) msg).duplicate();\n+            ByteBuf tcpBuf = ctx.alloc().buffer();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MjI5OA=="}, "originalCommit": {"oid": "d15aa5313747d13db50d804e3b181f8d67307817"}, "originalPosition": 215}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODI4NTEyOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjo0OTozM1rOHMYQww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjo0OTozM1rOHMYQww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MjQ2Nw==", "bodyText": "See comment above... ByteBuf is valid for DatagramChannel as well", "url": "https://github.com/netty/netty/pull/10498#discussion_r482742467", "createdAt": "2020-09-03T06:49:33Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "diffHunk": "@@ -0,0 +1,410 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.ServerChannel;\n+import io.netty.channel.socket.DatagramPacket;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.util.NetUtil;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.Inet4Address;\n+import java.net.InetSocketAddress;\n+\n+/**\n+ * <p> {@link PCAPWriteHandler} captures {@link ByteBuf} from {@link SocketChannel} / {@link ServerChannel}\n+ * or {@link DatagramPacket} and writes it into Pcap {@link OutputStream}. </p>\n+ * <p></p>\n+ *\n+ * <p>\n+ * Things to keep in mind when using {@link PCAPWriteHandler} with TCP:\n+ *\n+ *    <ul>\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#channelActive(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (SYN, SYN+ACK, ACK) is simulated as new connection in Pcap. </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#handlerRemoved(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (FIN+ACK, FIN+ACK, ACK) is simulated as connection shutdown in Pcap.  </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#exceptionCaught(ChannelHandlerContext, Throwable)}\n+ *        is called, a fake TCP RST is sent to simulate connection Reset in Pcap. </li>\n+ *\n+ *        <li> ACK is sent each time data is send / received. </li>\n+ *\n+ *        <li> Zero Length Data Packets can cause TCP Double ACK error in Wireshark. To tackle this,\n+ *        set {@code captureZeroByte} to {@code false}. </li>\n+ *    </ul>\n+ * </p>\n+ */\n+public final class PCAPWriteHandler extends ChannelDuplexHandler {\n+\n+    private final InternalLogger logger = InternalLoggerFactory.getInstance(PCAPWriteHandler.class);\n+\n+    /**\n+     * {@link PCapWriter} Instance\n+     */\n+    private PCapWriter pCapWriter;\n+\n+    /**\n+     * {@link OutputStream} where we'll write Pcap data.\n+     */\n+    private final OutputStream outputStream;\n+\n+    /**\n+     * {@code true} if we want to capture packets with zero bytes else {@code false}.\n+     */\n+    private final boolean captureZeroByte;\n+\n+    /**\n+     * {@code true} if we want to write Pcap Global Header on initialization of\n+     * {@link PCapWriter} else {@code false}.\n+     */\n+    private final boolean writePcapGlobalHeader;\n+\n+    /**\n+     * TCP Sender Segment Number.\n+     */\n+    private int sendSegmentNumber = 1;\n+\n+    /**\n+     * TCP Receiver Segment Number\n+     */\n+    private int receiveSegmentNumber = 1;\n+\n+    /**\n+     * Source Address [TCP ONLY]\n+     */\n+    private InetSocketAddress srcAddr;\n+\n+    /**\n+     * Destination Address [TCP ONLY]\n+     */\n+    private InetSocketAddress dstAddr;\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance.\n+     * {@code captureZeroByte} is set to {@code false} and\n+     * {@code writePcapGlobalHeader} is set to {@code true}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream) {\n+        this(outputStream, false, true);\n+    }\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance\n+     *\n+     * @param outputStream          OutputStream where Pcap data will be written\n+     * @param captureZeroByte       Set to {@code true} to enable capturing packets with empty (0 bytes) payload.\n+     *                              Otherwise, if set to {@code false}, empty packets will be filtered out.\n+     * @param writePcapGlobalHeader Set to {@code true} to write Pcap Global Header on initialization.\n+     *                              Otherwise, if set to {@code false}, Pcap Global Header will not be written\n+     *                              on initialization. This could when writing Pcap data on a existing file where\n+     *                              Pcap Global Header is already present.\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream, boolean captureZeroByte, boolean writePcapGlobalHeader) {\n+        this.outputStream = outputStream;\n+        this.captureZeroByte = captureZeroByte;\n+        this.writePcapGlobalHeader = writePcapGlobalHeader;\n+    }\n+\n+    @Override\n+    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+\n+        /*\n+         * If `writePcapGlobalHeader` is `true`, we'll write Pcap Global Header.\n+         */\n+        if (writePcapGlobalHeader) {\n+\n+            ByteBuf byteBuf = ctx.alloc().buffer();\n+            try {\n+                this.pCapWriter = new PCapWriter(this.outputStream, byteBuf);\n+            } catch (IOException ex) {\n+                ctx.fireExceptionCaught(ex);\n+            } finally {\n+                byteBuf.release();\n+            }\n+\n+        } else {\n+            this.pCapWriter = new PCapWriter(this.outputStream);\n+        }\n+\n+        if (ctx.channel() instanceof SocketChannel) {\n+            if (ctx.channel() instanceof ServerChannel) {\n+                srcAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().localAddress();\n+            } else {\n+                srcAddr = (InetSocketAddress) ctx.channel().localAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+            }\n+        }\n+\n+        if (ctx.channel() instanceof SocketChannel) {\n+            logger.debug(\"Starting Fake TCP 3-Way Handshake\");\n+\n+            ByteBuf tcpBuf = ctx.alloc().buffer();\n+\n+            try {\n+                // Write SYN with Normal Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 0, 0, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.TCPFlag.SYN);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc(), ctx);\n+\n+                // Write SYN+ACK with Reversed Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 0, 1, dstAddr.getPort(), srcAddr.getPort(), TCPPacket.TCPFlag.SYN,\n+                        TCPPacket.TCPFlag.ACK);\n+                completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc(), ctx);\n+\n+                // Write ACK with Normal Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 1, 1, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc(), ctx);\n+            } finally {\n+                tcpBuf.release();\n+            }\n+\n+            logger.debug(\"Finished Fake TCP 3-Way Handshake\");\n+        }\n+\n+        super.channelActive(ctx);\n+    }\n+\n+    @Override\n+    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n+        writePacket(ctx, msg, false);\n+        super.channelRead(ctx, msg);\n+    }\n+\n+    @Override\n+    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {\n+        writePacket(ctx, msg, true);\n+        super.write(ctx, msg, promise);\n+    }\n+\n+    private void writePacket(ChannelHandlerContext ctx, Object msg, boolean isWriteOperation) {\n+        if (msg instanceof ByteBuf) {\n+\n+            // If bytes are 0 and `captureZeroByte` is false, we won't capture this.\n+            if (((ByteBuf) msg).readableBytes() == 0 && !captureZeroByte) {\n+                logger.debug(\"Discarding Zero Byte TCP Packet. isWriteOperation {}\", isWriteOperation);\n+                return;\n+            }\n+\n+            ByteBuf packet = ((ByteBuf) msg).duplicate();\n+            ByteBuf tcpBuf = ctx.alloc().buffer();\n+            int bytes = packet.readableBytes();\n+\n+            try {\n+                if (isWriteOperation) {\n+                    TCPPacket.writePacket(tcpBuf, packet, sendSegmentNumber, receiveSegmentNumber, srcAddr.getPort(),\n+                            dstAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                    completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc(), ctx);\n+                    logTCP(true, bytes, sendSegmentNumber, receiveSegmentNumber, srcAddr, dstAddr, false);\n+\n+                    sendSegmentNumber += bytes;\n+\n+                    TCPPacket.writePacket(tcpBuf, null, receiveSegmentNumber, sendSegmentNumber, dstAddr.getPort(),\n+                            srcAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                    completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc(), ctx);\n+                    logTCP(true, bytes, sendSegmentNumber, receiveSegmentNumber, dstAddr, srcAddr, true);\n+                } else {\n+                    TCPPacket.writePacket(tcpBuf, packet, receiveSegmentNumber, sendSegmentNumber, dstAddr.getPort(),\n+                            srcAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                    completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc(), ctx);\n+                    logTCP(false, bytes, receiveSegmentNumber, sendSegmentNumber, dstAddr, srcAddr, false);\n+\n+                    receiveSegmentNumber += bytes;\n+\n+                    TCPPacket.writePacket(tcpBuf, null, sendSegmentNumber, receiveSegmentNumber, srcAddr.getPort(),\n+                            dstAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                    completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc(), ctx);\n+                    logTCP(false, bytes, sendSegmentNumber, receiveSegmentNumber, srcAddr, dstAddr, true);\n+                }\n+            } finally {\n+                tcpBuf.release();\n+            }\n+\n+        } else if (msg instanceof DatagramPacket) {\n+            handleUDP(ctx, ((DatagramPacket) msg).duplicate());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d15aa5313747d13db50d804e3b181f8d67307817"}, "originalPosition": 249}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAxODI4ODkxOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwNjo1MDo0N1rOHMYTBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QwOToxMTo1MlrOHMdiow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MzA0Nw==", "bodyText": "use handleUDP(ChannelHandlerContext ctx, ByteBuf content, InetSocketAddress src, InetSocketAddress dst) as signature so it also can be used with \"connected datagram channel\" (See above)", "url": "https://github.com/netty/netty/pull/10498#discussion_r482743047", "createdAt": "2020-09-03T06:50:47Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "diffHunk": "@@ -0,0 +1,410 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.ServerChannel;\n+import io.netty.channel.socket.DatagramPacket;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.util.NetUtil;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.Inet4Address;\n+import java.net.InetSocketAddress;\n+\n+/**\n+ * <p> {@link PCAPWriteHandler} captures {@link ByteBuf} from {@link SocketChannel} / {@link ServerChannel}\n+ * or {@link DatagramPacket} and writes it into Pcap {@link OutputStream}. </p>\n+ * <p></p>\n+ *\n+ * <p>\n+ * Things to keep in mind when using {@link PCAPWriteHandler} with TCP:\n+ *\n+ *    <ul>\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#channelActive(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (SYN, SYN+ACK, ACK) is simulated as new connection in Pcap. </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#handlerRemoved(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (FIN+ACK, FIN+ACK, ACK) is simulated as connection shutdown in Pcap.  </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#exceptionCaught(ChannelHandlerContext, Throwable)}\n+ *        is called, a fake TCP RST is sent to simulate connection Reset in Pcap. </li>\n+ *\n+ *        <li> ACK is sent each time data is send / received. </li>\n+ *\n+ *        <li> Zero Length Data Packets can cause TCP Double ACK error in Wireshark. To tackle this,\n+ *        set {@code captureZeroByte} to {@code false}. </li>\n+ *    </ul>\n+ * </p>\n+ */\n+public final class PCAPWriteHandler extends ChannelDuplexHandler {\n+\n+    private final InternalLogger logger = InternalLoggerFactory.getInstance(PCAPWriteHandler.class);\n+\n+    /**\n+     * {@link PCapWriter} Instance\n+     */\n+    private PCapWriter pCapWriter;\n+\n+    /**\n+     * {@link OutputStream} where we'll write Pcap data.\n+     */\n+    private final OutputStream outputStream;\n+\n+    /**\n+     * {@code true} if we want to capture packets with zero bytes else {@code false}.\n+     */\n+    private final boolean captureZeroByte;\n+\n+    /**\n+     * {@code true} if we want to write Pcap Global Header on initialization of\n+     * {@link PCapWriter} else {@code false}.\n+     */\n+    private final boolean writePcapGlobalHeader;\n+\n+    /**\n+     * TCP Sender Segment Number.\n+     */\n+    private int sendSegmentNumber = 1;\n+\n+    /**\n+     * TCP Receiver Segment Number\n+     */\n+    private int receiveSegmentNumber = 1;\n+\n+    /**\n+     * Source Address [TCP ONLY]\n+     */\n+    private InetSocketAddress srcAddr;\n+\n+    /**\n+     * Destination Address [TCP ONLY]\n+     */\n+    private InetSocketAddress dstAddr;\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance.\n+     * {@code captureZeroByte} is set to {@code false} and\n+     * {@code writePcapGlobalHeader} is set to {@code true}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream) {\n+        this(outputStream, false, true);\n+    }\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance\n+     *\n+     * @param outputStream          OutputStream where Pcap data will be written\n+     * @param captureZeroByte       Set to {@code true} to enable capturing packets with empty (0 bytes) payload.\n+     *                              Otherwise, if set to {@code false}, empty packets will be filtered out.\n+     * @param writePcapGlobalHeader Set to {@code true} to write Pcap Global Header on initialization.\n+     *                              Otherwise, if set to {@code false}, Pcap Global Header will not be written\n+     *                              on initialization. This could when writing Pcap data on a existing file where\n+     *                              Pcap Global Header is already present.\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream, boolean captureZeroByte, boolean writePcapGlobalHeader) {\n+        this.outputStream = outputStream;\n+        this.captureZeroByte = captureZeroByte;\n+        this.writePcapGlobalHeader = writePcapGlobalHeader;\n+    }\n+\n+    @Override\n+    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+\n+        /*\n+         * If `writePcapGlobalHeader` is `true`, we'll write Pcap Global Header.\n+         */\n+        if (writePcapGlobalHeader) {\n+\n+            ByteBuf byteBuf = ctx.alloc().buffer();\n+            try {\n+                this.pCapWriter = new PCapWriter(this.outputStream, byteBuf);\n+            } catch (IOException ex) {\n+                ctx.fireExceptionCaught(ex);\n+            } finally {\n+                byteBuf.release();\n+            }\n+\n+        } else {\n+            this.pCapWriter = new PCapWriter(this.outputStream);\n+        }\n+\n+        if (ctx.channel() instanceof SocketChannel) {\n+            if (ctx.channel() instanceof ServerChannel) {\n+                srcAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().localAddress();\n+            } else {\n+                srcAddr = (InetSocketAddress) ctx.channel().localAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+            }\n+        }\n+\n+        if (ctx.channel() instanceof SocketChannel) {\n+            logger.debug(\"Starting Fake TCP 3-Way Handshake\");\n+\n+            ByteBuf tcpBuf = ctx.alloc().buffer();\n+\n+            try {\n+                // Write SYN with Normal Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 0, 0, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.TCPFlag.SYN);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc(), ctx);\n+\n+                // Write SYN+ACK with Reversed Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 0, 1, dstAddr.getPort(), srcAddr.getPort(), TCPPacket.TCPFlag.SYN,\n+                        TCPPacket.TCPFlag.ACK);\n+                completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc(), ctx);\n+\n+                // Write ACK with Normal Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 1, 1, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc(), ctx);\n+            } finally {\n+                tcpBuf.release();\n+            }\n+\n+            logger.debug(\"Finished Fake TCP 3-Way Handshake\");\n+        }\n+\n+        super.channelActive(ctx);\n+    }\n+\n+    @Override\n+    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n+        writePacket(ctx, msg, false);\n+        super.channelRead(ctx, msg);\n+    }\n+\n+    @Override\n+    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {\n+        writePacket(ctx, msg, true);\n+        super.write(ctx, msg, promise);\n+    }\n+\n+    private void writePacket(ChannelHandlerContext ctx, Object msg, boolean isWriteOperation) {\n+        if (msg instanceof ByteBuf) {\n+\n+            // If bytes are 0 and `captureZeroByte` is false, we won't capture this.\n+            if (((ByteBuf) msg).readableBytes() == 0 && !captureZeroByte) {\n+                logger.debug(\"Discarding Zero Byte TCP Packet. isWriteOperation {}\", isWriteOperation);\n+                return;\n+            }\n+\n+            ByteBuf packet = ((ByteBuf) msg).duplicate();\n+            ByteBuf tcpBuf = ctx.alloc().buffer();\n+            int bytes = packet.readableBytes();\n+\n+            try {\n+                if (isWriteOperation) {\n+                    TCPPacket.writePacket(tcpBuf, packet, sendSegmentNumber, receiveSegmentNumber, srcAddr.getPort(),\n+                            dstAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                    completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc(), ctx);\n+                    logTCP(true, bytes, sendSegmentNumber, receiveSegmentNumber, srcAddr, dstAddr, false);\n+\n+                    sendSegmentNumber += bytes;\n+\n+                    TCPPacket.writePacket(tcpBuf, null, receiveSegmentNumber, sendSegmentNumber, dstAddr.getPort(),\n+                            srcAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                    completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc(), ctx);\n+                    logTCP(true, bytes, sendSegmentNumber, receiveSegmentNumber, dstAddr, srcAddr, true);\n+                } else {\n+                    TCPPacket.writePacket(tcpBuf, packet, receiveSegmentNumber, sendSegmentNumber, dstAddr.getPort(),\n+                            srcAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                    completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc(), ctx);\n+                    logTCP(false, bytes, receiveSegmentNumber, sendSegmentNumber, dstAddr, srcAddr, false);\n+\n+                    receiveSegmentNumber += bytes;\n+\n+                    TCPPacket.writePacket(tcpBuf, null, sendSegmentNumber, receiveSegmentNumber, srcAddr.getPort(),\n+                            dstAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                    completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc(), ctx);\n+                    logTCP(false, bytes, sendSegmentNumber, receiveSegmentNumber, srcAddr, dstAddr, true);\n+                }\n+            } finally {\n+                tcpBuf.release();\n+            }\n+\n+        } else if (msg instanceof DatagramPacket) {\n+            handleUDP(ctx, ((DatagramPacket) msg).duplicate());\n+        } else {\n+            logger.error(\"Discarding Pcap Write for Object {}\", msg);\n+        }\n+    }\n+\n+    private void logTCP(boolean isWriteOperation, int bytes, int sendSegmentNumber, int receiveSegmentNumber,\n+                        InetSocketAddress srcAddr, InetSocketAddress dstAddr, boolean ackOnly) {\n+        if (ackOnly) {\n+            logger.debug(\"Writing TCP ACK, isWriteOperation {}, Segment Number {}, Ack Number {}, Src Addr {}, \"\n+                    + \"Dst Addr {}\", isWriteOperation, sendSegmentNumber, receiveSegmentNumber, dstAddr, srcAddr);\n+        } else {\n+            logger.debug(\"Writing TCP Data of {} Bytes, isWriteOperation {}, Segment Number {}, Ack Number {}, \" +\n+                            \"Src Addr {}, Dst Addr {}\", bytes, isWriteOperation, sendSegmentNumber,\n+                    receiveSegmentNumber, srcAddr, dstAddr);\n+        }\n+    }\n+\n+    private void handleUDP(ChannelHandlerContext ctx, DatagramPacket datagramPacket) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d15aa5313747d13db50d804e3b181f8d67307817"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc4NDE5Mw==", "bodyText": "1 doubt, DatagramChannel will be sending DatagramPacket and each DatagramPacket has it's own Source and Destination IP. Am I right? So we don't have to depend on ctx.channel().localAddress() or ctx.channel().remoteAddress().", "url": "https://github.com/netty/netty/pull/10498#discussion_r482784193", "createdAt": "2020-09-03T08:00:19Z", "author": {"login": "hyperxpro"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "diffHunk": "@@ -0,0 +1,410 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.ServerChannel;\n+import io.netty.channel.socket.DatagramPacket;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.util.NetUtil;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.Inet4Address;\n+import java.net.InetSocketAddress;\n+\n+/**\n+ * <p> {@link PCAPWriteHandler} captures {@link ByteBuf} from {@link SocketChannel} / {@link ServerChannel}\n+ * or {@link DatagramPacket} and writes it into Pcap {@link OutputStream}. </p>\n+ * <p></p>\n+ *\n+ * <p>\n+ * Things to keep in mind when using {@link PCAPWriteHandler} with TCP:\n+ *\n+ *    <ul>\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#channelActive(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (SYN, SYN+ACK, ACK) is simulated as new connection in Pcap. </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#handlerRemoved(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (FIN+ACK, FIN+ACK, ACK) is simulated as connection shutdown in Pcap.  </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#exceptionCaught(ChannelHandlerContext, Throwable)}\n+ *        is called, a fake TCP RST is sent to simulate connection Reset in Pcap. </li>\n+ *\n+ *        <li> ACK is sent each time data is send / received. </li>\n+ *\n+ *        <li> Zero Length Data Packets can cause TCP Double ACK error in Wireshark. To tackle this,\n+ *        set {@code captureZeroByte} to {@code false}. </li>\n+ *    </ul>\n+ * </p>\n+ */\n+public final class PCAPWriteHandler extends ChannelDuplexHandler {\n+\n+    private final InternalLogger logger = InternalLoggerFactory.getInstance(PCAPWriteHandler.class);\n+\n+    /**\n+     * {@link PCapWriter} Instance\n+     */\n+    private PCapWriter pCapWriter;\n+\n+    /**\n+     * {@link OutputStream} where we'll write Pcap data.\n+     */\n+    private final OutputStream outputStream;\n+\n+    /**\n+     * {@code true} if we want to capture packets with zero bytes else {@code false}.\n+     */\n+    private final boolean captureZeroByte;\n+\n+    /**\n+     * {@code true} if we want to write Pcap Global Header on initialization of\n+     * {@link PCapWriter} else {@code false}.\n+     */\n+    private final boolean writePcapGlobalHeader;\n+\n+    /**\n+     * TCP Sender Segment Number.\n+     */\n+    private int sendSegmentNumber = 1;\n+\n+    /**\n+     * TCP Receiver Segment Number\n+     */\n+    private int receiveSegmentNumber = 1;\n+\n+    /**\n+     * Source Address [TCP ONLY]\n+     */\n+    private InetSocketAddress srcAddr;\n+\n+    /**\n+     * Destination Address [TCP ONLY]\n+     */\n+    private InetSocketAddress dstAddr;\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance.\n+     * {@code captureZeroByte} is set to {@code false} and\n+     * {@code writePcapGlobalHeader} is set to {@code true}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream) {\n+        this(outputStream, false, true);\n+    }\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance\n+     *\n+     * @param outputStream          OutputStream where Pcap data will be written\n+     * @param captureZeroByte       Set to {@code true} to enable capturing packets with empty (0 bytes) payload.\n+     *                              Otherwise, if set to {@code false}, empty packets will be filtered out.\n+     * @param writePcapGlobalHeader Set to {@code true} to write Pcap Global Header on initialization.\n+     *                              Otherwise, if set to {@code false}, Pcap Global Header will not be written\n+     *                              on initialization. This could when writing Pcap data on a existing file where\n+     *                              Pcap Global Header is already present.\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream, boolean captureZeroByte, boolean writePcapGlobalHeader) {\n+        this.outputStream = outputStream;\n+        this.captureZeroByte = captureZeroByte;\n+        this.writePcapGlobalHeader = writePcapGlobalHeader;\n+    }\n+\n+    @Override\n+    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+\n+        /*\n+         * If `writePcapGlobalHeader` is `true`, we'll write Pcap Global Header.\n+         */\n+        if (writePcapGlobalHeader) {\n+\n+            ByteBuf byteBuf = ctx.alloc().buffer();\n+            try {\n+                this.pCapWriter = new PCapWriter(this.outputStream, byteBuf);\n+            } catch (IOException ex) {\n+                ctx.fireExceptionCaught(ex);\n+            } finally {\n+                byteBuf.release();\n+            }\n+\n+        } else {\n+            this.pCapWriter = new PCapWriter(this.outputStream);\n+        }\n+\n+        if (ctx.channel() instanceof SocketChannel) {\n+            if (ctx.channel() instanceof ServerChannel) {\n+                srcAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().localAddress();\n+            } else {\n+                srcAddr = (InetSocketAddress) ctx.channel().localAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+            }\n+        }\n+\n+        if (ctx.channel() instanceof SocketChannel) {\n+            logger.debug(\"Starting Fake TCP 3-Way Handshake\");\n+\n+            ByteBuf tcpBuf = ctx.alloc().buffer();\n+\n+            try {\n+                // Write SYN with Normal Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 0, 0, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.TCPFlag.SYN);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc(), ctx);\n+\n+                // Write SYN+ACK with Reversed Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 0, 1, dstAddr.getPort(), srcAddr.getPort(), TCPPacket.TCPFlag.SYN,\n+                        TCPPacket.TCPFlag.ACK);\n+                completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc(), ctx);\n+\n+                // Write ACK with Normal Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 1, 1, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc(), ctx);\n+            } finally {\n+                tcpBuf.release();\n+            }\n+\n+            logger.debug(\"Finished Fake TCP 3-Way Handshake\");\n+        }\n+\n+        super.channelActive(ctx);\n+    }\n+\n+    @Override\n+    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n+        writePacket(ctx, msg, false);\n+        super.channelRead(ctx, msg);\n+    }\n+\n+    @Override\n+    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {\n+        writePacket(ctx, msg, true);\n+        super.write(ctx, msg, promise);\n+    }\n+\n+    private void writePacket(ChannelHandlerContext ctx, Object msg, boolean isWriteOperation) {\n+        if (msg instanceof ByteBuf) {\n+\n+            // If bytes are 0 and `captureZeroByte` is false, we won't capture this.\n+            if (((ByteBuf) msg).readableBytes() == 0 && !captureZeroByte) {\n+                logger.debug(\"Discarding Zero Byte TCP Packet. isWriteOperation {}\", isWriteOperation);\n+                return;\n+            }\n+\n+            ByteBuf packet = ((ByteBuf) msg).duplicate();\n+            ByteBuf tcpBuf = ctx.alloc().buffer();\n+            int bytes = packet.readableBytes();\n+\n+            try {\n+                if (isWriteOperation) {\n+                    TCPPacket.writePacket(tcpBuf, packet, sendSegmentNumber, receiveSegmentNumber, srcAddr.getPort(),\n+                            dstAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                    completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc(), ctx);\n+                    logTCP(true, bytes, sendSegmentNumber, receiveSegmentNumber, srcAddr, dstAddr, false);\n+\n+                    sendSegmentNumber += bytes;\n+\n+                    TCPPacket.writePacket(tcpBuf, null, receiveSegmentNumber, sendSegmentNumber, dstAddr.getPort(),\n+                            srcAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                    completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc(), ctx);\n+                    logTCP(true, bytes, sendSegmentNumber, receiveSegmentNumber, dstAddr, srcAddr, true);\n+                } else {\n+                    TCPPacket.writePacket(tcpBuf, packet, receiveSegmentNumber, sendSegmentNumber, dstAddr.getPort(),\n+                            srcAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                    completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc(), ctx);\n+                    logTCP(false, bytes, receiveSegmentNumber, sendSegmentNumber, dstAddr, srcAddr, false);\n+\n+                    receiveSegmentNumber += bytes;\n+\n+                    TCPPacket.writePacket(tcpBuf, null, sendSegmentNumber, receiveSegmentNumber, srcAddr.getPort(),\n+                            dstAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                    completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc(), ctx);\n+                    logTCP(false, bytes, sendSegmentNumber, receiveSegmentNumber, srcAddr, dstAddr, true);\n+                }\n+            } finally {\n+                tcpBuf.release();\n+            }\n+\n+        } else if (msg instanceof DatagramPacket) {\n+            handleUDP(ctx, ((DatagramPacket) msg).duplicate());\n+        } else {\n+            logger.error(\"Discarding Pcap Write for Object {}\", msg);\n+        }\n+    }\n+\n+    private void logTCP(boolean isWriteOperation, int bytes, int sendSegmentNumber, int receiveSegmentNumber,\n+                        InetSocketAddress srcAddr, InetSocketAddress dstAddr, boolean ackOnly) {\n+        if (ackOnly) {\n+            logger.debug(\"Writing TCP ACK, isWriteOperation {}, Segment Number {}, Ack Number {}, Src Addr {}, \"\n+                    + \"Dst Addr {}\", isWriteOperation, sendSegmentNumber, receiveSegmentNumber, dstAddr, srcAddr);\n+        } else {\n+            logger.debug(\"Writing TCP Data of {} Bytes, isWriteOperation {}, Segment Number {}, Ack Number {}, \" +\n+                            \"Src Addr {}, Dst Addr {}\", bytes, isWriteOperation, sendSegmentNumber,\n+                    receiveSegmentNumber, srcAddr, dstAddr);\n+        }\n+    }\n+\n+    private void handleUDP(ChannelHandlerContext ctx, DatagramPacket datagramPacket) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MzA0Nw=="}, "originalCommit": {"oid": "d15aa5313747d13db50d804e3b181f8d67307817"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc4Njg2MQ==", "bodyText": "@hyperxpro yes when \"not connected\" that's true... but when a DatagramChannel is connected you can send ByteBuf and in this case the local / remote address is the one of the Channel", "url": "https://github.com/netty/netty/pull/10498#discussion_r482786861", "createdAt": "2020-09-03T08:04:47Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "diffHunk": "@@ -0,0 +1,410 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.ServerChannel;\n+import io.netty.channel.socket.DatagramPacket;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.util.NetUtil;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.Inet4Address;\n+import java.net.InetSocketAddress;\n+\n+/**\n+ * <p> {@link PCAPWriteHandler} captures {@link ByteBuf} from {@link SocketChannel} / {@link ServerChannel}\n+ * or {@link DatagramPacket} and writes it into Pcap {@link OutputStream}. </p>\n+ * <p></p>\n+ *\n+ * <p>\n+ * Things to keep in mind when using {@link PCAPWriteHandler} with TCP:\n+ *\n+ *    <ul>\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#channelActive(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (SYN, SYN+ACK, ACK) is simulated as new connection in Pcap. </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#handlerRemoved(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (FIN+ACK, FIN+ACK, ACK) is simulated as connection shutdown in Pcap.  </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#exceptionCaught(ChannelHandlerContext, Throwable)}\n+ *        is called, a fake TCP RST is sent to simulate connection Reset in Pcap. </li>\n+ *\n+ *        <li> ACK is sent each time data is send / received. </li>\n+ *\n+ *        <li> Zero Length Data Packets can cause TCP Double ACK error in Wireshark. To tackle this,\n+ *        set {@code captureZeroByte} to {@code false}. </li>\n+ *    </ul>\n+ * </p>\n+ */\n+public final class PCAPWriteHandler extends ChannelDuplexHandler {\n+\n+    private final InternalLogger logger = InternalLoggerFactory.getInstance(PCAPWriteHandler.class);\n+\n+    /**\n+     * {@link PCapWriter} Instance\n+     */\n+    private PCapWriter pCapWriter;\n+\n+    /**\n+     * {@link OutputStream} where we'll write Pcap data.\n+     */\n+    private final OutputStream outputStream;\n+\n+    /**\n+     * {@code true} if we want to capture packets with zero bytes else {@code false}.\n+     */\n+    private final boolean captureZeroByte;\n+\n+    /**\n+     * {@code true} if we want to write Pcap Global Header on initialization of\n+     * {@link PCapWriter} else {@code false}.\n+     */\n+    private final boolean writePcapGlobalHeader;\n+\n+    /**\n+     * TCP Sender Segment Number.\n+     */\n+    private int sendSegmentNumber = 1;\n+\n+    /**\n+     * TCP Receiver Segment Number\n+     */\n+    private int receiveSegmentNumber = 1;\n+\n+    /**\n+     * Source Address [TCP ONLY]\n+     */\n+    private InetSocketAddress srcAddr;\n+\n+    /**\n+     * Destination Address [TCP ONLY]\n+     */\n+    private InetSocketAddress dstAddr;\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance.\n+     * {@code captureZeroByte} is set to {@code false} and\n+     * {@code writePcapGlobalHeader} is set to {@code true}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream) {\n+        this(outputStream, false, true);\n+    }\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance\n+     *\n+     * @param outputStream          OutputStream where Pcap data will be written\n+     * @param captureZeroByte       Set to {@code true} to enable capturing packets with empty (0 bytes) payload.\n+     *                              Otherwise, if set to {@code false}, empty packets will be filtered out.\n+     * @param writePcapGlobalHeader Set to {@code true} to write Pcap Global Header on initialization.\n+     *                              Otherwise, if set to {@code false}, Pcap Global Header will not be written\n+     *                              on initialization. This could when writing Pcap data on a existing file where\n+     *                              Pcap Global Header is already present.\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream, boolean captureZeroByte, boolean writePcapGlobalHeader) {\n+        this.outputStream = outputStream;\n+        this.captureZeroByte = captureZeroByte;\n+        this.writePcapGlobalHeader = writePcapGlobalHeader;\n+    }\n+\n+    @Override\n+    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+\n+        /*\n+         * If `writePcapGlobalHeader` is `true`, we'll write Pcap Global Header.\n+         */\n+        if (writePcapGlobalHeader) {\n+\n+            ByteBuf byteBuf = ctx.alloc().buffer();\n+            try {\n+                this.pCapWriter = new PCapWriter(this.outputStream, byteBuf);\n+            } catch (IOException ex) {\n+                ctx.fireExceptionCaught(ex);\n+            } finally {\n+                byteBuf.release();\n+            }\n+\n+        } else {\n+            this.pCapWriter = new PCapWriter(this.outputStream);\n+        }\n+\n+        if (ctx.channel() instanceof SocketChannel) {\n+            if (ctx.channel() instanceof ServerChannel) {\n+                srcAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().localAddress();\n+            } else {\n+                srcAddr = (InetSocketAddress) ctx.channel().localAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+            }\n+        }\n+\n+        if (ctx.channel() instanceof SocketChannel) {\n+            logger.debug(\"Starting Fake TCP 3-Way Handshake\");\n+\n+            ByteBuf tcpBuf = ctx.alloc().buffer();\n+\n+            try {\n+                // Write SYN with Normal Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 0, 0, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.TCPFlag.SYN);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc(), ctx);\n+\n+                // Write SYN+ACK with Reversed Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 0, 1, dstAddr.getPort(), srcAddr.getPort(), TCPPacket.TCPFlag.SYN,\n+                        TCPPacket.TCPFlag.ACK);\n+                completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc(), ctx);\n+\n+                // Write ACK with Normal Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 1, 1, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc(), ctx);\n+            } finally {\n+                tcpBuf.release();\n+            }\n+\n+            logger.debug(\"Finished Fake TCP 3-Way Handshake\");\n+        }\n+\n+        super.channelActive(ctx);\n+    }\n+\n+    @Override\n+    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n+        writePacket(ctx, msg, false);\n+        super.channelRead(ctx, msg);\n+    }\n+\n+    @Override\n+    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {\n+        writePacket(ctx, msg, true);\n+        super.write(ctx, msg, promise);\n+    }\n+\n+    private void writePacket(ChannelHandlerContext ctx, Object msg, boolean isWriteOperation) {\n+        if (msg instanceof ByteBuf) {\n+\n+            // If bytes are 0 and `captureZeroByte` is false, we won't capture this.\n+            if (((ByteBuf) msg).readableBytes() == 0 && !captureZeroByte) {\n+                logger.debug(\"Discarding Zero Byte TCP Packet. isWriteOperation {}\", isWriteOperation);\n+                return;\n+            }\n+\n+            ByteBuf packet = ((ByteBuf) msg).duplicate();\n+            ByteBuf tcpBuf = ctx.alloc().buffer();\n+            int bytes = packet.readableBytes();\n+\n+            try {\n+                if (isWriteOperation) {\n+                    TCPPacket.writePacket(tcpBuf, packet, sendSegmentNumber, receiveSegmentNumber, srcAddr.getPort(),\n+                            dstAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                    completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc(), ctx);\n+                    logTCP(true, bytes, sendSegmentNumber, receiveSegmentNumber, srcAddr, dstAddr, false);\n+\n+                    sendSegmentNumber += bytes;\n+\n+                    TCPPacket.writePacket(tcpBuf, null, receiveSegmentNumber, sendSegmentNumber, dstAddr.getPort(),\n+                            srcAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                    completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc(), ctx);\n+                    logTCP(true, bytes, sendSegmentNumber, receiveSegmentNumber, dstAddr, srcAddr, true);\n+                } else {\n+                    TCPPacket.writePacket(tcpBuf, packet, receiveSegmentNumber, sendSegmentNumber, dstAddr.getPort(),\n+                            srcAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                    completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc(), ctx);\n+                    logTCP(false, bytes, receiveSegmentNumber, sendSegmentNumber, dstAddr, srcAddr, false);\n+\n+                    receiveSegmentNumber += bytes;\n+\n+                    TCPPacket.writePacket(tcpBuf, null, sendSegmentNumber, receiveSegmentNumber, srcAddr.getPort(),\n+                            dstAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                    completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc(), ctx);\n+                    logTCP(false, bytes, sendSegmentNumber, receiveSegmentNumber, srcAddr, dstAddr, true);\n+                }\n+            } finally {\n+                tcpBuf.release();\n+            }\n+\n+        } else if (msg instanceof DatagramPacket) {\n+            handleUDP(ctx, ((DatagramPacket) msg).duplicate());\n+        } else {\n+            logger.error(\"Discarding Pcap Write for Object {}\", msg);\n+        }\n+    }\n+\n+    private void logTCP(boolean isWriteOperation, int bytes, int sendSegmentNumber, int receiveSegmentNumber,\n+                        InetSocketAddress srcAddr, InetSocketAddress dstAddr, boolean ackOnly) {\n+        if (ackOnly) {\n+            logger.debug(\"Writing TCP ACK, isWriteOperation {}, Segment Number {}, Ack Number {}, Src Addr {}, \"\n+                    + \"Dst Addr {}\", isWriteOperation, sendSegmentNumber, receiveSegmentNumber, dstAddr, srcAddr);\n+        } else {\n+            logger.debug(\"Writing TCP Data of {} Bytes, isWriteOperation {}, Segment Number {}, Ack Number {}, \" +\n+                            \"Src Addr {}, Dst Addr {}\", bytes, isWriteOperation, sendSegmentNumber,\n+                    receiveSegmentNumber, srcAddr, dstAddr);\n+        }\n+    }\n+\n+    private void handleUDP(ChannelHandlerContext ctx, DatagramPacket datagramPacket) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MzA0Nw=="}, "originalCommit": {"oid": "d15aa5313747d13db50d804e3b181f8d67307817"}, "originalPosition": 267}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjgyODk2Mw==", "bodyText": "Handled the signature part in a different fashion.", "url": "https://github.com/netty/netty/pull/10498#discussion_r482828963", "createdAt": "2020-09-03T09:11:52Z", "author": {"login": "hyperxpro"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "diffHunk": "@@ -0,0 +1,410 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.ServerChannel;\n+import io.netty.channel.socket.DatagramPacket;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.util.NetUtil;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.Inet4Address;\n+import java.net.InetSocketAddress;\n+\n+/**\n+ * <p> {@link PCAPWriteHandler} captures {@link ByteBuf} from {@link SocketChannel} / {@link ServerChannel}\n+ * or {@link DatagramPacket} and writes it into Pcap {@link OutputStream}. </p>\n+ * <p></p>\n+ *\n+ * <p>\n+ * Things to keep in mind when using {@link PCAPWriteHandler} with TCP:\n+ *\n+ *    <ul>\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#channelActive(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (SYN, SYN+ACK, ACK) is simulated as new connection in Pcap. </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#handlerRemoved(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (FIN+ACK, FIN+ACK, ACK) is simulated as connection shutdown in Pcap.  </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#exceptionCaught(ChannelHandlerContext, Throwable)}\n+ *        is called, a fake TCP RST is sent to simulate connection Reset in Pcap. </li>\n+ *\n+ *        <li> ACK is sent each time data is send / received. </li>\n+ *\n+ *        <li> Zero Length Data Packets can cause TCP Double ACK error in Wireshark. To tackle this,\n+ *        set {@code captureZeroByte} to {@code false}. </li>\n+ *    </ul>\n+ * </p>\n+ */\n+public final class PCAPWriteHandler extends ChannelDuplexHandler {\n+\n+    private final InternalLogger logger = InternalLoggerFactory.getInstance(PCAPWriteHandler.class);\n+\n+    /**\n+     * {@link PCapWriter} Instance\n+     */\n+    private PCapWriter pCapWriter;\n+\n+    /**\n+     * {@link OutputStream} where we'll write Pcap data.\n+     */\n+    private final OutputStream outputStream;\n+\n+    /**\n+     * {@code true} if we want to capture packets with zero bytes else {@code false}.\n+     */\n+    private final boolean captureZeroByte;\n+\n+    /**\n+     * {@code true} if we want to write Pcap Global Header on initialization of\n+     * {@link PCapWriter} else {@code false}.\n+     */\n+    private final boolean writePcapGlobalHeader;\n+\n+    /**\n+     * TCP Sender Segment Number.\n+     */\n+    private int sendSegmentNumber = 1;\n+\n+    /**\n+     * TCP Receiver Segment Number\n+     */\n+    private int receiveSegmentNumber = 1;\n+\n+    /**\n+     * Source Address [TCP ONLY]\n+     */\n+    private InetSocketAddress srcAddr;\n+\n+    /**\n+     * Destination Address [TCP ONLY]\n+     */\n+    private InetSocketAddress dstAddr;\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance.\n+     * {@code captureZeroByte} is set to {@code false} and\n+     * {@code writePcapGlobalHeader} is set to {@code true}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream) {\n+        this(outputStream, false, true);\n+    }\n+\n+    /**\n+     * Create new {@link PCAPWriteHandler} Instance\n+     *\n+     * @param outputStream          OutputStream where Pcap data will be written\n+     * @param captureZeroByte       Set to {@code true} to enable capturing packets with empty (0 bytes) payload.\n+     *                              Otherwise, if set to {@code false}, empty packets will be filtered out.\n+     * @param writePcapGlobalHeader Set to {@code true} to write Pcap Global Header on initialization.\n+     *                              Otherwise, if set to {@code false}, Pcap Global Header will not be written\n+     *                              on initialization. This could when writing Pcap data on a existing file where\n+     *                              Pcap Global Header is already present.\n+     */\n+    public PCAPWriteHandler(OutputStream outputStream, boolean captureZeroByte, boolean writePcapGlobalHeader) {\n+        this.outputStream = outputStream;\n+        this.captureZeroByte = captureZeroByte;\n+        this.writePcapGlobalHeader = writePcapGlobalHeader;\n+    }\n+\n+    @Override\n+    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+\n+        /*\n+         * If `writePcapGlobalHeader` is `true`, we'll write Pcap Global Header.\n+         */\n+        if (writePcapGlobalHeader) {\n+\n+            ByteBuf byteBuf = ctx.alloc().buffer();\n+            try {\n+                this.pCapWriter = new PCapWriter(this.outputStream, byteBuf);\n+            } catch (IOException ex) {\n+                ctx.fireExceptionCaught(ex);\n+            } finally {\n+                byteBuf.release();\n+            }\n+\n+        } else {\n+            this.pCapWriter = new PCapWriter(this.outputStream);\n+        }\n+\n+        if (ctx.channel() instanceof SocketChannel) {\n+            if (ctx.channel() instanceof ServerChannel) {\n+                srcAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().localAddress();\n+            } else {\n+                srcAddr = (InetSocketAddress) ctx.channel().localAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+            }\n+        }\n+\n+        if (ctx.channel() instanceof SocketChannel) {\n+            logger.debug(\"Starting Fake TCP 3-Way Handshake\");\n+\n+            ByteBuf tcpBuf = ctx.alloc().buffer();\n+\n+            try {\n+                // Write SYN with Normal Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 0, 0, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.TCPFlag.SYN);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc(), ctx);\n+\n+                // Write SYN+ACK with Reversed Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 0, 1, dstAddr.getPort(), srcAddr.getPort(), TCPPacket.TCPFlag.SYN,\n+                        TCPPacket.TCPFlag.ACK);\n+                completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc(), ctx);\n+\n+                // Write ACK with Normal Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 1, 1, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc(), ctx);\n+            } finally {\n+                tcpBuf.release();\n+            }\n+\n+            logger.debug(\"Finished Fake TCP 3-Way Handshake\");\n+        }\n+\n+        super.channelActive(ctx);\n+    }\n+\n+    @Override\n+    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n+        writePacket(ctx, msg, false);\n+        super.channelRead(ctx, msg);\n+    }\n+\n+    @Override\n+    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {\n+        writePacket(ctx, msg, true);\n+        super.write(ctx, msg, promise);\n+    }\n+\n+    private void writePacket(ChannelHandlerContext ctx, Object msg, boolean isWriteOperation) {\n+        if (msg instanceof ByteBuf) {\n+\n+            // If bytes are 0 and `captureZeroByte` is false, we won't capture this.\n+            if (((ByteBuf) msg).readableBytes() == 0 && !captureZeroByte) {\n+                logger.debug(\"Discarding Zero Byte TCP Packet. isWriteOperation {}\", isWriteOperation);\n+                return;\n+            }\n+\n+            ByteBuf packet = ((ByteBuf) msg).duplicate();\n+            ByteBuf tcpBuf = ctx.alloc().buffer();\n+            int bytes = packet.readableBytes();\n+\n+            try {\n+                if (isWriteOperation) {\n+                    TCPPacket.writePacket(tcpBuf, packet, sendSegmentNumber, receiveSegmentNumber, srcAddr.getPort(),\n+                            dstAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                    completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc(), ctx);\n+                    logTCP(true, bytes, sendSegmentNumber, receiveSegmentNumber, srcAddr, dstAddr, false);\n+\n+                    sendSegmentNumber += bytes;\n+\n+                    TCPPacket.writePacket(tcpBuf, null, receiveSegmentNumber, sendSegmentNumber, dstAddr.getPort(),\n+                            srcAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                    completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc(), ctx);\n+                    logTCP(true, bytes, sendSegmentNumber, receiveSegmentNumber, dstAddr, srcAddr, true);\n+                } else {\n+                    TCPPacket.writePacket(tcpBuf, packet, receiveSegmentNumber, sendSegmentNumber, dstAddr.getPort(),\n+                            srcAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                    completeTCPWrite(dstAddr, srcAddr, tcpBuf, ctx.alloc(), ctx);\n+                    logTCP(false, bytes, receiveSegmentNumber, sendSegmentNumber, dstAddr, srcAddr, false);\n+\n+                    receiveSegmentNumber += bytes;\n+\n+                    TCPPacket.writePacket(tcpBuf, null, sendSegmentNumber, receiveSegmentNumber, srcAddr.getPort(),\n+                            dstAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                    completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc(), ctx);\n+                    logTCP(false, bytes, sendSegmentNumber, receiveSegmentNumber, srcAddr, dstAddr, true);\n+                }\n+            } finally {\n+                tcpBuf.release();\n+            }\n+\n+        } else if (msg instanceof DatagramPacket) {\n+            handleUDP(ctx, ((DatagramPacket) msg).duplicate());\n+        } else {\n+            logger.error(\"Discarding Pcap Write for Object {}\", msg);\n+        }\n+    }\n+\n+    private void logTCP(boolean isWriteOperation, int bytes, int sendSegmentNumber, int receiveSegmentNumber,\n+                        InetSocketAddress srcAddr, InetSocketAddress dstAddr, boolean ackOnly) {\n+        if (ackOnly) {\n+            logger.debug(\"Writing TCP ACK, isWriteOperation {}, Segment Number {}, Ack Number {}, Src Addr {}, \"\n+                    + \"Dst Addr {}\", isWriteOperation, sendSegmentNumber, receiveSegmentNumber, dstAddr, srcAddr);\n+        } else {\n+            logger.debug(\"Writing TCP Data of {} Bytes, isWriteOperation {}, Segment Number {}, Ack Number {}, \" +\n+                            \"Src Addr {}, Dst Addr {}\", bytes, isWriteOperation, sendSegmentNumber,\n+                    receiveSegmentNumber, srcAddr, dstAddr);\n+        }\n+    }\n+\n+    private void handleUDP(ChannelHandlerContext ctx, DatagramPacket datagramPacket) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjc0MzA0Nw=="}, "originalCommit": {"oid": "d15aa5313747d13db50d804e3b181f8d67307817"}, "originalPosition": 267}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjYwMzc3OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PcapWriteHandler.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwOTo0MTowMVrOHO_Vzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwOTo1MzozNVrOHO_zag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ3OTg4Ng==", "bodyText": "this doesn't look right... if we see an IOException here pCapWriter will be null and so we will fail with an NPE later on. I think what you should do is just release the ByteBuf, close the channel and let the exception bubble up.", "url": "https://github.com/netty/netty/pull/10498#discussion_r485479886", "createdAt": "2020-09-09T09:41:01Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/PcapWriteHandler.java", "diffHunk": "@@ -0,0 +1,522 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.ServerChannel;\n+import io.netty.channel.socket.DatagramChannel;\n+import io.netty.channel.socket.DatagramPacket;\n+import io.netty.channel.socket.ServerSocketChannel;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.util.NetUtil;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.Inet4Address;\n+import java.net.Inet6Address;\n+import java.net.InetSocketAddress;\n+\n+/**\n+ * <p> {@link PcapWriteHandler} captures {@link ByteBuf} from {@link SocketChannel} / {@link ServerChannel}\n+ * or {@link DatagramPacket} and writes it into Pcap {@link OutputStream}. </p>\n+ *\n+ * <p>\n+ * Things to keep in mind when using {@link PcapWriteHandler} with TCP:\n+ *\n+ *    <ul>\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#channelActive(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (SYN, SYN+ACK, ACK) is simulated as new connection in Pcap. </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#handlerRemoved(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (FIN+ACK, FIN+ACK, ACK) is simulated as connection shutdown in Pcap.  </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#exceptionCaught(ChannelHandlerContext, Throwable)}\n+ *        is called, a fake TCP RST is sent to simulate connection Reset in Pcap. </li>\n+ *\n+ *        <li> ACK is sent each time data is send / received. </li>\n+ *\n+ *        <li> Zero Length Data Packets can cause TCP Double ACK error in Wireshark. To tackle this,\n+ *        set {@code captureZeroByte} to {@code false}. </li>\n+ *    </ul>\n+ * </p>\n+ */\n+public final class PcapWriteHandler extends ChannelDuplexHandler {\n+\n+    private final InternalLogger logger = InternalLoggerFactory.getInstance(PcapWriteHandler.class);\n+\n+    /**\n+     * {@link PcapWriter} Instance\n+     */\n+    private PcapWriter pCapWriter;\n+\n+    /**\n+     * {@link OutputStream} where we'll write Pcap data.\n+     */\n+    private final OutputStream outputStream;\n+\n+    /**\n+     * {@code true} if we want to capture packets with zero bytes else {@code false}.\n+     */\n+    private final boolean captureZeroByte;\n+\n+    /**\n+     * {@code true} if we want to write Pcap Global Header on initialization of\n+     * {@link PcapWriter} else {@code false}.\n+     */\n+    private final boolean writePcapGlobalHeader;\n+\n+    /**\n+     * TCP Sender Segment Number.\n+     * It'll start with 1 and keep incrementing with number of bytes read/sent.\n+     */\n+    private int sendSegmentNumber = 1;\n+\n+    /**\n+     * TCP Receiver Segment Number.\n+     * It'll start with 1 and keep incrementing with number of bytes read/sent.\n+     */\n+    private int receiveSegmentNumber = 1;\n+\n+    /**\n+     * Source Address\n+     */\n+    private InetSocketAddress srcAddr;\n+\n+    /**\n+     * Destination Address\n+     */\n+    private InetSocketAddress dstAddr;\n+\n+    /**\n+     * Create new {@link PcapWriteHandler} Instance.\n+     * {@code captureZeroByte} is set to {@code false} and\n+     * {@code writePcapGlobalHeader} is set to {@code true}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     */\n+    public PcapWriteHandler(OutputStream outputStream) {\n+        this(outputStream, false, true);\n+    }\n+\n+    /**\n+     * Create new {@link PcapWriteHandler} Instance\n+     *\n+     * @param outputStream          OutputStream where Pcap data will be written\n+     * @param captureZeroByte       Set to {@code true} to enable capturing packets with empty (0 bytes) payload.\n+     *                              Otherwise, if set to {@code false}, empty packets will be filtered out.\n+     * @param writePcapGlobalHeader Set to {@code true} to write Pcap Global Header on initialization.\n+     *                              Otherwise, if set to {@code false}, Pcap Global Header will not be written\n+     *                              on initialization. This could when writing Pcap data on a existing file where\n+     *                              Pcap Global Header is already present.\n+     */\n+    public PcapWriteHandler(OutputStream outputStream, boolean captureZeroByte, boolean writePcapGlobalHeader) {\n+        this.outputStream = outputStream;\n+        this.captureZeroByte = captureZeroByte;\n+        this.writePcapGlobalHeader = writePcapGlobalHeader;\n+    }\n+\n+    @Override\n+    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+\n+        ByteBufAllocator byteBufAllocator = ctx.alloc();\n+\n+        /*\n+         * If `writePcapGlobalHeader` is `true`, we'll write Pcap Global Header.\n+         */\n+        if (writePcapGlobalHeader) {\n+\n+            ByteBuf byteBuf = byteBufAllocator.buffer();\n+            try {\n+                this.pCapWriter = new PcapWriter(this.outputStream, byteBuf);\n+            } catch (IOException ex) {\n+                ctx.fireExceptionCaught(ex);\n+            } finally {\n+                byteBuf.release();\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b733c947c7bc31a9d951e015bc5039a4be50fcae"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ4MzM4MA==", "bodyText": "Should I close the channel every time I get an exception?", "url": "https://github.com/netty/netty/pull/10498#discussion_r485483380", "createdAt": "2020-09-09T09:46:48Z", "author": {"login": "hyperxpro"}, "path": "handler/src/main/java/io/netty/handler/pcap/PcapWriteHandler.java", "diffHunk": "@@ -0,0 +1,522 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.ServerChannel;\n+import io.netty.channel.socket.DatagramChannel;\n+import io.netty.channel.socket.DatagramPacket;\n+import io.netty.channel.socket.ServerSocketChannel;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.util.NetUtil;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.Inet4Address;\n+import java.net.Inet6Address;\n+import java.net.InetSocketAddress;\n+\n+/**\n+ * <p> {@link PcapWriteHandler} captures {@link ByteBuf} from {@link SocketChannel} / {@link ServerChannel}\n+ * or {@link DatagramPacket} and writes it into Pcap {@link OutputStream}. </p>\n+ *\n+ * <p>\n+ * Things to keep in mind when using {@link PcapWriteHandler} with TCP:\n+ *\n+ *    <ul>\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#channelActive(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (SYN, SYN+ACK, ACK) is simulated as new connection in Pcap. </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#handlerRemoved(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (FIN+ACK, FIN+ACK, ACK) is simulated as connection shutdown in Pcap.  </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#exceptionCaught(ChannelHandlerContext, Throwable)}\n+ *        is called, a fake TCP RST is sent to simulate connection Reset in Pcap. </li>\n+ *\n+ *        <li> ACK is sent each time data is send / received. </li>\n+ *\n+ *        <li> Zero Length Data Packets can cause TCP Double ACK error in Wireshark. To tackle this,\n+ *        set {@code captureZeroByte} to {@code false}. </li>\n+ *    </ul>\n+ * </p>\n+ */\n+public final class PcapWriteHandler extends ChannelDuplexHandler {\n+\n+    private final InternalLogger logger = InternalLoggerFactory.getInstance(PcapWriteHandler.class);\n+\n+    /**\n+     * {@link PcapWriter} Instance\n+     */\n+    private PcapWriter pCapWriter;\n+\n+    /**\n+     * {@link OutputStream} where we'll write Pcap data.\n+     */\n+    private final OutputStream outputStream;\n+\n+    /**\n+     * {@code true} if we want to capture packets with zero bytes else {@code false}.\n+     */\n+    private final boolean captureZeroByte;\n+\n+    /**\n+     * {@code true} if we want to write Pcap Global Header on initialization of\n+     * {@link PcapWriter} else {@code false}.\n+     */\n+    private final boolean writePcapGlobalHeader;\n+\n+    /**\n+     * TCP Sender Segment Number.\n+     * It'll start with 1 and keep incrementing with number of bytes read/sent.\n+     */\n+    private int sendSegmentNumber = 1;\n+\n+    /**\n+     * TCP Receiver Segment Number.\n+     * It'll start with 1 and keep incrementing with number of bytes read/sent.\n+     */\n+    private int receiveSegmentNumber = 1;\n+\n+    /**\n+     * Source Address\n+     */\n+    private InetSocketAddress srcAddr;\n+\n+    /**\n+     * Destination Address\n+     */\n+    private InetSocketAddress dstAddr;\n+\n+    /**\n+     * Create new {@link PcapWriteHandler} Instance.\n+     * {@code captureZeroByte} is set to {@code false} and\n+     * {@code writePcapGlobalHeader} is set to {@code true}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     */\n+    public PcapWriteHandler(OutputStream outputStream) {\n+        this(outputStream, false, true);\n+    }\n+\n+    /**\n+     * Create new {@link PcapWriteHandler} Instance\n+     *\n+     * @param outputStream          OutputStream where Pcap data will be written\n+     * @param captureZeroByte       Set to {@code true} to enable capturing packets with empty (0 bytes) payload.\n+     *                              Otherwise, if set to {@code false}, empty packets will be filtered out.\n+     * @param writePcapGlobalHeader Set to {@code true} to write Pcap Global Header on initialization.\n+     *                              Otherwise, if set to {@code false}, Pcap Global Header will not be written\n+     *                              on initialization. This could when writing Pcap data on a existing file where\n+     *                              Pcap Global Header is already present.\n+     */\n+    public PcapWriteHandler(OutputStream outputStream, boolean captureZeroByte, boolean writePcapGlobalHeader) {\n+        this.outputStream = outputStream;\n+        this.captureZeroByte = captureZeroByte;\n+        this.writePcapGlobalHeader = writePcapGlobalHeader;\n+    }\n+\n+    @Override\n+    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+\n+        ByteBufAllocator byteBufAllocator = ctx.alloc();\n+\n+        /*\n+         * If `writePcapGlobalHeader` is `true`, we'll write Pcap Global Header.\n+         */\n+        if (writePcapGlobalHeader) {\n+\n+            ByteBuf byteBuf = byteBufAllocator.buffer();\n+            try {\n+                this.pCapWriter = new PcapWriter(this.outputStream, byteBuf);\n+            } catch (IOException ex) {\n+                ctx.fireExceptionCaught(ex);\n+            } finally {\n+                byteBuf.release();\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ3OTg4Ng=="}, "originalCommit": {"oid": "b733c947c7bc31a9d951e015bc5039a4be50fcae"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ4NDcxOQ==", "bodyText": "not really... its more like if you not close it here we will be in an \"invalid\" state. Alternative you could also remove this handler and log.", "url": "https://github.com/netty/netty/pull/10498#discussion_r485484719", "createdAt": "2020-09-09T09:49:01Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/PcapWriteHandler.java", "diffHunk": "@@ -0,0 +1,522 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.ServerChannel;\n+import io.netty.channel.socket.DatagramChannel;\n+import io.netty.channel.socket.DatagramPacket;\n+import io.netty.channel.socket.ServerSocketChannel;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.util.NetUtil;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.Inet4Address;\n+import java.net.Inet6Address;\n+import java.net.InetSocketAddress;\n+\n+/**\n+ * <p> {@link PcapWriteHandler} captures {@link ByteBuf} from {@link SocketChannel} / {@link ServerChannel}\n+ * or {@link DatagramPacket} and writes it into Pcap {@link OutputStream}. </p>\n+ *\n+ * <p>\n+ * Things to keep in mind when using {@link PcapWriteHandler} with TCP:\n+ *\n+ *    <ul>\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#channelActive(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (SYN, SYN+ACK, ACK) is simulated as new connection in Pcap. </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#handlerRemoved(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (FIN+ACK, FIN+ACK, ACK) is simulated as connection shutdown in Pcap.  </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#exceptionCaught(ChannelHandlerContext, Throwable)}\n+ *        is called, a fake TCP RST is sent to simulate connection Reset in Pcap. </li>\n+ *\n+ *        <li> ACK is sent each time data is send / received. </li>\n+ *\n+ *        <li> Zero Length Data Packets can cause TCP Double ACK error in Wireshark. To tackle this,\n+ *        set {@code captureZeroByte} to {@code false}. </li>\n+ *    </ul>\n+ * </p>\n+ */\n+public final class PcapWriteHandler extends ChannelDuplexHandler {\n+\n+    private final InternalLogger logger = InternalLoggerFactory.getInstance(PcapWriteHandler.class);\n+\n+    /**\n+     * {@link PcapWriter} Instance\n+     */\n+    private PcapWriter pCapWriter;\n+\n+    /**\n+     * {@link OutputStream} where we'll write Pcap data.\n+     */\n+    private final OutputStream outputStream;\n+\n+    /**\n+     * {@code true} if we want to capture packets with zero bytes else {@code false}.\n+     */\n+    private final boolean captureZeroByte;\n+\n+    /**\n+     * {@code true} if we want to write Pcap Global Header on initialization of\n+     * {@link PcapWriter} else {@code false}.\n+     */\n+    private final boolean writePcapGlobalHeader;\n+\n+    /**\n+     * TCP Sender Segment Number.\n+     * It'll start with 1 and keep incrementing with number of bytes read/sent.\n+     */\n+    private int sendSegmentNumber = 1;\n+\n+    /**\n+     * TCP Receiver Segment Number.\n+     * It'll start with 1 and keep incrementing with number of bytes read/sent.\n+     */\n+    private int receiveSegmentNumber = 1;\n+\n+    /**\n+     * Source Address\n+     */\n+    private InetSocketAddress srcAddr;\n+\n+    /**\n+     * Destination Address\n+     */\n+    private InetSocketAddress dstAddr;\n+\n+    /**\n+     * Create new {@link PcapWriteHandler} Instance.\n+     * {@code captureZeroByte} is set to {@code false} and\n+     * {@code writePcapGlobalHeader} is set to {@code true}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     */\n+    public PcapWriteHandler(OutputStream outputStream) {\n+        this(outputStream, false, true);\n+    }\n+\n+    /**\n+     * Create new {@link PcapWriteHandler} Instance\n+     *\n+     * @param outputStream          OutputStream where Pcap data will be written\n+     * @param captureZeroByte       Set to {@code true} to enable capturing packets with empty (0 bytes) payload.\n+     *                              Otherwise, if set to {@code false}, empty packets will be filtered out.\n+     * @param writePcapGlobalHeader Set to {@code true} to write Pcap Global Header on initialization.\n+     *                              Otherwise, if set to {@code false}, Pcap Global Header will not be written\n+     *                              on initialization. This could when writing Pcap data on a existing file where\n+     *                              Pcap Global Header is already present.\n+     */\n+    public PcapWriteHandler(OutputStream outputStream, boolean captureZeroByte, boolean writePcapGlobalHeader) {\n+        this.outputStream = outputStream;\n+        this.captureZeroByte = captureZeroByte;\n+        this.writePcapGlobalHeader = writePcapGlobalHeader;\n+    }\n+\n+    @Override\n+    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+\n+        ByteBufAllocator byteBufAllocator = ctx.alloc();\n+\n+        /*\n+         * If `writePcapGlobalHeader` is `true`, we'll write Pcap Global Header.\n+         */\n+        if (writePcapGlobalHeader) {\n+\n+            ByteBuf byteBuf = byteBufAllocator.buffer();\n+            try {\n+                this.pCapWriter = new PcapWriter(this.outputStream, byteBuf);\n+            } catch (IOException ex) {\n+                ctx.fireExceptionCaught(ex);\n+            } finally {\n+                byteBuf.release();\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ3OTg4Ng=="}, "originalCommit": {"oid": "b733c947c7bc31a9d951e015bc5039a4be50fcae"}, "originalPosition": 155}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ4NzQ2Ng==", "bodyText": "Done, PTAL. :)", "url": "https://github.com/netty/netty/pull/10498#discussion_r485487466", "createdAt": "2020-09-09T09:53:35Z", "author": {"login": "hyperxpro"}, "path": "handler/src/main/java/io/netty/handler/pcap/PcapWriteHandler.java", "diffHunk": "@@ -0,0 +1,522 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.ServerChannel;\n+import io.netty.channel.socket.DatagramChannel;\n+import io.netty.channel.socket.DatagramPacket;\n+import io.netty.channel.socket.ServerSocketChannel;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.util.NetUtil;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.Inet4Address;\n+import java.net.Inet6Address;\n+import java.net.InetSocketAddress;\n+\n+/**\n+ * <p> {@link PcapWriteHandler} captures {@link ByteBuf} from {@link SocketChannel} / {@link ServerChannel}\n+ * or {@link DatagramPacket} and writes it into Pcap {@link OutputStream}. </p>\n+ *\n+ * <p>\n+ * Things to keep in mind when using {@link PcapWriteHandler} with TCP:\n+ *\n+ *    <ul>\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#channelActive(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (SYN, SYN+ACK, ACK) is simulated as new connection in Pcap. </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#handlerRemoved(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (FIN+ACK, FIN+ACK, ACK) is simulated as connection shutdown in Pcap.  </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#exceptionCaught(ChannelHandlerContext, Throwable)}\n+ *        is called, a fake TCP RST is sent to simulate connection Reset in Pcap. </li>\n+ *\n+ *        <li> ACK is sent each time data is send / received. </li>\n+ *\n+ *        <li> Zero Length Data Packets can cause TCP Double ACK error in Wireshark. To tackle this,\n+ *        set {@code captureZeroByte} to {@code false}. </li>\n+ *    </ul>\n+ * </p>\n+ */\n+public final class PcapWriteHandler extends ChannelDuplexHandler {\n+\n+    private final InternalLogger logger = InternalLoggerFactory.getInstance(PcapWriteHandler.class);\n+\n+    /**\n+     * {@link PcapWriter} Instance\n+     */\n+    private PcapWriter pCapWriter;\n+\n+    /**\n+     * {@link OutputStream} where we'll write Pcap data.\n+     */\n+    private final OutputStream outputStream;\n+\n+    /**\n+     * {@code true} if we want to capture packets with zero bytes else {@code false}.\n+     */\n+    private final boolean captureZeroByte;\n+\n+    /**\n+     * {@code true} if we want to write Pcap Global Header on initialization of\n+     * {@link PcapWriter} else {@code false}.\n+     */\n+    private final boolean writePcapGlobalHeader;\n+\n+    /**\n+     * TCP Sender Segment Number.\n+     * It'll start with 1 and keep incrementing with number of bytes read/sent.\n+     */\n+    private int sendSegmentNumber = 1;\n+\n+    /**\n+     * TCP Receiver Segment Number.\n+     * It'll start with 1 and keep incrementing with number of bytes read/sent.\n+     */\n+    private int receiveSegmentNumber = 1;\n+\n+    /**\n+     * Source Address\n+     */\n+    private InetSocketAddress srcAddr;\n+\n+    /**\n+     * Destination Address\n+     */\n+    private InetSocketAddress dstAddr;\n+\n+    /**\n+     * Create new {@link PcapWriteHandler} Instance.\n+     * {@code captureZeroByte} is set to {@code false} and\n+     * {@code writePcapGlobalHeader} is set to {@code true}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     */\n+    public PcapWriteHandler(OutputStream outputStream) {\n+        this(outputStream, false, true);\n+    }\n+\n+    /**\n+     * Create new {@link PcapWriteHandler} Instance\n+     *\n+     * @param outputStream          OutputStream where Pcap data will be written\n+     * @param captureZeroByte       Set to {@code true} to enable capturing packets with empty (0 bytes) payload.\n+     *                              Otherwise, if set to {@code false}, empty packets will be filtered out.\n+     * @param writePcapGlobalHeader Set to {@code true} to write Pcap Global Header on initialization.\n+     *                              Otherwise, if set to {@code false}, Pcap Global Header will not be written\n+     *                              on initialization. This could when writing Pcap data on a existing file where\n+     *                              Pcap Global Header is already present.\n+     */\n+    public PcapWriteHandler(OutputStream outputStream, boolean captureZeroByte, boolean writePcapGlobalHeader) {\n+        this.outputStream = outputStream;\n+        this.captureZeroByte = captureZeroByte;\n+        this.writePcapGlobalHeader = writePcapGlobalHeader;\n+    }\n+\n+    @Override\n+    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+\n+        ByteBufAllocator byteBufAllocator = ctx.alloc();\n+\n+        /*\n+         * If `writePcapGlobalHeader` is `true`, we'll write Pcap Global Header.\n+         */\n+        if (writePcapGlobalHeader) {\n+\n+            ByteBuf byteBuf = byteBufAllocator.buffer();\n+            try {\n+                this.pCapWriter = new PcapWriter(this.outputStream, byteBuf);\n+            } catch (IOException ex) {\n+                ctx.fireExceptionCaught(ex);\n+            } finally {\n+                byteBuf.release();\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ3OTg4Ng=="}, "originalCommit": {"oid": "b733c947c7bc31a9d951e015bc5039a4be50fcae"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjY0NDkwOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwOTo1MTo1OVrOHO_v0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQwOTo1MTo1OVrOHO_v0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ4NjU0Ng==", "bodyText": "I think these \"Discarding\u2026\" messages, here and in TCP and UDP, should be logged as info, since error might lead someone to be paged at night. I'm not sure how Netty normally uses log levels, though. What do you think, @normanmaurer.", "url": "https://github.com/netty/netty/pull/10498#discussion_r485486546", "createdAt": "2020-09-09T09:51:59Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/pcap/PCAPWriteHandler.java", "diffHunk": "@@ -185,24 +187,42 @@ public void channelActive(ChannelHandlerContext ctx) throws Exception {\n             }\n \n             logger.debug(\"Finished Fake TCP 3-Way Handshake\");\n+        } else if (ctx.channel() instanceof DatagramChannel) {\n+            DatagramChannel datagramChannel = (DatagramChannel) ctx.channel();\n+            if (datagramChannel.isConnected()) {\n+                srcAddr = (InetSocketAddress) ctx.channel().localAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+            }\n         }\n \n         super.channelActive(ctx);\n     }\n \n     @Override\n     public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n-        writePacket(ctx, msg, false);\n+        if (ctx.channel() instanceof SocketChannel) {\n+            handleTCP(ctx, msg, false);\n+        } else if (ctx.channel() instanceof DatagramChannel) {\n+            handleUDP(ctx, msg);\n+        } else {\n+            logger.error(\"Discarding Pcap Write for Unknown Channel: {}\", ctx.channel());\n+        }\n         super.channelRead(ctx, msg);\n     }\n \n     @Override\n     public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {\n-        writePacket(ctx, msg, true);\n+        if (ctx.channel() instanceof SocketChannel) {\n+            handleTCP(ctx, msg, true);\n+        } else if (ctx.channel() instanceof DatagramChannel) {\n+            handleUDP(ctx, msg);\n+        } else {\n+            logger.error(\"Discarding Pcap Write for Unknown Channel: {}\", ctx.channel());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "89628fc0d487dd64f04aeaa6a754cffed7189dfa"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjY4NzA0OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PcapWriteHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDowMzoxM1rOHPAJwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDowMzoxM1rOHPAJwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ5MzE4NA==", "bodyText": "Harmless, but no need to declare NPE on the signature; just declaring in the javadoc is good enough.", "url": "https://github.com/netty/netty/pull/10498#discussion_r485493184", "createdAt": "2020-09-09T10:03:13Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/pcap/PcapWriteHandler.java", "diffHunk": "@@ -114,8 +114,10 @@\n      * {@code writePcapGlobalHeader} is set to {@code true}.\n      *\n      * @param outputStream OutputStream where Pcap data will be written\n+     * @throws NullPointerException If {@link OutputStream} is {@code null} then we'll throw an\n+     *                              {@link NullPointerException}\n      */\n-    public PcapWriteHandler(OutputStream outputStream) {\n+    public PcapWriteHandler(OutputStream outputStream) throws NullPointerException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "467ca1852573aa0802f47d63d99d8aec6e1b42c0"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjcxNDcwOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PcapWriteHandler.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDoxMDoyNlrOHPAaqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDoxNDoyMlrOHPAjWQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ5NzUxNQ==", "bodyText": "I think these \"Discarding\u2026\" messages, here and in TCP and UDP, should be logged as info I think, since error might lead someone to be paged at night. I'm not sure how Netty normally uses log levels, though. What do you think, @normanmaurer.", "url": "https://github.com/netty/netty/pull/10498#discussion_r485497515", "createdAt": "2020-09-09T10:10:26Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/pcap/PcapWriteHandler.java", "diffHunk": "@@ -0,0 +1,532 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.ServerChannel;\n+import io.netty.channel.socket.DatagramChannel;\n+import io.netty.channel.socket.DatagramPacket;\n+import io.netty.channel.socket.ServerSocketChannel;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.util.NetUtil;\n+import io.netty.util.internal.ObjectUtil;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.Inet4Address;\n+import java.net.Inet6Address;\n+import java.net.InetSocketAddress;\n+\n+/**\n+ * <p> {@link PcapWriteHandler} captures {@link ByteBuf} from {@link SocketChannel} / {@link ServerChannel}\n+ * or {@link DatagramPacket} and writes it into Pcap {@link OutputStream}. </p>\n+ *\n+ * <p>\n+ * Things to keep in mind when using {@link PcapWriteHandler} with TCP:\n+ *\n+ *    <ul>\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#channelActive(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (SYN, SYN+ACK, ACK) is simulated as new connection in Pcap. </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#handlerRemoved(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (FIN+ACK, FIN+ACK, ACK) is simulated as connection shutdown in Pcap.  </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#exceptionCaught(ChannelHandlerContext, Throwable)}\n+ *        is called, a fake TCP RST is sent to simulate connection Reset in Pcap. </li>\n+ *\n+ *        <li> ACK is sent each time data is send / received. </li>\n+ *\n+ *        <li> Zero Length Data Packets can cause TCP Double ACK error in Wireshark. To tackle this,\n+ *        set {@code captureZeroByte} to {@code false}. </li>\n+ *    </ul>\n+ * </p>\n+ */\n+public final class PcapWriteHandler extends ChannelDuplexHandler {\n+\n+    private final InternalLogger logger = InternalLoggerFactory.getInstance(PcapWriteHandler.class);\n+\n+    /**\n+     * {@link PcapWriter} Instance\n+     */\n+    private PcapWriter pCapWriter;\n+\n+    /**\n+     * {@link OutputStream} where we'll write Pcap data.\n+     */\n+    private final OutputStream outputStream;\n+\n+    /**\n+     * {@code true} if we want to capture packets with zero bytes else {@code false}.\n+     */\n+    private final boolean captureZeroByte;\n+\n+    /**\n+     * {@code true} if we want to write Pcap Global Header on initialization of\n+     * {@link PcapWriter} else {@code false}.\n+     */\n+    private final boolean writePcapGlobalHeader;\n+\n+    /**\n+     * TCP Sender Segment Number.\n+     * It'll start with 1 and keep incrementing with number of bytes read/sent.\n+     */\n+    private int sendSegmentNumber = 1;\n+\n+    /**\n+     * TCP Receiver Segment Number.\n+     * It'll start with 1 and keep incrementing with number of bytes read/sent.\n+     */\n+    private int receiveSegmentNumber = 1;\n+\n+    /**\n+     * Source Address\n+     */\n+    private InetSocketAddress srcAddr;\n+\n+    /**\n+     * Destination Address\n+     */\n+    private InetSocketAddress dstAddr;\n+\n+    /**\n+     * Create new {@link PcapWriteHandler} Instance.\n+     * {@code captureZeroByte} is set to {@code false} and\n+     * {@code writePcapGlobalHeader} is set to {@code true}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     * @throws NullPointerException If {@link OutputStream} is {@code null} then we'll throw an\n+     *                              {@link NullPointerException}\n+     */\n+    public PcapWriteHandler(OutputStream outputStream) throws NullPointerException {\n+        this(outputStream, false, true);\n+    }\n+\n+    /**\n+     * Create new {@link PcapWriteHandler} Instance\n+     *\n+     * @param outputStream          OutputStream where Pcap data will be written\n+     * @param captureZeroByte       Set to {@code true} to enable capturing packets with empty (0 bytes) payload.\n+     *                              Otherwise, if set to {@code false}, empty packets will be filtered out.\n+     * @param writePcapGlobalHeader Set to {@code true} to write Pcap Global Header on initialization.\n+     *                              Otherwise, if set to {@code false}, Pcap Global Header will not be written\n+     *                              on initialization. This could when writing Pcap data on a existing file where\n+     *                              Pcap Global Header is already present.\n+     * @throws NullPointerException If {@link OutputStream} is {@code null} then we'll throw an\n+     *                              {@link NullPointerException}\n+     */\n+    public PcapWriteHandler(OutputStream outputStream, boolean captureZeroByte, boolean writePcapGlobalHeader)\n+            throws NullPointerException {\n+        this.outputStream = ObjectUtil.checkNotNull(outputStream, \"OutputStream\");\n+        this.captureZeroByte = captureZeroByte;\n+        this.writePcapGlobalHeader = writePcapGlobalHeader;\n+    }\n+\n+    @Override\n+    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+\n+        ByteBufAllocator byteBufAllocator = ctx.alloc();\n+\n+        /*\n+         * If `writePcapGlobalHeader` is `true`, we'll write Pcap Global Header.\n+         */\n+        if (writePcapGlobalHeader) {\n+\n+            ByteBuf byteBuf = byteBufAllocator.buffer();\n+            try {\n+                this.pCapWriter = new PcapWriter(this.outputStream, byteBuf);\n+            } catch (IOException ex) {\n+                ctx.channel().close();\n+                ctx.fireExceptionCaught(ex);\n+                logger.error(\"Caught Exception While Initializing PcapWriter, Closing Channel.\", ex);\n+            } finally {\n+                byteBuf.release();\n+            }\n+        } else {\n+            this.pCapWriter = new PcapWriter(this.outputStream);\n+        }\n+\n+        // If Channel belongs to `SocketChannel` then we're handling TCP.\n+        if (ctx.channel() instanceof SocketChannel) {\n+\n+            // Capture correct `localAddress` and `remoteAddress`\n+            if (ctx.channel().parent() instanceof ServerSocketChannel) {\n+                srcAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().localAddress();\n+            } else {\n+                srcAddr = (InetSocketAddress) ctx.channel().localAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+            }\n+\n+            logger.debug(\"Initiating Fake TCP 3-Way Handshake\");\n+\n+            ByteBuf tcpBuf = byteBufAllocator.buffer();\n+\n+            try {\n+                // Write SYN with Normal Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 0, 0, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.TCPFlag.SYN);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, byteBufAllocator, ctx);\n+\n+                // Write SYN+ACK with Reversed Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 0, 1, dstAddr.getPort(), srcAddr.getPort(), TCPPacket.TCPFlag.SYN,\n+                        TCPPacket.TCPFlag.ACK);\n+                completeTCPWrite(dstAddr, srcAddr, tcpBuf, byteBufAllocator, ctx);\n+\n+                // Write ACK with Normal Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 1, 1, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, byteBufAllocator, ctx);\n+            } finally {\n+                tcpBuf.release();\n+            }\n+\n+            logger.debug(\"Finished Fake TCP 3-Way Handshake\");\n+        } else if (ctx.channel() instanceof DatagramChannel) {\n+            DatagramChannel datagramChannel = (DatagramChannel) ctx.channel();\n+\n+            // If `DatagramChannel` is connected then we can get\n+            // `localAddress` and `remoteAddress` from Channel.\n+            if (datagramChannel.isConnected()) {\n+                srcAddr = (InetSocketAddress) ctx.channel().localAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+            }\n+        }\n+\n+        super.channelActive(ctx);\n+    }\n+\n+    @Override\n+    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n+        if (ctx.channel() instanceof SocketChannel) {\n+            handleTCP(ctx, msg, false);\n+        } else if (ctx.channel() instanceof DatagramChannel) {\n+            handleUDP(ctx, msg);\n+        } else {\n+            logger.error(\"Discarding Pcap Write for Unknown Channel Type: {}\", ctx.channel());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "782d8e09200bde3e42e32f13dd87c259b457df96"}, "originalPosition": 223}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ5ODU2MA==", "bodyText": "yeah or even debug...", "url": "https://github.com/netty/netty/pull/10498#discussion_r485498560", "createdAt": "2020-09-09T10:12:18Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/pcap/PcapWriteHandler.java", "diffHunk": "@@ -0,0 +1,532 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.ServerChannel;\n+import io.netty.channel.socket.DatagramChannel;\n+import io.netty.channel.socket.DatagramPacket;\n+import io.netty.channel.socket.ServerSocketChannel;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.util.NetUtil;\n+import io.netty.util.internal.ObjectUtil;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.Inet4Address;\n+import java.net.Inet6Address;\n+import java.net.InetSocketAddress;\n+\n+/**\n+ * <p> {@link PcapWriteHandler} captures {@link ByteBuf} from {@link SocketChannel} / {@link ServerChannel}\n+ * or {@link DatagramPacket} and writes it into Pcap {@link OutputStream}. </p>\n+ *\n+ * <p>\n+ * Things to keep in mind when using {@link PcapWriteHandler} with TCP:\n+ *\n+ *    <ul>\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#channelActive(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (SYN, SYN+ACK, ACK) is simulated as new connection in Pcap. </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#handlerRemoved(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (FIN+ACK, FIN+ACK, ACK) is simulated as connection shutdown in Pcap.  </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#exceptionCaught(ChannelHandlerContext, Throwable)}\n+ *        is called, a fake TCP RST is sent to simulate connection Reset in Pcap. </li>\n+ *\n+ *        <li> ACK is sent each time data is send / received. </li>\n+ *\n+ *        <li> Zero Length Data Packets can cause TCP Double ACK error in Wireshark. To tackle this,\n+ *        set {@code captureZeroByte} to {@code false}. </li>\n+ *    </ul>\n+ * </p>\n+ */\n+public final class PcapWriteHandler extends ChannelDuplexHandler {\n+\n+    private final InternalLogger logger = InternalLoggerFactory.getInstance(PcapWriteHandler.class);\n+\n+    /**\n+     * {@link PcapWriter} Instance\n+     */\n+    private PcapWriter pCapWriter;\n+\n+    /**\n+     * {@link OutputStream} where we'll write Pcap data.\n+     */\n+    private final OutputStream outputStream;\n+\n+    /**\n+     * {@code true} if we want to capture packets with zero bytes else {@code false}.\n+     */\n+    private final boolean captureZeroByte;\n+\n+    /**\n+     * {@code true} if we want to write Pcap Global Header on initialization of\n+     * {@link PcapWriter} else {@code false}.\n+     */\n+    private final boolean writePcapGlobalHeader;\n+\n+    /**\n+     * TCP Sender Segment Number.\n+     * It'll start with 1 and keep incrementing with number of bytes read/sent.\n+     */\n+    private int sendSegmentNumber = 1;\n+\n+    /**\n+     * TCP Receiver Segment Number.\n+     * It'll start with 1 and keep incrementing with number of bytes read/sent.\n+     */\n+    private int receiveSegmentNumber = 1;\n+\n+    /**\n+     * Source Address\n+     */\n+    private InetSocketAddress srcAddr;\n+\n+    /**\n+     * Destination Address\n+     */\n+    private InetSocketAddress dstAddr;\n+\n+    /**\n+     * Create new {@link PcapWriteHandler} Instance.\n+     * {@code captureZeroByte} is set to {@code false} and\n+     * {@code writePcapGlobalHeader} is set to {@code true}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     * @throws NullPointerException If {@link OutputStream} is {@code null} then we'll throw an\n+     *                              {@link NullPointerException}\n+     */\n+    public PcapWriteHandler(OutputStream outputStream) throws NullPointerException {\n+        this(outputStream, false, true);\n+    }\n+\n+    /**\n+     * Create new {@link PcapWriteHandler} Instance\n+     *\n+     * @param outputStream          OutputStream where Pcap data will be written\n+     * @param captureZeroByte       Set to {@code true} to enable capturing packets with empty (0 bytes) payload.\n+     *                              Otherwise, if set to {@code false}, empty packets will be filtered out.\n+     * @param writePcapGlobalHeader Set to {@code true} to write Pcap Global Header on initialization.\n+     *                              Otherwise, if set to {@code false}, Pcap Global Header will not be written\n+     *                              on initialization. This could when writing Pcap data on a existing file where\n+     *                              Pcap Global Header is already present.\n+     * @throws NullPointerException If {@link OutputStream} is {@code null} then we'll throw an\n+     *                              {@link NullPointerException}\n+     */\n+    public PcapWriteHandler(OutputStream outputStream, boolean captureZeroByte, boolean writePcapGlobalHeader)\n+            throws NullPointerException {\n+        this.outputStream = ObjectUtil.checkNotNull(outputStream, \"OutputStream\");\n+        this.captureZeroByte = captureZeroByte;\n+        this.writePcapGlobalHeader = writePcapGlobalHeader;\n+    }\n+\n+    @Override\n+    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+\n+        ByteBufAllocator byteBufAllocator = ctx.alloc();\n+\n+        /*\n+         * If `writePcapGlobalHeader` is `true`, we'll write Pcap Global Header.\n+         */\n+        if (writePcapGlobalHeader) {\n+\n+            ByteBuf byteBuf = byteBufAllocator.buffer();\n+            try {\n+                this.pCapWriter = new PcapWriter(this.outputStream, byteBuf);\n+            } catch (IOException ex) {\n+                ctx.channel().close();\n+                ctx.fireExceptionCaught(ex);\n+                logger.error(\"Caught Exception While Initializing PcapWriter, Closing Channel.\", ex);\n+            } finally {\n+                byteBuf.release();\n+            }\n+        } else {\n+            this.pCapWriter = new PcapWriter(this.outputStream);\n+        }\n+\n+        // If Channel belongs to `SocketChannel` then we're handling TCP.\n+        if (ctx.channel() instanceof SocketChannel) {\n+\n+            // Capture correct `localAddress` and `remoteAddress`\n+            if (ctx.channel().parent() instanceof ServerSocketChannel) {\n+                srcAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().localAddress();\n+            } else {\n+                srcAddr = (InetSocketAddress) ctx.channel().localAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+            }\n+\n+            logger.debug(\"Initiating Fake TCP 3-Way Handshake\");\n+\n+            ByteBuf tcpBuf = byteBufAllocator.buffer();\n+\n+            try {\n+                // Write SYN with Normal Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 0, 0, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.TCPFlag.SYN);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, byteBufAllocator, ctx);\n+\n+                // Write SYN+ACK with Reversed Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 0, 1, dstAddr.getPort(), srcAddr.getPort(), TCPPacket.TCPFlag.SYN,\n+                        TCPPacket.TCPFlag.ACK);\n+                completeTCPWrite(dstAddr, srcAddr, tcpBuf, byteBufAllocator, ctx);\n+\n+                // Write ACK with Normal Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 1, 1, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, byteBufAllocator, ctx);\n+            } finally {\n+                tcpBuf.release();\n+            }\n+\n+            logger.debug(\"Finished Fake TCP 3-Way Handshake\");\n+        } else if (ctx.channel() instanceof DatagramChannel) {\n+            DatagramChannel datagramChannel = (DatagramChannel) ctx.channel();\n+\n+            // If `DatagramChannel` is connected then we can get\n+            // `localAddress` and `remoteAddress` from Channel.\n+            if (datagramChannel.isConnected()) {\n+                srcAddr = (InetSocketAddress) ctx.channel().localAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+            }\n+        }\n+\n+        super.channelActive(ctx);\n+    }\n+\n+    @Override\n+    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n+        if (ctx.channel() instanceof SocketChannel) {\n+            handleTCP(ctx, msg, false);\n+        } else if (ctx.channel() instanceof DatagramChannel) {\n+            handleUDP(ctx, msg);\n+        } else {\n+            logger.error(\"Discarding Pcap Write for Unknown Channel Type: {}\", ctx.channel());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ5NzUxNQ=="}, "originalCommit": {"oid": "782d8e09200bde3e42e32f13dd87c259b457df96"}, "originalPosition": 223}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ5OTczNw==", "bodyText": "Done!", "url": "https://github.com/netty/netty/pull/10498#discussion_r485499737", "createdAt": "2020-09-09T10:14:22Z", "author": {"login": "hyperxpro"}, "path": "handler/src/main/java/io/netty/handler/pcap/PcapWriteHandler.java", "diffHunk": "@@ -0,0 +1,532 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.ServerChannel;\n+import io.netty.channel.socket.DatagramChannel;\n+import io.netty.channel.socket.DatagramPacket;\n+import io.netty.channel.socket.ServerSocketChannel;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.util.NetUtil;\n+import io.netty.util.internal.ObjectUtil;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.Inet4Address;\n+import java.net.Inet6Address;\n+import java.net.InetSocketAddress;\n+\n+/**\n+ * <p> {@link PcapWriteHandler} captures {@link ByteBuf} from {@link SocketChannel} / {@link ServerChannel}\n+ * or {@link DatagramPacket} and writes it into Pcap {@link OutputStream}. </p>\n+ *\n+ * <p>\n+ * Things to keep in mind when using {@link PcapWriteHandler} with TCP:\n+ *\n+ *    <ul>\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#channelActive(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (SYN, SYN+ACK, ACK) is simulated as new connection in Pcap. </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#handlerRemoved(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (FIN+ACK, FIN+ACK, ACK) is simulated as connection shutdown in Pcap.  </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#exceptionCaught(ChannelHandlerContext, Throwable)}\n+ *        is called, a fake TCP RST is sent to simulate connection Reset in Pcap. </li>\n+ *\n+ *        <li> ACK is sent each time data is send / received. </li>\n+ *\n+ *        <li> Zero Length Data Packets can cause TCP Double ACK error in Wireshark. To tackle this,\n+ *        set {@code captureZeroByte} to {@code false}. </li>\n+ *    </ul>\n+ * </p>\n+ */\n+public final class PcapWriteHandler extends ChannelDuplexHandler {\n+\n+    private final InternalLogger logger = InternalLoggerFactory.getInstance(PcapWriteHandler.class);\n+\n+    /**\n+     * {@link PcapWriter} Instance\n+     */\n+    private PcapWriter pCapWriter;\n+\n+    /**\n+     * {@link OutputStream} where we'll write Pcap data.\n+     */\n+    private final OutputStream outputStream;\n+\n+    /**\n+     * {@code true} if we want to capture packets with zero bytes else {@code false}.\n+     */\n+    private final boolean captureZeroByte;\n+\n+    /**\n+     * {@code true} if we want to write Pcap Global Header on initialization of\n+     * {@link PcapWriter} else {@code false}.\n+     */\n+    private final boolean writePcapGlobalHeader;\n+\n+    /**\n+     * TCP Sender Segment Number.\n+     * It'll start with 1 and keep incrementing with number of bytes read/sent.\n+     */\n+    private int sendSegmentNumber = 1;\n+\n+    /**\n+     * TCP Receiver Segment Number.\n+     * It'll start with 1 and keep incrementing with number of bytes read/sent.\n+     */\n+    private int receiveSegmentNumber = 1;\n+\n+    /**\n+     * Source Address\n+     */\n+    private InetSocketAddress srcAddr;\n+\n+    /**\n+     * Destination Address\n+     */\n+    private InetSocketAddress dstAddr;\n+\n+    /**\n+     * Create new {@link PcapWriteHandler} Instance.\n+     * {@code captureZeroByte} is set to {@code false} and\n+     * {@code writePcapGlobalHeader} is set to {@code true}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     * @throws NullPointerException If {@link OutputStream} is {@code null} then we'll throw an\n+     *                              {@link NullPointerException}\n+     */\n+    public PcapWriteHandler(OutputStream outputStream) throws NullPointerException {\n+        this(outputStream, false, true);\n+    }\n+\n+    /**\n+     * Create new {@link PcapWriteHandler} Instance\n+     *\n+     * @param outputStream          OutputStream where Pcap data will be written\n+     * @param captureZeroByte       Set to {@code true} to enable capturing packets with empty (0 bytes) payload.\n+     *                              Otherwise, if set to {@code false}, empty packets will be filtered out.\n+     * @param writePcapGlobalHeader Set to {@code true} to write Pcap Global Header on initialization.\n+     *                              Otherwise, if set to {@code false}, Pcap Global Header will not be written\n+     *                              on initialization. This could when writing Pcap data on a existing file where\n+     *                              Pcap Global Header is already present.\n+     * @throws NullPointerException If {@link OutputStream} is {@code null} then we'll throw an\n+     *                              {@link NullPointerException}\n+     */\n+    public PcapWriteHandler(OutputStream outputStream, boolean captureZeroByte, boolean writePcapGlobalHeader)\n+            throws NullPointerException {\n+        this.outputStream = ObjectUtil.checkNotNull(outputStream, \"OutputStream\");\n+        this.captureZeroByte = captureZeroByte;\n+        this.writePcapGlobalHeader = writePcapGlobalHeader;\n+    }\n+\n+    @Override\n+    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+\n+        ByteBufAllocator byteBufAllocator = ctx.alloc();\n+\n+        /*\n+         * If `writePcapGlobalHeader` is `true`, we'll write Pcap Global Header.\n+         */\n+        if (writePcapGlobalHeader) {\n+\n+            ByteBuf byteBuf = byteBufAllocator.buffer();\n+            try {\n+                this.pCapWriter = new PcapWriter(this.outputStream, byteBuf);\n+            } catch (IOException ex) {\n+                ctx.channel().close();\n+                ctx.fireExceptionCaught(ex);\n+                logger.error(\"Caught Exception While Initializing PcapWriter, Closing Channel.\", ex);\n+            } finally {\n+                byteBuf.release();\n+            }\n+        } else {\n+            this.pCapWriter = new PcapWriter(this.outputStream);\n+        }\n+\n+        // If Channel belongs to `SocketChannel` then we're handling TCP.\n+        if (ctx.channel() instanceof SocketChannel) {\n+\n+            // Capture correct `localAddress` and `remoteAddress`\n+            if (ctx.channel().parent() instanceof ServerSocketChannel) {\n+                srcAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().localAddress();\n+            } else {\n+                srcAddr = (InetSocketAddress) ctx.channel().localAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+            }\n+\n+            logger.debug(\"Initiating Fake TCP 3-Way Handshake\");\n+\n+            ByteBuf tcpBuf = byteBufAllocator.buffer();\n+\n+            try {\n+                // Write SYN with Normal Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 0, 0, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.TCPFlag.SYN);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, byteBufAllocator, ctx);\n+\n+                // Write SYN+ACK with Reversed Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 0, 1, dstAddr.getPort(), srcAddr.getPort(), TCPPacket.TCPFlag.SYN,\n+                        TCPPacket.TCPFlag.ACK);\n+                completeTCPWrite(dstAddr, srcAddr, tcpBuf, byteBufAllocator, ctx);\n+\n+                // Write ACK with Normal Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 1, 1, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, byteBufAllocator, ctx);\n+            } finally {\n+                tcpBuf.release();\n+            }\n+\n+            logger.debug(\"Finished Fake TCP 3-Way Handshake\");\n+        } else if (ctx.channel() instanceof DatagramChannel) {\n+            DatagramChannel datagramChannel = (DatagramChannel) ctx.channel();\n+\n+            // If `DatagramChannel` is connected then we can get\n+            // `localAddress` and `remoteAddress` from Channel.\n+            if (datagramChannel.isConnected()) {\n+                srcAddr = (InetSocketAddress) ctx.channel().localAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+            }\n+        }\n+\n+        super.channelActive(ctx);\n+    }\n+\n+    @Override\n+    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n+        if (ctx.channel() instanceof SocketChannel) {\n+            handleTCP(ctx, msg, false);\n+        } else if (ctx.channel() instanceof DatagramChannel) {\n+            handleUDP(ctx, msg);\n+        } else {\n+            logger.error(\"Discarding Pcap Write for Unknown Channel Type: {}\", ctx.channel());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ5NzUxNQ=="}, "originalCommit": {"oid": "782d8e09200bde3e42e32f13dd87c259b457df96"}, "originalPosition": 223}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNjg0MjE0OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/EthernetPacket.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDo0ODowMlrOHPBnXw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMTo1OToyOVrOHPD5Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUxNzE1MQ==", "bodyText": "Sorry maybe I miss something but I think for V6 we will have overflow here", "url": "https://github.com/netty/netty/pull/10498#discussion_r485517151", "createdAt": "2020-09-09T10:48:02Z", "author": {"login": "amizurov"}, "path": "handler/src/main/java/io/netty/handler/pcap/EthernetPacket.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+final class EthernetPacket {\n+\n+    /**\n+     * MAC Address: 00:00:5E:00:53:00\n+     */\n+    private static final byte[] DUMMY_SOURCE_MAC_ADDRESS = new byte[]{0, 0, 94, 0, 83, 0};\n+\n+    /**\n+     * MAC Address: 00:00:5E:00:53:FF\n+     */\n+    private static final byte[] DUMMY_DESTINATION_MAC_ADDRESS = new byte[]{0, 0, 94, 0, 83, -1};\n+\n+    /**\n+     * IPv4\n+     */\n+    private static final int V4 = 0x0800;\n+\n+    /**\n+     * IPv6\n+     */\n+    private static final int V6 = 0x86dd;\n+\n+    private EthernetPacket() {\n+        // Prevent outside initialization\n+    }\n+\n+    /**\n+     * Write IPv4 Ethernet Packet. It uses a dummy MAC address for both source and destination.\n+     *\n+     * @param byteBuf ByteBuf where Ethernet Packet data will be set\n+     * @param payload Payload of IPv4\n+     */\n+    static void writeIPv4(ByteBuf byteBuf, ByteBuf payload) {\n+        EthernetPacket.writePacket(byteBuf, payload, DUMMY_SOURCE_MAC_ADDRESS, DUMMY_DESTINATION_MAC_ADDRESS, V4);\n+    }\n+\n+    /**\n+     * Write IPv6 Ethernet Packet. It uses a dummy MAC address for both source and destination.\n+     *\n+     * @param byteBuf ByteBuf where Ethernet Packet data will be set\n+     * @param payload Payload of IPv6\n+     */\n+    static void writeIPv6(ByteBuf byteBuf, ByteBuf payload) {\n+        EthernetPacket.writePacket(byteBuf, payload, DUMMY_SOURCE_MAC_ADDRESS, DUMMY_DESTINATION_MAC_ADDRESS, V6);\n+    }\n+\n+    /**\n+     * Write IPv6 Ethernet Packet\n+     *\n+     * @param byteBuf    ByteBuf where Ethernet Packet data will be set\n+     * @param payload    Payload of IPv6\n+     * @param srcAddress Source MAC Address\n+     * @param dstAddress Destination MAC Address\n+     * @param type       Type of Frame\n+     */\n+    private static void writePacket(ByteBuf byteBuf, ByteBuf payload, byte[] srcAddress, byte[] dstAddress, int type) {\n+        byteBuf.writeBytes(dstAddress); // Destination MAC Address\n+        byteBuf.writeBytes(srcAddress); // Source MAC Address\n+        byteBuf.writeShort(type);       // Frame Type (IPv4 or IPv6)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a313affb01402aa5cffa51c22e9ed62c9c44ea1"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUxODM3Ng==", "bodyText": "No. it won't. This is IPv4 0x0800 and this is IPv6 0x86dd.", "url": "https://github.com/netty/netty/pull/10498#discussion_r485518376", "createdAt": "2020-09-09T10:50:30Z", "author": {"login": "hyperxpro"}, "path": "handler/src/main/java/io/netty/handler/pcap/EthernetPacket.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+final class EthernetPacket {\n+\n+    /**\n+     * MAC Address: 00:00:5E:00:53:00\n+     */\n+    private static final byte[] DUMMY_SOURCE_MAC_ADDRESS = new byte[]{0, 0, 94, 0, 83, 0};\n+\n+    /**\n+     * MAC Address: 00:00:5E:00:53:FF\n+     */\n+    private static final byte[] DUMMY_DESTINATION_MAC_ADDRESS = new byte[]{0, 0, 94, 0, 83, -1};\n+\n+    /**\n+     * IPv4\n+     */\n+    private static final int V4 = 0x0800;\n+\n+    /**\n+     * IPv6\n+     */\n+    private static final int V6 = 0x86dd;\n+\n+    private EthernetPacket() {\n+        // Prevent outside initialization\n+    }\n+\n+    /**\n+     * Write IPv4 Ethernet Packet. It uses a dummy MAC address for both source and destination.\n+     *\n+     * @param byteBuf ByteBuf where Ethernet Packet data will be set\n+     * @param payload Payload of IPv4\n+     */\n+    static void writeIPv4(ByteBuf byteBuf, ByteBuf payload) {\n+        EthernetPacket.writePacket(byteBuf, payload, DUMMY_SOURCE_MAC_ADDRESS, DUMMY_DESTINATION_MAC_ADDRESS, V4);\n+    }\n+\n+    /**\n+     * Write IPv6 Ethernet Packet. It uses a dummy MAC address for both source and destination.\n+     *\n+     * @param byteBuf ByteBuf where Ethernet Packet data will be set\n+     * @param payload Payload of IPv6\n+     */\n+    static void writeIPv6(ByteBuf byteBuf, ByteBuf payload) {\n+        EthernetPacket.writePacket(byteBuf, payload, DUMMY_SOURCE_MAC_ADDRESS, DUMMY_DESTINATION_MAC_ADDRESS, V6);\n+    }\n+\n+    /**\n+     * Write IPv6 Ethernet Packet\n+     *\n+     * @param byteBuf    ByteBuf where Ethernet Packet data will be set\n+     * @param payload    Payload of IPv6\n+     * @param srcAddress Source MAC Address\n+     * @param dstAddress Destination MAC Address\n+     * @param type       Type of Frame\n+     */\n+    private static void writePacket(ByteBuf byteBuf, ByteBuf payload, byte[] srcAddress, byte[] dstAddress, int type) {\n+        byteBuf.writeBytes(dstAddress); // Destination MAC Address\n+        byteBuf.writeBytes(srcAddress); // Source MAC Address\n+        byteBuf.writeShort(type);       // Frame Type (IPv4 or IPv6)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUxNzE1MQ=="}, "originalCommit": {"oid": "4a313affb01402aa5cffa51c22e9ed62c9c44ea1"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU1NDUxOQ==", "bodyText": "Got it, I thought we were going to read sign short further in test.", "url": "https://github.com/netty/netty/pull/10498#discussion_r485554519", "createdAt": "2020-09-09T11:59:29Z", "author": {"login": "amizurov"}, "path": "handler/src/main/java/io/netty/handler/pcap/EthernetPacket.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+final class EthernetPacket {\n+\n+    /**\n+     * MAC Address: 00:00:5E:00:53:00\n+     */\n+    private static final byte[] DUMMY_SOURCE_MAC_ADDRESS = new byte[]{0, 0, 94, 0, 83, 0};\n+\n+    /**\n+     * MAC Address: 00:00:5E:00:53:FF\n+     */\n+    private static final byte[] DUMMY_DESTINATION_MAC_ADDRESS = new byte[]{0, 0, 94, 0, 83, -1};\n+\n+    /**\n+     * IPv4\n+     */\n+    private static final int V4 = 0x0800;\n+\n+    /**\n+     * IPv6\n+     */\n+    private static final int V6 = 0x86dd;\n+\n+    private EthernetPacket() {\n+        // Prevent outside initialization\n+    }\n+\n+    /**\n+     * Write IPv4 Ethernet Packet. It uses a dummy MAC address for both source and destination.\n+     *\n+     * @param byteBuf ByteBuf where Ethernet Packet data will be set\n+     * @param payload Payload of IPv4\n+     */\n+    static void writeIPv4(ByteBuf byteBuf, ByteBuf payload) {\n+        EthernetPacket.writePacket(byteBuf, payload, DUMMY_SOURCE_MAC_ADDRESS, DUMMY_DESTINATION_MAC_ADDRESS, V4);\n+    }\n+\n+    /**\n+     * Write IPv6 Ethernet Packet. It uses a dummy MAC address for both source and destination.\n+     *\n+     * @param byteBuf ByteBuf where Ethernet Packet data will be set\n+     * @param payload Payload of IPv6\n+     */\n+    static void writeIPv6(ByteBuf byteBuf, ByteBuf payload) {\n+        EthernetPacket.writePacket(byteBuf, payload, DUMMY_SOURCE_MAC_ADDRESS, DUMMY_DESTINATION_MAC_ADDRESS, V6);\n+    }\n+\n+    /**\n+     * Write IPv6 Ethernet Packet\n+     *\n+     * @param byteBuf    ByteBuf where Ethernet Packet data will be set\n+     * @param payload    Payload of IPv6\n+     * @param srcAddress Source MAC Address\n+     * @param dstAddress Destination MAC Address\n+     * @param type       Type of Frame\n+     */\n+    private static void writePacket(ByteBuf byteBuf, ByteBuf payload, byte[] srcAddress, byte[] dstAddress, int type) {\n+        byteBuf.writeBytes(dstAddress); // Destination MAC Address\n+        byteBuf.writeBytes(srcAddress); // Source MAC Address\n+        byteBuf.writeShort(type);       // Frame Type (IPv4 or IPv6)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTUxNzE1MQ=="}, "originalCommit": {"oid": "4a313affb01402aa5cffa51c22e9ed62c9c44ea1"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzNzQyMjYyOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PcapWriteHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMzoyNDo1MVrOHPHLGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMzoyNDo1MVrOHPHLGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTYwODIxNw==", "bodyText": "@normanmaurer Do I need to catch this IOException and fire 1 more ctx.fireExceptionCaught(ex)?", "url": "https://github.com/netty/netty/pull/10498#discussion_r485608217", "createdAt": "2020-09-09T13:24:51Z", "author": {"login": "hyperxpro"}, "path": "handler/src/main/java/io/netty/handler/pcap/PcapWriteHandler.java", "diffHunk": "@@ -0,0 +1,523 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.ServerChannel;\n+import io.netty.channel.socket.DatagramChannel;\n+import io.netty.channel.socket.DatagramPacket;\n+import io.netty.channel.socket.ServerSocketChannel;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.util.NetUtil;\n+import io.netty.util.internal.ObjectUtil;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.Inet4Address;\n+import java.net.Inet6Address;\n+import java.net.InetSocketAddress;\n+\n+/**\n+ * <p> {@link PcapWriteHandler} captures {@link ByteBuf} from {@link SocketChannel} / {@link ServerChannel}\n+ * or {@link DatagramPacket} and writes it into Pcap {@link OutputStream}. </p>\n+ *\n+ * <p>\n+ * Things to keep in mind when using {@link PcapWriteHandler} with TCP:\n+ *\n+ *    <ul>\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#channelActive(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (SYN, SYN+ACK, ACK) is simulated as new connection in Pcap. </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#handlerRemoved(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (FIN+ACK, FIN+ACK, ACK) is simulated as connection shutdown in Pcap.  </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#exceptionCaught(ChannelHandlerContext, Throwable)}\n+ *        is called, a fake TCP RST is sent to simulate connection Reset in Pcap. </li>\n+ *\n+ *        <li> ACK is sent each time data is send / received. </li>\n+ *\n+ *        <li> Zero Length Data Packets can cause TCP Double ACK error in Wireshark. To tackle this,\n+ *        set {@code captureZeroByte} to {@code false}. </li>\n+ *    </ul>\n+ * </p>\n+ */\n+public final class PcapWriteHandler extends ChannelDuplexHandler {\n+\n+    private final InternalLogger logger = InternalLoggerFactory.getInstance(PcapWriteHandler.class);\n+\n+    /**\n+     * {@link PcapWriter} Instance\n+     */\n+    private PcapWriter pCapWriter;\n+\n+    /**\n+     * {@link OutputStream} where we'll write Pcap data.\n+     */\n+    private final OutputStream outputStream;\n+\n+    /**\n+     * {@code true} if we want to capture packets with zero bytes else {@code false}.\n+     */\n+    private final boolean captureZeroByte;\n+\n+    /**\n+     * {@code true} if we want to write Pcap Global Header on initialization of\n+     * {@link PcapWriter} else {@code false}.\n+     */\n+    private final boolean writePcapGlobalHeader;\n+\n+    /**\n+     * TCP Sender Segment Number.\n+     * It'll start with 1 and keep incrementing with number of bytes read/sent.\n+     */\n+    private int sendSegmentNumber = 1;\n+\n+    /**\n+     * TCP Receiver Segment Number.\n+     * It'll start with 1 and keep incrementing with number of bytes read/sent.\n+     */\n+    private int receiveSegmentNumber = 1;\n+\n+    /**\n+     * Source Address\n+     */\n+    private InetSocketAddress srcAddr;\n+\n+    /**\n+     * Destination Address\n+     */\n+    private InetSocketAddress dstAddr;\n+\n+    /**\n+     * Create new {@link PcapWriteHandler} Instance.\n+     * {@code captureZeroByte} is set to {@code false} and\n+     * {@code writePcapGlobalHeader} is set to {@code true}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     * @throws NullPointerException If {@link OutputStream} is {@code null} then we'll throw an\n+     *                              {@link NullPointerException}\n+     */\n+    public PcapWriteHandler(OutputStream outputStream) {\n+        this(outputStream, false, true);\n+    }\n+\n+    /**\n+     * Create new {@link PcapWriteHandler} Instance\n+     *\n+     * @param outputStream          OutputStream where Pcap data will be written\n+     * @param captureZeroByte       Set to {@code true} to enable capturing packets with empty (0 bytes) payload.\n+     *                              Otherwise, if set to {@code false}, empty packets will be filtered out.\n+     * @param writePcapGlobalHeader Set to {@code true} to write Pcap Global Header on initialization.\n+     *                              Otherwise, if set to {@code false}, Pcap Global Header will not be written\n+     *                              on initialization. This could when writing Pcap data on a existing file where\n+     *                              Pcap Global Header is already present.\n+     * @throws NullPointerException If {@link OutputStream} is {@code null} then we'll throw an\n+     *                              {@link NullPointerException}\n+     */\n+    public PcapWriteHandler(OutputStream outputStream, boolean captureZeroByte, boolean writePcapGlobalHeader) {\n+        this.outputStream = ObjectUtil.checkNotNull(outputStream, \"OutputStream\");\n+        this.captureZeroByte = captureZeroByte;\n+        this.writePcapGlobalHeader = writePcapGlobalHeader;\n+    }\n+\n+    @Override\n+    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+\n+        ByteBufAllocator byteBufAllocator = ctx.alloc();\n+\n+        /*\n+         * If `writePcapGlobalHeader` is `true`, we'll write Pcap Global Header.\n+         */\n+        if (writePcapGlobalHeader) {\n+\n+            ByteBuf byteBuf = byteBufAllocator.buffer();\n+            try {\n+                this.pCapWriter = new PcapWriter(this.outputStream, byteBuf);\n+            } catch (IOException ex) {\n+                ctx.channel().close();\n+                ctx.fireExceptionCaught(ex);\n+                logger.error(\"Caught Exception While Initializing PcapWriter, Closing Channel.\", ex);\n+            } finally {\n+                byteBuf.release();\n+            }\n+        } else {\n+            this.pCapWriter = new PcapWriter(this.outputStream);\n+        }\n+\n+        // If Channel belongs to `SocketChannel` then we're handling TCP.\n+        if (ctx.channel() instanceof SocketChannel) {\n+\n+            // Capture correct `localAddress` and `remoteAddress`\n+            if (ctx.channel().parent() instanceof ServerSocketChannel) {\n+                srcAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().localAddress();\n+            } else {\n+                srcAddr = (InetSocketAddress) ctx.channel().localAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+            }\n+\n+            logger.debug(\"Initiating Fake TCP 3-Way Handshake\");\n+\n+            ByteBuf tcpBuf = byteBufAllocator.buffer();\n+\n+            try {\n+                // Write SYN with Normal Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 0, 0, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.TCPFlag.SYN);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, byteBufAllocator, ctx);\n+\n+                // Write SYN+ACK with Reversed Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 0, 1, dstAddr.getPort(), srcAddr.getPort(), TCPPacket.TCPFlag.SYN,\n+                        TCPPacket.TCPFlag.ACK);\n+                completeTCPWrite(dstAddr, srcAddr, tcpBuf, byteBufAllocator, ctx);\n+\n+                // Write ACK with Normal Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, 1, 1, srcAddr.getPort(), dstAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, byteBufAllocator, ctx);\n+            } finally {\n+                tcpBuf.release();\n+            }\n+\n+            logger.debug(\"Finished Fake TCP 3-Way Handshake\");\n+        } else if (ctx.channel() instanceof DatagramChannel) {\n+            DatagramChannel datagramChannel = (DatagramChannel) ctx.channel();\n+\n+            // If `DatagramChannel` is connected then we can get\n+            // `localAddress` and `remoteAddress` from Channel.\n+            if (datagramChannel.isConnected()) {\n+                srcAddr = (InetSocketAddress) ctx.channel().localAddress();\n+                dstAddr = (InetSocketAddress) ctx.channel().remoteAddress();\n+            }\n+        }\n+\n+        super.channelActive(ctx);\n+    }\n+\n+    @Override\n+    public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n+        if (ctx.channel() instanceof SocketChannel) {\n+            handleTCP(ctx, msg, false);\n+        } else if (ctx.channel() instanceof DatagramChannel) {\n+            handleUDP(ctx, msg);\n+        } else {\n+            logger.debug(\"Discarding Pcap Write for Unknown Channel Type: {}\", ctx.channel());\n+        }\n+        super.channelRead(ctx, msg);\n+    }\n+\n+    @Override\n+    public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise) throws Exception {\n+        if (ctx.channel() instanceof SocketChannel) {\n+            handleTCP(ctx, msg, true);\n+        } else if (ctx.channel() instanceof DatagramChannel) {\n+            handleUDP(ctx, msg);\n+        } else {\n+            logger.debug(\"Discarding Pcap Write for Unknown Channel Type: {}\", ctx.channel());\n+        }\n+        super.write(ctx, msg, promise);\n+    }\n+\n+    /**\n+     * Handle TCP L4\n+     *\n+     * @param ctx              {@link ChannelHandlerContext} for {@link ByteBuf} allocation and\n+     *                         {@code fireExceptionCaught}\n+     * @param msg              {@link Object} must be {@link ByteBuf} else it'll be discarded\n+     * @param isWriteOperation Set {@code true} if we have to process packet when packets are being sent out\n+     *                         else set {@code false}\n+     */\n+    private void handleTCP(ChannelHandlerContext ctx, Object msg, boolean isWriteOperation) {\n+        if (msg instanceof ByteBuf) {\n+\n+            // If bytes are 0 and `captureZeroByte` is false, we won't capture this.\n+            if (((ByteBuf) msg).readableBytes() == 0 && !captureZeroByte) {\n+                logger.debug(\"Discarding Zero Byte TCP Packet. isWriteOperation {}\", isWriteOperation);\n+                return;\n+            }\n+\n+            ByteBufAllocator byteBufAllocator = ctx.alloc();\n+            ByteBuf packet = ((ByteBuf) msg).duplicate();\n+            ByteBuf tcpBuf = byteBufAllocator.buffer();\n+            int bytes = packet.readableBytes();\n+\n+            try {\n+                if (isWriteOperation) {\n+                    TCPPacket.writePacket(tcpBuf, packet, sendSegmentNumber, receiveSegmentNumber, srcAddr.getPort(),\n+                            dstAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                    completeTCPWrite(srcAddr, dstAddr, tcpBuf, byteBufAllocator, ctx);\n+                    logTCP(true, bytes, sendSegmentNumber, receiveSegmentNumber, srcAddr, dstAddr, false);\n+\n+                    sendSegmentNumber += bytes;\n+\n+                    TCPPacket.writePacket(tcpBuf, null, receiveSegmentNumber, sendSegmentNumber, dstAddr.getPort(),\n+                            srcAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                    completeTCPWrite(dstAddr, srcAddr, tcpBuf, byteBufAllocator, ctx);\n+                    logTCP(true, bytes, sendSegmentNumber, receiveSegmentNumber, dstAddr, srcAddr, true);\n+                } else {\n+                    TCPPacket.writePacket(tcpBuf, packet, receiveSegmentNumber, sendSegmentNumber, dstAddr.getPort(),\n+                            srcAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                    completeTCPWrite(dstAddr, srcAddr, tcpBuf, byteBufAllocator, ctx);\n+                    logTCP(false, bytes, receiveSegmentNumber, sendSegmentNumber, dstAddr, srcAddr, false);\n+\n+                    receiveSegmentNumber += bytes;\n+\n+                    TCPPacket.writePacket(tcpBuf, null, sendSegmentNumber, receiveSegmentNumber, srcAddr.getPort(),\n+                            dstAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                    completeTCPWrite(srcAddr, dstAddr, tcpBuf, byteBufAllocator, ctx);\n+                    logTCP(false, bytes, sendSegmentNumber, receiveSegmentNumber, srcAddr, dstAddr, true);\n+                }\n+            } finally {\n+                tcpBuf.release();\n+            }\n+        } else {\n+            logger.debug(\"Discarding Pcap Write for TCP Object: {}\", msg);\n+        }\n+    }\n+\n+    /**\n+     * Write TCP/IP L3 and L2 here.\n+     *\n+     * @param srcAddr          {@link InetSocketAddress} Source Address of this Packet\n+     * @param dstAddr          {@link InetSocketAddress} Destination Address of this Packet\n+     * @param tcpBuf           {@link ByteBuf} containing TCP L4 Data\n+     * @param byteBufAllocator {@link ByteBufAllocator} for allocating bytes for TCP/IP L3 and L2 data.\n+     * @param ctx              {@link ChannelHandlerContext} for {@code fireExceptionCaught}\n+     */\n+    private void completeTCPWrite(InetSocketAddress srcAddr, InetSocketAddress dstAddr, ByteBuf tcpBuf,\n+                                  ByteBufAllocator byteBufAllocator, ChannelHandlerContext ctx) {\n+\n+        ByteBuf ipBuf = byteBufAllocator.buffer();\n+        ByteBuf ethernetBuf = byteBufAllocator.buffer();\n+        ByteBuf pcap = byteBufAllocator.buffer();\n+\n+        try {\n+            if (srcAddr.getAddress() instanceof Inet4Address && dstAddr.getAddress() instanceof Inet4Address) {\n+                IPPacket.writeTCPv4(ipBuf, tcpBuf,\n+                        NetUtil.ipv4AddressToInt((Inet4Address) srcAddr.getAddress()),\n+                        NetUtil.ipv4AddressToInt((Inet4Address) dstAddr.getAddress()));\n+\n+                EthernetPacket.writeIPv4(ethernetBuf, ipBuf);\n+            } else if (srcAddr.getAddress() instanceof Inet6Address && dstAddr.getAddress() instanceof Inet6Address) {\n+                IPPacket.writeTCPv6(ipBuf, tcpBuf,\n+                        srcAddr.getAddress().getAddress(),\n+                        dstAddr.getAddress().getAddress());\n+\n+                EthernetPacket.writeIPv6(ethernetBuf, ipBuf);\n+            } else {\n+                logger.error(\"Source and Destination IP Address versions are not same. Source Address: {}, \" +\n+                        \"Destination Address: {}\", srcAddr.getAddress(), dstAddr.getAddress());\n+                return;\n+            }\n+\n+            // Write Packet into Pcap\n+            pCapWriter.writePacket(pcap, ethernetBuf);\n+        } catch (IOException ex) {\n+            logger.error(\"Caught Exception While Writing Packet into Pcap\", ex);\n+            ctx.fireExceptionCaught(ex);\n+        } finally {\n+            ipBuf.release();\n+            ethernetBuf.release();\n+            pcap.release();\n+        }\n+    }\n+\n+    /**\n+     * Logger for TCP\n+     */\n+    private void logTCP(boolean isWriteOperation, int bytes, int sendSegmentNumber, int receiveSegmentNumber,\n+                        InetSocketAddress srcAddr, InetSocketAddress dstAddr, boolean ackOnly) {\n+        // If `ackOnly` is `true` when we don't need to write any data so we'll not\n+        // log number of bytes being written and mark the operation as \"TCP ACK\".\n+        if (logger.isDebugEnabled()) {\n+            if (ackOnly) {\n+                logger.debug(\"Writing TCP ACK, isWriteOperation {}, Segment Number {}, Ack Number {}, Src Addr {}, \"\n+                        + \"Dst Addr {}\", isWriteOperation, sendSegmentNumber, receiveSegmentNumber, dstAddr, srcAddr);\n+            } else {\n+                logger.debug(\"Writing TCP Data of {} Bytes, isWriteOperation {}, Segment Number {}, Ack Number {}, \" +\n+                                \"Src Addr {}, Dst Addr {}\", bytes, isWriteOperation, sendSegmentNumber,\n+                        receiveSegmentNumber, srcAddr, dstAddr);\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Handle UDP l4\n+     *\n+     * @param ctx {@link ChannelHandlerContext} for {@code localAddress} / {@code remoteAddress},\n+     *            {@link ByteBuf} allocation and {@code fireExceptionCaught}\n+     * @param msg {@link DatagramPacket} or {@link DatagramChannel}\n+     */\n+    private void handleUDP(ChannelHandlerContext ctx, Object msg) {\n+        ByteBuf udpBuf = ctx.alloc().buffer();\n+\n+        try {\n+            if (msg instanceof DatagramPacket) {\n+\n+                // If bytes are 0 and `captureZeroByte` is false, we won't capture this.\n+                if (((DatagramPacket) msg).content().readableBytes() == 0 && !captureZeroByte) {\n+                    logger.debug(\"Discarding Zero Byte UDP Packet\");\n+                    return;\n+                }\n+\n+                DatagramPacket datagramPacket = ((DatagramPacket) msg).duplicate();\n+                InetSocketAddress srcAddr = datagramPacket.sender();\n+                InetSocketAddress dstAddr = datagramPacket.recipient();\n+\n+                // If `datagramPacket.sender()` is `null` then DatagramPacket is initialized\n+                // `sender` (local) address. In this case, we'll get source address from Channel.\n+                if (srcAddr == null) {\n+                    srcAddr = (InetSocketAddress) ctx.channel().localAddress();\n+                }\n+\n+                logger.debug(\"Writing UDP Data of {} Bytes, Src Addr {}, Dst Addr {}\",\n+                        datagramPacket.content().readableBytes(), srcAddr, dstAddr);\n+\n+                UDPPacket.writePacket(udpBuf, datagramPacket.content(), srcAddr.getPort(), dstAddr.getPort());\n+                completeUDPWrite(srcAddr, dstAddr, udpBuf, ctx.alloc(), ctx);\n+            } else if (msg instanceof ByteBuf && ((DatagramChannel) ctx.channel()).isConnected()) {\n+\n+                // If bytes are 0 and `captureZeroByte` is false, we won't capture this.\n+                if (((ByteBuf) msg).readableBytes() == 0 && !captureZeroByte) {\n+                    logger.debug(\"Discarding Zero Byte UDP Packet\");\n+                    return;\n+                }\n+\n+                ByteBuf byteBuf = ((ByteBuf) msg).duplicate();\n+\n+                logger.debug(\"Writing UDP Data of {} Bytes, Src Addr {}, Dst Addr {}\",\n+                        byteBuf.readableBytes(), srcAddr, dstAddr);\n+\n+                UDPPacket.writePacket(udpBuf, byteBuf, srcAddr.getPort(), dstAddr.getPort());\n+                completeUDPWrite(srcAddr, dstAddr, udpBuf, ctx.alloc(), ctx);\n+            } else {\n+                logger.debug(\"Discarding Pcap Write for UDP Object: {}\", msg);\n+            }\n+        } finally {\n+            udpBuf.release();\n+        }\n+    }\n+\n+    /**\n+     * Write UDP/IP L3 and L2 here.\n+     *\n+     * @param srcAddr          {@link InetSocketAddress} Source Address of this Packet\n+     * @param dstAddr          {@link InetSocketAddress} Destination Address of this Packet\n+     * @param udpBuf           {@link ByteBuf} containing UDP L4 Data\n+     * @param byteBufAllocator {@link ByteBufAllocator} for allocating bytes for UDP/IP L3 and L2 data.\n+     * @param ctx              {@link ChannelHandlerContext} for {@code fireExceptionCaught}\n+     */\n+    private void completeUDPWrite(InetSocketAddress srcAddr, InetSocketAddress dstAddr, ByteBuf udpBuf,\n+                                  ByteBufAllocator byteBufAllocator, ChannelHandlerContext ctx) {\n+\n+        ByteBuf ipBuf = byteBufAllocator.buffer();\n+        ByteBuf ethernetBuf = byteBufAllocator.buffer();\n+        ByteBuf pcap = byteBufAllocator.buffer();\n+\n+        try {\n+            if (srcAddr.getAddress() instanceof Inet4Address && dstAddr.getAddress() instanceof Inet4Address) {\n+                IPPacket.writeUDPv4(ipBuf, udpBuf,\n+                        NetUtil.ipv4AddressToInt((Inet4Address) srcAddr.getAddress()),\n+                        NetUtil.ipv4AddressToInt((Inet4Address) dstAddr.getAddress()));\n+\n+                EthernetPacket.writeIPv4(ethernetBuf, ipBuf);\n+            } else if (srcAddr.getAddress() instanceof Inet6Address && dstAddr.getAddress() instanceof Inet6Address) {\n+                IPPacket.writeUDPv6(ipBuf, udpBuf,\n+                        srcAddr.getAddress().getAddress(),\n+                        dstAddr.getAddress().getAddress());\n+\n+                EthernetPacket.writeIPv6(ethernetBuf, ipBuf);\n+            } else {\n+                logger.error(\"Source and Destination IP Address versions are not same. Source Address: {}, \" +\n+                        \"Destination Address: {}\", srcAddr.getAddress(), dstAddr.getAddress());\n+                return;\n+            }\n+\n+            // Write Packet into Pcap\n+            pCapWriter.writePacket(pcap, ethernetBuf);\n+        } catch (IOException ex) {\n+            logger.error(\"Caught Exception While Writing Packet into Pcap\", ex);\n+            ctx.fireExceptionCaught(ex);\n+        } finally {\n+            ipBuf.release();\n+            ethernetBuf.release();\n+            pcap.release();\n+        }\n+    }\n+\n+    @Override\n+    public void handlerRemoved(ChannelHandlerContext ctx) throws Exception {\n+\n+        // If `isTCP` is true, then we'll simulate a `FIN` flow.\n+        if (ctx.channel() instanceof SocketChannel) {\n+            logger.debug(\"Starting Fake TCP FIN+ACK Flow to close connection\");\n+\n+            ByteBufAllocator byteBufAllocator = ctx.alloc();\n+            ByteBuf tcpBuf = byteBufAllocator.buffer();\n+\n+            try {\n+                // Write FIN+ACK with Normal Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, sendSegmentNumber, receiveSegmentNumber, srcAddr.getPort(),\n+                        dstAddr.getPort(), TCPPacket.TCPFlag.FIN, TCPPacket.TCPFlag.ACK);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, byteBufAllocator, ctx);\n+\n+                // Write FIN+ACK with Reversed Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, receiveSegmentNumber, sendSegmentNumber, dstAddr.getPort(),\n+                        srcAddr.getPort(), TCPPacket.TCPFlag.FIN, TCPPacket.TCPFlag.ACK);\n+                completeTCPWrite(dstAddr, srcAddr, tcpBuf, byteBufAllocator, ctx);\n+\n+                // Write ACK with Normal Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, sendSegmentNumber + 1, receiveSegmentNumber + 1,\n+                        srcAddr.getPort(), dstAddr.getPort(), TCPPacket.TCPFlag.ACK);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, byteBufAllocator, ctx);\n+            } finally {\n+                tcpBuf.release();\n+            }\n+\n+            logger.debug(\"Finished Fake TCP FIN+ACK Flow to close connection\");\n+        }\n+\n+        this.pCapWriter.close();\n+        super.handlerRemoved(ctx);\n+    }\n+\n+    @Override\n+    public void exceptionCaught(ChannelHandlerContext ctx, Throwable cause) throws Exception {\n+\n+        if (ctx.channel() instanceof SocketChannel) {\n+            ByteBuf tcpBuf = ctx.alloc().buffer();\n+\n+            try {\n+                // Write RST with Normal Source and Destination Address\n+                TCPPacket.writePacket(tcpBuf, null, sendSegmentNumber, receiveSegmentNumber, srcAddr.getPort(),\n+                        dstAddr.getPort(), TCPPacket.TCPFlag.RST, TCPPacket.TCPFlag.ACK);\n+                completeTCPWrite(srcAddr, dstAddr, tcpBuf, ctx.alloc(), ctx);\n+            } finally {\n+                tcpBuf.release();\n+            }\n+\n+            logger.debug(\"Sent Fake TCP RST to close connection\");\n+        }\n+\n+        this.pCapWriter.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a313affb01402aa5cffa51c22e9ed62c9c44ea1"}, "originalPosition": 520}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDY5NTU3OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/TCPPacket.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNzoxNzo0NFrOHPmRog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNzo0Nzo1OFrOHPnTwQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExNzc5NA==", "bodyText": "Is it possible null varargs ?", "url": "https://github.com/netty/netty/pull/10498#discussion_r486117794", "createdAt": "2020-09-10T07:17:44Z", "author": {"login": "amizurov"}, "path": "handler/src/main/java/io/netty/handler/pcap/TCPPacket.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+final class TCPPacket {\n+\n+    /**\n+     * Data Offset + Reserved Bits.\n+     */\n+    private static final short OFFSET = 0x5000;\n+\n+    private TCPPacket() {\n+        // Prevent outside initialization\n+    }\n+\n+    /**\n+     * Write TCP Packet\n+     *\n+     * @param byteBuf ByteBuf where Packet data will be set\n+     * @param payload Payload of this Packet\n+     * @param srcPort Source Port\n+     * @param dstPort Destination Port\n+     */\n+    static void writePacket(ByteBuf byteBuf, ByteBuf payload, int segmentNumber, int ackNumber, int srcPort,\n+                            int dstPort, TCPFlag... tcpFlags) {\n+\n+        byteBuf.writeShort(srcPort);     // Source Port\n+        byteBuf.writeShort(dstPort);     // Destination Port\n+        byteBuf.writeInt(segmentNumber); // Segment Number\n+        byteBuf.writeInt(ackNumber);     // Acknowledgment Number\n+        byteBuf.writeShort(OFFSET | TCPFlag.getFlag(tcpFlags)); // Flags\n+        byteBuf.writeShort(65535);       // Window Size\n+        byteBuf.writeShort(0x0001);      // Checksum\n+        byteBuf.writeShort(0);           // Urgent Pointer\n+\n+        if (payload != null) {\n+            byteBuf.writeBytes(payload); //  Payload of Data\n+        }\n+    }\n+\n+    enum TCPFlag {\n+        FIN(1),\n+        SYN(1 << 1),\n+        RST(1 << 2),\n+        PSH(1 << 3),\n+        ACK(1 << 4),\n+        URG(1 << 5),\n+        ECE(1 << 6),\n+        CWR(1 << 7);\n+\n+        private final int value;\n+\n+        TCPFlag(int value) {\n+            this.value = value;\n+        }\n+\n+        static int getFlag(TCPFlag... tcpFlags) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a313affb01402aa5cffa51c22e9ed62c9c44ea1"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjEzNDUzOA==", "bodyText": "Nope, it's completely under our control.", "url": "https://github.com/netty/netty/pull/10498#discussion_r486134538", "createdAt": "2020-09-10T07:47:39Z", "author": {"login": "hyperxpro"}, "path": "handler/src/main/java/io/netty/handler/pcap/TCPPacket.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+final class TCPPacket {\n+\n+    /**\n+     * Data Offset + Reserved Bits.\n+     */\n+    private static final short OFFSET = 0x5000;\n+\n+    private TCPPacket() {\n+        // Prevent outside initialization\n+    }\n+\n+    /**\n+     * Write TCP Packet\n+     *\n+     * @param byteBuf ByteBuf where Packet data will be set\n+     * @param payload Payload of this Packet\n+     * @param srcPort Source Port\n+     * @param dstPort Destination Port\n+     */\n+    static void writePacket(ByteBuf byteBuf, ByteBuf payload, int segmentNumber, int ackNumber, int srcPort,\n+                            int dstPort, TCPFlag... tcpFlags) {\n+\n+        byteBuf.writeShort(srcPort);     // Source Port\n+        byteBuf.writeShort(dstPort);     // Destination Port\n+        byteBuf.writeInt(segmentNumber); // Segment Number\n+        byteBuf.writeInt(ackNumber);     // Acknowledgment Number\n+        byteBuf.writeShort(OFFSET | TCPFlag.getFlag(tcpFlags)); // Flags\n+        byteBuf.writeShort(65535);       // Window Size\n+        byteBuf.writeShort(0x0001);      // Checksum\n+        byteBuf.writeShort(0);           // Urgent Pointer\n+\n+        if (payload != null) {\n+            byteBuf.writeBytes(payload); //  Payload of Data\n+        }\n+    }\n+\n+    enum TCPFlag {\n+        FIN(1),\n+        SYN(1 << 1),\n+        RST(1 << 2),\n+        PSH(1 << 3),\n+        ACK(1 << 4),\n+        URG(1 << 5),\n+        ECE(1 << 6),\n+        CWR(1 << 7);\n+\n+        private final int value;\n+\n+        TCPFlag(int value) {\n+            this.value = value;\n+        }\n+\n+        static int getFlag(TCPFlag... tcpFlags) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExNzc5NA=="}, "originalCommit": {"oid": "4a313affb01402aa5cffa51c22e9ed62c9c44ea1"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjEzNDcyMQ==", "bodyText": "We won't pass null.", "url": "https://github.com/netty/netty/pull/10498#discussion_r486134721", "createdAt": "2020-09-10T07:47:58Z", "author": {"login": "hyperxpro"}, "path": "handler/src/main/java/io/netty/handler/pcap/TCPPacket.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+final class TCPPacket {\n+\n+    /**\n+     * Data Offset + Reserved Bits.\n+     */\n+    private static final short OFFSET = 0x5000;\n+\n+    private TCPPacket() {\n+        // Prevent outside initialization\n+    }\n+\n+    /**\n+     * Write TCP Packet\n+     *\n+     * @param byteBuf ByteBuf where Packet data will be set\n+     * @param payload Payload of this Packet\n+     * @param srcPort Source Port\n+     * @param dstPort Destination Port\n+     */\n+    static void writePacket(ByteBuf byteBuf, ByteBuf payload, int segmentNumber, int ackNumber, int srcPort,\n+                            int dstPort, TCPFlag... tcpFlags) {\n+\n+        byteBuf.writeShort(srcPort);     // Source Port\n+        byteBuf.writeShort(dstPort);     // Destination Port\n+        byteBuf.writeInt(segmentNumber); // Segment Number\n+        byteBuf.writeInt(ackNumber);     // Acknowledgment Number\n+        byteBuf.writeShort(OFFSET | TCPFlag.getFlag(tcpFlags)); // Flags\n+        byteBuf.writeShort(65535);       // Window Size\n+        byteBuf.writeShort(0x0001);      // Checksum\n+        byteBuf.writeShort(0);           // Urgent Pointer\n+\n+        if (payload != null) {\n+            byteBuf.writeBytes(payload); //  Payload of Data\n+        }\n+    }\n+\n+    enum TCPFlag {\n+        FIN(1),\n+        SYN(1 << 1),\n+        RST(1 << 2),\n+        PSH(1 << 3),\n+        ACK(1 << 4),\n+        URG(1 << 5),\n+        ECE(1 << 6),\n+        CWR(1 << 7);\n+\n+        private final int value;\n+\n+        TCPFlag(int value) {\n+            this.value = value;\n+        }\n+\n+        static int getFlag(TCPFlag... tcpFlags) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExNzc5NA=="}, "originalCommit": {"oid": "4a313affb01402aa5cffa51c22e9ed62c9c44ea1"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDcwNzg3OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/UDPPacket.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNzoyMToxNlrOHPmZCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwODowNzowNlrOHPn_1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExOTY5MA==", "bodyText": "Payload here can be only in range 0... 65527  (short - 8),  is it right ?", "url": "https://github.com/netty/netty/pull/10498#discussion_r486119690", "createdAt": "2020-09-10T07:21:16Z", "author": {"login": "amizurov"}, "path": "handler/src/main/java/io/netty/handler/pcap/UDPPacket.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+final class UDPPacket {\n+\n+    private static final short UDP_HEADER_SIZE = 8;\n+\n+    private UDPPacket() {\n+        // Prevent outside initialization\n+    }\n+\n+    /**\n+     * Write UDP Packet\n+     *\n+     * @param byteBuf ByteBuf where Packet data will be set\n+     * @param payload Payload of this Packet\n+     * @param srcPort Source Port\n+     * @param dstPort Destination Port\n+     */\n+    static void writePacket(ByteBuf byteBuf, ByteBuf payload, int srcPort, int dstPort) {\n+        byteBuf.writeShort(srcPort); // Source Port\n+        byteBuf.writeShort(dstPort); // Destination Port\n+        byteBuf.writeShort(UDP_HEADER_SIZE + payload.readableBytes()); // UDP Header Length + Payload Length", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a313affb01402aa5cffa51c22e9ed62c9c44ea1"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE0NjAwNg==", "bodyText": "The Packet Length includes UDP Header Size of 8 bytes and data payload of n bytes,", "url": "https://github.com/netty/netty/pull/10498#discussion_r486146006", "createdAt": "2020-09-10T08:07:06Z", "author": {"login": "hyperxpro"}, "path": "handler/src/main/java/io/netty/handler/pcap/UDPPacket.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+final class UDPPacket {\n+\n+    private static final short UDP_HEADER_SIZE = 8;\n+\n+    private UDPPacket() {\n+        // Prevent outside initialization\n+    }\n+\n+    /**\n+     * Write UDP Packet\n+     *\n+     * @param byteBuf ByteBuf where Packet data will be set\n+     * @param payload Payload of this Packet\n+     * @param srcPort Source Port\n+     * @param dstPort Destination Port\n+     */\n+    static void writePacket(ByteBuf byteBuf, ByteBuf payload, int srcPort, int dstPort) {\n+        byteBuf.writeShort(srcPort); // Source Port\n+        byteBuf.writeShort(dstPort); // Destination Port\n+        byteBuf.writeShort(UDP_HEADER_SIZE + payload.readableBytes()); // UDP Header Length + Payload Length", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExOTY5MA=="}, "originalCommit": {"oid": "4a313affb01402aa5cffa51c22e9ed62c9c44ea1"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDc0MTU0OnYy", "diffSide": "RIGHT", "path": "handler/src/test/java/io/netty/handler/pcap/PcapWriteHandlerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNzozMTowMVrOHPmtyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwODoxMDoxNVrOHPoJBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjEyNTAwMw==", "bodyText": "Maybe instance of udpPacket.readShort() & 0xffff  we can use buf.readUnsignedShort() ?", "url": "https://github.com/netty/netty/pull/10498#discussion_r486125003", "createdAt": "2020-09-10T07:31:01Z", "author": {"login": "amizurov"}, "path": "handler/src/test/java/io/netty/handler/pcap/PcapWriteHandlerTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.bootstrap.Bootstrap;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufOutputStream;\n+import io.netty.buffer.ByteBufUtil;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.DatagramPacket;\n+import io.netty.channel.socket.nio.NioDatagramChannel;\n+import io.netty.util.CharsetUtil;\n+import io.netty.util.NetUtil;\n+import org.junit.Test;\n+\n+import java.net.Inet4Address;\n+import java.net.InetSocketAddress;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class PcapWriteHandlerTest {\n+\n+    @Test\n+    public void udpV4() throws InterruptedException {\n+\n+        ByteBuf byteBuf = Unpooled.buffer();\n+\n+        InetSocketAddress srvAddr = new InetSocketAddress(\"127.0.0.1\", 62001);\n+        InetSocketAddress cltAddr = new InetSocketAddress(\"127.0.0.1\", 62002);\n+\n+        NioEventLoopGroup eventLoopGroup = new NioEventLoopGroup(2);\n+\n+        // We'll bootstrap a UDP Server to avoid \"Network Unreachable errors\" when sending UDP Packet.\n+        Bootstrap server = new Bootstrap()\n+                .group(eventLoopGroup)\n+                .channel(NioDatagramChannel.class)\n+                .handler(new SimpleChannelInboundHandler<DatagramPacket>() {\n+                    @Override\n+                    protected void channelRead0(ChannelHandlerContext ctx, DatagramPacket msg) {\n+                        // Discard\n+                    }\n+                });\n+\n+        ChannelFuture channelFutureServer = server.bind(srvAddr).sync();\n+        assertTrue(channelFutureServer.isSuccess());\n+\n+        // We'll bootstrap a UDP Client for sending UDP Packets to UDP Server.\n+        Bootstrap client = new Bootstrap()\n+                .group(eventLoopGroup)\n+                .channel(NioDatagramChannel.class)\n+                .handler(new PcapWriteHandler(new ByteBufOutputStream(byteBuf)));\n+\n+        ChannelFuture channelFutureClient = client.connect(srvAddr, cltAddr).sync();\n+        assertTrue(channelFutureClient.isSuccess());\n+        assertTrue(channelFutureClient.channel().writeAndFlush(Unpooled.wrappedBuffer(\"Meow\".getBytes()))\n+                .sync().isSuccess());\n+        assertTrue(eventLoopGroup.shutdownGracefully().sync().isSuccess());\n+\n+        // Verify Pcap Global Headers\n+        assertEquals(0xa1b2c3d4, byteBuf.readInt()); // magic_number\n+        assertEquals(2, byteBuf.readShort());        // version_major\n+        assertEquals(4, byteBuf.readShort());        // version_minor\n+        assertEquals(0, byteBuf.readInt());          // thiszone\n+        assertEquals(0, byteBuf.readInt());          // sigfigs\n+        assertEquals(0xffff, byteBuf.readInt());     // snaplen\n+        assertEquals(1, byteBuf.readInt());          // network\n+\n+        // Verify Pcap Packet Header\n+        byteBuf.readInt(); // Just read, we don't care about timestamps for now\n+        byteBuf.readInt(); // Just read, we don't care about timestamps for now\n+        assertEquals(46, byteBuf.readInt()); // Length of Packet Saved In Pcap\n+        assertEquals(46, byteBuf.readInt()); // Actual Length of Packet\n+\n+        // -------------------------------------------- Verify Packet --------------------------------------------\n+        // Verify Ethernet Packet\n+        ByteBuf ethernetPacket = byteBuf.readBytes(46);\n+        ByteBuf dstMac = ethernetPacket.readBytes(6);\n+        ByteBuf srcMac = ethernetPacket.readBytes(6);\n+        assertArrayEquals(new byte[]{0, 0, 94, 0, 83, -1}, ByteBufUtil.getBytes(dstMac));\n+        assertArrayEquals(new byte[]{0, 0, 94, 0, 83, 0}, ByteBufUtil.getBytes(srcMac));\n+        assertEquals(0x0800, ethernetPacket.readShort());\n+\n+        // Verify IPv4 Packet\n+        ByteBuf ipv4Packet = ethernetPacket.readBytes(32);\n+        assertEquals(0x45, ipv4Packet.readByte());    // Version + IHL\n+        assertEquals(0x00, ipv4Packet.readByte());    // DSCP\n+        assertEquals(32, ipv4Packet.readShort());     // Length\n+        assertEquals(0x0000, ipv4Packet.readShort()); // Identification\n+        assertEquals(0x0000, ipv4Packet.readShort()); // Fragment\n+        assertEquals((byte) 0xff, ipv4Packet.readByte());      // TTL\n+        assertEquals((byte) 17, ipv4Packet.readByte());        // Protocol\n+        assertEquals(0, ipv4Packet.readShort());      // Checksum\n+        // Source IPv4 Address\n+        assertEquals(NetUtil.ipv4AddressToInt((Inet4Address) srvAddr.getAddress()), ipv4Packet.readInt());\n+        // Destination IPv4 Address\n+        assertEquals(NetUtil.ipv4AddressToInt((Inet4Address) cltAddr.getAddress()), ipv4Packet.readInt());\n+\n+        // Verify UDP Packet\n+        ByteBuf udpPacket = ipv4Packet.readBytes(12);\n+        assertEquals(cltAddr.getPort() & 0xffff, udpPacket.readShort() & 0xffff); // Source Port", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a313affb01402aa5cffa51c22e9ed62c9c44ea1"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE0ODM1OQ==", "bodyText": "Yeah, Fixed.", "url": "https://github.com/netty/netty/pull/10498#discussion_r486148359", "createdAt": "2020-09-10T08:10:15Z", "author": {"login": "hyperxpro"}, "path": "handler/src/test/java/io/netty/handler/pcap/PcapWriteHandlerTest.java", "diffHunk": "@@ -0,0 +1,137 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.bootstrap.Bootstrap;\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufOutputStream;\n+import io.netty.buffer.ByteBufUtil;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.DatagramPacket;\n+import io.netty.channel.socket.nio.NioDatagramChannel;\n+import io.netty.util.CharsetUtil;\n+import io.netty.util.NetUtil;\n+import org.junit.Test;\n+\n+import java.net.Inet4Address;\n+import java.net.InetSocketAddress;\n+\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertTrue;\n+\n+public class PcapWriteHandlerTest {\n+\n+    @Test\n+    public void udpV4() throws InterruptedException {\n+\n+        ByteBuf byteBuf = Unpooled.buffer();\n+\n+        InetSocketAddress srvAddr = new InetSocketAddress(\"127.0.0.1\", 62001);\n+        InetSocketAddress cltAddr = new InetSocketAddress(\"127.0.0.1\", 62002);\n+\n+        NioEventLoopGroup eventLoopGroup = new NioEventLoopGroup(2);\n+\n+        // We'll bootstrap a UDP Server to avoid \"Network Unreachable errors\" when sending UDP Packet.\n+        Bootstrap server = new Bootstrap()\n+                .group(eventLoopGroup)\n+                .channel(NioDatagramChannel.class)\n+                .handler(new SimpleChannelInboundHandler<DatagramPacket>() {\n+                    @Override\n+                    protected void channelRead0(ChannelHandlerContext ctx, DatagramPacket msg) {\n+                        // Discard\n+                    }\n+                });\n+\n+        ChannelFuture channelFutureServer = server.bind(srvAddr).sync();\n+        assertTrue(channelFutureServer.isSuccess());\n+\n+        // We'll bootstrap a UDP Client for sending UDP Packets to UDP Server.\n+        Bootstrap client = new Bootstrap()\n+                .group(eventLoopGroup)\n+                .channel(NioDatagramChannel.class)\n+                .handler(new PcapWriteHandler(new ByteBufOutputStream(byteBuf)));\n+\n+        ChannelFuture channelFutureClient = client.connect(srvAddr, cltAddr).sync();\n+        assertTrue(channelFutureClient.isSuccess());\n+        assertTrue(channelFutureClient.channel().writeAndFlush(Unpooled.wrappedBuffer(\"Meow\".getBytes()))\n+                .sync().isSuccess());\n+        assertTrue(eventLoopGroup.shutdownGracefully().sync().isSuccess());\n+\n+        // Verify Pcap Global Headers\n+        assertEquals(0xa1b2c3d4, byteBuf.readInt()); // magic_number\n+        assertEquals(2, byteBuf.readShort());        // version_major\n+        assertEquals(4, byteBuf.readShort());        // version_minor\n+        assertEquals(0, byteBuf.readInt());          // thiszone\n+        assertEquals(0, byteBuf.readInt());          // sigfigs\n+        assertEquals(0xffff, byteBuf.readInt());     // snaplen\n+        assertEquals(1, byteBuf.readInt());          // network\n+\n+        // Verify Pcap Packet Header\n+        byteBuf.readInt(); // Just read, we don't care about timestamps for now\n+        byteBuf.readInt(); // Just read, we don't care about timestamps for now\n+        assertEquals(46, byteBuf.readInt()); // Length of Packet Saved In Pcap\n+        assertEquals(46, byteBuf.readInt()); // Actual Length of Packet\n+\n+        // -------------------------------------------- Verify Packet --------------------------------------------\n+        // Verify Ethernet Packet\n+        ByteBuf ethernetPacket = byteBuf.readBytes(46);\n+        ByteBuf dstMac = ethernetPacket.readBytes(6);\n+        ByteBuf srcMac = ethernetPacket.readBytes(6);\n+        assertArrayEquals(new byte[]{0, 0, 94, 0, 83, -1}, ByteBufUtil.getBytes(dstMac));\n+        assertArrayEquals(new byte[]{0, 0, 94, 0, 83, 0}, ByteBufUtil.getBytes(srcMac));\n+        assertEquals(0x0800, ethernetPacket.readShort());\n+\n+        // Verify IPv4 Packet\n+        ByteBuf ipv4Packet = ethernetPacket.readBytes(32);\n+        assertEquals(0x45, ipv4Packet.readByte());    // Version + IHL\n+        assertEquals(0x00, ipv4Packet.readByte());    // DSCP\n+        assertEquals(32, ipv4Packet.readShort());     // Length\n+        assertEquals(0x0000, ipv4Packet.readShort()); // Identification\n+        assertEquals(0x0000, ipv4Packet.readShort()); // Fragment\n+        assertEquals((byte) 0xff, ipv4Packet.readByte());      // TTL\n+        assertEquals((byte) 17, ipv4Packet.readByte());        // Protocol\n+        assertEquals(0, ipv4Packet.readShort());      // Checksum\n+        // Source IPv4 Address\n+        assertEquals(NetUtil.ipv4AddressToInt((Inet4Address) srvAddr.getAddress()), ipv4Packet.readInt());\n+        // Destination IPv4 Address\n+        assertEquals(NetUtil.ipv4AddressToInt((Inet4Address) cltAddr.getAddress()), ipv4Packet.readInt());\n+\n+        // Verify UDP Packet\n+        ByteBuf udpPacket = ipv4Packet.readBytes(12);\n+        assertEquals(cltAddr.getPort() & 0xffff, udpPacket.readShort() & 0xffff); // Source Port", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjEyNTAwMw=="}, "originalCommit": {"oid": "4a313affb01402aa5cffa51c22e9ed62c9c44ea1"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDc2NTk2OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/pcap/PcapWriteHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNzozNzozOVrOHPm8hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwODoxMjowMVrOHPoNEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjEyODc3Mw==", "bodyText": "Is it make sense to send ctx.fireExceptionCaught(ex) after we close channel ? I think it reach only TailContext", "url": "https://github.com/netty/netty/pull/10498#discussion_r486128773", "createdAt": "2020-09-10T07:37:39Z", "author": {"login": "amizurov"}, "path": "handler/src/main/java/io/netty/handler/pcap/PcapWriteHandler.java", "diffHunk": "@@ -0,0 +1,523 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.ServerChannel;\n+import io.netty.channel.socket.DatagramChannel;\n+import io.netty.channel.socket.DatagramPacket;\n+import io.netty.channel.socket.ServerSocketChannel;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.util.NetUtil;\n+import io.netty.util.internal.ObjectUtil;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.Inet4Address;\n+import java.net.Inet6Address;\n+import java.net.InetSocketAddress;\n+\n+/**\n+ * <p> {@link PcapWriteHandler} captures {@link ByteBuf} from {@link SocketChannel} / {@link ServerChannel}\n+ * or {@link DatagramPacket} and writes it into Pcap {@link OutputStream}. </p>\n+ *\n+ * <p>\n+ * Things to keep in mind when using {@link PcapWriteHandler} with TCP:\n+ *\n+ *    <ul>\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#channelActive(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (SYN, SYN+ACK, ACK) is simulated as new connection in Pcap. </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#handlerRemoved(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (FIN+ACK, FIN+ACK, ACK) is simulated as connection shutdown in Pcap.  </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#exceptionCaught(ChannelHandlerContext, Throwable)}\n+ *        is called, a fake TCP RST is sent to simulate connection Reset in Pcap. </li>\n+ *\n+ *        <li> ACK is sent each time data is send / received. </li>\n+ *\n+ *        <li> Zero Length Data Packets can cause TCP Double ACK error in Wireshark. To tackle this,\n+ *        set {@code captureZeroByte} to {@code false}. </li>\n+ *    </ul>\n+ * </p>\n+ */\n+public final class PcapWriteHandler extends ChannelDuplexHandler {\n+\n+    private final InternalLogger logger = InternalLoggerFactory.getInstance(PcapWriteHandler.class);\n+\n+    /**\n+     * {@link PcapWriter} Instance\n+     */\n+    private PcapWriter pCapWriter;\n+\n+    /**\n+     * {@link OutputStream} where we'll write Pcap data.\n+     */\n+    private final OutputStream outputStream;\n+\n+    /**\n+     * {@code true} if we want to capture packets with zero bytes else {@code false}.\n+     */\n+    private final boolean captureZeroByte;\n+\n+    /**\n+     * {@code true} if we want to write Pcap Global Header on initialization of\n+     * {@link PcapWriter} else {@code false}.\n+     */\n+    private final boolean writePcapGlobalHeader;\n+\n+    /**\n+     * TCP Sender Segment Number.\n+     * It'll start with 1 and keep incrementing with number of bytes read/sent.\n+     */\n+    private int sendSegmentNumber = 1;\n+\n+    /**\n+     * TCP Receiver Segment Number.\n+     * It'll start with 1 and keep incrementing with number of bytes read/sent.\n+     */\n+    private int receiveSegmentNumber = 1;\n+\n+    /**\n+     * Source Address\n+     */\n+    private InetSocketAddress srcAddr;\n+\n+    /**\n+     * Destination Address\n+     */\n+    private InetSocketAddress dstAddr;\n+\n+    /**\n+     * Create new {@link PcapWriteHandler} Instance.\n+     * {@code captureZeroByte} is set to {@code false} and\n+     * {@code writePcapGlobalHeader} is set to {@code true}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     * @throws NullPointerException If {@link OutputStream} is {@code null} then we'll throw an\n+     *                              {@link NullPointerException}\n+     */\n+    public PcapWriteHandler(OutputStream outputStream) {\n+        this(outputStream, false, true);\n+    }\n+\n+    /**\n+     * Create new {@link PcapWriteHandler} Instance\n+     *\n+     * @param outputStream          OutputStream where Pcap data will be written\n+     * @param captureZeroByte       Set to {@code true} to enable capturing packets with empty (0 bytes) payload.\n+     *                              Otherwise, if set to {@code false}, empty packets will be filtered out.\n+     * @param writePcapGlobalHeader Set to {@code true} to write Pcap Global Header on initialization.\n+     *                              Otherwise, if set to {@code false}, Pcap Global Header will not be written\n+     *                              on initialization. This could when writing Pcap data on a existing file where\n+     *                              Pcap Global Header is already present.\n+     * @throws NullPointerException If {@link OutputStream} is {@code null} then we'll throw an\n+     *                              {@link NullPointerException}\n+     */\n+    public PcapWriteHandler(OutputStream outputStream, boolean captureZeroByte, boolean writePcapGlobalHeader) {\n+        this.outputStream = ObjectUtil.checkNotNull(outputStream, \"OutputStream\");\n+        this.captureZeroByte = captureZeroByte;\n+        this.writePcapGlobalHeader = writePcapGlobalHeader;\n+    }\n+\n+    @Override\n+    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+\n+        ByteBufAllocator byteBufAllocator = ctx.alloc();\n+\n+        /*\n+         * If `writePcapGlobalHeader` is `true`, we'll write Pcap Global Header.\n+         */\n+        if (writePcapGlobalHeader) {\n+\n+            ByteBuf byteBuf = byteBufAllocator.buffer();\n+            try {\n+                this.pCapWriter = new PcapWriter(this.outputStream, byteBuf);\n+            } catch (IOException ex) {\n+                ctx.channel().close();\n+                ctx.fireExceptionCaught(ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a313affb01402aa5cffa51c22e9ed62c9c44ea1"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE0OTM5NA==", "bodyText": "We need to call ctx.fireExceptionCaught(ex) because an IOException is caught due to OutputStream. So we'll close the channel since OutputStream has errors and writing packets won't work.", "url": "https://github.com/netty/netty/pull/10498#discussion_r486149394", "createdAt": "2020-09-10T08:12:01Z", "author": {"login": "hyperxpro"}, "path": "handler/src/main/java/io/netty/handler/pcap/PcapWriteHandler.java", "diffHunk": "@@ -0,0 +1,523 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.pcap;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelDuplexHandler;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInboundHandlerAdapter;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.channel.ServerChannel;\n+import io.netty.channel.socket.DatagramChannel;\n+import io.netty.channel.socket.DatagramPacket;\n+import io.netty.channel.socket.ServerSocketChannel;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.util.NetUtil;\n+import io.netty.util.internal.ObjectUtil;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import java.net.Inet4Address;\n+import java.net.Inet6Address;\n+import java.net.InetSocketAddress;\n+\n+/**\n+ * <p> {@link PcapWriteHandler} captures {@link ByteBuf} from {@link SocketChannel} / {@link ServerChannel}\n+ * or {@link DatagramPacket} and writes it into Pcap {@link OutputStream}. </p>\n+ *\n+ * <p>\n+ * Things to keep in mind when using {@link PcapWriteHandler} with TCP:\n+ *\n+ *    <ul>\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#channelActive(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (SYN, SYN+ACK, ACK) is simulated as new connection in Pcap. </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#handlerRemoved(ChannelHandlerContext)} is called,\n+ *        a fake TCP 3-way handshake (FIN+ACK, FIN+ACK, ACK) is simulated as connection shutdown in Pcap.  </li>\n+ *\n+ *        <li> Whenever {@link ChannelInboundHandlerAdapter#exceptionCaught(ChannelHandlerContext, Throwable)}\n+ *        is called, a fake TCP RST is sent to simulate connection Reset in Pcap. </li>\n+ *\n+ *        <li> ACK is sent each time data is send / received. </li>\n+ *\n+ *        <li> Zero Length Data Packets can cause TCP Double ACK error in Wireshark. To tackle this,\n+ *        set {@code captureZeroByte} to {@code false}. </li>\n+ *    </ul>\n+ * </p>\n+ */\n+public final class PcapWriteHandler extends ChannelDuplexHandler {\n+\n+    private final InternalLogger logger = InternalLoggerFactory.getInstance(PcapWriteHandler.class);\n+\n+    /**\n+     * {@link PcapWriter} Instance\n+     */\n+    private PcapWriter pCapWriter;\n+\n+    /**\n+     * {@link OutputStream} where we'll write Pcap data.\n+     */\n+    private final OutputStream outputStream;\n+\n+    /**\n+     * {@code true} if we want to capture packets with zero bytes else {@code false}.\n+     */\n+    private final boolean captureZeroByte;\n+\n+    /**\n+     * {@code true} if we want to write Pcap Global Header on initialization of\n+     * {@link PcapWriter} else {@code false}.\n+     */\n+    private final boolean writePcapGlobalHeader;\n+\n+    /**\n+     * TCP Sender Segment Number.\n+     * It'll start with 1 and keep incrementing with number of bytes read/sent.\n+     */\n+    private int sendSegmentNumber = 1;\n+\n+    /**\n+     * TCP Receiver Segment Number.\n+     * It'll start with 1 and keep incrementing with number of bytes read/sent.\n+     */\n+    private int receiveSegmentNumber = 1;\n+\n+    /**\n+     * Source Address\n+     */\n+    private InetSocketAddress srcAddr;\n+\n+    /**\n+     * Destination Address\n+     */\n+    private InetSocketAddress dstAddr;\n+\n+    /**\n+     * Create new {@link PcapWriteHandler} Instance.\n+     * {@code captureZeroByte} is set to {@code false} and\n+     * {@code writePcapGlobalHeader} is set to {@code true}.\n+     *\n+     * @param outputStream OutputStream where Pcap data will be written\n+     * @throws NullPointerException If {@link OutputStream} is {@code null} then we'll throw an\n+     *                              {@link NullPointerException}\n+     */\n+    public PcapWriteHandler(OutputStream outputStream) {\n+        this(outputStream, false, true);\n+    }\n+\n+    /**\n+     * Create new {@link PcapWriteHandler} Instance\n+     *\n+     * @param outputStream          OutputStream where Pcap data will be written\n+     * @param captureZeroByte       Set to {@code true} to enable capturing packets with empty (0 bytes) payload.\n+     *                              Otherwise, if set to {@code false}, empty packets will be filtered out.\n+     * @param writePcapGlobalHeader Set to {@code true} to write Pcap Global Header on initialization.\n+     *                              Otherwise, if set to {@code false}, Pcap Global Header will not be written\n+     *                              on initialization. This could when writing Pcap data on a existing file where\n+     *                              Pcap Global Header is already present.\n+     * @throws NullPointerException If {@link OutputStream} is {@code null} then we'll throw an\n+     *                              {@link NullPointerException}\n+     */\n+    public PcapWriteHandler(OutputStream outputStream, boolean captureZeroByte, boolean writePcapGlobalHeader) {\n+        this.outputStream = ObjectUtil.checkNotNull(outputStream, \"OutputStream\");\n+        this.captureZeroByte = captureZeroByte;\n+        this.writePcapGlobalHeader = writePcapGlobalHeader;\n+    }\n+\n+    @Override\n+    public void channelActive(ChannelHandlerContext ctx) throws Exception {\n+\n+        ByteBufAllocator byteBufAllocator = ctx.alloc();\n+\n+        /*\n+         * If `writePcapGlobalHeader` is `true`, we'll write Pcap Global Header.\n+         */\n+        if (writePcapGlobalHeader) {\n+\n+            ByteBuf byteBuf = byteBufAllocator.buffer();\n+            try {\n+                this.pCapWriter = new PcapWriter(this.outputStream, byteBuf);\n+            } catch (IOException ex) {\n+                ctx.channel().close();\n+                ctx.fireExceptionCaught(ex);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjEyODc3Mw=="}, "originalCommit": {"oid": "4a313affb01402aa5cffa51c22e9ed62c9c44ea1"}, "originalPosition": 158}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3673, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}