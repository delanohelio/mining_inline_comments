{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc5MTA2OTg4", "number": 10058, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzo0ODo0N1rODia0xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzo0ODo0N1rODia0xw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM3NDE3NjcxOnYy", "diffSide": "RIGHT", "path": "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxNzo0ODo0N1rOFtp64g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxODo0MTo1N1rOFtrh-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxNzA1OA==", "bodyText": "Despite being used in the spec, \"OWS\" is not a super intuitive name. I would propose something like:\n\"Invalid separator, only a single space or horizontal tab allowed, but received a '\" + c + \"'\"", "url": "https://github.com/netty/netty/pull/10058#discussion_r383417058", "createdAt": "2020-02-24T17:48:47Z", "author": {"login": "Bennett-Lynch"}, "path": "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java", "diffHunk": "@@ -819,19 +819,44 @@ private void splitHeader(AppendableCharSequence sb) {\n         }\n     }\n \n-    private static int findNonWhitespace(AppendableCharSequence sb, int offset) {\n+    private static int findNonSPLenient(AppendableCharSequence sb, int offset) {\n         for (int result = offset; result < sb.length(); ++result) {\n-            if (!Character.isWhitespace(sb.charAtUnsafe(result))) {\n+            char c = sb.charAtUnsafe(result);\n+            // See https://tools.ietf.org/html/rfc7230#section-3.5\n+            if (isSPLenient(c)) {\n+                continue;\n+            }\n+            if (Character.isWhitespace(c)) {\n+                // Any other whitespace delimiter is invalid\n+                throw new IllegalArgumentException(\"Invalid separator\");\n+            }\n+            return result;\n+        }\n+        return sb.length();\n+    }\n+\n+    private static int findSPLenient(AppendableCharSequence sb, int offset) {\n+        for (int result = offset; result < sb.length(); ++result) {\n+            if (isSPLenient(sb.charAtUnsafe(result))) {\n                 return result;\n             }\n         }\n         return sb.length();\n     }\n \n-    private static int findWhitespace(AppendableCharSequence sb, int offset) {\n+    private static boolean isSPLenient(char c) {\n+        // See https://tools.ietf.org/html/rfc7230#section-3.5\n+        return c == ' ' || c == (char) 0x09 || c == (char) 0x0B || c == (char) 0x0C || c == (char) 0x0D;\n+    }\n+\n+    private static int findNonWhitespace(AppendableCharSequence sb, int offset, boolean validateOWS) {\n         for (int result = offset; result < sb.length(); ++result) {\n-            if (Character.isWhitespace(sb.charAtUnsafe(result))) {\n+            char c = sb.charAtUnsafe(result);\n+            if (!Character.isWhitespace(c)) {\n                 return result;\n+            } else if (validateOWS && !isOWS(c)) {\n+                // Only OWS is supported for whitespace\n+                throw new IllegalArgumentException(\"Invalid separator, only OWS allowed\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "592fdb3ac59500f09d403877e3186524d2b0d71c"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ0MzQ1MA==", "bodyText": "@Bennett-Lynch good idea... done.", "url": "https://github.com/netty/netty/pull/10058#discussion_r383443450", "createdAt": "2020-02-24T18:41:57Z", "author": {"login": "normanmaurer"}, "path": "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java", "diffHunk": "@@ -819,19 +819,44 @@ private void splitHeader(AppendableCharSequence sb) {\n         }\n     }\n \n-    private static int findNonWhitespace(AppendableCharSequence sb, int offset) {\n+    private static int findNonSPLenient(AppendableCharSequence sb, int offset) {\n         for (int result = offset; result < sb.length(); ++result) {\n-            if (!Character.isWhitespace(sb.charAtUnsafe(result))) {\n+            char c = sb.charAtUnsafe(result);\n+            // See https://tools.ietf.org/html/rfc7230#section-3.5\n+            if (isSPLenient(c)) {\n+                continue;\n+            }\n+            if (Character.isWhitespace(c)) {\n+                // Any other whitespace delimiter is invalid\n+                throw new IllegalArgumentException(\"Invalid separator\");\n+            }\n+            return result;\n+        }\n+        return sb.length();\n+    }\n+\n+    private static int findSPLenient(AppendableCharSequence sb, int offset) {\n+        for (int result = offset; result < sb.length(); ++result) {\n+            if (isSPLenient(sb.charAtUnsafe(result))) {\n                 return result;\n             }\n         }\n         return sb.length();\n     }\n \n-    private static int findWhitespace(AppendableCharSequence sb, int offset) {\n+    private static boolean isSPLenient(char c) {\n+        // See https://tools.ietf.org/html/rfc7230#section-3.5\n+        return c == ' ' || c == (char) 0x09 || c == (char) 0x0B || c == (char) 0x0C || c == (char) 0x0D;\n+    }\n+\n+    private static int findNonWhitespace(AppendableCharSequence sb, int offset, boolean validateOWS) {\n         for (int result = offset; result < sb.length(); ++result) {\n-            if (Character.isWhitespace(sb.charAtUnsafe(result))) {\n+            char c = sb.charAtUnsafe(result);\n+            if (!Character.isWhitespace(c)) {\n                 return result;\n+            } else if (validateOWS && !isOWS(c)) {\n+                // Only OWS is supported for whitespace\n+                throw new IllegalArgumentException(\"Invalid separator, only OWS allowed\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQxNzA1OA=="}, "originalCommit": {"oid": "592fdb3ac59500f09d403877e3186524d2b0d71c"}, "originalPosition": 91}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3487, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}