{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0OTUyODEw", "number": 10141, "title": "Replace usage() with freeBytes() in thresholds within hot paths of PoolChunkList", "bodyText": "Replace usage() with freeBytes() in thresholds within hot paths of PoolChunkList\nMotivation:\nPoolChunk.usage() method has non-trivial computations. It is used currently in hot path methods invoked when an allocation and de-allocation are happened.\nThe idea is to replace usage() output comparison against percent thresholds by Chunk.freeBytes plain comparison against absolute thresholds. In such way the majority of computations from the threshold conditions are moved to init logic.\nModifications:\nReplace PoolChunk.usage() conditions in PoolChunkList with equivalent conditions for PoolChunk.freeBytes()\nResult:\nImprove performance of allocation and de-allocation of ByteBuf from normal size caches", "createdAt": "2020-03-27T20:20:38Z", "url": "https://github.com/netty/netty/pull/10141", "merged": true, "mergeCommit": {"oid": "ea31b590375fbb9d6166f091b734bac9c5f135fe"}, "closed": true, "closedAt": "2020-03-31T20:11:16Z", "author": {"login": "netudima"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcR2Aq4AH2gAyMzk0OTUyODEwOjM1MzM4YWRjNjZkMmI3ODMzYzU4NzQ2YjdjZGM5ZTEwN2FkNmQyZjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcTILdYAFqTM4NTAzNDgyMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "35338adc66d2b7833c58746b7cdc9e107ad6d2f3", "author": {"user": {"login": "netudima", "name": "Dmitry Konstantinov"}}, "url": "https://github.com/netty/netty/commit/35338adc66d2b7833c58746b7cdc9e107ad6d2f3", "committedDate": "2020-03-27T19:38:24Z", "message": "Replace usage() with freeBytes() in thresholds within hot paths of PoolChunkList\n\nMotivation:\nPoolChunk.usage() method has non-trivial computations. It is used currently in hot path methods invoked when an allocation and de-allocation are happened.\nThe idea is to replace usage() output comparison against percent thresholds by Chunk.freeBytes plain comparison against absolute thresholds. In such way the majority of computations from the threshold conditions are moved to init logic.\n\nModifications:\nReplace PoolChunk.usage() conditions in PoolChunkList with equivalent conditions for PoolChunk.freeBytes()\n\nResult:\nImprove performance of allocation and de-allocation of ByteBuf from normal size cache pool"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc46a664c00b8618639b345bbfed39668375ef7f", "author": {"user": {"login": "netudima", "name": "Dmitry Konstantinov"}}, "url": "https://github.com/netty/netty/commit/dc46a664c00b8618639b345bbfed39668375ef7f", "committedDate": "2020-03-28T15:36:09Z", "message": "Use direct access to freeBytes in PoolChunk for allocation/de-allocation logic without extra sync block"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7802e9039ae7173513cef4c10d8d3ca0dbafd883", "author": {"user": {"login": "netudima", "name": "Dmitry Konstantinov"}}, "url": "https://github.com/netty/netty/commit/7802e9039ae7173513cef4c10d8d3ca0dbafd883", "committedDate": "2020-03-28T18:40:19Z", "message": "Add simple benchmark for PooledByteBufAllocator\nAdd -XX:BiasedLockingStartupDelay=0 to JMH benchmarks to correctly evaluate synchronization cost"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMzQxNjI3", "url": "https://github.com/netty/netty/pull/10141#pullrequestreview-383341627", "createdAt": "2020-03-28T19:22:40Z", "commit": {"oid": "7802e9039ae7173513cef4c10d8d3ca0dbafd883"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMzQxODIz", "url": "https://github.com/netty/netty/pull/10141#pullrequestreview-383341823", "createdAt": "2020-03-28T19:25:00Z", "commit": {"oid": "7802e9039ae7173513cef4c10d8d3ca0dbafd883"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e92a206a989efa2b317175f72b47209d1819383b", "author": {"user": {"login": "netudima", "name": "Dmitry Konstantinov"}}, "url": "https://github.com/netty/netty/commit/e92a206a989efa2b317175f72b47209d1819383b", "committedDate": "2020-03-29T13:15:28Z", "message": "Add consumeCPU to SimpleByteBufPooledAllocatorBenchmark to amortize heavyweight (for the CPU cache) atomic operations using by acquire/release on pool, based on review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNjY4OTYw", "url": "https://github.com/netty/netty/pull/10141#pullrequestreview-383668960", "createdAt": "2020-03-30T09:16:29Z", "commit": {"oid": "e92a206a989efa2b317175f72b47209d1819383b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwOToxNjoyOVrOF9go5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwOToxNjoyOVrOF9go5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA0MjIxNQ==", "bodyText": "@netudima nit: can you add a comment to explain the \"formula\" you used to calculate both ?", "url": "https://github.com/netty/netty/pull/10141#discussion_r400042215", "createdAt": "2020-03-30T09:16:29Z", "author": {"login": "normanmaurer"}, "path": "buffer/src/main/java/io/netty/buffer/PoolChunkList.java", "diffHunk": "@@ -49,6 +51,8 @@\n         this.minUsage = minUsage;\n         this.maxUsage = maxUsage;\n         maxCapacity = calculateMaxCapacity(minUsage, chunkSize);\n+        freeMinThreshold = (maxUsage == 100) ? 0 : (int) (chunkSize * (100L - maxUsage + 1) / 100L);\n+        freeMaxThreshold = (minUsage == 100) ? 0 : (int) (chunkSize * (100L - minUsage + 1) / 100L - 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92a206a989efa2b317175f72b47209d1819383b"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNjcwNjYz", "url": "https://github.com/netty/netty/pull/10141#pullrequestreview-383670663", "createdAt": "2020-03-30T09:18:45Z", "commit": {"oid": "e92a206a989efa2b317175f72b47209d1819383b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwOToxODo0NVrOF9gujw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwOToxODo0NVrOF9gujw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA0MzY2Mw==", "bodyText": "@netudima can you create a new PooledByteBufAllocator instance in a @Setup method and use it ? Otherwise it may not produce fair results as it may have already stuff cached from before etc. You may even want to disable ThreadLocal caches all together when doing so to ensure you really hit the PoolArena. WDYT ?", "url": "https://github.com/netty/netty/pull/10141#discussion_r400043663", "createdAt": "2020-03-30T09:18:45Z", "author": {"login": "normanmaurer"}, "path": "microbench/src/main/java/io/netty/microbench/buffer/SimpleByteBufPooledAllocatorBenchmark.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.microbench.buffer;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import io.netty.microbench.util.AbstractMicrobenchmark;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+@State(Scope.Benchmark)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+public class SimpleByteBufPooledAllocatorBenchmark extends AbstractMicrobenchmark {\n+\n+    public SimpleByteBufPooledAllocatorBenchmark() {\n+        super(true, false);\n+    }\n+\n+    @Param({\"123\", \"1234\", \"12345\", \"123456\", \"1234567\"})\n+    public int size;\n+\n+    @Param({\"0\", \"5\", \"10\", \"100\"})\n+    public long tokens;\n+\n+    @Benchmark\n+    public boolean getAndRelease() {\n+        ByteBufAllocator alloc = PooledByteBufAllocator.DEFAULT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92a206a989efa2b317175f72b47209d1819383b"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ad322e837b69a1215099c7db07dce4d9e4cb809", "author": {"user": {"login": "netudima", "name": "Dmitry Konstantinov"}}, "url": "https://github.com/netty/netty/commit/9ad322e837b69a1215099c7db07dce4d9e4cb809", "committedDate": "2020-03-31T17:59:25Z", "message": "Adjust calculation of freeMinThreshold/freeMaxThreshold to be fully aligned with old usage()-based thresholds, add an explanation for freeMinThreshold/freeMaxThreshold formulas.\nAdd enabled and disabled thread pool cache options in SimpleByteBufPooledAllocatorBenchmark."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzg1MDM0ODIy", "url": "https://github.com/netty/netty/pull/10141#pullrequestreview-385034822", "createdAt": "2020-03-31T19:22:24Z", "commit": {"oid": "9ad322e837b69a1215099c7db07dce4d9e4cb809"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 213, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}