{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk3MDk4MTA4", "number": 10157, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODoxODowMlrODt2Gtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODoxODo0OVrODt2HrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Mzk4OTY2OnYy", "diffSide": "RIGHT", "path": "codec-http/src/test/java/io/netty/handler/codec/http/multipart/AbstractMemoryHttpDataTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODoxODowM1rOF_gNpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODo0Mjo1NFrOF_hIRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzMjM5MA==", "bodyText": "@seedeed do we need to release this buf ?", "url": "https://github.com/netty/netty/pull/10157#discussion_r402132390", "createdAt": "2020-04-02T08:18:03Z", "author": {"login": "normanmaurer"}, "path": "codec-http/src/test/java/io/netty/handler/codec/http/multipart/AbstractMemoryHttpDataTest.java", "diffHunk": "@@ -19,22 +19,46 @@\n import io.netty.buffer.ByteBufInputStream;\n import io.netty.buffer.ByteBufUtil;\n import io.netty.buffer.Unpooled;\n-import io.netty.buffer.UnpooledByteBufAllocator;\n+import io.netty.util.internal.ThreadLocalRandom;\n \n import org.junit.Test;\n \n import java.io.ByteArrayInputStream;\n-import java.io.IOException;\n+import java.io.File;\n+import java.io.FileOutputStream;\n import java.nio.charset.Charset;\n import java.security.SecureRandom;\n import java.util.Arrays;\n import java.util.Random;\n+import java.util.UUID;\n \n import static io.netty.util.CharsetUtil.*;\n import static org.junit.Assert.*;\n \n /** {@link AbstractMemoryHttpData} test cases. */\n public class AbstractMemoryHttpDataTest {\n+\n+    @Test\n+    public void testSetContentFromFile() throws Exception {\n+        TestHttpData test = new TestHttpData(\"test\", UTF_8, 0);\n+        File tmpFile = File.createTempFile(UUID.randomUUID().toString(), \".tmp\");\n+        tmpFile.deleteOnExit();\n+        FileOutputStream fos = new FileOutputStream(tmpFile);\n+        byte[] bytes = new byte[4096];\n+        ThreadLocalRandom.current().nextBytes(bytes);\n+        try {\n+            fos.write(bytes);\n+            fos.flush();\n+        } finally {\n+            fos.close();\n+        }\n+        test.setContent(tmpFile);\n+        ByteBuf buf = test.getByteBuf();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f91b4f3697a188046c9a0e993b158fc1feb4d68b"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjE0NzM5OQ==", "bodyText": "@normanmaurer this ByteBuf is held by AbstractMemoryHttpData. We can manually call its delete method to release it.", "url": "https://github.com/netty/netty/pull/10157#discussion_r402147399", "createdAt": "2020-04-02T08:42:54Z", "author": {"login": "seedeed"}, "path": "codec-http/src/test/java/io/netty/handler/codec/http/multipart/AbstractMemoryHttpDataTest.java", "diffHunk": "@@ -19,22 +19,46 @@\n import io.netty.buffer.ByteBufInputStream;\n import io.netty.buffer.ByteBufUtil;\n import io.netty.buffer.Unpooled;\n-import io.netty.buffer.UnpooledByteBufAllocator;\n+import io.netty.util.internal.ThreadLocalRandom;\n \n import org.junit.Test;\n \n import java.io.ByteArrayInputStream;\n-import java.io.IOException;\n+import java.io.File;\n+import java.io.FileOutputStream;\n import java.nio.charset.Charset;\n import java.security.SecureRandom;\n import java.util.Arrays;\n import java.util.Random;\n+import java.util.UUID;\n \n import static io.netty.util.CharsetUtil.*;\n import static org.junit.Assert.*;\n \n /** {@link AbstractMemoryHttpData} test cases. */\n public class AbstractMemoryHttpDataTest {\n+\n+    @Test\n+    public void testSetContentFromFile() throws Exception {\n+        TestHttpData test = new TestHttpData(\"test\", UTF_8, 0);\n+        File tmpFile = File.createTempFile(UUID.randomUUID().toString(), \".tmp\");\n+        tmpFile.deleteOnExit();\n+        FileOutputStream fos = new FileOutputStream(tmpFile);\n+        byte[] bytes = new byte[4096];\n+        ThreadLocalRandom.current().nextBytes(bytes);\n+        try {\n+            fos.write(bytes);\n+            fos.flush();\n+        } finally {\n+            fos.close();\n+        }\n+        test.setContent(tmpFile);\n+        ByteBuf buf = test.getByteBuf();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzMjM5MA=="}, "originalCommit": {"oid": "f91b4f3697a188046c9a0e993b158fc1feb4d68b"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5Mzk5MjEyOnYy", "diffSide": "RIGHT", "path": "codec-http/src/test/java/io/netty/handler/codec/http/multipart/AbstractMemoryHttpDataTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODoxODo0OVrOF_gPSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMlQwODoxODo0OVrOF_gPSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMjEzMjgwOQ==", "bodyText": "you should use PlatformDependent.threadLocalRandom()", "url": "https://github.com/netty/netty/pull/10157#discussion_r402132809", "createdAt": "2020-04-02T08:18:49Z", "author": {"login": "normanmaurer"}, "path": "codec-http/src/test/java/io/netty/handler/codec/http/multipart/AbstractMemoryHttpDataTest.java", "diffHunk": "@@ -19,22 +19,46 @@\n import io.netty.buffer.ByteBufInputStream;\n import io.netty.buffer.ByteBufUtil;\n import io.netty.buffer.Unpooled;\n-import io.netty.buffer.UnpooledByteBufAllocator;\n+import io.netty.util.internal.ThreadLocalRandom;\n \n import org.junit.Test;\n \n import java.io.ByteArrayInputStream;\n-import java.io.IOException;\n+import java.io.File;\n+import java.io.FileOutputStream;\n import java.nio.charset.Charset;\n import java.security.SecureRandom;\n import java.util.Arrays;\n import java.util.Random;\n+import java.util.UUID;\n \n import static io.netty.util.CharsetUtil.*;\n import static org.junit.Assert.*;\n \n /** {@link AbstractMemoryHttpData} test cases. */\n public class AbstractMemoryHttpDataTest {\n+\n+    @Test\n+    public void testSetContentFromFile() throws Exception {\n+        TestHttpData test = new TestHttpData(\"test\", UTF_8, 0);\n+        File tmpFile = File.createTempFile(UUID.randomUUID().toString(), \".tmp\");\n+        tmpFile.deleteOnExit();\n+        FileOutputStream fos = new FileOutputStream(tmpFile);\n+        byte[] bytes = new byte[4096];\n+        ThreadLocalRandom.current().nextBytes(bytes);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f91b4f3697a188046c9a0e993b158fc1feb4d68b"}, "originalPosition": 32}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3380, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}