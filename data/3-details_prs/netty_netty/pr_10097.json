{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg2MTIwNDkz", "number": 10097, "title": "Replace reflection usage with MethodHandles when performance matters", "bodyText": "Motivation:\nAs we have java8 as a minimum target we can use MethodHandles. We should do so when we expect to have a method called multiple times.\nModifications:\n\nReplace usage of reflection with MethodHandles where it makes sense\nRemove some code which was there to support java < 8\n\nResult:\nFaster code", "createdAt": "2020-03-10T13:03:54Z", "url": "https://github.com/netty/netty/pull/10097", "merged": true, "mergeCommit": {"oid": "fd0d06ee396a8c9c53674740dd5139b2875c072b"}, "closed": true, "closedAt": "2020-03-11T20:04:41Z", "author": {"login": "normanmaurer"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcMSJT1AH2gAyMzg2MTIwNDkzOjc5ZTdmYTAwZWI3MzczNWQ2ZGU4YTc1MWVmN2JiOTJlNzlkZmJmYTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcMonyVAFqTM3Mjg1MzU0Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "79e7fa00eb73735d6de8a751ef7bb92e79dfbfa8", "author": {"user": {"login": "normanmaurer", "name": "Norman Maurer"}}, "url": "https://github.com/netty/netty/commit/79e7fa00eb73735d6de8a751ef7bb92e79dfbfa8", "committedDate": "2020-03-10T13:01:38Z", "message": "Replace reflection usage with MethodHandles when performance matters\n\nMotivation:\n\nAs we have java8 as a minimum target we can use MethodHandles. We should do so when we expect to have a method called multiple times.\n\nModifications:\n\n- Replace usage of reflection with MethodHandles where it makes sense\n- Remove some code which was there to support java < 8\n\nResult:\n\nFaster code"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMzE1OTIz", "url": "https://github.com/netty/netty/pull/10097#pullrequestreview-372315923", "createdAt": "2020-03-10T20:57:08Z", "commit": {"oid": "79e7fa00eb73735d6de8a751ef7bb92e79dfbfa8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMDo1NzowOVrOF0gtLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMDo1NzowOVrOF0gtLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYwNjEyNg==", "bodyText": "MethodType.methodType(void.class, ByteBuffer.class)\n?", "url": "https://github.com/netty/netty/pull/10097#discussion_r390606126", "createdAt": "2020-03-10T20:57:09Z", "author": {"login": "carl-mastrangelo"}, "path": "common/src/main/java/io/netty/util/internal/CleanerJava9.java", "diffHunk": "@@ -30,46 +32,53 @@\n final class CleanerJava9 implements Cleaner {\n     private static final InternalLogger logger = InternalLoggerFactory.getInstance(CleanerJava9.class);\n \n-    private static final Method INVOKE_CLEANER;\n+    private static final MethodHandle INVOKE_CLEANER_HANDLE;\n \n     static {\n-        final Method method;\n+        final MethodHandle invokeCleanerHandle;\n         final Throwable error;\n         if (PlatformDependent0.hasUnsafe()) {\n             final ByteBuffer buffer = ByteBuffer.allocateDirect(1);\n-            Object maybeInvokeMethod = AccessController.doPrivileged((PrivilegedAction<Object>) () -> {\n+            Object maybeInvokeMethodHandle = AccessController.doPrivileged((PrivilegedAction<Object>) () -> {\n                 try {\n+                    MethodHandles.Lookup lookup = MethodHandles.lookup();\n                     // See https://bugs.openjdk.java.net/browse/JDK-8171377\n-                    Method m = PlatformDependent0.UNSAFE.getClass().getDeclaredMethod(\n-                            \"invokeCleaner\", ByteBuffer.class);\n-                    m.invoke(PlatformDependent0.UNSAFE, buffer);\n+                    MethodHandle m = lookup.findVirtual(\n+                            PlatformDependent0.UNSAFE.getClass(),\n+                            \"invokeCleaner\",\n+                            MethodType.methodType(void.class).appendParameterTypes(ByteBuffer.class)).", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79e7fa00eb73735d6de8a751ef7bb92e79dfbfa8"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMzE4NDQ4", "url": "https://github.com/netty/netty/pull/10097#pullrequestreview-372318448", "createdAt": "2020-03-10T21:00:25Z", "commit": {"oid": "79e7fa00eb73735d6de8a751ef7bb92e79dfbfa8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMTowMDoyNVrOF0g0LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMTowMDoyNVrOF0g0LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYwNzkxNw==", "bodyText": "In the past I have had pain using invokeExact (if the types aren't exactly right, normal covariance doesn't work, or something like that).\nConsider using plain invoke.   I'm moderately confident the \"exact\" overload doesn't have any performance benefit.", "url": "https://github.com/netty/netty/pull/10097#discussion_r390607917", "createdAt": "2020-03-10T21:00:25Z", "author": {"login": "carl-mastrangelo"}, "path": "common/src/main/java/io/netty/util/internal/CleanerJava9.java", "diffHunk": "@@ -78,7 +87,7 @@ public void freeDirectBuffer(ByteBuffer buffer) {\n         // See https://bugs.openjdk.java.net/browse/JDK-8191053.\n         if (System.getSecurityManager() == null) {\n             try {\n-                INVOKE_CLEANER.invoke(PlatformDependent0.UNSAFE, buffer);\n+                INVOKE_CLEANER_HANDLE.invokeExact(buffer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79e7fa00eb73735d6de8a751ef7bb92e79dfbfa8"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMzE5MzM1", "url": "https://github.com/netty/netty/pull/10097#pullrequestreview-372319335", "createdAt": "2020-03-10T21:01:50Z", "commit": {"oid": "79e7fa00eb73735d6de8a751ef7bb92e79dfbfa8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMTowMTo1MFrOF0g5Tw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQyMTowMTo1MFrOF0g5Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDYwOTIzMQ==", "bodyText": "Similar comment, just use the vararg form?", "url": "https://github.com/netty/netty/pull/10097#discussion_r390609231", "createdAt": "2020-03-10T21:01:50Z", "author": {"login": "carl-mastrangelo"}, "path": "handler/src/main/java/io/netty/handler/ssl/Conscrypt.java", "diffHunk": "@@ -16,23 +16,27 @@\n package io.netty.handler.ssl;\n \n import javax.net.ssl.SSLEngine;\n-import java.lang.reflect.InvocationTargetException;\n-import java.lang.reflect.Method;\n+import java.lang.invoke.MethodHandle;\n+import java.lang.invoke.MethodHandles;\n+import java.lang.invoke.MethodType;\n \n /**\n  * Contains methods that can be used to detect if conscrypt is usable.\n  */\n final class Conscrypt {\n     // This class exists to avoid loading other conscrypt related classes using features only available in JDK8+,\n     // because we need to maintain JDK6+ runtime compatibility.\n-    private static final Method IS_CONSCRYPT_SSLENGINE = loadIsConscryptEngine();\n+    private static final MethodHandle IS_CONSCRYPT_SSLENGINE = loadIsConscryptEngine();\n     private static final boolean CAN_INSTANCE_PROVIDER = canInstanceProvider();\n \n-    private static Method loadIsConscryptEngine() {\n+    private static MethodHandle loadIsConscryptEngine() {\n         try {\n+            MethodHandles.Lookup lookup = MethodHandles.lookup();\n+\n             Class<?> conscryptClass = Class.forName(\"org.conscrypt.Conscrypt\", true,\n                     ConscryptAlpnSslEngine.class.getClassLoader());\n-            return conscryptClass.getMethod(\"isConscrypt\", SSLEngine.class);\n+            return lookup.findStatic(conscryptClass, \"isConscrypt\", MethodType.methodType(boolean.class)\n+                    .appendParameterTypes(SSLEngine.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79e7fa00eb73735d6de8a751ef7bb92e79dfbfa8"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyMzIxMTI5", "url": "https://github.com/netty/netty/pull/10097#pullrequestreview-372321129", "createdAt": "2020-03-10T21:04:36Z", "commit": {"oid": "79e7fa00eb73735d6de8a751ef7bb92e79dfbfa8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79e386250eeb80af484b44f13d892d3d883c3ffd", "author": {"user": {"login": "normanmaurer", "name": "Norman Maurer"}}, "url": "https://github.com/netty/netty/commit/79e386250eeb80af484b44f13d892d3d883c3ffd", "committedDate": "2020-03-11T09:32:23Z", "message": "cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "afb8636285f9f6c7d343c3d69a3a4d31756b6c8b", "author": {"user": {"login": "normanmaurer", "name": "Norman Maurer"}}, "url": "https://github.com/netty/netty/commit/afb8636285f9f6c7d343c3d69a3a4d31756b6c8b", "committedDate": "2020-03-11T10:03:21Z", "message": "cleanup"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyNjI0NjYw", "url": "https://github.com/netty/netty/pull/10097#pullrequestreview-372624660", "createdAt": "2020-03-11T10:13:37Z", "commit": {"oid": "afb8636285f9f6c7d343c3d69a3a4d31756b6c8b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMDoxMzozN1rOF0wnDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMVQxMDoxMzozN1rOF0wnDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDg2NjcwMQ==", "bodyText": "I would create a  CRC32 castedChecksum = (CRC32) checksum to be captured&used on\n                @Override\n                public void update(ByteBuffer b) {\n                    castedChecksum.update(b);\n                }", "url": "https://github.com/netty/netty/pull/10097#discussion_r390866701", "createdAt": "2020-03-11T10:13:37Z", "author": {"login": "franz1981"}, "path": "codec/src/main/java/io/netty/handler/codec/compression/ByteBufChecksum.java", "diffHunk": "@@ -33,43 +32,34 @@\n  * byte array ({@link ByteBuf#hasArray()} is {@code true}) or not.\n  */\n abstract class ByteBufChecksum implements Checksum {\n-    private static final Method ADLER32_UPDATE_METHOD;\n-    private static final Method CRC32_UPDATE_METHOD;\n-\n-    static {\n-        // See if we can use fast-path when using ByteBuf that is not heap based as Adler32 and CRC32 added support\n-        // for update(ByteBuffer) in JDK8.\n-        ADLER32_UPDATE_METHOD = updateByteBuffer(new Adler32());\n-        CRC32_UPDATE_METHOD = updateByteBuffer(new CRC32());\n-    }\n \n     private final ByteProcessor updateProcessor = value -> {\n         update(value);\n         return true;\n     };\n \n-    private static Method updateByteBuffer(Checksum checksum) {\n-        try {\n-            Method method = checksum.getClass().getDeclaredMethod(\"update\", ByteBuffer.class);\n-            method.invoke(checksum, ByteBuffer.allocate(1));\n-            return method;\n-        } catch (Throwable ignore) {\n-            return null;\n-        }\n-    }\n-\n     static ByteBufChecksum wrapChecksum(Checksum checksum) {\n         requireNonNull(checksum, \"checksum\");\n         if (checksum instanceof ByteBufChecksum) {\n             return (ByteBufChecksum) checksum;\n         }\n-        if (checksum instanceof Adler32 && ADLER32_UPDATE_METHOD != null) {\n-            return new ReflectiveByteBufChecksum(checksum, ADLER32_UPDATE_METHOD);\n+        if (checksum instanceof Adler32) {\n+            return new OptimizedByteBufChecksum<Adler32>((Adler32) checksum) {\n+                @Override\n+                public void update(ByteBuffer b) {\n+                    checksum.update(b);\n+                }\n+            };\n         }\n-        if (checksum instanceof CRC32 && CRC32_UPDATE_METHOD != null) {\n-            return new ReflectiveByteBufChecksum(checksum, CRC32_UPDATE_METHOD);\n+        if (checksum instanceof CRC32) {\n+            return new OptimizedByteBufChecksum<CRC32>((CRC32) checksum) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afb8636285f9f6c7d343c3d69a3a4d31756b6c8b"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcyODUzNTQ2", "url": "https://github.com/netty/netty/pull/10097#pullrequestreview-372853546", "createdAt": "2020-03-11T15:12:50Z", "commit": {"oid": "afb8636285f9f6c7d343c3d69a3a4d31756b6c8b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 398, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}