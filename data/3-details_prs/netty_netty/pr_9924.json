{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwMTM3MTc1", "number": 9924, "title": "Allow a limit to be set on the decompressed buffer size for ZlibDecoders", "bodyText": "Motivation:\nIt is impossible to know in advance how much memory will be needed to\ndecompress a stream of bytes that was compressed using the DEFLATE\nalgorithm. In theory, up to 1032 times the compressed size could be\nneeded. For untrusted input, an attacker could exploit this to exhaust\nthe memory pool.\nModifications:\nZlibDecoder and its subclasses now support an optional limit on the size\nof the decompressed buffer. By default, if the limit is reached,\ndecompression stops and a DecompressionException is thrown. Behavior\nupon reaching the limit is modifiable by subclasses in case they desire\nsomething else.\nResult:\nThe decompressed buffer can now be limited to a configurable size, thus\nmitigating the possibility of memory pool exhaustion.\nThis fixes #6168 for JZlibDecoder and JdkZlibDecoder.", "createdAt": "2020-01-07T19:28:51Z", "url": "https://github.com/netty/netty/pull/9924", "merged": true, "mergeCommit": {"oid": "1543218d3e7afcb33a90b728b14370395a3deca0"}, "closed": true, "closedAt": "2020-01-31T11:11:07Z", "author": {"login": "rdicroce"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb4F270gH2gAyMzYwMTM3MTc1OjY0NGIxMjYxZWEwMGM0ZjA5MzQ1ZWZkOTM1ZTE4YzZiMjM3MDRiOGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABb_tL6jAFqTM1MTQzNzIzNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "644b1261ea00c4f09345efd935e18c6b23704b8e", "author": {"user": {"login": "rdicroce", "name": "Rich DiCroce"}}, "url": "https://github.com/netty/netty/commit/644b1261ea00c4f09345efd935e18c6b23704b8e", "committedDate": "2020-01-07T19:24:13Z", "message": "Allow a limit to be set on the decompressed buffer size for ZlibDecoders\n\nMotivation:\nIt is impossible to know in advance how much memory will be needed to\ndecompress a stream of bytes that was compressed using the DEFLATE\nalgorithm. In theory, up to 1032 times the compressed size could be\nneeded. For untrusted input, an attacker could exploit this to exhaust\nthe memory pool.\n\nModifications:\nZlibDecoder and its subclasses now support an optional limit on the size\nof the decompressed buffer. By default, if the limit is reached,\ndecompression stops and a DecompressionException is thrown. Behavior\nupon reaching the limit is modifiable by subclasses in case they desire\nsomething else.\n\nResult:\nThe decompressed buffer can now be limited to a configurable size, thus\nmitigating the possibility of memory pool exhaustion."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57e272aa5dbad10cc0dfd38a92f8eabdbb2131e0", "author": {"user": {"login": "rdicroce", "name": "Rich DiCroce"}}, "url": "https://github.com/netty/netty/commit/57e272aa5dbad10cc0dfd38a92f8eabdbb2131e0", "committedDate": "2020-01-09T18:20:06Z", "message": "Fix Checkstyle violation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQzMTQ3MjY3", "url": "https://github.com/netty/netty/pull/9924#pullrequestreview-343147267", "createdAt": "2020-01-15T11:14:39Z", "commit": {"oid": "57e272aa5dbad10cc0dfd38a92f8eabdbb2131e0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MDMwOTU1", "url": "https://github.com/netty/netty/pull/9924#pullrequestreview-346030955", "createdAt": "2020-01-21T16:49:07Z", "commit": {"oid": "57e272aa5dbad10cc0dfd38a92f8eabdbb2131e0"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNjo0OTowN1rOFgBOFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxNjo1MzoyM1rOFgBX8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTExODc0MQ==", "bodyText": "Can you add to the doc describing what 0 does?", "url": "https://github.com/netty/netty/pull/9924#discussion_r369118741", "createdAt": "2020-01-21T16:49:07Z", "author": {"login": "carl-mastrangelo"}, "path": "codec/src/main/java/io/netty/handler/codec/compression/JZlibDecoder.java", "diffHunk": "@@ -35,7 +35,17 @@\n      * @throws DecompressionException if failed to initialize zlib\n      */\n     public JZlibDecoder() {\n-        this(ZlibWrapper.ZLIB);\n+        this(ZlibWrapper.ZLIB, 0);\n+    }\n+\n+    /**\n+     * Creates a new instance with the default wrapper ({@link ZlibWrapper#ZLIB})\n+     * and specified maximum buffer allocation.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e272aa5dbad10cc0dfd38a92f8eabdbb2131e0"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTExODg1MA==", "bodyText": "same comment", "url": "https://github.com/netty/netty/pull/9924#discussion_r369118850", "createdAt": "2020-01-21T16:49:19Z", "author": {"login": "carl-mastrangelo"}, "path": "codec/src/main/java/io/netty/handler/codec/compression/JZlibDecoder.java", "diffHunk": "@@ -44,6 +54,17 @@ public JZlibDecoder() {\n      * @throws DecompressionException if failed to initialize zlib\n      */\n     public JZlibDecoder(ZlibWrapper wrapper) {\n+        this(wrapper, 0);\n+    }\n+\n+    /**\n+     * Creates a new instance with the specified wrapper and maximum buffer allocation.\n+     *\n+     * @throws DecompressionException if failed to initialize zlib\n+     */\n+    public JZlibDecoder(ZlibWrapper wrapper, int maxAllocation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e272aa5dbad10cc0dfd38a92f8eabdbb2131e0"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEyMDU2Mw==", "bodyText": "can this be private/final?", "url": "https://github.com/netty/netty/pull/9924#discussion_r369120563", "createdAt": "2020-01-21T16:52:16Z", "author": {"login": "carl-mastrangelo"}, "path": "codec/src/main/java/io/netty/handler/codec/compression/ZlibDecoder.java", "diffHunk": "@@ -16,16 +16,72 @@\n package io.netty.handler.codec.compression;\n \n import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelHandlerContext;\n import io.netty.handler.codec.ByteToMessageDecoder;\n \n /**\n  * Decompresses a {@link ByteBuf} using the deflate algorithm.\n  */\n public abstract class ZlibDecoder extends ByteToMessageDecoder {\n \n+    /**\n+     * Maximum allowed size of the decompression buffer.\n+     */\n+    protected int maxAllocation;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e272aa5dbad10cc0dfd38a92f8eabdbb2131e0"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEyMTI2NA==", "bodyText": "optional: check preferredSize is non-negative?", "url": "https://github.com/netty/netty/pull/9924#discussion_r369121264", "createdAt": "2020-01-21T16:53:23Z", "author": {"login": "carl-mastrangelo"}, "path": "codec/src/main/java/io/netty/handler/codec/compression/ZlibDecoder.java", "diffHunk": "@@ -16,16 +16,72 @@\n package io.netty.handler.codec.compression;\n \n import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelHandlerContext;\n import io.netty.handler.codec.ByteToMessageDecoder;\n \n /**\n  * Decompresses a {@link ByteBuf} using the deflate algorithm.\n  */\n public abstract class ZlibDecoder extends ByteToMessageDecoder {\n \n+    /**\n+     * Maximum allowed size of the decompression buffer.\n+     */\n+    protected int maxAllocation;\n+\n+    /**\n+     * Same as {@link #ZlibDecoder(int)} with maxAllocation = 0.\n+     */\n+    public ZlibDecoder() {\n+        this(0);\n+    }\n+\n+    /**\n+     * Construct a new ZlibDecoder.\n+     * @param maxAllocation\n+     *          Maximum size of the decompression buffer. Must be &gt;= 0.\n+     *          If zero, maximum size is decided by the {@link ByteBufAllocator}.\n+     */\n+    public ZlibDecoder(int maxAllocation) {\n+        if (maxAllocation < 0) {\n+            throw new IllegalArgumentException(\"maxAllocation must be >= 0\");\n+        }\n+        this.maxAllocation = maxAllocation;\n+    }\n+\n     /**\n      * Returns {@code true} if and only if the end of the compressed stream\n      * has been reached.\n      */\n     public abstract boolean isClosed();\n+\n+    /**\n+     * Allocate or expand the decompression buffer, without exceeding the maximum allocation.\n+     * Calls {@link #maxAllocationReached(ByteBuf)} if the buffer is full and cannot be expanded further.\n+     */\n+    protected ByteBuf prepareDecompressBuffer(ChannelHandlerContext ctx, ByteBuf buffer, int preferredSize) {\n+        if (buffer == null) {\n+            if (maxAllocation == 0) {\n+                return ctx.alloc().heapBuffer(preferredSize);\n+            } else {\n+                return ctx.alloc().heapBuffer(Math.min(preferredSize, maxAllocation), maxAllocation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e272aa5dbad10cc0dfd38a92f8eabdbb2131e0"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ2MTA5MjUx", "url": "https://github.com/netty/netty/pull/9924#pullrequestreview-346109251", "createdAt": "2020-01-21T18:49:37Z", "commit": {"oid": "57e272aa5dbad10cc0dfd38a92f8eabdbb2131e0"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxODo0OTozOFrOFgE7kQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMVQxOTowNzowOFrOFgFcjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE3OTUzNw==", "bodyText": "+1", "url": "https://github.com/netty/netty/pull/9924#discussion_r369179537", "createdAt": "2020-01-21T18:49:38Z", "author": {"login": "njhill"}, "path": "codec/src/main/java/io/netty/handler/codec/compression/JZlibDecoder.java", "diffHunk": "@@ -35,7 +35,17 @@\n      * @throws DecompressionException if failed to initialize zlib\n      */\n     public JZlibDecoder() {\n-        this(ZlibWrapper.ZLIB);\n+        this(ZlibWrapper.ZLIB, 0);\n+    }\n+\n+    /**\n+     * Creates a new instance with the default wrapper ({@link ZlibWrapper#ZLIB})\n+     * and specified maximum buffer allocation.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTExODc0MQ=="}, "originalCommit": {"oid": "57e272aa5dbad10cc0dfd38a92f8eabdbb2131e0"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE4MDI4OQ==", "bodyText": "nit: else block not needed", "url": "https://github.com/netty/netty/pull/9924#discussion_r369180289", "createdAt": "2020-01-21T18:51:07Z", "author": {"login": "njhill"}, "path": "codec/src/main/java/io/netty/handler/codec/compression/ZlibDecoder.java", "diffHunk": "@@ -16,16 +16,72 @@\n package io.netty.handler.codec.compression;\n \n import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelHandlerContext;\n import io.netty.handler.codec.ByteToMessageDecoder;\n \n /**\n  * Decompresses a {@link ByteBuf} using the deflate algorithm.\n  */\n public abstract class ZlibDecoder extends ByteToMessageDecoder {\n \n+    /**\n+     * Maximum allowed size of the decompression buffer.\n+     */\n+    protected int maxAllocation;\n+\n+    /**\n+     * Same as {@link #ZlibDecoder(int)} with maxAllocation = 0.\n+     */\n+    public ZlibDecoder() {\n+        this(0);\n+    }\n+\n+    /**\n+     * Construct a new ZlibDecoder.\n+     * @param maxAllocation\n+     *          Maximum size of the decompression buffer. Must be &gt;= 0.\n+     *          If zero, maximum size is decided by the {@link ByteBufAllocator}.\n+     */\n+    public ZlibDecoder(int maxAllocation) {\n+        if (maxAllocation < 0) {\n+            throw new IllegalArgumentException(\"maxAllocation must be >= 0\");\n+        }\n+        this.maxAllocation = maxAllocation;\n+    }\n+\n     /**\n      * Returns {@code true} if and only if the end of the compressed stream\n      * has been reached.\n      */\n     public abstract boolean isClosed();\n+\n+    /**\n+     * Allocate or expand the decompression buffer, without exceeding the maximum allocation.\n+     * Calls {@link #maxAllocationReached(ByteBuf)} if the buffer is full and cannot be expanded further.\n+     */\n+    protected ByteBuf prepareDecompressBuffer(ChannelHandlerContext ctx, ByteBuf buffer, int preferredSize) {\n+        if (buffer == null) {\n+            if (maxAllocation == 0) {\n+                return ctx.alloc().heapBuffer(preferredSize);\n+            } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e272aa5dbad10cc0dfd38a92f8eabdbb2131e0"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE4MzAyNQ==", "bodyText": "I think either the second ensureWritable param should be false or the return should be compared to 3 rather than 1?", "url": "https://github.com/netty/netty/pull/9924#discussion_r369183025", "createdAt": "2020-01-21T18:56:43Z", "author": {"login": "njhill"}, "path": "codec/src/main/java/io/netty/handler/codec/compression/ZlibDecoder.java", "diffHunk": "@@ -16,16 +16,72 @@\n package io.netty.handler.codec.compression;\n \n import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelHandlerContext;\n import io.netty.handler.codec.ByteToMessageDecoder;\n \n /**\n  * Decompresses a {@link ByteBuf} using the deflate algorithm.\n  */\n public abstract class ZlibDecoder extends ByteToMessageDecoder {\n \n+    /**\n+     * Maximum allowed size of the decompression buffer.\n+     */\n+    protected int maxAllocation;\n+\n+    /**\n+     * Same as {@link #ZlibDecoder(int)} with maxAllocation = 0.\n+     */\n+    public ZlibDecoder() {\n+        this(0);\n+    }\n+\n+    /**\n+     * Construct a new ZlibDecoder.\n+     * @param maxAllocation\n+     *          Maximum size of the decompression buffer. Must be &gt;= 0.\n+     *          If zero, maximum size is decided by the {@link ByteBufAllocator}.\n+     */\n+    public ZlibDecoder(int maxAllocation) {\n+        if (maxAllocation < 0) {\n+            throw new IllegalArgumentException(\"maxAllocation must be >= 0\");\n+        }\n+        this.maxAllocation = maxAllocation;\n+    }\n+\n     /**\n      * Returns {@code true} if and only if the end of the compressed stream\n      * has been reached.\n      */\n     public abstract boolean isClosed();\n+\n+    /**\n+     * Allocate or expand the decompression buffer, without exceeding the maximum allocation.\n+     * Calls {@link #maxAllocationReached(ByteBuf)} if the buffer is full and cannot be expanded further.\n+     */\n+    protected ByteBuf prepareDecompressBuffer(ChannelHandlerContext ctx, ByteBuf buffer, int preferredSize) {\n+        if (buffer == null) {\n+            if (maxAllocation == 0) {\n+                return ctx.alloc().heapBuffer(preferredSize);\n+            } else {\n+                return ctx.alloc().heapBuffer(Math.min(preferredSize, maxAllocation), maxAllocation);\n+            }\n+        }\n+\n+        if (buffer.ensureWritable(preferredSize, true) == 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e272aa5dbad10cc0dfd38a92f8eabdbb2131e0"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE4NTg1NQ==", "bodyText": "For consistency shouldn't maxAllocationReached be called here in the preferredSize < maxAllocation case?", "url": "https://github.com/netty/netty/pull/9924#discussion_r369185855", "createdAt": "2020-01-21T19:02:29Z", "author": {"login": "njhill"}, "path": "codec/src/main/java/io/netty/handler/codec/compression/ZlibDecoder.java", "diffHunk": "@@ -16,16 +16,72 @@\n package io.netty.handler.codec.compression;\n \n import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelHandlerContext;\n import io.netty.handler.codec.ByteToMessageDecoder;\n \n /**\n  * Decompresses a {@link ByteBuf} using the deflate algorithm.\n  */\n public abstract class ZlibDecoder extends ByteToMessageDecoder {\n \n+    /**\n+     * Maximum allowed size of the decompression buffer.\n+     */\n+    protected int maxAllocation;\n+\n+    /**\n+     * Same as {@link #ZlibDecoder(int)} with maxAllocation = 0.\n+     */\n+    public ZlibDecoder() {\n+        this(0);\n+    }\n+\n+    /**\n+     * Construct a new ZlibDecoder.\n+     * @param maxAllocation\n+     *          Maximum size of the decompression buffer. Must be &gt;= 0.\n+     *          If zero, maximum size is decided by the {@link ByteBufAllocator}.\n+     */\n+    public ZlibDecoder(int maxAllocation) {\n+        if (maxAllocation < 0) {\n+            throw new IllegalArgumentException(\"maxAllocation must be >= 0\");\n+        }\n+        this.maxAllocation = maxAllocation;\n+    }\n+\n     /**\n      * Returns {@code true} if and only if the end of the compressed stream\n      * has been reached.\n      */\n     public abstract boolean isClosed();\n+\n+    /**\n+     * Allocate or expand the decompression buffer, without exceeding the maximum allocation.\n+     * Calls {@link #maxAllocationReached(ByteBuf)} if the buffer is full and cannot be expanded further.\n+     */\n+    protected ByteBuf prepareDecompressBuffer(ChannelHandlerContext ctx, ByteBuf buffer, int preferredSize) {\n+        if (buffer == null) {\n+            if (maxAllocation == 0) {\n+                return ctx.alloc().heapBuffer(preferredSize);\n+            } else {\n+                return ctx.alloc().heapBuffer(Math.min(preferredSize, maxAllocation), maxAllocation);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTEyMTI2NA=="}, "originalCommit": {"oid": "57e272aa5dbad10cc0dfd38a92f8eabdbb2131e0"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTE4Nzk4Mw==", "bodyText": "Not sure that the semantics of the method are clear... if it's overridden to not throw then what state will the provided buffer be in, what is the impl expected to do with it and what is it expected to return? Maybe it would make most sense to pass false for the force param of ensureWritable above so that the buffer isn't changed, and also pass preferredSize and ctx to this method as additional parameters?\nnit: and maybe clearer method name would be something like decompressionBufferExhausted?", "url": "https://github.com/netty/netty/pull/9924#discussion_r369187983", "createdAt": "2020-01-21T19:07:08Z", "author": {"login": "njhill"}, "path": "codec/src/main/java/io/netty/handler/codec/compression/ZlibDecoder.java", "diffHunk": "@@ -16,16 +16,72 @@\n package io.netty.handler.codec.compression;\n \n import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelHandlerContext;\n import io.netty.handler.codec.ByteToMessageDecoder;\n \n /**\n  * Decompresses a {@link ByteBuf} using the deflate algorithm.\n  */\n public abstract class ZlibDecoder extends ByteToMessageDecoder {\n \n+    /**\n+     * Maximum allowed size of the decompression buffer.\n+     */\n+    protected int maxAllocation;\n+\n+    /**\n+     * Same as {@link #ZlibDecoder(int)} with maxAllocation = 0.\n+     */\n+    public ZlibDecoder() {\n+        this(0);\n+    }\n+\n+    /**\n+     * Construct a new ZlibDecoder.\n+     * @param maxAllocation\n+     *          Maximum size of the decompression buffer. Must be &gt;= 0.\n+     *          If zero, maximum size is decided by the {@link ByteBufAllocator}.\n+     */\n+    public ZlibDecoder(int maxAllocation) {\n+        if (maxAllocation < 0) {\n+            throw new IllegalArgumentException(\"maxAllocation must be >= 0\");\n+        }\n+        this.maxAllocation = maxAllocation;\n+    }\n+\n     /**\n      * Returns {@code true} if and only if the end of the compressed stream\n      * has been reached.\n      */\n     public abstract boolean isClosed();\n+\n+    /**\n+     * Allocate or expand the decompression buffer, without exceeding the maximum allocation.\n+     * Calls {@link #maxAllocationReached(ByteBuf)} if the buffer is full and cannot be expanded further.\n+     */\n+    protected ByteBuf prepareDecompressBuffer(ChannelHandlerContext ctx, ByteBuf buffer, int preferredSize) {\n+        if (buffer == null) {\n+            if (maxAllocation == 0) {\n+                return ctx.alloc().heapBuffer(preferredSize);\n+            } else {\n+                return ctx.alloc().heapBuffer(Math.min(preferredSize, maxAllocation), maxAllocation);\n+            }\n+        }\n+\n+        if (buffer.ensureWritable(preferredSize, true) == 1) {\n+            return maxAllocationReached(buffer);\n+        }\n+\n+        return buffer;\n+    }\n+\n+    /**\n+     * Called when the decompression buffer cannot be expanded further.\n+     * Default implementation throws an exception, but subclasses can override to change behavior.\n+     */\n+    protected ByteBuf maxAllocationReached(ByteBuf buffer) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57e272aa5dbad10cc0dfd38a92f8eabdbb2131e0"}, "originalPosition": 68}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f90f44656fccba7b8c449949fc34af690e0f2f11", "author": {"user": {"login": "rdicroce", "name": "Rich DiCroce"}}, "url": "https://github.com/netty/netty/commit/f90f44656fccba7b8c449949fc34af690e0f2f11", "committedDate": "2020-01-23T20:28:42Z", "message": "Addressed review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5cf4389f333cc1a8647e05ce3b1d07bb0aa9b387", "author": {"user": {"login": "rdicroce", "name": "Rich DiCroce"}}, "url": "https://github.com/netty/netty/commit/5cf4389f333cc1a8647e05ce3b1d07bb0aa9b387", "committedDate": "2020-01-23T20:44:27Z", "message": "Fix Checkstyle issue"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NDAxOTQ3", "url": "https://github.com/netty/netty/pull/9924#pullrequestreview-349401947", "createdAt": "2020-01-28T14:11:22Z", "commit": {"oid": "5cf4389f333cc1a8647e05ce3b1d07bb0aa9b387"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNDoxMToyMlrOFimVYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNDoxMzowMFrOFimZQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgyMzk2OQ==", "bodyText": "nit: final", "url": "https://github.com/netty/netty/pull/9924#discussion_r371823969", "createdAt": "2020-01-28T14:11:22Z", "author": {"login": "normanmaurer"}, "path": "codec/src/test/java/io/netty/handler/codec/compression/ZlibTest.java", "diffHunk": "@@ -360,4 +381,34 @@ public void testZLIB_OR_NONE3() throws Exception {\n         stream.close();\n         return out.toByteArray();\n     }\n+\n+    private static class TestByteBufAllocator extends AbstractByteBufAllocator {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cf4389f333cc1a8647e05ce3b1d07bb0aa9b387"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgyNDI2Mw==", "bodyText": "call chDecoder.finish() and assert the return value", "url": "https://github.com/netty/netty/pull/9924#discussion_r371824263", "createdAt": "2020-01-28T14:11:52Z", "author": {"login": "normanmaurer"}, "path": "codec/src/test/java/io/netty/handler/codec/compression/ZlibTest.java", "diffHunk": "@@ -345,6 +351,21 @@ public void testZLIB_OR_NONE3() throws Exception {\n         testCompressLarge(ZlibWrapper.GZIP, ZlibWrapper.ZLIB_OR_NONE);\n     }\n \n+    @Test\n+    public void testMaxAllocation() throws Exception {\n+        int maxAllocation = 1024;\n+        EmbeddedChannel chDecoder = new EmbeddedChannel(createDecoder(ZlibWrapper.NONE, maxAllocation));\n+        TestByteBufAllocator alloc = new TestByteBufAllocator(chDecoder.alloc());\n+        chDecoder.config().setAllocator(alloc);\n+\n+        try {\n+            chDecoder.writeInbound(Unpooled.copiedBuffer(BYTES_LARGE));\n+            fail(\"decompressed size > maxAllocation, so should have thrown exception\");\n+        } catch (DecompressionException e) {\n+            assertEquals(maxAllocation, alloc.getMaxAllocation());\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cf4389f333cc1a8647e05ce3b1d07bb0aa9b387"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgyNDkzMA==", "bodyText": "nit: protected (as this is an abstract class)", "url": "https://github.com/netty/netty/pull/9924#discussion_r371824930", "createdAt": "2020-01-28T14:12:56Z", "author": {"login": "normanmaurer"}, "path": "codec/src/main/java/io/netty/handler/codec/compression/ZlibDecoder.java", "diffHunk": "@@ -16,16 +16,75 @@\n package io.netty.handler.codec.compression;\n \n import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelHandlerContext;\n import io.netty.handler.codec.ByteToMessageDecoder;\n \n /**\n  * Decompresses a {@link ByteBuf} using the deflate algorithm.\n  */\n public abstract class ZlibDecoder extends ByteToMessageDecoder {\n \n+    /**\n+     * Maximum allowed size of the decompression buffer.\n+     */\n+    protected final int maxAllocation;\n+\n+    /**\n+     * Same as {@link #ZlibDecoder(int)} with maxAllocation = 0.\n+     */\n+    public ZlibDecoder() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cf4389f333cc1a8647e05ce3b1d07bb0aa9b387"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTgyNDk2MQ==", "bodyText": "nit: protected (as this is an abstract class)", "url": "https://github.com/netty/netty/pull/9924#discussion_r371824961", "createdAt": "2020-01-28T14:13:00Z", "author": {"login": "normanmaurer"}, "path": "codec/src/main/java/io/netty/handler/codec/compression/ZlibDecoder.java", "diffHunk": "@@ -16,16 +16,75 @@\n package io.netty.handler.codec.compression;\n \n import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.channel.ChannelHandlerContext;\n import io.netty.handler.codec.ByteToMessageDecoder;\n \n /**\n  * Decompresses a {@link ByteBuf} using the deflate algorithm.\n  */\n public abstract class ZlibDecoder extends ByteToMessageDecoder {\n \n+    /**\n+     * Maximum allowed size of the decompression buffer.\n+     */\n+    protected final int maxAllocation;\n+\n+    /**\n+     * Same as {@link #ZlibDecoder(int)} with maxAllocation = 0.\n+     */\n+    public ZlibDecoder() {\n+        this(0);\n+    }\n+\n+    /**\n+     * Construct a new ZlibDecoder.\n+     * @param maxAllocation\n+     *          Maximum size of the decompression buffer. Must be &gt;= 0.\n+     *          If zero, maximum size is decided by the {@link ByteBufAllocator}.\n+     */\n+    public ZlibDecoder(int maxAllocation) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5cf4389f333cc1a8647e05ce3b1d07bb0aa9b387"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzQ5NjAzNjkw", "url": "https://github.com/netty/netty/pull/9924#pullrequestreview-349603690", "createdAt": "2020-01-28T18:29:09Z", "commit": {"oid": "5cf4389f333cc1a8647e05ce3b1d07bb0aa9b387"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9f0057bb47801090418afdcde0cb08781a87a8f", "author": {"user": {"login": "rdicroce", "name": "Rich DiCroce"}}, "url": "https://github.com/netty/netty/commit/d9f0057bb47801090418afdcde0cb08781a87a8f", "committedDate": "2020-01-29T14:45:55Z", "message": "Resolved review comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4666459f9be82a1a44582c47200d72e199296a4e", "author": {"user": {"login": "rdicroce", "name": "Rich DiCroce"}}, "url": "https://github.com/netty/netty/commit/4666459f9be82a1a44582c47200d72e199296a4e", "committedDate": "2020-01-29T15:15:45Z", "message": "Fix checkstyle violation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9b0378bdd71a3421bfdc35e83c12c93f1df4438b", "author": {"user": {"login": "rdicroce", "name": "Rich DiCroce"}}, "url": "https://github.com/netty/netty/commit/9b0378bdd71a3421bfdc35e83c12c93f1df4438b", "committedDate": "2020-01-30T14:40:04Z", "message": "Change constructors back to public (AKA fix build)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c32693b39568cb40f9c92cfc3a6c513c30f5066", "author": {"user": {"login": "rdicroce", "name": "Rich DiCroce"}}, "url": "https://github.com/netty/netty/commit/3c32693b39568cb40f9c92cfc3a6c513c30f5066", "committedDate": "2020-01-30T16:45:26Z", "message": "Fix tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNDM3MjM0", "url": "https://github.com/netty/netty/pull/9924#pullrequestreview-351437234", "createdAt": "2020-01-31T11:10:54Z", "commit": {"oid": "3c32693b39568cb40f9c92cfc3a6c513c30f5066"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 418, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}