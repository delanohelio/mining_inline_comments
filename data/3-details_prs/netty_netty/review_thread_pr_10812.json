{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1MzAzNDE1", "number": 10812, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMDozOTowMVrOE9k6vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNToyMTowOFrOFHOuew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMDAzNDU0OnYy", "diffSide": "RIGHT", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageBuilders.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMDozOTowMVrOH6VnAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMDozOTowMVrOH6VnAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkzMzUwNA==", "bodyText": "final ?", "url": "https://github.com/netty/netty/pull/10812#discussion_r530933504", "createdAt": "2020-11-26T10:39:01Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageBuilders.java", "diffHunk": "@@ -328,6 +345,166 @@ public MqttConnAckMessage build() {\n         }\n     }\n \n+    public static class ConnAckPropertiesBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8c67b5761a6ae5d6e738cfbc47b80fe855d794e"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMDAzNjQ5OnYy", "diffSide": "RIGHT", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageBuilders.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMDozOTozMFrOH6VoJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQwODo0NDoxOFrOH_teZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkzMzc5Nw==", "bodyText": "usually builders should return itself so you can use method chaining", "url": "https://github.com/netty/netty/pull/10812#discussion_r530933797", "createdAt": "2020-11-26T10:39:30Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageBuilders.java", "diffHunk": "@@ -328,6 +345,166 @@ public MqttConnAckMessage build() {\n         }\n     }\n \n+    public static class ConnAckPropertiesBuilder {\n+        private String clientId;\n+        private Long sessionExpiryInterval;\n+        private int receiveMaximum;\n+        private Byte maximumQos;\n+        private boolean retain;\n+        private Long maximumPacketSize;\n+        private int topicAliasMaximum;\n+        private String reasonString;\n+        private MqttProperties.UserProperties userProperties = new MqttProperties.UserProperties();\n+        private Boolean wildcardSubscriptionAvailable;\n+        private Boolean subscriptionIdentifiersAvailable;\n+        private Boolean sharedSubscriptionAvailable;\n+        private Integer serverKeepAlive;\n+        private String responseInformation;\n+        private String serverReference;\n+        private String authenticationMethod;\n+        private byte[] authenticationData;\n+\n+        public MqttProperties build() {\n+            final MqttProperties props = new MqttProperties();\n+            if (clientId != null) {\n+                props.add(new MqttProperties.StringProperty(MqttPropertyType.ASSIGNED_CLIENT_IDENTIFIER.value(),\n+                        clientId));\n+            }\n+            if (sessionExpiryInterval != null) {\n+                props.add(new MqttProperties.IntegerProperty(\n+                        MqttPropertyType.SESSION_EXPIRY_INTERVAL.value(), sessionExpiryInterval.intValue()));\n+            }\n+            if (receiveMaximum > 0) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.RECEIVE_MAXIMUM.value(), receiveMaximum));\n+            }\n+            if (maximumQos != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.MAXIMUM_QOS.value(), receiveMaximum));\n+            }\n+            props.add(new MqttProperties.IntegerProperty(MqttPropertyType.RETAIN_AVAILABLE.value(), retain ? 1 : 0));\n+            if (maximumPacketSize != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.MAXIMUM_PACKET_SIZE.value(),\n+                        maximumPacketSize.intValue()));\n+            }\n+            props.add(new MqttProperties.IntegerProperty(MqttPropertyType.TOPIC_ALIAS_MAXIMUM.value(),\n+                    topicAliasMaximum));\n+            if (reasonString != null) {\n+                props.add(new MqttProperties.StringProperty(MqttPropertyType.REASON_STRING.value(), reasonString));\n+            }\n+            props.add(userProperties);\n+            if (wildcardSubscriptionAvailable != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.WILDCARD_SUBSCRIPTION_AVAILABLE.value(),\n+                        wildcardSubscriptionAvailable ? 1 : 0));\n+            }\n+            if (subscriptionIdentifiersAvailable != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.SUBSCRIPTION_IDENTIFIER_AVAILABLE.value(),\n+                        subscriptionIdentifiersAvailable ? 1 : 0));\n+            }\n+            if (sharedSubscriptionAvailable != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.SHARED_SUBSCRIPTION_AVAILABLE.value(),\n+                        sharedSubscriptionAvailable ? 1 : 0));\n+            }\n+            if (serverKeepAlive != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.SERVER_KEEP_ALIVE.value(),\n+                        serverKeepAlive));\n+            }\n+            if (responseInformation != null) {\n+                props.add(new MqttProperties.StringProperty(MqttPropertyType.RESPONSE_INFORMATION.value(),\n+                        responseInformation));\n+            }\n+            if (serverReference != null) {\n+                props.add(new MqttProperties.StringProperty(MqttPropertyType.SERVER_REFERENCE.value(),\n+                        serverReference));\n+            }\n+            if (authenticationMethod != null) {\n+                props.add(new MqttProperties.StringProperty(MqttPropertyType.AUTHENTICATION_METHOD.value(),\n+                        authenticationMethod));\n+            }\n+            if (authenticationData != null) {\n+                props.add(new MqttProperties.BinaryProperty(MqttPropertyType.AUTHENTICATION_DATA.value(),\n+                        authenticationData));\n+            }\n+\n+            return props;\n+        }\n+\n+        public void sessionExpiryInterval(long seconds) {\n+            this.sessionExpiryInterval = seconds;\n+        }\n+\n+        public void receiveMaximum(int value) {\n+            if (value <= 0) {\n+                throw new IllegalArgumentException(\"receive maximum property must be > 0\");\n+            }\n+            this.receiveMaximum = value;\n+        }\n+\n+        public void maximumQos(byte value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8c67b5761a6ae5d6e738cfbc47b80fe855d794e"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTQ2ODQyMg==", "bodyText": "the intent was to have a declarative listing, something like:\nproperties.apply {\n   maximumQos = 1\n   assignedClientId = \"client1234\"\n   ....\n}\nto mimic in Java as:\nwithProperties(p -> {\n    p.maximumQos(1);\n    p.assignedClientId(\"client1234\");\n   ...\n})", "url": "https://github.com/netty/netty/pull/10812#discussion_r531468422", "createdAt": "2020-11-27T09:07:49Z", "author": {"login": "andsel"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageBuilders.java", "diffHunk": "@@ -328,6 +345,166 @@ public MqttConnAckMessage build() {\n         }\n     }\n \n+    public static class ConnAckPropertiesBuilder {\n+        private String clientId;\n+        private Long sessionExpiryInterval;\n+        private int receiveMaximum;\n+        private Byte maximumQos;\n+        private boolean retain;\n+        private Long maximumPacketSize;\n+        private int topicAliasMaximum;\n+        private String reasonString;\n+        private MqttProperties.UserProperties userProperties = new MqttProperties.UserProperties();\n+        private Boolean wildcardSubscriptionAvailable;\n+        private Boolean subscriptionIdentifiersAvailable;\n+        private Boolean sharedSubscriptionAvailable;\n+        private Integer serverKeepAlive;\n+        private String responseInformation;\n+        private String serverReference;\n+        private String authenticationMethod;\n+        private byte[] authenticationData;\n+\n+        public MqttProperties build() {\n+            final MqttProperties props = new MqttProperties();\n+            if (clientId != null) {\n+                props.add(new MqttProperties.StringProperty(MqttPropertyType.ASSIGNED_CLIENT_IDENTIFIER.value(),\n+                        clientId));\n+            }\n+            if (sessionExpiryInterval != null) {\n+                props.add(new MqttProperties.IntegerProperty(\n+                        MqttPropertyType.SESSION_EXPIRY_INTERVAL.value(), sessionExpiryInterval.intValue()));\n+            }\n+            if (receiveMaximum > 0) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.RECEIVE_MAXIMUM.value(), receiveMaximum));\n+            }\n+            if (maximumQos != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.MAXIMUM_QOS.value(), receiveMaximum));\n+            }\n+            props.add(new MqttProperties.IntegerProperty(MqttPropertyType.RETAIN_AVAILABLE.value(), retain ? 1 : 0));\n+            if (maximumPacketSize != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.MAXIMUM_PACKET_SIZE.value(),\n+                        maximumPacketSize.intValue()));\n+            }\n+            props.add(new MqttProperties.IntegerProperty(MqttPropertyType.TOPIC_ALIAS_MAXIMUM.value(),\n+                    topicAliasMaximum));\n+            if (reasonString != null) {\n+                props.add(new MqttProperties.StringProperty(MqttPropertyType.REASON_STRING.value(), reasonString));\n+            }\n+            props.add(userProperties);\n+            if (wildcardSubscriptionAvailable != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.WILDCARD_SUBSCRIPTION_AVAILABLE.value(),\n+                        wildcardSubscriptionAvailable ? 1 : 0));\n+            }\n+            if (subscriptionIdentifiersAvailable != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.SUBSCRIPTION_IDENTIFIER_AVAILABLE.value(),\n+                        subscriptionIdentifiersAvailable ? 1 : 0));\n+            }\n+            if (sharedSubscriptionAvailable != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.SHARED_SUBSCRIPTION_AVAILABLE.value(),\n+                        sharedSubscriptionAvailable ? 1 : 0));\n+            }\n+            if (serverKeepAlive != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.SERVER_KEEP_ALIVE.value(),\n+                        serverKeepAlive));\n+            }\n+            if (responseInformation != null) {\n+                props.add(new MqttProperties.StringProperty(MqttPropertyType.RESPONSE_INFORMATION.value(),\n+                        responseInformation));\n+            }\n+            if (serverReference != null) {\n+                props.add(new MqttProperties.StringProperty(MqttPropertyType.SERVER_REFERENCE.value(),\n+                        serverReference));\n+            }\n+            if (authenticationMethod != null) {\n+                props.add(new MqttProperties.StringProperty(MqttPropertyType.AUTHENTICATION_METHOD.value(),\n+                        authenticationMethod));\n+            }\n+            if (authenticationData != null) {\n+                props.add(new MqttProperties.BinaryProperty(MqttPropertyType.AUTHENTICATION_DATA.value(),\n+                        authenticationData));\n+            }\n+\n+            return props;\n+        }\n+\n+        public void sessionExpiryInterval(long seconds) {\n+            this.sessionExpiryInterval = seconds;\n+        }\n+\n+        public void receiveMaximum(int value) {\n+            if (value <= 0) {\n+                throw new IllegalArgumentException(\"receive maximum property must be > 0\");\n+            }\n+            this.receiveMaximum = value;\n+        }\n+\n+        public void maximumQos(byte value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkzMzc5Nw=="}, "originalCommit": {"oid": "d8c67b5761a6ae5d6e738cfbc47b80fe855d794e"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDExNzMxNQ==", "bodyText": "Still I think we should return this. It's up to the user to use it or not.", "url": "https://github.com/netty/netty/pull/10812#discussion_r534117315", "createdAt": "2020-12-02T12:07:29Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageBuilders.java", "diffHunk": "@@ -328,6 +345,166 @@ public MqttConnAckMessage build() {\n         }\n     }\n \n+    public static class ConnAckPropertiesBuilder {\n+        private String clientId;\n+        private Long sessionExpiryInterval;\n+        private int receiveMaximum;\n+        private Byte maximumQos;\n+        private boolean retain;\n+        private Long maximumPacketSize;\n+        private int topicAliasMaximum;\n+        private String reasonString;\n+        private MqttProperties.UserProperties userProperties = new MqttProperties.UserProperties();\n+        private Boolean wildcardSubscriptionAvailable;\n+        private Boolean subscriptionIdentifiersAvailable;\n+        private Boolean sharedSubscriptionAvailable;\n+        private Integer serverKeepAlive;\n+        private String responseInformation;\n+        private String serverReference;\n+        private String authenticationMethod;\n+        private byte[] authenticationData;\n+\n+        public MqttProperties build() {\n+            final MqttProperties props = new MqttProperties();\n+            if (clientId != null) {\n+                props.add(new MqttProperties.StringProperty(MqttPropertyType.ASSIGNED_CLIENT_IDENTIFIER.value(),\n+                        clientId));\n+            }\n+            if (sessionExpiryInterval != null) {\n+                props.add(new MqttProperties.IntegerProperty(\n+                        MqttPropertyType.SESSION_EXPIRY_INTERVAL.value(), sessionExpiryInterval.intValue()));\n+            }\n+            if (receiveMaximum > 0) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.RECEIVE_MAXIMUM.value(), receiveMaximum));\n+            }\n+            if (maximumQos != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.MAXIMUM_QOS.value(), receiveMaximum));\n+            }\n+            props.add(new MqttProperties.IntegerProperty(MqttPropertyType.RETAIN_AVAILABLE.value(), retain ? 1 : 0));\n+            if (maximumPacketSize != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.MAXIMUM_PACKET_SIZE.value(),\n+                        maximumPacketSize.intValue()));\n+            }\n+            props.add(new MqttProperties.IntegerProperty(MqttPropertyType.TOPIC_ALIAS_MAXIMUM.value(),\n+                    topicAliasMaximum));\n+            if (reasonString != null) {\n+                props.add(new MqttProperties.StringProperty(MqttPropertyType.REASON_STRING.value(), reasonString));\n+            }\n+            props.add(userProperties);\n+            if (wildcardSubscriptionAvailable != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.WILDCARD_SUBSCRIPTION_AVAILABLE.value(),\n+                        wildcardSubscriptionAvailable ? 1 : 0));\n+            }\n+            if (subscriptionIdentifiersAvailable != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.SUBSCRIPTION_IDENTIFIER_AVAILABLE.value(),\n+                        subscriptionIdentifiersAvailable ? 1 : 0));\n+            }\n+            if (sharedSubscriptionAvailable != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.SHARED_SUBSCRIPTION_AVAILABLE.value(),\n+                        sharedSubscriptionAvailable ? 1 : 0));\n+            }\n+            if (serverKeepAlive != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.SERVER_KEEP_ALIVE.value(),\n+                        serverKeepAlive));\n+            }\n+            if (responseInformation != null) {\n+                props.add(new MqttProperties.StringProperty(MqttPropertyType.RESPONSE_INFORMATION.value(),\n+                        responseInformation));\n+            }\n+            if (serverReference != null) {\n+                props.add(new MqttProperties.StringProperty(MqttPropertyType.SERVER_REFERENCE.value(),\n+                        serverReference));\n+            }\n+            if (authenticationMethod != null) {\n+                props.add(new MqttProperties.StringProperty(MqttPropertyType.AUTHENTICATION_METHOD.value(),\n+                        authenticationMethod));\n+            }\n+            if (authenticationData != null) {\n+                props.add(new MqttProperties.BinaryProperty(MqttPropertyType.AUTHENTICATION_DATA.value(),\n+                        authenticationData));\n+            }\n+\n+            return props;\n+        }\n+\n+        public void sessionExpiryInterval(long seconds) {\n+            this.sessionExpiryInterval = seconds;\n+        }\n+\n+        public void receiveMaximum(int value) {\n+            if (value <= 0) {\n+                throw new IllegalArgumentException(\"receive maximum property must be > 0\");\n+            }\n+            this.receiveMaximum = value;\n+        }\n+\n+        public void maximumQos(byte value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkzMzc5Nw=="}, "originalCommit": {"oid": "d8c67b5761a6ae5d6e738cfbc47b80fe855d794e"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjU2NzM5OQ==", "bodyText": "I'm convinced, I applied the change, thanks to point it out", "url": "https://github.com/netty/netty/pull/10812#discussion_r536567399", "createdAt": "2020-12-05T08:44:18Z", "author": {"login": "andsel"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageBuilders.java", "diffHunk": "@@ -328,6 +345,166 @@ public MqttConnAckMessage build() {\n         }\n     }\n \n+    public static class ConnAckPropertiesBuilder {\n+        private String clientId;\n+        private Long sessionExpiryInterval;\n+        private int receiveMaximum;\n+        private Byte maximumQos;\n+        private boolean retain;\n+        private Long maximumPacketSize;\n+        private int topicAliasMaximum;\n+        private String reasonString;\n+        private MqttProperties.UserProperties userProperties = new MqttProperties.UserProperties();\n+        private Boolean wildcardSubscriptionAvailable;\n+        private Boolean subscriptionIdentifiersAvailable;\n+        private Boolean sharedSubscriptionAvailable;\n+        private Integer serverKeepAlive;\n+        private String responseInformation;\n+        private String serverReference;\n+        private String authenticationMethod;\n+        private byte[] authenticationData;\n+\n+        public MqttProperties build() {\n+            final MqttProperties props = new MqttProperties();\n+            if (clientId != null) {\n+                props.add(new MqttProperties.StringProperty(MqttPropertyType.ASSIGNED_CLIENT_IDENTIFIER.value(),\n+                        clientId));\n+            }\n+            if (sessionExpiryInterval != null) {\n+                props.add(new MqttProperties.IntegerProperty(\n+                        MqttPropertyType.SESSION_EXPIRY_INTERVAL.value(), sessionExpiryInterval.intValue()));\n+            }\n+            if (receiveMaximum > 0) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.RECEIVE_MAXIMUM.value(), receiveMaximum));\n+            }\n+            if (maximumQos != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.MAXIMUM_QOS.value(), receiveMaximum));\n+            }\n+            props.add(new MqttProperties.IntegerProperty(MqttPropertyType.RETAIN_AVAILABLE.value(), retain ? 1 : 0));\n+            if (maximumPacketSize != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.MAXIMUM_PACKET_SIZE.value(),\n+                        maximumPacketSize.intValue()));\n+            }\n+            props.add(new MqttProperties.IntegerProperty(MqttPropertyType.TOPIC_ALIAS_MAXIMUM.value(),\n+                    topicAliasMaximum));\n+            if (reasonString != null) {\n+                props.add(new MqttProperties.StringProperty(MqttPropertyType.REASON_STRING.value(), reasonString));\n+            }\n+            props.add(userProperties);\n+            if (wildcardSubscriptionAvailable != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.WILDCARD_SUBSCRIPTION_AVAILABLE.value(),\n+                        wildcardSubscriptionAvailable ? 1 : 0));\n+            }\n+            if (subscriptionIdentifiersAvailable != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.SUBSCRIPTION_IDENTIFIER_AVAILABLE.value(),\n+                        subscriptionIdentifiersAvailable ? 1 : 0));\n+            }\n+            if (sharedSubscriptionAvailable != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.SHARED_SUBSCRIPTION_AVAILABLE.value(),\n+                        sharedSubscriptionAvailable ? 1 : 0));\n+            }\n+            if (serverKeepAlive != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.SERVER_KEEP_ALIVE.value(),\n+                        serverKeepAlive));\n+            }\n+            if (responseInformation != null) {\n+                props.add(new MqttProperties.StringProperty(MqttPropertyType.RESPONSE_INFORMATION.value(),\n+                        responseInformation));\n+            }\n+            if (serverReference != null) {\n+                props.add(new MqttProperties.StringProperty(MqttPropertyType.SERVER_REFERENCE.value(),\n+                        serverReference));\n+            }\n+            if (authenticationMethod != null) {\n+                props.add(new MqttProperties.StringProperty(MqttPropertyType.AUTHENTICATION_METHOD.value(),\n+                        authenticationMethod));\n+            }\n+            if (authenticationData != null) {\n+                props.add(new MqttProperties.BinaryProperty(MqttPropertyType.AUTHENTICATION_DATA.value(),\n+                        authenticationData));\n+            }\n+\n+            return props;\n+        }\n+\n+        public void sessionExpiryInterval(long seconds) {\n+            this.sessionExpiryInterval = seconds;\n+        }\n+\n+        public void receiveMaximum(int value) {\n+            if (value <= 0) {\n+                throw new IllegalArgumentException(\"receive maximum property must be > 0\");\n+            }\n+            this.receiveMaximum = value;\n+        }\n+\n+        public void maximumQos(byte value) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkzMzc5Nw=="}, "originalCommit": {"oid": "d8c67b5761a6ae5d6e738cfbc47b80fe855d794e"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzMDAzODcyOnYy", "diffSide": "RIGHT", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageBuilders.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMDo0MDowMlrOH6Vpcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMDo0MDowMlrOH6Vpcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkzNDEzMQ==", "bodyText": "rawData.clone()", "url": "https://github.com/netty/netty/pull/10812#discussion_r530934131", "createdAt": "2020-11-26T10:40:02Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageBuilders.java", "diffHunk": "@@ -328,6 +345,166 @@ public MqttConnAckMessage build() {\n         }\n     }\n \n+    public static class ConnAckPropertiesBuilder {\n+        private String clientId;\n+        private Long sessionExpiryInterval;\n+        private int receiveMaximum;\n+        private Byte maximumQos;\n+        private boolean retain;\n+        private Long maximumPacketSize;\n+        private int topicAliasMaximum;\n+        private String reasonString;\n+        private MqttProperties.UserProperties userProperties = new MqttProperties.UserProperties();\n+        private Boolean wildcardSubscriptionAvailable;\n+        private Boolean subscriptionIdentifiersAvailable;\n+        private Boolean sharedSubscriptionAvailable;\n+        private Integer serverKeepAlive;\n+        private String responseInformation;\n+        private String serverReference;\n+        private String authenticationMethod;\n+        private byte[] authenticationData;\n+\n+        public MqttProperties build() {\n+            final MqttProperties props = new MqttProperties();\n+            if (clientId != null) {\n+                props.add(new MqttProperties.StringProperty(MqttPropertyType.ASSIGNED_CLIENT_IDENTIFIER.value(),\n+                        clientId));\n+            }\n+            if (sessionExpiryInterval != null) {\n+                props.add(new MqttProperties.IntegerProperty(\n+                        MqttPropertyType.SESSION_EXPIRY_INTERVAL.value(), sessionExpiryInterval.intValue()));\n+            }\n+            if (receiveMaximum > 0) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.RECEIVE_MAXIMUM.value(), receiveMaximum));\n+            }\n+            if (maximumQos != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.MAXIMUM_QOS.value(), receiveMaximum));\n+            }\n+            props.add(new MqttProperties.IntegerProperty(MqttPropertyType.RETAIN_AVAILABLE.value(), retain ? 1 : 0));\n+            if (maximumPacketSize != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.MAXIMUM_PACKET_SIZE.value(),\n+                        maximumPacketSize.intValue()));\n+            }\n+            props.add(new MqttProperties.IntegerProperty(MqttPropertyType.TOPIC_ALIAS_MAXIMUM.value(),\n+                    topicAliasMaximum));\n+            if (reasonString != null) {\n+                props.add(new MqttProperties.StringProperty(MqttPropertyType.REASON_STRING.value(), reasonString));\n+            }\n+            props.add(userProperties);\n+            if (wildcardSubscriptionAvailable != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.WILDCARD_SUBSCRIPTION_AVAILABLE.value(),\n+                        wildcardSubscriptionAvailable ? 1 : 0));\n+            }\n+            if (subscriptionIdentifiersAvailable != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.SUBSCRIPTION_IDENTIFIER_AVAILABLE.value(),\n+                        subscriptionIdentifiersAvailable ? 1 : 0));\n+            }\n+            if (sharedSubscriptionAvailable != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.SHARED_SUBSCRIPTION_AVAILABLE.value(),\n+                        sharedSubscriptionAvailable ? 1 : 0));\n+            }\n+            if (serverKeepAlive != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.SERVER_KEEP_ALIVE.value(),\n+                        serverKeepAlive));\n+            }\n+            if (responseInformation != null) {\n+                props.add(new MqttProperties.StringProperty(MqttPropertyType.RESPONSE_INFORMATION.value(),\n+                        responseInformation));\n+            }\n+            if (serverReference != null) {\n+                props.add(new MqttProperties.StringProperty(MqttPropertyType.SERVER_REFERENCE.value(),\n+                        serverReference));\n+            }\n+            if (authenticationMethod != null) {\n+                props.add(new MqttProperties.StringProperty(MqttPropertyType.AUTHENTICATION_METHOD.value(),\n+                        authenticationMethod));\n+            }\n+            if (authenticationData != null) {\n+                props.add(new MqttProperties.BinaryProperty(MqttPropertyType.AUTHENTICATION_DATA.value(),\n+                        authenticationData));\n+            }\n+\n+            return props;\n+        }\n+\n+        public void sessionExpiryInterval(long seconds) {\n+            this.sessionExpiryInterval = seconds;\n+        }\n+\n+        public void receiveMaximum(int value) {\n+            if (value <= 0) {\n+                throw new IllegalArgumentException(\"receive maximum property must be > 0\");\n+            }\n+            this.receiveMaximum = value;\n+        }\n+\n+        public void maximumQos(byte value) {\n+            if (value != 0 && value != 1) {\n+                throw new IllegalArgumentException(\"maximum QoS property could be 0 or 1\");\n+            }\n+            this.maximumQos = value;\n+        }\n+\n+        public void retainAvailable(boolean retain) {\n+            this.retain = retain;\n+        }\n+\n+        public void maximumPacketSize(long size) {\n+            if (size <= 0) {\n+                throw new IllegalArgumentException(\"maximum packet size property must be > 0\");\n+            }\n+            this.maximumPacketSize = size;\n+        }\n+\n+        public void assignedClientId(String clientId) {\n+            this.clientId = clientId;\n+        }\n+\n+        public void topicAliasMaximum(int value) {\n+            this.topicAliasMaximum = value;\n+        }\n+\n+        public void reasonString(String reason) {\n+            this.reasonString = reason;\n+        }\n+\n+        public void userProperty(String name, String value) {\n+            userProperties.add(name, value);\n+        }\n+\n+        public void wildcardSubscriptionAvailable(boolean value) {\n+            this.wildcardSubscriptionAvailable = value;\n+        }\n+\n+        public void subscriptionIdentifiersAvailable(boolean value) {\n+            this.subscriptionIdentifiersAvailable = value;\n+        }\n+\n+        public void sharedSubscriptionAvailable(boolean value) {\n+            this.sharedSubscriptionAvailable = value;\n+        }\n+\n+        public void serverKeepAlive(int seconds) {\n+            this.serverKeepAlive = seconds;\n+        }\n+\n+        public void responseInformation(String value) {\n+            this.responseInformation = value;\n+        }\n+\n+        public void serverReference(String host) {\n+            this.serverReference = host;\n+        }\n+\n+        public void authenticationMethod(String methodName) {\n+            this.authenticationMethod = methodName;\n+        }\n+\n+        public void authenticationData(byte[] rawData) {\n+            this.authenticationData = rawData;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8c67b5761a6ae5d6e738cfbc47b80fe855d794e"}, "originalPosition": 207}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTI1NTQxOnYy", "diffSide": "RIGHT", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageBuilders.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNToyMDo1NFrOIInVqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxNTowNzozOFrOII8WJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkwNDA0Mg==", "bodyText": "@andsel one nit then we are ready to go... Make this method name something else. Maybe init or apply ?", "url": "https://github.com/netty/netty/pull/10812#discussion_r545904042", "createdAt": "2020-12-18T15:20:54Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageBuilders.java", "diffHunk": "@@ -295,13 +296,18 @@ public MqttUnsubscribeMessage build() {\n         }\n     }\n \n+    public interface PropertiesInitializer<T> {\n+        void accept(T builder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b938e1cd39cc2384c42c3aa4f073539e354a1c94"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI0ODIyOQ==", "bodyText": "Done, apply", "url": "https://github.com/netty/netty/pull/10812#discussion_r546248229", "createdAt": "2020-12-19T15:07:38Z", "author": {"login": "andsel"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageBuilders.java", "diffHunk": "@@ -295,13 +296,18 @@ public MqttUnsubscribeMessage build() {\n         }\n     }\n \n+    public interface PropertiesInitializer<T> {\n+        void accept(T builder);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkwNDA0Mg=="}, "originalCommit": {"oid": "b938e1cd39cc2384c42c3aa4f073539e354a1c94"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQzMTI1NjI3OnYy", "diffSide": "RIGHT", "path": "codec-mqtt/src/test/java/io/netty/handler/codec/mqtt/MqttMessageBuildersTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNToyMTowOFrOIInWMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOVQxNTowNzo1M1rOII8WNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkwNDE3Ng==", "bodyText": "2020", "url": "https://github.com/netty/netty/pull/10812#discussion_r545904176", "createdAt": "2020-12-18T15:21:08Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/test/java/io/netty/handler/codec/mqtt/MqttMessageBuildersTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2017 The Netty Project", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b938e1cd39cc2384c42c3aa4f073539e354a1c94"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NjI0ODI0NQ==", "bodyText": "done", "url": "https://github.com/netty/netty/pull/10812#discussion_r546248245", "createdAt": "2020-12-19T15:07:53Z", "author": {"login": "andsel"}, "path": "codec-mqtt/src/test/java/io/netty/handler/codec/mqtt/MqttMessageBuildersTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2017 The Netty Project", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkwNDE3Ng=="}, "originalCommit": {"oid": "b938e1cd39cc2384c42c3aa4f073539e354a1c94"}, "originalPosition": 2}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3545, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}