{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwMTcwODcy", "number": 10490, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTowNTozMVrOEaBVIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTowNTozMVrOEaBVIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzIwMjI1OnYy", "diffSide": "RIGHT", "path": "resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNTowNTozMVrOHDLxhQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNToxODo0MlrOHDMWBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEwMDY3Nw==", "bodyText": "Is there any particular concern to use checkNotNull  instead of requireNonNull. The latter is used in the version for Netty 5.", "url": "https://github.com/netty/netty/pull/10490#discussion_r473100677", "createdAt": "2020-08-19T15:05:31Z", "author": {"login": "violetagg"}, "path": "resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.resolver.dns;\n+\n+import io.netty.handler.codec.dns.DnsQuestion;\n+import io.netty.handler.logging.LogLevel;\n+import io.netty.util.internal.logging.InternalLogLevel;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import static io.netty.util.internal.ObjectUtil.checkNotNull;\n+\n+/**\n+ * A {@link DnsQueryLifecycleObserverFactory} that enables detailed logging in the {@link DnsNameResolver}.\n+ * <p>\n+ * When {@linkplain DnsNameResolverBuilder#dnsQueryLifecycleObserverFactory(DnsQueryLifecycleObserverFactory)\n+ * configured on the resolver}, detailed trace information will be generated so that it is easier to understand the\n+ * cause of resolution failure.\n+ */\n+public final class LoggingDnsQueryLifeCycleObserverFactory implements DnsQueryLifecycleObserverFactory {\n+    private static final InternalLogger DEFAULT_LOGGER =\n+            InternalLoggerFactory.getInstance(LoggingDnsQueryLifeCycleObserverFactory.class);\n+    private final InternalLogger logger;\n+    private final InternalLogLevel level;\n+\n+    /**\n+     * Create {@link DnsQueryLifecycleObserver} instances that log events at the default {@link LogLevel#DEBUG} level.\n+     */\n+    public LoggingDnsQueryLifeCycleObserverFactory() {\n+        this(LogLevel.DEBUG);\n+    }\n+\n+    /**\n+     * Create {@link DnsQueryLifecycleObserver} instances that log events at the given log level.\n+     * @param level The log level to use for logging resolver events.\n+     */\n+    public LoggingDnsQueryLifeCycleObserverFactory(LogLevel level) {\n+        this.level = checkAndConvertLevel(level);\n+        logger = DEFAULT_LOGGER;\n+    }\n+\n+    /**\n+     * Create {@link DnsQueryLifecycleObserver} instances that log events to a logger with the given class context,\n+     * at the given log level.\n+     * @param classContext The class context for the logger to use.\n+     * @param level The log level to use for logging resolver events.\n+     */\n+    public LoggingDnsQueryLifeCycleObserverFactory(Class<?> classContext, LogLevel level) {\n+        this.level = checkAndConvertLevel(level);\n+        logger = InternalLoggerFactory.getInstance(checkNotNull(classContext, \"classContext\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4f599a7a158a8624e1be364195316204709aaf5"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEwNDA0NQ==", "bodyText": "Because it not depends on java8!", "url": "https://github.com/netty/netty/pull/10490#discussion_r473104045", "createdAt": "2020-08-19T15:10:18Z", "author": {"login": "normanmaurer"}, "path": "resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.resolver.dns;\n+\n+import io.netty.handler.codec.dns.DnsQuestion;\n+import io.netty.handler.logging.LogLevel;\n+import io.netty.util.internal.logging.InternalLogLevel;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import static io.netty.util.internal.ObjectUtil.checkNotNull;\n+\n+/**\n+ * A {@link DnsQueryLifecycleObserverFactory} that enables detailed logging in the {@link DnsNameResolver}.\n+ * <p>\n+ * When {@linkplain DnsNameResolverBuilder#dnsQueryLifecycleObserverFactory(DnsQueryLifecycleObserverFactory)\n+ * configured on the resolver}, detailed trace information will be generated so that it is easier to understand the\n+ * cause of resolution failure.\n+ */\n+public final class LoggingDnsQueryLifeCycleObserverFactory implements DnsQueryLifecycleObserverFactory {\n+    private static final InternalLogger DEFAULT_LOGGER =\n+            InternalLoggerFactory.getInstance(LoggingDnsQueryLifeCycleObserverFactory.class);\n+    private final InternalLogger logger;\n+    private final InternalLogLevel level;\n+\n+    /**\n+     * Create {@link DnsQueryLifecycleObserver} instances that log events at the default {@link LogLevel#DEBUG} level.\n+     */\n+    public LoggingDnsQueryLifeCycleObserverFactory() {\n+        this(LogLevel.DEBUG);\n+    }\n+\n+    /**\n+     * Create {@link DnsQueryLifecycleObserver} instances that log events at the given log level.\n+     * @param level The log level to use for logging resolver events.\n+     */\n+    public LoggingDnsQueryLifeCycleObserverFactory(LogLevel level) {\n+        this.level = checkAndConvertLevel(level);\n+        logger = DEFAULT_LOGGER;\n+    }\n+\n+    /**\n+     * Create {@link DnsQueryLifecycleObserver} instances that log events to a logger with the given class context,\n+     * at the given log level.\n+     * @param classContext The class context for the logger to use.\n+     * @param level The log level to use for logging resolver events.\n+     */\n+    public LoggingDnsQueryLifeCycleObserverFactory(Class<?> classContext, LogLevel level) {\n+        this.level = checkAndConvertLevel(level);\n+        logger = InternalLoggerFactory.getInstance(checkNotNull(classContext, \"classContext\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEwMDY3Nw=="}, "originalCommit": {"oid": "c4f599a7a158a8624e1be364195316204709aaf5"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEwNTQxNw==", "bodyText": "ops ... true", "url": "https://github.com/netty/netty/pull/10490#discussion_r473105417", "createdAt": "2020-08-19T15:12:10Z", "author": {"login": "violetagg"}, "path": "resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.resolver.dns;\n+\n+import io.netty.handler.codec.dns.DnsQuestion;\n+import io.netty.handler.logging.LogLevel;\n+import io.netty.util.internal.logging.InternalLogLevel;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import static io.netty.util.internal.ObjectUtil.checkNotNull;\n+\n+/**\n+ * A {@link DnsQueryLifecycleObserverFactory} that enables detailed logging in the {@link DnsNameResolver}.\n+ * <p>\n+ * When {@linkplain DnsNameResolverBuilder#dnsQueryLifecycleObserverFactory(DnsQueryLifecycleObserverFactory)\n+ * configured on the resolver}, detailed trace information will be generated so that it is easier to understand the\n+ * cause of resolution failure.\n+ */\n+public final class LoggingDnsQueryLifeCycleObserverFactory implements DnsQueryLifecycleObserverFactory {\n+    private static final InternalLogger DEFAULT_LOGGER =\n+            InternalLoggerFactory.getInstance(LoggingDnsQueryLifeCycleObserverFactory.class);\n+    private final InternalLogger logger;\n+    private final InternalLogLevel level;\n+\n+    /**\n+     * Create {@link DnsQueryLifecycleObserver} instances that log events at the default {@link LogLevel#DEBUG} level.\n+     */\n+    public LoggingDnsQueryLifeCycleObserverFactory() {\n+        this(LogLevel.DEBUG);\n+    }\n+\n+    /**\n+     * Create {@link DnsQueryLifecycleObserver} instances that log events at the given log level.\n+     * @param level The log level to use for logging resolver events.\n+     */\n+    public LoggingDnsQueryLifeCycleObserverFactory(LogLevel level) {\n+        this.level = checkAndConvertLevel(level);\n+        logger = DEFAULT_LOGGER;\n+    }\n+\n+    /**\n+     * Create {@link DnsQueryLifecycleObserver} instances that log events to a logger with the given class context,\n+     * at the given log level.\n+     * @param classContext The class context for the logger to use.\n+     * @param level The log level to use for logging resolver events.\n+     */\n+    public LoggingDnsQueryLifeCycleObserverFactory(Class<?> classContext, LogLevel level) {\n+        this.level = checkAndConvertLevel(level);\n+        logger = InternalLoggerFactory.getInstance(checkNotNull(classContext, \"classContext\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEwMDY3Nw=="}, "originalCommit": {"oid": "c4f599a7a158a8624e1be364195316204709aaf5"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzExMDAyMQ==", "bodyText": "Netty 4.1 needs to support Java 6 at runtime where requireNonNull is not available.", "url": "https://github.com/netty/netty/pull/10490#discussion_r473110021", "createdAt": "2020-08-19T15:18:42Z", "author": {"login": "chrisvest"}, "path": "resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.resolver.dns;\n+\n+import io.netty.handler.codec.dns.DnsQuestion;\n+import io.netty.handler.logging.LogLevel;\n+import io.netty.util.internal.logging.InternalLogLevel;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import static io.netty.util.internal.ObjectUtil.checkNotNull;\n+\n+/**\n+ * A {@link DnsQueryLifecycleObserverFactory} that enables detailed logging in the {@link DnsNameResolver}.\n+ * <p>\n+ * When {@linkplain DnsNameResolverBuilder#dnsQueryLifecycleObserverFactory(DnsQueryLifecycleObserverFactory)\n+ * configured on the resolver}, detailed trace information will be generated so that it is easier to understand the\n+ * cause of resolution failure.\n+ */\n+public final class LoggingDnsQueryLifeCycleObserverFactory implements DnsQueryLifecycleObserverFactory {\n+    private static final InternalLogger DEFAULT_LOGGER =\n+            InternalLoggerFactory.getInstance(LoggingDnsQueryLifeCycleObserverFactory.class);\n+    private final InternalLogger logger;\n+    private final InternalLogLevel level;\n+\n+    /**\n+     * Create {@link DnsQueryLifecycleObserver} instances that log events at the default {@link LogLevel#DEBUG} level.\n+     */\n+    public LoggingDnsQueryLifeCycleObserverFactory() {\n+        this(LogLevel.DEBUG);\n+    }\n+\n+    /**\n+     * Create {@link DnsQueryLifecycleObserver} instances that log events at the given log level.\n+     * @param level The log level to use for logging resolver events.\n+     */\n+    public LoggingDnsQueryLifeCycleObserverFactory(LogLevel level) {\n+        this.level = checkAndConvertLevel(level);\n+        logger = DEFAULT_LOGGER;\n+    }\n+\n+    /**\n+     * Create {@link DnsQueryLifecycleObserver} instances that log events to a logger with the given class context,\n+     * at the given log level.\n+     * @param classContext The class context for the logger to use.\n+     * @param level The log level to use for logging resolver events.\n+     */\n+    public LoggingDnsQueryLifeCycleObserverFactory(Class<?> classContext, LogLevel level) {\n+        this.level = checkAndConvertLevel(level);\n+        logger = InternalLoggerFactory.getInstance(checkNotNull(classContext, \"classContext\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzEwMDY3Nw=="}, "originalCommit": {"oid": "c4f599a7a158a8624e1be364195316204709aaf5"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3662, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}