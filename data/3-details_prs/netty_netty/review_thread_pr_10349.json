{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzODk3MDcy", "number": 10349, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTozNzowM1rOEIa9Sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzoyOToyNVrOEIdhTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjY1NzM4OnYy", "diffSide": "RIGHT", "path": "codec-http/src/test/java/io/netty/handler/codec/http/MultipleContentLengthHeadersTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTozNzowM1rOGoX3Cg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODoyNDozMlrOGod-dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk4NzE0Ng==", "bodyText": "IIUC the content should be just a, not ab. Same for testDanglingComma", "url": "https://github.com/netty/netty/pull/10349#discussion_r444987146", "createdAt": "2020-06-24T15:37:03Z", "author": {"login": "idelpivnitskiy"}, "path": "codec-http/src/test/java/io/netty/handler/codec/http/MultipleContentLengthHeadersTest.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http;\n+\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.embedded.EmbeddedChannel;\n+import io.netty.util.CharsetUtil;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import static io.netty.handler.codec.http.HttpObjectDecoder.DEFAULT_INITIAL_BUFFER_SIZE;\n+import static io.netty.handler.codec.http.HttpObjectDecoder.DEFAULT_MAX_CHUNK_SIZE;\n+import static io.netty.handler.codec.http.HttpObjectDecoder.DEFAULT_MAX_HEADER_SIZE;\n+import static io.netty.handler.codec.http.HttpObjectDecoder.DEFAULT_MAX_INITIAL_LINE_LENGTH;\n+import static io.netty.handler.codec.http.HttpObjectDecoder.DEFAULT_VALIDATE_HEADERS;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.core.IsInstanceOf.instanceOf;\n+\n+@RunWith(Parameterized.class)\n+public class MultipleContentLengthHeadersTest {\n+\n+    private final boolean allowDuplicateContentLengths;\n+    private final boolean sameValue;\n+    private final boolean singleField;\n+\n+    private EmbeddedChannel channel;\n+\n+    @Parameters\n+    public static Collection<Object[]> parameters() {\n+        return Arrays.asList(new Object[][] {\n+                { false, false, false },\n+                { false, false, true },\n+                { false, true, false },\n+                { false, true, true },\n+                { true, false, false },\n+                { true, false, true },\n+                { true, true, false },\n+                { true, true, true }\n+        });\n+    }\n+\n+    public MultipleContentLengthHeadersTest(\n+            boolean allowDuplicateContentLengths, boolean sameValue, boolean singleField) {\n+        this.allowDuplicateContentLengths = allowDuplicateContentLengths;\n+        this.sameValue = sameValue;\n+        this.singleField = singleField;\n+    }\n+\n+    @Before\n+    public void setUp() {\n+        HttpRequestDecoder decoder = new HttpRequestDecoder(\n+                DEFAULT_MAX_INITIAL_LINE_LENGTH,\n+                DEFAULT_MAX_HEADER_SIZE,\n+                DEFAULT_MAX_CHUNK_SIZE,\n+                DEFAULT_VALIDATE_HEADERS,\n+                DEFAULT_INITIAL_BUFFER_SIZE,\n+                allowDuplicateContentLengths);\n+        channel = new EmbeddedChannel(decoder);\n+    }\n+\n+    @Test\n+    public void testMultipleContentLengthHeadersBehavior() {\n+        String requestStr = setupRequestString();\n+        assertThat(channel.writeInbound(Unpooled.copiedBuffer(requestStr, CharsetUtil.US_ASCII)), is(true));\n+        HttpRequest request = channel.readInbound();\n+\n+        if (allowDuplicateContentLengths) {\n+            if (sameValue) {\n+                assertValid(request);\n+                List<String> contentLengths = request.headers().getAll(HttpHeaderNames.CONTENT_LENGTH);\n+                assertThat(contentLengths, contains(\"1\"));\n+                LastHttpContent body = channel.readInbound();\n+                assertThat(body.content().readableBytes(), is(1));\n+                assertThat(body.content().readCharSequence(1, CharsetUtil.US_ASCII).toString(), is(\"a\"));\n+            } else {\n+                assertInvalid(request);\n+            }\n+        } else {\n+            assertInvalid(request);\n+        }\n+        assertThat(channel.finish(), is(false));\n+    }\n+\n+    private String setupRequestString() {\n+        String firstValue = \"1\";\n+        String secondValue = sameValue ? firstValue : \"2\";\n+        String contentLength;\n+        if (singleField) {\n+            contentLength = \"Content-Length: \" + firstValue + \", \" + secondValue + \"\\r\\n\\r\\n\";\n+        } else {\n+            contentLength = \"Content-Length: \" + firstValue + \"\\r\\n\" +\n+                            \"Content-Length: \" + secondValue + \"\\r\\n\\r\\n\";\n+        }\n+        return \"PUT /some/path HTTP/1.1\\r\\n\" +\n+               contentLength +\n+               \"ab\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a944faaf9da82c0d038b2717585c6fa5302f93"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA4NzM1MA==", "bodyText": "The reason I chose ab is that we provide two content-lengths: 1 and 2. I wanted the potential body size to be the max of the possible content-lengths (2) so that we can assert the interpreted body is 1 and we gain more confidence in knowing that the decoder explicitly stopped parsing after 1.\nFrom an assertion perspective, perhaps it's somewhat redundant to assert on the body content being a after asserting the body size is 1, but I think it makes it more intuitive and could maybe catch some more egregious regressions.", "url": "https://github.com/netty/netty/pull/10349#discussion_r445087350", "createdAt": "2020-06-24T18:24:32Z", "author": {"login": "Bennett-Lynch"}, "path": "codec-http/src/test/java/io/netty/handler/codec/http/MultipleContentLengthHeadersTest.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http;\n+\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.embedded.EmbeddedChannel;\n+import io.netty.util.CharsetUtil;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import static io.netty.handler.codec.http.HttpObjectDecoder.DEFAULT_INITIAL_BUFFER_SIZE;\n+import static io.netty.handler.codec.http.HttpObjectDecoder.DEFAULT_MAX_CHUNK_SIZE;\n+import static io.netty.handler.codec.http.HttpObjectDecoder.DEFAULT_MAX_HEADER_SIZE;\n+import static io.netty.handler.codec.http.HttpObjectDecoder.DEFAULT_MAX_INITIAL_LINE_LENGTH;\n+import static io.netty.handler.codec.http.HttpObjectDecoder.DEFAULT_VALIDATE_HEADERS;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.core.IsInstanceOf.instanceOf;\n+\n+@RunWith(Parameterized.class)\n+public class MultipleContentLengthHeadersTest {\n+\n+    private final boolean allowDuplicateContentLengths;\n+    private final boolean sameValue;\n+    private final boolean singleField;\n+\n+    private EmbeddedChannel channel;\n+\n+    @Parameters\n+    public static Collection<Object[]> parameters() {\n+        return Arrays.asList(new Object[][] {\n+                { false, false, false },\n+                { false, false, true },\n+                { false, true, false },\n+                { false, true, true },\n+                { true, false, false },\n+                { true, false, true },\n+                { true, true, false },\n+                { true, true, true }\n+        });\n+    }\n+\n+    public MultipleContentLengthHeadersTest(\n+            boolean allowDuplicateContentLengths, boolean sameValue, boolean singleField) {\n+        this.allowDuplicateContentLengths = allowDuplicateContentLengths;\n+        this.sameValue = sameValue;\n+        this.singleField = singleField;\n+    }\n+\n+    @Before\n+    public void setUp() {\n+        HttpRequestDecoder decoder = new HttpRequestDecoder(\n+                DEFAULT_MAX_INITIAL_LINE_LENGTH,\n+                DEFAULT_MAX_HEADER_SIZE,\n+                DEFAULT_MAX_CHUNK_SIZE,\n+                DEFAULT_VALIDATE_HEADERS,\n+                DEFAULT_INITIAL_BUFFER_SIZE,\n+                allowDuplicateContentLengths);\n+        channel = new EmbeddedChannel(decoder);\n+    }\n+\n+    @Test\n+    public void testMultipleContentLengthHeadersBehavior() {\n+        String requestStr = setupRequestString();\n+        assertThat(channel.writeInbound(Unpooled.copiedBuffer(requestStr, CharsetUtil.US_ASCII)), is(true));\n+        HttpRequest request = channel.readInbound();\n+\n+        if (allowDuplicateContentLengths) {\n+            if (sameValue) {\n+                assertValid(request);\n+                List<String> contentLengths = request.headers().getAll(HttpHeaderNames.CONTENT_LENGTH);\n+                assertThat(contentLengths, contains(\"1\"));\n+                LastHttpContent body = channel.readInbound();\n+                assertThat(body.content().readableBytes(), is(1));\n+                assertThat(body.content().readCharSequence(1, CharsetUtil.US_ASCII).toString(), is(\"a\"));\n+            } else {\n+                assertInvalid(request);\n+            }\n+        } else {\n+            assertInvalid(request);\n+        }\n+        assertThat(channel.finish(), is(false));\n+    }\n+\n+    private String setupRequestString() {\n+        String firstValue = \"1\";\n+        String secondValue = sameValue ? firstValue : \"2\";\n+        String contentLength;\n+        if (singleField) {\n+            contentLength = \"Content-Length: \" + firstValue + \", \" + secondValue + \"\\r\\n\\r\\n\";\n+        } else {\n+            contentLength = \"Content-Length: \" + firstValue + \"\\r\\n\" +\n+                            \"Content-Length: \" + secondValue + \"\\r\\n\\r\\n\";\n+        }\n+        return \"PUT /some/path HTTP/1.1\\r\\n\" +\n+               contentLength +\n+               \"ab\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk4NzE0Ng=="}, "originalCommit": {"oid": "52a944faaf9da82c0d038b2717585c6fa5302f93"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjY2OTI4OnYy", "diffSide": "RIGHT", "path": "codec-http/src/test/java/io/netty/handler/codec/http/MultipleContentLengthHeadersTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTo0MDowOFrOGoX-7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODoyNDozNFrOGod-iQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk4OTE2NQ==", "bodyText": "Should we verify that there is no more bytes in the channel after we read the content? Or that a new requests starts after the first one.", "url": "https://github.com/netty/netty/pull/10349#discussion_r444989165", "createdAt": "2020-06-24T15:40:08Z", "author": {"login": "idelpivnitskiy"}, "path": "codec-http/src/test/java/io/netty/handler/codec/http/MultipleContentLengthHeadersTest.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http;\n+\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.embedded.EmbeddedChannel;\n+import io.netty.util.CharsetUtil;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import static io.netty.handler.codec.http.HttpObjectDecoder.DEFAULT_INITIAL_BUFFER_SIZE;\n+import static io.netty.handler.codec.http.HttpObjectDecoder.DEFAULT_MAX_CHUNK_SIZE;\n+import static io.netty.handler.codec.http.HttpObjectDecoder.DEFAULT_MAX_HEADER_SIZE;\n+import static io.netty.handler.codec.http.HttpObjectDecoder.DEFAULT_MAX_INITIAL_LINE_LENGTH;\n+import static io.netty.handler.codec.http.HttpObjectDecoder.DEFAULT_VALIDATE_HEADERS;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.core.IsInstanceOf.instanceOf;\n+\n+@RunWith(Parameterized.class)\n+public class MultipleContentLengthHeadersTest {\n+\n+    private final boolean allowDuplicateContentLengths;\n+    private final boolean sameValue;\n+    private final boolean singleField;\n+\n+    private EmbeddedChannel channel;\n+\n+    @Parameters\n+    public static Collection<Object[]> parameters() {\n+        return Arrays.asList(new Object[][] {\n+                { false, false, false },\n+                { false, false, true },\n+                { false, true, false },\n+                { false, true, true },\n+                { true, false, false },\n+                { true, false, true },\n+                { true, true, false },\n+                { true, true, true }\n+        });\n+    }\n+\n+    public MultipleContentLengthHeadersTest(\n+            boolean allowDuplicateContentLengths, boolean sameValue, boolean singleField) {\n+        this.allowDuplicateContentLengths = allowDuplicateContentLengths;\n+        this.sameValue = sameValue;\n+        this.singleField = singleField;\n+    }\n+\n+    @Before\n+    public void setUp() {\n+        HttpRequestDecoder decoder = new HttpRequestDecoder(\n+                DEFAULT_MAX_INITIAL_LINE_LENGTH,\n+                DEFAULT_MAX_HEADER_SIZE,\n+                DEFAULT_MAX_CHUNK_SIZE,\n+                DEFAULT_VALIDATE_HEADERS,\n+                DEFAULT_INITIAL_BUFFER_SIZE,\n+                allowDuplicateContentLengths);\n+        channel = new EmbeddedChannel(decoder);\n+    }\n+\n+    @Test\n+    public void testMultipleContentLengthHeadersBehavior() {\n+        String requestStr = setupRequestString();\n+        assertThat(channel.writeInbound(Unpooled.copiedBuffer(requestStr, CharsetUtil.US_ASCII)), is(true));\n+        HttpRequest request = channel.readInbound();\n+\n+        if (allowDuplicateContentLengths) {\n+            if (sameValue) {\n+                assertValid(request);\n+                List<String> contentLengths = request.headers().getAll(HttpHeaderNames.CONTENT_LENGTH);\n+                assertThat(contentLengths, contains(\"1\"));\n+                LastHttpContent body = channel.readInbound();\n+                assertThat(body.content().readableBytes(), is(1));\n+                assertThat(body.content().readCharSequence(1, CharsetUtil.US_ASCII).toString(), is(\"a\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a944faaf9da82c0d038b2717585c6fa5302f93"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA4NzM2OQ==", "bodyText": "We do expect there to be 1 \"leftover\" byte in the ByteToMessageDecoder#cumulation buffer. I'm not sure if it offers any value in explicitly asserting that if we are already asserting on the interpreted body size. If you think it adds value I can add more tests.", "url": "https://github.com/netty/netty/pull/10349#discussion_r445087369", "createdAt": "2020-06-24T18:24:34Z", "author": {"login": "Bennett-Lynch"}, "path": "codec-http/src/test/java/io/netty/handler/codec/http/MultipleContentLengthHeadersTest.java", "diffHunk": "@@ -0,0 +1,142 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http;\n+\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.embedded.EmbeddedChannel;\n+import io.netty.util.CharsetUtil;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameters;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.List;\n+\n+import static io.netty.handler.codec.http.HttpObjectDecoder.DEFAULT_INITIAL_BUFFER_SIZE;\n+import static io.netty.handler.codec.http.HttpObjectDecoder.DEFAULT_MAX_CHUNK_SIZE;\n+import static io.netty.handler.codec.http.HttpObjectDecoder.DEFAULT_MAX_HEADER_SIZE;\n+import static io.netty.handler.codec.http.HttpObjectDecoder.DEFAULT_MAX_INITIAL_LINE_LENGTH;\n+import static io.netty.handler.codec.http.HttpObjectDecoder.DEFAULT_VALIDATE_HEADERS;\n+import static org.hamcrest.MatcherAssert.assertThat;\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.core.IsInstanceOf.instanceOf;\n+\n+@RunWith(Parameterized.class)\n+public class MultipleContentLengthHeadersTest {\n+\n+    private final boolean allowDuplicateContentLengths;\n+    private final boolean sameValue;\n+    private final boolean singleField;\n+\n+    private EmbeddedChannel channel;\n+\n+    @Parameters\n+    public static Collection<Object[]> parameters() {\n+        return Arrays.asList(new Object[][] {\n+                { false, false, false },\n+                { false, false, true },\n+                { false, true, false },\n+                { false, true, true },\n+                { true, false, false },\n+                { true, false, true },\n+                { true, true, false },\n+                { true, true, true }\n+        });\n+    }\n+\n+    public MultipleContentLengthHeadersTest(\n+            boolean allowDuplicateContentLengths, boolean sameValue, boolean singleField) {\n+        this.allowDuplicateContentLengths = allowDuplicateContentLengths;\n+        this.sameValue = sameValue;\n+        this.singleField = singleField;\n+    }\n+\n+    @Before\n+    public void setUp() {\n+        HttpRequestDecoder decoder = new HttpRequestDecoder(\n+                DEFAULT_MAX_INITIAL_LINE_LENGTH,\n+                DEFAULT_MAX_HEADER_SIZE,\n+                DEFAULT_MAX_CHUNK_SIZE,\n+                DEFAULT_VALIDATE_HEADERS,\n+                DEFAULT_INITIAL_BUFFER_SIZE,\n+                allowDuplicateContentLengths);\n+        channel = new EmbeddedChannel(decoder);\n+    }\n+\n+    @Test\n+    public void testMultipleContentLengthHeadersBehavior() {\n+        String requestStr = setupRequestString();\n+        assertThat(channel.writeInbound(Unpooled.copiedBuffer(requestStr, CharsetUtil.US_ASCII)), is(true));\n+        HttpRequest request = channel.readInbound();\n+\n+        if (allowDuplicateContentLengths) {\n+            if (sameValue) {\n+                assertValid(request);\n+                List<String> contentLengths = request.headers().getAll(HttpHeaderNames.CONTENT_LENGTH);\n+                assertThat(contentLengths, contains(\"1\"));\n+                LastHttpContent body = channel.readInbound();\n+                assertThat(body.content().readableBytes(), is(1));\n+                assertThat(body.content().readCharSequence(1, CharsetUtil.US_ASCII).toString(), is(\"a\"));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk4OTE2NQ=="}, "originalCommit": {"oid": "52a944faaf9da82c0d038b2717585c6fa5302f93"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MjY5MTA5OnYy", "diffSide": "RIGHT", "path": "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNTo0NToyNVrOGoYNGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxODoyNDozNlrOGod-lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk5Mjc5Mg==", "bodyText": "Would be nice to add this param to the class javadoc, after description of maxInitialLineLength, maxHeaderSize, and maxChunkSize.\nOther missing params (chunkedSupported, validateHeaders, and initialBufferSize) can be documented in a follow-up PR.", "url": "https://github.com/netty/netty/pull/10349#discussion_r444992792", "createdAt": "2020-06-24T15:45:25Z", "author": {"login": "idelpivnitskiy"}, "path": "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java", "diffHunk": "@@ -176,9 +181,20 @@ protected HttpObjectDecoder(\n              DEFAULT_INITIAL_BUFFER_SIZE);\n     }\n \n+    /**\n+     * Creates a new instance with the specified parameters.\n+     */\n     protected HttpObjectDecoder(\n             int maxInitialLineLength, int maxHeaderSize, int maxChunkSize,\n             boolean chunkedSupported, boolean validateHeaders, int initialBufferSize) {\n+        this(maxInitialLineLength, maxHeaderSize, maxChunkSize, chunkedSupported, validateHeaders, initialBufferSize,\n+             DEFAULT_ALLOW_DUPLICATE_CONTENT_LENGTHS);\n+    }\n+\n+    protected HttpObjectDecoder(\n+            int maxInitialLineLength, int maxHeaderSize, int maxChunkSize,\n+            boolean chunkedSupported, boolean validateHeaders, int initialBufferSize,\n+            boolean allowDuplicateContentLengths) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a944faaf9da82c0d038b2717585c6fa5302f93"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA4NzM4Mg==", "bodyText": "I agree that it should be documented, I just couldn't find a great place to include it (since nothing is currently documented). I will take the liberty to add it to the class Javadoc.\nEdit: Just noticed the documentation you're referring to, thanks for pointing that out.", "url": "https://github.com/netty/netty/pull/10349#discussion_r445087382", "createdAt": "2020-06-24T18:24:36Z", "author": {"login": "Bennett-Lynch"}, "path": "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java", "diffHunk": "@@ -176,9 +181,20 @@ protected HttpObjectDecoder(\n              DEFAULT_INITIAL_BUFFER_SIZE);\n     }\n \n+    /**\n+     * Creates a new instance with the specified parameters.\n+     */\n     protected HttpObjectDecoder(\n             int maxInitialLineLength, int maxHeaderSize, int maxChunkSize,\n             boolean chunkedSupported, boolean validateHeaders, int initialBufferSize) {\n+        this(maxInitialLineLength, maxHeaderSize, maxChunkSize, chunkedSupported, validateHeaders, initialBufferSize,\n+             DEFAULT_ALLOW_DUPLICATE_CONTENT_LENGTHS);\n+    }\n+\n+    protected HttpObjectDecoder(\n+            int maxInitialLineLength, int maxHeaderSize, int maxChunkSize,\n+            boolean chunkedSupported, boolean validateHeaders, int initialBufferSize,\n+            boolean allowDuplicateContentLengths) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDk5Mjc5Mg=="}, "originalCommit": {"oid": "52a944faaf9da82c0d038b2717585c6fa5302f93"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MzA3NzI0OnYy", "diffSide": "RIGHT", "path": "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxNzoyOToyNVrOGocF8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQxOToxNjoyNlrOGofrVg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA1NjQ5Ng==", "bodyText": "It may be useful to add the mismatched values to the error message;\n\"Multiple Content-Length values found: \" + trimmed  + \" and \" + firstValue", "url": "https://github.com/netty/netty/pull/10349#discussion_r445056496", "createdAt": "2020-06-24T17:29:25Z", "author": {"login": "NiteshKant"}, "path": "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java", "diffHunk": "@@ -611,17 +627,40 @@ private State readHeaders(ByteBuf buffer) {\n             //   duplicated field-values with a single valid Content-Length field\n             //   containing that decimal value prior to determining the message body\n             //   length or forwarding the message.\n-            if (contentLengthValuesCount > 1 && message.protocolVersion() == HttpVersion.HTTP_1_1) {\n-                throw new IllegalArgumentException(\"Multiple Content-Length headers found\");\n+            boolean multipleContentLengths =\n+                    contentLengthFields.size() > 1 || contentLengthFields.get(0).indexOf(COMMA) >= 0;\n+            if (multipleContentLengths && message.protocolVersion() == HttpVersion.HTTP_1_1) {\n+                if (allowDuplicateContentLengths) {\n+                    // Find and enforce that all Content-Length values are the same\n+                    String firstValue = null;\n+                    for (String field : contentLengthFields) {\n+                        String[] tokens = COMMA_PATTERN.split(field, -1);\n+                        for (String token : tokens) {\n+                            String trimmed = token.trim();\n+                            if (firstValue == null) {\n+                                firstValue = trimmed;\n+                            } else if (!trimmed.equals(firstValue)) {\n+                                throw new IllegalArgumentException(\"Multiple Content-Length headers found\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "52a944faaf9da82c0d038b2717585c6fa5302f93"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA4OTU4Mw==", "bodyText": "I like this idea but I'm not sure if there's a precedent for reporting request data in exceptions. This may cause some applications to inadvertently log data that users may consider to be sensitive.", "url": "https://github.com/netty/netty/pull/10349#discussion_r445089583", "createdAt": "2020-06-24T18:28:37Z", "author": {"login": "Bennett-Lynch"}, "path": "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java", "diffHunk": "@@ -611,17 +627,40 @@ private State readHeaders(ByteBuf buffer) {\n             //   duplicated field-values with a single valid Content-Length field\n             //   containing that decimal value prior to determining the message body\n             //   length or forwarding the message.\n-            if (contentLengthValuesCount > 1 && message.protocolVersion() == HttpVersion.HTTP_1_1) {\n-                throw new IllegalArgumentException(\"Multiple Content-Length headers found\");\n+            boolean multipleContentLengths =\n+                    contentLengthFields.size() > 1 || contentLengthFields.get(0).indexOf(COMMA) >= 0;\n+            if (multipleContentLengths && message.protocolVersion() == HttpVersion.HTTP_1_1) {\n+                if (allowDuplicateContentLengths) {\n+                    // Find and enforce that all Content-Length values are the same\n+                    String firstValue = null;\n+                    for (String field : contentLengthFields) {\n+                        String[] tokens = COMMA_PATTERN.split(field, -1);\n+                        for (String token : tokens) {\n+                            String trimmed = token.trim();\n+                            if (firstValue == null) {\n+                                firstValue = trimmed;\n+                            } else if (!trimmed.equals(firstValue)) {\n+                                throw new IllegalArgumentException(\"Multiple Content-Length headers found\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA1NjQ5Ng=="}, "originalCommit": {"oid": "52a944faaf9da82c0d038b2717585c6fa5302f93"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA5MzM2NQ==", "bodyText": "Since the data here is content-length, I think the sensitive data risk is pretty low if not impossible, but I would defer to @normanmaurer for it.", "url": "https://github.com/netty/netty/pull/10349#discussion_r445093365", "createdAt": "2020-06-24T18:35:45Z", "author": {"login": "NiteshKant"}, "path": "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java", "diffHunk": "@@ -611,17 +627,40 @@ private State readHeaders(ByteBuf buffer) {\n             //   duplicated field-values with a single valid Content-Length field\n             //   containing that decimal value prior to determining the message body\n             //   length or forwarding the message.\n-            if (contentLengthValuesCount > 1 && message.protocolVersion() == HttpVersion.HTTP_1_1) {\n-                throw new IllegalArgumentException(\"Multiple Content-Length headers found\");\n+            boolean multipleContentLengths =\n+                    contentLengthFields.size() > 1 || contentLengthFields.get(0).indexOf(COMMA) >= 0;\n+            if (multipleContentLengths && message.protocolVersion() == HttpVersion.HTTP_1_1) {\n+                if (allowDuplicateContentLengths) {\n+                    // Find and enforce that all Content-Length values are the same\n+                    String firstValue = null;\n+                    for (String field : contentLengthFields) {\n+                        String[] tokens = COMMA_PATTERN.split(field, -1);\n+                        for (String token : tokens) {\n+                            String trimmed = token.trim();\n+                            if (firstValue == null) {\n+                                firstValue = trimmed;\n+                            } else if (!trimmed.equals(firstValue)) {\n+                                throw new IllegalArgumentException(\"Multiple Content-Length headers found\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA1NjQ5Ng=="}, "originalCommit": {"oid": "52a944faaf9da82c0d038b2717585c6fa5302f93"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA5Mzg0Ng==", "bodyText": "Yeah I think it should be fine", "url": "https://github.com/netty/netty/pull/10349#discussion_r445093846", "createdAt": "2020-06-24T18:36:39Z", "author": {"login": "normanmaurer"}, "path": "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java", "diffHunk": "@@ -611,17 +627,40 @@ private State readHeaders(ByteBuf buffer) {\n             //   duplicated field-values with a single valid Content-Length field\n             //   containing that decimal value prior to determining the message body\n             //   length or forwarding the message.\n-            if (contentLengthValuesCount > 1 && message.protocolVersion() == HttpVersion.HTTP_1_1) {\n-                throw new IllegalArgumentException(\"Multiple Content-Length headers found\");\n+            boolean multipleContentLengths =\n+                    contentLengthFields.size() > 1 || contentLengthFields.get(0).indexOf(COMMA) >= 0;\n+            if (multipleContentLengths && message.protocolVersion() == HttpVersion.HTTP_1_1) {\n+                if (allowDuplicateContentLengths) {\n+                    // Find and enforce that all Content-Length values are the same\n+                    String firstValue = null;\n+                    for (String field : contentLengthFields) {\n+                        String[] tokens = COMMA_PATTERN.split(field, -1);\n+                        for (String token : tokens) {\n+                            String trimmed = token.trim();\n+                            if (firstValue == null) {\n+                                firstValue = trimmed;\n+                            } else if (!trimmed.equals(firstValue)) {\n+                                throw new IllegalArgumentException(\"Multiple Content-Length headers found\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA1NjQ5Ng=="}, "originalCommit": {"oid": "52a944faaf9da82c0d038b2717585c6fa5302f93"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTExNTIyMg==", "bodyText": "Mostly agree on content-length hopefully being less sensitive. I will bias towards including it for now.", "url": "https://github.com/netty/netty/pull/10349#discussion_r445115222", "createdAt": "2020-06-24T19:16:26Z", "author": {"login": "Bennett-Lynch"}, "path": "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectDecoder.java", "diffHunk": "@@ -611,17 +627,40 @@ private State readHeaders(ByteBuf buffer) {\n             //   duplicated field-values with a single valid Content-Length field\n             //   containing that decimal value prior to determining the message body\n             //   length or forwarding the message.\n-            if (contentLengthValuesCount > 1 && message.protocolVersion() == HttpVersion.HTTP_1_1) {\n-                throw new IllegalArgumentException(\"Multiple Content-Length headers found\");\n+            boolean multipleContentLengths =\n+                    contentLengthFields.size() > 1 || contentLengthFields.get(0).indexOf(COMMA) >= 0;\n+            if (multipleContentLengths && message.protocolVersion() == HttpVersion.HTTP_1_1) {\n+                if (allowDuplicateContentLengths) {\n+                    // Find and enforce that all Content-Length values are the same\n+                    String firstValue = null;\n+                    for (String field : contentLengthFields) {\n+                        String[] tokens = COMMA_PATTERN.split(field, -1);\n+                        for (String token : tokens) {\n+                            String trimmed = token.trim();\n+                            if (firstValue == null) {\n+                                firstValue = trimmed;\n+                            } else if (!trimmed.equals(firstValue)) {\n+                                throw new IllegalArgumentException(\"Multiple Content-Length headers found\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTA1NjQ5Ng=="}, "originalCommit": {"oid": "52a944faaf9da82c0d038b2717585c6fa5302f93"}, "originalPosition": 93}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3815, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}