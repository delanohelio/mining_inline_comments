{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxMTYyMjM2", "number": 10538, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwODowNjo1N1rOEg1JGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxOToxNzo1M1rOEhAv-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODYwNTY5OnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/AbstractIOUringChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwODowNjo1OFrOHN0_ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwODowNjo1OFrOHN0_ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI2MTc5NQ==", "bodyText": "Wildcard not allowed.", "url": "https://github.com/netty/netty/pull/10538#discussion_r484261795", "createdAt": "2020-09-07T08:06:58Z", "author": {"login": "hyperxpro"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/AbstractIOUringChannel.java", "diffHunk": "@@ -19,18 +19,7 @@\n import io.netty.buffer.ByteBufAllocator;\n import io.netty.buffer.ByteBufUtil;\n import io.netty.buffer.Unpooled;\n-import io.netty.channel.AbstractChannel;\n-import io.netty.channel.Channel;\n-import io.netty.channel.ChannelConfig;\n-import io.netty.channel.ChannelFuture;\n-import io.netty.channel.ChannelFutureListener;\n-import io.netty.channel.ChannelMetadata;\n-import io.netty.channel.ChannelOutboundBuffer;\n-import io.netty.channel.ChannelPromise;\n-import io.netty.channel.ConnectTimeoutException;\n-import io.netty.channel.DefaultChannelConfig;\n-import io.netty.channel.EventLoop;\n-import io.netty.channel.RecvByteBufAllocator;\n+import io.netty.channel.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56a998c03ceeb36caa6d825b6828f91cda91750a"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODYwNzgyOnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/test/java/io/netty/channel/uring/PollRemoveTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwODowNzo0M1rOHN1BAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwODoxMToxN1rOHN1ISQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI2MjE0NQ==", "bodyText": "Can we use a Logger instead of System.out.println(Object)?", "url": "https://github.com/netty/netty/pull/10538#discussion_r484262145", "createdAt": "2020-09-07T08:07:43Z", "author": {"login": "hyperxpro"}, "path": "transport-native-io_uring/src/test/java/io/netty/channel/uring/PollRemoveTest.java", "diffHunk": "@@ -81,7 +81,7 @@ public void initChannel(SocketChannel ch) throws Exception {\n     public void test() throws Exception {\n \n         io_uring_test();\n-\n+        Thread.sleep(1000);\n         System.out.println(\"io_uring --------------------------------\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56a998c03ceeb36caa6d825b6828f91cda91750a"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI2NDAwOQ==", "bodyText": "yes... I will do a full cleanup now so check style will pass etc.", "url": "https://github.com/netty/netty/pull/10538#discussion_r484264009", "createdAt": "2020-09-07T08:11:17Z", "author": {"login": "normanmaurer"}, "path": "transport-native-io_uring/src/test/java/io/netty/channel/uring/PollRemoveTest.java", "diffHunk": "@@ -81,7 +81,7 @@ public void initChannel(SocketChannel ch) throws Exception {\n     public void test() throws Exception {\n \n         io_uring_test();\n-\n+        Thread.sleep(1000);\n         System.out.println(\"io_uring --------------------------------\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI2MjE0NQ=="}, "originalCommit": {"oid": "56a998c03ceeb36caa6d825b6828f91cda91750a"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODgxOTkzOnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/test/java/io/netty/channel/uring/PollRemoveTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOTowMjo1M1rOHN2_Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMToxMjowNVrOHN7SjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI5NDQ1OA==", "bodyText": "A sleep in a test is always suspicious.", "url": "https://github.com/netty/netty/pull/10538#discussion_r484294458", "createdAt": "2020-09-07T09:02:53Z", "author": {"login": "chrisvest"}, "path": "transport-native-io_uring/src/test/java/io/netty/channel/uring/PollRemoveTest.java", "diffHunk": "@@ -64,6 +64,9 @@ public void initChannel(SocketChannel ch) { }\n     @Test\n     public void test() throws Exception {\n         io_uring_test();\n+\n+        Thread.sleep(1000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae5a8d795a2be7ec9e2f1fa7aefc2189fee4d8b6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMwODUyOA==", "bodyText": "I agree... that said this sleep has nothing to do with the PR itself ... I just added it as the test failed sometimes for me as the fd was not completely closed when we did rerun the test (was the case before as well)", "url": "https://github.com/netty/netty/pull/10538#discussion_r484308528", "createdAt": "2020-09-07T09:25:59Z", "author": {"login": "normanmaurer"}, "path": "transport-native-io_uring/src/test/java/io/netty/channel/uring/PollRemoveTest.java", "diffHunk": "@@ -64,6 +64,9 @@ public void initChannel(SocketChannel ch) { }\n     @Test\n     public void test() throws Exception {\n         io_uring_test();\n+\n+        Thread.sleep(1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI5NDQ1OA=="}, "originalCommit": {"oid": "ae5a8d795a2be7ec9e2f1fa7aefc2189fee4d8b6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM2NDk0MA==", "bodyText": "this test also failed for me as well..", "url": "https://github.com/netty/netty/pull/10538#discussion_r484364940", "createdAt": "2020-09-07T11:12:05Z", "author": {"login": "1Jo1"}, "path": "transport-native-io_uring/src/test/java/io/netty/channel/uring/PollRemoveTest.java", "diffHunk": "@@ -64,6 +64,9 @@ public void initChannel(SocketChannel ch) { }\n     @Test\n     public void test() throws Exception {\n         io_uring_test();\n+\n+        Thread.sleep(1000);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI5NDQ1OA=="}, "originalCommit": {"oid": "ae5a8d795a2be7ec9e2f1fa7aefc2189fee4d8b6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODg0NTU1OnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/AbstractIOUringChannel.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOTowOTowNFrOHN3OOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxMTowMDoxMFrOHN68lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI5ODI5Nw==", "bodyText": "An alternative to delay enqueueing the close operation, could be to enqueue it with the IOSQE_IO_DRAIN flag. Then the close operation will not be started until prior operations have completed, though following operations will also not be started until the close operation has completion, thus creating a slight queue hiccup. The hiccup might not be a big deal, though, compared to the state tracking we otherwise have to do.", "url": "https://github.com/netty/netty/pull/10538#discussion_r484298297", "createdAt": "2020-09-07T09:09:04Z", "author": {"login": "chrisvest"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/AbstractIOUringChannel.java", "diffHunk": "@@ -327,23 +346,54 @@ private void doWriteMultiple(ChannelOutboundBuffer in) {\n      }\n \n     protected final void doWriteSingle(ByteBuf buf) {\n+        assert (ioState & WRITE_SCHEDULED) == 0;\n         IOUringSubmissionQueue submissionQueue = submissionQueue();\n         submissionQueue.addWrite(socket.intValue(), buf.memoryAddress(), buf.readerIndex(),\n                 buf.writerIndex());\n         ioState |= WRITE_SCHEDULED;\n     }\n \n     //POLLOUT\n-    private void addPollOut() {\n+    private void schedulePollOut() {\n         assert (ioState & POLL_OUT_SCHEDULED) == 0;\n-        ioState |= POLL_OUT_SCHEDULED;\n         IOUringSubmissionQueue submissionQueue = submissionQueue();\n         submissionQueue.addPollOut(socket.intValue());\n+        ioState |= POLL_OUT_SCHEDULED;\n+    }\n+\n+    void schedulePollRdHup() {\n+        assert (ioState & POLL_RDHUP_SCHEDULED) == 0;\n+        IOUringSubmissionQueue submissionQueue = submissionQueue();\n+        submissionQueue.addPollRdHup(fd().intValue());\n+        ioState |= POLL_RDHUP_SCHEDULED;\n     }\n \n     abstract class AbstractUringUnsafe extends AbstractUnsafe {\n         private IOUringRecvByteAllocatorHandle allocHandle;\n \n+        @Override\n+        public void close(ChannelPromise promise) {\n+            if ((ioState & (WRITE_SCHEDULED | READ_SCHEDULED | CONNECT_SCHEDULED)) == 0) {\n+                forceClose(promise);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae5a8d795a2be7ec9e2f1fa7aefc2189fee4d8b6"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMwNzg0Nw==", "bodyText": "The problem with this is that this is not only about the \"close sys call\" but also about other state that is set in netty itself. So this will not help at all :)", "url": "https://github.com/netty/netty/pull/10538#discussion_r484307847", "createdAt": "2020-09-07T09:24:53Z", "author": {"login": "normanmaurer"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/AbstractIOUringChannel.java", "diffHunk": "@@ -327,23 +346,54 @@ private void doWriteMultiple(ChannelOutboundBuffer in) {\n      }\n \n     protected final void doWriteSingle(ByteBuf buf) {\n+        assert (ioState & WRITE_SCHEDULED) == 0;\n         IOUringSubmissionQueue submissionQueue = submissionQueue();\n         submissionQueue.addWrite(socket.intValue(), buf.memoryAddress(), buf.readerIndex(),\n                 buf.writerIndex());\n         ioState |= WRITE_SCHEDULED;\n     }\n \n     //POLLOUT\n-    private void addPollOut() {\n+    private void schedulePollOut() {\n         assert (ioState & POLL_OUT_SCHEDULED) == 0;\n-        ioState |= POLL_OUT_SCHEDULED;\n         IOUringSubmissionQueue submissionQueue = submissionQueue();\n         submissionQueue.addPollOut(socket.intValue());\n+        ioState |= POLL_OUT_SCHEDULED;\n+    }\n+\n+    void schedulePollRdHup() {\n+        assert (ioState & POLL_RDHUP_SCHEDULED) == 0;\n+        IOUringSubmissionQueue submissionQueue = submissionQueue();\n+        submissionQueue.addPollRdHup(fd().intValue());\n+        ioState |= POLL_RDHUP_SCHEDULED;\n     }\n \n     abstract class AbstractUringUnsafe extends AbstractUnsafe {\n         private IOUringRecvByteAllocatorHandle allocHandle;\n \n+        @Override\n+        public void close(ChannelPromise promise) {\n+            if ((ioState & (WRITE_SCHEDULED | READ_SCHEDULED | CONNECT_SCHEDULED)) == 0) {\n+                forceClose(promise);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI5ODI5Nw=="}, "originalCommit": {"oid": "ae5a8d795a2be7ec9e2f1fa7aefc2189fee4d8b6"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDM1OTMxOQ==", "bodyText": "it might cause an issue if we set IOSQE_IO_DRAIN, when some fd submit another fd polling event before, sqe wouldn't be executed as it waits until the socket is readable", "url": "https://github.com/netty/netty/pull/10538#discussion_r484359319", "createdAt": "2020-09-07T11:00:10Z", "author": {"login": "1Jo1"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/AbstractIOUringChannel.java", "diffHunk": "@@ -327,23 +346,54 @@ private void doWriteMultiple(ChannelOutboundBuffer in) {\n      }\n \n     protected final void doWriteSingle(ByteBuf buf) {\n+        assert (ioState & WRITE_SCHEDULED) == 0;\n         IOUringSubmissionQueue submissionQueue = submissionQueue();\n         submissionQueue.addWrite(socket.intValue(), buf.memoryAddress(), buf.readerIndex(),\n                 buf.writerIndex());\n         ioState |= WRITE_SCHEDULED;\n     }\n \n     //POLLOUT\n-    private void addPollOut() {\n+    private void schedulePollOut() {\n         assert (ioState & POLL_OUT_SCHEDULED) == 0;\n-        ioState |= POLL_OUT_SCHEDULED;\n         IOUringSubmissionQueue submissionQueue = submissionQueue();\n         submissionQueue.addPollOut(socket.intValue());\n+        ioState |= POLL_OUT_SCHEDULED;\n+    }\n+\n+    void schedulePollRdHup() {\n+        assert (ioState & POLL_RDHUP_SCHEDULED) == 0;\n+        IOUringSubmissionQueue submissionQueue = submissionQueue();\n+        submissionQueue.addPollRdHup(fd().intValue());\n+        ioState |= POLL_RDHUP_SCHEDULED;\n     }\n \n     abstract class AbstractUringUnsafe extends AbstractUnsafe {\n         private IOUringRecvByteAllocatorHandle allocHandle;\n \n+        @Override\n+        public void close(ChannelPromise promise) {\n+            if ((ioState & (WRITE_SCHEDULED | READ_SCHEDULED | CONNECT_SCHEDULED)) == 0) {\n+                forceClose(promise);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDI5ODI5Nw=="}, "originalCommit": {"oid": "ae5a8d795a2be7ec9e2f1fa7aefc2189fee4d8b6"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTAxODg1OnYy", "diffSide": "LEFT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/AbstractIOUringChannel.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOTo1NDoyMFrOHN43LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOTo1NDoyMFrOHN43LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMyNTE2NA==", "bodyText": "This is not needed anymore as even with SO_LINGER we are fine as the close will not block this method ;)", "url": "https://github.com/netty/netty/pull/10538#discussion_r484325164", "createdAt": "2020-09-07T09:54:20Z", "author": {"login": "normanmaurer"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/AbstractIOUringChannel.java", "diffHunk": "@@ -247,29 +243,16 @@ protected void doClose() throws Exception {\n \n             cancelConnectTimeoutFuture();\n \n-            if (isRegistered()) {\n-                // Need to check if we are on the EventLoop as doClose() may be triggered by the GlobalEventExecutor\n-                // if SO_LINGER is used.\n-                //\n-                // See https://github.com/netty/netty/issues/7159", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "657864aaae906e1195d7ec3546d2db0984be8dac"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyOTAyMTI5OnYy", "diffSide": "RIGHT", "path": "transport-native-unix-common/src/main/java/io/netty/channel/unix/FileDescriptor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOTo1NTowMlrOHN44rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwOTo1NTowMlrOHN44rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDMyNTU0OA==", "bodyText": "I need this one for now... We will refactor this later on.", "url": "https://github.com/netty/netty/pull/10538#discussion_r484325548", "createdAt": "2020-09-07T09:55:02Z", "author": {"login": "normanmaurer"}, "path": "transport-native-unix-common/src/main/java/io/netty/channel/unix/FileDescriptor.java", "diffHunk": "@@ -62,23 +62,28 @@ public final int intValue() {\n         return fd;\n     }\n \n-    /**\n-     * Close the file descriptor.\n-     */\n-    public void close() throws IOException {\n+    protected boolean markClosed() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "657864aaae906e1195d7ec3546d2db0984be8dac"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMDMyMjAzOnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/AbstractIOUringChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNzowMTo1N1rOHOE_rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxNzowMTo1N1rOHOE_rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDUyMzk1MQ==", "bodyText": "nit: combine these?", "url": "https://github.com/netty/netty/pull/10538#discussion_r484523951", "createdAt": "2020-09-07T17:01:57Z", "author": {"login": "njhill"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/AbstractIOUringChannel.java", "diffHunk": "@@ -288,6 +271,16 @@ protected void doWrite(ChannelOutboundBuffer in) {\n         if ((ioState & WRITE_SCHEDULED) != 0) {\n             return;\n         }\n+        scheduleWrite(in);\n+    }\n+\n+    private void scheduleWrite(ChannelOutboundBuffer in) {\n+        if (delayedClose != null) {\n+            return;\n+        }\n+        if (in == null) {\n+            return;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "657864aaae906e1195d7ec3546d2db0984be8dac"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMDQ4NjI4OnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/AbstractIOUringChannel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxOTowMDozMVrOHOGX2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxOTowNjo1OVrOHOGcDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU0NjUyMQ==", "bodyText": "nit: write -> io", "url": "https://github.com/netty/netty/pull/10538#discussion_r484546521", "createdAt": "2020-09-07T19:00:31Z", "author": {"login": "njhill"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/AbstractIOUringChannel.java", "diffHunk": "@@ -327,23 +320,54 @@ private void doWriteMultiple(ChannelOutboundBuffer in) {\n      }\n \n     protected final void doWriteSingle(ByteBuf buf) {\n+        assert (ioState & WRITE_SCHEDULED) == 0;\n         IOUringSubmissionQueue submissionQueue = submissionQueue();\n         submissionQueue.addWrite(socket.intValue(), buf.memoryAddress(), buf.readerIndex(),\n                 buf.writerIndex());\n         ioState |= WRITE_SCHEDULED;\n     }\n \n     //POLLOUT\n-    private void addPollOut() {\n+    private void schedulePollOut() {\n         assert (ioState & POLL_OUT_SCHEDULED) == 0;\n-        ioState |= POLL_OUT_SCHEDULED;\n         IOUringSubmissionQueue submissionQueue = submissionQueue();\n         submissionQueue.addPollOut(socket.intValue());\n+        ioState |= POLL_OUT_SCHEDULED;\n+    }\n+\n+    void schedulePollRdHup() {\n+        assert (ioState & POLL_RDHUP_SCHEDULED) == 0;\n+        IOUringSubmissionQueue submissionQueue = submissionQueue();\n+        submissionQueue.addPollRdHup(fd().intValue());\n+        ioState |= POLL_RDHUP_SCHEDULED;\n     }\n \n     abstract class AbstractUringUnsafe extends AbstractUnsafe {\n         private IOUringRecvByteAllocatorHandle allocHandle;\n \n+        @Override\n+        public void close(ChannelPromise promise) {\n+            if ((ioState & (WRITE_SCHEDULED | READ_SCHEDULED | CONNECT_SCHEDULED)) == 0) {\n+                forceClose(promise);\n+            } else {\n+                if (delayedClose == null || delayedClose.isVoid()) {\n+                    // We have a write operation pending that should be completed asap.\n+                    // We will do the actual close operation one this write result is returned as otherwise\n+                    // we may get into trouble as we may close the fd while we did not process the write yet.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "657864aaae906e1195d7ec3546d2db0984be8dac"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU0NzU5Ng==", "bodyText": "nit: else if?", "url": "https://github.com/netty/netty/pull/10538#discussion_r484547596", "createdAt": "2020-09-07T19:06:59Z", "author": {"login": "njhill"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/AbstractIOUringChannel.java", "diffHunk": "@@ -327,23 +320,54 @@ private void doWriteMultiple(ChannelOutboundBuffer in) {\n      }\n \n     protected final void doWriteSingle(ByteBuf buf) {\n+        assert (ioState & WRITE_SCHEDULED) == 0;\n         IOUringSubmissionQueue submissionQueue = submissionQueue();\n         submissionQueue.addWrite(socket.intValue(), buf.memoryAddress(), buf.readerIndex(),\n                 buf.writerIndex());\n         ioState |= WRITE_SCHEDULED;\n     }\n \n     //POLLOUT\n-    private void addPollOut() {\n+    private void schedulePollOut() {\n         assert (ioState & POLL_OUT_SCHEDULED) == 0;\n-        ioState |= POLL_OUT_SCHEDULED;\n         IOUringSubmissionQueue submissionQueue = submissionQueue();\n         submissionQueue.addPollOut(socket.intValue());\n+        ioState |= POLL_OUT_SCHEDULED;\n+    }\n+\n+    void schedulePollRdHup() {\n+        assert (ioState & POLL_RDHUP_SCHEDULED) == 0;\n+        IOUringSubmissionQueue submissionQueue = submissionQueue();\n+        submissionQueue.addPollRdHup(fd().intValue());\n+        ioState |= POLL_RDHUP_SCHEDULED;\n     }\n \n     abstract class AbstractUringUnsafe extends AbstractUnsafe {\n         private IOUringRecvByteAllocatorHandle allocHandle;\n \n+        @Override\n+        public void close(ChannelPromise promise) {\n+            if ((ioState & (WRITE_SCHEDULED | READ_SCHEDULED | CONNECT_SCHEDULED)) == 0) {\n+                forceClose(promise);\n+            } else {\n+                if (delayedClose == null || delayedClose.isVoid()) {\n+                    // We have a write operation pending that should be completed asap.\n+                    // We will do the actual close operation one this write result is returned as otherwise\n+                    // we may get into trouble as we may close the fd while we did not process the write yet.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU0NjUyMQ=="}, "originalCommit": {"oid": "657864aaae906e1195d7ec3546d2db0984be8dac"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMDQ5NDg4OnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/AbstractIOUringChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxOTowNzozNFrOHOGcdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxOTowNzozNFrOHOGcdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU0NzcwMg==", "bodyText": "nit: could simplify to:\n} else if (!promise.isVoid()) {\n    delayedClose.addListener(new ChannelPromiseNotifier(promise));\n}", "url": "https://github.com/netty/netty/pull/10538#discussion_r484547702", "createdAt": "2020-09-07T19:07:34Z", "author": {"login": "njhill"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/AbstractIOUringChannel.java", "diffHunk": "@@ -327,23 +320,54 @@ private void doWriteMultiple(ChannelOutboundBuffer in) {\n      }\n \n     protected final void doWriteSingle(ByteBuf buf) {\n+        assert (ioState & WRITE_SCHEDULED) == 0;\n         IOUringSubmissionQueue submissionQueue = submissionQueue();\n         submissionQueue.addWrite(socket.intValue(), buf.memoryAddress(), buf.readerIndex(),\n                 buf.writerIndex());\n         ioState |= WRITE_SCHEDULED;\n     }\n \n     //POLLOUT\n-    private void addPollOut() {\n+    private void schedulePollOut() {\n         assert (ioState & POLL_OUT_SCHEDULED) == 0;\n-        ioState |= POLL_OUT_SCHEDULED;\n         IOUringSubmissionQueue submissionQueue = submissionQueue();\n         submissionQueue.addPollOut(socket.intValue());\n+        ioState |= POLL_OUT_SCHEDULED;\n+    }\n+\n+    void schedulePollRdHup() {\n+        assert (ioState & POLL_RDHUP_SCHEDULED) == 0;\n+        IOUringSubmissionQueue submissionQueue = submissionQueue();\n+        submissionQueue.addPollRdHup(fd().intValue());\n+        ioState |= POLL_RDHUP_SCHEDULED;\n     }\n \n     abstract class AbstractUringUnsafe extends AbstractUnsafe {\n         private IOUringRecvByteAllocatorHandle allocHandle;\n \n+        @Override\n+        public void close(ChannelPromise promise) {\n+            if ((ioState & (WRITE_SCHEDULED | READ_SCHEDULED | CONNECT_SCHEDULED)) == 0) {\n+                forceClose(promise);\n+            } else {\n+                if (delayedClose == null || delayedClose.isVoid()) {\n+                    // We have a write operation pending that should be completed asap.\n+                    // We will do the actual close operation one this write result is returned as otherwise\n+                    // we may get into trouble as we may close the fd while we did not process the write yet.\n+                    delayedClose = promise;\n+                } else {\n+                    if (promise.isVoid()) {\n+                        return;\n+                    }\n+                    delayedClose.addListener(new ChannelPromiseNotifier(promise));\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "657864aaae906e1195d7ec3546d2db0984be8dac"}, "originalPosition": 175}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMDUwMDc3OnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/AbstractIOUringChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxOToxMjoxOFrOHOGflg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxOToxMjoxOFrOHOGflg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU0ODUwMg==", "bodyText": "clear RDHUP_SCHEDULED here?", "url": "https://github.com/netty/netty/pull/10538#discussion_r484548502", "createdAt": "2020-09-07T19:12:18Z", "author": {"login": "njhill"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/AbstractIOUringChannel.java", "diffHunk": "@@ -464,6 +495,9 @@ final void readComplete(int res) {\n          * Called once POLLRDHUP event is ready to be processed\n          */\n         final void pollRdHup(int res) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "657864aaae906e1195d7ec3546d2db0984be8dac"}, "originalPosition": 214}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMDUwNzQ2OnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringEventLoop.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QxOToxNzo1M1rOHOGjIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNjo0MTo1MVrOHOOyZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU0OTQxMQ==", "bodyText": "Could do as a follow-on but this would probably be cleaner to cover non-channel-specific cases first, then lookup the channel once and pass it to appropriate handler if non-null (rather than looking up separately in each of the handlers)", "url": "https://github.com/netty/netty/pull/10538#discussion_r484549411", "createdAt": "2020-09-07T19:17:53Z", "author": {"login": "njhill"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringEventLoop.java", "diffHunk": "@@ -168,53 +168,69 @@ protected void run() {\n     @Override\n     public boolean handle(int fd, int res, long flags, int op, int pollMask) {\n         IOUringSubmissionQueue submissionQueue = ringBuffer.getIoUringSubmissionQueue();\n+        final AbstractIOUringChannel channel;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "657864aaae906e1195d7ec3546d2db0984be8dac"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY4NDM4OQ==", "bodyText": "let me do a followup", "url": "https://github.com/netty/netty/pull/10538#discussion_r484684389", "createdAt": "2020-09-08T06:41:51Z", "author": {"login": "normanmaurer"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringEventLoop.java", "diffHunk": "@@ -168,53 +168,69 @@ protected void run() {\n     @Override\n     public boolean handle(int fd, int res, long flags, int op, int pollMask) {\n         IOUringSubmissionQueue submissionQueue = ringBuffer.getIoUringSubmissionQueue();\n+        final AbstractIOUringChannel channel;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDU0OTQxMQ=="}, "originalCommit": {"oid": "657864aaae906e1195d7ec3546d2db0984be8dac"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3699, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}