{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTExODQ4OTc5", "number": 10747, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzoyNzoyMVrOEzLAdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzoyNzoyMVrOEzLAdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMDkzMTczOnYy", "diffSide": "RIGHT", "path": "buffer/src/test/java/io/netty/buffer/AbstractByteBufTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzoyNzoyMVrOHqPMEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwNzozNjo0NlrOHqPcNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1MTA4OQ==", "bodyText": "Don't you think the method name is too long?", "url": "https://github.com/netty/netty/pull/10747#discussion_r514051089", "createdAt": "2020-10-29T07:27:21Z", "author": {"login": "hyperxpro"}, "path": "buffer/src/test/java/io/netty/buffer/AbstractByteBufTest.java", "diffHunk": "@@ -4939,4 +4939,63 @@ public void testEnsureWritableIntegerOverflow() {\n             buffer.release();\n         }\n     }\n+\n+    @Test\n+    public void testEndiannessIndexOf() {\n+        buffer.clear();\n+        final int v = 0x02030201;\n+        buffer.writeIntLE(v);\n+        buffer.writeByte(0x01);\n+\n+        assertEquals(-1, buffer.indexOf(1, 4, (byte) 1));\n+        assertEquals(-1, buffer.indexOf(4, 1, (byte) 1));\n+        assertEquals(1, buffer.indexOf(1, 4, (byte) 2));\n+        assertEquals(3, buffer.indexOf(4, 1, (byte) 2));\n+    }\n+\n+    @Test\n+    public void explicitLittleEndianReadMethodsMustAlwaysUseLittleEndianByteOrder() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fa90c59581da3525e3ca02c579f6447c757aeed0"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1MTY0MA==", "bodyText": "fine as it is... its a test after all and the method name at least describes what it tests.", "url": "https://github.com/netty/netty/pull/10747#discussion_r514051640", "createdAt": "2020-10-29T07:28:40Z", "author": {"login": "normanmaurer"}, "path": "buffer/src/test/java/io/netty/buffer/AbstractByteBufTest.java", "diffHunk": "@@ -4939,4 +4939,63 @@ public void testEnsureWritableIntegerOverflow() {\n             buffer.release();\n         }\n     }\n+\n+    @Test\n+    public void testEndiannessIndexOf() {\n+        buffer.clear();\n+        final int v = 0x02030201;\n+        buffer.writeIntLE(v);\n+        buffer.writeByte(0x01);\n+\n+        assertEquals(-1, buffer.indexOf(1, 4, (byte) 1));\n+        assertEquals(-1, buffer.indexOf(4, 1, (byte) 1));\n+        assertEquals(1, buffer.indexOf(1, 4, (byte) 2));\n+        assertEquals(3, buffer.indexOf(4, 1, (byte) 2));\n+    }\n+\n+    @Test\n+    public void explicitLittleEndianReadMethodsMustAlwaysUseLittleEndianByteOrder() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1MTA4OQ=="}, "originalCommit": {"oid": "fa90c59581da3525e3ca02c579f6447c757aeed0"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1MjA5OA==", "bodyText": "Alright.", "url": "https://github.com/netty/netty/pull/10747#discussion_r514052098", "createdAt": "2020-10-29T07:29:38Z", "author": {"login": "hyperxpro"}, "path": "buffer/src/test/java/io/netty/buffer/AbstractByteBufTest.java", "diffHunk": "@@ -4939,4 +4939,63 @@ public void testEnsureWritableIntegerOverflow() {\n             buffer.release();\n         }\n     }\n+\n+    @Test\n+    public void testEndiannessIndexOf() {\n+        buffer.clear();\n+        final int v = 0x02030201;\n+        buffer.writeIntLE(v);\n+        buffer.writeByte(0x01);\n+\n+        assertEquals(-1, buffer.indexOf(1, 4, (byte) 1));\n+        assertEquals(-1, buffer.indexOf(4, 1, (byte) 1));\n+        assertEquals(1, buffer.indexOf(1, 4, (byte) 2));\n+        assertEquals(3, buffer.indexOf(4, 1, (byte) 2));\n+    }\n+\n+    @Test\n+    public void explicitLittleEndianReadMethodsMustAlwaysUseLittleEndianByteOrder() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1MTA4OQ=="}, "originalCommit": {"oid": "fa90c59581da3525e3ca02c579f6447c757aeed0"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1NTIyMg==", "bodyText": "It's good to give tests names that describe what's being verified. This helps long-term test maintainability, because a common problem there is figuring out what an old but newly failing test was intended to verify.", "url": "https://github.com/netty/netty/pull/10747#discussion_r514055222", "createdAt": "2020-10-29T07:36:46Z", "author": {"login": "chrisvest"}, "path": "buffer/src/test/java/io/netty/buffer/AbstractByteBufTest.java", "diffHunk": "@@ -4939,4 +4939,63 @@ public void testEnsureWritableIntegerOverflow() {\n             buffer.release();\n         }\n     }\n+\n+    @Test\n+    public void testEndiannessIndexOf() {\n+        buffer.clear();\n+        final int v = 0x02030201;\n+        buffer.writeIntLE(v);\n+        buffer.writeByte(0x01);\n+\n+        assertEquals(-1, buffer.indexOf(1, 4, (byte) 1));\n+        assertEquals(-1, buffer.indexOf(4, 1, (byte) 1));\n+        assertEquals(1, buffer.indexOf(1, 4, (byte) 2));\n+        assertEquals(3, buffer.indexOf(4, 1, (byte) 2));\n+    }\n+\n+    @Test\n+    public void explicitLittleEndianReadMethodsMustAlwaysUseLittleEndianByteOrder() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDA1MTA4OQ=="}, "originalCommit": {"oid": "fa90c59581da3525e3ca02c579f6447c757aeed0"}, "originalPosition": 19}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3646, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}