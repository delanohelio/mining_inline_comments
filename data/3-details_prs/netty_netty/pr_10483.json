{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4MDE3NDE0", "number": 10483, "title": "MQTT5 support for netty-codec-mqtt", "bodyText": "Motivation:\nMQTT Specification version 5 was released over a year ago,\nnetty-codec-mqtt should be changed to support it.\nModifications:\nAdded more message and header types in io.netty.handler.codec.mqtt\npackage in netty-coded-mqtt subproject,\nchanged MqttEncoder and MqttDecoder to handle them properly,\nupdated examples in netty-example.\nBased on https://github.com/moquette-io/netty-mqtt5-codec.\nResult:\nnetty-coded-mqtt supports both MQTT5 and MQTT3 now.", "createdAt": "2020-08-14T14:32:35Z", "url": "https://github.com/netty/netty/pull/10483", "merged": true, "mergeCommit": {"oid": "be2cd68443948f9d7a8c77d3ae286899146bfee8"}, "closed": true, "closedAt": "2020-08-31T07:16:41Z", "author": {"login": "paul-lysak"}, "timelineItems": {"totalCount": 27, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-6ZPZgFqTQ2Nzg0ODcwMg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdDlHPKAFqTQ3ODExMDE3NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY3ODQ4NzAy", "url": "https://github.com/netty/netty/pull/10483#pullrequestreview-467848702", "createdAt": "2020-08-14T20:11:27Z", "commit": {"oid": "675d0ee3ef75bb4c6a204cc7a7cfe7d2f172f596"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMDoxMToyN1rOHBCCWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQyMDoxMToyN1rOHBCCWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDg0Mzk5Mg==", "bodyText": "I believe it should be 0x81, 0x82 etc \ud83d\ude00", "url": "https://github.com/netty/netty/pull/10483#discussion_r470843992", "createdAt": "2020-08-14T20:11:27Z", "author": {"login": "kachayev"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttConnectReturnCode.java", "diffHunk": "@@ -25,11 +25,34 @@\n  */\n public enum MqttConnectReturnCode {\n     CONNECTION_ACCEPTED((byte) 0x00),\n+    //MQTT 3 codes\n     CONNECTION_REFUSED_UNACCEPTABLE_PROTOCOL_VERSION((byte) 0X01),\n     CONNECTION_REFUSED_IDENTIFIER_REJECTED((byte) 0x02),\n     CONNECTION_REFUSED_SERVER_UNAVAILABLE((byte) 0x03),\n     CONNECTION_REFUSED_BAD_USER_NAME_OR_PASSWORD((byte) 0x04),\n-    CONNECTION_REFUSED_NOT_AUTHORIZED((byte) 0x05);\n+    CONNECTION_REFUSED_NOT_AUTHORIZED((byte) 0x05),\n+    //MQTT 5 codes\n+    CONNECTION_REFUSED_UNSPECIFIED_ERROR((byte) 0x80),\n+    CONNECTION_REFUSED_MALFORMED_PACKET((byte) 0x80),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "675d0ee3ef75bb4c6a204cc7a7cfe7d2f172f596"}, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "675d0ee3ef75bb4c6a204cc7a7cfe7d2f172f596", "author": {"user": {"login": "paul-lysak", "name": "Paul Lysak"}}, "url": "https://github.com/netty/netty/commit/675d0ee3ef75bb4c6a204cc7a7cfe7d2f172f596", "committedDate": "2020-08-14T14:28:35Z", "message": "MQTT5 support for netty-codec-mqtt\n\nMotivation:\n\n MQTT Specification version 5 was released over a year ago,\n netty-codec-mqtt should be changed to support it.\n\nModifications:\n\n  Added more message and header types in `io.netty.handler.codec.mqtt`\n  package in `netty-coded-mqtt` subproject,\n  changed `MqttEncoder` and `MqttDecoder` to handle them properly,\n  updated examples in `netty-example`.\n\nResult:\n\n  `netty-coded-mqtt` supports both MQTT5 and MQTT3 now."}, "afterCommit": {"oid": "fc5dd1b3c9a8b35bd1b6c3945210d90c52fd985c", "author": {"user": {"login": "paul-lysak", "name": "Paul Lysak"}}, "url": "https://github.com/netty/netty/commit/fc5dd1b3c9a8b35bd1b6c3945210d90c52fd985c", "committedDate": "2020-08-15T04:44:09Z", "message": "MQTT5 support for netty-codec-mqtt\n\nMotivation:\n\n MQTT Specification version 5 was released over a year ago,\n netty-codec-mqtt should be changed to support it.\n\nModifications:\n\n  Added more message and header types in `io.netty.handler.codec.mqtt`\n  package in `netty-coded-mqtt` subproject,\n  changed `MqttEncoder` and `MqttDecoder` to handle them properly,\n  updated examples in `netty-example`.\n\nResult:\n\n  `netty-coded-mqtt` supports both MQTT5 and MQTT3 now."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fc5dd1b3c9a8b35bd1b6c3945210d90c52fd985c", "author": {"user": {"login": "paul-lysak", "name": "Paul Lysak"}}, "url": "https://github.com/netty/netty/commit/fc5dd1b3c9a8b35bd1b6c3945210d90c52fd985c", "committedDate": "2020-08-15T04:44:09Z", "message": "MQTT5 support for netty-codec-mqtt\n\nMotivation:\n\n MQTT Specification version 5 was released over a year ago,\n netty-codec-mqtt should be changed to support it.\n\nModifications:\n\n  Added more message and header types in `io.netty.handler.codec.mqtt`\n  package in `netty-coded-mqtt` subproject,\n  changed `MqttEncoder` and `MqttDecoder` to handle them properly,\n  updated examples in `netty-example`.\n\nResult:\n\n  `netty-coded-mqtt` supports both MQTT5 and MQTT3 now."}, "afterCommit": {"oid": "714d09e2c80834289418d19cb97e658fc4477401", "author": {"user": {"login": "paul-lysak", "name": "Paul Lysak"}}, "url": "https://github.com/netty/netty/commit/714d09e2c80834289418d19cb97e658fc4477401", "committedDate": "2020-08-15T07:03:19Z", "message": "MQTT5 support for netty-codec-mqtt\n\nMotivation:\n\n MQTT Specification version 5 was released over a year ago,\n netty-codec-mqtt should be changed to support it.\n\nModifications:\n\n  Added more message and header types in `io.netty.handler.codec.mqtt`\n  package in `netty-coded-mqtt` subproject,\n  changed `MqttEncoder` and `MqttDecoder` to handle them properly,\n  updated examples in `netty-example`.\n\nResult:\n\n  `netty-coded-mqtt` supports both MQTT5 and MQTT3 now."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4MDMzODY1", "url": "https://github.com/netty/netty/pull/10483#pullrequestreview-468033865", "createdAt": "2020-08-16T05:08:14Z", "commit": {"oid": "714d09e2c80834289418d19cb97e658fc4477401"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwNTowODoxNVrOHBPm0g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNlQwNToxMjoyOVrOHBPoNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA2NjMyMg==", "bodyText": "Did you check for API breakage?", "url": "https://github.com/netty/netty/pull/10483#discussion_r471066322", "createdAt": "2020-08-16T05:08:15Z", "author": {"login": "hyperxpro"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttCodecUtil.java", "diffHunk": "@@ -43,22 +43,28 @@ static boolean isValidClientId(MqttVersion mqttVersion, String clientId) {\n             return clientId != null && clientId.length() >= MIN_CLIENT_ID_LENGTH &&\n                 clientId.length() <= MAX_CLIENT_ID_LENGTH;\n         }\n-        if (mqttVersion == MqttVersion.MQTT_3_1_1) {\n+        if (mqttVersion == MqttVersion.MQTT_3_1_1 || mqttVersion == MqttVersion.MQTT_5) {\n             // In 3.1.3.1 Client Identifier of MQTT 3.1.1 specification, The Server MAY allow ClientId\u2019s\n             // that contain more than 23 encoded bytes. And, The Server MAY allow zero-length ClientId.\n             return clientId != null;\n         }\n         throw new IllegalArgumentException(mqttVersion + \" is unknown mqtt version\");\n     }\n \n-    static MqttFixedHeader validateFixedHeader(MqttFixedHeader mqttFixedHeader) {\n+    static MqttFixedHeader validateFixedHeader(MqttFixedHeader mqttFixedHeader, MqttVersion mqttVersion) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "714d09e2c80834289418d19cb97e658fc4477401"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA2NjQxOA==", "bodyText": "Should be 2020", "url": "https://github.com/netty/netty/pull/10483#discussion_r471066418", "createdAt": "2020-08-16T05:09:17Z", "author": {"login": "hyperxpro"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageIdAndPropertiesVariableHeader.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2014 The Netty Project", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "714d09e2c80834289418d19cb97e658fc4477401"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA2NjQ2Nw==", "bodyText": "Can be final", "url": "https://github.com/netty/netty/pull/10483#discussion_r471066467", "createdAt": "2020-08-16T05:10:00Z", "author": {"login": "hyperxpro"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2014 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.mqtt;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.List;\n+import java.util.ArrayList;\n+\n+/**\n+ * MQTT Properties container\n+ * */\n+public class MqttProperties {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "714d09e2c80834289418d19cb97e658fc4477401"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA2NjQ3NQ==", "bodyText": "Should be 2020", "url": "https://github.com/netty/netty/pull/10483#discussion_r471066475", "createdAt": "2020-08-16T05:10:14Z", "author": {"login": "hyperxpro"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttPubReplyMessageVariableHeader.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2014 The Netty Project", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "714d09e2c80834289418d19cb97e658fc4477401"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA2NjQ5OA==", "bodyText": "Should be 2020", "url": "https://github.com/netty/netty/pull/10483#discussion_r471066498", "createdAt": "2020-08-16T05:10:26Z", "author": {"login": "hyperxpro"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttReasonCodeAndPropertiesVariableHeader.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2014 The Netty Project", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "714d09e2c80834289418d19cb97e658fc4477401"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA2NjU0MA==", "bodyText": "Should be 2020", "url": "https://github.com/netty/netty/pull/10483#discussion_r471066540", "createdAt": "2020-08-16T05:10:40Z", "author": {"login": "hyperxpro"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttSubscriptionOption.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2014 The Netty Project", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "714d09e2c80834289418d19cb97e658fc4477401"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA2NjU2MA==", "bodyText": "Can be final.", "url": "https://github.com/netty/netty/pull/10483#discussion_r471066560", "createdAt": "2020-08-16T05:11:04Z", "author": {"login": "hyperxpro"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttSubscriptionOption.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2014 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.mqtt;\n+\n+/**\n+ * Model the SubscriptionOption used in Subscribe MQTT v5 packet\n+ */\n+public class MqttSubscriptionOption {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "714d09e2c80834289418d19cb97e658fc4477401"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA2NjYyMA==", "bodyText": "Should be 2020", "url": "https://github.com/netty/netty/pull/10483#discussion_r471066620", "createdAt": "2020-08-16T05:11:39Z", "author": {"login": "hyperxpro"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttUnsubAckPayload.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2014 The Netty Project", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "714d09e2c80834289418d19cb97e658fc4477401"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA2NjY1Mw==", "bodyText": "Can be final.", "url": "https://github.com/netty/netty/pull/10483#discussion_r471066653", "createdAt": "2020-08-16T05:11:58Z", "author": {"login": "hyperxpro"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttUnsubAckPayload.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2014 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.mqtt;\n+\n+import io.netty.util.internal.StringUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Payload for MQTT unsuback message as in V5.\n+ */\n+public class MqttUnsubAckPayload {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "714d09e2c80834289418d19cb97e658fc4477401"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTA2NjY3OQ==", "bodyText": "Wildcard * not allowed. Use FQCN.", "url": "https://github.com/netty/netty/pull/10483#discussion_r471066679", "createdAt": "2020-08-16T05:12:29Z", "author": {"login": "hyperxpro"}, "path": "example/src/main/java/io/netty/example/mqtt/heartBeat/MqttHeartBeatClientHandler.java", "diffHunk": "@@ -17,13 +17,7 @@\n \n import io.netty.channel.ChannelHandlerContext;\n import io.netty.channel.ChannelInboundHandlerAdapter;\n-import io.netty.handler.codec.mqtt.MqttConnectMessage;\n-import io.netty.handler.codec.mqtt.MqttConnectPayload;\n-import io.netty.handler.codec.mqtt.MqttConnectVariableHeader;\n-import io.netty.handler.codec.mqtt.MqttFixedHeader;\n-import io.netty.handler.codec.mqtt.MqttMessage;\n-import io.netty.handler.codec.mqtt.MqttMessageType;\n-import io.netty.handler.codec.mqtt.MqttQoS;\n+import io.netty.handler.codec.mqtt.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "714d09e2c80834289418d19cb97e658fc4477401"}, "originalPosition": 11}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "714d09e2c80834289418d19cb97e658fc4477401", "author": {"user": {"login": "paul-lysak", "name": "Paul Lysak"}}, "url": "https://github.com/netty/netty/commit/714d09e2c80834289418d19cb97e658fc4477401", "committedDate": "2020-08-15T07:03:19Z", "message": "MQTT5 support for netty-codec-mqtt\n\nMotivation:\n\n MQTT Specification version 5 was released over a year ago,\n netty-codec-mqtt should be changed to support it.\n\nModifications:\n\n  Added more message and header types in `io.netty.handler.codec.mqtt`\n  package in `netty-coded-mqtt` subproject,\n  changed `MqttEncoder` and `MqttDecoder` to handle them properly,\n  updated examples in `netty-example`.\n\nResult:\n\n  `netty-coded-mqtt` supports both MQTT5 and MQTT3 now."}, "afterCommit": {"oid": "70fd242a06c005a1143442b4c8e258baef94c2a9", "author": {"user": {"login": "paul-lysak", "name": "Paul Lysak"}}, "url": "https://github.com/netty/netty/commit/70fd242a06c005a1143442b4c8e258baef94c2a9", "committedDate": "2020-08-17T04:59:44Z", "message": "MQTT5 support for netty-codec-mqtt\n\nMotivation:\n\n MQTT Specification version 5 was released over a year ago,\n netty-codec-mqtt should be changed to support it.\n\nModifications:\n\n  Added more message and header types in `io.netty.handler.codec.mqtt`\n  package in `netty-coded-mqtt` subproject,\n  changed `MqttEncoder` and `MqttDecoder` to handle them properly,\n  updated examples in `netty-example`.\n\nResult:\n\n  `netty-coded-mqtt` supports both MQTT5 and MQTT3 now."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY4MTk3ODM1", "url": "https://github.com/netty/netty/pull/10483#pullrequestreview-468197835", "createdAt": "2020-08-17T06:40:06Z", "commit": {"oid": "70fd242a06c005a1143442b4c8e258baef94c2a9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QwNjo0MDowNlrOHBbb0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQwNzozMzoxM1rOHCHAxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI2MDExMw==", "bodyText": "So we only use this for the decoder and not the encoder right ? If we also use it for he Encoder we may want to use CodecException", "url": "https://github.com/netty/netty/pull/10483#discussion_r471260113", "createdAt": "2020-08-17T06:40:06Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttCodecUtil.java", "diffHunk": "@@ -43,22 +43,28 @@ static boolean isValidClientId(MqttVersion mqttVersion, String clientId) {\n             return clientId != null && clientId.length() >= MIN_CLIENT_ID_LENGTH &&\n                 clientId.length() <= MAX_CLIENT_ID_LENGTH;\n         }\n-        if (mqttVersion == MqttVersion.MQTT_3_1_1) {\n+        if (mqttVersion == MqttVersion.MQTT_3_1_1 || mqttVersion == MqttVersion.MQTT_5) {\n             // In 3.1.3.1 Client Identifier of MQTT 3.1.1 specification, The Server MAY allow ClientId\u2019s\n             // that contain more than 23 encoded bytes. And, The Server MAY allow zero-length ClientId.\n             return clientId != null;\n         }\n         throw new IllegalArgumentException(mqttVersion + \" is unknown mqtt version\");\n     }\n \n-    static MqttFixedHeader validateFixedHeader(MqttFixedHeader mqttFixedHeader) {\n+    static MqttFixedHeader validateFixedHeader(MqttFixedHeader mqttFixedHeader, MqttVersion mqttVersion) {\n         switch (mqttFixedHeader.messageType()) {\n             case PUBREL:\n             case SUBSCRIBE:\n             case UNSUBSCRIBE:\n                 if (mqttFixedHeader.qosLevel() != MqttQoS.AT_LEAST_ONCE) {\n                     throw new DecoderException(mqttFixedHeader.messageType().name() + \" message must have QoS 1\");\n                 }\n+                return mqttFixedHeader;\n+            case AUTH:\n+                if (mqttVersion != MqttVersion.MQTT_5) {\n+                    throw new DecoderException(\"AUTH message requires at least MQTT 5\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70fd242a06c005a1143442b4c8e258baef94c2a9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI2MDIyNA==", "bodyText": "final", "url": "https://github.com/netty/netty/pull/10483#discussion_r471260224", "createdAt": "2020-08-17T06:40:25Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttConnAckVariableHeader.java", "diffHunk": "@@ -27,9 +27,17 @@\n \n     private final boolean sessionPresent;\n \n+    private MqttProperties properties;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70fd242a06c005a1143442b4c8e258baef94c2a9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI2MDI5Ng==", "bodyText": "final", "url": "https://github.com/netty/netty/pull/10483#discussion_r471260296", "createdAt": "2020-08-17T06:40:37Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttConnectPayload.java", "diffHunk": "@@ -27,13 +27,15 @@\n public final class MqttConnectPayload {\n \n     private final String clientIdentifier;\n+    private MqttProperties willProperties;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70fd242a06c005a1143442b4c8e258baef94c2a9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI2MDM2Mw==", "bodyText": "final", "url": "https://github.com/netty/netty/pull/10483#discussion_r471260363", "createdAt": "2020-08-17T06:40:49Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttConnectVariableHeader.java", "diffHunk": "@@ -32,6 +32,7 @@\n     private final boolean isWillFlag;\n     private final boolean isCleanSession;\n     private final int keepAliveTimeSeconds;\n+    private MqttProperties properties;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70fd242a06c005a1143442b4c8e258baef94c2a9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTI2MDY1Ng==", "bodyText": "can you please explain why we need an AtomicReference here ?", "url": "https://github.com/netty/netty/pull/10483#discussion_r471260656", "createdAt": "2020-08-17T06:41:40Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java", "diffHunk": "@@ -57,68 +59,90 @@\n     private Object variableHeader;\n     private int bytesRemainingInVariablePart;\n \n+    private AtomicReference<MqttVersion> mqttVersionRef;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70fd242a06c005a1143442b4c8e258baef94c2a9"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk2OTcyMw==", "bodyText": "It would be nice if you could revert the formatting changes to make this easier to review", "url": "https://github.com/netty/netty/pull/10483#discussion_r471969723", "createdAt": "2020-08-18T07:26:22Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java", "diffHunk": "@@ -57,68 +59,90 @@\n     private Object variableHeader;\n     private int bytesRemainingInVariablePart;\n \n+    private AtomicReference<MqttVersion> mqttVersionRef;\n+\n+    private MqttVersion mqttVersion() {\n+        if (mqttVersionRef == null) {\n+            return MqttVersion.MQTT_3_1_1;\n+        } else {\n+            return mqttVersionRef.get();\n+        }\n+    }\n+\n     private final int maxBytesInMessage;\n \n     public MqttDecoder() {\n-      this(DEFAULT_MAX_BYTES_IN_MESSAGE);\n+        this(DEFAULT_MAX_BYTES_IN_MESSAGE);\n     }\n \n     public MqttDecoder(int maxBytesInMessage) {\n+        this(maxBytesInMessage, null);\n+    }\n+\n+    public MqttDecoder(AtomicReference<MqttVersion> mqttVersionRef) {\n+        this(DEFAULT_MAX_BYTES_IN_MESSAGE, mqttVersionRef);\n+    }\n+\n+    public MqttDecoder(int maxBytesInMessage, AtomicReference<MqttVersion> mqttVersionRef) {\n         super(DecoderState.READ_FIXED_HEADER);\n         this.maxBytesInMessage = maxBytesInMessage;\n+        this.mqttVersionRef = mqttVersionRef;\n     }\n \n     @Override\n     protected void decode(ChannelHandlerContext ctx, ByteBuf buffer, List<Object> out) throws Exception {\n         switch (state()) {\n-            case READ_FIXED_HEADER: try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70fd242a06c005a1143442b4c8e258baef94c2a9"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk2OTk4Mg==", "bodyText": "Use TooLongFrameException", "url": "https://github.com/netty/netty/pull/10483#discussion_r471969982", "createdAt": "2020-08-18T07:26:47Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java", "diffHunk": "@@ -57,68 +59,90 @@\n     private Object variableHeader;\n     private int bytesRemainingInVariablePart;\n \n+    private AtomicReference<MqttVersion> mqttVersionRef;\n+\n+    private MqttVersion mqttVersion() {\n+        if (mqttVersionRef == null) {\n+            return MqttVersion.MQTT_3_1_1;\n+        } else {\n+            return mqttVersionRef.get();\n+        }\n+    }\n+\n     private final int maxBytesInMessage;\n \n     public MqttDecoder() {\n-      this(DEFAULT_MAX_BYTES_IN_MESSAGE);\n+        this(DEFAULT_MAX_BYTES_IN_MESSAGE);\n     }\n \n     public MqttDecoder(int maxBytesInMessage) {\n+        this(maxBytesInMessage, null);\n+    }\n+\n+    public MqttDecoder(AtomicReference<MqttVersion> mqttVersionRef) {\n+        this(DEFAULT_MAX_BYTES_IN_MESSAGE, mqttVersionRef);\n+    }\n+\n+    public MqttDecoder(int maxBytesInMessage, AtomicReference<MqttVersion> mqttVersionRef) {\n         super(DecoderState.READ_FIXED_HEADER);\n         this.maxBytesInMessage = maxBytesInMessage;\n+        this.mqttVersionRef = mqttVersionRef;\n     }\n \n     @Override\n     protected void decode(ChannelHandlerContext ctx, ByteBuf buffer, List<Object> out) throws Exception {\n         switch (state()) {\n-            case READ_FIXED_HEADER: try {\n-                mqttFixedHeader = decodeFixedHeader(buffer);\n-                bytesRemainingInVariablePart = mqttFixedHeader.remainingLength();\n-                checkpoint(DecoderState.READ_VARIABLE_HEADER);\n-                // fall through\n-            } catch (Exception cause) {\n-                out.add(invalidMessage(cause));\n-                return;\n-            }\n+            case READ_FIXED_HEADER:\n+                try {\n+                    mqttFixedHeader = decodeFixedHeader(buffer);\n+                    bytesRemainingInVariablePart = mqttFixedHeader.remainingLength();\n+                    checkpoint(DecoderState.READ_VARIABLE_HEADER);\n+                    // fall through\n+                } catch (Exception cause) {\n+                    out.add(invalidMessage(cause));\n+                    return;\n+                }\n \n-            case READ_VARIABLE_HEADER:  try {\n-                final Result<?> decodedVariableHeader = decodeVariableHeader(buffer, mqttFixedHeader);\n-                variableHeader = decodedVariableHeader.value;\n-                if (bytesRemainingInVariablePart > maxBytesInMessage) {\n-                    throw new DecoderException(\"too large message: \" + bytesRemainingInVariablePart + \" bytes\");\n+            case READ_VARIABLE_HEADER:\n+                try {\n+                    final Result<?> decodedVariableHeader = decodeVariableHeader(buffer, mqttFixedHeader);\n+                    variableHeader = decodedVariableHeader.value;\n+                    if (bytesRemainingInVariablePart > maxBytesInMessage) {\n+                        throw new DecoderException(\"too large message: \" + bytesRemainingInVariablePart + \" bytes\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70fd242a06c005a1143442b4c8e258baef94c2a9"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk3MjA2MQ==", "bodyText": "This will not work as MqttEncoder is marked as @Sharable and so may be shared between different Channel\ufffd instances.", "url": "https://github.com/netty/netty/pull/10483#discussion_r471972061", "createdAt": "2020-08-18T07:30:01Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -36,9 +39,24 @@\n @ChannelHandler.Sharable\n public final class MqttEncoder extends MessageToMessageEncoder<MqttMessage> {\n \n-    public static final MqttEncoder INSTANCE = new MqttEncoder();\n+    public static final MqttEncoder INSTANCE = new MqttEncoder(null);\n \n-    private MqttEncoder() { }\n+    private AtomicReference<MqttVersion> mqttVersionRef;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70fd242a06c005a1143442b4c8e258baef94c2a9"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk3MjQ2OA==", "bodyText": "nit: you can merge the above two lines", "url": "https://github.com/netty/netty/pull/10483#discussion_r471972468", "createdAt": "2020-08-18T07:30:39Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -234,23 +276,35 @@ private static ByteBuf encodeSubscribeMessage(\n         // Variable Header\n         int messageId = variableHeader.messageId();\n         buf.writeShort(messageId);\n+        buf.writeBytes(propertiesBuf);\n \n         // Payload\n         for (MqttTopicSubscription topic : payload.topicSubscriptions()) {\n-            String topicName = topic.topicName();\n-            byte[] topicNameBytes = encodeStringUtf8(topicName);\n-            buf.writeShort(topicNameBytes.length);\n-            buf.writeBytes(topicNameBytes, 0, topicNameBytes.length);\n-            buf.writeByte(topic.qualityOfService().value());\n+            writeUTF8String(buf, topic.topicName());\n+            final MqttSubscriptionOption option = topic.option();\n+\n+            int optionEncoded = 0;\n+            optionEncoded |= option.retainHandling().value() << 4;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70fd242a06c005a1143442b4c8e258baef94c2a9"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk3MzEwOA==", "bodyText": "We can't do this as it would be API breakage", "url": "https://github.com/netty/netty/pull/10483#discussion_r471973108", "createdAt": "2020-08-18T07:31:41Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttUnsubscribeMessage.java", "diffHunk": "@@ -18,20 +18,27 @@\n \n /**\n  * See <a href=\"http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#unsubscribe\">\n- *     MQTTV3.1/unsubscribe</a>\n+ * MQTTV3.1/unsubscribe</a>\n  */\n public final class MqttUnsubscribeMessage extends MqttMessage {\n \n     public MqttUnsubscribeMessage(\n             MqttFixedHeader mqttFixedHeader,\n-            MqttMessageIdVariableHeader variableHeader,\n+            MqttMessageIdAndPropertiesVariableHeader variableHeader,\n             MqttUnsubscribePayload payload) {\n         super(mqttFixedHeader, variableHeader, payload);\n     }\n \n+    public MqttUnsubscribeMessage(\n+            MqttFixedHeader mqttFixedHeader,\n+            MqttMessageIdVariableHeader variableHeader,\n+            MqttUnsubscribePayload payload) {\n+        this(mqttFixedHeader, variableHeader.withEmptyProperties(), payload);\n+    }\n+\n     @Override\n-    public MqttMessageIdVariableHeader variableHeader() {\n-        return (MqttMessageIdVariableHeader) super.variableHeader();\n+    public MqttMessageIdAndPropertiesVariableHeader variableHeader() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70fd242a06c005a1143442b4c8e258baef94c2a9"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk3MzIxMw==", "bodyText": "We can't do this as it would be API breakage", "url": "https://github.com/netty/netty/pull/10483#discussion_r471973213", "createdAt": "2020-08-18T07:31:49Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttUnsubscribeMessage.java", "diffHunk": "@@ -18,20 +18,27 @@\n \n /**\n  * See <a href=\"http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#unsubscribe\">\n- *     MQTTV3.1/unsubscribe</a>\n+ * MQTTV3.1/unsubscribe</a>\n  */\n public final class MqttUnsubscribeMessage extends MqttMessage {\n \n     public MqttUnsubscribeMessage(\n             MqttFixedHeader mqttFixedHeader,\n-            MqttMessageIdVariableHeader variableHeader,\n+            MqttMessageIdAndPropertiesVariableHeader variableHeader,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70fd242a06c005a1143442b4c8e258baef94c2a9"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk3MzM0NQ==", "bodyText": "We can't do this as it would be API breakage", "url": "https://github.com/netty/netty/pull/10483#discussion_r471973345", "createdAt": "2020-08-18T07:32:02Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttUnsubAckMessage.java", "diffHunk": "@@ -21,12 +21,35 @@\n  */\n public final class MqttUnsubAckMessage extends MqttMessage {\n \n-    public MqttUnsubAckMessage(MqttFixedHeader mqttFixedHeader, MqttMessageIdVariableHeader variableHeader) {\n-        super(mqttFixedHeader, variableHeader, null);\n+    public MqttUnsubAckMessage(MqttFixedHeader mqttFixedHeader,\n+                               MqttMessageIdAndPropertiesVariableHeader variableHeader,\n+                               MqttUnsubAckPayload payload) {\n+        super(mqttFixedHeader, variableHeader, payload);\n+    }\n+\n+    public MqttUnsubAckMessage(MqttFixedHeader mqttFixedHeader,\n+                               MqttMessageIdVariableHeader variableHeader,\n+                               MqttUnsubAckPayload payload) {\n+        this(mqttFixedHeader, fallbackVariableHeader(variableHeader), payload);\n+    }\n+\n+    private static MqttMessageIdAndPropertiesVariableHeader fallbackVariableHeader(\n+            MqttMessageIdVariableHeader variableHeader) {\n+        if (variableHeader instanceof MqttMessageIdAndPropertiesVariableHeader) {\n+            return (MqttMessageIdAndPropertiesVariableHeader) variableHeader;\n+        } else {\n+            return new MqttMessageIdAndPropertiesVariableHeader(variableHeader.messageId(),\n+                    MqttProperties.NO_PROPERTIES);\n+        }\n+    }\n+\n+    @Override\n+    public MqttMessageIdAndPropertiesVariableHeader variableHeader() {\n+        return (MqttMessageIdAndPropertiesVariableHeader) super.variableHeader();\n     }\n \n     @Override\n-    public MqttMessageIdVariableHeader variableHeader() {\n-        return (MqttMessageIdVariableHeader) super.variableHeader();\n+    public MqttUnsubAckPayload payload() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70fd242a06c005a1143442b4c8e258baef94c2a9"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk3MzQ0MA==", "bodyText": "We can't do this as it would be API breakage", "url": "https://github.com/netty/netty/pull/10483#discussion_r471973440", "createdAt": "2020-08-18T07:32:11Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttUnsubAckMessage.java", "diffHunk": "@@ -21,12 +21,35 @@\n  */\n public final class MqttUnsubAckMessage extends MqttMessage {\n \n-    public MqttUnsubAckMessage(MqttFixedHeader mqttFixedHeader, MqttMessageIdVariableHeader variableHeader) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70fd242a06c005a1143442b4c8e258baef94c2a9"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk3MzYxOA==", "bodyText": "We can't do this as it would be API breakage", "url": "https://github.com/netty/netty/pull/10483#discussion_r471973618", "createdAt": "2020-08-18T07:32:25Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttSubscribeMessage.java", "diffHunk": "@@ -18,20 +18,27 @@\n \n /**\n  * See <a href=\"http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#subscribe\">\n- *     MQTTV3.1/subscribe</a>\n+ * MQTTV3.1/subscribe</a>\n  */\n public final class MqttSubscribeMessage extends MqttMessage {\n \n     public MqttSubscribeMessage(\n             MqttFixedHeader mqttFixedHeader,\n-            MqttMessageIdVariableHeader variableHeader,\n+            MqttMessageIdAndPropertiesVariableHeader variableHeader,\n             MqttSubscribePayload payload) {\n         super(mqttFixedHeader, variableHeader, payload);\n     }\n \n+    public MqttSubscribeMessage(\n+            MqttFixedHeader mqttFixedHeader,\n+            MqttMessageIdVariableHeader variableHeader,\n+            MqttSubscribePayload payload) {\n+        this(mqttFixedHeader, variableHeader.withEmptyProperties(), payload);\n+    }\n+\n     @Override\n-    public MqttMessageIdVariableHeader variableHeader() {\n-        return (MqttMessageIdVariableHeader) super.variableHeader();\n+    public MqttMessageIdAndPropertiesVariableHeader variableHeader() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70fd242a06c005a1143442b4c8e258baef94c2a9"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk3MzY1MA==", "bodyText": "We can't do this as it would be API breakage", "url": "https://github.com/netty/netty/pull/10483#discussion_r471973650", "createdAt": "2020-08-18T07:32:29Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttSubscribeMessage.java", "diffHunk": "@@ -18,20 +18,27 @@\n \n /**\n  * See <a href=\"http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#subscribe\">\n- *     MQTTV3.1/subscribe</a>\n+ * MQTTV3.1/subscribe</a>\n  */\n public final class MqttSubscribeMessage extends MqttMessage {\n \n     public MqttSubscribeMessage(\n             MqttFixedHeader mqttFixedHeader,\n-            MqttMessageIdVariableHeader variableHeader,\n+            MqttMessageIdAndPropertiesVariableHeader variableHeader,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70fd242a06c005a1143442b4c8e258baef94c2a9"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk3MzcwMw==", "bodyText": "We can't do this as it would be API breakage", "url": "https://github.com/netty/netty/pull/10483#discussion_r471973703", "createdAt": "2020-08-18T07:32:33Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttSubAckMessage.java", "diffHunk": "@@ -23,14 +23,21 @@\n \n     public MqttSubAckMessage(\n             MqttFixedHeader mqttFixedHeader,\n-            MqttMessageIdVariableHeader variableHeader,\n+            MqttMessageIdAndPropertiesVariableHeader variableHeader,\n             MqttSubAckPayload payload) {\n         super(mqttFixedHeader, variableHeader, payload);\n     }\n \n+    public MqttSubAckMessage(\n+            MqttFixedHeader mqttFixedHeader,\n+            MqttMessageIdVariableHeader variableHeader,\n+            MqttSubAckPayload payload) {\n+        this(mqttFixedHeader, variableHeader.withEmptyProperties(), payload);\n+    }\n+\n     @Override\n-    public MqttMessageIdVariableHeader variableHeader() {\n-        return (MqttMessageIdVariableHeader) super.variableHeader();\n+    public MqttMessageIdAndPropertiesVariableHeader variableHeader() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70fd242a06c005a1143442b4c8e258baef94c2a9"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk3Mzc0OA==", "bodyText": "We can't do this as it would be API breakage", "url": "https://github.com/netty/netty/pull/10483#discussion_r471973748", "createdAt": "2020-08-18T07:32:38Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttSubAckMessage.java", "diffHunk": "@@ -23,14 +23,21 @@\n \n     public MqttSubAckMessage(\n             MqttFixedHeader mqttFixedHeader,\n-            MqttMessageIdVariableHeader variableHeader,\n+            MqttMessageIdAndPropertiesVariableHeader variableHeader,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70fd242a06c005a1143442b4c8e258baef94c2a9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk3MzkyMA==", "bodyText": "missing null checks", "url": "https://github.com/netty/netty/pull/10483#discussion_r471973920", "createdAt": "2020-08-18T07:32:54Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttReasonCodeAndPropertiesVariableHeader.java", "diffHunk": "@@ -0,0 +1,54 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.netty.handler.codec.mqtt;\n+\n+import io.netty.util.internal.StringUtil;\n+\n+/**\n+ * Variable Header for AUTH and DISCONNECT messages represented by {@link MqttMessage}\n+ */\n+public final class MqttReasonCodeAndPropertiesVariableHeader {\n+\n+    private final byte reasonCode;\n+    private final MqttProperties properties;\n+\n+    public static final byte REASON_CODE_OK = 0;\n+\n+    public MqttReasonCodeAndPropertiesVariableHeader(byte reasonCode,\n+                                                     MqttProperties properties) {\n+        this.reasonCode = reasonCode;\n+        this.properties = properties;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70fd242a06c005a1143442b4c8e258baef94c2a9"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk3Mzk4MQ==", "bodyText": "We can't do this as it would be API breakage", "url": "https://github.com/netty/netty/pull/10483#discussion_r471973981", "createdAt": "2020-08-18T07:33:00Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttPublishVariableHeader.java", "diffHunk": "@@ -25,10 +25,12 @@\n \n     private final String topicName;\n     private final int packetId;\n+    private final MqttProperties mqttProperties;\n \n-    public MqttPublishVariableHeader(String topicName, int packetId) {\n+    public MqttPublishVariableHeader(String topicName, int packetId, MqttProperties mqttProperties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70fd242a06c005a1143442b4c8e258baef94c2a9"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTk3NDA4Ng==", "bodyText": "We can't do this as it would be API breakage", "url": "https://github.com/netty/netty/pull/10483#discussion_r471974086", "createdAt": "2020-08-18T07:33:13Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttPubAckMessage.java", "diffHunk": "@@ -1,32 +0,0 @@\n-/*\n- * Copyright 2014 The Netty Project\n- *\n- * The Netty Project licenses this file to you under the Apache License,\n- * version 2.0 (the \"License\"); you may not use this file except in compliance\n- * with the License. You may obtain a copy of the License at:\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n- * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n- * License for the specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-package io.netty.handler.codec.mqtt;\n-\n-/**\n- * See <a href=\"http://public.dhe.ibm.com/software/dw/webservices/ws-mqtt/mqtt-v3r1.html#puback\">MQTTV3.1/puback</a>\n- */\n-public final class MqttPubAckMessage extends MqttMessage {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "70fd242a06c005a1143442b4c8e258baef94c2a9"}, "originalPosition": 22}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "70fd242a06c005a1143442b4c8e258baef94c2a9", "author": {"user": {"login": "paul-lysak", "name": "Paul Lysak"}}, "url": "https://github.com/netty/netty/commit/70fd242a06c005a1143442b4c8e258baef94c2a9", "committedDate": "2020-08-17T04:59:44Z", "message": "MQTT5 support for netty-codec-mqtt\n\nMotivation:\n\n MQTT Specification version 5 was released over a year ago,\n netty-codec-mqtt should be changed to support it.\n\nModifications:\n\n  Added more message and header types in `io.netty.handler.codec.mqtt`\n  package in `netty-coded-mqtt` subproject,\n  changed `MqttEncoder` and `MqttDecoder` to handle them properly,\n  updated examples in `netty-example`.\n\nResult:\n\n  `netty-coded-mqtt` supports both MQTT5 and MQTT3 now."}, "afterCommit": {"oid": "9786339412a2f1b31d2a8dbfc6c07f9120842091", "author": {"user": {"login": "paul-lysak", "name": "Paul Lysak"}}, "url": "https://github.com/netty/netty/commit/9786339412a2f1b31d2a8dbfc6c07f9120842091", "committedDate": "2020-08-18T11:16:27Z", "message": "MQTT5 support for netty-codec-mqtt\n\nMotivation:\n\n MQTT Specification version 5 was released over a year ago,\n netty-codec-mqtt should be changed to support it.\n\nModifications:\n\n  Added more message and header types in `io.netty.handler.codec.mqtt`\n  package in `netty-coded-mqtt` subproject,\n  changed `MqttEncoder` and `MqttDecoder` to handle them properly,\n  updated examples in `netty-example`.\n\nResult:\n\n  `netty-coded-mqtt` supports both MQTT5 and MQTT3 now."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9786339412a2f1b31d2a8dbfc6c07f9120842091", "author": {"user": {"login": "paul-lysak", "name": "Paul Lysak"}}, "url": "https://github.com/netty/netty/commit/9786339412a2f1b31d2a8dbfc6c07f9120842091", "committedDate": "2020-08-18T11:16:27Z", "message": "MQTT5 support for netty-codec-mqtt\n\nMotivation:\n\n MQTT Specification version 5 was released over a year ago,\n netty-codec-mqtt should be changed to support it.\n\nModifications:\n\n  Added more message and header types in `io.netty.handler.codec.mqtt`\n  package in `netty-coded-mqtt` subproject,\n  changed `MqttEncoder` and `MqttDecoder` to handle them properly,\n  updated examples in `netty-example`.\n\nResult:\n\n  `netty-coded-mqtt` supports both MQTT5 and MQTT3 now."}, "afterCommit": {"oid": "a59e65c1dc5b3af7821846e0c7d0150c261a9b8a", "author": {"user": {"login": "paul-lysak", "name": "Paul Lysak"}}, "url": "https://github.com/netty/netty/commit/a59e65c1dc5b3af7821846e0c7d0150c261a9b8a", "committedDate": "2020-08-19T06:04:02Z", "message": "MQTT5 support for netty-codec-mqtt\n\nMotivation:\n\n MQTT Specification version 5 was released over a year ago,\n netty-codec-mqtt should be changed to support it.\n\nModifications:\n\n  Added more message and header types in `io.netty.handler.codec.mqtt`\n  package in `netty-coded-mqtt` subproject,\n  changed `MqttEncoder` and `MqttDecoder` to handle them properly,\n  updated examples in `netty-example`.\n\nResult:\n\n  `netty-coded-mqtt` supports both MQTT5 and MQTT3 now."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a59e65c1dc5b3af7821846e0c7d0150c261a9b8a", "author": {"user": {"login": "paul-lysak", "name": "Paul Lysak"}}, "url": "https://github.com/netty/netty/commit/a59e65c1dc5b3af7821846e0c7d0150c261a9b8a", "committedDate": "2020-08-19T06:04:02Z", "message": "MQTT5 support for netty-codec-mqtt\n\nMotivation:\n\n MQTT Specification version 5 was released over a year ago,\n netty-codec-mqtt should be changed to support it.\n\nModifications:\n\n  Added more message and header types in `io.netty.handler.codec.mqtt`\n  package in `netty-coded-mqtt` subproject,\n  changed `MqttEncoder` and `MqttDecoder` to handle them properly,\n  updated examples in `netty-example`.\n\nResult:\n\n  `netty-coded-mqtt` supports both MQTT5 and MQTT3 now."}, "afterCommit": {"oid": "95eb759b41c870c90d0165d2d6b323d2457ed143", "author": {"user": {"login": "paul-lysak", "name": "Paul Lysak"}}, "url": "https://github.com/netty/netty/commit/95eb759b41c870c90d0165d2d6b323d2457ed143", "committedDate": "2020-08-19T06:10:13Z", "message": "MQTT5 support for netty-codec-mqtt\n\nMotivation:\n\n MQTT Specification version 5 was released over a year ago,\n netty-codec-mqtt should be changed to support it.\n\nModifications:\n\n  Added more message and header types in `io.netty.handler.codec.mqtt`\n  package in `netty-coded-mqtt` subproject,\n  changed `MqttEncoder` and `MqttDecoder` to handle them properly,\n  updated examples in `netty-example`.\n\nResult:\n\n  `netty-coded-mqtt` supports both MQTT5 and MQTT3 now."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwMjYxNjky", "url": "https://github.com/netty/netty/pull/10483#pullrequestreview-470261692", "createdAt": "2020-08-19T09:00:40Z", "commit": {"oid": "95eb759b41c870c90d0165d2d6b323d2457ed143"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwOTowMDo0MFrOHC-B8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwOTowMDo0MFrOHC-B8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg3NTUwNQ==", "bodyText": "nit: you can remove the else as you return in the if anyway", "url": "https://github.com/netty/netty/pull/10483#discussion_r472875505", "createdAt": "2020-08-19T09:00:40Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttCodecUtil.java", "diffHunk": "@@ -16,14 +16,34 @@\n \n package io.netty.handler.codec.mqtt;\n \n+import io.netty.channel.ChannelHandlerContext;\n import io.netty.handler.codec.DecoderException;\n+import io.netty.util.Attribute;\n+import io.netty.util.AttributeKey;\n \n final class MqttCodecUtil {\n \n     private static final char[] TOPIC_WILDCARDS = {'#', '+'};\n     private static final int MIN_CLIENT_ID_LENGTH = 1;\n     private static final int MAX_CLIENT_ID_LENGTH = 23;\n \n+    static final AttributeKey<MqttVersion> MQTT_VERSION_KEY = AttributeKey.valueOf(\"MQTT_VERSION\");\n+\n+    static MqttVersion getMqttVersion(ChannelHandlerContext ctx) {\n+        Attribute<MqttVersion> attr = ctx.channel().attr(MQTT_VERSION_KEY);\n+        MqttVersion version = attr.get();\n+        if (version == null) {\n+            return MqttVersion.MQTT_3_1_1;\n+        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95eb759b41c870c90d0165d2d6b323d2457ed143"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwMjYyMjQz", "url": "https://github.com/netty/netty/pull/10483#pullrequestreview-470262243", "createdAt": "2020-08-19T09:01:18Z", "commit": {"oid": "95eb759b41c870c90d0165d2d6b323d2457ed143"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwOTowMToxOVrOHC-Drw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQwOTozNjowOFrOHC_Y5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg3NTk1MQ==", "bodyText": "I would use a \"more unique\" name so we not clash with something the user may have defined already", "url": "https://github.com/netty/netty/pull/10483#discussion_r472875951", "createdAt": "2020-08-19T09:01:19Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttCodecUtil.java", "diffHunk": "@@ -16,14 +16,34 @@\n \n package io.netty.handler.codec.mqtt;\n \n+import io.netty.channel.ChannelHandlerContext;\n import io.netty.handler.codec.DecoderException;\n+import io.netty.util.Attribute;\n+import io.netty.util.AttributeKey;\n \n final class MqttCodecUtil {\n \n     private static final char[] TOPIC_WILDCARDS = {'#', '+'};\n     private static final int MIN_CLIENT_ID_LENGTH = 1;\n     private static final int MAX_CLIENT_ID_LENGTH = 23;\n \n+    static final AttributeKey<MqttVersion> MQTT_VERSION_KEY = AttributeKey.valueOf(\"MQTT_VERSION\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95eb759b41c870c90d0165d2d6b323d2457ed143"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg3NjI5MA==", "bodyText": "nit: update comment to reflect that this is also true for version 5 ?", "url": "https://github.com/netty/netty/pull/10483#discussion_r472876290", "createdAt": "2020-08-19T09:01:52Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttCodecUtil.java", "diffHunk": "@@ -43,22 +63,28 @@ static boolean isValidClientId(MqttVersion mqttVersion, String clientId) {\n             return clientId != null && clientId.length() >= MIN_CLIENT_ID_LENGTH &&\n                 clientId.length() <= MAX_CLIENT_ID_LENGTH;\n         }\n-        if (mqttVersion == MqttVersion.MQTT_3_1_1) {\n+        if (mqttVersion == MqttVersion.MQTT_3_1_1 || mqttVersion == MqttVersion.MQTT_5) {\n             // In 3.1.3.1 Client Identifier of MQTT 3.1.1 specification, The Server MAY allow ClientId\u2019s", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95eb759b41c870c90d0165d2d6b323d2457ed143"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg3NzMzNA==", "bodyText": "do we need a null check via ObjectUtils.checkNotNull(...) ?", "url": "https://github.com/netty/netty/pull/10483#discussion_r472877334", "createdAt": "2020-08-19T09:03:40Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttConnectVariableHeader.java", "diffHunk": "@@ -52,6 +76,7 @@ public MqttConnectVariableHeader(\n         this.isWillFlag = isWillFlag;\n         this.isCleanSession = isCleanSession;\n         this.keepAliveTimeSeconds = keepAliveTimeSeconds;\n+        this.properties = properties;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95eb759b41c870c90d0165d2d6b323d2457ed143"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg3NzQxMw==", "bodyText": "do we need a null check via ObjectUtils.checkNotNull(...) ?", "url": "https://github.com/netty/netty/pull/10483#discussion_r472877413", "createdAt": "2020-08-19T09:03:50Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttConnectPayload.java", "diffHunk": "@@ -56,7 +59,23 @@ public MqttConnectPayload(\n             byte[] willMessage,\n             String userName,\n             byte[] password) {\n+        this(clientIdentifier,\n+                MqttProperties.NO_PROPERTIES,\n+                willTopic,\n+                willMessage,\n+                userName,\n+                password);\n+    }\n+\n+    public MqttConnectPayload(\n+            String clientIdentifier,\n+            MqttProperties willProperties,\n+            String willTopic,\n+            byte[] willMessage,\n+            String userName,\n+            byte[] password) {\n         this.clientIdentifier = clientIdentifier;\n+        this.willProperties = willProperties;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95eb759b41c870c90d0165d2d6b323d2457ed143"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg3NzQ2Nw==", "bodyText": "do we need a null check via ObjectUtils.checkNotNull(...) ?", "url": "https://github.com/netty/netty/pull/10483#discussion_r472877467", "createdAt": "2020-08-19T09:03:58Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttConnAckVariableHeader.java", "diffHunk": "@@ -27,9 +27,17 @@\n \n     private final boolean sessionPresent;\n \n+    private final MqttProperties properties;\n+\n     public MqttConnAckVariableHeader(MqttConnectReturnCode connectReturnCode, boolean sessionPresent) {\n+        this(connectReturnCode, sessionPresent, MqttProperties.NO_PROPERTIES);\n+    }\n+\n+    public MqttConnAckVariableHeader(MqttConnectReturnCode connectReturnCode, boolean sessionPresent,\n+                                     MqttProperties properties) {\n         this.connectReturnCode = connectReturnCode;\n         this.sessionPresent = sessionPresent;\n+        this.properties = properties;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95eb759b41c870c90d0165d2d6b323d2457ed143"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg3ODAzMg==", "bodyText": "can't this be static now ?", "url": "https://github.com/netty/netty/pull/10483#discussion_r472878032", "createdAt": "2020-08-19T09:04:58Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java", "diffHunk": "@@ -176,44 +179,52 @@ private static MqttFixedHeader decodeFixedHeader(ByteBuf buffer) {\n      * @param mqttFixedHeader MqttFixedHeader of the same message\n      * @return the variable header\n      */\n-    private static Result<?> decodeVariableHeader(ByteBuf buffer, MqttFixedHeader mqttFixedHeader) {\n+    private Result<?> decodeVariableHeader(ChannelHandlerContext ctx, ByteBuf buffer, MqttFixedHeader mqttFixedHeader) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95eb759b41c870c90d0165d2d6b323d2457ed143"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg3OTU5Mw==", "bodyText": "Isn't that the same as calling buffer.readInt(...) ?", "url": "https://github.com/netty/netty/pull/10483#discussion_r472879593", "createdAt": "2020-08-19T09:07:37Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java", "diffHunk": "@@ -464,6 +634,36 @@ private static MqttFixedHeader decodeFixedHeader(ByteBuf buffer) {\n         return new Result<Integer>(result, numberOfBytesConsumed);\n     }\n \n+    private static Result<Integer> decodeVariableByteInteger(ByteBuf buffer) {\n+        int remainingLength = 0;\n+        int multiplier = 1;\n+        short digit;\n+        int loops = 0;\n+        do {\n+            digit = buffer.readUnsignedByte();\n+            remainingLength += (digit & 127) * multiplier;\n+            multiplier *= 128;\n+            loops++;\n+        } while ((digit & 128) != 0 && loops < 4);\n+\n+        // MQTT protocol limits Remaining Length to 4 bytes\n+        if (loops == 4 && (digit & 128) != 0) {\n+            return null;\n+        }\n+        return new Result<Integer>(remainingLength, loops);\n+    }\n+\n+    private static Result<Integer> decode4bytesInteger(ByteBuf buffer) {\n+        short msb = buffer.readUnsignedByte();\n+        short secondByte = buffer.readUnsignedByte();\n+        short thirdByte = buffer.readUnsignedByte();\n+        short lsbSize = buffer.readUnsignedByte();\n+        final int numberOfBytesConsumed = 4;\n+        int result = msb << 24 | secondByte << 16 | thirdByte << 8 | lsbSize;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95eb759b41c870c90d0165d2d6b323d2457ed143"}, "originalPosition": 428}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg4MDM0NA==", "bodyText": "would be nice if you can link to the spec so its clearer what you are doing here in terms of masking etc", "url": "https://github.com/netty/netty/pull/10483#discussion_r472880344", "createdAt": "2020-08-19T09:08:53Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java", "diffHunk": "@@ -379,9 +519,20 @@ private static MqttFixedHeader decodeFixedHeader(ByteBuf buffer) {\n         while (numberOfBytesConsumed < bytesRemainingInVariablePart) {\n             final Result<String> decodedTopicName = decodeString(buffer);\n             numberOfBytesConsumed += decodedTopicName.numberOfBytesConsumed;\n-            int qos = buffer.readUnsignedByte() & 0x03;\n+            final short optionByte = buffer.readUnsignedByte();\n+\n+            MqttQoS qos = MqttQoS.valueOf(optionByte & 0x03);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95eb759b41c870c90d0165d2d6b323d2457ed143"}, "originalPosition": 357}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg4MDcwOA==", "bodyText": "please add a default: as well", "url": "https://github.com/netty/netty/pull/10483#discussion_r472880708", "createdAt": "2020-08-19T09:09:28Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java", "diffHunk": "@@ -474,4 +674,78 @@ private static MqttFixedHeader decodeFixedHeader(ByteBuf buffer) {\n             this.numberOfBytesConsumed = numberOfBytesConsumed;\n         }\n     }\n+\n+    private static Result<MqttProperties> decodeProperties(ByteBuf buffer) {\n+        final Result<Integer> propertiesLength = decodeVariableByteInteger(buffer);\n+        int totalPropertiesLength = propertiesLength.value;\n+        int numberOfBytesConsumed = propertiesLength.numberOfBytesConsumed;\n+\n+        MqttProperties decodedProperties = new MqttProperties();\n+        while (numberOfBytesConsumed < totalPropertiesLength) {\n+            Result<Integer> propertyId = decodeVariableByteInteger(buffer);\n+            numberOfBytesConsumed += propertyId.numberOfBytesConsumed;\n+\n+            switch (MqttProperties.MqttPropertyType.valueOf(propertyId.value)) {\n+                case PAYLOAD_FORMAT_INDICATOR:\n+                case REQUEST_PROBLEM_INFORMATION:\n+                case REQUEST_RESPONSE_INFORMATION:\n+                case MAXIMUM_QOS:\n+                case RETAIN_AVAILABLE:\n+                case WILDCARD_SUBSCRIPTION_AVAILABLE:\n+                case SUBSCRIPTION_IDENTIFIER_AVAILABLE:\n+                case SHARED_SUBSCRIPTION_AVAILABLE:\n+                    final int b1 = buffer.readUnsignedByte();\n+                    numberOfBytesConsumed++;\n+                    decodedProperties.add(new MqttProperties.IntegerProperty(propertyId.value, b1));\n+                    break;\n+                case SERVER_KEEP_ALIVE:\n+                case RECEIVE_MAXIMUM:\n+                case TOPIC_ALIAS_MAXIMUM:\n+                case TOPIC_ALIAS:\n+                    final Result<Integer> int2BytesResult = decodeMsbLsb(buffer);\n+                    numberOfBytesConsumed += int2BytesResult.numberOfBytesConsumed;\n+                    decodedProperties.add(new MqttProperties.IntegerProperty(propertyId.value, int2BytesResult.value));\n+                    break;\n+                case PUBLICATION_EXPIRY_INTERVAL:\n+                case SESSION_EXPIRY_INTERVAL:\n+                case WILL_DELAY_INTERVAL:\n+                case MAXIMUM_PACKET_SIZE:\n+                    final Result<Integer> int4BytesResult = decode4bytesInteger(buffer);\n+                    numberOfBytesConsumed += int4BytesResult.numberOfBytesConsumed;\n+                    decodedProperties.add(new MqttProperties.IntegerProperty(propertyId.value, int4BytesResult.value));\n+                    break;\n+                case SUBSCRIPTION_IDENTIFIER:\n+                    Result<Integer> vbIntegerResult = decodeVariableByteInteger(buffer);\n+                    numberOfBytesConsumed += vbIntegerResult.numberOfBytesConsumed;\n+                    decodedProperties.add(new MqttProperties.IntegerProperty(propertyId.value, vbIntegerResult.value));\n+                    break;\n+                case CONTENT_TYPE:\n+                case RESPONSE_TOPIC:\n+                case ASSIGNED_CLIENT_IDENTIFIER:\n+                case AUTHENTICATION_METHOD:\n+                case RESPONSE_INFORMATION:\n+                case SERVER_REFERENCE:\n+                case REASON_STRING:\n+                    final Result<String> stringResult = decodeString(buffer);\n+                    numberOfBytesConsumed += stringResult.numberOfBytesConsumed;\n+                    decodedProperties.add(new MqttProperties.StringProperty(propertyId.value, stringResult.value));\n+                    break;\n+                case USER_PROPERTY:\n+                    final Result<String> keyResult = decodeString(buffer);\n+                    final Result<String> valueResult = decodeString(buffer);\n+                    numberOfBytesConsumed += keyResult.numberOfBytesConsumed;\n+                    numberOfBytesConsumed += valueResult.numberOfBytesConsumed;\n+                    decodedProperties.add(new MqttProperties.UserProperty(keyResult.value, valueResult.value));\n+                    break;\n+                case CORRELATION_DATA:\n+                case AUTHENTICATION_DATA:\n+                    final Result<byte[]> binaryDataResult = decodeByteArray(buffer);\n+                    numberOfBytesConsumed += binaryDataResult.numberOfBytesConsumed;\n+                    decodedProperties.add(new MqttProperties.BinaryProperty(propertyId.value, binaryDataResult.value));\n+                    break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95eb759b41c870c90d0165d2d6b323d2457ed143"}, "originalPosition": 508}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg4MTA1OA==", "bodyText": "nit: I know this is pre-existing but can you add a default: ?", "url": "https://github.com/netty/netty/pull/10483#discussion_r472881058", "createdAt": "2020-08-19T09:10:05Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java", "diffHunk": "@@ -176,44 +179,52 @@ private static MqttFixedHeader decodeFixedHeader(ByteBuf buffer) {\n      * @param mqttFixedHeader MqttFixedHeader of the same message\n      * @return the variable header\n      */\n-    private static Result<?> decodeVariableHeader(ByteBuf buffer, MqttFixedHeader mqttFixedHeader) {\n+    private Result<?> decodeVariableHeader(ChannelHandlerContext ctx, ByteBuf buffer, MqttFixedHeader mqttFixedHeader) {\n         switch (mqttFixedHeader.messageType()) {\n             case CONNECT:\n-                return decodeConnectionVariableHeader(buffer);\n+                return decodeConnectionVariableHeader(ctx, buffer);\n \n             case CONNACK:\n-                return decodeConnAckVariableHeader(buffer);\n+                return decodeConnAckVariableHeader(ctx, buffer);\n \n-            case SUBSCRIBE:\n             case UNSUBSCRIBE:\n+            case SUBSCRIBE:\n             case SUBACK:\n             case UNSUBACK:\n+                return decodeMessageIdAndPropertiesVariableHeader(ctx, buffer);\n+\n             case PUBACK:\n             case PUBREC:\n             case PUBCOMP:\n             case PUBREL:\n-                return decodeMessageIdVariableHeader(buffer);\n+                return decodePubReplyMessage(buffer);\n \n             case PUBLISH:\n-                return decodePublishVariableHeader(buffer, mqttFixedHeader);\n+                return decodePublishVariableHeader(ctx, buffer, mqttFixedHeader);\n+\n+            case DISCONNECT:\n+            case AUTH:\n+                return decodeReasonCodeAndPropertiesVariableHeader(buffer);\n \n             case PINGREQ:\n             case PINGRESP:\n-            case DISCONNECT:\n                 // Empty variable header\n                 return new Result<Object>(null, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95eb759b41c870c90d0165d2d6b323d2457ed143"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg4MTQzOQ==", "bodyText": "can you link to the spec ?", "url": "https://github.com/netty/netty/pull/10483#discussion_r472881439", "createdAt": "2020-08-19T09:10:43Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java", "diffHunk": "@@ -464,6 +634,36 @@ private static MqttFixedHeader decodeFixedHeader(ByteBuf buffer) {\n         return new Result<Integer>(result, numberOfBytesConsumed);\n     }\n \n+    private static Result<Integer> decodeVariableByteInteger(ByteBuf buffer) {\n+        int remainingLength = 0;\n+        int multiplier = 1;\n+        short digit;\n+        int loops = 0;\n+        do {\n+            digit = buffer.readUnsignedByte();\n+            remainingLength += (digit & 127) * multiplier;\n+            multiplier *= 128;\n+            loops++;\n+        } while ((digit & 128) != 0 && loops < 4);\n+\n+        // MQTT protocol limits Remaining Length to 4 bytes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95eb759b41c870c90d0165d2d6b323d2457ed143"}, "originalPosition": 415}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg4MTk4NA==", "bodyText": "don't use this one directly but use Unpooled.EMPTY_BUFFER", "url": "https://github.com/netty/netty/pull/10483#discussion_r472881984", "createdAt": "2020-08-19T09:11:36Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -18,9 +18,10 @@\n \n import io.netty.buffer.ByteBuf;\n import io.netty.buffer.ByteBufAllocator;\n+import io.netty.buffer.EmptyByteBuf;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95eb759b41c870c90d0165d2d6b323d2457ed143"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg4MjI3MA==", "bodyText": "consider removing this argument as you can get the instance from ctx.alloc()", "url": "https://github.com/netty/netty/pull/10483#discussion_r472882270", "createdAt": "2020-08-19T09:12:06Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -53,37 +54,48 @@ protected void encode(ChannelHandlerContext ctx, MqttMessage msg, List<Object> o\n      * @param message MQTT message to encode\n      * @return ByteBuf with encoded bytes\n      */\n-    static ByteBuf doEncode(ByteBufAllocator byteBufAllocator, MqttMessage message) {\n+    static ByteBuf doEncode(ChannelHandlerContext ctx,\n+                     ByteBufAllocator byteBufAllocator,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95eb759b41c870c90d0165d2d6b323d2457ed143"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg4MjQwMw==", "bodyText": "nit: you can remove the else", "url": "https://github.com/netty/netty/pull/10483#discussion_r472882403", "createdAt": "2020-08-19T09:12:20Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -53,37 +54,48 @@ protected void encode(ChannelHandlerContext ctx, MqttMessage msg, List<Object> o\n      * @param message MQTT message to encode\n      * @return ByteBuf with encoded bytes\n      */\n-    static ByteBuf doEncode(ByteBufAllocator byteBufAllocator, MqttMessage message) {\n+    static ByteBuf doEncode(ChannelHandlerContext ctx,\n+                     ByteBufAllocator byteBufAllocator,\n+                     MqttMessage message) {\n \n         switch (message.fixedHeader().messageType()) {\n             case CONNECT:\n-                return encodeConnectMessage(byteBufAllocator, (MqttConnectMessage) message);\n+                return encodeConnectMessage(ctx, byteBufAllocator, (MqttConnectMessage) message);\n \n             case CONNACK:\n-                return encodeConnAckMessage(byteBufAllocator, (MqttConnAckMessage) message);\n+                return encodeConnAckMessage(ctx, byteBufAllocator, (MqttConnAckMessage) message);\n \n             case PUBLISH:\n-                return encodePublishMessage(byteBufAllocator, (MqttPublishMessage) message);\n+                return encodePublishMessage(ctx, byteBufAllocator, (MqttPublishMessage) message);\n \n             case SUBSCRIBE:\n-                return encodeSubscribeMessage(byteBufAllocator, (MqttSubscribeMessage) message);\n+                return encodeSubscribeMessage(ctx, byteBufAllocator, (MqttSubscribeMessage) message);\n \n             case UNSUBSCRIBE:\n-                return encodeUnsubscribeMessage(byteBufAllocator, (MqttUnsubscribeMessage) message);\n+                return encodeUnsubscribeMessage(ctx, byteBufAllocator, (MqttUnsubscribeMessage) message);\n \n             case SUBACK:\n-                return encodeSubAckMessage(byteBufAllocator, (MqttSubAckMessage) message);\n+                return encodeSubAckMessage(ctx, byteBufAllocator, (MqttSubAckMessage) message);\n \n             case UNSUBACK:\n+                if (message instanceof MqttUnsubAckMessage) {\n+                    return encodeUnsubAckMessage(ctx, byteBufAllocator, (MqttUnsubAckMessage) message);\n+                } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95eb759b41c870c90d0165d2d6b323d2457ed143"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg4MjY1NA==", "bodyText": "nit consider removing  the allocator as you can get it via ctx.alloc()", "url": "https://github.com/netty/netty/pull/10483#discussion_r472882654", "createdAt": "2020-08-19T09:12:48Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -93,6 +105,7 @@ static ByteBuf doEncode(ByteBufAllocator byteBufAllocator, MqttMessage message)\n     }\n \n     private static ByteBuf encodeConnectMessage(\n+            ChannelHandlerContext ctx,\n             ByteBufAllocator byteBufAllocator,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95eb759b41c870c90d0165d2d6b323d2457ed143"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg4Mjc4Mg==", "bodyText": "good catch!", "url": "https://github.com/netty/netty/pull/10483#discussion_r472882782", "createdAt": "2020-08-19T09:13:02Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -102,10 +115,11 @@ private static ByteBuf encodeConnectMessage(\n         MqttConnectPayload payload = message.payload();\n         MqttVersion mqttVersion = MqttVersion.fromProtocolNameAndLevel(variableHeader.name(),\n                 (byte) variableHeader.version());\n+        MqttCodecUtil.setMqttVersion(ctx, mqttVersion);\n \n         // as MQTT 3.1 & 3.1.1 spec, If the User Name Flag is set to 0, the Password Flag MUST be set to 0\n         if (!variableHeader.hasUserName() && variableHeader.hasPassword()) {\n-            throw new DecoderException(\"Without a username, the password MUST be not set\");\n+            throw new EncoderException(\"Without a username, the password MUST be not set\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95eb759b41c870c90d0165d2d6b323d2457ed143"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg5NDU3Ng==", "bodyText": "you will need to call propertiesBuf.release() later as you not transfer ownership", "url": "https://github.com/netty/netty/pull/10483#discussion_r472894576", "createdAt": "2020-08-19T09:31:05Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -138,9 +152,20 @@ private static ByteBuf encodeConnectMessage(\n             payloadBufferSize += 2 + passwordBytes.length;\n         }\n \n-        // Fixed header\n+        // Fixed and variable header\n         byte[] protocolNameBytes = mqttVersion.protocolNameBytes();\n-        int variableHeaderBufferSize = 2 + protocolNameBytes.length + 4;\n+        ByteBuf propertiesBuf = encodePropertiesIfNeeded(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95eb759b41c870c90d0165d2d6b323d2457ed143"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg5NDg5Nw==", "bodyText": "you will need to call willPropertiesBuf.release() later as you not transfer ownership", "url": "https://github.com/netty/netty/pull/10483#discussion_r472894897", "createdAt": "2020-08-19T09:31:32Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -138,9 +152,20 @@ private static ByteBuf encodeConnectMessage(\n             payloadBufferSize += 2 + passwordBytes.length;\n         }\n \n-        // Fixed header\n+        // Fixed and variable header\n         byte[] protocolNameBytes = mqttVersion.protocolNameBytes();\n-        int variableHeaderBufferSize = 2 + protocolNameBytes.length + 4;\n+        ByteBuf propertiesBuf = encodePropertiesIfNeeded(\n+                mqttVersion,\n+                byteBufAllocator,\n+                message.variableHeader().properties());\n+        int variableHeaderBufferSize = 2 + protocolNameBytes.length + 4 + propertiesBuf.readableBytes();\n+        final ByteBuf willPropertiesBuf;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95eb759b41c870c90d0165d2d6b323d2457ed143"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg5NTEyOA==", "bodyText": "you will need to call propertiesBuf.release() later as you not transfer ownership", "url": "https://github.com/netty/netty/pull/10483#discussion_r472895128", "createdAt": "2020-08-19T09:31:54Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -196,21 +223,34 @@ private static int getConnVariableHeaderFlag(MqttConnectVariableHeader variableH\n     }\n \n     private static ByteBuf encodeConnAckMessage(\n+            ChannelHandlerContext ctx,\n             ByteBufAllocator byteBufAllocator,\n             MqttConnAckMessage message) {\n-        ByteBuf buf = byteBufAllocator.buffer(4);\n+        final MqttVersion mqttVersion = MqttCodecUtil.getMqttVersion(ctx);\n+        ByteBuf propertiesBuf = encodePropertiesIfNeeded(mqttVersion,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95eb759b41c870c90d0165d2d6b323d2457ed143"}, "originalPosition": 146}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg5NTIxNg==", "bodyText": "you will need to call propertiesBuf.release() later as you not transfer ownership", "url": "https://github.com/netty/netty/pull/10483#discussion_r472895216", "createdAt": "2020-08-19T09:32:04Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -196,21 +223,34 @@ private static int getConnVariableHeaderFlag(MqttConnectVariableHeader variableH\n     }\n \n     private static ByteBuf encodeConnAckMessage(\n+            ChannelHandlerContext ctx,\n             ByteBufAllocator byteBufAllocator,\n             MqttConnAckMessage message) {\n-        ByteBuf buf = byteBufAllocator.buffer(4);\n+        final MqttVersion mqttVersion = MqttCodecUtil.getMqttVersion(ctx);\n+        ByteBuf propertiesBuf = encodePropertiesIfNeeded(mqttVersion,\n+                byteBufAllocator,\n+                message.variableHeader().properties());\n+\n+        ByteBuf buf = byteBufAllocator.buffer(4 + propertiesBuf.readableBytes());\n         buf.writeByte(getFixedHeaderByte1(message.fixedHeader()));\n-        buf.writeByte(2);\n+        writeVariableLengthInt(buf, 2 + propertiesBuf.readableBytes());\n         buf.writeByte(message.variableHeader().isSessionPresent() ? 0x01 : 0x00);\n         buf.writeByte(message.variableHeader().connectReturnCode().byteValue());\n+        buf.writeBytes(propertiesBuf);\n \n         return buf;\n     }\n \n     private static ByteBuf encodeSubscribeMessage(\n+            ChannelHandlerContext ctx,\n             ByteBufAllocator byteBufAllocator,\n             MqttSubscribeMessage message) {\n-        int variableHeaderBufferSize = 2;\n+        MqttVersion mqttVersion = MqttCodecUtil.getMqttVersion(ctx);\n+        ByteBuf propertiesBuf = encodePropertiesIfNeeded(mqttVersion,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95eb759b41c870c90d0165d2d6b323d2457ed143"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg5NTM0Ng==", "bodyText": "you will need to call propertiesBuf.release() later as you not transfer ownership", "url": "https://github.com/netty/netty/pull/10483#discussion_r472895346", "createdAt": "2020-08-19T09:32:17Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -234,23 +274,38 @@ private static ByteBuf encodeSubscribeMessage(\n         // Variable Header\n         int messageId = variableHeader.messageId();\n         buf.writeShort(messageId);\n+        buf.writeBytes(propertiesBuf);\n \n         // Payload\n         for (MqttTopicSubscription topic : payload.topicSubscriptions()) {\n-            String topicName = topic.topicName();\n-            byte[] topicNameBytes = encodeStringUtf8(topicName);\n-            buf.writeShort(topicNameBytes.length);\n-            buf.writeBytes(topicNameBytes, 0, topicNameBytes.length);\n-            buf.writeByte(topic.qualityOfService().value());\n+            writeUTF8String(buf, topic.topicName());\n+            final MqttSubscriptionOption option = topic.option();\n+\n+            int optionEncoded =  option.retainHandling().value() << 4;\n+            if (option.isRetainAsPublished()) {\n+                optionEncoded |= 0x08;\n+            }\n+            if (option.isNoLocal()) {\n+                optionEncoded |= 0x04;\n+            }\n+            optionEncoded |= option.qos().value();\n+\n+            buf.writeByte(optionEncoded);\n         }\n \n         return buf;\n     }\n \n     private static ByteBuf encodeUnsubscribeMessage(\n+            ChannelHandlerContext ctx,\n             ByteBufAllocator byteBufAllocator,\n             MqttUnsubscribeMessage message) {\n-        int variableHeaderBufferSize = 2;\n+        MqttVersion mqttVersion = MqttCodecUtil.getMqttVersion(ctx);\n+        ByteBuf propertiesBuf = encodePropertiesIfNeeded(mqttVersion,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95eb759b41c870c90d0165d2d6b323d2457ed143"}, "originalPosition": 212}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg5NTQ0Ng==", "bodyText": "you will need to call propertiesBuf.release() later as you not transfer ownership", "url": "https://github.com/netty/netty/pull/10483#discussion_r472895446", "createdAt": "2020-08-19T09:32:25Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -284,35 +340,72 @@ private static ByteBuf encodeUnsubscribeMessage(\n     }\n \n     private static ByteBuf encodeSubAckMessage(\n+            ChannelHandlerContext ctx,\n             ByteBufAllocator byteBufAllocator,\n             MqttSubAckMessage message) {\n-        int variableHeaderBufferSize = 2;\n+        MqttVersion mqttVersion = MqttCodecUtil.getMqttVersion(ctx);\n+        ByteBuf propertiesBuf = encodePropertiesIfNeeded(mqttVersion,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95eb759b41c870c90d0165d2d6b323d2457ed143"}, "originalPosition": 237}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg5NTU2Nw==", "bodyText": "you will need to call propertiesBuf.release() later as you not transfer ownership", "url": "https://github.com/netty/netty/pull/10483#discussion_r472895567", "createdAt": "2020-08-19T09:32:36Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -284,35 +340,72 @@ private static ByteBuf encodeUnsubscribeMessage(\n     }\n \n     private static ByteBuf encodeSubAckMessage(\n+            ChannelHandlerContext ctx,\n             ByteBufAllocator byteBufAllocator,\n             MqttSubAckMessage message) {\n-        int variableHeaderBufferSize = 2;\n+        MqttVersion mqttVersion = MqttCodecUtil.getMqttVersion(ctx);\n+        ByteBuf propertiesBuf = encodePropertiesIfNeeded(mqttVersion,\n+                byteBufAllocator,\n+                message.idAndPropertiesVariableHeader().properties());\n+        int variableHeaderBufferSize = 2 + propertiesBuf.readableBytes();\n         int payloadBufferSize = message.payload().grantedQoSLevels().size();\n         int variablePartSize = variableHeaderBufferSize + payloadBufferSize;\n         int fixedHeaderBufferSize = 1 + getVariableLengthInt(variablePartSize);\n         ByteBuf buf = byteBufAllocator.buffer(fixedHeaderBufferSize + variablePartSize);\n         buf.writeByte(getFixedHeaderByte1(message.fixedHeader()));\n         writeVariableLengthInt(buf, variablePartSize);\n         buf.writeShort(message.variableHeader().messageId());\n+        buf.writeBytes(propertiesBuf);\n         for (int qos : message.payload().grantedQoSLevels()) {\n             buf.writeByte(qos);\n         }\n \n         return buf;\n     }\n \n+    private static ByteBuf encodeUnsubAckMessage(\n+            ChannelHandlerContext ctx,\n+            ByteBufAllocator byteBufAllocator,\n+            MqttUnsubAckMessage message) {\n+        MqttVersion mqttVersion = MqttCodecUtil.getMqttVersion(ctx);\n+        ByteBuf propertiesBuf = encodePropertiesIfNeeded(mqttVersion,\n+                byteBufAllocator,\n+                message.idAndPropertiesVariableHeader().properties());\n+        int variableHeaderBufferSize = 2 + propertiesBuf.readableBytes();\n+        int payloadBufferSize = message.payload().unsubscribeReasonCodes().size();\n+        int variablePartSize = variableHeaderBufferSize + payloadBufferSize;\n+        int fixedHeaderBufferSize = 1 + getVariableLengthInt(variablePartSize);\n+        ByteBuf buf = byteBufAllocator.buffer(fixedHeaderBufferSize + variablePartSize);\n+        buf.writeByte(getFixedHeaderByte1(message.fixedHeader()));\n+        writeVariableLengthInt(buf, variablePartSize);\n+        buf.writeShort(message.variableHeader().messageId());\n+        buf.writeBytes(propertiesBuf);\n+\n+        for (Short reasonCode : message.payload().unsubscribeReasonCodes()) {\n+            buf.writeByte(reasonCode);\n+        }\n+\n+        return buf;\n+    }\n+\n     private static ByteBuf encodePublishMessage(\n+            ChannelHandlerContext ctx,\n             ByteBufAllocator byteBufAllocator,\n             MqttPublishMessage message) {\n+        MqttVersion mqttVersion = MqttCodecUtil.getMqttVersion(ctx);\n         MqttFixedHeader mqttFixedHeader = message.fixedHeader();\n         MqttPublishVariableHeader variableHeader = message.variableHeader();\n         ByteBuf payload = message.payload().duplicate();\n \n         String topicName = variableHeader.topicName();\n         byte[] topicNameBytes = encodeStringUtf8(topicName);\n \n+        ByteBuf propertiesBuf = encodePropertiesIfNeeded(mqttVersion,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95eb759b41c870c90d0165d2d6b323d2457ed143"}, "originalPosition": 293}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg5NTgwOA==", "bodyText": "you will need to call propertiesBuf.release() later as you not transfer ownership", "url": "https://github.com/netty/netty/pull/10483#discussion_r472895808", "createdAt": "2020-08-19T09:33:00Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -325,11 +418,53 @@ private static ByteBuf encodePublishMessage(\n         if (mqttFixedHeader.qosLevel().value() > 0) {\n             buf.writeShort(variableHeader.packetId());\n         }\n+        buf.writeBytes(propertiesBuf);\n         buf.writeBytes(payload);\n \n         return buf;\n     }\n \n+    private static ByteBuf encodePubReplyMessage(ChannelHandlerContext ctx,\n+                                          ByteBufAllocator byteBufAllocator,\n+                                          MqttMessage message) {\n+        if (message.variableHeader() instanceof MqttPubReplyMessageVariableHeader) {\n+            MqttFixedHeader mqttFixedHeader = message.fixedHeader();\n+            MqttPubReplyMessageVariableHeader variableHeader =\n+                    (MqttPubReplyMessageVariableHeader) message.variableHeader();\n+            int msgId = variableHeader.messageId();\n+\n+            final ByteBuf propertiesBuf;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95eb759b41c870c90d0165d2d6b323d2457ed143"}, "originalPosition": 322}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg5NTg5MQ==", "bodyText": "you will need to call propertiesBuf.release() later as you not transfer ownership", "url": "https://github.com/netty/netty/pull/10483#discussion_r472895891", "createdAt": "2020-08-19T09:33:08Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -347,6 +482,46 @@ private static ByteBuf encodeMessageWithOnlySingleByteFixedHeaderAndMessageId(\n         return buf;\n     }\n \n+    private static ByteBuf encodeReasonCodePlusPropertiesMessage(\n+            ChannelHandlerContext ctx,\n+            ByteBufAllocator byteBufAllocator,\n+            MqttMessage message) {\n+        if (message.variableHeader() instanceof MqttReasonCodeAndPropertiesVariableHeader) {\n+            MqttVersion mqttVersion = MqttCodecUtil.getMqttVersion(ctx);\n+            MqttFixedHeader mqttFixedHeader = message.fixedHeader();\n+            MqttReasonCodeAndPropertiesVariableHeader variableHeader =\n+                    (MqttReasonCodeAndPropertiesVariableHeader) message.variableHeader();\n+\n+            final ByteBuf propertiesBuf;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95eb759b41c870c90d0165d2d6b323d2457ed143"}, "originalPosition": 371}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg5NjExNg==", "bodyText": "please add default:", "url": "https://github.com/netty/netty/pull/10483#discussion_r472896116", "createdAt": "2020-08-19T09:33:30Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -358,6 +533,89 @@ private static ByteBuf encodeMessageWithOnlySingleByteFixedHeader(\n         return buf;\n     }\n \n+    private static ByteBuf encodePropertiesIfNeeded(MqttVersion mqttVersion,\n+                                             ByteBufAllocator byteBufAllocator,\n+                                             MqttProperties mqttProperties) {\n+        if (mqttVersion == MqttVersion.MQTT_5) {\n+            return encodeProperties(byteBufAllocator, mqttProperties);\n+        } else {\n+            return new EmptyByteBuf(byteBufAllocator);\n+        }\n+    }\n+\n+    private static ByteBuf encodeProperties(ByteBufAllocator byteBufAllocator,\n+                                            MqttProperties mqttProperties) {\n+        ByteBuf propertiesHeaderBuf = byteBufAllocator.buffer();\n+        // encode also the Properties part\n+        ByteBuf propertiesBuf = byteBufAllocator.buffer();\n+        for (MqttProperties.MqttProperty property : mqttProperties.listAll()) {\n+            switch (MqttProperties.MqttPropertyType.valueOf(property.propertyId)) {\n+                case PAYLOAD_FORMAT_INDICATOR:\n+                case REQUEST_PROBLEM_INFORMATION:\n+                case REQUEST_RESPONSE_INFORMATION:\n+                case MAXIMUM_QOS:\n+                case RETAIN_AVAILABLE:\n+                case WILDCARD_SUBSCRIPTION_AVAILABLE:\n+                case SUBSCRIPTION_IDENTIFIER_AVAILABLE:\n+                case SHARED_SUBSCRIPTION_AVAILABLE:\n+                    writeVariableLengthInt(propertiesBuf, property.propertyId);\n+                    final byte bytePropValue = ((MqttProperties.IntegerProperty) property).value.byteValue();\n+                    propertiesBuf.writeByte(bytePropValue);\n+                    break;\n+                case SERVER_KEEP_ALIVE:\n+                case RECEIVE_MAXIMUM:\n+                case TOPIC_ALIAS_MAXIMUM:\n+                case TOPIC_ALIAS:\n+                    writeVariableLengthInt(propertiesBuf, property.propertyId);\n+                    final short twoBytesInPropValue = ((MqttProperties.IntegerProperty) property).value.shortValue();\n+                    propertiesBuf.writeShort(twoBytesInPropValue);\n+                    break;\n+                case PUBLICATION_EXPIRY_INTERVAL:\n+                case SESSION_EXPIRY_INTERVAL:\n+                case WILL_DELAY_INTERVAL:\n+                case MAXIMUM_PACKET_SIZE:\n+                    writeVariableLengthInt(propertiesBuf, property.propertyId);\n+                    final int fourBytesIntPropValue = ((MqttProperties.IntegerProperty) property).value;\n+                    propertiesBuf.writeInt(fourBytesIntPropValue);\n+                    break;\n+                case SUBSCRIPTION_IDENTIFIER:\n+                    writeVariableLengthInt(propertiesBuf, property.propertyId);\n+                    final int vbi = ((MqttProperties.IntegerProperty) property).value;\n+                    writeVariableLengthInt(propertiesBuf, vbi);\n+                    break;\n+                case CONTENT_TYPE:\n+                case RESPONSE_TOPIC:\n+                case ASSIGNED_CLIENT_IDENTIFIER:\n+                case AUTHENTICATION_METHOD:\n+                case RESPONSE_INFORMATION:\n+                case SERVER_REFERENCE:\n+                case REASON_STRING:\n+                    writeVariableLengthInt(propertiesBuf, property.propertyId);\n+                    writeUTF8String(propertiesBuf, ((MqttProperties.StringProperty) property).value);\n+                    break;\n+                case USER_PROPERTY:\n+                    final List<MqttProperties.StringPair> pairs = ((MqttProperties.UserProperties) property).value;\n+                    for (MqttProperties.StringPair pair: pairs) {\n+                        writeVariableLengthInt(propertiesBuf, property.propertyId);\n+                        writeUTF8String(propertiesBuf, pair.key);\n+                        writeUTF8String(propertiesBuf, pair.value);\n+                    }\n+                    break;\n+                case CORRELATION_DATA:\n+                case AUTHENTICATION_DATA:\n+                    writeVariableLengthInt(propertiesBuf, property.propertyId);\n+                    final byte[] binaryPropValue = ((MqttProperties.BinaryProperty) property).value;\n+                    propertiesBuf.writeShort(binaryPropValue.length);\n+                    propertiesBuf.writeBytes(binaryPropValue, 0, binaryPropValue.length);\n+                    break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95eb759b41c870c90d0165d2d6b323d2457ed143"}, "originalPosition": 482}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg5NzA2MA==", "bodyText": "protected as the class is abstract", "url": "https://github.com/netty/netty/pull/10483#discussion_r472897060", "createdAt": "2020-08-19T09:35:00Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.mqtt;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.List;\n+import java.util.ArrayList;\n+\n+/**\n+ * MQTT Properties container\n+ * */\n+public final class MqttProperties {\n+\n+    public enum MqttPropertyType {\n+        // single byte properties\n+        PAYLOAD_FORMAT_INDICATOR(0x01),\n+        REQUEST_PROBLEM_INFORMATION(0x17),\n+        REQUEST_RESPONSE_INFORMATION(0x19),\n+        MAXIMUM_QOS(0x24),\n+        RETAIN_AVAILABLE(0x25),\n+        WILDCARD_SUBSCRIPTION_AVAILABLE(0x28),\n+        SUBSCRIPTION_IDENTIFIER_AVAILABLE(0x29),\n+        SHARED_SUBSCRIPTION_AVAILABLE(0x2A),\n+\n+        // two bytes properties\n+        SERVER_KEEP_ALIVE(0x13),\n+        RECEIVE_MAXIMUM(0x21),\n+        TOPIC_ALIAS_MAXIMUM(0x22),\n+        TOPIC_ALIAS(0x23),\n+\n+        // four bytes properties\n+        PUBLICATION_EXPIRY_INTERVAL(0x02),\n+        SESSION_EXPIRY_INTERVAL(0x11),\n+        WILL_DELAY_INTERVAL(0x18),\n+        MAXIMUM_PACKET_SIZE(0x27),\n+\n+        // Variable Byte Integer\n+        SUBSCRIPTION_IDENTIFIER(0x0B),\n+\n+        // UTF-8 Encoded String properties\n+        CONTENT_TYPE(0x03),\n+        RESPONSE_TOPIC(0x08),\n+        ASSIGNED_CLIENT_IDENTIFIER(0x12),\n+        AUTHENTICATION_METHOD(0x15),\n+        RESPONSE_INFORMATION(0x1A),\n+        SERVER_REFERENCE(0x1C),\n+        REASON_STRING(0x1F),\n+        USER_PROPERTY(0x26),\n+\n+        // Binary Data\n+        CORRELATION_DATA(0x09),\n+        AUTHENTICATION_DATA(0x16);\n+\n+        private final int value;\n+\n+        MqttPropertyType(int value) {\n+            this.value = value;\n+        }\n+\n+        public int value() {\n+            return value;\n+        }\n+\n+        public static MqttPropertyType valueOf(int type) {\n+            for (MqttPropertyType t : values()) {\n+                if (t.value == type) {\n+                    return t;\n+                }\n+            }\n+            throw new IllegalArgumentException(\"unknown property type: \" + type);\n+        }\n+    }\n+\n+    public static final MqttProperties NO_PROPERTIES = new MqttProperties();\n+\n+    public abstract static class MqttProperty<T> {\n+        final T value;\n+        final int propertyId;\n+\n+        public MqttProperty(int propertyId, T value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95eb759b41c870c90d0165d2d6b323d2457ed143"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg5NzM4Nw==", "bodyText": "not need to call this()", "url": "https://github.com/netty/netty/pull/10483#discussion_r472897387", "createdAt": "2020-08-19T09:35:33Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.mqtt;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.List;\n+import java.util.ArrayList;\n+\n+/**\n+ * MQTT Properties container\n+ * */\n+public final class MqttProperties {\n+\n+    public enum MqttPropertyType {\n+        // single byte properties\n+        PAYLOAD_FORMAT_INDICATOR(0x01),\n+        REQUEST_PROBLEM_INFORMATION(0x17),\n+        REQUEST_RESPONSE_INFORMATION(0x19),\n+        MAXIMUM_QOS(0x24),\n+        RETAIN_AVAILABLE(0x25),\n+        WILDCARD_SUBSCRIPTION_AVAILABLE(0x28),\n+        SUBSCRIPTION_IDENTIFIER_AVAILABLE(0x29),\n+        SHARED_SUBSCRIPTION_AVAILABLE(0x2A),\n+\n+        // two bytes properties\n+        SERVER_KEEP_ALIVE(0x13),\n+        RECEIVE_MAXIMUM(0x21),\n+        TOPIC_ALIAS_MAXIMUM(0x22),\n+        TOPIC_ALIAS(0x23),\n+\n+        // four bytes properties\n+        PUBLICATION_EXPIRY_INTERVAL(0x02),\n+        SESSION_EXPIRY_INTERVAL(0x11),\n+        WILL_DELAY_INTERVAL(0x18),\n+        MAXIMUM_PACKET_SIZE(0x27),\n+\n+        // Variable Byte Integer\n+        SUBSCRIPTION_IDENTIFIER(0x0B),\n+\n+        // UTF-8 Encoded String properties\n+        CONTENT_TYPE(0x03),\n+        RESPONSE_TOPIC(0x08),\n+        ASSIGNED_CLIENT_IDENTIFIER(0x12),\n+        AUTHENTICATION_METHOD(0x15),\n+        RESPONSE_INFORMATION(0x1A),\n+        SERVER_REFERENCE(0x1C),\n+        REASON_STRING(0x1F),\n+        USER_PROPERTY(0x26),\n+\n+        // Binary Data\n+        CORRELATION_DATA(0x09),\n+        AUTHENTICATION_DATA(0x16);\n+\n+        private final int value;\n+\n+        MqttPropertyType(int value) {\n+            this.value = value;\n+        }\n+\n+        public int value() {\n+            return value;\n+        }\n+\n+        public static MqttPropertyType valueOf(int type) {\n+            for (MqttPropertyType t : values()) {\n+                if (t.value == type) {\n+                    return t;\n+                }\n+            }\n+            throw new IllegalArgumentException(\"unknown property type: \" + type);\n+        }\n+    }\n+\n+    public static final MqttProperties NO_PROPERTIES = new MqttProperties();\n+\n+    public abstract static class MqttProperty<T> {\n+        final T value;\n+        final int propertyId;\n+\n+        public MqttProperty(int propertyId, T value) {\n+            this.propertyId = propertyId;\n+            this.value = value;\n+        }\n+    }\n+\n+    public static final class IntegerProperty extends MqttProperty<Integer> {\n+\n+        public IntegerProperty(int propertyId, Integer value) {\n+            super(propertyId, value);\n+        }\n+    }\n+\n+    public static final class StringProperty extends MqttProperty<String> {\n+\n+        public StringProperty(int propertyId, String value) {\n+            super(propertyId, value);\n+        }\n+    }\n+\n+    public static final class StringPair {\n+        public final String key;\n+        public final String value;\n+\n+        public StringPair(String key, String value) {\n+            this.key = key;\n+            this.value = value;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return key.hashCode() + 31 * value.hashCode();\n+        }\n+\n+        @Override\n+        public boolean equals(Object obj) {\n+            if (this == obj) {\n+                return true;\n+            }\n+            if (obj == null || getClass() != obj.getClass()) {\n+                return false;\n+            }\n+            StringPair that = (StringPair) obj;\n+\n+            return that.key.equals(this.key) && that.value.equals(this.value);\n+        }\n+    }\n+\n+    //User properties are the only properties that may be included multiple times and\n+    //are the only properties where ordering is required. Therefore, they need a special handling\n+    public static final class UserProperties extends MqttProperty<List<StringPair>> {\n+        public UserProperties() {\n+            super(MqttPropertyType.USER_PROPERTY.value, new ArrayList<StringPair>());\n+        }\n+\n+        public UserProperties(List<StringPair> values) {\n+            this();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95eb759b41c870c90d0165d2d6b323d2457ed143"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg5NzYzOA==", "bodyText": "null check ?", "url": "https://github.com/netty/netty/pull/10483#discussion_r472897638", "createdAt": "2020-08-19T09:35:57Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttPubReplyMessageVariableHeader.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.netty.handler.codec.mqtt;\n+\n+import io.netty.util.internal.StringUtil;\n+\n+/**\n+ * Variable Header containing Packet Id, reason code and Properties as in MQTT v5 spec.\n+ */\n+public final class MqttPubReplyMessageVariableHeader extends MqttMessageIdVariableHeader {\n+\n+    private final byte reasonCode;\n+    private final MqttProperties properties;\n+\n+    public static final byte REASON_CODE_OK = 0;\n+\n+    public MqttPubReplyMessageVariableHeader(int messageId, byte reasonCode, MqttProperties properties) {\n+        super(messageId);\n+        if (messageId < 1 || messageId > 0xffff) {\n+            throw new IllegalArgumentException(\"messageId: \" + messageId + \" (expected: 1 ~ 65535)\");\n+        }\n+        this.reasonCode = reasonCode;\n+        this.properties = properties;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95eb759b41c870c90d0165d2d6b323d2457ed143"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg5Nzc2NQ==", "bodyText": "null check ?", "url": "https://github.com/netty/netty/pull/10483#discussion_r472897765", "createdAt": "2020-08-19T09:36:08Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttPublishVariableHeader.java", "diffHunk": "@@ -25,10 +25,16 @@\n \n     private final String topicName;\n     private final int packetId;\n+    private final MqttProperties mqttProperties;\n \n     public MqttPublishVariableHeader(String topicName, int packetId) {\n+        this(topicName, packetId, MqttProperties.NO_PROPERTIES);\n+    }\n+\n+    public MqttPublishVariableHeader(String topicName, int packetId, MqttProperties mqttProperties) {\n         this.topicName = topicName;\n         this.packetId = packetId;\n+        this.mqttProperties = mqttProperties;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95eb759b41c870c90d0165d2d6b323d2457ed143"}, "originalPosition": 13}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "95eb759b41c870c90d0165d2d6b323d2457ed143", "author": {"user": {"login": "paul-lysak", "name": "Paul Lysak"}}, "url": "https://github.com/netty/netty/commit/95eb759b41c870c90d0165d2d6b323d2457ed143", "committedDate": "2020-08-19T06:10:13Z", "message": "MQTT5 support for netty-codec-mqtt\n\nMotivation:\n\n MQTT Specification version 5 was released over a year ago,\n netty-codec-mqtt should be changed to support it.\n\nModifications:\n\n  Added more message and header types in `io.netty.handler.codec.mqtt`\n  package in `netty-coded-mqtt` subproject,\n  changed `MqttEncoder` and `MqttDecoder` to handle them properly,\n  updated examples in `netty-example`.\n\nResult:\n\n  `netty-coded-mqtt` supports both MQTT5 and MQTT3 now."}, "afterCommit": {"oid": "7d90e00ccd0ae7aa2515dc5d5743826839bdb8e9", "author": {"user": {"login": "paul-lysak", "name": "Paul Lysak"}}, "url": "https://github.com/netty/netty/commit/7d90e00ccd0ae7aa2515dc5d5743826839bdb8e9", "committedDate": "2020-08-19T11:34:15Z", "message": "MQTT5 support for netty-codec-mqtt\n\nMotivation:\n\n MQTT Specification version 5 was released over a year ago,\n netty-codec-mqtt should be changed to support it.\n\nModifications:\n\n  Added more message and header types in `io.netty.handler.codec.mqtt`\n  package in `netty-coded-mqtt` subproject,\n  changed `MqttEncoder` and `MqttDecoder` to handle them properly,\n  updated examples in `netty-example`.\n\nResult:\n\n  `netty-coded-mqtt` supports both MQTT5 and MQTT3 now."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7d90e00ccd0ae7aa2515dc5d5743826839bdb8e9", "author": {"user": {"login": "paul-lysak", "name": "Paul Lysak"}}, "url": "https://github.com/netty/netty/commit/7d90e00ccd0ae7aa2515dc5d5743826839bdb8e9", "committedDate": "2020-08-19T11:34:15Z", "message": "MQTT5 support for netty-codec-mqtt\n\nMotivation:\n\n MQTT Specification version 5 was released over a year ago,\n netty-codec-mqtt should be changed to support it.\n\nModifications:\n\n  Added more message and header types in `io.netty.handler.codec.mqtt`\n  package in `netty-coded-mqtt` subproject,\n  changed `MqttEncoder` and `MqttDecoder` to handle them properly,\n  updated examples in `netty-example`.\n\nResult:\n\n  `netty-coded-mqtt` supports both MQTT5 and MQTT3 now."}, "afterCommit": {"oid": "4df4ec779ac51eca89b92a2305eeac0f410c29e2", "author": {"user": {"login": "paul-lysak", "name": "Paul Lysak"}}, "url": "https://github.com/netty/netty/commit/4df4ec779ac51eca89b92a2305eeac0f410c29e2", "committedDate": "2020-08-19T11:41:00Z", "message": "MQTT5 support for netty-codec-mqtt\n\nMotivation:\n\n MQTT Specification version 5 was released over a year ago,\n netty-codec-mqtt should be changed to support it.\n\nModifications:\n\n  Added more message and header types in `io.netty.handler.codec.mqtt`\n  package in `netty-coded-mqtt` subproject,\n  changed `MqttEncoder` and `MqttDecoder` to handle them properly,\n  updated examples in `netty-example`.\n\nResult:\n\n  `netty-coded-mqtt` supports both MQTT5 and MQTT3 now."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcwNTM4NTU2", "url": "https://github.com/netty/netty/pull/10483#pullrequestreview-470538556", "createdAt": "2020-08-19T14:51:33Z", "commit": {"oid": "4df4ec779ac51eca89b92a2305eeac0f410c29e2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDo1MTozM1rOHDLI8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNDo1NDozOFrOHDLSFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA5MDI5MA==", "bodyText": "this pattern seems to be used a lot... consider extracting it to a static method and use it everywhere...", "url": "https://github.com/netty/netty/pull/10483#discussion_r473090290", "createdAt": "2020-08-19T14:51:33Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttConnectVariableHeader.java", "diffHunk": "@@ -52,6 +76,11 @@ public MqttConnectVariableHeader(\n         this.isWillFlag = isWillFlag;\n         this.isCleanSession = isCleanSession;\n         this.keepAliveTimeSeconds = keepAliveTimeSeconds;\n+        if (properties == null) {\n+            this.properties = MqttProperties.NO_PROPERTIES;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4df4ec779ac51eca89b92a2305eeac0f410c29e2"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA5MDYwMA==", "bodyText": "if this is the case we should throw ....", "url": "https://github.com/netty/netty/pull/10483#discussion_r473090600", "createdAt": "2020-08-19T14:51:57Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java", "diffHunk": "@@ -176,44 +179,54 @@ private static MqttFixedHeader decodeFixedHeader(ByteBuf buffer) {\n      * @param mqttFixedHeader MqttFixedHeader of the same message\n      * @return the variable header\n      */\n-    private static Result<?> decodeVariableHeader(ByteBuf buffer, MqttFixedHeader mqttFixedHeader) {\n+    private Result<?> decodeVariableHeader(ChannelHandlerContext ctx, ByteBuf buffer, MqttFixedHeader mqttFixedHeader) {\n         switch (mqttFixedHeader.messageType()) {\n             case CONNECT:\n-                return decodeConnectionVariableHeader(buffer);\n+                return decodeConnectionVariableHeader(ctx, buffer);\n \n             case CONNACK:\n-                return decodeConnAckVariableHeader(buffer);\n+                return decodeConnAckVariableHeader(ctx, buffer);\n \n-            case SUBSCRIBE:\n             case UNSUBSCRIBE:\n+            case SUBSCRIBE:\n             case SUBACK:\n             case UNSUBACK:\n+                return decodeMessageIdAndPropertiesVariableHeader(ctx, buffer);\n+\n             case PUBACK:\n             case PUBREC:\n             case PUBCOMP:\n             case PUBREL:\n-                return decodeMessageIdVariableHeader(buffer);\n+                return decodePubReplyMessage(buffer);\n \n             case PUBLISH:\n-                return decodePublishVariableHeader(buffer, mqttFixedHeader);\n+                return decodePublishVariableHeader(ctx, buffer, mqttFixedHeader);\n+\n+            case DISCONNECT:\n+            case AUTH:\n+                return decodeReasonCodeAndPropertiesVariableHeader(buffer);\n \n             case PINGREQ:\n             case PINGRESP:\n-            case DISCONNECT:\n                 // Empty variable header\n                 return new Result<Object>(null, 0);\n+            default:\n+                //shouldn't reach here\n+                return new Result<Object>(null, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4df4ec779ac51eca89b92a2305eeac0f410c29e2"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA5MTE3NA==", "bodyText": "either fill both or remove", "url": "https://github.com/netty/netty/pull/10483#discussion_r473091174", "createdAt": "2020-08-19T14:52:43Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java", "diffHunk": "@@ -464,6 +637,31 @@ private static MqttFixedHeader decodeFixedHeader(ByteBuf buffer) {\n         return new Result<Integer>(result, numberOfBytesConsumed);\n     }\n \n+    /**\n+     * See 1.5.5 Variable Byte Integer section of MQTT 5.0 specification for encoding/decoding rules\n+     *\n+     * @param buffer\n+     * @return", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4df4ec779ac51eca89b92a2305eeac0f410c29e2"}, "originalPosition": 411}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzA5MjYzMQ==", "bodyText": "Thats not what I meant... I was basically saying you can refactor it to be:\nif (....) {\n    return ...\n}\nreturn ...", "url": "https://github.com/netty/netty/pull/10483#discussion_r473092631", "createdAt": "2020-08-19T14:54:38Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -53,37 +54,48 @@ protected void encode(ChannelHandlerContext ctx, MqttMessage msg, List<Object> o\n      * @param message MQTT message to encode\n      * @return ByteBuf with encoded bytes\n      */\n-    static ByteBuf doEncode(ByteBufAllocator byteBufAllocator, MqttMessage message) {\n+    static ByteBuf doEncode(ChannelHandlerContext ctx,\n+                     ByteBufAllocator byteBufAllocator,\n+                     MqttMessage message) {\n \n         switch (message.fixedHeader().messageType()) {\n             case CONNECT:\n-                return encodeConnectMessage(byteBufAllocator, (MqttConnectMessage) message);\n+                return encodeConnectMessage(ctx, byteBufAllocator, (MqttConnectMessage) message);\n \n             case CONNACK:\n-                return encodeConnAckMessage(byteBufAllocator, (MqttConnAckMessage) message);\n+                return encodeConnAckMessage(ctx, byteBufAllocator, (MqttConnAckMessage) message);\n \n             case PUBLISH:\n-                return encodePublishMessage(byteBufAllocator, (MqttPublishMessage) message);\n+                return encodePublishMessage(ctx, byteBufAllocator, (MqttPublishMessage) message);\n \n             case SUBSCRIBE:\n-                return encodeSubscribeMessage(byteBufAllocator, (MqttSubscribeMessage) message);\n+                return encodeSubscribeMessage(ctx, byteBufAllocator, (MqttSubscribeMessage) message);\n \n             case UNSUBSCRIBE:\n-                return encodeUnsubscribeMessage(byteBufAllocator, (MqttUnsubscribeMessage) message);\n+                return encodeUnsubscribeMessage(ctx, byteBufAllocator, (MqttUnsubscribeMessage) message);\n \n             case SUBACK:\n-                return encodeSubAckMessage(byteBufAllocator, (MqttSubAckMessage) message);\n+                return encodeSubAckMessage(ctx, byteBufAllocator, (MqttSubAckMessage) message);\n \n             case UNSUBACK:\n+                if (message instanceof MqttUnsubAckMessage) {\n+                    return encodeUnsubAckMessage(ctx, byteBufAllocator, (MqttUnsubAckMessage) message);\n+                } else {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg4MjQwMw=="}, "originalCommit": {"oid": "95eb759b41c870c90d0165d2d6b323d2457ed143"}, "originalPosition": 58}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4df4ec779ac51eca89b92a2305eeac0f410c29e2", "author": {"user": {"login": "paul-lysak", "name": "Paul Lysak"}}, "url": "https://github.com/netty/netty/commit/4df4ec779ac51eca89b92a2305eeac0f410c29e2", "committedDate": "2020-08-19T11:41:00Z", "message": "MQTT5 support for netty-codec-mqtt\n\nMotivation:\n\n MQTT Specification version 5 was released over a year ago,\n netty-codec-mqtt should be changed to support it.\n\nModifications:\n\n  Added more message and header types in `io.netty.handler.codec.mqtt`\n  package in `netty-coded-mqtt` subproject,\n  changed `MqttEncoder` and `MqttDecoder` to handle them properly,\n  updated examples in `netty-example`.\n\nResult:\n\n  `netty-coded-mqtt` supports both MQTT5 and MQTT3 now."}, "afterCommit": {"oid": "60a7360c49f19dc60ba8e908ca1d5707cb78b918", "author": {"user": {"login": "paul-lysak", "name": "Paul Lysak"}}, "url": "https://github.com/netty/netty/commit/60a7360c49f19dc60ba8e908ca1d5707cb78b918", "committedDate": "2020-08-20T07:12:43Z", "message": "MQTT5 support for netty-codec-mqtt\n\nMotivation:\n\n MQTT Specification version 5 was released over a year ago,\n netty-codec-mqtt should be changed to support it.\n\nModifications:\n\n  Added more message and header types in `io.netty.handler.codec.mqtt`\n  package in `netty-coded-mqtt` subproject,\n  changed `MqttEncoder` and `MqttDecoder` to handle them properly,\n  added attribute `NETTY_CODEC_MQTT_VERSION` to track protocol version\n\nResult:\n\n  `netty-coded-mqtt` supports both MQTT5 and MQTT3 now."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczMTM4MzMx", "url": "https://github.com/netty/netty/pull/10483#pullrequestreview-473138331", "createdAt": "2020-08-24T05:57:59Z", "commit": {"oid": "60a7360c49f19dc60ba8e908ca1d5707cb78b918"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNTo1Nzo1OVrOHFVllQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwNjoxNToyNVrOHFV7Hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM1ODYxMw==", "bodyText": "nit: use MqttProperties.notNull", "url": "https://github.com/netty/netty/pull/10483#discussion_r475358613", "createdAt": "2020-08-24T05:57:59Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttConnectPayload.java", "diffHunk": "@@ -56,7 +59,27 @@ public MqttConnectPayload(\n             byte[] willMessage,\n             String userName,\n             byte[] password) {\n+        this(clientIdentifier,\n+                MqttProperties.NO_PROPERTIES,\n+                willTopic,\n+                willMessage,\n+                userName,\n+                password);\n+    }\n+\n+    public MqttConnectPayload(\n+            String clientIdentifier,\n+            MqttProperties willProperties,\n+            String willTopic,\n+            byte[] willMessage,\n+            String userName,\n+            byte[] password) {\n         this.clientIdentifier = clientIdentifier;\n+        if (willProperties == null) {\n+            this.willProperties = MqttProperties.NO_PROPERTIES;\n+        } else {\n+            this.willProperties = willProperties;\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a7360c49f19dc60ba8e908ca1d5707cb78b918"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM1OTI4Ng==", "bodyText": "nit: use new ArrayList<Short>(bytesRemainingInVariablePart); as we already know how many elements we will add.", "url": "https://github.com/netty/netty/pull/10483#discussion_r475359286", "createdAt": "2020-08-24T06:00:10Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java", "diffHunk": "@@ -402,6 +556,25 @@ private static MqttFixedHeader decodeFixedHeader(ByteBuf buffer) {\n         return new Result<MqttSubAckPayload>(new MqttSubAckPayload(grantedQos), numberOfBytesConsumed);\n     }\n \n+    private static Result<MqttUnsubAckPayload> decodeUnsubAckPayload(\n+            ChannelHandlerContext ctx,\n+            ByteBuf buffer,\n+            int bytesRemainingInVariablePart) {\n+        final MqttVersion mqttVersion = MqttCodecUtil.getMqttVersion(ctx);\n+        if (mqttVersion == MqttVersion.MQTT_5) {\n+            final List<Short> reasonCodes = new ArrayList<Short>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a7360c49f19dc60ba8e908ca1d5707cb78b918"}, "originalPosition": 387}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM1OTk3OA==", "bodyText": "I wonder if we should better do the release in a finally block. Just in case if something goes wrong... otherwise we will leak memory", "url": "https://github.com/netty/netty/pull/10483#discussion_r475359978", "createdAt": "2020-08-24T06:02:27Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -196,21 +221,33 @@ private static int getConnVariableHeaderFlag(MqttConnectVariableHeader variableH\n     }\n \n     private static ByteBuf encodeConnAckMessage(\n-            ByteBufAllocator byteBufAllocator,\n+            ChannelHandlerContext ctx,\n             MqttConnAckMessage message) {\n-        ByteBuf buf = byteBufAllocator.buffer(4);\n+        final MqttVersion mqttVersion = MqttCodecUtil.getMqttVersion(ctx);\n+        ByteBuf propertiesBuf = encodePropertiesIfNeeded(mqttVersion,\n+                ctx.alloc(),\n+                message.variableHeader().properties());\n+\n+        ByteBuf buf = ctx.alloc().buffer(4 + propertiesBuf.readableBytes());\n         buf.writeByte(getFixedHeaderByte1(message.fixedHeader()));\n-        buf.writeByte(2);\n+        writeVariableLengthInt(buf, 2 + propertiesBuf.readableBytes());\n         buf.writeByte(message.variableHeader().isSessionPresent() ? 0x01 : 0x00);\n         buf.writeByte(message.variableHeader().connectReturnCode().byteValue());\n+        buf.writeBytes(propertiesBuf);\n+        propertiesBuf.release();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a7360c49f19dc60ba8e908ca1d5707cb78b918"}, "originalPosition": 167}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2MDAyOQ==", "bodyText": "I wonder if we should better do the release in a finally block. Just in case if something goes wrong... otherwise we will leak memory", "url": "https://github.com/netty/netty/pull/10483#discussion_r475360029", "createdAt": "2020-08-24T06:02:38Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -153,11 +174,15 @@ private static ByteBuf encodeConnectMessage(\n         buf.writeByte(variableHeader.version());\n         buf.writeByte(getConnVariableHeaderFlag(variableHeader));\n         buf.writeShort(variableHeader.keepAliveTimeSeconds());\n+        buf.writeBytes(propertiesBuf);\n+        propertiesBuf.release();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a7360c49f19dc60ba8e908ca1d5707cb78b918"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2MDE0Mw==", "bodyText": "I wonder if we should better do the release in a finally block. Just in case if something goes wrong... otherwise we will leak memory", "url": "https://github.com/netty/netty/pull/10483#discussion_r475360143", "createdAt": "2020-08-24T06:02:59Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -153,11 +174,15 @@ private static ByteBuf encodeConnectMessage(\n         buf.writeByte(variableHeader.version());\n         buf.writeByte(getConnVariableHeaderFlag(variableHeader));\n         buf.writeShort(variableHeader.keepAliveTimeSeconds());\n+        buf.writeBytes(propertiesBuf);\n+        propertiesBuf.release();\n \n         // Payload\n         buf.writeShort(clientIdentifierBytes.length);\n         buf.writeBytes(clientIdentifierBytes, 0, clientIdentifierBytes.length);\n         if (variableHeader.isWillFlag()) {\n+            buf.writeBytes(willPropertiesBuf);\n+            willPropertiesBuf.release();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a7360c49f19dc60ba8e908ca1d5707cb78b918"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2MDM4Mg==", "bodyText": "Also I think we should always call release() ... so please do it outside of the if block. I know at the moment it not really matters as you use EMPTY_BUFFER but this is more of an implementation detail.", "url": "https://github.com/netty/netty/pull/10483#discussion_r475360382", "createdAt": "2020-08-24T06:03:51Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -153,11 +174,15 @@ private static ByteBuf encodeConnectMessage(\n         buf.writeByte(variableHeader.version());\n         buf.writeByte(getConnVariableHeaderFlag(variableHeader));\n         buf.writeShort(variableHeader.keepAliveTimeSeconds());\n+        buf.writeBytes(propertiesBuf);\n+        propertiesBuf.release();\n \n         // Payload\n         buf.writeShort(clientIdentifierBytes.length);\n         buf.writeBytes(clientIdentifierBytes, 0, clientIdentifierBytes.length);\n         if (variableHeader.isWillFlag()) {\n+            buf.writeBytes(willPropertiesBuf);\n+            willPropertiesBuf.release();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2MDE0Mw=="}, "originalCommit": {"oid": "60a7360c49f19dc60ba8e908ca1d5707cb78b918"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2MDQ0NA==", "bodyText": "I wonder if we should better do the release in a finally block. Just in case if something goes wrong... otherwise we will leak memory", "url": "https://github.com/netty/netty/pull/10483#discussion_r475360444", "createdAt": "2020-08-24T06:04:03Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -227,30 +264,45 @@ private static ByteBuf encodeSubscribeMessage(\n         int variablePartSize = variableHeaderBufferSize + payloadBufferSize;\n         int fixedHeaderBufferSize = 1 + getVariableLengthInt(variablePartSize);\n \n-        ByteBuf buf = byteBufAllocator.buffer(fixedHeaderBufferSize + variablePartSize);\n+        ByteBuf buf = ctx.alloc().buffer(fixedHeaderBufferSize + variablePartSize);\n         buf.writeByte(getFixedHeaderByte1(mqttFixedHeader));\n         writeVariableLengthInt(buf, variablePartSize);\n \n         // Variable Header\n         int messageId = variableHeader.messageId();\n         buf.writeShort(messageId);\n+        buf.writeBytes(propertiesBuf);\n+        propertiesBuf.release();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a7360c49f19dc60ba8e908ca1d5707cb78b918"}, "originalPosition": 199}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2MDU3MQ==", "bodyText": "I wonder if we should better do the release in a finally block. Just in case if something goes wrong... otherwise we will leak memory", "url": "https://github.com/netty/netty/pull/10483#discussion_r475360571", "createdAt": "2020-08-24T06:04:26Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -265,13 +317,15 @@ private static ByteBuf encodeUnsubscribeMessage(\n         int variablePartSize = variableHeaderBufferSize + payloadBufferSize;\n         int fixedHeaderBufferSize = 1 + getVariableLengthInt(variablePartSize);\n \n-        ByteBuf buf = byteBufAllocator.buffer(fixedHeaderBufferSize + variablePartSize);\n+        ByteBuf buf = ctx.alloc().buffer(fixedHeaderBufferSize + variablePartSize);\n         buf.writeByte(getFixedHeaderByte1(mqttFixedHeader));\n         writeVariableLengthInt(buf, variablePartSize);\n \n         // Variable Header\n         int messageId = variableHeader.messageId();\n         buf.writeShort(messageId);\n+        buf.writeBytes(propertiesBuf);\n+        propertiesBuf.release();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a7360c49f19dc60ba8e908ca1d5707cb78b918"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2MDU5OA==", "bodyText": "I wonder if we should better do the release in a finally block. Just in case if something goes wrong... otherwise we will leak memory", "url": "https://github.com/netty/netty/pull/10483#discussion_r475360598", "createdAt": "2020-08-24T06:04:32Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -284,52 +338,135 @@ private static ByteBuf encodeUnsubscribeMessage(\n     }\n \n     private static ByteBuf encodeSubAckMessage(\n-            ByteBufAllocator byteBufAllocator,\n+            ChannelHandlerContext ctx,\n             MqttSubAckMessage message) {\n-        int variableHeaderBufferSize = 2;\n+        MqttVersion mqttVersion = MqttCodecUtil.getMqttVersion(ctx);\n+        ByteBuf propertiesBuf = encodePropertiesIfNeeded(mqttVersion,\n+                ctx.alloc(),\n+                message.idAndPropertiesVariableHeader().properties());\n+        int variableHeaderBufferSize = 2 + propertiesBuf.readableBytes();\n         int payloadBufferSize = message.payload().grantedQoSLevels().size();\n         int variablePartSize = variableHeaderBufferSize + payloadBufferSize;\n         int fixedHeaderBufferSize = 1 + getVariableLengthInt(variablePartSize);\n-        ByteBuf buf = byteBufAllocator.buffer(fixedHeaderBufferSize + variablePartSize);\n+        ByteBuf buf = ctx.alloc().buffer(fixedHeaderBufferSize + variablePartSize);\n         buf.writeByte(getFixedHeaderByte1(message.fixedHeader()));\n         writeVariableLengthInt(buf, variablePartSize);\n         buf.writeShort(message.variableHeader().messageId());\n+        buf.writeBytes(propertiesBuf);\n+        propertiesBuf.release();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a7360c49f19dc60ba8e908ca1d5707cb78b918"}, "originalPosition": 279}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2MDY1Mg==", "bodyText": "I wonder if we should better do the release in a finally block. Just in case if something goes wrong... otherwise we will leak memory", "url": "https://github.com/netty/netty/pull/10483#discussion_r475360652", "createdAt": "2020-08-24T06:04:41Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -284,52 +338,135 @@ private static ByteBuf encodeUnsubscribeMessage(\n     }\n \n     private static ByteBuf encodeSubAckMessage(\n-            ByteBufAllocator byteBufAllocator,\n+            ChannelHandlerContext ctx,\n             MqttSubAckMessage message) {\n-        int variableHeaderBufferSize = 2;\n+        MqttVersion mqttVersion = MqttCodecUtil.getMqttVersion(ctx);\n+        ByteBuf propertiesBuf = encodePropertiesIfNeeded(mqttVersion,\n+                ctx.alloc(),\n+                message.idAndPropertiesVariableHeader().properties());\n+        int variableHeaderBufferSize = 2 + propertiesBuf.readableBytes();\n         int payloadBufferSize = message.payload().grantedQoSLevels().size();\n         int variablePartSize = variableHeaderBufferSize + payloadBufferSize;\n         int fixedHeaderBufferSize = 1 + getVariableLengthInt(variablePartSize);\n-        ByteBuf buf = byteBufAllocator.buffer(fixedHeaderBufferSize + variablePartSize);\n+        ByteBuf buf = ctx.alloc().buffer(fixedHeaderBufferSize + variablePartSize);\n         buf.writeByte(getFixedHeaderByte1(message.fixedHeader()));\n         writeVariableLengthInt(buf, variablePartSize);\n         buf.writeShort(message.variableHeader().messageId());\n+        buf.writeBytes(propertiesBuf);\n+        propertiesBuf.release();\n         for (int qos : message.payload().grantedQoSLevels()) {\n             buf.writeByte(qos);\n         }\n \n         return buf;\n     }\n \n+    private static ByteBuf encodeUnsubAckMessage(\n+            ChannelHandlerContext ctx,\n+            MqttUnsubAckMessage message) {\n+        if (message.variableHeader() instanceof  MqttMessageIdAndPropertiesVariableHeader) {\n+            MqttVersion mqttVersion = MqttCodecUtil.getMqttVersion(ctx);\n+            ByteBuf propertiesBuf = encodePropertiesIfNeeded(mqttVersion,\n+                    ctx.alloc(),\n+                    message.idAndPropertiesVariableHeader().properties());\n+            int variableHeaderBufferSize = 2 + propertiesBuf.readableBytes();\n+            int payloadBufferSize = message.payload().unsubscribeReasonCodes().size();\n+            int variablePartSize = variableHeaderBufferSize + payloadBufferSize;\n+            int fixedHeaderBufferSize = 1 + getVariableLengthInt(variablePartSize);\n+            ByteBuf buf = ctx.alloc().buffer(fixedHeaderBufferSize + variablePartSize);\n+            buf.writeByte(getFixedHeaderByte1(message.fixedHeader()));\n+            writeVariableLengthInt(buf, variablePartSize);\n+            buf.writeShort(message.variableHeader().messageId());\n+            buf.writeBytes(propertiesBuf);\n+            propertiesBuf.release();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a7360c49f19dc60ba8e908ca1d5707cb78b918"}, "originalPosition": 304}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2MDczNw==", "bodyText": "I wonder if we should better do the release in a finally block. Just in case if something goes wrong... otherwise we will leak memory", "url": "https://github.com/netty/netty/pull/10483#discussion_r475360737", "createdAt": "2020-08-24T06:04:55Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -284,52 +338,135 @@ private static ByteBuf encodeUnsubscribeMessage(\n     }\n \n     private static ByteBuf encodeSubAckMessage(\n-            ByteBufAllocator byteBufAllocator,\n+            ChannelHandlerContext ctx,\n             MqttSubAckMessage message) {\n-        int variableHeaderBufferSize = 2;\n+        MqttVersion mqttVersion = MqttCodecUtil.getMqttVersion(ctx);\n+        ByteBuf propertiesBuf = encodePropertiesIfNeeded(mqttVersion,\n+                ctx.alloc(),\n+                message.idAndPropertiesVariableHeader().properties());\n+        int variableHeaderBufferSize = 2 + propertiesBuf.readableBytes();\n         int payloadBufferSize = message.payload().grantedQoSLevels().size();\n         int variablePartSize = variableHeaderBufferSize + payloadBufferSize;\n         int fixedHeaderBufferSize = 1 + getVariableLengthInt(variablePartSize);\n-        ByteBuf buf = byteBufAllocator.buffer(fixedHeaderBufferSize + variablePartSize);\n+        ByteBuf buf = ctx.alloc().buffer(fixedHeaderBufferSize + variablePartSize);\n         buf.writeByte(getFixedHeaderByte1(message.fixedHeader()));\n         writeVariableLengthInt(buf, variablePartSize);\n         buf.writeShort(message.variableHeader().messageId());\n+        buf.writeBytes(propertiesBuf);\n+        propertiesBuf.release();\n         for (int qos : message.payload().grantedQoSLevels()) {\n             buf.writeByte(qos);\n         }\n \n         return buf;\n     }\n \n+    private static ByteBuf encodeUnsubAckMessage(\n+            ChannelHandlerContext ctx,\n+            MqttUnsubAckMessage message) {\n+        if (message.variableHeader() instanceof  MqttMessageIdAndPropertiesVariableHeader) {\n+            MqttVersion mqttVersion = MqttCodecUtil.getMqttVersion(ctx);\n+            ByteBuf propertiesBuf = encodePropertiesIfNeeded(mqttVersion,\n+                    ctx.alloc(),\n+                    message.idAndPropertiesVariableHeader().properties());\n+            int variableHeaderBufferSize = 2 + propertiesBuf.readableBytes();\n+            int payloadBufferSize = message.payload().unsubscribeReasonCodes().size();\n+            int variablePartSize = variableHeaderBufferSize + payloadBufferSize;\n+            int fixedHeaderBufferSize = 1 + getVariableLengthInt(variablePartSize);\n+            ByteBuf buf = ctx.alloc().buffer(fixedHeaderBufferSize + variablePartSize);\n+            buf.writeByte(getFixedHeaderByte1(message.fixedHeader()));\n+            writeVariableLengthInt(buf, variablePartSize);\n+            buf.writeShort(message.variableHeader().messageId());\n+            buf.writeBytes(propertiesBuf);\n+            propertiesBuf.release();\n+\n+            for (Short reasonCode : message.payload().unsubscribeReasonCodes()) {\n+                buf.writeByte(reasonCode);\n+            }\n+\n+            return buf;\n+        } else {\n+            return encodeMessageWithOnlySingleByteFixedHeaderAndMessageId(ctx.alloc(), message);\n+        }\n+    }\n+\n     private static ByteBuf encodePublishMessage(\n-            ByteBufAllocator byteBufAllocator,\n+            ChannelHandlerContext ctx,\n             MqttPublishMessage message) {\n+        MqttVersion mqttVersion = MqttCodecUtil.getMqttVersion(ctx);\n         MqttFixedHeader mqttFixedHeader = message.fixedHeader();\n         MqttPublishVariableHeader variableHeader = message.variableHeader();\n         ByteBuf payload = message.payload().duplicate();\n \n         String topicName = variableHeader.topicName();\n         byte[] topicNameBytes = encodeStringUtf8(topicName);\n \n+        ByteBuf propertiesBuf = encodePropertiesIfNeeded(mqttVersion,\n+                ctx.alloc(),\n+                message.variableHeader().properties());\n+\n         int variableHeaderBufferSize = 2 + topicNameBytes.length +\n-                (mqttFixedHeader.qosLevel().value() > 0 ? 2 : 0);\n+                (mqttFixedHeader.qosLevel().value() > 0 ? 2 : 0) + propertiesBuf.readableBytes();\n         int payloadBufferSize = payload.readableBytes();\n         int variablePartSize = variableHeaderBufferSize + payloadBufferSize;\n         int fixedHeaderBufferSize = 1 + getVariableLengthInt(variablePartSize);\n \n-        ByteBuf buf = byteBufAllocator.buffer(fixedHeaderBufferSize + variablePartSize);\n+        ByteBuf buf = ctx.alloc().buffer(fixedHeaderBufferSize + variablePartSize);\n         buf.writeByte(getFixedHeaderByte1(mqttFixedHeader));\n         writeVariableLengthInt(buf, variablePartSize);\n         buf.writeShort(topicNameBytes.length);\n         buf.writeBytes(topicNameBytes);\n         if (mqttFixedHeader.qosLevel().value() > 0) {\n             buf.writeShort(variableHeader.packetId());\n         }\n+        buf.writeBytes(propertiesBuf);\n+        propertiesBuf.release();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a7360c49f19dc60ba8e908ca1d5707cb78b918"}, "originalPosition": 349}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2MDgxNg==", "bodyText": "I wonder if we should better do the release in a finally block. Just in case if something goes wrong... otherwise we will leak memory", "url": "https://github.com/netty/netty/pull/10483#discussion_r475360816", "createdAt": "2020-08-24T06:05:08Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -284,52 +338,135 @@ private static ByteBuf encodeUnsubscribeMessage(\n     }\n \n     private static ByteBuf encodeSubAckMessage(\n-            ByteBufAllocator byteBufAllocator,\n+            ChannelHandlerContext ctx,\n             MqttSubAckMessage message) {\n-        int variableHeaderBufferSize = 2;\n+        MqttVersion mqttVersion = MqttCodecUtil.getMqttVersion(ctx);\n+        ByteBuf propertiesBuf = encodePropertiesIfNeeded(mqttVersion,\n+                ctx.alloc(),\n+                message.idAndPropertiesVariableHeader().properties());\n+        int variableHeaderBufferSize = 2 + propertiesBuf.readableBytes();\n         int payloadBufferSize = message.payload().grantedQoSLevels().size();\n         int variablePartSize = variableHeaderBufferSize + payloadBufferSize;\n         int fixedHeaderBufferSize = 1 + getVariableLengthInt(variablePartSize);\n-        ByteBuf buf = byteBufAllocator.buffer(fixedHeaderBufferSize + variablePartSize);\n+        ByteBuf buf = ctx.alloc().buffer(fixedHeaderBufferSize + variablePartSize);\n         buf.writeByte(getFixedHeaderByte1(message.fixedHeader()));\n         writeVariableLengthInt(buf, variablePartSize);\n         buf.writeShort(message.variableHeader().messageId());\n+        buf.writeBytes(propertiesBuf);\n+        propertiesBuf.release();\n         for (int qos : message.payload().grantedQoSLevels()) {\n             buf.writeByte(qos);\n         }\n \n         return buf;\n     }\n \n+    private static ByteBuf encodeUnsubAckMessage(\n+            ChannelHandlerContext ctx,\n+            MqttUnsubAckMessage message) {\n+        if (message.variableHeader() instanceof  MqttMessageIdAndPropertiesVariableHeader) {\n+            MqttVersion mqttVersion = MqttCodecUtil.getMqttVersion(ctx);\n+            ByteBuf propertiesBuf = encodePropertiesIfNeeded(mqttVersion,\n+                    ctx.alloc(),\n+                    message.idAndPropertiesVariableHeader().properties());\n+            int variableHeaderBufferSize = 2 + propertiesBuf.readableBytes();\n+            int payloadBufferSize = message.payload().unsubscribeReasonCodes().size();\n+            int variablePartSize = variableHeaderBufferSize + payloadBufferSize;\n+            int fixedHeaderBufferSize = 1 + getVariableLengthInt(variablePartSize);\n+            ByteBuf buf = ctx.alloc().buffer(fixedHeaderBufferSize + variablePartSize);\n+            buf.writeByte(getFixedHeaderByte1(message.fixedHeader()));\n+            writeVariableLengthInt(buf, variablePartSize);\n+            buf.writeShort(message.variableHeader().messageId());\n+            buf.writeBytes(propertiesBuf);\n+            propertiesBuf.release();\n+\n+            for (Short reasonCode : message.payload().unsubscribeReasonCodes()) {\n+                buf.writeByte(reasonCode);\n+            }\n+\n+            return buf;\n+        } else {\n+            return encodeMessageWithOnlySingleByteFixedHeaderAndMessageId(ctx.alloc(), message);\n+        }\n+    }\n+\n     private static ByteBuf encodePublishMessage(\n-            ByteBufAllocator byteBufAllocator,\n+            ChannelHandlerContext ctx,\n             MqttPublishMessage message) {\n+        MqttVersion mqttVersion = MqttCodecUtil.getMqttVersion(ctx);\n         MqttFixedHeader mqttFixedHeader = message.fixedHeader();\n         MqttPublishVariableHeader variableHeader = message.variableHeader();\n         ByteBuf payload = message.payload().duplicate();\n \n         String topicName = variableHeader.topicName();\n         byte[] topicNameBytes = encodeStringUtf8(topicName);\n \n+        ByteBuf propertiesBuf = encodePropertiesIfNeeded(mqttVersion,\n+                ctx.alloc(),\n+                message.variableHeader().properties());\n+\n         int variableHeaderBufferSize = 2 + topicNameBytes.length +\n-                (mqttFixedHeader.qosLevel().value() > 0 ? 2 : 0);\n+                (mqttFixedHeader.qosLevel().value() > 0 ? 2 : 0) + propertiesBuf.readableBytes();\n         int payloadBufferSize = payload.readableBytes();\n         int variablePartSize = variableHeaderBufferSize + payloadBufferSize;\n         int fixedHeaderBufferSize = 1 + getVariableLengthInt(variablePartSize);\n \n-        ByteBuf buf = byteBufAllocator.buffer(fixedHeaderBufferSize + variablePartSize);\n+        ByteBuf buf = ctx.alloc().buffer(fixedHeaderBufferSize + variablePartSize);\n         buf.writeByte(getFixedHeaderByte1(mqttFixedHeader));\n         writeVariableLengthInt(buf, variablePartSize);\n         buf.writeShort(topicNameBytes.length);\n         buf.writeBytes(topicNameBytes);\n         if (mqttFixedHeader.qosLevel().value() > 0) {\n             buf.writeShort(variableHeader.packetId());\n         }\n+        buf.writeBytes(propertiesBuf);\n+        propertiesBuf.release();\n         buf.writeBytes(payload);\n \n         return buf;\n     }\n \n+    private static ByteBuf encodePubReplyMessage(ChannelHandlerContext ctx,\n+                                          MqttMessage message) {\n+        if (message.variableHeader() instanceof MqttPubReplyMessageVariableHeader) {\n+            MqttFixedHeader mqttFixedHeader = message.fixedHeader();\n+            MqttPubReplyMessageVariableHeader variableHeader =\n+                    (MqttPubReplyMessageVariableHeader) message.variableHeader();\n+            int msgId = variableHeader.messageId();\n+\n+            final ByteBuf propertiesBuf;\n+            final boolean includeReasonCode;\n+            final int variableHeaderBufferSize;\n+            final MqttVersion mqttVersion = MqttCodecUtil.getMqttVersion(ctx);\n+            if (mqttVersion == MqttVersion.MQTT_5 &&\n+                    (variableHeader.reasonCode() != MqttPubReplyMessageVariableHeader.REASON_CODE_OK ||\n+                            !variableHeader.properties().isEmpty())) {\n+                propertiesBuf = encodeProperties(ctx.alloc(), variableHeader.properties());\n+                includeReasonCode = true;\n+                variableHeaderBufferSize = 3 + propertiesBuf.readableBytes();\n+            } else {\n+                propertiesBuf = Unpooled.EMPTY_BUFFER;\n+                includeReasonCode = false;\n+                variableHeaderBufferSize = 2;\n+            }\n+\n+            final int fixedHeaderBufferSize = 1 + getVariableLengthInt(variableHeaderBufferSize);\n+            ByteBuf buf = ctx.alloc().buffer(fixedHeaderBufferSize + variableHeaderBufferSize);\n+            buf.writeByte(getFixedHeaderByte1(mqttFixedHeader));\n+            writeVariableLengthInt(buf, variableHeaderBufferSize);\n+            buf.writeShort(msgId);\n+            if (includeReasonCode) {\n+                buf.writeByte(variableHeader.reasonCode());\n+            }\n+            buf.writeBytes(propertiesBuf);\n+            propertiesBuf.release();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a7360c49f19dc60ba8e908ca1d5707cb78b918"}, "originalPosition": 388}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2MDg2MQ==", "bodyText": "I wonder if we should better do the release in a finally block. Just in case if something goes wrong... otherwise we will leak memory", "url": "https://github.com/netty/netty/pull/10483#discussion_r475360861", "createdAt": "2020-08-24T06:05:17Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -347,6 +484,46 @@ private static ByteBuf encodeMessageWithOnlySingleByteFixedHeaderAndMessageId(\n         return buf;\n     }\n \n+    private static ByteBuf encodeReasonCodePlusPropertiesMessage(\n+            ChannelHandlerContext ctx,\n+            MqttMessage message) {\n+        if (message.variableHeader() instanceof MqttReasonCodeAndPropertiesVariableHeader) {\n+            MqttVersion mqttVersion = MqttCodecUtil.getMqttVersion(ctx);\n+            MqttFixedHeader mqttFixedHeader = message.fixedHeader();\n+            MqttReasonCodeAndPropertiesVariableHeader variableHeader =\n+                    (MqttReasonCodeAndPropertiesVariableHeader) message.variableHeader();\n+\n+            final ByteBuf propertiesBuf;\n+            final boolean includeReasonCode;\n+            final int variableHeaderBufferSize;\n+            if (mqttVersion == MqttVersion.MQTT_5 &&\n+                    (variableHeader.reasonCode() != MqttReasonCodeAndPropertiesVariableHeader.REASON_CODE_OK ||\n+                            !variableHeader.properties().isEmpty())) {\n+                propertiesBuf = encodeProperties(ctx.alloc(), variableHeader.properties());\n+                includeReasonCode = true;\n+                variableHeaderBufferSize = 1 + propertiesBuf.readableBytes();\n+            } else {\n+                propertiesBuf = Unpooled.EMPTY_BUFFER;\n+                includeReasonCode = false;\n+                variableHeaderBufferSize = 0;\n+            }\n+\n+            final int fixedHeaderBufferSize = 1 + getVariableLengthInt(variableHeaderBufferSize);\n+            ByteBuf buf = ctx.alloc().buffer(fixedHeaderBufferSize + variableHeaderBufferSize);\n+            buf.writeByte(getFixedHeaderByte1(mqttFixedHeader));\n+            writeVariableLengthInt(buf, variableHeaderBufferSize);\n+            if (includeReasonCode) {\n+                buf.writeByte(variableHeader.reasonCode());\n+            }\n+            buf.writeBytes(propertiesBuf);\n+            propertiesBuf.release();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a7360c49f19dc60ba8e908ca1d5707cb78b918"}, "originalPosition": 435}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2MDk2Nw==", "bodyText": "nit: you can remove the else", "url": "https://github.com/netty/netty/pull/10483#discussion_r475360967", "createdAt": "2020-08-24T06:05:34Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -358,6 +535,94 @@ private static ByteBuf encodeMessageWithOnlySingleByteFixedHeader(\n         return buf;\n     }\n \n+    private static ByteBuf encodePropertiesIfNeeded(MqttVersion mqttVersion,\n+                                             ByteBufAllocator byteBufAllocator,\n+                                             MqttProperties mqttProperties) {\n+        if (mqttVersion == MqttVersion.MQTT_5) {\n+            return encodeProperties(byteBufAllocator, mqttProperties);\n+        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a7360c49f19dc60ba8e908ca1d5707cb78b918"}, "originalPosition": 455}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2MTIzOQ==", "bodyText": "I wonder if we should better do the release in a finally block. Just in case if something goes wrong... otherwise we will leak memory... This will also cover the default: case then", "url": "https://github.com/netty/netty/pull/10483#discussion_r475361239", "createdAt": "2020-08-24T06:06:23Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -358,6 +535,94 @@ private static ByteBuf encodeMessageWithOnlySingleByteFixedHeader(\n         return buf;\n     }\n \n+    private static ByteBuf encodePropertiesIfNeeded(MqttVersion mqttVersion,\n+                                             ByteBufAllocator byteBufAllocator,\n+                                             MqttProperties mqttProperties) {\n+        if (mqttVersion == MqttVersion.MQTT_5) {\n+            return encodeProperties(byteBufAllocator, mqttProperties);\n+        } else {\n+            return Unpooled.EMPTY_BUFFER;\n+        }\n+    }\n+\n+    private static ByteBuf encodeProperties(ByteBufAllocator byteBufAllocator,\n+                                            MqttProperties mqttProperties) {\n+        ByteBuf propertiesHeaderBuf = byteBufAllocator.buffer();\n+        // encode also the Properties part\n+        ByteBuf propertiesBuf = byteBufAllocator.buffer();\n+        for (MqttProperties.MqttProperty property : mqttProperties.listAll()) {\n+            MqttProperties.MqttPropertyType propertyType = MqttProperties.MqttPropertyType.valueOf(property.propertyId);\n+            switch (propertyType) {\n+                case PAYLOAD_FORMAT_INDICATOR:\n+                case REQUEST_PROBLEM_INFORMATION:\n+                case REQUEST_RESPONSE_INFORMATION:\n+                case MAXIMUM_QOS:\n+                case RETAIN_AVAILABLE:\n+                case WILDCARD_SUBSCRIPTION_AVAILABLE:\n+                case SUBSCRIPTION_IDENTIFIER_AVAILABLE:\n+                case SHARED_SUBSCRIPTION_AVAILABLE:\n+                    writeVariableLengthInt(propertiesBuf, property.propertyId);\n+                    final byte bytePropValue = ((MqttProperties.IntegerProperty) property).value.byteValue();\n+                    propertiesBuf.writeByte(bytePropValue);\n+                    break;\n+                case SERVER_KEEP_ALIVE:\n+                case RECEIVE_MAXIMUM:\n+                case TOPIC_ALIAS_MAXIMUM:\n+                case TOPIC_ALIAS:\n+                    writeVariableLengthInt(propertiesBuf, property.propertyId);\n+                    final short twoBytesInPropValue = ((MqttProperties.IntegerProperty) property).value.shortValue();\n+                    propertiesBuf.writeShort(twoBytesInPropValue);\n+                    break;\n+                case PUBLICATION_EXPIRY_INTERVAL:\n+                case SESSION_EXPIRY_INTERVAL:\n+                case WILL_DELAY_INTERVAL:\n+                case MAXIMUM_PACKET_SIZE:\n+                    writeVariableLengthInt(propertiesBuf, property.propertyId);\n+                    final int fourBytesIntPropValue = ((MqttProperties.IntegerProperty) property).value;\n+                    propertiesBuf.writeInt(fourBytesIntPropValue);\n+                    break;\n+                case SUBSCRIPTION_IDENTIFIER:\n+                    writeVariableLengthInt(propertiesBuf, property.propertyId);\n+                    final int vbi = ((MqttProperties.IntegerProperty) property).value;\n+                    writeVariableLengthInt(propertiesBuf, vbi);\n+                    break;\n+                case CONTENT_TYPE:\n+                case RESPONSE_TOPIC:\n+                case ASSIGNED_CLIENT_IDENTIFIER:\n+                case AUTHENTICATION_METHOD:\n+                case RESPONSE_INFORMATION:\n+                case SERVER_REFERENCE:\n+                case REASON_STRING:\n+                    writeVariableLengthInt(propertiesBuf, property.propertyId);\n+                    writeUTF8String(propertiesBuf, ((MqttProperties.StringProperty) property).value);\n+                    break;\n+                case USER_PROPERTY:\n+                    final List<MqttProperties.StringPair> pairs = ((MqttProperties.UserProperties) property).value;\n+                    for (MqttProperties.StringPair pair: pairs) {\n+                        writeVariableLengthInt(propertiesBuf, property.propertyId);\n+                        writeUTF8String(propertiesBuf, pair.key);\n+                        writeUTF8String(propertiesBuf, pair.value);\n+                    }\n+                    break;\n+                case CORRELATION_DATA:\n+                case AUTHENTICATION_DATA:\n+                    writeVariableLengthInt(propertiesBuf, property.propertyId);\n+                    final byte[] binaryPropValue = ((MqttProperties.BinaryProperty) property).value;\n+                    propertiesBuf.writeShort(binaryPropValue.length);\n+                    propertiesBuf.writeBytes(binaryPropValue, 0, binaryPropValue.length);\n+                    break;\n+                default:\n+                    //shouldn't reach here\n+                    throw new EncoderException(\"Unknown property type: \" + propertyType);\n+            }\n+        }\n+        writeVariableLengthInt(propertiesHeaderBuf, propertiesBuf.readableBytes());\n+        propertiesHeaderBuf.writeBytes(propertiesBuf);\n+        propertiesBuf.release();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a7360c49f19dc60ba8e908ca1d5707cb78b918"}, "originalPosition": 533}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2MTc2Ng==", "bodyText": "I am not in love with the method name...  Maybe just make it package-private for now so we can change it later on.", "url": "https://github.com/netty/netty/pull/10483#discussion_r475361766", "createdAt": "2020-08-24T06:08:17Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.mqtt;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.List;\n+import java.util.ArrayList;\n+\n+/**\n+ * MQTT Properties container\n+ * */\n+public final class MqttProperties {\n+\n+    public enum MqttPropertyType {\n+        // single byte properties\n+        PAYLOAD_FORMAT_INDICATOR(0x01),\n+        REQUEST_PROBLEM_INFORMATION(0x17),\n+        REQUEST_RESPONSE_INFORMATION(0x19),\n+        MAXIMUM_QOS(0x24),\n+        RETAIN_AVAILABLE(0x25),\n+        WILDCARD_SUBSCRIPTION_AVAILABLE(0x28),\n+        SUBSCRIPTION_IDENTIFIER_AVAILABLE(0x29),\n+        SHARED_SUBSCRIPTION_AVAILABLE(0x2A),\n+\n+        // two bytes properties\n+        SERVER_KEEP_ALIVE(0x13),\n+        RECEIVE_MAXIMUM(0x21),\n+        TOPIC_ALIAS_MAXIMUM(0x22),\n+        TOPIC_ALIAS(0x23),\n+\n+        // four bytes properties\n+        PUBLICATION_EXPIRY_INTERVAL(0x02),\n+        SESSION_EXPIRY_INTERVAL(0x11),\n+        WILL_DELAY_INTERVAL(0x18),\n+        MAXIMUM_PACKET_SIZE(0x27),\n+\n+        // Variable Byte Integer\n+        SUBSCRIPTION_IDENTIFIER(0x0B),\n+\n+        // UTF-8 Encoded String properties\n+        CONTENT_TYPE(0x03),\n+        RESPONSE_TOPIC(0x08),\n+        ASSIGNED_CLIENT_IDENTIFIER(0x12),\n+        AUTHENTICATION_METHOD(0x15),\n+        RESPONSE_INFORMATION(0x1A),\n+        SERVER_REFERENCE(0x1C),\n+        REASON_STRING(0x1F),\n+        USER_PROPERTY(0x26),\n+\n+        // Binary Data\n+        CORRELATION_DATA(0x09),\n+        AUTHENTICATION_DATA(0x16);\n+\n+        private final int value;\n+\n+        MqttPropertyType(int value) {\n+            this.value = value;\n+        }\n+\n+        public int value() {\n+            return value;\n+        }\n+\n+        public static MqttPropertyType valueOf(int type) {\n+            for (MqttPropertyType t : values()) {\n+                if (t.value == type) {\n+                    return t;\n+                }\n+            }\n+            throw new IllegalArgumentException(\"unknown property type: \" + type);\n+        }\n+    }\n+\n+    public static final MqttProperties NO_PROPERTIES = new MqttProperties();\n+\n+    public static MqttProperties notNull(MqttProperties properties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a7360c49f19dc60ba8e908ca1d5707cb78b918"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2MjMyMw==", "bodyText": "ah I see...  Plese also make it clear via java docs that the given values are copied and so the List reference is not stored. You may even use Collection<StringPair> or Iterable<StringPair>", "url": "https://github.com/netty/netty/pull/10483#discussion_r475362323", "createdAt": "2020-08-24T06:09:58Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "diffHunk": "@@ -0,0 +1,209 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.mqtt;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.List;\n+import java.util.ArrayList;\n+\n+/**\n+ * MQTT Properties container\n+ * */\n+public final class MqttProperties {\n+\n+    public enum MqttPropertyType {\n+        // single byte properties\n+        PAYLOAD_FORMAT_INDICATOR(0x01),\n+        REQUEST_PROBLEM_INFORMATION(0x17),\n+        REQUEST_RESPONSE_INFORMATION(0x19),\n+        MAXIMUM_QOS(0x24),\n+        RETAIN_AVAILABLE(0x25),\n+        WILDCARD_SUBSCRIPTION_AVAILABLE(0x28),\n+        SUBSCRIPTION_IDENTIFIER_AVAILABLE(0x29),\n+        SHARED_SUBSCRIPTION_AVAILABLE(0x2A),\n+\n+        // two bytes properties\n+        SERVER_KEEP_ALIVE(0x13),\n+        RECEIVE_MAXIMUM(0x21),\n+        TOPIC_ALIAS_MAXIMUM(0x22),\n+        TOPIC_ALIAS(0x23),\n+\n+        // four bytes properties\n+        PUBLICATION_EXPIRY_INTERVAL(0x02),\n+        SESSION_EXPIRY_INTERVAL(0x11),\n+        WILL_DELAY_INTERVAL(0x18),\n+        MAXIMUM_PACKET_SIZE(0x27),\n+\n+        // Variable Byte Integer\n+        SUBSCRIPTION_IDENTIFIER(0x0B),\n+\n+        // UTF-8 Encoded String properties\n+        CONTENT_TYPE(0x03),\n+        RESPONSE_TOPIC(0x08),\n+        ASSIGNED_CLIENT_IDENTIFIER(0x12),\n+        AUTHENTICATION_METHOD(0x15),\n+        RESPONSE_INFORMATION(0x1A),\n+        SERVER_REFERENCE(0x1C),\n+        REASON_STRING(0x1F),\n+        USER_PROPERTY(0x26),\n+\n+        // Binary Data\n+        CORRELATION_DATA(0x09),\n+        AUTHENTICATION_DATA(0x16);\n+\n+        private final int value;\n+\n+        MqttPropertyType(int value) {\n+            this.value = value;\n+        }\n+\n+        public int value() {\n+            return value;\n+        }\n+\n+        public static MqttPropertyType valueOf(int type) {\n+            for (MqttPropertyType t : values()) {\n+                if (t.value == type) {\n+                    return t;\n+                }\n+            }\n+            throw new IllegalArgumentException(\"unknown property type: \" + type);\n+        }\n+    }\n+\n+    public static final MqttProperties NO_PROPERTIES = new MqttProperties();\n+\n+    public abstract static class MqttProperty<T> {\n+        final T value;\n+        final int propertyId;\n+\n+        public MqttProperty(int propertyId, T value) {\n+            this.propertyId = propertyId;\n+            this.value = value;\n+        }\n+    }\n+\n+    public static final class IntegerProperty extends MqttProperty<Integer> {\n+\n+        public IntegerProperty(int propertyId, Integer value) {\n+            super(propertyId, value);\n+        }\n+    }\n+\n+    public static final class StringProperty extends MqttProperty<String> {\n+\n+        public StringProperty(int propertyId, String value) {\n+            super(propertyId, value);\n+        }\n+    }\n+\n+    public static final class StringPair {\n+        public final String key;\n+        public final String value;\n+\n+        public StringPair(String key, String value) {\n+            this.key = key;\n+            this.value = value;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return key.hashCode() + 31 * value.hashCode();\n+        }\n+\n+        @Override\n+        public boolean equals(Object obj) {\n+            if (this == obj) {\n+                return true;\n+            }\n+            if (obj == null || getClass() != obj.getClass()) {\n+                return false;\n+            }\n+            StringPair that = (StringPair) obj;\n+\n+            return that.key.equals(this.key) && that.value.equals(this.value);\n+        }\n+    }\n+\n+    //User properties are the only properties that may be included multiple times and\n+    //are the only properties where ordering is required. Therefore, they need a special handling\n+    public static final class UserProperties extends MqttProperty<List<StringPair>> {\n+        public UserProperties() {\n+            super(MqttPropertyType.USER_PROPERTY.value, new ArrayList<StringPair>());\n+        }\n+\n+        public UserProperties(List<StringPair> values) {\n+            this();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjg5NzM4Nw=="}, "originalCommit": {"oid": "95eb759b41c870c90d0165d2d6b323d2457ed143"}, "originalPosition": 151}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2MzMyNg==", "bodyText": "So after inspecting the code it seems like this is problematic. The static field here is still mutable which means users can store stuff in there etc. We need to make this instance immutable as otherwise bad things can happen", "url": "https://github.com/netty/netty/pull/10483#discussion_r475363326", "createdAt": "2020-08-24T06:13:16Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "diffHunk": "@@ -0,0 +1,216 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.mqtt;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.List;\n+import java.util.ArrayList;\n+\n+/**\n+ * MQTT Properties container\n+ * */\n+public final class MqttProperties {\n+\n+    public enum MqttPropertyType {\n+        // single byte properties\n+        PAYLOAD_FORMAT_INDICATOR(0x01),\n+        REQUEST_PROBLEM_INFORMATION(0x17),\n+        REQUEST_RESPONSE_INFORMATION(0x19),\n+        MAXIMUM_QOS(0x24),\n+        RETAIN_AVAILABLE(0x25),\n+        WILDCARD_SUBSCRIPTION_AVAILABLE(0x28),\n+        SUBSCRIPTION_IDENTIFIER_AVAILABLE(0x29),\n+        SHARED_SUBSCRIPTION_AVAILABLE(0x2A),\n+\n+        // two bytes properties\n+        SERVER_KEEP_ALIVE(0x13),\n+        RECEIVE_MAXIMUM(0x21),\n+        TOPIC_ALIAS_MAXIMUM(0x22),\n+        TOPIC_ALIAS(0x23),\n+\n+        // four bytes properties\n+        PUBLICATION_EXPIRY_INTERVAL(0x02),\n+        SESSION_EXPIRY_INTERVAL(0x11),\n+        WILL_DELAY_INTERVAL(0x18),\n+        MAXIMUM_PACKET_SIZE(0x27),\n+\n+        // Variable Byte Integer\n+        SUBSCRIPTION_IDENTIFIER(0x0B),\n+\n+        // UTF-8 Encoded String properties\n+        CONTENT_TYPE(0x03),\n+        RESPONSE_TOPIC(0x08),\n+        ASSIGNED_CLIENT_IDENTIFIER(0x12),\n+        AUTHENTICATION_METHOD(0x15),\n+        RESPONSE_INFORMATION(0x1A),\n+        SERVER_REFERENCE(0x1C),\n+        REASON_STRING(0x1F),\n+        USER_PROPERTY(0x26),\n+\n+        // Binary Data\n+        CORRELATION_DATA(0x09),\n+        AUTHENTICATION_DATA(0x16);\n+\n+        private final int value;\n+\n+        MqttPropertyType(int value) {\n+            this.value = value;\n+        }\n+\n+        public int value() {\n+            return value;\n+        }\n+\n+        public static MqttPropertyType valueOf(int type) {\n+            for (MqttPropertyType t : values()) {\n+                if (t.value == type) {\n+                    return t;\n+                }\n+            }\n+            throw new IllegalArgumentException(\"unknown property type: \" + type);\n+        }\n+    }\n+\n+    public static final MqttProperties NO_PROPERTIES = new MqttProperties();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a7360c49f19dc60ba8e908ca1d5707cb78b918"}, "originalPosition": 89}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2MzgzOA==", "bodyText": "nit: you can remove the else", "url": "https://github.com/netty/netty/pull/10483#discussion_r475363838", "createdAt": "2020-08-24T06:14:42Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttUnsubAckMessage.java", "diffHunk": "@@ -21,12 +21,43 @@\n  */\n public final class MqttUnsubAckMessage extends MqttMessage {\n \n-    public MqttUnsubAckMessage(MqttFixedHeader mqttFixedHeader, MqttMessageIdVariableHeader variableHeader) {\n-        super(mqttFixedHeader, variableHeader, null);\n+    public MqttUnsubAckMessage(MqttFixedHeader mqttFixedHeader,\n+                               MqttMessageIdAndPropertiesVariableHeader variableHeader,\n+                               MqttUnsubAckPayload payload) {\n+        super(mqttFixedHeader, variableHeader, payload);\n+    }\n+\n+    public MqttUnsubAckMessage(MqttFixedHeader mqttFixedHeader,\n+                               MqttMessageIdVariableHeader variableHeader,\n+                               MqttUnsubAckPayload payload) {\n+        this(mqttFixedHeader, fallbackVariableHeader(variableHeader), payload);\n+    }\n+    public MqttUnsubAckMessage(MqttFixedHeader mqttFixedHeader,\n+                               MqttMessageIdVariableHeader variableHeader) {\n+        this(mqttFixedHeader, variableHeader, null);\n+    }\n+\n+    private static MqttMessageIdAndPropertiesVariableHeader fallbackVariableHeader(\n+            MqttMessageIdVariableHeader variableHeader) {\n+        if (variableHeader instanceof MqttMessageIdAndPropertiesVariableHeader) {\n+            return (MqttMessageIdAndPropertiesVariableHeader) variableHeader;\n+        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a7360c49f19dc60ba8e908ca1d5707cb78b918"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2NDAyNQ==", "bodyText": "nit: you can use ObjectUtils.checkNotNull(...)", "url": "https://github.com/netty/netty/pull/10483#discussion_r475364025", "createdAt": "2020-08-24T06:15:08Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttUnsubAckPayload.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.mqtt;\n+\n+import io.netty.util.internal.StringUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Payload for MQTT unsuback message as in V5.\n+ */\n+public final class MqttUnsubAckPayload {\n+\n+    private final List<Short> unsubscribeReasonCodes;\n+\n+    public MqttUnsubAckPayload(short... unsubscribeReasonCodes) {\n+        if (unsubscribeReasonCodes == null) {\n+            throw new NullPointerException(\"unsubscribeReasonCodes\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a7360c49f19dc60ba8e908ca1d5707cb78b918"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTM2NDEyNg==", "bodyText": "nit: you can use ObjectUtils.checkNotNull(...)", "url": "https://github.com/netty/netty/pull/10483#discussion_r475364126", "createdAt": "2020-08-24T06:15:25Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttUnsubAckPayload.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.mqtt;\n+\n+import io.netty.util.internal.StringUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Payload for MQTT unsuback message as in V5.\n+ */\n+public final class MqttUnsubAckPayload {\n+\n+    private final List<Short> unsubscribeReasonCodes;\n+\n+    public MqttUnsubAckPayload(short... unsubscribeReasonCodes) {\n+        if (unsubscribeReasonCodes == null) {\n+            throw new NullPointerException(\"unsubscribeReasonCodes\");\n+        }\n+\n+        List<Short> list = new ArrayList<Short>(unsubscribeReasonCodes.length);\n+        for (Short v: unsubscribeReasonCodes) {\n+            list.add(v);\n+        }\n+        this.unsubscribeReasonCodes = Collections.unmodifiableList(list);\n+    }\n+\n+    public MqttUnsubAckPayload(Iterable<Short> unsubscribeReasonCodes) {\n+        if (unsubscribeReasonCodes == null) {\n+            throw new NullPointerException(\"unsubscribeReasonCodes\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a7360c49f19dc60ba8e908ca1d5707cb78b918"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDcyNjQyMzAw", "url": "https://github.com/netty/netty/pull/10483#pullrequestreview-472642300", "createdAt": "2020-08-21T16:50:07Z", "commit": {"oid": "60a7360c49f19dc60ba8e908ca1d5707cb78b918"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMVQxNjo1MDowN1rOHE0SDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwOTo0MDoxMFrOHFcrEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxMjk0Mw==", "bodyText": "No need to call static methods in the instance. Just call them directly.", "url": "https://github.com/netty/netty/pull/10483#discussion_r474812943", "createdAt": "2020-08-21T16:50:07Z", "author": {"login": "chrisvest"}, "path": "codec-mqtt/src/test/java/io/netty/handler/codec/mqtt/MqttCodecTest.java", "diffHunk": "@@ -67,12 +80,14 @@\n     public void setup() {\n         MockitoAnnotations.initMocks(this);\n         when(ctx.channel()).thenReturn(channel);\n+        when(ctx.alloc()).thenReturn(ALLOCATOR);\n+        when(channel.attr(MqttCodecUtil.MQTT_VERSION_KEY)).thenReturn(versionAttrMock);\n     }\n \n     @Test\n     public void testConnectMessageForMqtt31() throws Exception {\n         final MqttConnectMessage message = createConnectMessage(MqttVersion.MQTT_3_1);\n-        ByteBuf byteBuf = MqttEncoder.doEncode(ALLOCATOR, message);\n+        ByteBuf byteBuf = MqttEncoder.INSTANCE.doEncode(ctx, message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a7360c49f19dc60ba8e908ca1d5707cb78b918"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDgxNjc5OA==", "bodyText": "The new exception makes sense, but I wonder if it's an API change. I don't see a lot of docs around this, so maybe it's unspecified.", "url": "https://github.com/netty/netty/pull/10483#discussion_r474816798", "createdAt": "2020-08-21T16:57:42Z", "author": {"login": "chrisvest"}, "path": "codec-mqtt/src/test/java/io/netty/handler/codec/mqtt/MqttCodecTest.java", "diffHunk": "@@ -295,8 +316,8 @@ public void testUnknownMessageType() throws Exception {\n             final MqttMessage decodedMessage = (MqttMessage) out.get(0);\n             assertTrue(decodedMessage.decoderResult().isFailure());\n             Throwable cause = decodedMessage.decoderResult().cause();\n-            assertTrue(cause instanceof IllegalArgumentException);\n-            assertEquals(\"unknown message type: 15\", cause.getMessage());\n+            assertTrue(cause instanceof DecoderException);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a7360c49f19dc60ba8e908ca1d5707cb78b918"}, "originalPosition": 175}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ1MzgzMA==", "bodyText": "Is it safe to rely on \"default\" encoding for these tests?", "url": "https://github.com/netty/netty/pull/10483#discussion_r475453830", "createdAt": "2020-08-24T09:17:31Z", "author": {"login": "chrisvest"}, "path": "codec-mqtt/src/test/java/io/netty/handler/codec/mqtt/MqttCodecTest.java", "diffHunk": "@@ -500,36 +801,57 @@ private static MqttMessage createMessageWithFixedHeaderAndMessageIdVariableHeade\n     }\n \n     private static MqttConnectMessage createConnectMessage(MqttVersion mqttVersion) {\n-        return createConnectMessage(mqttVersion, USER_NAME, PASSWORD);\n+        return createConnectMessage(mqttVersion,\n+                USER_NAME,\n+                PASSWORD,\n+                MqttProperties.NO_PROPERTIES,\n+                MqttProperties.NO_PROPERTIES);\n     }\n \n-    private static MqttConnectMessage createConnectMessage(MqttVersion mqttVersion, String username, String password) {\n+    private static MqttConnectMessage createConnectMessage(MqttVersion mqttVersion,\n+                                                           String username,\n+                                                           String password,\n+                                                           MqttProperties properties,\n+                                                           MqttProperties willProperties) {\n         return MqttMessageBuilders.connect()\n                 .clientId(CLIENT_ID)\n                 .protocolVersion(mqttVersion)\n                 .username(username)\n-                .password(password)\n+                .password(password.getBytes())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a7360c49f19dc60ba8e908ca1d5707cb78b918"}, "originalPosition": 565}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ1NTg5OQ==", "bodyText": "Can we keep both asserts, to cover the API surface?", "url": "https://github.com/netty/netty/pull/10483#discussion_r475455899", "createdAt": "2020-08-24T09:20:56Z", "author": {"login": "chrisvest"}, "path": "codec-mqtt/src/test/java/io/netty/handler/codec/mqtt/MqttCodecTest.java", "diffHunk": "@@ -664,9 +1002,9 @@ private static void validateTopicSubscription(\n             MqttTopicSubscription actual) {\n         assertEquals(\"MqttTopicSubscription TopicName mismatch \", expected.topicName(), actual.topicName());\n         assertEquals(\n-                \"MqttTopicSubscription Qos mismatch \",\n-                expected.qualityOfService(),\n-                actual.qualityOfService());\n+                \"MqttTopicSubscription options mismatch \",\n+                expected.option(),\n+                actual.option());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a7360c49f19dc60ba8e908ca1d5707cb78b918"}, "originalPosition": 667}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ2MDEzOQ==", "bodyText": "Please update the class javadoc to indicate that we also decode MQTT 5.0.", "url": "https://github.com/netty/netty/pull/10483#discussion_r475460139", "createdAt": "2020-08-24T09:25:38Z", "author": {"login": "chrisvest"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java", "diffHunk": "@@ -227,7 +240,7 @@ private static MqttFixedHeader decodeFixedHeader(ByteBuf buffer) {\n         final int willQos = (b1 & 0x18) >> 3;\n         final boolean willFlag = (b1 & 0x04) == 0x04;\n         final boolean cleanSession = (b1 & 0x02) == 0x02;\n-        if (mqttVersion == MqttVersion.MQTT_3_1_1) {\n+        if (version == MqttVersion.MQTT_3_1_1 || version == MqttVersion.MQTT_5) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a7360c49f19dc60ba8e908ca1d5707cb78b918"}, "originalPosition": 134}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ3NDcwNw==", "bodyText": "Please update the class javadoc to indicate that we can also encode messages using MQTT version 5.0.", "url": "https://github.com/netty/netty/pull/10483#discussion_r475474707", "createdAt": "2020-08-24T09:40:10Z", "author": {"login": "chrisvest"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -102,10 +111,11 @@ private static ByteBuf encodeConnectMessage(\n         MqttConnectPayload payload = message.payload();\n         MqttVersion mqttVersion = MqttVersion.fromProtocolNameAndLevel(variableHeader.name(),\n                 (byte) variableHeader.version());\n+        MqttCodecUtil.setMqttVersion(ctx, mqttVersion);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60a7360c49f19dc60ba8e908ca1d5707cb78b918"}, "originalPosition": 95}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "60a7360c49f19dc60ba8e908ca1d5707cb78b918", "author": {"user": {"login": "paul-lysak", "name": "Paul Lysak"}}, "url": "https://github.com/netty/netty/commit/60a7360c49f19dc60ba8e908ca1d5707cb78b918", "committedDate": "2020-08-20T07:12:43Z", "message": "MQTT5 support for netty-codec-mqtt\n\nMotivation:\n\n MQTT Specification version 5 was released over a year ago,\n netty-codec-mqtt should be changed to support it.\n\nModifications:\n\n  Added more message and header types in `io.netty.handler.codec.mqtt`\n  package in `netty-coded-mqtt` subproject,\n  changed `MqttEncoder` and `MqttDecoder` to handle them properly,\n  added attribute `NETTY_CODEC_MQTT_VERSION` to track protocol version\n\nResult:\n\n  `netty-coded-mqtt` supports both MQTT5 and MQTT3 now."}, "afterCommit": {"oid": "6908317339952efbb8397bd93359bff7ff597245", "author": {"user": {"login": "paul-lysak", "name": "Paul Lysak"}}, "url": "https://github.com/netty/netty/commit/6908317339952efbb8397bd93359bff7ff597245", "committedDate": "2020-08-25T07:28:03Z", "message": "MQTT5 support for netty-codec-mqtt\n\nMotivation:\n\n MQTT Specification version 5 was released over a year ago,\n netty-codec-mqtt should be changed to support it.\n\nModifications:\n\n  Added more message and header types in `io.netty.handler.codec.mqtt`\n  package in `netty-coded-mqtt` subproject,\n  changed `MqttEncoder` and `MqttDecoder` to handle them properly,\n  added attribute `NETTY_CODEC_MQTT_VERSION` to track protocol version\n\nResult:\n\n  `netty-coded-mqtt` supports both MQTT5 and MQTT3 now."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6908317339952efbb8397bd93359bff7ff597245", "author": {"user": {"login": "paul-lysak", "name": "Paul Lysak"}}, "url": "https://github.com/netty/netty/commit/6908317339952efbb8397bd93359bff7ff597245", "committedDate": "2020-08-25T07:28:03Z", "message": "MQTT5 support for netty-codec-mqtt\n\nMotivation:\n\n MQTT Specification version 5 was released over a year ago,\n netty-codec-mqtt should be changed to support it.\n\nModifications:\n\n  Added more message and header types in `io.netty.handler.codec.mqtt`\n  package in `netty-coded-mqtt` subproject,\n  changed `MqttEncoder` and `MqttDecoder` to handle them properly,\n  added attribute `NETTY_CODEC_MQTT_VERSION` to track protocol version\n\nResult:\n\n  `netty-coded-mqtt` supports both MQTT5 and MQTT3 now."}, "afterCommit": {"oid": "6652e05cd5f625287ae1e2fea358ea4a03dfca02", "author": {"user": {"login": "paul-lysak", "name": "Paul Lysak"}}, "url": "https://github.com/netty/netty/commit/6652e05cd5f625287ae1e2fea358ea4a03dfca02", "committedDate": "2020-08-25T08:22:19Z", "message": "MQTT5 support for netty-codec-mqtt\n\nMotivation:\n\n MQTT Specification version 5 was released over a year ago,\n netty-codec-mqtt should be changed to support it.\n\nModifications:\n\n  Added more message and header types in `io.netty.handler.codec.mqtt`\n  package in `netty-coded-mqtt` subproject,\n  changed `MqttEncoder` and `MqttDecoder` to handle them properly,\n  added attribute `NETTY_CODEC_MQTT_VERSION` to track protocol version\n\nResult:\n\n  `netty-coded-mqtt` supports both MQTT5 and MQTT3 now."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6652e05cd5f625287ae1e2fea358ea4a03dfca02", "author": {"user": {"login": "paul-lysak", "name": "Paul Lysak"}}, "url": "https://github.com/netty/netty/commit/6652e05cd5f625287ae1e2fea358ea4a03dfca02", "committedDate": "2020-08-25T08:22:19Z", "message": "MQTT5 support for netty-codec-mqtt\n\nMotivation:\n\n MQTT Specification version 5 was released over a year ago,\n netty-codec-mqtt should be changed to support it.\n\nModifications:\n\n  Added more message and header types in `io.netty.handler.codec.mqtt`\n  package in `netty-coded-mqtt` subproject,\n  changed `MqttEncoder` and `MqttDecoder` to handle them properly,\n  added attribute `NETTY_CODEC_MQTT_VERSION` to track protocol version\n\nResult:\n\n  `netty-coded-mqtt` supports both MQTT5 and MQTT3 now."}, "afterCommit": {"oid": "f577a8d28bd469a612635813d7b743680e6c3a08", "author": {"user": {"login": "paul-lysak", "name": "Paul Lysak"}}, "url": "https://github.com/netty/netty/commit/f577a8d28bd469a612635813d7b743680e6c3a08", "committedDate": "2020-08-25T08:59:25Z", "message": "MQTT5 support for netty-codec-mqtt\n\nMotivation:\n\n MQTT Specification version 5 was released over a year ago,\n netty-codec-mqtt should be changed to support it.\n\nModifications:\n\n  Added more message and header types in `io.netty.handler.codec.mqtt`\n  package in `netty-coded-mqtt` subproject,\n  changed `MqttEncoder` and `MqttDecoder` to handle them properly,\n  added attribute `NETTY_CODEC_MQTT_VERSION` to track protocol version\n\nResult:\n\n  `netty-coded-mqtt` supports both MQTT5 and MQTT3 now."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f577a8d28bd469a612635813d7b743680e6c3a08", "author": {"user": {"login": "paul-lysak", "name": "Paul Lysak"}}, "url": "https://github.com/netty/netty/commit/f577a8d28bd469a612635813d7b743680e6c3a08", "committedDate": "2020-08-25T08:59:25Z", "message": "MQTT5 support for netty-codec-mqtt\n\nMotivation:\n\n MQTT Specification version 5 was released over a year ago,\n netty-codec-mqtt should be changed to support it.\n\nModifications:\n\n  Added more message and header types in `io.netty.handler.codec.mqtt`\n  package in `netty-coded-mqtt` subproject,\n  changed `MqttEncoder` and `MqttDecoder` to handle them properly,\n  added attribute `NETTY_CODEC_MQTT_VERSION` to track protocol version\n\nResult:\n\n  `netty-coded-mqtt` supports both MQTT5 and MQTT3 now."}, "afterCommit": {"oid": "42794df42a9cffcd5610e527213f7b610b087a47", "author": {"user": {"login": "paul-lysak", "name": "Paul Lysak"}}, "url": "https://github.com/netty/netty/commit/42794df42a9cffcd5610e527213f7b610b087a47", "committedDate": "2020-08-26T07:25:36Z", "message": "MQTT5 support for netty-codec-mqtt\n\nMotivation:\n\n MQTT Specification version 5 was released over a year ago,\n netty-codec-mqtt should be changed to support it.\n\nModifications:\n\n  Added more message and header types in `io.netty.handler.codec.mqtt`\n  package in `netty-coded-mqtt` subproject,\n  changed `MqttEncoder` and `MqttDecoder` to handle them properly,\n  added attribute `NETTY_CODEC_MQTT_VERSION` to track protocol version\n\nResult:\n\n  `netty-coded-mqtt` supports both MQTT5 and MQTT3 now."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1MzQ5NzM0", "url": "https://github.com/netty/netty/pull/10483#pullrequestreview-475349734", "createdAt": "2020-08-26T10:16:32Z", "commit": {"oid": "42794df42a9cffcd5610e527213f7b610b087a47"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDoxNjozMlrOHHFjQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxMDoxNjozMlrOHHFjQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzE5MzAyNA==", "bodyText": "There's a lot of integers in this file, 1, 2, 4, 0x04, 0x08, 0x01, etc. Would be nice if they were named constants.", "url": "https://github.com/netty/netty/pull/10483#discussion_r477193024", "createdAt": "2020-08-26T10:16:32Z", "author": {"login": "chrisvest"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttEncoder.java", "diffHunk": "@@ -196,138 +230,270 @@ private static int getConnVariableHeaderFlag(MqttConnectVariableHeader variableH\n     }\n \n     private static ByteBuf encodeConnAckMessage(\n-            ByteBufAllocator byteBufAllocator,\n+            ChannelHandlerContext ctx,\n             MqttConnAckMessage message) {\n-        ByteBuf buf = byteBufAllocator.buffer(4);\n-        buf.writeByte(getFixedHeaderByte1(message.fixedHeader()));\n-        buf.writeByte(2);\n-        buf.writeByte(message.variableHeader().isSessionPresent() ? 0x01 : 0x00);\n-        buf.writeByte(message.variableHeader().connectReturnCode().byteValue());\n-\n-        return buf;\n+        final MqttVersion mqttVersion = MqttCodecUtil.getMqttVersion(ctx);\n+        ByteBuf propertiesBuf = encodePropertiesIfNeeded(mqttVersion,\n+                ctx.alloc(),\n+                message.variableHeader().properties());\n+\n+        try {\n+            ByteBuf buf = ctx.alloc().buffer(4 + propertiesBuf.readableBytes());\n+            buf.writeByte(getFixedHeaderByte1(message.fixedHeader()));\n+            writeVariableLengthInt(buf, 2 + propertiesBuf.readableBytes());\n+            buf.writeByte(message.variableHeader().isSessionPresent() ? 0x01 : 0x00);\n+            buf.writeByte(message.variableHeader().connectReturnCode().byteValue());\n+            buf.writeBytes(propertiesBuf);\n+            return buf;\n+        } finally {\n+            propertiesBuf.release();\n+        }\n     }\n \n     private static ByteBuf encodeSubscribeMessage(\n-            ByteBufAllocator byteBufAllocator,\n+            ChannelHandlerContext ctx,\n             MqttSubscribeMessage message) {\n-        int variableHeaderBufferSize = 2;\n-        int payloadBufferSize = 0;\n-\n-        MqttFixedHeader mqttFixedHeader = message.fixedHeader();\n-        MqttMessageIdVariableHeader variableHeader = message.variableHeader();\n-        MqttSubscribePayload payload = message.payload();\n-\n-        for (MqttTopicSubscription topic : payload.topicSubscriptions()) {\n-            String topicName = topic.topicName();\n-            byte[] topicNameBytes = encodeStringUtf8(topicName);\n-            payloadBufferSize += 2 + topicNameBytes.length;\n-            payloadBufferSize += 1;\n-        }\n-\n-        int variablePartSize = variableHeaderBufferSize + payloadBufferSize;\n-        int fixedHeaderBufferSize = 1 + getVariableLengthInt(variablePartSize);\n-\n-        ByteBuf buf = byteBufAllocator.buffer(fixedHeaderBufferSize + variablePartSize);\n-        buf.writeByte(getFixedHeaderByte1(mqttFixedHeader));\n-        writeVariableLengthInt(buf, variablePartSize);\n+        MqttVersion mqttVersion = MqttCodecUtil.getMqttVersion(ctx);\n+        ByteBuf propertiesBuf = encodePropertiesIfNeeded(mqttVersion,\n+                ctx.alloc(),\n+                message.idAndPropertiesVariableHeader().properties());\n+\n+        try {\n+            final int variableHeaderBufferSize = 2 + propertiesBuf.readableBytes();\n+            int payloadBufferSize = 0;\n+\n+            MqttFixedHeader mqttFixedHeader = message.fixedHeader();\n+            MqttMessageIdVariableHeader variableHeader = message.variableHeader();\n+            MqttSubscribePayload payload = message.payload();\n+\n+            for (MqttTopicSubscription topic : payload.topicSubscriptions()) {\n+                String topicName = topic.topicName();\n+                byte[] topicNameBytes = encodeStringUtf8(topicName);\n+                payloadBufferSize += 2 + topicNameBytes.length;\n+                payloadBufferSize += 1;\n+            }\n \n-        // Variable Header\n-        int messageId = variableHeader.messageId();\n-        buf.writeShort(messageId);\n+            int variablePartSize = variableHeaderBufferSize + payloadBufferSize;\n+            int fixedHeaderBufferSize = 1 + getVariableLengthInt(variablePartSize);\n+\n+            ByteBuf buf = ctx.alloc().buffer(fixedHeaderBufferSize + variablePartSize);\n+            buf.writeByte(getFixedHeaderByte1(mqttFixedHeader));\n+            writeVariableLengthInt(buf, variablePartSize);\n+\n+            // Variable Header\n+            int messageId = variableHeader.messageId();\n+            buf.writeShort(messageId);\n+            buf.writeBytes(propertiesBuf);\n+\n+            // Payload\n+            for (MqttTopicSubscription topic : payload.topicSubscriptions()) {\n+                writeUTF8String(buf, topic.topicName());\n+                final MqttSubscriptionOption option = topic.option();\n+\n+                int optionEncoded = option.retainHandling().value() << 4;\n+                if (option.isRetainAsPublished()) {\n+                    optionEncoded |= 0x08;\n+                }\n+                if (option.isNoLocal()) {\n+                    optionEncoded |= 0x04;\n+                }\n+                optionEncoded |= option.qos().value();\n+\n+                buf.writeByte(optionEncoded);\n+            }\n \n-        // Payload\n-        for (MqttTopicSubscription topic : payload.topicSubscriptions()) {\n-            String topicName = topic.topicName();\n-            byte[] topicNameBytes = encodeStringUtf8(topicName);\n-            buf.writeShort(topicNameBytes.length);\n-            buf.writeBytes(topicNameBytes, 0, topicNameBytes.length);\n-            buf.writeByte(topic.qualityOfService().value());\n+            return buf;\n+        } finally {\n+            propertiesBuf.release();\n         }\n-\n-        return buf;\n     }\n \n     private static ByteBuf encodeUnsubscribeMessage(\n-            ByteBufAllocator byteBufAllocator,\n+            ChannelHandlerContext ctx,\n             MqttUnsubscribeMessage message) {\n-        int variableHeaderBufferSize = 2;\n-        int payloadBufferSize = 0;\n-\n-        MqttFixedHeader mqttFixedHeader = message.fixedHeader();\n-        MqttMessageIdVariableHeader variableHeader = message.variableHeader();\n-        MqttUnsubscribePayload payload = message.payload();\n+        MqttVersion mqttVersion = MqttCodecUtil.getMqttVersion(ctx);\n+        ByteBuf propertiesBuf = encodePropertiesIfNeeded(mqttVersion,\n+                ctx.alloc(),\n+                message.idAndPropertiesVariableHeader().properties());\n+\n+        try {\n+            final int variableHeaderBufferSize = 2 + propertiesBuf.readableBytes();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42794df42a9cffcd5610e527213f7b610b087a47"}, "originalPosition": 347}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc1NjUzOTA4", "url": "https://github.com/netty/netty/pull/10483#pullrequestreview-475653908", "createdAt": "2020-08-26T16:22:11Z", "commit": {"oid": "42794df42a9cffcd5610e527213f7b610b087a47"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjoyMjoxMVrOHHT2jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNlQxNjoyMzowN1rOHHT4qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQyNzM0MQ==", "bodyText": "Remove this getter?", "url": "https://github.com/netty/netty/pull/10483#discussion_r477427341", "createdAt": "2020-08-26T16:22:11Z", "author": {"login": "johnou"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttSubscriptionOption.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.mqtt;\n+\n+/**\n+ * Model the SubscriptionOption used in Subscribe MQTT v5 packet\n+ */\n+public final class MqttSubscriptionOption {\n+\n+    enum RetainedHandlingPolicy {\n+        SEND_AT_SUBSCRIBE(0),\n+        SEND_AT_SUBSCRIBE_IF_NOT_YET_EXISTS(1),\n+        DONT_SEND_AT_SUBSCRIBE(2);\n+\n+        private final int value;\n+\n+        RetainedHandlingPolicy(int value) {\n+            this.value = value;\n+        }\n+\n+        public int value() {\n+            return value;\n+        }\n+\n+        public static RetainedHandlingPolicy valueOf(int value) {\n+            for (RetainedHandlingPolicy q: values()) {\n+                if (q.value == value) {\n+                    return q;\n+                }\n+            }\n+            throw new IllegalArgumentException(\"invalid RetainedHandlingPolicy: \" + value);\n+        }\n+    }\n+\n+    private final MqttQoS qos;\n+    private final boolean noLocal;\n+    private final boolean retainAsPublished;\n+    private final RetainedHandlingPolicy retainHandling;\n+\n+    public static MqttSubscriptionOption onlyFromQos(MqttQoS qos) {\n+        return new MqttSubscriptionOption(qos, false, false, RetainedHandlingPolicy.SEND_AT_SUBSCRIBE);\n+    }\n+\n+    public MqttSubscriptionOption(MqttQoS qos,\n+                                  boolean noLocal,\n+                                  boolean retainAsPublished,\n+                                  RetainedHandlingPolicy retainHandling) {\n+        this.qos = qos;\n+        this.noLocal = noLocal;\n+        this.retainAsPublished = retainAsPublished;\n+        this.retainHandling = retainHandling;\n+    }\n+\n+    public MqttQoS qos() {\n+        return qos;\n+    }\n+\n+    public MqttQoS getQos() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42794df42a9cffcd5610e527213f7b610b087a47"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NzQyNzg4Mg==", "bodyText": "Break or continue?", "url": "https://github.com/netty/netty/pull/10483#discussion_r477427882", "createdAt": "2020-08-26T16:23:07Z", "author": {"login": "johnou"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttUnsubAckPayload.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.mqtt;\n+\n+import io.netty.util.internal.ObjectUtil;\n+import io.netty.util.internal.StringUtil;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Payload for MQTT unsuback message as in V5.\n+ */\n+public final class MqttUnsubAckPayload {\n+\n+    private final List<Short> unsubscribeReasonCodes;\n+\n+    public MqttUnsubAckPayload(short... unsubscribeReasonCodes) {\n+        ObjectUtil.checkNotNull(unsubscribeReasonCodes, \"unsubscribeReasonCodes\");\n+\n+        List<Short> list = new ArrayList<Short>(unsubscribeReasonCodes.length);\n+        for (Short v: unsubscribeReasonCodes) {\n+            list.add(v);\n+        }\n+        this.unsubscribeReasonCodes = Collections.unmodifiableList(list);\n+    }\n+\n+    public MqttUnsubAckPayload(Iterable<Short> unsubscribeReasonCodes) {\n+        ObjectUtil.checkNotNull(unsubscribeReasonCodes, \"unsubscribeReasonCodes\");\n+\n+        List<Short> list = new ArrayList<Short>();\n+        for (Short v: unsubscribeReasonCodes) {\n+            if (v == null) {\n+                break;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42794df42a9cffcd5610e527213f7b610b087a47"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc2NDU5ODE2", "url": "https://github.com/netty/netty/pull/10483#pullrequestreview-476459816", "createdAt": "2020-08-27T07:35:52Z", "commit": {"oid": "42794df42a9cffcd5610e527213f7b610b087a47"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNzozNTo1MlrOHIEDdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yN1QwNzozNTo1MlrOHIEDdw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3ODIxNzA3OQ==", "bodyText": "Given nothing was parsed in the past for old mqtt protocol is this change compatible?", "url": "https://github.com/netty/netty/pull/10483#discussion_r478217079", "createdAt": "2020-08-27T07:35:52Z", "author": {"login": "johnou"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java", "diffHunk": "@@ -176,44 +182,54 @@ private static MqttFixedHeader decodeFixedHeader(ByteBuf buffer) {\n      * @param mqttFixedHeader MqttFixedHeader of the same message\n      * @return the variable header\n      */\n-    private static Result<?> decodeVariableHeader(ByteBuf buffer, MqttFixedHeader mqttFixedHeader) {\n+    private Result<?> decodeVariableHeader(ChannelHandlerContext ctx, ByteBuf buffer, MqttFixedHeader mqttFixedHeader) {\n         switch (mqttFixedHeader.messageType()) {\n             case CONNECT:\n-                return decodeConnectionVariableHeader(buffer);\n+                return decodeConnectionVariableHeader(ctx, buffer);\n \n             case CONNACK:\n-                return decodeConnAckVariableHeader(buffer);\n+                return decodeConnAckVariableHeader(ctx, buffer);\n \n-            case SUBSCRIBE:\n             case UNSUBSCRIBE:\n+            case SUBSCRIBE:\n             case SUBACK:\n             case UNSUBACK:\n+                return decodeMessageIdAndPropertiesVariableHeader(ctx, buffer);\n+\n             case PUBACK:\n             case PUBREC:\n             case PUBCOMP:\n             case PUBREL:\n-                return decodeMessageIdVariableHeader(buffer);\n+                return decodePubReplyMessage(buffer);\n \n             case PUBLISH:\n-                return decodePublishVariableHeader(buffer, mqttFixedHeader);\n+                return decodePublishVariableHeader(ctx, buffer, mqttFixedHeader);\n+\n+            case DISCONNECT:\n+            case AUTH:\n+                return decodeReasonCodeAndPropertiesVariableHeader(buffer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42794df42a9cffcd5610e527213f7b610b087a47"}, "originalPosition": 109}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9af3e57fb557a3c32c83a2ecf84d5684a83b30cc", "author": {"user": {"login": "paul-lysak", "name": "Paul Lysak"}}, "url": "https://github.com/netty/netty/commit/9af3e57fb557a3c32c83a2ecf84d5684a83b30cc", "committedDate": "2020-08-27T07:55:37Z", "message": "MQTT5 support for netty-codec-mqtt\n\nMotivation:\n\n MQTT Specification version 5 was released over a year ago,\n netty-codec-mqtt should be changed to support it.\n\nModifications:\n\n  Added more message and header types in `io.netty.handler.codec.mqtt`\n  package in `netty-coded-mqtt` subproject,\n  changed `MqttEncoder` and `MqttDecoder` to handle them properly,\n  added attribute `NETTY_CODEC_MQTT_VERSION` to track protocol version\n\nResult:\n\n  `netty-coded-mqtt` supports both MQTT5 and MQTT3 now."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "42794df42a9cffcd5610e527213f7b610b087a47", "author": {"user": {"login": "paul-lysak", "name": "Paul Lysak"}}, "url": "https://github.com/netty/netty/commit/42794df42a9cffcd5610e527213f7b610b087a47", "committedDate": "2020-08-26T07:25:36Z", "message": "MQTT5 support for netty-codec-mqtt\n\nMotivation:\n\n MQTT Specification version 5 was released over a year ago,\n netty-codec-mqtt should be changed to support it.\n\nModifications:\n\n  Added more message and header types in `io.netty.handler.codec.mqtt`\n  package in `netty-coded-mqtt` subproject,\n  changed `MqttEncoder` and `MqttDecoder` to handle them properly,\n  added attribute `NETTY_CODEC_MQTT_VERSION` to track protocol version\n\nResult:\n\n  `netty-coded-mqtt` supports both MQTT5 and MQTT3 now."}, "afterCommit": {"oid": "9af3e57fb557a3c32c83a2ecf84d5684a83b30cc", "author": {"user": {"login": "paul-lysak", "name": "Paul Lysak"}}, "url": "https://github.com/netty/netty/commit/9af3e57fb557a3c32c83a2ecf84d5684a83b30cc", "committedDate": "2020-08-27T07:55:37Z", "message": "MQTT5 support for netty-codec-mqtt\n\nMotivation:\n\n MQTT Specification version 5 was released over a year ago,\n netty-codec-mqtt should be changed to support it.\n\nModifications:\n\n  Added more message and header types in `io.netty.handler.codec.mqtt`\n  package in `netty-coded-mqtt` subproject,\n  changed `MqttEncoder` and `MqttDecoder` to handle them properly,\n  added attribute `NETTY_CODEC_MQTT_VERSION` to track protocol version\n\nResult:\n\n  `netty-coded-mqtt` supports both MQTT5 and MQTT3 now."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MTEwMTc0", "url": "https://github.com/netty/netty/pull/10483#pullrequestreview-478110174", "createdAt": "2020-08-29T08:13:24Z", "commit": {"oid": "9af3e57fb557a3c32c83a2ecf84d5684a83b30cc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 201, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}