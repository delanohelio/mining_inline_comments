{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyNDI4NTM1", "number": 10606, "reviewThreads": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjozMzowM1rOEnb8KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTo0NzowMlrOEoJmcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Nzg3Njg5OnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjozMzowM1rOHYBszg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjozMzowM1rOHYBszg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk1NTcyNg==", "bodyText": "Or scheduleWrite* since this is writeComplete0?", "url": "https://github.com/netty/netty/pull/10606#discussion_r494955726", "createdAt": "2020-09-25T12:33:03Z", "author": {"login": "chrisvest"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannel.java", "diffHunk": "@@ -451,43 +474,109 @@ protected void readComplete0(int res) {\n         }\n \n         @Override\n-        protected void scheduleRead0() {\n+        protected int scheduleRead0() {\n             final IOUringRecvByteAllocatorHandle allocHandle = recvBufAllocHandle();\n             ByteBuf byteBuf = allocHandle.allocate(alloc());\n-            IOUringSubmissionQueue submissionQueue = submissionQueue();\n-\n             assert readBuffer == null;\n             readBuffer = byteBuf;\n \n-            recvMsg = !isConnected();\n-            long bufferAddress = byteBuf.memoryAddress();\n-            allocHandle.attemptedBytesRead(byteBuf.writableBytes());\n+            int writable = byteBuf.writableBytes();\n+            allocHandle.attemptedBytesRead(writable);\n+            int datagramSize = config().getMaxDatagramPayloadSize();\n \n-            if (!recvMsg) {\n-                submissionQueue.addRead(socket.intValue(), bufferAddress,\n+            int numDatagram = datagramSize == 0 ? 1 : Math.max(1, byteBuf.writableBytes() / datagramSize);\n+\n+            if (isConnected() && numDatagram <= 1) {\n+                submissionQueue().addRead(socket.intValue(), byteBuf.memoryAddress(),\n                         byteBuf.writerIndex(), byteBuf.capacity());\n+                return 1;\n             } else {\n-                int addrLen = addrLen();\n-                long recvmsgBufferAddr = recvmsgBufferAddr();\n-                long sockaddrAddress = recvmsgBufferAddr + Native.SIZEOF_MSGHDR;\n-                long iovecAddress = sockaddrAddress + addrLen;\n-\n-                Iov.write(iovecAddress, bufferAddress + byteBuf.writerIndex(), byteBuf.writableBytes());\n-                MsgHdr.write(recvmsgBufferAddr, sockaddrAddress, addrLen, iovecAddress, 1);\n-                submissionQueue.addRecvmsg(socket.intValue(), recvmsgBufferAddr);\n+                int scheduled = scheduleRcvmsg(byteBuf, numDatagram, datagramSize);\n+                if (scheduled == 0) {\n+                    // We could not schedule any recvmmsg so we need to release the buffer as there will be no\n+                    // completion event.\n+                    readBuffer = null;\n+                    byteBuf.release();\n+                }\n+                return scheduled;\n             }\n         }\n \n-        private int addrLen() {\n-            return socket.isIpv6() ? Native.SIZEOF_SOCKADDR_IN6 :\n-                    Native.SIZEOF_SOCKADDR_IN;\n+        private int scheduleRcvmsg(ByteBuf byteBuf, int numDatagram, int datagramSize) {\n+            int writable = byteBuf.writableBytes();\n+            IOUringSubmissionQueue submissionQueue = submissionQueue();\n+            long bufferAddress = byteBuf.memoryAddress() + byteBuf.writerIndex();\n+            if (numDatagram <= 1) {\n+                MsgHdrMemory msgHdrMemory = recvmsgHdrs.nextHdr();\n+                if (msgHdrMemory == null) {\n+                    // We can not continue reading before we did not submit the recvmsg(s) and received the results.\n+                    return 0;\n+                }\n+                msgHdrMemory.write(socket, null, bufferAddress, writable);\n+                // We always use idx + 1 here so we can detect if no idx was used by checking if data == 0 in\n+                // readComplete0(...)\n+                submissionQueue.addRecvmsg(socket.intValue(), msgHdrMemory.address(), msgHdrMemory.idx() + 1);\n+                return 1;\n+            } else {\n+                int i = 0;\n+                // Add multiple IORING_OP_RECVMSG to the submission queue. This basically emulates recvmmsg(...)\n+                for (; i < numDatagram && writable >= datagramSize; i++) {\n+                    MsgHdrMemory msgHdrMemory = recvmsgHdrs.nextHdr();\n+                    if (msgHdrMemory == null) {\n+                        // We can not continue reading before we did not submit the recvmsg(s) and received the results.\n+                        break;\n+                    }\n+                    msgHdrMemory.write(socket, null, bufferAddress, datagramSize);\n+                    // We always use idx + 1 here so we can detect if no idx was used by checking if data == 0 in\n+                    // readComplete0(...)\n+                    submissionQueue.addRecvmsg(socket.intValue(), msgHdrMemory.address(), msgHdrMemory.idx() + 1);\n+                    bufferAddress += datagramSize;\n+                    writable -= datagramSize;\n+                }\n+                return i;\n+            }\n         }\n \n         @Override\n-        protected void removeFromOutboundBuffer(ChannelOutboundBuffer outboundBuffer, int bytes) {\n-            // When using Datagram we should consider the message written as long as there were any bytes written.\n-            boolean removed = outboundBuffer.remove();\n-            assert removed;\n+        boolean writeComplete0(int res, int data, int outstanding) {\n+            ChannelOutboundBuffer outboundBuffer = outboundBuffer();\n+            // We need to use idx -1 here to match up the logic in scheduleRead0()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59f30b6b566d770dd1abe6777c3dad32b78da4a"}, "originalPosition": 324}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Nzg5MDkzOnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjozNzoxOVrOHYB1Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxNDozNTowOVrOHYnw3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk1Nzg3MQ==", "bodyText": "Integer division floors. Won't this miss out on a tail message if writableBytes is, say, 1.5 times datagramSize?", "url": "https://github.com/netty/netty/pull/10606#discussion_r494957871", "createdAt": "2020-09-25T12:37:19Z", "author": {"login": "chrisvest"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannel.java", "diffHunk": "@@ -451,43 +474,109 @@ protected void readComplete0(int res) {\n         }\n \n         @Override\n-        protected void scheduleRead0() {\n+        protected int scheduleRead0() {\n             final IOUringRecvByteAllocatorHandle allocHandle = recvBufAllocHandle();\n             ByteBuf byteBuf = allocHandle.allocate(alloc());\n-            IOUringSubmissionQueue submissionQueue = submissionQueue();\n-\n             assert readBuffer == null;\n             readBuffer = byteBuf;\n \n-            recvMsg = !isConnected();\n-            long bufferAddress = byteBuf.memoryAddress();\n-            allocHandle.attemptedBytesRead(byteBuf.writableBytes());\n+            int writable = byteBuf.writableBytes();\n+            allocHandle.attemptedBytesRead(writable);\n+            int datagramSize = config().getMaxDatagramPayloadSize();\n \n-            if (!recvMsg) {\n-                submissionQueue.addRead(socket.intValue(), bufferAddress,\n+            int numDatagram = datagramSize == 0 ? 1 : Math.max(1, byteBuf.writableBytes() / datagramSize);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59f30b6b566d770dd1abe6777c3dad32b78da4a"}, "originalPosition": 253}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU3OTM1Ng==", "bodyText": "thats by \"design\" as I want to ensure the message is datagramSize... Otherwise we may receive truncated messages which may not be expected by the user.", "url": "https://github.com/netty/netty/pull/10606#discussion_r495579356", "createdAt": "2020-09-27T14:35:09Z", "author": {"login": "normanmaurer"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannel.java", "diffHunk": "@@ -451,43 +474,109 @@ protected void readComplete0(int res) {\n         }\n \n         @Override\n-        protected void scheduleRead0() {\n+        protected int scheduleRead0() {\n             final IOUringRecvByteAllocatorHandle allocHandle = recvBufAllocHandle();\n             ByteBuf byteBuf = allocHandle.allocate(alloc());\n-            IOUringSubmissionQueue submissionQueue = submissionQueue();\n-\n             assert readBuffer == null;\n             readBuffer = byteBuf;\n \n-            recvMsg = !isConnected();\n-            long bufferAddress = byteBuf.memoryAddress();\n-            allocHandle.attemptedBytesRead(byteBuf.writableBytes());\n+            int writable = byteBuf.writableBytes();\n+            allocHandle.attemptedBytesRead(writable);\n+            int datagramSize = config().getMaxDatagramPayloadSize();\n \n-            if (!recvMsg) {\n-                submissionQueue.addRead(socket.intValue(), bufferAddress,\n+            int numDatagram = datagramSize == 0 ? 1 : Math.max(1, byteBuf.writableBytes() / datagramSize);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk1Nzg3MQ=="}, "originalCommit": {"oid": "d59f30b6b566d770dd1abe6777c3dad32b78da4a"}, "originalPosition": 253}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Nzk0NDc5OnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMjo1Mjo0NVrOHYCWCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxMzoyOToyM1rOHYnYvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk2NjI4Mg==", "bodyText": "\u2026 because IOUringSubmissionQueue.addRead is currently hard-coded to use 0 for data. Not a super obvious connection. Can we encode this explicitly, rather than relying on correctly placed + 1 and - 1?", "url": "https://github.com/netty/netty/pull/10606#discussion_r494966282", "createdAt": "2020-09-25T12:52:45Z", "author": {"login": "chrisvest"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannel.java", "diffHunk": "@@ -326,75 +323,80 @@ protected void doClose() throws Exception {\n     }\n \n     final class IOUringDatagramChannelUnsafe extends AbstractUringUnsafe {\n-        private ByteBuf readBuffer;\n-        private boolean recvMsg;\n-\n         // These buffers are used for msghdr, iov, sockaddr_in / sockaddr_in6 when doing recvmsg / sendmsg\n         //\n         // TODO: Alternative we could also allocate these everytime from the ByteBufAllocator or we could use\n         //       some sort of other pool. Let's keep it simple for now.\n-        private ByteBuffer recvmsgBuffer;\n-        private long recvmsgBufferAddr = -1;\n-        private ByteBuffer sendmsgBuffer;\n-        private long sendmsgBufferAddr = -1;\n-\n-        private long sendmsgBufferAddr() {\n-            long address = this.sendmsgBufferAddr;\n-            if (address == -1) {\n-                assert sendmsgBuffer == null;\n-                int length = Native.SIZEOF_MSGHDR + Native.SIZEOF_SOCKADDR_STORAGE + Native.SIZEOF_IOVEC;\n-                sendmsgBuffer = Buffer.allocateDirectWithNativeOrder(length);\n-                sendmsgBufferAddr = address = Buffer.memoryAddress(sendmsgBuffer);\n-\n-                // memset once\n-                PlatformDependent.setMemory(address, length, (byte) 0);\n-            }\n-            return address;\n-        }\n+        //\n+        // Consider exposing some configuration for that.\n+        private final MsgHdrMemoryArray recvmsgHdrs = new MsgHdrMemoryArray(256);\n+        private final MsgHdrMemoryArray sendmsgHdrs = new MsgHdrMemoryArray(256);\n+        private final int[] sendmsgResArray = new int[sendmsgHdrs.capacity()];\n+        private final WriteProcessor writeProcessor = new WriteProcessor();\n \n-        private long recvmsgBufferAddr() {\n-            long address = this.recvmsgBufferAddr;\n-            if (address == -1) {\n-                assert recvmsgBuffer == null;\n-                int length = Native.SIZEOF_MSGHDR + Native.SIZEOF_SOCKADDR_STORAGE + Native.SIZEOF_IOVEC;\n-                recvmsgBuffer = Buffer.allocateDirectWithNativeOrder(length);\n-                recvmsgBufferAddr = address = Buffer.memoryAddress(recvmsgBuffer);\n+        private ByteBuf readBuffer;\n \n-                // memset once\n-                PlatformDependent.setMemory(address, length, (byte) 0);\n-            }\n-            return address;\n-        }\n+        private final class WriteProcessor implements ChannelOutboundBuffer.MessageProcessor {\n+            private int written;\n \n-        void releaseBuffers() {\n-            if (sendmsgBuffer != null) {\n-                Buffer.free(sendmsgBuffer);\n-                sendmsgBuffer = null;\n-                sendmsgBufferAddr = -1;\n+            @Override\n+            public boolean processMessage(Object msg) {\n+                if (scheduleWrite(msg, true)) {\n+                    written++;\n+                    return true;\n+                }\n+                return false;\n             }\n \n-            if (recvmsgBuffer != null) {\n-                Buffer.free(recvmsgBuffer);\n-                recvmsgBuffer = null;\n-                recvmsgBufferAddr = -1;\n+            int write(ChannelOutboundBuffer in) {\n+                written = 0;\n+                try {\n+                    in.forEachFlushedMessage(this);\n+                } catch (Exception e) {\n+                    // This should never happen as our processMessage(...) never throws.\n+                    throw new IllegalStateException(e);\n+                }\n+                return written;\n             }\n         }\n \n+        void releaseBuffers() {\n+            sendmsgHdrs.release();\n+            recvmsgHdrs.release();\n+        }\n+\n         @Override\n-        protected void readComplete0(int res) {\n+        protected void readComplete0(int res, int data, int outstanding) {\n             final IOUringRecvByteAllocatorHandle allocHandle = recvBufAllocHandle();\n             final ChannelPipeline pipeline = pipeline();\n             ByteBuf byteBuf = this.readBuffer;\n-            this.readBuffer = null;\n             assert byteBuf != null;\n-            boolean recvmsg = this.recvMsg;\n-            this.recvMsg = false;\n+            // We need to use idx - 1 here to match up the logic in scheduleRead0()\n+            int idx = data - 1;\n+            try {\n+                if (idx == -1) {\n+                    assert outstanding == 0;\n+                    // idx == -1 means that we did a read(...) and not a recvmmsg(...)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59f30b6b566d770dd1abe6777c3dad32b78da4a"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU3MzE4MA==", "bodyText": "+1 :)", "url": "https://github.com/netty/netty/pull/10606#discussion_r495573180", "createdAt": "2020-09-27T13:29:23Z", "author": {"login": "njhill"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannel.java", "diffHunk": "@@ -326,75 +323,80 @@ protected void doClose() throws Exception {\n     }\n \n     final class IOUringDatagramChannelUnsafe extends AbstractUringUnsafe {\n-        private ByteBuf readBuffer;\n-        private boolean recvMsg;\n-\n         // These buffers are used for msghdr, iov, sockaddr_in / sockaddr_in6 when doing recvmsg / sendmsg\n         //\n         // TODO: Alternative we could also allocate these everytime from the ByteBufAllocator or we could use\n         //       some sort of other pool. Let's keep it simple for now.\n-        private ByteBuffer recvmsgBuffer;\n-        private long recvmsgBufferAddr = -1;\n-        private ByteBuffer sendmsgBuffer;\n-        private long sendmsgBufferAddr = -1;\n-\n-        private long sendmsgBufferAddr() {\n-            long address = this.sendmsgBufferAddr;\n-            if (address == -1) {\n-                assert sendmsgBuffer == null;\n-                int length = Native.SIZEOF_MSGHDR + Native.SIZEOF_SOCKADDR_STORAGE + Native.SIZEOF_IOVEC;\n-                sendmsgBuffer = Buffer.allocateDirectWithNativeOrder(length);\n-                sendmsgBufferAddr = address = Buffer.memoryAddress(sendmsgBuffer);\n-\n-                // memset once\n-                PlatformDependent.setMemory(address, length, (byte) 0);\n-            }\n-            return address;\n-        }\n+        //\n+        // Consider exposing some configuration for that.\n+        private final MsgHdrMemoryArray recvmsgHdrs = new MsgHdrMemoryArray(256);\n+        private final MsgHdrMemoryArray sendmsgHdrs = new MsgHdrMemoryArray(256);\n+        private final int[] sendmsgResArray = new int[sendmsgHdrs.capacity()];\n+        private final WriteProcessor writeProcessor = new WriteProcessor();\n \n-        private long recvmsgBufferAddr() {\n-            long address = this.recvmsgBufferAddr;\n-            if (address == -1) {\n-                assert recvmsgBuffer == null;\n-                int length = Native.SIZEOF_MSGHDR + Native.SIZEOF_SOCKADDR_STORAGE + Native.SIZEOF_IOVEC;\n-                recvmsgBuffer = Buffer.allocateDirectWithNativeOrder(length);\n-                recvmsgBufferAddr = address = Buffer.memoryAddress(recvmsgBuffer);\n+        private ByteBuf readBuffer;\n \n-                // memset once\n-                PlatformDependent.setMemory(address, length, (byte) 0);\n-            }\n-            return address;\n-        }\n+        private final class WriteProcessor implements ChannelOutboundBuffer.MessageProcessor {\n+            private int written;\n \n-        void releaseBuffers() {\n-            if (sendmsgBuffer != null) {\n-                Buffer.free(sendmsgBuffer);\n-                sendmsgBuffer = null;\n-                sendmsgBufferAddr = -1;\n+            @Override\n+            public boolean processMessage(Object msg) {\n+                if (scheduleWrite(msg, true)) {\n+                    written++;\n+                    return true;\n+                }\n+                return false;\n             }\n \n-            if (recvmsgBuffer != null) {\n-                Buffer.free(recvmsgBuffer);\n-                recvmsgBuffer = null;\n-                recvmsgBufferAddr = -1;\n+            int write(ChannelOutboundBuffer in) {\n+                written = 0;\n+                try {\n+                    in.forEachFlushedMessage(this);\n+                } catch (Exception e) {\n+                    // This should never happen as our processMessage(...) never throws.\n+                    throw new IllegalStateException(e);\n+                }\n+                return written;\n             }\n         }\n \n+        void releaseBuffers() {\n+            sendmsgHdrs.release();\n+            recvmsgHdrs.release();\n+        }\n+\n         @Override\n-        protected void readComplete0(int res) {\n+        protected void readComplete0(int res, int data, int outstanding) {\n             final IOUringRecvByteAllocatorHandle allocHandle = recvBufAllocHandle();\n             final ChannelPipeline pipeline = pipeline();\n             ByteBuf byteBuf = this.readBuffer;\n-            this.readBuffer = null;\n             assert byteBuf != null;\n-            boolean recvmsg = this.recvMsg;\n-            this.recvMsg = false;\n+            // We need to use idx - 1 here to match up the logic in scheduleRead0()\n+            int idx = data - 1;\n+            try {\n+                if (idx == -1) {\n+                    assert outstanding == 0;\n+                    // idx == -1 means that we did a read(...) and not a recvmmsg(...)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk2NjI4Mg=="}, "originalCommit": {"oid": "d59f30b6b566d770dd1abe6777c3dad32b78da4a"}, "originalPosition": 124}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA5Nzk4MDQzOnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannel.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMzowMjo1M1rOHYCryg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxNDo1MjoyOFrOHYn3JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk3MTg1MA==", "bodyText": "Our finally-clause only releases the buffer if ioResult throws? Maybe this can be structured better?", "url": "https://github.com/netty/netty/pull/10606#discussion_r494971850", "createdAt": "2020-09-25T13:02:53Z", "author": {"login": "chrisvest"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannel.java", "diffHunk": "@@ -438,11 +426,46 @@ protected void readComplete0(int res) {\n                     allocHandle.readComplete();\n                     pipeline.fireChannelReadComplete();\n                 }\n-            } catch (Throwable t) {\n-                if (connected && t instanceof NativeIoException) {\n-                    t = translateForConnected((NativeIoException) t);\n+            } finally {\n+                if (byteBuf != null) {\n+                    byteBuf.release();\n+                }\n+            }\n+        }\n+\n+        private void recvmsgComplete(ChannelPipeline pipeline, IOUringRecvByteAllocatorHandle allocHandle,\n+                                      ByteBuf byteBuf, int res, int idx, int outstanding) throws IOException {\n+            try {\n+                MsgHdrMemory hdr = recvmsgHdrs.hdr(idx);\n+\n+                if (res < 0) {\n+                    // If res is negative we should pass it to ioResult(...) which will either throw\n+                    // or convert it to 0 if we could not read because the socket was not readable.\n+                    allocHandle.lastBytesRead(ioResult(\"io_uring recvmsg\", res));\n+                } else if (res > 0) {\n+                    allocHandle.lastBytesRead(res);\n+                    allocHandle.incMessagesRead(1);\n+                    DatagramPacket packet = hdr.read(IOUringDatagramChannel.this, byteBuf, res);\n+                    pipeline.fireChannelRead(packet);\n+                } else {\n+                    allocHandle.lastBytesRead(0);\n+                }\n+                byteBuf = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59f30b6b566d770dd1abe6777c3dad32b78da4a"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTUxMzM4OA==", "bodyText": "I think at minimum this should be moved inside the else if block?", "url": "https://github.com/netty/netty/pull/10606#discussion_r495513388", "createdAt": "2020-09-27T01:23:23Z", "author": {"login": "njhill"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannel.java", "diffHunk": "@@ -438,11 +426,46 @@ protected void readComplete0(int res) {\n                     allocHandle.readComplete();\n                     pipeline.fireChannelReadComplete();\n                 }\n-            } catch (Throwable t) {\n-                if (connected && t instanceof NativeIoException) {\n-                    t = translateForConnected((NativeIoException) t);\n+            } finally {\n+                if (byteBuf != null) {\n+                    byteBuf.release();\n+                }\n+            }\n+        }\n+\n+        private void recvmsgComplete(ChannelPipeline pipeline, IOUringRecvByteAllocatorHandle allocHandle,\n+                                      ByteBuf byteBuf, int res, int idx, int outstanding) throws IOException {\n+            try {\n+                MsgHdrMemory hdr = recvmsgHdrs.hdr(idx);\n+\n+                if (res < 0) {\n+                    // If res is negative we should pass it to ioResult(...) which will either throw\n+                    // or convert it to 0 if we could not read because the socket was not readable.\n+                    allocHandle.lastBytesRead(ioResult(\"io_uring recvmsg\", res));\n+                } else if (res > 0) {\n+                    allocHandle.lastBytesRead(res);\n+                    allocHandle.incMessagesRead(1);\n+                    DatagramPacket packet = hdr.read(IOUringDatagramChannel.this, byteBuf, res);\n+                    pipeline.fireChannelRead(packet);\n+                } else {\n+                    allocHandle.lastBytesRead(0);\n+                }\n+                byteBuf = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk3MTg1MA=="}, "originalCommit": {"oid": "d59f30b6b566d770dd1abe6777c3dad32b78da4a"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU4MDk2NA==", "bodyText": "I think @njhill is right here...", "url": "https://github.com/netty/netty/pull/10606#discussion_r495580964", "createdAt": "2020-09-27T14:52:28Z", "author": {"login": "normanmaurer"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannel.java", "diffHunk": "@@ -438,11 +426,46 @@ protected void readComplete0(int res) {\n                     allocHandle.readComplete();\n                     pipeline.fireChannelReadComplete();\n                 }\n-            } catch (Throwable t) {\n-                if (connected && t instanceof NativeIoException) {\n-                    t = translateForConnected((NativeIoException) t);\n+            } finally {\n+                if (byteBuf != null) {\n+                    byteBuf.release();\n+                }\n+            }\n+        }\n+\n+        private void recvmsgComplete(ChannelPipeline pipeline, IOUringRecvByteAllocatorHandle allocHandle,\n+                                      ByteBuf byteBuf, int res, int idx, int outstanding) throws IOException {\n+            try {\n+                MsgHdrMemory hdr = recvmsgHdrs.hdr(idx);\n+\n+                if (res < 0) {\n+                    // If res is negative we should pass it to ioResult(...) which will either throw\n+                    // or convert it to 0 if we could not read because the socket was not readable.\n+                    allocHandle.lastBytesRead(ioResult(\"io_uring recvmsg\", res));\n+                } else if (res > 0) {\n+                    allocHandle.lastBytesRead(res);\n+                    allocHandle.incMessagesRead(1);\n+                    DatagramPacket packet = hdr.read(IOUringDatagramChannel.this, byteBuf, res);\n+                    pipeline.fireChannelRead(packet);\n+                } else {\n+                    allocHandle.lastBytesRead(0);\n+                }\n+                byteBuf = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDk3MTg1MA=="}, "originalCommit": {"oid": "d59f30b6b566d770dd1abe6777c3dad32b78da4a"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDcxMjUyOnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/AbstractIOUringChannel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwMzozMjoxMFrOHYdXgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxNDo0MTo0MlrOHYnzNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQwOTAyNw==", "bodyText": "Any particular reason for having this in a separate method?", "url": "https://github.com/netty/netty/pull/10606#discussion_r495409027", "createdAt": "2020-09-26T03:32:10Z", "author": {"login": "njhill"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/AbstractIOUringChannel.java", "diffHunk": "@@ -578,32 +595,39 @@ final void pollOut(int res) {\n         /**\n          * Called once a write was completed.\n          */\n-        final void writeComplete(int res) {\n-            ChannelOutboundBuffer channelOutboundBuffer = unsafe().outboundBuffer();\n-            if (res >= 0) {\n-                removeFromOutboundBuffer(channelOutboundBuffer, res);\n-                // We only reset this once we are done with calling removeBytes(...) as otherwise we may trigger a write\n-                // while still removing messages internally in removeBytes(...) which then may corrupt state.\n-                ioState &= ~WRITE_SCHEDULED;\n-                doWrite(channelOutboundBuffer);\n-            } else {\n+        final void writeComplete(int res, int data) {\n+            assert numOutstandingWrites > 0;\n+            --numOutstandingWrites;\n+\n+            boolean writtenAll = writeComplete0(res, data, numOutstandingWrites);\n+            if (!writtenAll && (ioState & POLL_OUT_SCHEDULED) == 0) {\n+                // We were not able to write everything, let's register for POLLOUT\n+                schedulePollOut();\n+            }\n+\n+            // We only reset this once we are done with calling removeBytes(...) as otherwise we may trigger a write\n+            // while still removing messages internally in removeBytes(...) which then may corrupt state.\n+            if (numOutstandingWrites == 0) {\n                 ioState &= ~WRITE_SCHEDULED;\n-                try {\n-                    if (ioResult(\"io_uring write\", res) == 0) {\n-                        // We were not able to write everything, let's register for POLLOUT\n-                        schedulePollOut();\n-                    }\n-                } catch (Throwable cause) {\n-                    handleWriteError(cause);\n+\n+                // If we could write all and we did not schedule a pollout yet let us try to write again\n+                if (writtenAll && (ioState & POLL_OUT_SCHEDULED) == 0) {\n+                    doWrite(unsafe().outboundBuffer());\n                 }\n             }\n         }\n \n         /**\n-         * Called once a write completed and we should remove message(s) from the {@link ChannelOutboundBuffer}\n+         * Called once a write was completed.\n          */\n-        protected void removeFromOutboundBuffer(ChannelOutboundBuffer outboundBuffer, int bytes) {\n-            outboundBuffer.removeBytes(bytes);\n+        abstract boolean writeComplete0(int res, int data, int outstanding);\n+\n+        private int clearReadScheduledIfNeeded() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59f30b6b566d770dd1abe6777c3dad32b78da4a"}, "originalPosition": 204}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU3OTk1OQ==", "bodyText": "not anymore... I did call it from various places at some point but thats not true anymore.", "url": "https://github.com/netty/netty/pull/10606#discussion_r495579959", "createdAt": "2020-09-27T14:41:42Z", "author": {"login": "normanmaurer"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/AbstractIOUringChannel.java", "diffHunk": "@@ -578,32 +595,39 @@ final void pollOut(int res) {\n         /**\n          * Called once a write was completed.\n          */\n-        final void writeComplete(int res) {\n-            ChannelOutboundBuffer channelOutboundBuffer = unsafe().outboundBuffer();\n-            if (res >= 0) {\n-                removeFromOutboundBuffer(channelOutboundBuffer, res);\n-                // We only reset this once we are done with calling removeBytes(...) as otherwise we may trigger a write\n-                // while still removing messages internally in removeBytes(...) which then may corrupt state.\n-                ioState &= ~WRITE_SCHEDULED;\n-                doWrite(channelOutboundBuffer);\n-            } else {\n+        final void writeComplete(int res, int data) {\n+            assert numOutstandingWrites > 0;\n+            --numOutstandingWrites;\n+\n+            boolean writtenAll = writeComplete0(res, data, numOutstandingWrites);\n+            if (!writtenAll && (ioState & POLL_OUT_SCHEDULED) == 0) {\n+                // We were not able to write everything, let's register for POLLOUT\n+                schedulePollOut();\n+            }\n+\n+            // We only reset this once we are done with calling removeBytes(...) as otherwise we may trigger a write\n+            // while still removing messages internally in removeBytes(...) which then may corrupt state.\n+            if (numOutstandingWrites == 0) {\n                 ioState &= ~WRITE_SCHEDULED;\n-                try {\n-                    if (ioResult(\"io_uring write\", res) == 0) {\n-                        // We were not able to write everything, let's register for POLLOUT\n-                        schedulePollOut();\n-                    }\n-                } catch (Throwable cause) {\n-                    handleWriteError(cause);\n+\n+                // If we could write all and we did not schedule a pollout yet let us try to write again\n+                if (writtenAll && (ioState & POLL_OUT_SCHEDULED) == 0) {\n+                    doWrite(unsafe().outboundBuffer());\n                 }\n             }\n         }\n \n         /**\n-         * Called once a write completed and we should remove message(s) from the {@link ChannelOutboundBuffer}\n+         * Called once a write was completed.\n          */\n-        protected void removeFromOutboundBuffer(ChannelOutboundBuffer outboundBuffer, int bytes) {\n-            outboundBuffer.removeBytes(bytes);\n+        abstract boolean writeComplete0(int res, int data, int outstanding);\n+\n+        private int clearReadScheduledIfNeeded() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQwOTAyNw=="}, "originalCommit": {"oid": "d59f30b6b566d770dd1abe6777c3dad32b78da4a"}, "originalPosition": 204}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDcyODkyOnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwMzo1ODoxMlrOHYdfGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwMzo1ODoxMlrOHYdfGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxMDk2OQ==", "bodyText": "Move above 9 lines into separate private method to dedup the logic in if/else blocks?", "url": "https://github.com/netty/netty/pull/10606#discussion_r495410969", "createdAt": "2020-09-26T03:58:12Z", "author": {"login": "njhill"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannel.java", "diffHunk": "@@ -451,43 +474,109 @@ protected void readComplete0(int res) {\n         }\n \n         @Override\n-        protected void scheduleRead0() {\n+        protected int scheduleRead0() {\n             final IOUringRecvByteAllocatorHandle allocHandle = recvBufAllocHandle();\n             ByteBuf byteBuf = allocHandle.allocate(alloc());\n-            IOUringSubmissionQueue submissionQueue = submissionQueue();\n-\n             assert readBuffer == null;\n             readBuffer = byteBuf;\n \n-            recvMsg = !isConnected();\n-            long bufferAddress = byteBuf.memoryAddress();\n-            allocHandle.attemptedBytesRead(byteBuf.writableBytes());\n+            int writable = byteBuf.writableBytes();\n+            allocHandle.attemptedBytesRead(writable);\n+            int datagramSize = config().getMaxDatagramPayloadSize();\n \n-            if (!recvMsg) {\n-                submissionQueue.addRead(socket.intValue(), bufferAddress,\n+            int numDatagram = datagramSize == 0 ? 1 : Math.max(1, byteBuf.writableBytes() / datagramSize);\n+\n+            if (isConnected() && numDatagram <= 1) {\n+                submissionQueue().addRead(socket.intValue(), byteBuf.memoryAddress(),\n                         byteBuf.writerIndex(), byteBuf.capacity());\n+                return 1;\n             } else {\n-                int addrLen = addrLen();\n-                long recvmsgBufferAddr = recvmsgBufferAddr();\n-                long sockaddrAddress = recvmsgBufferAddr + Native.SIZEOF_MSGHDR;\n-                long iovecAddress = sockaddrAddress + addrLen;\n-\n-                Iov.write(iovecAddress, bufferAddress + byteBuf.writerIndex(), byteBuf.writableBytes());\n-                MsgHdr.write(recvmsgBufferAddr, sockaddrAddress, addrLen, iovecAddress, 1);\n-                submissionQueue.addRecvmsg(socket.intValue(), recvmsgBufferAddr);\n+                int scheduled = scheduleRcvmsg(byteBuf, numDatagram, datagramSize);\n+                if (scheduled == 0) {\n+                    // We could not schedule any recvmmsg so we need to release the buffer as there will be no\n+                    // completion event.\n+                    readBuffer = null;\n+                    byteBuf.release();\n+                }\n+                return scheduled;\n             }\n         }\n \n-        private int addrLen() {\n-            return socket.isIpv6() ? Native.SIZEOF_SOCKADDR_IN6 :\n-                    Native.SIZEOF_SOCKADDR_IN;\n+        private int scheduleRcvmsg(ByteBuf byteBuf, int numDatagram, int datagramSize) {\n+            int writable = byteBuf.writableBytes();\n+            IOUringSubmissionQueue submissionQueue = submissionQueue();\n+            long bufferAddress = byteBuf.memoryAddress() + byteBuf.writerIndex();\n+            if (numDatagram <= 1) {\n+                MsgHdrMemory msgHdrMemory = recvmsgHdrs.nextHdr();\n+                if (msgHdrMemory == null) {\n+                    // We can not continue reading before we did not submit the recvmsg(s) and received the results.\n+                    return 0;\n+                }\n+                msgHdrMemory.write(socket, null, bufferAddress, writable);\n+                // We always use idx + 1 here so we can detect if no idx was used by checking if data == 0 in\n+                // readComplete0(...)\n+                submissionQueue.addRecvmsg(socket.intValue(), msgHdrMemory.address(), msgHdrMemory.idx() + 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59f30b6b566d770dd1abe6777c3dad32b78da4a"}, "originalPosition": 295}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDcyOTc3OnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwMzo1OTozN1rOHYdffA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwMzo1OTozN1rOHYdffA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxMTA2OA==", "bodyText": "nit: no need for this var, could just return directly", "url": "https://github.com/netty/netty/pull/10606#discussion_r495411068", "createdAt": "2020-09-26T03:59:37Z", "author": {"login": "njhill"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannel.java", "diffHunk": "@@ -451,43 +474,109 @@ protected void readComplete0(int res) {\n         }\n \n         @Override\n-        protected void scheduleRead0() {\n+        protected int scheduleRead0() {\n             final IOUringRecvByteAllocatorHandle allocHandle = recvBufAllocHandle();\n             ByteBuf byteBuf = allocHandle.allocate(alloc());\n-            IOUringSubmissionQueue submissionQueue = submissionQueue();\n-\n             assert readBuffer == null;\n             readBuffer = byteBuf;\n \n-            recvMsg = !isConnected();\n-            long bufferAddress = byteBuf.memoryAddress();\n-            allocHandle.attemptedBytesRead(byteBuf.writableBytes());\n+            int writable = byteBuf.writableBytes();\n+            allocHandle.attemptedBytesRead(writable);\n+            int datagramSize = config().getMaxDatagramPayloadSize();\n \n-            if (!recvMsg) {\n-                submissionQueue.addRead(socket.intValue(), bufferAddress,\n+            int numDatagram = datagramSize == 0 ? 1 : Math.max(1, byteBuf.writableBytes() / datagramSize);\n+\n+            if (isConnected() && numDatagram <= 1) {\n+                submissionQueue().addRead(socket.intValue(), byteBuf.memoryAddress(),\n                         byteBuf.writerIndex(), byteBuf.capacity());\n+                return 1;\n             } else {\n-                int addrLen = addrLen();\n-                long recvmsgBufferAddr = recvmsgBufferAddr();\n-                long sockaddrAddress = recvmsgBufferAddr + Native.SIZEOF_MSGHDR;\n-                long iovecAddress = sockaddrAddress + addrLen;\n-\n-                Iov.write(iovecAddress, bufferAddress + byteBuf.writerIndex(), byteBuf.writableBytes());\n-                MsgHdr.write(recvmsgBufferAddr, sockaddrAddress, addrLen, iovecAddress, 1);\n-                submissionQueue.addRecvmsg(socket.intValue(), recvmsgBufferAddr);\n+                int scheduled = scheduleRcvmsg(byteBuf, numDatagram, datagramSize);\n+                if (scheduled == 0) {\n+                    // We could not schedule any recvmmsg so we need to release the buffer as there will be no\n+                    // completion event.\n+                    readBuffer = null;\n+                    byteBuf.release();\n+                }\n+                return scheduled;\n             }\n         }\n \n-        private int addrLen() {\n-            return socket.isIpv6() ? Native.SIZEOF_SOCKADDR_IN6 :\n-                    Native.SIZEOF_SOCKADDR_IN;\n+        private int scheduleRcvmsg(ByteBuf byteBuf, int numDatagram, int datagramSize) {\n+            int writable = byteBuf.writableBytes();\n+            IOUringSubmissionQueue submissionQueue = submissionQueue();\n+            long bufferAddress = byteBuf.memoryAddress() + byteBuf.writerIndex();\n+            if (numDatagram <= 1) {\n+                MsgHdrMemory msgHdrMemory = recvmsgHdrs.nextHdr();\n+                if (msgHdrMemory == null) {\n+                    // We can not continue reading before we did not submit the recvmsg(s) and received the results.\n+                    return 0;\n+                }\n+                msgHdrMemory.write(socket, null, bufferAddress, writable);\n+                // We always use idx + 1 here so we can detect if no idx was used by checking if data == 0 in\n+                // readComplete0(...)\n+                submissionQueue.addRecvmsg(socket.intValue(), msgHdrMemory.address(), msgHdrMemory.idx() + 1);\n+                return 1;\n+            } else {\n+                int i = 0;\n+                // Add multiple IORING_OP_RECVMSG to the submission queue. This basically emulates recvmmsg(...)\n+                for (; i < numDatagram && writable >= datagramSize; i++) {\n+                    MsgHdrMemory msgHdrMemory = recvmsgHdrs.nextHdr();\n+                    if (msgHdrMemory == null) {\n+                        // We can not continue reading before we did not submit the recvmsg(s) and received the results.\n+                        break;\n+                    }\n+                    msgHdrMemory.write(socket, null, bufferAddress, datagramSize);\n+                    // We always use idx + 1 here so we can detect if no idx was used by checking if data == 0 in\n+                    // readComplete0(...)\n+                    submissionQueue.addRecvmsg(socket.intValue(), msgHdrMemory.address(), msgHdrMemory.idx() + 1);\n+                    bufferAddress += datagramSize;\n+                    writable -= datagramSize;\n+                }\n+                return i;\n+            }\n         }\n \n         @Override\n-        protected void removeFromOutboundBuffer(ChannelOutboundBuffer outboundBuffer, int bytes) {\n-            // When using Datagram we should consider the message written as long as there were any bytes written.\n-            boolean removed = outboundBuffer.remove();\n-            assert removed;\n+        boolean writeComplete0(int res, int data, int outstanding) {\n+            ChannelOutboundBuffer outboundBuffer = outboundBuffer();\n+            // We need to use idx -1 here to match up the logic in scheduleRead0()\n+            int idx = data - 1;\n+            if (idx == -1) {\n+                assert outstanding == 0;\n+                // idx == -1 means that we did a write(...) and not a sendmsg(...) operation\n+                return removeFromOutboundBuffer(outboundBuffer, res, \"io_uring write\");\n+            } else {\n+                // Store the result so we can handle it as soon as we have no outstanding writes anymore.\n+                sendmsgResArray[idx] = res;\n+                if (outstanding == 0) {\n+                    // All writes are done as part of a batch. Let's remove these from the ChannelOutboundBuffer\n+                    boolean writtenSomething = false;\n+                    int numWritten = sendmsgHdrs.length();\n+                    sendmsgHdrs.clear();\n+                    for (int i = 0; i < numWritten; i++) {\n+                        writtenSomething |= removeFromOutboundBuffer(\n+                                outboundBuffer, sendmsgResArray[i], \"io_uring sendmsg\");\n+                    }\n+                    return writtenSomething;\n+                }\n+                return true;\n+            }\n+        }\n+\n+        private boolean removeFromOutboundBuffer(ChannelOutboundBuffer outboundBuffer, int res, String errormsg) {\n+            final boolean removed;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59f30b6b566d770dd1abe6777c3dad32b78da4a"}, "originalPosition": 349}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDczMDYwOnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNDowMDozM1rOHYdf3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNDowMDozM1rOHYdf3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxMTE2NA==", "bodyText": "nit: conditional operator?", "url": "https://github.com/netty/netty/pull/10606#discussion_r495411164", "createdAt": "2020-09-26T04:00:33Z", "author": {"login": "njhill"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannel.java", "diffHunk": "@@ -499,15 +588,21 @@ void connectComplete(int res) {\n         }\n \n         @Override\n-        protected void scheduleWriteMultiple(ChannelOutboundBuffer in) {\n-            // We always just use scheduleWriteSingle for now.\n-            scheduleWriteSingle(in.current());\n+        protected int scheduleWriteMultiple(ChannelOutboundBuffer in) {\n+            return writeProcessor.write(in);\n         }\n \n         @Override\n-        protected void scheduleWriteSingle(Object msg) {\n+        protected int scheduleWriteSingle(Object msg) {\n+            if (scheduleWrite(msg, false)) {\n+                return 1;\n+            }\n+            return 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59f30b6b566d770dd1abe6777c3dad32b78da4a"}, "originalPosition": 381}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDczMDkzOnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNDowMToxNlrOHYdgAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNDowMToxNlrOHYdgAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxMTIwMg==", "bodyText": "nit: don't need the else", "url": "https://github.com/netty/netty/pull/10606#discussion_r495411202", "createdAt": "2020-09-26T04:01:16Z", "author": {"login": "njhill"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannel.java", "diffHunk": "@@ -522,23 +617,33 @@ protected void scheduleWriteSingle(Object msg) {\n             long bufferAddress = data.memoryAddress();\n             IOUringSubmissionQueue submissionQueue = submissionQueue();\n             if (remoteAddress == null) {\n-                submissionQueue.addWrite(socket.intValue(), bufferAddress, data.readerIndex(),\n-                        data.writerIndex());\n+                if (forceSendmsg) {\n+                    return scheduleSendmsg(\n+                            IOUringDatagramChannel.this.remoteAddress(), bufferAddress, data.readableBytes());\n+                } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59f30b6b566d770dd1abe6777c3dad32b78da4a"}, "originalPosition": 400}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMDczMTA4OnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNDowMTozNFrOHYdgFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNlQwNDowMTozNFrOHYdgFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTQxMTIyMg==", "bodyText": "nit: don't need else", "url": "https://github.com/netty/netty/pull/10606#discussion_r495411222", "createdAt": "2020-09-26T04:01:34Z", "author": {"login": "njhill"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannel.java", "diffHunk": "@@ -522,23 +617,33 @@ protected void scheduleWriteSingle(Object msg) {\n             long bufferAddress = data.memoryAddress();\n             IOUringSubmissionQueue submissionQueue = submissionQueue();\n             if (remoteAddress == null) {\n-                submissionQueue.addWrite(socket.intValue(), bufferAddress, data.readerIndex(),\n-                        data.writerIndex());\n+                if (forceSendmsg) {\n+                    return scheduleSendmsg(\n+                            IOUringDatagramChannel.this.remoteAddress(), bufferAddress, data.readableBytes());\n+                } else {\n+                    submissionQueue.addWrite(socket.intValue(), bufferAddress, data.readerIndex(),\n+                            data.writerIndex());\n+                    return true;\n+                }\n             } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59f30b6b566d770dd1abe6777c3dad32b78da4a"}, "originalPosition": 405}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMjA5NjI5OnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxMzozMzoxOVrOHYnaKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxNDo0ODoxNlrOHYn1kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU3MzU0Nw==", "bodyText": "Apart from possibly being more complicated (I don't think it would be too bad), do you envisage any other downside from using existing pooled bytebufs for this (and iovecs generally)?", "url": "https://github.com/netty/netty/pull/10606#discussion_r495573547", "createdAt": "2020-09-27T13:33:19Z", "author": {"login": "njhill"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannel.java", "diffHunk": "@@ -326,75 +323,80 @@ protected void doClose() throws Exception {\n     }\n \n     final class IOUringDatagramChannelUnsafe extends AbstractUringUnsafe {\n-        private ByteBuf readBuffer;\n-        private boolean recvMsg;\n-\n         // These buffers are used for msghdr, iov, sockaddr_in / sockaddr_in6 when doing recvmsg / sendmsg\n         //\n         // TODO: Alternative we could also allocate these everytime from the ByteBufAllocator or we could use\n         //       some sort of other pool. Let's keep it simple for now.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59f30b6b566d770dd1abe6777c3dad32b78da4a"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU4MDU2MA==", "bodyText": "I will need to do some experiments. But also the \"housekeeping\" will be a bit more complicated + sometimes people not use pooling", "url": "https://github.com/netty/netty/pull/10606#discussion_r495580560", "createdAt": "2020-09-27T14:48:16Z", "author": {"login": "normanmaurer"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannel.java", "diffHunk": "@@ -326,75 +323,80 @@ protected void doClose() throws Exception {\n     }\n \n     final class IOUringDatagramChannelUnsafe extends AbstractUringUnsafe {\n-        private ByteBuf readBuffer;\n-        private boolean recvMsg;\n-\n         // These buffers are used for msghdr, iov, sockaddr_in / sockaddr_in6 when doing recvmsg / sendmsg\n         //\n         // TODO: Alternative we could also allocate these everytime from the ByteBufAllocator or we could use\n         //       some sort of other pool. Let's keep it simple for now.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU3MzU0Nw=="}, "originalCommit": {"oid": "d59f30b6b566d770dd1abe6777c3dad32b78da4a"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMjA5OTYxOnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/AbstractIOUringChannel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxMzozNzo0MVrOHYnb0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxNDo0ODo0MlrOHYn1xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU3Mzk2OA==", "bodyText": "nit: could combine first 2 clauses?", "url": "https://github.com/netty/netty/pull/10606#discussion_r495573968", "createdAt": "2020-09-27T13:37:41Z", "author": {"login": "njhill"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/AbstractIOUringChannel.java", "diffHunk": "@@ -263,34 +270,37 @@ protected void doWrite(ChannelOutboundBuffer in) {\n         if ((ioState & WRITE_SCHEDULED) != 0) {\n             return;\n         }\n-        scheduleWrite(in);\n+        if (scheduleWrite(in) > 0) {\n+            ioState |= WRITE_SCHEDULED;\n+        }\n     }\n \n-    private void scheduleWrite(ChannelOutboundBuffer in) {\n-        if (delayedClose != null) {\n-            return;\n+    private int scheduleWrite(ChannelOutboundBuffer in) {\n+        if (delayedClose != null || numOutstandingWrites == Short.MAX_VALUE) {\n+            return 0;\n         }\n         if (in == null) {\n-            return;\n+            return 0;\n         }\n \n         int msgCount = in.size();\n         if (msgCount == 0) {\n-            return;\n+            return 0;\n         }\n         Object msg = in.current();\n \n-        assert (ioState & WRITE_SCHEDULED) == 0;\n         if (msgCount > 1) {\n-            ioUringUnsafe().scheduleWriteMultiple(in);\n+            numOutstandingWrites = (short) ioUringUnsafe().scheduleWriteMultiple(in);\n         } else if ((msg instanceof ByteBuf) && ((ByteBuf) msg).nioBufferCount() > 1 ||\n                     ((msg instanceof ByteBufHolder) && ((ByteBufHolder) msg).content().nioBufferCount() > 1)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59f30b6b566d770dd1abe6777c3dad32b78da4a"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU4MDYxMg==", "bodyText": "I found it more readable this way.", "url": "https://github.com/netty/netty/pull/10606#discussion_r495580612", "createdAt": "2020-09-27T14:48:42Z", "author": {"login": "normanmaurer"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/AbstractIOUringChannel.java", "diffHunk": "@@ -263,34 +270,37 @@ protected void doWrite(ChannelOutboundBuffer in) {\n         if ((ioState & WRITE_SCHEDULED) != 0) {\n             return;\n         }\n-        scheduleWrite(in);\n+        if (scheduleWrite(in) > 0) {\n+            ioState |= WRITE_SCHEDULED;\n+        }\n     }\n \n-    private void scheduleWrite(ChannelOutboundBuffer in) {\n-        if (delayedClose != null) {\n-            return;\n+    private int scheduleWrite(ChannelOutboundBuffer in) {\n+        if (delayedClose != null || numOutstandingWrites == Short.MAX_VALUE) {\n+            return 0;\n         }\n         if (in == null) {\n-            return;\n+            return 0;\n         }\n \n         int msgCount = in.size();\n         if (msgCount == 0) {\n-            return;\n+            return 0;\n         }\n         Object msg = in.current();\n \n-        assert (ioState & WRITE_SCHEDULED) == 0;\n         if (msgCount > 1) {\n-            ioUringUnsafe().scheduleWriteMultiple(in);\n+            numOutstandingWrites = (short) ioUringUnsafe().scheduleWriteMultiple(in);\n         } else if ((msg instanceof ByteBuf) && ((ByteBuf) msg).nioBufferCount() > 1 ||\n                     ((msg instanceof ByteBufHolder) && ((ByteBufHolder) msg).content().nioBufferCount() > 1)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU3Mzk2OA=="}, "originalCommit": {"oid": "d59f30b6b566d770dd1abe6777c3dad32b78da4a"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMjEwMDU5OnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/AbstractIOUringChannel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxMzozOToxNlrOHYncVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxNDo0ODozOFrOHYn1tQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU3NDEwMQ==", "bodyText": "nit: combine above ifs?", "url": "https://github.com/netty/netty/pull/10606#discussion_r495574101", "createdAt": "2020-09-27T13:39:16Z", "author": {"login": "njhill"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/AbstractIOUringChannel.java", "diffHunk": "@@ -263,34 +270,37 @@ protected void doWrite(ChannelOutboundBuffer in) {\n         if ((ioState & WRITE_SCHEDULED) != 0) {\n             return;\n         }\n-        scheduleWrite(in);\n+        if (scheduleWrite(in) > 0) {\n+            ioState |= WRITE_SCHEDULED;\n+        }\n     }\n \n-    private void scheduleWrite(ChannelOutboundBuffer in) {\n-        if (delayedClose != null) {\n-            return;\n+    private int scheduleWrite(ChannelOutboundBuffer in) {\n+        if (delayedClose != null || numOutstandingWrites == Short.MAX_VALUE) {\n+            return 0;\n         }\n         if (in == null) {\n-            return;\n+            return 0;\n         }\n \n         int msgCount = in.size();\n         if (msgCount == 0) {\n-            return;\n+            return 0;\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d59f30b6b566d770dd1abe6777c3dad32b78da4a"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU4MDU5Nw==", "bodyText": "I found it more readable this way.", "url": "https://github.com/netty/netty/pull/10606#discussion_r495580597", "createdAt": "2020-09-27T14:48:38Z", "author": {"login": "normanmaurer"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/AbstractIOUringChannel.java", "diffHunk": "@@ -263,34 +270,37 @@ protected void doWrite(ChannelOutboundBuffer in) {\n         if ((ioState & WRITE_SCHEDULED) != 0) {\n             return;\n         }\n-        scheduleWrite(in);\n+        if (scheduleWrite(in) > 0) {\n+            ioState |= WRITE_SCHEDULED;\n+        }\n     }\n \n-    private void scheduleWrite(ChannelOutboundBuffer in) {\n-        if (delayedClose != null) {\n-            return;\n+    private int scheduleWrite(ChannelOutboundBuffer in) {\n+        if (delayedClose != null || numOutstandingWrites == Short.MAX_VALUE) {\n+            return 0;\n         }\n         if (in == null) {\n-            return;\n+            return 0;\n         }\n \n         int msgCount = in.size();\n         if (msgCount == 0) {\n-            return;\n+            return 0;\n         }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU3NDEwMQ=="}, "originalCommit": {"oid": "d59f30b6b566d770dd1abe6777c3dad32b78da4a"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMjI4ODIxOnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannel.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxNzo0MTo1OVrOHYo0-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMjozNTowNVrOHY7kgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5Njc5Mw==", "bodyText": "if the connection is true, a read event will be submitted and here a recvmsg event, why is that?", "url": "https://github.com/netty/netty/pull/10606#discussion_r495596793", "createdAt": "2020-09-27T17:41:59Z", "author": {"login": "1Jo1"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannel.java", "diffHunk": "@@ -451,43 +472,103 @@ protected void readComplete0(int res) {\n         }\n \n         @Override\n-        protected void scheduleRead0() {\n+        protected int scheduleRead0() {\n             final IOUringRecvByteAllocatorHandle allocHandle = recvBufAllocHandle();\n             ByteBuf byteBuf = allocHandle.allocate(alloc());\n-            IOUringSubmissionQueue submissionQueue = submissionQueue();\n-\n             assert readBuffer == null;\n             readBuffer = byteBuf;\n \n-            recvMsg = !isConnected();\n-            long bufferAddress = byteBuf.memoryAddress();\n-            allocHandle.attemptedBytesRead(byteBuf.writableBytes());\n+            int writable = byteBuf.writableBytes();\n+            allocHandle.attemptedBytesRead(writable);\n+            int datagramSize = config().getMaxDatagramPayloadSize();\n+\n+            int numDatagram = datagramSize == 0 ? 1 : Math.max(1, byteBuf.writableBytes() / datagramSize);\n+\n+            if (isConnected() && numDatagram <= 1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58e09ecbe3a946465516fef05452154b9802219c"}, "originalPosition": 251}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYwMTc0OA==", "bodyText": "sorry I can't follow... can you elaborate ?", "url": "https://github.com/netty/netty/pull/10606#discussion_r495601748", "createdAt": "2020-09-27T18:37:41Z", "author": {"login": "normanmaurer"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannel.java", "diffHunk": "@@ -451,43 +472,103 @@ protected void readComplete0(int res) {\n         }\n \n         @Override\n-        protected void scheduleRead0() {\n+        protected int scheduleRead0() {\n             final IOUringRecvByteAllocatorHandle allocHandle = recvBufAllocHandle();\n             ByteBuf byteBuf = allocHandle.allocate(alloc());\n-            IOUringSubmissionQueue submissionQueue = submissionQueue();\n-\n             assert readBuffer == null;\n             readBuffer = byteBuf;\n \n-            recvMsg = !isConnected();\n-            long bufferAddress = byteBuf.memoryAddress();\n-            allocHandle.attemptedBytesRead(byteBuf.writableBytes());\n+            int writable = byteBuf.writableBytes();\n+            allocHandle.attemptedBytesRead(writable);\n+            int datagramSize = config().getMaxDatagramPayloadSize();\n+\n+            int numDatagram = datagramSize == 0 ? 1 : Math.max(1, byteBuf.writableBytes() / datagramSize);\n+\n+            if (isConnected() && numDatagram <= 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5Njc5Mw=="}, "originalCommit": {"oid": "58e09ecbe3a946465516fef05452154b9802219c"}, "originalPosition": 251}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkwMjA1OQ==", "bodyText": "scheduleRecvmsg0 will be executed when isConnected is false, why is a read event submitted when isConnected is true?", "url": "https://github.com/netty/netty/pull/10606#discussion_r495902059", "createdAt": "2020-09-28T12:31:58Z", "author": {"login": "1Jo1"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannel.java", "diffHunk": "@@ -451,43 +472,103 @@ protected void readComplete0(int res) {\n         }\n \n         @Override\n-        protected void scheduleRead0() {\n+        protected int scheduleRead0() {\n             final IOUringRecvByteAllocatorHandle allocHandle = recvBufAllocHandle();\n             ByteBuf byteBuf = allocHandle.allocate(alloc());\n-            IOUringSubmissionQueue submissionQueue = submissionQueue();\n-\n             assert readBuffer == null;\n             readBuffer = byteBuf;\n \n-            recvMsg = !isConnected();\n-            long bufferAddress = byteBuf.memoryAddress();\n-            allocHandle.attemptedBytesRead(byteBuf.writableBytes());\n+            int writable = byteBuf.writableBytes();\n+            allocHandle.attemptedBytesRead(writable);\n+            int datagramSize = config().getMaxDatagramPayloadSize();\n+\n+            int numDatagram = datagramSize == 0 ? 1 : Math.max(1, byteBuf.writableBytes() / datagramSize);\n+\n+            if (isConnected() && numDatagram <= 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5Njc5Mw=="}, "originalCommit": {"oid": "58e09ecbe3a946465516fef05452154b9802219c"}, "originalPosition": 251}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkwMzg3NA==", "bodyText": "because generally speaking read is cheaper then recvmsg.", "url": "https://github.com/netty/netty/pull/10606#discussion_r495903874", "createdAt": "2020-09-28T12:35:05Z", "author": {"login": "normanmaurer"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannel.java", "diffHunk": "@@ -451,43 +472,103 @@ protected void readComplete0(int res) {\n         }\n \n         @Override\n-        protected void scheduleRead0() {\n+        protected int scheduleRead0() {\n             final IOUringRecvByteAllocatorHandle allocHandle = recvBufAllocHandle();\n             ByteBuf byteBuf = allocHandle.allocate(alloc());\n-            IOUringSubmissionQueue submissionQueue = submissionQueue();\n-\n             assert readBuffer == null;\n             readBuffer = byteBuf;\n \n-            recvMsg = !isConnected();\n-            long bufferAddress = byteBuf.memoryAddress();\n-            allocHandle.attemptedBytesRead(byteBuf.writableBytes());\n+            int writable = byteBuf.writableBytes();\n+            allocHandle.attemptedBytesRead(writable);\n+            int datagramSize = config().getMaxDatagramPayloadSize();\n+\n+            int numDatagram = datagramSize == 0 ? 1 : Math.max(1, byteBuf.writableBytes() / datagramSize);\n+\n+            if (isConnected() && numDatagram <= 1) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTU5Njc5Mw=="}, "originalCommit": {"oid": "58e09ecbe3a946465516fef05452154b9802219c"}, "originalPosition": 251}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMjMzMDg0OnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringSubmissionQueue.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxODo0MDoxMVrOHYpJMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxODo0MDoxMVrOHYpJMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYwMTk2OA==", "bodyText": "I can also do this as an extra PR if you prefer... @njhill @chrisvest", "url": "https://github.com/netty/netty/pull/10606#discussion_r495601968", "createdAt": "2020-09-27T18:40:11Z", "author": {"login": "normanmaurer"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringSubmissionQueue.java", "diffHunk": "@@ -245,8 +245,8 @@ private void setTimeout(long timeoutNanoSeconds) {\n     private static long convertToUserData(int fd, int op, int data) {\n         assert op <= Short.MAX_VALUE;\n         assert data <= Short.MAX_VALUE;\n-        int opMask = op << 16 | (data & 0xFFFF);\n-        return (long) fd << 32 | opMask & 0xFFFFFFFFL;\n+        int opMask = (op << 16) | (((short) data) & 0xFFFF);\n+        return (((long) fd) << 32) | (opMask & 0xFFFFFFFFL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58e09ecbe3a946465516fef05452154b9802219c"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMjMzMTI4OnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringCompletionQueue.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yN1QxODo0MDoyNlrOHYpJYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNzoyNTozNFrOHYxciw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYwMjAxNg==", "bodyText": "I can also do this as an extra PR if you prefer... @njhill @chrisvest", "url": "https://github.com/netty/netty/pull/10606#discussion_r495602016", "createdAt": "2020-09-27T18:40:26Z", "author": {"login": "normanmaurer"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringCompletionQueue.java", "diffHunk": "@@ -90,9 +90,9 @@ int process(IOUringCompletionQueueCallback callback) {\n             PlatformDependent.putIntOrdered(kHeadAddress, ringHead);\n \n             int fd = (int) (udata >>> 32);\n-            int opMask = (int) (udata & 0xFFFFFFFFL);\n-            int op = opMask >>> 16;\n-            int data = opMask & 0xffff;\n+            int opMask = (int) udata;\n+            int op = (short) (opMask >> 16);\n+            int data = (short) opMask;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58e09ecbe3a946465516fef05452154b9802219c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYwNzYzNg==", "bodyText": "Maybe you could you explain this one.. I may just not understand but thought here we basically want to slice up 64 bits in an unsigned manner? I'm not sure casting long to int / int to short is the best way to do that... in particular if the MSB is 1 then it will get mangled. It already looked right to me before (apart from the f/F inconsistency!).", "url": "https://github.com/netty/netty/pull/10606#discussion_r495607636", "createdAt": "2020-09-27T19:39:41Z", "author": {"login": "njhill"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringCompletionQueue.java", "diffHunk": "@@ -90,9 +90,9 @@ int process(IOUringCompletionQueueCallback callback) {\n             PlatformDependent.putIntOrdered(kHeadAddress, ringHead);\n \n             int fd = (int) (udata >>> 32);\n-            int opMask = (int) (udata & 0xFFFFFFFFL);\n-            int op = opMask >>> 16;\n-            int data = opMask & 0xffff;\n+            int opMask = (int) udata;\n+            int op = (short) (opMask >> 16);\n+            int data = (short) opMask;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYwMjAxNg=="}, "originalCommit": {"oid": "58e09ecbe3a946465516fef05452154b9802219c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcyMTY4Mw==", "bodyText": "the problem was that we did not handle negative values correctly. Like if we did use -1 as data. Let me do a separate PR with a test case to make it more clear", "url": "https://github.com/netty/netty/pull/10606#discussion_r495721683", "createdAt": "2020-09-28T06:48:54Z", "author": {"login": "normanmaurer"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringCompletionQueue.java", "diffHunk": "@@ -90,9 +90,9 @@ int process(IOUringCompletionQueueCallback callback) {\n             PlatformDependent.putIntOrdered(kHeadAddress, ringHead);\n \n             int fd = (int) (udata >>> 32);\n-            int opMask = (int) (udata & 0xFFFFFFFFL);\n-            int op = opMask >>> 16;\n-            int data = opMask & 0xffff;\n+            int opMask = (int) udata;\n+            int op = (short) (opMask >> 16);\n+            int data = (short) opMask;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYwMjAxNg=="}, "originalCommit": {"oid": "58e09ecbe3a946465516fef05452154b9802219c"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTczNzk5NQ==", "bodyText": "@njhill #10617", "url": "https://github.com/netty/netty/pull/10606#discussion_r495737995", "createdAt": "2020-09-28T07:25:34Z", "author": {"login": "normanmaurer"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringCompletionQueue.java", "diffHunk": "@@ -90,9 +90,9 @@ int process(IOUringCompletionQueueCallback callback) {\n             PlatformDependent.putIntOrdered(kHeadAddress, ringHead);\n \n             int fd = (int) (udata >>> 32);\n-            int opMask = (int) (udata & 0xFFFFFFFFL);\n-            int op = opMask >>> 16;\n-            int data = opMask & 0xffff;\n+            int opMask = (int) udata;\n+            int op = (short) (opMask >> 16);\n+            int data = (short) opMask;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTYwMjAxNg=="}, "originalCommit": {"oid": "58e09ecbe3a946465516fef05452154b9802219c"}, "originalPosition": 9}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzU5NTY5OnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODo0Nzo1M1rOHY0KRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODo0Nzo1M1rOHY0KRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc4MjQ2OA==", "bodyText": "Nice \ud83d\udc4d", "url": "https://github.com/netty/netty/pull/10606#discussion_r495782468", "createdAt": "2020-09-28T08:47:53Z", "author": {"login": "chrisvest"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannel.java", "diffHunk": "@@ -488,10 +486,10 @@ protected int scheduleRead0() {\n \n             if (isConnected() && numDatagram <= 1) {\n                 submissionQueue().addRead(socket.intValue(), byteBuf.memoryAddress(),\n-                        byteBuf.writerIndex(), byteBuf.capacity());\n+                        byteBuf.writerIndex(), byteBuf.capacity(), -1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58e09ecbe3a946465516fef05452154b9802219c"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTM1MTIwOnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTo0NToyNVrOHZEo6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTo0NToyNVrOHZEo6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA1MjQ1OQ==", "bodyText": "nit: else not needed", "url": "https://github.com/netty/netty/pull/10606#discussion_r496052459", "createdAt": "2020-09-28T15:45:25Z", "author": {"login": "njhill"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannel.java", "diffHunk": "@@ -451,43 +472,103 @@ protected void readComplete0(int res) {\n         }\n \n         @Override\n-        protected void scheduleRead0() {\n+        protected int scheduleRead0() {\n             final IOUringRecvByteAllocatorHandle allocHandle = recvBufAllocHandle();\n             ByteBuf byteBuf = allocHandle.allocate(alloc());\n-            IOUringSubmissionQueue submissionQueue = submissionQueue();\n-\n             assert readBuffer == null;\n             readBuffer = byteBuf;\n \n-            recvMsg = !isConnected();\n-            long bufferAddress = byteBuf.memoryAddress();\n-            allocHandle.attemptedBytesRead(byteBuf.writableBytes());\n+            int writable = byteBuf.writableBytes();\n+            allocHandle.attemptedBytesRead(writable);\n+            int datagramSize = config().getMaxDatagramPayloadSize();\n+\n+            int numDatagram = datagramSize == 0 ? 1 : Math.max(1, byteBuf.writableBytes() / datagramSize);\n+\n+            if (isConnected() && numDatagram <= 1) {\n+                submissionQueue().addRead(socket.intValue(), byteBuf.memoryAddress(),\n+                        byteBuf.writerIndex(), byteBuf.capacity(), -1);\n+                return 1;\n+            } else {\n+                int scheduled = scheduleRecvmsg(byteBuf, numDatagram, datagramSize);\n+                if (scheduled == 0) {\n+                    // We could not schedule any recvmmsg so we need to release the buffer as there will be no\n+                    // completion event.\n+                    readBuffer = null;\n+                    byteBuf.release();\n+                }\n+                return scheduled;\n+            }\n+        }\n \n-            if (!recvMsg) {\n-                submissionQueue.addRead(socket.intValue(), bufferAddress,\n-                        byteBuf.writerIndex(), byteBuf.capacity());\n+        private int scheduleRecvmsg(ByteBuf byteBuf, int numDatagram, int datagramSize) {\n+            int writable = byteBuf.writableBytes();\n+            IOUringSubmissionQueue submissionQueue = submissionQueue();\n+            long bufferAddress = byteBuf.memoryAddress() + byteBuf.writerIndex();\n+            if (numDatagram <= 1) {\n+                return scheduleRecvmsg0(submissionQueue, bufferAddress, writable) ? 1 : 0;\n             } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58e09ecbe3a946465516fef05452154b9802219c"}, "originalPosition": 276}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTM1MzcxOnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTo0NTo1OVrOHZEqgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTo0NTo1OVrOHZEqgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA1Mjg2NA==", "bodyText": "nit: else not needed", "url": "https://github.com/netty/netty/pull/10606#discussion_r496052864", "createdAt": "2020-09-28T15:45:59Z", "author": {"login": "njhill"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannel.java", "diffHunk": "@@ -451,43 +472,103 @@ protected void readComplete0(int res) {\n         }\n \n         @Override\n-        protected void scheduleRead0() {\n+        protected int scheduleRead0() {\n             final IOUringRecvByteAllocatorHandle allocHandle = recvBufAllocHandle();\n             ByteBuf byteBuf = allocHandle.allocate(alloc());\n-            IOUringSubmissionQueue submissionQueue = submissionQueue();\n-\n             assert readBuffer == null;\n             readBuffer = byteBuf;\n \n-            recvMsg = !isConnected();\n-            long bufferAddress = byteBuf.memoryAddress();\n-            allocHandle.attemptedBytesRead(byteBuf.writableBytes());\n+            int writable = byteBuf.writableBytes();\n+            allocHandle.attemptedBytesRead(writable);\n+            int datagramSize = config().getMaxDatagramPayloadSize();\n+\n+            int numDatagram = datagramSize == 0 ? 1 : Math.max(1, byteBuf.writableBytes() / datagramSize);\n+\n+            if (isConnected() && numDatagram <= 1) {\n+                submissionQueue().addRead(socket.intValue(), byteBuf.memoryAddress(),\n+                        byteBuf.writerIndex(), byteBuf.capacity(), -1);\n+                return 1;\n+            } else {\n+                int scheduled = scheduleRecvmsg(byteBuf, numDatagram, datagramSize);\n+                if (scheduled == 0) {\n+                    // We could not schedule any recvmmsg so we need to release the buffer as there will be no\n+                    // completion event.\n+                    readBuffer = null;\n+                    byteBuf.release();\n+                }\n+                return scheduled;\n+            }\n+        }\n \n-            if (!recvMsg) {\n-                submissionQueue.addRead(socket.intValue(), bufferAddress,\n-                        byteBuf.writerIndex(), byteBuf.capacity());\n+        private int scheduleRecvmsg(ByteBuf byteBuf, int numDatagram, int datagramSize) {\n+            int writable = byteBuf.writableBytes();\n+            IOUringSubmissionQueue submissionQueue = submissionQueue();\n+            long bufferAddress = byteBuf.memoryAddress() + byteBuf.writerIndex();\n+            if (numDatagram <= 1) {\n+                return scheduleRecvmsg0(submissionQueue, bufferAddress, writable) ? 1 : 0;\n             } else {\n-                int addrLen = addrLen();\n-                long recvmsgBufferAddr = recvmsgBufferAddr();\n-                long sockaddrAddress = recvmsgBufferAddr + Native.SIZEOF_MSGHDR;\n-                long iovecAddress = sockaddrAddress + addrLen;\n-\n-                Iov.write(iovecAddress, bufferAddress + byteBuf.writerIndex(), byteBuf.writableBytes());\n-                MsgHdr.write(recvmsgBufferAddr, sockaddrAddress, addrLen, iovecAddress, 1);\n-                submissionQueue.addRecvmsg(socket.intValue(), recvmsgBufferAddr);\n+                int i = 0;\n+                // Add multiple IORING_OP_RECVMSG to the submission queue. This basically emulates recvmmsg(...)\n+                for (; i < numDatagram && writable >= datagramSize; i++) {\n+                    if (!scheduleRecvmsg0(submissionQueue, bufferAddress, datagramSize)) {\n+                        break;\n+                    }\n+                    bufferAddress += datagramSize;\n+                    writable -= datagramSize;\n+                }\n+                return i;\n             }\n         }\n \n-        private int addrLen() {\n-            return socket.isIpv6() ? Native.SIZEOF_SOCKADDR_IN6 :\n-                    Native.SIZEOF_SOCKADDR_IN;\n+        private boolean scheduleRecvmsg0(IOUringSubmissionQueue submissionQueue, long bufferAddress, int bufferLength) {\n+            MsgHdrMemory msgHdrMemory = recvmsgHdrs.nextHdr();\n+            if (msgHdrMemory == null) {\n+                // We can not continue reading before we did not submit the recvmsg(s) and received the results.\n+                return false;\n+            }\n+            msgHdrMemory.write(socket, null, bufferAddress, bufferLength);\n+            // We always use idx here so we can detect if no idx was used by checking if data < 0 in\n+            // readComplete0(...)\n+            submissionQueue.addRecvmsg(socket.intValue(), msgHdrMemory.address(), msgHdrMemory.idx());\n+            return true;\n         }\n \n         @Override\n-        protected void removeFromOutboundBuffer(ChannelOutboundBuffer outboundBuffer, int bytes) {\n-            // When using Datagram we should consider the message written as long as there were any bytes written.\n-            boolean removed = outboundBuffer.remove();\n-            assert removed;\n+        boolean writeComplete0(int res, int data, int outstanding) {\n+            ChannelOutboundBuffer outboundBuffer = outboundBuffer();\n+            if (data == -1) {\n+                assert outstanding == 0;\n+                // idx == -1 means that we did a write(...) and not a sendmsg(...) operation\n+                return removeFromOutboundBuffer(outboundBuffer, res, \"io_uring write\");\n+            } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58e09ecbe3a946465516fef05452154b9802219c"}, "originalPosition": 325}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTM1NTIwOnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTo0NjoxOFrOHZErYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTo0NjoxOFrOHZErYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA1MzA5MA==", "bodyText": "nit: else not needed", "url": "https://github.com/netty/netty/pull/10606#discussion_r496053090", "createdAt": "2020-09-28T15:46:18Z", "author": {"login": "njhill"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringDatagramChannel.java", "diffHunk": "@@ -451,43 +472,103 @@ protected void readComplete0(int res) {\n         }\n \n         @Override\n-        protected void scheduleRead0() {\n+        protected int scheduleRead0() {\n             final IOUringRecvByteAllocatorHandle allocHandle = recvBufAllocHandle();\n             ByteBuf byteBuf = allocHandle.allocate(alloc());\n-            IOUringSubmissionQueue submissionQueue = submissionQueue();\n-\n             assert readBuffer == null;\n             readBuffer = byteBuf;\n \n-            recvMsg = !isConnected();\n-            long bufferAddress = byteBuf.memoryAddress();\n-            allocHandle.attemptedBytesRead(byteBuf.writableBytes());\n+            int writable = byteBuf.writableBytes();\n+            allocHandle.attemptedBytesRead(writable);\n+            int datagramSize = config().getMaxDatagramPayloadSize();\n+\n+            int numDatagram = datagramSize == 0 ? 1 : Math.max(1, byteBuf.writableBytes() / datagramSize);\n+\n+            if (isConnected() && numDatagram <= 1) {\n+                submissionQueue().addRead(socket.intValue(), byteBuf.memoryAddress(),\n+                        byteBuf.writerIndex(), byteBuf.capacity(), -1);\n+                return 1;\n+            } else {\n+                int scheduled = scheduleRecvmsg(byteBuf, numDatagram, datagramSize);\n+                if (scheduled == 0) {\n+                    // We could not schedule any recvmmsg so we need to release the buffer as there will be no\n+                    // completion event.\n+                    readBuffer = null;\n+                    byteBuf.release();\n+                }\n+                return scheduled;\n+            }\n+        }\n \n-            if (!recvMsg) {\n-                submissionQueue.addRead(socket.intValue(), bufferAddress,\n-                        byteBuf.writerIndex(), byteBuf.capacity());\n+        private int scheduleRecvmsg(ByteBuf byteBuf, int numDatagram, int datagramSize) {\n+            int writable = byteBuf.writableBytes();\n+            IOUringSubmissionQueue submissionQueue = submissionQueue();\n+            long bufferAddress = byteBuf.memoryAddress() + byteBuf.writerIndex();\n+            if (numDatagram <= 1) {\n+                return scheduleRecvmsg0(submissionQueue, bufferAddress, writable) ? 1 : 0;\n             } else {\n-                int addrLen = addrLen();\n-                long recvmsgBufferAddr = recvmsgBufferAddr();\n-                long sockaddrAddress = recvmsgBufferAddr + Native.SIZEOF_MSGHDR;\n-                long iovecAddress = sockaddrAddress + addrLen;\n-\n-                Iov.write(iovecAddress, bufferAddress + byteBuf.writerIndex(), byteBuf.writableBytes());\n-                MsgHdr.write(recvmsgBufferAddr, sockaddrAddress, addrLen, iovecAddress, 1);\n-                submissionQueue.addRecvmsg(socket.intValue(), recvmsgBufferAddr);\n+                int i = 0;\n+                // Add multiple IORING_OP_RECVMSG to the submission queue. This basically emulates recvmmsg(...)\n+                for (; i < numDatagram && writable >= datagramSize; i++) {\n+                    if (!scheduleRecvmsg0(submissionQueue, bufferAddress, datagramSize)) {\n+                        break;\n+                    }\n+                    bufferAddress += datagramSize;\n+                    writable -= datagramSize;\n+                }\n+                return i;\n             }\n         }\n \n-        private int addrLen() {\n-            return socket.isIpv6() ? Native.SIZEOF_SOCKADDR_IN6 :\n-                    Native.SIZEOF_SOCKADDR_IN;\n+        private boolean scheduleRecvmsg0(IOUringSubmissionQueue submissionQueue, long bufferAddress, int bufferLength) {\n+            MsgHdrMemory msgHdrMemory = recvmsgHdrs.nextHdr();\n+            if (msgHdrMemory == null) {\n+                // We can not continue reading before we did not submit the recvmsg(s) and received the results.\n+                return false;\n+            }\n+            msgHdrMemory.write(socket, null, bufferAddress, bufferLength);\n+            // We always use idx here so we can detect if no idx was used by checking if data < 0 in\n+            // readComplete0(...)\n+            submissionQueue.addRecvmsg(socket.intValue(), msgHdrMemory.address(), msgHdrMemory.idx());\n+            return true;\n         }\n \n         @Override\n-        protected void removeFromOutboundBuffer(ChannelOutboundBuffer outboundBuffer, int bytes) {\n-            // When using Datagram we should consider the message written as long as there were any bytes written.\n-            boolean removed = outboundBuffer.remove();\n-            assert removed;\n+        boolean writeComplete0(int res, int data, int outstanding) {\n+            ChannelOutboundBuffer outboundBuffer = outboundBuffer();\n+            if (data == -1) {\n+                assert outstanding == 0;\n+                // idx == -1 means that we did a write(...) and not a sendmsg(...) operation\n+                return removeFromOutboundBuffer(outboundBuffer, res, \"io_uring write\");\n+            } else {\n+                // Store the result so we can handle it as soon as we have no outstanding writes anymore.\n+                sendmsgResArray[data] = res;\n+                if (outstanding == 0) {\n+                    // All writes are done as part of a batch. Let's remove these from the ChannelOutboundBuffer\n+                    boolean writtenSomething = false;\n+                    int numWritten = sendmsgHdrs.length();\n+                    sendmsgHdrs.clear();\n+                    for (int i = 0; i < numWritten; i++) {\n+                        writtenSomething |= removeFromOutboundBuffer(\n+                                outboundBuffer, sendmsgResArray[i], \"io_uring sendmsg\");\n+                    }\n+                    return writtenSomething;\n+                }\n+                return true;\n+            }\n+        }\n+\n+        private boolean removeFromOutboundBuffer(ChannelOutboundBuffer outboundBuffer, int res, String errormsg) {\n+            if (res >= 0) {\n+                // When using Datagram we should consider the message written as long as res is not negative.\n+                return outboundBuffer.remove();\n+            } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58e09ecbe3a946465516fef05452154b9802219c"}, "originalPosition": 347}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTM1NzY5OnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/Iov.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTo0Njo1N1rOHZEs8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTo0Njo1N1rOHZEs8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA1MzQ4OA==", "bodyText": "nit: else not needed", "url": "https://github.com/netty/netty/pull/10606#discussion_r496053488", "createdAt": "2020-09-28T15:46:57Z", "author": {"login": "njhill"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/Iov.java", "diffHunk": "@@ -37,4 +37,22 @@ static void write(long iovAddress, long bufferAddress, int length) {\n             PlatformDependent.putLong(iovAddress + Native.IOVEC_OFFSETOF_IOV_LEN, length);\n         }\n     }\n+\n+    static long readBufferAddress(long iovAddress) {\n+        if (Native.SIZEOF_SIZE_T == 4) {\n+            return PlatformDependent.getInt(iovAddress + Native.IOVEC_OFFSETOF_IOV_BASE);\n+        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58e09ecbe3a946465516fef05452154b9802219c"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTM1NzkzOnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/Iov.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTo0NzowMlrOHZEtGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTo0NzowMlrOHZEtGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA1MzUzMA==", "bodyText": "nit: else not needed", "url": "https://github.com/netty/netty/pull/10606#discussion_r496053530", "createdAt": "2020-09-28T15:47:02Z", "author": {"login": "njhill"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/Iov.java", "diffHunk": "@@ -37,4 +37,22 @@ static void write(long iovAddress, long bufferAddress, int length) {\n             PlatformDependent.putLong(iovAddress + Native.IOVEC_OFFSETOF_IOV_LEN, length);\n         }\n     }\n+\n+    static long readBufferAddress(long iovAddress) {\n+        if (Native.SIZEOF_SIZE_T == 4) {\n+            return PlatformDependent.getInt(iovAddress + Native.IOVEC_OFFSETOF_IOV_BASE);\n+        } else {\n+            assert Native.SIZEOF_SIZE_T == 8;\n+            return PlatformDependent.getLong(iovAddress + Native.IOVEC_OFFSETOF_IOV_BASE);\n+        }\n+    }\n+\n+    static int readBufferLength(long iovAddress) {\n+        if (Native.SIZEOF_SIZE_T == 4) {\n+            return PlatformDependent.getInt(iovAddress + Native.IOVEC_OFFSETOF_IOV_LEN);\n+        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58e09ecbe3a946465516fef05452154b9802219c"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3768, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}