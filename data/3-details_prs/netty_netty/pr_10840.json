{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMyOTUzOTA1", "number": 10840, "title": "Improve performance of HPACK static table lookup", "bodyText": "Motivation:\nHPACK static table is organized in a way that fields with the same name are sequential. Which means when doing sequential scan we can short-circuit scan on name mismatch.\nModifications:\n\nHpackStaticTable.getIndexIndensitive returns -1 on name mismatch rather than keep scanning.\n\nResult:\nBetter HPACK static table lookup performance.", "createdAt": "2020-12-05T07:45:51Z", "url": "https://github.com/netty/netty/pull/10840", "merged": true, "mergeCommit": {"oid": "ab8c4f22c6bc11b7082fddfc6890fd02f30d5524"}, "closed": true, "closedAt": "2020-12-21T14:34:05Z", "author": {"login": "kachayev"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdjUS6ygFqTU0NTY1NTEwNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdmq-PMgH2gAyNTMyOTUzOTA1OjBmMjJkNWFjYmFmNjJhY2Y4MTNhOWU4ZjgxMzhjYjBkNzU5ZDU1NDc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NjU1MTA0", "url": "https://github.com/netty/netty/pull/10840#pullrequestreview-545655104", "createdAt": "2020-12-05T22:43:21Z", "commit": {"oid": "62078dbf7e117c624c89183964af8af50f0bae51"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQyMjo0MzoyMVrOIACMww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQyMjo0MzoyMVrOIACMww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkwNjk0Nw==", "bodyText": "Optional idea: at index values above 15 have no other duplicate values.  I think it should be possible to break the loop here if the index is above 15", "url": "https://github.com/netty/netty/pull/10840#discussion_r536906947", "createdAt": "2020-12-05T22:43:21Z", "author": {"login": "carl-mastrangelo"}, "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/HpackStaticTable.java", "diffHunk": "@@ -147,20 +149,26 @@ static int getIndex(CharSequence name) {\n      */\n     static int getIndexInsensitive(CharSequence name, CharSequence value) {\n         int index = getIndex(name);\n-        if (index == -1) {\n-            return -1;\n+        if (index == NOT_FOUND) {\n+            return NOT_FOUND;\n         }\n \n         // Note this assumes all entries for a given header field are sequential.\n         while (index <= length) {\n             HpackHeaderField entry = getEntry(index);\n-            if (equalsVariableTime(name, entry.name) && equalsVariableTime(value, entry.value)) {\n+            if (!equalsVariableTime(name, entry.name)) {\n+                // As far as fields with the same name are placed in the table sequentialy\n+                // and INDEX_BY_NAME returns index of the fist position, - it's safe to\n+                // exit immediatly.\n+                return NOT_FOUND;\n+            }\n+            if (equalsVariableTime(value, entry.value)) {\n                 return index;\n             }\n             index++;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "62078dbf7e117c624c89183964af8af50f0bae51"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f2295f41d0a628c35480babecd7e84e9ef27d327", "author": {"user": {"login": "kachayev", "name": "Oleksii Kachaiev"}}, "url": "https://github.com/netty/netty/commit/f2295f41d0a628c35480babecd7e84e9ef27d327", "committedDate": "2020-12-14T07:55:49Z", "message": "Improve performance of HPACK static table lookup\n\nMotivation:\n\nHPACK static table is organized in a way that fields with the same\nname are sequential. Which means when doing sequential scan we can\nshort-circuit scan on name mismatch.\n\nModifications:\n\n* `HpackStaticTable.getIndexIndensitive` returns -1 on name mismatch\nrather than keep scanning.\n* `HpackStaticTable` statically defined max position in the array\nwhere name duplication is possible (after the given index there's\nno need to check for other fields with the same name)\n* Benchmark for different lookup patterns\n\nResult:\n\nBetter HPACK static table lookup performance."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "62078dbf7e117c624c89183964af8af50f0bae51", "author": {"user": {"login": "kachayev", "name": "Oleksii Kachaiev"}}, "url": "https://github.com/netty/netty/commit/62078dbf7e117c624c89183964af8af50f0bae51", "committedDate": "2020-12-05T07:35:19Z", "message": "Improve performance of HPACK static table lookup\n\nMotivation:\n\nHPACK static table is organized in a way that fields with the same\nname are sequential. Which means when doing sequential scan we can\nshort-circuit scan on name mismatch.\n\nModifications:\n\n* `HpackStaticTable.getIndexIndensitive` returns -1 on name mismatch\nrather than keep scanning.\n\nResult:\n\nBetter HPACK static table lookup performance."}, "afterCommit": {"oid": "f2295f41d0a628c35480babecd7e84e9ef27d327", "author": {"user": {"login": "kachayev", "name": "Oleksii Kachaiev"}}, "url": "https://github.com/netty/netty/commit/f2295f41d0a628c35480babecd7e84e9ef27d327", "committedDate": "2020-12-14T07:55:49Z", "message": "Improve performance of HPACK static table lookup\n\nMotivation:\n\nHPACK static table is organized in a way that fields with the same\nname are sequential. Which means when doing sequential scan we can\nshort-circuit scan on name mismatch.\n\nModifications:\n\n* `HpackStaticTable.getIndexIndensitive` returns -1 on name mismatch\nrather than keep scanning.\n* `HpackStaticTable` statically defined max position in the array\nwhere name duplication is possible (after the given index there's\nno need to check for other fields with the same name)\n* Benchmark for different lookup patterns\n\nResult:\n\nBetter HPACK static table lookup performance."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTUyMTU4MzQ5", "url": "https://github.com/netty/netty/pull/10840#pullrequestreview-552158349", "createdAt": "2020-12-15T07:09:30Z", "commit": {"oid": "f2295f41d0a628c35480babecd7e84e9ef27d327"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNzowOTozMFrOIF8DvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xNVQwNzowOTo1M1rOIF8EXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA5Nzc4OA==", "bodyText": "You either should use a BlackHole or let the methods return something. Otherwise these calls may be optimised away ... This is true for all methods here", "url": "https://github.com/netty/netty/pull/10840#discussion_r543097788", "createdAt": "2020-12-15T07:09:30Z", "author": {"login": "normanmaurer"}, "path": "microbench/src/main/java/io/netty/handler/codec/http2/HpackStaticTableBenchmark.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http2;\n+\n+import io.netty.microbench.util.AbstractMicrobenchmark;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import io.netty.util.AsciiString;\n+\n+@Fork(1)\n+@Threads(1)\n+@State(Scope.Benchmark)\n+@Warmup(iterations = 5)\n+@Measurement(iterations = 5)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+public class HpackStaticTableBenchmark extends AbstractMicrobenchmark {\n+\n+    private static final CharSequence X_CONTENT_ENCODING = new AsciiString(\"x-content-encoding\".getBytes(), false);\n+    private static final CharSequence X_GZIP = new AsciiString(\"x-gzip\".getBytes(), false);\n+    private static final CharSequence STATUS = new AsciiString(\":status\".getBytes(), false);\n+    private static final CharSequence STATUS_200 = new AsciiString(\"200\".getBytes(), false);\n+    private static final CharSequence STATUS_500 = new AsciiString(\"500\".getBytes(), false);\n+    private static final CharSequence AUTHORITY = new AsciiString(\":authority\".getBytes(), false);\n+    private static final CharSequence AUTHORITY_NETTY = new AsciiString(\"netty.io\".getBytes(), false);\n+    private static final CharSequence USER_AGENT = new AsciiString(\"user-agent\".getBytes(), false);\n+    private static final CharSequence USER_AGENT_CURL = new AsciiString(\"curl/7.64.1\".getBytes(), false);\n+\n+    @Benchmark\n+    @BenchmarkMode(Mode.AverageTime)\n+    public void lookupNoNameMatch() {\n+        HpackStaticTable.getIndexInsensitive(X_CONTENT_ENCODING, X_GZIP);\n+    }\n+\n+    @Benchmark\n+    @BenchmarkMode(Mode.AverageTime)\n+    public void lookupNameAndValueMatchFirst() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2295f41d0a628c35480babecd7e84e9ef27d327"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MzA5Nzk1MQ==", "bodyText": "use getBytes(Charset).... This is true for all lines above.", "url": "https://github.com/netty/netty/pull/10840#discussion_r543097951", "createdAt": "2020-12-15T07:09:53Z", "author": {"login": "normanmaurer"}, "path": "microbench/src/main/java/io/netty/handler/codec/http2/HpackStaticTableBenchmark.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http2;\n+\n+import io.netty.microbench.util.AbstractMicrobenchmark;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+import io.netty.util.AsciiString;\n+\n+@Fork(1)\n+@Threads(1)\n+@State(Scope.Benchmark)\n+@Warmup(iterations = 5)\n+@Measurement(iterations = 5)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+public class HpackStaticTableBenchmark extends AbstractMicrobenchmark {\n+\n+    private static final CharSequence X_CONTENT_ENCODING = new AsciiString(\"x-content-encoding\".getBytes(), false);\n+    private static final CharSequence X_GZIP = new AsciiString(\"x-gzip\".getBytes(), false);\n+    private static final CharSequence STATUS = new AsciiString(\":status\".getBytes(), false);\n+    private static final CharSequence STATUS_200 = new AsciiString(\"200\".getBytes(), false);\n+    private static final CharSequence STATUS_500 = new AsciiString(\"500\".getBytes(), false);\n+    private static final CharSequence AUTHORITY = new AsciiString(\":authority\".getBytes(), false);\n+    private static final CharSequence AUTHORITY_NETTY = new AsciiString(\"netty.io\".getBytes(), false);\n+    private static final CharSequence USER_AGENT = new AsciiString(\"user-agent\".getBytes(), false);\n+    private static final CharSequence USER_AGENT_CURL = new AsciiString(\"curl/7.64.1\".getBytes(), false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f2295f41d0a628c35480babecd7e84e9ef27d327"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09221ba7a6e94e4876f303f85d83dd7b6ad893bc", "author": {"user": {"login": "normanmaurer", "name": "Norman Maurer"}}, "url": "https://github.com/netty/netty/commit/09221ba7a6e94e4876f303f85d83dd7b6ad893bc", "committedDate": "2020-12-15T13:57:14Z", "message": "Fix up benchmark"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0f22d5acbaf62acf813a9e8f8138cb0d759d5547", "author": {"user": {"login": "normanmaurer", "name": "Norman Maurer"}}, "url": "https://github.com/netty/netty/commit/0f22d5acbaf62acf813a9e8f8138cb0d759d5547", "committedDate": "2020-12-16T08:50:21Z", "message": "Address last comments"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4867, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}