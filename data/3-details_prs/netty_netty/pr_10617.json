{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzOTQzMDAz", "number": 10617, "title": "Fix bitmasking / bitshifting code to encode / decode user data", "bodyText": "Motivation:\nOur bitmasking / shifting did not correctly handle negative values.\nModifications:\n\nChange methods to allow passing user data\nfix bitmasking / bitshifting code\nAdd unit test\n\nResult:\nBe able to pass in negative values as well", "createdAt": "2020-09-28T07:25:04Z", "url": "https://github.com/netty/netty/pull/10617", "merged": true, "mergeCommit": {"oid": "d266af2778bdfdffef91af37ddf07fe50a3f9cd4"}, "closed": true, "closedAt": "2020-09-29T11:09:34Z", "author": {"login": "normanmaurer"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdNOayjgH2gAyNDkzOTQzMDAzOmVhNWE1MzliYzYwYWQyOWQ0MDg5NTg0NDA1MWM2MWU0ODIzMzhjYzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdNlU1tAFqTQ5ODMxMjc3MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ea5a539bc60ad29d40895844051c61e482338cc0", "author": {"user": {"login": "normanmaurer", "name": "Norman Maurer"}}, "url": "https://github.com/netty/netty/commit/ea5a539bc60ad29d40895844051c61e482338cc0", "committedDate": "2020-09-28T07:26:11Z", "message": "Fix bitmasking / bitshifting code to encode / decode user data\n\nMotivation:\n\nOur bitmasking / shifting did not correctly handle negative values.\n\nModifications:\n\n- Change methods to allow passing user data\n- fix bitmasking / bitshifting code\n- Add unit test\n\nResult:\n\nBe able to pass in negative values as well"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3e458867f265f78dbca71498ec5594012e0501e1", "author": {"user": {"login": "normanmaurer", "name": "Norman Maurer"}}, "url": "https://github.com/netty/netty/commit/3e458867f265f78dbca71498ec5594012e0501e1", "committedDate": "2020-09-28T07:22:56Z", "message": "Fix bitmasking / bitshifting code to encode / decode user data\n\nMotivation:\n\nOur bitmasking / shifting did not correctly handle negative values.\n\nModifications:\n\n- Change methods to allow passing user data\n- fix bitmasking / bitshifting code\n- Add unit test\n\nResult:\n\nBe able to pass in negative values as well"}, "afterCommit": {"oid": "ea5a539bc60ad29d40895844051c61e482338cc0", "author": {"user": {"login": "normanmaurer", "name": "Norman Maurer"}}, "url": "https://github.com/netty/netty/commit/ea5a539bc60ad29d40895844051c61e482338cc0", "committedDate": "2020-09-28T07:26:11Z", "message": "Fix bitmasking / bitshifting code to encode / decode user data\n\nMotivation:\n\nOur bitmasking / shifting did not correctly handle negative values.\n\nModifications:\n\n- Change methods to allow passing user data\n- fix bitmasking / bitshifting code\n- Add unit test\n\nResult:\n\nBe able to pass in negative values as well"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3MzEzNDc2", "url": "https://github.com/netty/netty/pull/10617#pullrequestreview-497313476", "createdAt": "2020-09-28T08:56:49Z", "commit": {"oid": "ea5a539bc60ad29d40895844051c61e482338cc0"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODo1Njo0OVrOHY0evg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwOTowMDo1M1rOHY0opA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc4NzcxMA==", "bodyText": "It looks a bit weird that the data section is the lower bits, plus the sign bit. How is the sign bit not also included in the op value here? Maybe it's clearer to place the op in the lower bits, and data in the upper bits.", "url": "https://github.com/netty/netty/pull/10617#discussion_r495787710", "createdAt": "2020-09-28T08:56:49Z", "author": {"login": "chrisvest"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringCompletionQueue.java", "diffHunk": "@@ -84,9 +84,9 @@ int process(IOUringCompletionQueueCallback callback) {\n             PlatformDependent.putIntOrdered(kHeadAddress, ringHead);\n \n             int fd = (int) (udata >>> 32);\n-            int opMask = (int) (udata & 0xFFFFFFFFL);\n+            int opMask = (int) udata;\n             int op = opMask >>> 16;\n-            int data = opMask & 0xffff;\n+            int data = (short) opMask;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea5a539bc60ad29d40895844051c61e482338cc0"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc5MDI0NA==", "bodyText": "If encoding and decoding were package-private static methods, ideally placed next to each other in some utility class, the code might be cleaner and we could simplify this test a bit.", "url": "https://github.com/netty/netty/pull/10617#discussion_r495790244", "createdAt": "2020-09-28T09:00:53Z", "author": {"login": "chrisvest"}, "path": "transport-native-io_uring/src/test/java/io/netty/channel/uring/NativeTest.java", "diffHunk": "@@ -270,4 +270,31 @@ public void run() {\n             ringBuffer.close();\n         }\n     }\n+\n+    @Test\n+    public void testUserData() {\n+        RingBuffer ringBuffer = Native.createRingBuffer(32);\n+        IOUringSubmissionQueue submissionQueue = ringBuffer.ioUringSubmissionQueue();\n+        final IOUringCompletionQueue completionQueue = ringBuffer.ioUringCompletionQueue();\n+\n+        try {\n+            // Ensure userdata works with negative and positive values\n+            for (int i = Short.MIN_VALUE; i <= Short.MAX_VALUE; i++) {\n+                submissionQueue.addWrite(-1, -1, -1, -1, i);\n+                assertEquals(1, submissionQueue.submitAndWait());\n+                final int expectedData = i;\n+                assertEquals(1, completionQueue.process(new IOUringCompletionQueue.IOUringCompletionQueueCallback() {\n+                    @Override\n+                    public void handle(int fd, int res, int flags, int op, int data) {\n+                        assertEquals(-1, fd);\n+                        assertTrue(res < 0);\n+                        assertEquals(Native.IORING_OP_WRITE, op);\n+                        assertEquals(expectedData, data);\n+                    }\n+                }));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea5a539bc60ad29d40895844051c61e482338cc0"}, "originalPosition": 61}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e05431651155ab5ce51af9ecd44ca43279206112", "author": {"user": {"login": "normanmaurer", "name": "Norman Maurer"}}, "url": "https://github.com/netty/netty/commit/e05431651155ab5ce51af9ecd44ca43279206112", "committedDate": "2020-09-28T16:17:39Z", "message": "Chris suggestion"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3NzA0Nzg1", "url": "https://github.com/netty/netty/pull/10617#pullrequestreview-497704785", "createdAt": "2020-09-28T16:34:09Z", "commit": {"oid": "e05431651155ab5ce51af9ecd44ca43279206112"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjozNDoxMFrOHZGlgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjozNDoxMFrOHZGlgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA4NDM1Mg==", "bodyText": "Oops, we also need a line break here.", "url": "https://github.com/netty/netty/pull/10617#discussion_r496084352", "createdAt": "2020-09-28T16:34:10Z", "author": {"login": "chrisvest"}, "path": "transport-native-io_uring/src/test/java/io/netty/channel/uring/UserDataTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.channel.uring;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+public class UserDataTest {\n+    @Test\n+    public void testUserData() {\n+        // Ensure userdata works with negative and positive values\n+        for (int fd : new int[] { 0, 1, 10, Short.MAX_VALUE, Integer.MAX_VALUE }) {\n+            for (int op = 0; op < 20; op++) {\n+                for (int data = Short.MIN_VALUE; data <= Short.MAX_VALUE; data++) {\n+                    final int expectedFd = fd;\n+                    final int expectedOp = op;\n+                    final int expectedData = data;\n+                    long udata = UserData.encode(expectedFd, expectedOp, expectedData);\n+                    UserData.decode(0, 0, udata, new IOUringCompletionQueueCallback() {\n+                        @Override\n+                        public void handle(int actualFd, int res, int flags, int actualOp, int actualData) {\n+                            assertEquals(expectedFd, actualFd);\n+                            assertEquals(expectedOp, actualOp);\n+                            assertEquals(expectedData, actualData);\n+                        }\n+                    });\n+                }\n+            }\n+        }\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e05431651155ab5ce51af9ecd44ca43279206112"}, "originalPosition": 45}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "671566795da6888af8f431e864551cb9cd5a5f62", "author": {"user": {"login": "normanmaurer", "name": "Norman Maurer"}}, "url": "https://github.com/netty/netty/commit/671566795da6888af8f431e864551cb9cd5a5f62", "committedDate": "2020-09-28T16:50:23Z", "message": "Use short"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk3NzU5MTE2", "url": "https://github.com/netty/netty/pull/10617#pullrequestreview-497759116", "createdAt": "2020-09-28T17:43:23Z", "commit": {"oid": "671566795da6888af8f431e864551cb9cd5a5f62"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4MzEyNzcw", "url": "https://github.com/netty/netty/pull/10617#pullrequestreview-498312770", "createdAt": "2020-09-29T10:07:30Z", "commit": {"oid": "671566795da6888af8f431e864551cb9cd5a5f62"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 73, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}