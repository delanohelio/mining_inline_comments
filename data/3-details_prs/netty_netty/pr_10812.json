{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1MzAzNDE1", "number": 10812, "title": "Add ConnAck message builder method to handle the creation of related properties", "bodyText": "Motivation:\nThe CONNACK message builder ConnAckBuilder doesn't provide a smooth way to assign the message properties. This PR try to provide an simpler way to create them, in a lazy way.\nModification:\nThis PR permit to store properties in the ConnAck message, collecting them and inserting during the build phase. The syntax this PR introduces is:\n MqttMessageBuilders.connAck().properties(new MqttMessageBuilders.PropertiesInitializer<MqttMessageBuilders.ConnAckPropertiesBuilder>() {\n        @Override\n        public void accept(MqttMessageBuilders.ConnAckPropertiesBuilder builder) {\n            builder.assignedClientId(\"client1234\");\n            builder.userProperty(\"custom_property\", \"value\");\n         }\n }).build()\nThe name of the properties are defined in the ConnAckPropertiesBuilder so that is can be easily used by autocompletion tools.\nThis PR adds the builder class ConnAckPropertiesBuilderwhich is used by newly introduced method properties inside the message builder class ConnAckBuilder.", "createdAt": "2020-11-22T15:47:14Z", "url": "https://github.com/netty/netty/pull/10812", "merged": true, "mergeCommit": {"oid": "01d44ff592e0b3a50527e0c65df8812f6923d378"}, "closed": true, "closedAt": "2020-12-23T09:50:09Z", "author": {"login": "andsel"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfC3OUgBqjQwMjQ5MzA5MDk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdo8A-5gFqTU1Nzc1OTA3OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a24221d6bac04337a5d18d58b7ffc799810b69fb", "author": {"user": {"login": "andsel", "name": "Andrea Selva"}}, "url": "https://github.com/netty/netty/commit/a24221d6bac04337a5d18d58b7ffc799810b69fb", "committedDate": "2020-11-22T15:37:24Z", "message": "Add ConnAck message builder method to handle the creation of related properties"}, "afterCommit": {"oid": "50a6f8c7f198a7a7a94bfde4b53f8ffbce9a1ccc", "author": {"user": {"login": "andsel", "name": "Andrea Selva"}}, "url": "https://github.com/netty/netty/commit/50a6f8c7f198a7a7a94bfde4b53f8ffbce9a1ccc", "committedDate": "2020-11-22T16:08:41Z", "message": "Add ConnAck message builder method to handle the creation of related properties"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "50a6f8c7f198a7a7a94bfde4b53f8ffbce9a1ccc", "author": {"user": {"login": "andsel", "name": "Andrea Selva"}}, "url": "https://github.com/netty/netty/commit/50a6f8c7f198a7a7a94bfde4b53f8ffbce9a1ccc", "committedDate": "2020-11-22T16:08:41Z", "message": "Add ConnAck message builder method to handle the creation of related properties"}, "afterCommit": {"oid": "d8c67b5761a6ae5d6e738cfbc47b80fe855d794e", "author": {"user": {"login": "andsel", "name": "Andrea Selva"}}, "url": "https://github.com/netty/netty/commit/d8c67b5761a6ae5d6e738cfbc47b80fe855d794e", "committedDate": "2020-11-22T16:21:08Z", "message": "Add ConnAck message builder method to handle the creation of related properties"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5MTk0MzY5", "url": "https://github.com/netty/netty/pull/10812#pullrequestreview-539194369", "createdAt": "2020-11-26T10:39:01Z", "commit": {"oid": "d8c67b5761a6ae5d6e738cfbc47b80fe855d794e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMDozOTowMVrOH6VnAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMDo0MDowMlrOH6Vpcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkzMzUwNA==", "bodyText": "final ?", "url": "https://github.com/netty/netty/pull/10812#discussion_r530933504", "createdAt": "2020-11-26T10:39:01Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageBuilders.java", "diffHunk": "@@ -328,6 +345,166 @@ public MqttConnAckMessage build() {\n         }\n     }\n \n+    public static class ConnAckPropertiesBuilder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8c67b5761a6ae5d6e738cfbc47b80fe855d794e"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkzMzc5Nw==", "bodyText": "usually builders should return itself so you can use method chaining", "url": "https://github.com/netty/netty/pull/10812#discussion_r530933797", "createdAt": "2020-11-26T10:39:30Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageBuilders.java", "diffHunk": "@@ -328,6 +345,166 @@ public MqttConnAckMessage build() {\n         }\n     }\n \n+    public static class ConnAckPropertiesBuilder {\n+        private String clientId;\n+        private Long sessionExpiryInterval;\n+        private int receiveMaximum;\n+        private Byte maximumQos;\n+        private boolean retain;\n+        private Long maximumPacketSize;\n+        private int topicAliasMaximum;\n+        private String reasonString;\n+        private MqttProperties.UserProperties userProperties = new MqttProperties.UserProperties();\n+        private Boolean wildcardSubscriptionAvailable;\n+        private Boolean subscriptionIdentifiersAvailable;\n+        private Boolean sharedSubscriptionAvailable;\n+        private Integer serverKeepAlive;\n+        private String responseInformation;\n+        private String serverReference;\n+        private String authenticationMethod;\n+        private byte[] authenticationData;\n+\n+        public MqttProperties build() {\n+            final MqttProperties props = new MqttProperties();\n+            if (clientId != null) {\n+                props.add(new MqttProperties.StringProperty(MqttPropertyType.ASSIGNED_CLIENT_IDENTIFIER.value(),\n+                        clientId));\n+            }\n+            if (sessionExpiryInterval != null) {\n+                props.add(new MqttProperties.IntegerProperty(\n+                        MqttPropertyType.SESSION_EXPIRY_INTERVAL.value(), sessionExpiryInterval.intValue()));\n+            }\n+            if (receiveMaximum > 0) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.RECEIVE_MAXIMUM.value(), receiveMaximum));\n+            }\n+            if (maximumQos != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.MAXIMUM_QOS.value(), receiveMaximum));\n+            }\n+            props.add(new MqttProperties.IntegerProperty(MqttPropertyType.RETAIN_AVAILABLE.value(), retain ? 1 : 0));\n+            if (maximumPacketSize != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.MAXIMUM_PACKET_SIZE.value(),\n+                        maximumPacketSize.intValue()));\n+            }\n+            props.add(new MqttProperties.IntegerProperty(MqttPropertyType.TOPIC_ALIAS_MAXIMUM.value(),\n+                    topicAliasMaximum));\n+            if (reasonString != null) {\n+                props.add(new MqttProperties.StringProperty(MqttPropertyType.REASON_STRING.value(), reasonString));\n+            }\n+            props.add(userProperties);\n+            if (wildcardSubscriptionAvailable != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.WILDCARD_SUBSCRIPTION_AVAILABLE.value(),\n+                        wildcardSubscriptionAvailable ? 1 : 0));\n+            }\n+            if (subscriptionIdentifiersAvailable != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.SUBSCRIPTION_IDENTIFIER_AVAILABLE.value(),\n+                        subscriptionIdentifiersAvailable ? 1 : 0));\n+            }\n+            if (sharedSubscriptionAvailable != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.SHARED_SUBSCRIPTION_AVAILABLE.value(),\n+                        sharedSubscriptionAvailable ? 1 : 0));\n+            }\n+            if (serverKeepAlive != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.SERVER_KEEP_ALIVE.value(),\n+                        serverKeepAlive));\n+            }\n+            if (responseInformation != null) {\n+                props.add(new MqttProperties.StringProperty(MqttPropertyType.RESPONSE_INFORMATION.value(),\n+                        responseInformation));\n+            }\n+            if (serverReference != null) {\n+                props.add(new MqttProperties.StringProperty(MqttPropertyType.SERVER_REFERENCE.value(),\n+                        serverReference));\n+            }\n+            if (authenticationMethod != null) {\n+                props.add(new MqttProperties.StringProperty(MqttPropertyType.AUTHENTICATION_METHOD.value(),\n+                        authenticationMethod));\n+            }\n+            if (authenticationData != null) {\n+                props.add(new MqttProperties.BinaryProperty(MqttPropertyType.AUTHENTICATION_DATA.value(),\n+                        authenticationData));\n+            }\n+\n+            return props;\n+        }\n+\n+        public void sessionExpiryInterval(long seconds) {\n+            this.sessionExpiryInterval = seconds;\n+        }\n+\n+        public void receiveMaximum(int value) {\n+            if (value <= 0) {\n+                throw new IllegalArgumentException(\"receive maximum property must be > 0\");\n+            }\n+            this.receiveMaximum = value;\n+        }\n+\n+        public void maximumQos(byte value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8c67b5761a6ae5d6e738cfbc47b80fe855d794e"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkzNDEzMQ==", "bodyText": "rawData.clone()", "url": "https://github.com/netty/netty/pull/10812#discussion_r530934131", "createdAt": "2020-11-26T10:40:02Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageBuilders.java", "diffHunk": "@@ -328,6 +345,166 @@ public MqttConnAckMessage build() {\n         }\n     }\n \n+    public static class ConnAckPropertiesBuilder {\n+        private String clientId;\n+        private Long sessionExpiryInterval;\n+        private int receiveMaximum;\n+        private Byte maximumQos;\n+        private boolean retain;\n+        private Long maximumPacketSize;\n+        private int topicAliasMaximum;\n+        private String reasonString;\n+        private MqttProperties.UserProperties userProperties = new MqttProperties.UserProperties();\n+        private Boolean wildcardSubscriptionAvailable;\n+        private Boolean subscriptionIdentifiersAvailable;\n+        private Boolean sharedSubscriptionAvailable;\n+        private Integer serverKeepAlive;\n+        private String responseInformation;\n+        private String serverReference;\n+        private String authenticationMethod;\n+        private byte[] authenticationData;\n+\n+        public MqttProperties build() {\n+            final MqttProperties props = new MqttProperties();\n+            if (clientId != null) {\n+                props.add(new MqttProperties.StringProperty(MqttPropertyType.ASSIGNED_CLIENT_IDENTIFIER.value(),\n+                        clientId));\n+            }\n+            if (sessionExpiryInterval != null) {\n+                props.add(new MqttProperties.IntegerProperty(\n+                        MqttPropertyType.SESSION_EXPIRY_INTERVAL.value(), sessionExpiryInterval.intValue()));\n+            }\n+            if (receiveMaximum > 0) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.RECEIVE_MAXIMUM.value(), receiveMaximum));\n+            }\n+            if (maximumQos != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.MAXIMUM_QOS.value(), receiveMaximum));\n+            }\n+            props.add(new MqttProperties.IntegerProperty(MqttPropertyType.RETAIN_AVAILABLE.value(), retain ? 1 : 0));\n+            if (maximumPacketSize != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.MAXIMUM_PACKET_SIZE.value(),\n+                        maximumPacketSize.intValue()));\n+            }\n+            props.add(new MqttProperties.IntegerProperty(MqttPropertyType.TOPIC_ALIAS_MAXIMUM.value(),\n+                    topicAliasMaximum));\n+            if (reasonString != null) {\n+                props.add(new MqttProperties.StringProperty(MqttPropertyType.REASON_STRING.value(), reasonString));\n+            }\n+            props.add(userProperties);\n+            if (wildcardSubscriptionAvailable != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.WILDCARD_SUBSCRIPTION_AVAILABLE.value(),\n+                        wildcardSubscriptionAvailable ? 1 : 0));\n+            }\n+            if (subscriptionIdentifiersAvailable != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.SUBSCRIPTION_IDENTIFIER_AVAILABLE.value(),\n+                        subscriptionIdentifiersAvailable ? 1 : 0));\n+            }\n+            if (sharedSubscriptionAvailable != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.SHARED_SUBSCRIPTION_AVAILABLE.value(),\n+                        sharedSubscriptionAvailable ? 1 : 0));\n+            }\n+            if (serverKeepAlive != null) {\n+                props.add(new MqttProperties.IntegerProperty(MqttPropertyType.SERVER_KEEP_ALIVE.value(),\n+                        serverKeepAlive));\n+            }\n+            if (responseInformation != null) {\n+                props.add(new MqttProperties.StringProperty(MqttPropertyType.RESPONSE_INFORMATION.value(),\n+                        responseInformation));\n+            }\n+            if (serverReference != null) {\n+                props.add(new MqttProperties.StringProperty(MqttPropertyType.SERVER_REFERENCE.value(),\n+                        serverReference));\n+            }\n+            if (authenticationMethod != null) {\n+                props.add(new MqttProperties.StringProperty(MqttPropertyType.AUTHENTICATION_METHOD.value(),\n+                        authenticationMethod));\n+            }\n+            if (authenticationData != null) {\n+                props.add(new MqttProperties.BinaryProperty(MqttPropertyType.AUTHENTICATION_DATA.value(),\n+                        authenticationData));\n+            }\n+\n+            return props;\n+        }\n+\n+        public void sessionExpiryInterval(long seconds) {\n+            this.sessionExpiryInterval = seconds;\n+        }\n+\n+        public void receiveMaximum(int value) {\n+            if (value <= 0) {\n+                throw new IllegalArgumentException(\"receive maximum property must be > 0\");\n+            }\n+            this.receiveMaximum = value;\n+        }\n+\n+        public void maximumQos(byte value) {\n+            if (value != 0 && value != 1) {\n+                throw new IllegalArgumentException(\"maximum QoS property could be 0 or 1\");\n+            }\n+            this.maximumQos = value;\n+        }\n+\n+        public void retainAvailable(boolean retain) {\n+            this.retain = retain;\n+        }\n+\n+        public void maximumPacketSize(long size) {\n+            if (size <= 0) {\n+                throw new IllegalArgumentException(\"maximum packet size property must be > 0\");\n+            }\n+            this.maximumPacketSize = size;\n+        }\n+\n+        public void assignedClientId(String clientId) {\n+            this.clientId = clientId;\n+        }\n+\n+        public void topicAliasMaximum(int value) {\n+            this.topicAliasMaximum = value;\n+        }\n+\n+        public void reasonString(String reason) {\n+            this.reasonString = reason;\n+        }\n+\n+        public void userProperty(String name, String value) {\n+            userProperties.add(name, value);\n+        }\n+\n+        public void wildcardSubscriptionAvailable(boolean value) {\n+            this.wildcardSubscriptionAvailable = value;\n+        }\n+\n+        public void subscriptionIdentifiersAvailable(boolean value) {\n+            this.subscriptionIdentifiersAvailable = value;\n+        }\n+\n+        public void sharedSubscriptionAvailable(boolean value) {\n+            this.sharedSubscriptionAvailable = value;\n+        }\n+\n+        public void serverKeepAlive(int seconds) {\n+            this.serverKeepAlive = seconds;\n+        }\n+\n+        public void responseInformation(String value) {\n+            this.responseInformation = value;\n+        }\n+\n+        public void serverReference(String host) {\n+            this.serverReference = host;\n+        }\n+\n+        public void authenticationMethod(String methodName) {\n+            this.authenticationMethod = methodName;\n+        }\n+\n+        public void authenticationData(byte[] rawData) {\n+            this.authenticationData = rawData;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d8c67b5761a6ae5d6e738cfbc47b80fe855d794e"}, "originalPosition": 207}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "81887b25d6cf4a9bac1d484b20e0ac2661448683", "author": {"user": {"login": "andsel", "name": "Andrea Selva"}}, "url": "https://github.com/netty/netty/commit/81887b25d6cf4a9bac1d484b20e0ac2661448683", "committedDate": "2020-11-27T09:10:00Z", "message": "Marked ConnAckPropertiesBuilder as final"}, "afterCommit": {"oid": "b30090bf5000ce318711c60f56f8ca7bdc2a7330", "author": {"user": {"login": "andsel", "name": "Andrea Selva"}}, "url": "https://github.com/netty/netty/commit/b30090bf5000ce318711c60f56f8ca7bdc2a7330", "committedDate": "2020-12-05T08:38:17Z", "message": "Marked ConnAckPropertiesBuilder as final"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b30090bf5000ce318711c60f56f8ca7bdc2a7330", "author": {"user": {"login": "andsel", "name": "Andrea Selva"}}, "url": "https://github.com/netty/netty/commit/b30090bf5000ce318711c60f56f8ca7bdc2a7330", "committedDate": "2020-12-05T08:38:17Z", "message": "Marked ConnAckPropertiesBuilder as final"}, "afterCommit": {"oid": "b938e1cd39cc2384c42c3aa4f073539e354a1c94", "author": {"user": {"login": "andsel", "name": "Andrea Selva"}}, "url": "https://github.com/netty/netty/commit/b938e1cd39cc2384c42c3aa4f073539e354a1c94", "committedDate": "2020-12-05T08:42:13Z", "message": "Add ConnAck message builder method to handle the creation of related properties.\nIntroduced a specialized builder for ConnAck message properties section (ConnAckPropertiesBuilder)."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU1NTgxMDI1", "url": "https://github.com/netty/netty/pull/10812#pullrequestreview-555581025", "createdAt": "2020-12-18T15:20:53Z", "commit": {"oid": "b938e1cd39cc2384c42c3aa4f073539e354a1c94"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNToyMDo1NFrOIInVqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xOFQxNToyMTowOFrOIInWMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkwNDA0Mg==", "bodyText": "@andsel one nit then we are ready to go... Make this method name something else. Maybe init or apply ?", "url": "https://github.com/netty/netty/pull/10812#discussion_r545904042", "createdAt": "2020-12-18T15:20:54Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageBuilders.java", "diffHunk": "@@ -295,13 +296,18 @@ public MqttUnsubscribeMessage build() {\n         }\n     }\n \n+    public interface PropertiesInitializer<T> {\n+        void accept(T builder);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b938e1cd39cc2384c42c3aa4f073539e354a1c94"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTkwNDE3Ng==", "bodyText": "2020", "url": "https://github.com/netty/netty/pull/10812#discussion_r545904176", "createdAt": "2020-12-18T15:21:08Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/test/java/io/netty/handler/codec/mqtt/MqttMessageBuildersTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2017 The Netty Project", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b938e1cd39cc2384c42c3aa4f073539e354a1c94"}, "originalPosition": 2}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8bb39b040f941516b81869b778f46f07d7ffcecc", "author": {"user": {"login": "andsel", "name": "Andrea Selva"}}, "url": "https://github.com/netty/netty/commit/8bb39b040f941516b81869b778f46f07d7ffcecc", "committedDate": "2020-12-19T15:06:14Z", "message": "Add ConnAck message builder method to handle the creation of related properties.\nIntroduced a specialized builder for ConnAck message properties section (ConnAckPropertiesBuilder)."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b938e1cd39cc2384c42c3aa4f073539e354a1c94", "author": {"user": {"login": "andsel", "name": "Andrea Selva"}}, "url": "https://github.com/netty/netty/commit/b938e1cd39cc2384c42c3aa4f073539e354a1c94", "committedDate": "2020-12-05T08:42:13Z", "message": "Add ConnAck message builder method to handle the creation of related properties.\nIntroduced a specialized builder for ConnAck message properties section (ConnAckPropertiesBuilder)."}, "afterCommit": {"oid": "8bb39b040f941516b81869b778f46f07d7ffcecc", "author": {"user": {"login": "andsel", "name": "Andrea Selva"}}, "url": "https://github.com/netty/netty/commit/8bb39b040f941516b81869b778f46f07d7ffcecc", "committedDate": "2020-12-19T15:06:14Z", "message": "Add ConnAck message builder method to handle the creation of related properties.\nIntroduced a specialized builder for ConnAck message properties section (ConnAckPropertiesBuilder)."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3NzU5MDc4", "url": "https://github.com/netty/netty/pull/10812#pullrequestreview-557759078", "createdAt": "2020-12-23T09:49:35Z", "commit": {"oid": "8bb39b040f941516b81869b778f46f07d7ffcecc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4855, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}