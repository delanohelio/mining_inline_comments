{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1NTE5Mjk0", "number": 10625, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMzo0NDowMFrOEpCXow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNjo0NzoxNVrOEpHhlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDY1ODkxOnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/Native.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMzo0NDowMFrOHaeOyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxMzo1MjozNVrOHaeptQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUyMDMyOQ==", "bodyText": "this was the number after which using the flag showed good results here...", "url": "https://github.com/netty/netty/pull/10625#discussion_r497520329", "createdAt": "2020-09-30T13:44:00Z", "author": {"login": "normanmaurer"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/Native.java", "diffHunk": "@@ -32,7 +32,7 @@\n final class Native {\n     private static final InternalLogger logger = InternalLoggerFactory.getInstance(Native.class);\n     static final int DEFAULT_RING_SIZE = Math.max(64, SystemPropertyUtil.getInt(\"io.netty.uring.ringSize\", 4096));\n-    static final boolean DEFAULT_USE_IOSEQ_ASYNC = true;\n+    static final int DEFAULT_IOSEQ_ASYNC_THRESHOLD = 25;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "16b05a9ef0bab03c7b7ebe74dd39e39ee2eb68f2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUyMTcxMA==", "bodyText": "let's use a sys prop here? That would be nice to help with tests", "url": "https://github.com/netty/netty/pull/10625#discussion_r497521710", "createdAt": "2020-09-30T13:45:46Z", "author": {"login": "franz1981"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/Native.java", "diffHunk": "@@ -32,7 +32,7 @@\n final class Native {\n     private static final InternalLogger logger = InternalLoggerFactory.getInstance(Native.class);\n     static final int DEFAULT_RING_SIZE = Math.max(64, SystemPropertyUtil.getInt(\"io.netty.uring.ringSize\", 4096));\n-    static final boolean DEFAULT_USE_IOSEQ_ASYNC = true;\n+    static final int DEFAULT_IOSEQ_ASYNC_THRESHOLD = 25;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUyMDMyOQ=="}, "originalCommit": {"oid": "16b05a9ef0bab03c7b7ebe74dd39e39ee2eb68f2"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUyNzIyMQ==", "bodyText": "sure why not", "url": "https://github.com/netty/netty/pull/10625#discussion_r497527221", "createdAt": "2020-09-30T13:52:35Z", "author": {"login": "normanmaurer"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/Native.java", "diffHunk": "@@ -32,7 +32,7 @@\n final class Native {\n     private static final InternalLogger logger = InternalLoggerFactory.getInstance(Native.class);\n     static final int DEFAULT_RING_SIZE = Math.max(64, SystemPropertyUtil.getInt(\"io.netty.uring.ringSize\", 4096));\n-    static final boolean DEFAULT_USE_IOSEQ_ASYNC = true;\n+    static final int DEFAULT_IOSEQ_ASYNC_THRESHOLD = 25;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzUyMDMyOQ=="}, "originalCommit": {"oid": "16b05a9ef0bab03c7b7ebe74dd39e39ee2eb68f2"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNDc4NzE3OnYy", "diffSide": "LEFT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringSubmissionQueue.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDoxMDoxOVrOHaffug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNDozMzo1M1rOHagomQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU0MTA1MA==", "bodyText": "No need to compute the sqeFlagsAddress anymore. The variable isn't used.", "url": "https://github.com/netty/netty/pull/10625#discussion_r497541050", "createdAt": "2020-09-30T14:10:19Z", "author": {"login": "chrisvest"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringSubmissionQueue.java", "diffHunk": "@@ -86,21 +87,34 @@\n         this.tail = PlatformDependent.getIntVolatile(kTailAddress);\n \n         this.timeoutMemoryAddress = PlatformDependent.allocateMemory(KERNEL_TIMESPEC_SIZE);\n+        this.iosqeAsyncThreshold = iosqeAsyncThreshold;\n \n         // Zero the whole SQE array first\n         PlatformDependent.setMemory(submissionQueueArrayAddress, ringEntries * SQE_SIZE, (byte) 0);\n \n         // Fill SQ array indices (1-1 with SQE array) and set nonzero constant SQE fields\n         long address = kArrayAddress;\n         long sqeFlagsAddress = submissionQueueArrayAddress + SQE_FLAGS_FIELD;\n-        byte flag = iosqeAsync ? (byte) Native.IOSQE_ASYNC : 0;\n         for (int i = 0; i < ringEntries; i++, address += INT_SIZE, sqeFlagsAddress += SQE_SIZE) {\n             PlatformDependent.putInt(address, i);\n-            PlatformDependent.putByte(sqeFlagsAddress, flag);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1969e93c5f9b86d4cc7da318c77f73a675ba029f"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU1OTcwNQ==", "bodyText": "good catch", "url": "https://github.com/netty/netty/pull/10625#discussion_r497559705", "createdAt": "2020-09-30T14:33:53Z", "author": {"login": "normanmaurer"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringSubmissionQueue.java", "diffHunk": "@@ -86,21 +87,34 @@\n         this.tail = PlatformDependent.getIntVolatile(kTailAddress);\n \n         this.timeoutMemoryAddress = PlatformDependent.allocateMemory(KERNEL_TIMESPEC_SIZE);\n+        this.iosqeAsyncThreshold = iosqeAsyncThreshold;\n \n         // Zero the whole SQE array first\n         PlatformDependent.setMemory(submissionQueueArrayAddress, ringEntries * SQE_SIZE, (byte) 0);\n \n         // Fill SQ array indices (1-1 with SQE array) and set nonzero constant SQE fields\n         long address = kArrayAddress;\n         long sqeFlagsAddress = submissionQueueArrayAddress + SQE_FLAGS_FIELD;\n-        byte flag = iosqeAsync ? (byte) Native.IOSQE_ASYNC : 0;\n         for (int i = 0; i < ringEntries; i++, address += INT_SIZE, sqeFlagsAddress += SQE_SIZE) {\n             PlatformDependent.putInt(address, i);\n-            PlatformDependent.putByte(sqeFlagsAddress, flag);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzU0MTA1MA=="}, "originalCommit": {"oid": "1969e93c5f9b86d4cc7da318c77f73a675ba029f"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzExNTUwMzU5OnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringEventLoop.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxNjo0NzoxNVrOHamg8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0zMFQxODo0MTozMFrOHaqn-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY1NjA0OQ==", "bodyText": "I think you don't want to increment here in the case that channels.put returns non-null, right?", "url": "https://github.com/netty/netty/pull/10625#discussion_r497656049", "createdAt": "2020-09-30T16:47:15Z", "author": {"login": "njhill"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringEventLoop.java", "diffHunk": "@@ -104,19 +104,25 @@ void add(AbstractIOUringChannel ch) {\n         int fd = ch.socket.intValue();\n \n         channels.put(fd, ch);\n+        ringBuffer.ioUringSubmissionQueue().incrementHandledFds();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "641873308954aa858cc3d8e460f73103a59dddde"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY3MjczMg==", "bodyText": "I think I actually want as I also always decrement... below. I am missing something ?", "url": "https://github.com/netty/netty/pull/10625#discussion_r497672732", "createdAt": "2020-09-30T17:12:29Z", "author": {"login": "normanmaurer"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringEventLoop.java", "diffHunk": "@@ -104,19 +104,25 @@ void add(AbstractIOUringChannel ch) {\n         int fd = ch.socket.intValue();\n \n         channels.put(fd, ch);\n+        ringBuffer.ioUringSubmissionQueue().incrementHandledFds();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY1NjA0OQ=="}, "originalCommit": {"oid": "641873308954aa858cc3d8e460f73103a59dddde"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY5MzMyNQ==", "bodyText": "Maybe this isn't possible for other sequencing reasons, but what if the same fd is replaced 3 times in succession.. then count will be +3. Then when removed it will only be -1 since it's only decremented once (if called multiple times only the first will decrement). So we end up with no fd but still a positive count. I could also be missing something :)", "url": "https://github.com/netty/netty/pull/10625#discussion_r497693325", "createdAt": "2020-09-30T17:47:40Z", "author": {"login": "njhill"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringEventLoop.java", "diffHunk": "@@ -104,19 +104,25 @@ void add(AbstractIOUringChannel ch) {\n         int fd = ch.socket.intValue();\n \n         channels.put(fd, ch);\n+        ringBuffer.ioUringSubmissionQueue().incrementHandledFds();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY1NjA0OQ=="}, "originalCommit": {"oid": "641873308954aa858cc3d8e460f73103a59dddde"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcwMzA4Mw==", "bodyText": "That\u2019s  not possible", "url": "https://github.com/netty/netty/pull/10625#discussion_r497703083", "createdAt": "2020-09-30T18:04:49Z", "author": {"login": "normanmaurer"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringEventLoop.java", "diffHunk": "@@ -104,19 +104,25 @@ void add(AbstractIOUringChannel ch) {\n         int fd = ch.socket.intValue();\n \n         channels.put(fd, ch);\n+        ringBuffer.ioUringSubmissionQueue().incrementHandledFds();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY1NjA0OQ=="}, "originalCommit": {"oid": "641873308954aa858cc3d8e460f73103a59dddde"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcwNzQ2NA==", "bodyText": "Ok maybe the multiple case is not possible but you are saying that the put will never overwrite? If so what is the purpose of this check after remove https://github.com/netty/netty/pull/10625/files#diff-edc47287cb4c12155b5456eb05260bcbR118-R125?", "url": "https://github.com/netty/netty/pull/10625#discussion_r497707464", "createdAt": "2020-09-30T18:12:37Z", "author": {"login": "njhill"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringEventLoop.java", "diffHunk": "@@ -104,19 +104,25 @@ void add(AbstractIOUringChannel ch) {\n         int fd = ch.socket.intValue();\n \n         channels.put(fd, ch);\n+        ringBuffer.ioUringSubmissionQueue().incrementHandledFds();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY1NjA0OQ=="}, "originalCommit": {"oid": "641873308954aa858cc3d8e460f73103a59dddde"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcxMDE4NA==", "bodyText": "You are right ... I guess I should only increment here if null is returned and only decrement if we not put back the channel in the remove method ... WDYt ?", "url": "https://github.com/netty/netty/pull/10625#discussion_r497710184", "createdAt": "2020-09-30T18:17:43Z", "author": {"login": "normanmaurer"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringEventLoop.java", "diffHunk": "@@ -104,19 +104,25 @@ void add(AbstractIOUringChannel ch) {\n         int fd = ch.socket.intValue();\n \n         channels.put(fd, ch);\n+        ringBuffer.ioUringSubmissionQueue().incrementHandledFds();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY1NjA0OQ=="}, "originalCommit": {"oid": "641873308954aa858cc3d8e460f73103a59dddde"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzcyMzM4NA==", "bodyText": "Yes I think if you just increment here if null is returned from put then the decrement can stay as you have it", "url": "https://github.com/netty/netty/pull/10625#discussion_r497723384", "createdAt": "2020-09-30T18:41:30Z", "author": {"login": "njhill"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringEventLoop.java", "diffHunk": "@@ -104,19 +104,25 @@ void add(AbstractIOUringChannel ch) {\n         int fd = ch.socket.intValue();\n \n         channels.put(fd, ch);\n+        ringBuffer.ioUringSubmissionQueue().incrementHandledFds();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NzY1NjA0OQ=="}, "originalCommit": {"oid": "641873308954aa858cc3d8e460f73103a59dddde"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3786, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}