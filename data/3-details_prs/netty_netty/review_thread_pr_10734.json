{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTEwMDg1NzIx", "number": 10734, "reviewThreads": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToxNzo1NVrOEyDQaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwOToyNDo0MVrOEzNiNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTE3NjA4OnYy", "diffSide": "RIGHT", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToxNzo1NVrOHoevMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToxNzo1NVrOHoevMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIwODY5MA==", "bodyText": "nit: \",\" -> \", \" (add space)", "url": "https://github.com/netty/netty/pull/10734#discussion_r512208690", "createdAt": "2020-10-26T19:17:55Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "diffHunk": "@@ -139,20 +139,47 @@ public T value() {\n         public int propertyId() {\n             return propertyId;\n         }\n+\n+        @Override\n+        public int hashCode() {\n+            return propertyId + 31 * value.hashCode();\n+        }\n+\n+        @Override\n+        public boolean equals(Object obj) {\n+            if (this == obj) {\n+                return true;\n+            }\n+            if (obj == null || getClass() != obj.getClass()) {\n+                return false;\n+            }\n+            MqttProperty that = (MqttProperty) obj;\n+            return this.propertyId == that.propertyId && this.value.equals(that.value);\n+        }\n     }\n \n     public static final class IntegerProperty extends MqttProperty<Integer> {\n \n         public IntegerProperty(int propertyId, Integer value) {\n             super(propertyId, value);\n         }\n+\n+        @Override\n+        public String toString() {\n+            return \"IntegerProperty(\" + propertyId + \",\" + value + \")\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "047c1756c348f91074c228b40f131cf7de3ed175"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTE3NzUwOnYy", "diffSide": "RIGHT", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToxODoyM1rOHoewIQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QwNjo1OTo1MlrOHottgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIwODkyOQ==", "bodyText": "does this need to be public ?", "url": "https://github.com/netty/netty/pull/10734#discussion_r512208929", "createdAt": "2020-10-26T19:18:23Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "diffHunk": "@@ -200,26 +227,59 @@ public UserProperties(Collection<StringPair> values) {\n             this.value.addAll(values);\n         }\n \n+        public static UserProperties fromUserPropertyCollection(Collection<UserProperty> properties) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "047c1756c348f91074c228b40f131cf7de3ed175"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjQ1NDAxNw==", "bodyText": "Not really. Changed to private", "url": "https://github.com/netty/netty/pull/10734#discussion_r512454017", "createdAt": "2020-10-27T06:59:52Z", "author": {"login": "paul-lysak"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "diffHunk": "@@ -200,26 +227,59 @@ public UserProperties(Collection<StringPair> values) {\n             this.value.addAll(values);\n         }\n \n+        public static UserProperties fromUserPropertyCollection(Collection<UserProperty> properties) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIwODkyOQ=="}, "originalCommit": {"oid": "047c1756c348f91074c228b40f131cf7de3ed175"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTE3ODg4OnYy", "diffSide": "RIGHT", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToxODo0M1rOHoew8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToxODo0M1rOHoew8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIwOTEzNg==", "bodyText": "nit: \",\" -> \", \"", "url": "https://github.com/netty/netty/pull/10734#discussion_r512209136", "createdAt": "2020-10-26T19:18:43Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "diffHunk": "@@ -200,26 +227,59 @@ public UserProperties(Collection<StringPair> values) {\n             this.value.addAll(values);\n         }\n \n+        public static UserProperties fromUserPropertyCollection(Collection<UserProperty> properties) {\n+            UserProperties userProperties = new UserProperties();\n+            for (UserProperty property: properties) {\n+                userProperties.add(new StringPair(property.value.key, property.value.value));\n+            }\n+            return userProperties;\n+        }\n+\n         public void add(StringPair pair) {\n             this.value.add(pair);\n         }\n \n         public void add(String key, String value) {\n             this.value.add(new StringPair(key, value));\n         }\n+\n+        @Override\n+        public String toString() {\n+            StringBuilder builder = new StringBuilder(\"UserProperties(\");\n+            boolean first = true;\n+            for (StringPair pair: value) {\n+                if (!first) {\n+                    builder.append(\",\");\n+                }\n+                builder.append(pair.key + \"->\" + pair.value);\n+                first = false;\n+            }\n+            builder.append(\")\");\n+            return builder.toString();\n+        }\n     }\n \n     public static final class UserProperty extends MqttProperty<StringPair> {\n         public UserProperty(String key, String value) {\n             super(MqttPropertyType.USER_PROPERTY.value, new StringPair(key, value));\n         }\n+\n+        @Override\n+        public String toString() {\n+            return \"UserProperty(\" + value.key + \",\" + value.value + \")\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "047c1756c348f91074c228b40f131cf7de3ed175"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTE4MzE5OnYy", "diffSide": "RIGHT", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToxOTo1MlrOHoezbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToxOTo1MlrOHoezbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIwOTc3Mg==", "bodyText": "nit: you can remove the else as you return", "url": "https://github.com/netty/netty/pull/10734#discussion_r512209772", "createdAt": "2020-10-26T19:19:52Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "diffHunk": "@@ -266,16 +337,79 @@ public void add(MqttProperty property) {\n \n     public Collection<? extends MqttProperty> listAll() {\n         IntObjectHashMap<MqttProperty> props = this.props;\n-        return props == null? Collections.<MqttProperty>emptyList() : props.values();\n+        if (props == null && subscriptionIds == null && userProperties == null) {\n+            return Collections.<MqttProperty>emptyList();\n+        } else if (subscriptionIds == null && userProperties == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "047c1756c348f91074c228b40f131cf7de3ed175"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTE4MzUxOnYy", "diffSide": "RIGHT", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToxOTo1N1rOHoezoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToxOTo1N1rOHoezoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIwOTgyNQ==", "bodyText": "nit: you can remove the else as you return", "url": "https://github.com/netty/netty/pull/10734#discussion_r512209825", "createdAt": "2020-10-26T19:19:57Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "diffHunk": "@@ -266,16 +337,79 @@ public void add(MqttProperty property) {\n \n     public Collection<? extends MqttProperty> listAll() {\n         IntObjectHashMap<MqttProperty> props = this.props;\n-        return props == null? Collections.<MqttProperty>emptyList() : props.values();\n+        if (props == null && subscriptionIds == null && userProperties == null) {\n+            return Collections.<MqttProperty>emptyList();\n+        } else if (subscriptionIds == null && userProperties == null) {\n+            return props.values();\n+        } else if (props == null && userProperties == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "047c1756c348f91074c228b40f131cf7de3ed175"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTE4NDU5OnYy", "diffSide": "RIGHT", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToyMDoxNFrOHoe0PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToyMDoxNFrOHoe0PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIwOTk4MA==", "bodyText": "you can remove the else as you return before", "url": "https://github.com/netty/netty/pull/10734#discussion_r512209980", "createdAt": "2020-10-26T19:20:14Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "diffHunk": "@@ -266,16 +337,79 @@ public void add(MqttProperty property) {\n \n     public Collection<? extends MqttProperty> listAll() {\n         IntObjectHashMap<MqttProperty> props = this.props;\n-        return props == null? Collections.<MqttProperty>emptyList() : props.values();\n+        if (props == null && subscriptionIds == null && userProperties == null) {\n+            return Collections.<MqttProperty>emptyList();\n+        } else if (subscriptionIds == null && userProperties == null) {\n+            return props.values();\n+        } else if (props == null && userProperties == null) {\n+            return subscriptionIds;\n+        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "047c1756c348f91074c228b40f131cf7de3ed175"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTE4NjU4OnYy", "diffSide": "RIGHT", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToyMDo1NVrOHoe1pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToyMDo1NVrOHoe1pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIxMDM0Mg==", "bodyText": "nit: you can remove the else as you return before", "url": "https://github.com/netty/netty/pull/10734#discussion_r512210342", "createdAt": "2020-10-26T19:20:55Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "diffHunk": "@@ -266,16 +337,79 @@ public void add(MqttProperty property) {\n \n     public Collection<? extends MqttProperty> listAll() {\n         IntObjectHashMap<MqttProperty> props = this.props;\n-        return props == null? Collections.<MqttProperty>emptyList() : props.values();\n+        if (props == null && subscriptionIds == null && userProperties == null) {\n+            return Collections.<MqttProperty>emptyList();\n+        } else if (subscriptionIds == null && userProperties == null) {\n+            return props.values();\n+        } else if (props == null && userProperties == null) {\n+            return subscriptionIds;\n+        } else {\n+            List<MqttProperty> propValues = new ArrayList<MqttProperty>(props != null ? props.size() : 1);\n+            if (props != null) {\n+                propValues.addAll(props.values());\n+            }\n+            if (subscriptionIds != null) {\n+                propValues.addAll(subscriptionIds);\n+            }\n+            if (userProperties != null) {\n+                propValues.add(UserProperties.fromUserPropertyCollection(userProperties));\n+            }\n+            return propValues;\n+        }\n     }\n \n     public boolean isEmpty() {\n         IntObjectHashMap<MqttProperty> props = this.props;\n         return props == null || props.isEmpty();\n     }\n \n+    /**\n+     * Get property by ID. If there are multiple properties of this type (can be with Subscription ID)\n+     * then return the first one.\n+     *\n+     * @param propertyId ID of the property\n+     * @return a property if it is set, null otherwise\n+     */\n     public MqttProperty getProperty(int propertyId) {\n-        IntObjectHashMap<MqttProperty> props = this.props;\n-        return props == null? null : props.get(propertyId);\n+        if (propertyId == MqttPropertyType.USER_PROPERTY.value) {\n+            //special handling to keep compatibility with earlier versions\n+            List<UserProperty> userProperties = this.userProperties;\n+            if (userProperties == null) {\n+                return null;\n+            } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "047c1756c348f91074c228b40f131cf7de3ed175"}, "originalPosition": 205}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTE4NzQ4OnYy", "diffSide": "RIGHT", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToyMTowOFrOHoe2KQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToyMTowOFrOHoe2KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIxMDQ3Mw==", "bodyText": "nit you can remove the else", "url": "https://github.com/netty/netty/pull/10734#discussion_r512210473", "createdAt": "2020-10-26T19:21:08Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "diffHunk": "@@ -266,16 +337,79 @@ public void add(MqttProperty property) {\n \n     public Collection<? extends MqttProperty> listAll() {\n         IntObjectHashMap<MqttProperty> props = this.props;\n-        return props == null? Collections.<MqttProperty>emptyList() : props.values();\n+        if (props == null && subscriptionIds == null && userProperties == null) {\n+            return Collections.<MqttProperty>emptyList();\n+        } else if (subscriptionIds == null && userProperties == null) {\n+            return props.values();\n+        } else if (props == null && userProperties == null) {\n+            return subscriptionIds;\n+        } else {\n+            List<MqttProperty> propValues = new ArrayList<MqttProperty>(props != null ? props.size() : 1);\n+            if (props != null) {\n+                propValues.addAll(props.values());\n+            }\n+            if (subscriptionIds != null) {\n+                propValues.addAll(subscriptionIds);\n+            }\n+            if (userProperties != null) {\n+                propValues.add(UserProperties.fromUserPropertyCollection(userProperties));\n+            }\n+            return propValues;\n+        }\n     }\n \n     public boolean isEmpty() {\n         IntObjectHashMap<MqttProperty> props = this.props;\n         return props == null || props.isEmpty();\n     }\n \n+    /**\n+     * Get property by ID. If there are multiple properties of this type (can be with Subscription ID)\n+     * then return the first one.\n+     *\n+     * @param propertyId ID of the property\n+     * @return a property if it is set, null otherwise\n+     */\n     public MqttProperty getProperty(int propertyId) {\n-        IntObjectHashMap<MqttProperty> props = this.props;\n-        return props == null? null : props.get(propertyId);\n+        if (propertyId == MqttPropertyType.USER_PROPERTY.value) {\n+            //special handling to keep compatibility with earlier versions\n+            List<UserProperty> userProperties = this.userProperties;\n+            if (userProperties == null) {\n+                return null;\n+            } else {\n+                return UserProperties.fromUserPropertyCollection(userProperties);\n+            }\n+        } else if (propertyId == MqttPropertyType.SUBSCRIPTION_IDENTIFIER.value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "047c1756c348f91074c228b40f131cf7de3ed175"}, "originalPosition": 208}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTE4ODAxOnYy", "diffSide": "RIGHT", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToyMToxOFrOHoe2gA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToyMToxOFrOHoe2gA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIxMDU2MA==", "bodyText": "nit you can remove the else.", "url": "https://github.com/netty/netty/pull/10734#discussion_r512210560", "createdAt": "2020-10-26T19:21:18Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "diffHunk": "@@ -266,16 +337,79 @@ public void add(MqttProperty property) {\n \n     public Collection<? extends MqttProperty> listAll() {\n         IntObjectHashMap<MqttProperty> props = this.props;\n-        return props == null? Collections.<MqttProperty>emptyList() : props.values();\n+        if (props == null && subscriptionIds == null && userProperties == null) {\n+            return Collections.<MqttProperty>emptyList();\n+        } else if (subscriptionIds == null && userProperties == null) {\n+            return props.values();\n+        } else if (props == null && userProperties == null) {\n+            return subscriptionIds;\n+        } else {\n+            List<MqttProperty> propValues = new ArrayList<MqttProperty>(props != null ? props.size() : 1);\n+            if (props != null) {\n+                propValues.addAll(props.values());\n+            }\n+            if (subscriptionIds != null) {\n+                propValues.addAll(subscriptionIds);\n+            }\n+            if (userProperties != null) {\n+                propValues.add(UserProperties.fromUserPropertyCollection(userProperties));\n+            }\n+            return propValues;\n+        }\n     }\n \n     public boolean isEmpty() {\n         IntObjectHashMap<MqttProperty> props = this.props;\n         return props == null || props.isEmpty();\n     }\n \n+    /**\n+     * Get property by ID. If there are multiple properties of this type (can be with Subscription ID)\n+     * then return the first one.\n+     *\n+     * @param propertyId ID of the property\n+     * @return a property if it is set, null otherwise\n+     */\n     public MqttProperty getProperty(int propertyId) {\n-        IntObjectHashMap<MqttProperty> props = this.props;\n-        return props == null? null : props.get(propertyId);\n+        if (propertyId == MqttPropertyType.USER_PROPERTY.value) {\n+            //special handling to keep compatibility with earlier versions\n+            List<UserProperty> userProperties = this.userProperties;\n+            if (userProperties == null) {\n+                return null;\n+            } else {\n+                return UserProperties.fromUserPropertyCollection(userProperties);\n+            }\n+        } else if (propertyId == MqttPropertyType.SUBSCRIPTION_IDENTIFIER.value) {\n+            List<IntegerProperty> subscriptionIds = this.subscriptionIds;\n+            if (subscriptionIds == null || subscriptionIds.isEmpty()) {\n+                return null;\n+            } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "047c1756c348f91074c228b40f131cf7de3ed175"}, "originalPosition": 212}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTE4ODg0OnYy", "diffSide": "RIGHT", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToyMTozNVrOHoe3Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToyMTozNVrOHoe3Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIxMDcxNA==", "bodyText": "nit: you can remove the else as you return before", "url": "https://github.com/netty/netty/pull/10734#discussion_r512210714", "createdAt": "2020-10-26T19:21:35Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "diffHunk": "@@ -266,16 +337,79 @@ public void add(MqttProperty property) {\n \n     public Collection<? extends MqttProperty> listAll() {\n         IntObjectHashMap<MqttProperty> props = this.props;\n-        return props == null? Collections.<MqttProperty>emptyList() : props.values();\n+        if (props == null && subscriptionIds == null && userProperties == null) {\n+            return Collections.<MqttProperty>emptyList();\n+        } else if (subscriptionIds == null && userProperties == null) {\n+            return props.values();\n+        } else if (props == null && userProperties == null) {\n+            return subscriptionIds;\n+        } else {\n+            List<MqttProperty> propValues = new ArrayList<MqttProperty>(props != null ? props.size() : 1);\n+            if (props != null) {\n+                propValues.addAll(props.values());\n+            }\n+            if (subscriptionIds != null) {\n+                propValues.addAll(subscriptionIds);\n+            }\n+            if (userProperties != null) {\n+                propValues.add(UserProperties.fromUserPropertyCollection(userProperties));\n+            }\n+            return propValues;\n+        }\n     }\n \n     public boolean isEmpty() {\n         IntObjectHashMap<MqttProperty> props = this.props;\n         return props == null || props.isEmpty();\n     }\n \n+    /**\n+     * Get property by ID. If there are multiple properties of this type (can be with Subscription ID)\n+     * then return the first one.\n+     *\n+     * @param propertyId ID of the property\n+     * @return a property if it is set, null otherwise\n+     */\n     public MqttProperty getProperty(int propertyId) {\n-        IntObjectHashMap<MqttProperty> props = this.props;\n-        return props == null? null : props.get(propertyId);\n+        if (propertyId == MqttPropertyType.USER_PROPERTY.value) {\n+            //special handling to keep compatibility with earlier versions\n+            List<UserProperty> userProperties = this.userProperties;\n+            if (userProperties == null) {\n+                return null;\n+            } else {\n+                return UserProperties.fromUserPropertyCollection(userProperties);\n+            }\n+        } else if (propertyId == MqttPropertyType.SUBSCRIPTION_IDENTIFIER.value) {\n+            List<IntegerProperty> subscriptionIds = this.subscriptionIds;\n+            if (subscriptionIds == null || subscriptionIds.isEmpty()) {\n+                return null;\n+            } else {\n+                return subscriptionIds.get(0);\n+            }\n+        } else {\n+            IntObjectHashMap<MqttProperty> props = this.props;\n+            return props == null ? null : props.get(propertyId);\n+        }\n+    }\n+\n+    /**\n+     * Get properties by ID.\n+     * Some properties (Subscription ID and User Properties) may occur few times,\n+     * this method returns all their values in order.\n+     *\n+     * @param propertyId ID of the property\n+     * @return all properties having specified ID\n+     */\n+    public List<? extends MqttProperty> getProperties(int propertyId) {\n+        if (propertyId == MqttPropertyType.USER_PROPERTY.value) {\n+            return userProperties == null ? Collections.<MqttProperty>emptyList() : userProperties;\n+        } else if (propertyId == MqttPropertyType.SUBSCRIPTION_IDENTIFIER.value) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "047c1756c348f91074c228b40f131cf7de3ed175"}, "originalPosition": 232}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwOTE4OTExOnYy", "diffSide": "RIGHT", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToyMTo0MFrOHoe3Rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxOToyMTo0MFrOHoe3Rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjIxMDc1OQ==", "bodyText": "nit: you can remove the else as you return before", "url": "https://github.com/netty/netty/pull/10734#discussion_r512210759", "createdAt": "2020-10-26T19:21:40Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "diffHunk": "@@ -266,16 +337,79 @@ public void add(MqttProperty property) {\n \n     public Collection<? extends MqttProperty> listAll() {\n         IntObjectHashMap<MqttProperty> props = this.props;\n-        return props == null? Collections.<MqttProperty>emptyList() : props.values();\n+        if (props == null && subscriptionIds == null && userProperties == null) {\n+            return Collections.<MqttProperty>emptyList();\n+        } else if (subscriptionIds == null && userProperties == null) {\n+            return props.values();\n+        } else if (props == null && userProperties == null) {\n+            return subscriptionIds;\n+        } else {\n+            List<MqttProperty> propValues = new ArrayList<MqttProperty>(props != null ? props.size() : 1);\n+            if (props != null) {\n+                propValues.addAll(props.values());\n+            }\n+            if (subscriptionIds != null) {\n+                propValues.addAll(subscriptionIds);\n+            }\n+            if (userProperties != null) {\n+                propValues.add(UserProperties.fromUserPropertyCollection(userProperties));\n+            }\n+            return propValues;\n+        }\n     }\n \n     public boolean isEmpty() {\n         IntObjectHashMap<MqttProperty> props = this.props;\n         return props == null || props.isEmpty();\n     }\n \n+    /**\n+     * Get property by ID. If there are multiple properties of this type (can be with Subscription ID)\n+     * then return the first one.\n+     *\n+     * @param propertyId ID of the property\n+     * @return a property if it is set, null otherwise\n+     */\n     public MqttProperty getProperty(int propertyId) {\n-        IntObjectHashMap<MqttProperty> props = this.props;\n-        return props == null? null : props.get(propertyId);\n+        if (propertyId == MqttPropertyType.USER_PROPERTY.value) {\n+            //special handling to keep compatibility with earlier versions\n+            List<UserProperty> userProperties = this.userProperties;\n+            if (userProperties == null) {\n+                return null;\n+            } else {\n+                return UserProperties.fromUserPropertyCollection(userProperties);\n+            }\n+        } else if (propertyId == MqttPropertyType.SUBSCRIPTION_IDENTIFIER.value) {\n+            List<IntegerProperty> subscriptionIds = this.subscriptionIds;\n+            if (subscriptionIds == null || subscriptionIds.isEmpty()) {\n+                return null;\n+            } else {\n+                return subscriptionIds.get(0);\n+            }\n+        } else {\n+            IntObjectHashMap<MqttProperty> props = this.props;\n+            return props == null ? null : props.get(propertyId);\n+        }\n+    }\n+\n+    /**\n+     * Get properties by ID.\n+     * Some properties (Subscription ID and User Properties) may occur few times,\n+     * this method returns all their values in order.\n+     *\n+     * @param propertyId ID of the property\n+     * @return all properties having specified ID\n+     */\n+    public List<? extends MqttProperty> getProperties(int propertyId) {\n+        if (propertyId == MqttPropertyType.USER_PROPERTY.value) {\n+            return userProperties == null ? Collections.<MqttProperty>emptyList() : userProperties;\n+        } else if (propertyId == MqttPropertyType.SUBSCRIPTION_IDENTIFIER.value) {\n+            return subscriptionIds == null ? Collections.<MqttProperty>emptyList() : subscriptionIds;\n+        } else {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "047c1756c348f91074c228b40f131cf7de3ed175"}, "originalPosition": 234}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTMyNjcyOnYy", "diffSide": "RIGHT", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwOToyMDoxOVrOHqS5BA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwOToyMDoxOVrOHqS5BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDExMTc0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Some properties (Subscription ID and User Properties) may occur few times,\n          \n          \n            \n                 * Some properties (Subscription ID and User Properties) may occur multiple times,", "url": "https://github.com/netty/netty/pull/10734#discussion_r514111748", "createdAt": "2020-10-29T09:20:19Z", "author": {"login": "chrisvest"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttProperties.java", "diffHunk": "@@ -266,16 +337,78 @@ public void add(MqttProperty property) {\n \n     public Collection<? extends MqttProperty> listAll() {\n         IntObjectHashMap<MqttProperty> props = this.props;\n-        return props == null? Collections.<MqttProperty>emptyList() : props.values();\n+        if (props == null && subscriptionIds == null && userProperties == null) {\n+            return Collections.<MqttProperty>emptyList();\n+        }\n+        if (subscriptionIds == null && userProperties == null) {\n+            return props.values();\n+        }\n+        if (props == null && userProperties == null) {\n+            return subscriptionIds;\n+        }\n+        List<MqttProperty> propValues = new ArrayList<MqttProperty>(props != null ? props.size() : 1);\n+        if (props != null) {\n+            propValues.addAll(props.values());\n+        }\n+        if (subscriptionIds != null) {\n+            propValues.addAll(subscriptionIds);\n+        }\n+        if (userProperties != null) {\n+            propValues.add(UserProperties.fromUserPropertyCollection(userProperties));\n+        }\n+        return propValues;\n     }\n \n     public boolean isEmpty() {\n         IntObjectHashMap<MqttProperty> props = this.props;\n         return props == null || props.isEmpty();\n     }\n \n+    /**\n+     * Get property by ID. If there are multiple properties of this type (can be with Subscription ID)\n+     * then return the first one.\n+     *\n+     * @param propertyId ID of the property\n+     * @return a property if it is set, null otherwise\n+     */\n     public MqttProperty getProperty(int propertyId) {\n+        if (propertyId == MqttPropertyType.USER_PROPERTY.value) {\n+            //special handling to keep compatibility with earlier versions\n+            List<UserProperty> userProperties = this.userProperties;\n+            if (userProperties == null) {\n+                return null;\n+            }\n+            return UserProperties.fromUserPropertyCollection(userProperties);\n+        }\n+        if (propertyId == MqttPropertyType.SUBSCRIPTION_IDENTIFIER.value) {\n+            List<IntegerProperty> subscriptionIds = this.subscriptionIds;\n+            if (subscriptionIds == null || subscriptionIds.isEmpty()) {\n+                return null;\n+            }\n+            return subscriptionIds.get(0);\n+        }\n+        IntObjectHashMap<MqttProperty> props = this.props;\n+        return props == null ? null : props.get(propertyId);\n+    }\n+\n+    /**\n+     * Get properties by ID.\n+     * Some properties (Subscription ID and User Properties) may occur few times,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24570893541ed1bb698587043b425f43ac09ec0e"}, "originalPosition": 220}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTM0Mzg1OnYy", "diffSide": "RIGHT", "path": "codec-mqtt/src/test/java/io/netty/handler/codec/mqtt/MqttPropertiesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwOToyNDoxNFrOHqTDdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwOToyNDoxNFrOHqTDdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDExNDQyMg==", "bodyText": "The expected value goes before the actual value in assertEquals", "url": "https://github.com/netty/netty/pull/10734#discussion_r514114422", "createdAt": "2020-10-29T09:24:14Z", "author": {"login": "chrisvest"}, "path": "codec-mqtt/src/test/java/io/netty/handler/codec/mqtt/MqttPropertiesTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.netty.handler.codec.mqtt;\n+\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static io.netty.handler.codec.mqtt.MqttProperties.MqttPropertyType.CONTENT_TYPE;\n+import static io.netty.handler.codec.mqtt.MqttProperties.MqttPropertyType.PAYLOAD_FORMAT_INDICATOR;\n+import static io.netty.handler.codec.mqtt.MqttProperties.MqttPropertyType.SUBSCRIPTION_IDENTIFIER;\n+import static io.netty.handler.codec.mqtt.MqttProperties.MqttPropertyType.USER_PROPERTY;\n+import static org.junit.Assert.assertEquals;\n+\n+public class MqttPropertiesTest {\n+\n+    private MqttProperties createSampleProperties() {\n+        MqttProperties props = new MqttProperties();\n+        props.add(new MqttProperties.IntegerProperty(SUBSCRIPTION_IDENTIFIER.value(), 10));\n+        props.add(new MqttProperties.IntegerProperty(SUBSCRIPTION_IDENTIFIER.value(), 20));\n+        props.add(new MqttProperties.IntegerProperty(PAYLOAD_FORMAT_INDICATOR.value(), 6));\n+        props.add(new MqttProperties.StringProperty(CONTENT_TYPE.value(), \"text/plain\"));\n+        props.add(new MqttProperties.UserProperty(\"isSecret\", \"true\"));\n+        props.add(new MqttProperties.UserProperty(\"tag\", \"firstTag\"));\n+        props.add(new MqttProperties.UserProperty(\"tag\", \"secondTag\"));\n+        return props;\n+    }\n+\n+    @Test\n+    public void testGetProperty() {\n+        MqttProperties props = createSampleProperties();\n+\n+        assertEquals(\"getProperty Content Type\",\n+                \"text/plain\",\n+                ((MqttProperties.StringProperty) props.getProperty(CONTENT_TYPE.value())).value);\n+        assertEquals(\"getProperty Subscription ID\",\n+                10,\n+                ((MqttProperties.IntegerProperty) props.getProperty(SUBSCRIPTION_IDENTIFIER.value())).value.intValue());\n+\n+        List<MqttProperties.StringPair> expectedUserProps = new ArrayList<MqttProperties.StringPair>();\n+        expectedUserProps.add(new MqttProperties.StringPair(\"isSecret\", \"true\"));\n+        expectedUserProps.add(new MqttProperties.StringPair(\"tag\", \"firstTag\"));\n+        expectedUserProps.add(new MqttProperties.StringPair(\"tag\", \"secondTag\"));\n+        List<MqttProperties.StringPair> actualUserProps =\n+                ((MqttProperties.UserProperties) props.getProperty(USER_PROPERTY.value())).value;\n+        assertEquals(\"getProperty User Properties\", actualUserProps, expectedUserProps);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24570893541ed1bb698587043b425f43ac09ec0e"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMTM0NTgzOnYy", "diffSide": "RIGHT", "path": "codec-mqtt/src/test/java/io/netty/handler/codec/mqtt/MqttPropertiesTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwOToyNDo0MVrOHqTEpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQwOToyNDo0MVrOHqTEpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDExNDcyNQ==", "bodyText": "\ud83d\udccc", "url": "https://github.com/netty/netty/pull/10734#discussion_r514114725", "createdAt": "2020-10-29T09:24:41Z", "author": {"login": "chrisvest"}, "path": "codec-mqtt/src/test/java/io/netty/handler/codec/mqtt/MqttPropertiesTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package io.netty.handler.codec.mqtt;\n+\n+import org.junit.Test;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import static io.netty.handler.codec.mqtt.MqttProperties.MqttPropertyType.CONTENT_TYPE;\n+import static io.netty.handler.codec.mqtt.MqttProperties.MqttPropertyType.PAYLOAD_FORMAT_INDICATOR;\n+import static io.netty.handler.codec.mqtt.MqttProperties.MqttPropertyType.SUBSCRIPTION_IDENTIFIER;\n+import static io.netty.handler.codec.mqtt.MqttProperties.MqttPropertyType.USER_PROPERTY;\n+import static org.junit.Assert.assertEquals;\n+\n+public class MqttPropertiesTest {\n+\n+    private MqttProperties createSampleProperties() {\n+        MqttProperties props = new MqttProperties();\n+        props.add(new MqttProperties.IntegerProperty(SUBSCRIPTION_IDENTIFIER.value(), 10));\n+        props.add(new MqttProperties.IntegerProperty(SUBSCRIPTION_IDENTIFIER.value(), 20));\n+        props.add(new MqttProperties.IntegerProperty(PAYLOAD_FORMAT_INDICATOR.value(), 6));\n+        props.add(new MqttProperties.StringProperty(CONTENT_TYPE.value(), \"text/plain\"));\n+        props.add(new MqttProperties.UserProperty(\"isSecret\", \"true\"));\n+        props.add(new MqttProperties.UserProperty(\"tag\", \"firstTag\"));\n+        props.add(new MqttProperties.UserProperty(\"tag\", \"secondTag\"));\n+        return props;\n+    }\n+\n+    @Test\n+    public void testGetProperty() {\n+        MqttProperties props = createSampleProperties();\n+\n+        assertEquals(\"getProperty Content Type\",\n+                \"text/plain\",\n+                ((MqttProperties.StringProperty) props.getProperty(CONTENT_TYPE.value())).value);\n+        assertEquals(\"getProperty Subscription ID\",\n+                10,\n+                ((MqttProperties.IntegerProperty) props.getProperty(SUBSCRIPTION_IDENTIFIER.value())).value.intValue());\n+\n+        List<MqttProperties.StringPair> expectedUserProps = new ArrayList<MqttProperties.StringPair>();\n+        expectedUserProps.add(new MqttProperties.StringPair(\"isSecret\", \"true\"));\n+        expectedUserProps.add(new MqttProperties.StringPair(\"tag\", \"firstTag\"));\n+        expectedUserProps.add(new MqttProperties.StringPair(\"tag\", \"secondTag\"));\n+        List<MqttProperties.StringPair> actualUserProps =\n+                ((MqttProperties.UserProperties) props.getProperty(USER_PROPERTY.value())).value;\n+        assertEquals(\"getProperty User Properties\", actualUserProps, expectedUserProps);\n+    }\n+\n+    @Test\n+    public void testGetProperties() {\n+        MqttProperties props = createSampleProperties();\n+\n+        assertEquals(\"getProperties Content Type\",\n+                Collections.singletonList(new MqttProperties.StringProperty(CONTENT_TYPE.value(), \"text/plain\")),\n+                props.getProperties(CONTENT_TYPE.value()));\n+\n+        List<MqttProperties.IntegerProperty> expectedSubscriptionIds = new ArrayList<MqttProperties.IntegerProperty>();\n+        expectedSubscriptionIds.add(new MqttProperties.IntegerProperty(SUBSCRIPTION_IDENTIFIER.value(), 10));\n+        expectedSubscriptionIds.add(new MqttProperties.IntegerProperty(SUBSCRIPTION_IDENTIFIER.value(), 20));\n+        assertEquals(\"getProperties Subscription ID\",\n+                expectedSubscriptionIds,\n+               props.getProperties(SUBSCRIPTION_IDENTIFIER.value()));\n+\n+        List<MqttProperties.UserProperty> expectedUserProps = new ArrayList<MqttProperties.UserProperty>();\n+        expectedUserProps.add(new MqttProperties.UserProperty(\"isSecret\", \"true\"));\n+        expectedUserProps.add(new MqttProperties.UserProperty(\"tag\", \"firstTag\"));\n+        expectedUserProps.add(new MqttProperties.UserProperty(\"tag\", \"secondTag\"));\n+        List<MqttProperties.UserProperty> actualUserProps =\n+                (List<MqttProperties.UserProperty>) props.getProperties(USER_PROPERTY.value());\n+        assertEquals(\"getProperty User Properties\", actualUserProps, expectedUserProps);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "24570893541ed1bb698587043b425f43ac09ec0e"}, "originalPosition": 86}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3637, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}