{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE0MjU2Nzg5", "number": 10765, "reviewThreads": {"totalCount": 34, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNTozOTo0OFrOE3SQaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QwOTozNDo1OFrOFJVjpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDA2MjQ4OnYy", "diffSide": "RIGHT", "path": "codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2PushPromiseFrameTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNTozOTo0OFrOHwilgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNDozMDoyOVrOHxPjjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY2MDM1NQ==", "bodyText": "Why 2?", "url": "https://github.com/netty/netty/pull/10765#discussion_r520660355", "createdAt": "2020-11-10T15:39:48Z", "author": {"login": "bryce-anderson"}, "path": "codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2PushPromiseFrameTest.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http2;\n+\n+import io.netty.bootstrap.Bootstrap;\n+import io.netty.bootstrap.ServerBootstrap;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.channel.socket.nio.NioServerSocketChannel;\n+import io.netty.channel.socket.nio.NioSocketChannel;\n+import io.netty.util.CharsetUtil;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class DefaultHttp2PushPromiseFrameTest {\n+\n+    private final EventLoopGroup eventLoopGroup = new NioEventLoopGroup(2);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c362f6a2b2ad67a81b39f2ddf65f215565fc6703"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM5NzEzNQ==", "bodyText": "Just wanted to give Server and Client dedicated threads.", "url": "https://github.com/netty/netty/pull/10765#discussion_r521397135", "createdAt": "2020-11-11T14:30:29Z", "author": {"login": "hyperxpro"}, "path": "codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2PushPromiseFrameTest.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http2;\n+\n+import io.netty.bootstrap.Bootstrap;\n+import io.netty.bootstrap.ServerBootstrap;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.channel.socket.nio.NioServerSocketChannel;\n+import io.netty.channel.socket.nio.NioSocketChannel;\n+import io.netty.util.CharsetUtil;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class DefaultHttp2PushPromiseFrameTest {\n+\n+    private final EventLoopGroup eventLoopGroup = new NioEventLoopGroup(2);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY2MDM1NQ=="}, "originalCommit": {"oid": "c362f6a2b2ad67a81b39f2ddf65f215565fc6703"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDE5MjkzOnYy", "diffSide": "RIGHT", "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjowNzoxOFrOHwj5jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjowNzoxOFrOHwj5jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY4MTg2OQ==", "bodyText": "It looks like we return the newly created stream id in two places: as the return value and as the newly populated http2FrameStream.id field. What do you think about making the return value of this method void and using the latter when it's necessary? To me, that avoids the ambiguity up higher as to whether we should use streamId returned by this method or pushPromiseFrame.pushStream().id() (or the parallel in the writeHeaders method).", "url": "https://github.com/netty/netty/pull/10765#discussion_r520681869", "createdAt": "2020-11-10T16:07:18Z", "author": {"login": "bryce-anderson"}, "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java", "diffHunk": "@@ -436,6 +422,66 @@ public void operationComplete(ChannelFuture channelFuture) {\n         }\n     }\n \n+    private void writePushPromise(final ChannelHandlerContext ctx, Http2PushPromiseFrame pushPromiseFrame,\n+                                  final ChannelPromise promise) {\n+        if (isStreamIdValid(pushPromiseFrame.pushStream().id())) {\n+            encoder().writePushPromise(ctx, pushPromiseFrame.stream().id(), pushPromiseFrame.pushStream().id(),\n+                    pushPromiseFrame.http2Headers(), pushPromiseFrame.padding(), promise);\n+        } else {\n+            final int streamId = initializeNewStream(ctx, (DefaultHttp2FrameStream) pushPromiseFrame.pushStream(),\n+                    promise);\n+\n+            encoder().writePushPromise(ctx, pushPromiseFrame.stream().id(), streamId,\n+                    pushPromiseFrame.http2Headers(), pushPromiseFrame.padding(), promise);\n+\n+            if (!promise.isDone()) {\n+                numBufferedStreams++;\n+                // Clean up the stream being initialized if writing the headers fails and also\n+                // decrement the number of buffered streams.\n+                promise.addListener(new ChannelFutureListener() {\n+                    @Override\n+                    public void operationComplete(ChannelFuture channelFuture) {\n+                        numBufferedStreams--;\n+\n+                        handleHeaderFuture(channelFuture, streamId);\n+                    }\n+                });\n+            } else {\n+                handleHeaderFuture(promise, streamId);\n+            }\n+        }\n+    }\n+\n+    public int initializeNewStream(ChannelHandlerContext ctx, DefaultHttp2FrameStream http2FrameStream,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c362f6a2b2ad67a81b39f2ddf65f215565fc6703"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDIxMDQ3OnYy", "diffSide": "RIGHT", "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjoxMDo0NFrOHwkEYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNDozMjo0MlrOHxPqGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY4NDY0MA==", "bodyText": "ffti: it's easier to read these branches if you put the simple case first and you get an added bonus of being able to drop the boolean not operator from the predicate.", "url": "https://github.com/netty/netty/pull/10765#discussion_r520684640", "createdAt": "2020-11-10T16:10:44Z", "author": {"login": "bryce-anderson"}, "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java", "diffHunk": "@@ -436,6 +422,66 @@ public void operationComplete(ChannelFuture channelFuture) {\n         }\n     }\n \n+    private void writePushPromise(final ChannelHandlerContext ctx, Http2PushPromiseFrame pushPromiseFrame,\n+                                  final ChannelPromise promise) {\n+        if (isStreamIdValid(pushPromiseFrame.pushStream().id())) {\n+            encoder().writePushPromise(ctx, pushPromiseFrame.stream().id(), pushPromiseFrame.pushStream().id(),\n+                    pushPromiseFrame.http2Headers(), pushPromiseFrame.padding(), promise);\n+        } else {\n+            final int streamId = initializeNewStream(ctx, (DefaultHttp2FrameStream) pushPromiseFrame.pushStream(),\n+                    promise);\n+\n+            encoder().writePushPromise(ctx, pushPromiseFrame.stream().id(), streamId,\n+                    pushPromiseFrame.http2Headers(), pushPromiseFrame.padding(), promise);\n+\n+            if (!promise.isDone()) {\n+                numBufferedStreams++;\n+                // Clean up the stream being initialized if writing the headers fails and also\n+                // decrement the number of buffered streams.\n+                promise.addListener(new ChannelFutureListener() {\n+                    @Override\n+                    public void operationComplete(ChannelFuture channelFuture) {\n+                        numBufferedStreams--;\n+\n+                        handleHeaderFuture(channelFuture, streamId);\n+                    }\n+                });\n+            } else {\n+                handleHeaderFuture(promise, streamId);\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c362f6a2b2ad67a81b39f2ddf65f215565fc6703"}, "originalPosition": 163}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM5ODgwOA==", "bodyText": "Will fix this.", "url": "https://github.com/netty/netty/pull/10765#discussion_r521398808", "createdAt": "2020-11-11T14:32:42Z", "author": {"login": "hyperxpro"}, "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java", "diffHunk": "@@ -436,6 +422,66 @@ public void operationComplete(ChannelFuture channelFuture) {\n         }\n     }\n \n+    private void writePushPromise(final ChannelHandlerContext ctx, Http2PushPromiseFrame pushPromiseFrame,\n+                                  final ChannelPromise promise) {\n+        if (isStreamIdValid(pushPromiseFrame.pushStream().id())) {\n+            encoder().writePushPromise(ctx, pushPromiseFrame.stream().id(), pushPromiseFrame.pushStream().id(),\n+                    pushPromiseFrame.http2Headers(), pushPromiseFrame.padding(), promise);\n+        } else {\n+            final int streamId = initializeNewStream(ctx, (DefaultHttp2FrameStream) pushPromiseFrame.pushStream(),\n+                    promise);\n+\n+            encoder().writePushPromise(ctx, pushPromiseFrame.stream().id(), streamId,\n+                    pushPromiseFrame.http2Headers(), pushPromiseFrame.padding(), promise);\n+\n+            if (!promise.isDone()) {\n+                numBufferedStreams++;\n+                // Clean up the stream being initialized if writing the headers fails and also\n+                // decrement the number of buffered streams.\n+                promise.addListener(new ChannelFutureListener() {\n+                    @Override\n+                    public void operationComplete(ChannelFuture channelFuture) {\n+                        numBufferedStreams--;\n+\n+                        handleHeaderFuture(channelFuture, streamId);\n+                    }\n+                });\n+            } else {\n+                handleHeaderFuture(promise, streamId);\n+            }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY4NDY0MA=="}, "originalCommit": {"oid": "c362f6a2b2ad67a81b39f2ddf65f215565fc6703"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDIzOTAxOnYy", "diffSide": "RIGHT", "path": "codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2PushPromiseFrameTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjoxNjo0NlrOHwkWIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNDozMjoyMVrOHxPpNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY4OTE4Nw==", "bodyText": "Would it be easier to just add the tests to Http2FrameCodecTest.java? It already has a well developed testing scaffold.", "url": "https://github.com/netty/netty/pull/10765#discussion_r520689187", "createdAt": "2020-11-10T16:16:46Z", "author": {"login": "bryce-anderson"}, "path": "codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2PushPromiseFrameTest.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http2;\n+\n+import io.netty.bootstrap.Bootstrap;\n+import io.netty.bootstrap.ServerBootstrap;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.channel.socket.nio.NioServerSocketChannel;\n+import io.netty.channel.socket.nio.NioSocketChannel;\n+import io.netty.util.CharsetUtil;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class DefaultHttp2PushPromiseFrameTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c362f6a2b2ad67a81b39f2ddf65f215565fc6703"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM5ODU4Mw==", "bodyText": "I tried but Http2FrameCodecTest.java was already big and complex and adding this made it 2x complex. So decided to move it into a separate test class.", "url": "https://github.com/netty/netty/pull/10765#discussion_r521398583", "createdAt": "2020-11-11T14:32:21Z", "author": {"login": "hyperxpro"}, "path": "codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2PushPromiseFrameTest.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http2;\n+\n+import io.netty.bootstrap.Bootstrap;\n+import io.netty.bootstrap.ServerBootstrap;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.channel.socket.nio.NioServerSocketChannel;\n+import io.netty.channel.socket.nio.NioSocketChannel;\n+import io.netty.util.CharsetUtil;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class DefaultHttp2PushPromiseFrameTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY4OTE4Nw=="}, "originalCommit": {"oid": "c362f6a2b2ad67a81b39f2ddf65f215565fc6703"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI2NDI0MzkyOnYy", "diffSide": "RIGHT", "path": "codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2PushPromiseFrameTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMFQxNjoxNzo1NVrOHwkZSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQxNDozMjozNVrOHxPpxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY4OTk5NQ==", "bodyText": "In general, it's not a great idea to hard code ports for tests since you can't be sure they're available to you in all environments.", "url": "https://github.com/netty/netty/pull/10765#discussion_r520689995", "createdAt": "2020-11-10T16:17:55Z", "author": {"login": "bryce-anderson"}, "path": "codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2PushPromiseFrameTest.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http2;\n+\n+import io.netty.bootstrap.Bootstrap;\n+import io.netty.bootstrap.ServerBootstrap;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.channel.socket.nio.NioServerSocketChannel;\n+import io.netty.channel.socket.nio.NioSocketChannel;\n+import io.netty.util.CharsetUtil;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class DefaultHttp2PushPromiseFrameTest {\n+\n+    private final EventLoopGroup eventLoopGroup = new NioEventLoopGroup(2);\n+    private final ClientHandler clientHandler = new ClientHandler();\n+    private final Map<Integer, String> contentMap = new ConcurrentHashMap<Integer, String>();\n+\n+    @Before\n+    public void setup() throws InterruptedException {\n+        ServerBootstrap serverBootstrap = new ServerBootstrap()\n+                .group(eventLoopGroup)\n+                .channel(NioServerSocketChannel.class)\n+                .childHandler(new ChannelInitializer<SocketChannel>() {\n+                    @Override\n+                    protected void initChannel(SocketChannel ch) {\n+                        ChannelPipeline pipeline = ch.pipeline();\n+\n+                        Http2FrameCodec frameCodec = Http2FrameCodecBuilder.forServer()\n+                                .autoAckSettingsFrame(true)\n+                                .autoAckPingFrame(true)\n+                                .build();\n+\n+                        pipeline.addLast(frameCodec);\n+                        pipeline.addLast(new ServerHandler());\n+                    }\n+                });\n+\n+        serverBootstrap.bind(\"127.0.0.1\", 5555);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c362f6a2b2ad67a81b39f2ddf65f215565fc6703"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTM5ODcyNw==", "bodyText": "Alright, will fix this.", "url": "https://github.com/netty/netty/pull/10765#discussion_r521398727", "createdAt": "2020-11-11T14:32:35Z", "author": {"login": "hyperxpro"}, "path": "codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2PushPromiseFrameTest.java", "diffHunk": "@@ -0,0 +1,223 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http2;\n+\n+import io.netty.bootstrap.Bootstrap;\n+import io.netty.bootstrap.ServerBootstrap;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.channel.socket.nio.NioServerSocketChannel;\n+import io.netty.channel.socket.nio.NioSocketChannel;\n+import io.netty.util.CharsetUtil;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class DefaultHttp2PushPromiseFrameTest {\n+\n+    private final EventLoopGroup eventLoopGroup = new NioEventLoopGroup(2);\n+    private final ClientHandler clientHandler = new ClientHandler();\n+    private final Map<Integer, String> contentMap = new ConcurrentHashMap<Integer, String>();\n+\n+    @Before\n+    public void setup() throws InterruptedException {\n+        ServerBootstrap serverBootstrap = new ServerBootstrap()\n+                .group(eventLoopGroup)\n+                .channel(NioServerSocketChannel.class)\n+                .childHandler(new ChannelInitializer<SocketChannel>() {\n+                    @Override\n+                    protected void initChannel(SocketChannel ch) {\n+                        ChannelPipeline pipeline = ch.pipeline();\n+\n+                        Http2FrameCodec frameCodec = Http2FrameCodecBuilder.forServer()\n+                                .autoAckSettingsFrame(true)\n+                                .autoAckPingFrame(true)\n+                                .build();\n+\n+                        pipeline.addLast(frameCodec);\n+                        pipeline.addLast(new ServerHandler());\n+                    }\n+                });\n+\n+        serverBootstrap.bind(\"127.0.0.1\", 5555);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDY4OTk5NQ=="}, "originalCommit": {"oid": "c362f6a2b2ad67a81b39f2ddf65f215565fc6703"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NDYyODI1OnYy", "diffSide": "RIGHT", "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwOToxOTowN1rOIKd08A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjo0MTozM1rOIKjncQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg0NTM2MA==", "bodyText": "@hyperxpro why is this public ?", "url": "https://github.com/netty/netty/pull/10765#discussion_r547845360", "createdAt": "2020-12-23T09:19:07Z", "author": {"login": "normanmaurer"}, "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java", "diffHunk": "@@ -436,6 +423,62 @@ public void operationComplete(ChannelFuture channelFuture) {\n         }\n     }\n \n+    private void writePushPromise(final ChannelHandlerContext ctx, Http2PushPromiseFrame pushPromiseFrame,\n+                                  final ChannelPromise promise) {\n+        if (isStreamIdValid(pushPromiseFrame.pushStream().id())) {\n+            encoder().writePushPromise(ctx, pushPromiseFrame.stream().id(), pushPromiseFrame.pushStream().id(),\n+                    pushPromiseFrame.http2Headers(), pushPromiseFrame.padding(), promise);\n+        } else {\n+            initializeNewStream(ctx, (DefaultHttp2FrameStream) pushPromiseFrame.pushStream(), promise);\n+            final int streamId = pushPromiseFrame.stream().id();\n+\n+            encoder().writePushPromise(ctx, streamId, pushPromiseFrame.pushStream().id(),\n+                    pushPromiseFrame.http2Headers(), pushPromiseFrame.padding(), promise);\n+\n+            if (promise.isDone()) {\n+                handleHeaderFuture(promise, streamId);\n+            } else {\n+                numBufferedStreams++;\n+                // Clean up the stream being initialized if writing the headers fails and also\n+                // decrement the number of buffered streams.\n+                promise.addListener(new ChannelFutureListener() {\n+                    @Override\n+                    public void operationComplete(ChannelFuture channelFuture) {\n+                        numBufferedStreams--;\n+\n+                        handleHeaderFuture(channelFuture, streamId);\n+                    }\n+                });\n+            }\n+        }\n+    }\n+\n+    public void initializeNewStream(ChannelHandlerContext ctx, DefaultHttp2FrameStream http2FrameStream,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "317c54fdcf0daecec24ea60a4ef4ff319ab7e764"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg0NzAxMg==", "bodyText": "Also this should return boolean so when using this you can detect when it failed and when not to early return.", "url": "https://github.com/netty/netty/pull/10765#discussion_r547847012", "createdAt": "2020-12-23T09:21:03Z", "author": {"login": "normanmaurer"}, "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java", "diffHunk": "@@ -436,6 +423,62 @@ public void operationComplete(ChannelFuture channelFuture) {\n         }\n     }\n \n+    private void writePushPromise(final ChannelHandlerContext ctx, Http2PushPromiseFrame pushPromiseFrame,\n+                                  final ChannelPromise promise) {\n+        if (isStreamIdValid(pushPromiseFrame.pushStream().id())) {\n+            encoder().writePushPromise(ctx, pushPromiseFrame.stream().id(), pushPromiseFrame.pushStream().id(),\n+                    pushPromiseFrame.http2Headers(), pushPromiseFrame.padding(), promise);\n+        } else {\n+            initializeNewStream(ctx, (DefaultHttp2FrameStream) pushPromiseFrame.pushStream(), promise);\n+            final int streamId = pushPromiseFrame.stream().id();\n+\n+            encoder().writePushPromise(ctx, streamId, pushPromiseFrame.pushStream().id(),\n+                    pushPromiseFrame.http2Headers(), pushPromiseFrame.padding(), promise);\n+\n+            if (promise.isDone()) {\n+                handleHeaderFuture(promise, streamId);\n+            } else {\n+                numBufferedStreams++;\n+                // Clean up the stream being initialized if writing the headers fails and also\n+                // decrement the number of buffered streams.\n+                promise.addListener(new ChannelFutureListener() {\n+                    @Override\n+                    public void operationComplete(ChannelFuture channelFuture) {\n+                        numBufferedStreams--;\n+\n+                        handleHeaderFuture(channelFuture, streamId);\n+                    }\n+                });\n+            }\n+        }\n+    }\n+\n+    public void initializeNewStream(ChannelHandlerContext ctx, DefaultHttp2FrameStream http2FrameStream,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg0NTM2MA=="}, "originalCommit": {"oid": "317c54fdcf0daecec24ea60a4ef4ff319ab7e764"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkyMzA2Mw==", "bodyText": "Some use case needs Stream ID to be generated early before sending HeadersFrame. That's why I made it public. If this approach is not good then I will change it back to package-private.\nMy use case:\nHttp2FrameCodec.DefaultHttp2FrameStream http2FrameStream = (Http2FrameCodec.DefaultHttp2FrameStream) newStream();\nframeCodec.initializeNewStream(ctx, http2FrameStream, promise);\nlong id = httpFrame.id();\n\n// Put the stream ID and Outbound Property into the map.\naddStream(new OutboundProperty(id, http2FrameStream, httpFrame.protocol()));", "url": "https://github.com/netty/netty/pull/10765#discussion_r547923063", "createdAt": "2020-12-23T11:56:49Z", "author": {"login": "hyperxpro"}, "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java", "diffHunk": "@@ -436,6 +423,62 @@ public void operationComplete(ChannelFuture channelFuture) {\n         }\n     }\n \n+    private void writePushPromise(final ChannelHandlerContext ctx, Http2PushPromiseFrame pushPromiseFrame,\n+                                  final ChannelPromise promise) {\n+        if (isStreamIdValid(pushPromiseFrame.pushStream().id())) {\n+            encoder().writePushPromise(ctx, pushPromiseFrame.stream().id(), pushPromiseFrame.pushStream().id(),\n+                    pushPromiseFrame.http2Headers(), pushPromiseFrame.padding(), promise);\n+        } else {\n+            initializeNewStream(ctx, (DefaultHttp2FrameStream) pushPromiseFrame.pushStream(), promise);\n+            final int streamId = pushPromiseFrame.stream().id();\n+\n+            encoder().writePushPromise(ctx, streamId, pushPromiseFrame.pushStream().id(),\n+                    pushPromiseFrame.http2Headers(), pushPromiseFrame.padding(), promise);\n+\n+            if (promise.isDone()) {\n+                handleHeaderFuture(promise, streamId);\n+            } else {\n+                numBufferedStreams++;\n+                // Clean up the stream being initialized if writing the headers fails and also\n+                // decrement the number of buffered streams.\n+                promise.addListener(new ChannelFutureListener() {\n+                    @Override\n+                    public void operationComplete(ChannelFuture channelFuture) {\n+                        numBufferedStreams--;\n+\n+                        handleHeaderFuture(channelFuture, streamId);\n+                    }\n+                });\n+            }\n+        }\n+    }\n+\n+    public void initializeNewStream(ChannelHandlerContext ctx, DefaultHttp2FrameStream http2FrameStream,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg0NTM2MA=="}, "originalCommit": {"oid": "317c54fdcf0daecec24ea60a4ef4ff319ab7e764"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk0MDIwOQ==", "bodyText": "I think we need to solve this in a better way...  Maybe we should at least expose this via the Http2ChannelDuplexHandler", "url": "https://github.com/netty/netty/pull/10765#discussion_r547940209", "createdAt": "2020-12-23T12:41:33Z", "author": {"login": "normanmaurer"}, "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java", "diffHunk": "@@ -436,6 +423,62 @@ public void operationComplete(ChannelFuture channelFuture) {\n         }\n     }\n \n+    private void writePushPromise(final ChannelHandlerContext ctx, Http2PushPromiseFrame pushPromiseFrame,\n+                                  final ChannelPromise promise) {\n+        if (isStreamIdValid(pushPromiseFrame.pushStream().id())) {\n+            encoder().writePushPromise(ctx, pushPromiseFrame.stream().id(), pushPromiseFrame.pushStream().id(),\n+                    pushPromiseFrame.http2Headers(), pushPromiseFrame.padding(), promise);\n+        } else {\n+            initializeNewStream(ctx, (DefaultHttp2FrameStream) pushPromiseFrame.pushStream(), promise);\n+            final int streamId = pushPromiseFrame.stream().id();\n+\n+            encoder().writePushPromise(ctx, streamId, pushPromiseFrame.pushStream().id(),\n+                    pushPromiseFrame.http2Headers(), pushPromiseFrame.padding(), promise);\n+\n+            if (promise.isDone()) {\n+                handleHeaderFuture(promise, streamId);\n+            } else {\n+                numBufferedStreams++;\n+                // Clean up the stream being initialized if writing the headers fails and also\n+                // decrement the number of buffered streams.\n+                promise.addListener(new ChannelFutureListener() {\n+                    @Override\n+                    public void operationComplete(ChannelFuture channelFuture) {\n+                        numBufferedStreams--;\n+\n+                        handleHeaderFuture(channelFuture, streamId);\n+                    }\n+                });\n+            }\n+        }\n+    }\n+\n+    public void initializeNewStream(ChannelHandlerContext ctx, DefaultHttp2FrameStream http2FrameStream,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg0NTM2MA=="}, "originalCommit": {"oid": "317c54fdcf0daecec24ea60a4ef4ff319ab7e764"}, "originalPosition": 168}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NDYzMTQ1OnYy", "diffSide": "RIGHT", "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwOToxOTozOFrOIKd3EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwOToxOTozOFrOIKd3EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg0NTkwNQ==", "bodyText": "missing return.", "url": "https://github.com/netty/netty/pull/10765#discussion_r547845905", "createdAt": "2020-12-23T09:19:38Z", "author": {"login": "normanmaurer"}, "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java", "diffHunk": "@@ -436,6 +423,62 @@ public void operationComplete(ChannelFuture channelFuture) {\n         }\n     }\n \n+    private void writePushPromise(final ChannelHandlerContext ctx, Http2PushPromiseFrame pushPromiseFrame,\n+                                  final ChannelPromise promise) {\n+        if (isStreamIdValid(pushPromiseFrame.pushStream().id())) {\n+            encoder().writePushPromise(ctx, pushPromiseFrame.stream().id(), pushPromiseFrame.pushStream().id(),\n+                    pushPromiseFrame.http2Headers(), pushPromiseFrame.padding(), promise);\n+        } else {\n+            initializeNewStream(ctx, (DefaultHttp2FrameStream) pushPromiseFrame.pushStream(), promise);\n+            final int streamId = pushPromiseFrame.stream().id();\n+\n+            encoder().writePushPromise(ctx, streamId, pushPromiseFrame.pushStream().id(),\n+                    pushPromiseFrame.http2Headers(), pushPromiseFrame.padding(), promise);\n+\n+            if (promise.isDone()) {\n+                handleHeaderFuture(promise, streamId);\n+            } else {\n+                numBufferedStreams++;\n+                // Clean up the stream being initialized if writing the headers fails and also\n+                // decrement the number of buffered streams.\n+                promise.addListener(new ChannelFutureListener() {\n+                    @Override\n+                    public void operationComplete(ChannelFuture channelFuture) {\n+                        numBufferedStreams--;\n+\n+                        handleHeaderFuture(channelFuture, streamId);\n+                    }\n+                });\n+            }\n+        }\n+    }\n+\n+    public void initializeNewStream(ChannelHandlerContext ctx, DefaultHttp2FrameStream http2FrameStream,\n+                                    ChannelPromise promise) {\n+        final Http2Connection connection = connection();\n+        final int streamId = connection.local().incrementAndGetNextStreamId();\n+        if (streamId < 0) {\n+            promise.setFailure(new Http2NoMoreStreamIdsException());\n+\n+            // Simulate a GOAWAY being received due to stream exhaustion on this connection. We use the maximum\n+            // valid stream ID for the current peer.\n+            onHttp2Frame(ctx, new DefaultHttp2GoAwayFrame(connection.isServer() ? Integer.MAX_VALUE :\n+                    Integer.MAX_VALUE - 1, NO_ERROR.code(),\n+                    writeAscii(ctx.alloc(), \"Stream IDs exhausted on local stream creation\")));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "317c54fdcf0daecec24ea60a4ef4ff319ab7e764"}, "originalPosition": 179}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NDY0MTE2OnYy", "diffSide": "RIGHT", "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwOToyMTo0MVrOIKd9Yw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjowNTowN1rOIKiwww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg0NzUyMw==", "bodyText": "like said below this should return a boolean and you should return early when the method failed.", "url": "https://github.com/netty/netty/pull/10765#discussion_r547847523", "createdAt": "2020-12-23T09:21:41Z", "author": {"login": "normanmaurer"}, "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java", "diffHunk": "@@ -436,6 +423,62 @@ public void operationComplete(ChannelFuture channelFuture) {\n         }\n     }\n \n+    private void writePushPromise(final ChannelHandlerContext ctx, Http2PushPromiseFrame pushPromiseFrame,\n+                                  final ChannelPromise promise) {\n+        if (isStreamIdValid(pushPromiseFrame.pushStream().id())) {\n+            encoder().writePushPromise(ctx, pushPromiseFrame.stream().id(), pushPromiseFrame.pushStream().id(),\n+                    pushPromiseFrame.http2Headers(), pushPromiseFrame.padding(), promise);\n+        } else {\n+            initializeNewStream(ctx, (DefaultHttp2FrameStream) pushPromiseFrame.pushStream(), promise);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "317c54fdcf0daecec24ea60a4ef4ff319ab7e764"}, "originalPosition": 144}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkyNjIxMQ==", "bodyText": "Sorry, I didn't get it completely. PTAL at latest commit and suggest.", "url": "https://github.com/netty/netty/pull/10765#discussion_r547926211", "createdAt": "2020-12-23T12:05:07Z", "author": {"login": "hyperxpro"}, "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java", "diffHunk": "@@ -436,6 +423,62 @@ public void operationComplete(ChannelFuture channelFuture) {\n         }\n     }\n \n+    private void writePushPromise(final ChannelHandlerContext ctx, Http2PushPromiseFrame pushPromiseFrame,\n+                                  final ChannelPromise promise) {\n+        if (isStreamIdValid(pushPromiseFrame.pushStream().id())) {\n+            encoder().writePushPromise(ctx, pushPromiseFrame.stream().id(), pushPromiseFrame.pushStream().id(),\n+                    pushPromiseFrame.http2Headers(), pushPromiseFrame.padding(), promise);\n+        } else {\n+            initializeNewStream(ctx, (DefaultHttp2FrameStream) pushPromiseFrame.pushStream(), promise);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg0NzUyMw=="}, "originalCommit": {"oid": "317c54fdcf0daecec24ea60a4ef4ff319ab7e764"}, "originalPosition": 144}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NDY0MTUwOnYy", "diffSide": "RIGHT", "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwOToyMTo0OVrOIKd9lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QwOToyMTo0OVrOIKd9lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzg0NzU3NQ==", "bodyText": "like said below this should return a boolean and you should return early when the method failed.", "url": "https://github.com/netty/netty/pull/10765#discussion_r547847575", "createdAt": "2020-12-23T09:21:49Z", "author": {"login": "normanmaurer"}, "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java", "diffHunk": "@@ -383,37 +392,15 @@ private void writeGoAwayFrame(ChannelHandlerContext ctx, Http2GoAwayFrame frame,\n         goAway(ctx, (int) lastStreamId, frame.errorCode(), frame.content(), promise);\n     }\n \n-    private void writeHeadersFrame(\n-            final ChannelHandlerContext ctx, Http2HeadersFrame headersFrame, final ChannelPromise promise) {\n+    private void writeHeadersFrame(final ChannelHandlerContext ctx, Http2HeadersFrame headersFrame,\n+                                   final ChannelPromise promise) {\n \n         if (isStreamIdValid(headersFrame.stream().id())) {\n             encoder().writeHeaders(ctx, headersFrame.stream().id(), headersFrame.headers(), headersFrame.padding(),\n                     headersFrame.isEndStream(), promise);\n         } else {\n-            final DefaultHttp2FrameStream stream = (DefaultHttp2FrameStream) headersFrame.stream();\n-            final Http2Connection connection = connection();\n-            final int streamId = connection.local().incrementAndGetNextStreamId();\n-            if (streamId < 0) {\n-                promise.setFailure(new Http2NoMoreStreamIdsException());\n-\n-                // Simulate a GOAWAY being received due to stream exhaustion on this connection. We use the maximum\n-                // valid stream ID for the current peer.\n-                onHttp2Frame(ctx, new DefaultHttp2GoAwayFrame(connection.isServer() ? Integer.MAX_VALUE :\n-                        Integer.MAX_VALUE - 1, NO_ERROR.code(),\n-                        writeAscii(ctx.alloc(), \"Stream IDs exhausted on local stream creation\")));\n-                return;\n-            }\n-            stream.id = streamId;\n-\n-            // Use a Map to store all pending streams as we may have multiple. This is needed as if we would store the\n-            // stream in a field directly we may override the stored field before onStreamAdded(...) was called\n-            // and so not correctly set the property for the buffered stream.\n-            //\n-            // See https://github.com/netty/netty/issues/8692\n-            Object old = frameStreamToInitializeMap.put(streamId, stream);\n-\n-            // We should not re-use ids.\n-            assert old == null;\n+            initializeNewStream(ctx, (DefaultHttp2FrameStream) headersFrame.stream(), promise);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "317c54fdcf0daecec24ea60a4ef4ff319ab7e764"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTE2NDY0OnYy", "diffSide": "RIGHT", "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjowNjo1NVrOIKiztA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjowNjo1NVrOIKiztA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkyNjk2NA==", "bodyText": "just merge these two lines", "url": "https://github.com/netty/netty/pull/10765#discussion_r547926964", "createdAt": "2020-12-23T12:06:55Z", "author": {"login": "normanmaurer"}, "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java", "diffHunk": "@@ -383,59 +392,100 @@ private void writeGoAwayFrame(ChannelHandlerContext ctx, Http2GoAwayFrame frame,\n         goAway(ctx, (int) lastStreamId, frame.errorCode(), frame.content(), promise);\n     }\n \n-    private void writeHeadersFrame(\n-            final ChannelHandlerContext ctx, Http2HeadersFrame headersFrame, final ChannelPromise promise) {\n+    private void writeHeadersFrame(final ChannelHandlerContext ctx, Http2HeadersFrame headersFrame,\n+                                   final ChannelPromise promise) {\n \n         if (isStreamIdValid(headersFrame.stream().id())) {\n             encoder().writeHeaders(ctx, headersFrame.stream().id(), headersFrame.headers(), headersFrame.padding(),\n                     headersFrame.isEndStream(), promise);\n         } else {\n-            final DefaultHttp2FrameStream stream = (DefaultHttp2FrameStream) headersFrame.stream();\n-            final Http2Connection connection = connection();\n-            final int streamId = connection.local().incrementAndGetNextStreamId();\n-            if (streamId < 0) {\n-                promise.setFailure(new Http2NoMoreStreamIdsException());\n-\n-                // Simulate a GOAWAY being received due to stream exhaustion on this connection. We use the maximum\n-                // valid stream ID for the current peer.\n-                onHttp2Frame(ctx, new DefaultHttp2GoAwayFrame(connection.isServer() ? Integer.MAX_VALUE :\n-                        Integer.MAX_VALUE - 1, NO_ERROR.code(),\n-                        writeAscii(ctx.alloc(), \"Stream IDs exhausted on local stream creation\")));\n-                return;\n+            boolean init = initializeNewStream(ctx, (DefaultHttp2FrameStream) headersFrame.stream(), promise);\n+            if (init) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99820408095e4b1a8b72079955a58cf3e2d096ee"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTE2NTE2OnYy", "diffSide": "RIGHT", "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjowNzoxMlrOIKi0Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjowNzoxMlrOIKi0Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkyNzA0Nw==", "bodyText": "just merge the two lines", "url": "https://github.com/netty/netty/pull/10765#discussion_r547927047", "createdAt": "2020-12-23T12:07:12Z", "author": {"login": "normanmaurer"}, "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java", "diffHunk": "@@ -383,59 +392,100 @@ private void writeGoAwayFrame(ChannelHandlerContext ctx, Http2GoAwayFrame frame,\n         goAway(ctx, (int) lastStreamId, frame.errorCode(), frame.content(), promise);\n     }\n \n-    private void writeHeadersFrame(\n-            final ChannelHandlerContext ctx, Http2HeadersFrame headersFrame, final ChannelPromise promise) {\n+    private void writeHeadersFrame(final ChannelHandlerContext ctx, Http2HeadersFrame headersFrame,\n+                                   final ChannelPromise promise) {\n \n         if (isStreamIdValid(headersFrame.stream().id())) {\n             encoder().writeHeaders(ctx, headersFrame.stream().id(), headersFrame.headers(), headersFrame.padding(),\n                     headersFrame.isEndStream(), promise);\n         } else {\n-            final DefaultHttp2FrameStream stream = (DefaultHttp2FrameStream) headersFrame.stream();\n-            final Http2Connection connection = connection();\n-            final int streamId = connection.local().incrementAndGetNextStreamId();\n-            if (streamId < 0) {\n-                promise.setFailure(new Http2NoMoreStreamIdsException());\n-\n-                // Simulate a GOAWAY being received due to stream exhaustion on this connection. We use the maximum\n-                // valid stream ID for the current peer.\n-                onHttp2Frame(ctx, new DefaultHttp2GoAwayFrame(connection.isServer() ? Integer.MAX_VALUE :\n-                        Integer.MAX_VALUE - 1, NO_ERROR.code(),\n-                        writeAscii(ctx.alloc(), \"Stream IDs exhausted on local stream creation\")));\n-                return;\n+            boolean init = initializeNewStream(ctx, (DefaultHttp2FrameStream) headersFrame.stream(), promise);\n+            if (init) {\n+                final int streamId = headersFrame.stream().id();\n+\n+                encoder().writeHeaders(ctx, streamId, headersFrame.headers(), headersFrame.padding(),\n+                        headersFrame.isEndStream(), promise);\n+\n+                if (!promise.isDone()) {\n+                    numBufferedStreams++;\n+                    // Clean up the stream being initialized if writing the headers fails and also\n+                    // decrement the number of buffered streams.\n+                    promise.addListener(new ChannelFutureListener() {\n+                        @Override\n+                        public void operationComplete(ChannelFuture channelFuture) {\n+                            numBufferedStreams--;\n+\n+                            handleHeaderFuture(channelFuture, streamId);\n+                        }\n+                    });\n+                } else {\n+                    handleHeaderFuture(promise, streamId);\n+                }\n             }\n-            stream.id = streamId;\n-\n-            // Use a Map to store all pending streams as we may have multiple. This is needed as if we would store the\n-            // stream in a field directly we may override the stored field before onStreamAdded(...) was called\n-            // and so not correctly set the property for the buffered stream.\n-            //\n-            // See https://github.com/netty/netty/issues/8692\n-            Object old = frameStreamToInitializeMap.put(streamId, stream);\n-\n-            // We should not re-use ids.\n-            assert old == null;\n+        }\n+    }\n \n-            encoder().writeHeaders(ctx, streamId, headersFrame.headers(), headersFrame.padding(),\n-                    headersFrame.isEndStream(), promise);\n+    private void writePushPromise(final ChannelHandlerContext ctx, Http2PushPromiseFrame pushPromiseFrame,\n+                                  final ChannelPromise promise) {\n+        if (isStreamIdValid(pushPromiseFrame.pushStream().id())) {\n+            encoder().writePushPromise(ctx, pushPromiseFrame.stream().id(), pushPromiseFrame.pushStream().id(),\n+                    pushPromiseFrame.http2Headers(), pushPromiseFrame.padding(), promise);\n+        } else {\n+            boolean init = initializeNewStream(ctx, (DefaultHttp2FrameStream) pushPromiseFrame.pushStream(), promise);\n+            if (init) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99820408095e4b1a8b72079955a58cf3e2d096ee"}, "originalPosition": 163}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTE2NjU5OnYy", "diffSide": "RIGHT", "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjowNzo1NVrOIKi08A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNjozOToyM1rOIKqCwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkyNzI4MA==", "bodyText": "So I strongly believe this should not be public... If the user needs this method we need to find a better way of exposing this", "url": "https://github.com/netty/netty/pull/10765#discussion_r547927280", "createdAt": "2020-12-23T12:07:55Z", "author": {"login": "normanmaurer"}, "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java", "diffHunk": "@@ -383,59 +392,100 @@ private void writeGoAwayFrame(ChannelHandlerContext ctx, Http2GoAwayFrame frame,\n         goAway(ctx, (int) lastStreamId, frame.errorCode(), frame.content(), promise);\n     }\n \n-    private void writeHeadersFrame(\n-            final ChannelHandlerContext ctx, Http2HeadersFrame headersFrame, final ChannelPromise promise) {\n+    private void writeHeadersFrame(final ChannelHandlerContext ctx, Http2HeadersFrame headersFrame,\n+                                   final ChannelPromise promise) {\n \n         if (isStreamIdValid(headersFrame.stream().id())) {\n             encoder().writeHeaders(ctx, headersFrame.stream().id(), headersFrame.headers(), headersFrame.padding(),\n                     headersFrame.isEndStream(), promise);\n         } else {\n-            final DefaultHttp2FrameStream stream = (DefaultHttp2FrameStream) headersFrame.stream();\n-            final Http2Connection connection = connection();\n-            final int streamId = connection.local().incrementAndGetNextStreamId();\n-            if (streamId < 0) {\n-                promise.setFailure(new Http2NoMoreStreamIdsException());\n-\n-                // Simulate a GOAWAY being received due to stream exhaustion on this connection. We use the maximum\n-                // valid stream ID for the current peer.\n-                onHttp2Frame(ctx, new DefaultHttp2GoAwayFrame(connection.isServer() ? Integer.MAX_VALUE :\n-                        Integer.MAX_VALUE - 1, NO_ERROR.code(),\n-                        writeAscii(ctx.alloc(), \"Stream IDs exhausted on local stream creation\")));\n-                return;\n+            boolean init = initializeNewStream(ctx, (DefaultHttp2FrameStream) headersFrame.stream(), promise);\n+            if (init) {\n+                final int streamId = headersFrame.stream().id();\n+\n+                encoder().writeHeaders(ctx, streamId, headersFrame.headers(), headersFrame.padding(),\n+                        headersFrame.isEndStream(), promise);\n+\n+                if (!promise.isDone()) {\n+                    numBufferedStreams++;\n+                    // Clean up the stream being initialized if writing the headers fails and also\n+                    // decrement the number of buffered streams.\n+                    promise.addListener(new ChannelFutureListener() {\n+                        @Override\n+                        public void operationComplete(ChannelFuture channelFuture) {\n+                            numBufferedStreams--;\n+\n+                            handleHeaderFuture(channelFuture, streamId);\n+                        }\n+                    });\n+                } else {\n+                    handleHeaderFuture(promise, streamId);\n+                }\n             }\n-            stream.id = streamId;\n-\n-            // Use a Map to store all pending streams as we may have multiple. This is needed as if we would store the\n-            // stream in a field directly we may override the stored field before onStreamAdded(...) was called\n-            // and so not correctly set the property for the buffered stream.\n-            //\n-            // See https://github.com/netty/netty/issues/8692\n-            Object old = frameStreamToInitializeMap.put(streamId, stream);\n-\n-            // We should not re-use ids.\n-            assert old == null;\n+        }\n+    }\n \n-            encoder().writeHeaders(ctx, streamId, headersFrame.headers(), headersFrame.padding(),\n-                    headersFrame.isEndStream(), promise);\n+    private void writePushPromise(final ChannelHandlerContext ctx, Http2PushPromiseFrame pushPromiseFrame,\n+                                  final ChannelPromise promise) {\n+        if (isStreamIdValid(pushPromiseFrame.pushStream().id())) {\n+            encoder().writePushPromise(ctx, pushPromiseFrame.stream().id(), pushPromiseFrame.pushStream().id(),\n+                    pushPromiseFrame.http2Headers(), pushPromiseFrame.padding(), promise);\n+        } else {\n+            boolean init = initializeNewStream(ctx, (DefaultHttp2FrameStream) pushPromiseFrame.pushStream(), promise);\n+            if (init) {\n+                final int streamId = pushPromiseFrame.stream().id();\n \n-            if (!promise.isDone()) {\n-                numBufferedStreams++;\n-                // Clean up the stream being initialized if writing the headers fails and also\n-                // decrement the number of buffered streams.\n-                promise.addListener(new ChannelFutureListener() {\n-                    @Override\n-                    public void operationComplete(ChannelFuture channelFuture) {\n-                        numBufferedStreams--;\n+                encoder().writePushPromise(ctx, streamId, pushPromiseFrame.pushStream().id(),\n+                        pushPromiseFrame.http2Headers(), pushPromiseFrame.padding(), promise);\n \n-                        handleHeaderFuture(channelFuture, streamId);\n-                    }\n-                });\n-            } else {\n-                handleHeaderFuture(promise, streamId);\n+                if (promise.isDone()) {\n+                    handleHeaderFuture(promise, streamId);\n+                } else {\n+                    numBufferedStreams++;\n+                    // Clean up the stream being initialized if writing the headers fails and also\n+                    // decrement the number of buffered streams.\n+                    promise.addListener(new ChannelFutureListener() {\n+                        @Override\n+                        public void operationComplete(ChannelFuture channelFuture) {\n+                            numBufferedStreams--;\n+\n+                            handleHeaderFuture(channelFuture, streamId);\n+                        }\n+                    });\n+                }\n             }\n         }\n     }\n \n+    public boolean initializeNewStream(ChannelHandlerContext ctx, DefaultHttp2FrameStream http2FrameStream,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99820408095e4b1a8b72079955a58cf3e2d096ee"}, "originalPosition": 201}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA0NTUwNA==", "bodyText": "@hyperxpro ^^", "url": "https://github.com/netty/netty/pull/10765#discussion_r548045504", "createdAt": "2020-12-23T16:39:23Z", "author": {"login": "normanmaurer"}, "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java", "diffHunk": "@@ -383,59 +392,100 @@ private void writeGoAwayFrame(ChannelHandlerContext ctx, Http2GoAwayFrame frame,\n         goAway(ctx, (int) lastStreamId, frame.errorCode(), frame.content(), promise);\n     }\n \n-    private void writeHeadersFrame(\n-            final ChannelHandlerContext ctx, Http2HeadersFrame headersFrame, final ChannelPromise promise) {\n+    private void writeHeadersFrame(final ChannelHandlerContext ctx, Http2HeadersFrame headersFrame,\n+                                   final ChannelPromise promise) {\n \n         if (isStreamIdValid(headersFrame.stream().id())) {\n             encoder().writeHeaders(ctx, headersFrame.stream().id(), headersFrame.headers(), headersFrame.padding(),\n                     headersFrame.isEndStream(), promise);\n         } else {\n-            final DefaultHttp2FrameStream stream = (DefaultHttp2FrameStream) headersFrame.stream();\n-            final Http2Connection connection = connection();\n-            final int streamId = connection.local().incrementAndGetNextStreamId();\n-            if (streamId < 0) {\n-                promise.setFailure(new Http2NoMoreStreamIdsException());\n-\n-                // Simulate a GOAWAY being received due to stream exhaustion on this connection. We use the maximum\n-                // valid stream ID for the current peer.\n-                onHttp2Frame(ctx, new DefaultHttp2GoAwayFrame(connection.isServer() ? Integer.MAX_VALUE :\n-                        Integer.MAX_VALUE - 1, NO_ERROR.code(),\n-                        writeAscii(ctx.alloc(), \"Stream IDs exhausted on local stream creation\")));\n-                return;\n+            boolean init = initializeNewStream(ctx, (DefaultHttp2FrameStream) headersFrame.stream(), promise);\n+            if (init) {\n+                final int streamId = headersFrame.stream().id();\n+\n+                encoder().writeHeaders(ctx, streamId, headersFrame.headers(), headersFrame.padding(),\n+                        headersFrame.isEndStream(), promise);\n+\n+                if (!promise.isDone()) {\n+                    numBufferedStreams++;\n+                    // Clean up the stream being initialized if writing the headers fails and also\n+                    // decrement the number of buffered streams.\n+                    promise.addListener(new ChannelFutureListener() {\n+                        @Override\n+                        public void operationComplete(ChannelFuture channelFuture) {\n+                            numBufferedStreams--;\n+\n+                            handleHeaderFuture(channelFuture, streamId);\n+                        }\n+                    });\n+                } else {\n+                    handleHeaderFuture(promise, streamId);\n+                }\n             }\n-            stream.id = streamId;\n-\n-            // Use a Map to store all pending streams as we may have multiple. This is needed as if we would store the\n-            // stream in a field directly we may override the stored field before onStreamAdded(...) was called\n-            // and so not correctly set the property for the buffered stream.\n-            //\n-            // See https://github.com/netty/netty/issues/8692\n-            Object old = frameStreamToInitializeMap.put(streamId, stream);\n-\n-            // We should not re-use ids.\n-            assert old == null;\n+        }\n+    }\n \n-            encoder().writeHeaders(ctx, streamId, headersFrame.headers(), headersFrame.padding(),\n-                    headersFrame.isEndStream(), promise);\n+    private void writePushPromise(final ChannelHandlerContext ctx, Http2PushPromiseFrame pushPromiseFrame,\n+                                  final ChannelPromise promise) {\n+        if (isStreamIdValid(pushPromiseFrame.pushStream().id())) {\n+            encoder().writePushPromise(ctx, pushPromiseFrame.stream().id(), pushPromiseFrame.pushStream().id(),\n+                    pushPromiseFrame.http2Headers(), pushPromiseFrame.padding(), promise);\n+        } else {\n+            boolean init = initializeNewStream(ctx, (DefaultHttp2FrameStream) pushPromiseFrame.pushStream(), promise);\n+            if (init) {\n+                final int streamId = pushPromiseFrame.stream().id();\n \n-            if (!promise.isDone()) {\n-                numBufferedStreams++;\n-                // Clean up the stream being initialized if writing the headers fails and also\n-                // decrement the number of buffered streams.\n-                promise.addListener(new ChannelFutureListener() {\n-                    @Override\n-                    public void operationComplete(ChannelFuture channelFuture) {\n-                        numBufferedStreams--;\n+                encoder().writePushPromise(ctx, streamId, pushPromiseFrame.pushStream().id(),\n+                        pushPromiseFrame.http2Headers(), pushPromiseFrame.padding(), promise);\n \n-                        handleHeaderFuture(channelFuture, streamId);\n-                    }\n-                });\n-            } else {\n-                handleHeaderFuture(promise, streamId);\n+                if (promise.isDone()) {\n+                    handleHeaderFuture(promise, streamId);\n+                } else {\n+                    numBufferedStreams++;\n+                    // Clean up the stream being initialized if writing the headers fails and also\n+                    // decrement the number of buffered streams.\n+                    promise.addListener(new ChannelFutureListener() {\n+                        @Override\n+                        public void operationComplete(ChannelFuture channelFuture) {\n+                            numBufferedStreams--;\n+\n+                            handleHeaderFuture(channelFuture, streamId);\n+                        }\n+                    });\n+                }\n             }\n         }\n     }\n \n+    public boolean initializeNewStream(ChannelHandlerContext ctx, DefaultHttp2FrameStream http2FrameStream,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkyNzI4MA=="}, "originalCommit": {"oid": "99820408095e4b1a8b72079955a58cf3e2d096ee"}, "originalPosition": 201}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTE2OTEzOnYy", "diffSide": "RIGHT", "path": "codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2PushPromiseFrameTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjowODo0N1rOIKi2WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjowODo0N1rOIKi2WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkyNzY0MA==", "bodyText": "Seeing a sleep here seems like there needs to be something else that needs to be fixed", "url": "https://github.com/netty/netty/pull/10765#discussion_r547927640", "createdAt": "2020-12-23T12:08:47Z", "author": {"login": "normanmaurer"}, "path": "codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2PushPromiseFrameTest.java", "diffHunk": "@@ -0,0 +1,224 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http2;\n+\n+import io.netty.bootstrap.Bootstrap;\n+import io.netty.bootstrap.ServerBootstrap;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.channel.socket.nio.NioServerSocketChannel;\n+import io.netty.channel.socket.nio.NioSocketChannel;\n+import io.netty.util.CharsetUtil;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class DefaultHttp2PushPromiseFrameTest {\n+\n+    private final EventLoopGroup eventLoopGroup = new NioEventLoopGroup(2);\n+    private final ClientHandler clientHandler = new ClientHandler();\n+    private final Map<Integer, String> contentMap = new ConcurrentHashMap<Integer, String>();\n+\n+    @Before\n+    public void setup() throws InterruptedException {\n+        ServerBootstrap serverBootstrap = new ServerBootstrap()\n+                .group(eventLoopGroup)\n+                .channel(NioServerSocketChannel.class)\n+                .childHandler(new ChannelInitializer<SocketChannel>() {\n+                    @Override\n+                    protected void initChannel(SocketChannel ch) {\n+                        ChannelPipeline pipeline = ch.pipeline();\n+\n+                        Http2FrameCodec frameCodec = Http2FrameCodecBuilder.forServer()\n+                                .autoAckSettingsFrame(true)\n+                                .autoAckPingFrame(true)\n+                                .build();\n+\n+                        pipeline.addLast(frameCodec);\n+                        pipeline.addLast(new ServerHandler());\n+                    }\n+                });\n+\n+        ChannelFuture channelFuture = serverBootstrap.bind(0).sync();\n+\n+        final Bootstrap bootstrap = new Bootstrap()\n+                .group(eventLoopGroup)\n+                .channel(NioSocketChannel.class)\n+                .handler(new ChannelInitializer<SocketChannel>() {\n+                    @Override\n+                    protected void initChannel(SocketChannel ch) {\n+                        ChannelPipeline pipeline = ch.pipeline();\n+\n+                        Http2FrameCodec frameCodec = Http2FrameCodecBuilder.forClient()\n+                                .autoAckSettingsFrame(true)\n+                                .autoAckPingFrame(true)\n+                                .initialSettings(Http2Settings.defaultSettings().pushEnabled(true))\n+                                .build();\n+\n+                        pipeline.addLast(frameCodec);\n+                        pipeline.addLast(clientHandler);\n+                    }\n+                });\n+\n+        bootstrap.connect(channelFuture.channel().localAddress()).sync();\n+    }\n+\n+    @Test\n+    public void send() throws InterruptedException {\n+        Thread.sleep(100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99820408095e4b1a8b72079955a58cf3e2d096ee"}, "originalPosition": 92}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTIyMzYwOnYy", "diffSide": "RIGHT", "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2PushPromiseFrame.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjoyODo1NVrOIKjUfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjoyODo1NVrOIKjUfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkzNTM1OQ==", "bodyText": "This should have no get prefix... Also it missed javadocs. Beside this I wonder why this is not part of the interface ?", "url": "https://github.com/netty/netty/pull/10765#discussion_r547935359", "createdAt": "2020-12-23T12:28:55Z", "author": {"login": "normanmaurer"}, "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2PushPromiseFrame.java", "diffHunk": "@@ -0,0 +1,97 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http2;\n+\n+/**\n+ * Default implementation of {@link Http2PushPromiseFrame}\n+ */\n+public class DefaultHttp2PushPromiseFrame implements Http2PushPromiseFrame {\n+\n+    private Http2FrameStream pushStreamFrame;\n+    private final Http2Headers http2Headers;\n+    private Http2FrameStream streamFrame;\n+    private final int padding;\n+    private final int promisedStreamId;\n+\n+    public DefaultHttp2PushPromiseFrame(Http2Headers http2Headers) {\n+        this(http2Headers, 0);\n+    }\n+\n+    public DefaultHttp2PushPromiseFrame(Http2Headers http2Headers, int padding) {\n+        this(http2Headers, padding, -1);\n+    }\n+\n+    DefaultHttp2PushPromiseFrame(Http2Headers http2Headers, int padding, int promisedStreamId) {\n+        this.http2Headers = http2Headers;\n+        this.padding = padding;\n+        this.promisedStreamId = promisedStreamId;\n+    }\n+\n+    @Override\n+    public Http2StreamFrame pushStream(Http2FrameStream stream) {\n+        pushStreamFrame = stream;\n+        return this;\n+    }\n+\n+    @Override\n+    public Http2FrameStream pushStream() {\n+        return pushStreamFrame;\n+    }\n+\n+    @Override\n+    public Http2Headers http2Headers() {\n+        return http2Headers;\n+    }\n+\n+    @Override\n+    public int padding() {\n+        return padding;\n+    }\n+\n+    @Override\n+    public Http2StreamFrame stream(Http2FrameStream stream) {\n+        streamFrame = stream;\n+        return this;\n+    }\n+\n+    @Override\n+    public Http2FrameStream stream() {\n+        return streamFrame;\n+    }\n+\n+    public int getPromisedStreamId() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7ff80e555ecf30beac89b424904e859de4ae94"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTIyNTk4OnYy", "diffSide": "RIGHT", "path": "codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2PushPromiseFrameTest.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjoyOTo0OVrOIKjV6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjo1NDowNlrOIKj6Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkzNTcyMg==", "bodyText": "never call sync() in the eventloop. Remove this call and also remove the throws...", "url": "https://github.com/netty/netty/pull/10765#discussion_r547935722", "createdAt": "2020-12-23T12:29:49Z", "author": {"login": "normanmaurer"}, "path": "codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2PushPromiseFrameTest.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http2;\n+\n+import io.netty.bootstrap.Bootstrap;\n+import io.netty.bootstrap.ServerBootstrap;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.channel.socket.nio.NioServerSocketChannel;\n+import io.netty.channel.socket.nio.NioSocketChannel;\n+import io.netty.util.CharsetUtil;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class DefaultHttp2PushPromiseFrameTest {\n+\n+    private final EventLoopGroup eventLoopGroup = new NioEventLoopGroup(2);\n+    private final ClientHandler clientHandler = new ClientHandler();\n+    private final Map<Integer, String> contentMap = new ConcurrentHashMap<Integer, String>();\n+\n+    private ChannelFuture connectionFuture;\n+\n+    @Before\n+    public void setup() throws InterruptedException {\n+        ServerBootstrap serverBootstrap = new ServerBootstrap()\n+                .group(eventLoopGroup)\n+                .channel(NioServerSocketChannel.class)\n+                .childHandler(new ChannelInitializer<SocketChannel>() {\n+                    @Override\n+                    protected void initChannel(SocketChannel ch) {\n+                        ChannelPipeline pipeline = ch.pipeline();\n+\n+                        Http2FrameCodec frameCodec = Http2FrameCodecBuilder.forServer()\n+                                .autoAckSettingsFrame(true)\n+                                .autoAckPingFrame(true)\n+                                .build();\n+\n+                        pipeline.addLast(frameCodec);\n+                        pipeline.addLast(new ServerHandler());\n+                    }\n+                });\n+\n+        ChannelFuture channelFuture = serverBootstrap.bind(0).sync();\n+\n+        final Bootstrap bootstrap = new Bootstrap()\n+                .group(eventLoopGroup)\n+                .channel(NioSocketChannel.class)\n+                .handler(new ChannelInitializer<SocketChannel>() {\n+                    @Override\n+                    protected void initChannel(SocketChannel ch) {\n+                        ChannelPipeline pipeline = ch.pipeline();\n+\n+                        Http2FrameCodec frameCodec = Http2FrameCodecBuilder.forClient()\n+                                .autoAckSettingsFrame(true)\n+                                .autoAckPingFrame(true)\n+                                .initialSettings(Http2Settings.defaultSettings().pushEnabled(true))\n+                                .build();\n+\n+                        pipeline.addLast(frameCodec);\n+                        pipeline.addLast(clientHandler);\n+                    }\n+                });\n+\n+        connectionFuture = bootstrap.connect(channelFuture.channel().localAddress());\n+    }\n+\n+    @Test\n+    public void send() throws InterruptedException {\n+        connectionFuture.sync();\n+    }\n+\n+    @After\n+    public void shutdown() {\n+        eventLoopGroup.shutdownGracefully();\n+    }\n+\n+    private final class ServerHandler extends Http2ChannelDuplexHandler {\n+\n+        @Override\n+        public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n+\n+            if (msg instanceof Http2HeadersFrame) {\n+                Http2HeadersFrame receivedFrame = (Http2HeadersFrame) msg;\n+\n+                Http2Headers pushRequestHeaders = new DefaultHttp2Headers();\n+                pushRequestHeaders.path(\"/meow\")\n+                        .method(\"GET\")\n+                        .scheme(\"https\")\n+                        .authority(\"localhost:5555\");\n+\n+                // Write PUSH_PROMISE request headers\n+                Http2FrameStream newPushFrameStream = newStream();\n+                Http2PushPromiseFrame pushPromiseFrame = new DefaultHttp2PushPromiseFrame(pushRequestHeaders);\n+                pushPromiseFrame.stream(receivedFrame.stream());\n+                pushPromiseFrame.pushStream(newPushFrameStream);\n+                ctx.writeAndFlush(pushPromiseFrame).sync();\n+\n+                contentMap.put(newPushFrameStream.id(), \"Meow, I am Pushed via HTTP/2\");\n+\n+                // Write headers for actual request\n+                Http2Headers http2Headers = new DefaultHttp2Headers();\n+                http2Headers.status(\"200\");\n+                http2Headers.add(\"push\", \"false\");\n+                Http2HeadersFrame headersFrame = new DefaultHttp2HeadersFrame(http2Headers, false);\n+                headersFrame.stream(receivedFrame.stream());\n+                ctx.writeAndFlush(headersFrame).sync();\n+\n+                // Write Data of actual request\n+                Http2DataFrame dataFrame = new DefaultHttp2DataFrame(Unpooled.wrappedBuffer(\"Meow\".getBytes()), true);\n+                dataFrame.stream(receivedFrame.stream());\n+                ctx.writeAndFlush(dataFrame).sync();\n+            } else if (msg instanceof Http2PriorityFrame) {\n+                Http2PriorityFrame priorityFrame = (Http2PriorityFrame) msg;\n+                String content = contentMap.get(priorityFrame.stream().id());\n+                if (content == null) {\n+                    ctx.writeAndFlush(new DefaultHttp2GoAwayFrame(Http2Error.REFUSED_STREAM));\n+                    return;\n+                }\n+\n+                // Write headers for Priority request\n+                Http2Headers http2Headers = new DefaultHttp2Headers();\n+                http2Headers.status(\"200\");\n+                http2Headers.add(\"push\", \"true\");\n+                Http2HeadersFrame headersFrame = new DefaultHttp2HeadersFrame(http2Headers, false);\n+                headersFrame.stream(priorityFrame.stream());\n+                ctx.writeAndFlush(headersFrame).sync();\n+\n+                // Write Data of Priority request\n+                Http2DataFrame dataFrame = new DefaultHttp2DataFrame(Unpooled.wrappedBuffer(content.getBytes()), true);\n+                dataFrame.stream(priorityFrame.stream());\n+                ctx.writeAndFlush(dataFrame).sync();\n+            }\n+        }\n+    }\n+\n+    private static final class ClientHandler extends Http2ChannelDuplexHandler {\n+\n+        @Override\n+        public void channelActive(ChannelHandlerContext ctx) throws InterruptedException {\n+            Http2Headers http2Headers = new DefaultHttp2Headers();\n+            http2Headers.path(\"/\")\n+                    .authority(\"localhost\")\n+                    .method(\"GET\")\n+                    .scheme(\"https\");\n+\n+            Http2HeadersFrame headersFrame = new DefaultHttp2HeadersFrame(http2Headers, true);\n+            headersFrame.stream(newStream());\n+            ctx.writeAndFlush(headersFrame).sync();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7ff80e555ecf30beac89b424904e859de4ae94"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkzODk2Ng==", "bodyText": "Then I get NPE if I don't block it with something. That's why I had Thread#sleep.", "url": "https://github.com/netty/netty/pull/10765#discussion_r547938966", "createdAt": "2020-12-23T12:38:13Z", "author": {"login": "hyperxpro"}, "path": "codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2PushPromiseFrameTest.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http2;\n+\n+import io.netty.bootstrap.Bootstrap;\n+import io.netty.bootstrap.ServerBootstrap;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.channel.socket.nio.NioServerSocketChannel;\n+import io.netty.channel.socket.nio.NioSocketChannel;\n+import io.netty.util.CharsetUtil;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class DefaultHttp2PushPromiseFrameTest {\n+\n+    private final EventLoopGroup eventLoopGroup = new NioEventLoopGroup(2);\n+    private final ClientHandler clientHandler = new ClientHandler();\n+    private final Map<Integer, String> contentMap = new ConcurrentHashMap<Integer, String>();\n+\n+    private ChannelFuture connectionFuture;\n+\n+    @Before\n+    public void setup() throws InterruptedException {\n+        ServerBootstrap serverBootstrap = new ServerBootstrap()\n+                .group(eventLoopGroup)\n+                .channel(NioServerSocketChannel.class)\n+                .childHandler(new ChannelInitializer<SocketChannel>() {\n+                    @Override\n+                    protected void initChannel(SocketChannel ch) {\n+                        ChannelPipeline pipeline = ch.pipeline();\n+\n+                        Http2FrameCodec frameCodec = Http2FrameCodecBuilder.forServer()\n+                                .autoAckSettingsFrame(true)\n+                                .autoAckPingFrame(true)\n+                                .build();\n+\n+                        pipeline.addLast(frameCodec);\n+                        pipeline.addLast(new ServerHandler());\n+                    }\n+                });\n+\n+        ChannelFuture channelFuture = serverBootstrap.bind(0).sync();\n+\n+        final Bootstrap bootstrap = new Bootstrap()\n+                .group(eventLoopGroup)\n+                .channel(NioSocketChannel.class)\n+                .handler(new ChannelInitializer<SocketChannel>() {\n+                    @Override\n+                    protected void initChannel(SocketChannel ch) {\n+                        ChannelPipeline pipeline = ch.pipeline();\n+\n+                        Http2FrameCodec frameCodec = Http2FrameCodecBuilder.forClient()\n+                                .autoAckSettingsFrame(true)\n+                                .autoAckPingFrame(true)\n+                                .initialSettings(Http2Settings.defaultSettings().pushEnabled(true))\n+                                .build();\n+\n+                        pipeline.addLast(frameCodec);\n+                        pipeline.addLast(clientHandler);\n+                    }\n+                });\n+\n+        connectionFuture = bootstrap.connect(channelFuture.channel().localAddress());\n+    }\n+\n+    @Test\n+    public void send() throws InterruptedException {\n+        connectionFuture.sync();\n+    }\n+\n+    @After\n+    public void shutdown() {\n+        eventLoopGroup.shutdownGracefully();\n+    }\n+\n+    private final class ServerHandler extends Http2ChannelDuplexHandler {\n+\n+        @Override\n+        public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n+\n+            if (msg instanceof Http2HeadersFrame) {\n+                Http2HeadersFrame receivedFrame = (Http2HeadersFrame) msg;\n+\n+                Http2Headers pushRequestHeaders = new DefaultHttp2Headers();\n+                pushRequestHeaders.path(\"/meow\")\n+                        .method(\"GET\")\n+                        .scheme(\"https\")\n+                        .authority(\"localhost:5555\");\n+\n+                // Write PUSH_PROMISE request headers\n+                Http2FrameStream newPushFrameStream = newStream();\n+                Http2PushPromiseFrame pushPromiseFrame = new DefaultHttp2PushPromiseFrame(pushRequestHeaders);\n+                pushPromiseFrame.stream(receivedFrame.stream());\n+                pushPromiseFrame.pushStream(newPushFrameStream);\n+                ctx.writeAndFlush(pushPromiseFrame).sync();\n+\n+                contentMap.put(newPushFrameStream.id(), \"Meow, I am Pushed via HTTP/2\");\n+\n+                // Write headers for actual request\n+                Http2Headers http2Headers = new DefaultHttp2Headers();\n+                http2Headers.status(\"200\");\n+                http2Headers.add(\"push\", \"false\");\n+                Http2HeadersFrame headersFrame = new DefaultHttp2HeadersFrame(http2Headers, false);\n+                headersFrame.stream(receivedFrame.stream());\n+                ctx.writeAndFlush(headersFrame).sync();\n+\n+                // Write Data of actual request\n+                Http2DataFrame dataFrame = new DefaultHttp2DataFrame(Unpooled.wrappedBuffer(\"Meow\".getBytes()), true);\n+                dataFrame.stream(receivedFrame.stream());\n+                ctx.writeAndFlush(dataFrame).sync();\n+            } else if (msg instanceof Http2PriorityFrame) {\n+                Http2PriorityFrame priorityFrame = (Http2PriorityFrame) msg;\n+                String content = contentMap.get(priorityFrame.stream().id());\n+                if (content == null) {\n+                    ctx.writeAndFlush(new DefaultHttp2GoAwayFrame(Http2Error.REFUSED_STREAM));\n+                    return;\n+                }\n+\n+                // Write headers for Priority request\n+                Http2Headers http2Headers = new DefaultHttp2Headers();\n+                http2Headers.status(\"200\");\n+                http2Headers.add(\"push\", \"true\");\n+                Http2HeadersFrame headersFrame = new DefaultHttp2HeadersFrame(http2Headers, false);\n+                headersFrame.stream(priorityFrame.stream());\n+                ctx.writeAndFlush(headersFrame).sync();\n+\n+                // Write Data of Priority request\n+                Http2DataFrame dataFrame = new DefaultHttp2DataFrame(Unpooled.wrappedBuffer(content.getBytes()), true);\n+                dataFrame.stream(priorityFrame.stream());\n+                ctx.writeAndFlush(dataFrame).sync();\n+            }\n+        }\n+    }\n+\n+    private static final class ClientHandler extends Http2ChannelDuplexHandler {\n+\n+        @Override\n+        public void channelActive(ChannelHandlerContext ctx) throws InterruptedException {\n+            Http2Headers http2Headers = new DefaultHttp2Headers();\n+            http2Headers.path(\"/\")\n+                    .authority(\"localhost\")\n+                    .method(\"GET\")\n+                    .scheme(\"https\");\n+\n+            Http2HeadersFrame headersFrame = new DefaultHttp2HeadersFrame(http2Headers, true);\n+            headersFrame.stream(newStream());\n+            ctx.writeAndFlush(headersFrame).sync();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkzNTcyMg=="}, "originalCommit": {"oid": "ee7ff80e555ecf30beac89b424904e859de4ae94"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk0MDMyOA==", "bodyText": "show me the stack trace", "url": "https://github.com/netty/netty/pull/10765#discussion_r547940328", "createdAt": "2020-12-23T12:41:54Z", "author": {"login": "normanmaurer"}, "path": "codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2PushPromiseFrameTest.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http2;\n+\n+import io.netty.bootstrap.Bootstrap;\n+import io.netty.bootstrap.ServerBootstrap;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.channel.socket.nio.NioServerSocketChannel;\n+import io.netty.channel.socket.nio.NioSocketChannel;\n+import io.netty.util.CharsetUtil;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class DefaultHttp2PushPromiseFrameTest {\n+\n+    private final EventLoopGroup eventLoopGroup = new NioEventLoopGroup(2);\n+    private final ClientHandler clientHandler = new ClientHandler();\n+    private final Map<Integer, String> contentMap = new ConcurrentHashMap<Integer, String>();\n+\n+    private ChannelFuture connectionFuture;\n+\n+    @Before\n+    public void setup() throws InterruptedException {\n+        ServerBootstrap serverBootstrap = new ServerBootstrap()\n+                .group(eventLoopGroup)\n+                .channel(NioServerSocketChannel.class)\n+                .childHandler(new ChannelInitializer<SocketChannel>() {\n+                    @Override\n+                    protected void initChannel(SocketChannel ch) {\n+                        ChannelPipeline pipeline = ch.pipeline();\n+\n+                        Http2FrameCodec frameCodec = Http2FrameCodecBuilder.forServer()\n+                                .autoAckSettingsFrame(true)\n+                                .autoAckPingFrame(true)\n+                                .build();\n+\n+                        pipeline.addLast(frameCodec);\n+                        pipeline.addLast(new ServerHandler());\n+                    }\n+                });\n+\n+        ChannelFuture channelFuture = serverBootstrap.bind(0).sync();\n+\n+        final Bootstrap bootstrap = new Bootstrap()\n+                .group(eventLoopGroup)\n+                .channel(NioSocketChannel.class)\n+                .handler(new ChannelInitializer<SocketChannel>() {\n+                    @Override\n+                    protected void initChannel(SocketChannel ch) {\n+                        ChannelPipeline pipeline = ch.pipeline();\n+\n+                        Http2FrameCodec frameCodec = Http2FrameCodecBuilder.forClient()\n+                                .autoAckSettingsFrame(true)\n+                                .autoAckPingFrame(true)\n+                                .initialSettings(Http2Settings.defaultSettings().pushEnabled(true))\n+                                .build();\n+\n+                        pipeline.addLast(frameCodec);\n+                        pipeline.addLast(clientHandler);\n+                    }\n+                });\n+\n+        connectionFuture = bootstrap.connect(channelFuture.channel().localAddress());\n+    }\n+\n+    @Test\n+    public void send() throws InterruptedException {\n+        connectionFuture.sync();\n+    }\n+\n+    @After\n+    public void shutdown() {\n+        eventLoopGroup.shutdownGracefully();\n+    }\n+\n+    private final class ServerHandler extends Http2ChannelDuplexHandler {\n+\n+        @Override\n+        public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n+\n+            if (msg instanceof Http2HeadersFrame) {\n+                Http2HeadersFrame receivedFrame = (Http2HeadersFrame) msg;\n+\n+                Http2Headers pushRequestHeaders = new DefaultHttp2Headers();\n+                pushRequestHeaders.path(\"/meow\")\n+                        .method(\"GET\")\n+                        .scheme(\"https\")\n+                        .authority(\"localhost:5555\");\n+\n+                // Write PUSH_PROMISE request headers\n+                Http2FrameStream newPushFrameStream = newStream();\n+                Http2PushPromiseFrame pushPromiseFrame = new DefaultHttp2PushPromiseFrame(pushRequestHeaders);\n+                pushPromiseFrame.stream(receivedFrame.stream());\n+                pushPromiseFrame.pushStream(newPushFrameStream);\n+                ctx.writeAndFlush(pushPromiseFrame).sync();\n+\n+                contentMap.put(newPushFrameStream.id(), \"Meow, I am Pushed via HTTP/2\");\n+\n+                // Write headers for actual request\n+                Http2Headers http2Headers = new DefaultHttp2Headers();\n+                http2Headers.status(\"200\");\n+                http2Headers.add(\"push\", \"false\");\n+                Http2HeadersFrame headersFrame = new DefaultHttp2HeadersFrame(http2Headers, false);\n+                headersFrame.stream(receivedFrame.stream());\n+                ctx.writeAndFlush(headersFrame).sync();\n+\n+                // Write Data of actual request\n+                Http2DataFrame dataFrame = new DefaultHttp2DataFrame(Unpooled.wrappedBuffer(\"Meow\".getBytes()), true);\n+                dataFrame.stream(receivedFrame.stream());\n+                ctx.writeAndFlush(dataFrame).sync();\n+            } else if (msg instanceof Http2PriorityFrame) {\n+                Http2PriorityFrame priorityFrame = (Http2PriorityFrame) msg;\n+                String content = contentMap.get(priorityFrame.stream().id());\n+                if (content == null) {\n+                    ctx.writeAndFlush(new DefaultHttp2GoAwayFrame(Http2Error.REFUSED_STREAM));\n+                    return;\n+                }\n+\n+                // Write headers for Priority request\n+                Http2Headers http2Headers = new DefaultHttp2Headers();\n+                http2Headers.status(\"200\");\n+                http2Headers.add(\"push\", \"true\");\n+                Http2HeadersFrame headersFrame = new DefaultHttp2HeadersFrame(http2Headers, false);\n+                headersFrame.stream(priorityFrame.stream());\n+                ctx.writeAndFlush(headersFrame).sync();\n+\n+                // Write Data of Priority request\n+                Http2DataFrame dataFrame = new DefaultHttp2DataFrame(Unpooled.wrappedBuffer(content.getBytes()), true);\n+                dataFrame.stream(priorityFrame.stream());\n+                ctx.writeAndFlush(dataFrame).sync();\n+            }\n+        }\n+    }\n+\n+    private static final class ClientHandler extends Http2ChannelDuplexHandler {\n+\n+        @Override\n+        public void channelActive(ChannelHandlerContext ctx) throws InterruptedException {\n+            Http2Headers http2Headers = new DefaultHttp2Headers();\n+            http2Headers.path(\"/\")\n+                    .authority(\"localhost\")\n+                    .method(\"GET\")\n+                    .scheme(\"https\");\n+\n+            Http2HeadersFrame headersFrame = new DefaultHttp2HeadersFrame(http2Headers, true);\n+            headersFrame.stream(newStream());\n+            ctx.writeAndFlush(headersFrame).sync();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkzNTcyMg=="}, "originalCommit": {"oid": "ee7ff80e555ecf30beac89b424904e859de4ae94"}, "originalPosition": 173}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk0NDk4Ng==", "bodyText": "Tried adding a listener. PTAL.", "url": "https://github.com/netty/netty/pull/10765#discussion_r547944986", "createdAt": "2020-12-23T12:54:06Z", "author": {"login": "hyperxpro"}, "path": "codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2PushPromiseFrameTest.java", "diffHunk": "@@ -0,0 +1,219 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http2;\n+\n+import io.netty.bootstrap.Bootstrap;\n+import io.netty.bootstrap.ServerBootstrap;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.channel.socket.nio.NioServerSocketChannel;\n+import io.netty.channel.socket.nio.NioSocketChannel;\n+import io.netty.util.CharsetUtil;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class DefaultHttp2PushPromiseFrameTest {\n+\n+    private final EventLoopGroup eventLoopGroup = new NioEventLoopGroup(2);\n+    private final ClientHandler clientHandler = new ClientHandler();\n+    private final Map<Integer, String> contentMap = new ConcurrentHashMap<Integer, String>();\n+\n+    private ChannelFuture connectionFuture;\n+\n+    @Before\n+    public void setup() throws InterruptedException {\n+        ServerBootstrap serverBootstrap = new ServerBootstrap()\n+                .group(eventLoopGroup)\n+                .channel(NioServerSocketChannel.class)\n+                .childHandler(new ChannelInitializer<SocketChannel>() {\n+                    @Override\n+                    protected void initChannel(SocketChannel ch) {\n+                        ChannelPipeline pipeline = ch.pipeline();\n+\n+                        Http2FrameCodec frameCodec = Http2FrameCodecBuilder.forServer()\n+                                .autoAckSettingsFrame(true)\n+                                .autoAckPingFrame(true)\n+                                .build();\n+\n+                        pipeline.addLast(frameCodec);\n+                        pipeline.addLast(new ServerHandler());\n+                    }\n+                });\n+\n+        ChannelFuture channelFuture = serverBootstrap.bind(0).sync();\n+\n+        final Bootstrap bootstrap = new Bootstrap()\n+                .group(eventLoopGroup)\n+                .channel(NioSocketChannel.class)\n+                .handler(new ChannelInitializer<SocketChannel>() {\n+                    @Override\n+                    protected void initChannel(SocketChannel ch) {\n+                        ChannelPipeline pipeline = ch.pipeline();\n+\n+                        Http2FrameCodec frameCodec = Http2FrameCodecBuilder.forClient()\n+                                .autoAckSettingsFrame(true)\n+                                .autoAckPingFrame(true)\n+                                .initialSettings(Http2Settings.defaultSettings().pushEnabled(true))\n+                                .build();\n+\n+                        pipeline.addLast(frameCodec);\n+                        pipeline.addLast(clientHandler);\n+                    }\n+                });\n+\n+        connectionFuture = bootstrap.connect(channelFuture.channel().localAddress());\n+    }\n+\n+    @Test\n+    public void send() throws InterruptedException {\n+        connectionFuture.sync();\n+    }\n+\n+    @After\n+    public void shutdown() {\n+        eventLoopGroup.shutdownGracefully();\n+    }\n+\n+    private final class ServerHandler extends Http2ChannelDuplexHandler {\n+\n+        @Override\n+        public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n+\n+            if (msg instanceof Http2HeadersFrame) {\n+                Http2HeadersFrame receivedFrame = (Http2HeadersFrame) msg;\n+\n+                Http2Headers pushRequestHeaders = new DefaultHttp2Headers();\n+                pushRequestHeaders.path(\"/meow\")\n+                        .method(\"GET\")\n+                        .scheme(\"https\")\n+                        .authority(\"localhost:5555\");\n+\n+                // Write PUSH_PROMISE request headers\n+                Http2FrameStream newPushFrameStream = newStream();\n+                Http2PushPromiseFrame pushPromiseFrame = new DefaultHttp2PushPromiseFrame(pushRequestHeaders);\n+                pushPromiseFrame.stream(receivedFrame.stream());\n+                pushPromiseFrame.pushStream(newPushFrameStream);\n+                ctx.writeAndFlush(pushPromiseFrame).sync();\n+\n+                contentMap.put(newPushFrameStream.id(), \"Meow, I am Pushed via HTTP/2\");\n+\n+                // Write headers for actual request\n+                Http2Headers http2Headers = new DefaultHttp2Headers();\n+                http2Headers.status(\"200\");\n+                http2Headers.add(\"push\", \"false\");\n+                Http2HeadersFrame headersFrame = new DefaultHttp2HeadersFrame(http2Headers, false);\n+                headersFrame.stream(receivedFrame.stream());\n+                ctx.writeAndFlush(headersFrame).sync();\n+\n+                // Write Data of actual request\n+                Http2DataFrame dataFrame = new DefaultHttp2DataFrame(Unpooled.wrappedBuffer(\"Meow\".getBytes()), true);\n+                dataFrame.stream(receivedFrame.stream());\n+                ctx.writeAndFlush(dataFrame).sync();\n+            } else if (msg instanceof Http2PriorityFrame) {\n+                Http2PriorityFrame priorityFrame = (Http2PriorityFrame) msg;\n+                String content = contentMap.get(priorityFrame.stream().id());\n+                if (content == null) {\n+                    ctx.writeAndFlush(new DefaultHttp2GoAwayFrame(Http2Error.REFUSED_STREAM));\n+                    return;\n+                }\n+\n+                // Write headers for Priority request\n+                Http2Headers http2Headers = new DefaultHttp2Headers();\n+                http2Headers.status(\"200\");\n+                http2Headers.add(\"push\", \"true\");\n+                Http2HeadersFrame headersFrame = new DefaultHttp2HeadersFrame(http2Headers, false);\n+                headersFrame.stream(priorityFrame.stream());\n+                ctx.writeAndFlush(headersFrame).sync();\n+\n+                // Write Data of Priority request\n+                Http2DataFrame dataFrame = new DefaultHttp2DataFrame(Unpooled.wrappedBuffer(content.getBytes()), true);\n+                dataFrame.stream(priorityFrame.stream());\n+                ctx.writeAndFlush(dataFrame).sync();\n+            }\n+        }\n+    }\n+\n+    private static final class ClientHandler extends Http2ChannelDuplexHandler {\n+\n+        @Override\n+        public void channelActive(ChannelHandlerContext ctx) throws InterruptedException {\n+            Http2Headers http2Headers = new DefaultHttp2Headers();\n+            http2Headers.path(\"/\")\n+                    .authority(\"localhost\")\n+                    .method(\"GET\")\n+                    .scheme(\"https\");\n+\n+            Http2HeadersFrame headersFrame = new DefaultHttp2HeadersFrame(http2Headers, true);\n+            headersFrame.stream(newStream());\n+            ctx.writeAndFlush(headersFrame).sync();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkzNTcyMg=="}, "originalCommit": {"oid": "ee7ff80e555ecf30beac89b424904e859de4ae94"}, "originalPosition": 173}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTIyNzE5OnYy", "diffSide": "RIGHT", "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjozMDoyMFrOIKjWnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjozMDoyMFrOIKjWnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkzNTkwMw==", "bodyText": "nit: you could even merge this with the else and make it if else", "url": "https://github.com/netty/netty/pull/10765#discussion_r547935903", "createdAt": "2020-12-23T12:30:20Z", "author": {"login": "normanmaurer"}, "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java", "diffHunk": "@@ -383,59 +392,98 @@ private void writeGoAwayFrame(ChannelHandlerContext ctx, Http2GoAwayFrame frame,\n         goAway(ctx, (int) lastStreamId, frame.errorCode(), frame.content(), promise);\n     }\n \n-    private void writeHeadersFrame(\n-            final ChannelHandlerContext ctx, Http2HeadersFrame headersFrame, final ChannelPromise promise) {\n+    private void writeHeadersFrame(final ChannelHandlerContext ctx, Http2HeadersFrame headersFrame,\n+                                   final ChannelPromise promise) {\n \n         if (isStreamIdValid(headersFrame.stream().id())) {\n             encoder().writeHeaders(ctx, headersFrame.stream().id(), headersFrame.headers(), headersFrame.padding(),\n                     headersFrame.isEndStream(), promise);\n         } else {\n-            final DefaultHttp2FrameStream stream = (DefaultHttp2FrameStream) headersFrame.stream();\n-            final Http2Connection connection = connection();\n-            final int streamId = connection.local().incrementAndGetNextStreamId();\n-            if (streamId < 0) {\n-                promise.setFailure(new Http2NoMoreStreamIdsException());\n-\n-                // Simulate a GOAWAY being received due to stream exhaustion on this connection. We use the maximum\n-                // valid stream ID for the current peer.\n-                onHttp2Frame(ctx, new DefaultHttp2GoAwayFrame(connection.isServer() ? Integer.MAX_VALUE :\n-                        Integer.MAX_VALUE - 1, NO_ERROR.code(),\n-                        writeAscii(ctx.alloc(), \"Stream IDs exhausted on local stream creation\")));\n-                return;\n+            if (initializeNewStream(ctx, (DefaultHttp2FrameStream) headersFrame.stream(), promise)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7ff80e555ecf30beac89b424904e859de4ae94"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTIyNzY1OnYy", "diffSide": "RIGHT", "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjozMDozMVrOIKjW7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMjozMDozMVrOIKjW7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzkzNTk4MQ==", "bodyText": "nit: you could even merge this with the else and make it if else", "url": "https://github.com/netty/netty/pull/10765#discussion_r547935981", "createdAt": "2020-12-23T12:30:31Z", "author": {"login": "normanmaurer"}, "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java", "diffHunk": "@@ -383,59 +392,98 @@ private void writeGoAwayFrame(ChannelHandlerContext ctx, Http2GoAwayFrame frame,\n         goAway(ctx, (int) lastStreamId, frame.errorCode(), frame.content(), promise);\n     }\n \n-    private void writeHeadersFrame(\n-            final ChannelHandlerContext ctx, Http2HeadersFrame headersFrame, final ChannelPromise promise) {\n+    private void writeHeadersFrame(final ChannelHandlerContext ctx, Http2HeadersFrame headersFrame,\n+                                   final ChannelPromise promise) {\n \n         if (isStreamIdValid(headersFrame.stream().id())) {\n             encoder().writeHeaders(ctx, headersFrame.stream().id(), headersFrame.headers(), headersFrame.padding(),\n                     headersFrame.isEndStream(), promise);\n         } else {\n-            final DefaultHttp2FrameStream stream = (DefaultHttp2FrameStream) headersFrame.stream();\n-            final Http2Connection connection = connection();\n-            final int streamId = connection.local().incrementAndGetNextStreamId();\n-            if (streamId < 0) {\n-                promise.setFailure(new Http2NoMoreStreamIdsException());\n-\n-                // Simulate a GOAWAY being received due to stream exhaustion on this connection. We use the maximum\n-                // valid stream ID for the current peer.\n-                onHttp2Frame(ctx, new DefaultHttp2GoAwayFrame(connection.isServer() ? Integer.MAX_VALUE :\n-                        Integer.MAX_VALUE - 1, NO_ERROR.code(),\n-                        writeAscii(ctx.alloc(), \"Stream IDs exhausted on local stream creation\")));\n-                return;\n+            if (initializeNewStream(ctx, (DefaultHttp2FrameStream) headersFrame.stream(), promise)) {\n+                final int streamId = headersFrame.stream().id();\n+\n+                encoder().writeHeaders(ctx, streamId, headersFrame.headers(), headersFrame.padding(),\n+                        headersFrame.isEndStream(), promise);\n+\n+                if (!promise.isDone()) {\n+                    numBufferedStreams++;\n+                    // Clean up the stream being initialized if writing the headers fails and also\n+                    // decrement the number of buffered streams.\n+                    promise.addListener(new ChannelFutureListener() {\n+                        @Override\n+                        public void operationComplete(ChannelFuture channelFuture) {\n+                            numBufferedStreams--;\n+\n+                            handleHeaderFuture(channelFuture, streamId);\n+                        }\n+                    });\n+                } else {\n+                    handleHeaderFuture(promise, streamId);\n+                }\n             }\n-            stream.id = streamId;\n-\n-            // Use a Map to store all pending streams as we may have multiple. This is needed as if we would store the\n-            // stream in a field directly we may override the stored field before onStreamAdded(...) was called\n-            // and so not correctly set the property for the buffered stream.\n-            //\n-            // See https://github.com/netty/netty/issues/8692\n-            Object old = frameStreamToInitializeMap.put(streamId, stream);\n-\n-            // We should not re-use ids.\n-            assert old == null;\n+        }\n+    }\n \n-            encoder().writeHeaders(ctx, streamId, headersFrame.headers(), headersFrame.padding(),\n-                    headersFrame.isEndStream(), promise);\n+    private void writePushPromise(final ChannelHandlerContext ctx, Http2PushPromiseFrame pushPromiseFrame,\n+                                  final ChannelPromise promise) {\n+        if (isStreamIdValid(pushPromiseFrame.pushStream().id())) {\n+            encoder().writePushPromise(ctx, pushPromiseFrame.stream().id(), pushPromiseFrame.pushStream().id(),\n+                    pushPromiseFrame.http2Headers(), pushPromiseFrame.padding(), promise);\n+        } else {\n+            if (initializeNewStream(ctx, (DefaultHttp2FrameStream) pushPromiseFrame.pushStream(), promise)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ee7ff80e555ecf30beac89b424904e859de4ae94"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTMyOTgzOnYy", "diffSide": "RIGHT", "path": "codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2PushPromiseFrameTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMzowOToyM1rOIKkRSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxMzoxNDoxMlrOIKkYiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk1MDkyMg==", "bodyText": "This method should not block... You need to not call sync() in it when you call it in a handler", "url": "https://github.com/netty/netty/pull/10765#discussion_r547950922", "createdAt": "2020-12-23T13:09:23Z", "author": {"login": "normanmaurer"}, "path": "codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2PushPromiseFrameTest.java", "diffHunk": "@@ -90,8 +91,17 @@ protected void initChannel(SocketChannel ch) {\n     }\n \n     @Test\n-    public void send() throws InterruptedException {\n-        connectionFuture.sync();\n+    public void send() {\n+        connectionFuture.addListener(new ChannelFutureListener() {\n+            @Override\n+            public void operationComplete(ChannelFuture future) {\n+                try {\n+                    clientHandler.write();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2787177868efd17479d6b4b06c2fb6b2cd2c0edd"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk1Mjc3Ng==", "bodyText": "Done", "url": "https://github.com/netty/netty/pull/10765#discussion_r547952776", "createdAt": "2020-12-23T13:14:12Z", "author": {"login": "hyperxpro"}, "path": "codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2PushPromiseFrameTest.java", "diffHunk": "@@ -90,8 +91,17 @@ protected void initChannel(SocketChannel ch) {\n     }\n \n     @Test\n-    public void send() throws InterruptedException {\n-        connectionFuture.sync();\n+    public void send() {\n+        connectionFuture.addListener(new ChannelFutureListener() {\n+            @Override\n+            public void operationComplete(ChannelFuture future) {\n+                try {\n+                    clientHandler.write();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0Nzk1MDkyMg=="}, "originalCommit": {"oid": "2787177868efd17479d6b4b06c2fb6b2cd2c0edd"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTk1NTQ5OnYy", "diffSide": "RIGHT", "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2PriorityFrame.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNjozODoxOVrOIKqA2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNjozODoyOVrOIKqBIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA0NTAxNg==", "bodyText": "final...", "url": "https://github.com/netty/netty/pull/10765#discussion_r548045016", "createdAt": "2020-12-23T16:38:19Z", "author": {"login": "normanmaurer"}, "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2PriorityFrame.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http2;\n+\n+/**\n+ * Default implementation of {@linkplain Http2PriorityFrame}\n+ */\n+public class DefaultHttp2PriorityFrame implements Http2PriorityFrame {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d673e90e71fba557ca91701afaea419d788c3e8c"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA0NTA5MQ==", "bodyText": "Add @UnstableApi", "url": "https://github.com/netty/netty/pull/10765#discussion_r548045091", "createdAt": "2020-12-23T16:38:29Z", "author": {"login": "normanmaurer"}, "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2PriorityFrame.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http2;\n+\n+/**\n+ * Default implementation of {@linkplain Http2PriorityFrame}\n+ */\n+public class DefaultHttp2PriorityFrame implements Http2PriorityFrame {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA0NTAxNg=="}, "originalCommit": {"oid": "d673e90e71fba557ca91701afaea419d788c3e8c"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTk1NjQ1OnYy", "diffSide": "RIGHT", "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2PushPromiseFrame.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNjozODozN1rOIKqBbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNjozODozN1rOIKqBbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA0NTE2Ng==", "bodyText": "final\nAdd @UnstableApi", "url": "https://github.com/netty/netty/pull/10765#discussion_r548045166", "createdAt": "2020-12-23T16:38:37Z", "author": {"login": "normanmaurer"}, "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/DefaultHttp2PushPromiseFrame.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http2;\n+\n+/**\n+ * Default implementation of {@link Http2PushPromiseFrame}\n+ */\n+public class DefaultHttp2PushPromiseFrame implements Http2PushPromiseFrame {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d673e90e71fba557ca91701afaea419d788c3e8c"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTk1OTMyOnYy", "diffSide": "RIGHT", "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2PriorityFrame.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNjozOTozN1rOIKqDDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNjozOTozN1rOIKqDDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA0NTU4Mw==", "bodyText": "Add @UnstableApi", "url": "https://github.com/netty/netty/pull/10765#discussion_r548045583", "createdAt": "2020-12-23T16:39:37Z", "author": {"login": "normanmaurer"}, "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2PriorityFrame.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http2;\n+\n+/**\n+ * HTTP/2 Priority Frame\n+ */\n+public interface Http2PriorityFrame extends Http2StreamFrame {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d673e90e71fba557ca91701afaea419d788c3e8c"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTk1OTYwOnYy", "diffSide": "RIGHT", "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2PushPromiseFrame.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNjozOTo0MlrOIKqDMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNjozOTo0MlrOIKqDMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA0NTYxNg==", "bodyText": "Add @UnstableApi", "url": "https://github.com/netty/netty/pull/10765#discussion_r548045616", "createdAt": "2020-12-23T16:39:42Z", "author": {"login": "normanmaurer"}, "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2PushPromiseFrame.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http2;\n+\n+/**\n+ * HTTP/2 Push Promise Frame\n+ */\n+public interface Http2PushPromiseFrame extends Http2StreamFrame {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d673e90e71fba557ca91701afaea419d788c3e8c"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTk2MTUyOnYy", "diffSide": "RIGHT", "path": "codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2PushPromiseFrameTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNjo0MDoyMVrOIKqEUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNjo0MDoyMVrOIKqEUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA0NTkwNw==", "bodyText": "Remove throws InterruptedException and also remove the catch for it above", "url": "https://github.com/netty/netty/pull/10765#discussion_r548045907", "createdAt": "2020-12-23T16:40:21Z", "author": {"login": "normanmaurer"}, "path": "codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2PushPromiseFrameTest.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http2;\n+\n+import io.netty.bootstrap.Bootstrap;\n+import io.netty.bootstrap.ServerBootstrap;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.channel.socket.nio.NioServerSocketChannel;\n+import io.netty.channel.socket.nio.NioSocketChannel;\n+import io.netty.util.CharsetUtil;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class DefaultHttp2PushPromiseFrameTest {\n+\n+    private final EventLoopGroup eventLoopGroup = new NioEventLoopGroup(2);\n+    private final ClientHandler clientHandler = new ClientHandler();\n+    private final Map<Integer, String> contentMap = new ConcurrentHashMap<Integer, String>();\n+\n+    private ChannelFuture connectionFuture;\n+\n+    @Before\n+    public void setup() throws InterruptedException {\n+        ServerBootstrap serverBootstrap = new ServerBootstrap()\n+                .group(eventLoopGroup)\n+                .channel(NioServerSocketChannel.class)\n+                .childHandler(new ChannelInitializer<SocketChannel>() {\n+                    @Override\n+                    protected void initChannel(SocketChannel ch) {\n+                        ChannelPipeline pipeline = ch.pipeline();\n+\n+                        Http2FrameCodec frameCodec = Http2FrameCodecBuilder.forServer()\n+                                .autoAckSettingsFrame(true)\n+                                .autoAckPingFrame(true)\n+                                .build();\n+\n+                        pipeline.addLast(frameCodec);\n+                        pipeline.addLast(new ServerHandler());\n+                    }\n+                });\n+\n+        ChannelFuture channelFuture = serverBootstrap.bind(0).sync();\n+\n+        final Bootstrap bootstrap = new Bootstrap()\n+                .group(eventLoopGroup)\n+                .channel(NioSocketChannel.class)\n+                .handler(new ChannelInitializer<SocketChannel>() {\n+                    @Override\n+                    protected void initChannel(SocketChannel ch) {\n+                        ChannelPipeline pipeline = ch.pipeline();\n+\n+                        Http2FrameCodec frameCodec = Http2FrameCodecBuilder.forClient()\n+                                .autoAckSettingsFrame(true)\n+                                .autoAckPingFrame(true)\n+                                .initialSettings(Http2Settings.defaultSettings().pushEnabled(true))\n+                                .build();\n+\n+                        pipeline.addLast(frameCodec);\n+                        pipeline.addLast(clientHandler);\n+                    }\n+                });\n+\n+        connectionFuture = bootstrap.connect(channelFuture.channel().localAddress());\n+    }\n+\n+    @Test\n+    public void send() {\n+        connectionFuture.addListener(new ChannelFutureListener() {\n+            @Override\n+            public void operationComplete(ChannelFuture future) {\n+                try {\n+                    clientHandler.write();\n+                } catch (InterruptedException e) {\n+                    // Ignore\n+                }\n+            }\n+        });\n+    }\n+\n+    @After\n+    public void shutdown() {\n+        eventLoopGroup.shutdownGracefully();\n+    }\n+\n+    private final class ServerHandler extends Http2ChannelDuplexHandler {\n+\n+        @Override\n+        public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n+\n+            if (msg instanceof Http2HeadersFrame) {\n+                Http2HeadersFrame receivedFrame = (Http2HeadersFrame) msg;\n+\n+                Http2Headers pushRequestHeaders = new DefaultHttp2Headers();\n+                pushRequestHeaders.path(\"/meow\")\n+                        .method(\"GET\")\n+                        .scheme(\"https\")\n+                        .authority(\"localhost:5555\");\n+\n+                // Write PUSH_PROMISE request headers\n+                Http2FrameStream newPushFrameStream = newStream();\n+                Http2PushPromiseFrame pushPromiseFrame = new DefaultHttp2PushPromiseFrame(pushRequestHeaders);\n+                pushPromiseFrame.stream(receivedFrame.stream());\n+                pushPromiseFrame.pushStream(newPushFrameStream);\n+                ctx.writeAndFlush(pushPromiseFrame).sync();\n+\n+                contentMap.put(newPushFrameStream.id(), \"Meow, I am Pushed via HTTP/2\");\n+\n+                // Write headers for actual request\n+                Http2Headers http2Headers = new DefaultHttp2Headers();\n+                http2Headers.status(\"200\");\n+                http2Headers.add(\"push\", \"false\");\n+                Http2HeadersFrame headersFrame = new DefaultHttp2HeadersFrame(http2Headers, false);\n+                headersFrame.stream(receivedFrame.stream());\n+                ctx.writeAndFlush(headersFrame);\n+\n+                // Write Data of actual request\n+                Http2DataFrame dataFrame = new DefaultHttp2DataFrame(Unpooled.wrappedBuffer(\"Meow\".getBytes()), true);\n+                dataFrame.stream(receivedFrame.stream());\n+                ctx.writeAndFlush(dataFrame);\n+            } else if (msg instanceof Http2PriorityFrame) {\n+                Http2PriorityFrame priorityFrame = (Http2PriorityFrame) msg;\n+                String content = contentMap.get(priorityFrame.stream().id());\n+                if (content == null) {\n+                    ctx.writeAndFlush(new DefaultHttp2GoAwayFrame(Http2Error.REFUSED_STREAM));\n+                    return;\n+                }\n+\n+                // Write headers for Priority request\n+                Http2Headers http2Headers = new DefaultHttp2Headers();\n+                http2Headers.status(\"200\");\n+                http2Headers.add(\"push\", \"true\");\n+                Http2HeadersFrame headersFrame = new DefaultHttp2HeadersFrame(http2Headers, false);\n+                headersFrame.stream(priorityFrame.stream());\n+                ctx.writeAndFlush(headersFrame);\n+\n+                // Write Data of Priority request\n+                Http2DataFrame dataFrame = new DefaultHttp2DataFrame(Unpooled.wrappedBuffer(content.getBytes()), true);\n+                dataFrame.stream(priorityFrame.stream());\n+                ctx.writeAndFlush(dataFrame);\n+            }\n+        }\n+    }\n+\n+    private static final class ClientHandler extends Http2ChannelDuplexHandler {\n+\n+        private ChannelHandlerContext ctx;\n+\n+        @Override\n+        public void channelActive(ChannelHandlerContext ctx) throws InterruptedException {\n+            this.ctx = ctx;\n+        }\n+\n+        void write() throws InterruptedException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d673e90e71fba557ca91701afaea419d788c3e8c"}, "originalPosition": 180}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NTk2NjMyOnYy", "diffSide": "RIGHT", "path": "codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2PushPromiseFrameTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNjo0MjowMVrOIKqHHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNjo0MjowMVrOIKqHHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA0NjYyMQ==", "bodyText": "consider removing all these release and just add a big try {... } finally { ReferenceCountUtil.release(msg); }", "url": "https://github.com/netty/netty/pull/10765#discussion_r548046621", "createdAt": "2020-12-23T16:42:01Z", "author": {"login": "normanmaurer"}, "path": "codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2PushPromiseFrameTest.java", "diffHunk": "@@ -0,0 +1,235 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http2;\n+\n+import io.netty.bootstrap.Bootstrap;\n+import io.netty.bootstrap.ServerBootstrap;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.channel.socket.nio.NioServerSocketChannel;\n+import io.netty.channel.socket.nio.NioSocketChannel;\n+import io.netty.util.CharsetUtil;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class DefaultHttp2PushPromiseFrameTest {\n+\n+    private final EventLoopGroup eventLoopGroup = new NioEventLoopGroup(2);\n+    private final ClientHandler clientHandler = new ClientHandler();\n+    private final Map<Integer, String> contentMap = new ConcurrentHashMap<Integer, String>();\n+\n+    private ChannelFuture connectionFuture;\n+\n+    @Before\n+    public void setup() throws InterruptedException {\n+        ServerBootstrap serverBootstrap = new ServerBootstrap()\n+                .group(eventLoopGroup)\n+                .channel(NioServerSocketChannel.class)\n+                .childHandler(new ChannelInitializer<SocketChannel>() {\n+                    @Override\n+                    protected void initChannel(SocketChannel ch) {\n+                        ChannelPipeline pipeline = ch.pipeline();\n+\n+                        Http2FrameCodec frameCodec = Http2FrameCodecBuilder.forServer()\n+                                .autoAckSettingsFrame(true)\n+                                .autoAckPingFrame(true)\n+                                .build();\n+\n+                        pipeline.addLast(frameCodec);\n+                        pipeline.addLast(new ServerHandler());\n+                    }\n+                });\n+\n+        ChannelFuture channelFuture = serverBootstrap.bind(0).sync();\n+\n+        final Bootstrap bootstrap = new Bootstrap()\n+                .group(eventLoopGroup)\n+                .channel(NioSocketChannel.class)\n+                .handler(new ChannelInitializer<SocketChannel>() {\n+                    @Override\n+                    protected void initChannel(SocketChannel ch) {\n+                        ChannelPipeline pipeline = ch.pipeline();\n+\n+                        Http2FrameCodec frameCodec = Http2FrameCodecBuilder.forClient()\n+                                .autoAckSettingsFrame(true)\n+                                .autoAckPingFrame(true)\n+                                .initialSettings(Http2Settings.defaultSettings().pushEnabled(true))\n+                                .build();\n+\n+                        pipeline.addLast(frameCodec);\n+                        pipeline.addLast(clientHandler);\n+                    }\n+                });\n+\n+        connectionFuture = bootstrap.connect(channelFuture.channel().localAddress());\n+    }\n+\n+    @Test\n+    public void send() {\n+        connectionFuture.addListener(new ChannelFutureListener() {\n+            @Override\n+            public void operationComplete(ChannelFuture future) {\n+                try {\n+                    clientHandler.write();\n+                } catch (InterruptedException e) {\n+                    // Ignore\n+                }\n+            }\n+        });\n+    }\n+\n+    @After\n+    public void shutdown() {\n+        eventLoopGroup.shutdownGracefully();\n+    }\n+\n+    private final class ServerHandler extends Http2ChannelDuplexHandler {\n+\n+        @Override\n+        public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n+\n+            if (msg instanceof Http2HeadersFrame) {\n+                Http2HeadersFrame receivedFrame = (Http2HeadersFrame) msg;\n+\n+                Http2Headers pushRequestHeaders = new DefaultHttp2Headers();\n+                pushRequestHeaders.path(\"/meow\")\n+                        .method(\"GET\")\n+                        .scheme(\"https\")\n+                        .authority(\"localhost:5555\");\n+\n+                // Write PUSH_PROMISE request headers\n+                Http2FrameStream newPushFrameStream = newStream();\n+                Http2PushPromiseFrame pushPromiseFrame = new DefaultHttp2PushPromiseFrame(pushRequestHeaders);\n+                pushPromiseFrame.stream(receivedFrame.stream());\n+                pushPromiseFrame.pushStream(newPushFrameStream);\n+                ctx.writeAndFlush(pushPromiseFrame).sync();\n+\n+                contentMap.put(newPushFrameStream.id(), \"Meow, I am Pushed via HTTP/2\");\n+\n+                // Write headers for actual request\n+                Http2Headers http2Headers = new DefaultHttp2Headers();\n+                http2Headers.status(\"200\");\n+                http2Headers.add(\"push\", \"false\");\n+                Http2HeadersFrame headersFrame = new DefaultHttp2HeadersFrame(http2Headers, false);\n+                headersFrame.stream(receivedFrame.stream());\n+                ctx.writeAndFlush(headersFrame);\n+\n+                // Write Data of actual request\n+                Http2DataFrame dataFrame = new DefaultHttp2DataFrame(Unpooled.wrappedBuffer(\"Meow\".getBytes()), true);\n+                dataFrame.stream(receivedFrame.stream());\n+                ctx.writeAndFlush(dataFrame);\n+            } else if (msg instanceof Http2PriorityFrame) {\n+                Http2PriorityFrame priorityFrame = (Http2PriorityFrame) msg;\n+                String content = contentMap.get(priorityFrame.stream().id());\n+                if (content == null) {\n+                    ctx.writeAndFlush(new DefaultHttp2GoAwayFrame(Http2Error.REFUSED_STREAM));\n+                    return;\n+                }\n+\n+                // Write headers for Priority request\n+                Http2Headers http2Headers = new DefaultHttp2Headers();\n+                http2Headers.status(\"200\");\n+                http2Headers.add(\"push\", \"true\");\n+                Http2HeadersFrame headersFrame = new DefaultHttp2HeadersFrame(http2Headers, false);\n+                headersFrame.stream(priorityFrame.stream());\n+                ctx.writeAndFlush(headersFrame);\n+\n+                // Write Data of Priority request\n+                Http2DataFrame dataFrame = new DefaultHttp2DataFrame(Unpooled.wrappedBuffer(content.getBytes()), true);\n+                dataFrame.stream(priorityFrame.stream());\n+                ctx.writeAndFlush(dataFrame);\n+            }\n+        }\n+    }\n+\n+    private static final class ClientHandler extends Http2ChannelDuplexHandler {\n+\n+        private ChannelHandlerContext ctx;\n+\n+        @Override\n+        public void channelActive(ChannelHandlerContext ctx) throws InterruptedException {\n+            this.ctx = ctx;\n+        }\n+\n+        void write() throws InterruptedException {\n+            Http2Headers http2Headers = new DefaultHttp2Headers();\n+            http2Headers.path(\"/\")\n+                    .authority(\"localhost\")\n+                    .method(\"GET\")\n+                    .scheme(\"https\");\n+\n+            Http2HeadersFrame headersFrame = new DefaultHttp2HeadersFrame(http2Headers, true);\n+            headersFrame.stream(newStream());\n+            ctx.writeAndFlush(headersFrame);\n+        }\n+\n+        @Override\n+        public void channelRead(ChannelHandlerContext ctx, Object msg) {\n+\n+            if (msg instanceof Http2PushPromiseFrame) {\n+                Http2PushPromiseFrame pushPromiseFrame = (Http2PushPromiseFrame) msg;\n+\n+                assertEquals(\"/meow\", pushPromiseFrame.http2Headers().path().toString());\n+                assertEquals(\"GET\", pushPromiseFrame.http2Headers().method().toString());\n+                assertEquals(\"https\", pushPromiseFrame.http2Headers().scheme().toString());\n+                assertEquals(\"localhost:5555\", pushPromiseFrame.http2Headers().authority().toString());\n+\n+                Http2PriorityFrame priorityFrame = new DefaultHttp2PriorityFrame(pushPromiseFrame.stream().id(),\n+                        Http2CodecUtil.DEFAULT_PRIORITY_WEIGHT, true);\n+                priorityFrame.stream(pushPromiseFrame.pushStream());\n+                ctx.writeAndFlush(priorityFrame);\n+            } else if (msg instanceof Http2HeadersFrame) {\n+                Http2HeadersFrame headersFrame = (Http2HeadersFrame) msg;\n+\n+                if (headersFrame.stream().id() == 3) {\n+                    assertEquals(\"200\", headersFrame.headers().status().toString());\n+                    assertEquals(\"false\", headersFrame.headers().get(\"push\").toString());\n+                } else if (headersFrame.stream().id() == 2) {\n+                    assertEquals(\"200\", headersFrame.headers().status().toString());\n+                    assertEquals(\"true\", headersFrame.headers().get(\"push\").toString());\n+                } else {\n+                    ctx.writeAndFlush(new DefaultHttp2GoAwayFrame(Http2Error.REFUSED_STREAM));\n+                }\n+            } else if (msg instanceof Http2DataFrame) {\n+                Http2DataFrame dataFrame = (Http2DataFrame) msg;\n+\n+                if (dataFrame.stream().id() == 3) {\n+                    assertEquals(\"Meow\", dataFrame.content().toString(CharsetUtil.UTF_8));\n+                    dataFrame.content().release();\n+                } else if (dataFrame.stream().id() == 2) {\n+                    assertEquals(\"Meow, I am Pushed via HTTP/2\", dataFrame.content().toString(CharsetUtil.UTF_8));\n+                    dataFrame.content().release();\n+                } else {\n+                    dataFrame.content().release();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d673e90e71fba557ca91701afaea419d788c3e8c"}, "originalPosition": 229}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NjA3NDc1OnYy", "diffSide": "RIGHT", "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2PriorityFrame.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNzoxOToyMlrOIKrG_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwMzozODoyN1rOIK9udA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA2Mjk3NQ==", "bodyText": "This interface should add an override like:\n@Override\nHttp2PriorityFrame stream(Http2FrameStream stream) {", "url": "https://github.com/netty/netty/pull/10765#discussion_r548062975", "createdAt": "2020-12-23T17:19:22Z", "author": {"login": "normanmaurer"}, "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2PriorityFrame.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http2;\n+\n+import io.netty.util.internal.UnstableApi;\n+\n+/**\n+ * HTTP/2 Priority Frame\n+ */\n+@UnstableApi\n+public interface Http2PriorityFrame extends Http2StreamFrame {\n+\n+    /**\n+     * Parent Stream Id of this Priority request\n+     */\n+    int streamDependency();\n+\n+    /**\n+     * Stream weight\n+     */\n+    short weight();\n+\n+    /**\n+     * Set to {@code true} if this stream is exclusive else set to {@code false}\n+     */\n+    boolean exclusive();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdaabd5434923b5ae64e68b33c99b8e594e6cd78"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODM2Nzk4OA==", "bodyText": "Done, PTAL.", "url": "https://github.com/netty/netty/pull/10765#discussion_r548367988", "createdAt": "2020-12-24T03:38:27Z", "author": {"login": "hyperxpro"}, "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2PriorityFrame.java", "diffHunk": "@@ -0,0 +1,40 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http2;\n+\n+import io.netty.util.internal.UnstableApi;\n+\n+/**\n+ * HTTP/2 Priority Frame\n+ */\n+@UnstableApi\n+public interface Http2PriorityFrame extends Http2StreamFrame {\n+\n+    /**\n+     * Parent Stream Id of this Priority request\n+     */\n+    int streamDependency();\n+\n+    /**\n+     * Stream weight\n+     */\n+    short weight();\n+\n+    /**\n+     * Set to {@code true} if this stream is exclusive else set to {@code false}\n+     */\n+    boolean exclusive();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA2Mjk3NQ=="}, "originalCommit": {"oid": "fdaabd5434923b5ae64e68b33c99b8e594e6cd78"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0NjA3NTg4OnYy", "diffSide": "RIGHT", "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2PushPromiseFrame.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNzoxOTozM1rOIKrHvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yM1QxNzoxOTozM1rOIKrHvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODA2MzE2Nw==", "bodyText": "This interface should add an override like:\n@Override\nHttp2PushPromiseFrame stream(Http2FrameStream stream) {", "url": "https://github.com/netty/netty/pull/10765#discussion_r548063167", "createdAt": "2020-12-23T17:19:33Z", "author": {"login": "normanmaurer"}, "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2PushPromiseFrame.java", "diffHunk": "@@ -0,0 +1,51 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http2;\n+\n+import io.netty.util.internal.UnstableApi;\n+\n+/**\n+ * HTTP/2 Push Promise Frame\n+ */\n+@UnstableApi\n+public interface Http2PushPromiseFrame extends Http2StreamFrame {\n+\n+    /**\n+     * Set the Promise {@link Http2FrameStream} object for this frame.\n+     */\n+    Http2StreamFrame pushStream(Http2FrameStream stream);\n+\n+    /**\n+     * Returns the Promise {@link Http2FrameStream} object for this frame, or {@code null} if the\n+     * frame has yet to be associated with a stream.\n+     */\n+    Http2FrameStream pushStream();\n+\n+    /**\n+     * {@link Http2Headers} sent in Push Promise\n+     */\n+    Http2Headers http2Headers();\n+\n+    /**\n+     * Frame padding to use. Will be non-negative and less than 256.\n+     */\n+    int padding();\n+\n+    /**\n+     * Promised Stream ID\n+     */\n+    int promisedStreamId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdaabd5434923b5ae64e68b33c99b8e594e6cd78"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0ODIwMzQyOnYy", "diffSide": "RIGHT", "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2PushPromiseFrame.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNjowMzoxOVrOIK_vIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNjowMzoxOVrOIK_vIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQwMDkzMQ==", "bodyText": "Is this override needed ? Seems like it returns the same type as the parent method", "url": "https://github.com/netty/netty/pull/10765#discussion_r548400931", "createdAt": "2020-12-24T06:03:19Z", "author": {"login": "normanmaurer"}, "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2PushPromiseFrame.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http2;\n+\n+import io.netty.util.internal.UnstableApi;\n+\n+/**\n+ * HTTP/2 Push Promise Frame\n+ */\n+@UnstableApi\n+public interface Http2PushPromiseFrame extends Http2StreamFrame {\n+\n+    /**\n+     * Set the Promise {@link Http2FrameStream} object for this frame.\n+     */\n+    Http2StreamFrame pushStream(Http2FrameStream stream);\n+\n+    /**\n+     * Returns the Promise {@link Http2FrameStream} object for this frame, or {@code null} if the\n+     * frame has yet to be associated with a stream.\n+     */\n+    Http2FrameStream pushStream();\n+\n+    /**\n+     * {@link Http2Headers} sent in Push Promise\n+     */\n+    Http2Headers http2Headers();\n+\n+    /**\n+     * Frame padding to use. Will be non-negative and less than 256.\n+     */\n+    int padding();\n+\n+    /**\n+     * Promised Stream ID\n+     */\n+    int promisedStreamId();\n+\n+    @Override\n+    Http2StreamFrame stream(Http2FrameStream stream);\n+\n+    @Override\n+    Http2FrameStream stream();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d99cfc570523d740770c3b6b50fc25501a7c94f8"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0ODIwMzc2OnYy", "diffSide": "RIGHT", "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2PriorityFrame.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNjowMzozN1rOIK_vYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNjowMzozN1rOIK_vYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQwMDk5Mg==", "bodyText": "Is this override needed ? Seems like it returns the same type as the parent method", "url": "https://github.com/netty/netty/pull/10765#discussion_r548400992", "createdAt": "2020-12-24T06:03:37Z", "author": {"login": "normanmaurer"}, "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2PriorityFrame.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http2;\n+\n+import io.netty.util.internal.UnstableApi;\n+\n+/**\n+ * HTTP/2 Priority Frame\n+ */\n+@UnstableApi\n+public interface Http2PriorityFrame extends Http2StreamFrame {\n+\n+    /**\n+     * Parent Stream Id of this Priority request\n+     */\n+    int streamDependency();\n+\n+    /**\n+     * Stream weight\n+     */\n+    short weight();\n+\n+    /**\n+     * Set to {@code true} if this stream is exclusive else set to {@code false}\n+     */\n+    boolean exclusive();\n+\n+    @Override\n+    Http2StreamFrame stream(Http2FrameStream stream);\n+\n+    @Override\n+    Http2FrameStream stream();\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d99cfc570523d740770c3b6b50fc25501a7c94f8"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ0ODIwNjk5OnYy", "diffSide": "RIGHT", "path": "codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2PushPromiseFrameTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNjowNTo0MVrOIK_xLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQwNjowNTo0MVrOIK_xLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODQwMTQ1Mg==", "bodyText": "Never call sync in the eventloop", "url": "https://github.com/netty/netty/pull/10765#discussion_r548401452", "createdAt": "2020-12-24T06:05:41Z", "author": {"login": "normanmaurer"}, "path": "codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2PushPromiseFrameTest.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http2;\n+\n+import io.netty.bootstrap.Bootstrap;\n+import io.netty.bootstrap.ServerBootstrap;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.channel.socket.nio.NioServerSocketChannel;\n+import io.netty.channel.socket.nio.NioSocketChannel;\n+import io.netty.util.CharsetUtil;\n+import io.netty.util.ReferenceCountUtil;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class DefaultHttp2PushPromiseFrameTest {\n+\n+    private final EventLoopGroup eventLoopGroup = new NioEventLoopGroup(2);\n+    private final ClientHandler clientHandler = new ClientHandler();\n+    private final Map<Integer, String> contentMap = new ConcurrentHashMap<Integer, String>();\n+\n+    private ChannelFuture connectionFuture;\n+\n+    @Before\n+    public void setup() throws InterruptedException {\n+        ServerBootstrap serverBootstrap = new ServerBootstrap()\n+                .group(eventLoopGroup)\n+                .channel(NioServerSocketChannel.class)\n+                .childHandler(new ChannelInitializer<SocketChannel>() {\n+                    @Override\n+                    protected void initChannel(SocketChannel ch) {\n+                        ChannelPipeline pipeline = ch.pipeline();\n+\n+                        Http2FrameCodec frameCodec = Http2FrameCodecBuilder.forServer()\n+                                .autoAckSettingsFrame(true)\n+                                .autoAckPingFrame(true)\n+                                .build();\n+\n+                        pipeline.addLast(frameCodec);\n+                        pipeline.addLast(new ServerHandler());\n+                    }\n+                });\n+\n+        ChannelFuture channelFuture = serverBootstrap.bind(0).sync();\n+\n+        final Bootstrap bootstrap = new Bootstrap()\n+                .group(eventLoopGroup)\n+                .channel(NioSocketChannel.class)\n+                .handler(new ChannelInitializer<SocketChannel>() {\n+                    @Override\n+                    protected void initChannel(SocketChannel ch) {\n+                        ChannelPipeline pipeline = ch.pipeline();\n+\n+                        Http2FrameCodec frameCodec = Http2FrameCodecBuilder.forClient()\n+                                .autoAckSettingsFrame(true)\n+                                .autoAckPingFrame(true)\n+                                .initialSettings(Http2Settings.defaultSettings().pushEnabled(true))\n+                                .build();\n+\n+                        pipeline.addLast(frameCodec);\n+                        pipeline.addLast(clientHandler);\n+                    }\n+                });\n+\n+        connectionFuture = bootstrap.connect(channelFuture.channel().localAddress());\n+    }\n+\n+    @Test\n+    public void send() {\n+        connectionFuture.addListener(new ChannelFutureListener() {\n+            @Override\n+            public void operationComplete(ChannelFuture future) {\n+                clientHandler.write();\n+            }\n+        });\n+    }\n+\n+    @After\n+    public void shutdown() {\n+        eventLoopGroup.shutdownGracefully();\n+    }\n+\n+    private final class ServerHandler extends Http2ChannelDuplexHandler {\n+\n+        @Override\n+        public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n+\n+            if (msg instanceof Http2HeadersFrame) {\n+                Http2HeadersFrame receivedFrame = (Http2HeadersFrame) msg;\n+\n+                Http2Headers pushRequestHeaders = new DefaultHttp2Headers();\n+                pushRequestHeaders.path(\"/meow\")\n+                        .method(\"GET\")\n+                        .scheme(\"https\")\n+                        .authority(\"localhost:5555\");\n+\n+                // Write PUSH_PROMISE request headers\n+                Http2FrameStream newPushFrameStream = newStream();\n+                Http2PushPromiseFrame pushPromiseFrame = new DefaultHttp2PushPromiseFrame(pushRequestHeaders);\n+                pushPromiseFrame.stream(receivedFrame.stream());\n+                pushPromiseFrame.pushStream(newPushFrameStream);\n+                ctx.writeAndFlush(pushPromiseFrame).sync();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d99cfc570523d740770c3b6b50fc25501a7c94f8"}, "originalPosition": 128}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MDQyNTAzOnYy", "diffSide": "RIGHT", "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2PushPromiseFrame.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQyMDoyNDoxMlrOILUrVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxMDoyODowNFrOILbQfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc0NDAyMg==", "bodyText": "s/Http2StreamFrame/Http2PushPromiseFrame/", "url": "https://github.com/netty/netty/pull/10765#discussion_r548744022", "createdAt": "2020-12-24T20:24:12Z", "author": {"login": "normanmaurer"}, "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2PushPromiseFrame.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http2;\n+\n+import io.netty.util.internal.UnstableApi;\n+\n+/**\n+ * HTTP/2 Push Promise Frame\n+ */\n+@UnstableApi\n+public interface Http2PushPromiseFrame extends Http2StreamFrame {\n+\n+    /**\n+     * Set the Promise {@link Http2FrameStream} object for this frame.\n+     */\n+    Http2StreamFrame pushStream(Http2FrameStream stream);\n+\n+    /**\n+     * Returns the Promise {@link Http2FrameStream} object for this frame, or {@code null} if the\n+     * frame has yet to be associated with a stream.\n+     */\n+    Http2FrameStream pushStream();\n+\n+    /**\n+     * {@link Http2Headers} sent in Push Promise\n+     */\n+    Http2Headers http2Headers();\n+\n+    /**\n+     * Frame padding to use. Will be non-negative and less than 256.\n+     */\n+    int padding();\n+\n+    /**\n+     * Promised Stream ID\n+     */\n+    int promisedStreamId();\n+\n+    @Override\n+    Http2StreamFrame stream(Http2FrameStream stream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab51220fb495dfd9928957c6cc96c81af4141f3d"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc4Mjg1MQ==", "bodyText": "Sorry, I didn't get it. Do you want me to rename Http2StreamFrame stream(Http2FrameStream stream); to     Http2PriorityFrame stream(Http2PriorityFrame stream);?", "url": "https://github.com/netty/netty/pull/10765#discussion_r548782851", "createdAt": "2020-12-25T02:36:19Z", "author": {"login": "hyperxpro"}, "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2PushPromiseFrame.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http2;\n+\n+import io.netty.util.internal.UnstableApi;\n+\n+/**\n+ * HTTP/2 Push Promise Frame\n+ */\n+@UnstableApi\n+public interface Http2PushPromiseFrame extends Http2StreamFrame {\n+\n+    /**\n+     * Set the Promise {@link Http2FrameStream} object for this frame.\n+     */\n+    Http2StreamFrame pushStream(Http2FrameStream stream);\n+\n+    /**\n+     * Returns the Promise {@link Http2FrameStream} object for this frame, or {@code null} if the\n+     * frame has yet to be associated with a stream.\n+     */\n+    Http2FrameStream pushStream();\n+\n+    /**\n+     * {@link Http2Headers} sent in Push Promise\n+     */\n+    Http2Headers http2Headers();\n+\n+    /**\n+     * Frame padding to use. Will be non-negative and less than 256.\n+     */\n+    int padding();\n+\n+    /**\n+     * Promised Stream ID\n+     */\n+    int promisedStreamId();\n+\n+    @Override\n+    Http2StreamFrame stream(Http2FrameStream stream);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc0NDAyMg=="}, "originalCommit": {"oid": "ab51220fb495dfd9928957c6cc96c81af4141f3d"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg1MTgzNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Http2StreamFrame stream(Http2FrameStream stream);\n          \n          \n            \n                Http2PushPromiseFrame stream(Http2FrameStream stream);", "url": "https://github.com/netty/netty/pull/10765#discussion_r548851837", "createdAt": "2020-12-25T10:28:04Z", "author": {"login": "normanmaurer"}, "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2PushPromiseFrame.java", "diffHunk": "@@ -0,0 +1,55 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http2;\n+\n+import io.netty.util.internal.UnstableApi;\n+\n+/**\n+ * HTTP/2 Push Promise Frame\n+ */\n+@UnstableApi\n+public interface Http2PushPromiseFrame extends Http2StreamFrame {\n+\n+    /**\n+     * Set the Promise {@link Http2FrameStream} object for this frame.\n+     */\n+    Http2StreamFrame pushStream(Http2FrameStream stream);\n+\n+    /**\n+     * Returns the Promise {@link Http2FrameStream} object for this frame, or {@code null} if the\n+     * frame has yet to be associated with a stream.\n+     */\n+    Http2FrameStream pushStream();\n+\n+    /**\n+     * {@link Http2Headers} sent in Push Promise\n+     */\n+    Http2Headers http2Headers();\n+\n+    /**\n+     * Frame padding to use. Will be non-negative and less than 256.\n+     */\n+    int padding();\n+\n+    /**\n+     * Promised Stream ID\n+     */\n+    int promisedStreamId();\n+\n+    @Override\n+    Http2StreamFrame stream(Http2FrameStream stream);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc0NDAyMg=="}, "originalCommit": {"oid": "ab51220fb495dfd9928957c6cc96c81af4141f3d"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MDQyNTIzOnYy", "diffSide": "RIGHT", "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2PriorityFrame.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNFQyMDoyNDoyN1rOILUrbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQxMDoyODoyNFrOILbQ2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc0NDA0Nw==", "bodyText": "s/Http2StreamFrame/Http2PriorityFrame/", "url": "https://github.com/netty/netty/pull/10765#discussion_r548744047", "createdAt": "2020-12-24T20:24:27Z", "author": {"login": "normanmaurer"}, "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2PriorityFrame.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http2;\n+\n+import io.netty.util.internal.UnstableApi;\n+\n+/**\n+ * HTTP/2 Priority Frame\n+ */\n+@UnstableApi\n+public interface Http2PriorityFrame extends Http2StreamFrame {\n+\n+    /**\n+     * Parent Stream Id of this Priority request\n+     */\n+    int streamDependency();\n+\n+    /**\n+     * Stream weight\n+     */\n+    short weight();\n+\n+    /**\n+     * Set to {@code true} if this stream is exclusive else set to {@code false}\n+     */\n+    boolean exclusive();\n+\n+    @Override\n+    Http2StreamFrame stream(Http2FrameStream stream);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab51220fb495dfd9928957c6cc96c81af4141f3d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODg1MTkzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Http2StreamFrame stream(Http2FrameStream stream);\n          \n          \n            \n                Http2PriorityFrame stream(Http2FrameStream stream);", "url": "https://github.com/netty/netty/pull/10765#discussion_r548851930", "createdAt": "2020-12-25T10:28:24Z", "author": {"login": "normanmaurer"}, "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2PriorityFrame.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http2;\n+\n+import io.netty.util.internal.UnstableApi;\n+\n+/**\n+ * HTTP/2 Priority Frame\n+ */\n+@UnstableApi\n+public interface Http2PriorityFrame extends Http2StreamFrame {\n+\n+    /**\n+     * Parent Stream Id of this Priority request\n+     */\n+    int streamDependency();\n+\n+    /**\n+     * Stream weight\n+     */\n+    short weight();\n+\n+    /**\n+     * Set to {@code true} if this stream is exclusive else set to {@code false}\n+     */\n+    boolean exclusive();\n+\n+    @Override\n+    Http2StreamFrame stream(Http2FrameStream stream);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODc0NDA0Nw=="}, "originalCommit": {"oid": "ab51220fb495dfd9928957c6cc96c81af4141f3d"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MzM0NTM1OnYy", "diffSide": "RIGHT", "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QwOTozMzoxNlrOILpwGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QwOTozMzoxNlrOILpwGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA4OTMwNg==", "bodyText": "remove 4 spaces in all lines in the if block... you use 8 spaces while we use 4 everywhere", "url": "https://github.com/netty/netty/pull/10765#discussion_r549089306", "createdAt": "2020-12-27T09:33:16Z", "author": {"login": "normanmaurer"}, "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java", "diffHunk": "@@ -383,59 +392,94 @@ private void writeGoAwayFrame(ChannelHandlerContext ctx, Http2GoAwayFrame frame,\n         goAway(ctx, (int) lastStreamId, frame.errorCode(), frame.content(), promise);\n     }\n \n-    private void writeHeadersFrame(\n-            final ChannelHandlerContext ctx, Http2HeadersFrame headersFrame, final ChannelPromise promise) {\n+    private void writeHeadersFrame(final ChannelHandlerContext ctx, Http2HeadersFrame headersFrame,\n+                                   final ChannelPromise promise) {\n \n         if (isStreamIdValid(headersFrame.stream().id())) {\n             encoder().writeHeaders(ctx, headersFrame.stream().id(), headersFrame.headers(), headersFrame.padding(),\n                     headersFrame.isEndStream(), promise);\n-        } else {\n-            final DefaultHttp2FrameStream stream = (DefaultHttp2FrameStream) headersFrame.stream();\n-            final Http2Connection connection = connection();\n-            final int streamId = connection.local().incrementAndGetNextStreamId();\n-            if (streamId < 0) {\n-                promise.setFailure(new Http2NoMoreStreamIdsException());\n-\n-                // Simulate a GOAWAY being received due to stream exhaustion on this connection. We use the maximum\n-                // valid stream ID for the current peer.\n-                onHttp2Frame(ctx, new DefaultHttp2GoAwayFrame(connection.isServer() ? Integer.MAX_VALUE :\n-                        Integer.MAX_VALUE - 1, NO_ERROR.code(),\n-                        writeAscii(ctx.alloc(), \"Stream IDs exhausted on local stream creation\")));\n-                return;\n-            }\n-            stream.id = streamId;\n-\n-            // Use a Map to store all pending streams as we may have multiple. This is needed as if we would store the\n-            // stream in a field directly we may override the stored field before onStreamAdded(...) was called\n-            // and so not correctly set the property for the buffered stream.\n-            //\n-            // See https://github.com/netty/netty/issues/8692\n-            Object old = frameStreamToInitializeMap.put(streamId, stream);\n-\n-            // We should not re-use ids.\n-            assert old == null;\n+        } else if (initializeNewStream(ctx, (DefaultHttp2FrameStream) headersFrame.stream(), promise)) {\n+                final int streamId = headersFrame.stream().id();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e5c29a2dd026e428dc51db903e97943c563515b"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MzM0NTY1OnYy", "diffSide": "RIGHT", "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QwOTozMzoyNlrOILpwOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QwOTozMzoyNlrOILpwOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA4OTMzNg==", "bodyText": "remove 4 spaces in all lines in the if block... you use 8 spaces while we use 4 everywhere", "url": "https://github.com/netty/netty/pull/10765#discussion_r549089336", "createdAt": "2020-12-27T09:33:26Z", "author": {"login": "normanmaurer"}, "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/Http2FrameCodec.java", "diffHunk": "@@ -383,59 +392,94 @@ private void writeGoAwayFrame(ChannelHandlerContext ctx, Http2GoAwayFrame frame,\n         goAway(ctx, (int) lastStreamId, frame.errorCode(), frame.content(), promise);\n     }\n \n-    private void writeHeadersFrame(\n-            final ChannelHandlerContext ctx, Http2HeadersFrame headersFrame, final ChannelPromise promise) {\n+    private void writeHeadersFrame(final ChannelHandlerContext ctx, Http2HeadersFrame headersFrame,\n+                                   final ChannelPromise promise) {\n \n         if (isStreamIdValid(headersFrame.stream().id())) {\n             encoder().writeHeaders(ctx, headersFrame.stream().id(), headersFrame.headers(), headersFrame.padding(),\n                     headersFrame.isEndStream(), promise);\n-        } else {\n-            final DefaultHttp2FrameStream stream = (DefaultHttp2FrameStream) headersFrame.stream();\n-            final Http2Connection connection = connection();\n-            final int streamId = connection.local().incrementAndGetNextStreamId();\n-            if (streamId < 0) {\n-                promise.setFailure(new Http2NoMoreStreamIdsException());\n-\n-                // Simulate a GOAWAY being received due to stream exhaustion on this connection. We use the maximum\n-                // valid stream ID for the current peer.\n-                onHttp2Frame(ctx, new DefaultHttp2GoAwayFrame(connection.isServer() ? Integer.MAX_VALUE :\n-                        Integer.MAX_VALUE - 1, NO_ERROR.code(),\n-                        writeAscii(ctx.alloc(), \"Stream IDs exhausted on local stream creation\")));\n-                return;\n-            }\n-            stream.id = streamId;\n-\n-            // Use a Map to store all pending streams as we may have multiple. This is needed as if we would store the\n-            // stream in a field directly we may override the stored field before onStreamAdded(...) was called\n-            // and so not correctly set the property for the buffered stream.\n-            //\n-            // See https://github.com/netty/netty/issues/8692\n-            Object old = frameStreamToInitializeMap.put(streamId, stream);\n-\n-            // We should not re-use ids.\n-            assert old == null;\n+        } else if (initializeNewStream(ctx, (DefaultHttp2FrameStream) headersFrame.stream(), promise)) {\n+                final int streamId = headersFrame.stream().id();\n+\n+                encoder().writeHeaders(ctx, streamId, headersFrame.headers(), headersFrame.padding(),\n+                        headersFrame.isEndStream(), promise);\n+\n+                if (!promise.isDone()) {\n+                    numBufferedStreams++;\n+                    // Clean up the stream being initialized if writing the headers fails and also\n+                    // decrement the number of buffered streams.\n+                    promise.addListener(new ChannelFutureListener() {\n+                        @Override\n+                        public void operationComplete(ChannelFuture channelFuture) {\n+                            numBufferedStreams--;\n+\n+                            handleHeaderFuture(channelFuture, streamId);\n+                        }\n+                    });\n+                } else {\n+                    handleHeaderFuture(promise, streamId);\n+                }\n+        }\n+    }\n \n-            encoder().writeHeaders(ctx, streamId, headersFrame.headers(), headersFrame.padding(),\n-                    headersFrame.isEndStream(), promise);\n+    private void writePushPromise(final ChannelHandlerContext ctx, Http2PushPromiseFrame pushPromiseFrame,\n+                                  final ChannelPromise promise) {\n+        if (isStreamIdValid(pushPromiseFrame.pushStream().id())) {\n+            encoder().writePushPromise(ctx, pushPromiseFrame.stream().id(), pushPromiseFrame.pushStream().id(),\n+                    pushPromiseFrame.http2Headers(), pushPromiseFrame.padding(), promise);\n+        } else if (initializeNewStream(ctx, (DefaultHttp2FrameStream) pushPromiseFrame.pushStream(), promise)) {\n+                final int streamId = pushPromiseFrame.stream().id();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e5c29a2dd026e428dc51db903e97943c563515b"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1MzM0Njk0OnYy", "diffSide": "RIGHT", "path": "codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2PushPromiseFrameTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QwOTozNDo1OFrOILpw1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yN1QwOTozNDo1OFrOILpw1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTA4OTQ5NA==", "bodyText": "Honestly I think this should be done in a ChannelFutureListener so you are sure the write was actually done and so the id was set... Basically move this line and everything below in a a ChannelFutureListener that is added to the headers write.", "url": "https://github.com/netty/netty/pull/10765#discussion_r549089494", "createdAt": "2020-12-27T09:34:58Z", "author": {"login": "normanmaurer"}, "path": "codec-http2/src/test/java/io/netty/handler/codec/http2/DefaultHttp2PushPromiseFrameTest.java", "diffHunk": "@@ -0,0 +1,233 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http2;\n+\n+import io.netty.bootstrap.Bootstrap;\n+import io.netty.bootstrap.ServerBootstrap;\n+import io.netty.buffer.Unpooled;\n+import io.netty.channel.ChannelFuture;\n+import io.netty.channel.ChannelFutureListener;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.SocketChannel;\n+import io.netty.channel.socket.nio.NioServerSocketChannel;\n+import io.netty.channel.socket.nio.NioSocketChannel;\n+import io.netty.util.CharsetUtil;\n+import io.netty.util.ReferenceCountUtil;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class DefaultHttp2PushPromiseFrameTest {\n+\n+    private final EventLoopGroup eventLoopGroup = new NioEventLoopGroup(2);\n+    private final ClientHandler clientHandler = new ClientHandler();\n+    private final Map<Integer, String> contentMap = new ConcurrentHashMap<Integer, String>();\n+\n+    private ChannelFuture connectionFuture;\n+\n+    @Before\n+    public void setup() throws InterruptedException {\n+        ServerBootstrap serverBootstrap = new ServerBootstrap()\n+                .group(eventLoopGroup)\n+                .channel(NioServerSocketChannel.class)\n+                .childHandler(new ChannelInitializer<SocketChannel>() {\n+                    @Override\n+                    protected void initChannel(SocketChannel ch) {\n+                        ChannelPipeline pipeline = ch.pipeline();\n+\n+                        Http2FrameCodec frameCodec = Http2FrameCodecBuilder.forServer()\n+                                .autoAckSettingsFrame(true)\n+                                .autoAckPingFrame(true)\n+                                .build();\n+\n+                        pipeline.addLast(frameCodec);\n+                        pipeline.addLast(new ServerHandler());\n+                    }\n+                });\n+\n+        ChannelFuture channelFuture = serverBootstrap.bind(0).sync();\n+\n+        final Bootstrap bootstrap = new Bootstrap()\n+                .group(eventLoopGroup)\n+                .channel(NioSocketChannel.class)\n+                .handler(new ChannelInitializer<SocketChannel>() {\n+                    @Override\n+                    protected void initChannel(SocketChannel ch) {\n+                        ChannelPipeline pipeline = ch.pipeline();\n+\n+                        Http2FrameCodec frameCodec = Http2FrameCodecBuilder.forClient()\n+                                .autoAckSettingsFrame(true)\n+                                .autoAckPingFrame(true)\n+                                .initialSettings(Http2Settings.defaultSettings().pushEnabled(true))\n+                                .build();\n+\n+                        pipeline.addLast(frameCodec);\n+                        pipeline.addLast(clientHandler);\n+                    }\n+                });\n+\n+        connectionFuture = bootstrap.connect(channelFuture.channel().localAddress());\n+    }\n+\n+    @Test\n+    public void send() {\n+        connectionFuture.addListener(new ChannelFutureListener() {\n+            @Override\n+            public void operationComplete(ChannelFuture future) {\n+                clientHandler.write();\n+            }\n+        });\n+    }\n+\n+    @After\n+    public void shutdown() {\n+        eventLoopGroup.shutdownGracefully();\n+    }\n+\n+    private final class ServerHandler extends Http2ChannelDuplexHandler {\n+\n+        @Override\n+        public void channelRead(ChannelHandlerContext ctx, Object msg) throws Exception {\n+\n+            if (msg instanceof Http2HeadersFrame) {\n+                Http2HeadersFrame receivedFrame = (Http2HeadersFrame) msg;\n+\n+                Http2Headers pushRequestHeaders = new DefaultHttp2Headers();\n+                pushRequestHeaders.path(\"/meow\")\n+                        .method(\"GET\")\n+                        .scheme(\"https\")\n+                        .authority(\"localhost:5555\");\n+\n+                // Write PUSH_PROMISE request headers\n+                Http2FrameStream newPushFrameStream = newStream();\n+                Http2PushPromiseFrame pushPromiseFrame = new DefaultHttp2PushPromiseFrame(pushRequestHeaders);\n+                pushPromiseFrame.stream(receivedFrame.stream());\n+                pushPromiseFrame.pushStream(newPushFrameStream);\n+                ctx.writeAndFlush(pushPromiseFrame);\n+\n+                contentMap.put(newPushFrameStream.id(), \"Meow, I am Pushed via HTTP/2\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1e5c29a2dd026e428dc51db903e97943c563515b"}, "originalPosition": 130}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3657, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}