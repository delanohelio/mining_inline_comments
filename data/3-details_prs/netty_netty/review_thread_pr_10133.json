{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkzMDgyODMx", "number": 10133, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwODoxMDo1N1rODriBmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwODoxMDo1N1rODriBmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ2OTcyODI2OnYy", "diffSide": "RIGHT", "path": "codec-http/src/test/java/io/netty/handler/codec/http/multipart/AbstractMemoryHttpDataTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yNlQwODoxMDo1N1rOF77UOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yN1QwOTo1NDoxMlrOF8qJdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM4MjEzOQ==", "bodyText": "Create a new instance of UnpooledByteBufAllocator as otherwise this may break if tests are executed concurrently.", "url": "https://github.com/netty/netty/pull/10133#discussion_r398382139", "createdAt": "2020-03-26T08:10:57Z", "author": {"login": "normanmaurer"}, "path": "codec-http/src/test/java/io/netty/handler/codec/http/multipart/AbstractMemoryHttpDataTest.java", "diffHunk": "@@ -59,6 +62,36 @@ public void testSetContentFromStream() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void testSetContentFromStreamExceptionally() throws Exception {\n+        TestHttpData data = new TestHttpData(\"test\", UTF_8, 0); //definedSize=0\n+        data.setMaxSize(10);\n+        byte[] bytes = new byte[16];\n+        UnpooledByteBufAllocator alloc = UnpooledByteBufAllocator.DEFAULT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "973025324e8b1dbcc5406df8d2382db97c8b0027"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODY2MDQ1NA==", "bodyText": "Creating a new instance of UnpooledByteBufAllocator is a good idea to handle the concurrent test cases. And we must make the temporary ByteBuf instance be allocated from this new allocator as well. But I found that buffer method called by setContent method is statically imported.\n\n  \n    \n      netty/codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractMemoryHttpData.java\n    \n    \n        Lines 65 to 69\n      in\n      81513c3\n    \n    \n    \n    \n\n        \n          \n           @Override \n        \n\n        \n          \n           public void setContent(InputStream inputStream) throws IOException { \n        \n\n        \n          \n               ObjectUtil.checkNotNull(inputStream, \"inputStream\"); \n        \n\n        \n          \n            \n        \n\n        \n          \n               ByteBuf buffer = buffer(); \n        \n    \n  \n\n\n\n  \n    \n      netty/codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractMemoryHttpData.java\n    \n    \n        Lines 31 to 34\n      in\n      81513c3\n    \n    \n    \n    \n\n        \n          \n           import static io.netty.buffer.Unpooled.EMPTY_BUFFER; \n        \n\n        \n          \n           import static io.netty.buffer.Unpooled.buffer; \n        \n\n        \n          \n           import static io.netty.buffer.Unpooled.compositeBuffer; \n        \n\n        \n          \n           import static io.netty.buffer.Unpooled.wrappedBuffer; \n        \n    \n  \n\n\nMaybe I can extract it to a new protected method and override it so that I can make the ByteBuf be allocate from my new allocator. However, for test purpose, I'm not sure whether it's worthwhile. @normanmaurer Any suggestions?", "url": "https://github.com/netty/netty/pull/10133#discussion_r398660454", "createdAt": "2020-03-26T15:24:11Z", "author": {"login": "seedeed"}, "path": "codec-http/src/test/java/io/netty/handler/codec/http/multipart/AbstractMemoryHttpDataTest.java", "diffHunk": "@@ -59,6 +62,36 @@ public void testSetContentFromStream() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void testSetContentFromStreamExceptionally() throws Exception {\n+        TestHttpData data = new TestHttpData(\"test\", UTF_8, 0); //definedSize=0\n+        data.setMaxSize(10);\n+        byte[] bytes = new byte[16];\n+        UnpooledByteBufAllocator alloc = UnpooledByteBufAllocator.DEFAULT;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM4MjEzOQ=="}, "originalCommit": {"oid": "973025324e8b1dbcc5406df8d2382db97c8b0027"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTE0OTQyOA==", "bodyText": "just remove all of this... the leak detection will kick in if we leak the buffer anyway.", "url": "https://github.com/netty/netty/pull/10133#discussion_r399149428", "createdAt": "2020-03-27T09:54:12Z", "author": {"login": "normanmaurer"}, "path": "codec-http/src/test/java/io/netty/handler/codec/http/multipart/AbstractMemoryHttpDataTest.java", "diffHunk": "@@ -59,6 +62,36 @@ public void testSetContentFromStream() throws Exception {\n         }\n     }\n \n+    @Test\n+    public void testSetContentFromStreamExceptionally() throws Exception {\n+        TestHttpData data = new TestHttpData(\"test\", UTF_8, 0); //definedSize=0\n+        data.setMaxSize(10);\n+        byte[] bytes = new byte[16];\n+        UnpooledByteBufAllocator alloc = UnpooledByteBufAllocator.DEFAULT;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5ODM4MjEzOQ=="}, "originalCommit": {"oid": "973025324e8b1dbcc5406df8d2382db97c8b0027"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3365, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}