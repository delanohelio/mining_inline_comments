{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExOTY1ODY2", "number": 10237, "title": "Add a DNS client example.", "bodyText": "Motivation:\nIt seems that there is no DNS client example in Netty project so far.\nModification:\nAdd a Netty DNS client example.", "createdAt": "2020-05-01T04:02:01Z", "url": "https://github.com/netty/netty/pull/10237", "merged": true, "mergeCommit": {"oid": "731d33070f8dba2a6f19becc2edd6e949bc07f78"}, "closed": true, "closedAt": "2020-05-07T08:46:42Z", "author": {"login": "seedeed"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcc5etzAH2gAyNDExOTY1ODY2OmEyNDRhZjlhMzc5MzM2ZDE3NjA1MTU4NGZhZDU4OWFkNTZlY2EzNzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcedGV1gH2gAyNDExOTY1ODY2OmRkNDQ4ODE5ZThjNmE4YThmOTcyNWY1N2YyMmZmOTI1Y2FkNWU3NWI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "a244af9a379336d176051584fad589ad56eca370", "author": {"user": {"login": "seedeed", "name": "feijermu"}}, "url": "https://github.com/netty/netty/commit/a244af9a379336d176051584fad589ad56eca370", "committedDate": "2020-05-01T03:54:06Z", "message": "Add a DNS client example."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA0NjMwODUz", "url": "https://github.com/netty/netty/pull/10237#pullrequestreview-404630853", "createdAt": "2020-05-03T15:41:26Z", "commit": {"oid": "a244af9a379336d176051584fad589ad56eca370"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "394b3e0f93d8c883e7a7698b13e81c661ea19948", "author": {"user": {"login": "seedeed", "name": "feijermu"}}, "url": "https://github.com/netty/netty/commit/394b3e0f93d8c883e7a7698b13e81c661ea19948", "committedDate": "2020-05-03T16:24:56Z", "message": "Move package from io.netty.example.dns to io.netty.example.dns.udp"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NTI4NzI1", "url": "https://github.com/netty/netty/pull/10237#pullrequestreview-405528725", "createdAt": "2020-05-05T06:47:06Z", "commit": {"oid": "394b3e0f93d8c883e7a7698b13e81c661ea19948"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNjo0NzowNlrOGQcbKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQwNzowNzowOVrOGQc52w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5NjEwNw==", "bodyText": "call sync()", "url": "https://github.com/netty/netty/pull/10237#discussion_r419896107", "createdAt": "2020-05-05T06:47:06Z", "author": {"login": "normanmaurer"}, "path": "example/src/main/java/io/netty/example/dns/udp/DnsClient.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.example.dns.udp;\n+\n+import java.net.InetSocketAddress;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import io.netty.bootstrap.Bootstrap;\n+import io.netty.buffer.ByteBufUtil;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.DatagramChannel;\n+import io.netty.channel.socket.nio.NioDatagramChannel;\n+import io.netty.handler.codec.dns.DatagramDnsQuery;\n+import io.netty.handler.codec.dns.DatagramDnsQueryEncoder;\n+import io.netty.handler.codec.dns.DatagramDnsResponse;\n+import io.netty.handler.codec.dns.DatagramDnsResponseDecoder;\n+import io.netty.handler.codec.dns.DefaultDnsQuestion;\n+import io.netty.handler.codec.dns.DnsQuery;\n+import io.netty.handler.codec.dns.DnsQuestion;\n+import io.netty.handler.codec.dns.DnsRawRecord;\n+import io.netty.handler.codec.dns.DnsRecord;\n+import io.netty.handler.codec.dns.DnsRecordType;\n+import io.netty.handler.codec.dns.DnsSection;\n+import io.netty.util.NetUtil;\n+import io.netty.util.internal.SocketUtils;\n+\n+public class DnsClient {\n+\n+    private static final String QUERY_DOMAIN = \"www.example.com\";\n+    private static final int DNS_SERVER_PORT = 53;\n+    private static final String DNS_SERVER_HOST = \"8.8.8.8\";\n+\n+    private static void handleQueryResp(DatagramDnsResponse msg) {\n+        if (msg.count(DnsSection.QUESTION) > 0) {\n+            DnsQuestion question = msg.recordAt(DnsSection.QUESTION, 0);\n+            System.out.printf(\"name: %s%n\", question.name());\n+        }\n+        for (int i = 0, count = msg.count(DnsSection.ANSWER); i < count; i++) {\n+            DnsRecord record = msg.recordAt(DnsSection.ANSWER, i);\n+            if (record.type() == DnsRecordType.A) {\n+                //just print the IP after query\n+                DnsRawRecord raw = (DnsRawRecord) record;\n+                System.out.println(NetUtil.bytesToIpAddress(ByteBufUtil.getBytes(raw.content())));\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        InetSocketAddress addr = SocketUtils.socketAddress(DNS_SERVER_HOST, DNS_SERVER_PORT);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        EventLoopGroup group = new NioEventLoopGroup();\n+        try {\n+            Bootstrap b = new Bootstrap();\n+            b.group(group)\n+             .channel(NioDatagramChannel.class)\n+             .handler(new ChannelInitializer<DatagramChannel>() {\n+                 @Override\n+                 protected void initChannel(DatagramChannel ch) throws Exception {\n+                     ChannelPipeline p = ch.pipeline();\n+                     p.addLast(new DatagramDnsQueryEncoder())\n+                     .addLast(new DatagramDnsResponseDecoder())\n+                     .addLast(new SimpleChannelInboundHandler<DatagramDnsResponse>() {\n+                        @Override\n+                        protected void channelRead0(ChannelHandlerContext ctx, DatagramDnsResponse msg)\n+                                throws Exception {\n+                            try {\n+                                handleQueryResp(msg);\n+                            } finally {\n+                                latch.countDown();\n+                            }\n+                        }\n+                    });\n+                 }\n+             });\n+            Channel ch = b.bind(0).sync().channel();\n+            DnsQuery query = new DatagramDnsQuery(null, addr, 1).setRecord(\n+                    DnsSection.QUESTION,\n+                    new DefaultDnsQuestion(QUERY_DOMAIN, DnsRecordType.A));\n+            ch.writeAndFlush(query);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "394b3e0f93d8c883e7a7698b13e81c661ea19948"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5NjM4Mg==", "bodyText": "remove throws Exception", "url": "https://github.com/netty/netty/pull/10237#discussion_r419896382", "createdAt": "2020-05-05T06:47:51Z", "author": {"login": "normanmaurer"}, "path": "example/src/main/java/io/netty/example/dns/udp/DnsClient.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.example.dns.udp;\n+\n+import java.net.InetSocketAddress;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import io.netty.bootstrap.Bootstrap;\n+import io.netty.buffer.ByteBufUtil;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.DatagramChannel;\n+import io.netty.channel.socket.nio.NioDatagramChannel;\n+import io.netty.handler.codec.dns.DatagramDnsQuery;\n+import io.netty.handler.codec.dns.DatagramDnsQueryEncoder;\n+import io.netty.handler.codec.dns.DatagramDnsResponse;\n+import io.netty.handler.codec.dns.DatagramDnsResponseDecoder;\n+import io.netty.handler.codec.dns.DefaultDnsQuestion;\n+import io.netty.handler.codec.dns.DnsQuery;\n+import io.netty.handler.codec.dns.DnsQuestion;\n+import io.netty.handler.codec.dns.DnsRawRecord;\n+import io.netty.handler.codec.dns.DnsRecord;\n+import io.netty.handler.codec.dns.DnsRecordType;\n+import io.netty.handler.codec.dns.DnsSection;\n+import io.netty.util.NetUtil;\n+import io.netty.util.internal.SocketUtils;\n+\n+public class DnsClient {\n+\n+    private static final String QUERY_DOMAIN = \"www.example.com\";\n+    private static final int DNS_SERVER_PORT = 53;\n+    private static final String DNS_SERVER_HOST = \"8.8.8.8\";\n+\n+    private static void handleQueryResp(DatagramDnsResponse msg) {\n+        if (msg.count(DnsSection.QUESTION) > 0) {\n+            DnsQuestion question = msg.recordAt(DnsSection.QUESTION, 0);\n+            System.out.printf(\"name: %s%n\", question.name());\n+        }\n+        for (int i = 0, count = msg.count(DnsSection.ANSWER); i < count; i++) {\n+            DnsRecord record = msg.recordAt(DnsSection.ANSWER, i);\n+            if (record.type() == DnsRecordType.A) {\n+                //just print the IP after query\n+                DnsRawRecord raw = (DnsRawRecord) record;\n+                System.out.println(NetUtil.bytesToIpAddress(ByteBufUtil.getBytes(raw.content())));\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        InetSocketAddress addr = SocketUtils.socketAddress(DNS_SERVER_HOST, DNS_SERVER_PORT);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        EventLoopGroup group = new NioEventLoopGroup();\n+        try {\n+            Bootstrap b = new Bootstrap();\n+            b.group(group)\n+             .channel(NioDatagramChannel.class)\n+             .handler(new ChannelInitializer<DatagramChannel>() {\n+                 @Override\n+                 protected void initChannel(DatagramChannel ch) throws Exception {\n+                     ChannelPipeline p = ch.pipeline();\n+                     p.addLast(new DatagramDnsQueryEncoder())\n+                     .addLast(new DatagramDnsResponseDecoder())\n+                     .addLast(new SimpleChannelInboundHandler<DatagramDnsResponse>() {\n+                        @Override\n+                        protected void channelRead0(ChannelHandlerContext ctx, DatagramDnsResponse msg)\n+                                throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "394b3e0f93d8c883e7a7698b13e81c661ea19948"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTg5NjgzOQ==", "bodyText": "make final and add private constructor", "url": "https://github.com/netty/netty/pull/10237#discussion_r419896839", "createdAt": "2020-05-05T06:49:00Z", "author": {"login": "normanmaurer"}, "path": "example/src/main/java/io/netty/example/dns/udp/DnsClient.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.example.dns.udp;\n+\n+import java.net.InetSocketAddress;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import io.netty.bootstrap.Bootstrap;\n+import io.netty.buffer.ByteBufUtil;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.DatagramChannel;\n+import io.netty.channel.socket.nio.NioDatagramChannel;\n+import io.netty.handler.codec.dns.DatagramDnsQuery;\n+import io.netty.handler.codec.dns.DatagramDnsQueryEncoder;\n+import io.netty.handler.codec.dns.DatagramDnsResponse;\n+import io.netty.handler.codec.dns.DatagramDnsResponseDecoder;\n+import io.netty.handler.codec.dns.DefaultDnsQuestion;\n+import io.netty.handler.codec.dns.DnsQuery;\n+import io.netty.handler.codec.dns.DnsQuestion;\n+import io.netty.handler.codec.dns.DnsRawRecord;\n+import io.netty.handler.codec.dns.DnsRecord;\n+import io.netty.handler.codec.dns.DnsRecordType;\n+import io.netty.handler.codec.dns.DnsSection;\n+import io.netty.util.NetUtil;\n+import io.netty.util.internal.SocketUtils;\n+\n+public class DnsClient {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "394b3e0f93d8c883e7a7698b13e81c661ea19948"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkwMzM3Mw==", "bodyText": "don't use SocketUtils in an example as its a internal class.", "url": "https://github.com/netty/netty/pull/10237#discussion_r419903373", "createdAt": "2020-05-05T07:05:42Z", "author": {"login": "normanmaurer"}, "path": "example/src/main/java/io/netty/example/dns/udp/DnsClient.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.example.dns.udp;\n+\n+import java.net.InetSocketAddress;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import io.netty.bootstrap.Bootstrap;\n+import io.netty.buffer.ByteBufUtil;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.DatagramChannel;\n+import io.netty.channel.socket.nio.NioDatagramChannel;\n+import io.netty.handler.codec.dns.DatagramDnsQuery;\n+import io.netty.handler.codec.dns.DatagramDnsQueryEncoder;\n+import io.netty.handler.codec.dns.DatagramDnsResponse;\n+import io.netty.handler.codec.dns.DatagramDnsResponseDecoder;\n+import io.netty.handler.codec.dns.DefaultDnsQuestion;\n+import io.netty.handler.codec.dns.DnsQuery;\n+import io.netty.handler.codec.dns.DnsQuestion;\n+import io.netty.handler.codec.dns.DnsRawRecord;\n+import io.netty.handler.codec.dns.DnsRecord;\n+import io.netty.handler.codec.dns.DnsRecordType;\n+import io.netty.handler.codec.dns.DnsSection;\n+import io.netty.util.NetUtil;\n+import io.netty.util.internal.SocketUtils;\n+\n+public class DnsClient {\n+\n+    private static final String QUERY_DOMAIN = \"www.example.com\";\n+    private static final int DNS_SERVER_PORT = 53;\n+    private static final String DNS_SERVER_HOST = \"8.8.8.8\";\n+\n+    private static void handleQueryResp(DatagramDnsResponse msg) {\n+        if (msg.count(DnsSection.QUESTION) > 0) {\n+            DnsQuestion question = msg.recordAt(DnsSection.QUESTION, 0);\n+            System.out.printf(\"name: %s%n\", question.name());\n+        }\n+        for (int i = 0, count = msg.count(DnsSection.ANSWER); i < count; i++) {\n+            DnsRecord record = msg.recordAt(DnsSection.ANSWER, i);\n+            if (record.type() == DnsRecordType.A) {\n+                //just print the IP after query\n+                DnsRawRecord raw = (DnsRawRecord) record;\n+                System.out.println(NetUtil.bytesToIpAddress(ByteBufUtil.getBytes(raw.content())));\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        InetSocketAddress addr = SocketUtils.socketAddress(DNS_SERVER_HOST, DNS_SERVER_PORT);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "394b3e0f93d8c883e7a7698b13e81c661ea19948"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTkwMzk2Mw==", "bodyText": "you could also just call ch.closeFuture().sync() and call ch.close() in your channelRead0 method", "url": "https://github.com/netty/netty/pull/10237#discussion_r419903963", "createdAt": "2020-05-05T07:07:09Z", "author": {"login": "normanmaurer"}, "path": "example/src/main/java/io/netty/example/dns/udp/DnsClient.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.example.dns.udp;\n+\n+import java.net.InetSocketAddress;\n+import java.util.concurrent.CountDownLatch;\n+import java.util.concurrent.TimeUnit;\n+\n+import io.netty.bootstrap.Bootstrap;\n+import io.netty.buffer.ByteBufUtil;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.DatagramChannel;\n+import io.netty.channel.socket.nio.NioDatagramChannel;\n+import io.netty.handler.codec.dns.DatagramDnsQuery;\n+import io.netty.handler.codec.dns.DatagramDnsQueryEncoder;\n+import io.netty.handler.codec.dns.DatagramDnsResponse;\n+import io.netty.handler.codec.dns.DatagramDnsResponseDecoder;\n+import io.netty.handler.codec.dns.DefaultDnsQuestion;\n+import io.netty.handler.codec.dns.DnsQuery;\n+import io.netty.handler.codec.dns.DnsQuestion;\n+import io.netty.handler.codec.dns.DnsRawRecord;\n+import io.netty.handler.codec.dns.DnsRecord;\n+import io.netty.handler.codec.dns.DnsRecordType;\n+import io.netty.handler.codec.dns.DnsSection;\n+import io.netty.util.NetUtil;\n+import io.netty.util.internal.SocketUtils;\n+\n+public class DnsClient {\n+\n+    private static final String QUERY_DOMAIN = \"www.example.com\";\n+    private static final int DNS_SERVER_PORT = 53;\n+    private static final String DNS_SERVER_HOST = \"8.8.8.8\";\n+\n+    private static void handleQueryResp(DatagramDnsResponse msg) {\n+        if (msg.count(DnsSection.QUESTION) > 0) {\n+            DnsQuestion question = msg.recordAt(DnsSection.QUESTION, 0);\n+            System.out.printf(\"name: %s%n\", question.name());\n+        }\n+        for (int i = 0, count = msg.count(DnsSection.ANSWER); i < count; i++) {\n+            DnsRecord record = msg.recordAt(DnsSection.ANSWER, i);\n+            if (record.type() == DnsRecordType.A) {\n+                //just print the IP after query\n+                DnsRawRecord raw = (DnsRawRecord) record;\n+                System.out.println(NetUtil.bytesToIpAddress(ByteBufUtil.getBytes(raw.content())));\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        InetSocketAddress addr = SocketUtils.socketAddress(DNS_SERVER_HOST, DNS_SERVER_PORT);\n+        final CountDownLatch latch = new CountDownLatch(1);\n+        EventLoopGroup group = new NioEventLoopGroup();\n+        try {\n+            Bootstrap b = new Bootstrap();\n+            b.group(group)\n+             .channel(NioDatagramChannel.class)\n+             .handler(new ChannelInitializer<DatagramChannel>() {\n+                 @Override\n+                 protected void initChannel(DatagramChannel ch) throws Exception {\n+                     ChannelPipeline p = ch.pipeline();\n+                     p.addLast(new DatagramDnsQueryEncoder())\n+                     .addLast(new DatagramDnsResponseDecoder())\n+                     .addLast(new SimpleChannelInboundHandler<DatagramDnsResponse>() {\n+                        @Override\n+                        protected void channelRead0(ChannelHandlerContext ctx, DatagramDnsResponse msg)\n+                                throws Exception {\n+                            try {\n+                                handleQueryResp(msg);\n+                            } finally {\n+                                latch.countDown();\n+                            }\n+                        }\n+                    });\n+                 }\n+             });\n+            Channel ch = b.bind(0).sync().channel();\n+            DnsQuery query = new DatagramDnsQuery(null, addr, 1).setRecord(\n+                    DnsSection.QUESTION,\n+                    new DefaultDnsQuestion(QUERY_DOMAIN, DnsRecordType.A));\n+            ch.writeAndFlush(query);\n+            latch.await(10L, TimeUnit.SECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "394b3e0f93d8c883e7a7698b13e81c661ea19948"}, "originalPosition": 100}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4942db069c3710f7a347c3a8607b97b267d2a3aa", "author": {"user": {"login": "seedeed", "name": "feijermu"}}, "url": "https://github.com/netty/netty/commit/4942db069c3710f7a347c3a8607b97b267d2a3aa", "committedDate": "2020-05-05T12:51:20Z", "message": "Fix some problems."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1NzU2NjQw", "url": "https://github.com/netty/netty/pull/10237#pullrequestreview-405756640", "createdAt": "2020-05-05T12:53:04Z", "commit": {"oid": "4942db069c3710f7a347c3a8607b97b267d2a3aa"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjo1MzowNVrOGQn7LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxMjo1NDo1NFrOGQn_sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4NDUyNA==", "bodyText": "nit: ctx.close();", "url": "https://github.com/netty/netty/pull/10237#discussion_r420084524", "createdAt": "2020-05-05T12:53:05Z", "author": {"login": "normanmaurer"}, "path": "example/src/main/java/io/netty/example/dns/udp/DnsClient.java", "diffHunk": "@@ -81,24 +81,32 @@ protected void initChannel(DatagramChannel ch) throws Exception {\n                      .addLast(new DatagramDnsResponseDecoder())\n                      .addLast(new SimpleChannelInboundHandler<DatagramDnsResponse>() {\n                         @Override\n-                        protected void channelRead0(ChannelHandlerContext ctx, DatagramDnsResponse msg)\n-                                throws Exception {\n+                        protected void channelRead0(ChannelHandlerContext ctx, DatagramDnsResponse msg) {\n                             try {\n                                 handleQueryResp(msg);\n                             } finally {\n-                                latch.countDown();\n+                                ctx.channel().close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4942db069c3710f7a347c3a8607b97b267d2a3aa"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDA4NTY4Mw==", "bodyText": "just remove the schedule and call ch.closeFuture().await(....)", "url": "https://github.com/netty/netty/pull/10237#discussion_r420085683", "createdAt": "2020-05-05T12:54:54Z", "author": {"login": "normanmaurer"}, "path": "example/src/main/java/io/netty/example/dns/udp/DnsClient.java", "diffHunk": "@@ -81,24 +81,32 @@ protected void initChannel(DatagramChannel ch) throws Exception {\n                      .addLast(new DatagramDnsResponseDecoder())\n                      .addLast(new SimpleChannelInboundHandler<DatagramDnsResponse>() {\n                         @Override\n-                        protected void channelRead0(ChannelHandlerContext ctx, DatagramDnsResponse msg)\n-                                throws Exception {\n+                        protected void channelRead0(ChannelHandlerContext ctx, DatagramDnsResponse msg) {\n                             try {\n                                 handleQueryResp(msg);\n                             } finally {\n-                                latch.countDown();\n+                                ctx.channel().close();\n                             }\n                         }\n                     });\n                  }\n              });\n-            Channel ch = b.bind(0).sync().channel();\n+            final Channel ch = b.bind(0).sync().channel();\n             DnsQuery query = new DatagramDnsQuery(null, addr, 1).setRecord(\n                     DnsSection.QUESTION,\n                     new DefaultDnsQuestion(QUERY_DOMAIN, DnsRecordType.A));\n-            ch.writeAndFlush(query);\n-            latch.await(10L, TimeUnit.SECONDS);\n-            ch.close().sync();\n+            ch.writeAndFlush(query).sync();\n+            ScheduledFuture<?> f = ch.eventLoop().schedule(new Runnable() {\n+                @Override\n+                public void run() {\n+                    if (ch.isActive()) {\n+                        System.err.println(\"dns query timeout.\");\n+                        ch.close();\n+                    }\n+                }\n+            }, 10L, TimeUnit.SECONDS);\n+            ch.closeFuture().sync();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4942db069c3710f7a347c3a8607b97b267d2a3aa"}, "originalPosition": 72}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f611ada2626778cc375239ba2adb203034a06a66", "author": {"user": {"login": "seedeed", "name": "feijermu"}}, "url": "https://github.com/netty/netty/commit/f611ada2626778cc375239ba2adb203034a06a66", "committedDate": "2020-05-05T13:10:19Z", "message": "Fix example problems."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1OTU5MDA5", "url": "https://github.com/netty/netty/pull/10237#pullrequestreview-405959009", "createdAt": "2020-05-05T16:32:19Z", "commit": {"oid": "f611ada2626778cc375239ba2adb203034a06a66"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjozMjoxOVrOGQxtjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQxNjozMjoxOVrOGQxtjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDI0NDg3OA==", "bodyText": "you can remove this if. It doesn't harm to close if it was not active", "url": "https://github.com/netty/netty/pull/10237#discussion_r420244878", "createdAt": "2020-05-05T16:32:19Z", "author": {"login": "normanmaurer"}, "path": "example/src/main/java/io/netty/example/dns/udp/DnsClient.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.example.dns.udp;\n+\n+import java.net.InetSocketAddress;\n+import java.util.concurrent.TimeUnit;\n+\n+import io.netty.bootstrap.Bootstrap;\n+import io.netty.buffer.ByteBufUtil;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.ChannelPipeline;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.DatagramChannel;\n+import io.netty.channel.socket.nio.NioDatagramChannel;\n+import io.netty.handler.codec.dns.DatagramDnsQuery;\n+import io.netty.handler.codec.dns.DatagramDnsQueryEncoder;\n+import io.netty.handler.codec.dns.DatagramDnsResponse;\n+import io.netty.handler.codec.dns.DatagramDnsResponseDecoder;\n+import io.netty.handler.codec.dns.DefaultDnsQuestion;\n+import io.netty.handler.codec.dns.DnsQuery;\n+import io.netty.handler.codec.dns.DnsQuestion;\n+import io.netty.handler.codec.dns.DnsRawRecord;\n+import io.netty.handler.codec.dns.DnsRecord;\n+import io.netty.handler.codec.dns.DnsRecordType;\n+import io.netty.handler.codec.dns.DnsSection;\n+import io.netty.util.NetUtil;\n+\n+public final class DnsClient {\n+\n+    private static final String QUERY_DOMAIN = \"www.example.com\";\n+    private static final int DNS_SERVER_PORT = 53;\n+    private static final String DNS_SERVER_HOST = \"8.8.8.8\";\n+\n+    private DnsClient() { }\n+\n+    private static void handleQueryResp(DatagramDnsResponse msg) {\n+        if (msg.count(DnsSection.QUESTION) > 0) {\n+            DnsQuestion question = msg.recordAt(DnsSection.QUESTION, 0);\n+            System.out.printf(\"name: %s%n\", question.name());\n+        }\n+        for (int i = 0, count = msg.count(DnsSection.ANSWER); i < count; i++) {\n+            DnsRecord record = msg.recordAt(DnsSection.ANSWER, i);\n+            if (record.type() == DnsRecordType.A) {\n+                //just print the IP after query\n+                DnsRawRecord raw = (DnsRawRecord) record;\n+                System.out.println(NetUtil.bytesToIpAddress(ByteBufUtil.getBytes(raw.content())));\n+            }\n+        }\n+    }\n+\n+    public static void main(String[] args) throws Exception {\n+        InetSocketAddress addr = new InetSocketAddress(DNS_SERVER_HOST, DNS_SERVER_PORT);\n+        EventLoopGroup group = new NioEventLoopGroup();\n+        try {\n+            Bootstrap b = new Bootstrap();\n+            b.group(group)\n+             .channel(NioDatagramChannel.class)\n+             .handler(new ChannelInitializer<DatagramChannel>() {\n+                 @Override\n+                 protected void initChannel(DatagramChannel ch) throws Exception {\n+                     ChannelPipeline p = ch.pipeline();\n+                     p.addLast(new DatagramDnsQueryEncoder())\n+                     .addLast(new DatagramDnsResponseDecoder())\n+                     .addLast(new SimpleChannelInboundHandler<DatagramDnsResponse>() {\n+                        @Override\n+                        protected void channelRead0(ChannelHandlerContext ctx, DatagramDnsResponse msg) {\n+                            try {\n+                                handleQueryResp(msg);\n+                            } finally {\n+                                ctx.close();\n+                            }\n+                        }\n+                    });\n+                 }\n+             });\n+            final Channel ch = b.bind(0).sync().channel();\n+            DnsQuery query = new DatagramDnsQuery(null, addr, 1).setRecord(\n+                    DnsSection.QUESTION,\n+                    new DefaultDnsQuestion(QUERY_DOMAIN, DnsRecordType.A));\n+            ch.writeAndFlush(query).sync();\n+            boolean succ = ch.closeFuture().await(10, TimeUnit.SECONDS);\n+            if (!succ) {\n+                System.err.println(\"dns query timeout!\");\n+                if (ch.isActive()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f611ada2626778cc375239ba2adb203034a06a66"}, "originalPosition": 101}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA1OTU5MjE2", "url": "https://github.com/netty/netty/pull/10237#pullrequestreview-405959216", "createdAt": "2020-05-05T16:32:33Z", "commit": {"oid": "f611ada2626778cc375239ba2adb203034a06a66"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd448819e8c6a8a8f9725f57f22ff925cad5e75b", "author": {"user": {"login": "seedeed", "name": "feijermu"}}, "url": "https://github.com/netty/netty/commit/dd448819e8c6a8a8f9725f57f22ff925cad5e75b", "committedDate": "2020-05-05T23:57:59Z", "message": "Close the channel even if it's not active."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 278, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}