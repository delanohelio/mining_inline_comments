{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQxOTAwNTIw", "number": 10876, "title": "Ensure we only register native methods once", "bodyText": "Motivation:\nWe need to ensure we only register native methods once as otherwise we may end up in an \"invalid\" state. The problem here was that before it was basically the responsibility the user of transport-native-unix-common to register the methods. This is error prone as there may be multiple users of these on the classpath at the same time.\nModifications:\n\nProvide a way to init native lib without register the native methods of the provided classes. This is needed to be able to re-use functionality which is exposed to our internal native code\nUse flatten plugin to correctly resolve classifier and so have the correct dependency\nCall Unix.* method to ensure we register the methods correctly once\nInclude native lib as well in the native jars of unix-common\n\nResult:\nBe able to have multiple artifacts of the classpath that depends on the unix-common. Related to netty/netty-incubator-transport-io_uring#15", "createdAt": "2020-12-17T14:25:09Z", "url": "https://github.com/netty/netty/pull/10876", "merged": true, "mergeCommit": {"oid": "7fb62a93b8000c73ad2c40fc22bd02f289f1623a"}, "closed": true, "closedAt": "2020-12-18T09:37:50Z", "author": {"login": "normanmaurer"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdnEYABgFqTU1NDY1MjQzMQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdnUCvzgBqjQxMjg3MTU0NzA=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0NjUyNDMx", "url": "https://github.com/netty/netty/pull/10876#pullrequestreview-554652431", "createdAt": "2020-12-17T14:26:07Z", "commit": {"oid": "7d41696b4e7f3f0c2ee64fe9db867e4f0d79db26"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNDoyNjowN1rOIH4Fog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xN1QxNDoyNjowN1rOIH4Fog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NTEyOTg5MA==", "bodyText": "Removed all this stuff as we can easily share it.", "url": "https://github.com/netty/netty/pull/10876#discussion_r545129890", "createdAt": "2020-12-17T14:26:07Z", "author": {"login": "normanmaurer"}, "path": "transport-native-unix-common/pom.xml", "diffHunk": "@@ -180,136 +122,17 @@\n       <properties>\n         <jni.platform>linux</jni.platform>\n       </properties>\n-      <build>\n-        <plugins>\n-          <plugin>\n-            <artifactId>maven-antrun-plugin</artifactId>\n-            <executions>\n-              <!-- Build the additional JAR that contains the native library. -->\n-              <execution>\n-                <id>native-jar</id>\n-                <phase>package</phase>\n-                <goals>\n-                  <goal>run</goal>\n-                </goals>\n-                <configuration>\n-                  <target>\n-                    <copy todir=\"${nativeJarWorkdir}\">\n-                      <zipfileset src=\"${defaultJarFile}\" />\n-                    </copy>\n-                    <copy todir=\"${nativeJarWorkdir}\" includeEmptyDirs=\"false\">\n-                      <zipfileset dir=\"${nativeLibOnlyDir}\" />\n-                      <regexpmapper handledirsep=\"yes\" from=\"^(?:[^/]+/)*([^/]+)$\" to=\"META-INF/native/lib/\\1\" />\n-                    </copy>\n-                    <copy todir=\"${nativeJarWorkdir}\" includeEmptyDirs=\"false\">\n-                      <zipfileset dir=\"${nativeIncludeDir}\" />\n-                      <regexpmapper handledirsep=\"yes\" from=\"^(?:[^/]+/)*([^/]+).h$\" to=\"META-INF/native/include/\\1.h\" />\n-                    </copy>\n-                    <copy todir=\"${nativeJarWorkdir}\" includeEmptyDirs=\"false\">\n-                      <zipfileset dir=\"${jniUtilIncludeDir}\" />\n-                      <regexpmapper handledirsep=\"yes\" from=\"^(?:[^/]+/)*([^/]+).h$\" to=\"META-INF/native/include/\\1.h\" />\n-                    </copy>\n-                    <jar destfile=\"${nativeJarFile}\" manifest=\"${nativeJarWorkdir}/META-INF/MANIFEST.MF\" basedir=\"${nativeJarWorkdir}\" index=\"true\" excludes=\"META-INF/MANIFEST.MF,META-INF/INDEX.LIST\" />\n-                    <attachartifact file=\"${nativeJarFile}\" classifier=\"${jni.classifier}\" type=\"jar\" />\n-                  </target>\n-                </configuration>\n-              </execution>\n-              <!-- invoke the make file to build a static library -->\n-              <execution>\n-                <id>build-native-lib</id>\n-                <phase>generate-sources</phase>\n-                <goals>\n-                  <goal>run</goal>\n-                </goals>\n-                <configuration>\n-                  <target>\n-                    <exec executable=\"${exe.make}\" failonerror=\"true\" resolveexecutable=\"true\">\n-                      <env key=\"CC\" value=\"${exe.compiler}\" />\n-                      <env key=\"AR\" value=\"${exe.archiver}\" />\n-                      <env key=\"LIB_DIR\" value=\"${nativeLibOnlyDir}\" />\n-                      <env key=\"OBJ_DIR\" value=\"${nativeObjsOnlyDir}\" />\n-                      <env key=\"JNI_PLATFORM\" value=\"${jni.platform}\" />\n-                      <env key=\"CFLAGS\" value=\"-O3 -Werror -Wno-attributes -fPIC -fno-omit-frame-pointer -Wunused-variable -fvisibility=hidden\" />\n-                      <env key=\"LDFLAGS\" value=\"-Wl,--no-as-needed -lrt\" />\n-                      <env key=\"LIB_NAME\" value=\"${nativeLibName}\" />\n-                    </exec>\n-                  </target>\n-                </configuration>\n-              </execution>\n-            </executions>\n-          </plugin>\n-        </plugins>\n-      </build>\n     </profile>\n     <profile>\n       <id>linux-aarch64</id>\n       <properties>\n         <!-- use aarch_64 as this is also what os.detected.arch will use on an aarch64 system -->\n+        <nativeLibArch>aarch_64</nativeLibArch>\n         <jni.classifier>${os.detected.name}-aarch_64</jni.classifier>\n         <jni.platform>linux</jni.platform>\n         <exe.compiler>aarch64-linux-gnu-gcc</exe.compiler>\n         <exe.archiver>aarch64-linux-gnu-ar</exe.archiver>\n       </properties>\n-      <build>\n-        <plugins>\n-          <plugin>\n-            <artifactId>maven-antrun-plugin</artifactId>\n-            <executions>\n-              <!-- Build the additional JAR that contains the native library. -->\n-              <execution>\n-                <id>native-jar</id>\n-                <phase>package</phase>\n-                <goals>\n-                  <goal>run</goal>\n-                </goals>\n-                <configuration>\n-                  <target>\n-                    <copy todir=\"${nativeJarWorkdir}\">\n-                      <zipfileset src=\"${defaultJarFile}\" />\n-                    </copy>\n-                    <copy todir=\"${nativeJarWorkdir}\" includeEmptyDirs=\"false\">\n-                      <zipfileset dir=\"${nativeLibOnlyDir}\" />\n-                      <regexpmapper handledirsep=\"yes\" from=\"^(?:[^/]+/)*([^/]+)$\" to=\"META-INF/native/lib/\\1\" />\n-                    </copy>\n-                    <copy todir=\"${nativeJarWorkdir}\" includeEmptyDirs=\"false\">\n-                      <zipfileset dir=\"${nativeIncludeDir}\" />\n-                      <regexpmapper handledirsep=\"yes\" from=\"^(?:[^/]+/)*([^/]+).h$\" to=\"META-INF/native/include/\\1.h\" />\n-                    </copy>\n-                    <copy todir=\"${nativeJarWorkdir}\" includeEmptyDirs=\"false\">\n-                      <zipfileset dir=\"${jniUtilIncludeDir}\" />\n-                      <regexpmapper handledirsep=\"yes\" from=\"^(?:[^/]+/)*([^/]+).h$\" to=\"META-INF/native/include/\\1.h\" />\n-                    </copy>\n-                    <jar destfile=\"${nativeJarFile}\" manifest=\"${nativeJarWorkdir}/META-INF/MANIFEST.MF\" basedir=\"${nativeJarWorkdir}\" index=\"true\" excludes=\"META-INF/MANIFEST.MF,META-INF/INDEX.LIST\" />\n-                    <attachartifact file=\"${nativeJarFile}\" classifier=\"${jni.classifier}\" type=\"jar\" />\n-                  </target>\n-                </configuration>\n-              </execution>\n-              <!-- invoke the make file to build a static library -->\n-              <execution>\n-                <id>build-native-lib</id>\n-                <phase>generate-sources</phase>\n-                <goals>\n-                  <goal>run</goal>\n-                </goals>\n-                <configuration>\n-                  <target>\n-                    <exec executable=\"${exe.make}\" failonerror=\"true\" resolveexecutable=\"true\">\n-                      <env key=\"CC\" value=\"${exe.compiler}\" />\n-                      <env key=\"AR\" value=\"${exe.archiver}\" />\n-                      <env key=\"LIB_DIR\" value=\"${nativeLibOnlyDir}\" />\n-                      <env key=\"OBJ_DIR\" value=\"${nativeObjsOnlyDir}\" />\n-                      <env key=\"JNI_PLATFORM\" value=\"${jni.platform}\" />\n-                      <env key=\"CFLAGS\" value=\"-O3 -Werror -Wno-attributes -fPIC -fno-omit-frame-pointer -Wunused-variable -fvisibility=hidden\" />\n-                      <env key=\"LDFLAGS\" value=\"-Wl,--no-as-needed -lrt\" />\n-                      <env key=\"LIB_NAME\" value=\"${nativeLibName}\" />\n-                    </exec>\n-                  </target>\n-                </configuration>\n-              </execution>\n-            </executions>\n-          </plugin>\n-        </plugins>\n-      </build>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7d41696b4e7f3f0c2ee64fe9db867e4f0d79db26"}, "originalPosition": 221}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7d41696b4e7f3f0c2ee64fe9db867e4f0d79db26", "author": {"user": {"login": "normanmaurer", "name": "Norman Maurer"}}, "url": "https://github.com/netty/netty/commit/7d41696b4e7f3f0c2ee64fe9db867e4f0d79db26", "committedDate": "2020-12-17T14:21:35Z", "message": "Ensure we only register native methods once\n\nMotivation:\n\nWe need to ensure we only register native methods once as otherwise we may end up in an \"invalid\" state. The problem here was that before it was basically the responsibility the user of transport-native-unix-common to register the methods. This is error prone as there may be multiple users of these on the classpath at the same time.\n\nModifications:\n\n- Provide a way to init native lib without register the native methods of the provided classes. This is needed to be able to re-use functionality which is exposed to our internal native code\n- Use flatten plugin to correctly resolve classifier and so have the correct dependency\n- Call Unix.* method to ensure we register the methods correctly once\n- Include native lib as well in the native jars of unix-common\n\nResult:\n\nBe able to have multiple artifacts of the classpath that depends on the unix-common. Related to https://github.com/netty/netty-incubator-transport-io_uring/issues/15"}, "afterCommit": {"oid": "53724131d644b7eb05696fc6c5cf66964b267b3f", "author": {"user": {"login": "normanmaurer", "name": "Norman Maurer"}}, "url": "https://github.com/netty/netty/commit/53724131d644b7eb05696fc6c5cf66964b267b3f", "committedDate": "2020-12-17T14:28:27Z", "message": "Ensure we only register native methods once\n\nMotivation:\n\nWe need to ensure we only register native methods once as otherwise we may end up in an \"invalid\" state. The problem here was that before it was basically the responsibility the user of transport-native-unix-common to register the methods. This is error prone as there may be multiple users of these on the classpath at the same time.\n\nModifications:\n\n- Provide a way to init native lib without register the native methods of the provided classes. This is needed to be able to re-use functionality which is exposed to our internal native code\n- Use flatten plugin to correctly resolve classifier and so have the correct dependency\n- Call Unix.* method to ensure we register the methods correctly once\n- Include native lib as well in the native jars of unix-common\n\nResult:\n\nBe able to have multiple artifacts of the classpath that depends on the unix-common. Related to https://github.com/netty/netty-incubator-transport-io_uring/issues/15"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU0NzI4ODUw", "url": "https://github.com/netty/netty/pull/10876#pullrequestreview-554728850", "createdAt": "2020-12-17T15:43:12Z", "commit": {"oid": "746fa52373f010521ba8691938b2b1a5d60f7028"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "974ff29c94e9dd3fb570db13a23d9bba25ff5984", "author": {"user": {"login": "normanmaurer", "name": "Norman Maurer"}}, "url": "https://github.com/netty/netty/commit/974ff29c94e9dd3fb570db13a23d9bba25ff5984", "committedDate": "2020-12-18T08:41:01Z", "message": "Ensure we only register native methods once\n\nMotivation:\n\nWe need to ensure we only register native methods once as otherwise we may end up in an \"invalid\" state. The problem here was that before it was basically the responsibility the user of transport-native-unix-common to register the methods. This is error prone as there may be multiple users of these on the classpath at the same time.\n\nModifications:\n\n- Provide a way to init native lib without register the native methods of the provided classes. This is needed to be able to re-use functionality which is exposed to our internal native code\n- Use flatten plugin to correctly resolve classifier and so have the correct dependency\n- Call Unix.* method to ensure we register the methods correctly once\n- Include native lib as well in the native jars of unix-common\n\nResult:\n\nBe able to have multiple artifacts of the classpath that depends on the unix-common. Related to https://github.com/netty/netty-incubator-transport-io_uring/issues/15"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d653d29089722d33a0859e118bc49089a548d0b2", "author": {"user": {"login": "normanmaurer", "name": "Norman Maurer"}}, "url": "https://github.com/netty/netty/commit/d653d29089722d33a0859e118bc49089a548d0b2", "committedDate": "2020-12-18T06:51:28Z", "message": "Don't include internal headers and also cleanup dependencies"}, "afterCommit": {"oid": "974ff29c94e9dd3fb570db13a23d9bba25ff5984", "author": {"user": {"login": "normanmaurer", "name": "Norman Maurer"}}, "url": "https://github.com/netty/netty/commit/974ff29c94e9dd3fb570db13a23d9bba25ff5984", "committedDate": "2020-12-18T08:41:01Z", "message": "Ensure we only register native methods once\n\nMotivation:\n\nWe need to ensure we only register native methods once as otherwise we may end up in an \"invalid\" state. The problem here was that before it was basically the responsibility the user of transport-native-unix-common to register the methods. This is error prone as there may be multiple users of these on the classpath at the same time.\n\nModifications:\n\n- Provide a way to init native lib without register the native methods of the provided classes. This is needed to be able to re-use functionality which is exposed to our internal native code\n- Use flatten plugin to correctly resolve classifier and so have the correct dependency\n- Call Unix.* method to ensure we register the methods correctly once\n- Include native lib as well in the native jars of unix-common\n\nResult:\n\nBe able to have multiple artifacts of the classpath that depends on the unix-common. Related to https://github.com/netty/netty-incubator-transport-io_uring/issues/15"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4875, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}