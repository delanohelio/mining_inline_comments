{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzNDU4ODQw", "number": 10561, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNzowNDozOFrOEh-rOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMjoxMTo0NlrOEiFePQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDY1MzM3OnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/c/netty_io_uring_native.c", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNzowNDozOFrOHPl4Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNzoxODo1MlrOHPmT-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExMTI2Ng==", "bodyText": "shouldn't that better include the errno ?", "url": "https://github.com/netty/netty/pull/10561#discussion_r486111266", "createdAt": "2020-09-10T07:04:38Z", "author": {"login": "normanmaurer"}, "path": "transport-native-io_uring/src/main/c/netty_io_uring_native.c", "diffHunk": "@@ -276,28 +244,22 @@ static void netty_io_uring_ring_buffer_exit(JNIEnv *env, jclass class, jobject r\n \tclose(submissionQueueRingFd);\n }\n \n-static int nettyBlockingSocket(int domain, int type, int protocol) {\n-    return socket(domain, type, protocol);\n-}\n-\n static jobject netty_io_uring_setup(JNIEnv *env, jclass class1, jint entries, jobject submitCallback) {\n     struct io_uring_params p;\n     memset(&p, 0, sizeof(p));\n \n     int ring_fd = sys_io_uring_setup((int)entries, &p);\n \n-    //Todo\n     if (ring_fd < 0) {\n-      printf(\"RingFd error: %d\\n\", ring_fd);\n-      //throw Exception\n+     netty_unix_errors_throwRuntimeExceptionErrorNo(env, \"failed to create io_uring ring fd \", errno);\n       return NULL;\n     }\n     struct io_uring io_uring_ring;\n-    //Todo memset instead\n-    io_uring_ring.flags = 0;\n-    io_uring_ring.sq.sqe_tail = 0;\n-    io_uring_ring.sq.sqe_head = 0;\n-    setup_io_uring(ring_fd, &io_uring_ring, &p);\n+    int ret = setup_io_uring(ring_fd, &io_uring_ring, &p);\n+\n+    if (ret != 0) {\n+        netty_unix_errors_throwRuntimeExceptionErrorNo(env, \"failed to mmap io_uring ring buffer\", ret);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebe5149e3c088cbc67a5b7849454f75ad37c420f"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExNTg0OQ==", "bodyText": "yeah sure, however we already return a errno in setup_io_uring, I thought it would be more readable", "url": "https://github.com/netty/netty/pull/10561#discussion_r486115849", "createdAt": "2020-09-10T07:13:52Z", "author": {"login": "1Jo1"}, "path": "transport-native-io_uring/src/main/c/netty_io_uring_native.c", "diffHunk": "@@ -276,28 +244,22 @@ static void netty_io_uring_ring_buffer_exit(JNIEnv *env, jclass class, jobject r\n \tclose(submissionQueueRingFd);\n }\n \n-static int nettyBlockingSocket(int domain, int type, int protocol) {\n-    return socket(domain, type, protocol);\n-}\n-\n static jobject netty_io_uring_setup(JNIEnv *env, jclass class1, jint entries, jobject submitCallback) {\n     struct io_uring_params p;\n     memset(&p, 0, sizeof(p));\n \n     int ring_fd = sys_io_uring_setup((int)entries, &p);\n \n-    //Todo\n     if (ring_fd < 0) {\n-      printf(\"RingFd error: %d\\n\", ring_fd);\n-      //throw Exception\n+     netty_unix_errors_throwRuntimeExceptionErrorNo(env, \"failed to create io_uring ring fd \", errno);\n       return NULL;\n     }\n     struct io_uring io_uring_ring;\n-    //Todo memset instead\n-    io_uring_ring.flags = 0;\n-    io_uring_ring.sq.sqe_tail = 0;\n-    io_uring_ring.sq.sqe_head = 0;\n-    setup_io_uring(ring_fd, &io_uring_ring, &p);\n+    int ret = setup_io_uring(ring_fd, &io_uring_ring, &p);\n+\n+    if (ret != 0) {\n+        netty_unix_errors_throwRuntimeExceptionErrorNo(env, \"failed to mmap io_uring ring buffer\", ret);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExMTI2Ng=="}, "originalCommit": {"oid": "ebe5149e3c088cbc67a5b7849454f75ad37c420f"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExODM5NA==", "bodyText": "ah ok .... missed that. Then its fine :)", "url": "https://github.com/netty/netty/pull/10561#discussion_r486118394", "createdAt": "2020-09-10T07:18:52Z", "author": {"login": "normanmaurer"}, "path": "transport-native-io_uring/src/main/c/netty_io_uring_native.c", "diffHunk": "@@ -276,28 +244,22 @@ static void netty_io_uring_ring_buffer_exit(JNIEnv *env, jclass class, jobject r\n \tclose(submissionQueueRingFd);\n }\n \n-static int nettyBlockingSocket(int domain, int type, int protocol) {\n-    return socket(domain, type, protocol);\n-}\n-\n static jobject netty_io_uring_setup(JNIEnv *env, jclass class1, jint entries, jobject submitCallback) {\n     struct io_uring_params p;\n     memset(&p, 0, sizeof(p));\n \n     int ring_fd = sys_io_uring_setup((int)entries, &p);\n \n-    //Todo\n     if (ring_fd < 0) {\n-      printf(\"RingFd error: %d\\n\", ring_fd);\n-      //throw Exception\n+     netty_unix_errors_throwRuntimeExceptionErrorNo(env, \"failed to create io_uring ring fd \", errno);\n       return NULL;\n     }\n     struct io_uring io_uring_ring;\n-    //Todo memset instead\n-    io_uring_ring.flags = 0;\n-    io_uring_ring.sq.sqe_tail = 0;\n-    io_uring_ring.sq.sqe_head = 0;\n-    setup_io_uring(ring_fd, &io_uring_ring, &p);\n+    int ret = setup_io_uring(ring_fd, &io_uring_ring, &p);\n+\n+    if (ret != 0) {\n+        netty_unix_errors_throwRuntimeExceptionErrorNo(env, \"failed to mmap io_uring ring buffer\", ret);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExMTI2Ng=="}, "originalCommit": {"oid": "ebe5149e3c088cbc67a5b7849454f75ad37c420f"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDY1NDMwOnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/c/netty_io_uring_native.c", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNzowNDo1M1rOHPl4pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNzowNDo1M1rOHPl4pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExMTM5Nw==", "bodyText": "nit: \"missing space\"", "url": "https://github.com/netty/netty/pull/10561#discussion_r486111397", "createdAt": "2020-09-10T07:04:53Z", "author": {"login": "normanmaurer"}, "path": "transport-native-io_uring/src/main/c/netty_io_uring_native.c", "diffHunk": "@@ -276,28 +244,22 @@ static void netty_io_uring_ring_buffer_exit(JNIEnv *env, jclass class, jobject r\n \tclose(submissionQueueRingFd);\n }\n \n-static int nettyBlockingSocket(int domain, int type, int protocol) {\n-    return socket(domain, type, protocol);\n-}\n-\n static jobject netty_io_uring_setup(JNIEnv *env, jclass class1, jint entries, jobject submitCallback) {\n     struct io_uring_params p;\n     memset(&p, 0, sizeof(p));\n \n     int ring_fd = sys_io_uring_setup((int)entries, &p);\n \n-    //Todo\n     if (ring_fd < 0) {\n-      printf(\"RingFd error: %d\\n\", ring_fd);\n-      //throw Exception\n+     netty_unix_errors_throwRuntimeExceptionErrorNo(env, \"failed to create io_uring ring fd \", errno);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebe5149e3c088cbc67a5b7849454f75ad37c420f"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MDY1NTUyOnYy", "diffSide": "LEFT", "path": "transport-native-io_uring/src/main/c/netty_io_uring.h", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNzowNToxM1rOHPl5Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNzoyMDoxNFrOHPmW4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExMTU3OA==", "bodyText": "why this change ?", "url": "https://github.com/netty/netty/pull/10561#discussion_r486111578", "createdAt": "2020-09-10T07:05:13Z", "author": {"login": "normanmaurer"}, "path": "transport-native-io_uring/src/main/c/netty_io_uring.h", "diffHunk": "@@ -38,9 +38,6 @@ struct io_uring_sq {\n     unsigned *array;\n     struct io_uring_sqe *sqes;\n \n-    unsigned sqe_head;\n-    unsigned sqe_tail;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebe5149e3c088cbc67a5b7849454f75ad37c420f"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExOTEzOQ==", "bodyText": "we don't use and we only need io_uring_sq struct(which is on the stack) for storing kernel pointers for the RingBuffer creation", "url": "https://github.com/netty/netty/pull/10561#discussion_r486119139", "createdAt": "2020-09-10T07:20:14Z", "author": {"login": "1Jo1"}, "path": "transport-native-io_uring/src/main/c/netty_io_uring.h", "diffHunk": "@@ -38,9 +38,6 @@ struct io_uring_sq {\n     unsigned *array;\n     struct io_uring_sqe *sqes;\n \n-    unsigned sqe_head;\n-    unsigned sqe_tail;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjExMTU3OA=="}, "originalCommit": {"oid": "ebe5149e3c088cbc67a5b7849454f75ad37c420f"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MTc2NzAxOnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/c/netty_io_uring_native.c", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMjoxMTo0NlrOHPwi4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMjoxMTo0NlrOHPwi4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjI4NjA1MQ==", "bodyText": "you also need to add a return statement as the exception will be just put on the \"stack\" and picked up once the method returns. This works a bit different then throwing an exception from java layer :)\nif (ret != 0) {\n    netty_unix_errors_throwRuntimeExceptionErrorNo(env, \"failed to mmap io_uring ring buffer\", ret);\n    return NULL;\n}", "url": "https://github.com/netty/netty/pull/10561#discussion_r486286051", "createdAt": "2020-09-10T12:11:46Z", "author": {"login": "normanmaurer"}, "path": "transport-native-io_uring/src/main/c/netty_io_uring_native.c", "diffHunk": "@@ -276,28 +244,22 @@ static void netty_io_uring_ring_buffer_exit(JNIEnv *env, jclass class, jobject r\n \tclose(submissionQueueRingFd);\n }\n \n-static int nettyBlockingSocket(int domain, int type, int protocol) {\n-    return socket(domain, type, protocol);\n-}\n-\n static jobject netty_io_uring_setup(JNIEnv *env, jclass class1, jint entries, jobject submitCallback) {\n     struct io_uring_params p;\n     memset(&p, 0, sizeof(p));\n \n     int ring_fd = sys_io_uring_setup((int)entries, &p);\n \n-    //Todo\n     if (ring_fd < 0) {\n-      printf(\"RingFd error: %d\\n\", ring_fd);\n-      //throw Exception\n-      return NULL;\n+        netty_unix_errors_throwRuntimeExceptionErrorNo(env, \"failed to create io_uring ring fd \", errno);\n+        return NULL;\n     }\n     struct io_uring io_uring_ring;\n-    //Todo memset instead\n-    io_uring_ring.flags = 0;\n-    io_uring_ring.sq.sqe_tail = 0;\n-    io_uring_ring.sq.sqe_head = 0;\n-    setup_io_uring(ring_fd, &io_uring_ring, &p);\n+    int ret = setup_io_uring(ring_fd, &io_uring_ring, &p);\n+\n+    if (ret != 0) {\n+        netty_unix_errors_throwRuntimeExceptionErrorNo(env, \"failed to mmap io_uring ring buffer\", ret);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d37966cf336302e53b4a198f9e5397d0fa9be728"}, "originalPosition": 91}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3734, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}