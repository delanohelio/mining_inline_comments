{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2NjE0NjA3", "number": 10274, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwOTo1NTo1MlrOD7lA_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMToyMDozOVrOD7murA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzk5MDM5OnYy", "diffSide": "RIGHT", "path": "example/src/main/java/io/netty/example/stomp/websocket/StompWebSocketProtocolCodec.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwOTo1NTo1MlrOGT_Kaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMToxODo0M1rOGUB3rA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxMDk4Nw==", "bodyText": "@amizurov unfortunately this is a a breaking change as it changes the method signature of some methods", "url": "https://github.com/netty/netty/pull/10274#discussion_r423610987", "createdAt": "2020-05-12T09:55:52Z", "author": {"login": "normanmaurer"}, "path": "example/src/main/java/io/netty/example/stomp/websocket/StompWebSocketProtocolCodec.java", "diffHunk": "@@ -15,33 +15,34 @@\n  */\n package io.netty.example.stomp.websocket;\n \n-import io.netty.buffer.ByteBuf;\n import io.netty.channel.ChannelHandler.Sharable;\n import io.netty.channel.ChannelHandlerContext;\n import io.netty.handler.codec.MessageToMessageCodec;\n import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;\n import io.netty.handler.codec.http.websocketx.WebSocketFrame;\n+import io.netty.handler.codec.http.websocketx.WebSocketFrameAggregator;\n import io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;\n import io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler.HandshakeComplete;\n+import io.netty.handler.codec.stomp.StompSubframe;\n import io.netty.handler.codec.stomp.StompSubframeAggregator;\n import io.netty.handler.codec.stomp.StompSubframeDecoder;\n-import io.netty.handler.codec.stomp.StompSubframeEncoder;\n \n import java.util.List;\n \n @Sharable\n-public class StompWebSocketProtocolCodec extends MessageToMessageCodec<WebSocketFrame, ByteBuf> {\n+public class StompWebSocketProtocolCodec extends MessageToMessageCodec<WebSocketFrame, StompSubframe> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "389726f70d4df5833e2d9587758eedb1407e1207"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxMjY1NA==", "bodyText": "Yes but this is only example, maybe you can advice another way ?", "url": "https://github.com/netty/netty/pull/10274#discussion_r423612654", "createdAt": "2020-05-12T09:58:47Z", "author": {"login": "amizurov"}, "path": "example/src/main/java/io/netty/example/stomp/websocket/StompWebSocketProtocolCodec.java", "diffHunk": "@@ -15,33 +15,34 @@\n  */\n package io.netty.example.stomp.websocket;\n \n-import io.netty.buffer.ByteBuf;\n import io.netty.channel.ChannelHandler.Sharable;\n import io.netty.channel.ChannelHandlerContext;\n import io.netty.handler.codec.MessageToMessageCodec;\n import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;\n import io.netty.handler.codec.http.websocketx.WebSocketFrame;\n+import io.netty.handler.codec.http.websocketx.WebSocketFrameAggregator;\n import io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;\n import io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler.HandshakeComplete;\n+import io.netty.handler.codec.stomp.StompSubframe;\n import io.netty.handler.codec.stomp.StompSubframeAggregator;\n import io.netty.handler.codec.stomp.StompSubframeDecoder;\n-import io.netty.handler.codec.stomp.StompSubframeEncoder;\n \n import java.util.List;\n \n @Sharable\n-public class StompWebSocketProtocolCodec extends MessageToMessageCodec<WebSocketFrame, ByteBuf> {\n+public class StompWebSocketProtocolCodec extends MessageToMessageCodec<WebSocketFrame, StompSubframe> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxMDk4Nw=="}, "originalCommit": {"oid": "389726f70d4df5833e2d9587758eedb1407e1207"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1NTM0MA==", "bodyText": "ah sorry missed that... Changing an example is of course fine.", "url": "https://github.com/netty/netty/pull/10274#discussion_r423655340", "createdAt": "2020-05-12T11:18:43Z", "author": {"login": "normanmaurer"}, "path": "example/src/main/java/io/netty/example/stomp/websocket/StompWebSocketProtocolCodec.java", "diffHunk": "@@ -15,33 +15,34 @@\n  */\n package io.netty.example.stomp.websocket;\n \n-import io.netty.buffer.ByteBuf;\n import io.netty.channel.ChannelHandler.Sharable;\n import io.netty.channel.ChannelHandlerContext;\n import io.netty.handler.codec.MessageToMessageCodec;\n import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;\n import io.netty.handler.codec.http.websocketx.WebSocketFrame;\n+import io.netty.handler.codec.http.websocketx.WebSocketFrameAggregator;\n import io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;\n import io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler.HandshakeComplete;\n+import io.netty.handler.codec.stomp.StompSubframe;\n import io.netty.handler.codec.stomp.StompSubframeAggregator;\n import io.netty.handler.codec.stomp.StompSubframeDecoder;\n-import io.netty.handler.codec.stomp.StompSubframeEncoder;\n \n import java.util.List;\n \n @Sharable\n-public class StompWebSocketProtocolCodec extends MessageToMessageCodec<WebSocketFrame, ByteBuf> {\n+public class StompWebSocketProtocolCodec extends MessageToMessageCodec<WebSocketFrame, StompSubframe> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxMDk4Nw=="}, "originalCommit": {"oid": "389726f70d4df5833e2d9587758eedb1407e1207"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzODI3MTE2OnYy", "diffSide": "RIGHT", "path": "example/src/main/java/io/netty/example/stomp/websocket/StompWebSocketFrameEncoder.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMToyMDozOVrOGUB7yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDoxOToxN1rOGd0A2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1NjM5Mg==", "bodyText": "hmm... is this really correct for the case where msg isn't an instance of StompFrame  ? Seems like you may loose items here then.", "url": "https://github.com/netty/netty/pull/10274#discussion_r423656392", "createdAt": "2020-05-12T11:20:39Z", "author": {"login": "normanmaurer"}, "path": "example/src/main/java/io/netty/example/stomp/websocket/StompWebSocketFrameEncoder.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.example.stomp.websocket;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.CompositeByteBuf;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame;\n+import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;\n+import io.netty.handler.codec.http.websocketx.WebSocketFrame;\n+import io.netty.handler.codec.stomp.LastStompContentSubframe;\n+import io.netty.handler.codec.stomp.StompFrame;\n+import io.netty.handler.codec.stomp.StompHeadersSubframe;\n+import io.netty.handler.codec.stomp.StompSubframe;\n+import io.netty.handler.codec.stomp.StompSubframeEncoder;\n+\n+import java.util.List;\n+\n+public class StompWebSocketFrameEncoder extends StompSubframeEncoder {\n+\n+    @Override\n+    public void encode(ChannelHandlerContext ctx, StompSubframe msg, List<Object> out) throws Exception {\n+        super.encode(ctx, msg, out);\n+\n+        if (out.isEmpty()) {\n+            return;\n+        }\n+\n+        final WebSocketFrame webSocketFrame;\n+        if (msg instanceof StompFrame) {\n+            if (out.size() == 1) {\n+                webSocketFrame = new TextWebSocketFrame(getFirst(out));\n+            } else {\n+                CompositeByteBuf content = ctx.alloc().compositeBuffer(out.size());\n+                for (Object byteBuf : out) {\n+                    content.addComponent(true, (ByteBuf) byteBuf);\n+                }\n+                webSocketFrame = new TextWebSocketFrame(content);\n+            }\n+        } else if (msg instanceof StompHeadersSubframe) {\n+            webSocketFrame = new TextWebSocketFrame(false, 0, getFirst(out));\n+        } else if (msg instanceof LastStompContentSubframe) {\n+            webSocketFrame = new ContinuationWebSocketFrame(true, 0, getFirst(out));\n+        } else {\n+            webSocketFrame = new ContinuationWebSocketFrame(false, 0, getFirst(out));\n+        }\n+\n+        out.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "389726f70d4df5833e2d9587758eedb1407e1207"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1OTQ0MQ==", "bodyText": "We use this encoder inside StompWebSocketProtocolCodec so we accept only StompSubframe and don't put it to pipeline, just delegate.", "url": "https://github.com/netty/netty/pull/10274#discussion_r423659441", "createdAt": "2020-05-12T11:26:30Z", "author": {"login": "amizurov"}, "path": "example/src/main/java/io/netty/example/stomp/websocket/StompWebSocketFrameEncoder.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.example.stomp.websocket;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.CompositeByteBuf;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame;\n+import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;\n+import io.netty.handler.codec.http.websocketx.WebSocketFrame;\n+import io.netty.handler.codec.stomp.LastStompContentSubframe;\n+import io.netty.handler.codec.stomp.StompFrame;\n+import io.netty.handler.codec.stomp.StompHeadersSubframe;\n+import io.netty.handler.codec.stomp.StompSubframe;\n+import io.netty.handler.codec.stomp.StompSubframeEncoder;\n+\n+import java.util.List;\n+\n+public class StompWebSocketFrameEncoder extends StompSubframeEncoder {\n+\n+    @Override\n+    public void encode(ChannelHandlerContext ctx, StompSubframe msg, List<Object> out) throws Exception {\n+        super.encode(ctx, msg, out);\n+\n+        if (out.isEmpty()) {\n+            return;\n+        }\n+\n+        final WebSocketFrame webSocketFrame;\n+        if (msg instanceof StompFrame) {\n+            if (out.size() == 1) {\n+                webSocketFrame = new TextWebSocketFrame(getFirst(out));\n+            } else {\n+                CompositeByteBuf content = ctx.alloc().compositeBuffer(out.size());\n+                for (Object byteBuf : out) {\n+                    content.addComponent(true, (ByteBuf) byteBuf);\n+                }\n+                webSocketFrame = new TextWebSocketFrame(content);\n+            }\n+        } else if (msg instanceof StompHeadersSubframe) {\n+            webSocketFrame = new TextWebSocketFrame(false, 0, getFirst(out));\n+        } else if (msg instanceof LastStompContentSubframe) {\n+            webSocketFrame = new ContinuationWebSocketFrame(true, 0, getFirst(out));\n+        } else {\n+            webSocketFrame = new ContinuationWebSocketFrame(false, 0, getFirst(out));\n+        }\n+\n+        out.clear();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1NjM5Mg=="}, "originalCommit": {"oid": "389726f70d4df5833e2d9587758eedb1407e1207"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM4MDE2Nw==", "bodyText": "still this seems very error-prone. At least we should add an assert imho", "url": "https://github.com/netty/netty/pull/10274#discussion_r424380167", "createdAt": "2020-05-13T11:58:22Z", "author": {"login": "normanmaurer"}, "path": "example/src/main/java/io/netty/example/stomp/websocket/StompWebSocketFrameEncoder.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.example.stomp.websocket;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.CompositeByteBuf;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame;\n+import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;\n+import io.netty.handler.codec.http.websocketx.WebSocketFrame;\n+import io.netty.handler.codec.stomp.LastStompContentSubframe;\n+import io.netty.handler.codec.stomp.StompFrame;\n+import io.netty.handler.codec.stomp.StompHeadersSubframe;\n+import io.netty.handler.codec.stomp.StompSubframe;\n+import io.netty.handler.codec.stomp.StompSubframeEncoder;\n+\n+import java.util.List;\n+\n+public class StompWebSocketFrameEncoder extends StompSubframeEncoder {\n+\n+    @Override\n+    public void encode(ChannelHandlerContext ctx, StompSubframe msg, List<Object> out) throws Exception {\n+        super.encode(ctx, msg, out);\n+\n+        if (out.isEmpty()) {\n+            return;\n+        }\n+\n+        final WebSocketFrame webSocketFrame;\n+        if (msg instanceof StompFrame) {\n+            if (out.size() == 1) {\n+                webSocketFrame = new TextWebSocketFrame(getFirst(out));\n+            } else {\n+                CompositeByteBuf content = ctx.alloc().compositeBuffer(out.size());\n+                for (Object byteBuf : out) {\n+                    content.addComponent(true, (ByteBuf) byteBuf);\n+                }\n+                webSocketFrame = new TextWebSocketFrame(content);\n+            }\n+        } else if (msg instanceof StompHeadersSubframe) {\n+            webSocketFrame = new TextWebSocketFrame(false, 0, getFirst(out));\n+        } else if (msg instanceof LastStompContentSubframe) {\n+            webSocketFrame = new ContinuationWebSocketFrame(true, 0, getFirst(out));\n+        } else {\n+            webSocketFrame = new ContinuationWebSocketFrame(false, 0, getFirst(out));\n+        }\n+\n+        out.clear();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1NjM5Mg=="}, "originalCommit": {"oid": "389726f70d4df5833e2d9587758eedb1407e1207"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM5NjI3OQ==", "bodyText": "Sorry could you please explain what kind of assertion you mean ?", "url": "https://github.com/netty/netty/pull/10274#discussion_r424396279", "createdAt": "2020-05-13T12:27:05Z", "author": {"login": "amizurov"}, "path": "example/src/main/java/io/netty/example/stomp/websocket/StompWebSocketFrameEncoder.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.example.stomp.websocket;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.CompositeByteBuf;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame;\n+import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;\n+import io.netty.handler.codec.http.websocketx.WebSocketFrame;\n+import io.netty.handler.codec.stomp.LastStompContentSubframe;\n+import io.netty.handler.codec.stomp.StompFrame;\n+import io.netty.handler.codec.stomp.StompHeadersSubframe;\n+import io.netty.handler.codec.stomp.StompSubframe;\n+import io.netty.handler.codec.stomp.StompSubframeEncoder;\n+\n+import java.util.List;\n+\n+public class StompWebSocketFrameEncoder extends StompSubframeEncoder {\n+\n+    @Override\n+    public void encode(ChannelHandlerContext ctx, StompSubframe msg, List<Object> out) throws Exception {\n+        super.encode(ctx, msg, out);\n+\n+        if (out.isEmpty()) {\n+            return;\n+        }\n+\n+        final WebSocketFrame webSocketFrame;\n+        if (msg instanceof StompFrame) {\n+            if (out.size() == 1) {\n+                webSocketFrame = new TextWebSocketFrame(getFirst(out));\n+            } else {\n+                CompositeByteBuf content = ctx.alloc().compositeBuffer(out.size());\n+                for (Object byteBuf : out) {\n+                    content.addComponent(true, (ByteBuf) byteBuf);\n+                }\n+                webSocketFrame = new TextWebSocketFrame(content);\n+            }\n+        } else if (msg instanceof StompHeadersSubframe) {\n+            webSocketFrame = new TextWebSocketFrame(false, 0, getFirst(out));\n+        } else if (msg instanceof LastStompContentSubframe) {\n+            webSocketFrame = new ContinuationWebSocketFrame(true, 0, getFirst(out));\n+        } else {\n+            webSocketFrame = new ContinuationWebSocketFrame(false, 0, getFirst(out));\n+        }\n+\n+        out.clear();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1NjM5Mg=="}, "originalCommit": {"oid": "389726f70d4df5833e2d9587758eedb1407e1207"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkxNDA3NA==", "bodyText": "never mind", "url": "https://github.com/netty/netty/pull/10274#discussion_r433914074", "createdAt": "2020-06-02T14:19:17Z", "author": {"login": "normanmaurer"}, "path": "example/src/main/java/io/netty/example/stomp/websocket/StompWebSocketFrameEncoder.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.example.stomp.websocket;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.CompositeByteBuf;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame;\n+import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;\n+import io.netty.handler.codec.http.websocketx.WebSocketFrame;\n+import io.netty.handler.codec.stomp.LastStompContentSubframe;\n+import io.netty.handler.codec.stomp.StompFrame;\n+import io.netty.handler.codec.stomp.StompHeadersSubframe;\n+import io.netty.handler.codec.stomp.StompSubframe;\n+import io.netty.handler.codec.stomp.StompSubframeEncoder;\n+\n+import java.util.List;\n+\n+public class StompWebSocketFrameEncoder extends StompSubframeEncoder {\n+\n+    @Override\n+    public void encode(ChannelHandlerContext ctx, StompSubframe msg, List<Object> out) throws Exception {\n+        super.encode(ctx, msg, out);\n+\n+        if (out.isEmpty()) {\n+            return;\n+        }\n+\n+        final WebSocketFrame webSocketFrame;\n+        if (msg instanceof StompFrame) {\n+            if (out.size() == 1) {\n+                webSocketFrame = new TextWebSocketFrame(getFirst(out));\n+            } else {\n+                CompositeByteBuf content = ctx.alloc().compositeBuffer(out.size());\n+                for (Object byteBuf : out) {\n+                    content.addComponent(true, (ByteBuf) byteBuf);\n+                }\n+                webSocketFrame = new TextWebSocketFrame(content);\n+            }\n+        } else if (msg instanceof StompHeadersSubframe) {\n+            webSocketFrame = new TextWebSocketFrame(false, 0, getFirst(out));\n+        } else if (msg instanceof LastStompContentSubframe) {\n+            webSocketFrame = new ContinuationWebSocketFrame(true, 0, getFirst(out));\n+        } else {\n+            webSocketFrame = new ContinuationWebSocketFrame(false, 0, getFirst(out));\n+        }\n+\n+        out.clear();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1NjM5Mg=="}, "originalCommit": {"oid": "389726f70d4df5833e2d9587758eedb1407e1207"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3445, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}