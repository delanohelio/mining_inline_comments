{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY3NjI3NzE1", "number": 9970, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNTo1OToyMlrODcruyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxODoyNTozOVrODhobig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDAzMjA4OnYy", "diffSide": "LEFT", "path": "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectAggregator.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNTo1OToyMlrOFk2h2g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNzowNDoyN1rOFk41MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE4NjQ1OA==", "bodyText": "I presume this is the result of the close call unlinking so throwing the exception doesn't do what you think it would at that point. I'd guess this is a relatively common pattern.", "url": "https://github.com/netty/netty/pull/9970#discussion_r374186458", "createdAt": "2020-02-03T15:59:22Z", "author": {"login": "bryce-anderson"}, "path": "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectAggregator.java", "diffHunk": "@@ -266,13 +266,26 @@ protected void handleOversizedMessage(final ChannelHandlerContext ctx, HttpMessa\n                 });\n             }\n         } else if (oversized instanceof HttpResponse) {\n-            ctx.close();\n-            throw new TooLongFrameException(\"Response entity too large: \" + oversized);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58cd7c304a88ee1552e329fcb3b3bbcd71b3065c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIyNDE3Ng==", "bodyText": "yep thats the result... lucky enough it is kind of easy to fix and understand why it happens.", "url": "https://github.com/netty/netty/pull/9970#discussion_r374224176", "createdAt": "2020-02-03T17:04:27Z", "author": {"login": "normanmaurer"}, "path": "codec-http/src/main/java/io/netty/handler/codec/http/HttpObjectAggregator.java", "diffHunk": "@@ -266,13 +266,26 @@ protected void handleOversizedMessage(final ChannelHandlerContext ctx, HttpMessa\n                 });\n             }\n         } else if (oversized instanceof HttpResponse) {\n-            ctx.close();\n-            throw new TooLongFrameException(\"Response entity too large: \" + oversized);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE4NjQ1OA=="}, "originalCommit": {"oid": "58cd7c304a88ee1552e329fcb3b3bbcd71b3065c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNDA4NzA5OnYy", "diffSide": "RIGHT", "path": "transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNjoxNDozMFrOFk3EuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwODo1MTozNVrOFm2CAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE5NTM4NA==", "bodyText": "This might deserve a different name: ChannelHandler has a method handlerRemoved which make it sound like this method fires a handler removed event, not an exception.", "url": "https://github.com/netty/netty/pull/9970#discussion_r374195384", "createdAt": "2020-02-03T16:14:30Z", "author": {"login": "bryce-anderson"}, "path": "transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java", "diffHunk": "@@ -76,6 +81,22 @@\n         this.handler = handler;\n     }\n \n+    private static void failRemoved(DefaultChannelHandlerContext ctx, ChannelPromise promise) {\n+        promise.setFailure(newRemovedException(ctx, null));\n+    }\n+\n+    private void fireHandlerRemoved() {\n+        fireHandlerRemoved(null);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "58cd7c304a88ee1552e329fcb3b3bbcd71b3065c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDIyNDI1Ng==", "bodyText": "good point.", "url": "https://github.com/netty/netty/pull/9970#discussion_r374224256", "createdAt": "2020-02-03T17:04:37Z", "author": {"login": "normanmaurer"}, "path": "transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java", "diffHunk": "@@ -76,6 +81,22 @@\n         this.handler = handler;\n     }\n \n+    private static void failRemoved(DefaultChannelHandlerContext ctx, ChannelPromise promise) {\n+        promise.setFailure(newRemovedException(ctx, null));\n+    }\n+\n+    private void fireHandlerRemoved() {\n+        fireHandlerRemoved(null);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE5NTM4NA=="}, "originalCommit": {"oid": "58cd7c304a88ee1552e329fcb3b3bbcd71b3065c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTkwNTQ4OA==", "bodyText": "Are you still interested in changing the name?", "url": "https://github.com/netty/netty/pull/9970#discussion_r375905488", "createdAt": "2020-02-06T15:33:31Z", "author": {"login": "bryce-anderson"}, "path": "transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java", "diffHunk": "@@ -76,6 +81,22 @@\n         this.handler = handler;\n     }\n \n+    private static void failRemoved(DefaultChannelHandlerContext ctx, ChannelPromise promise) {\n+        promise.setFailure(newRemovedException(ctx, null));\n+    }\n+\n+    private void fireHandlerRemoved() {\n+        fireHandlerRemoved(null);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE5NTM4NA=="}, "originalCommit": {"oid": "58cd7c304a88ee1552e329fcb3b3bbcd71b3065c"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI3NTQ1Nw==", "bodyText": "yep...", "url": "https://github.com/netty/netty/pull/9970#discussion_r376275457", "createdAt": "2020-02-07T08:51:35Z", "author": {"login": "normanmaurer"}, "path": "transport/src/main/java/io/netty/channel/DefaultChannelHandlerContext.java", "diffHunk": "@@ -76,6 +81,22 @@\n         this.handler = handler;\n     }\n \n+    private static void failRemoved(DefaultChannelHandlerContext ctx, ChannelPromise promise) {\n+        promise.setFailure(newRemovedException(ctx, null));\n+    }\n+\n+    private void fireHandlerRemoved() {\n+        fireHandlerRemoved(null);\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE5NTM4NA=="}, "originalCommit": {"oid": "58cd7c304a88ee1552e329fcb3b3bbcd71b3065c"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTQyODg0OnYy", "diffSide": "RIGHT", "path": "common/src/main/java/io/netty/util/concurrent/DefaultPromise.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNzozNDo0OFrOFmj_Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOTowMTowMFrOFpLqeg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk3OTc3OQ==", "bodyText": "I'd feel better with this if this method was still protected. Why was it made public in Netty 5?", "url": "https://github.com/netty/netty/pull/9970#discussion_r375979779", "createdAt": "2020-02-06T17:34:48Z", "author": {"login": "ejona86"}, "path": "common/src/main/java/io/netty/util/concurrent/DefaultPromise.java", "diffHunk": "@@ -440,7 +440,7 @@ protected StringBuilder toStringBuilder() {\n      * @return The executor used to notify listeners when this promise is complete.\n      */\n     @Override\n-    public final EventExecutor executor() {\n+    public EventExecutor executor() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "211a3be1cfe558a3f0aa1b408cc19d355927c5cb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI3NjY4MQ==", "bodyText": "@ejona86 I will need to have a look. That said this has nothing todo with this PR and so I would like to handle this as a followup.", "url": "https://github.com/netty/netty/pull/9970#discussion_r376276681", "createdAt": "2020-02-07T08:54:31Z", "author": {"login": "normanmaurer"}, "path": "common/src/main/java/io/netty/util/concurrent/DefaultPromise.java", "diffHunk": "@@ -440,7 +440,7 @@ protected StringBuilder toStringBuilder() {\n      * @return The executor used to notify listeners when this promise is complete.\n      */\n     @Override\n-    public final EventExecutor executor() {\n+    public EventExecutor executor() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk3OTc3OQ=="}, "originalCommit": {"oid": "211a3be1cfe558a3f0aa1b408cc19d355927c5cb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ0ODkzMw==", "bodyText": "It isn't unrelated because the semantics are changing. I'd totally believe some code would (properly) be assuming this return value never changes. Because it is public the \"blast radius\" is harder to determine, not just classes in the Promise hierarchy. We sort of need to audit all callers to make sure they are safe with this change.", "url": "https://github.com/netty/netty/pull/9970#discussion_r378448933", "createdAt": "2020-02-12T18:58:07Z", "author": {"login": "ejona86"}, "path": "common/src/main/java/io/netty/util/concurrent/DefaultPromise.java", "diffHunk": "@@ -440,7 +440,7 @@ protected StringBuilder toStringBuilder() {\n      * @return The executor used to notify listeners when this promise is complete.\n      */\n     @Override\n-    public final EventExecutor executor() {\n+    public EventExecutor executor() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk3OTc3OQ=="}, "originalCommit": {"oid": "211a3be1cfe558a3f0aa1b408cc19d355927c5cb"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcyNzAzNA==", "bodyText": "fixed this...", "url": "https://github.com/netty/netty/pull/9970#discussion_r378727034", "createdAt": "2020-02-13T09:01:00Z", "author": {"login": "normanmaurer"}, "path": "common/src/main/java/io/netty/util/concurrent/DefaultPromise.java", "diffHunk": "@@ -440,7 +440,7 @@ protected StringBuilder toStringBuilder() {\n      * @return The executor used to notify listeners when this promise is complete.\n      */\n     @Override\n-    public final EventExecutor executor() {\n+    public EventExecutor executor() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk3OTc3OQ=="}, "originalCommit": {"oid": "211a3be1cfe558a3f0aa1b408cc19d355927c5cb"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTQ1MjAyOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/ssl/SslHandler.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNzo0MTo0OVrOFmkNSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwOTowMDo0M1rOFpLp8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4MzQzNQ==", "bodyText": "Ewww... This nastiness was mostly pre-existing, but this does worry me. I'm not fully confident DefaultPromise would safely handle this changing, although it does seem like it is mostly fine. It doesn't look like checkDeadlock() uses this method, so that would be broken at least.\nI don't really have any suggestions how to improve this though.", "url": "https://github.com/netty/netty/pull/9970#discussion_r375983435", "createdAt": "2020-02-06T17:41:49Z", "author": {"login": "ejona86"}, "path": "handler/src/main/java/io/netty/handler/ssl/SslHandler.java", "diffHunk": "@@ -2207,5 +2221,13 @@ protected void checkDeadLock() {\n             }\n             checkDeadLock(ctx.executor());\n         }\n+\n+        @Override\n+        public EventExecutor executor() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "211a3be1cfe558a3f0aa1b408cc19d355927c5cb"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI3NTY5NQ==", "bodyText": "@ejona86 yeah this is pre-existing. I would just \"suck it up\" for now and if we can improve it we can do it later on.", "url": "https://github.com/netty/netty/pull/9970#discussion_r376275695", "createdAt": "2020-02-07T08:52:15Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/ssl/SslHandler.java", "diffHunk": "@@ -2207,5 +2221,13 @@ protected void checkDeadLock() {\n             }\n             checkDeadLock(ctx.executor());\n         }\n+\n+        @Override\n+        public EventExecutor executor() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4MzQzNQ=="}, "originalCommit": {"oid": "211a3be1cfe558a3f0aa1b408cc19d355927c5cb"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ0NzE3Ng==", "bodyText": "This is making things worse. As I mentioned, this change breaks checkDeadlock().", "url": "https://github.com/netty/netty/pull/9970#discussion_r378447176", "createdAt": "2020-02-12T18:55:01Z", "author": {"login": "ejona86"}, "path": "handler/src/main/java/io/netty/handler/ssl/SslHandler.java", "diffHunk": "@@ -2207,5 +2221,13 @@ protected void checkDeadLock() {\n             }\n             checkDeadLock(ctx.executor());\n         }\n+\n+        @Override\n+        public EventExecutor executor() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4MzQzNQ=="}, "originalCommit": {"oid": "211a3be1cfe558a3f0aa1b408cc19d355927c5cb"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ0OTQxOQ==", "bodyText": "(I'd be fine if you just fix checkDeadlock() and verify the rest of DefaultPromise is safe if the executor changes. That can be quite a subtle audit though.)", "url": "https://github.com/netty/netty/pull/9970#discussion_r378449419", "createdAt": "2020-02-12T18:59:04Z", "author": {"login": "ejona86"}, "path": "handler/src/main/java/io/netty/handler/ssl/SslHandler.java", "diffHunk": "@@ -2207,5 +2221,13 @@ protected void checkDeadLock() {\n             }\n             checkDeadLock(ctx.executor());\n         }\n+\n+        @Override\n+        public EventExecutor executor() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4MzQzNQ=="}, "originalCommit": {"oid": "211a3be1cfe558a3f0aa1b408cc19d355927c5cb"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcyNjg5Nw==", "bodyText": "I reverted this change.", "url": "https://github.com/netty/netty/pull/9970#discussion_r378726897", "createdAt": "2020-02-13T09:00:43Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/ssl/SslHandler.java", "diffHunk": "@@ -2207,5 +2221,13 @@ protected void checkDeadLock() {\n             }\n             checkDeadLock(ctx.executor());\n         }\n+\n+        @Override\n+        public EventExecutor executor() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4MzQzNQ=="}, "originalCommit": {"oid": "211a3be1cfe558a3f0aa1b408cc19d355927c5cb"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTQ1ODk4OnYy", "diffSide": "LEFT", "path": "testsuite-http2/src/main/java/io/netty/testsuite/http2/Http2ServerInitializer.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNzo0Mzo0OFrOFmkRaQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODo1NDowM1rOFo6jKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4NDQ4OQ==", "bodyText": "It seems like replace() has become useless. Maybe it should be removed in Netty 5 as well.", "url": "https://github.com/netty/netty/pull/9970#discussion_r375984489", "createdAt": "2020-02-06T17:43:48Z", "author": {"login": "ejona86"}, "path": "testsuite-http2/src/main/java/io/netty/testsuite/http2/Http2ServerInitializer.java", "diffHunk": "@@ -85,8 +85,9 @@ protected void messageReceived(ChannelHandlerContext ctx, HttpMessage msg) throw\n                 ChannelPipeline pipeline = ctx.pipeline();\n                 ChannelHandlerContext thisCtx = pipeline.context(this);\n                 pipeline.addAfter(thisCtx.name(), null, new HelloWorldHttp1Handler(\"Direct. No Upgrade Attempted.\"));\n-                pipeline.replace(this, null, new HttpObjectAggregator(maxHttpContentLength));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "211a3be1cfe558a3f0aa1b408cc19d355927c5cb"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI3NTkwMA==", "bodyText": "@ejona86 it is not really useless as long as the context is not used after replace is called.", "url": "https://github.com/netty/netty/pull/9970#discussion_r376275900", "createdAt": "2020-02-07T08:52:46Z", "author": {"login": "normanmaurer"}, "path": "testsuite-http2/src/main/java/io/netty/testsuite/http2/Http2ServerInitializer.java", "diffHunk": "@@ -85,8 +85,9 @@ protected void messageReceived(ChannelHandlerContext ctx, HttpMessage msg) throw\n                 ChannelPipeline pipeline = ctx.pipeline();\n                 ChannelHandlerContext thisCtx = pipeline.context(this);\n                 pipeline.addAfter(thisCtx.name(), null, new HelloWorldHttp1Handler(\"Direct. No Upgrade Attempted.\"));\n-                pipeline.replace(this, null, new HttpObjectAggregator(maxHttpContentLength));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4NDQ4OQ=="}, "originalCommit": {"oid": "211a3be1cfe558a3f0aa1b408cc19d355927c5cb"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ0NjYzNA==", "bodyText": "We can look through code later and see how often replace can be used, but I almost always see it with a read, write, or event following.", "url": "https://github.com/netty/netty/pull/9970#discussion_r378446634", "createdAt": "2020-02-12T18:54:03Z", "author": {"login": "ejona86"}, "path": "testsuite-http2/src/main/java/io/netty/testsuite/http2/Http2ServerInitializer.java", "diffHunk": "@@ -85,8 +85,9 @@ protected void messageReceived(ChannelHandlerContext ctx, HttpMessage msg) throw\n                 ChannelPipeline pipeline = ctx.pipeline();\n                 ChannelHandlerContext thisCtx = pipeline.context(this);\n                 pipeline.addAfter(thisCtx.name(), null, new HelloWorldHttp1Handler(\"Direct. No Upgrade Attempted.\"));\n-                pipeline.replace(this, null, new HttpObjectAggregator(maxHttpContentLength));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4NDQ4OQ=="}, "originalCommit": {"oid": "211a3be1cfe558a3f0aa1b408cc19d355927c5cb"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNTQ4OTc2OnYy", "diffSide": "RIGHT", "path": "transport/src/main/java/io/netty/channel/AbstractChannel.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxNzo1MzoyOFrOFmkkzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxODo0NDo0MVrOFo6PXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4OTQ1Mw==", "bodyText": "This doesn't seem right. Shouldn't the channel+pipeline remain in-place? I thought we were still going to allow deregistering and re-registering on the same event loop.", "url": "https://github.com/netty/netty/pull/9970#discussion_r375989453", "createdAt": "2020-02-06T17:53:28Z", "author": {"login": "ejona86"}, "path": "transport/src/main/java/io/netty/channel/AbstractChannel.java", "diffHunk": "@@ -775,12 +776,25 @@ private void deregister(final ChannelPromise promise, final boolean fireChannelI\n                         pipeline.fireChannelInactive();\n                     }\n                     // Some transports like local and AIO does not allow the deregistration of\n-                    // an open channel.  Their doDeregister() calls close(). Consequently,\n+                    // an open channel. Their doDeregister() calls close(). Consequently,\n                     // close() calls deregister() again - no need to fire channelUnregistered, so check\n                     // if it was registered.\n                     if (registered) {\n                         registered = false;\n                         pipeline.fireChannelUnregistered();\n+\n+                        if (!isOpen()) {\n+                            // Remove all handlers from the ChannelPipeline. This is needed to ensure", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "211a3be1cfe558a3f0aa1b408cc19d355927c5cb"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjI3NjA3Ng==", "bodyText": "@ejona86 this is exactly the same as we did before in DefaultChannelPipeline. I just move the code.", "url": "https://github.com/netty/netty/pull/9970#discussion_r376276076", "createdAt": "2020-02-07T08:53:07Z", "author": {"login": "normanmaurer"}, "path": "transport/src/main/java/io/netty/channel/AbstractChannel.java", "diffHunk": "@@ -775,12 +776,25 @@ private void deregister(final ChannelPromise promise, final boolean fireChannelI\n                         pipeline.fireChannelInactive();\n                     }\n                     // Some transports like local and AIO does not allow the deregistration of\n-                    // an open channel.  Their doDeregister() calls close(). Consequently,\n+                    // an open channel. Their doDeregister() calls close(). Consequently,\n                     // close() calls deregister() again - no need to fire channelUnregistered, so check\n                     // if it was registered.\n                     if (registered) {\n                         registered = false;\n                         pipeline.fireChannelUnregistered();\n+\n+                        if (!isOpen()) {\n+                            // Remove all handlers from the ChannelPipeline. This is needed to ensure", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4OTQ1Mw=="}, "originalCommit": {"oid": "211a3be1cfe558a3f0aa1b408cc19d355927c5cb"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODQ0MTU2NA==", "bodyText": "Oh, I see. This only happens if the Channel is closed. That looks fine.", "url": "https://github.com/netty/netty/pull/9970#discussion_r378441564", "createdAt": "2020-02-12T18:44:41Z", "author": {"login": "ejona86"}, "path": "transport/src/main/java/io/netty/channel/AbstractChannel.java", "diffHunk": "@@ -775,12 +776,25 @@ private void deregister(final ChannelPromise promise, final boolean fireChannelI\n                         pipeline.fireChannelInactive();\n                     }\n                     // Some transports like local and AIO does not allow the deregistration of\n-                    // an open channel.  Their doDeregister() calls close(). Consequently,\n+                    // an open channel. Their doDeregister() calls close(). Consequently,\n                     // close() calls deregister() again - no need to fire channelUnregistered, so check\n                     // if it was registered.\n                     if (registered) {\n                         registered = false;\n                         pipeline.fireChannelUnregistered();\n+\n+                        if (!isOpen()) {\n+                            // Remove all handlers from the ChannelPipeline. This is needed to ensure", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTk4OTQ1Mw=="}, "originalCommit": {"oid": "211a3be1cfe558a3f0aa1b408cc19d355927c5cb"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NTkyMDEwOnYy", "diffSide": "RIGHT", "path": "transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxODoyNTozOVrOFseRYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQxOToxMDowMlrOFtsaRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE3NzYzMg==", "bodyText": "How does this compile?", "url": "https://github.com/netty/netty/pull/9970#discussion_r382177632", "createdAt": "2020-02-20T18:25:39Z", "author": {"login": "carl-mastrangelo"}, "path": "transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java", "diffHunk": "@@ -777,19 +720,24 @@ public ChannelHandler removeLast() {\n             assert ctx != null;\n \n             if (!inEventLoop) {\n-                try {\n-                    executor.execute(() -> remove0(ctx));\n-                    return ctx.handler();\n-                } catch (Throwable cause) {\n-                    handlers.add(idx, ctx);\n-                    throw cause;\n-                }\n+                return scheduleRemove(idx, ctx);\n             }\n         }\n         remove0(ctx);\n         return ctx.handler();\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    private <T extends ChannelHandler> T scheduleRemove(int idx, DefaultChannelHandlerContext ctx) {\n+        try {\n+            ctx.executor().execute(() -> remove0(ctx));\n+            return (T) ctx.handler();\n+        } catch (Throwable cause) {\n+            handlers.add(idx, ctx);\n+            throw cause;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2bbb2e1e2e6141da08dda9bd654e60e64c58fa78"}, "originalPosition": 358}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzQ1Nzg2MA==", "bodyText": "@carl-mastrangelo the compiler is smart enough when using Java8 to understand that the code in the try block can only throw an unchecked exception and so we will only rethrow this.", "url": "https://github.com/netty/netty/pull/9970#discussion_r383457860", "createdAt": "2020-02-24T19:10:02Z", "author": {"login": "normanmaurer"}, "path": "transport/src/main/java/io/netty/channel/DefaultChannelPipeline.java", "diffHunk": "@@ -777,19 +720,24 @@ public ChannelHandler removeLast() {\n             assert ctx != null;\n \n             if (!inEventLoop) {\n-                try {\n-                    executor.execute(() -> remove0(ctx));\n-                    return ctx.handler();\n-                } catch (Throwable cause) {\n-                    handlers.add(idx, ctx);\n-                    throw cause;\n-                }\n+                return scheduleRemove(idx, ctx);\n             }\n         }\n         remove0(ctx);\n         return ctx.handler();\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n+    private <T extends ChannelHandler> T scheduleRemove(int idx, DefaultChannelHandlerContext ctx) {\n+        try {\n+            ctx.executor().execute(() -> remove0(ctx));\n+            return (T) ctx.handler();\n+        } catch (Throwable cause) {\n+            handlers.add(idx, ctx);\n+            throw cause;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE3NzYzMg=="}, "originalCommit": {"oid": "2bbb2e1e2e6141da08dda9bd654e60e64c58fa78"}, "originalPosition": 358}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3465, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}