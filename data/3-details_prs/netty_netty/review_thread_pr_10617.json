{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkzOTQzMDAz", "number": 10617, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODo1Njo0OVrOEn_DaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjozNDoxMFrOEoKzag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzYyOTg0OnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringCompletionQueue.java", "isResolved": false, "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwODo1Njo0OVrOHY0evg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNTozNjo1NlrOHZES7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc4NzcxMA==", "bodyText": "It looks a bit weird that the data section is the lower bits, plus the sign bit. How is the sign bit not also included in the op value here? Maybe it's clearer to place the op in the lower bits, and data in the upper bits.", "url": "https://github.com/netty/netty/pull/10617#discussion_r495787710", "createdAt": "2020-09-28T08:56:49Z", "author": {"login": "chrisvest"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringCompletionQueue.java", "diffHunk": "@@ -84,9 +84,9 @@ int process(IOUringCompletionQueueCallback callback) {\n             PlatformDependent.putIntOrdered(kHeadAddress, ringHead);\n \n             int fd = (int) (udata >>> 32);\n-            int opMask = (int) (udata & 0xFFFFFFFFL);\n+            int opMask = (int) udata;\n             int op = opMask >>> 16;\n-            int data = opMask & 0xffff;\n+            int data = (short) opMask;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea5a539bc60ad29d40895844051c61e482338cc0"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc5MTMwMQ==", "bodyText": "sorry not sure I follow... Can you show me how you would change this ?", "url": "https://github.com/netty/netty/pull/10617#discussion_r495791301", "createdAt": "2020-09-28T09:02:48Z", "author": {"login": "normanmaurer"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringCompletionQueue.java", "diffHunk": "@@ -84,9 +84,9 @@ int process(IOUringCompletionQueueCallback callback) {\n             PlatformDependent.putIntOrdered(kHeadAddress, ringHead);\n \n             int fd = (int) (udata >>> 32);\n-            int opMask = (int) (udata & 0xFFFFFFFFL);\n+            int opMask = (int) udata;\n             int op = opMask >>> 16;\n-            int data = opMask & 0xffff;\n+            int data = (short) opMask;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc4NzcxMA=="}, "originalCommit": {"oid": "ea5a539bc60ad29d40895844051c61e482338cc0"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgyMjIyMw==", "bodyText": "Index: transport-native-io_uring/src/test/java/io/netty/channel/uring/NativeTest.java\nIDEA additional info:\nSubsystem: com.intellij.openapi.diff.impl.patch.CharsetEP\n<+>UTF-8\n===================================================================\n--- transport-native-io_uring/src/test/java/io/netty/channel/uring/NativeTest.java\t(revision ea5a539bc60ad29d40895844051c61e482338cc0)\n+++ transport-native-io_uring/src/test/java/io/netty/channel/uring/NativeTest.java\t(date 1601286542688)\n@@ -59,7 +59,7 @@\n         submissionQueue.submit();\n \n         completionQueue.ioUringWaitCqe();\n-        assertEquals(1, completionQueue.process(new IOUringCompletionQueue.IOUringCompletionQueueCallback() {\n+        assertEquals(1, completionQueue.process(new IOUringCompletionQueueCallback() {\n             @Override\n             public void handle(int fd, int res, int flags, int op, int mask) {\n                 assertEquals(inputString.length(), res);\n@@ -73,7 +73,7 @@\n         submissionQueue.submit();\n \n         completionQueue.ioUringWaitCqe();\n-        assertEquals(1, completionQueue.process(new IOUringCompletionQueue.IOUringCompletionQueueCallback() {\n+        assertEquals(1, completionQueue.process(new IOUringCompletionQueueCallback() {\n             @Override\n             public void handle(int fd, int res, int flags, int op, int mask) {\n                 assertEquals(inputString.length(), res);\n@@ -105,7 +105,7 @@\n             public void run() {\n                 completionQueue.ioUringWaitCqe();\n                 try {\n-                    completionQueue.process(new IOUringCompletionQueue.IOUringCompletionQueueCallback() {\n+                    completionQueue.process(new IOUringCompletionQueueCallback() {\n                         @Override\n                         public void handle(int fd, int res, int flags, int op, int mask) {\n                             assertEquals(-62, res);\n@@ -153,7 +153,7 @@\n         }.start();\n \n         completionQueue.ioUringWaitCqe();\n-        assertEquals(1, completionQueue.process(new IOUringCompletionQueue.IOUringCompletionQueueCallback() {\n+        assertEquals(1, completionQueue.process(new IOUringCompletionQueueCallback() {\n             @Override\n             public void handle(int fd, int res, int flags, int op, int mask) {\n                 assertEquals(1, res);\n@@ -184,7 +184,7 @@\n             @Override\n             public void run() {\n                 completionQueue.ioUringWaitCqe();\n-                assertEquals(1, completionQueue.process(new IOUringCompletionQueue.IOUringCompletionQueueCallback() {\n+                assertEquals(1, completionQueue.process(new IOUringCompletionQueueCallback() {\n                     @Override\n                     public void handle(int fd, int res, int flags, int op, int mask) {\n                         assertEquals(1, res);\n@@ -234,8 +234,8 @@\n \n         final AtomicReference<AssertionError> errorRef = new AtomicReference<AssertionError>();\n         Thread waitingCqe = new Thread() {\n-            private final IOUringCompletionQueue.IOUringCompletionQueueCallback verifyCallback =\n-                    new IOUringCompletionQueue.IOUringCompletionQueueCallback() {\n+            private final IOUringCompletionQueueCallback verifyCallback =\n+                    new IOUringCompletionQueueCallback() {\n                 @Override\n                 public void handle(int fd, int res, int flags, int op, int mask) {\n                     if (op == Native.IORING_OP_POLL_ADD) {\n@@ -283,7 +283,7 @@\n                 submissionQueue.addWrite(-1, -1, -1, -1, i);\n                 assertEquals(1, submissionQueue.submitAndWait());\n                 final int expectedData = i;\n-                assertEquals(1, completionQueue.process(new IOUringCompletionQueue.IOUringCompletionQueueCallback() {\n+                assertEquals(1, completionQueue.process(new IOUringCompletionQueueCallback() {\n                     @Override\n                     public void handle(int fd, int res, int flags, int op, int data) {\n                         assertEquals(-1, fd);\nIndex: transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringEventLoop.java\nIDEA additional info:\nSubsystem: com.intellij.openapi.diff.impl.patch.CharsetEP\n<+>UTF-8\n===================================================================\n--- transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringEventLoop.java\t(revision ea5a539bc60ad29d40895844051c61e482338cc0)\n+++ transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringEventLoop.java\t(date 1601286542685)\n@@ -20,7 +20,6 @@\n import io.netty.channel.unix.Errors;\n import io.netty.channel.unix.FileDescriptor;\n import io.netty.channel.unix.IovArray;\n-import io.netty.channel.uring.IOUringCompletionQueue.IOUringCompletionQueueCallback;\n import io.netty.util.collection.IntObjectHashMap;\n import io.netty.util.collection.IntObjectMap;\n import io.netty.util.concurrent.RejectedExecutionHandler;\nIndex: transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringSubmissionQueue.java\nIDEA additional info:\nSubsystem: com.intellij.openapi.diff.impl.patch.CharsetEP\n<+>UTF-8\n===================================================================\n--- transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringSubmissionQueue.java\t(revision ea5a539bc60ad29d40895844051c61e482338cc0)\n+++ transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringSubmissionQueue.java\t(date 1601286707628)\n@@ -19,6 +19,7 @@\n import io.netty.util.internal.logging.InternalLogger;\n import io.netty.util.internal.logging.InternalLoggerFactory;\n \n+import static io.netty.channel.uring.UserData.encode;\n import static java.lang.Math.max;\n import static java.lang.Math.min;\n \n@@ -126,7 +127,7 @@\n         PlatformDependent.putLong(sqe + SQE_ADDRESS_FIELD, bufferAddress);\n         PlatformDependent.putInt(sqe + SQE_LEN_FIELD, length);\n         PlatformDependent.putInt(sqe + SQE_RW_FLAGS_FIELD, rwFlags);\n-        long userData = convertToUserData(fd, op, data);\n+        long userData = encode(fd, op, data);\n         PlatformDependent.putLong(sqe + SQE_USER_DATA_FIELD, userData);\n \n         logger.trace(\"UserDataField: {}\", userData);\n@@ -180,7 +181,7 @@\n     //fill the address which is associated with server poll link user_data\n     boolean addPollRemove(int fd, int pollMask, int extraData) {\n         return enqueueSqe(Native.IORING_OP_POLL_REMOVE, 0, fd,\n-                convertToUserData(fd, Native.IORING_OP_POLL_ADD, pollMask), 0, 0, extraData);\n+                          encode(fd, Native.IORING_OP_POLL_ADD, pollMask), 0, 0, extraData);\n     }\n \n     boolean addConnect(int fd, long socketAddress, long socketAddressLength, int extraData) {\n@@ -242,13 +243,6 @@\n         PlatformDependent.putLong(timeoutMemoryAddress + KERNEL_TIMESPEC_TV_NSEC_FIELD, nanoSeconds);\n     }\n \n-    private static long convertToUserData(int fd, int op, int data) {\n-        assert op <= Short.MAX_VALUE;\n-        assert data <= Short.MAX_VALUE;\n-        int opMask = op << 16 | (((short) data) & 0xFFFF);\n-        return ((long) fd) << 32 | opMask & 0xFFFFFFFFL;\n-    }\n-\n     public long count() {\n         return tail - head;\n     }\nIndex: transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringCompletionQueueCallback.java\nIDEA additional info:\nSubsystem: com.intellij.openapi.diff.impl.patch.CharsetEP\n<+>UTF-8\n===================================================================\n--- transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringCompletionQueueCallback.java\t(date 1601286822330)\n+++ transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringCompletionQueueCallback.java\t(date 1601286822330)\n@@ -0,0 +1,23 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.channel.uring;\n+\n+interface IOUringCompletionQueueCallback {\n+    /**\n+     * Called for a completion event that was put into the {@link IOUringCompletionQueue}.\n+     */\n+    void handle(int fd, int res, int flags, int op, int data);\n+}\nIndex: transport-native-io_uring/src/test/java/io/netty/channel/uring/UserDataTest.java\nIDEA additional info:\nSubsystem: com.intellij.openapi.diff.impl.patch.CharsetEP\n<+>UTF-8\n===================================================================\n--- transport-native-io_uring/src/test/java/io/netty/channel/uring/UserDataTest.java\t(date 1601286707626)\n+++ transport-native-io_uring/src/test/java/io/netty/channel/uring/UserDataTest.java\t(date 1601286707626)\n@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.channel.uring;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+public class UserDataTest {\n+    @Test\n+    public void testUserData() {\n+        // Ensure userdata works with negative and positive values\n+        for (int fd : new int[] { 0, 1, 10, Short.MAX_VALUE, Integer.MAX_VALUE }) {\n+            for (int op = 0; op < 20; op++) {\n+                for (int data = Short.MIN_VALUE; data <= Short.MAX_VALUE; data++) {\n+                    final int expectedFd = fd;\n+                    final int expectedOp = op;\n+                    final int expectedData = data;\n+                    long udata = UserData.encode(expectedFd, expectedOp, expectedData);\n+                    UserData.decode(0, 0, udata, new IOUringCompletionQueueCallback() {\n+                        @Override\n+                        public void handle(int actualFd, int res, int flags, int actualOp, int actualData) {\n+                            assertEquals(expectedFd, actualFd);\n+                            assertEquals(expectedOp, actualOp);\n+                            assertEquals(expectedData, actualData);\n+                        }\n+                    });\n+                }\n+            }\n+        }\n+    }\n+}\n\\ No newline at end of file\nIndex: transport-native-io_uring/src/main/java/io/netty/channel/uring/UserData.java\nIDEA additional info:\nSubsystem: com.intellij.openapi.diff.impl.patch.CharsetEP\n<+>UTF-8\n===================================================================\n--- transport-native-io_uring/src/main/java/io/netty/channel/uring/UserData.java\t(date 1601286707623)\n+++ transport-native-io_uring/src/main/java/io/netty/channel/uring/UserData.java\t(date 1601286707623)\n@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.channel.uring;\n+\n+final class UserData {\n+    private UserData() {\n+    }\n+\n+    static long encode(int fd, int op, int data) {\n+        assert op <= Short.MAX_VALUE;\n+        assert data <= Short.MAX_VALUE;\n+        return (long) data << 48 | (long) op << 32 | fd;\n+    }\n+\n+    static void decode(int res, int flags, long udata, IOUringCompletionQueueCallback callback) {\n+        int fd = (int) (udata & 0xFFFFFFFFL);\n+        int op = (short) ((udata >>>= 32) & 0xFFFFL);\n+        int data = (short) (udata >>> 16);\n+        callback.handle(fd, res, flags, op, data);\n+    }\n+}\nIndex: transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringCompletionQueue.java\nIDEA additional info:\nSubsystem: com.intellij.openapi.diff.impl.patch.CharsetEP\n<+>UTF-8\n===================================================================\n--- transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringCompletionQueue.java\t(revision ea5a539bc60ad29d40895844051c61e482338cc0)\n+++ transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringCompletionQueue.java\t(date 1601286707630)\n@@ -17,6 +17,8 @@\n \n import io.netty.util.internal.PlatformDependent;\n \n+import static io.netty.channel.uring.UserData.decode;\n+\n /**\n  * Completion queue implementation for io_uring.\n  */\n@@ -83,24 +85,13 @@\n             ringHead++;\n             PlatformDependent.putIntOrdered(kHeadAddress, ringHead);\n \n-            int fd = (int) (udata >>> 32);\n-            int opMask = (int) udata;\n-            int op = opMask >>> 16;\n-            int data = (short) opMask;\n-\n             i++;\n-            callback.handle(fd, res, flags, op, data);\n+\n+            decode(res, flags, udata, callback);\n         }\n         return i;\n     }\n \n-    interface IOUringCompletionQueueCallback {\n-        /**\n-         * Called for a completion event that was put into the {@link IOUringCompletionQueue}.\n-         */\n-        void handle(int fd, int res, int flags, int op, int data);\n-    }\n-\n     /**\n      * Block until there is at least one completion ready to be processed.\n      */", "url": "https://github.com/netty/netty/pull/10617#discussion_r495822223", "createdAt": "2020-09-28T09:54:52Z", "author": {"login": "chrisvest"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringCompletionQueue.java", "diffHunk": "@@ -84,9 +84,9 @@ int process(IOUringCompletionQueueCallback callback) {\n             PlatformDependent.putIntOrdered(kHeadAddress, ringHead);\n \n             int fd = (int) (udata >>> 32);\n-            int opMask = (int) (udata & 0xFFFFFFFFL);\n+            int opMask = (int) udata;\n             int op = opMask >>> 16;\n-            int data = opMask & 0xffff;\n+            int data = (short) opMask;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc4NzcxMA=="}, "originalCommit": {"oid": "ea5a539bc60ad29d40895844051c61e482338cc0"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkxOTY0OA==", "bodyText": "@chrisvest makes sense... Let me apply this one .", "url": "https://github.com/netty/netty/pull/10617#discussion_r495919648", "createdAt": "2020-09-28T13:00:52Z", "author": {"login": "normanmaurer"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringCompletionQueue.java", "diffHunk": "@@ -84,9 +84,9 @@ int process(IOUringCompletionQueueCallback callback) {\n             PlatformDependent.putIntOrdered(kHeadAddress, ringHead);\n \n             int fd = (int) (udata >>> 32);\n-            int opMask = (int) (udata & 0xFFFFFFFFL);\n+            int opMask = (int) udata;\n             int op = opMask >>> 16;\n-            int data = opMask & 0xffff;\n+            int data = (short) opMask;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc4NzcxMA=="}, "originalCommit": {"oid": "ea5a539bc60ad29d40895844051c61e482338cc0"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkyNjQyNw==", "bodyText": "return (long) data << 48 | (long) op << 32 | fd; @chrisvest why is data a short? :)", "url": "https://github.com/netty/netty/pull/10617#discussion_r495926427", "createdAt": "2020-09-28T13:10:41Z", "author": {"login": "1Jo1"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringCompletionQueue.java", "diffHunk": "@@ -84,9 +84,9 @@ int process(IOUringCompletionQueueCallback callback) {\n             PlatformDependent.putIntOrdered(kHeadAddress, ringHead);\n \n             int fd = (int) (udata >>> 32);\n-            int opMask = (int) (udata & 0xFFFFFFFFL);\n+            int opMask = (int) udata;\n             int op = opMask >>> 16;\n-            int data = opMask & 0xffff;\n+            int data = (short) opMask;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc4NzcxMA=="}, "originalCommit": {"oid": "ea5a539bc60ad29d40895844051c61e482338cc0"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkyNzUyMg==", "bodyText": "@1Jo1 because a short is all we can store in there... we only have 2 bytes.", "url": "https://github.com/netty/netty/pull/10617#discussion_r495927522", "createdAt": "2020-09-28T13:12:16Z", "author": {"login": "normanmaurer"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringCompletionQueue.java", "diffHunk": "@@ -84,9 +84,9 @@ int process(IOUringCompletionQueueCallback callback) {\n             PlatformDependent.putIntOrdered(kHeadAddress, ringHead);\n \n             int fd = (int) (udata >>> 32);\n-            int opMask = (int) (udata & 0xFFFFFFFFL);\n+            int opMask = (int) udata;\n             int op = opMask >>> 16;\n-            int data = opMask & 0xffff;\n+            int data = (short) opMask;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc4NzcxMA=="}, "originalCommit": {"oid": "ea5a539bc60ad29d40895844051c61e482338cc0"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkyNzg0MQ==", "bodyText": "it's a bit confusing, as the data is actually a int", "url": "https://github.com/netty/netty/pull/10617#discussion_r495927841", "createdAt": "2020-09-28T13:12:44Z", "author": {"login": "1Jo1"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringCompletionQueue.java", "diffHunk": "@@ -84,9 +84,9 @@ int process(IOUringCompletionQueueCallback callback) {\n             PlatformDependent.putIntOrdered(kHeadAddress, ringHead);\n \n             int fd = (int) (udata >>> 32);\n-            int opMask = (int) (udata & 0xFFFFFFFFL);\n+            int opMask = (int) udata;\n             int op = opMask >>> 16;\n-            int data = opMask & 0xffff;\n+            int data = (short) opMask;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc4NzcxMA=="}, "originalCommit": {"oid": "ea5a539bc60ad29d40895844051c61e482338cc0"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkyOTUzNA==", "bodyText": "its an int just to make it easier to pass around (but as you may have noticed we have an assert in there to ensure it is never bigger than a short). Otherwise you will need to always add (short)  when passing it around", "url": "https://github.com/netty/netty/pull/10617#discussion_r495929534", "createdAt": "2020-09-28T13:15:15Z", "author": {"login": "normanmaurer"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringCompletionQueue.java", "diffHunk": "@@ -84,9 +84,9 @@ int process(IOUringCompletionQueueCallback callback) {\n             PlatformDependent.putIntOrdered(kHeadAddress, ringHead);\n \n             int fd = (int) (udata >>> 32);\n-            int opMask = (int) (udata & 0xFFFFFFFFL);\n+            int opMask = (int) udata;\n             int op = opMask >>> 16;\n-            int data = opMask & 0xffff;\n+            int data = (short) opMask;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc4NzcxMA=="}, "originalCommit": {"oid": "ea5a539bc60ad29d40895844051c61e482338cc0"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkyOTYzMw==", "bodyText": "ok, I would suggest to change data type parameter to short, it would make more sense and more readable", "url": "https://github.com/netty/netty/pull/10617#discussion_r495929633", "createdAt": "2020-09-28T13:15:24Z", "author": {"login": "1Jo1"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringCompletionQueue.java", "diffHunk": "@@ -84,9 +84,9 @@ int process(IOUringCompletionQueueCallback callback) {\n             PlatformDependent.putIntOrdered(kHeadAddress, ringHead);\n \n             int fd = (int) (udata >>> 32);\n-            int opMask = (int) (udata & 0xFFFFFFFFL);\n+            int opMask = (int) udata;\n             int op = opMask >>> 16;\n-            int data = opMask & 0xffff;\n+            int data = (short) opMask;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc4NzcxMA=="}, "originalCommit": {"oid": "ea5a539bc60ad29d40895844051c61e482338cc0"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTkzNzM2Mw==", "bodyText": "ah that makes sense \ud83d\udc4d", "url": "https://github.com/netty/netty/pull/10617#discussion_r495937363", "createdAt": "2020-09-28T13:26:30Z", "author": {"login": "1Jo1"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringCompletionQueue.java", "diffHunk": "@@ -84,9 +84,9 @@ int process(IOUringCompletionQueueCallback callback) {\n             PlatformDependent.putIntOrdered(kHeadAddress, ringHead);\n \n             int fd = (int) (udata >>> 32);\n-            int opMask = (int) (udata & 0xFFFFFFFFL);\n+            int opMask = (int) udata;\n             int op = opMask >>> 16;\n-            int data = opMask & 0xffff;\n+            int data = (short) opMask;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc4NzcxMA=="}, "originalCommit": {"oid": "ea5a539bc60ad29d40895844051c61e482338cc0"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA0NjgyOQ==", "bodyText": "+        return (long) data << 48 | (long) op << 32 | fd;\nMay be best to mask fd here since we are otherwise implicitly relying on it being non-negative.\nI tend to agree with @1Jo1 if we are going to interpret the 16bit vals as signed short then would be better for those args of the handle method to be shorts.", "url": "https://github.com/netty/netty/pull/10617#discussion_r496046829", "createdAt": "2020-09-28T15:36:56Z", "author": {"login": "njhill"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringCompletionQueue.java", "diffHunk": "@@ -84,9 +84,9 @@ int process(IOUringCompletionQueueCallback callback) {\n             PlatformDependent.putIntOrdered(kHeadAddress, ringHead);\n \n             int fd = (int) (udata >>> 32);\n-            int opMask = (int) (udata & 0xFFFFFFFFL);\n+            int opMask = (int) udata;\n             int op = opMask >>> 16;\n-            int data = opMask & 0xffff;\n+            int data = (short) opMask;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc4NzcxMA=="}, "originalCommit": {"oid": "ea5a539bc60ad29d40895844051c61e482338cc0"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzY0NTU4OnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/test/java/io/netty/channel/uring/NativeTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwOTowMDo1M1rOHY0opA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwOTowMDo1M1rOHY0opA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTc5MDI0NA==", "bodyText": "If encoding and decoding were package-private static methods, ideally placed next to each other in some utility class, the code might be cleaner and we could simplify this test a bit.", "url": "https://github.com/netty/netty/pull/10617#discussion_r495790244", "createdAt": "2020-09-28T09:00:53Z", "author": {"login": "chrisvest"}, "path": "transport-native-io_uring/src/test/java/io/netty/channel/uring/NativeTest.java", "diffHunk": "@@ -270,4 +270,31 @@ public void run() {\n             ringBuffer.close();\n         }\n     }\n+\n+    @Test\n+    public void testUserData() {\n+        RingBuffer ringBuffer = Native.createRingBuffer(32);\n+        IOUringSubmissionQueue submissionQueue = ringBuffer.ioUringSubmissionQueue();\n+        final IOUringCompletionQueue completionQueue = ringBuffer.ioUringCompletionQueue();\n+\n+        try {\n+            // Ensure userdata works with negative and positive values\n+            for (int i = Short.MIN_VALUE; i <= Short.MAX_VALUE; i++) {\n+                submissionQueue.addWrite(-1, -1, -1, -1, i);\n+                assertEquals(1, submissionQueue.submitAndWait());\n+                final int expectedData = i;\n+                assertEquals(1, completionQueue.process(new IOUringCompletionQueue.IOUringCompletionQueueCallback() {\n+                    @Override\n+                    public void handle(int fd, int res, int flags, int op, int data) {\n+                        assertEquals(-1, fd);\n+                        assertTrue(res < 0);\n+                        assertEquals(Native.IORING_OP_WRITE, op);\n+                        assertEquals(expectedData, data);\n+                    }\n+                }));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ea5a539bc60ad29d40895844051c61e482338cc0"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNTU1NDk4OnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/test/java/io/netty/channel/uring/UserDataTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjozNDoxMFrOHZGlgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxNjozNTowNFrOHZGnjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA4NDM1Mg==", "bodyText": "Oops, we also need a line break here.", "url": "https://github.com/netty/netty/pull/10617#discussion_r496084352", "createdAt": "2020-09-28T16:34:10Z", "author": {"login": "chrisvest"}, "path": "transport-native-io_uring/src/test/java/io/netty/channel/uring/UserDataTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.channel.uring;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+public class UserDataTest {\n+    @Test\n+    public void testUserData() {\n+        // Ensure userdata works with negative and positive values\n+        for (int fd : new int[] { 0, 1, 10, Short.MAX_VALUE, Integer.MAX_VALUE }) {\n+            for (int op = 0; op < 20; op++) {\n+                for (int data = Short.MIN_VALUE; data <= Short.MAX_VALUE; data++) {\n+                    final int expectedFd = fd;\n+                    final int expectedOp = op;\n+                    final int expectedData = data;\n+                    long udata = UserData.encode(expectedFd, expectedOp, expectedData);\n+                    UserData.decode(0, 0, udata, new IOUringCompletionQueueCallback() {\n+                        @Override\n+                        public void handle(int actualFd, int res, int flags, int actualOp, int actualData) {\n+                            assertEquals(expectedFd, actualFd);\n+                            assertEquals(expectedOp, actualOp);\n+                            assertEquals(expectedData, actualData);\n+                        }\n+                    });\n+                }\n+            }\n+        }\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e05431651155ab5ce51af9ecd44ca43279206112"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA4NDg3Nw==", "bodyText": "yep... will do this as part of switching to short", "url": "https://github.com/netty/netty/pull/10617#discussion_r496084877", "createdAt": "2020-09-28T16:35:04Z", "author": {"login": "normanmaurer"}, "path": "transport-native-io_uring/src/test/java/io/netty/channel/uring/UserDataTest.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.channel.uring;\n+\n+import org.junit.Test;\n+\n+import static org.junit.Assert.*;\n+\n+public class UserDataTest {\n+    @Test\n+    public void testUserData() {\n+        // Ensure userdata works with negative and positive values\n+        for (int fd : new int[] { 0, 1, 10, Short.MAX_VALUE, Integer.MAX_VALUE }) {\n+            for (int op = 0; op < 20; op++) {\n+                for (int data = Short.MIN_VALUE; data <= Short.MAX_VALUE; data++) {\n+                    final int expectedFd = fd;\n+                    final int expectedOp = op;\n+                    final int expectedData = data;\n+                    long udata = UserData.encode(expectedFd, expectedOp, expectedData);\n+                    UserData.decode(0, 0, udata, new IOUringCompletionQueueCallback() {\n+                        @Override\n+                        public void handle(int actualFd, int res, int flags, int actualOp, int actualData) {\n+                            assertEquals(expectedFd, actualFd);\n+                            assertEquals(expectedOp, actualOp);\n+                            assertEquals(expectedData, actualData);\n+                        }\n+                    });\n+                }\n+            }\n+        }\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjA4NDM1Mg=="}, "originalCommit": {"oid": "e05431651155ab5ce51af9ecd44ca43279206112"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3775, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}