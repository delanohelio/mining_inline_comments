{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxNjE1OTE1", "number": 10544, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNzowNjoyMVrOEhHBxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjowNzo0N1rOEhUUrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTUzNjA2OnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringSubmissionQueue.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNzowNjoyMVrOHOPezQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNzowNjoyMVrOHOPezQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY5NTc1Nw==", "bodyText": "nit: remove", "url": "https://github.com/netty/netty/pull/10544#discussion_r484695757", "createdAt": "2020-09-08T07:06:21Z", "author": {"login": "normanmaurer"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringSubmissionQueue.java", "diffHunk": "@@ -51,124 +48,101 @@\n     //these unsigned integer pointers(shared with the kernel) will be changed by the kernel\n     private final long kHeadAddress;\n     private final long kTailAddress;\n-    private final long kRingMaskAddress;\n-    private final long kRingEntriesAddress;\n-    private final long fFlagsAdress;\n+    //private final long fFlagsAdress;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b86f254f48063cf1863fe622e5803cd55a5a1f78"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTUzNzQyOnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringSubmissionQueue.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNzowNjo0NFrOHOPfmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNzowNjo0NFrOHOPfmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY5NTk2Mg==", "bodyText": "nit: remove", "url": "https://github.com/netty/netty/pull/10544#discussion_r484695962", "createdAt": "2020-09-08T07:06:44Z", "author": {"login": "normanmaurer"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringSubmissionQueue.java", "diffHunk": "@@ -51,124 +48,101 @@\n     //these unsigned integer pointers(shared with the kernel) will be changed by the kernel\n     private final long kHeadAddress;\n     private final long kTailAddress;\n-    private final long kRingMaskAddress;\n-    private final long kRingEntriesAddress;\n-    private final long fFlagsAdress;\n+    //private final long fFlagsAdress;\n     private final long kDroppedAddress;\n     private final long arrayAddress;\n \n     private final long submissionQueueArrayAddress;\n \n-    private long sqeHead;\n-    private long sqeTail;\n+    private final int ringEntries;\n+    private final int ringMask; // = ringEntries - 1\n \n     private final int ringSize;\n     private final long ringAddress;\n     private final int ringFd;\n \n-    private final ByteBuffer timeoutMemory;\n     private final long timeoutMemoryAddress;\n \n-    //private int sqeSubmitCounter;\n+    private int head;\n+    private int tail;\n \n     IOUringSubmissionQueue(long kHeadAddress, long kTailAddress, long kRingMaskAddress, long kRingEntriesAddress,\n                            long fFlagsAdress, long kDroppedAddress, long arrayAddress,\n                            long submissionQueueArrayAddress, int ringSize,\n                            long ringAddress, int ringFd) {\n         this.kHeadAddress = kHeadAddress;\n         this.kTailAddress = kTailAddress;\n-        this.kRingMaskAddress = kRingMaskAddress;\n-        this.kRingEntriesAddress = kRingEntriesAddress;\n-        this.fFlagsAdress = fFlagsAdress;\n+        //this.fFlagsAdress = fFlagsAdress;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b86f254f48063cf1863fe622e5803cd55a5a1f78"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTUzOTIwOnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringSubmissionQueue.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNzowNzoyMFrOHOPgsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMDowNzo1NlrOHPAVGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY5NjI0MA==", "bodyText": "seems like a few fields can be removed ?", "url": "https://github.com/netty/netty/pull/10544#discussion_r484696240", "createdAt": "2020-09-08T07:07:20Z", "author": {"login": "normanmaurer"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringSubmissionQueue.java", "diffHunk": "@@ -51,124 +48,101 @@\n     //these unsigned integer pointers(shared with the kernel) will be changed by the kernel\n     private final long kHeadAddress;\n     private final long kTailAddress;\n-    private final long kRingMaskAddress;\n-    private final long kRingEntriesAddress;\n-    private final long fFlagsAdress;\n+    //private final long fFlagsAdress;\n     private final long kDroppedAddress;\n     private final long arrayAddress;\n \n     private final long submissionQueueArrayAddress;\n \n-    private long sqeHead;\n-    private long sqeTail;\n+    private final int ringEntries;\n+    private final int ringMask; // = ringEntries - 1\n \n     private final int ringSize;\n     private final long ringAddress;\n     private final int ringFd;\n \n-    private final ByteBuffer timeoutMemory;\n     private final long timeoutMemoryAddress;\n \n-    //private int sqeSubmitCounter;\n+    private int head;\n+    private int tail;\n \n     IOUringSubmissionQueue(long kHeadAddress, long kTailAddress, long kRingMaskAddress, long kRingEntriesAddress,\n                            long fFlagsAdress, long kDroppedAddress, long arrayAddress,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b86f254f48063cf1863fe622e5803cd55a5a1f78"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk4MDY1OA==", "bodyText": "Some of these are used only from JNI during shutdown, and others I left because I wasn't sure whether we may have a use for them at some point (e.g. dropped SQE count). Probably we could trim down how many are actually needed for the shutdown though, since some are derived from others (like ringSize).\n@1Jo1 wdyt?", "url": "https://github.com/netty/netty/pull/10544#discussion_r484980658", "createdAt": "2020-09-08T14:49:18Z", "author": {"login": "njhill"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringSubmissionQueue.java", "diffHunk": "@@ -51,124 +48,101 @@\n     //these unsigned integer pointers(shared with the kernel) will be changed by the kernel\n     private final long kHeadAddress;\n     private final long kTailAddress;\n-    private final long kRingMaskAddress;\n-    private final long kRingEntriesAddress;\n-    private final long fFlagsAdress;\n+    //private final long fFlagsAdress;\n     private final long kDroppedAddress;\n     private final long arrayAddress;\n \n     private final long submissionQueueArrayAddress;\n \n-    private long sqeHead;\n-    private long sqeTail;\n+    private final int ringEntries;\n+    private final int ringMask; // = ringEntries - 1\n \n     private final int ringSize;\n     private final long ringAddress;\n     private final int ringFd;\n \n-    private final ByteBuffer timeoutMemory;\n     private final long timeoutMemoryAddress;\n \n-    //private int sqeSubmitCounter;\n+    private int head;\n+    private int tail;\n \n     IOUringSubmissionQueue(long kHeadAddress, long kTailAddress, long kRingMaskAddress, long kRingEntriesAddress,\n                            long fFlagsAdress, long kDroppedAddress, long arrayAddress,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY5NjI0MA=="}, "originalCommit": {"oid": "b86f254f48063cf1863fe622e5803cd55a5a1f78"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA0NzcxNQ==", "bodyText": "yeah dropped SQE count, it's probably useful for debugging or for logging, however it is very unlikely that the cqe(size=2 * sqe) is full, btw we could change cqe entry size as well at the beginning :)", "url": "https://github.com/netty/netty/pull/10544#discussion_r485047715", "createdAt": "2020-09-08T16:25:49Z", "author": {"login": "1Jo1"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringSubmissionQueue.java", "diffHunk": "@@ -51,124 +48,101 @@\n     //these unsigned integer pointers(shared with the kernel) will be changed by the kernel\n     private final long kHeadAddress;\n     private final long kTailAddress;\n-    private final long kRingMaskAddress;\n-    private final long kRingEntriesAddress;\n-    private final long fFlagsAdress;\n+    //private final long fFlagsAdress;\n     private final long kDroppedAddress;\n     private final long arrayAddress;\n \n     private final long submissionQueueArrayAddress;\n \n-    private long sqeHead;\n-    private long sqeTail;\n+    private final int ringEntries;\n+    private final int ringMask; // = ringEntries - 1\n \n     private final int ringSize;\n     private final long ringAddress;\n     private final int ringFd;\n \n-    private final ByteBuffer timeoutMemory;\n     private final long timeoutMemoryAddress;\n \n-    //private int sqeSubmitCounter;\n+    private int head;\n+    private int tail;\n \n     IOUringSubmissionQueue(long kHeadAddress, long kTailAddress, long kRingMaskAddress, long kRingEntriesAddress,\n                            long fFlagsAdress, long kDroppedAddress, long arrayAddress,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY5NjI0MA=="}, "originalCommit": {"oid": "b86f254f48063cf1863fe622e5803cd55a5a1f78"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTA0ODQxMg==", "bodyText": "I already mentioned that, kFlag is required for SQPOLL", "url": "https://github.com/netty/netty/pull/10544#discussion_r485048412", "createdAt": "2020-09-08T16:26:57Z", "author": {"login": "1Jo1"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringSubmissionQueue.java", "diffHunk": "@@ -51,124 +48,101 @@\n     //these unsigned integer pointers(shared with the kernel) will be changed by the kernel\n     private final long kHeadAddress;\n     private final long kTailAddress;\n-    private final long kRingMaskAddress;\n-    private final long kRingEntriesAddress;\n-    private final long fFlagsAdress;\n+    //private final long fFlagsAdress;\n     private final long kDroppedAddress;\n     private final long arrayAddress;\n \n     private final long submissionQueueArrayAddress;\n \n-    private long sqeHead;\n-    private long sqeTail;\n+    private final int ringEntries;\n+    private final int ringMask; // = ringEntries - 1\n \n     private final int ringSize;\n     private final long ringAddress;\n     private final int ringFd;\n \n-    private final ByteBuffer timeoutMemory;\n     private final long timeoutMemoryAddress;\n \n-    //private int sqeSubmitCounter;\n+    private int head;\n+    private int tail;\n \n     IOUringSubmissionQueue(long kHeadAddress, long kTailAddress, long kRingMaskAddress, long kRingEntriesAddress,\n                            long fFlagsAdress, long kDroppedAddress, long arrayAddress,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY5NjI0MA=="}, "originalCommit": {"oid": "b86f254f48063cf1863fe622e5803cd55a5a1f78"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTQ5NjA5MQ==", "bodyText": "ok fair enough...", "url": "https://github.com/netty/netty/pull/10544#discussion_r485496091", "createdAt": "2020-09-09T10:07:56Z", "author": {"login": "normanmaurer"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringSubmissionQueue.java", "diffHunk": "@@ -51,124 +48,101 @@\n     //these unsigned integer pointers(shared with the kernel) will be changed by the kernel\n     private final long kHeadAddress;\n     private final long kTailAddress;\n-    private final long kRingMaskAddress;\n-    private final long kRingEntriesAddress;\n-    private final long fFlagsAdress;\n+    //private final long fFlagsAdress;\n     private final long kDroppedAddress;\n     private final long arrayAddress;\n \n     private final long submissionQueueArrayAddress;\n \n-    private long sqeHead;\n-    private long sqeTail;\n+    private final int ringEntries;\n+    private final int ringMask; // = ringEntries - 1\n \n     private final int ringSize;\n     private final long ringAddress;\n     private final int ringFd;\n \n-    private final ByteBuffer timeoutMemory;\n     private final long timeoutMemoryAddress;\n \n-    //private int sqeSubmitCounter;\n+    private int head;\n+    private int tail;\n \n     IOUringSubmissionQueue(long kHeadAddress, long kTailAddress, long kRingMaskAddress, long kRingEntriesAddress,\n                            long fFlagsAdress, long kDroppedAddress, long arrayAddress,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY5NjI0MA=="}, "originalCommit": {"oid": "b86f254f48063cf1863fe622e5803cd55a5a1f78"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMTU0MDk2OnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringSubmissionQueue.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNzowODowMFrOHOPhvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwNzowODowMFrOHOPhvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDY5NjUwOQ==", "bodyText": "remove", "url": "https://github.com/netty/netty/pull/10544#discussion_r484696509", "createdAt": "2020-09-08T07:08:00Z", "author": {"login": "normanmaurer"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringSubmissionQueue.java", "diffHunk": "@@ -51,124 +48,101 @@\n     //these unsigned integer pointers(shared with the kernel) will be changed by the kernel\n     private final long kHeadAddress;\n     private final long kTailAddress;\n-    private final long kRingMaskAddress;\n-    private final long kRingEntriesAddress;\n-    private final long fFlagsAdress;\n+    //private final long fFlagsAdress;\n     private final long kDroppedAddress;\n     private final long arrayAddress;\n \n     private final long submissionQueueArrayAddress;\n \n-    private long sqeHead;\n-    private long sqeTail;\n+    private final int ringEntries;\n+    private final int ringMask; // = ringEntries - 1\n \n     private final int ringSize;\n     private final long ringAddress;\n     private final int ringFd;\n \n-    private final ByteBuffer timeoutMemory;\n     private final long timeoutMemoryAddress;\n \n-    //private int sqeSubmitCounter;\n+    private int head;\n+    private int tail;\n \n     IOUringSubmissionQueue(long kHeadAddress, long kTailAddress, long kRingMaskAddress, long kRingEntriesAddress,\n                            long fFlagsAdress, long kDroppedAddress, long arrayAddress,\n                            long submissionQueueArrayAddress, int ringSize,\n                            long ringAddress, int ringFd) {\n         this.kHeadAddress = kHeadAddress;\n         this.kTailAddress = kTailAddress;\n-        this.kRingMaskAddress = kRingMaskAddress;\n-        this.kRingEntriesAddress = kRingEntriesAddress;\n-        this.fFlagsAdress = fFlagsAdress;\n+        //this.fFlagsAdress = fFlagsAdress;\n         this.kDroppedAddress = kDroppedAddress;\n         this.arrayAddress = arrayAddress;\n         this.submissionQueueArrayAddress = submissionQueueArrayAddress;\n         this.ringSize = ringSize;\n         this.ringAddress = ringAddress;\n         this.ringFd = ringFd;\n \n-        timeoutMemory = Buffer.allocateDirectWithNativeOrder(KERNEL_TIMESPEC_SIZE);\n-        timeoutMemoryAddress = Buffer.memoryAddress(timeoutMemory);\n-    }\n+        this.ringEntries = PlatformDependent.getInt(kRingEntriesAddress);\n+        this.ringMask = PlatformDependent.getInt(kRingMaskAddress);\n+        this.head = PlatformDependent.getInt(kHeadAddress);\n+        this.tail = PlatformDependent.getInt(kTailAddress);\n \n-    public long getSqe() {\n-        long next = sqeTail + 1;\n-        long kRingEntries = toUnsignedLong(PlatformDependent.getInt(kRingEntriesAddress));\n+        this.timeoutMemoryAddress = PlatformDependent.allocateMemory(KERNEL_TIMESPEC_SIZE);\n \n-        //acquire memory barrier\n-        long kHead = toUnsignedLong(PlatformDependent.getIntVolatile(kHeadAddress));\n+        // Zero the whole SQE array first\n+        PlatformDependent.setMemory(submissionQueueArrayAddress, ringEntries * SQE_SIZE, (byte) 0);\n \n-        long sqe = 0;\n-        if ((next - kHead) <= kRingEntries) {\n-            long index = sqeTail & toUnsignedLong(PlatformDependent.getInt(kRingMaskAddress));\n-            sqe = SQE_SIZE * index + submissionQueueArrayAddress;\n-            sqeTail = next;\n+        // Fill SQ array (lines up with SQE array)\n+        long address = arrayAddress;\n+        for (int i = 0; i < ringEntries; i++, address += INT_SIZE) {\n+            PlatformDependent.putInt(address, i);\n         }\n-        return sqe;\n     }\n \n-    private void setData(long sqe, byte op, int pollMask, int fd, long bufferAddress, int length, long offset) {\n-        //Todo cleaner\n-        //set sqe(submission queue) properties\n-        PlatformDependent.putByte(sqe + SQE_OP_CODE_FIELD, op);\n-        PlatformDependent.putShort(sqe + SQE_IOPRIO_FIELD, (short) 0);\n-        PlatformDependent.putInt(sqe + SQE_FD_FIELD, fd);\n-        PlatformDependent.putLong(sqe + SQE_OFFSET_FIELD, offset);\n-        PlatformDependent.putLong(sqe + SQE_ADDRESS_FIELD, bufferAddress);\n-        PlatformDependent.putInt(sqe + SQE_LEN_FIELD, length);\n-\n-        //user_data should be same as POLL_LINK fd\n-        if (op == Native.IORING_OP_POLL_REMOVE) {\n-            PlatformDependent.putInt(sqe + SQE_FD_FIELD, -1);\n-            long uData = convertToUserData((byte) Native.IORING_OP_POLL_ADD, fd, pollMask);\n-            PlatformDependent.putLong(sqe + SQE_ADDRESS_FIELD, uData);\n-            PlatformDependent.putLong(sqe + SQE_USER_DATA_FIELD, convertToUserData(op, fd, 0));\n-            PlatformDependent.putInt(sqe + SQE_RW_FLAGS_FIELD, 0);\n-        } else {\n-            long uData = convertToUserData(op, fd, pollMask);\n-            PlatformDependent.putLong(sqe + SQE_USER_DATA_FIELD, uData);\n-            //c union set Rw-Flags or accept_flags\n-            if (op != Native.IORING_OP_ACCEPT) {\n-                PlatformDependent.putInt(sqe + SQE_RW_FLAGS_FIELD, pollMask);\n-            } else {\n-                //accept_flags set NON_BLOCKING\n-                PlatformDependent.putInt(sqe + SQE_RW_FLAGS_FIELD, Native.SOCK_NONBLOCK | Native.SOCK_CLOEXEC);\n-            }\n+    private boolean enqueueSqe(int op, int rwFlags, int fd, long bufferAddress, int length, long offset) {\n+        boolean submitted = false;\n+        int pending = tail - head;\n+        if (pending == ringEntries) {\n+            submit();\n+            submitted = true;\n         }\n+        long sqe = submissionQueueArrayAddress + (tail++ & ringMask) * SQE_SIZE;\n+        setData(sqe, op, rwFlags, fd, bufferAddress, length, offset);\n+        return submitted;\n+    }\n \n+    private void setData(long sqe, int op, int rwFlags, int fd, long bufferAddress, int length, long offset) {\n+        //set sqe(submission queue) properties\n+        // never-used fields are omitted since we zero the entire array up-front\n+\n+        PlatformDependent.putByte(sqe + SQE_OP_CODE_FIELD, (byte) op);\n         // TODO: Make it configurable if we should use this flag or not.\n         PlatformDependent.putByte(sqe + SQE_FLAGS_FIELD,\n                 // Workaround for a kernel bug:\n                 // See https://lore.kernel.org/io-uring/6428c1ee0234105d18c5e3e88aa00c57@nickhill.org/T/#t\n                 (byte) (op != Native.IORING_OP_WRITEV ? Native.IOSQE_ASYNC : 0));\n-\n+        //PlatformDependent.putShort(sqe + SQE_IOPRIO_FIELD, (short) 0);\n+        PlatformDependent.putInt(sqe + SQE_FD_FIELD, fd);\n+        PlatformDependent.putLong(sqe + SQE_OFFSET_FIELD, offset);\n+        PlatformDependent.putLong(sqe + SQE_ADDRESS_FIELD, bufferAddress);\n+        PlatformDependent.putInt(sqe + SQE_LEN_FIELD, length);\n+        PlatformDependent.putInt(sqe + SQE_RW_FLAGS_FIELD, rwFlags);\n+        long userData = convertToUserData(op, fd, rwFlags);\n+        PlatformDependent.putLong(sqe + SQE_USER_DATA_FIELD, userData);\n         // pad field array -> all fields should be zero\n-        long offsetIndex = 0;\n-        for (int i = 0; i < 3; i++) {\n-            PlatformDependent.putLong(sqe + SQE_PAD_FIELD + offsetIndex, 0);\n-            offsetIndex += 8;\n-        }\n+//        long offsetIndex = 0;\n+//        for (int i = 0; i < 3; i++) {\n+//            PlatformDependent.putLong(sqe + SQE_PAD_FIELD + offsetIndex, 0);\n+//            offsetIndex += 8;\n+//        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b86f254f48063cf1863fe622e5803cd55a5a1f78"}, "originalPosition": 167}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzY3NDAzOnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringSubmissionQueue.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNTo1ODowOVrOHOj4xQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNTo1ODowOVrOHOj4xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAzMDA4NQ==", "bodyText": "should as remove argument in JNI as well otherweise it wouldn't compile it", "url": "https://github.com/netty/netty/pull/10544#discussion_r485030085", "createdAt": "2020-09-08T15:58:09Z", "author": {"login": "1Jo1"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringSubmissionQueue.java", "diffHunk": "@@ -51,121 +48,89 @@\n     //these unsigned integer pointers(shared with the kernel) will be changed by the kernel\n     private final long kHeadAddress;\n     private final long kTailAddress;\n-    private final long kRingMaskAddress;\n-    private final long kRingEntriesAddress;\n-    private final long fFlagsAdress;\n     private final long kDroppedAddress;\n     private final long arrayAddress;\n \n     private final long submissionQueueArrayAddress;\n \n-    private long sqeHead;\n-    private long sqeTail;\n+    private final int ringEntries;\n+    private final int ringMask; // = ringEntries - 1\n \n     private final int ringSize;\n     private final long ringAddress;\n     private final int ringFd;\n \n-    private final ByteBuffer timeoutMemory;\n     private final long timeoutMemoryAddress;\n \n-    //private int sqeSubmitCounter;\n+    private int head;\n+    private int tail;\n \n     IOUringSubmissionQueue(long kHeadAddress, long kTailAddress, long kRingMaskAddress, long kRingEntriesAddress,\n-                           long fFlagsAdress, long kDroppedAddress, long arrayAddress,\n-                           long submissionQueueArrayAddress, int ringSize,\n+                           long kDroppedAddress, long arrayAddress, long submissionQueueArrayAddress, int ringSize,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de666589c974738093af9cf2fc08736e9b4faac5"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzY4OTI4OnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/c/netty_io_uring_native.c", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjowMTozNlrOHOkCHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjowMTozNlrOHOkCHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAzMjQ3Ng==", "bodyText": "but I need that for SQPOLL for wakeup", "url": "https://github.com/netty/netty/pull/10544#discussion_r485032476", "createdAt": "2020-09-08T16:01:36Z", "author": {"login": "1Jo1"}, "path": "transport-native-io_uring/src/main/c/netty_io_uring_native.c", "diffHunk": "@@ -300,11 +298,13 @@ static jobject netty_io_uring_setup(JNIEnv *env, jclass class1, jint entries) {\n     io_uring_ring.sq.sqe_head = 0;\n     setup_io_uring(ring_fd, &io_uring_ring, &p);\n \n+    // Later may want to consider using io_uring_ring.sq.kflags", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de666589c974738093af9cf2fc08736e9b4faac5"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzcwMjkwOnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringSubmissionQueue.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjowNDo1N1rOHOkKqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjowNDo1N1rOHOkKqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAzNDY2NA==", "bodyText": "I think we should add comment as it's not really clear that putIntOrdered is a release memory barrier", "url": "https://github.com/netty/netty/pull/10544#discussion_r485034664", "createdAt": "2020-09-08T16:04:57Z", "author": {"login": "1Jo1"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringSubmissionQueue.java", "diffHunk": "@@ -181,157 +146,51 @@ public boolean addPollOut(int fd) {\n     }\n \n     private boolean addPoll(int fd, int pollMask) {\n-        long sqe = 0;\n-        boolean submitted = false;\n-        while (sqe == 0) {\n-            sqe = getSqe();\n-\n-            if (sqe == 0) {\n-                submit();\n-                submitted = true;\n-            }\n-        }\n-\n-        setData(sqe, (byte) Native.IORING_OP_POLL_ADD, pollMask, fd, 0, 0, 0);\n-        return submitted;\n+        return enqueueSqe(Native.IORING_OP_POLL_ADD, pollMask, fd, 0, 0, 0);\n     }\n \n     //return true -> submit() was called\n     public boolean addRead(int fd, long bufferAddress, int pos, int limit) {\n-        long sqe = 0;\n-        boolean submitted = false;\n-        while (sqe == 0) {\n-            sqe = getSqe();\n-\n-            if (sqe == 0) {\n-                submit();\n-                submitted = true;\n-            }\n-        }\n-        setData(sqe, (byte) Native.IORING_OP_READ, 0, fd, bufferAddress + pos, limit - pos, 0);\n-        return submitted;\n+        return enqueueSqe(Native.IORING_OP_READ, 0, fd, bufferAddress + pos, limit - pos, 0);\n     }\n \n     public boolean addWrite(int fd, long bufferAddress, int pos, int limit) {\n-        long sqe = 0;\n-        boolean submitted = false;\n-        while (sqe == 0) {\n-            sqe = getSqe();\n-\n-            if (sqe == 0) {\n-                submit();\n-                submitted = true;\n-            }\n-        }\n-        setData(sqe, (byte) Native.IORING_OP_WRITE, 0, fd, bufferAddress + pos, limit - pos, 0);\n-        return submitted;\n+        return enqueueSqe(Native.IORING_OP_WRITE, 0, fd, bufferAddress + pos, limit - pos, 0);\n     }\n \n     public boolean addAccept(int fd) {\n-        long sqe = 0;\n-        boolean submitted = false;\n-        while (sqe == 0) {\n-            sqe = getSqe();\n-\n-            if (sqe == 0) {\n-                submit();\n-                submitted = true;\n-            }\n-        }\n-        setData(sqe, (byte) Native.IORING_OP_ACCEPT, 0, fd, 0, 0, 0);\n-        return submitted;\n+        return enqueueSqe(Native.IORING_OP_ACCEPT, Native.SOCK_NONBLOCK | Native.SOCK_CLOEXEC, fd, 0, 0, 0);\n     }\n \n     //fill the address which is associated with server poll link user_data\n     public boolean addPollRemove(int fd, int pollMask) {\n-        long sqe = 0;\n-        boolean submitted = false;\n-        while (sqe == 0) {\n-            sqe = getSqe();\n-\n-            if (sqe == 0) {\n-                submit();\n-                submitted = true;\n-            }\n-        }\n-        setData(sqe, (byte) Native.IORING_OP_POLL_REMOVE, pollMask, fd, 0, 0, 0);\n-\n-        return submitted;\n+        return enqueueSqe(Native.IORING_OP_POLL_REMOVE, 0, fd,\n+                convertToUserData(Native.IORING_OP_POLL_ADD, fd, pollMask), 0, 0);\n     }\n \n     public boolean addConnect(int fd, long socketAddress, long socketAddressLength) {\n-        long sqe = 0;\n-        boolean submitted = false;\n-        while (sqe == 0) {\n-            sqe = getSqe();\n-\n-            if (sqe == 0) {\n-                submit();\n-                submitted = true;\n-            }\n-        }\n-        setData(sqe, (byte) Native.IORING_OP_CONNECT, 0, fd, socketAddress, 0, socketAddressLength);\n-\n-        return submitted;\n+        return enqueueSqe(Native.IORING_OP_CONNECT, 0, fd, socketAddress, 0, socketAddressLength);\n     }\n \n     public boolean addWritev(int fd, long iovecArrayAddress, int length) {\n-        long sqe = 0;\n-        boolean submitted = false;\n-        while (sqe == 0) {\n-            sqe = getSqe();\n-\n-            if (sqe == 0) {\n-                submit();\n-                submitted = true;\n-            }\n-        }\n-        setData(sqe, (byte) Native.IORING_OP_WRITEV, 0, fd, iovecArrayAddress, length, 0);\n-\n-        return submitted;\n-    }\n-\n-    private int flushSqe() {\n-        long kTail = toUnsignedLong(PlatformDependent.getInt(kTailAddress));\n-        long kHead = toUnsignedLong(PlatformDependent.getIntVolatile(kHeadAddress));\n-        long kRingMask = toUnsignedLong(PlatformDependent.getInt(kRingMaskAddress));\n-\n-        logger.trace(\"Ktail: {}\", kTail);\n-        logger.trace(\"Ktail: {}\", kHead);\n-        logger.trace(\"SqeHead: {}\", sqeHead);\n-        logger.trace(\"SqeTail: {}\", sqeTail);\n-\n-        if (sqeHead == sqeTail) {\n-            return (int) (kTail - kHead);\n-        }\n-\n-        long toSubmit = sqeTail - sqeHead;\n-        while (toSubmit > 0) {\n-            long index = kTail & kRingMask;\n-\n-            PlatformDependent.putInt(arrayAddress + index * INT_SIZE, (int) (sqeHead & kRingMask));\n-\n-            sqeHead++;\n-            kTail++;\n-            toSubmit--;\n-        }\n-\n-        //release\n-        PlatformDependent.putIntOrdered(kTailAddress, (int) kTail);\n-\n-        return (int) (kTail - kHead);\n+        return enqueueSqe(Native.IORING_OP_WRITEV, 0, fd, iovecArrayAddress, length, 0);\n     }\n \n     public void submit() {\n-        int submitted = flushSqe();\n-        logger.trace(\"Submitted: {}\", submitted);\n-        if (submitted > 0) {\n-            int ret = Native.ioUringEnter(ringFd, submitted, 0, 0);\n-            if (ret < 0) {\n-                throw new RuntimeException(\"ioUringEnter syscall\");\n+        int submit = tail - head;\n+        if (submit > 0) {\n+            PlatformDependent.putIntOrdered(kTailAddress, tail);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de666589c974738093af9cf2fc08736e9b4faac5"}, "originalPosition": 349}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMzcxNDM4OnYy", "diffSide": "RIGHT", "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringSubmissionQueue.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjowNzo0N1rOHOkRqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNjowNzo0N1rOHOkRqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTAzNjQ1Nw==", "bodyText": "here the same putIntOrdered ->  acquire memory barrier", "url": "https://github.com/netty/netty/pull/10544#discussion_r485036457", "createdAt": "2020-09-08T16:07:47Z", "author": {"login": "1Jo1"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringSubmissionQueue.java", "diffHunk": "@@ -181,157 +146,51 @@ public boolean addPollOut(int fd) {\n     }\n \n     private boolean addPoll(int fd, int pollMask) {\n-        long sqe = 0;\n-        boolean submitted = false;\n-        while (sqe == 0) {\n-            sqe = getSqe();\n-\n-            if (sqe == 0) {\n-                submit();\n-                submitted = true;\n-            }\n-        }\n-\n-        setData(sqe, (byte) Native.IORING_OP_POLL_ADD, pollMask, fd, 0, 0, 0);\n-        return submitted;\n+        return enqueueSqe(Native.IORING_OP_POLL_ADD, pollMask, fd, 0, 0, 0);\n     }\n \n     //return true -> submit() was called\n     public boolean addRead(int fd, long bufferAddress, int pos, int limit) {\n-        long sqe = 0;\n-        boolean submitted = false;\n-        while (sqe == 0) {\n-            sqe = getSqe();\n-\n-            if (sqe == 0) {\n-                submit();\n-                submitted = true;\n-            }\n-        }\n-        setData(sqe, (byte) Native.IORING_OP_READ, 0, fd, bufferAddress + pos, limit - pos, 0);\n-        return submitted;\n+        return enqueueSqe(Native.IORING_OP_READ, 0, fd, bufferAddress + pos, limit - pos, 0);\n     }\n \n     public boolean addWrite(int fd, long bufferAddress, int pos, int limit) {\n-        long sqe = 0;\n-        boolean submitted = false;\n-        while (sqe == 0) {\n-            sqe = getSqe();\n-\n-            if (sqe == 0) {\n-                submit();\n-                submitted = true;\n-            }\n-        }\n-        setData(sqe, (byte) Native.IORING_OP_WRITE, 0, fd, bufferAddress + pos, limit - pos, 0);\n-        return submitted;\n+        return enqueueSqe(Native.IORING_OP_WRITE, 0, fd, bufferAddress + pos, limit - pos, 0);\n     }\n \n     public boolean addAccept(int fd) {\n-        long sqe = 0;\n-        boolean submitted = false;\n-        while (sqe == 0) {\n-            sqe = getSqe();\n-\n-            if (sqe == 0) {\n-                submit();\n-                submitted = true;\n-            }\n-        }\n-        setData(sqe, (byte) Native.IORING_OP_ACCEPT, 0, fd, 0, 0, 0);\n-        return submitted;\n+        return enqueueSqe(Native.IORING_OP_ACCEPT, Native.SOCK_NONBLOCK | Native.SOCK_CLOEXEC, fd, 0, 0, 0);\n     }\n \n     //fill the address which is associated with server poll link user_data\n     public boolean addPollRemove(int fd, int pollMask) {\n-        long sqe = 0;\n-        boolean submitted = false;\n-        while (sqe == 0) {\n-            sqe = getSqe();\n-\n-            if (sqe == 0) {\n-                submit();\n-                submitted = true;\n-            }\n-        }\n-        setData(sqe, (byte) Native.IORING_OP_POLL_REMOVE, pollMask, fd, 0, 0, 0);\n-\n-        return submitted;\n+        return enqueueSqe(Native.IORING_OP_POLL_REMOVE, 0, fd,\n+                convertToUserData(Native.IORING_OP_POLL_ADD, fd, pollMask), 0, 0);\n     }\n \n     public boolean addConnect(int fd, long socketAddress, long socketAddressLength) {\n-        long sqe = 0;\n-        boolean submitted = false;\n-        while (sqe == 0) {\n-            sqe = getSqe();\n-\n-            if (sqe == 0) {\n-                submit();\n-                submitted = true;\n-            }\n-        }\n-        setData(sqe, (byte) Native.IORING_OP_CONNECT, 0, fd, socketAddress, 0, socketAddressLength);\n-\n-        return submitted;\n+        return enqueueSqe(Native.IORING_OP_CONNECT, 0, fd, socketAddress, 0, socketAddressLength);\n     }\n \n     public boolean addWritev(int fd, long iovecArrayAddress, int length) {\n-        long sqe = 0;\n-        boolean submitted = false;\n-        while (sqe == 0) {\n-            sqe = getSqe();\n-\n-            if (sqe == 0) {\n-                submit();\n-                submitted = true;\n-            }\n-        }\n-        setData(sqe, (byte) Native.IORING_OP_WRITEV, 0, fd, iovecArrayAddress, length, 0);\n-\n-        return submitted;\n-    }\n-\n-    private int flushSqe() {\n-        long kTail = toUnsignedLong(PlatformDependent.getInt(kTailAddress));\n-        long kHead = toUnsignedLong(PlatformDependent.getIntVolatile(kHeadAddress));\n-        long kRingMask = toUnsignedLong(PlatformDependent.getInt(kRingMaskAddress));\n-\n-        logger.trace(\"Ktail: {}\", kTail);\n-        logger.trace(\"Ktail: {}\", kHead);\n-        logger.trace(\"SqeHead: {}\", sqeHead);\n-        logger.trace(\"SqeTail: {}\", sqeTail);\n-\n-        if (sqeHead == sqeTail) {\n-            return (int) (kTail - kHead);\n-        }\n-\n-        long toSubmit = sqeTail - sqeHead;\n-        while (toSubmit > 0) {\n-            long index = kTail & kRingMask;\n-\n-            PlatformDependent.putInt(arrayAddress + index * INT_SIZE, (int) (sqeHead & kRingMask));\n-\n-            sqeHead++;\n-            kTail++;\n-            toSubmit--;\n-        }\n-\n-        //release\n-        PlatformDependent.putIntOrdered(kTailAddress, (int) kTail);\n-\n-        return (int) (kTail - kHead);\n+        return enqueueSqe(Native.IORING_OP_WRITEV, 0, fd, iovecArrayAddress, length, 0);\n     }\n \n     public void submit() {\n-        int submitted = flushSqe();\n-        logger.trace(\"Submitted: {}\", submitted);\n-        if (submitted > 0) {\n-            int ret = Native.ioUringEnter(ringFd, submitted, 0, 0);\n-            if (ret < 0) {\n-                throw new RuntimeException(\"ioUringEnter syscall\");\n+        int submit = tail - head;\n+        if (submit > 0) {\n+            PlatformDependent.putIntOrdered(kTailAddress, tail);\n+            int ret = Native.ioUringEnter(ringFd, submit, 0, 0);\n+            head = PlatformDependent.getIntVolatile(kHeadAddress);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de666589c974738093af9cf2fc08736e9b4faac5"}, "originalPosition": 351}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3714, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}