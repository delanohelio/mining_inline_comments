{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4ODEyMTM5", "number": 10648, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDoxMzoyM1rOErMzkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNjo1MToyOVrOEsQX1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNzM0MDM1OnYy", "diffSide": "RIGHT", "path": "buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDoxMzoyM1rOHd1dpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxNDozMToxNlrOHd2VpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA0NjY5Mg==", "bodyText": "Since this could be on hot code paths I'm curious whether using & instead of && here would make any noticeable difference performance-wise", "url": "https://github.com/netty/netty/pull/10648#discussion_r501046692", "createdAt": "2020-10-07T14:13:23Z", "author": {"login": "njhill"}, "path": "buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java", "diffHunk": "@@ -286,11 +286,11 @@ public ByteBuf ensureWritable(int minWritableBytes) {\n     final void ensureWritable0(int minWritableBytes) {\n         final int writerIndex = writerIndex();\n         final int targetCapacity = writerIndex + minWritableBytes;\n-        if (targetCapacity <= capacity()) {\n+        if (targetCapacity >= 0 && targetCapacity <= capacity()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "05ed2cfb5fd181943431f905fc41d12110af5715"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA2MTAyOA==", "bodyText": "I'm not very familiar with optimisation at this level, but I don't think it'd hurt. We'd be evaluating the second condition in almost every case anyway.", "url": "https://github.com/netty/netty/pull/10648#discussion_r501061028", "createdAt": "2020-10-07T14:31:16Z", "author": {"login": "mkavanagh"}, "path": "buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java", "diffHunk": "@@ -286,11 +286,11 @@ public ByteBuf ensureWritable(int minWritableBytes) {\n     final void ensureWritable0(int minWritableBytes) {\n         final int writerIndex = writerIndex();\n         final int targetCapacity = writerIndex + minWritableBytes;\n-        if (targetCapacity <= capacity()) {\n+        if (targetCapacity >= 0 && targetCapacity <= capacity()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTA0NjY5Mg=="}, "originalCommit": {"oid": "05ed2cfb5fd181943431f905fc41d12110af5715"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0NTQ1NjIyOnYy", "diffSide": "RIGHT", "path": "buffer/src/test/java/io/netty/buffer/AbstractByteBufTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwOTozMDowNlrOHfCT4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOVQwOTozMDowNlrOHfCT4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjMwNTc2MA==", "bodyText": "Buffer release should be in a finally clause.", "url": "https://github.com/netty/netty/pull/10648#discussion_r502305760", "createdAt": "2020-10-09T09:30:06Z", "author": {"login": "chrisvest"}, "path": "buffer/src/test/java/io/netty/buffer/AbstractByteBufTest.java", "diffHunk": "@@ -4924,4 +4924,18 @@ public void testMaxFastWritableBytes() {\n         assertEquals(50, buffer.maxFastWritableBytes());\n         buffer.release();\n     }\n+\n+    @Test\n+    public void testEnsureWritableIntegerOverflow() {\n+        ByteBuf buffer = newBuffer(CAPACITY);\n+        buffer.writerIndex(buffer.readerIndex());\n+        buffer.writeByte(1);\n+        try {\n+            buffer.ensureWritable(Integer.MAX_VALUE);\n+            fail();\n+        } catch (IndexOutOfBoundsException e) {\n+            // expected\n+            buffer.release();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8751a7b4bbd154a7da5ffa280de425e0b3059c6c"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODQxMDQ1OnYy", "diffSide": "RIGHT", "path": "buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNjo1MToyOVrOHfdxhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQxMjo1OTo1MlrOHffwmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1NTcxOQ==", "bodyText": "Can we please add a comment that & is really what we want here and not && ? This will make it easier in the future to not get confused by this.", "url": "https://github.com/netty/netty/pull/10648#discussion_r502755719", "createdAt": "2020-10-10T06:51:29Z", "author": {"login": "normanmaurer"}, "path": "buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java", "diffHunk": "@@ -286,11 +286,11 @@ public ByteBuf ensureWritable(int minWritableBytes) {\n     final void ensureWritable0(int minWritableBytes) {\n         final int writerIndex = writerIndex();\n         final int targetCapacity = writerIndex + minWritableBytes;\n-        if (targetCapacity <= capacity()) {\n+        if (targetCapacity >= 0 & targetCapacity <= capacity()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "952bbd7a974fda539407f3dbcb143b18af75602a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc4ODI0OQ==", "bodyText": "added a comment with rationale", "url": "https://github.com/netty/netty/pull/10648#discussion_r502788249", "createdAt": "2020-10-10T12:59:52Z", "author": {"login": "mkavanagh"}, "path": "buffer/src/main/java/io/netty/buffer/AbstractByteBuf.java", "diffHunk": "@@ -286,11 +286,11 @@ public ByteBuf ensureWritable(int minWritableBytes) {\n     final void ensureWritable0(int minWritableBytes) {\n         final int writerIndex = writerIndex();\n         final int targetCapacity = writerIndex + minWritableBytes;\n-        if (targetCapacity <= capacity()) {\n+        if (targetCapacity >= 0 & targetCapacity <= capacity()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1NTcxOQ=="}, "originalCommit": {"oid": "952bbd7a974fda539407f3dbcb143b18af75602a"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3601, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}