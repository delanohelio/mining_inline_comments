{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2NjUxMjAy", "number": 10275, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNjoxODo0OVrOD7uhyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNjoxODo0OVrOD7uhyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzOTU0ODkwOnYy", "diffSide": "RIGHT", "path": "handler/src/test/java/io/netty/handler/ssl/SSLEngineTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNjoxODo0OVrOGUOlFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxNjoxODo0OVrOGUOlFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzg2MzU3NQ==", "bodyText": "Consider explicitly configuring .clientAuth(ClientAuth.NONE)", "url": "https://github.com/netty/netty/pull/10275#discussion_r423863575", "createdAt": "2020-05-12T16:18:49Z", "author": {"login": "idelpivnitskiy"}, "path": "handler/src/test/java/io/netty/handler/ssl/SSLEngineTest.java", "diffHunk": "@@ -3334,6 +3334,67 @@ protected void engineInit(ManagerFactoryParameters managerFactoryParameters) {\n         }\n     }\n \n+    @Test\n+    public void testSessionLocalWhenNonMutualWithKeyManager() throws Exception {\n+        testSessionLocalWhenNonMutual(true);\n+    }\n+\n+    @Test\n+    public void testSessionLocalWhenNonMutualWithoutKeyManager() throws Exception {\n+        testSessionLocalWhenNonMutual(false);\n+    }\n+\n+    private void testSessionLocalWhenNonMutual(boolean useKeyManager) throws Exception {\n+        final SelfSignedCertificate ssc = new SelfSignedCertificate();\n+\n+        SslContextBuilder clientSslCtxBuilder = SslContextBuilder.forClient()\n+                .trustManager(InsecureTrustManagerFactory.INSTANCE)\n+                .sslProvider(sslClientProvider())\n+                .sslContextProvider(clientSslContextProvider())\n+                .protocols(protocols())\n+                .ciphers(ciphers());\n+\n+        if (useKeyManager) {\n+            clientSslCtxBuilder.keyManager(newKeyManagerFactory(ssc));\n+        } else {\n+            clientSslCtxBuilder.keyManager(ssc.certificate(), ssc.privateKey());\n+        }\n+        clientSslCtx = wrapContext(clientSslCtxBuilder.build());\n+\n+        final SslContextBuilder serverSslCtxBuilder;\n+        if (useKeyManager) {\n+            serverSslCtxBuilder = SslContextBuilder.forServer(newKeyManagerFactory(ssc));\n+        } else {\n+            serverSslCtxBuilder = SslContextBuilder.forServer(ssc.certificate(), ssc.privateKey());\n+        }\n+        serverSslCtxBuilder.trustManager(InsecureTrustManagerFactory.INSTANCE)\n+                .sslProvider(sslServerProvider())\n+                .sslContextProvider(serverSslContextProvider())\n+                .protocols(protocols())\n+                .ciphers(ciphers());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dc1284c1f60ccdd846c0f8dab3524d3595bb22c"}, "originalPosition": 41}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3448, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}