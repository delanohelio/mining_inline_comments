{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4MTM0NDk1", "number": 10400, "title": "Improve MqttMessageType::valueOf cost", "bodyText": "Motivation:\nMqttMessageType::valueOf has O(N) cost\nModifications:\nMqttMessageType::valueOf uses a const lookup table\nResult:\nMqttMessageType::valueOf has O(1) cost", "createdAt": "2020-07-13T09:35:32Z", "url": "https://github.com/netty/netty/pull/10400", "merged": true, "mergeCommit": {"oid": "d2c03c9a29ecb3ff5fb2d203e314fad88fa07509"}, "closed": true, "closedAt": "2020-08-31T08:32:34Z", "author": {"login": "franz1981"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc0eKdLgFqTQ0NzA5MDY0Mw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdENhZzgFqTQ3ODM3NDM3OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3MDkwNjQz", "url": "https://github.com/netty/netty/pull/10400#pullrequestreview-447090643", "createdAt": "2020-07-13T09:37:38Z", "commit": {"oid": "fddf8a42d9e354d84a3a6486497891cb4b7a257a"}, "state": "DISMISSED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwOTozNzozOVrOGwg2pQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwOTozNzozOVrOGwg2pQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUyMzEwOQ==", "bodyText": "nit: remove () around VALUES.length", "url": "https://github.com/netty/netty/pull/10400#discussion_r453523109", "createdAt": "2020-07-13T09:37:39Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageType.java", "diffHunk": "@@ -46,12 +63,10 @@ public int value() {\n     }\n \n     public static MqttMessageType valueOf(int type) {\n-        for (MqttMessageType t : values()) {\n-            if (t.value == type) {\n-                return t;\n-            }\n+        if (type <= 0 || type >= (VALUES.length)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fddf8a42d9e354d84a3a6486497891cb4b7a257a"}, "originalPosition": 32}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fddf8a42d9e354d84a3a6486497891cb4b7a257a", "author": {"user": {"login": "franz1981", "name": "Francesco Nigro"}}, "url": "https://github.com/netty/netty/commit/fddf8a42d9e354d84a3a6486497891cb4b7a257a", "committedDate": "2020-07-13T09:33:00Z", "message": "Improve MqttMessageType::valueOf cost\n\nMotivation:\n\nMqttMessageType::valueOf has O(N) cost\n\nModifications:\n\nMqttMessageType::valueOf uses a const lookup table\n\nResult:\n\nMqttMessageType::valueOf has O(1) cost"}, "afterCommit": {"oid": "316e8ef5d085e6263fc97987434f3512cb847163", "author": {"user": {"login": "franz1981", "name": "Francesco Nigro"}}, "url": "https://github.com/netty/netty/commit/316e8ef5d085e6263fc97987434f3512cb847163", "committedDate": "2020-07-13T09:45:15Z", "message": "Improve MqttMessageType::valueOf cost\n\nMotivation:\n\nMqttMessageType::valueOf has O(N) cost\n\nModifications:\n\nMqttMessageType::valueOf uses a const lookup table\n\nResult:\n\nMqttMessageType::valueOf has O(1) cost"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3MjQzMDY1", "url": "https://github.com/netty/netty/pull/10400#pullrequestreview-447243065", "createdAt": "2020-07-13T13:20:48Z", "commit": {"oid": "316e8ef5d085e6263fc97987434f3512cb847163"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzoyMDo0OFrOGwoOEA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMzoyMDo0OFrOGwoOEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzY0Mzc5Mg==", "bodyText": "What about simple switch statement? In that case we don't need to create and hold static variable.", "url": "https://github.com/netty/netty/pull/10400#discussion_r453643792", "createdAt": "2020-07-13T13:20:48Z", "author": {"login": "doom369"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageType.java", "diffHunk": "@@ -46,12 +63,10 @@ public int value() {\n     }\n \n     public static MqttMessageType valueOf(int type) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "316e8ef5d085e6263fc97987434f3512cb847163"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3ODQ5Mzcx", "url": "https://github.com/netty/netty/pull/10400#pullrequestreview-447849371", "createdAt": "2020-07-14T07:19:05Z", "commit": {"oid": "316e8ef5d085e6263fc97987434f3512cb847163"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNzoxOTowNVrOGxHVMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQwNzoxOTowNVrOGxHVMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDE1MzUyMQ==", "bodyText": "you can use for each here", "url": "https://github.com/netty/netty/pull/10400#discussion_r454153521", "createdAt": "2020-07-14T07:19:05Z", "author": {"login": "doom369"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageType.java", "diffHunk": "@@ -35,6 +35,23 @@\n     PINGRESP(13),\n     DISCONNECT(14);\n \n+    private static final MqttMessageType[] VALUES;\n+\n+    static {\n+        // this prevent values to be assigned with the wrong order\n+        // and ensure valueOf to work fine\n+        final MqttMessageType[] values = values();\n+        VALUES = new MqttMessageType[values.length + 1];\n+        for (int i = 0; i < values.length; i++) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "316e8ef5d085e6263fc97987434f3512cb847163"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUwNzY4MDMw", "url": "https://github.com/netty/netty/pull/10400#pullrequestreview-450768030", "createdAt": "2020-07-17T15:47:50Z", "commit": {"oid": "e6c575b6f5ae1a550a5d894834e90969a834b1b3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNTo0Nzo1MFrOGzYH3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QxNTo0Nzo1MFrOGzYH3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjUyNTc5MA==", "bodyText": "This is going to cause a lot of contention on this.next. Why not just use a for loop and iterate over all of them, instead of trying to do measure just a single one?", "url": "https://github.com/netty/netty/pull/10400#discussion_r456525790", "createdAt": "2020-07-17T15:47:50Z", "author": {"login": "alblue"}, "path": "microbench/src/main/java/io/netty/handler/codec/mqtt/MqttMessageTypeValueOfBench.java", "diffHunk": "@@ -0,0 +1,175 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.mqtt;\n+\n+import io.netty.microbench.util.AbstractMicrobenchmark;\n+import org.jctools.util.Pow2;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@Warmup(iterations = 5, time = 5)\n+@Measurement(iterations = 5, time = 5)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+public class MqttMessageTypeValueOfBench extends AbstractMicrobenchmark {\n+\n+    private static final int[] DATASET = new int[] {\n+            9, 5, 2, 9, 8, 4, 3, 7, 7, 9, 6, 11, 10, 4, 10, 6, 12, 6, 14, 8, 2, 2, 5, 7, 13, 3, 10, 12, 6, 2, 8, 1, 6,\n+            4, 10, 8, 13, 9, 9, 2, 7, 12, 2, 3, 12, 9, 3, 12,\n+            11, 4, 10, 11, 9, 10, 5, 9, 4, 14, 6, 10, 13, 9, 12, 7, 5, 3, 1, 2, 7, 11, 1, 8, 4, 9, 5, 11, 14, 6, 3, 4,\n+            3, 1, 12, 9, 6, 1, 10, 2, 9, 5, 10, 4, 5, 1, 8,\n+            2, 11, 9, 7, 10, 14, 9, 12, 14, 6, 13, 6, 14, 6, 1, 3, 1, 10, 13, 13, 2, 2, 8, 7, 10, 9, 9, 4, 7, 13, 4, 10,\n+            3, 14, 14, 4, 3, 6, 7, 13, 13, 2, 3, 13, 5, 2,\n+            14, 11, 1, 5, 6, 14, 13, 12, 3, 9, 10, 1, 4, 1, 1, 13, 5, 8, 1, 8, 2, 7, 9, 14, 13, 2, 11, 10, 11, 5, 9, 13,\n+            13, 12, 11, 6, 1, 7, 11, 1, 11, 7, 8, 1, 13,\n+            12, 1, 5, 10, 2, 13, 4, 8, 2, 14, 8, 8, 9, 14, 12, 11, 1, 10, 6, 7, 2, 1, 12, 11, 8, 9, 10, 13, 2, 12, 3, 8,\n+            1, 13, 11, 8, 6, 4, 5, 8, 5, 12, 10, 9, 4, 7,\n+            2, 1, 11, 6, 7, 11, 5, 1, 5, 2, 7, 7, 14, 14, 3, 2, 1, 8, 5, 7, 4, 13, 13, 7, 8, 2, 14, 1, 12, 7, 8, 8, 3,\n+            9, 8, 1, 11, 10, 13, 10, 2, 1, 12, 5, 3, 3, 12, 5,\n+            7, 12, 13, 10, 14, 9, 2, 4, 12, 4, 10, 10, 2, 9, 2, 7, 5, 6, 2, 14, 10, 3, 4, 5, 8, 1, 14, 13, 1, 2, 5, 11,\n+            8, 6, 8, 3, 8, 13, 12, 8, 2, 12, 6, 2, 5, 4, 13,\n+            5, 11, 11, 5, 12, 9, 9, 9, 6, 4, 4, 11, 14, 12, 9, 3, 4, 12, 10, 10, 6, 3, 2, 12, 3, 2, 10, 8, 7, 10, 12,\n+            13, 1, 2, 7, 13, 2, 13, 4, 13, 14, 10, 14, 7, 5,\n+            11, 10, 9, 9, 1, 9, 10, 3, 9, 1, 13, 7, 9, 7, 1, 8, 14, 2, 6, 11, 2, 2, 11, 4, 10, 10, 9, 4, 4, 13, 7, 2, 1,\n+            4, 14, 6, 11, 5, 2, 5, 9, 5, 8, 4, 5, 6, 2, 12, 2,\n+            5, 2, 14, 3, 11, 5, 4, 14, 14, 2, 7, 7, 2, 3, 11, 2, 10, 9, 13, 3, 4, 2, 10, 1, 2, 10, 7, 7, 6, 8, 8, 12,\n+            14, 8, 13, 1, 9, 5, 9, 1, 14, 2, 5, 5, 5, 3, 13, 11,\n+            9, 6, 11, 1, 10, 13, 4, 7, 9, 6, 3, 4, 11, 8, 13, 3, 13, 12, 7, 7, 5, 9, 11, 3, 9, 6, 5, 6, 6, 11, 9, 2, 7,\n+            1, 12, 7, 5, 8, 11, 4, 9, 10, 11, 12, 7, 8, 1, 2,\n+            3, 14, 3, 9, 11, 9, 7, 4, 4, 4, 8, 4, 4, 2, 5, 8, 2, 11, 7, 13, 2, 14, 3, 6, 7, 14, 12, 6, 9, 11, 10, 9, 6,\n+            10, 6, 14, 4, 1, 7, 12, 4, 13, 10, 2, 2, 3, 3, 14,\n+            14, 2, 9, 12, 3, 9, 7, 6, 12, 8, 9, 5, 11, 13, 14, 14, 4, 1, 11, 14, 5, 9, 7, 14, 7, 13, 7, 14, 3, 14, 2, 8,\n+            2, 5, 10, 12, 14, 9, 11, 3, 14, 8, 12, 12, 5, 2,\n+            6, 2, 1, 14, 12, 8, 14, 1, 11, 14, 8, 9, 9, 1, 12, 13, 7, 8, 10, 5, 8, 5, 14, 13, 14, 3, 14, 2, 9, 12, 3,\n+            10, 3, 2, 4, 3, 5, 5, 10, 10, 13, 10, 7, 6, 4, 2, 10,\n+            8, 14, 2, 7, 1, 2, 7, 13, 2, 3, 6, 14, 3, 8, 12, 3, 4, 12, 6, 3, 10, 6, 14, 9, 1, 6, 3, 14, 7, 1, 7, 2, 12,\n+            9, 5, 9, 6, 13, 5, 11, 13, 11, 10, 1, 14, 9, 13, 8,\n+            12, 14, 14, 8, 13, 2, 6, 14, 2, 2, 9, 12, 9, 7, 2, 11, 4, 6, 8, 10, 12, 10, 11, 2, 9, 9, 5, 4, 3, 4, 4, 10,\n+            3, 1, 12, 13, 9, 8, 1, 9, 9, 4, 2, 7, 3, 4, 11, 11,\n+            8, 10, 14, 5, 14, 1, 10, 10, 13, 5, 6, 13, 14, 5, 7, 11, 4, 13, 3, 14, 7, 2, 10, 13, 2, 4, 14, 5, 1, 12, 3,\n+            13, 11, 2, 11, 14, 2, 5, 8, 13, 4, 13, 13, 3, 3,\n+            3, 13, 6, 11, 5, 3, 2, 13, 9, 2, 10, 8, 3, 11, 4, 6, 12, 14, 6, 2, 14, 1, 2, 6, 8, 4, 12, 8, 11, 9, 1, 7, 1,\n+            10, 4, 10, 9, 9, 3, 11, 5, 10, 8, 9, 4, 13, 4,\n+            5, 7, 12, 14, 12, 6, 1, 2, 10, 9, 10, 12, 1, 2, 6, 9, 5, 13, 4, 6, 11, 7, 1, 3, 10, 2, 1, 13, 14, 3, 5, 5,\n+            5, 7, 14, 9, 9, 3, 12, 1, 1, 1, 3, 12, 6, 9, 7, 8, 1,\n+            8, 2, 8, 13, 1, 11, 11, 1, 4, 10, 4, 3, 10, 3, 2, 2, 8, 2, 4, 13, 14, 4, 12, 14, 7, 6, 7, 13, 7, 11, 13, 12,\n+            14, 1, 14, 3, 4, 13, 12, 10, 5, 12, 12, 4, 5, 6,\n+            9, 12, 13, 3, 4, 13, 8, 14, 3, 2, 8, 5, 6, 13, 8, 7, 4, 5, 8, 14, 8, 14, 7, 5, 4, 9, 12, 12, 10, 3, 1, 12,\n+            5, 1, 11, 6, 10, 5, 14, 4, 5, 13, 8, 11, 13, 4, 9,\n+            9, 7, 6, 2, 2, 5, 12, 13, 13, 6, 11, 13, 12, 10, 6, 7, 1, 2, 6, 1, 9, 10, 14, 7, 9, 2, 2, 2, 8, 8, 11, 14,\n+            12, 9, 13, 1\n+    };\n+\n+    int[] types;\n+    int mask;\n+    long next;\n+\n+    @Setup\n+    public void initDataSet() {\n+        this.types = DATASET;\n+        if (!Pow2.isPowerOfTwo(DATASET.length)) {\n+            System.err.println(\"the DATASET length should be power of 2 sized!\");\n+            System.exit(-1);\n+        }\n+        this.mask = DATASET.length - 1;\n+        this.next = 0;\n+    }\n+\n+    @Benchmark\n+    public MqttMessageType getViaArray() {\n+        long next = this.next;\n+        int nextIndex = (int) (next & mask);\n+        MqttMessageType type = MqttMessageTypeArray.valueOf(types[nextIndex]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6c575b6f5ae1a550a5d894834e90969a834b1b3"}, "originalPosition": 102}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e6c575b6f5ae1a550a5d894834e90969a834b1b3", "author": {"user": {"login": "franz1981", "name": "Francesco Nigro"}}, "url": "https://github.com/netty/netty/commit/e6c575b6f5ae1a550a5d894834e90969a834b1b3", "committedDate": "2020-07-14T08:37:33Z", "message": "Improved benchmark"}, "afterCommit": {"oid": "3cf7008d19344912d2c66be94f4fd825b1f659af", "author": {"user": {"login": "franz1981", "name": "Francesco Nigro"}}, "url": "https://github.com/netty/netty/commit/3cf7008d19344912d2c66be94f4fd825b1f659af", "committedDate": "2020-07-17T16:24:38Z", "message": "Improve MqttMessageType::valueOf cost\n\nMotivation:\n\nMqttMessageType::valueOf has O(N) cost\n\nModifications:\n\nMqttMessageType::valueOf uses a const lookup table\n\nResult:\n\nMqttMessageType::valueOf has O(1) cost"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNDc1MDYz", "url": "https://github.com/netty/netty/pull/10400#pullrequestreview-451475063", "createdAt": "2020-07-20T10:12:55Z", "commit": {"oid": "3cf7008d19344912d2c66be94f4fd825b1f659af"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMDoxMjo1NlrOG0EV1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxMDoyODowNVrOG0E8gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI1MDI2Mg==", "bodyText": "Nit: please make sure files end with line breaks.", "url": "https://github.com/netty/netty/pull/10400#discussion_r457250262", "createdAt": "2020-07-20T10:12:56Z", "author": {"login": "chrisvest"}, "path": "microbench/src/main/java/io/netty/handler/codec/mqtt/MqttMessageTypeValueOfBench.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.mqtt;\n+\n+import io.netty.microbench.util.AbstractMicrobenchmark;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.CompilerControl;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@Warmup(iterations = 5, time = 5)\n+@Measurement(iterations = 5, time = 5)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+public class MqttMessageTypeValueOfBench extends AbstractMicrobenchmark {\n+\n+    private static final int[] DATASET = new int[] {\n+            9, 5, 2, 9, 8, 4, 3, 7, 7, 9, 6, 11, 10, 4, 10, 6, 12, 6, 14, 8, 2, 2, 5, 7, 13, 3, 10, 12, 6, 2, 8, 1, 6,\n+            4, 10, 8, 13, 9, 9, 2, 7, 12, 2, 3, 12, 9, 3, 12,\n+            11, 4, 10, 11, 9, 10, 5, 9, 4, 14, 6, 10, 13, 9, 12, 7, 5, 3, 1, 2, 7, 11, 1, 8, 4, 9, 5, 11, 14, 6, 3, 4,\n+            3, 1, 12, 9, 6, 1, 10, 2, 9, 5, 10, 4, 5, 1, 8,\n+            2, 11, 9, 7, 10, 14, 9, 12, 14, 6, 13, 6, 14, 6, 1, 3, 1, 10, 13, 13, 2, 2, 8, 7, 10, 9, 9, 4, 7, 13, 4, 10,\n+            3, 14, 14, 4, 3, 6, 7, 13, 13, 2, 3, 13, 5, 2,\n+            14, 11, 1, 5, 6, 14, 13, 12, 3, 9, 10, 1, 4, 1, 1, 13, 5, 8, 1, 8, 2, 7, 9, 14, 13, 2, 11, 10, 11, 5, 9, 13,\n+            13, 12, 11, 6, 1, 7, 11, 1, 11, 7, 8, 1, 13,\n+            12, 1, 5, 10, 2, 13, 4, 8, 2, 14, 8, 8, 9, 14, 12, 11, 1, 10, 6, 7, 2, 1, 12, 11, 8, 9, 10, 13, 2, 12, 3, 8,\n+            1, 13, 11, 8, 6, 4, 5, 8, 5, 12, 10, 9, 4, 7,\n+            2, 1, 11, 6, 7, 11, 5, 1, 5, 2, 7, 7, 14, 14, 3, 2, 1, 8, 5, 7, 4, 13, 13, 7, 8, 2, 14, 1, 12, 7, 8, 8, 3,\n+            9, 8, 1, 11, 10, 13, 10, 2, 1, 12, 5, 3, 3, 12, 5,\n+            7, 12, 13, 10, 14, 9, 2, 4, 12, 4, 10, 10, 2, 9, 2, 7, 5, 6, 2, 14, 10, 3, 4, 5, 8, 1, 14, 13, 1, 2, 5, 11,\n+            8, 6, 8, 3, 8, 13, 12, 8, 2, 12, 6, 2, 5, 4, 13,\n+            5, 11, 11, 5, 12, 9, 9, 9, 6, 4, 4, 11, 14, 12, 9, 3, 4, 12, 10, 10, 6, 3, 2, 12, 3, 2, 10, 8, 7, 10, 12,\n+            13, 1, 2, 7, 13, 2, 13, 4, 13, 14, 10, 14, 7, 5,\n+            11, 10, 9, 9, 1, 9, 10, 3, 9, 1, 13, 7, 9, 7, 1, 8, 14, 2, 6, 11, 2, 2, 11, 4, 10, 10, 9, 4, 4, 13, 7, 2, 1,\n+            4, 14, 6, 11, 5, 2, 5, 9, 5, 8, 4, 5, 6, 2, 12, 2,\n+            5, 2, 14, 3, 11, 5, 4, 14, 14, 2, 7, 7, 2, 3, 11, 2, 10, 9, 13, 3, 4, 2, 10, 1, 2, 10, 7, 7, 6, 8, 8, 12,\n+            14, 8, 13, 1, 9, 5, 9, 1, 14, 2, 5, 5, 5, 3, 13, 11,\n+            9, 6, 11, 1, 10, 13, 4, 7, 9, 6, 3, 4, 11, 8, 13, 3, 13, 12, 7, 7, 5, 9, 11, 3, 9, 6, 5, 6, 6, 11, 9, 2, 7,\n+            1, 12, 7, 5, 8, 11, 4, 9, 10, 11, 12, 7, 8, 1, 2,\n+            3, 14, 3, 9, 11, 9, 7, 4, 4, 4, 8, 4, 4, 2, 5, 8, 2, 11, 7, 13, 2, 14, 3, 6, 7, 14, 12, 6, 9, 11, 10, 9, 6,\n+            10, 6, 14, 4, 1, 7, 12, 4, 13, 10, 2, 2, 3, 3, 14,\n+            14, 2, 9, 12, 3, 9, 7, 6, 12, 8, 9, 5, 11, 13, 14, 14, 4, 1, 11, 14, 5, 9, 7, 14, 7, 13, 7, 14, 3, 14, 2, 8,\n+            2, 5, 10, 12, 14, 9, 11, 3, 14, 8, 12, 12, 5, 2,\n+            6, 2, 1, 14, 12, 8, 14, 1, 11, 14, 8, 9, 9, 1, 12, 13, 7, 8, 10, 5, 8, 5, 14, 13, 14, 3, 14, 2, 9, 12, 3,\n+            10, 3, 2, 4, 3, 5, 5, 10, 10, 13, 10, 7, 6, 4, 2, 10,\n+            8, 14, 2, 7, 1, 2, 7, 13, 2, 3, 6, 14, 3, 8, 12, 3, 4, 12, 6, 3, 10, 6, 14, 9, 1, 6, 3, 14, 7, 1, 7, 2, 12,\n+            9, 5, 9, 6, 13, 5, 11, 13, 11, 10, 1, 14, 9, 13, 8,\n+            12, 14, 14, 8, 13, 2, 6, 14, 2, 2, 9, 12, 9, 7, 2, 11, 4, 6, 8, 10, 12, 10, 11, 2, 9, 9, 5, 4, 3, 4, 4, 10,\n+            3, 1, 12, 13, 9, 8, 1, 9, 9, 4, 2, 7, 3, 4, 11, 11,\n+            8, 10, 14, 5, 14, 1, 10, 10, 13, 5, 6, 13, 14, 5, 7, 11, 4, 13, 3, 14, 7, 2, 10, 13, 2, 4, 14, 5, 1, 12, 3,\n+            13, 11, 2, 11, 14, 2, 5, 8, 13, 4, 13, 13, 3, 3,\n+            3, 13, 6, 11, 5, 3, 2, 13, 9, 2, 10, 8, 3, 11, 4, 6, 12, 14, 6, 2, 14, 1, 2, 6, 8, 4, 12, 8, 11, 9, 1, 7, 1,\n+            10, 4, 10, 9, 9, 3, 11, 5, 10, 8, 9, 4, 13, 4,\n+            5, 7, 12, 14, 12, 6, 1, 2, 10, 9, 10, 12, 1, 2, 6, 9, 5, 13, 4, 6, 11, 7, 1, 3, 10, 2, 1, 13, 14, 3, 5, 5,\n+            5, 7, 14, 9, 9, 3, 12, 1, 1, 1, 3, 12, 6, 9, 7, 8, 1,\n+            8, 2, 8, 13, 1, 11, 11, 1, 4, 10, 4, 3, 10, 3, 2, 2, 8, 2, 4, 13, 14, 4, 12, 14, 7, 6, 7, 13, 7, 11, 13, 12,\n+            14, 1, 14, 3, 4, 13, 12, 10, 5, 12, 12, 4, 5, 6,\n+            9, 12, 13, 3, 4, 13, 8, 14, 3, 2, 8, 5, 6, 13, 8, 7, 4, 5, 8, 14, 8, 14, 7, 5, 4, 9, 12, 12, 10, 3, 1, 12,\n+            5, 1, 11, 6, 10, 5, 14, 4, 5, 13, 8, 11, 13, 4, 9,\n+            9, 7, 6, 2, 2, 5, 12, 13, 13, 6, 11, 13, 12, 10, 6, 7, 1, 2, 6, 1, 9, 10, 14, 7, 9, 2, 2, 2, 8, 8, 11, 14,\n+            12, 9, 13, 1\n+    };\n+\n+    int[] types;\n+\n+    @Setup\n+    public void initDataSet() {\n+        this.types = DATASET;\n+    }\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public void getViaArray(Blackhole bh) {\n+        for (int type : types) {\n+            bh.consume(MqttMessageTypeArray.valueOf(type));\n+        }\n+    }\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public void getViaSwitch(Blackhole bh) {\n+        for (int type : types) {\n+            bh.consume(switchValueOf(type));\n+        }\n+    }\n+\n+    private static MqttMessageType switchValueOf(int type) {\n+        switch (type) {\n+        case 1:\n+            return MqttMessageType.CONNECT;\n+        case 2:\n+            return MqttMessageType.CONNACK;\n+        case 3:\n+            return MqttMessageType.PUBLISH;\n+        case 4:\n+            return MqttMessageType.PUBACK;\n+        case 5:\n+            return MqttMessageType.PUBREC;\n+        case 6:\n+            return MqttMessageType.PUBREL;\n+        case 7:\n+            return MqttMessageType.PUBCOMP;\n+        case 8:\n+            return MqttMessageType.SUBSCRIBE;\n+        case 9:\n+            return MqttMessageType.SUBACK;\n+        case 10:\n+            return MqttMessageType.UNSUBSCRIBE;\n+        case 11:\n+            return MqttMessageType.UNSUBACK;\n+        case 12:\n+            return MqttMessageType.PINGREQ;\n+        case 13:\n+            return MqttMessageType.PINGRESP;\n+        case 14:\n+            return MqttMessageType.DISCONNECT;\n+        default:\n+            throw new IllegalArgumentException(\"unknown message type: \" + type);\n+        }\n+    }\n+\n+    private static class MqttMessageTypeArray {\n+        private static final MqttMessageType[] VALUES;\n+\n+        static {\n+            // this prevent values to be assigned with the wrong order\n+            // and ensure valueOf to work fine\n+            MqttMessageType[] values = MqttMessageType.values();\n+            VALUES = new MqttMessageType[values.length + 1];\n+            for (MqttMessageType mqttMessageType : values) {\n+                int value = mqttMessageType.value();\n+                if (VALUES[value] != null) {\n+                    throw new AssertionError(\"value already in use: \" + value);\n+                }\n+                VALUES[value] = mqttMessageType;\n+            }\n+        }\n+\n+        private static MqttMessageType valueOf(int type) {\n+            if (type <= 0 || type >= VALUES.length) {\n+                throw new IllegalArgumentException(\"unknown message type: \" + type);\n+            }\n+            return VALUES[type];\n+        }\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cf7008d19344912d2c66be94f4fd825b1f659af"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI1NzEyMg==", "bodyText": "Exception messages should start capitalised. \"Unknown \u2026\"", "url": "https://github.com/netty/netty/pull/10400#discussion_r457257122", "createdAt": "2020-07-20T10:23:25Z", "author": {"login": "chrisvest"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttMessageType.java", "diffHunk": "@@ -46,12 +62,10 @@ public int value() {\n     }\n \n     public static MqttMessageType valueOf(int type) {\n-        for (MqttMessageType t : values()) {\n-            if (t.value == type) {\n-                return t;\n-            }\n+        if (type <= 0 || type >= VALUES.length) {\n+            throw new IllegalArgumentException(\"unknown message type: \" + type);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cf7008d19344912d2c66be94f4fd825b1f659af"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzI2MDE2Mw==", "bodyText": "Not sure we need to keep this copy around if we're decided on going with the array?", "url": "https://github.com/netty/netty/pull/10400#discussion_r457260163", "createdAt": "2020-07-20T10:28:05Z", "author": {"login": "chrisvest"}, "path": "microbench/src/main/java/io/netty/handler/codec/mqtt/MqttMessageTypeValueOfBench.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.mqtt;\n+\n+import io.netty.microbench.util.AbstractMicrobenchmark;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.CompilerControl;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.Warmup;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+@BenchmarkMode(Mode.AverageTime)\n+@Warmup(iterations = 5, time = 5)\n+@Measurement(iterations = 5, time = 5)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+public class MqttMessageTypeValueOfBench extends AbstractMicrobenchmark {\n+\n+    private static final int[] DATASET = new int[] {\n+            9, 5, 2, 9, 8, 4, 3, 7, 7, 9, 6, 11, 10, 4, 10, 6, 12, 6, 14, 8, 2, 2, 5, 7, 13, 3, 10, 12, 6, 2, 8, 1, 6,\n+            4, 10, 8, 13, 9, 9, 2, 7, 12, 2, 3, 12, 9, 3, 12,\n+            11, 4, 10, 11, 9, 10, 5, 9, 4, 14, 6, 10, 13, 9, 12, 7, 5, 3, 1, 2, 7, 11, 1, 8, 4, 9, 5, 11, 14, 6, 3, 4,\n+            3, 1, 12, 9, 6, 1, 10, 2, 9, 5, 10, 4, 5, 1, 8,\n+            2, 11, 9, 7, 10, 14, 9, 12, 14, 6, 13, 6, 14, 6, 1, 3, 1, 10, 13, 13, 2, 2, 8, 7, 10, 9, 9, 4, 7, 13, 4, 10,\n+            3, 14, 14, 4, 3, 6, 7, 13, 13, 2, 3, 13, 5, 2,\n+            14, 11, 1, 5, 6, 14, 13, 12, 3, 9, 10, 1, 4, 1, 1, 13, 5, 8, 1, 8, 2, 7, 9, 14, 13, 2, 11, 10, 11, 5, 9, 13,\n+            13, 12, 11, 6, 1, 7, 11, 1, 11, 7, 8, 1, 13,\n+            12, 1, 5, 10, 2, 13, 4, 8, 2, 14, 8, 8, 9, 14, 12, 11, 1, 10, 6, 7, 2, 1, 12, 11, 8, 9, 10, 13, 2, 12, 3, 8,\n+            1, 13, 11, 8, 6, 4, 5, 8, 5, 12, 10, 9, 4, 7,\n+            2, 1, 11, 6, 7, 11, 5, 1, 5, 2, 7, 7, 14, 14, 3, 2, 1, 8, 5, 7, 4, 13, 13, 7, 8, 2, 14, 1, 12, 7, 8, 8, 3,\n+            9, 8, 1, 11, 10, 13, 10, 2, 1, 12, 5, 3, 3, 12, 5,\n+            7, 12, 13, 10, 14, 9, 2, 4, 12, 4, 10, 10, 2, 9, 2, 7, 5, 6, 2, 14, 10, 3, 4, 5, 8, 1, 14, 13, 1, 2, 5, 11,\n+            8, 6, 8, 3, 8, 13, 12, 8, 2, 12, 6, 2, 5, 4, 13,\n+            5, 11, 11, 5, 12, 9, 9, 9, 6, 4, 4, 11, 14, 12, 9, 3, 4, 12, 10, 10, 6, 3, 2, 12, 3, 2, 10, 8, 7, 10, 12,\n+            13, 1, 2, 7, 13, 2, 13, 4, 13, 14, 10, 14, 7, 5,\n+            11, 10, 9, 9, 1, 9, 10, 3, 9, 1, 13, 7, 9, 7, 1, 8, 14, 2, 6, 11, 2, 2, 11, 4, 10, 10, 9, 4, 4, 13, 7, 2, 1,\n+            4, 14, 6, 11, 5, 2, 5, 9, 5, 8, 4, 5, 6, 2, 12, 2,\n+            5, 2, 14, 3, 11, 5, 4, 14, 14, 2, 7, 7, 2, 3, 11, 2, 10, 9, 13, 3, 4, 2, 10, 1, 2, 10, 7, 7, 6, 8, 8, 12,\n+            14, 8, 13, 1, 9, 5, 9, 1, 14, 2, 5, 5, 5, 3, 13, 11,\n+            9, 6, 11, 1, 10, 13, 4, 7, 9, 6, 3, 4, 11, 8, 13, 3, 13, 12, 7, 7, 5, 9, 11, 3, 9, 6, 5, 6, 6, 11, 9, 2, 7,\n+            1, 12, 7, 5, 8, 11, 4, 9, 10, 11, 12, 7, 8, 1, 2,\n+            3, 14, 3, 9, 11, 9, 7, 4, 4, 4, 8, 4, 4, 2, 5, 8, 2, 11, 7, 13, 2, 14, 3, 6, 7, 14, 12, 6, 9, 11, 10, 9, 6,\n+            10, 6, 14, 4, 1, 7, 12, 4, 13, 10, 2, 2, 3, 3, 14,\n+            14, 2, 9, 12, 3, 9, 7, 6, 12, 8, 9, 5, 11, 13, 14, 14, 4, 1, 11, 14, 5, 9, 7, 14, 7, 13, 7, 14, 3, 14, 2, 8,\n+            2, 5, 10, 12, 14, 9, 11, 3, 14, 8, 12, 12, 5, 2,\n+            6, 2, 1, 14, 12, 8, 14, 1, 11, 14, 8, 9, 9, 1, 12, 13, 7, 8, 10, 5, 8, 5, 14, 13, 14, 3, 14, 2, 9, 12, 3,\n+            10, 3, 2, 4, 3, 5, 5, 10, 10, 13, 10, 7, 6, 4, 2, 10,\n+            8, 14, 2, 7, 1, 2, 7, 13, 2, 3, 6, 14, 3, 8, 12, 3, 4, 12, 6, 3, 10, 6, 14, 9, 1, 6, 3, 14, 7, 1, 7, 2, 12,\n+            9, 5, 9, 6, 13, 5, 11, 13, 11, 10, 1, 14, 9, 13, 8,\n+            12, 14, 14, 8, 13, 2, 6, 14, 2, 2, 9, 12, 9, 7, 2, 11, 4, 6, 8, 10, 12, 10, 11, 2, 9, 9, 5, 4, 3, 4, 4, 10,\n+            3, 1, 12, 13, 9, 8, 1, 9, 9, 4, 2, 7, 3, 4, 11, 11,\n+            8, 10, 14, 5, 14, 1, 10, 10, 13, 5, 6, 13, 14, 5, 7, 11, 4, 13, 3, 14, 7, 2, 10, 13, 2, 4, 14, 5, 1, 12, 3,\n+            13, 11, 2, 11, 14, 2, 5, 8, 13, 4, 13, 13, 3, 3,\n+            3, 13, 6, 11, 5, 3, 2, 13, 9, 2, 10, 8, 3, 11, 4, 6, 12, 14, 6, 2, 14, 1, 2, 6, 8, 4, 12, 8, 11, 9, 1, 7, 1,\n+            10, 4, 10, 9, 9, 3, 11, 5, 10, 8, 9, 4, 13, 4,\n+            5, 7, 12, 14, 12, 6, 1, 2, 10, 9, 10, 12, 1, 2, 6, 9, 5, 13, 4, 6, 11, 7, 1, 3, 10, 2, 1, 13, 14, 3, 5, 5,\n+            5, 7, 14, 9, 9, 3, 12, 1, 1, 1, 3, 12, 6, 9, 7, 8, 1,\n+            8, 2, 8, 13, 1, 11, 11, 1, 4, 10, 4, 3, 10, 3, 2, 2, 8, 2, 4, 13, 14, 4, 12, 14, 7, 6, 7, 13, 7, 11, 13, 12,\n+            14, 1, 14, 3, 4, 13, 12, 10, 5, 12, 12, 4, 5, 6,\n+            9, 12, 13, 3, 4, 13, 8, 14, 3, 2, 8, 5, 6, 13, 8, 7, 4, 5, 8, 14, 8, 14, 7, 5, 4, 9, 12, 12, 10, 3, 1, 12,\n+            5, 1, 11, 6, 10, 5, 14, 4, 5, 13, 8, 11, 13, 4, 9,\n+            9, 7, 6, 2, 2, 5, 12, 13, 13, 6, 11, 13, 12, 10, 6, 7, 1, 2, 6, 1, 9, 10, 14, 7, 9, 2, 2, 2, 8, 8, 11, 14,\n+            12, 9, 13, 1\n+    };\n+\n+    int[] types;\n+\n+    @Setup\n+    public void initDataSet() {\n+        this.types = DATASET;\n+    }\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public void getViaArray(Blackhole bh) {\n+        for (int type : types) {\n+            bh.consume(MqttMessageTypeArray.valueOf(type));\n+        }\n+    }\n+\n+    @Benchmark\n+    @CompilerControl(CompilerControl.Mode.DONT_INLINE)\n+    public void getViaSwitch(Blackhole bh) {\n+        for (int type : types) {\n+            bh.consume(switchValueOf(type));\n+        }\n+    }\n+\n+    private static MqttMessageType switchValueOf(int type) {\n+        switch (type) {\n+        case 1:\n+            return MqttMessageType.CONNECT;\n+        case 2:\n+            return MqttMessageType.CONNACK;\n+        case 3:\n+            return MqttMessageType.PUBLISH;\n+        case 4:\n+            return MqttMessageType.PUBACK;\n+        case 5:\n+            return MqttMessageType.PUBREC;\n+        case 6:\n+            return MqttMessageType.PUBREL;\n+        case 7:\n+            return MqttMessageType.PUBCOMP;\n+        case 8:\n+            return MqttMessageType.SUBSCRIBE;\n+        case 9:\n+            return MqttMessageType.SUBACK;\n+        case 10:\n+            return MqttMessageType.UNSUBSCRIBE;\n+        case 11:\n+            return MqttMessageType.UNSUBACK;\n+        case 12:\n+            return MqttMessageType.PINGREQ;\n+        case 13:\n+            return MqttMessageType.PINGRESP;\n+        case 14:\n+            return MqttMessageType.DISCONNECT;\n+        default:\n+            throw new IllegalArgumentException(\"unknown message type: \" + type);\n+        }\n+    }\n+\n+    private static class MqttMessageTypeArray {\n+        private static final MqttMessageType[] VALUES;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3cf7008d19344912d2c66be94f4fd825b1f659af"}, "originalPosition": 143}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3cf7008d19344912d2c66be94f4fd825b1f659af", "author": {"user": {"login": "franz1981", "name": "Francesco Nigro"}}, "url": "https://github.com/netty/netty/commit/3cf7008d19344912d2c66be94f4fd825b1f659af", "committedDate": "2020-07-17T16:24:38Z", "message": "Improve MqttMessageType::valueOf cost\n\nMotivation:\n\nMqttMessageType::valueOf has O(N) cost\n\nModifications:\n\nMqttMessageType::valueOf uses a const lookup table\n\nResult:\n\nMqttMessageType::valueOf has O(1) cost"}, "afterCommit": {"oid": "bfa1ae16928caff6972ce09ae00dfad38f5638c5", "author": {"user": {"login": "franz1981", "name": "Francesco Nigro"}}, "url": "https://github.com/netty/netty/commit/bfa1ae16928caff6972ce09ae00dfad38f5638c5", "committedDate": "2020-08-27T08:24:24Z", "message": "Improve MqttMessageType::valueOf cost\n\nMotivation:\n\nMqttMessageType::valueOf has O(N) cost\n\nModifications:\n\nMqttMessageType::valueOf uses a const lookup table\n\nResult:\n\nMqttMessageType::valueOf has O(1) cost"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bfa1ae16928caff6972ce09ae00dfad38f5638c5", "author": {"user": {"login": "franz1981", "name": "Francesco Nigro"}}, "url": "https://github.com/netty/netty/commit/bfa1ae16928caff6972ce09ae00dfad38f5638c5", "committedDate": "2020-08-27T08:24:24Z", "message": "Improve MqttMessageType::valueOf cost\n\nMotivation:\n\nMqttMessageType::valueOf has O(N) cost\n\nModifications:\n\nMqttMessageType::valueOf uses a const lookup table\n\nResult:\n\nMqttMessageType::valueOf has O(1) cost"}, "afterCommit": {"oid": "c2c7bfa4cdf42329166d053a1814a97f3fe064fc", "author": {"user": {"login": "franz1981", "name": "Francesco Nigro"}}, "url": "https://github.com/netty/netty/commit/c2c7bfa4cdf42329166d053a1814a97f3fe064fc", "committedDate": "2020-08-27T08:26:56Z", "message": "Improve MqttMessageType::valueOf cost\n\nMotivation:\n\nMqttMessageType::valueOf has O(N) cost\n\nModifications:\n\nMqttMessageType::valueOf uses a const lookup table\n\nResult:\n\nMqttMessageType::valueOf has O(1) cost"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c2c7bfa4cdf42329166d053a1814a97f3fe064fc", "author": {"user": {"login": "franz1981", "name": "Francesco Nigro"}}, "url": "https://github.com/netty/netty/commit/c2c7bfa4cdf42329166d053a1814a97f3fe064fc", "committedDate": "2020-08-27T08:26:56Z", "message": "Improve MqttMessageType::valueOf cost\n\nMotivation:\n\nMqttMessageType::valueOf has O(N) cost\n\nModifications:\n\nMqttMessageType::valueOf uses a const lookup table\n\nResult:\n\nMqttMessageType::valueOf has O(1) cost"}, "afterCommit": {"oid": "964654f9f878af0c1b4e458c74e4a78ea8cde663", "author": {"user": {"login": "franz1981", "name": "Francesco Nigro"}}, "url": "https://github.com/netty/netty/commit/964654f9f878af0c1b4e458c74e4a78ea8cde663", "committedDate": "2020-08-27T08:28:37Z", "message": "Improve MqttMessageType::valueOf cost\n\nMotivation:\n\nMqttMessageType::valueOf has O(N) cost\n\nModifications:\n\nMqttMessageType::valueOf uses a const lookup table\n\nResult:\n\nMqttMessageType::valueOf has O(1) cost"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "964654f9f878af0c1b4e458c74e4a78ea8cde663", "author": {"user": {"login": "franz1981", "name": "Francesco Nigro"}}, "url": "https://github.com/netty/netty/commit/964654f9f878af0c1b4e458c74e4a78ea8cde663", "committedDate": "2020-08-27T08:28:37Z", "message": "Improve MqttMessageType::valueOf cost\n\nMotivation:\n\nMqttMessageType::valueOf has O(N) cost\n\nModifications:\n\nMqttMessageType::valueOf uses a const lookup table\n\nResult:\n\nMqttMessageType::valueOf has O(1) cost"}, "afterCommit": {"oid": "ea6e1cce6cbb7033af8fe83ffcf3e4aafc44e380", "author": {"user": {"login": "franz1981", "name": "Francesco Nigro"}}, "url": "https://github.com/netty/netty/commit/ea6e1cce6cbb7033af8fe83ffcf3e4aafc44e380", "committedDate": "2020-08-27T11:49:04Z", "message": "Improve MqttMessageType::valueOf cost\n\nMotivation:\n\nMqttMessageType::valueOf has O(N) cost\n\nModifications:\n\nMqttMessageType::valueOf uses a const lookup table\n\nResult:\n\nMqttMessageType::valueOf has O(1) cost"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d2448aa24adfb3ebcb114ba20a8fc5e2dd2a6f1", "author": {"user": {"login": "franz1981", "name": "Francesco Nigro"}}, "url": "https://github.com/netty/netty/commit/6d2448aa24adfb3ebcb114ba20a8fc5e2dd2a6f1", "committedDate": "2020-08-28T08:54:55Z", "message": "Improve MqttMessageType::valueOf cost\n\nMotivation:\n\nMqttMessageType::valueOf has O(N) cost\n\nModifications:\n\nMqttMessageType::valueOf uses a const lookup table\n\nResult:\n\nMqttMessageType::valueOf has O(1) cost"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ea6e1cce6cbb7033af8fe83ffcf3e4aafc44e380", "author": {"user": {"login": "franz1981", "name": "Francesco Nigro"}}, "url": "https://github.com/netty/netty/commit/ea6e1cce6cbb7033af8fe83ffcf3e4aafc44e380", "committedDate": "2020-08-27T11:49:04Z", "message": "Improve MqttMessageType::valueOf cost\n\nMotivation:\n\nMqttMessageType::valueOf has O(N) cost\n\nModifications:\n\nMqttMessageType::valueOf uses a const lookup table\n\nResult:\n\nMqttMessageType::valueOf has O(1) cost"}, "afterCommit": {"oid": "6d2448aa24adfb3ebcb114ba20a8fc5e2dd2a6f1", "author": {"user": {"login": "franz1981", "name": "Francesco Nigro"}}, "url": "https://github.com/netty/netty/commit/6d2448aa24adfb3ebcb114ba20a8fc5e2dd2a6f1", "committedDate": "2020-08-28T08:54:55Z", "message": "Improve MqttMessageType::valueOf cost\n\nMotivation:\n\nMqttMessageType::valueOf has O(N) cost\n\nModifications:\n\nMqttMessageType::valueOf uses a const lookup table\n\nResult:\n\nMqttMessageType::valueOf has O(1) cost"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4MzcyNTQ4", "url": "https://github.com/netty/netty/pull/10400#pullrequestreview-478372548", "createdAt": "2020-08-31T07:14:45Z", "commit": {"oid": "6d2448aa24adfb3ebcb114ba20a8fc5e2dd2a6f1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDc4Mzc0Mzc4", "url": "https://github.com/netty/netty/pull/10400#pullrequestreview-478374378", "createdAt": "2020-08-31T07:18:11Z", "commit": {"oid": "6d2448aa24adfb3ebcb114ba20a8fc5e2dd2a6f1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 153, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}