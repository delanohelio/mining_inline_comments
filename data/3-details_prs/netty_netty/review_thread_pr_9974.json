{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4MDE5NzI3", "number": 9974, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNzo0OTo1MlrODbUIMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNzo0OTo1MlrODbUIMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI5OTY3OTIwOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/ssl/SslHandler.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQxNzo0OTo1MlrOFiunFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQwNzo0NjoyNVrOFi_Hkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk1OTU3NQ==", "bodyText": "How about out.clear() here too?", "url": "https://github.com/netty/netty/pull/9974#discussion_r371959575", "createdAt": "2020-01-28T17:49:52Z", "author": {"login": "njhill"}, "path": "handler/src/main/java/io/netty/handler/ssl/SslHandler.java", "diffHunk": "@@ -858,11 +858,25 @@ private void wrap(ChannelHandlerContext ctx, boolean inUnwrap) throws SSLExcepti\n                         case NOT_HANDSHAKING:\n                             setHandshakeSuccessIfStillHandshaking();\n                             // deliberate fall-through\n-                        case NEED_WRAP:\n-                            finishWrap(ctx, out, promise, inUnwrap, false);\n+                        case NEED_WRAP: {\n+                            ChannelPromise p = promise;\n+\n+                            // Null out the promise so it is not reused in the finally block in the cause of\n+                            // finishWrap(...) throwing.\n                             promise = null;\n-                            out = null;\n+                            final ByteBuf b;\n+\n+                            if (out.isReadable()) {\n+                                // There is something in the out buffer. Ensure we null it out so it is not re-used.\n+                                b = out;\n+                                out = null;\n+                            } else {\n+                                // If out is not readable we can re-use it and so save an extra allocation\n+                                b = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ff6a84befccd22f308668f33792d107836d109ee"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjIzMDAzNA==", "bodyText": "this should not be needed.", "url": "https://github.com/netty/netty/pull/9974#discussion_r372230034", "createdAt": "2020-01-29T07:46:25Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/ssl/SslHandler.java", "diffHunk": "@@ -858,11 +858,25 @@ private void wrap(ChannelHandlerContext ctx, boolean inUnwrap) throws SSLExcepti\n                         case NOT_HANDSHAKING:\n                             setHandshakeSuccessIfStillHandshaking();\n                             // deliberate fall-through\n-                        case NEED_WRAP:\n-                            finishWrap(ctx, out, promise, inUnwrap, false);\n+                        case NEED_WRAP: {\n+                            ChannelPromise p = promise;\n+\n+                            // Null out the promise so it is not reused in the finally block in the cause of\n+                            // finishWrap(...) throwing.\n                             promise = null;\n-                            out = null;\n+                            final ByteBuf b;\n+\n+                            if (out.isReadable()) {\n+                                // There is something in the out buffer. Ensure we null it out so it is not re-used.\n+                                b = out;\n+                                out = null;\n+                            } else {\n+                                // If out is not readable we can re-use it and so save an extra allocation\n+                                b = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTk1OTU3NQ=="}, "originalCommit": {"oid": "ff6a84befccd22f308668f33792d107836d109ee"}, "originalPosition": 21}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3468, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}