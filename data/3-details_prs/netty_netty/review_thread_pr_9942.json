{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYxNTE2MDAy", "number": 9942, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDoxNzo1N1rODX-deg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDoxNzo1N1rODX-deg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2NDY3MTk0OnYy", "diffSide": "RIGHT", "path": "microbench/src/main/java/io/netty/handler/codec/http/DecodeHexBenchmark.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQyMDoxNzo1N1rOFdkjew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNVQwOTozNToxNFrOFdyGUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1MTkzMQ==", "bodyText": "why long not int? and I guess something like ^= might be cheaper than +=? (maybe insignificant though...)", "url": "https://github.com/netty/netty/pull/9942#discussion_r366551931", "createdAt": "2020-01-14T20:17:57Z", "author": {"login": "njhill"}, "path": "microbench/src/main/java/io/netty/handler/codec/http/DecodeHexBenchmark.java", "diffHunk": "@@ -43,37 +47,71 @@\n             \"4DDeA5gDD1C6fE567E1b6gf0C40FEcDg\",\n     })\n     private String hex;\n-    private char[] hexDigits;\n+    @Param({ \"1\", \"10\" })\n+    private int inputs;\n+    private char[][] hexDigits;\n+    private static final long SEED = 1578675524L;\n \n     @Setup\n     public void init() {\n-        hexDigits = hex.toCharArray();\n+        final char[] hexCh = hex.toCharArray();\n+        hexDigits = new char[inputs][];\n+        hexDigits[0] = hexCh;\n+        if (inputs > 1) {\n+            final Random rnd = new Random(SEED);\n+            for (int i = 1; i < inputs; i++) {\n+                hexDigits[i] = shuffle(Arrays.copyOf(hexCh, hexCh.length), rnd);\n+            }\n+        }\n+    }\n+\n+    // https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\n+    private static char[] shuffle(char[] chars, Random rnd) {\n+        int index;\n+        char tmp;\n+        for (int i = chars.length - 1; i > 0; i--) {\n+            index = rnd.nextInt(i + 1);\n+            tmp = chars[index];\n+            chars[index] = chars[i];\n+            chars[i] = tmp;\n+        }\n+        return chars;\n+    }\n+\n+    private int nextHexDigits() {\n+        // always use ThreadLocalRandom here:\n+        // we want the inputs = 1 and inputs > 1 to be comparable\n+        // and saving using ThreadLocalRandom have impacts!\n+        return ThreadLocalRandom.current().nextInt(0, inputs);\n     }\n \n     @Benchmark\n+    @CompilerControl(Mode.DONT_INLINE)\n     public long hexDigits() {\n         long v = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77f5480bf9f2c60907ddf52abcfdf5a73a00aa9d"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2Njc3Mzg0MA==", "bodyText": "(maybe insignificant though...)\n\nJust tried and on my laptop not getting any meaningful differences!", "url": "https://github.com/netty/netty/pull/9942#discussion_r366773840", "createdAt": "2020-01-15T09:35:14Z", "author": {"login": "franz1981"}, "path": "microbench/src/main/java/io/netty/handler/codec/http/DecodeHexBenchmark.java", "diffHunk": "@@ -43,37 +47,71 @@\n             \"4DDeA5gDD1C6fE567E1b6gf0C40FEcDg\",\n     })\n     private String hex;\n-    private char[] hexDigits;\n+    @Param({ \"1\", \"10\" })\n+    private int inputs;\n+    private char[][] hexDigits;\n+    private static final long SEED = 1578675524L;\n \n     @Setup\n     public void init() {\n-        hexDigits = hex.toCharArray();\n+        final char[] hexCh = hex.toCharArray();\n+        hexDigits = new char[inputs][];\n+        hexDigits[0] = hexCh;\n+        if (inputs > 1) {\n+            final Random rnd = new Random(SEED);\n+            for (int i = 1; i < inputs; i++) {\n+                hexDigits[i] = shuffle(Arrays.copyOf(hexCh, hexCh.length), rnd);\n+            }\n+        }\n+    }\n+\n+    // https://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle\n+    private static char[] shuffle(char[] chars, Random rnd) {\n+        int index;\n+        char tmp;\n+        for (int i = chars.length - 1; i > 0; i--) {\n+            index = rnd.nextInt(i + 1);\n+            tmp = chars[index];\n+            chars[index] = chars[i];\n+            chars[i] = tmp;\n+        }\n+        return chars;\n+    }\n+\n+    private int nextHexDigits() {\n+        // always use ThreadLocalRandom here:\n+        // we want the inputs = 1 and inputs > 1 to be comparable\n+        // and saving using ThreadLocalRandom have impacts!\n+        return ThreadLocalRandom.current().nextInt(0, inputs);\n     }\n \n     @Benchmark\n+    @CompilerControl(Mode.DONT_INLINE)\n     public long hexDigits() {\n         long v = 0;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjU1MTkzMQ=="}, "originalCommit": {"oid": "77f5480bf9f2c60907ddf52abcfdf5a73a00aa9d"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3529, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}