{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0OTUyODEw", "number": 10141, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwOToxNjoyOVrODslSYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwOToxODo0NVrODslWAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDc0ODUxOnYy", "diffSide": "RIGHT", "path": "buffer/src/main/java/io/netty/buffer/PoolChunkList.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwOToxNjoyOVrOF9go5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODowMTowNlrOF-hupw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA0MjIxNQ==", "bodyText": "@netudima nit: can you add a comment to explain the \"formula\" you used to calculate both ?", "url": "https://github.com/netty/netty/pull/10141#discussion_r400042215", "createdAt": "2020-03-30T09:16:29Z", "author": {"login": "normanmaurer"}, "path": "buffer/src/main/java/io/netty/buffer/PoolChunkList.java", "diffHunk": "@@ -49,6 +51,8 @@\n         this.minUsage = minUsage;\n         this.maxUsage = maxUsage;\n         maxCapacity = calculateMaxCapacity(minUsage, chunkSize);\n+        freeMinThreshold = (maxUsage == 100) ? 0 : (int) (chunkSize * (100L - maxUsage + 1) / 100L);\n+        freeMaxThreshold = (minUsage == 100) ? 0 : (int) (chunkSize * (100L - minUsage + 1) / 100L - 1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92a206a989efa2b317175f72b47209d1819383b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEwODY0Nw==", "bodyText": "Added a comment + updated the logic a bit to fully align old usage() based logic and the new one. How it has been verified:  https://gist.github.com/netudima/454ba97d8154109a50ae831bafc8e151", "url": "https://github.com/netty/netty/pull/10141#discussion_r401108647", "createdAt": "2020-03-31T18:01:06Z", "author": {"login": "netudima"}, "path": "buffer/src/main/java/io/netty/buffer/PoolChunkList.java", "diffHunk": "@@ -49,6 +51,8 @@\n         this.minUsage = minUsage;\n         this.maxUsage = maxUsage;\n         maxCapacity = calculateMaxCapacity(minUsage, chunkSize);\n+        freeMinThreshold = (maxUsage == 100) ? 0 : (int) (chunkSize * (100L - maxUsage + 1) / 100L);\n+        freeMaxThreshold = (minUsage == 100) ? 0 : (int) (chunkSize * (100L - minUsage + 1) / 100L - 1);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA0MjIxNQ=="}, "originalCommit": {"oid": "e92a206a989efa2b317175f72b47209d1819383b"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDc1Nzc2OnYy", "diffSide": "RIGHT", "path": "microbench/src/main/java/io/netty/microbench/buffer/SimpleByteBufPooledAllocatorBenchmark.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwOToxODo0NVrOF9gujw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxODowMTo1NVrOF-hwww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA0MzY2Mw==", "bodyText": "@netudima can you create a new PooledByteBufAllocator instance in a @Setup method and use it ? Otherwise it may not produce fair results as it may have already stuff cached from before etc. You may even want to disable ThreadLocal caches all together when doing so to ensure you really hit the PoolArena. WDYT ?", "url": "https://github.com/netty/netty/pull/10141#discussion_r400043663", "createdAt": "2020-03-30T09:18:45Z", "author": {"login": "normanmaurer"}, "path": "microbench/src/main/java/io/netty/microbench/buffer/SimpleByteBufPooledAllocatorBenchmark.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.microbench.buffer;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import io.netty.microbench.util.AbstractMicrobenchmark;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+@State(Scope.Benchmark)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+public class SimpleByteBufPooledAllocatorBenchmark extends AbstractMicrobenchmark {\n+\n+    public SimpleByteBufPooledAllocatorBenchmark() {\n+        super(true, false);\n+    }\n+\n+    @Param({\"123\", \"1234\", \"12345\", \"123456\", \"1234567\"})\n+    public int size;\n+\n+    @Param({\"0\", \"5\", \"10\", \"100\"})\n+    public long tokens;\n+\n+    @Benchmark\n+    public boolean getAndRelease() {\n+        ByteBufAllocator alloc = PooledByteBufAllocator.DEFAULT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e92a206a989efa2b317175f72b47209d1819383b"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA0NjM5NA==", "bodyText": "@franz1981 WDYT ?", "url": "https://github.com/netty/netty/pull/10141#discussion_r400046394", "createdAt": "2020-03-30T09:23:02Z", "author": {"login": "normanmaurer"}, "path": "microbench/src/main/java/io/netty/microbench/buffer/SimpleByteBufPooledAllocatorBenchmark.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.microbench.buffer;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import io.netty.microbench.util.AbstractMicrobenchmark;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+@State(Scope.Benchmark)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+public class SimpleByteBufPooledAllocatorBenchmark extends AbstractMicrobenchmark {\n+\n+    public SimpleByteBufPooledAllocatorBenchmark() {\n+        super(true, false);\n+    }\n+\n+    @Param({\"123\", \"1234\", \"12345\", \"123456\", \"1234567\"})\n+    public int size;\n+\n+    @Param({\"0\", \"5\", \"10\", \"100\"})\n+    public long tokens;\n+\n+    @Benchmark\n+    public boolean getAndRelease() {\n+        ByteBufAllocator alloc = PooledByteBufAllocator.DEFAULT;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA0MzY2Mw=="}, "originalCommit": {"oid": "e92a206a989efa2b317175f72b47209d1819383b"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA2NTg5NQ==", "bodyText": "I missed that :O ,that's a good point :+1", "url": "https://github.com/netty/netty/pull/10141#discussion_r400065895", "createdAt": "2020-03-30T09:54:08Z", "author": {"login": "franz1981"}, "path": "microbench/src/main/java/io/netty/microbench/buffer/SimpleByteBufPooledAllocatorBenchmark.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.microbench.buffer;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import io.netty.microbench.util.AbstractMicrobenchmark;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+@State(Scope.Benchmark)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+public class SimpleByteBufPooledAllocatorBenchmark extends AbstractMicrobenchmark {\n+\n+    public SimpleByteBufPooledAllocatorBenchmark() {\n+        super(true, false);\n+    }\n+\n+    @Param({\"123\", \"1234\", \"12345\", \"123456\", \"1234567\"})\n+    public int size;\n+\n+    @Param({\"0\", \"5\", \"10\", \"100\"})\n+    public long tokens;\n+\n+    @Benchmark\n+    public boolean getAndRelease() {\n+        ByteBufAllocator alloc = PooledByteBufAllocator.DEFAULT;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA0MzY2Mw=="}, "originalCommit": {"oid": "e92a206a989efa2b317175f72b47209d1819383b"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY3NDA2MA==", "bodyText": "@netudima please address and let me know once done... after all my comments are addressed I will merge this. Good job.", "url": "https://github.com/netty/netty/pull/10141#discussion_r400674060", "createdAt": "2020-03-31T06:36:19Z", "author": {"login": "normanmaurer"}, "path": "microbench/src/main/java/io/netty/microbench/buffer/SimpleByteBufPooledAllocatorBenchmark.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.microbench.buffer;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import io.netty.microbench.util.AbstractMicrobenchmark;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+@State(Scope.Benchmark)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+public class SimpleByteBufPooledAllocatorBenchmark extends AbstractMicrobenchmark {\n+\n+    public SimpleByteBufPooledAllocatorBenchmark() {\n+        super(true, false);\n+    }\n+\n+    @Param({\"123\", \"1234\", \"12345\", \"123456\", \"1234567\"})\n+    public int size;\n+\n+    @Param({\"0\", \"5\", \"10\", \"100\"})\n+    public long tokens;\n+\n+    @Benchmark\n+    public boolean getAndRelease() {\n+        ByteBufAllocator alloc = PooledByteBufAllocator.DEFAULT;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA0MzY2Mw=="}, "originalCommit": {"oid": "e92a206a989efa2b317175f72b47209d1819383b"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY3NTgyNA==", "bodyText": "Thank you for the review, working on the changes.", "url": "https://github.com/netty/netty/pull/10141#discussion_r400675824", "createdAt": "2020-03-31T06:40:44Z", "author": {"login": "netudima"}, "path": "microbench/src/main/java/io/netty/microbench/buffer/SimpleByteBufPooledAllocatorBenchmark.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.microbench.buffer;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import io.netty.microbench.util.AbstractMicrobenchmark;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+@State(Scope.Benchmark)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+public class SimpleByteBufPooledAllocatorBenchmark extends AbstractMicrobenchmark {\n+\n+    public SimpleByteBufPooledAllocatorBenchmark() {\n+        super(true, false);\n+    }\n+\n+    @Param({\"123\", \"1234\", \"12345\", \"123456\", \"1234567\"})\n+    public int size;\n+\n+    @Param({\"0\", \"5\", \"10\", \"100\"})\n+    public long tokens;\n+\n+    @Benchmark\n+    public boolean getAndRelease() {\n+        ByteBufAllocator alloc = PooledByteBufAllocator.DEFAULT;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA0MzY2Mw=="}, "originalCommit": {"oid": "e92a206a989efa2b317175f72b47209d1819383b"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTEwOTE4Nw==", "bodyText": "Added\n@Param({\"false\", \"true\"})\n    public boolean useThreadCache;\n\nto control thread cache usage in the bench", "url": "https://github.com/netty/netty/pull/10141#discussion_r401109187", "createdAt": "2020-03-31T18:01:55Z", "author": {"login": "netudima"}, "path": "microbench/src/main/java/io/netty/microbench/buffer/SimpleByteBufPooledAllocatorBenchmark.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.microbench.buffer;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufAllocator;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import io.netty.microbench.util.AbstractMicrobenchmark;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.BenchmarkMode;\n+import org.openjdk.jmh.annotations.Mode;\n+import org.openjdk.jmh.annotations.OutputTimeUnit;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.infra.Blackhole;\n+\n+import java.util.concurrent.TimeUnit;\n+\n+@State(Scope.Benchmark)\n+@BenchmarkMode(Mode.AverageTime)\n+@OutputTimeUnit(TimeUnit.NANOSECONDS)\n+public class SimpleByteBufPooledAllocatorBenchmark extends AbstractMicrobenchmark {\n+\n+    public SimpleByteBufPooledAllocatorBenchmark() {\n+        super(true, false);\n+    }\n+\n+    @Param({\"123\", \"1234\", \"12345\", \"123456\", \"1234567\"})\n+    public int size;\n+\n+    @Param({\"0\", \"5\", \"10\", \"100\"})\n+    public long tokens;\n+\n+    @Benchmark\n+    public boolean getAndRelease() {\n+        ByteBufAllocator alloc = PooledByteBufAllocator.DEFAULT;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA0MzY2Mw=="}, "originalCommit": {"oid": "e92a206a989efa2b317175f72b47209d1819383b"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3367, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}