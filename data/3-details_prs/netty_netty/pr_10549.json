{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgxODk1MzY3", "number": 10549, "title": "Use multiple IovArray for writev when using io_uring based transport", "bodyText": "Motivation:\nHow we did manage the memory of writev was quite wasteful and could\nproduce a lot of memory overhead. We can just keep it simple by using\none IovArray. Once it is full we can just submit and clear it as at this\npoint the kernel did take over a copy and its safe to reuse\nModifications:\nUse one IovArray and submit once it is full.\nResult:\nLess memory overhead and less code duplication", "createdAt": "2020-09-08T09:02:05Z", "url": "https://github.com/netty/netty/pull/10549", "merged": true, "mergeCommit": {"oid": "f6474e66de7b0330d156a27532667552167a41c5"}, "closed": true, "closedAt": "2020-09-08T19:23:39Z", "author": {"login": "normanmaurer"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdGzxGPAH2gAyNDgxODk1MzY3OjY3ZDllNGMwMDYwMDJkZDM5Mzg4Y2QxYTI4NzFhMzQwYzJhZTdlMDM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdG8Q58gFqTQ4NDQwOTE4NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "67d9e4c006002dd39388cd1a2871a340c2ae7e03", "author": {"user": {"login": "normanmaurer", "name": "Norman Maurer"}}, "url": "https://github.com/netty/netty/commit/67d9e4c006002dd39388cd1a2871a340c2ae7e03", "committedDate": "2020-09-08T08:59:34Z", "message": "Use one IovArray for writev when using io_uring based transport\n\nMotivation:\n\nHow we did manage the memory of writev was quite wasteful and could\nproduce a lot of memory overhead. We can just keep it simple by using\none IovArray. Once it is full we can just submit and clear it as at this\npoint the kernel did take over a copy and its safe to reuse\n\nModifications:\n\nUse one IovArray and submit once it is full.\n\nResult:\n\nLess memory overhead and less code duplication"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzOTM3NDU2", "url": "https://github.com/netty/netty/pull/10549#pullrequestreview-483937456", "createdAt": "2020-09-08T09:03:42Z", "commit": {"oid": "67d9e4c006002dd39388cd1a2871a340c2ae7e03"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOTowMzo0MlrOHOTttA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOTowMzo0MlrOHOTttA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc2NTEwOA==", "bodyText": "happem", "url": "https://github.com/netty/netty/pull/10549#discussion_r484765108", "createdAt": "2020-09-08T09:03:42Z", "author": {"login": "chrisvest"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/AbstractIOUringChannel.java", "diffHunk": "@@ -304,23 +302,17 @@ protected void doWrite(ChannelOutboundBuffer in) {\n     }\n \n      private void doWriteMultiple(ChannelOutboundBuffer in) {\n-\n-         final IovecArrayPool iovecArray = ((IOUringEventLoop) eventLoop()).getIovecArrayPool();\n-\n-         iovecMemoryAddress = iovecArray.createNewIovecMemoryAddress();\n-         if (iovecMemoryAddress != -1) {\n-             try {\n-                 in.forEachFlushedMessage(iovecArray);\n-             } catch (Exception e) {\n-                 // This should never happem, anyway fallback to single write.\n-                 doWriteSingle((ByteBuf) in.current());\n-             }\n-             submissionQueue().addWritev(socket.intValue(), iovecMemoryAddress, iovecArray.count());\n+         final IovArray iovecArray = ((IOUringEventLoop) eventLoop()).iovArray();\n+         try {\n+             int offset = iovecArray.count();\n+             in.forEachFlushedMessage(iovecArray);\n+             submissionQueue().addWritev(socket.intValue(), iovecArray.memoryAddress(offset), iovecArray.count() - offset);\n              ioState |= WRITE_SCHEDULED;\n-         } else {\n-             // We were not be able to create a new iovec, fallback to single write.\n+         } catch (Exception e) {\n+             // This should never happem, anyway fallback to single write.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67d9e4c006002dd39388cd1a2871a340c2ae7e03"}, "originalPosition": 43}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgzOTU3NjQz", "url": "https://github.com/netty/netty/pull/10549#pullrequestreview-483957643", "createdAt": "2020-09-08T09:29:11Z", "commit": {"oid": "67d9e4c006002dd39388cd1a2871a340c2ae7e03"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOToyOToxMVrOHOUqRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQwOToyOToxMVrOHOUqRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDc4MDYxMw==", "bodyText": "one drawback would be that we reduce submission batch size when a lot of channel writing in the same time especially with a bigger message size, one solution would be: to make the capacity configurable, default iovec array size is only 1024 as far as I know", "url": "https://github.com/netty/netty/pull/10549#discussion_r484780613", "createdAt": "2020-09-08T09:29:11Z", "author": {"login": "1Jo1"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringEventLoop.java", "diffHunk": "@@ -268,7 +278,12 @@ protected void wakeup(boolean inEventLoop) {\n         }\n     }\n \n-    public IovecArrayPool getIovecArrayPool() {\n-        return iovecArrayPool;\n+    public IovArray iovArray() {\n+        // Check if its full and if so submit so we can reuse it.\n+        if (iovArray.isFull()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "67d9e4c006002dd39388cd1a2871a340c2ae7e03"}, "originalPosition": 68}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bf6078e1afc6fdb77e762c2eaab95768b9a3a4ef", "author": {"user": {"login": "normanmaurer", "name": "Norman Maurer"}}, "url": "https://github.com/netty/netty/commit/bf6078e1afc6fdb77e762c2eaab95768b9a3a4ef", "committedDate": "2020-09-08T11:00:33Z", "message": "typo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MTQ2NTg2", "url": "https://github.com/netty/netty/pull/10549#pullrequestreview-484146586", "createdAt": "2020-09-08T13:36:09Z", "commit": {"oid": "75ef1d74c4ad317778a731247ca68674f8976128"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMzozNjowOVrOHOdhSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMzozNjowOVrOHOdhSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkyNTc2OQ==", "bodyText": "we could even make this more optimal by writing a custom IovArray implementation. But for now this seems to work well enough and allows us for code-reuse.", "url": "https://github.com/netty/netty/pull/10549#discussion_r484925769", "createdAt": "2020-09-08T13:36:09Z", "author": {"login": "normanmaurer"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/IOUringEventLoop.java", "diffHunk": "@@ -46,18 +47,26 @@\n     //    other value T    when EL is waiting with wakeup scheduled at time T\n     private final AtomicLong nextWakeupNanos = new AtomicLong(AWAKE);\n     private final FileDescriptor eventfd;\n-    private final IovecArrayPool iovecArrayPool;\n+\n+    private final IovArray[] iovArrays;\n+    private int iovArrayIdx;\n \n     private long prevDeadlineNanos = NONE;\n     private boolean pendingWakeup;\n \n     IOUringEventLoop(final EventLoopGroup parent, final Executor executor, final boolean addTaskWakesUp) {\n         super(parent, executor, addTaskWakesUp);\n+        // Ensure that we load all native bits as otherwise it may fail when try to use native methods in IovArray\n+        IOUring.ensureAvailability();\n \n+        // Let's hard code this to 8 IovArrays to keep the memory overhead kind of small.\n+        iovArrays = new IovArray[8];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75ef1d74c4ad317778a731247ca68674f8976128"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95639ae66a6ac87e66f77ccf19d5a439d25fb03e", "author": {"user": {"login": "normanmaurer", "name": "Norman Maurer"}}, "url": "https://github.com/netty/netty/commit/95639ae66a6ac87e66f77ccf19d5a439d25fb03e", "committedDate": "2020-09-08T13:39:56Z", "message": "More efficient writev"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "75ef1d74c4ad317778a731247ca68674f8976128", "author": {"user": {"login": "normanmaurer", "name": "Norman Maurer"}}, "url": "https://github.com/netty/netty/commit/75ef1d74c4ad317778a731247ca68674f8976128", "committedDate": "2020-09-08T13:26:57Z", "message": "More efficient writev"}, "afterCommit": {"oid": "95639ae66a6ac87e66f77ccf19d5a439d25fb03e", "author": {"user": {"login": "normanmaurer", "name": "Norman Maurer"}}, "url": "https://github.com/netty/netty/commit/95639ae66a6ac87e66f77ccf19d5a439d25fb03e", "committedDate": "2020-09-08T13:39:56Z", "message": "More efficient writev"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MTU2MDA4", "url": "https://github.com/netty/netty/pull/10549#pullrequestreview-484156008", "createdAt": "2020-09-08T13:46:00Z", "commit": {"oid": "95639ae66a6ac87e66f77ccf19d5a439d25fb03e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MjQ4NDgx", "url": "https://github.com/netty/netty/pull/10549#pullrequestreview-484248481", "createdAt": "2020-09-08T15:18:51Z", "commit": {"oid": "95639ae66a6ac87e66f77ccf19d5a439d25fb03e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0NDA5MTg0", "url": "https://github.com/netty/netty/pull/10549#pullrequestreview-484409184", "createdAt": "2020-09-08T18:53:33Z", "commit": {"oid": "95639ae66a6ac87e66f77ccf19d5a439d25fb03e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 27, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}