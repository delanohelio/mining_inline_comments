{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4NDY0NTc0", "number": 10584, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODo1NDo0NFrOEk4OZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMDowODo1N1rOElll3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MTA1MzgzOnYy", "diffSide": "RIGHT", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java", "isResolved": true, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwODo1NDo0NFrOHUEKKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNDoyNDowMFrOHUPZtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgwMTcwNQ==", "bodyText": "Do we need some special handling for MQTT 3.x ?", "url": "https://github.com/netty/netty/pull/10584#discussion_r490801705", "createdAt": "2020-09-18T08:54:44Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java", "diffHunk": "@@ -543,15 +543,12 @@ private static int decodeMessageId(ByteBuf buffer) {\n     private static Result<MqttSubAckPayload> decodeSubackPayload(\n             ByteBuf buffer,\n             int bytesRemainingInVariablePart) {\n-        final List<Integer> grantedQos = new ArrayList<Integer>();\n+        final List<Integer> grantedQos = new ArrayList<Integer>(bytesRemainingInVariablePart);\n         int numberOfBytesConsumed = 0;\n         while (numberOfBytesConsumed < bytesRemainingInVariablePart) {\n-            int qos = buffer.readUnsignedByte();\n-            if (qos != MqttQoS.FAILURE.value()) {\n-                qos &= 0x03;\n-            }\n+            int reasonCode = buffer.readUnsignedByte();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e6f44b91c130fef5bedcffb6193757facc17874"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgxMzg0NQ==", "bodyText": "No special handling - this just cuts off some codes which were not valid in 3.x but became valid in 5.0. See http://docs.oasis-open.org/mqtt/mqtt/v3.1.1/csprd02/mqtt-v3.1.1-csprd02.html#_Toc385349807 vs https://docs.oasis-open.org/mqtt/mqtt/v5.0/os/mqtt-v5.0-os.html#_Toc3901178.", "url": "https://github.com/netty/netty/pull/10584#discussion_r490813845", "createdAt": "2020-09-18T09:15:46Z", "author": {"login": "paul-lysak"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java", "diffHunk": "@@ -543,15 +543,12 @@ private static int decodeMessageId(ByteBuf buffer) {\n     private static Result<MqttSubAckPayload> decodeSubackPayload(\n             ByteBuf buffer,\n             int bytesRemainingInVariablePart) {\n-        final List<Integer> grantedQos = new ArrayList<Integer>();\n+        final List<Integer> grantedQos = new ArrayList<Integer>(bytesRemainingInVariablePart);\n         int numberOfBytesConsumed = 0;\n         while (numberOfBytesConsumed < bytesRemainingInVariablePart) {\n-            int qos = buffer.readUnsignedByte();\n-            if (qos != MqttQoS.FAILURE.value()) {\n-                qos &= 0x03;\n-            }\n+            int reasonCode = buffer.readUnsignedByte();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgwMTcwNQ=="}, "originalCommit": {"oid": "9e6f44b91c130fef5bedcffb6193757facc17874"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkwMTg0Mg==", "bodyText": "The question is do we need to cut these off when 3.x is used ?", "url": "https://github.com/netty/netty/pull/10584#discussion_r490901842", "createdAt": "2020-09-18T12:02:22Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java", "diffHunk": "@@ -543,15 +543,12 @@ private static int decodeMessageId(ByteBuf buffer) {\n     private static Result<MqttSubAckPayload> decodeSubackPayload(\n             ByteBuf buffer,\n             int bytesRemainingInVariablePart) {\n-        final List<Integer> grantedQos = new ArrayList<Integer>();\n+        final List<Integer> grantedQos = new ArrayList<Integer>(bytesRemainingInVariablePart);\n         int numberOfBytesConsumed = 0;\n         while (numberOfBytesConsumed < bytesRemainingInVariablePart) {\n-            int qos = buffer.readUnsignedByte();\n-            if (qos != MqttQoS.FAILURE.value()) {\n-                qos &= 0x03;\n-            }\n+            int reasonCode = buffer.readUnsignedByte();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgwMTcwNQ=="}, "originalCommit": {"oid": "9e6f44b91c130fef5bedcffb6193757facc17874"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDkwMzg3NQ==", "bodyText": "I don't see much use in it, and as checking the protocol version has some performance penalty (need to retrieve it from the channel attribute) - decided not to do it. If you think someone might need it - I can add the check.", "url": "https://github.com/netty/netty/pull/10584#discussion_r490903875", "createdAt": "2020-09-18T12:06:42Z", "author": {"login": "paul-lysak"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java", "diffHunk": "@@ -543,15 +543,12 @@ private static int decodeMessageId(ByteBuf buffer) {\n     private static Result<MqttSubAckPayload> decodeSubackPayload(\n             ByteBuf buffer,\n             int bytesRemainingInVariablePart) {\n-        final List<Integer> grantedQos = new ArrayList<Integer>();\n+        final List<Integer> grantedQos = new ArrayList<Integer>(bytesRemainingInVariablePart);\n         int numberOfBytesConsumed = 0;\n         while (numberOfBytesConsumed < bytesRemainingInVariablePart) {\n-            int qos = buffer.readUnsignedByte();\n-            if (qos != MqttQoS.FAILURE.value()) {\n-                qos &= 0x03;\n-            }\n+            int reasonCode = buffer.readUnsignedByte();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgwMTcwNQ=="}, "originalCommit": {"oid": "9e6f44b91c130fef5bedcffb6193757facc17874"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk4MDU1Mg==", "bodyText": "Ok I was just wondering what will happen to users that \"depend\" on this... So you think there is no \"risk\" ?", "url": "https://github.com/netty/netty/pull/10584#discussion_r490980552", "createdAt": "2020-09-18T14:16:44Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java", "diffHunk": "@@ -543,15 +543,12 @@ private static int decodeMessageId(ByteBuf buffer) {\n     private static Result<MqttSubAckPayload> decodeSubackPayload(\n             ByteBuf buffer,\n             int bytesRemainingInVariablePart) {\n-        final List<Integer> grantedQos = new ArrayList<Integer>();\n+        final List<Integer> grantedQos = new ArrayList<Integer>(bytesRemainingInVariablePart);\n         int numberOfBytesConsumed = 0;\n         while (numberOfBytesConsumed < bytesRemainingInVariablePart) {\n-            int qos = buffer.readUnsignedByte();\n-            if (qos != MqttQoS.FAILURE.value()) {\n-                qos &= 0x03;\n-            }\n+            int reasonCode = buffer.readUnsignedByte();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgwMTcwNQ=="}, "originalCommit": {"oid": "9e6f44b91c130fef5bedcffb6193757facc17874"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk4NTkwOQ==", "bodyText": "With well-behaved MQTT server they'll see exactly the same behavior, as MQTT 3.1 requires bits othter than 0,1 and 7 to remain 0 when sending a message. They only will see unexpected code if server violates the spec, which is possible, in principle, but is very unlikely and, well, it's spec violation from the server side.", "url": "https://github.com/netty/netty/pull/10584#discussion_r490985909", "createdAt": "2020-09-18T14:24:00Z", "author": {"login": "paul-lysak"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttDecoder.java", "diffHunk": "@@ -543,15 +543,12 @@ private static int decodeMessageId(ByteBuf buffer) {\n     private static Result<MqttSubAckPayload> decodeSubackPayload(\n             ByteBuf buffer,\n             int bytesRemainingInVariablePart) {\n-        final List<Integer> grantedQos = new ArrayList<Integer>();\n+        final List<Integer> grantedQos = new ArrayList<Integer>(bytesRemainingInVariablePart);\n         int numberOfBytesConsumed = 0;\n         while (numberOfBytesConsumed < bytesRemainingInVariablePart) {\n-            int qos = buffer.readUnsignedByte();\n-            if (qos != MqttQoS.FAILURE.value()) {\n-                qos &= 0x03;\n-            }\n+            int reasonCode = buffer.readUnsignedByte();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDgwMTcwNQ=="}, "originalCommit": {"oid": "9e6f44b91c130fef5bedcffb6193757facc17874"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODI0ODA4OnYy", "diffSide": "RIGHT", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttSubAckPayload.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwOTowNzozMlrOHVGr_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQwOTo0MDoyMFrOHVH0dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg5MTcwOA==", "bodyText": "@paul-lysak hmm... this feels not correct to me. Do we need to use & 0x03 for the values here ?", "url": "https://github.com/netty/netty/pull/10584#discussion_r491891708", "createdAt": "2020-09-21T09:07:32Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttSubAckPayload.java", "diffHunk": "@@ -28,39 +28,43 @@\n  */\n public class MqttSubAckPayload {\n \n-    private final List<Integer> grantedQoSLevels;\n+    private final List<Integer> reasonCodes;\n \n-    public MqttSubAckPayload(int... grantedQoSLevels) {\n-        ObjectUtil.checkNotNull(grantedQoSLevels, \"grantedQoSLevels\");\n+    public MqttSubAckPayload(int... reasonCodes) {\n+        ObjectUtil.checkNotNull(reasonCodes, \"reasonCodes\");\n \n-        List<Integer> list = new ArrayList<Integer>(grantedQoSLevels.length);\n-        for (int v: grantedQoSLevels) {\n+        List<Integer> list = new ArrayList<Integer>(reasonCodes.length);\n+        for (int v: reasonCodes) {\n             list.add(v);\n         }\n-        this.grantedQoSLevels = Collections.unmodifiableList(list);\n+        this.reasonCodes = Collections.unmodifiableList(list);\n     }\n \n     public MqttSubAckPayload(Iterable<Integer> grantedQoSLevels) {\n-        ObjectUtil.checkNotNull(grantedQoSLevels, \"grantedQoSLevels\");\n+        ObjectUtil.checkNotNull(grantedQoSLevels, \"reasonCodes\");\n         List<Integer> list = new ArrayList<Integer>();\n         for (Integer v: grantedQoSLevels) {\n             if (v == null) {\n                 break;\n             }\n             list.add(v);\n         }\n-        this.grantedQoSLevels = Collections.unmodifiableList(list);\n+        this.reasonCodes = Collections.unmodifiableList(list);\n     }\n \n     public List<Integer> grantedQoSLevels() {\n-        return grantedQoSLevels;\n+        return reasonCodes;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9e6f44b91c130fef5bedcffb6193757facc17874"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkwMDM2OQ==", "bodyText": "In fact, it already can return error code 0x80 beside the actual QoS levels. Nevertheless, I've added a mask here to ensure no new error codes.", "url": "https://github.com/netty/netty/pull/10584#discussion_r491900369", "createdAt": "2020-09-21T09:23:01Z", "author": {"login": "paul-lysak"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttSubAckPayload.java", "diffHunk": "@@ -28,39 +28,43 @@\n  */\n public class MqttSubAckPayload {\n \n-    private final List<Integer> grantedQoSLevels;\n+    private final List<Integer> reasonCodes;\n \n-    public MqttSubAckPayload(int... grantedQoSLevels) {\n-        ObjectUtil.checkNotNull(grantedQoSLevels, \"grantedQoSLevels\");\n+    public MqttSubAckPayload(int... reasonCodes) {\n+        ObjectUtil.checkNotNull(reasonCodes, \"reasonCodes\");\n \n-        List<Integer> list = new ArrayList<Integer>(grantedQoSLevels.length);\n-        for (int v: grantedQoSLevels) {\n+        List<Integer> list = new ArrayList<Integer>(reasonCodes.length);\n+        for (int v: reasonCodes) {\n             list.add(v);\n         }\n-        this.grantedQoSLevels = Collections.unmodifiableList(list);\n+        this.reasonCodes = Collections.unmodifiableList(list);\n     }\n \n     public MqttSubAckPayload(Iterable<Integer> grantedQoSLevels) {\n-        ObjectUtil.checkNotNull(grantedQoSLevels, \"grantedQoSLevels\");\n+        ObjectUtil.checkNotNull(grantedQoSLevels, \"reasonCodes\");\n         List<Integer> list = new ArrayList<Integer>();\n         for (Integer v: grantedQoSLevels) {\n             if (v == null) {\n                 break;\n             }\n             list.add(v);\n         }\n-        this.grantedQoSLevels = Collections.unmodifiableList(list);\n+        this.reasonCodes = Collections.unmodifiableList(list);\n     }\n \n     public List<Integer> grantedQoSLevels() {\n-        return grantedQoSLevels;\n+        return reasonCodes;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg5MTcwOA=="}, "originalCommit": {"oid": "9e6f44b91c130fef5bedcffb6193757facc17874"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkwMTE3Ng==", "bodyText": "can you add a test case for this as well ?", "url": "https://github.com/netty/netty/pull/10584#discussion_r491901176", "createdAt": "2020-09-21T09:24:26Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttSubAckPayload.java", "diffHunk": "@@ -28,39 +28,43 @@\n  */\n public class MqttSubAckPayload {\n \n-    private final List<Integer> grantedQoSLevels;\n+    private final List<Integer> reasonCodes;\n \n-    public MqttSubAckPayload(int... grantedQoSLevels) {\n-        ObjectUtil.checkNotNull(grantedQoSLevels, \"grantedQoSLevels\");\n+    public MqttSubAckPayload(int... reasonCodes) {\n+        ObjectUtil.checkNotNull(reasonCodes, \"reasonCodes\");\n \n-        List<Integer> list = new ArrayList<Integer>(grantedQoSLevels.length);\n-        for (int v: grantedQoSLevels) {\n+        List<Integer> list = new ArrayList<Integer>(reasonCodes.length);\n+        for (int v: reasonCodes) {\n             list.add(v);\n         }\n-        this.grantedQoSLevels = Collections.unmodifiableList(list);\n+        this.reasonCodes = Collections.unmodifiableList(list);\n     }\n \n     public MqttSubAckPayload(Iterable<Integer> grantedQoSLevels) {\n-        ObjectUtil.checkNotNull(grantedQoSLevels, \"grantedQoSLevels\");\n+        ObjectUtil.checkNotNull(grantedQoSLevels, \"reasonCodes\");\n         List<Integer> list = new ArrayList<Integer>();\n         for (Integer v: grantedQoSLevels) {\n             if (v == null) {\n                 break;\n             }\n             list.add(v);\n         }\n-        this.grantedQoSLevels = Collections.unmodifiableList(list);\n+        this.reasonCodes = Collections.unmodifiableList(list);\n     }\n \n     public List<Integer> grantedQoSLevels() {\n-        return grantedQoSLevels;\n+        return reasonCodes;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg5MTcwOA=="}, "originalCommit": {"oid": "9e6f44b91c130fef5bedcffb6193757facc17874"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkxMDI2Mw==", "bodyText": "done", "url": "https://github.com/netty/netty/pull/10584#discussion_r491910263", "createdAt": "2020-09-21T09:40:20Z", "author": {"login": "paul-lysak"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttSubAckPayload.java", "diffHunk": "@@ -28,39 +28,43 @@\n  */\n public class MqttSubAckPayload {\n \n-    private final List<Integer> grantedQoSLevels;\n+    private final List<Integer> reasonCodes;\n \n-    public MqttSubAckPayload(int... grantedQoSLevels) {\n-        ObjectUtil.checkNotNull(grantedQoSLevels, \"grantedQoSLevels\");\n+    public MqttSubAckPayload(int... reasonCodes) {\n+        ObjectUtil.checkNotNull(reasonCodes, \"reasonCodes\");\n \n-        List<Integer> list = new ArrayList<Integer>(grantedQoSLevels.length);\n-        for (int v: grantedQoSLevels) {\n+        List<Integer> list = new ArrayList<Integer>(reasonCodes.length);\n+        for (int v: reasonCodes) {\n             list.add(v);\n         }\n-        this.grantedQoSLevels = Collections.unmodifiableList(list);\n+        this.reasonCodes = Collections.unmodifiableList(list);\n     }\n \n     public MqttSubAckPayload(Iterable<Integer> grantedQoSLevels) {\n-        ObjectUtil.checkNotNull(grantedQoSLevels, \"grantedQoSLevels\");\n+        ObjectUtil.checkNotNull(grantedQoSLevels, \"reasonCodes\");\n         List<Integer> list = new ArrayList<Integer>();\n         for (Integer v: grantedQoSLevels) {\n             if (v == null) {\n                 break;\n             }\n             list.add(v);\n         }\n-        this.grantedQoSLevels = Collections.unmodifiableList(list);\n+        this.reasonCodes = Collections.unmodifiableList(list);\n     }\n \n     public List<Integer> grantedQoSLevels() {\n-        return grantedQoSLevels;\n+        return reasonCodes;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTg5MTcwOA=="}, "originalCommit": {"oid": "9e6f44b91c130fef5bedcffb6193757facc17874"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3ODQ4NjY4OnYy", "diffSide": "RIGHT", "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttSubAckPayload.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMDowODo1N1rOHVI6Gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxMDowODo1N1rOHVI6Gw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTkyODA5MQ==", "bodyText": "nit: change the parameter name ?", "url": "https://github.com/netty/netty/pull/10584#discussion_r491928091", "createdAt": "2020-09-21T10:08:57Z", "author": {"login": "normanmaurer"}, "path": "codec-mqtt/src/main/java/io/netty/handler/codec/mqtt/MqttSubAckPayload.java", "diffHunk": "@@ -28,39 +28,51 @@\n  */\n public class MqttSubAckPayload {\n \n-    private final List<Integer> grantedQoSLevels;\n+    private final List<Integer> reasonCodes;\n \n-    public MqttSubAckPayload(int... grantedQoSLevels) {\n-        ObjectUtil.checkNotNull(grantedQoSLevels, \"grantedQoSLevels\");\n+    public MqttSubAckPayload(int... reasonCodes) {\n+        ObjectUtil.checkNotNull(reasonCodes, \"reasonCodes\");\n \n-        List<Integer> list = new ArrayList<Integer>(grantedQoSLevels.length);\n-        for (int v: grantedQoSLevels) {\n+        List<Integer> list = new ArrayList<Integer>(reasonCodes.length);\n+        for (int v: reasonCodes) {\n             list.add(v);\n         }\n-        this.grantedQoSLevels = Collections.unmodifiableList(list);\n+        this.reasonCodes = Collections.unmodifiableList(list);\n     }\n \n     public MqttSubAckPayload(Iterable<Integer> grantedQoSLevels) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37a5e6c6183fb3a6857c2abf602cd27fc83493d0"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3756, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}