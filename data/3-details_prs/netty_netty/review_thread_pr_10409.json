{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUwMDE3ODYw", "number": 10409, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMzoxMDozNVrOEPH2dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTo0NjozM1rOEPMNrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MjkyNzI3OnYy", "diffSide": "RIGHT", "path": "handler/src/test/java/io/netty/handler/ssl/SSLEngineTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMzoxMDozNVrOGyqMtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMzoxMDozNVrOGyqMtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc3MzM2NQ==", "bodyText": "This line can also use the extracted hs variable.", "url": "https://github.com/netty/netty/pull/10409#discussion_r455773365", "createdAt": "2020-07-16T13:10:35Z", "author": {"login": "chrisvest"}, "path": "handler/src/test/java/io/netty/handler/ssl/SSLEngineTest.java", "diffHunk": "@@ -2332,13 +2332,11 @@ public void testCloseNotifySequence() throws Exception {\n             encryptedClientToServer.flip();\n \n             assertEquals(SSLEngineResult.Status.CLOSED, result.getStatus());\n+            SSLEngineResult.HandshakeStatus hs = result.getHandshakeStatus();\n             // Need an UNWRAP to read the response of the close_notify\n-            if ((PlatformDependent.javaVersion() >= 12 && sslClientProvider() == SslProvider.JDK)\n-                    || Conscrypt.isEngineSupported(client)) {\n-                // This is a workaround for a possible JDK12+ bug.\n-                //\n-                // See http://mail.openjdk.java.net/pipermail/security-dev/2019-February/019406.html.\n-                assertEquals(SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING, result.getHandshakeStatus());\n+            if (sslClientProvider() == SslProvider.JDK || Conscrypt.isEngineSupported(client)) {\n+                assertTrue(hs == SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING\n+                        || hs == SSLEngineResult.HandshakeStatus.NEED_UNWRAP);\n             } else {\n                 assertEquals(SSLEngineResult.HandshakeStatus.NEED_UNWRAP, result.getHandshakeStatus());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32f0fb9131252c2854ad1438cc69ab0b6b12986b"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MjkzNTIwOnYy", "diffSide": "RIGHT", "path": "handler/src/test/java/io/netty/handler/ssl/SSLEngineTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMzoxMjozOFrOGyqRxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzozMjo1OFrOGy1SlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc3NDY2MQ==", "bodyText": "Was the issue you reported for JDK12 fixed, so the test now need to consider either outcome in order to pass on all environments?", "url": "https://github.com/netty/netty/pull/10409#discussion_r455774661", "createdAt": "2020-07-16T13:12:38Z", "author": {"login": "chrisvest"}, "path": "handler/src/test/java/io/netty/handler/ssl/SSLEngineTest.java", "diffHunk": "@@ -2332,13 +2332,11 @@ public void testCloseNotifySequence() throws Exception {\n             encryptedClientToServer.flip();\n \n             assertEquals(SSLEngineResult.Status.CLOSED, result.getStatus());\n+            SSLEngineResult.HandshakeStatus hs = result.getHandshakeStatus();\n             // Need an UNWRAP to read the response of the close_notify\n-            if ((PlatformDependent.javaVersion() >= 12 && sslClientProvider() == SslProvider.JDK)\n-                    || Conscrypt.isEngineSupported(client)) {\n-                // This is a workaround for a possible JDK12+ bug.\n-                //\n-                // See http://mail.openjdk.java.net/pipermail/security-dev/2019-February/019406.html.\n-                assertEquals(SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING, result.getHandshakeStatus());\n+            if (sslClientProvider() == SslProvider.JDK || Conscrypt.isEngineSupported(client)) {\n+                assertTrue(hs == SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING\n+                        || hs == SSLEngineResult.HandshakeStatus.NEED_UNWRAP);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32f0fb9131252c2854ad1438cc69ab0b6b12986b"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk1NTA5Mw==", "bodyText": "yes... both are \"valid\"", "url": "https://github.com/netty/netty/pull/10409#discussion_r455955093", "createdAt": "2020-07-16T17:32:58Z", "author": {"login": "normanmaurer"}, "path": "handler/src/test/java/io/netty/handler/ssl/SSLEngineTest.java", "diffHunk": "@@ -2332,13 +2332,11 @@ public void testCloseNotifySequence() throws Exception {\n             encryptedClientToServer.flip();\n \n             assertEquals(SSLEngineResult.Status.CLOSED, result.getStatus());\n+            SSLEngineResult.HandshakeStatus hs = result.getHandshakeStatus();\n             // Need an UNWRAP to read the response of the close_notify\n-            if ((PlatformDependent.javaVersion() >= 12 && sslClientProvider() == SslProvider.JDK)\n-                    || Conscrypt.isEngineSupported(client)) {\n-                // This is a workaround for a possible JDK12+ bug.\n-                //\n-                // See http://mail.openjdk.java.net/pipermail/security-dev/2019-February/019406.html.\n-                assertEquals(SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING, result.getHandshakeStatus());\n+            if (sslClientProvider() == SslProvider.JDK || Conscrypt.isEngineSupported(client)) {\n+                assertTrue(hs == SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING\n+                        || hs == SSLEngineResult.HandshakeStatus.NEED_UNWRAP);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc3NDY2MQ=="}, "originalCommit": {"oid": "32f0fb9131252c2854ad1438cc69ab0b6b12986b"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzAwMTIwOnYy", "diffSide": "RIGHT", "path": "handler/src/test/java/io/netty/handler/ssl/SslHandlerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMzoyNzo0NVrOGyq6iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzozMzo0MFrOGy1UAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc4NTA5Ng==", "bodyText": "You introduced this parameter, but the value passed is always SslProvider.OPENSSL. Are you planning on adding some SslProvider.JDK tests as well?", "url": "https://github.com/netty/netty/pull/10409#discussion_r455785096", "createdAt": "2020-07-16T13:27:45Z", "author": {"login": "chrisvest"}, "path": "handler/src/test/java/io/netty/handler/ssl/SslHandlerTest.java", "diffHunk": "@@ -1116,37 +1116,37 @@ protected void initChannel(Channel ch) {\n \n     @Test(timeout = 5000L)\n     public void testSessionTicketsWithTLSv12() throws Throwable {\n-        testSessionTickets(SslUtils.PROTOCOL_TLS_V1_2, true);\n+        testSessionTickets(SslProvider.OPENSSL, SslUtils.PROTOCOL_TLS_V1_2, true);\n     }\n \n     @Test(timeout = 5000L)\n     public void testSessionTicketsWithTLSv13() throws Throwable {\n-        assumeTrue(OpenSsl.isTlsv13Supported());\n-        testSessionTickets(SslUtils.PROTOCOL_TLS_V1_3, true);\n+        assumeTrue(SslProvider.isTlsv13Supported(SslProvider.OPENSSL));\n+        testSessionTickets(SslProvider.OPENSSL, SslUtils.PROTOCOL_TLS_V1_3, true);\n     }\n \n     @Test(timeout = 5000L)\n     public void testSessionTicketsWithTLSv12AndNoKey() throws Throwable {\n-        testSessionTickets(SslUtils.PROTOCOL_TLS_V1_2, false);\n+        testSessionTickets(SslProvider.OPENSSL, SslUtils.PROTOCOL_TLS_V1_2, false);\n     }\n \n     @Test(timeout = 5000L)\n     public void testSessionTicketsWithTLSv13AndNoKey() throws Throwable {\n         assumeTrue(OpenSsl.isTlsv13Supported());\n-        testSessionTickets(SslUtils.PROTOCOL_TLS_V1_3, false);\n+        testSessionTickets(SslProvider.OPENSSL, SslUtils.PROTOCOL_TLS_V1_3, false);\n     }\n \n-    private static void testSessionTickets(String protocol, boolean withKey) throws Throwable {\n+    private static void testSessionTickets(SslProvider provider, String protocol, boolean withKey) throws Throwable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32f0fb9131252c2854ad1438cc69ab0b6b12986b"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk1NTQ1Nw==", "bodyText": "nope... This test only works with OpenSsl, I just thought it makes more sense to pass it as we also test for tlsv13 first with it", "url": "https://github.com/netty/netty/pull/10409#discussion_r455955457", "createdAt": "2020-07-16T17:33:40Z", "author": {"login": "normanmaurer"}, "path": "handler/src/test/java/io/netty/handler/ssl/SslHandlerTest.java", "diffHunk": "@@ -1116,37 +1116,37 @@ protected void initChannel(Channel ch) {\n \n     @Test(timeout = 5000L)\n     public void testSessionTicketsWithTLSv12() throws Throwable {\n-        testSessionTickets(SslUtils.PROTOCOL_TLS_V1_2, true);\n+        testSessionTickets(SslProvider.OPENSSL, SslUtils.PROTOCOL_TLS_V1_2, true);\n     }\n \n     @Test(timeout = 5000L)\n     public void testSessionTicketsWithTLSv13() throws Throwable {\n-        assumeTrue(OpenSsl.isTlsv13Supported());\n-        testSessionTickets(SslUtils.PROTOCOL_TLS_V1_3, true);\n+        assumeTrue(SslProvider.isTlsv13Supported(SslProvider.OPENSSL));\n+        testSessionTickets(SslProvider.OPENSSL, SslUtils.PROTOCOL_TLS_V1_3, true);\n     }\n \n     @Test(timeout = 5000L)\n     public void testSessionTicketsWithTLSv12AndNoKey() throws Throwable {\n-        testSessionTickets(SslUtils.PROTOCOL_TLS_V1_2, false);\n+        testSessionTickets(SslProvider.OPENSSL, SslUtils.PROTOCOL_TLS_V1_2, false);\n     }\n \n     @Test(timeout = 5000L)\n     public void testSessionTicketsWithTLSv13AndNoKey() throws Throwable {\n         assumeTrue(OpenSsl.isTlsv13Supported());\n-        testSessionTickets(SslUtils.PROTOCOL_TLS_V1_3, false);\n+        testSessionTickets(SslProvider.OPENSSL, SslUtils.PROTOCOL_TLS_V1_3, false);\n     }\n \n-    private static void testSessionTickets(String protocol, boolean withKey) throws Throwable {\n+    private static void testSessionTickets(SslProvider provider, String protocol, boolean withKey) throws Throwable {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc4NTA5Ng=="}, "originalCommit": {"oid": "32f0fb9131252c2854ad1438cc69ab0b6b12986b"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzMwNDQzOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/ssl/SslUtils.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNDozMjo0MlrOGyt2Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzozNDowN1rOGy1U9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgzMzEwNg==", "bodyText": "Why get SunJSSE explicitly? I'd understand if we got SunJSSE explicitly elsewhere, but it doesn't seem we do. If we're going to use the default implementation of \"TLS\" it seems we should check that one here. Otherwise there's lots of similar-but-not-quite-the-same checks we could do, like Security.getProviders(\"SSLContext.TLSv1.3\") != null to see if any provider supports TLSv1.3.", "url": "https://github.com/netty/netty/pull/10409#discussion_r455833106", "createdAt": "2020-07-16T14:32:42Z", "author": {"login": "ejona86"}, "path": "handler/src/main/java/io/netty/handler/ssl/SslUtils.java", "diffHunk": "@@ -101,8 +106,26 @@\n     static final String[] DEFAULT_TLSV13_CIPHER_SUITES;\n     static final String[] TLSV13_CIPHER_SUITES = { \"TLS_AES_128_GCM_SHA256\", \"TLS_AES_256_GCM_SHA384\" };\n \n+    private static final boolean TLSV1_3_SUPPORTED;\n+\n     static {\n-        if (PlatformDependent.javaVersion() >= 11) {\n+        boolean tlsv13Supported = false;\n+        try {\n+            SSLContext context = SSLContext.getInstance(\"TLS\", \"SunJSSE\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32f0fb9131252c2854ad1438cc69ab0b6b12986b"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg4ODcyMw==", "bodyText": "Somewhat agree here.   If a user has bouncy castle as their provider this may not match.", "url": "https://github.com/netty/netty/pull/10409#discussion_r455888723", "createdAt": "2020-07-16T15:48:46Z", "author": {"login": "carl-mastrangelo"}, "path": "handler/src/main/java/io/netty/handler/ssl/SslUtils.java", "diffHunk": "@@ -101,8 +106,26 @@\n     static final String[] DEFAULT_TLSV13_CIPHER_SUITES;\n     static final String[] TLSV13_CIPHER_SUITES = { \"TLS_AES_128_GCM_SHA256\", \"TLS_AES_256_GCM_SHA384\" };\n \n+    private static final boolean TLSV1_3_SUPPORTED;\n+\n     static {\n-        if (PlatformDependent.javaVersion() >= 11) {\n+        boolean tlsv13Supported = false;\n+        try {\n+            SSLContext context = SSLContext.getInstance(\"TLS\", \"SunJSSE\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgzMzEwNg=="}, "originalCommit": {"oid": "32f0fb9131252c2854ad1438cc69ab0b6b12986b"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTk1NTcwMA==", "bodyText": "good point... let me fix this", "url": "https://github.com/netty/netty/pull/10409#discussion_r455955700", "createdAt": "2020-07-16T17:34:07Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/ssl/SslUtils.java", "diffHunk": "@@ -101,8 +106,26 @@\n     static final String[] DEFAULT_TLSV13_CIPHER_SUITES;\n     static final String[] TLSV13_CIPHER_SUITES = { \"TLS_AES_128_GCM_SHA256\", \"TLS_AES_256_GCM_SHA384\" };\n \n+    private static final boolean TLSV1_3_SUPPORTED;\n+\n     static {\n-        if (PlatformDependent.javaVersion() >= 11) {\n+        boolean tlsv13Supported = false;\n+        try {\n+            SSLContext context = SSLContext.getInstance(\"TLS\", \"SunJSSE\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgzMzEwNg=="}, "originalCommit": {"oid": "32f0fb9131252c2854ad1438cc69ab0b6b12986b"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzY0MDY2OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/ssl/SslUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTo0NjoxNVrOGyxIqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTo0NjoxNVrOGyxIqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg4NzAxNg==", "bodyText": "I think this should be moved out of the try block", "url": "https://github.com/netty/netty/pull/10409#discussion_r455887016", "createdAt": "2020-07-16T15:46:15Z", "author": {"login": "carl-mastrangelo"}, "path": "handler/src/main/java/io/netty/handler/ssl/SslUtils.java", "diffHunk": "@@ -101,8 +106,26 @@\n     static final String[] DEFAULT_TLSV13_CIPHER_SUITES;\n     static final String[] TLSV13_CIPHER_SUITES = { \"TLS_AES_128_GCM_SHA256\", \"TLS_AES_256_GCM_SHA384\" };\n \n+    private static final boolean TLSV1_3_SUPPORTED;\n+\n     static {\n-        if (PlatformDependent.javaVersion() >= 11) {\n+        boolean tlsv13Supported = false;\n+        try {\n+            SSLContext context = SSLContext.getInstance(\"TLS\", \"SunJSSE\");\n+            context.init(null, new TrustManager[] {  }, null);\n+            for (String supported: context.getSupportedSSLParameters().getProtocols()) {\n+                if (PROTOCOL_TLS_V1_3.equals(supported)) {\n+                    tlsv13Supported = true;\n+                    break;\n+                }\n+            }\n+            logger.debug(\"JDK SSLEngine supports TLSv1.3: {}\", tlsv13Supported);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32f0fb9131252c2854ad1438cc69ab0b6b12986b"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzY0MjA0OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/ssl/SslUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTo0NjozM1rOGyxJew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNTo0NjozM1rOGyxJew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTg4NzIyNw==", "bodyText": "new TrustManager[0]  ?", "url": "https://github.com/netty/netty/pull/10409#discussion_r455887227", "createdAt": "2020-07-16T15:46:33Z", "author": {"login": "carl-mastrangelo"}, "path": "handler/src/main/java/io/netty/handler/ssl/SslUtils.java", "diffHunk": "@@ -101,8 +106,26 @@\n     static final String[] DEFAULT_TLSV13_CIPHER_SUITES;\n     static final String[] TLSV13_CIPHER_SUITES = { \"TLS_AES_128_GCM_SHA256\", \"TLS_AES_256_GCM_SHA384\" };\n \n+    private static final boolean TLSV1_3_SUPPORTED;\n+\n     static {\n-        if (PlatformDependent.javaVersion() >= 11) {\n+        boolean tlsv13Supported = false;\n+        try {\n+            SSLContext context = SSLContext.getInstance(\"TLS\", \"SunJSSE\");\n+            context.init(null, new TrustManager[] {  }, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "32f0fb9131252c2854ad1438cc69ab0b6b12986b"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3838, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}