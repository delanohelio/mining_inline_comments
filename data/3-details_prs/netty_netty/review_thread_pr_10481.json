{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3NDIxOTEy", "number": 10481, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTozNzoxOFrOEYHBuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTozNzoxOFrOEYHBuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzNzE2NDExOnYy", "diffSide": "RIGHT", "path": "codec-http/src/test/java/io/netty/handler/codec/http/multipart/AbstractDiskHttpDataTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTozNzoxOFrOHARL6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xM1QxNTo1MjoxNVrOHARypA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA0MzYyNQ==", "bodyText": "@violetagg so you want to assert that both are not equals ?\nWhy not use assertFalse(Arrays.equals(.....)) or assertFalse(buf1.equals(buf2));?", "url": "https://github.com/netty/netty/pull/10481#discussion_r470043625", "createdAt": "2020-08-13T15:37:18Z", "author": {"login": "normanmaurer"}, "path": "codec-http/src/test/java/io/netty/handler/codec/http/multipart/AbstractDiskHttpDataTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http.multipart;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufUtil;\n+import io.netty.util.internal.PlatformDependent;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.nio.charset.Charset;\n+import java.util.UUID;\n+\n+import static io.netty.util.CharsetUtil.UTF_8;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * {@link AbstractDiskHttpData} test cases\n+ */\n+public class AbstractDiskHttpDataTest {\n+\n+    @Test\n+    public void testGetChunk() throws Exception {\n+        TestHttpData test = new TestHttpData(\"test\", UTF_8, 0);\n+        try {\n+            File tmpFile = File.createTempFile(UUID.randomUUID().toString(), \".tmp\");\n+            tmpFile.deleteOnExit();\n+            FileOutputStream fos = new FileOutputStream(tmpFile);\n+            byte[] bytes = new byte[4096];\n+            PlatformDependent.threadLocalRandom().nextBytes(bytes);\n+            try {\n+                fos.write(bytes);\n+                fos.flush();\n+            } finally {\n+                fos.close();\n+            }\n+            test.setContent(tmpFile);\n+            ByteBuf buf1 = test.getChunk(1024);\n+            assertEquals(buf1.readerIndex(), 0);\n+            assertEquals(buf1.writerIndex(), 1024);\n+            ByteBuf buf2 = test.getChunk(1024);\n+            assertEquals(buf2.readerIndex(), 0);\n+            assertEquals(buf2.writerIndex(), 1024);\n+            try {\n+                assertArrayEquals(ByteBufUtil.getBytes(buf1), ByteBufUtil.getBytes(buf2));\n+            } catch (AssertionError e) {\n+                return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e7d14f08c21112ba23b67fd0dc39a2559fe5863d"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA1MzU0MA==", "bodyText": "fixed", "url": "https://github.com/netty/netty/pull/10481#discussion_r470053540", "createdAt": "2020-08-13T15:52:15Z", "author": {"login": "violetagg"}, "path": "codec-http/src/test/java/io/netty/handler/codec/http/multipart/AbstractDiskHttpDataTest.java", "diffHunk": "@@ -0,0 +1,132 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.http.multipart;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.ByteBufUtil;\n+import io.netty.util.internal.PlatformDependent;\n+import org.junit.Test;\n+\n+import java.io.File;\n+import java.io.FileOutputStream;\n+import java.nio.charset.Charset;\n+import java.util.UUID;\n+\n+import static io.netty.util.CharsetUtil.UTF_8;\n+import static org.junit.Assert.assertArrayEquals;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.fail;\n+\n+/**\n+ * {@link AbstractDiskHttpData} test cases\n+ */\n+public class AbstractDiskHttpDataTest {\n+\n+    @Test\n+    public void testGetChunk() throws Exception {\n+        TestHttpData test = new TestHttpData(\"test\", UTF_8, 0);\n+        try {\n+            File tmpFile = File.createTempFile(UUID.randomUUID().toString(), \".tmp\");\n+            tmpFile.deleteOnExit();\n+            FileOutputStream fos = new FileOutputStream(tmpFile);\n+            byte[] bytes = new byte[4096];\n+            PlatformDependent.threadLocalRandom().nextBytes(bytes);\n+            try {\n+                fos.write(bytes);\n+                fos.flush();\n+            } finally {\n+                fos.close();\n+            }\n+            test.setContent(tmpFile);\n+            ByteBuf buf1 = test.getChunk(1024);\n+            assertEquals(buf1.readerIndex(), 0);\n+            assertEquals(buf1.writerIndex(), 1024);\n+            ByteBuf buf2 = test.getChunk(1024);\n+            assertEquals(buf2.readerIndex(), 0);\n+            assertEquals(buf2.writerIndex(), 1024);\n+            try {\n+                assertArrayEquals(ByteBufUtil.getBytes(buf1), ByteBufUtil.getBytes(buf2));\n+            } catch (AssertionError e) {\n+                return;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDA0MzYyNQ=="}, "originalCommit": {"oid": "e7d14f08c21112ba23b67fd0dc39a2559fe5863d"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3873, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}