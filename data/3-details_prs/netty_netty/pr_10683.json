{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzMjAyMTU3", "number": 10683, "title": "Better hash algorithm in FingerprintTrustManagerFactory", "bodyText": "Motivation:\nFingerprintTrustManagerFactory can only use SHA-1 that is considered insecure.\nModifications:\nUpdated FingerprintTrustManagerFactory to accept a stronger hash algorithm. Deprecated the constructors that still use SHA-1.\nResult:\nA user can now configure FingerprintTrustManagerFactory to use a stronger hash algorithm. The compiler shows a warning if the code still uses one of the unsafe constructors.\nFixes #10649", "createdAt": "2020-10-14T08:26:24Z", "url": "https://github.com/netty/netty/pull/10683", "merged": true, "mergeCommit": {"oid": "065c39611e0f65a3c6d4650638b395258e1fd8f2"}, "closed": true, "closedAt": "2020-10-26T13:29:27Z", "author": {"login": "artem-smotrakov"}, "timelineItems": {"totalCount": 20, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdSZ3npgFqTUwODE2NzA2OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWUZERgFqTUxNjc3NDg0MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4MTY3MDY4", "url": "https://github.com/netty/netty/pull/10683#pullrequestreview-508167068", "createdAt": "2020-10-14T09:35:00Z", "commit": {"oid": "44e6f4c33cf9070b1ef5231c80dcfb760a83ab9e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOTozNTowMVrOHhKmLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOTozNTowMVrOHhKmLA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzODY2OA==", "bodyText": "Add method to add a List of fingerprints.", "url": "https://github.com/netty/netty/pull/10683#discussion_r504538668", "createdAt": "2020-10-14T09:35:01Z", "author": {"login": "hyperxpro"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -207,4 +252,50 @@ protected void engineInit(ManagerFactoryParameters managerFactoryParameters) thr\n     protected TrustManager[] engineGetTrustManagers() {\n         return new TrustManager[] { tm };\n     }\n+\n+    /**\n+     * A builder for creating {@link FingerprintTrustManagerFactory}.\n+     */\n+    public static final class Builder {\n+\n+        /**\n+         * A hash algorithm for fingerprints.\n+         */\n+        private final String algorithm;\n+\n+        /**\n+         * A list of fingerprints.\n+         */\n+        private final List<String> fingerprints = new ArrayList<String>();\n+\n+        /**\n+         * Creates a builder.\n+         *\n+         * @param algorithm a hash algorithm\n+         */\n+        private Builder(String algorithm) {\n+            this.algorithm = ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n+        }\n+\n+        /**\n+         * Adds a fingerprint.\n+         *\n+         * @param fingerprint a fingerprint\n+         * @return the same builder\n+         */\n+        public Builder fingerprint(String fingerprint) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44e6f4c33cf9070b1ef5231c80dcfb760a83ab9e"}, "originalPosition": 222}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA4MTkxOTQw", "url": "https://github.com/netty/netty/pull/10683#pullrequestreview-508191940", "createdAt": "2020-10-14T10:06:19Z", "commit": {"oid": "44e6f4c33cf9070b1ef5231c80dcfb760a83ab9e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDowNjoxOVrOHhLxOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDoxMDowNlrOHhL56A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1Nzg4MA==", "bodyText": "Also add @deprecated javadoc tag", "url": "https://github.com/netty/netty/pull/10683#discussion_r504557880", "createdAt": "2020-10-14T10:06:19Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -135,45 +131,97 @@ private void checkTrusted(String type, X509Certificate[] chain) throws Certifica\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(Iterable<String> fingerprints) {\n-        this(toFingerprintArray(fingerprints));\n+        this(\"SHA1\", toFingerprintArray(fingerprints));\n     }\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44e6f4c33cf9070b1ef5231c80dcfb760a83ab9e"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1ODA4MA==", "bodyText": "also add @deprecated javadoc tag", "url": "https://github.com/netty/netty/pull/10683#discussion_r504558080", "createdAt": "2020-10-14T10:06:41Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -135,45 +131,97 @@ private void checkTrusted(String type, X509Certificate[] chain) throws Certifica\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(Iterable<String> fingerprints) {\n-        this(toFingerprintArray(fingerprints));\n+        this(\"SHA1\", toFingerprintArray(fingerprints));\n     }\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(String... fingerprints) {\n-        this(toFingerprintArray(Arrays.asList(fingerprints)));\n+        this(\"SHA1\", toFingerprintArray(Arrays.asList(fingerprints)));\n     }\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44e6f4c33cf9070b1ef5231c80dcfb760a83ab9e"}, "originalPosition": 116}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1ODYzOQ==", "bodyText": "should we call MessageDigest.getInstance(algorithm) once in the constructor now to ensure it will not fail later on ?", "url": "https://github.com/netty/netty/pull/10683#discussion_r504558639", "createdAt": "2020-10-14T10:07:36Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -135,45 +131,97 @@ private void checkTrusted(String type, X509Certificate[] chain) throws Certifica\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(Iterable<String> fingerprints) {\n-        this(toFingerprintArray(fingerprints));\n+        this(\"SHA1\", toFingerprintArray(fingerprints));\n     }\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(String... fingerprints) {\n-        this(toFingerprintArray(Arrays.asList(fingerprints)));\n+        this(\"SHA1\", toFingerprintArray(Arrays.asList(fingerprints)));\n     }\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(byte[]... fingerprints) {\n+        this(\"SHA1\", fingerprints);\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param algorithm a hash algorithm\n+     * @param fingerprints a list of fingerprints\n+     */\n+    private FingerprintTrustManagerFactory(final String algorithm, byte[][] fingerprints) {\n+        ObjectUtil.checkNotNull(algorithm, \"algorithm\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44e6f4c33cf9070b1ef5231c80dcfb760a83ab9e"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1OTQzMA==", "bodyText": "see above... I think it is very unlikely that the \"constructing\" thread will use the factory itself. so I think it would be better to not waste resources in the FastThreadLocal  and construct it directly.", "url": "https://github.com/netty/netty/pull/10683#discussion_r504559430", "createdAt": "2020-10-14T10:09:00Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -135,45 +131,97 @@ private void checkTrusted(String type, X509Certificate[] chain) throws Certifica\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(Iterable<String> fingerprints) {\n-        this(toFingerprintArray(fingerprints));\n+        this(\"SHA1\", toFingerprintArray(fingerprints));\n     }\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(String... fingerprints) {\n-        this(toFingerprintArray(Arrays.asList(fingerprints)));\n+        this(\"SHA1\", toFingerprintArray(Arrays.asList(fingerprints)));\n     }\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(byte[]... fingerprints) {\n+        this(\"SHA1\", fingerprints);\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param algorithm a hash algorithm\n+     * @param fingerprints a list of fingerprints\n+     */\n+    private FingerprintTrustManagerFactory(final String algorithm, byte[][] fingerprints) {\n+        ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n         ObjectUtil.checkNotNull(fingerprints, \"fingerprints\");\n \n+        this.tlmd = new FastThreadLocal<MessageDigest>() {\n+\n+            @Override\n+            protected MessageDigest initialValue() {\n+                try {\n+                    return MessageDigest.getInstance(algorithm);\n+                } catch (NoSuchAlgorithmException e) {\n+                    throw new IllegalArgumentException(\"Unsupported hash algorithm\", e);\n+                }\n+            }\n+        };\n+\n+        int hashLength = tlmd.get().getDigestLength();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44e6f4c33cf9070b1ef5231c80dcfb760a83ab9e"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1OTYyNA==", "bodyText": "EmptyArrays.BYTES", "url": "https://github.com/netty/netty/pull/10683#discussion_r504559624", "createdAt": "2020-10-14T10:09:19Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -135,45 +131,97 @@ private void checkTrusted(String type, X509Certificate[] chain) throws Certifica\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(Iterable<String> fingerprints) {\n-        this(toFingerprintArray(fingerprints));\n+        this(\"SHA1\", toFingerprintArray(fingerprints));\n     }\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(String... fingerprints) {\n-        this(toFingerprintArray(Arrays.asList(fingerprints)));\n+        this(\"SHA1\", toFingerprintArray(Arrays.asList(fingerprints)));\n     }\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(byte[]... fingerprints) {\n+        this(\"SHA1\", fingerprints);\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param algorithm a hash algorithm\n+     * @param fingerprints a list of fingerprints\n+     */\n+    private FingerprintTrustManagerFactory(final String algorithm, byte[][] fingerprints) {\n+        ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n         ObjectUtil.checkNotNull(fingerprints, \"fingerprints\");\n \n+        this.tlmd = new FastThreadLocal<MessageDigest>() {\n+\n+            @Override\n+            protected MessageDigest initialValue() {\n+                try {\n+                    return MessageDigest.getInstance(algorithm);\n+                } catch (NoSuchAlgorithmException e) {\n+                    throw new IllegalArgumentException(\"Unsupported hash algorithm\", e);\n+                }\n+            }\n+        };\n+\n+        int hashLength = tlmd.get().getDigestLength();\n         List<byte[]> list = new ArrayList<byte[]>(fingerprints.length);\n         for (byte[] f: fingerprints) {\n             if (f == null) {\n                 break;\n             }\n-            if (f.length != SHA1_BYTE_LEN) {\n-                throw new IllegalArgumentException(\"malformed fingerprint: \" +\n-                        ByteBufUtil.hexDump(Unpooled.wrappedBuffer(f)) + \" (expected: SHA1)\");\n+            if (f.length != hashLength) {\n+                throw new IllegalArgumentException(\n+                        \"malformed fingerprint (length): \" + ByteBufUtil.hexDump(Unpooled.wrappedBuffer(f)));\n             }\n             list.add(f.clone());\n         }\n \n         this.fingerprints = list.toArray(new byte[0][]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44e6f4c33cf9070b1ef5231c80dcfb760a83ab9e"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2MDEwNA==", "bodyText": "honestly this feels a bit like overkill.. Let's just keep it or use String...", "url": "https://github.com/netty/netty/pull/10683#discussion_r504560104", "createdAt": "2020-10-14T10:10:06Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -207,4 +252,50 @@ protected void engineInit(ManagerFactoryParameters managerFactoryParameters) thr\n     protected TrustManager[] engineGetTrustManagers() {\n         return new TrustManager[] { tm };\n     }\n+\n+    /**\n+     * A builder for creating {@link FingerprintTrustManagerFactory}.\n+     */\n+    public static final class Builder {\n+\n+        /**\n+         * A hash algorithm for fingerprints.\n+         */\n+        private final String algorithm;\n+\n+        /**\n+         * A list of fingerprints.\n+         */\n+        private final List<String> fingerprints = new ArrayList<String>();\n+\n+        /**\n+         * Creates a builder.\n+         *\n+         * @param algorithm a hash algorithm\n+         */\n+        private Builder(String algorithm) {\n+            this.algorithm = ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n+        }\n+\n+        /**\n+         * Adds a fingerprint.\n+         *\n+         * @param fingerprint a fingerprint\n+         * @return the same builder\n+         */\n+        public Builder fingerprint(String fingerprint) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzODY2OA=="}, "originalCommit": {"oid": "44e6f4c33cf9070b1ef5231c80dcfb760a83ab9e"}, "originalPosition": 222}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "44e6f4c33cf9070b1ef5231c80dcfb760a83ab9e", "author": {"user": {"login": "artem-smotrakov", "name": "Artem Smotrakov"}}, "url": "https://github.com/netty/netty/commit/44e6f4c33cf9070b1ef5231c80dcfb760a83ab9e", "committedDate": "2020-10-14T08:22:23Z", "message": "Better hash algorithm in FingerprintTrustManagerFactory\n\nMotivation:\n\nFingerprintTrustManagerFactory can only use SHA-1 that is considered\ninsecure.\n\nModifications:\n\nUpdated FingerprintTrustManagerFactory to accept a stronger hash\nalgorithm.\nDeprecated the constructors that still use SHA-1.\n\nResult:\n\nA user can now configure FingerprintTrustManagerFactory to use a\nstronger hash algorithm.\nThe compiler shows a warning if the code still uses one of the\nunsafe constructors."}, "afterCommit": {"oid": "869ccd8ee9ce33378f49837c1d6389cd532263d0", "author": {"user": {"login": "artem-smotrakov", "name": "Artem Smotrakov"}}, "url": "https://github.com/netty/netty/commit/869ccd8ee9ce33378f49837c1d6389cd532263d0", "committedDate": "2020-10-15T09:58:23Z", "message": "Better hash algorithm in FingerprintTrustManagerFactory\n\nMotivation:\n\nFingerprintTrustManagerFactory can only use SHA-1 that is considered\ninsecure.\n\nModifications:\n\nUpdated FingerprintTrustManagerFactory to accept a stronger hash\nalgorithm.\nDeprecated the constructors that still use SHA-1.\n\nResult:\n\nA user can now configure FingerprintTrustManagerFactory to use a\nstronger hash algorithm.\nThe compiler shows a warning if the code still uses one of the\nunsafe constructors."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MzAzNTM4", "url": "https://github.com/netty/netty/pull/10683#pullrequestreview-509303538", "createdAt": "2020-10-15T12:04:23Z", "commit": {"oid": "869ccd8ee9ce33378f49837c1d6389cd532263d0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMjowNDoyM1rOHiEbMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMjowNDoyM1rOHiEbMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ4NjEzMA==", "bodyText": "nit: include algorithm in the message as well.", "url": "https://github.com/netty/netty/pull/10683#discussion_r505486130", "createdAt": "2020-10-15T12:04:23Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -136,44 +132,89 @@ private void checkTrusted(String type, X509Certificate[] chain) throws Certifica\n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(Iterable<String> fingerprints) {\n-        this(toFingerprintArray(fingerprints));\n+        this(\"SHA1\", toFingerprintArray(fingerprints));\n     }\n \n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(String... fingerprints) {\n-        this(toFingerprintArray(Arrays.asList(fingerprints)));\n+        this(\"SHA1\", toFingerprintArray(Arrays.asList(fingerprints)));\n     }\n \n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(byte[]... fingerprints) {\n+        this(\"SHA1\", fingerprints);\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param algorithm a hash algorithm\n+     * @param fingerprints a list of fingerprints\n+     */\n+    private FingerprintTrustManagerFactory(final String algorithm, byte[][] fingerprints) {\n+        ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n         ObjectUtil.checkNotNull(fingerprints, \"fingerprints\");\n \n+        MessageDigest md;\n+        try {\n+            md = MessageDigest.getInstance(algorithm);\n+        } catch (NoSuchAlgorithmException e) {\n+            throw new IllegalArgumentException(\"Unsupported hash algorithm\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "869ccd8ee9ce33378f49837c1d6389cd532263d0"}, "originalPosition": 133}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MzA0OTA3", "url": "https://github.com/netty/netty/pull/10683#pullrequestreview-509304907", "createdAt": "2020-10-15T12:06:12Z", "commit": {"oid": "869ccd8ee9ce33378f49837c1d6389cd532263d0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMjowNjoxMlrOHiEfRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMjowNjoxMlrOHiEfRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ4NzE3NA==", "bodyText": "nit: include the actual length and the expected length in the message as well", "url": "https://github.com/netty/netty/pull/10683#discussion_r505487174", "createdAt": "2020-10-15T12:06:12Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -136,44 +132,89 @@ private void checkTrusted(String type, X509Certificate[] chain) throws Certifica\n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(Iterable<String> fingerprints) {\n-        this(toFingerprintArray(fingerprints));\n+        this(\"SHA1\", toFingerprintArray(fingerprints));\n     }\n \n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(String... fingerprints) {\n-        this(toFingerprintArray(Arrays.asList(fingerprints)));\n+        this(\"SHA1\", toFingerprintArray(Arrays.asList(fingerprints)));\n     }\n \n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(byte[]... fingerprints) {\n+        this(\"SHA1\", fingerprints);\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param algorithm a hash algorithm\n+     * @param fingerprints a list of fingerprints\n+     */\n+    private FingerprintTrustManagerFactory(final String algorithm, byte[][] fingerprints) {\n+        ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n         ObjectUtil.checkNotNull(fingerprints, \"fingerprints\");\n \n+        MessageDigest md;\n+        try {\n+            md = MessageDigest.getInstance(algorithm);\n+        } catch (NoSuchAlgorithmException e) {\n+            throw new IllegalArgumentException(\"Unsupported hash algorithm\", e);\n+        }\n+\n+        int hashLength = md.getDigestLength();\n         List<byte[]> list = new ArrayList<byte[]>(fingerprints.length);\n         for (byte[] f: fingerprints) {\n             if (f == null) {\n                 break;\n             }\n-            if (f.length != SHA1_BYTE_LEN) {\n-                throw new IllegalArgumentException(\"malformed fingerprint: \" +\n-                        ByteBufUtil.hexDump(Unpooled.wrappedBuffer(f)) + \" (expected: SHA1)\");\n+            if (f.length != hashLength) {\n+                throw new IllegalArgumentException(\n+                        \"malformed fingerprint (length): \" + ByteBufUtil.hexDump(Unpooled.wrappedBuffer(f)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "869ccd8ee9ce33378f49837c1d6389cd532263d0"}, "originalPosition": 147}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "869ccd8ee9ce33378f49837c1d6389cd532263d0", "author": {"user": {"login": "artem-smotrakov", "name": "Artem Smotrakov"}}, "url": "https://github.com/netty/netty/commit/869ccd8ee9ce33378f49837c1d6389cd532263d0", "committedDate": "2020-10-15T09:58:23Z", "message": "Better hash algorithm in FingerprintTrustManagerFactory\n\nMotivation:\n\nFingerprintTrustManagerFactory can only use SHA-1 that is considered\ninsecure.\n\nModifications:\n\nUpdated FingerprintTrustManagerFactory to accept a stronger hash\nalgorithm.\nDeprecated the constructors that still use SHA-1.\n\nResult:\n\nA user can now configure FingerprintTrustManagerFactory to use a\nstronger hash algorithm.\nThe compiler shows a warning if the code still uses one of the\nunsafe constructors."}, "afterCommit": {"oid": "187a6d43f881df5cb0ecbf157dfd808208824649", "author": {"user": {"login": "artem-smotrakov", "name": "Artem Smotrakov"}}, "url": "https://github.com/netty/netty/commit/187a6d43f881df5cb0ecbf157dfd808208824649", "committedDate": "2020-10-15T12:26:10Z", "message": "Better hash algorithm in FingerprintTrustManagerFactory\n\nMotivation:\n\nFingerprintTrustManagerFactory can only use SHA-1 that is considered\ninsecure.\n\nModifications:\n\nUpdated FingerprintTrustManagerFactory to accept a stronger hash\nalgorithm.\nDeprecated the constructors that still use SHA-1.\n\nResult:\n\nA user can now configure FingerprintTrustManagerFactory to use a\nstronger hash algorithm.\nThe compiler shows a warning if the code still uses one of the\nunsafe constructors."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA5MzIzMTI1", "url": "https://github.com/netty/netty/pull/10683#pullrequestreview-509323125", "createdAt": "2020-10-15T12:28:06Z", "commit": {"oid": "187a6d43f881df5cb0ecbf157dfd808208824649"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwMjM2MzU4", "url": "https://github.com/netty/netty/pull/10683#pullrequestreview-510236358", "createdAt": "2020-10-16T07:57:53Z", "commit": {"oid": "187a6d43f881df5cb0ecbf157dfd808208824649"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNzo1Nzo1M1rOHishEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwODowMDoyM1rOHispKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE0Mjk5NA==", "bodyText": "How about moving this method before the member fields in this class? i.e.\nclass MyClass {\n\n    private static final ...;\n\n    public static Builder builder() { ... }\n\n    private final ...;\n\n    public MyClass() { ... }\n}", "url": "https://github.com/netty/netty/pull/10683#discussion_r506142994", "createdAt": "2020-10-16T07:57:53Z", "author": {"login": "trustin"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -136,44 +132,91 @@ private void checkTrusted(String type, X509Certificate[] chain) throws Certifica\n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(Iterable<String> fingerprints) {\n-        this(toFingerprintArray(fingerprints));\n+        this(\"SHA1\", toFingerprintArray(fingerprints));\n     }\n \n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(String... fingerprints) {\n-        this(toFingerprintArray(Arrays.asList(fingerprints)));\n+        this(\"SHA1\", toFingerprintArray(Arrays.asList(fingerprints)));\n     }\n \n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(byte[]... fingerprints) {\n+        this(\"SHA1\", fingerprints);\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param algorithm a hash algorithm\n+     * @param fingerprints a list of fingerprints\n+     */\n+    private FingerprintTrustManagerFactory(final String algorithm, byte[][] fingerprints) {\n+        ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n         ObjectUtil.checkNotNull(fingerprints, \"fingerprints\");\n \n+        MessageDigest md;\n+        try {\n+            md = MessageDigest.getInstance(algorithm);\n+        } catch (NoSuchAlgorithmException e) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Unsupported hash algorithm: %s\", algorithm), e);\n+        }\n+\n+        int hashLength = md.getDigestLength();\n         List<byte[]> list = new ArrayList<byte[]>(fingerprints.length);\n         for (byte[] f: fingerprints) {\n             if (f == null) {\n                 break;\n             }\n-            if (f.length != SHA1_BYTE_LEN) {\n-                throw new IllegalArgumentException(\"malformed fingerprint: \" +\n-                        ByteBufUtil.hexDump(Unpooled.wrappedBuffer(f)) + \" (expected: SHA1)\");\n+            if (f.length != hashLength) {\n+                throw new IllegalArgumentException(\n+                        String.format(\"malformed fingerprint (length is %d but expected %d): %s\",\n+                                      f.length, hashLength, ByteBufUtil.hexDump(Unpooled.wrappedBuffer(f))));\n             }\n             list.add(f.clone());\n         }\n \n+        this.tlmd.set(md);\n         this.fingerprints = list.toArray(new byte[0][]);\n     }\n \n+    /**\n+     * Creates a builder for {@link FingerprintTrustManagerFactory}.\n+     *\n+     * @param algorithm a hash algorithm\n+     * @return a builder\n+     */\n+    public static Builder builder(String algorithm) {\n+       return new Builder(algorithm);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187a6d43f881df5cb0ecbf157dfd808208824649"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE0MzQzNA==", "bodyText": "I'd prefer having this in a top-level class as FingerprintTrustManagerFactoryBuilder.", "url": "https://github.com/netty/netty/pull/10683#discussion_r506143434", "createdAt": "2020-10-16T07:58:25Z", "author": {"login": "trustin"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -207,4 +247,52 @@ protected void engineInit(ManagerFactoryParameters managerFactoryParameters) thr\n     protected TrustManager[] engineGetTrustManagers() {\n         return new TrustManager[] { tm };\n     }\n+\n+    /**\n+     * A builder for creating {@link FingerprintTrustManagerFactory}.\n+     */\n+    public static final class Builder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187a6d43f881df5cb0ecbf157dfd808208824649"}, "originalPosition": 189}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE0NDE3MA==", "bodyText": "How about accepting CharSequence... and then converting it to a String?\nCould we also add the version that accepts Iterable<? extends CharSequence>?", "url": "https://github.com/netty/netty/pull/10683#discussion_r506144170", "createdAt": "2020-10-16T07:59:24Z", "author": {"login": "trustin"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -207,4 +247,52 @@ protected void engineInit(ManagerFactoryParameters managerFactoryParameters) thr\n     protected TrustManager[] engineGetTrustManagers() {\n         return new TrustManager[] { tm };\n     }\n+\n+    /**\n+     * A builder for creating {@link FingerprintTrustManagerFactory}.\n+     */\n+    public static final class Builder {\n+\n+        /**\n+         * A hash algorithm for fingerprints.\n+         */\n+        private final String algorithm;\n+\n+        /**\n+         * A list of fingerprints.\n+         */\n+        private final List<String> fingerprints = new ArrayList<String>();\n+\n+        /**\n+         * Creates a builder.\n+         *\n+         * @param algorithm a hash algorithm\n+         */\n+        private Builder(String algorithm) {\n+            this.algorithm = ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n+        }\n+\n+        /**\n+         * Adds fingerprints.\n+         *\n+         * @param fingerprints a number of fingerprints\n+         * @return the same builder\n+         */\n+        public Builder fingerprints(String... fingerprints) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187a6d43f881df5cb0ecbf157dfd808208824649"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE0NTA2NA==", "bodyText": "What would be the expected behavior when fingerprints is empty? Throwing an IllegalStateException in build()?", "url": "https://github.com/netty/netty/pull/10683#discussion_r506145064", "createdAt": "2020-10-16T08:00:23Z", "author": {"login": "trustin"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -207,4 +247,52 @@ protected void engineInit(ManagerFactoryParameters managerFactoryParameters) thr\n     protected TrustManager[] engineGetTrustManagers() {\n         return new TrustManager[] { tm };\n     }\n+\n+    /**\n+     * A builder for creating {@link FingerprintTrustManagerFactory}.\n+     */\n+    public static final class Builder {\n+\n+        /**\n+         * A hash algorithm for fingerprints.\n+         */\n+        private final String algorithm;\n+\n+        /**\n+         * A list of fingerprints.\n+         */\n+        private final List<String> fingerprints = new ArrayList<String>();\n+\n+        /**\n+         * Creates a builder.\n+         *\n+         * @param algorithm a hash algorithm\n+         */\n+        private Builder(String algorithm) {\n+            this.algorithm = ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n+        }\n+\n+        /**\n+         * Adds fingerprints.\n+         *\n+         * @param fingerprints a number of fingerprints\n+         * @return the same builder\n+         */\n+        public Builder fingerprints(String... fingerprints) {\n+            ObjectUtil.checkNotNull(fingerprints, \"fingerprints\");\n+            for (String fingerprint : fingerprints) {\n+                this.fingerprints.add(fingerprint);\n+            }\n+            return this;\n+        }\n+\n+        /**\n+         * Creates a {@link FingerprintTrustManagerFactory}.\n+         *\n+         * @return a new {@link FingerprintTrustManagerFactory}\n+         */\n+        public FingerprintTrustManagerFactory build() {\n+            return new FingerprintTrustManagerFactory(this.algorithm, toFingerprintArray(this.fingerprints));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187a6d43f881df5cb0ecbf157dfd808208824649"}, "originalPosition": 230}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwMjkzNDYz", "url": "https://github.com/netty/netty/pull/10683#pullrequestreview-510293463", "createdAt": "2020-10-16T09:14:25Z", "commit": {"oid": "187a6d43f881df5cb0ecbf157dfd808208824649"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOToxNDoyNVrOHiwZ3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOToxNDoyNVrOHiwZ3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIwNjY4NA==", "bodyText": "The way this works means the FingerprintTrustManagerFactory cannot be shared between multiple threads, because only the constructing thread has initialised their thread-local, and there's not enough information in the factory instance for other threads to initialise their thread-locals as well.", "url": "https://github.com/netty/netty/pull/10683#discussion_r506206684", "createdAt": "2020-10-16T09:14:25Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -136,44 +132,91 @@ private void checkTrusted(String type, X509Certificate[] chain) throws Certifica\n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(Iterable<String> fingerprints) {\n-        this(toFingerprintArray(fingerprints));\n+        this(\"SHA1\", toFingerprintArray(fingerprints));\n     }\n \n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(String... fingerprints) {\n-        this(toFingerprintArray(Arrays.asList(fingerprints)));\n+        this(\"SHA1\", toFingerprintArray(Arrays.asList(fingerprints)));\n     }\n \n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(byte[]... fingerprints) {\n+        this(\"SHA1\", fingerprints);\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param algorithm a hash algorithm\n+     * @param fingerprints a list of fingerprints\n+     */\n+    private FingerprintTrustManagerFactory(final String algorithm, byte[][] fingerprints) {\n+        ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n         ObjectUtil.checkNotNull(fingerprints, \"fingerprints\");\n \n+        MessageDigest md;\n+        try {\n+            md = MessageDigest.getInstance(algorithm);\n+        } catch (NoSuchAlgorithmException e) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Unsupported hash algorithm: %s\", algorithm), e);\n+        }\n+\n+        int hashLength = md.getDigestLength();\n         List<byte[]> list = new ArrayList<byte[]>(fingerprints.length);\n         for (byte[] f: fingerprints) {\n             if (f == null) {\n                 break;\n             }\n-            if (f.length != SHA1_BYTE_LEN) {\n-                throw new IllegalArgumentException(\"malformed fingerprint: \" +\n-                        ByteBufUtil.hexDump(Unpooled.wrappedBuffer(f)) + \" (expected: SHA1)\");\n+            if (f.length != hashLength) {\n+                throw new IllegalArgumentException(\n+                        String.format(\"malformed fingerprint (length is %d but expected %d): %s\",\n+                                      f.length, hashLength, ByteBufUtil.hexDump(Unpooled.wrappedBuffer(f))));\n             }\n             list.add(f.clone());\n         }\n \n+        this.tlmd.set(md);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187a6d43f881df5cb0ecbf157dfd808208824649"}, "originalPosition": 154}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwMzA5MDQ2", "url": "https://github.com/netty/netty/pull/10683#pullrequestreview-510309046", "createdAt": "2020-10-16T09:34:49Z", "commit": {"oid": "187a6d43f881df5cb0ecbf157dfd808208824649"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOTozNDo1MFrOHixSHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOTozNDo1MFrOHixSHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIyMTA4NQ==", "bodyText": "@chrisvest was right here... you need to override initialValue() here", "url": "https://github.com/netty/netty/pull/10683#discussion_r506221085", "createdAt": "2020-10-16T09:34:50Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -75,20 +83,8 @@\n \n     private static final Pattern FINGERPRINT_PATTERN = Pattern.compile(\"^[0-9a-fA-F:]+$\");\n     private static final Pattern FINGERPRINT_STRIP_PATTERN = Pattern.compile(\":\");\n-    private static final int SHA1_BYTE_LEN = 20;\n-    private static final int SHA1_HEX_LEN = SHA1_BYTE_LEN * 2;\n \n-    private static final FastThreadLocal<MessageDigest> tlmd = new FastThreadLocal<MessageDigest>() {\n-        @Override\n-        protected MessageDigest initialValue() {\n-            try {\n-                return MessageDigest.getInstance(\"SHA1\");\n-            } catch (NoSuchAlgorithmException e) {\n-                // All Java implementation must have SHA1 digest algorithm.\n-                throw new Error(e);\n-            }\n-        }\n-    };\n+    private final FastThreadLocal<MessageDigest> tlmd = new FastThreadLocal<MessageDigest>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187a6d43f881df5cb0ecbf157dfd808208824649"}, "originalPosition": 70}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "187a6d43f881df5cb0ecbf157dfd808208824649", "author": {"user": {"login": "artem-smotrakov", "name": "Artem Smotrakov"}}, "url": "https://github.com/netty/netty/commit/187a6d43f881df5cb0ecbf157dfd808208824649", "committedDate": "2020-10-15T12:26:10Z", "message": "Better hash algorithm in FingerprintTrustManagerFactory\n\nMotivation:\n\nFingerprintTrustManagerFactory can only use SHA-1 that is considered\ninsecure.\n\nModifications:\n\nUpdated FingerprintTrustManagerFactory to accept a stronger hash\nalgorithm.\nDeprecated the constructors that still use SHA-1.\n\nResult:\n\nA user can now configure FingerprintTrustManagerFactory to use a\nstronger hash algorithm.\nThe compiler shows a warning if the code still uses one of the\nunsafe constructors."}, "afterCommit": {"oid": "813300cdcd13c18ea6982fbefccaa2a99f9c375f", "author": {"user": {"login": "artem-smotrakov", "name": "Artem Smotrakov"}}, "url": "https://github.com/netty/netty/commit/813300cdcd13c18ea6982fbefccaa2a99f9c375f", "committedDate": "2020-10-16T15:45:53Z", "message": "Better hash algorithm in FingerprintTrustManagerFactory\n\nMotivation:\n\nFingerprintTrustManagerFactory can only use SHA-1 that is considered\ninsecure.\n\nModifications:\n\nUpdated FingerprintTrustManagerFactory to accept a stronger hash\nalgorithm.\nDeprecated the constructors that still use SHA-1.\n\nResult:\n\nA user can now configure FingerprintTrustManagerFactory to use a\nstronger hash algorithm.\nThe compiler shows a warning if the code still uses one of the\nunsafe constructors."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "813300cdcd13c18ea6982fbefccaa2a99f9c375f", "author": {"user": {"login": "artem-smotrakov", "name": "Artem Smotrakov"}}, "url": "https://github.com/netty/netty/commit/813300cdcd13c18ea6982fbefccaa2a99f9c375f", "committedDate": "2020-10-16T15:45:53Z", "message": "Better hash algorithm in FingerprintTrustManagerFactory\n\nMotivation:\n\nFingerprintTrustManagerFactory can only use SHA-1 that is considered\ninsecure.\n\nModifications:\n\nUpdated FingerprintTrustManagerFactory to accept a stronger hash\nalgorithm.\nDeprecated the constructors that still use SHA-1.\n\nResult:\n\nA user can now configure FingerprintTrustManagerFactory to use a\nstronger hash algorithm.\nThe compiler shows a warning if the code still uses one of the\nunsafe constructors."}, "afterCommit": {"oid": "28e7e074cf803eb80edae56e9c7ea554e24fcfd9", "author": {"user": {"login": "artem-smotrakov", "name": "Artem Smotrakov"}}, "url": "https://github.com/netty/netty/commit/28e7e074cf803eb80edae56e9c7ea554e24fcfd9", "committedDate": "2020-10-16T15:49:53Z", "message": "Better hash algorithm in FingerprintTrustManagerFactory\n\nMotivation:\n\nFingerprintTrustManagerFactory can only use SHA-1 that is considered\ninsecure.\n\nModifications:\n\nUpdated FingerprintTrustManagerFactory to accept a stronger hash\nalgorithm.\nDeprecated the constructors that still use SHA-1.\n\nResult:\n\nA user can now configure FingerprintTrustManagerFactory to use a\nstronger hash algorithm.\nThe compiler shows a warning if the code still uses one of the\nunsafe constructors."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwODQyNzcy", "url": "https://github.com/netty/netty/pull/10683#pullrequestreview-510842772", "createdAt": "2020-10-16T23:13:03Z", "commit": {"oid": "28e7e074cf803eb80edae56e9c7ea554e24fcfd9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEwODg0Mjc1", "url": "https://github.com/netty/netty/pull/10683#pullrequestreview-510884275", "createdAt": "2020-10-17T04:16:04Z", "commit": {"oid": "28e7e074cf803eb80edae56e9c7ea554e24fcfd9"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QwNDoxNjowNFrOHjUGfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QwNDoxNjowNFrOHjUGfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc5MTU1MQ==", "bodyText": "How about moving this validation to build() and raising IllegalStateException? Otherwise, a user will get IllegalArgumentException on build(), which does not make sense. We could add an assertion here instead.", "url": "https://github.com/netty/netty/pull/10683#discussion_r506791551", "createdAt": "2020-10-17T04:16:04Z", "author": {"login": "trustin"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -136,45 +142,99 @@ private void checkTrusted(String type, X509Certificate[] chain) throws Certifica\n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(Iterable<String> fingerprints) {\n-        this(toFingerprintArray(fingerprints));\n+        this(\"SHA1\", toFingerprintArray(fingerprints));\n     }\n \n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(String... fingerprints) {\n-        this(toFingerprintArray(Arrays.asList(fingerprints)));\n+        this(\"SHA1\", toFingerprintArray(Arrays.asList(fingerprints)));\n     }\n \n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(byte[]... fingerprints) {\n+        this(\"SHA1\", fingerprints);\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param algorithm a hash algorithm\n+     * @param fingerprints a list of fingerprints\n+     */\n+    FingerprintTrustManagerFactory(final String algorithm, byte[][] fingerprints) {\n+        ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n         ObjectUtil.checkNotNull(fingerprints, \"fingerprints\");\n \n+        if (fingerprints.length == 0) {\n+            throw new IllegalArgumentException(\"No fingerprints provided\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28e7e074cf803eb80edae56e9c7ea554e24fcfd9"}, "originalPosition": 140}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce495d23eb17e01b8a5cc55dcdb536b4386c6a0f", "author": {"user": {"login": "artem-smotrakov", "name": "Artem Smotrakov"}}, "url": "https://github.com/netty/netty/commit/ce495d23eb17e01b8a5cc55dcdb536b4386c6a0f", "committedDate": "2020-10-17T17:07:08Z", "message": "Better hash algorithm in FingerprintTrustManagerFactory\n\nMotivation:\n\nFingerprintTrustManagerFactory can only use SHA-1 that is considered\ninsecure.\n\nModifications:\n\n- Updated FingerprintTrustManagerFactory to accept a stronger hash algorithm.\n- Deprecated the constructors that still use SHA-1.\n- Added a test for FingerprintTrustManagerFactory.\n\nResult:\n\nA user can now configure FingerprintTrustManagerFactory to use a\nstronger hash algorithm.\nThe compiler shows a warning if the code still uses one of the\nunsafe constructors."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "28e7e074cf803eb80edae56e9c7ea554e24fcfd9", "author": {"user": {"login": "artem-smotrakov", "name": "Artem Smotrakov"}}, "url": "https://github.com/netty/netty/commit/28e7e074cf803eb80edae56e9c7ea554e24fcfd9", "committedDate": "2020-10-16T15:49:53Z", "message": "Better hash algorithm in FingerprintTrustManagerFactory\n\nMotivation:\n\nFingerprintTrustManagerFactory can only use SHA-1 that is considered\ninsecure.\n\nModifications:\n\nUpdated FingerprintTrustManagerFactory to accept a stronger hash\nalgorithm.\nDeprecated the constructors that still use SHA-1.\n\nResult:\n\nA user can now configure FingerprintTrustManagerFactory to use a\nstronger hash algorithm.\nThe compiler shows a warning if the code still uses one of the\nunsafe constructors."}, "afterCommit": {"oid": "ce495d23eb17e01b8a5cc55dcdb536b4386c6a0f", "author": {"user": {"login": "artem-smotrakov", "name": "Artem Smotrakov"}}, "url": "https://github.com/netty/netty/commit/ce495d23eb17e01b8a5cc55dcdb536b4386c6a0f", "committedDate": "2020-10-17T17:07:08Z", "message": "Better hash algorithm in FingerprintTrustManagerFactory\n\nMotivation:\n\nFingerprintTrustManagerFactory can only use SHA-1 that is considered\ninsecure.\n\nModifications:\n\n- Updated FingerprintTrustManagerFactory to accept a stronger hash algorithm.\n- Deprecated the constructors that still use SHA-1.\n- Added a test for FingerprintTrustManagerFactory.\n\nResult:\n\nA user can now configure FingerprintTrustManagerFactory to use a\nstronger hash algorithm.\nThe compiler shows a warning if the code still uses one of the\nunsafe constructors."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2NzExMTMw", "url": "https://github.com/netty/netty/pull/10683#pullrequestreview-516711130", "createdAt": "2020-10-26T12:04:48Z", "commit": {"oid": "ce495d23eb17e01b8a5cc55dcdb536b4386c6a0f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMjowNDo0OFrOHoMgVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMjowNTowM1rOHoMgyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkwOTk3NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *   http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *   https://www.apache.org/licenses/LICENSE-2.0", "url": "https://github.com/netty/netty/pull/10683#discussion_r511909974", "createdAt": "2020-10-26T12:04:48Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactoryBuilder.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce495d23eb17e01b8a5cc55dcdb536b4386c6a0f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkxMDA5MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *   http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *   https://www.apache.org/licenses/LICENSE-2.0", "url": "https://github.com/netty/netty/pull/10683#discussion_r511910091", "createdAt": "2020-10-26T12:05:03Z", "author": {"login": "normanmaurer"}, "path": "handler/src/test/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactoryTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce495d23eb17e01b8a5cc55dcdb536b4386c6a0f"}, "originalPosition": 8}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "34160323bb2c9edbcedd8ea22d511a99b580091e", "author": {"user": {"login": "normanmaurer", "name": "Norman Maurer"}}, "url": "https://github.com/netty/netty/commit/34160323bb2c9edbcedd8ea22d511a99b580091e", "committedDate": "2020-10-26T12:05:29Z", "message": "Update handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactoryBuilder.java"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdba1034d1685aed58a4c78eff5457824c2c53b4", "author": {"user": {"login": "normanmaurer", "name": "Norman Maurer"}}, "url": "https://github.com/netty/netty/commit/fdba1034d1685aed58a4c78eff5457824c2c53b4", "committedDate": "2020-10-26T12:05:43Z", "message": "Update handler/src/test/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactoryTest.java"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2Nzc0ODQx", "url": "https://github.com/netty/netty/pull/10683#pullrequestreview-516774841", "createdAt": "2020-10-26T13:29:03Z", "commit": {"oid": "fdba1034d1685aed58a4c78eff5457824c2c53b4"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4915, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}