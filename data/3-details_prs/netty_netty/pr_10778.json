{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE2NTU1ODUy", "number": 10778, "title": "Provide ability to extend StompSubframeEncoder and improve full stomp frame encoding", "bodyText": "Motivation:\nAt the moment StompSubframeEncoder encode a frame only to ByteBuf it is not convenient if further we need to convert it to another type of message,  e.g. WebSocketFrame. Also, if we send a full frame, it splits into two headers and a content what makes it difficult to convert it in the next handler.\nModification:\nIntroduce additional converter methods e.g. (Object protected convertFullFrame(StompFrame original, ByteBuf encoded)...) for extending encoder functionality and allocate only one ByteBuf for full stomp frame. Change headers size calculation, previously used only 256 bytes that reallocate a new buffer each time when headers size more than this threshold. Add StompEncoderBenchmark.\nResult:\nImproved  StompSubframeEncoder fro extensions.\nPrevious version benchmark\nBenchmark                              (contentLength)  (headersType)  (pooledAllocator)   Mode  Cnt        Score        Error  Units\nStompEncoderBenchmark.writeStompFrame                0            ONE               true  thrpt   10  4432132.884 \u00b1 178923.436  ops/s\nStompEncoderBenchmark.writeStompFrame                0            ONE              false  thrpt   10  1281122.756 \u00b1  52484.174  ops/s\nStompEncoderBenchmark.writeStompFrame                0          THREE               true  thrpt   10  2980897.937 \u00b1 130253.049  ops/s\nStompEncoderBenchmark.writeStompFrame                0          THREE              false  thrpt   10  1116883.574 \u00b1  35471.482  ops/s\nStompEncoderBenchmark.writeStompFrame                0          SEVEN               true  thrpt   10  1988012.159 \u00b1  74352.450  ops/s\nStompEncoderBenchmark.writeStompFrame                0          SEVEN              false  thrpt   10   881772.343 \u00b1  94633.870  ops/s\nStompEncoderBenchmark.writeStompFrame                0         ELEVEN               true  thrpt   10  1048125.919 \u00b1 151053.902  ops/s\nStompEncoderBenchmark.writeStompFrame                0         ELEVEN              false  thrpt   10   429900.066 \u00b1  47956.661  ops/s\nStompEncoderBenchmark.writeStompFrame                0         TWENTY               true  thrpt   10   660584.122 \u00b1 104973.439  ops/s\nStompEncoderBenchmark.writeStompFrame                0         TWENTY              false  thrpt   10   278255.488 \u00b1  20143.708  ops/s\nStompEncoderBenchmark.writeStompFrame               10            ONE               true  thrpt   10  4251498.549 \u00b1 625050.979  ops/s\nStompEncoderBenchmark.writeStompFrame               10            ONE              false  thrpt   10  1214006.861 \u00b1  60421.601  ops/s\nStompEncoderBenchmark.writeStompFrame               10          THREE               true  thrpt   10  3117736.486 \u00b1 173613.974  ops/s\nStompEncoderBenchmark.writeStompFrame               10          THREE              false  thrpt   10  1046605.891 \u00b1  94428.064  ops/s\nStompEncoderBenchmark.writeStompFrame               10          SEVEN               true  thrpt   10  2006986.881 \u00b1 108456.748  ops/s\nStompEncoderBenchmark.writeStompFrame               10          SEVEN              false  thrpt   10   877983.112 \u00b1  82919.387  ops/s\nStompEncoderBenchmark.writeStompFrame               10         ELEVEN               true  thrpt   10  1132844.437 \u00b1  84578.571  ops/s\nStompEncoderBenchmark.writeStompFrame               10         ELEVEN              false  thrpt   10   429334.649 \u00b1  35403.161  ops/s\nStompEncoderBenchmark.writeStompFrame               10         TWENTY               true  thrpt   10   657093.390 \u00b1  48092.947  ops/s\nStompEncoderBenchmark.writeStompFrame               10         TWENTY              false  thrpt   10   252140.876 \u00b1  37337.255  ops/s\nStompEncoderBenchmark.writeStompFrame              100            ONE               true  thrpt   10  4720507.067 \u00b1 100993.908  ops/s\nStompEncoderBenchmark.writeStompFrame              100            ONE              false  thrpt   10  1266182.925 \u00b1  85888.413  ops/s\nStompEncoderBenchmark.writeStompFrame              100          THREE               true  thrpt   10  2898746.621 \u00b1 452579.753  ops/s\nStompEncoderBenchmark.writeStompFrame              100          THREE              false  thrpt   10  1019555.288 \u00b1  65640.507  ops/s\nStompEncoderBenchmark.writeStompFrame              100          SEVEN               true  thrpt   10  2259187.459 \u00b1  20025.989  ops/s\nStompEncoderBenchmark.writeStompFrame              100          SEVEN              false  thrpt   10   896405.412 \u00b1  53750.148  ops/s\nStompEncoderBenchmark.writeStompFrame              100         ELEVEN               true  thrpt   10  1110670.772 \u00b1 107650.327  ops/s\nStompEncoderBenchmark.writeStompFrame              100         ELEVEN              false  thrpt   10   445187.398 \u00b1  28845.959  ops/s\nStompEncoderBenchmark.writeStompFrame              100         TWENTY               true  thrpt   10   611506.846 \u00b1  25304.240  ops/s\nStompEncoderBenchmark.writeStompFrame              100         TWENTY              false  thrpt   10   247687.007 \u00b1  43471.578  ops/s\nStompEncoderBenchmark.writeStompFrame             1000            ONE               true  thrpt   10  4140949.576 \u00b1 270274.087  ops/s\nStompEncoderBenchmark.writeStompFrame             1000            ONE              false  thrpt   10  1154515.598 \u00b1 134413.876  ops/s\nStompEncoderBenchmark.writeStompFrame             1000          THREE               true  thrpt   10  3349996.875 \u00b1 162309.889  ops/s\nStompEncoderBenchmark.writeStompFrame             1000          THREE              false  thrpt   10  1141040.562 \u00b1   5895.693  ops/s\nStompEncoderBenchmark.writeStompFrame             1000          SEVEN               true  thrpt   10  2184632.248 \u00b1   8957.833  ops/s\nStompEncoderBenchmark.writeStompFrame             1000          SEVEN              false  thrpt   10   959545.704 \u00b1   5835.161  ops/s\nStompEncoderBenchmark.writeStompFrame             1000         ELEVEN               true  thrpt   10  1081113.327 \u00b1   3957.527  ops/s\nStompEncoderBenchmark.writeStompFrame             1000         ELEVEN              false  thrpt   10   467524.660 \u00b1   1383.236  ops/s\nStompEncoderBenchmark.writeStompFrame             1000         TWENTY               true  thrpt   10   568411.797 \u00b1 108712.493  ops/s\nStompEncoderBenchmark.writeStompFrame             1000         TWENTY              false  thrpt   10   260764.231 \u00b1  43149.129  ops/s\nStompEncoderBenchmark.writeStompFrame            10000            ONE               true  thrpt   10  4369787.147 \u00b1 619367.939  ops/s\nStompEncoderBenchmark.writeStompFrame            10000            ONE              false  thrpt   10  1246782.845 \u00b1  47468.764  ops/s\nStompEncoderBenchmark.writeStompFrame            10000          THREE               true  thrpt   10  3333328.810 \u00b1 253061.481  ops/s\nStompEncoderBenchmark.writeStompFrame            10000          THREE              false  thrpt   10  1108278.988 \u00b1  81905.149  ops/s\nStompEncoderBenchmark.writeStompFrame            10000          SEVEN               true  thrpt   10  2062961.266 \u00b1 247096.284  ops/s\nStompEncoderBenchmark.writeStompFrame            10000          SEVEN              false  thrpt   10   925199.985 \u00b1  36734.594  ops/s\nStompEncoderBenchmark.writeStompFrame            10000         ELEVEN               true  thrpt   10  1223240.034 \u00b1  58833.801  ops/s\nStompEncoderBenchmark.writeStompFrame            10000         ELEVEN              false  thrpt   10   460864.117 \u00b1   2361.459  ops/s\nStompEncoderBenchmark.writeStompFrame            10000         TWENTY               true  thrpt   10   655864.762 \u00b1  35237.335  ops/s\nStompEncoderBenchmark.writeStompFrame            10000         TWENTY              false  thrpt   10   286388.865 \u00b1   1002.460  ops/s\n\nA new version benchmark\nBenchmark                              (contentLength)  (headersType)  (pooledAllocator)   Mode  Cnt        Score        Error  Units\nStompEncoderBenchmark.writeStompFrame                0            ONE               true  thrpt   10  4366110.018 \u00b1 420377.867  ops/s\nStompEncoderBenchmark.writeStompFrame                0            ONE              false  thrpt   10  1289437.153 \u00b1 215271.656  ops/s\nStompEncoderBenchmark.writeStompFrame                0          THREE               true  thrpt   10  2818791.355 \u00b1 218894.471  ops/s\nStompEncoderBenchmark.writeStompFrame                0          THREE              false  thrpt   10  1040151.615 \u00b1  75352.695  ops/s\nStompEncoderBenchmark.writeStompFrame                0          SEVEN               true  thrpt   10  1842144.001 \u00b1  94668.864  ops/s\nStompEncoderBenchmark.writeStompFrame                0          SEVEN              false  thrpt   10   916742.825 \u00b1  65467.820  ops/s\nStompEncoderBenchmark.writeStompFrame                0         ELEVEN               true  thrpt   10  1310454.012 \u00b1 100747.490  ops/s\nStompEncoderBenchmark.writeStompFrame                0         ELEVEN              false  thrpt   10   679934.001 \u00b1  82168.249  ops/s\nStompEncoderBenchmark.writeStompFrame                0         TWENTY               true  thrpt   10   746867.549 \u00b1  68373.269  ops/s\nStompEncoderBenchmark.writeStompFrame                0         TWENTY              false  thrpt   10   483316.314 \u00b1  50978.009  ops/s\nStompEncoderBenchmark.writeStompFrame               10            ONE               true  thrpt   10  4791698.722 \u00b1 263890.510  ops/s\nStompEncoderBenchmark.writeStompFrame               10            ONE              false  thrpt   10  1289877.116 \u00b1 128677.185  ops/s\nStompEncoderBenchmark.writeStompFrame               10          THREE               true  thrpt   10  2984662.187 \u00b1 395567.524  ops/s\nStompEncoderBenchmark.writeStompFrame               10          THREE              false  thrpt   10  1079028.782 \u00b1  43548.555  ops/s\nStompEncoderBenchmark.writeStompFrame               10          SEVEN               true  thrpt   10  1806763.709 \u00b1  59162.209  ops/s\nStompEncoderBenchmark.writeStompFrame               10          SEVEN              false  thrpt   10   935274.980 \u00b1  22064.148  ops/s\nStompEncoderBenchmark.writeStompFrame               10         ELEVEN               true  thrpt   10  1284172.151 \u00b1 119068.047  ops/s\nStompEncoderBenchmark.writeStompFrame               10         ELEVEN              false  thrpt   10   687174.498 \u00b1  30270.916  ops/s\nStompEncoderBenchmark.writeStompFrame               10         TWENTY               true  thrpt   10   803843.483 \u00b1  29106.133  ops/s\nStompEncoderBenchmark.writeStompFrame               10         TWENTY              false  thrpt   10   502134.552 \u00b1  23653.215  ops/s\nStompEncoderBenchmark.writeStompFrame              100            ONE               true  thrpt   10  4337438.694 \u00b1 378524.452  ops/s\nStompEncoderBenchmark.writeStompFrame              100            ONE              false  thrpt   10  1289174.213 \u00b1  50640.853  ops/s\nStompEncoderBenchmark.writeStompFrame              100          THREE               true  thrpt   10  3232767.156 \u00b1 311934.194  ops/s\nStompEncoderBenchmark.writeStompFrame              100          THREE              false  thrpt   10  1115247.028 \u00b1  15683.477  ops/s\nStompEncoderBenchmark.writeStompFrame              100          SEVEN               true  thrpt   10  2213147.232 \u00b1  86326.187  ops/s\nStompEncoderBenchmark.writeStompFrame              100          SEVEN              false  thrpt   10   901120.188 \u00b1  71344.491  ops/s\nStompEncoderBenchmark.writeStompFrame              100         ELEVEN               true  thrpt   10  1238317.714 \u00b1  68148.477  ops/s\nStompEncoderBenchmark.writeStompFrame              100         ELEVEN              false  thrpt   10   671336.339 \u00b1  72735.337  ops/s\nStompEncoderBenchmark.writeStompFrame              100         TWENTY               true  thrpt   10   754565.791 \u00b1  28574.382  ops/s\nStompEncoderBenchmark.writeStompFrame              100         TWENTY              false  thrpt   10   498939.383 \u00b1  38146.118  ops/s\nStompEncoderBenchmark.writeStompFrame             1000            ONE               true  thrpt   10  3722594.471 \u00b1 515861.000  ops/s\nStompEncoderBenchmark.writeStompFrame             1000            ONE              false  thrpt   10  1265629.633 \u00b1  84113.347  ops/s\nStompEncoderBenchmark.writeStompFrame             1000          THREE               true  thrpt   10  2829696.349 \u00b1 172520.267  ops/s\nStompEncoderBenchmark.writeStompFrame             1000          THREE              false  thrpt   10  1111454.609 \u00b1  26275.913  ops/s\nStompEncoderBenchmark.writeStompFrame             1000          SEVEN               true  thrpt   10  1901506.449 \u00b1  37701.353  ops/s\nStompEncoderBenchmark.writeStompFrame             1000          SEVEN              false  thrpt   10   912528.888 \u00b1  46221.215  ops/s\nStompEncoderBenchmark.writeStompFrame             1000         ELEVEN               true  thrpt   10  1299674.123 \u00b1  21889.002  ops/s\nStompEncoderBenchmark.writeStompFrame             1000         ELEVEN              false  thrpt   10   724527.644 \u00b1   2757.370  ops/s\nStompEncoderBenchmark.writeStompFrame             1000         TWENTY               true  thrpt   10   811389.799 \u00b1   2606.626  ops/s\nStompEncoderBenchmark.writeStompFrame             1000         TWENTY              false  thrpt   10   504955.449 \u00b1   6737.804  ops/s\nStompEncoderBenchmark.writeStompFrame            10000            ONE               true  thrpt   10  3837912.649 \u00b1 380742.919  ops/s\nStompEncoderBenchmark.writeStompFrame            10000            ONE              false  thrpt   10  1375544.306 \u00b1   3157.068  ops/s\nStompEncoderBenchmark.writeStompFrame            10000          THREE               true  thrpt   10  3224743.448 \u00b1 297369.719  ops/s\nStompEncoderBenchmark.writeStompFrame            10000          THREE              false  thrpt   10  1125772.007 \u00b1   4051.498  ops/s\nStompEncoderBenchmark.writeStompFrame            10000          SEVEN               true  thrpt   10  2127352.136 \u00b1 106787.777  ops/s\nStompEncoderBenchmark.writeStompFrame            10000          SEVEN              false  thrpt   10   934848.418 \u00b1   4564.147  ops/s\nStompEncoderBenchmark.writeStompFrame            10000         ELEVEN               true  thrpt   10  1379672.772 \u00b1   8778.640  ops/s\nStompEncoderBenchmark.writeStompFrame            10000         ELEVEN              false  thrpt   10   723169.459 \u00b1   2317.767  ops/s\nStompEncoderBenchmark.writeStompFrame            10000         TWENTY               true  thrpt   10   802275.113 \u00b1   4155.137  ops/s\nStompEncoderBenchmark.writeStompFrame            10000         TWENTY              false  thrpt   10   517604.265 \u00b1   3398.384  ops/s\n\nFor headers over 256 bytes we get a speedup.", "createdAt": "2020-11-06T07:13:17Z", "url": "https://github.com/netty/netty/pull/10778", "merged": true, "mergeCommit": {"oid": "f551db2bda878eb458baafeecc45c8ed7913dd57"}, "closed": true, "closedAt": "2020-12-07T08:00:53Z", "author": {"login": "amizurov"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdZyoKmAFqTUyNDkzMjE4OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdi58dMgBqjQwNzMzNTc5NTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0OTMyMTg4", "url": "https://github.com/netty/netty/pull/10778#pullrequestreview-524932188", "createdAt": "2020-11-06T08:11:43Z", "commit": {"oid": "dd9ff3a681563343e4e2d92986bf39e358d0effd"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwODoxMTo0NFrOHuj6qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNlQwODoxODo0N1rOHukG8Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU4NTAwMg==", "bodyText": "Fork should be at least 2 for dev purposes but way more for regressions benchs", "url": "https://github.com/netty/netty/pull/10778#discussion_r518585002", "createdAt": "2020-11-06T08:11:44Z", "author": {"login": "franz1981"}, "path": "microbench/src/main/java/io/netty/microbench/stomp/StompEncoderBenchmark.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.microbench.stomp;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.PooledByteBufAllocator;\n+import io.netty.buffer.Unpooled;\n+import io.netty.buffer.UnpooledByteBufAllocator;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelPromise;\n+import io.netty.handler.codec.stomp.DefaultStompFrame;\n+import io.netty.handler.codec.stomp.StompFrame;\n+import io.netty.handler.codec.stomp.StompHeadersSubframe;\n+import io.netty.handler.codec.stomp.StompSubframeEncoder;\n+import io.netty.microbench.channel.EmbeddedChannelWriteReleaseHandlerContext;\n+import io.netty.microbench.util.AbstractMicrobenchmark;\n+import io.netty.util.internal.ThreadLocalRandom;\n+import org.openjdk.jmh.annotations.Benchmark;\n+import org.openjdk.jmh.annotations.Fork;\n+import org.openjdk.jmh.annotations.Level;\n+import org.openjdk.jmh.annotations.Measurement;\n+import org.openjdk.jmh.annotations.Param;\n+import org.openjdk.jmh.annotations.Scope;\n+import org.openjdk.jmh.annotations.Setup;\n+import org.openjdk.jmh.annotations.State;\n+import org.openjdk.jmh.annotations.TearDown;\n+import org.openjdk.jmh.annotations.Threads;\n+import org.openjdk.jmh.annotations.Warmup;\n+\n+@State(Scope.Benchmark)\n+@Fork(1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd9ff3a681563343e4e2d92986bf39e358d0effd"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODU4ODE0NQ==", "bodyText": "private static", "url": "https://github.com/netty/netty/pull/10778#discussion_r518588145", "createdAt": "2020-11-06T08:18:47Z", "author": {"login": "franz1981"}, "path": "codec-stomp/src/main/java/io/netty/handler/codec/stomp/StompSubframeEncoder.java", "diffHunk": "@@ -19,63 +19,91 @@\n import io.netty.buffer.ByteBufUtil;\n import io.netty.channel.ChannelHandlerContext;\n import io.netty.handler.codec.MessageToMessageEncoder;\n-import io.netty.util.CharsetUtil;\n \n import java.util.List;\n import java.util.Map.Entry;\n \n+import static io.netty.handler.codec.stomp.StompConstants.*;\n+\n /**\n  * Encodes a {@link StompFrame} or a {@link StompSubframe} into a {@link ByteBuf}.\n  */\n public class StompSubframeEncoder extends MessageToMessageEncoder<StompSubframe> {\n \n     @Override\n-    protected void encode(ChannelHandlerContext ctx, StompSubframe msg, List<Object> out) throws Exception {\n+    protected void encode(ChannelHandlerContext ctx, StompSubframe msg, List<Object> out) {\n         if (msg instanceof StompFrame) {\n-            StompFrame frame = (StompFrame) msg;\n-            ByteBuf frameBuf = encodeFrame(frame, ctx);\n-            if (frame.content().isReadable()) {\n-                out.add(frameBuf);\n-                ByteBuf contentBuf = encodeContent(frame, ctx);\n-                out.add(contentBuf);\n-            } else {\n-                frameBuf.writeByte(StompConstants.NUL);\n-                out.add(frameBuf);\n-            }\n+            StompFrame stompFrame = (StompFrame) msg;\n+            ByteBuf buf = encodeFullFrame(stompFrame, ctx);\n+\n+            out.add(converter().convert(stompFrame, buf));\n         } else if (msg instanceof StompHeadersSubframe) {\n-            StompHeadersSubframe frame = (StompHeadersSubframe) msg;\n-            ByteBuf buf = encodeFrame(frame, ctx);\n-            out.add(buf);\n+            StompHeadersSubframe stompHeadersSubframe = (StompHeadersSubframe) msg;\n+            ByteBuf buf = ctx.alloc().buffer(headersSubFrameSize(stompHeadersSubframe));\n+            encodeHeaders(stompHeadersSubframe, buf);\n+\n+            out.add(converter().convert(stompHeadersSubframe, buf));\n         } else if (msg instanceof StompContentSubframe) {\n             StompContentSubframe stompContentSubframe = (StompContentSubframe) msg;\n             ByteBuf buf = encodeContent(stompContentSubframe, ctx);\n-            out.add(buf);\n+\n+            out.add(converter().convert(stompContentSubframe, buf));\n         }\n     }\n \n-    private static ByteBuf encodeContent(StompContentSubframe content, ChannelHandlerContext ctx) {\n-        if (content instanceof LastStompContentSubframe) {\n-            ByteBuf buf = ctx.alloc().buffer(content.content().readableBytes() + 1);\n-            buf.writeBytes(content.content());\n-            buf.writeByte(StompConstants.NUL);\n-            return buf;\n-        } else {\n-            return content.content().retain();\n+    protected StompEncodedSubframeConverter<?> converter() {\n+        return StompEncodedSubframeConverter.NOOP;\n+    }\n+\n+    /**\n+     * Returns a heuristic size for headers (32 bytes per header line) + (2 bytes for colon and eol)\n+     * + (additional command buffer).\n+     */\n+    protected int headersSubFrameSize(StompHeadersSubframe headersSubframe) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd9ff3a681563343e4e2d92986bf39e358d0effd"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI3Nzg1NDI0", "url": "https://github.com/netty/netty/pull/10778#pullrequestreview-527785424", "createdAt": "2020-11-11T01:46:55Z", "commit": {"oid": "dd9ff3a681563343e4e2d92986bf39e358d0effd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMTo0Njo1NVrOHw3xkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMVQwMTo0Njo1NVrOHw3xkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMTAwNzUwNw==", "bodyText": "This methods may be override by some one.", "url": "https://github.com/netty/netty/pull/10778#discussion_r521007507", "createdAt": "2020-11-11T01:46:55Z", "author": {"login": "timandy"}, "path": "example/src/main/java/io/netty/example/stomp/websocket/StompWebSocketFrameEncoder.java", "diffHunk": "@@ -16,53 +16,64 @@\n package io.netty.example.stomp.websocket;\n \n import io.netty.buffer.ByteBuf;\n-import io.netty.buffer.CompositeByteBuf;\n import io.netty.channel.ChannelHandlerContext;\n+import io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame;\n import io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame;\n import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;\n import io.netty.handler.codec.http.websocketx.WebSocketFrame;\n import io.netty.handler.codec.stomp.LastStompContentSubframe;\n+import io.netty.handler.codec.stomp.StompContentSubframe;\n+import io.netty.handler.codec.stomp.StompEncodedSubframeConverter;\n import io.netty.handler.codec.stomp.StompFrame;\n+import io.netty.handler.codec.stomp.StompHeaders;\n import io.netty.handler.codec.stomp.StompHeadersSubframe;\n import io.netty.handler.codec.stomp.StompSubframe;\n import io.netty.handler.codec.stomp.StompSubframeEncoder;\n \n import java.util.List;\n \n-public class StompWebSocketFrameEncoder extends StompSubframeEncoder {\n+public class StompWebSocketFrameEncoder extends StompSubframeEncoder\n+        implements StompEncodedSubframeConverter<WebSocketFrame> {\n \n     @Override\n-    public void encode(ChannelHandlerContext ctx, StompSubframe msg, List<Object> out) throws Exception {\n+    public void encode(ChannelHandlerContext ctx, StompSubframe msg, List<Object> out) {\n         super.encode(ctx, msg, out);\n+    }\n+\n+    @Override\n+    protected StompEncodedSubframeConverter<?> converter() {\n+        return this;\n+    }\n \n-        if (out.isEmpty()) {\n-            return;\n+    @Override\n+    public WebSocketFrame convert(StompFrame original, ByteBuf encoded) {\n+        if (isTextFrame(original)) {\n+            return new TextWebSocketFrame(encoded);\n         }\n \n-        final WebSocketFrame webSocketFrame;\n-        if (msg instanceof StompFrame) {\n-            if (out.size() == 1) {\n-                webSocketFrame = new TextWebSocketFrame(getFirst(out));\n-            } else {\n-                CompositeByteBuf content = ctx.alloc().compositeBuffer(out.size());\n-                for (Object byteBuf : out) {\n-                    content.addComponent(true, (ByteBuf) byteBuf);\n-                }\n-                webSocketFrame = new TextWebSocketFrame(content);\n-            }\n-        } else if (msg instanceof StompHeadersSubframe) {\n-            webSocketFrame = new TextWebSocketFrame(false, 0, getFirst(out));\n-        } else if (msg instanceof LastStompContentSubframe) {\n-            webSocketFrame = new ContinuationWebSocketFrame(true, 0, getFirst(out));\n-        } else {\n-            webSocketFrame = new ContinuationWebSocketFrame(false, 0, getFirst(out));\n+        return new BinaryWebSocketFrame(encoded);\n+    }\n+\n+    @Override\n+    public WebSocketFrame convert(StompHeadersSubframe original, ByteBuf encoded) {\n+        if (isTextFrame(original)) {\n+            return new TextWebSocketFrame(false, 0, encoded);\n+        }\n+\n+        return new BinaryWebSocketFrame(false, 0, encoded);\n+    }\n+\n+    @Override\n+    public WebSocketFrame convert(StompContentSubframe original, ByteBuf encoded) {\n+        if (original instanceof LastStompContentSubframe) {\n+            return new ContinuationWebSocketFrame(true, 0, encoded);\n         }\n \n-        out.clear();\n-        out.add(webSocketFrame);\n+        return new ContinuationWebSocketFrame(false, 0, encoded);\n     }\n \n-    private static ByteBuf getFirst(List<Object> container) {\n-        return (ByteBuf) container.get(0);\n+    private static boolean isTextFrame(StompHeadersSubframe headersSubframe) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd9ff3a681563343e4e2d92986bf39e358d0effd"}, "originalPosition": 86}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM3MzY5OTA0", "url": "https://github.com/netty/netty/pull/10778#pullrequestreview-537369904", "createdAt": "2020-11-24T10:51:17Z", "commit": {"oid": "fd7ed3e9ebfa0fb832660939eb4d87e3ba47a365"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDo1MToxN1rOH463JA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQxMDo1MzoxOVrOH47AZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ0NjY5Mg==", "bodyText": "This a breaking change as someone may have override this method with throws in the signature", "url": "https://github.com/netty/netty/pull/10778#discussion_r529446692", "createdAt": "2020-11-24T10:51:17Z", "author": {"login": "normanmaurer"}, "path": "codec-stomp/src/main/java/io/netty/handler/codec/stomp/StompSubframeEncoder.java", "diffHunk": "@@ -19,63 +19,91 @@\n import io.netty.buffer.ByteBufUtil;\n import io.netty.channel.ChannelHandlerContext;\n import io.netty.handler.codec.MessageToMessageEncoder;\n-import io.netty.util.CharsetUtil;\n \n import java.util.List;\n import java.util.Map.Entry;\n \n+import static io.netty.handler.codec.stomp.StompConstants.*;\n+\n /**\n  * Encodes a {@link StompFrame} or a {@link StompSubframe} into a {@link ByteBuf}.\n  */\n public class StompSubframeEncoder extends MessageToMessageEncoder<StompSubframe> {\n \n     @Override\n-    protected void encode(ChannelHandlerContext ctx, StompSubframe msg, List<Object> out) throws Exception {\n+    protected void encode(ChannelHandlerContext ctx, StompSubframe msg, List<Object> out) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd7ed3e9ebfa0fb832660939eb4d87e3ba47a365"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ0NzcyOA==", "bodyText": "same comment as above... The throws  needs to stay", "url": "https://github.com/netty/netty/pull/10778#discussion_r529447728", "createdAt": "2020-11-24T10:52:11Z", "author": {"login": "normanmaurer"}, "path": "example/src/main/java/io/netty/example/stomp/websocket/StompWebSocketFrameEncoder.java", "diffHunk": "@@ -16,53 +16,64 @@\n package io.netty.example.stomp.websocket;\n \n import io.netty.buffer.ByteBuf;\n-import io.netty.buffer.CompositeByteBuf;\n import io.netty.channel.ChannelHandlerContext;\n+import io.netty.handler.codec.http.websocketx.BinaryWebSocketFrame;\n import io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame;\n import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;\n import io.netty.handler.codec.http.websocketx.WebSocketFrame;\n import io.netty.handler.codec.stomp.LastStompContentSubframe;\n+import io.netty.handler.codec.stomp.StompContentSubframe;\n+import io.netty.handler.codec.stomp.StompEncodedSubframeConverter;\n import io.netty.handler.codec.stomp.StompFrame;\n+import io.netty.handler.codec.stomp.StompHeaders;\n import io.netty.handler.codec.stomp.StompHeadersSubframe;\n import io.netty.handler.codec.stomp.StompSubframe;\n import io.netty.handler.codec.stomp.StompSubframeEncoder;\n \n import java.util.List;\n \n-public class StompWebSocketFrameEncoder extends StompSubframeEncoder {\n+public class StompWebSocketFrameEncoder extends StompSubframeEncoder\n+        implements StompEncodedSubframeConverter<WebSocketFrame> {\n \n     @Override\n-    public void encode(ChannelHandlerContext ctx, StompSubframe msg, List<Object> out) throws Exception {\n+    public void encode(ChannelHandlerContext ctx, StompSubframe msg, List<Object> out) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd7ed3e9ebfa0fb832660939eb4d87e3ba47a365"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTQ0OTA2MQ==", "bodyText": "Can't we just add protected methods or something like that ? Adding another interface feels very \"heavyweight\" .", "url": "https://github.com/netty/netty/pull/10778#discussion_r529449061", "createdAt": "2020-11-24T10:53:19Z", "author": {"login": "normanmaurer"}, "path": "codec-stomp/src/main/java/io/netty/handler/codec/stomp/StompEncodedSubframeConverter.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.handler.codec.stomp;\n+\n+import io.netty.buffer.ByteBuf;\n+\n+/**\n+ * Converter is responsible to convert encoded {@link StompSubframe} to other message type.\n+ */\n+public interface StompEncodedSubframeConverter<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fd7ed3e9ebfa0fb832660939eb4d87e3ba47a365"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyOTI4NDQz", "url": "https://github.com/netty/netty/pull/10778#pullrequestreview-542928443", "createdAt": "2020-12-02T15:05:51Z", "commit": {"oid": "f21c05aef871978f7036e2bcb54b159c1632eaf9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNTowNTo1MVrOH9fXJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxNTowNTo1MVrOH9fXJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDIzOTAxNQ==", "bodyText": "This one still needs to propagate the exception from the frame encoder.", "url": "https://github.com/netty/netty/pull/10778#discussion_r534239015", "createdAt": "2020-12-02T15:05:51Z", "author": {"login": "chrisvest"}, "path": "example/src/main/java/io/netty/example/stomp/websocket/StompWebSocketProtocolCodec.java", "diffHunk": "@@ -52,13 +53,13 @@ public void userEventTriggered(ChannelHandlerContext ctx, Object evt) throws Exc\n     }\n \n     @Override\n-    protected void encode(ChannelHandlerContext ctx, StompSubframe stompFrame, List<Object> out) throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f21c05aef871978f7036e2bcb54b159c1632eaf9"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0OTMwMzM2", "url": "https://github.com/netty/netty/pull/10778#pullrequestreview-544930336", "createdAt": "2020-12-04T12:50:09Z", "commit": {"oid": "ab6884a16a81b6d06f614fb906531e2f0b51587d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ0OTgwODQw", "url": "https://github.com/netty/netty/pull/10778#pullrequestreview-544980840", "createdAt": "2020-12-04T13:59:15Z", "commit": {"oid": "ab6884a16a81b6d06f614fb906531e2f0b51587d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ab6ae05b784feec1506f156280ff5603caa6796", "author": {"user": {"login": "amizurov", "name": "Andrey Mizurov"}}, "url": "https://github.com/netty/netty/commit/0ab6ae05b784feec1506f156280ff5603caa6796", "committedDate": "2020-12-04T16:00:53Z", "message": "Provide ability to extend StompSubframeEncoder and improve full stomp frame encoding (allocate one buffer for full frame considering the size of the headers)"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ab6884a16a81b6d06f614fb906531e2f0b51587d", "author": {"user": {"login": "amizurov", "name": "Andrey Mizurov"}}, "url": "https://github.com/netty/netty/commit/ab6884a16a81b6d06f614fb906531e2f0b51587d", "committedDate": "2020-12-02T15:07:38Z", "message": "Fix compiler error"}, "afterCommit": {"oid": "0ab6ae05b784feec1506f156280ff5603caa6796", "author": {"user": {"login": "amizurov", "name": "Andrey Mizurov"}}, "url": "https://github.com/netty/netty/commit/0ab6ae05b784feec1506f156280ff5603caa6796", "committedDate": "2020-12-04T16:00:53Z", "message": "Provide ability to extend StompSubframeEncoder and improve full stomp frame encoding (allocate one buffer for full frame considering the size of the headers)"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4841, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}