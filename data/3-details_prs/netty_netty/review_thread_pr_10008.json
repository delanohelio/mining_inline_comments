{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcyNDQzODE3", "number": 10008, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTo1MToyNFrODeEPjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTo1MToyNFrODeEPjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyODUzMzg5OnYy", "diffSide": "RIGHT", "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/CleartextHttp2ServerUpgradeHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNTo1MToyNFrOFnBj_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNjowODowOFrOFnCHzw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2NDM4Mw==", "bodyText": "This may or may not conflict with your Netty 5 \"don't sent events from a remove ctx\" patch.", "url": "https://github.com/netty/netty/pull/10008#discussion_r376464383", "createdAt": "2020-02-07T15:51:24Z", "author": {"login": "bryce-anderson"}, "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/CleartextHttp2ServerUpgradeHandler.java", "diffHunk": "@@ -66,36 +65,33 @@ public CleartextHttp2ServerUpgradeHandler(HttpServerCodec httpServerCodec,\n     @Override\n     public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n         ctx.pipeline()\n-           .addBefore(ctx.name(), null, new PriorKnowledgeHandler())\n-           .addBefore(ctx.name(), null, httpServerCodec)\n-           .replace(this, null, httpServerUpgradeHandler);\n+                .addAfter(ctx.name(), null, httpServerUpgradeHandler)\n+                .addAfter(ctx.name(), null, httpServerCodec);\n     }\n \n     /**\n      * Peek inbound message to determine current connection wants to start HTTP/2\n      * by HTTP upgrade or prior knowledge\n      */\n-    private final class PriorKnowledgeHandler extends ByteToMessageDecoder {\n-        @Override\n-        protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n-            int prefaceLength = CONNECTION_PREFACE.readableBytes();\n-            int bytesRead = Math.min(in.readableBytes(), prefaceLength);\n+    @Override\n+    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n+        int prefaceLength = CONNECTION_PREFACE.readableBytes();\n+        int bytesRead = Math.min(in.readableBytes(), prefaceLength);\n \n-            if (!ByteBufUtil.equals(CONNECTION_PREFACE, CONNECTION_PREFACE.readerIndex(),\n-                                    in, in.readerIndex(), bytesRead)) {\n-                ctx.pipeline().remove(this);\n-            } else if (bytesRead == prefaceLength) {\n-                // Full h2 preface match, removed source codec, using http2 codec to handle\n-                // following network traffic\n-                ctx.pipeline()\n-                   .remove(httpServerCodec)\n-                   .remove(httpServerUpgradeHandler);\n+        if (!ByteBufUtil.equals(CONNECTION_PREFACE, CONNECTION_PREFACE.readerIndex(),\n+                in, in.readerIndex(), bytesRead)) {\n+            ctx.pipeline().remove(this);\n+        } else if (bytesRead == prefaceLength) {\n+            // Full h2 preface match, removed source codec, using http2 codec to handle\n+            // following network traffic\n+            ctx.pipeline()\n+                    .remove(httpServerCodec)\n+                    .remove(httpServerUpgradeHandler);\n \n-                ctx.pipeline().addAfter(ctx.name(), null, http2ServerHandler);\n-                ctx.pipeline().remove(this);\n+            ctx.pipeline().addAfter(ctx.name(), null, http2ServerHandler);\n+            ctx.pipeline().remove(this);\n \n-                ctx.fireUserEventTriggered(PriorKnowledgeUpgradeEvent.INSTANCE);\n-            }\n+            ctx.fireUserEventTriggered(PriorKnowledgeUpgradeEvent.INSTANCE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e603ff12800ea515faf02ad8bee79d094d63c921"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ3MzU1MQ==", "bodyText": "Yep... we will fix this in netty 5", "url": "https://github.com/netty/netty/pull/10008#discussion_r376473551", "createdAt": "2020-02-07T16:08:08Z", "author": {"login": "normanmaurer"}, "path": "codec-http2/src/main/java/io/netty/handler/codec/http2/CleartextHttp2ServerUpgradeHandler.java", "diffHunk": "@@ -66,36 +65,33 @@ public CleartextHttp2ServerUpgradeHandler(HttpServerCodec httpServerCodec,\n     @Override\n     public void handlerAdded(ChannelHandlerContext ctx) throws Exception {\n         ctx.pipeline()\n-           .addBefore(ctx.name(), null, new PriorKnowledgeHandler())\n-           .addBefore(ctx.name(), null, httpServerCodec)\n-           .replace(this, null, httpServerUpgradeHandler);\n+                .addAfter(ctx.name(), null, httpServerUpgradeHandler)\n+                .addAfter(ctx.name(), null, httpServerCodec);\n     }\n \n     /**\n      * Peek inbound message to determine current connection wants to start HTTP/2\n      * by HTTP upgrade or prior knowledge\n      */\n-    private final class PriorKnowledgeHandler extends ByteToMessageDecoder {\n-        @Override\n-        protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n-            int prefaceLength = CONNECTION_PREFACE.readableBytes();\n-            int bytesRead = Math.min(in.readableBytes(), prefaceLength);\n+    @Override\n+    protected void decode(ChannelHandlerContext ctx, ByteBuf in, List<Object> out) throws Exception {\n+        int prefaceLength = CONNECTION_PREFACE.readableBytes();\n+        int bytesRead = Math.min(in.readableBytes(), prefaceLength);\n \n-            if (!ByteBufUtil.equals(CONNECTION_PREFACE, CONNECTION_PREFACE.readerIndex(),\n-                                    in, in.readerIndex(), bytesRead)) {\n-                ctx.pipeline().remove(this);\n-            } else if (bytesRead == prefaceLength) {\n-                // Full h2 preface match, removed source codec, using http2 codec to handle\n-                // following network traffic\n-                ctx.pipeline()\n-                   .remove(httpServerCodec)\n-                   .remove(httpServerUpgradeHandler);\n+        if (!ByteBufUtil.equals(CONNECTION_PREFACE, CONNECTION_PREFACE.readerIndex(),\n+                in, in.readerIndex(), bytesRead)) {\n+            ctx.pipeline().remove(this);\n+        } else if (bytesRead == prefaceLength) {\n+            // Full h2 preface match, removed source codec, using http2 codec to handle\n+            // following network traffic\n+            ctx.pipeline()\n+                    .remove(httpServerCodec)\n+                    .remove(httpServerUpgradeHandler);\n \n-                ctx.pipeline().addAfter(ctx.name(), null, http2ServerHandler);\n-                ctx.pipeline().remove(this);\n+            ctx.pipeline().addAfter(ctx.name(), null, http2ServerHandler);\n+            ctx.pipeline().remove(this);\n \n-                ctx.fireUserEventTriggered(PriorKnowledgeUpgradeEvent.INSTANCE);\n-            }\n+            ctx.fireUserEventTriggered(PriorKnowledgeUpgradeEvent.INSTANCE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQ2NDM4Mw=="}, "originalCommit": {"oid": "e603ff12800ea515faf02ad8bee79d094d63c921"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3474, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}