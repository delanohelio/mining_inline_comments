{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgzMTA4Mzg4", "number": 10081, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMToxNTo1M1rODk0YfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMToxOTowN1rODk0cMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTMzNTY0OnYy", "diffSide": "RIGHT", "path": "example/src/main/java/io/netty/example/http2/helloworld/frame/client/Http2ClientFrameInitializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMToxNTo1M1rOFxWyew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMToxNTo1M1rOFxWyew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI5NzkxNQ==", "bodyText": "nit: final", "url": "https://github.com/netty/netty/pull/10081#discussion_r387297915", "createdAt": "2020-03-03T21:15:53Z", "author": {"login": "normanmaurer"}, "path": "example/src/main/java/io/netty/example/http2/helloworld/frame/client/Http2ClientFrameInitializer.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2014 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License, version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package io.netty.example.http2.helloworld.frame.client;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.handler.codec.http2.Http2FrameCodec;\n+import io.netty.handler.codec.http2.Http2FrameCodecBuilder;\n+import io.netty.handler.codec.http2.Http2MultiplexHandler;\n+import io.netty.handler.codec.http2.Http2SecurityUtil;\n+import io.netty.handler.codec.http2.Http2Settings;\n+import io.netty.handler.ssl.ApplicationProtocolConfig;\n+import io.netty.handler.ssl.ApplicationProtocolConfig.Protocol;\n+import io.netty.handler.ssl.ApplicationProtocolConfig.SelectedListenerFailureBehavior;\n+import io.netty.handler.ssl.ApplicationProtocolConfig.SelectorFailureBehavior;\n+import io.netty.handler.ssl.ApplicationProtocolNames;\n+import io.netty.handler.ssl.OpenSsl;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import io.netty.handler.ssl.SslProvider;\n+import io.netty.handler.ssl.SupportedCipherSuiteFilter;\n+import io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n+\n+/**\n+ * Configures client pipeline to support HTTP/2 frames via {@link Http2FrameCodec} and {@link Http2MultiplexHandler}.\n+ */\n+public final class Http2ClientFrameInitializer extends ChannelInitializer<Channel> {\n+\n+    private boolean isSsl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "095f7f0250926873cfab9012eb16f82da1588a84"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTMzODQ5OnYy", "diffSide": "RIGHT", "path": "example/src/main/java/io/netty/example/http2/helloworld/frame/client/Http2ClientFrameInitializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMToxNjo1MlrOFxW0TQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMToxNjo1MlrOFxW0TQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI5ODM4MQ==", "bodyText": "in other examples we usually inject the SslContext if ssl should be used and so build it in the main method. Consider doing this here as well to keep it consistent.", "url": "https://github.com/netty/netty/pull/10081#discussion_r387298381", "createdAt": "2020-03-03T21:16:52Z", "author": {"login": "normanmaurer"}, "path": "example/src/main/java/io/netty/example/http2/helloworld/frame/client/Http2ClientFrameInitializer.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2014 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License, version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package io.netty.example.http2.helloworld.frame.client;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.handler.codec.http2.Http2FrameCodec;\n+import io.netty.handler.codec.http2.Http2FrameCodecBuilder;\n+import io.netty.handler.codec.http2.Http2MultiplexHandler;\n+import io.netty.handler.codec.http2.Http2SecurityUtil;\n+import io.netty.handler.codec.http2.Http2Settings;\n+import io.netty.handler.ssl.ApplicationProtocolConfig;\n+import io.netty.handler.ssl.ApplicationProtocolConfig.Protocol;\n+import io.netty.handler.ssl.ApplicationProtocolConfig.SelectedListenerFailureBehavior;\n+import io.netty.handler.ssl.ApplicationProtocolConfig.SelectorFailureBehavior;\n+import io.netty.handler.ssl.ApplicationProtocolNames;\n+import io.netty.handler.ssl.OpenSsl;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import io.netty.handler.ssl.SslProvider;\n+import io.netty.handler.ssl.SupportedCipherSuiteFilter;\n+import io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n+\n+/**\n+ * Configures client pipeline to support HTTP/2 frames via {@link Http2FrameCodec} and {@link Http2MultiplexHandler}.\n+ */\n+public final class Http2ClientFrameInitializer extends ChannelInitializer<Channel> {\n+\n+    private boolean isSsl;\n+\n+    public Http2ClientFrameInitializer(boolean isSsl) {\n+        this.isSsl = isSsl;\n+    }\n+\n+    @Override\n+    protected void initChannel(Channel ch) throws Exception {\n+        // ensure that our 'trust all' SSL handler is the first in the pipeline if SSL is enabled.\n+        if (isSsl) {\n+            ch.pipeline().addFirst(\"SSL Handler\", this.buildClientSslContext().newHandler(ch.alloc()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "095f7f0250926873cfab9012eb16f82da1588a84"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTM0MDA3OnYy", "diffSide": "RIGHT", "path": "example/src/main/java/io/netty/example/http2/helloworld/frame/client/Http2ClientFrameInitializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMToxNzozMFrOFxW1Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMToxNzozMFrOFxW1Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI5ODY1OA==", "bodyText": "nit: consider removing names for handlers here as its not really needed.", "url": "https://github.com/netty/netty/pull/10081#discussion_r387298658", "createdAt": "2020-03-03T21:17:30Z", "author": {"login": "normanmaurer"}, "path": "example/src/main/java/io/netty/example/http2/helloworld/frame/client/Http2ClientFrameInitializer.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2014 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License, version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package io.netty.example.http2.helloworld.frame.client;\n+\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.channel.ChannelInitializer;\n+import io.netty.channel.SimpleChannelInboundHandler;\n+import io.netty.handler.codec.http2.Http2FrameCodec;\n+import io.netty.handler.codec.http2.Http2FrameCodecBuilder;\n+import io.netty.handler.codec.http2.Http2MultiplexHandler;\n+import io.netty.handler.codec.http2.Http2SecurityUtil;\n+import io.netty.handler.codec.http2.Http2Settings;\n+import io.netty.handler.ssl.ApplicationProtocolConfig;\n+import io.netty.handler.ssl.ApplicationProtocolConfig.Protocol;\n+import io.netty.handler.ssl.ApplicationProtocolConfig.SelectedListenerFailureBehavior;\n+import io.netty.handler.ssl.ApplicationProtocolConfig.SelectorFailureBehavior;\n+import io.netty.handler.ssl.ApplicationProtocolNames;\n+import io.netty.handler.ssl.OpenSsl;\n+import io.netty.handler.ssl.SslContext;\n+import io.netty.handler.ssl.SslContextBuilder;\n+import io.netty.handler.ssl.SslProvider;\n+import io.netty.handler.ssl.SupportedCipherSuiteFilter;\n+import io.netty.handler.ssl.util.InsecureTrustManagerFactory;\n+\n+/**\n+ * Configures client pipeline to support HTTP/2 frames via {@link Http2FrameCodec} and {@link Http2MultiplexHandler}.\n+ */\n+public final class Http2ClientFrameInitializer extends ChannelInitializer<Channel> {\n+\n+    private boolean isSsl;\n+\n+    public Http2ClientFrameInitializer(boolean isSsl) {\n+        this.isSsl = isSsl;\n+    }\n+\n+    @Override\n+    protected void initChannel(Channel ch) throws Exception {\n+        // ensure that our 'trust all' SSL handler is the first in the pipeline if SSL is enabled.\n+        if (isSsl) {\n+            ch.pipeline().addFirst(\"SSL Handler\", this.buildClientSslContext().newHandler(ch.alloc()));\n+        }\n+\n+        final Http2FrameCodec http2FrameCodec = Http2FrameCodecBuilder.forClient()\n+            .initialSettings(Http2Settings.defaultSettings()) // this is the default, but shows it can be changed.\n+            .build();\n+        ch.pipeline().addLast(\"HTTP2 Frame Codec\", http2FrameCodec);\n+        ch.pipeline().addLast(\"HTTP2 Multiplex Handler\", new Http2MultiplexHandler(new SimpleChannelInboundHandler() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "095f7f0250926873cfab9012eb16f82da1588a84"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTM0MTEyOnYy", "diffSide": "RIGHT", "path": "example/src/main/java/io/netty/example/http2/helloworld/frame/client/Http2ClientFrameInitializer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMToxNzo1MFrOFxW2EA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMToxNzo1MFrOFxW2EA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI5ODgzMg==", "bodyText": "nit: 2020", "url": "https://github.com/netty/netty/pull/10081#discussion_r387298832", "createdAt": "2020-03-03T21:17:50Z", "author": {"login": "normanmaurer"}, "path": "example/src/main/java/io/netty/example/http2/helloworld/frame/client/Http2ClientFrameInitializer.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2014 The Netty Project", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "095f7f0250926873cfab9012eb16f82da1588a84"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTM0MTgwOnYy", "diffSide": "RIGHT", "path": "example/src/main/java/io/netty/example/http2/helloworld/frame/client/Http2ClientStreamFrameResponseHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMToxODowNFrOFxW2dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMToxODowNFrOFxW2dw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI5ODkzNQ==", "bodyText": "nit: 2020", "url": "https://github.com/netty/netty/pull/10081#discussion_r387298935", "createdAt": "2020-03-03T21:18:04Z", "author": {"login": "normanmaurer"}, "path": "example/src/main/java/io/netty/example/http2/helloworld/frame/client/Http2ClientStreamFrameResponseHandler.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2014 The Netty Project", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "095f7f0250926873cfab9012eb16f82da1588a84"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTM0MzgwOnYy", "diffSide": "RIGHT", "path": "example/src/main/java/io/netty/example/http2/helloworld/frame/client/Http2FrameClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMToxODozOVrOFxW3qQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMToxODozOVrOFxW3qQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI5OTI0MQ==", "bodyText": "nit: 2020", "url": "https://github.com/netty/netty/pull/10081#discussion_r387299241", "createdAt": "2020-03-03T21:18:39Z", "author": {"login": "normanmaurer"}, "path": "example/src/main/java/io/netty/example/http2/helloworld/frame/client/Http2FrameClient.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2014 The Netty Project", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "095f7f0250926873cfab9012eb16f82da1588a84"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5OTM0NTE0OnYy", "diffSide": "RIGHT", "path": "example/src/main/java/io/netty/example/http2/helloworld/frame/client/Http2FrameClient.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMToxOTowN1rOFxW4jQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QyMToxOTowN1rOFxW4jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI5OTQ2OQ==", "bodyText": "add a private constructor as well as this class only has a static method.", "url": "https://github.com/netty/netty/pull/10081#discussion_r387299469", "createdAt": "2020-03-03T21:19:07Z", "author": {"login": "normanmaurer"}, "path": "example/src/main/java/io/netty/example/http2/helloworld/frame/client/Http2FrameClient.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2014 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License, version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at:\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+package io.netty.example.http2.helloworld.frame.client;\n+\n+import io.netty.bootstrap.Bootstrap;\n+import io.netty.channel.Channel;\n+import io.netty.channel.ChannelOption;\n+import io.netty.channel.EventLoopGroup;\n+import io.netty.channel.nio.NioEventLoopGroup;\n+import io.netty.channel.socket.nio.NioSocketChannel;\n+import io.netty.handler.codec.http2.DefaultHttp2Headers;\n+import io.netty.handler.codec.http2.DefaultHttp2HeadersFrame;\n+import io.netty.handler.codec.http2.Http2HeadersFrame;\n+import io.netty.handler.codec.http2.Http2StreamChannel;\n+import io.netty.handler.codec.http2.Http2StreamChannelBootstrap;\n+\n+/**\n+ * An HTTP2 client that allows you to send HTTP2 frames to a server using the newer HTTP2\n+ * approach (via {@link io.netty.handler.codec.http2.Http2FrameCodec}).\n+ * When run from the command-line, sends a single HEADERS frame (with prior knowledge) to\n+ * the server configured at host:port/path.\n+ * You should include {@link io.netty.handler.codec.http2.Http2ClientUpgradeCodec} if the\n+ * HTTP/2 server you are hitting doesn't support h2c/prior knowledge.\n+ */\n+public final class Http2FrameClient {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "095f7f0250926873cfab9012eb16f82da1588a84"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3505, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}