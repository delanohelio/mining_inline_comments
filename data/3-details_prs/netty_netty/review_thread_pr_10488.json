{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwMDk5MDEy", "number": 10488, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMjoxMToxOVrOEZ8tCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMzozODozNVrOEZ-39A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NjQ0NDI0OnYy", "diffSide": "RIGHT", "path": "resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMjoxMToxOVrOHDEclw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMjoxMToxOVrOHDEclw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk4MDYzMQ==", "bodyText": "Should we use a static logger and so use InternalLoggerFactory.getInstance(LoggingDnsQueryLifeCycleObserverFactory.class) ?", "url": "https://github.com/netty/netty/pull/10488#discussion_r472980631", "createdAt": "2020-08-19T12:11:19Z", "author": {"login": "normanmaurer"}, "path": "resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2017 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.resolver.dns;\n+\n+import io.netty.handler.codec.dns.DnsQuestion;\n+import io.netty.handler.logging.LogLevel;\n+import io.netty.util.internal.logging.InternalLogLevel;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * A {@link DnsQueryLifecycleObserverFactory} that enables detailed logging in the {@link DnsNameResolver}.\n+ * <p>\n+ * When {@linkplain DnsNameResolverBuilder#dnsQueryLifecycleObserverFactory(DnsQueryLifecycleObserverFactory)\n+ * configured on the resolver}, detailed trace information will be generated so that it is easier to understand the\n+ * cause of resolution failure.\n+ */\n+public class LoggingDnsQueryLifeCycleObserverFactory implements DnsQueryLifecycleObserverFactory {\n+    private final InternalLogger logger;\n+    private final InternalLogLevel level;\n+\n+    /**\n+     * Create {@link DnsQueryLifecycleObserver} instances that log events at the default {@link LogLevel#DEBUG} level.\n+     */\n+    public LoggingDnsQueryLifeCycleObserverFactory() {\n+        this(LogLevel.DEBUG);\n+    }\n+\n+    /**\n+     * Create {@link DnsQueryLifecycleObserver} instances that log events at the given log level.\n+     * @param level The log level to use for logging resolver events.\n+     */\n+    public LoggingDnsQueryLifeCycleObserverFactory(LogLevel level) {\n+        logger = InternalLoggerFactory.getInstance(getClass());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9565d30b37a21fb3066bc440948ac605d3dadeda"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NjQ0NDU5OnYy", "diffSide": "RIGHT", "path": "resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMjoxMToyNVrOHDEc2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMjoxMToyNVrOHDEc2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk4MDY5Ng==", "bodyText": "final", "url": "https://github.com/netty/netty/pull/10488#discussion_r472980696", "createdAt": "2020-08-19T12:11:25Z", "author": {"login": "normanmaurer"}, "path": "resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2017 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.resolver.dns;\n+\n+import io.netty.handler.codec.dns.DnsQuestion;\n+import io.netty.handler.logging.LogLevel;\n+import io.netty.util.internal.logging.InternalLogLevel;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * A {@link DnsQueryLifecycleObserverFactory} that enables detailed logging in the {@link DnsNameResolver}.\n+ * <p>\n+ * When {@linkplain DnsNameResolverBuilder#dnsQueryLifecycleObserverFactory(DnsQueryLifecycleObserverFactory)\n+ * configured on the resolver}, detailed trace information will be generated so that it is easier to understand the\n+ * cause of resolution failure.\n+ */\n+public class LoggingDnsQueryLifeCycleObserverFactory implements DnsQueryLifecycleObserverFactory {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9565d30b37a21fb3066bc440948ac605d3dadeda"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NjQ0NzUzOnYy", "diffSide": "RIGHT", "path": "resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMjoxMjoxNVrOHDEeqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMjoxMjoxNVrOHDEeqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk4MTE2Mw==", "bodyText": "2020", "url": "https://github.com/netty/netty/pull/10488#discussion_r472981163", "createdAt": "2020-08-19T12:12:15Z", "author": {"login": "normanmaurer"}, "path": "resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java", "diffHunk": "@@ -0,0 +1,57 @@\n+/*\n+ * Copyright 2017 The Netty Project", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9565d30b37a21fb3066bc440948ac605d3dadeda"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NjUzOTU2OnYy", "diffSide": "RIGHT", "path": "resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMjozNzozMFrOHDFXIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMjo0MDoyOVrOHDFeHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk5NTYxOA==", "bodyText": "private ?", "url": "https://github.com/netty/netty/pull/10488#discussion_r472995618", "createdAt": "2020-08-19T12:37:30Z", "author": {"login": "normanmaurer"}, "path": "resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java", "diffHunk": "@@ -30,8 +30,9 @@\n  * configured on the resolver}, detailed trace information will be generated so that it is easier to understand the\n  * cause of resolution failure.\n  */\n-public class LoggingDnsQueryLifeCycleObserverFactory implements DnsQueryLifecycleObserverFactory {\n-    private final InternalLogger logger;\n+public final class LoggingDnsQueryLifeCycleObserverFactory implements DnsQueryLifecycleObserverFactory {\n+    public static final InternalLogger LOGGER =", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8381c377e80fb4049c1436b8bad13b0e8d51605"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk5NzQwNg==", "bodyText": "", "url": "https://github.com/netty/netty/pull/10488#discussion_r472997406", "createdAt": "2020-08-19T12:40:29Z", "author": {"login": "chrisvest"}, "path": "resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java", "diffHunk": "@@ -30,8 +30,9 @@\n  * configured on the resolver}, detailed trace information will be generated so that it is easier to understand the\n  * cause of resolution failure.\n  */\n-public class LoggingDnsQueryLifeCycleObserverFactory implements DnsQueryLifecycleObserverFactory {\n-    private final InternalLogger logger;\n+public final class LoggingDnsQueryLifeCycleObserverFactory implements DnsQueryLifecycleObserverFactory {\n+    public static final InternalLogger LOGGER =", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjk5NTYxOA=="}, "originalCommit": {"oid": "e8381c377e80fb4049c1436b8bad13b0e8d51605"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Njc4MTYwOnYy", "diffSide": "RIGHT", "path": "resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMzozNDozN1rOHDHqPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMzozNDozN1rOHDHqPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAzMzI3OQ==", "bodyText": "May be add requireNonNull(classContext)", "url": "https://github.com/netty/netty/pull/10488#discussion_r473033279", "createdAt": "2020-08-19T13:34:37Z", "author": {"login": "violetagg"}, "path": "resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.resolver.dns;\n+\n+import io.netty.handler.codec.dns.DnsQuestion;\n+import io.netty.handler.logging.LogLevel;\n+import io.netty.util.internal.logging.InternalLogLevel;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * A {@link DnsQueryLifecycleObserverFactory} that enables detailed logging in the {@link DnsNameResolver}.\n+ * <p>\n+ * When {@linkplain DnsNameResolverBuilder#dnsQueryLifecycleObserverFactory(DnsQueryLifecycleObserverFactory)\n+ * configured on the resolver}, detailed trace information will be generated so that it is easier to understand the\n+ * cause of resolution failure.\n+ */\n+public final class LoggingDnsQueryLifeCycleObserverFactory implements DnsQueryLifecycleObserverFactory {\n+    private static final InternalLogger DEFAULT_LOGGER =\n+            InternalLoggerFactory.getInstance(LoggingDnsQueryLifeCycleObserverFactory.class);\n+    private final InternalLogger logger;\n+    private final InternalLogLevel level;\n+\n+    /**\n+     * Create {@link DnsQueryLifecycleObserver} instances that log events at the default {@link LogLevel#DEBUG} level.\n+     */\n+    public LoggingDnsQueryLifeCycleObserverFactory() {\n+        this(LogLevel.DEBUG);\n+    }\n+\n+    /**\n+     * Create {@link DnsQueryLifecycleObserver} instances that log events at the given log level.\n+     * @param level The log level to use for logging resolver events.\n+     */\n+    public LoggingDnsQueryLifeCycleObserverFactory(LogLevel level) {\n+        this.level = checkAndConvertLevel(level);\n+        logger = DEFAULT_LOGGER;\n+    }\n+\n+    /**\n+     * Create {@link DnsQueryLifecycleObserver} instances that log events to a logger with the given class context,\n+     * at the given log level.\n+     * @param classContext The class context for the logger to use.\n+     * @param level The log level to use for logging resolver events.\n+     */\n+    public LoggingDnsQueryLifeCycleObserverFactory(Class<?> classContext, LogLevel level) {\n+        this.level = checkAndConvertLevel(level);\n+        logger = InternalLoggerFactory.getInstance(classContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95f22efc8558670271af807a93c78cfe7d67548c"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Njc4MzgzOnYy", "diffSide": "RIGHT", "path": "resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMzozNTowM1rOHDHrkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMzozNTowM1rOHDHrkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAzMzYxNg==", "bodyText": "May be add requireNonNull(nameContext)", "url": "https://github.com/netty/netty/pull/10488#discussion_r473033616", "createdAt": "2020-08-19T13:35:03Z", "author": {"login": "violetagg"}, "path": "resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.resolver.dns;\n+\n+import io.netty.handler.codec.dns.DnsQuestion;\n+import io.netty.handler.logging.LogLevel;\n+import io.netty.util.internal.logging.InternalLogLevel;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * A {@link DnsQueryLifecycleObserverFactory} that enables detailed logging in the {@link DnsNameResolver}.\n+ * <p>\n+ * When {@linkplain DnsNameResolverBuilder#dnsQueryLifecycleObserverFactory(DnsQueryLifecycleObserverFactory)\n+ * configured on the resolver}, detailed trace information will be generated so that it is easier to understand the\n+ * cause of resolution failure.\n+ */\n+public final class LoggingDnsQueryLifeCycleObserverFactory implements DnsQueryLifecycleObserverFactory {\n+    private static final InternalLogger DEFAULT_LOGGER =\n+            InternalLoggerFactory.getInstance(LoggingDnsQueryLifeCycleObserverFactory.class);\n+    private final InternalLogger logger;\n+    private final InternalLogLevel level;\n+\n+    /**\n+     * Create {@link DnsQueryLifecycleObserver} instances that log events at the default {@link LogLevel#DEBUG} level.\n+     */\n+    public LoggingDnsQueryLifeCycleObserverFactory() {\n+        this(LogLevel.DEBUG);\n+    }\n+\n+    /**\n+     * Create {@link DnsQueryLifecycleObserver} instances that log events at the given log level.\n+     * @param level The log level to use for logging resolver events.\n+     */\n+    public LoggingDnsQueryLifeCycleObserverFactory(LogLevel level) {\n+        this.level = checkAndConvertLevel(level);\n+        logger = DEFAULT_LOGGER;\n+    }\n+\n+    /**\n+     * Create {@link DnsQueryLifecycleObserver} instances that log events to a logger with the given class context,\n+     * at the given log level.\n+     * @param classContext The class context for the logger to use.\n+     * @param level The log level to use for logging resolver events.\n+     */\n+    public LoggingDnsQueryLifeCycleObserverFactory(Class<?> classContext, LogLevel level) {\n+        this.level = checkAndConvertLevel(level);\n+        logger = InternalLoggerFactory.getInstance(classContext);\n+    }\n+\n+    /**\n+     * Create {@link DnsQueryLifecycleObserver} instances that log events to a logger with the given name context,\n+     * at the given log level.\n+     * @param nameContext The name context for the logger to use.\n+     * @param level The log level to use for logging resolver events.\n+     */\n+    public LoggingDnsQueryLifeCycleObserverFactory(String nameContext, LogLevel level) {\n+        this.level = checkAndConvertLevel(level);\n+        logger = InternalLoggerFactory.getInstance(nameContext);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95f22efc8558670271af807a93c78cfe7d67548c"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1Njc5OTg4OnYy", "diffSide": "RIGHT", "path": "resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMzozODozNVrOHDH1kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMzozODozNVrOHDH1kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzAzNjE3OA==", "bodyText": "nit: I would just call this name", "url": "https://github.com/netty/netty/pull/10488#discussion_r473036178", "createdAt": "2020-08-19T13:38:35Z", "author": {"login": "normanmaurer"}, "path": "resolver-dns/src/main/java/io/netty/resolver/dns/LoggingDnsQueryLifeCycleObserverFactory.java", "diffHunk": "@@ -0,0 +1,85 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.resolver.dns;\n+\n+import io.netty.handler.codec.dns.DnsQuestion;\n+import io.netty.handler.logging.LogLevel;\n+import io.netty.util.internal.logging.InternalLogLevel;\n+import io.netty.util.internal.logging.InternalLogger;\n+import io.netty.util.internal.logging.InternalLoggerFactory;\n+\n+import static java.util.Objects.requireNonNull;\n+\n+/**\n+ * A {@link DnsQueryLifecycleObserverFactory} that enables detailed logging in the {@link DnsNameResolver}.\n+ * <p>\n+ * When {@linkplain DnsNameResolverBuilder#dnsQueryLifecycleObserverFactory(DnsQueryLifecycleObserverFactory)\n+ * configured on the resolver}, detailed trace information will be generated so that it is easier to understand the\n+ * cause of resolution failure.\n+ */\n+public final class LoggingDnsQueryLifeCycleObserverFactory implements DnsQueryLifecycleObserverFactory {\n+    private static final InternalLogger DEFAULT_LOGGER =\n+            InternalLoggerFactory.getInstance(LoggingDnsQueryLifeCycleObserverFactory.class);\n+    private final InternalLogger logger;\n+    private final InternalLogLevel level;\n+\n+    /**\n+     * Create {@link DnsQueryLifecycleObserver} instances that log events at the default {@link LogLevel#DEBUG} level.\n+     */\n+    public LoggingDnsQueryLifeCycleObserverFactory() {\n+        this(LogLevel.DEBUG);\n+    }\n+\n+    /**\n+     * Create {@link DnsQueryLifecycleObserver} instances that log events at the given log level.\n+     * @param level The log level to use for logging resolver events.\n+     */\n+    public LoggingDnsQueryLifeCycleObserverFactory(LogLevel level) {\n+        this.level = checkAndConvertLevel(level);\n+        logger = DEFAULT_LOGGER;\n+    }\n+\n+    /**\n+     * Create {@link DnsQueryLifecycleObserver} instances that log events to a logger with the given class context,\n+     * at the given log level.\n+     * @param classContext The class context for the logger to use.\n+     * @param level The log level to use for logging resolver events.\n+     */\n+    public LoggingDnsQueryLifeCycleObserverFactory(Class<?> classContext, LogLevel level) {\n+        this.level = checkAndConvertLevel(level);\n+        logger = InternalLoggerFactory.getInstance(classContext);\n+    }\n+\n+    /**\n+     * Create {@link DnsQueryLifecycleObserver} instances that log events to a logger with the given name context,\n+     * at the given log level.\n+     * @param nameContext The name context for the logger to use.\n+     * @param level The log level to use for logging resolver events.\n+     */\n+    public LoggingDnsQueryLifeCycleObserverFactory(String nameContext, LogLevel level) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "95f22efc8558670271af807a93c78cfe7d67548c"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3660, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}