{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk5OTU0MTA1", "number": 10659, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNjo0MjowNFrOEsQVOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjowNzozMFrOEsmqxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0ODQwMzc4OnYy", "diffSide": "RIGHT", "path": "common/src/test/java/io/netty/util/concurrent/UnorderedThreadPoolEventExecutorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNjo0MjowNFrOHfduUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMFQwNjo0MjowNFrOHfduUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMjc1NDg5Ng==", "bodyText": "After this unblocks we should cancel the scheduled task via future.cancel(). Also we should shutdown the executor.", "url": "https://github.com/netty/netty/pull/10659#discussion_r502754896", "createdAt": "2020-10-10T06:42:04Z", "author": {"login": "normanmaurer"}, "path": "common/src/test/java/io/netty/util/concurrent/UnorderedThreadPoolEventExecutorTest.java", "diffHunk": "@@ -54,4 +55,17 @@ public void operationComplete(Future<Object> future) throws Exception {\n             executor.shutdownGracefully();\n         }\n     }\n+\n+    @Test(timeout = 10000)\n+    public void scheduledAtFixedRateMustRunTaskRepeatedly() throws InterruptedException {\n+        UnorderedThreadPoolEventExecutor executor = new UnorderedThreadPoolEventExecutor(1);\n+        final CountDownLatch latch = new CountDownLatch(3);\n+        executor.scheduleAtFixedRate(new Runnable() {\n+            @Override\n+            public void run() {\n+                latch.countDown();\n+            }\n+        }, 1, 1, TimeUnit.MILLISECONDS);\n+        latch.await();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97ba2de7a0672d7d38e41a37da9ee3b7be4a4264"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE1MjA2MzQyOnYy", "diffSide": "RIGHT", "path": "common/src/test/java/io/netty/util/concurrent/UnorderedThreadPoolEventExecutorTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjowNzozMFrOHf79Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xMlQxMjoxMDoxNFrOHf8Cjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI1MDI3MQ==", "bodyText": "nit: shutdownGracefully() ?", "url": "https://github.com/netty/netty/pull/10659#discussion_r503250271", "createdAt": "2020-10-12T12:07:30Z", "author": {"login": "normanmaurer"}, "path": "common/src/test/java/io/netty/util/concurrent/UnorderedThreadPoolEventExecutorTest.java", "diffHunk": "@@ -54,4 +55,22 @@ public void operationComplete(Future<Object> future) throws Exception {\n             executor.shutdownGracefully();\n         }\n     }\n+\n+    @Test(timeout = 10000)\n+    public void scheduledAtFixedRateMustRunTaskRepeatedly() throws InterruptedException {\n+        UnorderedThreadPoolEventExecutor executor = new UnorderedThreadPoolEventExecutor(1);\n+        final CountDownLatch latch = new CountDownLatch(3);\n+        Future<?> future = executor.scheduleAtFixedRate(new Runnable() {\n+            @Override\n+            public void run() {\n+                latch.countDown();\n+            }\n+        }, 1, 1, TimeUnit.MILLISECONDS);\n+        try {\n+            latch.await();\n+        } finally {\n+            future.cancel(true);\n+            executor.shutdown();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa7f663b8e0f588fe4d27906754d029d5e50e54f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI1MTU5OQ==", "bodyText": "Alright, done.", "url": "https://github.com/netty/netty/pull/10659#discussion_r503251599", "createdAt": "2020-10-12T12:10:14Z", "author": {"login": "chrisvest"}, "path": "common/src/test/java/io/netty/util/concurrent/UnorderedThreadPoolEventExecutorTest.java", "diffHunk": "@@ -54,4 +55,22 @@ public void operationComplete(Future<Object> future) throws Exception {\n             executor.shutdownGracefully();\n         }\n     }\n+\n+    @Test(timeout = 10000)\n+    public void scheduledAtFixedRateMustRunTaskRepeatedly() throws InterruptedException {\n+        UnorderedThreadPoolEventExecutor executor = new UnorderedThreadPoolEventExecutor(1);\n+        final CountDownLatch latch = new CountDownLatch(3);\n+        Future<?> future = executor.scheduleAtFixedRate(new Runnable() {\n+            @Override\n+            public void run() {\n+                latch.countDown();\n+            }\n+        }, 1, 1, TimeUnit.MILLISECONDS);\n+        try {\n+            latch.await();\n+        } finally {\n+            future.cancel(true);\n+            executor.shutdown();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMzI1MDI3MQ=="}, "originalCommit": {"oid": "aa7f663b8e0f588fe4d27906754d029d5e50e54f"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3610, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}