{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2NjE0NjA3", "number": 10274, "title": "Fix #10261 stomp can be chunked, so implement StompWebSocketFrameEncoder", "bodyText": "Motivation:\nCurrent implementation StompSubframeEncoder can encode StompFrame into several separate chunks or encode separately StompHeadersSubframe and StompContentSubframe. But some client libraries (e.g. stomp.js) do not support aggregation.\nModification:\nAdd StompWebSocketFrameEncoder for integration between origin stomp suframe encoder and ContinuationWebSocketFrame to support  chunks on transport level.\nResult:\nFixes #10261", "createdAt": "2020-05-12T09:52:29Z", "url": "https://github.com/netty/netty/pull/10274", "merged": true, "mergeCommit": {"oid": "714dd00aabb414e6cfa931888328ad41d8f323e9"}, "closed": true, "closedAt": "2020-06-04T17:14:13Z", "author": {"login": "amizurov"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgg6e7AH2gAyNDE2NjE0NjA3OjIxNDEwZjYxNzJiZTllMmMwNjNkNDk3YTAzZWJiOGQzMWMyMDEyMDU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnVm1QgFqTQyMjcyNzk4Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "21410f6172be9e2c063d497a03ebb8d31c201205", "author": {"user": {"login": "amizurov", "name": "Andrey Mizurov"}}, "url": "https://github.com/netty/netty/commit/21410f6172be9e2c063d497a03ebb8d31c201205", "committedDate": "2020-05-12T09:32:30Z", "message": "Fix #10261 stomp can be chunked, so implement StompWebSocketFrameEncoder for integration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "389726f70d4df5833e2d9587758eedb1407e1207", "author": {"user": {"login": "amizurov", "name": "Andrey Mizurov"}}, "url": "https://github.com/netty/netty/commit/389726f70d4df5833e2d9587758eedb1407e1207", "committedDate": "2020-05-12T09:38:42Z", "message": "Add copyright header"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5ODg0MzMz", "url": "https://github.com/netty/netty/pull/10274#pullrequestreview-409884333", "createdAt": "2020-05-12T09:55:52Z", "commit": {"oid": "389726f70d4df5833e2d9587758eedb1407e1207"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwOTo1NTo1MlrOGT_Kaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwOTo1NTo1MlrOGT_Kaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzYxMDk4Nw==", "bodyText": "@amizurov unfortunately this is a a breaking change as it changes the method signature of some methods", "url": "https://github.com/netty/netty/pull/10274#discussion_r423610987", "createdAt": "2020-05-12T09:55:52Z", "author": {"login": "normanmaurer"}, "path": "example/src/main/java/io/netty/example/stomp/websocket/StompWebSocketProtocolCodec.java", "diffHunk": "@@ -15,33 +15,34 @@\n  */\n package io.netty.example.stomp.websocket;\n \n-import io.netty.buffer.ByteBuf;\n import io.netty.channel.ChannelHandler.Sharable;\n import io.netty.channel.ChannelHandlerContext;\n import io.netty.handler.codec.MessageToMessageCodec;\n import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;\n import io.netty.handler.codec.http.websocketx.WebSocketFrame;\n+import io.netty.handler.codec.http.websocketx.WebSocketFrameAggregator;\n import io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler;\n import io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler.HandshakeComplete;\n+import io.netty.handler.codec.stomp.StompSubframe;\n import io.netty.handler.codec.stomp.StompSubframeAggregator;\n import io.netty.handler.codec.stomp.StompSubframeDecoder;\n-import io.netty.handler.codec.stomp.StompSubframeEncoder;\n \n import java.util.List;\n \n @Sharable\n-public class StompWebSocketProtocolCodec extends MessageToMessageCodec<WebSocketFrame, ByteBuf> {\n+public class StompWebSocketProtocolCodec extends MessageToMessageCodec<WebSocketFrame, StompSubframe> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "389726f70d4df5833e2d9587758eedb1407e1207"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5OTQyMjM3", "url": "https://github.com/netty/netty/pull/10274#pullrequestreview-409942237", "createdAt": "2020-05-12T11:20:39Z", "commit": {"oid": "389726f70d4df5833e2d9587758eedb1407e1207"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMToyMDozOVrOGUB7yA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQxMToyMDozOVrOGUB7yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzY1NjM5Mg==", "bodyText": "hmm... is this really correct for the case where msg isn't an instance of StompFrame  ? Seems like you may loose items here then.", "url": "https://github.com/netty/netty/pull/10274#discussion_r423656392", "createdAt": "2020-05-12T11:20:39Z", "author": {"login": "normanmaurer"}, "path": "example/src/main/java/io/netty/example/stomp/websocket/StompWebSocketFrameEncoder.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.example.stomp.websocket;\n+\n+import io.netty.buffer.ByteBuf;\n+import io.netty.buffer.CompositeByteBuf;\n+import io.netty.channel.ChannelHandlerContext;\n+import io.netty.handler.codec.http.websocketx.ContinuationWebSocketFrame;\n+import io.netty.handler.codec.http.websocketx.TextWebSocketFrame;\n+import io.netty.handler.codec.http.websocketx.WebSocketFrame;\n+import io.netty.handler.codec.stomp.LastStompContentSubframe;\n+import io.netty.handler.codec.stomp.StompFrame;\n+import io.netty.handler.codec.stomp.StompHeadersSubframe;\n+import io.netty.handler.codec.stomp.StompSubframe;\n+import io.netty.handler.codec.stomp.StompSubframeEncoder;\n+\n+import java.util.List;\n+\n+public class StompWebSocketFrameEncoder extends StompSubframeEncoder {\n+\n+    @Override\n+    public void encode(ChannelHandlerContext ctx, StompSubframe msg, List<Object> out) throws Exception {\n+        super.encode(ctx, msg, out);\n+\n+        if (out.isEmpty()) {\n+            return;\n+        }\n+\n+        final WebSocketFrame webSocketFrame;\n+        if (msg instanceof StompFrame) {\n+            if (out.size() == 1) {\n+                webSocketFrame = new TextWebSocketFrame(getFirst(out));\n+            } else {\n+                CompositeByteBuf content = ctx.alloc().compositeBuffer(out.size());\n+                for (Object byteBuf : out) {\n+                    content.addComponent(true, (ByteBuf) byteBuf);\n+                }\n+                webSocketFrame = new TextWebSocketFrame(content);\n+            }\n+        } else if (msg instanceof StompHeadersSubframe) {\n+            webSocketFrame = new TextWebSocketFrame(false, 0, getFirst(out));\n+        } else if (msg instanceof LastStompContentSubframe) {\n+            webSocketFrame = new ContinuationWebSocketFrame(true, 0, getFirst(out));\n+        } else {\n+            webSocketFrame = new ContinuationWebSocketFrame(false, 0, getFirst(out));\n+        }\n+\n+        out.clear();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "389726f70d4df5833e2d9587758eedb1407e1207"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyNzI3OTg3", "url": "https://github.com/netty/netty/pull/10274#pullrequestreview-422727987", "createdAt": "2020-06-02T14:19:33Z", "commit": {"oid": "389726f70d4df5833e2d9587758eedb1407e1207"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 305, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}