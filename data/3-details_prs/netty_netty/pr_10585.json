{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4NDk5OTk5", "number": 10585, "title": "Directly write / read sockaddr_in and sockaddr_in6 from direct memory", "bodyText": "without JNI\nMotivation:\nWe want to keep the amount of JNI as small as possible to reduce the\nperformance overhead now that we eliminated the overhead of the need of\nit for syscalls.\nModifications:\nWrite / read sockaddr_in / sockaddr_in6 via PlatformDependent and so\neliminate the need for JNI\nResult:\nLess JNI and so less overhead for crossing the border.", "createdAt": "2020-09-17T08:32:12Z", "url": "https://github.com/netty/netty/pull/10585", "merged": true, "mergeCommit": {"oid": "3d686d7fce68e9b30df8f76ced3521c3f250e1eb"}, "closed": true, "closedAt": "2020-09-17T18:54:25Z", "author": {"login": "normanmaurer"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJswUMgH2gAyNDg4NDk5OTk5OmYzNGIxYjhhZjhmZDY4ZDViOGEyNDQzYTM2ZmEyOWViZmYyZTRkNGY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJ1NvkAFqTQ5MDg3MTExNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "f34b1b8af8fd68d5b8a2443a36fa29ebff2e4d4f", "author": {"user": {"login": "normanmaurer", "name": "Norman Maurer"}}, "url": "https://github.com/netty/netty/commit/f34b1b8af8fd68d5b8a2443a36fa29ebff2e4d4f", "committedDate": "2020-09-17T08:31:09Z", "message": "Directly write / read sockaddr_in and sockaddr_in6 from direct memory\nwithout JNI\n\nMotivation:\n\nWe want to keep the amount of JNI as small as possible to reduce the\nperformance overhead now that we eliminated the overhead of the need of\nit for syscalls.\n\nModifications:\n\nWrite / read sockaddr_in / sockaddr_in6 via PlatformDependent and so\neliminate the need for JNI\n\nResult:\n\nLess JNI and so less overhead for crossing the border."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMzgxNDMw", "url": "https://github.com/netty/netty/pull/10585#pullrequestreview-490381430", "createdAt": "2020-09-17T08:54:01Z", "commit": {"oid": "f34b1b8af8fd68d5b8a2443a36fa29ebff2e4d4f"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwMzc3MDYw", "url": "https://github.com/netty/netty/pull/10585#pullrequestreview-490377060", "createdAt": "2020-09-17T08:48:58Z", "commit": {"oid": "f34b1b8af8fd68d5b8a2443a36fa29ebff2e4d4f"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwODo0ODo1OFrOHTX99Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QwODo0ODo1OFrOHTX99Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDA3NzY4NQ==", "bodyText": "I think I need that for SQPOLL for 5.8/5.9 as accept op is not supported", "url": "https://github.com/netty/netty/pull/10585#discussion_r490077685", "createdAt": "2020-09-17T08:48:58Z", "author": {"login": "1Jo1"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/AbstractIOUringServerChannel.java", "diffHunk": "@@ -69,12 +69,10 @@ public AbstractIOUringChannel getChannel() {\n         return this;\n     }\n \n-    abstract Channel newChildChannel(int fd, byte[] address, int offset, int len) throws Exception;\n+    abstract Channel newChildChannel(\n+            int fd, long acceptedAddressMemoryAddress, long acceptedAddressLengthMemoryAddress) throws Exception;\n \n     final class UringServerChannelUnsafe extends AbstractIOUringChannel.AbstractUringUnsafe {\n-        // Will hold the remote address after accept4(...) was successful.\n-        // We need 24 bytes for the address as maximum\n-        private final byte[] acceptedAddress = new byte[24];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f34b1b8af8fd68d5b8a2443a36fa29ebff2e4d4f"}, "originalPosition": 11}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwNzQwNzc3", "url": "https://github.com/netty/netty/pull/10585#pullrequestreview-490740777", "createdAt": "2020-09-17T15:49:29Z", "commit": {"oid": "f34b1b8af8fd68d5b8a2443a36fa29ebff2e4d4f"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNTo0OToyOVrOHTpGqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNTo1MjowOVrOHTpOAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM1ODQ0MQ==", "bodyText": "any reason for not doing return PlatformDependent.setMemory(memoryAddress, length, 0);?", "url": "https://github.com/netty/netty/pull/10585#discussion_r490358441", "createdAt": "2020-09-17T15:49:29Z", "author": {"login": "njhill"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/SockaddrIn.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.channel.uring;\n+\n+import io.netty.util.internal.PlatformDependent;\n+\n+import java.net.Inet6Address;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.UnknownHostException;\n+\n+import static io.netty.util.internal.PlatformDependent.BIG_ENDIAN_NATIVE_ORDER;\n+\n+final class SockaddrIn {\n+    static final byte[] IPV4_MAPPED_IPV6_PREFIX = {\n+            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xff, (byte) 0xff };\n+    private SockaddrIn() { }\n+\n+    /**\n+     *\n+     * struct sockaddr_in {\n+     *      sa_family_t    sin_family; // address family: AF_INET\n+     *      in_port_t      sin_port;   // port in network byte order\n+     *      struct in_addr sin_addr;   // internet address\n+     * };\n+     *\n+     * // Internet address.\n+     * struct in_addr {\n+     *     uint32_t       s_addr;     // address in network byte order\n+     * };\n+     *\n+     */\n+    static int writeIPv4(long memory, InetAddress address, int port) {\n+        int written = 0;\n+        PlatformDependent.putShort(memory, Native.AF_INET);\n+        written += 2;\n+        PlatformDependent.putShort(memory + written, handleNetworkOrder((short) port));\n+        written += 2;\n+        byte[] bytes = address.getAddress();\n+        int offset = 0;\n+        if (bytes.length == 16) {\n+            // IPV6 mapped IPV4 address\n+            offset = 12;\n+        }\n+        assert bytes.length == offset + 4;\n+        PlatformDependent.copyMemory(bytes, offset, memory + written, 4);\n+        written += 4;\n+\n+        written += writePadding(memory + written, Native.SIZEOF_SOCKADDR_IN - written);\n+        assert written == Native.SIZEOF_SOCKADDR_IN;\n+        return written;\n+    }\n+\n+    /**\n+     * struct sockaddr_in6 {\n+     *     sa_family_t     sin6_family;   // AF_INET6\n+     *     in_port_t       sin6_port;     // port number\n+     *     uint32_t        sin6_flowinfo; // IPv6 flow information\n+     *     struct in6_addr sin6_addr;     // IPv6 address\n+     *     uint32_t        sin6_scope_id; /* Scope ID (new in 2.4)\n+     * };\n+     *\n+     * struct in6_addr{\n+     *     unsigned char s6_addr[16];   // IPv6 address\n+     * };\n+     */\n+    static int writeIPv6(long memory, InetAddress address, int port) {\n+        int written = 0;\n+        // AF_INET6\n+        PlatformDependent.putShort(memory, Native.AF_INET6);\n+        written += 2;\n+        PlatformDependent.putShort(memory + written, handleNetworkOrder((short) port));\n+        written += 2;\n+        PlatformDependent.putInt(memory + written, 0);\n+        written += 4;\n+        byte[] bytes = address.getAddress();\n+        if  (bytes.length == 4) {\n+            PlatformDependent.copyMemory(IPV4_MAPPED_IPV6_PREFIX, 0, memory + written, IPV4_MAPPED_IPV6_PREFIX.length);\n+            written += IPV4_MAPPED_IPV6_PREFIX.length;\n+            PlatformDependent.copyMemory(bytes, 0, memory + written, 4);\n+            written += 4;\n+            PlatformDependent.putInt(memory + written, 0);\n+            written += 4;\n+        } else {\n+            PlatformDependent.copyMemory(bytes, 0, memory + written, 16);\n+            written += 16;\n+            PlatformDependent.putInt(memory + written, ((Inet6Address) address).getScopeId());\n+            written += 4;\n+        }\n+        written += writePadding(memory + written, Native.SIZEOF_SOCKADDR_IN6 - written);\n+        assert written == Native.SIZEOF_SOCKADDR_IN6;\n+        return written;\n+    }\n+\n+    static InetSocketAddress readIPv4(long memory, byte[] tmpArray) {\n+        assert tmpArray.length == 4;\n+        int port = handleNetworkOrder(PlatformDependent.getShort(memory + 2)) & 0xFFFF;\n+        PlatformDependent.copyMemory(memory + 4, tmpArray, 0, 4);\n+        try {\n+            return new InetSocketAddress(InetAddress.getByAddress(tmpArray), port);\n+        } catch (UnknownHostException ignore) {\n+            return null;\n+        }\n+    }\n+\n+    static InetSocketAddress readIPv6(long memory, byte[] tmpArray) {\n+        assert tmpArray.length == 16;\n+        int port = handleNetworkOrder(PlatformDependent.getShort(memory + 2)) & 0xFFFF;\n+        PlatformDependent.copyMemory(memory + 8, tmpArray, 0, 16);\n+        int scopeId = PlatformDependent.getInt(memory + 24);\n+        try {\n+            return new InetSocketAddress(Inet6Address.getByAddress(null, tmpArray, scopeId), port);\n+        } catch (UnknownHostException ignore) {\n+            return null;\n+        }\n+    }\n+\n+    private static short handleNetworkOrder(short v) {\n+        return BIG_ENDIAN_NATIVE_ORDER ? v : Short.reverseBytes(v);\n+    }\n+\n+    /**\n+     * Fill with {@code 0}s if any padding is needed.\n+     */\n+    private static int writePadding(long memoryAddress, int length) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f34b1b8af8fd68d5b8a2443a36fa29ebff2e4d4f"}, "originalPosition": 138}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDM2MDMyMA==", "bodyText": "nit: any reason for not just incrementing memory in this and writeIPv6?", "url": "https://github.com/netty/netty/pull/10585#discussion_r490360320", "createdAt": "2020-09-17T15:52:09Z", "author": {"login": "njhill"}, "path": "transport-native-io_uring/src/main/java/io/netty/channel/uring/SockaddrIn.java", "diffHunk": "@@ -0,0 +1,165 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+ * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the\n+ * License for the specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package io.netty.channel.uring;\n+\n+import io.netty.util.internal.PlatformDependent;\n+\n+import java.net.Inet6Address;\n+import java.net.InetAddress;\n+import java.net.InetSocketAddress;\n+import java.net.UnknownHostException;\n+\n+import static io.netty.util.internal.PlatformDependent.BIG_ENDIAN_NATIVE_ORDER;\n+\n+final class SockaddrIn {\n+    static final byte[] IPV4_MAPPED_IPV6_PREFIX = {\n+            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, (byte) 0xff, (byte) 0xff };\n+    private SockaddrIn() { }\n+\n+    /**\n+     *\n+     * struct sockaddr_in {\n+     *      sa_family_t    sin_family; // address family: AF_INET\n+     *      in_port_t      sin_port;   // port in network byte order\n+     *      struct in_addr sin_addr;   // internet address\n+     * };\n+     *\n+     * // Internet address.\n+     * struct in_addr {\n+     *     uint32_t       s_addr;     // address in network byte order\n+     * };\n+     *\n+     */\n+    static int writeIPv4(long memory, InetAddress address, int port) {\n+        int written = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f34b1b8af8fd68d5b8a2443a36fa29ebff2e4d4f"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6837250e1f5d88c99a1ca2de4c170ed951cb4c20", "author": {"user": {"login": "normanmaurer", "name": "Norman Maurer"}}, "url": "https://github.com/netty/netty/commit/6837250e1f5d88c99a1ca2de4c170ed951cb4c20", "committedDate": "2020-09-17T17:46:52Z", "message": "Address nicks comment"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwODUxNDk5", "url": "https://github.com/netty/netty/pull/10585#pullrequestreview-490851499", "createdAt": "2020-09-17T17:55:51Z", "commit": {"oid": "6837250e1f5d88c99a1ca2de4c170ed951cb4c20"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNzo1NTo1MlrOHTuwIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNzo1NTo1MlrOHTuwIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDQ1MDk3Ng==", "bodyText": "@normanmaurer hmm, this wasn't my comment :)", "url": "https://github.com/netty/netty/pull/10585#discussion_r490450976", "createdAt": "2020-09-17T17:55:52Z", "author": {"login": "njhill"}, "path": "testsuite/src/main/java/io/netty/testsuite/transport/socket/DatagramUnicastTest.java", "diffHunk": "@@ -189,7 +189,7 @@ public void channelRead0(ChannelHandlerContext ctx, Object msgs) throws Exceptio\n             for (ChannelFuture future: futures) {\n                 future.sync();\n             }\n-            if (!latch.await(10, TimeUnit.SECONDS)) {\n+            if (!latch.await(100000, TimeUnit.SECONDS)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6837250e1f5d88c99a1ca2de4c170ed951cb4c20"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b869d7814637fd64c197e24106e90807afa9b724", "author": {"user": {"login": "normanmaurer", "name": "Norman Maurer"}}, "url": "https://github.com/netty/netty/commit/b869d7814637fd64c197e24106e90807afa9b724", "committedDate": "2020-09-17T17:58:15Z", "message": "Revert file change"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkwODcxMTE1", "url": "https://github.com/netty/netty/pull/10585#pullrequestreview-490871115", "createdAt": "2020-09-17T18:22:32Z", "commit": {"oid": "b869d7814637fd64c197e24106e90807afa9b724"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 62, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}