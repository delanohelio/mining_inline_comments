{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NzQyMTQx", "number": 10270, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNjoxOToyNlrOD6_0qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODowODo1MFrOD7icvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTg5Njc0OnYy", "diffSide": "RIGHT", "path": "codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractDiskHttpData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNjoxOToyNlrOGTFgvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwMjo1MDo1MFrOGTKvrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2NjQzMA==", "bodyText": "Should this try finally better englobing the while loop? Because there, the read operation will be only valid once, then failed since it will be closed from the very first iteration...", "url": "https://github.com/netty/netty/pull/10270#discussion_r422666430", "createdAt": "2020-05-10T16:19:26Z", "author": {"login": "fredericBregier"}, "path": "codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractDiskHttpData.java", "diffHunk": "@@ -301,7 +301,15 @@ public ByteBuf getChunk(int length) throws IOException {\n         int read = 0;\n         ByteBuffer byteBuffer = ByteBuffer.allocate(length);\n         while (read < length) {\n-            int readnow = fileChannel.read(byteBuffer);\n+            int readnow=-1;\n+            try {\n+                readnow = fileChannel.read(byteBuffer);\n+            }catch (IOException e){\n+                logger.warn(\"Failed to read a file.\", e);\n+            }\n+            finally {\n+                fileChannel.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "36c31881d7610ea1ee669389575d14f65e6e9438"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjc1MjE3Mw==", "bodyText": "yes, according to your suggest. I rewrite the fix.", "url": "https://github.com/netty/netty/pull/10270#discussion_r422752173", "createdAt": "2020-05-11T02:50:50Z", "author": {"login": "prgitpr"}, "path": "codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractDiskHttpData.java", "diffHunk": "@@ -301,7 +301,15 @@ public ByteBuf getChunk(int length) throws IOException {\n         int read = 0;\n         ByteBuffer byteBuffer = ByteBuffer.allocate(length);\n         while (read < length) {\n-            int readnow = fileChannel.read(byteBuffer);\n+            int readnow=-1;\n+            try {\n+                readnow = fileChannel.read(byteBuffer);\n+            }catch (IOException e){\n+                logger.warn(\"Failed to read a file.\", e);\n+            }\n+            finally {\n+                fileChannel.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY2NjQzMA=="}, "originalCommit": {"oid": "36c31881d7610ea1ee669389575d14f65e6e9438"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMzA1OTUwOnYy", "diffSide": "RIGHT", "path": "codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractDiskHttpData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwNzowMzoxOVrOGTPJTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQwOToxMDo0MVrOGTTkIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgyNDI2OQ==", "bodyText": "this will throw a NPE if readnow == -1 is true. you will need to add a null check here", "url": "https://github.com/netty/netty/pull/10270#discussion_r422824269", "createdAt": "2020-05-11T07:03:19Z", "author": {"login": "normanmaurer"}, "path": "codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractDiskHttpData.java", "diffHunk": "@@ -300,15 +300,19 @@ public ByteBuf getChunk(int length) throws IOException {\n         }\n         int read = 0;\n         ByteBuffer byteBuffer = ByteBuffer.allocate(length);\n-        while (read < length) {\n-            int readnow = fileChannel.read(byteBuffer);\n-            if (readnow == -1) {\n-                fileChannel.close();\n-                fileChannel = null;\n-                break;\n-            } else {\n-                read += readnow;\n+        try {\n+            while (read < length) {\n+                int readnow = fileChannel.read(byteBuffer);\n+                if (readnow == -1) {\n+                    fileChannel.close();\n+                    fileChannel = null;\n+                    break;\n+                } else {\n+                    read += readnow;\n+                }\n             }\n+        } finally {\n+            fileChannel.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c6e798efb15f957bfc82858a74e97052fc1fee33"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjg5NjY3NQ==", "bodyText": "@prgitpr I agree with @normanmaurer\nPerhaps removing the lines 307 and 308 (closing and setting to null fileChannel) but keeping the break is one way to go, moving the setting to null just after the close in the finally part (so moving all close and set to null in the finally)?", "url": "https://github.com/netty/netty/pull/10270#discussion_r422896675", "createdAt": "2020-05-11T09:10:41Z", "author": {"login": "fredericBregier"}, "path": "codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractDiskHttpData.java", "diffHunk": "@@ -300,15 +300,19 @@ public ByteBuf getChunk(int length) throws IOException {\n         }\n         int read = 0;\n         ByteBuffer byteBuffer = ByteBuffer.allocate(length);\n-        while (read < length) {\n-            int readnow = fileChannel.read(byteBuffer);\n-            if (readnow == -1) {\n-                fileChannel.close();\n-                fileChannel = null;\n-                break;\n-            } else {\n-                read += readnow;\n+        try {\n+            while (read < length) {\n+                int readnow = fileChannel.read(byteBuffer);\n+                if (readnow == -1) {\n+                    fileChannel.close();\n+                    fileChannel = null;\n+                    break;\n+                } else {\n+                    read += readnow;\n+                }\n             }\n+        } finally {\n+            fileChannel.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjgyNDI2OQ=="}, "originalCommit": {"oid": "c6e798efb15f957bfc82858a74e97052fc1fee33"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNDgyMTYzOnYy", "diffSide": "RIGHT", "path": "codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractDiskHttpData.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNDo1Njo1MVrOGTgDVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxNToxOToyMFrOGThDHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEwMTI3MA==", "bodyText": "What about this version? Interest: no close within the loop, setting to null in finally (no check needed)\n    try {\n        while (read < length) {\n            int readnow = fileChannel.read(byteBuffer);\n            if (readnow == -1) {\n                break;\n            }\n            read += readnow;\n        }\n    } finally {\n        fileChannel.close();\n        fileChannel = null;\n    }", "url": "https://github.com/netty/netty/pull/10270#discussion_r423101270", "createdAt": "2020-05-11T14:56:51Z", "author": {"login": "fredericBregier"}, "path": "codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractDiskHttpData.java", "diffHunk": "@@ -300,14 +300,20 @@ public ByteBuf getChunk(int length) throws IOException {\n         }\n         int read = 0;\n         ByteBuffer byteBuffer = ByteBuffer.allocate(length);\n-        while (read < length) {\n-            int readnow = fileChannel.read(byteBuffer);\n-            if (readnow == -1) {\n+        try {\n+            while (read < length) {\n+                int readnow = fileChannel.read(byteBuffer);\n+                if (readnow == -1) {\n+                    fileChannel.close();\n+                    fileChannel = null;\n+                    break;\n+                } else {\n+                    read += readnow;\n+                }\n+            }\n+        } finally {\n+            if (fileChannel != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2628d644e01196594dbc36884c903c135998e950"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEwNzkxNg==", "bodyText": "yes, it look much clean", "url": "https://github.com/netty/netty/pull/10270#discussion_r423107916", "createdAt": "2020-05-11T15:05:42Z", "author": {"login": "prgitpr"}, "path": "codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractDiskHttpData.java", "diffHunk": "@@ -300,14 +300,20 @@ public ByteBuf getChunk(int length) throws IOException {\n         }\n         int read = 0;\n         ByteBuffer byteBuffer = ByteBuffer.allocate(length);\n-        while (read < length) {\n-            int readnow = fileChannel.read(byteBuffer);\n-            if (readnow == -1) {\n+        try {\n+            while (read < length) {\n+                int readnow = fileChannel.read(byteBuffer);\n+                if (readnow == -1) {\n+                    fileChannel.close();\n+                    fileChannel = null;\n+                    break;\n+                } else {\n+                    read += readnow;\n+                }\n+            }\n+        } finally {\n+            if (fileChannel != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEwMTI3MA=="}, "originalCommit": {"oid": "2628d644e01196594dbc36884c903c135998e950"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzExNzU5Nw==", "bodyText": "Thanks", "url": "https://github.com/netty/netty/pull/10270#discussion_r423117597", "createdAt": "2020-05-11T15:19:20Z", "author": {"login": "fredericBregier"}, "path": "codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractDiskHttpData.java", "diffHunk": "@@ -300,14 +300,20 @@ public ByteBuf getChunk(int length) throws IOException {\n         }\n         int read = 0;\n         ByteBuffer byteBuffer = ByteBuffer.allocate(length);\n-        while (read < length) {\n-            int readnow = fileChannel.read(byteBuffer);\n-            if (readnow == -1) {\n+        try {\n+            while (read < length) {\n+                int readnow = fileChannel.read(byteBuffer);\n+                if (readnow == -1) {\n+                    fileChannel.close();\n+                    fileChannel = null;\n+                    break;\n+                } else {\n+                    read += readnow;\n+                }\n+            }\n+        } finally {\n+            if (fileChannel != null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzEwMTI3MA=="}, "originalCommit": {"oid": "2628d644e01196594dbc36884c903c135998e950"}, "originalPosition": 19}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzMxMjc4OnYy", "diffSide": "RIGHT", "path": "codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractDiskHttpData.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNjo1MzowMlrOGT4c-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwNzozMToxNFrOGT5pwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMTA1MA==", "bodyText": "just remove the above two lines as you already call close in the finally block anyway.", "url": "https://github.com/netty/netty/pull/10270#discussion_r423501050", "createdAt": "2020-05-12T06:53:02Z", "author": {"login": "normanmaurer"}, "path": "codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractDiskHttpData.java", "diffHunk": "@@ -300,14 +300,20 @@ public ByteBuf getChunk(int length) throws IOException {\n         }\n         int read = 0;\n         ByteBuffer byteBuffer = ByteBuffer.allocate(length);\n-        while (read < length) {\n-            int readnow = fileChannel.read(byteBuffer);\n-            if (readnow == -1) {\n+        try {\n+            while (read < length) {\n+                int readnow = fileChannel.read(byteBuffer);\n+                if (readnow == -1) {\n+                    fileChannel.close();\n+                    fileChannel = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d412193fccfd2d12c97a07a996da76ba41defa11"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUyMDcwNA==", "bodyText": "ok", "url": "https://github.com/netty/netty/pull/10270#discussion_r423520704", "createdAt": "2020-05-12T07:31:14Z", "author": {"login": "prgitpr"}, "path": "codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractDiskHttpData.java", "diffHunk": "@@ -300,14 +300,20 @@ public ByteBuf getChunk(int length) throws IOException {\n         }\n         int read = 0;\n         ByteBuffer byteBuffer = ByteBuffer.allocate(length);\n-        while (read < length) {\n-            int readnow = fileChannel.read(byteBuffer);\n-            if (readnow == -1) {\n+        try {\n+            while (read < length) {\n+                int readnow = fileChannel.read(byteBuffer);\n+                if (readnow == -1) {\n+                    fileChannel.close();\n+                    fileChannel = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzUwMTA1MA=="}, "originalCommit": {"oid": "d412193fccfd2d12c97a07a996da76ba41defa11"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzNzU2OTkxOnYy", "diffSide": "RIGHT", "path": "codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractDiskHttpData.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQwODowODo1MFrOGT6_Jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzo1NTo1NlrOGUc8dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU0MjU2Nw==", "bodyText": "Previously, there was a fileChannel = null; after closing it. I believe that we still need it to be consistent in the finally part.", "url": "https://github.com/netty/netty/pull/10270#discussion_r423542567", "createdAt": "2020-05-12T08:08:50Z", "author": {"login": "fredericBregier"}, "path": "codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractDiskHttpData.java", "diffHunk": "@@ -300,15 +300,17 @@ public ByteBuf getChunk(int length) throws IOException {\n         }\n         int read = 0;\n         ByteBuffer byteBuffer = ByteBuffer.allocate(length);\n-        while (read < length) {\n-            int readnow = fileChannel.read(byteBuffer);\n-            if (readnow == -1) {\n-                fileChannel.close();\n-                fileChannel = null;\n-                break;\n-            } else {\n-                read += readnow;\n+        try {\n+            while (read < length) {\n+                int readnow = fileChannel.read(byteBuffer);\n+                if (readnow == -1) {\n+                    break;\n+                } else {\n+                    read += readnow;\n+                }\n             }\n+        } finally {\n+                fileChannel.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "63dbfdf7caab19a1d48297596d76b6a3f37bbba9"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5ODkzNA==", "bodyText": "ok", "url": "https://github.com/netty/netty/pull/10270#discussion_r424098934", "createdAt": "2020-05-12T23:55:56Z", "author": {"login": "prgitpr"}, "path": "codec-http/src/main/java/io/netty/handler/codec/http/multipart/AbstractDiskHttpData.java", "diffHunk": "@@ -300,15 +300,17 @@ public ByteBuf getChunk(int length) throws IOException {\n         }\n         int read = 0;\n         ByteBuffer byteBuffer = ByteBuffer.allocate(length);\n-        while (read < length) {\n-            int readnow = fileChannel.read(byteBuffer);\n-            if (readnow == -1) {\n-                fileChannel.close();\n-                fileChannel = null;\n-                break;\n-            } else {\n-                read += readnow;\n+        try {\n+            while (read < length) {\n+                int readnow = fileChannel.read(byteBuffer);\n+                if (readnow == -1) {\n+                    break;\n+                } else {\n+                    read += readnow;\n+                }\n             }\n+        } finally {\n+                fileChannel.close();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzU0MjU2Nw=="}, "originalCommit": {"oid": "63dbfdf7caab19a1d48297596d76b6a3f37bbba9"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3443, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}