{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzgyOTUxMTg1", "number": 10079, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzozNzo0NVrODkwAdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTozNToxN1rODlLPjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODYxODc4OnYy", "diffSide": "RIGHT", "path": "resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzozNzo0NVrOFxPxkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxOTo0MDoyOVrOFxT2tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4Mjk5NA==", "bodyText": "Is it necessary to create a new instance here? Consider invoking ensureAvailability() method instead of isAvailable() and newInstance().", "url": "https://github.com/netty/netty/pull/10079#discussion_r387182994", "createdAt": "2020-03-03T17:37:45Z", "author": {"login": "idelpivnitskiy"}, "path": "resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverBuilder.java", "diffHunk": "@@ -55,13 +66,68 @@\n     private int maxPayloadSize = 4096;\n     private boolean optResourceEnabled = true;\n     private HostsFileEntriesResolver hostsFileEntriesResolver = HostsFileEntriesResolver.DEFAULT;\n-    private DnsServerAddressStreamProvider dnsServerAddressStreamProvider = platformDefault();\n+    private DnsServerAddressStreamProvider dnsServerAddressStreamProvider = defaultStreamProvider();\n     private DnsQueryLifecycleObserverFactory dnsQueryLifecycleObserverFactory =\n             NoopDnsQueryLifecycleObserverFactory.INSTANCE;\n     private String[] searchDomains;\n     private int ndots = -1;\n     private boolean decodeIdn = true;\n \n+    static {\n+        Constructor<? extends DnsServerAddressStreamProvider> constructor = null;\n+        if (PlatformDependent.isOsx()) {\n+            try {\n+                // As MacOSDnsServerAddressStreamProvider is contained in another jar which depends on this jar\n+                // we use reflection to use it if its on the classpath.\n+                Object maybeProvider = AccessController.doPrivileged(new PrivilegedAction<Object>() {\n+                    @Override\n+                    public Object run() {\n+                        try {\n+                            return Class.forName(\n+                                    \"io.netty.resolver.dns.macos.MacOSDnsServerAddressStreamProvider\",\n+                                    false,\n+                                    PlatformDependent.getSystemClassLoader());\n+                        } catch (Throwable cause) {\n+                            return cause;\n+                        }\n+                    }\n+                });\n+                if (maybeProvider instanceof Class) {\n+                    @SuppressWarnings(\"unchecked\")\n+                    Class<? extends DnsServerAddressStreamProvider> providerClass =\n+                            (Class<? extends DnsServerAddressStreamProvider>) maybeProvider;\n+                    Method method = providerClass.getMethod(\"isAvailable\");\n+                    if (Boolean.TRUE.equals(method.invoke(null))) {\n+                        constructor = providerClass.getConstructor();\n+                        constructor.newInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aba969b526ae1b662e82de75d0970e288bc2dda7"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI0OTg0Ng==", "bodyText": "ensureAvailability() is not the same as testing that we can also create an instance. I would prefer to test that we can also create the instance here. Just to be safe.", "url": "https://github.com/netty/netty/pull/10079#discussion_r387249846", "createdAt": "2020-03-03T19:40:29Z", "author": {"login": "normanmaurer"}, "path": "resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverBuilder.java", "diffHunk": "@@ -55,13 +66,68 @@\n     private int maxPayloadSize = 4096;\n     private boolean optResourceEnabled = true;\n     private HostsFileEntriesResolver hostsFileEntriesResolver = HostsFileEntriesResolver.DEFAULT;\n-    private DnsServerAddressStreamProvider dnsServerAddressStreamProvider = platformDefault();\n+    private DnsServerAddressStreamProvider dnsServerAddressStreamProvider = defaultStreamProvider();\n     private DnsQueryLifecycleObserverFactory dnsQueryLifecycleObserverFactory =\n             NoopDnsQueryLifecycleObserverFactory.INSTANCE;\n     private String[] searchDomains;\n     private int ndots = -1;\n     private boolean decodeIdn = true;\n \n+    static {\n+        Constructor<? extends DnsServerAddressStreamProvider> constructor = null;\n+        if (PlatformDependent.isOsx()) {\n+            try {\n+                // As MacOSDnsServerAddressStreamProvider is contained in another jar which depends on this jar\n+                // we use reflection to use it if its on the classpath.\n+                Object maybeProvider = AccessController.doPrivileged(new PrivilegedAction<Object>() {\n+                    @Override\n+                    public Object run() {\n+                        try {\n+                            return Class.forName(\n+                                    \"io.netty.resolver.dns.macos.MacOSDnsServerAddressStreamProvider\",\n+                                    false,\n+                                    PlatformDependent.getSystemClassLoader());\n+                        } catch (Throwable cause) {\n+                            return cause;\n+                        }\n+                    }\n+                });\n+                if (maybeProvider instanceof Class) {\n+                    @SuppressWarnings(\"unchecked\")\n+                    Class<? extends DnsServerAddressStreamProvider> providerClass =\n+                            (Class<? extends DnsServerAddressStreamProvider>) maybeProvider;\n+                    Method method = providerClass.getMethod(\"isAvailable\");\n+                    if (Boolean.TRUE.equals(method.invoke(null))) {\n+                        constructor = providerClass.getConstructor();\n+                        constructor.newInstance();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4Mjk5NA=="}, "originalCommit": {"oid": "aba969b526ae1b662e82de75d0970e288bc2dda7"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODYzNjcwOnYy", "diffSide": "RIGHT", "path": "resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverBuilder.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxNzo0Mjo1M1rOFxP8og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxMjo1MzoyNFrOFxsEfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4NTgyNg==", "bodyText": "In DnsServerAddressStreamProviders you decide between windows and unix. Consider moving all this macos logic there as well to keep all os-related decision in one place.", "url": "https://github.com/netty/netty/pull/10079#discussion_r387185826", "createdAt": "2020-03-03T17:42:53Z", "author": {"login": "idelpivnitskiy"}, "path": "resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverBuilder.java", "diffHunk": "@@ -55,13 +66,68 @@\n     private int maxPayloadSize = 4096;\n     private boolean optResourceEnabled = true;\n     private HostsFileEntriesResolver hostsFileEntriesResolver = HostsFileEntriesResolver.DEFAULT;\n-    private DnsServerAddressStreamProvider dnsServerAddressStreamProvider = platformDefault();\n+    private DnsServerAddressStreamProvider dnsServerAddressStreamProvider = defaultStreamProvider();\n     private DnsQueryLifecycleObserverFactory dnsQueryLifecycleObserverFactory =\n             NoopDnsQueryLifecycleObserverFactory.INSTANCE;\n     private String[] searchDomains;\n     private int ndots = -1;\n     private boolean decodeIdn = true;\n \n+    static {\n+        Constructor<? extends DnsServerAddressStreamProvider> constructor = null;\n+        if (PlatformDependent.isOsx()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aba969b526ae1b662e82de75d0970e288bc2dda7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzI1MDk4OA==", "bodyText": "let me see what I can do.. MacOSDnsServerAddressStreamProvider does call DnsServerAddressStreamProviders.platformDefault() by itself so this would create a cycle..", "url": "https://github.com/netty/netty/pull/10079#discussion_r387250988", "createdAt": "2020-03-03T19:42:37Z", "author": {"login": "normanmaurer"}, "path": "resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverBuilder.java", "diffHunk": "@@ -55,13 +66,68 @@\n     private int maxPayloadSize = 4096;\n     private boolean optResourceEnabled = true;\n     private HostsFileEntriesResolver hostsFileEntriesResolver = HostsFileEntriesResolver.DEFAULT;\n-    private DnsServerAddressStreamProvider dnsServerAddressStreamProvider = platformDefault();\n+    private DnsServerAddressStreamProvider dnsServerAddressStreamProvider = defaultStreamProvider();\n     private DnsQueryLifecycleObserverFactory dnsQueryLifecycleObserverFactory =\n             NoopDnsQueryLifecycleObserverFactory.INSTANCE;\n     private String[] searchDomains;\n     private int ndots = -1;\n     private boolean decodeIdn = true;\n \n+    static {\n+        Constructor<? extends DnsServerAddressStreamProvider> constructor = null;\n+        if (PlatformDependent.isOsx()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4NTgyNg=="}, "originalCommit": {"oid": "aba969b526ae1b662e82de75d0970e288bc2dda7"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzY0NjU5MQ==", "bodyText": "@idelpivnitskiy done... PTAL again... also @NiteshKant", "url": "https://github.com/netty/netty/pull/10079#discussion_r387646591", "createdAt": "2020-03-04T12:53:24Z", "author": {"login": "normanmaurer"}, "path": "resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverBuilder.java", "diffHunk": "@@ -55,13 +66,68 @@\n     private int maxPayloadSize = 4096;\n     private boolean optResourceEnabled = true;\n     private HostsFileEntriesResolver hostsFileEntriesResolver = HostsFileEntriesResolver.DEFAULT;\n-    private DnsServerAddressStreamProvider dnsServerAddressStreamProvider = platformDefault();\n+    private DnsServerAddressStreamProvider dnsServerAddressStreamProvider = defaultStreamProvider();\n     private DnsQueryLifecycleObserverFactory dnsQueryLifecycleObserverFactory =\n             NoopDnsQueryLifecycleObserverFactory.INSTANCE;\n     private String[] searchDomains;\n     private int ndots = -1;\n     private boolean decodeIdn = true;\n \n+    static {\n+        Constructor<? extends DnsServerAddressStreamProvider> constructor = null;\n+        if (PlatformDependent.isOsx()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzE4NTgyNg=="}, "originalCommit": {"oid": "aba969b526ae1b662e82de75d0970e288bc2dda7"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM5ODgwNDAyOnYy", "diffSide": "RIGHT", "path": "resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODozMzoxMFrOFxRnBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wM1QxODozNTo1M1rOFxRs3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIxMzA2Mg==", "bodyText": "Can we just use this instance as opposed to keeping a reference to the constructior and call newInstance() from defaultStreamProvider() below?", "url": "https://github.com/netty/netty/pull/10079#discussion_r387213062", "createdAt": "2020-03-03T18:33:10Z", "author": {"login": "NiteshKant"}, "path": "resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverBuilder.java", "diffHunk": "@@ -55,13 +66,68 @@\n     private int maxPayloadSize = 4096;\n     private boolean optResourceEnabled = true;\n     private HostsFileEntriesResolver hostsFileEntriesResolver = HostsFileEntriesResolver.DEFAULT;\n-    private DnsServerAddressStreamProvider dnsServerAddressStreamProvider = platformDefault();\n+    private DnsServerAddressStreamProvider dnsServerAddressStreamProvider = defaultStreamProvider();\n     private DnsQueryLifecycleObserverFactory dnsQueryLifecycleObserverFactory =\n             NoopDnsQueryLifecycleObserverFactory.INSTANCE;\n     private String[] searchDomains;\n     private int ndots = -1;\n     private boolean decodeIdn = true;\n \n+    static {\n+        Constructor<? extends DnsServerAddressStreamProvider> constructor = null;\n+        if (PlatformDependent.isOsx()) {\n+            try {\n+                // As MacOSDnsServerAddressStreamProvider is contained in another jar which depends on this jar\n+                // we use reflection to use it if its on the classpath.\n+                Object maybeProvider = AccessController.doPrivileged(new PrivilegedAction<Object>() {\n+                    @Override\n+                    public Object run() {\n+                        try {\n+                            return Class.forName(\n+                                    \"io.netty.resolver.dns.macos.MacOSDnsServerAddressStreamProvider\",\n+                                    false,\n+                                    PlatformDependent.getSystemClassLoader());\n+                        } catch (Throwable cause) {\n+                            return cause;\n+                        }\n+                    }\n+                });\n+                if (maybeProvider instanceof Class) {\n+                    @SuppressWarnings(\"unchecked\")\n+                    Class<? extends DnsServerAddressStreamProvider> providerClass =\n+                            (Class<? extends DnsServerAddressStreamProvider>) maybeProvider;\n+                    Method method = providerClass.getMethod(\"isAvailable\");\n+                    if (Boolean.TRUE.equals(method.invoke(null))) {\n+                        constructor = providerClass.getConstructor();\n+                        constructor.newInstance();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aba969b526ae1b662e82de75d0970e288bc2dda7"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIxNDU1Ng==", "bodyText": "We need a new instance per build", "url": "https://github.com/netty/netty/pull/10079#discussion_r387214556", "createdAt": "2020-03-03T18:35:53Z", "author": {"login": "normanmaurer"}, "path": "resolver-dns/src/main/java/io/netty/resolver/dns/DnsNameResolverBuilder.java", "diffHunk": "@@ -55,13 +66,68 @@\n     private int maxPayloadSize = 4096;\n     private boolean optResourceEnabled = true;\n     private HostsFileEntriesResolver hostsFileEntriesResolver = HostsFileEntriesResolver.DEFAULT;\n-    private DnsServerAddressStreamProvider dnsServerAddressStreamProvider = platformDefault();\n+    private DnsServerAddressStreamProvider dnsServerAddressStreamProvider = defaultStreamProvider();\n     private DnsQueryLifecycleObserverFactory dnsQueryLifecycleObserverFactory =\n             NoopDnsQueryLifecycleObserverFactory.INSTANCE;\n     private String[] searchDomains;\n     private int ndots = -1;\n     private boolean decodeIdn = true;\n \n+    static {\n+        Constructor<? extends DnsServerAddressStreamProvider> constructor = null;\n+        if (PlatformDependent.isOsx()) {\n+            try {\n+                // As MacOSDnsServerAddressStreamProvider is contained in another jar which depends on this jar\n+                // we use reflection to use it if its on the classpath.\n+                Object maybeProvider = AccessController.doPrivileged(new PrivilegedAction<Object>() {\n+                    @Override\n+                    public Object run() {\n+                        try {\n+                            return Class.forName(\n+                                    \"io.netty.resolver.dns.macos.MacOSDnsServerAddressStreamProvider\",\n+                                    false,\n+                                    PlatformDependent.getSystemClassLoader());\n+                        } catch (Throwable cause) {\n+                            return cause;\n+                        }\n+                    }\n+                });\n+                if (maybeProvider instanceof Class) {\n+                    @SuppressWarnings(\"unchecked\")\n+                    Class<? extends DnsServerAddressStreamProvider> providerClass =\n+                            (Class<? extends DnsServerAddressStreamProvider>) maybeProvider;\n+                    Method method = providerClass.getMethod(\"isAvailable\");\n+                    if (Boolean.TRUE.equals(method.invoke(null))) {\n+                        constructor = providerClass.getConstructor();\n+                        constructor.newInstance();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NzIxMzA2Mg=="}, "originalCommit": {"oid": "aba969b526ae1b662e82de75d0970e288bc2dda7"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzA1NzEwOnYy", "diffSide": "RIGHT", "path": "resolver-dns-native-macos/src/main/java/io/netty/resolver/dns/macos/MacOSDnsServerAddressStreamProvider.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOToyODoyNVrOFx6m2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMTo0NzozNFrOFyQiCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4NDc2Mw==", "bodyText": "IIUC, there is a chance that users will never hit this path. Therefore, there is no need to load and initialize DnsServerAddressStreamProviders in advance. Can we use DnsServerAddressStreamProviders.unixDefault() here instead of a static constant?", "url": "https://github.com/netty/netty/pull/10079#discussion_r387884763", "createdAt": "2020-03-04T19:28:25Z", "author": {"login": "idelpivnitskiy"}, "path": "resolver-dns-native-macos/src/main/java/io/netty/resolver/dns/macos/MacOSDnsServerAddressStreamProvider.java", "diffHunk": "@@ -167,7 +169,7 @@ public DnsServerAddressStream nameServerAddressStream(String hostname) {\n                 if (addresses != null) {\n                     return addresses.stream();\n                 }\n-                return DEFAULT_PROVIDER.nameServerAddressStream(originalHostname);\n+                return UNIX_PROVIDER.nameServerAddressStream(originalHostname);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74334c2a090b57ad7d5bac41b6d5a09de5600d0d"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI0Mzk3Nw==", "bodyText": "sure why not...", "url": "https://github.com/netty/netty/pull/10079#discussion_r388243977", "createdAt": "2020-03-05T11:47:34Z", "author": {"login": "normanmaurer"}, "path": "resolver-dns-native-macos/src/main/java/io/netty/resolver/dns/macos/MacOSDnsServerAddressStreamProvider.java", "diffHunk": "@@ -167,7 +169,7 @@ public DnsServerAddressStream nameServerAddressStream(String hostname) {\n                 if (addresses != null) {\n                     return addresses.stream();\n                 }\n-                return DEFAULT_PROVIDER.nameServerAddressStream(originalHostname);\n+                return UNIX_PROVIDER.nameServerAddressStream(originalHostname);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4NDc2Mw=="}, "originalCommit": {"oid": "74334c2a090b57ad7d5bac41b6d5a09de5600d0d"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwMzA4MTA4OnYy", "diffSide": "RIGHT", "path": "resolver-dns/src/main/java/io/netty/resolver/dns/DnsServerAddressStreamProviders.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNFQxOTozNToxN1rOFx617g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMTo0ODoxN1rOFyQjRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4ODYyMg==", "bodyText": "On macOS users may never hit DEFAULT_DNS_SERVER_ADDRESS_STREAM_PROVIDER. Therefore, we may defer initialization until necessary, if we move this constant to another class.", "url": "https://github.com/netty/netty/pull/10079#discussion_r387888622", "createdAt": "2020-03-04T19:35:17Z", "author": {"login": "idelpivnitskiy"}, "path": "resolver-dns/src/main/java/io/netty/resolver/dns/DnsServerAddressStreamProviders.java", "diffHunk": "@@ -67,6 +116,21 @@ private DnsServerAddressStreamProviders() {\n      * configuration.\n      */\n     public static DnsServerAddressStreamProvider platformDefault() {\n+        if (STREAM_PROVIDER_CONSTRUCTOR != null) {\n+            try {\n+                return STREAM_PROVIDER_CONSTRUCTOR.newInstance();\n+            } catch (IllegalAccessException e) {\n+                // ignore\n+            } catch (InstantiationException e) {\n+                // ignore\n+            } catch (InvocationTargetException e) {\n+                // ignore\n+            }\n+        }\n+        return unixDefault();\n+    }\n+\n+    public static DnsServerAddressStreamProvider unixDefault() {\n         return DEFAULT_DNS_SERVER_ADDRESS_STREAM_PROVIDER;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74334c2a090b57ad7d5bac41b6d5a09de5600d0d"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODI0NDI5Mg==", "bodyText": "yep let me create an inner class.", "url": "https://github.com/netty/netty/pull/10079#discussion_r388244292", "createdAt": "2020-03-05T11:48:17Z", "author": {"login": "normanmaurer"}, "path": "resolver-dns/src/main/java/io/netty/resolver/dns/DnsServerAddressStreamProviders.java", "diffHunk": "@@ -67,6 +116,21 @@ private DnsServerAddressStreamProviders() {\n      * configuration.\n      */\n     public static DnsServerAddressStreamProvider platformDefault() {\n+        if (STREAM_PROVIDER_CONSTRUCTOR != null) {\n+            try {\n+                return STREAM_PROVIDER_CONSTRUCTOR.newInstance();\n+            } catch (IllegalAccessException e) {\n+                // ignore\n+            } catch (InstantiationException e) {\n+                // ignore\n+            } catch (InvocationTargetException e) {\n+                // ignore\n+            }\n+        }\n+        return unixDefault();\n+    }\n+\n+    public static DnsServerAddressStreamProvider unixDefault() {\n         return DEFAULT_DNS_SERVER_ADDRESS_STREAM_PROVIDER;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4Nzg4ODYyMg=="}, "originalCommit": {"oid": "74334c2a090b57ad7d5bac41b6d5a09de5600d0d"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3503, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}