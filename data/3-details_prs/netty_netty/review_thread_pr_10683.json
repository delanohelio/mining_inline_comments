{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTAzMjAyMTU3", "number": 10683, "reviewThreads": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOTozNTowMVrOEtZl7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMjowNTowM1rOEx3tgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDQwNjg0OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "isResolved": true, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQwOTozNTowMVrOHhKmLA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwODo0NzozOFrOHh8mvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzODY2OA==", "bodyText": "Add method to add a List of fingerprints.", "url": "https://github.com/netty/netty/pull/10683#discussion_r504538668", "createdAt": "2020-10-14T09:35:01Z", "author": {"login": "hyperxpro"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -207,4 +252,50 @@ protected void engineInit(ManagerFactoryParameters managerFactoryParameters) thr\n     protected TrustManager[] engineGetTrustManagers() {\n         return new TrustManager[] { tm };\n     }\n+\n+    /**\n+     * A builder for creating {@link FingerprintTrustManagerFactory}.\n+     */\n+    public static final class Builder {\n+\n+        /**\n+         * A hash algorithm for fingerprints.\n+         */\n+        private final String algorithm;\n+\n+        /**\n+         * A list of fingerprints.\n+         */\n+        private final List<String> fingerprints = new ArrayList<String>();\n+\n+        /**\n+         * Creates a builder.\n+         *\n+         * @param algorithm a hash algorithm\n+         */\n+        private Builder(String algorithm) {\n+            this.algorithm = ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n+        }\n+\n+        /**\n+         * Adds a fingerprint.\n+         *\n+         * @param fingerprint a fingerprint\n+         * @return the same builder\n+         */\n+        public Builder fingerprint(String fingerprint) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44e6f4c33cf9070b1ef5231c80dcfb760a83ab9e"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2MDEwNA==", "bodyText": "honestly this feels a bit like overkill.. Let's just keep it or use String...", "url": "https://github.com/netty/netty/pull/10683#discussion_r504560104", "createdAt": "2020-10-14T10:10:06Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -207,4 +252,50 @@ protected void engineInit(ManagerFactoryParameters managerFactoryParameters) thr\n     protected TrustManager[] engineGetTrustManagers() {\n         return new TrustManager[] { tm };\n     }\n+\n+    /**\n+     * A builder for creating {@link FingerprintTrustManagerFactory}.\n+     */\n+    public static final class Builder {\n+\n+        /**\n+         * A hash algorithm for fingerprints.\n+         */\n+        private final String algorithm;\n+\n+        /**\n+         * A list of fingerprints.\n+         */\n+        private final List<String> fingerprints = new ArrayList<String>();\n+\n+        /**\n+         * Creates a builder.\n+         *\n+         * @param algorithm a hash algorithm\n+         */\n+        private Builder(String algorithm) {\n+            this.algorithm = ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n+        }\n+\n+        /**\n+         * Adds a fingerprint.\n+         *\n+         * @param fingerprint a fingerprint\n+         * @return the same builder\n+         */\n+        public Builder fingerprint(String fingerprint) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzODY2OA=="}, "originalCommit": {"oid": "44e6f4c33cf9070b1ef5231c80dcfb760a83ab9e"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU2OTAwMw==", "bodyText": "Calling public Builder fingerprint(String fingerprint) every time is a little painful that's why we need something to add fingerprints in bulk. Both List and String... will do the job.", "url": "https://github.com/netty/netty/pull/10683#discussion_r504569003", "createdAt": "2020-10-14T10:26:04Z", "author": {"login": "hyperxpro"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -207,4 +252,50 @@ protected void engineInit(ManagerFactoryParameters managerFactoryParameters) thr\n     protected TrustManager[] engineGetTrustManagers() {\n         return new TrustManager[] { tm };\n     }\n+\n+    /**\n+     * A builder for creating {@link FingerprintTrustManagerFactory}.\n+     */\n+    public static final class Builder {\n+\n+        /**\n+         * A hash algorithm for fingerprints.\n+         */\n+        private final String algorithm;\n+\n+        /**\n+         * A list of fingerprints.\n+         */\n+        private final List<String> fingerprints = new ArrayList<String>();\n+\n+        /**\n+         * Creates a builder.\n+         *\n+         * @param algorithm a hash algorithm\n+         */\n+        private Builder(String algorithm) {\n+            this.algorithm = ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n+        }\n+\n+        /**\n+         * Adds a fingerprint.\n+         *\n+         * @param fingerprint a fingerprint\n+         * @return the same builder\n+         */\n+        public Builder fingerprint(String fingerprint) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzODY2OA=="}, "originalCommit": {"oid": "44e6f4c33cf9070b1ef5231c80dcfb760a83ab9e"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU3MTU0MA==", "bodyText": "I disagree... what is the point of a builder if you will never call its methods multiple times ?", "url": "https://github.com/netty/netty/pull/10683#discussion_r504571540", "createdAt": "2020-10-14T10:30:46Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -207,4 +252,50 @@ protected void engineInit(ManagerFactoryParameters managerFactoryParameters) thr\n     protected TrustManager[] engineGetTrustManagers() {\n         return new TrustManager[] { tm };\n     }\n+\n+    /**\n+     * A builder for creating {@link FingerprintTrustManagerFactory}.\n+     */\n+    public static final class Builder {\n+\n+        /**\n+         * A hash algorithm for fingerprints.\n+         */\n+        private final String algorithm;\n+\n+        /**\n+         * A list of fingerprints.\n+         */\n+        private final List<String> fingerprints = new ArrayList<String>();\n+\n+        /**\n+         * Creates a builder.\n+         *\n+         * @param algorithm a hash algorithm\n+         */\n+        private Builder(String algorithm) {\n+            this.algorithm = ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n+        }\n+\n+        /**\n+         * Adds a fingerprint.\n+         *\n+         * @param fingerprint a fingerprint\n+         * @return the same builder\n+         */\n+        public Builder fingerprint(String fingerprint) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzODY2OA=="}, "originalCommit": {"oid": "44e6f4c33cf9070b1ef5231c80dcfb760a83ab9e"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU3MjUxNg==", "bodyText": "That's a thing too.", "url": "https://github.com/netty/netty/pull/10683#discussion_r504572516", "createdAt": "2020-10-14T10:32:27Z", "author": {"login": "hyperxpro"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -207,4 +252,50 @@ protected void engineInit(ManagerFactoryParameters managerFactoryParameters) thr\n     protected TrustManager[] engineGetTrustManagers() {\n         return new TrustManager[] { tm };\n     }\n+\n+    /**\n+     * A builder for creating {@link FingerprintTrustManagerFactory}.\n+     */\n+    public static final class Builder {\n+\n+        /**\n+         * A hash algorithm for fingerprints.\n+         */\n+        private final String algorithm;\n+\n+        /**\n+         * A list of fingerprints.\n+         */\n+        private final List<String> fingerprints = new ArrayList<String>();\n+\n+        /**\n+         * Creates a builder.\n+         *\n+         * @param algorithm a hash algorithm\n+         */\n+        private Builder(String algorithm) {\n+            this.algorithm = ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n+        }\n+\n+        /**\n+         * Adds a fingerprint.\n+         *\n+         * @param fingerprint a fingerprint\n+         * @return the same builder\n+         */\n+        public Builder fingerprint(String fingerprint) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzODY2OA=="}, "originalCommit": {"oid": "44e6f4c33cf9070b1ef5231c80dcfb760a83ab9e"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM1NTQ3MA==", "bodyText": "I think both points are valid. The builder may be used in multiple ways. For example, someone may want to hardcode fingerprints like the following:\nFingerprintTrustManagerFactory f =\n  FingerprintTrustManagerFactory\n    .builder(\"SHA256\")\n    .fingerprint(\"deadbeef...\")\n    .fingerprint(\"cafecafe...\")\n    .build();\nBut someone may want to load fingerprints from a file. In this case, fingerprint() would need to be called in a loop:\nFingerprintTrustManagerFactory.Builder b = FingerprintTrustManagerFactory.builder(\"SHA256\");\nfor (String s : loadFingerprintsFrom(file)) {\n    b.fingerprint(s);\n}\nHere fingerprint(String...) might make it look a bit nicer:\nFingerprintTrustManagerFactory f =\n  FingerprintTrustManagerFactory\n    .builder(\"SHA256\")\n    .fingerprint(loadFingerprintsFrom(file))\n    .build();\nAnyway, I am fine to keep it as-is, or updating fingerprint() to accept String....", "url": "https://github.com/netty/netty/pull/10683#discussion_r505355470", "createdAt": "2020-10-15T08:45:45Z", "author": {"login": "artem-smotrakov"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -207,4 +252,50 @@ protected void engineInit(ManagerFactoryParameters managerFactoryParameters) thr\n     protected TrustManager[] engineGetTrustManagers() {\n         return new TrustManager[] { tm };\n     }\n+\n+    /**\n+     * A builder for creating {@link FingerprintTrustManagerFactory}.\n+     */\n+    public static final class Builder {\n+\n+        /**\n+         * A hash algorithm for fingerprints.\n+         */\n+        private final String algorithm;\n+\n+        /**\n+         * A list of fingerprints.\n+         */\n+        private final List<String> fingerprints = new ArrayList<String>();\n+\n+        /**\n+         * Creates a builder.\n+         *\n+         * @param algorithm a hash algorithm\n+         */\n+        private Builder(String algorithm) {\n+            this.algorithm = ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n+        }\n+\n+        /**\n+         * Adds a fingerprint.\n+         *\n+         * @param fingerprint a fingerprint\n+         * @return the same builder\n+         */\n+        public Builder fingerprint(String fingerprint) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzODY2OA=="}, "originalCommit": {"oid": "44e6f4c33cf9070b1ef5231c80dcfb760a83ab9e"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM1ODAxMg==", "bodyText": "I am ok with String... but then call it fingerprints(...)", "url": "https://github.com/netty/netty/pull/10683#discussion_r505358012", "createdAt": "2020-10-15T08:47:38Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -207,4 +252,50 @@ protected void engineInit(ManagerFactoryParameters managerFactoryParameters) thr\n     protected TrustManager[] engineGetTrustManagers() {\n         return new TrustManager[] { tm };\n     }\n+\n+    /**\n+     * A builder for creating {@link FingerprintTrustManagerFactory}.\n+     */\n+    public static final class Builder {\n+\n+        /**\n+         * A hash algorithm for fingerprints.\n+         */\n+        private final String algorithm;\n+\n+        /**\n+         * A list of fingerprints.\n+         */\n+        private final List<String> fingerprints = new ArrayList<String>();\n+\n+        /**\n+         * Creates a builder.\n+         *\n+         * @param algorithm a hash algorithm\n+         */\n+        private Builder(String algorithm) {\n+            this.algorithm = ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n+        }\n+\n+        /**\n+         * Adds a fingerprint.\n+         *\n+         * @param fingerprint a fingerprint\n+         * @return the same builder\n+         */\n+        public Builder fingerprint(String fingerprint) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDUzODY2OA=="}, "originalCommit": {"oid": "44e6f4c33cf9070b1ef5231c80dcfb760a83ab9e"}, "originalPosition": 222}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDUyNzIyOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDowNjoxOVrOHhLxOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDowNjoxOVrOHhLxOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1Nzg4MA==", "bodyText": "Also add @deprecated javadoc tag", "url": "https://github.com/netty/netty/pull/10683#discussion_r504557880", "createdAt": "2020-10-14T10:06:19Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -135,45 +131,97 @@ private void checkTrusted(String type, X509Certificate[] chain) throws Certifica\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(Iterable<String> fingerprints) {\n-        this(toFingerprintArray(fingerprints));\n+        this(\"SHA1\", toFingerprintArray(fingerprints));\n     }\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44e6f4c33cf9070b1ef5231c80dcfb760a83ab9e"}, "originalPosition": 100}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDUyODQ4OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDowNjo0MVrOHhLyAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDowNjo0MVrOHhLyAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1ODA4MA==", "bodyText": "also add @deprecated javadoc tag", "url": "https://github.com/netty/netty/pull/10683#discussion_r504558080", "createdAt": "2020-10-14T10:06:41Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -135,45 +131,97 @@ private void checkTrusted(String type, X509Certificate[] chain) throws Certifica\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(Iterable<String> fingerprints) {\n-        this(toFingerprintArray(fingerprints));\n+        this(\"SHA1\", toFingerprintArray(fingerprints));\n     }\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(String... fingerprints) {\n-        this(toFingerprintArray(Arrays.asList(fingerprints)));\n+        this(\"SHA1\", toFingerprintArray(Arrays.asList(fingerprints)));\n     }\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44e6f4c33cf9070b1ef5231c80dcfb760a83ab9e"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDUzMjAwOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDowNzozNlrOHhL0Lw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDowNzozNlrOHhL0Lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1ODYzOQ==", "bodyText": "should we call MessageDigest.getInstance(algorithm) once in the constructor now to ensure it will not fail later on ?", "url": "https://github.com/netty/netty/pull/10683#discussion_r504558639", "createdAt": "2020-10-14T10:07:36Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -135,45 +131,97 @@ private void checkTrusted(String type, X509Certificate[] chain) throws Certifica\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(Iterable<String> fingerprints) {\n-        this(toFingerprintArray(fingerprints));\n+        this(\"SHA1\", toFingerprintArray(fingerprints));\n     }\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(String... fingerprints) {\n-        this(toFingerprintArray(Arrays.asList(fingerprints)));\n+        this(\"SHA1\", toFingerprintArray(Arrays.asList(fingerprints)));\n     }\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(byte[]... fingerprints) {\n+        this(\"SHA1\", fingerprints);\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param algorithm a hash algorithm\n+     * @param fingerprints a list of fingerprints\n+     */\n+    private FingerprintTrustManagerFactory(final String algorithm, byte[][] fingerprints) {\n+        ObjectUtil.checkNotNull(algorithm, \"algorithm\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44e6f4c33cf9070b1ef5231c80dcfb760a83ab9e"}, "originalPosition": 130}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDUzNjk4OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDowOTowMFrOHhL3Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwOTo0NDo1OVrOHh_mjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1OTQzMA==", "bodyText": "see above... I think it is very unlikely that the \"constructing\" thread will use the factory itself. so I think it would be better to not waste resources in the FastThreadLocal  and construct it directly.", "url": "https://github.com/netty/netty/pull/10683#discussion_r504559430", "createdAt": "2020-10-14T10:09:00Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -135,45 +131,97 @@ private void checkTrusted(String type, X509Certificate[] chain) throws Certifica\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(Iterable<String> fingerprints) {\n-        this(toFingerprintArray(fingerprints));\n+        this(\"SHA1\", toFingerprintArray(fingerprints));\n     }\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(String... fingerprints) {\n-        this(toFingerprintArray(Arrays.asList(fingerprints)));\n+        this(\"SHA1\", toFingerprintArray(Arrays.asList(fingerprints)));\n     }\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(byte[]... fingerprints) {\n+        this(\"SHA1\", fingerprints);\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param algorithm a hash algorithm\n+     * @param fingerprints a list of fingerprints\n+     */\n+    private FingerprintTrustManagerFactory(final String algorithm, byte[][] fingerprints) {\n+        ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n         ObjectUtil.checkNotNull(fingerprints, \"fingerprints\");\n \n+        this.tlmd = new FastThreadLocal<MessageDigest>() {\n+\n+            @Override\n+            protected MessageDigest initialValue() {\n+                try {\n+                    return MessageDigest.getInstance(algorithm);\n+                } catch (NoSuchAlgorithmException e) {\n+                    throw new IllegalArgumentException(\"Unsupported hash algorithm\", e);\n+                }\n+            }\n+        };\n+\n+        int hashLength = tlmd.get().getDigestLength();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44e6f4c33cf9070b1ef5231c80dcfb760a83ab9e"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM4MDQ3OA==", "bodyText": "If I understand you correctly, you're suggesting getting rid of FastThreadLocal. I was not sure about it since I am new to the code. Okay, I can remove FastThreadLocal and create a MessageDigest directly in the constructor if it's fine.", "url": "https://github.com/netty/netty/pull/10683#discussion_r505380478", "createdAt": "2020-10-15T09:09:37Z", "author": {"login": "artem-smotrakov"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -135,45 +131,97 @@ private void checkTrusted(String type, X509Certificate[] chain) throws Certifica\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(Iterable<String> fingerprints) {\n-        this(toFingerprintArray(fingerprints));\n+        this(\"SHA1\", toFingerprintArray(fingerprints));\n     }\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(String... fingerprints) {\n-        this(toFingerprintArray(Arrays.asList(fingerprints)));\n+        this(\"SHA1\", toFingerprintArray(Arrays.asList(fingerprints)));\n     }\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(byte[]... fingerprints) {\n+        this(\"SHA1\", fingerprints);\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param algorithm a hash algorithm\n+     * @param fingerprints a list of fingerprints\n+     */\n+    private FingerprintTrustManagerFactory(final String algorithm, byte[][] fingerprints) {\n+        ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n         ObjectUtil.checkNotNull(fingerprints, \"fingerprints\");\n \n+        this.tlmd = new FastThreadLocal<MessageDigest>() {\n+\n+            @Override\n+            protected MessageDigest initialValue() {\n+                try {\n+                    return MessageDigest.getInstance(algorithm);\n+                } catch (NoSuchAlgorithmException e) {\n+                    throw new IllegalArgumentException(\"Unsupported hash algorithm\", e);\n+                }\n+            }\n+        };\n+\n+        int hashLength = tlmd.get().getDigestLength();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1OTQzMA=="}, "originalCommit": {"oid": "44e6f4c33cf9070b1ef5231c80dcfb760a83ab9e"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM4OTgwNA==", "bodyText": "no ... What I was saying that you should keep the FastThreadLocal but not access it in the constructor but better just create a new instance in the constructor and use it here.", "url": "https://github.com/netty/netty/pull/10683#discussion_r505389804", "createdAt": "2020-10-15T09:21:57Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -135,45 +131,97 @@ private void checkTrusted(String type, X509Certificate[] chain) throws Certifica\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(Iterable<String> fingerprints) {\n-        this(toFingerprintArray(fingerprints));\n+        this(\"SHA1\", toFingerprintArray(fingerprints));\n     }\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(String... fingerprints) {\n-        this(toFingerprintArray(Arrays.asList(fingerprints)));\n+        this(\"SHA1\", toFingerprintArray(Arrays.asList(fingerprints)));\n     }\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(byte[]... fingerprints) {\n+        this(\"SHA1\", fingerprints);\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param algorithm a hash algorithm\n+     * @param fingerprints a list of fingerprints\n+     */\n+    private FingerprintTrustManagerFactory(final String algorithm, byte[][] fingerprints) {\n+        ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n         ObjectUtil.checkNotNull(fingerprints, \"fingerprints\");\n \n+        this.tlmd = new FastThreadLocal<MessageDigest>() {\n+\n+            @Override\n+            protected MessageDigest initialValue() {\n+                try {\n+                    return MessageDigest.getInstance(algorithm);\n+                } catch (NoSuchAlgorithmException e) {\n+                    throw new IllegalArgumentException(\"Unsupported hash algorithm\", e);\n+                }\n+            }\n+        };\n+\n+        int hashLength = tlmd.get().getDigestLength();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1OTQzMA=="}, "originalCommit": {"oid": "44e6f4c33cf9070b1ef5231c80dcfb760a83ab9e"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQwNzExNg==", "bodyText": "Okay, sure I can create a MessageDigest in the constructor as an early-check that the algorithm exists. The initialization of FastThreadLocal would still stay in the constructor since it now requires an algorithm identifier.", "url": "https://github.com/netty/netty/pull/10683#discussion_r505407116", "createdAt": "2020-10-15T09:44:59Z", "author": {"login": "artem-smotrakov"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -135,45 +131,97 @@ private void checkTrusted(String type, X509Certificate[] chain) throws Certifica\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(Iterable<String> fingerprints) {\n-        this(toFingerprintArray(fingerprints));\n+        this(\"SHA1\", toFingerprintArray(fingerprints));\n     }\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(String... fingerprints) {\n-        this(toFingerprintArray(Arrays.asList(fingerprints)));\n+        this(\"SHA1\", toFingerprintArray(Arrays.asList(fingerprints)));\n     }\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(byte[]... fingerprints) {\n+        this(\"SHA1\", fingerprints);\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param algorithm a hash algorithm\n+     * @param fingerprints a list of fingerprints\n+     */\n+    private FingerprintTrustManagerFactory(final String algorithm, byte[][] fingerprints) {\n+        ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n         ObjectUtil.checkNotNull(fingerprints, \"fingerprints\");\n \n+        this.tlmd = new FastThreadLocal<MessageDigest>() {\n+\n+            @Override\n+            protected MessageDigest initialValue() {\n+                try {\n+                    return MessageDigest.getInstance(algorithm);\n+                } catch (NoSuchAlgorithmException e) {\n+                    throw new IllegalArgumentException(\"Unsupported hash algorithm\", e);\n+                }\n+            }\n+        };\n+\n+        int hashLength = tlmd.get().getDigestLength();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1OTQzMA=="}, "originalCommit": {"oid": "44e6f4c33cf9070b1ef5231c80dcfb760a83ab9e"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2MDUzODE0OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNFQxMDowOToxOVrOHhL4CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQwOToyMToxM1rOHh-g5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1OTYyNA==", "bodyText": "EmptyArrays.BYTES", "url": "https://github.com/netty/netty/pull/10683#discussion_r504559624", "createdAt": "2020-10-14T10:09:19Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -135,45 +131,97 @@ private void checkTrusted(String type, X509Certificate[] chain) throws Certifica\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(Iterable<String> fingerprints) {\n-        this(toFingerprintArray(fingerprints));\n+        this(\"SHA1\", toFingerprintArray(fingerprints));\n     }\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(String... fingerprints) {\n-        this(toFingerprintArray(Arrays.asList(fingerprints)));\n+        this(\"SHA1\", toFingerprintArray(Arrays.asList(fingerprints)));\n     }\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(byte[]... fingerprints) {\n+        this(\"SHA1\", fingerprints);\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param algorithm a hash algorithm\n+     * @param fingerprints a list of fingerprints\n+     */\n+    private FingerprintTrustManagerFactory(final String algorithm, byte[][] fingerprints) {\n+        ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n         ObjectUtil.checkNotNull(fingerprints, \"fingerprints\");\n \n+        this.tlmd = new FastThreadLocal<MessageDigest>() {\n+\n+            @Override\n+            protected MessageDigest initialValue() {\n+                try {\n+                    return MessageDigest.getInstance(algorithm);\n+                } catch (NoSuchAlgorithmException e) {\n+                    throw new IllegalArgumentException(\"Unsupported hash algorithm\", e);\n+                }\n+            }\n+        };\n+\n+        int hashLength = tlmd.get().getDigestLength();\n         List<byte[]> list = new ArrayList<byte[]>(fingerprints.length);\n         for (byte[] f: fingerprints) {\n             if (f == null) {\n                 break;\n             }\n-            if (f.length != SHA1_BYTE_LEN) {\n-                throw new IllegalArgumentException(\"malformed fingerprint: \" +\n-                        ByteBufUtil.hexDump(Unpooled.wrappedBuffer(f)) + \" (expected: SHA1)\");\n+            if (f.length != hashLength) {\n+                throw new IllegalArgumentException(\n+                        \"malformed fingerprint (length): \" + ByteBufUtil.hexDump(Unpooled.wrappedBuffer(f)));\n             }\n             list.add(f.clone());\n         }\n \n         this.fingerprints = list.toArray(new byte[0][]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "44e6f4c33cf9070b1ef5231c80dcfb760a83ab9e"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM4NjU1NA==", "bodyText": "If I am not missing something, that could not be used here because EmptyArrays.EMPTY_BYTES is byte[].\n\n  \n    \n      netty/common/src/main/java/io/netty/util/internal/EmptyArrays.java\n    \n    \n         Line 28\n      in\n      00afb19\n    \n    \n    \n    \n\n        \n          \n           public static final byte[] EMPTY_BYTES = {};", "url": "https://github.com/netty/netty/pull/10683#discussion_r505386554", "createdAt": "2020-10-15T09:17:24Z", "author": {"login": "artem-smotrakov"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -135,45 +131,97 @@ private void checkTrusted(String type, X509Certificate[] chain) throws Certifica\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(Iterable<String> fingerprints) {\n-        this(toFingerprintArray(fingerprints));\n+        this(\"SHA1\", toFingerprintArray(fingerprints));\n     }\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(String... fingerprints) {\n-        this(toFingerprintArray(Arrays.asList(fingerprints)));\n+        this(\"SHA1\", toFingerprintArray(Arrays.asList(fingerprints)));\n     }\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(byte[]... fingerprints) {\n+        this(\"SHA1\", fingerprints);\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param algorithm a hash algorithm\n+     * @param fingerprints a list of fingerprints\n+     */\n+    private FingerprintTrustManagerFactory(final String algorithm, byte[][] fingerprints) {\n+        ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n         ObjectUtil.checkNotNull(fingerprints, \"fingerprints\");\n \n+        this.tlmd = new FastThreadLocal<MessageDigest>() {\n+\n+            @Override\n+            protected MessageDigest initialValue() {\n+                try {\n+                    return MessageDigest.getInstance(algorithm);\n+                } catch (NoSuchAlgorithmException e) {\n+                    throw new IllegalArgumentException(\"Unsupported hash algorithm\", e);\n+                }\n+            }\n+        };\n+\n+        int hashLength = tlmd.get().getDigestLength();\n         List<byte[]> list = new ArrayList<byte[]>(fingerprints.length);\n         for (byte[] f: fingerprints) {\n             if (f == null) {\n                 break;\n             }\n-            if (f.length != SHA1_BYTE_LEN) {\n-                throw new IllegalArgumentException(\"malformed fingerprint: \" +\n-                        ByteBufUtil.hexDump(Unpooled.wrappedBuffer(f)) + \" (expected: SHA1)\");\n+            if (f.length != hashLength) {\n+                throw new IllegalArgumentException(\n+                        \"malformed fingerprint (length): \" + ByteBufUtil.hexDump(Unpooled.wrappedBuffer(f)));\n             }\n             list.add(f.clone());\n         }\n \n         this.fingerprints = list.toArray(new byte[0][]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1OTYyNA=="}, "originalCommit": {"oid": "44e6f4c33cf9070b1ef5231c80dcfb760a83ab9e"}, "originalPosition": 161}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTM4OTI4Nw==", "bodyText": "ah sorry I missed that it is [][]", "url": "https://github.com/netty/netty/pull/10683#discussion_r505389287", "createdAt": "2020-10-15T09:21:13Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -135,45 +131,97 @@ private void checkTrusted(String type, X509Certificate[] chain) throws Certifica\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(Iterable<String> fingerprints) {\n-        this(toFingerprintArray(fingerprints));\n+        this(\"SHA1\", toFingerprintArray(fingerprints));\n     }\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(String... fingerprints) {\n-        this(toFingerprintArray(Arrays.asList(fingerprints)));\n+        this(\"SHA1\", toFingerprintArray(Arrays.asList(fingerprints)));\n     }\n \n     /**\n      * Creates a new instance.\n+     * <p>\n+     * <strong>NOTE:</strong> This deprecated constructor uses SHA-1 that is considered insecure.\n+     * It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     * by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     * </p>\n      *\n      * @param fingerprints a list of SHA1 fingerprints\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(byte[]... fingerprints) {\n+        this(\"SHA1\", fingerprints);\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param algorithm a hash algorithm\n+     * @param fingerprints a list of fingerprints\n+     */\n+    private FingerprintTrustManagerFactory(final String algorithm, byte[][] fingerprints) {\n+        ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n         ObjectUtil.checkNotNull(fingerprints, \"fingerprints\");\n \n+        this.tlmd = new FastThreadLocal<MessageDigest>() {\n+\n+            @Override\n+            protected MessageDigest initialValue() {\n+                try {\n+                    return MessageDigest.getInstance(algorithm);\n+                } catch (NoSuchAlgorithmException e) {\n+                    throw new IllegalArgumentException(\"Unsupported hash algorithm\", e);\n+                }\n+            }\n+        };\n+\n+        int hashLength = tlmd.get().getDigestLength();\n         List<byte[]> list = new ArrayList<byte[]>(fingerprints.length);\n         for (byte[] f: fingerprints) {\n             if (f == null) {\n                 break;\n             }\n-            if (f.length != SHA1_BYTE_LEN) {\n-                throw new IllegalArgumentException(\"malformed fingerprint: \" +\n-                        ByteBufUtil.hexDump(Unpooled.wrappedBuffer(f)) + \" (expected: SHA1)\");\n+            if (f.length != hashLength) {\n+                throw new IllegalArgumentException(\n+                        \"malformed fingerprint (length): \" + ByteBufUtil.hexDump(Unpooled.wrappedBuffer(f)));\n             }\n             list.add(f.clone());\n         }\n \n         this.fingerprints = list.toArray(new byte[0][]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNDU1OTYyNA=="}, "originalCommit": {"oid": "44e6f4c33cf9070b1ef5231c80dcfb760a83ab9e"}, "originalPosition": 161}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjI5MzM5OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMjowNDoyM1rOHiEbMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMjoyMToxMVrOHiFBXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ4NjEzMA==", "bodyText": "nit: include algorithm in the message as well.", "url": "https://github.com/netty/netty/pull/10683#discussion_r505486130", "createdAt": "2020-10-15T12:04:23Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -136,44 +132,89 @@ private void checkTrusted(String type, X509Certificate[] chain) throws Certifica\n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(Iterable<String> fingerprints) {\n-        this(toFingerprintArray(fingerprints));\n+        this(\"SHA1\", toFingerprintArray(fingerprints));\n     }\n \n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(String... fingerprints) {\n-        this(toFingerprintArray(Arrays.asList(fingerprints)));\n+        this(\"SHA1\", toFingerprintArray(Arrays.asList(fingerprints)));\n     }\n \n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(byte[]... fingerprints) {\n+        this(\"SHA1\", fingerprints);\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param algorithm a hash algorithm\n+     * @param fingerprints a list of fingerprints\n+     */\n+    private FingerprintTrustManagerFactory(final String algorithm, byte[][] fingerprints) {\n+        ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n         ObjectUtil.checkNotNull(fingerprints, \"fingerprints\");\n \n+        MessageDigest md;\n+        try {\n+            md = MessageDigest.getInstance(algorithm);\n+        } catch (NoSuchAlgorithmException e) {\n+            throw new IllegalArgumentException(\"Unsupported hash algorithm\", e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "869ccd8ee9ce33378f49837c1d6389cd532263d0"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ5NTkwMw==", "bodyText": "The wrapped exception usually mention the algorithm but nevertheless let's include it to the top message as well.", "url": "https://github.com/netty/netty/pull/10683#discussion_r505495903", "createdAt": "2020-10-15T12:21:11Z", "author": {"login": "artem-smotrakov"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -136,44 +132,89 @@ private void checkTrusted(String type, X509Certificate[] chain) throws Certifica\n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(Iterable<String> fingerprints) {\n-        this(toFingerprintArray(fingerprints));\n+        this(\"SHA1\", toFingerprintArray(fingerprints));\n     }\n \n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(String... fingerprints) {\n-        this(toFingerprintArray(Arrays.asList(fingerprints)));\n+        this(\"SHA1\", toFingerprintArray(Arrays.asList(fingerprints)));\n     }\n \n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(byte[]... fingerprints) {\n+        this(\"SHA1\", fingerprints);\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param algorithm a hash algorithm\n+     * @param fingerprints a list of fingerprints\n+     */\n+    private FingerprintTrustManagerFactory(final String algorithm, byte[][] fingerprints) {\n+        ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n         ObjectUtil.checkNotNull(fingerprints, \"fingerprints\");\n \n+        MessageDigest md;\n+        try {\n+            md = MessageDigest.getInstance(algorithm);\n+        } catch (NoSuchAlgorithmException e) {\n+            throw new IllegalArgumentException(\"Unsupported hash algorithm\", e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ4NjEzMA=="}, "originalCommit": {"oid": "869ccd8ee9ce33378f49837c1d6389cd532263d0"}, "originalPosition": 133}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE2NjMwMDE2OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMjowNjoxMlrOHiEfRg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNVQxMjowNjoxMlrOHiEfRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNTQ4NzE3NA==", "bodyText": "nit: include the actual length and the expected length in the message as well", "url": "https://github.com/netty/netty/pull/10683#discussion_r505487174", "createdAt": "2020-10-15T12:06:12Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -136,44 +132,89 @@ private void checkTrusted(String type, X509Certificate[] chain) throws Certifica\n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(Iterable<String> fingerprints) {\n-        this(toFingerprintArray(fingerprints));\n+        this(\"SHA1\", toFingerprintArray(fingerprints));\n     }\n \n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(String... fingerprints) {\n-        this(toFingerprintArray(Arrays.asList(fingerprints)));\n+        this(\"SHA1\", toFingerprintArray(Arrays.asList(fingerprints)));\n     }\n \n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(byte[]... fingerprints) {\n+        this(\"SHA1\", fingerprints);\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param algorithm a hash algorithm\n+     * @param fingerprints a list of fingerprints\n+     */\n+    private FingerprintTrustManagerFactory(final String algorithm, byte[][] fingerprints) {\n+        ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n         ObjectUtil.checkNotNull(fingerprints, \"fingerprints\");\n \n+        MessageDigest md;\n+        try {\n+            md = MessageDigest.getInstance(algorithm);\n+        } catch (NoSuchAlgorithmException e) {\n+            throw new IllegalArgumentException(\"Unsupported hash algorithm\", e);\n+        }\n+\n+        int hashLength = md.getDigestLength();\n         List<byte[]> list = new ArrayList<byte[]>(fingerprints.length);\n         for (byte[] f: fingerprints) {\n             if (f == null) {\n                 break;\n             }\n-            if (f.length != SHA1_BYTE_LEN) {\n-                throw new IllegalArgumentException(\"malformed fingerprint: \" +\n-                        ByteBufUtil.hexDump(Unpooled.wrappedBuffer(f)) + \" (expected: SHA1)\");\n+            if (f.length != hashLength) {\n+                throw new IllegalArgumentException(\n+                        \"malformed fingerprint (length): \" + ByteBufUtil.hexDump(Unpooled.wrappedBuffer(f)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "869ccd8ee9ce33378f49837c1d6389cd532263d0"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MDM4Njg2OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNzo1Nzo1M1rOHishEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNzo1Nzo1M1rOHishEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE0Mjk5NA==", "bodyText": "How about moving this method before the member fields in this class? i.e.\nclass MyClass {\n\n    private static final ...;\n\n    public static Builder builder() { ... }\n\n    private final ...;\n\n    public MyClass() { ... }\n}", "url": "https://github.com/netty/netty/pull/10683#discussion_r506142994", "createdAt": "2020-10-16T07:57:53Z", "author": {"login": "trustin"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -136,44 +132,91 @@ private void checkTrusted(String type, X509Certificate[] chain) throws Certifica\n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(Iterable<String> fingerprints) {\n-        this(toFingerprintArray(fingerprints));\n+        this(\"SHA1\", toFingerprintArray(fingerprints));\n     }\n \n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(String... fingerprints) {\n-        this(toFingerprintArray(Arrays.asList(fingerprints)));\n+        this(\"SHA1\", toFingerprintArray(Arrays.asList(fingerprints)));\n     }\n \n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(byte[]... fingerprints) {\n+        this(\"SHA1\", fingerprints);\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param algorithm a hash algorithm\n+     * @param fingerprints a list of fingerprints\n+     */\n+    private FingerprintTrustManagerFactory(final String algorithm, byte[][] fingerprints) {\n+        ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n         ObjectUtil.checkNotNull(fingerprints, \"fingerprints\");\n \n+        MessageDigest md;\n+        try {\n+            md = MessageDigest.getInstance(algorithm);\n+        } catch (NoSuchAlgorithmException e) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Unsupported hash algorithm: %s\", algorithm), e);\n+        }\n+\n+        int hashLength = md.getDigestLength();\n         List<byte[]> list = new ArrayList<byte[]>(fingerprints.length);\n         for (byte[] f: fingerprints) {\n             if (f == null) {\n                 break;\n             }\n-            if (f.length != SHA1_BYTE_LEN) {\n-                throw new IllegalArgumentException(\"malformed fingerprint: \" +\n-                        ByteBufUtil.hexDump(Unpooled.wrappedBuffer(f)) + \" (expected: SHA1)\");\n+            if (f.length != hashLength) {\n+                throw new IllegalArgumentException(\n+                        String.format(\"malformed fingerprint (length is %d but expected %d): %s\",\n+                                      f.length, hashLength, ByteBufUtil.hexDump(Unpooled.wrappedBuffer(f))));\n             }\n             list.add(f.clone());\n         }\n \n+        this.tlmd.set(md);\n         this.fingerprints = list.toArray(new byte[0][]);\n     }\n \n+    /**\n+     * Creates a builder for {@link FingerprintTrustManagerFactory}.\n+     *\n+     * @param algorithm a hash algorithm\n+     * @return a builder\n+     */\n+    public static Builder builder(String algorithm) {\n+       return new Builder(algorithm);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187a6d43f881df5cb0ecbf157dfd808208824649"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MDM4OTM4OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNzo1ODoyNVrOHisiyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNzo1ODoyNVrOHisiyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE0MzQzNA==", "bodyText": "I'd prefer having this in a top-level class as FingerprintTrustManagerFactoryBuilder.", "url": "https://github.com/netty/netty/pull/10683#discussion_r506143434", "createdAt": "2020-10-16T07:58:25Z", "author": {"login": "trustin"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -207,4 +247,52 @@ protected void engineInit(ManagerFactoryParameters managerFactoryParameters) thr\n     protected TrustManager[] engineGetTrustManagers() {\n         return new TrustManager[] { tm };\n     }\n+\n+    /**\n+     * A builder for creating {@link FingerprintTrustManagerFactory}.\n+     */\n+    public static final class Builder {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187a6d43f881df5cb0ecbf157dfd808208824649"}, "originalPosition": 189}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MDM5MzQxOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwNzo1OToyNFrOHislqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxNjo0NzozNVrOHjIRLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE0NDE3MA==", "bodyText": "How about accepting CharSequence... and then converting it to a String?\nCould we also add the version that accepts Iterable<? extends CharSequence>?", "url": "https://github.com/netty/netty/pull/10683#discussion_r506144170", "createdAt": "2020-10-16T07:59:24Z", "author": {"login": "trustin"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -207,4 +247,52 @@ protected void engineInit(ManagerFactoryParameters managerFactoryParameters) thr\n     protected TrustManager[] engineGetTrustManagers() {\n         return new TrustManager[] { tm };\n     }\n+\n+    /**\n+     * A builder for creating {@link FingerprintTrustManagerFactory}.\n+     */\n+    public static final class Builder {\n+\n+        /**\n+         * A hash algorithm for fingerprints.\n+         */\n+        private final String algorithm;\n+\n+        /**\n+         * A list of fingerprints.\n+         */\n+        private final List<String> fingerprints = new ArrayList<String>();\n+\n+        /**\n+         * Creates a builder.\n+         *\n+         * @param algorithm a hash algorithm\n+         */\n+        private Builder(String algorithm) {\n+            this.algorithm = ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n+        }\n+\n+        /**\n+         * Adds fingerprints.\n+         *\n+         * @param fingerprints a number of fingerprints\n+         * @return the same builder\n+         */\n+        public Builder fingerprints(String... fingerprints) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187a6d43f881df5cb0ecbf157dfd808208824649"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM2ODgyMg==", "bodyText": "How about accepting CharSequence... and then converting it to a String?\n\n\nLet me try.\n\n\nCould we also add the version that accepts Iterable<? extends CharSequence>?\n\n\nWe've discussed adding fingerprings(List) but decided not to do that\n#10683 (comment)\nI am fine with adding fingerprints(Iterable<? extends CharSequence>) as long as other are fine.", "url": "https://github.com/netty/netty/pull/10683#discussion_r506368822", "createdAt": "2020-10-16T12:36:08Z", "author": {"login": "artem-smotrakov"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -207,4 +247,52 @@ protected void engineInit(ManagerFactoryParameters managerFactoryParameters) thr\n     protected TrustManager[] engineGetTrustManagers() {\n         return new TrustManager[] { tm };\n     }\n+\n+    /**\n+     * A builder for creating {@link FingerprintTrustManagerFactory}.\n+     */\n+    public static final class Builder {\n+\n+        /**\n+         * A hash algorithm for fingerprints.\n+         */\n+        private final String algorithm;\n+\n+        /**\n+         * A list of fingerprints.\n+         */\n+        private final List<String> fingerprints = new ArrayList<String>();\n+\n+        /**\n+         * Creates a builder.\n+         *\n+         * @param algorithm a hash algorithm\n+         */\n+        private Builder(String algorithm) {\n+            this.algorithm = ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n+        }\n+\n+        /**\n+         * Adds fingerprints.\n+         *\n+         * @param fingerprints a number of fingerprints\n+         * @return the same builder\n+         */\n+        public Builder fingerprints(String... fingerprints) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE0NDE3MA=="}, "originalCommit": {"oid": "187a6d43f881df5cb0ecbf157dfd808208824649"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU4MDAyNg==", "bodyText": "I think it was more about fingerprint(String) and fingerprints(String...). We do need fingerprints(Iterable<? extends CharSequence>) for the users who want to feed the fingerprints from a collection.", "url": "https://github.com/netty/netty/pull/10683#discussion_r506580026", "createdAt": "2020-10-16T16:15:39Z", "author": {"login": "trustin"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -207,4 +247,52 @@ protected void engineInit(ManagerFactoryParameters managerFactoryParameters) thr\n     protected TrustManager[] engineGetTrustManagers() {\n         return new TrustManager[] { tm };\n     }\n+\n+    /**\n+     * A builder for creating {@link FingerprintTrustManagerFactory}.\n+     */\n+    public static final class Builder {\n+\n+        /**\n+         * A hash algorithm for fingerprints.\n+         */\n+        private final String algorithm;\n+\n+        /**\n+         * A list of fingerprints.\n+         */\n+        private final List<String> fingerprints = new ArrayList<String>();\n+\n+        /**\n+         * Creates a builder.\n+         *\n+         * @param algorithm a hash algorithm\n+         */\n+        private Builder(String algorithm) {\n+            this.algorithm = ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n+        }\n+\n+        /**\n+         * Adds fingerprints.\n+         *\n+         * @param fingerprints a number of fingerprints\n+         * @return the same builder\n+         */\n+        public Builder fingerprints(String... fingerprints) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE0NDE3MA=="}, "originalCommit": {"oid": "187a6d43f881df5cb0ecbf157dfd808208824649"}, "originalPosition": 216}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjU5NzY3Nw==", "bodyText": "Sure, no problem. I've added fingerprints(Iterable<? extends CharSequence>).", "url": "https://github.com/netty/netty/pull/10683#discussion_r506597677", "createdAt": "2020-10-16T16:47:35Z", "author": {"login": "artem-smotrakov"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -207,4 +247,52 @@ protected void engineInit(ManagerFactoryParameters managerFactoryParameters) thr\n     protected TrustManager[] engineGetTrustManagers() {\n         return new TrustManager[] { tm };\n     }\n+\n+    /**\n+     * A builder for creating {@link FingerprintTrustManagerFactory}.\n+     */\n+    public static final class Builder {\n+\n+        /**\n+         * A hash algorithm for fingerprints.\n+         */\n+        private final String algorithm;\n+\n+        /**\n+         * A list of fingerprints.\n+         */\n+        private final List<String> fingerprints = new ArrayList<String>();\n+\n+        /**\n+         * Creates a builder.\n+         *\n+         * @param algorithm a hash algorithm\n+         */\n+        private Builder(String algorithm) {\n+            this.algorithm = ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n+        }\n+\n+        /**\n+         * Adds fingerprints.\n+         *\n+         * @param fingerprints a number of fingerprints\n+         * @return the same builder\n+         */\n+        public Builder fingerprints(String... fingerprints) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE0NDE3MA=="}, "originalCommit": {"oid": "187a6d43f881df5cb0ecbf157dfd808208824649"}, "originalPosition": 216}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MDM5ODc4OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwODowMDoyM1rOHispKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzoxMTo0MFrOHi8K5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE0NTA2NA==", "bodyText": "What would be the expected behavior when fingerprints is empty? Throwing an IllegalStateException in build()?", "url": "https://github.com/netty/netty/pull/10683#discussion_r506145064", "createdAt": "2020-10-16T08:00:23Z", "author": {"login": "trustin"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -207,4 +247,52 @@ protected void engineInit(ManagerFactoryParameters managerFactoryParameters) thr\n     protected TrustManager[] engineGetTrustManagers() {\n         return new TrustManager[] { tm };\n     }\n+\n+    /**\n+     * A builder for creating {@link FingerprintTrustManagerFactory}.\n+     */\n+    public static final class Builder {\n+\n+        /**\n+         * A hash algorithm for fingerprints.\n+         */\n+        private final String algorithm;\n+\n+        /**\n+         * A list of fingerprints.\n+         */\n+        private final List<String> fingerprints = new ArrayList<String>();\n+\n+        /**\n+         * Creates a builder.\n+         *\n+         * @param algorithm a hash algorithm\n+         */\n+        private Builder(String algorithm) {\n+            this.algorithm = ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n+        }\n+\n+        /**\n+         * Adds fingerprints.\n+         *\n+         * @param fingerprints a number of fingerprints\n+         * @return the same builder\n+         */\n+        public Builder fingerprints(String... fingerprints) {\n+            ObjectUtil.checkNotNull(fingerprints, \"fingerprints\");\n+            for (String fingerprint : fingerprints) {\n+                this.fingerprints.add(fingerprint);\n+            }\n+            return this;\n+        }\n+\n+        /**\n+         * Creates a {@link FingerprintTrustManagerFactory}.\n+         *\n+         * @return a new {@link FingerprintTrustManagerFactory}\n+         */\n+        public FingerprintTrustManagerFactory build() {\n+            return new FingerprintTrustManagerFactory(this.algorithm, toFingerprintArray(this.fingerprints));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187a6d43f881df5cb0ecbf157dfd808208824649"}, "originalPosition": 230}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM5OTQ2Mg==", "bodyText": "Currently, no fingerprints are allowed. That would mean that no certificate is going to be trusted. In theory, it's okay but it looks unlikely that an application may want to use such a paranoid TrustManager. Therefore, I think it would be fine to throw an exception if no fingerprints are provided. I'd put this check in to a constructor since all the checks are currently done there, and FingerprintTrustManagerFactory may be still created by calling the deprecated constructors.", "url": "https://github.com/netty/netty/pull/10683#discussion_r506399462", "createdAt": "2020-10-16T13:11:40Z", "author": {"login": "artem-smotrakov"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -207,4 +247,52 @@ protected void engineInit(ManagerFactoryParameters managerFactoryParameters) thr\n     protected TrustManager[] engineGetTrustManagers() {\n         return new TrustManager[] { tm };\n     }\n+\n+    /**\n+     * A builder for creating {@link FingerprintTrustManagerFactory}.\n+     */\n+    public static final class Builder {\n+\n+        /**\n+         * A hash algorithm for fingerprints.\n+         */\n+        private final String algorithm;\n+\n+        /**\n+         * A list of fingerprints.\n+         */\n+        private final List<String> fingerprints = new ArrayList<String>();\n+\n+        /**\n+         * Creates a builder.\n+         *\n+         * @param algorithm a hash algorithm\n+         */\n+        private Builder(String algorithm) {\n+            this.algorithm = ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n+        }\n+\n+        /**\n+         * Adds fingerprints.\n+         *\n+         * @param fingerprints a number of fingerprints\n+         * @return the same builder\n+         */\n+        public Builder fingerprints(String... fingerprints) {\n+            ObjectUtil.checkNotNull(fingerprints, \"fingerprints\");\n+            for (String fingerprint : fingerprints) {\n+                this.fingerprints.add(fingerprint);\n+            }\n+            return this;\n+        }\n+\n+        /**\n+         * Creates a {@link FingerprintTrustManagerFactory}.\n+         *\n+         * @return a new {@link FingerprintTrustManagerFactory}\n+         */\n+        public FingerprintTrustManagerFactory build() {\n+            return new FingerprintTrustManagerFactory(this.algorithm, toFingerprintArray(this.fingerprints));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjE0NTA2NA=="}, "originalCommit": {"oid": "187a6d43f881df5cb0ecbf157dfd808208824649"}, "originalPosition": 230}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MDc2OTg3OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOToxNDoyNVrOHiwZ3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMjozMDoxNVrOHi6DLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIwNjY4NA==", "bodyText": "The way this works means the FingerprintTrustManagerFactory cannot be shared between multiple threads, because only the constructing thread has initialised their thread-local, and there's not enough information in the factory instance for other threads to initialise their thread-locals as well.", "url": "https://github.com/netty/netty/pull/10683#discussion_r506206684", "createdAt": "2020-10-16T09:14:25Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -136,44 +132,91 @@ private void checkTrusted(String type, X509Certificate[] chain) throws Certifica\n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(Iterable<String> fingerprints) {\n-        this(toFingerprintArray(fingerprints));\n+        this(\"SHA1\", toFingerprintArray(fingerprints));\n     }\n \n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(String... fingerprints) {\n-        this(toFingerprintArray(Arrays.asList(fingerprints)));\n+        this(\"SHA1\", toFingerprintArray(Arrays.asList(fingerprints)));\n     }\n \n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(byte[]... fingerprints) {\n+        this(\"SHA1\", fingerprints);\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param algorithm a hash algorithm\n+     * @param fingerprints a list of fingerprints\n+     */\n+    private FingerprintTrustManagerFactory(final String algorithm, byte[][] fingerprints) {\n+        ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n         ObjectUtil.checkNotNull(fingerprints, \"fingerprints\");\n \n+        MessageDigest md;\n+        try {\n+            md = MessageDigest.getInstance(algorithm);\n+        } catch (NoSuchAlgorithmException e) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Unsupported hash algorithm: %s\", algorithm), e);\n+        }\n+\n+        int hashLength = md.getDigestLength();\n         List<byte[]> list = new ArrayList<byte[]>(fingerprints.length);\n         for (byte[] f: fingerprints) {\n             if (f == null) {\n                 break;\n             }\n-            if (f.length != SHA1_BYTE_LEN) {\n-                throw new IllegalArgumentException(\"malformed fingerprint: \" +\n-                        ByteBufUtil.hexDump(Unpooled.wrappedBuffer(f)) + \" (expected: SHA1)\");\n+            if (f.length != hashLength) {\n+                throw new IllegalArgumentException(\n+                        String.format(\"malformed fingerprint (length is %d but expected %d): %s\",\n+                                      f.length, hashLength, ByteBufUtil.hexDump(Unpooled.wrappedBuffer(f))));\n             }\n             list.add(f.clone());\n         }\n \n+        this.tlmd.set(md);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187a6d43f881df5cb0ecbf157dfd808208824649"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIyMDI4MQ==", "bodyText": "@chrisvest huh... can you explain to me why is this ?", "url": "https://github.com/netty/netty/pull/10683#discussion_r506220281", "createdAt": "2020-10-16T09:33:51Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -136,44 +132,91 @@ private void checkTrusted(String type, X509Certificate[] chain) throws Certifica\n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(Iterable<String> fingerprints) {\n-        this(toFingerprintArray(fingerprints));\n+        this(\"SHA1\", toFingerprintArray(fingerprints));\n     }\n \n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(String... fingerprints) {\n-        this(toFingerprintArray(Arrays.asList(fingerprints)));\n+        this(\"SHA1\", toFingerprintArray(Arrays.asList(fingerprints)));\n     }\n \n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(byte[]... fingerprints) {\n+        this(\"SHA1\", fingerprints);\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param algorithm a hash algorithm\n+     * @param fingerprints a list of fingerprints\n+     */\n+    private FingerprintTrustManagerFactory(final String algorithm, byte[][] fingerprints) {\n+        ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n         ObjectUtil.checkNotNull(fingerprints, \"fingerprints\");\n \n+        MessageDigest md;\n+        try {\n+            md = MessageDigest.getInstance(algorithm);\n+        } catch (NoSuchAlgorithmException e) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Unsupported hash algorithm: %s\", algorithm), e);\n+        }\n+\n+        int hashLength = md.getDigestLength();\n         List<byte[]> list = new ArrayList<byte[]>(fingerprints.length);\n         for (byte[] f: fingerprints) {\n             if (f == null) {\n                 break;\n             }\n-            if (f.length != SHA1_BYTE_LEN) {\n-                throw new IllegalArgumentException(\"malformed fingerprint: \" +\n-                        ByteBufUtil.hexDump(Unpooled.wrappedBuffer(f)) + \" (expected: SHA1)\");\n+            if (f.length != hashLength) {\n+                throw new IllegalArgumentException(\n+                        String.format(\"malformed fingerprint (length is %d but expected %d): %s\",\n+                                      f.length, hashLength, ByteBufUtil.hexDump(Unpooled.wrappedBuffer(f))));\n             }\n             list.add(f.clone());\n         }\n \n+        this.tlmd.set(md);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIwNjY4NA=="}, "originalCommit": {"oid": "187a6d43f881df5cb0ecbf157dfd808208824649"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIyMTUwOA==", "bodyText": "nevermind... #10683 (comment)", "url": "https://github.com/netty/netty/pull/10683#discussion_r506221508", "createdAt": "2020-10-16T09:35:14Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -136,44 +132,91 @@ private void checkTrusted(String type, X509Certificate[] chain) throws Certifica\n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(Iterable<String> fingerprints) {\n-        this(toFingerprintArray(fingerprints));\n+        this(\"SHA1\", toFingerprintArray(fingerprints));\n     }\n \n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(String... fingerprints) {\n-        this(toFingerprintArray(Arrays.asList(fingerprints)));\n+        this(\"SHA1\", toFingerprintArray(Arrays.asList(fingerprints)));\n     }\n \n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(byte[]... fingerprints) {\n+        this(\"SHA1\", fingerprints);\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param algorithm a hash algorithm\n+     * @param fingerprints a list of fingerprints\n+     */\n+    private FingerprintTrustManagerFactory(final String algorithm, byte[][] fingerprints) {\n+        ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n         ObjectUtil.checkNotNull(fingerprints, \"fingerprints\");\n \n+        MessageDigest md;\n+        try {\n+            md = MessageDigest.getInstance(algorithm);\n+        } catch (NoSuchAlgorithmException e) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Unsupported hash algorithm: %s\", algorithm), e);\n+        }\n+\n+        int hashLength = md.getDigestLength();\n         List<byte[]> list = new ArrayList<byte[]>(fingerprints.length);\n         for (byte[] f: fingerprints) {\n             if (f == null) {\n                 break;\n             }\n-            if (f.length != SHA1_BYTE_LEN) {\n-                throw new IllegalArgumentException(\"malformed fingerprint: \" +\n-                        ByteBufUtil.hexDump(Unpooled.wrappedBuffer(f)) + \" (expected: SHA1)\");\n+            if (f.length != hashLength) {\n+                throw new IllegalArgumentException(\n+                        String.format(\"malformed fingerprint (length is %d but expected %d): %s\",\n+                                      f.length, hashLength, ByteBufUtil.hexDump(Unpooled.wrappedBuffer(f))));\n             }\n             list.add(f.clone());\n         }\n \n+        this.tlmd.set(md);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIwNjY4NA=="}, "originalCommit": {"oid": "187a6d43f881df5cb0ecbf157dfd808208824649"}, "originalPosition": 154}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM2NDcxOA==", "bodyText": "@chrisvest Thanks for pointing it out!", "url": "https://github.com/netty/netty/pull/10683#discussion_r506364718", "createdAt": "2020-10-16T12:30:15Z", "author": {"login": "artem-smotrakov"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -136,44 +132,91 @@ private void checkTrusted(String type, X509Certificate[] chain) throws Certifica\n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(Iterable<String> fingerprints) {\n-        this(toFingerprintArray(fingerprints));\n+        this(\"SHA1\", toFingerprintArray(fingerprints));\n     }\n \n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(String... fingerprints) {\n-        this(toFingerprintArray(Arrays.asList(fingerprints)));\n+        this(\"SHA1\", toFingerprintArray(Arrays.asList(fingerprints)));\n     }\n \n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(byte[]... fingerprints) {\n+        this(\"SHA1\", fingerprints);\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param algorithm a hash algorithm\n+     * @param fingerprints a list of fingerprints\n+     */\n+    private FingerprintTrustManagerFactory(final String algorithm, byte[][] fingerprints) {\n+        ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n         ObjectUtil.checkNotNull(fingerprints, \"fingerprints\");\n \n+        MessageDigest md;\n+        try {\n+            md = MessageDigest.getInstance(algorithm);\n+        } catch (NoSuchAlgorithmException e) {\n+            throw new IllegalArgumentException(\n+                    String.format(\"Unsupported hash algorithm: %s\", algorithm), e);\n+        }\n+\n+        int hashLength = md.getDigestLength();\n         List<byte[]> list = new ArrayList<byte[]>(fingerprints.length);\n         for (byte[] f: fingerprints) {\n             if (f == null) {\n                 break;\n             }\n-            if (f.length != SHA1_BYTE_LEN) {\n-                throw new IllegalArgumentException(\"malformed fingerprint: \" +\n-                        ByteBufUtil.hexDump(Unpooled.wrappedBuffer(f)) + \" (expected: SHA1)\");\n+            if (f.length != hashLength) {\n+                throw new IllegalArgumentException(\n+                        String.format(\"malformed fingerprint (length is %d but expected %d): %s\",\n+                                      f.length, hashLength, ByteBufUtil.hexDump(Unpooled.wrappedBuffer(f))));\n             }\n             list.add(f.clone());\n         }\n \n+        this.tlmd.set(md);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIwNjY4NA=="}, "originalCommit": {"oid": "187a6d43f881df5cb0ecbf157dfd808208824649"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MDg2MDc5OnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQwOTozNDo1MFrOHixSHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMzowNjowMVrOHi7w-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIyMTA4NQ==", "bodyText": "@chrisvest was right here... you need to override initialValue() here", "url": "https://github.com/netty/netty/pull/10683#discussion_r506221085", "createdAt": "2020-10-16T09:34:50Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -75,20 +83,8 @@\n \n     private static final Pattern FINGERPRINT_PATTERN = Pattern.compile(\"^[0-9a-fA-F:]+$\");\n     private static final Pattern FINGERPRINT_STRIP_PATTERN = Pattern.compile(\":\");\n-    private static final int SHA1_BYTE_LEN = 20;\n-    private static final int SHA1_HEX_LEN = SHA1_BYTE_LEN * 2;\n \n-    private static final FastThreadLocal<MessageDigest> tlmd = new FastThreadLocal<MessageDigest>() {\n-        @Override\n-        protected MessageDigest initialValue() {\n-            try {\n-                return MessageDigest.getInstance(\"SHA1\");\n-            } catch (NoSuchAlgorithmException e) {\n-                // All Java implementation must have SHA1 digest algorithm.\n-                throw new Error(e);\n-            }\n-        }\n-    };\n+    private final FastThreadLocal<MessageDigest> tlmd = new FastThreadLocal<MessageDigest>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "187a6d43f881df5cb0ecbf157dfd808208824649"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM2NDAzNA==", "bodyText": "Since FingerprintTrustManagerFactory is now configured with a hash algorithm, tlmd needs to be initialized in the constructor. It used to be before. Then, initialValue() was removed because we wanted to create an instance of MessageDigest earlier in the constructor to check if the algorithm exists. If I understand correctly, we just want to revert the logic to the previous version. I am not sure if we need to create another MessageDigest in the constructor. Please let me know if so.", "url": "https://github.com/netty/netty/pull/10683#discussion_r506364034", "createdAt": "2020-10-16T12:29:21Z", "author": {"login": "artem-smotrakov"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -75,20 +83,8 @@\n \n     private static final Pattern FINGERPRINT_PATTERN = Pattern.compile(\"^[0-9a-fA-F:]+$\");\n     private static final Pattern FINGERPRINT_STRIP_PATTERN = Pattern.compile(\":\");\n-    private static final int SHA1_BYTE_LEN = 20;\n-    private static final int SHA1_HEX_LEN = SHA1_BYTE_LEN * 2;\n \n-    private static final FastThreadLocal<MessageDigest> tlmd = new FastThreadLocal<MessageDigest>() {\n-        @Override\n-        protected MessageDigest initialValue() {\n-            try {\n-                return MessageDigest.getInstance(\"SHA1\");\n-            } catch (NoSuchAlgorithmException e) {\n-                // All Java implementation must have SHA1 digest algorithm.\n-                throw new Error(e);\n-            }\n-        }\n-    };\n+    private final FastThreadLocal<MessageDigest> tlmd = new FastThreadLocal<MessageDigest>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIyMTA4NQ=="}, "originalCommit": {"oid": "187a6d43f881df5cb0ecbf157dfd808208824649"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM4Njk4Ng==", "bodyText": "I am not sure if we need to create another MessageDigest in the constructor. Please let me know if so.\n\nWell, looks like there is no harm if we do that. So, I'll add such a check if no objections.", "url": "https://github.com/netty/netty/pull/10683#discussion_r506386986", "createdAt": "2020-10-16T12:58:28Z", "author": {"login": "artem-smotrakov"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -75,20 +83,8 @@\n \n     private static final Pattern FINGERPRINT_PATTERN = Pattern.compile(\"^[0-9a-fA-F:]+$\");\n     private static final Pattern FINGERPRINT_STRIP_PATTERN = Pattern.compile(\":\");\n-    private static final int SHA1_BYTE_LEN = 20;\n-    private static final int SHA1_HEX_LEN = SHA1_BYTE_LEN * 2;\n \n-    private static final FastThreadLocal<MessageDigest> tlmd = new FastThreadLocal<MessageDigest>() {\n-        @Override\n-        protected MessageDigest initialValue() {\n-            try {\n-                return MessageDigest.getInstance(\"SHA1\");\n-            } catch (NoSuchAlgorithmException e) {\n-                // All Java implementation must have SHA1 digest algorithm.\n-                throw new Error(e);\n-            }\n-        }\n-    };\n+    private final FastThreadLocal<MessageDigest> tlmd = new FastThreadLocal<MessageDigest>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIyMTA4NQ=="}, "originalCommit": {"oid": "187a6d43f881df5cb0ecbf157dfd808208824649"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjM5MjgyNA==", "bodyText": "Since tlmd is an instance field, you can create the FastThreadLocal with an initialValue method that has all the logic necessary to create MessageDigest instances. I'd still check that the algorithm exists before creating the FTL, though, because each FTL instance will claim some static resources that we'd prefer not to leak.", "url": "https://github.com/netty/netty/pull/10683#discussion_r506392824", "createdAt": "2020-10-16T13:06:01Z", "author": {"login": "chrisvest"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -75,20 +83,8 @@\n \n     private static final Pattern FINGERPRINT_PATTERN = Pattern.compile(\"^[0-9a-fA-F:]+$\");\n     private static final Pattern FINGERPRINT_STRIP_PATTERN = Pattern.compile(\":\");\n-    private static final int SHA1_BYTE_LEN = 20;\n-    private static final int SHA1_HEX_LEN = SHA1_BYTE_LEN * 2;\n \n-    private static final FastThreadLocal<MessageDigest> tlmd = new FastThreadLocal<MessageDigest>() {\n-        @Override\n-        protected MessageDigest initialValue() {\n-            try {\n-                return MessageDigest.getInstance(\"SHA1\");\n-            } catch (NoSuchAlgorithmException e) {\n-                // All Java implementation must have SHA1 digest algorithm.\n-                throw new Error(e);\n-            }\n-        }\n-    };\n+    private final FastThreadLocal<MessageDigest> tlmd = new FastThreadLocal<MessageDigest>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjIyMTA4NQ=="}, "originalCommit": {"oid": "187a6d43f881df5cb0ecbf157dfd808208824649"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3NDM2NTEzOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QwNDoxNjowNFrOHjUGfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xN1QxNzowMzo0OVrOHjej0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc5MTU1MQ==", "bodyText": "How about moving this validation to build() and raising IllegalStateException? Otherwise, a user will get IllegalArgumentException on build(), which does not make sense. We could add an assertion here instead.", "url": "https://github.com/netty/netty/pull/10683#discussion_r506791551", "createdAt": "2020-10-17T04:16:04Z", "author": {"login": "trustin"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -136,45 +142,99 @@ private void checkTrusted(String type, X509Certificate[] chain) throws Certifica\n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(Iterable<String> fingerprints) {\n-        this(toFingerprintArray(fingerprints));\n+        this(\"SHA1\", toFingerprintArray(fingerprints));\n     }\n \n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(String... fingerprints) {\n-        this(toFingerprintArray(Arrays.asList(fingerprints)));\n+        this(\"SHA1\", toFingerprintArray(Arrays.asList(fingerprints)));\n     }\n \n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(byte[]... fingerprints) {\n+        this(\"SHA1\", fingerprints);\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param algorithm a hash algorithm\n+     * @param fingerprints a list of fingerprints\n+     */\n+    FingerprintTrustManagerFactory(final String algorithm, byte[][] fingerprints) {\n+        ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n         ObjectUtil.checkNotNull(fingerprints, \"fingerprints\");\n \n+        if (fingerprints.length == 0) {\n+            throw new IllegalArgumentException(\"No fingerprints provided\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28e7e074cf803eb80edae56e9c7ea554e24fcfd9"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjk2Mjg5OQ==", "bodyText": "If we would like to prohibit creating a TrustManager with no fingerprints, then I think this check should be in the constructor because FingerprintTrustManagerFactory can still be created by calling the deprecated constructors.\nIf I understand you correctly, you mean that IllegalArgumentException may confuse users whey they call build() that has no arguments itself. We can add an extra check in build() that throws IllegalStateException if the list of fingerprints is empty. I'll update the code then. Please let me know if I missed something.", "url": "https://github.com/netty/netty/pull/10683#discussion_r506962899", "createdAt": "2020-10-17T17:03:49Z", "author": {"login": "artem-smotrakov"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactory.java", "diffHunk": "@@ -136,45 +142,99 @@ private void checkTrusted(String type, X509Certificate[] chain) throws Certifica\n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(Iterable<String> fingerprints) {\n-        this(toFingerprintArray(fingerprints));\n+        this(\"SHA1\", toFingerprintArray(fingerprints));\n     }\n \n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints in hexadecimal form\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(String... fingerprints) {\n-        this(toFingerprintArray(Arrays.asList(fingerprints)));\n+        this(\"SHA1\", toFingerprintArray(Arrays.asList(fingerprints)));\n     }\n \n     /**\n      * Creates a new instance.\n      *\n+     * @deprecated This deprecated constructor uses SHA-1 that is considered insecure.\n+     *      It is recommended to specify a stronger hash algorithm, such as SHA-256,\n+     *      by calling {@link FingerprintTrustManagerFactory#builder(String)} method.\n+     *\n      * @param fingerprints a list of SHA1 fingerprints\n      */\n+    @Deprecated\n     public FingerprintTrustManagerFactory(byte[]... fingerprints) {\n+        this(\"SHA1\", fingerprints);\n+    }\n+\n+    /**\n+     * Creates a new instance.\n+     *\n+     * @param algorithm a hash algorithm\n+     * @param fingerprints a list of fingerprints\n+     */\n+    FingerprintTrustManagerFactory(final String algorithm, byte[][] fingerprints) {\n+        ObjectUtil.checkNotNull(algorithm, \"algorithm\");\n         ObjectUtil.checkNotNull(fingerprints, \"fingerprints\");\n \n+        if (fingerprints.length == 0) {\n+            throw new IllegalArgumentException(\"No fingerprints provided\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjc5MTU1MQ=="}, "originalCommit": {"oid": "28e7e074cf803eb80edae56e9c7ea554e24fcfd9"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNzI4MzYzOnYy", "diffSide": "RIGHT", "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactoryBuilder.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMjowNDo0OFrOHoMgVg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMjowNzo1NVrOHoMmVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkwOTk3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *   http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *   https://www.apache.org/licenses/LICENSE-2.0", "url": "https://github.com/netty/netty/pull/10683#discussion_r511909974", "createdAt": "2020-10-26T12:04:48Z", "author": {"login": "normanmaurer"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactoryBuilder.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce495d23eb17e01b8a5cc55dcdb536b4386c6a0f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkxMTUxMQ==", "bodyText": "Thanks for fixing this @normanmaurer !", "url": "https://github.com/netty/netty/pull/10683#discussion_r511911511", "createdAt": "2020-10-26T12:07:55Z", "author": {"login": "artem-smotrakov"}, "path": "handler/src/main/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactoryBuilder.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkwOTk3NA=="}, "originalCommit": {"oid": "ce495d23eb17e01b8a5cc55dcdb536b4386c6a0f"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIwNzI4NDQ4OnYy", "diffSide": "RIGHT", "path": "handler/src/test/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactoryTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMjowNTowM1rOHoMgyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxMjowNTowM1rOHoMgyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTkxMDA5MQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             *   http://www.apache.org/licenses/LICENSE-2.0\n          \n          \n            \n             *   https://www.apache.org/licenses/LICENSE-2.0", "url": "https://github.com/netty/netty/pull/10683#discussion_r511910091", "createdAt": "2020-10-26T12:05:03Z", "author": {"login": "normanmaurer"}, "path": "handler/src/test/java/io/netty/handler/ssl/util/FingerprintTrustManagerFactoryTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 The Netty Project\n+ *\n+ * The Netty Project licenses this file to you under the Apache License,\n+ * version 2.0 (the \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at:\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce495d23eb17e01b8a5cc55dcdb536b4386c6a0f"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3614, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}