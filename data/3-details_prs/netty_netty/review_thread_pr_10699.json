{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0NzE5MzE2", "number": 10699, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDowNTo1MlrOEuagdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDoxNDo0N1rOEuatzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTA0MjQ1OnYy", "diffSide": "LEFT", "path": "buffer/src/test/java/io/netty/buffer/ByteBufDerivationTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDowNTo1MlrOHizLYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMToyNDowNVrOHi28xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI1MjEzMQ==", "bodyText": "What's our preference on star-imports? I thought we were avoiding them everywhere. If so, we could \"organise import\" on the files already touched by this PR.", "url": "https://github.com/netty/netty/pull/10699#discussion_r506252131", "createdAt": "2020-10-16T10:05:52Z", "author": {"login": "chrisvest"}, "path": "buffer/src/test/java/io/netty/buffer/ByteBufDerivationTest.java", "diffHunk": "@@ -21,8 +21,8 @@\n import java.nio.ByteOrder;\n import java.util.Random;\n \n+import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.*;\n-import static org.junit.Assert.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "434138c0cd6f5907e5459e4eb5aebff6e19e8d0d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI4MTMxOA==", "bodyText": "I actually would like to remove these but I would do this in a followup pr", "url": "https://github.com/netty/netty/pull/10699#discussion_r506281318", "createdAt": "2020-10-16T10:43:25Z", "author": {"login": "normanmaurer"}, "path": "buffer/src/test/java/io/netty/buffer/ByteBufDerivationTest.java", "diffHunk": "@@ -21,8 +21,8 @@\n import java.nio.ByteOrder;\n import java.util.Random;\n \n+import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.*;\n-import static org.junit.Assert.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI1MjEzMQ=="}, "originalCommit": {"oid": "434138c0cd6f5907e5459e4eb5aebff6e19e8d0d"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjMxMzkyNQ==", "bodyText": "Works for me \ud83d\udc4d", "url": "https://github.com/netty/netty/pull/10699#discussion_r506313925", "createdAt": "2020-10-16T11:24:05Z", "author": {"login": "chrisvest"}, "path": "buffer/src/test/java/io/netty/buffer/ByteBufDerivationTest.java", "diffHunk": "@@ -21,8 +21,8 @@\n import java.nio.ByteOrder;\n import java.util.Random;\n \n+import static org.hamcrest.MatcherAssert.assertThat;\n import static org.hamcrest.Matchers.*;\n-import static org.junit.Assert.*;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI1MjEzMQ=="}, "originalCommit": {"oid": "434138c0cd6f5907e5459e4eb5aebff6e19e8d0d"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTA0ODEyOnYy", "diffSide": "RIGHT", "path": "codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketCloseStatusTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDowNzoxOVrOHizO6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDowNzoxOVrOHizO6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI1MzAzNA==", "bodyText": "Static import?", "url": "https://github.com/netty/netty/pull/10699#discussion_r506253034", "createdAt": "2020-10-16T10:07:19Z", "author": {"login": "chrisvest"}, "path": "codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketCloseStatusTest.java", "diffHunk": "@@ -64,12 +65,12 @@ public void testKnownStatuses() {\n \n     @Test\n     public void testNaturalOrder() {\n-        Assert.assertThat(PROTOCOL_ERROR, Matchers.greaterThan(NORMAL_CLOSURE));\n-        Assert.assertThat(PROTOCOL_ERROR, Matchers.greaterThan(valueOf(1001)));\n-        Assert.assertThat(PROTOCOL_ERROR, Matchers.comparesEqualTo(PROTOCOL_ERROR));\n-        Assert.assertThat(PROTOCOL_ERROR, Matchers.comparesEqualTo(valueOf(1002)));\n-        Assert.assertThat(PROTOCOL_ERROR, Matchers.lessThan(INVALID_MESSAGE_TYPE));\n-        Assert.assertThat(PROTOCOL_ERROR, Matchers.lessThan(valueOf(1007)));\n+        MatcherAssert.assertThat(PROTOCOL_ERROR, Matchers.greaterThan(NORMAL_CLOSURE));\n+        MatcherAssert.assertThat(PROTOCOL_ERROR, Matchers.greaterThan(valueOf(1001)));\n+        MatcherAssert.assertThat(PROTOCOL_ERROR, Matchers.comparesEqualTo(PROTOCOL_ERROR));\n+        MatcherAssert.assertThat(PROTOCOL_ERROR, Matchers.comparesEqualTo(valueOf(1002)));\n+        MatcherAssert.assertThat(PROTOCOL_ERROR, Matchers.lessThan(INVALID_MESSAGE_TYPE));\n+        MatcherAssert.assertThat(PROTOCOL_ERROR, Matchers.lessThan(valueOf(1007)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "434138c0cd6f5907e5459e4eb5aebff6e19e8d0d"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTA0OTExOnYy", "diffSide": "RIGHT", "path": "codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketServerHandshaker13Test.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDowNzozMlrOHizPhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDowNzozMlrOHizPhw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI1MzE5MQ==", "bodyText": "Static import?", "url": "https://github.com/netty/netty/pull/10699#discussion_r506253191", "createdAt": "2020-10-16T10:07:32Z", "author": {"login": "chrisvest"}, "path": "codec-http/src/test/java/io/netty/handler/codec/http/websocketx/WebSocketServerHandshaker13Test.java", "diffHunk": "@@ -103,7 +104,7 @@ private static void testCloseReason0(ChannelHandler... handlers) {\n             // expected\n         }\n         ReferenceCounted closeMessage = ch.readOutbound();\n-        Assert.assertThat(closeMessage, CoreMatchers.instanceOf(ByteBuf.class));\n+        MatcherAssert.assertThat(closeMessage, CoreMatchers.instanceOf(ByteBuf.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "434138c0cd6f5907e5459e4eb5aebff6e19e8d0d"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTA3NDM1OnYy", "diffSide": "RIGHT", "path": "resolver-dns-native-macos/src/test/java/io/netty/resolver/dns/macos/MacOSDnsServerAddressStreamProviderTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDoxNDoxNVrOHizfZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDoxNDoxNVrOHizfZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI1NzI1Mw==", "bodyText": "Static import?", "url": "https://github.com/netty/netty/pull/10699#discussion_r506257253", "createdAt": "2020-10-16T10:14:15Z", "author": {"login": "chrisvest"}, "path": "resolver-dns-native-macos/src/test/java/io/netty/resolver/dns/macos/MacOSDnsServerAddressStreamProviderTest.java", "diffHunk": "@@ -45,7 +46,7 @@ public void testStream() {\n \n     @Test\n     public void testDefaultUseCorrectInstance() {\n-        Assert.assertThat(DnsServerAddressStreamProviders.platformDefault(),\n+        MatcherAssert.assertThat(DnsServerAddressStreamProviders.platformDefault(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "434138c0cd6f5907e5459e4eb5aebff6e19e8d0d"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTA3NTMwOnYy", "diffSide": "RIGHT", "path": "resolver-dns/src/test/java/io/netty/resolver/dns/DnsAddressResolverGroupTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDoxNDoyNlrOHizf9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDoxNDoyNlrOHizf9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI1NzM5OQ==", "bodyText": "Static imports?", "url": "https://github.com/netty/netty/pull/10699#discussion_r506257399", "createdAt": "2020-10-16T10:14:26Z", "author": {"login": "chrisvest"}, "path": "resolver-dns/src/test/java/io/netty/resolver/dns/DnsAddressResolverGroupTest.java", "diffHunk": "@@ -48,7 +49,8 @@ public void testUseConfiguredEventLoop() throws InterruptedException {\n                 @Override\n                 public void operationComplete(Future<Object> future) {\n                     try {\n-                        Assert.assertThat(future.cause(), Matchers.instanceOf(UnsupportedAddressTypeException.class));\n+                        MatcherAssert.assertThat(future.cause(),\n+                                Matchers.instanceOf(UnsupportedAddressTypeException.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "434138c0cd6f5907e5459e4eb5aebff6e19e8d0d"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE3MTA3NjYyOnYy", "diffSide": "RIGHT", "path": "transport/src/test/java/io/netty/channel/nio/NioEventLoopTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDoxNDo0N1rOHizgxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xNlQxMDoxNDo0N1rOHizgxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNjI1NzYwNg==", "bodyText": "Static import?", "url": "https://github.com/netty/netty/pull/10699#discussion_r506257606", "createdAt": "2020-10-16T10:14:47Z", "author": {"login": "chrisvest"}, "path": "transport/src/test/java/io/netty/channel/nio/NioEventLoopTest.java", "diffHunk": "@@ -222,7 +223,7 @@ public void run() {\n             group.shutdownNow();\n             t.join();\n             group.terminationFuture().syncUninterruptibly();\n-            assertThat(error.get(), IsInstanceOf.instanceOf(RejectedExecutionException.class));\n+            assertThat(error.get(), Matchers.instanceOf(RejectedExecutionException.class));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "434138c0cd6f5907e5459e4eb5aebff6e19e8d0d"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3624, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}