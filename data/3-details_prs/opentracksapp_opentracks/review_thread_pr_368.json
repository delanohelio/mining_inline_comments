{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2NjM4NjYz", "number": 368, "reviewThreads": {"totalCount": 32, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzozNTo1OVrOEXuoqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODozMDozMVrOEbV2Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzE2Nzc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzozNTo1OVrOG_rm4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzozNTo1OVrOG_rm4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQyNzkzOA==", "bodyText": "Constructor can be removed; just initialize it in line 11.", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r469427938", "createdAt": "2020-08-12T17:35:59Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public IntervalStatistics() {\n+        intervalList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60057263a4a6014f2c48e982dd04b3d97d2238c9"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzE2OTAzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzozNjoxOVrOG_rnoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzozNjoxOVrOG_rnoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQyODEyOQ==", "bodyText": "make private", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r469428129", "createdAt": "2020-08-12T17:36:19Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public IntervalStatistics() {\n+        intervalList = new ArrayList<>();\n+    }\n+\n+    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n+        intervalList = new ArrayList<>();\n+\n+        if (trackPointList == null || trackPointList.size() == 0) {\n+            return;\n+        }\n+\n+        Interval interval = new Interval();\n+        for (int i = 1; i < trackPointList.size(); i++) {\n+            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n+            TrackPoint trackPoint = trackPointList.get(i);\n+\n+            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n+                interval.distance += prevTrackPoint.distanceTo(trackPoint);\n+                interval.time += trackPoint.getTime() - prevTrackPoint.getTime();\n+\n+                if (interval.distance >= distanceInterval) {\n+                    float adjustFactor = distanceInterval / interval.distance;\n+                    Interval adjustedInterval = new Interval(interval);\n+                    adjustedInterval.distance *= adjustFactor;\n+                    adjustedInterval.time *= adjustFactor;\n+\n+                    intervalList.add(adjustedInterval);\n+\n+                    Interval newInterval = new Interval();\n+                    newInterval.distance = interval.distance - adjustedInterval.distance;\n+                    newInterval.time = interval.time - adjustedInterval.time;\n+\n+                    interval = newInterval;\n+                }\n+            }\n+        }\n+\n+        if (interval.distance > 1f) {\n+            intervalList.add(interval);\n+        }\n+    }\n+\n+    public List<Interval> getIntervalList() {\n+        return intervalList;\n+    }\n+\n+    public static class Interval {\n+        float distance = 0f;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60057263a4a6014f2c48e982dd04b3d97d2238c9"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzE2OTk1OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzozNjozM1rOG_roNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzozNjozM1rOG_roNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQyODI3Nw==", "bodyText": "make private", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r469428277", "createdAt": "2020-08-12T17:36:33Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public IntervalStatistics() {\n+        intervalList = new ArrayList<>();\n+    }\n+\n+    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n+        intervalList = new ArrayList<>();\n+\n+        if (trackPointList == null || trackPointList.size() == 0) {\n+            return;\n+        }\n+\n+        Interval interval = new Interval();\n+        for (int i = 1; i < trackPointList.size(); i++) {\n+            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n+            TrackPoint trackPoint = trackPointList.get(i);\n+\n+            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n+                interval.distance += prevTrackPoint.distanceTo(trackPoint);\n+                interval.time += trackPoint.getTime() - prevTrackPoint.getTime();\n+\n+                if (interval.distance >= distanceInterval) {\n+                    float adjustFactor = distanceInterval / interval.distance;\n+                    Interval adjustedInterval = new Interval(interval);\n+                    adjustedInterval.distance *= adjustFactor;\n+                    adjustedInterval.time *= adjustFactor;\n+\n+                    intervalList.add(adjustedInterval);\n+\n+                    Interval newInterval = new Interval();\n+                    newInterval.distance = interval.distance - adjustedInterval.distance;\n+                    newInterval.time = interval.time - adjustedInterval.time;\n+\n+                    interval = newInterval;\n+                }\n+            }\n+        }\n+\n+        if (interval.distance > 1f) {\n+            intervalList.add(interval);\n+        }\n+    }\n+\n+    public List<Interval> getIntervalList() {\n+        return intervalList;\n+    }\n+\n+    public static class Interval {\n+        float distance = 0f;\n+        float time = 0f;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60057263a4a6014f2c48e982dd04b3d97d2238c9"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMzE3NDIzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzozNzo0M1rOG_rqyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzo1NjoyMlrOG_sVKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQyODkzNg==", "bodyText": "i guess this will be either 1mile / 1km, right?\nSo, we are independent of the actual unit", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r469428936", "createdAt": "2020-08-12T17:37:43Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatisticsModel extends AndroidViewModel {\n+\n+    private MutableLiveData<IntervalStatistics> intervalStats;\n+    private IntervalOption interval;\n+\n+    public IntervalStatisticsModel(@NonNull Application application) {\n+        super(application);\n+        interval = IntervalOption.OPTION_1;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(long trackId, IntervalOption interval) {\n+        if (intervalStats == null || this.interval != interval) {\n+            intervalStats = new MutableLiveData<>();\n+            this.interval = interval;\n+            loadIntervalStats(trackId);\n+        }\n+        return intervalStats;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(long trackId) {\n+        return getIntervalStats(trackId, interval);\n+    }\n+\n+    public void invalidate() {\n+        intervalStats = null;\n+    }\n+\n+    private void loadIntervalStats(long trackId) {\n+        new Thread(() -> {\n+            Context context = getApplication().getApplicationContext();\n+            ContentProviderUtils contentProviderUtils = new ContentProviderUtils(context);\n+            List<TrackPoint> trackPointList = contentProviderUtils.getTrackPoints(trackId);\n+\n+            IntervalStatistics intervalStatistics = new IntervalStatistics();\n+            float distanceInterval = PreferencesUtils.isMetricUnits(context) ? (float) (interval.getValue() * UnitConversions.KM_TO_M) : (float) (interval.getValue() * UnitConversions.MI_TO_M);\n+            intervalStatistics.build(trackPointList, distanceInterval);\n+\n+            intervalStats.postValue(intervalStatistics);\n+        }).start();\n+    }\n+\n+    public enum IntervalOption {\n+        OPTION_1(1),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60057263a4a6014f2c48e982dd04b3d97d2238c9"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQzOTc4NA==", "bodyText": "Yes, it is. It works with mi and km. In the case the user changes the unit from km to mi the intervals are reload and the other way around.", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r469439784", "createdAt": "2020-08-12T17:56:22Z", "author": {"login": "rgmf"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatisticsModel extends AndroidViewModel {\n+\n+    private MutableLiveData<IntervalStatistics> intervalStats;\n+    private IntervalOption interval;\n+\n+    public IntervalStatisticsModel(@NonNull Application application) {\n+        super(application);\n+        interval = IntervalOption.OPTION_1;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(long trackId, IntervalOption interval) {\n+        if (intervalStats == null || this.interval != interval) {\n+            intervalStats = new MutableLiveData<>();\n+            this.interval = interval;\n+            loadIntervalStats(trackId);\n+        }\n+        return intervalStats;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(long trackId) {\n+        return getIntervalStats(trackId, interval);\n+    }\n+\n+    public void invalidate() {\n+        intervalStats = null;\n+    }\n+\n+    private void loadIntervalStats(long trackId) {\n+        new Thread(() -> {\n+            Context context = getApplication().getApplicationContext();\n+            ContentProviderUtils contentProviderUtils = new ContentProviderUtils(context);\n+            List<TrackPoint> trackPointList = contentProviderUtils.getTrackPoints(trackId);\n+\n+            IntervalStatistics intervalStatistics = new IntervalStatistics();\n+            float distanceInterval = PreferencesUtils.isMetricUnits(context) ? (float) (interval.getValue() * UnitConversions.KM_TO_M) : (float) (interval.getValue() * UnitConversions.MI_TO_M);\n+            intervalStatistics.build(trackPointList, distanceInterval);\n+\n+            intervalStats.postValue(intervalStatistics);\n+        }).start();\n+    }\n+\n+    public enum IntervalOption {\n+        OPTION_1(1),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQyODkzNg=="}, "originalCommit": {"oid": "60057263a4a6014f2c48e982dd04b3d97d2238c9"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTAxODI2OnYy", "diffSide": "RIGHT", "path": "src/androidTest/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNzo1MDo0MlrOHFOwTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNzo1MDo0MlrOHFOwTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NjY2OA==", "bodyText": "return Arrays.asList(pair.second);", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475246668", "createdAt": "2020-08-23T17:50:42Z", "author": {"login": "dennisguse"}, "path": "src/androidTest/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.util.Pair;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.junit.Assert;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TestDataUtil;\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.stats.TrackStatistics;\n+import de.dennisguse.opentracks.stats.TrackStatisticsUpdater;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+@RunWith(JUnit4.class)\n+public class IntervalStatisticsTest {\n+\n+    private static final String TAG = IntervalStatisticsTest.class.getSimpleName();\n+\n+    private List<TrackPoint> buildTrackPoints(int numberOfTrackPoints) {\n+\t\tPair<Track, TrackPoint[]> pair = TestDataUtil.createTrack(new Track.Id(System.currentTimeMillis()), numberOfTrackPoints);\n+\t\tList<TrackPoint> trackPoints = Arrays.asList(pair.second);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTAxODc1OnYy", "diffSide": "RIGHT", "path": "src/androidTest/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNzo1MToxNFrOHFOwiQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMDowNTo0OVrOHFdiGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NjcyOQ==", "bodyText": "formatting", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475246729", "createdAt": "2020-08-23T17:51:14Z", "author": {"login": "dennisguse"}, "path": "src/androidTest/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.util.Pair;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.junit.Assert;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TestDataUtil;\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.stats.TrackStatistics;\n+import de.dennisguse.opentracks.stats.TrackStatisticsUpdater;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+@RunWith(JUnit4.class)\n+public class IntervalStatisticsTest {\n+\n+    private static final String TAG = IntervalStatisticsTest.class.getSimpleName();\n+\n+    private List<TrackPoint> buildTrackPoints(int numberOfTrackPoints) {\n+\t\tPair<Track, TrackPoint[]> pair = TestDataUtil.createTrack(new Track.Id(System.currentTimeMillis()), numberOfTrackPoints);\n+\t\tList<TrackPoint> trackPoints = Arrays.asList(pair.second);\n+\n+\t\treturn trackPoints;\n+\t}\n+\n+\tprivate TrackStatistics buildTrackStatistics(List<TrackPoint> trackPoints) {\n+\t\tTrackStatisticsUpdater trackStatisticsUpdater = new TrackStatisticsUpdater(trackPoints.get(0).getTime());\n+\t\tfor (TrackPoint tp : trackPoints) {\n+\t\t\ttrackStatisticsUpdater.addTrackPoint(tp, 0);\n+\t\t}\n+\t\treturn trackStatisticsUpdater.getTrackStatistics();\n+\t}\n+\n+\t/**\n+\t * Tests that build method compute the distance correctly comparing the result with TrackStatisticsUpdater result.\n+\t */\n+\t@Test\n+    public void testBuild_1() {\n+\t\t// With 50 points and interval distance of 1000m.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ4ODc5Mg==", "bodyText": "Strange... I see it well formatted. Anyway I've reformatted.", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475488792", "createdAt": "2020-08-24T10:05:49Z", "author": {"login": "rgmf"}, "path": "src/androidTest/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.util.Pair;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.junit.Assert;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TestDataUtil;\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.stats.TrackStatistics;\n+import de.dennisguse.opentracks.stats.TrackStatisticsUpdater;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+@RunWith(JUnit4.class)\n+public class IntervalStatisticsTest {\n+\n+    private static final String TAG = IntervalStatisticsTest.class.getSimpleName();\n+\n+    private List<TrackPoint> buildTrackPoints(int numberOfTrackPoints) {\n+\t\tPair<Track, TrackPoint[]> pair = TestDataUtil.createTrack(new Track.Id(System.currentTimeMillis()), numberOfTrackPoints);\n+\t\tList<TrackPoint> trackPoints = Arrays.asList(pair.second);\n+\n+\t\treturn trackPoints;\n+\t}\n+\n+\tprivate TrackStatistics buildTrackStatistics(List<TrackPoint> trackPoints) {\n+\t\tTrackStatisticsUpdater trackStatisticsUpdater = new TrackStatisticsUpdater(trackPoints.get(0).getTime());\n+\t\tfor (TrackPoint tp : trackPoints) {\n+\t\t\ttrackStatisticsUpdater.addTrackPoint(tp, 0);\n+\t\t}\n+\t\treturn trackStatisticsUpdater.getTrackStatistics();\n+\t}\n+\n+\t/**\n+\t * Tests that build method compute the distance correctly comparing the result with TrackStatisticsUpdater result.\n+\t */\n+\t@Test\n+    public void testBuild_1() {\n+\t\t// With 50 points and interval distance of 1000m.\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NjcyOQ=="}, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTAyMDQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/TrackRecordingActivity.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNzo1Mzo0M1rOHFOxYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMDoxMjoyOVrOHFdwJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0Njk0Ng==", "bodyText": "Why not use a newInstance-method (like the other fragements?)", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475246946", "createdAt": "2020-08-23T17:53:43Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/TrackRecordingActivity.java", "diffHunk": "@@ -382,8 +383,10 @@ public Fragment getItem(int position) {\n                 case 0:\n                     return new StatisticsRecordingFragment();\n                 case 1:\n-                    return ChartFragment.newInstance(false);\n+                    return new IntervalsRecordingFragment();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ5MjM5MQ==", "bodyText": "I thought that this was the best option because it not receive any arguments. Changed ;)", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475492391", "createdAt": "2020-08-24T10:12:29Z", "author": {"login": "rgmf"}, "path": "src/main/java/de/dennisguse/opentracks/TrackRecordingActivity.java", "diffHunk": "@@ -382,8 +383,10 @@ public Fragment getItem(int position) {\n                 case 0:\n                     return new StatisticsRecordingFragment();\n                 case 1:\n-                    return ChartFragment.newInstance(false);\n+                    return new IntervalsRecordingFragment();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0Njk0Ng=="}, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTAyMTQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNzo1NDo0NlrOHFOx3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMDoxNzo0M1rOHFd6Tw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NzA2OA==", "bodyText": "Does it handle changes of metricUnits via settings?", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475247068", "createdAt": "2020-08-23T17:54:46Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package de.dennisguse.opentracks.adapters;\n+\n+import android.content.Context;\n+import android.util.Pair;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.ArrayAdapter;\n+import android.widget.TextView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.StringUtils;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+\n+public class IntervalStatisticsAdapter extends ArrayAdapter<IntervalStatistics.Interval> {\n+\n+    private boolean metricUnits;\n+    private float accDistance = 0f;\n+\n+    public IntervalStatisticsAdapter(Context context, List<IntervalStatistics.Interval> intervalList) {\n+        super(context, R.layout.interval_stats_list_item, intervalList);\n+        metricUnits = PreferencesUtils.isMetricUnits(context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ5NDk5MQ==", "bodyText": "Yes, every time view's display method is called it recreates the adapter. The fragments that use this view are responsible of re-displaying the view and they're who listen preferences changes to update UI (including the view).", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475494991", "createdAt": "2020-08-24T10:17:43Z", "author": {"login": "rgmf"}, "path": "src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package de.dennisguse.opentracks.adapters;\n+\n+import android.content.Context;\n+import android.util.Pair;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.ArrayAdapter;\n+import android.widget.TextView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.StringUtils;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+\n+public class IntervalStatisticsAdapter extends ArrayAdapter<IntervalStatistics.Interval> {\n+\n+    private boolean metricUnits;\n+    private float accDistance = 0f;\n+\n+    public IntervalStatisticsAdapter(Context context, List<IntervalStatistics.Interval> intervalList) {\n+        super(context, R.layout.interval_stats_list_item, intervalList);\n+        metricUnits = PreferencesUtils.isMetricUnits(context);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NzA2OA=="}, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTAyMjQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNzo1NTozNlrOHFOyTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMDoyMDowNlrOHFd-9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NzE4MQ==", "bodyText": "sumDistance?\nAnd adding units to the name would be great aka sumDistance_m", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475247181", "createdAt": "2020-08-23T17:55:36Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package de.dennisguse.opentracks.adapters;\n+\n+import android.content.Context;\n+import android.util.Pair;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.ArrayAdapter;\n+import android.widget.TextView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.StringUtils;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+\n+public class IntervalStatisticsAdapter extends ArrayAdapter<IntervalStatistics.Interval> {\n+\n+    private boolean metricUnits;\n+    private float accDistance = 0f;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ5NjE4MA==", "bodyText": "Ooohhhh yes, I've seen a lot of times the unit added to the name of variables... sorry \ud83d\udc4d", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475496180", "createdAt": "2020-08-24T10:20:06Z", "author": {"login": "rgmf"}, "path": "src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package de.dennisguse.opentracks.adapters;\n+\n+import android.content.Context;\n+import android.util.Pair;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.ArrayAdapter;\n+import android.widget.TextView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.StringUtils;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+\n+public class IntervalStatisticsAdapter extends ArrayAdapter<IntervalStatistics.Interval> {\n+\n+    private boolean metricUnits;\n+    private float accDistance = 0f;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NzE4MQ=="}, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTAyMzQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNzo1Njo1MFrOHFOy0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMDozODo1N1rOHFe15Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NzMxMg==", "bodyText": "why not show the units for pace as well?", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475247312", "createdAt": "2020-08-23T17:56:50Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package de.dennisguse.opentracks.adapters;\n+\n+import android.content.Context;\n+import android.util.Pair;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.ArrayAdapter;\n+import android.widget.TextView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.StringUtils;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+\n+public class IntervalStatisticsAdapter extends ArrayAdapter<IntervalStatistics.Interval> {\n+\n+    private boolean metricUnits;\n+    private float accDistance = 0f;\n+\n+    public IntervalStatisticsAdapter(Context context, List<IntervalStatistics.Interval> intervalList) {\n+        super(context, R.layout.interval_stats_list_item, intervalList);\n+        metricUnits = PreferencesUtils.isMetricUnits(context);\n+    }\n+\n+    @NonNull\n+    @Override\n+    public View getView(int position, @Nullable View intervalView, @NonNull ViewGroup parent) {\n+        IntervalStatistics.Interval interval = getItem(position);\n+        ViewHolder viewHolder;\n+\n+        if (intervalView == null) {\n+            viewHolder = new ViewHolder();\n+\n+            intervalView = LayoutInflater.from(getContext()).inflate(R.layout.interval_stats_list_item, parent, false);\n+\n+            viewHolder.distance = intervalView.findViewById(R.id.interval_item_distance);\n+            viewHolder.speed = intervalView.findViewById(R.id.interval_item_speed);\n+            viewHolder.pace = intervalView.findViewById(R.id.interval_item_pace);\n+\n+            intervalView.setTag(viewHolder);\n+        } else {\n+            viewHolder = (ViewHolder) intervalView.getTag();\n+        }\n+\n+        accDistance += interval.getDistance();\n+        viewHolder.distance.setText(StringUtils.formatDistance(getContext(), accDistance, metricUnits));\n+        Pair<String, String> speedParts = StringUtils.getSpeedParts(getContext(), interval.getSpeed(), metricUnits, true);\n+        viewHolder.speed.setText(speedParts.first + \" \" + speedParts.second);\n+        viewHolder.pace.setText(StringUtils.getSpeedParts(getContext(), interval.getSpeed(), metricUnits, false).first);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUwMDY3Mg==", "bodyText": "Because pace is time. When you see stats in a table, the column with pace doesn't show unit. I've never seen the unit but It's only my experience and I don't know what standard says about this (if any standard about it).", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475500672", "createdAt": "2020-08-24T10:26:20Z", "author": {"login": "rgmf"}, "path": "src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package de.dennisguse.opentracks.adapters;\n+\n+import android.content.Context;\n+import android.util.Pair;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.ArrayAdapter;\n+import android.widget.TextView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.StringUtils;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+\n+public class IntervalStatisticsAdapter extends ArrayAdapter<IntervalStatistics.Interval> {\n+\n+    private boolean metricUnits;\n+    private float accDistance = 0f;\n+\n+    public IntervalStatisticsAdapter(Context context, List<IntervalStatistics.Interval> intervalList) {\n+        super(context, R.layout.interval_stats_list_item, intervalList);\n+        metricUnits = PreferencesUtils.isMetricUnits(context);\n+    }\n+\n+    @NonNull\n+    @Override\n+    public View getView(int position, @Nullable View intervalView, @NonNull ViewGroup parent) {\n+        IntervalStatistics.Interval interval = getItem(position);\n+        ViewHolder viewHolder;\n+\n+        if (intervalView == null) {\n+            viewHolder = new ViewHolder();\n+\n+            intervalView = LayoutInflater.from(getContext()).inflate(R.layout.interval_stats_list_item, parent, false);\n+\n+            viewHolder.distance = intervalView.findViewById(R.id.interval_item_distance);\n+            viewHolder.speed = intervalView.findViewById(R.id.interval_item_speed);\n+            viewHolder.pace = intervalView.findViewById(R.id.interval_item_pace);\n+\n+            intervalView.setTag(viewHolder);\n+        } else {\n+            viewHolder = (ViewHolder) intervalView.getTag();\n+        }\n+\n+        accDistance += interval.getDistance();\n+        viewHolder.distance.setText(StringUtils.formatDistance(getContext(), accDistance, metricUnits));\n+        Pair<String, String> speedParts = StringUtils.getSpeedParts(getContext(), interval.getSpeed(), metricUnits, true);\n+        viewHolder.speed.setText(speedParts.first + \" \" + speedParts.second);\n+        viewHolder.pace.setText(StringUtils.getSpeedParts(getContext(), interval.getSpeed(), metricUnits, false).first);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NzMxMg=="}, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUwNjcxOA==", "bodyText": "One the statistics fragment pace is shown with unit.\ni don't know if it is meaningful to the user.", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475506718", "createdAt": "2020-08-24T10:32:49Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package de.dennisguse.opentracks.adapters;\n+\n+import android.content.Context;\n+import android.util.Pair;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.ArrayAdapter;\n+import android.widget.TextView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.StringUtils;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+\n+public class IntervalStatisticsAdapter extends ArrayAdapter<IntervalStatistics.Interval> {\n+\n+    private boolean metricUnits;\n+    private float accDistance = 0f;\n+\n+    public IntervalStatisticsAdapter(Context context, List<IntervalStatistics.Interval> intervalList) {\n+        super(context, R.layout.interval_stats_list_item, intervalList);\n+        metricUnits = PreferencesUtils.isMetricUnits(context);\n+    }\n+\n+    @NonNull\n+    @Override\n+    public View getView(int position, @Nullable View intervalView, @NonNull ViewGroup parent) {\n+        IntervalStatistics.Interval interval = getItem(position);\n+        ViewHolder viewHolder;\n+\n+        if (intervalView == null) {\n+            viewHolder = new ViewHolder();\n+\n+            intervalView = LayoutInflater.from(getContext()).inflate(R.layout.interval_stats_list_item, parent, false);\n+\n+            viewHolder.distance = intervalView.findViewById(R.id.interval_item_distance);\n+            viewHolder.speed = intervalView.findViewById(R.id.interval_item_speed);\n+            viewHolder.pace = intervalView.findViewById(R.id.interval_item_pace);\n+\n+            intervalView.setTag(viewHolder);\n+        } else {\n+            viewHolder = (ViewHolder) intervalView.getTag();\n+        }\n+\n+        accDistance += interval.getDistance();\n+        viewHolder.distance.setText(StringUtils.formatDistance(getContext(), accDistance, metricUnits));\n+        Pair<String, String> speedParts = StringUtils.getSpeedParts(getContext(), interval.getSpeed(), metricUnits, true);\n+        viewHolder.speed.setText(speedParts.first + \" \" + speedParts.second);\n+        viewHolder.pace.setText(StringUtils.getSpeedParts(getContext(), interval.getSpeed(), metricUnits, false).first);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NzMxMg=="}, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUxMDI0NQ==", "bodyText": "You are right... So I have to add here the unit too for maintain the coherence.\nAnyway, I'm going to look into about this matter... For the moment I'll add the unit\n;)", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475510245", "createdAt": "2020-08-24T10:38:57Z", "author": {"login": "rgmf"}, "path": "src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package de.dennisguse.opentracks.adapters;\n+\n+import android.content.Context;\n+import android.util.Pair;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.ArrayAdapter;\n+import android.widget.TextView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.StringUtils;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+\n+public class IntervalStatisticsAdapter extends ArrayAdapter<IntervalStatistics.Interval> {\n+\n+    private boolean metricUnits;\n+    private float accDistance = 0f;\n+\n+    public IntervalStatisticsAdapter(Context context, List<IntervalStatistics.Interval> intervalList) {\n+        super(context, R.layout.interval_stats_list_item, intervalList);\n+        metricUnits = PreferencesUtils.isMetricUnits(context);\n+    }\n+\n+    @NonNull\n+    @Override\n+    public View getView(int position, @Nullable View intervalView, @NonNull ViewGroup parent) {\n+        IntervalStatistics.Interval interval = getItem(position);\n+        ViewHolder viewHolder;\n+\n+        if (intervalView == null) {\n+            viewHolder = new ViewHolder();\n+\n+            intervalView = LayoutInflater.from(getContext()).inflate(R.layout.interval_stats_list_item, parent, false);\n+\n+            viewHolder.distance = intervalView.findViewById(R.id.interval_item_distance);\n+            viewHolder.speed = intervalView.findViewById(R.id.interval_item_speed);\n+            viewHolder.pace = intervalView.findViewById(R.id.interval_item_pace);\n+\n+            intervalView.setTag(viewHolder);\n+        } else {\n+            viewHolder = (ViewHolder) intervalView.getTag();\n+        }\n+\n+        accDistance += interval.getDistance();\n+        viewHolder.distance.setText(StringUtils.formatDistance(getContext(), accDistance, metricUnits));\n+        Pair<String, String> speedParts = StringUtils.getSpeedParts(getContext(), interval.getSpeed(), metricUnits, true);\n+        viewHolder.speed.setText(speedParts.first + \" \" + speedParts.second);\n+        viewHolder.pace.setText(StringUtils.getSpeedParts(getContext(), interval.getSpeed(), metricUnits, false).first);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NzMxMg=="}, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTAyNTY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNzo1OTo1OFrOHFOz4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMDozMDo1N1rOHFehfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NzU4NA==", "bodyText": "Can you add the comment here: why 5s?", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475247584", "createdAt": "2020-08-23T17:59:58Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package de.dennisguse.opentracks.fragments;\n+\n+import android.os.Bundle;\n+import android.os.Handler;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.LinearLayout;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.fragment.app.Fragment;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.ViewModelProvider;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatisticsModel;\n+import de.dennisguse.opentracks.views.IntervalListView;\n+import de.dennisguse.opentracks.views.IntervalReverseListView;\n+\n+/**\n+ * A fragment to display the intervals from recording track.\n+ */\n+public class IntervalsRecordingFragment extends Fragment implements IntervalListView.IntervalListListener {\n+\n+    private static final String TAG = IntervalsRecordingFragment.class.getSimpleName();\n+\n+    private static final long UI_UPDATE_INTERVAL = 5 * UnitConversions.ONE_SECOND_MS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUwNTAyMw==", "bodyText": "Of course ;)", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475505023", "createdAt": "2020-08-24T10:30:57Z", "author": {"login": "rgmf"}, "path": "src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package de.dennisguse.opentracks.fragments;\n+\n+import android.os.Bundle;\n+import android.os.Handler;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.LinearLayout;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.fragment.app.Fragment;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.ViewModelProvider;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatisticsModel;\n+import de.dennisguse.opentracks.views.IntervalListView;\n+import de.dennisguse.opentracks.views.IntervalReverseListView;\n+\n+/**\n+ * A fragment to display the intervals from recording track.\n+ */\n+public class IntervalsRecordingFragment extends Fragment implements IntervalListView.IntervalListListener {\n+\n+    private static final String TAG = IntervalsRecordingFragment.class.getSimpleName();\n+\n+    private static final long UI_UPDATE_INTERVAL = 5 * UnitConversions.ONE_SECOND_MS;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NzU4NA=="}, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTAyODM0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODowMzo1MVrOHFO1IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODowMzo1MVrOHFO1IA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NzkwNA==", "bodyText": "Why not check isResume() of parent class?\nThen we don't need stop.\nSee StatisticsRecordingFragment:107.", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475247904", "createdAt": "2020-08-23T18:03:51Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package de.dennisguse.opentracks.fragments;\n+\n+import android.os.Bundle;\n+import android.os.Handler;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.LinearLayout;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.fragment.app.Fragment;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.ViewModelProvider;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatisticsModel;\n+import de.dennisguse.opentracks.views.IntervalListView;\n+import de.dennisguse.opentracks.views.IntervalReverseListView;\n+\n+/**\n+ * A fragment to display the intervals from recording track.\n+ */\n+public class IntervalsRecordingFragment extends Fragment implements IntervalListView.IntervalListListener {\n+\n+    private static final String TAG = IntervalsRecordingFragment.class.getSimpleName();\n+\n+    private static final long UI_UPDATE_INTERVAL = 5 * UnitConversions.ONE_SECOND_MS;\n+\n+    private IntervalStatisticsModel viewModel;\n+    private IntervalReverseListView intervalListView;\n+\n+    private class IntervalRunner implements Runnable {\n+        private boolean stopped = false;\n+\n+        @Override\n+        public void run() {\n+            if (!stopped) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTAyODU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODowNDoxNFrOHFO1PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMDo0NzoxNFrOHFfEoA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NzkzMw==", "bodyText": "||", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475247933", "createdAt": "2020-08-23T18:04:14Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package de.dennisguse.opentracks.fragments;\n+\n+import android.os.Bundle;\n+import android.os.Handler;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.LinearLayout;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.fragment.app.Fragment;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.ViewModelProvider;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatisticsModel;\n+import de.dennisguse.opentracks.views.IntervalListView;\n+import de.dennisguse.opentracks.views.IntervalReverseListView;\n+\n+/**\n+ * A fragment to display the intervals from recording track.\n+ */\n+public class IntervalsRecordingFragment extends Fragment implements IntervalListView.IntervalListListener {\n+\n+    private static final String TAG = IntervalsRecordingFragment.class.getSimpleName();\n+\n+    private static final long UI_UPDATE_INTERVAL = 5 * UnitConversions.ONE_SECOND_MS;\n+\n+    private IntervalStatisticsModel viewModel;\n+    private IntervalReverseListView intervalListView;\n+\n+    private class IntervalRunner implements Runnable {\n+        private boolean stopped = false;\n+\n+        @Override\n+        public void run() {\n+            if (!stopped) {\n+                updateIntervals();\n+                intervalHandler.postDelayed(intervalRunner, UI_UPDATE_INTERVAL);\n+            }\n+        }\n+\n+        public void stop() {\n+            stopped = true;\n+        }\n+    }\n+\n+    private Handler intervalHandler = null;\n+    private IntervalRunner intervalRunner = null;\n+\n+    @Override\n+    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n+        return inflater.inflate(R.layout.intervals_recording, container, false);\n+    }\n+\n+    @Override\n+    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n+        super.onViewCreated(view, savedInstanceState);\n+\n+        intervalHandler = new Handler();\n+\n+        intervalListView = new IntervalReverseListView(getActivity(), this);\n+        intervalListView.setId(View.generateViewId());\n+        LinearLayout linearLayout = view.findViewById(R.id.root_view);\n+        linearLayout.removeAllViews();\n+        linearLayout.addView(intervalListView);\n+\n+        viewModel = new ViewModelProvider(this).get(IntervalStatisticsModel.class);\n+    }\n+\n+    @Override\n+    public void onResume() {\n+        super.onResume();\n+        if (intervalRunner == null) {\n+            intervalRunner = new IntervalRunner();\n+            intervalRunner.run();\n+        }\n+    }\n+\n+    @Override\n+    public void onPause() {\n+        super.onPause();\n+        if (intervalRunner != null) {\n+            intervalRunner.stop();\n+            intervalRunner = null;\n+        }\n+    }\n+\n+    @Override\n+    public void onDestroy() {\n+        super.onDestroy();\n+\n+        intervalListView.destroy();\n+        intervalListView = null;\n+        viewModel = null;\n+    }\n+\n+    /**\n+     * Update intervals through {@link IntervalStatisticsModel} view model.\n+     *\n+     * @param interval intervals will split in this interval if not null. If it's null then view model will use the default one.\n+     */\n+    private void updateIntervals(@Nullable IntervalStatisticsModel.IntervalOption interval) {\n+        if (viewModel == null | intervalListView == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUxNDAxNg==", "bodyText": "Oopps :(", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475514016", "createdAt": "2020-08-24T10:47:14Z", "author": {"login": "rgmf"}, "path": "src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package de.dennisguse.opentracks.fragments;\n+\n+import android.os.Bundle;\n+import android.os.Handler;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.LinearLayout;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.fragment.app.Fragment;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.ViewModelProvider;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatisticsModel;\n+import de.dennisguse.opentracks.views.IntervalListView;\n+import de.dennisguse.opentracks.views.IntervalReverseListView;\n+\n+/**\n+ * A fragment to display the intervals from recording track.\n+ */\n+public class IntervalsRecordingFragment extends Fragment implements IntervalListView.IntervalListListener {\n+\n+    private static final String TAG = IntervalsRecordingFragment.class.getSimpleName();\n+\n+    private static final long UI_UPDATE_INTERVAL = 5 * UnitConversions.ONE_SECOND_MS;\n+\n+    private IntervalStatisticsModel viewModel;\n+    private IntervalReverseListView intervalListView;\n+\n+    private class IntervalRunner implements Runnable {\n+        private boolean stopped = false;\n+\n+        @Override\n+        public void run() {\n+            if (!stopped) {\n+                updateIntervals();\n+                intervalHandler.postDelayed(intervalRunner, UI_UPDATE_INTERVAL);\n+            }\n+        }\n+\n+        public void stop() {\n+            stopped = true;\n+        }\n+    }\n+\n+    private Handler intervalHandler = null;\n+    private IntervalRunner intervalRunner = null;\n+\n+    @Override\n+    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n+        return inflater.inflate(R.layout.intervals_recording, container, false);\n+    }\n+\n+    @Override\n+    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n+        super.onViewCreated(view, savedInstanceState);\n+\n+        intervalHandler = new Handler();\n+\n+        intervalListView = new IntervalReverseListView(getActivity(), this);\n+        intervalListView.setId(View.generateViewId());\n+        LinearLayout linearLayout = view.findViewById(R.id.root_view);\n+        linearLayout.removeAllViews();\n+        linearLayout.addView(intervalListView);\n+\n+        viewModel = new ViewModelProvider(this).get(IntervalStatisticsModel.class);\n+    }\n+\n+    @Override\n+    public void onResume() {\n+        super.onResume();\n+        if (intervalRunner == null) {\n+            intervalRunner = new IntervalRunner();\n+            intervalRunner.run();\n+        }\n+    }\n+\n+    @Override\n+    public void onPause() {\n+        super.onPause();\n+        if (intervalRunner != null) {\n+            intervalRunner.stop();\n+            intervalRunner = null;\n+        }\n+    }\n+\n+    @Override\n+    public void onDestroy() {\n+        super.onDestroy();\n+\n+        intervalListView.destroy();\n+        intervalListView = null;\n+        viewModel = null;\n+    }\n+\n+    /**\n+     * Update intervals through {@link IntervalStatisticsModel} view model.\n+     *\n+     * @param interval intervals will split in this interval if not null. If it's null then view model will use the default one.\n+     */\n+    private void updateIntervals(@Nullable IntervalStatisticsModel.IntervalOption interval) {\n+        if (viewModel == null | intervalListView == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NzkzMw=="}, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTAyOTgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODowNToyMlrOHFO1zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMDo0OTo0MFrOHFfItA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0ODA3OQ==", "bodyText": "Why initialize some vars with = null directly?\nIsn't implicit?", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475248079", "createdAt": "2020-08-23T18:05:22Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java", "diffHunk": "@@ -24,38 +24,48 @@\n import android.view.MotionEvent;\n import android.view.View;\n import android.view.ViewGroup;\n+import android.widget.LinearLayout;\n import android.widget.Spinner;\n import android.widget.TextView;\n \n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n import androidx.fragment.app.Fragment;\n+import androidx.lifecycle.ViewModelProvider;\n \n import de.dennisguse.opentracks.R;\n import de.dennisguse.opentracks.TrackRecordedActivity;\n-import de.dennisguse.opentracks.content.TrackDataHub;\n-import de.dennisguse.opentracks.content.TrackDataListener;\n import de.dennisguse.opentracks.content.data.Track;\n-import de.dennisguse.opentracks.content.data.TrackPoint;\n-import de.dennisguse.opentracks.content.data.Waypoint;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n import de.dennisguse.opentracks.stats.TrackStatistics;\n import de.dennisguse.opentracks.util.PreferencesUtils;\n import de.dennisguse.opentracks.util.StringUtils;\n import de.dennisguse.opentracks.util.TrackIconUtils;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatisticsModel;\n+import de.dennisguse.opentracks.views.IntervalListView;\n \n /**\n  * A fragment to display track statistics to the user.\n  *\n  * @author Sandor Dornbush\n  * @author Rodrigo Damazio\n  */\n-public class StatisticsRecordedFragment extends Fragment implements TrackDataListener {\n+public class StatisticsRecordedFragment extends Fragment implements IntervalListView.IntervalListListener {\n+\n+    private static final String TRACK_ID_KEY = \"trackId\";\n \n     private TrackStatistics trackStatistics = null;\n     private String category = \"\";\n+    private Track track;\n+\n+    private IntervalStatisticsModel viewModel = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUxNTA2MA==", "bodyText": "Lack of Java experience... I won't forget anymore \ud83d\ude04", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475515060", "createdAt": "2020-08-24T10:49:40Z", "author": {"login": "rgmf"}, "path": "src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java", "diffHunk": "@@ -24,38 +24,48 @@\n import android.view.MotionEvent;\n import android.view.View;\n import android.view.ViewGroup;\n+import android.widget.LinearLayout;\n import android.widget.Spinner;\n import android.widget.TextView;\n \n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n import androidx.fragment.app.Fragment;\n+import androidx.lifecycle.ViewModelProvider;\n \n import de.dennisguse.opentracks.R;\n import de.dennisguse.opentracks.TrackRecordedActivity;\n-import de.dennisguse.opentracks.content.TrackDataHub;\n-import de.dennisguse.opentracks.content.TrackDataListener;\n import de.dennisguse.opentracks.content.data.Track;\n-import de.dennisguse.opentracks.content.data.TrackPoint;\n-import de.dennisguse.opentracks.content.data.Waypoint;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n import de.dennisguse.opentracks.stats.TrackStatistics;\n import de.dennisguse.opentracks.util.PreferencesUtils;\n import de.dennisguse.opentracks.util.StringUtils;\n import de.dennisguse.opentracks.util.TrackIconUtils;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatisticsModel;\n+import de.dennisguse.opentracks.views.IntervalListView;\n \n /**\n  * A fragment to display track statistics to the user.\n  *\n  * @author Sandor Dornbush\n  * @author Rodrigo Damazio\n  */\n-public class StatisticsRecordedFragment extends Fragment implements TrackDataListener {\n+public class StatisticsRecordedFragment extends Fragment implements IntervalListView.IntervalListListener {\n+\n+    private static final String TRACK_ID_KEY = \"trackId\";\n \n     private TrackStatistics trackStatistics = null;\n     private String category = \"\";\n+    private Track track;\n+\n+    private IntervalStatisticsModel viewModel = null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0ODA3OQ=="}, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTAzMTIyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODowNjozMVrOHFO2bg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODowNjozMVrOHFO2bg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0ODIzOA==", "bodyText": "+1", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475248238", "createdAt": "2020-08-23T18:06:31Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java", "diffHunk": "@@ -135,28 +174,28 @@ public void onActivityCreated(Bundle savedInstanceState) {\n         });\n     }\n \n+    private void addIntervals() {\n+        viewModel.getIntervalStats(track.getId()).observe(getActivity(), intervalStatistics -> {\n+            if (intervalStatistics != null) {\n+                intervalListView.display(intervalStatistics.getIntervalList());\n+            }\n+        });\n+    }\n+\n     @Override\n     public void onResume() {\n         super.onResume();\n         PreferencesUtils.register(getContext(), sharedPreferenceChangeListener);\n \n-        TrackDataHub trackDataHub = ((TrackRecordedActivity) getActivity()).getTrackDataHub();\n-        trackDataHub.registerTrackDataListener(this, true, false, true, true);\n-    }\n-\n-    @Override\n-    public void onPause() {\n-        super.onPause();\n-        PreferencesUtils.unregister(getContext(), sharedPreferenceChangeListener);\n-\n-        TrackDataHub trackDataHub = ((TrackRecordedActivity) getActivity()).getTrackDataHub();\n-        trackDataHub.unregisterTrackDataListener(this);\n+        loadStatistics();\n     }\n \n     @Override\n     public void onDestroyView() {\n         super.onDestroyView();\n \n+        PreferencesUtils.unregister(getContext(), sharedPreferenceChangeListener);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTAzMTY3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODowNzowNlrOHFO2nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODowNzowNlrOHFO2nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0ODI4Nw==", "bodyText": "Commt is helpful?", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475248287", "createdAt": "2020-08-23T18:07:06Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java", "diffHunk": "@@ -291,5 +298,19 @@ private void updateUI() {\n             speedMovingValue.setText(parts.first);\n             speedMovingUnit.setText(parts.second);\n         }\n+\n+        // Set intervals.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 211}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTAzNDA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/util/UnitConversions.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoxMDowOVrOHFO3vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMDo1Njo0MFrOHFfWbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0ODU3Mg==", "bodyText": "Isn't this:\nCan you introduce\npublic static final double MI_TO_KM = 1 / KM_TO_MI; public static final double MI_TO_M = MI_TO_KM * KM_TO_M;\nPS: Did not test this.....", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475248572", "createdAt": "2020-08-23T18:10:09Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/util/UnitConversions.java", "diffHunk": "@@ -51,6 +51,8 @@\n     public static final double MM_TO_M = 0.001;\n \n     // Distance\n+    // multiplication factor to convert miles to meters\n+    public static final double MI_TO_M = 1609.344;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTUxODU3Mw==", "bodyText": "Can you introduce\npublic static final double MI_TO_KM = 1 / KM_TO_MI; public static final double MI_TO_M = MI_TO_KM * KM_TO_M;\n\n\ud83d\udc4d\n\nPS: Did not test this.....\n\nI check it out and I'll add tests if not any.", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475518573", "createdAt": "2020-08-24T10:56:40Z", "author": {"login": "rgmf"}, "path": "src/main/java/de/dennisguse/opentracks/util/UnitConversions.java", "diffHunk": "@@ -51,6 +51,8 @@\n     public static final double MM_TO_M = 0.001;\n \n     // Distance\n+    // multiplication factor to convert miles to meters\n+    public static final double MI_TO_M = 1609.344;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0ODU3Mg=="}, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTAzNDgwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoxMToxOVrOHFO4EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoxMToxOVrOHFO4EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0ODY1Nw==", "bodyText": "Default initialize in l:11 and then use intervalList.clear();\nThis may save some memory allocation (or the runtime is really good).", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475248657", "createdAt": "2020-08-23T18:11:19Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n+        intervalList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTAzNTI2OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoxMTo0N1rOHFO4SQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoxMTo0N1rOHFO4SQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0ODcxMw==", "bodyText": "distance_m?", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475248713", "createdAt": "2020-08-23T18:11:47Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n+        intervalList = new ArrayList<>();\n+\n+        if (trackPointList == null || trackPointList.size() == 0) {\n+            return;\n+        }\n+\n+        Interval interval = new Interval();\n+        for (int i = 1; i < trackPointList.size(); i++) {\n+            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n+            TrackPoint trackPoint = trackPointList.get(i);\n+\n+            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n+                interval.distance += prevTrackPoint.distanceTo(trackPoint);\n+                interval.time += trackPoint.getTime() - prevTrackPoint.getTime();\n+\n+                if (interval.distance >= distanceInterval) {\n+                    float adjustFactor = distanceInterval / interval.distance;\n+                    Interval adjustedInterval = new Interval(interval);\n+                    adjustedInterval.distance *= adjustFactor;\n+                    adjustedInterval.time *= adjustFactor;\n+\n+                    intervalList.add(adjustedInterval);\n+\n+                    Interval newInterval = new Interval();\n+                    newInterval.distance = interval.distance - adjustedInterval.distance;\n+                    newInterval.time = interval.time - adjustedInterval.time;\n+\n+                    interval = newInterval;\n+                }\n+            }\n+        }\n+\n+        if (interval.distance > 1f) {\n+            intervalList.add(interval);\n+        }\n+    }\n+\n+    public List<Interval> getIntervalList() {\n+        return intervalList;\n+    }\n+\n+    public static class Interval {\n+        private float distance = 0f;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTAzNTQyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoxMTo1NVrOHFO4XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoxMTo1NVrOHFO4XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0ODczMw==", "bodyText": "time_ms?", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475248733", "createdAt": "2020-08-23T18:11:55Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n+        intervalList = new ArrayList<>();\n+\n+        if (trackPointList == null || trackPointList.size() == 0) {\n+            return;\n+        }\n+\n+        Interval interval = new Interval();\n+        for (int i = 1; i < trackPointList.size(); i++) {\n+            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n+            TrackPoint trackPoint = trackPointList.get(i);\n+\n+            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n+                interval.distance += prevTrackPoint.distanceTo(trackPoint);\n+                interval.time += trackPoint.getTime() - prevTrackPoint.getTime();\n+\n+                if (interval.distance >= distanceInterval) {\n+                    float adjustFactor = distanceInterval / interval.distance;\n+                    Interval adjustedInterval = new Interval(interval);\n+                    adjustedInterval.distance *= adjustFactor;\n+                    adjustedInterval.time *= adjustFactor;\n+\n+                    intervalList.add(adjustedInterval);\n+\n+                    Interval newInterval = new Interval();\n+                    newInterval.distance = interval.distance - adjustedInterval.distance;\n+                    newInterval.time = interval.time - adjustedInterval.time;\n+\n+                    interval = newInterval;\n+                }\n+            }\n+        }\n+\n+        if (interval.distance > 1f) {\n+            intervalList.add(interval);\n+        }\n+    }\n+\n+    public List<Interval> getIntervalList() {\n+        return intervalList;\n+    }\n+\n+    public static class Interval {\n+        private float distance = 0f;\n+        private float time = 0f;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 57}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTAzNjk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoxNDoxNFrOHFO5GQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoxNDoxNFrOHFO5GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0ODkyMQ==", "bodyText": "What about:\ninterval = new Interval(interval.distance - adjustedInterval.distance, interval.time - adjustedInterval.time);", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475248921", "createdAt": "2020-08-23T18:14:14Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n+        intervalList = new ArrayList<>();\n+\n+        if (trackPointList == null || trackPointList.size() == 0) {\n+            return;\n+        }\n+\n+        Interval interval = new Interval();\n+        for (int i = 1; i < trackPointList.size(); i++) {\n+            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n+            TrackPoint trackPoint = trackPointList.get(i);\n+\n+            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n+                interval.distance += prevTrackPoint.distanceTo(trackPoint);\n+                interval.time += trackPoint.getTime() - prevTrackPoint.getTime();\n+\n+                if (interval.distance >= distanceInterval) {\n+                    float adjustFactor = distanceInterval / interval.distance;\n+                    Interval adjustedInterval = new Interval(interval);\n+                    adjustedInterval.distance *= adjustFactor;\n+                    adjustedInterval.time *= adjustFactor;\n+\n+                    intervalList.add(adjustedInterval);\n+\n+                    Interval newInterval = new Interval();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTAzODEyOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoxNToxOVrOHFO5nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoxNToxOVrOHFO5nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTA1Mg==", "bodyText": "For Interval:\npublic void adjust(float adjustFactor) {\ndistance *= adjustFactor;\ntime *= adjustFactor;\n}", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475249052", "createdAt": "2020-08-23T18:15:19Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n+        intervalList = new ArrayList<>();\n+\n+        if (trackPointList == null || trackPointList.size() == 0) {\n+            return;\n+        }\n+\n+        Interval interval = new Interval();\n+        for (int i = 1; i < trackPointList.size(); i++) {\n+            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n+            TrackPoint trackPoint = trackPointList.get(i);\n+\n+            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n+                interval.distance += prevTrackPoint.distanceTo(trackPoint);\n+                interval.time += trackPoint.getTime() - prevTrackPoint.getTime();\n+\n+                if (interval.distance >= distanceInterval) {\n+                    float adjustFactor = distanceInterval / interval.distance;\n+                    Interval adjustedInterval = new Interval(interval);\n+                    adjustedInterval.distance *= adjustFactor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTAzODI3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoxNTo0OFrOHFO5tA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoxNTo0OFrOHFO5tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTA3Ng==", "bodyText": "Put constructor(s) first", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475249076", "createdAt": "2020-08-23T18:15:48Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n+        intervalList = new ArrayList<>();\n+\n+        if (trackPointList == null || trackPointList.size() == 0) {\n+            return;\n+        }\n+\n+        Interval interval = new Interval();\n+        for (int i = 1; i < trackPointList.size(); i++) {\n+            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n+            TrackPoint trackPoint = trackPointList.get(i);\n+\n+            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n+                interval.distance += prevTrackPoint.distanceTo(trackPoint);\n+                interval.time += trackPoint.getTime() - prevTrackPoint.getTime();\n+\n+                if (interval.distance >= distanceInterval) {\n+                    float adjustFactor = distanceInterval / interval.distance;\n+                    Interval adjustedInterval = new Interval(interval);\n+                    adjustedInterval.distance *= adjustFactor;\n+                    adjustedInterval.time *= adjustFactor;\n+\n+                    intervalList.add(adjustedInterval);\n+\n+                    Interval newInterval = new Interval();\n+                    newInterval.distance = interval.distance - adjustedInterval.distance;\n+                    newInterval.time = interval.time - adjustedInterval.time;\n+\n+                    interval = newInterval;\n+                }\n+            }\n+        }\n+\n+        if (interval.distance > 1f) {\n+            intervalList.add(interval);\n+        }\n+    }\n+\n+    public List<Interval> getIntervalList() {\n+        return intervalList;\n+    }\n+\n+    public static class Interval {\n+        private float distance = 0f;\n+        private float time = 0f;\n+\n+        public float getDistance() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTAzODMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoxNTo1N1rOHFO5wQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoxNTo1N1rOHFO5wQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTA4OQ==", "bodyText": "getSpeed_ms()", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475249089", "createdAt": "2020-08-23T18:15:57Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n+        intervalList = new ArrayList<>();\n+\n+        if (trackPointList == null || trackPointList.size() == 0) {\n+            return;\n+        }\n+\n+        Interval interval = new Interval();\n+        for (int i = 1; i < trackPointList.size(); i++) {\n+            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n+            TrackPoint trackPoint = trackPointList.get(i);\n+\n+            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n+                interval.distance += prevTrackPoint.distanceTo(trackPoint);\n+                interval.time += trackPoint.getTime() - prevTrackPoint.getTime();\n+\n+                if (interval.distance >= distanceInterval) {\n+                    float adjustFactor = distanceInterval / interval.distance;\n+                    Interval adjustedInterval = new Interval(interval);\n+                    adjustedInterval.distance *= adjustFactor;\n+                    adjustedInterval.time *= adjustFactor;\n+\n+                    intervalList.add(adjustedInterval);\n+\n+                    Interval newInterval = new Interval();\n+                    newInterval.distance = interval.distance - adjustedInterval.distance;\n+                    newInterval.time = interval.time - adjustedInterval.time;\n+\n+                    interval = newInterval;\n+                }\n+            }\n+        }\n+\n+        if (interval.distance > 1f) {\n+            intervalList.add(interval);\n+        }\n+    }\n+\n+    public List<Interval> getIntervalList() {\n+        return intervalList;\n+    }\n+\n+    public static class Interval {\n+        private float distance = 0f;\n+        private float time = 0f;\n+\n+        public float getDistance() {\n+            return distance;\n+        }\n+\n+        public Interval() {}\n+\n+        public Interval(Interval i) {\n+            distance = i.distance;\n+            time = i.time;\n+        }\n+\n+        /**\n+         * @return speed of the interval in m/s.\n+         */\n+        public float getSpeed() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTAzODk3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoxNjo0N1rOHFO6DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzo1Mzo0OVrOHFl4Xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTE2NA==", "bodyText": "Why application?\nI guess, we pass it nowwhere else, right?\nIs this just a context?", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475249164", "createdAt": "2020-08-23T18:16:47Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+/**\n+ * This view model is used to load intervals for a track.\n+ * It uses a default interval but it can be set from outside to manage the interval length.\n+ */\n+public class IntervalStatisticsModel extends AndroidViewModel {\n+\n+    private MutableLiveData<IntervalStatistics> intervalStats;\n+    private IntervalOption interval;\n+\n+    public IntervalStatisticsModel(@NonNull Application application) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYyNTU2Ng==", "bodyText": "AndroidViewModel needs Application (when I call super(application)).", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475625566", "createdAt": "2020-08-24T13:53:49Z", "author": {"login": "rgmf"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+/**\n+ * This view model is used to load intervals for a track.\n+ * It uses a default interval but it can be set from outside to manage the interval length.\n+ */\n+public class IntervalStatisticsModel extends AndroidViewModel {\n+\n+    private MutableLiveData<IntervalStatistics> intervalStats;\n+    private IntervalOption interval;\n+\n+    public IntervalStatisticsModel(@NonNull Application application) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTE2NA=="}, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTA0MjUzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoyMToxNlrOHFO7tQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxMzo1Nzo0NFrOHFmLjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTU4OQ==", "bodyText": "What is the benefit of using a method?\nI would also argue that we should fail immediately rather than returning a default option.\n   IntervalOption.values();", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475249589", "createdAt": "2020-08-23T18:21:16Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+/**\n+ * This view model is used to load intervals for a track.\n+ * It uses a default interval but it can be set from outside to manage the interval length.\n+ */\n+public class IntervalStatisticsModel extends AndroidViewModel {\n+\n+    private MutableLiveData<IntervalStatistics> intervalStats;\n+    private IntervalOption interval;\n+\n+    public IntervalStatisticsModel(@NonNull Application application) {\n+        super(application);\n+        interval = IntervalOption.OPTION_1;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(Track.Id trackId, IntervalOption interval) {\n+        if (intervalStats == null || this.interval != interval) {\n+            intervalStats = new MutableLiveData<>();\n+            this.interval = interval;\n+            loadIntervalStats(trackId);\n+        }\n+        return intervalStats;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(Track.Id trackId) {\n+        return getIntervalStats(trackId, interval);\n+    }\n+\n+    /**\n+     * Call this method when you want to force the view model to re-load intervals.\n+     */\n+    public void invalidate() {\n+        intervalStats = null;\n+    }\n+\n+    private void loadIntervalStats(Track.Id trackId) {\n+        new Thread(() -> {\n+            Context context = getApplication().getApplicationContext();\n+            ContentProviderUtils contentProviderUtils = new ContentProviderUtils(context);\n+            List<TrackPoint> trackPointList = contentProviderUtils.getTrackPoints(trackId);\n+\n+            IntervalStatistics intervalStatistics = new IntervalStatistics();\n+            float distanceInterval = PreferencesUtils.isMetricUnits(context) ? (float) (interval.getValue() * UnitConversions.KM_TO_M) : (float) (interval.getValue() * UnitConversions.MI_TO_M);\n+            intervalStatistics.build(trackPointList, distanceInterval);\n+\n+            intervalStats.postValue(intervalStatistics);\n+        }).start();\n+    }\n+\n+    /**\n+     * Intervals length this view model support.\n+     */\n+    public enum IntervalOption {\n+        OPTION_1(1),\n+        OPTION_2(2),\n+        OPTION_3(3),\n+        OPTION_4(4),\n+        OPTION_5(5),\n+        OPTION_10(10),\n+        OPTION_20(20),\n+        OPTION_50(50);\n+\n+        private int value;\n+\n+        IntervalOption(int value) {\n+            this.value = value;\n+        }\n+\n+        /**\n+         * @param pos position of the interval option.\n+         * @return    the interval option that is in the position pos.\n+         */\n+        public static IntervalOption getIntervalOption(int pos) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTYzMDQ3OA==", "bodyText": "The benefit of using the method was not to fail immediately. I've removed it then ;)", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475630478", "createdAt": "2020-08-24T13:57:44Z", "author": {"login": "rgmf"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+/**\n+ * This view model is used to load intervals for a track.\n+ * It uses a default interval but it can be set from outside to manage the interval length.\n+ */\n+public class IntervalStatisticsModel extends AndroidViewModel {\n+\n+    private MutableLiveData<IntervalStatistics> intervalStats;\n+    private IntervalOption interval;\n+\n+    public IntervalStatisticsModel(@NonNull Application application) {\n+        super(application);\n+        interval = IntervalOption.OPTION_1;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(Track.Id trackId, IntervalOption interval) {\n+        if (intervalStats == null || this.interval != interval) {\n+            intervalStats = new MutableLiveData<>();\n+            this.interval = interval;\n+            loadIntervalStats(trackId);\n+        }\n+        return intervalStats;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(Track.Id trackId) {\n+        return getIntervalStats(trackId, interval);\n+    }\n+\n+    /**\n+     * Call this method when you want to force the view model to re-load intervals.\n+     */\n+    public void invalidate() {\n+        intervalStats = null;\n+    }\n+\n+    private void loadIntervalStats(Track.Id trackId) {\n+        new Thread(() -> {\n+            Context context = getApplication().getApplicationContext();\n+            ContentProviderUtils contentProviderUtils = new ContentProviderUtils(context);\n+            List<TrackPoint> trackPointList = contentProviderUtils.getTrackPoints(trackId);\n+\n+            IntervalStatistics intervalStatistics = new IntervalStatistics();\n+            float distanceInterval = PreferencesUtils.isMetricUnits(context) ? (float) (interval.getValue() * UnitConversions.KM_TO_M) : (float) (interval.getValue() * UnitConversions.MI_TO_M);\n+            intervalStatistics.build(trackPointList, distanceInterval);\n+\n+            intervalStats.postValue(intervalStatistics);\n+        }).start();\n+    }\n+\n+    /**\n+     * Intervals length this view model support.\n+     */\n+    public enum IntervalOption {\n+        OPTION_1(1),\n+        OPTION_2(2),\n+        OPTION_3(3),\n+        OPTION_4(4),\n+        OPTION_5(5),\n+        OPTION_10(10),\n+        OPTION_20(20),\n+        OPTION_50(50);\n+\n+        private int value;\n+\n+        IntervalOption(int value) {\n+            this.value = value;\n+        }\n+\n+        /**\n+         * @param pos position of the interval option.\n+         * @return    the interval option that is in the position pos.\n+         */\n+        public static IntervalOption getIntervalOption(int pos) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTU4OQ=="}, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTA0Mzg5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoyMzowMlrOHFO8VQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoyMzowMlrOHFO8VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTc0OQ==", "bodyText": "either static methods first or at the end.", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475249749", "createdAt": "2020-08-23T18:23:02Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+/**\n+ * This view model is used to load intervals for a track.\n+ * It uses a default interval but it can be set from outside to manage the interval length.\n+ */\n+public class IntervalStatisticsModel extends AndroidViewModel {\n+\n+    private MutableLiveData<IntervalStatistics> intervalStats;\n+    private IntervalOption interval;\n+\n+    public IntervalStatisticsModel(@NonNull Application application) {\n+        super(application);\n+        interval = IntervalOption.OPTION_1;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(Track.Id trackId, IntervalOption interval) {\n+        if (intervalStats == null || this.interval != interval) {\n+            intervalStats = new MutableLiveData<>();\n+            this.interval = interval;\n+            loadIntervalStats(trackId);\n+        }\n+        return intervalStats;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(Track.Id trackId) {\n+        return getIntervalStats(trackId, interval);\n+    }\n+\n+    /**\n+     * Call this method when you want to force the view model to re-load intervals.\n+     */\n+    public void invalidate() {\n+        intervalStats = null;\n+    }\n+\n+    private void loadIntervalStats(Track.Id trackId) {\n+        new Thread(() -> {\n+            Context context = getApplication().getApplicationContext();\n+            ContentProviderUtils contentProviderUtils = new ContentProviderUtils(context);\n+            List<TrackPoint> trackPointList = contentProviderUtils.getTrackPoints(trackId);\n+\n+            IntervalStatistics intervalStatistics = new IntervalStatistics();\n+            float distanceInterval = PreferencesUtils.isMetricUnits(context) ? (float) (interval.getValue() * UnitConversions.KM_TO_M) : (float) (interval.getValue() * UnitConversions.MI_TO_M);\n+            intervalStatistics.build(trackPointList, distanceInterval);\n+\n+            intervalStats.postValue(intervalStatistics);\n+        }).start();\n+    }\n+\n+    /**\n+     * Intervals length this view model support.\n+     */\n+    public enum IntervalOption {\n+        OPTION_1(1),\n+        OPTION_2(2),\n+        OPTION_3(3),\n+        OPTION_4(4),\n+        OPTION_5(5),\n+        OPTION_10(10),\n+        OPTION_20(20),\n+        OPTION_50(50);\n+\n+        private int value;\n+\n+        IntervalOption(int value) {\n+            this.value = value;\n+        }\n+\n+        /**\n+         * @param pos position of the interval option.\n+         * @return    the interval option that is in the position pos.\n+         */\n+        public static IntervalOption getIntervalOption(int pos) {\n+            if (values().length > pos) {\n+                return values()[pos];\n+            } else {\n+                return OPTION_1;\n+            }\n+        }\n+\n+        public int getValue() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 98}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTA0NzY4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoyNzo1MlrOHFO-IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNTo0NToxOFrOHFrI6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1MDIwOA==", "bodyText": "This is just for to string conversion, right?\nIf yes, then I would move this functionality to the actual user of this function.\n        int[] a = {1};\n        Arrays.stream(a).mapToObj(String::valueOf).toArray(String[]::new);", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475250208", "createdAt": "2020-08-23T18:27:52Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+/**\n+ * This view model is used to load intervals for a track.\n+ * It uses a default interval but it can be set from outside to manage the interval length.\n+ */\n+public class IntervalStatisticsModel extends AndroidViewModel {\n+\n+    private MutableLiveData<IntervalStatistics> intervalStats;\n+    private IntervalOption interval;\n+\n+    public IntervalStatisticsModel(@NonNull Application application) {\n+        super(application);\n+        interval = IntervalOption.OPTION_1;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(Track.Id trackId, IntervalOption interval) {\n+        if (intervalStats == null || this.interval != interval) {\n+            intervalStats = new MutableLiveData<>();\n+            this.interval = interval;\n+            loadIntervalStats(trackId);\n+        }\n+        return intervalStats;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(Track.Id trackId) {\n+        return getIntervalStats(trackId, interval);\n+    }\n+\n+    /**\n+     * Call this method when you want to force the view model to re-load intervals.\n+     */\n+    public void invalidate() {\n+        intervalStats = null;\n+    }\n+\n+    private void loadIntervalStats(Track.Id trackId) {\n+        new Thread(() -> {\n+            Context context = getApplication().getApplicationContext();\n+            ContentProviderUtils contentProviderUtils = new ContentProviderUtils(context);\n+            List<TrackPoint> trackPointList = contentProviderUtils.getTrackPoints(trackId);\n+\n+            IntervalStatistics intervalStatistics = new IntervalStatistics();\n+            float distanceInterval = PreferencesUtils.isMetricUnits(context) ? (float) (interval.getValue() * UnitConversions.KM_TO_M) : (float) (interval.getValue() * UnitConversions.MI_TO_M);\n+            intervalStatistics.build(trackPointList, distanceInterval);\n+\n+            intervalStats.postValue(intervalStatistics);\n+        }).start();\n+    }\n+\n+    /**\n+     * Intervals length this view model support.\n+     */\n+    public enum IntervalOption {\n+        OPTION_1(1),\n+        OPTION_2(2),\n+        OPTION_3(3),\n+        OPTION_4(4),\n+        OPTION_5(5),\n+        OPTION_10(10),\n+        OPTION_20(20),\n+        OPTION_50(50);\n+\n+        private int value;\n+\n+        IntervalOption(int value) {\n+            this.value = value;\n+        }\n+\n+        /**\n+         * @param pos position of the interval option.\n+         * @return    the interval option that is in the position pos.\n+         */\n+        public static IntervalOption getIntervalOption(int pos) {\n+            if (values().length > pos) {\n+                return values()[pos];\n+            } else {\n+                return OPTION_1;\n+            }\n+        }\n+\n+        public int getValue() {\n+            return value;\n+        }\n+\n+        /**\n+         * @return a string array with all options.\n+         */\n+        public static String[] getAllValues() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY1NjExMg==", "bodyText": "Is this okay?\nReview this please:\nint[] intValues = Arrays.stream(IntervalStatisticsModel.IntervalOption.values()).mapToInt(i -> i.getValue()).toArray();\nspinnerIntervals.setAdapter(new ArrayAdapter<>(getContext(), android.R.layout.simple_spinner_dropdown_item, Arrays.stream(intValues).mapToObj(String::valueOf).toArray(String[]::new)));", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475656112", "createdAt": "2020-08-24T14:32:04Z", "author": {"login": "rgmf"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+/**\n+ * This view model is used to load intervals for a track.\n+ * It uses a default interval but it can be set from outside to manage the interval length.\n+ */\n+public class IntervalStatisticsModel extends AndroidViewModel {\n+\n+    private MutableLiveData<IntervalStatistics> intervalStats;\n+    private IntervalOption interval;\n+\n+    public IntervalStatisticsModel(@NonNull Application application) {\n+        super(application);\n+        interval = IntervalOption.OPTION_1;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(Track.Id trackId, IntervalOption interval) {\n+        if (intervalStats == null || this.interval != interval) {\n+            intervalStats = new MutableLiveData<>();\n+            this.interval = interval;\n+            loadIntervalStats(trackId);\n+        }\n+        return intervalStats;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(Track.Id trackId) {\n+        return getIntervalStats(trackId, interval);\n+    }\n+\n+    /**\n+     * Call this method when you want to force the view model to re-load intervals.\n+     */\n+    public void invalidate() {\n+        intervalStats = null;\n+    }\n+\n+    private void loadIntervalStats(Track.Id trackId) {\n+        new Thread(() -> {\n+            Context context = getApplication().getApplicationContext();\n+            ContentProviderUtils contentProviderUtils = new ContentProviderUtils(context);\n+            List<TrackPoint> trackPointList = contentProviderUtils.getTrackPoints(trackId);\n+\n+            IntervalStatistics intervalStatistics = new IntervalStatistics();\n+            float distanceInterval = PreferencesUtils.isMetricUnits(context) ? (float) (interval.getValue() * UnitConversions.KM_TO_M) : (float) (interval.getValue() * UnitConversions.MI_TO_M);\n+            intervalStatistics.build(trackPointList, distanceInterval);\n+\n+            intervalStats.postValue(intervalStatistics);\n+        }).start();\n+    }\n+\n+    /**\n+     * Intervals length this view model support.\n+     */\n+    public enum IntervalOption {\n+        OPTION_1(1),\n+        OPTION_2(2),\n+        OPTION_3(3),\n+        OPTION_4(4),\n+        OPTION_5(5),\n+        OPTION_10(10),\n+        OPTION_20(20),\n+        OPTION_50(50);\n+\n+        private int value;\n+\n+        IntervalOption(int value) {\n+            this.value = value;\n+        }\n+\n+        /**\n+         * @param pos position of the interval option.\n+         * @return    the interval option that is in the position pos.\n+         */\n+        public static IntervalOption getIntervalOption(int pos) {\n+            if (values().length > pos) {\n+                return values()[pos];\n+            } else {\n+                return OPTION_1;\n+            }\n+        }\n+\n+        public int getValue() {\n+            return value;\n+        }\n+\n+        /**\n+         * @return a string array with all options.\n+         */\n+        public static String[] getAllValues() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1MDIwOA=="}, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY5NDc5OQ==", "bodyText": "Why not?\nString[] values = Arrays.stream(IntervalStatisticsModel.IntervalOption.values()).mapToObj(String::valueOf).toArray(String[]::new))\nspinnerIntervals.setAdapter(new ArrayAdapter<>(getContext(), android.R.layout.simple_spinner_dropdown_item, values);", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475694799", "createdAt": "2020-08-24T15:20:38Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+/**\n+ * This view model is used to load intervals for a track.\n+ * It uses a default interval but it can be set from outside to manage the interval length.\n+ */\n+public class IntervalStatisticsModel extends AndroidViewModel {\n+\n+    private MutableLiveData<IntervalStatistics> intervalStats;\n+    private IntervalOption interval;\n+\n+    public IntervalStatisticsModel(@NonNull Application application) {\n+        super(application);\n+        interval = IntervalOption.OPTION_1;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(Track.Id trackId, IntervalOption interval) {\n+        if (intervalStats == null || this.interval != interval) {\n+            intervalStats = new MutableLiveData<>();\n+            this.interval = interval;\n+            loadIntervalStats(trackId);\n+        }\n+        return intervalStats;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(Track.Id trackId) {\n+        return getIntervalStats(trackId, interval);\n+    }\n+\n+    /**\n+     * Call this method when you want to force the view model to re-load intervals.\n+     */\n+    public void invalidate() {\n+        intervalStats = null;\n+    }\n+\n+    private void loadIntervalStats(Track.Id trackId) {\n+        new Thread(() -> {\n+            Context context = getApplication().getApplicationContext();\n+            ContentProviderUtils contentProviderUtils = new ContentProviderUtils(context);\n+            List<TrackPoint> trackPointList = contentProviderUtils.getTrackPoints(trackId);\n+\n+            IntervalStatistics intervalStatistics = new IntervalStatistics();\n+            float distanceInterval = PreferencesUtils.isMetricUnits(context) ? (float) (interval.getValue() * UnitConversions.KM_TO_M) : (float) (interval.getValue() * UnitConversions.MI_TO_M);\n+            intervalStatistics.build(trackPointList, distanceInterval);\n+\n+            intervalStats.postValue(intervalStatistics);\n+        }).start();\n+    }\n+\n+    /**\n+     * Intervals length this view model support.\n+     */\n+    public enum IntervalOption {\n+        OPTION_1(1),\n+        OPTION_2(2),\n+        OPTION_3(3),\n+        OPTION_4(4),\n+        OPTION_5(5),\n+        OPTION_10(10),\n+        OPTION_20(20),\n+        OPTION_50(50);\n+\n+        private int value;\n+\n+        IntervalOption(int value) {\n+            this.value = value;\n+        }\n+\n+        /**\n+         * @param pos position of the interval option.\n+         * @return    the interval option that is in the position pos.\n+         */\n+        public static IntervalOption getIntervalOption(int pos) {\n+            if (values().length > pos) {\n+                return values()[pos];\n+            } else {\n+                return OPTION_1;\n+            }\n+        }\n+\n+        public int getValue() {\n+            return value;\n+        }\n+\n+        /**\n+         * @return a string array with all options.\n+         */\n+        public static String[] getAllValues() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1MDIwOA=="}, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcwNjAzOA==", "bodyText": "I didn't sure what you want was it.\nOkay, then \ud83d\udc4d", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475706038", "createdAt": "2020-08-24T15:36:26Z", "author": {"login": "rgmf"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+/**\n+ * This view model is used to load intervals for a track.\n+ * It uses a default interval but it can be set from outside to manage the interval length.\n+ */\n+public class IntervalStatisticsModel extends AndroidViewModel {\n+\n+    private MutableLiveData<IntervalStatistics> intervalStats;\n+    private IntervalOption interval;\n+\n+    public IntervalStatisticsModel(@NonNull Application application) {\n+        super(application);\n+        interval = IntervalOption.OPTION_1;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(Track.Id trackId, IntervalOption interval) {\n+        if (intervalStats == null || this.interval != interval) {\n+            intervalStats = new MutableLiveData<>();\n+            this.interval = interval;\n+            loadIntervalStats(trackId);\n+        }\n+        return intervalStats;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(Track.Id trackId) {\n+        return getIntervalStats(trackId, interval);\n+    }\n+\n+    /**\n+     * Call this method when you want to force the view model to re-load intervals.\n+     */\n+    public void invalidate() {\n+        intervalStats = null;\n+    }\n+\n+    private void loadIntervalStats(Track.Id trackId) {\n+        new Thread(() -> {\n+            Context context = getApplication().getApplicationContext();\n+            ContentProviderUtils contentProviderUtils = new ContentProviderUtils(context);\n+            List<TrackPoint> trackPointList = contentProviderUtils.getTrackPoints(trackId);\n+\n+            IntervalStatistics intervalStatistics = new IntervalStatistics();\n+            float distanceInterval = PreferencesUtils.isMetricUnits(context) ? (float) (interval.getValue() * UnitConversions.KM_TO_M) : (float) (interval.getValue() * UnitConversions.MI_TO_M);\n+            intervalStatistics.build(trackPointList, distanceInterval);\n+\n+            intervalStats.postValue(intervalStatistics);\n+        }).start();\n+    }\n+\n+    /**\n+     * Intervals length this view model support.\n+     */\n+    public enum IntervalOption {\n+        OPTION_1(1),\n+        OPTION_2(2),\n+        OPTION_3(3),\n+        OPTION_4(4),\n+        OPTION_5(5),\n+        OPTION_10(10),\n+        OPTION_20(20),\n+        OPTION_50(50);\n+\n+        private int value;\n+\n+        IntervalOption(int value) {\n+            this.value = value;\n+        }\n+\n+        /**\n+         * @param pos position of the interval option.\n+         * @return    the interval option that is in the position pos.\n+         */\n+        public static IntervalOption getIntervalOption(int pos) {\n+            if (values().length > pos) {\n+                return values()[pos];\n+            } else {\n+                return OPTION_1;\n+            }\n+        }\n+\n+        public int getValue() {\n+            return value;\n+        }\n+\n+        /**\n+         * @return a string array with all options.\n+         */\n+        public static String[] getAllValues() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1MDIwOA=="}, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTcxMTcyMg==", "bodyText": "PS: Not tested ;)", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475711722", "createdAt": "2020-08-24T15:45:18Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+/**\n+ * This view model is used to load intervals for a track.\n+ * It uses a default interval but it can be set from outside to manage the interval length.\n+ */\n+public class IntervalStatisticsModel extends AndroidViewModel {\n+\n+    private MutableLiveData<IntervalStatistics> intervalStats;\n+    private IntervalOption interval;\n+\n+    public IntervalStatisticsModel(@NonNull Application application) {\n+        super(application);\n+        interval = IntervalOption.OPTION_1;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(Track.Id trackId, IntervalOption interval) {\n+        if (intervalStats == null || this.interval != interval) {\n+            intervalStats = new MutableLiveData<>();\n+            this.interval = interval;\n+            loadIntervalStats(trackId);\n+        }\n+        return intervalStats;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(Track.Id trackId) {\n+        return getIntervalStats(trackId, interval);\n+    }\n+\n+    /**\n+     * Call this method when you want to force the view model to re-load intervals.\n+     */\n+    public void invalidate() {\n+        intervalStats = null;\n+    }\n+\n+    private void loadIntervalStats(Track.Id trackId) {\n+        new Thread(() -> {\n+            Context context = getApplication().getApplicationContext();\n+            ContentProviderUtils contentProviderUtils = new ContentProviderUtils(context);\n+            List<TrackPoint> trackPointList = contentProviderUtils.getTrackPoints(trackId);\n+\n+            IntervalStatistics intervalStatistics = new IntervalStatistics();\n+            float distanceInterval = PreferencesUtils.isMetricUnits(context) ? (float) (interval.getValue() * UnitConversions.KM_TO_M) : (float) (interval.getValue() * UnitConversions.MI_TO_M);\n+            intervalStatistics.build(trackPointList, distanceInterval);\n+\n+            intervalStats.postValue(intervalStatistics);\n+        }).start();\n+    }\n+\n+    /**\n+     * Intervals length this view model support.\n+     */\n+    public enum IntervalOption {\n+        OPTION_1(1),\n+        OPTION_2(2),\n+        OPTION_3(3),\n+        OPTION_4(4),\n+        OPTION_5(5),\n+        OPTION_10(10),\n+        OPTION_20(20),\n+        OPTION_50(50);\n+\n+        private int value;\n+\n+        IntervalOption(int value) {\n+            this.value = value;\n+        }\n+\n+        /**\n+         * @param pos position of the interval option.\n+         * @return    the interval option that is in the position pos.\n+         */\n+        public static IntervalOption getIntervalOption(int pos) {\n+            if (values().length > pos) {\n+                return values()[pos];\n+            } else {\n+                return OPTION_1;\n+            }\n+        }\n+\n+        public int getValue() {\n+            return value;\n+        }\n+\n+        /**\n+         * @return a string array with all options.\n+         */\n+        public static String[] getAllValues() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1MDIwOA=="}, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTA0ODU3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/views/IntervalListView.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoyOToxOFrOHFO-mQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQxNDo0MzoyMVrOHFoNyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1MDMyOQ==", "bodyText": "Can we not use the content of the parent?\n(PS: don't know)", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475250329", "createdAt": "2020-08-23T18:29:18Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/views/IntervalListView.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package de.dennisguse.opentracks.views;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.view.View;\n+import android.widget.AdapterView;\n+import android.widget.ArrayAdapter;\n+import android.widget.LinearLayout;\n+import android.widget.Spinner;\n+import android.widget.TextView;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.adapters.IntervalStatisticsAdapter;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatisticsModel;\n+\n+/**\n+ * LinearLayout view used to build a list of intervals.\n+ * See {@link IntervalStatisticsAdapter}.\n+ */\n+public class IntervalListView extends LinearLayout {\n+\n+    protected IntervalStatisticsAdapter adapter;\n+    protected LinearLayout linearLayoutIntervals;\n+    protected Spinner spinnerIntervals;\n+    protected TextView spinnerIntervalsUnit;\n+\n+    protected Context context;\n+    protected IntervalListListener listener;\n+\n+    protected final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (preferences, key) -> {\n+        if (PreferencesUtils.isKey(getContext(), R.string.stats_units_key, key) || PreferencesUtils.isKey(getContext(), R.string.stats_rate_key, key)) {\n+            if (spinnerIntervalsUnit != null) {\n+                spinnerIntervalsUnit.setText(PreferencesUtils.isMetricUnits(context) ? context.getString(R.string.unit_kilometer) : context.getString(R.string.unit_mile));\n+            }\n+        }\n+    };\n+\n+    public IntervalListView(Context context, IntervalListListener listener) {\n+        super(context);\n+        this.context = context;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTY2MzgxNw==", "bodyText": "Yes, we can use getContext(). Done.", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475663817", "createdAt": "2020-08-24T14:43:21Z", "author": {"login": "rgmf"}, "path": "src/main/java/de/dennisguse/opentracks/views/IntervalListView.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package de.dennisguse.opentracks.views;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.view.View;\n+import android.widget.AdapterView;\n+import android.widget.ArrayAdapter;\n+import android.widget.LinearLayout;\n+import android.widget.Spinner;\n+import android.widget.TextView;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.adapters.IntervalStatisticsAdapter;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatisticsModel;\n+\n+/**\n+ * LinearLayout view used to build a list of intervals.\n+ * See {@link IntervalStatisticsAdapter}.\n+ */\n+public class IntervalListView extends LinearLayout {\n+\n+    protected IntervalStatisticsAdapter adapter;\n+    protected LinearLayout linearLayoutIntervals;\n+    protected Spinner spinnerIntervals;\n+    protected TextView spinnerIntervalsUnit;\n+\n+    protected Context context;\n+    protected IntervalListListener listener;\n+\n+    protected final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (preferences, key) -> {\n+        if (PreferencesUtils.isKey(getContext(), R.string.stats_units_key, key) || PreferencesUtils.isKey(getContext(), R.string.stats_rate_key, key)) {\n+            if (spinnerIntervalsUnit != null) {\n+                spinnerIntervalsUnit.setText(PreferencesUtils.isMetricUnits(context) ? context.getString(R.string.unit_kilometer) : context.getString(R.string.unit_mile));\n+            }\n+        }\n+    };\n+\n+    public IntervalListView(Context context, IntervalListListener listener) {\n+        super(context);\n+        this.context = context;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1MDMyOQ=="}, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTA0ODYxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/views/IntervalListView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoyOToyMFrOHFO-ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODoyOToyMFrOHFO-ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1MDMzNA==", "bodyText": "Why not put this into the constructor?", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475250334", "createdAt": "2020-08-23T18:29:20Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/views/IntervalListView.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package de.dennisguse.opentracks.views;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.view.View;\n+import android.widget.AdapterView;\n+import android.widget.ArrayAdapter;\n+import android.widget.LinearLayout;\n+import android.widget.Spinner;\n+import android.widget.TextView;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.adapters.IntervalStatisticsAdapter;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatisticsModel;\n+\n+/**\n+ * LinearLayout view used to build a list of intervals.\n+ * See {@link IntervalStatisticsAdapter}.\n+ */\n+public class IntervalListView extends LinearLayout {\n+\n+    protected IntervalStatisticsAdapter adapter;\n+    protected LinearLayout linearLayoutIntervals;\n+    protected Spinner spinnerIntervals;\n+    protected TextView spinnerIntervalsUnit;\n+\n+    protected Context context;\n+    protected IntervalListListener listener;\n+\n+    protected final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (preferences, key) -> {\n+        if (PreferencesUtils.isKey(getContext(), R.string.stats_units_key, key) || PreferencesUtils.isKey(getContext(), R.string.stats_rate_key, key)) {\n+            if (spinnerIntervalsUnit != null) {\n+                spinnerIntervalsUnit.setText(PreferencesUtils.isMetricUnits(context) ? context.getString(R.string.unit_kilometer) : context.getString(R.string.unit_mile));\n+            }\n+        }\n+    };\n+\n+    public IntervalListView(Context context, IntervalListListener listener) {\n+        super(context);\n+        this.context = context;\n+        this.listener = listener;\n+        PreferencesUtils.register(getContext(), sharedPreferenceChangeListener);\n+        init();\n+    }\n+\n+    protected void init() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTA0OTI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/views/IntervalReverseListView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODozMDowMlrOHFO-7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODozMDowMlrOHFO-7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1MDQxNQ==", "bodyText": "Can move this into IntervalListView as a public static class?", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475250415", "createdAt": "2020-08-23T18:30:02Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/views/IntervalReverseListView.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package de.dennisguse.opentracks.views;\n+\n+import android.content.Context;\n+import android.view.View;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.adapters.IntervalStatisticsAdapter;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+\n+/**\n+ * LinearLayout view used to build a list of intervals in a reverse mode, the last one will appear in the first position on the LinearLayout.\n+ * This class is an specialization of {@link IntervalListView} that display the views contained in the LinearLayout in a reverse mode.\n+ */\n+public class IntervalReverseListView extends IntervalListView {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MTA0OTYzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/views/IntervalReverseListView.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODozMDozMVrOHFO_Gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODozMDozMVrOHFO_Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1MDQ1OA==", "bodyText": "if (intervalList == null) {\nreturn;\n}", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475250458", "createdAt": "2020-08-23T18:30:31Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/views/IntervalReverseListView.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package de.dennisguse.opentracks.views;\n+\n+import android.content.Context;\n+import android.view.View;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.adapters.IntervalStatisticsAdapter;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+\n+/**\n+ * LinearLayout view used to build a list of intervals in a reverse mode, the last one will appear in the first position on the LinearLayout.\n+ * This class is an specialization of {@link IntervalListView} that display the views contained in the LinearLayout in a reverse mode.\n+ */\n+public class IntervalReverseListView extends IntervalListView {\n+\n+    public IntervalReverseListView(Context context, IntervalListListener listener) {\n+        super(context, listener);\n+    }\n+\n+    public void display(List<IntervalStatistics.Interval> intervalList) {\n+        if (intervalList != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 22}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1931, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}