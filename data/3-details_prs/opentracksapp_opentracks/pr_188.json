{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0NTQ2NjEy", "number": 188, "title": "Improve import/export", "bodyText": "Describe the pull request\nFor KMZ importer\n\nFirst: It reads the images inside KMZ file and copy them to OpenTracks external storage.\nSecond: It parses doc.kml that is inside KMZ file checking that href in waypoint's tag points to an existing image in OpenTracks storage. If exists it creates a marker with photo. Otherwise only the marker.\n\nIt needs to open two times KMZ file. The first one to find images and the second one to parses doc.kml inside KMZ.\nFor KMZ exporter\n\nIt creates the waypoint with image in the doc.kml file only if this image exists inside OpenTracks external storage. Otherwise it creates the waypoint in the doc.kml file without href.\nWhen it generates description for kml file it adds min/max elevation only if these data are valid.\nAdded tests for this last point.\n\nA little bug\nThe method createTrackPoint in AbstractFileTrackImporter can return null. In that case a SAXException must be raised because that means that org.xml.sax couldn't parse a point in the file.\nI found this bug doing test with GPX files. The App before cracked and now informs to user that there was an error parsing a file.\nLink to the the issue\n#180\nLicense agreement\nBy opening this pull request, you are providing your contribution under the Apache License 2.0 (see LICENSE.md).", "createdAt": "2020-04-16T17:20:01Z", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/188", "merged": true, "mergeCommit": {"oid": "5681938a9e105d1990cf0bdcecc7bc07efb13d32"}, "closed": true, "closedAt": "2020-04-23T06:21:56Z", "author": {"login": "rgmf"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZ2urjgH2gAyNDA0NTQ2NjEyOjBmMWQ4NTAwZDFmZWViZGU3M2QwNDNkMWNlYjI5MWFmZTE4MGZiODg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaGdSaAH2gAyNDA0NTQ2NjEyOjc0ODM1ZGNlZjU5NmYzOTg2ODE2ZDAzMDU2ZTAwYTU4ZWZjZWUyYzc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0f1d8500d1feebde73d043d1ceb291afe180fb88", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/0f1d8500d1feebde73d043d1ceb291afe180fb88", "committedDate": "2020-04-21T17:00:03Z", "message": "KMZ importing: firstly copies images then parses kml (checks kml's href link to image is correct)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fa9cb3903c7b04279b3e37354668b2ff7e437e8a", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/fa9cb3903c7b04279b3e37354668b2ff7e437e8a", "committedDate": "2020-04-21T17:01:30Z", "message": "KMZ exporting: checks waypoints images exists before parse kml."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54b9c4370b094b462b746167a466f26c6b2ec147", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/54b9c4370b094b462b746167a466f26c6b2ec147", "committedDate": "2020-04-21T17:01:35Z", "message": "KML description: max/min elevation will not show if have invalid values (unknow)."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "653eb8320a1c34d7cde897286f2825120ff71dee", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/653eb8320a1c34d7cde897286f2825120ff71dee", "committedDate": "2020-04-21T17:01:35Z", "message": "KMZ importing: look for images anywhere in KMZ file and only images referenced remain in external storage."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ed0dc053663be3e54cfb577ba473c2b58f18168c", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/ed0dc053663be3e54cfb577ba473c2b58f18168c", "committedDate": "2020-04-21T17:01:35Z", "message": "KMZ exporting: marker images use waypoint id as a name."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9d4e0aa2cbeedd815d6b34edcecf0ce2227df7fa", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/9d4e0aa2cbeedd815d6b34edcecf0ce2227df7fa", "committedDate": "2020-04-21T11:11:11Z", "message": "KMZ exporting: marker images use waypoint id as a name."}, "afterCommit": {"oid": "ed0dc053663be3e54cfb577ba473c2b58f18168c", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/ed0dc053663be3e54cfb577ba473c2b58f18168c", "committedDate": "2020-04-21T17:01:35Z", "message": "KMZ exporting: marker images use waypoint id as a name."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3ODUwMTY0", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/188#pullrequestreview-397850164", "createdAt": "2020-04-22T05:18:55Z", "commit": {"oid": "ed0dc053663be3e54cfb577ba473c2b58f18168c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToxODo1NVrOGJjzUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToxODo1NVrOGJjzUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3Njk0Nw==", "bodyText": "Waypoint.getLocation() cannot be null as it is required during creation.\nWhy should it here be different?", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/188#discussion_r412676947", "createdAt": "2020-04-22T05:18:55Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/io/file/exporter/KmlTrackWriter.java", "diffHunk": "@@ -322,32 +324,29 @@ private void writePlacemark(String name, String category, String description, St\n     }\n \n     /**\n-     * Writes a photo overlay.\n-     *  @param name        the name\n-     * @param category    the category\n-     * @param description the description\n-     * @param location    the location\n-     * @param photoUrl    the photo url\n-     * @param heading     the heading\n+     * Writes a photo overlay from waypoint.\n+     *\n+     * @param waypoint Waypoint object.\n+     * @param heading  the heading.\n      */\n-    private void writePhotoOverlay(String name, String category, String description, Location location, String photoUrl, float heading) {\n-        if (location != null && exportTrackDetail) {\n+    private void writePhotoOverlay(Waypoint waypoint, float heading) {\n+        if (waypoint.getLocation() != null && exportTrackDetail) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed0dc053663be3e54cfb577ba473c2b58f18168c"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3ODUxODk2", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/188#pullrequestreview-397851896", "createdAt": "2020-04-22T05:24:09Z", "commit": {"oid": "ed0dc053663be3e54cfb577ba473c2b58f18168c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToyNDoxMFrOGJj6rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToyNDoxMFrOGJj6rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3ODgzMQ==", "bodyText": "Arrays.asList()?", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/188#discussion_r412678831", "createdAt": "2020-04-22T05:24:10Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/io/file/importer/KmzTrackImporter.java", "diffHunk": "@@ -42,58 +46,197 @@\n \n     private static final String TAG = KmzTrackImporter.class.getSimpleName();\n \n+    public static final List<String> KMZ_IMAGES_EXT = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed0dc053663be3e54cfb577ba473c2b58f18168c"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3ODUyMjg2", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/188#pullrequestreview-397852286", "createdAt": "2020-04-22T05:25:21Z", "commit": {"oid": "ed0dc053663be3e54cfb577ba473c2b58f18168c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToyNToyMVrOGJj8MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToyNToyMVrOGJj8MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3OTIxNg==", "bodyText": "Move into while?", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/188#discussion_r412679216", "createdAt": "2020-04-22T05:25:21Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/io/file/importer/KmzTrackImporter.java", "diffHunk": "@@ -42,58 +46,197 @@\n \n     private static final String TAG = KmzTrackImporter.class.getSimpleName();\n \n+    public static final List<String> KMZ_IMAGES_EXT = new ArrayList<>();\n+    static {\n+        KMZ_IMAGES_EXT.add(\"jpeg\");\n+        KMZ_IMAGES_EXT.add(\"jpg\");\n+        KMZ_IMAGES_EXT.add(\"png\");\n+    }\n+\n     private static final int BUFFER_SIZE = 4096;\n \n     private final Context context;\n     private final long importTrackId;\n+    private Uri uriKmzFile;\n \n     /**\n      * Constructor.\n      *\n      * @param context       the context\n      * @param importTrackId track id to import to. This should not be -1L so that images in the kmz file can be imported.\n+     * @param uriFile       URI of the kmz file.\n      */\n-    KmzTrackImporter(Context context, long importTrackId) {\n+    KmzTrackImporter(Context context, long importTrackId, Uri uriFile) {\n         this.context = context;\n         this.importTrackId = importTrackId;\n+        this.uriKmzFile = uriFile;\n     }\n \n     @Override\n     public long importFile(InputStream inputStream) {\n-        long trackId = importTrackId;\n+        long trackId;\n+\n+        if (!copyKmzImages()) {\n+            cleanImport(context, importTrackId);\n+            return -1L;\n+        }\n+\n+        trackId = findAndParseKmlFile(inputStream);\n+        if (trackId == -1L) {\n+            cleanImport(context, importTrackId);\n+            return -1L;\n+        }\n+\n+        deleteOrphanImages(context, trackId);\n+\n+        return trackId;\n+    }\n+\n+    /**\n+     * Copies all images that are inside KMZ to OpenTracks external storage.\n+     *\n+     * @return false if there are errors or true otherwise.\n+     */\n+    private boolean copyKmzImages() {\n+        try (InputStream inputStream = context.getContentResolver().openInputStream(uriKmzFile);\n+            ZipInputStream zipInputStream = new ZipInputStream(inputStream)) {\n+            ZipEntry zipEntry;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed0dc053663be3e54cfb577ba473c2b58f18168c"}, "originalPosition": 81}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3ODUyODEw", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/188#pullrequestreview-397852810", "createdAt": "2020-04-22T05:26:48Z", "commit": {"oid": "ed0dc053663be3e54cfb577ba473c2b58f18168c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToyNjo0OFrOGJj-cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToyNjo0OFrOGJj-cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3OTc5NQ==", "bodyText": "KMZ_IMAGES_EXT.contains(fileExt)", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/188#discussion_r412679795", "createdAt": "2020-04-22T05:26:48Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/io/file/importer/KmzTrackImporter.java", "diffHunk": "@@ -42,58 +46,197 @@\n \n     private static final String TAG = KmzTrackImporter.class.getSimpleName();\n \n+    public static final List<String> KMZ_IMAGES_EXT = new ArrayList<>();\n+    static {\n+        KMZ_IMAGES_EXT.add(\"jpeg\");\n+        KMZ_IMAGES_EXT.add(\"jpg\");\n+        KMZ_IMAGES_EXT.add(\"png\");\n+    }\n+\n     private static final int BUFFER_SIZE = 4096;\n \n     private final Context context;\n     private final long importTrackId;\n+    private Uri uriKmzFile;\n \n     /**\n      * Constructor.\n      *\n      * @param context       the context\n      * @param importTrackId track id to import to. This should not be -1L so that images in the kmz file can be imported.\n+     * @param uriFile       URI of the kmz file.\n      */\n-    KmzTrackImporter(Context context, long importTrackId) {\n+    KmzTrackImporter(Context context, long importTrackId, Uri uriFile) {\n         this.context = context;\n         this.importTrackId = importTrackId;\n+        this.uriKmzFile = uriFile;\n     }\n \n     @Override\n     public long importFile(InputStream inputStream) {\n-        long trackId = importTrackId;\n+        long trackId;\n+\n+        if (!copyKmzImages()) {\n+            cleanImport(context, importTrackId);\n+            return -1L;\n+        }\n+\n+        trackId = findAndParseKmlFile(inputStream);\n+        if (trackId == -1L) {\n+            cleanImport(context, importTrackId);\n+            return -1L;\n+        }\n+\n+        deleteOrphanImages(context, trackId);\n+\n+        return trackId;\n+    }\n+\n+    /**\n+     * Copies all images that are inside KMZ to OpenTracks external storage.\n+     *\n+     * @return false if there are errors or true otherwise.\n+     */\n+    private boolean copyKmzImages() {\n+        try (InputStream inputStream = context.getContentResolver().openInputStream(uriKmzFile);\n+            ZipInputStream zipInputStream = new ZipInputStream(inputStream)) {\n+            ZipEntry zipEntry;\n+\n+            while ((zipEntry = zipInputStream.getNextEntry()) != null) {\n+                if (Thread.interrupted()) {\n+                    Log.d(TAG, \"Thread interrupted\");\n+                    return false;\n+                }\n+\n+                String fileName = zipEntry.getName();\n+                if (hasImageExtension(fileName)) {\n+                    readAndSaveImageFile(zipInputStream, importNameForFilename(fileName));\n+                }\n+\n+                zipInputStream.closeEntry();\n+            }\n+\n+            return true;\n+        } catch (IOException e) {\n+            Log.e(TAG, \"Unable to import file\", e);\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * From path fileName generates an import unique name and returns it.\n+     * The name generator is simple: change the path fileName with '-' instead of File.separatorChar.\n+     *\n+     * @param fileName the file name.\n+     */\n+    public static String importNameForFilename(String fileName) {\n+        // TODO this tricky code for maintain backward compatibility must be deleted some day.\n+        /*\n+         * In versions before v3.5.0 photo URL in KML files were wrong.\n+         * For compatibility reasons it checks if fileName begins with \"content://\" or \"file://\".\n+         * All fileName begins with \"content:/\" or \"file://\" are cooked.\n+         * We cannot guess what's the folder name where images are so we use \"images\" that was the folder name expected in versions before v3.5.0.\n+         */\n+        if (fileName.startsWith(\"content://\") || fileName.startsWith(\"file://\")) {\n+            fileName = \"images/\" + fileName.substring(fileName.lastIndexOf(File.separatorChar) + 1);\n+        }\n+\n+        return fileName.replace(File.separatorChar, '-');\n+    }\n+\n+    /**\n+     * Returns true if fileName ends with some of the KMZ_IMAGES_EXT suffixes.\n+     * Otherwise returns false.\n+     */\n+    private boolean hasImageExtension(String fileName)  {\n+        if (fileName == null) {\n+            return false;\n+        }\n+\n+        String fileExt = FileUtils.getExtension(fileName.toLowerCase());\n+        if (fileExt == null) {\n+            return false;\n+        }\n+\n+        for (String ext : KMZ_IMAGES_EXT) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed0dc053663be3e54cfb577ba473c2b58f18168c"}, "originalPosition": 139}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3ODUzMjMy", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/188#pullrequestreview-397853232", "createdAt": "2020-04-22T05:28:02Z", "commit": {"oid": "ed0dc053663be3e54cfb577ba473c2b58f18168c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToyODowMlrOGJkAFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToyODowMlrOGJkAFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY4MDIxMw==", "bodyText": "@return", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/188#discussion_r412680213", "createdAt": "2020-04-22T05:28:02Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/util/FileUtils.java", "diffHunk": "@@ -95,11 +95,15 @@ public static synchronized String buildUniqueFileName(File directory, String fil\n \n     /**\n      * Gets the extension from a file name.\n-     * Returns null if there is no extension.\n+     * Returns null if there is no extension or fileName is null.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed0dc053663be3e54cfb577ba473c2b58f18168c"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74835dcef596f3986816d03056e00a58efcee2c7", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/74835dcef596f3986816d03056e00a58efcee2c7", "committedDate": "2020-04-22T11:19:32Z", "message": "KMZ import/export: code improved."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2304, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}