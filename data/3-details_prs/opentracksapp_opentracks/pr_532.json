{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3NjYzMTU3", "number": 532, "title": "Refactoring MarkerEditActivity. Logic has been moved to a ViewModel.", "bodyText": "Describe the pull request\nMarkerEditActivity had a lot of logic, specially with photo handle. This is my proposal to move the logic from Activity to ViewModel.\nActivity:\n\nHandle the views.\nSend/Receive data changes to/from ViewModel.\n\nViewModel:\n\nHandle Marker object (I've created a new Marker's constructor - is it a good idea?).\nSave photo on internal OT storage and clean orphan files.\nInsert the Marker through Service.\n\nMarkerEditActivity <--------> MarkerEditViewModel <---------> Marker\nIt's a proposal... I'm not too much sure this is the best option but I don't know what other options there are either.\nLicense agreement\nBy opening this pull request, you are providing your contribution under the Apache License 2.0 (see LICENSE.md).", "createdAt": "2020-11-25T19:54:55Z", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/532", "merged": true, "mergeCommit": {"oid": "99847dbed9343fde3a1931803aa17d2e8f31d981"}, "closed": true, "closedAt": "2020-12-17T18:15:36Z", "author": {"login": "rgmf"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdjTtfSAFqTU0NTY1MjMxMw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdnHitqABqjQxMjYzODkxNjI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ1NjUyMzEz", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/532#pullrequestreview-545652313", "createdAt": "2020-12-05T21:52:00Z", "commit": {"oid": "249b2240c7fbc67f4936a711b250024203e602e6"}, "state": "APPROVED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQyMTo1MjowMFrOIABvHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQyMjowMjowMFrOIAB02w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg5OTM1Ng==", "bodyText": "Not needed; directly set = 0 in line 58 instead of -1", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/532#discussion_r536899356", "createdAt": "2020-12-05T21:52:00Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/MarkerEditViewModel.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.net.Uri;\n+import android.os.ParcelFileDescriptor;\n+import android.util.Log;\n+import android.widget.Toast;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.io.File;\n+import java.io.FileDescriptor;\n+import java.util.NoSuchElementException;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.content.data.Marker;\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.services.TrackRecordingServiceConnection;\n+import de.dennisguse.opentracks.util.FileUtils;\n+\n+public class MarkerEditViewModel extends AndroidViewModel {\n+\n+    private static final String TAG = MarkerEditViewModel.class.getSimpleName();\n+\n+    private MutableLiveData<Marker> markerData;\n+    private boolean isNewMarker;\n+    private Uri photoOriginalUri;\n+    private final TrackRecordingServiceConnection trackRecordingServiceConnection = new TrackRecordingServiceConnection();\n+\n+    public MarkerEditViewModel(@NonNull Application application) {\n+        super(application);\n+    }\n+\n+    public LiveData<Marker> getMarkerData(@NonNull Track.Id trackId, @Nullable Marker.Id markerId) {\n+        if (markerData == null) {\n+            markerData = new MutableLiveData<>();\n+            trackRecordingServiceConnection.startConnection(getApplication());\n+            loadData(trackId, markerId);\n+        }\n+        return markerData;\n+    }\n+\n+    @Override\n+    protected void onCleared() {\n+        super.onCleared();\n+        trackRecordingServiceConnection.unbind(getApplication());\n+    }\n+\n+    private void loadData(Track.Id trackId, Marker.Id markerId) {\n+        Marker marker;\n+        isNewMarker = markerId == null;\n+        if (isNewMarker) {\n+            int nextMarkerNumber = trackId == null ? -1 : new ContentProviderUtils(getApplication()).getNextMarkerNumber(trackId);\n+            if (nextMarkerNumber == -1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249b2240c7fbc67f4936a711b250024203e602e6"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg5OTQ5Mw==", "bodyText": "Should already be null", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/532#discussion_r536899493", "createdAt": "2020-12-05T21:52:45Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/MarkerEditViewModel.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.net.Uri;\n+import android.os.ParcelFileDescriptor;\n+import android.util.Log;\n+import android.widget.Toast;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.io.File;\n+import java.io.FileDescriptor;\n+import java.util.NoSuchElementException;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.content.data.Marker;\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.services.TrackRecordingServiceConnection;\n+import de.dennisguse.opentracks.util.FileUtils;\n+\n+public class MarkerEditViewModel extends AndroidViewModel {\n+\n+    private static final String TAG = MarkerEditViewModel.class.getSimpleName();\n+\n+    private MutableLiveData<Marker> markerData;\n+    private boolean isNewMarker;\n+    private Uri photoOriginalUri;\n+    private final TrackRecordingServiceConnection trackRecordingServiceConnection = new TrackRecordingServiceConnection();\n+\n+    public MarkerEditViewModel(@NonNull Application application) {\n+        super(application);\n+    }\n+\n+    public LiveData<Marker> getMarkerData(@NonNull Track.Id trackId, @Nullable Marker.Id markerId) {\n+        if (markerData == null) {\n+            markerData = new MutableLiveData<>();\n+            trackRecordingServiceConnection.startConnection(getApplication());\n+            loadData(trackId, markerId);\n+        }\n+        return markerData;\n+    }\n+\n+    @Override\n+    protected void onCleared() {\n+        super.onCleared();\n+        trackRecordingServiceConnection.unbind(getApplication());\n+    }\n+\n+    private void loadData(Track.Id trackId, Marker.Id markerId) {\n+        Marker marker;\n+        isNewMarker = markerId == null;\n+        if (isNewMarker) {\n+            int nextMarkerNumber = trackId == null ? -1 : new ContentProviderUtils(getApplication()).getNextMarkerNumber(trackId);\n+            if (nextMarkerNumber == -1) {\n+                nextMarkerNumber = 0;\n+            }\n+            marker = new Marker(trackId);\n+            marker.setId(markerId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249b2240c7fbc67f4936a711b250024203e602e6"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg5OTkyMQ==", "bodyText": "Very similar to line 173-176: can we somehow combine this?", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/532#discussion_r536899921", "createdAt": "2020-12-05T21:55:49Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/MarkerEditActivity.java", "diffHunk": "@@ -246,26 +160,20 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n                 Toast.makeText(this, R.string.marker_add_photo_canceled, Toast.LENGTH_LONG).show();\n                 return;\n             } else if (resultCode == RESULT_OK) {\n-                setMarkerImageView(photoUri);\n+                viewModel.onNewCameraPhoto(cameraPhotoUri,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249b2240c7fbc67f4936a711b250024203e602e6"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkwMDEwMw==", "bodyText": "getMarker() instead?\nIf you want to make sure that the exception is properly recognized, we could use getMarker() throws NoSuchElementException (if needed).", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/532#discussion_r536900103", "createdAt": "2020-12-05T21:57:01Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/MarkerEditViewModel.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.net.Uri;\n+import android.os.ParcelFileDescriptor;\n+import android.util.Log;\n+import android.widget.Toast;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.io.File;\n+import java.io.FileDescriptor;\n+import java.util.NoSuchElementException;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.content.data.Marker;\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.services.TrackRecordingServiceConnection;\n+import de.dennisguse.opentracks.util.FileUtils;\n+\n+public class MarkerEditViewModel extends AndroidViewModel {\n+\n+    private static final String TAG = MarkerEditViewModel.class.getSimpleName();\n+\n+    private MutableLiveData<Marker> markerData;\n+    private boolean isNewMarker;\n+    private Uri photoOriginalUri;\n+    private final TrackRecordingServiceConnection trackRecordingServiceConnection = new TrackRecordingServiceConnection();\n+\n+    public MarkerEditViewModel(@NonNull Application application) {\n+        super(application);\n+    }\n+\n+    public LiveData<Marker> getMarkerData(@NonNull Track.Id trackId, @Nullable Marker.Id markerId) {\n+        if (markerData == null) {\n+            markerData = new MutableLiveData<>();\n+            trackRecordingServiceConnection.startConnection(getApplication());\n+            loadData(trackId, markerId);\n+        }\n+        return markerData;\n+    }\n+\n+    @Override\n+    protected void onCleared() {\n+        super.onCleared();\n+        trackRecordingServiceConnection.unbind(getApplication());\n+    }\n+\n+    private void loadData(Track.Id trackId, Marker.Id markerId) {\n+        Marker marker;\n+        isNewMarker = markerId == null;\n+        if (isNewMarker) {\n+            int nextMarkerNumber = trackId == null ? -1 : new ContentProviderUtils(getApplication()).getNextMarkerNumber(trackId);\n+            if (nextMarkerNumber == -1) {\n+                nextMarkerNumber = 0;\n+            }\n+            marker = new Marker(trackId);\n+            marker.setId(markerId);\n+            marker.setName(getApplication().getString(R.string.marker_name_format, nextMarkerNumber));\n+        } else {\n+            marker = new ContentProviderUtils(getApplication()).getMarker(markerId);\n+            if (marker.hasPhoto()) {\n+                photoOriginalUri = marker.getPhotoURI();\n+            }\n+        }\n+        markerData.postValue(marker);\n+    }\n+\n+    private Marker getMarkerOrThrowException() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249b2240c7fbc67f4936a711b250024203e602e6"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkwMDIxNQ==", "bodyText": "Also private @NonNull Marker getMarker()", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/532#discussion_r536900215", "createdAt": "2020-12-05T21:57:34Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/MarkerEditViewModel.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.net.Uri;\n+import android.os.ParcelFileDescriptor;\n+import android.util.Log;\n+import android.widget.Toast;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.io.File;\n+import java.io.FileDescriptor;\n+import java.util.NoSuchElementException;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.content.data.Marker;\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.services.TrackRecordingServiceConnection;\n+import de.dennisguse.opentracks.util.FileUtils;\n+\n+public class MarkerEditViewModel extends AndroidViewModel {\n+\n+    private static final String TAG = MarkerEditViewModel.class.getSimpleName();\n+\n+    private MutableLiveData<Marker> markerData;\n+    private boolean isNewMarker;\n+    private Uri photoOriginalUri;\n+    private final TrackRecordingServiceConnection trackRecordingServiceConnection = new TrackRecordingServiceConnection();\n+\n+    public MarkerEditViewModel(@NonNull Application application) {\n+        super(application);\n+    }\n+\n+    public LiveData<Marker> getMarkerData(@NonNull Track.Id trackId, @Nullable Marker.Id markerId) {\n+        if (markerData == null) {\n+            markerData = new MutableLiveData<>();\n+            trackRecordingServiceConnection.startConnection(getApplication());\n+            loadData(trackId, markerId);\n+        }\n+        return markerData;\n+    }\n+\n+    @Override\n+    protected void onCleared() {\n+        super.onCleared();\n+        trackRecordingServiceConnection.unbind(getApplication());\n+    }\n+\n+    private void loadData(Track.Id trackId, Marker.Id markerId) {\n+        Marker marker;\n+        isNewMarker = markerId == null;\n+        if (isNewMarker) {\n+            int nextMarkerNumber = trackId == null ? -1 : new ContentProviderUtils(getApplication()).getNextMarkerNumber(trackId);\n+            if (nextMarkerNumber == -1) {\n+                nextMarkerNumber = 0;\n+            }\n+            marker = new Marker(trackId);\n+            marker.setId(markerId);\n+            marker.setName(getApplication().getString(R.string.marker_name_format, nextMarkerNumber));\n+        } else {\n+            marker = new ContentProviderUtils(getApplication()).getMarker(markerId);\n+            if (marker.hasPhoto()) {\n+                photoOriginalUri = marker.getPhotoURI();\n+            }\n+        }\n+        markerData.postValue(marker);\n+    }\n+\n+    private Marker getMarkerOrThrowException() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkwMDEwMw=="}, "originalCommit": {"oid": "249b2240c7fbc67f4936a711b250024203e602e6"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkwMDQzOQ==", "bodyText": "Log.e(TAG, \"Failed to get picture from gallery URI: \" + e.getMessage());\nalso catch exception already in line 120?\nLine 121-125 cannot produce this.", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/532#discussion_r536900439", "createdAt": "2020-12-05T21:59:23Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/MarkerEditViewModel.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.net.Uri;\n+import android.os.ParcelFileDescriptor;\n+import android.util.Log;\n+import android.widget.Toast;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.io.File;\n+import java.io.FileDescriptor;\n+import java.util.NoSuchElementException;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.content.data.Marker;\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.services.TrackRecordingServiceConnection;\n+import de.dennisguse.opentracks.util.FileUtils;\n+\n+public class MarkerEditViewModel extends AndroidViewModel {\n+\n+    private static final String TAG = MarkerEditViewModel.class.getSimpleName();\n+\n+    private MutableLiveData<Marker> markerData;\n+    private boolean isNewMarker;\n+    private Uri photoOriginalUri;\n+    private final TrackRecordingServiceConnection trackRecordingServiceConnection = new TrackRecordingServiceConnection();\n+\n+    public MarkerEditViewModel(@NonNull Application application) {\n+        super(application);\n+    }\n+\n+    public LiveData<Marker> getMarkerData(@NonNull Track.Id trackId, @Nullable Marker.Id markerId) {\n+        if (markerData == null) {\n+            markerData = new MutableLiveData<>();\n+            trackRecordingServiceConnection.startConnection(getApplication());\n+            loadData(trackId, markerId);\n+        }\n+        return markerData;\n+    }\n+\n+    @Override\n+    protected void onCleared() {\n+        super.onCleared();\n+        trackRecordingServiceConnection.unbind(getApplication());\n+    }\n+\n+    private void loadData(Track.Id trackId, Marker.Id markerId) {\n+        Marker marker;\n+        isNewMarker = markerId == null;\n+        if (isNewMarker) {\n+            int nextMarkerNumber = trackId == null ? -1 : new ContentProviderUtils(getApplication()).getNextMarkerNumber(trackId);\n+            if (nextMarkerNumber == -1) {\n+                nextMarkerNumber = 0;\n+            }\n+            marker = new Marker(trackId);\n+            marker.setId(markerId);\n+            marker.setName(getApplication().getString(R.string.marker_name_format, nextMarkerNumber));\n+        } else {\n+            marker = new ContentProviderUtils(getApplication()).getMarker(markerId);\n+            if (marker.hasPhoto()) {\n+                photoOriginalUri = marker.getPhotoURI();\n+            }\n+        }\n+        markerData.postValue(marker);\n+    }\n+\n+    private Marker getMarkerOrThrowException() {\n+        Marker marker = markerData != null ? markerData.getValue() : null;\n+        if (marker == null) {\n+            Log.d(TAG, \"Marker data shouldn't be null. Call getMarkerData before.\");\n+            throw new NoSuchElementException(\"Marker data shouldn't be null. Call getMarkerData before.\");\n+        }\n+\n+        return marker;\n+    }\n+\n+    private void deletePhoto(Uri photoUri) {\n+        File photoFile = FileUtils.getPhotoFileIfExists(getApplication(), markerData.getValue().getTrackId(), photoUri);\n+        FileUtils.deleteDirectoryRecurse(photoFile);\n+    }\n+\n+    public void onPhotoDelete(String name, String category, String description) {\n+        Marker marker =  getMarkerOrThrowException();\n+        if (marker.hasPhoto()) {\n+            if (!marker.getPhotoURI().equals(photoOriginalUri)) {\n+                deletePhoto(marker.getPhotoURI());\n+            }\n+            marker.setPhotoUrl(null);\n+            marker.setName(name);\n+            marker.setCategory(category);\n+            marker.setDescription(description);\n+            markerData.postValue(marker);\n+        }\n+    }\n+\n+    public void onNewCameraPhoto(@NonNull Uri photoUri, String name, String category, String description) {\n+        Marker marker =  getMarkerOrThrowException();\n+        marker.setPhotoUrl(photoUri.toString());\n+        marker.setName(name);\n+        marker.setCategory(category);\n+        marker.setDescription(description);\n+        markerData.postValue(marker);\n+    }\n+\n+    public void onNewGalleryPhoto(@NonNull Uri srcUri, String name, String category, String description) {\n+        Marker marker =  getMarkerOrThrowException();\n+\n+        try (ParcelFileDescriptor parcelFd = getApplication().getContentResolver().openFileDescriptor(srcUri, \"r\")) {\n+            FileDescriptor srcFd = parcelFd.getFileDescriptor();\n+            File dstFile = new File(FileUtils.getImageUrl(getApplication(), marker.getTrackId()));\n+            FileUtils.copy(srcFd, dstFile);\n+\n+            Uri photoUri = FileUtils.getUriForFile(getApplication(), dstFile);\n+            marker.setPhotoUrl(photoUri.toString());\n+            marker.setName(name);\n+            marker.setCategory(category);\n+            marker.setDescription(description);\n+            markerData.postValue(marker);\n+        } catch(Exception e) {\n+            Log.e(TAG, e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249b2240c7fbc67f4936a711b250024203e602e6"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkwMDgyNw==", "bodyText": "Somehow relatively complicated (or it is too late).\nIs it possible that multiple if's are valid?", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/532#discussion_r536900827", "createdAt": "2020-12-05T22:02:00Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/MarkerEditViewModel.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.net.Uri;\n+import android.os.ParcelFileDescriptor;\n+import android.util.Log;\n+import android.widget.Toast;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.io.File;\n+import java.io.FileDescriptor;\n+import java.util.NoSuchElementException;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.content.data.Marker;\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.services.TrackRecordingServiceConnection;\n+import de.dennisguse.opentracks.util.FileUtils;\n+\n+public class MarkerEditViewModel extends AndroidViewModel {\n+\n+    private static final String TAG = MarkerEditViewModel.class.getSimpleName();\n+\n+    private MutableLiveData<Marker> markerData;\n+    private boolean isNewMarker;\n+    private Uri photoOriginalUri;\n+    private final TrackRecordingServiceConnection trackRecordingServiceConnection = new TrackRecordingServiceConnection();\n+\n+    public MarkerEditViewModel(@NonNull Application application) {\n+        super(application);\n+    }\n+\n+    public LiveData<Marker> getMarkerData(@NonNull Track.Id trackId, @Nullable Marker.Id markerId) {\n+        if (markerData == null) {\n+            markerData = new MutableLiveData<>();\n+            trackRecordingServiceConnection.startConnection(getApplication());\n+            loadData(trackId, markerId);\n+        }\n+        return markerData;\n+    }\n+\n+    @Override\n+    protected void onCleared() {\n+        super.onCleared();\n+        trackRecordingServiceConnection.unbind(getApplication());\n+    }\n+\n+    private void loadData(Track.Id trackId, Marker.Id markerId) {\n+        Marker marker;\n+        isNewMarker = markerId == null;\n+        if (isNewMarker) {\n+            int nextMarkerNumber = trackId == null ? -1 : new ContentProviderUtils(getApplication()).getNextMarkerNumber(trackId);\n+            if (nextMarkerNumber == -1) {\n+                nextMarkerNumber = 0;\n+            }\n+            marker = new Marker(trackId);\n+            marker.setId(markerId);\n+            marker.setName(getApplication().getString(R.string.marker_name_format, nextMarkerNumber));\n+        } else {\n+            marker = new ContentProviderUtils(getApplication()).getMarker(markerId);\n+            if (marker.hasPhoto()) {\n+                photoOriginalUri = marker.getPhotoURI();\n+            }\n+        }\n+        markerData.postValue(marker);\n+    }\n+\n+    private Marker getMarkerOrThrowException() {\n+        Marker marker = markerData != null ? markerData.getValue() : null;\n+        if (marker == null) {\n+            Log.d(TAG, \"Marker data shouldn't be null. Call getMarkerData before.\");\n+            throw new NoSuchElementException(\"Marker data shouldn't be null. Call getMarkerData before.\");\n+        }\n+\n+        return marker;\n+    }\n+\n+    private void deletePhoto(Uri photoUri) {\n+        File photoFile = FileUtils.getPhotoFileIfExists(getApplication(), markerData.getValue().getTrackId(), photoUri);\n+        FileUtils.deleteDirectoryRecurse(photoFile);\n+    }\n+\n+    public void onPhotoDelete(String name, String category, String description) {\n+        Marker marker =  getMarkerOrThrowException();\n+        if (marker.hasPhoto()) {\n+            if (!marker.getPhotoURI().equals(photoOriginalUri)) {\n+                deletePhoto(marker.getPhotoURI());\n+            }\n+            marker.setPhotoUrl(null);\n+            marker.setName(name);\n+            marker.setCategory(category);\n+            marker.setDescription(description);\n+            markerData.postValue(marker);\n+        }\n+    }\n+\n+    public void onNewCameraPhoto(@NonNull Uri photoUri, String name, String category, String description) {\n+        Marker marker =  getMarkerOrThrowException();\n+        marker.setPhotoUrl(photoUri.toString());\n+        marker.setName(name);\n+        marker.setCategory(category);\n+        marker.setDescription(description);\n+        markerData.postValue(marker);\n+    }\n+\n+    public void onNewGalleryPhoto(@NonNull Uri srcUri, String name, String category, String description) {\n+        Marker marker =  getMarkerOrThrowException();\n+\n+        try (ParcelFileDescriptor parcelFd = getApplication().getContentResolver().openFileDescriptor(srcUri, \"r\")) {\n+            FileDescriptor srcFd = parcelFd.getFileDescriptor();\n+            File dstFile = new File(FileUtils.getImageUrl(getApplication(), marker.getTrackId()));\n+            FileUtils.copy(srcFd, dstFile);\n+\n+            Uri photoUri = FileUtils.getUriForFile(getApplication(), dstFile);\n+            marker.setPhotoUrl(photoUri.toString());\n+            marker.setName(name);\n+            marker.setCategory(category);\n+            marker.setDescription(description);\n+            markerData.postValue(marker);\n+        } catch(Exception e) {\n+            Log.e(TAG, e.getMessage());\n+            Toast.makeText(getApplication(), R.string.marker_add_canceled, Toast.LENGTH_LONG).show();\n+        }\n+    }\n+\n+    private void onAddDone(@NonNull Marker marker, String name, String category, String description) {\n+        trackRecordingServiceConnection.addMarker(getApplication(), name, category, description, marker.hasPhoto() ? marker.getPhotoURI().toString() : null);\n+    }\n+\n+    private void onSaveDone(@NonNull Marker marker, String name, String category, String description) {\n+        marker.setName(name);\n+        marker.setCategory(category);\n+        marker.setDescription(description);\n+        new ContentProviderUtils(getApplication()).updateMarker(getApplication(), marker);\n+\n+        if (photoOriginalUri != null && (!marker.hasPhoto() || !photoOriginalUri.equals(marker.getPhotoURI()))) {\n+            deletePhoto(photoOriginalUri);\n+        }\n+    }\n+\n+    public void onDone(String name, String category, String description) {\n+        Marker marker = getMarkerOrThrowException();\n+        if (isNewMarker) {\n+            onAddDone(marker, name, category, description);\n+        } else {\n+            onSaveDone(marker, name, category, description);\n+        }\n+    }\n+\n+    public void onCancel() {\n+        Marker marker =  getMarkerOrThrowException();\n+        if (isNewMarker) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249b2240c7fbc67f4936a711b250024203e602e6"}, "originalPosition": 158}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9fb1ab5da611662fba27dabcabd75e1847f31017", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/9fb1ab5da611662fba27dabcabd75e1847f31017", "committedDate": "2020-12-06T16:23:37Z", "message": "Just tiny changes."}, "afterCommit": {"oid": "d86e6ba48f864e1fc6318d43e90cc33b9d5c7a28", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/d86e6ba48f864e1fc6318d43e90cc33b9d5c7a28", "committedDate": "2020-12-06T21:37:40Z", "message": "Just tiny changes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e295680e911f38d75356f641596874becddcb5e", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/6e295680e911f38d75356f641596874becddcb5e", "committedDate": "2020-12-17T18:05:42Z", "message": "Refactoring MarkerEditActivity. Logic has been moved to a ViewModel."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "597164c8132b400442532d39086c6ce89845875f", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/597164c8132b400442532d39086c6ce89845875f", "committedDate": "2020-12-17T18:05:42Z", "message": "Just tiny changes."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d86e6ba48f864e1fc6318d43e90cc33b9d5c7a28", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/d86e6ba48f864e1fc6318d43e90cc33b9d5c7a28", "committedDate": "2020-12-06T21:37:40Z", "message": "Just tiny changes."}, "afterCommit": {"oid": "597164c8132b400442532d39086c6ce89845875f", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/597164c8132b400442532d39086c6ce89845875f", "committedDate": "2020-12-17T18:05:42Z", "message": "Just tiny changes."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2220, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}