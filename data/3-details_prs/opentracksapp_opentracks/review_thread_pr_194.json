{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4OTAwMjQz", "number": 194, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMjozMjozN1rOD2G50w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjoyNzo0MlrOD2giDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDYyODAzOnYy", "diffSide": "RIGHT", "path": "src/androidTest/java/de/dennisguse/opentracks/content/data/TestDataUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMjozMjozN1rOGL03Zw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMjo0OTowOFrOGL1CcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1MzY3MQ==", "bodyText": "Why not throw the IOException?", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/194#discussion_r415053671", "createdAt": "2020-04-25T12:32:37Z", "author": {"login": "dennisguse"}, "path": "src/androidTest/java/de/dennisguse/opentracks/content/data/TestDataUtil.java", "diffHunk": "@@ -73,4 +79,26 @@ public static void insertTrackWithLocations(ContentProviderUtils contentProvider\n         contentProviderUtils.insertTrack(track);\n         contentProviderUtils.bulkInsertTrackPoint(trackPoints, track.getId());\n     }\n+\n+    /**\n+     * Creates a Waypoint with a photo.\n+     *\n+     * @param context  The context.\n+     * @param trackId  The track id.\n+     * @param location The location.\n+     * @return the Waypoint created.\n+     */\n+    public static  Waypoint createWaypointWithPhoto(Context context, long trackId, Location location) {\n+        String photoUrl = \"\";\n+        try {\n+            File dstFile = new File(FileUtils.getImageUrl(context, trackId));\n+            dstFile.createNewFile();\n+            Uri photoUri = FileUtils.getUriForFile(context, dstFile);\n+            photoUrl = photoUri.toString();\n+        } catch (IOException ioe) {\n+            throw new RuntimeException(ioe);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46c06f0438745c7ce2ba5308e3c6251c12301542"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1NjQ5Ng==", "bodyText": "Because this exception shouldn't never occur or the tests will fail. With RuntimeException I don't need to mark this method as throwing that exception and it results in a cleaner code.\nI don't know if it's the best approach for this case.", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/194#discussion_r415056496", "createdAt": "2020-04-25T12:49:08Z", "author": {"login": "rgmf"}, "path": "src/androidTest/java/de/dennisguse/opentracks/content/data/TestDataUtil.java", "diffHunk": "@@ -73,4 +79,26 @@ public static void insertTrackWithLocations(ContentProviderUtils contentProvider\n         contentProviderUtils.insertTrack(track);\n         contentProviderUtils.bulkInsertTrackPoint(trackPoints, track.getId());\n     }\n+\n+    /**\n+     * Creates a Waypoint with a photo.\n+     *\n+     * @param context  The context.\n+     * @param trackId  The track id.\n+     * @param location The location.\n+     * @return the Waypoint created.\n+     */\n+    public static  Waypoint createWaypointWithPhoto(Context context, long trackId, Location location) {\n+        String photoUrl = \"\";\n+        try {\n+            File dstFile = new File(FileUtils.getImageUrl(context, trackId));\n+            dstFile.createNewFile();\n+            Uri photoUri = FileUtils.getUriForFile(context, dstFile);\n+            photoUrl = photoUri.toString();\n+        } catch (IOException ioe) {\n+            throw new RuntimeException(ioe);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1MzY3MQ=="}, "originalCommit": {"oid": "46c06f0438745c7ce2ba5308e3c6251c12301542"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDYyOTIxOnYy", "diffSide": "RIGHT", "path": "src/androidTest/java/de/dennisguse/opentracks/content/provider/CustomContentProviderUtilsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMjozMzoxOVrOGL035Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMjo1MTowOFrOGL1Dog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1Mzc5Nw==", "bodyText": "if (file == null) {\nreturn;\n}", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/194#discussion_r415053797", "createdAt": "2020-04-25T12:33:19Z", "author": {"login": "dennisguse"}, "path": "src/androidTest/java/de/dennisguse/opentracks/content/provider/CustomContentProviderUtilsTest.java", "diffHunk": "@@ -75,6 +77,17 @@ public void setUp() {\n         contentProviderUtils.deleteAllTracks(context);\n     }\n \n+    private void cleanPhotoDir(File file) {\n+        if (file != null && file.exists() && file.isDirectory()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46c06f0438745c7ce2ba5308e3c6251c12301542"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1NjgwMg==", "bodyText": "I've removed this code because it's not needed.", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/194#discussion_r415056802", "createdAt": "2020-04-25T12:51:08Z", "author": {"login": "rgmf"}, "path": "src/androidTest/java/de/dennisguse/opentracks/content/provider/CustomContentProviderUtilsTest.java", "diffHunk": "@@ -75,6 +77,17 @@ public void setUp() {\n         contentProviderUtils.deleteAllTracks(context);\n     }\n \n+    private void cleanPhotoDir(File file) {\n+        if (file != null && file.exists() && file.isDirectory()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1Mzc5Nw=="}, "originalCommit": {"oid": "46c06f0438745c7ce2ba5308e3c6251c12301542"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4MDYzNDc3OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/content/provider/ContentProviderUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMjozNjo1MlrOGL06PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxMjo1NDoxN1rOGL1F5g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1NDM5Nw==", "bodyText": "Looks exactly like cleanPhotoDir, right?\nWhat about moving it to FileUtils?", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/194#discussion_r415054397", "createdAt": "2020-04-25T12:36:52Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/content/provider/ContentProviderUtils.java", "diffHunk": "@@ -197,20 +200,21 @@ private void deleteTrackPointsAndWaypoints(Context context, long trackId) {\n         contentResolver.delete(TrackPointsColumns.CONTENT_URI_BY_ID, where, selectionArgs);\n \n         contentResolver.delete(WaypointsColumns.CONTENT_URI, WaypointsColumns.TRACKID + \"=?\", new String[]{Long.toString(trackId)});\n-        deleteDirectoryRecurse(FileUtils.getPhotoDir(context, trackId));\n     }\n \n     /**\n      * Delete the directory recursively.\n      *\n-     * @param dir the directory\n+     * @param file the directory\n      */\n-    private void deleteDirectoryRecurse(File dir) {\n-        if (dir != null && dir.exists() && dir.isDirectory()) {\n-            for (File child : dir.listFiles()) {\n+    private void deleteDirectoryRecurse(File file) {\n+        if (file != null && file.exists() && file.isDirectory()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "46c06f0438745c7ce2ba5308e3c6251c12301542"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1NzM4Mg==", "bodyText": "I've deleted cleanPhotoDir from test but anyway I think it can be a future utility so I'm going to move it to FileUtils.", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/194#discussion_r415057382", "createdAt": "2020-04-25T12:54:17Z", "author": {"login": "rgmf"}, "path": "src/main/java/de/dennisguse/opentracks/content/provider/ContentProviderUtils.java", "diffHunk": "@@ -197,20 +200,21 @@ private void deleteTrackPointsAndWaypoints(Context context, long trackId) {\n         contentResolver.delete(TrackPointsColumns.CONTENT_URI_BY_ID, where, selectionArgs);\n \n         contentResolver.delete(WaypointsColumns.CONTENT_URI, WaypointsColumns.TRACKID + \"=?\", new String[]{Long.toString(trackId)});\n-        deleteDirectoryRecurse(FileUtils.getPhotoDir(context, trackId));\n     }\n \n     /**\n      * Delete the directory recursively.\n      *\n-     * @param dir the directory\n+     * @param file the directory\n      */\n-    private void deleteDirectoryRecurse(File dir) {\n-        if (dir != null && dir.exists() && dir.isDirectory()) {\n-            for (File child : dir.listFiles()) {\n+    private void deleteDirectoryRecurse(File file) {\n+        if (file != null && file.exists() && file.isDirectory()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA1NDM5Nw=="}, "originalCommit": {"oid": "46c06f0438745c7ce2ba5308e3c6251c12301542"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU4NDgyNzAyOnYy", "diffSide": "RIGHT", "path": "src/androidTest/java/de/dennisguse/opentracks/content/data/TestDataUtil.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjoyNzo0MlrOGMSxFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yN1QwNjo0ODozNlrOGMTYDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU0MzU3NQ==", "bodyText": "Actually, you can just throw the IOException directly as this is only test code :)", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/194#discussion_r415543575", "createdAt": "2020-04-27T06:27:42Z", "author": {"login": "dennisguse"}, "path": "src/androidTest/java/de/dennisguse/opentracks/content/data/TestDataUtil.java", "diffHunk": "@@ -73,4 +79,26 @@ public static void insertTrackWithLocations(ContentProviderUtils contentProvider\n         contentProviderUtils.insertTrack(track);\n         contentProviderUtils.bulkInsertTrackPoint(trackPoints, track.getId());\n     }\n+\n+    /**\n+     * Creates a Waypoint with a photo.\n+     *\n+     * @param context  The context.\n+     * @param trackId  The track id.\n+     * @param location The location.\n+     * @return the Waypoint created.\n+     */\n+    public static  Waypoint createWaypointWithPhoto(Context context, long trackId, Location location) {\n+        String photoUrl = \"\";\n+        try {\n+            File dstFile = new File(FileUtils.getImageUrl(context, trackId));\n+            dstFile.createNewFile();\n+            Uri photoUri = FileUtils.getUriForFile(context, dstFile);\n+            photoUrl = photoUri.toString();\n+        } catch (IOException ioe) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b8db435446edcfd67117c33b108ffb5f84466f59"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU1MzU0OA==", "bodyText": "Ok. Done :)", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/194#discussion_r415553548", "createdAt": "2020-04-27T06:48:36Z", "author": {"login": "rgmf"}, "path": "src/androidTest/java/de/dennisguse/opentracks/content/data/TestDataUtil.java", "diffHunk": "@@ -73,4 +79,26 @@ public static void insertTrackWithLocations(ContentProviderUtils contentProvider\n         contentProviderUtils.insertTrack(track);\n         contentProviderUtils.bulkInsertTrackPoint(trackPoints, track.getId());\n     }\n+\n+    /**\n+     * Creates a Waypoint with a photo.\n+     *\n+     * @param context  The context.\n+     * @param trackId  The track id.\n+     * @param location The location.\n+     * @return the Waypoint created.\n+     */\n+    public static  Waypoint createWaypointWithPhoto(Context context, long trackId, Location location) {\n+        String photoUrl = \"\";\n+        try {\n+            File dstFile = new File(FileUtils.getImageUrl(context, trackId));\n+            dstFile.createNewFile();\n+            Uri photoUri = FileUtils.getUriForFile(context, dstFile);\n+            photoUrl = photoUri.toString();\n+        } catch (IOException ioe) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTU0MzU3NQ=="}, "originalCommit": {"oid": "b8db435446edcfd67117c33b108ffb5f84466f59"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1988, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}