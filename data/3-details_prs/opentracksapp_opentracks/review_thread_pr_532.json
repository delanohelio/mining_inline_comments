{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3NjYzMTU3", "number": 532, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQyMTo1MjowMFrOFBUxxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQyMjowMjowMFrOFBU29A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2OTMzMzE4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/viewmodels/MarkerEditViewModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQyMTo1MjowMFrOIABvHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQyMTo1MjowMFrOIABvHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg5OTM1Ng==", "bodyText": "Not needed; directly set = 0 in line 58 instead of -1", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/532#discussion_r536899356", "createdAt": "2020-12-05T21:52:00Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/MarkerEditViewModel.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.net.Uri;\n+import android.os.ParcelFileDescriptor;\n+import android.util.Log;\n+import android.widget.Toast;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.io.File;\n+import java.io.FileDescriptor;\n+import java.util.NoSuchElementException;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.content.data.Marker;\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.services.TrackRecordingServiceConnection;\n+import de.dennisguse.opentracks.util.FileUtils;\n+\n+public class MarkerEditViewModel extends AndroidViewModel {\n+\n+    private static final String TAG = MarkerEditViewModel.class.getSimpleName();\n+\n+    private MutableLiveData<Marker> markerData;\n+    private boolean isNewMarker;\n+    private Uri photoOriginalUri;\n+    private final TrackRecordingServiceConnection trackRecordingServiceConnection = new TrackRecordingServiceConnection();\n+\n+    public MarkerEditViewModel(@NonNull Application application) {\n+        super(application);\n+    }\n+\n+    public LiveData<Marker> getMarkerData(@NonNull Track.Id trackId, @Nullable Marker.Id markerId) {\n+        if (markerData == null) {\n+            markerData = new MutableLiveData<>();\n+            trackRecordingServiceConnection.startConnection(getApplication());\n+            loadData(trackId, markerId);\n+        }\n+        return markerData;\n+    }\n+\n+    @Override\n+    protected void onCleared() {\n+        super.onCleared();\n+        trackRecordingServiceConnection.unbind(getApplication());\n+    }\n+\n+    private void loadData(Track.Id trackId, Marker.Id markerId) {\n+        Marker marker;\n+        isNewMarker = markerId == null;\n+        if (isNewMarker) {\n+            int nextMarkerNumber = trackId == null ? -1 : new ContentProviderUtils(getApplication()).getNextMarkerNumber(trackId);\n+            if (nextMarkerNumber == -1) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249b2240c7fbc67f4936a711b250024203e602e6"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2OTMzNDQ4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/viewmodels/MarkerEditViewModel.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQyMTo1Mjo0NVrOIABvpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQyMTo1Mjo0NVrOIABvpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg5OTQ5Mw==", "bodyText": "Should already be null", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/532#discussion_r536899493", "createdAt": "2020-12-05T21:52:45Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/MarkerEditViewModel.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.net.Uri;\n+import android.os.ParcelFileDescriptor;\n+import android.util.Log;\n+import android.widget.Toast;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.io.File;\n+import java.io.FileDescriptor;\n+import java.util.NoSuchElementException;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.content.data.Marker;\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.services.TrackRecordingServiceConnection;\n+import de.dennisguse.opentracks.util.FileUtils;\n+\n+public class MarkerEditViewModel extends AndroidViewModel {\n+\n+    private static final String TAG = MarkerEditViewModel.class.getSimpleName();\n+\n+    private MutableLiveData<Marker> markerData;\n+    private boolean isNewMarker;\n+    private Uri photoOriginalUri;\n+    private final TrackRecordingServiceConnection trackRecordingServiceConnection = new TrackRecordingServiceConnection();\n+\n+    public MarkerEditViewModel(@NonNull Application application) {\n+        super(application);\n+    }\n+\n+    public LiveData<Marker> getMarkerData(@NonNull Track.Id trackId, @Nullable Marker.Id markerId) {\n+        if (markerData == null) {\n+            markerData = new MutableLiveData<>();\n+            trackRecordingServiceConnection.startConnection(getApplication());\n+            loadData(trackId, markerId);\n+        }\n+        return markerData;\n+    }\n+\n+    @Override\n+    protected void onCleared() {\n+        super.onCleared();\n+        trackRecordingServiceConnection.unbind(getApplication());\n+    }\n+\n+    private void loadData(Track.Id trackId, Marker.Id markerId) {\n+        Marker marker;\n+        isNewMarker = markerId == null;\n+        if (isNewMarker) {\n+            int nextMarkerNumber = trackId == null ? -1 : new ContentProviderUtils(getApplication()).getNextMarkerNumber(trackId);\n+            if (nextMarkerNumber == -1) {\n+                nextMarkerNumber = 0;\n+            }\n+            marker = new Marker(trackId);\n+            marker.setId(markerId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249b2240c7fbc67f4936a711b250024203e602e6"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2OTMzODI5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/MarkerEditActivity.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQyMTo1NTo0OVrOIABxUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQyMTozMDowMFrOIAPrLw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg5OTkyMQ==", "bodyText": "Very similar to line 173-176: can we somehow combine this?", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/532#discussion_r536899921", "createdAt": "2020-12-05T21:55:49Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/MarkerEditActivity.java", "diffHunk": "@@ -246,26 +160,20 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n                 Toast.makeText(this, R.string.marker_add_photo_canceled, Toast.LENGTH_LONG).show();\n                 return;\n             } else if (resultCode == RESULT_OK) {\n-                setMarkerImageView(photoUri);\n+                viewModel.onNewCameraPhoto(cameraPhotoUri,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249b2240c7fbc67f4936a711b250024203e602e6"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA2ODU1Mw==", "bodyText": "I cannot to figure out how. Because the URI comes from different places depending on the photo's source: camera or gallery.", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/532#discussion_r537068553", "createdAt": "2020-12-06T16:07:06Z", "author": {"login": "rgmf"}, "path": "src/main/java/de/dennisguse/opentracks/MarkerEditActivity.java", "diffHunk": "@@ -246,26 +160,20 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n                 Toast.makeText(this, R.string.marker_add_photo_canceled, Toast.LENGTH_LONG).show();\n                 return;\n             } else if (resultCode == RESULT_OK) {\n-                setMarkerImageView(photoUri);\n+                viewModel.onNewCameraPhoto(cameraPhotoUri,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg5OTkyMQ=="}, "originalCommit": {"oid": "249b2240c7fbc67f4936a711b250024203e602e6"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEyNTQ2OA==", "bodyText": "We can just assign the URI to a variable and the later use it.\nUri a = null;\nif (resultCode == RESULT_OK) {\n  a = xxx;\n} else {\n  a = zzz;\n}\n                viewModel.onNewGalleryPhoto(a,\n                        viewBinding.markerEditName.getText().toString(),\n                        viewBinding.markerEditMarkerType.getText().toString(),\n                        viewBinding.markerEditDescription.getText().toString());", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/532#discussion_r537125468", "createdAt": "2020-12-06T21:17:36Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/MarkerEditActivity.java", "diffHunk": "@@ -246,26 +160,20 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n                 Toast.makeText(this, R.string.marker_add_photo_canceled, Toast.LENGTH_LONG).show();\n                 return;\n             } else if (resultCode == RESULT_OK) {\n-                setMarkerImageView(photoUri);\n+                viewModel.onNewCameraPhoto(cameraPhotoUri,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg5OTkyMQ=="}, "originalCommit": {"oid": "249b2240c7fbc67f4936a711b250024203e602e6"}, "originalPosition": 190}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEyNzcyNw==", "bodyText": "Yes, but ViewModel have two methods onNewGalleryPhoto and onNewCameraPhoto because camera URI's photo is ready but gallery URI's photo need to be copied to internal OT storage.\nI don't know if I'm missing something...", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/532#discussion_r537127727", "createdAt": "2020-12-06T21:30:00Z", "author": {"login": "rgmf"}, "path": "src/main/java/de/dennisguse/opentracks/MarkerEditActivity.java", "diffHunk": "@@ -246,26 +160,20 @@ protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n                 Toast.makeText(this, R.string.marker_add_photo_canceled, Toast.LENGTH_LONG).show();\n                 return;\n             } else if (resultCode == RESULT_OK) {\n-                setMarkerImageView(photoUri);\n+                viewModel.onNewCameraPhoto(cameraPhotoUri,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjg5OTkyMQ=="}, "originalCommit": {"oid": "249b2240c7fbc67f4936a711b250024203e602e6"}, "originalPosition": 190}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2OTMzOTkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/viewmodels/MarkerEditViewModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQyMTo1NzowMVrOIAByBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQyMTo1NzozNFrOIABydw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkwMDEwMw==", "bodyText": "getMarker() instead?\nIf you want to make sure that the exception is properly recognized, we could use getMarker() throws NoSuchElementException (if needed).", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/532#discussion_r536900103", "createdAt": "2020-12-05T21:57:01Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/MarkerEditViewModel.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.net.Uri;\n+import android.os.ParcelFileDescriptor;\n+import android.util.Log;\n+import android.widget.Toast;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.io.File;\n+import java.io.FileDescriptor;\n+import java.util.NoSuchElementException;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.content.data.Marker;\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.services.TrackRecordingServiceConnection;\n+import de.dennisguse.opentracks.util.FileUtils;\n+\n+public class MarkerEditViewModel extends AndroidViewModel {\n+\n+    private static final String TAG = MarkerEditViewModel.class.getSimpleName();\n+\n+    private MutableLiveData<Marker> markerData;\n+    private boolean isNewMarker;\n+    private Uri photoOriginalUri;\n+    private final TrackRecordingServiceConnection trackRecordingServiceConnection = new TrackRecordingServiceConnection();\n+\n+    public MarkerEditViewModel(@NonNull Application application) {\n+        super(application);\n+    }\n+\n+    public LiveData<Marker> getMarkerData(@NonNull Track.Id trackId, @Nullable Marker.Id markerId) {\n+        if (markerData == null) {\n+            markerData = new MutableLiveData<>();\n+            trackRecordingServiceConnection.startConnection(getApplication());\n+            loadData(trackId, markerId);\n+        }\n+        return markerData;\n+    }\n+\n+    @Override\n+    protected void onCleared() {\n+        super.onCleared();\n+        trackRecordingServiceConnection.unbind(getApplication());\n+    }\n+\n+    private void loadData(Track.Id trackId, Marker.Id markerId) {\n+        Marker marker;\n+        isNewMarker = markerId == null;\n+        if (isNewMarker) {\n+            int nextMarkerNumber = trackId == null ? -1 : new ContentProviderUtils(getApplication()).getNextMarkerNumber(trackId);\n+            if (nextMarkerNumber == -1) {\n+                nextMarkerNumber = 0;\n+            }\n+            marker = new Marker(trackId);\n+            marker.setId(markerId);\n+            marker.setName(getApplication().getString(R.string.marker_name_format, nextMarkerNumber));\n+        } else {\n+            marker = new ContentProviderUtils(getApplication()).getMarker(markerId);\n+            if (marker.hasPhoto()) {\n+                photoOriginalUri = marker.getPhotoURI();\n+            }\n+        }\n+        markerData.postValue(marker);\n+    }\n+\n+    private Marker getMarkerOrThrowException() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249b2240c7fbc67f4936a711b250024203e602e6"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkwMDIxNQ==", "bodyText": "Also private @NonNull Marker getMarker()", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/532#discussion_r536900215", "createdAt": "2020-12-05T21:57:34Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/MarkerEditViewModel.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.net.Uri;\n+import android.os.ParcelFileDescriptor;\n+import android.util.Log;\n+import android.widget.Toast;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.io.File;\n+import java.io.FileDescriptor;\n+import java.util.NoSuchElementException;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.content.data.Marker;\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.services.TrackRecordingServiceConnection;\n+import de.dennisguse.opentracks.util.FileUtils;\n+\n+public class MarkerEditViewModel extends AndroidViewModel {\n+\n+    private static final String TAG = MarkerEditViewModel.class.getSimpleName();\n+\n+    private MutableLiveData<Marker> markerData;\n+    private boolean isNewMarker;\n+    private Uri photoOriginalUri;\n+    private final TrackRecordingServiceConnection trackRecordingServiceConnection = new TrackRecordingServiceConnection();\n+\n+    public MarkerEditViewModel(@NonNull Application application) {\n+        super(application);\n+    }\n+\n+    public LiveData<Marker> getMarkerData(@NonNull Track.Id trackId, @Nullable Marker.Id markerId) {\n+        if (markerData == null) {\n+            markerData = new MutableLiveData<>();\n+            trackRecordingServiceConnection.startConnection(getApplication());\n+            loadData(trackId, markerId);\n+        }\n+        return markerData;\n+    }\n+\n+    @Override\n+    protected void onCleared() {\n+        super.onCleared();\n+        trackRecordingServiceConnection.unbind(getApplication());\n+    }\n+\n+    private void loadData(Track.Id trackId, Marker.Id markerId) {\n+        Marker marker;\n+        isNewMarker = markerId == null;\n+        if (isNewMarker) {\n+            int nextMarkerNumber = trackId == null ? -1 : new ContentProviderUtils(getApplication()).getNextMarkerNumber(trackId);\n+            if (nextMarkerNumber == -1) {\n+                nextMarkerNumber = 0;\n+            }\n+            marker = new Marker(trackId);\n+            marker.setId(markerId);\n+            marker.setName(getApplication().getString(R.string.marker_name_format, nextMarkerNumber));\n+        } else {\n+            marker = new ContentProviderUtils(getApplication()).getMarker(markerId);\n+            if (marker.hasPhoto()) {\n+                photoOriginalUri = marker.getPhotoURI();\n+            }\n+        }\n+        markerData.postValue(marker);\n+    }\n+\n+    private Marker getMarkerOrThrowException() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkwMDEwMw=="}, "originalCommit": {"oid": "249b2240c7fbc67f4936a711b250024203e602e6"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2OTM0MzAxOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/viewmodels/MarkerEditViewModel.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQyMTo1OToyM1rOIABzVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQyMTozMzowNVrOIAPtaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkwMDQzOQ==", "bodyText": "Log.e(TAG, \"Failed to get picture from gallery URI: \" + e.getMessage());\nalso catch exception already in line 120?\nLine 121-125 cannot produce this.", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/532#discussion_r536900439", "createdAt": "2020-12-05T21:59:23Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/MarkerEditViewModel.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.net.Uri;\n+import android.os.ParcelFileDescriptor;\n+import android.util.Log;\n+import android.widget.Toast;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.io.File;\n+import java.io.FileDescriptor;\n+import java.util.NoSuchElementException;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.content.data.Marker;\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.services.TrackRecordingServiceConnection;\n+import de.dennisguse.opentracks.util.FileUtils;\n+\n+public class MarkerEditViewModel extends AndroidViewModel {\n+\n+    private static final String TAG = MarkerEditViewModel.class.getSimpleName();\n+\n+    private MutableLiveData<Marker> markerData;\n+    private boolean isNewMarker;\n+    private Uri photoOriginalUri;\n+    private final TrackRecordingServiceConnection trackRecordingServiceConnection = new TrackRecordingServiceConnection();\n+\n+    public MarkerEditViewModel(@NonNull Application application) {\n+        super(application);\n+    }\n+\n+    public LiveData<Marker> getMarkerData(@NonNull Track.Id trackId, @Nullable Marker.Id markerId) {\n+        if (markerData == null) {\n+            markerData = new MutableLiveData<>();\n+            trackRecordingServiceConnection.startConnection(getApplication());\n+            loadData(trackId, markerId);\n+        }\n+        return markerData;\n+    }\n+\n+    @Override\n+    protected void onCleared() {\n+        super.onCleared();\n+        trackRecordingServiceConnection.unbind(getApplication());\n+    }\n+\n+    private void loadData(Track.Id trackId, Marker.Id markerId) {\n+        Marker marker;\n+        isNewMarker = markerId == null;\n+        if (isNewMarker) {\n+            int nextMarkerNumber = trackId == null ? -1 : new ContentProviderUtils(getApplication()).getNextMarkerNumber(trackId);\n+            if (nextMarkerNumber == -1) {\n+                nextMarkerNumber = 0;\n+            }\n+            marker = new Marker(trackId);\n+            marker.setId(markerId);\n+            marker.setName(getApplication().getString(R.string.marker_name_format, nextMarkerNumber));\n+        } else {\n+            marker = new ContentProviderUtils(getApplication()).getMarker(markerId);\n+            if (marker.hasPhoto()) {\n+                photoOriginalUri = marker.getPhotoURI();\n+            }\n+        }\n+        markerData.postValue(marker);\n+    }\n+\n+    private Marker getMarkerOrThrowException() {\n+        Marker marker = markerData != null ? markerData.getValue() : null;\n+        if (marker == null) {\n+            Log.d(TAG, \"Marker data shouldn't be null. Call getMarkerData before.\");\n+            throw new NoSuchElementException(\"Marker data shouldn't be null. Call getMarkerData before.\");\n+        }\n+\n+        return marker;\n+    }\n+\n+    private void deletePhoto(Uri photoUri) {\n+        File photoFile = FileUtils.getPhotoFileIfExists(getApplication(), markerData.getValue().getTrackId(), photoUri);\n+        FileUtils.deleteDirectoryRecurse(photoFile);\n+    }\n+\n+    public void onPhotoDelete(String name, String category, String description) {\n+        Marker marker =  getMarkerOrThrowException();\n+        if (marker.hasPhoto()) {\n+            if (!marker.getPhotoURI().equals(photoOriginalUri)) {\n+                deletePhoto(marker.getPhotoURI());\n+            }\n+            marker.setPhotoUrl(null);\n+            marker.setName(name);\n+            marker.setCategory(category);\n+            marker.setDescription(description);\n+            markerData.postValue(marker);\n+        }\n+    }\n+\n+    public void onNewCameraPhoto(@NonNull Uri photoUri, String name, String category, String description) {\n+        Marker marker =  getMarkerOrThrowException();\n+        marker.setPhotoUrl(photoUri.toString());\n+        marker.setName(name);\n+        marker.setCategory(category);\n+        marker.setDescription(description);\n+        markerData.postValue(marker);\n+    }\n+\n+    public void onNewGalleryPhoto(@NonNull Uri srcUri, String name, String category, String description) {\n+        Marker marker =  getMarkerOrThrowException();\n+\n+        try (ParcelFileDescriptor parcelFd = getApplication().getContentResolver().openFileDescriptor(srcUri, \"r\")) {\n+            FileDescriptor srcFd = parcelFd.getFileDescriptor();\n+            File dstFile = new File(FileUtils.getImageUrl(getApplication(), marker.getTrackId()));\n+            FileUtils.copy(srcFd, dstFile);\n+\n+            Uri photoUri = FileUtils.getUriForFile(getApplication(), dstFile);\n+            marker.setPhotoUrl(photoUri.toString());\n+            marker.setName(name);\n+            marker.setCategory(category);\n+            marker.setDescription(description);\n+            markerData.postValue(marker);\n+        } catch(Exception e) {\n+            Log.e(TAG, e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249b2240c7fbc67f4936a711b250024203e602e6"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA1OTg0NA==", "bodyText": "I don't understand... That code is basically was moved from MarkerEditActivity to here.", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/532#discussion_r537059844", "createdAt": "2020-12-06T15:24:55Z", "author": {"login": "rgmf"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/MarkerEditViewModel.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.net.Uri;\n+import android.os.ParcelFileDescriptor;\n+import android.util.Log;\n+import android.widget.Toast;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.io.File;\n+import java.io.FileDescriptor;\n+import java.util.NoSuchElementException;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.content.data.Marker;\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.services.TrackRecordingServiceConnection;\n+import de.dennisguse.opentracks.util.FileUtils;\n+\n+public class MarkerEditViewModel extends AndroidViewModel {\n+\n+    private static final String TAG = MarkerEditViewModel.class.getSimpleName();\n+\n+    private MutableLiveData<Marker> markerData;\n+    private boolean isNewMarker;\n+    private Uri photoOriginalUri;\n+    private final TrackRecordingServiceConnection trackRecordingServiceConnection = new TrackRecordingServiceConnection();\n+\n+    public MarkerEditViewModel(@NonNull Application application) {\n+        super(application);\n+    }\n+\n+    public LiveData<Marker> getMarkerData(@NonNull Track.Id trackId, @Nullable Marker.Id markerId) {\n+        if (markerData == null) {\n+            markerData = new MutableLiveData<>();\n+            trackRecordingServiceConnection.startConnection(getApplication());\n+            loadData(trackId, markerId);\n+        }\n+        return markerData;\n+    }\n+\n+    @Override\n+    protected void onCleared() {\n+        super.onCleared();\n+        trackRecordingServiceConnection.unbind(getApplication());\n+    }\n+\n+    private void loadData(Track.Id trackId, Marker.Id markerId) {\n+        Marker marker;\n+        isNewMarker = markerId == null;\n+        if (isNewMarker) {\n+            int nextMarkerNumber = trackId == null ? -1 : new ContentProviderUtils(getApplication()).getNextMarkerNumber(trackId);\n+            if (nextMarkerNumber == -1) {\n+                nextMarkerNumber = 0;\n+            }\n+            marker = new Marker(trackId);\n+            marker.setId(markerId);\n+            marker.setName(getApplication().getString(R.string.marker_name_format, nextMarkerNumber));\n+        } else {\n+            marker = new ContentProviderUtils(getApplication()).getMarker(markerId);\n+            if (marker.hasPhoto()) {\n+                photoOriginalUri = marker.getPhotoURI();\n+            }\n+        }\n+        markerData.postValue(marker);\n+    }\n+\n+    private Marker getMarkerOrThrowException() {\n+        Marker marker = markerData != null ? markerData.getValue() : null;\n+        if (marker == null) {\n+            Log.d(TAG, \"Marker data shouldn't be null. Call getMarkerData before.\");\n+            throw new NoSuchElementException(\"Marker data shouldn't be null. Call getMarkerData before.\");\n+        }\n+\n+        return marker;\n+    }\n+\n+    private void deletePhoto(Uri photoUri) {\n+        File photoFile = FileUtils.getPhotoFileIfExists(getApplication(), markerData.getValue().getTrackId(), photoUri);\n+        FileUtils.deleteDirectoryRecurse(photoFile);\n+    }\n+\n+    public void onPhotoDelete(String name, String category, String description) {\n+        Marker marker =  getMarkerOrThrowException();\n+        if (marker.hasPhoto()) {\n+            if (!marker.getPhotoURI().equals(photoOriginalUri)) {\n+                deletePhoto(marker.getPhotoURI());\n+            }\n+            marker.setPhotoUrl(null);\n+            marker.setName(name);\n+            marker.setCategory(category);\n+            marker.setDescription(description);\n+            markerData.postValue(marker);\n+        }\n+    }\n+\n+    public void onNewCameraPhoto(@NonNull Uri photoUri, String name, String category, String description) {\n+        Marker marker =  getMarkerOrThrowException();\n+        marker.setPhotoUrl(photoUri.toString());\n+        marker.setName(name);\n+        marker.setCategory(category);\n+        marker.setDescription(description);\n+        markerData.postValue(marker);\n+    }\n+\n+    public void onNewGalleryPhoto(@NonNull Uri srcUri, String name, String category, String description) {\n+        Marker marker =  getMarkerOrThrowException();\n+\n+        try (ParcelFileDescriptor parcelFd = getApplication().getContentResolver().openFileDescriptor(srcUri, \"r\")) {\n+            FileDescriptor srcFd = parcelFd.getFileDescriptor();\n+            File dstFile = new File(FileUtils.getImageUrl(getApplication(), marker.getTrackId()));\n+            FileUtils.copy(srcFd, dstFile);\n+\n+            Uri photoUri = FileUtils.getUriForFile(getApplication(), dstFile);\n+            marker.setPhotoUrl(photoUri.toString());\n+            marker.setName(name);\n+            marker.setCategory(category);\n+            marker.setDescription(description);\n+            markerData.postValue(marker);\n+        } catch(Exception e) {\n+            Log.e(TAG, e.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkwMDQzOQ=="}, "originalCommit": {"oid": "249b2240c7fbc67f4936a711b250024203e602e6"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEyNDkxNw==", "bodyText": "Doesn't mean that the code is good ;)\nI meant that catching the exception should be done at the place it occurs - I guess might occur in some of these calls:\n            FileDescriptor srcFd = parcelFd.getFileDescriptor();\n            File dstFile = new File(FileUtils.getImageUrl(getApplication(), marker.getTrackId()));\n            FileUtils.copy(srcFd, dstFile);\n\n            Uri photoUri = FileUtils.getUriForFile(getApplication(), dstFile);\n\nThe marker.XXX calls should not do this, so they should be out of the catch.", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/532#discussion_r537124917", "createdAt": "2020-12-06T21:14:48Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/MarkerEditViewModel.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.net.Uri;\n+import android.os.ParcelFileDescriptor;\n+import android.util.Log;\n+import android.widget.Toast;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.io.File;\n+import java.io.FileDescriptor;\n+import java.util.NoSuchElementException;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.content.data.Marker;\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.services.TrackRecordingServiceConnection;\n+import de.dennisguse.opentracks.util.FileUtils;\n+\n+public class MarkerEditViewModel extends AndroidViewModel {\n+\n+    private static final String TAG = MarkerEditViewModel.class.getSimpleName();\n+\n+    private MutableLiveData<Marker> markerData;\n+    private boolean isNewMarker;\n+    private Uri photoOriginalUri;\n+    private final TrackRecordingServiceConnection trackRecordingServiceConnection = new TrackRecordingServiceConnection();\n+\n+    public MarkerEditViewModel(@NonNull Application application) {\n+        super(application);\n+    }\n+\n+    public LiveData<Marker> getMarkerData(@NonNull Track.Id trackId, @Nullable Marker.Id markerId) {\n+        if (markerData == null) {\n+            markerData = new MutableLiveData<>();\n+            trackRecordingServiceConnection.startConnection(getApplication());\n+            loadData(trackId, markerId);\n+        }\n+        return markerData;\n+    }\n+\n+    @Override\n+    protected void onCleared() {\n+        super.onCleared();\n+        trackRecordingServiceConnection.unbind(getApplication());\n+    }\n+\n+    private void loadData(Track.Id trackId, Marker.Id markerId) {\n+        Marker marker;\n+        isNewMarker = markerId == null;\n+        if (isNewMarker) {\n+            int nextMarkerNumber = trackId == null ? -1 : new ContentProviderUtils(getApplication()).getNextMarkerNumber(trackId);\n+            if (nextMarkerNumber == -1) {\n+                nextMarkerNumber = 0;\n+            }\n+            marker = new Marker(trackId);\n+            marker.setId(markerId);\n+            marker.setName(getApplication().getString(R.string.marker_name_format, nextMarkerNumber));\n+        } else {\n+            marker = new ContentProviderUtils(getApplication()).getMarker(markerId);\n+            if (marker.hasPhoto()) {\n+                photoOriginalUri = marker.getPhotoURI();\n+            }\n+        }\n+        markerData.postValue(marker);\n+    }\n+\n+    private Marker getMarkerOrThrowException() {\n+        Marker marker = markerData != null ? markerData.getValue() : null;\n+        if (marker == null) {\n+            Log.d(TAG, \"Marker data shouldn't be null. Call getMarkerData before.\");\n+            throw new NoSuchElementException(\"Marker data shouldn't be null. Call getMarkerData before.\");\n+        }\n+\n+        return marker;\n+    }\n+\n+    private void deletePhoto(Uri photoUri) {\n+        File photoFile = FileUtils.getPhotoFileIfExists(getApplication(), markerData.getValue().getTrackId(), photoUri);\n+        FileUtils.deleteDirectoryRecurse(photoFile);\n+    }\n+\n+    public void onPhotoDelete(String name, String category, String description) {\n+        Marker marker =  getMarkerOrThrowException();\n+        if (marker.hasPhoto()) {\n+            if (!marker.getPhotoURI().equals(photoOriginalUri)) {\n+                deletePhoto(marker.getPhotoURI());\n+            }\n+            marker.setPhotoUrl(null);\n+            marker.setName(name);\n+            marker.setCategory(category);\n+            marker.setDescription(description);\n+            markerData.postValue(marker);\n+        }\n+    }\n+\n+    public void onNewCameraPhoto(@NonNull Uri photoUri, String name, String category, String description) {\n+        Marker marker =  getMarkerOrThrowException();\n+        marker.setPhotoUrl(photoUri.toString());\n+        marker.setName(name);\n+        marker.setCategory(category);\n+        marker.setDescription(description);\n+        markerData.postValue(marker);\n+    }\n+\n+    public void onNewGalleryPhoto(@NonNull Uri srcUri, String name, String category, String description) {\n+        Marker marker =  getMarkerOrThrowException();\n+\n+        try (ParcelFileDescriptor parcelFd = getApplication().getContentResolver().openFileDescriptor(srcUri, \"r\")) {\n+            FileDescriptor srcFd = parcelFd.getFileDescriptor();\n+            File dstFile = new File(FileUtils.getImageUrl(getApplication(), marker.getTrackId()));\n+            FileUtils.copy(srcFd, dstFile);\n+\n+            Uri photoUri = FileUtils.getUriForFile(getApplication(), dstFile);\n+            marker.setPhotoUrl(photoUri.toString());\n+            marker.setName(name);\n+            marker.setCategory(category);\n+            marker.setDescription(description);\n+            markerData.postValue(marker);\n+        } catch(Exception e) {\n+            Log.e(TAG, e.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkwMDQzOQ=="}, "originalCommit": {"oid": "249b2240c7fbc67f4936a711b250024203e602e6"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzEyODI5Nw==", "bodyText": "Okay :D", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/532#discussion_r537128297", "createdAt": "2020-12-06T21:33:05Z", "author": {"login": "rgmf"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/MarkerEditViewModel.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.net.Uri;\n+import android.os.ParcelFileDescriptor;\n+import android.util.Log;\n+import android.widget.Toast;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.io.File;\n+import java.io.FileDescriptor;\n+import java.util.NoSuchElementException;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.content.data.Marker;\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.services.TrackRecordingServiceConnection;\n+import de.dennisguse.opentracks.util.FileUtils;\n+\n+public class MarkerEditViewModel extends AndroidViewModel {\n+\n+    private static final String TAG = MarkerEditViewModel.class.getSimpleName();\n+\n+    private MutableLiveData<Marker> markerData;\n+    private boolean isNewMarker;\n+    private Uri photoOriginalUri;\n+    private final TrackRecordingServiceConnection trackRecordingServiceConnection = new TrackRecordingServiceConnection();\n+\n+    public MarkerEditViewModel(@NonNull Application application) {\n+        super(application);\n+    }\n+\n+    public LiveData<Marker> getMarkerData(@NonNull Track.Id trackId, @Nullable Marker.Id markerId) {\n+        if (markerData == null) {\n+            markerData = new MutableLiveData<>();\n+            trackRecordingServiceConnection.startConnection(getApplication());\n+            loadData(trackId, markerId);\n+        }\n+        return markerData;\n+    }\n+\n+    @Override\n+    protected void onCleared() {\n+        super.onCleared();\n+        trackRecordingServiceConnection.unbind(getApplication());\n+    }\n+\n+    private void loadData(Track.Id trackId, Marker.Id markerId) {\n+        Marker marker;\n+        isNewMarker = markerId == null;\n+        if (isNewMarker) {\n+            int nextMarkerNumber = trackId == null ? -1 : new ContentProviderUtils(getApplication()).getNextMarkerNumber(trackId);\n+            if (nextMarkerNumber == -1) {\n+                nextMarkerNumber = 0;\n+            }\n+            marker = new Marker(trackId);\n+            marker.setId(markerId);\n+            marker.setName(getApplication().getString(R.string.marker_name_format, nextMarkerNumber));\n+        } else {\n+            marker = new ContentProviderUtils(getApplication()).getMarker(markerId);\n+            if (marker.hasPhoto()) {\n+                photoOriginalUri = marker.getPhotoURI();\n+            }\n+        }\n+        markerData.postValue(marker);\n+    }\n+\n+    private Marker getMarkerOrThrowException() {\n+        Marker marker = markerData != null ? markerData.getValue() : null;\n+        if (marker == null) {\n+            Log.d(TAG, \"Marker data shouldn't be null. Call getMarkerData before.\");\n+            throw new NoSuchElementException(\"Marker data shouldn't be null. Call getMarkerData before.\");\n+        }\n+\n+        return marker;\n+    }\n+\n+    private void deletePhoto(Uri photoUri) {\n+        File photoFile = FileUtils.getPhotoFileIfExists(getApplication(), markerData.getValue().getTrackId(), photoUri);\n+        FileUtils.deleteDirectoryRecurse(photoFile);\n+    }\n+\n+    public void onPhotoDelete(String name, String category, String description) {\n+        Marker marker =  getMarkerOrThrowException();\n+        if (marker.hasPhoto()) {\n+            if (!marker.getPhotoURI().equals(photoOriginalUri)) {\n+                deletePhoto(marker.getPhotoURI());\n+            }\n+            marker.setPhotoUrl(null);\n+            marker.setName(name);\n+            marker.setCategory(category);\n+            marker.setDescription(description);\n+            markerData.postValue(marker);\n+        }\n+    }\n+\n+    public void onNewCameraPhoto(@NonNull Uri photoUri, String name, String category, String description) {\n+        Marker marker =  getMarkerOrThrowException();\n+        marker.setPhotoUrl(photoUri.toString());\n+        marker.setName(name);\n+        marker.setCategory(category);\n+        marker.setDescription(description);\n+        markerData.postValue(marker);\n+    }\n+\n+    public void onNewGalleryPhoto(@NonNull Uri srcUri, String name, String category, String description) {\n+        Marker marker =  getMarkerOrThrowException();\n+\n+        try (ParcelFileDescriptor parcelFd = getApplication().getContentResolver().openFileDescriptor(srcUri, \"r\")) {\n+            FileDescriptor srcFd = parcelFd.getFileDescriptor();\n+            File dstFile = new File(FileUtils.getImageUrl(getApplication(), marker.getTrackId()));\n+            FileUtils.copy(srcFd, dstFile);\n+\n+            Uri photoUri = FileUtils.getUriForFile(getApplication(), dstFile);\n+            marker.setPhotoUrl(photoUri.toString());\n+            marker.setName(name);\n+            marker.setCategory(category);\n+            marker.setDescription(description);\n+            markerData.postValue(marker);\n+        } catch(Exception e) {\n+            Log.e(TAG, e.getMessage());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkwMDQzOQ=="}, "originalCommit": {"oid": "249b2240c7fbc67f4936a711b250024203e602e6"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM2OTM0NjQ0OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/viewmodels/MarkerEditViewModel.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNVQyMjowMjowMFrOIAB02w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wNlQxNTo0NTo0N1rOIAL1RQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkwMDgyNw==", "bodyText": "Somehow relatively complicated (or it is too late).\nIs it possible that multiple if's are valid?", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/532#discussion_r536900827", "createdAt": "2020-12-05T22:02:00Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/MarkerEditViewModel.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.net.Uri;\n+import android.os.ParcelFileDescriptor;\n+import android.util.Log;\n+import android.widget.Toast;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.io.File;\n+import java.io.FileDescriptor;\n+import java.util.NoSuchElementException;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.content.data.Marker;\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.services.TrackRecordingServiceConnection;\n+import de.dennisguse.opentracks.util.FileUtils;\n+\n+public class MarkerEditViewModel extends AndroidViewModel {\n+\n+    private static final String TAG = MarkerEditViewModel.class.getSimpleName();\n+\n+    private MutableLiveData<Marker> markerData;\n+    private boolean isNewMarker;\n+    private Uri photoOriginalUri;\n+    private final TrackRecordingServiceConnection trackRecordingServiceConnection = new TrackRecordingServiceConnection();\n+\n+    public MarkerEditViewModel(@NonNull Application application) {\n+        super(application);\n+    }\n+\n+    public LiveData<Marker> getMarkerData(@NonNull Track.Id trackId, @Nullable Marker.Id markerId) {\n+        if (markerData == null) {\n+            markerData = new MutableLiveData<>();\n+            trackRecordingServiceConnection.startConnection(getApplication());\n+            loadData(trackId, markerId);\n+        }\n+        return markerData;\n+    }\n+\n+    @Override\n+    protected void onCleared() {\n+        super.onCleared();\n+        trackRecordingServiceConnection.unbind(getApplication());\n+    }\n+\n+    private void loadData(Track.Id trackId, Marker.Id markerId) {\n+        Marker marker;\n+        isNewMarker = markerId == null;\n+        if (isNewMarker) {\n+            int nextMarkerNumber = trackId == null ? -1 : new ContentProviderUtils(getApplication()).getNextMarkerNumber(trackId);\n+            if (nextMarkerNumber == -1) {\n+                nextMarkerNumber = 0;\n+            }\n+            marker = new Marker(trackId);\n+            marker.setId(markerId);\n+            marker.setName(getApplication().getString(R.string.marker_name_format, nextMarkerNumber));\n+        } else {\n+            marker = new ContentProviderUtils(getApplication()).getMarker(markerId);\n+            if (marker.hasPhoto()) {\n+                photoOriginalUri = marker.getPhotoURI();\n+            }\n+        }\n+        markerData.postValue(marker);\n+    }\n+\n+    private Marker getMarkerOrThrowException() {\n+        Marker marker = markerData != null ? markerData.getValue() : null;\n+        if (marker == null) {\n+            Log.d(TAG, \"Marker data shouldn't be null. Call getMarkerData before.\");\n+            throw new NoSuchElementException(\"Marker data shouldn't be null. Call getMarkerData before.\");\n+        }\n+\n+        return marker;\n+    }\n+\n+    private void deletePhoto(Uri photoUri) {\n+        File photoFile = FileUtils.getPhotoFileIfExists(getApplication(), markerData.getValue().getTrackId(), photoUri);\n+        FileUtils.deleteDirectoryRecurse(photoFile);\n+    }\n+\n+    public void onPhotoDelete(String name, String category, String description) {\n+        Marker marker =  getMarkerOrThrowException();\n+        if (marker.hasPhoto()) {\n+            if (!marker.getPhotoURI().equals(photoOriginalUri)) {\n+                deletePhoto(marker.getPhotoURI());\n+            }\n+            marker.setPhotoUrl(null);\n+            marker.setName(name);\n+            marker.setCategory(category);\n+            marker.setDescription(description);\n+            markerData.postValue(marker);\n+        }\n+    }\n+\n+    public void onNewCameraPhoto(@NonNull Uri photoUri, String name, String category, String description) {\n+        Marker marker =  getMarkerOrThrowException();\n+        marker.setPhotoUrl(photoUri.toString());\n+        marker.setName(name);\n+        marker.setCategory(category);\n+        marker.setDescription(description);\n+        markerData.postValue(marker);\n+    }\n+\n+    public void onNewGalleryPhoto(@NonNull Uri srcUri, String name, String category, String description) {\n+        Marker marker =  getMarkerOrThrowException();\n+\n+        try (ParcelFileDescriptor parcelFd = getApplication().getContentResolver().openFileDescriptor(srcUri, \"r\")) {\n+            FileDescriptor srcFd = parcelFd.getFileDescriptor();\n+            File dstFile = new File(FileUtils.getImageUrl(getApplication(), marker.getTrackId()));\n+            FileUtils.copy(srcFd, dstFile);\n+\n+            Uri photoUri = FileUtils.getUriForFile(getApplication(), dstFile);\n+            marker.setPhotoUrl(photoUri.toString());\n+            marker.setName(name);\n+            marker.setCategory(category);\n+            marker.setDescription(description);\n+            markerData.postValue(marker);\n+        } catch(Exception e) {\n+            Log.e(TAG, e.getMessage());\n+            Toast.makeText(getApplication(), R.string.marker_add_canceled, Toast.LENGTH_LONG).show();\n+        }\n+    }\n+\n+    private void onAddDone(@NonNull Marker marker, String name, String category, String description) {\n+        trackRecordingServiceConnection.addMarker(getApplication(), name, category, description, marker.hasPhoto() ? marker.getPhotoURI().toString() : null);\n+    }\n+\n+    private void onSaveDone(@NonNull Marker marker, String name, String category, String description) {\n+        marker.setName(name);\n+        marker.setCategory(category);\n+        marker.setDescription(description);\n+        new ContentProviderUtils(getApplication()).updateMarker(getApplication(), marker);\n+\n+        if (photoOriginalUri != null && (!marker.hasPhoto() || !photoOriginalUri.equals(marker.getPhotoURI()))) {\n+            deletePhoto(photoOriginalUri);\n+        }\n+    }\n+\n+    public void onDone(String name, String category, String description) {\n+        Marker marker = getMarkerOrThrowException();\n+        if (isNewMarker) {\n+            onAddDone(marker, name, category, description);\n+        } else {\n+            onSaveDone(marker, name, category, description);\n+        }\n+    }\n+\n+    public void onCancel() {\n+        Marker marker =  getMarkerOrThrowException();\n+        if (isNewMarker) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "249b2240c7fbc67f4936a711b250024203e602e6"}, "originalPosition": 158}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzA2NDc3Mw==", "bodyText": "Simplified...", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/532#discussion_r537064773", "createdAt": "2020-12-06T15:45:47Z", "author": {"login": "rgmf"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/MarkerEditViewModel.java", "diffHunk": "@@ -0,0 +1,173 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.net.Uri;\n+import android.os.ParcelFileDescriptor;\n+import android.util.Log;\n+import android.widget.Toast;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.io.File;\n+import java.io.FileDescriptor;\n+import java.util.NoSuchElementException;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.content.data.Marker;\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.services.TrackRecordingServiceConnection;\n+import de.dennisguse.opentracks.util.FileUtils;\n+\n+public class MarkerEditViewModel extends AndroidViewModel {\n+\n+    private static final String TAG = MarkerEditViewModel.class.getSimpleName();\n+\n+    private MutableLiveData<Marker> markerData;\n+    private boolean isNewMarker;\n+    private Uri photoOriginalUri;\n+    private final TrackRecordingServiceConnection trackRecordingServiceConnection = new TrackRecordingServiceConnection();\n+\n+    public MarkerEditViewModel(@NonNull Application application) {\n+        super(application);\n+    }\n+\n+    public LiveData<Marker> getMarkerData(@NonNull Track.Id trackId, @Nullable Marker.Id markerId) {\n+        if (markerData == null) {\n+            markerData = new MutableLiveData<>();\n+            trackRecordingServiceConnection.startConnection(getApplication());\n+            loadData(trackId, markerId);\n+        }\n+        return markerData;\n+    }\n+\n+    @Override\n+    protected void onCleared() {\n+        super.onCleared();\n+        trackRecordingServiceConnection.unbind(getApplication());\n+    }\n+\n+    private void loadData(Track.Id trackId, Marker.Id markerId) {\n+        Marker marker;\n+        isNewMarker = markerId == null;\n+        if (isNewMarker) {\n+            int nextMarkerNumber = trackId == null ? -1 : new ContentProviderUtils(getApplication()).getNextMarkerNumber(trackId);\n+            if (nextMarkerNumber == -1) {\n+                nextMarkerNumber = 0;\n+            }\n+            marker = new Marker(trackId);\n+            marker.setId(markerId);\n+            marker.setName(getApplication().getString(R.string.marker_name_format, nextMarkerNumber));\n+        } else {\n+            marker = new ContentProviderUtils(getApplication()).getMarker(markerId);\n+            if (marker.hasPhoto()) {\n+                photoOriginalUri = marker.getPhotoURI();\n+            }\n+        }\n+        markerData.postValue(marker);\n+    }\n+\n+    private Marker getMarkerOrThrowException() {\n+        Marker marker = markerData != null ? markerData.getValue() : null;\n+        if (marker == null) {\n+            Log.d(TAG, \"Marker data shouldn't be null. Call getMarkerData before.\");\n+            throw new NoSuchElementException(\"Marker data shouldn't be null. Call getMarkerData before.\");\n+        }\n+\n+        return marker;\n+    }\n+\n+    private void deletePhoto(Uri photoUri) {\n+        File photoFile = FileUtils.getPhotoFileIfExists(getApplication(), markerData.getValue().getTrackId(), photoUri);\n+        FileUtils.deleteDirectoryRecurse(photoFile);\n+    }\n+\n+    public void onPhotoDelete(String name, String category, String description) {\n+        Marker marker =  getMarkerOrThrowException();\n+        if (marker.hasPhoto()) {\n+            if (!marker.getPhotoURI().equals(photoOriginalUri)) {\n+                deletePhoto(marker.getPhotoURI());\n+            }\n+            marker.setPhotoUrl(null);\n+            marker.setName(name);\n+            marker.setCategory(category);\n+            marker.setDescription(description);\n+            markerData.postValue(marker);\n+        }\n+    }\n+\n+    public void onNewCameraPhoto(@NonNull Uri photoUri, String name, String category, String description) {\n+        Marker marker =  getMarkerOrThrowException();\n+        marker.setPhotoUrl(photoUri.toString());\n+        marker.setName(name);\n+        marker.setCategory(category);\n+        marker.setDescription(description);\n+        markerData.postValue(marker);\n+    }\n+\n+    public void onNewGalleryPhoto(@NonNull Uri srcUri, String name, String category, String description) {\n+        Marker marker =  getMarkerOrThrowException();\n+\n+        try (ParcelFileDescriptor parcelFd = getApplication().getContentResolver().openFileDescriptor(srcUri, \"r\")) {\n+            FileDescriptor srcFd = parcelFd.getFileDescriptor();\n+            File dstFile = new File(FileUtils.getImageUrl(getApplication(), marker.getTrackId()));\n+            FileUtils.copy(srcFd, dstFile);\n+\n+            Uri photoUri = FileUtils.getUriForFile(getApplication(), dstFile);\n+            marker.setPhotoUrl(photoUri.toString());\n+            marker.setName(name);\n+            marker.setCategory(category);\n+            marker.setDescription(description);\n+            markerData.postValue(marker);\n+        } catch(Exception e) {\n+            Log.e(TAG, e.getMessage());\n+            Toast.makeText(getApplication(), R.string.marker_add_canceled, Toast.LENGTH_LONG).show();\n+        }\n+    }\n+\n+    private void onAddDone(@NonNull Marker marker, String name, String category, String description) {\n+        trackRecordingServiceConnection.addMarker(getApplication(), name, category, description, marker.hasPhoto() ? marker.getPhotoURI().toString() : null);\n+    }\n+\n+    private void onSaveDone(@NonNull Marker marker, String name, String category, String description) {\n+        marker.setName(name);\n+        marker.setCategory(category);\n+        marker.setDescription(description);\n+        new ContentProviderUtils(getApplication()).updateMarker(getApplication(), marker);\n+\n+        if (photoOriginalUri != null && (!marker.hasPhoto() || !photoOriginalUri.equals(marker.getPhotoURI()))) {\n+            deletePhoto(photoOriginalUri);\n+        }\n+    }\n+\n+    public void onDone(String name, String category, String description) {\n+        Marker marker = getMarkerOrThrowException();\n+        if (isNewMarker) {\n+            onAddDone(marker, name, category, description);\n+        } else {\n+            onSaveDone(marker, name, category, description);\n+        }\n+    }\n+\n+    public void onCancel() {\n+        Marker marker =  getMarkerOrThrowException();\n+        if (isNewMarker) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNjkwMDgyNw=="}, "originalCommit": {"oid": "249b2240c7fbc67f4936a711b250024203e602e6"}, "originalPosition": 158}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1913, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}