{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5NDg0OTM0", "number": 472, "title": "Import all activity with summary", "bodyText": "Describe the pull request\nImport all activity with summary.\nI catch errors from exceptions so the activity know the error (parser error, already exists error, etc) and user can see what happened if some file didn't was imported (see screenshots).\nIt's similar to ExportActivity and its funcionality is the same including the back button functionality for cancel process.\nI've created a IoUtils file for common utilities (they are used by Export and Import).\nThis is a draft PR because it needs to be tested and I'd like to review the code and see if some part can be optimized but I publish it so you have the oportunity of testing it too - if you want and can :D\nSo, it's not ready yet but if you have some comment then the feedback is welcome.\nSome screenshots:\n\n\n\nLink to the the issue\n#471\nLicense agreement\nBy opening this pull request, you are providing your contribution under the Apache License 2.0 (see LICENSE.md).", "createdAt": "2020-10-24T19:47:03Z", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/472", "merged": true, "mergeCommit": {"oid": "9541a926578ce5b6dc38fba2226300bd19a4d986"}, "closed": true, "closedAt": "2020-10-31T19:39:38Z", "author": {"login": "rgmf"}, "timelineItems": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdVwpRVABqjM5MTcxNDg0NjA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdYAddsABqjM5NDQ0MjkxMDI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b58e338c3aa2ad6cff8468458f99593dd0c4883d", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/b58e338c3aa2ad6cff8468458f99593dd0c4883d", "committedDate": "2020-10-24T19:32:54Z", "message": "Import activity: handle screen rotation and twice click on back button for cancel importing process."}, "afterCommit": {"oid": "8b0bf53f0b8fdddeafa0bc90785d53f126c5ef9a", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/8b0bf53f0b8fdddeafa0bc90785d53f126c5ef9a", "committedDate": "2020-10-24T19:48:12Z", "message": "Import activity: handle screen rotation and twice click on back button for cancel importing process."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8b0bf53f0b8fdddeafa0bc90785d53f126c5ef9a", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/8b0bf53f0b8fdddeafa0bc90785d53f126c5ef9a", "committedDate": "2020-10-24T19:48:12Z", "message": "Import activity: handle screen rotation and twice click on back button for cancel importing process."}, "afterCommit": {"oid": "da86f05d53a7772a880b0d4878397bf08ae1678c", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/da86f05d53a7772a880b0d4878397bf08ae1678c", "committedDate": "2020-10-24T19:59:02Z", "message": "Import activity: handle screen rotation and twice click on back button for cancel importing process."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2MzMzNzQ4", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/472#pullrequestreview-516333748", "createdAt": "2020-10-25T08:06:37Z", "commit": {"oid": "da86f05d53a7772a880b0d4878397bf08ae1678c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwODowNjozN1rOHn3TXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQwODowNjozN1rOHn3TXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTU2MjU5MA==", "bodyText": "Offtopic: have I already expressed my dislike of Javas checked Exceptions?\nThis long list could be omitted by wrapping it in a RuntimeException at line 144, but it is a matter of taste.", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/472#discussion_r511562590", "createdAt": "2020-10-25T08:06:37Z", "author": {"login": "pstorch"}, "path": "src/main/java/de/dennisguse/opentracks/io/file/importer/AbstractFileTrackImporter.java", "diffHunk": "@@ -126,7 +127,7 @@ public void characters(char[] ch, int start, int length) {\n     }\n \n     @Override\n-    public Track.Id importFile(InputStream inputStream) {\n+    public Track.Id importFile(InputStream inputStream)  throws SAXException, SQLiteConstraintException, IOException, ParserConfigurationException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "da86f05d53a7772a880b0d4878397bf08ae1678c"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2Mzc0MDU0", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/472#pullrequestreview-516374054", "createdAt": "2020-10-25T16:11:30Z", "commit": {"oid": "0c9a748d7803f5bd46f7b990e7485c462f2508ad"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQxNjoxMTozMFrOHn6mgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQxNjoxMTozMFrOHn6mgg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTYxNjY0Mg==", "bodyText": "Put the whole Exception into the constructor not only the message. Then later you can call getCause() to get the original exception including Stack trace", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/472#discussion_r511616642", "createdAt": "2020-10-25T16:11:30Z", "author": {"login": "pstorch"}, "path": "src/main/java/de/dennisguse/opentracks/io/file/importer/AbstractFileTrackImporter.java", "diffHunk": "@@ -127,21 +126,26 @@ public void characters(char[] ch, int start, int length) {\n     }\n \n     @Override\n-    public Track.Id importFile(InputStream inputStream)  throws SAXException, SQLiteConstraintException, IOException, ParserConfigurationException {\n+    public Track.Id importFile(InputStream inputStream) throws ImportParserException, ImportAlreadyExistsException {\n         try {\n             SAXParser saxParser = SAXParserFactory.newInstance().newSAXParser();\n             long start = System.currentTimeMillis();\n \n             saxParser.parse(inputStream, this);\n             Log.d(TAG, \"Total import time: \" + (System.currentTimeMillis() - start) + \"ms\");\n             if (trackIds.size() != 1) {\n-                throw new MultiTracksImportException();\n+                // TODO Multi track is not supported yet.\n+                throw new ImportParserException(\"Multi track not supported\");\n             }\n             return trackIds.get(0);\n-        } catch (MultiTracksImportException | IOException | SAXException | ParserConfigurationException | SQLiteConstraintException e) {\n+        } catch (IOException | SAXException | ParserConfigurationException e) {\n             Log.e(TAG, \"Unable to import file\", e);\n             cleanImport();\n-            throw e;\n+            throw new ImportParserException(e.getMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c9a748d7803f5bd46f7b990e7485c462f2508ad"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE2Mzc0Njg4", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/472#pullrequestreview-516374688", "createdAt": "2020-10-25T16:18:38Z", "commit": {"oid": "0c9a748d7803f5bd46f7b990e7485c462f2508ad"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQxNjoxODozOFrOHn6pxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNVQxNjoxODozOFrOHn6pxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTYxNzQ3Ng==", "bodyText": "Throws declaration of the two new Exceptions is not necessary, because they are unchecked Exceptions.", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/472#discussion_r511617476", "createdAt": "2020-10-25T16:18:38Z", "author": {"login": "pstorch"}, "path": "src/main/java/de/dennisguse/opentracks/io/file/importer/KmzTrackImporter.java", "diffHunk": "@@ -71,7 +66,7 @@ public KmzTrackImporter(Context context, Uri uriFile) {\n     }\n \n     @Override\n-    public Track.Id importFile(InputStream inputStream) throws SAXException, SQLiteConstraintException, IOException, ParserConfigurationException {\n+    public Track.Id importFile(InputStream inputStream) throws ImportParserException, ImportAlreadyExistsException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0c9a748d7803f5bd46f7b990e7485c462f2508ad"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MDQ3NzEw", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/472#pullrequestreview-517047710", "createdAt": "2020-10-26T18:07:19Z", "commit": {"oid": "fdd0d45fae1a19409dc7cc74d59a037de3a0cc0c"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODowNzoxOVrOHocL8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQxODoxNzo1NFrOHockoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2Njg5Nw==", "bodyText": "is it sufficient to pass parameters via the constructor?\nIf the activity will be restored all fragments should be created from a bundle.\nLike this:\n\n    public static void showDialog(FragmentManager fragmentManager, Uri documentFileUri, boolean isDirectory) {\n        Bundle bundle = new Bundle();\n        bundle.putParcelable(EXTRA_DATA_URI_KEY, documentFileUri);\n        bundle.putBoolean(EXTRA_IS_TREE_KEY, isDirectory);\n\n        ImportProgressDialogFragment dialogFragment = new ImportProgressDialogFragment();\n        dialogFragment.setArguments(bundle);\n        dialogFragment.setRetainInstance(true);\n        dialogFragment.show(fragmentManager, IMPORT_DIALOG_TAG);\n    }", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/472#discussion_r512166897", "createdAt": "2020-10-26T18:07:19Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/io/file/ErrorListDialog.java", "diffHunk": "@@ -0,0 +1,35 @@\n+package de.dennisguse.opentracks.io.file;\n+\n+import android.app.AlertDialog;\n+import android.app.Dialog;\n+import android.os.Bundle;\n+\n+import androidx.fragment.app.DialogFragment;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.R;\n+\n+public class ErrorListDialog extends DialogFragment {\n+\n+    public static final String TAG = ErrorListDialog.class.getSimpleName();\n+\n+    private List<String> trackErrors;\n+    private String title;\n+\n+    public ErrorListDialog(String title, List<String> trackErrors) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdd0d45fae1a19409dc7cc74d59a037de3a0cc0c"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE2OTExOA==", "bodyText": "Initialize here.", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/472#discussion_r512169118", "createdAt": "2020-10-26T18:10:55Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/io/file/importer/ImportActivity.java", "diffHunk": "@@ -16,62 +16,255 @@\n \n package de.dennisguse.opentracks.io.file.importer;\n \n-import android.content.ClipData;\n+import android.net.Uri;\n import android.os.Bundle;\n+import android.os.Handler;\n+import android.view.View;\n+import android.widget.Button;\n+import android.widget.ImageView;\n+import android.widget.ProgressBar;\n+import android.widget.TextView;\n+import android.widget.Toast;\n \n import androidx.annotation.NonNull;\n+import androidx.appcompat.widget.Toolbar;\n+import androidx.documentfile.provider.DocumentFile;\n import androidx.fragment.app.FragmentActivity;\n \n-import de.dennisguse.opentracks.fragments.ImportFinishedDialogFragment;\n-import de.dennisguse.opentracks.fragments.ImportProgressDialogFragment;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.util.FileUtils;\n+import de.dennisguse.opentracks.util.IoUtils;\n+import de.dennisguse.opentracks.io.file.ErrorListDialog;\n \n /**\n  * An activity to import files from the external storage.\n  *\n  * @author Rodrigo Damazio\n  */\n-public class ImportActivity extends FragmentActivity implements ImportProgressDialogFragment.DismissCallback, ImportFinishedDialogFragment.DismissCallback {\n+public class ImportActivity extends FragmentActivity implements ImportServiceResultReceiver.Receiver {\n \n     private static final String TAG = ImportActivity.class.getSimpleName();\n \n     public static final String EXTRA_DIRECTORY_URI_KEY = \"directory_uri\";\n \n-    private static final String BUNDLE_ACTIVITY_RECREATED = \"activity_recreated\";\n+    private static final String BUNDLE_TOOLBAR_TITLE = \"toolbar_title\";\n+    private static final String BUNDLE_URI_LIST = \"uri_list\";\n+    private static final String BUNDLE_DOCUMENT_URI = \"document_uri\";\n+    private static final String BUNDLE_IS_DIRECTORY = \"is_directory\";\n+    private static final String BUNDLE_FILE_IMPORT_TOTAL_COUNT = \"file_import_total_count\";\n+    private static final String BUNDLE_FILE_IMPORT_SUCCESS_COUNT = \"file_import_success_count\";\n+    private static final String BUNDLE_FILE_IMPORT_ERROR_COUNT = \"file_import_error_count\";\n+    private static final String BUNDLE_FILE_ALREADY_EXISTS_COUNT = \"file_import_alreayd_exists_count\";\n+    private static final String BUNDLE_FILE_ERRORS = \"files_errors\";\n+\n+    private ImportServiceResultReceiver resultReceiver;\n+\n+    private int fileImportTotalCount;\n+    private int fileImportSuccessCount;\n+    private int fileAlreadyExistsCount;\n+    private int fileImportErrorCount;\n+\n+    private TextView viewTotal;\n+    private TextView viewDone;\n+    private TextView viewSummary;\n+    private ProgressBar viewProgressBar;\n+    private ImageView viewAlertIcon;\n+    private TextView viewAlertMsg;\n+    private Button viewLeftButton;\n+    private Button viewRightButton;\n+\n+    boolean doubleBackToCancel = false;\n+\n+    private Uri documentUri;\n+    private boolean isDirectory;\n+    private List<DocumentFile> fileList;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdd0d45fae1a19409dc7cc74d59a037de3a0cc0c"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE3MDM4OA==", "bodyText": "rename to count?", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/472#discussion_r512170388", "createdAt": "2020-10-26T18:13:10Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/io/file/importer/ImportActivity.java", "diffHunk": "@@ -16,62 +16,255 @@\n \n package de.dennisguse.opentracks.io.file.importer;\n \n-import android.content.ClipData;\n+import android.net.Uri;\n import android.os.Bundle;\n+import android.os.Handler;\n+import android.view.View;\n+import android.widget.Button;\n+import android.widget.ImageView;\n+import android.widget.ProgressBar;\n+import android.widget.TextView;\n+import android.widget.Toast;\n \n import androidx.annotation.NonNull;\n+import androidx.appcompat.widget.Toolbar;\n+import androidx.documentfile.provider.DocumentFile;\n import androidx.fragment.app.FragmentActivity;\n \n-import de.dennisguse.opentracks.fragments.ImportFinishedDialogFragment;\n-import de.dennisguse.opentracks.fragments.ImportProgressDialogFragment;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.util.FileUtils;\n+import de.dennisguse.opentracks.util.IoUtils;\n+import de.dennisguse.opentracks.io.file.ErrorListDialog;\n \n /**\n  * An activity to import files from the external storage.\n  *\n  * @author Rodrigo Damazio\n  */\n-public class ImportActivity extends FragmentActivity implements ImportProgressDialogFragment.DismissCallback, ImportFinishedDialogFragment.DismissCallback {\n+public class ImportActivity extends FragmentActivity implements ImportServiceResultReceiver.Receiver {\n \n     private static final String TAG = ImportActivity.class.getSimpleName();\n \n     public static final String EXTRA_DIRECTORY_URI_KEY = \"directory_uri\";\n \n-    private static final String BUNDLE_ACTIVITY_RECREATED = \"activity_recreated\";\n+    private static final String BUNDLE_TOOLBAR_TITLE = \"toolbar_title\";\n+    private static final String BUNDLE_URI_LIST = \"uri_list\";\n+    private static final String BUNDLE_DOCUMENT_URI = \"document_uri\";\n+    private static final String BUNDLE_IS_DIRECTORY = \"is_directory\";\n+    private static final String BUNDLE_FILE_IMPORT_TOTAL_COUNT = \"file_import_total_count\";\n+    private static final String BUNDLE_FILE_IMPORT_SUCCESS_COUNT = \"file_import_success_count\";\n+    private static final String BUNDLE_FILE_IMPORT_ERROR_COUNT = \"file_import_error_count\";\n+    private static final String BUNDLE_FILE_ALREADY_EXISTS_COUNT = \"file_import_alreayd_exists_count\";\n+    private static final String BUNDLE_FILE_ERRORS = \"files_errors\";\n+\n+    private ImportServiceResultReceiver resultReceiver;\n+\n+    private int fileImportTotalCount;\n+    private int fileImportSuccessCount;\n+    private int fileAlreadyExistsCount;\n+    private int fileImportErrorCount;\n+\n+    private TextView viewTotal;\n+    private TextView viewDone;\n+    private TextView viewSummary;\n+    private ProgressBar viewProgressBar;\n+    private ImageView viewAlertIcon;\n+    private TextView viewAlertMsg;\n+    private Button viewLeftButton;\n+    private Button viewRightButton;\n+\n+    boolean doubleBackToCancel = false;\n+\n+    private Uri documentUri;\n+    private boolean isDirectory;\n+    private List<DocumentFile> fileList;\n+    private String toolbarTitle;\n+\n+    private ArrayList<String> fileErrors = new ArrayList<>();\n \n     @Override\n     public void onCreate(Bundle savedInstanceState) {\n         super.onCreate(savedInstanceState);\n+        setContentView(R.layout.import_progress_activity);\n+\n+        Toolbar toolbar = findViewById(R.id.toolbar);\n+\n+        viewTotal = findViewById(R.id.import_progress_total);\n+        viewDone = findViewById(R.id.import_progress_done);\n+        viewSummary = findViewById(R.id.import_progress_summary);\n+        viewProgressBar = findViewById(R.id.import_progress_bar);\n+        viewAlertIcon = findViewById(R.id.import_progress_alert_icon);\n+        viewAlertMsg = findViewById(R.id.import_progress_alert_msg);\n+        viewLeftButton = findViewById(R.id.import_progress_left_button);\n+        viewRightButton = findViewById(R.id.import_progress_right_button);\n \n-        if (savedInstanceState == null || !savedInstanceState.getBoolean(BUNDLE_ACTIVITY_RECREATED, false)) {\n+        resultReceiver = new ImportServiceResultReceiver(new Handler());\n+        resultReceiver.setReceiver(this);\n+\n+        if (savedInstanceState == null) {\n             if (getIntent().getData() != null) {\n-                ImportProgressDialogFragment.showDialog(getSupportFragmentManager(), getIntent().getData(), false);\n+                documentUri = getIntent().getData();\n+                isDirectory = false;\n+                fileImportTotalCount = 1;\n             } else if (getIntent().getClipData() != null && getIntent().getClipData().getItemCount() > 0) {\n-                ImportProgressDialogFragment.showDialog(getSupportFragmentManager(), getIntent().getClipData().getItemAt(0).getUri(), false);\n+                documentUri = getIntent().getClipData().getItemAt(0).getUri();\n+                isDirectory = false;\n+                fileImportTotalCount = 1;\n             } else {\n                 // Started from DirectoryChooserActivity\n-                ImportProgressDialogFragment.showDialog(getSupportFragmentManager(), getIntent().getParcelableExtra(EXTRA_DIRECTORY_URI_KEY), true);\n+                documentUri = getIntent().getParcelableExtra(EXTRA_DIRECTORY_URI_KEY);\n+                isDirectory = true;\n+                fileImportTotalCount = IoUtils.getAllFiles(this, DocumentFile.fromTreeUri(this, documentUri).getUri()).size();\n+            }\n+\n+            final DocumentFile documentFile = isDirectory ? DocumentFile.fromTreeUri(this, documentUri) : DocumentFile.fromSingleUri(this, documentUri);\n+            toolbarTitle = getString(R.string.import_progress_message, documentFile.getName());\n+            fileList = FileUtils.getFiles(documentFile);\n+        } else {\n+            documentUri = savedInstanceState.getParcelable(BUNDLE_DOCUMENT_URI);\n+            toolbarTitle = savedInstanceState.getString(BUNDLE_TOOLBAR_TITLE);\n+            isDirectory = savedInstanceState.getBoolean(BUNDLE_IS_DIRECTORY);\n+            fileImportTotalCount = savedInstanceState.getInt(BUNDLE_FILE_IMPORT_TOTAL_COUNT);\n+            fileImportSuccessCount = savedInstanceState.getInt(BUNDLE_FILE_IMPORT_SUCCESS_COUNT);\n+            fileImportErrorCount = savedInstanceState.getInt(BUNDLE_FILE_IMPORT_ERROR_COUNT);\n+            fileAlreadyExistsCount = savedInstanceState.getInt(BUNDLE_FILE_ALREADY_EXISTS_COUNT);\n+            fileErrors = savedInstanceState.getStringArrayList(BUNDLE_FILE_ERRORS);\n+            ArrayList<String> urisString = savedInstanceState.getStringArrayList(BUNDLE_URI_LIST);\n+            fileList = new ArrayList<>();\n+            for (String uriString : urisString) {\n+                fileList.add(DocumentFile.fromSingleUri(this, Uri.parse(uriString)));\n             }\n         }\n+\n+        toolbar.setTitle(toolbarTitle);\n+        setProgress();\n+        initImport();\n+    }\n+\n+    @Override\n+    protected void onDestroy() {\n+        super.onDestroy();\n+        fileList.clear();\n     }\n \n     @Override\n     protected void onSaveInstanceState(@NonNull Bundle outState) {\n         super.onSaveInstanceState(outState);\n-        outState.putBoolean(BUNDLE_ACTIVITY_RECREATED, true);\n+        outState.putParcelable(BUNDLE_DOCUMENT_URI, documentUri);\n+        outState.putBoolean(BUNDLE_IS_DIRECTORY, isDirectory);\n+        outState.putInt(BUNDLE_FILE_IMPORT_TOTAL_COUNT, fileImportTotalCount);\n+        outState.putInt(BUNDLE_FILE_IMPORT_SUCCESS_COUNT, fileImportSuccessCount);\n+        outState.putInt(BUNDLE_FILE_IMPORT_ERROR_COUNT, fileImportErrorCount);\n+        outState.putInt(BUNDLE_FILE_ALREADY_EXISTS_COUNT, fileAlreadyExistsCount);\n+        outState.putString(BUNDLE_TOOLBAR_TITLE, toolbarTitle);\n+        outState.putStringArrayList(BUNDLE_FILE_ERRORS, fileErrors);\n+        ArrayList<String> urisString = new ArrayList<>();\n+        for (DocumentFile df : fileList) {\n+            urisString.add(df.getUri().toString());\n+        }\n+        outState.putStringArrayList(BUNDLE_URI_LIST, urisString);\n     }\n \n     @Override\n-    public void onImportCanceled(String directoryDisplayName, int successCount, int fileCount) {\n-        onImportFinished(directoryDisplayName, successCount, fileCount);\n+    public void onBackPressed() {\n+        if (doubleBackToCancel || getTotalDone() == fileImportTotalCount) {\n+            super.onBackPressed();\n+            return;\n+        }\n+\n+        this.doubleBackToCancel = true;\n+        Toast.makeText(this, getString(R.string.generic_click_twice_cancel), Toast.LENGTH_SHORT).show();\n+\n+        new Handler().postDelayed(() -> doubleBackToCancel=false, 2000);\n     }\n \n     @Override\n-    public void onImportFinished(final String directoryDisplayName, final int successCount, final int fileCount) {\n-        runOnUiThread(() -> ImportFinishedDialogFragment.showDialog(getSupportFragmentManager(), directoryDisplayName, successCount, fileCount));\n+    public void onReceiveResult(int resultCode, Bundle resultData) {\n+        if (resultData == null) {\n+            throw new RuntimeException(TAG + \": onReceiveResult resultData NULL\");\n+        }\n+\n+        String fileName = resultData.getString(ImportServiceResultReceiver.RESULT_EXTRA_FILENAME);\n+        String message = resultData.getString(ImportServiceResultReceiver.RESULT_EXTRA_MESSAGE);\n+\n+        switch (resultCode) {\n+            case ImportServiceResultReceiver.RESULT_CODE_ERROR:\n+                fileImportErrorCount++;\n+                fileErrors.add(getString(R.string.import_error_info, fileName, message));\n+                break;\n+            case ImportServiceResultReceiver.RESULT_CODE_IMPORTED:\n+                fileImportSuccessCount++;\n+                break;\n+            case ImportServiceResultReceiver.RESULT_CODE_ALREADY_EXISTS:\n+                fileAlreadyExistsCount++;\n+                break;\n+            default:\n+                throw new RuntimeException(TAG + \": import service result code invalid: \" + resultCode);\n+        }\n+\n+        onImportCompleted();\n     }\n \n-    @Override\n-    public void onDismissed() {\n-        finish();\n+    private void initImport() {\n+        if (getTotalDone() == fileImportTotalCount) {\n+            onImportCompleted();\n+        } else {\n+            importNextFile();\n+        }\n+    }\n+\n+    private void importNextFile() {\n+        int i = getTotalDone();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdd0d45fae1a19409dc7cc74d59a037de3a0cc0c"}, "originalPosition": 222}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE3MTI4OQ==", "bodyText": "Can we change to pass a DocumentFile instead of Uri?", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/472#discussion_r512171289", "createdAt": "2020-10-26T18:14:41Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/io/file/importer/ImportService.java", "diffHunk": "@@ -0,0 +1,90 @@\n+package de.dennisguse.opentracks.io.file.importer;\n+\n+import android.app.job.JobService;\n+import android.content.Context;\n+import android.content.Intent;\n+import android.net.Uri;\n+import android.os.Bundle;\n+import android.os.ResultReceiver;\n+import android.util.Log;\n+\n+import androidx.annotation.NonNull;\n+import androidx.core.app.JobIntentService;\n+import androidx.documentfile.provider.DocumentFile;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.io.file.TrackFileFormat;\n+import de.dennisguse.opentracks.util.FileUtils;\n+\n+public class ImportService extends JobIntentService {\n+\n+    private static final String TAG = ImportService.class.getSimpleName();\n+\n+    private static final int JOB_ID = 2;\n+\n+    private static final String EXTRA_RECEIVER = \"extra_receiver\";\n+    private static final String EXTRA_URI = \"extra_uri\";\n+\n+    private ResultReceiver resultReceiver;\n+\n+    public static void enqueue(Context context, ImportServiceResultReceiver receiver, Uri uri) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdd0d45fae1a19409dc7cc74d59a037de3a0cc0c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE3MjEyMw==", "bodyText": "Why not pass in the constructor?\nIt should never be null right?", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/472#discussion_r512172123", "createdAt": "2020-10-26T18:16:04Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/io/file/importer/ImportServiceResultReceiver.java", "diffHunk": "@@ -0,0 +1,41 @@\n+package de.dennisguse.opentracks.io.file.importer;\n+\n+import android.os.Bundle;\n+import android.os.Handler;\n+import android.os.ResultReceiver;\n+\n+/**\n+ * Create a new ResultReceive to receive results.\n+ * Your {@link #onReceiveResult} method will be called from the thread running <var>handler</var> if given, or from an arbitrary thread if null.\n+ */\n+public class ImportServiceResultReceiver extends ResultReceiver {\n+\n+    public static final int RESULT_CODE_ERROR = 0;\n+    public static final int RESULT_CODE_IMPORTED = 1;\n+    public static final int RESULT_CODE_ALREADY_EXISTS = 2;\n+\n+    public static final String RESULT_EXTRA_TRACK_ID = \"result_track_id\";\n+    public static final String RESULT_EXTRA_FILENAME = \"result_extra_filename\";\n+    public static final String RESULT_EXTRA_MESSAGE = \"result_extra_message\";\n+\n+    private Receiver receiver;\n+\n+    public ImportServiceResultReceiver(Handler handler) {\n+        super(handler);\n+    }\n+\n+    @Override\n+    protected void onReceiveResult(int resultCode, Bundle resultData) {\n+        if (receiver != null) {\n+            receiver.onReceiveResult(resultCode, resultData);\n+        }\n+    }\n+\n+    public void setReceiver(Receiver receiver) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdd0d45fae1a19409dc7cc74d59a037de3a0cc0c"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjE3MzIxNw==", "bodyText": "IntelliJ's code analyze complains about this change.\nThe \u2026 is actually the correct thing for \"...\"", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/472#discussion_r512173217", "createdAt": "2020-10-26T18:17:54Z", "author": {"login": "dennisguse"}, "path": "src/main/res/values/strings.xml", "diffHunk": "@@ -285,14 +285,26 @@ limitations under the License.\n     <string name=\"image_stop\">Stop</string>\n     <string name=\"image_track\">Track</string>\n     <!-- Import -->\n+    <string name=\"import_unsupported_format\">Unsupported file format</string>\n+    <string name=\"import_parser_error\">Parser error: %1$s</string>\n+    <string name=\"import_unable_to_import_file\">Unable to import file: %1$s</string>\n+    <string name=\"import_error_info\">%1$s: %2$s</string>\n+    <string name=\"import_error_list_dialog_title\">Files not imported</string>\n+    <string name=\"import_file_imported\">File %1$s imported</string>\n     <string name=\"import_error\">Imported %1$d of %2$s from %3$s</string>\n     <string name=\"import_no_directory\">%1$s does not exist</string>\n     <string name=\"import_no_file\">There were no files to import. Connect your device to your computer and place the files to import in %1$s.</string>\n     <string name=\"import_no_file_title\">Import files</string>\n-    <string name=\"import_progress_message\">Importing from %1$s&#8230;</string>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fdd0d45fae1a19409dc7cc74d59a037de3a0cc0c"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f101f4ee12a780ed6dac1d3d29f4a104785a2c3c", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/f101f4ee12a780ed6dac1d3d29f4a104785a2c3c", "committedDate": "2020-10-31T19:22:34Z", "message": "Activity with progress and summary for import all option. Fixes #471.\nErrorListDialog shared by ExportActivity and ImportActivity."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4ced73c0aa23cb6cd909bc833a0fe5b6bc1295d", "author": {"user": {"login": "dennisguse", "name": "Dennis Guse"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/d4ced73c0aa23cb6cd909bc833a0fe5b6bc1295d", "committedDate": "2020-10-31T19:22:34Z", "message": "Small cleanups and improvements code."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "36596b4753b6c274a7c4b890cb0a9dd0d220f322", "author": {"user": {"login": "dennisguse", "name": "Dennis Guse"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/36596b4753b6c274a7c4b890cb0a9dd0d220f322", "committedDate": "2020-10-31T18:34:49Z", "message": "Small cleanups; please squash."}, "afterCommit": {"oid": "d4ced73c0aa23cb6cd909bc833a0fe5b6bc1295d", "author": {"user": {"login": "dennisguse", "name": "Dennis Guse"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/d4ced73c0aa23cb6cd909bc833a0fe5b6bc1295d", "committedDate": "2020-10-31T19:22:34Z", "message": "Small cleanups and improvements code."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2277, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}