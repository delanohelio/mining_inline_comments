{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2NjM4NjYz", "number": 368, "title": "Interval stats: distance, speed and pace by selected interval.", "bodyText": "Describe the pull request\nAdded intervals to StatisticsRecordedFragment so user can analize his/her partials or intervals. User can select through spinner the length of the interval: 1km (or mi), 2km (or mi), 3km (or mi), 4km (or mi), 5km (or mi) and 10km (or mi).\nAlso, StatisticsRecordedFragment does't use the hub to load the stats anymore. It wasn't needed and there were a lot of methods from interface that it didn't implement.\nFinally, StatisticsRecordedFragment save the track object instead of trackId because it called several times to database to load track.\n2020-08-12: At this moment I create a draft PR because I'd like to create tests to test IntervalStatistics class.\n\nLink to the the issue\n#134\n#87\n#87 (comment)\nLicense agreement\nBy opening this pull request, you are providing your contribution under the Apache License 2.0 (see LICENSE.md).", "createdAt": "2020-08-12T09:20:03Z", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368", "merged": true, "mergeCommit": {"oid": "25ef0ecad1afd242e94d9943490584b39db737d9"}, "closed": true, "closedAt": "2020-09-02T05:52:34Z", "author": {"login": "rgmf"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc-IxQtABqjM2NDcwMjEyOTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdEut2pgBqjM3MTY5OTcxNTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "925fbb9061bee649d773fea11a4a6aec2599186e", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/925fbb9061bee649d773fea11a4a6aec2599186e", "committedDate": "2020-08-12T09:07:34Z", "message": "Interval statistics: show accumulate in distance column."}, "afterCommit": {"oid": "6e2ca343396a1fedc735075ff669d3bfed6768dc", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/6e2ca343396a1fedc735075ff669d3bfed6768dc", "committedDate": "2020-08-12T10:23:56Z", "message": "Interval statistics: show accumulate in distance column."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MTMxNTcy", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#pullrequestreview-466131572", "createdAt": "2020-08-12T17:35:59Z", "commit": {"oid": "60057263a4a6014f2c48e982dd04b3d97d2238c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzozNTo1OVrOG_rm4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzozNTo1OVrOG_rm4g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQyNzkzOA==", "bodyText": "Constructor can be removed; just initialize it in line 11.", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r469427938", "createdAt": "2020-08-12T17:35:59Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public IntervalStatistics() {\n+        intervalList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60057263a4a6014f2c48e982dd04b3d97d2238c9"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MTMxNzk3", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#pullrequestreview-466131797", "createdAt": "2020-08-12T17:36:19Z", "commit": {"oid": "60057263a4a6014f2c48e982dd04b3d97d2238c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzozNjoxOVrOG_rnoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzozNjoxOVrOG_rnoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQyODEyOQ==", "bodyText": "make private", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r469428129", "createdAt": "2020-08-12T17:36:19Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public IntervalStatistics() {\n+        intervalList = new ArrayList<>();\n+    }\n+\n+    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n+        intervalList = new ArrayList<>();\n+\n+        if (trackPointList == null || trackPointList.size() == 0) {\n+            return;\n+        }\n+\n+        Interval interval = new Interval();\n+        for (int i = 1; i < trackPointList.size(); i++) {\n+            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n+            TrackPoint trackPoint = trackPointList.get(i);\n+\n+            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n+                interval.distance += prevTrackPoint.distanceTo(trackPoint);\n+                interval.time += trackPoint.getTime() - prevTrackPoint.getTime();\n+\n+                if (interval.distance >= distanceInterval) {\n+                    float adjustFactor = distanceInterval / interval.distance;\n+                    Interval adjustedInterval = new Interval(interval);\n+                    adjustedInterval.distance *= adjustFactor;\n+                    adjustedInterval.time *= adjustFactor;\n+\n+                    intervalList.add(adjustedInterval);\n+\n+                    Interval newInterval = new Interval();\n+                    newInterval.distance = interval.distance - adjustedInterval.distance;\n+                    newInterval.time = interval.time - adjustedInterval.time;\n+\n+                    interval = newInterval;\n+                }\n+            }\n+        }\n+\n+        if (interval.distance > 1f) {\n+            intervalList.add(interval);\n+        }\n+    }\n+\n+    public List<Interval> getIntervalList() {\n+        return intervalList;\n+    }\n+\n+    public static class Interval {\n+        float distance = 0f;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60057263a4a6014f2c48e982dd04b3d97d2238c9"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MTMxOTg1", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#pullrequestreview-466131985", "createdAt": "2020-08-12T17:36:33Z", "commit": {"oid": "60057263a4a6014f2c48e982dd04b3d97d2238c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzozNjozM1rOG_roNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzozNjozM1rOG_roNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQyODI3Nw==", "bodyText": "make private", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r469428277", "createdAt": "2020-08-12T17:36:33Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "diffHunk": "@@ -0,0 +1,84 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public IntervalStatistics() {\n+        intervalList = new ArrayList<>();\n+    }\n+\n+    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n+        intervalList = new ArrayList<>();\n+\n+        if (trackPointList == null || trackPointList.size() == 0) {\n+            return;\n+        }\n+\n+        Interval interval = new Interval();\n+        for (int i = 1; i < trackPointList.size(); i++) {\n+            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n+            TrackPoint trackPoint = trackPointList.get(i);\n+\n+            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n+                interval.distance += prevTrackPoint.distanceTo(trackPoint);\n+                interval.time += trackPoint.getTime() - prevTrackPoint.getTime();\n+\n+                if (interval.distance >= distanceInterval) {\n+                    float adjustFactor = distanceInterval / interval.distance;\n+                    Interval adjustedInterval = new Interval(interval);\n+                    adjustedInterval.distance *= adjustFactor;\n+                    adjustedInterval.time *= adjustFactor;\n+\n+                    intervalList.add(adjustedInterval);\n+\n+                    Interval newInterval = new Interval();\n+                    newInterval.distance = interval.distance - adjustedInterval.distance;\n+                    newInterval.time = interval.time - adjustedInterval.time;\n+\n+                    interval = newInterval;\n+                }\n+            }\n+        }\n+\n+        if (interval.distance > 1f) {\n+            intervalList.add(interval);\n+        }\n+    }\n+\n+    public List<Interval> getIntervalList() {\n+        return intervalList;\n+    }\n+\n+    public static class Interval {\n+        float distance = 0f;\n+        float time = 0f;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60057263a4a6014f2c48e982dd04b3d97d2238c9"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY2MTMyODEw", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#pullrequestreview-466132810", "createdAt": "2020-08-12T17:37:42Z", "commit": {"oid": "60057263a4a6014f2c48e982dd04b3d97d2238c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzozNzo0M1rOG_rqyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNzozNzo0M1rOG_rqyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTQyODkzNg==", "bodyText": "i guess this will be either 1mile / 1km, right?\nSo, we are independent of the actual unit", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r469428936", "createdAt": "2020-08-12T17:37:43Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java", "diffHunk": "@@ -0,0 +1,103 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatisticsModel extends AndroidViewModel {\n+\n+    private MutableLiveData<IntervalStatistics> intervalStats;\n+    private IntervalOption interval;\n+\n+    public IntervalStatisticsModel(@NonNull Application application) {\n+        super(application);\n+        interval = IntervalOption.OPTION_1;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(long trackId, IntervalOption interval) {\n+        if (intervalStats == null || this.interval != interval) {\n+            intervalStats = new MutableLiveData<>();\n+            this.interval = interval;\n+            loadIntervalStats(trackId);\n+        }\n+        return intervalStats;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(long trackId) {\n+        return getIntervalStats(trackId, interval);\n+    }\n+\n+    public void invalidate() {\n+        intervalStats = null;\n+    }\n+\n+    private void loadIntervalStats(long trackId) {\n+        new Thread(() -> {\n+            Context context = getApplication().getApplicationContext();\n+            ContentProviderUtils contentProviderUtils = new ContentProviderUtils(context);\n+            List<TrackPoint> trackPointList = contentProviderUtils.getTrackPoints(trackId);\n+\n+            IntervalStatistics intervalStatistics = new IntervalStatistics();\n+            float distanceInterval = PreferencesUtils.isMetricUnits(context) ? (float) (interval.getValue() * UnitConversions.KM_TO_M) : (float) (interval.getValue() * UnitConversions.MI_TO_M);\n+            intervalStatistics.build(trackPointList, distanceInterval);\n+\n+            intervalStats.postValue(intervalStatistics);\n+        }).start();\n+    }\n+\n+    public enum IntervalOption {\n+        OPTION_1(1),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "60057263a4a6014f2c48e982dd04b3d97d2238c9"}, "originalPosition": 60}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f7da8bdfdbae28c441a2eb6bf521c3f247cb23a2", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/f7da8bdfdbae28c441a2eb6bf521c3f247cb23a2", "committedDate": "2020-08-12T18:00:53Z", "message": "Interval stats: improve code."}, "afterCommit": {"oid": "ab5d038fc1cb7abad6de30370dedade2beb6eebb", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/ab5d038fc1cb7abad6de30370dedade2beb6eebb", "committedDate": "2020-08-17T17:25:38Z", "message": "Interval stats: added a new tab in TrackRecordingActivity that shows the intervals on live."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ab5d038fc1cb7abad6de30370dedade2beb6eebb", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/ab5d038fc1cb7abad6de30370dedade2beb6eebb", "committedDate": "2020-08-17T17:25:38Z", "message": "Interval stats: added a new tab in TrackRecordingActivity that shows the intervals on live."}, "afterCommit": {"oid": "cde34ea8a94434ae1393d18c93c485fd7ef75221", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/cde34ea8a94434ae1393d18c93c485fd7ef75221", "committedDate": "2020-08-19T13:10:17Z", "message": "Interval stats: added IntervalStatisticsTest."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cde34ea8a94434ae1393d18c93c485fd7ef75221", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/cde34ea8a94434ae1393d18c93c485fd7ef75221", "committedDate": "2020-08-19T13:10:17Z", "message": "Interval stats: added IntervalStatisticsTest."}, "afterCommit": {"oid": "2af8ea9c91e58bb8d916ba5a10f4669234cc94a2", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/2af8ea9c91e58bb8d916ba5a10f4669234cc94a2", "committedDate": "2020-08-19T13:12:46Z", "message": "Interval stats: added IntervalStatisticsTest."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2af8ea9c91e58bb8d916ba5a10f4669234cc94a2", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/2af8ea9c91e58bb8d916ba5a10f4669234cc94a2", "committedDate": "2020-08-19T13:12:46Z", "message": "Interval stats: added IntervalStatisticsTest."}, "afterCommit": {"oid": "c38c7cf5640f591cfe6e439a181682372bf4f111", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/c38c7cf5640f591cfe6e439a181682372bf4f111", "committedDate": "2020-08-21T09:15:05Z", "message": "Interval stats: while user is recording a track intervals are refreshed every 5 seconds.\nInterval stats: completed the list of split intervals: 1, 2, 3, 4, 5, 10, 20 or 50 km or mi.\nFixes #87."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c38c7cf5640f591cfe6e439a181682372bf4f111", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/c38c7cf5640f591cfe6e439a181682372bf4f111", "committedDate": "2020-08-21T09:15:05Z", "message": "Interval stats: while user is recording a track intervals are refreshed every 5 seconds.\nInterval stats: completed the list of split intervals: 1, 2, 3, 4, 5, 10, 20 or 50 km or mi.\nFixes #87."}, "afterCommit": {"oid": "a471f16fede8f3d0aaf33162b2d0f75f4eb166ac", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/a471f16fede8f3d0aaf33162b2d0f75f4eb166ac", "committedDate": "2020-08-23T16:00:19Z", "message": "Interval stats: while user is recording a track intervals are refreshed every 5 seconds.\nInterval stats: completed the list of split intervals: 1, 2, 3, 4, 5, 10, 20 or 50 km or mi.\nFixes #87."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f1bd5fd34ea0a17c1097170ea998cd3e2c9f5871", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/f1bd5fd34ea0a17c1097170ea998cd3e2c9f5871", "committedDate": "2020-08-23T16:22:39Z", "message": "Interval Stats: track's id it's not long anymore."}, "afterCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/7a865c3f0407b09f4be060eca1f487f4256243f3", "committedDate": "2020-08-23T16:28:02Z", "message": "Interval Stats: track's id it's not long anymore."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDczMDMwMjcz", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#pullrequestreview-473030273", "createdAt": "2020-08-23T17:50:42Z", "commit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxNzo1MDo0MlrOHFOwTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yM1QxODozMDozMVrOHFO_Gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NjY2OA==", "bodyText": "return Arrays.asList(pair.second);", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475246668", "createdAt": "2020-08-23T17:50:42Z", "author": {"login": "dennisguse"}, "path": "src/androidTest/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.util.Pair;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.junit.Assert;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TestDataUtil;\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.stats.TrackStatistics;\n+import de.dennisguse.opentracks.stats.TrackStatisticsUpdater;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+@RunWith(JUnit4.class)\n+public class IntervalStatisticsTest {\n+\n+    private static final String TAG = IntervalStatisticsTest.class.getSimpleName();\n+\n+    private List<TrackPoint> buildTrackPoints(int numberOfTrackPoints) {\n+\t\tPair<Track, TrackPoint[]> pair = TestDataUtil.createTrack(new Track.Id(System.currentTimeMillis()), numberOfTrackPoints);\n+\t\tList<TrackPoint> trackPoints = Arrays.asList(pair.second);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NjcyOQ==", "bodyText": "formatting", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475246729", "createdAt": "2020-08-23T17:51:14Z", "author": {"login": "dennisguse"}, "path": "src/androidTest/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsTest.java", "diffHunk": "@@ -0,0 +1,144 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.util.Pair;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.junit.Assert;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TestDataUtil;\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.stats.TrackStatistics;\n+import de.dennisguse.opentracks.stats.TrackStatisticsUpdater;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+@RunWith(JUnit4.class)\n+public class IntervalStatisticsTest {\n+\n+    private static final String TAG = IntervalStatisticsTest.class.getSimpleName();\n+\n+    private List<TrackPoint> buildTrackPoints(int numberOfTrackPoints) {\n+\t\tPair<Track, TrackPoint[]> pair = TestDataUtil.createTrack(new Track.Id(System.currentTimeMillis()), numberOfTrackPoints);\n+\t\tList<TrackPoint> trackPoints = Arrays.asList(pair.second);\n+\n+\t\treturn trackPoints;\n+\t}\n+\n+\tprivate TrackStatistics buildTrackStatistics(List<TrackPoint> trackPoints) {\n+\t\tTrackStatisticsUpdater trackStatisticsUpdater = new TrackStatisticsUpdater(trackPoints.get(0).getTime());\n+\t\tfor (TrackPoint tp : trackPoints) {\n+\t\t\ttrackStatisticsUpdater.addTrackPoint(tp, 0);\n+\t\t}\n+\t\treturn trackStatisticsUpdater.getTrackStatistics();\n+\t}\n+\n+\t/**\n+\t * Tests that build method compute the distance correctly comparing the result with TrackStatisticsUpdater result.\n+\t */\n+\t@Test\n+    public void testBuild_1() {\n+\t\t// With 50 points and interval distance of 1000m.\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0Njk0Ng==", "bodyText": "Why not use a newInstance-method (like the other fragements?)", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475246946", "createdAt": "2020-08-23T17:53:43Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/TrackRecordingActivity.java", "diffHunk": "@@ -382,8 +383,10 @@ public Fragment getItem(int position) {\n                 case 0:\n                     return new StatisticsRecordingFragment();\n                 case 1:\n-                    return ChartFragment.newInstance(false);\n+                    return new IntervalsRecordingFragment();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NzA2OA==", "bodyText": "Does it handle changes of metricUnits via settings?", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475247068", "createdAt": "2020-08-23T17:54:46Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package de.dennisguse.opentracks.adapters;\n+\n+import android.content.Context;\n+import android.util.Pair;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.ArrayAdapter;\n+import android.widget.TextView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.StringUtils;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+\n+public class IntervalStatisticsAdapter extends ArrayAdapter<IntervalStatistics.Interval> {\n+\n+    private boolean metricUnits;\n+    private float accDistance = 0f;\n+\n+    public IntervalStatisticsAdapter(Context context, List<IntervalStatistics.Interval> intervalList) {\n+        super(context, R.layout.interval_stats_list_item, intervalList);\n+        metricUnits = PreferencesUtils.isMetricUnits(context);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NzE4MQ==", "bodyText": "sumDistance?\nAnd adding units to the name would be great aka sumDistance_m", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475247181", "createdAt": "2020-08-23T17:55:36Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package de.dennisguse.opentracks.adapters;\n+\n+import android.content.Context;\n+import android.util.Pair;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.ArrayAdapter;\n+import android.widget.TextView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.StringUtils;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+\n+public class IntervalStatisticsAdapter extends ArrayAdapter<IntervalStatistics.Interval> {\n+\n+    private boolean metricUnits;\n+    private float accDistance = 0f;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NzMxMg==", "bodyText": "why not show the units for pace as well?", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475247312", "createdAt": "2020-08-23T17:56:50Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/adapters/IntervalStatisticsAdapter.java", "diffHunk": "@@ -0,0 +1,65 @@\n+package de.dennisguse.opentracks.adapters;\n+\n+import android.content.Context;\n+import android.util.Pair;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.ArrayAdapter;\n+import android.widget.TextView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.StringUtils;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+\n+public class IntervalStatisticsAdapter extends ArrayAdapter<IntervalStatistics.Interval> {\n+\n+    private boolean metricUnits;\n+    private float accDistance = 0f;\n+\n+    public IntervalStatisticsAdapter(Context context, List<IntervalStatistics.Interval> intervalList) {\n+        super(context, R.layout.interval_stats_list_item, intervalList);\n+        metricUnits = PreferencesUtils.isMetricUnits(context);\n+    }\n+\n+    @NonNull\n+    @Override\n+    public View getView(int position, @Nullable View intervalView, @NonNull ViewGroup parent) {\n+        IntervalStatistics.Interval interval = getItem(position);\n+        ViewHolder viewHolder;\n+\n+        if (intervalView == null) {\n+            viewHolder = new ViewHolder();\n+\n+            intervalView = LayoutInflater.from(getContext()).inflate(R.layout.interval_stats_list_item, parent, false);\n+\n+            viewHolder.distance = intervalView.findViewById(R.id.interval_item_distance);\n+            viewHolder.speed = intervalView.findViewById(R.id.interval_item_speed);\n+            viewHolder.pace = intervalView.findViewById(R.id.interval_item_pace);\n+\n+            intervalView.setTag(viewHolder);\n+        } else {\n+            viewHolder = (ViewHolder) intervalView.getTag();\n+        }\n+\n+        accDistance += interval.getDistance();\n+        viewHolder.distance.setText(StringUtils.formatDistance(getContext(), accDistance, metricUnits));\n+        Pair<String, String> speedParts = StringUtils.getSpeedParts(getContext(), interval.getSpeed(), metricUnits, true);\n+        viewHolder.speed.setText(speedParts.first + \" \" + speedParts.second);\n+        viewHolder.pace.setText(StringUtils.getSpeedParts(getContext(), interval.getSpeed(), metricUnits, false).first);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NzU4NA==", "bodyText": "Can you add the comment here: why 5s?", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475247584", "createdAt": "2020-08-23T17:59:58Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package de.dennisguse.opentracks.fragments;\n+\n+import android.os.Bundle;\n+import android.os.Handler;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.LinearLayout;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.fragment.app.Fragment;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.ViewModelProvider;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatisticsModel;\n+import de.dennisguse.opentracks.views.IntervalListView;\n+import de.dennisguse.opentracks.views.IntervalReverseListView;\n+\n+/**\n+ * A fragment to display the intervals from recording track.\n+ */\n+public class IntervalsRecordingFragment extends Fragment implements IntervalListView.IntervalListListener {\n+\n+    private static final String TAG = IntervalsRecordingFragment.class.getSimpleName();\n+\n+    private static final long UI_UPDATE_INTERVAL = 5 * UnitConversions.ONE_SECOND_MS;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NzkwNA==", "bodyText": "Why not check isResume() of parent class?\nThen we don't need stop.\nSee StatisticsRecordingFragment:107.", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475247904", "createdAt": "2020-08-23T18:03:51Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package de.dennisguse.opentracks.fragments;\n+\n+import android.os.Bundle;\n+import android.os.Handler;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.LinearLayout;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.fragment.app.Fragment;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.ViewModelProvider;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatisticsModel;\n+import de.dennisguse.opentracks.views.IntervalListView;\n+import de.dennisguse.opentracks.views.IntervalReverseListView;\n+\n+/**\n+ * A fragment to display the intervals from recording track.\n+ */\n+public class IntervalsRecordingFragment extends Fragment implements IntervalListView.IntervalListListener {\n+\n+    private static final String TAG = IntervalsRecordingFragment.class.getSimpleName();\n+\n+    private static final long UI_UPDATE_INTERVAL = 5 * UnitConversions.ONE_SECOND_MS;\n+\n+    private IntervalStatisticsModel viewModel;\n+    private IntervalReverseListView intervalListView;\n+\n+    private class IntervalRunner implements Runnable {\n+        private boolean stopped = false;\n+\n+        @Override\n+        public void run() {\n+            if (!stopped) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0NzkzMw==", "bodyText": "||", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475247933", "createdAt": "2020-08-23T18:04:14Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/fragments/IntervalsRecordingFragment.java", "diffHunk": "@@ -0,0 +1,136 @@\n+package de.dennisguse.opentracks.fragments;\n+\n+import android.os.Bundle;\n+import android.os.Handler;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.LinearLayout;\n+\n+import androidx.annotation.NonNull;\n+import androidx.annotation.Nullable;\n+import androidx.fragment.app.Fragment;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.ViewModelProvider;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatisticsModel;\n+import de.dennisguse.opentracks.views.IntervalListView;\n+import de.dennisguse.opentracks.views.IntervalReverseListView;\n+\n+/**\n+ * A fragment to display the intervals from recording track.\n+ */\n+public class IntervalsRecordingFragment extends Fragment implements IntervalListView.IntervalListListener {\n+\n+    private static final String TAG = IntervalsRecordingFragment.class.getSimpleName();\n+\n+    private static final long UI_UPDATE_INTERVAL = 5 * UnitConversions.ONE_SECOND_MS;\n+\n+    private IntervalStatisticsModel viewModel;\n+    private IntervalReverseListView intervalListView;\n+\n+    private class IntervalRunner implements Runnable {\n+        private boolean stopped = false;\n+\n+        @Override\n+        public void run() {\n+            if (!stopped) {\n+                updateIntervals();\n+                intervalHandler.postDelayed(intervalRunner, UI_UPDATE_INTERVAL);\n+            }\n+        }\n+\n+        public void stop() {\n+            stopped = true;\n+        }\n+    }\n+\n+    private Handler intervalHandler = null;\n+    private IntervalRunner intervalRunner = null;\n+\n+    @Override\n+    public View onCreateView(@NonNull LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {\n+        return inflater.inflate(R.layout.intervals_recording, container, false);\n+    }\n+\n+    @Override\n+    public void onViewCreated(@NonNull View view, @Nullable Bundle savedInstanceState) {\n+        super.onViewCreated(view, savedInstanceState);\n+\n+        intervalHandler = new Handler();\n+\n+        intervalListView = new IntervalReverseListView(getActivity(), this);\n+        intervalListView.setId(View.generateViewId());\n+        LinearLayout linearLayout = view.findViewById(R.id.root_view);\n+        linearLayout.removeAllViews();\n+        linearLayout.addView(intervalListView);\n+\n+        viewModel = new ViewModelProvider(this).get(IntervalStatisticsModel.class);\n+    }\n+\n+    @Override\n+    public void onResume() {\n+        super.onResume();\n+        if (intervalRunner == null) {\n+            intervalRunner = new IntervalRunner();\n+            intervalRunner.run();\n+        }\n+    }\n+\n+    @Override\n+    public void onPause() {\n+        super.onPause();\n+        if (intervalRunner != null) {\n+            intervalRunner.stop();\n+            intervalRunner = null;\n+        }\n+    }\n+\n+    @Override\n+    public void onDestroy() {\n+        super.onDestroy();\n+\n+        intervalListView.destroy();\n+        intervalListView = null;\n+        viewModel = null;\n+    }\n+\n+    /**\n+     * Update intervals through {@link IntervalStatisticsModel} view model.\n+     *\n+     * @param interval intervals will split in this interval if not null. If it's null then view model will use the default one.\n+     */\n+    private void updateIntervals(@Nullable IntervalStatisticsModel.IntervalOption interval) {\n+        if (viewModel == null | intervalListView == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0ODA3OQ==", "bodyText": "Why initialize some vars with = null directly?\nIsn't implicit?", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475248079", "createdAt": "2020-08-23T18:05:22Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java", "diffHunk": "@@ -24,38 +24,48 @@\n import android.view.MotionEvent;\n import android.view.View;\n import android.view.ViewGroup;\n+import android.widget.LinearLayout;\n import android.widget.Spinner;\n import android.widget.TextView;\n \n import androidx.annotation.NonNull;\n import androidx.annotation.Nullable;\n import androidx.fragment.app.Fragment;\n+import androidx.lifecycle.ViewModelProvider;\n \n import de.dennisguse.opentracks.R;\n import de.dennisguse.opentracks.TrackRecordedActivity;\n-import de.dennisguse.opentracks.content.TrackDataHub;\n-import de.dennisguse.opentracks.content.TrackDataListener;\n import de.dennisguse.opentracks.content.data.Track;\n-import de.dennisguse.opentracks.content.data.TrackPoint;\n-import de.dennisguse.opentracks.content.data.Waypoint;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n import de.dennisguse.opentracks.stats.TrackStatistics;\n import de.dennisguse.opentracks.util.PreferencesUtils;\n import de.dennisguse.opentracks.util.StringUtils;\n import de.dennisguse.opentracks.util.TrackIconUtils;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatisticsModel;\n+import de.dennisguse.opentracks.views.IntervalListView;\n \n /**\n  * A fragment to display track statistics to the user.\n  *\n  * @author Sandor Dornbush\n  * @author Rodrigo Damazio\n  */\n-public class StatisticsRecordedFragment extends Fragment implements TrackDataListener {\n+public class StatisticsRecordedFragment extends Fragment implements IntervalListView.IntervalListListener {\n+\n+    private static final String TRACK_ID_KEY = \"trackId\";\n \n     private TrackStatistics trackStatistics = null;\n     private String category = \"\";\n+    private Track track;\n+\n+    private IntervalStatisticsModel viewModel = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0ODIzOA==", "bodyText": "+1", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475248238", "createdAt": "2020-08-23T18:06:31Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java", "diffHunk": "@@ -135,28 +174,28 @@ public void onActivityCreated(Bundle savedInstanceState) {\n         });\n     }\n \n+    private void addIntervals() {\n+        viewModel.getIntervalStats(track.getId()).observe(getActivity(), intervalStatistics -> {\n+            if (intervalStatistics != null) {\n+                intervalListView.display(intervalStatistics.getIntervalList());\n+            }\n+        });\n+    }\n+\n     @Override\n     public void onResume() {\n         super.onResume();\n         PreferencesUtils.register(getContext(), sharedPreferenceChangeListener);\n \n-        TrackDataHub trackDataHub = ((TrackRecordedActivity) getActivity()).getTrackDataHub();\n-        trackDataHub.registerTrackDataListener(this, true, false, true, true);\n-    }\n-\n-    @Override\n-    public void onPause() {\n-        super.onPause();\n-        PreferencesUtils.unregister(getContext(), sharedPreferenceChangeListener);\n-\n-        TrackDataHub trackDataHub = ((TrackRecordedActivity) getActivity()).getTrackDataHub();\n-        trackDataHub.unregisterTrackDataListener(this);\n+        loadStatistics();\n     }\n \n     @Override\n     public void onDestroyView() {\n         super.onDestroyView();\n \n+        PreferencesUtils.unregister(getContext(), sharedPreferenceChangeListener);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0ODI4Nw==", "bodyText": "Commt is helpful?", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475248287", "createdAt": "2020-08-23T18:07:06Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/fragments/StatisticsRecordedFragment.java", "diffHunk": "@@ -291,5 +298,19 @@ private void updateUI() {\n             speedMovingValue.setText(parts.first);\n             speedMovingUnit.setText(parts.second);\n         }\n+\n+        // Set intervals.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 211}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0ODU3Mg==", "bodyText": "Isn't this:\nCan you introduce\npublic static final double MI_TO_KM = 1 / KM_TO_MI; public static final double MI_TO_M = MI_TO_KM * KM_TO_M;\nPS: Did not test this.....", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475248572", "createdAt": "2020-08-23T18:10:09Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/util/UnitConversions.java", "diffHunk": "@@ -51,6 +51,8 @@\n     public static final double MM_TO_M = 0.001;\n \n     // Distance\n+    // multiplication factor to convert miles to meters\n+    public static final double MI_TO_M = 1609.344;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0ODY1Nw==", "bodyText": "Default initialize in l:11 and then use intervalList.clear();\nThis may save some memory allocation (or the runtime is really good).", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475248657", "createdAt": "2020-08-23T18:11:19Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n+        intervalList = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0ODcxMw==", "bodyText": "distance_m?", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475248713", "createdAt": "2020-08-23T18:11:47Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n+        intervalList = new ArrayList<>();\n+\n+        if (trackPointList == null || trackPointList.size() == 0) {\n+            return;\n+        }\n+\n+        Interval interval = new Interval();\n+        for (int i = 1; i < trackPointList.size(); i++) {\n+            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n+            TrackPoint trackPoint = trackPointList.get(i);\n+\n+            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n+                interval.distance += prevTrackPoint.distanceTo(trackPoint);\n+                interval.time += trackPoint.getTime() - prevTrackPoint.getTime();\n+\n+                if (interval.distance >= distanceInterval) {\n+                    float adjustFactor = distanceInterval / interval.distance;\n+                    Interval adjustedInterval = new Interval(interval);\n+                    adjustedInterval.distance *= adjustFactor;\n+                    adjustedInterval.time *= adjustFactor;\n+\n+                    intervalList.add(adjustedInterval);\n+\n+                    Interval newInterval = new Interval();\n+                    newInterval.distance = interval.distance - adjustedInterval.distance;\n+                    newInterval.time = interval.time - adjustedInterval.time;\n+\n+                    interval = newInterval;\n+                }\n+            }\n+        }\n+\n+        if (interval.distance > 1f) {\n+            intervalList.add(interval);\n+        }\n+    }\n+\n+    public List<Interval> getIntervalList() {\n+        return intervalList;\n+    }\n+\n+    public static class Interval {\n+        private float distance = 0f;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0ODczMw==", "bodyText": "time_ms?", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475248733", "createdAt": "2020-08-23T18:11:55Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n+        intervalList = new ArrayList<>();\n+\n+        if (trackPointList == null || trackPointList.size() == 0) {\n+            return;\n+        }\n+\n+        Interval interval = new Interval();\n+        for (int i = 1; i < trackPointList.size(); i++) {\n+            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n+            TrackPoint trackPoint = trackPointList.get(i);\n+\n+            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n+                interval.distance += prevTrackPoint.distanceTo(trackPoint);\n+                interval.time += trackPoint.getTime() - prevTrackPoint.getTime();\n+\n+                if (interval.distance >= distanceInterval) {\n+                    float adjustFactor = distanceInterval / interval.distance;\n+                    Interval adjustedInterval = new Interval(interval);\n+                    adjustedInterval.distance *= adjustFactor;\n+                    adjustedInterval.time *= adjustFactor;\n+\n+                    intervalList.add(adjustedInterval);\n+\n+                    Interval newInterval = new Interval();\n+                    newInterval.distance = interval.distance - adjustedInterval.distance;\n+                    newInterval.time = interval.time - adjustedInterval.time;\n+\n+                    interval = newInterval;\n+                }\n+            }\n+        }\n+\n+        if (interval.distance > 1f) {\n+            intervalList.add(interval);\n+        }\n+    }\n+\n+    public List<Interval> getIntervalList() {\n+        return intervalList;\n+    }\n+\n+    public static class Interval {\n+        private float distance = 0f;\n+        private float time = 0f;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0ODkyMQ==", "bodyText": "What about:\ninterval = new Interval(interval.distance - adjustedInterval.distance, interval.time - adjustedInterval.time);", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475248921", "createdAt": "2020-08-23T18:14:14Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n+        intervalList = new ArrayList<>();\n+\n+        if (trackPointList == null || trackPointList.size() == 0) {\n+            return;\n+        }\n+\n+        Interval interval = new Interval();\n+        for (int i = 1; i < trackPointList.size(); i++) {\n+            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n+            TrackPoint trackPoint = trackPointList.get(i);\n+\n+            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n+                interval.distance += prevTrackPoint.distanceTo(trackPoint);\n+                interval.time += trackPoint.getTime() - prevTrackPoint.getTime();\n+\n+                if (interval.distance >= distanceInterval) {\n+                    float adjustFactor = distanceInterval / interval.distance;\n+                    Interval adjustedInterval = new Interval(interval);\n+                    adjustedInterval.distance *= adjustFactor;\n+                    adjustedInterval.time *= adjustFactor;\n+\n+                    intervalList.add(adjustedInterval);\n+\n+                    Interval newInterval = new Interval();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTA1Mg==", "bodyText": "For Interval:\npublic void adjust(float adjustFactor) {\ndistance *= adjustFactor;\ntime *= adjustFactor;\n}", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475249052", "createdAt": "2020-08-23T18:15:19Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n+        intervalList = new ArrayList<>();\n+\n+        if (trackPointList == null || trackPointList.size() == 0) {\n+            return;\n+        }\n+\n+        Interval interval = new Interval();\n+        for (int i = 1; i < trackPointList.size(); i++) {\n+            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n+            TrackPoint trackPoint = trackPointList.get(i);\n+\n+            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n+                interval.distance += prevTrackPoint.distanceTo(trackPoint);\n+                interval.time += trackPoint.getTime() - prevTrackPoint.getTime();\n+\n+                if (interval.distance >= distanceInterval) {\n+                    float adjustFactor = distanceInterval / interval.distance;\n+                    Interval adjustedInterval = new Interval(interval);\n+                    adjustedInterval.distance *= adjustFactor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTA3Ng==", "bodyText": "Put constructor(s) first", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475249076", "createdAt": "2020-08-23T18:15:48Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n+        intervalList = new ArrayList<>();\n+\n+        if (trackPointList == null || trackPointList.size() == 0) {\n+            return;\n+        }\n+\n+        Interval interval = new Interval();\n+        for (int i = 1; i < trackPointList.size(); i++) {\n+            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n+            TrackPoint trackPoint = trackPointList.get(i);\n+\n+            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n+                interval.distance += prevTrackPoint.distanceTo(trackPoint);\n+                interval.time += trackPoint.getTime() - prevTrackPoint.getTime();\n+\n+                if (interval.distance >= distanceInterval) {\n+                    float adjustFactor = distanceInterval / interval.distance;\n+                    Interval adjustedInterval = new Interval(interval);\n+                    adjustedInterval.distance *= adjustFactor;\n+                    adjustedInterval.time *= adjustFactor;\n+\n+                    intervalList.add(adjustedInterval);\n+\n+                    Interval newInterval = new Interval();\n+                    newInterval.distance = interval.distance - adjustedInterval.distance;\n+                    newInterval.time = interval.time - adjustedInterval.time;\n+\n+                    interval = newInterval;\n+                }\n+            }\n+        }\n+\n+        if (interval.distance > 1f) {\n+            intervalList.add(interval);\n+        }\n+    }\n+\n+    public List<Interval> getIntervalList() {\n+        return intervalList;\n+    }\n+\n+    public static class Interval {\n+        private float distance = 0f;\n+        private float time = 0f;\n+\n+        public float getDistance() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTA4OQ==", "bodyText": "getSpeed_ms()", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475249089", "createdAt": "2020-08-23T18:15:57Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatistics.java", "diffHunk": "@@ -0,0 +1,80 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.util.LocationUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+public class IntervalStatistics {\n+    List<Interval> intervalList;\n+\n+    public void build(List<TrackPoint> trackPointList, float distanceInterval) {\n+        intervalList = new ArrayList<>();\n+\n+        if (trackPointList == null || trackPointList.size() == 0) {\n+            return;\n+        }\n+\n+        Interval interval = new Interval();\n+        for (int i = 1; i < trackPointList.size(); i++) {\n+            TrackPoint prevTrackPoint = trackPointList.get(i - 1);\n+            TrackPoint trackPoint = trackPointList.get(i);\n+\n+            if (LocationUtils.isValidLocation(trackPoint.getLocation()) && LocationUtils.isValidLocation(prevTrackPoint.getLocation())) {\n+                interval.distance += prevTrackPoint.distanceTo(trackPoint);\n+                interval.time += trackPoint.getTime() - prevTrackPoint.getTime();\n+\n+                if (interval.distance >= distanceInterval) {\n+                    float adjustFactor = distanceInterval / interval.distance;\n+                    Interval adjustedInterval = new Interval(interval);\n+                    adjustedInterval.distance *= adjustFactor;\n+                    adjustedInterval.time *= adjustFactor;\n+\n+                    intervalList.add(adjustedInterval);\n+\n+                    Interval newInterval = new Interval();\n+                    newInterval.distance = interval.distance - adjustedInterval.distance;\n+                    newInterval.time = interval.time - adjustedInterval.time;\n+\n+                    interval = newInterval;\n+                }\n+            }\n+        }\n+\n+        if (interval.distance > 1f) {\n+            intervalList.add(interval);\n+        }\n+    }\n+\n+    public List<Interval> getIntervalList() {\n+        return intervalList;\n+    }\n+\n+    public static class Interval {\n+        private float distance = 0f;\n+        private float time = 0f;\n+\n+        public float getDistance() {\n+            return distance;\n+        }\n+\n+        public Interval() {}\n+\n+        public Interval(Interval i) {\n+            distance = i.distance;\n+            time = i.time;\n+        }\n+\n+        /**\n+         * @return speed of the interval in m/s.\n+         */\n+        public float getSpeed() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTE2NA==", "bodyText": "Why application?\nI guess, we pass it nowwhere else, right?\nIs this just a context?", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475249164", "createdAt": "2020-08-23T18:16:47Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+/**\n+ * This view model is used to load intervals for a track.\n+ * It uses a default interval but it can be set from outside to manage the interval length.\n+ */\n+public class IntervalStatisticsModel extends AndroidViewModel {\n+\n+    private MutableLiveData<IntervalStatistics> intervalStats;\n+    private IntervalOption interval;\n+\n+    public IntervalStatisticsModel(@NonNull Application application) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTU4OQ==", "bodyText": "What is the benefit of using a method?\nI would also argue that we should fail immediately rather than returning a default option.\n   IntervalOption.values();", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475249589", "createdAt": "2020-08-23T18:21:16Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+/**\n+ * This view model is used to load intervals for a track.\n+ * It uses a default interval but it can be set from outside to manage the interval length.\n+ */\n+public class IntervalStatisticsModel extends AndroidViewModel {\n+\n+    private MutableLiveData<IntervalStatistics> intervalStats;\n+    private IntervalOption interval;\n+\n+    public IntervalStatisticsModel(@NonNull Application application) {\n+        super(application);\n+        interval = IntervalOption.OPTION_1;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(Track.Id trackId, IntervalOption interval) {\n+        if (intervalStats == null || this.interval != interval) {\n+            intervalStats = new MutableLiveData<>();\n+            this.interval = interval;\n+            loadIntervalStats(trackId);\n+        }\n+        return intervalStats;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(Track.Id trackId) {\n+        return getIntervalStats(trackId, interval);\n+    }\n+\n+    /**\n+     * Call this method when you want to force the view model to re-load intervals.\n+     */\n+    public void invalidate() {\n+        intervalStats = null;\n+    }\n+\n+    private void loadIntervalStats(Track.Id trackId) {\n+        new Thread(() -> {\n+            Context context = getApplication().getApplicationContext();\n+            ContentProviderUtils contentProviderUtils = new ContentProviderUtils(context);\n+            List<TrackPoint> trackPointList = contentProviderUtils.getTrackPoints(trackId);\n+\n+            IntervalStatistics intervalStatistics = new IntervalStatistics();\n+            float distanceInterval = PreferencesUtils.isMetricUnits(context) ? (float) (interval.getValue() * UnitConversions.KM_TO_M) : (float) (interval.getValue() * UnitConversions.MI_TO_M);\n+            intervalStatistics.build(trackPointList, distanceInterval);\n+\n+            intervalStats.postValue(intervalStatistics);\n+        }).start();\n+    }\n+\n+    /**\n+     * Intervals length this view model support.\n+     */\n+    public enum IntervalOption {\n+        OPTION_1(1),\n+        OPTION_2(2),\n+        OPTION_3(3),\n+        OPTION_4(4),\n+        OPTION_5(5),\n+        OPTION_10(10),\n+        OPTION_20(20),\n+        OPTION_50(50);\n+\n+        private int value;\n+\n+        IntervalOption(int value) {\n+            this.value = value;\n+        }\n+\n+        /**\n+         * @param pos position of the interval option.\n+         * @return    the interval option that is in the position pos.\n+         */\n+        public static IntervalOption getIntervalOption(int pos) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI0OTc0OQ==", "bodyText": "either static methods first or at the end.", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475249749", "createdAt": "2020-08-23T18:23:02Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+/**\n+ * This view model is used to load intervals for a track.\n+ * It uses a default interval but it can be set from outside to manage the interval length.\n+ */\n+public class IntervalStatisticsModel extends AndroidViewModel {\n+\n+    private MutableLiveData<IntervalStatistics> intervalStats;\n+    private IntervalOption interval;\n+\n+    public IntervalStatisticsModel(@NonNull Application application) {\n+        super(application);\n+        interval = IntervalOption.OPTION_1;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(Track.Id trackId, IntervalOption interval) {\n+        if (intervalStats == null || this.interval != interval) {\n+            intervalStats = new MutableLiveData<>();\n+            this.interval = interval;\n+            loadIntervalStats(trackId);\n+        }\n+        return intervalStats;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(Track.Id trackId) {\n+        return getIntervalStats(trackId, interval);\n+    }\n+\n+    /**\n+     * Call this method when you want to force the view model to re-load intervals.\n+     */\n+    public void invalidate() {\n+        intervalStats = null;\n+    }\n+\n+    private void loadIntervalStats(Track.Id trackId) {\n+        new Thread(() -> {\n+            Context context = getApplication().getApplicationContext();\n+            ContentProviderUtils contentProviderUtils = new ContentProviderUtils(context);\n+            List<TrackPoint> trackPointList = contentProviderUtils.getTrackPoints(trackId);\n+\n+            IntervalStatistics intervalStatistics = new IntervalStatistics();\n+            float distanceInterval = PreferencesUtils.isMetricUnits(context) ? (float) (interval.getValue() * UnitConversions.KM_TO_M) : (float) (interval.getValue() * UnitConversions.MI_TO_M);\n+            intervalStatistics.build(trackPointList, distanceInterval);\n+\n+            intervalStats.postValue(intervalStatistics);\n+        }).start();\n+    }\n+\n+    /**\n+     * Intervals length this view model support.\n+     */\n+    public enum IntervalOption {\n+        OPTION_1(1),\n+        OPTION_2(2),\n+        OPTION_3(3),\n+        OPTION_4(4),\n+        OPTION_5(5),\n+        OPTION_10(10),\n+        OPTION_20(20),\n+        OPTION_50(50);\n+\n+        private int value;\n+\n+        IntervalOption(int value) {\n+            this.value = value;\n+        }\n+\n+        /**\n+         * @param pos position of the interval option.\n+         * @return    the interval option that is in the position pos.\n+         */\n+        public static IntervalOption getIntervalOption(int pos) {\n+            if (values().length > pos) {\n+                return values()[pos];\n+            } else {\n+                return OPTION_1;\n+            }\n+        }\n+\n+        public int getValue() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 98}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1MDIwOA==", "bodyText": "This is just for to string conversion, right?\nIf yes, then I would move this functionality to the actual user of this function.\n        int[] a = {1};\n        Arrays.stream(a).mapToObj(String::valueOf).toArray(String[]::new);", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475250208", "createdAt": "2020-08-23T18:27:52Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/viewmodels/IntervalStatisticsModel.java", "diffHunk": "@@ -0,0 +1,116 @@\n+package de.dennisguse.opentracks.viewmodels;\n+\n+import android.app.Application;\n+import android.content.Context;\n+\n+import androidx.annotation.NonNull;\n+import androidx.lifecycle.AndroidViewModel;\n+import androidx.lifecycle.LiveData;\n+import androidx.lifecycle.MutableLiveData;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.content.data.Track;\n+import de.dennisguse.opentracks.content.data.TrackPoint;\n+import de.dennisguse.opentracks.content.provider.ContentProviderUtils;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.util.UnitConversions;\n+\n+/**\n+ * This view model is used to load intervals for a track.\n+ * It uses a default interval but it can be set from outside to manage the interval length.\n+ */\n+public class IntervalStatisticsModel extends AndroidViewModel {\n+\n+    private MutableLiveData<IntervalStatistics> intervalStats;\n+    private IntervalOption interval;\n+\n+    public IntervalStatisticsModel(@NonNull Application application) {\n+        super(application);\n+        interval = IntervalOption.OPTION_1;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(Track.Id trackId, IntervalOption interval) {\n+        if (intervalStats == null || this.interval != interval) {\n+            intervalStats = new MutableLiveData<>();\n+            this.interval = interval;\n+            loadIntervalStats(trackId);\n+        }\n+        return intervalStats;\n+    }\n+\n+    public LiveData<IntervalStatistics> getIntervalStats(Track.Id trackId) {\n+        return getIntervalStats(trackId, interval);\n+    }\n+\n+    /**\n+     * Call this method when you want to force the view model to re-load intervals.\n+     */\n+    public void invalidate() {\n+        intervalStats = null;\n+    }\n+\n+    private void loadIntervalStats(Track.Id trackId) {\n+        new Thread(() -> {\n+            Context context = getApplication().getApplicationContext();\n+            ContentProviderUtils contentProviderUtils = new ContentProviderUtils(context);\n+            List<TrackPoint> trackPointList = contentProviderUtils.getTrackPoints(trackId);\n+\n+            IntervalStatistics intervalStatistics = new IntervalStatistics();\n+            float distanceInterval = PreferencesUtils.isMetricUnits(context) ? (float) (interval.getValue() * UnitConversions.KM_TO_M) : (float) (interval.getValue() * UnitConversions.MI_TO_M);\n+            intervalStatistics.build(trackPointList, distanceInterval);\n+\n+            intervalStats.postValue(intervalStatistics);\n+        }).start();\n+    }\n+\n+    /**\n+     * Intervals length this view model support.\n+     */\n+    public enum IntervalOption {\n+        OPTION_1(1),\n+        OPTION_2(2),\n+        OPTION_3(3),\n+        OPTION_4(4),\n+        OPTION_5(5),\n+        OPTION_10(10),\n+        OPTION_20(20),\n+        OPTION_50(50);\n+\n+        private int value;\n+\n+        IntervalOption(int value) {\n+            this.value = value;\n+        }\n+\n+        /**\n+         * @param pos position of the interval option.\n+         * @return    the interval option that is in the position pos.\n+         */\n+        public static IntervalOption getIntervalOption(int pos) {\n+            if (values().length > pos) {\n+                return values()[pos];\n+            } else {\n+                return OPTION_1;\n+            }\n+        }\n+\n+        public int getValue() {\n+            return value;\n+        }\n+\n+        /**\n+         * @return a string array with all options.\n+         */\n+        public static String[] getAllValues() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1MDMyOQ==", "bodyText": "Can we not use the content of the parent?\n(PS: don't know)", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475250329", "createdAt": "2020-08-23T18:29:18Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/views/IntervalListView.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package de.dennisguse.opentracks.views;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.view.View;\n+import android.widget.AdapterView;\n+import android.widget.ArrayAdapter;\n+import android.widget.LinearLayout;\n+import android.widget.Spinner;\n+import android.widget.TextView;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.adapters.IntervalStatisticsAdapter;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatisticsModel;\n+\n+/**\n+ * LinearLayout view used to build a list of intervals.\n+ * See {@link IntervalStatisticsAdapter}.\n+ */\n+public class IntervalListView extends LinearLayout {\n+\n+    protected IntervalStatisticsAdapter adapter;\n+    protected LinearLayout linearLayoutIntervals;\n+    protected Spinner spinnerIntervals;\n+    protected TextView spinnerIntervalsUnit;\n+\n+    protected Context context;\n+    protected IntervalListListener listener;\n+\n+    protected final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (preferences, key) -> {\n+        if (PreferencesUtils.isKey(getContext(), R.string.stats_units_key, key) || PreferencesUtils.isKey(getContext(), R.string.stats_rate_key, key)) {\n+            if (spinnerIntervalsUnit != null) {\n+                spinnerIntervalsUnit.setText(PreferencesUtils.isMetricUnits(context) ? context.getString(R.string.unit_kilometer) : context.getString(R.string.unit_mile));\n+            }\n+        }\n+    };\n+\n+    public IntervalListView(Context context, IntervalListListener listener) {\n+        super(context);\n+        this.context = context;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1MDMzNA==", "bodyText": "Why not put this into the constructor?", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475250334", "createdAt": "2020-08-23T18:29:20Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/views/IntervalListView.java", "diffHunk": "@@ -0,0 +1,96 @@\n+package de.dennisguse.opentracks.views;\n+\n+import android.content.Context;\n+import android.content.SharedPreferences;\n+import android.view.View;\n+import android.widget.AdapterView;\n+import android.widget.ArrayAdapter;\n+import android.widget.LinearLayout;\n+import android.widget.Spinner;\n+import android.widget.TextView;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.R;\n+import de.dennisguse.opentracks.adapters.IntervalStatisticsAdapter;\n+import de.dennisguse.opentracks.util.PreferencesUtils;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatisticsModel;\n+\n+/**\n+ * LinearLayout view used to build a list of intervals.\n+ * See {@link IntervalStatisticsAdapter}.\n+ */\n+public class IntervalListView extends LinearLayout {\n+\n+    protected IntervalStatisticsAdapter adapter;\n+    protected LinearLayout linearLayoutIntervals;\n+    protected Spinner spinnerIntervals;\n+    protected TextView spinnerIntervalsUnit;\n+\n+    protected Context context;\n+    protected IntervalListListener listener;\n+\n+    protected final SharedPreferences.OnSharedPreferenceChangeListener sharedPreferenceChangeListener = (preferences, key) -> {\n+        if (PreferencesUtils.isKey(getContext(), R.string.stats_units_key, key) || PreferencesUtils.isKey(getContext(), R.string.stats_rate_key, key)) {\n+            if (spinnerIntervalsUnit != null) {\n+                spinnerIntervalsUnit.setText(PreferencesUtils.isMetricUnits(context) ? context.getString(R.string.unit_kilometer) : context.getString(R.string.unit_mile));\n+            }\n+        }\n+    };\n+\n+    public IntervalListView(Context context, IntervalListListener listener) {\n+        super(context);\n+        this.context = context;\n+        this.listener = listener;\n+        PreferencesUtils.register(getContext(), sharedPreferenceChangeListener);\n+        init();\n+    }\n+\n+    protected void init() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1MDQxNQ==", "bodyText": "Can move this into IntervalListView as a public static class?", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475250415", "createdAt": "2020-08-23T18:30:02Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/views/IntervalReverseListView.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package de.dennisguse.opentracks.views;\n+\n+import android.content.Context;\n+import android.view.View;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.adapters.IntervalStatisticsAdapter;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+\n+/**\n+ * LinearLayout view used to build a list of intervals in a reverse mode, the last one will appear in the first position on the LinearLayout.\n+ * This class is an specialization of {@link IntervalListView} that display the views contained in the LinearLayout in a reverse mode.\n+ */\n+public class IntervalReverseListView extends IntervalListView {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTI1MDQ1OA==", "bodyText": "if (intervalList == null) {\nreturn;\n}", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/368#discussion_r475250458", "createdAt": "2020-08-23T18:30:31Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/views/IntervalReverseListView.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package de.dennisguse.opentracks.views;\n+\n+import android.content.Context;\n+import android.view.View;\n+\n+import java.util.List;\n+\n+import de.dennisguse.opentracks.adapters.IntervalStatisticsAdapter;\n+import de.dennisguse.opentracks.viewmodels.IntervalStatistics;\n+\n+/**\n+ * LinearLayout view used to build a list of intervals in a reverse mode, the last one will appear in the first position on the LinearLayout.\n+ * This class is an specialization of {@link IntervalListView} that display the views contained in the LinearLayout in a reverse mode.\n+ */\n+public class IntervalReverseListView extends IntervalListView {\n+\n+    public IntervalReverseListView(Context context, IntervalListListener listener) {\n+        super(context, listener);\n+    }\n+\n+    public void display(List<IntervalStatistics.Interval> intervalList) {\n+        if (intervalList != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a865c3f0407b09f4be060eca1f487f4256243f3"}, "originalPosition": 22}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cd98d55fab761a554c25adf702090ed2e08b2faf", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/cd98d55fab761a554c25adf702090ed2e08b2faf", "committedDate": "2020-08-26T08:55:38Z", "message": "Interval Stats: improve code and fixed some UI issues."}, "afterCommit": {"oid": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "committedDate": "2020-08-27T15:17:24Z", "message": "Interval Stats: improve code and fixed some UI issues."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35e0f095b96c049ba42b7f1bd7749adda3977b36", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/35e0f095b96c049ba42b7f1bd7749adda3977b36", "committedDate": "2020-08-27T15:17:24Z", "message": "StatisticsRecordedFragment doesn't need TrackDataHub.\nTrackRecordedActivity saves Track object instead of track's id."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "818733cdc71fbccaa99eeefa1fe86138998b1990", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/818733cdc71fbccaa99eeefa1fe86138998b1990", "committedDate": "2020-08-27T15:17:24Z", "message": "Added intervals in StatisticsRecordedFragment with distance, speed and pace for all activity types.\nUsers can select the length of the interval (in a spinner with several options).\nThe intervals will be in km or mi depending on settings."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "15b04e05b9206a535e4d78096ad258fb1e17c8e9", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/15b04e05b9206a535e4d78096ad258fb1e17c8e9", "committedDate": "2020-08-27T15:17:24Z", "message": "Adjusted intervals."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a74e38d0b09e114542b2722476c4a62209064a9f", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/a74e38d0b09e114542b2722476c4a62209064a9f", "committedDate": "2020-08-27T15:17:24Z", "message": "Interval statistics: show accumulate in distance column."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35cedd3ee4a76d7b7d7c64796587253e414a0f25", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/35cedd3ee4a76d7b7d7c64796587253e414a0f25", "committedDate": "2020-08-27T15:17:24Z", "message": "Interval statistics: retain interval value after change orientation and recreation."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2b9d860d2d9b4184e643cdb96557915a0eb7caad", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/2b9d860d2d9b4184e643cdb96557915a0eb7caad", "committedDate": "2020-08-27T15:17:24Z", "message": "Interval statistics: listen preferred units change (metric/imperial) and recreate intervals."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6235ce75b4013877db2990fca8f9ba5e8e8bff9c", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/6235ce75b4013877db2990fca8f9ba5e8e8bff9c", "committedDate": "2020-08-27T15:17:24Z", "message": "Interval stats: improve code."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d625702c6894f3b63a746ceb22a1a52b98f06e81", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/d625702c6894f3b63a746ceb22a1a52b98f06e81", "committedDate": "2020-08-27T15:17:24Z", "message": "Interval stats: added a new tab in TrackRecordingActivity that shows the intervals on live."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6b27fd0377a960c7c1225dbda47b5ab3700b3283", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/6b27fd0377a960c7c1225dbda47b5ab3700b3283", "committedDate": "2020-08-27T15:17:24Z", "message": "Interval stats: added IntervalStatisticsTest."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc405c050d72319210152db87d00206059547f5e", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/fc405c050d72319210152db87d00206059547f5e", "committedDate": "2020-08-27T15:17:24Z", "message": "Interval stats: while user is recording a track intervals are refreshed every 5 seconds.\nInterval stats: completed the list of split intervals: 1, 2, 3, 4, 5, 10, 20 or 50 km or mi.\nFixes #87."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "099e390af69ca077f0ac9d56c2092a65e7d52d5f", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/099e390af69ca077f0ac9d56c2092a65e7d52d5f", "committedDate": "2020-08-27T15:17:24Z", "message": "Interval Stats: track's id it's not long anymore."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/99b59f5e28b59c0a8a7bb83b22c72fd88bf1c9a3", "committedDate": "2020-08-27T15:17:24Z", "message": "Interval Stats: improve code and fixed some UI issues."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6d55664745744e56706e654d793ffd0837114dc", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/a6d55664745744e56706e654d793ffd0837114dc", "committedDate": "2020-08-28T07:42:07Z", "message": "Announcement: while recording report current interval pace or speed.\nFixes #134."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c70996e6df0cceeb712db0137913cc89ff064760", "author": {"user": {"login": "rgmf", "name": "Rom\u00e1n Mart\u00ednez"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/c70996e6df0cceeb712db0137913cc89ff064760", "committedDate": "2020-08-28T14:06:59Z", "message": "New style for spinner with text."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb13fe402de897034f8ddf25b71b5e710cf1c99c", "author": {"user": {"login": "dennisguse", "name": "Dennis Guse"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/fb13fe402de897034f8ddf25b71b5e710cf1c99c", "committedDate": "2020-09-01T21:58:31Z", "message": "Interval Stats: use a tab for recorded tracks as well."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1f98a79b29c5026cc45b1c3cbeae6796c2bf5a2d", "author": {"user": {"login": "dennisguse", "name": "Dennis Guse"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/1f98a79b29c5026cc45b1c3cbeae6796c2bf5a2d", "committedDate": "2020-09-01T19:55:39Z", "message": "Work in progress"}, "afterCommit": {"oid": "fb13fe402de897034f8ddf25b71b5e710cf1c99c", "author": {"user": {"login": "dennisguse", "name": "Dennis Guse"}}, "url": "https://github.com/OpenTracksApp/OpenTracks/commit/fb13fe402de897034f8ddf25b71b5e710cf1c99c", "committedDate": "2020-09-01T21:58:31Z", "message": "Interval Stats: use a tab for recorded tracks as well."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2241, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}