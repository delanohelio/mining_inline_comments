{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0NTQ2NjEy", "number": 188, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToxODo1NVrOD0kHDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToyODowMlrOD0kQcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDQ0MTczOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/io/file/exporter/KmlTrackWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToxODo1NVrOGJjzUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToxODo1NVrOGJjzUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3Njk0Nw==", "bodyText": "Waypoint.getLocation() cannot be null as it is required during creation.\nWhy should it here be different?", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/188#discussion_r412676947", "createdAt": "2020-04-22T05:18:55Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/io/file/exporter/KmlTrackWriter.java", "diffHunk": "@@ -322,32 +324,29 @@ private void writePlacemark(String name, String category, String description, St\n     }\n \n     /**\n-     * Writes a photo overlay.\n-     *  @param name        the name\n-     * @param category    the category\n-     * @param description the description\n-     * @param location    the location\n-     * @param photoUrl    the photo url\n-     * @param heading     the heading\n+     * Writes a photo overlay from waypoint.\n+     *\n+     * @param waypoint Waypoint object.\n+     * @param heading  the heading.\n      */\n-    private void writePhotoOverlay(String name, String category, String description, Location location, String photoUrl, float heading) {\n-        if (location != null && exportTrackDetail) {\n+    private void writePhotoOverlay(Waypoint waypoint, float heading) {\n+        if (waypoint.getLocation() != null && exportTrackDetail) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed0dc053663be3e54cfb577ba473c2b58f18168c"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDQ1NTc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/io/file/importer/KmzTrackImporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToyNDoxMFrOGJj6rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToyNDoxMFrOGJj6rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3ODgzMQ==", "bodyText": "Arrays.asList()?", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/188#discussion_r412678831", "createdAt": "2020-04-22T05:24:10Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/io/file/importer/KmzTrackImporter.java", "diffHunk": "@@ -42,58 +46,197 @@\n \n     private static final String TAG = KmzTrackImporter.class.getSimpleName();\n \n+    public static final List<String> KMZ_IMAGES_EXT = new ArrayList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed0dc053663be3e54cfb577ba473c2b58f18168c"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDQ1ODUwOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/io/file/importer/KmzTrackImporter.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToyNToyMVrOGJj8MA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjozMjoyOFrOGJlmdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3OTIxNg==", "bodyText": "Move into while?", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/188#discussion_r412679216", "createdAt": "2020-04-22T05:25:21Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/io/file/importer/KmzTrackImporter.java", "diffHunk": "@@ -42,58 +46,197 @@\n \n     private static final String TAG = KmzTrackImporter.class.getSimpleName();\n \n+    public static final List<String> KMZ_IMAGES_EXT = new ArrayList<>();\n+    static {\n+        KMZ_IMAGES_EXT.add(\"jpeg\");\n+        KMZ_IMAGES_EXT.add(\"jpg\");\n+        KMZ_IMAGES_EXT.add(\"png\");\n+    }\n+\n     private static final int BUFFER_SIZE = 4096;\n \n     private final Context context;\n     private final long importTrackId;\n+    private Uri uriKmzFile;\n \n     /**\n      * Constructor.\n      *\n      * @param context       the context\n      * @param importTrackId track id to import to. This should not be -1L so that images in the kmz file can be imported.\n+     * @param uriFile       URI of the kmz file.\n      */\n-    KmzTrackImporter(Context context, long importTrackId) {\n+    KmzTrackImporter(Context context, long importTrackId, Uri uriFile) {\n         this.context = context;\n         this.importTrackId = importTrackId;\n+        this.uriKmzFile = uriFile;\n     }\n \n     @Override\n     public long importFile(InputStream inputStream) {\n-        long trackId = importTrackId;\n+        long trackId;\n+\n+        if (!copyKmzImages()) {\n+            cleanImport(context, importTrackId);\n+            return -1L;\n+        }\n+\n+        trackId = findAndParseKmlFile(inputStream);\n+        if (trackId == -1L) {\n+            cleanImport(context, importTrackId);\n+            return -1L;\n+        }\n+\n+        deleteOrphanImages(context, trackId);\n+\n+        return trackId;\n+    }\n+\n+    /**\n+     * Copies all images that are inside KMZ to OpenTracks external storage.\n+     *\n+     * @return false if there are errors or true otherwise.\n+     */\n+    private boolean copyKmzImages() {\n+        try (InputStream inputStream = context.getContentResolver().openInputStream(uriKmzFile);\n+            ZipInputStream zipInputStream = new ZipInputStream(inputStream)) {\n+            ZipEntry zipEntry;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed0dc053663be3e54cfb577ba473c2b58f18168c"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwNjQyMQ==", "bodyText": "What do you mean to move into?  ZipEntry declaration?", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/188#discussion_r412706421", "createdAt": "2020-04-22T06:32:28Z", "author": {"login": "rgmf"}, "path": "src/main/java/de/dennisguse/opentracks/io/file/importer/KmzTrackImporter.java", "diffHunk": "@@ -42,58 +46,197 @@\n \n     private static final String TAG = KmzTrackImporter.class.getSimpleName();\n \n+    public static final List<String> KMZ_IMAGES_EXT = new ArrayList<>();\n+    static {\n+        KMZ_IMAGES_EXT.add(\"jpeg\");\n+        KMZ_IMAGES_EXT.add(\"jpg\");\n+        KMZ_IMAGES_EXT.add(\"png\");\n+    }\n+\n     private static final int BUFFER_SIZE = 4096;\n \n     private final Context context;\n     private final long importTrackId;\n+    private Uri uriKmzFile;\n \n     /**\n      * Constructor.\n      *\n      * @param context       the context\n      * @param importTrackId track id to import to. This should not be -1L so that images in the kmz file can be imported.\n+     * @param uriFile       URI of the kmz file.\n      */\n-    KmzTrackImporter(Context context, long importTrackId) {\n+    KmzTrackImporter(Context context, long importTrackId, Uri uriFile) {\n         this.context = context;\n         this.importTrackId = importTrackId;\n+        this.uriKmzFile = uriFile;\n     }\n \n     @Override\n     public long importFile(InputStream inputStream) {\n-        long trackId = importTrackId;\n+        long trackId;\n+\n+        if (!copyKmzImages()) {\n+            cleanImport(context, importTrackId);\n+            return -1L;\n+        }\n+\n+        trackId = findAndParseKmlFile(inputStream);\n+        if (trackId == -1L) {\n+            cleanImport(context, importTrackId);\n+            return -1L;\n+        }\n+\n+        deleteOrphanImages(context, trackId);\n+\n+        return trackId;\n+    }\n+\n+    /**\n+     * Copies all images that are inside KMZ to OpenTracks external storage.\n+     *\n+     * @return false if there are errors or true otherwise.\n+     */\n+    private boolean copyKmzImages() {\n+        try (InputStream inputStream = context.getContentResolver().openInputStream(uriKmzFile);\n+            ZipInputStream zipInputStream = new ZipInputStream(inputStream)) {\n+            ZipEntry zipEntry;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3OTIxNg=="}, "originalCommit": {"oid": "ed0dc053663be3e54cfb577ba473c2b58f18168c"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDQ2MjgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/io/file/importer/KmzTrackImporter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToyNjo0OFrOGJj-cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToyNjo0OFrOGJj-cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY3OTc5NQ==", "bodyText": "KMZ_IMAGES_EXT.contains(fileExt)", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/188#discussion_r412679795", "createdAt": "2020-04-22T05:26:48Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/io/file/importer/KmzTrackImporter.java", "diffHunk": "@@ -42,58 +46,197 @@\n \n     private static final String TAG = KmzTrackImporter.class.getSimpleName();\n \n+    public static final List<String> KMZ_IMAGES_EXT = new ArrayList<>();\n+    static {\n+        KMZ_IMAGES_EXT.add(\"jpeg\");\n+        KMZ_IMAGES_EXT.add(\"jpg\");\n+        KMZ_IMAGES_EXT.add(\"png\");\n+    }\n+\n     private static final int BUFFER_SIZE = 4096;\n \n     private final Context context;\n     private final long importTrackId;\n+    private Uri uriKmzFile;\n \n     /**\n      * Constructor.\n      *\n      * @param context       the context\n      * @param importTrackId track id to import to. This should not be -1L so that images in the kmz file can be imported.\n+     * @param uriFile       URI of the kmz file.\n      */\n-    KmzTrackImporter(Context context, long importTrackId) {\n+    KmzTrackImporter(Context context, long importTrackId, Uri uriFile) {\n         this.context = context;\n         this.importTrackId = importTrackId;\n+        this.uriKmzFile = uriFile;\n     }\n \n     @Override\n     public long importFile(InputStream inputStream) {\n-        long trackId = importTrackId;\n+        long trackId;\n+\n+        if (!copyKmzImages()) {\n+            cleanImport(context, importTrackId);\n+            return -1L;\n+        }\n+\n+        trackId = findAndParseKmlFile(inputStream);\n+        if (trackId == -1L) {\n+            cleanImport(context, importTrackId);\n+            return -1L;\n+        }\n+\n+        deleteOrphanImages(context, trackId);\n+\n+        return trackId;\n+    }\n+\n+    /**\n+     * Copies all images that are inside KMZ to OpenTracks external storage.\n+     *\n+     * @return false if there are errors or true otherwise.\n+     */\n+    private boolean copyKmzImages() {\n+        try (InputStream inputStream = context.getContentResolver().openInputStream(uriKmzFile);\n+            ZipInputStream zipInputStream = new ZipInputStream(inputStream)) {\n+            ZipEntry zipEntry;\n+\n+            while ((zipEntry = zipInputStream.getNextEntry()) != null) {\n+                if (Thread.interrupted()) {\n+                    Log.d(TAG, \"Thread interrupted\");\n+                    return false;\n+                }\n+\n+                String fileName = zipEntry.getName();\n+                if (hasImageExtension(fileName)) {\n+                    readAndSaveImageFile(zipInputStream, importNameForFilename(fileName));\n+                }\n+\n+                zipInputStream.closeEntry();\n+            }\n+\n+            return true;\n+        } catch (IOException e) {\n+            Log.e(TAG, \"Unable to import file\", e);\n+            return false;\n+        }\n+    }\n+\n+    /**\n+     * From path fileName generates an import unique name and returns it.\n+     * The name generator is simple: change the path fileName with '-' instead of File.separatorChar.\n+     *\n+     * @param fileName the file name.\n+     */\n+    public static String importNameForFilename(String fileName) {\n+        // TODO this tricky code for maintain backward compatibility must be deleted some day.\n+        /*\n+         * In versions before v3.5.0 photo URL in KML files were wrong.\n+         * For compatibility reasons it checks if fileName begins with \"content://\" or \"file://\".\n+         * All fileName begins with \"content:/\" or \"file://\" are cooked.\n+         * We cannot guess what's the folder name where images are so we use \"images\" that was the folder name expected in versions before v3.5.0.\n+         */\n+        if (fileName.startsWith(\"content://\") || fileName.startsWith(\"file://\")) {\n+            fileName = \"images/\" + fileName.substring(fileName.lastIndexOf(File.separatorChar) + 1);\n+        }\n+\n+        return fileName.replace(File.separatorChar, '-');\n+    }\n+\n+    /**\n+     * Returns true if fileName ends with some of the KMZ_IMAGES_EXT suffixes.\n+     * Otherwise returns false.\n+     */\n+    private boolean hasImageExtension(String fileName)  {\n+        if (fileName == null) {\n+            return false;\n+        }\n+\n+        String fileExt = FileUtils.getExtension(fileName.toLowerCase());\n+        if (fileExt == null) {\n+            return false;\n+        }\n+\n+        for (String ext : KMZ_IMAGES_EXT) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed0dc053663be3e54cfb577ba473c2b58f18168c"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU2NDQ2NTc5OnYy", "diffSide": "RIGHT", "path": "src/main/java/de/dennisguse/opentracks/util/FileUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToyODowMlrOGJkAFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNToyODowMlrOGJkAFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY4MDIxMw==", "bodyText": "@return", "url": "https://github.com/OpenTracksApp/OpenTracks/pull/188#discussion_r412680213", "createdAt": "2020-04-22T05:28:02Z", "author": {"login": "dennisguse"}, "path": "src/main/java/de/dennisguse/opentracks/util/FileUtils.java", "diffHunk": "@@ -95,11 +95,15 @@ public static synchronized String buildUniqueFileName(File directory, String fil\n \n     /**\n      * Gets the extension from a file name.\n-     * Returns null if there is no extension.\n+     * Returns null if there is no extension or fileName is null.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ed0dc053663be3e54cfb577ba473c2b58f18168c"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1985, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}