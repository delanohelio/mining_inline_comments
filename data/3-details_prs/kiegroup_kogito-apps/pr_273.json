{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1Nzk0NjI3", "number": 273, "title": "Kogito 2275 - trusty service uses persistence abstraction", "bodyText": "Jira link: https://issues.redhat.com/browse/KOGITO-2275\nThe aim of this PR is to use the persistence abstraction in the trusty service. In addition to that, the endpoint v1/executions/decisions/{executionId} is implemented and tested.\nThe class InfinispanServerTestResource has been moved to the persistence-commons-infinispan test module, so that any module that would like to use the infinispan testcontainer image can extend it and define what are the caches that have to be erased after each test.\nMany thanks for submitting your Pull Request \u2764\ufe0f!\nPlease make sure that your PR meets the following requirements:\n\n[v ] You have read the contributors guide\n[v ] Pull Request title is properly formatted: KOGITO-XYZ Subject\n Pull Request title contains the target branch if not targeting master: [0.9.x] KOGITO-XYZ Subject\n[ v] Pull Request contains link to the JIRA issue\n[ v] Pull Request contains link to any dependent or related Pull Request\n[ v] Pull Request contains description of the issue\n[ v] Pull Request does not include fixes for issues other than the main ticket", "createdAt": "2020-06-17T11:40:32Z", "url": "https://github.com/kiegroup/kogito-apps/pull/273", "merged": true, "mergeCommit": {"oid": "c131fd19e01a2cc89e64beeae0ba5123c8bdece4"}, "closed": true, "closedAt": "2020-06-24T10:33:07Z", "author": {"login": "r00ta"}, "timelineItems": {"totalCount": 102, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcuHljSgFqTQzNTkyNjU1OA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuXAsDAFqTQzNjQ5ODIxMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1OTI2NTU4", "url": "https://github.com/kiegroup/kogito-apps/pull/273#pullrequestreview-435926558", "createdAt": "2020-06-23T15:56:57Z", "commit": {"oid": "4235f0a0e166502e9f4690a16604d0f977aa5b6f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM2NDk4MjEy", "url": "https://github.com/kiegroup/kogito-apps/pull/273#pullrequestreview-436498212", "createdAt": "2020-06-24T09:55:10Z", "commit": {"oid": "4235f0a0e166502e9f4690a16604d0f977aa5b6f"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06a5900346f19c689e83c97b520a2f6580012899", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/06a5900346f19c689e83c97b520a2f6580012899", "committedDate": "2020-05-26T12:43:09Z", "message": "Create trustyCI.yml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e28aaa2c0876b61441bec40203b1ca39d066630d", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/e28aaa2c0876b61441bec40203b1ca39d066630d", "committedDate": "2020-05-26T12:52:33Z", "message": "Update trustyCI.yml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e64db78b9b86b86b39ad74e5ecb482c3738e29a7", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/e64db78b9b86b86b39ad74e5ecb482c3738e29a7", "committedDate": "2020-05-29T07:46:12Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4eedb7b29a4eb163eef6e08296b269f07f76a466", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/4eedb7b29a4eb163eef6e08296b269f07f76a466", "committedDate": "2020-06-04T08:25:27Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95a89856d1a0d04de27ce0517ddffb5c4edcf931", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/95a89856d1a0d04de27ce0517ddffb5c4edcf931", "committedDate": "2020-06-04T11:20:16Z", "message": "create storage abstraction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16cf560065ac91a5ac1f16bba1c8bcdc4cf74645", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/16cf560065ac91a5ac1f16bba1c8bcdc4cf74645", "committedDate": "2020-06-04T11:25:05Z", "message": "Revert \"Update trustyCI.yml\"\n\nThis reverts commit e28aaa2c0876b61441bec40203b1ca39d066630d."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "936b6376ea9a67f5f518da57789f337476d860db", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/936b6376ea9a67f5f518da57789f337476d860db", "committedDate": "2020-06-04T11:25:20Z", "message": "Revert \"Create trustyCI.yml\"\n\nThis reverts commit 06a5900346f19c689e83c97b520a2f6580012899."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "279c3265eda41f15a9c7cab798fa0ce29f382dac", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/279c3265eda41f15a9c7cab798fa0ce29f382dac", "committedDate": "2020-06-04T11:37:17Z", "message": "Refactor infinispan query tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc6d7ef238643c7de278daa337bd961ac2188671", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/cc6d7ef238643c7de278daa337bd961ac2188671", "committedDate": "2020-06-04T11:42:25Z", "message": "refactor infinispan query tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7296acfa97640c0727e5bad06413600b86176999", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/7296acfa97640c0727e5bad06413600b86176999", "committedDate": "2020-06-04T12:31:11Z", "message": "refactoring data-index-protobuf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af94b7ee471b1eadf0752b76a089da3cd74560bf", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/af94b7ee471b1eadf0752b76a089da3cd74560bf", "committedDate": "2020-06-04T14:38:55Z", "message": "refactoring getProtobufCache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c3d2d9e1fb19d2e90cfb5551d9f0a755591875b", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/1c3d2d9e1fb19d2e90cfb5551d9f0a755591875b", "committedDate": "2020-06-04T15:36:56Z", "message": "refactoring Storage annotations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "093a0b152d2c75e54a1cddd069a84abbaf08da91", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/093a0b152d2c75e54a1cddd069a84abbaf08da91", "committedDate": "2020-06-04T20:44:15Z", "message": "fix pom"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4adfbf90c4509cfcea02c55c93f433d3bb1534ef", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/4adfbf90c4509cfcea02c55c93f433d3bb1534ef", "committedDate": "2020-06-05T09:07:31Z", "message": "Fix CacheService annotation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a009b2bb0c9dfd0c2c836154291f3c8dd1ae9823", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/a009b2bb0c9dfd0c2c836154291f3c8dd1ae9823", "committedDate": "2020-06-05T10:47:17Z", "message": "fix integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce65822cd90fc7c4ee5b556c9721237e4d55cbc2", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/ce65822cd90fc7c4ee5b556c9721237e4d55cbc2", "committedDate": "2020-06-05T11:06:46Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1ed61cb0ef05836a574cd5b1f85a9adf3336ad0", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/a1ed61cb0ef05836a574cd5b1f85a9adf3336ad0", "committedDate": "2020-06-05T11:59:21Z", "message": "rename classes based on comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3968883c669a2efacd8cf5dbf3e8f1d0f0f60490", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/3968883c669a2efacd8cf5dbf3e8f1d0f0f60490", "committedDate": "2020-06-05T12:04:28Z", "message": "rename classes based on comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55a8847ce804a849380f4d2383215517f2b4ba6c", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/55a8847ce804a849380f4d2383215517f2b4ba6c", "committedDate": "2020-06-05T13:26:11Z", "message": "refactoring getProtobufCache and getProcessIdModelCache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e781ec386dd0cc0d11c3a9b1dd397beb10d8869", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/4e781ec386dd0cc0d11c3a9b1dd397beb10d8869", "committedDate": "2020-06-05T15:15:44Z", "message": "refactoring protobuf module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05b9dd58c5d0bef3af6176e63629b57f3bf6a704", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/05b9dd58c5d0bef3af6176e63629b57f3bf6a704", "committedDate": "2020-06-08T07:35:18Z", "message": "rename methods according to comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a866ee207fdf049bf4e2455a571eb7ff1952c394", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/a866ee207fdf049bf4e2455a571eb7ff1952c394", "committedDate": "2020-06-08T08:00:25Z", "message": "add kogito storage commons readme"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5355eded0d7e654a6b4cba7fb0650cbc22138109", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/5355eded0d7e654a6b4cba7fb0650cbc22138109", "committedDate": "2020-06-08T12:52:13Z", "message": "rename parameters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77939ad03565261e899cf5c652d31cc1289356bf", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/77939ad03565261e899cf5c652d31cc1289356bf", "committedDate": "2020-06-08T13:30:41Z", "message": "add trusty storage modules"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "106bcee5a580feca60de3cf802faf1a76299aa3b", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/106bcee5a580feca60de3cf802faf1a76299aa3b", "committedDate": "2020-06-08T13:50:09Z", "message": "rename decision storage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e08e47ff17554c39797935f9aa4dafaef3845f26", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/e08e47ff17554c39797935f9aa4dafaef3845f26", "committedDate": "2020-06-08T13:52:16Z", "message": "add licences"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "37e12d443a0bb7966b623e7c3179ca0fae3da963", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/37e12d443a0bb7966b623e7c3179ca0fae3da963", "committedDate": "2020-06-08T14:49:29Z", "message": "use the trusty storage layer to retrieve executions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8ce33323b51866fb5a494aebef3832d3288c1fe", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/f8ce33323b51866fb5a494aebef3832d3288c1fe", "committedDate": "2020-06-08T14:50:22Z", "message": "fix readme"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70ca5e299c7bbd97ae8d5e671ee382ceac876962", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/70ca5e299c7bbd97ae8d5e671ee382ceac876962", "committedDate": "2020-06-09T05:03:50Z", "message": "move protobuf domain to api and remove unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbb8c1c1804d76d600fb627601fc2a751c6750ac", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/fbb8c1c1804d76d600fb627601fc2a751c6750ac", "committedDate": "2020-06-09T05:10:02Z", "message": "Merge branch 'KOGITO-2326-storage-abstraction' into KOGITO-2275-trusty-storage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "74667b1bfadb3f5c49112e361a9f31842df2e17c", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/74667b1bfadb3f5c49112e361a9f31842df2e17c", "committedDate": "2020-06-09T12:57:43Z", "message": "add integration test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c6a4ecf3d48d2b891261ed6c637d8e8f11eb42f", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/2c6a4ecf3d48d2b891261ed6c637d8e8f11eb42f", "committedDate": "2020-06-09T13:58:50Z", "message": "refactoring getProtobufCache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb17921111a3f356b54d099c84f651c399bdf5d1", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/fb17921111a3f356b54d099c84f651c399bdf5d1", "committedDate": "2020-06-09T14:02:56Z", "message": "remove getProtobufCache old method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd29feb5a9429115e932299baf72b07ac3e5daf3", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/bd29feb5a9429115e932299baf72b07ac3e5daf3", "committedDate": "2020-06-10T07:18:01Z", "message": "remove getProtobufCache from DataIndexStorageManager, ProtobufService injected directly in protobuf manager"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67c1fe1e781ed9ba5ed592baf49c57f8dcfa9fc1", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/67c1fe1e781ed9ba5ed592baf49c57f8dcfa9fc1", "committedDate": "2020-06-10T07:22:43Z", "message": "Merge branch 'KOGITO-2326-storage-abstraction' into KOGITO-2275-trusty-storage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ec04ea04d9efec0271abdcf4ba692c76914a202", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/8ec04ea04d9efec0271abdcf4ba692c76914a202", "committedDate": "2020-06-10T08:58:45Z", "message": "Update kogito-storage-commons/kogito-storage-commons-infinispan/src/main/java/org/kie/kogito/storage/infinispan/cache/StorageImpl.java\n\nCo-authored-by: Cristiano Nicolai <cristiano.nicolai@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56b8c818a0747418a69cae89ba8df1efa9e58362", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/56b8c818a0747418a69cae89ba8df1efa9e58362", "committedDate": "2020-06-10T09:02:15Z", "message": "add enum marshaller to be fixed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8f255dcbd20bd01d8860819ca5a90dafdf3c204", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/b8f255dcbd20bd01d8860819ca5a90dafdf3c204", "committedDate": "2020-06-10T11:27:11Z", "message": "update poms, rename kogito.data-index.storage.type, optimize imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09c6481fcae228bb515e131025c8e08998b31c77", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/09c6481fcae228bb515e131025c8e08998b31c77", "committedDate": "2020-06-10T11:30:37Z", "message": "Merge branch 'KOGITO-2326-storage-abstraction' of https://github.com/r00ta/kogito-apps into KOGITO-2326-storage-abstraction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcb056c6586eef781ac09ba67fad5886a59e3418", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/bcb056c6586eef781ac09ba67fad5886a59e3418", "committedDate": "2020-06-10T11:32:58Z", "message": "create conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1ae2c5863d2acaeac0861ca90869b0b48b4a16f", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/f1ae2c5863d2acaeac0861ca90869b0b48b4a16f", "committedDate": "2020-06-10T11:48:39Z", "message": "fix CacheImpl history"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7998143eea7ab6ec19f9a3457d4a7d3c317ab268", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/7998143eea7ab6ec19f9a3457d4a7d3c317ab268", "committedDate": "2020-06-10T11:51:17Z", "message": "commit changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a86160b1314cf1d0eebc34f2f69fd9b1bd552b2", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/1a86160b1314cf1d0eebc34f2f69fd9b1bd552b2", "committedDate": "2020-06-10T12:02:02Z", "message": "create conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "906c4771e264406629a7f28d889e7c2b7bd6999f", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/906c4771e264406629a7f28d889e7c2b7bd6999f", "committedDate": "2020-06-10T12:05:59Z", "message": "recover CacheImpl history"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7c7338817aede05af7d0d58d41b3a7f62f29828", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/c7c7338817aede05af7d0d58d41b3a7f62f29828", "committedDate": "2020-06-10T12:07:52Z", "message": "move to StorageImpl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40b980c612dcea09d2185cf45f93709dacb93072", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/40b980c612dcea09d2185cf45f93709dacb93072", "committedDate": "2020-06-10T13:03:53Z", "message": "remove duplicated code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4f68f6173b43fc6d73a8c56898a5fd6dbcb9ce7", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/a4f68f6173b43fc6d73a8c56898a5fd6dbcb9ce7", "committedDate": "2020-06-10T13:11:48Z", "message": "create conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ec5a5a2a30448da89b8c364afc1fc50c6a24731", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/1ec5a5a2a30448da89b8c364afc1fc50c6a24731", "committedDate": "2020-06-10T13:28:24Z", "message": "remove StorageImpl without history"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90750c9cc73d9384d4ad311acf7d2f9306fa1f00", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/90750c9cc73d9384d4ad311acf7d2f9306fa1f00", "committedDate": "2020-06-10T13:28:50Z", "message": "add CacheImpl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2236ebed8f003f374043b12eda2b3663201e988", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/b2236ebed8f003f374043b12eda2b3663201e988", "committedDate": "2020-06-10T13:29:00Z", "message": "add CacheImpl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb7338fb58c693009f61e1fdb1727d52a715a38e", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/eb7338fb58c693009f61e1fdb1727d52a715a38e", "committedDate": "2020-06-10T13:29:28Z", "message": "update StorageImpl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bab731b435784816eeb62cc8c4e0401b7c3a629", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/1bab731b435784816eeb62cc8c4e0401b7c3a629", "committedDate": "2020-06-10T14:33:11Z", "message": "refactoring getDomainModelCache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c944dfd312dbd1ae3fd173f819d97da5083c8348", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/c944dfd312dbd1ae3fd173f819d97da5083c8348", "committedDate": "2020-06-10T15:07:15Z", "message": "refactoring getDomainModelCache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53b45befa614195b0cc82c44f7c3bb98e354a43f", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/53b45befa614195b0cc82c44f7c3bb98e354a43f", "committedDate": "2020-06-11T07:18:24Z", "message": "remove unused dependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd93797ed789c3af9c42a78cbadc83f1082f4a61", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/dd93797ed789c3af9c42a78cbadc83f1082f4a61", "committedDate": "2020-06-11T07:20:10Z", "message": "Update kogito-storage-commons/kogito-storage-commons-api/src/main/java/org/kie/kogito/storage/api/StorageService.java\n\nCo-authored-by: Cristiano Nicolai <cristiano.nicolai@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "636404b66c3da97642bd580aeabd8ad836571790", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/636404b66c3da97642bd580aeabd8ad836571790", "committedDate": "2020-06-11T07:20:48Z", "message": "Update data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/DataIndexStorageService.java\n\nCo-authored-by: Cristiano Nicolai <cristiano.nicolai@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0d2fe316cc9a82f3592650c61165562ad7003fc", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/a0d2fe316cc9a82f3592650c61165562ad7003fc", "committedDate": "2020-06-11T07:22:44Z", "message": "rename caches parameters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9aa40fc88152aab387e4ff0a95bdbaa45e6969b", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/d9aa40fc88152aab387e4ff0a95bdbaa45e6969b", "committedDate": "2020-06-11T08:02:32Z", "message": "rename kogito-storage-* with kogito-persistence-*"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdff17386ec269cb159191b989025779e0725f74", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/cdff17386ec269cb159191b989025779e0725f74", "committedDate": "2020-06-11T08:18:38Z", "message": "remove kogito prefix from persistence modules"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "86ffba1a88286e271d330d4ff60b4fb5d67bce0c", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/86ffba1a88286e271d330d4ff60b4fb5d67bce0c", "committedDate": "2020-06-11T13:35:45Z", "message": "Merge branch 'KOGITO-2326-storage-abstraction' into KOGITO-2275-trusty-storage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "04f910272bd9ae22c36fd59b90a3e9e3942455ac", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/04f910272bd9ae22c36fd59b90a3e9e3942455ac", "committedDate": "2020-06-11T13:42:58Z", "message": "rebase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ea8ad0b20ddf2e13b2f35c46c902ffc45af105c9", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/ea8ad0b20ddf2e13b2f35c46c902ffc45af105c9", "committedDate": "2020-06-11T14:57:26Z", "message": "update marshallers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c4cb307ce880bb913e2f1d353b25ba858042a14", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/0c4cb307ce880bb913e2f1d353b25ba858042a14", "committedDate": "2020-06-15T06:58:35Z", "message": "Merge remote-tracking branch 'upstream/master' into KOGITO-2275-trusty-storage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3090a3a3019c936455936205fbf941b93cb03304", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/3090a3a3019c936455936205fbf941b93cb03304", "committedDate": "2020-06-15T07:00:00Z", "message": "Merge remote-tracking branch 'upstream/master' into KOGITO-2326-storage-abstraction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1d0f9ad2e4dec9023501761f1bf1338e68f26425", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/1d0f9ad2e4dec9023501761f1bf1338e68f26425", "committedDate": "2020-06-15T07:05:52Z", "message": "Merge branch 'KOGITO-2326-storage-abstraction' into KOGITO-2275-trusty-storage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4b0423bbbfb1ff0155bde0bdd44663903bde24a", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/d4b0423bbbfb1ff0155bde0bdd44663903bde24a", "committedDate": "2020-06-15T08:44:49Z", "message": "add integration test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7de147dcbba8888e5fa97b3a47a93016f7eb175c", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/7de147dcbba8888e5fa97b3a47a93016f7eb175c", "committedDate": "2020-06-15T09:50:56Z", "message": "update readme"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54e3f7a5ff59169d7f0af7f27d87eb3719626fa2", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/54e3f7a5ff59169d7f0af7f27d87eb3719626fa2", "committedDate": "2020-06-15T12:07:41Z", "message": "remove unused ProtobufService in DataIndexStorageServiceImpl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a026505361e799831474654fbc4aabce009844b0", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/a026505361e799831474654fbc4aabce009844b0", "committedDate": "2020-06-15T14:46:20Z", "message": "fix code smells"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e30ec6608bec55fba6797e5971c37111830111e5", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/e30ec6608bec55fba6797e5971c37111830111e5", "committedDate": "2020-06-15T14:53:16Z", "message": "Provide the parametrized type in AttributeFilter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39d4447bb67aa711b2c4bc4825354da543007085", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/39d4447bb67aa711b2c4bc4825354da543007085", "committedDate": "2020-06-15T16:36:54Z", "message": "fix code smells"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "100b0795df49018fcc69786ab60c7fe0b8124b3c", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/100b0795df49018fcc69786ab60c7fe0b8124b3c", "committedDate": "2020-06-15T20:23:30Z", "message": "fix code smells"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4762c7a294fdee3f084518fd6aa50fc3b022743", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/c4762c7a294fdee3f084518fd6aa50fc3b022743", "committedDate": "2020-06-16T08:00:57Z", "message": "Merge branch 'KOGITO-2326-storage-abstraction' into KOGITO-2275-trusty-storage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "599517a8c825e3f8826b2e0a601c52f111dfb3d0", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/599517a8c825e3f8826b2e0a601c52f111dfb3d0", "committedDate": "2020-06-16T11:30:47Z", "message": "try enum marshaller"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63bcb5aa9edc423d3023b567c4a12205193a777c", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/63bcb5aa9edc423d3023b567c4a12205193a777c", "committedDate": "2020-06-16T15:31:11Z", "message": "refactoring infinispan resource test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1faecb6fea9d57ca09266ae45806949549b9e033", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/1faecb6fea9d57ca09266ae45806949549b9e033", "committedDate": "2020-06-17T09:20:05Z", "message": "refactoring and implementation of getDecisionById method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bfad2c3e2662c7998245275df6c4c5daa8040ad5", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/bfad2c3e2662c7998245275df6c4c5daa8040ad5", "committedDate": "2020-06-17T09:24:20Z", "message": "resolve conflicts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6858ce6357ed860641f079d521fe9ba5ffae58ca", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/6858ce6357ed860641f079d521fe9ba5ffae58ca", "committedDate": "2020-06-17T11:36:27Z", "message": "add v1/executions/decisions/{executionId} endpoint with tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "861eaebde3a84669370c5dd15c07f7d63c7e9590", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/861eaebde3a84669370c5dd15c07f7d63c7e9590", "committedDate": "2020-06-17T11:42:04Z", "message": "make tests public"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b679480ed564aecc6169404fe60df86e4a4c87b2", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/b679480ed564aecc6169404fe60df86e4a4c87b2", "committedDate": "2020-06-17T11:42:52Z", "message": "restore imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a2556d7a8cba7b10458a4ccf2598e52c4117dc1", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/9a2556d7a8cba7b10458a4ccf2598e52c4117dc1", "committedDate": "2020-06-17T11:52:49Z", "message": "remove unused dependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "577664039d8ac7b4d99f6782e84bbe4e31440f1a", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/577664039d8ac7b4d99f6782e84bbe4e31440f1a", "committedDate": "2020-06-17T12:16:48Z", "message": "update pom"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc08780f3e6bef266c87cdcfc2ead7d977d96216", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/dc08780f3e6bef266c87cdcfc2ead7d977d96216", "committedDate": "2020-06-18T08:40:46Z", "message": "rebase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "448d136db8f116bf1db5d2f3d55950b0fbddcdf1", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/448d136db8f116bf1db5d2f3d55950b0fbddcdf1", "committedDate": "2020-06-18T08:49:30Z", "message": "remove duplicated dependency"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "597ff4b3f25ed7616047c6c12acae409d22f7500", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/597ff4b3f25ed7616047c6c12acae409d22f7500", "committedDate": "2020-06-18T08:50:17Z", "message": "refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dce400f53370b07cbe676ad44ec43ef5ca827858", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/dce400f53370b07cbe676ad44ec43ef5ca827858", "committedDate": "2020-06-18T09:36:01Z", "message": "fix pom"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "538c6ad6b3fea89b6642cd1efca19fcdb21eeafe", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/538c6ad6b3fea89b6642cd1efca19fcdb21eeafe", "committedDate": "2020-06-18T10:06:01Z", "message": "run integration tests in pom and handle already existing elements with tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48115cb8a723b3f2b3589963a92f00d79d2d6072", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/48115cb8a723b3f2b3589963a92f00d79d2d6072", "committedDate": "2020-06-18T12:15:35Z", "message": "improve tests for non-existing decisions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1b9da9393067c686bb5b59eedf41752bc38e888d", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/1b9da9393067c686bb5b59eedf41752bc38e888d", "committedDate": "2020-06-18T12:17:29Z", "message": "fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07913931b150d926873916a9b33973f6d4297952", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/07913931b150d926873916a9b33973f6d4297952", "committedDate": "2020-06-18T12:20:19Z", "message": "optimize code quality"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8d9781c2f097b64bc095a3f7aeabe796b8d44185", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/8d9781c2f097b64bc095a3f7aeabe796b8d44185", "committedDate": "2020-06-19T11:31:23Z", "message": "fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "97a619f94282ce22a979cbb1c4811bb3c8e84d44", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/97a619f94282ce22a979cbb1c4811bb3c8e84d44", "committedDate": "2020-06-19T13:36:33Z", "message": "Merge remote-tracking branch 'upstream/master' into KOGITO-2275-trusty-storage"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NDUxODE2", "url": "https://github.com/kiegroup/kogito-apps/pull/273#pullrequestreview-434451816", "createdAt": "2020-06-20T20:25:25Z", "commit": {"oid": "97a619f94282ce22a979cbb1c4811bb3c8e84d44"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMDoyNToyNVrOGmoMFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMFQyMDo1NDozM1rOGmoS7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1NzUyNA==", "bodyText": "Is there any reason to use context classloader \"Thread.currentThread().getContextClassLoader()\" instead of \"this.getClass().getResourceAsStream()\".", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443157524", "createdAt": "2020-06-20T20:25:25Z", "author": {"login": "jiripetrlik"}, "path": "trusty/trusty-storage/trusty-storage-infinispan/src/main/java/org/kie/kogito/trusty/storage/infinispan/ProtostreamProducer.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.kie.kogito.trusty.storage.infinispan;\n+\n+import java.io.IOException;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Produces;\n+import javax.inject.Inject;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.infinispan.protostream.FileDescriptorSource;\n+import org.infinispan.protostream.MessageMarshaller;\n+\n+@ApplicationScoped\n+public class ProtostreamProducer {\n+\n+    @Inject\n+    ObjectMapper mapper;\n+\n+    @Produces\n+    FileDescriptorSource kogitoTypesDescriptor() throws IOException {\n+        FileDescriptorSource source = new FileDescriptorSource();\n+        source.addProtoFile(\"decision.proto\", Thread.currentThread().getContextClassLoader().getResourceAsStream(\"META-INF/decision.proto\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a619f94282ce22a979cbb1c4811bb3c8e84d44"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1Nzc0Mw==", "bodyText": "There is only a pom in this module. I would suggest to create Mongo implementation in a separate PR. By creating an empty Mongo module we probably make a false assumption that we implement it.", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443157743", "createdAt": "2020-06-20T20:28:46Z", "author": {"login": "jiripetrlik"}, "path": "trusty/trusty-storage/trusty-storage-mongo/pom.xml", "diffHunk": "@@ -0,0 +1,16 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a619f94282ce22a979cbb1c4811bb3c8e84d44"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1Nzg4OA==", "bodyText": "Please add missing license header.", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443157888", "createdAt": "2020-06-20T20:31:02Z", "author": {"login": "jiripetrlik"}, "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/mocks/StorageImplMock.java", "diffHunk": "@@ -0,0 +1,92 @@\n+package org.kie.kogito.trusty.service.mocks;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a619f94282ce22a979cbb1c4811bb3c8e84d44"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1Nzk0NQ==", "bodyText": "Please add missing license header.", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443157945", "createdAt": "2020-06-20T20:31:58Z", "author": {"login": "jiripetrlik"}, "path": "trusty/trusty-storage/trusty-storage-infinispan/src/main/java/org/kie/kogito/trusty/storage/infinispan/ProtostreamProducer.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.kie.kogito.trusty.storage.infinispan;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a619f94282ce22a979cbb1c4811bb3c8e84d44"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1ODA0OQ==", "bodyText": "Missing license header.", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443158049", "createdAt": "2020-06-20T20:33:52Z", "author": {"login": "jiripetrlik"}, "path": "trusty/trusty-storage/trusty-storage-api/src/main/java/org/kie/kogito/trusty/storage/api/TrustyStorageServiceImpl.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package org.kie.kogito.trusty.storage.api;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a619f94282ce22a979cbb1c4811bb3c8e84d44"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1ODA3NQ==", "bodyText": "Missing license header.", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443158075", "createdAt": "2020-06-20T20:34:21Z", "author": {"login": "jiripetrlik"}, "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/api/DecisionApiV1.java", "diffHunk": "@@ -0,0 +1,40 @@\n+package org.kie.kogito.trusty.service.api;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a619f94282ce22a979cbb1c4811bb3c8e84d44"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1ODMwMA==", "bodyText": "I would suggest to not use a capital letter as the first letter of the method.  Also do not use underline.", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443158300", "createdAt": "2020-06-20T20:37:50Z", "author": {"login": "jiripetrlik"}, "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/TrustyServiceTest.java", "diffHunk": "@@ -16,6 +16,92 @@\n \n package org.kie.kogito.trusty.service;\n \n+import java.time.OffsetDateTime;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.mockito.InjectMock;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.persistence.api.Storage;\n+import org.kie.kogito.persistence.api.query.Query;\n+import org.kie.kogito.persistence.infinispan.cache.StorageImpl;\n+import org.kie.kogito.trusty.service.mocks.StorageImplMock;\n+import org.kie.kogito.trusty.storage.api.TrustyStorageService;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.Execution;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@QuarkusTest\n public class TrustyServiceTest {\n \n+    @Inject\n+    TrustyService trustyService;\n+\n+    @InjectMock\n+    TrustyStorageService storageService;\n+\n+    @Test\n+    void GivenADecision_WhenStoreDecisionIsCalled_ThenNoExceptionsAreThrown() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a619f94282ce22a979cbb1c4811bb3c8e84d44"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1ODMwNA==", "bodyText": "I would suggest to not use a capital letter as the first letter of the method. Also do not use underline.", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443158304", "createdAt": "2020-06-20T20:37:56Z", "author": {"login": "jiripetrlik"}, "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/TrustyServiceTest.java", "diffHunk": "@@ -16,6 +16,92 @@\n \n package org.kie.kogito.trusty.service;\n \n+import java.time.OffsetDateTime;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.mockito.InjectMock;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.persistence.api.Storage;\n+import org.kie.kogito.persistence.api.query.Query;\n+import org.kie.kogito.persistence.infinispan.cache.StorageImpl;\n+import org.kie.kogito.trusty.service.mocks.StorageImplMock;\n+import org.kie.kogito.trusty.storage.api.TrustyStorageService;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.Execution;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@QuarkusTest\n public class TrustyServiceTest {\n \n+    @Inject\n+    TrustyService trustyService;\n+\n+    @InjectMock\n+    TrustyStorageService storageService;\n+\n+    @Test\n+    void GivenADecision_WhenStoreDecisionIsCalled_ThenNoExceptionsAreThrown() {\n+        Decision decision = new Decision();\n+        Storage storageMock = mock(Storage.class);\n+        when(storageMock.put(any(Object.class), any(Object.class))).thenReturn(decision);\n+\n+        when(storageService.getDecisionsStorage()).thenReturn(storageMock);\n+        Assertions.assertDoesNotThrow(() -> trustyService.storeDecision(\"test\", decision));\n+    }\n+\n+    @Test\n+    void GivenADecision_WhenADecisionIsStoredAndRetrieved_ThenTheOriginalObjectIsReturned() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a619f94282ce22a979cbb1c4811bb3c8e84d44"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1ODMxMA==", "bodyText": "I would suggest to not use a capital letter as the first letter of the method.  Also do not use underline.", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443158310", "createdAt": "2020-06-20T20:38:03Z", "author": {"login": "jiripetrlik"}, "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/TrustyServiceTest.java", "diffHunk": "@@ -16,6 +16,92 @@\n \n package org.kie.kogito.trusty.service;\n \n+import java.time.OffsetDateTime;\n+import java.util.HashMap;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.mockito.InjectMock;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.persistence.api.Storage;\n+import org.kie.kogito.persistence.api.query.Query;\n+import org.kie.kogito.persistence.infinispan.cache.StorageImpl;\n+import org.kie.kogito.trusty.service.mocks.StorageImplMock;\n+import org.kie.kogito.trusty.storage.api.TrustyStorageService;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.Execution;\n+import org.mockito.invocation.InvocationOnMock;\n+import org.mockito.stubbing.Answer;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.doAnswer;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@QuarkusTest\n public class TrustyServiceTest {\n \n+    @Inject\n+    TrustyService trustyService;\n+\n+    @InjectMock\n+    TrustyStorageService storageService;\n+\n+    @Test\n+    void GivenADecision_WhenStoreDecisionIsCalled_ThenNoExceptionsAreThrown() {\n+        Decision decision = new Decision();\n+        Storage storageMock = mock(Storage.class);\n+        when(storageMock.put(any(Object.class), any(Object.class))).thenReturn(decision);\n+\n+        when(storageService.getDecisionsStorage()).thenReturn(storageMock);\n+        Assertions.assertDoesNotThrow(() -> trustyService.storeDecision(\"test\", decision));\n+    }\n+\n+    @Test\n+    void GivenADecision_WhenADecisionIsStoredAndRetrieved_ThenTheOriginalObjectIsReturned() {\n+        String executionId = \"executionId\";\n+        Decision decision = new Decision();\n+        decision.setExecutionId(executionId);\n+\n+        Query queryMock = mock(Query.class);\n+        when(queryMock.filter(any(List.class))).thenReturn(queryMock);\n+        when(queryMock.limit(any(Integer.class))).thenReturn(queryMock);\n+        when(queryMock.offset(any(Integer.class))).thenReturn(queryMock);\n+        when(queryMock.execute()).thenReturn(List.of(decision));\n+\n+        Storage storageMock = mock(Storage.class);\n+        when(storageMock.put(eq(executionId), any(Object.class))).thenReturn(decision);\n+        when(storageMock.containsKey(eq(executionId))).thenReturn(false);\n+        when(storageMock.query()).thenReturn(queryMock);\n+\n+        when(storageService.getDecisionsStorage()).thenReturn(storageMock);\n+\n+        trustyService.storeDecision(\"executionId\", decision);\n+\n+        List<Execution> result = trustyService.getExecutionHeaders(OffsetDateTime.now().minusDays(1), OffsetDateTime.now(), 100, 0, \"\");\n+\n+        Assertions.assertEquals(1, result.size());\n+        Assertions.assertEquals(decision.getExecutionId(), result.get(0).getExecutionId());\n+    }\n+\n+    @Test\n+    void GivenADecision_WhenADecisionIsStoredAndRetrievedById_ThenTheOriginalObjectIsReturned() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a619f94282ce22a979cbb1c4811bb3c8e84d44"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1ODQyMA==", "bodyText": "I would suggest to not use a capital letter as the first letter of the method. Also do not use underline.", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443158420", "createdAt": "2020-06-20T20:40:09Z", "author": {"login": "jiripetrlik"}, "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/TrustyServiceIT.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.kie.kogito.trusty.service;\n+\n+import java.time.Instant;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.trusty.storage.api.TrustyStorageService;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.Execution;\n+\n+@QuarkusTest\n+@QuarkusTestResource(TrustyInfinispanServerTestResource.class)\n+public class TrustyServiceIT {\n+\n+    @Inject\n+    TrustyService trustyService;\n+\n+    @Inject\n+    TrustyStorageService trustyStorageService;\n+\n+    @BeforeEach\n+    public void setup() {\n+        trustyStorageService.getDecisionsStorage().clear();\n+    }\n+\n+    @Test\n+    public void testStoreAndRetrieveExecution() {\n+        storeExecution(\"myExecution\", 1591692958000L);\n+\n+        OffsetDateTime from = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692957000L), ZoneOffset.UTC);\n+        OffsetDateTime to = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692959000L), ZoneOffset.UTC);\n+        List<Execution> result = trustyService.getExecutionHeaders(from, to, 100, 0, \"\");\n+        Assertions.assertEquals(1, result.size());\n+        Assertions.assertEquals(\"myExecution\", result.get(0).getExecutionId());\n+    }\n+\n+    @Test\n+    public void GivenTwoExecutions_WhenTheQueryExcludesOneExecution_ThenOnlyOneExecutionIsReturned() {\n+        storeExecution(\"myExecution\", 1591692950000L);\n+        storeExecution(\"executionId2\", 1591692958000L);\n+\n+        OffsetDateTime from = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692940000L), ZoneOffset.UTC);\n+        OffsetDateTime to = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692955000L), ZoneOffset.UTC);\n+        List<Execution> result = trustyService.getExecutionHeaders(from, to, 100, 0, \"\");\n+        Assertions.assertEquals(1, result.size());\n+        Assertions.assertEquals(\"myExecution\", result.get(0).getExecutionId());\n+    }\n+\n+    @Test\n+    public void GivenTwoExecutions_WhenThePrefixIsUsed_ThenOnlyOneExecutionIsReturned() {\n+        storeExecution(\"myExecution\", 1591692950000L);\n+        storeExecution(\"executionId2\", 1591692958000L);\n+\n+        OffsetDateTime from = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692940000L), ZoneOffset.UTC);\n+        OffsetDateTime to = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692959000L), ZoneOffset.UTC);\n+        List<Execution> result = trustyService.getExecutionHeaders(from, to, 100, 0, \"my\");\n+        Assertions.assertEquals(1, result.size());\n+        Assertions.assertEquals(\"myExecution\", result.get(0).getExecutionId());\n+    }\n+\n+    @Test\n+    public void GivenAnExecution_WhenGetDecisionByIdIsCalled_ThenTheExecutionIsReturned() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a619f94282ce22a979cbb1c4811bb3c8e84d44"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1ODQyNg==", "bodyText": "I would suggest to not use a capital letter as the first letter of the method. Also do not use underline.", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443158426", "createdAt": "2020-06-20T20:40:14Z", "author": {"login": "jiripetrlik"}, "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/TrustyServiceIT.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.kie.kogito.trusty.service;\n+\n+import java.time.Instant;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.trusty.storage.api.TrustyStorageService;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.Execution;\n+\n+@QuarkusTest\n+@QuarkusTestResource(TrustyInfinispanServerTestResource.class)\n+public class TrustyServiceIT {\n+\n+    @Inject\n+    TrustyService trustyService;\n+\n+    @Inject\n+    TrustyStorageService trustyStorageService;\n+\n+    @BeforeEach\n+    public void setup() {\n+        trustyStorageService.getDecisionsStorage().clear();\n+    }\n+\n+    @Test\n+    public void testStoreAndRetrieveExecution() {\n+        storeExecution(\"myExecution\", 1591692958000L);\n+\n+        OffsetDateTime from = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692957000L), ZoneOffset.UTC);\n+        OffsetDateTime to = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692959000L), ZoneOffset.UTC);\n+        List<Execution> result = trustyService.getExecutionHeaders(from, to, 100, 0, \"\");\n+        Assertions.assertEquals(1, result.size());\n+        Assertions.assertEquals(\"myExecution\", result.get(0).getExecutionId());\n+    }\n+\n+    @Test\n+    public void GivenTwoExecutions_WhenTheQueryExcludesOneExecution_ThenOnlyOneExecutionIsReturned() {\n+        storeExecution(\"myExecution\", 1591692950000L);\n+        storeExecution(\"executionId2\", 1591692958000L);\n+\n+        OffsetDateTime from = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692940000L), ZoneOffset.UTC);\n+        OffsetDateTime to = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692955000L), ZoneOffset.UTC);\n+        List<Execution> result = trustyService.getExecutionHeaders(from, to, 100, 0, \"\");\n+        Assertions.assertEquals(1, result.size());\n+        Assertions.assertEquals(\"myExecution\", result.get(0).getExecutionId());\n+    }\n+\n+    @Test\n+    public void GivenTwoExecutions_WhenThePrefixIsUsed_ThenOnlyOneExecutionIsReturned() {\n+        storeExecution(\"myExecution\", 1591692950000L);\n+        storeExecution(\"executionId2\", 1591692958000L);\n+\n+        OffsetDateTime from = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692940000L), ZoneOffset.UTC);\n+        OffsetDateTime to = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692959000L), ZoneOffset.UTC);\n+        List<Execution> result = trustyService.getExecutionHeaders(from, to, 100, 0, \"my\");\n+        Assertions.assertEquals(1, result.size());\n+        Assertions.assertEquals(\"myExecution\", result.get(0).getExecutionId());\n+    }\n+\n+    @Test\n+    public void GivenAnExecution_WhenGetDecisionByIdIsCalled_ThenTheExecutionIsReturned() {\n+        String executionId = \"myExecution\";\n+        storeExecution(executionId, 1591692950000L);\n+\n+        Decision result = trustyService.getDecisionById(executionId);\n+        Assertions.assertEquals(executionId, result.getExecutionId());\n+    }\n+\n+    @Test\n+    public void GivenADuplicatedDecision_WhenTheDecisionIsStored_ThenAnExceptionIsRaised() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a619f94282ce22a979cbb1c4811bb3c8e84d44"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1ODQzMQ==", "bodyText": "I would suggest to not use a capital letter as the first letter of the method. Also do not use underline.", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443158431", "createdAt": "2020-06-20T20:40:21Z", "author": {"login": "jiripetrlik"}, "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/TrustyServiceIT.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.kie.kogito.trusty.service;\n+\n+import java.time.Instant;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.trusty.storage.api.TrustyStorageService;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.Execution;\n+\n+@QuarkusTest\n+@QuarkusTestResource(TrustyInfinispanServerTestResource.class)\n+public class TrustyServiceIT {\n+\n+    @Inject\n+    TrustyService trustyService;\n+\n+    @Inject\n+    TrustyStorageService trustyStorageService;\n+\n+    @BeforeEach\n+    public void setup() {\n+        trustyStorageService.getDecisionsStorage().clear();\n+    }\n+\n+    @Test\n+    public void testStoreAndRetrieveExecution() {\n+        storeExecution(\"myExecution\", 1591692958000L);\n+\n+        OffsetDateTime from = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692957000L), ZoneOffset.UTC);\n+        OffsetDateTime to = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692959000L), ZoneOffset.UTC);\n+        List<Execution> result = trustyService.getExecutionHeaders(from, to, 100, 0, \"\");\n+        Assertions.assertEquals(1, result.size());\n+        Assertions.assertEquals(\"myExecution\", result.get(0).getExecutionId());\n+    }\n+\n+    @Test\n+    public void GivenTwoExecutions_WhenTheQueryExcludesOneExecution_ThenOnlyOneExecutionIsReturned() {\n+        storeExecution(\"myExecution\", 1591692950000L);\n+        storeExecution(\"executionId2\", 1591692958000L);\n+\n+        OffsetDateTime from = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692940000L), ZoneOffset.UTC);\n+        OffsetDateTime to = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692955000L), ZoneOffset.UTC);\n+        List<Execution> result = trustyService.getExecutionHeaders(from, to, 100, 0, \"\");\n+        Assertions.assertEquals(1, result.size());\n+        Assertions.assertEquals(\"myExecution\", result.get(0).getExecutionId());\n+    }\n+\n+    @Test\n+    public void GivenTwoExecutions_WhenThePrefixIsUsed_ThenOnlyOneExecutionIsReturned() {\n+        storeExecution(\"myExecution\", 1591692950000L);\n+        storeExecution(\"executionId2\", 1591692958000L);\n+\n+        OffsetDateTime from = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692940000L), ZoneOffset.UTC);\n+        OffsetDateTime to = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692959000L), ZoneOffset.UTC);\n+        List<Execution> result = trustyService.getExecutionHeaders(from, to, 100, 0, \"my\");\n+        Assertions.assertEquals(1, result.size());\n+        Assertions.assertEquals(\"myExecution\", result.get(0).getExecutionId());\n+    }\n+\n+    @Test\n+    public void GivenAnExecution_WhenGetDecisionByIdIsCalled_ThenTheExecutionIsReturned() {\n+        String executionId = \"myExecution\";\n+        storeExecution(executionId, 1591692950000L);\n+\n+        Decision result = trustyService.getDecisionById(executionId);\n+        Assertions.assertEquals(executionId, result.getExecutionId());\n+    }\n+\n+    @Test\n+    public void GivenADuplicatedDecision_WhenTheDecisionIsStored_ThenAnExceptionIsRaised() {\n+        String executionId = \"myExecution\";\n+        storeExecution(executionId, 1591692950000L);\n+        Assertions.assertThrows(IllegalArgumentException.class, () -> storeExecution(executionId, 1591692950000L));\n+    }\n+\n+    @Test\n+    public void GivenNoExecutions_WhenADecisionIsRetrieved_ThenAnExceptionIsRaised() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a619f94282ce22a979cbb1c4811bb3c8e84d44"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1ODQ1MQ==", "bodyText": "I would suggest to not use a capital letter as the first letter of the method. Also do not use underline.", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443158451", "createdAt": "2020-06-20T20:40:35Z", "author": {"login": "jiripetrlik"}, "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/TrustyServiceIT.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.kie.kogito.trusty.service;\n+\n+import java.time.Instant;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.trusty.storage.api.TrustyStorageService;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.Execution;\n+\n+@QuarkusTest\n+@QuarkusTestResource(TrustyInfinispanServerTestResource.class)\n+public class TrustyServiceIT {\n+\n+    @Inject\n+    TrustyService trustyService;\n+\n+    @Inject\n+    TrustyStorageService trustyStorageService;\n+\n+    @BeforeEach\n+    public void setup() {\n+        trustyStorageService.getDecisionsStorage().clear();\n+    }\n+\n+    @Test\n+    public void testStoreAndRetrieveExecution() {\n+        storeExecution(\"myExecution\", 1591692958000L);\n+\n+        OffsetDateTime from = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692957000L), ZoneOffset.UTC);\n+        OffsetDateTime to = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692959000L), ZoneOffset.UTC);\n+        List<Execution> result = trustyService.getExecutionHeaders(from, to, 100, 0, \"\");\n+        Assertions.assertEquals(1, result.size());\n+        Assertions.assertEquals(\"myExecution\", result.get(0).getExecutionId());\n+    }\n+\n+    @Test\n+    public void GivenTwoExecutions_WhenTheQueryExcludesOneExecution_ThenOnlyOneExecutionIsReturned() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a619f94282ce22a979cbb1c4811bb3c8e84d44"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1ODQ2OA==", "bodyText": "I would suggest to not use a capital letter as the first letter of the method. Also do not use underline.", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443158468", "createdAt": "2020-06-20T20:40:42Z", "author": {"login": "jiripetrlik"}, "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/TrustyServiceIT.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.kie.kogito.trusty.service;\n+\n+import java.time.Instant;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.trusty.storage.api.TrustyStorageService;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.Execution;\n+\n+@QuarkusTest\n+@QuarkusTestResource(TrustyInfinispanServerTestResource.class)\n+public class TrustyServiceIT {\n+\n+    @Inject\n+    TrustyService trustyService;\n+\n+    @Inject\n+    TrustyStorageService trustyStorageService;\n+\n+    @BeforeEach\n+    public void setup() {\n+        trustyStorageService.getDecisionsStorage().clear();\n+    }\n+\n+    @Test\n+    public void testStoreAndRetrieveExecution() {\n+        storeExecution(\"myExecution\", 1591692958000L);\n+\n+        OffsetDateTime from = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692957000L), ZoneOffset.UTC);\n+        OffsetDateTime to = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692959000L), ZoneOffset.UTC);\n+        List<Execution> result = trustyService.getExecutionHeaders(from, to, 100, 0, \"\");\n+        Assertions.assertEquals(1, result.size());\n+        Assertions.assertEquals(\"myExecution\", result.get(0).getExecutionId());\n+    }\n+\n+    @Test\n+    public void GivenTwoExecutions_WhenTheQueryExcludesOneExecution_ThenOnlyOneExecutionIsReturned() {\n+        storeExecution(\"myExecution\", 1591692950000L);\n+        storeExecution(\"executionId2\", 1591692958000L);\n+\n+        OffsetDateTime from = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692940000L), ZoneOffset.UTC);\n+        OffsetDateTime to = OffsetDateTime.ofInstant(Instant.ofEpochMilli(1591692955000L), ZoneOffset.UTC);\n+        List<Execution> result = trustyService.getExecutionHeaders(from, to, 100, 0, \"\");\n+        Assertions.assertEquals(1, result.size());\n+        Assertions.assertEquals(\"myExecution\", result.get(0).getExecutionId());\n+    }\n+\n+    @Test\n+    public void GivenTwoExecutions_WhenThePrefixIsUsed_ThenOnlyOneExecutionIsReturned() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a619f94282ce22a979cbb1c4811bb3c8e84d44"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1ODYzNg==", "bodyText": "License header is missing.", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443158636", "createdAt": "2020-06-20T20:43:31Z", "author": {"login": "jiripetrlik"}, "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/TrustyServiceIT.java", "diffHunk": "@@ -0,0 +1,98 @@\n+package org.kie.kogito.trusty.service;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a619f94282ce22a979cbb1c4811bb3c8e84d44"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1ODY1Mg==", "bodyText": "License header is missing.", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443158652", "createdAt": "2020-06-20T20:43:45Z", "author": {"login": "jiripetrlik"}, "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/TrustyInfinispanServerTestResource.java", "diffHunk": "@@ -0,0 +1,11 @@\n+package org.kie.kogito.trusty.service;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a619f94282ce22a979cbb1c4811bb3c8e84d44"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1ODY3NA==", "bodyText": "License header is missing.", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443158674", "createdAt": "2020-06-20T20:44:03Z", "author": {"login": "jiripetrlik"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/api/DecisionsApiV1.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package org.kie.kogito.trusty.service.api;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a619f94282ce22a979cbb1c4811bb3c8e84d44"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1OTA2Mg==", "bodyText": "It seems that this logger is not used.", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443159062", "createdAt": "2020-06-20T20:50:54Z", "author": {"login": "jiripetrlik"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/api/DecisionsApiV1.java", "diffHunk": "@@ -0,0 +1,58 @@\n+package org.kie.kogito.trusty.service.api;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.eclipse.microprofile.openapi.annotations.Operation;\n+import org.eclipse.microprofile.openapi.annotations.enums.SchemaType;\n+import org.eclipse.microprofile.openapi.annotations.media.Content;\n+import org.eclipse.microprofile.openapi.annotations.media.Schema;\n+import org.eclipse.microprofile.openapi.annotations.parameters.Parameter;\n+import org.eclipse.microprofile.openapi.annotations.responses.APIResponse;\n+import org.eclipse.microprofile.openapi.annotations.responses.APIResponses;\n+import org.jboss.resteasy.annotations.jaxrs.PathParam;\n+import org.kie.kogito.trusty.service.ITrustyService;\n+import org.kie.kogito.trusty.service.responses.ExecutionHeaderResponse;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Path(\"v1/executions/decisions\")\n+public class DecisionsApiV1 {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(DecisionsApiV1.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a619f94282ce22a979cbb1c4811bb3c8e84d44"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1OTE5NA==", "bodyText": "MessageMarshaller is deprecated according to Sonar cloud.", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443159194", "createdAt": "2020-06-20T20:53:11Z", "author": {"login": "jiripetrlik"}, "path": "trusty/trusty-storage/trusty-storage-infinispan/src/main/java/org/kie/kogito/trusty/storage/infinispan/DecisionMarshaller.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package org.kie.kogito.trusty.storage.infinispan;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.infinispan.protostream.MessageMarshaller;\n+import org.kie.kogito.persistence.infinispan.protostream.AbstractMarshaller;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.ExecutionTypeEnum;\n+\n+public class DecisionMarshaller extends AbstractMarshaller implements MessageMarshaller<Decision> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a619f94282ce22a979cbb1c4811bb3c8e84d44"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1OTIxNg==", "bodyText": "Missing license header.", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443159216", "createdAt": "2020-06-20T20:53:29Z", "author": {"login": "jiripetrlik"}, "path": "trusty/trusty-storage/trusty-storage-infinispan/src/main/java/org/kie/kogito/trusty/storage/infinispan/DecisionMarshaller.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package org.kie.kogito.trusty.storage.infinispan;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a619f94282ce22a979cbb1c4811bb3c8e84d44"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzE1OTI3Ng==", "bodyText": "MessageMarshaller is deprecated according to Sonar cloud.", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443159276", "createdAt": "2020-06-20T20:54:33Z", "author": {"login": "jiripetrlik"}, "path": "trusty/trusty-storage/trusty-storage-infinispan/src/main/java/org/kie/kogito/trusty/storage/infinispan/ProtostreamProducer.java", "diffHunk": "@@ -0,0 +1,30 @@\n+package org.kie.kogito.trusty.storage.infinispan;\n+\n+import java.io.IOException;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Produces;\n+import javax.inject.Inject;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.infinispan.protostream.FileDescriptorSource;\n+import org.infinispan.protostream.MessageMarshaller;\n+\n+@ApplicationScoped\n+public class ProtostreamProducer {\n+\n+    @Inject\n+    ObjectMapper mapper;\n+\n+    @Produces\n+    FileDescriptorSource kogitoTypesDescriptor() throws IOException {\n+        FileDescriptorSource source = new FileDescriptorSource();\n+        source.addProtoFile(\"decision.proto\", Thread.currentThread().getContextClassLoader().getResourceAsStream(\"META-INF/decision.proto\"));\n+        return source;\n+    }\n+\n+    @Produces\n+    MessageMarshaller decisionMarshaller() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "97a619f94282ce22a979cbb1c4811bb3c8e84d44"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d10a2a8e7375518f6c3699b66107fc820616953", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/0d10a2a8e7375518f6c3699b66107fc820616953", "committedDate": "2020-06-22T07:16:48Z", "message": "add licence headers, rename tests, optimize imports, remove empty mongo module"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzMDk2Mjk5", "url": "https://github.com/kiegroup/kogito-apps/pull/273#pullrequestreview-433096299", "createdAt": "2020-06-18T09:18:33Z", "commit": {"oid": "597ff4b3f25ed7616047c6c12acae409d22f7500"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwOToxODozM1rOGlm7GA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMzoxNzo0NlrOGnALLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA4ODIxNg==", "bodyText": "Is this file needed?", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r442088216", "createdAt": "2020-06-18T09:18:33Z", "author": {"login": "danielezonca"}, "path": "trusty/trusty-service/src/main/resources/META-INF/kogito-cache-default.xml", "diffHunk": "@@ -0,0 +1,14 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "597ff4b3f25ed7616047c6c12acae409d22f7500"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ0MjYyMQ==", "bodyText": "Can you move strings to a constant class?", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443442621", "createdAt": "2020-06-22T09:48:43Z", "author": {"login": "danielezonca"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/TrustyService.java", "diffHunk": "@@ -17,25 +17,50 @@\n package org.kie.kogito.trusty.service;\n \n import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n import java.util.List;\n \n import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n \n-import org.jboss.resteasy.spi.NotImplementedYetException;\n-import org.kie.kogito.trusty.service.models.Execution;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import org.kie.kogito.persistence.api.Storage;\n+import org.kie.kogito.persistence.api.query.AttributeFilter;\n+import org.kie.kogito.persistence.api.query.QueryFilterFactory;\n+import org.kie.kogito.trusty.storage.api.TrustyStorageService;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.Execution;\n \n @ApplicationScoped\n public class TrustyService implements ITrustyService {\n \n+    @Inject\n+    TrustyStorageService storageService;\n+\n     @Override\n     public List<Execution> getExecutionHeaders(OffsetDateTime from, OffsetDateTime to, int limit, int offset, String prefix) {\n-        throw new NotImplementedYetException(\"Not implemented yet.\");\n+        Storage<String, Decision> storage = storageService.getDecisionsStorage();\n+        List<AttributeFilter<?>> filters = new ArrayList<>();\n+        filters.add(QueryFilterFactory.like(\"executionId\", prefix + \"*\"));\n+        filters.add(QueryFilterFactory.greaterThanEqual(\"executionTimestamp\", from.toInstant().toEpochMilli()));\n+        filters.add(QueryFilterFactory.lessThanEqual(\"executionTimestamp\", to.toInstant().toEpochMilli()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d10a2a8e7375518f6c3699b66107fc820616953"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ0MzE2NQ==", "bodyText": "Are you sure of this behavior? Don't we want to support update?", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443443165", "createdAt": "2020-06-22T09:49:43Z", "author": {"login": "danielezonca"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/TrustyService.java", "diffHunk": "@@ -17,25 +17,50 @@\n package org.kie.kogito.trusty.service;\n \n import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n import java.util.List;\n \n import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n \n-import org.jboss.resteasy.spi.NotImplementedYetException;\n-import org.kie.kogito.trusty.service.models.Execution;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n+import org.kie.kogito.persistence.api.Storage;\n+import org.kie.kogito.persistence.api.query.AttributeFilter;\n+import org.kie.kogito.persistence.api.query.QueryFilterFactory;\n+import org.kie.kogito.trusty.storage.api.TrustyStorageService;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.Execution;\n \n @ApplicationScoped\n public class TrustyService implements ITrustyService {\n \n+    @Inject\n+    TrustyStorageService storageService;\n+\n     @Override\n     public List<Execution> getExecutionHeaders(OffsetDateTime from, OffsetDateTime to, int limit, int offset, String prefix) {\n-        throw new NotImplementedYetException(\"Not implemented yet.\");\n+        Storage<String, Decision> storage = storageService.getDecisionsStorage();\n+        List<AttributeFilter<?>> filters = new ArrayList<>();\n+        filters.add(QueryFilterFactory.like(\"executionId\", prefix + \"*\"));\n+        filters.add(QueryFilterFactory.greaterThanEqual(\"executionTimestamp\", from.toInstant().toEpochMilli()));\n+        filters.add(QueryFilterFactory.lessThanEqual(\"executionTimestamp\", to.toInstant().toEpochMilli()));\n+        return new ArrayList<>(storage.query().limit(limit).offset(offset).filter(filters).execute());\n+    }\n+\n+    @Override\n+    public Decision getDecisionById(String executionId) {\n+        Storage<String, Decision> storage = storageService.getDecisionsStorage();\n+        if (!storage.containsKey(executionId)) {\n+            throw new IllegalArgumentException(String.format(\"A decision with ID %s does not exist in the storage.\", executionId));\n+        }\n+        return storage.get(executionId);\n     }\n \n     @Override\n-    public void storeExecution(String executionId, Execution execution) {\n-        throw new NotImplementedYetException(\"Not implemented yet.\");\n+    public void storeDecision(String executionId, Decision decision) {\n+        Storage<String, Decision> storage = storageService.getDecisionsStorage();\n+        if (storage.containsKey(executionId)) {\n+            throw new IllegalArgumentException(String.format(\"A decision with ID %s is already present in the storage.\", executionId));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d10a2a8e7375518f6c3699b66107fc820616953"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ0NTIxNw==", "bodyText": "I would prefer to get error message from ex.getMessage() otherwise it is possible to \"hide\" the real error message with this new string", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443445217", "createdAt": "2020-06-22T09:53:11Z", "author": {"login": "danielezonca"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/api/DecisionsApiV1.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.api;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.eclipse.microprofile.openapi.annotations.Operation;\n+import org.eclipse.microprofile.openapi.annotations.enums.SchemaType;\n+import org.eclipse.microprofile.openapi.annotations.media.Content;\n+import org.eclipse.microprofile.openapi.annotations.media.Schema;\n+import org.eclipse.microprofile.openapi.annotations.parameters.Parameter;\n+import org.eclipse.microprofile.openapi.annotations.responses.APIResponse;\n+import org.eclipse.microprofile.openapi.annotations.responses.APIResponses;\n+import org.jboss.resteasy.annotations.jaxrs.PathParam;\n+import org.kie.kogito.trusty.service.ITrustyService;\n+import org.kie.kogito.trusty.service.responses.ExecutionHeaderResponse;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+\n+@Path(\"v1/executions/decisions\")\n+public class DecisionsApiV1 {\n+\n+    @Inject\n+    ITrustyService trustyService;\n+\n+    @GET\n+    @Path(\"/{key}\")\n+    @APIResponses(value = {\n+            @APIResponse(description = \"Gets the decision detail header.\", responseCode = \"200\", content = @Content(mediaType = MediaType.APPLICATION_JSON, schema = @Schema(type = SchemaType.OBJECT, implementation = ExecutionHeaderResponse.class))),\n+            @APIResponse(description = \"Bad Request\", responseCode = \"400\", content = @Content(mediaType = MediaType.TEXT_PLAIN))\n+    }\n+    )\n+    @Operation(summary = \"Gets The decision header with details.\", description = \"Gets the decision detail header.\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Response getExecutionById(\n+            @Parameter(\n+                    name = \"executionId\",\n+                    description = \"The execution ID.\",\n+                    required = true,\n+                    schema = @Schema(implementation = String.class)\n+            ) @PathParam(\"executionId\") String executionId) {\n+\n+        Decision decision;\n+        try {\n+            decision = trustyService.getDecisionById(executionId);\n+        } catch (IllegalArgumentException ex) {\n+            return Response.status(Response.Status.BAD_REQUEST.getStatusCode(), String.format(\"Execution with ID %s does not exist in the storage.\", executionId)).build();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d10a2a8e7375518f6c3699b66107fc820616953"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzUwNjg5NQ==", "bodyText": "If you are not using REST api nor using many injections, you can probably use a plain unit test without QuarkusTest.\nI would suggest you to create a constructor in TrustyService that accept TrustyStorageService and move @Inject annotation directly on the constructor.\nIn this way you can easily instantiate the service in a @Before method using a mock, a mocked implementation or the real instance with better control.\nWdyt?", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443506895", "createdAt": "2020-06-22T11:58:11Z", "author": {"login": "danielezonca"}, "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/TrustyServiceTest.java", "diffHunk": "@@ -16,6 +16,87 @@\n \n package org.kie.kogito.trusty.service;\n \n+import java.time.OffsetDateTime;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.mockito.InjectMock;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.persistence.api.Storage;\n+import org.kie.kogito.persistence.api.query.Query;\n+import org.kie.kogito.trusty.service.mocks.StorageImplMock;\n+import org.kie.kogito.trusty.storage.api.TrustyStorageService;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.Execution;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@QuarkusTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d10a2a8e7375518f6c3699b66107fc820616953"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU0NTE3OQ==", "bodyText": "Side note related to this class: if you really want to test TrustyStorageService and TrustyService in two different classes you should try to properly split test logic: most (all?) the logic is inside TrustyStorageService so here you should probably just verify (using Mockito) that method A is invoking method B etc.\nThe risk is to test the implementation and/or test the mock logic you just defined.\nI think it could be better to have a single test class to cover the logic of both. Wdyt?", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443545179", "createdAt": "2020-06-22T13:08:45Z", "author": {"login": "danielezonca"}, "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/TrustyServiceTest.java", "diffHunk": "@@ -16,6 +16,87 @@\n \n package org.kie.kogito.trusty.service;\n \n+import java.time.OffsetDateTime;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.mockito.InjectMock;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.persistence.api.Storage;\n+import org.kie.kogito.persistence.api.query.Query;\n+import org.kie.kogito.trusty.service.mocks.StorageImplMock;\n+import org.kie.kogito.trusty.storage.api.TrustyStorageService;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.Execution;\n+\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+@QuarkusTest\n public class TrustyServiceTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d10a2a8e7375518f6c3699b66107fc820616953"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU0NjExMA==", "bodyText": "Is this needed? Are we using infinispan in any test?", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443546110", "createdAt": "2020-06-22T13:10:19Z", "author": {"login": "danielezonca"}, "path": "trusty/trusty-service/src/test/resources/application.properties", "diffHunk": "@@ -0,0 +1,10 @@\n+# Infinispan", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d10a2a8e7375518f6c3699b66107fc820616953"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU0NjU5Mg==", "bodyText": "Are them used?", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443546592", "createdAt": "2020-06-22T13:11:10Z", "author": {"login": "danielezonca"}, "path": "trusty/trusty-storage/trusty-storage-api/pom.xml", "diffHunk": "@@ -0,0 +1,30 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>trusty-storage</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>trusty-storage-api</artifactId>\n+  <name>Kogito :: Trusty Storage API</name>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>persistence-commons-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.core</groupId>\n+      <artifactId>jackson-databind</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.core</groupId>\n+      <artifactId>jackson-annotations</artifactId>\n+    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d10a2a8e7375518f6c3699b66107fc820616953"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU1MDQyNA==", "bodyText": "Can you please add a test to verify that all fields of Decision are covered (if possible use a mechanism that dynamically takes methods from Decision so that if we add a field the test fails", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443550424", "createdAt": "2020-06-22T13:17:38Z", "author": {"login": "danielezonca"}, "path": "trusty/trusty-storage/trusty-storage-infinispan/src/main/java/org/kie/kogito/trusty/storage/infinispan/DecisionMarshaller.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.storage.infinispan;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.infinispan.protostream.MessageMarshaller;\n+import org.kie.kogito.persistence.infinispan.protostream.AbstractMarshaller;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.ExecutionTypeEnum;\n+\n+public class DecisionMarshaller extends AbstractMarshaller implements MessageMarshaller<Decision> {\n+\n+    private static final ObjectMapper myMapper = new ObjectMapper();\n+\n+    public DecisionMarshaller(ObjectMapper mapper) {\n+        super(mapper);\n+    }\n+\n+    @Override\n+    public Decision readFrom(ProtoStreamReader reader) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d10a2a8e7375518f6c3699b66107fc820616953"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzU1MDUxMA==", "bodyText": "Same as above", "url": "https://github.com/kiegroup/kogito-apps/pull/273#discussion_r443550510", "createdAt": "2020-06-22T13:17:46Z", "author": {"login": "danielezonca"}, "path": "trusty/trusty-storage/trusty-storage-infinispan/src/main/java/org/kie/kogito/trusty/storage/infinispan/DecisionMarshaller.java", "diffHunk": "@@ -0,0 +1,68 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.storage.infinispan;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.infinispan.protostream.MessageMarshaller;\n+import org.kie.kogito.persistence.infinispan.protostream.AbstractMarshaller;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.ExecutionTypeEnum;\n+\n+public class DecisionMarshaller extends AbstractMarshaller implements MessageMarshaller<Decision> {\n+\n+    private static final ObjectMapper myMapper = new ObjectMapper();\n+\n+    public DecisionMarshaller(ObjectMapper mapper) {\n+        super(mapper);\n+    }\n+\n+    @Override\n+    public Decision readFrom(ProtoStreamReader reader) throws IOException {\n+        Decision result = new Decision();\n+\n+        result.setExecutionId(reader.readString(\"executionId\"));\n+        result.setExecutionTimestamp(reader.readLong(\"executionTimestamp\"));\n+        result.setSuccess(reader.readBoolean(\"hasSucceeded\"));\n+        result.setExecutorName(reader.readString(\"executorName\"));\n+        result.setExecutedModelName(reader.readString(\"executedModelName\"));\n+        result.setExecutionType(myMapper.readValue(reader.readString(\"executionType\"), ExecutionTypeEnum.class));\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public void writeTo(ProtoStreamWriter writer, Decision result) throws IOException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0d10a2a8e7375518f6c3699b66107fc820616953"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8fab37617fcfef35b38ddf0d2d86662a33a906cd", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/8fab37617fcfef35b38ddf0d2d86662a33a906cd", "committedDate": "2020-06-23T08:28:16Z", "message": "implement protostream tests, create constants, move cache config, change return message api, remove unused dependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "36d3cf8a7c8ad4318e1c3005a9492fd0b036c4c2", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/36d3cf8a7c8ad4318e1c3005a9492fd0b036c4c2", "committedDate": "2020-06-23T11:41:04Z", "message": "test mapping Decision-Marshaller, improve CDI of TrustyService, implement update method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56c259be54f3b4c00f762bc145ecb6ac02ad5ffa", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/56c259be54f3b4c00f762bc145ecb6ac02ad5ffa", "committedDate": "2020-06-23T11:46:20Z", "message": "fix sonarcloud"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9780ad8594abbabc53f4d9d1a21492d15bffab88", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/9780ad8594abbabc53f4d9d1a21492d15bffab88", "committedDate": "2020-06-23T11:48:39Z", "message": "rename DecisionApiV1 test class"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4235f0a0e166502e9f4690a16604d0f977aa5b6f", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/4235f0a0e166502e9f4690a16604d0f977aa5b6f", "committedDate": "2020-06-23T14:41:28Z", "message": "fix tests"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 125, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}