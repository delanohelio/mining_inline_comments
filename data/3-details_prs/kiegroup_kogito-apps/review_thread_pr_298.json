{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxMDMyNDIx", "number": 298, "reviewThreads": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjo0OToyOVrOEJpJsg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTo0NToxOVrOEKKOeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTQ2ODY2OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerTable/DomainExplorerTable.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjo0OToyOVrOGqPWbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNjoyMToyNlrOGqYg3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk0NDg3OQ==", "bodyText": "I think we can simplify the text, and we should make \"Manage columns\" a link. \"Manage columns to see content\"", "url": "https://github.com/kiegroup/kogito-apps/pull/298#discussion_r446944879", "createdAt": "2020-06-29T12:49:29Z", "author": {"login": "srambach"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -330,7 +331,7 @@ const DomainExplorerTable = ({\n                   No columns selected\n                 </Title>\n                 <EmptyStateBody>\n-                  Select columns from the dropdown to see content\n+                  Select columns from Manage Columns to see content", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09817e33f97bc64dda389c151a882a0819207615"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA5NTAwNA==", "bodyText": "this is done", "url": "https://github.com/kiegroup/kogito-apps/pull/298#discussion_r447095004", "createdAt": "2020-06-29T16:21:26Z", "author": {"login": "Sara4994"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -330,7 +331,7 @@ const DomainExplorerTable = ({\n                   No columns selected\n                 </Title>\n                 <EmptyStateBody>\n-                  Select columns from the dropdown to see content\n+                  Select columns from Manage Columns to see content", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk0NDg3OQ=="}, "originalCommit": {"oid": "09817e33f97bc64dda389c151a882a0819207615"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTU2MTYwOnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerManageColumns/DomainExplorerManageColumns.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzoxMToyNlrOGqQN3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNTo0NzowOVrOGqXG6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1OTA3MQ==", "bodyText": "This should match the id of the label for the checkbox. This is important for screen readers to know what to read out for the checkbox.", "url": "https://github.com/kiegroup/kogito-apps/pull/298#discussion_r446959071", "createdAt": "2020-06-29T13:11:26Z", "author": {"login": "srambach"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerManageColumns/DomainExplorerManageColumns.tsx", "diffHunk": "@@ -300,40 +189,107 @@ const DomainExplorerManageColumns: React.FC<IOwnProps> = ({\n                   return item;\n                 }\n               })\n-              .map(item => (\n-                <SelectOption\n-                  key={Math.random()}\n-                  value={item.name + title + group.name}\n-                >\n-                  {item.name}\n-                </SelectOption>\n-              ))}\n-          </SelectGroup>\n+              .map((item, _index) => {\n+                allSelections.push(item.name + '/' + title + '/' + group.name);\n+                return (\n+                  <DataListContent\n+                    aria-label=\"Primary Content Details\"\n+                    id=\"ex-expand1\"\n+                    isHidden={!expanded.includes(label.replace(/\\,/g, ''))}\n+                    className=\"kogito-common--manage-columns__data-list-content\"\n+                    key={Math.random()}\n+                  >\n+                    <DataListItemRow>\n+                      <DataListCheck\n+                        aria-labelledby=\"table-column-management-item2\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09817e33f97bc64dda389c151a882a0819207615"}, "originalPosition": 357}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA3MTk3Nw==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/298#discussion_r447071977", "createdAt": "2020-06-29T15:47:09Z", "author": {"login": "Sara4994"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerManageColumns/DomainExplorerManageColumns.tsx", "diffHunk": "@@ -300,40 +189,107 @@ const DomainExplorerManageColumns: React.FC<IOwnProps> = ({\n                   return item;\n                 }\n               })\n-              .map(item => (\n-                <SelectOption\n-                  key={Math.random()}\n-                  value={item.name + title + group.name}\n-                >\n-                  {item.name}\n-                </SelectOption>\n-              ))}\n-          </SelectGroup>\n+              .map((item, _index) => {\n+                allSelections.push(item.name + '/' + title + '/' + group.name);\n+                return (\n+                  <DataListContent\n+                    aria-label=\"Primary Content Details\"\n+                    id=\"ex-expand1\"\n+                    isHidden={!expanded.includes(label.replace(/\\,/g, ''))}\n+                    className=\"kogito-common--manage-columns__data-list-content\"\n+                    key={Math.random()}\n+                  >\n+                    <DataListItemRow>\n+                      <DataListCheck\n+                        aria-labelledby=\"table-column-management-item2\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1OTA3MQ=="}, "originalCommit": {"oid": "09817e33f97bc64dda389c151a882a0819207615"}, "originalPosition": 357}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTU3MzM0OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerManageColumns/DomainExplorerManageColumns.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzoxNDowM1rOGqQU6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzoxNDowM1rOGqQU6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk2MDg3Mg==", "bodyText": "ids need to be unique.", "url": "https://github.com/kiegroup/kogito-apps/pull/298#discussion_r446960872", "createdAt": "2020-06-29T13:14:03Z", "author": {"login": "srambach"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerManageColumns/DomainExplorerManageColumns.tsx", "diffHunk": "@@ -343,31 +299,59 @@ const DomainExplorerManageColumns: React.FC<IOwnProps> = ({\n                       tempData.push(_v);\n                       childSelectionItems(tempData, group.name, item.name);\n                     } else {\n+                      /* istanbul ignore else */\n                       if (item.type.kind !== 'LIST') {\n                         return item;\n                       }\n                     }\n                   })\n-                  .map((item, _index) => (\n-                    <SelectOption key={_index} value={item.name + group.name}>\n-                      {item.name}\n-                    </SelectOption>\n-                  ))}\n-            </SelectGroup>\n+                  .map((item, _index) => {\n+                    allSelections.push(item.name + '/' + group.name);\n+                    return (\n+                      <DataListContent\n+                        aria-label=\"Primary Content Details\"\n+                        id=\"ex-expand1\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "09817e33f97bc64dda389c151a882a0819207615"}, "originalPosition": 479}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjM0ODI4OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerManageColumns/tests/DomainExplorerManageColumns.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNjowMjo0N1rOGqXwqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzo0Njo0OVrOGqbl5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA4MjY2Nw==", "bodyText": "remove commented code.", "url": "https://github.com/kiegroup/kogito-apps/pull/298#discussion_r447082667", "createdAt": "2020-06-29T16:02:47Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerManageColumns/tests/DomainExplorerManageColumns.test.tsx", "diffHunk": "@@ -166,15 +183,221 @@ describe('Domain Explorer manage columns component', () => {\n       setOffsetVal: jest.fn(),\n       setPageSize: jest.fn(),\n       setIsLoadingMore: jest.fn(),\n-      isLoadingMore: true\n+      isLoadingMore: true,\n+      metaData: {\n+        metadata: [\n+          {\n+            processInstances: [\n+              'id',\n+              'processName',\n+              'state',\n+              'start',\n+              'lastUpdate',\n+              'businessKey'\n+            ]\n+          }\n+        ]\n+      }\n     };\n-\n     const wrapper = mount(<DomainExplorerManageColumns {...props} />);\n     wrapper.update();\n     wrapper.setProps({});\n     expect(wrapper).toMatchSnapshot();\n   });\n-\n+  it('Test toggle selection', () => {\n+    const props = {\n+      columnPickerType: 'Travels',\n+      setColumnFilters: jest.fn(),\n+      setTableLoading: jest.fn(),\n+      getQueryTypes: {\n+        data: {\n+          __schema: {\n+            queryType: [\n+              {\n+                name: 'Address',\n+                kind: 'OBJECT',\n+                fields: [\n+                  {\n+                    name: 'city',\n+                    type: {\n+                      name: 'String',\n+                      kind: 'SCALAR'\n+                    }\n+                  },\n+                  {\n+                    name: 'country',\n+                    type: {\n+                      name: 'String',\n+                      kind: 'SCALAR'\n+                    }\n+                  },\n+                  {\n+                    name: 'location',\n+                    type: {\n+                      name: 'Test',\n+                      kind: 'OBJECT'\n+                    }\n+                  }\n+                ]\n+              },\n+              {\n+                name: 'Test',\n+                kind: 'OBJECT',\n+                fields: [\n+                  {\n+                    name: 'city',\n+                    type: {\n+                      name: 'String',\n+                      kind: 'SCALAR'\n+                    }\n+                  },\n+                  {\n+                    name: 'country',\n+                    type: {\n+                      name: 'String',\n+                      kind: 'SCALAR'\n+                    }\n+                  }\n+                ]\n+              }\n+            ]\n+          }\n+        },\n+        loading: false\n+      },\n+      setDisplayTable: jest.fn(),\n+      parameters: [{ flight: ['arrival'] }, { flight: ['departure'] }],\n+      setParameters: jest.fn(),\n+      selected: [],\n+      setSelected: jest.fn(),\n+      data: [\n+        {\n+          name: 'id',\n+          type: {\n+            fields: null,\n+            kind: 'SCALAR',\n+            name: 'String',\n+            __typename: '__Type'\n+          }\n+        },\n+        {\n+          name: 'flight',\n+          type: {\n+            name: 'Flight',\n+            fields: [\n+              {\n+                name: 'arrival',\n+                type: {\n+                  name: 'String',\n+                  kind: 'SCALAR'\n+                }\n+              },\n+              {\n+                name: 'departure',\n+                type: {\n+                  name: 'String',\n+                  kind: 'SCALAR'\n+                }\n+              }\n+            ],\n+            kind: 'OBJECT'\n+          }\n+        },\n+        {\n+          name: 'hotel',\n+          type: {\n+            name: 'Hotel',\n+            fields: [\n+              {\n+                name: 'address',\n+                type: {\n+                  name: 'Address',\n+                  kind: 'OBJECT',\n+                  fields: [\n+                    {\n+                      name: 'city',\n+                      type: {\n+                        name: 'String',\n+                        kind: 'SCALAR'\n+                      }\n+                    },\n+                    {\n+                      name: 'country',\n+                      type: {\n+                        name: 'String',\n+                        kind: 'SCALAR'\n+                      }\n+                    }\n+                  ]\n+                }\n+              },\n+              {\n+                name: 'bookingNumber',\n+                type: {\n+                  name: 'String',\n+                  kind: 'SCALAR'\n+                }\n+              }\n+            ],\n+            kind: 'OBJECT'\n+          }\n+        }\n+      ],\n+      getPicker: {\n+        data: {},\n+        loading: false\n+      },\n+      setError: jest.fn(),\n+      setDisplayEmptyState: jest.fn(),\n+      rememberedParams: [{ flight: ['arrival'] }, { flight: ['departure'] }],\n+      enableCache: false,\n+      setEnableCache: jest.fn(),\n+      pageSize: 10,\n+      offsetVal: 0,\n+      setOffsetVal: jest.fn(),\n+      setPageSize: jest.fn(),\n+      setIsLoadingMore: jest.fn(),\n+      isLoadingMore: true,\n+      metaData: {\n+        metadata: [\n+          {\n+            processInstances: [\n+              'id',\n+              'processName',\n+              'state',\n+              'start',\n+              'lastUpdate',\n+              'businessKey'\n+            ]\n+          }\n+        ]\n+      }\n+    };\n+    // const event = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "081e7c5893f97c1164845aa0811e91e97671be85"}, "originalPosition": 250}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE0NTQ0NA==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/298#discussion_r447145444", "createdAt": "2020-06-29T17:46:49Z", "author": {"login": "Sara4994"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerManageColumns/tests/DomainExplorerManageColumns.test.tsx", "diffHunk": "@@ -166,15 +183,221 @@ describe('Domain Explorer manage columns component', () => {\n       setOffsetVal: jest.fn(),\n       setPageSize: jest.fn(),\n       setIsLoadingMore: jest.fn(),\n-      isLoadingMore: true\n+      isLoadingMore: true,\n+      metaData: {\n+        metadata: [\n+          {\n+            processInstances: [\n+              'id',\n+              'processName',\n+              'state',\n+              'start',\n+              'lastUpdate',\n+              'businessKey'\n+            ]\n+          }\n+        ]\n+      }\n     };\n-\n     const wrapper = mount(<DomainExplorerManageColumns {...props} />);\n     wrapper.update();\n     wrapper.setProps({});\n     expect(wrapper).toMatchSnapshot();\n   });\n-\n+  it('Test toggle selection', () => {\n+    const props = {\n+      columnPickerType: 'Travels',\n+      setColumnFilters: jest.fn(),\n+      setTableLoading: jest.fn(),\n+      getQueryTypes: {\n+        data: {\n+          __schema: {\n+            queryType: [\n+              {\n+                name: 'Address',\n+                kind: 'OBJECT',\n+                fields: [\n+                  {\n+                    name: 'city',\n+                    type: {\n+                      name: 'String',\n+                      kind: 'SCALAR'\n+                    }\n+                  },\n+                  {\n+                    name: 'country',\n+                    type: {\n+                      name: 'String',\n+                      kind: 'SCALAR'\n+                    }\n+                  },\n+                  {\n+                    name: 'location',\n+                    type: {\n+                      name: 'Test',\n+                      kind: 'OBJECT'\n+                    }\n+                  }\n+                ]\n+              },\n+              {\n+                name: 'Test',\n+                kind: 'OBJECT',\n+                fields: [\n+                  {\n+                    name: 'city',\n+                    type: {\n+                      name: 'String',\n+                      kind: 'SCALAR'\n+                    }\n+                  },\n+                  {\n+                    name: 'country',\n+                    type: {\n+                      name: 'String',\n+                      kind: 'SCALAR'\n+                    }\n+                  }\n+                ]\n+              }\n+            ]\n+          }\n+        },\n+        loading: false\n+      },\n+      setDisplayTable: jest.fn(),\n+      parameters: [{ flight: ['arrival'] }, { flight: ['departure'] }],\n+      setParameters: jest.fn(),\n+      selected: [],\n+      setSelected: jest.fn(),\n+      data: [\n+        {\n+          name: 'id',\n+          type: {\n+            fields: null,\n+            kind: 'SCALAR',\n+            name: 'String',\n+            __typename: '__Type'\n+          }\n+        },\n+        {\n+          name: 'flight',\n+          type: {\n+            name: 'Flight',\n+            fields: [\n+              {\n+                name: 'arrival',\n+                type: {\n+                  name: 'String',\n+                  kind: 'SCALAR'\n+                }\n+              },\n+              {\n+                name: 'departure',\n+                type: {\n+                  name: 'String',\n+                  kind: 'SCALAR'\n+                }\n+              }\n+            ],\n+            kind: 'OBJECT'\n+          }\n+        },\n+        {\n+          name: 'hotel',\n+          type: {\n+            name: 'Hotel',\n+            fields: [\n+              {\n+                name: 'address',\n+                type: {\n+                  name: 'Address',\n+                  kind: 'OBJECT',\n+                  fields: [\n+                    {\n+                      name: 'city',\n+                      type: {\n+                        name: 'String',\n+                        kind: 'SCALAR'\n+                      }\n+                    },\n+                    {\n+                      name: 'country',\n+                      type: {\n+                        name: 'String',\n+                        kind: 'SCALAR'\n+                      }\n+                    }\n+                  ]\n+                }\n+              },\n+              {\n+                name: 'bookingNumber',\n+                type: {\n+                  name: 'String',\n+                  kind: 'SCALAR'\n+                }\n+              }\n+            ],\n+            kind: 'OBJECT'\n+          }\n+        }\n+      ],\n+      getPicker: {\n+        data: {},\n+        loading: false\n+      },\n+      setError: jest.fn(),\n+      setDisplayEmptyState: jest.fn(),\n+      rememberedParams: [{ flight: ['arrival'] }, { flight: ['departure'] }],\n+      enableCache: false,\n+      setEnableCache: jest.fn(),\n+      pageSize: 10,\n+      offsetVal: 0,\n+      setOffsetVal: jest.fn(),\n+      setPageSize: jest.fn(),\n+      setIsLoadingMore: jest.fn(),\n+      isLoadingMore: true,\n+      metaData: {\n+        metadata: [\n+          {\n+            processInstances: [\n+              'id',\n+              'processName',\n+              'state',\n+              'start',\n+              'lastUpdate',\n+              'businessKey'\n+            ]\n+          }\n+        ]\n+      }\n+    };\n+    // const event = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA4MjY2Nw=="}, "originalCommit": {"oid": "081e7c5893f97c1164845aa0811e91e97671be85"}, "originalPosition": 250}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjM0OTczOnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerManageColumns/tests/DomainExplorerManageColumns.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNjowMzowOVrOGqXxjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzo0Njo1OFrOGqbmLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA4Mjg5Mw==", "bodyText": "remove commented code", "url": "https://github.com/kiegroup/kogito-apps/pull/298#discussion_r447082893", "createdAt": "2020-06-29T16:03:09Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerManageColumns/tests/DomainExplorerManageColumns.test.tsx", "diffHunk": "@@ -166,15 +183,221 @@ describe('Domain Explorer manage columns component', () => {\n       setOffsetVal: jest.fn(),\n       setPageSize: jest.fn(),\n       setIsLoadingMore: jest.fn(),\n-      isLoadingMore: true\n+      isLoadingMore: true,\n+      metaData: {\n+        metadata: [\n+          {\n+            processInstances: [\n+              'id',\n+              'processName',\n+              'state',\n+              'start',\n+              'lastUpdate',\n+              'businessKey'\n+            ]\n+          }\n+        ]\n+      }\n     };\n-\n     const wrapper = mount(<DomainExplorerManageColumns {...props} />);\n     wrapper.update();\n     wrapper.setProps({});\n     expect(wrapper).toMatchSnapshot();\n   });\n-\n+  it('Test toggle selection', () => {\n+    const props = {\n+      columnPickerType: 'Travels',\n+      setColumnFilters: jest.fn(),\n+      setTableLoading: jest.fn(),\n+      getQueryTypes: {\n+        data: {\n+          __schema: {\n+            queryType: [\n+              {\n+                name: 'Address',\n+                kind: 'OBJECT',\n+                fields: [\n+                  {\n+                    name: 'city',\n+                    type: {\n+                      name: 'String',\n+                      kind: 'SCALAR'\n+                    }\n+                  },\n+                  {\n+                    name: 'country',\n+                    type: {\n+                      name: 'String',\n+                      kind: 'SCALAR'\n+                    }\n+                  },\n+                  {\n+                    name: 'location',\n+                    type: {\n+                      name: 'Test',\n+                      kind: 'OBJECT'\n+                    }\n+                  }\n+                ]\n+              },\n+              {\n+                name: 'Test',\n+                kind: 'OBJECT',\n+                fields: [\n+                  {\n+                    name: 'city',\n+                    type: {\n+                      name: 'String',\n+                      kind: 'SCALAR'\n+                    }\n+                  },\n+                  {\n+                    name: 'country',\n+                    type: {\n+                      name: 'String',\n+                      kind: 'SCALAR'\n+                    }\n+                  }\n+                ]\n+              }\n+            ]\n+          }\n+        },\n+        loading: false\n+      },\n+      setDisplayTable: jest.fn(),\n+      parameters: [{ flight: ['arrival'] }, { flight: ['departure'] }],\n+      setParameters: jest.fn(),\n+      selected: [],\n+      setSelected: jest.fn(),\n+      data: [\n+        {\n+          name: 'id',\n+          type: {\n+            fields: null,\n+            kind: 'SCALAR',\n+            name: 'String',\n+            __typename: '__Type'\n+          }\n+        },\n+        {\n+          name: 'flight',\n+          type: {\n+            name: 'Flight',\n+            fields: [\n+              {\n+                name: 'arrival',\n+                type: {\n+                  name: 'String',\n+                  kind: 'SCALAR'\n+                }\n+              },\n+              {\n+                name: 'departure',\n+                type: {\n+                  name: 'String',\n+                  kind: 'SCALAR'\n+                }\n+              }\n+            ],\n+            kind: 'OBJECT'\n+          }\n+        },\n+        {\n+          name: 'hotel',\n+          type: {\n+            name: 'Hotel',\n+            fields: [\n+              {\n+                name: 'address',\n+                type: {\n+                  name: 'Address',\n+                  kind: 'OBJECT',\n+                  fields: [\n+                    {\n+                      name: 'city',\n+                      type: {\n+                        name: 'String',\n+                        kind: 'SCALAR'\n+                      }\n+                    },\n+                    {\n+                      name: 'country',\n+                      type: {\n+                        name: 'String',\n+                        kind: 'SCALAR'\n+                      }\n+                    }\n+                  ]\n+                }\n+              },\n+              {\n+                name: 'bookingNumber',\n+                type: {\n+                  name: 'String',\n+                  kind: 'SCALAR'\n+                }\n+              }\n+            ],\n+            kind: 'OBJECT'\n+          }\n+        }\n+      ],\n+      getPicker: {\n+        data: {},\n+        loading: false\n+      },\n+      setError: jest.fn(),\n+      setDisplayEmptyState: jest.fn(),\n+      rememberedParams: [{ flight: ['arrival'] }, { flight: ['departure'] }],\n+      enableCache: false,\n+      setEnableCache: jest.fn(),\n+      pageSize: 10,\n+      offsetVal: 0,\n+      setOffsetVal: jest.fn(),\n+      setPageSize: jest.fn(),\n+      setIsLoadingMore: jest.fn(),\n+      isLoadingMore: true,\n+      metaData: {\n+        metadata: [\n+          {\n+            processInstances: [\n+              'id',\n+              'processName',\n+              'state',\n+              'start',\n+              'lastUpdate',\n+              'businessKey'\n+            ]\n+          }\n+        ]\n+      }\n+    };\n+    // const event = {\n+    // target: {\n+    //     name: 'id'\n+    //   }\n+    // } as React.ChangeEvent<HTMLInputElement>\n+    const event2 = { target: {} } as React.MouseEvent<HTMLInputElement>;\n+    const wrapper = mount(<DomainExplorerManageColumns {...props} />);\n+    wrapper.update();\n+    wrapper.setProps({});\n+    wrapper\n+      .find('#manage-columns-button')\n+      .first()\n+      .simulate('click');\n+    wrapper\n+      .find('DataListToggle')\n+      .first()\n+      .props()\n+      .onClick(event2);\n+    wrapper\n+      .find('DataListToggle')\n+      .at(2)\n+      .props()\n+      .onClick(event2);\n+    // wrapper.find('DataListCheck').first().props().onChange(event);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "081e7c5893f97c1164845aa0811e91e97671be85"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE0NTUxNw==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/298#discussion_r447145517", "createdAt": "2020-06-29T17:46:58Z", "author": {"login": "Sara4994"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerManageColumns/tests/DomainExplorerManageColumns.test.tsx", "diffHunk": "@@ -166,15 +183,221 @@ describe('Domain Explorer manage columns component', () => {\n       setOffsetVal: jest.fn(),\n       setPageSize: jest.fn(),\n       setIsLoadingMore: jest.fn(),\n-      isLoadingMore: true\n+      isLoadingMore: true,\n+      metaData: {\n+        metadata: [\n+          {\n+            processInstances: [\n+              'id',\n+              'processName',\n+              'state',\n+              'start',\n+              'lastUpdate',\n+              'businessKey'\n+            ]\n+          }\n+        ]\n+      }\n     };\n-\n     const wrapper = mount(<DomainExplorerManageColumns {...props} />);\n     wrapper.update();\n     wrapper.setProps({});\n     expect(wrapper).toMatchSnapshot();\n   });\n-\n+  it('Test toggle selection', () => {\n+    const props = {\n+      columnPickerType: 'Travels',\n+      setColumnFilters: jest.fn(),\n+      setTableLoading: jest.fn(),\n+      getQueryTypes: {\n+        data: {\n+          __schema: {\n+            queryType: [\n+              {\n+                name: 'Address',\n+                kind: 'OBJECT',\n+                fields: [\n+                  {\n+                    name: 'city',\n+                    type: {\n+                      name: 'String',\n+                      kind: 'SCALAR'\n+                    }\n+                  },\n+                  {\n+                    name: 'country',\n+                    type: {\n+                      name: 'String',\n+                      kind: 'SCALAR'\n+                    }\n+                  },\n+                  {\n+                    name: 'location',\n+                    type: {\n+                      name: 'Test',\n+                      kind: 'OBJECT'\n+                    }\n+                  }\n+                ]\n+              },\n+              {\n+                name: 'Test',\n+                kind: 'OBJECT',\n+                fields: [\n+                  {\n+                    name: 'city',\n+                    type: {\n+                      name: 'String',\n+                      kind: 'SCALAR'\n+                    }\n+                  },\n+                  {\n+                    name: 'country',\n+                    type: {\n+                      name: 'String',\n+                      kind: 'SCALAR'\n+                    }\n+                  }\n+                ]\n+              }\n+            ]\n+          }\n+        },\n+        loading: false\n+      },\n+      setDisplayTable: jest.fn(),\n+      parameters: [{ flight: ['arrival'] }, { flight: ['departure'] }],\n+      setParameters: jest.fn(),\n+      selected: [],\n+      setSelected: jest.fn(),\n+      data: [\n+        {\n+          name: 'id',\n+          type: {\n+            fields: null,\n+            kind: 'SCALAR',\n+            name: 'String',\n+            __typename: '__Type'\n+          }\n+        },\n+        {\n+          name: 'flight',\n+          type: {\n+            name: 'Flight',\n+            fields: [\n+              {\n+                name: 'arrival',\n+                type: {\n+                  name: 'String',\n+                  kind: 'SCALAR'\n+                }\n+              },\n+              {\n+                name: 'departure',\n+                type: {\n+                  name: 'String',\n+                  kind: 'SCALAR'\n+                }\n+              }\n+            ],\n+            kind: 'OBJECT'\n+          }\n+        },\n+        {\n+          name: 'hotel',\n+          type: {\n+            name: 'Hotel',\n+            fields: [\n+              {\n+                name: 'address',\n+                type: {\n+                  name: 'Address',\n+                  kind: 'OBJECT',\n+                  fields: [\n+                    {\n+                      name: 'city',\n+                      type: {\n+                        name: 'String',\n+                        kind: 'SCALAR'\n+                      }\n+                    },\n+                    {\n+                      name: 'country',\n+                      type: {\n+                        name: 'String',\n+                        kind: 'SCALAR'\n+                      }\n+                    }\n+                  ]\n+                }\n+              },\n+              {\n+                name: 'bookingNumber',\n+                type: {\n+                  name: 'String',\n+                  kind: 'SCALAR'\n+                }\n+              }\n+            ],\n+            kind: 'OBJECT'\n+          }\n+        }\n+      ],\n+      getPicker: {\n+        data: {},\n+        loading: false\n+      },\n+      setError: jest.fn(),\n+      setDisplayEmptyState: jest.fn(),\n+      rememberedParams: [{ flight: ['arrival'] }, { flight: ['departure'] }],\n+      enableCache: false,\n+      setEnableCache: jest.fn(),\n+      pageSize: 10,\n+      offsetVal: 0,\n+      setOffsetVal: jest.fn(),\n+      setPageSize: jest.fn(),\n+      setIsLoadingMore: jest.fn(),\n+      isLoadingMore: true,\n+      metaData: {\n+        metadata: [\n+          {\n+            processInstances: [\n+              'id',\n+              'processName',\n+              'state',\n+              'start',\n+              'lastUpdate',\n+              'businessKey'\n+            ]\n+          }\n+        ]\n+      }\n+    };\n+    // const event = {\n+    // target: {\n+    //     name: 'id'\n+    //   }\n+    // } as React.ChangeEvent<HTMLInputElement>\n+    const event2 = { target: {} } as React.MouseEvent<HTMLInputElement>;\n+    const wrapper = mount(<DomainExplorerManageColumns {...props} />);\n+    wrapper.update();\n+    wrapper.setProps({});\n+    wrapper\n+      .find('#manage-columns-button')\n+      .first()\n+      .simulate('click');\n+    wrapper\n+      .find('DataListToggle')\n+      .first()\n+      .props()\n+      .onClick(event2);\n+    wrapper\n+      .find('DataListToggle')\n+      .at(2)\n+      .props()\n+      .onClick(event2);\n+    // wrapper.find('DataListCheck').first().props().onChange(event);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA4Mjg5Mw=="}, "originalCommit": {"oid": "081e7c5893f97c1164845aa0811e91e97671be85"}, "originalPosition": 273}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjM1NjE0OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerManageColumns/tests/DomainExplorerManageColumns.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNjowNDo1MFrOGqX1nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzo1OTo1NlrOGqcDnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA4MzkzMg==", "bodyText": "do we want to check what happened here? something appeared/hid or is this testing that #save-columns appeared after first click and can be clicked? If so, I'd check that the button hid again.", "url": "https://github.com/kiegroup/kogito-apps/pull/298#discussion_r447083932", "createdAt": "2020-06-29T16:04:50Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerManageColumns/tests/DomainExplorerManageColumns.test.tsx", "diffHunk": "@@ -316,23 +553,31 @@ describe('Domain Explorer manage columns component', () => {\n       setOffsetVal: jest.fn(),\n       setPageSize: jest.fn(),\n       setIsLoadingMore: jest.fn(),\n-      isLoadingMore: true\n-    };\n-    const mGraphQLResponse = {\n-      data: {\n-        Travels: []\n-      },\n-      loading: false,\n-      errors: [],\n-      networkStatus: '',\n-      stale: true\n+      isLoadingMore: true,\n+      metaData: {\n+        metadata: [\n+          {\n+            processInstances: [\n+              'id',\n+              'processName',\n+              'state',\n+              'start',\n+              'lastUpdate',\n+              'businessKey'\n+            ]\n+          }\n+        ]\n+      }\n     };\n-\n-    client.query.mockReturnValueOnce(mGraphQLResponse);\n-    const wrapper = shallow(<DomainExplorerManageColumns {...props} />);\n-    wrapper.find('#refresh-button').simulate('click');\n-    wrapper.find('#apply-columns').simulate('click');\n-    await Promise.resolve();\n+    const wrapper = mount(<DomainExplorerManageColumns {...props} />);\n+    wrapper\n+      .find('#manage-columns-button')\n+      .first()\n+      .simulate('click');\n+    wrapper\n+      .find('#save-columns')\n+      .first()\n+      .simulate('click');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "081e7c5893f97c1164845aa0811e91e97671be85"}, "originalPosition": 358}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE1MzA1Mw==", "bodyText": "this click would trigger function a call which will in turn triggers query. have added some expect checks to it", "url": "https://github.com/kiegroup/kogito-apps/pull/298#discussion_r447153053", "createdAt": "2020-06-29T17:59:56Z", "author": {"login": "Sara4994"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerManageColumns/tests/DomainExplorerManageColumns.test.tsx", "diffHunk": "@@ -316,23 +553,31 @@ describe('Domain Explorer manage columns component', () => {\n       setOffsetVal: jest.fn(),\n       setPageSize: jest.fn(),\n       setIsLoadingMore: jest.fn(),\n-      isLoadingMore: true\n-    };\n-    const mGraphQLResponse = {\n-      data: {\n-        Travels: []\n-      },\n-      loading: false,\n-      errors: [],\n-      networkStatus: '',\n-      stale: true\n+      isLoadingMore: true,\n+      metaData: {\n+        metadata: [\n+          {\n+            processInstances: [\n+              'id',\n+              'processName',\n+              'state',\n+              'start',\n+              'lastUpdate',\n+              'businessKey'\n+            ]\n+          }\n+        ]\n+      }\n     };\n-\n-    client.query.mockReturnValueOnce(mGraphQLResponse);\n-    const wrapper = shallow(<DomainExplorerManageColumns {...props} />);\n-    wrapper.find('#refresh-button').simulate('click');\n-    wrapper.find('#apply-columns').simulate('click');\n-    await Promise.resolve();\n+    const wrapper = mount(<DomainExplorerManageColumns {...props} />);\n+    wrapper\n+      .find('#manage-columns-button')\n+      .first()\n+      .simulate('click');\n+    wrapper\n+      .find('#save-columns')\n+      .first()\n+      .simulate('click');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA4MzkzMg=="}, "originalCommit": {"oid": "081e7c5893f97c1164845aa0811e91e97671be85"}, "originalPosition": 358}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NjQzNTYwOnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerManageColumns/tests/DomainExplorerManageColumns.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNjoyMzoxM1rOGqYlMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxNzo1ODo1N1rOGqcBTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA5NjExNQ==", "bodyText": "could we add comments on what is actually happening here? And potentially also expect checks of what actually happened?", "url": "https://github.com/kiegroup/kogito-apps/pull/298#discussion_r447096115", "createdAt": "2020-06-29T16:23:13Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerManageColumns/tests/DomainExplorerManageColumns.test.tsx", "diffHunk": "@@ -716,47 +1020,85 @@ describe('Domain Explorer manage columns component', () => {\n       rememberedParams: [],\n       enableCache: false,\n       setEnableCache: jest.fn(),\n-      pageSize: 10,\n-      offsetVal: 0,\n+      pageSize: 2,\n+      offsetVal: 10,\n       setOffsetVal: jest.fn(),\n       setPageSize: jest.fn(),\n       setIsLoadingMore: jest.fn(),\n-      isLoadingMore: true\n-    };\n-    const obj = {\n-      target: { id: 'id' },\n-      nativeEvent: {\n-        target: {\n-          nextSibling: {\n-            innerText: ''\n-          },\n-          parentElement: {\n-            parentElement: {\n-              getAttribute: jest.fn(() => 'id')\n-            }\n+      isLoadingMore: true,\n+      metaData: {\n+        metadata: [\n+          {\n+            processInstances: [\n+              'id',\n+              'processName',\n+              'state',\n+              'start',\n+              'lastUpdate',\n+              'businessKey'\n+            ]\n           }\n-        }\n-      }\n+        ]\n+      },\n+      retryColumns: false,\n+      setRetryColumns: jest.fn()\n     };\n-    const wrapper = shallow(<DomainExplorerManageColumns {...props} />);\n-    wrapper.update();\n-\n-    wrapper.find('#columnPicker-dropdown').simulate('select', obj);\n-    expect(wrapper).toMatchSnapshot();\n+    const mGraphQLResponse = {\n+      data: {\n+        Travels: []\n+      },\n+      loading: false,\n+      errors: [],\n+      networkStatus: '',\n+      stale: true\n+    };\n+    const event = { target: {} } as React.ChangeEvent<HTMLInputElement>;\n+    client.query.mockReturnValueOnce(mGraphQLResponse);\n+    const wrapper = mount(<DomainExplorerManageColumns {...props} />);\n+    wrapper\n+      .find('#manage-columns-button')\n+      .first()\n+      .simulate('click');\n+    expect(wrapper.find('#selectAll-dropdown')).toBeTruthy();\n+    wrapper\n+      .find('#selectAll-dropdown')\n+      .first()\n+      .props()\n+      ['toggle']['props']['splitButtonItems'][0]['props']['onClick']();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "987571065970a3c0d785cdc8f6f40fdaafd56c96"}, "originalPosition": 774}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzE1MjQ2MQ==", "bodyText": "added comments and some expect checks", "url": "https://github.com/kiegroup/kogito-apps/pull/298#discussion_r447152461", "createdAt": "2020-06-29T17:58:57Z", "author": {"login": "Sara4994"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerManageColumns/tests/DomainExplorerManageColumns.test.tsx", "diffHunk": "@@ -716,47 +1020,85 @@ describe('Domain Explorer manage columns component', () => {\n       rememberedParams: [],\n       enableCache: false,\n       setEnableCache: jest.fn(),\n-      pageSize: 10,\n-      offsetVal: 0,\n+      pageSize: 2,\n+      offsetVal: 10,\n       setOffsetVal: jest.fn(),\n       setPageSize: jest.fn(),\n       setIsLoadingMore: jest.fn(),\n-      isLoadingMore: true\n-    };\n-    const obj = {\n-      target: { id: 'id' },\n-      nativeEvent: {\n-        target: {\n-          nextSibling: {\n-            innerText: ''\n-          },\n-          parentElement: {\n-            parentElement: {\n-              getAttribute: jest.fn(() => 'id')\n-            }\n+      isLoadingMore: true,\n+      metaData: {\n+        metadata: [\n+          {\n+            processInstances: [\n+              'id',\n+              'processName',\n+              'state',\n+              'start',\n+              'lastUpdate',\n+              'businessKey'\n+            ]\n           }\n-        }\n-      }\n+        ]\n+      },\n+      retryColumns: false,\n+      setRetryColumns: jest.fn()\n     };\n-    const wrapper = shallow(<DomainExplorerManageColumns {...props} />);\n-    wrapper.update();\n-\n-    wrapper.find('#columnPicker-dropdown').simulate('select', obj);\n-    expect(wrapper).toMatchSnapshot();\n+    const mGraphQLResponse = {\n+      data: {\n+        Travels: []\n+      },\n+      loading: false,\n+      errors: [],\n+      networkStatus: '',\n+      stale: true\n+    };\n+    const event = { target: {} } as React.ChangeEvent<HTMLInputElement>;\n+    client.query.mockReturnValueOnce(mGraphQLResponse);\n+    const wrapper = mount(<DomainExplorerManageColumns {...props} />);\n+    wrapper\n+      .find('#manage-columns-button')\n+      .first()\n+      .simulate('click');\n+    expect(wrapper.find('#selectAll-dropdown')).toBeTruthy();\n+    wrapper\n+      .find('#selectAll-dropdown')\n+      .first()\n+      .props()\n+      ['toggle']['props']['splitButtonItems'][0]['props']['onClick']();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzA5NjExNQ=="}, "originalCommit": {"oid": "987571065970a3c0d785cdc8f6f40fdaafd56c96"}, "originalPosition": 774}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDc5MDg0OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerManageColumns/DomainExplorerManageColumns.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNToyNDoyMFrOGrBx7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNToxMDo0N1rOGrW_TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc3MTExNg==", "bodyText": "can we have a variable to combine this. It seems to be recreated a few times and sometimes group.name comes first, then item.name. would make it consistent.", "url": "https://github.com/kiegroup/kogito-apps/pull/298#discussion_r447771116", "createdAt": "2020-06-30T15:24:20Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerManageColumns/DomainExplorerManageColumns.tsx", "diffHunk": "@@ -300,40 +202,136 @@ const DomainExplorerManageColumns: React.FC<IOwnProps> = ({\n                   return item;\n                 }\n               })\n-              .map(item => (\n-                <SelectOption\n-                  key={Math.random()}\n-                  value={item.name + title + group.name}\n-                >\n-                  {item.name}\n-                </SelectOption>\n-              ))}\n-          </SelectGroup>\n+              .map((item, _index) => {\n+                allSelections.push(item.name + '/' + title + '/' + group.name);\n+                return (\n+                  <DataListContent\n+                    aria-label={\n+                      'Primary Content Details-' +\n+                      group.name +\n+                      '/' +\n+                      title +\n+                      '/' +\n+                      item.name", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d46ad72f161038c28744ca603d26d4ed66c25b53"}, "originalPosition": 368}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODExODYwNA==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/298#discussion_r448118604", "createdAt": "2020-07-01T05:10:47Z", "author": {"login": "Sara4994"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerManageColumns/DomainExplorerManageColumns.tsx", "diffHunk": "@@ -300,40 +202,136 @@ const DomainExplorerManageColumns: React.FC<IOwnProps> = ({\n                   return item;\n                 }\n               })\n-              .map(item => (\n-                <SelectOption\n-                  key={Math.random()}\n-                  value={item.name + title + group.name}\n-                >\n-                  {item.name}\n-                </SelectOption>\n-              ))}\n-          </SelectGroup>\n+              .map((item, _index) => {\n+                allSelections.push(item.name + '/' + title + '/' + group.name);\n+                return (\n+                  <DataListContent\n+                    aria-label={\n+                      'Primary Content Details-' +\n+                      group.name +\n+                      '/' +\n+                      title +\n+                      '/' +\n+                      item.name", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc3MTExNg=="}, "originalCommit": {"oid": "d46ad72f161038c28744ca603d26d4ed66c25b53"}, "originalPosition": 368}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDc5ODkxOnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerManageColumns/DomainExplorerManageColumns.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNToyNTo1NVrOGrB28A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQwNToxMDo1NFrOGrW_ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc3MjQwMA==", "bodyText": "same here, create a variable to reuse this key, and I guess it should be group.name + '/' + item.name", "url": "https://github.com/kiegroup/kogito-apps/pull/298#discussion_r447772400", "createdAt": "2020-06-30T15:25:55Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerManageColumns/DomainExplorerManageColumns.tsx", "diffHunk": "@@ -343,31 +341,71 @@ const DomainExplorerManageColumns: React.FC<IOwnProps> = ({\n                       tempData.push(_v);\n                       childSelectionItems(tempData, group.name, item.name);\n                     } else {\n+                      /* istanbul ignore else */\n                       if (item.type.kind !== 'LIST') {\n                         return item;\n                       }\n                     }\n                   })\n-                  .map((item, _index) => (\n-                    <SelectOption key={_index} value={item.name + group.name}>\n-                      {item.name}\n-                    </SelectOption>\n-                  ))}\n-            </SelectGroup>\n+                  .map((item, _index) => {\n+                    allSelections.push(item.name + '/' + group.name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d46ad72f161038c28744ca603d26d4ed66c25b53"}, "originalPosition": 517}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODExODY1MQ==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/298#discussion_r448118651", "createdAt": "2020-07-01T05:10:54Z", "author": {"login": "Sara4994"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerManageColumns/DomainExplorerManageColumns.tsx", "diffHunk": "@@ -343,31 +341,71 @@ const DomainExplorerManageColumns: React.FC<IOwnProps> = ({\n                       tempData.push(_v);\n                       childSelectionItems(tempData, group.name, item.name);\n                     } else {\n+                      /* istanbul ignore else */\n                       if (item.type.kind !== 'LIST') {\n                         return item;\n                       }\n                     }\n                   })\n-                  .map((item, _index) => (\n-                    <SelectOption key={_index} value={item.name + group.name}>\n-                      {item.name}\n-                    </SelectOption>\n-                  ))}\n-            </SelectGroup>\n+                  .map((item, _index) => {\n+                    allSelections.push(item.name + '/' + group.name);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc3MjQwMA=="}, "originalCommit": {"oid": "d46ad72f161038c28744ca603d26d4ed66c25b53"}, "originalPosition": 517}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDg0ODQ1OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerManageColumns/DomainExplorerManageColumns.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTozNjoyMVrOGrCVSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzo1MzoxMlrOGrm4Ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc4MDE2OQ==", "bodyText": "Isnt better to split there into two separeted functions? handleSelectNone and handleSelectAll ?", "url": "https://github.com/kiegroup/kogito-apps/pull/298#discussion_r447780169", "createdAt": "2020-06-30T15:36:21Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerManageColumns/DomainExplorerManageColumns.tsx", "diffHunk": "@@ -379,61 +417,240 @@ const DomainExplorerManageColumns: React.FC<IOwnProps> = ({\n     return unique;\n   }\n \n+  useEffect(() => {\n+    /* istanbul ignore else */\n+    if (isLoadingMore) {\n+      generateQuery(parameters);\n+    }\n+  }, [isLoadingMore]);\n+\n+  useEffect(() => {\n+    /* istanbul ignore else */\n+    if (\n+      (rememberedParams.length === 0 && parameters.length !== 1) ||\n+      rememberedParams.length > 0\n+    ) {\n+      generateQuery(parameters);\n+    }\n+  }, [parameters.length > 1]);\n+\n+  async function generateQuery(paramFields) {\n+    setTableLoading(true);\n+    setEnableRefresh(true);\n+    if (columnPickerType && paramFields.length > 1) {\n+      const Query = query({\n+        operation: columnPickerType,\n+        fields: paramFields,\n+        variables: {\n+          pagination: {\n+            value: { offset: offsetVal, limit: pageSize },\n+            type: 'Pagination'\n+          }\n+        }\n+      });\n+      try {\n+        const response = await client.query({\n+          query: gql`\n+            ${Query.query}\n+          `,\n+          variables: Query.variables,\n+          fetchPolicy: enableCache ? 'cache-first' : 'network-only'\n+        });\n+        const firstKey = Object.keys(response.data)[0];\n+        if (response.data[firstKey].length > 0) {\n+          const resp = response.data;\n+          const respKeys = Object.keys(resp)[0];\n+          const tableContent = resp[respKeys];\n+          const finalResp = [];\n+          tableContent.map(content => {\n+            const finalObject = validateResponse(content, paramFields);\n+            finalResp.push(finalObject);\n+          });\n+          setColumnFilters(finalResp);\n+          setTableLoading(false);\n+          setDisplayTable(true);\n+          setEnableCache(false);\n+          setIsLoadingMore(false);\n+        } else {\n+          setTableLoading(false);\n+          setDisplayEmptyState(true);\n+          setEnableCache(false);\n+        }\n+      } catch (error) {\n+        setError(error);\n+      }\n+    } else {\n+      setTableLoading(false);\n+      setDisplayEmptyState(false);\n+      setDisplayTable(false);\n+    }\n+  }\n+\n+  const renderModal = () => {\n+    const numSelected = selected.length;\n+    const allSelected = numSelected === allSelections.length;\n+    const anySelected = numSelected > 0;\n+    const someChecked = anySelected ? null : false;\n+    const isChecked = allSelected ? true : someChecked;\n+\n+    const onDropDownToggle = isOpen => {\n+      setIsDropDownOpen(isOpen);\n+    };\n+\n+    const onDropDownSelect = event => {\n+      setIsDropDownOpen(!isDropDownOpen);\n+    };\n+\n+    const handleSelectClick = newState => {\n+      if (newState === 'none') {\n+        setSelected([]);\n+        setParameters([metaData]);\n+      } else {\n+        setSelected(allSelections);\n+        const selectionArray = allSelections.map(ele =>\n+          ele\n+            .split('/')\n+            .map(item => item.charAt(0).toLowerCase() + item.slice(1))\n+        );\n+        const finalObj = [];\n+        selectionArray.forEach(arr => {\n+          const objValue = arr.shift();\n+          const rest = filterColumnSelection(arr, objValue);\n+          finalObj.push(rest);\n+        });\n+        finalObj.push(metaData);\n+        setParameters(finalObj);\n+      }\n+    };\n+\n+    const items = [\n+      <DropdownItem key={0} onClick={() => handleSelectClick('none')}>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d46ad72f161038c28744ca603d26d4ed66c25b53"}, "originalPosition": 698}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM3ODg5OQ==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/298#discussion_r448378899", "createdAt": "2020-07-01T13:53:12Z", "author": {"login": "Sara4994"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerManageColumns/DomainExplorerManageColumns.tsx", "diffHunk": "@@ -379,61 +417,240 @@ const DomainExplorerManageColumns: React.FC<IOwnProps> = ({\n     return unique;\n   }\n \n+  useEffect(() => {\n+    /* istanbul ignore else */\n+    if (isLoadingMore) {\n+      generateQuery(parameters);\n+    }\n+  }, [isLoadingMore]);\n+\n+  useEffect(() => {\n+    /* istanbul ignore else */\n+    if (\n+      (rememberedParams.length === 0 && parameters.length !== 1) ||\n+      rememberedParams.length > 0\n+    ) {\n+      generateQuery(parameters);\n+    }\n+  }, [parameters.length > 1]);\n+\n+  async function generateQuery(paramFields) {\n+    setTableLoading(true);\n+    setEnableRefresh(true);\n+    if (columnPickerType && paramFields.length > 1) {\n+      const Query = query({\n+        operation: columnPickerType,\n+        fields: paramFields,\n+        variables: {\n+          pagination: {\n+            value: { offset: offsetVal, limit: pageSize },\n+            type: 'Pagination'\n+          }\n+        }\n+      });\n+      try {\n+        const response = await client.query({\n+          query: gql`\n+            ${Query.query}\n+          `,\n+          variables: Query.variables,\n+          fetchPolicy: enableCache ? 'cache-first' : 'network-only'\n+        });\n+        const firstKey = Object.keys(response.data)[0];\n+        if (response.data[firstKey].length > 0) {\n+          const resp = response.data;\n+          const respKeys = Object.keys(resp)[0];\n+          const tableContent = resp[respKeys];\n+          const finalResp = [];\n+          tableContent.map(content => {\n+            const finalObject = validateResponse(content, paramFields);\n+            finalResp.push(finalObject);\n+          });\n+          setColumnFilters(finalResp);\n+          setTableLoading(false);\n+          setDisplayTable(true);\n+          setEnableCache(false);\n+          setIsLoadingMore(false);\n+        } else {\n+          setTableLoading(false);\n+          setDisplayEmptyState(true);\n+          setEnableCache(false);\n+        }\n+      } catch (error) {\n+        setError(error);\n+      }\n+    } else {\n+      setTableLoading(false);\n+      setDisplayEmptyState(false);\n+      setDisplayTable(false);\n+    }\n+  }\n+\n+  const renderModal = () => {\n+    const numSelected = selected.length;\n+    const allSelected = numSelected === allSelections.length;\n+    const anySelected = numSelected > 0;\n+    const someChecked = anySelected ? null : false;\n+    const isChecked = allSelected ? true : someChecked;\n+\n+    const onDropDownToggle = isOpen => {\n+      setIsDropDownOpen(isOpen);\n+    };\n+\n+    const onDropDownSelect = event => {\n+      setIsDropDownOpen(!isDropDownOpen);\n+    };\n+\n+    const handleSelectClick = newState => {\n+      if (newState === 'none') {\n+        setSelected([]);\n+        setParameters([metaData]);\n+      } else {\n+        setSelected(allSelections);\n+        const selectionArray = allSelections.map(ele =>\n+          ele\n+            .split('/')\n+            .map(item => item.charAt(0).toLowerCase() + item.slice(1))\n+        );\n+        const finalObj = [];\n+        selectionArray.forEach(arr => {\n+          const objValue = arr.shift();\n+          const rest = filterColumnSelection(arr, objValue);\n+          finalObj.push(rest);\n+        });\n+        finalObj.push(metaData);\n+        setParameters(finalObj);\n+      }\n+    };\n+\n+    const items = [\n+      <DropdownItem key={0} onClick={() => handleSelectClick('none')}>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc4MDE2OQ=="}, "originalCommit": {"oid": "d46ad72f161038c28744ca603d26d4ed66c25b53"}, "originalPosition": 698}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5MDg4NzYxOnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerTable/DomainExplorerTable.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNTo0NToxOVrOGrCt3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzo1MzoxOFrOGrm4SA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc4NjQ2MA==", "bodyText": "could you just have a function here let's say onManageColumnsClick that is received as parameter that you don't need to do a set true?", "url": "https://github.com/kiegroup/kogito-apps/pull/298#discussion_r447786460", "createdAt": "2020-06-30T15:45:19Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -330,7 +336,15 @@ const DomainExplorerTable = ({\n                   No columns selected\n                 </Title>\n                 <EmptyStateBody>\n-                  Select columns from the dropdown to see content\n+                  <Button\n+                    variant=\"link\"\n+                    id=\"retry-columns-button\"\n+                    onClick={handleRetry}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d46ad72f161038c28744ca603d26d4ed66c25b53"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM3ODk1Mg==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/298#discussion_r448378952", "createdAt": "2020-07-01T13:53:18Z", "author": {"login": "Sara4994"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -330,7 +336,15 @@ const DomainExplorerTable = ({\n                   No columns selected\n                 </Title>\n                 <EmptyStateBody>\n-                  Select columns from the dropdown to see content\n+                  <Button\n+                    variant=\"link\"\n+                    id=\"retry-columns-button\"\n+                    onClick={handleRetry}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc4NjQ2MA=="}, "originalCommit": {"oid": "d46ad72f161038c28744ca603d26d4ed66c25b53"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 782, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}