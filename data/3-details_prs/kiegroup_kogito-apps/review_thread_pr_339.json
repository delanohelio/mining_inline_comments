{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1NjYxODYy", "number": 339, "reviewThreads": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzoyMToxMVrOERci_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTo0NDoxM1rOEV4qjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzI4OTU5OnYy", "diffSide": "RIGHT", "path": "trusty/trusty-api/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzoyMToxMVrOG2KNBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzo0NDowMVrOG4NPvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ0MzQ2MQ==", "bodyText": "I think it is better to do the opposite: move this module to explainable-service and then trusty-service will use it. In this way explanable-service will be agnostic while trusty-service is already an \"integration\" service. Wdyt?", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r459443461", "createdAt": "2020-07-23T13:21:11Z", "author": {"login": "danielezonca"}, "path": "trusty/trusty-api/pom.xml", "diffHunk": "@@ -0,0 +1,33 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>trusty</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>trusty-api</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a7e11bec5d5b094caefbe0c6bb0e075da4cdaab"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU5MDQ2Mw==", "bodyText": "makes sense, will do", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r461590463", "createdAt": "2020-07-28T13:44:01Z", "author": {"login": "r00ta"}, "path": "trusty/trusty-api/pom.xml", "diffHunk": "@@ -0,0 +1,33 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>trusty</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>trusty-api</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ0MzQ2MQ=="}, "originalCommit": {"oid": "4a7e11bec5d5b094caefbe0c6bb0e075da4cdaab"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjQwOTE3OnYy", "diffSide": "RIGHT", "path": "explainability-service/src/main/java/org/kie/kogito/explainability/messaging/incoming/ExplainabilityRequestConverter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QwOTo0ODo1M1rOG3bdSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMzo0NDoxNVrOG4NQZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc3NDczMA==", "bodyText": "What about a from factory method on ExplainabilityRequest that accepts the whole ExplainabilityRequestDto so that it will be easier to evolve in the future?", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r460774730", "createdAt": "2020-07-27T09:48:53Z", "author": {"login": "danielezonca"}, "path": "explainability-service/src/main/java/org/kie/kogito/explainability/messaging/incoming/ExplainabilityRequestConverter.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.explainability.messaging.incoming;\n+\n+import org.kie.kogito.explainability.models.ExplainabilityRequest;\n+import org.kie.kogito.trusty.api.ExplainabilityRequestDto;\n+\n+public class ExplainabilityRequestConverter {\n+    public static ExplainabilityRequest toRequest(ExplainabilityRequestDto explainabilityRequestDto){\n+        return new ExplainabilityRequest(explainabilityRequestDto.executionId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de9c1d2f9812c03d776495c774ddd42bfde32b80"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU5MDYyOQ==", "bodyText": "Yep, absolutely", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r461590629", "createdAt": "2020-07-28T13:44:15Z", "author": {"login": "r00ta"}, "path": "explainability-service/src/main/java/org/kie/kogito/explainability/messaging/incoming/ExplainabilityRequestConverter.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.explainability.messaging.incoming;\n+\n+import org.kie.kogito.explainability.models.ExplainabilityRequest;\n+import org.kie.kogito.trusty.api.ExplainabilityRequestDto;\n+\n+public class ExplainabilityRequestConverter {\n+    public static ExplainabilityRequest toRequest(ExplainabilityRequestDto explainabilityRequestDto){\n+        return new ExplainabilityRequest(explainabilityRequestDto.executionId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc3NDczMA=="}, "originalCommit": {"oid": "de9c1d2f9812c03d776495c774ddd42bfde32b80"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg3NjYyODAzOnYy", "diffSide": "RIGHT", "path": "explainability-service/src/main/java/org/kie/kogito/explainability/messaging/incoming/ExplainabilityRequestConsumer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDo1NDoxN1rOG3dg0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQwOTozMTo1N1rOG6CPVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwODQwMw==", "bodyText": "Can you please apply these changes?\n\nrefactor this class to have both incoming and outgoing events\nadd a callback parameter to processExplainability method\ncreate a -kafka module with reactive messaging part and another -rest module with the same processExplainability method exposed as REST", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r460808403", "createdAt": "2020-07-27T10:54:17Z", "author": {"login": "danielezonca"}, "path": "explainability-service/src/main/java/org/kie/kogito/explainability/messaging/incoming/ExplainabilityRequestConsumer.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.explainability.messaging.incoming;\n+\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import io.cloudevents.v1.AttributesImpl;\n+import io.cloudevents.v1.CloudEventImpl;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.kie.kogito.explainability.IExplanationService;\n+import org.kie.kogito.trusty.api.CloudEventUtils;\n+import org.kie.kogito.trusty.api.ExplainabilityRequestDto;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class ExplainabilityRequestConsumer {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExplainabilityRequestConsumer.class);\n+\n+    private static final TypeReference<CloudEventImpl<ExplainabilityRequestDto>> CLOUD_EVENT_TYPE = new TypeReference<>() {\n+    };\n+\n+    private final IExplanationService service;\n+\n+    @Inject\n+    public ExplainabilityRequestConsumer(IExplanationService service) {\n+        this.service = service;\n+    }\n+\n+    @Incoming(\"trusty-explainability-request\")\n+    public CompletionStage<Void> handleMessage(Message<String> message) {\n+        decodeCloudEvent(message.getPayload()).ifPresent(this::handleCloudEvent);\n+        return message.ack();\n+    }\n+\n+    private Optional<CloudEventImpl<ExplainabilityRequestDto>> decodeCloudEvent(String payload) {\n+        try {\n+            return Optional.of(CloudEventUtils.decode(payload, CLOUD_EVENT_TYPE));\n+        } catch (IllegalStateException e) {\n+            LOGGER.error(String.format(\"Can't decode message to CloudEvent: %s\", payload), e);\n+            return Optional.empty();\n+        }\n+    }\n+\n+    private void handleCloudEvent(CloudEventImpl<ExplainabilityRequestDto> cloudEvent) {\n+        AttributesImpl attributes = cloudEvent.getAttributes();\n+        Optional<ExplainabilityRequestDto> optData = cloudEvent.getData();\n+\n+        if (!optData.isPresent()) {\n+            LOGGER.error(\"Received CloudEvent with id {} from {} with empty data\", attributes.getId(), attributes.getSource());\n+            return;\n+        }\n+\n+        LOGGER.info(\"Received CloudEvent with id {} from {}\", attributes.getId(), attributes.getSource());\n+\n+        ExplainabilityRequestDto explainabilityResult = optData.get();\n+\n+        service.processExplainability(ExplainabilityRequestConverter.toRequest(explainabilityResult));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de9c1d2f9812c03d776495c774ddd42bfde32b80"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzUwNzI4Nw==", "bodyText": "Hi @danielezonca, I'm done but I did not use a callback. Let me know what do you think", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r463507287", "createdAt": "2020-07-31T09:31:57Z", "author": {"login": "r00ta"}, "path": "explainability-service/src/main/java/org/kie/kogito/explainability/messaging/incoming/ExplainabilityRequestConsumer.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.explainability.messaging.incoming;\n+\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import io.cloudevents.v1.AttributesImpl;\n+import io.cloudevents.v1.CloudEventImpl;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.kie.kogito.explainability.IExplanationService;\n+import org.kie.kogito.trusty.api.CloudEventUtils;\n+import org.kie.kogito.trusty.api.ExplainabilityRequestDto;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class ExplainabilityRequestConsumer {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExplainabilityRequestConsumer.class);\n+\n+    private static final TypeReference<CloudEventImpl<ExplainabilityRequestDto>> CLOUD_EVENT_TYPE = new TypeReference<>() {\n+    };\n+\n+    private final IExplanationService service;\n+\n+    @Inject\n+    public ExplainabilityRequestConsumer(IExplanationService service) {\n+        this.service = service;\n+    }\n+\n+    @Incoming(\"trusty-explainability-request\")\n+    public CompletionStage<Void> handleMessage(Message<String> message) {\n+        decodeCloudEvent(message.getPayload()).ifPresent(this::handleCloudEvent);\n+        return message.ack();\n+    }\n+\n+    private Optional<CloudEventImpl<ExplainabilityRequestDto>> decodeCloudEvent(String payload) {\n+        try {\n+            return Optional.of(CloudEventUtils.decode(payload, CLOUD_EVENT_TYPE));\n+        } catch (IllegalStateException e) {\n+            LOGGER.error(String.format(\"Can't decode message to CloudEvent: %s\", payload), e);\n+            return Optional.empty();\n+        }\n+    }\n+\n+    private void handleCloudEvent(CloudEventImpl<ExplainabilityRequestDto> cloudEvent) {\n+        AttributesImpl attributes = cloudEvent.getAttributes();\n+        Optional<ExplainabilityRequestDto> optData = cloudEvent.getData();\n+\n+        if (!optData.isPresent()) {\n+            LOGGER.error(\"Received CloudEvent with id {} from {} with empty data\", attributes.getId(), attributes.getSource());\n+            return;\n+        }\n+\n+        LOGGER.info(\"Received CloudEvent with id {} from {}\", attributes.getId(), attributes.getSource());\n+\n+        ExplainabilityRequestDto explainabilityResult = optData.get();\n+\n+        service.processExplainability(ExplainabilityRequestConverter.toRequest(explainabilityResult));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwODQwMw=="}, "originalCommit": {"oid": "de9c1d2f9812c03d776495c774ddd42bfde32b80"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDIxNzE3OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-service-rest/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMDo0NjozOVrOG6ERzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMjo1NTo0OVrOG6Hhrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0MDY4Nw==", "bodyText": "Is this needed?", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r463540687", "createdAt": "2020-07-31T10:46:39Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-service-rest/pom.xml", "diffHunk": "@@ -0,0 +1,112 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>explainability</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <name>Kogito :: Explainability Service Rest</name>\n+  <artifactId>explainability-service-rest</artifactId>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-resteasy</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-smallrye-health</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-resteasy-jackson</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-smallrye-openapi</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>explainability-service</artifactId>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-maven-plugin</artifactId>\n+        <configuration>\n+          <uberJar>true</uberJar>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a04a2cf9a3563de52431eb9545cc10e6c0a5a353"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU5MzkwMg==", "bodyText": "The main idea behind this thing is that we create two jars: one that is using a rest endpoint to process requests and another one that is using messages. This is the reason why we have a build step in the explainability-service-rest and explainability-service-messaging. Something that we did not really discussed yet to be truth", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r463593902", "createdAt": "2020-07-31T12:55:49Z", "author": {"login": "r00ta"}, "path": "explainability/explainability-service-rest/pom.xml", "diffHunk": "@@ -0,0 +1,112 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>explainability</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <name>Kogito :: Explainability Service Rest</name>\n+  <artifactId>explainability-service-rest</artifactId>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-resteasy</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-smallrye-health</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-resteasy-jackson</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-smallrye-openapi</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>explainability-service</artifactId>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-maven-plugin</artifactId>\n+        <configuration>\n+          <uberJar>true</uberJar>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0MDY4Nw=="}, "originalCommit": {"oid": "a04a2cf9a3563de52431eb9545cc10e6c0a5a353"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDIxODI3OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-service-messaging/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMDo0NzowMlrOG6ESbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMjo1NjoxNFrOG6HiiQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0MDg0Ng==", "bodyText": "Is this needed?", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r463540846", "createdAt": "2020-07-31T10:47:02Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-service-messaging/pom.xml", "diffHunk": "@@ -0,0 +1,118 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>explainability</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <name>Kogito :: Explainability Service Messaging</name>\n+  <artifactId>explainability-service-messaging</artifactId>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-smallrye-health</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-smallrye-reactive-messaging</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-smallrye-reactive-messaging-kafka</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-tracing-decision-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>explainability-service</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.cloudevents</groupId>\n+      <artifactId>cloudevents-api</artifactId>\n+    </dependency>\n+  </dependencies>\n+\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-maven-plugin</artifactId>\n+        <configuration>\n+          <uberJar>true</uberJar>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a04a2cf9a3563de52431eb9545cc10e6c0a5a353"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU5NDEyMQ==", "bodyText": "Some as above", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r463594121", "createdAt": "2020-07-31T12:56:14Z", "author": {"login": "r00ta"}, "path": "explainability/explainability-service-messaging/pom.xml", "diffHunk": "@@ -0,0 +1,118 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>explainability</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <name>Kogito :: Explainability Service Messaging</name>\n+  <artifactId>explainability-service-messaging</artifactId>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-smallrye-health</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-smallrye-reactive-messaging</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-smallrye-reactive-messaging-kafka</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-tracing-decision-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>explainability-service</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.cloudevents</groupId>\n+      <artifactId>cloudevents-api</artifactId>\n+    </dependency>\n+  </dependencies>\n+\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-maven-plugin</artifactId>\n+        <configuration>\n+          <uberJar>true</uberJar>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0MDg0Ng=="}, "originalCommit": {"oid": "a04a2cf9a3563de52431eb9545cc10e6c0a5a353"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDIyMTY1OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-service-messaging/src/main/java/org/kie/kogito/explainability/messaging/ExplainabilityMessagingHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMDo0ODoyMVrOG6EUew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMDo0ODoyMVrOG6EUew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0MTM3MQ==", "bodyText": "I don't like mixed injection: can you please inject only fields or make all the injection done at constructor level?", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r463541371", "createdAt": "2020-07-31T10:48:21Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-service-messaging/src/main/java/org/kie/kogito/explainability/messaging/ExplainabilityMessagingHandler.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.explainability.messaging;\n+\n+import java.net.URI;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import io.cloudevents.v1.AttributesImpl;\n+import io.cloudevents.v1.CloudEventImpl;\n+import io.reactivex.BackpressureStrategy;\n+import io.reactivex.subjects.PublishSubject;\n+import io.smallrye.reactive.messaging.annotations.Blocking;\n+import org.eclipse.microprofile.context.ManagedExecutor;\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.Outgoing;\n+import org.kie.kogito.explainability.IExplanationService;\n+import org.kie.kogito.explainability.api.ExplainabilityRequestDto;\n+import org.kie.kogito.explainability.api.ExplainabilityResultDto;\n+import org.kie.kogito.explainability.models.ExplainabilityRequest;\n+import org.kie.kogito.tracing.decision.event.CloudEventUtils;\n+import org.reactivestreams.Publisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class ExplainabilityMessagingHandler {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExplainabilityMessagingHandler.class);\n+\n+    private static final URI URI_PRODUCER = URI.create(\"explainabilityService/ExplainabilityMessagingHandler\");\n+    private static final TypeReference<CloudEventImpl<ExplainabilityRequestDto>> CLOUD_EVENT_TYPE = new TypeReference<>() {\n+    };\n+    private final PublishSubject<String> eventSubject = PublishSubject.create();\n+    private final IExplanationService service;\n+\n+    @Inject\n+    ManagedExecutor executor;\n+\n+    @Inject\n+    public ExplainabilityMessagingHandler(IExplanationService service) {\n+        this.service = service;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a04a2cf9a3563de52431eb9545cc10e6c0a5a353"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDIyNTAyOnYy", "diffSide": "RIGHT", "path": "explainability/explainability-service-messaging/src/main/java/org/kie/kogito/explainability/messaging/ExplainabilityMessagingHandler.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMDo0OTo0NVrOG6EWqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwOTo0MDo1N1rOG7ZBvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0MTkyOA==", "bodyText": "Is there any reason why here is CompletableStage while all the other methods are using CompletableFuture?", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r463541928", "createdAt": "2020-07-31T10:49:45Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-service-messaging/src/main/java/org/kie/kogito/explainability/messaging/ExplainabilityMessagingHandler.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.explainability.messaging;\n+\n+import java.net.URI;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import io.cloudevents.v1.AttributesImpl;\n+import io.cloudevents.v1.CloudEventImpl;\n+import io.reactivex.BackpressureStrategy;\n+import io.reactivex.subjects.PublishSubject;\n+import io.smallrye.reactive.messaging.annotations.Blocking;\n+import org.eclipse.microprofile.context.ManagedExecutor;\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.Outgoing;\n+import org.kie.kogito.explainability.IExplanationService;\n+import org.kie.kogito.explainability.api.ExplainabilityRequestDto;\n+import org.kie.kogito.explainability.api.ExplainabilityResultDto;\n+import org.kie.kogito.explainability.models.ExplainabilityRequest;\n+import org.kie.kogito.tracing.decision.event.CloudEventUtils;\n+import org.reactivestreams.Publisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class ExplainabilityMessagingHandler {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExplainabilityMessagingHandler.class);\n+\n+    private static final URI URI_PRODUCER = URI.create(\"explainabilityService/ExplainabilityMessagingHandler\");\n+    private static final TypeReference<CloudEventImpl<ExplainabilityRequestDto>> CLOUD_EVENT_TYPE = new TypeReference<>() {\n+    };\n+    private final PublishSubject<String> eventSubject = PublishSubject.create();\n+    private final IExplanationService service;\n+\n+    @Inject\n+    ManagedExecutor executor;\n+\n+    @Inject\n+    public ExplainabilityMessagingHandler(IExplanationService service) {\n+        this.service = service;\n+    }\n+\n+    // Incoming\n+    @Incoming(\"trusty-explainability-request\")\n+    @Blocking\n+    public CompletionStage<Void> handleMessage(Message<String> message) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a04a2cf9a3563de52431eb9545cc10e6c0a5a353"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDkyOTIxMw==", "bodyText": "The smallrye Message message.ack() returns a CompletionStage, actually it makes sense that we also return CompletionStage in the library and in the other methods. I've changed it accordingly", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r464929213", "createdAt": "2020-08-04T09:40:57Z", "author": {"login": "r00ta"}, "path": "explainability/explainability-service-messaging/src/main/java/org/kie/kogito/explainability/messaging/ExplainabilityMessagingHandler.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.explainability.messaging;\n+\n+import java.net.URI;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import io.cloudevents.v1.AttributesImpl;\n+import io.cloudevents.v1.CloudEventImpl;\n+import io.reactivex.BackpressureStrategy;\n+import io.reactivex.subjects.PublishSubject;\n+import io.smallrye.reactive.messaging.annotations.Blocking;\n+import org.eclipse.microprofile.context.ManagedExecutor;\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.Outgoing;\n+import org.kie.kogito.explainability.IExplanationService;\n+import org.kie.kogito.explainability.api.ExplainabilityRequestDto;\n+import org.kie.kogito.explainability.api.ExplainabilityResultDto;\n+import org.kie.kogito.explainability.models.ExplainabilityRequest;\n+import org.kie.kogito.tracing.decision.event.CloudEventUtils;\n+import org.reactivestreams.Publisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class ExplainabilityMessagingHandler {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExplainabilityMessagingHandler.class);\n+\n+    private static final URI URI_PRODUCER = URI.create(\"explainabilityService/ExplainabilityMessagingHandler\");\n+    private static final TypeReference<CloudEventImpl<ExplainabilityRequestDto>> CLOUD_EVENT_TYPE = new TypeReference<>() {\n+    };\n+    private final PublishSubject<String> eventSubject = PublishSubject.create();\n+    private final IExplanationService service;\n+\n+    @Inject\n+    ManagedExecutor executor;\n+\n+    @Inject\n+    public ExplainabilityMessagingHandler(IExplanationService service) {\n+        this.service = service;\n+    }\n+\n+    // Incoming\n+    @Incoming(\"trusty-explainability-request\")\n+    @Blocking\n+    public CompletionStage<Void> handleMessage(Message<String> message) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0MTkyOA=="}, "originalCommit": {"oid": "a04a2cf9a3563de52431eb9545cc10e6c0a5a353"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDIzNzc0OnYy", "diffSide": "RIGHT", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/TrustyService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMDo1NDozM1rOG6EeTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNjoxOTowOVrOG6OUEw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0Mzg4Ng==", "bodyText": "What about add an application property to disable explanation? (And then update also related rest endpoints)", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r463543886", "createdAt": "2020-07-31T10:54:33Z", "author": {"login": "danielezonca"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/TrustyService.java", "diffHunk": "@@ -76,4 +83,15 @@ public void storeDecision(String executionId, Decision decision) {\n     public void updateDecision(String executionId, Decision decision) {\n         storageService.getDecisionsStorage().put(executionId, decision);\n     }\n+\n+    @Override\n+    public void processDecision(String executionId, Decision decision) {\n+        storeDecision(executionId, decision);\n+        explainabilityRequestProducer.sendEvent(new ExplainabilityRequestDto(UUID.randomUUID().toString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a04a2cf9a3563de52431eb9545cc10e6c0a5a353"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU4OTUyNg==", "bodyText": "makes sense", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r463589526", "createdAt": "2020-07-31T12:46:56Z", "author": {"login": "r00ta"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/TrustyService.java", "diffHunk": "@@ -76,4 +83,15 @@ public void storeDecision(String executionId, Decision decision) {\n     public void updateDecision(String executionId, Decision decision) {\n         storageService.getDecisionsStorage().put(executionId, decision);\n     }\n+\n+    @Override\n+    public void processDecision(String executionId, Decision decision) {\n+        storeDecision(executionId, decision);\n+        explainabilityRequestProducer.sendEvent(new ExplainabilityRequestDto(UUID.randomUUID().toString()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0Mzg4Ng=="}, "originalCommit": {"oid": "a04a2cf9a3563de52431eb9545cc10e6c0a5a353"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzcwNTEwNw==", "bodyText": "Please make it disable by default", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r463705107", "createdAt": "2020-07-31T16:19:09Z", "author": {"login": "danielezonca"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/TrustyService.java", "diffHunk": "@@ -76,4 +83,15 @@ public void storeDecision(String executionId, Decision decision) {\n     public void updateDecision(String executionId, Decision decision) {\n         storageService.getDecisionsStorage().put(executionId, decision);\n     }\n+\n+    @Override\n+    public void processDecision(String executionId, Decision decision) {\n+        storeDecision(executionId, decision);\n+        explainabilityRequestProducer.sendEvent(new ExplainabilityRequestDto(UUID.randomUUID().toString()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0Mzg4Ng=="}, "originalCommit": {"oid": "a04a2cf9a3563de52431eb9545cc10e6c0a5a353"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDUxMjUxOnYy", "diffSide": "RIGHT", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/api/Test.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMjozODowOFrOG6HAoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMjozODowOFrOG6HAoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU4NTQ0MQ==", "bodyText": "Remember to remove it before merging :)", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r463585441", "createdAt": "2020-07-31T12:38:08Z", "author": {"login": "danielezonca"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/api/Test.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package org.kie.kogito.trusty.service.api;\n+\n+import java.util.UUID;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.kie.kogito.explainability.api.ExplainabilityRequestDto;\n+import org.kie.kogito.trusty.service.messaging.outgoing.ExplainabilityRequestProducer;\n+\n+@Path(\"/test\")\n+public class Test {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5f5b09da86b562f9bc6c0bf7f4251cae7bbaba6"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NDUyMTUxOnYy", "diffSide": "RIGHT", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/incoming/TraceEventConsumer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMjo0MTowMlrOG6HFwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMjo0MTowMlrOG6HFwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU4Njc1Mg==", "bodyText": "Unused import?", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r463586752", "createdAt": "2020-07-31T12:41:02Z", "author": {"login": "danielezonca"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/incoming/TraceEventConsumer.java", "diffHunk": "@@ -25,6 +25,7 @@\n import com.fasterxml.jackson.core.type.TypeReference;\n import io.cloudevents.v1.AttributesImpl;\n import io.cloudevents.v1.CloudEventImpl;\n+import io.smallrye.reactive.messaging.annotations.Blocking;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5f5b09da86b562f9bc6c0bf7f4251cae7bbaba6"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg5NTQ3ODA4OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-service-rest/src/main/java/org/kie/kogito/explainability/rest/ExplainabilityApiV1.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNzoyODowM1rOG6QSuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNzoyODowM1rOG6QSuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzczNzUzMQ==", "bodyText": "Please rename :)", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r463737531", "createdAt": "2020-07-31T17:28:03Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-service-rest/src/main/java/org/kie/kogito/explainability/rest/ExplainabilityApiV1.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.explainability.rest;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import io.smallrye.mutiny.Uni;\n+import org.eclipse.microprofile.openapi.annotations.Operation;\n+import org.eclipse.microprofile.openapi.annotations.enums.SchemaType;\n+import org.eclipse.microprofile.openapi.annotations.media.Content;\n+import org.eclipse.microprofile.openapi.annotations.media.Schema;\n+import org.eclipse.microprofile.openapi.annotations.responses.APIResponse;\n+import org.eclipse.microprofile.openapi.annotations.responses.APIResponses;\n+import org.kie.kogito.explainability.IExplanationService;\n+import org.kie.kogito.explainability.api.ExplainabilityRequestDto;\n+import org.kie.kogito.explainability.models.ExplainabilityRequest;\n+\n+@Path(\"/v1\")\n+public class ExplainabilityApiV1 {\n+\n+    @Inject\n+    IExplanationService explanationService;\n+\n+    @POST\n+    @Path(\"/explain\")\n+    @APIResponses(value = {\n+            @APIResponse(description = \"Retrieve the explainability for a given decision.\", responseCode = \"200\", content = @Content(mediaType = MediaType.APPLICATION_JSON, schema = @Schema(type = SchemaType.OBJECT, implementation = ExplainabilityRequestDto.class))),\n+            @APIResponse(description = \"Bad Request\", responseCode = \"400\", content = @Content(mediaType = MediaType.TEXT_PLAIN))\n+    }\n+    )\n+    @Operation(summary = \"Retrieve the explainability for a given decision.\", description = \"Retrieve the explainability for a given decision.\")\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Uni<Response> test(ExplainabilityRequestDto request) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90327ef726b5687e449ab016a1b9769cb489179b"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDY1MTA4OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-service-rest/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMToxOToxMlrOG8bA1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwODoxMToxNlrOG8oHIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAxMDMyNA==", "bodyText": "PostgreSQL client?", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r466010324", "createdAt": "2020-08-05T21:19:12Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-service-rest/pom.xml", "diffHunk": "@@ -0,0 +1,131 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>explainability</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>1.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <name>Kogito :: Explainability Service Rest</name>\n+  <artifactId>explainability-service-rest</artifactId>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-resteasy</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-smallrye-health</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-resteasy-jackson</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-smallrye-openapi</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-resteasy-mutiny</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-reactive-pg-client</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a826a77218f82446468dcdb5f9acd0299c24d9a4"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIyNDkyOA==", "bodyText": "My Bad :D", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r466224928", "createdAt": "2020-08-06T08:11:16Z", "author": {"login": "r00ta"}, "path": "explainability/explainability-service-rest/pom.xml", "diffHunk": "@@ -0,0 +1,131 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>explainability</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>1.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <name>Kogito :: Explainability Service Rest</name>\n+  <artifactId>explainability-service-rest</artifactId>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-resteasy</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-smallrye-health</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-resteasy-jackson</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-smallrye-openapi</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-resteasy-mutiny</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-reactive-pg-client</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAxMDMyNA=="}, "originalCommit": {"oid": "a826a77218f82446468dcdb5f9acd0299c24d9a4"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDY1NjEzOnYy", "diffSide": "RIGHT", "path": "explainability/explainability-service-messaging/src/test/resources/application.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMToyMDo1MlrOG8bDzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwODoxODowMVrOG8oWGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAxMTA4NA==", "bodyText": "Is it possible to reuse the set of properties already defined in src? I would prefer to avoid this duplication", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r466011084", "createdAt": "2020-08-05T21:20:52Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-service-messaging/src/test/resources/application.properties", "diffHunk": "@@ -0,0 +1,13 @@\n+# Kafka Explainability Request", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a826a77218f82446468dcdb5f9acd0299c24d9a4"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIyODc2MA==", "bodyText": "Hi @danielezonca  afaik we have to specify the kafka properties in the tests as well. I've just double checked and if I remove those, the tests does not work anymore since the topics are not registered", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r466228760", "createdAt": "2020-08-06T08:18:01Z", "author": {"login": "r00ta"}, "path": "explainability/explainability-service-messaging/src/test/resources/application.properties", "diffHunk": "@@ -0,0 +1,13 @@\n+# Kafka Explainability Request", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAxMTA4NA=="}, "originalCommit": {"oid": "a826a77218f82446468dcdb5f9acd0299c24d9a4"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMDY2NTU1OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-service-messaging/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMToyNDowOFrOG8bJtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwODoxMTowNFrOG8oGwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAxMjU5Ng==", "bodyText": "We should not depend on tracing API here. From what I can see it is just for CloudEventUtils so we should probably refactor that class. Wdyt? What about create a ticket for that?", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r466012596", "createdAt": "2020-08-05T21:24:08Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-service-messaging/pom.xml", "diffHunk": "@@ -0,0 +1,166 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>explainability</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>1.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <name>Kogito :: Explainability Service Messaging</name>\n+  <artifactId>explainability-service-messaging</artifactId>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-smallrye-health</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-smallrye-reactive-messaging</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-smallrye-reactive-messaging-kafka</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>tracing-decision-api</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a826a77218f82446468dcdb5f9acd0299c24d9a4"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIyNDgzNA==", "bodyText": "Makes sense, I've created it https://issues.redhat.com/browse/KOGITO-2971", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r466224834", "createdAt": "2020-08-06T08:11:04Z", "author": {"login": "r00ta"}, "path": "explainability/explainability-service-messaging/pom.xml", "diffHunk": "@@ -0,0 +1,166 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>explainability</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>1.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <name>Kogito :: Explainability Service Messaging</name>\n+  <artifactId>explainability-service-messaging</artifactId>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-smallrye-health</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-smallrye-reactive-messaging</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-smallrye-reactive-messaging-kafka</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>tracing-decision-api</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAxMjU5Ng=="}, "originalCommit": {"oid": "a826a77218f82446468dcdb5f9acd0299c24d9a4"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzM3Nzk2OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-api/src/main/java/org/kie/kogito/explainability/api/ExplainabilityResultDto.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDowMDoxMlrOG803ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDoyNzo1NFrOG82D3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQzMzkzMA==", "bodyText": "?", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r466433930", "createdAt": "2020-08-06T14:00:12Z", "author": {"login": "evacchi"}, "path": "explainability/explainability-api/src/main/java/org/kie/kogito/explainability/api/ExplainabilityResultDto.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.explainability.api;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class ExplainabilityResultDto {\n+    @JsonProperty(\"executionId\")\n+    private String executionId;\n+\n+    // TODO: add properties", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a20a8ac2a739d7eeac52d6de373890c6bc038b"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ1MzQ2OQ==", "bodyText": "Hi @evacchi We still miss some information to complete this dto (kiegroup/kogito-runtimes#651). This PR adds the infrastructure, the content and the final integration with the data types are supposed to be done in another pull request as soon as we have all the information available", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r466453469", "createdAt": "2020-08-06T14:27:54Z", "author": {"login": "r00ta"}, "path": "explainability/explainability-api/src/main/java/org/kie/kogito/explainability/api/ExplainabilityResultDto.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.explainability.api;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class ExplainabilityResultDto {\n+    @JsonProperty(\"executionId\")\n+    private String executionId;\n+\n+    // TODO: add properties", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQzMzkzMA=="}, "originalCommit": {"oid": "99a20a8ac2a739d7eeac52d6de373890c6bc038b"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzQzNTQ4OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-service-messaging/src/main/java/org/kie/kogito/explainability/messaging/ExplainabilityMessagingHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDoxMzozMFrOG81bjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDoxMzozMFrOG81bjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ0MzE0OA==", "bodyText": "Can you please use \"{}\" instead of \"%s\"?", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r466443148", "createdAt": "2020-08-06T14:13:30Z", "author": {"login": "jiripetrlik"}, "path": "explainability/explainability-service-messaging/src/main/java/org/kie/kogito/explainability/messaging/ExplainabilityMessagingHandler.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.explainability.messaging;\n+\n+import java.net.URI;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import io.cloudevents.v1.AttributesImpl;\n+import io.cloudevents.v1.CloudEventImpl;\n+import io.reactivex.BackpressureStrategy;\n+import io.reactivex.subjects.PublishSubject;\n+import org.eclipse.microprofile.context.ManagedExecutor;\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.Outgoing;\n+import org.kie.kogito.explainability.IExplanationService;\n+import org.kie.kogito.explainability.api.ExplainabilityRequestDto;\n+import org.kie.kogito.explainability.api.ExplainabilityResultDto;\n+import org.kie.kogito.explainability.models.ExplainabilityRequest;\n+import org.kie.kogito.tracing.decision.event.CloudEventUtils;\n+import org.reactivestreams.Publisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class ExplainabilityMessagingHandler {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExplainabilityMessagingHandler.class);\n+\n+    private static final URI URI_PRODUCER = URI.create(\"explainabilityService/ExplainabilityMessagingHandler\");\n+    private static final TypeReference<CloudEventImpl<ExplainabilityRequestDto>> CLOUD_EVENT_TYPE = new TypeReference<>() {\n+    };\n+    private final PublishSubject<String> eventSubject = PublishSubject.create();\n+\n+    private Executor executor;\n+\n+    private IExplanationService explanationService;\n+\n+    @Inject\n+    public ExplainabilityMessagingHandler(IExplanationService explanationService, ManagedExecutor executor) {\n+        this.explanationService = explanationService;\n+        this.executor = executor;\n+    }\n+\n+    public ExplainabilityMessagingHandler(IExplanationService explanationService, Executor executor) {\n+        this.explanationService = explanationService;\n+        this.executor = executor;\n+    }\n+\n+    // Incoming\n+    @Incoming(\"trusty-explainability-request\")\n+    public CompletionStage<Void> handleMessage(Message<String> message) {\n+        try {\n+            Optional<CloudEventImpl<ExplainabilityRequestDto>> cloudEventOpt = decodeCloudEvent(message.getPayload());\n+            if (!cloudEventOpt.isPresent()) {\n+                return message.ack();\n+            }\n+\n+            CloudEventImpl<ExplainabilityRequestDto> cloudEvent = cloudEventOpt.get();\n+            return CompletableFuture\n+                    .supplyAsync(() -> handleCloudEvent(cloudEvent), executor)\n+                    .thenAccept(x -> message.ack());\n+        } catch (Exception e) {\n+            LOGGER.error(\"Something unexpected happened during the processing of an Event. The event is discarded.\", e);\n+        }\n+        return message.ack();\n+    }\n+\n+    private Optional<CloudEventImpl<ExplainabilityRequestDto>> decodeCloudEvent(String payload) {\n+        try {\n+            return Optional.of(CloudEventUtils.decode(payload, CLOUD_EVENT_TYPE));\n+        } catch (IllegalStateException e) {\n+            LOGGER.error(String.format(\"Can't decode message to CloudEvent: %s\", payload), e);\n+            return Optional.empty();\n+        }\n+    }\n+\n+    private CompletionStage<Void> handleCloudEvent(CloudEventImpl<ExplainabilityRequestDto> cloudEvent) {\n+        AttributesImpl attributes = cloudEvent.getAttributes();\n+        Optional<ExplainabilityRequestDto> optData = cloudEvent.getData();\n+\n+        if (!optData.isPresent()) {\n+            LOGGER.error(\"Received CloudEvent with id {} from {} with empty data\", attributes.getId(), attributes.getSource());\n+            return CompletableFuture.completedFuture(null);\n+        }\n+\n+        LOGGER.info(\"Received CloudEvent with id {} from {}\", attributes.getId(), attributes.getSource());\n+\n+        ExplainabilityRequestDto explainabilityResult = optData.get();\n+\n+        return explanationService\n+                .explainAsync(ExplainabilityRequest.from(explainabilityResult))\n+                .thenAcceptAsync(this::sendEvent, executor);\n+    }\n+\n+    // Outgoing\n+    public CompletionStage<Void> sendEvent(ExplainabilityResultDto result) {\n+        LOGGER.info(String.format(\"Explainability service emits explainability for execution with ID %s\", result.getExecutionId()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a20a8ac2a739d7eeac52d6de373890c6bc038b"}, "originalPosition": 119}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzQ0MDM4OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-service/src/main/java/org/kie/kogito/explainability/ExplanationService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDoxNDo0M1rOG81eqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDoxNDo0M1rOG81eqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ0Mzk0NQ==", "bodyText": "Please remove commented code or add some explanation why is useful.", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r466443945", "createdAt": "2020-08-06T14:14:43Z", "author": {"login": "jiripetrlik"}, "path": "explainability/explainability-service/src/main/java/org/kie/kogito/explainability/ExplanationService.java", "diffHunk": "@@ -16,6 +16,29 @@\n \n package org.kie.kogito.explainability;\n \n-public class ExplanationService {\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n \n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.eclipse.microprofile.context.ManagedExecutor;\n+import org.kie.kogito.explainability.api.ExplainabilityResultDto;\n+import org.kie.kogito.explainability.models.ExplainabilityRequest;\n+\n+@ApplicationScoped\n+public class ExplanationService implements IExplanationService {\n+\n+    // private static final LimeExplainer LIME_EXPLAINER = new LimeExplainer(0, 0, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a20a8ac2a739d7eeac52d6de373890c6bc038b"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzQ0NjQ5OnYy", "diffSide": "RIGHT", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/outgoing/ExplainabilityRequestProducer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDoxNjowN1rOG81iTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDoxNjowN1rOG81iTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ0NDg3OA==", "bodyText": "Use \"{}\" instead of \"%s\".", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r466444878", "createdAt": "2020-08-06T14:16:07Z", "author": {"login": "jiripetrlik"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/outgoing/ExplainabilityRequestProducer.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.messaging.outgoing;\n+\n+import java.net.URI;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import io.reactivex.BackpressureStrategy;\n+import io.reactivex.subjects.PublishSubject;\n+import org.eclipse.microprofile.reactive.messaging.Outgoing;\n+import org.kie.kogito.explainability.api.ExplainabilityRequestDto;\n+import org.kie.kogito.tracing.decision.event.CloudEventUtils;\n+import org.reactivestreams.Publisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class ExplainabilityRequestProducer {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExplainabilityRequestProducer.class);\n+\n+    private static final URI URI_PRODUCER = URI.create(\"trustyService/ExplainabilityRequestProducer\");\n+\n+    private final PublishSubject<String> eventSubject = PublishSubject.create();\n+\n+    public void sendEvent(ExplainabilityRequestDto request) {\n+        LOGGER.info(String.format(\"Sending explainability request with id %s\", request.getExecutionId()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a20a8ac2a739d7eeac52d6de373890c6bc038b"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzgxOTk3OnYy", "diffSide": "RIGHT", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/TrustyServiceImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTozOTo0M1rOG85KyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTozOTo0M1rOG85KyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwNDM5Mg==", "bodyText": "Missing @Override", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r466504392", "createdAt": "2020-08-06T15:39:43Z", "author": {"login": "manstis"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/TrustyServiceImpl.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service;\n+\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.kie.kogito.explainability.api.ExplainabilityRequestDto;\n+import org.kie.kogito.persistence.api.Storage;\n+import org.kie.kogito.persistence.api.query.AttributeFilter;\n+import org.kie.kogito.persistence.api.query.QueryFilterFactory;\n+import org.kie.kogito.trusty.service.messaging.incoming.ModelIdCreator;\n+import org.kie.kogito.trusty.service.messaging.outgoing.ExplainabilityRequestProducer;\n+import org.kie.kogito.trusty.storage.api.TrustyStorageService;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.Execution;\n+import org.kie.kogito.trusty.storage.api.model.ExplainabilityResult;\n+\n+@ApplicationScoped\n+public class TrustyServiceImpl implements TrustyService {\n+\n+    @ConfigProperty(name = \"trusty.explainability.enabled\")\n+    Boolean isExplainabilityEnabled;\n+\n+    @Inject\n+    ExplainabilityRequestProducer explainabilityRequestProducer;\n+\n+    @Inject\n+    TrustyStorageService storageService;\n+\n+    TrustyServiceImpl() {\n+        // dummy constructor needed\n+    }\n+\n+    public TrustyServiceImpl(TrustyStorageService storageService) {\n+        this.storageService = storageService;\n+    }\n+\n+    @Override\n+    public List<Execution> getExecutionHeaders(OffsetDateTime from, OffsetDateTime to, int limit, int offset, String prefix) {\n+        Storage<String, Decision> storage = storageService.getDecisionsStorage();\n+        List<AttributeFilter<?>> filters = new ArrayList<>();\n+        filters.add(QueryFilterFactory.like(Execution.EXECUTION_ID_FIELD, prefix + \"*\"));\n+        filters.add(QueryFilterFactory.greaterThanEqual(Execution.EXECUTION_TIMESTAMP_FIELD, from.toInstant().toEpochMilli()));\n+        filters.add(QueryFilterFactory.lessThanEqual(Execution.EXECUTION_TIMESTAMP_FIELD, to.toInstant().toEpochMilli()));\n+        return new ArrayList<>(storage.query().limit(limit).offset(offset).filter(filters).execute());\n+    }\n+\n+    @Override\n+    public Decision getDecisionById(String executionId) {\n+        Storage<String, Decision> storage = storageService.getDecisionsStorage();\n+        if (!storage.containsKey(executionId)) {\n+            throw new IllegalArgumentException(String.format(\"A decision with ID %s does not exist in the storage.\", executionId));\n+        }\n+        return storage.get(executionId);\n+    }\n+\n+    @Override\n+    public void storeDecision(String executionId, Decision decision) {\n+        Storage<String, Decision> storage = storageService.getDecisionsStorage();\n+        if (storage.containsKey(executionId)) {\n+            throw new IllegalArgumentException(String.format(\"A decision with ID %s is already present in the storage.\", executionId));\n+        }\n+        storage.put(executionId, decision);\n+    }\n+\n+    @Override\n+    public void updateDecision(String executionId, Decision decision) {\n+        storageService.getDecisionsStorage().put(executionId, decision);\n+    }\n+\n+    @Override\n+    public void processDecision(String executionId, Decision decision) {\n+        storeDecision(executionId, decision);\n+        // TODO: Create a proper ExplainabilityRequestDto when all the properties will be defined and available. https://issues.redhat.com/browse/KOGITO-2944\n+        if (Boolean.TRUE.equals(isExplainabilityEnabled)) {\n+            explainabilityRequestProducer.sendEvent(new ExplainabilityRequestDto(executionId));\n+        }\n+    }\n+\n+    @Override\n+    public void storeExplainability(String executionId, ExplainabilityResult result) {\n+        // TODO: Store it https://issues.redhat.com/browse/KOGITO-2945\n+    }\n+\n+    public void storeModel(String groupId, String artifactId, String version, String name, String namespace, String definition) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0474557a72d881557213904d995e7d1a297ce89a"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzgzMjYxOnYy", "diffSide": "RIGHT", "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/messaging/ModelEventConsumerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTo0MjozMlrOG85Sjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTo0MjozMlrOG85Sjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwNjM4Mg==", "bodyText": "I suspect a class has moved w/o updating the test package too?\nIMO it's nice to keep classes and test classes in the same package where appropriate (as, I believe, is this case).", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r466506382", "createdAt": "2020-08-06T15:42:32Z", "author": {"login": "manstis"}, "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/messaging/ModelEventConsumerTest.java", "diffHunk": "@@ -21,6 +21,7 @@\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.kie.kogito.trusty.service.TrustyService;\n+import org.kie.kogito.trusty.service.messaging.incoming.ModelEventConsumer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0474557a72d881557213904d995e7d1a297ce89a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzgzMjk3OnYy", "diffSide": "RIGHT", "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/messaging/ModelEventConverterTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTo0Mjo0MFrOG85Szg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTo0Mjo0MFrOG85Szg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwNjQ0Ng==", "bodyText": "As above.", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r466506446", "createdAt": "2020-08-06T15:42:40Z", "author": {"login": "manstis"}, "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/messaging/ModelEventConverterTest.java", "diffHunk": "@@ -17,6 +17,7 @@\n package org.kie.kogito.trusty.service.messaging;\n \n import org.junit.jupiter.api.Test;\n+import org.kie.kogito.trusty.service.messaging.incoming.ModelEventConverter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0474557a72d881557213904d995e7d1a297ce89a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzgzMzU2OnYy", "diffSide": "RIGHT", "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/messaging/ModelIdCreatorTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTo0Mjo0OFrOG85TKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTo0Mjo0OFrOG85TKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwNjUzOA==", "bodyText": "As above.", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r466506538", "createdAt": "2020-08-06T15:42:48Z", "author": {"login": "manstis"}, "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/messaging/ModelIdCreatorTest.java", "diffHunk": "@@ -21,6 +21,7 @@\n import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.Arguments;\n import org.junit.jupiter.params.provider.MethodSource;\n+import org.kie.kogito.trusty.service.messaging.incoming.ModelIdCreator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0474557a72d881557213904d995e7d1a297ce89a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzgzOTUxOnYy", "diffSide": "LEFT", "path": "ui-packages/packages/management-console/src/components/Atoms/ProcessListModal/ProcessListModal.tsx", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTo0NDoxM1rOG85W-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNjozODoxOVrOG87bbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwNzUxNQ==", "bodyText": "Ouch.. Out of interest do you know why this PR include Typescript reformatting?!\nTypescript changes are probably outside the scope of your PR!", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r466507515", "createdAt": "2020-08-06T15:44:13Z", "author": {"login": "manstis"}, "path": "ui-packages/packages/management-console/src/components/Atoms/ProcessListModal/ProcessListModal.tsx", "diffHunk": "@@ -28,7 +28,6 @@ const ProcessListModal: React.FC<IOwnProps> = ({\n   operationResult,\n   processName\n }) => {\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0474557a72d881557213904d995e7d1a297ce89a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUzMzI1OQ==", "bodyText": "Hi @manstis , thanks for spotting this. I think these changes were automatically committed by the husky plugin that somebody configured on the ui side. I will disable it and restore the files", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r466533259", "createdAt": "2020-08-06T16:24:23Z", "author": {"login": "r00ta"}, "path": "ui-packages/packages/management-console/src/components/Atoms/ProcessListModal/ProcessListModal.tsx", "diffHunk": "@@ -28,7 +28,6 @@ const ProcessListModal: React.FC<IOwnProps> = ({\n   operationResult,\n   processName\n }) => {\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwNzUxNQ=="}, "originalCommit": {"oid": "0474557a72d881557213904d995e7d1a297ce89a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjU0MTQyMw==", "bodyText": "Or yeah, somehow the git hook husky was activated in my env :D", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r466541423", "createdAt": "2020-08-06T16:38:19Z", "author": {"login": "r00ta"}, "path": "ui-packages/packages/management-console/src/components/Atoms/ProcessListModal/ProcessListModal.tsx", "diffHunk": "@@ -28,7 +28,6 @@ const ProcessListModal: React.FC<IOwnProps> = ({\n   operationResult,\n   processName\n }) => {\n-", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwNzUxNQ=="}, "originalCommit": {"oid": "0474557a72d881557213904d995e7d1a297ce89a"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 850, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}