{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI2MDgxMjE4", "number": 241, "reviewThreads": {"totalCount": 38, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjoyNjozN1rOEBbjMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNToyMjowM1rOEJ71zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTM1NDA4OnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/service/KeycloakIntegrationIndexingServiceIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjoyNjozN1rOGdRZSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMTowOTowOFrOGeXDig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM0Njg4OQ==", "bodyText": "Keycloack -> Keycloak", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r433346889", "createdAt": "2020-06-01T16:26:37Z", "author": {"login": "jstastny-cz"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/service/KeycloakIntegrationIndexingServiceIT.java", "diffHunk": "@@ -66,27 +70,38 @@ public void testNoTokenProvided() {\n     @Test\n     public void testAuthorizedUserProvided() {\n         //jdoe has role:user and confidential, resource served\n-        given().auth().oauth2(getAccessToken(\"jdoe\"))\n-                .when().get(\"/graphiql/\")\n-                .then()\n-                .statusCode(404);\n-\n         given().auth().oauth2(getAccessToken(\"jdoe\"))\n                 .contentType(ContentType.JSON)\n                 .body(\"{ \\\"query\\\" : \\\"{ProcessInstances{ id } }\\\" }\")\n                 .when().post(\"/graphql\")\n                 .then().log().ifValidationFails().statusCode(200);\n     }\n \n+    @Test\n+    public void graphiqlLoginOnKeycloackServedTest(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f19843236009e0554d187eaeb530c2a62936c547"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ4ODIwMg==", "bodyText": "ups! thanks!", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r434488202", "createdAt": "2020-06-03T11:09:08Z", "author": {"login": "nmirasch"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/service/KeycloakIntegrationIndexingServiceIT.java", "diffHunk": "@@ -66,27 +70,38 @@ public void testNoTokenProvided() {\n     @Test\n     public void testAuthorizedUserProvided() {\n         //jdoe has role:user and confidential, resource served\n-        given().auth().oauth2(getAccessToken(\"jdoe\"))\n-                .when().get(\"/graphiql/\")\n-                .then()\n-                .statusCode(404);\n-\n         given().auth().oauth2(getAccessToken(\"jdoe\"))\n                 .contentType(ContentType.JSON)\n                 .body(\"{ \\\"query\\\" : \\\"{ProcessInstances{ id } }\\\" }\")\n                 .when().post(\"/graphql\")\n                 .then().log().ifValidationFails().statusCode(200);\n     }\n \n+    @Test\n+    public void graphiqlLoginOnKeycloackServedTest(){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM0Njg4OQ=="}, "originalCommit": {"oid": "f19843236009e0554d187eaeb530c2a62936c547"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTM1NDYwOnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/service/KeycloakIntegrationIndexingServiceIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjoyNjo0M1rOGdRZog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMToxMTo1MlrOGeXIgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM0Njk3OA==", "bodyText": "why moving this from application.properties to here?", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r433346978", "createdAt": "2020-06-01T16:26:43Z", "author": {"login": "jstastny-cz"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/service/KeycloakIntegrationIndexingServiceIT.java", "diffHunk": "@@ -32,18 +33,25 @@\n @QuarkusTestResource(InfinispanServerTestResource.class)\n public class KeycloakIntegrationIndexingServiceIT {\n \n-    private static final String KEYCLOAK_SERVER_URL = System.getProperty(\"keycloak.url\", \"http://localhost:8281/auth\");\n-    private static final String KEYCLOAK_REALM = \"kogito\";\n-    private static final String KEYCLOAK_CLIENT_ID = \"kogito-data-index-service\";\n+    private static final String KEYCLOAK_SERVER_URL = System.getProperty(\"quarkus.oidc.auth-server-url\", \"http://localhost:8281/auth/realms/kogito\");\n+    private static final String KEYCLOAK_CLIENT_ID = System.getProperty(\"quarkus.oidc.client-id\", \"kogito-data-index-service\");\n+    private static final String KEYCLOAK_CLIENT_SECRET = System.getProperty(\"quarkus.oidc.credentials.secret\", \"secret\");\n+\n+    @BeforeAll\n+    public static void setup() {\n+        System.setProperty(\"quarkus.http.auth.policy.role-policy1.roles-allowed\", \"confidential\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f19843236009e0554d187eaeb530c2a62936c547"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ4OTQ3Mg==", "bodyText": "@jstastny-cz yeah, I agree,  I have removed this. The purpose of this properties setting were regarding isolate  testing at my local, no need to be there.", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r434489472", "createdAt": "2020-06-03T11:11:52Z", "author": {"login": "nmirasch"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/service/KeycloakIntegrationIndexingServiceIT.java", "diffHunk": "@@ -32,18 +33,25 @@\n @QuarkusTestResource(InfinispanServerTestResource.class)\n public class KeycloakIntegrationIndexingServiceIT {\n \n-    private static final String KEYCLOAK_SERVER_URL = System.getProperty(\"keycloak.url\", \"http://localhost:8281/auth\");\n-    private static final String KEYCLOAK_REALM = \"kogito\";\n-    private static final String KEYCLOAK_CLIENT_ID = \"kogito-data-index-service\";\n+    private static final String KEYCLOAK_SERVER_URL = System.getProperty(\"quarkus.oidc.auth-server-url\", \"http://localhost:8281/auth/realms/kogito\");\n+    private static final String KEYCLOAK_CLIENT_ID = System.getProperty(\"quarkus.oidc.client-id\", \"kogito-data-index-service\");\n+    private static final String KEYCLOAK_CLIENT_SECRET = System.getProperty(\"quarkus.oidc.credentials.secret\", \"secret\");\n+\n+    @BeforeAll\n+    public static void setup() {\n+        System.setProperty(\"quarkus.http.auth.policy.role-policy1.roles-allowed\", \"confidential\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM0Njk3OA=="}, "originalCommit": {"oid": "f19843236009e0554d187eaeb530c2a62936c547"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTM2NDEyOnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/service/KeycloakIntegrationIndexingServiceIT.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjoyOTozNVrOGdRfog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNToyMDo0N1rOGqsHAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM0ODUxNA==", "bodyText": "Is the status code under our control? Some sites use 302 code to signal that the page is there, but something still needs to be done to access it.", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r433348514", "createdAt": "2020-06-01T16:29:35Z", "author": {"login": "jstastny-cz"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/service/KeycloakIntegrationIndexingServiceIT.java", "diffHunk": "@@ -66,27 +70,38 @@ public void testNoTokenProvided() {\n     @Test\n     public void testAuthorizedUserProvided() {\n         //jdoe has role:user and confidential, resource served\n-        given().auth().oauth2(getAccessToken(\"jdoe\"))\n-                .when().get(\"/graphiql/\")\n-                .then()\n-                .statusCode(404);\n-\n         given().auth().oauth2(getAccessToken(\"jdoe\"))\n                 .contentType(ContentType.JSON)\n                 .body(\"{ \\\"query\\\" : \\\"{ProcessInstances{ id } }\\\" }\")\n                 .when().post(\"/graphql\")\n                 .then().log().ifValidationFails().statusCode(200);\n     }\n \n+    @Test\n+    public void graphiqlLoginOnKeycloackServedTest(){\n+        // Returning keycloak login page\n+        given().when().get(\"/graphiql/\")\n+                .then()\n+                .statusCode(200);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f19843236009e0554d187eaeb530c2a62936c547"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ5MTExNg==", "bodyText": "@jstastny-cz Yeah, that value is the one returned by the quarkus oidc extension when it's configured as web-app. It returns request code for 'OK' and redirect to keycloak login.", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r434491116", "createdAt": "2020-06-03T11:15:15Z", "author": {"login": "nmirasch"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/service/KeycloakIntegrationIndexingServiceIT.java", "diffHunk": "@@ -66,27 +70,38 @@ public void testNoTokenProvided() {\n     @Test\n     public void testAuthorizedUserProvided() {\n         //jdoe has role:user and confidential, resource served\n-        given().auth().oauth2(getAccessToken(\"jdoe\"))\n-                .when().get(\"/graphiql/\")\n-                .then()\n-                .statusCode(404);\n-\n         given().auth().oauth2(getAccessToken(\"jdoe\"))\n                 .contentType(ContentType.JSON)\n                 .body(\"{ \\\"query\\\" : \\\"{ProcessInstances{ id } }\\\" }\")\n                 .when().post(\"/graphql\")\n                 .then().log().ifValidationFails().statusCode(200);\n     }\n \n+    @Test\n+    public void graphiqlLoginOnKeycloackServedTest(){\n+        // Returning keycloak login page\n+        given().when().get(\"/graphiql/\")\n+                .then()\n+                .statusCode(200);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM0ODUxNA=="}, "originalCommit": {"oid": "f19843236009e0554d187eaeb530c2a62936c547"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzNDQ2NQ==", "bodyText": "@nmirasch can we perhaps validate something in the body of the response that it actually redirected to Keycloack login page?", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r444634465", "createdAt": "2020-06-24T04:14:00Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/service/KeycloakIntegrationIndexingServiceIT.java", "diffHunk": "@@ -66,27 +70,38 @@ public void testNoTokenProvided() {\n     @Test\n     public void testAuthorizedUserProvided() {\n         //jdoe has role:user and confidential, resource served\n-        given().auth().oauth2(getAccessToken(\"jdoe\"))\n-                .when().get(\"/graphiql/\")\n-                .then()\n-                .statusCode(404);\n-\n         given().auth().oauth2(getAccessToken(\"jdoe\"))\n                 .contentType(ContentType.JSON)\n                 .body(\"{ \\\"query\\\" : \\\"{ProcessInstances{ id } }\\\" }\")\n                 .when().post(\"/graphql\")\n                 .then().log().ifValidationFails().statusCode(200);\n     }\n \n+    @Test\n+    public void graphiqlLoginOnKeycloackServedTest(){\n+        // Returning keycloak login page\n+        given().when().get(\"/graphiql/\")\n+                .then()\n+                .statusCode(200);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM0ODUxNA=="}, "originalCommit": {"oid": "f19843236009e0554d187eaeb530c2a62936c547"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQ3NzgwNw==", "bodyText": "@nmirasch I think just this one needs some improvement. A 200 could also be returned if the auth is disabled right? Anything that checks that it actually reached the login page.", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r445477807", "createdAt": "2020-06-25T11:03:04Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/service/KeycloakIntegrationIndexingServiceIT.java", "diffHunk": "@@ -66,27 +70,38 @@ public void testNoTokenProvided() {\n     @Test\n     public void testAuthorizedUserProvided() {\n         //jdoe has role:user and confidential, resource served\n-        given().auth().oauth2(getAccessToken(\"jdoe\"))\n-                .when().get(\"/graphiql/\")\n-                .then()\n-                .statusCode(404);\n-\n         given().auth().oauth2(getAccessToken(\"jdoe\"))\n                 .contentType(ContentType.JSON)\n                 .body(\"{ \\\"query\\\" : \\\"{ProcessInstances{ id } }\\\" }\")\n                 .when().post(\"/graphql\")\n                 .then().log().ifValidationFails().statusCode(200);\n     }\n \n+    @Test\n+    public void graphiqlLoginOnKeycloackServedTest(){\n+        // Returning keycloak login page\n+        given().when().get(\"/graphiql/\")\n+                .then()\n+                .statusCode(200);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM0ODUxNA=="}, "originalCommit": {"oid": "f19843236009e0554d187eaeb530c2a62936c547"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQxNjA2NQ==", "bodyText": "@nmirasch ^", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r447416065", "createdAt": "2020-06-30T05:20:47Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/service/KeycloakIntegrationIndexingServiceIT.java", "diffHunk": "@@ -66,27 +70,38 @@ public void testNoTokenProvided() {\n     @Test\n     public void testAuthorizedUserProvided() {\n         //jdoe has role:user and confidential, resource served\n-        given().auth().oauth2(getAccessToken(\"jdoe\"))\n-                .when().get(\"/graphiql/\")\n-                .then()\n-                .statusCode(404);\n-\n         given().auth().oauth2(getAccessToken(\"jdoe\"))\n                 .contentType(ContentType.JSON)\n                 .body(\"{ \\\"query\\\" : \\\"{ProcessInstances{ id } }\\\" }\")\n                 .when().post(\"/graphql\")\n                 .then().log().ifValidationFails().statusCode(200);\n     }\n \n+    @Test\n+    public void graphiqlLoginOnKeycloackServedTest(){\n+        // Returning keycloak login page\n+        given().when().get(\"/graphiql/\")\n+                .then()\n+                .statusCode(200);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM0ODUxNA=="}, "originalCommit": {"oid": "f19843236009e0554d187eaeb530c2a62936c547"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTM5NzIxOnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/main/resources/application.properties", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNjozOToxMlrOGdR0NQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMToxNjo0OFrOGeXRmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM1Mzc4MQ==", "bodyText": "wondering why these two are not in the test properties?", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r433353781", "createdAt": "2020-06-01T16:39:12Z", "author": {"login": "jstastny-cz"}, "path": "data-index/data-index-service/src/main/resources/application.properties", "diffHunk": "@@ -74,6 +74,13 @@ quarkus.oidc.auth-server-url=none\n %keycloak.quarkus.oidc.auth-server-url=http://localhost:8280/auth/realms/kogito\n %keycloak.quarkus.oidc.client-id=kogito-data-index-service\n %keycloak.quarkus.oidc.credentials.secret=secret\n-%keycloak.quarkus.http.auth.policy.role-policy1.roles-allowed=confidential\n-%keycloak.quarkus.http.auth.permission.roles1.paths=/graphql\n-%keycloak.quarkus.http.auth.permission.roles1.policy=role-policy1\n+%keycloak.quarkus.oidc.application-type=service\n+\n+%keycloak.quarkus.oidc.web-app-tenant.auth-server-url=http://localhost:8280/auth/realms/kogito\n+%keycloak.quarkus.oidc.web-app-tenant.client-id=kogito-data-index-service\n+%keycloak.quarkus.oidc.web-app-tenant.credentials.secret=secret\n+%keycloak.quarkus.oidc.web-app-tenant.application-type=web-app\n+\n+# HTTP Security Configuration\n+%keycloak.quarkus.http.auth.permission.authenticated.paths=/*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f19843236009e0554d187eaeb530c2a62936c547"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ5MTgwMA==", "bodyText": "@jstastny-cz yeah! same comment as before here. That authentication configuration is passed as system prop at the pom.xml test declaration.", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r434491800", "createdAt": "2020-06-03T11:16:48Z", "author": {"login": "nmirasch"}, "path": "data-index/data-index-service/src/main/resources/application.properties", "diffHunk": "@@ -74,6 +74,13 @@ quarkus.oidc.auth-server-url=none\n %keycloak.quarkus.oidc.auth-server-url=http://localhost:8280/auth/realms/kogito\n %keycloak.quarkus.oidc.client-id=kogito-data-index-service\n %keycloak.quarkus.oidc.credentials.secret=secret\n-%keycloak.quarkus.http.auth.policy.role-policy1.roles-allowed=confidential\n-%keycloak.quarkus.http.auth.permission.roles1.paths=/graphql\n-%keycloak.quarkus.http.auth.permission.roles1.policy=role-policy1\n+%keycloak.quarkus.oidc.application-type=service\n+\n+%keycloak.quarkus.oidc.web-app-tenant.auth-server-url=http://localhost:8280/auth/realms/kogito\n+%keycloak.quarkus.oidc.web-app-tenant.client-id=kogito-data-index-service\n+%keycloak.quarkus.oidc.web-app-tenant.credentials.secret=secret\n+%keycloak.quarkus.oidc.web-app-tenant.application-type=web-app\n+\n+# HTTP Security Configuration\n+%keycloak.quarkus.http.auth.permission.authenticated.paths=/*", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM1Mzc4MQ=="}, "originalCommit": {"oid": "f19843236009e0554d187eaeb530c2a62936c547"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTYxNDIyOnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/auth/MultiTenantResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNzo0NjoyMFrOGdT_WA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QxMToyMDowMlrOGeXXaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4OTQwMA==", "bodyText": "so this decides which tenant is accessing the app based on the context, right. graphiql is a UI, thus web-app-tenant should be used, otherwise it will resort to the default config, is that correct?", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r433389400", "createdAt": "2020-06-01T17:46:20Z", "author": {"login": "jstastny-cz"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/auth/MultiTenantResolver.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.auth;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import io.quarkus.oidc.TenantResolver;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@ApplicationScoped\n+public class MultiTenantResolver implements TenantResolver {\n+\n+    @Override\n+    public String resolve(RoutingContext context) {\n+        if (context.request().path().startsWith(\"/graphiql\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f19843236009e0554d187eaeb530c2a62936c547"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDQ5MzI4OA==", "bodyText": "@jstastny-cz Correct! that's the idea, define a different oidc configuration for the ui (graphiql) and the graphql service. Regarding the keycloak authentication workflows are different in both cases.", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r434493288", "createdAt": "2020-06-03T11:20:02Z", "author": {"login": "nmirasch"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/auth/MultiTenantResolver.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.auth;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import io.quarkus.oidc.TenantResolver;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@ApplicationScoped\n+public class MultiTenantResolver implements TenantResolver {\n+\n+    @Override\n+    public String resolve(RoutingContext context) {\n+        if (context.request().path().startsWith(\"/graphiql\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzM4OTQwMA=="}, "originalCommit": {"oid": "f19843236009e0554d187eaeb530c2a62936c547"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTczMzk5OnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/auth/MultiTenantResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNjoyMjozNVrOGe3WkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMToyNzowMVrOGfBbmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAxNzM2MQ==", "bodyText": "At the moment, I see these hard-coded values:\n\n\"graphiql\": before this PR, this value was only used in VertxRouterSetup, but now it's used also in MultiTenantResolved and KeycloakIntegrationIndexingServiceIT.\n\"web-app-tenant\": it's used here and in the properties to configure the oidc properties.\n\nWhat about to add a property to define the \"graphiql\" property:\n\u00b4\u00b4\u00b4\ndataindex.vertx-graphql.ui.path=/graphiql\n\u00b4\u00b4\u00b4\n| Note that the name property is in sync with the default vertx property called \"quarkus.vertx-graphql.ui.path\" (more in here)\nAnd also define the tenants for each path in the properties:\ndataindex.paths.\"/graphiql\".tenant=web-app-tenant\n\nThis way we can configure the tenants and configuration entirely driven by properties:\n%keycloak.quarkus.oidc.web-app-tenant.auth-server-url=http://localhost:8280/auth/realms/kogito\n%keycloak.quarkus.oidc.web-app-tenant.client-id=kogito-data-index-service\n%keycloak.quarkus.oidc.web-app-tenant.credentials.secret=secret\n%keycloak.quarkus.oidc.web-app-tenant.application-type=web-app\n\nAnd we can even define more custom tenants for different paths:\ndataindex.paths.\"/custom\".tenant=custom-app-tenant\n%keycloak.quarkus.oidc.custom-app-tenant.auth-server-url=http://localhost:8280/auth/realms/kogitocustom\n\nThis is specially interesting to define different roles by paths.\nWhat do you think?", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r435017361", "createdAt": "2020-06-04T06:22:35Z", "author": {"login": "Sgitario"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/auth/MultiTenantResolver.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.auth;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import io.quarkus.oidc.TenantResolver;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@ApplicationScoped\n+public class MultiTenantResolver implements TenantResolver {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c94276237755eb4f2c55f2f09ee82a811aee743"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE4MjQ4OQ==", "bodyText": "Hi @Sgitario, I think it's a good idea of making the graphiql path and oidc-tenant  given as configuration properties.Let me give it a try Thanks!", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r435182489", "createdAt": "2020-06-04T11:27:01Z", "author": {"login": "nmirasch"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/auth/MultiTenantResolver.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.auth;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import io.quarkus.oidc.TenantResolver;\n+import io.vertx.ext.web.RoutingContext;\n+\n+@ApplicationScoped\n+public class MultiTenantResolver implements TenantResolver {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAxNzM2MQ=="}, "originalCommit": {"oid": "9c94276237755eb4f2c55f2f09ee82a811aee743"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTczOTM2OnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/vertx/VertxRouterSetup.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNjoyNDo1MVrOGe3Z6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwOTo1NDoyMVrOGe-a0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAxODIxOQ==", "bodyText": "I know this was not changed as part of this PR, but what is the difference between the graphiql and graphql? As far I can see in here, the graphql is only available when running the data index in dev mode?\nCan we remove the \"/graphql\" path and use the property \"quarkus.vertx-graphql.ui.path\" instead? So if in the future, we change this property, we don't need to change this class.", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r435018219", "createdAt": "2020-06-04T06:24:51Z", "author": {"login": "Sgitario"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/vertx/VertxRouterSetup.java", "diffHunk": "@@ -43,14 +48,37 @@\n     GraphQL graphQL;\n \n     void setupRouter(@Observes Router router) {\n-        if (Boolean.FALSE.equals(authEnabled)) {\n-            router.route(\"/graphiql/*\").handler(GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true)));\n-            router.route().handler(LoggerHandler.create());\n-            router.route().handler(StaticHandler.create());\n-            router.route().handler(FaviconHandler.create());\n-            router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", \"/graphiql/\").setStatusCode(302).end());\n+        GraphiQLHandler graphiQLHandler = GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true));\n+        if (Boolean.TRUE.equals(authEnabled)) {\n+            graphiQLHandler.graphiQLRequestHeaders(rc -> {\n+                MultiMap multiMap = MultiMap.caseInsensitiveMultiMap();\n+                String token = getCurrentAccessToken(rc);\n+                if (token.isEmpty()) {\n+                    token = rc.request().getHeader(HttpHeaders.AUTHORIZATION);\n+                }\n+                multiMap.add(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, \"*\");\n+                multiMap.add(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS, \"true\");\n+                multiMap.add(HttpHeaders.ACCESS_CONTROL_ALLOW_HEADERS, \"Authorization, Content-Type, Accept\");\n+                multiMap.add(\"Bearer-token\", \"Bearer \" + token);\n+                rc.request().headers().addAll(multiMap);\n+                return multiMap.add(HttpHeaders.AUTHORIZATION, \"Bearer \" + token);\n+            });\n         }\n+        router.route(\"/graphiql/*\").handler(graphiQLHandler);\n+        router.route().handler(LoggerHandler.create());\n+        router.route().handler(StaticHandler.create());\n+        router.route().handler(FaviconHandler.create());\n+        router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", \"/graphiql/\").setStatusCode(302).end());\n         router.route(\"/graphql\").handler(ApolloWSHandler.create(graphQL));\n         router.route(\"/graphql\").handler(GraphQLHandler.create(graphQL, new GraphQLHandlerOptions()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c94276237755eb4f2c55f2f09ee82a811aee743"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEyMzExNQ==", "bodyText": "That's a different endpoint. graphiql is web app, graphql is the service endpoint.", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r435123115", "createdAt": "2020-06-04T09:37:22Z", "author": {"login": "jstastny-cz"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/vertx/VertxRouterSetup.java", "diffHunk": "@@ -43,14 +48,37 @@\n     GraphQL graphQL;\n \n     void setupRouter(@Observes Router router) {\n-        if (Boolean.FALSE.equals(authEnabled)) {\n-            router.route(\"/graphiql/*\").handler(GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true)));\n-            router.route().handler(LoggerHandler.create());\n-            router.route().handler(StaticHandler.create());\n-            router.route().handler(FaviconHandler.create());\n-            router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", \"/graphiql/\").setStatusCode(302).end());\n+        GraphiQLHandler graphiQLHandler = GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true));\n+        if (Boolean.TRUE.equals(authEnabled)) {\n+            graphiQLHandler.graphiQLRequestHeaders(rc -> {\n+                MultiMap multiMap = MultiMap.caseInsensitiveMultiMap();\n+                String token = getCurrentAccessToken(rc);\n+                if (token.isEmpty()) {\n+                    token = rc.request().getHeader(HttpHeaders.AUTHORIZATION);\n+                }\n+                multiMap.add(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, \"*\");\n+                multiMap.add(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS, \"true\");\n+                multiMap.add(HttpHeaders.ACCESS_CONTROL_ALLOW_HEADERS, \"Authorization, Content-Type, Accept\");\n+                multiMap.add(\"Bearer-token\", \"Bearer \" + token);\n+                rc.request().headers().addAll(multiMap);\n+                return multiMap.add(HttpHeaders.AUTHORIZATION, \"Bearer \" + token);\n+            });\n         }\n+        router.route(\"/graphiql/*\").handler(graphiQLHandler);\n+        router.route().handler(LoggerHandler.create());\n+        router.route().handler(StaticHandler.create());\n+        router.route().handler(FaviconHandler.create());\n+        router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", \"/graphiql/\").setStatusCode(302).end());\n         router.route(\"/graphql\").handler(ApolloWSHandler.create(graphQL));\n         router.route(\"/graphql\").handler(GraphQLHandler.create(graphQL, new GraphQLHandlerOptions()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAxODIxOQ=="}, "originalCommit": {"oid": "9c94276237755eb4f2c55f2f09ee82a811aee743"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEzMzEzOA==", "bodyText": "The web application is also exposed via \"graphql-ui\" endpoint (this can be configured via the property \"quarkus.vertx-graphql.ui.path\"). But this is only working when running the app in dev mode (because the property \"quarkus.vertx-graphql.ui.always-include\" defaults to \"false\").\nTherefore, as long as we only have one web app at runtime, we're good. Thanks!", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r435133138", "createdAt": "2020-06-04T09:54:21Z", "author": {"login": "Sgitario"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/vertx/VertxRouterSetup.java", "diffHunk": "@@ -43,14 +48,37 @@\n     GraphQL graphQL;\n \n     void setupRouter(@Observes Router router) {\n-        if (Boolean.FALSE.equals(authEnabled)) {\n-            router.route(\"/graphiql/*\").handler(GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true)));\n-            router.route().handler(LoggerHandler.create());\n-            router.route().handler(StaticHandler.create());\n-            router.route().handler(FaviconHandler.create());\n-            router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", \"/graphiql/\").setStatusCode(302).end());\n+        GraphiQLHandler graphiQLHandler = GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true));\n+        if (Boolean.TRUE.equals(authEnabled)) {\n+            graphiQLHandler.graphiQLRequestHeaders(rc -> {\n+                MultiMap multiMap = MultiMap.caseInsensitiveMultiMap();\n+                String token = getCurrentAccessToken(rc);\n+                if (token.isEmpty()) {\n+                    token = rc.request().getHeader(HttpHeaders.AUTHORIZATION);\n+                }\n+                multiMap.add(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, \"*\");\n+                multiMap.add(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS, \"true\");\n+                multiMap.add(HttpHeaders.ACCESS_CONTROL_ALLOW_HEADERS, \"Authorization, Content-Type, Accept\");\n+                multiMap.add(\"Bearer-token\", \"Bearer \" + token);\n+                rc.request().headers().addAll(multiMap);\n+                return multiMap.add(HttpHeaders.AUTHORIZATION, \"Bearer \" + token);\n+            });\n         }\n+        router.route(\"/graphiql/*\").handler(graphiQLHandler);\n+        router.route().handler(LoggerHandler.create());\n+        router.route().handler(StaticHandler.create());\n+        router.route().handler(FaviconHandler.create());\n+        router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", \"/graphiql/\").setStatusCode(302).end());\n         router.route(\"/graphql\").handler(ApolloWSHandler.create(graphQL));\n         router.route(\"/graphql\").handler(GraphQLHandler.create(graphQL, new GraphQLHandlerOptions()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAxODIxOQ=="}, "originalCommit": {"oid": "9c94276237755eb4f2c55f2f09ee82a811aee743"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTc1Mjg1OnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/vertx/VertxRouterSetup.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNjozMDoyN1rOGe3iJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwMzo1MjoyMFrOGoCB6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAyMDMyNw==", "bodyText": "Suggestion, what about using stream and optionals here?\nprivate String getCurrentAccessToken(RoutingContext routingContext) {\n        return Optional.ofNullable(routingContext.user())\n                .map(user -> ((QuarkusHttpUser) user).getSecurityIdentity())\n                .map(identity -> identity.getCredential(AccessTokenCredential.class))\n                .map(AccessTokenCredential::getToken)\n                .orElse(StringUtils.EMPTY);\n    }\n\nI read this code better like this, what do you think?", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r435020327", "createdAt": "2020-06-04T06:30:27Z", "author": {"login": "Sgitario"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/vertx/VertxRouterSetup.java", "diffHunk": "@@ -43,14 +48,37 @@\n     GraphQL graphQL;\n \n     void setupRouter(@Observes Router router) {\n-        if (Boolean.FALSE.equals(authEnabled)) {\n-            router.route(\"/graphiql/*\").handler(GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true)));\n-            router.route().handler(LoggerHandler.create());\n-            router.route().handler(StaticHandler.create());\n-            router.route().handler(FaviconHandler.create());\n-            router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", \"/graphiql/\").setStatusCode(302).end());\n+        GraphiQLHandler graphiQLHandler = GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true));\n+        if (Boolean.TRUE.equals(authEnabled)) {\n+            graphiQLHandler.graphiQLRequestHeaders(rc -> {\n+                MultiMap multiMap = MultiMap.caseInsensitiveMultiMap();\n+                String token = getCurrentAccessToken(rc);\n+                if (token.isEmpty()) {\n+                    token = rc.request().getHeader(HttpHeaders.AUTHORIZATION);\n+                }\n+                multiMap.add(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, \"*\");\n+                multiMap.add(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS, \"true\");\n+                multiMap.add(HttpHeaders.ACCESS_CONTROL_ALLOW_HEADERS, \"Authorization, Content-Type, Accept\");\n+                multiMap.add(\"Bearer-token\", \"Bearer \" + token);\n+                rc.request().headers().addAll(multiMap);\n+                return multiMap.add(HttpHeaders.AUTHORIZATION, \"Bearer \" + token);\n+            });\n         }\n+        router.route(\"/graphiql/*\").handler(graphiQLHandler);\n+        router.route().handler(LoggerHandler.create());\n+        router.route().handler(StaticHandler.create());\n+        router.route().handler(FaviconHandler.create());\n+        router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", \"/graphiql/\").setStatusCode(302).end());\n         router.route(\"/graphql\").handler(ApolloWSHandler.create(graphQL));\n         router.route(\"/graphql\").handler(GraphQLHandler.create(graphQL, new GraphQLHandlerOptions()));\n     }\n+\n+    private String getCurrentAccessToken(RoutingContext routingContext) {\n+        if ((routingContext.user() != null) &&\n+                ((QuarkusHttpUser) routingContext.user()).getSecurityIdentity() != null &&\n+                ((QuarkusHttpUser) routingContext.user()).getSecurityIdentity().getCredential(AccessTokenCredential.class) != null) {\n+            return ((QuarkusHttpUser) routingContext.user()).getSecurityIdentity().getCredential(AccessTokenCredential.class).getToken();\n+        }\n+        return \"\";\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c94276237755eb4f2c55f2f09ee82a811aee743"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE4NjE5Ng==", "bodyText": "Thanks!", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r435186196", "createdAt": "2020-06-04T11:34:27Z", "author": {"login": "nmirasch"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/vertx/VertxRouterSetup.java", "diffHunk": "@@ -43,14 +48,37 @@\n     GraphQL graphQL;\n \n     void setupRouter(@Observes Router router) {\n-        if (Boolean.FALSE.equals(authEnabled)) {\n-            router.route(\"/graphiql/*\").handler(GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true)));\n-            router.route().handler(LoggerHandler.create());\n-            router.route().handler(StaticHandler.create());\n-            router.route().handler(FaviconHandler.create());\n-            router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", \"/graphiql/\").setStatusCode(302).end());\n+        GraphiQLHandler graphiQLHandler = GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true));\n+        if (Boolean.TRUE.equals(authEnabled)) {\n+            graphiQLHandler.graphiQLRequestHeaders(rc -> {\n+                MultiMap multiMap = MultiMap.caseInsensitiveMultiMap();\n+                String token = getCurrentAccessToken(rc);\n+                if (token.isEmpty()) {\n+                    token = rc.request().getHeader(HttpHeaders.AUTHORIZATION);\n+                }\n+                multiMap.add(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, \"*\");\n+                multiMap.add(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS, \"true\");\n+                multiMap.add(HttpHeaders.ACCESS_CONTROL_ALLOW_HEADERS, \"Authorization, Content-Type, Accept\");\n+                multiMap.add(\"Bearer-token\", \"Bearer \" + token);\n+                rc.request().headers().addAll(multiMap);\n+                return multiMap.add(HttpHeaders.AUTHORIZATION, \"Bearer \" + token);\n+            });\n         }\n+        router.route(\"/graphiql/*\").handler(graphiQLHandler);\n+        router.route().handler(LoggerHandler.create());\n+        router.route().handler(StaticHandler.create());\n+        router.route().handler(FaviconHandler.create());\n+        router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", \"/graphiql/\").setStatusCode(302).end());\n         router.route(\"/graphql\").handler(ApolloWSHandler.create(graphQL));\n         router.route(\"/graphql\").handler(GraphQLHandler.create(graphQL, new GraphQLHandlerOptions()));\n     }\n+\n+    private String getCurrentAccessToken(RoutingContext routingContext) {\n+        if ((routingContext.user() != null) &&\n+                ((QuarkusHttpUser) routingContext.user()).getSecurityIdentity() != null &&\n+                ((QuarkusHttpUser) routingContext.user()).getSecurityIdentity().getCredential(AccessTokenCredential.class) != null) {\n+            return ((QuarkusHttpUser) routingContext.user()).getSecurityIdentity().getCredential(AccessTokenCredential.class).getToken();\n+        }\n+        return \"\";\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAyMDMyNw=="}, "originalCommit": {"oid": "9c94276237755eb4f2c55f2f09ee82a811aee743"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYyOTQ4Mw==", "bodyText": "wouldnt be best to not set .orElse(StringUtils.EMPTY); then simply do token.isPresent() as an Optional ?", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r444629483", "createdAt": "2020-06-24T03:52:20Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/vertx/VertxRouterSetup.java", "diffHunk": "@@ -43,14 +48,37 @@\n     GraphQL graphQL;\n \n     void setupRouter(@Observes Router router) {\n-        if (Boolean.FALSE.equals(authEnabled)) {\n-            router.route(\"/graphiql/*\").handler(GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true)));\n-            router.route().handler(LoggerHandler.create());\n-            router.route().handler(StaticHandler.create());\n-            router.route().handler(FaviconHandler.create());\n-            router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", \"/graphiql/\").setStatusCode(302).end());\n+        GraphiQLHandler graphiQLHandler = GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true));\n+        if (Boolean.TRUE.equals(authEnabled)) {\n+            graphiQLHandler.graphiQLRequestHeaders(rc -> {\n+                MultiMap multiMap = MultiMap.caseInsensitiveMultiMap();\n+                String token = getCurrentAccessToken(rc);\n+                if (token.isEmpty()) {\n+                    token = rc.request().getHeader(HttpHeaders.AUTHORIZATION);\n+                }\n+                multiMap.add(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, \"*\");\n+                multiMap.add(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS, \"true\");\n+                multiMap.add(HttpHeaders.ACCESS_CONTROL_ALLOW_HEADERS, \"Authorization, Content-Type, Accept\");\n+                multiMap.add(\"Bearer-token\", \"Bearer \" + token);\n+                rc.request().headers().addAll(multiMap);\n+                return multiMap.add(HttpHeaders.AUTHORIZATION, \"Bearer \" + token);\n+            });\n         }\n+        router.route(\"/graphiql/*\").handler(graphiQLHandler);\n+        router.route().handler(LoggerHandler.create());\n+        router.route().handler(StaticHandler.create());\n+        router.route().handler(FaviconHandler.create());\n+        router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", \"/graphiql/\").setStatusCode(302).end());\n         router.route(\"/graphql\").handler(ApolloWSHandler.create(graphQL));\n         router.route(\"/graphql\").handler(GraphQLHandler.create(graphQL, new GraphQLHandlerOptions()));\n     }\n+\n+    private String getCurrentAccessToken(RoutingContext routingContext) {\n+        if ((routingContext.user() != null) &&\n+                ((QuarkusHttpUser) routingContext.user()).getSecurityIdentity() != null &&\n+                ((QuarkusHttpUser) routingContext.user()).getSecurityIdentity().getCredential(AccessTokenCredential.class) != null) {\n+            return ((QuarkusHttpUser) routingContext.user()).getSecurityIdentity().getCredential(AccessTokenCredential.class).getToken();\n+        }\n+        return \"\";\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAyMDMyNw=="}, "originalCommit": {"oid": "9c94276237755eb4f2c55f2f09ee82a811aee743"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTgzMzM3OnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/service/KeycloakIntegrationIndexingServiceIT.java", "isResolved": true, "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNjo1OTo0NVrOGe4TiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxMjoxNDo1NlrOGfC6bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAzMjk2OA==", "bodyText": "Does it make sense to set the default image properties for infinispan and keycloak?\nI'm using this one for Infinispan:\nprivate static final String INFINISPAN_IMAGE = System.getProperty(\"container.image.infinispan\", \"jboss/infinispan-server:10.1.8.Final\");\n\nAnd this one for keycloak:\nprivate static final String KEYCLOAK_IMAGE = System.getProperty(\"container.image.keycloak\", \"jboss/keycloak:10.0.2\");\n\nSo we can run the tests directly from the IDE with further configuration.", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r435032968", "createdAt": "2020-06-04T06:59:45Z", "author": {"login": "Sgitario"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/service/KeycloakIntegrationIndexingServiceIT.java", "diffHunk": "@@ -32,18 +32,18 @@\n @QuarkusTestResource(InfinispanServerTestResource.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c94276237755eb4f2c55f2f09ee82a811aee743"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEyMTkxNQ==", "bodyText": "Not sure what you mean here. Do you mean like in data-index/data-index-service/src/test/java/org/kie/kogito/index/InfinispanServerTestResource.java ? Cause it's already in place.", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r435121915", "createdAt": "2020-06-04T09:35:24Z", "author": {"login": "jstastny-cz"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/service/KeycloakIntegrationIndexingServiceIT.java", "diffHunk": "@@ -32,18 +32,18 @@\n @QuarkusTestResource(InfinispanServerTestResource.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAzMjk2OA=="}, "originalCommit": {"oid": "9c94276237755eb4f2c55f2f09ee82a811aee743"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEyNDI3MA==", "bodyText": "I mean to add a default image in case of the property is not set.", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r435124270", "createdAt": "2020-06-04T09:39:24Z", "author": {"login": "Sgitario"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/service/KeycloakIntegrationIndexingServiceIT.java", "diffHunk": "@@ -32,18 +32,18 @@\n @QuarkusTestResource(InfinispanServerTestResource.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAzMjk2OA=="}, "originalCommit": {"oid": "9c94276237755eb4f2c55f2f09ee82a811aee743"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEzMDA0Mg==", "bodyText": "I would argue against. Having configuration of the images both in pom and in code is not manageable easily, it could hide the fact that you've forgotten to set the property, the \"somewhere defined default\" could become outdated, etc. Anyway that should not be taken care of as part of this PR.", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r435130042", "createdAt": "2020-06-04T09:49:08Z", "author": {"login": "jstastny-cz"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/service/KeycloakIntegrationIndexingServiceIT.java", "diffHunk": "@@ -32,18 +32,18 @@\n @QuarkusTestResource(InfinispanServerTestResource.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAzMjk2OA=="}, "originalCommit": {"oid": "9c94276237755eb4f2c55f2f09ee82a811aee743"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEzNzE5MA==", "bodyText": "Ok with taking care of this as part of another ticket.\nMy against of having properties in the POM file is that is not IDE compatible (we can't run suites or single tests directly from the IDE) and for me, this is really useful for debugging.", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r435137190", "createdAt": "2020-06-04T10:00:56Z", "author": {"login": "Sgitario"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/service/KeycloakIntegrationIndexingServiceIT.java", "diffHunk": "@@ -32,18 +32,18 @@\n @QuarkusTestResource(InfinispanServerTestResource.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAzMjk2OA=="}, "originalCommit": {"oid": "9c94276237755eb4f2c55f2f09ee82a811aee743"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTEzOTgzOA==", "bodyText": "Well you can, you just need to set the property to your test runner. It's maybe just a question of taste, who likes what. Feel free to open a jira if you like.", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r435139838", "createdAt": "2020-06-04T10:05:29Z", "author": {"login": "jstastny-cz"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/service/KeycloakIntegrationIndexingServiceIT.java", "diffHunk": "@@ -32,18 +32,18 @@\n @QuarkusTestResource(InfinispanServerTestResource.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAzMjk2OA=="}, "originalCommit": {"oid": "9c94276237755eb4f2c55f2f09ee82a811aee743"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTE0NDY2NQ==", "bodyText": "The problem is that a different test execution is used if we run the whole test suite, or one test or another (at least in Eclipse, not sure about Intellij or VS Code). So, I would need to add the properties in every test execution. Maybe, there could have another approaches.\nHaving these properties in a test.properties (or similar) and injecting this file into Quarkus would work when running the tests from Maven or any IDE.\nHowever, this is out of scope here. I wrote it here as I saw we're using default values for some other properties.", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r435144665", "createdAt": "2020-06-04T10:14:25Z", "author": {"login": "Sgitario"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/service/KeycloakIntegrationIndexingServiceIT.java", "diffHunk": "@@ -32,18 +32,18 @@\n @QuarkusTestResource(InfinispanServerTestResource.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAzMjk2OA=="}, "originalCommit": {"oid": "9c94276237755eb4f2c55f2f09ee82a811aee743"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTIwNjc2Nw==", "bodyText": "@Sgitario I have to say that I have that default value for that props in my local environment to execute test from Intellij.. :-)\nBut maybe we can add there req in another jira just to see it it's convenient .", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r435206767", "createdAt": "2020-06-04T12:14:56Z", "author": {"login": "nmirasch"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/service/KeycloakIntegrationIndexingServiceIT.java", "diffHunk": "@@ -32,18 +32,18 @@\n @QuarkusTestResource(InfinispanServerTestResource.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAzMjk2OA=="}, "originalCommit": {"oid": "9c94276237755eb4f2c55f2f09ee82a811aee743"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTg3MDUzOnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/service/KeycloakIntegrationIndexingServiceIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNzoxMTo0OFrOGe4qDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNzoxMTo0OFrOGe4qDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTAzODczNQ==", "bodyText": "There is an extra space here at the beginning.", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r435038735", "createdAt": "2020-06-04T07:11:48Z", "author": {"login": "Sgitario"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/service/KeycloakIntegrationIndexingServiceIT.java", "diffHunk": "@@ -66,27 +62,38 @@ public void testNoTokenProvided() {\n     @Test\n     public void testAuthorizedUserProvided() {\n         //jdoe has role:user and confidential, resource served\n-        given().auth().oauth2(getAccessToken(\"jdoe\"))\n-                .when().get(\"/graphiql/\")\n-                .then()\n-                .statusCode(404);\n-\n         given().auth().oauth2(getAccessToken(\"jdoe\"))\n                 .contentType(ContentType.JSON)\n                 .body(\"{ \\\"query\\\" : \\\"{ProcessInstances{ id } }\\\" }\")\n                 .when().post(\"/graphql\")\n                 .then().log().ifValidationFails().statusCode(200);\n     }\n \n+    @Test\n+    public void graphiqlLoginOnKeycloakServedTest(){\n+        // Returning keycloak login page\n+        given().when().get(\"/graphiql/\")\n+                .then()\n+                .statusCode(200);\n+        // Returning keycloak login page\n+        given().auth().oauth2(getAccessToken(\"jdoe\"))\n+                .when().get(\"/graphiql/\")\n+                .then()\n+                .statusCode(200);\n+         given().when().get(\"/other/\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c94276237755eb4f2c55f2f09ee82a811aee743"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwOTg4Nzg0OnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/service/KeycloakIntegrationIndexingServiceIT.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwNzoxNzozOFrOGe41Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwOTozMDo1NlrOGe9kjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA0MTUzOQ==", "bodyText": "I added this new assertion:\ngiven().auth().oauth2(\"any-wrong-token\")\n        .when().get(\"/graphiql/\")\n        .then().statusCode(401);\n\nAnd it's failing because it retuns 200 OK code. Is this expected? Maybe it's redirecting to a Keycloak page when this is not valid?", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r435041539", "createdAt": "2020-06-04T07:17:38Z", "author": {"login": "Sgitario"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/service/KeycloakIntegrationIndexingServiceIT.java", "diffHunk": "@@ -66,27 +62,38 @@ public void testNoTokenProvided() {\n     @Test\n     public void testAuthorizedUserProvided() {\n         //jdoe has role:user and confidential, resource served\n-        given().auth().oauth2(getAccessToken(\"jdoe\"))\n-                .when().get(\"/graphiql/\")\n-                .then()\n-                .statusCode(404);\n-\n         given().auth().oauth2(getAccessToken(\"jdoe\"))\n                 .contentType(ContentType.JSON)\n                 .body(\"{ \\\"query\\\" : \\\"{ProcessInstances{ id } }\\\" }\")\n                 .when().post(\"/graphql\")\n                 .then().log().ifValidationFails().statusCode(200);\n     }\n \n+    @Test\n+    public void graphiqlLoginOnKeycloakServedTest(){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c94276237755eb4f2c55f2f09ee82a811aee743"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExOTI0Nw==", "bodyText": "See the comments below, that's the keycloak login page which returns 200.", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r435119247", "createdAt": "2020-06-04T09:30:56Z", "author": {"login": "jstastny-cz"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/service/KeycloakIntegrationIndexingServiceIT.java", "diffHunk": "@@ -66,27 +62,38 @@ public void testNoTokenProvided() {\n     @Test\n     public void testAuthorizedUserProvided() {\n         //jdoe has role:user and confidential, resource served\n-        given().auth().oauth2(getAccessToken(\"jdoe\"))\n-                .when().get(\"/graphiql/\")\n-                .then()\n-                .statusCode(404);\n-\n         given().auth().oauth2(getAccessToken(\"jdoe\"))\n                 .contentType(ContentType.JSON)\n                 .body(\"{ \\\"query\\\" : \\\"{ProcessInstances{ id } }\\\" }\")\n                 .when().post(\"/graphql\")\n                 .then().log().ifValidationFails().statusCode(200);\n     }\n \n+    @Test\n+    public void graphiqlLoginOnKeycloakServedTest(){", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA0MTUzOQ=="}, "originalCommit": {"oid": "9c94276237755eb4f2c55f2f09ee82a811aee743"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcxMDEzMjI3OnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/service/KeycloakIntegrationIndexingServiceIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwODoyODoxMVrOGe7P8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQwOTozMDoxM1rOGe9i6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4MTIwMA==", "bodyText": "I'm confused about the tests that cover the \"/graphql\" path.\nI ran the tests using \"mvn clean verify\" and I'm aware of these tests are working fine, but as far I can see in the VertxRouterSetup, we are not doing anything new about this path, right?\nAlso, this path does not allow the GET method, but POST method... so no idea why is working. What am I missing?", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r435081200", "createdAt": "2020-06-04T08:28:11Z", "author": {"login": "Sgitario"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/service/KeycloakIntegrationIndexingServiceIT.java", "diffHunk": "@@ -32,18 +32,18 @@\n @QuarkusTestResource(InfinispanServerTestResource.class)\n public class KeycloakIntegrationIndexingServiceIT {\n \n-    private static final String KEYCLOAK_SERVER_URL = System.getProperty(\"keycloak.url\", \"http://localhost:8281/auth\");\n-    private static final String KEYCLOAK_REALM = \"kogito\";\n-    private static final String KEYCLOAK_CLIENT_ID = \"kogito-data-index-service\";\n+    private static final String KEYCLOAK_SERVER_URL = System.getProperty(\"quarkus.oidc.auth-server-url\", \"http://localhost:8281/auth/realms/kogito\");\n+    private static final String KEYCLOAK_CLIENT_ID = System.getProperty(\"quarkus.oidc.client-id\", \"kogito-data-index-service\");\n+    private static final String KEYCLOAK_CLIENT_SECRET = System.getProperty(\"quarkus.oidc.credentials.secret\", \"secret\");\n \n     @Test\n     public void testUnauthorizedUserAccess() {\n         //alice only have role User, resource is forbidden\n-        given().auth().oauth2(getAccessToken(\"alice\"))\n-                .when().get(\"/graphiql/\")\n+        given().contentType(ContentType.JSON).body(\"{ \\\"query\\\" : \\\"{ProcessInstances{ id } }\\\" }\")\n+                .auth().oauth2(getAccessToken(\"alice\"))\n+                .when().get(\"/graphql\")\n                 .then()\n-                .statusCode(404);\n-\n+                .statusCode(403);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c94276237755eb4f2c55f2f09ee82a811aee743"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTExODgyNA==", "bodyText": "IMO the important fact is here that the user is not authorized to access the web context, details like methods allowed would be probably checked later on.", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r435118824", "createdAt": "2020-06-04T09:30:13Z", "author": {"login": "jstastny-cz"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/service/KeycloakIntegrationIndexingServiceIT.java", "diffHunk": "@@ -32,18 +32,18 @@\n @QuarkusTestResource(InfinispanServerTestResource.class)\n public class KeycloakIntegrationIndexingServiceIT {\n \n-    private static final String KEYCLOAK_SERVER_URL = System.getProperty(\"keycloak.url\", \"http://localhost:8281/auth\");\n-    private static final String KEYCLOAK_REALM = \"kogito\";\n-    private static final String KEYCLOAK_CLIENT_ID = \"kogito-data-index-service\";\n+    private static final String KEYCLOAK_SERVER_URL = System.getProperty(\"quarkus.oidc.auth-server-url\", \"http://localhost:8281/auth/realms/kogito\");\n+    private static final String KEYCLOAK_CLIENT_ID = System.getProperty(\"quarkus.oidc.client-id\", \"kogito-data-index-service\");\n+    private static final String KEYCLOAK_CLIENT_SECRET = System.getProperty(\"quarkus.oidc.credentials.secret\", \"secret\");\n \n     @Test\n     public void testUnauthorizedUserAccess() {\n         //alice only have role User, resource is forbidden\n-        given().auth().oauth2(getAccessToken(\"alice\"))\n-                .when().get(\"/graphiql/\")\n+        given().contentType(ContentType.JSON).body(\"{ \\\"query\\\" : \\\"{ProcessInstances{ id } }\\\" }\")\n+                .auth().oauth2(getAccessToken(\"alice\"))\n+                .when().get(\"/graphql\")\n                 .then()\n-                .statusCode(404);\n-\n+                .statusCode(403);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA4MTIwMA=="}, "originalCommit": {"oid": "9c94276237755eb4f2c55f2f09ee82a811aee743"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTc4MjUyOnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/vertx/VertxRouterSetup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMDoxNzoyM1rOGjsBgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDoxNjo0M1rOGkUzCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3NDYyNw==", "bodyText": "I see there is an existing property for data index component called \"kogito.data-index.storage.type=infinispan\". Maybe we should continue this name convention and rename this property to \"kogito.data-index.vertx-graphql.ui.path\".\nThis also applies to \"kogito.data-index.vertx-graphql.ui.tenant\"", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r440074627", "createdAt": "2020-06-15T10:17:23Z", "author": {"login": "Sgitario"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/vertx/VertxRouterSetup.java", "diffHunk": "@@ -39,18 +47,44 @@\n     @ConfigProperty(name = \"quarkus.oidc.enabled\", defaultValue = \"false\")\n     Boolean authEnabled;\n \n+    @Inject\n+    @ConfigProperty(name = \"kogito.dataindex.vertx-graphql.ui.path\", defaultValue = \"/graphiql\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "530722473d09f381acd45280813b0a40460d1a7c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc0MjY2NQ==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r440742665", "createdAt": "2020-06-16T10:16:43Z", "author": {"login": "nmirasch"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/vertx/VertxRouterSetup.java", "diffHunk": "@@ -39,18 +47,44 @@\n     @ConfigProperty(name = \"quarkus.oidc.enabled\", defaultValue = \"false\")\n     Boolean authEnabled;\n \n+    @Inject\n+    @ConfigProperty(name = \"kogito.dataindex.vertx-graphql.ui.path\", defaultValue = \"/graphiql\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA3NDYyNw=="}, "originalCommit": {"oid": "530722473d09f381acd45280813b0a40460d1a7c"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTk3MjUxOnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/auth/MultiTenantResolverTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMToxOTo0NFrOGjt5oA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDoxNjo1NVrOGkUzbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEwNTM3Ng==", "bodyText": "This assertion should be:\nassertThat(multiTenantResolver.resolve(routingContextMock)).isEqualTo(GRAPH_UI_TENANT);", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r440105376", "createdAt": "2020-06-15T11:19:44Z", "author": {"login": "Sgitario"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/auth/MultiTenantResolverTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.auth;\n+\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.ext.web.RoutingContext;\n+import org.junit.Before;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.lenient;\n+\n+\n+@ExtendWith(MockitoExtension.class)\n+class MultiTenantResolverTest {\n+\n+    private static final String GRAPH_UI_PATH = System.getProperty(\"kogito.dataindex.vertx-graphql.ui.path\", \"/graphiql\");\n+    private static final String GRAPH_UI_TENANT = System.getProperty(\"kogito.dataindex.vertx-graphql.ui.tenant\", \"web-app-tenant\");\n+\n+    @Mock\n+    RoutingContext routingContextMock;\n+\n+    @Mock\n+    HttpServerRequest requestMock;\n+\n+    @InjectMocks\n+    MultiTenantResolver multiTenantResolver;\n+\n+    @Before\n+    public void setup(){\n+        lenient().when(routingContextMock.request()).thenReturn(requestMock);\n+    }\n+\n+    @Test\n+    void resolveGraphiqlTenantTest() {\n+        lenient().when(requestMock.path()).thenReturn(GRAPH_UI_PATH);\n+        assertThat(GRAPH_UI_TENANT.equals(multiTenantResolver.resolve(routingContextMock)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "530722473d09f381acd45280813b0a40460d1a7c"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc0Mjc2NA==", "bodyText": "updated", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r440742764", "createdAt": "2020-06-16T10:16:55Z", "author": {"login": "nmirasch"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/auth/MultiTenantResolverTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.auth;\n+\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.ext.web.RoutingContext;\n+import org.junit.Before;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.lenient;\n+\n+\n+@ExtendWith(MockitoExtension.class)\n+class MultiTenantResolverTest {\n+\n+    private static final String GRAPH_UI_PATH = System.getProperty(\"kogito.dataindex.vertx-graphql.ui.path\", \"/graphiql\");\n+    private static final String GRAPH_UI_TENANT = System.getProperty(\"kogito.dataindex.vertx-graphql.ui.tenant\", \"web-app-tenant\");\n+\n+    @Mock\n+    RoutingContext routingContextMock;\n+\n+    @Mock\n+    HttpServerRequest requestMock;\n+\n+    @InjectMocks\n+    MultiTenantResolver multiTenantResolver;\n+\n+    @Before\n+    public void setup(){\n+        lenient().when(routingContextMock.request()).thenReturn(requestMock);\n+    }\n+\n+    @Test\n+    void resolveGraphiqlTenantTest() {\n+        lenient().when(requestMock.path()).thenReturn(GRAPH_UI_PATH);\n+        assertThat(GRAPH_UI_TENANT.equals(multiTenantResolver.resolve(routingContextMock)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEwNTM3Ng=="}, "originalCommit": {"oid": "530722473d09f381acd45280813b0a40460d1a7c"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjA1MTk0OnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/auth/MultiTenantResolverTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMTo0Njo1MlrOGjur6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDoxNzowNlrOGkUzyA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExODI0OA==", "bodyText": "This is wrong. It should use \"BeforeEach\" annotation as this is running on JUnit 5.", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r440118248", "createdAt": "2020-06-15T11:46:52Z", "author": {"login": "Sgitario"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/auth/MultiTenantResolverTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.auth;\n+\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.ext.web.RoutingContext;\n+import org.junit.Before;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.lenient;\n+\n+\n+@ExtendWith(MockitoExtension.class)\n+class MultiTenantResolverTest {\n+\n+    private static final String GRAPH_UI_PATH = System.getProperty(\"kogito.dataindex.vertx-graphql.ui.path\", \"/graphiql\");\n+    private static final String GRAPH_UI_TENANT = System.getProperty(\"kogito.dataindex.vertx-graphql.ui.tenant\", \"web-app-tenant\");\n+\n+    @Mock\n+    RoutingContext routingContextMock;\n+\n+    @Mock\n+    HttpServerRequest requestMock;\n+\n+    @InjectMocks\n+    MultiTenantResolver multiTenantResolver;\n+\n+    @Before", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "530722473d09f381acd45280813b0a40460d1a7c"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc0Mjg1Ng==", "bodyText": "updated", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r440742856", "createdAt": "2020-06-16T10:17:06Z", "author": {"login": "nmirasch"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/auth/MultiTenantResolverTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.auth;\n+\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.ext.web.RoutingContext;\n+import org.junit.Before;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.lenient;\n+\n+\n+@ExtendWith(MockitoExtension.class)\n+class MultiTenantResolverTest {\n+\n+    private static final String GRAPH_UI_PATH = System.getProperty(\"kogito.dataindex.vertx-graphql.ui.path\", \"/graphiql\");\n+    private static final String GRAPH_UI_TENANT = System.getProperty(\"kogito.dataindex.vertx-graphql.ui.tenant\", \"web-app-tenant\");\n+\n+    @Mock\n+    RoutingContext routingContextMock;\n+\n+    @Mock\n+    HttpServerRequest requestMock;\n+\n+    @InjectMocks\n+    MultiTenantResolver multiTenantResolver;\n+\n+    @Before", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExODI0OA=="}, "originalCommit": {"oid": "530722473d09f381acd45280813b0a40460d1a7c"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjA1NjUxOnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/auth/MultiTenantResolverTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMTo0ODoyOVrOGjuu6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDoxNzoyMFrOGkU0ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExOTAxOA==", "bodyText": "I think this test relies on some properties being injected from a maven profile.\nIn order to make it isolated, what do you think of creating a givenTenantConfigured where:\nprivate void givenTentantIsConfigured() {\n        multiTenantResolver.graphUITenantId = GRAPH_UI_TENANT;\n        multiTenantResolver.graphUIPath = GRAPH_UI_PATH;\n    }", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r440119018", "createdAt": "2020-06-15T11:48:29Z", "author": {"login": "Sgitario"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/auth/MultiTenantResolverTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.auth;\n+\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.ext.web.RoutingContext;\n+import org.junit.Before;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.lenient;\n+\n+\n+@ExtendWith(MockitoExtension.class)\n+class MultiTenantResolverTest {\n+\n+    private static final String GRAPH_UI_PATH = System.getProperty(\"kogito.dataindex.vertx-graphql.ui.path\", \"/graphiql\");\n+    private static final String GRAPH_UI_TENANT = System.getProperty(\"kogito.dataindex.vertx-graphql.ui.tenant\", \"web-app-tenant\");\n+\n+    @Mock\n+    RoutingContext routingContextMock;\n+\n+    @Mock\n+    HttpServerRequest requestMock;\n+\n+    @InjectMocks\n+    MultiTenantResolver multiTenantResolver;\n+\n+    @Before\n+    public void setup(){\n+        lenient().when(routingContextMock.request()).thenReturn(requestMock);\n+    }\n+\n+    @Test\n+    void resolveGraphiqlTenantTest() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "530722473d09f381acd45280813b0a40460d1a7c"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc0MzAxMg==", "bodyText": "added", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r440743012", "createdAt": "2020-06-16T10:17:20Z", "author": {"login": "nmirasch"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/auth/MultiTenantResolverTest.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.auth;\n+\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.ext.web.RoutingContext;\n+import org.junit.Before;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.lenient;\n+\n+\n+@ExtendWith(MockitoExtension.class)\n+class MultiTenantResolverTest {\n+\n+    private static final String GRAPH_UI_PATH = System.getProperty(\"kogito.dataindex.vertx-graphql.ui.path\", \"/graphiql\");\n+    private static final String GRAPH_UI_TENANT = System.getProperty(\"kogito.dataindex.vertx-graphql.ui.tenant\", \"web-app-tenant\");\n+\n+    @Mock\n+    RoutingContext routingContextMock;\n+\n+    @Mock\n+    HttpServerRequest requestMock;\n+\n+    @InjectMocks\n+    MultiTenantResolver multiTenantResolver;\n+\n+    @Before\n+    public void setup(){\n+        lenient().when(routingContextMock.request()).thenReturn(requestMock);\n+    }\n+\n+    @Test\n+    void resolveGraphiqlTenantTest() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExOTAxOA=="}, "originalCommit": {"oid": "530722473d09f381acd45280813b0a40460d1a7c"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjE2MjczOnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/vertx/VertxRouterSetup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMjoyMTo0NVrOGjvyVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMDoxNzozNVrOGkU06g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEzNjI3Nw==", "bodyText": "Should we cover these changes in VertxRouterSetup in an unit test?", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r440136277", "createdAt": "2020-06-15T12:21:45Z", "author": {"login": "Sgitario"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/vertx/VertxRouterSetup.java", "diffHunk": "@@ -39,18 +47,44 @@\n     @ConfigProperty(name = \"quarkus.oidc.enabled\", defaultValue = \"false\")\n     Boolean authEnabled;\n \n+    @Inject\n+    @ConfigProperty(name = \"kogito.dataindex.vertx-graphql.ui.path\", defaultValue = \"/graphiql\")\n+    String graphUIPath;\n+\n     @Inject\n     GraphQL graphQL;\n \n     void setupRouter(@Observes Router router) {\n-        if (Boolean.FALSE.equals(authEnabled)) {\n-            router.route(\"/graphiql/*\").handler(GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true)));\n-            router.route().handler(LoggerHandler.create());\n-            router.route().handler(StaticHandler.create());\n-            router.route().handler(FaviconHandler.create());\n-            router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", \"/graphiql/\").setStatusCode(302).end());\n+        GraphiQLHandler graphiQLHandler = GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true));\n+        if (Boolean.TRUE.equals(authEnabled)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "530722473d09f381acd45280813b0a40460d1a7c"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc0MzE0Ng==", "bodyText": "added", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r440743146", "createdAt": "2020-06-16T10:17:35Z", "author": {"login": "nmirasch"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/vertx/VertxRouterSetup.java", "diffHunk": "@@ -39,18 +47,44 @@\n     @ConfigProperty(name = \"quarkus.oidc.enabled\", defaultValue = \"false\")\n     Boolean authEnabled;\n \n+    @Inject\n+    @ConfigProperty(name = \"kogito.dataindex.vertx-graphql.ui.path\", defaultValue = \"/graphiql\")\n+    String graphUIPath;\n+\n     @Inject\n     GraphQL graphQL;\n \n     void setupRouter(@Observes Router router) {\n-        if (Boolean.FALSE.equals(authEnabled)) {\n-            router.route(\"/graphiql/*\").handler(GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true)));\n-            router.route().handler(LoggerHandler.create());\n-            router.route().handler(StaticHandler.create());\n-            router.route().handler(FaviconHandler.create());\n-            router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", \"/graphiql/\").setStatusCode(302).end());\n+        GraphiQLHandler graphiQLHandler = GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true));\n+        if (Boolean.TRUE.equals(authEnabled)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEzNjI3Nw=="}, "originalCommit": {"oid": "530722473d09f381acd45280813b0a40460d1a7c"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0NjI3Nzc0OnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/auth/MultiTenantResolverTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMjowMDoyOFrOGkYBYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNTo1NTowMVrOGk2nkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc5NTQ4OQ==", "bodyText": "I think private methods should go at the bottom after public and protected methods.", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r440795489", "createdAt": "2020-06-16T12:00:28Z", "author": {"login": "Sgitario"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/auth/MultiTenantResolverTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.auth;\n+\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.ext.web.RoutingContext;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.lenient;\n+\n+\n+@ExtendWith(MockitoExtension.class)\n+class MultiTenantResolverTest {\n+\n+    private static final String GRAPH_UI_PATH = System.getProperty(\"kogito.data-index.vertx-graphql.ui.path\", \"/graphiql\");\n+    private static final String GRAPH_UI_TENANT = System.getProperty(\"kogito.data-index.vertx-graphql.ui.tenant\", \"web-app-tenant\");\n+\n+    @Mock\n+    RoutingContext routingContextMock;\n+\n+    @Mock\n+    HttpServerRequest requestMock;\n+\n+    @InjectMocks\n+    MultiTenantResolver multiTenantResolver;\n+\n+    @BeforeEach\n+    public void setup(){\n+        lenient().when(routingContextMock.request()).thenReturn(requestMock);\n+        givenTenantIsConfigured();\n+    }\n+\n+    private void givenTenantIsConfigured() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d236f2b7bf3012cd8993e7de3ccba0fdc1f94a04"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTI5Njc4Ng==", "bodyText": "@Sgitario Moved, Thanks!", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r441296786", "createdAt": "2020-06-17T05:55:01Z", "author": {"login": "nmirasch"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/auth/MultiTenantResolverTest.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.auth;\n+\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.ext.web.RoutingContext;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.lenient;\n+\n+\n+@ExtendWith(MockitoExtension.class)\n+class MultiTenantResolverTest {\n+\n+    private static final String GRAPH_UI_PATH = System.getProperty(\"kogito.data-index.vertx-graphql.ui.path\", \"/graphiql\");\n+    private static final String GRAPH_UI_TENANT = System.getProperty(\"kogito.data-index.vertx-graphql.ui.tenant\", \"web-app-tenant\");\n+\n+    @Mock\n+    RoutingContext routingContextMock;\n+\n+    @Mock\n+    HttpServerRequest requestMock;\n+\n+    @InjectMocks\n+    MultiTenantResolver multiTenantResolver;\n+\n+    @BeforeEach\n+    public void setup(){\n+        lenient().when(routingContextMock.request()).thenReturn(requestMock);\n+        givenTenantIsConfigured();\n+    }\n+\n+    private void givenTenantIsConfigured() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDc5NTQ4OQ=="}, "originalCommit": {"oid": "d236f2b7bf3012cd8993e7de3ccba0fdc1f94a04"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDQyODc0OnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/vertx/VertxRouterSetup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwMzo1NToyMVrOGoCEeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwODowMzoyM1rOGovwxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzMDEzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    router.route(graphUIPath +\"*\").handler(graphiQLHandler);\n          \n          \n            \n                    router.route(graphUIPath + \"*\").handler(graphiQLHandler);", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r444630136", "createdAt": "2020-06-24T03:55:21Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/vertx/VertxRouterSetup.java", "diffHunk": "@@ -39,18 +47,47 @@\n     @ConfigProperty(name = \"quarkus.oidc.enabled\", defaultValue = \"false\")\n     Boolean authEnabled;\n \n+    @Inject\n+    @ConfigProperty(name = \"kogito.data-index.vertx-graphql.ui.path\", defaultValue = \"/graphiql\")\n+    String graphUIPath;\n+\n     @Inject\n     GraphQL graphQL;\n \n     void setupRouter(@Observes Router router) {\n-        if (Boolean.FALSE.equals(authEnabled)) {\n-            router.route(\"/graphiql/*\").handler(GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true)));\n-            router.route().handler(LoggerHandler.create());\n-            router.route().handler(StaticHandler.create());\n-            router.route().handler(FaviconHandler.create());\n-            router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", \"/graphiql/\").setStatusCode(302).end());\n+        GraphiQLHandler graphiQLHandler = GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true));\n+        if (Boolean.TRUE.equals(authEnabled)) {\n+            addGraphiqlRequestHeader(graphiQLHandler);\n         }\n+        router.route(graphUIPath +\"*\").handler(graphiQLHandler);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b86fd67f7c5448e92ad57a7d3cf974c79f2592f"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM3ODc1Ng==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r445378756", "createdAt": "2020-06-25T08:03:23Z", "author": {"login": "nmirasch"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/vertx/VertxRouterSetup.java", "diffHunk": "@@ -39,18 +47,47 @@\n     @ConfigProperty(name = \"quarkus.oidc.enabled\", defaultValue = \"false\")\n     Boolean authEnabled;\n \n+    @Inject\n+    @ConfigProperty(name = \"kogito.data-index.vertx-graphql.ui.path\", defaultValue = \"/graphiql\")\n+    String graphUIPath;\n+\n     @Inject\n     GraphQL graphQL;\n \n     void setupRouter(@Observes Router router) {\n-        if (Boolean.FALSE.equals(authEnabled)) {\n-            router.route(\"/graphiql/*\").handler(GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true)));\n-            router.route().handler(LoggerHandler.create());\n-            router.route().handler(StaticHandler.create());\n-            router.route().handler(FaviconHandler.create());\n-            router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", \"/graphiql/\").setStatusCode(302).end());\n+        GraphiQLHandler graphiQLHandler = GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true));\n+        if (Boolean.TRUE.equals(authEnabled)) {\n+            addGraphiqlRequestHeader(graphiQLHandler);\n         }\n+        router.route(graphUIPath +\"*\").handler(graphiQLHandler);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzMDEzNg=="}, "originalCommit": {"oid": "6b86fd67f7c5448e92ad57a7d3cf974c79f2592f"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDQzNTc5OnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/vertx/VertxRouterSetup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwMzo1OTozNVrOGoCIeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwODowMzowN1rOGovwOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzMTE2MQ==", "bodyText": "@nmirasch I think you don't need to set the headers manually, simply return the multimap that vertx will add it automatically?", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r444631161", "createdAt": "2020-06-24T03:59:35Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/vertx/VertxRouterSetup.java", "diffHunk": "@@ -39,18 +47,47 @@\n     @ConfigProperty(name = \"quarkus.oidc.enabled\", defaultValue = \"false\")\n     Boolean authEnabled;\n \n+    @Inject\n+    @ConfigProperty(name = \"kogito.data-index.vertx-graphql.ui.path\", defaultValue = \"/graphiql\")\n+    String graphUIPath;\n+\n     @Inject\n     GraphQL graphQL;\n \n     void setupRouter(@Observes Router router) {\n-        if (Boolean.FALSE.equals(authEnabled)) {\n-            router.route(\"/graphiql/*\").handler(GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true)));\n-            router.route().handler(LoggerHandler.create());\n-            router.route().handler(StaticHandler.create());\n-            router.route().handler(FaviconHandler.create());\n-            router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", \"/graphiql/\").setStatusCode(302).end());\n+        GraphiQLHandler graphiQLHandler = GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true));\n+        if (Boolean.TRUE.equals(authEnabled)) {\n+            addGraphiqlRequestHeader(graphiQLHandler);\n         }\n+        router.route(graphUIPath +\"*\").handler(graphiQLHandler);\n+        router.route().handler(LoggerHandler.create());\n+        router.route().handler(StaticHandler.create());\n+        router.route().handler(FaviconHandler.create());\n+        router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", graphUIPath).setStatusCode(302).end());\n         router.route(\"/graphql\").handler(ApolloWSHandler.create(graphQL));\n         router.route(\"/graphql\").handler(GraphQLHandler.create(graphQL, new GraphQLHandlerOptions()));\n     }\n+\n+    protected void addGraphiqlRequestHeader(GraphiQLHandler graphiQLHandler ){\n+        graphiQLHandler.graphiQLRequestHeaders(rc -> {\n+            MultiMap multiMap = MultiMap.caseInsensitiveMultiMap();\n+            String token = getCurrentAccessToken(rc);\n+            if (token.isEmpty()) {\n+                token = rc.request().getHeader(HttpHeaders.AUTHORIZATION);\n+            }\n+            multiMap.add(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, \"*\");\n+            multiMap.add(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS, \"true\");\n+            multiMap.add(HttpHeaders.ACCESS_CONTROL_ALLOW_HEADERS, \"Authorization, Content-Type, Accept\");\n+            multiMap.add(\"Bearer-token\", \"Bearer \" + token);\n+            rc.request().headers().addAll(multiMap);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b86fd67f7c5448e92ad57a7d3cf974c79f2592f"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM3ODYxOA==", "bodyText": "yep, good catch absolutely right, Thanks!", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r445378618", "createdAt": "2020-06-25T08:03:07Z", "author": {"login": "nmirasch"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/vertx/VertxRouterSetup.java", "diffHunk": "@@ -39,18 +47,47 @@\n     @ConfigProperty(name = \"quarkus.oidc.enabled\", defaultValue = \"false\")\n     Boolean authEnabled;\n \n+    @Inject\n+    @ConfigProperty(name = \"kogito.data-index.vertx-graphql.ui.path\", defaultValue = \"/graphiql\")\n+    String graphUIPath;\n+\n     @Inject\n     GraphQL graphQL;\n \n     void setupRouter(@Observes Router router) {\n-        if (Boolean.FALSE.equals(authEnabled)) {\n-            router.route(\"/graphiql/*\").handler(GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true)));\n-            router.route().handler(LoggerHandler.create());\n-            router.route().handler(StaticHandler.create());\n-            router.route().handler(FaviconHandler.create());\n-            router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", \"/graphiql/\").setStatusCode(302).end());\n+        GraphiQLHandler graphiQLHandler = GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true));\n+        if (Boolean.TRUE.equals(authEnabled)) {\n+            addGraphiqlRequestHeader(graphiQLHandler);\n         }\n+        router.route(graphUIPath +\"*\").handler(graphiQLHandler);\n+        router.route().handler(LoggerHandler.create());\n+        router.route().handler(StaticHandler.create());\n+        router.route().handler(FaviconHandler.create());\n+        router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", graphUIPath).setStatusCode(302).end());\n         router.route(\"/graphql\").handler(ApolloWSHandler.create(graphQL));\n         router.route(\"/graphql\").handler(GraphQLHandler.create(graphQL, new GraphQLHandlerOptions()));\n     }\n+\n+    protected void addGraphiqlRequestHeader(GraphiQLHandler graphiQLHandler ){\n+        graphiQLHandler.graphiQLRequestHeaders(rc -> {\n+            MultiMap multiMap = MultiMap.caseInsensitiveMultiMap();\n+            String token = getCurrentAccessToken(rc);\n+            if (token.isEmpty()) {\n+                token = rc.request().getHeader(HttpHeaders.AUTHORIZATION);\n+            }\n+            multiMap.add(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, \"*\");\n+            multiMap.add(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS, \"true\");\n+            multiMap.add(HttpHeaders.ACCESS_CONTROL_ALLOW_HEADERS, \"Authorization, Content-Type, Accept\");\n+            multiMap.add(\"Bearer-token\", \"Bearer \" + token);\n+            rc.request().headers().addAll(multiMap);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzMTE2MQ=="}, "originalCommit": {"oid": "6b86fd67f7c5448e92ad57a7d3cf974c79f2592f"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDQ0MjI2OnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/vertx/VertxRouterSetup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNDowMzo1M1rOGoCMRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwODowNDo1MFrOGovz5A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzMjEzMg==", "bodyText": "Do we also need this one, isnt just the AUTHORIZATION header the one used to authenticate?", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r444632132", "createdAt": "2020-06-24T04:03:53Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/vertx/VertxRouterSetup.java", "diffHunk": "@@ -39,18 +47,47 @@\n     @ConfigProperty(name = \"quarkus.oidc.enabled\", defaultValue = \"false\")\n     Boolean authEnabled;\n \n+    @Inject\n+    @ConfigProperty(name = \"kogito.data-index.vertx-graphql.ui.path\", defaultValue = \"/graphiql\")\n+    String graphUIPath;\n+\n     @Inject\n     GraphQL graphQL;\n \n     void setupRouter(@Observes Router router) {\n-        if (Boolean.FALSE.equals(authEnabled)) {\n-            router.route(\"/graphiql/*\").handler(GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true)));\n-            router.route().handler(LoggerHandler.create());\n-            router.route().handler(StaticHandler.create());\n-            router.route().handler(FaviconHandler.create());\n-            router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", \"/graphiql/\").setStatusCode(302).end());\n+        GraphiQLHandler graphiQLHandler = GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true));\n+        if (Boolean.TRUE.equals(authEnabled)) {\n+            addGraphiqlRequestHeader(graphiQLHandler);\n         }\n+        router.route(graphUIPath +\"*\").handler(graphiQLHandler);\n+        router.route().handler(LoggerHandler.create());\n+        router.route().handler(StaticHandler.create());\n+        router.route().handler(FaviconHandler.create());\n+        router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", graphUIPath).setStatusCode(302).end());\n         router.route(\"/graphql\").handler(ApolloWSHandler.create(graphQL));\n         router.route(\"/graphql\").handler(GraphQLHandler.create(graphQL, new GraphQLHandlerOptions()));\n     }\n+\n+    protected void addGraphiqlRequestHeader(GraphiQLHandler graphiQLHandler ){\n+        graphiQLHandler.graphiQLRequestHeaders(rc -> {\n+            MultiMap multiMap = MultiMap.caseInsensitiveMultiMap();\n+            String token = getCurrentAccessToken(rc);\n+            if (token.isEmpty()) {\n+                token = rc.request().getHeader(HttpHeaders.AUTHORIZATION);\n+            }\n+            multiMap.add(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, \"*\");\n+            multiMap.add(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS, \"true\");\n+            multiMap.add(HttpHeaders.ACCESS_CONTROL_ALLOW_HEADERS, \"Authorization, Content-Type, Accept\");\n+            multiMap.add(\"Bearer-token\", \"Bearer \" + token);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b86fd67f7c5448e92ad57a7d3cf974c79f2592f"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM3OTU1Ng==", "bodyText": "I have simplified that headers, just passing the Authorization with the current logged user token.", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r445379556", "createdAt": "2020-06-25T08:04:50Z", "author": {"login": "nmirasch"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/vertx/VertxRouterSetup.java", "diffHunk": "@@ -39,18 +47,47 @@\n     @ConfigProperty(name = \"quarkus.oidc.enabled\", defaultValue = \"false\")\n     Boolean authEnabled;\n \n+    @Inject\n+    @ConfigProperty(name = \"kogito.data-index.vertx-graphql.ui.path\", defaultValue = \"/graphiql\")\n+    String graphUIPath;\n+\n     @Inject\n     GraphQL graphQL;\n \n     void setupRouter(@Observes Router router) {\n-        if (Boolean.FALSE.equals(authEnabled)) {\n-            router.route(\"/graphiql/*\").handler(GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true)));\n-            router.route().handler(LoggerHandler.create());\n-            router.route().handler(StaticHandler.create());\n-            router.route().handler(FaviconHandler.create());\n-            router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", \"/graphiql/\").setStatusCode(302).end());\n+        GraphiQLHandler graphiQLHandler = GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true));\n+        if (Boolean.TRUE.equals(authEnabled)) {\n+            addGraphiqlRequestHeader(graphiQLHandler);\n         }\n+        router.route(graphUIPath +\"*\").handler(graphiQLHandler);\n+        router.route().handler(LoggerHandler.create());\n+        router.route().handler(StaticHandler.create());\n+        router.route().handler(FaviconHandler.create());\n+        router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", graphUIPath).setStatusCode(302).end());\n         router.route(\"/graphql\").handler(ApolloWSHandler.create(graphQL));\n         router.route(\"/graphql\").handler(GraphQLHandler.create(graphQL, new GraphQLHandlerOptions()));\n     }\n+\n+    protected void addGraphiqlRequestHeader(GraphiQLHandler graphiQLHandler ){\n+        graphiQLHandler.graphiQLRequestHeaders(rc -> {\n+            MultiMap multiMap = MultiMap.caseInsensitiveMultiMap();\n+            String token = getCurrentAccessToken(rc);\n+            if (token.isEmpty()) {\n+                token = rc.request().getHeader(HttpHeaders.AUTHORIZATION);\n+            }\n+            multiMap.add(HttpHeaders.ACCESS_CONTROL_ALLOW_ORIGIN, \"*\");\n+            multiMap.add(HttpHeaders.ACCESS_CONTROL_ALLOW_CREDENTIALS, \"true\");\n+            multiMap.add(HttpHeaders.ACCESS_CONTROL_ALLOW_HEADERS, \"Authorization, Content-Type, Accept\");\n+            multiMap.add(\"Bearer-token\", \"Bearer \" + token);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzMjEzMg=="}, "originalCommit": {"oid": "6b86fd67f7c5448e92ad57a7d3cf974c79f2592f"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDQ0MzgzOnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/vertx/VertxRouterSetup.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNDowNDo1N1rOGoCNNw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwODowNjozMlrOGov3zw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzMjM3NQ==", "bodyText": "@nmirasch when you get token like this wouldnt it contain the starting string \"Bearer \" ?", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r444632375", "createdAt": "2020-06-24T04:04:57Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/vertx/VertxRouterSetup.java", "diffHunk": "@@ -39,18 +47,47 @@\n     @ConfigProperty(name = \"quarkus.oidc.enabled\", defaultValue = \"false\")\n     Boolean authEnabled;\n \n+    @Inject\n+    @ConfigProperty(name = \"kogito.data-index.vertx-graphql.ui.path\", defaultValue = \"/graphiql\")\n+    String graphUIPath;\n+\n     @Inject\n     GraphQL graphQL;\n \n     void setupRouter(@Observes Router router) {\n-        if (Boolean.FALSE.equals(authEnabled)) {\n-            router.route(\"/graphiql/*\").handler(GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true)));\n-            router.route().handler(LoggerHandler.create());\n-            router.route().handler(StaticHandler.create());\n-            router.route().handler(FaviconHandler.create());\n-            router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", \"/graphiql/\").setStatusCode(302).end());\n+        GraphiQLHandler graphiQLHandler = GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true));\n+        if (Boolean.TRUE.equals(authEnabled)) {\n+            addGraphiqlRequestHeader(graphiQLHandler);\n         }\n+        router.route(graphUIPath +\"*\").handler(graphiQLHandler);\n+        router.route().handler(LoggerHandler.create());\n+        router.route().handler(StaticHandler.create());\n+        router.route().handler(FaviconHandler.create());\n+        router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", graphUIPath).setStatusCode(302).end());\n         router.route(\"/graphql\").handler(ApolloWSHandler.create(graphQL));\n         router.route(\"/graphql\").handler(GraphQLHandler.create(graphQL, new GraphQLHandlerOptions()));\n     }\n+\n+    protected void addGraphiqlRequestHeader(GraphiQLHandler graphiQLHandler ){\n+        graphiQLHandler.graphiQLRequestHeaders(rc -> {\n+            MultiMap multiMap = MultiMap.caseInsensitiveMultiMap();\n+            String token = getCurrentAccessToken(rc);\n+            if (token.isEmpty()) {\n+                token = rc.request().getHeader(HttpHeaders.AUTHORIZATION);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b86fd67f7c5448e92ad57a7d3cf974c79f2592f"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzNzE3OA==", "bodyText": "do we actually need or is there a situation where the user could get to the GraphiQL UI and not be logged in or have access to it via a token in the authorization header? Perhaps we can simply send the current access token all the time?", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r444637178", "createdAt": "2020-06-24T04:26:40Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/vertx/VertxRouterSetup.java", "diffHunk": "@@ -39,18 +47,47 @@\n     @ConfigProperty(name = \"quarkus.oidc.enabled\", defaultValue = \"false\")\n     Boolean authEnabled;\n \n+    @Inject\n+    @ConfigProperty(name = \"kogito.data-index.vertx-graphql.ui.path\", defaultValue = \"/graphiql\")\n+    String graphUIPath;\n+\n     @Inject\n     GraphQL graphQL;\n \n     void setupRouter(@Observes Router router) {\n-        if (Boolean.FALSE.equals(authEnabled)) {\n-            router.route(\"/graphiql/*\").handler(GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true)));\n-            router.route().handler(LoggerHandler.create());\n-            router.route().handler(StaticHandler.create());\n-            router.route().handler(FaviconHandler.create());\n-            router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", \"/graphiql/\").setStatusCode(302).end());\n+        GraphiQLHandler graphiQLHandler = GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true));\n+        if (Boolean.TRUE.equals(authEnabled)) {\n+            addGraphiqlRequestHeader(graphiQLHandler);\n         }\n+        router.route(graphUIPath +\"*\").handler(graphiQLHandler);\n+        router.route().handler(LoggerHandler.create());\n+        router.route().handler(StaticHandler.create());\n+        router.route().handler(FaviconHandler.create());\n+        router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", graphUIPath).setStatusCode(302).end());\n         router.route(\"/graphql\").handler(ApolloWSHandler.create(graphQL));\n         router.route(\"/graphql\").handler(GraphQLHandler.create(graphQL, new GraphQLHandlerOptions()));\n     }\n+\n+    protected void addGraphiqlRequestHeader(GraphiQLHandler graphiQLHandler ){\n+        graphiQLHandler.graphiQLRequestHeaders(rc -> {\n+            MultiMap multiMap = MultiMap.caseInsensitiveMultiMap();\n+            String token = getCurrentAccessToken(rc);\n+            if (token.isEmpty()) {\n+                token = rc.request().getHeader(HttpHeaders.AUTHORIZATION);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzMjM3NQ=="}, "originalCommit": {"oid": "6b86fd67f7c5448e92ad57a7d3cf974c79f2592f"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM4MDU1OQ==", "bodyText": "agree, simplified :)", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r445380559", "createdAt": "2020-06-25T08:06:32Z", "author": {"login": "nmirasch"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/vertx/VertxRouterSetup.java", "diffHunk": "@@ -39,18 +47,47 @@\n     @ConfigProperty(name = \"quarkus.oidc.enabled\", defaultValue = \"false\")\n     Boolean authEnabled;\n \n+    @Inject\n+    @ConfigProperty(name = \"kogito.data-index.vertx-graphql.ui.path\", defaultValue = \"/graphiql\")\n+    String graphUIPath;\n+\n     @Inject\n     GraphQL graphQL;\n \n     void setupRouter(@Observes Router router) {\n-        if (Boolean.FALSE.equals(authEnabled)) {\n-            router.route(\"/graphiql/*\").handler(GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true)));\n-            router.route().handler(LoggerHandler.create());\n-            router.route().handler(StaticHandler.create());\n-            router.route().handler(FaviconHandler.create());\n-            router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", \"/graphiql/\").setStatusCode(302).end());\n+        GraphiQLHandler graphiQLHandler = GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true));\n+        if (Boolean.TRUE.equals(authEnabled)) {\n+            addGraphiqlRequestHeader(graphiQLHandler);\n         }\n+        router.route(graphUIPath +\"*\").handler(graphiQLHandler);\n+        router.route().handler(LoggerHandler.create());\n+        router.route().handler(StaticHandler.create());\n+        router.route().handler(FaviconHandler.create());\n+        router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", graphUIPath).setStatusCode(302).end());\n         router.route(\"/graphql\").handler(ApolloWSHandler.create(graphQL));\n         router.route(\"/graphql\").handler(GraphQLHandler.create(graphQL, new GraphQLHandlerOptions()));\n     }\n+\n+    protected void addGraphiqlRequestHeader(GraphiQLHandler graphiQLHandler ){\n+        graphiQLHandler.graphiQLRequestHeaders(rc -> {\n+            MultiMap multiMap = MultiMap.caseInsensitiveMultiMap();\n+            String token = getCurrentAccessToken(rc);\n+            if (token.isEmpty()) {\n+                token = rc.request().getHeader(HttpHeaders.AUTHORIZATION);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzMjM3NQ=="}, "originalCommit": {"oid": "6b86fd67f7c5448e92ad57a7d3cf974c79f2592f"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDQ0ODU1OnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/auth/MultiTenantResolverTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNDowODowN1rOGoCQDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNDowODowN1rOGoCQDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzMzEwMQ==", "bodyText": "@nmirasch just curious why do we need to use lenient in these tests?", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r444633101", "createdAt": "2020-06-24T04:08:07Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/auth/MultiTenantResolverTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.auth;\n+\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.ext.web.RoutingContext;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.lenient;\n+\n+\n+@ExtendWith(MockitoExtension.class)\n+class MultiTenantResolverTest {\n+\n+    private static final String GRAPH_UI_PATH = System.getProperty(\"kogito.data-index.vertx-graphql.ui.path\", \"/graphiql\");\n+    private static final String GRAPH_UI_TENANT = System.getProperty(\"kogito.data-index.vertx-graphql.ui.tenant\", \"web-app-tenant\");\n+\n+    @Mock\n+    RoutingContext routingContextMock;\n+\n+    @Mock\n+    HttpServerRequest requestMock;\n+\n+    @InjectMocks\n+    MultiTenantResolver multiTenantResolver;\n+\n+    @BeforeEach\n+    public void setup(){\n+        lenient().when(routingContextMock.request()).thenReturn(requestMock);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b86fd67f7c5448e92ad57a7d3cf974c79f2592f"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDQ1Mzc4OnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/service/KeycloakIntegrationIndexingServiceIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNDoxMTo0NFrOGoCTKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwODo0MTozMVrOGoxGmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzMzg5Nw==", "bodyText": "@nmirasch I got confused here, are we just running the same get request twice?", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r444633897", "createdAt": "2020-06-24T04:11:44Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/service/KeycloakIntegrationIndexingServiceIT.java", "diffHunk": "@@ -31,18 +31,18 @@\n @QuarkusTestResource(DataIndexInfinispanServerTestResource.class)\n public class KeycloakIntegrationIndexingServiceIT {\n \n-    private static final String KEYCLOAK_SERVER_URL = System.getProperty(\"keycloak.url\", \"http://localhost:8281/auth\");\n-    private static final String KEYCLOAK_REALM = \"kogito\";\n-    private static final String KEYCLOAK_CLIENT_ID = \"kogito-data-index-service\";\n+    private static final String KEYCLOAK_SERVER_URL = System.getProperty(\"quarkus.oidc.auth-server-url\", \"http://localhost:8281/auth/realms/kogito\");\n+    private static final String KEYCLOAK_CLIENT_ID = System.getProperty(\"quarkus.oidc.client-id\", \"kogito-data-index-service\");\n+    private static final String KEYCLOAK_CLIENT_SECRET = System.getProperty(\"quarkus.oidc.credentials.secret\", \"secret\");\n \n     @Test\n     public void testUnauthorizedUserAccess() {\n         //alice only have role User, resource is forbidden\n-        given().auth().oauth2(getAccessToken(\"alice\"))\n-                .when().get(\"/graphiql/\")\n+        given().contentType(ContentType.JSON).body(\"{ \\\"query\\\" : \\\"{ProcessInstances{ id } }\\\" }\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b86fd67f7c5448e92ad57a7d3cf974c79f2592f"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTQwMDcyOQ==", "bodyText": "yep double check removed", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r445400729", "createdAt": "2020-06-25T08:41:31Z", "author": {"login": "nmirasch"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/service/KeycloakIntegrationIndexingServiceIT.java", "diffHunk": "@@ -31,18 +31,18 @@\n @QuarkusTestResource(DataIndexInfinispanServerTestResource.class)\n public class KeycloakIntegrationIndexingServiceIT {\n \n-    private static final String KEYCLOAK_SERVER_URL = System.getProperty(\"keycloak.url\", \"http://localhost:8281/auth\");\n-    private static final String KEYCLOAK_REALM = \"kogito\";\n-    private static final String KEYCLOAK_CLIENT_ID = \"kogito-data-index-service\";\n+    private static final String KEYCLOAK_SERVER_URL = System.getProperty(\"quarkus.oidc.auth-server-url\", \"http://localhost:8281/auth/realms/kogito\");\n+    private static final String KEYCLOAK_CLIENT_ID = System.getProperty(\"quarkus.oidc.client-id\", \"kogito-data-index-service\");\n+    private static final String KEYCLOAK_CLIENT_SECRET = System.getProperty(\"quarkus.oidc.credentials.secret\", \"secret\");\n \n     @Test\n     public void testUnauthorizedUserAccess() {\n         //alice only have role User, resource is forbidden\n-        given().auth().oauth2(getAccessToken(\"alice\"))\n-                .when().get(\"/graphiql/\")\n+        given().contentType(ContentType.JSON).body(\"{ \\\"query\\\" : \\\"{ProcessInstances{ id } }\\\" }\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzMzg5Nw=="}, "originalCommit": {"oid": "6b86fd67f7c5448e92ad57a7d3cf974c79f2592f"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDQ1OTM4OnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/service/KeycloakIntegrationIndexingServiceIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNDoxNDo1OFrOGoCWVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNDoxNDo1OFrOGoCWVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzNDcwOQ==", "bodyText": "not sure I get the point to check this endpoint as it will always return 404, with or without security :)", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r444634709", "createdAt": "2020-06-24T04:14:58Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/service/KeycloakIntegrationIndexingServiceIT.java", "diffHunk": "@@ -65,27 +61,38 @@ public void testNoTokenProvided() {\n     @Test\n     public void testAuthorizedUserProvided() {\n         //jdoe has role:user and confidential, resource served\n-        given().auth().oauth2(getAccessToken(\"jdoe\"))\n-                .when().get(\"/graphiql/\")\n-                .then()\n-                .statusCode(404);\n-\n         given().auth().oauth2(getAccessToken(\"jdoe\"))\n                 .contentType(ContentType.JSON)\n                 .body(\"{ \\\"query\\\" : \\\"{ProcessInstances{ id } }\\\" }\")\n                 .when().post(\"/graphql\")\n                 .then().log().ifValidationFails().statusCode(200);\n     }\n \n+    @Test\n+    public void graphiqlLoginOnKeycloakServedTest() {\n+        // Returning keycloak login page\n+        given().when().get(\"/graphiql/\")\n+                .then()\n+                .statusCode(200);\n+        // Returning keycloak login page\n+        given().auth().oauth2(getAccessToken(\"jdoe\"))\n+                .when().get(\"/graphiql/\")\n+                .then()\n+                .statusCode(200);\n+        given().when().get(\"/other/\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b86fd67f7c5448e92ad57a7d3cf974c79f2592f"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDQ2MDk3OnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/vertx/VertxRouterSetupTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNDoxNTo1N1rOGoCXQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNDoxNTo1N1rOGoCXQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzNDk0NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    vertxRouterSetup.graphUIPath=\"/graphiql\";\n          \n          \n            \n                    vertxRouterSetup.graphUIPath = \"/graphiql\";", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r444634944", "createdAt": "2020-06-24T04:15:57Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/vertx/VertxRouterSetupTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.vertx;\n+\n+\n+import java.util.function.Function;\n+\n+import graphql.GraphQL;\n+\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.ext.web.Route;\n+import io.vertx.ext.web.Router;\n+\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.graphql.GraphiQLHandler;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Spy;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+\n+import static org.mockito.Mockito.lenient;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class VertxRouterSetupTest {\n+    @Mock\n+    Router routerMock;\n+\n+    @Mock\n+    Route routeMock;\n+\n+    @Mock\n+    RoutingContext routingContextMock;\n+\n+    @Mock\n+    GraphQL graphQLMock;\n+\n+    @InjectMocks\n+    @Spy\n+    VertxRouterSetup vertxRouterSetup;\n+\n+    @BeforeEach\n+    public void setup(){\n+        lenient().when(routerMock.route()).thenReturn(routeMock);\n+        lenient().when(routerMock.route(anyString())).thenReturn(routeMock);\n+    }\n+\n+    @Test\n+    public void testAuthEnabledTrue() {\n+        vertxRouterSetup.authEnabled = true;\n+        vertxRouterSetup.graphUIPath=\"/graphiql\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b86fd67f7c5448e92ad57a7d3cf974c79f2592f"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDQ2MTQ5OnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/vertx/VertxRouterSetupTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNDoxNjoyMFrOGoCXkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNDoxNjoyMFrOGoCXkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzNTAyNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    vertxRouterSetup.graphUIPath=\"/graphiql\";\n          \n          \n            \n                    vertxRouterSetup.graphUIPath = \"/graphiql\";", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r444635025", "createdAt": "2020-06-24T04:16:20Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/vertx/VertxRouterSetupTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.vertx;\n+\n+\n+import java.util.function.Function;\n+\n+import graphql.GraphQL;\n+\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.ext.web.Route;\n+import io.vertx.ext.web.Router;\n+\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.graphql.GraphiQLHandler;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Spy;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+\n+import static org.mockito.Mockito.lenient;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class VertxRouterSetupTest {\n+    @Mock\n+    Router routerMock;\n+\n+    @Mock\n+    Route routeMock;\n+\n+    @Mock\n+    RoutingContext routingContextMock;\n+\n+    @Mock\n+    GraphQL graphQLMock;\n+\n+    @InjectMocks\n+    @Spy\n+    VertxRouterSetup vertxRouterSetup;\n+\n+    @BeforeEach\n+    public void setup(){\n+        lenient().when(routerMock.route()).thenReturn(routeMock);\n+        lenient().when(routerMock.route(anyString())).thenReturn(routeMock);\n+    }\n+\n+    @Test\n+    public void testAuthEnabledTrue() {\n+        vertxRouterSetup.authEnabled = true;\n+        vertxRouterSetup.graphUIPath=\"/graphiql\";\n+        vertxRouterSetup.setupRouter(routerMock);\n+\n+        verify(vertxRouterSetup).addGraphiqlRequestHeader(any());\n+    }\n+\n+    @Test\n+    public void testAuthEnabledFalse() {\n+        vertxRouterSetup.authEnabled = false;\n+        vertxRouterSetup.graphUIPath=\"/graphiql\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b86fd67f7c5448e92ad57a7d3cf974c79f2592f"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDQ2MTY3OnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/vertx/VertxRouterSetupTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNDoxNjozMVrOGoCXug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwODowNjo0NFrOGov4JQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzNTA2Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    verify(vertxRouterSetup,never()).addGraphiqlRequestHeader(any());\n          \n          \n            \n                    verify(vertxRouterSetup, never()).addGraphiqlRequestHeader(any());", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r444635066", "createdAt": "2020-06-24T04:16:31Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/vertx/VertxRouterSetupTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.vertx;\n+\n+\n+import java.util.function.Function;\n+\n+import graphql.GraphQL;\n+\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.ext.web.Route;\n+import io.vertx.ext.web.Router;\n+\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.graphql.GraphiQLHandler;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Spy;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+\n+import static org.mockito.Mockito.lenient;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class VertxRouterSetupTest {\n+    @Mock\n+    Router routerMock;\n+\n+    @Mock\n+    Route routeMock;\n+\n+    @Mock\n+    RoutingContext routingContextMock;\n+\n+    @Mock\n+    GraphQL graphQLMock;\n+\n+    @InjectMocks\n+    @Spy\n+    VertxRouterSetup vertxRouterSetup;\n+\n+    @BeforeEach\n+    public void setup(){\n+        lenient().when(routerMock.route()).thenReturn(routeMock);\n+        lenient().when(routerMock.route(anyString())).thenReturn(routeMock);\n+    }\n+\n+    @Test\n+    public void testAuthEnabledTrue() {\n+        vertxRouterSetup.authEnabled = true;\n+        vertxRouterSetup.graphUIPath=\"/graphiql\";\n+        vertxRouterSetup.setupRouter(routerMock);\n+\n+        verify(vertxRouterSetup).addGraphiqlRequestHeader(any());\n+    }\n+\n+    @Test\n+    public void testAuthEnabledFalse() {\n+        vertxRouterSetup.authEnabled = false;\n+        vertxRouterSetup.graphUIPath=\"/graphiql\";\n+        vertxRouterSetup.setupRouter(routerMock);\n+\n+        verify(vertxRouterSetup,never()).addGraphiqlRequestHeader(any());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b86fd67f7c5448e92ad57a7d3cf974c79f2592f"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM4MDY0NQ==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r445380645", "createdAt": "2020-06-25T08:06:44Z", "author": {"login": "nmirasch"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/vertx/VertxRouterSetupTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.vertx;\n+\n+\n+import java.util.function.Function;\n+\n+import graphql.GraphQL;\n+\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.ext.web.Route;\n+import io.vertx.ext.web.Router;\n+\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.graphql.GraphiQLHandler;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Spy;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+\n+import static org.mockito.Mockito.lenient;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class VertxRouterSetupTest {\n+    @Mock\n+    Router routerMock;\n+\n+    @Mock\n+    Route routeMock;\n+\n+    @Mock\n+    RoutingContext routingContextMock;\n+\n+    @Mock\n+    GraphQL graphQLMock;\n+\n+    @InjectMocks\n+    @Spy\n+    VertxRouterSetup vertxRouterSetup;\n+\n+    @BeforeEach\n+    public void setup(){\n+        lenient().when(routerMock.route()).thenReturn(routeMock);\n+        lenient().when(routerMock.route(anyString())).thenReturn(routeMock);\n+    }\n+\n+    @Test\n+    public void testAuthEnabledTrue() {\n+        vertxRouterSetup.authEnabled = true;\n+        vertxRouterSetup.graphUIPath=\"/graphiql\";\n+        vertxRouterSetup.setupRouter(routerMock);\n+\n+        verify(vertxRouterSetup).addGraphiqlRequestHeader(any());\n+    }\n+\n+    @Test\n+    public void testAuthEnabledFalse() {\n+        vertxRouterSetup.authEnabled = false;\n+        vertxRouterSetup.graphUIPath=\"/graphiql\";\n+        vertxRouterSetup.setupRouter(routerMock);\n+\n+        verify(vertxRouterSetup,never()).addGraphiqlRequestHeader(any());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzNTA2Ng=="}, "originalCommit": {"oid": "6b86fd67f7c5448e92ad57a7d3cf974c79f2592f"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDQ2MjUwOnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/vertx/VertxRouterSetupTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNDoxNzoxMFrOGoCYPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwODowNjo1MlrOGov4Yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzNTE5Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ArgumentCaptor<MultiMap> multimapCaptor =ArgumentCaptor.forClass(MultiMap.class);\n          \n          \n            \n                    ArgumentCaptor<MultiMap> multimapCaptor = ArgumentCaptor.forClass(MultiMap.class);", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r444635196", "createdAt": "2020-06-24T04:17:10Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/vertx/VertxRouterSetupTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.vertx;\n+\n+\n+import java.util.function.Function;\n+\n+import graphql.GraphQL;\n+\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.ext.web.Route;\n+import io.vertx.ext.web.Router;\n+\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.graphql.GraphiQLHandler;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Spy;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+\n+import static org.mockito.Mockito.lenient;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class VertxRouterSetupTest {\n+    @Mock\n+    Router routerMock;\n+\n+    @Mock\n+    Route routeMock;\n+\n+    @Mock\n+    RoutingContext routingContextMock;\n+\n+    @Mock\n+    GraphQL graphQLMock;\n+\n+    @InjectMocks\n+    @Spy\n+    VertxRouterSetup vertxRouterSetup;\n+\n+    @BeforeEach\n+    public void setup(){\n+        lenient().when(routerMock.route()).thenReturn(routeMock);\n+        lenient().when(routerMock.route(anyString())).thenReturn(routeMock);\n+    }\n+\n+    @Test\n+    public void testAuthEnabledTrue() {\n+        vertxRouterSetup.authEnabled = true;\n+        vertxRouterSetup.graphUIPath=\"/graphiql\";\n+        vertxRouterSetup.setupRouter(routerMock);\n+\n+        verify(vertxRouterSetup).addGraphiqlRequestHeader(any());\n+    }\n+\n+    @Test\n+    public void testAuthEnabledFalse() {\n+        vertxRouterSetup.authEnabled = false;\n+        vertxRouterSetup.graphUIPath=\"/graphiql\";\n+        vertxRouterSetup.setupRouter(routerMock);\n+\n+        verify(vertxRouterSetup,never()).addGraphiqlRequestHeader(any());\n+    }\n+\n+    @Test\n+    public void testAddGraphiqlRequestHeader() {\n+        GraphiQLHandler graphiQLHandlerMock = mock(GraphiQLHandler.class);\n+        HttpServerRequest requestMock = mock(HttpServerRequest.class);\n+        MultiMap multiMapMock = mock(MultiMap.class);\n+        String token = \"TEST_TOKEN\";\n+        when(routingContextMock.request()).thenReturn(requestMock);\n+        when(requestMock.getHeader(HttpHeaders.AUTHORIZATION)).thenReturn(token);\n+        when(requestMock.headers()).thenReturn(multiMapMock);\n+\n+        vertxRouterSetup.addGraphiqlRequestHeader(graphiQLHandlerMock);\n+\n+        ArgumentCaptor<Function<RoutingContext, MultiMap>> functionCaptor =ArgumentCaptor.forClass(Function.class);\n+        verify(graphiQLHandlerMock).graphiQLRequestHeaders(functionCaptor.capture());\n+        functionCaptor.getValue().apply(routingContextMock);\n+\n+        ArgumentCaptor<MultiMap> multimapCaptor =ArgumentCaptor.forClass(MultiMap.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b86fd67f7c5448e92ad57a7d3cf974c79f2592f"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTM4MDcwNg==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r445380706", "createdAt": "2020-06-25T08:06:52Z", "author": {"login": "nmirasch"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/vertx/VertxRouterSetupTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.vertx;\n+\n+\n+import java.util.function.Function;\n+\n+import graphql.GraphQL;\n+\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.ext.web.Route;\n+import io.vertx.ext.web.Router;\n+\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.graphql.GraphiQLHandler;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Spy;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+\n+import static org.mockito.Mockito.lenient;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class VertxRouterSetupTest {\n+    @Mock\n+    Router routerMock;\n+\n+    @Mock\n+    Route routeMock;\n+\n+    @Mock\n+    RoutingContext routingContextMock;\n+\n+    @Mock\n+    GraphQL graphQLMock;\n+\n+    @InjectMocks\n+    @Spy\n+    VertxRouterSetup vertxRouterSetup;\n+\n+    @BeforeEach\n+    public void setup(){\n+        lenient().when(routerMock.route()).thenReturn(routeMock);\n+        lenient().when(routerMock.route(anyString())).thenReturn(routeMock);\n+    }\n+\n+    @Test\n+    public void testAuthEnabledTrue() {\n+        vertxRouterSetup.authEnabled = true;\n+        vertxRouterSetup.graphUIPath=\"/graphiql\";\n+        vertxRouterSetup.setupRouter(routerMock);\n+\n+        verify(vertxRouterSetup).addGraphiqlRequestHeader(any());\n+    }\n+\n+    @Test\n+    public void testAuthEnabledFalse() {\n+        vertxRouterSetup.authEnabled = false;\n+        vertxRouterSetup.graphUIPath=\"/graphiql\";\n+        vertxRouterSetup.setupRouter(routerMock);\n+\n+        verify(vertxRouterSetup,never()).addGraphiqlRequestHeader(any());\n+    }\n+\n+    @Test\n+    public void testAddGraphiqlRequestHeader() {\n+        GraphiQLHandler graphiQLHandlerMock = mock(GraphiQLHandler.class);\n+        HttpServerRequest requestMock = mock(HttpServerRequest.class);\n+        MultiMap multiMapMock = mock(MultiMap.class);\n+        String token = \"TEST_TOKEN\";\n+        when(routingContextMock.request()).thenReturn(requestMock);\n+        when(requestMock.getHeader(HttpHeaders.AUTHORIZATION)).thenReturn(token);\n+        when(requestMock.headers()).thenReturn(multiMapMock);\n+\n+        vertxRouterSetup.addGraphiqlRequestHeader(graphiQLHandlerMock);\n+\n+        ArgumentCaptor<Function<RoutingContext, MultiMap>> functionCaptor =ArgumentCaptor.forClass(Function.class);\n+        verify(graphiQLHandlerMock).graphiQLRequestHeaders(functionCaptor.capture());\n+        functionCaptor.getValue().apply(routingContextMock);\n+\n+        ArgumentCaptor<MultiMap> multimapCaptor =ArgumentCaptor.forClass(MultiMap.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzNTE5Ng=="}, "originalCommit": {"oid": "6b86fd67f7c5448e92ad57a7d3cf974c79f2592f"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDQ2MjY1OnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/vertx/VertxRouterSetupTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNDoxNzoxN1rOGoCYUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNDoxNzoxN1rOGoCYUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzNTIxOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ArgumentCaptor<Function<RoutingContext, MultiMap>> functionCaptor =ArgumentCaptor.forClass(Function.class);\n          \n          \n            \n                    ArgumentCaptor<Function<RoutingContext, MultiMap>> functionCaptor = ArgumentCaptor.forClass(Function.class);", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r444635219", "createdAt": "2020-06-24T04:17:17Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/vertx/VertxRouterSetupTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.vertx;\n+\n+\n+import java.util.function.Function;\n+\n+import graphql.GraphQL;\n+\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.ext.web.Route;\n+import io.vertx.ext.web.Router;\n+\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.graphql.GraphiQLHandler;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Spy;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+\n+import static org.mockito.Mockito.lenient;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class VertxRouterSetupTest {\n+    @Mock\n+    Router routerMock;\n+\n+    @Mock\n+    Route routeMock;\n+\n+    @Mock\n+    RoutingContext routingContextMock;\n+\n+    @Mock\n+    GraphQL graphQLMock;\n+\n+    @InjectMocks\n+    @Spy\n+    VertxRouterSetup vertxRouterSetup;\n+\n+    @BeforeEach\n+    public void setup(){\n+        lenient().when(routerMock.route()).thenReturn(routeMock);\n+        lenient().when(routerMock.route(anyString())).thenReturn(routeMock);\n+    }\n+\n+    @Test\n+    public void testAuthEnabledTrue() {\n+        vertxRouterSetup.authEnabled = true;\n+        vertxRouterSetup.graphUIPath=\"/graphiql\";\n+        vertxRouterSetup.setupRouter(routerMock);\n+\n+        verify(vertxRouterSetup).addGraphiqlRequestHeader(any());\n+    }\n+\n+    @Test\n+    public void testAuthEnabledFalse() {\n+        vertxRouterSetup.authEnabled = false;\n+        vertxRouterSetup.graphUIPath=\"/graphiql\";\n+        vertxRouterSetup.setupRouter(routerMock);\n+\n+        verify(vertxRouterSetup,never()).addGraphiqlRequestHeader(any());\n+    }\n+\n+    @Test\n+    public void testAddGraphiqlRequestHeader() {\n+        GraphiQLHandler graphiQLHandlerMock = mock(GraphiQLHandler.class);\n+        HttpServerRequest requestMock = mock(HttpServerRequest.class);\n+        MultiMap multiMapMock = mock(MultiMap.class);\n+        String token = \"TEST_TOKEN\";\n+        when(routingContextMock.request()).thenReturn(requestMock);\n+        when(requestMock.getHeader(HttpHeaders.AUTHORIZATION)).thenReturn(token);\n+        when(requestMock.headers()).thenReturn(multiMapMock);\n+\n+        vertxRouterSetup.addGraphiqlRequestHeader(graphiQLHandlerMock);\n+\n+        ArgumentCaptor<Function<RoutingContext, MultiMap>> functionCaptor =ArgumentCaptor.forClass(Function.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b86fd67f7c5448e92ad57a7d3cf974c79f2592f"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDQ2NzA4OnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/vertx/VertxRouterSetupTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNDoyMDoyNVrOGoCa6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNDoyMDoyNVrOGoCa6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzNTg4Mg==", "bodyText": "@nmirasch I think it makes sense to also test when the token is provided by the request headers. perhaps a new test method?", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r444635882", "createdAt": "2020-06-24T04:20:25Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/vertx/VertxRouterSetupTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.vertx;\n+\n+\n+import java.util.function.Function;\n+\n+import graphql.GraphQL;\n+\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.ext.web.Route;\n+import io.vertx.ext.web.Router;\n+\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.graphql.GraphiQLHandler;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Spy;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+\n+import static org.mockito.Mockito.lenient;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class VertxRouterSetupTest {\n+    @Mock\n+    Router routerMock;\n+\n+    @Mock\n+    Route routeMock;\n+\n+    @Mock\n+    RoutingContext routingContextMock;\n+\n+    @Mock\n+    GraphQL graphQLMock;\n+\n+    @InjectMocks\n+    @Spy\n+    VertxRouterSetup vertxRouterSetup;\n+\n+    @BeforeEach\n+    public void setup(){\n+        lenient().when(routerMock.route()).thenReturn(routeMock);\n+        lenient().when(routerMock.route(anyString())).thenReturn(routeMock);\n+    }\n+\n+    @Test\n+    public void testAuthEnabledTrue() {\n+        vertxRouterSetup.authEnabled = true;\n+        vertxRouterSetup.graphUIPath=\"/graphiql\";\n+        vertxRouterSetup.setupRouter(routerMock);\n+\n+        verify(vertxRouterSetup).addGraphiqlRequestHeader(any());\n+    }\n+\n+    @Test\n+    public void testAuthEnabledFalse() {\n+        vertxRouterSetup.authEnabled = false;\n+        vertxRouterSetup.graphUIPath=\"/graphiql\";\n+        vertxRouterSetup.setupRouter(routerMock);\n+\n+        verify(vertxRouterSetup,never()).addGraphiqlRequestHeader(any());\n+    }\n+\n+    @Test\n+    public void testAddGraphiqlRequestHeader() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b86fd67f7c5448e92ad57a7d3cf974c79f2592f"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3MDQ2ODY4OnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/vertx/VertxRouterSetupTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNDoyMTozMFrOGoCb6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNFQwNDoyMTozMFrOGoCb6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDYzNjEzNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    assertThat(multimapCaptor.getValue().get(HttpHeaders.AUTHORIZATION).equals(\"Bearer \" + token));\n          \n          \n            \n                    assertThat(multimapCaptor.getValue().get(HttpHeaders.AUTHORIZATION)).isEqualTo(\"Bearer \" + token);", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r444636136", "createdAt": "2020-06-24T04:21:30Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/vertx/VertxRouterSetupTest.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.vertx;\n+\n+\n+import java.util.function.Function;\n+\n+import graphql.GraphQL;\n+\n+import io.vertx.core.MultiMap;\n+import io.vertx.core.http.HttpHeaders;\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.ext.web.Route;\n+import io.vertx.ext.web.Router;\n+\n+import io.vertx.ext.web.RoutingContext;\n+import io.vertx.ext.web.handler.graphql.GraphiQLHandler;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.ArgumentCaptor;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.Spy;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+\n+import static org.mockito.Mockito.lenient;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.never;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class VertxRouterSetupTest {\n+    @Mock\n+    Router routerMock;\n+\n+    @Mock\n+    Route routeMock;\n+\n+    @Mock\n+    RoutingContext routingContextMock;\n+\n+    @Mock\n+    GraphQL graphQLMock;\n+\n+    @InjectMocks\n+    @Spy\n+    VertxRouterSetup vertxRouterSetup;\n+\n+    @BeforeEach\n+    public void setup(){\n+        lenient().when(routerMock.route()).thenReturn(routeMock);\n+        lenient().when(routerMock.route(anyString())).thenReturn(routeMock);\n+    }\n+\n+    @Test\n+    public void testAuthEnabledTrue() {\n+        vertxRouterSetup.authEnabled = true;\n+        vertxRouterSetup.graphUIPath=\"/graphiql\";\n+        vertxRouterSetup.setupRouter(routerMock);\n+\n+        verify(vertxRouterSetup).addGraphiqlRequestHeader(any());\n+    }\n+\n+    @Test\n+    public void testAuthEnabledFalse() {\n+        vertxRouterSetup.authEnabled = false;\n+        vertxRouterSetup.graphUIPath=\"/graphiql\";\n+        vertxRouterSetup.setupRouter(routerMock);\n+\n+        verify(vertxRouterSetup,never()).addGraphiqlRequestHeader(any());\n+    }\n+\n+    @Test\n+    public void testAddGraphiqlRequestHeader() {\n+        GraphiQLHandler graphiQLHandlerMock = mock(GraphiQLHandler.class);\n+        HttpServerRequest requestMock = mock(HttpServerRequest.class);\n+        MultiMap multiMapMock = mock(MultiMap.class);\n+        String token = \"TEST_TOKEN\";\n+        when(routingContextMock.request()).thenReturn(requestMock);\n+        when(requestMock.getHeader(HttpHeaders.AUTHORIZATION)).thenReturn(token);\n+        when(requestMock.headers()).thenReturn(multiMapMock);\n+\n+        vertxRouterSetup.addGraphiqlRequestHeader(graphiQLHandlerMock);\n+\n+        ArgumentCaptor<Function<RoutingContext, MultiMap>> functionCaptor =ArgumentCaptor.forClass(Function.class);\n+        verify(graphiQLHandlerMock).graphiQLRequestHeaders(functionCaptor.capture());\n+        functionCaptor.getValue().apply(routingContextMock);\n+\n+        ArgumentCaptor<MultiMap> multimapCaptor =ArgumentCaptor.forClass(MultiMap.class);\n+        verify(multiMapMock).addAll(multimapCaptor.capture());\n+\n+        assertThat(multimapCaptor.getValue().get(HttpHeaders.AUTHORIZATION).equals(\"Bearer \" + token));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6b86fd67f7c5448e92ad57a7d3cf974c79f2592f"}, "originalPosition": 113}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTIyMzk1OnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/auth/MultiTenantResolver.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMTo0NToyN1rOGqNDhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNToxNjowNlrOGqsBsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwNzI2OA==", "bodyText": "If we provide the default values above, the graphUIPath and graphUITentantId will never be null.", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r446907268", "createdAt": "2020-06-29T11:45:27Z", "author": {"login": "Sgitario"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/auth/MultiTenantResolver.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.auth;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.quarkus.oidc.TenantResolver;\n+import io.vertx.ext.web.RoutingContext;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+@ApplicationScoped\n+public class MultiTenantResolver implements TenantResolver {\n+\n+    @Inject\n+    @ConfigProperty(name = \"kogito.data-index.vertx-graphql.ui.path\", defaultValue = \"/graphiql/\")\n+    String graphUIPath;\n+\n+    @Inject\n+    @ConfigProperty(name = \"kogito.data-index.vertx-graphql.ui.tenant\", defaultValue = \"web-app-tenant\")\n+    String graphUITenantId;\n+\n+    @Override\n+    public String resolve(RoutingContext context) {\n+        if (graphUIPath != null\n+                && graphUITenantId != null", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40dbe4135ad6bdea4d8d883c517d5804ef3c381a"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQxNDcwNA==", "bodyText": "@Sgitario yes, removed!", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r447414704", "createdAt": "2020-06-30T05:16:06Z", "author": {"login": "nmirasch"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/auth/MultiTenantResolver.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.auth;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.quarkus.oidc.TenantResolver;\n+import io.vertx.ext.web.RoutingContext;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+@ApplicationScoped\n+public class MultiTenantResolver implements TenantResolver {\n+\n+    @Inject\n+    @ConfigProperty(name = \"kogito.data-index.vertx-graphql.ui.path\", defaultValue = \"/graphiql/\")\n+    String graphUIPath;\n+\n+    @Inject\n+    @ConfigProperty(name = \"kogito.data-index.vertx-graphql.ui.tenant\", defaultValue = \"web-app-tenant\")\n+    String graphUITenantId;\n+\n+    @Override\n+    public String resolve(RoutingContext context) {\n+        if (graphUIPath != null\n+                && graphUITenantId != null", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwNzI2OA=="}, "originalCommit": {"oid": "40dbe4135ad6bdea4d8d883c517d5804ef3c381a"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTI0MTE5OnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/vertx/VertxRouterSetup.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMTo1MDoxMVrOGqNNuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNToxNDo1OVrOGqsAaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwOTg4MQ==", "bodyText": "@nmirasch Can this be a reusable utils function instead of duplicating it?", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r446909881", "createdAt": "2020-06-29T11:50:11Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/vertx/VertxRouterSetup.java", "diffHunk": "@@ -39,18 +47,46 @@\n     @ConfigProperty(name = \"quarkus.oidc.enabled\", defaultValue = \"false\")\n     Boolean authEnabled;\n \n+    @Inject\n+    @ConfigProperty(name = \"kogito.data-index.vertx-graphql.ui.path\", defaultValue = \"/graphiql\")\n+    String graphUIPath;\n+\n     @Inject\n     GraphQL graphQL;\n \n     void setupRouter(@Observes Router router) {\n-        if (Boolean.FALSE.equals(authEnabled)) {\n-            router.route(\"/graphiql/*\").handler(GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true)));\n-            router.route().handler(LoggerHandler.create());\n-            router.route().handler(StaticHandler.create());\n-            router.route().handler(FaviconHandler.create());\n-            router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", \"/graphiql/\").setStatusCode(302).end());\n+        GraphiQLHandler graphiQLHandler = GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true));\n+        if (Boolean.TRUE.equals(authEnabled)) {\n+            addGraphiqlRequestHeader(graphiQLHandler);\n         }\n+        router.route(graphUIPath + \"*\").handler(graphiQLHandler);\n+        router.route().handler(LoggerHandler.create());\n+        router.route().handler(StaticHandler.create());\n+        router.route().handler(FaviconHandler.create());\n+        router.route(getGraphUIAllowedPath()).handler(ctx -> ctx.response().putHeader(\"location\", graphUIPath).setStatusCode(302).end());\n+        router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", graphUIPath).setStatusCode(302).end());\n         router.route(\"/graphql\").handler(ApolloWSHandler.create(graphQL));\n         router.route(\"/graphql\").handler(GraphQLHandler.create(graphQL, new GraphQLHandlerOptions()));\n     }\n+\n+    protected void addGraphiqlRequestHeader(GraphiQLHandler graphiQLHandler) {\n+        graphiQLHandler.graphiQLRequestHeaders(rc ->\n+                                                       MultiMap.caseInsensitiveMultiMap().add(HttpHeaders.AUTHORIZATION, \"Bearer \" + getCurrentAccessToken(rc))\n+        );\n+    }\n+\n+    private String getCurrentAccessToken(RoutingContext routingContext) {\n+        return Optional.ofNullable(routingContext.user())\n+                .map(user -> ((QuarkusHttpUser) user).getSecurityIdentity())\n+                .map(identity -> identity.getCredential(AccessTokenCredential.class))\n+                .map(AccessTokenCredential::getToken)\n+                .orElse(StringUtils.EMPTY);\n+    }\n+\n+    private String getGraphUIAllowedPath() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40dbe4135ad6bdea4d8d883c517d5804ef3c381a"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkxMzUyNQ==", "bodyText": "@cristianonicolai  yes, I thought that but I'm not sure where makes sense to have it. I had the temptation to add a property for that.", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r446913525", "createdAt": "2020-06-29T11:57:00Z", "author": {"login": "nmirasch"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/vertx/VertxRouterSetup.java", "diffHunk": "@@ -39,18 +47,46 @@\n     @ConfigProperty(name = \"quarkus.oidc.enabled\", defaultValue = \"false\")\n     Boolean authEnabled;\n \n+    @Inject\n+    @ConfigProperty(name = \"kogito.data-index.vertx-graphql.ui.path\", defaultValue = \"/graphiql\")\n+    String graphUIPath;\n+\n     @Inject\n     GraphQL graphQL;\n \n     void setupRouter(@Observes Router router) {\n-        if (Boolean.FALSE.equals(authEnabled)) {\n-            router.route(\"/graphiql/*\").handler(GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true)));\n-            router.route().handler(LoggerHandler.create());\n-            router.route().handler(StaticHandler.create());\n-            router.route().handler(FaviconHandler.create());\n-            router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", \"/graphiql/\").setStatusCode(302).end());\n+        GraphiQLHandler graphiQLHandler = GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true));\n+        if (Boolean.TRUE.equals(authEnabled)) {\n+            addGraphiqlRequestHeader(graphiQLHandler);\n         }\n+        router.route(graphUIPath + \"*\").handler(graphiQLHandler);\n+        router.route().handler(LoggerHandler.create());\n+        router.route().handler(StaticHandler.create());\n+        router.route().handler(FaviconHandler.create());\n+        router.route(getGraphUIAllowedPath()).handler(ctx -> ctx.response().putHeader(\"location\", graphUIPath).setStatusCode(302).end());\n+        router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", graphUIPath).setStatusCode(302).end());\n         router.route(\"/graphql\").handler(ApolloWSHandler.create(graphQL));\n         router.route(\"/graphql\").handler(GraphQLHandler.create(graphQL, new GraphQLHandlerOptions()));\n     }\n+\n+    protected void addGraphiqlRequestHeader(GraphiQLHandler graphiQLHandler) {\n+        graphiQLHandler.graphiQLRequestHeaders(rc ->\n+                                                       MultiMap.caseInsensitiveMultiMap().add(HttpHeaders.AUTHORIZATION, \"Bearer \" + getCurrentAccessToken(rc))\n+        );\n+    }\n+\n+    private String getCurrentAccessToken(RoutingContext routingContext) {\n+        return Optional.ofNullable(routingContext.user())\n+                .map(user -> ((QuarkusHttpUser) user).getSecurityIdentity())\n+                .map(identity -> identity.getCredential(AccessTokenCredential.class))\n+                .map(AccessTokenCredential::getToken)\n+                .orElse(StringUtils.EMPTY);\n+    }\n+\n+    private String getGraphUIAllowedPath() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwOTg4MQ=="}, "originalCommit": {"oid": "40dbe4135ad6bdea4d8d883c517d5804ef3c381a"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkxODk2MQ==", "bodyText": "to be honest, I dont see much value to allow customizing this endpoint.", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r446918961", "createdAt": "2020-06-29T12:06:36Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/vertx/VertxRouterSetup.java", "diffHunk": "@@ -39,18 +47,46 @@\n     @ConfigProperty(name = \"quarkus.oidc.enabled\", defaultValue = \"false\")\n     Boolean authEnabled;\n \n+    @Inject\n+    @ConfigProperty(name = \"kogito.data-index.vertx-graphql.ui.path\", defaultValue = \"/graphiql\")\n+    String graphUIPath;\n+\n     @Inject\n     GraphQL graphQL;\n \n     void setupRouter(@Observes Router router) {\n-        if (Boolean.FALSE.equals(authEnabled)) {\n-            router.route(\"/graphiql/*\").handler(GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true)));\n-            router.route().handler(LoggerHandler.create());\n-            router.route().handler(StaticHandler.create());\n-            router.route().handler(FaviconHandler.create());\n-            router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", \"/graphiql/\").setStatusCode(302).end());\n+        GraphiQLHandler graphiQLHandler = GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true));\n+        if (Boolean.TRUE.equals(authEnabled)) {\n+            addGraphiqlRequestHeader(graphiQLHandler);\n         }\n+        router.route(graphUIPath + \"*\").handler(graphiQLHandler);\n+        router.route().handler(LoggerHandler.create());\n+        router.route().handler(StaticHandler.create());\n+        router.route().handler(FaviconHandler.create());\n+        router.route(getGraphUIAllowedPath()).handler(ctx -> ctx.response().putHeader(\"location\", graphUIPath).setStatusCode(302).end());\n+        router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", graphUIPath).setStatusCode(302).end());\n         router.route(\"/graphql\").handler(ApolloWSHandler.create(graphQL));\n         router.route(\"/graphql\").handler(GraphQLHandler.create(graphQL, new GraphQLHandlerOptions()));\n     }\n+\n+    protected void addGraphiqlRequestHeader(GraphiQLHandler graphiQLHandler) {\n+        graphiQLHandler.graphiQLRequestHeaders(rc ->\n+                                                       MultiMap.caseInsensitiveMultiMap().add(HttpHeaders.AUTHORIZATION, \"Bearer \" + getCurrentAccessToken(rc))\n+        );\n+    }\n+\n+    private String getCurrentAccessToken(RoutingContext routingContext) {\n+        return Optional.ofNullable(routingContext.user())\n+                .map(user -> ((QuarkusHttpUser) user).getSecurityIdentity())\n+                .map(identity -> identity.getCredential(AccessTokenCredential.class))\n+                .map(AccessTokenCredential::getToken)\n+                .orElse(StringUtils.EMPTY);\n+    }\n+\n+    private String getGraphUIAllowedPath() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwOTg4MQ=="}, "originalCommit": {"oid": "40dbe4135ad6bdea4d8d883c517d5804ef3c381a"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQxNDM3Nw==", "bodyText": "@cristianonicolai  agree, I keep that as it was before", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r447414377", "createdAt": "2020-06-30T05:14:59Z", "author": {"login": "nmirasch"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/vertx/VertxRouterSetup.java", "diffHunk": "@@ -39,18 +47,46 @@\n     @ConfigProperty(name = \"quarkus.oidc.enabled\", defaultValue = \"false\")\n     Boolean authEnabled;\n \n+    @Inject\n+    @ConfigProperty(name = \"kogito.data-index.vertx-graphql.ui.path\", defaultValue = \"/graphiql\")\n+    String graphUIPath;\n+\n     @Inject\n     GraphQL graphQL;\n \n     void setupRouter(@Observes Router router) {\n-        if (Boolean.FALSE.equals(authEnabled)) {\n-            router.route(\"/graphiql/*\").handler(GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true)));\n-            router.route().handler(LoggerHandler.create());\n-            router.route().handler(StaticHandler.create());\n-            router.route().handler(FaviconHandler.create());\n-            router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", \"/graphiql/\").setStatusCode(302).end());\n+        GraphiQLHandler graphiQLHandler = GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true));\n+        if (Boolean.TRUE.equals(authEnabled)) {\n+            addGraphiqlRequestHeader(graphiQLHandler);\n         }\n+        router.route(graphUIPath + \"*\").handler(graphiQLHandler);\n+        router.route().handler(LoggerHandler.create());\n+        router.route().handler(StaticHandler.create());\n+        router.route().handler(FaviconHandler.create());\n+        router.route(getGraphUIAllowedPath()).handler(ctx -> ctx.response().putHeader(\"location\", graphUIPath).setStatusCode(302).end());\n+        router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", graphUIPath).setStatusCode(302).end());\n         router.route(\"/graphql\").handler(ApolloWSHandler.create(graphQL));\n         router.route(\"/graphql\").handler(GraphQLHandler.create(graphQL, new GraphQLHandlerOptions()));\n     }\n+\n+    protected void addGraphiqlRequestHeader(GraphiQLHandler graphiQLHandler) {\n+        graphiQLHandler.graphiQLRequestHeaders(rc ->\n+                                                       MultiMap.caseInsensitiveMultiMap().add(HttpHeaders.AUTHORIZATION, \"Bearer \" + getCurrentAccessToken(rc))\n+        );\n+    }\n+\n+    private String getCurrentAccessToken(RoutingContext routingContext) {\n+        return Optional.ofNullable(routingContext.user())\n+                .map(user -> ((QuarkusHttpUser) user).getSecurityIdentity())\n+                .map(identity -> identity.getCredential(AccessTokenCredential.class))\n+                .map(AccessTokenCredential::getToken)\n+                .orElse(StringUtils.EMPTY);\n+    }\n+\n+    private String getGraphUIAllowedPath() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkwOTg4MQ=="}, "originalCommit": {"oid": "40dbe4135ad6bdea4d8d883c517d5804ef3c381a"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTI3OTg0OnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/auth/MultiTenantResolver.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjowMTowN1rOGqNlHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNToxNToxOVrOGqsA4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkxNTg3MQ==", "bodyText": "should the default be just /graphiql ?", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r446915871", "createdAt": "2020-06-29T12:01:07Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/auth/MultiTenantResolver.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.auth;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.quarkus.oidc.TenantResolver;\n+import io.vertx.ext.web.RoutingContext;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+@ApplicationScoped\n+public class MultiTenantResolver implements TenantResolver {\n+\n+    @Inject\n+    @ConfigProperty(name = \"kogito.data-index.vertx-graphql.ui.path\", defaultValue = \"/graphiql/\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40dbe4135ad6bdea4d8d883c517d5804ef3c381a"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQxNDQ5Nw==", "bodyText": "updated", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r447414497", "createdAt": "2020-06-30T05:15:19Z", "author": {"login": "nmirasch"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/auth/MultiTenantResolver.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.auth;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.quarkus.oidc.TenantResolver;\n+import io.vertx.ext.web.RoutingContext;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+\n+@ApplicationScoped\n+public class MultiTenantResolver implements TenantResolver {\n+\n+    @Inject\n+    @ConfigProperty(name = \"kogito.data-index.vertx-graphql.ui.path\", defaultValue = \"/graphiql/\")", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkxNTg3MQ=="}, "originalCommit": {"oid": "40dbe4135ad6bdea4d8d883c517d5804ef3c381a"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NTI4Nzc5OnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/vertx/VertxRouterSetup.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjowMzoxM1rOGqNp4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNToxNzoxMlrOGqsC_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkxNzA5MA==", "bodyText": "In order to avoid duplicate code here, does it make sense to have something like:\nrouter.route(graphUIPath + \"*\").handler(setRootLocation());\nrouter.route(\"/\").handler(setRootLocation());\n// ...\n\nprotected Handler<RoutingContext> setRootLocation() {\n     return ctx -> ctx.response().putHeader(\"location\", graphUIPath).setStatusCode(302).end();\n}", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r446917090", "createdAt": "2020-06-29T12:03:13Z", "author": {"login": "Sgitario"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/vertx/VertxRouterSetup.java", "diffHunk": "@@ -39,18 +47,46 @@\n     @ConfigProperty(name = \"quarkus.oidc.enabled\", defaultValue = \"false\")\n     Boolean authEnabled;\n \n+    @Inject\n+    @ConfigProperty(name = \"kogito.data-index.vertx-graphql.ui.path\", defaultValue = \"/graphiql\")\n+    String graphUIPath;\n+\n     @Inject\n     GraphQL graphQL;\n \n     void setupRouter(@Observes Router router) {\n-        if (Boolean.FALSE.equals(authEnabled)) {\n-            router.route(\"/graphiql/*\").handler(GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true)));\n-            router.route().handler(LoggerHandler.create());\n-            router.route().handler(StaticHandler.create());\n-            router.route().handler(FaviconHandler.create());\n-            router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", \"/graphiql/\").setStatusCode(302).end());\n+        GraphiQLHandler graphiQLHandler = GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true));\n+        if (Boolean.TRUE.equals(authEnabled)) {\n+            addGraphiqlRequestHeader(graphiQLHandler);\n         }\n+        router.route(graphUIPath + \"*\").handler(graphiQLHandler);\n+        router.route().handler(LoggerHandler.create());\n+        router.route().handler(StaticHandler.create());\n+        router.route().handler(FaviconHandler.create());\n+        router.route(getGraphUIAllowedPath()).handler(ctx -> ctx.response().putHeader(\"location\", graphUIPath).setStatusCode(302).end());\n+        router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", graphUIPath).setStatusCode(302).end());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "40dbe4135ad6bdea4d8d883c517d5804ef3c381a"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQxNTAzNg==", "bodyText": "@Sgitario Regarding I just restored the previous served routes, This is not needed now, but thanks!", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r447415036", "createdAt": "2020-06-30T05:17:12Z", "author": {"login": "nmirasch"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/vertx/VertxRouterSetup.java", "diffHunk": "@@ -39,18 +47,46 @@\n     @ConfigProperty(name = \"quarkus.oidc.enabled\", defaultValue = \"false\")\n     Boolean authEnabled;\n \n+    @Inject\n+    @ConfigProperty(name = \"kogito.data-index.vertx-graphql.ui.path\", defaultValue = \"/graphiql\")\n+    String graphUIPath;\n+\n     @Inject\n     GraphQL graphQL;\n \n     void setupRouter(@Observes Router router) {\n-        if (Boolean.FALSE.equals(authEnabled)) {\n-            router.route(\"/graphiql/*\").handler(GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true)));\n-            router.route().handler(LoggerHandler.create());\n-            router.route().handler(StaticHandler.create());\n-            router.route().handler(FaviconHandler.create());\n-            router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", \"/graphiql/\").setStatusCode(302).end());\n+        GraphiQLHandler graphiQLHandler = GraphiQLHandler.create(new GraphiQLHandlerOptions().setEnabled(true));\n+        if (Boolean.TRUE.equals(authEnabled)) {\n+            addGraphiqlRequestHeader(graphiQLHandler);\n         }\n+        router.route(graphUIPath + \"*\").handler(graphiQLHandler);\n+        router.route().handler(LoggerHandler.create());\n+        router.route().handler(StaticHandler.create());\n+        router.route().handler(FaviconHandler.create());\n+        router.route(getGraphUIAllowedPath()).handler(ctx -> ctx.response().putHeader(\"location\", graphUIPath).setStatusCode(302).end());\n+        router.route(\"/\").handler(ctx -> ctx.response().putHeader(\"location\", graphUIPath).setStatusCode(302).end());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkxNzA5MA=="}, "originalCommit": {"oid": "40dbe4135ad6bdea4d8d883c517d5804ef3c381a"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODUyNzQ3OnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/auth/MultiTenantResolverTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNToyMDoxMFrOGqsGUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNToyMDoxMFrOGqsGUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQxNTg4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private static final String GRAPH_UI_PATH = System.getProperty(\"kogito.data-index.vertx-graphql.ui.path\", \"/graphiql/\");\n          \n          \n            \n                private static final String GRAPH_UI_PATH = System.getProperty(\"kogito.data-index.vertx-graphql.ui.path\", \"/graphiql\");", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r447415888", "createdAt": "2020-06-30T05:20:10Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/auth/MultiTenantResolverTest.java", "diffHunk": "@@ -0,0 +1,87 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.auth;\n+\n+import io.vertx.core.http.HttpServerRequest;\n+import io.vertx.ext.web.RoutingContext;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.when;\n+\n+@ExtendWith(MockitoExtension.class)\n+class MultiTenantResolverTest {\n+\n+    private static final String GRAPH_UI_PATH = System.getProperty(\"kogito.data-index.vertx-graphql.ui.path\", \"/graphiql/\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1de19d5bd9ae5285b7554e54f78a8499e754a68b"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4ODUzMDcwOnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/service/KeycloakIntegrationIndexingServiceIT.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNToyMjowM1rOGqsIUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNToyMjowM1rOGqsIUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQxNjQwMQ==", "bodyText": "@nmirasch I think just this one needs some improvement. A 200 could also be returned if the auth is disabled right? Anything that checks that it actually reached the login page.", "url": "https://github.com/kiegroup/kogito-apps/pull/241#discussion_r447416401", "createdAt": "2020-06-30T05:22:03Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/service/KeycloakIntegrationIndexingServiceIT.java", "diffHunk": "@@ -65,27 +56,43 @@ public void testNoTokenProvided() {\n     @Test\n     public void testAuthorizedUserProvided() {\n         //jdoe has role:user and confidential, resource served\n-        given().auth().oauth2(getAccessToken(\"jdoe\"))\n-                .when().get(\"/graphiql/\")\n-                .then()\n-                .statusCode(404);\n-\n         given().auth().oauth2(getAccessToken(\"jdoe\"))\n                 .contentType(ContentType.JSON)\n                 .body(\"{ \\\"query\\\" : \\\"{ProcessInstances{ id } }\\\" }\")\n                 .when().post(\"/graphql\")\n                 .then().log().ifValidationFails().statusCode(200);\n     }\n \n+    @Test\n+    public void graphiqlLoginOnKeycloakServedTest() {\n+        // Returning keycloak login page\n+        given().when().get(\"/graphiql/\")\n+                .then()\n+                .statusCode(200);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1de19d5bd9ae5285b7554e54f78a8499e754a68b"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 950, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}