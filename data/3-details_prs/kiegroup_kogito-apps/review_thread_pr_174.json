{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyNzk2MzQ1", "number": 174, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMDo0MDoyNVrODyA8fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNzo0MzoxMFrODyzJSw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUzNzcwODc4OnYy", "diffSide": "RIGHT", "path": "jobs-service/src/test/java/org/kie/kogito/jobs/service/scheduler/BaseTimerJobSchedulerTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxMDo0MDoyNVrOGFz7rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNVQxNTozMjoxNFrOGF_deQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc0NjkyNg==", "bodyText": "Value of this captor is never retrieved.", "url": "https://github.com/kiegroup/kogito-apps/pull/174#discussion_r408746926", "createdAt": "2020-04-15T10:40:25Z", "author": {"login": "MarianMacik"}, "path": "jobs-service/src/test/java/org/kie/kogito/jobs/service/scheduler/BaseTimerJobSchedulerTest.java", "diffHunk": "@@ -165,6 +165,11 @@ private void testExistingJob(boolean expired, JobStatus jobStatus) {\n         verify(tested(), expired ? never() : times(1)).doSchedule(delayCaptor.capture(), eq(job));\n         verify(jobRepository, expired ? never() : times(1)).save(scheduleCaptor.capture());\n \n+        //assert always a scheduled job is canceled (periodic or not)\n+        Optional.ofNullable(jobStatus)\n+                .filter(SCHEDULED::equals)\n+                .ifPresent(s -> verify(tested()).cancel(scheduleCaptorFuture.capture()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7a30fbc0838f6384b251c617472bb1fe189c1aec"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODkzNTgwMQ==", "bodyText": "added the missing assertions.", "url": "https://github.com/kiegroup/kogito-apps/pull/174#discussion_r408935801", "createdAt": "2020-04-15T15:32:14Z", "author": {"login": "tiagodolphine"}, "path": "jobs-service/src/test/java/org/kie/kogito/jobs/service/scheduler/BaseTimerJobSchedulerTest.java", "diffHunk": "@@ -165,6 +165,11 @@ private void testExistingJob(boolean expired, JobStatus jobStatus) {\n         verify(tested(), expired ? never() : times(1)).doSchedule(delayCaptor.capture(), eq(job));\n         verify(jobRepository, expired ? never() : times(1)).save(scheduleCaptor.capture());\n \n+        //assert always a scheduled job is canceled (periodic or not)\n+        Optional.ofNullable(jobStatus)\n+                .filter(SCHEDULED::equals)\n+                .ifPresent(s -> verify(tested()).cancel(scheduleCaptorFuture.capture()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODc0NjkyNg=="}, "originalCommit": {"oid": "7a30fbc0838f6384b251c617472bb1fe189c1aec"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NTkzMzU1OnYy", "diffSide": "RIGHT", "path": "jobs-service/src/test/java/org/kie/kogito/jobs/service/resource/JobResourceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNzo0MzoxMFrOGHDXnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QwNzo0MzoxMFrOGHDXnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDA0ODQxMg==", "bodyText": "This test seems to be same as getAfterCreate(), it just contains additional assertions, can they be merged together?", "url": "https://github.com/kiegroup/kogito-apps/pull/174#discussion_r410048412", "createdAt": "2020-04-17T07:43:10Z", "author": {"login": "sutaakar"}, "path": "jobs-service/src/test/java/org/kie/kogito/jobs/service/resource/JobResourceTest.java", "diffHunk": "@@ -100,25 +107,115 @@ void getAfterCreate() throws Exception {\n         final String id = \"3\";\n         final Job job = getJob(id);\n         create(jobToJson(job));\n-        final ScheduledJob scheduledJob = given()\n+        assertGetScheduledJob(id);\n+    }\n+\n+    @Test\n+    void executeTest() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0e11bdcc768acd1a62044486a5039533cc77a7a0"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1061, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}