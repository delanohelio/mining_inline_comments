{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc4NDg2NjU0", "number": 436, "reviewThreads": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwODoxMjowNlrOEgSXxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNjo0MTo1N1rOEgzKbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMjkwODg0OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/task-console/server/MockData/controllers.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwODoxMjowNlrOHNEEzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwODoxMjowNlrOHNEEzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ2MDMwMA==", "bodyText": "should enforce ' over \" in string literals.", "url": "https://github.com/kiegroup/kogito-apps/pull/436#discussion_r483460300", "createdAt": "2020-09-04T08:12:06Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/task-console/server/MockData/controllers.js", "diffHunk": "@@ -28,7 +28,7 @@ module.exports = controller = {\n     });\n \n     if(tasksUnableToTransition.includes(task.id)) {\n-      res.status(500).send(\"\");\n+      res.status(500).send(\"Unexpected failure when doing a transition!\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "118094bbc6cdb8484613627a02486be209016437"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMjkyNzQxOnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/task-console/src/components/Atoms/FormNotification/FormNotification.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwODoxNzoyMVrOHNEPtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwODoxNzoyMVrOHNEPtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ2MzA5Mg==", "bodyText": "why did you remove the OUIAProps? I mean, in task-console we don't have yet the coverage, so it is not blocking issue.", "url": "https://github.com/kiegroup/kogito-apps/pull/436#discussion_r483463092", "createdAt": "2020-09-04T08:17:21Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/task-console/src/components/Atoms/FormNotification/FormNotification.tsx", "diffHunk": "@@ -14,38 +14,72 @@\n  * limitations under the License.\n  */\n \n-import React from 'react';\n-import { Button, Modal, Text, TextContent } from '@patternfly/react-core';\n-import { componentOuiaProps, OUIAProps } from '@kogito-apps/common';\n+import React, { useState } from 'react';\n+import {\n+  Alert,\n+  AlertActionCloseButton,\n+  AlertActionLink\n+} from '@patternfly/react-core';\n \n-interface IOwnProps {\n+enum NotificationType {\n+  SUCCESS = 'success',\n+  ERROR = 'error'\n+}\n+\n+export interface Notification {\n+  type: 'success' | 'error';\n   message: string;\n-  closeAction: () => void;\n+  details?: string;\n+  customAction?: Action;\n+  close: () => void;\n }\n \n-const FormNotification: React.FC<IOwnProps & OUIAProps> = ({\n-  message,\n-  closeAction,\n-  ouiaId,\n-  ouiaSafe\n-}) => {\n+export interface Action {\n+  label: string;\n+  onClick: () => void;\n+}\n+\n+interface IOwnProps {\n+  notification: Notification;\n+}\n+\n+const FormNotification: React.FC<IOwnProps> = ({ notification }) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "118094bbc6cdb8484613627a02486be209016437"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMjk1MDA3OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/task-console/src/components/Atoms/TaskState/TaskState.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwODoyNDowMVrOHNEdfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwODoyNDowMVrOHNEdfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ2NjYyMw==", "bodyText": "shouldn't we reference here the enum from above? variant?: Variant", "url": "https://github.com/kiegroup/kogito-apps/pull/436#discussion_r483466623", "createdAt": "2020-09-04T08:24:01Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/task-console/src/components/Atoms/TaskState/TaskState.tsx", "diffHunk": "@@ -15,40 +15,68 @@\n  */\n \n import React from 'react';\n+\n+import { GraphQL } from '@kogito-apps/common';\n+import UserTaskInstance = GraphQL.UserTaskInstance;\n+import { Label } from '@patternfly/react-core';\n import {\n   BanIcon,\n   CheckCircleIcon,\n   OnRunningIcon\n } from '@patternfly/react-icons';\n \n-import { GraphQL } from '@kogito-apps/common';\n-import UserTaskInstance = GraphQL.UserTaskInstance;\n+enum Variant {\n+  INLINE = 'inline',\n+  LABEL = 'label'\n+}\n \n interface IOwnProps {\n   task: UserTaskInstance;\n+  variant?: 'inline' | 'label';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "118094bbc6cdb8484613627a02486be209016437"}, "originalPosition": 23}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMjk1NjQwOnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/task-console/src/components/Atoms/TaskState/TaskState.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwODoyNTo1M1rOHNEhcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwODoyNTo1M1rOHNEhcw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ2NzYzNQ==", "bodyText": "I think we might need to export this too, cause it should be part of props passed to the component from another component.", "url": "https://github.com/kiegroup/kogito-apps/pull/436#discussion_r483467635", "createdAt": "2020-09-04T08:25:53Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/task-console/src/components/Atoms/TaskState/TaskState.tsx", "diffHunk": "@@ -15,40 +15,68 @@\n  */\n \n import React from 'react';\n+\n+import { GraphQL } from '@kogito-apps/common';\n+import UserTaskInstance = GraphQL.UserTaskInstance;\n+import { Label } from '@patternfly/react-core';\n import {\n   BanIcon,\n   CheckCircleIcon,\n   OnRunningIcon\n } from '@patternfly/react-icons';\n \n-import { GraphQL } from '@kogito-apps/common';\n-import UserTaskInstance = GraphQL.UserTaskInstance;\n+enum Variant {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "118094bbc6cdb8484613627a02486be209016437"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMjk1NzgzOnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/task-console/src/components/Atoms/TaskState/tests/TaskState.test.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwODoyNjoyMVrOHNEiWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwODoyNjoyMVrOHNEiWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ2Nzg2NA==", "bodyText": "and here we should IMO pass the enum Variant value.", "url": "https://github.com/kiegroup/kogito-apps/pull/436#discussion_r483467864", "createdAt": "2020-09-04T08:26:21Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/task-console/src/components/Atoms/TaskState/tests/TaskState.test.tsx", "diffHunk": "@@ -102,6 +111,67 @@ describe('TaskState', () => {\n \n     expect(wrapper).toMatchSnapshot();\n \n+    const label = wrapper.find(Label);\n+\n+    expect(label.exists()).toBeFalsy();\n+\n+    const icon = wrapper.find(CheckCircleIcon);\n+\n+    expect(icon.exists()).toBeTruthy();\n+  });\n+\n+  it('Test show active task in label', () => {\n+    const wrapper = getWrapper(\n+      <TaskState task={userTask} variant={'label'} />,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "118094bbc6cdb8484613627a02486be209016437"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzA3NzIyOnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/task-console/src/components/Molecules/PageTitle/PageTitle.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwODo1OToyMFrOHNFpyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwODo1OToyMFrOHNFpyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzQ4NjE1Mw==", "bodyText": "ok, now it seems that you do want to introduce the OUIA attributes.", "url": "https://github.com/kiegroup/kogito-apps/pull/436#discussion_r483486153", "createdAt": "2020-09-04T08:59:20Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/task-console/src/components/Molecules/PageTitle/PageTitle.tsx", "diffHunk": "@@ -1,16 +1,34 @@\n import React from 'react';\n-import { Title } from '@patternfly/react-core';\n+import { Flex, FlexItem, Title } from '@patternfly/react-core';\n+import { componentOuiaProps, OUIAProps } from '@kogito-apps/common';\n \n export interface IOwnProps {\n   title: any;\n+  extra?: any;\n }\n \n-const PageTitle: React.FC<IOwnProps> = ({ title }) => {\n+const PageTitle: React.FC<IOwnProps & OUIAProps> = ({", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "118094bbc6cdb8484613627a02486be209016437"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyMzE4ODc4OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/task-console/src/components/Molecules/PageTitle/PageTitle.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwOTozMTo0N1rOHNGuJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wNFQwOTozMTo0N1rOHNGuJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MzUwMzY1Mw==", "bodyText": "the ouia attributes need to be at top-level element of the defining component (when rendered) - so I'd say the Flex here, cause fragment can't have attributes and Flex is the first actually rendering sth.", "url": "https://github.com/kiegroup/kogito-apps/pull/436#discussion_r483503653", "createdAt": "2020-09-04T09:31:47Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/task-console/src/components/Molecules/PageTitle/PageTitle.tsx", "diffHunk": "@@ -1,16 +1,34 @@\n import React from 'react';\n-import { Title } from '@patternfly/react-core';\n+import { Flex, FlexItem, Title } from '@patternfly/react-core';\n+import { componentOuiaProps, OUIAProps } from '@kogito-apps/common';\n \n export interface IOwnProps {\n   title: any;\n+  extra?: any;\n }\n \n-const PageTitle: React.FC<IOwnProps> = ({ title }) => {\n+const PageTitle: React.FC<IOwnProps & OUIAProps> = ({\n+  title,\n+  extra,\n+  ouiaId,\n+  ouiaSafe\n+}) => {\n   return (\n     <React.Fragment>\n-      <Title headingLevel=\"h1\" size=\"4xl\">\n-        {title}\n-      </Title>\n+      <Flex>\n+        <FlexItem spacer={{ default: 'spacerSm' }}>\n+          <Title\n+            headingLevel=\"h1\"\n+            size=\"4xl\"\n+            {...componentOuiaProps(ouiaId, 'page-title', ouiaSafe)}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "118094bbc6cdb8484613627a02486be209016437"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODE1MDczOnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/task-console/src/components/Atoms/FormNotification/FormNotification.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNTo0MDo1NlrOHNwyJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNTo0MDo1NlrOHNwyJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE5MjgwNQ==", "bodyText": "@pefernan  - you could do something like this for types -\nconst [showDetails, setShowDetails] = useState<boolean>(false);", "url": "https://github.com/kiegroup/kogito-apps/pull/436#discussion_r484192805", "createdAt": "2020-09-07T05:40:56Z", "author": {"login": "AjayJagan"}, "path": "ui-packages/packages/task-console/src/components/Atoms/FormNotification/FormNotification.tsx", "diffHunk": "@@ -14,38 +14,72 @@\n  * limitations under the License.\n  */\n \n-import React from 'react';\n-import { Button, Modal, Text, TextContent } from '@patternfly/react-core';\n-import { componentOuiaProps, OUIAProps } from '@kogito-apps/common';\n+import React, { useState } from 'react';\n+import {\n+  Alert,\n+  AlertActionCloseButton,\n+  AlertActionLink\n+} from '@patternfly/react-core';\n \n-interface IOwnProps {\n+enum NotificationType {\n+  SUCCESS = 'success',\n+  ERROR = 'error'\n+}\n+\n+export interface Notification {\n+  type: 'success' | 'error';\n   message: string;\n-  closeAction: () => void;\n+  details?: string;\n+  customAction?: Action;\n+  close: () => void;\n }\n \n-const FormNotification: React.FC<IOwnProps & OUIAProps> = ({\n-  message,\n-  closeAction,\n-  ouiaId,\n-  ouiaSafe\n-}) => {\n+export interface Action {\n+  label: string;\n+  onClick: () => void;\n+}\n+\n+interface IOwnProps {\n+  notification: Notification;\n+}\n+\n+const FormNotification: React.FC<IOwnProps> = ({ notification }) => {\n+  let variant;\n+\n+  const [showDetails, setShowDetails]: [boolean, any] = useState(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "118094bbc6cdb8484613627a02486be209016437"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODE1Nzc5OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/task-console/src/components/Atoms/TaskState/TaskState.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNTo0NDo1N1rOHNw2Rg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNTo0NDo1N1rOHNw2Rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE5Mzg2Mg==", "bodyText": "hey @pefernan, can you try using this- const icon:JSX.Element = resolveTaskStateIcon(task);", "url": "https://github.com/kiegroup/kogito-apps/pull/436#discussion_r484193862", "createdAt": "2020-09-07T05:44:57Z", "author": {"login": "AjayJagan"}, "path": "ui-packages/packages/task-console/src/components/Atoms/TaskState/TaskState.tsx", "diffHunk": "@@ -15,40 +15,68 @@\n  */\n \n import React from 'react';\n+\n+import { GraphQL } from '@kogito-apps/common';\n+import UserTaskInstance = GraphQL.UserTaskInstance;\n+import { Label } from '@patternfly/react-core';\n import {\n   BanIcon,\n   CheckCircleIcon,\n   OnRunningIcon\n } from '@patternfly/react-icons';\n \n-import { GraphQL } from '@kogito-apps/common';\n-import UserTaskInstance = GraphQL.UserTaskInstance;\n+enum Variant {\n+  INLINE = 'inline',\n+  LABEL = 'label'\n+}\n \n interface IOwnProps {\n   task: UserTaskInstance;\n+  variant?: 'inline' | 'label';\n }\n \n-const TaskState: React.FC<IOwnProps> = ({ task }) => {\n-  let icon;\n+const TaskState: React.FC<IOwnProps> = ({ task, variant }) => {\n+  const icon = resolveTaskStateIcon(task);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "118094bbc6cdb8484613627a02486be209016437"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODE1OTcwOnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/task-console/src/components/Atoms/TaskState/TaskState.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNTo0NTo1OVrOHNw3Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxMjozNDozM1rOHPFIHQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE5NDEzNA==", "bodyText": "try this ?-const color:string = resolveTaskStateLabelColor(task);", "url": "https://github.com/kiegroup/kogito-apps/pull/436#discussion_r484194134", "createdAt": "2020-09-07T05:45:59Z", "author": {"login": "AjayJagan"}, "path": "ui-packages/packages/task-console/src/components/Atoms/TaskState/TaskState.tsx", "diffHunk": "@@ -15,40 +15,68 @@\n  */\n \n import React from 'react';\n+\n+import { GraphQL } from '@kogito-apps/common';\n+import UserTaskInstance = GraphQL.UserTaskInstance;\n+import { Label } from '@patternfly/react-core';\n import {\n   BanIcon,\n   CheckCircleIcon,\n   OnRunningIcon\n } from '@patternfly/react-icons';\n \n-import { GraphQL } from '@kogito-apps/common';\n-import UserTaskInstance = GraphQL.UserTaskInstance;\n+enum Variant {\n+  INLINE = 'inline',\n+  LABEL = 'label'\n+}\n \n interface IOwnProps {\n   task: UserTaskInstance;\n+  variant?: 'inline' | 'label';\n }\n \n-const TaskState: React.FC<IOwnProps> = ({ task }) => {\n-  let icon;\n+const TaskState: React.FC<IOwnProps> = ({ task, variant }) => {\n+  const icon = resolveTaskStateIcon(task);\n+\n+  if (variant === Variant.LABEL) {\n+    const color = resolveTaskStateLabelColor(task);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "118094bbc6cdb8484613627a02486be209016437"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTU3NDY4NQ==", "bodyText": "In this case I cannot do it, but I agree the change is a good one", "url": "https://github.com/kiegroup/kogito-apps/pull/436#discussion_r485574685", "createdAt": "2020-09-09T12:34:33Z", "author": {"login": "pefernan"}, "path": "ui-packages/packages/task-console/src/components/Atoms/TaskState/TaskState.tsx", "diffHunk": "@@ -15,40 +15,68 @@\n  */\n \n import React from 'react';\n+\n+import { GraphQL } from '@kogito-apps/common';\n+import UserTaskInstance = GraphQL.UserTaskInstance;\n+import { Label } from '@patternfly/react-core';\n import {\n   BanIcon,\n   CheckCircleIcon,\n   OnRunningIcon\n } from '@patternfly/react-icons';\n \n-import { GraphQL } from '@kogito-apps/common';\n-import UserTaskInstance = GraphQL.UserTaskInstance;\n+enum Variant {\n+  INLINE = 'inline',\n+  LABEL = 'label'\n+}\n \n interface IOwnProps {\n   task: UserTaskInstance;\n+  variant?: 'inline' | 'label';\n }\n \n-const TaskState: React.FC<IOwnProps> = ({ task }) => {\n-  let icon;\n+const TaskState: React.FC<IOwnProps> = ({ task, variant }) => {\n+  const icon = resolveTaskStateIcon(task);\n+\n+  if (variant === Variant.LABEL) {\n+    const color = resolveTaskStateLabelColor(task);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE5NDEzNA=="}, "originalCommit": {"oid": "118094bbc6cdb8484613627a02486be209016437"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODE2MDQ5OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/task-console/src/components/Atoms/TaskState/TaskState.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNTo0NjoyNVrOHNw3yQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNTo0NjoyNVrOHNw3yQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE5NDI0OQ==", "bodyText": "try this? - function resolveTaskStateIcon(task: UserTaskInstance):JSX.Element {", "url": "https://github.com/kiegroup/kogito-apps/pull/436#discussion_r484194249", "createdAt": "2020-09-07T05:46:25Z", "author": {"login": "AjayJagan"}, "path": "ui-packages/packages/task-console/src/components/Atoms/TaskState/TaskState.tsx", "diffHunk": "@@ -15,40 +15,68 @@\n  */\n \n import React from 'react';\n+\n+import { GraphQL } from '@kogito-apps/common';\n+import UserTaskInstance = GraphQL.UserTaskInstance;\n+import { Label } from '@patternfly/react-core';\n import {\n   BanIcon,\n   CheckCircleIcon,\n   OnRunningIcon\n } from '@patternfly/react-icons';\n \n-import { GraphQL } from '@kogito-apps/common';\n-import UserTaskInstance = GraphQL.UserTaskInstance;\n+enum Variant {\n+  INLINE = 'inline',\n+  LABEL = 'label'\n+}\n \n interface IOwnProps {\n   task: UserTaskInstance;\n+  variant?: 'inline' | 'label';\n }\n \n-const TaskState: React.FC<IOwnProps> = ({ task }) => {\n-  let icon;\n+const TaskState: React.FC<IOwnProps> = ({ task, variant }) => {\n+  const icon = resolveTaskStateIcon(task);\n+\n+  if (variant === Variant.LABEL) {\n+    const color = resolveTaskStateLabelColor(task);\n+    return (\n+      <Label color={color} icon={icon}>\n+        {task.state}\n+      </Label>\n+    );\n+  }\n+\n+  return (\n+    <React.Fragment>\n+      {icon} {task.state}\n+    </React.Fragment>\n+  );\n+};\n \n+function resolveTaskStateIcon(task: UserTaskInstance) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "118094bbc6cdb8484613627a02486be209016437"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODE2MTY2OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/task-console/src/components/Atoms/TaskState/TaskState.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNTo0NzowOVrOHNw4gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNTo0NzowOVrOHNw4gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE5NDQzNA==", "bodyText": "try this? - function resolveTaskStateLabelColor(task: UserTaskInstance):string {", "url": "https://github.com/kiegroup/kogito-apps/pull/436#discussion_r484194434", "createdAt": "2020-09-07T05:47:09Z", "author": {"login": "AjayJagan"}, "path": "ui-packages/packages/task-console/src/components/Atoms/TaskState/TaskState.tsx", "diffHunk": "@@ -15,40 +15,68 @@\n  */\n \n import React from 'react';\n+\n+import { GraphQL } from '@kogito-apps/common';\n+import UserTaskInstance = GraphQL.UserTaskInstance;\n+import { Label } from '@patternfly/react-core';\n import {\n   BanIcon,\n   CheckCircleIcon,\n   OnRunningIcon\n } from '@patternfly/react-icons';\n \n-import { GraphQL } from '@kogito-apps/common';\n-import UserTaskInstance = GraphQL.UserTaskInstance;\n+enum Variant {\n+  INLINE = 'inline',\n+  LABEL = 'label'\n+}\n \n interface IOwnProps {\n   task: UserTaskInstance;\n+  variant?: 'inline' | 'label';\n }\n \n-const TaskState: React.FC<IOwnProps> = ({ task }) => {\n-  let icon;\n+const TaskState: React.FC<IOwnProps> = ({ task, variant }) => {\n+  const icon = resolveTaskStateIcon(task);\n+\n+  if (variant === Variant.LABEL) {\n+    const color = resolveTaskStateLabelColor(task);\n+    return (\n+      <Label color={color} icon={icon}>\n+        {task.state}\n+      </Label>\n+    );\n+  }\n+\n+  return (\n+    <React.Fragment>\n+      {icon} {task.state}\n+    </React.Fragment>\n+  );\n+};\n \n+function resolveTaskStateIcon(task: UserTaskInstance) {\n   if (task.state === 'Aborted') {\n-    icon = <BanIcon className=\"pf-u-mr-sm\" />;\n+    return <BanIcon className=\"pf-u-mr-sm\" />;\n   } else if (task.completed) {\n-    icon = (\n+    return (\n       <CheckCircleIcon\n         className=\"pf-u-mr-sm\"\n         color=\"var(--pf-global--success-color--100)\"\n       />\n     );\n   } else {\n-    icon = <OnRunningIcon className=\"pf-u-mr-sm\" />;\n+    return <OnRunningIcon className=\"pf-u-mr-sm\" />;\n   }\n+}\n \n-  return (\n-    <React.Fragment>\n-      {icon} {task.state}\n-    </React.Fragment>\n-  );\n-};\n+function resolveTaskStateLabelColor(task: UserTaskInstance) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "118094bbc6cdb8484613627a02486be209016437"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODE3MzQ3OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/task-console/src/components/Organisms/TaskForm/TaskForm.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNTo1Mzo0MFrOHNw_ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNTo1Mzo0MFrOHNw_ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE5NjIwMg==", "bodyText": "@pefernan - for all the useState usage we could use something like this -\nconst [state,setState]=useState<type>(value) - easier for us to read :P", "url": "https://github.com/kiegroup/kogito-apps/pull/436#discussion_r484196202", "createdAt": "2020-09-07T05:53:40Z", "author": {"login": "AjayJagan"}, "path": "ui-packages/packages/task-console/src/components/Organisms/TaskForm/TaskForm.tsx", "diffHunk": "@@ -1,41 +1,57 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n import React, { useContext, useEffect, useState } from 'react';\n import axios from 'axios';\n+import { Stack, StackItem } from '@patternfly/react-core';\n import {\n+  GraphQL,\n   KogitoEmptyState,\n   KogitoEmptyStateType,\n-  KogitoSpinner,\n-  GraphQL\n+  KogitoSpinner\n } from '@kogito-apps/common';\n import TaskConsoleContext, {\n   IContext\n } from '../../../context/TaskConsoleContext/TaskConsoleContext';\n-import FormNotification from '../../Atoms/FormNotification/FormNotification';\n import FormRenderer from '../../Molecules/FormRenderer/FormRenderer';\n import { TaskFormSubmitHandler } from '../../../util/uniforms/TaskFormSubmitHandler/TaskFormSubmitHandler';\n import { FormSchema } from '../../../util/uniforms/FormSchema';\n-import UserTaskInstance = GraphQL.UserTaskInstance;\n import { getTaskSchemaEndPoint } from '../../../util/Utils';\n+import UserTaskInstance = GraphQL.UserTaskInstance;\n+import FormNotification, {\n+  Notification\n+} from '../../Atoms/FormNotification/FormNotification';\n \n interface IOwnProps {\n   userTaskInstance?: UserTaskInstance;\n   successCallback?: () => void;\n   errorCallback?: () => void;\n }\n \n-interface AlertMessage {\n-  message: string;\n-  callback: () => void;\n-}\n-\n const TaskForm: React.FC<IOwnProps> = ({\n   userTaskInstance,\n   successCallback,\n   errorCallback\n }) => {\n   // tslint:disable: no-floating-promises\n   const context: IContext<UserTaskInstance> = useContext(TaskConsoleContext);\n-  const [alertMessage, setAlertMessage]: [AlertMessage, any] = useState(null);\n-  const [loading, setLoading] = useState(true);\n+  const [notification, setNotification]: [Notification, any] = useState(null);\n+  const [loading, setLoading]: [boolean, any] = useState(true);\n+  const [isSubmitting, setIsSubmitting]: [boolean, any] = useState(false);\n+  const [submitted, setSubmitted]: [boolean, any] = useState(false);\n   const [stateUserTask, setStateUserTask]: [UserTaskInstance, any] = useState(\n     null\n   );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "118094bbc6cdb8484613627a02486be209016437"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODE3OTUzOnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/task-console/src/components/Templates/UserTaskInstanceDetailsPage/UserTaskInstanceDetailsPage.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNTo1NjozMVrOHNxC9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNTo1NjozMVrOHNxC9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDE5NzEwOA==", "bodyText": "same here :) - const [userTask, setUserTask] = useState<UserTaskInstance>();", "url": "https://github.com/kiegroup/kogito-apps/pull/436#discussion_r484197108", "createdAt": "2020-09-07T05:56:31Z", "author": {"login": "AjayJagan"}, "path": "ui-packages/packages/task-console/src/components/Templates/UserTaskInstanceDetailsPage/UserTaskInstanceDetailsPage.tsx", "diffHunk": "@@ -32,7 +37,12 @@ const UserTaskInstanceDetailsPage: React.FC<RouteComponentProps<\n   {}\n > &\n   OUIAProps> = ({ ouiaId, ouiaSafe, ...props }) => {\n-  const id = props.match.params.taskID;\n+  const id = props.match.params.taskId;\n+\n+  const [userTask, setUserTask]: [\n+    UserTaskInstance,\n+    (UserTaskInstance) => void\n+  ] = useState();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "118094bbc6cdb8484613627a02486be209016437"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAyODI4MTQyOnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/task-console/src/components/Molecules/PageTitle/PageTitle.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNjo0MTo1OFrOHNx_LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wN1QwNjo0MTo1OFrOHNx_LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDIxMjUyNA==", "bodyText": "maybe use this :\n title: string;\n  extra?: JSX.Element;", "url": "https://github.com/kiegroup/kogito-apps/pull/436#discussion_r484212524", "createdAt": "2020-09-07T06:41:58Z", "author": {"login": "AjayJagan"}, "path": "ui-packages/packages/task-console/src/components/Molecules/PageTitle/PageTitle.tsx", "diffHunk": "@@ -1,16 +1,34 @@\n import React from 'react';\n-import { Title } from '@patternfly/react-core';\n+import { Flex, FlexItem, Title } from '@patternfly/react-core';\n+import { componentOuiaProps, OUIAProps } from '@kogito-apps/common';\n \n export interface IOwnProps {\n   title: any;\n+  extra?: any;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "118094bbc6cdb8484613627a02486be209016437"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 686, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}