{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg3OTc5MjU2", "number": 458, "title": "KOGITO-3208: integration test for trusty service and explainability service", "bodyText": "JIRA task\nRelated PR in kogito-runtimes\n\nGoal\nSimulate the complete flow between a Kogito service exposing a DMN model, the Trusty Service and the Explainability Service:\n\nThe execution of a DMN model is triggered in Kogito service via a call to its REST API.\nKogito service generates a TraceEvent and sends it to Kafka.\nTrusty service reads the TraceEvent, stores the information about the execution in Infinispan.\nTrusty service sends an explainability request to the Explainability Service via Kafka.\nExplainabilty service reads the request and tries to calculate the feature importance scores by performing several calls back to the original Kogito service with perturbed inputs.\nExplainability service sends the explainability result message to Kafka.\nTrusty service reads the explainability result and stores it in Infinispan.\nTest that the execution and the explainability result exist by calling the corresponding Trusty Service REST APIs.\n\nMain contents\n\nAs per Kogito feature, the Kogito service can be written using either Quarkus or Spring Boot, so there are two different modules that tests the same flow for each framework (integration-tests-trusty-service-quarkus and integration-tests-trusty-service-springboot) and a common module (integration-tests-trusty-service-common) with the shared logic, all grouped in a submodule of integration-tests called integration-tests-trusty-service.\nThe original submodules of integration-tests implemented specific tests for jobs-service. I renamed them adding the jobs-service part and moved to a dedicated submodule. One of the reason is a specific behavior of QuarkusTestResourceLifecycleManager classes (explained here).\nI am using plain Testcontainers APIs in AbstractTrustyExplainabilityEnd2EndIT instead of ConditionalQuarkusTestResource and ConditionalSpringBootTestResource because I need to start containers in a specific order and they must communicate between each other (so they must belong to the same bridged network). I tried using *TestResource but I could not manage to implement the complete flow and the code was becoming a mess.", "createdAt": "2020-09-16T13:11:52Z", "url": "https://github.com/kiegroup/kogito-apps/pull/458", "merged": true, "mergeCommit": {"oid": "95b46cf8314bd51e387665f9d91ac82f007f0136"}, "closed": true, "closedAt": "2020-11-02T21:06:33Z", "author": {"login": "kostola"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLI_mvgBqjM3OTAzNDU3NTY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdYnO4PAFqTUyMTc5NjIyMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f352342edb071c99e3e17634a1bfc1fba3a9213f", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/f352342edb071c99e3e17634a1bfc1fba3a9213f", "committedDate": "2020-09-16T13:07:47Z", "message": "KOGITO-3208: implement integration-tests-trusty-service"}, "afterCommit": {"oid": "a73c06d20f89cab34e57f7ae5121d81205845eac", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/a73c06d20f89cab34e57f7ae5121d81205845eac", "committedDate": "2020-09-21T19:58:53Z", "message": "KOGITO-3208: implement integration-tests-trusty-service"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a73c06d20f89cab34e57f7ae5121d81205845eac", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/a73c06d20f89cab34e57f7ae5121d81205845eac", "committedDate": "2020-09-21T19:58:53Z", "message": "KOGITO-3208: implement integration-tests-trusty-service"}, "afterCommit": {"oid": "e9a21a2fdb6acce12a90b42863b321848d35d4c3", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/e9a21a2fdb6acce12a90b42863b321848d35d4c3", "committedDate": "2020-09-21T19:59:37Z", "message": "KOGITO-3208: implement integration-tests-trusty-service"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e9a21a2fdb6acce12a90b42863b321848d35d4c3", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/e9a21a2fdb6acce12a90b42863b321848d35d4c3", "committedDate": "2020-09-21T19:59:37Z", "message": "KOGITO-3208: implement integration-tests-trusty-service"}, "afterCommit": {"oid": "463ea19282a4c817c42f39037fdd6d4498ceab7c", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/463ea19282a4c817c42f39037fdd6d4498ceab7c", "committedDate": "2020-09-28T13:51:10Z", "message": "KOGITO-3208: implement integration-tests-trusty-service"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "463ea19282a4c817c42f39037fdd6d4498ceab7c", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/463ea19282a4c817c42f39037fdd6d4498ceab7c", "committedDate": "2020-09-28T13:51:10Z", "message": "KOGITO-3208: implement integration-tests-trusty-service"}, "afterCommit": {"oid": "121910364adfa07873804d9e4d9c213b65c4cede", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/121910364adfa07873804d9e4d9c213b65c4cede", "committedDate": "2020-09-30T09:29:57Z", "message": "KOGITO-3208: implement integration-tests-trusty-service"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0NzY3MDUw", "url": "https://github.com/kiegroup/kogito-apps/pull/458#pullrequestreview-504767050", "createdAt": "2020-10-08T13:13:18Z", "commit": {"oid": "15846b598bacea164df107deba477131e2adfd5f"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMzoxMzoxOFrOHed4uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMzoyMDo0OVrOHeePAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcwODk4NA==", "bodyText": "Why are these deps only in compile scope? Is there any particular reason for that?", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501708984", "createdAt": "2020-10-08T13:13:18Z", "author": {"login": "jiripetrlik"}, "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-common/pom.xml", "diffHunk": "@@ -0,0 +1,70 @@\n+<?xml version=\"1.0\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>integration-tests-trusty-service</artifactId>\n+    <version>1.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>integration-tests-trusty-service-common</artifactId>\n+\n+  <name>Kogito Apps :: Integration Tests :: Trusty Service :: Common</name>\n+  <description>Processes and common classes for integration tests</description>\n+\n+  <properties>\n+    <sonar.exclusions>**/it/*.java,**/testcontainers/*.java</sonar.exclusions>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>trusty-service-api</artifactId>\n+      <scope>compile</scope>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15846b598bacea164df107deba477131e2adfd5f"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcxMTExMg==", "bodyText": "Can we consider some waiting loop which checks regulry if the result is available? It might be faster.", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501711112", "createdAt": "2020-10-08T13:16:12Z", "author": {"login": "jiripetrlik"}, "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-common/src/main/java/org/kie/kogito/it/trusty/AbstractTrustyExplainabilityEnd2EndIT.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.it.trusty;\n+\n+import java.util.function.BiFunction;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.testcontainers.ExplainabilityServiceMessagingContainer;\n+import org.kie.kogito.testcontainers.InfinispanContainer;\n+import org.kie.kogito.testcontainers.KogitoServiceContainer;\n+import org.kie.kogito.testcontainers.TrustyServiceContainer;\n+import org.kie.kogito.trusty.service.responses.ExecutionHeaderResponse;\n+import org.kie.kogito.trusty.service.responses.ExecutionsResponse;\n+import org.kie.kogito.trusty.service.responses.SalienciesResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.Testcontainers;\n+import org.testcontainers.containers.KafkaContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public abstract class AbstractTrustyExplainabilityEnd2EndIT {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractTrustyExplainabilityEnd2EndIT.class);\n+\n+    private final BiFunction<String, String, KogitoServiceContainer> kogitoServiceContainerProducer;\n+\n+    protected AbstractTrustyExplainabilityEnd2EndIT(BiFunction<String, String, KogitoServiceContainer> kogitoServiceContainerProducer) {\n+        this.kogitoServiceContainerProducer = kogitoServiceContainerProducer;\n+    }\n+\n+    @Test\n+    public void doTest() throws Exception {\n+        try (\n+                final Network network = Network.newNetwork();\n+\n+                final InfinispanContainer infinispan = new InfinispanContainer()\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"infinispan\");\n+\n+                final KafkaContainer kafka = new KafkaContainer()\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"kafka\");\n+\n+                final ExplainabilityServiceMessagingContainer explService = new ExplainabilityServiceMessagingContainer(\"kafka:9092\", 10)\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"expl-service\");\n+\n+                final TrustyServiceContainer trustyService = new TrustyServiceContainer(\"infinispan:11222\", \"kafka:9092\", true)\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"trusty-service\");\n+\n+                final KogitoServiceContainer kogitoService = kogitoServiceContainerProducer.apply(\"kafka:9092\", \"http://kogito-service:8080\")\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"kogito-service\")\n+        ) {\n+            infinispan.start();\n+            assertTrue(infinispan.isRunning());\n+\n+            kafka.start();\n+            assertTrue(kafka.isRunning());\n+\n+            Testcontainers.exposeHostPorts(18080);\n+\n+            explService.start();\n+            assertTrue(explService.isRunning());\n+\n+            trustyService.start();\n+            assertTrue(trustyService.isRunning());\n+\n+            kogitoService.start();\n+            assertTrue(kogitoService.isRunning());\n+\n+            String json = \"{\\\"Driver\\\":{\\\"Age\\\":25,\\\"Points\\\":13},\\\"Violation\\\":{\\\"Type\\\":\\\"speed\\\",\\\"Actual Speed\\\":115,\\\"Speed Limit\\\":100}}\";\n+\n+            given()\n+                    .port(kogitoService.getFirstMappedPort())\n+                    .contentType(\"application/json\")\n+                    .body(json)\n+                    .when().post(\"/Traffic Violation\")\n+                    .then().statusCode(200);\n+\n+            // wait a reasonable amount of time for the loop to complete\n+            Thread.sleep(5000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15846b598bacea164df107deba477131e2adfd5f"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcxNDU1MA==", "bodyText": "Can we run this loop multiple times and evaluate whether multiple invocations are handled correctly and not mixed for example etc.?", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501714550", "createdAt": "2020-10-08T13:20:38Z", "author": {"login": "jiripetrlik"}, "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-common/src/main/java/org/kie/kogito/it/trusty/AbstractTrustyExplainabilityEnd2EndIT.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.it.trusty;\n+\n+import java.util.function.BiFunction;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.testcontainers.ExplainabilityServiceMessagingContainer;\n+import org.kie.kogito.testcontainers.InfinispanContainer;\n+import org.kie.kogito.testcontainers.KogitoServiceContainer;\n+import org.kie.kogito.testcontainers.TrustyServiceContainer;\n+import org.kie.kogito.trusty.service.responses.ExecutionHeaderResponse;\n+import org.kie.kogito.trusty.service.responses.ExecutionsResponse;\n+import org.kie.kogito.trusty.service.responses.SalienciesResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.Testcontainers;\n+import org.testcontainers.containers.KafkaContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public abstract class AbstractTrustyExplainabilityEnd2EndIT {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractTrustyExplainabilityEnd2EndIT.class);\n+\n+    private final BiFunction<String, String, KogitoServiceContainer> kogitoServiceContainerProducer;\n+\n+    protected AbstractTrustyExplainabilityEnd2EndIT(BiFunction<String, String, KogitoServiceContainer> kogitoServiceContainerProducer) {\n+        this.kogitoServiceContainerProducer = kogitoServiceContainerProducer;\n+    }\n+\n+    @Test\n+    public void doTest() throws Exception {\n+        try (\n+                final Network network = Network.newNetwork();\n+\n+                final InfinispanContainer infinispan = new InfinispanContainer()\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"infinispan\");\n+\n+                final KafkaContainer kafka = new KafkaContainer()\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"kafka\");\n+\n+                final ExplainabilityServiceMessagingContainer explService = new ExplainabilityServiceMessagingContainer(\"kafka:9092\", 10)\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"expl-service\");\n+\n+                final TrustyServiceContainer trustyService = new TrustyServiceContainer(\"infinispan:11222\", \"kafka:9092\", true)\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"trusty-service\");\n+\n+                final KogitoServiceContainer kogitoService = kogitoServiceContainerProducer.apply(\"kafka:9092\", \"http://kogito-service:8080\")\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"kogito-service\")\n+        ) {\n+            infinispan.start();\n+            assertTrue(infinispan.isRunning());\n+\n+            kafka.start();\n+            assertTrue(kafka.isRunning());\n+\n+            Testcontainers.exposeHostPorts(18080);\n+\n+            explService.start();\n+            assertTrue(explService.isRunning());\n+\n+            trustyService.start();\n+            assertTrue(trustyService.isRunning());\n+\n+            kogitoService.start();\n+            assertTrue(kogitoService.isRunning());\n+\n+            String json = \"{\\\"Driver\\\":{\\\"Age\\\":25,\\\"Points\\\":13},\\\"Violation\\\":{\\\"Type\\\":\\\"speed\\\",\\\"Actual Speed\\\":115,\\\"Speed Limit\\\":100}}\";\n+\n+            given()\n+                    .port(kogitoService.getFirstMappedPort())\n+                    .contentType(\"application/json\")\n+                    .body(json)\n+                    .when().post(\"/Traffic Violation\")\n+                    .then().statusCode(200);\n+\n+            // wait a reasonable amount of time for the loop to complete\n+            Thread.sleep(5000);\n+\n+            ExecutionsResponse executionsResponse = given()\n+                    .port(trustyService.getFirstMappedPort())\n+                    .when().get(\"/executions?limit=1\")\n+                    .then().statusCode(200)\n+                    .extract().as(ExecutionsResponse.class);\n+\n+            assertSame(1, executionsResponse.getHeaders().size());\n+\n+            String executionId = executionsResponse.getHeaders().stream()\n+                    .findFirst()\n+                    .map(ExecutionHeaderResponse::getExecutionId)\n+                    .orElseThrow(IllegalStateException::new);\n+\n+            assertNotNull(executionId);\n+\n+            SalienciesResponse salienciesResponse = given()\n+                    .port(trustyService.getFirstMappedPort())\n+                    .when().get(\"/executions/decisions/\" + executionId + \"/explanations/saliencies\")\n+                    .then().statusCode(200)\n+                    .extract().as(SalienciesResponse.class);\n+\n+            assertEquals(\"SUCCEEDED\", salienciesResponse.getStatus());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15846b598bacea164df107deba477131e2adfd5f"}, "originalPosition": 130}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcxNDY5MA==", "bodyText": "Unexpected new line.", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501714690", "createdAt": "2020-10-08T13:20:49Z", "author": {"login": "jiripetrlik"}, "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-common/src/main/java/org/kie/kogito/it/trusty/AbstractTrustyExplainabilityEnd2EndIT.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.it.trusty;\n+\n+import java.util.function.BiFunction;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.testcontainers.ExplainabilityServiceMessagingContainer;\n+import org.kie.kogito.testcontainers.InfinispanContainer;\n+import org.kie.kogito.testcontainers.KogitoServiceContainer;\n+import org.kie.kogito.testcontainers.TrustyServiceContainer;\n+import org.kie.kogito.trusty.service.responses.ExecutionHeaderResponse;\n+import org.kie.kogito.trusty.service.responses.ExecutionsResponse;\n+import org.kie.kogito.trusty.service.responses.SalienciesResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.Testcontainers;\n+import org.testcontainers.containers.KafkaContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public abstract class AbstractTrustyExplainabilityEnd2EndIT {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractTrustyExplainabilityEnd2EndIT.class);\n+\n+    private final BiFunction<String, String, KogitoServiceContainer> kogitoServiceContainerProducer;\n+\n+    protected AbstractTrustyExplainabilityEnd2EndIT(BiFunction<String, String, KogitoServiceContainer> kogitoServiceContainerProducer) {\n+        this.kogitoServiceContainerProducer = kogitoServiceContainerProducer;\n+    }\n+\n+    @Test\n+    public void doTest() throws Exception {\n+        try (\n+                final Network network = Network.newNetwork();\n+\n+                final InfinispanContainer infinispan = new InfinispanContainer()\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"infinispan\");\n+\n+                final KafkaContainer kafka = new KafkaContainer()\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"kafka\");\n+\n+                final ExplainabilityServiceMessagingContainer explService = new ExplainabilityServiceMessagingContainer(\"kafka:9092\", 10)\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"expl-service\");\n+\n+                final TrustyServiceContainer trustyService = new TrustyServiceContainer(\"infinispan:11222\", \"kafka:9092\", true)\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"trusty-service\");\n+\n+                final KogitoServiceContainer kogitoService = kogitoServiceContainerProducer.apply(\"kafka:9092\", \"http://kogito-service:8080\")\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"kogito-service\")\n+        ) {\n+            infinispan.start();\n+            assertTrue(infinispan.isRunning());\n+\n+            kafka.start();\n+            assertTrue(kafka.isRunning());\n+\n+            Testcontainers.exposeHostPorts(18080);\n+\n+            explService.start();\n+            assertTrue(explService.isRunning());\n+\n+            trustyService.start();\n+            assertTrue(trustyService.isRunning());\n+\n+            kogitoService.start();\n+            assertTrue(kogitoService.isRunning());\n+\n+            String json = \"{\\\"Driver\\\":{\\\"Age\\\":25,\\\"Points\\\":13},\\\"Violation\\\":{\\\"Type\\\":\\\"speed\\\",\\\"Actual Speed\\\":115,\\\"Speed Limit\\\":100}}\";\n+\n+            given()\n+                    .port(kogitoService.getFirstMappedPort())\n+                    .contentType(\"application/json\")\n+                    .body(json)\n+                    .when().post(\"/Traffic Violation\")\n+                    .then().statusCode(200);\n+\n+            // wait a reasonable amount of time for the loop to complete\n+            Thread.sleep(5000);\n+\n+            ExecutionsResponse executionsResponse = given()\n+                    .port(trustyService.getFirstMappedPort())\n+                    .when().get(\"/executions?limit=1\")\n+                    .then().statusCode(200)\n+                    .extract().as(ExecutionsResponse.class);\n+\n+            assertSame(1, executionsResponse.getHeaders().size());\n+\n+            String executionId = executionsResponse.getHeaders().stream()\n+                    .findFirst()\n+                    .map(ExecutionHeaderResponse::getExecutionId)\n+                    .orElseThrow(IllegalStateException::new);\n+\n+            assertNotNull(executionId);\n+\n+            SalienciesResponse salienciesResponse = given()\n+                    .port(trustyService.getFirstMappedPort())\n+                    .when().get(\"/executions/decisions/\" + executionId + \"/explanations/saliencies\")\n+                    .then().statusCode(200)\n+                    .extract().as(SalienciesResponse.class);\n+\n+            assertEquals(\"SUCCEEDED\", salienciesResponse.getStatus());\n+        }\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15846b598bacea164df107deba477131e2adfd5f"}, "originalPosition": 133}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAxMDEyMjM3", "url": "https://github.com/kiegroup/kogito-apps/pull/458#pullrequestreview-501012237", "createdAt": "2020-10-02T10:07:34Z", "commit": {"oid": "121910364adfa07873804d9e4d9c213b65c4cede"}, "state": "COMMENTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMDowNzozNFrOHboNLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQxMzozNjo1N1rOHee9AQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODczMjMzMw==", "bodyText": "Can you please clarify this code? Do you get dmn file from a remote jar?", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r498732333", "createdAt": "2020-10-02T10:07:34Z", "author": {"login": "danielezonca"}, "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-common/pom.xml", "diffHunk": "@@ -0,0 +1,70 @@\n+<?xml version=\"1.0\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>integration-tests-trusty-service</artifactId>\n+    <version>1.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <artifactId>integration-tests-trusty-service-common</artifactId>\n+\n+  <name>Kogito Apps :: Integration Tests :: Trusty Service :: Common</name>\n+  <description>Processes and common classes for integration tests</description>\n+\n+  <properties>\n+    <sonar.exclusions>**/it/*.java,**/testcontainers/*.java</sonar.exclusions>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>trusty-service-api</artifactId>\n+      <scope>compile</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.testcontainers</groupId>\n+      <artifactId>testcontainers</artifactId>\n+      <scope>compile</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.testcontainers</groupId>\n+      <artifactId>kafka</artifactId>\n+      <scope>compile</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-api</artifactId>\n+      <scope>compile</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.rest-assured</groupId>\n+      <artifactId>rest-assured</artifactId>\n+      <scope>compile</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-remote-resources-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>bundle</goal>\n+            </goals>\n+            <configuration>\n+              <includes>\n+                <include>**/*.dmn</include>\n+              </includes>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "121910364adfa07873804d9e4d9c213b65c4cede"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc4NzU0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <!-- internal containers used for testing (built by maven) -->\n          \n          \n            \n                <!-- internal containers used for testing (built by maven using quarkus-container-image-jib) -->", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r498787544", "createdAt": "2020-10-02T12:23:12Z", "author": {"login": "danielezonca"}, "path": "pom.xml", "diffHunk": "@@ -27,9 +27,12 @@\n \n     <version.org.infinispan.image>10.1.5.Final</version.org.infinispan.image>\n \n-    <!-- containers used for testing -->\n+    <!-- external containers used for testing -->\n     <container.image.infinispan>quay.io/infinispan/server:${version.org.infinispan.image}</container.image.infinispan>\n+    <!-- internal containers used for testing (built by maven) -->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15846b598bacea164df107deba477131e2adfd5f"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTY5NzMzNQ==", "bodyText": "What about use this alternative?", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501697335", "createdAt": "2020-10-08T12:55:44Z", "author": {"login": "danielezonca"}, "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-common/src/main/java/org/kie/kogito/it/trusty/AbstractTrustyExplainabilityEnd2EndIT.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.it.trusty;\n+\n+import java.util.function.BiFunction;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.testcontainers.ExplainabilityServiceMessagingContainer;\n+import org.kie.kogito.testcontainers.InfinispanContainer;\n+import org.kie.kogito.testcontainers.KogitoServiceContainer;\n+import org.kie.kogito.testcontainers.TrustyServiceContainer;\n+import org.kie.kogito.trusty.service.responses.ExecutionHeaderResponse;\n+import org.kie.kogito.trusty.service.responses.ExecutionsResponse;\n+import org.kie.kogito.trusty.service.responses.SalienciesResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.Testcontainers;\n+import org.testcontainers.containers.KafkaContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public abstract class AbstractTrustyExplainabilityEnd2EndIT {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractTrustyExplainabilityEnd2EndIT.class);\n+\n+    private final BiFunction<String, String, KogitoServiceContainer> kogitoServiceContainerProducer;\n+\n+    protected AbstractTrustyExplainabilityEnd2EndIT(BiFunction<String, String, KogitoServiceContainer> kogitoServiceContainerProducer) {\n+        this.kogitoServiceContainerProducer = kogitoServiceContainerProducer;\n+    }\n+\n+    @Test\n+    public void doTest() throws Exception {\n+        try (\n+                final Network network = Network.newNetwork();\n+\n+                final InfinispanContainer infinispan = new InfinispanContainer()\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"infinispan\");\n+\n+                final KafkaContainer kafka = new KafkaContainer()\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"kafka\");\n+\n+                final ExplainabilityServiceMessagingContainer explService = new ExplainabilityServiceMessagingContainer(\"kafka:9092\", 10)\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"expl-service\");\n+\n+                final TrustyServiceContainer trustyService = new TrustyServiceContainer(\"infinispan:11222\", \"kafka:9092\", true)\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"trusty-service\");\n+\n+                final KogitoServiceContainer kogitoService = kogitoServiceContainerProducer.apply(\"kafka:9092\", \"http://kogito-service:8080\")\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"kogito-service\")\n+        ) {\n+            infinispan.start();\n+            assertTrue(infinispan.isRunning());\n+\n+            kafka.start();\n+            assertTrue(kafka.isRunning());\n+\n+            Testcontainers.exposeHostPorts(18080);\n+\n+            explService.start();\n+            assertTrue(explService.isRunning());\n+\n+            trustyService.start();\n+            assertTrue(trustyService.isRunning());\n+\n+            kogitoService.start();\n+            assertTrue(kogitoService.isRunning());\n+\n+            String json = \"{\\\"Driver\\\":{\\\"Age\\\":25,\\\"Points\\\":13},\\\"Violation\\\":{\\\"Type\\\":\\\"speed\\\",\\\"Actual Speed\\\":115,\\\"Speed Limit\\\":100}}\";\n+\n+            given()\n+                    .port(kogitoService.getFirstMappedPort())\n+                    .contentType(\"application/json\")\n+                    .body(json)\n+                    .when().post(\"/Traffic Violation\")\n+                    .then().statusCode(200);\n+\n+            // wait a reasonable amount of time for the loop to complete\n+            Thread.sleep(5000);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15846b598bacea164df107deba477131e2adfd5f"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcwNjY0MA==", "bodyText": "Please copy the default application.properties file from the archetype to be on the safe side\nhttps://github.com/kiegroup/kogito-runtimes/blob/master/archetypes/kogito-springboot-archetype/src/main/resources/archetype-resources/src/main/resources/application.properties", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501706640", "createdAt": "2020-10-08T13:09:48Z", "author": {"login": "danielezonca"}, "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-springboot/src/main/resources/application.properties", "diffHunk": "@@ -0,0 +1,18 @@\n+#\n+#  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+#\n+#  Licensed under the Apache License, Version 2.0 (the \"License\");\n+#  you may not use this file except in compliance with the License.\n+#  You may obtain a copy of the License at\n+#\n+#        http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#  Unless required by applicable law or agreed to in writing, software\n+#  distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  See the License for the specific language governing permissions and\n+#  limitations under the License.\n+#\n+\n+server.address=0.0.0.0\n+resteasy.jaxrs.scan-packages=org.kie.kogito.**,http*", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15846b598bacea164df107deba477131e2adfd5f"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcxMjU4OQ==", "bodyText": "@r00ta\nCan you please double check if this change can have an impact on Keycloak integration?", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501712589", "createdAt": "2020-10-08T13:18:03Z", "author": {"login": "danielezonca"}, "path": "trusty/trusty-service/src/main/resources/application.properties", "diffHunk": "@@ -1,18 +1,30 @@\n quarkus.http.cors=true\n \n-#oidc\n-quarkus.oidc.enabled=true\n-quarkus.oidc.tenant-enabled=false\n+# Quarkus OIDC\n+quarkus.oidc.enabled=false\n+quarkus.oidc.auth-server-url=none", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15846b598bacea164df107deba477131e2adfd5f"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyMTg5OA==", "bodyText": "Please move to constants:\n\naliases\nports", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501721898", "createdAt": "2020-10-08T13:30:40Z", "author": {"login": "danielezonca"}, "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-common/src/main/java/org/kie/kogito/it/trusty/AbstractTrustyExplainabilityEnd2EndIT.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.it.trusty;\n+\n+import java.util.function.BiFunction;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.testcontainers.ExplainabilityServiceMessagingContainer;\n+import org.kie.kogito.testcontainers.InfinispanContainer;\n+import org.kie.kogito.testcontainers.KogitoServiceContainer;\n+import org.kie.kogito.testcontainers.TrustyServiceContainer;\n+import org.kie.kogito.trusty.service.responses.ExecutionHeaderResponse;\n+import org.kie.kogito.trusty.service.responses.ExecutionsResponse;\n+import org.kie.kogito.trusty.service.responses.SalienciesResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.Testcontainers;\n+import org.testcontainers.containers.KafkaContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public abstract class AbstractTrustyExplainabilityEnd2EndIT {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractTrustyExplainabilityEnd2EndIT.class);\n+\n+    private final BiFunction<String, String, KogitoServiceContainer> kogitoServiceContainerProducer;\n+\n+    protected AbstractTrustyExplainabilityEnd2EndIT(BiFunction<String, String, KogitoServiceContainer> kogitoServiceContainerProducer) {\n+        this.kogitoServiceContainerProducer = kogitoServiceContainerProducer;\n+    }\n+\n+    @Test\n+    public void doTest() throws Exception {\n+        try (\n+                final Network network = Network.newNetwork();\n+\n+                final InfinispanContainer infinispan = new InfinispanContainer()\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"infinispan\");\n+\n+                final KafkaContainer kafka = new KafkaContainer()\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"kafka\");\n+\n+                final ExplainabilityServiceMessagingContainer explService = new ExplainabilityServiceMessagingContainer(\"kafka:9092\", 10)\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"expl-service\");\n+\n+                final TrustyServiceContainer trustyService = new TrustyServiceContainer(\"infinispan:11222\", \"kafka:9092\", true)\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"trusty-service\");\n+\n+                final KogitoServiceContainer kogitoService = kogitoServiceContainerProducer.apply(\"kafka:9092\", \"http://kogito-service:8080\")\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"kogito-service\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15846b598bacea164df107deba477131e2adfd5f"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyMjUwNg==", "bodyText": "Is this value fixed?", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501722506", "createdAt": "2020-10-08T13:31:35Z", "author": {"login": "danielezonca"}, "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-common/src/main/java/org/kie/kogito/it/trusty/AbstractTrustyExplainabilityEnd2EndIT.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.it.trusty;\n+\n+import java.util.function.BiFunction;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.testcontainers.ExplainabilityServiceMessagingContainer;\n+import org.kie.kogito.testcontainers.InfinispanContainer;\n+import org.kie.kogito.testcontainers.KogitoServiceContainer;\n+import org.kie.kogito.testcontainers.TrustyServiceContainer;\n+import org.kie.kogito.trusty.service.responses.ExecutionHeaderResponse;\n+import org.kie.kogito.trusty.service.responses.ExecutionsResponse;\n+import org.kie.kogito.trusty.service.responses.SalienciesResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.Testcontainers;\n+import org.testcontainers.containers.KafkaContainer;\n+import org.testcontainers.containers.Network;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public abstract class AbstractTrustyExplainabilityEnd2EndIT {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(AbstractTrustyExplainabilityEnd2EndIT.class);\n+\n+    private final BiFunction<String, String, KogitoServiceContainer> kogitoServiceContainerProducer;\n+\n+    protected AbstractTrustyExplainabilityEnd2EndIT(BiFunction<String, String, KogitoServiceContainer> kogitoServiceContainerProducer) {\n+        this.kogitoServiceContainerProducer = kogitoServiceContainerProducer;\n+    }\n+\n+    @Test\n+    public void doTest() throws Exception {\n+        try (\n+                final Network network = Network.newNetwork();\n+\n+                final InfinispanContainer infinispan = new InfinispanContainer()\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"infinispan\");\n+\n+                final KafkaContainer kafka = new KafkaContainer()\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"kafka\");\n+\n+                final ExplainabilityServiceMessagingContainer explService = new ExplainabilityServiceMessagingContainer(\"kafka:9092\", 10)\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"expl-service\");\n+\n+                final TrustyServiceContainer trustyService = new TrustyServiceContainer(\"infinispan:11222\", \"kafka:9092\", true)\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"trusty-service\");\n+\n+                final KogitoServiceContainer kogitoService = kogitoServiceContainerProducer.apply(\"kafka:9092\", \"http://kogito-service:8080\")\n+                        .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+                        .withNetwork(network)\n+                        .withNetworkAliases(\"kogito-service\")\n+        ) {\n+            infinispan.start();\n+            assertTrue(infinispan.isRunning());\n+\n+            kafka.start();\n+            assertTrue(kafka.isRunning());\n+\n+            Testcontainers.exposeHostPorts(18080);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15846b598bacea164df107deba477131e2adfd5f"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyMjY3Mg==", "bodyText": "Move to config/constant?", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501722672", "createdAt": "2020-10-08T13:31:50Z", "author": {"login": "danielezonca"}, "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-common/src/main/java/org/kie/kogito/testcontainers/InfinispanContainer.java", "diffHunk": "@@ -0,0 +1,33 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.testcontainers;\n+\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+import static org.kie.kogito.testcontainers.TestcontainersUtils.getImageName;\n+\n+public class InfinispanContainer extends GenericContainer<InfinispanContainer> {\n+\n+    public InfinispanContainer() {\n+        super(getImageName(\"infinispan\"));  // \"quay.io/infinispan/server:10.1.5.Final\"\n+        addEnv(\"USER\", \"admin\");\n+        addEnv(\"PASS\", \"admin\");\n+        addExposedPort(11222);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15846b598bacea164df107deba477131e2adfd5f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyMjgyNg==", "bodyText": "Move to config/constant?", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501722826", "createdAt": "2020-10-08T13:32:02Z", "author": {"login": "danielezonca"}, "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-common/src/main/java/org/kie/kogito/testcontainers/KogitoServiceContainer.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.testcontainers;\n+\n+import org.testcontainers.containers.GenericContainer;\n+\n+import static org.kie.kogito.testcontainers.TestcontainersUtils.getImageName;\n+\n+public class KogitoServiceContainer extends GenericContainer<KogitoServiceContainer> {\n+\n+    public KogitoServiceContainer(String kogitoServiceUrl) {\n+        super(getImageName(\"kogito-service\"));  // \"org.kie.kogito/integration-tests-trusty-service-quarkus:1.0.0-SNAPSHOT\"\n+        addEnv(\"KOGITO_SERVICE_URL\", kogitoServiceUrl);\n+        addExposedPort(8080);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15846b598bacea164df107deba477131e2adfd5f"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyMzEyMA==", "bodyText": "Move to config/constant?", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501723120", "createdAt": "2020-10-08T13:32:28Z", "author": {"login": "danielezonca"}, "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-common/src/main/java/org/kie/kogito/testcontainers/TrustyServiceContainer.java", "diffHunk": "@@ -0,0 +1,34 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.testcontainers;\n+\n+import org.testcontainers.containers.GenericContainer;\n+import org.testcontainers.containers.wait.strategy.Wait;\n+\n+import static org.kie.kogito.testcontainers.TestcontainersUtils.getImageName;\n+\n+public class TrustyServiceContainer extends GenericContainer<TrustyServiceContainer> {\n+\n+    public TrustyServiceContainer(String infinispanServerList, String kafkaBootstrapServer, boolean explainabilityEnabled) {\n+        super(getImageName(\"trusty-service\"));  // \"org.kie.kogito/trusty-service:1.0.0-SNAPSHOT\"\n+        addEnv(\"INFINISPAN_SERVER_LIST\", infinispanServerList);\n+        addEnv(\"KAFKA_BOOTSTRAP_SERVERS\", kafkaBootstrapServer);\n+        addEnv(\"TRUSTY_EXPLAINABILITY_ENABLED\", String.valueOf(explainabilityEnabled));\n+        addExposedPort(8080);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15846b598bacea164df107deba477131e2adfd5f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyNTI5MQ==", "bodyText": "Can you please clarify the reason of this?", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501725291", "createdAt": "2020-10-08T13:35:26Z", "author": {"login": "danielezonca"}, "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-quarkus/pom.xml", "diffHunk": "@@ -0,0 +1,114 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>integration-tests-trusty-service</artifactId>\n+    <version>1.0.0-SNAPSHOT</version>\n+  </parent>\n+  <artifactId>integration-tests-trusty-service-quarkus</artifactId>\n+  <name>Kogito Apps :: Integration Tests :: Trusty Service :: Quarkus</name>\n+\n+  <properties>\n+    <container.image.kogito-service>org.kie.kogito/integration-tests-trusty-service-quarkus:${project.version}</container.image.kogito-service>\n+  </properties>\n+\n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>org.kie.kogito</groupId>\n+        <artifactId>kogito-bom</artifactId>\n+        <version>${project.version}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+      <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-bom</artifactId>\n+        <version>${version.io.quarkus}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+    </dependencies>\n+  </dependencyManagement>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-quarkus</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>tracing-decision-quarkus-addon</artifactId>\n+    </dependency>\n+\n+    <!-- Build container image -->\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-container-image-jib</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-engine</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>integration-tests-trusty-service-common</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-remote-resources-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>process</goal>\n+            </goals>\n+            <configuration>\n+              <outputDirectory>${project.basedir}/src/main/resources/</outputDirectory>\n+              <resourceBundles>\n+                <resourceBundle>org.kie.kogito:integration-tests-trusty-service-common:${project.version}</resourceBundle>\n+              </resourceBundles>\n+            </configuration>\n+          </execution>\n+        </executions>\n+      </plugin>\n+      <plugin>\n+        <artifactId>maven-clean-plugin</artifactId>\n+        <configuration>\n+          <filesets>\n+            <fileset>\n+              <directory>${project.basedir}/src/main/resources/</directory>\n+              <includes>\n+                <include>*.dmn</include>\n+              </includes>\n+            </fileset>\n+          </filesets>\n+        </configuration>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15846b598bacea164df107deba477131e2adfd5f"}, "originalPosition": 94}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyNTY5Mw==", "bodyText": "Can you please clarify the reason of this?", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501725693", "createdAt": "2020-10-08T13:35:56Z", "author": {"login": "danielezonca"}, "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-quarkus/pom.xml", "diffHunk": "@@ -0,0 +1,114 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>integration-tests-trusty-service</artifactId>\n+    <version>1.0.0-SNAPSHOT</version>\n+  </parent>\n+  <artifactId>integration-tests-trusty-service-quarkus</artifactId>\n+  <name>Kogito Apps :: Integration Tests :: Trusty Service :: Quarkus</name>\n+\n+  <properties>\n+    <container.image.kogito-service>org.kie.kogito/integration-tests-trusty-service-quarkus:${project.version}</container.image.kogito-service>\n+  </properties>\n+\n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>org.kie.kogito</groupId>\n+        <artifactId>kogito-bom</artifactId>\n+        <version>${project.version}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+      <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-bom</artifactId>\n+        <version>${version.io.quarkus}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+    </dependencies>\n+  </dependencyManagement>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-quarkus</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>tracing-decision-quarkus-addon</artifactId>\n+    </dependency>\n+\n+    <!-- Build container image -->\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-container-image-jib</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-engine</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>integration-tests-trusty-service-common</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-remote-resources-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>process</goal>\n+            </goals>\n+            <configuration>\n+              <outputDirectory>${project.basedir}/src/main/resources/</outputDirectory>\n+              <resourceBundles>\n+                <resourceBundle>org.kie.kogito:integration-tests-trusty-service-common:${project.version}</resourceBundle>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15846b598bacea164df107deba477131e2adfd5f"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyNTgzMw==", "bodyText": "Can you please clarify the reason of this?", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501725833", "createdAt": "2020-10-08T13:36:09Z", "author": {"login": "danielezonca"}, "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-springboot/pom.xml", "diffHunk": "@@ -0,0 +1,103 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>integration-tests-trusty-service</artifactId>\n+    <version>1.0.0-SNAPSHOT</version>\n+  </parent>\n+  <artifactId>integration-tests-trusty-service-springboot</artifactId>\n+  <name>Kogito Apps :: Integration Tests :: Trusty Service :: Spring Boot</name>\n+\n+  <properties>\n+    <container.image.kogito-service>org.kie.kogito/integration-tests-trusty-service-springboot:${project.version}</container.image.kogito-service>\n+    <sonar.exclusions>**/KogitoApplication.java</sonar.exclusions>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-springboot-starter</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>tracing-decision-springboot-addon</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-engine</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>integration-tests-trusty-service-common</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-remote-resources-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>process</goal>\n+            </goals>\n+            <configuration>\n+              <resourceBundles>\n+                <resourceBundle>org.kie.kogito:integration-tests-trusty-service-common:${project.version}</resourceBundle>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15846b598bacea164df107deba477131e2adfd5f"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyNjA2Mg==", "bodyText": "Can you please clarify the reason of this?", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501726062", "createdAt": "2020-10-08T13:36:26Z", "author": {"login": "danielezonca"}, "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-springboot/pom.xml", "diffHunk": "@@ -0,0 +1,103 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>integration-tests-trusty-service</artifactId>\n+    <version>1.0.0-SNAPSHOT</version>\n+  </parent>\n+  <artifactId>integration-tests-trusty-service-springboot</artifactId>\n+  <name>Kogito Apps :: Integration Tests :: Trusty Service :: Spring Boot</name>\n+\n+  <properties>\n+    <container.image.kogito-service>org.kie.kogito/integration-tests-trusty-service-springboot:${project.version}</container.image.kogito-service>\n+    <sonar.exclusions>**/KogitoApplication.java</sonar.exclusions>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-springboot-starter</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>tracing-decision-springboot-addon</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-engine</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>integration-tests-trusty-service-common</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-remote-resources-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>process</goal>\n+            </goals>\n+            <configuration>\n+              <resourceBundles>\n+                <resourceBundle>org.kie.kogito:integration-tests-trusty-service-common:${project.version}</resourceBundle>\n+              </resourceBundles>\n+            </configuration>\n+          </execution>\n+        </executions>\n+      </plugin>\n+\n+      <plugin>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-maven-plugin</artifactId>\n+        <version>${version.springboot}</version>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>repackage</goal>\n+            </goals>\n+          </execution>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15846b598bacea164df107deba477131e2adfd5f"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTcyNjQ2NQ==", "bodyText": "Please move it to property", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r501726465", "createdAt": "2020-10-08T13:36:57Z", "author": {"login": "danielezonca"}, "path": "integration-tests/integration-tests-trusty-service/integration-tests-trusty-service-springboot/pom.xml", "diffHunk": "@@ -0,0 +1,103 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>integration-tests-trusty-service</artifactId>\n+    <version>1.0.0-SNAPSHOT</version>\n+  </parent>\n+  <artifactId>integration-tests-trusty-service-springboot</artifactId>\n+  <name>Kogito Apps :: Integration Tests :: Trusty Service :: Spring Boot</name>\n+\n+  <properties>\n+    <container.image.kogito-service>org.kie.kogito/integration-tests-trusty-service-springboot:${project.version}</container.image.kogito-service>\n+    <sonar.exclusions>**/KogitoApplication.java</sonar.exclusions>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-springboot-starter</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>tracing-decision-springboot-addon</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-engine</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>integration-tests-trusty-service-common</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-remote-resources-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>process</goal>\n+            </goals>\n+            <configuration>\n+              <resourceBundles>\n+                <resourceBundle>org.kie.kogito:integration-tests-trusty-service-common:${project.version}</resourceBundle>\n+              </resourceBundles>\n+            </configuration>\n+          </execution>\n+        </executions>\n+      </plugin>\n+\n+      <plugin>\n+        <groupId>org.springframework.boot</groupId>\n+        <artifactId>spring-boot-maven-plugin</artifactId>\n+        <version>${version.springboot}</version>\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>repackage</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+\n+      <plugin>\n+        <groupId>org.kie.kogito</groupId>\n+        <artifactId>kogito-maven-plugin</artifactId>\n+        <version>${project.version}</version>\n+        <extensions>true</extensions>\n+        <configuration>\n+          <!-- this is necessary to scan the .bpmn files from external resources, that are not on src/main/resources -->\n+          <kieSourcesDirectory>${project.basedir}/target/classes</kieSourcesDirectory>\n+        </configuration>\n+      </plugin>\n+\n+      <plugin>\n+        <groupId>com.google.cloud.tools</groupId>\n+        <artifactId>jib-maven-plugin</artifactId>\n+        <version>2.5.2</version>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "15846b598bacea164df107deba477131e2adfd5f"}, "originalPosition": 86}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c34d95aa3549cb02f8afb85fa05696901f906439", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/c34d95aa3549cb02f8afb85fa05696901f906439", "committedDate": "2020-10-15T15:57:24Z", "message": "KOGITO-3208: fix keycloak in trusty service and integration tests"}, "afterCommit": {"oid": "235ad9f1a8f1d4c7f4892bf93ec62e0d3bd2d803", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/235ad9f1a8f1d4c7f4892bf93ec62e0d3bd2d803", "committedDate": "2020-10-15T16:19:24Z", "message": "KOGITO-3208: fix keycloak in trusty service and integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "020be89fca56ca30fb4ebacbfe1ef4c1e1235fa4", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/020be89fca56ca30fb4ebacbfe1ef4c1e1235fa4", "committedDate": "2020-10-19T13:50:04Z", "message": "KOGITO-3208: implement integration-tests-trusty-service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "93813a404f0331dc8865e906461758b80beccfd2", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/93813a404f0331dc8865e906461758b80beccfd2", "committedDate": "2020-10-19T13:50:04Z", "message": "KOGITO-3208: simplify *TrustyExplainabilityEnd2EndIT classes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "56ba57445e9f05fa1d79a031fb107d25c81eaf44", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/56ba57445e9f05fa1d79a031fb107d25c81eaf44", "committedDate": "2020-10-19T13:50:05Z", "message": "KOGITO-3208: update root pom.xml\n\nCo-authored-by: Daniele Zonca <dzonca@redhat.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99f9f474aa5e79c6b1fd01a15e6d38381670ba25", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/99f9f474aa5e79c6b1fd01a15e6d38381670ba25", "committedDate": "2020-10-19T13:50:05Z", "message": "KOGITO-3208: fixes to integration-tests-trusty-service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d12c0cc1ea2eef4572f2a100d7b41bbfb61fb3ca", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/d12c0cc1ea2eef4572f2a100d7b41bbfb61fb3ca", "committedDate": "2020-10-19T13:50:05Z", "message": "KOGITO-3208: test with multiple executions in AbstractTrustyExplainabilityEnd2EndIT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89944dceaf93f7e83bc67deb8c9c9b602060059f", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/89944dceaf93f7e83bc67deb8c9c9b602060059f", "committedDate": "2020-10-19T13:50:05Z", "message": "KOGITO-3208: fix integration-tests-trusty-service-springboot/pom.xml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5631242cb88863dbc0bd58e9388c7a7ede8e2c3a", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/5631242cb88863dbc0bd58e9388c7a7ede8e2c3a", "committedDate": "2020-10-19T13:50:06Z", "message": "KOGITO-3208: fix keycloak in trusty service and integration tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "235ad9f1a8f1d4c7f4892bf93ec62e0d3bd2d803", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/235ad9f1a8f1d4c7f4892bf93ec62e0d3bd2d803", "committedDate": "2020-10-15T16:19:24Z", "message": "KOGITO-3208: fix keycloak in trusty service and integration tests"}, "afterCommit": {"oid": "5631242cb88863dbc0bd58e9388c7a7ede8e2c3a", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/5631242cb88863dbc0bd58e9388c7a7ede8e2c3a", "committedDate": "2020-10-19T13:50:06Z", "message": "KOGITO-3208: fix keycloak in trusty service and integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "641445b9ce9004b9f8b3bdd0ca1839af65280d9e", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/641445b9ce9004b9f8b3bdd0ca1839af65280d9e", "committedDate": "2020-10-20T15:23:26Z", "message": "KOGITO-3208: restore quarkus.oidc properties in trusty-service"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEyODcwNjc0", "url": "https://github.com/kiegroup/kogito-apps/pull/458#pullrequestreview-512870674", "createdAt": "2020-10-20T15:36:25Z", "commit": {"oid": "5631242cb88863dbc0bd58e9388c7a7ede8e2c3a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTozNjoyNlrOHlDrxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxNTozNjoyNlrOHlDrxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODYxOTcxOA==", "bodyText": "Hi @kostola , when I've enabled cors I faced the issue that it is working properly only if also oidc is enabled. Before removing this, could you please double check that everything is still working properly? This is the only file I've looked at during this review just to be clear", "url": "https://github.com/kiegroup/kogito-apps/pull/458#discussion_r508619718", "createdAt": "2020-10-20T15:36:26Z", "author": {"login": "r00ta"}, "path": "trusty/trusty-service/src/main/resources/application.properties", "diffHunk": "@@ -1,18 +1,27 @@\n quarkus.http.cors=true\n \n-#oidc\n-quarkus.oidc.enabled=true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5631242cb88863dbc0bd58e9388c7a7ede8e2c3a"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTEzNjg0OTcy", "url": "https://github.com/kiegroup/kogito-apps/pull/458#pullrequestreview-513684972", "createdAt": "2020-10-21T13:32:46Z", "commit": {"oid": "641445b9ce9004b9f8b3bdd0ca1839af65280d9e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de282aebcb2f33d1e612c3d4f780a50b8e2cdfa6", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/de282aebcb2f33d1e612c3d4f780a50b8e2cdfa6", "committedDate": "2020-10-26T08:38:22Z", "message": "Merge branch 'master' into 'KOGITO-3208'"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d62cd879aba9bde25d8e6056ec22f96c7a617d95", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/d62cd879aba9bde25d8e6056ec22f96c7a617d95", "committedDate": "2020-10-26T09:43:08Z", "message": "KOGITO-3208: use maven-resources-plugin in integration-tests-trusty-service"}, "afterCommit": {"oid": "de282aebcb2f33d1e612c3d4f780a50b8e2cdfa6", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/de282aebcb2f33d1e612c3d4f780a50b8e2cdfa6", "committedDate": "2020-10-26T08:38:22Z", "message": "Merge branch 'master' into 'KOGITO-3208'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a36b33347e18c942b8b9e69e8b54280862ac0c48", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/a36b33347e18c942b8b9e69e8b54280862ac0c48", "committedDate": "2020-10-27T08:36:25Z", "message": "Merge branch 'master' into 'KOGITO-3208'"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NTgwMDMw", "url": "https://github.com/kiegroup/kogito-apps/pull/458#pullrequestreview-517580030", "createdAt": "2020-10-27T11:01:57Z", "commit": {"oid": "a36b33347e18c942b8b9e69e8b54280862ac0c48"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a35c058f7d6e70ae4afb3f289919eceac4c215d", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/1a35c058f7d6e70ae4afb3f289919eceac4c215d", "committedDate": "2020-10-30T08:00:17Z", "message": "KOGITO-3208: merge branch 'master' into 'KOGITO-3208'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a6210b0f7c4ab9b2b21547df0a1ac67b45e0358d", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/a6210b0f7c4ab9b2b21547df0a1ac67b45e0358d", "committedDate": "2020-10-30T08:51:27Z", "message": "KOGITO-3208: fix pom.xml"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIxNzk2MjIy", "url": "https://github.com/kiegroup/kogito-apps/pull/458#pullrequestreview-521796222", "createdAt": "2020-11-02T16:33:58Z", "commit": {"oid": "a6210b0f7c4ab9b2b21547df0a1ac67b45e0358d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4785, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}