{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5MjUyMzk2", "number": 294, "title": "[KOGITO-2537] Consume and persist TraceEvents in trusty-service", "bodyText": "Related JIRA ticket\nRelated PR in kogito-runtimes", "createdAt": "2020-06-24T14:39:24Z", "url": "https://github.com/kiegroup/kogito-apps/pull/294", "merged": true, "mergeCommit": {"oid": "530ead018525c9fbe53dd36510654860d5e0e796"}, "closed": true, "closedAt": "2020-07-21T10:16:09Z", "author": {"login": "kostola"}, "timelineItems": {"totalCount": 48, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcvFn17ABqjM0ODcyNDU1NTQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc3DST9AFqTQ1MjMwODQ2Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d454c4a277fa0db48116fad1f230cf021cc30a30", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/d454c4a277fa0db48116fad1f230cf021cc30a30", "committedDate": "2020-06-24T14:35:01Z", "message": "[KOGITO-2537] Add TraceEventConsumer to trusty-service"}, "afterCommit": {"oid": "0968259aec0726fa4f2ead6664492c4f5bd98ee9", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/0968259aec0726fa4f2ead6664492c4f5bd98ee9", "committedDate": "2020-06-26T16:13:15Z", "message": "[KOGITO-2537] Improve Decision model"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0968259aec0726fa4f2ead6664492c4f5bd98ee9", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/0968259aec0726fa4f2ead6664492c4f5bd98ee9", "committedDate": "2020-06-26T16:13:15Z", "message": "[KOGITO-2537] Improve Decision model"}, "afterCommit": {"oid": "4219a646def83bb545ea352c635a073868a927bc", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/4219a646def83bb545ea352c635a073868a927bc", "committedDate": "2020-07-01T18:11:57Z", "message": "[KOGITO-2537] Extend Decision model"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4219a646def83bb545ea352c635a073868a927bc", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/4219a646def83bb545ea352c635a073868a927bc", "committedDate": "2020-07-01T18:11:57Z", "message": "[KOGITO-2537] Extend Decision model"}, "afterCommit": {"oid": "69510deed4ddeee31e210bcd0feb92db0b7417df", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/69510deed4ddeee31e210bcd0feb92db0b7417df", "committedDate": "2020-07-02T07:51:15Z", "message": "[KOGITO-2537] Fix Decision inputs and outcomes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "69510deed4ddeee31e210bcd0feb92db0b7417df", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/69510deed4ddeee31e210bcd0feb92db0b7417df", "committedDate": "2020-07-02T07:51:15Z", "message": "[KOGITO-2537] Fix Decision inputs and outcomes"}, "afterCommit": {"oid": "b9c0aade1a33a8f3eebc90afed2fdf44c83852d4", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/b9c0aade1a33a8f3eebc90afed2fdf44c83852d4", "committedDate": "2020-07-03T11:06:59Z", "message": "[KOGITO-2537] Improve trusty-service APIs"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/ebb323878fa9d7f4046ea54bd36a9e7f1494276e", "committedDate": "2020-07-03T12:47:15Z", "message": "[KOGITO-2537] Fix enum serialization/deserialization"}, "afterCommit": {"oid": "0cff921ffdba337e1f7c550ace140324467aeb8e", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/0cff921ffdba337e1f7c550ace140324467aeb8e", "committedDate": "2020-07-07T13:24:46Z", "message": "[KOGITO-2537] Improve trusty-service API tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "55070c883808b9b2d49cf97ba25dd8b40564c1ba", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/55070c883808b9b2d49cf97ba25dd8b40564c1ba", "committedDate": "2020-07-07T16:20:38Z", "message": "[KOGITO-2537] Add TraceEventConverterTest"}, "afterCommit": {"oid": "e322b84a3b20d7a5e86eafd015ad7c257aa219e8", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/e322b84a3b20d7a5e86eafd015ad7c257aa219e8", "committedDate": "2020-07-08T07:48:38Z", "message": "[KOGITO-2537] Reduce code smells"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyODA3MDAy", "url": "https://github.com/kiegroup/kogito-apps/pull/294#pullrequestreview-442807002", "createdAt": "2020-07-06T06:38:06Z", "commit": {"oid": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQwNjozODowNlrOGtKg4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwODo0NTowN1rOGueNjA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxMTM2MA==", "bodyText": "Could you use @JsonProperty? I think that even if it's more verbose, it helps a lot in the maintenance of the code", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450011360", "createdAt": "2020-07-06T06:38:06Z", "author": {"login": "r00ta"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/responses/DecisionOutcomeResponse.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.responses;\n+\n+import java.util.List;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+import org.kie.kogito.trusty.storage.api.model.DecisionOutcome;\n+\n+public class DecisionOutcomeResponse {\n+\n+    private String outcomeId;\n+    private String outcomeName;\n+    private String evaluationStatus;\n+    private TypedValueResponse outcomeResult;\n+    private List<TypedValueResponse> outcomeInputs;\n+    private List<MessageResponse> messages;\n+    private boolean hasErrors;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxMjk2Nw==", "bodyText": "What about adding a body with the reason why the request failed? For example in the case of getOutcomeById, the executionId might be correct but not the outcomeId.", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450012967", "createdAt": "2020-07-06T06:42:30Z", "author": {"login": "r00ta"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/api/DecisionsApiV1.java", "diffHunk": "@@ -55,21 +61,96 @@\n     )\n     @Operation(summary = \"Gets The decision header with details.\", description = \"Gets the decision detail header.\")\n     @Produces(MediaType.APPLICATION_JSON)\n-    public Response getExecutionById(\n+    public Response getById(\n             @Parameter(\n                     name = \"executionId\",\n                     description = \"The execution ID.\",\n                     required = true,\n                     schema = @Schema(implementation = String.class)\n             ) @PathParam(\"executionId\") String executionId) {\n+        return handleDecisionRequest(executionId, ExecutionHeaderResponse::fromExecution);\n+    }\n \n-        Decision decision;\n+    @GET\n+    @Path(\"/{executionId}/structuredInputs\")\n+    @APIResponses(value = {\n+            @APIResponse(description = \"Gets the decision structured inputs.\", responseCode = \"200\", content = @Content(mediaType = MediaType.APPLICATION_JSON, schema = @Schema(type = SchemaType.OBJECT, implementation = DecisionStructuredInputsResponse.class))),\n+            @APIResponse(description = \"Bad Request\", responseCode = \"400\", content = @Content(mediaType = MediaType.TEXT_PLAIN))\n+    }\n+    )\n+    @Operation(summary = \"Gets the decision structured inputs.\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Response getStructuredInputs(\n+            @Parameter(\n+                    name = \"executionId\",\n+                    description = \"The execution ID.\",\n+                    required = true,\n+                    schema = @Schema(implementation = String.class)\n+            ) @PathParam(\"executionId\") String executionId) {\n+        return handleDecisionRequest(executionId, DecisionStructuredInputsResponse::from);\n+    }\n+\n+    @GET\n+    @Path(\"/{executionId}/outcomes\")\n+    @APIResponses(value = {\n+            @APIResponse(description = \"Gets the decision outcomes.\", responseCode = \"200\", content = @Content(mediaType = MediaType.APPLICATION_JSON, schema = @Schema(type = SchemaType.OBJECT, implementation = DecisionOutcomesResponse.class))),\n+            @APIResponse(description = \"Bad Request\", responseCode = \"400\", content = @Content(mediaType = MediaType.TEXT_PLAIN))\n+    }\n+    )\n+    @Operation(summary = \"Gets the decision outcomes.\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Response getOutcomes(\n+            @Parameter(\n+                    name = \"executionId\",\n+                    description = \"The execution ID.\",\n+                    required = true,\n+                    schema = @Schema(implementation = String.class)\n+            ) @PathParam(\"executionId\") String executionId) {\n+        return handleDecisionRequest(executionId, DecisionOutcomesResponse::from);\n+    }\n+\n+    @GET\n+    @Path(\"/{executionId}/outcomes/{outcomeId}\")\n+    @APIResponses(value = {\n+            @APIResponse(description = \"Gets a specific outcome of a decision.\", responseCode = \"200\", content = @Content(mediaType = MediaType.APPLICATION_JSON, schema = @Schema(type = SchemaType.OBJECT, implementation = DecisionOutcomeResponse.class))),\n+            @APIResponse(description = \"Bad Request\", responseCode = \"400\", content = @Content(mediaType = MediaType.TEXT_PLAIN))\n+    }\n+    )\n+    @Operation(summary = \"Gets a specific outcome of a decision.\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Response getOutcomeById(\n+            @Parameter(\n+                    name = \"executionId\",\n+                    description = \"The execution ID.\",\n+                    required = true,\n+                    schema = @Schema(implementation = String.class)\n+            ) @PathParam(\"executionId\") String executionId,\n+            @Parameter(\n+                    name = \"outcomeId\",\n+                    description = \"The outcome ID.\",\n+                    required = true,\n+                    schema = @Schema(implementation = String.class)\n+            ) @PathParam(\"outcomeId\") String outcomeId) {\n+        return handleDecisionRequest(executionId, decision -> decision.getOutcomes().stream()\n+                .filter(outcome -> outcomeId != null && outcomeId.equals(outcome.getOutcomeId()))\n+                .findFirst()\n+                .map(DecisionOutcomeResponse::from)\n+                .orElse(null)\n+        );\n+    }\n+\n+    private Response handleDecisionRequest(String executionId, Function<Decision, Object> transformer) {\n+        return retrieveDecision(executionId)\n+                .map(transformer)\n+                .map(obj -> Response.ok(obj).build())\n+                .orElseGet(() -> Response.status(Response.Status.BAD_REQUEST.getStatusCode()).build());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxMzU0OA==", "bodyText": "Could you use @JsonProperty explicitly?", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450013548", "createdAt": "2020-07-06T06:43:59Z", "author": {"login": "r00ta"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/responses/DecisionStructuredInputsResponse.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.responses;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.TypedValue;\n+\n+public class DecisionStructuredInputsResponse {\n+\n+    private List<TypedValueResponse> inputs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAxODc2Ng==", "bodyText": "What about moving this class to persistence-commons-infinispan and refactor also the data index marshallers?", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450018766", "createdAt": "2020-07-06T06:56:59Z", "author": {"login": "r00ta"}, "path": "trusty/trusty-storage/trusty-storage-infinispan/src/main/java/org/kie/kogito/trusty/storage/infinispan/AbstractModelMarshaller.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.storage.infinispan;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.kie.kogito.persistence.infinispan.protostream.AbstractMarshaller;\n+\n+abstract class AbstractModelMarshaller<T> extends AbstractMarshaller implements org.infinispan.protostream.MessageMarshaller<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyMTg0NQ==", "bodyText": "Move constants to TypedValue class?", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450021845", "createdAt": "2020-07-06T07:04:05Z", "author": {"login": "r00ta"}, "path": "trusty/trusty-storage/trusty-storage-infinispan/src/main/java/org/kie/kogito/trusty/storage/infinispan/TypedValueModelMarshaller.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.storage.infinispan;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.kie.kogito.trusty.storage.api.model.TypedValue;\n+\n+public class TypedValueModelMarshaller extends AbstractModelMarshaller<TypedValue> {\n+\n+    public static final String NAME_FIELD = \"name\";\n+    public static final String TYPE_REF_FIELD = \"typeRef\";\n+    public static final String VALUE_FIELD = \"value\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyMjIwMg==", "bodyText": "Move constants to MessageModel class?", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450022202", "createdAt": "2020-07-06T07:05:00Z", "author": {"login": "r00ta"}, "path": "trusty/trusty-storage/trusty-storage-infinispan/src/main/java/org/kie/kogito/trusty/storage/infinispan/MessageModelMarshaller.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.storage.infinispan;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.kie.kogito.trusty.storage.api.model.Message;\n+import org.kie.kogito.trusty.storage.api.model.MessageExceptionField;\n+\n+public class MessageModelMarshaller extends AbstractModelMarshaller<Message> {\n+\n+    public static final String CATEGORY_FIELD = \"category\";\n+    public static final String EXCEPTION_FIELD = \"exception\";\n+    public static final String LEVEL_FIELD = \"level\";\n+    public static final String SOURCE_ID_FIELD = \"sourceId\";\n+    public static final String TEXT_FIELD = \"text\";\n+    public static final String TYPE_FIELD = \"type\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyMjQxNw==", "bodyText": "Move constants to MeaageExceptionField class?", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450022417", "createdAt": "2020-07-06T07:05:28Z", "author": {"login": "r00ta"}, "path": "trusty/trusty-storage/trusty-storage-infinispan/src/main/java/org/kie/kogito/trusty/storage/infinispan/MessageExceptionFieldModelMarshaller.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.storage.infinispan;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.kie.kogito.trusty.storage.api.model.MessageExceptionField;\n+\n+public class MessageExceptionFieldModelMarshaller extends AbstractModelMarshaller<MessageExceptionField> {\n+\n+    public static final String CAUSE_FIELD = \"cause\";\n+    public static final String CLASS_NAME_FIELD = \"className\";\n+    public static final String MESSAGE_FIELD = \"message\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyMjU5OQ==", "bodyText": "Move constants to DecisionOutcome class?", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450022599", "createdAt": "2020-07-06T07:05:52Z", "author": {"login": "r00ta"}, "path": "trusty/trusty-storage/trusty-storage-infinispan/src/main/java/org/kie/kogito/trusty/storage/infinispan/DecisionOutcomeModelMarshaller.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.storage.infinispan;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.kie.kogito.trusty.storage.api.model.DecisionOutcome;\n+import org.kie.kogito.trusty.storage.api.model.Message;\n+import org.kie.kogito.trusty.storage.api.model.TypedValue;\n+\n+public class DecisionOutcomeModelMarshaller extends AbstractModelMarshaller<DecisionOutcome> {\n+\n+    public static final String EVALUATION_STATUS_FIELD = \"evaluationStatus\";\n+    public static final String MESSAGES_FIELD = \"messages\";\n+    public static final String OUTCOME_ID_FIELD = \"outcomeId\";\n+    public static final String OUTCOME_INPUTS_FIELD = \"outcomeInputs\";\n+    public static final String OUTCOME_NAME_FIELD = \"outcomeName\";\n+    public static final String OUTCOME_RESULT_FIELD = \"outcomeResult\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyMjc3Ng==", "bodyText": "Move constants to Decision class?", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450022776", "createdAt": "2020-07-06T07:06:19Z", "author": {"login": "r00ta"}, "path": "trusty/trusty-storage/trusty-storage-infinispan/src/main/java/org/kie/kogito/trusty/storage/infinispan/DecisionModelMarshaller.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.storage.infinispan;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.DecisionOutcome;\n+import org.kie.kogito.trusty.storage.api.model.Execution;\n+import org.kie.kogito.trusty.storage.api.model.ExecutionTypeEnum;\n+import org.kie.kogito.trusty.storage.api.model.TypedValue;\n+\n+public class DecisionModelMarshaller extends AbstractModelMarshaller<Decision> {\n+\n+    public static final String INPUTS_FIELD = \"inputs\";\n+    public static final String OUTCOMES_FIELD = \"outcomes\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyNDA5MA==", "bodyText": "Log as warn instead of error?", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450024090", "createdAt": "2020-07-06T07:09:28Z", "author": {"login": "r00ta"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/tracing/TraceEventConsumer.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.tracing;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.cloudevents.v1.AttributesImpl;\n+import io.cloudevents.v1.CloudEventImpl;\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.kie.kogito.tracing.decision.event.CloudEventUtils;\n+import org.kie.kogito.tracing.decision.event.trace.TraceEvent;\n+import org.kie.kogito.tracing.decision.event.trace.TraceEventType;\n+import org.kie.kogito.trusty.service.ITrustyService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class TraceEventConsumer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(TraceEventConsumer.class);\n+\n+    private final TraceEventConverter converter;\n+    private final ITrustyService service;\n+\n+    @Inject\n+    public TraceEventConsumer(ITrustyService service) {\n+        this(new TraceEventConverter(), service);\n+    }\n+\n+    public TraceEventConsumer(TraceEventConverter converter, ITrustyService service) {\n+        this.converter = converter;\n+        this.service = service;\n+    }\n+\n+    @Incoming(\"kogito-tracing-decision\")\n+    public CompletionStage<Void> handleMessage(Message<String> message) {\n+        decodeCloudEvent(message.getPayload()).ifPresent(this::handleCloudEvent);\n+        return message.ack();\n+    }\n+\n+    private Optional<CloudEventImpl<TraceEvent>> decodeCloudEvent(String payload) {\n+        try {\n+            return Optional.of(CloudEventUtils.decode(payload));\n+        } catch (IllegalStateException e) {\n+            // TODO: implement proper error strategy in case of issues with decoding of the CloudEvent\n+            LOG.error(\"Catched IllegalStateException while decoding CloudEvent\", e);\n+            return Optional.empty();\n+        }\n+    }\n+\n+    private void handleCloudEvent(CloudEventImpl<TraceEvent> cloudEvent) {\n+        AttributesImpl attributes = cloudEvent.getAttributes();\n+\n+        if (cloudEvent.getData().isEmpty()) {\n+            LOG.error(\"Received CloudEvent with id {} from {} with empty data\", attributes.getId(), attributes.getSource());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyNDI0Mw==", "bodyText": "Log as warn?", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450024243", "createdAt": "2020-07-06T07:09:54Z", "author": {"login": "r00ta"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/tracing/TraceEventConsumer.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.tracing;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.cloudevents.v1.AttributesImpl;\n+import io.cloudevents.v1.CloudEventImpl;\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.kie.kogito.tracing.decision.event.CloudEventUtils;\n+import org.kie.kogito.tracing.decision.event.trace.TraceEvent;\n+import org.kie.kogito.tracing.decision.event.trace.TraceEventType;\n+import org.kie.kogito.trusty.service.ITrustyService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class TraceEventConsumer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(TraceEventConsumer.class);\n+\n+    private final TraceEventConverter converter;\n+    private final ITrustyService service;\n+\n+    @Inject\n+    public TraceEventConsumer(ITrustyService service) {\n+        this(new TraceEventConverter(), service);\n+    }\n+\n+    public TraceEventConsumer(TraceEventConverter converter, ITrustyService service) {\n+        this.converter = converter;\n+        this.service = service;\n+    }\n+\n+    @Incoming(\"kogito-tracing-decision\")\n+    public CompletionStage<Void> handleMessage(Message<String> message) {\n+        decodeCloudEvent(message.getPayload()).ifPresent(this::handleCloudEvent);\n+        return message.ack();\n+    }\n+\n+    private Optional<CloudEventImpl<TraceEvent>> decodeCloudEvent(String payload) {\n+        try {\n+            return Optional.of(CloudEventUtils.decode(payload));\n+        } catch (IllegalStateException e) {\n+            // TODO: implement proper error strategy in case of issues with decoding of the CloudEvent\n+            LOG.error(\"Catched IllegalStateException while decoding CloudEvent\", e);\n+            return Optional.empty();\n+        }\n+    }\n+\n+    private void handleCloudEvent(CloudEventImpl<TraceEvent> cloudEvent) {\n+        AttributesImpl attributes = cloudEvent.getAttributes();\n+\n+        if (cloudEvent.getData().isEmpty()) {\n+            LOG.error(\"Received CloudEvent with id {} from {} with empty data\", attributes.getId(), attributes.getSource());\n+            return;\n+        }\n+\n+        LOG.debug(\"Received CloudEvent with id {} from {}\", attributes.getId(), attributes.getSource());\n+\n+        TraceEvent traceEvent = cloudEvent.getData().get();\n+        TraceEventType traceEventType = traceEvent.getHeader().getType();\n+\n+        if (traceEventType == TraceEventType.DMN) {\n+            service.storeDecision(attributes.getId(), converter.toDecision(traceEvent));\n+        } else {\n+            LOG.error(\"Unsupported TraceEvent type {}\", traceEventType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyNzg2Mw==", "bodyText": "Rename tracing to messaging?", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450027863", "createdAt": "2020-07-06T07:18:00Z", "author": {"login": "r00ta"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/tracing/TraceEventConsumer.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.tracing;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyODMwOQ==", "bodyText": "Could you use @JsonProperty explicitly?", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450028309", "createdAt": "2020-07-06T07:19:00Z", "author": {"login": "r00ta"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/responses/TypedValueResponse.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.responses;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.kie.kogito.trusty.storage.api.model.TypedValue;\n+\n+public class TypedValueResponse {\n+\n+    private String name;\n+    private String typeRef;\n+    private JsonNode value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyODUzNw==", "bodyText": "Could you use @JsonProperty explicitly?", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450028537", "createdAt": "2020-07-06T07:19:28Z", "author": {"login": "r00ta"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/responses/MessageResponse.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.responses;\n+\n+import org.kie.kogito.trusty.storage.api.model.Message;\n+\n+public class MessageResponse {\n+\n+    private String level;\n+    private String category;\n+    private String type;\n+    private String sourceId;\n+    private String text;\n+    private MessageExceptionFieldResponse exception;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyODYyNA==", "bodyText": "Could you use @JsonProperty explicitly?", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450028624", "createdAt": "2020-07-06T07:19:39Z", "author": {"login": "r00ta"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/responses/MessageExceptionFieldResponse.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.responses;\n+\n+import org.kie.kogito.trusty.storage.api.model.MessageExceptionField;\n+\n+public class MessageExceptionFieldResponse {\n+\n+    private String className;\n+    private String message;\n+    private MessageExceptionFieldResponse cause;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyODczOA==", "bodyText": "Could you use @JsonProperty explicitly?", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450028738", "createdAt": "2020-07-06T07:19:56Z", "author": {"login": "r00ta"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/responses/DecisionOutcomesResponse.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.responses;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+\n+public class DecisionOutcomesResponse {\n+\n+    private ExecutionHeaderResponse header;\n+    private List<DecisionOutcomeResponse> outcomes;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAyOTM4OQ==", "bodyText": "In which API is this going to be returned?", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450029389", "createdAt": "2020-07-06T07:21:25Z", "author": {"login": "r00ta"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/responses/MessageResponse.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.responses;\n+\n+import org.kie.kogito.trusty.storage.api.model.Message;\n+\n+public class MessageResponse {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAzMjQ3Mw==", "bodyText": "Where is the components property? Was the API discussed in the meanwhile? AFAIK the payload should look like the following (an example):\n    {\n      \"name\": \"Transactions\",\n      \"typeRef\": \"tTransactions\",\n      \"value\": null,\n      \"components\": [\n        [\n          {\n            \"name\": \"Auth Code\",\n            \"typeRef\": \"tAuthCode\",\n            \"value\": \"Authorized\",\n            \"components\": null\n          },\n          {\n            \"name\": \"Amount\",\n            \"typeRef\": \"number\",\n            \"value\": 10000,\n            \"components\": null\n          },\n          {\n            \"name\": \"Card Type\",\n            \"typeRef\": \"tCardType\",\n            \"value\": \"Debit\",\n            \"components\": null\n          },\n          {\n            \"name\": \"Location\",\n            \"typeRef\": \"tLocation\",\n            \"value\": \"Local\",\n            \"components\": null\n          }\n        ]\n      ]\n}", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450032473", "createdAt": "2020-07-06T07:27:56Z", "author": {"login": "r00ta"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/responses/TypedValueResponse.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.responses;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import org.kie.kogito.trusty.storage.api.model.TypedValue;\n+\n+public class TypedValueResponse {\n+\n+    private String name;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDAzNTg5NA==", "bodyText": "components property?", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450035894", "createdAt": "2020-07-06T07:35:17Z", "author": {"login": "r00ta"}, "path": "trusty/trusty-storage/trusty-storage-infinispan/src/main/java/org/kie/kogito/trusty/storage/infinispan/TypedValueModelMarshaller.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.storage.infinispan;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.kie.kogito.trusty.storage.api.model.TypedValue;\n+\n+public class TypedValueModelMarshaller extends AbstractModelMarshaller<TypedValue> {\n+\n+    public static final String NAME_FIELD = \"name\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebb323878fa9d7f4046ea54bd36a9e7f1494276e"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDkxOTYwNQ==", "bodyText": "Remove underline in all test names?", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r450919605", "createdAt": "2020-07-07T14:43:49Z", "author": {"login": "r00ta"}, "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/api/DecisionsApiV1Test.java", "diffHunk": "@@ -16,42 +16,226 @@\n \n package org.kie.kogito.trusty.service.api;\n \n+import java.util.List;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n import io.quarkus.test.junit.QuarkusTest;\n import io.quarkus.test.junit.mockito.InjectMock;\n+import io.restassured.filter.log.ResponseLoggingFilter;\n import io.restassured.http.ContentType;\n-import org.junit.jupiter.api.Assertions;\n+import io.restassured.response.Response;\n import org.junit.jupiter.api.Test;\n import org.kie.kogito.trusty.service.ITrustyService;\n+import org.kie.kogito.trusty.service.responses.DecisionOutcomeResponse;\n+import org.kie.kogito.trusty.service.responses.DecisionOutcomesResponse;\n+import org.kie.kogito.trusty.service.responses.DecisionStructuredInputsResponse;\n import org.kie.kogito.trusty.service.responses.ExecutionHeaderResponse;\n import org.kie.kogito.trusty.storage.api.model.Decision;\n-import org.mockito.Mockito;\n+import org.kie.kogito.trusty.storage.api.model.DecisionOutcome;\n+import org.kie.kogito.trusty.storage.api.model.ExecutionTypeEnum;\n+import org.kie.kogito.trusty.storage.api.model.Message;\n+import org.kie.kogito.trusty.storage.api.model.MessageExceptionField;\n+import org.kie.kogito.trusty.storage.api.model.TypedValue;\n \n import static io.restassured.RestAssured.given;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.junit.jupiter.api.Assertions.assertSame;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.mockito.ArgumentMatchers.anyString;\n import static org.mockito.ArgumentMatchers.eq;\n import static org.mockito.Mockito.when;\n \n @QuarkusTest\n public class DecisionsApiV1Test {\n \n+    private static final String TEST_EXECUTION_ID = \"executionId\";\n+    private static final String TEST_OUTCOME_ID = \"FirstOutcome\";\n+\n     @InjectMock\n     ITrustyService executionService;\n \n     @Test\n-    void givenAValidRequestWhenExecutionEndpointIsCalledThenTheDefaultValuesAreCorrect() {\n+    void test_GetExecutionById() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cff921ffdba337e1f7c550ace140324467aeb8e"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM3NjI3NA==", "bodyText": "In which API do we return this message?", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r451376274", "createdAt": "2020-07-08T08:34:47Z", "author": {"login": "r00ta"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/responses/MessageResponse.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.responses;\n+\n+import org.kie.kogito.trusty.storage.api.model.Message;\n+\n+public class MessageResponse {\n+\n+    private String level;\n+    private String category;\n+    private String type;\n+    private String sourceId;\n+    private String text;\n+    private MessageExceptionFieldResponse exception;\n+\n+    private MessageResponse() {\n+    }\n+\n+    public MessageResponse(String level, String category, String type, String sourceId, String text, MessageExceptionFieldResponse exception) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e322b84a3b20d7a5e86eafd015ad7c257aa219e8"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM4MDA2Ng==", "bodyText": "what about exceptions?\n\nI might be wrong, but since this is running on the main event loop, if an exception occours it is stopped and no event is consumed anymore. Could you double check?\nif an event is corrupted or something, our consumer will be stuck forever on that event until it is removed from the topic right?\nwhat is our retry policy?", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r451380066", "createdAt": "2020-07-08T08:41:00Z", "author": {"login": "r00ta"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/tracing/TraceEventConsumer.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.tracing;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.cloudevents.v1.AttributesImpl;\n+import io.cloudevents.v1.CloudEventImpl;\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.kie.kogito.tracing.decision.event.CloudEventUtils;\n+import org.kie.kogito.tracing.decision.event.trace.TraceEvent;\n+import org.kie.kogito.tracing.decision.event.trace.TraceEventType;\n+import org.kie.kogito.trusty.service.ITrustyService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class TraceEventConsumer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(TraceEventConsumer.class);\n+\n+    private final TraceEventConverter converter;\n+    private final ITrustyService service;\n+\n+    @Inject\n+    public TraceEventConsumer(ITrustyService service) {\n+        this(new TraceEventConverter(), service);\n+    }\n+\n+    public TraceEventConsumer(TraceEventConverter converter, ITrustyService service) {\n+        this.converter = converter;\n+        this.service = service;\n+    }\n+\n+    @Incoming(\"kogito-tracing-decision\")\n+    public CompletionStage<Void> handleMessage(Message<String> message) {\n+        decodeCloudEvent(message.getPayload()).ifPresent(this::handleCloudEvent);\n+        return message.ack();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e322b84a3b20d7a5e86eafd015ad7c257aa219e8"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM4MjY2OA==", "bodyText": "Move to another class?", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r451382668", "createdAt": "2020-07-08T08:45:07Z", "author": {"login": "r00ta"}, "path": "trusty/trusty-storage/trusty-storage-api/src/main/java/org/kie/kogito/trusty/storage/api/model/Message.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.storage.api.model;\n+\n+public class Message {\n+\n+    public enum Level {\n+        ERROR,\n+        WARNING,\n+        INFO;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e322b84a3b20d7a5e86eafd015ad7c257aa219e8"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1Mzk5MjMz", "url": "https://github.com/kiegroup/kogito-apps/pull/294#pullrequestreview-445399233", "createdAt": "2020-07-09T08:29:38Z", "commit": {"oid": "e322b84a3b20d7a5e86eafd015ad7c257aa219e8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODoyOTozOFrOGvHDyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQwODoyOTozOFrOGvHDyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjA1MTkxNQ==", "bodyText": "Should we rename the topic kogito-tracing-decision to something more generic since it is supposed to work also for processes and others?", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452051915", "createdAt": "2020-07-09T08:29:38Z", "author": {"login": "r00ta"}, "path": "trusty/trusty-service/src/main/resources/application.properties", "diffHunk": "@@ -1,2 +1,8 @@\n # Infinispan\n-kogito.persistence.type=infinispan\n\\ No newline at end of file\n+kogito.persistence.type=infinispan\n+# Kafka Tracing\n+mp.messaging.incoming.kogito-tracing-decision.group.id=trusty-service\n+mp.messaging.incoming.kogito-tracing-decision.connector=smallrye-kafka\n+mp.messaging.incoming.kogito-tracing-decision.topic=kogito-tracing-decision", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e322b84a3b20d7a5e86eafd015ad7c257aa219e8"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ1NTAwMjM0", "url": "https://github.com/kiegroup/kogito-apps/pull/294#pullrequestreview-445500234", "createdAt": "2020-07-09T10:43:51Z", "commit": {"oid": "e322b84a3b20d7a5e86eafd015ad7c257aa219e8"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMDo0Mzo1MVrOGvLtzg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOVQxMDo0Mzo1MVrOGvLtzg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjEyODIwNg==", "bodyText": "Can't we simply import \"org.infinispan.protostream.MessageMarshaller\". Is it necessary to use long name here?", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452128206", "createdAt": "2020-07-09T10:43:51Z", "author": {"login": "jiripetrlik"}, "path": "trusty/trusty-storage/trusty-storage-infinispan/src/main/java/org/kie/kogito/trusty/storage/infinispan/AbstractModelMarshaller.java", "diffHunk": "@@ -0,0 +1,41 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.storage.infinispan;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import org.kie.kogito.persistence.infinispan.protostream.AbstractMarshaller;\n+\n+abstract class AbstractModelMarshaller<T> extends AbstractMarshaller implements org.infinispan.protostream.MessageMarshaller<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e322b84a3b20d7a5e86eafd015ad7c257aa219e8"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ2MjAyMTU4", "url": "https://github.com/kiegroup/kogito-apps/pull/294#pullrequestreview-446202158", "createdAt": "2020-07-10T08:04:08Z", "commit": {"oid": "5114f2005b0fc959a44e3a2f465b944d18a7a39a"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQwODowNDowOVrOGvt5Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQxMDo1MzozM1rOGvzCAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY4ODIyMw==", "bodyText": "error should be better", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452688223", "createdAt": "2020-07-10T08:04:09Z", "author": {"login": "danielezonca"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/TraceEventConsumer.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.messaging;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.cloudevents.v1.AttributesImpl;\n+import io.cloudevents.v1.CloudEventImpl;\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.kie.kogito.tracing.decision.event.CloudEventUtils;\n+import org.kie.kogito.tracing.decision.event.trace.TraceEvent;\n+import org.kie.kogito.tracing.decision.event.trace.TraceEventType;\n+import org.kie.kogito.trusty.service.ITrustyService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class TraceEventConsumer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(TraceEventConsumer.class);\n+\n+    private final TraceEventConverter converter;\n+    private final ITrustyService service;\n+\n+    @Inject\n+    public TraceEventConsumer(ITrustyService service) {\n+        this(new TraceEventConverter(), service);\n+    }\n+\n+    public TraceEventConsumer(TraceEventConverter converter, ITrustyService service) {\n+        this.converter = converter;\n+        this.service = service;\n+    }\n+\n+    @Incoming(\"kogito-tracing-decision\")\n+    public CompletionStage<Void> handleMessage(Message<String> message) {\n+        decodeCloudEvent(message.getPayload()).ifPresent(this::handleCloudEvent);\n+        return message.ack();\n+    }\n+\n+    private Optional<CloudEventImpl<TraceEvent>> decodeCloudEvent(String payload) {\n+        try {\n+            return Optional.of(CloudEventUtils.decode(payload));\n+        } catch (IllegalStateException e) {\n+            LOG.warn(String.format(\"Can't decode message to CloudEvent: %s\", payload), e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5114f2005b0fc959a44e3a2f465b944d18a7a39a"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY4ODUwNg==", "bodyText": "error", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452688506", "createdAt": "2020-07-10T08:04:45Z", "author": {"login": "danielezonca"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/TraceEventConsumer.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.messaging;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.cloudevents.v1.AttributesImpl;\n+import io.cloudevents.v1.CloudEventImpl;\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.kie.kogito.tracing.decision.event.CloudEventUtils;\n+import org.kie.kogito.tracing.decision.event.trace.TraceEvent;\n+import org.kie.kogito.tracing.decision.event.trace.TraceEventType;\n+import org.kie.kogito.trusty.service.ITrustyService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class TraceEventConsumer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(TraceEventConsumer.class);\n+\n+    private final TraceEventConverter converter;\n+    private final ITrustyService service;\n+\n+    @Inject\n+    public TraceEventConsumer(ITrustyService service) {\n+        this(new TraceEventConverter(), service);\n+    }\n+\n+    public TraceEventConsumer(TraceEventConverter converter, ITrustyService service) {\n+        this.converter = converter;\n+        this.service = service;\n+    }\n+\n+    @Incoming(\"kogito-tracing-decision\")\n+    public CompletionStage<Void> handleMessage(Message<String> message) {\n+        decodeCloudEvent(message.getPayload()).ifPresent(this::handleCloudEvent);\n+        return message.ack();\n+    }\n+\n+    private Optional<CloudEventImpl<TraceEvent>> decodeCloudEvent(String payload) {\n+        try {\n+            return Optional.of(CloudEventUtils.decode(payload));\n+        } catch (IllegalStateException e) {\n+            LOG.warn(String.format(\"Can't decode message to CloudEvent: %s\", payload), e);\n+            return Optional.empty();\n+        }\n+    }\n+\n+    private void handleCloudEvent(CloudEventImpl<TraceEvent> cloudEvent) {\n+        AttributesImpl attributes = cloudEvent.getAttributes();\n+        Optional<TraceEvent> optData = cloudEvent.getData();\n+\n+        if (!optData.isPresent()) {\n+            LOG.warn(\"Received CloudEvent with id {} from {} with empty data\", attributes.getId(), attributes.getSource());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5114f2005b0fc959a44e3a2f465b944d18a7a39a"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY4OTE2Mg==", "bodyText": "error", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452689162", "createdAt": "2020-07-10T08:05:58Z", "author": {"login": "danielezonca"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/TraceEventConsumer.java", "diffHunk": "@@ -0,0 +1,89 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.messaging;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.cloudevents.v1.AttributesImpl;\n+import io.cloudevents.v1.CloudEventImpl;\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.kie.kogito.tracing.decision.event.CloudEventUtils;\n+import org.kie.kogito.tracing.decision.event.trace.TraceEvent;\n+import org.kie.kogito.tracing.decision.event.trace.TraceEventType;\n+import org.kie.kogito.trusty.service.ITrustyService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class TraceEventConsumer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(TraceEventConsumer.class);\n+\n+    private final TraceEventConverter converter;\n+    private final ITrustyService service;\n+\n+    @Inject\n+    public TraceEventConsumer(ITrustyService service) {\n+        this(new TraceEventConverter(), service);\n+    }\n+\n+    public TraceEventConsumer(TraceEventConverter converter, ITrustyService service) {\n+        this.converter = converter;\n+        this.service = service;\n+    }\n+\n+    @Incoming(\"kogito-tracing-decision\")\n+    public CompletionStage<Void> handleMessage(Message<String> message) {\n+        decodeCloudEvent(message.getPayload()).ifPresent(this::handleCloudEvent);\n+        return message.ack();\n+    }\n+\n+    private Optional<CloudEventImpl<TraceEvent>> decodeCloudEvent(String payload) {\n+        try {\n+            return Optional.of(CloudEventUtils.decode(payload));\n+        } catch (IllegalStateException e) {\n+            LOG.warn(String.format(\"Can't decode message to CloudEvent: %s\", payload), e);\n+            return Optional.empty();\n+        }\n+    }\n+\n+    private void handleCloudEvent(CloudEventImpl<TraceEvent> cloudEvent) {\n+        AttributesImpl attributes = cloudEvent.getAttributes();\n+        Optional<TraceEvent> optData = cloudEvent.getData();\n+\n+        if (!optData.isPresent()) {\n+            LOG.warn(\"Received CloudEvent with id {} from {} with empty data\", attributes.getId(), attributes.getSource());\n+            return;\n+        }\n+\n+        LOG.debug(\"Received CloudEvent with id {} from {}\", attributes.getId(), attributes.getSource());\n+\n+        TraceEvent traceEvent = optData.get();\n+        TraceEventType traceEventType = traceEvent.getHeader().getType();\n+\n+        if (traceEventType == TraceEventType.DMN) {\n+            service.storeDecision(attributes.getId(), converter.toDecision(traceEvent));\n+        } else {\n+            LOG.warn(\"Unsupported TraceEvent type {}\", traceEventType);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5114f2005b0fc959a44e3a2f465b944d18a7a39a"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY5MDM3Mw==", "bodyText": "This is an utility class with no fields so I think we should make all method static + private constructor", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452690373", "createdAt": "2020-07-10T08:08:35Z", "author": {"login": "danielezonca"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/TraceEventConverter.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.messaging;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.kie.kogito.tracing.decision.event.trace.TraceEvent;\n+import org.kie.kogito.tracing.decision.event.trace.TraceInputValue;\n+import org.kie.kogito.tracing.decision.event.trace.TraceOutputValue;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.DecisionOutcome;\n+import org.kie.kogito.trusty.storage.api.model.Message;\n+import org.kie.kogito.trusty.storage.api.model.MessageExceptionField;\n+import org.kie.kogito.trusty.storage.api.model.MessageLevel;\n+import org.kie.kogito.trusty.storage.api.model.TypedValue;\n+\n+public class TraceEventConverter {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5114f2005b0fc959a44e3a2f465b944d18a7a39a"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY5MDgyMg==", "bodyText": "Please create a ticket for this and use Test User or even empty string instead of a fake value", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452690822", "createdAt": "2020-07-10T08:09:30Z", "author": {"login": "danielezonca"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/TraceEventConverter.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.messaging;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.kie.kogito.tracing.decision.event.trace.TraceEvent;\n+import org.kie.kogito.tracing.decision.event.trace.TraceInputValue;\n+import org.kie.kogito.tracing.decision.event.trace.TraceOutputValue;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.DecisionOutcome;\n+import org.kie.kogito.trusty.storage.api.model.Message;\n+import org.kie.kogito.trusty.storage.api.model.MessageExceptionField;\n+import org.kie.kogito.trusty.storage.api.model.MessageLevel;\n+import org.kie.kogito.trusty.storage.api.model.TypedValue;\n+\n+public class TraceEventConverter {\n+\n+    public Decision toDecision(TraceEvent event) {\n+\n+        List<TypedValue> inputs = event.getInputs() == null\n+                ? null\n+                : event.getInputs().stream().map(this::toInput).collect(Collectors.toList());\n+\n+        List<DecisionOutcome> outcomes = event.getOutputs() == null\n+                ? null\n+                : event.getOutputs().stream().map(this::toOutcome).collect(Collectors.toList());\n+\n+        return new Decision(\n+                event.getHeader().getExecutionId(),\n+                event.getHeader().getStartTimestamp(),\n+                true,        // TODO: change this default\n+                \"John Doe\",  // TODO: change this default", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5114f2005b0fc959a44e3a2f465b944d18a7a39a"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MjY5MzczOA==", "bodyText": "What about use this MessageLevel directly in the TraceEvent instead of publish a kie.api.builder class?", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452693738", "createdAt": "2020-07-10T08:15:29Z", "author": {"login": "danielezonca"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/TraceEventConverter.java", "diffHunk": "@@ -0,0 +1,103 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.messaging;\n+\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.kie.kogito.tracing.decision.event.trace.TraceEvent;\n+import org.kie.kogito.tracing.decision.event.trace.TraceInputValue;\n+import org.kie.kogito.tracing.decision.event.trace.TraceOutputValue;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.DecisionOutcome;\n+import org.kie.kogito.trusty.storage.api.model.Message;\n+import org.kie.kogito.trusty.storage.api.model.MessageExceptionField;\n+import org.kie.kogito.trusty.storage.api.model.MessageLevel;\n+import org.kie.kogito.trusty.storage.api.model.TypedValue;\n+\n+public class TraceEventConverter {\n+\n+    public Decision toDecision(TraceEvent event) {\n+\n+        List<TypedValue> inputs = event.getInputs() == null\n+                ? null\n+                : event.getInputs().stream().map(this::toInput).collect(Collectors.toList());\n+\n+        List<DecisionOutcome> outcomes = event.getOutputs() == null\n+                ? null\n+                : event.getOutputs().stream().map(this::toOutcome).collect(Collectors.toList());\n+\n+        return new Decision(\n+                event.getHeader().getExecutionId(),\n+                event.getHeader().getStartTimestamp(),\n+                true,        // TODO: change this default\n+                \"John Doe\",  // TODO: change this default\n+                event.getHeader().getResourceId().getModelName(),\n+                inputs,\n+                outcomes\n+        );\n+    }\n+\n+    public TypedValue toInput(TraceInputValue eventInput) {\n+        return new TypedValue(\n+                eventInput.getName(),\n+                eventInput.getType().getId(),\n+                eventInput.getValue()\n+        );\n+    }\n+\n+    public DecisionOutcome toOutcome(TraceOutputValue eventOutput) {\n+        return new DecisionOutcome(\n+                eventOutput.getId(),\n+                eventOutput.getName(),\n+                eventOutput.getStatus(),\n+                new TypedValue(eventOutput.getName(), eventOutput.getType().getId(), eventOutput.getValue()),\n+                null,\n+                eventOutput.getMessages() == null ? null : eventOutput.getMessages().stream().map(this::toMessage).collect(Collectors.toList())\n+        );\n+    }\n+\n+    public Message toMessage(org.kie.kogito.tracing.decision.event.common.Message eventMessage) {\n+        return new Message(\n+                toMessageLevel(eventMessage.getLevel()),\n+                eventMessage.getCategory() == null ? null : eventMessage.getCategory().name(),\n+                eventMessage.getType(),\n+                eventMessage.getSourceId(),\n+                eventMessage.getText(),\n+                toMessageExceptionField(eventMessage.getException())\n+        );\n+    }\n+\n+    public MessageExceptionField toMessageExceptionField(org.kie.kogito.tracing.decision.event.common.MessageExceptionField eventException) {\n+        return eventException == null\n+                ? null\n+                : new MessageExceptionField(eventException.getClassName(), eventException.getMessage(), toMessageExceptionField(eventException.getCause()));\n+    }\n+\n+    public MessageLevel toMessageLevel(org.kie.api.builder.Message.Level eventLevel) {\n+        switch (eventLevel) {\n+            case ERROR:\n+                return MessageLevel.ERROR;\n+            case WARNING:\n+                return MessageLevel.WARNING;\n+            case INFO:\n+                return MessageLevel.INFO;\n+            default:\n+                return null;\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5114f2005b0fc959a44e3a2f465b944d18a7a39a"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Mjc3MjM1Mg==", "bodyText": "General comment about all these json test resources.\nI think it could make sense to write them directly as TraceEvent java classes and then serialize as json during the test. In this way if we update TraceEvent structure it is possible to detect the changes just compiling the code.", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r452772352", "createdAt": "2020-07-10T10:53:33Z", "author": {"login": "danielezonca"}, "path": "trusty/trusty-service/src/test/resources/TraceEventTest_correct_CloudEvent.json", "diffHunk": "@@ -0,0 +1,140 @@\n+{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5114f2005b0fc959a44e3a2f465b944d18a7a39a"}, "originalPosition": 1}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5114f2005b0fc959a44e3a2f465b944d18a7a39a", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/5114f2005b0fc959a44e3a2f465b944d18a7a39a", "committedDate": "2020-07-09T15:36:28Z", "message": "[KOGITO-2537] Move Message.Level to dedicated MessageLevel enum in trusty storage"}, "afterCommit": {"oid": "40f2b11bddfae17e493f9801a2b2f4f0340ffa1b", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/40f2b11bddfae17e493f9801a2b2f4f0340ffa1b", "committedDate": "2020-07-13T15:00:39Z", "message": "[KOGITO-2537] Improvements"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "40f2b11bddfae17e493f9801a2b2f4f0340ffa1b", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/40f2b11bddfae17e493f9801a2b2f4f0340ffa1b", "committedDate": "2020-07-13T15:00:39Z", "message": "[KOGITO-2537] Improvements"}, "afterCommit": {"oid": "5970aafca092432dfd88cf65dd35f48a72a2cee4", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/5970aafca092432dfd88cf65dd35f48a72a2cee4", "committedDate": "2020-07-13T15:04:23Z", "message": "[KOGITO-2537] Improvements"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5970aafca092432dfd88cf65dd35f48a72a2cee4", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/5970aafca092432dfd88cf65dd35f48a72a2cee4", "committedDate": "2020-07-13T15:04:23Z", "message": "[KOGITO-2537] Improvements"}, "afterCommit": {"oid": "7569f451546ec8e9b36af19168493649a8b9870e", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/7569f451546ec8e9b36af19168493649a8b9870e", "committedDate": "2020-07-14T10:40:42Z", "message": "[KOGITO-2537] Improve tests of trusty-storage-infinispan"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "12403f0fbc5211e581a5dbb5770341b133b1ed8a", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/12403f0fbc5211e581a5dbb5770341b133b1ed8a", "committedDate": "2020-07-14T10:54:38Z", "message": "[KOGITO-2537] Remove redundant MessageLevel enum from trusty-storage-api"}, "afterCommit": {"oid": "9790cee844ce46fdb869ac095799aa30abe7cc66", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/9790cee844ce46fdb869ac095799aa30abe7cc66", "committedDate": "2020-07-14T14:54:11Z", "message": "[KOGITO-2537] Add TraceEventConsumerIT"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "594e07907814c534913a4ffa86f2321d0ff38b5e", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/594e07907814c534913a4ffa86f2321d0ff38b5e", "committedDate": "2020-07-15T15:30:57Z", "message": "[KOGITO-2537] Add testCloudEventWithErrors to TraceEventConsumerIT"}, "afterCommit": {"oid": "eff8385069f9b2af5bb4c056b63a64dd5501c2f4", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/eff8385069f9b2af5bb4c056b63a64dd5501c2f4", "committedDate": "2020-07-16T08:51:07Z", "message": "[KOGITO-2537] Add workaround for infinispan serialization error of Message model"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ4Mzc4NjQz", "url": "https://github.com/kiegroup/kogito-apps/pull/294#pullrequestreview-448378643", "createdAt": "2020-07-14T18:55:38Z", "commit": {"oid": "9790cee844ce46fdb869ac095799aa30abe7cc66"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODo1NTozOFrOGxhAkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNFQxODo1NTozOFrOGxhAkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NDU3NDIyNw==", "bodyText": "Can you add some additional assertions?\nFor example number of input and a check on a specific value", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r454574227", "createdAt": "2020-07-14T18:55:38Z", "author": {"login": "danielezonca"}, "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/messaging/TraceEventConsumerIT.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.messaging;\n+\n+import java.nio.charset.StandardCharsets;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.inject.Inject;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.vertx.core.Vertx;\n+import io.vertx.kafka.client.producer.KafkaProducer;\n+import io.vertx.kafka.client.producer.KafkaProducerRecord;\n+import org.apache.commons.io.IOUtils;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.trusty.service.TrustyInfinispanServerTestResource;\n+import org.kie.kogito.trusty.service.TrustyKafkaTestResource;\n+import org.kie.kogito.trusty.service.TrustyService;\n+import org.kie.kogito.trusty.storage.api.TrustyStorageService;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+@QuarkusTest\n+@QuarkusTestResource(TrustyInfinispanServerTestResource.class)\n+@QuarkusTestResource(TrustyKafkaTestResource.class)\n+class TraceEventConsumerIT {\n+\n+    @Inject\n+    TraceEventConsumer traceEventConsumer;\n+    @Inject\n+    TrustyService trustyService;\n+    @Inject\n+    TrustyStorageService trustyStorageService;\n+\n+    KafkaProducer<String, String> producer;\n+\n+    @BeforeEach\n+    public void setup() {\n+        trustyStorageService.getDecisionsStorage().clear();\n+\n+        System.err.println(\"kafka.bootstrap.servers: \" + System.getProperty(TrustyKafkaTestResource.KAFKA_BOOTSTRAP_SERVERS, \"localhost:9092\"));\n+\n+        producer = KafkaProducer.create(Vertx.vertx(), Map.of(\n+                \"bootstrap.servers\", System.getProperty(TrustyKafkaTestResource.KAFKA_BOOTSTRAP_SERVERS, \"localhost:9092\"),\n+                \"key.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\",\n+                \"value.serializer\", \"org.apache.kafka.common.serialization.StringSerializer\",\n+                \"acks\", \"all\"\n+        ));\n+    }\n+\n+    @Test\n+    void testCorrectCloudEvent() throws Exception {\n+        sendToKafkaAndRun(IOUtils.resourceToString(\"/TraceEventTest_correct_CloudEvent.json\", StandardCharsets.UTF_8), () ->\n+            assertNotNull(trustyService.getDecisionById(\"82639415-ceb1-411a-b3c8-4832e6a82905\"))\n+        );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9790cee844ce46fdb869ac095799aa30abe7cc66"}, "originalPosition": 73}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8f9320b5f76778f918e2ffb108b17bb97d43820c", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/8f9320b5f76778f918e2ffb108b17bb97d43820c", "committedDate": "2020-07-16T15:02:53Z", "message": "[KOGITO-2537] Remove JSON test resources from trusty-service"}, "afterCommit": {"oid": "ba7f0b1fda935aa4375b386c5aeb93ae404412c5", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/ba7f0b1fda935aa4375b386c5aeb93ae404412c5", "committedDate": "2020-07-17T13:06:17Z", "message": "[KOGITO-2537] Static TraceEventConverter methods + improved TraceEventConsumerIT"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5f778f2941803247669cdb071aecf2a23fc66977", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/5f778f2941803247669cdb071aecf2a23fc66977", "committedDate": "2020-07-17T13:29:30Z", "message": "[KOGITO-2537] Log at error level in TraceEventConsumer"}, "afterCommit": {"oid": "8e50079f8950757627ce1da913154427cd483540", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/8e50079f8950757627ce1da913154427cd483540", "committedDate": "2020-07-17T14:21:27Z", "message": "[KOGITO-2537] Log at error level in TraceEventConsumer"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNDA0NDIx", "url": "https://github.com/kiegroup/kogito-apps/pull/294#pullrequestreview-451404421", "createdAt": "2020-07-20T08:36:57Z", "commit": {"oid": "8e50079f8950757627ce1da913154427cd483540"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwODozNjo1OFrOG0AAkQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQwOTo0Nzo0M1rOG0DQtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzE3OTI4MQ==", "bodyText": "There is the same class (KafkaTestResource) in the data-index, it would be nice to refactor it under a common class that can be re-used by multiple modules", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r457179281", "createdAt": "2020-07-20T08:36:58Z", "author": {"login": "r00ta"}, "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/TrustyKafkaTestResource.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service;\n+\n+import java.time.Duration;\n+import java.util.Map;\n+\n+import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.testcontainers.containers.KafkaContainer;\n+import org.testcontainers.containers.output.Slf4jLogConsumer;\n+\n+import static java.util.Collections.singletonMap;\n+\n+public class TrustyKafkaTestResource implements QuarkusTestResourceLifecycleManager {\n+\n+    public static final String KAFKA_BOOTSTRAP_SERVERS = \"kafka.bootstrap.servers\";\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(TrustyKafkaTestResource.class);\n+    private static final KafkaContainer KAFKA = new KafkaContainer()\n+            .withLogConsumer(new Slf4jLogConsumer(LOGGER))\n+            .withStartupTimeout(Duration.ofSeconds(120));\n+\n+    @Override\n+    public Map<String, String> start() {\n+        if (!KAFKA.isRunning()) {\n+            KAFKA.start();\n+            LOGGER.info(\"Kafka servers: {}\", KAFKA.getBootstrapServers());\n+        }\n+        return singletonMap(KAFKA_BOOTSTRAP_SERVERS, KAFKA.getBootstrapServers());\n+    }\n+\n+    @Override\n+    public void stop() {\n+        KAFKA.stop();\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e50079f8950757627ce1da913154427cd483540"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzIzMjU2Ng==", "bodyText": "This is not really testing that if a property is added to the model class, then it has to be added in the marshaller as well. This is what DecisionMarshallerTest.java was testing (now deleted)", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r457232566", "createdAt": "2020-07-20T09:47:43Z", "author": {"login": "r00ta"}, "path": "trusty/trusty-storage/trusty-storage-infinispan/src/test/java/org/kie/kogito/trusty/storage/infinispan/MarshallerTestTemplate.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.storage.infinispan;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import org.infinispan.protostream.MessageMarshaller;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.trusty.storage.infinispan.testfield.AbstractTestField;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.mockingDetails;\n+\n+abstract class MarshallerTestTemplate<T> {\n+\n+    protected abstract T buildEmptyObject();\n+\n+    protected abstract MessageMarshaller<T> buildMarshaller();\n+\n+    protected abstract List<AbstractTestField<T, ?>> getTestFieldList();\n+\n+    @Test\n+    void allPropertiesAreCoveredByTheMarshaller() throws IOException {\n+        List<AbstractTestField<T, ?>> list = getTestFieldList();\n+\n+        T object = buildEmptyObject();\n+        list.forEach(td -> td.setValue(object));\n+\n+        MessageMarshaller.ProtoStreamWriter protoStreamWriter = mock(MessageMarshaller.ProtoStreamWriter.class);\n+        MessageMarshaller<T> marshaller = buildMarshaller();\n+        marshaller.writeTo(protoStreamWriter, object);\n+\n+        assertEquals(list.size(), mockingDetails(protoStreamWriter).getInvocations().size());\n+        for (AbstractTestField<T, ?> td : list) {\n+            td.verifyWriter(protoStreamWriter);\n+        }\n+    }\n+\n+    @Test\n+    void allPropertiesAreCoveredByTheUnmarshaller() throws IOException {\n+        List<AbstractTestField<T, ?>> list = getTestFieldList();\n+\n+        MessageMarshaller.ProtoStreamReader protoStreamReader = mock(MessageMarshaller.ProtoStreamReader.class);\n+        for (AbstractTestField<T, ?> td : list) {\n+            td.mockReader(protoStreamReader);\n+        }\n+\n+        MessageMarshaller<T> marshaller = buildMarshaller();\n+        T output = marshaller.readFrom(protoStreamReader);\n+\n+        assertEquals(list.size(), mockingDetails(protoStreamReader).getInvocations().size());\n+        list.forEach(td -> td.assertValue(output));\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8e50079f8950757627ce1da913154427cd483540"}, "originalPosition": 70}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e0e45d3935da9859a7d34051d1efe7ab2b95dca", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/3e0e45d3935da9859a7d34051d1efe7ab2b95dca", "committedDate": "2020-07-20T12:48:11Z", "message": "[KOGITO-2537] Add TraceEventConsumer to trusty-service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ab79287bbe7d975513e2b607dc9b08bdd291d8a", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/8ab79287bbe7d975513e2b607dc9b08bdd291d8a", "committedDate": "2020-07-20T12:48:11Z", "message": "[KOGITO-2537] Improve Decision model"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8124a69817bd78c986c3853952d4031a0ddb9651", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/8124a69817bd78c986c3853952d4031a0ddb9651", "committedDate": "2020-07-20T12:48:11Z", "message": "[KOGITO-2537] Extend Decision model"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d7692819171f08b05f54b1641c7c86e647e96c99", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/d7692819171f08b05f54b1641c7c86e647e96c99", "committedDate": "2020-07-20T12:48:11Z", "message": "[KOGITO-2537] Fix Decision inputs and outcomes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e71bcf926ee0c1eeca93210d3ff28e043c4ec72", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/1e71bcf926ee0c1eeca93210d3ff28e043c4ec72", "committedDate": "2020-07-20T12:48:11Z", "message": "[KOGITO-2537] Improve trusty-service APIs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "db3d3b1494bfa0b062505e71f9dc3a234f0b979f", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/db3d3b1494bfa0b062505e71f9dc3a234f0b979f", "committedDate": "2020-07-20T12:48:11Z", "message": "[KOGITO-2537] Fix enum serialization/deserialization"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "21feb448f1e44163ad6d9533225f7f8d86833e42", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/21feb448f1e44163ad6d9533225f7f8d86833e42", "committedDate": "2020-07-20T12:48:11Z", "message": "[KOGITO-2537] Improve trusty-service API tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89b3680903251d6d02b647a050164623c2bf8f7b", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/89b3680903251d6d02b647a050164623c2bf8f7b", "committedDate": "2020-07-20T12:48:11Z", "message": "[KOGITO-2537] Add TraceEventConsumerTest and TraceEventConverterTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "daae9948a813a1f4557d47cbbb313948c36afdc7", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/daae9948a813a1f4557d47cbbb313948c36afdc7", "committedDate": "2020-07-20T12:48:11Z", "message": "[KOGITO-2537] Reduce code smells"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57f4f7481d7bad4a9e7d4bd19b64fe3c6b7de812", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/57f4f7481d7bad4a9e7d4bd19b64fe3c6b7de812", "committedDate": "2020-07-20T12:48:11Z", "message": "[KOGITO-2537] Add @JsonProperty to trusty-service responses"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7da72e822c1f41a1f6d09ea2bc27dc81d78f095f", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/7da72e822c1f41a1f6d09ea2bc27dc81d78f095f", "committedDate": "2020-07-20T12:48:11Z", "message": "[KOGITO-2537] Minor fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7bf78f53f36120fd8db2e3669b5ae44edd73029", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/b7bf78f53f36120fd8db2e3669b5ae44edd73029", "committedDate": "2020-07-20T12:48:11Z", "message": "[KOGITO-2537] Move Message.Level to dedicated MessageLevel enum in trusty storage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4403137eca412d4d11355654bc5d175489efec7", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/a4403137eca412d4d11355654bc5d175489efec7", "committedDate": "2020-07-20T12:48:11Z", "message": "[KOGITO-2537] Improvements"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cce8e56c7714c827b390933abad839828b654eed", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/cce8e56c7714c827b390933abad839828b654eed", "committedDate": "2020-07-20T12:48:12Z", "message": "[KOGITO-2537] Improve tests of trusty-storage-infinispan"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b9881d91ec40dd43116bba88fee05b383604fc74", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/b9881d91ec40dd43116bba88fee05b383604fc74", "committedDate": "2020-07-20T12:48:12Z", "message": "[KOGITO-2537] Remove redundant MessageLevel enum from trusty-storage-api"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9bb87e3a5d907551cdf0008a35083911c4acd49d", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/9bb87e3a5d907551cdf0008a35083911c4acd49d", "committedDate": "2020-07-20T12:48:12Z", "message": "[KOGITO-2537] Add TraceEventConsumerIT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4d3b90432383b1f684410b38586e927a092163e", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/d4d3b90432383b1f684410b38586e927a092163e", "committedDate": "2020-07-20T12:48:12Z", "message": "[KOGITO-2537] Add testCloudEventWithErrors to TraceEventConsumerIT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0407a93a0460eaafb37bee3eedcb6d4549a872b2", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/0407a93a0460eaafb37bee3eedcb6d4549a872b2", "committedDate": "2020-07-20T12:48:12Z", "message": "[KOGITO-2537] Improve marshaller tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0da108c2eb252b326dab644da5aaf8f05cc07305", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/0da108c2eb252b326dab644da5aaf8f05cc07305", "committedDate": "2020-07-20T12:48:12Z", "message": "[KOGITO-2537] Add workaround for infinispan serialization error of Message model"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "511917ced9154ca3e704ceac1a142ef289775fc5", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/511917ced9154ca3e704ceac1a142ef289775fc5", "committedDate": "2020-07-20T12:48:12Z", "message": "[KOGITO-2537] Remove JSON test resources from trusty-service"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45102477f5a70e5e6b578f4813d99fa7d06c1c44", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/45102477f5a70e5e6b578f4813d99fa7d06c1c44", "committedDate": "2020-07-20T12:48:12Z", "message": "[KOGITO-2537] Static TraceEventConverter methods + improved TraceEventConsumerIT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7b20dbaaff90c77558a33059c9080cd6ee60fc5", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/e7b20dbaaff90c77558a33059c9080cd6ee60fc5", "committedDate": "2020-07-20T12:48:12Z", "message": "[KOGITO-2537] Log at error level in TraceEventConsumer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c4f20741e78246497ee1ae09e637b517dc0c2ebc", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/c4f20741e78246497ee1ae09e637b517dc0c2ebc", "committedDate": "2020-07-20T12:48:12Z", "message": "[KOGITO-2537] Fix TraceEventConsumerIT"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8e50079f8950757627ce1da913154427cd483540", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/8e50079f8950757627ce1da913154427cd483540", "committedDate": "2020-07-17T14:21:27Z", "message": "[KOGITO-2537] Log at error level in TraceEventConsumer"}, "afterCommit": {"oid": "c4f20741e78246497ee1ae09e637b517dc0c2ebc", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/c4f20741e78246497ee1ae09e637b517dc0c2ebc", "committedDate": "2020-07-20T12:48:12Z", "message": "[KOGITO-2537] Fix TraceEventConsumerIT"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUxNjc4Mjg4", "url": "https://github.com/kiegroup/kogito-apps/pull/294#pullrequestreview-451678288", "createdAt": "2020-07-20T14:47:18Z", "commit": {"oid": "c4f20741e78246497ee1ae09e637b517dc0c2ebc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDo0NzoxOFrOG0Q4Pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMFQxNDo0NzoxOFrOG0Q4Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzQ1NTY3OA==", "bodyText": "Just for my understanding: isnt't more readable to store the json TraceEvent in the resource and import it?", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r457455678", "createdAt": "2020-07-20T14:47:18Z", "author": {"login": "r00ta"}, "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/TrustyServiceTestUtils.java", "diffHunk": "@@ -0,0 +1,392 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service;\n+\n+import java.net.URI;\n+import java.net.URLEncoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.List;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import io.cloudevents.json.Json;\n+import io.cloudevents.v1.CloudEventImpl;\n+import org.kie.kogito.tracing.decision.event.CloudEventUtils;\n+import org.kie.kogito.tracing.decision.event.common.Message;\n+import org.kie.kogito.tracing.decision.event.common.MessageCategory;\n+import org.kie.kogito.tracing.decision.event.common.MessageExceptionField;\n+import org.kie.kogito.tracing.decision.event.common.MessageLevel;\n+import org.kie.kogito.tracing.decision.event.trace.TraceEvent;\n+import org.kie.kogito.tracing.decision.event.trace.TraceEventType;\n+import org.kie.kogito.tracing.decision.event.trace.TraceExecutionStep;\n+import org.kie.kogito.tracing.decision.event.trace.TraceExecutionStepType;\n+import org.kie.kogito.tracing.decision.event.trace.TraceHeader;\n+import org.kie.kogito.tracing.decision.event.trace.TraceInputValue;\n+import org.kie.kogito.tracing.decision.event.trace.TraceOutputValue;\n+import org.kie.kogito.tracing.decision.event.trace.TraceResourceId;\n+import org.kie.kogito.tracing.decision.event.trace.TraceType;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.DecisionOutcome;\n+import org.kie.kogito.trusty.storage.api.model.TypedValue;\n+\n+public class TrustyServiceTestUtils {\n+\n+    public static final String CORRECT_CLOUDEVENT_ID = \"82639415-ceb1-411a-b3c8-4832e6a82905\";\n+    public static final String CLOUDEVENT_WITH_ERRORS_ID = \"6f8f5a8b-5477-464c-b5d3-1e3ed399e0da\";\n+    public static final String CLOUDEVENT_WITH_NULL_FIELDS_ID = \"03c3db32-5b93-473f-a83d-39e661e2462e\";\n+    public static final String CLOUDEVENT_WITHOUT_DATA_ID = \"7dad3bf4-14cc-4c8e-aa3c-8f4598865142\";\n+\n+    private static final long CORRECT_CLOUDEVENT_START_TS = 1594105482568L;\n+    private static final long CORRECT_CLOUDEVENT_DURATION = 26L;\n+    private static final long CLOUDEVENT_WITH_ERRORS_START_TS = 1594136494308L;\n+    private static final long CLOUDEVENT_WITH_ERRORS_DURATION = 165L;\n+    private static final long CLOUDEVENT_WITH_NULL_FIELDS_START_TS = 1594136494408L;\n+    private static final long CLOUDEVENT_WITH_NULL_FIELDS_DURATION = 265L;\n+\n+    private static final String EVALUATION_STATUS_SKIPPED = \"SKIPPED\";\n+    private static final String EVALUATION_STATUS_SUCCEEDED = \"SUCCEEDED\";\n+\n+    private static final String MODEL_NAME = \"Traffic Violation\";\n+    private static final String MODEL_NAMESPACE = \"https://github.com/kiegroup/drools/kie-dmn/_A4BCA8B8-CF08-433F-93B2-A2598F19ECFF\";\n+\n+    private static final String EXCEPTION_CAUSE_CLASS_NAME = \"ExceptionCauseClass\";\n+    private static final String EXCEPTION_CAUSE_MESSAGE = \"Exception cause message\";\n+    private static final String EXCEPTION_CLASS_NAME = \"ExceptionClass\";\n+    private static final String EXCEPTION_MESSAGE = \"Exception message\";\n+    private static final String INPUT_DRIVER_JSON = \"{\\\"Age\\\": 25,\\\"Points\\\": 13}\";\n+    private static final String INPUT_DRIVER_NODE_ID = \"_1F9350D7-146D-46F1-85D8-15B5B68AF22A\";\n+    private static final String INPUT_DRIVER_NODE_NAME = \"Driver\";\n+    private static final String INPUT_VIOLATION_JSON = \"{\\\"Type\\\": \\\"speed\\\",\\\"Actual Speed\\\": 140,\\\"Speed Limit\\\": 100}\";\n+    private static final String INPUT_VIOLATION_NODE_ID = \"_1929CBD5-40E0-442D-B909-49CEDE0101DC\";\n+    private static final String INPUT_VIOLATION_NODE_NAME = \"Violation\";\n+    private static final MessageCategory MESSAGE_INFO_CATEGORY = MessageCategory.INTERNAL;\n+    private static final String MESSAGE_INFO_TEXT = \"This is a info test message\";\n+    private static final String MESSAGE_INFO_TYPE = \"INFO_TEST_MESSAGE\";\n+    private static final MessageCategory MESSAGE_ERROR_CATEGORY = MessageCategory.DMN;\n+    private static final String MESSAGE_ERROR_TEXT = \"DMN: Required dependency 'Driver' not found on node 'Should the driver be suspended?' (DMN id: _8A408366-D8E9-4626-ABF3-5F69AA01F880, The referenced node was not found) \";\n+    private static final String MESSAGE_ERROR_TYPE = \"REQ_NOT_FOUND\";\n+    private static final MessageCategory MESSAGE_WARNING_CATEGORY = MessageCategory.INTERNAL;\n+    private static final String MESSAGE_WARNING_TEXT = \"This is a warning test message\";\n+    private static final String MESSAGE_WARNING_TYPE = \"WARNING_TEST_MESSAGE\";\n+    private static final String OUTPUT_FINE_JSON = \"{\\\"Points\\\": 7,\\\"Amount\\\": 1000}\";\n+    private static final String OUTPUT_FINE_NODE_ID = \"_4055D956-1C47-479C-B3F4-BAEB61F1C929\";\n+    private static final String OUTPUT_FINE_NODE_NAME = \"Fine\";\n+    private static final String OUTPUT_SHOULD_THE_DRIVER_BE_SUSPENDED_JSON = \"\\\"Yes\\\"\";\n+    private static final String OUTPUT_SHOULD_THE_DRIVER_BE_SUSPENDED_NODE_ID = \"_8A408366-D8E9-4626-ABF3-5F69AA01F880\";\n+    private static final String OUTPUT_SHOULD_THE_DRIVER_BE_SUSPENDED_NODE_NAME = \"Should the driver be suspended?\";\n+    private static final String TYPE_DRIVER_NODE_ID = \"_63824D3F-9173-446D-A940-6A7F0FA056BB\";\n+    private static final String TYPE_FINE_NODE_ID = \"_2D4F30EE-21A6-4A78-A524-A5C238D433AE\";\n+    private static final String TYPE_VIOLATION_NODE_ID = \"_40731093-0642-4588-9183-1660FC55053B\";\n+\n+    private static final TraceResourceId trafficViolationResourceId = new TraceResourceId(MODEL_NAMESPACE, MODEL_NAME);\n+    private static final TraceType stringType = new TraceType(null, \"http://www.omg.org/spec/DMN/20180521/FEEL/\", \"string\");\n+    private static final TraceType tDriverType = new TraceType(TYPE_DRIVER_NODE_ID, MODEL_NAMESPACE, \"tDriver\");\n+    private static final TraceType tFineType = new TraceType(TYPE_FINE_NODE_ID, MODEL_NAMESPACE, \"tFine\");\n+    private static final TraceType tViolationType = new TraceType(TYPE_VIOLATION_NODE_ID, MODEL_NAMESPACE, \"tViolation\");\n+\n+    public static CloudEventImpl<TraceEvent> buildCloudEvent(TraceEvent traceEvent) {\n+        return CloudEventUtils.build(\n+                traceEvent.getHeader().getExecutionId(),\n+                URI.create(URLEncoder.encode(traceEvent.getHeader().getResourceId().getModelName(), StandardCharsets.UTF_8)),\n+                traceEvent\n+        );\n+    }\n+\n+    public static String buildCloudEventJsonString(TraceEvent traceEvent) {\n+        return CloudEventUtils.encode(buildCloudEvent(traceEvent));\n+    }\n+\n+    public static CloudEventImpl<TraceEvent> buildCloudEventWithoutData() {\n+        return CloudEventUtils.build(CLOUDEVENT_WITHOUT_DATA_ID, URI.create(URLEncoder.encode(MODEL_NAME, StandardCharsets.UTF_8)), null);\n+    }\n+\n+    public static String buildCloudEventWithoutDataJsonString() {\n+        return CloudEventUtils.encode(buildCloudEventWithoutData());\n+    }\n+\n+    public static TraceEvent buildCorrectTraceEvent() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4f20741e78246497ee1ae09e637b517dc0c2ebc"}, "originalPosition": 122}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMTc2NzQw", "url": "https://github.com/kiegroup/kogito-apps/pull/294#pullrequestreview-452176740", "createdAt": "2020-07-21T07:00:41Z", "commit": {"oid": "c4f20741e78246497ee1ae09e637b517dc0c2ebc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMTk0MzEy", "url": "https://github.com/kiegroup/kogito-apps/pull/294#pullrequestreview-452194312", "createdAt": "2020-07-21T07:28:38Z", "commit": {"oid": "c4f20741e78246497ee1ae09e637b517dc0c2ebc"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNzoyODozOFrOG0rifg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNzozMTowNVrOG0rncg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg5MjQ3OA==", "bodyText": "FYI I've created the following ticket to check if an uncaught RuntimeException will break the event loop https://issues.redhat.com/browse/KOGITO-2828", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r457892478", "createdAt": "2020-07-21T07:28:38Z", "author": {"login": "r00ta"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/TraceEventConsumer.java", "diffHunk": "@@ -0,0 +1,83 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.messaging;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import io.cloudevents.v1.AttributesImpl;\n+import io.cloudevents.v1.CloudEventImpl;\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.kie.kogito.tracing.decision.event.CloudEventUtils;\n+import org.kie.kogito.tracing.decision.event.trace.TraceEvent;\n+import org.kie.kogito.tracing.decision.event.trace.TraceEventType;\n+import org.kie.kogito.trusty.service.ITrustyService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class TraceEventConsumer {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(TraceEventConsumer.class);\n+\n+    private final ITrustyService service;\n+\n+    @Inject\n+    public TraceEventConsumer(ITrustyService service) {\n+        this.service = service;\n+    }\n+\n+    @Incoming(\"kogito-tracing\")\n+    public CompletionStage<Void> handleMessage(Message<String> message) {\n+        decodeCloudEvent(message.getPayload()).ifPresent(this::handleCloudEvent);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4f20741e78246497ee1ae09e637b517dc0c2ebc"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg5MzY4Mg==", "bodyText": "Add space?", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r457893682", "createdAt": "2020-07-21T07:30:58Z", "author": {"login": "r00ta"}, "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/messaging/TraceEventConsumerIT.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.messaging;\n+\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.inject.Inject;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.vertx.core.Vertx;\n+import io.vertx.kafka.client.producer.KafkaProducer;\n+import io.vertx.kafka.client.producer.KafkaProducerRecord;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.trusty.service.TrustyInfinispanServerTestResource;\n+import org.kie.kogito.trusty.service.TrustyKafkaTestResource;\n+import org.kie.kogito.trusty.service.TrustyService;\n+import org.kie.kogito.trusty.storage.api.TrustyStorageService;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.kie.kogito.trusty.service.TrustyServiceTestUtils.CLOUDEVENT_WITH_ERRORS_ID;\n+import static org.kie.kogito.trusty.service.TrustyServiceTestUtils.CORRECT_CLOUDEVENT_ID;\n+import static org.kie.kogito.trusty.service.TrustyServiceTestUtils.buildCloudEventJsonString;\n+import static org.kie.kogito.trusty.service.TrustyServiceTestUtils.buildCorrectDecision;\n+import static org.kie.kogito.trusty.service.TrustyServiceTestUtils.buildCorrectTraceEvent;\n+import static org.kie.kogito.trusty.service.TrustyServiceTestUtils.buildDecisionWithErrors;\n+import static org.kie.kogito.trusty.service.TrustyServiceTestUtils.buildTraceEventWithErrors;\n+\n+@QuarkusTest\n+@QuarkusTestResource(TrustyInfinispanServerTestResource.class)\n+@QuarkusTestResource(TrustyKafkaTestResource.class)\n+class TraceEventConsumerIT {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(TraceEventConsumerIT.class);\n+\n+    @Inject\n+    TraceEventConsumer traceEventConsumer;\n+    @Inject", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4f20741e78246497ee1ae09e637b517dc0c2ebc"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg5Mzc0Ng==", "bodyText": "Add space?", "url": "https://github.com/kiegroup/kogito-apps/pull/294#discussion_r457893746", "createdAt": "2020-07-21T07:31:05Z", "author": {"login": "r00ta"}, "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/messaging/TraceEventConsumerIT.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.messaging;\n+\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.TimeUnit;\n+\n+import javax.inject.Inject;\n+\n+import io.quarkus.test.common.QuarkusTestResource;\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.vertx.core.Vertx;\n+import io.vertx.kafka.client.producer.KafkaProducer;\n+import io.vertx.kafka.client.producer.KafkaProducerRecord;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.trusty.service.TrustyInfinispanServerTestResource;\n+import org.kie.kogito.trusty.service.TrustyKafkaTestResource;\n+import org.kie.kogito.trusty.service.TrustyService;\n+import org.kie.kogito.trusty.storage.api.TrustyStorageService;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.kie.kogito.trusty.service.TrustyServiceTestUtils.CLOUDEVENT_WITH_ERRORS_ID;\n+import static org.kie.kogito.trusty.service.TrustyServiceTestUtils.CORRECT_CLOUDEVENT_ID;\n+import static org.kie.kogito.trusty.service.TrustyServiceTestUtils.buildCloudEventJsonString;\n+import static org.kie.kogito.trusty.service.TrustyServiceTestUtils.buildCorrectDecision;\n+import static org.kie.kogito.trusty.service.TrustyServiceTestUtils.buildCorrectTraceEvent;\n+import static org.kie.kogito.trusty.service.TrustyServiceTestUtils.buildDecisionWithErrors;\n+import static org.kie.kogito.trusty.service.TrustyServiceTestUtils.buildTraceEventWithErrors;\n+\n+@QuarkusTest\n+@QuarkusTestResource(TrustyInfinispanServerTestResource.class)\n+@QuarkusTestResource(TrustyKafkaTestResource.class)\n+class TraceEventConsumerIT {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(TraceEventConsumerIT.class);\n+\n+    @Inject\n+    TraceEventConsumer traceEventConsumer;\n+    @Inject\n+    TrustyService trustyService;\n+    @Inject", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c4f20741e78246497ee1ae09e637b517dc0c2ebc"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57c20148502494fddf9da01a8575f6089e1c6b5b", "author": {"user": {"login": "kostola", "name": "Alessandro Costa"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/57c20148502494fddf9da01a8575f6089e1c6b5b", "committedDate": "2020-07-21T08:12:50Z", "message": "[KOGITO-2537] Infinispan marshaller tests check for uncovered fields"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMzA4NDYy", "url": "https://github.com/kiegroup/kogito-apps/pull/294#pullrequestreview-452308462", "createdAt": "2020-07-21T10:01:38Z", "commit": {"oid": "57c20148502494fddf9da01a8575f6089e1c6b5b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4847, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}