{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4NTQ5OTQ4", "number": 476, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMTowNTo1MlrOEq-Tvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMTowNTo1MlrOEq-Tvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNDk2NTExOnYy", "diffSide": "RIGHT", "path": "persistence-commons/persistence-commons-infinispan/src/main/java/org/kie/kogito/persistence/infinispan/query/InfinispanQuery.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwMTowNTo1MlrOHdfCRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNzoxNTo0OVrOHdlpJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3OTIzNg==", "bodyText": "perhaps change to, that way you can remove the outer strings.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .collect(joining(joining)) + \")\";\n          \n          \n            \n                            .collect(joining(joining, \"(\", \")\")) + \")\";", "url": "https://github.com/kiegroup/kogito-apps/pull/476#discussion_r500679236", "createdAt": "2020-10-07T01:05:52Z", "author": {"login": "cristianonicolai"}, "path": "persistence-commons/persistence-commons-infinispan/src/main/java/org/kie/kogito/persistence/infinispan/query/InfinispanQuery.java", "diffHunk": "@@ -145,6 +145,9 @@ protected InfinispanQuery(QueryFactory qf, String rootType) {\n     }\n \n     private String getRecursiveString(AttributeFilter<?> filter, String joining) {\n-        return ((List<AttributeFilter<?>>) filter.getValue()).stream().map(filterStringFunction()).collect(joining(joining));\n+        return \"(\" + ((List<AttributeFilter<?>>) filter.getValue())\n+                .stream()\n+                .map(filterStringFunction())\n+                .collect(joining(joining)) + \")\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8212cc759c05792f7b51da3b7a0921545d4bf98e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDc4NzQ5Mg==", "bodyText": "good catch @cristianonicolai", "url": "https://github.com/kiegroup/kogito-apps/pull/476#discussion_r500787492", "createdAt": "2020-10-07T07:15:49Z", "author": {"login": "pefernan"}, "path": "persistence-commons/persistence-commons-infinispan/src/main/java/org/kie/kogito/persistence/infinispan/query/InfinispanQuery.java", "diffHunk": "@@ -145,6 +145,9 @@ protected InfinispanQuery(QueryFactory qf, String rootType) {\n     }\n \n     private String getRecursiveString(AttributeFilter<?> filter, String joining) {\n-        return ((List<AttributeFilter<?>>) filter.getValue()).stream().map(filterStringFunction()).collect(joining(joining));\n+        return \"(\" + ((List<AttributeFilter<?>>) filter.getValue())\n+                .stream()\n+                .map(filterStringFunction())\n+                .collect(joining(joining)) + \")\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDY3OTIzNg=="}, "originalCommit": {"oid": "8212cc759c05792f7b51da3b7a0921545d4bf98e"}, "originalPosition": 8}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 750, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}