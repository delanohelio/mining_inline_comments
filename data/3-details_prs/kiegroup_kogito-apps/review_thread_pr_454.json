{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg2NjM2MjU3", "number": 454, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNjo1MDoxMFrOEjrmGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNjo1MDoxMFrOEjrmGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1ODQ5ODgxOnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Type.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNVQxNjo1MDoxMFrOHSK5-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNlQwNTo0NjowM1rOHSg_xQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgxNTA5OA==", "bodyText": "This line seems to me the only difference of this code compared to the other changed method. Can you please refactor to a static utility method?\nI expect it should be possible to create a method that accepts List<Feature> inputFeatures and PerturbationContext perturbationContext and returns List<Feature>", "url": "https://github.com/kiegroup/kogito-apps/pull/454#discussion_r488815098", "createdAt": "2020-09-15T16:50:10Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Type.java", "diffHunk": "@@ -314,12 +314,26 @@\n             List<Feature> composite = getFeatures(value);\n             List<Feature> newList = new ArrayList<>(composite);\n             if (!newList.isEmpty()) {\n-                int[] indexesToBePerturbed = perturbationContext.getRandom().ints(0, composite.size())\n-                        .distinct().limit(Math.min(perturbationContext.getNoOfPerturbations(), composite.size())).toArray();\n-                for (int index : indexesToBePerturbed) {\n-                    Feature cf = composite.get(index);\n-                    Feature f = FeatureFactory.copyOf(cf, cf.getType().perturb(cf.getValue(), perturbationContext));\n-                    newList.set(index, f);\n+                // perturb at most in the range [|features|/2), noOfPerturbations]\n+                int lowerBound = (int) Math.min(perturbationContext.getNoOfPerturbations(), 0.5d * composite.size());\n+                int upperBound = (int) Math.max(perturbationContext.getNoOfPerturbations(), 0.5d * composite.size());\n+                upperBound = Math.min(upperBound, composite.size() - 1);\n+                lowerBound = Math.max(1, lowerBound); // lower bound should always greater than zero (not ok to not perturb)\n+                int perturbationSize = 0;\n+                if (lowerBound == upperBound) {\n+                    perturbationSize = lowerBound;\n+                }\n+                else if (upperBound > lowerBound) {\n+                    perturbationSize = perturbationContext.getRandom().ints(lowerBound, 1 + upperBound).findFirst().orElse(1);\n+                }\n+                if (perturbationSize > 0) {\n+                    int[] indexesToBePerturbed = perturbationContext.getRandom().ints(1, newList.size())\n+                            .distinct().limit(perturbationSize).toArray();\n+                    for (int index : indexesToBePerturbed) {\n+                        Feature cf = composite.get(index);\n+                        Feature f = FeatureFactory.copyOf(cf, cf.getType().perturb(cf.getValue(), perturbationContext));\n+                        newList.set(index, f);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dcf7f5458e96fa7f55e0de5e1e2f31793586468d"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4OTE3NzAyOQ==", "bodyText": "sure, it makes sense to refactor it in a utility method.", "url": "https://github.com/kiegroup/kogito-apps/pull/454#discussion_r489177029", "createdAt": "2020-09-16T05:46:03Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Type.java", "diffHunk": "@@ -314,12 +314,26 @@\n             List<Feature> composite = getFeatures(value);\n             List<Feature> newList = new ArrayList<>(composite);\n             if (!newList.isEmpty()) {\n-                int[] indexesToBePerturbed = perturbationContext.getRandom().ints(0, composite.size())\n-                        .distinct().limit(Math.min(perturbationContext.getNoOfPerturbations(), composite.size())).toArray();\n-                for (int index : indexesToBePerturbed) {\n-                    Feature cf = composite.get(index);\n-                    Feature f = FeatureFactory.copyOf(cf, cf.getType().perturb(cf.getValue(), perturbationContext));\n-                    newList.set(index, f);\n+                // perturb at most in the range [|features|/2), noOfPerturbations]\n+                int lowerBound = (int) Math.min(perturbationContext.getNoOfPerturbations(), 0.5d * composite.size());\n+                int upperBound = (int) Math.max(perturbationContext.getNoOfPerturbations(), 0.5d * composite.size());\n+                upperBound = Math.min(upperBound, composite.size() - 1);\n+                lowerBound = Math.max(1, lowerBound); // lower bound should always greater than zero (not ok to not perturb)\n+                int perturbationSize = 0;\n+                if (lowerBound == upperBound) {\n+                    perturbationSize = lowerBound;\n+                }\n+                else if (upperBound > lowerBound) {\n+                    perturbationSize = perturbationContext.getRandom().ints(lowerBound, 1 + upperBound).findFirst().orElse(1);\n+                }\n+                if (perturbationSize > 0) {\n+                    int[] indexesToBePerturbed = perturbationContext.getRandom().ints(1, newList.size())\n+                            .distinct().limit(perturbationSize).toArray();\n+                    for (int index : indexesToBePerturbed) {\n+                        Feature cf = composite.get(index);\n+                        Feature f = FeatureFactory.copyOf(cf, cf.getType().perturb(cf.getValue(), perturbationContext));\n+                        newList.set(index, f);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODgxNTA5OA=="}, "originalCommit": {"oid": "dcf7f5458e96fa7f55e0de5e1e2f31793586468d"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 709, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}