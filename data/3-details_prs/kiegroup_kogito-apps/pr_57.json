{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5NDI3NDE0", "number": 57, "title": "KOGITO-452 Domain Explorer Version-1", "bodyText": "", "createdAt": "2020-01-31T06:12:28Z", "url": "https://github.com/kiegroup/kogito-apps/pull/57", "merged": true, "mergeCommit": {"oid": "7ee70ecb2824719e983b13aab2d77474a808c6f0"}, "closed": true, "closedAt": "2020-02-20T04:13:14Z", "author": {"login": "Sara4994"}, "timelineItems": {"totalCount": 46, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_r1OsgBqjI5OTY0MTI3MTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcGC514gFqTM2MTYxODAyNA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3a494be7b94bb0d45b5284e868460004d93fbe25", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/3a494be7b94bb0d45b5284e868460004d93fbe25", "committedDate": "2020-01-31T06:08:27Z", "message": "KOGITO-452 Domain Explorer Version-1"}, "afterCommit": {"oid": "a773eb75be265ae125459de5a73b61a912959624", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/a773eb75be265ae125459de5a73b61a912959624", "committedDate": "2020-01-31T09:35:39Z", "message": "KOGITO-452 Domain Explorer Version-1"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a773eb75be265ae125459de5a73b61a912959624", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/a773eb75be265ae125459de5a73b61a912959624", "committedDate": "2020-01-31T09:35:39Z", "message": "KOGITO-452 Domain Explorer Version-1"}, "afterCommit": {"oid": "b70ae1dd4faa02a8c624b22b479c519e57878d54", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/b70ae1dd4faa02a8c624b22b479c519e57878d54", "committedDate": "2020-01-31T10:09:50Z", "message": "KOGITO-452 Domain Explorer Version-1"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ddea9995700844ddfd885e4d2641d2f1cdf8f3ec", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-apps/commit/ddea9995700844ddfd885e4d2641d2f1cdf8f3ec", "committedDate": "2020-02-10T05:59:58Z", "message": "KOGITO-452 Domain Explorer Version-1"}, "afterCommit": {"oid": "c09b0832506e2c230094d464772832d596ce9ad8", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/c09b0832506e2c230094d464772832d596ce9ad8", "committedDate": "2020-02-10T06:03:10Z", "message": "KOGITO-452 Domain Explorer Version-1"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU2NDYwNDEz", "url": "https://github.com/kiegroup/kogito-apps/pull/57#pullrequestreview-356460413", "createdAt": "2020-02-11T07:52:20Z", "commit": {"oid": "c09b0832506e2c230094d464772832d596ce9ad8"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNzo1MjoyMFrOFn_pKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODowMzowN1rOFn_2EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4MTUxNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      aria-label=\"Filterable Table Demo\"\n          \n          \n            \n                      aria-label=\"Domain Explorer Table\"", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r377481514", "createdAt": "2020-02-11T07:52:20Z", "author": {"login": "cristianonicolai"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -0,0 +1,91 @@\n+import React from 'react';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import {\n+  Title,\n+  EmptyState,\n+  EmptyStateIcon,\n+  EmptyStateBody,\n+  EmptyStateSecondaryActions,\n+  Bullseye,\n+  Button\n+} from '@patternfly/react-core';\n+import { SearchIcon } from '@patternfly/react-icons';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+\n+const DomainExplorerTable = ({ columnFilters, tableLoading, displayTable }) => {\n+  const getKeys = object => {\n+    const iter = (data, k = '') => {\n+      // tslint:disable-next-line: forin\n+      for (const i in data) {\n+        const rest = k.length ? ' > ' + i : i;\n+        if (typeof data[i] === 'object') {\n+          if (!Array.isArray(data[i])) {\n+            iter(data[i], k + rest);\n+          }\n+        } else {\n+          !tempKeys.includes(k + rest) && tempKeys.push(k + rest);\n+          if (rest.hasOwnProperty) {\n+            tempValue.push(data[i]);\n+          }\n+        }\n+      }\n+    };\n+    const tempKeys = [];\n+    const tempValue = [];\n+    iter(object);\n+    return { tempKeys, tempValue };\n+  };\n+  const firstKey = Object.keys(columnFilters)[0];\n+  const tableContent = columnFilters[firstKey];\n+\n+  const keys = [];\n+  const values = [];\n+  if (tableContent) {\n+    const finalResult = tableContent.map(item => getKeys(item));\n+    finalResult.map(result => {\n+      keys.push(result.tempKeys);\n+      values.push({ cells: result.tempValue });\n+    });\n+    const rowObject: any = {};\n+    if (tableLoading) {\n+      rowObject.cells = [\n+        {\n+          props: { colSpan: 8 },\n+          title: (\n+            <Bullseye>\n+              <SpinnerComponent spinnerText=\"Loading Domain Explorer...\" />\n+            </Bullseye>\n+          )\n+        }\n+      ];\n+      values.push(rowObject);\n+    }\n+  }\n+  const finalKeys = keys[0];\n+\n+  const onRowSelect = (event, isSelected, rowId) => {\n+    return null;\n+  };\n+\n+  const onDelete = (type = '', id = '') => {\n+    return null;\n+  };\n+\n+  return (\n+    <React.Fragment>\n+      {displayTable && (\n+        <Table\n+          cells={finalKeys}\n+          rows={values}\n+          onSelect={onRowSelect}\n+          aria-label=\"Filterable Table Demo\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09b0832506e2c230094d464772832d596ce9ad8"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4MzQ0OQ==", "bodyText": "please remove comment out code.", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r377483449", "createdAt": "2020-02-11T07:58:21Z", "author": {"login": "cristianonicolai"}, "path": "packages/management-console/src/components/Templates/DashboardComponent/Dashboard.tsx", "diffHunk": "@@ -1,24 +1,69 @@\n-import { Page, SkipToContent } from '@patternfly/react-core';\n-import React from 'react';\n-import { Redirect, Route } from 'react-router-dom';\n-import HeaderComponent from '../../Organisms/PageHeaderComponent/HeaderComponent';\n+import {\n+  Page,\n+  SkipToContent,\n+  PageSidebar,\n+  PageHeader,\n+  Nav,\n+  NavList,\n+  NavItem\n+} from '@patternfly/react-core';\n+import React, { useState } from 'react';\n+import { Redirect, Route, Link } from 'react-router-dom';\n+// import HeaderComponent from '../../Organisms/PageHeaderComponent/HeaderComponent';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09b0832506e2c230094d464772832d596ce9ad8"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4MzcxNA==", "bodyText": "@Sara4994 can we remote the check box column from this version?", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r377483714", "createdAt": "2020-02-11T07:59:13Z", "author": {"login": "cristianonicolai"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -0,0 +1,91 @@\n+import React from 'react';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import {\n+  Title,\n+  EmptyState,\n+  EmptyStateIcon,\n+  EmptyStateBody,\n+  EmptyStateSecondaryActions,\n+  Bullseye,\n+  Button\n+} from '@patternfly/react-core';\n+import { SearchIcon } from '@patternfly/react-icons';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+\n+const DomainExplorerTable = ({ columnFilters, tableLoading, displayTable }) => {\n+  const getKeys = object => {\n+    const iter = (data, k = '') => {\n+      // tslint:disable-next-line: forin\n+      for (const i in data) {\n+        const rest = k.length ? ' > ' + i : i;\n+        if (typeof data[i] === 'object') {\n+          if (!Array.isArray(data[i])) {\n+            iter(data[i], k + rest);\n+          }\n+        } else {\n+          !tempKeys.includes(k + rest) && tempKeys.push(k + rest);\n+          if (rest.hasOwnProperty) {\n+            tempValue.push(data[i]);\n+          }\n+        }\n+      }\n+    };\n+    const tempKeys = [];\n+    const tempValue = [];\n+    iter(object);\n+    return { tempKeys, tempValue };\n+  };\n+  const firstKey = Object.keys(columnFilters)[0];\n+  const tableContent = columnFilters[firstKey];\n+\n+  const keys = [];\n+  const values = [];\n+  if (tableContent) {\n+    const finalResult = tableContent.map(item => getKeys(item));\n+    finalResult.map(result => {\n+      keys.push(result.tempKeys);\n+      values.push({ cells: result.tempValue });\n+    });\n+    const rowObject: any = {};\n+    if (tableLoading) {\n+      rowObject.cells = [\n+        {\n+          props: { colSpan: 8 },\n+          title: (\n+            <Bullseye>\n+              <SpinnerComponent spinnerText=\"Loading Domain Explorer...\" />\n+            </Bullseye>\n+          )\n+        }\n+      ];\n+      values.push(rowObject);\n+    }\n+  }\n+  const finalKeys = keys[0];\n+\n+  const onRowSelect = (event, isSelected, rowId) => {\n+    return null;\n+  };\n+\n+  const onDelete = (type = '', id = '') => {\n+    return null;\n+  };\n+\n+  return (\n+    <React.Fragment>\n+      {displayTable && (\n+        <Table\n+          cells={finalKeys}\n+          rows={values}\n+          onSelect={onRowSelect}\n+          aria-label=\"Filterable Table Demo\"\n+        >\n+          <TableHeader />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09b0832506e2c230094d464772832d596ce9ad8"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4NDM3NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  const label = title + '>' + attr.join();\n          \n          \n            \n                  const label = title + ' > ' + attr.join();\n          \n      \n    \n    \n  \n\njust adding a extra space here, before and after the string.", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r377484375", "createdAt": "2020-02-11T08:01:35Z", "author": {"login": "cristianonicolai"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerColumnPicker/DomainExplorerColumnPicker.tsx", "diffHunk": "@@ -0,0 +1,239 @@\n+import React, { useState } from 'react';\n+import { useQuery } from '@apollo/react-hooks';\n+import {\n+  Select,\n+  SelectOption,\n+  SelectVariant,\n+  SelectGroup,\n+  Button,\n+  Grid,\n+  GridItem\n+} from '@patternfly/react-core';\n+import { query } from 'gql-query-builder';\n+import axios from 'axios';\n+import _ from 'lodash';\n+import { useGetPickerQuery } from '../../../graphql/types';\n+\n+export interface IOwnProps {\n+  columnPickerType: any;\n+  setColumnFilters: any;\n+  setTableLoading: any;\n+  getQueryTypes: any;\n+  setDisplayTable: any;\n+}\n+\n+const DomainExplorerColumnPicker: React.FC<IOwnProps> = ({\n+  columnPickerType,\n+  setColumnFilters,\n+  setTableLoading,\n+  getQueryTypes,\n+  setDisplayTable\n+}) => {\n+  const [selected, setSelected] = useState([]);\n+  const [isExpanded, setIsExpanded] = useState(false);\n+  const [parameters, setParameters] = useState([]);\n+\n+  const nullTypes = [null, 'String', 'Boolean', 'Int', 'DateTime'];\n+  const onSelect = (event, selection) => {\n+    if (selected.includes(selection)) {\n+      setSelected(prevState => prevState.filter(item => item !== selection));\n+      const innerText = event.nativeEvent.target.nextSibling.innerText;\n+      const rest = filterColumnSelection(event, innerText);\n+      setParameters(prevState =>\n+        prevState.filter(obj => {\n+          if (!_.isEqual(obj, rest)) {\n+            return obj;\n+          }\n+        })\n+      );\n+    } else {\n+      setSelected(prevState => [...prevState, selection]);\n+      const innerText = event.nativeEvent.target.nextSibling.innerText;\n+      const rest = filterColumnSelection(event, innerText);\n+      setParameters(prevState => [...prevState, rest]);\n+    }\n+  };\n+\n+  const filterColumnSelection = (event, selection) => {\n+    const parent = event.nativeEvent.target.parentElement.parentElement.getAttribute(\n+      'aria-labelledby'\n+    );\n+    let res = {};\n+    const tempParents = parent.split('-');\n+\n+    for (let i = tempParents.length - 1; i >= 0; i--) {\n+      if (i === tempParents.length - 1) {\n+        res = { [tempParents[i]]: [selection] }; // assign the value\n+      } else {\n+        res = { [tempParents[i]]: [res] }; // put the prev object\n+      }\n+    }\n+    return res;\n+  };\n+  const onToggle = _isExpanded => {\n+    setIsExpanded(_isExpanded);\n+  };\n+\n+  const getPicker = useGetPickerQuery({\n+    variables: { columnPickerType }\n+  });\n+\n+  async function generateQuery() {\n+    try {\n+      await axios\n+        .post(\n+          'http://localhost:4000/graphql',\n+          query({\n+            operation: columnPickerType,\n+            fields: parameters\n+          })\n+        )\n+        .then(response => {\n+          setTableLoading(false);\n+          setColumnFilters(response.data.data);\n+          setDisplayTable(true);\n+          return response;\n+        });\n+    } catch (error) {\n+      return error;\n+    }\n+  }\n+\n+  const data = [];\n+  !getPicker.loading &&\n+    getPicker.data.__type &&\n+    getPicker.data.__type.fields.filter(i => {\n+      if (i.type.kind !== 'SCALAR') {\n+        return data.push(i);\n+      }\n+    });\n+  const fetchSchema = option => {\n+    return (\n+      !getQueryTypes.loading &&\n+      getQueryTypes.data.__schema &&\n+      getQueryTypes.data.__schema.queryType.find(item => {\n+        if (item.name === option.type.name) {\n+          return item;\n+        }\n+      })\n+    );\n+  };\n+\n+  let b;\n+  let finalResult: any = [];\n+  let a: any;\n+\n+  const childSelectionItems = (_data, title, ...attr) => {\n+    let nestedTitles = '';\n+    b = _data.map(group => {\n+      const label = title + '>' + attr.join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09b0832506e2c230094d464772832d596ce9ad8"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4NDgxNw==", "bodyText": "should we create a new query type for this? That would probably avoid having the data index URL in here as well.", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r377484817", "createdAt": "2020-02-11T08:03:07Z", "author": {"login": "cristianonicolai"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerColumnPicker/DomainExplorerColumnPicker.tsx", "diffHunk": "@@ -0,0 +1,239 @@\n+import React, { useState } from 'react';\n+import { useQuery } from '@apollo/react-hooks';\n+import {\n+  Select,\n+  SelectOption,\n+  SelectVariant,\n+  SelectGroup,\n+  Button,\n+  Grid,\n+  GridItem\n+} from '@patternfly/react-core';\n+import { query } from 'gql-query-builder';\n+import axios from 'axios';\n+import _ from 'lodash';\n+import { useGetPickerQuery } from '../../../graphql/types';\n+\n+export interface IOwnProps {\n+  columnPickerType: any;\n+  setColumnFilters: any;\n+  setTableLoading: any;\n+  getQueryTypes: any;\n+  setDisplayTable: any;\n+}\n+\n+const DomainExplorerColumnPicker: React.FC<IOwnProps> = ({\n+  columnPickerType,\n+  setColumnFilters,\n+  setTableLoading,\n+  getQueryTypes,\n+  setDisplayTable\n+}) => {\n+  const [selected, setSelected] = useState([]);\n+  const [isExpanded, setIsExpanded] = useState(false);\n+  const [parameters, setParameters] = useState([]);\n+\n+  const nullTypes = [null, 'String', 'Boolean', 'Int', 'DateTime'];\n+  const onSelect = (event, selection) => {\n+    if (selected.includes(selection)) {\n+      setSelected(prevState => prevState.filter(item => item !== selection));\n+      const innerText = event.nativeEvent.target.nextSibling.innerText;\n+      const rest = filterColumnSelection(event, innerText);\n+      setParameters(prevState =>\n+        prevState.filter(obj => {\n+          if (!_.isEqual(obj, rest)) {\n+            return obj;\n+          }\n+        })\n+      );\n+    } else {\n+      setSelected(prevState => [...prevState, selection]);\n+      const innerText = event.nativeEvent.target.nextSibling.innerText;\n+      const rest = filterColumnSelection(event, innerText);\n+      setParameters(prevState => [...prevState, rest]);\n+    }\n+  };\n+\n+  const filterColumnSelection = (event, selection) => {\n+    const parent = event.nativeEvent.target.parentElement.parentElement.getAttribute(\n+      'aria-labelledby'\n+    );\n+    let res = {};\n+    const tempParents = parent.split('-');\n+\n+    for (let i = tempParents.length - 1; i >= 0; i--) {\n+      if (i === tempParents.length - 1) {\n+        res = { [tempParents[i]]: [selection] }; // assign the value\n+      } else {\n+        res = { [tempParents[i]]: [res] }; // put the prev object\n+      }\n+    }\n+    return res;\n+  };\n+  const onToggle = _isExpanded => {\n+    setIsExpanded(_isExpanded);\n+  };\n+\n+  const getPicker = useGetPickerQuery({\n+    variables: { columnPickerType }\n+  });\n+\n+  async function generateQuery() {\n+    try {\n+      await axios\n+        .post(\n+          'http://localhost:4000/graphql',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09b0832506e2c230094d464772832d596ce9ad8"}, "originalPosition": 85}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c09b0832506e2c230094d464772832d596ce9ad8", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/c09b0832506e2c230094d464772832d596ce9ad8", "committedDate": "2020-02-10T06:03:10Z", "message": "KOGITO-452 Domain Explorer Version-1"}, "afterCommit": {"oid": "26e983a05c08294eef6700819542fb72e8b0f377", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/26e983a05c08294eef6700819542fb72e8b0f377", "committedDate": "2020-02-11T09:46:00Z", "message": "KOGITO-452 Domain Explorer Version-1"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "26e983a05c08294eef6700819542fb72e8b0f377", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/26e983a05c08294eef6700819542fb72e8b0f377", "committedDate": "2020-02-11T09:46:00Z", "message": "KOGITO-452 Domain Explorer Version-1"}, "afterCommit": {"oid": "16f3e650212e3164ffd5ba3508123da4ea7c71a4", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/16f3e650212e3164ffd5ba3508123da4ea7c71a4", "committedDate": "2020-02-11T09:48:22Z", "message": "KOGITO-452 Domain Explorer Version-1"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "16f3e650212e3164ffd5ba3508123da4ea7c71a4", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/16f3e650212e3164ffd5ba3508123da4ea7c71a4", "committedDate": "2020-02-11T09:48:22Z", "message": "KOGITO-452 Domain Explorer Version-1"}, "afterCommit": {"oid": "540cf297a1993c39b0d542712a923fec88195db6", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/540cf297a1993c39b0d542712a923fec88195db6", "committedDate": "2020-02-11T09:59:09Z", "message": "KOGITO-452 Domain Explorer Version-1"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "20bdd5d94db0c52ddfc9dde16da2a91a1eddec27", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-apps/commit/20bdd5d94db0c52ddfc9dde16da2a91a1eddec27", "committedDate": "2020-02-12T08:45:00Z", "message": "KOGITO-452 DomainExplorer Version-1"}, "afterCommit": {"oid": "219819bfb9e19317db84c7796178126ff26d8d21", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/219819bfb9e19317db84c7796178126ff26d8d21", "committedDate": "2020-02-12T08:48:53Z", "message": "KOGITO-452 Domain Explorer Version-1"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "219819bfb9e19317db84c7796178126ff26d8d21", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/219819bfb9e19317db84c7796178126ff26d8d21", "committedDate": "2020-02-12T08:48:53Z", "message": "KOGITO-452 Domain Explorer Version-1"}, "afterCommit": {"oid": "29105af513edc25bab9873b1893213048e8b0398", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/29105af513edc25bab9873b1893213048e8b0398", "committedDate": "2020-02-12T08:53:08Z", "message": "KOGITO-452 Domain Explorer Version-1"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "29105af513edc25bab9873b1893213048e8b0398", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/29105af513edc25bab9873b1893213048e8b0398", "committedDate": "2020-02-12T08:53:08Z", "message": "KOGITO-452 Domain Explorer Version-1"}, "afterCommit": {"oid": "68fd72d67d2021733224870e2eed6fe8620adefe", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/68fd72d67d2021733224870e2eed6fe8620adefe", "committedDate": "2020-02-13T09:53:10Z", "message": "KOGITO-452 Domain Explorer Version-1"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "68fd72d67d2021733224870e2eed6fe8620adefe", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/68fd72d67d2021733224870e2eed6fe8620adefe", "committedDate": "2020-02-13T09:53:10Z", "message": "KOGITO-452 Domain Explorer Version-1"}, "afterCommit": {"oid": "215fc61fa3696d00f0055f3f09959747f0d4dc5c", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/215fc61fa3696d00f0055f3f09959747f0d4dc5c", "committedDate": "2020-02-13T12:11:41Z", "message": "KOGITO-452 Domain Explorer Version-1"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "215fc61fa3696d00f0055f3f09959747f0d4dc5c", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/215fc61fa3696d00f0055f3f09959747f0d4dc5c", "committedDate": "2020-02-13T12:11:41Z", "message": "KOGITO-452 Domain Explorer Version-1"}, "afterCommit": {"oid": "69c7f0f56f1814487d3e88601a6d3398d52e0354", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/69c7f0f56f1814487d3e88601a6d3398d52e0354", "committedDate": "2020-02-13T18:02:20Z", "message": "KOGITO-452 Domain Explorer Version-1"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4NzI0MTM3", "url": "https://github.com/kiegroup/kogito-apps/pull/57#pullrequestreview-358724137", "createdAt": "2020-02-14T05:50:30Z", "commit": {"oid": "69c7f0f56f1814487d3e88601a6d3398d52e0354"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwNTo1MDozMVrOFpsNug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwNzowNDo0NlrOFptO6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI2MDM0Ng==", "bodyText": "perhaps give a more intutive name for variables a and b :)", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r379260346", "createdAt": "2020-02-14T05:50:31Z", "author": {"login": "cristianonicolai"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerColumnPicker/DomainExplorerColumnPicker.tsx", "diffHunk": "@@ -0,0 +1,264 @@\n+import React, { useState, useEffect } from 'react';\n+import {\n+  Select,\n+  SelectOption,\n+  SelectVariant,\n+  SelectGroup,\n+  Button,\n+  Grid,\n+  GridItem\n+} from '@patternfly/react-core';\n+import { query } from 'gql-query-builder';\n+import axios from 'axios';\n+import _ from 'lodash';\n+import { useGetPickerQuery } from '../../../graphql/types';\n+import { useApolloClient } from 'react-apollo';\n+\n+export interface IOwnProps {\n+  columnPickerType: any;\n+  setColumnFilters: any;\n+  setTableLoading: any;\n+  getQueryTypes: any;\n+  setDisplayTable: any;\n+}\n+\n+const DomainExplorerColumnPicker: React.FC<IOwnProps> = ({\n+  columnPickerType,\n+  setColumnFilters,\n+  setTableLoading,\n+  getQueryTypes,\n+  setDisplayTable\n+}) => {\n+  const [selected, setSelected] = useState([]);\n+  const [isExpanded, setIsExpanded] = useState(false);\n+  const [parameters, setParameters] = useState([]);\n+\n+  const nullTypes = [null, 'String', 'Boolean', 'Int', 'DateTime'];\n+\n+  useEffect(() => {\n+    setParameters([]);\n+    setSelected([]);\n+  }, [columnPickerType]);\n+\n+  const onSelect = (event, selection) => {\n+    if (selected.includes(selection)) {\n+      setSelected(prevState => prevState.filter(item => item !== selection));\n+      const innerText = event.nativeEvent.target.nextSibling.innerText;\n+      const rest = filterColumnSelection(event, innerText);\n+      setParameters(prevState =>\n+        prevState.filter(obj => {\n+          if (!_.isEqual(obj, rest)) {\n+            return obj;\n+          }\n+        })\n+      );\n+    } else {\n+      setSelected(prevState => [...prevState, selection]);\n+      const innerText = event.nativeEvent.target.nextSibling.innerText;\n+      const rest = filterColumnSelection(event, innerText);\n+      setParameters(prevState => [...prevState, rest]);\n+    }\n+  };\n+\n+  const filterColumnSelection = (event, selection) => {\n+    const parent = event.nativeEvent.target.parentElement.parentElement.getAttribute(\n+      'aria-labelledby'\n+    );\n+    let res = {};\n+    const tempParents = parent.split('---');\n+\n+    for (let i = tempParents.length - 1; i >= 0; i--) {\n+      if (i === tempParents.length - 1) {\n+        if (tempParents[i] === '-') {\n+          res = selection;\n+        } else {\n+          res = { [tempParents[i]]: [selection] }; // assign the value\n+        }\n+      } else {\n+        res = { [tempParents[i]]: [res] }; // put the prev object\n+      }\n+    }\n+    return res;\n+  };\n+  const onToggle = _isExpanded => {\n+    setIsExpanded(_isExpanded);\n+  };\n+\n+  const getPicker = useGetPickerQuery({\n+    variables: { columnPickerType }\n+  });\n+\n+  async function generateQuery() {\n+    if (columnPickerType) {\n+      try {\n+        await axios\n+          .post(\n+            process.env.KOGITO_DATAINDEX_HTTP_URL + '/graphql',\n+            query({\n+              operation: columnPickerType,\n+              fields: parameters\n+            })\n+          )\n+          .then(response => {\n+            setTableLoading(false);\n+            setColumnFilters(response.data.data);\n+            setDisplayTable(true);\n+            return response;\n+          });\n+      } catch (error) {\n+        return error;\n+      }\n+    }\n+  }\n+\n+  let data = [];\n+  const tempArray = [];\n+  !getPicker.loading &&\n+    getPicker.data.__type &&\n+    getPicker.data.__type.fields.filter(i => {\n+      if (i.type.kind === 'SCALAR') {\n+        tempArray.push(i);\n+      } else {\n+        data.push(i);\n+      }\n+    });\n+  data = tempArray.concat(data);\n+\n+  const fetchSchema = option => {\n+    return (\n+      !getQueryTypes.loading &&\n+      getQueryTypes.data.__schema &&\n+      getQueryTypes.data.__schema.queryType.find(item => {\n+        if (item.name === option.type.name) {\n+          return item;\n+        }\n+      })\n+    );\n+  };\n+\n+  let b;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69c7f0f56f1814487d3e88601a6d3398d52e0354"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI2MDk5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          Nothing to display\n          \n          \n            \n                          No domain data to display", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r379260997", "createdAt": "2020-02-14T05:53:42Z", "author": {"login": "cristianonicolai"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -0,0 +1,103 @@\n+import React, { useEffect } from 'react';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import {\n+  Title,\n+  EmptyState,\n+  EmptyStateIcon,\n+  EmptyStateBody,\n+  EmptyStateSecondaryActions,\n+  Bullseye,\n+  Button\n+} from '@patternfly/react-core';\n+import { SearchIcon } from '@patternfly/react-icons';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+\n+const DomainExplorerTable = ({ columnFilters, tableLoading, displayTable }) => {\n+  const getKeys = object => {\n+    const iter = (data, k = '') => {\n+      // tslint:disable-next-line: forin\n+      for (const i in data) {\n+        const rest = k.length ? ' > ' + i : i;\n+        if (typeof data[i] === 'object') {\n+          if (!Array.isArray(data[i])) {\n+            iter(data[i], k + rest);\n+          }\n+        } else {\n+          !tempKeys.includes(k + rest) && tempKeys.push(k + rest);\n+          if (rest.hasOwnProperty) {\n+            tempValue.push(data[i]);\n+          }\n+        }\n+      }\n+    };\n+    const tempKeys = [];\n+    const tempValue = [];\n+    iter(object);\n+    return { tempKeys, tempValue };\n+  };\n+  const firstKey = Object.keys(columnFilters)[0];\n+  const tableContent = columnFilters[firstKey];\n+\n+  const keys = [];\n+  const values = [];\n+  if (tableContent) {\n+    const finalResult = tableContent.map(item => getKeys(item));\n+    finalResult.map(result => {\n+      keys.push(result.tempKeys);\n+      values.push({ cells: result.tempValue });\n+    });\n+    const rowObject: any = {};\n+    if (tableLoading) {\n+      rowObject.cells = [\n+        {\n+          props: { colSpan: 8 },\n+          title: (\n+            <Bullseye>\n+              <SpinnerComponent spinnerText=\"Loading Domain Explorer...\" />\n+            </Bullseye>\n+          )\n+        }\n+      ];\n+      values.push(rowObject);\n+    }\n+  }\n+  const finalKeys = keys[0];\n+\n+  const onRowSelect = (event, isSelected, rowId) => {\n+    return null;\n+  };\n+\n+  const onDelete = (type = '', id = '') => {\n+    return null;\n+  };\n+\n+  return (\n+    <React.Fragment>\n+      {displayTable && (\n+        <Table\n+          cells={finalKeys}\n+          rows={values}\n+          aria-label=\"Domain Explorer Table\"\n+        >\n+          <TableHeader />\n+          <TableBody />\n+        </Table>\n+      )}\n+      {!displayTable && (\n+        <Bullseye>\n+          <EmptyState>\n+            <EmptyStateIcon icon={SearchIcon} />\n+            <Title headingLevel=\"h5\" size=\"lg\">\n+              Nothing to display", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69c7f0f56f1814487d3e88601a6d3398d52e0354"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI2MTY1Nw==", "bodyText": "Perhaps give a more meaningful name for the query like getFieldsFromType?", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r379261657", "createdAt": "2020-02-14T05:56:29Z", "author": {"login": "cristianonicolai"}, "path": "packages/management-console/src/graphql/queries.tsx", "diffHunk": "@@ -78,3 +78,109 @@ const GET_PROCESS_INSTANCE = gql`\n     }\n   }\n `;\n+\n+const GET_PICKER = gql`\n+  query getPicker($columnPickerType: String!) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69c7f0f56f1814487d3e88601a6d3398d52e0354"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI2MTcxNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              query getPicker($columnPickerType: String!) {\n          \n          \n            \n              query getPicker($type: String!) {", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r379261717", "createdAt": "2020-02-14T05:56:46Z", "author": {"login": "cristianonicolai"}, "path": "packages/management-console/src/graphql/queries.tsx", "diffHunk": "@@ -78,3 +78,109 @@ const GET_PROCESS_INSTANCE = gql`\n     }\n   }\n `;\n+\n+const GET_PICKER = gql`\n+  query getPicker($columnPickerType: String!) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69c7f0f56f1814487d3e88601a6d3398d52e0354"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI2MTgyNA==", "bodyText": "getQueryFields?", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r379261824", "createdAt": "2020-02-14T05:57:19Z", "author": {"login": "cristianonicolai"}, "path": "packages/management-console/src/graphql/queries.tsx", "diffHunk": "@@ -78,3 +78,109 @@ const GET_PROCESS_INSTANCE = gql`\n     }\n   }\n `;\n+\n+const GET_PICKER = gql`\n+  query getPicker($columnPickerType: String!) {\n+    __type(name: $columnPickerType) {\n+      name\n+      fields {\n+        name\n+        type {\n+          name\n+          kind\n+          fields {\n+            name\n+            type {\n+              name\n+              kind\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+`;\n+\n+const GET_QUERY_TYPES = gql`\n+  query getQueryTypes {\n+    __schema {\n+      queryType: types {\n+        name\n+        kind\n+        fields {\n+          name\n+          type {\n+            name\n+            kind\n+          }\n+        }\n+        inputFields {\n+          name\n+          type {\n+            name\n+            kind\n+          }\n+        }\n+      }\n+    }\n+  }\n+`;\n+\n+const GET_QUERY = gql`\n+  query getQuery {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69c7f0f56f1814487d3e88601a6d3398d52e0354"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI2MTkzOA==", "bodyText": "getInputFieldsFromQuery?", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r379261938", "createdAt": "2020-02-14T05:57:52Z", "author": {"login": "cristianonicolai"}, "path": "packages/management-console/src/graphql/queries.tsx", "diffHunk": "@@ -78,3 +78,109 @@ const GET_PROCESS_INSTANCE = gql`\n     }\n   }\n `;\n+\n+const GET_PICKER = gql`\n+  query getPicker($columnPickerType: String!) {\n+    __type(name: $columnPickerType) {\n+      name\n+      fields {\n+        name\n+        type {\n+          name\n+          kind\n+          fields {\n+            name\n+            type {\n+              name\n+              kind\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+`;\n+\n+const GET_QUERY_TYPES = gql`\n+  query getQueryTypes {\n+    __schema {\n+      queryType: types {\n+        name\n+        kind\n+        fields {\n+          name\n+          type {\n+            name\n+            kind\n+          }\n+        }\n+        inputFields {\n+          name\n+          type {\n+            name\n+            kind\n+          }\n+        }\n+      }\n+    }\n+  }\n+`;\n+\n+const GET_QUERY = gql`\n+  query getQuery {\n+    __type(name: \"Query\") {\n+      name\n+      fields {\n+        name\n+        args {\n+          name\n+          type {\n+            kind\n+            name\n+          }\n+        }\n+        type {\n+          ofType {\n+            name\n+          }\n+        }\n+      }\n+    }\n+  }\n+`;\n+\n+const GET_SCHEMA = gql`\n+  query getSchema($currentQuery: String!) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69c7f0f56f1814487d3e88601a6d3398d52e0354"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI2MjAwMg==", "bodyText": "getInputFieldsFromType?", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r379262002", "createdAt": "2020-02-14T05:58:10Z", "author": {"login": "cristianonicolai"}, "path": "packages/management-console/src/graphql/queries.tsx", "diffHunk": "@@ -78,3 +78,109 @@ const GET_PROCESS_INSTANCE = gql`\n     }\n   }\n `;\n+\n+const GET_PICKER = gql`\n+  query getPicker($columnPickerType: String!) {\n+    __type(name: $columnPickerType) {\n+      name\n+      fields {\n+        name\n+        type {\n+          name\n+          kind\n+          fields {\n+            name\n+            type {\n+              name\n+              kind\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+`;\n+\n+const GET_QUERY_TYPES = gql`\n+  query getQueryTypes {\n+    __schema {\n+      queryType: types {\n+        name\n+        kind\n+        fields {\n+          name\n+          type {\n+            name\n+            kind\n+          }\n+        }\n+        inputFields {\n+          name\n+          type {\n+            name\n+            kind\n+          }\n+        }\n+      }\n+    }\n+  }\n+`;\n+\n+const GET_QUERY = gql`\n+  query getQuery {\n+    __type(name: \"Query\") {\n+      name\n+      fields {\n+        name\n+        args {\n+          name\n+          type {\n+            kind\n+            name\n+          }\n+        }\n+        type {\n+          ofType {\n+            name\n+          }\n+        }\n+      }\n+    }\n+  }\n+`;\n+\n+const GET_SCHEMA = gql`\n+  query getSchema($currentQuery: String!) {\n+    __type(name: $currentQuery) {\n+      name\n+      inputFields {\n+        name\n+        type {\n+          name\n+          kind\n+          inputFields {\n+            name\n+            type {\n+              name\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+`;\n+\n+const GET_TYPES = gql`\n+  query getTypes($currentArgument: String!) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69c7f0f56f1814487d3e88601a6d3398d52e0354"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI2MjA0NQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              query getTypes($currentArgument: String!) {\n          \n          \n            \n              query getTypes($type: String!) {", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r379262045", "createdAt": "2020-02-14T05:58:24Z", "author": {"login": "cristianonicolai"}, "path": "packages/management-console/src/graphql/queries.tsx", "diffHunk": "@@ -78,3 +78,109 @@ const GET_PROCESS_INSTANCE = gql`\n     }\n   }\n `;\n+\n+const GET_PICKER = gql`\n+  query getPicker($columnPickerType: String!) {\n+    __type(name: $columnPickerType) {\n+      name\n+      fields {\n+        name\n+        type {\n+          name\n+          kind\n+          fields {\n+            name\n+            type {\n+              name\n+              kind\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+`;\n+\n+const GET_QUERY_TYPES = gql`\n+  query getQueryTypes {\n+    __schema {\n+      queryType: types {\n+        name\n+        kind\n+        fields {\n+          name\n+          type {\n+            name\n+            kind\n+          }\n+        }\n+        inputFields {\n+          name\n+          type {\n+            name\n+            kind\n+          }\n+        }\n+      }\n+    }\n+  }\n+`;\n+\n+const GET_QUERY = gql`\n+  query getQuery {\n+    __type(name: \"Query\") {\n+      name\n+      fields {\n+        name\n+        args {\n+          name\n+          type {\n+            kind\n+            name\n+          }\n+        }\n+        type {\n+          ofType {\n+            name\n+          }\n+        }\n+      }\n+    }\n+  }\n+`;\n+\n+const GET_SCHEMA = gql`\n+  query getSchema($currentQuery: String!) {\n+    __type(name: $currentQuery) {\n+      name\n+      inputFields {\n+        name\n+        type {\n+          name\n+          kind\n+          inputFields {\n+            name\n+            type {\n+              name\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+`;\n+\n+const GET_TYPES = gql`\n+  query getTypes($currentArgument: String!) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69c7f0f56f1814487d3e88601a6d3398d52e0354"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI3NzAzNA==", "bodyText": "review if apollo client can be used instead.", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r379277034", "createdAt": "2020-02-14T07:04:46Z", "author": {"login": "cristianonicolai"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerColumnPicker/DomainExplorerColumnPicker.tsx", "diffHunk": "@@ -0,0 +1,264 @@\n+import React, { useState, useEffect } from 'react';\n+import {\n+  Select,\n+  SelectOption,\n+  SelectVariant,\n+  SelectGroup,\n+  Button,\n+  Grid,\n+  GridItem\n+} from '@patternfly/react-core';\n+import { query } from 'gql-query-builder';\n+import axios from 'axios';\n+import _ from 'lodash';\n+import { useGetPickerQuery } from '../../../graphql/types';\n+import { useApolloClient } from 'react-apollo';\n+\n+export interface IOwnProps {\n+  columnPickerType: any;\n+  setColumnFilters: any;\n+  setTableLoading: any;\n+  getQueryTypes: any;\n+  setDisplayTable: any;\n+}\n+\n+const DomainExplorerColumnPicker: React.FC<IOwnProps> = ({\n+  columnPickerType,\n+  setColumnFilters,\n+  setTableLoading,\n+  getQueryTypes,\n+  setDisplayTable\n+}) => {\n+  const [selected, setSelected] = useState([]);\n+  const [isExpanded, setIsExpanded] = useState(false);\n+  const [parameters, setParameters] = useState([]);\n+\n+  const nullTypes = [null, 'String', 'Boolean', 'Int', 'DateTime'];\n+\n+  useEffect(() => {\n+    setParameters([]);\n+    setSelected([]);\n+  }, [columnPickerType]);\n+\n+  const onSelect = (event, selection) => {\n+    if (selected.includes(selection)) {\n+      setSelected(prevState => prevState.filter(item => item !== selection));\n+      const innerText = event.nativeEvent.target.nextSibling.innerText;\n+      const rest = filterColumnSelection(event, innerText);\n+      setParameters(prevState =>\n+        prevState.filter(obj => {\n+          if (!_.isEqual(obj, rest)) {\n+            return obj;\n+          }\n+        })\n+      );\n+    } else {\n+      setSelected(prevState => [...prevState, selection]);\n+      const innerText = event.nativeEvent.target.nextSibling.innerText;\n+      const rest = filterColumnSelection(event, innerText);\n+      setParameters(prevState => [...prevState, rest]);\n+    }\n+  };\n+\n+  const filterColumnSelection = (event, selection) => {\n+    const parent = event.nativeEvent.target.parentElement.parentElement.getAttribute(\n+      'aria-labelledby'\n+    );\n+    let res = {};\n+    const tempParents = parent.split('---');\n+\n+    for (let i = tempParents.length - 1; i >= 0; i--) {\n+      if (i === tempParents.length - 1) {\n+        if (tempParents[i] === '-') {\n+          res = selection;\n+        } else {\n+          res = { [tempParents[i]]: [selection] }; // assign the value\n+        }\n+      } else {\n+        res = { [tempParents[i]]: [res] }; // put the prev object\n+      }\n+    }\n+    return res;\n+  };\n+  const onToggle = _isExpanded => {\n+    setIsExpanded(_isExpanded);\n+  };\n+\n+  const getPicker = useGetPickerQuery({\n+    variables: { columnPickerType }\n+  });\n+\n+  async function generateQuery() {\n+    if (columnPickerType) {\n+      try {\n+        await axios\n+          .post(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69c7f0f56f1814487d3e88601a6d3398d52e0354"}, "originalPosition": 95}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "69c7f0f56f1814487d3e88601a6d3398d52e0354", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/69c7f0f56f1814487d3e88601a6d3398d52e0354", "committedDate": "2020-02-13T18:02:20Z", "message": "KOGITO-452 Domain Explorer Version-1"}, "afterCommit": {"oid": "aa80bac36747358eb792781dbdb5f00a78953297", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/aa80bac36747358eb792781dbdb5f00a78953297", "committedDate": "2020-02-14T18:24:59Z", "message": "KOGITO-452 Domain Explorer Version-1"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aa80bac36747358eb792781dbdb5f00a78953297", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/aa80bac36747358eb792781dbdb5f00a78953297", "committedDate": "2020-02-14T18:24:59Z", "message": "KOGITO-452 Domain Explorer Version-1"}, "afterCommit": {"oid": "66b9d9469bfad1fa33f7c2454c420b64e2935e04", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/66b9d9469bfad1fa33f7c2454c420b64e2935e04", "committedDate": "2020-02-16T17:59:13Z", "message": "KOGITO-452 Domain Explorer Version-1"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "66b9d9469bfad1fa33f7c2454c420b64e2935e04", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/66b9d9469bfad1fa33f7c2454c420b64e2935e04", "committedDate": "2020-02-16T17:59:13Z", "message": "KOGITO-452 Domain Explorer Version-1"}, "afterCommit": {"oid": "bae6f905b8c16556b393c2d0434085b30a0c9464", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/bae6f905b8c16556b393c2d0434085b30a0c9464", "committedDate": "2020-02-17T06:57:32Z", "message": "KOGITO-452 Domain Explorer Version-1"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bae6f905b8c16556b393c2d0434085b30a0c9464", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/bae6f905b8c16556b393c2d0434085b30a0c9464", "committedDate": "2020-02-17T06:57:32Z", "message": "KOGITO-452 Domain Explorer Version-1"}, "afterCommit": {"oid": "94c96571f5c16c2bdf9ba752c91fba8c758e25bf", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/94c96571f5c16c2bdf9ba752c91fba8c758e25bf", "committedDate": "2020-02-17T10:10:49Z", "message": "KOGITO-452 Domain Explorer Version-1"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "94c96571f5c16c2bdf9ba752c91fba8c758e25bf", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/94c96571f5c16c2bdf9ba752c91fba8c758e25bf", "committedDate": "2020-02-17T10:10:49Z", "message": "KOGITO-452 Domain Explorer Version-1"}, "afterCommit": {"oid": "0f88fe35e1a36e46e1bb4eb59f5a3cc05afcb4ca", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/0f88fe35e1a36e46e1bb4eb59f5a3cc05afcb4ca", "committedDate": "2020-02-17T10:54:53Z", "message": "KOGITO-452 Domain Explorer Version-1"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0f88fe35e1a36e46e1bb4eb59f5a3cc05afcb4ca", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/0f88fe35e1a36e46e1bb4eb59f5a3cc05afcb4ca", "committedDate": "2020-02-17T10:54:53Z", "message": "KOGITO-452 Domain Explorer Version-1"}, "afterCommit": {"oid": "3edfd54ab27e86c11e03c43aff0e1b862fce6925", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/3edfd54ab27e86c11e03c43aff0e1b862fce6925", "committedDate": "2020-02-17T11:17:10Z", "message": "KOGITO-452 Domain Explorer Version-1"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3edfd54ab27e86c11e03c43aff0e1b862fce6925", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/3edfd54ab27e86c11e03c43aff0e1b862fce6925", "committedDate": "2020-02-17T11:17:10Z", "message": "KOGITO-452 Domain Explorer Version-1"}, "afterCommit": {"oid": "cf157cb73d6a348858f64d0202fdc3f12460a942", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/cf157cb73d6a348858f64d0202fdc3f12460a942", "committedDate": "2020-02-17T11:58:56Z", "message": "KOGITO-452 Domain Explorer Version-1"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5ODAwNjgw", "url": "https://github.com/kiegroup/kogito-apps/pull/57#pullrequestreview-359800680", "createdAt": "2020-02-17T15:06:34Z", "commit": {"oid": "cf157cb73d6a348858f64d0202fdc3f12460a942"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNTowNjozNFrOFqnmow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNTowNjozNFrOFqnmow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIzMzM3OQ==", "bodyText": "I suggest adding a Card component around the Bullseye, which will make the white background to match the table. Also, I suggest some wording changes:\n        <Card component={'div'}>\n          <CardBody>\n            <Bullseye>\n              <EmptyState>\n                <EmptyStateIcon icon={SearchIcon} />\n                <Title headingLevel=\"h5\" size=\"lg\">\n                  No domain data to display\n                </Title>\n                <EmptyStateBody>\n                  To see content, select a domain from the dropdown, and then select the columns to view.\n                </EmptyStateBody>\n              </EmptyState>\n            </Bullseye>\n          </CardBody>\n        </Card>", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r380233379", "createdAt": "2020-02-17T15:06:34Z", "author": {"login": "srambach"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -0,0 +1,112 @@\n+import React, { useState, useEffect } from 'react';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import {\n+  Title,\n+  EmptyState,\n+  EmptyStateIcon,\n+  EmptyStateBody,\n+  EmptyStateSecondaryActions,\n+  Bullseye,\n+  Button\n+} from '@patternfly/react-core';\n+import { SearchIcon } from '@patternfly/react-icons';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+\n+const DomainExplorerTable = ({\n+  columnFilters,\n+  tableLoading,\n+  displayTable,\n+  cols,\n+  setDisplayTable\n+}) => {\n+  useEffect(() => {\n+    setDisplayTable(false);\n+  }, [cols]);\n+  const getKeys = object => {\n+    const iter = (data, k = '') => {\n+      // tslint:disable-next-line: forin\n+      for (const i in data) {\n+        const rest = k.length ? ' / ' + i : i;\n+        if (typeof data[i] === 'object') {\n+          if (!Array.isArray(data[i])) {\n+            iter(data[i], k + rest);\n+          }\n+        } else {\n+          !tempKeys.includes(k + rest) && tempKeys.push(k + rest);\n+          if (rest.hasOwnProperty) {\n+            tempValue.push(data[i].toString());\n+          }\n+        }\n+      }\n+    };\n+    const tempKeys = [];\n+    const tempValue = [];\n+    iter(object);\n+    return { tempKeys, tempValue };\n+  };\n+  const firstKey = Object.keys(columnFilters)[0];\n+  const tableContent = columnFilters[firstKey];\n+\n+  const keys = [];\n+  const values = [];\n+  if (tableContent) {\n+    const finalResult = tableContent.map(item => getKeys(item));\n+    finalResult.map(result => {\n+      keys.push(result.tempKeys);\n+      values.push({ cells: result.tempValue });\n+    });\n+    const rowObject: any = {};\n+    if (tableLoading) {\n+      rowObject.cells = [\n+        {\n+          props: { colSpan: 8 },\n+          title: (\n+            <Bullseye>\n+              <SpinnerComponent spinnerText=\"Loading Domain Explorer...\" />\n+            </Bullseye>\n+          )\n+        }\n+      ];\n+      values.push(rowObject);\n+    }\n+  }\n+  const finalKeys = keys[0];\n+\n+  const onRowSelect = (event, isSelected, rowId) => {\n+    return null;\n+  };\n+\n+  const onDelete = (type = '', id = '') => {\n+    return null;\n+  };\n+\n+  return (\n+    <React.Fragment>\n+      {displayTable && (\n+        <Table\n+          cells={finalKeys}\n+          rows={values}\n+          aria-label=\"Domain Explorer Table\"\n+        >\n+          <TableHeader />\n+          <TableBody />\n+        </Table>\n+      )}\n+      {!displayTable && (\n+        <Bullseye>\n+          <EmptyState>\n+            <EmptyStateIcon icon={SearchIcon} />\n+            <Title headingLevel=\"h5\" size=\"lg\">\n+              No domain data to display\n+            </Title>\n+            <EmptyStateBody>\n+              Select a Domain from dropdown to see content\n+            </EmptyStateBody>\n+          </EmptyState>\n+        </Bullseye>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf157cb73d6a348858f64d0202fdc3f12460a942"}, "originalPosition": 106}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5ODExNjMy", "url": "https://github.com/kiegroup/kogito-apps/pull/57#pullrequestreview-359811632", "createdAt": "2020-02-17T15:21:56Z", "commit": {"oid": "cf157cb73d6a348858f64d0202fdc3f12460a942"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNToyMTo1NlrOFqoHJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNToyMTo1NlrOFqoHJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0MTcwMw==", "bodyText": "I think this is unused, so it can be removed", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r380241703", "createdAt": "2020-02-17T15:21:56Z", "author": {"login": "srambach"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -0,0 +1,112 @@\n+import React, { useState, useEffect } from 'react';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import {\n+  Title,\n+  EmptyState,\n+  EmptyStateIcon,\n+  EmptyStateBody,\n+  EmptyStateSecondaryActions,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf157cb73d6a348858f64d0202fdc3f12460a942"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5ODExOTk2", "url": "https://github.com/kiegroup/kogito-apps/pull/57#pullrequestreview-359811996", "createdAt": "2020-02-17T15:22:26Z", "commit": {"oid": "cf157cb73d6a348858f64d0202fdc3f12460a942"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNToyMjoyN1rOFqoIPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNToyMjoyN1rOFqoIPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0MTk4MQ==", "bodyText": "This also looks like it's not used here, so it can be removed", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r380241981", "createdAt": "2020-02-17T15:22:27Z", "author": {"login": "srambach"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -0,0 +1,112 @@\n+import React, { useState, useEffect } from 'react';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import {\n+  Title,\n+  EmptyState,\n+  EmptyStateIcon,\n+  EmptyStateBody,\n+  EmptyStateSecondaryActions,\n+  Bullseye,\n+  Button", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf157cb73d6a348858f64d0202fdc3f12460a942"}, "originalPosition": 10}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5ODI4NjE2", "url": "https://github.com/kiegroup/kogito-apps/pull/57#pullrequestreview-359828616", "createdAt": "2020-02-17T15:46:51Z", "commit": {"oid": "cf157cb73d6a348858f64d0202fdc3f12460a942"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNTo0Njo1MlrOFqo7ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNTo0Njo1MlrOFqo7ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI1NTEzNA==", "bodyText": "Let's start using a modified BEM naming system similar to Patternfly's. (let's discuss specifics in chat)\nSo for now, let's name this --kogito-runtime-tooling--table-container\nAnd, I think we need overflow-x here, not y, so that we ensure a horizontal scroll when needed.", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r380255134", "createdAt": "2020-02-17T15:46:52Z", "author": {"login": "srambach"}, "path": "packages/management-console/src/components/Templates/DomainExplorerPage/DomainExplorerPage.css", "diffHunk": "@@ -0,0 +1,5 @@\n+.table-OverFlow {\n+    overflow-y: auto;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf157cb73d6a348858f64d0202fdc3f12460a942"}, "originalPosition": 2}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5ODM1MTAx", "url": "https://github.com/kiegroup/kogito-apps/pull/57#pullrequestreview-359835101", "createdAt": "2020-02-17T15:56:12Z", "commit": {"oid": "cf157cb73d6a348858f64d0202fdc3f12460a942"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNTo1NjoxMlrOFqpO3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNTo1NjoxMlrOFqpO3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI2MDA2MQ==", "bodyText": "This will apply to every PF table on the page, which right now is just one, but this isn't really good practice to rely on. So a better way would be to add another class to that table, say .kogito-runtime-tooling--domain-explorer__table and then we can apply this style just to that class.\nAlso, even though it's just one attribute, I'd put the min-width:10em; on its own line.\n.kogito-runtime-tooling--domain-explorer__table td {\n  min-width: 10em;\n}", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r380260061", "createdAt": "2020-02-17T15:56:12Z", "author": {"login": "srambach"}, "path": "packages/management-console/src/components/Templates/DomainExplorerPage/DomainExplorerPage.css", "diffHunk": "@@ -0,0 +1,5 @@\n+.table-OverFlow {\n+    overflow-y: auto;\n+}\n+\n+table.pf-c-table td {min-width: 10em;}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf157cb73d6a348858f64d0202fdc3f12460a942"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU5ODM5ODE3", "url": "https://github.com/kiegroup/kogito-apps/pull/57#pullrequestreview-359839817", "createdAt": "2020-02-17T16:03:15Z", "commit": {"oid": "cf157cb73d6a348858f64d0202fdc3f12460a942"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjowMzoxNVrOFqpdTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjowMzoxNVrOFqpdTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI2Mzc1Ng==", "bodyText": "(See comment on the CSS file)\nAdd className=\"kogito-runtime-tooling--domain-explorer__table\" to define a new class for styling the cells inside.", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r380263756", "createdAt": "2020-02-17T16:03:15Z", "author": {"login": "srambach"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -0,0 +1,112 @@\n+import React, { useState, useEffect } from 'react';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import {\n+  Title,\n+  EmptyState,\n+  EmptyStateIcon,\n+  EmptyStateBody,\n+  EmptyStateSecondaryActions,\n+  Bullseye,\n+  Button\n+} from '@patternfly/react-core';\n+import { SearchIcon } from '@patternfly/react-icons';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+\n+const DomainExplorerTable = ({\n+  columnFilters,\n+  tableLoading,\n+  displayTable,\n+  cols,\n+  setDisplayTable\n+}) => {\n+  useEffect(() => {\n+    setDisplayTable(false);\n+  }, [cols]);\n+  const getKeys = object => {\n+    const iter = (data, k = '') => {\n+      // tslint:disable-next-line: forin\n+      for (const i in data) {\n+        const rest = k.length ? ' / ' + i : i;\n+        if (typeof data[i] === 'object') {\n+          if (!Array.isArray(data[i])) {\n+            iter(data[i], k + rest);\n+          }\n+        } else {\n+          !tempKeys.includes(k + rest) && tempKeys.push(k + rest);\n+          if (rest.hasOwnProperty) {\n+            tempValue.push(data[i].toString());\n+          }\n+        }\n+      }\n+    };\n+    const tempKeys = [];\n+    const tempValue = [];\n+    iter(object);\n+    return { tempKeys, tempValue };\n+  };\n+  const firstKey = Object.keys(columnFilters)[0];\n+  const tableContent = columnFilters[firstKey];\n+\n+  const keys = [];\n+  const values = [];\n+  if (tableContent) {\n+    const finalResult = tableContent.map(item => getKeys(item));\n+    finalResult.map(result => {\n+      keys.push(result.tempKeys);\n+      values.push({ cells: result.tempValue });\n+    });\n+    const rowObject: any = {};\n+    if (tableLoading) {\n+      rowObject.cells = [\n+        {\n+          props: { colSpan: 8 },\n+          title: (\n+            <Bullseye>\n+              <SpinnerComponent spinnerText=\"Loading Domain Explorer...\" />\n+            </Bullseye>\n+          )\n+        }\n+      ];\n+      values.push(rowObject);\n+    }\n+  }\n+  const finalKeys = keys[0];\n+\n+  const onRowSelect = (event, isSelected, rowId) => {\n+    return null;\n+  };\n+\n+  const onDelete = (type = '', id = '') => {\n+    return null;\n+  };\n+\n+  return (\n+    <React.Fragment>\n+      {displayTable && (\n+        <Table\n+          cells={finalKeys}\n+          rows={values}\n+          aria-label=\"Domain Explorer Table\"\n+        >", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf157cb73d6a348858f64d0202fdc3f12460a942"}, "originalPosition": 90}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cf157cb73d6a348858f64d0202fdc3f12460a942", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/cf157cb73d6a348858f64d0202fdc3f12460a942", "committedDate": "2020-02-17T11:58:56Z", "message": "KOGITO-452 Domain Explorer Version-1"}, "afterCommit": {"oid": "5f81dc4cd5e9e337f082140dacc810f233305dae", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/5f81dc4cd5e9e337f082140dacc810f233305dae", "committedDate": "2020-02-18T06:35:48Z", "message": "KOGITO-452 Domain Explorer Version-1"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5f81dc4cd5e9e337f082140dacc810f233305dae", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/5f81dc4cd5e9e337f082140dacc810f233305dae", "committedDate": "2020-02-18T06:35:48Z", "message": "KOGITO-452 Domain Explorer Version-1"}, "afterCommit": {"oid": "a83a54295ec8d35520c6188829eeb7338dbe296a", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/a83a54295ec8d35520c6188829eeb7338dbe296a", "committedDate": "2020-02-18T06:39:49Z", "message": "KOGITO-452 Domain Explorer Version-1"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a83a54295ec8d35520c6188829eeb7338dbe296a", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/a83a54295ec8d35520c6188829eeb7338dbe296a", "committedDate": "2020-02-18T06:39:49Z", "message": "KOGITO-452 Domain Explorer Version-1"}, "afterCommit": {"oid": "3c1f035fef9d1ec8492e90f442fa2e1a560ebd99", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/3c1f035fef9d1ec8492e90f442fa2e1a560ebd99", "committedDate": "2020-02-18T11:43:09Z", "message": "KOGITO-452 Domain Explorer Version-1"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3c1f035fef9d1ec8492e90f442fa2e1a560ebd99", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/3c1f035fef9d1ec8492e90f442fa2e1a560ebd99", "committedDate": "2020-02-18T11:43:09Z", "message": "KOGITO-452 Domain Explorer Version-1"}, "afterCommit": {"oid": "9022d170393a412f7c992372426dcba00540e14c", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/9022d170393a412f7c992372426dcba00540e14c", "committedDate": "2020-02-18T11:47:00Z", "message": "KOGITO-452 Domain Explorer Version-1"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9022d170393a412f7c992372426dcba00540e14c", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/9022d170393a412f7c992372426dcba00540e14c", "committedDate": "2020-02-18T11:47:00Z", "message": "KOGITO-452 Domain Explorer Version-1"}, "afterCommit": {"oid": "56eb111cdefb4ad3ab1b48a08a6d85ccce5c1c6d", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/56eb111cdefb4ad3ab1b48a08a6d85ccce5c1c6d", "committedDate": "2020-02-18T20:09:39Z", "message": "KOGITO-452 Domain Explorer Version-1"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNjYyMzM5", "url": "https://github.com/kiegroup/kogito-apps/pull/57#pullrequestreview-360662339", "createdAt": "2020-02-18T20:50:20Z", "commit": {"oid": "56eb111cdefb4ad3ab1b48a08a6d85ccce5c1c6d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDo1MDoyMFrOFrR7Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDo1MDoyMFrOFrR7Qg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkyNjc4Ng==", "bodyText": "Change to\n     values.push({ cells: result.tempValue, rowKey: Math.random().toString() });", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r380926786", "createdAt": "2020-02-18T20:50:20Z", "author": {"login": "srambach"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -0,0 +1,121 @@\n+import React, { useState, useEffect } from 'react';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import {\n+  Title,\n+  EmptyState,\n+  EmptyStateIcon,\n+  EmptyStateBody,\n+  Bullseye,\n+  Card,\n+  CardBody\n+} from '@patternfly/react-core';\n+import './DomainExplorerTable.css';\n+import { SearchIcon } from '@patternfly/react-icons';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+\n+const DomainExplorerTable = ({\n+  columnFilters,\n+  tableLoading,\n+  displayTable,\n+  cols,\n+  setDisplayTable\n+}) => {\n+  // useEffect(() => {\n+  //   setDisplayTable(false);\n+  // }, [cols]);\n+  const getKeys = object => {\n+    const iter = (data, k = '') => {\n+      // tslint:disable-next-line: forin\n+      for (const i in data) {\n+        const rest = k.length ? ' / ' + i : i;\n+\n+        if (typeof data[i] === 'object') {\n+          if (!Array.isArray(data[i])) {\n+            iter(data[i], k + rest);\n+          }\n+        } else {\n+          if (rest !== '__typename' && !rest.match('/ __typename')) {\n+            !tempKeys.includes(k + rest) && tempKeys.push(k + rest);\n+            if (rest.hasOwnProperty) {\n+              tempValue.push(data[i].toString());\n+            }\n+          }\n+        }\n+      }\n+    };\n+    const tempKeys = [];\n+    const tempValue = [];\n+    iter(object);\n+    return { tempKeys, tempValue };\n+  };\n+  const firstKey = Object.keys(columnFilters)[0];\n+  const tableContent = columnFilters[firstKey];\n+\n+  const keys = [];\n+  const values = [];\n+  if (tableContent) {\n+    const finalResult = tableContent.map(item => getKeys(item));\n+    finalResult.map(result => {\n+      keys.push(result.tempKeys);\n+      values.push({ cells: result.tempValue, id: Math.random().toString() });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56eb111cdefb4ad3ab1b48a08a6d85ccce5c1c6d"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYwNjYyNTQz", "url": "https://github.com/kiegroup/kogito-apps/pull/57#pullrequestreview-360662543", "createdAt": "2020-02-18T20:50:40Z", "commit": {"oid": "56eb111cdefb4ad3ab1b48a08a6d85ccce5c1c6d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDo1MDo0MFrOFrR70A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDo1MDo0MFrOFrR70A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkyNjkyOA==", "bodyText": "Change to\n         <TableBody rowKey=\"rowKey\" />", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r380926928", "createdAt": "2020-02-18T20:50:40Z", "author": {"login": "srambach"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -0,0 +1,121 @@\n+import React, { useState, useEffect } from 'react';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import {\n+  Title,\n+  EmptyState,\n+  EmptyStateIcon,\n+  EmptyStateBody,\n+  Bullseye,\n+  Card,\n+  CardBody\n+} from '@patternfly/react-core';\n+import './DomainExplorerTable.css';\n+import { SearchIcon } from '@patternfly/react-icons';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+\n+const DomainExplorerTable = ({\n+  columnFilters,\n+  tableLoading,\n+  displayTable,\n+  cols,\n+  setDisplayTable\n+}) => {\n+  // useEffect(() => {\n+  //   setDisplayTable(false);\n+  // }, [cols]);\n+  const getKeys = object => {\n+    const iter = (data, k = '') => {\n+      // tslint:disable-next-line: forin\n+      for (const i in data) {\n+        const rest = k.length ? ' / ' + i : i;\n+\n+        if (typeof data[i] === 'object') {\n+          if (!Array.isArray(data[i])) {\n+            iter(data[i], k + rest);\n+          }\n+        } else {\n+          if (rest !== '__typename' && !rest.match('/ __typename')) {\n+            !tempKeys.includes(k + rest) && tempKeys.push(k + rest);\n+            if (rest.hasOwnProperty) {\n+              tempValue.push(data[i].toString());\n+            }\n+          }\n+        }\n+      }\n+    };\n+    const tempKeys = [];\n+    const tempValue = [];\n+    iter(object);\n+    return { tempKeys, tempValue };\n+  };\n+  const firstKey = Object.keys(columnFilters)[0];\n+  const tableContent = columnFilters[firstKey];\n+\n+  const keys = [];\n+  const values = [];\n+  if (tableContent) {\n+    const finalResult = tableContent.map(item => getKeys(item));\n+    finalResult.map(result => {\n+      keys.push(result.tempKeys);\n+      values.push({ cells: result.tempValue, id: Math.random().toString() });\n+    });\n+    const rowObject: any = {};\n+    if (tableLoading) {\n+      rowObject.cells = [\n+        {\n+          props: { colSpan: 8 },\n+          title: (\n+            <Bullseye>\n+              <SpinnerComponent spinnerText=\"Loading Domain Explorer...\" />\n+            </Bullseye>\n+          )\n+        }\n+      ];\n+      values.push(rowObject);\n+    }\n+  }\n+  const finalKeys = keys[0];\n+\n+  const onRowSelect = (event, isSelected, rowId) => {\n+    return null;\n+  };\n+\n+  const onDelete = (type = '', id = '') => {\n+    return null;\n+  };\n+\n+  return (\n+    <React.Fragment>\n+      {displayTable && (\n+        <Table\n+          cells={finalKeys}\n+          rows={values}\n+          aria-label=\"Domain Explorer Table\"\n+          className=\"kogito-management-console--domain-explorer__table\"\n+        >\n+          <TableHeader />\n+          <TableBody rowKey={'iqu911'} />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56eb111cdefb4ad3ab1b48a08a6d85ccce5c1c6d"}, "originalPosition": 97}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "56eb111cdefb4ad3ab1b48a08a6d85ccce5c1c6d", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/56eb111cdefb4ad3ab1b48a08a6d85ccce5c1c6d", "committedDate": "2020-02-18T20:09:39Z", "message": "KOGITO-452 Domain Explorer Version-1"}, "afterCommit": {"oid": "0bf465d4d14f148042c8acb5e11c03196cd4850e", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/0bf465d4d14f148042c8acb5e11c03196cd4850e", "committedDate": "2020-02-19T06:40:01Z", "message": "KOGITO-452 Domain Explorer Version-1"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0bf465d4d14f148042c8acb5e11c03196cd4850e", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/0bf465d4d14f148042c8acb5e11c03196cd4850e", "committedDate": "2020-02-19T06:40:01Z", "message": "KOGITO-452 Domain Explorer Version-1"}, "afterCommit": {"oid": "550f5bd7a0aab125188682b25532bca440faf580", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/550f5bd7a0aab125188682b25532bca440faf580", "committedDate": "2020-02-19T11:34:42Z", "message": "KOGITO-452 Domain Explorer Version-1"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "550f5bd7a0aab125188682b25532bca440faf580", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/550f5bd7a0aab125188682b25532bca440faf580", "committedDate": "2020-02-19T11:34:42Z", "message": "KOGITO-452 Domain Explorer Version-1"}, "afterCommit": {"oid": "5ff46127986ef0f64b36efd22593fdca058f8132", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/5ff46127986ef0f64b36efd22593fdca058f8132", "committedDate": "2020-02-19T11:42:06Z", "message": "KOGITO-452 Domain Explorer Version-1"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5ff46127986ef0f64b36efd22593fdca058f8132", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/5ff46127986ef0f64b36efd22593fdca058f8132", "committedDate": "2020-02-19T11:42:06Z", "message": "KOGITO-452 Domain Explorer Version-1"}, "afterCommit": {"oid": "dd3094b0f2a52a0037773645d93c1a4be7880c66", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/dd3094b0f2a52a0037773645d93c1a4be7880c66", "committedDate": "2020-02-19T13:30:13Z", "message": "KOGITO-452 Domain Explorer Version-1"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMjMwOTg0", "url": "https://github.com/kiegroup/kogito-apps/pull/57#pullrequestreview-361230984", "createdAt": "2020-02-19T16:19:16Z", "commit": {"oid": "dd3094b0f2a52a0037773645d93c1a4be7880c66"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoxOToxN1rOFrtxcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoxOToxN1rOFrtxcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4MzAyNA==", "bodyText": "Sentence case - use Apply columns :-D", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r381383024", "createdAt": "2020-02-19T16:19:17Z", "author": {"login": "srambach"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerColumnPicker/DomainExplorerColumnPicker.tsx", "diffHunk": "@@ -0,0 +1,277 @@\n+import React, { useState } from 'react';\n+import {\n+  Select,\n+  SelectOption,\n+  SelectVariant,\n+  SelectGroup,\n+  Button\n+} from '@patternfly/react-core';\n+import { query } from 'gql-query-builder';\n+import _ from 'lodash';\n+import gql from 'graphql-tag';\n+import { useGetColumnPickerAttributesQuery } from '../../../graphql/types';\n+import { useApolloClient } from 'react-apollo';\n+\n+export interface IOwnProps {\n+  columnPickerType: any;\n+  setColumnFilters: any;\n+  setTableLoading: any;\n+  getQueryTypes: any;\n+  setDisplayTable: any;\n+  parameters: any;\n+  setParameters: any;\n+  selected: any;\n+  setSelected: any;\n+}\n+\n+const DomainExplorerColumnPicker: React.FC<IOwnProps> = ({\n+  columnPickerType,\n+  setColumnFilters,\n+  setTableLoading,\n+  getQueryTypes,\n+  setDisplayTable,\n+  parameters,\n+  setParameters,\n+  selected,\n+  setSelected\n+}) => {\n+  const [isExpanded, setIsExpanded] = useState(false);\n+\n+  const nullTypes = [null, 'String', 'Boolean', 'Int', 'DateTime'];\n+  const client = useApolloClient();\n+\n+  const onSelect = (event, selection) => {\n+    if (selected.includes(selection)) {\n+      setSelected(prevState => prevState.filter(item => item !== selection));\n+      const innerText = event.nativeEvent.target.nextSibling.innerText;\n+      const rest = filterColumnSelection(event, innerText);\n+      setParameters(prevState =>\n+        prevState.filter(obj => {\n+          if (!_.isEqual(obj, rest)) {\n+            return obj;\n+          }\n+        })\n+      );\n+    } else {\n+      setSelected(prevState => [...prevState, selection]);\n+      const innerText = event.nativeEvent.target.nextSibling.innerText;\n+      const rest = filterColumnSelection(event, innerText);\n+      setParameters(prevState => [...prevState, rest]);\n+    }\n+  };\n+\n+  const filterColumnSelection = (event, selection) => {\n+    const parent = event.nativeEvent.target.parentElement.parentElement.getAttribute(\n+      'aria-labelledby'\n+    );\n+    let res = {};\n+    const tempParents = parent.split('---');\n+\n+    for (let i = tempParents.length - 1; i >= 0; i--) {\n+      if (i === tempParents.length - 1) {\n+        if (tempParents[i] === '-') {\n+          res = selection;\n+        } else {\n+          res = { [tempParents[i]]: [selection] }; // assign the value\n+        }\n+      } else {\n+        res = { [tempParents[i]]: [res] }; // put the prev object\n+      }\n+    }\n+    return res;\n+  };\n+  const onToggle = _isExpanded => {\n+    setIsExpanded(_isExpanded);\n+  };\n+\n+  const getPicker = useGetColumnPickerAttributesQuery({\n+    variables: { columnPickerType }\n+  });\n+\n+  async function generateQuery() {\n+    if (columnPickerType && parameters.length > 0) {\n+      const Query = query({\n+        operation: columnPickerType,\n+        fields: parameters\n+      });\n+\n+      try {\n+        await client\n+          .query({\n+            query: gql`\n+              ${Query.query}\n+            `\n+          })\n+          .then(response => {\n+            setTableLoading(false);\n+            setColumnFilters(response.data);\n+            setDisplayTable(true);\n+            return response;\n+          });\n+      } catch (error) {\n+        return error;\n+      }\n+    } else {\n+      setDisplayTable(false);\n+    }\n+  }\n+\n+  let data = [];\n+  const tempArray = [];\n+  !getPicker.loading &&\n+    getPicker.data.__type &&\n+    getPicker.data.__type.fields.filter(i => {\n+      if (i.type.kind === 'SCALAR') {\n+        tempArray.push(i);\n+      } else {\n+        data.push(i);\n+      }\n+    });\n+  data = tempArray.concat(data);\n+\n+  const fetchSchema = option => {\n+    return (\n+      !getQueryTypes.loading &&\n+      getQueryTypes.data.__schema &&\n+      getQueryTypes.data.__schema.queryType.find(item => {\n+        if (item.name === option.type.name) {\n+          return item;\n+        }\n+      })\n+    );\n+  };\n+\n+  let childItems;\n+  let finalResult: any = [];\n+  let parentItems: any;\n+\n+  const childSelectionItems = (_data, title, ...attr) => {\n+    let nestedTitles = '';\n+    childItems = _data.map(group => {\n+      const label = title + ' / ' + attr.join();\n+      const childEle = (\n+        <SelectGroup\n+          label={label.replace(/\\,/g, '')}\n+          key={Math.random()}\n+          id={group.name}\n+          value={title + group.name}\n+        >\n+          {group.fields\n+            .filter((item, _index) => {\n+              if (!nullTypes.includes(item.type.name)) {\n+                const tempData = [];\n+                const n = fetchSchema(item);\n+                tempData.push(n);\n+                nestedTitles = nestedTitles + ' / ' + item.name;\n+                childSelectionItems(tempData, title, attr, nestedTitles);\n+              } else {\n+                return item;\n+              }\n+            })\n+            .map(item => (\n+              <SelectOption\n+                key={Math.random()}\n+                value={item.name + title + group.name}\n+              >\n+                {item.name}\n+              </SelectOption>\n+            ))}\n+        </SelectGroup>\n+      );\n+      return childEle;\n+    });\n+    finalResult.push(childItems);\n+  };\n+  const child = [];\n+  const selectionItems = _data => {\n+    parentItems =\n+      !getPicker.loading &&\n+      _data\n+        .filter((group, index) => {\n+          if (group.type.kind !== 'SCALAR') {\n+            return group;\n+          } else {\n+            child.push(<SelectOption key={group.name} value={group.name} />);\n+          }\n+        })\n+        .map((group, index) => {\n+          let ele;\n+          ele = (\n+            <SelectGroup\n+              label={group.name}\n+              key={index}\n+              id={group.name}\n+              value={group.name}\n+            >\n+              {group.type.fields &&\n+                group.type.fields\n+                  .filter((item, _index) => {\n+                    if (!nullTypes.includes(item.type.name)) {\n+                      const tempData = [];\n+                      const _v = fetchSchema(item);\n+                      tempData.push(_v);\n+                      childSelectionItems(tempData, group.name, item.name);\n+                    } else {\n+                      if (item.type.kind !== 'LIST') {\n+                        return item;\n+                      }\n+                    }\n+                  })\n+                  .map((item, _index) => (\n+                    <SelectOption key={_index} value={item.name + group.name}>\n+                      {item.name}\n+                    </SelectOption>\n+                  ))}\n+            </SelectGroup>\n+          );\n+\n+          !finalResult.includes(ele) && finalResult.push(ele);\n+        });\n+  };\n+\n+  columnPickerType && selectionItems(data);\n+  const rootElement: any = (\n+    <SelectGroup label=\" \" key={Math.random()} id=\"\" value=\" \">\n+      {child}\n+    </SelectGroup>\n+  );\n+  finalResult = finalResult.flat();\n+  finalResult.unshift(rootElement);\n+\n+  function getAllChilds(arr, comp) {\n+    const unique = arr\n+      .map(e => e[comp])\n+      .map((e, i, final) => final.indexOf(e) === i && i)\n+      .filter(e => arr[e])\n+      .map(e => arr[e]);\n+\n+    return unique;\n+  }\n+  return (\n+    <React.Fragment>\n+      {!getPicker.loading && columnPickerType && (\n+        <>\n+          <Select\n+            variant={SelectVariant.checkbox}\n+            aria-label=\"Select Input\"\n+            onToggle={onToggle}\n+            onSelect={onSelect}\n+            selections={selected}\n+            isExpanded={isExpanded}\n+            placeholderText=\"Pick Columns\"\n+            ariaLabelledBy=\"Column Picker dropdown\"\n+            isGrouped\n+            maxHeight=\"60vh\"\n+          >\n+            {getAllChilds(finalResult, 'props')}\n+          </Select>\n+          <Button variant=\"primary\" onClick={generateQuery}>\n+            Apply Columns", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd3094b0f2a52a0037773645d93c1a4be7880c66"}, "originalPosition": 269}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMjMxNDEy", "url": "https://github.com/kiegroup/kogito-apps/pull/57#pullrequestreview-361231412", "createdAt": "2020-02-19T16:19:43Z", "commit": {"oid": "dd3094b0f2a52a0037773645d93c1a4be7880c66"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoxOTo0M1rOFrtytg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoxOTo0M1rOFrtytg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4MzM1MA==", "bodyText": "Sentence case Loading domain explorer", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r381383350", "createdAt": "2020-02-19T16:19:43Z", "author": {"login": "srambach"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -0,0 +1,115 @@\n+import React, { useState, useEffect } from 'react';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import {\n+  Title,\n+  EmptyState,\n+  EmptyStateIcon,\n+  EmptyStateBody,\n+  Bullseye,\n+  Card,\n+  CardBody\n+} from '@patternfly/react-core';\n+import './DomainExplorerTable.css';\n+import { SearchIcon } from '@patternfly/react-icons';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+\n+const DomainExplorerTable = ({ columnFilters, tableLoading, displayTable }) => {\n+  const getKeys = object => {\n+    const iter = (data, k = '') => {\n+      // tslint:disable-next-line: forin\n+      for (const i in data) {\n+        const rest = k.length ? ' / ' + i : i;\n+\n+        if (typeof data[i] === 'object') {\n+          if (!Array.isArray(data[i])) {\n+            iter(data[i], k + rest);\n+          }\n+        } else {\n+          if (rest !== '__typename' && !rest.match('/ __typename')) {\n+            !tempKeys.includes(k + rest) && tempKeys.push(k + rest);\n+            if (rest.hasOwnProperty) {\n+              tempValue.push(data[i].toString());\n+            }\n+          }\n+        }\n+      }\n+    };\n+    const tempKeys = [];\n+    const tempValue = [];\n+    iter(object);\n+    return { tempKeys, tempValue };\n+  };\n+  const firstKey = Object.keys(columnFilters)[0];\n+  const tableContent = columnFilters[firstKey];\n+\n+  const keys = [];\n+  const values = [];\n+  if (tableContent) {\n+    const finalResult = tableContent.map(item => getKeys(item));\n+    finalResult.map(result => {\n+      keys.push(result.tempKeys);\n+      values.push({\n+        cells: result.tempValue,\n+        rowKey: Math.random().toString()\n+      });\n+    });\n+    const rowObject: any = {};\n+    if (tableLoading) {\n+      rowObject.cells = [\n+        {\n+          props: { colSpan: 8 },\n+          title: (\n+            <Bullseye>\n+              <SpinnerComponent spinnerText=\"Loading Domain Explorer...\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd3094b0f2a52a0037773645d93c1a4be7880c66"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMjMyMzky", "url": "https://github.com/kiegroup/kogito-apps/pull/57#pullrequestreview-361232392", "createdAt": "2020-02-19T16:20:45Z", "commit": {"oid": "dd3094b0f2a52a0037773645d93c1a4be7880c66"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyMDo0NlrOFrt1sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyMDo0NlrOFrt1sQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NDExMw==", "bodyText": "Sentence case, and \"the\" \ud83d\ude38   Select a domain from the dropdown to see content", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r381384113", "createdAt": "2020-02-19T16:20:46Z", "author": {"login": "srambach"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -0,0 +1,115 @@\n+import React, { useState, useEffect } from 'react';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import {\n+  Title,\n+  EmptyState,\n+  EmptyStateIcon,\n+  EmptyStateBody,\n+  Bullseye,\n+  Card,\n+  CardBody\n+} from '@patternfly/react-core';\n+import './DomainExplorerTable.css';\n+import { SearchIcon } from '@patternfly/react-icons';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+\n+const DomainExplorerTable = ({ columnFilters, tableLoading, displayTable }) => {\n+  const getKeys = object => {\n+    const iter = (data, k = '') => {\n+      // tslint:disable-next-line: forin\n+      for (const i in data) {\n+        const rest = k.length ? ' / ' + i : i;\n+\n+        if (typeof data[i] === 'object') {\n+          if (!Array.isArray(data[i])) {\n+            iter(data[i], k + rest);\n+          }\n+        } else {\n+          if (rest !== '__typename' && !rest.match('/ __typename')) {\n+            !tempKeys.includes(k + rest) && tempKeys.push(k + rest);\n+            if (rest.hasOwnProperty) {\n+              tempValue.push(data[i].toString());\n+            }\n+          }\n+        }\n+      }\n+    };\n+    const tempKeys = [];\n+    const tempValue = [];\n+    iter(object);\n+    return { tempKeys, tempValue };\n+  };\n+  const firstKey = Object.keys(columnFilters)[0];\n+  const tableContent = columnFilters[firstKey];\n+\n+  const keys = [];\n+  const values = [];\n+  if (tableContent) {\n+    const finalResult = tableContent.map(item => getKeys(item));\n+    finalResult.map(result => {\n+      keys.push(result.tempKeys);\n+      values.push({\n+        cells: result.tempValue,\n+        rowKey: Math.random().toString()\n+      });\n+    });\n+    const rowObject: any = {};\n+    if (tableLoading) {\n+      rowObject.cells = [\n+        {\n+          props: { colSpan: 8 },\n+          title: (\n+            <Bullseye>\n+              <SpinnerComponent spinnerText=\"Loading Domain Explorer...\" />\n+            </Bullseye>\n+          )\n+        }\n+      ];\n+      values.push(rowObject);\n+    }\n+  }\n+  const finalKeys = keys[0];\n+\n+  const onRowSelect = (event, isSelected, rowId) => {\n+    return null;\n+  };\n+\n+  const onDelete = (type = '', id = '') => {\n+    return null;\n+  };\n+\n+  return (\n+    <React.Fragment>\n+      {displayTable && (\n+        <Table\n+          cells={finalKeys}\n+          rows={values}\n+          aria-label=\"Domain Explorer Table\"\n+          className=\"kogito-management-console--domain-explorer__table\"\n+        >\n+          <TableHeader />\n+          <TableBody rowKey=\"rowKey\" />\n+        </Table>\n+      )}\n+      {!displayTable && (\n+        <Card component={'div'}>\n+          <CardBody>\n+            <Bullseye>\n+              <EmptyState>\n+                <EmptyStateIcon icon={SearchIcon} />\n+                <Title headingLevel=\"h5\" size=\"lg\">\n+                  No domain data to display\n+                </Title>\n+                <EmptyStateBody>\n+                  Select a Domain from dropdown to see content", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd3094b0f2a52a0037773645d93c1a4be7880c66"}, "originalPosition": 104}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMjMzMjIw", "url": "https://github.com/kiegroup/kogito-apps/pull/57#pullrequestreview-361233220", "createdAt": "2020-02-19T16:21:41Z", "commit": {"oid": "dd3094b0f2a52a0037773645d93c1a4be7880c66"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyMTo0MVrOFrt4Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyMTo0MVrOFrt4Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NDc1NA==", "bodyText": "Sentence case \"Pick columns\"", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r381384754", "createdAt": "2020-02-19T16:21:41Z", "author": {"login": "srambach"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerColumnPicker/DomainExplorerColumnPicker.tsx", "diffHunk": "@@ -0,0 +1,277 @@\n+import React, { useState } from 'react';\n+import {\n+  Select,\n+  SelectOption,\n+  SelectVariant,\n+  SelectGroup,\n+  Button\n+} from '@patternfly/react-core';\n+import { query } from 'gql-query-builder';\n+import _ from 'lodash';\n+import gql from 'graphql-tag';\n+import { useGetColumnPickerAttributesQuery } from '../../../graphql/types';\n+import { useApolloClient } from 'react-apollo';\n+\n+export interface IOwnProps {\n+  columnPickerType: any;\n+  setColumnFilters: any;\n+  setTableLoading: any;\n+  getQueryTypes: any;\n+  setDisplayTable: any;\n+  parameters: any;\n+  setParameters: any;\n+  selected: any;\n+  setSelected: any;\n+}\n+\n+const DomainExplorerColumnPicker: React.FC<IOwnProps> = ({\n+  columnPickerType,\n+  setColumnFilters,\n+  setTableLoading,\n+  getQueryTypes,\n+  setDisplayTable,\n+  parameters,\n+  setParameters,\n+  selected,\n+  setSelected\n+}) => {\n+  const [isExpanded, setIsExpanded] = useState(false);\n+\n+  const nullTypes = [null, 'String', 'Boolean', 'Int', 'DateTime'];\n+  const client = useApolloClient();\n+\n+  const onSelect = (event, selection) => {\n+    if (selected.includes(selection)) {\n+      setSelected(prevState => prevState.filter(item => item !== selection));\n+      const innerText = event.nativeEvent.target.nextSibling.innerText;\n+      const rest = filterColumnSelection(event, innerText);\n+      setParameters(prevState =>\n+        prevState.filter(obj => {\n+          if (!_.isEqual(obj, rest)) {\n+            return obj;\n+          }\n+        })\n+      );\n+    } else {\n+      setSelected(prevState => [...prevState, selection]);\n+      const innerText = event.nativeEvent.target.nextSibling.innerText;\n+      const rest = filterColumnSelection(event, innerText);\n+      setParameters(prevState => [...prevState, rest]);\n+    }\n+  };\n+\n+  const filterColumnSelection = (event, selection) => {\n+    const parent = event.nativeEvent.target.parentElement.parentElement.getAttribute(\n+      'aria-labelledby'\n+    );\n+    let res = {};\n+    const tempParents = parent.split('---');\n+\n+    for (let i = tempParents.length - 1; i >= 0; i--) {\n+      if (i === tempParents.length - 1) {\n+        if (tempParents[i] === '-') {\n+          res = selection;\n+        } else {\n+          res = { [tempParents[i]]: [selection] }; // assign the value\n+        }\n+      } else {\n+        res = { [tempParents[i]]: [res] }; // put the prev object\n+      }\n+    }\n+    return res;\n+  };\n+  const onToggle = _isExpanded => {\n+    setIsExpanded(_isExpanded);\n+  };\n+\n+  const getPicker = useGetColumnPickerAttributesQuery({\n+    variables: { columnPickerType }\n+  });\n+\n+  async function generateQuery() {\n+    if (columnPickerType && parameters.length > 0) {\n+      const Query = query({\n+        operation: columnPickerType,\n+        fields: parameters\n+      });\n+\n+      try {\n+        await client\n+          .query({\n+            query: gql`\n+              ${Query.query}\n+            `\n+          })\n+          .then(response => {\n+            setTableLoading(false);\n+            setColumnFilters(response.data);\n+            setDisplayTable(true);\n+            return response;\n+          });\n+      } catch (error) {\n+        return error;\n+      }\n+    } else {\n+      setDisplayTable(false);\n+    }\n+  }\n+\n+  let data = [];\n+  const tempArray = [];\n+  !getPicker.loading &&\n+    getPicker.data.__type &&\n+    getPicker.data.__type.fields.filter(i => {\n+      if (i.type.kind === 'SCALAR') {\n+        tempArray.push(i);\n+      } else {\n+        data.push(i);\n+      }\n+    });\n+  data = tempArray.concat(data);\n+\n+  const fetchSchema = option => {\n+    return (\n+      !getQueryTypes.loading &&\n+      getQueryTypes.data.__schema &&\n+      getQueryTypes.data.__schema.queryType.find(item => {\n+        if (item.name === option.type.name) {\n+          return item;\n+        }\n+      })\n+    );\n+  };\n+\n+  let childItems;\n+  let finalResult: any = [];\n+  let parentItems: any;\n+\n+  const childSelectionItems = (_data, title, ...attr) => {\n+    let nestedTitles = '';\n+    childItems = _data.map(group => {\n+      const label = title + ' / ' + attr.join();\n+      const childEle = (\n+        <SelectGroup\n+          label={label.replace(/\\,/g, '')}\n+          key={Math.random()}\n+          id={group.name}\n+          value={title + group.name}\n+        >\n+          {group.fields\n+            .filter((item, _index) => {\n+              if (!nullTypes.includes(item.type.name)) {\n+                const tempData = [];\n+                const n = fetchSchema(item);\n+                tempData.push(n);\n+                nestedTitles = nestedTitles + ' / ' + item.name;\n+                childSelectionItems(tempData, title, attr, nestedTitles);\n+              } else {\n+                return item;\n+              }\n+            })\n+            .map(item => (\n+              <SelectOption\n+                key={Math.random()}\n+                value={item.name + title + group.name}\n+              >\n+                {item.name}\n+              </SelectOption>\n+            ))}\n+        </SelectGroup>\n+      );\n+      return childEle;\n+    });\n+    finalResult.push(childItems);\n+  };\n+  const child = [];\n+  const selectionItems = _data => {\n+    parentItems =\n+      !getPicker.loading &&\n+      _data\n+        .filter((group, index) => {\n+          if (group.type.kind !== 'SCALAR') {\n+            return group;\n+          } else {\n+            child.push(<SelectOption key={group.name} value={group.name} />);\n+          }\n+        })\n+        .map((group, index) => {\n+          let ele;\n+          ele = (\n+            <SelectGroup\n+              label={group.name}\n+              key={index}\n+              id={group.name}\n+              value={group.name}\n+            >\n+              {group.type.fields &&\n+                group.type.fields\n+                  .filter((item, _index) => {\n+                    if (!nullTypes.includes(item.type.name)) {\n+                      const tempData = [];\n+                      const _v = fetchSchema(item);\n+                      tempData.push(_v);\n+                      childSelectionItems(tempData, group.name, item.name);\n+                    } else {\n+                      if (item.type.kind !== 'LIST') {\n+                        return item;\n+                      }\n+                    }\n+                  })\n+                  .map((item, _index) => (\n+                    <SelectOption key={_index} value={item.name + group.name}>\n+                      {item.name}\n+                    </SelectOption>\n+                  ))}\n+            </SelectGroup>\n+          );\n+\n+          !finalResult.includes(ele) && finalResult.push(ele);\n+        });\n+  };\n+\n+  columnPickerType && selectionItems(data);\n+  const rootElement: any = (\n+    <SelectGroup label=\" \" key={Math.random()} id=\"\" value=\" \">\n+      {child}\n+    </SelectGroup>\n+  );\n+  finalResult = finalResult.flat();\n+  finalResult.unshift(rootElement);\n+\n+  function getAllChilds(arr, comp) {\n+    const unique = arr\n+      .map(e => e[comp])\n+      .map((e, i, final) => final.indexOf(e) === i && i)\n+      .filter(e => arr[e])\n+      .map(e => arr[e]);\n+\n+    return unique;\n+  }\n+  return (\n+    <React.Fragment>\n+      {!getPicker.loading && columnPickerType && (\n+        <>\n+          <Select\n+            variant={SelectVariant.checkbox}\n+            aria-label=\"Select Input\"\n+            onToggle={onToggle}\n+            onSelect={onSelect}\n+            selections={selected}\n+            isExpanded={isExpanded}\n+            placeholderText=\"Pick Columns\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd3094b0f2a52a0037773645d93c1a4be7880c66"}, "originalPosition": 261}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3925a3ce224a38fd4a3a9ce89c42a144e3d44fb9", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/3925a3ce224a38fd4a3a9ce89c42a144e3d44fb9", "committedDate": "2020-02-19T16:24:39Z", "message": "KOGITO-452 Domain Explorer Version-1"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dd3094b0f2a52a0037773645d93c1a4be7880c66", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/dd3094b0f2a52a0037773645d93c1a4be7880c66", "committedDate": "2020-02-19T13:30:13Z", "message": "KOGITO-452 Domain Explorer Version-1"}, "afterCommit": {"oid": "3925a3ce224a38fd4a3a9ce89c42a144e3d44fb9", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/3925a3ce224a38fd4a3a9ce89c42a144e3d44fb9", "committedDate": "2020-02-19T16:24:39Z", "message": "KOGITO-452 Domain Explorer Version-1"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxMzIyNDk3", "url": "https://github.com/kiegroup/kogito-apps/pull/57#pullrequestreview-361322497", "createdAt": "2020-02-19T18:15:27Z", "commit": {"oid": "3925a3ce224a38fd4a3a9ce89c42a144e3d44fb9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNjA2MjE5", "url": "https://github.com/kiegroup/kogito-apps/pull/57#pullrequestreview-361606219", "createdAt": "2020-02-20T03:04:19Z", "commit": {"oid": "3925a3ce224a38fd4a3a9ce89c42a144e3d44fb9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNjE4MDI0", "url": "https://github.com/kiegroup/kogito-apps/pull/57#pullrequestreview-361618024", "createdAt": "2020-02-20T03:52:37Z", "commit": {"oid": "3925a3ce224a38fd4a3a9ce89c42a144e3d44fb9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 247, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}