{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5MDU0NzE1", "number": 462, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTozMDoxM1rOEluRZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTozMjozNVrOEluVUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTkwODg1OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/task-console/src/components/Organisms/TaskInbox/TaskInbox.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTozMDoxM1rOHVWr_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNDowNToyOFrOHVpkqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE1Mzg1Mw==", "bodyText": "since we keep the sortBy in context, do we still need it as a state of the component?", "url": "https://github.com/kiegroup/kogito-apps/pull/462#discussion_r492153853", "createdAt": "2020-09-21T15:30:13Z", "author": {"login": "pefernan"}, "path": "ui-packages/packages/task-console/src/components/Organisms/TaskInbox/TaskInbox.tsx", "diffHunk": "@@ -39,31 +41,40 @@ const UserTaskLoadingComponent = (\n );\n \n const TaskInbox: React.FC = props => {\n+  const context: IContext<UserTaskInstance> = useContext(TaskConsoleContext);\n   const [defaultPageSize] = useState<number>(10);\n   const [isLoaded, setIsLoaded] = useState<boolean>(false);\n   const [isLoading, setIsLoading] = useState<boolean>(false);\n   const [queryOffset, setOffset] = useState<number>(0);\n   const [pageSize, setPageSize] = useState<number>(defaultPageSize);\n   const [isLoadingMore, setIsLoadingMore] = useState<boolean>(false);\n   const [tableData, setTableData] = useState<any[]>([]);\n-\n-  const context: IContext<UserTaskInstance> = useContext(TaskConsoleContext);\n+  const [sortBy, setSortBy] = useState<SortBy>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffba14f97f588f0b77089c62485987eb757b6524"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ2MzI3Mg==", "bodyText": "removed \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-apps/pull/462#discussion_r492463272", "createdAt": "2020-09-22T04:05:28Z", "author": {"login": "AjayJagan"}, "path": "ui-packages/packages/task-console/src/components/Organisms/TaskInbox/TaskInbox.tsx", "diffHunk": "@@ -39,31 +41,40 @@ const UserTaskLoadingComponent = (\n );\n \n const TaskInbox: React.FC = props => {\n+  const context: IContext<UserTaskInstance> = useContext(TaskConsoleContext);\n   const [defaultPageSize] = useState<number>(10);\n   const [isLoaded, setIsLoaded] = useState<boolean>(false);\n   const [isLoading, setIsLoading] = useState<boolean>(false);\n   const [queryOffset, setOffset] = useState<number>(0);\n   const [pageSize, setPageSize] = useState<number>(defaultPageSize);\n   const [isLoadingMore, setIsLoadingMore] = useState<boolean>(false);\n   const [tableData, setTableData] = useState<any[]>([]);\n-\n-  const context: IContext<UserTaskInstance> = useContext(TaskConsoleContext);\n+  const [sortBy, setSortBy] = useState<SortBy>(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE1Mzg1Mw=="}, "originalCommit": {"oid": "ffba14f97f588f0b77089c62485987eb757b6524"}, "originalPosition": 28}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTkxNjk1OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/task-console/src/components/Organisms/TaskInbox/TaskInbox.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTozMjowOFrOHVWxMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNDowNTozM1rOHVpkvA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE1NTE4Ng==", "bodyText": "Same here!", "url": "https://github.com/kiegroup/kogito-apps/pull/462#discussion_r492155186", "createdAt": "2020-09-21T15:32:08Z", "author": {"login": "pefernan"}, "path": "ui-packages/packages/task-console/src/components/Organisms/TaskInbox/TaskInbox.tsx", "diffHunk": "@@ -74,41 +85,102 @@ const TaskInbox: React.FC = props => {\n       setPageSize(_pageSize);\n     }\n \n+    if (!_.isEmpty(sortBy)) {\n+      newQueryOffset = 0;\n+      newQueryLimit = tableData.length + newQueryLimit;\n+    }\n+\n+    context.getActiveQueryInfo().offset = newQueryOffset;\n+    context.getActiveQueryInfo().maxElements += _pageSize;\n+\n+    fetchUserTasks(newQueryOffset, newQueryLimit);\n+  };\n+  const fetchUserTasks = (_queryOffset, _queryLimit) => {\n     getUserTasks({\n       variables: {\n         user: context.getUser().id,\n         groups: context.getUser().groups,\n         offset: _queryOffset,\n-        limit: _pageSize\n+        limit: _queryLimit,\n+        orderBy: getSortByObject()\n       }\n     });\n   };\n-\n   useEffect(() => {\n-    onGetMoreInstances(queryOffset, pageSize, false);\n+    if (!context.getActiveQueryInfo().maxElements) {\n+      context.getActiveQueryInfo().maxElements = pageSize;\n+    }\n+    if (context.getActiveQueryInfo().offset) {\n+      setOffset(context.getActiveQueryInfo().offset);\n+    }\n+    fetchUserTasks(0, context.getActiveQueryInfo().maxElements);\n   }, []);\n \n   useEffect(() => {\n     if (isLoadingMore === undefined || !isLoadingMore) {\n       setIsLoading(loading);\n     }\n+\n     if (!loading && data !== undefined) {\n-      const newData = tableData.concat(data.UserTaskInstances);\n-      setTableData(newData);\n+      setSorting(false);\n+\n+      if (_.isEmpty(sortBy)) {\n+        const newData = tableData.concat(data.UserTaskInstances);\n+        setTableData(newData);\n+      } else {\n+        setTableData(data.UserTaskInstances);\n+      }\n+\n       if (queryOffset > 0 && tableData.length > 0) {\n         setIsLoadingMore(false);\n       }\n+\n       if (!isLoaded) {\n         setIsLoaded(true);\n       }\n     }\n   }, [data]);\n \n+  const onSorting = (index, direction) => {\n+    setSorting(true);\n+    if (direction) {\n+      setSortBy({ index, direction });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffba14f97f588f0b77089c62485987eb757b6524"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ2MzI5Mg==", "bodyText": "removed \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-apps/pull/462#discussion_r492463292", "createdAt": "2020-09-22T04:05:33Z", "author": {"login": "AjayJagan"}, "path": "ui-packages/packages/task-console/src/components/Organisms/TaskInbox/TaskInbox.tsx", "diffHunk": "@@ -74,41 +85,102 @@ const TaskInbox: React.FC = props => {\n       setPageSize(_pageSize);\n     }\n \n+    if (!_.isEmpty(sortBy)) {\n+      newQueryOffset = 0;\n+      newQueryLimit = tableData.length + newQueryLimit;\n+    }\n+\n+    context.getActiveQueryInfo().offset = newQueryOffset;\n+    context.getActiveQueryInfo().maxElements += _pageSize;\n+\n+    fetchUserTasks(newQueryOffset, newQueryLimit);\n+  };\n+  const fetchUserTasks = (_queryOffset, _queryLimit) => {\n     getUserTasks({\n       variables: {\n         user: context.getUser().id,\n         groups: context.getUser().groups,\n         offset: _queryOffset,\n-        limit: _pageSize\n+        limit: _queryLimit,\n+        orderBy: getSortByObject()\n       }\n     });\n   };\n-\n   useEffect(() => {\n-    onGetMoreInstances(queryOffset, pageSize, false);\n+    if (!context.getActiveQueryInfo().maxElements) {\n+      context.getActiveQueryInfo().maxElements = pageSize;\n+    }\n+    if (context.getActiveQueryInfo().offset) {\n+      setOffset(context.getActiveQueryInfo().offset);\n+    }\n+    fetchUserTasks(0, context.getActiveQueryInfo().maxElements);\n   }, []);\n \n   useEffect(() => {\n     if (isLoadingMore === undefined || !isLoadingMore) {\n       setIsLoading(loading);\n     }\n+\n     if (!loading && data !== undefined) {\n-      const newData = tableData.concat(data.UserTaskInstances);\n-      setTableData(newData);\n+      setSorting(false);\n+\n+      if (_.isEmpty(sortBy)) {\n+        const newData = tableData.concat(data.UserTaskInstances);\n+        setTableData(newData);\n+      } else {\n+        setTableData(data.UserTaskInstances);\n+      }\n+\n       if (queryOffset > 0 && tableData.length > 0) {\n         setIsLoadingMore(false);\n       }\n+\n       if (!isLoaded) {\n         setIsLoaded(true);\n       }\n     }\n   }, [data]);\n \n+  const onSorting = (index, direction) => {\n+    setSorting(true);\n+    if (direction) {\n+      setSortBy({ index, direction });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE1NTE4Ng=="}, "originalCommit": {"oid": "ffba14f97f588f0b77089c62485987eb757b6524"}, "originalPosition": 132}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTkxNzU4OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/task-console/src/components/Organisms/TaskInbox/TaskInbox.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTozMjoxNlrOHVWxlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNDowNTozOVrOHVpkxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE1NTI4NA==", "bodyText": "same here!", "url": "https://github.com/kiegroup/kogito-apps/pull/462#discussion_r492155284", "createdAt": "2020-09-21T15:32:16Z", "author": {"login": "pefernan"}, "path": "ui-packages/packages/task-console/src/components/Organisms/TaskInbox/TaskInbox.tsx", "diffHunk": "@@ -74,41 +85,102 @@ const TaskInbox: React.FC = props => {\n       setPageSize(_pageSize);\n     }\n \n+    if (!_.isEmpty(sortBy)) {\n+      newQueryOffset = 0;\n+      newQueryLimit = tableData.length + newQueryLimit;\n+    }\n+\n+    context.getActiveQueryInfo().offset = newQueryOffset;\n+    context.getActiveQueryInfo().maxElements += _pageSize;\n+\n+    fetchUserTasks(newQueryOffset, newQueryLimit);\n+  };\n+  const fetchUserTasks = (_queryOffset, _queryLimit) => {\n     getUserTasks({\n       variables: {\n         user: context.getUser().id,\n         groups: context.getUser().groups,\n         offset: _queryOffset,\n-        limit: _pageSize\n+        limit: _queryLimit,\n+        orderBy: getSortByObject()\n       }\n     });\n   };\n-\n   useEffect(() => {\n-    onGetMoreInstances(queryOffset, pageSize, false);\n+    if (!context.getActiveQueryInfo().maxElements) {\n+      context.getActiveQueryInfo().maxElements = pageSize;\n+    }\n+    if (context.getActiveQueryInfo().offset) {\n+      setOffset(context.getActiveQueryInfo().offset);\n+    }\n+    fetchUserTasks(0, context.getActiveQueryInfo().maxElements);\n   }, []);\n \n   useEffect(() => {\n     if (isLoadingMore === undefined || !isLoadingMore) {\n       setIsLoading(loading);\n     }\n+\n     if (!loading && data !== undefined) {\n-      const newData = tableData.concat(data.UserTaskInstances);\n-      setTableData(newData);\n+      setSorting(false);\n+\n+      if (_.isEmpty(sortBy)) {\n+        const newData = tableData.concat(data.UserTaskInstances);\n+        setTableData(newData);\n+      } else {\n+        setTableData(data.UserTaskInstances);\n+      }\n+\n       if (queryOffset > 0 && tableData.length > 0) {\n         setIsLoadingMore(false);\n       }\n+\n       if (!isLoaded) {\n         setIsLoaded(true);\n       }\n     }\n   }, [data]);\n \n+  const onSorting = (index, direction) => {\n+    setSorting(true);\n+    if (direction) {\n+      setSortBy({ index, direction });\n+      context.getActiveQueryInfo().sortBy = { index, direction };\n+    } else {\n+      context.getActiveQueryInfo().sortBy = null;\n+    }\n+  };\n+\n+  const getSortByObject = () => {\n+    if (!_.isEmpty(sortBy)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffba14f97f588f0b77089c62485987eb757b6524"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ2MzMwMA==", "bodyText": "removed \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-apps/pull/462#discussion_r492463300", "createdAt": "2020-09-22T04:05:39Z", "author": {"login": "AjayJagan"}, "path": "ui-packages/packages/task-console/src/components/Organisms/TaskInbox/TaskInbox.tsx", "diffHunk": "@@ -74,41 +85,102 @@ const TaskInbox: React.FC = props => {\n       setPageSize(_pageSize);\n     }\n \n+    if (!_.isEmpty(sortBy)) {\n+      newQueryOffset = 0;\n+      newQueryLimit = tableData.length + newQueryLimit;\n+    }\n+\n+    context.getActiveQueryInfo().offset = newQueryOffset;\n+    context.getActiveQueryInfo().maxElements += _pageSize;\n+\n+    fetchUserTasks(newQueryOffset, newQueryLimit);\n+  };\n+  const fetchUserTasks = (_queryOffset, _queryLimit) => {\n     getUserTasks({\n       variables: {\n         user: context.getUser().id,\n         groups: context.getUser().groups,\n         offset: _queryOffset,\n-        limit: _pageSize\n+        limit: _queryLimit,\n+        orderBy: getSortByObject()\n       }\n     });\n   };\n-\n   useEffect(() => {\n-    onGetMoreInstances(queryOffset, pageSize, false);\n+    if (!context.getActiveQueryInfo().maxElements) {\n+      context.getActiveQueryInfo().maxElements = pageSize;\n+    }\n+    if (context.getActiveQueryInfo().offset) {\n+      setOffset(context.getActiveQueryInfo().offset);\n+    }\n+    fetchUserTasks(0, context.getActiveQueryInfo().maxElements);\n   }, []);\n \n   useEffect(() => {\n     if (isLoadingMore === undefined || !isLoadingMore) {\n       setIsLoading(loading);\n     }\n+\n     if (!loading && data !== undefined) {\n-      const newData = tableData.concat(data.UserTaskInstances);\n-      setTableData(newData);\n+      setSorting(false);\n+\n+      if (_.isEmpty(sortBy)) {\n+        const newData = tableData.concat(data.UserTaskInstances);\n+        setTableData(newData);\n+      } else {\n+        setTableData(data.UserTaskInstances);\n+      }\n+\n       if (queryOffset > 0 && tableData.length > 0) {\n         setIsLoadingMore(false);\n       }\n+\n       if (!isLoaded) {\n         setIsLoaded(true);\n       }\n     }\n   }, [data]);\n \n+  const onSorting = (index, direction) => {\n+    setSorting(true);\n+    if (direction) {\n+      setSortBy({ index, direction });\n+      context.getActiveQueryInfo().sortBy = { index, direction };\n+    } else {\n+      context.getActiveQueryInfo().sortBy = null;\n+    }\n+  };\n+\n+  const getSortByObject = () => {\n+    if (!_.isEmpty(sortBy)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE1NTI4NA=="}, "originalCommit": {"oid": "ffba14f97f588f0b77089c62485987eb757b6524"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTkxNzc4OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/task-console/src/components/Organisms/TaskInbox/TaskInbox.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTozMjoyMVrOHVWxxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNDowNTo1OFrOHVplAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE1NTMzMg==", "bodyText": "can we use the fetchUserTasks method here??", "url": "https://github.com/kiegroup/kogito-apps/pull/462#discussion_r492155332", "createdAt": "2020-09-21T15:32:21Z", "author": {"login": "pefernan"}, "path": "ui-packages/packages/task-console/src/components/Organisms/TaskInbox/TaskInbox.tsx", "diffHunk": "@@ -74,41 +85,102 @@ const TaskInbox: React.FC = props => {\n       setPageSize(_pageSize);\n     }\n \n+    if (!_.isEmpty(sortBy)) {\n+      newQueryOffset = 0;\n+      newQueryLimit = tableData.length + newQueryLimit;\n+    }\n+\n+    context.getActiveQueryInfo().offset = newQueryOffset;\n+    context.getActiveQueryInfo().maxElements += _pageSize;\n+\n+    fetchUserTasks(newQueryOffset, newQueryLimit);\n+  };\n+  const fetchUserTasks = (_queryOffset, _queryLimit) => {\n     getUserTasks({\n       variables: {\n         user: context.getUser().id,\n         groups: context.getUser().groups,\n         offset: _queryOffset,\n-        limit: _pageSize\n+        limit: _queryLimit,\n+        orderBy: getSortByObject()\n       }\n     });\n   };\n-\n   useEffect(() => {\n-    onGetMoreInstances(queryOffset, pageSize, false);\n+    if (!context.getActiveQueryInfo().maxElements) {\n+      context.getActiveQueryInfo().maxElements = pageSize;\n+    }\n+    if (context.getActiveQueryInfo().offset) {\n+      setOffset(context.getActiveQueryInfo().offset);\n+    }\n+    fetchUserTasks(0, context.getActiveQueryInfo().maxElements);\n   }, []);\n \n   useEffect(() => {\n     if (isLoadingMore === undefined || !isLoadingMore) {\n       setIsLoading(loading);\n     }\n+\n     if (!loading && data !== undefined) {\n-      const newData = tableData.concat(data.UserTaskInstances);\n-      setTableData(newData);\n+      setSorting(false);\n+\n+      if (_.isEmpty(sortBy)) {\n+        const newData = tableData.concat(data.UserTaskInstances);\n+        setTableData(newData);\n+      } else {\n+        setTableData(data.UserTaskInstances);\n+      }\n+\n       if (queryOffset > 0 && tableData.length > 0) {\n         setIsLoadingMore(false);\n       }\n+\n       if (!isLoaded) {\n         setIsLoaded(true);\n       }\n     }\n   }, [data]);\n \n+  const onSorting = (index, direction) => {\n+    setSorting(true);\n+    if (direction) {\n+      setSortBy({ index, direction });\n+      context.getActiveQueryInfo().sortBy = { index, direction };\n+    } else {\n+      context.getActiveQueryInfo().sortBy = null;\n+    }\n+  };\n+\n+  const getSortByObject = () => {\n+    if (!_.isEmpty(sortBy)) {\n+      return _.set(\n+        {},\n+        columns[sortBy.index].path,\n+        sortBy.direction.toUpperCase()\n+      );\n+    }\n+    return null;\n+  };\n+\n+  useEffect(() => {\n+    if (!_.isEmpty(sortBy)) {\n+      getUserTasks({", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffba14f97f588f0b77089c62485987eb757b6524"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ2MzM2Mw==", "bodyText": "used fetchUserTasks :)", "url": "https://github.com/kiegroup/kogito-apps/pull/462#discussion_r492463363", "createdAt": "2020-09-22T04:05:58Z", "author": {"login": "AjayJagan"}, "path": "ui-packages/packages/task-console/src/components/Organisms/TaskInbox/TaskInbox.tsx", "diffHunk": "@@ -74,41 +85,102 @@ const TaskInbox: React.FC = props => {\n       setPageSize(_pageSize);\n     }\n \n+    if (!_.isEmpty(sortBy)) {\n+      newQueryOffset = 0;\n+      newQueryLimit = tableData.length + newQueryLimit;\n+    }\n+\n+    context.getActiveQueryInfo().offset = newQueryOffset;\n+    context.getActiveQueryInfo().maxElements += _pageSize;\n+\n+    fetchUserTasks(newQueryOffset, newQueryLimit);\n+  };\n+  const fetchUserTasks = (_queryOffset, _queryLimit) => {\n     getUserTasks({\n       variables: {\n         user: context.getUser().id,\n         groups: context.getUser().groups,\n         offset: _queryOffset,\n-        limit: _pageSize\n+        limit: _queryLimit,\n+        orderBy: getSortByObject()\n       }\n     });\n   };\n-\n   useEffect(() => {\n-    onGetMoreInstances(queryOffset, pageSize, false);\n+    if (!context.getActiveQueryInfo().maxElements) {\n+      context.getActiveQueryInfo().maxElements = pageSize;\n+    }\n+    if (context.getActiveQueryInfo().offset) {\n+      setOffset(context.getActiveQueryInfo().offset);\n+    }\n+    fetchUserTasks(0, context.getActiveQueryInfo().maxElements);\n   }, []);\n \n   useEffect(() => {\n     if (isLoadingMore === undefined || !isLoadingMore) {\n       setIsLoading(loading);\n     }\n+\n     if (!loading && data !== undefined) {\n-      const newData = tableData.concat(data.UserTaskInstances);\n-      setTableData(newData);\n+      setSorting(false);\n+\n+      if (_.isEmpty(sortBy)) {\n+        const newData = tableData.concat(data.UserTaskInstances);\n+        setTableData(newData);\n+      } else {\n+        setTableData(data.UserTaskInstances);\n+      }\n+\n       if (queryOffset > 0 && tableData.length > 0) {\n         setIsLoadingMore(false);\n       }\n+\n       if (!isLoaded) {\n         setIsLoaded(true);\n       }\n     }\n   }, [data]);\n \n+  const onSorting = (index, direction) => {\n+    setSorting(true);\n+    if (direction) {\n+      setSortBy({ index, direction });\n+      context.getActiveQueryInfo().sortBy = { index, direction };\n+    } else {\n+      context.getActiveQueryInfo().sortBy = null;\n+    }\n+  };\n+\n+  const getSortByObject = () => {\n+    if (!_.isEmpty(sortBy)) {\n+      return _.set(\n+        {},\n+        columns[sortBy.index].path,\n+        sortBy.direction.toUpperCase()\n+      );\n+    }\n+    return null;\n+  };\n+\n+  useEffect(() => {\n+    if (!_.isEmpty(sortBy)) {\n+      getUserTasks({", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE1NTMzMg=="}, "originalCommit": {"oid": "ffba14f97f588f0b77089c62485987eb757b6524"}, "originalPosition": 152}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3OTkxODg4OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/task-console/src/components/Organisms/TaskInbox/TaskInbox.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTozMjozNVrOHVWybA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMlQwNDowNjowNVrOHVplKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE1NTUwMA==", "bodyText": "same here!", "url": "https://github.com/kiegroup/kogito-apps/pull/462#discussion_r492155500", "createdAt": "2020-09-21T15:32:35Z", "author": {"login": "pefernan"}, "path": "ui-packages/packages/task-console/src/components/Organisms/TaskInbox/TaskInbox.tsx", "diffHunk": "@@ -144,6 +206,8 @@ const TaskInbox: React.FC = props => {\n         error={error}\n         refetch={refetch}\n         LoadingComponent={UserTaskLoadingComponent}\n+        onSorting={onSorting}\n+        sortBy={sortBy}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffba14f97f588f0b77089c62485987eb757b6524"}, "originalPosition": 200}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjQ2MzQwMQ==", "bodyText": "removed \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-apps/pull/462#discussion_r492463401", "createdAt": "2020-09-22T04:06:05Z", "author": {"login": "AjayJagan"}, "path": "ui-packages/packages/task-console/src/components/Organisms/TaskInbox/TaskInbox.tsx", "diffHunk": "@@ -144,6 +206,8 @@ const TaskInbox: React.FC = props => {\n         error={error}\n         refetch={refetch}\n         LoadingComponent={UserTaskLoadingComponent}\n+        onSorting={onSorting}\n+        sortBy={sortBy}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE1NTUwMA=="}, "originalCommit": {"oid": "ffba14f97f588f0b77089c62485987eb757b6524"}, "originalPosition": 200}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 722, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}