{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2NTE1Nzc5", "number": 469, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNzoyMToxMlrOEptsOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNzozMjozNVrOEpt3QA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTc1NjcyOnYy", "diffSide": "RIGHT", "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/resource/JobResource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNzoyMToxMlrOHbjZkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNzoyMToxMlrOHbjZkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY1MzU4NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        throw new IllegalArgumentException(\"Patch an only be applied to the Job scheduling trigger attributes\");\n          \n          \n            \n                        throw new IllegalArgumentException(\"Patch can only be applied to the Job scheduling trigger attributes\");", "url": "https://github.com/kiegroup/kogito-apps/pull/469#discussion_r498653584", "createdAt": "2020-10-02T07:21:12Z", "author": {"login": "sutaakar"}, "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/resource/JobResource.java", "diffHunk": "@@ -73,13 +76,28 @@\n     @Path(\"/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     @Consumes(MediaType.APPLICATION_JSON)\n-    public CompletionStage<ScheduledJob> patch(@PathParam(\"id\") String id, @RequestBody Job job) {\n+    public CompletionStage<ScheduledJob> patch(@PathParam(\"id\") String id, @RequestBody Job job) throws Exception {\n         LOGGER.debug(\"REST patch update {}\", job);\n-        return jobRepository.merge(id, ScheduledJobAdapter.to(ScheduledJobBuilder.from(job)))\n-                .thenApply(result -> Optional\n-                        .ofNullable(result)\n-                        .map(ScheduledJobAdapter::of)\n-                        .orElseThrow(() -> new NotFoundException(\"Job not found \" + job)));\n+        JobDetails jobToBeMerged = ScheduledJobAdapter.to(ScheduledJobBuilder.from(job));\n+        //validating allowed patch attributes\n+        if (Objects.nonNull(jobToBeMerged.getPayload())\n+                || StringUtils.isNotEmpty(jobToBeMerged.getId())\n+                || StringUtils.isNotEmpty(jobToBeMerged.getScheduledId())\n+                || StringUtils.isNotEmpty(jobToBeMerged.getCorrelationId())\n+                || (Objects.nonNull(jobToBeMerged.getExecutionCounter()) && jobToBeMerged.getExecutionCounter() > 0)\n+                || Objects.nonNull(jobToBeMerged.getPriority())\n+                || (Objects.nonNull(jobToBeMerged.getRetries()) && jobToBeMerged.getRetries() > 0)\n+                || Objects.nonNull(jobToBeMerged.getRecipient())\n+                || Objects.nonNull(jobToBeMerged.getStatus())\n+        ) {\n+            throw new IllegalArgumentException(\"Patch an only be applied to the Job scheduling trigger attributes\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37d3f63239cc7aa0c042616a0fa179f4287ffcf0"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMTc4NDk2OnYy", "diffSide": "RIGHT", "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/resource/JobResource.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQwNzozMjozNVrOHbjrQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzoxODozMVrOHbtRoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY1ODExMg==", "bodyText": "Wouldn't it have more sense to pass directly Trigger as a request body? That way you can skip these checks.", "url": "https://github.com/kiegroup/kogito-apps/pull/469#discussion_r498658112", "createdAt": "2020-10-02T07:32:35Z", "author": {"login": "sutaakar"}, "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/resource/JobResource.java", "diffHunk": "@@ -73,13 +76,28 @@\n     @Path(\"/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     @Consumes(MediaType.APPLICATION_JSON)\n-    public CompletionStage<ScheduledJob> patch(@PathParam(\"id\") String id, @RequestBody Job job) {\n+    public CompletionStage<ScheduledJob> patch(@PathParam(\"id\") String id, @RequestBody Job job) throws Exception {\n         LOGGER.debug(\"REST patch update {}\", job);\n-        return jobRepository.merge(id, ScheduledJobAdapter.to(ScheduledJobBuilder.from(job)))\n-                .thenApply(result -> Optional\n-                        .ofNullable(result)\n-                        .map(ScheduledJobAdapter::of)\n-                        .orElseThrow(() -> new NotFoundException(\"Job not found \" + job)));\n+        JobDetails jobToBeMerged = ScheduledJobAdapter.to(ScheduledJobBuilder.from(job));\n+        //validating allowed patch attributes", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "37d3f63239cc7aa0c042616a0fa179f4287ffcf0"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODc1MDY1MA==", "bodyText": "@sutaakar it would make sense but if you look at the API the Trigger is not exposed, instead, we have the ScheduledJob class that is exposed in the REST endpoint the idea is to migrate to have the new model JobDetails + Trigger into the REST endpoints but for now, we are not exposing this new model. Thas's why there is the ScheduledJobAdapter class to translate the models.", "url": "https://github.com/kiegroup/kogito-apps/pull/469#discussion_r498750650", "createdAt": "2020-10-02T10:50:04Z", "author": {"login": "tiagodolphine"}, "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/resource/JobResource.java", "diffHunk": "@@ -73,13 +76,28 @@\n     @Path(\"/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     @Consumes(MediaType.APPLICATION_JSON)\n-    public CompletionStage<ScheduledJob> patch(@PathParam(\"id\") String id, @RequestBody Job job) {\n+    public CompletionStage<ScheduledJob> patch(@PathParam(\"id\") String id, @RequestBody Job job) throws Exception {\n         LOGGER.debug(\"REST patch update {}\", job);\n-        return jobRepository.merge(id, ScheduledJobAdapter.to(ScheduledJobBuilder.from(job)))\n-                .thenApply(result -> Optional\n-                        .ofNullable(result)\n-                        .map(ScheduledJobAdapter::of)\n-                        .orElseThrow(() -> new NotFoundException(\"Job not found \" + job)));\n+        JobDetails jobToBeMerged = ScheduledJobAdapter.to(ScheduledJobBuilder.from(job));\n+        //validating allowed patch attributes", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY1ODExMg=="}, "originalCommit": {"oid": "37d3f63239cc7aa0c042616a0fa179f4287ffcf0"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgxNTM5Mw==", "bodyText": "ok, thanks", "url": "https://github.com/kiegroup/kogito-apps/pull/469#discussion_r498815393", "createdAt": "2020-10-02T13:18:31Z", "author": {"login": "sutaakar"}, "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/resource/JobResource.java", "diffHunk": "@@ -73,13 +76,28 @@\n     @Path(\"/{id}\")\n     @Produces(MediaType.APPLICATION_JSON)\n     @Consumes(MediaType.APPLICATION_JSON)\n-    public CompletionStage<ScheduledJob> patch(@PathParam(\"id\") String id, @RequestBody Job job) {\n+    public CompletionStage<ScheduledJob> patch(@PathParam(\"id\") String id, @RequestBody Job job) throws Exception {\n         LOGGER.debug(\"REST patch update {}\", job);\n-        return jobRepository.merge(id, ScheduledJobAdapter.to(ScheduledJobBuilder.from(job)))\n-                .thenApply(result -> Optional\n-                        .ofNullable(result)\n-                        .map(ScheduledJobAdapter::of)\n-                        .orElseThrow(() -> new NotFoundException(\"Job not found \" + job)));\n+        JobDetails jobToBeMerged = ScheduledJobAdapter.to(ScheduledJobBuilder.from(job));\n+        //validating allowed patch attributes", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODY1ODExMg=="}, "originalCommit": {"oid": "37d3f63239cc7aa0c042616a0fa179f4287ffcf0"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 736, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}