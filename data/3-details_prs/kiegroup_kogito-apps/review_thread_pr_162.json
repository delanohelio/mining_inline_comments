{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNjUyMDk1", "number": 162, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMTozMjo1NVrODwXfjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMTozNDowOVrODwXhIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDQzMTUxOnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/graphql/GraphQLSchemaManager.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMTozMjo1NVrOGDU3Zg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMzo0OTozN1rOGDZk8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0MDc3NA==", "bodyText": "it is worth checking if endpoint is null", "url": "https://github.com/kiegroup/kogito-apps/pull/162#discussion_r406140774", "createdAt": "2020-04-09T11:32:55Z", "author": {"login": "tiagodolphine"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/graphql/GraphQLSchemaManager.java", "diffHunk": "@@ -140,11 +140,24 @@ private GraphQLSchema createSchema() {\n         return schemaGenerator.makeExecutableSchema(typeDefinitionRegistry, runtimeWiring);\n     }\n \n-    private String getProcessInstanceServiceUrl(DataFetchingEnvironment env) {\n+    protected String getProcessInstanceServiceUrl(DataFetchingEnvironment env) {\n         ProcessInstance source = env.getSource();\n+        if (source == null || source.getEndpoint() == null || source.getProcessId() == null) {\n+            return null;\n+        }\n         String endpoint = source.getEndpoint();\n-        String context = \"/\" + source.getProcessId();\n-        return context.equals(endpoint) ? null : endpoint.substring(0, endpoint.indexOf(context));\n+        LOGGER.debug(\"Process endpoint {}\", endpoint);\n+        if (endpoint.startsWith(\"/\")) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b955ed0eb0226effcf6476d3142fa2a738f1dcfb"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0OTY3MQ==", "bodyText": "I'm checking on line 145 :)", "url": "https://github.com/kiegroup/kogito-apps/pull/162#discussion_r406149671", "createdAt": "2020-04-09T11:51:37Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/graphql/GraphQLSchemaManager.java", "diffHunk": "@@ -140,11 +140,24 @@ private GraphQLSchema createSchema() {\n         return schemaGenerator.makeExecutableSchema(typeDefinitionRegistry, runtimeWiring);\n     }\n \n-    private String getProcessInstanceServiceUrl(DataFetchingEnvironment env) {\n+    protected String getProcessInstanceServiceUrl(DataFetchingEnvironment env) {\n         ProcessInstance source = env.getSource();\n+        if (source == null || source.getEndpoint() == null || source.getProcessId() == null) {\n+            return null;\n+        }\n         String endpoint = source.getEndpoint();\n-        String context = \"/\" + source.getProcessId();\n-        return context.equals(endpoint) ? null : endpoint.substring(0, endpoint.indexOf(context));\n+        LOGGER.debug(\"Process endpoint {}\", endpoint);\n+        if (endpoint.startsWith(\"/\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0MDc3NA=="}, "originalCommit": {"oid": "b955ed0eb0226effcf6476d3142fa2a738f1dcfb"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjIxNzk3MA==", "bodyText": "+1", "url": "https://github.com/kiegroup/kogito-apps/pull/162#discussion_r406217970", "createdAt": "2020-04-09T13:49:37Z", "author": {"login": "tiagodolphine"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/graphql/GraphQLSchemaManager.java", "diffHunk": "@@ -140,11 +140,24 @@ private GraphQLSchema createSchema() {\n         return schemaGenerator.makeExecutableSchema(typeDefinitionRegistry, runtimeWiring);\n     }\n \n-    private String getProcessInstanceServiceUrl(DataFetchingEnvironment env) {\n+    protected String getProcessInstanceServiceUrl(DataFetchingEnvironment env) {\n         ProcessInstance source = env.getSource();\n+        if (source == null || source.getEndpoint() == null || source.getProcessId() == null) {\n+            return null;\n+        }\n         String endpoint = source.getEndpoint();\n-        String context = \"/\" + source.getProcessId();\n-        return context.equals(endpoint) ? null : endpoint.substring(0, endpoint.indexOf(context));\n+        LOGGER.debug(\"Process endpoint {}\", endpoint);\n+        if (endpoint.startsWith(\"/\")) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0MDc3NA=="}, "originalCommit": {"oid": "b955ed0eb0226effcf6476d3142fa2a738f1dcfb"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDQzNTU0OnYy", "diffSide": "RIGHT", "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/graphql/GraphQLSchemaManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMTozNDowOVrOGDU5uQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMTo1NDowM1rOGDVfDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0MTM2OQ==", "bodyText": "just suggestion to extract the source.getProcessId().contains(\".\") ? source.getProcessId().substring(source.getProcessId().lastIndexOf('.') + 1) : source.getProcessId(); to a method.", "url": "https://github.com/kiegroup/kogito-apps/pull/162#discussion_r406141369", "createdAt": "2020-04-09T11:34:09Z", "author": {"login": "tiagodolphine"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/graphql/GraphQLSchemaManager.java", "diffHunk": "@@ -140,11 +140,24 @@ private GraphQLSchema createSchema() {\n         return schemaGenerator.makeExecutableSchema(typeDefinitionRegistry, runtimeWiring);\n     }\n \n-    private String getProcessInstanceServiceUrl(DataFetchingEnvironment env) {\n+    protected String getProcessInstanceServiceUrl(DataFetchingEnvironment env) {\n         ProcessInstance source = env.getSource();\n+        if (source == null || source.getEndpoint() == null || source.getProcessId() == null) {\n+            return null;\n+        }\n         String endpoint = source.getEndpoint();\n-        String context = \"/\" + source.getProcessId();\n-        return context.equals(endpoint) ? null : endpoint.substring(0, endpoint.indexOf(context));\n+        LOGGER.debug(\"Process endpoint {}\", endpoint);\n+        if (endpoint.startsWith(\"/\")) {\n+            LOGGER.warn(\"Process '{}' endpoint '{}', does not contain full URL, please review the kogito.service.url system property to point the public URL for this runtime.\",\n+                        source.getProcessId(), endpoint);\n+        }\n+        String context = source.getProcessId().contains(\".\") ? source.getProcessId().substring(source.getProcessId().lastIndexOf('.') + 1) : source.getProcessId();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b955ed0eb0226effcf6476d3142fa2a738f1dcfb"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE1MDkyNA==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/162#discussion_r406150924", "createdAt": "2020-04-09T11:54:03Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/graphql/GraphQLSchemaManager.java", "diffHunk": "@@ -140,11 +140,24 @@ private GraphQLSchema createSchema() {\n         return schemaGenerator.makeExecutableSchema(typeDefinitionRegistry, runtimeWiring);\n     }\n \n-    private String getProcessInstanceServiceUrl(DataFetchingEnvironment env) {\n+    protected String getProcessInstanceServiceUrl(DataFetchingEnvironment env) {\n         ProcessInstance source = env.getSource();\n+        if (source == null || source.getEndpoint() == null || source.getProcessId() == null) {\n+            return null;\n+        }\n         String endpoint = source.getEndpoint();\n-        String context = \"/\" + source.getProcessId();\n-        return context.equals(endpoint) ? null : endpoint.substring(0, endpoint.indexOf(context));\n+        LOGGER.debug(\"Process endpoint {}\", endpoint);\n+        if (endpoint.startsWith(\"/\")) {\n+            LOGGER.warn(\"Process '{}' endpoint '{}', does not contain full URL, please review the kogito.service.url system property to point the public URL for this runtime.\",\n+                        source.getProcessId(), endpoint);\n+        }\n+        String context = source.getProcessId().contains(\".\") ? source.getProcessId().substring(source.getProcessId().lastIndexOf('.') + 1) : source.getProcessId();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE0MTM2OQ=="}, "originalCommit": {"oid": "b955ed0eb0226effcf6476d3142fa2a738f1dcfb"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1054, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}