{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc5ODMzMDA0", "number": 442, "reviewThreads": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMjoxMDozOVrOEhNsLw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjoyNDozNVrOEihbBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjYyNzY3OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/utils/DataUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMjoxMDozOVrOHOZ6sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMjoyNTozM1rOHOabsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg2NjczOQ==", "bodyText": "remove redundant comment?", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r484866739", "createdAt": "2020-09-08T12:10:39Z", "author": {"login": "r00ta"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/utils/DataUtils.java", "diffHunk": "@@ -66,13 +66,13 @@ private DataUtils() {\n         double d = getStdDev(data, m);\n \n         // force desired standard deviation\n-        double d1 = stdDeviation / d;\n+        double d1 = d != 0 ? stdDeviation / d : stdDeviation; // avoid division by zero\n         for (int i = 0; i < size; i++) {\n             data[i] *= d1;\n         }\n \n         // get the new mean\n-        double m1 = m * stdDeviation / d;\n+        double m1 = d != 0 ? m * stdDeviation / d : m * stdDeviation; // avoid division by zero", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efdda9023714222f2a6cd7d74c4b39cfb8dcdba7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg3NTE4Ng==", "bodyText": "sure", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r484875186", "createdAt": "2020-09-08T12:25:33Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/utils/DataUtils.java", "diffHunk": "@@ -66,13 +66,13 @@ private DataUtils() {\n         double d = getStdDev(data, m);\n \n         // force desired standard deviation\n-        double d1 = stdDeviation / d;\n+        double d1 = d != 0 ? stdDeviation / d : stdDeviation; // avoid division by zero\n         for (int i = 0; i < size; i++) {\n             data[i] *= d1;\n         }\n \n         // get the new mean\n-        double m1 = m * stdDeviation / d;\n+        double m1 = d != 0 ? m * stdDeviation / d : m * stdDeviation; // avoid division by zero", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg2NjczOQ=="}, "originalCommit": {"oid": "efdda9023714222f2a6cd7d74c4b39cfb8dcdba7"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjY0MzE4OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMjoxNDo1NlrOHOaD4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMjoyOTo0NlrOHOakuQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg2OTA5MQ==", "bodyText": "Just for my understanding, what do you mean with this comment?  why is the first feature always skipped?", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r484869091", "createdAt": "2020-09-08T12:14:56Z", "author": {"login": "r00ta"}, "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainerTest.java", "diffHunk": "@@ -33,51 +33,71 @@\n import org.kie.kogito.explainability.model.Value;\n import org.kie.kogito.explainability.utils.DataUtils;\n \n-import java.util.Collection;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n \n import static java.util.concurrent.CompletableFuture.supplyAsync;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n class PartialDependencePlotExplainerTest {\n \n     PartialDependencePlotExplainer partialDependencePlotProvider = new PartialDependencePlotExplainer();\n     PredictionProviderMetadata metadata = new PredictionProviderMetadata() {\n         @Override\n         public DataDistribution getDataDistribution() {\n-            return DataUtils.generateRandomDataDistribution(10, 100, new FakeRandom());\n+            return DataUtils.generateRandomDataDistribution(3, 100, new FakeRandom());\n         }\n \n         @Override\n         public PredictionInput getInputShape() {\n             List<Feature> features = new LinkedList<>();\n-            features.add(FeatureFactory.newTextFeature(\"text\", \"\"));\n+            features.add(FeatureFactory.newNumericalFeature(\"f0\", 0));\n+            features.add(FeatureFactory.newNumericalFeature(\"f1\", 0));\n+            features.add(FeatureFactory.newNumericalFeature(\"f2\", 0));\n             return new PredictionInput(features);\n         }\n \n         @Override\n         public PredictionOutput getOutputShape() {\n             List<Output> outputs = new LinkedList<>();\n-            outputs.add(new Output(\"spam\", Type.BOOLEAN, new Value<>(null), 0d));\n+            outputs.add(new Output(\"spam\", Type.BOOLEAN, new Value<>(false), 0d));\n             return new PredictionOutput(outputs);\n         }\n     };\n \n     @Test\n     void testPdpTextClassifier() throws Exception {\n-        PredictionProvider modelInfo = TestUtils.getDummyTextClassifier();\n-        Collection<PartialDependenceGraph> pdps = partialDependencePlotProvider.explain(modelInfo, metadata);\n+        PredictionProvider modelInfo = TestUtils.getSumSkipModel(0);\n+        List<PartialDependenceGraph> pdps = partialDependencePlotProvider.explain(modelInfo, metadata);\n         assertNotNull(pdps);\n         for (PartialDependenceGraph pdp : pdps) {\n             assertNotNull(pdp.getFeature());\n             assertNotNull(pdp.getX());\n             assertNotNull(pdp.getY());\n             assertEquals(pdp.getX().length, pdp.getY().length);\n+            assertGraph(pdp);\n+        }\n+        // the first feature is always skipped by the model, so the predictions are not affected, hence PDP Y values are constant", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efdda9023714222f2a6cd7d74c4b39cfb8dcdba7"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg3NzQ5Nw==", "bodyText": "the specific test/dummy model that is used in the test is designed to always skip a given feature, in this case it skips the first one, see TestUtils.getSumSkipModel(0).\nFor this reason that specific (first) feature never affects the output and therefore its PDP graph results in a constant y (an horizontal straight line).", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r484877497", "createdAt": "2020-09-08T12:29:46Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainerTest.java", "diffHunk": "@@ -33,51 +33,71 @@\n import org.kie.kogito.explainability.model.Value;\n import org.kie.kogito.explainability.utils.DataUtils;\n \n-import java.util.Collection;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n \n import static java.util.concurrent.CompletableFuture.supplyAsync;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n class PartialDependencePlotExplainerTest {\n \n     PartialDependencePlotExplainer partialDependencePlotProvider = new PartialDependencePlotExplainer();\n     PredictionProviderMetadata metadata = new PredictionProviderMetadata() {\n         @Override\n         public DataDistribution getDataDistribution() {\n-            return DataUtils.generateRandomDataDistribution(10, 100, new FakeRandom());\n+            return DataUtils.generateRandomDataDistribution(3, 100, new FakeRandom());\n         }\n \n         @Override\n         public PredictionInput getInputShape() {\n             List<Feature> features = new LinkedList<>();\n-            features.add(FeatureFactory.newTextFeature(\"text\", \"\"));\n+            features.add(FeatureFactory.newNumericalFeature(\"f0\", 0));\n+            features.add(FeatureFactory.newNumericalFeature(\"f1\", 0));\n+            features.add(FeatureFactory.newNumericalFeature(\"f2\", 0));\n             return new PredictionInput(features);\n         }\n \n         @Override\n         public PredictionOutput getOutputShape() {\n             List<Output> outputs = new LinkedList<>();\n-            outputs.add(new Output(\"spam\", Type.BOOLEAN, new Value<>(null), 0d));\n+            outputs.add(new Output(\"spam\", Type.BOOLEAN, new Value<>(false), 0d));\n             return new PredictionOutput(outputs);\n         }\n     };\n \n     @Test\n     void testPdpTextClassifier() throws Exception {\n-        PredictionProvider modelInfo = TestUtils.getDummyTextClassifier();\n-        Collection<PartialDependenceGraph> pdps = partialDependencePlotProvider.explain(modelInfo, metadata);\n+        PredictionProvider modelInfo = TestUtils.getSumSkipModel(0);\n+        List<PartialDependenceGraph> pdps = partialDependencePlotProvider.explain(modelInfo, metadata);\n         assertNotNull(pdps);\n         for (PartialDependenceGraph pdp : pdps) {\n             assertNotNull(pdp.getFeature());\n             assertNotNull(pdp.getX());\n             assertNotNull(pdp.getY());\n             assertEquals(pdp.getX().length, pdp.getY().length);\n+            assertGraph(pdp);\n+        }\n+        // the first feature is always skipped by the model, so the predictions are not affected, hence PDP Y values are constant", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg2OTA5MQ=="}, "originalCommit": {"oid": "efdda9023714222f2a6cd7d74c4b39cfb8dcdba7"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjY1Mzc4OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMjoxNzo0NFrOHOaKDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxNDowMDozNVrOHOeoUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg3MDY3MA==", "bodyText": "iiuc this is somehow dependent to FakeRandom, I'm not sure it's a good idea to assert something that depends on that implementation (also because it returns always the same number)", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r484870670", "createdAt": "2020-09-08T12:17:44Z", "author": {"login": "r00ta"}, "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainerTest.java", "diffHunk": "@@ -33,51 +33,71 @@\n import org.kie.kogito.explainability.model.Value;\n import org.kie.kogito.explainability.utils.DataUtils;\n \n-import java.util.Collection;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n \n import static java.util.concurrent.CompletableFuture.supplyAsync;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n class PartialDependencePlotExplainerTest {\n \n     PartialDependencePlotExplainer partialDependencePlotProvider = new PartialDependencePlotExplainer();\n     PredictionProviderMetadata metadata = new PredictionProviderMetadata() {\n         @Override\n         public DataDistribution getDataDistribution() {\n-            return DataUtils.generateRandomDataDistribution(10, 100, new FakeRandom());\n+            return DataUtils.generateRandomDataDistribution(3, 100, new FakeRandom());\n         }\n \n         @Override\n         public PredictionInput getInputShape() {\n             List<Feature> features = new LinkedList<>();\n-            features.add(FeatureFactory.newTextFeature(\"text\", \"\"));\n+            features.add(FeatureFactory.newNumericalFeature(\"f0\", 0));\n+            features.add(FeatureFactory.newNumericalFeature(\"f1\", 0));\n+            features.add(FeatureFactory.newNumericalFeature(\"f2\", 0));\n             return new PredictionInput(features);\n         }\n \n         @Override\n         public PredictionOutput getOutputShape() {\n             List<Output> outputs = new LinkedList<>();\n-            outputs.add(new Output(\"spam\", Type.BOOLEAN, new Value<>(null), 0d));\n+            outputs.add(new Output(\"spam\", Type.BOOLEAN, new Value<>(false), 0d));\n             return new PredictionOutput(outputs);\n         }\n     };\n \n     @Test\n     void testPdpTextClassifier() throws Exception {\n-        PredictionProvider modelInfo = TestUtils.getDummyTextClassifier();\n-        Collection<PartialDependenceGraph> pdps = partialDependencePlotProvider.explain(modelInfo, metadata);\n+        PredictionProvider modelInfo = TestUtils.getSumSkipModel(0);\n+        List<PartialDependenceGraph> pdps = partialDependencePlotProvider.explain(modelInfo, metadata);\n         assertNotNull(pdps);\n         for (PartialDependenceGraph pdp : pdps) {\n             assertNotNull(pdp.getFeature());\n             assertNotNull(pdp.getX());\n             assertNotNull(pdp.getY());\n             assertEquals(pdp.getX().length, pdp.getY().length);\n+            assertGraph(pdp);\n+        }\n+        // the first feature is always skipped by the model, so the predictions are not affected, hence PDP Y values are constant\n+        PartialDependenceGraph fixedFeatureGraph = pdps.get(0);\n+        assertEquals(Arrays.stream(fixedFeatureGraph.getY()).distinct().count(), 1);\n+\n+        // the other two instead change but in the same way, due the behaviour of FakeRandom in generating data/distributions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efdda9023714222f2a6cd7d74c4b39cfb8dcdba7"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDk0Mzk1NQ==", "bodyText": "yes, it depends on FakeRandom, qualitatetively this is the only check we an do on those graphs.\nI can drop it eventually.", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r484943955", "createdAt": "2020-09-08T14:00:35Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainerTest.java", "diffHunk": "@@ -33,51 +33,71 @@\n import org.kie.kogito.explainability.model.Value;\n import org.kie.kogito.explainability.utils.DataUtils;\n \n-import java.util.Collection;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n \n import static java.util.concurrent.CompletableFuture.supplyAsync;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n class PartialDependencePlotExplainerTest {\n \n     PartialDependencePlotExplainer partialDependencePlotProvider = new PartialDependencePlotExplainer();\n     PredictionProviderMetadata metadata = new PredictionProviderMetadata() {\n         @Override\n         public DataDistribution getDataDistribution() {\n-            return DataUtils.generateRandomDataDistribution(10, 100, new FakeRandom());\n+            return DataUtils.generateRandomDataDistribution(3, 100, new FakeRandom());\n         }\n \n         @Override\n         public PredictionInput getInputShape() {\n             List<Feature> features = new LinkedList<>();\n-            features.add(FeatureFactory.newTextFeature(\"text\", \"\"));\n+            features.add(FeatureFactory.newNumericalFeature(\"f0\", 0));\n+            features.add(FeatureFactory.newNumericalFeature(\"f1\", 0));\n+            features.add(FeatureFactory.newNumericalFeature(\"f2\", 0));\n             return new PredictionInput(features);\n         }\n \n         @Override\n         public PredictionOutput getOutputShape() {\n             List<Output> outputs = new LinkedList<>();\n-            outputs.add(new Output(\"spam\", Type.BOOLEAN, new Value<>(null), 0d));\n+            outputs.add(new Output(\"spam\", Type.BOOLEAN, new Value<>(false), 0d));\n             return new PredictionOutput(outputs);\n         }\n     };\n \n     @Test\n     void testPdpTextClassifier() throws Exception {\n-        PredictionProvider modelInfo = TestUtils.getDummyTextClassifier();\n-        Collection<PartialDependenceGraph> pdps = partialDependencePlotProvider.explain(modelInfo, metadata);\n+        PredictionProvider modelInfo = TestUtils.getSumSkipModel(0);\n+        List<PartialDependenceGraph> pdps = partialDependencePlotProvider.explain(modelInfo, metadata);\n         assertNotNull(pdps);\n         for (PartialDependenceGraph pdp : pdps) {\n             assertNotNull(pdp.getFeature());\n             assertNotNull(pdp.getX());\n             assertNotNull(pdp.getY());\n             assertEquals(pdp.getX().length, pdp.getY().length);\n+            assertGraph(pdp);\n+        }\n+        // the first feature is always skipped by the model, so the predictions are not affected, hence PDP Y values are constant\n+        PartialDependenceGraph fixedFeatureGraph = pdps.get(0);\n+        assertEquals(Arrays.stream(fixedFeatureGraph.getY()).distinct().count(), 1);\n+\n+        // the other two instead change but in the same way, due the behaviour of FakeRandom in generating data/distributions", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg3MDY3MA=="}, "originalCommit": {"oid": "efdda9023714222f2a6cd7d74c4b39cfb8dcdba7"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzMjY3MTg4OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMjoyMjozNlrOHOaU6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMzo1MDoxNFrOHOeJcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg3MzQ0OQ==", "bodyText": "Since Double.Nan > whatever is always false you can remove the first assertion. Regarding the second assertion, since the loop starts from 1 the first element of pdp.getY() is not checked", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r484873449", "createdAt": "2020-09-08T12:22:36Z", "author": {"login": "r00ta"}, "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainerTest.java", "diffHunk": "@@ -33,51 +33,71 @@\n import org.kie.kogito.explainability.model.Value;\n import org.kie.kogito.explainability.utils.DataUtils;\n \n-import java.util.Collection;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n \n import static java.util.concurrent.CompletableFuture.supplyAsync;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n class PartialDependencePlotExplainerTest {\n \n     PartialDependencePlotExplainer partialDependencePlotProvider = new PartialDependencePlotExplainer();\n     PredictionProviderMetadata metadata = new PredictionProviderMetadata() {\n         @Override\n         public DataDistribution getDataDistribution() {\n-            return DataUtils.generateRandomDataDistribution(10, 100, new FakeRandom());\n+            return DataUtils.generateRandomDataDistribution(3, 100, new FakeRandom());\n         }\n \n         @Override\n         public PredictionInput getInputShape() {\n             List<Feature> features = new LinkedList<>();\n-            features.add(FeatureFactory.newTextFeature(\"text\", \"\"));\n+            features.add(FeatureFactory.newNumericalFeature(\"f0\", 0));\n+            features.add(FeatureFactory.newNumericalFeature(\"f1\", 0));\n+            features.add(FeatureFactory.newNumericalFeature(\"f2\", 0));\n             return new PredictionInput(features);\n         }\n \n         @Override\n         public PredictionOutput getOutputShape() {\n             List<Output> outputs = new LinkedList<>();\n-            outputs.add(new Output(\"spam\", Type.BOOLEAN, new Value<>(null), 0d));\n+            outputs.add(new Output(\"spam\", Type.BOOLEAN, new Value<>(false), 0d));\n             return new PredictionOutput(outputs);\n         }\n     };\n \n     @Test\n     void testPdpTextClassifier() throws Exception {\n-        PredictionProvider modelInfo = TestUtils.getDummyTextClassifier();\n-        Collection<PartialDependenceGraph> pdps = partialDependencePlotProvider.explain(modelInfo, metadata);\n+        PredictionProvider modelInfo = TestUtils.getSumSkipModel(0);\n+        List<PartialDependenceGraph> pdps = partialDependencePlotProvider.explain(modelInfo, metadata);\n         assertNotNull(pdps);\n         for (PartialDependenceGraph pdp : pdps) {\n             assertNotNull(pdp.getFeature());\n             assertNotNull(pdp.getX());\n             assertNotNull(pdp.getY());\n             assertEquals(pdp.getX().length, pdp.getY().length);\n+            assertGraph(pdp);\n+        }\n+        // the first feature is always skipped by the model, so the predictions are not affected, hence PDP Y values are constant\n+        PartialDependenceGraph fixedFeatureGraph = pdps.get(0);\n+        assertEquals(Arrays.stream(fixedFeatureGraph.getY()).distinct().count(), 1);\n+\n+        // the other two instead change but in the same way, due the behaviour of FakeRandom in generating data/distributions\n+        assertArrayEquals(pdps.get(1).getY(), pdps.get(2).getY());\n+    }\n+\n+    private void assertGraph(PartialDependenceGraph pdp) {\n+        for (int i = 1; i < pdp.getX().length; i++) {\n+            assertNotEquals(Double.NaN, pdp.getX()[i]);\n+            assertNotEquals(Double.NaN, pdp.getY()[i]);\n+            assertTrue(pdp.getX()[i] > pdp.getX()[i - 1]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efdda9023714222f2a6cd7d74c4b39cfb8dcdba7"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDkzNjA0OA==", "bodyText": "good points, thanks.", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r484936048", "createdAt": "2020-09-08T13:50:14Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainerTest.java", "diffHunk": "@@ -33,51 +33,71 @@\n import org.kie.kogito.explainability.model.Value;\n import org.kie.kogito.explainability.utils.DataUtils;\n \n-import java.util.Collection;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n \n import static java.util.concurrent.CompletableFuture.supplyAsync;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n class PartialDependencePlotExplainerTest {\n \n     PartialDependencePlotExplainer partialDependencePlotProvider = new PartialDependencePlotExplainer();\n     PredictionProviderMetadata metadata = new PredictionProviderMetadata() {\n         @Override\n         public DataDistribution getDataDistribution() {\n-            return DataUtils.generateRandomDataDistribution(10, 100, new FakeRandom());\n+            return DataUtils.generateRandomDataDistribution(3, 100, new FakeRandom());\n         }\n \n         @Override\n         public PredictionInput getInputShape() {\n             List<Feature> features = new LinkedList<>();\n-            features.add(FeatureFactory.newTextFeature(\"text\", \"\"));\n+            features.add(FeatureFactory.newNumericalFeature(\"f0\", 0));\n+            features.add(FeatureFactory.newNumericalFeature(\"f1\", 0));\n+            features.add(FeatureFactory.newNumericalFeature(\"f2\", 0));\n             return new PredictionInput(features);\n         }\n \n         @Override\n         public PredictionOutput getOutputShape() {\n             List<Output> outputs = new LinkedList<>();\n-            outputs.add(new Output(\"spam\", Type.BOOLEAN, new Value<>(null), 0d));\n+            outputs.add(new Output(\"spam\", Type.BOOLEAN, new Value<>(false), 0d));\n             return new PredictionOutput(outputs);\n         }\n     };\n \n     @Test\n     void testPdpTextClassifier() throws Exception {\n-        PredictionProvider modelInfo = TestUtils.getDummyTextClassifier();\n-        Collection<PartialDependenceGraph> pdps = partialDependencePlotProvider.explain(modelInfo, metadata);\n+        PredictionProvider modelInfo = TestUtils.getSumSkipModel(0);\n+        List<PartialDependenceGraph> pdps = partialDependencePlotProvider.explain(modelInfo, metadata);\n         assertNotNull(pdps);\n         for (PartialDependenceGraph pdp : pdps) {\n             assertNotNull(pdp.getFeature());\n             assertNotNull(pdp.getX());\n             assertNotNull(pdp.getY());\n             assertEquals(pdp.getX().length, pdp.getY().length);\n+            assertGraph(pdp);\n+        }\n+        // the first feature is always skipped by the model, so the predictions are not affected, hence PDP Y values are constant\n+        PartialDependenceGraph fixedFeatureGraph = pdps.get(0);\n+        assertEquals(Arrays.stream(fixedFeatureGraph.getY()).distinct().count(), 1);\n+\n+        // the other two instead change but in the same way, due the behaviour of FakeRandom in generating data/distributions\n+        assertArrayEquals(pdps.get(1).getY(), pdps.get(2).getY());\n+    }\n+\n+    private void assertGraph(PartialDependenceGraph pdp) {\n+        for (int i = 1; i < pdp.getX().length; i++) {\n+            assertNotEquals(Double.NaN, pdp.getX()[i]);\n+            assertNotEquals(Double.NaN, pdp.getY()[i]);\n+            assertTrue(pdp.getX()[i] > pdp.getX()[i - 1]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg3MzQ0OQ=="}, "originalCommit": {"oid": "efdda9023714222f2a6cd7d74c4b39cfb8dcdba7"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODY4OTgzOnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNzo1Njo1MVrOHPTgtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwNzozODowNlrOHPm9bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxMDM1Nw==", "bodyText": "ArrayList in general is better", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r485810357", "createdAt": "2020-09-09T17:56:51Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainer.java", "diffHunk": "@@ -74,19 +76,21 @@ public PartialDependencePlotExplainer() {\n     }\n \n     @Override\n-    public Collection<PartialDependenceGraph> explain(PredictionProvider model, PredictionProviderMetadata metadata) throws InterruptedException, ExecutionException, TimeoutException {\n+    public List<PartialDependenceGraph> explain(PredictionProvider model, PredictionProviderMetadata metadata) throws InterruptedException, ExecutionException, TimeoutException {\n         long start = System.currentTimeMillis();\n \n-        Collection<PartialDependenceGraph> pdps = new LinkedList<>();\n+        List<PartialDependenceGraph> pdps = new LinkedList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4aa3c044c6e8519c64565a517c14831643d8c49c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjEyOTAwNw==", "bodyText": "ok", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r486129007", "createdAt": "2020-09-10T07:38:06Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainer.java", "diffHunk": "@@ -74,19 +76,21 @@ public PartialDependencePlotExplainer() {\n     }\n \n     @Override\n-    public Collection<PartialDependenceGraph> explain(PredictionProvider model, PredictionProviderMetadata metadata) throws InterruptedException, ExecutionException, TimeoutException {\n+    public List<PartialDependenceGraph> explain(PredictionProvider model, PredictionProviderMetadata metadata) throws InterruptedException, ExecutionException, TimeoutException {\n         long start = System.currentTimeMillis();\n \n-        Collection<PartialDependenceGraph> pdps = new LinkedList<>();\n+        List<PartialDependenceGraph> pdps = new LinkedList<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxMDM1Nw=="}, "originalCommit": {"oid": "4aa3c044c6e8519c64565a517c14831643d8c49c"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODY5Mzg1OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNzo1ODowMVrOHPTjMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwODowMzo1MFrOHPn4dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxMDk5Mg==", "bodyText": "Can you please add a comment to explain why/when v can be NaN?", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r485810992", "createdAt": "2020-09-09T17:58:01Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainer.java", "diffHunk": "@@ -121,7 +124,12 @@ public PartialDependencePlotExplainer() {\n                     // prediction requests are batched per value of feature 'Xs' under analysis\n                     for (PredictionOutput predictionOutput : predictionOutputs) {\n                         Output output = predictionOutput.getOutputs().get(outputIndex);\n-                        marginalImpacts[i] += output.getScore() / (double) seriesLength;\n+                        // use numerical output when possible, otherwise only use the score\n+                        double v = output.getValue().asNumber();\n+                        if (Double.isNaN(v)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4aa3c044c6e8519c64565a517c14831643d8c49c"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE0NDExOA==", "bodyText": "ok", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r486144118", "createdAt": "2020-09-10T08:03:50Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainer.java", "diffHunk": "@@ -121,7 +124,12 @@ public PartialDependencePlotExplainer() {\n                     // prediction requests are batched per value of feature 'Xs' under analysis\n                     for (PredictionOutput predictionOutput : predictionOutputs) {\n                         Output output = predictionOutput.getOutputs().get(outputIndex);\n-                        marginalImpacts[i] += output.getScore() / (double) seriesLength;\n+                        // use numerical output when possible, otherwise only use the score\n+                        double v = output.getValue().asNumber();\n+                        if (Double.isNaN(v)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxMDk5Mg=="}, "originalCommit": {"oid": "4aa3c044c6e8519c64565a517c14831643d8c49c"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODcwMDAwOnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/utils/DataUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNzo1OTozOVrOHPTnDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwODowNDowNVrOHPn5BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxMTk4MA==", "bodyText": "Minor comment, what about use explicit variable names to improve readability? I.e. : desiredMean, desiredStdDeviation, actualStdDeviation etc", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r485811980", "createdAt": "2020-09-09T17:59:39Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/utils/DataUtils.java", "diffHunk": "@@ -66,13 +66,13 @@ private DataUtils() {\n         double d = getStdDev(data, m);\n \n         // force desired standard deviation\n-        double d1 = stdDeviation / d;\n+        double d1 = d != 0 ? stdDeviation / d : stdDeviation; // avoid division by zero", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4aa3c044c6e8519c64565a517c14831643d8c49c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE0NDI2MA==", "bodyText": "sure", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r486144260", "createdAt": "2020-09-10T08:04:05Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/utils/DataUtils.java", "diffHunk": "@@ -66,13 +66,13 @@ private DataUtils() {\n         double d = getStdDev(data, m);\n \n         // force desired standard deviation\n-        double d1 = stdDeviation / d;\n+        double d1 = d != 0 ? stdDeviation / d : stdDeviation; // avoid division by zero", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxMTk4MA=="}, "originalCommit": {"oid": "4aa3c044c6e8519c64565a517c14831643d8c49c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzAzODcxMTIyOnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODowMjo1NFrOHPTuOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQwODowNTo1MVrOHPn9Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxMzgxNg==", "bodyText": "Please review if FakeRandom is still required. I added it in the past just to stabilize the test", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r485813816", "createdAt": "2020-09-09T18:02:54Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainerTest.java", "diffHunk": "@@ -33,51 +33,72 @@\n import org.kie.kogito.explainability.model.Value;\n import org.kie.kogito.explainability.utils.DataUtils;\n \n-import java.util.Collection;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n \n import static java.util.concurrent.CompletableFuture.supplyAsync;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n class PartialDependencePlotExplainerTest {\n \n     PartialDependencePlotExplainer partialDependencePlotProvider = new PartialDependencePlotExplainer();\n     PredictionProviderMetadata metadata = new PredictionProviderMetadata() {\n         @Override\n         public DataDistribution getDataDistribution() {\n-            return DataUtils.generateRandomDataDistribution(10, 100, new FakeRandom());\n+            return DataUtils.generateRandomDataDistribution(3, 100, new FakeRandom());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4aa3c044c6e8519c64565a517c14831643d8c49c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjE0NTMwMg==", "bodyText": "I think it doesn't harm and it is useful to make sure test is deterministic without having to play with seeds.", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r486145302", "createdAt": "2020-09-10T08:05:51Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainerTest.java", "diffHunk": "@@ -33,51 +33,72 @@\n import org.kie.kogito.explainability.model.Value;\n import org.kie.kogito.explainability.utils.DataUtils;\n \n-import java.util.Collection;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n \n import static java.util.concurrent.CompletableFuture.supplyAsync;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n class PartialDependencePlotExplainerTest {\n \n     PartialDependencePlotExplainer partialDependencePlotProvider = new PartialDependencePlotExplainer();\n     PredictionProviderMetadata metadata = new PredictionProviderMetadata() {\n         @Override\n         public DataDistribution getDataDistribution() {\n-            return DataUtils.generateRandomDataDistribution(10, 100, new FakeRandom());\n+            return DataUtils.generateRandomDataDistribution(3, 100, new FakeRandom());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxMzgxNg=="}, "originalCommit": {"oid": "4aa3c044c6e8519c64565a517c14831643d8c49c"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0NjM0NjMwOnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjoyNDozNVrOHQcruw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMzoxNTo0OVrOHQeY2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAwOTIxMQ==", "bodyText": "You should not \"hide\" InterruptedException. Please rethrow it instead of wrap it in a different exception", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r487009211", "createdAt": "2020-09-11T12:24:35Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainer.java", "diffHunk": "@@ -133,4 +117,69 @@ public PartialDependencePlotExplainer() {\n         LOGGER.debug(\"explanation time: {}ms\", (end - start));\n         return pdps;\n     }\n+\n+    /**\n+     * Perform batch predictions on the model.\n+     *\n+     * @param model            the model to be queried\n+     * @param predictionInputs a batch of inputs\n+     * @return a batch of outputs\n+     */\n+    private List<PredictionOutput> getOutputs(PredictionProvider model, List<PredictionInput> predictionInputs) {\n+        List<PredictionOutput> predictionOutputs;\n+        try {\n+            predictionOutputs = model.predictAsync(predictionInputs).get(Config.INSTANCE.getAsyncTimeout(), Config.INSTANCE.getAsyncTimeUnit());\n+        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+            LOGGER.error(\"Impossible to obtain prediction {}\", e.getMessage());\n+            throw new GlobalExplanationException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c9bbed1863c32a050ee69dfb239269456b95147"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAzNzE0Nw==", "bodyText": "ok", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r487037147", "createdAt": "2020-09-11T13:15:49Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainer.java", "diffHunk": "@@ -133,4 +117,69 @@ public PartialDependencePlotExplainer() {\n         LOGGER.debug(\"explanation time: {}ms\", (end - start));\n         return pdps;\n     }\n+\n+    /**\n+     * Perform batch predictions on the model.\n+     *\n+     * @param model            the model to be queried\n+     * @param predictionInputs a batch of inputs\n+     * @return a batch of outputs\n+     */\n+    private List<PredictionOutput> getOutputs(PredictionProvider model, List<PredictionInput> predictionInputs) {\n+        List<PredictionOutput> predictionOutputs;\n+        try {\n+            predictionOutputs = model.predictAsync(predictionInputs).get(Config.INSTANCE.getAsyncTimeout(), Config.INSTANCE.getAsyncTimeUnit());\n+        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+            LOGGER.error(\"Impossible to obtain prediction {}\", e.getMessage());\n+            throw new GlobalExplanationException(e);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAwOTIxMQ=="}, "originalCommit": {"oid": "2c9bbed1863c32a050ee69dfb239269456b95147"}, "originalPosition": 132}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 694, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}