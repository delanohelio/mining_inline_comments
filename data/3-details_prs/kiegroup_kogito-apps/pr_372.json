{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY0MDU0NDA0", "number": 372, "title": "KOGITO-2933: Code cleanup on DE components", "bodyText": "Many thanks for submitting your Pull Request \u2764\ufe0f!\nPlease make sure that your PR meets the following requirements:\n\n You have read the contributors guide\n Pull Request title is properly formatted: KOGITO-XYZ Subject\n Pull Request title contains the target branch if not targeting master: [0.9.x] KOGITO-XYZ Subject\n Pull Request contains link to the JIRA issue\n Pull Request contains link to any dependent or related Pull Request\n Pull Request contains description of the issue\n Pull Request does not include fixes for issues other than the main ticket", "createdAt": "2020-08-06T14:12:34Z", "url": "https://github.com/kiegroup/kogito-apps/pull/372", "merged": true, "mergeCommit": {"oid": "4fdb72bc02dcdfa409f7cecc37576f27eaa8012c"}, "closed": true, "closedAt": "2020-08-11T07:52:33Z", "author": {"login": "Sara4994"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc8RCLNABqjM2Mjk0MzU4MjE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc9v3knABqjM2NDE0ODAwOTg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "630727b78d03b97236a81eddf6600abdc64d01a2", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/630727b78d03b97236a81eddf6600abdc64d01a2", "committedDate": "2020-08-06T14:11:32Z", "message": "KOGITO-2933: Code cleanup on DE components"}, "afterCommit": {"oid": "731f99584d4df07143932d3cbfcec1c774380c9c", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/731f99584d4df07143932d3cbfcec1c774380c9c", "committedDate": "2020-08-06T14:51:54Z", "message": "KOGITO-2933: Code cleanup on DE components"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMTY5NTIy", "url": "https://github.com/kiegroup/kogito-apps/pull/372#pullrequestreview-463169522", "createdAt": "2020-08-07T09:27:53Z", "commit": {"oid": "731f99584d4df07143932d3cbfcec1c774380c9c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOToyNzo1M1rOG9TExw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOTo0NToyNVrOG9TmWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyODgzOQ==", "bodyText": "can we specify type of filterChips ?\nI think it could be\n(filterChips: (chips: string[]) => string[]) => void", "url": "https://github.com/kiegroup/kogito-apps/pull/372#discussion_r466928839", "createdAt": "2020-08-07T09:27:53Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "diffHunk": "@@ -15,40 +15,44 @@ import {\n } from '@patternfly/react-core';\n import { GraphQL } from '../../../graphql/types';\n import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n-import gql from 'graphql-tag';\n-import { useApolloClient } from 'react-apollo';\n import { QuestionCircleIcon } from '@patternfly/react-icons';\n-import { validateResponse, set, removeDuplicates } from '../../../utils/Utils';\n+import { set, removeDuplicates } from '../../../utils/Utils';\n import '../../styles.css';\n \n-const DomainExplorerFilterOptions = ({\n-  enableCache,\n+interface ResponseType {\n+  loading?: boolean;\n+  data: any;\n+}\n+interface IOwnProps {\n+  filterChips: string[];\n+  finalFilters: object;\n+  generateFilterQuery: () => void;\n+  getQueryTypes: ResponseType;\n+  getSchema: ResponseType;\n+  reset: boolean;\n+  runQuery: boolean;\n+  setFilterChips: (filterChips) => void;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "731f99584d4df07143932d3cbfcec1c774380c9c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyOTI1Nw==", "bodyText": "also here?\nsetFinalFilters: (finalFilters: (filters: string[]) => void) => void;", "url": "https://github.com/kiegroup/kogito-apps/pull/372#discussion_r466929257", "createdAt": "2020-08-07T09:28:48Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "diffHunk": "@@ -15,40 +15,44 @@ import {\n } from '@patternfly/react-core';\n import { GraphQL } from '../../../graphql/types';\n import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n-import gql from 'graphql-tag';\n-import { useApolloClient } from 'react-apollo';\n import { QuestionCircleIcon } from '@patternfly/react-icons';\n-import { validateResponse, set, removeDuplicates } from '../../../utils/Utils';\n+import { set, removeDuplicates } from '../../../utils/Utils';\n import '../../styles.css';\n \n-const DomainExplorerFilterOptions = ({\n-  enableCache,\n+interface ResponseType {\n+  loading?: boolean;\n+  data: any;\n+}\n+interface IOwnProps {\n+  filterChips: string[];\n+  finalFilters: object;\n+  generateFilterQuery: () => void;\n+  getQueryTypes: ResponseType;\n+  getSchema: ResponseType;\n+  reset: boolean;\n+  runQuery: boolean;\n+  setFilterChips: (filterChips) => void;\n+  setFinalFilters: (finalFilters) => void;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "731f99584d4df07143932d3cbfcec1c774380c9c"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkyOTc2MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              setOffset: (offset) => void;\n          \n          \n            \n              setReset: (reset) => void;\n          \n          \n            \n              setRunQuery: (runQuery) => void;\n          \n          \n            \n              setOffset: (offset: number) => void;\n          \n          \n            \n              setReset: (reset: boolean) => void;\n          \n          \n            \n              setRunQuery: (runQuery: boolean) => void;", "url": "https://github.com/kiegroup/kogito-apps/pull/372#discussion_r466929761", "createdAt": "2020-08-07T09:29:49Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "diffHunk": "@@ -15,40 +15,44 @@ import {\n } from '@patternfly/react-core';\n import { GraphQL } from '../../../graphql/types';\n import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n-import gql from 'graphql-tag';\n-import { useApolloClient } from 'react-apollo';\n import { QuestionCircleIcon } from '@patternfly/react-icons';\n-import { validateResponse, set, removeDuplicates } from '../../../utils/Utils';\n+import { set, removeDuplicates } from '../../../utils/Utils';\n import '../../styles.css';\n \n-const DomainExplorerFilterOptions = ({\n-  enableCache,\n+interface ResponseType {\n+  loading?: boolean;\n+  data: any;\n+}\n+interface IOwnProps {\n+  filterChips: string[];\n+  finalFilters: object;\n+  generateFilterQuery: () => void;\n+  getQueryTypes: ResponseType;\n+  getSchema: ResponseType;\n+  reset: boolean;\n+  runQuery: boolean;\n+  setFilterChips: (filterChips) => void;\n+  setFinalFilters: (finalFilters) => void;\n+  setOffset: (offset) => void;\n+  setReset: (reset) => void;\n+  setRunQuery: (runQuery) => void;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "731f99584d4df07143932d3cbfcec1c774380c9c"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMzI1MQ==", "bodyText": "can we specify type of type? :-)", "url": "https://github.com/kiegroup/kogito-apps/pull/372#discussion_r466933251", "createdAt": "2020-08-07T09:36:46Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -38,22 +38,45 @@ import {\n   KogitoEmptyStateType\n } from '../../Atoms/KogitoEmptyState/KogitoEmptyState';\n \n-const DomainExplorerTable = ({\n+interface RowContent {\n+  cells: string[] | object[];\n+  parent?: number;\n+  isOpen?: boolean;\n+  rowKey: string;\n+}\n+interface IOwnProps {\n+  columnFilters: any[];\n+  displayTable: boolean;\n+  displayEmptyState: boolean;\n+  filterError: string;\n+  finalFilters: object;\n+  filterChips: string[];\n+  handleRetry: () => void;\n+  isLoadingMore: boolean;\n+  offset: number;\n+  onDeleteChip: (type) => void;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "731f99584d4df07143932d3cbfcec1c774380c9c"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMzU3OA==", "bodyText": "also rows, can we define type? even any[] would help at least.", "url": "https://github.com/kiegroup/kogito-apps/pull/372#discussion_r466933578", "createdAt": "2020-08-07T09:37:31Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -38,22 +38,45 @@ import {\n   KogitoEmptyStateType\n } from '../../Atoms/KogitoEmptyState/KogitoEmptyState';\n \n-const DomainExplorerTable = ({\n+interface RowContent {\n+  cells: string[] | object[];\n+  parent?: number;\n+  isOpen?: boolean;\n+  rowKey: string;\n+}\n+interface IOwnProps {\n+  columnFilters: any[];\n+  displayTable: boolean;\n+  displayEmptyState: boolean;\n+  filterError: string;\n+  finalFilters: object;\n+  filterChips: string[];\n+  handleRetry: () => void;\n+  isLoadingMore: boolean;\n+  offset: number;\n+  onDeleteChip: (type) => void;\n+  parameters: object[];\n+  rows: RowContent[];\n+  selected: string[];\n+  setRows: (rows) => void;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "731f99584d4df07143932d3cbfcec1c774380c9c"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzNzA5OA==", "bodyText": "can we add comment on what does it actually mean when we have true result? The finalFilters check is clear and understandable, but I have issue understanding why parameters need to be greater than 1 to perform any action.", "url": "https://github.com/kiegroup/kogito-apps/pull/372#discussion_r466937098", "createdAt": "2020-08-07T09:44:45Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/components/Organisms/DomainExplorer/DomainExplorer.tsx", "diffHunk": "@@ -201,6 +207,64 @@ const DomainExplorer: React.FC<IOwnProps> = ({\n     fields: parameters\n   });\n \n+  async function generateFilterQuery() {\n+    setTableLoading(true);\n+    setEnableRefresh(true);\n+    if (\n+      parameters.length > 1 &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "731f99584d4df07143932d3cbfcec1c774380c9c"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzNzQzMg==", "bodyText": "here I am not sure what we expect the firstKey to be and why don't we check that particular one.", "url": "https://github.com/kiegroup/kogito-apps/pull/372#discussion_r466937432", "createdAt": "2020-08-07T09:45:25Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/components/Organisms/DomainExplorer/DomainExplorer.tsx", "diffHunk": "@@ -201,6 +207,64 @@ const DomainExplorer: React.FC<IOwnProps> = ({\n     fields: parameters\n   });\n \n+  async function generateFilterQuery() {\n+    setTableLoading(true);\n+    setEnableRefresh(true);\n+    if (\n+      parameters.length > 1 &&\n+      finalFilters &&\n+      Object.keys(finalFilters).length > 0\n+    ) {\n+      try {\n+        const response = await client.query({\n+          query: gql`\n+            ${domainQuery.query}\n+          `,\n+          variables: domainQuery.variables,\n+          fetchPolicy: enableCache ? 'cache-first' : 'network-only'\n+        });\n+        const firstKey = Object.keys(response.data)[0];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "731f99584d4df07143932d3cbfcec1c774380c9c"}, "originalPosition": 54}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "731f99584d4df07143932d3cbfcec1c774380c9c", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/731f99584d4df07143932d3cbfcec1c774380c9c", "committedDate": "2020-08-06T14:51:54Z", "message": "KOGITO-2933: Code cleanup on DE components"}, "afterCommit": {"oid": "162b7d8fe4f4e7144665496516bf69e272383d2a", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/162b7d8fe4f4e7144665496516bf69e272383d2a", "committedDate": "2020-08-07T12:00:14Z", "message": "KOGITO-2933: Code cleanup on DE components"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMjYzNzYy", "url": "https://github.com/kiegroup/kogito-apps/pull/372#pullrequestreview-463263762", "createdAt": "2020-08-07T12:14:51Z", "commit": {"oid": "162b7d8fe4f4e7144665496516bf69e272383d2a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMjgxMzY2", "url": "https://github.com/kiegroup/kogito-apps/pull/372#pullrequestreview-463281366", "createdAt": "2020-08-07T12:44:46Z", "commit": {"oid": "162b7d8fe4f4e7144665496516bf69e272383d2a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "162b7d8fe4f4e7144665496516bf69e272383d2a", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/162b7d8fe4f4e7144665496516bf69e272383d2a", "committedDate": "2020-08-07T12:00:14Z", "message": "KOGITO-2933: Code cleanup on DE components"}, "afterCommit": {"oid": "7ddf4951fc79815088aff36cdf3e7b7a9b44f99e", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/7ddf4951fc79815088aff36cdf3e7b7a9b44f99e", "committedDate": "2020-08-09T09:54:59Z", "message": "KOGITO-2933: Code cleanup on DE components"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzOTU0OTQ5", "url": "https://github.com/kiegroup/kogito-apps/pull/372#pullrequestreview-463954949", "createdAt": "2020-08-10T04:44:14Z", "commit": {"oid": "7ddf4951fc79815088aff36cdf3e7b7a9b44f99e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7ddf4951fc79815088aff36cdf3e7b7a9b44f99e", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/7ddf4951fc79815088aff36cdf3e7b7a9b44f99e", "committedDate": "2020-08-09T09:54:59Z", "message": "KOGITO-2933: Code cleanup on DE components"}, "afterCommit": {"oid": "bcc6cea4d6c191de0b8cf8a4d5fffe10a4f22339", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/bcc6cea4d6c191de0b8cf8a4d5fffe10a4f22339", "committedDate": "2020-08-10T09:59:10Z", "message": "KOGITO-2933: Code cleanup on DE components"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY0MTI5NTEy", "url": "https://github.com/kiegroup/kogito-apps/pull/372#pullrequestreview-464129512", "createdAt": "2020-08-10T10:54:29Z", "commit": {"oid": "bcc6cea4d6c191de0b8cf8a4d5fffe10a4f22339"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bcc6cea4d6c191de0b8cf8a4d5fffe10a4f22339", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/bcc6cea4d6c191de0b8cf8a4d5fffe10a4f22339", "committedDate": "2020-08-10T09:59:10Z", "message": "KOGITO-2933: Code cleanup on DE components"}, "afterCommit": {"oid": "7140f5110b8c9c675fbf5be0949639b224e3d77e", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/7140f5110b8c9c675fbf5be0949639b224e3d77e", "committedDate": "2020-08-10T14:14:04Z", "message": "KOGITO-2933: Code cleanup on DE components"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7140f5110b8c9c675fbf5be0949639b224e3d77e", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/7140f5110b8c9c675fbf5be0949639b224e3d77e", "committedDate": "2020-08-10T14:14:04Z", "message": "KOGITO-2933: Code cleanup on DE components"}, "afterCommit": {"oid": "cb6c36ca8360f6f343662409c57912d30161f0ba", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/cb6c36ca8360f6f343662409c57912d30161f0ba", "committedDate": "2020-08-10T15:41:57Z", "message": "KOGITO-2933: Code cleanup on DE components"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6d7ef4c7ed5029877cb13a23a79a51e2191d0ba0", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/6d7ef4c7ed5029877cb13a23a79a51e2191d0ba0", "committedDate": "2020-08-11T05:20:53Z", "message": "KOGITO-2933: Code cleanup on DE components"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cb6c36ca8360f6f343662409c57912d30161f0ba", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/cb6c36ca8360f6f343662409c57912d30161f0ba", "committedDate": "2020-08-10T15:41:57Z", "message": "KOGITO-2933: Code cleanup on DE components"}, "afterCommit": {"oid": "6d7ef4c7ed5029877cb13a23a79a51e2191d0ba0", "author": {"user": {"login": "Sara4994", "name": null}}, "url": "https://github.com/kiegroup/kogito-apps/commit/6d7ef4c7ed5029877cb13a23a79a51e2191d0ba0", "committedDate": "2020-08-11T05:20:53Z", "message": "KOGITO-2933: Code cleanup on DE components"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4978, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}