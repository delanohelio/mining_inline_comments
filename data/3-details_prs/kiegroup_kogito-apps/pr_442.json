{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDc5ODMzMDA0", "number": 442, "title": "KOGITO-3271 - PDPExplainer(Test) improvements", "bodyText": "Fix to PartialDependencePlotExplainer to avoid problems with data having standard deviation = 0, also using numerical outputs when possible (not just their score).\nImproved PartialDependencePlotExplainerTest by testing shape and expected PDP graph contents.\nSee https://issues.redhat.com/browse/KOGITO-3271\nMany thanks for submitting your Pull Request \u2764\ufe0f!\nPlease make sure that your PR meets the following requirements:\n\n You have read the contributors guide\n Pull Request title is properly formatted: KOGITO-XYZ Subject\n Pull Request title contains the target branch if not targeting master: [0.9.x] KOGITO-XYZ Subject\n Pull Request contains link to the JIRA issue\n Pull Request contains link to any dependent or related Pull Request\n Pull Request contains description of the issue\n Pull Request does not include fixes for issues other than the main ticket", "createdAt": "2020-09-04T16:01:41Z", "url": "https://github.com/kiegroup/kogito-apps/pull/442", "merged": true, "mergeCommit": {"oid": "5b81ff67e7d68fa9ab3af30efc4f5e9f7b2de534"}, "closed": true, "closedAt": "2020-09-29T10:02:45Z", "author": {"login": "tteofili"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdFnYQfgH2gAyNDc5ODMzMDA0OmVmZGRhOTAyMzcxNDIyMmYyYTZjZDdkNzRjNGIzOWNmYjhkY2RiYTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdNlL2ggFqTQ5ODMwNTI2Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "efdda9023714222f2a6cd7d74c4b39cfb8dcdba7", "author": {"user": {"login": "tteofili", "name": "Tommaso Teofili"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/efdda9023714222f2a6cd7d74c4b39cfb8dcdba7", "committedDate": "2020-09-04T15:59:39Z", "message": "KOGITO-3271 - Fixes for 0 stdDev data, using outputs in PDPExplainer, more consistent testing in PDPExplainerTest"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg0MDY4ODk0", "url": "https://github.com/kiegroup/kogito-apps/pull/442#pullrequestreview-484068894", "createdAt": "2020-09-08T12:10:39Z", "commit": {"oid": "efdda9023714222f2a6cd7d74c4b39cfb8dcdba7"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMjoxMDozOVrOHOZ6sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOFQxMjoyMjozNlrOHOaU6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg2NjczOQ==", "bodyText": "remove redundant comment?", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r484866739", "createdAt": "2020-09-08T12:10:39Z", "author": {"login": "r00ta"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/utils/DataUtils.java", "diffHunk": "@@ -66,13 +66,13 @@ private DataUtils() {\n         double d = getStdDev(data, m);\n \n         // force desired standard deviation\n-        double d1 = stdDeviation / d;\n+        double d1 = d != 0 ? stdDeviation / d : stdDeviation; // avoid division by zero\n         for (int i = 0; i < size; i++) {\n             data[i] *= d1;\n         }\n \n         // get the new mean\n-        double m1 = m * stdDeviation / d;\n+        double m1 = d != 0 ? m * stdDeviation / d : m * stdDeviation; // avoid division by zero", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efdda9023714222f2a6cd7d74c4b39cfb8dcdba7"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg2OTA5MQ==", "bodyText": "Just for my understanding, what do you mean with this comment?  why is the first feature always skipped?", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r484869091", "createdAt": "2020-09-08T12:14:56Z", "author": {"login": "r00ta"}, "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainerTest.java", "diffHunk": "@@ -33,51 +33,71 @@\n import org.kie.kogito.explainability.model.Value;\n import org.kie.kogito.explainability.utils.DataUtils;\n \n-import java.util.Collection;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n \n import static java.util.concurrent.CompletableFuture.supplyAsync;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n class PartialDependencePlotExplainerTest {\n \n     PartialDependencePlotExplainer partialDependencePlotProvider = new PartialDependencePlotExplainer();\n     PredictionProviderMetadata metadata = new PredictionProviderMetadata() {\n         @Override\n         public DataDistribution getDataDistribution() {\n-            return DataUtils.generateRandomDataDistribution(10, 100, new FakeRandom());\n+            return DataUtils.generateRandomDataDistribution(3, 100, new FakeRandom());\n         }\n \n         @Override\n         public PredictionInput getInputShape() {\n             List<Feature> features = new LinkedList<>();\n-            features.add(FeatureFactory.newTextFeature(\"text\", \"\"));\n+            features.add(FeatureFactory.newNumericalFeature(\"f0\", 0));\n+            features.add(FeatureFactory.newNumericalFeature(\"f1\", 0));\n+            features.add(FeatureFactory.newNumericalFeature(\"f2\", 0));\n             return new PredictionInput(features);\n         }\n \n         @Override\n         public PredictionOutput getOutputShape() {\n             List<Output> outputs = new LinkedList<>();\n-            outputs.add(new Output(\"spam\", Type.BOOLEAN, new Value<>(null), 0d));\n+            outputs.add(new Output(\"spam\", Type.BOOLEAN, new Value<>(false), 0d));\n             return new PredictionOutput(outputs);\n         }\n     };\n \n     @Test\n     void testPdpTextClassifier() throws Exception {\n-        PredictionProvider modelInfo = TestUtils.getDummyTextClassifier();\n-        Collection<PartialDependenceGraph> pdps = partialDependencePlotProvider.explain(modelInfo, metadata);\n+        PredictionProvider modelInfo = TestUtils.getSumSkipModel(0);\n+        List<PartialDependenceGraph> pdps = partialDependencePlotProvider.explain(modelInfo, metadata);\n         assertNotNull(pdps);\n         for (PartialDependenceGraph pdp : pdps) {\n             assertNotNull(pdp.getFeature());\n             assertNotNull(pdp.getX());\n             assertNotNull(pdp.getY());\n             assertEquals(pdp.getX().length, pdp.getY().length);\n+            assertGraph(pdp);\n+        }\n+        // the first feature is always skipped by the model, so the predictions are not affected, hence PDP Y values are constant", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efdda9023714222f2a6cd7d74c4b39cfb8dcdba7"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg3MDY3MA==", "bodyText": "iiuc this is somehow dependent to FakeRandom, I'm not sure it's a good idea to assert something that depends on that implementation (also because it returns always the same number)", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r484870670", "createdAt": "2020-09-08T12:17:44Z", "author": {"login": "r00ta"}, "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainerTest.java", "diffHunk": "@@ -33,51 +33,71 @@\n import org.kie.kogito.explainability.model.Value;\n import org.kie.kogito.explainability.utils.DataUtils;\n \n-import java.util.Collection;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n \n import static java.util.concurrent.CompletableFuture.supplyAsync;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n class PartialDependencePlotExplainerTest {\n \n     PartialDependencePlotExplainer partialDependencePlotProvider = new PartialDependencePlotExplainer();\n     PredictionProviderMetadata metadata = new PredictionProviderMetadata() {\n         @Override\n         public DataDistribution getDataDistribution() {\n-            return DataUtils.generateRandomDataDistribution(10, 100, new FakeRandom());\n+            return DataUtils.generateRandomDataDistribution(3, 100, new FakeRandom());\n         }\n \n         @Override\n         public PredictionInput getInputShape() {\n             List<Feature> features = new LinkedList<>();\n-            features.add(FeatureFactory.newTextFeature(\"text\", \"\"));\n+            features.add(FeatureFactory.newNumericalFeature(\"f0\", 0));\n+            features.add(FeatureFactory.newNumericalFeature(\"f1\", 0));\n+            features.add(FeatureFactory.newNumericalFeature(\"f2\", 0));\n             return new PredictionInput(features);\n         }\n \n         @Override\n         public PredictionOutput getOutputShape() {\n             List<Output> outputs = new LinkedList<>();\n-            outputs.add(new Output(\"spam\", Type.BOOLEAN, new Value<>(null), 0d));\n+            outputs.add(new Output(\"spam\", Type.BOOLEAN, new Value<>(false), 0d));\n             return new PredictionOutput(outputs);\n         }\n     };\n \n     @Test\n     void testPdpTextClassifier() throws Exception {\n-        PredictionProvider modelInfo = TestUtils.getDummyTextClassifier();\n-        Collection<PartialDependenceGraph> pdps = partialDependencePlotProvider.explain(modelInfo, metadata);\n+        PredictionProvider modelInfo = TestUtils.getSumSkipModel(0);\n+        List<PartialDependenceGraph> pdps = partialDependencePlotProvider.explain(modelInfo, metadata);\n         assertNotNull(pdps);\n         for (PartialDependenceGraph pdp : pdps) {\n             assertNotNull(pdp.getFeature());\n             assertNotNull(pdp.getX());\n             assertNotNull(pdp.getY());\n             assertEquals(pdp.getX().length, pdp.getY().length);\n+            assertGraph(pdp);\n+        }\n+        // the first feature is always skipped by the model, so the predictions are not affected, hence PDP Y values are constant\n+        PartialDependenceGraph fixedFeatureGraph = pdps.get(0);\n+        assertEquals(Arrays.stream(fixedFeatureGraph.getY()).distinct().count(), 1);\n+\n+        // the other two instead change but in the same way, due the behaviour of FakeRandom in generating data/distributions", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efdda9023714222f2a6cd7d74c4b39cfb8dcdba7"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NDg3MzQ0OQ==", "bodyText": "Since Double.Nan > whatever is always false you can remove the first assertion. Regarding the second assertion, since the loop starts from 1 the first element of pdp.getY() is not checked", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r484873449", "createdAt": "2020-09-08T12:22:36Z", "author": {"login": "r00ta"}, "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainerTest.java", "diffHunk": "@@ -33,51 +33,71 @@\n import org.kie.kogito.explainability.model.Value;\n import org.kie.kogito.explainability.utils.DataUtils;\n \n-import java.util.Collection;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n \n import static java.util.concurrent.CompletableFuture.supplyAsync;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n class PartialDependencePlotExplainerTest {\n \n     PartialDependencePlotExplainer partialDependencePlotProvider = new PartialDependencePlotExplainer();\n     PredictionProviderMetadata metadata = new PredictionProviderMetadata() {\n         @Override\n         public DataDistribution getDataDistribution() {\n-            return DataUtils.generateRandomDataDistribution(10, 100, new FakeRandom());\n+            return DataUtils.generateRandomDataDistribution(3, 100, new FakeRandom());\n         }\n \n         @Override\n         public PredictionInput getInputShape() {\n             List<Feature> features = new LinkedList<>();\n-            features.add(FeatureFactory.newTextFeature(\"text\", \"\"));\n+            features.add(FeatureFactory.newNumericalFeature(\"f0\", 0));\n+            features.add(FeatureFactory.newNumericalFeature(\"f1\", 0));\n+            features.add(FeatureFactory.newNumericalFeature(\"f2\", 0));\n             return new PredictionInput(features);\n         }\n \n         @Override\n         public PredictionOutput getOutputShape() {\n             List<Output> outputs = new LinkedList<>();\n-            outputs.add(new Output(\"spam\", Type.BOOLEAN, new Value<>(null), 0d));\n+            outputs.add(new Output(\"spam\", Type.BOOLEAN, new Value<>(false), 0d));\n             return new PredictionOutput(outputs);\n         }\n     };\n \n     @Test\n     void testPdpTextClassifier() throws Exception {\n-        PredictionProvider modelInfo = TestUtils.getDummyTextClassifier();\n-        Collection<PartialDependenceGraph> pdps = partialDependencePlotProvider.explain(modelInfo, metadata);\n+        PredictionProvider modelInfo = TestUtils.getSumSkipModel(0);\n+        List<PartialDependenceGraph> pdps = partialDependencePlotProvider.explain(modelInfo, metadata);\n         assertNotNull(pdps);\n         for (PartialDependenceGraph pdp : pdps) {\n             assertNotNull(pdp.getFeature());\n             assertNotNull(pdp.getX());\n             assertNotNull(pdp.getY());\n             assertEquals(pdp.getX().length, pdp.getY().length);\n+            assertGraph(pdp);\n+        }\n+        // the first feature is always skipped by the model, so the predictions are not affected, hence PDP Y values are constant\n+        PartialDependenceGraph fixedFeatureGraph = pdps.get(0);\n+        assertEquals(Arrays.stream(fixedFeatureGraph.getY()).distinct().count(), 1);\n+\n+        // the other two instead change but in the same way, due the behaviour of FakeRandom in generating data/distributions\n+        assertArrayEquals(pdps.get(1).getY(), pdps.get(2).getY());\n+    }\n+\n+    private void assertGraph(PartialDependenceGraph pdp) {\n+        for (int i = 1; i < pdp.getX().length; i++) {\n+            assertNotEquals(Double.NaN, pdp.getX()[i]);\n+            assertNotEquals(Double.NaN, pdp.getY()[i]);\n+            assertTrue(pdp.getX()[i] > pdp.getX()[i - 1]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "efdda9023714222f2a6cd7d74c4b39cfb8dcdba7"}, "originalPosition": 74}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4aa3c044c6e8519c64565a517c14831643d8c49c", "author": {"user": {"login": "tteofili", "name": "Tommaso Teofili"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/4aa3c044c6e8519c64565a517c14831643d8c49c", "committedDate": "2020-09-08T14:01:44Z", "message": "KOGITO-3271 - review based improvements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1MjY1OTky", "url": "https://github.com/kiegroup/kogito-apps/pull/442#pullrequestreview-485265992", "createdAt": "2020-09-09T17:56:51Z", "commit": {"oid": "4aa3c044c6e8519c64565a517c14831643d8c49c"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxNzo1Njo1MVrOHPTgtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wOVQxODowMjo1NFrOHPTuOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxMDM1Nw==", "bodyText": "ArrayList in general is better", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r485810357", "createdAt": "2020-09-09T17:56:51Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainer.java", "diffHunk": "@@ -74,19 +76,21 @@ public PartialDependencePlotExplainer() {\n     }\n \n     @Override\n-    public Collection<PartialDependenceGraph> explain(PredictionProvider model, PredictionProviderMetadata metadata) throws InterruptedException, ExecutionException, TimeoutException {\n+    public List<PartialDependenceGraph> explain(PredictionProvider model, PredictionProviderMetadata metadata) throws InterruptedException, ExecutionException, TimeoutException {\n         long start = System.currentTimeMillis();\n \n-        Collection<PartialDependenceGraph> pdps = new LinkedList<>();\n+        List<PartialDependenceGraph> pdps = new LinkedList<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4aa3c044c6e8519c64565a517c14831643d8c49c"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxMDk5Mg==", "bodyText": "Can you please add a comment to explain why/when v can be NaN?", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r485810992", "createdAt": "2020-09-09T17:58:01Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainer.java", "diffHunk": "@@ -121,7 +124,12 @@ public PartialDependencePlotExplainer() {\n                     // prediction requests are batched per value of feature 'Xs' under analysis\n                     for (PredictionOutput predictionOutput : predictionOutputs) {\n                         Output output = predictionOutput.getOutputs().get(outputIndex);\n-                        marginalImpacts[i] += output.getScore() / (double) seriesLength;\n+                        // use numerical output when possible, otherwise only use the score\n+                        double v = output.getValue().asNumber();\n+                        if (Double.isNaN(v)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4aa3c044c6e8519c64565a517c14831643d8c49c"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxMTk4MA==", "bodyText": "Minor comment, what about use explicit variable names to improve readability? I.e. : desiredMean, desiredStdDeviation, actualStdDeviation etc", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r485811980", "createdAt": "2020-09-09T17:59:39Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/utils/DataUtils.java", "diffHunk": "@@ -66,13 +66,13 @@ private DataUtils() {\n         double d = getStdDev(data, m);\n \n         // force desired standard deviation\n-        double d1 = stdDeviation / d;\n+        double d1 = d != 0 ? stdDeviation / d : stdDeviation; // avoid division by zero", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4aa3c044c6e8519c64565a517c14831643d8c49c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NTgxMzgxNg==", "bodyText": "Please review if FakeRandom is still required. I added it in the past just to stabilize the test", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r485813816", "createdAt": "2020-09-09T18:02:54Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainerTest.java", "diffHunk": "@@ -33,51 +33,72 @@\n import org.kie.kogito.explainability.model.Value;\n import org.kie.kogito.explainability.utils.DataUtils;\n \n-import java.util.Collection;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.LinkedList;\n import java.util.List;\n import java.util.concurrent.TimeUnit;\n import java.util.concurrent.TimeoutException;\n \n import static java.util.concurrent.CompletableFuture.supplyAsync;\n+import static org.junit.jupiter.api.Assertions.assertArrayEquals;\n import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotEquals;\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n \n class PartialDependencePlotExplainerTest {\n \n     PartialDependencePlotExplainer partialDependencePlotProvider = new PartialDependencePlotExplainer();\n     PredictionProviderMetadata metadata = new PredictionProviderMetadata() {\n         @Override\n         public DataDistribution getDataDistribution() {\n-            return DataUtils.generateRandomDataDistribution(10, 100, new FakeRandom());\n+            return DataUtils.generateRandomDataDistribution(3, 100, new FakeRandom());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4aa3c044c6e8519c64565a517c14831643d8c49c"}, "originalPosition": 26}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6792e3fcbc367afbac0bb340f1d75566bf9e57a8", "author": {"user": {"login": "tteofili", "name": "Tommaso Teofili"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/6792e3fcbc367afbac0bb340f1d75566bf9e57a8", "committedDate": "2020-09-10T08:10:13Z", "message": "KOGITO-3271 - review based fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg1Njg5ODEw", "url": "https://github.com/kiegroup/kogito-apps/pull/442#pullrequestreview-485689810", "createdAt": "2020-09-10T08:14:18Z", "commit": {"oid": "6792e3fcbc367afbac0bb340f1d75566bf9e57a8"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8e31168fa249c5fa8ef07b017f1dc52456c0cfba", "author": {"user": {"login": "tteofili", "name": "Tommaso Teofili"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/8e31168fa249c5fa8ef07b017f1dc52456c0cfba", "committedDate": "2020-09-10T08:47:52Z", "message": "KOGITO-3271 - reducing cognitive complexity, minor fixes (names, imports, etc.)"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c9bbed1863c32a050ee69dfb239269456b95147", "author": {"user": {"login": "tteofili", "name": "Tommaso Teofili"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/2c9bbed1863c32a050ee69dfb239269456b95147", "committedDate": "2020-09-10T12:30:32Z", "message": "KOGITO-3271 - adjusted test to throw correct Exception"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg2NzU4MDkz", "url": "https://github.com/kiegroup/kogito-apps/pull/442#pullrequestreview-486758093", "createdAt": "2020-09-11T12:24:35Z", "commit": {"oid": "2c9bbed1863c32a050ee69dfb239269456b95147"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjoyNDozNVrOHQcruw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQxMjoyNDozNVrOHQcruw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzAwOTIxMQ==", "bodyText": "You should not \"hide\" InterruptedException. Please rethrow it instead of wrap it in a different exception", "url": "https://github.com/kiegroup/kogito-apps/pull/442#discussion_r487009211", "createdAt": "2020-09-11T12:24:35Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainer.java", "diffHunk": "@@ -133,4 +117,69 @@ public PartialDependencePlotExplainer() {\n         LOGGER.debug(\"explanation time: {}ms\", (end - start));\n         return pdps;\n     }\n+\n+    /**\n+     * Perform batch predictions on the model.\n+     *\n+     * @param model            the model to be queried\n+     * @param predictionInputs a batch of inputs\n+     * @return a batch of outputs\n+     */\n+    private List<PredictionOutput> getOutputs(PredictionProvider model, List<PredictionInput> predictionInputs) {\n+        List<PredictionOutput> predictionOutputs;\n+        try {\n+            predictionOutputs = model.predictAsync(predictionInputs).get(Config.INSTANCE.getAsyncTimeout(), Config.INSTANCE.getAsyncTimeUnit());\n+        } catch (InterruptedException | ExecutionException | TimeoutException e) {\n+            LOGGER.error(\"Impossible to obtain prediction {}\", e.getMessage());\n+            throw new GlobalExplanationException(e);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2c9bbed1863c32a050ee69dfb239269456b95147"}, "originalPosition": 132}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fc5a014728f58f8d34bf5ed061bc792daf6b1e3f", "author": {"user": {"login": "tteofili", "name": "Tommaso Teofili"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/fc5a014728f58f8d34bf5ed061bc792daf6b1e3f", "committedDate": "2020-09-15T15:23:24Z", "message": "KOGITO-3271 - minor fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e407abe233bb519b218f8f5ba89b081ca62574d1", "author": {"user": {"login": "tteofili", "name": "Tommaso Teofili"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/e407abe233bb519b218f8f5ba89b081ca62574d1", "committedDate": "2020-09-18T13:25:14Z", "message": "KOGITo-3271 - removed unused import"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4MzA1MjYz", "url": "https://github.com/kiegroup/kogito-apps/pull/442#pullrequestreview-498305263", "createdAt": "2020-09-29T09:57:42Z", "commit": {"oid": "e407abe233bb519b218f8f5ba89b081ca62574d1"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4760, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}