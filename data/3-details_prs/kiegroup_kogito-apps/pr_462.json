{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg5MDU0NzE1", "number": 462, "title": "KOGITO-3339 Integrate sorting in task inbox", "bodyText": "Many thanks for submitting your Pull Request \u2764\ufe0f!\nDescription: This pull request integrates sorting in the task inbox component.\nJIRA: https://issues.redhat.com/browse/KOGITO-3339", "createdAt": "2020-09-18T04:01:45Z", "url": "https://github.com/kiegroup/kogito-apps/pull/462", "merged": true, "mergeCommit": {"oid": "cc5d54984df9c1718ef55cc3e9768140961cf5e2"}, "closed": true, "closedAt": "2020-09-25T12:15:17Z", "author": {"login": "AjayJagan"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdJ-iQUgBqjM3ODA5NDUwODc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdMUX4pgFqTQ5NjM0ODA1MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "210eb99f554926727022f537fbe0297dd7f8200f", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/210eb99f554926727022f537fbe0297dd7f8200f", "committedDate": "2020-09-18T03:55:24Z", "message": "KOGITO-3339 Integrate sorting in task inbox"}, "afterCommit": {"oid": "8c68065e5fee800ce6916855272041861b8303b5", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/8c68065e5fee800ce6916855272041861b8303b5", "committedDate": "2020-09-18T05:13:52Z", "message": "KOGITO-3339 Integrate sorting in task inbox"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8c68065e5fee800ce6916855272041861b8303b5", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/8c68065e5fee800ce6916855272041861b8303b5", "committedDate": "2020-09-18T05:13:52Z", "message": "KOGITO-3339 Integrate sorting in task inbox"}, "afterCommit": {"oid": "a09d38b6e9ea81edb272ec9f7775d765a2edce2a", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/a09d38b6e9ea81edb272ec9f7775d765a2edce2a", "committedDate": "2020-09-18T05:22:20Z", "message": "KOGITO-3339 Integrate sorting in task inbox"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a09d38b6e9ea81edb272ec9f7775d765a2edce2a", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/a09d38b6e9ea81edb272ec9f7775d765a2edce2a", "committedDate": "2020-09-18T05:22:20Z", "message": "KOGITO-3339 Integrate sorting in task inbox"}, "afterCommit": {"oid": "e3d1cef355882e40b4eab2acba5a43ca961b80ee", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/e3d1cef355882e40b4eab2acba5a43ca961b80ee", "committedDate": "2020-09-18T09:34:49Z", "message": "KOGITO-3339 Integrate sorting in task inbox"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e3d1cef355882e40b4eab2acba5a43ca961b80ee", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/e3d1cef355882e40b4eab2acba5a43ca961b80ee", "committedDate": "2020-09-18T09:34:49Z", "message": "KOGITO-3339 Integrate sorting in task inbox"}, "afterCommit": {"oid": "ffba14f97f588f0b77089c62485987eb757b6524", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/ffba14f97f588f0b77089c62485987eb757b6524", "committedDate": "2020-09-18T09:59:38Z", "message": "KOGITO-3339 Integrate sorting in task inbox"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkyNzM2MDcx", "url": "https://github.com/kiegroup/kogito-apps/pull/462#pullrequestreview-492736071", "createdAt": "2020-09-21T15:30:13Z", "commit": {"oid": "ffba14f97f588f0b77089c62485987eb757b6524"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTozMDoxM1rOHVWr_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yMVQxNTozMjozNVrOHVWybA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE1Mzg1Mw==", "bodyText": "since we keep the sortBy in context, do we still need it as a state of the component?", "url": "https://github.com/kiegroup/kogito-apps/pull/462#discussion_r492153853", "createdAt": "2020-09-21T15:30:13Z", "author": {"login": "pefernan"}, "path": "ui-packages/packages/task-console/src/components/Organisms/TaskInbox/TaskInbox.tsx", "diffHunk": "@@ -39,31 +41,40 @@ const UserTaskLoadingComponent = (\n );\n \n const TaskInbox: React.FC = props => {\n+  const context: IContext<UserTaskInstance> = useContext(TaskConsoleContext);\n   const [defaultPageSize] = useState<number>(10);\n   const [isLoaded, setIsLoaded] = useState<boolean>(false);\n   const [isLoading, setIsLoading] = useState<boolean>(false);\n   const [queryOffset, setOffset] = useState<number>(0);\n   const [pageSize, setPageSize] = useState<number>(defaultPageSize);\n   const [isLoadingMore, setIsLoadingMore] = useState<boolean>(false);\n   const [tableData, setTableData] = useState<any[]>([]);\n-\n-  const context: IContext<UserTaskInstance> = useContext(TaskConsoleContext);\n+  const [sortBy, setSortBy] = useState<SortBy>(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffba14f97f588f0b77089c62485987eb757b6524"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE1NTE4Ng==", "bodyText": "Same here!", "url": "https://github.com/kiegroup/kogito-apps/pull/462#discussion_r492155186", "createdAt": "2020-09-21T15:32:08Z", "author": {"login": "pefernan"}, "path": "ui-packages/packages/task-console/src/components/Organisms/TaskInbox/TaskInbox.tsx", "diffHunk": "@@ -74,41 +85,102 @@ const TaskInbox: React.FC = props => {\n       setPageSize(_pageSize);\n     }\n \n+    if (!_.isEmpty(sortBy)) {\n+      newQueryOffset = 0;\n+      newQueryLimit = tableData.length + newQueryLimit;\n+    }\n+\n+    context.getActiveQueryInfo().offset = newQueryOffset;\n+    context.getActiveQueryInfo().maxElements += _pageSize;\n+\n+    fetchUserTasks(newQueryOffset, newQueryLimit);\n+  };\n+  const fetchUserTasks = (_queryOffset, _queryLimit) => {\n     getUserTasks({\n       variables: {\n         user: context.getUser().id,\n         groups: context.getUser().groups,\n         offset: _queryOffset,\n-        limit: _pageSize\n+        limit: _queryLimit,\n+        orderBy: getSortByObject()\n       }\n     });\n   };\n-\n   useEffect(() => {\n-    onGetMoreInstances(queryOffset, pageSize, false);\n+    if (!context.getActiveQueryInfo().maxElements) {\n+      context.getActiveQueryInfo().maxElements = pageSize;\n+    }\n+    if (context.getActiveQueryInfo().offset) {\n+      setOffset(context.getActiveQueryInfo().offset);\n+    }\n+    fetchUserTasks(0, context.getActiveQueryInfo().maxElements);\n   }, []);\n \n   useEffect(() => {\n     if (isLoadingMore === undefined || !isLoadingMore) {\n       setIsLoading(loading);\n     }\n+\n     if (!loading && data !== undefined) {\n-      const newData = tableData.concat(data.UserTaskInstances);\n-      setTableData(newData);\n+      setSorting(false);\n+\n+      if (_.isEmpty(sortBy)) {\n+        const newData = tableData.concat(data.UserTaskInstances);\n+        setTableData(newData);\n+      } else {\n+        setTableData(data.UserTaskInstances);\n+      }\n+\n       if (queryOffset > 0 && tableData.length > 0) {\n         setIsLoadingMore(false);\n       }\n+\n       if (!isLoaded) {\n         setIsLoaded(true);\n       }\n     }\n   }, [data]);\n \n+  const onSorting = (index, direction) => {\n+    setSorting(true);\n+    if (direction) {\n+      setSortBy({ index, direction });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffba14f97f588f0b77089c62485987eb757b6524"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE1NTI4NA==", "bodyText": "same here!", "url": "https://github.com/kiegroup/kogito-apps/pull/462#discussion_r492155284", "createdAt": "2020-09-21T15:32:16Z", "author": {"login": "pefernan"}, "path": "ui-packages/packages/task-console/src/components/Organisms/TaskInbox/TaskInbox.tsx", "diffHunk": "@@ -74,41 +85,102 @@ const TaskInbox: React.FC = props => {\n       setPageSize(_pageSize);\n     }\n \n+    if (!_.isEmpty(sortBy)) {\n+      newQueryOffset = 0;\n+      newQueryLimit = tableData.length + newQueryLimit;\n+    }\n+\n+    context.getActiveQueryInfo().offset = newQueryOffset;\n+    context.getActiveQueryInfo().maxElements += _pageSize;\n+\n+    fetchUserTasks(newQueryOffset, newQueryLimit);\n+  };\n+  const fetchUserTasks = (_queryOffset, _queryLimit) => {\n     getUserTasks({\n       variables: {\n         user: context.getUser().id,\n         groups: context.getUser().groups,\n         offset: _queryOffset,\n-        limit: _pageSize\n+        limit: _queryLimit,\n+        orderBy: getSortByObject()\n       }\n     });\n   };\n-\n   useEffect(() => {\n-    onGetMoreInstances(queryOffset, pageSize, false);\n+    if (!context.getActiveQueryInfo().maxElements) {\n+      context.getActiveQueryInfo().maxElements = pageSize;\n+    }\n+    if (context.getActiveQueryInfo().offset) {\n+      setOffset(context.getActiveQueryInfo().offset);\n+    }\n+    fetchUserTasks(0, context.getActiveQueryInfo().maxElements);\n   }, []);\n \n   useEffect(() => {\n     if (isLoadingMore === undefined || !isLoadingMore) {\n       setIsLoading(loading);\n     }\n+\n     if (!loading && data !== undefined) {\n-      const newData = tableData.concat(data.UserTaskInstances);\n-      setTableData(newData);\n+      setSorting(false);\n+\n+      if (_.isEmpty(sortBy)) {\n+        const newData = tableData.concat(data.UserTaskInstances);\n+        setTableData(newData);\n+      } else {\n+        setTableData(data.UserTaskInstances);\n+      }\n+\n       if (queryOffset > 0 && tableData.length > 0) {\n         setIsLoadingMore(false);\n       }\n+\n       if (!isLoaded) {\n         setIsLoaded(true);\n       }\n     }\n   }, [data]);\n \n+  const onSorting = (index, direction) => {\n+    setSorting(true);\n+    if (direction) {\n+      setSortBy({ index, direction });\n+      context.getActiveQueryInfo().sortBy = { index, direction };\n+    } else {\n+      context.getActiveQueryInfo().sortBy = null;\n+    }\n+  };\n+\n+  const getSortByObject = () => {\n+    if (!_.isEmpty(sortBy)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffba14f97f588f0b77089c62485987eb757b6524"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE1NTMzMg==", "bodyText": "can we use the fetchUserTasks method here??", "url": "https://github.com/kiegroup/kogito-apps/pull/462#discussion_r492155332", "createdAt": "2020-09-21T15:32:21Z", "author": {"login": "pefernan"}, "path": "ui-packages/packages/task-console/src/components/Organisms/TaskInbox/TaskInbox.tsx", "diffHunk": "@@ -74,41 +85,102 @@ const TaskInbox: React.FC = props => {\n       setPageSize(_pageSize);\n     }\n \n+    if (!_.isEmpty(sortBy)) {\n+      newQueryOffset = 0;\n+      newQueryLimit = tableData.length + newQueryLimit;\n+    }\n+\n+    context.getActiveQueryInfo().offset = newQueryOffset;\n+    context.getActiveQueryInfo().maxElements += _pageSize;\n+\n+    fetchUserTasks(newQueryOffset, newQueryLimit);\n+  };\n+  const fetchUserTasks = (_queryOffset, _queryLimit) => {\n     getUserTasks({\n       variables: {\n         user: context.getUser().id,\n         groups: context.getUser().groups,\n         offset: _queryOffset,\n-        limit: _pageSize\n+        limit: _queryLimit,\n+        orderBy: getSortByObject()\n       }\n     });\n   };\n-\n   useEffect(() => {\n-    onGetMoreInstances(queryOffset, pageSize, false);\n+    if (!context.getActiveQueryInfo().maxElements) {\n+      context.getActiveQueryInfo().maxElements = pageSize;\n+    }\n+    if (context.getActiveQueryInfo().offset) {\n+      setOffset(context.getActiveQueryInfo().offset);\n+    }\n+    fetchUserTasks(0, context.getActiveQueryInfo().maxElements);\n   }, []);\n \n   useEffect(() => {\n     if (isLoadingMore === undefined || !isLoadingMore) {\n       setIsLoading(loading);\n     }\n+\n     if (!loading && data !== undefined) {\n-      const newData = tableData.concat(data.UserTaskInstances);\n-      setTableData(newData);\n+      setSorting(false);\n+\n+      if (_.isEmpty(sortBy)) {\n+        const newData = tableData.concat(data.UserTaskInstances);\n+        setTableData(newData);\n+      } else {\n+        setTableData(data.UserTaskInstances);\n+      }\n+\n       if (queryOffset > 0 && tableData.length > 0) {\n         setIsLoadingMore(false);\n       }\n+\n       if (!isLoaded) {\n         setIsLoaded(true);\n       }\n     }\n   }, [data]);\n \n+  const onSorting = (index, direction) => {\n+    setSorting(true);\n+    if (direction) {\n+      setSortBy({ index, direction });\n+      context.getActiveQueryInfo().sortBy = { index, direction };\n+    } else {\n+      context.getActiveQueryInfo().sortBy = null;\n+    }\n+  };\n+\n+  const getSortByObject = () => {\n+    if (!_.isEmpty(sortBy)) {\n+      return _.set(\n+        {},\n+        columns[sortBy.index].path,\n+        sortBy.direction.toUpperCase()\n+      );\n+    }\n+    return null;\n+  };\n+\n+  useEffect(() => {\n+    if (!_.isEmpty(sortBy)) {\n+      getUserTasks({", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffba14f97f588f0b77089c62485987eb757b6524"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MjE1NTUwMA==", "bodyText": "same here!", "url": "https://github.com/kiegroup/kogito-apps/pull/462#discussion_r492155500", "createdAt": "2020-09-21T15:32:35Z", "author": {"login": "pefernan"}, "path": "ui-packages/packages/task-console/src/components/Organisms/TaskInbox/TaskInbox.tsx", "diffHunk": "@@ -144,6 +206,8 @@ const TaskInbox: React.FC = props => {\n         error={error}\n         refetch={refetch}\n         LoadingComponent={UserTaskLoadingComponent}\n+        onSorting={onSorting}\n+        sortBy={sortBy}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffba14f97f588f0b77089c62485987eb757b6524"}, "originalPosition": 200}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ffba14f97f588f0b77089c62485987eb757b6524", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/ffba14f97f588f0b77089c62485987eb757b6524", "committedDate": "2020-09-18T09:59:38Z", "message": "KOGITO-3339 Integrate sorting in task inbox"}, "afterCommit": {"oid": "6ea567ce4ff7082f0823ec70af2023d79e911f8e", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/6ea567ce4ff7082f0823ec70af2023d79e911f8e", "committedDate": "2020-09-21T16:27:36Z", "message": "KOGITO-3339 Integrate sorting in task inbox"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6ea567ce4ff7082f0823ec70af2023d79e911f8e", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/6ea567ce4ff7082f0823ec70af2023d79e911f8e", "committedDate": "2020-09-21T16:27:36Z", "message": "KOGITO-3339 Integrate sorting in task inbox"}, "afterCommit": {"oid": "2fefe027eefca8e8a113413041231db7782a2f5c", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/2fefe027eefca8e8a113413041231db7782a2f5c", "committedDate": "2020-09-23T14:56:19Z", "message": "KOGITO-3339 Integrate sorting in task inbox"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1NDg0MDcx", "url": "https://github.com/kiegroup/kogito-apps/pull/462#pullrequestreview-495484071", "createdAt": "2020-09-24T11:44:25Z", "commit": {"oid": "2fefe027eefca8e8a113413041231db7782a2f5c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2fefe027eefca8e8a113413041231db7782a2f5c", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/2fefe027eefca8e8a113413041231db7782a2f5c", "committedDate": "2020-09-23T14:56:19Z", "message": "KOGITO-3339 Integrate sorting in task inbox"}, "afterCommit": {"oid": "e2b4507f9d1fd17ee06e7b4274e762cb42c4ffdc", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/e2b4507f9d1fd17ee06e7b4274e762cb42c4ffdc", "committedDate": "2020-09-25T07:23:39Z", "message": "KOGITO-3339 Integrate sorting in task inbox"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "66caeca05b8fd936a1f0bc6cce041a1f7dd52ace", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/66caeca05b8fd936a1f0bc6cce041a1f7dd52ace", "committedDate": "2020-09-25T08:22:41Z", "message": "KOGITO-3339 Integrate sorting in task inbox"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e2b4507f9d1fd17ee06e7b4274e762cb42c4ffdc", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/e2b4507f9d1fd17ee06e7b4274e762cb42c4ffdc", "committedDate": "2020-09-25T07:23:39Z", "message": "KOGITO-3339 Integrate sorting in task inbox"}, "afterCommit": {"oid": "66caeca05b8fd936a1f0bc6cce041a1f7dd52ace", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/66caeca05b8fd936a1f0bc6cce041a1f7dd52ace", "committedDate": "2020-09-25T08:22:41Z", "message": "KOGITO-3339 Integrate sorting in task inbox"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MzQ4MDUx", "url": "https://github.com/kiegroup/kogito-apps/pull/462#pullrequestreview-496348051", "createdAt": "2020-09-25T11:48:31Z", "commit": {"oid": "66caeca05b8fd936a1f0bc6cce041a1f7dd52ace"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4791, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}