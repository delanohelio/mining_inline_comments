{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2OTc1OTU2", "number": 470, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMToxMTozMFrOErIOCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMTo0MjozNlrOEvReqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNjU4ODkwOnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Value.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMToxMTozMFrOHduPYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMjo0MDo1OFrOHdxUmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkyODM1NQ==", "bodyText": "When is it possible to obtain a vector as ByteBuffer?", "url": "https://github.com/kiegroup/kogito-apps/pull/470#discussion_r500928355", "createdAt": "2020-10-07T11:11:30Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Value.java", "diffHunk": "@@ -73,23 +79,42 @@ public String toString() {\n             doubles = (double[]) underlyingObject;\n         } else {\n             if (underlyingObject instanceof String) {\n-                String[] tokens = ((String) underlyingObject).split(\",?\\\\s+\");\n-                int noOfWords = tokens.length;\n-                doubles = new double[noOfWords];\n-                // parse string encoded vector\n-                if (Arrays.stream(tokens).allMatch(s -> s.matches(\"-?\\\\d+(\\\\.\\\\d+)?\"))) {\n-                    for (int i = 0; i < tokens.length; i++) {\n-                        doubles[i] = Double.parseDouble(tokens[i]);\n-                    }\n-                } else { // or make a vector of 1s\n-                    Arrays.fill(doubles, 1);\n-                }\n+                String string = (String) this.underlyingObject;\n+                doubles = parseVectorString(string);\n+            } else if (underlyingObject instanceof ByteBuffer) {\n+                ByteBuffer byteBuffer = (ByteBuffer) underlyingObject;\n+                String string = StandardCharsets.UTF_8.decode(byteBuffer).toString();\n+                doubles = parseVectorString(string);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "814cd1252ccce00b148853de3a5c29a580bc93f7"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk3ODg0MA==", "bodyText": "as a result of persisting vector based models (e.g. GloVe) as binaries. In this scenario each value should correspond to the bytes associated to one row.", "url": "https://github.com/kiegroup/kogito-apps/pull/470#discussion_r500978840", "createdAt": "2020-10-07T12:40:58Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Value.java", "diffHunk": "@@ -73,23 +79,42 @@ public String toString() {\n             doubles = (double[]) underlyingObject;\n         } else {\n             if (underlyingObject instanceof String) {\n-                String[] tokens = ((String) underlyingObject).split(\",?\\\\s+\");\n-                int noOfWords = tokens.length;\n-                doubles = new double[noOfWords];\n-                // parse string encoded vector\n-                if (Arrays.stream(tokens).allMatch(s -> s.matches(\"-?\\\\d+(\\\\.\\\\d+)?\"))) {\n-                    for (int i = 0; i < tokens.length; i++) {\n-                        doubles[i] = Double.parseDouble(tokens[i]);\n-                    }\n-                } else { // or make a vector of 1s\n-                    Arrays.fill(doubles, 1);\n-                }\n+                String string = (String) this.underlyingObject;\n+                doubles = parseVectorString(string);\n+            } else if (underlyingObject instanceof ByteBuffer) {\n+                ByteBuffer byteBuffer = (ByteBuffer) underlyingObject;\n+                String string = StandardCharsets.UTF_8.decode(byteBuffer).toString();\n+                doubles = parseVectorString(string);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkyODM1NQ=="}, "originalCommit": {"oid": "814cd1252ccce00b148853de3a5c29a580bc93f7"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNjU5MjA1OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Value.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMToxMjoyM1rOHduRTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMjozODo1M1rOHdxPOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkyODg0NQ==", "bodyText": "Where this format is defined? Is this intended to be a json array?", "url": "https://github.com/kiegroup/kogito-apps/pull/470#discussion_r500928845", "createdAt": "2020-10-07T11:12:23Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Value.java", "diffHunk": "@@ -73,23 +79,42 @@ public String toString() {\n             doubles = (double[]) underlyingObject;\n         } else {\n             if (underlyingObject instanceof String) {\n-                String[] tokens = ((String) underlyingObject).split(\",?\\\\s+\");\n-                int noOfWords = tokens.length;\n-                doubles = new double[noOfWords];\n-                // parse string encoded vector\n-                if (Arrays.stream(tokens).allMatch(s -> s.matches(\"-?\\\\d+(\\\\.\\\\d+)?\"))) {\n-                    for (int i = 0; i < tokens.length; i++) {\n-                        doubles[i] = Double.parseDouble(tokens[i]);\n-                    }\n-                } else { // or make a vector of 1s\n-                    Arrays.fill(doubles, 1);\n-                }\n+                String string = (String) this.underlyingObject;\n+                doubles = parseVectorString(string);\n+            } else if (underlyingObject instanceof ByteBuffer) {\n+                ByteBuffer byteBuffer = (ByteBuffer) underlyingObject;\n+                String string = StandardCharsets.UTF_8.decode(byteBuffer).toString();\n+                doubles = parseVectorString(string);\n             } else {\n                 double v = asNumber();\n                 doubles = new double[1];\n                 doubles[0] = v;\n             }\n-            // FAI-234 : handle parsing of different underlyingObject types as vectors (e.g. ByteBuffer, etc.)\n+        }\n+        return doubles;\n+    }\n+\n+    private double[] parseVectorString(String string) {\n+        double[] doubles;\n+        try {\n+            String[] tokens = string\n+                    .replaceFirst(\"\\\\[\", \"\")\n+                    .replaceFirst(\"]\", \"\")\n+                    .replaceFirst(\"\\\\{\", \"\")\n+                    .replaceFirst(\"}\", \"\")\n+                    .split(\",?\\\\s+\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "814cd1252ccce00b148853de3a5c29a580bc93f7"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDk3NzQ2NA==", "bodyText": "since many vector based models are formatted as a CSV file, this should be a line of comma separated values.", "url": "https://github.com/kiegroup/kogito-apps/pull/470#discussion_r500977464", "createdAt": "2020-10-07T12:38:53Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Value.java", "diffHunk": "@@ -73,23 +79,42 @@ public String toString() {\n             doubles = (double[]) underlyingObject;\n         } else {\n             if (underlyingObject instanceof String) {\n-                String[] tokens = ((String) underlyingObject).split(\",?\\\\s+\");\n-                int noOfWords = tokens.length;\n-                doubles = new double[noOfWords];\n-                // parse string encoded vector\n-                if (Arrays.stream(tokens).allMatch(s -> s.matches(\"-?\\\\d+(\\\\.\\\\d+)?\"))) {\n-                    for (int i = 0; i < tokens.length; i++) {\n-                        doubles[i] = Double.parseDouble(tokens[i]);\n-                    }\n-                } else { // or make a vector of 1s\n-                    Arrays.fill(doubles, 1);\n-                }\n+                String string = (String) this.underlyingObject;\n+                doubles = parseVectorString(string);\n+            } else if (underlyingObject instanceof ByteBuffer) {\n+                ByteBuffer byteBuffer = (ByteBuffer) underlyingObject;\n+                String string = StandardCharsets.UTF_8.decode(byteBuffer).toString();\n+                doubles = parseVectorString(string);\n             } else {\n                 double v = asNumber();\n                 doubles = new double[1];\n                 doubles[0] = v;\n             }\n-            // FAI-234 : handle parsing of different underlyingObject types as vectors (e.g. ByteBuffer, etc.)\n+        }\n+        return doubles;\n+    }\n+\n+    private double[] parseVectorString(String string) {\n+        double[] doubles;\n+        try {\n+            String[] tokens = string\n+                    .replaceFirst(\"\\\\[\", \"\")\n+                    .replaceFirst(\"]\", \"\")\n+                    .replaceFirst(\"\\\\{\", \"\")\n+                    .replaceFirst(\"}\", \"\")\n+                    .split(\",?\\\\s+\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkyODg0NQ=="}, "originalCommit": {"oid": "814cd1252ccce00b148853de3a5c29a580bc93f7"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4MDA0OTA2OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMTo0MjozNlrOHkKTUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMTo0NDoyOFrOHkKXGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY3OTU3MA==", "bodyText": "explainability-core is not supposed to be platform specific. Can you please replace this dependency to directly use jackson dependencies?", "url": "https://github.com/kiegroup/kogito-apps/pull/470#discussion_r507679570", "createdAt": "2020-10-19T11:42:36Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-core/pom.xml", "diffHunk": "@@ -19,6 +19,11 @@\n       <groupId>org.apache.commons</groupId>\n       <artifactId>commons-lang3</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-jackson</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c20bf915e051f02da1dc7939bb96524e8d378d2"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY4MDUzOA==", "bodyText": "sure, good point", "url": "https://github.com/kiegroup/kogito-apps/pull/470#discussion_r507680538", "createdAt": "2020-10-19T11:44:28Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/pom.xml", "diffHunk": "@@ -19,6 +19,11 @@\n       <groupId>org.apache.commons</groupId>\n       <artifactId>commons-lang3</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-jackson</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY3OTU3MA=="}, "originalCommit": {"oid": "3c20bf915e051f02da1dc7939bb96524e8d378d2"}, "originalPosition": 6}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 737, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}