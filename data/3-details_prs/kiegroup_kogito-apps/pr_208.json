{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzMjUzMjAx", "number": 208, "title": "[KOGITO-1559] Data Index service refactoring to support alternative storage solution", "bodyText": "Jira: https://issues.redhat.com/browse/KOGITO-1559\nDescription: code refactoring to support other storage. Move proto file code from infinispan to a separate module, so that GraphQL can still use the proto files without infinispan.\nMany thanks for submitting your Pull Request \u2764\ufe0f!\nPlease make sure that your PR meets the following requirements:\n\n You have read the contributors guide\n Pull Request title is properly formatted: KOGITO-XYZ Subject\n Pull Request title contains the target branch if not targeting master: [0.9.x] KOGITO-XYZ Subject\n Pull Request contains link to the JIRA issue\n Pull Request contains link to any dependent or related Pull Request\n Pull Request contains description of the issue\n Pull Request does not include fixes for issues other than the main ticket", "createdAt": "2020-05-05T00:29:24Z", "url": "https://github.com/kiegroup/kogito-apps/pull/208", "merged": true, "mergeCommit": {"oid": "360478879e2d8086707c8d9ee3498883021c8595"}, "closed": true, "closedAt": "2020-06-04T08:21:40Z", "author": {"login": "xieshenzh"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABce7JYDgFqTQwNzE0ODY1Mg==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnyT6gABqjM0MDQ0NTY3NDg=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3MTQ4NjUy", "url": "https://github.com/kiegroup/kogito-apps/pull/208#pullrequestreview-407148652", "createdAt": "2020-05-07T04:57:15Z", "commit": {"oid": "3c97fab73909cea0a3c29847d9c0a928407cbf93"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QwNDo1NzoxNVrOGRuZqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxMDo1NToyMFrOGR5NjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzOTIxMA==", "bodyText": "Only id should be considered to be the same Job.", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r421239210", "createdAt": "2020-05-07T04:57:15Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/model/Job.java", "diffHunk": "@@ -182,4 +183,35 @@ public String toString() {\n                 \", executionCounter=\" + executionCounter +\n                 '}';\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        Job job = (Job) o;\n+        return Objects.equals(id, job.id) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c97fab73909cea0a3c29847d9c0a928407cbf93"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzOTc1Nw==", "bodyText": "no need to override", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r421239757", "createdAt": "2020-05-07T04:59:15Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/model/ProcessInstance.java", "diffHunk": "@@ -72,4 +73,27 @@ public String toString() {\n                 \", error=\" + error +\n                 \"} \" + super.toString();\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c97fab73909cea0a3c29847d9c0a928407cbf93"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTIzOTkyNQ==", "bodyText": "only id should be considered", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r421239925", "createdAt": "2020-05-07T04:59:52Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/model/ProcessInstanceMeta.java", "diffHunk": "@@ -171,4 +172,33 @@ public String toString() {\n                 \", lastUpdated=\" + lastUpdate +\n                 '}';\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        ProcessInstanceMeta that = (ProcessInstanceMeta) o;\n+        return Objects.equals(id, that.id) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c97fab73909cea0a3c29847d9c0a928407cbf93"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0MDA1OA==", "bodyText": "no need to override", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r421240058", "createdAt": "2020-05-07T05:00:25Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/model/UserTaskInstance.java", "diffHunk": "@@ -82,4 +84,25 @@ public JsonNode getOutputs() {\n     public void setOutputs(JsonNode outputs) {\n         this.outputs = outputs;\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c97fab73909cea0a3c29847d9c0a928407cbf93"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0MDE0NQ==", "bodyText": "only id should be considered", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r421240145", "createdAt": "2020-05-07T05:00:41Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/model/UserTaskInstanceMeta.java", "diffHunk": "@@ -198,4 +199,36 @@ public String toString() {\n                 \", lastUpdate=\" + lastUpdate +\n                 '}';\n     }\n+\n+    @Override\n+    public boolean equals(Object o) {\n+        if (this == o) {\n+            return true;\n+        }\n+        if (o == null || getClass() != o.getClass()) {\n+            return false;\n+        }\n+        UserTaskInstanceMeta that = (UserTaskInstanceMeta) o;\n+        return Objects.equals(id, that.id) &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c97fab73909cea0a3c29847d9c0a928407cbf93"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0NTc3Mg==", "bodyText": "missing headers", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r421245772", "createdAt": "2020-05-07T05:21:26Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/protobuf/ProtobufManager.java", "diffHunk": "@@ -0,0 +1,8 @@\n+package org.kie.kogito.index.protobuf;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c97fab73909cea0a3c29847d9c0a928407cbf93"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0Njk1MA==", "bodyText": "is it needed here?", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r421246950", "createdAt": "2020-05-07T05:25:35Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-storage/data-index-storage-protobuf/pom.xml", "diffHunk": "@@ -0,0 +1,62 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>data-index-storage</artifactId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>data-index-storage-protobuf</artifactId>\n+  <name>Kogito :: Data Index Storage Protobuf</name>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>data-index-storage-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>infinispan-persistence-addon</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-core</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-infinispan-client</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c97fab73909cea0a3c29847d9c0a928407cbf93"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0ODQyOQ==", "bodyText": "This most likely only works if you have two implementations. What if you have multiple? Or even further, how do you plan for data index to use different persistence, build time, runtime config, profiles, etc?", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r421248429", "createdAt": "2020-05-07T05:31:05Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-storage/data-index-storage-infinispan/src/main/java/org/kie/kogito/index/infinispan/cache/InfinispanCacheManager.java", "diffHunk": "@@ -38,11 +39,13 @@\n import org.kie.kogito.index.model.Job;\n import org.kie.kogito.index.model.ProcessInstance;\n import org.kie.kogito.index.model.UserTaskInstance;\n+import org.kie.kogito.index.protobuf.ProtobufManager;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n @ApplicationScoped\n-public class InfinispanCacheManager implements CacheService {\n+@DefaultBean", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c97fab73909cea0a3c29847d9c0a928407cbf93"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxNjE2Mw==", "bodyText": "shouldnt the shared module be independent of infinispan addon?", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r421416163", "createdAt": "2020-05-07T10:54:56Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-storage/data-index-storage-protobuf/pom.xml", "diffHunk": "@@ -0,0 +1,62 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>data-index-storage</artifactId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>data-index-storage-protobuf</artifactId>\n+  <name>Kogito :: Data Index Storage Protobuf</name>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>data-index-storage-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>infinispan-persistence-addon</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c97fab73909cea0a3c29847d9c0a928407cbf93"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTQxNjMzMw==", "bodyText": "will other db implementations also depend on protobuf?", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r421416333", "createdAt": "2020-05-07T10:55:20Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-storage/data-index-storage-protobuf/src/main/java/org/kie/kogito/index/protobuf/FileDescriptorProducer.java", "diffHunk": "@@ -0,0 +1,36 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.protobuf;\n+\n+import java.io.IOException;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Produces;\n+\n+import org.infinispan.protostream.FileDescriptorSource;\n+\n+@ApplicationScoped\n+public class FileDescriptorProducer {\n+\n+    @Produces\n+    FileDescriptorSource kogitoTypesDescriptor() throws IOException {\n+        FileDescriptorSource source = new FileDescriptorSource();\n+        source.addProtoFile(\"kogito-index.proto\", Thread.currentThread().getContextClassLoader().getResourceAsStream(\"META-INF/kogito-index.proto\"));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c97fab73909cea0a3c29847d9c0a928407cbf93"}, "originalPosition": 32}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3c97fab73909cea0a3c29847d9c0a928407cbf93", "author": {"user": {"login": "xieshenzh", "name": "Xieshen"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/3c97fab73909cea0a3c29847d9c0a928407cbf93", "committedDate": "2020-05-05T00:15:34Z", "message": "[KOGITO-1559] Data Index service refactoring to support alternative storage solution"}, "afterCommit": {"oid": "c312a75711df04a76b53af943bd5f220c7b17c79", "author": {"user": {"login": "xieshenzh", "name": "Xieshen"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/c312a75711df04a76b53af943bd5f220c7b17c79", "committedDate": "2020-05-07T19:03:19Z", "message": "[KOGITO-1559] Pull request"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c312a75711df04a76b53af943bd5f220c7b17c79", "author": {"user": {"login": "xieshenzh", "name": "Xieshen"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/c312a75711df04a76b53af943bd5f220c7b17c79", "committedDate": "2020-05-07T19:03:19Z", "message": "[KOGITO-1559] Pull request"}, "afterCommit": {"oid": "cd2c77bb554787e604eeb86ab2af52337f4ad53b", "author": {"user": {"login": "xieshenzh", "name": "Xieshen"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/cd2c77bb554787e604eeb86ab2af52337f4ad53b", "committedDate": "2020-05-07T19:18:22Z", "message": "[KOGITO-1559] Pull request"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA3NzY2NTgx", "url": "https://github.com/kiegroup/kogito-apps/pull/208#pullrequestreview-407766581", "createdAt": "2020-05-07T19:20:56Z", "commit": {"oid": "cd2c77bb554787e604eeb86ab2af52337f4ad53b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxOToyMDo1N1rOGSM0Fw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wN1QxOToyMDo1N1rOGSM0Fw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTczNzQ5NQ==", "bodyText": "@rhtevan renamed the interface to ProtobufCacheService.", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r421737495", "createdAt": "2020-05-07T19:20:57Z", "author": {"login": "xieshenzh"}, "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/protobuf/ProtobufCacheService.java", "diffHunk": "@@ -0,0 +1,24 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.protobuf;\n+\n+import java.util.Map;\n+\n+public interface ProtobufCacheService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd2c77bb554787e604eeb86ab2af52337f4ad53b"}, "originalPosition": 21}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNTAwMjgy", "url": "https://github.com/kiegroup/kogito-apps/pull/208#pullrequestreview-410500282", "createdAt": "2020-05-12T23:53:17Z", "commit": {"oid": "0cbcd1f6ab1136a849a1e1e803ecbe67e45ca210"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzo1MzoxN1rOGUc5dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMlQyMzo1MzoxN1rOGUc5dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDA5ODE2NQ==", "bodyText": "Shall we make the string value as either a constant or enum value?", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r424098165", "createdAt": "2020-05-12T23:53:17Z", "author": {"login": "rhtevan"}, "path": "data-index/data-index-storage/data-index-storage-infinispan/src/main/java/org/kie/kogito/index/infinispan/cache/InfinispanCacheManager.java", "diffHunk": "@@ -44,7 +45,8 @@\n import org.slf4j.LoggerFactory;\n \n @ApplicationScoped\n-@DefaultBean\n+@Default\n+@Persistence(\"infinispan\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0cbcd1f6ab1136a849a1e1e803ecbe67e45ca210"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4MDM3NzIz", "url": "https://github.com/kiegroup/kogito-apps/pull/208#pullrequestreview-418037723", "createdAt": "2020-05-26T07:31:18Z", "commit": {"oid": "86469a16eb5bb4f18384f4c7b1e0b50562c2fd66"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNzozMToxOFrOGaR8Ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQwNzo0Mjo1OFrOGaSTwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIxMDEzOQ==", "bodyText": "You are using a CDI qualifier even to promote a specific instance to be injected but this impose to client code to know add a qualifier everywhere.\nWhat about preserve only Storage?\nThis means:\n\nadd Storage qualifier in this class where Instance<CacheService> and Instance<ProtobufCacheService> are injected\nremove Default qualifier to InfinispanCacheManager\nremove StorageSupported both from producer and injection points\n\nThe result is that each implementation should be exposed as Storage qualified bean, then this producer will take all of them and produce the only default instance so it will be enough to Inject without any additional qualifier in customer code.\nWdyt?", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r430210139", "createdAt": "2020-05-26T07:31:18Z", "author": {"login": "danielezonca"}, "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/cdi/Producer.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ *\n+ *  * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *  *\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  * you may not use this file except in compliance with the License.\n+ *  * You may obtain a copy of the License at\n+ *  *\n+ *  *       http://www.apache.org/licenses/LICENSE-2.0\n+ *  *\n+ *  * Unless required by applicable law or agreed to in writing, software\n+ *  * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  * See the License for the specific language governing permissions and\n+ *  * limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.index.cdi;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Instance;\n+import javax.enterprise.inject.Produces;\n+import javax.inject.Inject;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.kie.kogito.index.cache.CacheService;\n+import org.kie.kogito.index.protobuf.ProtobufCacheService;\n+\n+@ApplicationScoped\n+public class Producer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86469a16eb5bb4f18384f4c7b1e0b50562c2fd66"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDIxNjEyOA==", "bodyText": "Default should not be needed (see comment above)", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r430216128", "createdAt": "2020-05-26T07:42:58Z", "author": {"login": "danielezonca"}, "path": "data-index/data-index-storage/data-index-storage-infinispan/src/main/java/org/kie/kogito/index/infinispan/cache/InfinispanCacheManager.java", "diffHunk": "@@ -35,14 +36,20 @@\n import org.infinispan.query.remote.client.ProtobufMetadataManagerConstants;\n import org.kie.kogito.index.cache.Cache;\n import org.kie.kogito.index.cache.CacheService;\n+import org.kie.kogito.index.cdi.Storage;\n import org.kie.kogito.index.model.Job;\n import org.kie.kogito.index.model.ProcessInstance;\n import org.kie.kogito.index.model.UserTaskInstance;\n+import org.kie.kogito.index.protobuf.ProtobufCacheService;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import static org.kie.kogito.index.infinispan.Constants.INFINISPAN_STORAGE;\n+\n @ApplicationScoped\n-public class InfinispanCacheManager implements CacheService {\n+@Default", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86469a16eb5bb4f18384f4c7b1e0b50562c2fd66"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NTQyODQ0", "url": "https://github.com/kiegroup/kogito-apps/pull/208#pullrequestreview-418542844", "createdAt": "2020-05-26T17:56:46Z", "commit": {"oid": "86469a16eb5bb4f18384f4c7b1e0b50562c2fd66"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzo1Njo0NlrOGapy0A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzo1Njo0NlrOGapy0A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYwMDkxMg==", "bodyText": "@xiezhang7 Second thought on naming this qualifier. How does 'WithStorage' sound to you? Instead of using two qualifiers, perhaps could try to use just one qualifier, 'WithStorage' with member value like: 'configured', 'mongo', 'ispn' etc., and default to 'configured'.", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r430600912", "createdAt": "2020-05-26T17:56:46Z", "author": {"login": "rhtevan"}, "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/cdi/Storage.java", "diffHunk": "@@ -29,7 +29,7 @@\n @Qualifier\n @Retention(RUNTIME)\n @Target({TYPE})\n-public @interface Persistence {\n+public @interface Storage {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86469a16eb5bb4f18384f4c7b1e0b50562c2fd66"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NTQ1Mjk4", "url": "https://github.com/kiegroup/kogito-apps/pull/208#pullrequestreview-418545298", "createdAt": "2020-05-26T17:59:10Z", "commit": {"oid": "86469a16eb5bb4f18384f4c7b1e0b50562c2fd66"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzo1OToxMFrOGap6ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNzo1OToxMFrOGap6ZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYwMjg1Mg==", "bodyText": "@xiezhang7 How about name it as 'WithStorageQualifier' or 'WithStorageLiteral'?", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r430602852", "createdAt": "2020-05-26T17:59:10Z", "author": {"login": "rhtevan"}, "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/cdi/StorageImpl.java", "diffHunk": "@@ -20,11 +20,11 @@\n \n import javax.enterprise.util.AnnotationLiteral;\n \n-public class PersistenceImpl extends AnnotationLiteral<Persistence> implements Persistence {\n+public class StorageImpl extends AnnotationLiteral<Storage> implements Storage {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86469a16eb5bb4f18384f4c7b1e0b50562c2fd66"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NTQ2NjQ0", "url": "https://github.com/kiegroup/kogito-apps/pull/208#pullrequestreview-418546644", "createdAt": "2020-05-26T18:00:52Z", "commit": {"oid": "86469a16eb5bb4f18384f4c7b1e0b50562c2fd66"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxODowMDo1MlrOGaqA6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxODowMDo1MlrOGaqA6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYwNDUyMA==", "bodyText": "@xiezhang7 Maybe not needed.", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r430604520", "createdAt": "2020-05-26T18:00:52Z", "author": {"login": "rhtevan"}, "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/cdi/StorageSupported.java", "diffHunk": "@@ -31,6 +31,6 @@\n @Qualifier\n @Retention(RUNTIME)\n @Target({METHOD, FIELD, PARAMETER})\n-public @interface InjectPersistence {\n+public @interface StorageSupported {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86469a16eb5bb4f18384f4c7b1e0b50562c2fd66"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NTcyNTA2", "url": "https://github.com/kiegroup/kogito-apps/pull/208#pullrequestreview-418572506", "createdAt": "2020-05-26T18:36:47Z", "commit": {"oid": "86469a16eb5bb4f18384f4c7b1e0b50562c2fd66"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxODozNjo0N1rOGarSFw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxODozNjo0N1rOGarSFw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYyNTMwMw==", "bodyText": "@xiezhang7 How about use an enum type with values?", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r430625303", "createdAt": "2020-05-26T18:36:47Z", "author": {"login": "rhtevan"}, "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/cdi/Storage.java", "diffHunk": "@@ -29,7 +29,7 @@\n @Qualifier\n @Retention(RUNTIME)\n @Target({TYPE})\n-public @interface Persistence {\n+public @interface Storage {\n \n     String value();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86469a16eb5bb4f18384f4c7b1e0b50562c2fd66"}, "originalPosition": 7}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4NTc0Mjc2", "url": "https://github.com/kiegroup/kogito-apps/pull/208#pullrequestreview-418574276", "createdAt": "2020-05-26T18:39:18Z", "commit": {"oid": "86469a16eb5bb4f18384f4c7b1e0b50562c2fd66"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxODozOToxOFrOGarXog==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxODozOToxOFrOGarXog==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDYyNjcyMg==", "bodyText": "@xiezhang7 Could try @Any.", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r430626722", "createdAt": "2020-05-26T18:39:18Z", "author": {"login": "rhtevan"}, "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/cdi/Producer.java", "diffHunk": "@@ -30,7 +30,7 @@\n @ApplicationScoped\n public class Producer {\n \n-    @ConfigProperty(name = \"persistence.type\")\n+    @ConfigProperty(name = \"storage.type\")\n     String persistenceType;\n \n     @Inject", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "86469a16eb5bb4f18384f4c7b1e0b50562c2fd66"}, "originalPosition": 8}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "86469a16eb5bb4f18384f4c7b1e0b50562c2fd66", "author": {"user": {"login": "xieshenzh", "name": "Xieshen"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/86469a16eb5bb4f18384f4c7b1e0b50562c2fd66", "committedDate": "2020-05-13T16:49:48Z", "message": "[KOGITO-1559] Plugin persistence with application.properties at runtime"}, "afterCommit": {"oid": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d", "author": {"user": {"login": "xieshenzh", "name": "Xieshen"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d", "committedDate": "2020-05-26T22:10:01Z", "message": "[KOGITO-1559] Create interface for data schema processing"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MTE0MzI1", "url": "https://github.com/kiegroup/kogito-apps/pull/208#pullrequestreview-419114325", "createdAt": "2020-05-27T11:50:56Z", "commit": {"oid": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMTo1MDo1NlrOGbFrcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMTo1MTozMFrOGbFskA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA1Nzc3Ng==", "bodyText": "Do you need any specific method of InfinispanCacheManager that is not available in the interface? I think we can leverage on @Storage annotation even here like\n    @Inject\n    @Storage(INFINISPAN_STORAGE)\n    CacheService cacheManager;", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431057776", "createdAt": "2020-05-27T11:50:56Z", "author": {"login": "danielezonca"}, "path": "data-index/data-index-storage/data-index-storage-infinispan/src/main/java/org/kie/kogito/index/infinispan/schema/ProtoSchemaConsumer.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ *\n+ *  * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *  *\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  * you may not use this file except in compliance with the License.\n+ *  * You may obtain a copy of the License at\n+ *  *\n+ *  *       http://www.apache.org/licenses/LICENSE-2.0\n+ *  *\n+ *  * Unless required by applicable law or agreed to in writing, software\n+ *  * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  * See the License for the specific language governing permissions and\n+ *  * limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.index.infinispan.schema;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.Any;\n+import javax.inject.Inject;\n+\n+import org.infinispan.query.remote.client.ProtobufMetadataManagerConstants;\n+import org.kie.kogito.index.infinispan.cache.InfinispanCacheManager;\n+import org.kie.kogito.index.schema.SchemaDescriptor;\n+import org.kie.kogito.index.schema.SchemaRegisteredEvent;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.emptyList;\n+\n+@ApplicationScoped\n+public class ProtoSchemaConsumer {\n+\n+    static final Logger LOGGER = LoggerFactory.getLogger(ProtoSchemaConsumer.class);\n+\n+    @Inject\n+    ProtoSchemaAcceptor schemaAcceptor;\n+\n+    @Inject\n+    @Any\n+    InfinispanCacheManager cacheManager;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA1ODA2NA==", "bodyText": "I think @Storage is more specific", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431058064", "createdAt": "2020-05-27T11:51:30Z", "author": {"login": "danielezonca"}, "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/storage/Producer.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ *\n+ *  * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *  *\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  * you may not use this file except in compliance with the License.\n+ *  * You may obtain a copy of the License at\n+ *  *\n+ *  *       http://www.apache.org/licenses/LICENSE-2.0\n+ *  *\n+ *  * Unless required by applicable law or agreed to in writing, software\n+ *  * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  * See the License for the specific language governing permissions and\n+ *  * limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.index.storage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Any;\n+import javax.enterprise.inject.Instance;\n+import javax.enterprise.inject.Produces;\n+import javax.inject.Inject;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.kie.kogito.index.cache.CacheService;\n+\n+@ApplicationScoped\n+public class Producer {\n+\n+    @ConfigProperty(name = \"storage.type\")\n+    String storageType;\n+\n+    @Inject\n+    @Any", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4OTQ2MjY3", "url": "https://github.com/kiegroup/kogito-apps/pull/208#pullrequestreview-418946267", "createdAt": "2020-05-27T07:59:42Z", "commit": {"oid": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d"}, "state": "COMMENTED", "comments": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzo1OTo0MlrOGa9x7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDowMjo0M1rOGbLsAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyODM2Ng==", "bodyText": "please keep in the same event package.", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r430928366", "createdAt": "2020-05-27T07:59:42Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/domain/DomainModelRegisteredEvent.java", "diffHunk": "@@ -1,20 +1,22 @@\n /*\n- * Copyright 2019 Red Hat, Inc. and/or its affiliates. \n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n+ *  * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *  *\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  * you may not use this file except in compliance with the License.\n+ *  * You may obtain a copy of the License at\n+ *  *\n+ *  *       http://www.apache.org/licenses/LICENSE-2.0\n+ *  *\n+ *  * Unless required by applicable law or agreed to in writing, software\n+ *  * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  * See the License for the specific language governing permissions and\n+ *  * limitations under the License.\n  *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n  */\n \n-package org.kie.kogito.index.event;\n+package org.kie.kogito.index.domain;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA0NDcxMw==", "bodyText": "unused import org.kie.kogito.index.domain.DomainDescriptor;", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431044713", "createdAt": "2020-05-27T11:23:57Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/domain/DomainModelRegisteredEvent.java", "diffHunk": "@@ -1,20 +1,22 @@\n /*\n- * Copyright 2019 Red Hat, Inc. and/or its affiliates. \n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n+ *  * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *  *\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  * you may not use this file except in compliance with the License.\n+ *  * You may obtain a copy of the License at\n+ *  *\n+ *  *       http://www.apache.org/licenses/LICENSE-2.0\n+ *  *\n+ *  * Unless required by applicable law or agreed to in writing, software\n+ *  * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  * See the License for the specific language governing permissions and\n+ *  * limitations under the License.\n  *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n  */\n \n-package org.kie.kogito.index.event;\n+package org.kie.kogito.index.domain;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkyODM2Ng=="}, "originalCommit": {"oid": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA0NTIyNw==", "bodyText": "please review the license format for all files in the PR as it doesnt match the current standard of the project.", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431045227", "createdAt": "2020-05-27T11:25:05Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/domain/DomainModelRegisteredEvent.java", "diffHunk": "@@ -1,20 +1,22 @@\n /*\n- * Copyright 2019 Red Hat, Inc. and/or its affiliates. \n  *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n+ *  * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *  *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA3NjcwNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Assert.assertTrue(protoSchemaAcceptor.accept(new SchemaType(PROTO_SCHEMA_TYPE)));\n          \n          \n            \n                    assertTrue(protoSchemaAcceptor.accept(new SchemaType(PROTO_SCHEMA_TYPE)));", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431076706", "createdAt": "2020-05-27T12:25:54Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-storage/data-index-storage-infinispan/src/test/java/org/kie/kogito/index/infinispan/schema/ProtoSchemaAcceptorTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ *\n+ *  * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *  *\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  * you may not use this file except in compliance with the License.\n+ *  * You may obtain a copy of the License at\n+ *  *\n+ *  *       http://www.apache.org/licenses/LICENSE-2.0\n+ *  *\n+ *  * Unless required by applicable law or agreed to in writing, software\n+ *  * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  * See the License for the specific language governing permissions and\n+ *  * limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.index.infinispan.schema;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.index.schema.SchemaType;\n+import org.wildfly.common.Assert;\n+\n+import static org.kie.kogito.index.infinispan.Constants.INFINISPAN_STORAGE;\n+import static org.kie.kogito.index.infinispan.schema.ProtoSchemaAcceptor.PROTO_SCHEMA_TYPE;\n+\n+class ProtoSchemaAcceptorTest {\n+\n+    ProtoSchemaAcceptor protoSchemaAcceptor = new ProtoSchemaAcceptor();\n+\n+    @Test\n+    void accept_true() {\n+        protoSchemaAcceptor.storageType = INFINISPAN_STORAGE;\n+        Assert.assertTrue(protoSchemaAcceptor.accept(new SchemaType(PROTO_SCHEMA_TYPE)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA3NzAzOQ==", "bodyText": "Could you please define a more meaningful name for what is actually tested in here?\nSame comment for all other methods in this class.", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431077039", "createdAt": "2020-05-27T12:26:31Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-storage/data-index-storage-infinispan/src/test/java/org/kie/kogito/index/infinispan/schema/ProtoSchemaAcceptorTest.java", "diffHunk": "@@ -0,0 +1,49 @@\n+/*\n+ *\n+ *  * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *  *\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  * you may not use this file except in compliance with the License.\n+ *  * You may obtain a copy of the License at\n+ *  *\n+ *  *       http://www.apache.org/licenses/LICENSE-2.0\n+ *  *\n+ *  * Unless required by applicable law or agreed to in writing, software\n+ *  * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  * See the License for the specific language governing permissions and\n+ *  * limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.index.infinispan.schema;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.index.schema.SchemaType;\n+import org.wildfly.common.Assert;\n+\n+import static org.kie.kogito.index.infinispan.Constants.INFINISPAN_STORAGE;\n+import static org.kie.kogito.index.infinispan.schema.ProtoSchemaAcceptor.PROTO_SCHEMA_TYPE;\n+\n+class ProtoSchemaAcceptorTest {\n+\n+    ProtoSchemaAcceptor protoSchemaAcceptor = new ProtoSchemaAcceptor();\n+\n+    @Test\n+    void accept_true() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA4MDE4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class ProtoSchemaProducer {\n          \n          \n            \n            public class ProtoSchemaManager {", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431080182", "createdAt": "2020-05-27T12:31:53Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-storage/data-index-storage-protobuf/src/main/java/org/kie/kogito/index/protobuf/schema/ProtoSchemaProducer.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ *\n+ *  * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *  *\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  * you may not use this file except in compliance with the License.\n+ *  * You may obtain a copy of the License at\n+ *  *\n+ *  *       http://www.apache.org/licenses/LICENSE-2.0\n+ *  *\n+ *  * Unless required by applicable law or agreed to in writing, software\n+ *  * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  * See the License for the specific language governing permissions and\n+ *  * limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.index.protobuf.schema;\n+\n+import java.util.Optional;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Event;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import org.infinispan.protostream.descriptors.Descriptor;\n+import org.infinispan.protostream.descriptors.FieldDescriptor;\n+import org.infinispan.protostream.descriptors.Option;\n+import org.kie.kogito.index.protobuf.ProtobufValidationException;\n+import org.kie.kogito.index.schema.ProcessDescriptor;\n+import org.kie.kogito.index.schema.SchemaDescriptor;\n+import org.kie.kogito.index.schema.SchemaRegisteredEvent;\n+import org.kie.kogito.index.schema.SchemaType;\n+\n+import static java.lang.String.format;\n+import static org.kie.kogito.index.Constants.KOGITO_DOMAIN_ATTRIBUTE;\n+\n+@ApplicationScoped\n+public class ProtoSchemaProducer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE0NTY1MQ==", "bodyText": "Could you please instead of deleting rename to ProtoSchemaManager so we keep track of the changes", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431145651", "createdAt": "2020-05-27T13:49:00Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-storage/data-index-storage-infinispan/src/main/java/org/kie/kogito/index/infinispan/protostream/ProtobufService.java", "diffHunk": "@@ -1,149 +0,0 @@\n-/*\n- * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.kie.kogito.index.infinispan.protostream;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.stream.Collectors;\n-\n-import javax.enterprise.context.ApplicationScoped;\n-import javax.enterprise.event.Event;\n-import javax.enterprise.event.Observes;\n-import javax.inject.Inject;\n-\n-import io.quarkus.runtime.StartupEvent;\n-import org.infinispan.protostream.FileDescriptorSource;\n-import org.infinispan.protostream.SerializationContext;\n-import org.infinispan.protostream.config.Configuration;\n-import org.infinispan.protostream.descriptors.Descriptor;\n-import org.infinispan.protostream.descriptors.FieldDescriptor;\n-import org.infinispan.protostream.descriptors.FileDescriptor;\n-import org.infinispan.protostream.descriptors.Option;\n-import org.infinispan.protostream.impl.SerializationContextImpl;\n-import org.infinispan.query.remote.client.ProtobufMetadataManagerConstants;\n-import org.kie.kogito.index.infinispan.cache.InfinispanCacheManager;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import static java.lang.String.format;\n-import static java.util.Collections.emptyList;\n-import static org.kie.kogito.index.Constants.KOGITO_DOMAIN_ATTRIBUTE;\n-\n-@ApplicationScoped\n-public class ProtobufService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE0NjcwMw==", "bodyText": "Any particular reason why jandex index is needed for this module?", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431146703", "createdAt": "2020-05-27T13:50:17Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-storage/data-index-storage-api/pom.xml", "diffHunk": "@@ -21,5 +21,26 @@\n       <groupId>com.fasterxml.jackson.core</groupId>\n       <artifactId>jackson-annotations</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-core</artifactId>\n+    </dependency>\n   </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.jboss.jandex</groupId>\n+        <artifactId>jandex-maven-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <id>make-index</id>\n+            <goals>\n+              <goal>jandex</goal>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE0ODUyNw==", "bodyText": "Deleted and added file?", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431148527", "createdAt": "2020-05-27T13:52:36Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-storage/data-index-storage-protobuf/src/main/java/org/kie/kogito/index/protobuf/ProtobufService.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.protobuf;\n+\n+import java.util.Optional;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Event;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import io.quarkus.runtime.StartupEvent;\n+import org.infinispan.protostream.FileDescriptorSource;\n+import org.infinispan.protostream.SerializationContext;\n+import org.infinispan.protostream.config.Configuration;\n+import org.infinispan.protostream.descriptors.FileDescriptor;\n+import org.infinispan.protostream.impl.SerializationContextImpl;\n+import org.kie.kogito.index.cache.CacheService;\n+import org.kie.kogito.index.protobuf.domain.DomainModelDescriptorRegisteredEvent;\n+import org.kie.kogito.index.protobuf.schema.SchemaDescriptorRegisteredEvent;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class ProtobufService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE0ODY0Mw==", "bodyText": "not used, please remove", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431148643", "createdAt": "2020-05-27T13:52:44Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-storage/data-index-storage-protobuf/src/main/java/org/kie/kogito/index/protobuf/ProtobufService.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.protobuf;\n+\n+import java.util.Optional;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Event;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import io.quarkus.runtime.StartupEvent;\n+import org.infinispan.protostream.FileDescriptorSource;\n+import org.infinispan.protostream.SerializationContext;\n+import org.infinispan.protostream.config.Configuration;\n+import org.infinispan.protostream.descriptors.FileDescriptor;\n+import org.infinispan.protostream.impl.SerializationContextImpl;\n+import org.kie.kogito.index.cache.CacheService;\n+import org.kie.kogito.index.protobuf.domain.DomainModelDescriptorRegisteredEvent;\n+import org.kie.kogito.index.protobuf.schema.SchemaDescriptorRegisteredEvent;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class ProtobufService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ProtobufService.class);\n+\n+    @Inject\n+    CacheService service;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE1MTIwOQ==", "bodyText": "when is long used? can a test be provided and probably doing Long.parseLong(input.toString()) of a Long is not needed.", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431151209", "createdAt": "2020-05-27T13:56:02Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/graphql/GraphQLScalarTypeProducer.java", "diffHunk": "@@ -55,13 +55,13 @@ public GraphQLScalarType dateTimeScalar() {\n         return GraphQLScalarType.newScalar()\n                 .name(\"DateTime\")\n                 .description(\"An ISO-8601 compliant DateTime Scalar\")\n-                .coercing(new Coercing() {\n+                .coercing(new Coercing<>() {\n                     @Override\n                     public Object serialize(Object input) {\n                         ZonedDateTime dateTime;\n                         if (input instanceof ZonedDateTime) {\n                             dateTime = (ZonedDateTime) input;\n-                        } else if (input instanceof String) {\n+                        } else if (input instanceof String || input instanceof Long) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE1NDMxMA==", "bodyText": "perhaps only use the infinispan protostream dependency instead of the entire client from Quarkus", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431154310", "createdAt": "2020-05-27T14:00:09Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-storage/data-index-storage-protobuf/pom.xml", "diffHunk": "@@ -0,0 +1,62 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>data-index-storage</artifactId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>data-index-storage-protobuf</artifactId>\n+  <name>Kogito :: Data Index Storage Protobuf</name>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>data-index-storage-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>infinispan-persistence-addon</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-core</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-infinispan-client</artifactId>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMTI0Njk1MA=="}, "originalCommit": {"oid": "3c97fab73909cea0a3c29847d9c0a928407cbf93"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE1NjIyNw==", "bodyText": "please move the file instead of deleting and recreating.", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431156227", "createdAt": "2020-05-27T14:02:43Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-storage/data-index-storage-protobuf/src/main/java/org/kie/kogito/index/protobuf/FileDescriptorProducer.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.protobuf;\n+\n+import java.io.IOException;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Produces;\n+\n+import org.infinispan.protostream.FileDescriptorSource;\n+\n+@ApplicationScoped\n+public class FileDescriptorProducer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MjcyNzgy", "url": "https://github.com/kiegroup/kogito-apps/pull/208#pullrequestreview-419272782", "createdAt": "2020-05-27T14:29:28Z", "commit": {"oid": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDoyOToyOFrOGbM-aQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNDo0MTozMFrOGbNyWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE3NzMyMQ==", "bodyText": "ideally we should prevent such changes, especially when not touching the file elsewhere, the same applies for imports order.", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431177321", "createdAt": "2020-05-27T14:29:28Z", "author": {"login": "jstastny-cz"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/service/IndexingService.java", "diffHunk": "@@ -114,7 +114,7 @@ private ObjectNode indexKogitoDomain(ObjectNode kogitoEvent, ObjectNode kogitoCa\n \n         ArrayNode indexPIArray = (ArrayNode) kogitoEvent.get(PROCESS_INSTANCES_DOMAIN_ATTRIBUTE);\n         if (indexPIArray != null) {\n-            \n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE4NDIxNQ==", "bodyText": "Cause we have implementations in the *-api module, IMO that should not be the case, also removing the need for jandex here.", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431184215", "createdAt": "2020-05-27T14:34:24Z", "author": {"login": "jstastny-cz"}, "path": "data-index/data-index-storage/data-index-storage-api/pom.xml", "diffHunk": "@@ -21,5 +21,26 @@\n       <groupId>com.fasterxml.jackson.core</groupId>\n       <artifactId>jackson-annotations</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-core</artifactId>\n+    </dependency>\n   </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.jboss.jandex</groupId>\n+        <artifactId>jandex-maven-plugin</artifactId>\n+        <executions>\n+          <execution>\n+            <id>make-index</id>\n+            <goals>\n+              <goal>jandex</goal>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE0NjcwMw=="}, "originalCommit": {"oid": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE4NTQwMA==", "bodyText": "should this be still in api module?", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431185400", "createdAt": "2020-05-27T14:35:28Z", "author": {"login": "jstastny-cz"}, "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/storage/Producer.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ *\n+ *  * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *  *\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  * you may not use this file except in compliance with the License.\n+ *  * You may obtain a copy of the License at\n+ *  *\n+ *  *       http://www.apache.org/licenses/LICENSE-2.0\n+ *  *\n+ *  * Unless required by applicable law or agreed to in writing, software\n+ *  * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  * See the License for the specific language governing permissions and\n+ *  * limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.index.storage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Any;\n+import javax.enterprise.inject.Instance;\n+import javax.enterprise.inject.Produces;\n+import javax.inject.Inject;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.kie.kogito.index.cache.CacheService;\n+\n+@ApplicationScoped\n+public class Producer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE4NTc1Mw==", "bodyText": "Should this be still in api module?", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431185753", "createdAt": "2020-05-27T14:35:48Z", "author": {"login": "jstastny-cz"}, "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/storage/StorageImpl.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ *\n+ *  * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *  *\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  * you may not use this file except in compliance with the License.\n+ *  * You may obtain a copy of the License at\n+ *  *\n+ *  *       http://www.apache.org/licenses/LICENSE-2.0\n+ *  *\n+ *  * Unless required by applicable law or agreed to in writing, software\n+ *  * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  * See the License for the specific language governing permissions and\n+ *  * limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.index.storage;\n+\n+import javax.enterprise.util.AnnotationLiteral;\n+\n+public class StorageImpl extends AnnotationLiteral<Storage> implements Storage {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE4ODM1OA==", "bodyText": "listProtoCacheKeys->logProtoCacheKeys", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431188358", "createdAt": "2020-05-27T14:38:20Z", "author": {"login": "jstastny-cz"}, "path": "data-index/data-index-storage/data-index-storage-infinispan/src/main/java/org/kie/kogito/index/infinispan/schema/ProtoSchemaConsumer.java", "diffHunk": "@@ -0,0 +1,96 @@\n+/*\n+ *\n+ *  * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *  *\n+ *  * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  * you may not use this file except in compliance with the License.\n+ *  * You may obtain a copy of the License at\n+ *  *\n+ *  *       http://www.apache.org/licenses/LICENSE-2.0\n+ *  *\n+ *  * Unless required by applicable law or agreed to in writing, software\n+ *  * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  * See the License for the specific language governing permissions and\n+ *  * limitations under the License.\n+ *\n+ */\n+\n+package org.kie.kogito.index.infinispan.schema;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.Any;\n+import javax.inject.Inject;\n+\n+import org.infinispan.query.remote.client.ProtobufMetadataManagerConstants;\n+import org.kie.kogito.index.infinispan.cache.InfinispanCacheManager;\n+import org.kie.kogito.index.schema.SchemaDescriptor;\n+import org.kie.kogito.index.schema.SchemaRegisteredEvent;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.emptyList;\n+\n+@ApplicationScoped\n+public class ProtoSchemaConsumer {\n+\n+    static final Logger LOGGER = LoggerFactory.getLogger(ProtoSchemaConsumer.class);\n+\n+    @Inject\n+    ProtoSchemaAcceptor schemaAcceptor;\n+\n+    @Inject\n+    @Any\n+    InfinispanCacheManager cacheManager;\n+\n+    public void onSchemaRegisteredEvent(@Observes SchemaRegisteredEvent event) {\n+        if (schemaAcceptor.accept(event.getSchemaType())) {\n+            SchemaDescriptor schemaDescriptor = event.getSchemaDescriptor();\n+            cacheManager.getProtobufCache().put(schemaDescriptor.getName(), schemaDescriptor.getSchemaContent());\n+            schemaDescriptor.getProcessDescriptor().ifPresent(processDescriptor -> {\n+                Map<String, String> cache = cacheManager.getProtobufCache();\n+                cacheManager.getProcessIdModelCache().put(processDescriptor.getProcessId(), processDescriptor.getProcessType());\n+\n+                List<String> errors = checkSchemaErrors(cache);\n+\n+                if (!errors.isEmpty()) {\n+                    String message = \"Proto Schema contain errors:\\n\" + errors.stream().collect(Collectors.joining(\"\\n\"));\n+                    throw new RuntimeException(message);\n+                }\n+\n+                if (LOGGER.isDebugEnabled()) {\n+                    listProtoCacheKeys();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE5MDYxOQ==", "bodyText": "Actually this producer used to be in different class before: ProtostreamProducer.java", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431190619", "createdAt": "2020-05-27T14:41:30Z", "author": {"login": "jstastny-cz"}, "path": "data-index/data-index-storage/data-index-storage-protobuf/src/main/java/org/kie/kogito/index/protobuf/FileDescriptorProducer.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.protobuf;\n+\n+import java.io.IOException;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.inject.Produces;\n+\n+import org.infinispan.protostream.FileDescriptorSource;\n+\n+@ApplicationScoped\n+public class FileDescriptorProducer {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTE1NjIyNw=="}, "originalCommit": {"oid": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d"}, "originalPosition": 27}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d", "author": {"user": {"login": "xieshenzh", "name": "Xieshen"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d", "committedDate": "2020-05-26T22:10:01Z", "message": "[KOGITO-1559] Create interface for data schema processing"}, "afterCommit": {"oid": "4b4e37d0c7949a23a35506c97e78e90788716bf4", "author": {"user": {"login": "xieshenzh", "name": "Xieshen"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/4b4e37d0c7949a23a35506c97e78e90788716bf4", "committedDate": "2020-05-27T22:55:49Z", "message": "[KOGITO-1559] pull request"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5NDMyNTQ1", "url": "https://github.com/kiegroup/kogito-apps/pull/208#pullrequestreview-419432545", "createdAt": "2020-05-27T17:02:02Z", "commit": {"oid": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzowMjowMlrOGbUk8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxNzowMzo0NFrOGbUogg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwMTg3Mw==", "bodyText": "Don't we want to start our properties with kogito. prefix ?\neven use kogito.data-index here like we do on jobs-service ?\n\n  \n    \n      kogito-apps/jobs-service/src/main/resources/application.properties\n    \n    \n         Line 57\n      in\n      efe03a6\n    \n    \n    \n    \n\n        \n          \n           kogito.jobs-service.persistence=in-memory", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431301873", "createdAt": "2020-05-27T17:02:02Z", "author": {"login": "radtriste"}, "path": "data-index/data-index-service/src/main/resources/application.properties", "diffHunk": "@@ -14,6 +14,7 @@ quarkus.http.cors=true\n \n # Infinispan\n quarkus.infinispan-client.server-list=localhost:11222\n+storage.type=infinispan", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTMwMjc4Ng==", "bodyText": "same here for the prefix", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431302786", "createdAt": "2020-05-27T17:03:44Z", "author": {"login": "radtriste"}, "path": "data-index/data-index-service/src/test/resources/application.properties", "diffHunk": "@@ -67,6 +67,7 @@ quarkus.infinispan-client.auth-realm=default\n quarkus.infinispan-client.auth-server-name=infinispan\n quarkus.infinispan-client.client-intelligence=BASIC\n quarkus.infinispan-client.sasl-mechanism=DIGEST-MD5\n+storage.type=infinispan", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5b5dbd80d8b5f97416d1bed7fd9782c72d58cc7d"}, "originalPosition": 4}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwMTg4MjEx", "url": "https://github.com/kiegroup/kogito-apps/pull/208#pullrequestreview-420188211", "createdAt": "2020-05-28T14:46:35Z", "commit": {"oid": "d78f746c30d62aee48219346e21ae97f9176fcba"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDo0NjozNVrOGb4ygw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQxNDo1Nzo1N1rOGb5VcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg5NTE3MQ==", "bodyText": "what is the purpose of fileName here? It's being used just in the firing event?\nEDITED:\nThere are several invocations of the method with fileName=\"\", I'd argue for the method overload to make fileName optional, plus swap the order of arguments (to have the optional on the right).\nPlus I could really use javadoc for this (or these) method(s) to quickly spot the difference of use cases.", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431895171", "createdAt": "2020-05-28T14:46:35Z", "author": {"login": "jstastny-cz"}, "path": "data-index/data-index-storage/data-index-storage-protobuf/src/main/java/org/kie/kogito/index/protobuf/ProtobufService.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.protobuf;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Event;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import io.quarkus.runtime.StartupEvent;\n+import org.infinispan.protostream.FileDescriptorSource;\n+import org.infinispan.protostream.SerializationContext;\n+import org.infinispan.protostream.config.Configuration;\n+import org.infinispan.protostream.descriptors.FileDescriptor;\n+import org.infinispan.protostream.impl.SerializationContextImpl;\n+import org.kie.kogito.index.protobuf.domain.DomainModelDescriptorRegisteredEvent;\n+import org.kie.kogito.index.protobuf.schema.SchemaDescriptorRegisteredEvent;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class ProtobufService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ProtobufService.class);\n+\n+    @Inject\n+    FileDescriptorSource kogitoDescriptors;\n+\n+    @Inject\n+    Event<DomainModelDescriptorRegisteredEvent> domainModelEvent;\n+\n+    @Inject\n+    Event<SchemaDescriptorRegisteredEvent> schemaEvent;\n+\n+    void onStart(@Observes StartupEvent ev) {\n+        kogitoDescriptors.getFileDescriptors().forEach((name, bytes) -> {\n+            LOGGER.info(\"Registering Kogito ProtoBuffer file: {}\", name);\n+            schemaEvent.fire(new SchemaDescriptorRegisteredEvent(name, new String(bytes), null, t -> null));\n+        });\n+    }\n+\n+    public void registerProtoBufferType(String fileName, String content) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78f746c30d62aee48219346e21ae97f9176fcba"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTg5ODAyOA==", "bodyText": "What does it really mean passing the empty string? IMO a overloaded method would be better (including the swapped order of args):\nregisterProtoBufferType(String content, String fileName)\nregisterProtoBufferType(String content)", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431898028", "createdAt": "2020-05-28T14:50:07Z", "author": {"login": "jstastny-cz"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/graphql/WebSocketSubscriptionIT.java", "diffHunk": "@@ -78,7 +78,7 @@ public void testProcessInstanceSubscription() throws Exception {\n         String processId = \"travels\";\n         String processInstanceId = UUID.randomUUID().toString();\n \n-        protobufService.registerProtoBufferType(getTravelsProtoBufferFile());\n+        protobufService.registerProtoBufferType(\"\", getTravelsProtoBufferFile());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78f746c30d62aee48219346e21ae97f9176fcba"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwMDE5NA==", "bodyText": "Didn't we want to throw ProtobufValidationException added above?", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431900194", "createdAt": "2020-05-28T14:52:50Z", "author": {"login": "jstastny-cz"}, "path": "data-index/data-index-storage/data-index-storage-infinispan/src/main/java/org/kie/kogito/index/infinispan/protostream/ProtoSchemaManager.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.infinispan.protostream;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Observes;\n+import javax.enterprise.inject.Any;\n+import javax.inject.Inject;\n+\n+import org.infinispan.query.remote.client.ProtobufMetadataManagerConstants;\n+import org.kie.kogito.index.event.SchemaRegisteredEvent;\n+import org.kie.kogito.index.infinispan.cache.InfinispanCacheManager;\n+import org.kie.kogito.index.schema.SchemaDescriptor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static java.util.Collections.emptyList;\n+\n+@ApplicationScoped\n+public class ProtoSchemaManager {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ProtoSchemaManager.class);\n+\n+    @Inject\n+    ProtoSchemaAcceptor schemaAcceptor;\n+\n+    @Inject\n+    @Any\n+    InfinispanCacheManager cacheManager;\n+\n+    public void onSchemaRegisteredEvent(@Observes SchemaRegisteredEvent event) {\n+        if (schemaAcceptor.accept(event.getSchemaType())) {\n+            SchemaDescriptor schemaDescriptor = event.getSchemaDescriptor();\n+            cacheManager.getProtobufCache().put(schemaDescriptor.getName(), schemaDescriptor.getSchemaContent());\n+            schemaDescriptor.getProcessDescriptor().ifPresent(processDescriptor -> {\n+                Map<String, String> cache = cacheManager.getProtobufCache();\n+                cacheManager.getProcessIdModelCache().put(processDescriptor.getProcessId(), processDescriptor.getProcessType());\n+\n+                List<String> errors = checkSchemaErrors(cache);\n+\n+                if (!errors.isEmpty()) {\n+                    String message = \"Proto Schema contain errors:\\n\" + String.join(\"\\n\", errors);\n+                    throw new RuntimeException(message);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78f746c30d62aee48219346e21ae97f9176fcba"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwMzU4NA==", "bodyText": "Just checking - ProtobufValidationException probably does not fit in here, correct?", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431903584", "createdAt": "2020-05-28T14:57:15Z", "author": {"login": "jstastny-cz"}, "path": "data-index/data-index-storage/data-index-storage-protobuf/src/main/java/org/kie/kogito/index/protobuf/ProtobufService.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.protobuf;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Event;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import io.quarkus.runtime.StartupEvent;\n+import org.infinispan.protostream.FileDescriptorSource;\n+import org.infinispan.protostream.SerializationContext;\n+import org.infinispan.protostream.config.Configuration;\n+import org.infinispan.protostream.descriptors.FileDescriptor;\n+import org.infinispan.protostream.impl.SerializationContextImpl;\n+import org.kie.kogito.index.protobuf.domain.DomainModelDescriptorRegisteredEvent;\n+import org.kie.kogito.index.protobuf.schema.SchemaDescriptorRegisteredEvent;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class ProtobufService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ProtobufService.class);\n+\n+    @Inject\n+    FileDescriptorSource kogitoDescriptors;\n+\n+    @Inject\n+    Event<DomainModelDescriptorRegisteredEvent> domainModelEvent;\n+\n+    @Inject\n+    Event<SchemaDescriptorRegisteredEvent> schemaEvent;\n+\n+    void onStart(@Observes StartupEvent ev) {\n+        kogitoDescriptors.getFileDescriptors().forEach((name, bytes) -> {\n+            LOGGER.info(\"Registering Kogito ProtoBuffer file: {}\", name);\n+            schemaEvent.fire(new SchemaDescriptorRegisteredEvent(name, new String(bytes), null, t -> null));\n+        });\n+    }\n+\n+    public void registerProtoBufferType(String fileName, String content) {\n+        LOGGER.debug(\"Registering new ProtoBuffer file with content: \\n{}\", content);\n+\n+        content = content.replaceAll(\"kogito.Date\", \"string\");\n+        SerializationContext ctx = new SerializationContextImpl(Configuration.builder().build());\n+        try {\n+            ctx.registerProtoFiles(kogitoDescriptors);\n+            ctx.registerProtoFiles(FileDescriptorSource.fromString(\"\", content));\n+        } catch (Exception ex) {\n+            LOGGER.warn(\"Error trying to parse proto buffer file: {}\", ex.getMessage(), ex);\n+            throw ex;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78f746c30d62aee48219346e21ae97f9176fcba"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwNDAyNA==", "bodyText": "Just wondering - Shouldn't the \"\" here be the fileName?", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431904024", "createdAt": "2020-05-28T14:57:50Z", "author": {"login": "jstastny-cz"}, "path": "data-index/data-index-storage/data-index-storage-protobuf/src/main/java/org/kie/kogito/index/protobuf/ProtobufService.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.protobuf;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Event;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import io.quarkus.runtime.StartupEvent;\n+import org.infinispan.protostream.FileDescriptorSource;\n+import org.infinispan.protostream.SerializationContext;\n+import org.infinispan.protostream.config.Configuration;\n+import org.infinispan.protostream.descriptors.FileDescriptor;\n+import org.infinispan.protostream.impl.SerializationContextImpl;\n+import org.kie.kogito.index.protobuf.domain.DomainModelDescriptorRegisteredEvent;\n+import org.kie.kogito.index.protobuf.schema.SchemaDescriptorRegisteredEvent;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class ProtobufService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ProtobufService.class);\n+\n+    @Inject\n+    FileDescriptorSource kogitoDescriptors;\n+\n+    @Inject\n+    Event<DomainModelDescriptorRegisteredEvent> domainModelEvent;\n+\n+    @Inject\n+    Event<SchemaDescriptorRegisteredEvent> schemaEvent;\n+\n+    void onStart(@Observes StartupEvent ev) {\n+        kogitoDescriptors.getFileDescriptors().forEach((name, bytes) -> {\n+            LOGGER.info(\"Registering Kogito ProtoBuffer file: {}\", name);\n+            schemaEvent.fire(new SchemaDescriptorRegisteredEvent(name, new String(bytes), null, t -> null));\n+        });\n+    }\n+\n+    public void registerProtoBufferType(String fileName, String content) {\n+        LOGGER.debug(\"Registering new ProtoBuffer file with content: \\n{}\", content);\n+\n+        content = content.replaceAll(\"kogito.Date\", \"string\");\n+        SerializationContext ctx = new SerializationContextImpl(Configuration.builder().build());\n+        try {\n+            ctx.registerProtoFiles(kogitoDescriptors);\n+            ctx.registerProtoFiles(FileDescriptorSource.fromString(\"\", content));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78f746c30d62aee48219346e21ae97f9176fcba"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTkwNDExMw==", "bodyText": "Just wondering - Shouldn't the \"\" here be the fileName?", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r431904113", "createdAt": "2020-05-28T14:57:57Z", "author": {"login": "jstastny-cz"}, "path": "data-index/data-index-storage/data-index-storage-protobuf/src/main/java/org/kie/kogito/index/protobuf/ProtobufService.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.protobuf;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.event.Event;\n+import javax.enterprise.event.Observes;\n+import javax.inject.Inject;\n+\n+import io.quarkus.runtime.StartupEvent;\n+import org.infinispan.protostream.FileDescriptorSource;\n+import org.infinispan.protostream.SerializationContext;\n+import org.infinispan.protostream.config.Configuration;\n+import org.infinispan.protostream.descriptors.FileDescriptor;\n+import org.infinispan.protostream.impl.SerializationContextImpl;\n+import org.kie.kogito.index.protobuf.domain.DomainModelDescriptorRegisteredEvent;\n+import org.kie.kogito.index.protobuf.schema.SchemaDescriptorRegisteredEvent;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class ProtobufService {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ProtobufService.class);\n+\n+    @Inject\n+    FileDescriptorSource kogitoDescriptors;\n+\n+    @Inject\n+    Event<DomainModelDescriptorRegisteredEvent> domainModelEvent;\n+\n+    @Inject\n+    Event<SchemaDescriptorRegisteredEvent> schemaEvent;\n+\n+    void onStart(@Observes StartupEvent ev) {\n+        kogitoDescriptors.getFileDescriptors().forEach((name, bytes) -> {\n+            LOGGER.info(\"Registering Kogito ProtoBuffer file: {}\", name);\n+            schemaEvent.fire(new SchemaDescriptorRegisteredEvent(name, new String(bytes), null, t -> null));\n+        });\n+    }\n+\n+    public void registerProtoBufferType(String fileName, String content) {\n+        LOGGER.debug(\"Registering new ProtoBuffer file with content: \\n{}\", content);\n+\n+        content = content.replaceAll(\"kogito.Date\", \"string\");\n+        SerializationContext ctx = new SerializationContextImpl(Configuration.builder().build());\n+        try {\n+            ctx.registerProtoFiles(kogitoDescriptors);\n+            ctx.registerProtoFiles(FileDescriptorSource.fromString(\"\", content));\n+        } catch (Exception ex) {\n+            LOGGER.warn(\"Error trying to parse proto buffer file: {}\", ex.getMessage(), ex);\n+            throw ex;\n+        }\n+\n+        FileDescriptor desc = ctx.getFileDescriptors().get(\"\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d78f746c30d62aee48219346e21ae97f9176fcba"}, "originalPosition": 69}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c768906f244406709b2c7c723c5437ce96db1008", "author": {"user": {"login": "xieshenzh", "name": "Xieshen"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/c768906f244406709b2c7c723c5437ce96db1008", "committedDate": "2020-05-28T18:05:37Z", "message": "[KOGITO-1559] pull request changes for protobuf module"}, "afterCommit": {"oid": "df5f1e0ccfbd12defd107b32eff33bda8a333dee", "author": {"user": {"login": "xieshenzh", "name": "Xieshen"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/df5f1e0ccfbd12defd107b32eff33bda8a333dee", "committedDate": "2020-05-29T13:28:08Z", "message": "[KOGITO-1559] pull request changes for protobuf module"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNTY2NjAz", "url": "https://github.com/kiegroup/kogito-apps/pull/208#pullrequestreview-421566603", "createdAt": "2020-06-01T02:42:49Z", "commit": {"oid": "df5f1e0ccfbd12defd107b32eff33bda8a333dee"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMjo0Mjo0OVrOGc9cPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQwMzowOTo0OVrOGc9tXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAxOTk2Nw==", "bodyText": "the API module should be quite lightweight, can you review the need to bring quarkus-core dependency here please.", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r433019967", "createdAt": "2020-06-01T02:42:49Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-storage/data-index-storage-api/pom.xml", "diffHunk": "@@ -21,5 +21,9 @@\n       <groupId>com.fasterxml.jackson.core</groupId>\n       <artifactId>jackson-annotations</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-core</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df5f1e0ccfbd12defd107b32eff33bda8a333dee"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAyMTI4MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                void testAccept_supportedStorageTypeAndSchemaType() {\n          \n          \n            \n                void supportedStorageTypeAndSchemaType() {", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r433021281", "createdAt": "2020-06-01T02:50:57Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-storage/data-index-storage-infinispan/src/test/java/org/kie/kogito/index/infinispan/protostream/ProtoSchemaAcceptorTest.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.infinispan.protostream;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.index.schema.SchemaType;\n+\n+import static org.kie.kogito.index.infinispan.Constants.INFINISPAN_STORAGE;\n+import static org.kie.kogito.index.infinispan.protostream.ProtoSchemaAcceptor.PROTO_SCHEMA_TYPE;\n+import static org.wildfly.common.Assert.assertFalse;\n+import static org.wildfly.common.Assert.assertTrue;\n+\n+class ProtoSchemaAcceptorTest {\n+\n+    ProtoSchemaAcceptor protoSchemaAcceptor = new ProtoSchemaAcceptor();\n+\n+    @Test\n+    void testAccept_supportedStorageTypeAndSchemaType() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df5f1e0ccfbd12defd107b32eff33bda8a333dee"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAyMTMzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                void testAccept_unsupportedSchemaType() {\n          \n          \n            \n                void unsupportedSchemaType() {", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r433021339", "createdAt": "2020-06-01T02:51:16Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-storage/data-index-storage-infinispan/src/test/java/org/kie/kogito/index/infinispan/protostream/ProtoSchemaAcceptorTest.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.infinispan.protostream;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.index.schema.SchemaType;\n+\n+import static org.kie.kogito.index.infinispan.Constants.INFINISPAN_STORAGE;\n+import static org.kie.kogito.index.infinispan.protostream.ProtoSchemaAcceptor.PROTO_SCHEMA_TYPE;\n+import static org.wildfly.common.Assert.assertFalse;\n+import static org.wildfly.common.Assert.assertTrue;\n+\n+class ProtoSchemaAcceptorTest {\n+\n+    ProtoSchemaAcceptor protoSchemaAcceptor = new ProtoSchemaAcceptor();\n+\n+    @Test\n+    void testAccept_supportedStorageTypeAndSchemaType() {\n+        protoSchemaAcceptor.storageType = INFINISPAN_STORAGE;\n+        assertTrue(protoSchemaAcceptor.accept(new SchemaType(PROTO_SCHEMA_TYPE)));\n+    }\n+\n+    @Test\n+    void testAccept_unsupportedSchemaType() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df5f1e0ccfbd12defd107b32eff33bda8a333dee"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAyMTM2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                void testAccept_unsupportedStorageType() {\n          \n          \n            \n                void unsupportedStorageType() {", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r433021367", "createdAt": "2020-06-01T02:51:25Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-storage/data-index-storage-infinispan/src/test/java/org/kie/kogito/index/infinispan/protostream/ProtoSchemaAcceptorTest.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.infinispan.protostream;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.index.schema.SchemaType;\n+\n+import static org.kie.kogito.index.infinispan.Constants.INFINISPAN_STORAGE;\n+import static org.kie.kogito.index.infinispan.protostream.ProtoSchemaAcceptor.PROTO_SCHEMA_TYPE;\n+import static org.wildfly.common.Assert.assertFalse;\n+import static org.wildfly.common.Assert.assertTrue;\n+\n+class ProtoSchemaAcceptorTest {\n+\n+    ProtoSchemaAcceptor protoSchemaAcceptor = new ProtoSchemaAcceptor();\n+\n+    @Test\n+    void testAccept_supportedStorageTypeAndSchemaType() {\n+        protoSchemaAcceptor.storageType = INFINISPAN_STORAGE;\n+        assertTrue(protoSchemaAcceptor.accept(new SchemaType(PROTO_SCHEMA_TYPE)));\n+    }\n+\n+    @Test\n+    void testAccept_unsupportedSchemaType() {\n+        protoSchemaAcceptor.storageType = INFINISPAN_STORAGE;\n+        assertFalse(protoSchemaAcceptor.accept(new SchemaType(\"test\")));\n+    }\n+\n+    @Test\n+    void testAccept_unsupportedStorageType() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df5f1e0ccfbd12defd107b32eff33bda8a333dee"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAyMTkzMA==", "bodyText": "is this dependency really needed?", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r433021930", "createdAt": "2020-06-01T02:54:45Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-storage/data-index-storage-protobuf/pom.xml", "diffHunk": "@@ -0,0 +1,62 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>data-index-storage</artifactId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>data-index-storage-protobuf</artifactId>\n+  <name>Kogito :: Data Index Storage Protobuf</name>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>data-index-storage-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>infinispan-persistence-addon</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-core</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df5f1e0ccfbd12defd107b32eff33bda8a333dee"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAyMjUwNw==", "bodyText": "is this dependency really needed?", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r433022507", "createdAt": "2020-06-01T02:58:18Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-storage/data-index-storage-protobuf/pom.xml", "diffHunk": "@@ -0,0 +1,62 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>data-index-storage</artifactId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>data-index-storage-protobuf</artifactId>\n+  <name>Kogito :: Data Index Storage Protobuf</name>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>data-index-storage-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>infinispan-persistence-addon</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-core</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.infinispan.protostream</groupId>\n+      <artifactId>protostream</artifactId>\n+    </dependency>\n+\n+    <!-- test -->\n+    <dependency>\n+      <groupId>org.assertj</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df5f1e0ccfbd12defd107b32eff33bda8a333dee"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAyMjUzMg==", "bodyText": "is this dependency really needed?", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r433022532", "createdAt": "2020-06-01T02:58:28Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-storage/data-index-storage-protobuf/pom.xml", "diffHunk": "@@ -0,0 +1,62 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <parent>\n+    <groupId>org.kie.kogito</groupId>\n+    <artifactId>data-index-storage</artifactId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>data-index-storage-protobuf</artifactId>\n+  <name>Kogito :: Data Index Storage Protobuf</name>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>data-index-storage-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>infinispan-persistence-addon</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-core</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.infinispan.protostream</groupId>\n+      <artifactId>protostream</artifactId>\n+    </dependency>\n+\n+    <!-- test -->\n+    <dependency>\n+      <groupId>org.assertj</groupId>\n+      <artifactId>assertj-core</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-core</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-params</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df5f1e0ccfbd12defd107b32eff33bda8a333dee"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzAyNDM0OQ==", "bodyText": "@xiezhang7 if you fire both events here, we might endup registering domains for proto files that are invalid, I would recommend keeping the logic and order that these events were handled.", "url": "https://github.com/kiegroup/kogito-apps/pull/208#discussion_r433024349", "createdAt": "2020-06-01T03:09:49Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-storage/data-index-storage-protobuf/src/main/java/org/kie/kogito/index/protobuf/ProtobufService.java", "diffHunk": "@@ -101,19 +101,11 @@ public void registerProtoBufferType(String content) throws Exception {\n \n         validateDescriptorField(messageName, descriptor, KOGITO_DOMAIN_ATTRIBUTE);\n \n-        Map<String, String> cache = manager.getProtobufCache();\n-        cache.put(processId + \".proto\", content);\n-        manager.getProcessIdModelCache().put(processId, fullTypeName);\n-        List<String> errors = checkSchemaErrors(cache);\n-        if (errors.isEmpty()) {\n-            event.fire(new FileDescriptorRegisteredEvent(desc));\n-        } else {\n-            String message = \"Proto Schema contain errors:\\n\" + errors.stream().collect(Collectors.joining(\"\\n\"));\n-            throw new ProtobufValidationException(message);\n-        }\n-\n-        if (LOGGER.isDebugEnabled()) {\n-            listProtoCacheKeys();\n+        try {\n+            schemaEvent.fire(new SchemaRegisteredEvent(new SchemaDescriptor(processId + \".proto\", content, new ProcessDescriptor(processId, fullTypeName)), SCHEMA_TYPE));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "df5f1e0ccfbd12defd107b32eff33bda8a333dee"}, "originalPosition": 94}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxODAwNDUw", "url": "https://github.com/kiegroup/kogito-apps/pull/208#pullrequestreview-421800450", "createdAt": "2020-06-01T12:22:42Z", "commit": {"oid": "df5f1e0ccfbd12defd107b32eff33bda8a333dee"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2f7abcf0a19d6e872a44c5d391110ca81a6df6a8", "author": {"user": {"login": "xieshenzh", "name": "Xieshen"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/2f7abcf0a19d6e872a44c5d391110ca81a6df6a8", "committedDate": "2020-06-01T20:44:44Z", "message": "[KOGITO-1559] sonar analysis"}, "afterCommit": {"oid": "542c62a088bc4a61d18f7835b814a9b543040ddb", "author": {"user": {"login": "xieshenzh", "name": "Xieshen"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/542c62a088bc4a61d18f7835b814a9b543040ddb", "committedDate": "2020-06-01T23:55:58Z", "message": "[KOGITO-1559] sonar analysis"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIyMzUyMjE2", "url": "https://github.com/kiegroup/kogito-apps/pull/208#pullrequestreview-422352216", "createdAt": "2020-06-02T05:29:02Z", "commit": {"oid": "542c62a088bc4a61d18f7835b814a9b543040ddb"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "542c62a088bc4a61d18f7835b814a9b543040ddb", "author": {"user": {"login": "xieshenzh", "name": "Xieshen"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/542c62a088bc4a61d18f7835b814a9b543040ddb", "committedDate": "2020-06-01T23:55:58Z", "message": "[KOGITO-1559] sonar analysis"}, "afterCommit": {"oid": "2959a209f1e2d6d448ebc1b518fce380f24374d4", "author": {"user": {"login": "xieshenzh", "name": "Xieshen"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/2959a209f1e2d6d448ebc1b518fce380f24374d4", "committedDate": "2020-06-03T20:23:05Z", "message": "[KOGITO-1559] Data Index service refactoring to support alternative storage solution"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2959a209f1e2d6d448ebc1b518fce380f24374d4", "author": {"user": {"login": "xieshenzh", "name": "Xieshen"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/2959a209f1e2d6d448ebc1b518fce380f24374d4", "committedDate": "2020-06-03T20:23:05Z", "message": "[KOGITO-1559] Data Index service refactoring to support alternative storage solution"}, "afterCommit": {"oid": "2aaf8ea4019de9bc3a7e4654ae26d752c270945b", "author": {"user": {"login": "xieshenzh", "name": "Xieshen"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/2aaf8ea4019de9bc3a7e4654ae26d752c270945b", "committedDate": "2020-06-03T20:27:40Z", "message": "[KOGITO-1559] Data Index refactoring to support alternative storage solution"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2aaf8ea4019de9bc3a7e4654ae26d752c270945b", "author": {"user": {"login": "xieshenzh", "name": "Xieshen"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/2aaf8ea4019de9bc3a7e4654ae26d752c270945b", "committedDate": "2020-06-03T20:27:40Z", "message": "[KOGITO-1559] Data Index refactoring to support alternative storage solution"}, "afterCommit": {"oid": "21396abf94fd61376bca8f338972f510f5c88bd3", "author": {"user": {"login": "xieshenzh", "name": "Xieshen"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/21396abf94fd61376bca8f338972f510f5c88bd3", "committedDate": "2020-06-03T21:50:43Z", "message": "[KOGITO-1559] Data Index service refactoring to support alternative storage solution"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0828b27688f507eb607e25b137802f11f69531d2", "author": {"user": {"login": "xieshenzh", "name": "Xieshen"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/0828b27688f507eb607e25b137802f11f69531d2", "committedDate": "2020-06-03T23:34:50Z", "message": "[KOGITO-1559] Data Index refactoring to support alternative storage solution"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "21396abf94fd61376bca8f338972f510f5c88bd3", "author": {"user": {"login": "xieshenzh", "name": "Xieshen"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/21396abf94fd61376bca8f338972f510f5c88bd3", "committedDate": "2020-06-03T21:50:43Z", "message": "[KOGITO-1559] Data Index service refactoring to support alternative storage solution"}, "afterCommit": {"oid": "0828b27688f507eb607e25b137802f11f69531d2", "author": {"user": {"login": "xieshenzh", "name": "Xieshen"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/0828b27688f507eb607e25b137802f11f69531d2", "committedDate": "2020-06-03T23:34:50Z", "message": "[KOGITO-1559] Data Index refactoring to support alternative storage solution"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 10, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}