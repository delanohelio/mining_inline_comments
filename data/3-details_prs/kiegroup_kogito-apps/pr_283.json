{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2OTgwNzQ5", "number": 283, "title": "KOGITO-1139 Add node retrigger action in process instance timeline", "bodyText": "Many thanks for submitting your Pull Request \u2764\ufe0f!\nPlease make sure that your PR meets the following requirements:\n\n You have read the contributors guide\n Pull Request title is properly formatted: KOGITO-XYZ Subject\n Pull Request title contains the target branch if not targeting master: [0.9.x] KOGITO-XYZ Subject\n Pull Request contains link to the JIRA issue\n Pull Request contains link to any dependent or related Pull Request\n Pull Request contains description of the issue\n Pull Request does not include fixes for issues other than the main ticket\n\ndescription: a node can be retriggered from the timeline of process details page.\nJIRA: https://issues.redhat.com/browse/KOGITO-1139", "createdAt": "2020-06-19T09:04:11Z", "url": "https://github.com/kiegroup/kogito-apps/pull/283", "merged": true, "mergeCommit": {"oid": "8751b711cadb0f5ba1ff831fff98a798159e2cb5"}, "closed": true, "closedAt": "2020-07-03T03:15:21Z", "author": {"login": "AjayJagan"}, "timelineItems": {"totalCount": 40, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsw7zjgBqjM0NjE5ODk3NjQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcxB9TRAFqTQ0MTg3NzAyNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "587b11f4f4a039d52641839591c6de942324d166", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/587b11f4f4a039d52641839591c6de942324d166", "committedDate": "2020-06-19T08:37:18Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}, "afterCommit": {"oid": "9a4b78de0b5334db5b00af73c5a02ee115f3fd46", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/9a4b78de0b5334db5b00af73c5a02ee115f3fd46", "committedDate": "2020-06-19T10:59:08Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9a4b78de0b5334db5b00af73c5a02ee115f3fd46", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/9a4b78de0b5334db5b00af73c5a02ee115f3fd46", "committedDate": "2020-06-19T10:59:08Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}, "afterCommit": {"oid": "e298accd9401fd7946122e3a15c25107a6d35a71", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/e298accd9401fd7946122e3a15c25107a6d35a71", "committedDate": "2020-06-19T12:35:42Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e298accd9401fd7946122e3a15c25107a6d35a71", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/e298accd9401fd7946122e3a15c25107a6d35a71", "committedDate": "2020-06-19T12:35:42Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}, "afterCommit": {"oid": "64abe97445f8252f36136a92cdeaaf4969e3e9d4", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/64abe97445f8252f36136a92cdeaaf4969e3e9d4", "committedDate": "2020-06-22T05:36:09Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "64abe97445f8252f36136a92cdeaaf4969e3e9d4", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/64abe97445f8252f36136a92cdeaaf4969e3e9d4", "committedDate": "2020-06-22T05:36:09Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}, "afterCommit": {"oid": "73509df517500c2d5db15ba6e40b911449cae790", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/73509df517500c2d5db15ba6e40b911449cae790", "committedDate": "2020-06-22T07:34:18Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "73509df517500c2d5db15ba6e40b911449cae790", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/73509df517500c2d5db15ba6e40b911449cae790", "committedDate": "2020-06-22T07:34:18Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}, "afterCommit": {"oid": "e680c59dcf75b36ceb3fd4da412411fedcf51495", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/e680c59dcf75b36ceb3fd4da412411fedcf51495", "committedDate": "2020-06-23T04:52:04Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e680c59dcf75b36ceb3fd4da412411fedcf51495", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/e680c59dcf75b36ceb3fd4da412411fedcf51495", "committedDate": "2020-06-23T04:52:04Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}, "afterCommit": {"oid": "daba65eb4b51fd26198bb5cd3fdfa9d3cd1fdcd0", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/daba65eb4b51fd26198bb5cd3fdfa9d3cd1fdcd0", "committedDate": "2020-06-23T04:58:20Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "daba65eb4b51fd26198bb5cd3fdfa9d3cd1fdcd0", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/daba65eb4b51fd26198bb5cd3fdfa9d3cd1fdcd0", "committedDate": "2020-06-23T04:58:20Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}, "afterCommit": {"oid": "e908cdc29006052380819e8f75a1c072c7809ce9", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/e908cdc29006052380819e8f75a1c072c7809ce9", "committedDate": "2020-06-23T12:33:01Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e908cdc29006052380819e8f75a1c072c7809ce9", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/e908cdc29006052380819e8f75a1c072c7809ce9", "committedDate": "2020-06-23T12:33:01Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}, "afterCommit": {"oid": "8b97831a9c3518808fb93fd33d5adeb19f8d0c9c", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/8b97831a9c3518808fb93fd33d5adeb19f8d0c9c", "committedDate": "2020-06-23T14:00:37Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8b97831a9c3518808fb93fd33d5adeb19f8d0c9c", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/8b97831a9c3518808fb93fd33d5adeb19f8d0c9c", "committedDate": "2020-06-23T14:00:37Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}, "afterCommit": {"oid": "f49e839d4cb80d1c3dc5db602adf0e8b678b860a", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/f49e839d4cb80d1c3dc5db602adf0e8b678b860a", "committedDate": "2020-06-23T15:45:23Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM3MTY5OTQ1", "url": "https://github.com/kiegroup/kogito-apps/pull/283#pullrequestreview-437169945", "createdAt": "2020-06-25T05:04:48Z", "commit": {"oid": "f49e839d4cb80d1c3dc5db602adf0e8b678b860a"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNTowNDo0OFrOGore4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNVQwNToxODowNVrOGorseg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMwODY0Mw==", "bodyText": "formatting is a bit off - mainly whitespace, please try to reformat", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r445308643", "createdAt": "2020-06-25T05:04:48Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/management-console/server/MockData/controllers.js", "diffHunk": "@@ -71,5 +71,20 @@ module.exports = controller = {\n       data[0].state = 'ABORTED';\n       res.status(200).send('success');\n     }\n+  },\n+  \n+  callNodeRetrigger:(req,res)=>{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f49e839d4cb80d1c3dc5db602adf0e8b678b860a"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMxMDM1MA==", "bodyText": "should we validate what happened after the click?", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r445310350", "createdAt": "2020-06-25T05:11:05Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/management-console/src/components/Templates/ProcessDetailsPage/tests/ProcessDetailsPage.test.tsx", "diffHunk": "@@ -209,7 +217,20 @@ describe('Process Details Page component tests', () => {\n     );\n     expect(wrapper).toMatchSnapshot();\n   });\n-\n+  it('abort button click', async () => {\n+    const wrapper = await getWrapperAsync(\n+      <MockedProvider mocks={mocks1} addTypename={false}>\n+        <BrowserRouter>\n+          <ProcessDetailsPage {...props} />\n+        </BrowserRouter>\n+      </MockedProvider>,\n+      'ProcessDetailsPage'\n+    );\n+    wrapper\n+      .find('#abort-button')\n+      .first()\n+      .simulate('click');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f49e839d4cb80d1c3dc5db602adf0e8b678b860a"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMxMDU4Mw==", "bodyText": "please mock the react-icons in whole file", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r445310583", "createdAt": "2020-06-25T05:11:53Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/management-console/src/components/Templates/ProcessDetailsPage/tests/__snapshots__/ProcessDetailsPage.test.tsx.snap", "diffHunk": "@@ -833,6 +863,71 @@ exports[`Process Details Page component tests snapshot testing in Active state 1\n                             </span>\n                           </li>\n                         </BreadcrumbItem>\n+                        <BreadcrumbItem\n+                          key=\"1\"\n+                        >\n+                          <li\n+                            className=\"pf-c-breadcrumb__item\"\n+                          >\n+                            <Link\n+                              to={\n+                                Object {\n+                                  \"pathname\": \"/ProcessInstances/8035b580-6ae4-4aa8-9ec0-e18e19809e0b\",\n+                                  \"state\": Object {\n+                                    \"filters\": Object {\n+                                      \"businessKey\": Array [],\n+                                      \"status\": Array [\n+                                        \"ACTIVE\",\n+                                      ],\n+                                    },\n+                                  },\n+                                }\n+                              }\n+                            >\n+                              <LinkAnchor\n+                                href=\"/ProcessInstances/8035b580-6ae4-4aa8-9ec0-e18e19809e0b\"\n+                                navigate={[Function]}\n+                              >\n+                                <a\n+                                  href=\"/ProcessInstances/8035b580-6ae4-4aa8-9ec0-e18e19809e0b\"\n+                                  onClick={[Function]}\n+                                >\n+                                  8035b580-6ae4-4aa8-9ec0-e18e19809e0b\n+                                </a>\n+                              </LinkAnchor>\n+                            </Link>\n+                            <span\n+                              className=\"pf-c-breadcrumb__item-divider\"\n+                            >\n+                              <AngleRightIcon", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f49e839d4cb80d1c3dc5db602adf0e8b678b860a"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMxMTAwNA==", "bodyText": "these svg fragments are from some button? could we mock it?", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r445311004", "createdAt": "2020-06-25T05:13:44Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/management-console/src/components/Templates/ProcessDetailsPage/tests/__snapshots__/ProcessDetailsPage.test.tsx.snap", "diffHunk": "@@ -23940,9 +24141,149 @@ exports[`Process Details Page component tests snapshot testing in Suspended stat\n             ]\n           }\n           appendTo={\n-            <body>\n+            <body\n+              class=\"\"\n+            >\n               <div />\n               <div />\n+              <div>\n+                <div\n+                  class=\"pf-c-backdrop\"\n+                >\n+                  <div\n+                    class=\"pf-l-bullseye\"\n+                  >\n+                    <div\n+                      aria-describedby=\"pf-modal-2\"\n+                      aria-label=\"\"\n+                      aria-modal=\"true\"\n+                      class=\"pf-c-modal-box pf-m-sm\"\n+                      role=\"dialog\"\n+                    >\n+                      <button\n+                        aria-label=\"Close\"\n+                        class=\"pf-c-button pf-m-plain\"\n+                        type=\"button\"\n+                      >\n+                        <svg", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f49e839d4cb80d1c3dc5db602adf0e8b678b860a"}, "originalPosition": 443}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMxMjEyMg==", "bodyText": "we're not checking here the outcome, IDK in this case maybe whether the mocked functions were invoked or sth like that.", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r445312122", "createdAt": "2020-06-25T05:18:05Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/management-console/src/utils/tests/Utils.test.tsx", "diffHunk": "@@ -159,4 +160,48 @@ describe('uitility function testing', () => {\n       );\n     });\n   });\n+\n+  describe('retrigger click tests', () => {\n+    const processInstanceData = {\n+      id: '8035b580-6ae4-4aa8-9ec0-e18e19809e0b',\n+      processId: 'trav',\n+      serviceUrl: 'http://localhost:4000',\n+      state: ProcessInstanceState.Active\n+    };\n+    const nodeObject = {\n+      nodeId: '2',\n+      name: 'Confirm travel',\n+      definitionId: 'UserTask_2',\n+      id: '843bd287-fb6e-4ee7-a304-ba9b430e52d8',\n+      enter: '2019-10-22T04:43:01.148Z',\n+      exit: null,\n+      type: 'HumanTaskNode'\n+    };\n+    const setModalTitle = jest.fn();\n+    const setTitleType = jest.fn();\n+    const setModalContent = jest.fn();\n+    const handleAbortModalToggle = jest.fn();\n+    it('executes retrigger node process successfully', () => {\n+      mockedAxios.post.mockResolvedValue({});\n+      handleNodeInstanceRetrigger(\n+        processInstanceData,\n+        nodeObject,\n+        setModalTitle,\n+        setTitleType,\n+        setModalContent,\n+        handleAbortModalToggle\n+      );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f49e839d4cb80d1c3dc5db602adf0e8b678b860a"}, "originalPosition": 44}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f49e839d4cb80d1c3dc5db602adf0e8b678b860a", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/f49e839d4cb80d1c3dc5db602adf0e8b678b860a", "committedDate": "2020-06-23T15:45:23Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}, "afterCommit": {"oid": "f0e25f9ccb92ffbfc2d842aed98612ca650650a0", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/f0e25f9ccb92ffbfc2d842aed98612ca650650a0", "committedDate": "2020-06-26T06:25:55Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5MDE3MjI0", "url": "https://github.com/kiegroup/kogito-apps/pull/283#pullrequestreview-439017224", "createdAt": "2020-06-29T09:06:16Z", "commit": {"oid": "f0e25f9ccb92ffbfc2d842aed98612ca650650a0"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwOTowNjoxNlrOGqLX9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMDoxMTo1NFrOGqLoAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg3OTczNQ==", "bodyText": "please mock the @kogito-apps/common as you'd do for any external package - not to rely on its inner folder structure here.\nLike you did for @patternfly/react-icons:\njest.mock('@kogito-apps/common', () => ({\n  ...jest.requireActual('@kogito-apps/common'),\n  ProcessDescriptor: () => {\n    return <MockedComponent />;\n  },\n  KogitoSpinner: () =>\n.\n.\n.\n}));", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r446879735", "createdAt": "2020-06-29T09:06:16Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/management-console/src/components/Templates/ProcessDetailsPage/tests/ProcessDetailsPage.test.tsx", "diffHunk": "@@ -6,6 +6,54 @@ import { BrowserRouter } from 'react-router-dom';\n import { getWrapperAsync, GraphQL } from '@kogito-apps/common';\n import GetProcessInstanceByIdDocument = GraphQL.GetProcessInstanceByIdDocument;\n import ProcessInstanceState = GraphQL.ProcessInstanceState;\n+import { setTitle } from '../../../../utils/Utils';\n+\n+jest.mock('../../../../utils/Utils');\n+jest.mock('../../../Atoms/ProcessListModal/ProcessListModal');\n+jest.mock('../../../Atoms/ProcessListBulkInstances/ProcessListBulkInstances');\n+jest.mock(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0e25f9ccb92ffbfc2d842aed98612ca650650a0"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg4Mzg0MQ==", "bodyText": "should we click twice here?", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r446883841", "createdAt": "2020-06-29T10:11:54Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/management-console/src/components/Templates/ProcessDetailsPage/tests/ProcessDetailsPage.test.tsx", "diffHunk": "@@ -209,7 +217,20 @@ describe('Process Details Page component tests', () => {\n     );\n     expect(wrapper).toMatchSnapshot();\n   });\n-\n+  it('abort button click', async () => {\n+    const wrapper = await getWrapperAsync(\n+      <MockedProvider mocks={mocks1} addTypename={false}>\n+        <BrowserRouter>\n+          <ProcessDetailsPage {...props} />\n+        </BrowserRouter>\n+      </MockedProvider>,\n+      'ProcessDetailsPage'\n+    );\n+    wrapper\n+      .find('#abort-button')\n+      .first()\n+      .simulate('click');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTMxMDM1MA=="}, "originalCommit": {"oid": "f49e839d4cb80d1c3dc5db602adf0e8b678b860a"}, "originalPosition": 41}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f0e25f9ccb92ffbfc2d842aed98612ca650650a0", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/f0e25f9ccb92ffbfc2d842aed98612ca650650a0", "committedDate": "2020-06-26T06:25:55Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}, "afterCommit": {"oid": "f9f81f6737e5a0d4493d947f2d3b74fb730e8bc0", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/f9f81f6737e5a0d4493d947f2d3b74fb730e8bc0", "committedDate": "2020-06-29T11:46:59Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5MDk2MzIy", "url": "https://github.com/kiegroup/kogito-apps/pull/283#pullrequestreview-439096322", "createdAt": "2020-06-29T12:34:57Z", "commit": {"oid": "f9f81f6737e5a0d4493d947f2d3b74fb730e8bc0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMjozNDo1N1rOGqOypQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQxMzoyMjo1N1rOGqQs_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNTcxNw==", "bodyText": "this dropdown is the same as the on in following elseif branch, just a few strings change there. Can we derive a function and just keep the moving parts as arguments?", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r446935717", "createdAt": "2020-06-29T12:34:57Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/management-console/src/components/Organisms/ProcessDetailsTimeline/ProcessDetailsTimeline.tsx", "diffHunk": "@@ -73,23 +73,140 @@ const ProcessDetailsTimeline: React.FC<IOwnProps> = ({\n           setModalTitle,\n           setTitleType,\n           setModalContent,\n-          handleSkipModalToggle\n+          handleModalToggle\n         )\n       }\n     >\n       Skip\n     </DropdownItem>\n   ];\n \n-  const onKebabToggle = isOpen => {\n-    setIsKebabOpen(isOpen);\n+  const nodeManagementDropdownItems = [\n+    <DropdownItem\n+      key=\"retrigger\"\n+      component=\"button\"\n+      onClick={() =>\n+        handleNodeInstanceRetrigger(\n+          data,\n+          nodeObject,\n+          setModalTitle,\n+          setTitleType,\n+          setModalContent,\n+          handleModalToggle\n+        )\n+      }\n+    >\n+      Retrigger node\n+    </DropdownItem>\n+  ];\n+\n+  const onKebabToggle = (isOpen: boolean, node, id) => {\n+    /* tslint:disable-next-line */\n+    setNodeObject(node);\n+    if (isOpen) {\n+      setKebabOpenArray([...kebabOpenArray, id]);\n+    } else {\n+      const tempKebabArray = [...kebabOpenArray];\n+      const index = tempKebabArray.indexOf(id);\n+      tempKebabArray.splice(index, 1);\n+      setKebabOpenArray(tempKebabArray);\n+    }\n   };\n \n-  const onDropdownSelect = event => {\n-    setIsKebabOpen(!isKebabOpen);\n+  const onDropdownSelect = id => {\n+    const tempKebabArray = [...kebabOpenArray];\n+    const index = tempKebabArray.indexOf(id);\n+    tempKebabArray.splice(index, 1);\n+    setKebabOpenArray(tempKebabArray);\n   };\n+\n+  const handleModalToggle = () => {\n+    setIsModalOpen(!isModalOpen);\n+  };\n+\n+  const processManagementKebabButtons = (content, index) => {\n+    if (\n+      data.addons.includes('process-management') &&\n+      data.serviceUrl !== null &&\n+      data.error &&\n+      content.definitionId === data.error.nodeDefinitionId &&\n+      data.state !== GraphQL.ProcessInstanceState.Completed\n+    ) {\n+      return (\n+        <Dropdown", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9f81f6737e5a0d4493d947f2d3b74fb730e8bc0"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNzEyNQ==", "bodyText": "Or maybe! create a separate component here? covering all the cases we have here in this function processManagementKebabButtons together with onDropdownSelect and onKebabToggle,... ?", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r446937125", "createdAt": "2020-06-29T12:37:15Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/management-console/src/components/Organisms/ProcessDetailsTimeline/ProcessDetailsTimeline.tsx", "diffHunk": "@@ -73,23 +73,140 @@ const ProcessDetailsTimeline: React.FC<IOwnProps> = ({\n           setModalTitle,\n           setTitleType,\n           setModalContent,\n-          handleSkipModalToggle\n+          handleModalToggle\n         )\n       }\n     >\n       Skip\n     </DropdownItem>\n   ];\n \n-  const onKebabToggle = isOpen => {\n-    setIsKebabOpen(isOpen);\n+  const nodeManagementDropdownItems = [\n+    <DropdownItem\n+      key=\"retrigger\"\n+      component=\"button\"\n+      onClick={() =>\n+        handleNodeInstanceRetrigger(\n+          data,\n+          nodeObject,\n+          setModalTitle,\n+          setTitleType,\n+          setModalContent,\n+          handleModalToggle\n+        )\n+      }\n+    >\n+      Retrigger node\n+    </DropdownItem>\n+  ];\n+\n+  const onKebabToggle = (isOpen: boolean, node, id) => {\n+    /* tslint:disable-next-line */\n+    setNodeObject(node);\n+    if (isOpen) {\n+      setKebabOpenArray([...kebabOpenArray, id]);\n+    } else {\n+      const tempKebabArray = [...kebabOpenArray];\n+      const index = tempKebabArray.indexOf(id);\n+      tempKebabArray.splice(index, 1);\n+      setKebabOpenArray(tempKebabArray);\n+    }\n   };\n \n-  const onDropdownSelect = event => {\n-    setIsKebabOpen(!isKebabOpen);\n+  const onDropdownSelect = id => {\n+    const tempKebabArray = [...kebabOpenArray];\n+    const index = tempKebabArray.indexOf(id);\n+    tempKebabArray.splice(index, 1);\n+    setKebabOpenArray(tempKebabArray);\n   };\n+\n+  const handleModalToggle = () => {\n+    setIsModalOpen(!isModalOpen);\n+  };\n+\n+  const processManagementKebabButtons = (content, index) => {\n+    if (\n+      data.addons.includes('process-management') &&\n+      data.serviceUrl !== null &&\n+      data.error &&\n+      content.definitionId === data.error.nodeDefinitionId &&\n+      data.state !== GraphQL.ProcessInstanceState.Completed\n+    ) {\n+      return (\n+        <Dropdown", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjkzNTcxNw=="}, "originalCommit": {"oid": "f9f81f6737e5a0d4493d947f2d3b74fb730e8bc0"}, "originalPosition": 124}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1ODQwNw==", "bodyText": "So we're clicking twice here, right? first open, second close? Then I'd check also if the Dropdown was actually opened -> add a isOpen check after first click that would check expect true", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r446958407", "createdAt": "2020-06-29T13:10:25Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/management-console/src/components/Organisms/ProcessDetailsTimeline/tests/ProcessDetailsTimeline.test.tsx", "diffHunk": "@@ -133,37 +221,153 @@ describe('ProcessDetailsTimeline component tests', () => {\n     expect(wrapper).toMatchSnapshot();\n   });\n \n-  it('onSelect click test', () => {\n-    const wrapper = shallow(<ProcessDetailsTimeline {...props2} />);\n+  it('Snapshot testing for completed state', () => {\n+    const wrapper = shallow(<ProcessDetailsTimeline {...props3} />);\n+    expect(wrapper).toMatchSnapshot();\n+  });\n \n-    const event = {\n-      currentTarget: {}\n-    } as React.ChangeEvent<HTMLInputElement>;\n-    wrapper\n-      .find('#dropdown-kebab')\n-      .props()\n-      ['onSelect'](event);\n-    expect(wrapper.find('#dropdown-kebab').props()['isOpen']).toBeTruthy();\n+  it('onSelect click test', () => {\n+    const wrapper = getWrapper(\n+      <ProcessDetailsTimeline {...props1} />,\n+      'ProcessDetailsTimeline'\n+    );\n+    act(() => {\n+      wrapper\n+        .find(Dropdown)\n+        .first()\n+        .props()\n+        ['onSelect']();\n+      wrapper", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9f81f6737e5a0d4493d947f2d3b74fb730e8bc0"}, "originalPosition": 168}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk1OTIyNw==", "bodyText": "check before here that the kebab was open by the onToggle invocation.", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r446959227", "createdAt": "2020-06-29T13:11:40Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/management-console/src/components/Organisms/ProcessDetailsTimeline/tests/ProcessDetailsTimeline.test.tsx", "diffHunk": "@@ -133,37 +221,153 @@ describe('ProcessDetailsTimeline component tests', () => {\n     expect(wrapper).toMatchSnapshot();\n   });\n \n-  it('onSelect click test', () => {\n-    const wrapper = shallow(<ProcessDetailsTimeline {...props2} />);\n+  it('Snapshot testing for completed state', () => {\n+    const wrapper = shallow(<ProcessDetailsTimeline {...props3} />);\n+    expect(wrapper).toMatchSnapshot();\n+  });\n \n-    const event = {\n-      currentTarget: {}\n-    } as React.ChangeEvent<HTMLInputElement>;\n-    wrapper\n-      .find('#dropdown-kebab')\n-      .props()\n-      ['onSelect'](event);\n-    expect(wrapper.find('#dropdown-kebab').props()['isOpen']).toBeTruthy();\n+  it('onSelect click test', () => {\n+    const wrapper = getWrapper(\n+      <ProcessDetailsTimeline {...props1} />,\n+      'ProcessDetailsTimeline'\n+    );\n+    act(() => {\n+      wrapper\n+        .find(Dropdown)\n+        .first()\n+        .props()\n+        ['onSelect']();\n+      wrapper\n+        .find(Dropdown)\n+        .at(1)\n+        .props()\n+        ['onSelect']();\n+    });\n+    expect(\n+      wrapper\n+        .find(Dropdown)\n+        .first()\n+        .props()['isOpen']\n+    ).toBeFalsy();\n   });\n \n-  it('onToggle click test', () => {\n-    const wrapper = shallow(<ProcessDetailsTimeline {...props2} />);\n-    wrapper\n-      .find('#dropdown-kebab')\n-      .props()\n-      ['toggle']['props']['onToggle']();\n+  it('onToggle click test - node management', () => {\n+    const contentForNodeManagement = {\n+      nodeId: '111-555-898',\n+      name: 'Confirm travel',\n+      definitionId: '_69e0a0f5-2360-4174-a8f8-a892a31fc2f964rc',\n+      id: '69e0a0f5-2360-4174-a8f8-a892a31fc2f9',\n+      enter: '2019-10-22T03:40:44.089Z',\n+      exit: null,\n+      type: 'HumanTaskNode'\n+    };\n+    const wrapper = getWrapper(\n+      <ProcessDetailsTimeline {...props1} />,\n+      'ProcessDetailsTimeline'\n+    );\n+    act(() => {\n+      wrapper\n+        .find('#timeline-kebab-toggle-nodemanagement-1')\n+        .find('KebabToggle')\n+        .props()\n+        ['onToggle'](\n+          false,\n+          contentForNodeManagement,\n+          'timeline-kebab-toggle-nodemanagement-1'\n+        );\n+      wrapper", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9f81f6737e5a0d4493d947f2d3b74fb730e8bc0"}, "originalPosition": 212}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk2MzUxNQ==", "bodyText": "please add at least comments with description on what we're acutally clicking (improves readability of test).", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r446963515", "createdAt": "2020-06-29T13:18:01Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/management-console/src/components/Organisms/ProcessDetailsTimeline/tests/ProcessDetailsTimeline.test.tsx", "diffHunk": "@@ -133,37 +221,153 @@ describe('ProcessDetailsTimeline component tests', () => {\n     expect(wrapper).toMatchSnapshot();\n   });\n \n-  it('onSelect click test', () => {\n-    const wrapper = shallow(<ProcessDetailsTimeline {...props2} />);\n+  it('Snapshot testing for completed state', () => {\n+    const wrapper = shallow(<ProcessDetailsTimeline {...props3} />);\n+    expect(wrapper).toMatchSnapshot();\n+  });\n \n-    const event = {\n-      currentTarget: {}\n-    } as React.ChangeEvent<HTMLInputElement>;\n-    wrapper\n-      .find('#dropdown-kebab')\n-      .props()\n-      ['onSelect'](event);\n-    expect(wrapper.find('#dropdown-kebab').props()['isOpen']).toBeTruthy();\n+  it('onSelect click test', () => {\n+    const wrapper = getWrapper(\n+      <ProcessDetailsTimeline {...props1} />,\n+      'ProcessDetailsTimeline'\n+    );\n+    act(() => {\n+      wrapper\n+        .find(Dropdown)\n+        .first()\n+        .props()\n+        ['onSelect']();\n+      wrapper\n+        .find(Dropdown)\n+        .at(1)\n+        .props()\n+        ['onSelect']();\n+    });\n+    expect(\n+      wrapper\n+        .find(Dropdown)\n+        .first()\n+        .props()['isOpen']\n+    ).toBeFalsy();\n   });\n \n-  it('onToggle click test', () => {\n-    const wrapper = shallow(<ProcessDetailsTimeline {...props2} />);\n-    wrapper\n-      .find('#dropdown-kebab')\n-      .props()\n-      ['toggle']['props']['onToggle']();\n+  it('onToggle click test - node management', () => {\n+    const contentForNodeManagement = {\n+      nodeId: '111-555-898',\n+      name: 'Confirm travel',\n+      definitionId: '_69e0a0f5-2360-4174-a8f8-a892a31fc2f964rc',\n+      id: '69e0a0f5-2360-4174-a8f8-a892a31fc2f9',\n+      enter: '2019-10-22T03:40:44.089Z',\n+      exit: null,\n+      type: 'HumanTaskNode'\n+    };\n+    const wrapper = getWrapper(\n+      <ProcessDetailsTimeline {...props1} />,\n+      'ProcessDetailsTimeline'\n+    );\n+    act(() => {\n+      wrapper\n+        .find('#timeline-kebab-toggle-nodemanagement-1')\n+        .find('KebabToggle')\n+        .props()\n+        ['onToggle'](\n+          false,\n+          contentForNodeManagement,\n+          'timeline-kebab-toggle-nodemanagement-1'\n+        );\n+      wrapper\n+        .find('#timeline-kebab-toggle-nodemanagement-1')\n+        .find('KebabToggle')\n+        .props()\n+        ['onToggle'](\n+          true,\n+          contentForNodeManagement,\n+          'timeline-kebab-toggle-nodemanagement-1'\n+        );\n+    });\n+    expect(\n+      wrapper\n+        .find('#timeline-kebab-toggle-nodemanagement-1')\n+        .find('KebabToggle')\n+        .prop('isOpen')\n+    ).toBeFalsy();\n   });\n \n-  it('handle and handle retry click test', () => {\n-    const wrapper = shallow(<ProcessDetailsTimeline {...props2} />);\n+  it('onToggle click test - process management', () => {\n+    const contentForProcessManagement = {\n+      nodeId: '111-555-898',\n+      name: 'Confirm travel',\n+      definitionId: 'abc-efg-hij',\n+      id: '69e0a0f5-2360-4174-a8f8-a892a31fc2f9r25e',\n+      enter: '2019-10-22T03:40:44.089Z',\n+      exit: null,\n+      type: 'HumanTaskNode'\n+    };\n+    const wrapper = getWrapper(\n+      <ProcessDetailsTimeline {...props1} />,\n+      'ProcessDetailsTimeline'\n+    );\n+    act(() => {\n+      wrapper\n+        .find('#timeline-kebab-toggle-0')\n+        .find('KebabToggle')\n+        .props()\n+        ['onToggle'](\n+          false,\n+          contentForProcessManagement,\n+          'timeline-kebab-toggle-0'\n+        );\n+    });\n+    expect(\n+      wrapper\n+        .find('#timeline-kebab-toggle-0')\n+        .find('KebabToggle')\n+        .prop('isOpen')\n+    ).toBeFalsy();\n+  });\n \n+  it('handle skip , handle retry and nodecancel click test', async () => {\n+    const wrapper = shallow(<ProcessDetailsTimeline {...props1} />);\n+    mockedAxios.post.mockResolvedValue({});\n+    mockedAxios.post.mockRejectedValue({});\n+    mockedAxios.delete.mockResolvedValue({});\n+    mockedAxios.delete.mockRejectedValue({});\n     wrapper\n-      .find('#dropdown-kebab')\n+      .find(Dropdown)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9f81f6737e5a0d4493d947f2d3b74fb730e8bc0"}, "originalPosition": 273}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk2NzAzOA==", "bodyText": "Please see if we can test each step here -> each onClick invocation should IMO be followed by a expect unless there is a valid reason not to - each onClick IMO should have an influence on the DOM, so I expect this is not a case here and it is testable.", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r446967038", "createdAt": "2020-06-29T13:22:57Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/management-console/src/components/Organisms/ProcessDetailsTimeline/tests/ProcessDetailsTimeline.test.tsx", "diffHunk": "@@ -133,37 +221,153 @@ describe('ProcessDetailsTimeline component tests', () => {\n     expect(wrapper).toMatchSnapshot();\n   });\n \n-  it('onSelect click test', () => {\n-    const wrapper = shallow(<ProcessDetailsTimeline {...props2} />);\n+  it('Snapshot testing for completed state', () => {\n+    const wrapper = shallow(<ProcessDetailsTimeline {...props3} />);\n+    expect(wrapper).toMatchSnapshot();\n+  });\n \n-    const event = {\n-      currentTarget: {}\n-    } as React.ChangeEvent<HTMLInputElement>;\n-    wrapper\n-      .find('#dropdown-kebab')\n-      .props()\n-      ['onSelect'](event);\n-    expect(wrapper.find('#dropdown-kebab').props()['isOpen']).toBeTruthy();\n+  it('onSelect click test', () => {\n+    const wrapper = getWrapper(\n+      <ProcessDetailsTimeline {...props1} />,\n+      'ProcessDetailsTimeline'\n+    );\n+    act(() => {\n+      wrapper\n+        .find(Dropdown)\n+        .first()\n+        .props()\n+        ['onSelect']();\n+      wrapper\n+        .find(Dropdown)\n+        .at(1)\n+        .props()\n+        ['onSelect']();\n+    });\n+    expect(\n+      wrapper\n+        .find(Dropdown)\n+        .first()\n+        .props()['isOpen']\n+    ).toBeFalsy();\n   });\n \n-  it('onToggle click test', () => {\n-    const wrapper = shallow(<ProcessDetailsTimeline {...props2} />);\n-    wrapper\n-      .find('#dropdown-kebab')\n-      .props()\n-      ['toggle']['props']['onToggle']();\n+  it('onToggle click test - node management', () => {\n+    const contentForNodeManagement = {\n+      nodeId: '111-555-898',\n+      name: 'Confirm travel',\n+      definitionId: '_69e0a0f5-2360-4174-a8f8-a892a31fc2f964rc',\n+      id: '69e0a0f5-2360-4174-a8f8-a892a31fc2f9',\n+      enter: '2019-10-22T03:40:44.089Z',\n+      exit: null,\n+      type: 'HumanTaskNode'\n+    };\n+    const wrapper = getWrapper(\n+      <ProcessDetailsTimeline {...props1} />,\n+      'ProcessDetailsTimeline'\n+    );\n+    act(() => {\n+      wrapper\n+        .find('#timeline-kebab-toggle-nodemanagement-1')\n+        .find('KebabToggle')\n+        .props()\n+        ['onToggle'](\n+          false,\n+          contentForNodeManagement,\n+          'timeline-kebab-toggle-nodemanagement-1'\n+        );\n+      wrapper\n+        .find('#timeline-kebab-toggle-nodemanagement-1')\n+        .find('KebabToggle')\n+        .props()\n+        ['onToggle'](\n+          true,\n+          contentForNodeManagement,\n+          'timeline-kebab-toggle-nodemanagement-1'\n+        );\n+    });\n+    expect(\n+      wrapper\n+        .find('#timeline-kebab-toggle-nodemanagement-1')\n+        .find('KebabToggle')\n+        .prop('isOpen')\n+    ).toBeFalsy();\n   });\n \n-  it('handle and handle retry click test', () => {\n-    const wrapper = shallow(<ProcessDetailsTimeline {...props2} />);\n+  it('onToggle click test - process management', () => {\n+    const contentForProcessManagement = {\n+      nodeId: '111-555-898',\n+      name: 'Confirm travel',\n+      definitionId: 'abc-efg-hij',\n+      id: '69e0a0f5-2360-4174-a8f8-a892a31fc2f9r25e',\n+      enter: '2019-10-22T03:40:44.089Z',\n+      exit: null,\n+      type: 'HumanTaskNode'\n+    };\n+    const wrapper = getWrapper(\n+      <ProcessDetailsTimeline {...props1} />,\n+      'ProcessDetailsTimeline'\n+    );\n+    act(() => {\n+      wrapper\n+        .find('#timeline-kebab-toggle-0')\n+        .find('KebabToggle')\n+        .props()\n+        ['onToggle'](\n+          false,\n+          contentForProcessManagement,\n+          'timeline-kebab-toggle-0'\n+        );\n+    });\n+    expect(\n+      wrapper\n+        .find('#timeline-kebab-toggle-0')\n+        .find('KebabToggle')\n+        .prop('isOpen')\n+    ).toBeFalsy();\n+  });\n \n+  it('handle skip , handle retry and nodecancel click test', async () => {\n+    const wrapper = shallow(<ProcessDetailsTimeline {...props1} />);\n+    mockedAxios.post.mockResolvedValue({});\n+    mockedAxios.post.mockRejectedValue({});\n+    mockedAxios.delete.mockResolvedValue({});\n+    mockedAxios.delete.mockRejectedValue({});\n     wrapper\n-      .find('#dropdown-kebab')\n+      .find(Dropdown)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njk2MzUxNQ=="}, "originalCommit": {"oid": "f9f81f6737e5a0d4493d947f2d3b74fb730e8bc0"}, "originalPosition": 273}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f9f81f6737e5a0d4493d947f2d3b74fb730e8bc0", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/f9f81f6737e5a0d4493d947f2d3b74fb730e8bc0", "committedDate": "2020-06-29T11:46:59Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}, "afterCommit": {"oid": "dea4c4d98d782cd00a2dc6e93bfe643b37beff22", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/dea4c4d98d782cd00a2dc6e93bfe643b37beff22", "committedDate": "2020-06-30T05:27:39Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM5Njk3NzA4", "url": "https://github.com/kiegroup/kogito-apps/pull/283#pullrequestreview-439697708", "createdAt": "2020-06-30T06:13:17Z", "commit": {"oid": "dea4c4d98d782cd00a2dc6e93bfe643b37beff22"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjoxMzoxN1rOGqtKVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQwNjo0MDozNVrOGqt27w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzMzMwMQ==", "bodyText": "@AjayJagan I think onSuccessAction you actually dont need any parameters. This method just called called so you know it operation succeed.", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r447433301", "createdAt": "2020-06-30T06:13:17Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/management-console/src/utils/Utils.tsx", "diffHunk": "@@ -182,25 +167,29 @@ export const handleAbort = (\n     });\n };\n \n-export const isModalOpen = (\n-  modalTitle,\n-  isSkipModalOpen,\n-  isRetryModalOpen\n-): boolean => {\n-  if (modalTitle === 'Skip operation') {\n-    return isSkipModalOpen;\n-  } else if (modalTitle === 'Retry operation') {\n-    return isRetryModalOpen;\n-  }\n-};\n-export const modalToggle = (\n-  modalTitle,\n-  handleSkipModalToggle,\n-  handleRetryModalToggle\n-): (() => void) => {\n-  if (modalTitle === 'Skip operation') {\n-    return handleSkipModalToggle;\n-  } else if (modalTitle === 'Retry operation') {\n-    return handleRetryModalToggle;\n-  }\n+export const handleNodeInstanceRetrigger = (\n+  processInstanceData: Pick<\n+    ProcessInstance,\n+    'id' | 'nodes' | 'addons' | 'error' | 'serviceUrl' | 'processId' | 'state'\n+  >,\n+  nodeObject: any,\n+  onSuccessAction: (title: string, content: string) => void,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dea4c4d98d782cd00a2dc6e93bfe643b37beff22"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzMzU2Nw==", "bodyText": "in here I would propose to only have a message: string as result so you can build the final content.", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r447433567", "createdAt": "2020-06-30T06:14:01Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/management-console/src/utils/Utils.tsx", "diffHunk": "@@ -182,25 +167,29 @@ export const handleAbort = (\n     });\n };\n \n-export const isModalOpen = (\n-  modalTitle,\n-  isSkipModalOpen,\n-  isRetryModalOpen\n-): boolean => {\n-  if (modalTitle === 'Skip operation') {\n-    return isSkipModalOpen;\n-  } else if (modalTitle === 'Retry operation') {\n-    return isRetryModalOpen;\n-  }\n-};\n-export const modalToggle = (\n-  modalTitle,\n-  handleSkipModalToggle,\n-  handleRetryModalToggle\n-): (() => void) => {\n-  if (modalTitle === 'Skip operation') {\n-    return handleSkipModalToggle;\n-  } else if (modalTitle === 'Retry operation') {\n-    return handleRetryModalToggle;\n-  }\n+export const handleNodeInstanceRetrigger = (\n+  processInstanceData: Pick<\n+    ProcessInstance,\n+    'id' | 'nodes' | 'addons' | 'error' | 'serviceUrl' | 'processId' | 'state'\n+  >,\n+  nodeObject: any,\n+  onSuccessAction: (title: string, content: string) => void,\n+  onFailureAction: (title: string, content: string) => void", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dea4c4d98d782cd00a2dc6e93bfe643b37beff22"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzNTgwNg==", "bodyText": "You can either pass the id as String or a `Pick<\nNodeInstance,\n'id'\n\n`\nNode name is not needed as message should be built in the calling method.", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r447435806", "createdAt": "2020-06-30T06:19:40Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/management-console/src/utils/Utils.tsx", "diffHunk": "@@ -182,25 +167,29 @@ export const handleAbort = (\n     });\n };\n \n-export const isModalOpen = (\n-  modalTitle,\n-  isSkipModalOpen,\n-  isRetryModalOpen\n-): boolean => {\n-  if (modalTitle === 'Skip operation') {\n-    return isSkipModalOpen;\n-  } else if (modalTitle === 'Retry operation') {\n-    return isRetryModalOpen;\n-  }\n-};\n-export const modalToggle = (\n-  modalTitle,\n-  handleSkipModalToggle,\n-  handleRetryModalToggle\n-): (() => void) => {\n-  if (modalTitle === 'Skip operation') {\n-    return handleSkipModalToggle;\n-  } else if (modalTitle === 'Retry operation') {\n-    return handleRetryModalToggle;\n-  }\n+export const handleNodeInstanceRetrigger = (\n+  processInstanceData: Pick<\n+    ProcessInstance,\n+    'id' | 'nodes' | 'addons' | 'error' | 'serviceUrl' | 'processId' | 'state'\n+  >,\n+  nodeObject: any,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dea4c4d98d782cd00a2dc6e93bfe643b37beff22"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzOTgwMQ==", "bodyText": "you just call onDropdownSelect id from here?", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r447439801", "createdAt": "2020-06-30T06:29:14Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/management-console/src/components/Organisms/ProcessDetailsTimeline/ProcessDetailsTimeline.tsx", "diffHunk": "@@ -24,72 +24,149 @@ import {\n import React, { useState } from 'react';\n import './ProcessDetailsTimeline.css';\n import { GraphQL } from '@kogito-apps/common';\n-import { handleRetry, handleSkip } from '../../../utils/Utils';\n+import {\n+  handleRetry,\n+  handleSkip,\n+  handleNodeInstanceRetrigger,\n+  setTitle\n+} from '../../../utils/Utils';\n import ProcessInstance = GraphQL.ProcessInstance;\n+import ProcessListModal from '../../Atoms/ProcessListModal/ProcessListModal';\n \n export interface IOwnProps {\n   data: Pick<\n     ProcessInstance,\n     'id' | 'nodes' | 'addons' | 'error' | 'serviceUrl' | 'processId' | 'state'\n   >;\n-  setModalTitle: (modalTitle: string) => void;\n-  setTitleType: (titleType: string) => void;\n-  setModalContent: (modalContent: string) => void;\n-  handleSkipModalToggle: () => void;\n-  handleRetryModalToggle: () => void;\n }\n \n-const ProcessDetailsTimeline: React.FC<IOwnProps> = ({\n-  data,\n-  setModalTitle,\n-  setModalContent,\n-  setTitleType,\n-  handleRetryModalToggle,\n-  handleSkipModalToggle\n-}) => {\n-  const [isKebabOpen, setIsKebabOpen] = useState(false);\n-  const dropdownItems = [\n-    <DropdownItem\n-      key=\"retry\"\n-      component=\"button\"\n-      onClick={() =>\n-        handleRetry(\n-          data,\n-          setModalTitle,\n-          setTitleType,\n-          setModalContent,\n-          handleRetryModalToggle\n-        )\n-      }\n-    >\n-      Retry\n-    </DropdownItem>,\n-    <DropdownItem\n-      key=\"skip\"\n-      component=\"button\"\n-      onClick={() =>\n-        handleSkip(\n-          data,\n-          setModalTitle,\n-          setTitleType,\n-          setModalContent,\n-          handleSkipModalToggle\n-        )\n-      }\n-    >\n-      Skip\n-    </DropdownItem>\n-  ];\n+const ProcessDetailsTimeline: React.FC<IOwnProps> = ({ data }) => {\n+  const [nodeObject, setNodeObject] = useState({});\n+  const [kebabOpenArray, setKebabOpenArray] = useState([]);\n+  const [modalTitle, setModalTitle] = useState<string>('');\n+  const [titleType, setTitleType] = useState<string>('');\n+  const [modalContent, setModalContent] = useState<string>('');\n+  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n+  const ignoredNodeTypes = ['Join', 'Split', 'EndNode'];\n+\n+  const onKebabToggle = (isOpen: boolean, node, id) => {\n+    setNodeObject(node);\n+    if (isOpen) {\n+      setKebabOpenArray([...kebabOpenArray, id]);\n+    } else {\n+      const tempKebabArray = [...kebabOpenArray];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dea4c4d98d782cd00a2dc6e93bfe643b37beff22"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQ0NDcxOQ==", "bodyText": "same here, would keep onSuccessAction as simple function and onFailureAction with a message string to be returned.", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r447444719", "createdAt": "2020-06-30T06:40:35Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/management-console/src/components/Atoms/ErrorPopover/ErrorPopover.tsx", "diffHunk": "@@ -9,19 +9,13 @@ import { GraphQL } from '@kogito-apps/common';\n import ProcessInstance = GraphQL.ProcessInstance;\n interface IOwnProps {\n   processInstanceData: ProcessInstance;\n-  setModalTitle: (modalTitle: string) => void;\n-  setTitleType: (titleType: string) => void;\n-  setModalContent: (modalContent: string) => void;\n-  handleRetryModalToggle: () => void;\n-  handleSkipModalToggle: () => void;\n+  onSuccessAction: (title: string, content: string) => void;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dea4c4d98d782cd00a2dc6e93bfe643b37beff22"}, "originalPosition": 9}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "dea4c4d98d782cd00a2dc6e93bfe643b37beff22", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/dea4c4d98d782cd00a2dc6e93bfe643b37beff22", "committedDate": "2020-06-30T05:27:39Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}, "afterCommit": {"oid": "739e6e3ec70a10bcd02c9a1e29b1c1cd1814cca7", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/739e6e3ec70a10bcd02c9a1e29b1c1cd1814cca7", "committedDate": "2020-06-30T13:12:15Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwMTIxMTUx", "url": "https://github.com/kiegroup/kogito-apps/pull/283#pullrequestreview-440121151", "createdAt": "2020-06-30T15:15:14Z", "commit": {"oid": "739e6e3ec70a10bcd02c9a1e29b1c1cd1814cca7"}, "state": "COMMENTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNToxNToxNFrOGrBWwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0zMFQxNToyMDowOFrOGrBk4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc2NDE2Mg==", "bodyText": "@AjayJagan ^", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r447764162", "createdAt": "2020-06-30T15:15:14Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/management-console/src/components/Organisms/ProcessDetailsTimeline/ProcessDetailsTimeline.tsx", "diffHunk": "@@ -24,72 +24,149 @@ import {\n import React, { useState } from 'react';\n import './ProcessDetailsTimeline.css';\n import { GraphQL } from '@kogito-apps/common';\n-import { handleRetry, handleSkip } from '../../../utils/Utils';\n+import {\n+  handleRetry,\n+  handleSkip,\n+  handleNodeInstanceRetrigger,\n+  setTitle\n+} from '../../../utils/Utils';\n import ProcessInstance = GraphQL.ProcessInstance;\n+import ProcessListModal from '../../Atoms/ProcessListModal/ProcessListModal';\n \n export interface IOwnProps {\n   data: Pick<\n     ProcessInstance,\n     'id' | 'nodes' | 'addons' | 'error' | 'serviceUrl' | 'processId' | 'state'\n   >;\n-  setModalTitle: (modalTitle: string) => void;\n-  setTitleType: (titleType: string) => void;\n-  setModalContent: (modalContent: string) => void;\n-  handleSkipModalToggle: () => void;\n-  handleRetryModalToggle: () => void;\n }\n \n-const ProcessDetailsTimeline: React.FC<IOwnProps> = ({\n-  data,\n-  setModalTitle,\n-  setModalContent,\n-  setTitleType,\n-  handleRetryModalToggle,\n-  handleSkipModalToggle\n-}) => {\n-  const [isKebabOpen, setIsKebabOpen] = useState(false);\n-  const dropdownItems = [\n-    <DropdownItem\n-      key=\"retry\"\n-      component=\"button\"\n-      onClick={() =>\n-        handleRetry(\n-          data,\n-          setModalTitle,\n-          setTitleType,\n-          setModalContent,\n-          handleRetryModalToggle\n-        )\n-      }\n-    >\n-      Retry\n-    </DropdownItem>,\n-    <DropdownItem\n-      key=\"skip\"\n-      component=\"button\"\n-      onClick={() =>\n-        handleSkip(\n-          data,\n-          setModalTitle,\n-          setTitleType,\n-          setModalContent,\n-          handleSkipModalToggle\n-        )\n-      }\n-    >\n-      Skip\n-    </DropdownItem>\n-  ];\n+const ProcessDetailsTimeline: React.FC<IOwnProps> = ({ data }) => {\n+  const [nodeObject, setNodeObject] = useState({});\n+  const [kebabOpenArray, setKebabOpenArray] = useState([]);\n+  const [modalTitle, setModalTitle] = useState<string>('');\n+  const [titleType, setTitleType] = useState<string>('');\n+  const [modalContent, setModalContent] = useState<string>('');\n+  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n+  const ignoredNodeTypes = ['Join', 'Split', 'EndNode'];\n+\n+  const onKebabToggle = (isOpen: boolean, node, id) => {\n+    setNodeObject(node);\n+    if (isOpen) {\n+      setKebabOpenArray([...kebabOpenArray, id]);\n+    } else {\n+      const tempKebabArray = [...kebabOpenArray];", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NzQzOTgwMQ=="}, "originalCommit": {"oid": "dea4c4d98d782cd00a2dc6e93bfe643b37beff22"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc2NTUyMg==", "bodyText": "need to pass message here?", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r447765522", "createdAt": "2020-06-30T15:17:02Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/management-console/src/utils/Utils.tsx", "diffHunk": "@@ -182,25 +151,23 @@ export const handleAbort = (\n     });\n };\n \n-export const isModalOpen = (\n-  modalTitle,\n-  isSkipModalOpen,\n-  isRetryModalOpen\n-): boolean => {\n-  if (modalTitle === 'Skip operation') {\n-    return isSkipModalOpen;\n-  } else if (modalTitle === 'Retry operation') {\n-    return isRetryModalOpen;\n-  }\n-};\n-export const modalToggle = (\n-  modalTitle,\n-  handleSkipModalToggle,\n-  handleRetryModalToggle\n-): (() => void) => {\n-  if (modalTitle === 'Skip operation') {\n-    return handleSkipModalToggle;\n-  } else if (modalTitle === 'Retry operation') {\n-    return handleRetryModalToggle;\n-  }\n+export const handleNodeInstanceRetrigger = (\n+  processInstanceData: Pick<\n+    ProcessInstance,\n+    'id' | 'nodes' | 'addons' | 'error' | 'serviceUrl' | 'processId' | 'state'\n+  >,\n+  nodeObject: Pick<GraphQL.NodeInstance, 'id'>,\n+  onRetriggerSuccess,\n+  onRetriggerFailure\n+) => {\n+  axios\n+    .post(\n+      `${processInstanceData.serviceUrl}/management/processes/${processInstanceData.processId}/instances/${processInstanceData.id}/nodeInstances/${nodeObject.id}`\n+    )\n+    .then(() => {\n+      onRetriggerSuccess();\n+    })\n+    .catch(() => {\n+      onRetriggerFailure();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "739e6e3ec70a10bcd02c9a1e29b1c1cd1814cca7"}, "originalPosition": 133}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc2NTY3MQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              nodeObject: Pick<GraphQL.NodeInstance, 'id'>,\n          \n          \n            \n              node: Pick<GraphQL.NodeInstance, 'id'>,", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r447765671", "createdAt": "2020-06-30T15:17:17Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/management-console/src/utils/Utils.tsx", "diffHunk": "@@ -182,25 +151,23 @@ export const handleAbort = (\n     });\n };\n \n-export const isModalOpen = (\n-  modalTitle,\n-  isSkipModalOpen,\n-  isRetryModalOpen\n-): boolean => {\n-  if (modalTitle === 'Skip operation') {\n-    return isSkipModalOpen;\n-  } else if (modalTitle === 'Retry operation') {\n-    return isRetryModalOpen;\n-  }\n-};\n-export const modalToggle = (\n-  modalTitle,\n-  handleSkipModalToggle,\n-  handleRetryModalToggle\n-): (() => void) => {\n-  if (modalTitle === 'Skip operation') {\n-    return handleSkipModalToggle;\n-  } else if (modalTitle === 'Retry operation') {\n-    return handleRetryModalToggle;\n-  }\n+export const handleNodeInstanceRetrigger = (\n+  processInstanceData: Pick<\n+    ProcessInstance,\n+    'id' | 'nodes' | 'addons' | 'error' | 'serviceUrl' | 'processId' | 'state'\n+  >,\n+  nodeObject: Pick<GraphQL.NodeInstance, 'id'>,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "739e6e3ec70a10bcd02c9a1e29b1c1cd1814cca7"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc2NTc2Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              processInstanceData: Pick<\n          \n          \n            \n              processInstance: Pick<", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r447765766", "createdAt": "2020-06-30T15:17:23Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/management-console/src/utils/Utils.tsx", "diffHunk": "@@ -182,25 +151,23 @@ export const handleAbort = (\n     });\n };\n \n-export const isModalOpen = (\n-  modalTitle,\n-  isSkipModalOpen,\n-  isRetryModalOpen\n-): boolean => {\n-  if (modalTitle === 'Skip operation') {\n-    return isSkipModalOpen;\n-  } else if (modalTitle === 'Retry operation') {\n-    return isRetryModalOpen;\n-  }\n-};\n-export const modalToggle = (\n-  modalTitle,\n-  handleSkipModalToggle,\n-  handleRetryModalToggle\n-): (() => void) => {\n-  if (modalTitle === 'Skip operation') {\n-    return handleSkipModalToggle;\n-  } else if (modalTitle === 'Retry operation') {\n-    return handleRetryModalToggle;\n-  }\n+export const handleNodeInstanceRetrigger = (\n+  processInstanceData: Pick<", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "739e6e3ec70a10bcd02c9a1e29b1c1cd1814cca7"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc2NjgwOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              const onRetriggerFailure = (): void => {\n          \n          \n            \n              const onRetriggerFailure = (name: String): void => {", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r447766808", "createdAt": "2020-06-30T15:18:49Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/management-console/src/components/Organisms/ProcessDetailsTimeline/ProcessDetailsTimeline.tsx", "diffHunk": "@@ -24,72 +24,190 @@ import {\n import React, { useState } from 'react';\n import './ProcessDetailsTimeline.css';\n import { GraphQL } from '@kogito-apps/common';\n-import { handleRetry, handleSkip } from '../../../utils/Utils';\n+import {\n+  handleRetry,\n+  handleSkip,\n+  handleNodeInstanceRetrigger,\n+  setTitle\n+} from '../../../utils/Utils';\n import ProcessInstance = GraphQL.ProcessInstance;\n+import ProcessListModal from '../../Atoms/ProcessListModal/ProcessListModal';\n \n export interface IOwnProps {\n   data: Pick<\n     ProcessInstance,\n     'id' | 'nodes' | 'addons' | 'error' | 'serviceUrl' | 'processId' | 'state'\n   >;\n-  setModalTitle: (modalTitle: string) => void;\n-  setTitleType: (titleType: string) => void;\n-  setModalContent: (modalContent: string) => void;\n-  handleSkipModalToggle: () => void;\n-  handleRetryModalToggle: () => void;\n }\n \n-const ProcessDetailsTimeline: React.FC<IOwnProps> = ({\n-  data,\n-  setModalTitle,\n-  setModalContent,\n-  setTitleType,\n-  handleRetryModalToggle,\n-  handleSkipModalToggle\n-}) => {\n-  const [isKebabOpen, setIsKebabOpen] = useState(false);\n-  const dropdownItems = [\n-    <DropdownItem\n-      key=\"retry\"\n-      component=\"button\"\n-      onClick={() =>\n-        handleRetry(\n-          data,\n-          setModalTitle,\n-          setTitleType,\n-          setModalContent,\n-          handleRetryModalToggle\n-        )\n-      }\n-    >\n-      Retry\n-    </DropdownItem>,\n-    <DropdownItem\n-      key=\"skip\"\n-      component=\"button\"\n-      onClick={() =>\n-        handleSkip(\n-          data,\n-          setModalTitle,\n-          setTitleType,\n-          setModalContent,\n-          handleSkipModalToggle\n-        )\n-      }\n-    >\n-      Skip\n-    </DropdownItem>\n-  ];\n-\n-  const onKebabToggle = isOpen => {\n-    setIsKebabOpen(isOpen);\n+const ProcessDetailsTimeline: React.FC<IOwnProps> = ({ data }) => {\n+  const [nodeObject, setNodeObject] = useState<GraphQL.NodeInstance>();\n+  const [kebabOpenArray, setKebabOpenArray] = useState([]);\n+  const [modalTitle, setModalTitle] = useState<string>('');\n+  const [titleType, setTitleType] = useState<string>('');\n+  const [modalContent, setModalContent] = useState<string>('');\n+  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n+  const ignoredNodeTypes = ['Join', 'Split', 'EndNode'];\n+\n+  const onKebabToggle = (isOpen: boolean, node, id) => {\n+    setNodeObject(node);\n+    if (isOpen) {\n+      setKebabOpenArray([...kebabOpenArray, id]);\n+    } else {\n+      const tempKebabArray = [...kebabOpenArray];\n+      const index = tempKebabArray.indexOf(id);\n+      tempKebabArray.splice(index, 1);\n+      setKebabOpenArray(tempKebabArray);\n+    }\n+  };\n+\n+  const onDropdownSelect = id => {\n+    const tempKebabArray = [...kebabOpenArray];\n+    const index = tempKebabArray.indexOf(id);\n+    tempKebabArray.splice(index, 1);\n+    setKebabOpenArray(tempKebabArray);\n+  };\n+\n+  const handleModalToggle = () => {\n+    setIsModalOpen(!isModalOpen);\n+  };\n+\n+  const onSuccessAction = () => {\n+    setTitleType('success');\n+    handleModalToggle();\n+  };\n+\n+  const onFailureAction = () => {\n+    setTitleType('failure');\n+    handleModalToggle();\n+  };\n+\n+  const onRetriggerSuccess = (): void => {\n+    setModalTitle('Node retrigger process');\n+    setModalContent(`The node ${nodeObject.name} was successfully retriggered`);\n+    onSuccessAction();\n+  };\n+\n+  const onRetriggerFailure = (): void => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "739e6e3ec70a10bcd02c9a1e29b1c1cd1814cca7"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc2NzAwMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              const onRetriggerSuccess = (): void => {\n          \n          \n            \n              const onRetriggerSuccess = (name: String): void => {", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r447767003", "createdAt": "2020-06-30T15:19:06Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/management-console/src/components/Organisms/ProcessDetailsTimeline/ProcessDetailsTimeline.tsx", "diffHunk": "@@ -24,72 +24,190 @@ import {\n import React, { useState } from 'react';\n import './ProcessDetailsTimeline.css';\n import { GraphQL } from '@kogito-apps/common';\n-import { handleRetry, handleSkip } from '../../../utils/Utils';\n+import {\n+  handleRetry,\n+  handleSkip,\n+  handleNodeInstanceRetrigger,\n+  setTitle\n+} from '../../../utils/Utils';\n import ProcessInstance = GraphQL.ProcessInstance;\n+import ProcessListModal from '../../Atoms/ProcessListModal/ProcessListModal';\n \n export interface IOwnProps {\n   data: Pick<\n     ProcessInstance,\n     'id' | 'nodes' | 'addons' | 'error' | 'serviceUrl' | 'processId' | 'state'\n   >;\n-  setModalTitle: (modalTitle: string) => void;\n-  setTitleType: (titleType: string) => void;\n-  setModalContent: (modalContent: string) => void;\n-  handleSkipModalToggle: () => void;\n-  handleRetryModalToggle: () => void;\n }\n \n-const ProcessDetailsTimeline: React.FC<IOwnProps> = ({\n-  data,\n-  setModalTitle,\n-  setModalContent,\n-  setTitleType,\n-  handleRetryModalToggle,\n-  handleSkipModalToggle\n-}) => {\n-  const [isKebabOpen, setIsKebabOpen] = useState(false);\n-  const dropdownItems = [\n-    <DropdownItem\n-      key=\"retry\"\n-      component=\"button\"\n-      onClick={() =>\n-        handleRetry(\n-          data,\n-          setModalTitle,\n-          setTitleType,\n-          setModalContent,\n-          handleRetryModalToggle\n-        )\n-      }\n-    >\n-      Retry\n-    </DropdownItem>,\n-    <DropdownItem\n-      key=\"skip\"\n-      component=\"button\"\n-      onClick={() =>\n-        handleSkip(\n-          data,\n-          setModalTitle,\n-          setTitleType,\n-          setModalContent,\n-          handleSkipModalToggle\n-        )\n-      }\n-    >\n-      Skip\n-    </DropdownItem>\n-  ];\n-\n-  const onKebabToggle = isOpen => {\n-    setIsKebabOpen(isOpen);\n+const ProcessDetailsTimeline: React.FC<IOwnProps> = ({ data }) => {\n+  const [nodeObject, setNodeObject] = useState<GraphQL.NodeInstance>();\n+  const [kebabOpenArray, setKebabOpenArray] = useState([]);\n+  const [modalTitle, setModalTitle] = useState<string>('');\n+  const [titleType, setTitleType] = useState<string>('');\n+  const [modalContent, setModalContent] = useState<string>('');\n+  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n+  const ignoredNodeTypes = ['Join', 'Split', 'EndNode'];\n+\n+  const onKebabToggle = (isOpen: boolean, node, id) => {\n+    setNodeObject(node);\n+    if (isOpen) {\n+      setKebabOpenArray([...kebabOpenArray, id]);\n+    } else {\n+      const tempKebabArray = [...kebabOpenArray];\n+      const index = tempKebabArray.indexOf(id);\n+      tempKebabArray.splice(index, 1);\n+      setKebabOpenArray(tempKebabArray);\n+    }\n+  };\n+\n+  const onDropdownSelect = id => {\n+    const tempKebabArray = [...kebabOpenArray];\n+    const index = tempKebabArray.indexOf(id);\n+    tempKebabArray.splice(index, 1);\n+    setKebabOpenArray(tempKebabArray);\n+  };\n+\n+  const handleModalToggle = () => {\n+    setIsModalOpen(!isModalOpen);\n+  };\n+\n+  const onSuccessAction = () => {\n+    setTitleType('success');\n+    handleModalToggle();\n+  };\n+\n+  const onFailureAction = () => {\n+    setTitleType('failure');\n+    handleModalToggle();\n+  };\n+\n+  const onRetriggerSuccess = (): void => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "739e6e3ec70a10bcd02c9a1e29b1c1cd1814cca7"}, "originalPosition": 112}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc2NzM2OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          onRetriggerSuccess,\n          \n          \n            \n                          () => onRetriggerSuccess(node.name),", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r447767368", "createdAt": "2020-06-30T15:19:38Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/management-console/src/components/Organisms/ProcessDetailsTimeline/ProcessDetailsTimeline.tsx", "diffHunk": "@@ -24,72 +24,190 @@ import {\n import React, { useState } from 'react';\n import './ProcessDetailsTimeline.css';\n import { GraphQL } from '@kogito-apps/common';\n-import { handleRetry, handleSkip } from '../../../utils/Utils';\n+import {\n+  handleRetry,\n+  handleSkip,\n+  handleNodeInstanceRetrigger,\n+  setTitle\n+} from '../../../utils/Utils';\n import ProcessInstance = GraphQL.ProcessInstance;\n+import ProcessListModal from '../../Atoms/ProcessListModal/ProcessListModal';\n \n export interface IOwnProps {\n   data: Pick<\n     ProcessInstance,\n     'id' | 'nodes' | 'addons' | 'error' | 'serviceUrl' | 'processId' | 'state'\n   >;\n-  setModalTitle: (modalTitle: string) => void;\n-  setTitleType: (titleType: string) => void;\n-  setModalContent: (modalContent: string) => void;\n-  handleSkipModalToggle: () => void;\n-  handleRetryModalToggle: () => void;\n }\n \n-const ProcessDetailsTimeline: React.FC<IOwnProps> = ({\n-  data,\n-  setModalTitle,\n-  setModalContent,\n-  setTitleType,\n-  handleRetryModalToggle,\n-  handleSkipModalToggle\n-}) => {\n-  const [isKebabOpen, setIsKebabOpen] = useState(false);\n-  const dropdownItems = [\n-    <DropdownItem\n-      key=\"retry\"\n-      component=\"button\"\n-      onClick={() =>\n-        handleRetry(\n-          data,\n-          setModalTitle,\n-          setTitleType,\n-          setModalContent,\n-          handleRetryModalToggle\n-        )\n-      }\n-    >\n-      Retry\n-    </DropdownItem>,\n-    <DropdownItem\n-      key=\"skip\"\n-      component=\"button\"\n-      onClick={() =>\n-        handleSkip(\n-          data,\n-          setModalTitle,\n-          setTitleType,\n-          setModalContent,\n-          handleSkipModalToggle\n-        )\n-      }\n-    >\n-      Skip\n-    </DropdownItem>\n-  ];\n-\n-  const onKebabToggle = isOpen => {\n-    setIsKebabOpen(isOpen);\n+const ProcessDetailsTimeline: React.FC<IOwnProps> = ({ data }) => {\n+  const [nodeObject, setNodeObject] = useState<GraphQL.NodeInstance>();\n+  const [kebabOpenArray, setKebabOpenArray] = useState([]);\n+  const [modalTitle, setModalTitle] = useState<string>('');\n+  const [titleType, setTitleType] = useState<string>('');\n+  const [modalContent, setModalContent] = useState<string>('');\n+  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n+  const ignoredNodeTypes = ['Join', 'Split', 'EndNode'];\n+\n+  const onKebabToggle = (isOpen: boolean, node, id) => {\n+    setNodeObject(node);\n+    if (isOpen) {\n+      setKebabOpenArray([...kebabOpenArray, id]);\n+    } else {\n+      const tempKebabArray = [...kebabOpenArray];\n+      const index = tempKebabArray.indexOf(id);\n+      tempKebabArray.splice(index, 1);\n+      setKebabOpenArray(tempKebabArray);\n+    }\n+  };\n+\n+  const onDropdownSelect = id => {\n+    const tempKebabArray = [...kebabOpenArray];\n+    const index = tempKebabArray.indexOf(id);\n+    tempKebabArray.splice(index, 1);\n+    setKebabOpenArray(tempKebabArray);\n+  };\n+\n+  const handleModalToggle = () => {\n+    setIsModalOpen(!isModalOpen);\n+  };\n+\n+  const onSuccessAction = () => {\n+    setTitleType('success');\n+    handleModalToggle();\n+  };\n+\n+  const onFailureAction = () => {\n+    setTitleType('failure');\n+    handleModalToggle();\n+  };\n+\n+  const onRetriggerSuccess = (): void => {\n+    setModalTitle('Node retrigger process');\n+    setModalContent(`The node ${nodeObject.name} was successfully retriggered`);\n+    onSuccessAction();\n+  };\n+\n+  const onRetriggerFailure = (): void => {\n+    setModalTitle('Node retrigger process');\n+    setModalContent(`The node ${nodeObject.name} failed to retrigger`);\n+    onFailureAction();\n+  };\n+\n+  const onRetrySuccess = (): void => {\n+    setModalTitle('Retry operation');\n+    setModalContent(\n+      'Process execution has successfully re-executed node which was in error state.'\n+    );\n+    onSuccessAction();\n+  };\n+\n+  const onRetryFailure = (errorMessage: string): void => {\n+    setModalTitle('Retry operation');\n+    setModalContent(\n+      `Process execution failed to re-execute node which is in error state. Message: ${errorMessage}`\n+    );\n+    onFailureAction();\n+  };\n+\n+  const onSkipSuccess = (): void => {\n+    setModalTitle('Skip operation');\n+    setModalContent(\n+      'Process execution has successfully skipped node which was in error state.'\n+    );\n+    onSuccessAction();\n+  };\n+\n+  const onSkipFailure = (errorMessage: string): void => {\n+    setModalTitle('Retry operation');\n+    setModalContent(\n+      `Process execution failed to skip node which is in error state. Message: ${errorMessage}`\n+    );\n+    onFailureAction();\n   };\n \n-  const onDropdownSelect = event => {\n-    setIsKebabOpen(!isKebabOpen);\n+  const dropdownItems = (processInstanceData, node) => {\n+    if (\n+      processInstanceData.error &&\n+      node.definitionId === processInstanceData.error.nodeDefinitionId\n+    ) {\n+      return [\n+        <DropdownItem\n+          key=\"retry\"\n+          component=\"button\"\n+          onClick={() =>\n+            handleRetry(processInstanceData, onRetrySuccess, onRetryFailure)\n+          }\n+        >\n+          Retry\n+        </DropdownItem>,\n+        <DropdownItem\n+          key=\"skip\"\n+          component=\"button\"\n+          onClick={() =>\n+            handleSkip(processInstanceData, onSkipSuccess, onSkipFailure)\n+          }\n+        >\n+          Skip\n+        </DropdownItem>\n+      ];\n+    } else if (node.exit === null && !ignoredNodeTypes.includes(node.type)) {\n+      return [\n+        <DropdownItem\n+          key=\"retrigger\"\n+          component=\"button\"\n+          onClick={() =>\n+            handleNodeInstanceRetrigger(\n+              data,\n+              node,\n+              onRetriggerSuccess,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "739e6e3ec70a10bcd02c9a1e29b1c1cd1814cca7"}, "originalPosition": 192}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Nzc2Nzc3Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          onRetriggerFailure\n          \n          \n            \n                          () => onRetriggerFailurenode.name)", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r447767777", "createdAt": "2020-06-30T15:20:08Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/management-console/src/components/Organisms/ProcessDetailsTimeline/ProcessDetailsTimeline.tsx", "diffHunk": "@@ -24,72 +24,190 @@ import {\n import React, { useState } from 'react';\n import './ProcessDetailsTimeline.css';\n import { GraphQL } from '@kogito-apps/common';\n-import { handleRetry, handleSkip } from '../../../utils/Utils';\n+import {\n+  handleRetry,\n+  handleSkip,\n+  handleNodeInstanceRetrigger,\n+  setTitle\n+} from '../../../utils/Utils';\n import ProcessInstance = GraphQL.ProcessInstance;\n+import ProcessListModal from '../../Atoms/ProcessListModal/ProcessListModal';\n \n export interface IOwnProps {\n   data: Pick<\n     ProcessInstance,\n     'id' | 'nodes' | 'addons' | 'error' | 'serviceUrl' | 'processId' | 'state'\n   >;\n-  setModalTitle: (modalTitle: string) => void;\n-  setTitleType: (titleType: string) => void;\n-  setModalContent: (modalContent: string) => void;\n-  handleSkipModalToggle: () => void;\n-  handleRetryModalToggle: () => void;\n }\n \n-const ProcessDetailsTimeline: React.FC<IOwnProps> = ({\n-  data,\n-  setModalTitle,\n-  setModalContent,\n-  setTitleType,\n-  handleRetryModalToggle,\n-  handleSkipModalToggle\n-}) => {\n-  const [isKebabOpen, setIsKebabOpen] = useState(false);\n-  const dropdownItems = [\n-    <DropdownItem\n-      key=\"retry\"\n-      component=\"button\"\n-      onClick={() =>\n-        handleRetry(\n-          data,\n-          setModalTitle,\n-          setTitleType,\n-          setModalContent,\n-          handleRetryModalToggle\n-        )\n-      }\n-    >\n-      Retry\n-    </DropdownItem>,\n-    <DropdownItem\n-      key=\"skip\"\n-      component=\"button\"\n-      onClick={() =>\n-        handleSkip(\n-          data,\n-          setModalTitle,\n-          setTitleType,\n-          setModalContent,\n-          handleSkipModalToggle\n-        )\n-      }\n-    >\n-      Skip\n-    </DropdownItem>\n-  ];\n-\n-  const onKebabToggle = isOpen => {\n-    setIsKebabOpen(isOpen);\n+const ProcessDetailsTimeline: React.FC<IOwnProps> = ({ data }) => {\n+  const [nodeObject, setNodeObject] = useState<GraphQL.NodeInstance>();\n+  const [kebabOpenArray, setKebabOpenArray] = useState([]);\n+  const [modalTitle, setModalTitle] = useState<string>('');\n+  const [titleType, setTitleType] = useState<string>('');\n+  const [modalContent, setModalContent] = useState<string>('');\n+  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n+  const ignoredNodeTypes = ['Join', 'Split', 'EndNode'];\n+\n+  const onKebabToggle = (isOpen: boolean, node, id) => {\n+    setNodeObject(node);\n+    if (isOpen) {\n+      setKebabOpenArray([...kebabOpenArray, id]);\n+    } else {\n+      const tempKebabArray = [...kebabOpenArray];\n+      const index = tempKebabArray.indexOf(id);\n+      tempKebabArray.splice(index, 1);\n+      setKebabOpenArray(tempKebabArray);\n+    }\n+  };\n+\n+  const onDropdownSelect = id => {\n+    const tempKebabArray = [...kebabOpenArray];\n+    const index = tempKebabArray.indexOf(id);\n+    tempKebabArray.splice(index, 1);\n+    setKebabOpenArray(tempKebabArray);\n+  };\n+\n+  const handleModalToggle = () => {\n+    setIsModalOpen(!isModalOpen);\n+  };\n+\n+  const onSuccessAction = () => {\n+    setTitleType('success');\n+    handleModalToggle();\n+  };\n+\n+  const onFailureAction = () => {\n+    setTitleType('failure');\n+    handleModalToggle();\n+  };\n+\n+  const onRetriggerSuccess = (): void => {\n+    setModalTitle('Node retrigger process');\n+    setModalContent(`The node ${nodeObject.name} was successfully retriggered`);\n+    onSuccessAction();\n+  };\n+\n+  const onRetriggerFailure = (): void => {\n+    setModalTitle('Node retrigger process');\n+    setModalContent(`The node ${nodeObject.name} failed to retrigger`);\n+    onFailureAction();\n+  };\n+\n+  const onRetrySuccess = (): void => {\n+    setModalTitle('Retry operation');\n+    setModalContent(\n+      'Process execution has successfully re-executed node which was in error state.'\n+    );\n+    onSuccessAction();\n+  };\n+\n+  const onRetryFailure = (errorMessage: string): void => {\n+    setModalTitle('Retry operation');\n+    setModalContent(\n+      `Process execution failed to re-execute node which is in error state. Message: ${errorMessage}`\n+    );\n+    onFailureAction();\n+  };\n+\n+  const onSkipSuccess = (): void => {\n+    setModalTitle('Skip operation');\n+    setModalContent(\n+      'Process execution has successfully skipped node which was in error state.'\n+    );\n+    onSuccessAction();\n+  };\n+\n+  const onSkipFailure = (errorMessage: string): void => {\n+    setModalTitle('Retry operation');\n+    setModalContent(\n+      `Process execution failed to skip node which is in error state. Message: ${errorMessage}`\n+    );\n+    onFailureAction();\n   };\n \n-  const onDropdownSelect = event => {\n-    setIsKebabOpen(!isKebabOpen);\n+  const dropdownItems = (processInstanceData, node) => {\n+    if (\n+      processInstanceData.error &&\n+      node.definitionId === processInstanceData.error.nodeDefinitionId\n+    ) {\n+      return [\n+        <DropdownItem\n+          key=\"retry\"\n+          component=\"button\"\n+          onClick={() =>\n+            handleRetry(processInstanceData, onRetrySuccess, onRetryFailure)\n+          }\n+        >\n+          Retry\n+        </DropdownItem>,\n+        <DropdownItem\n+          key=\"skip\"\n+          component=\"button\"\n+          onClick={() =>\n+            handleSkip(processInstanceData, onSkipSuccess, onSkipFailure)\n+          }\n+        >\n+          Skip\n+        </DropdownItem>\n+      ];\n+    } else if (node.exit === null && !ignoredNodeTypes.includes(node.type)) {\n+      return [\n+        <DropdownItem\n+          key=\"retrigger\"\n+          component=\"button\"\n+          onClick={() =>\n+            handleNodeInstanceRetrigger(\n+              data,\n+              node,\n+              onRetriggerSuccess,\n+              onRetriggerFailure", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "739e6e3ec70a10bcd02c9a1e29b1c1cd1814cca7"}, "originalPosition": 193}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "739e6e3ec70a10bcd02c9a1e29b1c1cd1814cca7", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/739e6e3ec70a10bcd02c9a1e29b1c1cd1814cca7", "committedDate": "2020-06-30T13:12:15Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}, "afterCommit": {"oid": "ab536664e47253a6e67816bece0bd22867cfe020", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/ab536664e47253a6e67816bece0bd22867cfe020", "committedDate": "2020-06-30T16:05:21Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ab536664e47253a6e67816bece0bd22867cfe020", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/ab536664e47253a6e67816bece0bd22867cfe020", "committedDate": "2020-06-30T16:05:21Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}, "afterCommit": {"oid": "4d4cd60c4ade3acf8df13df55b8a213c74f584ba", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/4d4cd60c4ade3acf8df13df55b8a213c74f584ba", "committedDate": "2020-07-01T04:17:40Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4d4cd60c4ade3acf8df13df55b8a213c74f584ba", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/4d4cd60c4ade3acf8df13df55b8a213c74f584ba", "committedDate": "2020-07-01T04:17:40Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}, "afterCommit": {"oid": "3ea06c9a6a185f86583ee81e57199c46f6313001", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/3ea06c9a6a185f86583ee81e57199c46f6313001", "committedDate": "2020-07-01T10:04:57Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwNzM2OTQw", "url": "https://github.com/kiegroup/kogito-apps/pull/283#pullrequestreview-440736940", "createdAt": "2020-07-01T10:15:44Z", "commit": {"oid": "3ea06c9a6a185f86583ee81e57199c46f6313001"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMDoxNTo0NFrOGrf0hQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMTozNjo0N1rOGriO_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI2MzMwMQ==", "bodyText": "We could reduce code repetition even more:\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              const onSuccessAction = (title: string, content: string): void => {\n          \n          \n            \n                setTitleType('success');\n          \n          \n            \n                setModalTitle(title);\n          \n          \n            \n                setModalContent(content);\n          \n          \n            \n                handleModalToggle();\n          \n          \n            \n              };\n          \n          \n            \n            \n          \n          \n            \n              const onFailureAction = (title: string, content: string): void => {\n          \n          \n            \n                setTitleType('failure');\n          \n          \n            \n                setModalTitle(title);\n          \n          \n            \n                setModalContent(content);\n          \n          \n            \n                handleModalToggle();\n          \n          \n            \n              };\n          \n          \n            \n              const onAction = (type: string, title: string, content: string): void => {\n          \n          \n            \n                setTitleType(type);\n          \n          \n            \n                setModalTitle(title);\n          \n          \n            \n                setModalContent(content);\n          \n          \n            \n                handleModalToggle();\n          \n          \n            \n              }\n          \n          \n            \n              const onSuccessAction = (title: string, content: string): void => {\n          \n          \n            \n                onAction('success', title, content)\n          \n          \n            \n              };\n          \n          \n            \n            \n          \n          \n            \n              const onFailureAction = (title: string, content: string): void => {\n          \n          \n            \n                onAction('failure', title, content)\n          \n          \n            \n              };", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r448263301", "createdAt": "2020-07-01T10:15:44Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/management-console/src/components/Molecules/ProcessListTableItems/ProcessListTableItems.tsx", "diffHunk": "@@ -103,7 +97,46 @@ const ProcessListTableItems: React.FC<IOwnProps> = ({\n   const onToggle = _isOpen => {\n     setisOpen(_isOpen);\n   };\n+  const onSuccessAction = (title: string, content: string): void => {\n+    setTitleType('success');\n+    setModalTitle(title);\n+    setModalContent(content);\n+    handleModalToggle();\n+  };\n+\n+  const onFailureAction = (title: string, content: string): void => {\n+    setTitleType('failure');\n+    setModalTitle(title);\n+    setModalContent(content);\n+    handleModalToggle();\n+  };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ea06c9a6a185f86583ee81e57199c46f6313001"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODI2NjYyMA==", "bodyText": "Is this exactly the same as in ProcessListTableItems ? Can we extract the dropdownitems together with the actions to a separate component/s?\nConceptually in following lines:\nMove dropdowns and their actions to a separate file, let's call Actions for now. Resulting would be: Actions.SkipDropdownItem, Actions.onSkipSuccess(), Actions.onSkipFailure(), Actions.RetryDropdownItem ...\nthen in const dropdownItems below we would be adding return [ <Actions.RetryDropdownItem/>, <Actions.SkipDropdownItem/> ] and the on-functions would be hidden in Actions.\nBut we would need probably to pass the functions to alter the modal from there ... or would moving the ProcessListModal to the new file help there? to have another component <Actions.ProcessListModal /> ...\nI mean at least as a follow-up action ... wdyt?", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r448266620", "createdAt": "2020-07-01T10:22:17Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/management-console/src/components/Organisms/ProcessDetailsTimeline/ProcessDetailsTimeline.tsx", "diffHunk": "@@ -24,72 +24,187 @@ import {\n import React, { useState } from 'react';\n import './ProcessDetailsTimeline.css';\n import { GraphQL } from '@kogito-apps/common';\n-import { handleRetry, handleSkip } from '../../../utils/Utils';\n+import {\n+  handleRetry,\n+  handleSkip,\n+  handleNodeInstanceRetrigger,\n+  setTitle\n+} from '../../../utils/Utils';\n import ProcessInstance = GraphQL.ProcessInstance;\n+import ProcessListModal from '../../Atoms/ProcessListModal/ProcessListModal';\n \n export interface IOwnProps {\n   data: Pick<\n     ProcessInstance,\n     'id' | 'nodes' | 'addons' | 'error' | 'serviceUrl' | 'processId' | 'state'\n   >;\n-  setModalTitle: (modalTitle: string) => void;\n-  setTitleType: (titleType: string) => void;\n-  setModalContent: (modalContent: string) => void;\n-  handleSkipModalToggle: () => void;\n-  handleRetryModalToggle: () => void;\n }\n \n-const ProcessDetailsTimeline: React.FC<IOwnProps> = ({\n-  data,\n-  setModalTitle,\n-  setModalContent,\n-  setTitleType,\n-  handleRetryModalToggle,\n-  handleSkipModalToggle\n-}) => {\n-  const [isKebabOpen, setIsKebabOpen] = useState(false);\n-  const dropdownItems = [\n-    <DropdownItem\n-      key=\"retry\"\n-      component=\"button\"\n-      onClick={() =>\n-        handleRetry(\n-          data,\n-          setModalTitle,\n-          setTitleType,\n-          setModalContent,\n-          handleRetryModalToggle\n-        )\n-      }\n-    >\n-      Retry\n-    </DropdownItem>,\n-    <DropdownItem\n-      key=\"skip\"\n-      component=\"button\"\n-      onClick={() =>\n-        handleSkip(\n-          data,\n-          setModalTitle,\n-          setTitleType,\n-          setModalContent,\n-          handleSkipModalToggle\n-        )\n-      }\n-    >\n-      Skip\n-    </DropdownItem>\n-  ];\n-\n-  const onKebabToggle = isOpen => {\n-    setIsKebabOpen(isOpen);\n+const ProcessDetailsTimeline: React.FC<IOwnProps> = ({ data }) => {\n+  const [kebabOpenArray, setKebabOpenArray] = useState([]);\n+  const [modalTitle, setModalTitle] = useState<string>('');\n+  const [titleType, setTitleType] = useState<string>('');\n+  const [modalContent, setModalContent] = useState<string>('');\n+  const [isModalOpen, setIsModalOpen] = useState<boolean>(false);\n+  const ignoredNodeTypes = ['Join', 'Split', 'EndNode'];\n+\n+  const onKebabToggle = (isOpen: boolean, id) => {\n+    if (isOpen) {\n+      setKebabOpenArray([...kebabOpenArray, id]);\n+    } else {\n+      onDropdownSelect(id);\n+    }\n+  };\n+\n+  const onDropdownSelect = id => {\n+    const tempKebabArray = [...kebabOpenArray];\n+    const index = tempKebabArray.indexOf(id);\n+    tempKebabArray.splice(index, 1);\n+    setKebabOpenArray(tempKebabArray);\n+  };\n+\n+  const handleModalToggle = () => {\n+    setIsModalOpen(!isModalOpen);\n+  };\n+\n+  const onSuccessAction = (title: string, content: string): void => {\n+    setTitleType('success');\n+    setModalTitle(title);\n+    setModalContent(content);\n+    handleModalToggle();\n+  };\n+\n+  const onFailureAction = (title: string, content: string): void => {\n+    setTitleType('failure');\n+    setModalTitle(title);\n+    setModalContent(content);\n+    handleModalToggle();\n+  };\n+\n+  const onRetriggerSuccess = (name: string): void => {\n+    onSuccessAction(\n+      'Node retrigger process',\n+      `The node ${name} was successfully retriggered`\n+    );\n+  };\n+\n+  const onRetriggerFailure = (name: string): void => {\n+    onFailureAction(\n+      'Node retrigger process',\n+      `The node ${name} failed to retrigger`\n+    );\n+  };\n+\n+  const onRetrySuccess = (): void => {\n+    onSuccessAction(\n+      'Retry operation',\n+      'Process execution has successfully re-executed node which was in error state.'\n+    );\n+  };\n+\n+  const onRetryFailure = (errorMessage: string): void => {\n+    onFailureAction(\n+      'Retry operation',\n+      `Process execution failed to re-execute node which is in error state. Message: ${errorMessage}`\n+    );\n+  };\n+\n+  const onSkipSuccess = (): void => {\n+    onSuccessAction(\n+      'Skip operation',\n+      'Process execution has successfully skipped node which was in error state.'\n+    );\n+  };\n+\n+  const onSkipFailure = (errorMessage: string): void => {\n+    onFailureAction(\n+      'Retry operation',\n+      `Process execution failed to skip node which is in error state. Message: ${errorMessage}`\n+    );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ea06c9a6a185f86583ee81e57199c46f6313001"}, "originalPosition": 150}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODMwMjg0Ng==", "bodyText": "can we add check for the result? probably checking if onRetriggerFailure() has been invoked ..... or check contents of the modal?", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r448302846", "createdAt": "2020-07-01T11:36:47Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/management-console/src/components/Organisms/ProcessDetailsTimeline/tests/ProcessDetailsTimeline.test.tsx", "diffHunk": "@@ -133,37 +203,167 @@ describe('ProcessDetailsTimeline component tests', () => {\n     expect(wrapper).toMatchSnapshot();\n   });\n \n-  it('onSelect click test', () => {\n-    const wrapper = shallow(<ProcessDetailsTimeline {...props2} />);\n+  it('Snapshot testing for completed state', () => {\n+    const wrapper = shallow(<ProcessDetailsTimeline {...props3} />);\n+    expect(wrapper).toMatchSnapshot();\n+  });\n \n-    const event = {\n-      currentTarget: {}\n-    } as React.ChangeEvent<HTMLInputElement>;\n-    wrapper\n-      .find('#dropdown-kebab')\n-      .props()\n-      ['onSelect'](event);\n-    expect(wrapper.find('#dropdown-kebab').props()['isOpen']).toBeTruthy();\n+  it('onKebabToggle click test', async () => {\n+    let wrapper = mount(<ProcessDetailsTimeline {...props1} />);\n+    await act(async () => {\n+      wrapper\n+        .find(Dropdown)\n+        .at(0)\n+        .find(KebabToggle)\n+        .find('button')\n+        .simulate('click');\n+      await wait(0);\n+      wrapper = wrapper.update();\n+    });\n+    expect(\n+      wrapper\n+        .find(Dropdown)\n+        .at(0)\n+        .props()['isOpen']\n+    ).toBeTruthy();\n+    await act(async () => {\n+      wrapper\n+        .find(Dropdown)\n+        .at(0)\n+        .find(KebabToggle)\n+        .find('button')\n+        .simulate('click');\n+      await wait(0);\n+      wrapper = wrapper.update();\n+    });\n+    expect(\n+      wrapper\n+        .find(Dropdown)\n+        .at(0)\n+        .props()['isOpen']\n+    ).toBeFalsy();\n   });\n \n-  it('onToggle click test', () => {\n-    const wrapper = shallow(<ProcessDetailsTimeline {...props2} />);\n-    wrapper\n-      .find('#dropdown-kebab')\n-      .props()\n-      ['toggle']['props']['onToggle']();\n+  describe('handleSkip tests', () => {\n+    const handleSkipSpy = jest.spyOn(Utils, 'handleSkip');\n+    it('success test', async () => {\n+      mockedAxios.post.mockResolvedValue({});\n+      let wrapper = mount(<ProcessDetailsTimeline {...props1} />);\n+      await act(async () => {\n+        wrapper\n+          .find(Dropdown)\n+          .at(0)\n+          .find(KebabToggle)\n+          .find('button')\n+          .simulate('click');\n+        await wait(0);\n+        wrapper = wrapper.update();\n+        wrapper\n+          .find(DropdownItem)\n+          .at(1)\n+          .simulate('click');\n+      });\n+      expect(handleSkipSpy).toHaveBeenCalled();\n+    });\n+    it('failure', async () => {\n+      mockedAxios.post.mockRejectedValue({});\n+      let wrapper = mount(<ProcessDetailsTimeline {...props1} />);\n+      await act(async () => {\n+        wrapper\n+          .find(Dropdown)\n+          .at(0)\n+          .find(KebabToggle)\n+          .find('button')\n+          .simulate('click');\n+        await wait(0);\n+        wrapper = wrapper.update();\n+        wrapper\n+          .find(DropdownItem)\n+          .at(1)\n+          .simulate('click');\n+      });\n+      expect(handleSkipSpy).toHaveBeenCalled();\n+    });\n   });\n \n-  it('handle and handle retry click test', () => {\n-    const wrapper = shallow(<ProcessDetailsTimeline {...props2} />);\n+  describe('nodeInstanceRetrigger tests', () => {\n+    const handleNodeInstanceRetriggerSpy = jest.spyOn(\n+      Utils,\n+      'handleNodeInstanceRetrigger'\n+    );\n+    it('success test', async () => {\n+      mockedAxios.post.mockResolvedValue({});\n+      let wrapper = mount(<ProcessDetailsTimeline {...props1} />);\n+      await act(async () => {\n+        wrapper\n+          .find(Dropdown)\n+          .at(1)\n+          .find(KebabToggle)\n+          .find('button')\n+          .simulate('click');\n+        await wait(0);\n+        wrapper = wrapper.update();\n+        wrapper.find(DropdownItem).simulate('click');\n+      });\n+      expect(handleNodeInstanceRetriggerSpy).toHaveBeenCalled();\n+    });\n+    it('failure', async () => {\n+      mockedAxios.post.mockRejectedValue({});\n+      let wrapper = mount(<ProcessDetailsTimeline {...props1} />);\n+      await act(async () => {\n+        wrapper\n+          .find(Dropdown)\n+          .at(1)\n+          .find(KebabToggle)\n+          .find('button')\n+          .simulate('click');\n+        await wait(0);\n+        wrapper = wrapper.update();\n+        wrapper.find(DropdownItem).simulate('click');\n+      });\n+      expect(handleNodeInstanceRetriggerSpy).toHaveBeenCalled();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3ea06c9a6a185f86583ee81e57199c46f6313001"}, "originalPosition": 277}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3ea06c9a6a185f86583ee81e57199c46f6313001", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/3ea06c9a6a185f86583ee81e57199c46f6313001", "committedDate": "2020-07-01T10:04:57Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}, "afterCommit": {"oid": "d74b937bc72b45e08e2aa96f417a170b32fc91b7", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/d74b937bc72b45e08e2aa96f417a170b32fc91b7", "committedDate": "2020-07-01T13:40:24Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQwOTE0MzYx", "url": "https://github.com/kiegroup/kogito-apps/pull/283#pullrequestreview-440914361", "createdAt": "2020-07-01T14:19:46Z", "commit": {"oid": "d74b937bc72b45e08e2aa96f417a170b32fc91b7"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d74b937bc72b45e08e2aa96f417a170b32fc91b7", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/d74b937bc72b45e08e2aa96f417a170b32fc91b7", "committedDate": "2020-07-01T13:40:24Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}, "afterCommit": {"oid": "34648553b9665ce741f62e83e12a2d5e4f0a984e", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/34648553b9665ce741f62e83e12a2d5e4f0a984e", "committedDate": "2020-07-01T14:50:20Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxMjgwNjI0", "url": "https://github.com/kiegroup/kogito-apps/pull/283#pullrequestreview-441280624", "createdAt": "2020-07-02T00:49:19Z", "commit": {"oid": "34648553b9665ce741f62e83e12a2d5e4f0a984e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDo0OToxOVrOGr5xnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwMDo0OToxOVrOGr5xnA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODY4ODU0MA==", "bodyText": "Should all these error messages be getting put into a separate file for i18n and ease of maintenance?\nIn other places, we say \"The node [id] was...\" Should we stick with that wording here? I.e. \"The node [id] was successfully re-executed.\" Is it important that it was in an error state? Or that it is now (if it failed wouldn't it be assumed to be now in error?) @cristianonicolai", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r448688540", "createdAt": "2020-07-02T00:49:19Z", "author": {"login": "srambach"}, "path": "ui-packages/packages/management-console/src/components/Molecules/ProcessListTableItems/ProcessListTableItems.tsx", "diffHunk": "@@ -104,6 +103,44 @@ const ProcessListTableItems: React.FC<IOwnProps> = ({\n     setisOpen(_isOpen);\n   };\n \n+  const onAction = (title: string, content: string, type: string): void => {\n+    setTitleType(type);\n+    setModalTitle(title);\n+    setModalContent(content);\n+    handleModalToggle();\n+  };\n+\n+  const onRetrySuccess = (): void => {\n+    onAction(\n+      'Retry operation',\n+      'Process execution has successfully re-executed node which was in error state.',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "34648553b9665ce741f62e83e12a2d5e4f0a984e"}, "originalPosition": 60}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "34648553b9665ce741f62e83e12a2d5e4f0a984e", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/34648553b9665ce741f62e83e12a2d5e4f0a984e", "committedDate": "2020-07-01T14:50:20Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}, "afterCommit": {"oid": "e82b7f05c999b55ac6af991eaf2d955b9e8bed74", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/e82b7f05c999b55ac6af991eaf2d955b9e8bed74", "committedDate": "2020-07-02T07:49:59Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNTMwNTEw", "url": "https://github.com/kiegroup/kogito-apps/pull/283#pullrequestreview-441530510", "createdAt": "2020-07-02T09:58:50Z", "commit": {"oid": "e82b7f05c999b55ac6af991eaf2d955b9e8bed74"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwOTo1ODo1MFrOGsGDCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDoxMzo1OVrOGsGi-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg4OTYxMQ==", "bodyText": "type shouldnt be TitleType?\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              const onAction = (title: string, content: string, type: string): void => {\n          \n          \n            \n              const onAction = (title: string, content: string, type: TitleType): void => {", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r448889611", "createdAt": "2020-07-02T09:58:50Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/management-console/src/components/Molecules/ProcessListTableItems/ProcessListTableItems.tsx", "diffHunk": "@@ -104,6 +103,44 @@ const ProcessListTableItems: React.FC<IOwnProps> = ({\n     setisOpen(_isOpen);\n   };\n \n+  const onAction = (title: string, content: string, type: string): void => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e82b7f05c999b55ac6af991eaf2d955b9e8bed74"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5NDE5Nw==", "bodyText": "you shouldn't receive a node here. The node endpoint for retrigger is a different one, already covered in handleNodeInstanceRetrigger method", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r448894197", "createdAt": "2020-07-02T10:07:03Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/management-console/src/utils/Utils.tsx", "diffHunk": "@@ -87,68 +87,50 @@ export const setTitle = (\n };\n \n export const handleSkip = (\n-  processInstanceData: Pick<\n+  processInstance: Pick<\n     ProcessInstance,\n-    'id' | 'processId' | 'serviceUrl' | 'state'\n+    'id' | 'processId' | 'serviceUrl' | 'state' | 'processName'\n   >,\n-  setModalTitle: (modalTitle: string) => void,\n-  setTitleType: (titleType: string) => void,\n-  setModalContent: (modalContent: string) => void,\n-  handleSkipModalToggle: () => void\n+  node: Pick<GraphQL.NodeInstance, 'name'>,\n+  onSkipSuccess: (name: string) => void,\n+  onSkipFailure: (name: string, errorMessage: string) => void\n ): void => {\n-  setModalTitle('Skip operation');\n   axios\n     .post(\n-      `${processInstanceData.serviceUrl}/management/processes/${processInstanceData.processId}/instances/${processInstanceData.id}/skip`\n+      `${processInstance.serviceUrl}/management/processes/${processInstance.processId}/instances/${processInstance.id}/skip`\n     )\n     .then(() => {\n-      setTitleType('success');\n-      setModalContent(\n-        'Process execution has successfully skipped node which was in error state.'\n-      );\n-      handleSkipModalToggle();\n+      onSkipSuccess(node ? node.name : processInstance.processName);\n     })\n     .catch(error => {\n-      setTitleType('failure');\n-      setModalContent(\n-        `Process execution failed to skip node which is in error state. Message: ${JSON.stringify(\n-          error.message\n-        )}`\n+      onSkipFailure(\n+        node ? node.name : processInstance.processName,\n+        JSON.stringify(error.message)\n       );\n-      handleSkipModalToggle();\n     });\n };\n \n export const handleRetry = (\n-  processInstanceData: Pick<\n+  processInstance: Pick<\n     ProcessInstance,\n-    'id' | 'processId' | 'serviceUrl' | 'state'\n+    'id' | 'processId' | 'serviceUrl' | 'state' | 'processName'\n   >,\n-  setModalTitle: (modalTitle: string) => void,\n-  setTitleType: (titleType: string) => void,\n-  setModalContent: (modalContent: string) => void,\n-  handleRetryModalToggle: () => void\n+  node: Pick<GraphQL.NodeInstance, 'name'>,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e82b7f05c999b55ac6af991eaf2d955b9e8bed74"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5NTE4NA==", "bodyText": "I think you only need serviceUrl, processId, id here", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r448895184", "createdAt": "2020-07-02T10:08:56Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/management-console/src/utils/Utils.tsx", "diffHunk": "@@ -182,25 +159,23 @@ export const handleAbort = (\n     });\n };\n \n-export const isModalOpen = (\n-  modalTitle,\n-  isSkipModalOpen,\n-  isRetryModalOpen\n-): boolean => {\n-  if (modalTitle === 'Skip operation') {\n-    return isSkipModalOpen;\n-  } else if (modalTitle === 'Retry operation') {\n-    return isRetryModalOpen;\n-  }\n-};\n-export const modalToggle = (\n-  modalTitle,\n-  handleSkipModalToggle,\n-  handleRetryModalToggle\n-): (() => void) => {\n-  if (modalTitle === 'Skip operation') {\n-    return handleSkipModalToggle;\n-  } else if (modalTitle === 'Retry operation') {\n-    return handleRetryModalToggle;\n-  }\n+export const handleNodeInstanceRetrigger = (\n+  processInstance: Pick<\n+    ProcessInstance,\n+    'id' | 'nodes' | 'addons' | 'error' | 'serviceUrl' | 'processId' | 'state'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e82b7f05c999b55ac6af991eaf2d955b9e8bed74"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5NjE1OQ==", "bodyText": "you dont need node in here", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r448896159", "createdAt": "2020-07-02T10:10:46Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/management-console/src/utils/Utils.tsx", "diffHunk": "@@ -87,68 +87,50 @@ export const setTitle = (\n };\n \n export const handleSkip = (\n-  processInstanceData: Pick<\n+  processInstance: Pick<\n     ProcessInstance,\n-    'id' | 'processId' | 'serviceUrl' | 'state'\n+    'id' | 'processId' | 'serviceUrl' | 'state' | 'processName'\n   >,\n-  setModalTitle: (modalTitle: string) => void,\n-  setTitleType: (titleType: string) => void,\n-  setModalContent: (modalContent: string) => void,\n-  handleSkipModalToggle: () => void\n+  node: Pick<GraphQL.NodeInstance, 'name'>,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e82b7f05c999b55ac6af991eaf2d955b9e8bed74"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5Njk2MQ==", "bodyText": "do you need to pass name back? you already have this in the calling method?", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r448896961", "createdAt": "2020-07-02T10:12:20Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/management-console/src/utils/Utils.tsx", "diffHunk": "@@ -87,68 +87,50 @@ export const setTitle = (\n };\n \n export const handleSkip = (\n-  processInstanceData: Pick<\n+  processInstance: Pick<\n     ProcessInstance,\n-    'id' | 'processId' | 'serviceUrl' | 'state'\n+    'id' | 'processId' | 'serviceUrl' | 'state' | 'processName'\n   >,\n-  setModalTitle: (modalTitle: string) => void,\n-  setTitleType: (titleType: string) => void,\n-  setModalContent: (modalContent: string) => void,\n-  handleSkipModalToggle: () => void\n+  node: Pick<GraphQL.NodeInstance, 'name'>,\n+  onSkipSuccess: (name: string) => void,\n+  onSkipFailure: (name: string, errorMessage: string) => void\n ): void => {\n-  setModalTitle('Skip operation');\n   axios\n     .post(\n-      `${processInstanceData.serviceUrl}/management/processes/${processInstanceData.processId}/instances/${processInstanceData.id}/skip`\n+      `${processInstance.serviceUrl}/management/processes/${processInstance.processId}/instances/${processInstance.id}/skip`\n     )\n     .then(() => {\n-      setTitleType('success');\n-      setModalContent(\n-        'Process execution has successfully skipped node which was in error state.'\n-      );\n-      handleSkipModalToggle();\n+      onSkipSuccess(node ? node.name : processInstance.processName);\n     })\n     .catch(error => {\n-      setTitleType('failure');\n-      setModalContent(\n-        `Process execution failed to skip node which is in error state. Message: ${JSON.stringify(\n-          error.message\n-        )}`\n+      onSkipFailure(\n+        node ? node.name : processInstance.processName,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e82b7f05c999b55ac6af991eaf2d955b9e8bed74"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODg5Nzc4NQ==", "bodyText": "shouldn't need the name here, its available in the calling method.", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r448897785", "createdAt": "2020-07-02T10:13:59Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/management-console/src/utils/Utils.tsx", "diffHunk": "@@ -87,68 +87,50 @@ export const setTitle = (\n };\n \n export const handleSkip = (\n-  processInstanceData: Pick<\n+  processInstance: Pick<\n     ProcessInstance,\n-    'id' | 'processId' | 'serviceUrl' | 'state'\n+    'id' | 'processId' | 'serviceUrl' | 'state' | 'processName'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e82b7f05c999b55ac6af991eaf2d955b9e8bed74"}, "originalPosition": 8}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNTQ5OTE2", "url": "https://github.com/kiegroup/kogito-apps/pull/283#pullrequestreview-441549916", "createdAt": "2020-07-02T10:26:47Z", "commit": {"oid": "e82b7f05c999b55ac6af991eaf2d955b9e8bed74"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDoyNjo0N1rOGsG9XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMDoyNjo0N1rOGsG9XQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODkwNDU0MQ==", "bodyText": "missing to pass the error message here?", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r448904541", "createdAt": "2020-07-02T10:26:47Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/management-console/src/utils/Utils.tsx", "diffHunk": "@@ -182,25 +159,23 @@ export const handleAbort = (\n     });\n };\n \n-export const isModalOpen = (\n-  modalTitle,\n-  isSkipModalOpen,\n-  isRetryModalOpen\n-): boolean => {\n-  if (modalTitle === 'Skip operation') {\n-    return isSkipModalOpen;\n-  } else if (modalTitle === 'Retry operation') {\n-    return isRetryModalOpen;\n-  }\n-};\n-export const modalToggle = (\n-  modalTitle,\n-  handleSkipModalToggle,\n-  handleRetryModalToggle\n-): (() => void) => {\n-  if (modalTitle === 'Skip operation') {\n-    return handleSkipModalToggle;\n-  } else if (modalTitle === 'Retry operation') {\n-    return handleRetryModalToggle;\n-  }\n+export const handleNodeInstanceRetrigger = (\n+  processInstance: Pick<\n+    ProcessInstance,\n+    'id' | 'nodes' | 'addons' | 'error' | 'serviceUrl' | 'processId' | 'state'\n+  >,\n+  node: Pick<GraphQL.NodeInstance, 'id'>,\n+  onRetriggerSuccess,\n+  onRetriggerFailure\n+) => {\n+  axios\n+    .post(\n+      `${processInstance.serviceUrl}/management/processes/${processInstance.processId}/instances/${processInstance.id}/nodeInstances/${node.id}`\n+    )\n+    .then(() => {\n+      onRetriggerSuccess();\n+    })\n+    .catch(() => {\n+      onRetriggerFailure();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e82b7f05c999b55ac6af991eaf2d955b9e8bed74"}, "originalPosition": 150}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e82b7f05c999b55ac6af991eaf2d955b9e8bed74", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/e82b7f05c999b55ac6af991eaf2d955b9e8bed74", "committedDate": "2020-07-02T07:49:59Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}, "afterCommit": {"oid": "ca09b68cce3844ec0772b08c3e0f784850f7cc2b", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/ca09b68cce3844ec0772b08c3e0f784850f7cc2b", "committedDate": "2020-07-02T12:17:49Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxNjU3NTIz", "url": "https://github.com/kiegroup/kogito-apps/pull/283#pullrequestreview-441657523", "createdAt": "2020-07-02T13:04:47Z", "commit": {"oid": "ca09b68cce3844ec0772b08c3e0f784850f7cc2b"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxMzowNDo0N1rOGsL8Vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNTowNTowMFrOGsQ8lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODk4NjE5OA==", "bodyText": "please remove unsued code :)", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r448986198", "createdAt": "2020-07-02T13:04:47Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/management-console/src/components/Molecules/ProcessListTableItems/ProcessListTableItems.tsx", "diffHunk": "@@ -104,6 +103,44 @@ const ProcessListTableItems: React.FC<IOwnProps> = ({\n     setisOpen(_isOpen);\n   };\n \n+  const onAction = (title: string, content: string, type: string): void => {\n+    setTitleType(type);\n+    setModalTitle(title);\n+    setModalContent(content);\n+    handleModalToggle();\n+  };\n+\n+  // const onRetrySuccess = (name: string): void => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca09b68cce3844ec0772b08c3e0f784850f7cc2b"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA2MDAwMA==", "bodyText": "@AjayJagan you can get these functions pushed back. If you have in here lets say:\nonRetryClick and onSkipClick, then all popup and messages get centralized into ProcessListTableItems  wdyt?", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r449060000", "createdAt": "2020-07-02T14:53:03Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/management-console/src/components/Atoms/ErrorPopover/ErrorPopover.tsx", "diffHunk": "@@ -1,27 +1,24 @@\n import React from 'react';\n import { Popover, Button } from '@patternfly/react-core';\n import {\n-  handleSkip,\n   handleRetry,\n-  stateIconCreator\n+  stateIconCreator,\n+  handleSkip\n } from '../../../utils/Utils';\n import { GraphQL } from '@kogito-apps/common';\n import ProcessInstance = GraphQL.ProcessInstance;\n+\n+enum TitleType {\n+  SUCCESS = 'success',\n+  FAILURE = 'failure'\n+}\n interface IOwnProps {\n   processInstanceData: ProcessInstance;\n-  setModalTitle: (modalTitle: string) => void;\n-  setTitleType: (titleType: string) => void;\n-  setModalContent: (modalContent: string) => void;\n-  handleRetryModalToggle: () => void;\n-  handleSkipModalToggle: () => void;\n+  onAction: (title: string, content: string, type: TitleType) => void;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca09b68cce3844ec0772b08c3e0f784850f7cc2b"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTA2ODE4Mg==", "bodyText": "@AjayJagan could we have a more meaningful name for this function?", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r449068182", "createdAt": "2020-07-02T15:05:00Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/management-console/src/components/Molecules/ProcessListTableItems/ProcessListTableItems.tsx", "diffHunk": "@@ -104,6 +103,44 @@ const ProcessListTableItems: React.FC<IOwnProps> = ({\n     setisOpen(_isOpen);\n   };\n \n+  const onAction = (title: string, content: string, type: string): void => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ca09b68cce3844ec0772b08c3e0f784850f7cc2b"}, "originalPosition": 50}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ca09b68cce3844ec0772b08c3e0f784850f7cc2b", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/ca09b68cce3844ec0772b08c3e0f784850f7cc2b", "committedDate": "2020-07-02T12:17:49Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}, "afterCommit": {"oid": "a1b539ba52d17488cd758db80684018a98f344fd", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/a1b539ba52d17488cd758db80684018a98f344fd", "committedDate": "2020-07-02T15:52:47Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxODI1MjA3", "url": "https://github.com/kiegroup/kogito-apps/pull/283#pullrequestreview-441825207", "createdAt": "2020-07-02T15:56:12Z", "commit": {"oid": "a1b539ba52d17488cd758db80684018a98f344fd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNTo1NjoxM1rOGsT1Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQxNTo1NjoxM1rOGsT1Sw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTExNTQ2Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                type: string\n          \n          \n            \n                type: TitleType", "url": "https://github.com/kiegroup/kogito-apps/pull/283#discussion_r449115467", "createdAt": "2020-07-02T15:56:13Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/management-console/src/components/Molecules/ProcessListTableItems/ProcessListTableItems.tsx", "diffHunk": "@@ -104,6 +103,50 @@ const ProcessListTableItems: React.FC<IOwnProps> = ({\n     setisOpen(_isOpen);\n   };\n \n+  const onShowMessage = (\n+    title: string,\n+    content: string,\n+    type: string", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1b539ba52d17488cd758db80684018a98f344fd"}, "originalPosition": 53}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a1b539ba52d17488cd758db80684018a98f344fd", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/a1b539ba52d17488cd758db80684018a98f344fd", "committedDate": "2020-07-02T15:52:47Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}, "afterCommit": {"oid": "ed83458a3fa6adbb454393111bd52054b6a72a43", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/ed83458a3fa6adbb454393111bd52054b6a72a43", "committedDate": "2020-07-02T16:00:59Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxODU5ODc0", "url": "https://github.com/kiegroup/kogito-apps/pull/283#pullrequestreview-441859874", "createdAt": "2020-07-02T16:40:46Z", "commit": {"oid": "34648553b9665ce741f62e83e12a2d5e4f0a984e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f309094f63d1296e4ea4f73fb697f00dec15a004", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/f309094f63d1296e4ea4f73fb697f00dec15a004", "committedDate": "2020-07-02T16:49:15Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ed83458a3fa6adbb454393111bd52054b6a72a43", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/ed83458a3fa6adbb454393111bd52054b6a72a43", "committedDate": "2020-07-02T16:00:59Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}, "afterCommit": {"oid": "f309094f63d1296e4ea4f73fb697f00dec15a004", "author": {"user": {"login": "AjayJagan", "name": "Ajay Jaganathan"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/f309094f63d1296e4ea4f73fb697f00dec15a004", "committedDate": "2020-07-02T16:49:15Z", "message": "KOGITO-1139 Add node retrigger action in process instance timeline"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxODcwNjkw", "url": "https://github.com/kiegroup/kogito-apps/pull/283#pullrequestreview-441870690", "createdAt": "2020-07-02T16:56:02Z", "commit": {"oid": "f309094f63d1296e4ea4f73fb697f00dec15a004"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxODc0NTk2", "url": "https://github.com/kiegroup/kogito-apps/pull/283#pullrequestreview-441874596", "createdAt": "2020-07-02T17:01:43Z", "commit": {"oid": "f309094f63d1296e4ea4f73fb697f00dec15a004"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQxODc3MDI3", "url": "https://github.com/kiegroup/kogito-apps/pull/283#pullrequestreview-441877027", "createdAt": "2020-07-02T17:05:15Z", "commit": {"oid": "f309094f63d1296e4ea4f73fb697f00dec15a004"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 148, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}