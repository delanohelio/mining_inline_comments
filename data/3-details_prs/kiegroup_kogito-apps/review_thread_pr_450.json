{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgyMjc2MzQ5", "number": 450, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDo1MTo1NVrOEjEcgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMTowMjoxOFrOEjEqHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjA4NDUwOnYy", "diffSide": "RIGHT", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/BaseEventConsumer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMDo1MTo1NVrOHROT_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQyMDowMTozM1rOHRklDg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgyMjMzNQ==", "bodyText": "What about refactor getCloudEventType() to return TypeReference<E>?\nObjectMapper can be specified as constructor parameter and then you can move deserialization logic here and isolate business logic for subclasses like:\n    protected abstract void internalHandleCloudEvent(final CloudEvent cloudEvent, final E payload);\n\n    protected abstract void handleCloudEvent(final CloudEvent cloudEvent) {\n        final E payload;\n        try {\n            payload = mapper.readValue(cloudEvent.getData(), getCloudEventType());\n        } catch (IOException e) {\n            LOG.error(\"Unable to deserialize CloudEvent data as \" + getCloudEventType().getName(), e);\n            return;\n        }\n        if (event == null) {\n            LOG.error(\"Received CloudEvent with id {} from {} with empty data\", cloudEvent.getId(), cloudEvent.getSource());\n            return;\n        }\n\n        LOG.debug(\"Received CloudEvent with id {} from {}\", cloudEvent.getId(), cloudEvent.getSource());\n\n        internalHandleCloudEvent(cloudEvent, payload);\n    }", "url": "https://github.com/kiegroup/kogito-apps/pull/450#discussion_r487822335", "createdAt": "2020-09-14T10:51:55Z", "author": {"login": "danielezonca"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/BaseEventConsumer.java", "diffHunk": "@@ -50,16 +49,14 @@ public BaseEventConsumer(final TrustyService service) {\n         return message.ack();\n     }\n \n-    protected Optional<CloudEventImpl<E>> decodeCloudEvent(final String payload) {\n+    protected Optional<CloudEvent> decodeCloudEvent(final String payload) {\n         try {\n-            return Optional.of(CloudEventUtils.decode(payload, getCloudEventType()));\n+            return Optional.of(CloudEventUtils.decode(payload));\n         } catch (IllegalStateException e) {\n             LOG.error(String.format(\"Can't decode message to CloudEvent: %s\", payload), e);\n             return Optional.empty();\n         }\n     }\n \n-    protected abstract TypeReference<CloudEventImpl<E>> getCloudEventType();\n-\n-    protected abstract void handleCloudEvent(final CloudEventImpl<E> cloudEvent);\n+    protected abstract void handleCloudEvent(final CloudEvent cloudEvent);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e794c16e87e81d2f0512af1af8a2384633ed4b20"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4ODE4NzE1MA==", "bodyText": "Done, thanks for the suggestion", "url": "https://github.com/kiegroup/kogito-apps/pull/450#discussion_r488187150", "createdAt": "2020-09-14T20:01:33Z", "author": {"login": "ruromero"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/BaseEventConsumer.java", "diffHunk": "@@ -50,16 +49,14 @@ public BaseEventConsumer(final TrustyService service) {\n         return message.ack();\n     }\n \n-    protected Optional<CloudEventImpl<E>> decodeCloudEvent(final String payload) {\n+    protected Optional<CloudEvent> decodeCloudEvent(final String payload) {\n         try {\n-            return Optional.of(CloudEventUtils.decode(payload, getCloudEventType()));\n+            return Optional.of(CloudEventUtils.decode(payload));\n         } catch (IllegalStateException e) {\n             LOG.error(String.format(\"Can't decode message to CloudEvent: %s\", payload), e);\n             return Optional.empty();\n         }\n     }\n \n-    protected abstract TypeReference<CloudEventImpl<E>> getCloudEventType();\n-\n-    protected abstract void handleCloudEvent(final CloudEventImpl<E> cloudEvent);\n+    protected abstract void handleCloudEvent(final CloudEvent cloudEvent);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgyMjMzNQ=="}, "originalCommit": {"oid": "e794c16e87e81d2f0512af1af8a2384633ed4b20"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjExODE0OnYy", "diffSide": "RIGHT", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/incoming/ExplainabilityResultConsumer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMTowMTo1OVrOHROn-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMTowMTo1OVrOHROn-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgyNzQ1MA==", "bodyText": "Please do not mix injection on field and on constructor: move all the injection to constructor", "url": "https://github.com/kiegroup/kogito-apps/pull/450#discussion_r487827450", "createdAt": "2020-09-14T11:01:59Z", "author": {"login": "danielezonca"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/incoming/ExplainabilityResultConsumer.java", "diffHunk": "@@ -46,17 +44,17 @@\n import org.slf4j.LoggerFactory;\n \n @ApplicationScoped\n-public class ExplainabilityResultConsumer extends BaseEventConsumer<ExplainabilityResultDto> {\n+public class ExplainabilityResultConsumer extends BaseEventConsumer {\n \n     private static final Logger LOGGER = LoggerFactory.getLogger(ExplainabilityResultConsumer.class);\n \n-    private static final TypeReference<CloudEventImpl<ExplainabilityResultDto>> CLOUD_EVENT_TYPE = new TypeReference<>() {\n-    };\n-\n     private ExplainabilityResultConsumer() {\n         //CDI proxy\n     }\n \n+    @Inject\n+    ObjectMapper mapper;\n+\n     @Inject\n     public ExplainabilityResultConsumer(TrustyService service) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e794c16e87e81d2f0512af1af8a2384633ed4b20"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjExODg4OnYy", "diffSide": "RIGHT", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/incoming/ModelEventConsumer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMTowMjoxMVrOHROoag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMTowMjoxMVrOHROoag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgyNzU2Mg==", "bodyText": "Please do not mix injection on field and on constructor: move all the injection to constructor", "url": "https://github.com/kiegroup/kogito-apps/pull/450#discussion_r487827562", "createdAt": "2020-09-14T11:02:11Z", "author": {"login": "danielezonca"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/incoming/ModelEventConsumer.java", "diffHunk": "@@ -33,15 +31,15 @@\n import org.kie.kogito.trusty.service.messaging.BaseEventConsumer;\n \n @ApplicationScoped\n-public class ModelEventConsumer extends BaseEventConsumer<ModelEvent> {\n-\n-    private static final TypeReference<CloudEventImpl<ModelEvent>> CLOUD_EVENT_TYPE_REF = new TypeReference<>() {\n-    };\n+public class ModelEventConsumer extends BaseEventConsumer {\n \n     private  ModelEventConsumer() {\n         //CDI proxy\n     }\n \n+    @Inject\n+    ObjectMapper mapper;\n+\n     @Inject", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e794c16e87e81d2f0512af1af8a2384633ed4b20"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA1MjExOTM0OnYy", "diffSide": "RIGHT", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/incoming/TraceEventConsumer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMTowMjoxOFrOHROoqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xNFQxMTowMjoxOFrOHROoqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NzgyNzYyNw==", "bodyText": "Please do not mix injection on field and on constructor: move all the injection to constructor", "url": "https://github.com/kiegroup/kogito-apps/pull/450#discussion_r487827627", "createdAt": "2020-09-14T11:02:18Z", "author": {"login": "danielezonca"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/incoming/TraceEventConsumer.java", "diffHunk": "@@ -33,15 +31,15 @@\n import org.kie.kogito.trusty.service.messaging.BaseEventConsumer;\n \n @ApplicationScoped\n-public class TraceEventConsumer extends BaseEventConsumer<TraceEvent> {\n-\n-    private static final TypeReference<CloudEventImpl<TraceEvent>> CLOUD_EVENT_TYPE_REF = new TypeReference<>() {\n-    };\n+public class TraceEventConsumer extends BaseEventConsumer {\n \n     private TraceEventConsumer() {\n         //CDI proxy\n     }\n \n+    @Inject\n+    ObjectMapper mapper;\n+\n     @Inject", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e794c16e87e81d2f0512af1af8a2384633ed4b20"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 704, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}