{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDUzMjc0OTMx", "number": 330, "title": "KOGITO-2775 Add trustyAI audit overview section", "bodyText": "Link to jira ticket: KOGITO-2775\nThis PR adds the code for the audit overview section of trustyAI.\nPlease make sure that your PR meets the following requirements:\n\n You have read the contributors guide\n Pull Request title is properly formatted: KOGITO-XYZ Subject\n Pull Request title contains the target branch if not targeting master: [0.9.x] KOGITO-XYZ Subject\n Pull Request contains link to the JIRA issue\n Pull Request contains link to any dependent or related Pull Request\n Pull Request contains description of the issue\n Pull Request does not include fixes for issues other than the main ticket", "createdAt": "2020-07-20T09:58:02Z", "url": "https://github.com/kiegroup/kogito-apps/pull/330", "merged": true, "mergeCommit": {"oid": "a2d7b60256dc6be6286045a42c18a14fd8e5a86b"}, "closed": true, "closedAt": "2020-08-17T15:08:10Z", "author": {"login": "kelvah"}, "timelineItems": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3D3RMAFqTQ1MjMwMDc2Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABc-LGGGAFqTQ2NTg5NTI2NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDUyMzAwNzY2", "url": "https://github.com/kiegroup/kogito-apps/pull/330#pullrequestreview-452300766", "createdAt": "2020-07-21T09:51:34Z", "commit": {"oid": "3dd8f022f1f9edf6e983b61badae2610217658ad"}, "state": "COMMENTED", "comments": {"totalCount": 18, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwOTo1MTozNFrOG0wnYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQxMDozNzoxN1rOG0yJnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk3NTY1MA==", "bodyText": "indent level is 2 spaces in the rest of js files, please keep it that way also here.", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r457975650", "createdAt": "2020-07-21T09:51:34Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/trusty/api-mock/mocks/inputData.js", "diffHunk": "@@ -0,0 +1,282 @@\n+const inputData = [", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dd8f022f1f9edf6e983b61badae2610217658ad"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk3NjU0OA==", "bodyText": "how many of these will be there? would it be worth introducing a 'reader' method forgetting the DMN contents from separate files and keeping those separately?", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r457976548", "createdAt": "2020-07-21T09:53:14Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/trusty/api-mock/mocks/modelData.js", "diffHunk": "@@ -0,0 +1,303 @@\n+const executionIdBase = require(\"./executionIdBase\");\n+const DMN_1 = `", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dd8f022f1f9edf6e983b61badae2610217658ad"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk3ODAwMg==", "bodyText": "please adapt to #329", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r457978002", "createdAt": "2020-07-21T09:55:34Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/trusty/package.json", "diffHunk": "@@ -4,20 +4,28 @@\n   \"main\": \"index.js\",\n   \"author\": \"\",\n   \"license\": \"Apache-2.0\",\n-\n   \"repository\": {\n     \"type\": \"git\",\n     \"url\": \"https://github.com/kiegroup/kogito-apps.git\"\n   },\n   \"dependencies\": {\n     \"@kogito-apps/common\": \"1.0.0\",\n-    \"@types/react\": \"16.9.0\",\n-    \"node-sass\": \"4.14.1\"\n+    \"@testing-library/react\": \"^10.4.7\",\n+    \"@testing-library/react-hooks\": \"^3.3.0\",\n+    \"date-fns\": \"^2.14.0\",\n+    \"flatpickr\": \"^4.6.3\",\n+    \"sass\": \"^1.26.10\",\n+    \"sass-loader\": \"^9.0.2\"\n   },\n   \"scripts\": {\n+    \"build:prod\": \"yarn run lint && webpack --config webpack.prod.js && yarn run test:coverage\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dd8f022f1f9edf6e983b61badae2610217658ad"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk3ODg1NQ==", "bodyText": "what's the plan for UI e2e testing? to keep things in sync I'd argue for cypress - integration can be added in a separate PR.", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r457978855", "createdAt": "2020-07-21T09:56:59Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/trusty/package.json", "diffHunk": "@@ -4,20 +4,28 @@\n   \"main\": \"index.js\",\n   \"author\": \"\",\n   \"license\": \"Apache-2.0\",\n-\n   \"repository\": {\n     \"type\": \"git\",\n     \"url\": \"https://github.com/kiegroup/kogito-apps.git\"\n   },\n   \"dependencies\": {\n     \"@kogito-apps/common\": \"1.0.0\",\n-    \"@types/react\": \"16.9.0\",\n-    \"node-sass\": \"4.14.1\"\n+    \"@testing-library/react\": \"^10.4.7\",\n+    \"@testing-library/react-hooks\": \"^3.3.0\",\n+    \"date-fns\": \"^2.14.0\",\n+    \"flatpickr\": \"^4.6.3\",\n+    \"sass\": \"^1.26.10\",\n+    \"sass-loader\": \"^9.0.2\"\n   },\n   \"scripts\": {\n+    \"build:prod\": \"yarn run lint && webpack --config webpack.prod.js && yarn run test:coverage\",\n+    \"lint\": \"tslint -c ./tslint.json --project . './src/**/*.ts{,x}'\",\n+    \"mock-server\": \"json-server --watch api-mock/db.js --routes api-mock/routes.json --port 1336 --delay 1000 --id executionId --middlewares api-mock/filterSingular.js\",\n     \"start\": \"webpack-dev-server --hot --color --progress --info=true --config webpack.dev.js\",\n-    \"build:prod\": \"yarn run lint && webpack --config webpack.prod.js\",\n-    \"lint\": \"tslint -c ./tslint.json --project . './src/**/*.ts{,x}'\"\n+    \"test\": \"jest --runInBand --ci --reporters=default --reporters=jest-junit\",\n+    \"test:coverage\": \"yarn run test --coverage\",\n+    \"test:report\": \"yarn run test --ci --reporters=jest-junit\",\n+    \"test:watch\": \"yarn run test --watch\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dd8f022f1f9edf6e983b61badae2610217658ad"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk3OTc4Mw==", "bodyText": "Please reach to me whenever you have time regarding the UI testing and writing testable components.", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r457979783", "createdAt": "2020-07-21T09:58:34Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/trusty/src/components/Atoms/ExecutionStatus/ExecutionStatus.tsx", "diffHunk": "@@ -0,0 +1,30 @@\n+import { CheckCircleIcon, ErrorCircleOIcon } from '@patternfly/react-icons';\n+import React from 'react';\n+import './ExecutionStatus.scss';\n+\n+type ExecutionStatusProps = {\n+  result: boolean;\n+};\n+\n+const ExecutionStatus = (props: ExecutionStatusProps) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dd8f022f1f9edf6e983b61badae2610217658ad"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk4Mjc3Ng==", "bodyText": "this is new to me, I've usually seen\nconst FormattedDate: React.FC<FormattedDateProps> = ({date, preposition, position, fullDateAndTime}) => {\n\n}\n\nwhich I find more organized, is there some advantage of the approach here?", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r457982776", "createdAt": "2020-07-21T10:03:48Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/trusty/src/components/Atoms/FormattedDate/FormattedDate.tsx", "diffHunk": "@@ -0,0 +1,48 @@\n+import React from 'react';\n+import { differenceInDays, format, formatDistanceToNowStrict } from 'date-fns';\n+import { Tooltip } from '@patternfly/react-core';\n+import { TooltipProps } from '@patternfly/react-core/dist/js/components/Tooltip/Tooltip';\n+\n+type FormattedDateProps = {\n+  date: string;\n+  preposition?: boolean;\n+  position?: TooltipProps['position'];\n+  fullDateAndTime?: boolean;\n+};\n+\n+const FormattedDate = (props: FormattedDateProps) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dd8f022f1f9edf6e983b61badae2610217658ad"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk4NTI2Nw==", "bodyText": "please try to refrain from having multiple return statements.", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r457985267", "createdAt": "2020-07-21T10:08:32Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/trusty/src/components/Atoms/FormattedDate/FormattedDate.tsx", "diffHunk": "@@ -0,0 +1,48 @@\n+import React from 'react';\n+import { differenceInDays, format, formatDistanceToNowStrict } from 'date-fns';\n+import { Tooltip } from '@patternfly/react-core';\n+import { TooltipProps } from '@patternfly/react-core/dist/js/components/Tooltip/Tooltip';\n+\n+type FormattedDateProps = {\n+  date: string;\n+  preposition?: boolean;\n+  position?: TooltipProps['position'];\n+  fullDateAndTime?: boolean;\n+};\n+\n+const FormattedDate = (props: FormattedDateProps) => {\n+  const {\n+    date,\n+    preposition = false,\n+    position = 'auto',\n+    fullDateAndTime = false\n+  } = props;\n+  const difference = differenceInDays(new Date(date), new Date());\n+  const fullFormattedDate = format(new Date(date), 'PPpp');\n+  let formattedDate;\n+\n+  if (fullDateAndTime) {\n+    return <span>{fullFormattedDate}</span>;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dd8f022f1f9edf6e983b61badae2610217658ad"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk4NTcyMg==", "bodyText": "no snapshot for the component?", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r457985722", "createdAt": "2020-07-21T10:09:21Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/trusty/src/components/Atoms/FormattedDate/tests/FormattedDate.test.tsx", "diffHunk": "@@ -0,0 +1,41 @@\n+import React from 'react';\n+import { shallow } from 'enzyme';\n+import FormattedDate from '../FormattedDate';\n+import { format } from 'date-fns';\n+\n+describe('FormattedDate', () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dd8f022f1f9edf6e983b61badae2610217658ad"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk4NjgwMQ==", "bodyText": "I'd argue for keeping the top part of the component definition for props and component definition, can you move this either below or elsewhere?", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r457986801", "createdAt": "2020-07-21T10:11:20Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/trusty/src/components/Molecules/DatePicker/DatePicker.tsx", "diffHunk": "@@ -0,0 +1,71 @@\n+import React, { useEffect, useRef } from 'react';\n+import { InputGroup, TextInput } from '@patternfly/react-core';\n+import flatpickr from 'flatpickr';\n+import { Instance as flatpickrInstance } from 'flatpickr/dist/types/instance';\n+import './DatePicker.scss';\n+\n+flatpickr.l10ns.en.weekdays.shorthand.forEach((day, index, daysArray) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dd8f022f1f9edf6e983b61badae2610217658ad"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MDQ3MA==", "bodyText": "can't this be rather a component? otherwise I would expect for the file not to be placed under components (at least not having a separate skeletonRows folder there)", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r457990470", "createdAt": "2020-07-21T10:17:53Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/trusty/src/components/Molecules/skeletonRows/skeletonRows.tsx", "diffHunk": "@@ -0,0 +1,35 @@\n+import React from 'react';\n+import { IRow } from '@patternfly/react-table';\n+import SkeletonStripe from './../../Atoms/SkeletonStripe/SkeletonStripe';\n+\n+/*\n+ * Based on a number of rows and columns, this function creates an array specifically intended\n+ * for the Patternfly Table component. Feeding the skeletons array to the table rows prop,\n+ * it will produce animated stripes to be displayed while loading real data\n+ * */\n+\n+const skeletonRows = (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dd8f022f1f9edf6e983b61badae2610217658ad"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MTE0NQ==", "bodyText": "previously the props were type, now interface, is there anything preventing us from unifying?", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r457991145", "createdAt": "2020-07-21T10:19:06Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/trusty/src/components/Organisms/AuditToolbar/AuditToolbar.tsx", "diffHunk": "@@ -0,0 +1,152 @@\n+import React, { useRef } from 'react';\n+import {\n+  Button,\n+  ButtonVariant,\n+  DataToolbar,\n+  DataToolbarContent,\n+  DataToolbarItem,\n+  DataToolbarItemVariant,\n+  InputGroup,\n+  TextInput\n+} from '@patternfly/react-core';\n+import { SearchIcon, SyncIcon } from '@patternfly/react-icons';\n+import PaginationContainer from '../PaginationContainer/PaginationContainer';\n+import DatePicker from '../../Molecules/DatePicker/DatePicker';\n+\n+interface AuditToolbarBaseProps {\n+  page: number;\n+  pageSize: number;\n+  setPage: (page: number) => void;\n+  setPageSize: (pageSize: number) => void;\n+  total: number;\n+}\n+\n+interface AuditToolbarCompleteProps extends AuditToolbarBaseProps {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dd8f022f1f9edf6e983b61badae2610217658ad"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5MzEwNw==", "bodyText": "you could instead use\nconst wrapper = mount(<AuditToolbarTop {...{...defaultProps, onRefresh}}/>);\n\nand get rid of the renderAuditToolbarTop", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r457993107", "createdAt": "2020-07-21T10:22:40Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/trusty/src/components/Organisms/AuditToolbar/tests/AuditToolbarTop.test.tsx", "diffHunk": "@@ -0,0 +1,103 @@\n+import React from 'react';\n+import { AuditToolbarTop } from '../AuditToolbar';\n+import { mount, shallow } from 'enzyme';\n+\n+describe('Audit top toolbar', () => {\n+  test('renders correctly', () => {\n+    const wrapper = renderAuditToolbarTop('shallow');\n+    expect(wrapper).toMatchSnapshot();\n+  });\n+\n+  test('allows search by ID', () => {\n+    const setSearchString = jest.fn();\n+    const searchString = '12345';\n+    const wrapper = renderAuditToolbarTop('mount', { setSearchString });\n+    const searchInput = wrapper.find('input#audit-search-input');\n+    const searchButton = wrapper.find('button#audit-search');\n+    const inputNode = searchInput.getDOMNode<HTMLInputElement>();\n+\n+    inputNode.value = searchString;\n+    searchButton.simulate('click');\n+\n+    expect(setSearchString).toBeCalledTimes(1);\n+    expect(setSearchString).toBeCalledWith(searchString);\n+\n+    // @ts-ignore\n+    searchInput.props().onKeyDown({ key: 'Enter', keyCode: 13, which: 13 });\n+\n+    expect(setSearchString).toBeCalledTimes(2);\n+    expect(setSearchString).toBeCalledWith(searchString);\n+  });\n+\n+  test('handles from date filter', () => {\n+    const setFromDate = jest.fn();\n+    const fromDate = '2020-02-01';\n+    const wrapper = renderAuditToolbarTop('mount', { setFromDate });\n+\n+    wrapper.props().setFromDate(fromDate);\n+\n+    expect(setFromDate).toBeCalledTimes(1);\n+    expect(setFromDate).toBeCalledWith(fromDate);\n+  });\n+\n+  test('handles to date filter', () => {\n+    const setToDate = jest.fn();\n+    const toDate = '2020-04-01';\n+    const wrapper = renderAuditToolbarTop('mount', { setToDate });\n+\n+    wrapper.props().setToDate(toDate);\n+\n+    expect(setToDate).toBeCalledTimes(1);\n+    expect(setToDate).toBeCalledWith(toDate);\n+  });\n+\n+  test('handles pagination', () => {\n+    const setPage = jest.fn();\n+    const setPageSize = jest.fn();\n+    const page = 2;\n+    const pageSize = 50;\n+    const wrapper = renderAuditToolbarTop('mount', {\n+      setPage,\n+      setPageSize\n+    });\n+\n+    wrapper.props().setPage(page);\n+    wrapper.props().setPageSize(pageSize);\n+\n+    expect(setPage).toBeCalledTimes(1);\n+    expect(setPage).toBeCalledWith(page);\n+    expect(setPageSize).toBeCalledTimes(1);\n+    expect(setPageSize).toBeCalledWith(pageSize);\n+  });\n+\n+  test('handles data refresh', () => {\n+    const onRefresh = jest.fn();\n+    const wrapper = renderAuditToolbarTop('mount', { onRefresh });\n+\n+    wrapper.find('button#executions-refresh').simulate('click');\n+\n+    expect(onRefresh).toBeCalledTimes(1);\n+  });\n+});\n+\n+const renderAuditToolbarTop = (method: 'shallow' | 'mount', props?: object) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dd8f022f1f9edf6e983b61badae2610217658ad"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5NDA0OA==", "bodyText": "move component definition to the top of the file", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r457994048", "createdAt": "2020-07-21T10:24:19Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/trusty/src/components/Organisms/ExecutionTable/ExecutionTable.tsx", "diffHunk": "@@ -0,0 +1,158 @@\n+import React from 'react';\n+import { Link } from 'react-router-dom';\n+import { IRow, Table, TableBody, TableHeader } from '@patternfly/react-table';\n+import {\n+  Bullseye,\n+  EmptyState,\n+  EmptyStateBody,\n+  EmptyStateIcon,\n+  Title\n+} from '@patternfly/react-core';\n+import { SearchIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\n+import ExecutionStatus from '../../Atoms/ExecutionStatus/ExecutionStatus';\n+import FormattedDate from '../../Atoms/FormattedDate/FormattedDate';\n+import skeletonRows from '../../Molecules/skeletonRows/skeletonRows';\n+import { IExecution, IExecutions, RemoteData } from '../../../types';\n+\n+type ExecutionTableProps = {\n+  data: RemoteData<Error, IExecutions>;\n+};\n+\n+const prepareExecutionTableRows = (rowData: IExecution[]) => {\n+  const rows: IRow[] = [];\n+\n+  rowData.forEach(item => {\n+    const row: IRow = {};\n+    const cells = [];\n+    cells.push({\n+      title: (\n+        <Link\n+          to={`/audit/${item.executionType.toLocaleLowerCase()}/${\n+            item.executionId\n+          }`}\n+        >\n+          {'#' + item.executionId.toUpperCase()}\n+        </Link>\n+      )\n+    });\n+    cells.push(item.executedModelName);\n+    cells.push(item.executorName);\n+    cells.push({\n+      title: <FormattedDate date={item.executionDate} />\n+    });\n+    cells.push({\n+      title: <ExecutionStatus result={item.executionSucceeded} />\n+    });\n+    row.cells = cells;\n+    row.decisionKey = 'key-' + item.executionId;\n+    rows.push(row);\n+  });\n+  return rows;\n+};\n+\n+const noExecutions = (colSpan: number) => {\n+  return [\n+    {\n+      heightAuto: true,\n+      decisionKey: 'no-results',\n+      cells: [\n+        {\n+          props: { colSpan },\n+          title: (\n+            <Bullseye>\n+              <EmptyState>\n+                <EmptyStateIcon icon={SearchIcon} />\n+                <Title headingLevel=\"h5\" size=\"lg\">\n+                  No executions found\n+                </Title>\n+                <EmptyStateBody>\n+                  No results match the filter criteria. Try removing all\n+                  filters.\n+                </EmptyStateBody>\n+              </EmptyState>\n+            </Bullseye>\n+          )\n+        }\n+      ]\n+    }\n+  ];\n+};\n+\n+const loadingError = (colSpan: number) => {\n+  return [\n+    {\n+      heightAuto: true,\n+      decisionKey: 'no-results',\n+      cells: [\n+        {\n+          props: { colSpan },\n+          title: (\n+            <Bullseye>\n+              <EmptyState>\n+                <EmptyStateIcon icon={ExclamationCircleIcon} color=\"#C9190B\" />\n+                <Title headingLevel=\"h5\" size=\"lg\">\n+                  Loading Error\n+                </Title>\n+                <EmptyStateBody>\n+                  We are unable to load data right now. Try again later.\n+                </EmptyStateBody>\n+              </EmptyState>\n+            </Bullseye>\n+          )\n+        }\n+      ]\n+    }\n+  ];\n+};\n+\n+const ExecutionTable = (props: ExecutionTableProps) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dd8f022f1f9edf6e983b61badae2610217658ad"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5NTM0MA==", "bodyText": "I'd argue to have just a single JSX Table element here and just prepare the columns and rows variables that would be passed there.", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r457995340", "createdAt": "2020-07-21T10:26:33Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/trusty/src/components/Organisms/ExecutionTable/ExecutionTable.tsx", "diffHunk": "@@ -0,0 +1,158 @@\n+import React from 'react';\n+import { Link } from 'react-router-dom';\n+import { IRow, Table, TableBody, TableHeader } from '@patternfly/react-table';\n+import {\n+  Bullseye,\n+  EmptyState,\n+  EmptyStateBody,\n+  EmptyStateIcon,\n+  Title\n+} from '@patternfly/react-core';\n+import { SearchIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\n+import ExecutionStatus from '../../Atoms/ExecutionStatus/ExecutionStatus';\n+import FormattedDate from '../../Atoms/FormattedDate/FormattedDate';\n+import skeletonRows from '../../Molecules/skeletonRows/skeletonRows';\n+import { IExecution, IExecutions, RemoteData } from '../../../types';\n+\n+type ExecutionTableProps = {\n+  data: RemoteData<Error, IExecutions>;\n+};\n+\n+const prepareExecutionTableRows = (rowData: IExecution[]) => {\n+  const rows: IRow[] = [];\n+\n+  rowData.forEach(item => {\n+    const row: IRow = {};\n+    const cells = [];\n+    cells.push({\n+      title: (\n+        <Link\n+          to={`/audit/${item.executionType.toLocaleLowerCase()}/${\n+            item.executionId\n+          }`}\n+        >\n+          {'#' + item.executionId.toUpperCase()}\n+        </Link>\n+      )\n+    });\n+    cells.push(item.executedModelName);\n+    cells.push(item.executorName);\n+    cells.push({\n+      title: <FormattedDate date={item.executionDate} />\n+    });\n+    cells.push({\n+      title: <ExecutionStatus result={item.executionSucceeded} />\n+    });\n+    row.cells = cells;\n+    row.decisionKey = 'key-' + item.executionId;\n+    rows.push(row);\n+  });\n+  return rows;\n+};\n+\n+const noExecutions = (colSpan: number) => {\n+  return [\n+    {\n+      heightAuto: true,\n+      decisionKey: 'no-results',\n+      cells: [\n+        {\n+          props: { colSpan },\n+          title: (\n+            <Bullseye>\n+              <EmptyState>\n+                <EmptyStateIcon icon={SearchIcon} />\n+                <Title headingLevel=\"h5\" size=\"lg\">\n+                  No executions found\n+                </Title>\n+                <EmptyStateBody>\n+                  No results match the filter criteria. Try removing all\n+                  filters.\n+                </EmptyStateBody>\n+              </EmptyState>\n+            </Bullseye>\n+          )\n+        }\n+      ]\n+    }\n+  ];\n+};\n+\n+const loadingError = (colSpan: number) => {\n+  return [\n+    {\n+      heightAuto: true,\n+      decisionKey: 'no-results',\n+      cells: [\n+        {\n+          props: { colSpan },\n+          title: (\n+            <Bullseye>\n+              <EmptyState>\n+                <EmptyStateIcon icon={ExclamationCircleIcon} color=\"#C9190B\" />\n+                <Title headingLevel=\"h5\" size=\"lg\">\n+                  Loading Error\n+                </Title>\n+                <EmptyStateBody>\n+                  We are unable to load data right now. Try again later.\n+                </EmptyStateBody>\n+              </EmptyState>\n+            </Bullseye>\n+          )\n+        }\n+      ]\n+    }\n+  ];\n+};\n+\n+const ExecutionTable = (props: ExecutionTableProps) => {\n+  const { data } = props;\n+  const columns = ['ID', 'Description', 'Executor', 'Date', 'Execution Status'];\n+\n+  return (\n+    <>\n+      {(data.status === 'LOADING' || data.status === 'NOT_ASKED') && (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dd8f022f1f9edf6e983b61badae2610217658ad"}, "originalPosition": 114}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5NjA1MQ==", "bodyText": "can we set the type to the const data declaration already?", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r457996051", "createdAt": "2020-07-21T10:27:50Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/trusty/src/components/Organisms/ExecutionTable/tests/ExecutionTable.test.tsx", "diffHunk": "@@ -0,0 +1,76 @@\n+import React from 'react';\n+import ExecutionTable from '../ExecutionTable';\n+import { shallow } from 'enzyme';\n+import { IExecutions, RemoteData } from '../../../../types';\n+\n+describe('Execution table', () => {\n+  test('renders loading skeletons when the data is not yet fetching', () => {\n+    const data = { status: 'NOT_ASKED' } as RemoteData<Error, IExecutions>;\n+    const wrapper = shallow(<ExecutionTable data={data} />);\n+    expect(wrapper).toMatchSnapshot();\n+  });\n+\n+  test('renders loading skeletons when the data is loading', () => {\n+    const data = { status: 'LOADING' } as RemoteData<Error, IExecutions>;\n+    const wrapper = shallow(<ExecutionTable data={data} />);\n+    expect(wrapper).toMatchSnapshot();\n+  });\n+\n+  test('renders a loading error message when data loading fails', () => {\n+    const data = {\n+      status: 'FAILURE',\n+      error: { name: '', message: '' }\n+    } as RemoteData<Error, IExecutions>;\n+    const wrapper = shallow(<ExecutionTable data={data} />);\n+    expect(wrapper).toMatchSnapshot();\n+  });\n+\n+  test('renders a list of executions', () => {\n+    const data = {\n+      status: 'SUCCESS',\n+      data: {\n+        total: 2,\n+        limit: 10,\n+        offset: 0,\n+        headers: [\n+          {\n+            executionId: 'b2b0ed8d-c1e2-46b5-ad4f-3ac54ff4beae',\n+            executionDate: '2020-06-01T12:33:57+0000',\n+            executionSucceeded: true,\n+            executorName: 'testUser',\n+            executedModelName: 'LoanEligibility',\n+            executionType: 'DECISION'\n+          },\n+          {\n+            executionId: 'b2b0ed8d-c1e2-46b5-ad4f-3hd83kidi4u74',\n+            executionDate: '2020-06-01T12:33:57+0000',\n+            executionSucceeded: true,\n+            executorName: 'testUser',\n+            executedModelName: 'LoanEligibility',\n+            executionType: 'DECISION'\n+          }\n+        ]\n+      }\n+    };\n+    const wrapper = shallow(\n+      <ExecutionTable data={data as RemoteData<Error, IExecutions>} />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dd8f022f1f9edf6e983b61badae2610217658ad"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5NzA5Nw==", "bodyText": "it actually does not render the skeletons, so mount might be needed instead of shallow.", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r457997097", "createdAt": "2020-07-21T10:29:52Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/trusty/src/components/Organisms/ExecutionTable/tests/__snapshots__/ExecutionTable.test.tsx.snap", "diffHunk": "@@ -0,0 +1,834 @@\n+// Jest Snapshot v1, https://goo.gl/fbAQLP\n+\n+exports[`Execution table renders a list of executions 1`] = `\n+<Fragment>\n+  <Component\n+    aria-label=\"Executions list\"\n+    cells={\n+      Array [\n+        \"ID\",\n+        \"Description\",\n+        \"Executor\",\n+        \"Date\",\n+        \"Execution Status\",\n+      ]\n+    }\n+    rows={\n+      Array [\n+        Object {\n+          \"cells\": Array [\n+            Object {\n+              \"title\": <Link\n+                to=\"/audit/decision/b2b0ed8d-c1e2-46b5-ad4f-3ac54ff4beae\"\n+              >\n+                #B2B0ED8D-C1E2-46B5-AD4F-3AC54FF4BEAE\n+              </Link>,\n+            },\n+            \"LoanEligibility\",\n+            \"testUser\",\n+            Object {\n+              \"title\": <FormattedDate\n+                date=\"2020-06-01T12:33:57+0000\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <ExecutionStatus\n+                result={true}\n+              />,\n+            },\n+          ],\n+          \"decisionKey\": \"key-b2b0ed8d-c1e2-46b5-ad4f-3ac54ff4beae\",\n+        },\n+        Object {\n+          \"cells\": Array [\n+            Object {\n+              \"title\": <Link\n+                to=\"/audit/decision/b2b0ed8d-c1e2-46b5-ad4f-3hd83kidi4u74\"\n+              >\n+                #B2B0ED8D-C1E2-46B5-AD4F-3HD83KIDI4U74\n+              </Link>,\n+            },\n+            \"LoanEligibility\",\n+            \"testUser\",\n+            Object {\n+              \"title\": <FormattedDate\n+                date=\"2020-06-01T12:33:57+0000\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <ExecutionStatus\n+                result={true}\n+              />,\n+            },\n+          ],\n+          \"decisionKey\": \"key-b2b0ed8d-c1e2-46b5-ad4f-3hd83kidi4u74\",\n+        },\n+      ]\n+    }\n+  >\n+    <TableHeader />\n+    <TableBody\n+      rowKey=\"decisionKey\"\n+    />\n+  </Component>\n+</Fragment>\n+`;\n+\n+exports[`Execution table renders a loading error message when data loading fails 1`] = `\n+<Fragment>\n+  <Component\n+    aria-label=\"Executions list\"\n+    cells={\n+      Array [\n+        \"ID\",\n+        \"Description\",\n+        \"Executor\",\n+        \"Date\",\n+        \"Execution Status\",\n+      ]\n+    }\n+    rows={\n+      Array [\n+        Object {\n+          \"cells\": Array [\n+            Object {\n+              \"props\": Object {\n+                \"colSpan\": 5,\n+              },\n+              \"title\": <Bullseye>\n+                <EmptyState>\n+                  <EmptyStateIcon\n+                    color=\"#C9190B\"\n+                    icon={[Function]}\n+                  />\n+                  <Title\n+                    headingLevel=\"h5\"\n+                    size=\"lg\"\n+                  >\n+                    Loading Error\n+                  </Title>\n+                  <EmptyStateBody>\n+                    We are unable to load data right now. Try again later.\n+                  </EmptyStateBody>\n+                </EmptyState>\n+              </Bullseye>,\n+            },\n+          ],\n+          \"decisionKey\": \"no-results\",\n+          \"heightAuto\": true,\n+        },\n+      ]\n+    }\n+  >\n+    <TableHeader />\n+    <TableBody\n+      rowKey=\"decisionKey\"\n+    />\n+  </Component>\n+</Fragment>\n+`;\n+\n+exports[`Execution table renders loading skeletons when the data is loading 1`] = `\n+<Fragment>\n+  <Component\n+    aria-label=\"Executions list\"\n+    cells={\n+      Array [\n+        \"ID\",\n+        \"Description\",\n+        \"Executor\",\n+        \"Date\",\n+        \"Execution Status\",\n+      ]\n+    }\n+    rows={\n+      Array [\n+        Object {\n+          \"cells\": Array [\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"md\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"lg\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"md\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"lg\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"md\"\n+              />,\n+            },\n+          ],\n+          \"decisionKey\": \"skeleton-0\",\n+        },\n+        Object {\n+          \"cells\": Array [\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"lg\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"md\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"lg\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"md\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"lg\"\n+              />,\n+            },\n+          ],\n+          \"decisionKey\": \"skeleton-1\",\n+        },\n+        Object {\n+          \"cells\": Array [\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"md\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"lg\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"md\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"lg\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"md\"\n+              />,\n+            },\n+          ],\n+          \"decisionKey\": \"skeleton-2\",\n+        },\n+        Object {\n+          \"cells\": Array [\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"lg\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"md\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"lg\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"md\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"lg\"\n+              />,\n+            },\n+          ],\n+          \"decisionKey\": \"skeleton-3\",\n+        },\n+        Object {\n+          \"cells\": Array [\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"md\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"lg\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"md\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"lg\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"md\"\n+              />,\n+            },\n+          ],\n+          \"decisionKey\": \"skeleton-4\",\n+        },\n+        Object {\n+          \"cells\": Array [\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"lg\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"md\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"lg\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"md\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"lg\"\n+              />,\n+            },\n+          ],\n+          \"decisionKey\": \"skeleton-5\",\n+        },\n+        Object {\n+          \"cells\": Array [\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"md\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"lg\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"md\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"lg\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"md\"\n+              />,\n+            },\n+          ],\n+          \"decisionKey\": \"skeleton-6\",\n+        },\n+        Object {\n+          \"cells\": Array [\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"lg\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"md\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"lg\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"md\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"lg\"\n+              />,\n+            },\n+          ],\n+          \"decisionKey\": \"skeleton-7\",\n+        },\n+        Object {\n+          \"cells\": Array [\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"md\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"lg\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"md\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"lg\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"md\"\n+              />,\n+            },\n+          ],\n+          \"decisionKey\": \"skeleton-8\",\n+        },\n+        Object {\n+          \"cells\": Array [\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"lg\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"md\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"lg\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"md\"\n+              />,\n+            },\n+            Object {\n+              \"title\": <SkeletonStripe\n+                size=\"lg\"\n+              />,\n+            },\n+          ],\n+          \"decisionKey\": \"skeleton-9\",\n+        },\n+      ]\n+    }\n+  >\n+    <TableHeader />\n+    <TableBody", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dd8f022f1f9edf6e983b61badae2610217658ad"}, "originalPosition": 450}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk5OTA1MA==", "bodyText": "probably should end with period.", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r457999050", "createdAt": "2020-07-21T10:33:50Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/trusty/src/components/Templates/AuditOverview/AuditOverview.tsx", "diffHunk": "@@ -0,0 +1,94 @@\n+import React, { useEffect, useState } from 'react';\n+import {\n+  PageSection,\n+  PageSectionVariants,\n+  Text,\n+  TextContent,\n+  Title\n+} from '@patternfly/react-core';\n+import {\n+  AuditToolbarTop,\n+  AuditToolbarBottom\n+} from '../../Organisms/AuditToolbar/AuditToolbar';\n+import ExecutionTable from '../../Organisms/ExecutionTable/ExecutionTable';\n+import useExecutions from './useExecutions';\n+import { formatISO, sub } from 'date-fns';\n+\n+type AuditOverviewProps = {\n+  dateRangePreset?: {\n+    fromDate: string;\n+    toDate: string;\n+  };\n+};\n+\n+const AuditOverview = (props: AuditOverviewProps) => {\n+  const { dateRangePreset } = props;\n+  const toPreset = dateRangePreset\n+    ? dateRangePreset.toDate\n+    : formatISO(new Date(), { representation: 'date' });\n+  const fromPreset = dateRangePreset\n+    ? dateRangePreset.fromDate\n+    : formatISO(sub(new Date(), { months: 1 }), { representation: 'date' });\n+  const [searchString, setSearchString] = useState('');\n+  const [fromDate, setFromDate] = useState(fromPreset);\n+  const [toDate, setToDate] = useState(toPreset);\n+  const [page, setPage] = useState(1);\n+  const [pageSize, setPageSize] = useState(10);\n+  const [total, setTotal] = useState(0);\n+  const { loadExecutions, executions } = useExecutions(\n+    searchString,\n+    fromDate,\n+    toDate,\n+    pageSize,\n+    pageSize * (page - 1)\n+  );\n+\n+  useEffect(() => {\n+    if (executions.status === 'SUCCESS') {\n+      setTotal(executions.data.total);\n+    }\n+  }, [executions]);\n+\n+  return (\n+    <>\n+      <PageSection variant={PageSectionVariants.light}>\n+        <TextContent>\n+          <Title size=\"3xl\" headingLevel=\"h2\">\n+            Audit Investigation\n+          </Title>\n+          <Text component=\"p\">\n+            Here you can retrieve all the available information about past cases", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dd8f022f1f9edf6e983b61badae2610217658ad"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODAwMDc5OQ==", "bodyText": "consider if the snapshot gives sufficient level of detail, if not use mount instead.", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r458000799", "createdAt": "2020-07-21T10:37:17Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/trusty/src/components/Templates/AuditOverview/tests/__snapshots__/AuditOverview.test.tsx.snap", "diffHunk": "@@ -0,0 +1,68 @@\n+// Jest Snapshot v1, https://goo.gl/fbAQLP\n+\n+exports[`Audit overview renders correctly a list of executions 1`] = `\n+<Fragment>\n+  <PageSection\n+    variant=\"light\"\n+  >\n+    <TextContent>\n+      <Title\n+        headingLevel=\"h2\"\n+        size=\"3xl\"\n+      >\n+        Audit Investigation\n+      </Title>\n+      <Text\n+        component=\"p\"\n+      >\n+        Here you can retrieve all the available information about past cases\n+      </Text>\n+    </TextContent>\n+  </PageSection>\n+  <PageSection\n+    isFilled={true}\n+  >\n+    <Component", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3dd8f022f1f9edf6e983b61badae2610217658ad"}, "originalPosition": 25}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "02b34c694c2583d7e52db8b7ba967e5b7cabfe3c", "author": {"user": {"login": "kelvah", "name": "roberto emanuel"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/02b34c694c2583d7e52db8b7ba967e5b7cabfe3c", "committedDate": "2020-07-28T13:02:26Z", "message": "KOGITO-2755 - Imported trusty/audit-overview components"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b401cbf615c9e622f88456222e9d3a1b5a7e8df4", "author": {"user": {"login": "kelvah", "name": "roberto emanuel"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/b401cbf615c9e622f88456222e9d3a1b5a7e8df4", "committedDate": "2020-07-28T13:05:08Z", "message": "KOGITO-2755 - Imported trusty/audit-overview tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0c901ed47038c06d777e45419a3d2942cfb15150", "author": {"user": {"login": "kelvah", "name": "roberto emanuel"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/0c901ed47038c06d777e45419a3d2942cfb15150", "committedDate": "2020-07-28T13:06:03Z", "message": "KOGITO-2775 - Added test for useExecutions custom hook"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a78bc33422f59e1d8b456029f27abc57e97ec4d2", "author": {"user": {"login": "kelvah", "name": "roberto emanuel"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/a78bc33422f59e1d8b456029f27abc57e97ec4d2", "committedDate": "2020-07-28T13:07:43Z", "message": "KOGITO-2775 - Updates following review"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bdad630c0f638ec4e71713a47a73f62c4d7850d2", "author": {"user": {"login": "kelvah", "name": "roberto emanuel"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/bdad630c0f638ec4e71713a47a73f62c4d7850d2", "committedDate": "2020-07-22T09:48:48Z", "message": "KOGITO-2775 - Updates following review"}, "afterCommit": {"oid": "a78bc33422f59e1d8b456029f27abc57e97ec4d2", "author": {"user": {"login": "kelvah", "name": "roberto emanuel"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/a78bc33422f59e1d8b456029f27abc57e97ec4d2", "committedDate": "2020-07-28T13:07:43Z", "message": "KOGITO-2775 - Updates following review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d26e109310bf5abe161a067927dca6f0af0f71d4", "author": {"user": {"login": "kelvah", "name": "roberto emanuel"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/d26e109310bf5abe161a067927dca6f0af0f71d4", "committedDate": "2020-07-28T16:54:28Z", "message": "KOGITO-2775 Added Jest timezone settings and updated snapshots"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU3NDk4OTQz", "url": "https://github.com/kiegroup/kogito-apps/pull/330#pullrequestreview-457498943", "createdAt": "2020-07-29T13:04:31Z", "commit": {"oid": "d26e109310bf5abe161a067927dca6f0af0f71d4"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxMzowNDozMVrOG43aOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxNDoyNzowNVrOG47Gsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI4MTI3Mw==", "bodyText": "You can change this type do \"success\" | \"failure\", for example. <ExecutationStatus result={\"success\"} /> seems more semantic than <ExecutationStatus result={true} />", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r462281273", "createdAt": "2020-07-29T13:04:31Z", "author": {"login": "tiagobento"}, "path": "ui-packages/packages/trusty/src/components/Atoms/ExecutionStatus/ExecutionStatus.tsx", "diffHunk": "@@ -0,0 +1,32 @@\n+import React from 'react';\n+import { CheckCircleIcon, ErrorCircleOIcon } from '@patternfly/react-icons';\n+import './ExecutionStatus.scss';\n+\n+type ExecutionStatusProps = {\n+  result: boolean;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d26e109310bf5abe161a067927dca6f0af0f71d4"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI4NDQ5Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              let className = 'execution-status-badge execution-status-badge--';\n          \n          \n            \n              let statusDescription;\n          \n          \n            \n              let icon;\n          \n          \n            \n              if (result) {\n          \n          \n            \n                className += 'success';\n          \n          \n            \n                statusDescription = 'Completed';\n          \n          \n            \n                icon = <CheckCircleIcon className={className} />;\n          \n          \n            \n              } else {\n          \n          \n            \n                className += 'error';\n          \n          \n            \n                statusDescription = 'Error';\n          \n          \n            \n                icon = <ErrorCircleOIcon className={className} />;\n          \n          \n            \n              }\n          \n          \n            \n            \n          \n          \n            \n              return (\n          \n          \n            \n                <>\n          \n          \n            \n                  {icon}\n          \n          \n            \n                  <span>{statusDescription}</span>\n          \n          \n            \n                </>\n          \n          \n            \n              );\n          \n          \n            \n            };\n          \n          \n            \n              return (\n          \n          \n            \n                <>\n          \n          \n            \n                  {result === \"success\" && <>\n          \n          \n            \n                     <CheckCircleIcon className={'execution-status-badge execution-status-badge--success'} />;\n          \n          \n            \n                     <span>Completed</span>\n          \n          \n            \n                  </>}\n          \n          \n            \n                  {result === \"error\" && <>\n          \n          \n            \n                     <ErrorCircleOIcon className={'execution-status-badge execution-status-badge--error'} />;\n          \n          \n            \n                     <span>Error</span>\n          \n          \n            \n                  </>}\n          \n          \n            \n                </>\n          \n          \n            \n              );\n          \n          \n            \n            };", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r462284493", "createdAt": "2020-07-29T13:09:28Z", "author": {"login": "tiagobento"}, "path": "ui-packages/packages/trusty/src/components/Atoms/ExecutionStatus/ExecutionStatus.tsx", "diffHunk": "@@ -0,0 +1,32 @@\n+import React from 'react';\n+import { CheckCircleIcon, ErrorCircleOIcon } from '@patternfly/react-icons';\n+import './ExecutionStatus.scss';\n+\n+type ExecutionStatusProps = {\n+  result: boolean;\n+};\n+\n+const ExecutionStatus = (props: ExecutionStatusProps) => {\n+  const { result } = props;\n+  let className = 'execution-status-badge execution-status-badge--';\n+  let statusDescription;\n+  let icon;\n+  if (result) {\n+    className += 'success';\n+    statusDescription = 'Completed';\n+    icon = <CheckCircleIcon className={className} />;\n+  } else {\n+    className += 'error';\n+    statusDescription = 'Error';\n+    icon = <ErrorCircleOIcon className={className} />;\n+  }\n+\n+  return (\n+    <>\n+      {icon}\n+      <span>{statusDescription}</span>\n+    </>\n+  );\n+};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d26e109310bf5abe161a067927dca6f0af0f71d4"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI4NTQ2MQ==", "bodyText": "This should be wrapped in a useMemo.", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r462285461", "createdAt": "2020-07-29T13:10:46Z", "author": {"login": "tiagobento"}, "path": "ui-packages/packages/trusty/src/components/Atoms/FormattedDate/FormattedDate.tsx", "diffHunk": "@@ -0,0 +1,50 @@\n+import React from 'react';\n+import { differenceInDays, format, formatDistanceToNowStrict } from 'date-fns';\n+import { Tooltip } from '@patternfly/react-core';\n+import { TooltipProps } from '@patternfly/react-core/dist/js/components/Tooltip/Tooltip';\n+\n+type FormattedDateProps = {\n+  date: string;\n+  preposition?: boolean;\n+  position?: TooltipProps['position'];\n+  fullDateAndTime?: boolean;\n+};\n+\n+const FormattedDate = (props: FormattedDateProps) => {\n+  const {\n+    date,\n+    preposition = false,\n+    position = 'auto',\n+    fullDateAndTime = false\n+  } = props;\n+  const difference = differenceInDays(new Date(date), Date.now());\n+  const fullFormattedDate = format(new Date(date), 'PPpp');\n+  let formattedDate;\n+\n+  if (difference === 0) {\n+    formattedDate = `${formatDistanceToNowStrict(new Date(date))} ago`;\n+  } else {\n+    const prefix = preposition ? 'on ' : '';\n+    formattedDate = `${prefix}${format(new Date(date), 'PP')}`;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d26e109310bf5abe161a067927dca6f0af0f71d4"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI4NTUxMQ==", "bodyText": "This should be wrapped in a useMemo.", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r462285511", "createdAt": "2020-07-29T13:10:50Z", "author": {"login": "tiagobento"}, "path": "ui-packages/packages/trusty/src/components/Atoms/FormattedDate/FormattedDate.tsx", "diffHunk": "@@ -0,0 +1,50 @@\n+import React from 'react';\n+import { differenceInDays, format, formatDistanceToNowStrict } from 'date-fns';\n+import { Tooltip } from '@patternfly/react-core';\n+import { TooltipProps } from '@patternfly/react-core/dist/js/components/Tooltip/Tooltip';\n+\n+type FormattedDateProps = {\n+  date: string;\n+  preposition?: boolean;\n+  position?: TooltipProps['position'];\n+  fullDateAndTime?: boolean;\n+};\n+\n+const FormattedDate = (props: FormattedDateProps) => {\n+  const {\n+    date,\n+    preposition = false,\n+    position = 'auto',\n+    fullDateAndTime = false\n+  } = props;\n+  const difference = differenceInDays(new Date(date), Date.now());\n+  const fullFormattedDate = format(new Date(date), 'PPpp');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d26e109310bf5abe161a067927dca6f0af0f71d4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI4NTU0OQ==", "bodyText": "This should be wrapped in a useMemo.", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r462285549", "createdAt": "2020-07-29T13:10:53Z", "author": {"login": "tiagobento"}, "path": "ui-packages/packages/trusty/src/components/Atoms/FormattedDate/FormattedDate.tsx", "diffHunk": "@@ -0,0 +1,50 @@\n+import React from 'react';\n+import { differenceInDays, format, formatDistanceToNowStrict } from 'date-fns';\n+import { Tooltip } from '@patternfly/react-core';\n+import { TooltipProps } from '@patternfly/react-core/dist/js/components/Tooltip/Tooltip';\n+\n+type FormattedDateProps = {\n+  date: string;\n+  preposition?: boolean;\n+  position?: TooltipProps['position'];\n+  fullDateAndTime?: boolean;\n+};\n+\n+const FormattedDate = (props: FormattedDateProps) => {\n+  const {\n+    date,\n+    preposition = false,\n+    position = 'auto',\n+    fullDateAndTime = false\n+  } = props;\n+  const difference = differenceInDays(new Date(date), Date.now());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d26e109310bf5abe161a067927dca6f0af0f71d4"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI4Njk1Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              const stripeDefaultStyle = {};\n          \n          \n            \n              const stripeStyle = customStyle\n          \n          \n            \n                ? Object.assign(customStyle, stripeDefaultStyle)\n          \n          \n            \n                : stripeDefaultStyle;\n          \n          \n            \n              const stripeStyle = useMemo(() => customStyle ?? {}, [customStyle]);", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r462286953", "createdAt": "2020-07-29T13:12:57Z", "author": {"login": "tiagobento"}, "path": "ui-packages/packages/trusty/src/components/Atoms/SkeletonStripe/SkeletonStripe.tsx", "diffHunk": "@@ -0,0 +1,27 @@\n+import React from 'react';\n+import './SkeletonStripe.scss';\n+\n+type SkeletonStripeProps = {\n+  customStyle?: React.CSSProperties;\n+  isInline?: boolean;\n+  size?: 'sm' | 'md' | 'lg';\n+};\n+\n+const SkeletonStripe = (props: SkeletonStripeProps) => {\n+  const { isInline = false, size = 'sm', customStyle } = props;\n+  const stripeDefaultStyle = {};\n+  const stripeStyle = customStyle\n+    ? Object.assign(customStyle, stripeDefaultStyle)\n+    : stripeDefaultStyle;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d26e109310bf5abe161a067927dca6f0af0f71d4"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI4ODE5OQ==", "bodyText": "This should be wrapped in a useMemo.", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r462288199", "createdAt": "2020-07-29T13:14:52Z", "author": {"login": "tiagobento"}, "path": "ui-packages/packages/trusty/src/components/Atoms/SkeletonStripe/SkeletonStripe.tsx", "diffHunk": "@@ -0,0 +1,27 @@\n+import React from 'react';\n+import './SkeletonStripe.scss';\n+\n+type SkeletonStripeProps = {\n+  customStyle?: React.CSSProperties;\n+  isInline?: boolean;\n+  size?: 'sm' | 'md' | 'lg';\n+};\n+\n+const SkeletonStripe = (props: SkeletonStripeProps) => {\n+  const { isInline = false, size = 'sm', customStyle } = props;\n+  const stripeDefaultStyle = {};\n+  const stripeStyle = customStyle\n+    ? Object.assign(customStyle, stripeDefaultStyle)\n+    : stripeDefaultStyle;\n+  let cssClasses = 'skeleton__stripe';\n+  if (isInline) {\n+    cssClasses += ' skeleton__stripe--inline';\n+  }\n+  if (size !== 'sm') {\n+    cssClasses += ` skeleton__stripe--${size}`;\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d26e109310bf5abe161a067927dca6f0af0f71d4"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI5MDQwNw==", "bodyText": "datePicker can never be falsy (you can see that from its type), you can only check for datePicker.current", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r462290407", "createdAt": "2020-07-29T13:17:59Z", "author": {"login": "tiagobento"}, "path": "ui-packages/packages/trusty/src/components/Molecules/DatePicker/DatePicker.tsx", "diffHunk": "@@ -0,0 +1,71 @@\n+import React, { useEffect, useRef } from 'react';\n+import { InputGroup, TextInput } from '@patternfly/react-core';\n+import flatpickr from 'flatpickr';\n+import { Instance as flatpickrInstance } from 'flatpickr/dist/types/instance';\n+import './DatePicker.scss';\n+\n+type DatePickerProps = {\n+  fromDate?: string;\n+  id: string;\n+  label?: string;\n+  minDate?: string;\n+  maxDate?: string;\n+  onDateUpdate: (date: string) => void;\n+  value?: string;\n+};\n+\n+const DatePicker = (props: DatePickerProps) => {\n+  const { fromDate, minDate, maxDate, value, onDateUpdate, id, label } = props;\n+  const datePicker = useRef<HTMLInputElement>(null);\n+\n+  useEffect(() => {\n+    let calendar: flatpickrInstance;\n+    const onChange = (selectedDates: Date[], dateStr: string) => {\n+      onDateUpdate(dateStr);\n+    };\n+    if (datePicker && datePicker.current) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d26e109310bf5abe161a067927dca6f0af0f71d4"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI5MDgwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              const datePicker = useRef<HTMLInputElement>(null);\n          \n          \n            \n              const datePicker = useRef<HTMLInputElement>();", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r462290809", "createdAt": "2020-07-29T13:18:34Z", "author": {"login": "tiagobento"}, "path": "ui-packages/packages/trusty/src/components/Molecules/DatePicker/DatePicker.tsx", "diffHunk": "@@ -0,0 +1,71 @@\n+import React, { useEffect, useRef } from 'react';\n+import { InputGroup, TextInput } from '@patternfly/react-core';\n+import flatpickr from 'flatpickr';\n+import { Instance as flatpickrInstance } from 'flatpickr/dist/types/instance';\n+import './DatePicker.scss';\n+\n+type DatePickerProps = {\n+  fromDate?: string;\n+  id: string;\n+  label?: string;\n+  minDate?: string;\n+  maxDate?: string;\n+  onDateUpdate: (date: string) => void;\n+  value?: string;\n+};\n+\n+const DatePicker = (props: DatePickerProps) => {\n+  const { fromDate, minDate, maxDate, value, onDateUpdate, id, label } = props;\n+  const datePicker = useRef<HTMLInputElement>(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d26e109310bf5abe161a067927dca6f0af0f71d4"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI5MjM4OQ==", "bodyText": "This looks like an unexpected side effect. Every time this file is imported, this code will run, which is very hard to control and predict. It this change in configuration is important to your app, you should have an explicit call to a method that does that. On your application entry-point, you can call a function that executes this code. This way, it will be easier to understand why and when things were modified.", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r462292389", "createdAt": "2020-07-29T13:20:55Z", "author": {"login": "tiagobento"}, "path": "ui-packages/packages/trusty/src/components/Molecules/DatePicker/DatePicker.tsx", "diffHunk": "@@ -0,0 +1,71 @@\n+import React, { useEffect, useRef } from 'react';\n+import { InputGroup, TextInput } from '@patternfly/react-core';\n+import flatpickr from 'flatpickr';\n+import { Instance as flatpickrInstance } from 'flatpickr/dist/types/instance';\n+import './DatePicker.scss';\n+\n+type DatePickerProps = {\n+  fromDate?: string;\n+  id: string;\n+  label?: string;\n+  minDate?: string;\n+  maxDate?: string;\n+  onDateUpdate: (date: string) => void;\n+  value?: string;\n+};\n+\n+const DatePicker = (props: DatePickerProps) => {\n+  const { fromDate, minDate, maxDate, value, onDateUpdate, id, label } = props;\n+  const datePicker = useRef<HTMLInputElement>(null);\n+\n+  useEffect(() => {\n+    let calendar: flatpickrInstance;\n+    const onChange = (selectedDates: Date[], dateStr: string) => {\n+      onDateUpdate(dateStr);\n+    };\n+    if (datePicker && datePicker.current) {\n+      calendar = flatpickr(datePicker.current, {\n+        allowInput: true,\n+        altInput: true,\n+        altFormat: 'F j, Y',\n+        dateFormat: 'Y-m-d',\n+        defaultDate: value,\n+        minDate,\n+        maxDate,\n+        monthSelectorType: 'static',\n+        onChange,\n+        prevArrow: leftArrow,\n+        nextArrow: rightArrow,\n+        static: true\n+      });\n+    }\n+    return () => {\n+      calendar.destroy();\n+    };\n+  }, [fromDate, maxDate, onDateUpdate, minDate, value, id]);\n+\n+  return (\n+    <InputGroup>\n+      <TextInput\n+        name={id}\n+        id={id}\n+        type=\"date\"\n+        aria-label={label}\n+        ref={datePicker}\n+      />\n+    </InputGroup>\n+  );\n+};\n+\n+export default DatePicker;\n+\n+flatpickr.l10ns.en.weekdays.shorthand.forEach((day, index, daysArray) => {\n+  if (daysArray[index] === 'Thu' || daysArray[index] === 'Th') {\n+    daysArray[index] = 'Th';\n+  } else {\n+    daysArray[index] = daysArray[index].charAt(0);\n+  }\n+});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d26e109310bf5abe161a067927dca6f0af0f71d4"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI5MzE0MA==", "bodyText": "These images should be in their own file. You can use Webpack to load SVGs as strings if you need.", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r462293140", "createdAt": "2020-07-29T13:21:58Z", "author": {"login": "tiagobento"}, "path": "ui-packages/packages/trusty/src/components/Molecules/DatePicker/DatePicker.tsx", "diffHunk": "@@ -0,0 +1,71 @@\n+import React, { useEffect, useRef } from 'react';\n+import { InputGroup, TextInput } from '@patternfly/react-core';\n+import flatpickr from 'flatpickr';\n+import { Instance as flatpickrInstance } from 'flatpickr/dist/types/instance';\n+import './DatePicker.scss';\n+\n+type DatePickerProps = {\n+  fromDate?: string;\n+  id: string;\n+  label?: string;\n+  minDate?: string;\n+  maxDate?: string;\n+  onDateUpdate: (date: string) => void;\n+  value?: string;\n+};\n+\n+const DatePicker = (props: DatePickerProps) => {\n+  const { fromDate, minDate, maxDate, value, onDateUpdate, id, label } = props;\n+  const datePicker = useRef<HTMLInputElement>(null);\n+\n+  useEffect(() => {\n+    let calendar: flatpickrInstance;\n+    const onChange = (selectedDates: Date[], dateStr: string) => {\n+      onDateUpdate(dateStr);\n+    };\n+    if (datePicker && datePicker.current) {\n+      calendar = flatpickr(datePicker.current, {\n+        allowInput: true,\n+        altInput: true,\n+        altFormat: 'F j, Y',\n+        dateFormat: 'Y-m-d',\n+        defaultDate: value,\n+        minDate,\n+        maxDate,\n+        monthSelectorType: 'static',\n+        onChange,\n+        prevArrow: leftArrow,\n+        nextArrow: rightArrow,\n+        static: true\n+      });\n+    }\n+    return () => {\n+      calendar.destroy();\n+    };\n+  }, [fromDate, maxDate, onDateUpdate, minDate, value, id]);\n+\n+  return (\n+    <InputGroup>\n+      <TextInput\n+        name={id}\n+        id={id}\n+        type=\"date\"\n+        aria-label={label}\n+        ref={datePicker}\n+      />\n+    </InputGroup>\n+  );\n+};\n+\n+export default DatePicker;\n+\n+flatpickr.l10ns.en.weekdays.shorthand.forEach((day, index, daysArray) => {\n+  if (daysArray[index] === 'Thu' || daysArray[index] === 'Th') {\n+    daysArray[index] = 'Th';\n+  } else {\n+    daysArray[index] = daysArray[index].charAt(0);\n+  }\n+});\n+\n+const leftArrow = `<svg fill=\"currentColor\" height=\"1em\" width=\"1em\" viewBox=\"0 0 256 512\" aria-hidden=\"true\" role=\"img\" style=\"vertical-align: -0.125em;\"><path d=\"M31.7 239l136-136c9.4-9.4 24.6-9.4 33.9 0l22.6 22.6c9.4 9.4 9.4 24.6 0 33.9L127.9 256l96.4 96.4c9.4 9.4 9.4 24.6 0 33.9L201.7 409c-9.4 9.4-24.6 9.4-33.9 0l-136-136c-9.5-9.4-9.5-24.6-.1-34z\" transform=\"\"/></svg>`;\n+const rightArrow = `<svg fill=\"currentColor\" height=\"1em\" width=\"1em\" viewBox=\"0 0 256 512\" aria-hidden=\"true\" role=\"img\" style=\"vertical-align: -0.125em;\"><path d=\"M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34z\" transform=\"\"/></svg>`;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d26e109310bf5abe161a067927dca6f0af0f71d4"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI5NjM4Nw==", "bodyText": "This should be wrapped in a useCallback.", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r462296387", "createdAt": "2020-07-29T13:26:29Z", "author": {"login": "tiagobento"}, "path": "ui-packages/packages/trusty/src/components/Organisms/AuditToolbar/AuditToolbar.tsx", "diffHunk": "@@ -0,0 +1,152 @@\n+import React, { useRef } from 'react';\n+import {\n+  Button,\n+  ButtonVariant,\n+  DataToolbar,\n+  DataToolbarContent,\n+  DataToolbarItem,\n+  DataToolbarItemVariant,\n+  InputGroup,\n+  TextInput\n+} from '@patternfly/react-core';\n+import { SearchIcon, SyncIcon } from '@patternfly/react-icons';\n+import PaginationContainer from '../PaginationContainer/PaginationContainer';\n+import DatePicker from '../../Molecules/DatePicker/DatePicker';\n+\n+type toolbarBaseProps = {\n+  page: number;\n+  pageSize: number;\n+  setPage: (page: number) => void;\n+  setPageSize: (pageSize: number) => void;\n+  total: number;\n+};\n+\n+type topToolbarProps = {\n+  setSearchString: (searchString: string) => void;\n+  fromDate: string;\n+  setFromDate: (fromDate: string) => void;\n+  toDate: string;\n+  setToDate: (toDate: string) => void;\n+  onRefresh: () => void;\n+};\n+\n+export const AuditToolbarTop = (props: toolbarBaseProps & topToolbarProps) => {\n+  const {\n+    setSearchString,\n+    fromDate,\n+    setFromDate,\n+    toDate,\n+    setToDate,\n+    total,\n+    pageSize,\n+    page,\n+    setPage,\n+    setPageSize,\n+    onRefresh\n+  } = props;\n+\n+  const searchField = useRef<HTMLInputElement>(null);\n+  const onSearchSubmit = (): void => {\n+    if (searchField && searchField.current) {\n+      setSearchString(searchField.current.value);\n+    }\n+  };\n+  const onSearchEnter = (event: React.KeyboardEvent): void => {\n+    if (searchField && searchField.current && event.key === 'Enter') {\n+      setSearchString(searchField.current.value);\n+    }\n+  };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d26e109310bf5abe161a067927dca6f0af0f71d4"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI5NjU2Ng==", "bodyText": "This should be wrapped in a useCallback.", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r462296566", "createdAt": "2020-07-29T13:26:43Z", "author": {"login": "tiagobento"}, "path": "ui-packages/packages/trusty/src/components/Organisms/AuditToolbar/AuditToolbar.tsx", "diffHunk": "@@ -0,0 +1,152 @@\n+import React, { useRef } from 'react';\n+import {\n+  Button,\n+  ButtonVariant,\n+  DataToolbar,\n+  DataToolbarContent,\n+  DataToolbarItem,\n+  DataToolbarItemVariant,\n+  InputGroup,\n+  TextInput\n+} from '@patternfly/react-core';\n+import { SearchIcon, SyncIcon } from '@patternfly/react-icons';\n+import PaginationContainer from '../PaginationContainer/PaginationContainer';\n+import DatePicker from '../../Molecules/DatePicker/DatePicker';\n+\n+type toolbarBaseProps = {\n+  page: number;\n+  pageSize: number;\n+  setPage: (page: number) => void;\n+  setPageSize: (pageSize: number) => void;\n+  total: number;\n+};\n+\n+type topToolbarProps = {\n+  setSearchString: (searchString: string) => void;\n+  fromDate: string;\n+  setFromDate: (fromDate: string) => void;\n+  toDate: string;\n+  setToDate: (toDate: string) => void;\n+  onRefresh: () => void;\n+};\n+\n+export const AuditToolbarTop = (props: toolbarBaseProps & topToolbarProps) => {\n+  const {\n+    setSearchString,\n+    fromDate,\n+    setFromDate,\n+    toDate,\n+    setToDate,\n+    total,\n+    pageSize,\n+    page,\n+    setPage,\n+    setPageSize,\n+    onRefresh\n+  } = props;\n+\n+  const searchField = useRef<HTMLInputElement>(null);\n+  const onSearchSubmit = (): void => {\n+    if (searchField && searchField.current) {\n+      setSearchString(searchField.current.value);\n+    }\n+  };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d26e109310bf5abe161a067927dca6f0af0f71d4"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI5NjYzOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              const searchField = useRef<HTMLInputElement>(null);\n          \n          \n            \n              const searchField = useRef<HTMLInputElement>();", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r462296639", "createdAt": "2020-07-29T13:26:48Z", "author": {"login": "tiagobento"}, "path": "ui-packages/packages/trusty/src/components/Organisms/AuditToolbar/AuditToolbar.tsx", "diffHunk": "@@ -0,0 +1,152 @@\n+import React, { useRef } from 'react';\n+import {\n+  Button,\n+  ButtonVariant,\n+  DataToolbar,\n+  DataToolbarContent,\n+  DataToolbarItem,\n+  DataToolbarItemVariant,\n+  InputGroup,\n+  TextInput\n+} from '@patternfly/react-core';\n+import { SearchIcon, SyncIcon } from '@patternfly/react-icons';\n+import PaginationContainer from '../PaginationContainer/PaginationContainer';\n+import DatePicker from '../../Molecules/DatePicker/DatePicker';\n+\n+type toolbarBaseProps = {\n+  page: number;\n+  pageSize: number;\n+  setPage: (page: number) => void;\n+  setPageSize: (pageSize: number) => void;\n+  total: number;\n+};\n+\n+type topToolbarProps = {\n+  setSearchString: (searchString: string) => void;\n+  fromDate: string;\n+  setFromDate: (fromDate: string) => void;\n+  toDate: string;\n+  setToDate: (toDate: string) => void;\n+  onRefresh: () => void;\n+};\n+\n+export const AuditToolbarTop = (props: toolbarBaseProps & topToolbarProps) => {\n+  const {\n+    setSearchString,\n+    fromDate,\n+    setFromDate,\n+    toDate,\n+    setToDate,\n+    total,\n+    pageSize,\n+    page,\n+    setPage,\n+    setPageSize,\n+    onRefresh\n+  } = props;\n+\n+  const searchField = useRef<HTMLInputElement>(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d26e109310bf5abe161a067927dca6f0af0f71d4"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjI5NzI2Nw==", "bodyText": "You can either inline that or wrap it in a useMemo.", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r462297267", "createdAt": "2020-07-29T13:27:45Z", "author": {"login": "tiagobento"}, "path": "ui-packages/packages/trusty/src/components/Organisms/ExecutionTable/ExecutionTable.tsx", "diffHunk": "@@ -0,0 +1,149 @@\n+import React, { useEffect, useState } from 'react';\n+import { Link } from 'react-router-dom';\n+import { IRow, Table, TableBody, TableHeader } from '@patternfly/react-table';\n+import {\n+  Bullseye,\n+  EmptyState,\n+  EmptyStateBody,\n+  EmptyStateIcon,\n+  Title\n+} from '@patternfly/react-core';\n+import { SearchIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\n+import ExecutionStatus from '../../Atoms/ExecutionStatus/ExecutionStatus';\n+import FormattedDate from '../../Atoms/FormattedDate/FormattedDate';\n+import skeletonRows from '../../../utils/skeletonRows/skeletonRows';\n+import { IExecution, IExecutions, RemoteData } from '../../../types';\n+\n+type ExecutionTableProps = {\n+  data: RemoteData<Error, IExecutions>;\n+};\n+\n+const ExecutionTable = (props: ExecutionTableProps) => {\n+  const { data } = props;\n+  const columns = ['ID', 'Description', 'Executor', 'Date', 'Execution Status'];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d26e109310bf5abe161a067927dca6f0af0f71d4"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMwMjk5OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              const rows: IRow[] = [];\n          \n          \n            \n            \n          \n          \n            \n              rowData.forEach(item => {\n          \n          \n            \n                const row: IRow = {};\n          \n          \n            \n                const cells = [];\n          \n          \n            \n                cells.push({\n          \n          \n            \n                  title: (\n          \n          \n            \n                    <Link\n          \n          \n            \n                      to={`/audit/${item.executionType.toLocaleLowerCase()}/${\n          \n          \n            \n                        item.executionId\n          \n          \n            \n                      }`}\n          \n          \n            \n                    >\n          \n          \n            \n                      {'#' + item.executionId.toUpperCase()}\n          \n          \n            \n                    </Link>\n          \n          \n            \n                  )\n          \n          \n            \n                });\n          \n          \n            \n                cells.push(item.executedModelName);\n          \n          \n            \n                cells.push(item.executorName);\n          \n          \n            \n                cells.push({\n          \n          \n            \n                  title: <FormattedDate date={item.executionDate} />\n          \n          \n            \n                });\n          \n          \n            \n                cells.push({\n          \n          \n            \n                  title: <ExecutionStatus result={item.executionSucceeded} />\n          \n          \n            \n                });\n          \n          \n            \n                row.cells = cells;\n          \n          \n            \n                row.executionKey = 'key-' + item.executionId;\n          \n          \n            \n                rows.push(row);\n          \n          \n            \n              });\n          \n          \n            \n              return rows;\n          \n          \n            \n              return rowData.map(item => ({\n          \n          \n            \n                  executionKey: 'key-' + item.executionId,\n          \n          \n            \n                  cells: [\n          \n          \n            \n                    {\n          \n          \n            \n                      title: (\n          \n          \n            \n                        <Link to={`/audit/${item.executionType.toLocaleLowerCase()}/${item.executionId}`}>\n          \n          \n            \n                           {'#' + item.executionId.toUpperCase()}\n          \n          \n            \n                        </Link>)\n          \n          \n            \n                    },\n          \n          \n            \n                    item.executedModelName,\n          \n          \n            \n                    item.executorName,\n          \n          \n            \n                    { title: <FormattedDate date={item.executionDate} /> },\n          \n          \n            \n                    { title: <ExecutionStatus result={item.executionSucceeded} /> }\n          \n          \n            \n                 ]\n          \n          \n            \n                }));", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r462302999", "createdAt": "2020-07-29T13:35:58Z", "author": {"login": "tiagobento"}, "path": "ui-packages/packages/trusty/src/components/Organisms/ExecutionTable/ExecutionTable.tsx", "diffHunk": "@@ -0,0 +1,149 @@\n+import React, { useEffect, useState } from 'react';\n+import { Link } from 'react-router-dom';\n+import { IRow, Table, TableBody, TableHeader } from '@patternfly/react-table';\n+import {\n+  Bullseye,\n+  EmptyState,\n+  EmptyStateBody,\n+  EmptyStateIcon,\n+  Title\n+} from '@patternfly/react-core';\n+import { SearchIcon, ExclamationCircleIcon } from '@patternfly/react-icons';\n+import ExecutionStatus from '../../Atoms/ExecutionStatus/ExecutionStatus';\n+import FormattedDate from '../../Atoms/FormattedDate/FormattedDate';\n+import skeletonRows from '../../../utils/skeletonRows/skeletonRows';\n+import { IExecution, IExecutions, RemoteData } from '../../../types';\n+\n+type ExecutionTableProps = {\n+  data: RemoteData<Error, IExecutions>;\n+};\n+\n+const ExecutionTable = (props: ExecutionTableProps) => {\n+  const { data } = props;\n+  const columns = ['ID', 'Description', 'Executor', 'Date', 'Execution Status'];\n+  const [rows, setRows] = useState<IRow[]>(prepareRows(columns.length, data));\n+\n+  useEffect(() => {\n+    setRows(prepareRows(columns.length, data));\n+  }, [data.status]);\n+\n+  return (\n+    <Table cells={columns} rows={rows} aria-label=\"Executions list\">\n+      <TableHeader />\n+      <TableBody rowKey=\"executionKey\" />\n+    </Table>\n+  );\n+};\n+\n+const prepareRows = (\n+  columnsNumber: number,\n+  data: RemoteData<Error, IExecutions>\n+) => {\n+  let rows;\n+  switch (data.status) {\n+    case 'NOT_ASKED':\n+    case 'LOADING':\n+      rows = skeletonRows(columnsNumber, 10, 'executionKey');\n+      break;\n+    case 'SUCCESS':\n+      if (data.data.headers.length > 0) {\n+        rows = prepareExecutionsRows(data.data.headers);\n+      } else {\n+        rows = noExecutions(columnsNumber);\n+      }\n+      break;\n+    case 'FAILURE':\n+      rows = loadingError(columnsNumber);\n+      break;\n+  }\n+  return rows;\n+};\n+\n+const prepareExecutionsRows = (rowData: IExecution[]) => {\n+  const rows: IRow[] = [];\n+\n+  rowData.forEach(item => {\n+    const row: IRow = {};\n+    const cells = [];\n+    cells.push({\n+      title: (\n+        <Link\n+          to={`/audit/${item.executionType.toLocaleLowerCase()}/${\n+            item.executionId\n+          }`}\n+        >\n+          {'#' + item.executionId.toUpperCase()}\n+        </Link>\n+      )\n+    });\n+    cells.push(item.executedModelName);\n+    cells.push(item.executorName);\n+    cells.push({\n+      title: <FormattedDate date={item.executionDate} />\n+    });\n+    cells.push({\n+      title: <ExecutionStatus result={item.executionSucceeded} />\n+    });\n+    row.cells = cells;\n+    row.executionKey = 'key-' + item.executionId;\n+    rows.push(row);\n+  });\n+  return rows;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d26e109310bf5abe161a067927dca6f0af0f71d4"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMwNDIwNA==", "bodyText": "This should be wrapped in a useCallback.", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r462304204", "createdAt": "2020-07-29T13:37:42Z", "author": {"login": "tiagobento"}, "path": "ui-packages/packages/trusty/src/components/Organisms/PaginationContainer/PaginationContainer.tsx", "diffHunk": "@@ -0,0 +1,42 @@\n+import React from 'react';\n+import { Pagination, PaginationVariant } from '@patternfly/react-core';\n+\n+type PaginationContainerProps = {\n+  total: number;\n+  page: number;\n+  pageSize: number;\n+  paginationId: string;\n+  onSetPage: (page: number) => void;\n+  onSetPageSize: (size: number) => void;\n+};\n+\n+const PaginationContainer = (props: PaginationContainerProps) => {\n+  const {\n+    total,\n+    page,\n+    pageSize,\n+    paginationId,\n+    onSetPage,\n+    onSetPageSize\n+  } = props;\n+\n+  const updatePage = (event: any, pageNumber: number) => {\n+    onSetPage(pageNumber);\n+  };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d26e109310bf5abe161a067927dca6f0af0f71d4"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMwNDI4NQ==", "bodyText": "This should be wrapped in a useCallback.", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r462304285", "createdAt": "2020-07-29T13:37:48Z", "author": {"login": "tiagobento"}, "path": "ui-packages/packages/trusty/src/components/Organisms/PaginationContainer/PaginationContainer.tsx", "diffHunk": "@@ -0,0 +1,42 @@\n+import React from 'react';\n+import { Pagination, PaginationVariant } from '@patternfly/react-core';\n+\n+type PaginationContainerProps = {\n+  total: number;\n+  page: number;\n+  pageSize: number;\n+  paginationId: string;\n+  onSetPage: (page: number) => void;\n+  onSetPageSize: (size: number) => void;\n+};\n+\n+const PaginationContainer = (props: PaginationContainerProps) => {\n+  const {\n+    total,\n+    page,\n+    pageSize,\n+    paginationId,\n+    onSetPage,\n+    onSetPageSize\n+  } = props;\n+\n+  const updatePage = (event: any, pageNumber: number) => {\n+    onSetPage(pageNumber);\n+  };\n+  const updatePageSize = (event: any, pageNumber: number) => {\n+    onSetPageSize(pageNumber);\n+  };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d26e109310bf5abe161a067927dca6f0af0f71d4"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMwNTA4MQ==", "bodyText": "This should be wrapped in a useMemo.", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r462305081", "createdAt": "2020-07-29T13:38:54Z", "author": {"login": "tiagobento"}, "path": "ui-packages/packages/trusty/src/components/Templates/AuditOverview/AuditOverview.tsx", "diffHunk": "@@ -0,0 +1,95 @@\n+import React, { useEffect, useState } from 'react';\n+import {\n+  PageSection,\n+  PageSectionVariants,\n+  Text,\n+  TextContent,\n+  Title\n+} from '@patternfly/react-core';\n+import {\n+  AuditToolbarTop,\n+  AuditToolbarBottom\n+} from '../../Organisms/AuditToolbar/AuditToolbar';\n+import ExecutionTable from '../../Organisms/ExecutionTable/ExecutionTable';\n+import useExecutions from './useExecutions';\n+import { formatISO, sub } from 'date-fns';\n+\n+type AuditOverviewProps = {\n+  dateRangePreset?: {\n+    fromDate: string;\n+    toDate: string;\n+  };\n+};\n+\n+const AuditOverview = (props: AuditOverviewProps) => {\n+  const { dateRangePreset } = props;\n+  const toPreset = dateRangePreset\n+    ? dateRangePreset.toDate\n+    : formatISO(new Date(), { representation: 'date' });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d26e109310bf5abe161a067927dca6f0af0f71d4"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMwNTE0Nw==", "bodyText": "This should be wrapped in a useMemo.", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r462305147", "createdAt": "2020-07-29T13:39:00Z", "author": {"login": "tiagobento"}, "path": "ui-packages/packages/trusty/src/components/Templates/AuditOverview/AuditOverview.tsx", "diffHunk": "@@ -0,0 +1,95 @@\n+import React, { useEffect, useState } from 'react';\n+import {\n+  PageSection,\n+  PageSectionVariants,\n+  Text,\n+  TextContent,\n+  Title\n+} from '@patternfly/react-core';\n+import {\n+  AuditToolbarTop,\n+  AuditToolbarBottom\n+} from '../../Organisms/AuditToolbar/AuditToolbar';\n+import ExecutionTable from '../../Organisms/ExecutionTable/ExecutionTable';\n+import useExecutions from './useExecutions';\n+import { formatISO, sub } from 'date-fns';\n+\n+type AuditOverviewProps = {\n+  dateRangePreset?: {\n+    fromDate: string;\n+    toDate: string;\n+  };\n+};\n+\n+const AuditOverview = (props: AuditOverviewProps) => {\n+  const { dateRangePreset } = props;\n+  const toPreset = dateRangePreset\n+    ? dateRangePreset.toDate\n+    : formatISO(new Date(), { representation: 'date' });\n+  const fromPreset = dateRangePreset\n+    ? dateRangePreset.fromDate\n+    : formatISO(sub(new Date(), { months: 1 }), { representation: 'date' });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d26e109310bf5abe161a067927dca6f0af0f71d4"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMwNzM3Mw==", "bodyText": "Since these parameters are all of primitive types, I feel like this custom Hook should have its signature improved by forcing \"named parameters\". If you create an object with these parameters, users will have to explicitly type the parameter name (which is only the property names of the parameter object). This will increase readability on places using this Hook.", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r462307373", "createdAt": "2020-07-29T13:41:55Z", "author": {"login": "tiagobento"}, "path": "ui-packages/packages/trusty/src/components/Templates/AuditOverview/useExecutions.tsx", "diffHunk": "@@ -0,0 +1,43 @@\n+import { useCallback, useEffect, useState } from 'react';\n+import { getExecutions } from '../../../utils/api/auditApi';\n+import { isCancelledRequest } from '../../../utils/api/httpClient';\n+import { RemoteData, IExecutions } from '../../../types';\n+\n+const useExecutions = (\n+  searchString: string,\n+  from: string,\n+  to: string,\n+  limit: number,\n+  offset: number\n+) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d26e109310bf5abe161a067927dca6f0af0f71d4"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMwNzg1MQ==", "bodyText": "You can inline this function call so you don't have to practically repeat the list of dependencies on the useCallback statement.", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r462307851", "createdAt": "2020-07-29T13:42:37Z", "author": {"login": "tiagobento"}, "path": "ui-packages/packages/trusty/src/components/Templates/AuditOverview/useExecutions.tsx", "diffHunk": "@@ -0,0 +1,43 @@\n+import { useCallback, useEffect, useState } from 'react';\n+import { getExecutions } from '../../../utils/api/auditApi';\n+import { isCancelledRequest } from '../../../utils/api/httpClient';\n+import { RemoteData, IExecutions } from '../../../types';\n+\n+const useExecutions = (\n+  searchString: string,\n+  from: string,\n+  to: string,\n+  limit: number,\n+  offset: number\n+) => {\n+  const [executions, setExecutions] = useState<RemoteData<Error, IExecutions>>({\n+    status: 'NOT_ASKED'\n+  });\n+\n+  const loadExecutions = useCallback(() => {\n+    let isMounted = true;\n+    setExecutions({ status: 'LOADING' });\n+    getExecutions(searchString, from, to, limit, offset)\n+      .then(response => {\n+        if (isMounted) {\n+          setExecutions({ status: 'SUCCESS', data: response.data });\n+        }\n+      })\n+      .catch(error => {\n+        if (!isCancelledRequest(error)) {\n+          setExecutions({ status: 'FAILURE', error });\n+        }\n+      });\n+    return () => {\n+      isMounted = false;\n+    };\n+  }, [searchString, from, to, limit, offset]);\n+\n+  useEffect(() => {\n+    loadExecutions();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d26e109310bf5abe161a067927dca6f0af0f71d4"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMxMDY5Ng==", "bodyText": "Nice use of the isMounted variable check. If I can push a little bit, maybe you can create a custom Hook for all request types, so that you don't have to repeat this logic for every request.", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r462310696", "createdAt": "2020-07-29T13:46:27Z", "author": {"login": "tiagobento"}, "path": "ui-packages/packages/trusty/src/components/Templates/AuditOverview/useExecutions.tsx", "diffHunk": "@@ -0,0 +1,43 @@\n+import { useCallback, useEffect, useState } from 'react';\n+import { getExecutions } from '../../../utils/api/auditApi';\n+import { isCancelledRequest } from '../../../utils/api/httpClient';\n+import { RemoteData, IExecutions } from '../../../types';\n+\n+const useExecutions = (\n+  searchString: string,\n+  from: string,\n+  to: string,\n+  limit: number,\n+  offset: number\n+) => {\n+  const [executions, setExecutions] = useState<RemoteData<Error, IExecutions>>({\n+    status: 'NOT_ASKED'\n+  });\n+\n+  const loadExecutions = useCallback(() => {\n+    let isMounted = true;\n+    setExecutions({ status: 'LOADING' });\n+    getExecutions(searchString, from, to, limit, offset)\n+      .then(response => {\n+        if (isMounted) {\n+          setExecutions({ status: 'SUCCESS', data: response.data });\n+        }\n+      })\n+      .catch(error => {\n+        if (!isCancelledRequest(error)) {\n+          setExecutions({ status: 'FAILURE', error });\n+        }\n+      });\n+    return () => {\n+      isMounted = false;\n+    };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d26e109310bf5abe161a067927dca6f0af0f71d4"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMxMTAwMg==", "bodyText": "This is just a suggestion, though. I think it would improve readability of code making requests.", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r462311002", "createdAt": "2020-07-29T13:46:48Z", "author": {"login": "tiagobento"}, "path": "ui-packages/packages/trusty/src/components/Templates/AuditOverview/useExecutions.tsx", "diffHunk": "@@ -0,0 +1,43 @@\n+import { useCallback, useEffect, useState } from 'react';\n+import { getExecutions } from '../../../utils/api/auditApi';\n+import { isCancelledRequest } from '../../../utils/api/httpClient';\n+import { RemoteData, IExecutions } from '../../../types';\n+\n+const useExecutions = (\n+  searchString: string,\n+  from: string,\n+  to: string,\n+  limit: number,\n+  offset: number\n+) => {\n+  const [executions, setExecutions] = useState<RemoteData<Error, IExecutions>>({\n+    status: 'NOT_ASKED'\n+  });\n+\n+  const loadExecutions = useCallback(() => {\n+    let isMounted = true;\n+    setExecutions({ status: 'LOADING' });\n+    getExecutions(searchString, from, to, limit, offset)\n+      .then(response => {\n+        if (isMounted) {\n+          setExecutions({ status: 'SUCCESS', data: response.data });\n+        }\n+      })\n+      .catch(error => {\n+        if (!isCancelledRequest(error)) {\n+          setExecutions({ status: 'FAILURE', error });\n+        }\n+      });\n+    return () => {\n+      isMounted = false;\n+    };", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMxMDY5Ng=="}, "originalCommit": {"oid": "d26e109310bf5abe161a067927dca6f0af0f71d4"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMzODEzMw==", "bodyText": "I see you reformatted the code here without changes. Could it be that you're not using Prettier as the formatter? I see that you have prettier configured for this repository. Please check that.", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r462338133", "createdAt": "2020-07-29T14:22:20Z", "author": {"login": "tiagobento"}, "path": "ui-packages/packages/trusty/src/index.css", "diffHunk": "@@ -1,18 +1,20 @@\n body {\n-    margin: 0;\n-    font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", \"Roboto\", \"Oxygen\", \"Ubuntu\", \"Cantarell\", \"Fira Sans\",\n-    \"Droid Sans\", \"Helvetica Neue\", sans-serif;\n-    -webkit-font-smoothing: antialiased;\n-    -moz-osx-font-smoothing: grayscale;\n+  margin: 0;\n+  font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n+    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n+    sans-serif;\n+  -webkit-font-smoothing: antialiased;\n+  -moz-osx-font-smoothing: grayscale;\n }\n \n code {\n-    font-family: source-code-pro, Menlo, Monaco, Consolas, \"Courier New\", monospace;\n+  font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n+    monospace;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d26e109310bf5abe161a067927dca6f0af0f71d4"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMzODU4Mg==", "bodyText": "Any particular reason for these not be called Execution and Executions?", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r462338582", "createdAt": "2020-07-29T14:22:57Z", "author": {"login": "tiagobento"}, "path": "ui-packages/packages/trusty/src/types.ts", "diffHunk": "@@ -0,0 +1,19 @@\n+export type RemoteData<E, D> =\n+  | { status: 'NOT_ASKED' }\n+  | { status: 'LOADING' }\n+  | { status: 'FAILURE'; error: E }\n+  | { status: 'SUCCESS'; data: D };\n+\n+export interface IExecution {\n+  executionId: string;\n+  executionDate: string;\n+  executedModelName: string;\n+  executionType: string;\n+  executionSucceeded: boolean;\n+  executorName: string;\n+}\n+\n+export interface IExecutions {\n+  headers: IExecution[];\n+  total: number;\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d26e109310bf5abe161a067927dca6f0af0f71d4"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMzODk5OA==", "bodyText": "You can inline that.", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r462338998", "createdAt": "2020-07-29T14:23:29Z", "author": {"login": "tiagobento"}, "path": "ui-packages/packages/trusty/src/utils/api/auditApi.ts", "diffHunk": "@@ -0,0 +1,25 @@\n+import { callOnce } from './httpClient';\n+import { AxiosRequestConfig } from 'axios';\n+\n+const EXECUTIONS_PATH = '/executions';\n+\n+export const getExecutions = (\n+  searchString: string,\n+  from: string,\n+  to: string,\n+  limit: number,\n+  offset: number\n+) => {\n+  const config: AxiosRequestConfig = {\n+    url: EXECUTIONS_PATH,\n+    method: 'get',\n+    params: {\n+      search: searchString,\n+      from,\n+      to,\n+      limit,\n+      offset\n+    }\n+  };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d26e109310bf5abe161a067927dca6f0af0f71d4"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjMzOTg2OQ==", "bodyText": "I think this function can be inlined. This indirection causes code reading to be more difficult, since its a code of your application, people will expect extra-behaviour. Instead, this is only an \"alias\" for axios.isCancel.", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r462339869", "createdAt": "2020-07-29T14:24:38Z", "author": {"login": "tiagobento"}, "path": "ui-packages/packages/trusty/src/utils/api/httpClient.ts", "diffHunk": "@@ -0,0 +1,23 @@\n+import axios, { AxiosRequestConfig, CancelTokenSource } from 'axios';\n+\n+const httpClient = axios.create({\n+  baseURL: process.env.KOGITO_TRUSTY_API_HTTP_URL,\n+  timeout: 5000,\n+  headers: {}\n+});\n+\n+let call: CancelTokenSource;\n+\n+const callOnce = (config: AxiosRequestConfig) => {\n+  if (call) {\n+    call.cancel('Request superseded');\n+  }\n+  call = axios.CancelToken.source();\n+\n+  config.cancelToken = call.token;\n+  return httpClient(config);\n+};\n+\n+const isCancelledRequest = axios.isCancel;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d26e109310bf5abe161a067927dca6f0af0f71d4"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0MDExMQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              if (call) {\n          \n          \n            \n                call.cancel('Request superseded');\n          \n          \n            \n              }\n          \n          \n            \n              call?.cancel('Request superseded');", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r462340111", "createdAt": "2020-07-29T14:24:56Z", "author": {"login": "tiagobento"}, "path": "ui-packages/packages/trusty/src/utils/api/httpClient.ts", "diffHunk": "@@ -0,0 +1,23 @@\n+import axios, { AxiosRequestConfig, CancelTokenSource } from 'axios';\n+\n+const httpClient = axios.create({\n+  baseURL: process.env.KOGITO_TRUSTY_API_HTTP_URL,\n+  timeout: 5000,\n+  headers: {}\n+});\n+\n+let call: CancelTokenSource;\n+\n+const callOnce = (config: AxiosRequestConfig) => {\n+  if (call) {\n+    call.cancel('Request superseded');\n+  }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d26e109310bf5abe161a067927dca6f0af0f71d4"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjM0MTgxMQ==", "bodyText": "This is a global variable. We should avoid that at all costs, since they can be dangerous. Can you explain why you need this to be global?", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r462341811", "createdAt": "2020-07-29T14:27:05Z", "author": {"login": "tiagobento"}, "path": "ui-packages/packages/trusty/src/utils/api/httpClient.ts", "diffHunk": "@@ -0,0 +1,23 @@\n+import axios, { AxiosRequestConfig, CancelTokenSource } from 'axios';\n+\n+const httpClient = axios.create({\n+  baseURL: process.env.KOGITO_TRUSTY_API_HTTP_URL,\n+  timeout: 5000,\n+  headers: {}\n+});\n+\n+let call: CancelTokenSource;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d26e109310bf5abe161a067927dca6f0af0f71d4"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac03bcb7dd1b6fad45fd7b70b2de625216661276", "author": {"user": {"login": "kelvah", "name": "roberto emanuel"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/ac03bcb7dd1b6fad45fd7b70b2de625216661276", "committedDate": "2020-07-31T11:15:04Z", "message": "KOGITO-2775 - Updates following review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwMjEwNjkz", "url": "https://github.com/kiegroup/kogito-apps/pull/330#pullrequestreview-460210693", "createdAt": "2020-08-03T17:32:25Z", "commit": {"oid": "ac03bcb7dd1b6fad45fd7b70b2de625216661276"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "44be1551a5e553e8703e559896b944548f90acf8", "author": {"user": {"login": "kelvah", "name": "roberto emanuel"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/44be1551a5e553e8703e559896b944548f90acf8", "committedDate": "2020-08-11T12:46:51Z", "message": "Merge branch 'master' into KOGITO-2775-add-trusty-audit-overview-section"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "28a760d929039d37adca235ca3344e2de02ec21b", "author": {"user": {"login": "kelvah", "name": "roberto emanuel"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/28a760d929039d37adca235ca3344e2de02ec21b", "committedDate": "2020-08-11T13:57:32Z", "message": "KOGITO-2775 Update to PatternFly 4"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1MTU4Nzk5", "url": "https://github.com/kiegroup/kogito-apps/pull/330#pullrequestreview-465158799", "createdAt": "2020-08-11T15:03:51Z", "commit": {"oid": "28a760d929039d37adca235ca3344e2de02ec21b"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNTowMzo1MVrOG-8OeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxNTowNzo1MVrOG-8Zrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY1MTY0MQ==", "bodyText": "these snapshots seem redundant as we're checking the span content below.", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r468651641", "createdAt": "2020-08-11T15:03:51Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/trusty/src/components/Atoms/FormattedDate/tests/FormattedDate.test.tsx", "diffHunk": "@@ -0,0 +1,53 @@\n+import React from 'react';\n+import { shallow } from 'enzyme';\n+import FormattedDate from '../FormattedDate';\n+import { format } from 'date-fns';\n+\n+describe('FormattedDate', () => {\n+  test('displays a formatted date', () => {\n+    const wrapper = shallow(<FormattedDate date=\"2020-01-01\" />);\n+\n+    expect(wrapper).toMatchSnapshot();\n+    expect(wrapper.find('span').text()).toMatch('Jan 1, 2020');\n+  });\n+\n+  test('renders a tooltip with the complete date and time info', () => {\n+    const initialDate = '2020-01-01';\n+    const wrapper = shallow(<FormattedDate date={initialDate} />);\n+    const tooltip = wrapper.find('Tooltip');\n+    const fullDate = format(new Date(initialDate), 'PPpp');\n+\n+    expect(wrapper).toMatchSnapshot();\n+    expect(wrapper.find('span').text()).toMatch('Jan 1, 2020');\n+    expect(tooltip.length).toBe(1);\n+    expect(tooltip.props().content).toMatch(fullDate);\n+  });\n+\n+  test('displays the \"on\" preposition before the date when preposition prop is passed', () => {\n+    const wrapper = shallow(<FormattedDate date=\"2020-01-01\" preposition />);\n+\n+    expect(wrapper).toMatchSnapshot();\n+    expect(wrapper.find('span').text()).toMatch('on Jan 1, 2020');\n+  });\n+\n+  test('displays full date and time when fullDateAndTime prop is passed', () => {\n+    const wrapper = shallow(\n+      <FormattedDate date=\"2020-01-01\" fullDateAndTime />\n+    );\n+\n+    expect(wrapper).toMatchSnapshot();\n+    expect(wrapper.find('Tooltip').length).toBe(0);\n+    expect(wrapper.find('span').text()).toMatch('Jan 1, 2020, 12:00:00 AM');\n+  });\n+\n+  test('displays a relative timestamp if the date is in the last 24h', () => {\n+    const fixedDate = '2020-01-01T00:00:00.000Z';\n+    jest\n+      .spyOn(global.Date, 'now')\n+      .mockImplementation(() => new Date(fixedDate).getTime());\n+    const wrapper = shallow(<FormattedDate date={fixedDate} />);\n+\n+    expect(wrapper).toMatchSnapshot();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28a760d929039d37adca235ca3344e2de02ec21b"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODY1NDUxMQ==", "bodyText": "Is this a distinction between Tuesday and Thursday? (that's the only possible explanation I could come up with) Shouldn't similar workaround apply to Saturday vs. Sunday?", "url": "https://github.com/kiegroup/kogito-apps/pull/330#discussion_r468654511", "createdAt": "2020-08-11T15:07:51Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/trusty/src/components/Molecules/DatePicker/DatePicker.tsx", "diffHunk": "@@ -0,0 +1,72 @@\n+import React, { useEffect, useRef } from 'react';\n+import { InputGroup, TextInput } from '@patternfly/react-core';\n+import flatpickr from 'flatpickr';\n+import { Instance as flatpickrInstance } from 'flatpickr/dist/types/instance';\n+import leftArrow from '../../../../static/images/leftArrow.svg';\n+import rightArrow from '../../../../static/images/rightArrow.svg';\n+import './DatePicker.scss';\n+\n+type DatePickerProps = {\n+  fromDate?: string;\n+  id: string;\n+  label?: string;\n+  minDate?: string;\n+  maxDate?: string;\n+  onDateUpdate: (date: string) => void;\n+  value?: string;\n+};\n+\n+const DatePicker = (props: DatePickerProps) => {\n+  const { fromDate, minDate, maxDate, value, onDateUpdate, id, label } = props;\n+  const datePicker = useRef<HTMLInputElement>();\n+\n+  useEffect(() => {\n+    let calendar: flatpickrInstance;\n+    const onChange = (selectedDates: Date[], dateStr: string) => {\n+      onDateUpdate(dateStr);\n+    };\n+    if (datePicker.current) {\n+      calendar = flatpickr(datePicker.current, {\n+        allowInput: true,\n+        altInput: true,\n+        altFormat: 'F j, Y',\n+        dateFormat: 'Y-m-d',\n+        defaultDate: value,\n+        minDate,\n+        maxDate,\n+        monthSelectorType: 'static',\n+        onChange,\n+        prevArrow: `<img alt=\"Prev\" src=\"${leftArrow}\">`,\n+        nextArrow: `<img alt=\"Next\" src=\"${rightArrow}\">`,\n+        static: true\n+      });\n+    }\n+    return () => {\n+      calendar.destroy();\n+    };\n+  }, [fromDate, maxDate, onDateUpdate, minDate, value, id]);\n+\n+  return (\n+    <InputGroup>\n+      <TextInput\n+        name={id}\n+        id={id}\n+        type=\"date\"\n+        aria-label={label}\n+        ref={datePicker}\n+      />\n+    </InputGroup>\n+  );\n+};\n+\n+export default DatePicker;\n+\n+export const datePickerSetup = () => {\n+  flatpickr.l10ns.en.weekdays.shorthand.forEach((day, index, daysArray) => {\n+    if (daysArray[index] === 'Thu' || daysArray[index] === 'Th') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "28a760d929039d37adca235ca3344e2de02ec21b"}, "originalPosition": 66}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51df921a90d9c5cd61fed016e5a45dcb871f3993", "author": {"user": {"login": "kelvah", "name": "roberto emanuel"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/51df921a90d9c5cd61fed016e5a45dcb871f3993", "committedDate": "2020-08-12T12:35:50Z", "message": "KOGITO-2775 Updates following review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1ODk1MjY1", "url": "https://github.com/kiegroup/kogito-apps/pull/330#pullrequestreview-465895265", "createdAt": "2020-08-12T13:05:00Z", "commit": {"oid": "51df921a90d9c5cd61fed016e5a45dcb871f3993"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4919, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}