{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NzkxMDYw", "number": 239, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo1NzoyMlrOEA1JIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwODowMzoxOVrOEBoy4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzA2MTQ0OnYy", "diffSide": "RIGHT", "path": "packages/task-console/src/components/Templates/DataTableContainer/__mocks__/DataTableContainer.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo1NzoyMlrOGcWeBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQwOTo1NzoyMlrOGcWeBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4MTQ0NA==", "bodyText": "I would argue to keep the fact that it is a mock visible, what I am doing in other PR is to name the component as mock, in this case it would be MockedDataTableContainer wdyt? It's then apparent in snapshot that we actually don't expect the component to be rendered properly.", "url": "https://github.com/kiegroup/kogito-apps/pull/239#discussion_r432381444", "createdAt": "2020-05-29T09:57:22Z", "author": {"login": "jstastny-cz"}, "path": "packages/task-console/src/components/Templates/DataTableContainer/__mocks__/DataTableContainer.tsx", "diffHunk": "@@ -0,0 +1,7 @@\n+import React from 'react';\n+\n+const DataTableContainer = (): React.ReactElement => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74a526ae4a107dd3192a732852becf6192328577"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzA3OTUxOnYy", "diffSide": "RIGHT", "path": "packages/task-console/src/components/Templates/DataTableContainer/tests/DataTableContainer.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDowMjo1N1rOGcWpGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQyMzo1OTowNlrOGcvNkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4NDI4MQ==", "bodyText": "For any mocks using MockedProvider we need to do additional steps to have nice snapshots (otherwise we get just empty-state component render even if we provide mocked data).\nHere there are no values passed to the component, so I guess this test is for rendering the DataTableContainer with a DataTableComponent than is in 'empty-state'. So I see two options now:\n\nIf we don't care about the DataTableComponent in the tests here, we should mock it IMO.\nIf we care about DataTableComponent rendering we should also add test where the component would actually show some data.\n\nBut I assume option 1 is sufficient for testing this container, and given that you've already created mock for DataTableComponent, I would just mock it for this test.", "url": "https://github.com/kiegroup/kogito-apps/pull/239#discussion_r432384281", "createdAt": "2020-05-29T10:02:57Z", "author": {"login": "jstastny-cz"}, "path": "packages/task-console/src/components/Templates/DataTableContainer/tests/DataTableContainer.test.tsx", "diffHunk": "@@ -0,0 +1,19 @@\n+import React from 'react';\n+import DataTableContainer from '../DataTableContainer';\n+import { getWrapper } from '@kogito-apps/common';\n+import { MemoryRouter as Router } from 'react-router-dom';\n+import { MockedProvider } from '@apollo/react-testing';\n+\n+describe('DataTableContainer component tests', () => {\n+  it('Snapshot tests', () => {\n+    const wrapper = getWrapper(\n+      <Router>\n+        <MockedProvider>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74a526ae4a107dd3192a732852becf6192328577"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc4NjgzNA==", "bodyText": "@jstastny-cz Updated, Thanks.", "url": "https://github.com/kiegroup/kogito-apps/pull/239#discussion_r432786834", "createdAt": "2020-05-29T23:59:06Z", "author": {"login": "yzhao583"}, "path": "packages/task-console/src/components/Templates/DataTableContainer/tests/DataTableContainer.test.tsx", "diffHunk": "@@ -0,0 +1,19 @@\n+import React from 'react';\n+import DataTableContainer from '../DataTableContainer';\n+import { getWrapper } from '@kogito-apps/common';\n+import { MemoryRouter as Router } from 'react-router-dom';\n+import { MockedProvider } from '@apollo/react-testing';\n+\n+describe('DataTableContainer component tests', () => {\n+  it('Snapshot tests', () => {\n+    const wrapper = getWrapper(\n+      <Router>\n+        <MockedProvider>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4NDI4MQ=="}, "originalCommit": {"oid": "74a526ae4a107dd3192a732852becf6192328577"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzA4NDEyOnYy", "diffSide": "RIGHT", "path": "packages/task-console/src/components/Templates/DataTableContainer/tests/__snapshots__/DataTableContainer.test.tsx.snap", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDowNDozMFrOGcWsFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDowNDozMFrOGcWsFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4NTA0Ng==", "bodyText": "In relation with comment on the test itself -> here would be the place in snapshot to see the mocked component.", "url": "https://github.com/kiegroup/kogito-apps/pull/239#discussion_r432385046", "createdAt": "2020-05-29T10:04:30Z", "author": {"login": "jstastny-cz"}, "path": "packages/task-console/src/components/Templates/DataTableContainer/tests/__snapshots__/DataTableContainer.test.tsx.snap", "diffHunk": "@@ -0,0 +1,237 @@\n+// Jest Snapshot v1, https://goo.gl/fbAQLP\n+\n+exports[`DataTableContainer component tests Snapshot tests 1`] = `\n+<DataTableContainer\n+  ouiaContext={\n+    Object {\n+      \"isOuia\": false,\n+      \"ouiaId\": null,\n+    }\n+  }\n+>\n+  <PageSection\n+    variant=\"light\"\n+  >\n+    <section\n+      className=\"pf-c-page__main-section pf-m-light\"\n+    >\n+      <PageTitleComponent\n+        title=\"User Tasks\"\n+      >\n+        <Title\n+          headingLevel=\"h1\"\n+          size=\"4xl\"\n+        >\n+          <h1\n+            className=\"pf-c-title pf-m-4xl\"\n+          >\n+            User Tasks\n+          </h1>\n+        </Title>\n+      </PageTitleComponent>\n+      <Component>\n+        <ComponentWithOuia\n+          component={[Function]}\n+          componentProps={\n+            Object {\n+              \"children\": Array [\n+                <BreadcrumbItem>\n+                  <Link\n+                    to=\"/\"\n+                  >\n+                    Home\n+                  </Link>\n+                </BreadcrumbItem>,\n+                <BreadcrumbItem\n+                  isActive={true}\n+                >\n+                  User Tasks\n+                </BreadcrumbItem>,\n+              ],\n+            }\n+          }\n+          consumerContext={\n+            Object {\n+              \"isOuia\": false,\n+              \"ouiaId\": null,\n+            }\n+          }\n+        >\n+          <Breadcrumb\n+            ouiaContext={\n+              Object {\n+                \"isOuia\": false,\n+                \"ouiaId\": null,\n+              }\n+            }\n+          >\n+            <nav\n+              aria-label=\"Breadcrumb\"\n+              className=\"pf-c-breadcrumb\"\n+            >\n+              <ol\n+                className=\"pf-c-breadcrumb__list\"\n+              >\n+                <BreadcrumbItem>\n+                  <li\n+                    className=\"pf-c-breadcrumb__item\"\n+                  >\n+                    <Link\n+                      to=\"/\"\n+                    >\n+                      <LinkAnchor\n+                        href=\"/\"\n+                        navigate={[Function]}\n+                      >\n+                        <a\n+                          href=\"/\"\n+                          onClick={[Function]}\n+                        >\n+                          Home\n+                        </a>\n+                      </LinkAnchor>\n+                    </Link>\n+                    <span\n+                      className=\"pf-c-breadcrumb__item-divider\"\n+                    >\n+                      <AngleRightIcon\n+                        color=\"currentColor\"\n+                        noVerticalAlign={false}\n+                        size=\"sm\"\n+                        title={null}\n+                      >\n+                        <svg\n+                          aria-hidden={true}\n+                          aria-labelledby={null}\n+                          fill=\"currentColor\"\n+                          height=\"1em\"\n+                          role=\"img\"\n+                          style={\n+                            Object {\n+                              \"verticalAlign\": \"-0.125em\",\n+                            }\n+                          }\n+                          viewBox=\"0 0 256 512\"\n+                          width=\"1em\"\n+                        >\n+                          <path\n+                            d=\"M224.3 273l-136 136c-9.4 9.4-24.6 9.4-33.9 0l-22.6-22.6c-9.4-9.4-9.4-24.6 0-33.9l96.4-96.4-96.4-96.4c-9.4-9.4-9.4-24.6 0-33.9L54.3 103c9.4-9.4 24.6-9.4 33.9 0l136 136c9.5 9.4 9.5 24.6.1 34z\"\n+                            transform=\"\"\n+                          />\n+                        </svg>\n+                      </AngleRightIcon>\n+                    </span>\n+                  </li>\n+                </BreadcrumbItem>\n+                <BreadcrumbItem\n+                  isActive={true}\n+                >\n+                  <li\n+                    className=\"pf-c-breadcrumb__item\"\n+                  >\n+                    User Tasks\n+                  </li>\n+                </BreadcrumbItem>\n+              </ol>\n+            </nav>\n+          </Breadcrumb>\n+        </ComponentWithOuia>\n+      </Component>\n+    </section>\n+  </PageSection>\n+  <PageSection>\n+    <section\n+      className=\"pf-c-page__main-section\"\n+    >\n+      <Grid\n+        gutter=\"md\"\n+      >\n+        <div\n+          className=\"pf-l-grid pf-m-gutter\"\n+        >\n+          <GridItem\n+            span={12}\n+          >\n+            <div\n+              className=\"pf-l-grid__item pf-m-12-col\"\n+            >\n+              <Card\n+                className=\"data-table\"\n+              >\n+                <article\n+                  className=\"pf-c-card data-table\"\n+                >\n+                  <DataTableComponent", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74a526ae4a107dd3192a732852becf6192328577"}, "originalPosition": 164}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzA5NTI2OnYy", "diffSide": "RIGHT", "path": "packages/task-console/src/components/Organisms/DataTableComponent/tests/DataTableComponent.test.tsx", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDowODowN1rOGcWzCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDowMjowOVrOGdzI5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4NjgyNQ==", "bodyText": "IMO shallow does not actually run the graphql query like mount would. That's why the following snapshot is also just showing only the component with properties being passed, no children - which I would expect based on the mocked data passed in.", "url": "https://github.com/kiegroup/kogito-apps/pull/239#discussion_r432386825", "createdAt": "2020-05-29T10:08:07Z", "author": {"login": "jstastny-cz"}, "path": "packages/task-console/src/components/Organisms/DataTableComponent/tests/DataTableComponent.test.tsx", "diffHunk": "@@ -0,0 +1,164 @@\n+import React from 'react';\n+import { shallow } from 'enzyme';\n+import DataTableComponent from '../DataTableComponent';\n+import { gql } from 'apollo-boost';\n+import { MockedProvider } from '@apollo/react-testing';\n+\n+const data = [\n+  {\n+    id: '45a73767-5da3-49bf-9c40-d533c3e77ef3',\n+    description: null,\n+    name: 'Apply for visa',\n+    priority: '1',\n+    processInstanceId: '9ae7ce3b-d49c-4f35-b843-8ac3d22fa427',\n+    processId: 'travels',\n+    rootProcessInstanceId: null,\n+    rootProcessId: null,\n+    state: 'Ready',\n+    actualOwner: null,\n+    adminGroups: [],\n+    adminUsers: [],\n+    completed: null,\n+    started: '2020-02-19T11:11:56.282Z',\n+    excludedUsers: [],\n+    potentialGroups: [],\n+    potentialUsers: [],\n+    inputs:\n+      '{\"Skippable\":\"true\",\"trip\":{\"city\":\"Boston\",\"country\":\"US\",\"begin\":\"2020-02-19T23:00:00.000+01:00\",\"end\":\"2020-02-26T23:00:00.000+01:00\",\"visaRequired\":true},\"TaskName\":\"VisaApplication\",\"NodeName\":\"Apply for visa\",\"traveller\":{\"firstName\":\"Rachel\",\"lastName\":\"White\",\"email\":\"rwhite@gorle.com\",\"nationality\":\"Polish\",\"address\":{\"street\":\"Cabalone\",\"city\":\"Zerf\",\"zipCode\":\"765756\",\"country\":\"Poland\"}},\"Priority\":\"1\"}\"',\n+    outputs: '{}',\n+    referenceName: 'VisaApplication'\n+  },\n+  {\n+    id: '047ec38d-5d57-4330-8c8d-9bd67b53a529',\n+    description: '',\n+    name: 'Confirm travel',\n+    priority: '1',\n+    processInstanceId: '9ae407dd-cdfa-4722-8a49-0a6d2e14550d',\n+    processId: 'travels',\n+    rootProcessInstanceId: null,\n+    rootProcessId: null,\n+    state: 'Ready',\n+    actualOwner: null,\n+    adminGroups: [],\n+    adminUsers: [],\n+    completed: null,\n+    started: '2020-02-19T10:59:34.185Z',\n+    excludedUsers: [],\n+    potentialGroups: [],\n+    potentialUsers: [],\n+    inputs:\n+      '{\"flight\":{\"flightNumber\":\"MX555\",\"seat\":null,\"gate\":null,\"departure\":\"2019-12-09T23:00:00.000+01:00\",\"arrival\":\"2019-12-14T23:00:00.000+01:00\"},\"TaskName\":\"ConfirmTravel\",\"NodeName\":\"Confirm travel\",\"Priority\":\"1\",\"Skippable\":\"true\",\"hotel\":{\"name\":\"Perfect hotel\",\"address\":{\"street\":\"street\",\"city\":\"New York\",\"zipCode\":\"12345\",\"country\":\"US\"},\"phone\":\"09876543\",\"bookingNumber\":\"XX-012345\",\"room\":null}}',\n+    outputs: '{\"ActorId\":\"\"}',\n+    referenceName: 'ConfirmTravel'\n+  }\n+];\n+const columns = ['ProcessId', 'Name', 'Priority', 'ProcessInstanceId', 'State'];\n+const GET_USER_TASKS_BY_STATE = gql`\n+  query getUserTasksByState($state: String) {\n+    ProcessInstances(where: { state: { equal: $state } }) {\n+      id\n+      description\n+      name\n+      priority\n+      processInstanceId\n+      processId\n+      rootProcessInstanceId\n+      rootProcessId\n+      state\n+      actualOwner\n+      adminGroups\n+      adminUsers\n+      completed\n+      started\n+      excludedUsers\n+      potentialGroups\n+      potentialUsers\n+      inputs\n+      outputs\n+      referenceName\n+    }\n+  }\n+`;\n+const mocks = [\n+  {\n+    request: {\n+      query: GET_USER_TASKS_BY_STATE,\n+      variables: {\n+        state: ['Ready']\n+      }\n+    },\n+    result: {\n+      data: {\n+        UserTaskInstances: [\n+          {\n+            id: '45a73767-5da3-49bf-9c40-d533c3e77ef3',\n+            description: null,\n+            name: 'Apply for visa',\n+            priority: '1',\n+            processInstanceId: '9ae7ce3b-d49c-4f35-b843-8ac3d22fa427',\n+            processId: 'travels',\n+            rootProcessInstanceId: null,\n+            rootProcessId: null,\n+            state: 'Ready',\n+            actualOwner: null,\n+            adminGroups: [],\n+            adminUsers: [],\n+            completed: null,\n+            started: '2020-02-19T11:11:56.282Z',\n+            excludedUsers: [],\n+            potentialGroups: [],\n+            potentialUsers: [],\n+            inputs:\n+              '{\"Skippable\":\"true\",\"trip\":{\"city\":\"Boston\",\"country\":\"US\",\"begin\":\"2020-02-19T23:00:00.000+01:00\",\"end\":\"2020-02-26T23:00:00.000+01:00\",\"visaRequired\":true},\"TaskName\":\"VisaApplication\",\"NodeName\":\"Apply for visa\",\"traveller\":{\"firstName\":\"Rachel\",\"lastName\":\"White\",\"email\":\"rwhite@gorle.com\",\"nationality\":\"Polish\",\"address\":{\"street\":\"Cabalone\",\"city\":\"Zerf\",\"zipCode\":\"765756\",\"country\":\"Poland\"}},\"Priority\":\"1\"}\"',\n+            outputs: '{}',\n+            referenceName: 'VisaApplication'\n+          },\n+          {\n+            id: '047ec38d-5d57-4330-8c8d-9bd67b53a529',\n+            description: '',\n+            name: 'Confirm travel',\n+            priority: '1',\n+            processInstanceId: '9ae407dd-cdfa-4722-8a49-0a6d2e14550d',\n+            processId: 'travels',\n+            rootProcessInstanceId: null,\n+            rootProcessId: null,\n+            state: 'Ready',\n+            actualOwner: null,\n+            adminGroups: [],\n+            adminUsers: [],\n+            completed: null,\n+            started: '2020-02-19T10:59:34.185Z',\n+            excludedUsers: [],\n+            potentialGroups: [],\n+            potentialUsers: [],\n+            inputs:\n+              '{\"flight\":{\"flightNumber\":\"MX555\",\"seat\":null,\"gate\":null,\"departure\":\"2019-12-09T23:00:00.000+01:00\",\"arrival\":\"2019-12-14T23:00:00.000+01:00\"},\"TaskName\":\"ConfirmTravel\",\"NodeName\":\"Confirm travel\",\"Priority\":\"1\",\"Skippable\":\"true\",\"hotel\":{\"name\":\"Perfect hotel\",\"address\":{\"street\":\"street\",\"city\":\"New York\",\"zipCode\":\"12345\",\"country\":\"US\"},\"phone\":\"09876543\",\"bookingNumber\":\"XX-012345\",\"room\":null}}',\n+            outputs: '{\"ActorId\":\"\"}',\n+            referenceName: 'ConfirmTravel'\n+          }\n+        ]\n+      }\n+    }\n+  }\n+];\n+const props1 = {\n+  data,\n+  isLoading: false,\n+  columns,\n+  networkStatus: 1,\n+  error: {},\n+  refetch: jest.fn(),\n+  LoadingComponent: undefined,\n+  ErrorComponent: undefined\n+};\n+\n+describe('DataTable component tests', () => {\n+  it('Snapshot tests 1', () => {\n+    const wrapper = shallow(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74a526ae4a107dd3192a732852becf6192328577"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM5MDQzMg==", "bodyText": "If you decide to use mount instead mind that the test needs to be async, I have a solution in my PR, where I just introduce another wrapper for such cases: getWrapperAsync, then the test would look like:\nit('', async ()=> {\n     const wrapper = await getWrapperAsync(....)\n     expect(wrapper).toMatchSnapshot();\n})\n\nReach out to me if needed.", "url": "https://github.com/kiegroup/kogito-apps/pull/239#discussion_r432390432", "createdAt": "2020-05-29T10:15:44Z", "author": {"login": "jstastny-cz"}, "path": "packages/task-console/src/components/Organisms/DataTableComponent/tests/DataTableComponent.test.tsx", "diffHunk": "@@ -0,0 +1,164 @@\n+import React from 'react';\n+import { shallow } from 'enzyme';\n+import DataTableComponent from '../DataTableComponent';\n+import { gql } from 'apollo-boost';\n+import { MockedProvider } from '@apollo/react-testing';\n+\n+const data = [\n+  {\n+    id: '45a73767-5da3-49bf-9c40-d533c3e77ef3',\n+    description: null,\n+    name: 'Apply for visa',\n+    priority: '1',\n+    processInstanceId: '9ae7ce3b-d49c-4f35-b843-8ac3d22fa427',\n+    processId: 'travels',\n+    rootProcessInstanceId: null,\n+    rootProcessId: null,\n+    state: 'Ready',\n+    actualOwner: null,\n+    adminGroups: [],\n+    adminUsers: [],\n+    completed: null,\n+    started: '2020-02-19T11:11:56.282Z',\n+    excludedUsers: [],\n+    potentialGroups: [],\n+    potentialUsers: [],\n+    inputs:\n+      '{\"Skippable\":\"true\",\"trip\":{\"city\":\"Boston\",\"country\":\"US\",\"begin\":\"2020-02-19T23:00:00.000+01:00\",\"end\":\"2020-02-26T23:00:00.000+01:00\",\"visaRequired\":true},\"TaskName\":\"VisaApplication\",\"NodeName\":\"Apply for visa\",\"traveller\":{\"firstName\":\"Rachel\",\"lastName\":\"White\",\"email\":\"rwhite@gorle.com\",\"nationality\":\"Polish\",\"address\":{\"street\":\"Cabalone\",\"city\":\"Zerf\",\"zipCode\":\"765756\",\"country\":\"Poland\"}},\"Priority\":\"1\"}\"',\n+    outputs: '{}',\n+    referenceName: 'VisaApplication'\n+  },\n+  {\n+    id: '047ec38d-5d57-4330-8c8d-9bd67b53a529',\n+    description: '',\n+    name: 'Confirm travel',\n+    priority: '1',\n+    processInstanceId: '9ae407dd-cdfa-4722-8a49-0a6d2e14550d',\n+    processId: 'travels',\n+    rootProcessInstanceId: null,\n+    rootProcessId: null,\n+    state: 'Ready',\n+    actualOwner: null,\n+    adminGroups: [],\n+    adminUsers: [],\n+    completed: null,\n+    started: '2020-02-19T10:59:34.185Z',\n+    excludedUsers: [],\n+    potentialGroups: [],\n+    potentialUsers: [],\n+    inputs:\n+      '{\"flight\":{\"flightNumber\":\"MX555\",\"seat\":null,\"gate\":null,\"departure\":\"2019-12-09T23:00:00.000+01:00\",\"arrival\":\"2019-12-14T23:00:00.000+01:00\"},\"TaskName\":\"ConfirmTravel\",\"NodeName\":\"Confirm travel\",\"Priority\":\"1\",\"Skippable\":\"true\",\"hotel\":{\"name\":\"Perfect hotel\",\"address\":{\"street\":\"street\",\"city\":\"New York\",\"zipCode\":\"12345\",\"country\":\"US\"},\"phone\":\"09876543\",\"bookingNumber\":\"XX-012345\",\"room\":null}}',\n+    outputs: '{\"ActorId\":\"\"}',\n+    referenceName: 'ConfirmTravel'\n+  }\n+];\n+const columns = ['ProcessId', 'Name', 'Priority', 'ProcessInstanceId', 'State'];\n+const GET_USER_TASKS_BY_STATE = gql`\n+  query getUserTasksByState($state: String) {\n+    ProcessInstances(where: { state: { equal: $state } }) {\n+      id\n+      description\n+      name\n+      priority\n+      processInstanceId\n+      processId\n+      rootProcessInstanceId\n+      rootProcessId\n+      state\n+      actualOwner\n+      adminGroups\n+      adminUsers\n+      completed\n+      started\n+      excludedUsers\n+      potentialGroups\n+      potentialUsers\n+      inputs\n+      outputs\n+      referenceName\n+    }\n+  }\n+`;\n+const mocks = [\n+  {\n+    request: {\n+      query: GET_USER_TASKS_BY_STATE,\n+      variables: {\n+        state: ['Ready']\n+      }\n+    },\n+    result: {\n+      data: {\n+        UserTaskInstances: [\n+          {\n+            id: '45a73767-5da3-49bf-9c40-d533c3e77ef3',\n+            description: null,\n+            name: 'Apply for visa',\n+            priority: '1',\n+            processInstanceId: '9ae7ce3b-d49c-4f35-b843-8ac3d22fa427',\n+            processId: 'travels',\n+            rootProcessInstanceId: null,\n+            rootProcessId: null,\n+            state: 'Ready',\n+            actualOwner: null,\n+            adminGroups: [],\n+            adminUsers: [],\n+            completed: null,\n+            started: '2020-02-19T11:11:56.282Z',\n+            excludedUsers: [],\n+            potentialGroups: [],\n+            potentialUsers: [],\n+            inputs:\n+              '{\"Skippable\":\"true\",\"trip\":{\"city\":\"Boston\",\"country\":\"US\",\"begin\":\"2020-02-19T23:00:00.000+01:00\",\"end\":\"2020-02-26T23:00:00.000+01:00\",\"visaRequired\":true},\"TaskName\":\"VisaApplication\",\"NodeName\":\"Apply for visa\",\"traveller\":{\"firstName\":\"Rachel\",\"lastName\":\"White\",\"email\":\"rwhite@gorle.com\",\"nationality\":\"Polish\",\"address\":{\"street\":\"Cabalone\",\"city\":\"Zerf\",\"zipCode\":\"765756\",\"country\":\"Poland\"}},\"Priority\":\"1\"}\"',\n+            outputs: '{}',\n+            referenceName: 'VisaApplication'\n+          },\n+          {\n+            id: '047ec38d-5d57-4330-8c8d-9bd67b53a529',\n+            description: '',\n+            name: 'Confirm travel',\n+            priority: '1',\n+            processInstanceId: '9ae407dd-cdfa-4722-8a49-0a6d2e14550d',\n+            processId: 'travels',\n+            rootProcessInstanceId: null,\n+            rootProcessId: null,\n+            state: 'Ready',\n+            actualOwner: null,\n+            adminGroups: [],\n+            adminUsers: [],\n+            completed: null,\n+            started: '2020-02-19T10:59:34.185Z',\n+            excludedUsers: [],\n+            potentialGroups: [],\n+            potentialUsers: [],\n+            inputs:\n+              '{\"flight\":{\"flightNumber\":\"MX555\",\"seat\":null,\"gate\":null,\"departure\":\"2019-12-09T23:00:00.000+01:00\",\"arrival\":\"2019-12-14T23:00:00.000+01:00\"},\"TaskName\":\"ConfirmTravel\",\"NodeName\":\"Confirm travel\",\"Priority\":\"1\",\"Skippable\":\"true\",\"hotel\":{\"name\":\"Perfect hotel\",\"address\":{\"street\":\"street\",\"city\":\"New York\",\"zipCode\":\"12345\",\"country\":\"US\"},\"phone\":\"09876543\",\"bookingNumber\":\"XX-012345\",\"room\":null}}',\n+            outputs: '{\"ActorId\":\"\"}',\n+            referenceName: 'ConfirmTravel'\n+          }\n+        ]\n+      }\n+    }\n+  }\n+];\n+const props1 = {\n+  data,\n+  isLoading: false,\n+  columns,\n+  networkStatus: 1,\n+  error: {},\n+  refetch: jest.fn(),\n+  LoadingComponent: undefined,\n+  ErrorComponent: undefined\n+};\n+\n+describe('DataTable component tests', () => {\n+  it('Snapshot tests 1', () => {\n+    const wrapper = shallow(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4NjgyNQ=="}, "originalCommit": {"oid": "74a526ae4a107dd3192a732852becf6192328577"}, "originalPosition": 157}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg5OTc0OQ==", "bodyText": "@jstastny-cz Updated, thanks", "url": "https://github.com/kiegroup/kogito-apps/pull/239#discussion_r433899749", "createdAt": "2020-06-02T14:02:09Z", "author": {"login": "yzhao583"}, "path": "packages/task-console/src/components/Organisms/DataTableComponent/tests/DataTableComponent.test.tsx", "diffHunk": "@@ -0,0 +1,164 @@\n+import React from 'react';\n+import { shallow } from 'enzyme';\n+import DataTableComponent from '../DataTableComponent';\n+import { gql } from 'apollo-boost';\n+import { MockedProvider } from '@apollo/react-testing';\n+\n+const data = [\n+  {\n+    id: '45a73767-5da3-49bf-9c40-d533c3e77ef3',\n+    description: null,\n+    name: 'Apply for visa',\n+    priority: '1',\n+    processInstanceId: '9ae7ce3b-d49c-4f35-b843-8ac3d22fa427',\n+    processId: 'travels',\n+    rootProcessInstanceId: null,\n+    rootProcessId: null,\n+    state: 'Ready',\n+    actualOwner: null,\n+    adminGroups: [],\n+    adminUsers: [],\n+    completed: null,\n+    started: '2020-02-19T11:11:56.282Z',\n+    excludedUsers: [],\n+    potentialGroups: [],\n+    potentialUsers: [],\n+    inputs:\n+      '{\"Skippable\":\"true\",\"trip\":{\"city\":\"Boston\",\"country\":\"US\",\"begin\":\"2020-02-19T23:00:00.000+01:00\",\"end\":\"2020-02-26T23:00:00.000+01:00\",\"visaRequired\":true},\"TaskName\":\"VisaApplication\",\"NodeName\":\"Apply for visa\",\"traveller\":{\"firstName\":\"Rachel\",\"lastName\":\"White\",\"email\":\"rwhite@gorle.com\",\"nationality\":\"Polish\",\"address\":{\"street\":\"Cabalone\",\"city\":\"Zerf\",\"zipCode\":\"765756\",\"country\":\"Poland\"}},\"Priority\":\"1\"}\"',\n+    outputs: '{}',\n+    referenceName: 'VisaApplication'\n+  },\n+  {\n+    id: '047ec38d-5d57-4330-8c8d-9bd67b53a529',\n+    description: '',\n+    name: 'Confirm travel',\n+    priority: '1',\n+    processInstanceId: '9ae407dd-cdfa-4722-8a49-0a6d2e14550d',\n+    processId: 'travels',\n+    rootProcessInstanceId: null,\n+    rootProcessId: null,\n+    state: 'Ready',\n+    actualOwner: null,\n+    adminGroups: [],\n+    adminUsers: [],\n+    completed: null,\n+    started: '2020-02-19T10:59:34.185Z',\n+    excludedUsers: [],\n+    potentialGroups: [],\n+    potentialUsers: [],\n+    inputs:\n+      '{\"flight\":{\"flightNumber\":\"MX555\",\"seat\":null,\"gate\":null,\"departure\":\"2019-12-09T23:00:00.000+01:00\",\"arrival\":\"2019-12-14T23:00:00.000+01:00\"},\"TaskName\":\"ConfirmTravel\",\"NodeName\":\"Confirm travel\",\"Priority\":\"1\",\"Skippable\":\"true\",\"hotel\":{\"name\":\"Perfect hotel\",\"address\":{\"street\":\"street\",\"city\":\"New York\",\"zipCode\":\"12345\",\"country\":\"US\"},\"phone\":\"09876543\",\"bookingNumber\":\"XX-012345\",\"room\":null}}',\n+    outputs: '{\"ActorId\":\"\"}',\n+    referenceName: 'ConfirmTravel'\n+  }\n+];\n+const columns = ['ProcessId', 'Name', 'Priority', 'ProcessInstanceId', 'State'];\n+const GET_USER_TASKS_BY_STATE = gql`\n+  query getUserTasksByState($state: String) {\n+    ProcessInstances(where: { state: { equal: $state } }) {\n+      id\n+      description\n+      name\n+      priority\n+      processInstanceId\n+      processId\n+      rootProcessInstanceId\n+      rootProcessId\n+      state\n+      actualOwner\n+      adminGroups\n+      adminUsers\n+      completed\n+      started\n+      excludedUsers\n+      potentialGroups\n+      potentialUsers\n+      inputs\n+      outputs\n+      referenceName\n+    }\n+  }\n+`;\n+const mocks = [\n+  {\n+    request: {\n+      query: GET_USER_TASKS_BY_STATE,\n+      variables: {\n+        state: ['Ready']\n+      }\n+    },\n+    result: {\n+      data: {\n+        UserTaskInstances: [\n+          {\n+            id: '45a73767-5da3-49bf-9c40-d533c3e77ef3',\n+            description: null,\n+            name: 'Apply for visa',\n+            priority: '1',\n+            processInstanceId: '9ae7ce3b-d49c-4f35-b843-8ac3d22fa427',\n+            processId: 'travels',\n+            rootProcessInstanceId: null,\n+            rootProcessId: null,\n+            state: 'Ready',\n+            actualOwner: null,\n+            adminGroups: [],\n+            adminUsers: [],\n+            completed: null,\n+            started: '2020-02-19T11:11:56.282Z',\n+            excludedUsers: [],\n+            potentialGroups: [],\n+            potentialUsers: [],\n+            inputs:\n+              '{\"Skippable\":\"true\",\"trip\":{\"city\":\"Boston\",\"country\":\"US\",\"begin\":\"2020-02-19T23:00:00.000+01:00\",\"end\":\"2020-02-26T23:00:00.000+01:00\",\"visaRequired\":true},\"TaskName\":\"VisaApplication\",\"NodeName\":\"Apply for visa\",\"traveller\":{\"firstName\":\"Rachel\",\"lastName\":\"White\",\"email\":\"rwhite@gorle.com\",\"nationality\":\"Polish\",\"address\":{\"street\":\"Cabalone\",\"city\":\"Zerf\",\"zipCode\":\"765756\",\"country\":\"Poland\"}},\"Priority\":\"1\"}\"',\n+            outputs: '{}',\n+            referenceName: 'VisaApplication'\n+          },\n+          {\n+            id: '047ec38d-5d57-4330-8c8d-9bd67b53a529',\n+            description: '',\n+            name: 'Confirm travel',\n+            priority: '1',\n+            processInstanceId: '9ae407dd-cdfa-4722-8a49-0a6d2e14550d',\n+            processId: 'travels',\n+            rootProcessInstanceId: null,\n+            rootProcessId: null,\n+            state: 'Ready',\n+            actualOwner: null,\n+            adminGroups: [],\n+            adminUsers: [],\n+            completed: null,\n+            started: '2020-02-19T10:59:34.185Z',\n+            excludedUsers: [],\n+            potentialGroups: [],\n+            potentialUsers: [],\n+            inputs:\n+              '{\"flight\":{\"flightNumber\":\"MX555\",\"seat\":null,\"gate\":null,\"departure\":\"2019-12-09T23:00:00.000+01:00\",\"arrival\":\"2019-12-14T23:00:00.000+01:00\"},\"TaskName\":\"ConfirmTravel\",\"NodeName\":\"Confirm travel\",\"Priority\":\"1\",\"Skippable\":\"true\",\"hotel\":{\"name\":\"Perfect hotel\",\"address\":{\"street\":\"street\",\"city\":\"New York\",\"zipCode\":\"12345\",\"country\":\"US\"},\"phone\":\"09876543\",\"bookingNumber\":\"XX-012345\",\"room\":null}}',\n+            outputs: '{\"ActorId\":\"\"}',\n+            referenceName: 'ConfirmTravel'\n+          }\n+        ]\n+      }\n+    }\n+  }\n+];\n+const props1 = {\n+  data,\n+  isLoading: false,\n+  columns,\n+  networkStatus: 1,\n+  error: {},\n+  refetch: jest.fn(),\n+  LoadingComponent: undefined,\n+  ErrorComponent: undefined\n+};\n+\n+describe('DataTable component tests', () => {\n+  it('Snapshot tests 1', () => {\n+    const wrapper = shallow(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4NjgyNQ=="}, "originalCommit": {"oid": "74a526ae4a107dd3192a732852becf6192328577"}, "originalPosition": 157}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzA5ODAzOnYy", "diffSide": "RIGHT", "path": "packages/task-console/src/components/Organisms/DataTableComponent/__mocks__/DataTableComponent.tsx", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMDowOToxM1rOGcW05g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDowMjoyOFrOGdzKJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4NzMwMg==", "bodyText": "I would call the component MockedDataList -> for the snapshots to apparently show that the component is actually mocked.", "url": "https://github.com/kiegroup/kogito-apps/pull/239#discussion_r432387302", "createdAt": "2020-05-29T10:09:13Z", "author": {"login": "jstastny-cz"}, "path": "packages/task-console/src/components/Organisms/DataTableComponent/__mocks__/DataTableComponent.tsx", "diffHunk": "@@ -0,0 +1,7 @@\n+import React from 'react';\n+\n+const DataListComponent = (): React.ReactElement => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74a526ae4a107dd3192a732852becf6192328577"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjc1MzUwMA==", "bodyText": "Thanks! Will update.", "url": "https://github.com/kiegroup/kogito-apps/pull/239#discussion_r432753500", "createdAt": "2020-05-29T21:46:33Z", "author": {"login": "yzhao583"}, "path": "packages/task-console/src/components/Organisms/DataTableComponent/__mocks__/DataTableComponent.tsx", "diffHunk": "@@ -0,0 +1,7 @@\n+import React from 'react';\n+\n+const DataListComponent = (): React.ReactElement => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4NzMwMg=="}, "originalCommit": {"oid": "74a526ae4a107dd3192a732852becf6192328577"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkwMDA2OQ==", "bodyText": "@jstastny-cz Updated, thanks", "url": "https://github.com/kiegroup/kogito-apps/pull/239#discussion_r433900069", "createdAt": "2020-06-02T14:02:28Z", "author": {"login": "yzhao583"}, "path": "packages/task-console/src/components/Organisms/DataTableComponent/__mocks__/DataTableComponent.tsx", "diffHunk": "@@ -0,0 +1,7 @@\n+import React from 'react';\n+\n+const DataListComponent = (): React.ReactElement => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjM4NzMwMg=="}, "originalCommit": {"oid": "74a526ae4a107dd3192a732852becf6192328577"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDI3MDMxOnYy", "diffSide": "RIGHT", "path": "packages/task-console/src/components/Templates/DataTableContainer/DataTable.css", "isResolved": false, "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQyMToxNzo1MlrOGdaenQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQyMDowMjozNVrOGfV1eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ5NTcwOQ==", "bodyText": "Two comments here. First, I think this is the fourth time we have .spinner-center and .error-text defined between the packages. We definitely need to think about how to share common CSS here.\nSecond, we need to establish some good naming practices for CSS classes. I have been using something close to .kogito-packagename\u2014block__element\u2014modifier. In the domain explorer, we\u2019ve used this to solve the same problem of a too-wide table.\n.kogito-management-console--domain-explorer__table-OverFlow {\noverflow-y: auto;\n}", "url": "https://github.com/kiegroup/kogito-apps/pull/239#discussion_r433495709", "createdAt": "2020-06-01T21:17:52Z", "author": {"login": "srambach"}, "path": "packages/task-console/src/components/Templates/DataTableContainer/DataTable.css", "diffHunk": "@@ -0,0 +1,13 @@\n+.spinner-center {\n+  text-align: center;\n+  margin-top: 5%;\n+}\n+\n+.error-text{\n+  text-align: center;\n+  margin-top: 5%;\n+}\n+\n+.data-table{\n+  overflow: auto;\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "915574c8d9b8c7fcb18fc51ea50b0ec591f0791a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkwNjExMw==", "bodyText": "@srambach Thanks for the feedback. Really appreciate that!\n\nTwo comments here. First, I think this is the fourth time we have .spinner-center and .error-text defined between the packages. We definitely need to think about how to share common CSS here.\nYes, I totally agree we should define some common CSS class here so it can be shared. Could you please suggest how and where should we do that? Thanks.\n\n\nSecond, we need to establish some good naming practices for CSS classes. I have been using something close to .kogito-packagename\u2014block__element\u2014modifier. In the domain explorer, we\u2019ve used this to solve the same problem of a too-wide table.\n\nThis component it not only for Task Console, and maybe it is not only for KOGITO as well. So I assume using some general name may make more sense here? wdyt", "url": "https://github.com/kiegroup/kogito-apps/pull/239#discussion_r433906113", "createdAt": "2020-06-02T14:08:39Z", "author": {"login": "yzhao583"}, "path": "packages/task-console/src/components/Templates/DataTableContainer/DataTable.css", "diffHunk": "@@ -0,0 +1,13 @@\n+.spinner-center {\n+  text-align: center;\n+  margin-top: 5%;\n+}\n+\n+.error-text{\n+  text-align: center;\n+  margin-top: 5%;\n+}\n+\n+.data-table{\n+  overflow: auto;\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ5NTcwOQ=="}, "originalCommit": {"oid": "915574c8d9b8c7fcb18fc51ea50b0ec591f0791a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDU3NjIxOQ==", "bodyText": "@yzhao583\nSince the overflow is on the data table in task console, then how about .kogito-task-console--data-table--Overflow? If at some point the data tables are combined into the common package, then they can share a class in common.\nDo we need to set overflow here, or is overflow-y sufficient?\nAs for .error-text and .spinner-center - I don't even see them being used anywhere even though they are defined several times. Can they be removed?", "url": "https://github.com/kiegroup/kogito-apps/pull/239#discussion_r434576219", "createdAt": "2020-06-03T13:42:41Z", "author": {"login": "srambach"}, "path": "packages/task-console/src/components/Templates/DataTableContainer/DataTable.css", "diffHunk": "@@ -0,0 +1,13 @@\n+.spinner-center {\n+  text-align: center;\n+  margin-top: 5%;\n+}\n+\n+.error-text{\n+  text-align: center;\n+  margin-top: 5%;\n+}\n+\n+.data-table{\n+  overflow: auto;\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ5NTcwOQ=="}, "originalCommit": {"oid": "915574c8d9b8c7fcb18fc51ea50b0ec591f0791a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcxNjk2Nw==", "bodyText": "@srambach Yes, you are right, the Data Table is in task console, but it maybe reused for by applications. And the reason to add overflow here is handle the case that there is too many columns.\nI will remove the unused classes, thanks.", "url": "https://github.com/kiegroup/kogito-apps/pull/239#discussion_r434716967", "createdAt": "2020-06-03T16:56:09Z", "author": {"login": "yzhao583"}, "path": "packages/task-console/src/components/Templates/DataTableContainer/DataTable.css", "diffHunk": "@@ -0,0 +1,13 @@\n+.spinner-center {\n+  text-align: center;\n+  margin-top: 5%;\n+}\n+\n+.error-text{\n+  text-align: center;\n+  margin-top: 5%;\n+}\n+\n+.data-table{\n+  overflow: auto;\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ5NTcwOQ=="}, "originalCommit": {"oid": "915574c8d9b8c7fcb18fc51ea50b0ec591f0791a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQ0NjIzOQ==", "bodyText": "@yzhao583 Great!  What other applications would this class be used in? Do you mean something outside of Kogito?", "url": "https://github.com/kiegroup/kogito-apps/pull/239#discussion_r435446239", "createdAt": "2020-06-04T18:00:40Z", "author": {"login": "srambach"}, "path": "packages/task-console/src/components/Templates/DataTableContainer/DataTable.css", "diffHunk": "@@ -0,0 +1,13 @@\n+.spinner-center {\n+  text-align: center;\n+  margin-top: 5%;\n+}\n+\n+.error-text{\n+  text-align: center;\n+  margin-top: 5%;\n+}\n+\n+.data-table{\n+  overflow: auto;\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ5NTcwOQ=="}, "originalCommit": {"oid": "915574c8d9b8c7fcb18fc51ea50b0ec591f0791a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUwMzkzMA==", "bodyText": "@srambach Yes, it could be. Although the main goal is build a Table Component for Task Console, there is also another goal that to make is reusable for other applications as well.", "url": "https://github.com/kiegroup/kogito-apps/pull/239#discussion_r435503930", "createdAt": "2020-06-04T19:37:53Z", "author": {"login": "yzhao583"}, "path": "packages/task-console/src/components/Templates/DataTableContainer/DataTable.css", "diffHunk": "@@ -0,0 +1,13 @@\n+.spinner-center {\n+  text-align: center;\n+  margin-top: 5%;\n+}\n+\n+.error-text{\n+  text-align: center;\n+  margin-top: 5%;\n+}\n+\n+.data-table{\n+  overflow: auto;\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ5NTcwOQ=="}, "originalCommit": {"oid": "915574c8d9b8c7fcb18fc51ea50b0ec591f0791a"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTUxNjc5Mw==", "bodyText": "OK, I see. I still feel that it would be best to namespace any classes we are adding. That way it will avoid potential conflicts and identify the source of the class for debugging.", "url": "https://github.com/kiegroup/kogito-apps/pull/239#discussion_r435516793", "createdAt": "2020-06-04T20:02:35Z", "author": {"login": "srambach"}, "path": "packages/task-console/src/components/Templates/DataTableContainer/DataTable.css", "diffHunk": "@@ -0,0 +1,13 @@\n+.spinner-center {\n+  text-align: center;\n+  margin-top: 5%;\n+}\n+\n+.error-text{\n+  text-align: center;\n+  margin-top: 5%;\n+}\n+\n+.data-table{\n+  overflow: auto;\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzQ5NTcwOQ=="}, "originalCommit": {"oid": "915574c8d9b8c7fcb18fc51ea50b0ec591f0791a"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDk2NzY4OnYy", "diffSide": "RIGHT", "path": "packages/task-console/src/components/Organisms/DataTableComponent/DataTableComponent.tsx", "isResolved": false, "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwMzo1MTowNFrOGdhKFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQwOToyMjoxOFrOGfnCHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwNTE0Mg==", "bodyText": "Hello @yzhao583 , So there was a discussion on naming the components and  everyone feels that it would be better to remove the 'component' at the end of every components(for instance in this case just the DataTable). wdyt @cristianonicolai @Sara4994  @srambach . Other than that the PR looks awesome :)", "url": "https://github.com/kiegroup/kogito-apps/pull/239#discussion_r433605142", "createdAt": "2020-06-02T03:51:04Z", "author": {"login": "AjayJagan"}, "path": "packages/task-console/src/components/Organisms/DataTableComponent/DataTableComponent.tsx", "diffHunk": "@@ -0,0 +1,140 @@\n+import React, { useEffect, useState } from 'react';\n+import { Bullseye } from '@patternfly/react-core';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+import EmptyStateComponent from '../../Atoms/EmptyStateComponent/EmptyStateComponent';\n+import '@patternfly/patternfly/patternfly-addons.css';\n+import _ from 'lodash';\n+\n+interface IOwnProps {\n+  data: any[];\n+  isLoading: boolean;\n+  columns?: any[];\n+  networkStatus: any;\n+  error: any;\n+  refetch: () => void;\n+  LoadingComponent?: React.ReactNode;\n+  ErrorComponent?: React.ReactNode;\n+}\n+\n+const getColumns = (data, columns) => {\n+  let columnList = [];\n+  if (data) {\n+    columnList = columns\n+      ? columns\n+      : _.filter(_.keys(_.sample(data)), key => key !== '__typename');\n+  }\n+  return columnList;\n+};\n+\n+const getRows = (data, columns) => {\n+  let rowList = [];\n+  if (data) {\n+    rowList = data.map(rowData => {\n+      return {\n+        cells: _.reduce(\n+          columns,\n+          (result, column) => {\n+            _.forEach(rowData, (value, key) => {\n+              if (key.toLowerCase() === column.toLowerCase()) {\n+                if (_.isEmpty(value) || value === '{}') {\n+                  result.push('N/A');\n+                } else {\n+                  result.push(value);\n+                }\n+              }\n+            });\n+            return result;\n+          },\n+          []\n+        ),\n+        rowKey: JSON.stringify(rowData).substr(0, 20) // This is a walkaround to bypass the \"id\" cannot be included in \"columns\" issue\n+      };\n+    });\n+  }\n+  return rowList;\n+};\n+\n+const DataTableComponent: React.FC<IOwnProps> = ({", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "915574c8d9b8c7fcb18fc51ea50b0ec591f0791a"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYxMjU2OQ==", "bodyText": "+1 for dropping Compoment from the naming. Also, @yzhao583 is this a Task specific table, do we want to maybe name for specifically or even keep as generic and move to the common module?", "url": "https://github.com/kiegroup/kogito-apps/pull/239#discussion_r433612569", "createdAt": "2020-06-02T04:25:05Z", "author": {"login": "cristianonicolai"}, "path": "packages/task-console/src/components/Organisms/DataTableComponent/DataTableComponent.tsx", "diffHunk": "@@ -0,0 +1,140 @@\n+import React, { useEffect, useState } from 'react';\n+import { Bullseye } from '@patternfly/react-core';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+import EmptyStateComponent from '../../Atoms/EmptyStateComponent/EmptyStateComponent';\n+import '@patternfly/patternfly/patternfly-addons.css';\n+import _ from 'lodash';\n+\n+interface IOwnProps {\n+  data: any[];\n+  isLoading: boolean;\n+  columns?: any[];\n+  networkStatus: any;\n+  error: any;\n+  refetch: () => void;\n+  LoadingComponent?: React.ReactNode;\n+  ErrorComponent?: React.ReactNode;\n+}\n+\n+const getColumns = (data, columns) => {\n+  let columnList = [];\n+  if (data) {\n+    columnList = columns\n+      ? columns\n+      : _.filter(_.keys(_.sample(data)), key => key !== '__typename');\n+  }\n+  return columnList;\n+};\n+\n+const getRows = (data, columns) => {\n+  let rowList = [];\n+  if (data) {\n+    rowList = data.map(rowData => {\n+      return {\n+        cells: _.reduce(\n+          columns,\n+          (result, column) => {\n+            _.forEach(rowData, (value, key) => {\n+              if (key.toLowerCase() === column.toLowerCase()) {\n+                if (_.isEmpty(value) || value === '{}') {\n+                  result.push('N/A');\n+                } else {\n+                  result.push(value);\n+                }\n+              }\n+            });\n+            return result;\n+          },\n+          []\n+        ),\n+        rowKey: JSON.stringify(rowData).substr(0, 20) // This is a walkaround to bypass the \"id\" cannot be included in \"columns\" issue\n+      };\n+    });\n+  }\n+  return rowList;\n+};\n+\n+const DataTableComponent: React.FC<IOwnProps> = ({", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwNTE0Mg=="}, "originalCommit": {"oid": "915574c8d9b8c7fcb18fc51ea50b0ec591f0791a"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkxMzU5NQ==", "bodyText": "@AjayJagan Thanks for the feedback, really appreciate that!\n\nSo there was a discussion on naming the components and everyone feels that it would be better to remove the 'component' at the end of every components(for instance in this case just the DataTable)\n\nYes, I feel like removing 'component' in the name make more sense.\n@cristianonicolai Thanks for the feedback, really appreciate that!\n\nis this a Task specific table, do we want to maybe name for specifically or even keep as generic and move to the common module?\n\nThis is not only for Task Console, the goal here is to make a general Table Component. The reason I did not put it into the Common module is that I found there is also a similar Table Component in Domain Explorer module, and it has more functionalities, I am not sure which one should we put into the Common module. Any suggestion? Thanks", "url": "https://github.com/kiegroup/kogito-apps/pull/239#discussion_r433913595", "createdAt": "2020-06-02T14:18:40Z", "author": {"login": "yzhao583"}, "path": "packages/task-console/src/components/Organisms/DataTableComponent/DataTableComponent.tsx", "diffHunk": "@@ -0,0 +1,140 @@\n+import React, { useEffect, useState } from 'react';\n+import { Bullseye } from '@patternfly/react-core';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+import EmptyStateComponent from '../../Atoms/EmptyStateComponent/EmptyStateComponent';\n+import '@patternfly/patternfly/patternfly-addons.css';\n+import _ from 'lodash';\n+\n+interface IOwnProps {\n+  data: any[];\n+  isLoading: boolean;\n+  columns?: any[];\n+  networkStatus: any;\n+  error: any;\n+  refetch: () => void;\n+  LoadingComponent?: React.ReactNode;\n+  ErrorComponent?: React.ReactNode;\n+}\n+\n+const getColumns = (data, columns) => {\n+  let columnList = [];\n+  if (data) {\n+    columnList = columns\n+      ? columns\n+      : _.filter(_.keys(_.sample(data)), key => key !== '__typename');\n+  }\n+  return columnList;\n+};\n+\n+const getRows = (data, columns) => {\n+  let rowList = [];\n+  if (data) {\n+    rowList = data.map(rowData => {\n+      return {\n+        cells: _.reduce(\n+          columns,\n+          (result, column) => {\n+            _.forEach(rowData, (value, key) => {\n+              if (key.toLowerCase() === column.toLowerCase()) {\n+                if (_.isEmpty(value) || value === '{}') {\n+                  result.push('N/A');\n+                } else {\n+                  result.push(value);\n+                }\n+              }\n+            });\n+            return result;\n+          },\n+          []\n+        ),\n+        rowKey: JSON.stringify(rowData).substr(0, 20) // This is a walkaround to bypass the \"id\" cannot be included in \"columns\" issue\n+      };\n+    });\n+  }\n+  return rowList;\n+};\n+\n+const DataTableComponent: React.FC<IOwnProps> = ({", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwNTE0Mg=="}, "originalCommit": {"oid": "915574c8d9b8c7fcb18fc51ea50b0ec591f0791a"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI3NTQwNg==", "bodyText": "@yzhao583, @Sara4994 is working on moving that component into the common module, perhaps we should wait to get that in first?", "url": "https://github.com/kiegroup/kogito-apps/pull/239#discussion_r434275406", "createdAt": "2020-06-03T02:34:56Z", "author": {"login": "cristianonicolai"}, "path": "packages/task-console/src/components/Organisms/DataTableComponent/DataTableComponent.tsx", "diffHunk": "@@ -0,0 +1,140 @@\n+import React, { useEffect, useState } from 'react';\n+import { Bullseye } from '@patternfly/react-core';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+import EmptyStateComponent from '../../Atoms/EmptyStateComponent/EmptyStateComponent';\n+import '@patternfly/patternfly/patternfly-addons.css';\n+import _ from 'lodash';\n+\n+interface IOwnProps {\n+  data: any[];\n+  isLoading: boolean;\n+  columns?: any[];\n+  networkStatus: any;\n+  error: any;\n+  refetch: () => void;\n+  LoadingComponent?: React.ReactNode;\n+  ErrorComponent?: React.ReactNode;\n+}\n+\n+const getColumns = (data, columns) => {\n+  let columnList = [];\n+  if (data) {\n+    columnList = columns\n+      ? columns\n+      : _.filter(_.keys(_.sample(data)), key => key !== '__typename');\n+  }\n+  return columnList;\n+};\n+\n+const getRows = (data, columns) => {\n+  let rowList = [];\n+  if (data) {\n+    rowList = data.map(rowData => {\n+      return {\n+        cells: _.reduce(\n+          columns,\n+          (result, column) => {\n+            _.forEach(rowData, (value, key) => {\n+              if (key.toLowerCase() === column.toLowerCase()) {\n+                if (_.isEmpty(value) || value === '{}') {\n+                  result.push('N/A');\n+                } else {\n+                  result.push(value);\n+                }\n+              }\n+            });\n+            return result;\n+          },\n+          []\n+        ),\n+        rowKey: JSON.stringify(rowData).substr(0, 20) // This is a walkaround to bypass the \"id\" cannot be included in \"columns\" issue\n+      };\n+    });\n+  }\n+  return rowList;\n+};\n+\n+const DataTableComponent: React.FC<IOwnProps> = ({", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwNTE0Mg=="}, "originalCommit": {"oid": "915574c8d9b8c7fcb18fc51ea50b0ec591f0791a"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyMDQ3Mg==", "bodyText": "@yzhao583 @cristianonicolai @Sara4994 I have one question, is both components overlapping? The goal of this PR is creating a Table Component, to be used in Task Console but ideally reusable for other purposes (maybe jobs or whatever we may need). If both of them have the same goal, should we modify the existing DE table @Sara4994's working on, to make it generic so we can adopt it in both modules? If not, to me +1 to merge is (maybe renaming it to avoid collisions) so we can continue working. WDYT?", "url": "https://github.com/kiegroup/kogito-apps/pull/239#discussion_r434720472", "createdAt": "2020-06-03T17:01:52Z", "author": {"login": "pefernan"}, "path": "packages/task-console/src/components/Organisms/DataTableComponent/DataTableComponent.tsx", "diffHunk": "@@ -0,0 +1,140 @@\n+import React, { useEffect, useState } from 'react';\n+import { Bullseye } from '@patternfly/react-core';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+import EmptyStateComponent from '../../Atoms/EmptyStateComponent/EmptyStateComponent';\n+import '@patternfly/patternfly/patternfly-addons.css';\n+import _ from 'lodash';\n+\n+interface IOwnProps {\n+  data: any[];\n+  isLoading: boolean;\n+  columns?: any[];\n+  networkStatus: any;\n+  error: any;\n+  refetch: () => void;\n+  LoadingComponent?: React.ReactNode;\n+  ErrorComponent?: React.ReactNode;\n+}\n+\n+const getColumns = (data, columns) => {\n+  let columnList = [];\n+  if (data) {\n+    columnList = columns\n+      ? columns\n+      : _.filter(_.keys(_.sample(data)), key => key !== '__typename');\n+  }\n+  return columnList;\n+};\n+\n+const getRows = (data, columns) => {\n+  let rowList = [];\n+  if (data) {\n+    rowList = data.map(rowData => {\n+      return {\n+        cells: _.reduce(\n+          columns,\n+          (result, column) => {\n+            _.forEach(rowData, (value, key) => {\n+              if (key.toLowerCase() === column.toLowerCase()) {\n+                if (_.isEmpty(value) || value === '{}') {\n+                  result.push('N/A');\n+                } else {\n+                  result.push(value);\n+                }\n+              }\n+            });\n+            return result;\n+          },\n+          []\n+        ),\n+        rowKey: JSON.stringify(rowData).substr(0, 20) // This is a walkaround to bypass the \"id\" cannot be included in \"columns\" issue\n+      };\n+    });\n+  }\n+  return rowList;\n+};\n+\n+const DataTableComponent: React.FC<IOwnProps> = ({", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwNTE0Mg=="}, "originalCommit": {"oid": "915574c8d9b8c7fcb18fc51ea50b0ec591f0791a"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDcyMTE2OQ==", "bodyText": "@yzhao583 @Sara4994 do you think it would be feasible to do it, that could save us a lot of time :-P", "url": "https://github.com/kiegroup/kogito-apps/pull/239#discussion_r434721169", "createdAt": "2020-06-03T17:03:03Z", "author": {"login": "pefernan"}, "path": "packages/task-console/src/components/Organisms/DataTableComponent/DataTableComponent.tsx", "diffHunk": "@@ -0,0 +1,140 @@\n+import React, { useEffect, useState } from 'react';\n+import { Bullseye } from '@patternfly/react-core';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+import EmptyStateComponent from '../../Atoms/EmptyStateComponent/EmptyStateComponent';\n+import '@patternfly/patternfly/patternfly-addons.css';\n+import _ from 'lodash';\n+\n+interface IOwnProps {\n+  data: any[];\n+  isLoading: boolean;\n+  columns?: any[];\n+  networkStatus: any;\n+  error: any;\n+  refetch: () => void;\n+  LoadingComponent?: React.ReactNode;\n+  ErrorComponent?: React.ReactNode;\n+}\n+\n+const getColumns = (data, columns) => {\n+  let columnList = [];\n+  if (data) {\n+    columnList = columns\n+      ? columns\n+      : _.filter(_.keys(_.sample(data)), key => key !== '__typename');\n+  }\n+  return columnList;\n+};\n+\n+const getRows = (data, columns) => {\n+  let rowList = [];\n+  if (data) {\n+    rowList = data.map(rowData => {\n+      return {\n+        cells: _.reduce(\n+          columns,\n+          (result, column) => {\n+            _.forEach(rowData, (value, key) => {\n+              if (key.toLowerCase() === column.toLowerCase()) {\n+                if (_.isEmpty(value) || value === '{}') {\n+                  result.push('N/A');\n+                } else {\n+                  result.push(value);\n+                }\n+              }\n+            });\n+            return result;\n+          },\n+          []\n+        ),\n+        rowKey: JSON.stringify(rowData).substr(0, 20) // This is a walkaround to bypass the \"id\" cannot be included in \"columns\" issue\n+      };\n+    });\n+  }\n+  return rowList;\n+};\n+\n+const DataTableComponent: React.FC<IOwnProps> = ({", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwNTE0Mg=="}, "originalCommit": {"oid": "915574c8d9b8c7fcb18fc51ea50b0ec591f0791a"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDk5OTEyNw==", "bodyText": "@pefernan I know its not ideal but we're focusing on moving domain explorer to common right now, it might be a few prs away see #245 and #242,  I think would be best if we concentrate the effort in the long term approach.", "url": "https://github.com/kiegroup/kogito-apps/pull/239#discussion_r434999127", "createdAt": "2020-06-04T05:23:53Z", "author": {"login": "cristianonicolai"}, "path": "packages/task-console/src/components/Organisms/DataTableComponent/DataTableComponent.tsx", "diffHunk": "@@ -0,0 +1,140 @@\n+import React, { useEffect, useState } from 'react';\n+import { Bullseye } from '@patternfly/react-core';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+import EmptyStateComponent from '../../Atoms/EmptyStateComponent/EmptyStateComponent';\n+import '@patternfly/patternfly/patternfly-addons.css';\n+import _ from 'lodash';\n+\n+interface IOwnProps {\n+  data: any[];\n+  isLoading: boolean;\n+  columns?: any[];\n+  networkStatus: any;\n+  error: any;\n+  refetch: () => void;\n+  LoadingComponent?: React.ReactNode;\n+  ErrorComponent?: React.ReactNode;\n+}\n+\n+const getColumns = (data, columns) => {\n+  let columnList = [];\n+  if (data) {\n+    columnList = columns\n+      ? columns\n+      : _.filter(_.keys(_.sample(data)), key => key !== '__typename');\n+  }\n+  return columnList;\n+};\n+\n+const getRows = (data, columns) => {\n+  let rowList = [];\n+  if (data) {\n+    rowList = data.map(rowData => {\n+      return {\n+        cells: _.reduce(\n+          columns,\n+          (result, column) => {\n+            _.forEach(rowData, (value, key) => {\n+              if (key.toLowerCase() === column.toLowerCase()) {\n+                if (_.isEmpty(value) || value === '{}') {\n+                  result.push('N/A');\n+                } else {\n+                  result.push(value);\n+                }\n+              }\n+            });\n+            return result;\n+          },\n+          []\n+        ),\n+        rowKey: JSON.stringify(rowData).substr(0, 20) // This is a walkaround to bypass the \"id\" cannot be included in \"columns\" issue\n+      };\n+    });\n+  }\n+  return rowList;\n+};\n+\n+const DataTableComponent: React.FC<IOwnProps> = ({", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwNTE0Mg=="}, "originalCommit": {"oid": "915574c8d9b8c7fcb18fc51ea50b0ec591f0791a"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTA1MzY5Nw==", "bodyText": "@cristianonicolai so we should rename this so we can merge?", "url": "https://github.com/kiegroup/kogito-apps/pull/239#discussion_r435053697", "createdAt": "2020-06-04T07:40:33Z", "author": {"login": "pefernan"}, "path": "packages/task-console/src/components/Organisms/DataTableComponent/DataTableComponent.tsx", "diffHunk": "@@ -0,0 +1,140 @@\n+import React, { useEffect, useState } from 'react';\n+import { Bullseye } from '@patternfly/react-core';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+import EmptyStateComponent from '../../Atoms/EmptyStateComponent/EmptyStateComponent';\n+import '@patternfly/patternfly/patternfly-addons.css';\n+import _ from 'lodash';\n+\n+interface IOwnProps {\n+  data: any[];\n+  isLoading: boolean;\n+  columns?: any[];\n+  networkStatus: any;\n+  error: any;\n+  refetch: () => void;\n+  LoadingComponent?: React.ReactNode;\n+  ErrorComponent?: React.ReactNode;\n+}\n+\n+const getColumns = (data, columns) => {\n+  let columnList = [];\n+  if (data) {\n+    columnList = columns\n+      ? columns\n+      : _.filter(_.keys(_.sample(data)), key => key !== '__typename');\n+  }\n+  return columnList;\n+};\n+\n+const getRows = (data, columns) => {\n+  let rowList = [];\n+  if (data) {\n+    rowList = data.map(rowData => {\n+      return {\n+        cells: _.reduce(\n+          columns,\n+          (result, column) => {\n+            _.forEach(rowData, (value, key) => {\n+              if (key.toLowerCase() === column.toLowerCase()) {\n+                if (_.isEmpty(value) || value === '{}') {\n+                  result.push('N/A');\n+                } else {\n+                  result.push(value);\n+                }\n+              }\n+            });\n+            return result;\n+          },\n+          []\n+        ),\n+        rowKey: JSON.stringify(rowData).substr(0, 20) // This is a walkaround to bypass the \"id\" cannot be included in \"columns\" issue\n+      };\n+    });\n+  }\n+  return rowList;\n+};\n+\n+const DataTableComponent: React.FC<IOwnProps> = ({", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwNTE0Mg=="}, "originalCommit": {"oid": "915574c8d9b8c7fcb18fc51ea50b0ec591f0791a"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc5ODU1Ng==", "bodyText": "@cristianonicolai @yzhao583 @nmirasch why not merge this into the task-console, so @yzhao583 can continue working, and we may move it to commons when needed. In future developmens we'll have to be more synchronized.", "url": "https://github.com/kiegroup/kogito-apps/pull/239#discussion_r435798556", "createdAt": "2020-06-05T09:22:18Z", "author": {"login": "pefernan"}, "path": "packages/task-console/src/components/Organisms/DataTableComponent/DataTableComponent.tsx", "diffHunk": "@@ -0,0 +1,140 @@\n+import React, { useEffect, useState } from 'react';\n+import { Bullseye } from '@patternfly/react-core';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+import EmptyStateComponent from '../../Atoms/EmptyStateComponent/EmptyStateComponent';\n+import '@patternfly/patternfly/patternfly-addons.css';\n+import _ from 'lodash';\n+\n+interface IOwnProps {\n+  data: any[];\n+  isLoading: boolean;\n+  columns?: any[];\n+  networkStatus: any;\n+  error: any;\n+  refetch: () => void;\n+  LoadingComponent?: React.ReactNode;\n+  ErrorComponent?: React.ReactNode;\n+}\n+\n+const getColumns = (data, columns) => {\n+  let columnList = [];\n+  if (data) {\n+    columnList = columns\n+      ? columns\n+      : _.filter(_.keys(_.sample(data)), key => key !== '__typename');\n+  }\n+  return columnList;\n+};\n+\n+const getRows = (data, columns) => {\n+  let rowList = [];\n+  if (data) {\n+    rowList = data.map(rowData => {\n+      return {\n+        cells: _.reduce(\n+          columns,\n+          (result, column) => {\n+            _.forEach(rowData, (value, key) => {\n+              if (key.toLowerCase() === column.toLowerCase()) {\n+                if (_.isEmpty(value) || value === '{}') {\n+                  result.push('N/A');\n+                } else {\n+                  result.push(value);\n+                }\n+              }\n+            });\n+            return result;\n+          },\n+          []\n+        ),\n+        rowKey: JSON.stringify(rowData).substr(0, 20) // This is a walkaround to bypass the \"id\" cannot be included in \"columns\" issue\n+      };\n+    });\n+  }\n+  return rowList;\n+};\n+\n+const DataTableComponent: React.FC<IOwnProps> = ({", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwNTE0Mg=="}, "originalCommit": {"oid": "915574c8d9b8c7fcb18fc51ea50b0ec591f0791a"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMDk5MDUzOnYy", "diffSide": "RIGHT", "path": "packages/task-console/src/components/Organisms/DataTableComponent/DataTableComponent.tsx", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNDowNzoxN1rOGdhXvA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDoxOTo0NVrOGd0CPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwODYzNg==", "bodyText": "@yzhao583, @Sara4994 is working on moving and renaming these components to the common module, maybe is worth if you guys sync for one PR after the other.", "url": "https://github.com/kiegroup/kogito-apps/pull/239#discussion_r433608636", "createdAt": "2020-06-02T04:07:17Z", "author": {"login": "cristianonicolai"}, "path": "packages/task-console/src/components/Organisms/DataTableComponent/DataTableComponent.tsx", "diffHunk": "@@ -0,0 +1,140 @@\n+import React, { useEffect, useState } from 'react';\n+import { Bullseye } from '@patternfly/react-core';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "915574c8d9b8c7fcb18fc51ea50b0ec591f0791a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg0NzcwOQ==", "bodyText": "@yzhao583 Now you can import \"KogitoSpinner\" component from @kogito-apps/common", "url": "https://github.com/kiegroup/kogito-apps/pull/239#discussion_r433847709", "createdAt": "2020-06-02T12:47:21Z", "author": {"login": "Sara4994"}, "path": "packages/task-console/src/components/Organisms/DataTableComponent/DataTableComponent.tsx", "diffHunk": "@@ -0,0 +1,140 @@\n+import React, { useEffect, useState } from 'react';\n+import { Bullseye } from '@patternfly/react-core';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwODYzNg=="}, "originalCommit": {"oid": "915574c8d9b8c7fcb18fc51ea50b0ec591f0791a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkxNDQyOA==", "bodyText": "@cristianonicolai @Sara4994 Thanks! I will update to use the component from the Common module.", "url": "https://github.com/kiegroup/kogito-apps/pull/239#discussion_r433914428", "createdAt": "2020-06-02T14:19:45Z", "author": {"login": "yzhao583"}, "path": "packages/task-console/src/components/Organisms/DataTableComponent/DataTableComponent.tsx", "diffHunk": "@@ -0,0 +1,140 @@\n+import React, { useEffect, useState } from 'react';\n+import { Bullseye } from '@patternfly/react-core';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYwODYzNg=="}, "originalCommit": {"oid": "915574c8d9b8c7fcb18fc51ea50b0ec591f0791a"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTAxNDE1OnYy", "diffSide": "RIGHT", "path": "packages/task-console/src/components/Organisms/DataTableComponent/DataTableComponent.tsx", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwNDoyMzozNFrOGdhl6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wM1QwNTowNjozOFrOGeMLtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYxMjI2Ng==", "bodyText": "@yzhao583 I think on management console we end-up using a random uuid, maybe double check with @AjayJagan @Sara4994.", "url": "https://github.com/kiegroup/kogito-apps/pull/239#discussion_r433612266", "createdAt": "2020-06-02T04:23:34Z", "author": {"login": "cristianonicolai"}, "path": "packages/task-console/src/components/Organisms/DataTableComponent/DataTableComponent.tsx", "diffHunk": "@@ -0,0 +1,140 @@\n+import React, { useEffect, useState } from 'react';\n+import { Bullseye } from '@patternfly/react-core';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+import EmptyStateComponent from '../../Atoms/EmptyStateComponent/EmptyStateComponent';\n+import '@patternfly/patternfly/patternfly-addons.css';\n+import _ from 'lodash';\n+\n+interface IOwnProps {\n+  data: any[];\n+  isLoading: boolean;\n+  columns?: any[];\n+  networkStatus: any;\n+  error: any;\n+  refetch: () => void;\n+  LoadingComponent?: React.ReactNode;\n+  ErrorComponent?: React.ReactNode;\n+}\n+\n+const getColumns = (data, columns) => {\n+  let columnList = [];\n+  if (data) {\n+    columnList = columns\n+      ? columns\n+      : _.filter(_.keys(_.sample(data)), key => key !== '__typename');\n+  }\n+  return columnList;\n+};\n+\n+const getRows = (data, columns) => {\n+  let rowList = [];\n+  if (data) {\n+    rowList = data.map(rowData => {\n+      return {\n+        cells: _.reduce(\n+          columns,\n+          (result, column) => {\n+            _.forEach(rowData, (value, key) => {\n+              if (key.toLowerCase() === column.toLowerCase()) {\n+                if (_.isEmpty(value) || value === '{}') {\n+                  result.push('N/A');\n+                } else {\n+                  result.push(value);\n+                }\n+              }\n+            });\n+            return result;\n+          },\n+          []\n+        ),\n+        rowKey: JSON.stringify(rowData).substr(0, 20) // This is a walkaround to bypass the \"id\" cannot be included in \"columns\" issue", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "915574c8d9b8c7fcb18fc51ea50b0ec591f0791a"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzg0NzAzNw==", "bodyText": "@yzhao583 you can use generate random key something like this \"Math.random().toString()\"", "url": "https://github.com/kiegroup/kogito-apps/pull/239#discussion_r433847037", "createdAt": "2020-06-02T12:46:18Z", "author": {"login": "Sara4994"}, "path": "packages/task-console/src/components/Organisms/DataTableComponent/DataTableComponent.tsx", "diffHunk": "@@ -0,0 +1,140 @@\n+import React, { useEffect, useState } from 'react';\n+import { Bullseye } from '@patternfly/react-core';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+import EmptyStateComponent from '../../Atoms/EmptyStateComponent/EmptyStateComponent';\n+import '@patternfly/patternfly/patternfly-addons.css';\n+import _ from 'lodash';\n+\n+interface IOwnProps {\n+  data: any[];\n+  isLoading: boolean;\n+  columns?: any[];\n+  networkStatus: any;\n+  error: any;\n+  refetch: () => void;\n+  LoadingComponent?: React.ReactNode;\n+  ErrorComponent?: React.ReactNode;\n+}\n+\n+const getColumns = (data, columns) => {\n+  let columnList = [];\n+  if (data) {\n+    columnList = columns\n+      ? columns\n+      : _.filter(_.keys(_.sample(data)), key => key !== '__typename');\n+  }\n+  return columnList;\n+};\n+\n+const getRows = (data, columns) => {\n+  let rowList = [];\n+  if (data) {\n+    rowList = data.map(rowData => {\n+      return {\n+        cells: _.reduce(\n+          columns,\n+          (result, column) => {\n+            _.forEach(rowData, (value, key) => {\n+              if (key.toLowerCase() === column.toLowerCase()) {\n+                if (_.isEmpty(value) || value === '{}') {\n+                  result.push('N/A');\n+                } else {\n+                  result.push(value);\n+                }\n+              }\n+            });\n+            return result;\n+          },\n+          []\n+        ),\n+        rowKey: JSON.stringify(rowData).substr(0, 20) // This is a walkaround to bypass the \"id\" cannot be included in \"columns\" issue", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYxMjI2Ng=="}, "originalCommit": {"oid": "915574c8d9b8c7fcb18fc51ea50b0ec591f0791a"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkxODQ4OA==", "bodyText": "@cristianonicolai @Sara4994 I personally prefer the \"uuid\" solution, WDYT? And if we use \"uuid\" here, it may generate some headache when we do snapshot test, any suggestions? Appreciated!", "url": "https://github.com/kiegroup/kogito-apps/pull/239#discussion_r433918488", "createdAt": "2020-06-02T14:25:24Z", "author": {"login": "yzhao583"}, "path": "packages/task-console/src/components/Organisms/DataTableComponent/DataTableComponent.tsx", "diffHunk": "@@ -0,0 +1,140 @@\n+import React, { useEffect, useState } from 'react';\n+import { Bullseye } from '@patternfly/react-core';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+import EmptyStateComponent from '../../Atoms/EmptyStateComponent/EmptyStateComponent';\n+import '@patternfly/patternfly/patternfly-addons.css';\n+import _ from 'lodash';\n+\n+interface IOwnProps {\n+  data: any[];\n+  isLoading: boolean;\n+  columns?: any[];\n+  networkStatus: any;\n+  error: any;\n+  refetch: () => void;\n+  LoadingComponent?: React.ReactNode;\n+  ErrorComponent?: React.ReactNode;\n+}\n+\n+const getColumns = (data, columns) => {\n+  let columnList = [];\n+  if (data) {\n+    columnList = columns\n+      ? columns\n+      : _.filter(_.keys(_.sample(data)), key => key !== '__typename');\n+  }\n+  return columnList;\n+};\n+\n+const getRows = (data, columns) => {\n+  let rowList = [];\n+  if (data) {\n+    rowList = data.map(rowData => {\n+      return {\n+        cells: _.reduce(\n+          columns,\n+          (result, column) => {\n+            _.forEach(rowData, (value, key) => {\n+              if (key.toLowerCase() === column.toLowerCase()) {\n+                if (_.isEmpty(value) || value === '{}') {\n+                  result.push('N/A');\n+                } else {\n+                  result.push(value);\n+                }\n+              }\n+            });\n+            return result;\n+          },\n+          []\n+        ),\n+        rowKey: JSON.stringify(rowData).substr(0, 20) // This is a walkaround to bypass the \"id\" cannot be included in \"columns\" issue", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYxMjI2Ng=="}, "originalCommit": {"oid": "915574c8d9b8c7fcb18fc51ea50b0ec591f0791a"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDI3NTA2MA==", "bodyText": "task id and process id, are actually uuid, to me that should be enough but again @Sara4994 @AjayJagan might know better the inner works.", "url": "https://github.com/kiegroup/kogito-apps/pull/239#discussion_r434275060", "createdAt": "2020-06-03T02:33:30Z", "author": {"login": "cristianonicolai"}, "path": "packages/task-console/src/components/Organisms/DataTableComponent/DataTableComponent.tsx", "diffHunk": "@@ -0,0 +1,140 @@\n+import React, { useEffect, useState } from 'react';\n+import { Bullseye } from '@patternfly/react-core';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+import EmptyStateComponent from '../../Atoms/EmptyStateComponent/EmptyStateComponent';\n+import '@patternfly/patternfly/patternfly-addons.css';\n+import _ from 'lodash';\n+\n+interface IOwnProps {\n+  data: any[];\n+  isLoading: boolean;\n+  columns?: any[];\n+  networkStatus: any;\n+  error: any;\n+  refetch: () => void;\n+  LoadingComponent?: React.ReactNode;\n+  ErrorComponent?: React.ReactNode;\n+}\n+\n+const getColumns = (data, columns) => {\n+  let columnList = [];\n+  if (data) {\n+    columnList = columns\n+      ? columns\n+      : _.filter(_.keys(_.sample(data)), key => key !== '__typename');\n+  }\n+  return columnList;\n+};\n+\n+const getRows = (data, columns) => {\n+  let rowList = [];\n+  if (data) {\n+    rowList = data.map(rowData => {\n+      return {\n+        cells: _.reduce(\n+          columns,\n+          (result, column) => {\n+            _.forEach(rowData, (value, key) => {\n+              if (key.toLowerCase() === column.toLowerCase()) {\n+                if (_.isEmpty(value) || value === '{}') {\n+                  result.push('N/A');\n+                } else {\n+                  result.push(value);\n+                }\n+              }\n+            });\n+            return result;\n+          },\n+          []\n+        ),\n+        rowKey: JSON.stringify(rowData).substr(0, 20) // This is a walkaround to bypass the \"id\" cannot be included in \"columns\" issue", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYxMjI2Ng=="}, "originalCommit": {"oid": "915574c8d9b8c7fcb18fc51ea50b0ec591f0791a"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNDMxMDA2OA==", "bodyText": "@cristianonicolai for keys i would prefer Math.random(), but if we look for some other alternative there is something called nanoid() which is shorter in length than uuid", "url": "https://github.com/kiegroup/kogito-apps/pull/239#discussion_r434310068", "createdAt": "2020-06-03T05:06:38Z", "author": {"login": "Sara4994"}, "path": "packages/task-console/src/components/Organisms/DataTableComponent/DataTableComponent.tsx", "diffHunk": "@@ -0,0 +1,140 @@\n+import React, { useEffect, useState } from 'react';\n+import { Bullseye } from '@patternfly/react-core';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+import EmptyStateComponent from '../../Atoms/EmptyStateComponent/EmptyStateComponent';\n+import '@patternfly/patternfly/patternfly-addons.css';\n+import _ from 'lodash';\n+\n+interface IOwnProps {\n+  data: any[];\n+  isLoading: boolean;\n+  columns?: any[];\n+  networkStatus: any;\n+  error: any;\n+  refetch: () => void;\n+  LoadingComponent?: React.ReactNode;\n+  ErrorComponent?: React.ReactNode;\n+}\n+\n+const getColumns = (data, columns) => {\n+  let columnList = [];\n+  if (data) {\n+    columnList = columns\n+      ? columns\n+      : _.filter(_.keys(_.sample(data)), key => key !== '__typename');\n+  }\n+  return columnList;\n+};\n+\n+const getRows = (data, columns) => {\n+  let rowList = [];\n+  if (data) {\n+    rowList = data.map(rowData => {\n+      return {\n+        cells: _.reduce(\n+          columns,\n+          (result, column) => {\n+            _.forEach(rowData, (value, key) => {\n+              if (key.toLowerCase() === column.toLowerCase()) {\n+                if (_.isEmpty(value) || value === '{}') {\n+                  result.push('N/A');\n+                } else {\n+                  result.push(value);\n+                }\n+              }\n+            });\n+            return result;\n+          },\n+          []\n+        ),\n+        rowKey: JSON.stringify(rowData).substr(0, 20) // This is a walkaround to bypass the \"id\" cannot be included in \"columns\" issue", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzYxMjI2Ng=="}, "originalCommit": {"oid": "915574c8d9b8c7fcb18fc51ea50b0ec591f0791a"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjcwMTUyNDE5OnYy", "diffSide": "RIGHT", "path": "packages/task-console/src/components/Templates/DataTableContainer/DataTableContainer.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQwODowMzoxOVrOGdmgZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMlQxNDoyNzo0N1rOGd0ZWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY5Mjc3NQ==", "bodyText": "I think this could be removed", "url": "https://github.com/kiegroup/kogito-apps/pull/239#discussion_r433692775", "createdAt": "2020-06-02T08:03:19Z", "author": {"login": "pefernan"}, "path": "packages/task-console/src/components/Templates/DataTableContainer/DataTableContainer.tsx", "diffHunk": "@@ -0,0 +1,87 @@\n+import {\n+  Breadcrumb,\n+  BreadcrumbItem,\n+  Card,\n+  Grid,\n+  GridItem,\n+  PageSection,\n+  InjectedOuiaProps,\n+  withOuiaContext,\n+  Bullseye\n+} from '@patternfly/react-core';\n+import _ from 'lodash';\n+import React, { useEffect } from 'react';\n+import { Link } from 'react-router-dom';\n+import PageTitleComponent from '../../Molecules/PageTitleComponent/PageTitleComponent';\n+import './DataTable.css';\n+import DataTableComponent from '../../Organisms/DataTableComponent/DataTableComponent';\n+import { useGetUserTasksByStatesQuery } from '../../../graphql/types';\n+import { ouiaPageTypeAndObjectId } from '@kogito-apps/common';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+\n+const UserTaskLoadingComponent = (\n+  <Bullseye>\n+    <SpinnerComponent spinnerText=\"Loading user tasks...\" />\n+  </Bullseye>\n+);\n+\n+const DataTableContainer: React.FC<InjectedOuiaProps> = ({ ouiaContext }) => {\n+  const {\n+    loading,\n+    error,\n+    data,\n+    refetch,\n+    networkStatus\n+  } = useGetUserTasksByStatesQuery({\n+    variables: {\n+      state: ['Ready'] // FIXME: state should not be hard-coded.\n+    },\n+    fetchPolicy: 'network-only',\n+    notifyOnNetworkStatusChange: true\n+  });\n+\n+  // const columns = [", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "74a526ae4a107dd3192a732852becf6192328577"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzkyMDM0NA==", "bodyText": "@pefernan Sorry, I just commented it out by mistake, we need that here, but thanks for the feedbacks! Appreciated!", "url": "https://github.com/kiegroup/kogito-apps/pull/239#discussion_r433920344", "createdAt": "2020-06-02T14:27:47Z", "author": {"login": "yzhao583"}, "path": "packages/task-console/src/components/Templates/DataTableContainer/DataTableContainer.tsx", "diffHunk": "@@ -0,0 +1,87 @@\n+import {\n+  Breadcrumb,\n+  BreadcrumbItem,\n+  Card,\n+  Grid,\n+  GridItem,\n+  PageSection,\n+  InjectedOuiaProps,\n+  withOuiaContext,\n+  Bullseye\n+} from '@patternfly/react-core';\n+import _ from 'lodash';\n+import React, { useEffect } from 'react';\n+import { Link } from 'react-router-dom';\n+import PageTitleComponent from '../../Molecules/PageTitleComponent/PageTitleComponent';\n+import './DataTable.css';\n+import DataTableComponent from '../../Organisms/DataTableComponent/DataTableComponent';\n+import { useGetUserTasksByStatesQuery } from '../../../graphql/types';\n+import { ouiaPageTypeAndObjectId } from '@kogito-apps/common';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+\n+const UserTaskLoadingComponent = (\n+  <Bullseye>\n+    <SpinnerComponent spinnerText=\"Loading user tasks...\" />\n+  </Bullseye>\n+);\n+\n+const DataTableContainer: React.FC<InjectedOuiaProps> = ({ ouiaContext }) => {\n+  const {\n+    loading,\n+    error,\n+    data,\n+    refetch,\n+    networkStatus\n+  } = useGetUserTasksByStatesQuery({\n+    variables: {\n+      state: ['Ready'] // FIXME: state should not be hard-coded.\n+    },\n+    fetchPolicy: 'network-only',\n+    notifyOnNetworkStatusChange: true\n+  });\n+\n+  // const columns = [", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzY5Mjc3NQ=="}, "originalCommit": {"oid": "74a526ae4a107dd3192a732852becf6192328577"}, "originalPosition": 43}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 944, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}