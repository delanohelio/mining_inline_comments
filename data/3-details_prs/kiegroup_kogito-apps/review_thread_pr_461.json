{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDg4Njg3ODM5", "number": 461, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDowMjozOFrOEkjYNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjozODozOFrOElCoBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NzYzODI5OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-service-rest/src/main/java/org/kie/kogito/explainability/rest/ExplainabilityApiV1.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDowMjozOFrOHTjzeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDowMjozOFrOHTjzeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI3MTYwOA==", "bodyText": "What about use StringUtils? If you don't want to add the dependency please at least move the method to a local StringUtils class", "url": "https://github.com/kiegroup/kogito-apps/pull/461#discussion_r490271608", "createdAt": "2020-09-17T14:02:38Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-service-rest/src/main/java/org/kie/kogito/explainability/rest/ExplainabilityApiV1.java", "diffHunk": "@@ -53,6 +55,10 @@ public ExplainabilityApiV1(\n         this.predictionProviderFactory = predictionProviderFactory;\n     }\n \n+    private boolean isNullOrEmpty(String s) {\n+        return s == null || s == \"\";\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c70ab5556bac2ad3dce3bbf51b89a278fc04c2e"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA2NzY1MjIyOnYy", "diffSide": "RIGHT", "path": "explainability/explainability-service-rest/src/main/java/org/kie/kogito/explainability/rest/ExplainabilityApiV1.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDowNToxMFrOHTj7xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xN1QxNDowNToxMFrOHTj7xg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDI3MzczNA==", "bodyText": "What about move it to a util class?", "url": "https://github.com/kiegroup/kogito-apps/pull/461#discussion_r490273734", "createdAt": "2020-09-17T14:05:10Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-service-rest/src/main/java/org/kie/kogito/explainability/rest/ExplainabilityApiV1.java", "diffHunk": "@@ -64,12 +70,41 @@ public ExplainabilityApiV1(\n     @Consumes(MediaType.APPLICATION_JSON)\n     @Produces(MediaType.APPLICATION_JSON)\n     public Uni<Response> explain(ExplainabilityRequestDto requestDto) {\n+        RequestValidationResult validationResult = validateRequest(requestDto);\n+        if (!validationResult.isValid()) {\n+            return Uni.createFrom().completionStage(\n+                    CompletableFuture.completedFuture(Response.status(400).entity(validationResult.getMessage()).build())\n+            );\n+        }\n+\n         ExplainabilityRequest request = ExplainabilityRequest.from(requestDto);\n         PredictionProvider provider = predictionProviderFactory.createPredictionProvider(request);\n         CompletionStage<Response> result = explanationService.explainAsync(request, provider)\n                 .thenApply(x -> Response.ok(x).build());\n \n         return Uni.createFrom().completionStage(result);\n     }\n+\n+    private RequestValidationResult validateRequest(ExplainabilityRequestDto requestDto) {\n+        if (requestDto == null) {\n+            return new RequestValidationResult(false, \"The request can not be empty.\");\n+        }\n+\n+        if (requestDto.getExecutionId() == null) {\n+            return new RequestValidationResult(false, \"The executionId must be included in the request.\");\n+        }\n+\n+        ModelIdentifierDto modelIdentifierDto = requestDto.getModelIdentifier();\n+\n+        if (modelIdentifierDto == null || isNullOrEmpty(modelIdentifierDto.getResourceType()) || isNullOrEmpty(modelIdentifierDto.getResourceId())) {\n+            return new RequestValidationResult(false, \"The model identifier information is required in the request.\");\n+        }\n+\n+        if (isNullOrEmpty(requestDto.getServiceUrl())) {\n+            return new RequestValidationResult(false, \"The service url information of the application that evaluated the decision is not provided in the request.\");\n+        }\n+\n+        return new RequestValidationResult(true, null);\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c70ab5556bac2ad3dce3bbf51b89a278fc04c2e"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3MDQ5OTMwOnYy", "diffSide": "RIGHT", "path": "explainability/explainability-service-rest/src/main/java/org/kie/kogito/explainability/rest/ExplainabilityApiV1.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQwNTo0OTo0NFrOHT-9Yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxMzoyMzoyOVrOHUM9WA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcxNjUxNA==", "bodyText": "As far I know, the annotation @Valid works fine with reactive endpoints, so if we annotate the requestDto field with @Valid, it should raise 400 Invalid Request directly.", "url": "https://github.com/kiegroup/kogito-apps/pull/461#discussion_r490716514", "createdAt": "2020-09-18T05:49:44Z", "author": {"login": "Sgitario"}, "path": "explainability/explainability-service-rest/src/main/java/org/kie/kogito/explainability/rest/ExplainabilityApiV1.java", "diffHunk": "@@ -64,6 +72,16 @@ public ExplainabilityApiV1(\n     @Consumes(MediaType.APPLICATION_JSON)\n     @Produces(MediaType.APPLICATION_JSON)\n     public Uni<Response> explain(ExplainabilityRequestDto requestDto) {\n+        Set<ConstraintViolation<ExplainabilityRequestDto>> violations = validator.validate(requestDto);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9fb6f1e6ad2dffd97a5c62ae30fcd525015db853"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDk0NTg4MA==", "bodyText": "Thanks @Sgitario , this module was new for me, good to know :) lmkwyt", "url": "https://github.com/kiegroup/kogito-apps/pull/461#discussion_r490945880", "createdAt": "2020-09-18T13:23:29Z", "author": {"login": "r00ta"}, "path": "explainability/explainability-service-rest/src/main/java/org/kie/kogito/explainability/rest/ExplainabilityApiV1.java", "diffHunk": "@@ -64,6 +72,16 @@ public ExplainabilityApiV1(\n     @Consumes(MediaType.APPLICATION_JSON)\n     @Produces(MediaType.APPLICATION_JSON)\n     public Uni<Response> explain(ExplainabilityRequestDto requestDto) {\n+        Set<ConstraintViolation<ExplainabilityRequestDto>> violations = validator.validate(requestDto);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MDcxNjUxNA=="}, "originalCommit": {"oid": "9fb6f1e6ad2dffd97a5c62ae30fcd525015db853"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA3Mjc1NzgwOnYy", "diffSide": "RIGHT", "path": "explainability/explainability-service-rest/src/main/java/org/kie/kogito/explainability/rest/ExplainabilityApiV1.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjozODozOFrOHUUV2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xOFQxNjozODozOFrOHUUV2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MTA2Njg0MQ==", "bodyText": "I think this service is a leftover", "url": "https://github.com/kiegroup/kogito-apps/pull/461#discussion_r491066841", "createdAt": "2020-09-18T16:38:38Z", "author": {"login": "Sgitario"}, "path": "explainability/explainability-service-rest/src/main/java/org/kie/kogito/explainability/rest/ExplainabilityApiV1.java", "diffHunk": "@@ -44,13 +46,16 @@\n \n     protected ExplanationService explanationService;\n     protected PredictionProviderFactory predictionProviderFactory;\n+    protected Validator validator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4707faea06a2db8006201aa27d0d3f7484ed3f76"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 719, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}