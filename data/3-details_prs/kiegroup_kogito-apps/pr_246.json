{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI3NzcwMjky", "number": 246, "title": "Kogito 2326 - Kogito apps storage abstraction", "bodyText": "Jira link: https://issues.redhat.com/browse/KOGITO-2326\nThe aim of this PR is to move the storage management to a common package that can be re-used by the kogito apps that need the persistence.\nThe general idea is to have some top level modules (kogito-storage-api, kogito-storage-infinispan etc..) that contain the common code, and then each app creates an extension to register its marshallers/codecs etc.\nMany thanks for submitting your Pull Request \u2764\ufe0f!\nPlease make sure that your PR meets the following requirements:\n\n You have read the contributors guide\n Pull Request title is properly formatted: KOGITO-XYZ Subject\n Pull Request title contains the target branch if not targeting master: [0.9.x] KOGITO-XYZ Subject\n Pull Request contains link to the JIRA issue\n Pull Request contains link to any dependent or related Pull Request\n Pull Request contains description of the issue\n Pull Request does not include fixes for issues other than the main ticket", "createdAt": "2020-06-04T11:27:43Z", "url": "https://github.com/kiegroup/kogito-apps/pull/246", "merged": true, "mergeCommit": {"oid": "01e5eb6c998d3d1f09a58d501e6b27ff6478c062"}, "closed": true, "closedAt": "2020-06-17T09:13:20Z", "author": {"login": "r00ta"}, "timelineItems": {"totalCount": 75, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclECD0gH2gAyNDI3NzcwMjkyOjA2YTU5MDAzNDZmMTljNjg5ZTgzYzk3YjUyMGEyZjY1ODAwMTI4OTk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcr63ihgFqTQzMTg0NzUwMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "06a5900346f19c689e83c97b520a2f6580012899", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/06a5900346f19c689e83c97b520a2f6580012899", "committedDate": "2020-05-26T12:43:09Z", "message": "Create trustyCI.yml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e28aaa2c0876b61441bec40203b1ca39d066630d", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/e28aaa2c0876b61441bec40203b1ca39d066630d", "committedDate": "2020-05-26T12:52:33Z", "message": "Update trustyCI.yml"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e64db78b9b86b86b39ad74e5ecb482c3738e29a7", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/e64db78b9b86b86b39ad74e5ecb482c3738e29a7", "committedDate": "2020-05-29T07:46:12Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4eedb7b29a4eb163eef6e08296b269f07f76a466", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/4eedb7b29a4eb163eef6e08296b269f07f76a466", "committedDate": "2020-06-04T08:25:27Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95a89856d1a0d04de27ce0517ddffb5c4edcf931", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/95a89856d1a0d04de27ce0517ddffb5c4edcf931", "committedDate": "2020-06-04T11:20:16Z", "message": "create storage abstraction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "16cf560065ac91a5ac1f16bba1c8bcdc4cf74645", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/16cf560065ac91a5ac1f16bba1c8bcdc4cf74645", "committedDate": "2020-06-04T11:25:05Z", "message": "Revert \"Update trustyCI.yml\"\n\nThis reverts commit e28aaa2c0876b61441bec40203b1ca39d066630d."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "936b6376ea9a67f5f518da57789f337476d860db", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/936b6376ea9a67f5f518da57789f337476d860db", "committedDate": "2020-06-04T11:25:20Z", "message": "Revert \"Create trustyCI.yml\"\n\nThis reverts commit 06a5900346f19c689e83c97b520a2f6580012899."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "279c3265eda41f15a9c7cab798fa0ce29f382dac", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/279c3265eda41f15a9c7cab798fa0ce29f382dac", "committedDate": "2020-06-04T11:37:17Z", "message": "Refactor infinispan query tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc6d7ef238643c7de278daa337bd961ac2188671", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/cc6d7ef238643c7de278daa337bd961ac2188671", "committedDate": "2020-06-04T11:42:25Z", "message": "refactor infinispan query tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7296acfa97640c0727e5bad06413600b86176999", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/7296acfa97640c0727e5bad06413600b86176999", "committedDate": "2020-06-04T12:31:11Z", "message": "refactoring data-index-protobuf"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "af94b7ee471b1eadf0752b76a089da3cd74560bf", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/af94b7ee471b1eadf0752b76a089da3cd74560bf", "committedDate": "2020-06-04T14:38:55Z", "message": "refactoring getProtobufCache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c3d2d9e1fb19d2e90cfb5551d9f0a755591875b", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/1c3d2d9e1fb19d2e90cfb5551d9f0a755591875b", "committedDate": "2020-06-04T15:36:56Z", "message": "refactoring Storage annotations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "093a0b152d2c75e54a1cddd069a84abbaf08da91", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/093a0b152d2c75e54a1cddd069a84abbaf08da91", "committedDate": "2020-06-04T20:44:15Z", "message": "fix pom"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4adfbf90c4509cfcea02c55c93f433d3bb1534ef", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/4adfbf90c4509cfcea02c55c93f433d3bb1534ef", "committedDate": "2020-06-05T09:07:31Z", "message": "Fix CacheService annotation"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0NjU0MDUw", "url": "https://github.com/kiegroup/kogito-apps/pull/246#pullrequestreview-424654050", "createdAt": "2020-06-04T17:04:18Z", "commit": {"oid": "1c3d2d9e1fb19d2e90cfb5551d9f0a755591875b"}, "state": "COMMENTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNFQxNzowNDoxOVrOGfPe1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxMDoxMToyNFrOGfoqcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTQxMjY5NQ==", "bodyText": "To be removed?", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r435412695", "createdAt": "2020-06-04T17:04:19Z", "author": {"login": "danielezonca"}, "path": "kogito-storage/kogito-storage-api/pom.xml", "diffHunk": "@@ -0,0 +1,75 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>kogito-storage</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+  <name>Kogito :: Kogito Storage API</name>\n+  <artifactId>kogito-storage-api</artifactId>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.core</groupId>\n+      <artifactId>jackson-databind</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.core</groupId>\n+      <artifactId>jackson-annotations</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>jakarta.inject</groupId>\n+      <artifactId>jakarta.inject-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-core</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-core</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-junit-jupiter</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.assertj</groupId>\n+      <artifactId>assertj-core</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-junit5</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.rest-assured</groupId>\n+      <artifactId>rest-assured</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+  </dependencies>\n+\n+<!--  <build>-->\n+<!--    <plugins>-->\n+<!--      <plugin>-->\n+<!--        <groupId>org.jboss.jandex</groupId>-->\n+<!--        <artifactId>jandex-maven-plugin</artifactId>-->\n+<!--        <executions>-->\n+<!--          <execution>-->\n+<!--            <id>make-index</id>-->\n+<!--            <goals>-->\n+<!--              <goal>jandex</goal>-->\n+<!--            </goals>-->\n+<!--          </execution>-->\n+<!--        </executions>-->\n+<!--      </plugin>-->\n+<!--    </plugins>-->\n+<!--  </build>-->", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c3d2d9e1fb19d2e90cfb5551d9f0a755591875b"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc0Mzc0Nw==", "bodyText": "Can you please rename it kogito-storage-commons?", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r435743747", "createdAt": "2020-06-05T07:40:06Z", "author": {"login": "danielezonca"}, "path": "kogito-storage/pom.xml", "diffHunk": "@@ -0,0 +1,22 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>kogito-apps</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kogito-storage</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1c3d2d9e1fb19d2e90cfb5551d9f0a755591875b"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc0NTM2NA==", "bodyText": "Why these changes? Most (all?) of the codebase use import static", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r435745364", "createdAt": "2020-06-05T07:43:24Z", "author": {"login": "danielezonca"}, "path": "kogito-storage/kogito-storage-api/src/test/java/org/kie/kogito/storage/api/annotations/ProducerTest.java", "diffHunk": "@@ -14,22 +14,20 @@\n  * limitations under the License.\n  */\n \n-package org.kie.kogito.index.storage;\n+package org.kie.kogito.storage.api.annotations;\n \n import javax.enterprise.inject.Instance;\n \n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.junit.jupiter.api.extension.ExtendWith;\n-import org.kie.kogito.index.cache.CacheService;\n+import org.kie.kogito.storage.api.CacheService;\n+import org.mockito.ArgumentMatchers;\n import org.mockito.InjectMocks;\n import org.mockito.Mock;\n+import org.mockito.Mockito;\n import org.mockito.junit.jupiter.MockitoExtension;\n \n-import static org.mockito.Mockito.eq;\n-import static org.mockito.Mockito.verify;\n-import static org.mockito.Mockito.when;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "093a0b152d2c75e54a1cddd069a84abbaf08da91"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc4OTM3Ng==", "bodyText": "I think storage.api.annotations is misleading for this. Can you please move it to storage.factory?", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r435789376", "createdAt": "2020-06-05T09:05:34Z", "author": {"login": "danielezonca"}, "path": "kogito-storage/kogito-storage-api/src/main/java/org/kie/kogito/storage/api/annotations/Producer.java", "diffHunk": "@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.kie.kogito.index.storage;\n+package org.kie.kogito.storage.api.annotations;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "093a0b152d2c75e54a1cddd069a84abbaf08da91"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc4OTUxMg==", "bodyText": "I think storage.api.annotations is misleading for this. Can you please move it to storage.factory?", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r435789512", "createdAt": "2020-06-05T09:05:49Z", "author": {"login": "danielezonca"}, "path": "kogito-storage/kogito-storage-api/src/main/java/org/kie/kogito/storage/api/annotations/Storage.java", "diffHunk": "@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.kie.kogito.index.storage;\n+package org.kie.kogito.storage.api.annotations;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "093a0b152d2c75e54a1cddd069a84abbaf08da91"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTc4OTU4Ng==", "bodyText": "I think storage.api.annotations is misleading for this. Can you please move it to storage.factory?", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r435789586", "createdAt": "2020-06-05T09:05:56Z", "author": {"login": "danielezonca"}, "path": "kogito-storage/kogito-storage-api/src/main/java/org/kie/kogito/storage/api/annotations/StorageImpl.java", "diffHunk": "@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.kie.kogito.index.storage;\n+package org.kie.kogito.storage.api.annotations;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "093a0b152d2c75e54a1cddd069a84abbaf08da91"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgwMTY1MA==", "bodyText": "Can you rename it as Storage?", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r435801650", "createdAt": "2020-06-05T09:27:39Z", "author": {"login": "danielezonca"}, "path": "kogito-storage/kogito-storage-api/src/main/java/org/kie/kogito/storage/api/Cache.java", "diffHunk": "@@ -14,22 +14,35 @@\n  * limitations under the License.\n  */\n \n-package org.kie.kogito.index.cache;\n+package org.kie.kogito.storage.api;\n \n-import java.util.concurrent.ConcurrentMap;\n+import java.util.Map;\n+import java.util.Set;\n import java.util.function.Consumer;\n \n-import org.kie.kogito.index.query.Query;\n+import org.kie.kogito.storage.api.query.Query;\n \n-public interface Cache<K, V> extends ConcurrentMap<K, V> {\n+public interface Cache<K, V> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "093a0b152d2c75e54a1cddd069a84abbaf08da91"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgwMTk0Nw==", "bodyText": "Can you rename it as StorageService?", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r435801947", "createdAt": "2020-06-05T09:28:10Z", "author": {"login": "danielezonca"}, "path": "kogito-storage/kogito-storage-api/src/main/java/org/kie/kogito/storage/api/CacheService.java", "diffHunk": "@@ -14,20 +14,12 @@\n  * limitations under the License.\n  */\n \n-package org.kie.kogito.index.cache;\n+package org.kie.kogito.storage.api;\n \n import com.fasterxml.jackson.databind.node.ObjectNode;\n-import org.kie.kogito.index.model.Job;\n-import org.kie.kogito.index.model.ProcessInstance;\n-import org.kie.kogito.index.model.UserTaskInstance;\n \n public interface CacheService {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "093a0b152d2c75e54a1cddd069a84abbaf08da91"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgwNTQ0Mg==", "bodyText": "We are not using IName naming convention for interfaces in this project so please rename it as DataIndexStorageService", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r435805442", "createdAt": "2020-06-05T09:34:33Z", "author": {"login": "danielezonca"}, "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/IDataIndexStorageExtension.java", "diffHunk": "@@ -0,0 +1,22 @@\n+package org.kie.kogito.index;\n+\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import org.kie.kogito.index.model.Job;\n+import org.kie.kogito.index.model.ProcessInstance;\n+import org.kie.kogito.index.model.UserTaskInstance;\n+import org.kie.kogito.storage.api.Cache;\n+\n+public interface IDataIndexStorageExtension {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "093a0b152d2c75e54a1cddd069a84abbaf08da91"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgwNjE2Mg==", "bodyText": "Can you please rename it as DataIndexStorageServiceImpl?\nMissing @ApplicationScoped annotation", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r435806162", "createdAt": "2020-06-05T09:35:54Z", "author": {"login": "danielezonca"}, "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/DataIndexStorageExtension.java", "diffHunk": "@@ -0,0 +1,52 @@\n+package org.kie.kogito.index;\n+\n+import javax.inject.Inject;\n+\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import org.kie.kogito.index.model.Job;\n+import org.kie.kogito.index.model.ProcessInstance;\n+import org.kie.kogito.index.model.UserTaskInstance;\n+import org.kie.kogito.storage.api.Cache;\n+import org.kie.kogito.storage.api.CacheService;\n+\n+public class DataIndexStorageExtension implements IDataIndexStorageExtension {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "093a0b152d2c75e54a1cddd069a84abbaf08da91"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgxMTU5OA==", "bodyText": "Is this custom? Can we move it to shared library too?", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r435811598", "createdAt": "2020-06-05T09:45:48Z", "author": {"login": "danielezonca"}, "path": "data-index/data-index-storage/data-index-storage-infinispan/src/main/java/org/kie/kogito/index/infinispan/schema/ProtoSchemaAcceptor.java", "diffHunk": "@@ -14,23 +14,23 @@\n  * limitations under the License.\n  */\n \n-package org.kie.kogito.index.infinispan.protostream;\n+package org.kie.kogito.index.infinispan.schema;\n \n import javax.enterprise.context.ApplicationScoped;\n \n import org.eclipse.microprofile.config.inject.ConfigProperty;\n-import org.kie.kogito.index.schema.SchemaAcceptor;\n-import org.kie.kogito.index.schema.SchemaType;\n+import org.kie.kogito.storage.api.schema.SchemaAcceptor;\n+import org.kie.kogito.storage.api.schema.SchemaType;\n \n-import static org.kie.kogito.index.infinispan.Constants.INFINISPAN_STORAGE;\n+import static org.kie.kogito.storage.infinispan.Constants.INFINISPAN_STORAGE;\n \n @ApplicationScoped\n public class ProtoSchemaAcceptor implements SchemaAcceptor {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "093a0b152d2c75e54a1cddd069a84abbaf08da91"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgxMTgxOQ==", "bodyText": "Is this custom? Can we move it to shared library too?", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r435811819", "createdAt": "2020-06-05T09:46:11Z", "author": {"login": "danielezonca"}, "path": "data-index/data-index-storage/data-index-storage-infinispan/src/main/java/org/kie/kogito/index/infinispan/schema/ProtoSchemaManager.java", "diffHunk": "@@ -14,22 +14,22 @@\n  * limitations under the License.\n  */\n \n-package org.kie.kogito.index.infinispan.protostream;\n+package org.kie.kogito.index.infinispan.schema;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "093a0b152d2c75e54a1cddd069a84abbaf08da91"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgxOTY3NA==", "bodyText": "Is it possible to move most of this data-index-storage-protobuf module as additional shared module?\nWe can try to use the same approach of shared base module and then data-index specific additions", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r435819674", "createdAt": "2020-06-05T10:00:24Z", "author": {"login": "danielezonca"}, "path": "data-index/data-index-storage/data-index-storage-protobuf/src/main/java/org/kie/kogito/index/protobuf/domain/ProtoDomainModelProducer.java", "diffHunk": "@@ -29,14 +29,12 @@\n import org.infinispan.protostream.descriptors.FieldDescriptor;\n import org.infinispan.protostream.descriptors.FileDescriptor;\n import org.infinispan.protostream.impl.AnnotatedDescriptorImpl;\n-import org.kie.kogito.index.domain.AttributeDescriptor;\n-import org.kie.kogito.index.domain.DomainDescriptor;\n-import org.kie.kogito.index.event.DomainModelRegisteredEvent;\n+import org.kie.kogito.index.protobuf.FileDescriptorRegisteredEvent;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import static java.util.stream.Collectors.toMap;\n import static java.util.stream.Collectors.toList;\n+import static java.util.stream.Collectors.toMap;\n \n @ApplicationScoped\n public class ProtoDomainModelProducer {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "093a0b152d2c75e54a1cddd069a84abbaf08da91"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgyMjg2Ng==", "bodyText": "I think we can make this generic too adding String storageType as parameter and rename the method as getModelCacheByType(storageType).\nIn this way PROCESS_ID_MODEL_CACHE can be moved out of this class and provided as parameter.", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r435822866", "createdAt": "2020-06-05T10:06:29Z", "author": {"login": "danielezonca"}, "path": "kogito-storage/kogito-storage-infinispan/src/main/java/org/kie/kogito/storage/infinispan/cache/InfinispanCacheManager.java", "diffHunk": "@@ -114,27 +105,13 @@ public void stop(@Observes ShutdownEvent event) {\n     }\n \n     @Override\n-    public Cache<String, ProcessInstance> getProcessInstancesCache() {\n-        return new CacheImpl<>(getOrCreateCache(PROCESS_INSTANCES_CACHE, cacheTemplateName), ProcessInstance.class.getName());\n-    }\n-\n-    @Override\n-    public Cache<String, UserTaskInstance> getUserTaskInstancesCache() {\n-        return new CacheImpl<>(getOrCreateCache(USER_TASK_INSTANCES_CACHE, cacheTemplateName), UserTaskInstance.class.getName());\n-    }\n-\n-    @Override\n-    public Cache<String, Job> getJobsCache() {\n-        return new CacheImpl<>(getOrCreateCache(JOBS_CACHE, cacheTemplateName), Job.class.getName());\n-    }\n-\n-    public Map<String, String> getProtobufCache() {\n-        return manager.getCache(ProtobufMetadataManagerConstants.PROTOBUF_METADATA_CACHE_NAME);\n+    public Cache<String, String> getProcessIdModelCache() {\n+        return new CacheImpl<>(manager.administration().getOrCreateCache(PROCESS_ID_MODEL_CACHE, (String) null), String.class.getName());\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "093a0b152d2c75e54a1cddd069a84abbaf08da91"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgyMzM4Mg==", "bodyText": "Please move the whole graphql package to common module", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r435823382", "createdAt": "2020-06-05T10:07:36Z", "author": {"login": "danielezonca"}, "path": "data-index/data-index-service/src/main/java/org/kie/kogito/index/graphql/GraphQLObjectTypeMapper.java", "diffHunk": "@@ -25,9 +25,9 @@\n import graphql.schema.GraphQLOutputType;\n import graphql.schema.GraphQLSchema;\n import graphql.schema.GraphQLType;\n-import org.kie.kogito.index.domain.AttributeDescriptor;\n-import org.kie.kogito.index.domain.DomainDescriptor;\n import org.kie.kogito.index.model.KogitoMetadata;\n+import org.kie.kogito.index.protobuf.domain.AttributeDescriptor;\n+import org.kie.kogito.index.protobuf.domain.DomainDescriptor;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "093a0b152d2c75e54a1cddd069a84abbaf08da91"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgyNTE1Mw==", "bodyText": "Can you please rename this class as StorageQualifier?", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r435825153", "createdAt": "2020-06-05T10:11:09Z", "author": {"login": "danielezonca"}, "path": "kogito-storage/kogito-storage-api/src/main/java/org/kie/kogito/storage/api/annotations/Storage.java", "diffHunk": "@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.kie.kogito.index.storage;\n+package org.kie.kogito.storage.api.annotations;\n \n import java.lang.annotation.Retention;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "093a0b152d2c75e54a1cddd069a84abbaf08da91"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNTgyNTI2NQ==", "bodyText": "Can you please rename this class as StorageQualifierImpl?", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r435825265", "createdAt": "2020-06-05T10:11:24Z", "author": {"login": "danielezonca"}, "path": "kogito-storage/kogito-storage-api/src/main/java/org/kie/kogito/storage/api/annotations/StorageImpl.java", "diffHunk": "@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.kie.kogito.index.storage;\n+package org.kie.kogito.storage.api.annotations;\n \n import java.util.Objects;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "093a0b152d2c75e54a1cddd069a84abbaf08da91"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a009b2bb0c9dfd0c2c836154291f3c8dd1ae9823", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/a009b2bb0c9dfd0c2c836154291f3c8dd1ae9823", "committedDate": "2020-06-05T10:47:17Z", "message": "fix integration tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ce65822cd90fc7c4ee5b556c9721237e4d55cbc2", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/ce65822cd90fc7c4ee5b556c9721237e4d55cbc2", "committedDate": "2020-06-05T11:06:46Z", "message": "Merge remote-tracking branch 'upstream/master'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a1ed61cb0ef05836a574cd5b1f85a9adf3336ad0", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/a1ed61cb0ef05836a574cd5b1f85a9adf3336ad0", "committedDate": "2020-06-05T11:59:21Z", "message": "rename classes based on comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3968883c669a2efacd8cf5dbf3e8f1d0f0f60490", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/3968883c669a2efacd8cf5dbf3e8f1d0f0f60490", "committedDate": "2020-06-05T12:04:28Z", "message": "rename classes based on comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55a8847ce804a849380f4d2383215517f2b4ba6c", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/55a8847ce804a849380f4d2383215517f2b4ba6c", "committedDate": "2020-06-05T13:26:11Z", "message": "refactoring getProtobufCache and getProcessIdModelCache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e781ec386dd0cc0d11c3a9b1dd397beb10d8869", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/4e781ec386dd0cc0d11c3a9b1dd397beb10d8869", "committedDate": "2020-06-05T15:15:44Z", "message": "refactoring protobuf module"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1NDE4OTU4", "url": "https://github.com/kiegroup/kogito-apps/pull/246#pullrequestreview-425418958", "createdAt": "2020-06-05T15:46:48Z", "commit": {"oid": "4e781ec386dd0cc0d11c3a9b1dd397beb10d8869"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNTo0Njo0OFrOGfz2Sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wNVQxNTo1ODozNFrOGf0Qpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAwODUyMw==", "bodyText": "Please rename the method as getModelCacheByType", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r436008523", "createdAt": "2020-06-05T15:46:48Z", "author": {"login": "danielezonca"}, "path": "kogito-storage-commons/kogito-storage-commons-api/src/main/java/org/kie/kogito/storage/api/StorageService.java", "diffHunk": "@@ -14,22 +14,18 @@\n  * limitations under the License.\n  */\n \n-package org.kie.kogito.index.cache;\n+package org.kie.kogito.storage.api;\n \n-import com.fasterxml.jackson.databind.node.ObjectNode;\n-import org.kie.kogito.index.model.Job;\n-import org.kie.kogito.index.model.ProcessInstance;\n-import org.kie.kogito.index.model.UserTaskInstance;\n-\n-public interface CacheService {\n+import java.util.Map;\n \n-    Cache<String, ProcessInstance> getProcessInstancesCache();\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n \n-    Cache<String, UserTaskInstance> getUserTaskInstancesCache();\n+public interface StorageService {\n+    Storage<String, String> getProtobufCache();\n \n-    Cache<String, Job> getJobsCache();\n+    <T> Storage<String, T> getCache(String index, Class<T> type);\n \n-    Cache<String, ObjectNode> getDomainModelCache(String processId);\n+    Storage<String, ObjectNode> getDomainModelCache(String index, String processId);\n \n-    Cache<String, String> getProcessIdModelCache();\n+    Storage<String, String> getProcessIdModelCache(String index);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e781ec386dd0cc0d11c3a9b1dd397beb10d8869"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAwODc1Ng==", "bodyText": "Please rename parameters as type and elementId", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r436008756", "createdAt": "2020-06-05T15:47:13Z", "author": {"login": "danielezonca"}, "path": "kogito-storage-commons/kogito-storage-commons-api/src/main/java/org/kie/kogito/storage/api/StorageService.java", "diffHunk": "@@ -14,22 +14,18 @@\n  * limitations under the License.\n  */\n \n-package org.kie.kogito.index.cache;\n+package org.kie.kogito.storage.api;\n \n-import com.fasterxml.jackson.databind.node.ObjectNode;\n-import org.kie.kogito.index.model.Job;\n-import org.kie.kogito.index.model.ProcessInstance;\n-import org.kie.kogito.index.model.UserTaskInstance;\n-\n-public interface CacheService {\n+import java.util.Map;\n \n-    Cache<String, ProcessInstance> getProcessInstancesCache();\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n \n-    Cache<String, UserTaskInstance> getUserTaskInstancesCache();\n+public interface StorageService {\n+    Storage<String, String> getProtobufCache();\n \n-    Cache<String, Job> getJobsCache();\n+    <T> Storage<String, T> getCache(String index, Class<T> type);\n \n-    Cache<String, ObjectNode> getDomainModelCache(String processId);\n+    Storage<String, ObjectNode> getDomainModelCache(String index, String processId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e781ec386dd0cc0d11c3a9b1dd397beb10d8869"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjAxNTI3MA==", "bodyText": "Remove TODO?", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r436015270", "createdAt": "2020-06-05T15:58:34Z", "author": {"login": "danielezonca"}, "path": "data-index/data-index-storage/data-index-storage-protobuf/src/main/java/org/kie/kogito/index/protobuf/ProtostreamProducer.java", "diffHunk": "@@ -24,6 +24,7 @@\n import org.infinispan.protostream.FileDescriptorSource;\n \n @ApplicationScoped\n+// TODO: wiring class to leave in consumer", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4e781ec386dd0cc0d11c3a9b1dd397beb10d8869"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05b9dd58c5d0bef3af6176e63629b57f3bf6a704", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/05b9dd58c5d0bef3af6176e63629b57f3bf6a704", "committedDate": "2020-06-08T07:35:18Z", "message": "rename methods according to comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a866ee207fdf049bf4e2455a571eb7ff1952c394", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/a866ee207fdf049bf4e2455a571eb7ff1952c394", "committedDate": "2020-06-08T08:00:25Z", "message": "add kogito storage commons readme"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5355eded0d7e654a6b4cba7fb0650cbc22138109", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/5355eded0d7e654a6b4cba7fb0650cbc22138109", "committedDate": "2020-06-08T12:52:13Z", "message": "rename parameters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e08e47ff17554c39797935f9aa4dafaef3845f26", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/e08e47ff17554c39797935f9aa4dafaef3845f26", "committedDate": "2020-06-08T13:52:16Z", "message": "add licences"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MTczODk5", "url": "https://github.com/kiegroup/kogito-apps/pull/246#pullrequestreview-426173899", "createdAt": "2020-06-08T12:25:51Z", "commit": {"oid": "a866ee207fdf049bf4e2455a571eb7ff1952c394"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMjoyNTo1MVrOGgbQQg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxMjoyNTo1MVrOGgbQQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjY1NDE0Ng==", "bodyText": "What about a simple How to use it ? :)", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r436654146", "createdAt": "2020-06-08T12:25:51Z", "author": {"login": "danielezonca"}, "path": "kogito-storage-commons/README.md", "diffHunk": "@@ -0,0 +1,17 @@\n+# Kogito storage commons\n+\n+This is the module that provides the persistence abstraction for the kogito apps. \n+\n+It is composed by three modules: \n+\n+1) `kogito-storage-commons-api` contains the interfaces `Storage` and `StorageService` that the consumer has to inject in his application. In addition to that, it contains the interface `Query` that the consumer has to use to query the storage. \n+2) `kogito-storage-commons-infinispan` contains all the classes to manage infinispan as persistence layer. \n+3) `kogito-storage-commons-protobuf` contains the `ProtobufService` that the consumer can use to manage his protobuf schemas. \n+\n+## How to use the abstraction provided by this module", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a866ee207fdf049bf4e2455a571eb7ff1952c394"}, "originalPosition": 11}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f8ce33323b51866fb5a494aebef3832d3288c1fe", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/f8ce33323b51866fb5a494aebef3832d3288c1fe", "committedDate": "2020-06-08T14:50:22Z", "message": "fix readme"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2MzYxNzY3", "url": "https://github.com/kiegroup/kogito-apps/pull/246#pullrequestreview-426361767", "createdAt": "2020-06-08T15:33:02Z", "commit": {"oid": "f8ce33323b51866fb5a494aebef3832d3288c1fe"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNTozMzowMlrOGgkGCg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQxNTozOToxNVrOGgkWaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc5ODk4Ng==", "bodyText": "I think getProtobufCache should be part of the protobuf implementation, because other types of storage service won't be able to implement the interface.", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r436798986", "createdAt": "2020-06-08T15:33:02Z", "author": {"login": "xieshenzh"}, "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/DataIndexStorageService.java", "diffHunk": "@@ -14,22 +14,27 @@\n  * limitations under the License.\n  */\n \n-package org.kie.kogito.index.cache;\n+package org.kie.kogito.index;\n+\n+import java.util.Map;\n \n import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.kie.kogito.index.model.Job;\n import org.kie.kogito.index.model.ProcessInstance;\n import org.kie.kogito.index.model.UserTaskInstance;\n+import org.kie.kogito.storage.api.Storage;\n+\n+public interface DataIndexStorageService {\n \n-public interface CacheService {\n+    Storage<String, String> getProtobufCache();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8ce33323b51866fb5a494aebef3832d3288c1fe"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjc5OTMwNg==", "bodyText": "Map is not used by the interface and can be removed.", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r436799306", "createdAt": "2020-06-08T15:33:31Z", "author": {"login": "xieshenzh"}, "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/DataIndexStorageService.java", "diffHunk": "@@ -14,22 +14,27 @@\n  * limitations under the License.\n  */\n \n-package org.kie.kogito.index.cache;\n+package org.kie.kogito.index;\n+\n+import java.util.Map;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8ce33323b51866fb5a494aebef3832d3288c1fe"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjgwMzE3OQ==", "bodyText": "I don't think AttributeDescriptor, DomainDescriptor and DomainModelRegisteredEvent should be part of the protobuf implementation. They are supposed to be part of the API. If the data structure is not ideal, maybe we can review it in future.", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r436803179", "createdAt": "2020-06-08T15:39:15Z", "author": {"login": "xieshenzh"}, "path": "kogito-storage-commons/kogito-storage-commons-protobuf/src/main/java/org/kie/kogito/storage/protobuf/domain/DomainDescriptor.java", "diffHunk": "@@ -14,7 +14,7 @@\n  * limitations under the License.\n  */\n \n-package org.kie.kogito.index.domain;\n+package org.kie.kogito.storage.protobuf.domain;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f8ce33323b51866fb5a494aebef3832d3288c1fe"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "70ca5e299c7bbd97ae8d5e671ee382ceac876962", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/70ca5e299c7bbd97ae8d5e671ee382ceac876962", "committedDate": "2020-06-09T05:03:50Z", "message": "move protobuf domain to api and remove unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2c6a4ecf3d48d2b891261ed6c637d8e8f11eb42f", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/2c6a4ecf3d48d2b891261ed6c637d8e8f11eb42f", "committedDate": "2020-06-09T13:58:50Z", "message": "refactoring getProtobufCache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fb17921111a3f356b54d099c84f651c399bdf5d1", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/fb17921111a3f356b54d099c84f651c399bdf5d1", "committedDate": "2020-06-09T14:02:56Z", "message": "remove getProtobufCache old method"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bd29feb5a9429115e932299baf72b07ac3e5daf3", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/bd29feb5a9429115e932299baf72b07ac3e5daf3", "committedDate": "2020-06-10T07:18:01Z", "message": "remove getProtobufCache from DataIndexStorageManager, ProtobufService injected directly in protobuf manager"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI3NzI3MTcy", "url": "https://github.com/kiegroup/kogito-apps/pull/246#pullrequestreview-427727172", "createdAt": "2020-06-10T05:46:50Z", "commit": {"oid": "fb17921111a3f356b54d099c84f651c399bdf5d1"}, "state": "COMMENTED", "comments": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNTo0Njo1MFrOGhlrTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQwNzoxODo0OFrOGhn2kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3MzQ4Ng==", "bodyText": "can we keep the import * ? :)", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437873486", "createdAt": "2020-06-10T05:46:50Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/service/IndexingServiceIT.java", "diffHunk": "@@ -53,7 +53,28 @@\n import static org.hamcrest.CoreMatchers.nullValue;\n import static org.hamcrest.Matchers.emptyOrNullString;\n import static org.hamcrest.Matchers.hasItems;\n-import static org.kie.kogito.index.GraphQLUtils.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb17921111a3f356b54d099c84f651c399bdf5d1"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3NTQ2MQ==", "bodyText": "@r00ta perhaps move this file to StorageImpl so we can keep its change history?", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437875461", "createdAt": "2020-06-10T05:53:31Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-storage/data-index-storage-infinispan/src/main/java/org/kie/kogito/index/infinispan/cache/CacheImpl.java", "diffHunk": "@@ -1,205 +0,0 @@\n-/*\n- * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.kie.kogito.index.infinispan.cache;\n-\n-import java.util.Collection;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.function.BiConsumer;\n-import java.util.function.BiFunction;\n-import java.util.function.Consumer;\n-import java.util.function.Function;\n-\n-import org.infinispan.client.hotrod.RemoteCache;\n-import org.kie.kogito.index.cache.Cache;\n-import org.kie.kogito.index.infinispan.listener.CacheObjectCreatedListener;\n-import org.kie.kogito.index.infinispan.listener.CacheObjectRemovedListener;\n-import org.kie.kogito.index.infinispan.listener.CacheObjectUpdatedListener;\n-import org.kie.kogito.index.infinispan.query.InfinispanQuery;\n-import org.kie.kogito.index.query.Query;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-public class CacheImpl<K, V> implements Cache<K, V> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb17921111a3f356b54d099c84f651c399bdf5d1"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3NjY5NA==", "bodyText": "should this file be moved instead?", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437876694", "createdAt": "2020-06-10T05:57:14Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-storage/data-index-storage-protobuf/src/test/java/org/kie/kogito/index/protobuf/ProtoDomainModelProducerTest.java", "diffHunk": "@@ -1,53 +0,0 @@\n-/*\n- * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n- *\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-package org.kie.kogito.index.protobuf;\n-\n-import javax.enterprise.event.Event;\n-\n-import org.infinispan.protostream.descriptors.FileDescriptor;\n-import org.junit.jupiter.api.Test;\n-import org.junit.jupiter.api.extension.ExtendWith;\n-import org.kie.kogito.index.event.DomainModelRegisteredEvent;\n-import org.mockito.InjectMocks;\n-import org.mockito.Mock;\n-import org.mockito.junit.jupiter.MockitoExtension;\n-\n-import static org.kie.kogito.index.protobuf.TestUtils.ADDITIONAL_DESCRIPTORS;\n-import static org.kie.kogito.index.protobuf.TestUtils.DOMAIN_DESCRIPTOR;\n-import static org.kie.kogito.index.protobuf.TestUtils.PROCESS_ID;\n-import static org.kie.kogito.index.protobuf.TestUtils.getTestFileDescriptor;\n-import static org.mockito.ArgumentMatchers.eq;\n-import static org.mockito.Mockito.verify;\n-\n-@ExtendWith(MockitoExtension.class)\n-class ProtoDomainModelProducerTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb17921111a3f356b54d099c84f651c399bdf5d1"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3NzE1MQ==", "bodyText": "should this property be generic for all services? Maybe defined as kogito.storage.type ?\n@danielezonca", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437877151", "createdAt": "2020-06-10T05:58:42Z", "author": {"login": "cristianonicolai"}, "path": "kogito-storage-commons/README.md", "diffHunk": "@@ -0,0 +1,17 @@\n+# Kogito storage commons\n+\n+This is the module that provides the persistence abstraction for the kogito apps. \n+\n+It is composed by three modules: \n+\n+1) `kogito-storage-commons-api` contains the interfaces `Storage` and `StorageService` that the consumer has to inject in his application. In addition to that, it contains the interface `Query` that the consumer has to use to query the storage. \n+2) `kogito-storage-commons-infinispan` contains all the classes to manage infinispan as persistence layer. \n+3) `kogito-storage-commons-protobuf` contains the `ProtobufService` that the consumer can use to manage his protobuf schemas. \n+\n+## How to use it\n+\n+The consumer has to \n+\n+1) Inject the `StorageService` bean where needed, and the implementation will be selected using the property `kogito.data-index.storage.type`. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb17921111a3f356b54d099c84f651c399bdf5d1"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg3OTIyMg==", "bodyText": "It feels that getDomainModelCache and getModelCacheByType are specific to data index I would leave that in the data index storage.", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437879222", "createdAt": "2020-06-10T06:05:08Z", "author": {"login": "cristianonicolai"}, "path": "kogito-storage-commons/kogito-storage-commons-api/src/main/java/org/kie/kogito/storage/api/StorageService.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.storage.api;\n+\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+public interface StorageService {\n+\n+    <T> Storage<String, T> getCache(String index, Class<T> type);\n+\n+    Storage<String, ObjectNode> getDomainModelCache(String type, String elementId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb17921111a3f356b54d099c84f651c399bdf5d1"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4MDMwMA==", "bodyText": "dependency not needed", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437880300", "createdAt": "2020-06-10T06:08:23Z", "author": {"login": "cristianonicolai"}, "path": "kogito-storage-commons/kogito-storage-commons-api/pom.xml", "diffHunk": "@@ -0,0 +1,58 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>kogito-storage-commons</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+  <name>Kogito :: Kogito Storage API</name>\n+  <artifactId>kogito-storage-commons-api</artifactId>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.core</groupId>\n+      <artifactId>jackson-databind</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.core</groupId>\n+      <artifactId>jackson-annotations</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>jakarta.inject</groupId>\n+      <artifactId>jakarta.inject-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-core</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-core</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-junit-jupiter</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb17921111a3f356b54d099c84f651c399bdf5d1"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4MDMxNQ==", "bodyText": "dependency not needed", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437880315", "createdAt": "2020-06-10T06:08:27Z", "author": {"login": "cristianonicolai"}, "path": "kogito-storage-commons/kogito-storage-commons-api/pom.xml", "diffHunk": "@@ -0,0 +1,58 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>kogito-storage-commons</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+  <name>Kogito :: Kogito Storage API</name>\n+  <artifactId>kogito-storage-commons-api</artifactId>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.core</groupId>\n+      <artifactId>jackson-databind</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.core</groupId>\n+      <artifactId>jackson-annotations</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>jakarta.inject</groupId>\n+      <artifactId>jakarta.inject-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-core</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-core</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-junit-jupiter</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.assertj</groupId>\n+      <artifactId>assertj-core</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb17921111a3f356b54d099c84f651c399bdf5d1"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4MDMzNw==", "bodyText": "dependency not needed", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437880337", "createdAt": "2020-06-10T06:08:31Z", "author": {"login": "cristianonicolai"}, "path": "kogito-storage-commons/kogito-storage-commons-api/pom.xml", "diffHunk": "@@ -0,0 +1,58 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>kogito-storage-commons</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+  <name>Kogito :: Kogito Storage API</name>\n+  <artifactId>kogito-storage-commons-api</artifactId>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.core</groupId>\n+      <artifactId>jackson-databind</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.core</groupId>\n+      <artifactId>jackson-annotations</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>jakarta.inject</groupId>\n+      <artifactId>jakarta.inject-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-core</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-core</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-junit-jupiter</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.assertj</groupId>\n+      <artifactId>assertj-core</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-junit5</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.rest-assured</groupId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb17921111a3f356b54d099c84f651c399bdf5d1"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4MTcxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n          \n          \n            \n             * Copyright 2020 Red Hat, Inc. and/or its affiliates.", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437881710", "createdAt": "2020-06-10T06:12:38Z", "author": {"login": "cristianonicolai"}, "path": "kogito-storage-commons/kogito-storage-commons-api/src/main/java/org/kie/kogito/storage/api/StorageService.java", "diffHunk": "@@ -0,0 +1,28 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb17921111a3f356b54d099c84f651c399bdf5d1"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4MjY4Mg==", "bodyText": "dependency not needed?", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437882682", "createdAt": "2020-06-10T06:15:38Z", "author": {"login": "cristianonicolai"}, "path": "kogito-storage-commons/kogito-storage-commons-infinispan/pom.xml", "diffHunk": "@@ -0,0 +1,57 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>kogito-storage-commons</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kogito-storage-commons-infinispan</artifactId>\n+  <name>Kogito :: Kogito Storage Infinispan</name>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-storage-commons-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-infinispan-client</artifactId>\n+    </dependency>\n+\n+    <!-- Health Check -->\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>infinispan-quarkus-health-addon</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.assertj</groupId>\n+      <artifactId>assertj-core</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb17921111a3f356b54d099c84f651c399bdf5d1"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4MjkyOA==", "bodyText": "keep import * :)", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437882928", "createdAt": "2020-06-10T06:16:18Z", "author": {"login": "cristianonicolai"}, "path": "kogito-storage-commons/kogito-storage-commons-infinispan/src/test/java/org/kie/kogito/storage/infinispan/query/InfinispanQueryTest.java", "diffHunk": "@@ -27,23 +27,39 @@\n import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.Arguments;\n import org.junit.jupiter.params.provider.MethodSource;\n-import org.kie.kogito.index.model.ProcessInstance;\n-import org.kie.kogito.index.query.AttributeFilter;\n+import org.kie.kogito.storage.api.query.AttributeFilter;\n import org.mockito.Mock;\n import org.mockito.junit.jupiter.MockitoExtension;\n \n import static java.util.Arrays.asList;\n import static java.util.Collections.emptyList;\n-import static org.kie.kogito.index.query.QueryFilterFactory.*;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb17921111a3f356b54d099c84f651c399bdf5d1"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzg4MzAwNw==", "bodyText": "missing name", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437883007", "createdAt": "2020-06-10T06:16:32Z", "author": {"login": "cristianonicolai"}, "path": "kogito-storage-commons/kogito-storage-commons-protobuf/pom.xml", "diffHunk": "@@ -0,0 +1,54 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>kogito-apps</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb17921111a3f356b54d099c84f651c399bdf5d1"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkwMzIxNg==", "bodyText": "dependency not needed?", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437903216", "createdAt": "2020-06-10T07:06:13Z", "author": {"login": "cristianonicolai"}, "path": "kogito-storage-commons/kogito-storage-commons-protobuf/pom.xml", "diffHunk": "@@ -0,0 +1,54 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>kogito-apps</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kogito-storage-commons-protobuf</artifactId>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-storage-commons-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>infinispan-persistence-addon</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-core</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.infinispan.protostream</groupId>\n+      <artifactId>protostream</artifactId>\n+    </dependency>\n+\n+    <!-- test -->\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-core</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-junit-jupiter</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter-engine</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-storage-commons-infinispan</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb17921111a3f356b54d099c84f651c399bdf5d1"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkwNTQwOA==", "bodyText": "should a test be added for this?", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437905408", "createdAt": "2020-06-10T07:11:03Z", "author": {"login": "cristianonicolai"}, "path": "kogito-storage-commons/kogito-storage-commons-protobuf/src/test/java/org/kie/kogito/storage/protobuf/ProtoDomainModelProducerTest.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.storage.protobuf;\n+\n+import java.io.IOException;\n+import java.net.URISyntaxException;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+\n+import javax.enterprise.event.Event;\n+\n+import org.infinispan.protostream.FileDescriptorSource;\n+import org.infinispan.protostream.SerializationContext;\n+import org.infinispan.protostream.config.Configuration;\n+import org.infinispan.protostream.descriptors.FileDescriptor;\n+import org.infinispan.protostream.impl.SerializationContextImpl;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.kie.kogito.storage.api.proto.DomainModelRegisteredEvent;\n+import org.kie.kogito.storage.protobuf.domain.ProtoDomainModelProducer;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+\n+import static org.kie.kogito.storage.protobuf.ProtobufService.DOMAIN_MODEL_PROTO_NAME;\n+import static org.kie.kogito.storage.protobuf.TestUtils.ADDITIONAL_DESCRIPTORS;\n+import static org.kie.kogito.storage.protobuf.TestUtils.DOMAIN_DESCRIPTOR;\n+import static org.kie.kogito.storage.protobuf.TestUtils.PROCESS_ID;\n+import static org.mockito.ArgumentMatchers.eq;\n+import static org.mockito.Mockito.verify;\n+\n+@ExtendWith(MockitoExtension.class)\n+class ProtoDomainModelProducerTest {\n+\n+    @Mock\n+    Event<DomainModelRegisteredEvent> domainEvent;\n+\n+    @InjectMocks\n+    ProtoDomainModelProducer protoDomainModelProducer;\n+\n+    @Test\n+    void onFileDescriptorRegistered() {\n+        FileDescriptor fileDescriptor = getTestFileDescriptor();\n+        FileDescriptorRegisteredEvent event = new FileDescriptorRegisteredEvent(fileDescriptor);\n+        protoDomainModelProducer.onFileDescriptorRegistered(event);\n+\n+        verify(domainEvent).fire(eq(new DomainModelRegisteredEvent(PROCESS_ID, DOMAIN_DESCRIPTOR, ADDITIONAL_DESCRIPTORS)));\n+    }\n+\n+    static FileDescriptor getTestFileDescriptor() {\n+        String content = getTestFileContent();\n+        SerializationContext ctx = new SerializationContextImpl(Configuration.builder().build());\n+        ctx.registerProtoFiles(FileDescriptorSource.fromString(DOMAIN_MODEL_PROTO_NAME, content));\n+        return ctx.getFileDescriptors().get(DOMAIN_MODEL_PROTO_NAME);\n+    }\n+\n+    static String getTestFileContent() {\n+        return getTestFileContent(\"test.proto\");\n+    }\n+\n+    static String getTestFileInvalidContent() {\n+        return getTestFileContent(\"test_invalid.proto\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb17921111a3f356b54d099c84f651c399bdf5d1"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkwNTYyMg==", "bodyText": "missing name", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437905622", "createdAt": "2020-06-10T07:11:30Z", "author": {"login": "cristianonicolai"}, "path": "kogito-storage-commons/pom.xml", "diffHunk": "@@ -0,0 +1,23 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>kogito-apps</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>kogito-storage-commons</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb17921111a3f356b54d099c84f651c399bdf5d1"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkwNjI2OA==", "bodyText": "I know Maven can handle the build order, but could you add this module as the first in the module list?", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437906268", "createdAt": "2020-06-10T07:12:49Z", "author": {"login": "cristianonicolai"}, "path": "pom.xml", "diffHunk": "@@ -64,5 +64,6 @@\n     <module>management-console</module>\n     <module>explainability-service</module>\n     <module>trusty</module>\n+    <module>kogito-storage-commons</module>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb17921111a3f356b54d099c84f651c399bdf5d1"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzkwOTEzOA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n             * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n          \n          \n            \n             * Copyright 2020 Red Hat, Inc. and/or its affiliates.", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r437909138", "createdAt": "2020-06-10T07:18:48Z", "author": {"login": "cristianonicolai"}, "path": "kogito-storage-commons/kogito-storage-commons-infinispan/src/main/java/org/kie/kogito/storage/infinispan/cache/StorageImpl.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fb17921111a3f356b54d099c84f651c399bdf5d1"}, "originalPosition": 2}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ec04ea04d9efec0271abdcf4ba692c76914a202", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/8ec04ea04d9efec0271abdcf4ba692c76914a202", "committedDate": "2020-06-10T08:58:45Z", "message": "Update kogito-storage-commons/kogito-storage-commons-infinispan/src/main/java/org/kie/kogito/storage/infinispan/cache/StorageImpl.java\n\nCo-authored-by: Cristiano Nicolai <cristiano.nicolai@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b8f255dcbd20bd01d8860819ca5a90dafdf3c204", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/b8f255dcbd20bd01d8860819ca5a90dafdf3c204", "committedDate": "2020-06-10T11:27:11Z", "message": "update poms, rename kogito.data-index.storage.type, optimize imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09c6481fcae228bb515e131025c8e08998b31c77", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/09c6481fcae228bb515e131025c8e08998b31c77", "committedDate": "2020-06-10T11:30:37Z", "message": "Merge branch 'KOGITO-2326-storage-abstraction' of https://github.com/r00ta/kogito-apps into KOGITO-2326-storage-abstraction"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bcb056c6586eef781ac09ba67fad5886a59e3418", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/bcb056c6586eef781ac09ba67fad5886a59e3418", "committedDate": "2020-06-10T11:32:58Z", "message": "create conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f1ae2c5863d2acaeac0861ca90869b0b48b4a16f", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/f1ae2c5863d2acaeac0861ca90869b0b48b4a16f", "committedDate": "2020-06-10T11:48:39Z", "message": "fix CacheImpl history"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7998143eea7ab6ec19f9a3457d4a7d3c317ab268", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/7998143eea7ab6ec19f9a3457d4a7d3c317ab268", "committedDate": "2020-06-10T11:51:17Z", "message": "commit changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1a86160b1314cf1d0eebc34f2f69fd9b1bd552b2", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/1a86160b1314cf1d0eebc34f2f69fd9b1bd552b2", "committedDate": "2020-06-10T12:02:02Z", "message": "create conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "906c4771e264406629a7f28d889e7c2b7bd6999f", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/906c4771e264406629a7f28d889e7c2b7bd6999f", "committedDate": "2020-06-10T12:05:59Z", "message": "recover CacheImpl history"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c7c7338817aede05af7d0d58d41b3a7f62f29828", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/c7c7338817aede05af7d0d58d41b3a7f62f29828", "committedDate": "2020-06-10T12:07:52Z", "message": "move to StorageImpl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40b980c612dcea09d2185cf45f93709dacb93072", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/40b980c612dcea09d2185cf45f93709dacb93072", "committedDate": "2020-06-10T13:03:53Z", "message": "remove duplicated code"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4f68f6173b43fc6d73a8c56898a5fd6dbcb9ce7", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/a4f68f6173b43fc6d73a8c56898a5fd6dbcb9ce7", "committedDate": "2020-06-10T13:11:48Z", "message": "create conflict"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ec5a5a2a30448da89b8c364afc1fc50c6a24731", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/1ec5a5a2a30448da89b8c364afc1fc50c6a24731", "committedDate": "2020-06-10T13:28:24Z", "message": "remove StorageImpl without history"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90750c9cc73d9384d4ad311acf7d2f9306fa1f00", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/90750c9cc73d9384d4ad311acf7d2f9306fa1f00", "committedDate": "2020-06-10T13:28:50Z", "message": "add CacheImpl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b2236ebed8f003f374043b12eda2b3663201e988", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/b2236ebed8f003f374043b12eda2b3663201e988", "committedDate": "2020-06-10T13:29:00Z", "message": "add CacheImpl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb7338fb58c693009f61e1fdb1727d52a715a38e", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/eb7338fb58c693009f61e1fdb1727d52a715a38e", "committedDate": "2020-06-10T13:29:28Z", "message": "update StorageImpl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1bab731b435784816eeb62cc8c4e0401b7c3a629", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/1bab731b435784816eeb62cc8c4e0401b7c3a629", "committedDate": "2020-06-10T14:33:11Z", "message": "refactoring getDomainModelCache"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c944dfd312dbd1ae3fd173f819d97da5083c8348", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/c944dfd312dbd1ae3fd173f819d97da5083c8348", "committedDate": "2020-06-10T15:07:15Z", "message": "refactoring getDomainModelCache"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI4NTk3MTEw", "url": "https://github.com/kiegroup/kogito-apps/pull/246#pullrequestreview-428597110", "createdAt": "2020-06-11T05:12:58Z", "commit": {"oid": "c944dfd312dbd1ae3fd173f819d97da5083c8348"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNToxMjo1OVrOGiOvtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMVQwNToxMzo0N1rOGiOwkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0NjM1OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                Storage<String, ObjectNode> getDomainModelCache(String elementId);\n          \n          \n            \n                Storage<String, ObjectNode> getDomainModelCache(String processId);", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r438546359", "createdAt": "2020-06-11T05:12:59Z", "author": {"login": "cristianonicolai"}, "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/DataIndexStorageService.java", "diffHunk": "@@ -14,22 +14,23 @@\n  * limitations under the License.\n  */\n \n-package org.kie.kogito.index.cache;\n+package org.kie.kogito.index;\n \n import com.fasterxml.jackson.databind.node.ObjectNode;\n import org.kie.kogito.index.model.Job;\n import org.kie.kogito.index.model.ProcessInstance;\n import org.kie.kogito.index.model.UserTaskInstance;\n+import org.kie.kogito.storage.api.Storage;\n \n-public interface CacheService {\n+public interface DataIndexStorageService {\n \n-    Cache<String, ProcessInstance> getProcessInstancesCache();\n+    Storage<String, ProcessInstance> getProcessInstancesCache();\n \n-    Cache<String, UserTaskInstance> getUserTaskInstancesCache();\n+    Storage<String, UserTaskInstance> getUserTaskInstancesCache();\n \n-    Cache<String, Job> getJobsCache();\n+    Storage<String, Job> getJobsCache();\n \n-    Cache<String, ObjectNode> getDomainModelCache(String processId);\n+    Storage<String, ObjectNode> getDomainModelCache(String elementId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c944dfd312dbd1ae3fd173f819d97da5083c8348"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODU0NjU3OA==", "bodyText": "replace index by name ?", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r438546578", "createdAt": "2020-06-11T05:13:47Z", "author": {"login": "cristianonicolai"}, "path": "kogito-storage-commons/kogito-storage-commons-api/src/main/java/org/kie/kogito/storage/api/StorageService.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ * Copyright 2019 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.storage.api;\n+\n+public interface StorageService {\n+\n+    Storage<String, String> getCache(String index);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c944dfd312dbd1ae3fd173f819d97da5083c8348"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53b45befa614195b0cc82c44f7c3bb98e354a43f", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/53b45befa614195b0cc82c44f7c3bb98e354a43f", "committedDate": "2020-06-11T07:18:24Z", "message": "remove unused dependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dd93797ed789c3af9c42a78cbadc83f1082f4a61", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/dd93797ed789c3af9c42a78cbadc83f1082f4a61", "committedDate": "2020-06-11T07:20:10Z", "message": "Update kogito-storage-commons/kogito-storage-commons-api/src/main/java/org/kie/kogito/storage/api/StorageService.java\n\nCo-authored-by: Cristiano Nicolai <cristiano.nicolai@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "636404b66c3da97642bd580aeabd8ad836571790", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/636404b66c3da97642bd580aeabd8ad836571790", "committedDate": "2020-06-11T07:20:48Z", "message": "Update data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/DataIndexStorageService.java\n\nCo-authored-by: Cristiano Nicolai <cristiano.nicolai@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a0d2fe316cc9a82f3592650c61165562ad7003fc", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/a0d2fe316cc9a82f3592650c61165562ad7003fc", "committedDate": "2020-06-11T07:22:44Z", "message": "rename caches parameters"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d9aa40fc88152aab387e4ff0a95bdbaa45e6969b", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/d9aa40fc88152aab387e4ff0a95bdbaa45e6969b", "committedDate": "2020-06-11T08:02:32Z", "message": "rename kogito-storage-* with kogito-persistence-*"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cdff17386ec269cb159191b989025779e0725f74", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/cdff17386ec269cb159191b989025779e0725f74", "committedDate": "2020-06-11T08:18:38Z", "message": "remove kogito prefix from persistence modules"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3090a3a3019c936455936205fbf941b93cb03304", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/3090a3a3019c936455936205fbf941b93cb03304", "committedDate": "2020-06-15T07:00:00Z", "message": "Merge remote-tracking branch 'upstream/master' into KOGITO-2326-storage-abstraction"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNDMyOTg1", "url": "https://github.com/kiegroup/kogito-apps/pull/246#pullrequestreview-430432985", "createdAt": "2020-06-15T08:36:51Z", "commit": {"oid": "3090a3a3019c936455936205fbf941b93cb03304"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwODozNjo1MlrOGjodlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQwODozNjo1MlrOGjodlA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDAxNjI3Ng==", "bodyText": "@r00ta need to drop kogito from the module names", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r440016276", "createdAt": "2020-06-15T08:36:52Z", "author": {"login": "cristianonicolai"}, "path": "persistence-commons/README.md", "diffHunk": "@@ -0,0 +1,17 @@\n+# Kogito persistence commons\n+\n+This is the module that provides the persistence abstraction for the kogito apps. \n+\n+It is composed by three modules: \n+\n+1) `kogito-persistence-commons-api` contains the interfaces `Storage` and `StorageService` that the consumer has to inject in his application. In addition to that, it contains the interface `Query` that the consumer has to use to query the storage. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3090a3a3019c936455936205fbf941b93cb03304"}, "originalPosition": 7}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7de147dcbba8888e5fa97b3a47a93016f7eb175c", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/7de147dcbba8888e5fa97b3a47a93016f7eb175c", "committedDate": "2020-06-15T09:50:56Z", "message": "update readme"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNDkwNzU5", "url": "https://github.com/kiegroup/kogito-apps/pull/246#pullrequestreview-430490759", "createdAt": "2020-06-15T09:52:43Z", "commit": {"oid": "7de147dcbba8888e5fa97b3a47a93016f7eb175c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNTc0MjY1", "url": "https://github.com/kiegroup/kogito-apps/pull/246#pullrequestreview-430574265", "createdAt": "2020-06-15T11:58:53Z", "commit": {"oid": "7de147dcbba8888e5fa97b3a47a93016f7eb175c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMTo1ODo1M1rOGjvEow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMTo1ODo1M1rOGjvEow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEyNDU3OQ==", "bodyText": "Not used", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r440124579", "createdAt": "2020-06-15T11:58:53Z", "author": {"login": "danielezonca"}, "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/DataIndexStorageServiceImpl.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import org.kie.kogito.index.model.Job;\n+import org.kie.kogito.index.model.ProcessInstance;\n+import org.kie.kogito.index.model.UserTaskInstance;\n+import org.kie.kogito.persistence.api.Storage;\n+import org.kie.kogito.persistence.api.StorageService;\n+import org.kie.kogito.persistence.protobuf.ProtobufService;\n+\n+@ApplicationScoped\n+public class DataIndexStorageServiceImpl implements DataIndexStorageService {\n+\n+    private static final String PROCESS_INSTANCES_CACHE = \"processinstances\";\n+    private static final String USER_TASK_INSTANCES_CACHE = \"usertaskinstances\";\n+    private static final String JOBS_CACHE = \"jobs\";\n+    private static final String PROCESS_ID_MODEL_CACHE = \"processidmodel\";\n+\n+    @Inject\n+    StorageService cacheService;\n+\n+    @Inject\n+    ProtobufService protobufService;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7de147dcbba8888e5fa97b3a47a93016f7eb175c"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54e3f7a5ff59169d7f0af7f27d87eb3719626fa2", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/54e3f7a5ff59169d7f0af7f27d87eb3719626fa2", "committedDate": "2020-06-15T12:07:41Z", "message": "remove unused ProtobufService in DataIndexStorageServiceImpl"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNTgwODM2", "url": "https://github.com/kiegroup/kogito-apps/pull/246#pullrequestreview-430580836", "createdAt": "2020-06-15T12:08:34Z", "commit": {"oid": "54e3f7a5ff59169d7f0af7f27d87eb3719626fa2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMwNjc2MDI3", "url": "https://github.com/kiegroup/kogito-apps/pull/246#pullrequestreview-430676027", "createdAt": "2020-06-15T14:05:01Z", "commit": {"oid": "54e3f7a5ff59169d7f0af7f27d87eb3719626fa2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a026505361e799831474654fbc4aabce009844b0", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/a026505361e799831474654fbc4aabce009844b0", "committedDate": "2020-06-15T14:46:20Z", "message": "fix code smells"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e30ec6608bec55fba6797e5971c37111830111e5", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/e30ec6608bec55fba6797e5971c37111830111e5", "committedDate": "2020-06-15T14:53:16Z", "message": "Provide the parametrized type in AttributeFilter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "39d4447bb67aa711b2c4bc4825354da543007085", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/39d4447bb67aa711b2c4bc4825354da543007085", "committedDate": "2020-06-15T16:36:54Z", "message": "fix code smells"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "100b0795df49018fcc69786ab60c7fe0b8124b3c", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/100b0795df49018fcc69786ab60c7fe0b8124b3c", "committedDate": "2020-06-15T20:23:30Z", "message": "fix code smells"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxMTk0MDA4", "url": "https://github.com/kiegroup/kogito-apps/pull/246#pullrequestreview-431194008", "createdAt": "2020-06-16T06:27:51Z", "commit": {"oid": "100b0795df49018fcc69786ab60c7fe0b8124b3c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxNDQ2OTQ1", "url": "https://github.com/kiegroup/kogito-apps/pull/246#pullrequestreview-431446945", "createdAt": "2020-06-16T12:23:31Z", "commit": {"oid": "100b0795df49018fcc69786ab60c7fe0b8124b3c"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxMjoyMzozMlrOGkYxPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQxNDo0MDowOFrOGkepSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDgwNzc0Mg==", "bodyText": "Is there any reason behind changing access modifier from public to default? same goes to the test methods below. This is not consistent with all the test classes in this module (all are public).", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r440807742", "createdAt": "2020-06-16T12:23:32Z", "author": {"login": "afalhambra"}, "path": "data-index/data-index-service/src/test/java/org/kie/kogito/index/cache/StorageIT.java", "diffHunk": "@@ -25,27 +25,29 @@\n import io.quarkus.test.common.QuarkusTestResource;\n import io.quarkus.test.junit.QuarkusTest;\n import org.junit.jupiter.api.Test;\n+import org.kie.kogito.index.DataIndexStorageService;\n import org.kie.kogito.index.InfinispanServerTestResource;\n import org.kie.kogito.index.model.ProcessInstance;\n import org.kie.kogito.index.model.ProcessInstanceState;\n+import org.kie.kogito.persistence.api.Storage;\n \n import static org.assertj.core.api.Assertions.assertThat;\n import static org.kie.kogito.index.TestUtils.getProcessInstance;\n \n @QuarkusTest\n @QuarkusTestResource(InfinispanServerTestResource.class)\n-public class CacheIT {\n+class StorageIT {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "100b0795df49018fcc69786ab60c7fe0b8124b3c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg1NDEwNQ==", "bodyText": "This dependency is not really needed here for this module.\nHowever, data-index-storage-infinispan needs it (currently it works cause storage-infinispan has a dep on storage-api).\nShouldn't be better to remove this from here and move to:\nhttps://github.com/kiegroup/kogito-apps/blob/master/data-index/data-index-storage/data-index-storage-infinispan/pom.xml#L20\nwdyt?", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r440854105", "createdAt": "2020-06-16T13:35:18Z", "author": {"login": "afalhambra"}, "path": "data-index/data-index-storage/data-index-storage-api/pom.xml", "diffHunk": "@@ -13,6 +13,14 @@\n   <name>Kogito :: Data Index Storage API</name>\n \n   <dependencies>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>persistence-commons-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>persistence-commons-protobuf</artifactId>\n+    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "100b0795df49018fcc69786ab60c7fe0b8124b3c"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg2NzcxMQ==", "bodyText": "As I mentioned before, maybe it's worth to move the following dep here from pom.xml file in data-index-storage-api module\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <dependency>\n          \n          \n            \n                <dependency>\n          \n          \n            \n                  <groupId>org.kie.kogito</groupId>\n          \n          \n            \n                  <artifactId>persistence-commons-protobuf</artifactId>\n          \n          \n            \n                </dependency>", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r440867711", "createdAt": "2020-06-16T13:53:12Z", "author": {"login": "afalhambra"}, "path": "data-index/data-index-storage/data-index-storage-infinispan/pom.xml", "diffHunk": "@@ -17,6 +17,10 @@\n       <groupId>org.kie.kogito</groupId>\n       <artifactId>data-index-storage-api</artifactId>\n     </dependency>\n+    <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "100b0795df49018fcc69786ab60c7fe0b8124b3c"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDg4NTczNA==", "bodyText": "same with this dep - it's already included in data-index-storage-api. Is it really needed here?", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r440885734", "createdAt": "2020-06-16T14:16:25Z", "author": {"login": "afalhambra"}, "path": "data-index/data-index-storage/data-index-storage-protobuf/pom.xml", "diffHunk": "@@ -18,6 +18,10 @@\n       <groupId>org.kie.kogito</groupId>\n       <artifactId>data-index-storage-api</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>persistence-commons-protobuf</artifactId>\n+    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "100b0795df49018fcc69786ab60c7fe0b8124b3c"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDkwNDAwOA==", "bodyText": "why changing access modifier to default? is there any reason behind? same goes to the test methods. All the test classes are defined as public with public test methods. Just to keep it consistent across modules.", "url": "https://github.com/kiegroup/kogito-apps/pull/246#discussion_r440904008", "createdAt": "2020-06-16T14:40:08Z", "author": {"login": "afalhambra"}, "path": "persistence-commons/persistence-commons-infinispan/src/test/java/org/kie/kogito/persistence/infinispan/query/InfinispanQueryTest.java", "diffHunk": "@@ -27,22 +27,23 @@\n import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.Arguments;\n import org.junit.jupiter.params.provider.MethodSource;\n-import org.kie.kogito.index.model.ProcessInstance;\n-import org.kie.kogito.index.query.AttributeFilter;\n+import org.kie.kogito.persistence.api.query.AttributeFilter;\n import org.mockito.Mock;\n import org.mockito.junit.jupiter.MockitoExtension;\n \n import static java.util.Arrays.asList;\n import static java.util.Collections.emptyList;\n-import static org.kie.kogito.index.query.QueryFilterFactory.*;\n-import static org.kie.kogito.index.query.SortDirection.ASC;\n-import static org.kie.kogito.index.query.SortDirection.DESC;\n+import static org.kie.kogito.persistence.api.query.QueryFilterFactory.*;\n+import static org.kie.kogito.persistence.api.query.SortDirection.ASC;\n+import static org.kie.kogito.persistence.api.query.SortDirection.DESC;\n import static org.mockito.ArgumentMatchers.any;\n import static org.mockito.Mockito.verify;\n import static org.mockito.Mockito.when;\n \n @ExtendWith(MockitoExtension.class)\n-public class InfinispanQueryTest {\n+class InfinispanQueryTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "100b0795df49018fcc69786ab60c7fe0b8124b3c"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e7e604f499d292c1680f56d08b61c78daf3f1b27", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/e7e604f499d292c1680f56d08b61c78daf3f1b27", "committedDate": "2020-06-16T15:35:39Z", "message": "removed unused dependencies"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ccd9cfda6e640d8809389381f2a56f3241a7b4b2", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/ccd9cfda6e640d8809389381f2a56f3241a7b4b2", "committedDate": "2020-06-16T17:49:59Z", "message": "make StorageIT identifiers public"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMxODQ3NTAx", "url": "https://github.com/kiegroup/kogito-apps/pull/246#pullrequestreview-431847501", "createdAt": "2020-06-16T19:59:59Z", "commit": {"oid": "ccd9cfda6e640d8809389381f2a56f3241a7b4b2"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 86, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}