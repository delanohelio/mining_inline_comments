{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4NTk3MDIw", "number": 477, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNzo1MTozMVrOErDkTQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMjo0MDo0MlrOEwOgXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTgyNjY5OnYy", "diffSide": "RIGHT", "path": "trusty-ui/src/test/java/org/kie/kogito/KeycloakTrustyUIServiceIT.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNzo1MTozMVrOHdm3Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMFQxMjozMToxNlrOHk57dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgwNzUxNA==", "bodyText": "In the rest of the tests, we use the @QuarkusTestResource annotation like this:\n@QuarkusTestResource(KeycloakQuarkusTestResource.class)\nAs far I could see, the main difference between @testprofile and @QuarkusTestResource is that @testprofile is isolated to the running test suite where @QuarkusTestResource is per package (having this annotation affects all the tests). For me, I would prefer to having it per test suite using @testprofile, but there are two problems:\n\nIt does not allow having multiple test profiles (to specify what resources the test needs individually). Therefore, to use it, we would need to create a profile class in every single test (or module)\nThis annotation is not supported by native tests\n\nDid you use this annotation for some other reason? I would prefer all the tests use the same things to have expected behaviour. What do you think about this?", "url": "https://github.com/kiegroup/kogito-apps/pull/477#discussion_r500807514", "createdAt": "2020-10-07T07:51:31Z", "author": {"login": "Sgitario"}, "path": "trusty-ui/src/test/java/org/kie/kogito/KeycloakTrustyUIServiceIT.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.kie.kogito;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.QuarkusTestProfile;\n+import io.quarkus.test.junit.TestProfile;\n+import org.apache.http.HttpStatus;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.junit.jupiter.api.Test;\n+import org.keycloak.representations.AccessTokenResponse;\n+import org.kie.kogito.testcontainers.KogitoKeycloakContainer;\n+import org.kie.kogito.testcontainers.quarkus.KeycloakQuarkusTestResource;\n+\n+import static io.restassured.RestAssured.given;\n+\n+@QuarkusTest\n+@TestProfile(KeycloakTrustyUIServiceIT.ITKeycloakProfile.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9e68cae29eb4e41da31dbdc4c0b60d4625f0078"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg1Njk4Nw==", "bodyText": "Hi @Sgitario , I used TestProfile because of this issue quarkusio/quarkus#9854 .\nBasically when using @QuarkusTestResource, it's used for all Quarkus tests that don't specify a @TestProfile -> since we have another QuarkusTest, the keycloak container is started but it fails because it is not configured.", "url": "https://github.com/kiegroup/kogito-apps/pull/477#discussion_r500856987", "createdAt": "2020-10-07T09:09:37Z", "author": {"login": "r00ta"}, "path": "trusty-ui/src/test/java/org/kie/kogito/KeycloakTrustyUIServiceIT.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.kie.kogito;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.QuarkusTestProfile;\n+import io.quarkus.test.junit.TestProfile;\n+import org.apache.http.HttpStatus;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.junit.jupiter.api.Test;\n+import org.keycloak.representations.AccessTokenResponse;\n+import org.kie.kogito.testcontainers.KogitoKeycloakContainer;\n+import org.kie.kogito.testcontainers.quarkus.KeycloakQuarkusTestResource;\n+\n+import static io.restassured.RestAssured.given;\n+\n+@QuarkusTest\n+@TestProfile(KeycloakTrustyUIServiceIT.ITKeycloakProfile.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgwNzUxNA=="}, "originalCommit": {"oid": "a9e68cae29eb4e41da31dbdc4c0b60d4625f0078"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg1ODgzMA==", "bodyText": "This bit is resolved if we use the annotation this way:\n@QuarkusTestResource(KeycloakQuarkusTestResource.Conditional.class)\n\nThis way the test resource will only be executed if there are some properties enabled. See more here: https://github.com/kiegroup/kogito-runtimes/tree/master/kogito-test-utils", "url": "https://github.com/kiegroup/kogito-apps/pull/477#discussion_r500858830", "createdAt": "2020-10-07T09:12:32Z", "author": {"login": "Sgitario"}, "path": "trusty-ui/src/test/java/org/kie/kogito/KeycloakTrustyUIServiceIT.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.kie.kogito;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.QuarkusTestProfile;\n+import io.quarkus.test.junit.TestProfile;\n+import org.apache.http.HttpStatus;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.junit.jupiter.api.Test;\n+import org.keycloak.representations.AccessTokenResponse;\n+import org.kie.kogito.testcontainers.KogitoKeycloakContainer;\n+import org.kie.kogito.testcontainers.quarkus.KeycloakQuarkusTestResource;\n+\n+import static io.restassured.RestAssured.given;\n+\n+@QuarkusTest\n+@TestProfile(KeycloakTrustyUIServiceIT.ITKeycloakProfile.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgwNzUxNA=="}, "originalCommit": {"oid": "a9e68cae29eb4e41da31dbdc4c0b60d4625f0078"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1OTg5NA==", "bodyText": "Hi @Sgitario , thank you very much for the tip! I've updated the tests, could you please double check if everything looks good to you?", "url": "https://github.com/kiegroup/kogito-apps/pull/477#discussion_r508459894", "createdAt": "2020-10-20T12:31:16Z", "author": {"login": "r00ta"}, "path": "trusty-ui/src/test/java/org/kie/kogito/KeycloakTrustyUIServiceIT.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.kie.kogito;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.QuarkusTestProfile;\n+import io.quarkus.test.junit.TestProfile;\n+import org.apache.http.HttpStatus;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.junit.jupiter.api.Test;\n+import org.keycloak.representations.AccessTokenResponse;\n+import org.kie.kogito.testcontainers.KogitoKeycloakContainer;\n+import org.kie.kogito.testcontainers.quarkus.KeycloakQuarkusTestResource;\n+\n+import static io.restassured.RestAssured.given;\n+\n+@QuarkusTest\n+@TestProfile(KeycloakTrustyUIServiceIT.ITKeycloakProfile.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgwNzUxNA=="}, "originalCommit": {"oid": "a9e68cae29eb4e41da31dbdc4c0b60d4625f0078"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTgyNzc2OnYy", "diffSide": "RIGHT", "path": "trusty-ui/src/test/java/org/kie/kogito/KeycloakTrustyUIServiceIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNzo1MTo0NlrOHdm4Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNzo1MTo0NlrOHdm4Bw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgwNzY4Nw==", "bodyText": "We don't need to implement this method.", "url": "https://github.com/kiegroup/kogito-apps/pull/477#discussion_r500807687", "createdAt": "2020-10-07T07:51:46Z", "author": {"login": "Sgitario"}, "path": "trusty-ui/src/test/java/org/kie/kogito/KeycloakTrustyUIServiceIT.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.kie.kogito;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.QuarkusTestProfile;\n+import io.quarkus.test.junit.TestProfile;\n+import org.apache.http.HttpStatus;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.junit.jupiter.api.Test;\n+import org.keycloak.representations.AccessTokenResponse;\n+import org.kie.kogito.testcontainers.KogitoKeycloakContainer;\n+import org.kie.kogito.testcontainers.quarkus.KeycloakQuarkusTestResource;\n+\n+import static io.restassured.RestAssured.given;\n+\n+@QuarkusTest\n+@TestProfile(KeycloakTrustyUIServiceIT.ITKeycloakProfile.class)\n+class KeycloakTrustyUIServiceIT {\n+\n+    private static final String VALID_USER = \"jdoe\";\n+    private static final String TRUSTY_UI_ENDPOINT = \"/\";\n+\n+    @ConfigProperty(name = KeycloakQuarkusTestResource.KOGITO_KEYCLOAK_PROPERTY)\n+    String keycloakURL;\n+\n+    @Test\n+    void shouldReturnUnauthorized() {\n+        given().get(TRUSTY_UI_ENDPOINT)\n+                .then().statusCode(HttpStatus.SC_UNAUTHORIZED);\n+    }\n+\n+    @Test\n+    void shouldReturnOkWhenValidUser() {\n+        given().auth().oauth2(getAccessToken(VALID_USER)).get(TRUSTY_UI_ENDPOINT)\n+                .then().statusCode(HttpStatus.SC_OK);\n+    }\n+\n+    private String getAccessToken(String userName) {\n+        return given().param(\"grant_type\", \"password\")\n+                .param(\"username\", userName)\n+                .param(\"password\", userName)\n+                .param(\"client_id\", KogitoKeycloakContainer.CLIENT_ID)\n+                .param(\"client_secret\", KogitoKeycloakContainer.CLIENT_SECRET)\n+                .when()\n+                .post(keycloakURL + \"/protocol/openid-connect/token\")\n+                .as(AccessTokenResponse.class).getToken();\n+    }\n+\n+    public static class ITKeycloakProfile implements QuarkusTestProfile {\n+\n+        @Override\n+        public Map<String, String> getConfigOverrides() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9e68cae29eb4e41da31dbdc4c0b60d4625f0078"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTgyODA0OnYy", "diffSide": "RIGHT", "path": "trusty-ui/src/test/java/org/kie/kogito/KeycloakTrustyUIServiceIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNzo1MTo0OVrOHdm4LQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwNzo1MTo0OVrOHdm4LQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgwNzcyNQ==", "bodyText": "We don't need to implement this method.", "url": "https://github.com/kiegroup/kogito-apps/pull/477#discussion_r500807725", "createdAt": "2020-10-07T07:51:49Z", "author": {"login": "Sgitario"}, "path": "trusty-ui/src/test/java/org/kie/kogito/KeycloakTrustyUIServiceIT.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.kie.kogito;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.QuarkusTestProfile;\n+import io.quarkus.test.junit.TestProfile;\n+import org.apache.http.HttpStatus;\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.junit.jupiter.api.Test;\n+import org.keycloak.representations.AccessTokenResponse;\n+import org.kie.kogito.testcontainers.KogitoKeycloakContainer;\n+import org.kie.kogito.testcontainers.quarkus.KeycloakQuarkusTestResource;\n+\n+import static io.restassured.RestAssured.given;\n+\n+@QuarkusTest\n+@TestProfile(KeycloakTrustyUIServiceIT.ITKeycloakProfile.class)\n+class KeycloakTrustyUIServiceIT {\n+\n+    private static final String VALID_USER = \"jdoe\";\n+    private static final String TRUSTY_UI_ENDPOINT = \"/\";\n+\n+    @ConfigProperty(name = KeycloakQuarkusTestResource.KOGITO_KEYCLOAK_PROPERTY)\n+    String keycloakURL;\n+\n+    @Test\n+    void shouldReturnUnauthorized() {\n+        given().get(TRUSTY_UI_ENDPOINT)\n+                .then().statusCode(HttpStatus.SC_UNAUTHORIZED);\n+    }\n+\n+    @Test\n+    void shouldReturnOkWhenValidUser() {\n+        given().auth().oauth2(getAccessToken(VALID_USER)).get(TRUSTY_UI_ENDPOINT)\n+                .then().statusCode(HttpStatus.SC_OK);\n+    }\n+\n+    private String getAccessToken(String userName) {\n+        return given().param(\"grant_type\", \"password\")\n+                .param(\"username\", userName)\n+                .param(\"password\", userName)\n+                .param(\"client_id\", KogitoKeycloakContainer.CLIENT_ID)\n+                .param(\"client_secret\", KogitoKeycloakContainer.CLIENT_SECRET)\n+                .when()\n+                .post(keycloakURL + \"/protocol/openid-connect/token\")\n+                .as(AccessTokenResponse.class).getToken();\n+    }\n+\n+    public static class ITKeycloakProfile implements QuarkusTestProfile {\n+\n+        @Override\n+        public Map<String, String> getConfigOverrides() {\n+            return Collections.emptyMap();\n+        }\n+\n+        @Override\n+        public Set<Class<?>> getEnabledAlternatives() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9e68cae29eb4e41da31dbdc4c0b60d4625f0078"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTg4NTA1OnYy", "diffSide": "RIGHT", "path": "trusty-ui/src/test/java/org/kie/kogito/NativeStaticContentTestIT.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODowNjo0NlrOHdnbVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODowNjo0NlrOHdnbVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxNjcyNw==", "bodyText": "The native profile is failing. If I run this:\nmvn clean install -Pnative\n\nIt fails because the uberJar is not true. I need to add this plugin in the native maven profile:\n<plugin>\n  <groupId>io.quarkus</groupId>\n  <artifactId>quarkus-maven-plugin</artifactId>\n  <configuration>\n    <uberJar>true</uberJar>\n  </configuration>\n  <executions>\n    <execution>\n      <goals>\n        <goal>native-image</goal>\n      </goals>\n      <configuration>\n        <additionalBuildArgs>--allow-incomplete-classpath</additionalBuildArgs>\n      </configuration>\n    </execution>\n  </executions>\n</plugin>\nAnd also remove the \"quarkus.package.type\":\n<properties>\n   <quarkus.package.type>native</quarkus.package.type>\n</properties>", "url": "https://github.com/kiegroup/kogito-apps/pull/477#discussion_r500816727", "createdAt": "2020-10-07T08:06:46Z", "author": {"login": "Sgitario"}, "path": "trusty-ui/src/test/java/org/kie/kogito/NativeStaticContentTestIT.java", "diffHunk": "@@ -19,7 +19,7 @@\n import io.quarkus.test.junit.NativeImageTest;\n \n @NativeImageTest\n-public class StaticContentTestIT extends StaticContentTest {\n+public class NativeStaticContentTestIT extends StaticContentTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9e68cae29eb4e41da31dbdc4c0b60d4625f0078"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzNTg5MTAyOnYy", "diffSide": "RIGHT", "path": "trusty-ui/src/test/java/org/kie/kogito/NativeStaticContentTestIT.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwODowODoxOFrOHdnfAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QwOToxMTo0NlrOHdp96Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxNzY2NA==", "bodyText": "The native maven profile is not running this test. For enabling it, I followed the same conventions as in Kogito Examples and then the test failed:\n[INFO] -------------------------------------------------------\n[INFO]  T E S T S\n[INFO] -------------------------------------------------------\n[INFO] Running org.kie.kogito.NativeStaticContentTestIT\nExecuting [/home/jcarvaja/sources/kogito/kogito-apps/trusty-ui/target/trusty-ui-1.0.0-SNAPSHOT-runner, -Dquarkus.http.port=8080, -Dquarkus.http.ssl-port=8444, -Dtest.url=http://localhost:8080, -Dquarkus.log.file.path=target/target/quarkus.log]\n__  ____  __  _____   ___  __ ____  ______ \n --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/ \n -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\   \n--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/   \n2020-10-07 10:47:27,852 ERROR [io.qua.application] (main) Failed to start application (with profile prod): io.vertx.core.file.FileSystemException: java.nio.file.NoSuchFileException: META-INF/resources/index.html\n\tat io.vertx.core.file.impl.FileSystemImpl$16.perform(FileSystemImpl.java:865)\n\nAlso, the Keycloak resource is not starting because of native test is not compatible with @testprofile (see here). Therefore, we would need to annotate this class using:\n@QuarkusTestResource(KeycloakQuarkusTestResource.class)", "url": "https://github.com/kiegroup/kogito-apps/pull/477#discussion_r500817664", "createdAt": "2020-10-07T08:08:18Z", "author": {"login": "Sgitario"}, "path": "trusty-ui/src/test/java/org/kie/kogito/NativeStaticContentTestIT.java", "diffHunk": "@@ -19,7 +19,7 @@\n import io.quarkus.test.junit.NativeImageTest;\n \n @NativeImageTest", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9e68cae29eb4e41da31dbdc4c0b60d4625f0078"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDg1ODM0NQ==", "bodyText": "Same as above, if we use QuarkusTestResource we have to choose betwen testing keycloak and the other Quarkus Tests", "url": "https://github.com/kiegroup/kogito-apps/pull/477#discussion_r500858345", "createdAt": "2020-10-07T09:11:46Z", "author": {"login": "r00ta"}, "path": "trusty-ui/src/test/java/org/kie/kogito/NativeStaticContentTestIT.java", "diffHunk": "@@ -19,7 +19,7 @@\n import io.quarkus.test.junit.NativeImageTest;\n \n @NativeImageTest", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDgxNzY2NA=="}, "originalCommit": {"oid": "a9e68cae29eb4e41da31dbdc4c0b60d4625f0078"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE0MDc0NDM4OnYy", "diffSide": "RIGHT", "path": "trusty-ui/src/main/resources/application.properties", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wOFQwOToyNDoyNlrOHeVrLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xMlQxNDoxNjowNVrOHx8uqA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU3NDQ0Ng==", "bodyText": "@r00ta There is something I miss here  in the oidc configuration to let keycloak manage the login page\n%keycloak.quarkus.oidc.application-type=web-app", "url": "https://github.com/kiegroup/kogito-apps/pull/477#discussion_r501574446", "createdAt": "2020-10-08T09:24:26Z", "author": {"login": "nmirasch"}, "path": "trusty-ui/src/main/resources/application.properties", "diffHunk": "@@ -1,2 +1,19 @@\n quarkus.http.cors=true\n kogito.trusty.http.url=${KOGITO_TRUSTY_HTTP_URL:http://localhost:8180}\n+\n+#oidc\n+quarkus.oidc.enabled=true\n+quarkus.oidc.tenant-enabled=false\n+\n+# HTTP Security Configuration\n+quarkus.http.auth.permission.authenticated.paths=/*\n+quarkus.http.auth.permission.authenticated.policy=permit\n+\n+#enabled with the profile: 'keycloak' (-Dquarkus.profile=keycloak)\n+%keycloak.quarkus.oidc.tenant-enabled=true\n+%keycloak.quarkus.oidc.auth-server-url=http://localhost:8280/auth/realms/kogito\n+%keycloak.quarkus.oidc.client-id=kogito-trusty-ui-service\n+%keycloak.quarkus.oidc.credentials.secret=secret", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "227a369e7b6ddf8713b0d647a62aaf3c9eb5f303"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwODQ1OTU4Mg==", "bodyText": "Hi @nmirasch , thanks for the tip! I've updated the file, could you please double check if everything is ok for you?", "url": "https://github.com/kiegroup/kogito-apps/pull/477#discussion_r508459582", "createdAt": "2020-10-20T12:30:44Z", "author": {"login": "r00ta"}, "path": "trusty-ui/src/main/resources/application.properties", "diffHunk": "@@ -1,2 +1,19 @@\n quarkus.http.cors=true\n kogito.trusty.http.url=${KOGITO_TRUSTY_HTTP_URL:http://localhost:8180}\n+\n+#oidc\n+quarkus.oidc.enabled=true\n+quarkus.oidc.tenant-enabled=false\n+\n+# HTTP Security Configuration\n+quarkus.http.auth.permission.authenticated.paths=/*\n+quarkus.http.auth.permission.authenticated.policy=permit\n+\n+#enabled with the profile: 'keycloak' (-Dquarkus.profile=keycloak)\n+%keycloak.quarkus.oidc.tenant-enabled=true\n+%keycloak.quarkus.oidc.auth-server-url=http://localhost:8280/auth/realms/kogito\n+%keycloak.quarkus.oidc.client-id=kogito-trusty-ui-service\n+%keycloak.quarkus.oidc.credentials.secret=secret", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU3NDQ0Ng=="}, "originalCommit": {"oid": "227a369e7b6ddf8713b0d647a62aaf3c9eb5f303"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDk4NzE1OQ==", "bodyText": "@r00ta this configuration looks good now and works fine.\nJust one more thing from my side, if you have any plan to add some instructions at README.md file about create the keycloak docker container, maybe would be a good idea to reuse other predefined client like 'kogito-console-quarkus' that is ready to work at 8380 and comes with the predefined kogito-realm.json  or just add this new id to https://github.com/kiegroup/kogito-apps/blob/47d51dcb1dfe684e01efb950b5df9c1d83e05ac5/config/kogito-realm.json", "url": "https://github.com/kiegroup/kogito-apps/pull/477#discussion_r510987159", "createdAt": "2020-10-23T16:03:47Z", "author": {"login": "nmirasch"}, "path": "trusty-ui/src/main/resources/application.properties", "diffHunk": "@@ -1,2 +1,19 @@\n quarkus.http.cors=true\n kogito.trusty.http.url=${KOGITO_TRUSTY_HTTP_URL:http://localhost:8180}\n+\n+#oidc\n+quarkus.oidc.enabled=true\n+quarkus.oidc.tenant-enabled=false\n+\n+# HTTP Security Configuration\n+quarkus.http.auth.permission.authenticated.paths=/*\n+quarkus.http.auth.permission.authenticated.policy=permit\n+\n+#enabled with the profile: 'keycloak' (-Dquarkus.profile=keycloak)\n+%keycloak.quarkus.oidc.tenant-enabled=true\n+%keycloak.quarkus.oidc.auth-server-url=http://localhost:8280/auth/realms/kogito\n+%keycloak.quarkus.oidc.client-id=kogito-trusty-ui-service\n+%keycloak.quarkus.oidc.credentials.secret=secret", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU3NDQ0Ng=="}, "originalCommit": {"oid": "227a369e7b6ddf8713b0d647a62aaf3c9eb5f303"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMDU3Njc5MA==", "bodyText": "Hi @nmirasch , I apologize for the very late reply. This PR went out of my radar :/ I've updated the trusty-ui readme with the same instructions that we suggest in the task-console and the management console. Let me know if this is ok for you", "url": "https://github.com/kiegroup/kogito-apps/pull/477#discussion_r520576790", "createdAt": "2020-11-10T13:51:54Z", "author": {"login": "r00ta"}, "path": "trusty-ui/src/main/resources/application.properties", "diffHunk": "@@ -1,2 +1,19 @@\n quarkus.http.cors=true\n kogito.trusty.http.url=${KOGITO_TRUSTY_HTTP_URL:http://localhost:8180}\n+\n+#oidc\n+quarkus.oidc.enabled=true\n+quarkus.oidc.tenant-enabled=false\n+\n+# HTTP Security Configuration\n+quarkus.http.auth.permission.authenticated.paths=/*\n+quarkus.http.auth.permission.authenticated.policy=permit\n+\n+#enabled with the profile: 'keycloak' (-Dquarkus.profile=keycloak)\n+%keycloak.quarkus.oidc.tenant-enabled=true\n+%keycloak.quarkus.oidc.auth-server-url=http://localhost:8280/auth/realms/kogito\n+%keycloak.quarkus.oidc.client-id=kogito-trusty-ui-service\n+%keycloak.quarkus.oidc.credentials.secret=secret", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU3NDQ0Ng=="}, "originalCommit": {"oid": "227a369e7b6ddf8713b0d647a62aaf3c9eb5f303"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyMjEzNzI1Ng==", "bodyText": "@r00ta all fine", "url": "https://github.com/kiegroup/kogito-apps/pull/477#discussion_r522137256", "createdAt": "2020-11-12T14:16:05Z", "author": {"login": "nmirasch"}, "path": "trusty-ui/src/main/resources/application.properties", "diffHunk": "@@ -1,2 +1,19 @@\n quarkus.http.cors=true\n kogito.trusty.http.url=${KOGITO_TRUSTY_HTTP_URL:http://localhost:8180}\n+\n+#oidc\n+quarkus.oidc.enabled=true\n+quarkus.oidc.tenant-enabled=false\n+\n+# HTTP Security Configuration\n+quarkus.http.auth.permission.authenticated.paths=/*\n+quarkus.http.auth.permission.authenticated.policy=permit\n+\n+#enabled with the profile: 'keycloak' (-Dquarkus.profile=keycloak)\n+%keycloak.quarkus.oidc.tenant-enabled=true\n+%keycloak.quarkus.oidc.auth-server-url=http://localhost:8280/auth/realms/kogito\n+%keycloak.quarkus.oidc.client-id=kogito-trusty-ui-service\n+%keycloak.quarkus.oidc.credentials.secret=secret", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMTU3NDQ0Ng=="}, "originalCommit": {"oid": "227a369e7b6ddf8713b0d647a62aaf3c9eb5f303"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE5MDA0NzY1OnYy", "diffSide": "RIGHT", "path": "trusty-ui/src/test/java/org/kie/kogito/NativeStaticContentTestIT.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMjo0MDo0MlrOHlpwSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMTozMDo0M1rOHo3gAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI0MzQ2Nw==", "bodyText": "This test is still not being executed when using the native maven profile.", "url": "https://github.com/kiegroup/kogito-apps/pull/477#discussion_r509243467", "createdAt": "2020-10-21T12:40:42Z", "author": {"login": "Sgitario"}, "path": "trusty-ui/src/test/java/org/kie/kogito/NativeStaticContentTestIT.java", "diffHunk": "@@ -19,7 +19,7 @@\n import io.quarkus.test.junit.NativeImageTest;\n \n @NativeImageTest\n-public class StaticContentTestIT extends StaticContentTest {\n+public class NativeStaticContentTestIT extends StaticContentTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ff0bc5e70b01c113ae4bdc8ce72dda7d9d8ca3a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjU5MDQxMQ==", "bodyText": "Hi @Sgitario , sorry for the late reply. I think the native tests are failing also on master for the management console and the trusty-ui projects, I'm wondering if we can tackle the fix in another pull request. wdyt? With the current pom the  NativeStaticContentTestIT is excluded, otherwise it would fail", "url": "https://github.com/kiegroup/kogito-apps/pull/477#discussion_r512590411", "createdAt": "2020-10-27T10:53:17Z", "author": {"login": "r00ta"}, "path": "trusty-ui/src/test/java/org/kie/kogito/NativeStaticContentTestIT.java", "diffHunk": "@@ -19,7 +19,7 @@\n import io.quarkus.test.junit.NativeImageTest;\n \n @NativeImageTest\n-public class StaticContentTestIT extends StaticContentTest {\n+public class NativeStaticContentTestIT extends StaticContentTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI0MzQ2Nw=="}, "originalCommit": {"oid": "0ff0bc5e70b01c113ae4bdc8ce72dda7d9d8ca3a"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjYxNDQwMQ==", "bodyText": "Fine with me.", "url": "https://github.com/kiegroup/kogito-apps/pull/477#discussion_r512614401", "createdAt": "2020-10-27T11:30:43Z", "author": {"login": "Sgitario"}, "path": "trusty-ui/src/test/java/org/kie/kogito/NativeStaticContentTestIT.java", "diffHunk": "@@ -19,7 +19,7 @@\n import io.quarkus.test.junit.NativeImageTest;\n \n @NativeImageTest\n-public class StaticContentTestIT extends StaticContentTest {\n+public class NativeStaticContentTestIT extends StaticContentTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTI0MzQ2Nw=="}, "originalCommit": {"oid": "0ff0bc5e70b01c113ae4bdc8ce72dda7d9d8ca3a"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 753, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}