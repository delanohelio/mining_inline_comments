{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5MjQxNDM1", "number": 221, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODo1MzoyMVrOD-Wbtw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMzo1Mzo1MFrOD_QVRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NzA1ODQ3OnYy", "diffSide": "RIGHT", "path": "packages/management-console/src/components/Organisms/DomainExplorerColumnPicker/tests/DomainExplorerColumnPicker.test.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODo1MzoyMVrOGYZkXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzo0Nzo0NVrOGZXuMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIzNzkxNw==", "bodyText": "@Sara4994 remove this comment?", "url": "https://github.com/kiegroup/kogito-apps/pull/221#discussion_r428237917", "createdAt": "2020-05-20T18:53:21Z", "author": {"login": "nmirasch"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerColumnPicker/tests/DomainExplorerColumnPicker.test.tsx", "diffHunk": "@@ -0,0 +1,340 @@\n+import React from 'react';\n+import { shallow, configure, mount } from 'enzyme';\n+import DomainExplorerColumnPicker from '../DomainExplorerColumnPicker';\n+import Adapter from 'enzyme-adapter-react-16';\n+\n+configure({ adapter: new Adapter() });\n+\n+jest.mock('react-apollo');\n+describe('Domain Explorer Column picker component', () => {\n+  it('Snapshot testing', () => {\n+    const props = {\n+      columnPickerType: 'Travels',\n+      setColumnFilters: jest.fn(),\n+      setTableLoading: jest.fn(),\n+      getQueryTypes: {\n+        data: {\n+          __schema: {\n+            queryType: [\n+              {\n+                name: 'Address',\n+                kind: 'OBJECT',\n+                fields: [\n+                  {\n+                    name: 'city',\n+                    type: {\n+                      name: 'String',\n+                      kind: 'SCALAR'\n+                    }\n+                  },\n+                  {\n+                    name: 'country',\n+                    type: {\n+                      name: 'String',\n+                      kind: 'SCALAR'\n+                    }\n+                  },\n+                  {\n+                    name: 'location',\n+                    type: {\n+                      name: 'Test',\n+                      kind: 'OBJECT'\n+                    }\n+                  }\n+                ]\n+              },\n+              {\n+                name: 'Test',\n+                kind: 'OBJECT',\n+                fields: [\n+                  {\n+                    name: 'city',\n+                    type: {\n+                      name: 'String',\n+                      kind: 'SCALAR'\n+                    }\n+                  },\n+                  {\n+                    name: 'country',\n+                    type: {\n+                      name: 'String',\n+                      kind: 'SCALAR'\n+                    }\n+                  }\n+                ]\n+              }\n+            ]\n+          }\n+        },\n+        loading: false\n+      },\n+      setDisplayTable: jest.fn(),\n+      parameters: [{ flight: ['arrival'] }, { flight: ['departure'] }],\n+      setParameters: jest.fn(),\n+      selected: [],\n+      setSelected: jest.fn(),\n+      data: [\n+        {\n+          name: 'id',\n+          type: {\n+            fields: null,\n+            kind: 'SCALAR',\n+            name: 'String',\n+            __typename: '__Type'\n+          }\n+        },\n+        {\n+          name: 'flight',\n+          type: {\n+            name: 'Flight',\n+            fields: [\n+              {\n+                name: 'arrival',\n+                type: {\n+                  name: 'String',\n+                  kind: 'SCALAR'\n+                }\n+              },\n+              {\n+                name: 'departure',\n+                type: {\n+                  name: 'String',\n+                  kind: 'SCALAR'\n+                }\n+              }\n+            ],\n+            kind: 'OBJECT'\n+          }\n+        },\n+        {\n+          name: 'hotel',\n+          type: {\n+            name: 'Hotel',\n+            fields: [\n+              {\n+                name: 'address',\n+                type: {\n+                  name: 'Address',\n+                  kind: 'OBJECT'\n+                }\n+              },\n+              {\n+                name: 'bookingNumber',\n+                type: {\n+                  name: 'String',\n+                  kind: 'SCALAR'\n+                }\n+              }\n+            ],\n+            kind: 'OBJECT'\n+          }\n+        }\n+      ],\n+      getPicker: {\n+        data: {},\n+        loading: false\n+      },\n+      setError: jest.fn(),\n+      setDisplayEmptyState: jest.fn(),\n+      rememberedParams: [{ flight: ['arrival'] }, { flight: ['departure'] }],\n+      enableCache: false,\n+      setEnableCache: jest.fn(),\n+      pageSize: 2,\n+      offsetVal: 10,\n+      setOffsetVal: jest.fn(),\n+      setPageSize: jest.fn(),\n+      setIsLoadingMore: jest.fn(),\n+      isLoadingMore: true\n+    };\n+\n+    const wrapper = mount(<DomainExplorerColumnPicker {...props} />);\n+    wrapper.update();\n+    wrapper.setProps({});\n+    expect(wrapper).toMatchSnapshot();\n+  });\n+\n+  it('Test Apply columns button', () => {\n+    const props = {\n+      columnPickerType: 'Travels',\n+      setColumnFilters: jest.fn(),\n+      setTableLoading: jest.fn(),\n+      getQueryTypes: {\n+        data: {},\n+        loading: false\n+      },\n+      setDisplayTable: jest.fn(),\n+      parameters: [{ flight: ['arrival'] }, { flight: ['departure'] }],\n+      setParameters: jest.fn(),\n+      selected: [],\n+      setSelected: jest.fn(),\n+      data: [],\n+      getPicker: {\n+        data: {},\n+        loading: false\n+      },\n+      setError: jest.fn(),\n+      setDisplayEmptyState: jest.fn(),\n+      rememberedParams: [],\n+      enableCache: false,\n+      setEnableCache: jest.fn(),\n+      pageSize: 2,\n+      offsetVal: 10,\n+      setOffsetVal: jest.fn(),\n+      setPageSize: jest.fn(),\n+      setIsLoadingMore: jest.fn(),\n+      isLoadingMore: true\n+    };\n+\n+    const wrapper = shallow(<DomainExplorerColumnPicker {...props} />);\n+\n+    wrapper.find('#refresh-button').simulate('click');\n+    wrapper.find('#apply-columns').simulate('click');\n+  });\n+  it('Test refresh button', () => {\n+    const props = {\n+      columnPickerType: 'Travels',\n+      setColumnFilters: jest.fn(),\n+      setTableLoading: jest.fn(),\n+      getQueryTypes: {\n+        data: {},\n+        loading: false\n+      },\n+      setDisplayTable: jest.fn(),\n+      parameters: [{ flight: ['arrival'] }, { flight: ['departure'] }],\n+      setParameters: jest.fn(),\n+      selected: [\"cityhotelAddress\"],\n+      setSelected: jest.fn(),\n+      data: [],\n+      getPicker: {\n+        data: {},\n+        loading: false\n+      },\n+      setError: jest.fn(),\n+      setDisplayEmptyState: jest.fn(),\n+      rememberedParams: [],\n+      enableCache: false,\n+      setEnableCache: jest.fn(),\n+      pageSize: 2,\n+      offsetVal: 10,\n+      setOffsetVal: jest.fn(),\n+      setPageSize: jest.fn(),\n+      setIsLoadingMore: jest.fn(),\n+      isLoadingMore: true\n+    };\n+    const obj = { \n+        target: { id: 'cityhotelAddress' }, \n+        nativeEvent: {\n+            target : { \n+              nextSibling: {\n+                innerText: ''\n+              },\n+              parentElement: {\n+                parentElement : {\n+                  getAttribute: jest.fn(()=> 'cityhotelAddress')\n+                }\n+              }\n+            }\n+          }\n+        }\n+    const wrapper = shallow(<DomainExplorerColumnPicker {...props} />);\n+    wrapper.find('#refresh-button').simulate('click');\n+    wrapper.find('#apply-columns').simulate('click');\n+    wrapper\n+      .find('#columnPicker-dropdown')\n+      .simulate('select', obj );\n+// tslint:disable-next-line\n+    wrapper.find('#columnPicker-dropdown').props()['onToggle']()\n+  });\n+  it('check invalid column picker', () => {\n+    const props = {\n+      columnPickerType: ' ',\n+      setColumnFilters: jest.fn(),\n+      setTableLoading: jest.fn(),\n+      getQueryTypes: {\n+        data: {},\n+        loading: false\n+      },\n+      setDisplayTable: jest.fn(),\n+      parameters: [],\n+      setParameters: jest.fn(),\n+      selected: [],\n+      setSelected: jest.fn(),\n+      data: [],\n+      getPicker: {\n+        data: {},\n+        loading: false\n+      },\n+      setError: jest.fn(),\n+      setDisplayEmptyState: jest.fn(),\n+      rememberedParams: [],\n+      enableCache: false,\n+      setEnableCache: jest.fn(),\n+      pageSize: 2,\n+      offsetVal: 10,\n+      setOffsetVal: jest.fn(),\n+      setPageSize: jest.fn(),\n+      setIsLoadingMore: jest.fn(),\n+      isLoadingMore: true\n+    };\n+    const obj = { \n+      target: { id: 'id' }, \n+      nativeEvent: {\n+          target : { \n+            nextSibling: {\n+              innerText: ''\n+            },\n+            parentElement: {\n+              parentElement : {\n+                getAttribute: jest.fn(()=> 'id')\n+              }\n+            }\n+          }\n+        }\n+      }\n+    const wrapper = shallow(<DomainExplorerColumnPicker {...props} />);\n+    wrapper.update();\n+\n+    wrapper\n+    .find('#columnPicker-dropdown')\n+    .simulate('select', obj );\n+    expect(wrapper).toMatchSnapshot();\n+  });\n+  it('check condition remembered params equal to zero', () => {\n+    const props = {\n+      columnPickerType: ' ',\n+      setColumnFilters: jest.fn(),\n+      setTableLoading: jest.fn(),\n+      getQueryTypes: {\n+        data: {},\n+        loading: false\n+      },\n+      setDisplayTable: jest.fn(),\n+      parameters: [{ flight: ['arrival'] }, { flight: ['departure'] }],\n+      setParameters: jest.fn(),\n+      selected: [],\n+      setSelected: jest.fn(),\n+      data: [],\n+      getPicker: {\n+        data: {},\n+        loading: false\n+      },\n+      setError: jest.fn(),\n+      setDisplayEmptyState: jest.fn(),\n+      rememberedParams: [],\n+      enableCache: false,\n+      setEnableCache: jest.fn(),\n+      pageSize: 2,\n+      offsetVal: 10,\n+      setOffsetVal: jest.fn(),\n+      setPageSize: jest.fn(),\n+      setIsLoadingMore: jest.fn(),\n+      isLoadingMore: true\n+    };\n+    // const paramFields = []", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e2ef6d26953da966217c128c1eb3c62bf42b08"}, "originalPosition": 333}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI1NjI0Mw==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/221#discussion_r429256243", "createdAt": "2020-05-22T13:47:45Z", "author": {"login": "Sara4994"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerColumnPicker/tests/DomainExplorerColumnPicker.test.tsx", "diffHunk": "@@ -0,0 +1,340 @@\n+import React from 'react';\n+import { shallow, configure, mount } from 'enzyme';\n+import DomainExplorerColumnPicker from '../DomainExplorerColumnPicker';\n+import Adapter from 'enzyme-adapter-react-16';\n+\n+configure({ adapter: new Adapter() });\n+\n+jest.mock('react-apollo');\n+describe('Domain Explorer Column picker component', () => {\n+  it('Snapshot testing', () => {\n+    const props = {\n+      columnPickerType: 'Travels',\n+      setColumnFilters: jest.fn(),\n+      setTableLoading: jest.fn(),\n+      getQueryTypes: {\n+        data: {\n+          __schema: {\n+            queryType: [\n+              {\n+                name: 'Address',\n+                kind: 'OBJECT',\n+                fields: [\n+                  {\n+                    name: 'city',\n+                    type: {\n+                      name: 'String',\n+                      kind: 'SCALAR'\n+                    }\n+                  },\n+                  {\n+                    name: 'country',\n+                    type: {\n+                      name: 'String',\n+                      kind: 'SCALAR'\n+                    }\n+                  },\n+                  {\n+                    name: 'location',\n+                    type: {\n+                      name: 'Test',\n+                      kind: 'OBJECT'\n+                    }\n+                  }\n+                ]\n+              },\n+              {\n+                name: 'Test',\n+                kind: 'OBJECT',\n+                fields: [\n+                  {\n+                    name: 'city',\n+                    type: {\n+                      name: 'String',\n+                      kind: 'SCALAR'\n+                    }\n+                  },\n+                  {\n+                    name: 'country',\n+                    type: {\n+                      name: 'String',\n+                      kind: 'SCALAR'\n+                    }\n+                  }\n+                ]\n+              }\n+            ]\n+          }\n+        },\n+        loading: false\n+      },\n+      setDisplayTable: jest.fn(),\n+      parameters: [{ flight: ['arrival'] }, { flight: ['departure'] }],\n+      setParameters: jest.fn(),\n+      selected: [],\n+      setSelected: jest.fn(),\n+      data: [\n+        {\n+          name: 'id',\n+          type: {\n+            fields: null,\n+            kind: 'SCALAR',\n+            name: 'String',\n+            __typename: '__Type'\n+          }\n+        },\n+        {\n+          name: 'flight',\n+          type: {\n+            name: 'Flight',\n+            fields: [\n+              {\n+                name: 'arrival',\n+                type: {\n+                  name: 'String',\n+                  kind: 'SCALAR'\n+                }\n+              },\n+              {\n+                name: 'departure',\n+                type: {\n+                  name: 'String',\n+                  kind: 'SCALAR'\n+                }\n+              }\n+            ],\n+            kind: 'OBJECT'\n+          }\n+        },\n+        {\n+          name: 'hotel',\n+          type: {\n+            name: 'Hotel',\n+            fields: [\n+              {\n+                name: 'address',\n+                type: {\n+                  name: 'Address',\n+                  kind: 'OBJECT'\n+                }\n+              },\n+              {\n+                name: 'bookingNumber',\n+                type: {\n+                  name: 'String',\n+                  kind: 'SCALAR'\n+                }\n+              }\n+            ],\n+            kind: 'OBJECT'\n+          }\n+        }\n+      ],\n+      getPicker: {\n+        data: {},\n+        loading: false\n+      },\n+      setError: jest.fn(),\n+      setDisplayEmptyState: jest.fn(),\n+      rememberedParams: [{ flight: ['arrival'] }, { flight: ['departure'] }],\n+      enableCache: false,\n+      setEnableCache: jest.fn(),\n+      pageSize: 2,\n+      offsetVal: 10,\n+      setOffsetVal: jest.fn(),\n+      setPageSize: jest.fn(),\n+      setIsLoadingMore: jest.fn(),\n+      isLoadingMore: true\n+    };\n+\n+    const wrapper = mount(<DomainExplorerColumnPicker {...props} />);\n+    wrapper.update();\n+    wrapper.setProps({});\n+    expect(wrapper).toMatchSnapshot();\n+  });\n+\n+  it('Test Apply columns button', () => {\n+    const props = {\n+      columnPickerType: 'Travels',\n+      setColumnFilters: jest.fn(),\n+      setTableLoading: jest.fn(),\n+      getQueryTypes: {\n+        data: {},\n+        loading: false\n+      },\n+      setDisplayTable: jest.fn(),\n+      parameters: [{ flight: ['arrival'] }, { flight: ['departure'] }],\n+      setParameters: jest.fn(),\n+      selected: [],\n+      setSelected: jest.fn(),\n+      data: [],\n+      getPicker: {\n+        data: {},\n+        loading: false\n+      },\n+      setError: jest.fn(),\n+      setDisplayEmptyState: jest.fn(),\n+      rememberedParams: [],\n+      enableCache: false,\n+      setEnableCache: jest.fn(),\n+      pageSize: 2,\n+      offsetVal: 10,\n+      setOffsetVal: jest.fn(),\n+      setPageSize: jest.fn(),\n+      setIsLoadingMore: jest.fn(),\n+      isLoadingMore: true\n+    };\n+\n+    const wrapper = shallow(<DomainExplorerColumnPicker {...props} />);\n+\n+    wrapper.find('#refresh-button').simulate('click');\n+    wrapper.find('#apply-columns').simulate('click');\n+  });\n+  it('Test refresh button', () => {\n+    const props = {\n+      columnPickerType: 'Travels',\n+      setColumnFilters: jest.fn(),\n+      setTableLoading: jest.fn(),\n+      getQueryTypes: {\n+        data: {},\n+        loading: false\n+      },\n+      setDisplayTable: jest.fn(),\n+      parameters: [{ flight: ['arrival'] }, { flight: ['departure'] }],\n+      setParameters: jest.fn(),\n+      selected: [\"cityhotelAddress\"],\n+      setSelected: jest.fn(),\n+      data: [],\n+      getPicker: {\n+        data: {},\n+        loading: false\n+      },\n+      setError: jest.fn(),\n+      setDisplayEmptyState: jest.fn(),\n+      rememberedParams: [],\n+      enableCache: false,\n+      setEnableCache: jest.fn(),\n+      pageSize: 2,\n+      offsetVal: 10,\n+      setOffsetVal: jest.fn(),\n+      setPageSize: jest.fn(),\n+      setIsLoadingMore: jest.fn(),\n+      isLoadingMore: true\n+    };\n+    const obj = { \n+        target: { id: 'cityhotelAddress' }, \n+        nativeEvent: {\n+            target : { \n+              nextSibling: {\n+                innerText: ''\n+              },\n+              parentElement: {\n+                parentElement : {\n+                  getAttribute: jest.fn(()=> 'cityhotelAddress')\n+                }\n+              }\n+            }\n+          }\n+        }\n+    const wrapper = shallow(<DomainExplorerColumnPicker {...props} />);\n+    wrapper.find('#refresh-button').simulate('click');\n+    wrapper.find('#apply-columns').simulate('click');\n+    wrapper\n+      .find('#columnPicker-dropdown')\n+      .simulate('select', obj );\n+// tslint:disable-next-line\n+    wrapper.find('#columnPicker-dropdown').props()['onToggle']()\n+  });\n+  it('check invalid column picker', () => {\n+    const props = {\n+      columnPickerType: ' ',\n+      setColumnFilters: jest.fn(),\n+      setTableLoading: jest.fn(),\n+      getQueryTypes: {\n+        data: {},\n+        loading: false\n+      },\n+      setDisplayTable: jest.fn(),\n+      parameters: [],\n+      setParameters: jest.fn(),\n+      selected: [],\n+      setSelected: jest.fn(),\n+      data: [],\n+      getPicker: {\n+        data: {},\n+        loading: false\n+      },\n+      setError: jest.fn(),\n+      setDisplayEmptyState: jest.fn(),\n+      rememberedParams: [],\n+      enableCache: false,\n+      setEnableCache: jest.fn(),\n+      pageSize: 2,\n+      offsetVal: 10,\n+      setOffsetVal: jest.fn(),\n+      setPageSize: jest.fn(),\n+      setIsLoadingMore: jest.fn(),\n+      isLoadingMore: true\n+    };\n+    const obj = { \n+      target: { id: 'id' }, \n+      nativeEvent: {\n+          target : { \n+            nextSibling: {\n+              innerText: ''\n+            },\n+            parentElement: {\n+              parentElement : {\n+                getAttribute: jest.fn(()=> 'id')\n+              }\n+            }\n+          }\n+        }\n+      }\n+    const wrapper = shallow(<DomainExplorerColumnPicker {...props} />);\n+    wrapper.update();\n+\n+    wrapper\n+    .find('#columnPicker-dropdown')\n+    .simulate('select', obj );\n+    expect(wrapper).toMatchSnapshot();\n+  });\n+  it('check condition remembered params equal to zero', () => {\n+    const props = {\n+      columnPickerType: ' ',\n+      setColumnFilters: jest.fn(),\n+      setTableLoading: jest.fn(),\n+      getQueryTypes: {\n+        data: {},\n+        loading: false\n+      },\n+      setDisplayTable: jest.fn(),\n+      parameters: [{ flight: ['arrival'] }, { flight: ['departure'] }],\n+      setParameters: jest.fn(),\n+      selected: [],\n+      setSelected: jest.fn(),\n+      data: [],\n+      getPicker: {\n+        data: {},\n+        loading: false\n+      },\n+      setError: jest.fn(),\n+      setDisplayEmptyState: jest.fn(),\n+      rememberedParams: [],\n+      enableCache: false,\n+      setEnableCache: jest.fn(),\n+      pageSize: 2,\n+      offsetVal: 10,\n+      setOffsetVal: jest.fn(),\n+      setPageSize: jest.fn(),\n+      setIsLoadingMore: jest.fn(),\n+      isLoadingMore: true\n+    };\n+    // const paramFields = []", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIzNzkxNw=="}, "originalCommit": {"oid": "e6e2ef6d26953da966217c128c1eb3c62bf42b08"}, "originalPosition": 333}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NzA2Mjk4OnYy", "diffSide": "RIGHT", "path": "packages/management-console/src/components/Templates/DomainExplorerDashboard/DomainExplorerDashboard.tsx", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxODo1NDo0MVrOGYZnFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNToyMjoyMVrOGZ0-zg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIzODYxNA==", "bodyText": "@Sara4994  I'm just curious, this remove that ServerErrors component from coverage?", "url": "https://github.com/kiegroup/kogito-apps/pull/221#discussion_r428238614", "createdAt": "2020-05-20T18:54:41Z", "author": {"login": "nmirasch"}, "path": "packages/management-console/src/components/Templates/DomainExplorerDashboard/DomainExplorerDashboard.tsx", "diffHunk": "@@ -190,6 +190,7 @@ const DomainExplorerDashboard = props => {\n     return <ServerErrors error={getQuery.error} />;\n   }\n \n+  /* istanbul ignore if */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e6e2ef6d26953da966217c128c1eb3c62bf42b08"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcyMTY2OQ==", "bodyText": "looks like it ignores the if below, not sure that something we want to skip intentionally?", "url": "https://github.com/kiegroup/kogito-apps/pull/221#discussion_r429721669", "createdAt": "2020-05-25T03:55:42Z", "author": {"login": "cristianonicolai"}, "path": "packages/management-console/src/components/Templates/DomainExplorerDashboard/DomainExplorerDashboard.tsx", "diffHunk": "@@ -190,6 +190,7 @@ const DomainExplorerDashboard = props => {\n     return <ServerErrors error={getQuery.error} />;\n   }\n \n+  /* istanbul ignore if */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIzODYxNA=="}, "originalCommit": {"oid": "e6e2ef6d26953da966217c128c1eb3c62bf42b08"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTczNTYzMA==", "bodyText": "@nmirasch @cristianonicolai this one added by mistake, which is removed now and that block of code is covered in tests already", "url": "https://github.com/kiegroup/kogito-apps/pull/221#discussion_r429735630", "createdAt": "2020-05-25T05:22:21Z", "author": {"login": "Sara4994"}, "path": "packages/management-console/src/components/Templates/DomainExplorerDashboard/DomainExplorerDashboard.tsx", "diffHunk": "@@ -190,6 +190,7 @@ const DomainExplorerDashboard = props => {\n     return <ServerErrors error={getQuery.error} />;\n   }\n \n+  /* istanbul ignore if */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODIzODYxNA=="}, "originalCommit": {"oid": "e6e2ef6d26953da966217c128c1eb3c62bf42b08"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjYxNzE4OnYy", "diffSide": "RIGHT", "path": "packages/management-console/src/components/Organisms/DomainExplorerColumnPicker/DomainExplorerColumnPicker.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTowMzozNVrOGZQAug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzo0NzozMlrOGZXtoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyOTkxNA==", "bodyText": "@Sara4994 remove commented code?", "url": "https://github.com/kiegroup/kogito-apps/pull/221#discussion_r429129914", "createdAt": "2020-05-22T09:03:35Z", "author": {"login": "nmirasch"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerColumnPicker/DomainExplorerColumnPicker.tsx", "diffHunk": "@@ -221,17 +223,18 @@ const DomainExplorerColumnPicker: React.FC<IOwnProps> = ({\n           }\n         }\n       });\n-\n+      console.log(offsetVal, pageSize)\n       try {\n-        await client\n+        const response = await client\n           .query({\n             query: gql`\n               ${Query.query}\n             `,\n             variables: Query.variables,\n             fetchPolicy: enableCache ? 'cache-first' : 'network-only'\n           })\n-          .then(response => {\n+          \n+          // .then(response => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d36cd028d881dd92255f4bfa2c7fc086811d29b6"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI1NjA5Nw==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/221#discussion_r429256097", "createdAt": "2020-05-22T13:47:32Z", "author": {"login": "Sara4994"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerColumnPicker/DomainExplorerColumnPicker.tsx", "diffHunk": "@@ -221,17 +223,18 @@ const DomainExplorerColumnPicker: React.FC<IOwnProps> = ({\n           }\n         }\n       });\n-\n+      console.log(offsetVal, pageSize)\n       try {\n-        await client\n+        const response = await client\n           .query({\n             query: gql`\n               ${Query.query}\n             `,\n             variables: Query.variables,\n             fetchPolicy: enableCache ? 'cache-first' : 'network-only'\n           })\n-          .then(response => {\n+          \n+          // .then(response => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEyOTkxNA=="}, "originalCommit": {"oid": "d36cd028d881dd92255f4bfa2c7fc086811d29b6"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjYxNzkxOnYy", "diffSide": "RIGHT", "path": "packages/management-console/src/components/Organisms/DomainExplorerColumnPicker/DomainExplorerColumnPicker.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTowMzo1MVrOGZQBMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzo0NzoyNVrOGZXtXA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEzMDAzMg==", "bodyText": "@Sara4994 same here :)", "url": "https://github.com/kiegroup/kogito-apps/pull/221#discussion_r429130032", "createdAt": "2020-05-22T09:03:51Z", "author": {"login": "nmirasch"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerColumnPicker/DomainExplorerColumnPicker.tsx", "diffHunk": "@@ -252,7 +255,7 @@ const DomainExplorerColumnPicker: React.FC<IOwnProps> = ({\n               setDisplayEmptyState(true);\n               setEnableCache(false);\n             }\n-          });\n+          // });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d36cd028d881dd92255f4bfa2c7fc086811d29b6"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI1NjAyOA==", "bodyText": "@nmirasch done", "url": "https://github.com/kiegroup/kogito-apps/pull/221#discussion_r429256028", "createdAt": "2020-05-22T13:47:25Z", "author": {"login": "Sara4994"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerColumnPicker/DomainExplorerColumnPicker.tsx", "diffHunk": "@@ -252,7 +255,7 @@ const DomainExplorerColumnPicker: React.FC<IOwnProps> = ({\n               setDisplayEmptyState(true);\n               setEnableCache(false);\n             }\n-          });\n+          // });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEzMDAzMg=="}, "originalCommit": {"oid": "d36cd028d881dd92255f4bfa2c7fc086811d29b6"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3MjYyNDU5OnYy", "diffSide": "RIGHT", "path": "packages/management-console/src/components/Organisms/DomainExplorerColumnPicker/DomainExplorerColumnPicker.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQwOTowNjowOFrOGZQFSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMzo0NzoxNlrOGZXs-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEzMTA4MQ==", "bodyText": "@Sara4994 is needed keep this log as part of testing?", "url": "https://github.com/kiegroup/kogito-apps/pull/221#discussion_r429131081", "createdAt": "2020-05-22T09:06:08Z", "author": {"login": "nmirasch"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerColumnPicker/DomainExplorerColumnPicker.tsx", "diffHunk": "@@ -221,17 +223,18 @@ const DomainExplorerColumnPicker: React.FC<IOwnProps> = ({\n           }\n         }\n       });\n-\n+      console.log(offsetVal, pageSize)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d36cd028d881dd92255f4bfa2c7fc086811d29b6"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTI1NTkzMQ==", "bodyText": "no, its not required. removed it now \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-apps/pull/221#discussion_r429255931", "createdAt": "2020-05-22T13:47:16Z", "author": {"login": "Sara4994"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerColumnPicker/DomainExplorerColumnPicker.tsx", "diffHunk": "@@ -221,17 +223,18 @@ const DomainExplorerColumnPicker: React.FC<IOwnProps> = ({\n           }\n         }\n       });\n-\n+      console.log(offsetVal, pageSize)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTEzMTA4MQ=="}, "originalCommit": {"oid": "d36cd028d881dd92255f4bfa2c7fc086811d29b6"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjU0Mzk4OnYy", "diffSide": "RIGHT", "path": "packages/management-console/package.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMzo1MzowNVrOGZ0Gyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNToyMzoxNlrOGZ0_iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcyMTI5MA==", "bodyText": "dupliucated?", "url": "https://github.com/kiegroup/kogito-apps/pull/221#discussion_r429721290", "createdAt": "2020-05-25T03:53:05Z", "author": {"login": "cristianonicolai"}, "path": "packages/management-console/package.json", "diffHunk": "@@ -36,6 +36,7 @@\n   },\n   \"dependencies\": {\n     \"@kogito-apps/common\": \"1.0.0\",\n+    \"@testing-library/react-hooks\": \"^3.2.1\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "644de98d4b6d8a43bd94bbe925b44361ba590370"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTczNTgxOQ==", "bodyText": "@cristianonicolai actually we dont need that dependencies, removed it", "url": "https://github.com/kiegroup/kogito-apps/pull/221#discussion_r429735819", "createdAt": "2020-05-25T05:23:16Z", "author": {"login": "Sara4994"}, "path": "packages/management-console/package.json", "diffHunk": "@@ -36,6 +36,7 @@\n   },\n   \"dependencies\": {\n     \"@kogito-apps/common\": \"1.0.0\",\n+    \"@testing-library/react-hooks\": \"^3.2.1\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcyMTI5MA=="}, "originalCommit": {"oid": "644de98d4b6d8a43bd94bbe925b44361ba590370"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjU0NDU0OnYy", "diffSide": "RIGHT", "path": "packages/management-console/package.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMzo1Mzo0MVrOGZ0HKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNToyMzozNlrOGZ0_2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcyMTM4Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                \"@testing-library/react-hooks\": \"^3.2.1\",\n          \n          \n            \n                \"@testing-library/react-hooks\": \"3.2.1\",", "url": "https://github.com/kiegroup/kogito-apps/pull/221#discussion_r429721387", "createdAt": "2020-05-25T03:53:41Z", "author": {"login": "cristianonicolai"}, "path": "packages/management-console/package.json", "diffHunk": "@@ -76,5 +78,9 @@\n       \"yarn run format\",\n       \"yarn run lint\"\n     ]\n+  },\n+  \"devDependencies\": {\n+    \"@testing-library/react-hooks\": \"^3.2.1\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "644de98d4b6d8a43bd94bbe925b44361ba590370"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTczNTg5OQ==", "bodyText": "Removed the dependency itself", "url": "https://github.com/kiegroup/kogito-apps/pull/221#discussion_r429735899", "createdAt": "2020-05-25T05:23:36Z", "author": {"login": "Sara4994"}, "path": "packages/management-console/package.json", "diffHunk": "@@ -76,5 +78,9 @@\n       \"yarn run format\",\n       \"yarn run lint\"\n     ]\n+  },\n+  \"devDependencies\": {\n+    \"@testing-library/react-hooks\": \"^3.2.1\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcyMTM4Nw=="}, "originalCommit": {"oid": "644de98d4b6d8a43bd94bbe925b44361ba590370"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjU0NDcxOnYy", "diffSide": "RIGHT", "path": "packages/management-console/package.json", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMzo1Mzo1MFrOGZ0HQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwNToyNDoxNVrOGZ1ATg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcyMTQxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                \"core-js\": \"^3.6.5\"\n          \n          \n            \n                \"core-js\": \"3.6.5\"", "url": "https://github.com/kiegroup/kogito-apps/pull/221#discussion_r429721411", "createdAt": "2020-05-25T03:53:50Z", "author": {"login": "cristianonicolai"}, "path": "packages/management-console/package.json", "diffHunk": "@@ -76,5 +78,9 @@\n       \"yarn run format\",\n       \"yarn run lint\"\n     ]\n+  },\n+  \"devDependencies\": {\n+    \"@testing-library/react-hooks\": \"^3.2.1\",\n+    \"core-js\": \"^3.6.5\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "644de98d4b6d8a43bd94bbe925b44361ba590370"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTczNjAxNA==", "bodyText": "@cristianonicolai caret removed", "url": "https://github.com/kiegroup/kogito-apps/pull/221#discussion_r429736014", "createdAt": "2020-05-25T05:24:15Z", "author": {"login": "Sara4994"}, "path": "packages/management-console/package.json", "diffHunk": "@@ -76,5 +78,9 @@\n       \"yarn run format\",\n       \"yarn run lint\"\n     ]\n+  },\n+  \"devDependencies\": {\n+    \"@testing-library/react-hooks\": \"^3.2.1\",\n+    \"core-js\": \"^3.6.5\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcyMTQxMQ=="}, "originalCommit": {"oid": "644de98d4b6d8a43bd94bbe925b44361ba590370"}, "originalPosition": 25}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 930, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}