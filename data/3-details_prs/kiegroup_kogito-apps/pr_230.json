{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIxMzc2MDI2", "number": 230, "title": "Kogito 2247 - Trusty service executions endpoint resource", "bodyText": "Link to jira: https://issues.redhat.com/browse/KOGITO-2247\nThe aim of this PR is to implement the execution resource endpoint that exposes the list of execution headers. It's possible to query the endpoint by time range (and optionally by prefix on the executionId) and it's possible to set some pagination parameters.\nThe endpoint is then unit tested.\nIn case the datetime and/or the pagination parameters are not valid, then a 400 BAD_REQUEST is returned.\nThe contract looks like the following:", "createdAt": "2020-05-21T14:15:24Z", "url": "https://github.com/kiegroup/kogito-apps/pull/230", "merged": true, "mergeCommit": {"oid": "efe03a603a610b0957ae955a873dbfa532405c40"}, "closed": true, "closedAt": "2020-05-27T15:12:02Z", "author": {"login": "r00ta"}, "timelineItems": {"totalCount": 28, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcjIQ_lAH2gAyNDIxMzc2MDI2OjExNWJmMjhjMGYzNjZmZjgyZWU5MWFiZTQ5YTZjZGQzNDY4YjVhMTg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABclYQgjAFqTQxOTEzMjQzOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "115bf28c0f366ff82ee91abe49a6cdd3468b5a18", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/115bf28c0f366ff82ee91abe49a6cdd3468b5a18", "committedDate": "2020-05-20T12:31:14Z", "message": "add trusty project"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b6a19bed2d5f8d25d153d0433f436f6629eedb8e", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/b6a19bed2d5f8d25d153d0433f436f6629eedb8e", "committedDate": "2020-05-20T20:48:34Z", "message": "add licences and fix application.properties"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f0c1e970c0d15b787c0d2317106087ec610a480f", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/f0c1e970c0d15b787c0d2317106087ec610a480f", "committedDate": "2020-05-20T20:56:37Z", "message": "add READMEs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5c617d24d77abcce0e848f9b42f0d410021624e", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/e5c617d24d77abcce0e848f9b42f0d410021624e", "committedDate": "2020-05-21T09:07:20Z", "message": "refactoring repo structure - trusty services"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "412717790e96ea4740f2909c87c20f730c65524d", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/412717790e96ea4740f2909c87c20f730c65524d", "committedDate": "2020-05-21T13:19:48Z", "message": "add executions endpoint implementation + tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffe0c4dac65f4525f63bdf286aa158136088531a", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/ffe0c4dac65f4525f63bdf286aa158136088531a", "committedDate": "2020-05-21T14:07:37Z", "message": "update documentation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd4fdaf3a36011ece8f0e479fdd058e4af1cbb29", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/fd4fdaf3a36011ece8f0e479fdd058e4af1cbb29", "committedDate": "2020-05-22T07:49:05Z", "message": "add api versioning"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "05fcee3a1588dab9e0eeffcebb3831cdb5bbb114", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/05fcee3a1588dab9e0eeffcebb3831cdb5bbb114", "committedDate": "2020-05-22T11:33:16Z", "message": "refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fee7ba7fb487ba1e41dc2dafa55320a31f1e7f98", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/fee7ba7fb487ba1e41dc2dafa55320a31f1e7f98", "committedDate": "2020-05-22T11:35:16Z", "message": "refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c94f8076d42e6ad10d22695bdfbeebeae2cd018", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/3c94f8076d42e6ad10d22695bdfbeebeae2cd018", "committedDate": "2020-05-22T11:39:46Z", "message": "refactoring - remove unused imports + code style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f507bdfc1b5bb6d3b8c83ce4cb474b7251f9ce5d", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/f507bdfc1b5bb6d3b8c83ce4cb474b7251f9ce5d", "committedDate": "2020-05-22T15:20:42Z", "message": "update poms"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE3MDAzNzY1", "url": "https://github.com/kiegroup/kogito-apps/pull/230#pullrequestreview-417003765", "createdAt": "2020-05-22T15:34:06Z", "commit": {"oid": "f507bdfc1b5bb6d3b8c83ce4cb474b7251f9ce5d"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTozNDowNlrOGZbbUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxNTozNDoyN1rOGZbcDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxNjk0Nw==", "bodyText": "Why do you want to split \"internal\" representation of the execution and the external one?\nConsidering that this service is designed to serve these kind of data I do not expect this to be needed. I would start simple with only one version and then it is always possible to decouple it.", "url": "https://github.com/kiegroup/kogito-apps/pull/230#discussion_r429316947", "createdAt": "2020-05-22T15:34:06Z", "author": {"login": "danielezonca"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/responses/ExecutionHeaderResponse.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.responses;\n+\n+import java.util.Date;\n+\n+import com.fasterxml.jackson.annotation.JsonFormat;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import org.kie.kogito.trusty.service.models.Execution;\n+\n+/**\n+ * An execution header.\n+ */\n+public class ExecutionHeaderResponse {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f507bdfc1b5bb6d3b8c83ce4cb474b7251f9ce5d"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTMxNzEzMg==", "bodyText": "Same comment as ExecutionHeaderResponse class", "url": "https://github.com/kiegroup/kogito-apps/pull/230#discussion_r429317132", "createdAt": "2020-05-22T15:34:27Z", "author": {"login": "danielezonca"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/responses/ExecutionTypeEnumResponse.java", "diffHunk": "@@ -0,0 +1,52 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.responses;\n+\n+import org.kie.kogito.trusty.service.models.ExecutionTypeEnum;\n+\n+/**\n+ * The execution enum type.\n+ */\n+public enum ExecutionTypeEnumResponse {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f507bdfc1b5bb6d3b8c83ce4cb474b7251f9ce5d"}, "originalPosition": 24}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b104d0d5c733523f8cf89905bddb0f64c171f97f", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/b104d0d5c733523f8cf89905bddb0f64c171f97f", "committedDate": "2020-05-22T15:42:16Z", "message": "rebase master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7c92c8555d58375513ee8e1451d896ad85539e7", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/f7c92c8555d58375513ee8e1451d896ad85539e7", "committedDate": "2020-05-25T07:07:44Z", "message": "remove ExecutionTypeEnumResponse"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e11df045de9cf6753d7881b96a0ff8df35470448", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/e11df045de9cf6753d7881b96a0ff8df35470448", "committedDate": "2020-05-25T11:02:31Z", "message": "Execution executionDate transformed in executionTimestamp"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7eecce958d44f26321ce6794e21e0adf33fc5ed", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/b7eecce958d44f26321ce6794e21e0adf33fc5ed", "committedDate": "2020-05-26T06:47:58Z", "message": "switch to java8 LocalDate"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "22deb0d663fa435ab47093b2a986e67703733d2b", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/22deb0d663fa435ab47093b2a986e67703733d2b", "committedDate": "2020-05-26T06:49:17Z", "message": "refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68c9c750193651086183b69d4477cf817494d1ee", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/68c9c750193651086183b69d4477cf817494d1ee", "committedDate": "2020-05-26T07:29:00Z", "message": "use ZonedDateTime"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e94b14df90445b112c2ef1df138e53151863207b", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/e94b14df90445b112c2ef1df138e53151863207b", "committedDate": "2020-05-26T07:35:14Z", "message": "update tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4MzU1MTQw", "url": "https://github.com/kiegroup/kogito-apps/pull/230#pullrequestreview-418355140", "createdAt": "2020-05-26T14:28:09Z", "commit": {"oid": "e94b14df90445b112c2ef1df138e53151863207b"}, "state": "APPROVED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNDoyODoxMFrOGag7gg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNDozMzo0NVrOGahMRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ1NTY4Mg==", "bodyText": "Please split these long lines to make the code more readable.", "url": "https://github.com/kiegroup/kogito-apps/pull/230#discussion_r430455682", "createdAt": "2020-05-26T14:28:10Z", "author": {"login": "jiripetrlik"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/api/ExecutionsApiV1.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.api;\n+\n+import java.time.LocalDateTime;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeParseException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.eclipse.microprofile.openapi.annotations.Operation;\n+import org.eclipse.microprofile.openapi.annotations.enums.SchemaType;\n+import org.eclipse.microprofile.openapi.annotations.media.Content;\n+import org.eclipse.microprofile.openapi.annotations.media.Schema;\n+import org.eclipse.microprofile.openapi.annotations.parameters.Parameter;\n+import org.eclipse.microprofile.openapi.annotations.responses.APIResponse;\n+import org.eclipse.microprofile.openapi.annotations.responses.APIResponses;\n+import org.jboss.resteasy.annotations.jaxrs.QueryParam;\n+import org.kie.kogito.trusty.service.ITrustyService;\n+import org.kie.kogito.trusty.service.models.Execution;\n+import org.kie.kogito.trusty.service.responses.ExecutionHeaderResponse;\n+import org.kie.kogito.trusty.service.responses.ExecutionsResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The trusty api resource.\n+ */\n+@Path(\"v1/executions\")\n+public class ExecutionsApiV1 {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExecutionsApiV1.class);\n+\n+    @Inject\n+    ITrustyService executionService;\n+\n+    /**\n+     * Gets all the headers of the executions that were evaluated within a specified time range.\n+     *\n+     * @param from   The start datetime.\n+     * @param to     The end datetime.\n+     * @param limit  The maximum (non-negative) number of items to be returned.\n+     * @param offset The non-negative pagination offset.\n+     * @param prefix The executionId prefix to be matched in the search.\n+     * @return The execution headers that satisfy the time range, pagination and prefix conditions.\n+     */\n+    @GET\n+    @APIResponses(value = {\n+            @APIResponse(description = \"Returns the execution headers.\", responseCode = \"200\", content = @Content(mediaType = MediaType.APPLICATION_JSON, schema = @Schema(type = SchemaType.OBJECT, implementation = ExecutionsResponse.class))),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e94b14df90445b112c2ef1df138e53151863207b"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ1NjIxOQ==", "bodyText": "Please split.", "url": "https://github.com/kiegroup/kogito-apps/pull/230#discussion_r430456219", "createdAt": "2020-05-26T14:28:51Z", "author": {"login": "jiripetrlik"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/models/Execution.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.models;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+/**\n+ * An execution.\n+ */\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class Execution {\n+\n+    @JsonProperty(\"executionId\")\n+    private String executionId;\n+\n+    @JsonProperty(\"executionTimestamp\")\n+    private Long executionTimestamp;\n+\n+    @JsonProperty(\"hasSucceeded\")\n+    private boolean hasSucceeded;\n+\n+    @JsonProperty(\"executorName\")\n+    private String executorName;\n+\n+    @JsonProperty(\"executedModelName\")\n+    private String executedModelName;\n+\n+    @JsonProperty(\"executionType\")\n+    private ExecutionTypeEnum executionType;\n+\n+    public Execution() {\n+    }\n+\n+    public Execution(String executionId, Long executionTimestamp, boolean hasSucceeded, String executorName, String executedModelName, ExecutionTypeEnum executionType) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e94b14df90445b112c2ef1df138e53151863207b"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ1NjgzMA==", "bodyText": "Please split this line.", "url": "https://github.com/kiegroup/kogito-apps/pull/230#discussion_r430456830", "createdAt": "2020-05-26T14:29:40Z", "author": {"login": "jiripetrlik"}, "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/api/ExecutionsApiV1Test.java", "diffHunk": "@@ -0,0 +1,94 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.api;\n+\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.time.OffsetDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import io.quarkus.test.junit.QuarkusTest;\n+import io.quarkus.test.junit.mockito.InjectMock;\n+import io.restassured.http.ContentType;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.TestInstance;\n+import org.kie.kogito.trusty.service.ITrustyService;\n+import org.kie.kogito.trusty.service.models.Execution;\n+import org.kie.kogito.trusty.service.models.ExecutionTypeEnum;\n+import org.kie.kogito.trusty.service.responses.ExecutionsResponse;\n+import org.mockito.Mockito;\n+\n+import static io.restassured.RestAssured.given;\n+import static org.mockito.ArgumentMatchers.any;\n+\n+@QuarkusTest\n+@TestInstance(TestInstance.Lifecycle.PER_CLASS)\n+class ExecutionsApiV1Test {\n+\n+    @InjectMock\n+    ITrustyService executionService;\n+\n+    @Test\n+    void GivenRequestWithoutLimitAndOffsetParameters_WhenExecutionEndpointIsCalled_ThenTheDefaultValuesAreCorrect() {\n+        Mockito.when(executionService.getExecutionHeaders(any(OffsetDateTime.class), any(OffsetDateTime.class), any(Integer.class), any(Integer.class), any(String.class))).thenReturn(new ArrayList<>());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e94b14df90445b112c2ef1df138e53151863207b"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ1OTk3NQ==", "bodyText": "Wouldn't it be better to be more specific with the name of this model. Can we for example use something like trusty-ai?", "url": "https://github.com/kiegroup/kogito-apps/pull/230#discussion_r430459975", "createdAt": "2020-05-26T14:33:45Z", "author": {"login": "jiripetrlik"}, "path": "pom.xml", "diffHunk": "@@ -62,6 +62,8 @@\n     <module>jobs-service</module>\n     <module>data-index</module>\n     <module>management-console</module>\n+    <module>explainability-service</module>\n+    <module>trusty</module>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e94b14df90445b112c2ef1df138e53151863207b"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "08f7f546f2d9ee25fb7afb68952309b00569ad5f", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/08f7f546f2d9ee25fb7afb68952309b00569ad5f", "committedDate": "2020-05-27T07:23:36Z", "message": "split long lines"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4OTMxMzE5", "url": "https://github.com/kiegroup/kogito-apps/pull/230#pullrequestreview-418931319", "createdAt": "2020-05-27T07:38:49Z", "commit": {"oid": "08f7f546f2d9ee25fb7afb68952309b00569ad5f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzozODo0OVrOGa9DMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QwNzozODo0OVrOGa9DMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDkxNjQwMA==", "bodyText": "I just noticed that there are two mandatory query parameters. In general I don't like GET methods that fails with no parameters.\nIs it possible to default to from yesterday to now?", "url": "https://github.com/kiegroup/kogito-apps/pull/230#discussion_r430916400", "createdAt": "2020-05-27T07:38:49Z", "author": {"login": "danielezonca"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/api/ExecutionsApiV1.java", "diffHunk": "@@ -0,0 +1,138 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.api;\n+\n+import java.time.LocalDateTime;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeParseException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.eclipse.microprofile.openapi.annotations.Operation;\n+import org.eclipse.microprofile.openapi.annotations.enums.SchemaType;\n+import org.eclipse.microprofile.openapi.annotations.media.Content;\n+import org.eclipse.microprofile.openapi.annotations.media.Schema;\n+import org.eclipse.microprofile.openapi.annotations.parameters.Parameter;\n+import org.eclipse.microprofile.openapi.annotations.responses.APIResponse;\n+import org.eclipse.microprofile.openapi.annotations.responses.APIResponses;\n+import org.jboss.resteasy.annotations.jaxrs.QueryParam;\n+import org.kie.kogito.trusty.service.ITrustyService;\n+import org.kie.kogito.trusty.service.models.Execution;\n+import org.kie.kogito.trusty.service.responses.ExecutionHeaderResponse;\n+import org.kie.kogito.trusty.service.responses.ExecutionsResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The trusty api resource.\n+ */\n+@Path(\"v1/executions\")\n+public class ExecutionsApiV1 {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExecutionsApiV1.class);\n+\n+    @Inject\n+    ITrustyService executionService;\n+\n+    /**\n+     * Gets all the headers of the executions that were evaluated within a specified time range.\n+     *\n+     * @param from   The start datetime.\n+     * @param to     The end datetime.\n+     * @param limit  The maximum (non-negative) number of items to be returned.\n+     * @param offset The non-negative pagination offset.\n+     * @param prefix The executionId prefix to be matched in the search.\n+     * @return The execution headers that satisfy the time range, pagination and prefix conditions.\n+     */\n+    @GET\n+    @APIResponses(value = {\n+            @APIResponse(description = \"Returns the execution headers.\",\n+                    responseCode = \"200\",\n+                    content = @Content(mediaType = MediaType.APPLICATION_JSON,\n+                    schema = @Schema(type = SchemaType.OBJECT, implementation = ExecutionsResponse.class))),\n+            @APIResponse(description = \"Bad Request\", responseCode = \"400\", content = @Content(mediaType = MediaType.TEXT_PLAIN))\n+    }\n+    )\n+    @Operation(summary = \"Gets the execution headers\", description = \"Gets the execution headers.\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Response getExecutions(\n+            @Parameter(\n+                    name = \"from\",\n+                    description = \"Start datetime for the lookup. Date in the format \\\"yyyy-MM-dd'T'HH:mm:ssZ\\\"\",\n+                    required = true,\n+                    schema = @Schema(implementation = String.class)\n+            ) @QueryParam(\"from\") String from,\n+            @Parameter(\n+                    name = \"to\",\n+                    description = \"End datetime for the lookup. Date in the format \\\"yyyy-MM-dd'T'HH:mm:ssZ\\\"\",\n+                    required = true,\n+                    schema = @Schema(implementation = String.class)\n+            ) @QueryParam(\"to\") String to,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "08f7f546f2d9ee25fb7afb68952309b00569ad5f"}, "originalPosition": 95}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "95737df20221191d6a5a7b9d91ecb3a027727dcc", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/95737df20221191d6a5a7b9d91ecb3a027727dcc", "committedDate": "2020-05-27T08:19:15Z", "message": "default parameters for time range query"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0fb9312b16394cdc8c6711431bc6df2396983521", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/0fb9312b16394cdc8c6711431bc6df2396983521", "committedDate": "2020-05-27T10:19:32Z", "message": "remove experimental flag"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MTA2MDQz", "url": "https://github.com/kiegroup/kogito-apps/pull/230#pullrequestreview-419106043", "createdAt": "2020-05-27T11:38:16Z", "commit": {"oid": "0fb9312b16394cdc8c6711431bc6df2396983521"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMTozODoxNlrOGbFSmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yN1QxMTozODoxNlrOGbFSmg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTA1MTQxOA==", "bodyText": "Can you please create a single parteDate method that takes a String and returns a OffsetDateTime?", "url": "https://github.com/kiegroup/kogito-apps/pull/230#discussion_r431051418", "createdAt": "2020-05-27T11:38:16Z", "author": {"login": "danielezonca"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/api/ExecutionsApiV1.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.api;\n+\n+import java.time.LocalDateTime;\n+import java.time.OffsetDateTime;\n+import java.time.ZoneOffset;\n+import java.time.ZonedDateTime;\n+import java.time.format.DateTimeFormatter;\n+import java.time.format.DateTimeParseException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.DefaultValue;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.eclipse.microprofile.openapi.annotations.Operation;\n+import org.eclipse.microprofile.openapi.annotations.enums.SchemaType;\n+import org.eclipse.microprofile.openapi.annotations.media.Content;\n+import org.eclipse.microprofile.openapi.annotations.media.Schema;\n+import org.eclipse.microprofile.openapi.annotations.parameters.Parameter;\n+import org.eclipse.microprofile.openapi.annotations.responses.APIResponse;\n+import org.eclipse.microprofile.openapi.annotations.responses.APIResponses;\n+import org.jboss.resteasy.annotations.jaxrs.QueryParam;\n+import org.kie.kogito.trusty.service.ITrustyService;\n+import org.kie.kogito.trusty.service.models.Execution;\n+import org.kie.kogito.trusty.service.responses.ExecutionHeaderResponse;\n+import org.kie.kogito.trusty.service.responses.ExecutionsResponse;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * The trusty api resource.\n+ */\n+@Path(\"v1/executions\")\n+public class ExecutionsApiV1 {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExecutionsApiV1.class);\n+\n+    @Inject\n+    ITrustyService executionService;\n+\n+    /**\n+     * Gets all the headers of the executions that were evaluated within a specified time range.\n+     *\n+     * @param from   The start datetime.\n+     * @param to     The end datetime.\n+     * @param limit  The maximum (non-negative) number of items to be returned.\n+     * @param offset The non-negative pagination offset.\n+     * @param prefix The executionId prefix to be matched in the search.\n+     * @return The execution headers that satisfy the time range, pagination and prefix conditions.\n+     */\n+    @GET\n+    @APIResponses(value = {\n+            @APIResponse(description = \"Returns the execution headers.\",\n+                    responseCode = \"200\",\n+                    content = @Content(mediaType = MediaType.APPLICATION_JSON,\n+                    schema = @Schema(type = SchemaType.OBJECT, implementation = ExecutionsResponse.class))),\n+            @APIResponse(description = \"Bad Request\", responseCode = \"400\", content = @Content(mediaType = MediaType.TEXT_PLAIN))\n+    }\n+    )\n+    @Operation(summary = \"Gets the execution headers\", description = \"Gets the execution headers.\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Response getExecutions(\n+            @Parameter(\n+                    name = \"from\",\n+                    description = \"Start datetime for the lookup. Date in the format \\\"yyyy-MM-dd'T'HH:mm:ssZ\\\"\",\n+                    required = false,\n+                    schema = @Schema(implementation = String.class)\n+            ) @DefaultValue(\"yesterday\") @QueryParam(\"from\") String from,\n+            @Parameter(\n+                    name = \"to\",\n+                    description = \"End datetime for the lookup. Date in the format \\\"yyyy-MM-dd'T'HH:mm:ssZ\\\"\",\n+                    required = false,\n+                    schema = @Schema(implementation = String.class)\n+            ) @DefaultValue(\"now\") @QueryParam(\"to\") String to,\n+            @Parameter(\n+                    name = \"limit\",\n+                    description = \"Maximum number of results to return.\",\n+                    required = false,\n+                    schema = @Schema(implementation = Integer.class)\n+            ) @DefaultValue(\"100\") @QueryParam(\"limit\") int limit,\n+            @Parameter(\n+                    name = \"offset\",\n+                    description = \"Offset for the pagination.\",\n+                    required = false,\n+                    schema = @Schema(implementation = Integer.class)\n+            ) @DefaultValue(\"0\") @QueryParam(\"offset\") int offset,\n+            @Parameter(\n+                    name = \"search\",\n+                    description = \"Execution ID prefix to be matched\",\n+                    required = false,\n+                    schema = @Schema(implementation = String.class)\n+            ) @DefaultValue(\"\") @QueryParam(\"search\") String prefix) {\n+\n+        if (limit < 0 || offset < 0) {\n+            return Response.status(Response.Status.BAD_REQUEST.getStatusCode(), \"Pagination parameters can not have negative values.\").build();\n+        }\n+\n+        OffsetDateTime fromDate;\n+        OffsetDateTime toDate;\n+        try {\n+            fromDate = from.equals(\"yesterday\") ? OffsetDateTime.now(ZoneOffset.UTC).minusDays(1) :  ZonedDateTime.parse(from, DateTimeFormatter.ISO_OFFSET_DATE_TIME).toOffsetDateTime();\n+            toDate = to.equals(\"now\") ? OffsetDateTime.now(ZoneOffset.UTC) : ZonedDateTime.parse(to, DateTimeFormatter.ISO_OFFSET_DATE_TIME).toOffsetDateTime();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0fb9312b16394cdc8c6711431bc6df2396983521"}, "originalPosition": 123}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "815a909d0623fcd6f87198a8baae34af68cf6dcf", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/815a909d0623fcd6f87198a8baae34af68cf6dcf", "committedDate": "2020-05-27T11:59:06Z", "message": "extract method to parse date"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0146a9f0c49fa07fd6af469667bc8e392ac41ccf", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/0146a9f0c49fa07fd6af469667bc8e392ac41ccf", "committedDate": "2020-05-27T12:00:22Z", "message": "fix code smells"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE5MTMyNDM5", "url": "https://github.com/kiegroup/kogito-apps/pull/230#pullrequestreview-419132439", "createdAt": "2020-05-27T12:17:02Z", "commit": {"oid": "0146a9f0c49fa07fd6af469667bc8e392ac41ccf"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 47, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}