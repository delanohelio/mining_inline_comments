{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMxOTM1NDY5", "number": 562, "title": "PLANNER-2210: Data Index queries API", "bodyText": "Many thanks for submitting your Pull Request \u2764\ufe0f!\nPlease make sure that your PR meets the following requirements:\n\n You have read the contributors guide\n Pull Request title is properly formatted: KOGITO-XYZ Subject\n Pull Request title contains the target branch if not targeting master: [0.9.x] KOGITO-XYZ Subject\n Pull Request contains link to the JIRA issue\n Pull Request contains link to any dependent or related Pull Request\n Pull Request contains description of the issue\n Pull Request does not include fixes for issues other than the main ticket", "createdAt": "2020-12-03T17:03:53Z", "url": "https://github.com/kiegroup/kogito-apps/pull/562", "merged": true, "mergeCommit": {"oid": "d1975c60f2555f01694dd7abd2af3253cc18ea8a"}, "closed": true, "closedAt": "2020-12-11T09:19:49Z", "author": {"login": "wmedvede"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdioQtjgBqjQwNjkyNzcxNzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdk1TtGAFqTU0OTMzMTU2MA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "da16bd4792dc3193a9fd4f95aa15b96dd4e04d33", "author": {"user": {"login": "wmedvede", "name": "Walter Medvedeo"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/da16bd4792dc3193a9fd4f95aa15b96dd4e04d33", "committedDate": "2020-12-03T16:53:36Z", "message": "PLANNER-2210: Data Index queries API"}, "afterCommit": {"oid": "79c1ebb3fbdf097faaa6277307ae3551a75efdf9", "author": {"user": {"login": "wmedvede", "name": "Walter Medvedeo"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/79c1ebb3fbdf097faaa6277307ae3551a75efdf9", "committedDate": "2020-12-03T19:23:13Z", "message": "PLANNER-2210: Data Index queries API"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ3MDkyNjU2", "url": "https://github.com/kiegroup/kogito-apps/pull/562#pullrequestreview-547092656", "createdAt": "2020-12-08T10:58:39Z", "commit": {"oid": "79c1ebb3fbdf097faaa6277307ae3551a75efdf9"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxMDo1ODozOVrOIBTt3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wOFQxNToxNToxNVrOIBieew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI0MjUyNQ==", "bodyText": "(applies to the entire Argument hierarchy): is there a reason why we use a programmatic serialization to JSON instead of a declarative one (via annotations)?", "url": "https://github.com/kiegroup/kogito-apps/pull/562#discussion_r538242525", "createdAt": "2020-12-08T10:58:39Z", "author": {"login": "rsynek"}, "path": "task-assigning/task-assigning-process-service-client/src/main/java/org/kie/kogito/taskassigning/index/service/client/graphql/ArgumentContainer.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.taskassigning.index.service.client.graphql;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+\n+import static org.kie.kogito.taskassigning.index.service.client.graphql.util.JsonUtils.OBJECT_MAPPER;\n+\n+public abstract class ArgumentContainer implements Argument {\n+\n+    public static class ArgumentEntry {\n+\n+        private String name;\n+        private Argument value;\n+\n+        public ArgumentEntry(String name, Argument value) {\n+            this.name = name;\n+            this.value = value;\n+        }\n+\n+        public String getName() {\n+            return name;\n+        }\n+\n+        public Argument getValue() {\n+            return value;\n+        }\n+    }\n+\n+    protected List<ArgumentEntry> arguments = new ArrayList<>();\n+\n+    public void add(String name, Argument argument) {\n+        arguments.add(new ArgumentEntry(name, argument));\n+    }\n+\n+    public List<ArgumentEntry> getArguments() {\n+        return arguments;\n+    }\n+\n+    public boolean isEmpty() {\n+        return arguments == null || arguments.isEmpty();\n+    }\n+\n+    @Override\n+    public JsonNode asJson() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79c1ebb3fbdf097faaa6277307ae3551a75efdf9"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODI3OTY0Nw==", "bodyText": "Let's not print stacktraces to output; they will just bloat the console log. If there is a problem in test setup, we should fail fast with an exception and not wait for tests that rely on certain preconditions to fail.", "url": "https://github.com/kiegroup/kogito-apps/pull/562#discussion_r538279647", "createdAt": "2020-12-08T11:51:41Z", "author": {"login": "rsynek"}, "path": "task-assigning/task-assigning-process-service-client/src/test/java/org/kie/kogito/taskassigning/index/service/client/graphql/WireMockGraphQLResource.java", "diffHunk": "@@ -0,0 +1,199 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.taskassigning.index.service.client.graphql;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.github.tomakehurst.wiremock.WireMockServer;\n+import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n+\n+import static com.github.tomakehurst.wiremock.client.WireMock.aResponse;\n+import static com.github.tomakehurst.wiremock.client.WireMock.configureFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.equalToJson;\n+import static com.github.tomakehurst.wiremock.client.WireMock.post;\n+import static com.github.tomakehurst.wiremock.client.WireMock.stubFor;\n+import static com.github.tomakehurst.wiremock.client.WireMock.urlEqualTo;\n+import static com.github.tomakehurst.wiremock.core.WireMockConfiguration.options;\n+import static javax.ws.rs.core.HttpHeaders.CONTENT_TYPE;\n+import static javax.ws.rs.core.MediaType.APPLICATION_JSON;\n+import static org.kie.kogito.taskassigning.index.service.client.graphql.util.JsonUtils.OBJECT_MAPPER;\n+\n+public class WireMockGraphQLResource implements QuarkusTestResourceLifecycleManager {\n+\n+    public static final String GRAPHQL_SERVICE_URL = \"graphql.service.url\";\n+\n+    public static final String USER_TASKS_QUERY_MOCK = \"{\\\"query\\\": \\\"USER_TASKS_QUERY_MOCK\\\"}\";\n+\n+    public static final UserTaskInstanceMock[] USER_TASKS_QUERY_MOCK_RESULT = new UserTaskInstanceMock[]{\n+            new UserTaskInstanceMock(\"1\", \"task1\", \"2020-12-01T07:54:56.883Z\", new String[]{\"Group1\"}, \"{\\\"inputVariable1\\\":\\\"value1\\\"}\"),\n+            new UserTaskInstanceMock(\"2\", \"task2\", \"2020-12-02T07:54:56.883Z\", new String[]{\"Group2\"}, \"{\\\"inputVariable2\\\":\\\"value2\\\"}\"),\n+            new UserTaskInstanceMock(\"3\", \"task3\", \"2020-12-03T07:54:56.883Z\", new String[]{\"Group3\"}, \"{\\\"inputVariable3\\\":\\\"value3\\\"}\")};\n+\n+    public static final String USER_TASKS_QUERY_FAILURE_MOCK = \"{\\\"query\\\": \\\"USER_TASKS_QUERY_FAILURE_MOCK\\\"}\";\n+\n+    public static final QueryError[] USER_TASKS_QUERY_FAILURE_MOCK_RESULT = new QueryError[]{\n+            new QueryError(\"Error1\"),\n+            new QueryError(\"Error2\")};\n+\n+    private WireMockServer wireMockServer;\n+\n+    @Override\n+    public Map<String, String> start() {\n+        wireMockServer = new WireMockServer(options().dynamicPort());\n+        wireMockServer.start();\n+        configureFor(wireMockServer.port());\n+\n+        try {\n+            stubFor(post(urlEqualTo(\"/graphql/\"))\n+                            .withRequestBody(equalToJson(USER_TASKS_QUERY_MOCK))\n+                            .willReturn(aResponse()\n+                                                .withHeader(CONTENT_TYPE, APPLICATION_JSON)\n+                                                .withBody(buildUserTaskResult(USER_TASKS_QUERY_MOCK_RESULT))\n+\n+                            )\n+            );\n+\n+            stubFor(post(urlEqualTo(\"/graphql/\"))\n+                            .withRequestBody(equalToJson(USER_TASKS_QUERY_FAILURE_MOCK))\n+                            .willReturn(aResponse()\n+                                                .withHeader(CONTENT_TYPE, APPLICATION_JSON)\n+                                                .withBody(buildFailureResult(USER_TASKS_QUERY_FAILURE_MOCK_RESULT))\n+\n+                            )\n+            );\n+        } catch (JsonProcessingException e) {\n+            //Ignore this error, the tests will fail anyway\n+            e.printStackTrace();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79c1ebb3fbdf097faaa6277307ae3551a75efdf9"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMwNTM0MA==", "bodyText": "Maybe do the new URL(serviceUrl()); here do deal with already sanitized input later?\nSee https://github.com/kiegroup/kogito-apps/pull/562/files#diff-b360b2e8ac16f3751a4d940473e56ed427025347cc34972205c9710946de65bbR51.", "url": "https://github.com/kiegroup/kogito-apps/pull/562#discussion_r538305340", "createdAt": "2020-12-08T12:21:21Z", "author": {"login": "rsynek"}, "path": "task-assigning/task-assigning-process-service-client/src/main/java/org/kie/kogito/taskassigning/config/ServiceClientConfig.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.taskassigning.config;\n+\n+public abstract class ServiceClientConfig {\n+\n+    private String serviceUrl;\n+\n+    private long connectTimeoutMillis;\n+\n+    private long readTimeoutMillis;\n+\n+    protected ServiceClientConfig() {\n+    }\n+\n+    protected ServiceClientConfig(String serviceUrl, long connectTimeoutMillis, long readTimeoutMillis) {\n+        this.serviceUrl = serviceUrl;\n+        this.connectTimeoutMillis = connectTimeoutMillis;\n+        this.readTimeoutMillis = readTimeoutMillis;\n+    }\n+\n+    public String getServiceUrl() {\n+        return serviceUrl;\n+    }\n+\n+    public long getConnectTimeoutMillis() {\n+        return connectTimeoutMillis;\n+    }\n+\n+    public long getReadTimeoutMillis() {\n+        return readTimeoutMillis;\n+    }\n+\n+    public abstract static class Builder<S extends ServiceClientConfig, T extends Builder> {\n+\n+        protected String serviceUrl;\n+        protected long connectTimeoutMillis;\n+        protected long readTimeoutMillis;\n+\n+        protected Builder() {\n+        }\n+\n+        public abstract S build();\n+\n+        public Builder<S, T> serviceUrl(String serviceUrl) {\n+            this.serviceUrl = serviceUrl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79c1ebb3fbdf097faaa6277307ae3551a75efdf9"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODMxMzc1OQ==", "bodyText": "Is there a plan for such an implementation? Truly, it would be much better to rely on such a full-fledged implementation than doing it ourselves just for the Task Assigning.", "url": "https://github.com/kiegroup/kogito-apps/pull/562#discussion_r538313759", "createdAt": "2020-12-08T12:31:56Z", "author": {"login": "rsynek"}, "path": "task-assigning/task-assigning-process-service-client/src/main/java/org/kie/kogito/taskassigning/index/service/client/graphql/impl/mp/graphql/GraphQLServiceClientMP.java", "diffHunk": "@@ -0,0 +1,73 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.taskassigning.index.service.client.graphql.impl.mp.graphql;\n+\n+import java.io.IOException;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import org.kie.kogito.taskassigning.index.service.client.graphql.GraphQLServiceClient;\n+import org.kie.kogito.taskassigning.index.service.client.graphql.GraphQLServiceException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import static org.kie.kogito.taskassigning.index.service.client.graphql.util.JsonUtils.OBJECT_MAPPER;\n+\n+/**\n+ * Basic GraphQLServiceClient implementation for avoiding introducing third party libraries. This implementation\n+ * might be changed in favor of the data-index-client Quarkus implementation to be provided by Kogito.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79c1ebb3fbdf097faaa6277307ae3551a75efdf9"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzODQ4NDM0Nw==", "bodyText": "The fact that the second parameter (provided by the method source) is not used feels strange. It happens because the method source is used by another test method, defined in the parent class.", "url": "https://github.com/kiegroup/kogito-apps/pull/562#discussion_r538484347", "createdAt": "2020-12-08T15:15:15Z", "author": {"login": "rsynek"}, "path": "task-assigning/task-assigning-process-service-client/src/test/java/org/kie/kogito/taskassigning/index/service/client/graphql/string/AbstractStringArgumentTest.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.taskassigning.index.service.client.graphql.string;\n+\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.params.ParameterizedTest;\n+import org.junit.jupiter.params.provider.MethodSource;\n+import org.kie.kogito.taskassigning.index.service.client.graphql.AbstractArgumentTest;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+\n+abstract class AbstractStringArgumentTest<V, T extends StringArgument<V>> extends AbstractArgumentTest<V, T> {\n+\n+    @ParameterizedTest\n+    @MethodSource(\"createTestValues\")\n+    void getValue(V value, String expectedJson) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "79c1ebb3fbdf097faaa6277307ae3551a75efdf9"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "991a042377cb1e58603c3b54246a879549a10a6a", "author": {"user": {"login": "wmedvede", "name": "Walter Medvedeo"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/991a042377cb1e58603c3b54246a879549a10a6a", "committedDate": "2020-12-10T10:18:05Z", "message": "PLANNER-2210: Data Index queries API"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "79c1ebb3fbdf097faaa6277307ae3551a75efdf9", "author": {"user": {"login": "wmedvede", "name": "Walter Medvedeo"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/79c1ebb3fbdf097faaa6277307ae3551a75efdf9", "committedDate": "2020-12-03T19:23:13Z", "message": "PLANNER-2210: Data Index queries API"}, "afterCommit": {"oid": "991a042377cb1e58603c3b54246a879549a10a6a", "author": {"user": {"login": "wmedvede", "name": "Walter Medvedeo"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/991a042377cb1e58603c3b54246a879549a10a6a", "committedDate": "2020-12-10T10:18:05Z", "message": "PLANNER-2210: Data Index queries API"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5MzMxNTYw", "url": "https://github.com/kiegroup/kogito-apps/pull/562#pullrequestreview-549331560", "createdAt": "2020-12-10T15:45:00Z", "commit": {"oid": "991a042377cb1e58603c3b54246a879549a10a6a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4601, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}