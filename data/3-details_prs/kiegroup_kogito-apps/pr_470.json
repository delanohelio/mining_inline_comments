{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2OTc1OTU2", "number": 470, "title": "FAI-234 - Better handling of vector types", "bodyText": "Minor improvements to handling of double vectors in Values.\nSee https://issues.redhat.com/browse/FAI-234\nMany thanks for submitting your Pull Request \u2764\ufe0f!\nPlease make sure that your PR meets the following requirements:\n\n You have read the contributors guide\n Pull Request title is properly formatted: KOGITO-XYZ Subject\n Pull Request title contains the target branch if not targeting master: [0.9.x] KOGITO-XYZ Subject\n Pull Request contains link to the JIRA issue\n Pull Request contains link to any dependent or related Pull Request\n Pull Request contains description of the issue\n Pull Request does not include fixes for issues other than the main ticket", "createdAt": "2020-10-02T15:21:56Z", "url": "https://github.com/kiegroup/kogito-apps/pull/470", "merged": true, "mergeCommit": {"oid": "09e70298a40832bb8dfdbdb9df72d1b21edb0eb6"}, "closed": true, "closedAt": "2020-11-02T08:51:15Z", "author": {"login": "tteofili"}, "timelineItems": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdOnmS1AH2gAyNDk2OTc1OTU2OjgxNGNkMTI1MmNjY2UwMGIxNDg4NTNkZTNhNWMyOWE1ODBiYzkzZjc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdWpSGlgFqTUxNzcyMzA3OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "814cd1252ccce00b148853de3a5c29a580bc93f7", "author": {"user": {"login": "tteofili", "name": "Tommaso Teofili"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/814cd1252ccce00b148853de3a5c29a580bc93f7", "committedDate": "2020-10-02T15:20:18Z", "message": "FAI-234 - minor improvements to vector type handling"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTAzNzY4NjUw", "url": "https://github.com/kiegroup/kogito-apps/pull/470#pullrequestreview-503768650", "createdAt": "2020-10-07T11:11:30Z", "commit": {"oid": "814cd1252ccce00b148853de3a5c29a580bc93f7"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMToxMTozMFrOHduPYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wN1QxMToxMjoyM1rOHduRTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkyODM1NQ==", "bodyText": "When is it possible to obtain a vector as ByteBuffer?", "url": "https://github.com/kiegroup/kogito-apps/pull/470#discussion_r500928355", "createdAt": "2020-10-07T11:11:30Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Value.java", "diffHunk": "@@ -73,23 +79,42 @@ public String toString() {\n             doubles = (double[]) underlyingObject;\n         } else {\n             if (underlyingObject instanceof String) {\n-                String[] tokens = ((String) underlyingObject).split(\",?\\\\s+\");\n-                int noOfWords = tokens.length;\n-                doubles = new double[noOfWords];\n-                // parse string encoded vector\n-                if (Arrays.stream(tokens).allMatch(s -> s.matches(\"-?\\\\d+(\\\\.\\\\d+)?\"))) {\n-                    for (int i = 0; i < tokens.length; i++) {\n-                        doubles[i] = Double.parseDouble(tokens[i]);\n-                    }\n-                } else { // or make a vector of 1s\n-                    Arrays.fill(doubles, 1);\n-                }\n+                String string = (String) this.underlyingObject;\n+                doubles = parseVectorString(string);\n+            } else if (underlyingObject instanceof ByteBuffer) {\n+                ByteBuffer byteBuffer = (ByteBuffer) underlyingObject;\n+                String string = StandardCharsets.UTF_8.decode(byteBuffer).toString();\n+                doubles = parseVectorString(string);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "814cd1252ccce00b148853de3a5c29a580bc93f7"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDkyODg0NQ==", "bodyText": "Where this format is defined? Is this intended to be a json array?", "url": "https://github.com/kiegroup/kogito-apps/pull/470#discussion_r500928845", "createdAt": "2020-10-07T11:12:23Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Value.java", "diffHunk": "@@ -73,23 +79,42 @@ public String toString() {\n             doubles = (double[]) underlyingObject;\n         } else {\n             if (underlyingObject instanceof String) {\n-                String[] tokens = ((String) underlyingObject).split(\",?\\\\s+\");\n-                int noOfWords = tokens.length;\n-                doubles = new double[noOfWords];\n-                // parse string encoded vector\n-                if (Arrays.stream(tokens).allMatch(s -> s.matches(\"-?\\\\d+(\\\\.\\\\d+)?\"))) {\n-                    for (int i = 0; i < tokens.length; i++) {\n-                        doubles[i] = Double.parseDouble(tokens[i]);\n-                    }\n-                } else { // or make a vector of 1s\n-                    Arrays.fill(doubles, 1);\n-                }\n+                String string = (String) this.underlyingObject;\n+                doubles = parseVectorString(string);\n+            } else if (underlyingObject instanceof ByteBuffer) {\n+                ByteBuffer byteBuffer = (ByteBuffer) underlyingObject;\n+                String string = StandardCharsets.UTF_8.decode(byteBuffer).toString();\n+                doubles = parseVectorString(string);\n             } else {\n                 double v = asNumber();\n                 doubles = new double[1];\n                 doubles[0] = v;\n             }\n-            // FAI-234 : handle parsing of different underlyingObject types as vectors (e.g. ByteBuffer, etc.)\n+        }\n+        return doubles;\n+    }\n+\n+    private double[] parseVectorString(String string) {\n+        double[] doubles;\n+        try {\n+            String[] tokens = string\n+                    .replaceFirst(\"\\\\[\", \"\")\n+                    .replaceFirst(\"]\", \"\")\n+                    .replaceFirst(\"\\\\{\", \"\")\n+                    .replaceFirst(\"}\", \"\")\n+                    .split(\",?\\\\s+\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "814cd1252ccce00b148853de3a5c29a580bc93f7"}, "originalPosition": 59}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c20bf915e051f02da1dc7939bb96524e8d378d2", "author": {"user": {"login": "tteofili", "name": "Tommaso Teofili"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/3c20bf915e051f02da1dc7939bb96524e8d378d2", "committedDate": "2020-10-19T11:22:51Z", "message": "FAI-234 - using objectmapper to read strings"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExNjcyNTMy", "url": "https://github.com/kiegroup/kogito-apps/pull/470#pullrequestreview-511672532", "createdAt": "2020-10-19T11:42:35Z", "commit": {"oid": "3c20bf915e051f02da1dc7939bb96524e8d378d2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMTo0MjozNlrOHkKTUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0xOVQxMTo0MjozNlrOHkKTUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwNzY3OTU3MA==", "bodyText": "explainability-core is not supposed to be platform specific. Can you please replace this dependency to directly use jackson dependencies?", "url": "https://github.com/kiegroup/kogito-apps/pull/470#discussion_r507679570", "createdAt": "2020-10-19T11:42:36Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-core/pom.xml", "diffHunk": "@@ -19,6 +19,11 @@\n       <groupId>org.apache.commons</groupId>\n       <artifactId>commons-lang3</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-jackson</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3c20bf915e051f02da1dc7939bb96524e8d378d2"}, "originalPosition": 6}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4edf05418127fc84a74446642c65886fe2a34632", "author": {"user": {"login": "tteofili", "name": "Tommaso Teofili"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/4edf05418127fc84a74446642c65886fe2a34632", "committedDate": "2020-10-19T11:47:01Z", "message": "FAI-234 - avoid quarkus-jackson dep"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTExOTM3OTg1", "url": "https://github.com/kiegroup/kogito-apps/pull/470#pullrequestreview-511937985", "createdAt": "2020-10-19T16:19:55Z", "commit": {"oid": "4edf05418127fc84a74446642c65886fe2a34632"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3NzIzMDc5", "url": "https://github.com/kiegroup/kogito-apps/pull/470#pullrequestreview-517723079", "createdAt": "2020-10-27T13:49:27Z", "commit": {"oid": "4edf05418127fc84a74446642c65886fe2a34632"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4808, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}