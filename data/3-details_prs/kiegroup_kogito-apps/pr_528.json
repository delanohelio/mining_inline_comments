{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTE3NTk4ODc3", "number": 528, "title": "KOGITO-3797 Avoid timeout exception from Infinispan", "bodyText": "https://issues.redhat.com/browse/KOGITO-3797", "createdAt": "2020-11-09T08:56:00Z", "url": "https://github.com/kiegroup/kogito-apps/pull/528", "merged": true, "mergeCommit": {"oid": "aa616064c7c99631fa5c03377f6f487838292101"}, "closed": true, "closedAt": "2020-12-10T01:05:26Z", "author": {"login": "cristianonicolai"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABda3pwLgFqTUyNjQ1MzA4MQ==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdj2n1VAFqTU0NjIxNDQxMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI2NDUzMDgx", "url": "https://github.com/kiegroup/kogito-apps/pull/528#pullrequestreview-526453081", "createdAt": "2020-11-09T16:49:39Z", "commit": {"oid": "42572aa91b3931f0d16862e33b5dfa32df86709e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "42572aa91b3931f0d16862e33b5dfa32df86709e", "author": {"user": {"login": "cristianonicolai", "name": "Cristiano Nicolai"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/42572aa91b3931f0d16862e33b5dfa32df86709e", "committedDate": "2020-11-09T08:54:27Z", "message": "KOGITO-3797 Avoid timeout exception from Infinispan"}, "afterCommit": {"oid": "9508844134ff53c66a1f74e12b082168662875c6", "author": {"user": {"login": "cristianonicolai", "name": "Cristiano Nicolai"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/9508844134ff53c66a1f74e12b082168662875c6", "committedDate": "2020-12-03T04:23:45Z", "message": "KOGITO-3797 Avoid timeout exception from Infinispan"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9508844134ff53c66a1f74e12b082168662875c6", "author": {"user": {"login": "cristianonicolai", "name": "Cristiano Nicolai"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/9508844134ff53c66a1f74e12b082168662875c6", "committedDate": "2020-12-03T04:23:45Z", "message": "KOGITO-3797 Avoid timeout exception from Infinispan"}, "afterCommit": {"oid": "a3b85e36be5891c7892ccc478acfd1667729b23d", "author": {"user": {"login": "cristianonicolai", "name": "Cristiano Nicolai"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/a3b85e36be5891c7892ccc478acfd1667729b23d", "committedDate": "2020-12-03T04:53:15Z", "message": "KOGITO-3797 Avoid timeout exception from Infinispan"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzNzIwOTc1", "url": "https://github.com/kiegroup/kogito-apps/pull/528#pullrequestreview-543720975", "createdAt": "2020-12-03T08:45:50Z", "commit": {"oid": "a3b85e36be5891c7892ccc478acfd1667729b23d"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODo0NTo1MFrOH-KCiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wM1QwODo0OTowNFrOH-KcOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDkzODI0OA==", "bodyText": "why not using the Optional.of().orElse ?", "url": "https://github.com/kiegroup/kogito-apps/pull/528#discussion_r534938248", "createdAt": "2020-12-03T08:45:50Z", "author": {"login": "radtriste"}, "path": "persistence-commons/persistence-commons-infinispan/src/main/java/org/kie/kogito/persistence/infinispan/cache/InfinispanCacheManager.java", "diffHunk": "@@ -72,42 +74,39 @@ public void destroy() {\n     /**\n      * Gets the cache if exists, otherwise tries to create one with the given template.\n      * If the template does not exist on the server, creates the cache based on a default configuration.\n+     *\n      * @param name the cache manager name\n-     * @param template the template that must exists on the server\n      * @see KogitoCacheDefaultConfiguration\n      */\n-    protected <K, V> RemoteCache<K, V> getOrCreateCache(final String name, final String template) {\n-        try {\n-            LOGGER.debug(\"Trying to get cache {} from the server\", name);\n-            RemoteCache<K, V> remoteCache = manager.getCache(name);\n-            if (remoteCache == null) {\n-                LOGGER.debug(\"Cache {} not found, trying to create a new one based on template {}\", name, template);\n-                return manager.administration().getOrCreateCache(name, template);\n-            }\n-            return remoteCache;\n-        } catch (HotRodClientException e) {\n-            if (e.isServerError()) {\n-                LOGGER.info(\"Creating a cache for '{}' based on the default configuration\", name);\n-                RemoteCache<K, V> cache = manager.administration().getOrCreateCache(name, new KogitoCacheDefaultConfiguration(name));\n-                LOGGER.debug(\"Default cache created {}\", cache.getName());\n-                return cache;\n-            }\n-            throw e;\n+    protected <K, V> RemoteCache<K, V> getOrCreateCache(final String name) {\n+        LOGGER.debug(\"Trying to get cache {} from the server\", name);\n+        RemoteCache<K, V> remoteCache = manager.getCache(name);\n+        return remoteCache == null ? createCache(name) : remoteCache;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3b85e36be5891c7892ccc478acfd1667729b23d"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDk0NDgyNQ==", "bodyText": "same here, something like\nreturn admin.createCache(name, cacheTemplate.orElse(new KogitoCacheDefaultConfiguration(name)))\n\nAlso the DEBUG log should not be there IMO or change the message Cache {} not found => Creating cache based on ...", "url": "https://github.com/kiegroup/kogito-apps/pull/528#discussion_r534944825", "createdAt": "2020-12-03T08:49:04Z", "author": {"login": "radtriste"}, "path": "persistence-commons/persistence-commons-infinispan/src/main/java/org/kie/kogito/persistence/infinispan/cache/InfinispanCacheManager.java", "diffHunk": "@@ -72,42 +74,39 @@ public void destroy() {\n     /**\n      * Gets the cache if exists, otherwise tries to create one with the given template.\n      * If the template does not exist on the server, creates the cache based on a default configuration.\n+     *\n      * @param name the cache manager name\n-     * @param template the template that must exists on the server\n      * @see KogitoCacheDefaultConfiguration\n      */\n-    protected <K, V> RemoteCache<K, V> getOrCreateCache(final String name, final String template) {\n-        try {\n-            LOGGER.debug(\"Trying to get cache {} from the server\", name);\n-            RemoteCache<K, V> remoteCache = manager.getCache(name);\n-            if (remoteCache == null) {\n-                LOGGER.debug(\"Cache {} not found, trying to create a new one based on template {}\", name, template);\n-                return manager.administration().getOrCreateCache(name, template);\n-            }\n-            return remoteCache;\n-        } catch (HotRodClientException e) {\n-            if (e.isServerError()) {\n-                LOGGER.info(\"Creating a cache for '{}' based on the default configuration\", name);\n-                RemoteCache<K, V> cache = manager.administration().getOrCreateCache(name, new KogitoCacheDefaultConfiguration(name));\n-                LOGGER.debug(\"Default cache created {}\", cache.getName());\n-                return cache;\n-            }\n-            throw e;\n+    protected <K, V> RemoteCache<K, V> getOrCreateCache(final String name) {\n+        LOGGER.debug(\"Trying to get cache {} from the server\", name);\n+        RemoteCache<K, V> remoteCache = manager.getCache(name);\n+        return remoteCache == null ? createCache(name) : remoteCache;\n+    }\n+\n+    protected <K, V> RemoteCache<K, V> createCache(final String name) {\n+        RemoteCacheManagerAdmin admin = manager.administration();\n+        if (cacheTemplateName.isPresent()) {\n+            LOGGER.debug(\"Cache {} not found, trying to create a new one based on template {}\", name, cacheTemplateName.get());\n+            return admin.createCache(name, cacheTemplateName.get());\n+        } else {\n+            LOGGER.debug(\"Cache {} not found, trying to create a new one based on Kogito default configuration\", name);\n+            return admin.createCache(name, new KogitoCacheDefaultConfiguration(name));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3b85e36be5891c7892ccc478acfd1667729b23d"}, "originalPosition": 68}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzODMxOTE2", "url": "https://github.com/kiegroup/kogito-apps/pull/528#pullrequestreview-543831916", "createdAt": "2020-12-03T10:52:21Z", "commit": {"oid": "a3b85e36be5891c7892ccc478acfd1667729b23d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQzODc2MjE3", "url": "https://github.com/kiegroup/kogito-apps/pull/528#pullrequestreview-543876217", "createdAt": "2020-12-03T11:51:23Z", "commit": {"oid": "a3b85e36be5891c7892ccc478acfd1667729b23d"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a3b85e36be5891c7892ccc478acfd1667729b23d", "author": {"user": {"login": "cristianonicolai", "name": "Cristiano Nicolai"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/a3b85e36be5891c7892ccc478acfd1667729b23d", "committedDate": "2020-12-03T04:53:15Z", "message": "KOGITO-3797 Avoid timeout exception from Infinispan"}, "afterCommit": {"oid": "2193ae130979fd78199dd97787db397beefbf9f1", "author": {"user": {"login": "cristianonicolai", "name": "Cristiano Nicolai"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/2193ae130979fd78199dd97787db397beefbf9f1", "committedDate": "2020-12-04T10:20:38Z", "message": "KOGITO-3797 Avoid timeout exception from Infinispan"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d3df0d5d0fdbc5b201c5221d79bf250ab38888c", "author": {"user": {"login": "cristianonicolai", "name": "Cristiano Nicolai"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/2d3df0d5d0fdbc5b201c5221d79bf250ab38888c", "committedDate": "2020-12-07T09:22:45Z", "message": "KOGITO-3797 Avoid timeout exception from Infinispan"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2193ae130979fd78199dd97787db397beefbf9f1", "author": {"user": {"login": "cristianonicolai", "name": "Cristiano Nicolai"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/2193ae130979fd78199dd97787db397beefbf9f1", "committedDate": "2020-12-04T10:20:38Z", "message": "KOGITO-3797 Avoid timeout exception from Infinispan"}, "afterCommit": {"oid": "2d3df0d5d0fdbc5b201c5221d79bf250ab38888c", "author": {"user": {"login": "cristianonicolai", "name": "Cristiano Nicolai"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/2d3df0d5d0fdbc5b201c5221d79bf250ab38888c", "committedDate": "2020-12-07T09:22:45Z", "message": "KOGITO-3797 Avoid timeout exception from Infinispan"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ2MjE0NDEw", "url": "https://github.com/kiegroup/kogito-apps/pull/528#pullrequestreview-546214410", "createdAt": "2020-12-07T14:42:58Z", "commit": {"oid": "2d3df0d5d0fdbc5b201c5221d79bf250ab38888c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4675, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}