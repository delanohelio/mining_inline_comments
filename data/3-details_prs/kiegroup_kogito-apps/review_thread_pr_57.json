{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5NDI3NDE0", "number": 57, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNzo1MjoyMFrODetX0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyMTo0MVrODhII2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTI3MjUxOnYy", "diffSide": "RIGHT", "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNzo1MjoyMFrOFn_pKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwOToyMzoyMVrOFoBy_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4MTUxNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                      aria-label=\"Filterable Table Demo\"\n          \n          \n            \n                      aria-label=\"Domain Explorer Table\"", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r377481514", "createdAt": "2020-02-11T07:52:20Z", "author": {"login": "cristianonicolai"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -0,0 +1,91 @@\n+import React from 'react';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import {\n+  Title,\n+  EmptyState,\n+  EmptyStateIcon,\n+  EmptyStateBody,\n+  EmptyStateSecondaryActions,\n+  Bullseye,\n+  Button\n+} from '@patternfly/react-core';\n+import { SearchIcon } from '@patternfly/react-icons';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+\n+const DomainExplorerTable = ({ columnFilters, tableLoading, displayTable }) => {\n+  const getKeys = object => {\n+    const iter = (data, k = '') => {\n+      // tslint:disable-next-line: forin\n+      for (const i in data) {\n+        const rest = k.length ? ' > ' + i : i;\n+        if (typeof data[i] === 'object') {\n+          if (!Array.isArray(data[i])) {\n+            iter(data[i], k + rest);\n+          }\n+        } else {\n+          !tempKeys.includes(k + rest) && tempKeys.push(k + rest);\n+          if (rest.hasOwnProperty) {\n+            tempValue.push(data[i]);\n+          }\n+        }\n+      }\n+    };\n+    const tempKeys = [];\n+    const tempValue = [];\n+    iter(object);\n+    return { tempKeys, tempValue };\n+  };\n+  const firstKey = Object.keys(columnFilters)[0];\n+  const tableContent = columnFilters[firstKey];\n+\n+  const keys = [];\n+  const values = [];\n+  if (tableContent) {\n+    const finalResult = tableContent.map(item => getKeys(item));\n+    finalResult.map(result => {\n+      keys.push(result.tempKeys);\n+      values.push({ cells: result.tempValue });\n+    });\n+    const rowObject: any = {};\n+    if (tableLoading) {\n+      rowObject.cells = [\n+        {\n+          props: { colSpan: 8 },\n+          title: (\n+            <Bullseye>\n+              <SpinnerComponent spinnerText=\"Loading Domain Explorer...\" />\n+            </Bullseye>\n+          )\n+        }\n+      ];\n+      values.push(rowObject);\n+    }\n+  }\n+  const finalKeys = keys[0];\n+\n+  const onRowSelect = (event, isSelected, rowId) => {\n+    return null;\n+  };\n+\n+  const onDelete = (type = '', id = '') => {\n+    return null;\n+  };\n+\n+  return (\n+    <React.Fragment>\n+      {displayTable && (\n+        <Table\n+          cells={finalKeys}\n+          rows={values}\n+          onSelect={onRowSelect}\n+          aria-label=\"Filterable Table Demo\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09b0832506e2c230094d464772832d596ce9ad8"}, "originalPosition": 81}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUxNjc5OA==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r377516798", "createdAt": "2020-02-11T09:23:21Z", "author": {"login": "Sara4994"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -0,0 +1,91 @@\n+import React from 'react';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import {\n+  Title,\n+  EmptyState,\n+  EmptyStateIcon,\n+  EmptyStateBody,\n+  EmptyStateSecondaryActions,\n+  Bullseye,\n+  Button\n+} from '@patternfly/react-core';\n+import { SearchIcon } from '@patternfly/react-icons';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+\n+const DomainExplorerTable = ({ columnFilters, tableLoading, displayTable }) => {\n+  const getKeys = object => {\n+    const iter = (data, k = '') => {\n+      // tslint:disable-next-line: forin\n+      for (const i in data) {\n+        const rest = k.length ? ' > ' + i : i;\n+        if (typeof data[i] === 'object') {\n+          if (!Array.isArray(data[i])) {\n+            iter(data[i], k + rest);\n+          }\n+        } else {\n+          !tempKeys.includes(k + rest) && tempKeys.push(k + rest);\n+          if (rest.hasOwnProperty) {\n+            tempValue.push(data[i]);\n+          }\n+        }\n+      }\n+    };\n+    const tempKeys = [];\n+    const tempValue = [];\n+    iter(object);\n+    return { tempKeys, tempValue };\n+  };\n+  const firstKey = Object.keys(columnFilters)[0];\n+  const tableContent = columnFilters[firstKey];\n+\n+  const keys = [];\n+  const values = [];\n+  if (tableContent) {\n+    const finalResult = tableContent.map(item => getKeys(item));\n+    finalResult.map(result => {\n+      keys.push(result.tempKeys);\n+      values.push({ cells: result.tempValue });\n+    });\n+    const rowObject: any = {};\n+    if (tableLoading) {\n+      rowObject.cells = [\n+        {\n+          props: { colSpan: 8 },\n+          title: (\n+            <Bullseye>\n+              <SpinnerComponent spinnerText=\"Loading Domain Explorer...\" />\n+            </Bullseye>\n+          )\n+        }\n+      ];\n+      values.push(rowObject);\n+    }\n+  }\n+  const finalKeys = keys[0];\n+\n+  const onRowSelect = (event, isSelected, rowId) => {\n+    return null;\n+  };\n+\n+  const onDelete = (type = '', id = '') => {\n+    return null;\n+  };\n+\n+  return (\n+    <React.Fragment>\n+      {displayTable && (\n+        <Table\n+          cells={finalKeys}\n+          rows={values}\n+          onSelect={onRowSelect}\n+          aria-label=\"Filterable Table Demo\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4MTUxNA=="}, "originalCommit": {"oid": "c09b0832506e2c230094d464772832d596ce9ad8"}, "originalPosition": 81}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTI4NjIzOnYy", "diffSide": "RIGHT", "path": "packages/management-console/src/components/Templates/DashboardComponent/Dashboard.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNzo1ODoyMVrOFn_wuQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwOToyMjoyNFrOFoBxZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4MzQ0OQ==", "bodyText": "please remove comment out code.", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r377483449", "createdAt": "2020-02-11T07:58:21Z", "author": {"login": "cristianonicolai"}, "path": "packages/management-console/src/components/Templates/DashboardComponent/Dashboard.tsx", "diffHunk": "@@ -1,24 +1,69 @@\n-import { Page, SkipToContent } from '@patternfly/react-core';\n-import React from 'react';\n-import { Redirect, Route } from 'react-router-dom';\n-import HeaderComponent from '../../Organisms/PageHeaderComponent/HeaderComponent';\n+import {\n+  Page,\n+  SkipToContent,\n+  PageSidebar,\n+  PageHeader,\n+  Nav,\n+  NavList,\n+  NavItem\n+} from '@patternfly/react-core';\n+import React, { useState } from 'react';\n+import { Redirect, Route, Link } from 'react-router-dom';\n+// import HeaderComponent from '../../Organisms/PageHeaderComponent/HeaderComponent';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09b0832506e2c230094d464772832d596ce9ad8"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUxNjM5MQ==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r377516391", "createdAt": "2020-02-11T09:22:24Z", "author": {"login": "Sara4994"}, "path": "packages/management-console/src/components/Templates/DashboardComponent/Dashboard.tsx", "diffHunk": "@@ -1,24 +1,69 @@\n-import { Page, SkipToContent } from '@patternfly/react-core';\n-import React from 'react';\n-import { Redirect, Route } from 'react-router-dom';\n-import HeaderComponent from '../../Organisms/PageHeaderComponent/HeaderComponent';\n+import {\n+  Page,\n+  SkipToContent,\n+  PageSidebar,\n+  PageHeader,\n+  Nav,\n+  NavList,\n+  NavItem\n+} from '@patternfly/react-core';\n+import React, { useState } from 'react';\n+import { Redirect, Route, Link } from 'react-router-dom';\n+// import HeaderComponent from '../../Organisms/PageHeaderComponent/HeaderComponent';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4MzQ0OQ=="}, "originalCommit": {"oid": "c09b0832506e2c230094d464772832d596ce9ad8"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTI4ODAwOnYy", "diffSide": "RIGHT", "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwNzo1OToxM1rOFn_xwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwOToyMjozM1rOFoBxnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4MzcxNA==", "bodyText": "@Sara4994 can we remote the check box column from this version?", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r377483714", "createdAt": "2020-02-11T07:59:13Z", "author": {"login": "cristianonicolai"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -0,0 +1,91 @@\n+import React from 'react';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import {\n+  Title,\n+  EmptyState,\n+  EmptyStateIcon,\n+  EmptyStateBody,\n+  EmptyStateSecondaryActions,\n+  Bullseye,\n+  Button\n+} from '@patternfly/react-core';\n+import { SearchIcon } from '@patternfly/react-icons';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+\n+const DomainExplorerTable = ({ columnFilters, tableLoading, displayTable }) => {\n+  const getKeys = object => {\n+    const iter = (data, k = '') => {\n+      // tslint:disable-next-line: forin\n+      for (const i in data) {\n+        const rest = k.length ? ' > ' + i : i;\n+        if (typeof data[i] === 'object') {\n+          if (!Array.isArray(data[i])) {\n+            iter(data[i], k + rest);\n+          }\n+        } else {\n+          !tempKeys.includes(k + rest) && tempKeys.push(k + rest);\n+          if (rest.hasOwnProperty) {\n+            tempValue.push(data[i]);\n+          }\n+        }\n+      }\n+    };\n+    const tempKeys = [];\n+    const tempValue = [];\n+    iter(object);\n+    return { tempKeys, tempValue };\n+  };\n+  const firstKey = Object.keys(columnFilters)[0];\n+  const tableContent = columnFilters[firstKey];\n+\n+  const keys = [];\n+  const values = [];\n+  if (tableContent) {\n+    const finalResult = tableContent.map(item => getKeys(item));\n+    finalResult.map(result => {\n+      keys.push(result.tempKeys);\n+      values.push({ cells: result.tempValue });\n+    });\n+    const rowObject: any = {};\n+    if (tableLoading) {\n+      rowObject.cells = [\n+        {\n+          props: { colSpan: 8 },\n+          title: (\n+            <Bullseye>\n+              <SpinnerComponent spinnerText=\"Loading Domain Explorer...\" />\n+            </Bullseye>\n+          )\n+        }\n+      ];\n+      values.push(rowObject);\n+    }\n+  }\n+  const finalKeys = keys[0];\n+\n+  const onRowSelect = (event, isSelected, rowId) => {\n+    return null;\n+  };\n+\n+  const onDelete = (type = '', id = '') => {\n+    return null;\n+  };\n+\n+  return (\n+    <React.Fragment>\n+      {displayTable && (\n+        <Table\n+          cells={finalKeys}\n+          rows={values}\n+          onSelect={onRowSelect}\n+          aria-label=\"Filterable Table Demo\"\n+        >\n+          <TableHeader />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09b0832506e2c230094d464772832d596ce9ad8"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUxNjQ0NQ==", "bodyText": "removed", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r377516445", "createdAt": "2020-02-11T09:22:33Z", "author": {"login": "Sara4994"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -0,0 +1,91 @@\n+import React from 'react';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import {\n+  Title,\n+  EmptyState,\n+  EmptyStateIcon,\n+  EmptyStateBody,\n+  EmptyStateSecondaryActions,\n+  Bullseye,\n+  Button\n+} from '@patternfly/react-core';\n+import { SearchIcon } from '@patternfly/react-icons';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+\n+const DomainExplorerTable = ({ columnFilters, tableLoading, displayTable }) => {\n+  const getKeys = object => {\n+    const iter = (data, k = '') => {\n+      // tslint:disable-next-line: forin\n+      for (const i in data) {\n+        const rest = k.length ? ' > ' + i : i;\n+        if (typeof data[i] === 'object') {\n+          if (!Array.isArray(data[i])) {\n+            iter(data[i], k + rest);\n+          }\n+        } else {\n+          !tempKeys.includes(k + rest) && tempKeys.push(k + rest);\n+          if (rest.hasOwnProperty) {\n+            tempValue.push(data[i]);\n+          }\n+        }\n+      }\n+    };\n+    const tempKeys = [];\n+    const tempValue = [];\n+    iter(object);\n+    return { tempKeys, tempValue };\n+  };\n+  const firstKey = Object.keys(columnFilters)[0];\n+  const tableContent = columnFilters[firstKey];\n+\n+  const keys = [];\n+  const values = [];\n+  if (tableContent) {\n+    const finalResult = tableContent.map(item => getKeys(item));\n+    finalResult.map(result => {\n+      keys.push(result.tempKeys);\n+      values.push({ cells: result.tempValue });\n+    });\n+    const rowObject: any = {};\n+    if (tableLoading) {\n+      rowObject.cells = [\n+        {\n+          props: { colSpan: 8 },\n+          title: (\n+            <Bullseye>\n+              <SpinnerComponent spinnerText=\"Loading Domain Explorer...\" />\n+            </Bullseye>\n+          )\n+        }\n+      ];\n+      values.push(rowObject);\n+    }\n+  }\n+  const finalKeys = keys[0];\n+\n+  const onRowSelect = (event, isSelected, rowId) => {\n+    return null;\n+  };\n+\n+  const onDelete = (type = '', id = '') => {\n+    return null;\n+  };\n+\n+  return (\n+    <React.Fragment>\n+      {displayTable && (\n+        <Table\n+          cells={finalKeys}\n+          rows={values}\n+          onSelect={onRowSelect}\n+          aria-label=\"Filterable Table Demo\"\n+        >\n+          <TableHeader />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4MzcxNA=="}, "originalCommit": {"oid": "c09b0832506e2c230094d464772832d596ce9ad8"}, "originalPosition": 83}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTI5MjY1OnYy", "diffSide": "RIGHT", "path": "packages/management-console/src/components/Organisms/DomainExplorerColumnPicker/DomainExplorerColumnPicker.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODowMTozNVrOFn_0Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwOToyMjozOVrOFoBxzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4NDM3NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                  const label = title + '>' + attr.join();\n          \n          \n            \n                  const label = title + ' > ' + attr.join();\n          \n      \n    \n    \n  \n\njust adding a extra space here, before and after the string.", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r377484375", "createdAt": "2020-02-11T08:01:35Z", "author": {"login": "cristianonicolai"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerColumnPicker/DomainExplorerColumnPicker.tsx", "diffHunk": "@@ -0,0 +1,239 @@\n+import React, { useState } from 'react';\n+import { useQuery } from '@apollo/react-hooks';\n+import {\n+  Select,\n+  SelectOption,\n+  SelectVariant,\n+  SelectGroup,\n+  Button,\n+  Grid,\n+  GridItem\n+} from '@patternfly/react-core';\n+import { query } from 'gql-query-builder';\n+import axios from 'axios';\n+import _ from 'lodash';\n+import { useGetPickerQuery } from '../../../graphql/types';\n+\n+export interface IOwnProps {\n+  columnPickerType: any;\n+  setColumnFilters: any;\n+  setTableLoading: any;\n+  getQueryTypes: any;\n+  setDisplayTable: any;\n+}\n+\n+const DomainExplorerColumnPicker: React.FC<IOwnProps> = ({\n+  columnPickerType,\n+  setColumnFilters,\n+  setTableLoading,\n+  getQueryTypes,\n+  setDisplayTable\n+}) => {\n+  const [selected, setSelected] = useState([]);\n+  const [isExpanded, setIsExpanded] = useState(false);\n+  const [parameters, setParameters] = useState([]);\n+\n+  const nullTypes = [null, 'String', 'Boolean', 'Int', 'DateTime'];\n+  const onSelect = (event, selection) => {\n+    if (selected.includes(selection)) {\n+      setSelected(prevState => prevState.filter(item => item !== selection));\n+      const innerText = event.nativeEvent.target.nextSibling.innerText;\n+      const rest = filterColumnSelection(event, innerText);\n+      setParameters(prevState =>\n+        prevState.filter(obj => {\n+          if (!_.isEqual(obj, rest)) {\n+            return obj;\n+          }\n+        })\n+      );\n+    } else {\n+      setSelected(prevState => [...prevState, selection]);\n+      const innerText = event.nativeEvent.target.nextSibling.innerText;\n+      const rest = filterColumnSelection(event, innerText);\n+      setParameters(prevState => [...prevState, rest]);\n+    }\n+  };\n+\n+  const filterColumnSelection = (event, selection) => {\n+    const parent = event.nativeEvent.target.parentElement.parentElement.getAttribute(\n+      'aria-labelledby'\n+    );\n+    let res = {};\n+    const tempParents = parent.split('-');\n+\n+    for (let i = tempParents.length - 1; i >= 0; i--) {\n+      if (i === tempParents.length - 1) {\n+        res = { [tempParents[i]]: [selection] }; // assign the value\n+      } else {\n+        res = { [tempParents[i]]: [res] }; // put the prev object\n+      }\n+    }\n+    return res;\n+  };\n+  const onToggle = _isExpanded => {\n+    setIsExpanded(_isExpanded);\n+  };\n+\n+  const getPicker = useGetPickerQuery({\n+    variables: { columnPickerType }\n+  });\n+\n+  async function generateQuery() {\n+    try {\n+      await axios\n+        .post(\n+          'http://localhost:4000/graphql',\n+          query({\n+            operation: columnPickerType,\n+            fields: parameters\n+          })\n+        )\n+        .then(response => {\n+          setTableLoading(false);\n+          setColumnFilters(response.data.data);\n+          setDisplayTable(true);\n+          return response;\n+        });\n+    } catch (error) {\n+      return error;\n+    }\n+  }\n+\n+  const data = [];\n+  !getPicker.loading &&\n+    getPicker.data.__type &&\n+    getPicker.data.__type.fields.filter(i => {\n+      if (i.type.kind !== 'SCALAR') {\n+        return data.push(i);\n+      }\n+    });\n+  const fetchSchema = option => {\n+    return (\n+      !getQueryTypes.loading &&\n+      getQueryTypes.data.__schema &&\n+      getQueryTypes.data.__schema.queryType.find(item => {\n+        if (item.name === option.type.name) {\n+          return item;\n+        }\n+      })\n+    );\n+  };\n+\n+  let b;\n+  let finalResult: any = [];\n+  let a: any;\n+\n+  const childSelectionItems = (_data, title, ...attr) => {\n+    let nestedTitles = '';\n+    b = _data.map(group => {\n+      const label = title + '>' + attr.join();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09b0832506e2c230094d464772832d596ce9ad8"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUxNjQ5Mw==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r377516493", "createdAt": "2020-02-11T09:22:39Z", "author": {"login": "Sara4994"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerColumnPicker/DomainExplorerColumnPicker.tsx", "diffHunk": "@@ -0,0 +1,239 @@\n+import React, { useState } from 'react';\n+import { useQuery } from '@apollo/react-hooks';\n+import {\n+  Select,\n+  SelectOption,\n+  SelectVariant,\n+  SelectGroup,\n+  Button,\n+  Grid,\n+  GridItem\n+} from '@patternfly/react-core';\n+import { query } from 'gql-query-builder';\n+import axios from 'axios';\n+import _ from 'lodash';\n+import { useGetPickerQuery } from '../../../graphql/types';\n+\n+export interface IOwnProps {\n+  columnPickerType: any;\n+  setColumnFilters: any;\n+  setTableLoading: any;\n+  getQueryTypes: any;\n+  setDisplayTable: any;\n+}\n+\n+const DomainExplorerColumnPicker: React.FC<IOwnProps> = ({\n+  columnPickerType,\n+  setColumnFilters,\n+  setTableLoading,\n+  getQueryTypes,\n+  setDisplayTable\n+}) => {\n+  const [selected, setSelected] = useState([]);\n+  const [isExpanded, setIsExpanded] = useState(false);\n+  const [parameters, setParameters] = useState([]);\n+\n+  const nullTypes = [null, 'String', 'Boolean', 'Int', 'DateTime'];\n+  const onSelect = (event, selection) => {\n+    if (selected.includes(selection)) {\n+      setSelected(prevState => prevState.filter(item => item !== selection));\n+      const innerText = event.nativeEvent.target.nextSibling.innerText;\n+      const rest = filterColumnSelection(event, innerText);\n+      setParameters(prevState =>\n+        prevState.filter(obj => {\n+          if (!_.isEqual(obj, rest)) {\n+            return obj;\n+          }\n+        })\n+      );\n+    } else {\n+      setSelected(prevState => [...prevState, selection]);\n+      const innerText = event.nativeEvent.target.nextSibling.innerText;\n+      const rest = filterColumnSelection(event, innerText);\n+      setParameters(prevState => [...prevState, rest]);\n+    }\n+  };\n+\n+  const filterColumnSelection = (event, selection) => {\n+    const parent = event.nativeEvent.target.parentElement.parentElement.getAttribute(\n+      'aria-labelledby'\n+    );\n+    let res = {};\n+    const tempParents = parent.split('-');\n+\n+    for (let i = tempParents.length - 1; i >= 0; i--) {\n+      if (i === tempParents.length - 1) {\n+        res = { [tempParents[i]]: [selection] }; // assign the value\n+      } else {\n+        res = { [tempParents[i]]: [res] }; // put the prev object\n+      }\n+    }\n+    return res;\n+  };\n+  const onToggle = _isExpanded => {\n+    setIsExpanded(_isExpanded);\n+  };\n+\n+  const getPicker = useGetPickerQuery({\n+    variables: { columnPickerType }\n+  });\n+\n+  async function generateQuery() {\n+    try {\n+      await axios\n+        .post(\n+          'http://localhost:4000/graphql',\n+          query({\n+            operation: columnPickerType,\n+            fields: parameters\n+          })\n+        )\n+        .then(response => {\n+          setTableLoading(false);\n+          setColumnFilters(response.data.data);\n+          setDisplayTable(true);\n+          return response;\n+        });\n+    } catch (error) {\n+      return error;\n+    }\n+  }\n+\n+  const data = [];\n+  !getPicker.loading &&\n+    getPicker.data.__type &&\n+    getPicker.data.__type.fields.filter(i => {\n+      if (i.type.kind !== 'SCALAR') {\n+        return data.push(i);\n+      }\n+    });\n+  const fetchSchema = option => {\n+    return (\n+      !getQueryTypes.loading &&\n+      getQueryTypes.data.__schema &&\n+      getQueryTypes.data.__schema.queryType.find(item => {\n+        if (item.name === option.type.name) {\n+          return item;\n+        }\n+      })\n+    );\n+  };\n+\n+  let b;\n+  let finalResult: any = [];\n+  let a: any;\n+\n+  const childSelectionItems = (_data, title, ...attr) => {\n+    let nestedTitles = '';\n+    b = _data.map(group => {\n+      const label = title + '>' + attr.join();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4NDM3NQ=="}, "originalCommit": {"oid": "c09b0832506e2c230094d464772832d596ce9ad8"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTI5NTk1OnYy", "diffSide": "RIGHT", "path": "packages/management-console/src/components/Organisms/DomainExplorerColumnPicker/DomainExplorerColumnPicker.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODowMzowN1rOFn_2EQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwODowMzowN1rOFn_2EQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzQ4NDgxNw==", "bodyText": "should we create a new query type for this? That would probably avoid having the data index URL in here as well.", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r377484817", "createdAt": "2020-02-11T08:03:07Z", "author": {"login": "cristianonicolai"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerColumnPicker/DomainExplorerColumnPicker.tsx", "diffHunk": "@@ -0,0 +1,239 @@\n+import React, { useState } from 'react';\n+import { useQuery } from '@apollo/react-hooks';\n+import {\n+  Select,\n+  SelectOption,\n+  SelectVariant,\n+  SelectGroup,\n+  Button,\n+  Grid,\n+  GridItem\n+} from '@patternfly/react-core';\n+import { query } from 'gql-query-builder';\n+import axios from 'axios';\n+import _ from 'lodash';\n+import { useGetPickerQuery } from '../../../graphql/types';\n+\n+export interface IOwnProps {\n+  columnPickerType: any;\n+  setColumnFilters: any;\n+  setTableLoading: any;\n+  getQueryTypes: any;\n+  setDisplayTable: any;\n+}\n+\n+const DomainExplorerColumnPicker: React.FC<IOwnProps> = ({\n+  columnPickerType,\n+  setColumnFilters,\n+  setTableLoading,\n+  getQueryTypes,\n+  setDisplayTable\n+}) => {\n+  const [selected, setSelected] = useState([]);\n+  const [isExpanded, setIsExpanded] = useState(false);\n+  const [parameters, setParameters] = useState([]);\n+\n+  const nullTypes = [null, 'String', 'Boolean', 'Int', 'DateTime'];\n+  const onSelect = (event, selection) => {\n+    if (selected.includes(selection)) {\n+      setSelected(prevState => prevState.filter(item => item !== selection));\n+      const innerText = event.nativeEvent.target.nextSibling.innerText;\n+      const rest = filterColumnSelection(event, innerText);\n+      setParameters(prevState =>\n+        prevState.filter(obj => {\n+          if (!_.isEqual(obj, rest)) {\n+            return obj;\n+          }\n+        })\n+      );\n+    } else {\n+      setSelected(prevState => [...prevState, selection]);\n+      const innerText = event.nativeEvent.target.nextSibling.innerText;\n+      const rest = filterColumnSelection(event, innerText);\n+      setParameters(prevState => [...prevState, rest]);\n+    }\n+  };\n+\n+  const filterColumnSelection = (event, selection) => {\n+    const parent = event.nativeEvent.target.parentElement.parentElement.getAttribute(\n+      'aria-labelledby'\n+    );\n+    let res = {};\n+    const tempParents = parent.split('-');\n+\n+    for (let i = tempParents.length - 1; i >= 0; i--) {\n+      if (i === tempParents.length - 1) {\n+        res = { [tempParents[i]]: [selection] }; // assign the value\n+      } else {\n+        res = { [tempParents[i]]: [res] }; // put the prev object\n+      }\n+    }\n+    return res;\n+  };\n+  const onToggle = _isExpanded => {\n+    setIsExpanded(_isExpanded);\n+  };\n+\n+  const getPicker = useGetPickerQuery({\n+    variables: { columnPickerType }\n+  });\n+\n+  async function generateQuery() {\n+    try {\n+      await axios\n+        .post(\n+          'http://localhost:4000/graphql',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c09b0832506e2c230094d464772832d596ce9ad8"}, "originalPosition": 85}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NjU1NjY1OnYy", "diffSide": "RIGHT", "path": "packages/management-console/src/components/Organisms/DomainExplorerColumnPicker/DomainExplorerColumnPicker.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwNTo1MDozMVrOFpsNug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMToyMDo0OVrOFpzf7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI2MDM0Ng==", "bodyText": "perhaps give a more intutive name for variables a and b :)", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r379260346", "createdAt": "2020-02-14T05:50:31Z", "author": {"login": "cristianonicolai"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerColumnPicker/DomainExplorerColumnPicker.tsx", "diffHunk": "@@ -0,0 +1,264 @@\n+import React, { useState, useEffect } from 'react';\n+import {\n+  Select,\n+  SelectOption,\n+  SelectVariant,\n+  SelectGroup,\n+  Button,\n+  Grid,\n+  GridItem\n+} from '@patternfly/react-core';\n+import { query } from 'gql-query-builder';\n+import axios from 'axios';\n+import _ from 'lodash';\n+import { useGetPickerQuery } from '../../../graphql/types';\n+import { useApolloClient } from 'react-apollo';\n+\n+export interface IOwnProps {\n+  columnPickerType: any;\n+  setColumnFilters: any;\n+  setTableLoading: any;\n+  getQueryTypes: any;\n+  setDisplayTable: any;\n+}\n+\n+const DomainExplorerColumnPicker: React.FC<IOwnProps> = ({\n+  columnPickerType,\n+  setColumnFilters,\n+  setTableLoading,\n+  getQueryTypes,\n+  setDisplayTable\n+}) => {\n+  const [selected, setSelected] = useState([]);\n+  const [isExpanded, setIsExpanded] = useState(false);\n+  const [parameters, setParameters] = useState([]);\n+\n+  const nullTypes = [null, 'String', 'Boolean', 'Int', 'DateTime'];\n+\n+  useEffect(() => {\n+    setParameters([]);\n+    setSelected([]);\n+  }, [columnPickerType]);\n+\n+  const onSelect = (event, selection) => {\n+    if (selected.includes(selection)) {\n+      setSelected(prevState => prevState.filter(item => item !== selection));\n+      const innerText = event.nativeEvent.target.nextSibling.innerText;\n+      const rest = filterColumnSelection(event, innerText);\n+      setParameters(prevState =>\n+        prevState.filter(obj => {\n+          if (!_.isEqual(obj, rest)) {\n+            return obj;\n+          }\n+        })\n+      );\n+    } else {\n+      setSelected(prevState => [...prevState, selection]);\n+      const innerText = event.nativeEvent.target.nextSibling.innerText;\n+      const rest = filterColumnSelection(event, innerText);\n+      setParameters(prevState => [...prevState, rest]);\n+    }\n+  };\n+\n+  const filterColumnSelection = (event, selection) => {\n+    const parent = event.nativeEvent.target.parentElement.parentElement.getAttribute(\n+      'aria-labelledby'\n+    );\n+    let res = {};\n+    const tempParents = parent.split('---');\n+\n+    for (let i = tempParents.length - 1; i >= 0; i--) {\n+      if (i === tempParents.length - 1) {\n+        if (tempParents[i] === '-') {\n+          res = selection;\n+        } else {\n+          res = { [tempParents[i]]: [selection] }; // assign the value\n+        }\n+      } else {\n+        res = { [tempParents[i]]: [res] }; // put the prev object\n+      }\n+    }\n+    return res;\n+  };\n+  const onToggle = _isExpanded => {\n+    setIsExpanded(_isExpanded);\n+  };\n+\n+  const getPicker = useGetPickerQuery({\n+    variables: { columnPickerType }\n+  });\n+\n+  async function generateQuery() {\n+    if (columnPickerType) {\n+      try {\n+        await axios\n+          .post(\n+            process.env.KOGITO_DATAINDEX_HTTP_URL + '/graphql',\n+            query({\n+              operation: columnPickerType,\n+              fields: parameters\n+            })\n+          )\n+          .then(response => {\n+            setTableLoading(false);\n+            setColumnFilters(response.data.data);\n+            setDisplayTable(true);\n+            return response;\n+          });\n+      } catch (error) {\n+        return error;\n+      }\n+    }\n+  }\n+\n+  let data = [];\n+  const tempArray = [];\n+  !getPicker.loading &&\n+    getPicker.data.__type &&\n+    getPicker.data.__type.fields.filter(i => {\n+      if (i.type.kind === 'SCALAR') {\n+        tempArray.push(i);\n+      } else {\n+        data.push(i);\n+      }\n+    });\n+  data = tempArray.concat(data);\n+\n+  const fetchSchema = option => {\n+    return (\n+      !getQueryTypes.loading &&\n+      getQueryTypes.data.__schema &&\n+      getQueryTypes.data.__schema.queryType.find(item => {\n+        if (item.name === option.type.name) {\n+          return item;\n+        }\n+      })\n+    );\n+  };\n+\n+  let b;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69c7f0f56f1814487d3e88601a6d3398d52e0354"}, "originalPosition": 139}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM3OTY5NA==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r379379694", "createdAt": "2020-02-14T11:20:49Z", "author": {"login": "Sara4994"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerColumnPicker/DomainExplorerColumnPicker.tsx", "diffHunk": "@@ -0,0 +1,264 @@\n+import React, { useState, useEffect } from 'react';\n+import {\n+  Select,\n+  SelectOption,\n+  SelectVariant,\n+  SelectGroup,\n+  Button,\n+  Grid,\n+  GridItem\n+} from '@patternfly/react-core';\n+import { query } from 'gql-query-builder';\n+import axios from 'axios';\n+import _ from 'lodash';\n+import { useGetPickerQuery } from '../../../graphql/types';\n+import { useApolloClient } from 'react-apollo';\n+\n+export interface IOwnProps {\n+  columnPickerType: any;\n+  setColumnFilters: any;\n+  setTableLoading: any;\n+  getQueryTypes: any;\n+  setDisplayTable: any;\n+}\n+\n+const DomainExplorerColumnPicker: React.FC<IOwnProps> = ({\n+  columnPickerType,\n+  setColumnFilters,\n+  setTableLoading,\n+  getQueryTypes,\n+  setDisplayTable\n+}) => {\n+  const [selected, setSelected] = useState([]);\n+  const [isExpanded, setIsExpanded] = useState(false);\n+  const [parameters, setParameters] = useState([]);\n+\n+  const nullTypes = [null, 'String', 'Boolean', 'Int', 'DateTime'];\n+\n+  useEffect(() => {\n+    setParameters([]);\n+    setSelected([]);\n+  }, [columnPickerType]);\n+\n+  const onSelect = (event, selection) => {\n+    if (selected.includes(selection)) {\n+      setSelected(prevState => prevState.filter(item => item !== selection));\n+      const innerText = event.nativeEvent.target.nextSibling.innerText;\n+      const rest = filterColumnSelection(event, innerText);\n+      setParameters(prevState =>\n+        prevState.filter(obj => {\n+          if (!_.isEqual(obj, rest)) {\n+            return obj;\n+          }\n+        })\n+      );\n+    } else {\n+      setSelected(prevState => [...prevState, selection]);\n+      const innerText = event.nativeEvent.target.nextSibling.innerText;\n+      const rest = filterColumnSelection(event, innerText);\n+      setParameters(prevState => [...prevState, rest]);\n+    }\n+  };\n+\n+  const filterColumnSelection = (event, selection) => {\n+    const parent = event.nativeEvent.target.parentElement.parentElement.getAttribute(\n+      'aria-labelledby'\n+    );\n+    let res = {};\n+    const tempParents = parent.split('---');\n+\n+    for (let i = tempParents.length - 1; i >= 0; i--) {\n+      if (i === tempParents.length - 1) {\n+        if (tempParents[i] === '-') {\n+          res = selection;\n+        } else {\n+          res = { [tempParents[i]]: [selection] }; // assign the value\n+        }\n+      } else {\n+        res = { [tempParents[i]]: [res] }; // put the prev object\n+      }\n+    }\n+    return res;\n+  };\n+  const onToggle = _isExpanded => {\n+    setIsExpanded(_isExpanded);\n+  };\n+\n+  const getPicker = useGetPickerQuery({\n+    variables: { columnPickerType }\n+  });\n+\n+  async function generateQuery() {\n+    if (columnPickerType) {\n+      try {\n+        await axios\n+          .post(\n+            process.env.KOGITO_DATAINDEX_HTTP_URL + '/graphql',\n+            query({\n+              operation: columnPickerType,\n+              fields: parameters\n+            })\n+          )\n+          .then(response => {\n+            setTableLoading(false);\n+            setColumnFilters(response.data.data);\n+            setDisplayTable(true);\n+            return response;\n+          });\n+      } catch (error) {\n+        return error;\n+      }\n+    }\n+  }\n+\n+  let data = [];\n+  const tempArray = [];\n+  !getPicker.loading &&\n+    getPicker.data.__type &&\n+    getPicker.data.__type.fields.filter(i => {\n+      if (i.type.kind === 'SCALAR') {\n+        tempArray.push(i);\n+      } else {\n+        data.push(i);\n+      }\n+    });\n+  data = tempArray.concat(data);\n+\n+  const fetchSchema = option => {\n+    return (\n+      !getQueryTypes.loading &&\n+      getQueryTypes.data.__schema &&\n+      getQueryTypes.data.__schema.queryType.find(item => {\n+        if (item.name === option.type.name) {\n+          return item;\n+        }\n+      })\n+    );\n+  };\n+\n+  let b;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI2MDM0Ng=="}, "originalCommit": {"oid": "69c7f0f56f1814487d3e88601a6d3398d52e0354"}, "originalPosition": 139}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NjU2MTAwOnYy", "diffSide": "RIGHT", "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwNTo1Mzo0MlrOFpsQRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMToyMTowM1rOFpzgSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI2MDk5Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                          Nothing to display\n          \n          \n            \n                          No domain data to display", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r379260997", "createdAt": "2020-02-14T05:53:42Z", "author": {"login": "cristianonicolai"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -0,0 +1,103 @@\n+import React, { useEffect } from 'react';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import {\n+  Title,\n+  EmptyState,\n+  EmptyStateIcon,\n+  EmptyStateBody,\n+  EmptyStateSecondaryActions,\n+  Bullseye,\n+  Button\n+} from '@patternfly/react-core';\n+import { SearchIcon } from '@patternfly/react-icons';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+\n+const DomainExplorerTable = ({ columnFilters, tableLoading, displayTable }) => {\n+  const getKeys = object => {\n+    const iter = (data, k = '') => {\n+      // tslint:disable-next-line: forin\n+      for (const i in data) {\n+        const rest = k.length ? ' > ' + i : i;\n+        if (typeof data[i] === 'object') {\n+          if (!Array.isArray(data[i])) {\n+            iter(data[i], k + rest);\n+          }\n+        } else {\n+          !tempKeys.includes(k + rest) && tempKeys.push(k + rest);\n+          if (rest.hasOwnProperty) {\n+            tempValue.push(data[i]);\n+          }\n+        }\n+      }\n+    };\n+    const tempKeys = [];\n+    const tempValue = [];\n+    iter(object);\n+    return { tempKeys, tempValue };\n+  };\n+  const firstKey = Object.keys(columnFilters)[0];\n+  const tableContent = columnFilters[firstKey];\n+\n+  const keys = [];\n+  const values = [];\n+  if (tableContent) {\n+    const finalResult = tableContent.map(item => getKeys(item));\n+    finalResult.map(result => {\n+      keys.push(result.tempKeys);\n+      values.push({ cells: result.tempValue });\n+    });\n+    const rowObject: any = {};\n+    if (tableLoading) {\n+      rowObject.cells = [\n+        {\n+          props: { colSpan: 8 },\n+          title: (\n+            <Bullseye>\n+              <SpinnerComponent spinnerText=\"Loading Domain Explorer...\" />\n+            </Bullseye>\n+          )\n+        }\n+      ];\n+      values.push(rowObject);\n+    }\n+  }\n+  const finalKeys = keys[0];\n+\n+  const onRowSelect = (event, isSelected, rowId) => {\n+    return null;\n+  };\n+\n+  const onDelete = (type = '', id = '') => {\n+    return null;\n+  };\n+\n+  return (\n+    <React.Fragment>\n+      {displayTable && (\n+        <Table\n+          cells={finalKeys}\n+          rows={values}\n+          aria-label=\"Domain Explorer Table\"\n+        >\n+          <TableHeader />\n+          <TableBody />\n+        </Table>\n+      )}\n+      {!displayTable && (\n+        <Bullseye>\n+          <EmptyState>\n+            <EmptyStateIcon icon={SearchIcon} />\n+            <Title headingLevel=\"h5\" size=\"lg\">\n+              Nothing to display", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69c7f0f56f1814487d3e88601a6d3398d52e0354"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM0NjQ3Nw==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r379346477", "createdAt": "2020-02-14T10:07:04Z", "author": {"login": "Sara4994"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -0,0 +1,103 @@\n+import React, { useEffect } from 'react';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import {\n+  Title,\n+  EmptyState,\n+  EmptyStateIcon,\n+  EmptyStateBody,\n+  EmptyStateSecondaryActions,\n+  Bullseye,\n+  Button\n+} from '@patternfly/react-core';\n+import { SearchIcon } from '@patternfly/react-icons';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+\n+const DomainExplorerTable = ({ columnFilters, tableLoading, displayTable }) => {\n+  const getKeys = object => {\n+    const iter = (data, k = '') => {\n+      // tslint:disable-next-line: forin\n+      for (const i in data) {\n+        const rest = k.length ? ' > ' + i : i;\n+        if (typeof data[i] === 'object') {\n+          if (!Array.isArray(data[i])) {\n+            iter(data[i], k + rest);\n+          }\n+        } else {\n+          !tempKeys.includes(k + rest) && tempKeys.push(k + rest);\n+          if (rest.hasOwnProperty) {\n+            tempValue.push(data[i]);\n+          }\n+        }\n+      }\n+    };\n+    const tempKeys = [];\n+    const tempValue = [];\n+    iter(object);\n+    return { tempKeys, tempValue };\n+  };\n+  const firstKey = Object.keys(columnFilters)[0];\n+  const tableContent = columnFilters[firstKey];\n+\n+  const keys = [];\n+  const values = [];\n+  if (tableContent) {\n+    const finalResult = tableContent.map(item => getKeys(item));\n+    finalResult.map(result => {\n+      keys.push(result.tempKeys);\n+      values.push({ cells: result.tempValue });\n+    });\n+    const rowObject: any = {};\n+    if (tableLoading) {\n+      rowObject.cells = [\n+        {\n+          props: { colSpan: 8 },\n+          title: (\n+            <Bullseye>\n+              <SpinnerComponent spinnerText=\"Loading Domain Explorer...\" />\n+            </Bullseye>\n+          )\n+        }\n+      ];\n+      values.push(rowObject);\n+    }\n+  }\n+  const finalKeys = keys[0];\n+\n+  const onRowSelect = (event, isSelected, rowId) => {\n+    return null;\n+  };\n+\n+  const onDelete = (type = '', id = '') => {\n+    return null;\n+  };\n+\n+  return (\n+    <React.Fragment>\n+      {displayTable && (\n+        <Table\n+          cells={finalKeys}\n+          rows={values}\n+          aria-label=\"Domain Explorer Table\"\n+        >\n+          <TableHeader />\n+          <TableBody />\n+        </Table>\n+      )}\n+      {!displayTable && (\n+        <Bullseye>\n+          <EmptyState>\n+            <EmptyStateIcon icon={SearchIcon} />\n+            <Title headingLevel=\"h5\" size=\"lg\">\n+              Nothing to display", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI2MDk5Nw=="}, "originalCommit": {"oid": "69c7f0f56f1814487d3e88601a6d3398d52e0354"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM3OTc4NA==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r379379784", "createdAt": "2020-02-14T11:21:03Z", "author": {"login": "Sara4994"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -0,0 +1,103 @@\n+import React, { useEffect } from 'react';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import {\n+  Title,\n+  EmptyState,\n+  EmptyStateIcon,\n+  EmptyStateBody,\n+  EmptyStateSecondaryActions,\n+  Bullseye,\n+  Button\n+} from '@patternfly/react-core';\n+import { SearchIcon } from '@patternfly/react-icons';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+\n+const DomainExplorerTable = ({ columnFilters, tableLoading, displayTable }) => {\n+  const getKeys = object => {\n+    const iter = (data, k = '') => {\n+      // tslint:disable-next-line: forin\n+      for (const i in data) {\n+        const rest = k.length ? ' > ' + i : i;\n+        if (typeof data[i] === 'object') {\n+          if (!Array.isArray(data[i])) {\n+            iter(data[i], k + rest);\n+          }\n+        } else {\n+          !tempKeys.includes(k + rest) && tempKeys.push(k + rest);\n+          if (rest.hasOwnProperty) {\n+            tempValue.push(data[i]);\n+          }\n+        }\n+      }\n+    };\n+    const tempKeys = [];\n+    const tempValue = [];\n+    iter(object);\n+    return { tempKeys, tempValue };\n+  };\n+  const firstKey = Object.keys(columnFilters)[0];\n+  const tableContent = columnFilters[firstKey];\n+\n+  const keys = [];\n+  const values = [];\n+  if (tableContent) {\n+    const finalResult = tableContent.map(item => getKeys(item));\n+    finalResult.map(result => {\n+      keys.push(result.tempKeys);\n+      values.push({ cells: result.tempValue });\n+    });\n+    const rowObject: any = {};\n+    if (tableLoading) {\n+      rowObject.cells = [\n+        {\n+          props: { colSpan: 8 },\n+          title: (\n+            <Bullseye>\n+              <SpinnerComponent spinnerText=\"Loading Domain Explorer...\" />\n+            </Bullseye>\n+          )\n+        }\n+      ];\n+      values.push(rowObject);\n+    }\n+  }\n+  const finalKeys = keys[0];\n+\n+  const onRowSelect = (event, isSelected, rowId) => {\n+    return null;\n+  };\n+\n+  const onDelete = (type = '', id = '') => {\n+    return null;\n+  };\n+\n+  return (\n+    <React.Fragment>\n+      {displayTable && (\n+        <Table\n+          cells={finalKeys}\n+          rows={values}\n+          aria-label=\"Domain Explorer Table\"\n+        >\n+          <TableHeader />\n+          <TableBody />\n+        </Table>\n+      )}\n+      {!displayTable && (\n+        <Bullseye>\n+          <EmptyState>\n+            <EmptyStateIcon icon={SearchIcon} />\n+            <Title headingLevel=\"h5\" size=\"lg\">\n+              Nothing to display", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI2MDk5Nw=="}, "originalCommit": {"oid": "69c7f0f56f1814487d3e88601a6d3398d52e0354"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NjU2NTM5OnYy", "diffSide": "RIGHT", "path": "packages/management-console/src/graphql/queries.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwNTo1NjoyOVrOFpsS2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwNTo1NjoyOVrOFpsS2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI2MTY1Nw==", "bodyText": "Perhaps give a more meaningful name for the query like getFieldsFromType?", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r379261657", "createdAt": "2020-02-14T05:56:29Z", "author": {"login": "cristianonicolai"}, "path": "packages/management-console/src/graphql/queries.tsx", "diffHunk": "@@ -78,3 +78,109 @@ const GET_PROCESS_INSTANCE = gql`\n     }\n   }\n `;\n+\n+const GET_PICKER = gql`\n+  query getPicker($columnPickerType: String!) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69c7f0f56f1814487d3e88601a6d3398d52e0354"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NjU2NTgzOnYy", "diffSide": "RIGHT", "path": "packages/management-console/src/graphql/queries.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwNTo1Njo0NlrOFpsTFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMDowNjo1N1rOFpxd9A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI2MTcxNw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              query getPicker($columnPickerType: String!) {\n          \n          \n            \n              query getPicker($type: String!) {", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r379261717", "createdAt": "2020-02-14T05:56:46Z", "author": {"login": "cristianonicolai"}, "path": "packages/management-console/src/graphql/queries.tsx", "diffHunk": "@@ -78,3 +78,109 @@ const GET_PROCESS_INSTANCE = gql`\n     }\n   }\n `;\n+\n+const GET_PICKER = gql`\n+  query getPicker($columnPickerType: String!) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69c7f0f56f1814487d3e88601a6d3398d52e0354"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM0NjQyMA==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r379346420", "createdAt": "2020-02-14T10:06:57Z", "author": {"login": "Sara4994"}, "path": "packages/management-console/src/graphql/queries.tsx", "diffHunk": "@@ -78,3 +78,109 @@ const GET_PROCESS_INSTANCE = gql`\n     }\n   }\n `;\n+\n+const GET_PICKER = gql`\n+  query getPicker($columnPickerType: String!) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI2MTcxNw=="}, "originalCommit": {"oid": "69c7f0f56f1814487d3e88601a6d3398d52e0354"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NjU2NjQ0OnYy", "diffSide": "RIGHT", "path": "packages/management-console/src/graphql/queries.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwNTo1NzoxOVrOFpsTgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMTo0MzozNFrOFp0CBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI2MTgyNA==", "bodyText": "getQueryFields?", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r379261824", "createdAt": "2020-02-14T05:57:19Z", "author": {"login": "cristianonicolai"}, "path": "packages/management-console/src/graphql/queries.tsx", "diffHunk": "@@ -78,3 +78,109 @@ const GET_PROCESS_INSTANCE = gql`\n     }\n   }\n `;\n+\n+const GET_PICKER = gql`\n+  query getPicker($columnPickerType: String!) {\n+    __type(name: $columnPickerType) {\n+      name\n+      fields {\n+        name\n+        type {\n+          name\n+          kind\n+          fields {\n+            name\n+            type {\n+              name\n+              kind\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+`;\n+\n+const GET_QUERY_TYPES = gql`\n+  query getQueryTypes {\n+    __schema {\n+      queryType: types {\n+        name\n+        kind\n+        fields {\n+          name\n+          type {\n+            name\n+            kind\n+          }\n+        }\n+        inputFields {\n+          name\n+          type {\n+            name\n+            kind\n+          }\n+        }\n+      }\n+    }\n+  }\n+`;\n+\n+const GET_QUERY = gql`\n+  query getQuery {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69c7f0f56f1814487d3e88601a6d3398d52e0354"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM4ODQyMA==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r379388420", "createdAt": "2020-02-14T11:43:34Z", "author": {"login": "Sara4994"}, "path": "packages/management-console/src/graphql/queries.tsx", "diffHunk": "@@ -78,3 +78,109 @@ const GET_PROCESS_INSTANCE = gql`\n     }\n   }\n `;\n+\n+const GET_PICKER = gql`\n+  query getPicker($columnPickerType: String!) {\n+    __type(name: $columnPickerType) {\n+      name\n+      fields {\n+        name\n+        type {\n+          name\n+          kind\n+          fields {\n+            name\n+            type {\n+              name\n+              kind\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+`;\n+\n+const GET_QUERY_TYPES = gql`\n+  query getQueryTypes {\n+    __schema {\n+      queryType: types {\n+        name\n+        kind\n+        fields {\n+          name\n+          type {\n+            name\n+            kind\n+          }\n+        }\n+        inputFields {\n+          name\n+          type {\n+            name\n+            kind\n+          }\n+        }\n+      }\n+    }\n+  }\n+`;\n+\n+const GET_QUERY = gql`\n+  query getQuery {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI2MTgyNA=="}, "originalCommit": {"oid": "69c7f0f56f1814487d3e88601a6d3398d52e0354"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NjU2NzA1OnYy", "diffSide": "RIGHT", "path": "packages/management-console/src/graphql/queries.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwNTo1Nzo1MlrOFpsT8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMDoxMzo0MFrOFpxqsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI2MTkzOA==", "bodyText": "getInputFieldsFromQuery?", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r379261938", "createdAt": "2020-02-14T05:57:52Z", "author": {"login": "cristianonicolai"}, "path": "packages/management-console/src/graphql/queries.tsx", "diffHunk": "@@ -78,3 +78,109 @@ const GET_PROCESS_INSTANCE = gql`\n     }\n   }\n `;\n+\n+const GET_PICKER = gql`\n+  query getPicker($columnPickerType: String!) {\n+    __type(name: $columnPickerType) {\n+      name\n+      fields {\n+        name\n+        type {\n+          name\n+          kind\n+          fields {\n+            name\n+            type {\n+              name\n+              kind\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+`;\n+\n+const GET_QUERY_TYPES = gql`\n+  query getQueryTypes {\n+    __schema {\n+      queryType: types {\n+        name\n+        kind\n+        fields {\n+          name\n+          type {\n+            name\n+            kind\n+          }\n+        }\n+        inputFields {\n+          name\n+          type {\n+            name\n+            kind\n+          }\n+        }\n+      }\n+    }\n+  }\n+`;\n+\n+const GET_QUERY = gql`\n+  query getQuery {\n+    __type(name: \"Query\") {\n+      name\n+      fields {\n+        name\n+        args {\n+          name\n+          type {\n+            kind\n+            name\n+          }\n+        }\n+        type {\n+          ofType {\n+            name\n+          }\n+        }\n+      }\n+    }\n+  }\n+`;\n+\n+const GET_SCHEMA = gql`\n+  query getSchema($currentQuery: String!) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69c7f0f56f1814487d3e88601a6d3398d52e0354"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM0OTY4MA==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r379349680", "createdAt": "2020-02-14T10:13:40Z", "author": {"login": "Sara4994"}, "path": "packages/management-console/src/graphql/queries.tsx", "diffHunk": "@@ -78,3 +78,109 @@ const GET_PROCESS_INSTANCE = gql`\n     }\n   }\n `;\n+\n+const GET_PICKER = gql`\n+  query getPicker($columnPickerType: String!) {\n+    __type(name: $columnPickerType) {\n+      name\n+      fields {\n+        name\n+        type {\n+          name\n+          kind\n+          fields {\n+            name\n+            type {\n+              name\n+              kind\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+`;\n+\n+const GET_QUERY_TYPES = gql`\n+  query getQueryTypes {\n+    __schema {\n+      queryType: types {\n+        name\n+        kind\n+        fields {\n+          name\n+          type {\n+            name\n+            kind\n+          }\n+        }\n+        inputFields {\n+          name\n+          type {\n+            name\n+            kind\n+          }\n+        }\n+      }\n+    }\n+  }\n+`;\n+\n+const GET_QUERY = gql`\n+  query getQuery {\n+    __type(name: \"Query\") {\n+      name\n+      fields {\n+        name\n+        args {\n+          name\n+          type {\n+            kind\n+            name\n+          }\n+        }\n+        type {\n+          ofType {\n+            name\n+          }\n+        }\n+      }\n+    }\n+  }\n+`;\n+\n+const GET_SCHEMA = gql`\n+  query getSchema($currentQuery: String!) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI2MTkzOA=="}, "originalCommit": {"oid": "69c7f0f56f1814487d3e88601a6d3398d52e0354"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NjU2NzQ3OnYy", "diffSide": "RIGHT", "path": "packages/management-console/src/graphql/queries.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwNTo1ODoxMFrOFpsUMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMDoxMzozMFrOFpxqXQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI2MjAwMg==", "bodyText": "getInputFieldsFromType?", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r379262002", "createdAt": "2020-02-14T05:58:10Z", "author": {"login": "cristianonicolai"}, "path": "packages/management-console/src/graphql/queries.tsx", "diffHunk": "@@ -78,3 +78,109 @@ const GET_PROCESS_INSTANCE = gql`\n     }\n   }\n `;\n+\n+const GET_PICKER = gql`\n+  query getPicker($columnPickerType: String!) {\n+    __type(name: $columnPickerType) {\n+      name\n+      fields {\n+        name\n+        type {\n+          name\n+          kind\n+          fields {\n+            name\n+            type {\n+              name\n+              kind\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+`;\n+\n+const GET_QUERY_TYPES = gql`\n+  query getQueryTypes {\n+    __schema {\n+      queryType: types {\n+        name\n+        kind\n+        fields {\n+          name\n+          type {\n+            name\n+            kind\n+          }\n+        }\n+        inputFields {\n+          name\n+          type {\n+            name\n+            kind\n+          }\n+        }\n+      }\n+    }\n+  }\n+`;\n+\n+const GET_QUERY = gql`\n+  query getQuery {\n+    __type(name: \"Query\") {\n+      name\n+      fields {\n+        name\n+        args {\n+          name\n+          type {\n+            kind\n+            name\n+          }\n+        }\n+        type {\n+          ofType {\n+            name\n+          }\n+        }\n+      }\n+    }\n+  }\n+`;\n+\n+const GET_SCHEMA = gql`\n+  query getSchema($currentQuery: String!) {\n+    __type(name: $currentQuery) {\n+      name\n+      inputFields {\n+        name\n+        type {\n+          name\n+          kind\n+          inputFields {\n+            name\n+            type {\n+              name\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+`;\n+\n+const GET_TYPES = gql`\n+  query getTypes($currentArgument: String!) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69c7f0f56f1814487d3e88601a6d3398d52e0354"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM0OTU5Nw==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r379349597", "createdAt": "2020-02-14T10:13:30Z", "author": {"login": "Sara4994"}, "path": "packages/management-console/src/graphql/queries.tsx", "diffHunk": "@@ -78,3 +78,109 @@ const GET_PROCESS_INSTANCE = gql`\n     }\n   }\n `;\n+\n+const GET_PICKER = gql`\n+  query getPicker($columnPickerType: String!) {\n+    __type(name: $columnPickerType) {\n+      name\n+      fields {\n+        name\n+        type {\n+          name\n+          kind\n+          fields {\n+            name\n+            type {\n+              name\n+              kind\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+`;\n+\n+const GET_QUERY_TYPES = gql`\n+  query getQueryTypes {\n+    __schema {\n+      queryType: types {\n+        name\n+        kind\n+        fields {\n+          name\n+          type {\n+            name\n+            kind\n+          }\n+        }\n+        inputFields {\n+          name\n+          type {\n+            name\n+            kind\n+          }\n+        }\n+      }\n+    }\n+  }\n+`;\n+\n+const GET_QUERY = gql`\n+  query getQuery {\n+    __type(name: \"Query\") {\n+      name\n+      fields {\n+        name\n+        args {\n+          name\n+          type {\n+            kind\n+            name\n+          }\n+        }\n+        type {\n+          ofType {\n+            name\n+          }\n+        }\n+      }\n+    }\n+  }\n+`;\n+\n+const GET_SCHEMA = gql`\n+  query getSchema($currentQuery: String!) {\n+    __type(name: $currentQuery) {\n+      name\n+      inputFields {\n+        name\n+        type {\n+          name\n+          kind\n+          inputFields {\n+            name\n+            type {\n+              name\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+`;\n+\n+const GET_TYPES = gql`\n+  query getTypes($currentArgument: String!) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI2MjAwMg=="}, "originalCommit": {"oid": "69c7f0f56f1814487d3e88601a6d3398d52e0354"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NjU2NzcyOnYy", "diffSide": "RIGHT", "path": "packages/management-console/src/graphql/queries.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwNTo1ODoyNFrOFpsUXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQxMTo0Mzo1MVrOFp0Chw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI2MjA0NQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n              query getTypes($currentArgument: String!) {\n          \n          \n            \n              query getTypes($type: String!) {", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r379262045", "createdAt": "2020-02-14T05:58:24Z", "author": {"login": "cristianonicolai"}, "path": "packages/management-console/src/graphql/queries.tsx", "diffHunk": "@@ -78,3 +78,109 @@ const GET_PROCESS_INSTANCE = gql`\n     }\n   }\n `;\n+\n+const GET_PICKER = gql`\n+  query getPicker($columnPickerType: String!) {\n+    __type(name: $columnPickerType) {\n+      name\n+      fields {\n+        name\n+        type {\n+          name\n+          kind\n+          fields {\n+            name\n+            type {\n+              name\n+              kind\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+`;\n+\n+const GET_QUERY_TYPES = gql`\n+  query getQueryTypes {\n+    __schema {\n+      queryType: types {\n+        name\n+        kind\n+        fields {\n+          name\n+          type {\n+            name\n+            kind\n+          }\n+        }\n+        inputFields {\n+          name\n+          type {\n+            name\n+            kind\n+          }\n+        }\n+      }\n+    }\n+  }\n+`;\n+\n+const GET_QUERY = gql`\n+  query getQuery {\n+    __type(name: \"Query\") {\n+      name\n+      fields {\n+        name\n+        args {\n+          name\n+          type {\n+            kind\n+            name\n+          }\n+        }\n+        type {\n+          ofType {\n+            name\n+          }\n+        }\n+      }\n+    }\n+  }\n+`;\n+\n+const GET_SCHEMA = gql`\n+  query getSchema($currentQuery: String!) {\n+    __type(name: $currentQuery) {\n+      name\n+      inputFields {\n+        name\n+        type {\n+          name\n+          kind\n+          inputFields {\n+            name\n+            type {\n+              name\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+`;\n+\n+const GET_TYPES = gql`\n+  query getTypes($currentArgument: String!) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69c7f0f56f1814487d3e88601a6d3398d52e0354"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTM4ODU1MQ==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r379388551", "createdAt": "2020-02-14T11:43:51Z", "author": {"login": "Sara4994"}, "path": "packages/management-console/src/graphql/queries.tsx", "diffHunk": "@@ -78,3 +78,109 @@ const GET_PROCESS_INSTANCE = gql`\n     }\n   }\n `;\n+\n+const GET_PICKER = gql`\n+  query getPicker($columnPickerType: String!) {\n+    __type(name: $columnPickerType) {\n+      name\n+      fields {\n+        name\n+        type {\n+          name\n+          kind\n+          fields {\n+            name\n+            type {\n+              name\n+              kind\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+`;\n+\n+const GET_QUERY_TYPES = gql`\n+  query getQueryTypes {\n+    __schema {\n+      queryType: types {\n+        name\n+        kind\n+        fields {\n+          name\n+          type {\n+            name\n+            kind\n+          }\n+        }\n+        inputFields {\n+          name\n+          type {\n+            name\n+            kind\n+          }\n+        }\n+      }\n+    }\n+  }\n+`;\n+\n+const GET_QUERY = gql`\n+  query getQuery {\n+    __type(name: \"Query\") {\n+      name\n+      fields {\n+        name\n+        args {\n+          name\n+          type {\n+            kind\n+            name\n+          }\n+        }\n+        type {\n+          ofType {\n+            name\n+          }\n+        }\n+      }\n+    }\n+  }\n+`;\n+\n+const GET_SCHEMA = gql`\n+  query getSchema($currentQuery: String!) {\n+    __type(name: $currentQuery) {\n+      name\n+      inputFields {\n+        name\n+        type {\n+          name\n+          kind\n+          inputFields {\n+            name\n+            type {\n+              name\n+            }\n+          }\n+        }\n+      }\n+    }\n+  }\n+`;\n+\n+const GET_TYPES = gql`\n+  query getTypes($currentArgument: String!) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI2MjA0NQ=="}, "originalCommit": {"oid": "69c7f0f56f1814487d3e88601a6d3398d52e0354"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NjY2NDQ0OnYy", "diffSide": "RIGHT", "path": "packages/management-console/src/components/Organisms/DomainExplorerColumnPicker/DomainExplorerColumnPicker.tsx", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwNzowNDo0NlrOFptO6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xNFQwNzowNDo0NlrOFptO6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTI3NzAzNA==", "bodyText": "review if apollo client can be used instead.", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r379277034", "createdAt": "2020-02-14T07:04:46Z", "author": {"login": "cristianonicolai"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerColumnPicker/DomainExplorerColumnPicker.tsx", "diffHunk": "@@ -0,0 +1,264 @@\n+import React, { useState, useEffect } from 'react';\n+import {\n+  Select,\n+  SelectOption,\n+  SelectVariant,\n+  SelectGroup,\n+  Button,\n+  Grid,\n+  GridItem\n+} from '@patternfly/react-core';\n+import { query } from 'gql-query-builder';\n+import axios from 'axios';\n+import _ from 'lodash';\n+import { useGetPickerQuery } from '../../../graphql/types';\n+import { useApolloClient } from 'react-apollo';\n+\n+export interface IOwnProps {\n+  columnPickerType: any;\n+  setColumnFilters: any;\n+  setTableLoading: any;\n+  getQueryTypes: any;\n+  setDisplayTable: any;\n+}\n+\n+const DomainExplorerColumnPicker: React.FC<IOwnProps> = ({\n+  columnPickerType,\n+  setColumnFilters,\n+  setTableLoading,\n+  getQueryTypes,\n+  setDisplayTable\n+}) => {\n+  const [selected, setSelected] = useState([]);\n+  const [isExpanded, setIsExpanded] = useState(false);\n+  const [parameters, setParameters] = useState([]);\n+\n+  const nullTypes = [null, 'String', 'Boolean', 'Int', 'DateTime'];\n+\n+  useEffect(() => {\n+    setParameters([]);\n+    setSelected([]);\n+  }, [columnPickerType]);\n+\n+  const onSelect = (event, selection) => {\n+    if (selected.includes(selection)) {\n+      setSelected(prevState => prevState.filter(item => item !== selection));\n+      const innerText = event.nativeEvent.target.nextSibling.innerText;\n+      const rest = filterColumnSelection(event, innerText);\n+      setParameters(prevState =>\n+        prevState.filter(obj => {\n+          if (!_.isEqual(obj, rest)) {\n+            return obj;\n+          }\n+        })\n+      );\n+    } else {\n+      setSelected(prevState => [...prevState, selection]);\n+      const innerText = event.nativeEvent.target.nextSibling.innerText;\n+      const rest = filterColumnSelection(event, innerText);\n+      setParameters(prevState => [...prevState, rest]);\n+    }\n+  };\n+\n+  const filterColumnSelection = (event, selection) => {\n+    const parent = event.nativeEvent.target.parentElement.parentElement.getAttribute(\n+      'aria-labelledby'\n+    );\n+    let res = {};\n+    const tempParents = parent.split('---');\n+\n+    for (let i = tempParents.length - 1; i >= 0; i--) {\n+      if (i === tempParents.length - 1) {\n+        if (tempParents[i] === '-') {\n+          res = selection;\n+        } else {\n+          res = { [tempParents[i]]: [selection] }; // assign the value\n+        }\n+      } else {\n+        res = { [tempParents[i]]: [res] }; // put the prev object\n+      }\n+    }\n+    return res;\n+  };\n+  const onToggle = _isExpanded => {\n+    setIsExpanded(_isExpanded);\n+  };\n+\n+  const getPicker = useGetPickerQuery({\n+    variables: { columnPickerType }\n+  });\n+\n+  async function generateQuery() {\n+    if (columnPickerType) {\n+      try {\n+        await axios\n+          .post(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "69c7f0f56f1814487d3e88601a6d3398d52e0354"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzIzMjg5OnYy", "diffSide": "RIGHT", "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNTowNjozNFrOFqnmow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxODowMTowMFrOFqsiWA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIzMzM3OQ==", "bodyText": "I suggest adding a Card component around the Bullseye, which will make the white background to match the table. Also, I suggest some wording changes:\n        <Card component={'div'}>\n          <CardBody>\n            <Bullseye>\n              <EmptyState>\n                <EmptyStateIcon icon={SearchIcon} />\n                <Title headingLevel=\"h5\" size=\"lg\">\n                  No domain data to display\n                </Title>\n                <EmptyStateBody>\n                  To see content, select a domain from the dropdown, and then select the columns to view.\n                </EmptyStateBody>\n              </EmptyState>\n            </Bullseye>\n          </CardBody>\n        </Card>", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r380233379", "createdAt": "2020-02-17T15:06:34Z", "author": {"login": "srambach"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -0,0 +1,112 @@\n+import React, { useState, useEffect } from 'react';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import {\n+  Title,\n+  EmptyState,\n+  EmptyStateIcon,\n+  EmptyStateBody,\n+  EmptyStateSecondaryActions,\n+  Bullseye,\n+  Button\n+} from '@patternfly/react-core';\n+import { SearchIcon } from '@patternfly/react-icons';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+\n+const DomainExplorerTable = ({\n+  columnFilters,\n+  tableLoading,\n+  displayTable,\n+  cols,\n+  setDisplayTable\n+}) => {\n+  useEffect(() => {\n+    setDisplayTable(false);\n+  }, [cols]);\n+  const getKeys = object => {\n+    const iter = (data, k = '') => {\n+      // tslint:disable-next-line: forin\n+      for (const i in data) {\n+        const rest = k.length ? ' / ' + i : i;\n+        if (typeof data[i] === 'object') {\n+          if (!Array.isArray(data[i])) {\n+            iter(data[i], k + rest);\n+          }\n+        } else {\n+          !tempKeys.includes(k + rest) && tempKeys.push(k + rest);\n+          if (rest.hasOwnProperty) {\n+            tempValue.push(data[i].toString());\n+          }\n+        }\n+      }\n+    };\n+    const tempKeys = [];\n+    const tempValue = [];\n+    iter(object);\n+    return { tempKeys, tempValue };\n+  };\n+  const firstKey = Object.keys(columnFilters)[0];\n+  const tableContent = columnFilters[firstKey];\n+\n+  const keys = [];\n+  const values = [];\n+  if (tableContent) {\n+    const finalResult = tableContent.map(item => getKeys(item));\n+    finalResult.map(result => {\n+      keys.push(result.tempKeys);\n+      values.push({ cells: result.tempValue });\n+    });\n+    const rowObject: any = {};\n+    if (tableLoading) {\n+      rowObject.cells = [\n+        {\n+          props: { colSpan: 8 },\n+          title: (\n+            <Bullseye>\n+              <SpinnerComponent spinnerText=\"Loading Domain Explorer...\" />\n+            </Bullseye>\n+          )\n+        }\n+      ];\n+      values.push(rowObject);\n+    }\n+  }\n+  const finalKeys = keys[0];\n+\n+  const onRowSelect = (event, isSelected, rowId) => {\n+    return null;\n+  };\n+\n+  const onDelete = (type = '', id = '') => {\n+    return null;\n+  };\n+\n+  return (\n+    <React.Fragment>\n+      {displayTable && (\n+        <Table\n+          cells={finalKeys}\n+          rows={values}\n+          aria-label=\"Domain Explorer Table\"\n+        >\n+          <TableHeader />\n+          <TableBody />\n+        </Table>\n+      )}\n+      {!displayTable && (\n+        <Bullseye>\n+          <EmptyState>\n+            <EmptyStateIcon icon={SearchIcon} />\n+            <Title headingLevel=\"h5\" size=\"lg\">\n+              No domain data to display\n+            </Title>\n+            <EmptyStateBody>\n+              Select a Domain from dropdown to see content\n+            </EmptyStateBody>\n+          </EmptyState>\n+        </Bullseye>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf157cb73d6a348858f64d0202fdc3f12460a942"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMxNDIwMA==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r380314200", "createdAt": "2020-02-17T18:01:00Z", "author": {"login": "Sara4994"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -0,0 +1,112 @@\n+import React, { useState, useEffect } from 'react';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import {\n+  Title,\n+  EmptyState,\n+  EmptyStateIcon,\n+  EmptyStateBody,\n+  EmptyStateSecondaryActions,\n+  Bullseye,\n+  Button\n+} from '@patternfly/react-core';\n+import { SearchIcon } from '@patternfly/react-icons';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+\n+const DomainExplorerTable = ({\n+  columnFilters,\n+  tableLoading,\n+  displayTable,\n+  cols,\n+  setDisplayTable\n+}) => {\n+  useEffect(() => {\n+    setDisplayTable(false);\n+  }, [cols]);\n+  const getKeys = object => {\n+    const iter = (data, k = '') => {\n+      // tslint:disable-next-line: forin\n+      for (const i in data) {\n+        const rest = k.length ? ' / ' + i : i;\n+        if (typeof data[i] === 'object') {\n+          if (!Array.isArray(data[i])) {\n+            iter(data[i], k + rest);\n+          }\n+        } else {\n+          !tempKeys.includes(k + rest) && tempKeys.push(k + rest);\n+          if (rest.hasOwnProperty) {\n+            tempValue.push(data[i].toString());\n+          }\n+        }\n+      }\n+    };\n+    const tempKeys = [];\n+    const tempValue = [];\n+    iter(object);\n+    return { tempKeys, tempValue };\n+  };\n+  const firstKey = Object.keys(columnFilters)[0];\n+  const tableContent = columnFilters[firstKey];\n+\n+  const keys = [];\n+  const values = [];\n+  if (tableContent) {\n+    const finalResult = tableContent.map(item => getKeys(item));\n+    finalResult.map(result => {\n+      keys.push(result.tempKeys);\n+      values.push({ cells: result.tempValue });\n+    });\n+    const rowObject: any = {};\n+    if (tableLoading) {\n+      rowObject.cells = [\n+        {\n+          props: { colSpan: 8 },\n+          title: (\n+            <Bullseye>\n+              <SpinnerComponent spinnerText=\"Loading Domain Explorer...\" />\n+            </Bullseye>\n+          )\n+        }\n+      ];\n+      values.push(rowObject);\n+    }\n+  }\n+  const finalKeys = keys[0];\n+\n+  const onRowSelect = (event, isSelected, rowId) => {\n+    return null;\n+  };\n+\n+  const onDelete = (type = '', id = '') => {\n+    return null;\n+  };\n+\n+  return (\n+    <React.Fragment>\n+      {displayTable && (\n+        <Table\n+          cells={finalKeys}\n+          rows={values}\n+          aria-label=\"Domain Explorer Table\"\n+        >\n+          <TableHeader />\n+          <TableBody />\n+        </Table>\n+      )}\n+      {!displayTable && (\n+        <Bullseye>\n+          <EmptyState>\n+            <EmptyStateIcon icon={SearchIcon} />\n+            <Title headingLevel=\"h5\" size=\"lg\">\n+              No domain data to display\n+            </Title>\n+            <EmptyStateBody>\n+              Select a Domain from dropdown to see content\n+            </EmptyStateBody>\n+          </EmptyState>\n+        </Bullseye>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDIzMzM3OQ=="}, "originalCommit": {"oid": "cf157cb73d6a348858f64d0202fdc3f12460a942"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzI4NjM4OnYy", "diffSide": "RIGHT", "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNToyMTo1NlrOFqoHJw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxODowNTozNlrOFqsngA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0MTcwMw==", "bodyText": "I think this is unused, so it can be removed", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r380241703", "createdAt": "2020-02-17T15:21:56Z", "author": {"login": "srambach"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -0,0 +1,112 @@\n+import React, { useState, useEffect } from 'react';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import {\n+  Title,\n+  EmptyState,\n+  EmptyStateIcon,\n+  EmptyStateBody,\n+  EmptyStateSecondaryActions,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf157cb73d6a348858f64d0202fdc3f12460a942"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMxNTUyMA==", "bodyText": "Removed EmptyStateSecondaryActions, other things are used", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r380315520", "createdAt": "2020-02-17T18:05:36Z", "author": {"login": "Sara4994"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -0,0 +1,112 @@\n+import React, { useState, useEffect } from 'react';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import {\n+  Title,\n+  EmptyState,\n+  EmptyStateIcon,\n+  EmptyStateBody,\n+  EmptyStateSecondaryActions,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0MTcwMw=="}, "originalCommit": {"oid": "cf157cb73d6a348858f64d0202fdc3f12460a942"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzI4ODA1OnYy", "diffSide": "RIGHT", "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNToyMjoyN1rOFqoIPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxODowNDo1NFrOFqsmsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0MTk4MQ==", "bodyText": "This also looks like it's not used here, so it can be removed", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r380241981", "createdAt": "2020-02-17T15:22:27Z", "author": {"login": "srambach"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -0,0 +1,112 @@\n+import React, { useState, useEffect } from 'react';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import {\n+  Title,\n+  EmptyState,\n+  EmptyStateIcon,\n+  EmptyStateBody,\n+  EmptyStateSecondaryActions,\n+  Bullseye,\n+  Button", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf157cb73d6a348858f64d0202fdc3f12460a942"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMxNTMxMg==", "bodyText": "Removed Button and EmptyStateSecondaryActions... Other things are used", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r380315312", "createdAt": "2020-02-17T18:04:54Z", "author": {"login": "Sara4994"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -0,0 +1,112 @@\n+import React, { useState, useEffect } from 'react';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import {\n+  Title,\n+  EmptyState,\n+  EmptyStateIcon,\n+  EmptyStateBody,\n+  EmptyStateSecondaryActions,\n+  Bullseye,\n+  Button", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI0MTk4MQ=="}, "originalCommit": {"oid": "cf157cb73d6a348858f64d0202fdc3f12460a942"}, "originalPosition": 10}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzM3MTgxOnYy", "diffSide": "RIGHT", "path": "packages/management-console/src/components/Templates/DomainExplorerPage/DomainExplorerPage.css", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNTo0Njo1MlrOFqo7ng==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNTo0Njo1MlrOFqo7ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI1NTEzNA==", "bodyText": "Let's start using a modified BEM naming system similar to Patternfly's. (let's discuss specifics in chat)\nSo for now, let's name this --kogito-runtime-tooling--table-container\nAnd, I think we need overflow-x here, not y, so that we ensure a horizontal scroll when needed.", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r380255134", "createdAt": "2020-02-17T15:46:52Z", "author": {"login": "srambach"}, "path": "packages/management-console/src/components/Templates/DomainExplorerPage/DomainExplorerPage.css", "diffHunk": "@@ -0,0 +1,5 @@\n+.table-OverFlow {\n+    overflow-y: auto;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf157cb73d6a348858f64d0202fdc3f12460a942"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzQwMzcyOnYy", "diffSide": "RIGHT", "path": "packages/management-console/src/components/Templates/DomainExplorerPage/DomainExplorerPage.css", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNTo1NjoxMlrOFqpO3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxODowMjo1NlrOFqskig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI2MDA2MQ==", "bodyText": "This will apply to every PF table on the page, which right now is just one, but this isn't really good practice to rely on. So a better way would be to add another class to that table, say .kogito-runtime-tooling--domain-explorer__table and then we can apply this style just to that class.\nAlso, even though it's just one attribute, I'd put the min-width:10em; on its own line.\n.kogito-runtime-tooling--domain-explorer__table td {\n  min-width: 10em;\n}", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r380260061", "createdAt": "2020-02-17T15:56:12Z", "author": {"login": "srambach"}, "path": "packages/management-console/src/components/Templates/DomainExplorerPage/DomainExplorerPage.css", "diffHunk": "@@ -0,0 +1,5 @@\n+.table-OverFlow {\n+    overflow-y: auto;\n+}\n+\n+table.pf-c-table td {min-width: 10em;}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf157cb73d6a348858f64d0202fdc3f12460a942"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMxNDc2Mg==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r380314762", "createdAt": "2020-02-17T18:02:56Z", "author": {"login": "Sara4994"}, "path": "packages/management-console/src/components/Templates/DomainExplorerPage/DomainExplorerPage.css", "diffHunk": "@@ -0,0 +1,5 @@\n+.table-OverFlow {\n+    overflow-y: auto;\n+}\n+\n+table.pf-c-table td {min-width: 10em;}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI2MDA2MQ=="}, "originalCommit": {"oid": "cf157cb73d6a348858f64d0202fdc3f12460a942"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1MzQyNzc1OnYy", "diffSide": "RIGHT", "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxNjowMzoxNVrOFqpdTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xN1QxODowNDoxM1rOFqsmBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI2Mzc1Ng==", "bodyText": "(See comment on the CSS file)\nAdd className=\"kogito-runtime-tooling--domain-explorer__table\" to define a new class for styling the cells inside.", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r380263756", "createdAt": "2020-02-17T16:03:15Z", "author": {"login": "srambach"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -0,0 +1,112 @@\n+import React, { useState, useEffect } from 'react';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import {\n+  Title,\n+  EmptyState,\n+  EmptyStateIcon,\n+  EmptyStateBody,\n+  EmptyStateSecondaryActions,\n+  Bullseye,\n+  Button\n+} from '@patternfly/react-core';\n+import { SearchIcon } from '@patternfly/react-icons';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+\n+const DomainExplorerTable = ({\n+  columnFilters,\n+  tableLoading,\n+  displayTable,\n+  cols,\n+  setDisplayTable\n+}) => {\n+  useEffect(() => {\n+    setDisplayTable(false);\n+  }, [cols]);\n+  const getKeys = object => {\n+    const iter = (data, k = '') => {\n+      // tslint:disable-next-line: forin\n+      for (const i in data) {\n+        const rest = k.length ? ' / ' + i : i;\n+        if (typeof data[i] === 'object') {\n+          if (!Array.isArray(data[i])) {\n+            iter(data[i], k + rest);\n+          }\n+        } else {\n+          !tempKeys.includes(k + rest) && tempKeys.push(k + rest);\n+          if (rest.hasOwnProperty) {\n+            tempValue.push(data[i].toString());\n+          }\n+        }\n+      }\n+    };\n+    const tempKeys = [];\n+    const tempValue = [];\n+    iter(object);\n+    return { tempKeys, tempValue };\n+  };\n+  const firstKey = Object.keys(columnFilters)[0];\n+  const tableContent = columnFilters[firstKey];\n+\n+  const keys = [];\n+  const values = [];\n+  if (tableContent) {\n+    const finalResult = tableContent.map(item => getKeys(item));\n+    finalResult.map(result => {\n+      keys.push(result.tempKeys);\n+      values.push({ cells: result.tempValue });\n+    });\n+    const rowObject: any = {};\n+    if (tableLoading) {\n+      rowObject.cells = [\n+        {\n+          props: { colSpan: 8 },\n+          title: (\n+            <Bullseye>\n+              <SpinnerComponent spinnerText=\"Loading Domain Explorer...\" />\n+            </Bullseye>\n+          )\n+        }\n+      ];\n+      values.push(rowObject);\n+    }\n+  }\n+  const finalKeys = keys[0];\n+\n+  const onRowSelect = (event, isSelected, rowId) => {\n+    return null;\n+  };\n+\n+  const onDelete = (type = '', id = '') => {\n+    return null;\n+  };\n+\n+  return (\n+    <React.Fragment>\n+      {displayTable && (\n+        <Table\n+          cells={finalKeys}\n+          rows={values}\n+          aria-label=\"Domain Explorer Table\"\n+        >", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf157cb73d6a348858f64d0202fdc3f12460a942"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDMxNTE0Mw==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r380315143", "createdAt": "2020-02-17T18:04:13Z", "author": {"login": "Sara4994"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -0,0 +1,112 @@\n+import React, { useState, useEffect } from 'react';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import {\n+  Title,\n+  EmptyState,\n+  EmptyStateIcon,\n+  EmptyStateBody,\n+  EmptyStateSecondaryActions,\n+  Bullseye,\n+  Button\n+} from '@patternfly/react-core';\n+import { SearchIcon } from '@patternfly/react-icons';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+\n+const DomainExplorerTable = ({\n+  columnFilters,\n+  tableLoading,\n+  displayTable,\n+  cols,\n+  setDisplayTable\n+}) => {\n+  useEffect(() => {\n+    setDisplayTable(false);\n+  }, [cols]);\n+  const getKeys = object => {\n+    const iter = (data, k = '') => {\n+      // tslint:disable-next-line: forin\n+      for (const i in data) {\n+        const rest = k.length ? ' / ' + i : i;\n+        if (typeof data[i] === 'object') {\n+          if (!Array.isArray(data[i])) {\n+            iter(data[i], k + rest);\n+          }\n+        } else {\n+          !tempKeys.includes(k + rest) && tempKeys.push(k + rest);\n+          if (rest.hasOwnProperty) {\n+            tempValue.push(data[i].toString());\n+          }\n+        }\n+      }\n+    };\n+    const tempKeys = [];\n+    const tempValue = [];\n+    iter(object);\n+    return { tempKeys, tempValue };\n+  };\n+  const firstKey = Object.keys(columnFilters)[0];\n+  const tableContent = columnFilters[firstKey];\n+\n+  const keys = [];\n+  const values = [];\n+  if (tableContent) {\n+    const finalResult = tableContent.map(item => getKeys(item));\n+    finalResult.map(result => {\n+      keys.push(result.tempKeys);\n+      values.push({ cells: result.tempValue });\n+    });\n+    const rowObject: any = {};\n+    if (tableLoading) {\n+      rowObject.cells = [\n+        {\n+          props: { colSpan: 8 },\n+          title: (\n+            <Bullseye>\n+              <SpinnerComponent spinnerText=\"Loading Domain Explorer...\" />\n+            </Bullseye>\n+          )\n+        }\n+      ];\n+      values.push(rowObject);\n+    }\n+  }\n+  const finalKeys = keys[0];\n+\n+  const onRowSelect = (event, isSelected, rowId) => {\n+    return null;\n+  };\n+\n+  const onDelete = (type = '', id = '') => {\n+    return null;\n+  };\n+\n+  return (\n+    <React.Fragment>\n+      {displayTable && (\n+        <Table\n+          cells={finalKeys}\n+          rows={values}\n+          aria-label=\"Domain Explorer Table\"\n+        >", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDI2Mzc1Ng=="}, "originalCommit": {"oid": "cf157cb73d6a348858f64d0202fdc3f12460a942"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzcwMDg3OnYy", "diffSide": "RIGHT", "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDo1MDoyMFrOFrR7Qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDo1NDo0MlrOFrSD_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkyNjc4Ng==", "bodyText": "Change to\n     values.push({ cells: result.tempValue, rowKey: Math.random().toString() });", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r380926786", "createdAt": "2020-02-18T20:50:20Z", "author": {"login": "srambach"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -0,0 +1,121 @@\n+import React, { useState, useEffect } from 'react';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import {\n+  Title,\n+  EmptyState,\n+  EmptyStateIcon,\n+  EmptyStateBody,\n+  Bullseye,\n+  Card,\n+  CardBody\n+} from '@patternfly/react-core';\n+import './DomainExplorerTable.css';\n+import { SearchIcon } from '@patternfly/react-icons';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+\n+const DomainExplorerTable = ({\n+  columnFilters,\n+  tableLoading,\n+  displayTable,\n+  cols,\n+  setDisplayTable\n+}) => {\n+  // useEffect(() => {\n+  //   setDisplayTable(false);\n+  // }, [cols]);\n+  const getKeys = object => {\n+    const iter = (data, k = '') => {\n+      // tslint:disable-next-line: forin\n+      for (const i in data) {\n+        const rest = k.length ? ' / ' + i : i;\n+\n+        if (typeof data[i] === 'object') {\n+          if (!Array.isArray(data[i])) {\n+            iter(data[i], k + rest);\n+          }\n+        } else {\n+          if (rest !== '__typename' && !rest.match('/ __typename')) {\n+            !tempKeys.includes(k + rest) && tempKeys.push(k + rest);\n+            if (rest.hasOwnProperty) {\n+              tempValue.push(data[i].toString());\n+            }\n+          }\n+        }\n+      }\n+    };\n+    const tempKeys = [];\n+    const tempValue = [];\n+    iter(object);\n+    return { tempKeys, tempValue };\n+  };\n+  const firstKey = Object.keys(columnFilters)[0];\n+  const tableContent = columnFilters[firstKey];\n+\n+  const keys = [];\n+  const values = [];\n+  if (tableContent) {\n+    const finalResult = tableContent.map(item => getKeys(item));\n+    finalResult.map(result => {\n+      keys.push(result.tempKeys);\n+      values.push({ cells: result.tempValue, id: Math.random().toString() });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56eb111cdefb4ad3ab1b48a08a6d85ccce5c1c6d"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkyOTAyMw==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r380929023", "createdAt": "2020-02-18T20:54:42Z", "author": {"login": "Sara4994"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -0,0 +1,121 @@\n+import React, { useState, useEffect } from 'react';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import {\n+  Title,\n+  EmptyState,\n+  EmptyStateIcon,\n+  EmptyStateBody,\n+  Bullseye,\n+  Card,\n+  CardBody\n+} from '@patternfly/react-core';\n+import './DomainExplorerTable.css';\n+import { SearchIcon } from '@patternfly/react-icons';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+\n+const DomainExplorerTable = ({\n+  columnFilters,\n+  tableLoading,\n+  displayTable,\n+  cols,\n+  setDisplayTable\n+}) => {\n+  // useEffect(() => {\n+  //   setDisplayTable(false);\n+  // }, [cols]);\n+  const getKeys = object => {\n+    const iter = (data, k = '') => {\n+      // tslint:disable-next-line: forin\n+      for (const i in data) {\n+        const rest = k.length ? ' / ' + i : i;\n+\n+        if (typeof data[i] === 'object') {\n+          if (!Array.isArray(data[i])) {\n+            iter(data[i], k + rest);\n+          }\n+        } else {\n+          if (rest !== '__typename' && !rest.match('/ __typename')) {\n+            !tempKeys.includes(k + rest) && tempKeys.push(k + rest);\n+            if (rest.hasOwnProperty) {\n+              tempValue.push(data[i].toString());\n+            }\n+          }\n+        }\n+      }\n+    };\n+    const tempKeys = [];\n+    const tempValue = [];\n+    iter(object);\n+    return { tempKeys, tempValue };\n+  };\n+  const firstKey = Object.keys(columnFilters)[0];\n+  const tableContent = columnFilters[firstKey];\n+\n+  const keys = [];\n+  const values = [];\n+  if (tableContent) {\n+    const finalResult = tableContent.map(item => getKeys(item));\n+    finalResult.map(result => {\n+      keys.push(result.tempKeys);\n+      values.push({ cells: result.tempValue, id: Math.random().toString() });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkyNjc4Ng=="}, "originalCommit": {"oid": "56eb111cdefb4ad3ab1b48a08a6d85ccce5c1c6d"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzcwMTYyOnYy", "diffSide": "RIGHT", "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDo1MDo0MFrOFrR70A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQyMDo1NDozNFrOFrSDww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkyNjkyOA==", "bodyText": "Change to\n         <TableBody rowKey=\"rowKey\" />", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r380926928", "createdAt": "2020-02-18T20:50:40Z", "author": {"login": "srambach"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -0,0 +1,121 @@\n+import React, { useState, useEffect } from 'react';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import {\n+  Title,\n+  EmptyState,\n+  EmptyStateIcon,\n+  EmptyStateBody,\n+  Bullseye,\n+  Card,\n+  CardBody\n+} from '@patternfly/react-core';\n+import './DomainExplorerTable.css';\n+import { SearchIcon } from '@patternfly/react-icons';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+\n+const DomainExplorerTable = ({\n+  columnFilters,\n+  tableLoading,\n+  displayTable,\n+  cols,\n+  setDisplayTable\n+}) => {\n+  // useEffect(() => {\n+  //   setDisplayTable(false);\n+  // }, [cols]);\n+  const getKeys = object => {\n+    const iter = (data, k = '') => {\n+      // tslint:disable-next-line: forin\n+      for (const i in data) {\n+        const rest = k.length ? ' / ' + i : i;\n+\n+        if (typeof data[i] === 'object') {\n+          if (!Array.isArray(data[i])) {\n+            iter(data[i], k + rest);\n+          }\n+        } else {\n+          if (rest !== '__typename' && !rest.match('/ __typename')) {\n+            !tempKeys.includes(k + rest) && tempKeys.push(k + rest);\n+            if (rest.hasOwnProperty) {\n+              tempValue.push(data[i].toString());\n+            }\n+          }\n+        }\n+      }\n+    };\n+    const tempKeys = [];\n+    const tempValue = [];\n+    iter(object);\n+    return { tempKeys, tempValue };\n+  };\n+  const firstKey = Object.keys(columnFilters)[0];\n+  const tableContent = columnFilters[firstKey];\n+\n+  const keys = [];\n+  const values = [];\n+  if (tableContent) {\n+    const finalResult = tableContent.map(item => getKeys(item));\n+    finalResult.map(result => {\n+      keys.push(result.tempKeys);\n+      values.push({ cells: result.tempValue, id: Math.random().toString() });\n+    });\n+    const rowObject: any = {};\n+    if (tableLoading) {\n+      rowObject.cells = [\n+        {\n+          props: { colSpan: 8 },\n+          title: (\n+            <Bullseye>\n+              <SpinnerComponent spinnerText=\"Loading Domain Explorer...\" />\n+            </Bullseye>\n+          )\n+        }\n+      ];\n+      values.push(rowObject);\n+    }\n+  }\n+  const finalKeys = keys[0];\n+\n+  const onRowSelect = (event, isSelected, rowId) => {\n+    return null;\n+  };\n+\n+  const onDelete = (type = '', id = '') => {\n+    return null;\n+  };\n+\n+  return (\n+    <React.Fragment>\n+      {displayTable && (\n+        <Table\n+          cells={finalKeys}\n+          rows={values}\n+          aria-label=\"Domain Explorer Table\"\n+          className=\"kogito-management-console--domain-explorer__table\"\n+        >\n+          <TableHeader />\n+          <TableBody rowKey={'iqu911'} />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "56eb111cdefb4ad3ab1b48a08a6d85ccce5c1c6d"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkyODk2Mw==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r380928963", "createdAt": "2020-02-18T20:54:34Z", "author": {"login": "Sara4994"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -0,0 +1,121 @@\n+import React, { useState, useEffect } from 'react';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import {\n+  Title,\n+  EmptyState,\n+  EmptyStateIcon,\n+  EmptyStateBody,\n+  Bullseye,\n+  Card,\n+  CardBody\n+} from '@patternfly/react-core';\n+import './DomainExplorerTable.css';\n+import { SearchIcon } from '@patternfly/react-icons';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+\n+const DomainExplorerTable = ({\n+  columnFilters,\n+  tableLoading,\n+  displayTable,\n+  cols,\n+  setDisplayTable\n+}) => {\n+  // useEffect(() => {\n+  //   setDisplayTable(false);\n+  // }, [cols]);\n+  const getKeys = object => {\n+    const iter = (data, k = '') => {\n+      // tslint:disable-next-line: forin\n+      for (const i in data) {\n+        const rest = k.length ? ' / ' + i : i;\n+\n+        if (typeof data[i] === 'object') {\n+          if (!Array.isArray(data[i])) {\n+            iter(data[i], k + rest);\n+          }\n+        } else {\n+          if (rest !== '__typename' && !rest.match('/ __typename')) {\n+            !tempKeys.includes(k + rest) && tempKeys.push(k + rest);\n+            if (rest.hasOwnProperty) {\n+              tempValue.push(data[i].toString());\n+            }\n+          }\n+        }\n+      }\n+    };\n+    const tempKeys = [];\n+    const tempValue = [];\n+    iter(object);\n+    return { tempKeys, tempValue };\n+  };\n+  const firstKey = Object.keys(columnFilters)[0];\n+  const tableContent = columnFilters[firstKey];\n+\n+  const keys = [];\n+  const values = [];\n+  if (tableContent) {\n+    const finalResult = tableContent.map(item => getKeys(item));\n+    finalResult.map(result => {\n+      keys.push(result.tempKeys);\n+      values.push({ cells: result.tempValue, id: Math.random().toString() });\n+    });\n+    const rowObject: any = {};\n+    if (tableLoading) {\n+      rowObject.cells = [\n+        {\n+          props: { colSpan: 8 },\n+          title: (\n+            <Bullseye>\n+              <SpinnerComponent spinnerText=\"Loading Domain Explorer...\" />\n+            </Bullseye>\n+          )\n+        }\n+      ];\n+      values.push(rowObject);\n+    }\n+  }\n+  const finalKeys = keys[0];\n+\n+  const onRowSelect = (event, isSelected, rowId) => {\n+    return null;\n+  };\n+\n+  const onDelete = (type = '', id = '') => {\n+    return null;\n+  };\n+\n+  return (\n+    <React.Fragment>\n+      {displayTable && (\n+        <Table\n+          cells={finalKeys}\n+          rows={values}\n+          aria-label=\"Domain Explorer Table\"\n+          className=\"kogito-management-console--domain-explorer__table\"\n+        >\n+          <TableHeader />\n+          <TableBody rowKey={'iqu911'} />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDkyNjkyOA=="}, "originalCommit": {"oid": "56eb111cdefb4ad3ab1b48a08a6d85ccce5c1c6d"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDYxODU0OnYy", "diffSide": "RIGHT", "path": "packages/management-console/src/components/Organisms/DomainExplorerColumnPicker/DomainExplorerColumnPicker.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoxOToxN1rOFrtxcA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyMjowOFrOFrt5Sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4MzAyNA==", "bodyText": "Sentence case - use Apply columns :-D", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r381383024", "createdAt": "2020-02-19T16:19:17Z", "author": {"login": "srambach"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerColumnPicker/DomainExplorerColumnPicker.tsx", "diffHunk": "@@ -0,0 +1,277 @@\n+import React, { useState } from 'react';\n+import {\n+  Select,\n+  SelectOption,\n+  SelectVariant,\n+  SelectGroup,\n+  Button\n+} from '@patternfly/react-core';\n+import { query } from 'gql-query-builder';\n+import _ from 'lodash';\n+import gql from 'graphql-tag';\n+import { useGetColumnPickerAttributesQuery } from '../../../graphql/types';\n+import { useApolloClient } from 'react-apollo';\n+\n+export interface IOwnProps {\n+  columnPickerType: any;\n+  setColumnFilters: any;\n+  setTableLoading: any;\n+  getQueryTypes: any;\n+  setDisplayTable: any;\n+  parameters: any;\n+  setParameters: any;\n+  selected: any;\n+  setSelected: any;\n+}\n+\n+const DomainExplorerColumnPicker: React.FC<IOwnProps> = ({\n+  columnPickerType,\n+  setColumnFilters,\n+  setTableLoading,\n+  getQueryTypes,\n+  setDisplayTable,\n+  parameters,\n+  setParameters,\n+  selected,\n+  setSelected\n+}) => {\n+  const [isExpanded, setIsExpanded] = useState(false);\n+\n+  const nullTypes = [null, 'String', 'Boolean', 'Int', 'DateTime'];\n+  const client = useApolloClient();\n+\n+  const onSelect = (event, selection) => {\n+    if (selected.includes(selection)) {\n+      setSelected(prevState => prevState.filter(item => item !== selection));\n+      const innerText = event.nativeEvent.target.nextSibling.innerText;\n+      const rest = filterColumnSelection(event, innerText);\n+      setParameters(prevState =>\n+        prevState.filter(obj => {\n+          if (!_.isEqual(obj, rest)) {\n+            return obj;\n+          }\n+        })\n+      );\n+    } else {\n+      setSelected(prevState => [...prevState, selection]);\n+      const innerText = event.nativeEvent.target.nextSibling.innerText;\n+      const rest = filterColumnSelection(event, innerText);\n+      setParameters(prevState => [...prevState, rest]);\n+    }\n+  };\n+\n+  const filterColumnSelection = (event, selection) => {\n+    const parent = event.nativeEvent.target.parentElement.parentElement.getAttribute(\n+      'aria-labelledby'\n+    );\n+    let res = {};\n+    const tempParents = parent.split('---');\n+\n+    for (let i = tempParents.length - 1; i >= 0; i--) {\n+      if (i === tempParents.length - 1) {\n+        if (tempParents[i] === '-') {\n+          res = selection;\n+        } else {\n+          res = { [tempParents[i]]: [selection] }; // assign the value\n+        }\n+      } else {\n+        res = { [tempParents[i]]: [res] }; // put the prev object\n+      }\n+    }\n+    return res;\n+  };\n+  const onToggle = _isExpanded => {\n+    setIsExpanded(_isExpanded);\n+  };\n+\n+  const getPicker = useGetColumnPickerAttributesQuery({\n+    variables: { columnPickerType }\n+  });\n+\n+  async function generateQuery() {\n+    if (columnPickerType && parameters.length > 0) {\n+      const Query = query({\n+        operation: columnPickerType,\n+        fields: parameters\n+      });\n+\n+      try {\n+        await client\n+          .query({\n+            query: gql`\n+              ${Query.query}\n+            `\n+          })\n+          .then(response => {\n+            setTableLoading(false);\n+            setColumnFilters(response.data);\n+            setDisplayTable(true);\n+            return response;\n+          });\n+      } catch (error) {\n+        return error;\n+      }\n+    } else {\n+      setDisplayTable(false);\n+    }\n+  }\n+\n+  let data = [];\n+  const tempArray = [];\n+  !getPicker.loading &&\n+    getPicker.data.__type &&\n+    getPicker.data.__type.fields.filter(i => {\n+      if (i.type.kind === 'SCALAR') {\n+        tempArray.push(i);\n+      } else {\n+        data.push(i);\n+      }\n+    });\n+  data = tempArray.concat(data);\n+\n+  const fetchSchema = option => {\n+    return (\n+      !getQueryTypes.loading &&\n+      getQueryTypes.data.__schema &&\n+      getQueryTypes.data.__schema.queryType.find(item => {\n+        if (item.name === option.type.name) {\n+          return item;\n+        }\n+      })\n+    );\n+  };\n+\n+  let childItems;\n+  let finalResult: any = [];\n+  let parentItems: any;\n+\n+  const childSelectionItems = (_data, title, ...attr) => {\n+    let nestedTitles = '';\n+    childItems = _data.map(group => {\n+      const label = title + ' / ' + attr.join();\n+      const childEle = (\n+        <SelectGroup\n+          label={label.replace(/\\,/g, '')}\n+          key={Math.random()}\n+          id={group.name}\n+          value={title + group.name}\n+        >\n+          {group.fields\n+            .filter((item, _index) => {\n+              if (!nullTypes.includes(item.type.name)) {\n+                const tempData = [];\n+                const n = fetchSchema(item);\n+                tempData.push(n);\n+                nestedTitles = nestedTitles + ' / ' + item.name;\n+                childSelectionItems(tempData, title, attr, nestedTitles);\n+              } else {\n+                return item;\n+              }\n+            })\n+            .map(item => (\n+              <SelectOption\n+                key={Math.random()}\n+                value={item.name + title + group.name}\n+              >\n+                {item.name}\n+              </SelectOption>\n+            ))}\n+        </SelectGroup>\n+      );\n+      return childEle;\n+    });\n+    finalResult.push(childItems);\n+  };\n+  const child = [];\n+  const selectionItems = _data => {\n+    parentItems =\n+      !getPicker.loading &&\n+      _data\n+        .filter((group, index) => {\n+          if (group.type.kind !== 'SCALAR') {\n+            return group;\n+          } else {\n+            child.push(<SelectOption key={group.name} value={group.name} />);\n+          }\n+        })\n+        .map((group, index) => {\n+          let ele;\n+          ele = (\n+            <SelectGroup\n+              label={group.name}\n+              key={index}\n+              id={group.name}\n+              value={group.name}\n+            >\n+              {group.type.fields &&\n+                group.type.fields\n+                  .filter((item, _index) => {\n+                    if (!nullTypes.includes(item.type.name)) {\n+                      const tempData = [];\n+                      const _v = fetchSchema(item);\n+                      tempData.push(_v);\n+                      childSelectionItems(tempData, group.name, item.name);\n+                    } else {\n+                      if (item.type.kind !== 'LIST') {\n+                        return item;\n+                      }\n+                    }\n+                  })\n+                  .map((item, _index) => (\n+                    <SelectOption key={_index} value={item.name + group.name}>\n+                      {item.name}\n+                    </SelectOption>\n+                  ))}\n+            </SelectGroup>\n+          );\n+\n+          !finalResult.includes(ele) && finalResult.push(ele);\n+        });\n+  };\n+\n+  columnPickerType && selectionItems(data);\n+  const rootElement: any = (\n+    <SelectGroup label=\" \" key={Math.random()} id=\"\" value=\" \">\n+      {child}\n+    </SelectGroup>\n+  );\n+  finalResult = finalResult.flat();\n+  finalResult.unshift(rootElement);\n+\n+  function getAllChilds(arr, comp) {\n+    const unique = arr\n+      .map(e => e[comp])\n+      .map((e, i, final) => final.indexOf(e) === i && i)\n+      .filter(e => arr[e])\n+      .map(e => arr[e]);\n+\n+    return unique;\n+  }\n+  return (\n+    <React.Fragment>\n+      {!getPicker.loading && columnPickerType && (\n+        <>\n+          <Select\n+            variant={SelectVariant.checkbox}\n+            aria-label=\"Select Input\"\n+            onToggle={onToggle}\n+            onSelect={onSelect}\n+            selections={selected}\n+            isExpanded={isExpanded}\n+            placeholderText=\"Pick Columns\"\n+            ariaLabelledBy=\"Column Picker dropdown\"\n+            isGrouped\n+            maxHeight=\"60vh\"\n+          >\n+            {getAllChilds(finalResult, 'props')}\n+          </Select>\n+          <Button variant=\"primary\" onClick={generateQuery}>\n+            Apply Columns", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd3094b0f2a52a0037773645d93c1a4be7880c66"}, "originalPosition": 269}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NTAzNA==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r381385034", "createdAt": "2020-02-19T16:22:08Z", "author": {"login": "Sara4994"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerColumnPicker/DomainExplorerColumnPicker.tsx", "diffHunk": "@@ -0,0 +1,277 @@\n+import React, { useState } from 'react';\n+import {\n+  Select,\n+  SelectOption,\n+  SelectVariant,\n+  SelectGroup,\n+  Button\n+} from '@patternfly/react-core';\n+import { query } from 'gql-query-builder';\n+import _ from 'lodash';\n+import gql from 'graphql-tag';\n+import { useGetColumnPickerAttributesQuery } from '../../../graphql/types';\n+import { useApolloClient } from 'react-apollo';\n+\n+export interface IOwnProps {\n+  columnPickerType: any;\n+  setColumnFilters: any;\n+  setTableLoading: any;\n+  getQueryTypes: any;\n+  setDisplayTable: any;\n+  parameters: any;\n+  setParameters: any;\n+  selected: any;\n+  setSelected: any;\n+}\n+\n+const DomainExplorerColumnPicker: React.FC<IOwnProps> = ({\n+  columnPickerType,\n+  setColumnFilters,\n+  setTableLoading,\n+  getQueryTypes,\n+  setDisplayTable,\n+  parameters,\n+  setParameters,\n+  selected,\n+  setSelected\n+}) => {\n+  const [isExpanded, setIsExpanded] = useState(false);\n+\n+  const nullTypes = [null, 'String', 'Boolean', 'Int', 'DateTime'];\n+  const client = useApolloClient();\n+\n+  const onSelect = (event, selection) => {\n+    if (selected.includes(selection)) {\n+      setSelected(prevState => prevState.filter(item => item !== selection));\n+      const innerText = event.nativeEvent.target.nextSibling.innerText;\n+      const rest = filterColumnSelection(event, innerText);\n+      setParameters(prevState =>\n+        prevState.filter(obj => {\n+          if (!_.isEqual(obj, rest)) {\n+            return obj;\n+          }\n+        })\n+      );\n+    } else {\n+      setSelected(prevState => [...prevState, selection]);\n+      const innerText = event.nativeEvent.target.nextSibling.innerText;\n+      const rest = filterColumnSelection(event, innerText);\n+      setParameters(prevState => [...prevState, rest]);\n+    }\n+  };\n+\n+  const filterColumnSelection = (event, selection) => {\n+    const parent = event.nativeEvent.target.parentElement.parentElement.getAttribute(\n+      'aria-labelledby'\n+    );\n+    let res = {};\n+    const tempParents = parent.split('---');\n+\n+    for (let i = tempParents.length - 1; i >= 0; i--) {\n+      if (i === tempParents.length - 1) {\n+        if (tempParents[i] === '-') {\n+          res = selection;\n+        } else {\n+          res = { [tempParents[i]]: [selection] }; // assign the value\n+        }\n+      } else {\n+        res = { [tempParents[i]]: [res] }; // put the prev object\n+      }\n+    }\n+    return res;\n+  };\n+  const onToggle = _isExpanded => {\n+    setIsExpanded(_isExpanded);\n+  };\n+\n+  const getPicker = useGetColumnPickerAttributesQuery({\n+    variables: { columnPickerType }\n+  });\n+\n+  async function generateQuery() {\n+    if (columnPickerType && parameters.length > 0) {\n+      const Query = query({\n+        operation: columnPickerType,\n+        fields: parameters\n+      });\n+\n+      try {\n+        await client\n+          .query({\n+            query: gql`\n+              ${Query.query}\n+            `\n+          })\n+          .then(response => {\n+            setTableLoading(false);\n+            setColumnFilters(response.data);\n+            setDisplayTable(true);\n+            return response;\n+          });\n+      } catch (error) {\n+        return error;\n+      }\n+    } else {\n+      setDisplayTable(false);\n+    }\n+  }\n+\n+  let data = [];\n+  const tempArray = [];\n+  !getPicker.loading &&\n+    getPicker.data.__type &&\n+    getPicker.data.__type.fields.filter(i => {\n+      if (i.type.kind === 'SCALAR') {\n+        tempArray.push(i);\n+      } else {\n+        data.push(i);\n+      }\n+    });\n+  data = tempArray.concat(data);\n+\n+  const fetchSchema = option => {\n+    return (\n+      !getQueryTypes.loading &&\n+      getQueryTypes.data.__schema &&\n+      getQueryTypes.data.__schema.queryType.find(item => {\n+        if (item.name === option.type.name) {\n+          return item;\n+        }\n+      })\n+    );\n+  };\n+\n+  let childItems;\n+  let finalResult: any = [];\n+  let parentItems: any;\n+\n+  const childSelectionItems = (_data, title, ...attr) => {\n+    let nestedTitles = '';\n+    childItems = _data.map(group => {\n+      const label = title + ' / ' + attr.join();\n+      const childEle = (\n+        <SelectGroup\n+          label={label.replace(/\\,/g, '')}\n+          key={Math.random()}\n+          id={group.name}\n+          value={title + group.name}\n+        >\n+          {group.fields\n+            .filter((item, _index) => {\n+              if (!nullTypes.includes(item.type.name)) {\n+                const tempData = [];\n+                const n = fetchSchema(item);\n+                tempData.push(n);\n+                nestedTitles = nestedTitles + ' / ' + item.name;\n+                childSelectionItems(tempData, title, attr, nestedTitles);\n+              } else {\n+                return item;\n+              }\n+            })\n+            .map(item => (\n+              <SelectOption\n+                key={Math.random()}\n+                value={item.name + title + group.name}\n+              >\n+                {item.name}\n+              </SelectOption>\n+            ))}\n+        </SelectGroup>\n+      );\n+      return childEle;\n+    });\n+    finalResult.push(childItems);\n+  };\n+  const child = [];\n+  const selectionItems = _data => {\n+    parentItems =\n+      !getPicker.loading &&\n+      _data\n+        .filter((group, index) => {\n+          if (group.type.kind !== 'SCALAR') {\n+            return group;\n+          } else {\n+            child.push(<SelectOption key={group.name} value={group.name} />);\n+          }\n+        })\n+        .map((group, index) => {\n+          let ele;\n+          ele = (\n+            <SelectGroup\n+              label={group.name}\n+              key={index}\n+              id={group.name}\n+              value={group.name}\n+            >\n+              {group.type.fields &&\n+                group.type.fields\n+                  .filter((item, _index) => {\n+                    if (!nullTypes.includes(item.type.name)) {\n+                      const tempData = [];\n+                      const _v = fetchSchema(item);\n+                      tempData.push(_v);\n+                      childSelectionItems(tempData, group.name, item.name);\n+                    } else {\n+                      if (item.type.kind !== 'LIST') {\n+                        return item;\n+                      }\n+                    }\n+                  })\n+                  .map((item, _index) => (\n+                    <SelectOption key={_index} value={item.name + group.name}>\n+                      {item.name}\n+                    </SelectOption>\n+                  ))}\n+            </SelectGroup>\n+          );\n+\n+          !finalResult.includes(ele) && finalResult.push(ele);\n+        });\n+  };\n+\n+  columnPickerType && selectionItems(data);\n+  const rootElement: any = (\n+    <SelectGroup label=\" \" key={Math.random()} id=\"\" value=\" \">\n+      {child}\n+    </SelectGroup>\n+  );\n+  finalResult = finalResult.flat();\n+  finalResult.unshift(rootElement);\n+\n+  function getAllChilds(arr, comp) {\n+    const unique = arr\n+      .map(e => e[comp])\n+      .map((e, i, final) => final.indexOf(e) === i && i)\n+      .filter(e => arr[e])\n+      .map(e => arr[e]);\n+\n+    return unique;\n+  }\n+  return (\n+    <React.Fragment>\n+      {!getPicker.loading && columnPickerType && (\n+        <>\n+          <Select\n+            variant={SelectVariant.checkbox}\n+            aria-label=\"Select Input\"\n+            onToggle={onToggle}\n+            onSelect={onSelect}\n+            selections={selected}\n+            isExpanded={isExpanded}\n+            placeholderText=\"Pick Columns\"\n+            ariaLabelledBy=\"Column Picker dropdown\"\n+            isGrouped\n+            maxHeight=\"60vh\"\n+          >\n+            {getAllChilds(finalResult, 'props')}\n+          </Select>\n+          <Button variant=\"primary\" onClick={generateQuery}>\n+            Apply Columns", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4MzAyNA=="}, "originalCommit": {"oid": "dd3094b0f2a52a0037773645d93c1a4be7880c66"}, "originalPosition": 269}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDYyMDY0OnYy", "diffSide": "RIGHT", "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoxOTo0M1rOFrtytg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyMjoxM1rOFrt5gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4MzM1MA==", "bodyText": "Sentence case Loading domain explorer", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r381383350", "createdAt": "2020-02-19T16:19:43Z", "author": {"login": "srambach"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -0,0 +1,115 @@\n+import React, { useState, useEffect } from 'react';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import {\n+  Title,\n+  EmptyState,\n+  EmptyStateIcon,\n+  EmptyStateBody,\n+  Bullseye,\n+  Card,\n+  CardBody\n+} from '@patternfly/react-core';\n+import './DomainExplorerTable.css';\n+import { SearchIcon } from '@patternfly/react-icons';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+\n+const DomainExplorerTable = ({ columnFilters, tableLoading, displayTable }) => {\n+  const getKeys = object => {\n+    const iter = (data, k = '') => {\n+      // tslint:disable-next-line: forin\n+      for (const i in data) {\n+        const rest = k.length ? ' / ' + i : i;\n+\n+        if (typeof data[i] === 'object') {\n+          if (!Array.isArray(data[i])) {\n+            iter(data[i], k + rest);\n+          }\n+        } else {\n+          if (rest !== '__typename' && !rest.match('/ __typename')) {\n+            !tempKeys.includes(k + rest) && tempKeys.push(k + rest);\n+            if (rest.hasOwnProperty) {\n+              tempValue.push(data[i].toString());\n+            }\n+          }\n+        }\n+      }\n+    };\n+    const tempKeys = [];\n+    const tempValue = [];\n+    iter(object);\n+    return { tempKeys, tempValue };\n+  };\n+  const firstKey = Object.keys(columnFilters)[0];\n+  const tableContent = columnFilters[firstKey];\n+\n+  const keys = [];\n+  const values = [];\n+  if (tableContent) {\n+    const finalResult = tableContent.map(item => getKeys(item));\n+    finalResult.map(result => {\n+      keys.push(result.tempKeys);\n+      values.push({\n+        cells: result.tempValue,\n+        rowKey: Math.random().toString()\n+      });\n+    });\n+    const rowObject: any = {};\n+    if (tableLoading) {\n+      rowObject.cells = [\n+        {\n+          props: { colSpan: 8 },\n+          title: (\n+            <Bullseye>\n+              <SpinnerComponent spinnerText=\"Loading Domain Explorer...\" />", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd3094b0f2a52a0037773645d93c1a4be7880c66"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NTA4OQ==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r381385089", "createdAt": "2020-02-19T16:22:13Z", "author": {"login": "Sara4994"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -0,0 +1,115 @@\n+import React, { useState, useEffect } from 'react';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import {\n+  Title,\n+  EmptyState,\n+  EmptyStateIcon,\n+  EmptyStateBody,\n+  Bullseye,\n+  Card,\n+  CardBody\n+} from '@patternfly/react-core';\n+import './DomainExplorerTable.css';\n+import { SearchIcon } from '@patternfly/react-icons';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+\n+const DomainExplorerTable = ({ columnFilters, tableLoading, displayTable }) => {\n+  const getKeys = object => {\n+    const iter = (data, k = '') => {\n+      // tslint:disable-next-line: forin\n+      for (const i in data) {\n+        const rest = k.length ? ' / ' + i : i;\n+\n+        if (typeof data[i] === 'object') {\n+          if (!Array.isArray(data[i])) {\n+            iter(data[i], k + rest);\n+          }\n+        } else {\n+          if (rest !== '__typename' && !rest.match('/ __typename')) {\n+            !tempKeys.includes(k + rest) && tempKeys.push(k + rest);\n+            if (rest.hasOwnProperty) {\n+              tempValue.push(data[i].toString());\n+            }\n+          }\n+        }\n+      }\n+    };\n+    const tempKeys = [];\n+    const tempValue = [];\n+    iter(object);\n+    return { tempKeys, tempValue };\n+  };\n+  const firstKey = Object.keys(columnFilters)[0];\n+  const tableContent = columnFilters[firstKey];\n+\n+  const keys = [];\n+  const values = [];\n+  if (tableContent) {\n+    const finalResult = tableContent.map(item => getKeys(item));\n+    finalResult.map(result => {\n+      keys.push(result.tempKeys);\n+      values.push({\n+        cells: result.tempValue,\n+        rowKey: Math.random().toString()\n+      });\n+    });\n+    const rowObject: any = {};\n+    if (tableLoading) {\n+      rowObject.cells = [\n+        {\n+          props: { colSpan: 8 },\n+          title: (\n+            <Bullseye>\n+              <SpinnerComponent spinnerText=\"Loading Domain Explorer...\" />", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4MzM1MA=="}, "originalCommit": {"oid": "dd3094b0f2a52a0037773645d93c1a4be7880c66"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDYyNTMwOnYy", "diffSide": "RIGHT", "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyMDo0NlrOFrt1sQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyMzo1NlrOFrt-FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NDExMw==", "bodyText": "Sentence case, and \"the\" \ud83d\ude38   Select a domain from the dropdown to see content", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r381384113", "createdAt": "2020-02-19T16:20:46Z", "author": {"login": "srambach"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -0,0 +1,115 @@\n+import React, { useState, useEffect } from 'react';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import {\n+  Title,\n+  EmptyState,\n+  EmptyStateIcon,\n+  EmptyStateBody,\n+  Bullseye,\n+  Card,\n+  CardBody\n+} from '@patternfly/react-core';\n+import './DomainExplorerTable.css';\n+import { SearchIcon } from '@patternfly/react-icons';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+\n+const DomainExplorerTable = ({ columnFilters, tableLoading, displayTable }) => {\n+  const getKeys = object => {\n+    const iter = (data, k = '') => {\n+      // tslint:disable-next-line: forin\n+      for (const i in data) {\n+        const rest = k.length ? ' / ' + i : i;\n+\n+        if (typeof data[i] === 'object') {\n+          if (!Array.isArray(data[i])) {\n+            iter(data[i], k + rest);\n+          }\n+        } else {\n+          if (rest !== '__typename' && !rest.match('/ __typename')) {\n+            !tempKeys.includes(k + rest) && tempKeys.push(k + rest);\n+            if (rest.hasOwnProperty) {\n+              tempValue.push(data[i].toString());\n+            }\n+          }\n+        }\n+      }\n+    };\n+    const tempKeys = [];\n+    const tempValue = [];\n+    iter(object);\n+    return { tempKeys, tempValue };\n+  };\n+  const firstKey = Object.keys(columnFilters)[0];\n+  const tableContent = columnFilters[firstKey];\n+\n+  const keys = [];\n+  const values = [];\n+  if (tableContent) {\n+    const finalResult = tableContent.map(item => getKeys(item));\n+    finalResult.map(result => {\n+      keys.push(result.tempKeys);\n+      values.push({\n+        cells: result.tempValue,\n+        rowKey: Math.random().toString()\n+      });\n+    });\n+    const rowObject: any = {};\n+    if (tableLoading) {\n+      rowObject.cells = [\n+        {\n+          props: { colSpan: 8 },\n+          title: (\n+            <Bullseye>\n+              <SpinnerComponent spinnerText=\"Loading Domain Explorer...\" />\n+            </Bullseye>\n+          )\n+        }\n+      ];\n+      values.push(rowObject);\n+    }\n+  }\n+  const finalKeys = keys[0];\n+\n+  const onRowSelect = (event, isSelected, rowId) => {\n+    return null;\n+  };\n+\n+  const onDelete = (type = '', id = '') => {\n+    return null;\n+  };\n+\n+  return (\n+    <React.Fragment>\n+      {displayTable && (\n+        <Table\n+          cells={finalKeys}\n+          rows={values}\n+          aria-label=\"Domain Explorer Table\"\n+          className=\"kogito-management-console--domain-explorer__table\"\n+        >\n+          <TableHeader />\n+          <TableBody rowKey=\"rowKey\" />\n+        </Table>\n+      )}\n+      {!displayTable && (\n+        <Card component={'div'}>\n+          <CardBody>\n+            <Bullseye>\n+              <EmptyState>\n+                <EmptyStateIcon icon={SearchIcon} />\n+                <Title headingLevel=\"h5\" size=\"lg\">\n+                  No domain data to display\n+                </Title>\n+                <EmptyStateBody>\n+                  Select a Domain from dropdown to see content", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd3094b0f2a52a0037773645d93c1a4be7880c66"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NjI2MA==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r381386260", "createdAt": "2020-02-19T16:23:56Z", "author": {"login": "Sara4994"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -0,0 +1,115 @@\n+import React, { useState, useEffect } from 'react';\n+import { Table, TableHeader, TableBody } from '@patternfly/react-table';\n+import {\n+  Title,\n+  EmptyState,\n+  EmptyStateIcon,\n+  EmptyStateBody,\n+  Bullseye,\n+  Card,\n+  CardBody\n+} from '@patternfly/react-core';\n+import './DomainExplorerTable.css';\n+import { SearchIcon } from '@patternfly/react-icons';\n+import SpinnerComponent from '../../Atoms/SpinnerComponent/SpinnerComponent';\n+\n+const DomainExplorerTable = ({ columnFilters, tableLoading, displayTable }) => {\n+  const getKeys = object => {\n+    const iter = (data, k = '') => {\n+      // tslint:disable-next-line: forin\n+      for (const i in data) {\n+        const rest = k.length ? ' / ' + i : i;\n+\n+        if (typeof data[i] === 'object') {\n+          if (!Array.isArray(data[i])) {\n+            iter(data[i], k + rest);\n+          }\n+        } else {\n+          if (rest !== '__typename' && !rest.match('/ __typename')) {\n+            !tempKeys.includes(k + rest) && tempKeys.push(k + rest);\n+            if (rest.hasOwnProperty) {\n+              tempValue.push(data[i].toString());\n+            }\n+          }\n+        }\n+      }\n+    };\n+    const tempKeys = [];\n+    const tempValue = [];\n+    iter(object);\n+    return { tempKeys, tempValue };\n+  };\n+  const firstKey = Object.keys(columnFilters)[0];\n+  const tableContent = columnFilters[firstKey];\n+\n+  const keys = [];\n+  const values = [];\n+  if (tableContent) {\n+    const finalResult = tableContent.map(item => getKeys(item));\n+    finalResult.map(result => {\n+      keys.push(result.tempKeys);\n+      values.push({\n+        cells: result.tempValue,\n+        rowKey: Math.random().toString()\n+      });\n+    });\n+    const rowObject: any = {};\n+    if (tableLoading) {\n+      rowObject.cells = [\n+        {\n+          props: { colSpan: 8 },\n+          title: (\n+            <Bullseye>\n+              <SpinnerComponent spinnerText=\"Loading Domain Explorer...\" />\n+            </Bullseye>\n+          )\n+        }\n+      ];\n+      values.push(rowObject);\n+    }\n+  }\n+  const finalKeys = keys[0];\n+\n+  const onRowSelect = (event, isSelected, rowId) => {\n+    return null;\n+  };\n+\n+  const onDelete = (type = '', id = '') => {\n+    return null;\n+  };\n+\n+  return (\n+    <React.Fragment>\n+      {displayTable && (\n+        <Table\n+          cells={finalKeys}\n+          rows={values}\n+          aria-label=\"Domain Explorer Table\"\n+          className=\"kogito-management-console--domain-explorer__table\"\n+        >\n+          <TableHeader />\n+          <TableBody rowKey=\"rowKey\" />\n+        </Table>\n+      )}\n+      {!displayTable && (\n+        <Card component={'div'}>\n+          <CardBody>\n+            <Bullseye>\n+              <EmptyState>\n+                <EmptyStateIcon icon={SearchIcon} />\n+                <Title headingLevel=\"h5\" size=\"lg\">\n+                  No domain data to display\n+                </Title>\n+                <EmptyStateBody>\n+                  Select a Domain from dropdown to see content", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NDExMw=="}, "originalCommit": {"oid": "dd3094b0f2a52a0037773645d93c1a4be7880c66"}, "originalPosition": 104}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MDYyOTM3OnYy", "diffSide": "RIGHT", "path": "packages/management-console/src/components/Organisms/DomainExplorerColumnPicker/DomainExplorerColumnPicker.tsx", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyMTo0MVrOFrt4Mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNjoyNDoyN1rOFrt_hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NDc1NA==", "bodyText": "Sentence case \"Pick columns\"", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r381384754", "createdAt": "2020-02-19T16:21:41Z", "author": {"login": "srambach"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerColumnPicker/DomainExplorerColumnPicker.tsx", "diffHunk": "@@ -0,0 +1,277 @@\n+import React, { useState } from 'react';\n+import {\n+  Select,\n+  SelectOption,\n+  SelectVariant,\n+  SelectGroup,\n+  Button\n+} from '@patternfly/react-core';\n+import { query } from 'gql-query-builder';\n+import _ from 'lodash';\n+import gql from 'graphql-tag';\n+import { useGetColumnPickerAttributesQuery } from '../../../graphql/types';\n+import { useApolloClient } from 'react-apollo';\n+\n+export interface IOwnProps {\n+  columnPickerType: any;\n+  setColumnFilters: any;\n+  setTableLoading: any;\n+  getQueryTypes: any;\n+  setDisplayTable: any;\n+  parameters: any;\n+  setParameters: any;\n+  selected: any;\n+  setSelected: any;\n+}\n+\n+const DomainExplorerColumnPicker: React.FC<IOwnProps> = ({\n+  columnPickerType,\n+  setColumnFilters,\n+  setTableLoading,\n+  getQueryTypes,\n+  setDisplayTable,\n+  parameters,\n+  setParameters,\n+  selected,\n+  setSelected\n+}) => {\n+  const [isExpanded, setIsExpanded] = useState(false);\n+\n+  const nullTypes = [null, 'String', 'Boolean', 'Int', 'DateTime'];\n+  const client = useApolloClient();\n+\n+  const onSelect = (event, selection) => {\n+    if (selected.includes(selection)) {\n+      setSelected(prevState => prevState.filter(item => item !== selection));\n+      const innerText = event.nativeEvent.target.nextSibling.innerText;\n+      const rest = filterColumnSelection(event, innerText);\n+      setParameters(prevState =>\n+        prevState.filter(obj => {\n+          if (!_.isEqual(obj, rest)) {\n+            return obj;\n+          }\n+        })\n+      );\n+    } else {\n+      setSelected(prevState => [...prevState, selection]);\n+      const innerText = event.nativeEvent.target.nextSibling.innerText;\n+      const rest = filterColumnSelection(event, innerText);\n+      setParameters(prevState => [...prevState, rest]);\n+    }\n+  };\n+\n+  const filterColumnSelection = (event, selection) => {\n+    const parent = event.nativeEvent.target.parentElement.parentElement.getAttribute(\n+      'aria-labelledby'\n+    );\n+    let res = {};\n+    const tempParents = parent.split('---');\n+\n+    for (let i = tempParents.length - 1; i >= 0; i--) {\n+      if (i === tempParents.length - 1) {\n+        if (tempParents[i] === '-') {\n+          res = selection;\n+        } else {\n+          res = { [tempParents[i]]: [selection] }; // assign the value\n+        }\n+      } else {\n+        res = { [tempParents[i]]: [res] }; // put the prev object\n+      }\n+    }\n+    return res;\n+  };\n+  const onToggle = _isExpanded => {\n+    setIsExpanded(_isExpanded);\n+  };\n+\n+  const getPicker = useGetColumnPickerAttributesQuery({\n+    variables: { columnPickerType }\n+  });\n+\n+  async function generateQuery() {\n+    if (columnPickerType && parameters.length > 0) {\n+      const Query = query({\n+        operation: columnPickerType,\n+        fields: parameters\n+      });\n+\n+      try {\n+        await client\n+          .query({\n+            query: gql`\n+              ${Query.query}\n+            `\n+          })\n+          .then(response => {\n+            setTableLoading(false);\n+            setColumnFilters(response.data);\n+            setDisplayTable(true);\n+            return response;\n+          });\n+      } catch (error) {\n+        return error;\n+      }\n+    } else {\n+      setDisplayTable(false);\n+    }\n+  }\n+\n+  let data = [];\n+  const tempArray = [];\n+  !getPicker.loading &&\n+    getPicker.data.__type &&\n+    getPicker.data.__type.fields.filter(i => {\n+      if (i.type.kind === 'SCALAR') {\n+        tempArray.push(i);\n+      } else {\n+        data.push(i);\n+      }\n+    });\n+  data = tempArray.concat(data);\n+\n+  const fetchSchema = option => {\n+    return (\n+      !getQueryTypes.loading &&\n+      getQueryTypes.data.__schema &&\n+      getQueryTypes.data.__schema.queryType.find(item => {\n+        if (item.name === option.type.name) {\n+          return item;\n+        }\n+      })\n+    );\n+  };\n+\n+  let childItems;\n+  let finalResult: any = [];\n+  let parentItems: any;\n+\n+  const childSelectionItems = (_data, title, ...attr) => {\n+    let nestedTitles = '';\n+    childItems = _data.map(group => {\n+      const label = title + ' / ' + attr.join();\n+      const childEle = (\n+        <SelectGroup\n+          label={label.replace(/\\,/g, '')}\n+          key={Math.random()}\n+          id={group.name}\n+          value={title + group.name}\n+        >\n+          {group.fields\n+            .filter((item, _index) => {\n+              if (!nullTypes.includes(item.type.name)) {\n+                const tempData = [];\n+                const n = fetchSchema(item);\n+                tempData.push(n);\n+                nestedTitles = nestedTitles + ' / ' + item.name;\n+                childSelectionItems(tempData, title, attr, nestedTitles);\n+              } else {\n+                return item;\n+              }\n+            })\n+            .map(item => (\n+              <SelectOption\n+                key={Math.random()}\n+                value={item.name + title + group.name}\n+              >\n+                {item.name}\n+              </SelectOption>\n+            ))}\n+        </SelectGroup>\n+      );\n+      return childEle;\n+    });\n+    finalResult.push(childItems);\n+  };\n+  const child = [];\n+  const selectionItems = _data => {\n+    parentItems =\n+      !getPicker.loading &&\n+      _data\n+        .filter((group, index) => {\n+          if (group.type.kind !== 'SCALAR') {\n+            return group;\n+          } else {\n+            child.push(<SelectOption key={group.name} value={group.name} />);\n+          }\n+        })\n+        .map((group, index) => {\n+          let ele;\n+          ele = (\n+            <SelectGroup\n+              label={group.name}\n+              key={index}\n+              id={group.name}\n+              value={group.name}\n+            >\n+              {group.type.fields &&\n+                group.type.fields\n+                  .filter((item, _index) => {\n+                    if (!nullTypes.includes(item.type.name)) {\n+                      const tempData = [];\n+                      const _v = fetchSchema(item);\n+                      tempData.push(_v);\n+                      childSelectionItems(tempData, group.name, item.name);\n+                    } else {\n+                      if (item.type.kind !== 'LIST') {\n+                        return item;\n+                      }\n+                    }\n+                  })\n+                  .map((item, _index) => (\n+                    <SelectOption key={_index} value={item.name + group.name}>\n+                      {item.name}\n+                    </SelectOption>\n+                  ))}\n+            </SelectGroup>\n+          );\n+\n+          !finalResult.includes(ele) && finalResult.push(ele);\n+        });\n+  };\n+\n+  columnPickerType && selectionItems(data);\n+  const rootElement: any = (\n+    <SelectGroup label=\" \" key={Math.random()} id=\"\" value=\" \">\n+      {child}\n+    </SelectGroup>\n+  );\n+  finalResult = finalResult.flat();\n+  finalResult.unshift(rootElement);\n+\n+  function getAllChilds(arr, comp) {\n+    const unique = arr\n+      .map(e => e[comp])\n+      .map((e, i, final) => final.indexOf(e) === i && i)\n+      .filter(e => arr[e])\n+      .map(e => arr[e]);\n+\n+    return unique;\n+  }\n+  return (\n+    <React.Fragment>\n+      {!getPicker.loading && columnPickerType && (\n+        <>\n+          <Select\n+            variant={SelectVariant.checkbox}\n+            aria-label=\"Select Input\"\n+            onToggle={onToggle}\n+            onSelect={onSelect}\n+            selections={selected}\n+            isExpanded={isExpanded}\n+            placeholderText=\"Pick Columns\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dd3094b0f2a52a0037773645d93c1a4be7880c66"}, "originalPosition": 261}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NjYyOA==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/57#discussion_r381386628", "createdAt": "2020-02-19T16:24:27Z", "author": {"login": "Sara4994"}, "path": "packages/management-console/src/components/Organisms/DomainExplorerColumnPicker/DomainExplorerColumnPicker.tsx", "diffHunk": "@@ -0,0 +1,277 @@\n+import React, { useState } from 'react';\n+import {\n+  Select,\n+  SelectOption,\n+  SelectVariant,\n+  SelectGroup,\n+  Button\n+} from '@patternfly/react-core';\n+import { query } from 'gql-query-builder';\n+import _ from 'lodash';\n+import gql from 'graphql-tag';\n+import { useGetColumnPickerAttributesQuery } from '../../../graphql/types';\n+import { useApolloClient } from 'react-apollo';\n+\n+export interface IOwnProps {\n+  columnPickerType: any;\n+  setColumnFilters: any;\n+  setTableLoading: any;\n+  getQueryTypes: any;\n+  setDisplayTable: any;\n+  parameters: any;\n+  setParameters: any;\n+  selected: any;\n+  setSelected: any;\n+}\n+\n+const DomainExplorerColumnPicker: React.FC<IOwnProps> = ({\n+  columnPickerType,\n+  setColumnFilters,\n+  setTableLoading,\n+  getQueryTypes,\n+  setDisplayTable,\n+  parameters,\n+  setParameters,\n+  selected,\n+  setSelected\n+}) => {\n+  const [isExpanded, setIsExpanded] = useState(false);\n+\n+  const nullTypes = [null, 'String', 'Boolean', 'Int', 'DateTime'];\n+  const client = useApolloClient();\n+\n+  const onSelect = (event, selection) => {\n+    if (selected.includes(selection)) {\n+      setSelected(prevState => prevState.filter(item => item !== selection));\n+      const innerText = event.nativeEvent.target.nextSibling.innerText;\n+      const rest = filterColumnSelection(event, innerText);\n+      setParameters(prevState =>\n+        prevState.filter(obj => {\n+          if (!_.isEqual(obj, rest)) {\n+            return obj;\n+          }\n+        })\n+      );\n+    } else {\n+      setSelected(prevState => [...prevState, selection]);\n+      const innerText = event.nativeEvent.target.nextSibling.innerText;\n+      const rest = filterColumnSelection(event, innerText);\n+      setParameters(prevState => [...prevState, rest]);\n+    }\n+  };\n+\n+  const filterColumnSelection = (event, selection) => {\n+    const parent = event.nativeEvent.target.parentElement.parentElement.getAttribute(\n+      'aria-labelledby'\n+    );\n+    let res = {};\n+    const tempParents = parent.split('---');\n+\n+    for (let i = tempParents.length - 1; i >= 0; i--) {\n+      if (i === tempParents.length - 1) {\n+        if (tempParents[i] === '-') {\n+          res = selection;\n+        } else {\n+          res = { [tempParents[i]]: [selection] }; // assign the value\n+        }\n+      } else {\n+        res = { [tempParents[i]]: [res] }; // put the prev object\n+      }\n+    }\n+    return res;\n+  };\n+  const onToggle = _isExpanded => {\n+    setIsExpanded(_isExpanded);\n+  };\n+\n+  const getPicker = useGetColumnPickerAttributesQuery({\n+    variables: { columnPickerType }\n+  });\n+\n+  async function generateQuery() {\n+    if (columnPickerType && parameters.length > 0) {\n+      const Query = query({\n+        operation: columnPickerType,\n+        fields: parameters\n+      });\n+\n+      try {\n+        await client\n+          .query({\n+            query: gql`\n+              ${Query.query}\n+            `\n+          })\n+          .then(response => {\n+            setTableLoading(false);\n+            setColumnFilters(response.data);\n+            setDisplayTable(true);\n+            return response;\n+          });\n+      } catch (error) {\n+        return error;\n+      }\n+    } else {\n+      setDisplayTable(false);\n+    }\n+  }\n+\n+  let data = [];\n+  const tempArray = [];\n+  !getPicker.loading &&\n+    getPicker.data.__type &&\n+    getPicker.data.__type.fields.filter(i => {\n+      if (i.type.kind === 'SCALAR') {\n+        tempArray.push(i);\n+      } else {\n+        data.push(i);\n+      }\n+    });\n+  data = tempArray.concat(data);\n+\n+  const fetchSchema = option => {\n+    return (\n+      !getQueryTypes.loading &&\n+      getQueryTypes.data.__schema &&\n+      getQueryTypes.data.__schema.queryType.find(item => {\n+        if (item.name === option.type.name) {\n+          return item;\n+        }\n+      })\n+    );\n+  };\n+\n+  let childItems;\n+  let finalResult: any = [];\n+  let parentItems: any;\n+\n+  const childSelectionItems = (_data, title, ...attr) => {\n+    let nestedTitles = '';\n+    childItems = _data.map(group => {\n+      const label = title + ' / ' + attr.join();\n+      const childEle = (\n+        <SelectGroup\n+          label={label.replace(/\\,/g, '')}\n+          key={Math.random()}\n+          id={group.name}\n+          value={title + group.name}\n+        >\n+          {group.fields\n+            .filter((item, _index) => {\n+              if (!nullTypes.includes(item.type.name)) {\n+                const tempData = [];\n+                const n = fetchSchema(item);\n+                tempData.push(n);\n+                nestedTitles = nestedTitles + ' / ' + item.name;\n+                childSelectionItems(tempData, title, attr, nestedTitles);\n+              } else {\n+                return item;\n+              }\n+            })\n+            .map(item => (\n+              <SelectOption\n+                key={Math.random()}\n+                value={item.name + title + group.name}\n+              >\n+                {item.name}\n+              </SelectOption>\n+            ))}\n+        </SelectGroup>\n+      );\n+      return childEle;\n+    });\n+    finalResult.push(childItems);\n+  };\n+  const child = [];\n+  const selectionItems = _data => {\n+    parentItems =\n+      !getPicker.loading &&\n+      _data\n+        .filter((group, index) => {\n+          if (group.type.kind !== 'SCALAR') {\n+            return group;\n+          } else {\n+            child.push(<SelectOption key={group.name} value={group.name} />);\n+          }\n+        })\n+        .map((group, index) => {\n+          let ele;\n+          ele = (\n+            <SelectGroup\n+              label={group.name}\n+              key={index}\n+              id={group.name}\n+              value={group.name}\n+            >\n+              {group.type.fields &&\n+                group.type.fields\n+                  .filter((item, _index) => {\n+                    if (!nullTypes.includes(item.type.name)) {\n+                      const tempData = [];\n+                      const _v = fetchSchema(item);\n+                      tempData.push(_v);\n+                      childSelectionItems(tempData, group.name, item.name);\n+                    } else {\n+                      if (item.type.kind !== 'LIST') {\n+                        return item;\n+                      }\n+                    }\n+                  })\n+                  .map((item, _index) => (\n+                    <SelectOption key={_index} value={item.name + group.name}>\n+                      {item.name}\n+                    </SelectOption>\n+                  ))}\n+            </SelectGroup>\n+          );\n+\n+          !finalResult.includes(ele) && finalResult.push(ele);\n+        });\n+  };\n+\n+  columnPickerType && selectionItems(data);\n+  const rootElement: any = (\n+    <SelectGroup label=\" \" key={Math.random()} id=\"\" value=\" \">\n+      {child}\n+    </SelectGroup>\n+  );\n+  finalResult = finalResult.flat();\n+  finalResult.unshift(rootElement);\n+\n+  function getAllChilds(arr, comp) {\n+    const unique = arr\n+      .map(e => e[comp])\n+      .map((e, i, final) => final.indexOf(e) === i && i)\n+      .filter(e => arr[e])\n+      .map(e => arr[e]);\n+\n+    return unique;\n+  }\n+  return (\n+    <React.Fragment>\n+      {!getPicker.loading && columnPickerType && (\n+        <>\n+          <Select\n+            variant={SelectVariant.checkbox}\n+            aria-label=\"Select Input\"\n+            onToggle={onToggle}\n+            onSelect={onSelect}\n+            selections={selected}\n+            isExpanded={isExpanded}\n+            placeholderText=\"Pick Columns\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTM4NDc1NA=="}, "originalCommit": {"oid": "dd3094b0f2a52a0037773645d93c1a4be7880c66"}, "originalPosition": 261}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1083, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}