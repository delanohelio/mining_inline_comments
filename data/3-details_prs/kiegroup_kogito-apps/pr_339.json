{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU1NjYxODYy", "number": 339, "title": "KOGITO-2848 - trusty and explainability messaging ", "bodyText": "jira: https://issues.redhat.com/browse/KOGITO-2848\nThis PR aims to add the communication infrastructure to the trusty and explainability service. Since the explainability service is supposed to do some blocking activities (like replaying decision request to kogito runtime and training a ML model on top of the result), it is good to decouple the communication with a message-based approach.\nThis PR in a nutshell:\n\nRefactoring of the kafka resources: all the projects like data-index, trusty and explainability can leverage on the common classes provided in the kogito-test-utils.\nThree new modules have been added:\nexplainability-api: contains the dto for the communication\nexplainability-service-messaging: it will generate a jar that handle the communication with the explainability service with messages\nexplainability-service-rest: in the scenario that the user would like to use the standalone explainability service without the messaging approach, the same explainability request might be performed with rest api\nOn the trusty service side, the explainability request message is sent when a new trace event is processed (if the property trusty.explainability.enabled is true ) and when the explainability result is pushed to the kafka broker by the explainability service, it is consumed by the trusty service. The architecture looks like the following\n\n\nMany thanks for submitting your Pull Request \u2764\ufe0f!\nPlease make sure that your PR meets the following requirements:\n\n You have read the contributors guide\n Pull Request title is properly formatted: KOGITO-XYZ Subject\n Pull Request title contains the target branch if not targeting master: [0.9.x] KOGITO-XYZ Subject\n Pull Request contains link to the JIRA issue\n Pull Request contains link to any dependent or related Pull Request\n Pull Request contains description of the issue\n Pull Request does not include fixes for issues other than the main ticket", "createdAt": "2020-07-23T12:04:57Z", "url": "https://github.com/kiegroup/kogito-apps/pull/339", "merged": true, "mergeCommit": {"oid": "c93fc4382dd5ee9b9a24ee97aecc862a64e2115f"}, "closed": true, "closedAt": "2020-08-07T06:59:25Z", "author": {"login": "r00ta"}, "timelineItems": {"totalCount": 54, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc3uOdygH2gAyNDU1NjYxODYyOjRhN2UxMWJlYzVkNWIwOTRjYWVmYmUwYzZiYjBlMDc1ZGE0Y2RhYWI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc8VeYqAFqTQ2MjgzNjUxMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4a7e11bec5d5b094caefbe0c6bb0e075da4cdaab", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/4a7e11bec5d5b094caefbe0c6bb0e075da4cdaab", "committedDate": "2020-07-23T12:03:21Z", "message": "add scaffolding"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de9c1d2f9812c03d776495c774ddd42bfde32b80", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/de9c1d2f9812c03d776495c774ddd42bfde32b80", "committedDate": "2020-07-23T14:10:58Z", "message": "test full iteration of messages"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU0MTIzMjg1", "url": "https://github.com/kiegroup/kogito-apps/pull/339#pullrequestreview-454123285", "createdAt": "2020-07-23T13:21:11Z", "commit": {"oid": "4a7e11bec5d5b094caefbe0c6bb0e075da4cdaab"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzoyMToxMVrOG2KNBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yN1QxMDo1NDoxN1rOG3dg0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ0MzQ2MQ==", "bodyText": "I think it is better to do the opposite: move this module to explainable-service and then trusty-service will use it. In this way explanable-service will be agnostic while trusty-service is already an \"integration\" service. Wdyt?", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r459443461", "createdAt": "2020-07-23T13:21:11Z", "author": {"login": "danielezonca"}, "path": "trusty/trusty-api/pom.xml", "diffHunk": "@@ -0,0 +1,33 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>trusty</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <artifactId>trusty-api</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4a7e11bec5d5b094caefbe0c6bb0e075da4cdaab"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDc3NDczMA==", "bodyText": "What about a from factory method on ExplainabilityRequest that accepts the whole ExplainabilityRequestDto so that it will be easier to evolve in the future?", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r460774730", "createdAt": "2020-07-27T09:48:53Z", "author": {"login": "danielezonca"}, "path": "explainability-service/src/main/java/org/kie/kogito/explainability/messaging/incoming/ExplainabilityRequestConverter.java", "diffHunk": "@@ -0,0 +1,26 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.explainability.messaging.incoming;\n+\n+import org.kie.kogito.explainability.models.ExplainabilityRequest;\n+import org.kie.kogito.trusty.api.ExplainabilityRequestDto;\n+\n+public class ExplainabilityRequestConverter {\n+    public static ExplainabilityRequest toRequest(ExplainabilityRequestDto explainabilityRequestDto){\n+        return new ExplainabilityRequest(explainabilityRequestDto.executionId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de9c1d2f9812c03d776495c774ddd42bfde32b80"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MDgwODQwMw==", "bodyText": "Can you please apply these changes?\n\nrefactor this class to have both incoming and outgoing events\nadd a callback parameter to processExplainability method\ncreate a -kafka module with reactive messaging part and another -rest module with the same processExplainability method exposed as REST", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r460808403", "createdAt": "2020-07-27T10:54:17Z", "author": {"login": "danielezonca"}, "path": "explainability-service/src/main/java/org/kie/kogito/explainability/messaging/incoming/ExplainabilityRequestConsumer.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.explainability.messaging.incoming;\n+\n+import java.util.Optional;\n+import java.util.Random;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import io.cloudevents.v1.AttributesImpl;\n+import io.cloudevents.v1.CloudEventImpl;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.kie.kogito.explainability.IExplanationService;\n+import org.kie.kogito.trusty.api.CloudEventUtils;\n+import org.kie.kogito.trusty.api.ExplainabilityRequestDto;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class ExplainabilityRequestConsumer {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExplainabilityRequestConsumer.class);\n+\n+    private static final TypeReference<CloudEventImpl<ExplainabilityRequestDto>> CLOUD_EVENT_TYPE = new TypeReference<>() {\n+    };\n+\n+    private final IExplanationService service;\n+\n+    @Inject\n+    public ExplainabilityRequestConsumer(IExplanationService service) {\n+        this.service = service;\n+    }\n+\n+    @Incoming(\"trusty-explainability-request\")\n+    public CompletionStage<Void> handleMessage(Message<String> message) {\n+        decodeCloudEvent(message.getPayload()).ifPresent(this::handleCloudEvent);\n+        return message.ack();\n+    }\n+\n+    private Optional<CloudEventImpl<ExplainabilityRequestDto>> decodeCloudEvent(String payload) {\n+        try {\n+            return Optional.of(CloudEventUtils.decode(payload, CLOUD_EVENT_TYPE));\n+        } catch (IllegalStateException e) {\n+            LOGGER.error(String.format(\"Can't decode message to CloudEvent: %s\", payload), e);\n+            return Optional.empty();\n+        }\n+    }\n+\n+    private void handleCloudEvent(CloudEventImpl<ExplainabilityRequestDto> cloudEvent) {\n+        AttributesImpl attributes = cloudEvent.getAttributes();\n+        Optional<ExplainabilityRequestDto> optData = cloudEvent.getData();\n+\n+        if (!optData.isPresent()) {\n+            LOGGER.error(\"Received CloudEvent with id {} from {} with empty data\", attributes.getId(), attributes.getSource());\n+            return;\n+        }\n+\n+        LOGGER.info(\"Received CloudEvent with id {} from {}\", attributes.getId(), attributes.getSource());\n+\n+        ExplainabilityRequestDto explainabilityResult = optData.get();\n+\n+        service.processExplainability(ExplainabilityRequestConverter.toRequest(explainabilityResult));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de9c1d2f9812c03d776495c774ddd42bfde32b80"}, "originalPosition": 80}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "344f442c9f1f7a10a009640545fff6eeed94b808", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/344f442c9f1f7a10a009640545fff6eeed94b808", "committedDate": "2020-07-28T15:05:44Z", "message": "Merge remote-tracking branch 'upstream/master' into KOGITO-2848-trusty-expl-integration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d3010d9aab0519dbba716602ba36963225408990", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/d3010d9aab0519dbba716602ba36963225408990", "committedDate": "2020-07-29T17:22:43Z", "message": "use reactive"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6d6905c8a8913de4585b13397b5c978dae20111", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/f6d6905c8a8913de4585b13397b5c978dae20111", "committedDate": "2020-07-29T19:14:42Z", "message": "rebase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ca60c49b75b6c45c1f22d5b56b5ad7091c2bb9f", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/1ca60c49b75b6c45c1f22d5b56b5ad7091c2bb9f", "committedDate": "2020-07-31T08:01:58Z", "message": "Merge remote-tracking branch 'upstream/master' into KOGITO-2848-trusty-expl-integration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "71942efc3431a6fdc74ecb39c5250d39973015f2", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/71942efc3431a6fdc74ecb39c5250d39973015f2", "committedDate": "2020-07-31T08:39:22Z", "message": "rebase and create explainability-api module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d2b1490565699a639b3bc23719068b733d715f2", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/7d2b1490565699a639b3bc23719068b733d715f2", "committedDate": "2020-07-31T08:47:22Z", "message": "use vertx executor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a04a2cf9a3563de52431eb9545cc10e6c0a5a353", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/a04a2cf9a3563de52431eb9545cc10e6c0a5a353", "committedDate": "2020-07-31T09:25:59Z", "message": "refactoring modules with messaging and rest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9c60a2829816ef5e742fd7e683d227bf885bf4e8", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/9c60a2829816ef5e742fd7e683d227bf885bf4e8", "committedDate": "2020-07-31T11:50:47Z", "message": "fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d5f5b09da86b562f9bc6c0bf7f4251cae7bbaba6", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/d5f5b09da86b562f9bc6c0bf7f4251cae7bbaba6", "committedDate": "2020-07-31T11:52:25Z", "message": "fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MDg0NDk1", "url": "https://github.com/kiegroup/kogito-apps/pull/339#pullrequestreview-459084495", "createdAt": "2020-07-31T10:46:39Z", "commit": {"oid": "a04a2cf9a3563de52431eb9545cc10e6c0a5a353"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMDo0NjozOVrOG6ERzw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxMjo0MTowMlrOG6HFwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0MDY4Nw==", "bodyText": "Is this needed?", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r463540687", "createdAt": "2020-07-31T10:46:39Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-service-rest/pom.xml", "diffHunk": "@@ -0,0 +1,112 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>explainability</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <name>Kogito :: Explainability Service Rest</name>\n+  <artifactId>explainability-service-rest</artifactId>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-resteasy</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-smallrye-health</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-resteasy-jackson</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-smallrye-openapi</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>explainability-service</artifactId>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-maven-plugin</artifactId>\n+        <configuration>\n+          <uberJar>true</uberJar>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a04a2cf9a3563de52431eb9545cc10e6c0a5a353"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0MDg0Ng==", "bodyText": "Is this needed?", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r463540846", "createdAt": "2020-07-31T10:47:02Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-service-messaging/pom.xml", "diffHunk": "@@ -0,0 +1,118 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>explainability</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>8.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <name>Kogito :: Explainability Service Messaging</name>\n+  <artifactId>explainability-service-messaging</artifactId>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-smallrye-health</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-smallrye-reactive-messaging</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-smallrye-reactive-messaging-kafka</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>kogito-tracing-decision-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>explainability-service</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.cloudevents</groupId>\n+      <artifactId>cloudevents-api</artifactId>\n+    </dependency>\n+  </dependencies>\n+\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-maven-plugin</artifactId>\n+        <configuration>\n+          <uberJar>true</uberJar>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a04a2cf9a3563de52431eb9545cc10e6c0a5a353"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0MTM3MQ==", "bodyText": "I don't like mixed injection: can you please inject only fields or make all the injection done at constructor level?", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r463541371", "createdAt": "2020-07-31T10:48:21Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-service-messaging/src/main/java/org/kie/kogito/explainability/messaging/ExplainabilityMessagingHandler.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.explainability.messaging;\n+\n+import java.net.URI;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import io.cloudevents.v1.AttributesImpl;\n+import io.cloudevents.v1.CloudEventImpl;\n+import io.reactivex.BackpressureStrategy;\n+import io.reactivex.subjects.PublishSubject;\n+import io.smallrye.reactive.messaging.annotations.Blocking;\n+import org.eclipse.microprofile.context.ManagedExecutor;\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.Outgoing;\n+import org.kie.kogito.explainability.IExplanationService;\n+import org.kie.kogito.explainability.api.ExplainabilityRequestDto;\n+import org.kie.kogito.explainability.api.ExplainabilityResultDto;\n+import org.kie.kogito.explainability.models.ExplainabilityRequest;\n+import org.kie.kogito.tracing.decision.event.CloudEventUtils;\n+import org.reactivestreams.Publisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class ExplainabilityMessagingHandler {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExplainabilityMessagingHandler.class);\n+\n+    private static final URI URI_PRODUCER = URI.create(\"explainabilityService/ExplainabilityMessagingHandler\");\n+    private static final TypeReference<CloudEventImpl<ExplainabilityRequestDto>> CLOUD_EVENT_TYPE = new TypeReference<>() {\n+    };\n+    private final PublishSubject<String> eventSubject = PublishSubject.create();\n+    private final IExplanationService service;\n+\n+    @Inject\n+    ManagedExecutor executor;\n+\n+    @Inject\n+    public ExplainabilityMessagingHandler(IExplanationService service) {\n+        this.service = service;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a04a2cf9a3563de52431eb9545cc10e6c0a5a353"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0MTkyOA==", "bodyText": "Is there any reason why here is CompletableStage while all the other methods are using CompletableFuture?", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r463541928", "createdAt": "2020-07-31T10:49:45Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-service-messaging/src/main/java/org/kie/kogito/explainability/messaging/ExplainabilityMessagingHandler.java", "diffHunk": "@@ -0,0 +1,124 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.explainability.messaging;\n+\n+import java.net.URI;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import io.cloudevents.v1.AttributesImpl;\n+import io.cloudevents.v1.CloudEventImpl;\n+import io.reactivex.BackpressureStrategy;\n+import io.reactivex.subjects.PublishSubject;\n+import io.smallrye.reactive.messaging.annotations.Blocking;\n+import org.eclipse.microprofile.context.ManagedExecutor;\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.Outgoing;\n+import org.kie.kogito.explainability.IExplanationService;\n+import org.kie.kogito.explainability.api.ExplainabilityRequestDto;\n+import org.kie.kogito.explainability.api.ExplainabilityResultDto;\n+import org.kie.kogito.explainability.models.ExplainabilityRequest;\n+import org.kie.kogito.tracing.decision.event.CloudEventUtils;\n+import org.reactivestreams.Publisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class ExplainabilityMessagingHandler {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExplainabilityMessagingHandler.class);\n+\n+    private static final URI URI_PRODUCER = URI.create(\"explainabilityService/ExplainabilityMessagingHandler\");\n+    private static final TypeReference<CloudEventImpl<ExplainabilityRequestDto>> CLOUD_EVENT_TYPE = new TypeReference<>() {\n+    };\n+    private final PublishSubject<String> eventSubject = PublishSubject.create();\n+    private final IExplanationService service;\n+\n+    @Inject\n+    ManagedExecutor executor;\n+\n+    @Inject\n+    public ExplainabilityMessagingHandler(IExplanationService service) {\n+        this.service = service;\n+    }\n+\n+    // Incoming\n+    @Incoming(\"trusty-explainability-request\")\n+    @Blocking\n+    public CompletionStage<Void> handleMessage(Message<String> message) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a04a2cf9a3563de52431eb9545cc10e6c0a5a353"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU0Mzg4Ng==", "bodyText": "What about add an application property to disable explanation? (And then update also related rest endpoints)", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r463543886", "createdAt": "2020-07-31T10:54:33Z", "author": {"login": "danielezonca"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/TrustyService.java", "diffHunk": "@@ -76,4 +83,15 @@ public void storeDecision(String executionId, Decision decision) {\n     public void updateDecision(String executionId, Decision decision) {\n         storageService.getDecisionsStorage().put(executionId, decision);\n     }\n+\n+    @Override\n+    public void processDecision(String executionId, Decision decision) {\n+        storeDecision(executionId, decision);\n+        explainabilityRequestProducer.sendEvent(new ExplainabilityRequestDto(UUID.randomUUID().toString()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a04a2cf9a3563de52431eb9545cc10e6c0a5a353"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU4NTQ0MQ==", "bodyText": "Remember to remove it before merging :)", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r463585441", "createdAt": "2020-07-31T12:38:08Z", "author": {"login": "danielezonca"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/api/Test.java", "diffHunk": "@@ -0,0 +1,27 @@\n+package org.kie.kogito.trusty.service.api;\n+\n+import java.util.UUID;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import org.kie.kogito.explainability.api.ExplainabilityRequestDto;\n+import org.kie.kogito.trusty.service.messaging.outgoing.ExplainabilityRequestProducer;\n+\n+@Path(\"/test\")\n+public class Test {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5f5b09da86b562f9bc6c0bf7f4251cae7bbaba6"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzU4Njc1Mg==", "bodyText": "Unused import?", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r463586752", "createdAt": "2020-07-31T12:41:02Z", "author": {"login": "danielezonca"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/incoming/TraceEventConsumer.java", "diffHunk": "@@ -25,6 +25,7 @@\n import com.fasterxml.jackson.core.type.TypeReference;\n import io.cloudevents.v1.AttributesImpl;\n import io.cloudevents.v1.CloudEventImpl;\n+import io.smallrye.reactive.messaging.annotations.Blocking;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d5f5b09da86b562f9bc6c0bf7f4251cae7bbaba6"}, "originalPosition": 13}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c5e7fd12fb322f201581738dd6ae68198b8a860c", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/c5e7fd12fb322f201581738dd6ae68198b8a860c", "committedDate": "2020-07-31T13:58:16Z", "message": "add rest tests and trusty expl result IT"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "90327ef726b5687e449ab016a1b9769cb489179b", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/90327ef726b5687e449ab016a1b9769cb489179b", "committedDate": "2020-07-31T13:59:04Z", "message": "add licence headers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MzA2OTY2", "url": "https://github.com/kiegroup/kogito-apps/pull/339#pullrequestreview-459306966", "createdAt": "2020-07-31T16:32:04Z", "commit": {"oid": "90327ef726b5687e449ab016a1b9769cb489179b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5MzQwNzMy", "url": "https://github.com/kiegroup/kogito-apps/pull/339#pullrequestreview-459340732", "createdAt": "2020-07-31T17:28:03Z", "commit": {"oid": "90327ef726b5687e449ab016a1b9769cb489179b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNzoyODowM1rOG6QSuw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0zMVQxNzoyODowM1rOG6QSuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MzczNzUzMQ==", "bodyText": "Please rename :)", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r463737531", "createdAt": "2020-07-31T17:28:03Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-service-rest/src/main/java/org/kie/kogito/explainability/rest/ExplainabilityApiV1.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.explainability.rest;\n+\n+import java.util.concurrent.CompletableFuture;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import io.smallrye.mutiny.Uni;\n+import org.eclipse.microprofile.openapi.annotations.Operation;\n+import org.eclipse.microprofile.openapi.annotations.enums.SchemaType;\n+import org.eclipse.microprofile.openapi.annotations.media.Content;\n+import org.eclipse.microprofile.openapi.annotations.media.Schema;\n+import org.eclipse.microprofile.openapi.annotations.responses.APIResponse;\n+import org.eclipse.microprofile.openapi.annotations.responses.APIResponses;\n+import org.kie.kogito.explainability.IExplanationService;\n+import org.kie.kogito.explainability.api.ExplainabilityRequestDto;\n+import org.kie.kogito.explainability.models.ExplainabilityRequest;\n+\n+@Path(\"/v1\")\n+public class ExplainabilityApiV1 {\n+\n+    @Inject\n+    IExplanationService explanationService;\n+\n+    @POST\n+    @Path(\"/explain\")\n+    @APIResponses(value = {\n+            @APIResponse(description = \"Retrieve the explainability for a given decision.\", responseCode = \"200\", content = @Content(mediaType = MediaType.APPLICATION_JSON, schema = @Schema(type = SchemaType.OBJECT, implementation = ExplainabilityRequestDto.class))),\n+            @APIResponse(description = \"Bad Request\", responseCode = \"400\", content = @Content(mediaType = MediaType.TEXT_PLAIN))\n+    }\n+    )\n+    @Operation(summary = \"Retrieve the explainability for a given decision.\", description = \"Retrieve the explainability for a given decision.\")\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    @Produces(MediaType.APPLICATION_JSON)\n+    public Uni<Response> test(ExplainabilityRequestDto request) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "90327ef726b5687e449ab016a1b9769cb489179b"}, "originalPosition": 56}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "62917daca1394e47e11538dd55b40e56f5fe447d", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/62917daca1394e47e11538dd55b40e56f5fe447d", "committedDate": "2020-08-03T16:28:13Z", "message": "refactoring kafka test resources"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5919643839108638dc689f088f8ab3a3e83d9d9e", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/5919643839108638dc689f088f8ab3a3e83d9d9e", "committedDate": "2020-08-03T16:31:50Z", "message": "Merge remote-tracking branch 'upstream/master' into KOGITO-2848-trusty-expl-integration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c09806878ba17df63ee4a237fefe35e0e67db71", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/3c09806878ba17df63ee4a237fefe35e0e67db71", "committedDate": "2020-08-04T09:18:32Z", "message": "integration test for explainability messaging, refactoring, add todos"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "793e70aa94a700a2a04cbf2ec72ac56d98d1d500", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/793e70aa94a700a2a04cbf2ec72ac56d98d1d500", "committedDate": "2020-08-04T09:39:47Z", "message": "make explainability request configurable, fix comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e19328817b2f908958eb0b5eb468fb354fe8a37", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/6e19328817b2f908958eb0b5eb468fb354fe8a37", "committedDate": "2020-08-04T09:41:53Z", "message": "rename method endpoint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "462187f390c812cff901945028b763ae15922d6d", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/462187f390c812cff901945028b763ae15922d6d", "committedDate": "2020-08-04T09:42:38Z", "message": "fix typo in pom"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5e8cc05573917c8f59000f30ca0a7753dcabb18", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/e5e8cc05573917c8f59000f30ca0a7753dcabb18", "committedDate": "2020-08-04T10:44:39Z", "message": "add licence headers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25eb04e96b87e67b31562373d672e3957a5fd2a6", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/25eb04e96b87e67b31562373d672e3957a5fd2a6", "committedDate": "2020-08-04T10:57:26Z", "message": "remove quarkus port"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "91a18b99a7e538cb9562001a9f16ec64fc6630c8", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/91a18b99a7e538cb9562001a9f16ec64fc6630c8", "committedDate": "2020-08-04T14:35:00Z", "message": "fix kafka topic name"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bbc530efb757ee192dd03ab637cb7c114f3b848b", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/bbc530efb757ee192dd03ab637cb7c114f3b848b", "committedDate": "2020-08-04T15:29:13Z", "message": "rebase"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0454fd0a43d1ac060f7036588b8633c1e6a6e73", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/e0454fd0a43d1ac060f7036588b8633c1e6a6e73", "committedDate": "2020-08-04T15:51:05Z", "message": "fix code smells"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "014bcd2d2a0bf8600e77ccb3a0246e017e0e6ff9", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/014bcd2d2a0bf8600e77ccb3a0246e017e0e6ff9", "committedDate": "2020-08-05T08:44:47Z", "message": "Merge remote-tracking branch 'upstream/master' into KOGITO-2848-trusty-expl-integration"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0abefeaa97d223dcce673226b78b56e519c73278", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/0abefeaa97d223dcce673226b78b56e519c73278", "committedDate": "2020-08-05T11:10:40Z", "message": "refactoring kafka messaging tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1656a93778cc94f6b5d736298fb705134b5d4826", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/1656a93778cc94f6b5d736298fb705134b5d4826", "committedDate": "2020-08-05T11:11:08Z", "message": "add licence header"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "717385c6692527e5d4c7e93eb13d42267a0cf5a4", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/717385c6692527e5d4c7e93eb13d42267a0cf5a4", "committedDate": "2020-08-05T13:14:14Z", "message": "fix nullpointer when hasSucceeded is null"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acf5a028dff49a8aa20dd468221006c66048379f", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/acf5a028dff49a8aa20dd468221006c66048379f", "committedDate": "2020-08-05T13:36:00Z", "message": "improve explainability messaging test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a826a77218f82446468dcdb5f9acd0299c24d9a4", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/a826a77218f82446468dcdb5f9acd0299c24d9a4", "committedDate": "2020-08-05T20:29:41Z", "message": "Merge remote-tracking branch 'upstream/master' into KOGITO-2848-trusty-expl-integration"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMDMxNzM5", "url": "https://github.com/kiegroup/kogito-apps/pull/339#pullrequestreview-462031739", "createdAt": "2020-08-05T21:19:11Z", "commit": {"oid": "a826a77218f82446468dcdb5f9acd0299c24d9a4"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMToxOToxMlrOG8bA1A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQyMToyNDowOFrOG8bJtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAxMDMyNA==", "bodyText": "PostgreSQL client?", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r466010324", "createdAt": "2020-08-05T21:19:12Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-service-rest/pom.xml", "diffHunk": "@@ -0,0 +1,131 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>explainability</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>1.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <name>Kogito :: Explainability Service Rest</name>\n+  <artifactId>explainability-service-rest</artifactId>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-resteasy</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-smallrye-health</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-resteasy-jackson</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-smallrye-openapi</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-resteasy-mutiny</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-reactive-pg-client</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a826a77218f82446468dcdb5f9acd0299c24d9a4"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAxMTA4NA==", "bodyText": "Is it possible to reuse the set of properties already defined in src? I would prefer to avoid this duplication", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r466011084", "createdAt": "2020-08-05T21:20:52Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-service-messaging/src/test/resources/application.properties", "diffHunk": "@@ -0,0 +1,13 @@\n+# Kafka Explainability Request", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a826a77218f82446468dcdb5f9acd0299c24d9a4"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjAxMjU5Ng==", "bodyText": "We should not depend on tracing API here. From what I can see it is just for CloudEventUtils so we should probably refactor that class. Wdyt? What about create a ticket for that?", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r466012596", "createdAt": "2020-08-05T21:24:08Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-service-messaging/pom.xml", "diffHunk": "@@ -0,0 +1,166 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>explainability</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>1.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <name>Kogito :: Explainability Service Messaging</name>\n+  <artifactId>explainability-service-messaging</artifactId>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-smallrye-health</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-smallrye-reactive-messaging</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-smallrye-reactive-messaging-kafka</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.kie.kogito</groupId>\n+      <artifactId>tracing-decision-api</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a826a77218f82446468dcdb5f9acd0299c24d9a4"}, "originalPosition": 30}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4ee882b4121b24ce556d0bc6c0fb2027b6c2fe2", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/a4ee882b4121b24ce556d0bc6c0fb2027b6c2fe2", "committedDate": "2020-08-06T09:46:35Z", "message": "remove unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9069affc8d38658043940dce77bd5899aff9a6ee", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/9069affc8d38658043940dce77bd5899aff9a6ee", "committedDate": "2020-08-06T11:07:17Z", "message": "improve test coverage"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "55336e1800a8e95f2a2ecc54f92add642d6f63d6", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/55336e1800a8e95f2a2ecc54f92add642d6f63d6", "committedDate": "2020-08-06T11:08:16Z", "message": "remove unused imports"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "33fdf47cde45de92d141d5771651eded5b291e03", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/33fdf47cde45de92d141d5771651eded5b291e03", "committedDate": "2020-08-06T12:53:32Z", "message": "add spaces"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "99a20a8ac2a739d7eeac52d6de373890c6bc038b", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/99a20a8ac2a739d7eeac52d6de373890c6bc038b", "committedDate": "2020-08-06T13:23:58Z", "message": "align injection of beans"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNTQ3MjAw", "url": "https://github.com/kiegroup/kogito-apps/pull/339#pullrequestreview-462547200", "createdAt": "2020-08-06T14:00:12Z", "commit": {"oid": "99a20a8ac2a739d7eeac52d6de373890c6bc038b"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDowMDoxMlrOG803ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDowMDoxMlrOG803ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQzMzkzMA==", "bodyText": "?", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r466433930", "createdAt": "2020-08-06T14:00:12Z", "author": {"login": "evacchi"}, "path": "explainability/explainability-api/src/main/java/org/kie/kogito/explainability/api/ExplainabilityResultDto.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.explainability.api;\n+\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+\n+@JsonIgnoreProperties(ignoreUnknown = true)\n+public class ExplainabilityResultDto {\n+    @JsonProperty(\"executionId\")\n+    private String executionId;\n+\n+    // TODO: add properties", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a20a8ac2a739d7eeac52d6de373890c6bc038b"}, "originalPosition": 27}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNTU5NTAy", "url": "https://github.com/kiegroup/kogito-apps/pull/339#pullrequestreview-462559502", "createdAt": "2020-08-06T14:13:30Z", "commit": {"oid": "99a20a8ac2a739d7eeac52d6de373890c6bc038b"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDoxMzozMFrOG81bjA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDoxNjowN1rOG81iTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ0MzE0OA==", "bodyText": "Can you please use \"{}\" instead of \"%s\"?", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r466443148", "createdAt": "2020-08-06T14:13:30Z", "author": {"login": "jiripetrlik"}, "path": "explainability/explainability-service-messaging/src/main/java/org/kie/kogito/explainability/messaging/ExplainabilityMessagingHandler.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.explainability.messaging;\n+\n+import java.net.URI;\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Executor;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import io.cloudevents.v1.AttributesImpl;\n+import io.cloudevents.v1.CloudEventImpl;\n+import io.reactivex.BackpressureStrategy;\n+import io.reactivex.subjects.PublishSubject;\n+import org.eclipse.microprofile.context.ManagedExecutor;\n+import org.eclipse.microprofile.reactive.messaging.Incoming;\n+import org.eclipse.microprofile.reactive.messaging.Message;\n+import org.eclipse.microprofile.reactive.messaging.Outgoing;\n+import org.kie.kogito.explainability.IExplanationService;\n+import org.kie.kogito.explainability.api.ExplainabilityRequestDto;\n+import org.kie.kogito.explainability.api.ExplainabilityResultDto;\n+import org.kie.kogito.explainability.models.ExplainabilityRequest;\n+import org.kie.kogito.tracing.decision.event.CloudEventUtils;\n+import org.reactivestreams.Publisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class ExplainabilityMessagingHandler {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExplainabilityMessagingHandler.class);\n+\n+    private static final URI URI_PRODUCER = URI.create(\"explainabilityService/ExplainabilityMessagingHandler\");\n+    private static final TypeReference<CloudEventImpl<ExplainabilityRequestDto>> CLOUD_EVENT_TYPE = new TypeReference<>() {\n+    };\n+    private final PublishSubject<String> eventSubject = PublishSubject.create();\n+\n+    private Executor executor;\n+\n+    private IExplanationService explanationService;\n+\n+    @Inject\n+    public ExplainabilityMessagingHandler(IExplanationService explanationService, ManagedExecutor executor) {\n+        this.explanationService = explanationService;\n+        this.executor = executor;\n+    }\n+\n+    public ExplainabilityMessagingHandler(IExplanationService explanationService, Executor executor) {\n+        this.explanationService = explanationService;\n+        this.executor = executor;\n+    }\n+\n+    // Incoming\n+    @Incoming(\"trusty-explainability-request\")\n+    public CompletionStage<Void> handleMessage(Message<String> message) {\n+        try {\n+            Optional<CloudEventImpl<ExplainabilityRequestDto>> cloudEventOpt = decodeCloudEvent(message.getPayload());\n+            if (!cloudEventOpt.isPresent()) {\n+                return message.ack();\n+            }\n+\n+            CloudEventImpl<ExplainabilityRequestDto> cloudEvent = cloudEventOpt.get();\n+            return CompletableFuture\n+                    .supplyAsync(() -> handleCloudEvent(cloudEvent), executor)\n+                    .thenAccept(x -> message.ack());\n+        } catch (Exception e) {\n+            LOGGER.error(\"Something unexpected happened during the processing of an Event. The event is discarded.\", e);\n+        }\n+        return message.ack();\n+    }\n+\n+    private Optional<CloudEventImpl<ExplainabilityRequestDto>> decodeCloudEvent(String payload) {\n+        try {\n+            return Optional.of(CloudEventUtils.decode(payload, CLOUD_EVENT_TYPE));\n+        } catch (IllegalStateException e) {\n+            LOGGER.error(String.format(\"Can't decode message to CloudEvent: %s\", payload), e);\n+            return Optional.empty();\n+        }\n+    }\n+\n+    private CompletionStage<Void> handleCloudEvent(CloudEventImpl<ExplainabilityRequestDto> cloudEvent) {\n+        AttributesImpl attributes = cloudEvent.getAttributes();\n+        Optional<ExplainabilityRequestDto> optData = cloudEvent.getData();\n+\n+        if (!optData.isPresent()) {\n+            LOGGER.error(\"Received CloudEvent with id {} from {} with empty data\", attributes.getId(), attributes.getSource());\n+            return CompletableFuture.completedFuture(null);\n+        }\n+\n+        LOGGER.info(\"Received CloudEvent with id {} from {}\", attributes.getId(), attributes.getSource());\n+\n+        ExplainabilityRequestDto explainabilityResult = optData.get();\n+\n+        return explanationService\n+                .explainAsync(ExplainabilityRequest.from(explainabilityResult))\n+                .thenAcceptAsync(this::sendEvent, executor);\n+    }\n+\n+    // Outgoing\n+    public CompletionStage<Void> sendEvent(ExplainabilityResultDto result) {\n+        LOGGER.info(String.format(\"Explainability service emits explainability for execution with ID %s\", result.getExecutionId()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a20a8ac2a739d7eeac52d6de373890c6bc038b"}, "originalPosition": 119}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ0Mzk0NQ==", "bodyText": "Please remove commented code or add some explanation why is useful.", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r466443945", "createdAt": "2020-08-06T14:14:43Z", "author": {"login": "jiripetrlik"}, "path": "explainability/explainability-service/src/main/java/org/kie/kogito/explainability/ExplanationService.java", "diffHunk": "@@ -16,6 +16,29 @@\n \n package org.kie.kogito.explainability;\n \n-public class ExplanationService {\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n \n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.eclipse.microprofile.context.ManagedExecutor;\n+import org.kie.kogito.explainability.api.ExplainabilityResultDto;\n+import org.kie.kogito.explainability.models.ExplainabilityRequest;\n+\n+@ApplicationScoped\n+public class ExplanationService implements IExplanationService {\n+\n+    // private static final LimeExplainer LIME_EXPLAINER = new LimeExplainer(0, 0, 0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a20a8ac2a739d7eeac52d6de373890c6bc038b"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ0NDg3OA==", "bodyText": "Use \"{}\" instead of \"%s\".", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r466444878", "createdAt": "2020-08-06T14:16:07Z", "author": {"login": "jiripetrlik"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/messaging/outgoing/ExplainabilityRequestProducer.java", "diffHunk": "@@ -0,0 +1,56 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.messaging.outgoing;\n+\n+import java.net.URI;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+import io.reactivex.BackpressureStrategy;\n+import io.reactivex.subjects.PublishSubject;\n+import org.eclipse.microprofile.reactive.messaging.Outgoing;\n+import org.kie.kogito.explainability.api.ExplainabilityRequestDto;\n+import org.kie.kogito.tracing.decision.event.CloudEventUtils;\n+import org.reactivestreams.Publisher;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@ApplicationScoped\n+public class ExplainabilityRequestProducer {\n+\n+    private static final Logger LOGGER = LoggerFactory.getLogger(ExplainabilityRequestProducer.class);\n+\n+    private static final URI URI_PRODUCER = URI.create(\"trustyService/ExplainabilityRequestProducer\");\n+\n+    private final PublishSubject<String> eventSubject = PublishSubject.create();\n+\n+    public void sendEvent(ExplainabilityRequestDto request) {\n+        LOGGER.info(String.format(\"Sending explainability request with id %s\", request.getExecutionId()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99a20a8ac2a739d7eeac52d6de373890c6bc038b"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "103633bc047144ee97f025d2236b30016e1c7008", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/103633bc047144ee97f025d2236b30016e1c7008", "committedDate": "2020-08-06T14:23:57Z", "message": "fix string format, remove comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e332ecfc2f7791662b75181325596445ee154c32", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/e332ecfc2f7791662b75181325596445ee154c32", "committedDate": "2020-08-06T14:32:28Z", "message": "use Impl convention"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "835df02043638629a693b399ee85bdf19526330c", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/835df02043638629a693b399ee85bdf19526330c", "committedDate": "2020-08-06T14:33:08Z", "message": "Remove I* for interfaces"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5863d775b48816b7dd985efc0da6b638e3f2513a", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/5863d775b48816b7dd985efc0da6b638e3f2513a", "committedDate": "2020-08-06T14:37:30Z", "message": "use default convention about naming interfaces"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0474557a72d881557213904d995e7d1a297ce89a", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/0474557a72d881557213904d995e7d1a297ce89a", "committedDate": "2020-08-06T15:02:51Z", "message": "fix typo"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNjA4MDg4", "url": "https://github.com/kiegroup/kogito-apps/pull/339#pullrequestreview-462608088", "createdAt": "2020-08-06T15:04:11Z", "commit": {"oid": "0474557a72d881557213904d995e7d1a297ce89a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyNjQwNDUx", "url": "https://github.com/kiegroup/kogito-apps/pull/339#pullrequestreview-462640451", "createdAt": "2020-08-06T15:39:43Z", "commit": {"oid": "0474557a72d881557213904d995e7d1a297ce89a"}, "state": "COMMENTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTozOTo0M1rOG85KyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNTo0NDoxM1rOG85W-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwNDM5Mg==", "bodyText": "Missing @Override", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r466504392", "createdAt": "2020-08-06T15:39:43Z", "author": {"login": "manstis"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/TrustyServiceImpl.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service;\n+\n+import java.time.OffsetDateTime;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+import javax.inject.Inject;\n+\n+import org.eclipse.microprofile.config.inject.ConfigProperty;\n+import org.kie.kogito.explainability.api.ExplainabilityRequestDto;\n+import org.kie.kogito.persistence.api.Storage;\n+import org.kie.kogito.persistence.api.query.AttributeFilter;\n+import org.kie.kogito.persistence.api.query.QueryFilterFactory;\n+import org.kie.kogito.trusty.service.messaging.incoming.ModelIdCreator;\n+import org.kie.kogito.trusty.service.messaging.outgoing.ExplainabilityRequestProducer;\n+import org.kie.kogito.trusty.storage.api.TrustyStorageService;\n+import org.kie.kogito.trusty.storage.api.model.Decision;\n+import org.kie.kogito.trusty.storage.api.model.Execution;\n+import org.kie.kogito.trusty.storage.api.model.ExplainabilityResult;\n+\n+@ApplicationScoped\n+public class TrustyServiceImpl implements TrustyService {\n+\n+    @ConfigProperty(name = \"trusty.explainability.enabled\")\n+    Boolean isExplainabilityEnabled;\n+\n+    @Inject\n+    ExplainabilityRequestProducer explainabilityRequestProducer;\n+\n+    @Inject\n+    TrustyStorageService storageService;\n+\n+    TrustyServiceImpl() {\n+        // dummy constructor needed\n+    }\n+\n+    public TrustyServiceImpl(TrustyStorageService storageService) {\n+        this.storageService = storageService;\n+    }\n+\n+    @Override\n+    public List<Execution> getExecutionHeaders(OffsetDateTime from, OffsetDateTime to, int limit, int offset, String prefix) {\n+        Storage<String, Decision> storage = storageService.getDecisionsStorage();\n+        List<AttributeFilter<?>> filters = new ArrayList<>();\n+        filters.add(QueryFilterFactory.like(Execution.EXECUTION_ID_FIELD, prefix + \"*\"));\n+        filters.add(QueryFilterFactory.greaterThanEqual(Execution.EXECUTION_TIMESTAMP_FIELD, from.toInstant().toEpochMilli()));\n+        filters.add(QueryFilterFactory.lessThanEqual(Execution.EXECUTION_TIMESTAMP_FIELD, to.toInstant().toEpochMilli()));\n+        return new ArrayList<>(storage.query().limit(limit).offset(offset).filter(filters).execute());\n+    }\n+\n+    @Override\n+    public Decision getDecisionById(String executionId) {\n+        Storage<String, Decision> storage = storageService.getDecisionsStorage();\n+        if (!storage.containsKey(executionId)) {\n+            throw new IllegalArgumentException(String.format(\"A decision with ID %s does not exist in the storage.\", executionId));\n+        }\n+        return storage.get(executionId);\n+    }\n+\n+    @Override\n+    public void storeDecision(String executionId, Decision decision) {\n+        Storage<String, Decision> storage = storageService.getDecisionsStorage();\n+        if (storage.containsKey(executionId)) {\n+            throw new IllegalArgumentException(String.format(\"A decision with ID %s is already present in the storage.\", executionId));\n+        }\n+        storage.put(executionId, decision);\n+    }\n+\n+    @Override\n+    public void updateDecision(String executionId, Decision decision) {\n+        storageService.getDecisionsStorage().put(executionId, decision);\n+    }\n+\n+    @Override\n+    public void processDecision(String executionId, Decision decision) {\n+        storeDecision(executionId, decision);\n+        // TODO: Create a proper ExplainabilityRequestDto when all the properties will be defined and available. https://issues.redhat.com/browse/KOGITO-2944\n+        if (Boolean.TRUE.equals(isExplainabilityEnabled)) {\n+            explainabilityRequestProducer.sendEvent(new ExplainabilityRequestDto(executionId));\n+        }\n+    }\n+\n+    @Override\n+    public void storeExplainability(String executionId, ExplainabilityResult result) {\n+        // TODO: Store it https://issues.redhat.com/browse/KOGITO-2945\n+    }\n+\n+    public void storeModel(String groupId, String artifactId, String version, String name, String namespace, String definition) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0474557a72d881557213904d995e7d1a297ce89a"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwNjM4Mg==", "bodyText": "I suspect a class has moved w/o updating the test package too?\nIMO it's nice to keep classes and test classes in the same package where appropriate (as, I believe, is this case).", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r466506382", "createdAt": "2020-08-06T15:42:32Z", "author": {"login": "manstis"}, "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/messaging/ModelEventConsumerTest.java", "diffHunk": "@@ -21,6 +21,7 @@\n import org.junit.jupiter.api.BeforeEach;\n import org.junit.jupiter.api.Test;\n import org.kie.kogito.trusty.service.TrustyService;\n+import org.kie.kogito.trusty.service.messaging.incoming.ModelEventConsumer;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0474557a72d881557213904d995e7d1a297ce89a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwNjQ0Ng==", "bodyText": "As above.", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r466506446", "createdAt": "2020-08-06T15:42:40Z", "author": {"login": "manstis"}, "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/messaging/ModelEventConverterTest.java", "diffHunk": "@@ -17,6 +17,7 @@\n package org.kie.kogito.trusty.service.messaging;\n \n import org.junit.jupiter.api.Test;\n+import org.kie.kogito.trusty.service.messaging.incoming.ModelEventConverter;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0474557a72d881557213904d995e7d1a297ce89a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwNjUzOA==", "bodyText": "As above.", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r466506538", "createdAt": "2020-08-06T15:42:48Z", "author": {"login": "manstis"}, "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/messaging/ModelIdCreatorTest.java", "diffHunk": "@@ -21,6 +21,7 @@\n import org.junit.jupiter.params.ParameterizedTest;\n import org.junit.jupiter.params.provider.Arguments;\n import org.junit.jupiter.params.provider.MethodSource;\n+import org.kie.kogito.trusty.service.messaging.incoming.ModelIdCreator;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0474557a72d881557213904d995e7d1a297ce89a"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjUwNzUxNQ==", "bodyText": "Ouch.. Out of interest do you know why this PR include Typescript reformatting?!\nTypescript changes are probably outside the scope of your PR!", "url": "https://github.com/kiegroup/kogito-apps/pull/339#discussion_r466507515", "createdAt": "2020-08-06T15:44:13Z", "author": {"login": "manstis"}, "path": "ui-packages/packages/management-console/src/components/Atoms/ProcessListModal/ProcessListModal.tsx", "diffHunk": "@@ -28,7 +28,6 @@ const ProcessListModal: React.FC<IOwnProps> = ({\n   operationResult,\n   processName\n }) => {\n-", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0474557a72d881557213904d995e7d1a297ce89a"}, "originalPosition": 4}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4b6ed3484d83d65717b90acaed856760cf505542", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/4b6ed3484d83d65717b90acaed856760cf505542", "committedDate": "2020-08-06T16:21:52Z", "message": "restore tsx resources, move messaging test to module"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e64ea3b7eb0e70c83045c6677eb927f42e2efbf1", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/e64ea3b7eb0e70c83045c6677eb927f42e2efbf1", "committedDate": "2020-08-06T16:29:41Z", "message": "revert tsx files"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "581cf6adb55027e8a80d22e00dadf3a8e5031f2f", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/581cf6adb55027e8a80d22e00dadf3a8e5031f2f", "committedDate": "2020-08-06T16:37:40Z", "message": "revert changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5b75c170d1012c2477b88d0254127628f6d4fe34", "author": {"user": {"login": "r00ta", "name": "Jacopo Rota"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/5b75c170d1012c2477b88d0254127628f6d4fe34", "committedDate": "2020-08-06T16:40:04Z", "message": "revert tsx"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyODM2NTEy", "url": "https://github.com/kiegroup/kogito-apps/pull/339#pullrequestreview-462836512", "createdAt": "2020-08-06T20:02:44Z", "commit": {"oid": "5b75c170d1012c2477b88d0254127628f6d4fe34"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4937, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}