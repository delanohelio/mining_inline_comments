{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA5ODk5MDU0", "number": 503, "title": "KOGITO-3616: Job management section", "bodyText": "Hello,\nThis PR is intended to add new section on management console to display and manage jobs associated with process instances.\nA job can be rescheduled or canceled, also its details can be viewed by selections actions provided on the table.\nJIRA issues:\nhttps://issues.redhat.com/browse/KOGITO-572\nhttps://issues.redhat.com/browse/KOGITO-3616\nhttps://issues.redhat.com/browse/KOGITO-3617", "createdAt": "2020-10-26T09:34:48Z", "url": "https://github.com/kiegroup/kogito-apps/pull/503", "merged": true, "mergeCommit": {"oid": "28e1f603604eea4d4c7b773d6c5f11fd9adf346a"}, "closed": true, "closedAt": "2020-10-30T16:36:24Z", "author": {"login": "Sara4994"}, "timelineItems": {"totalCount": 24, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdWh6VOgFqTUxNzM1Mzc2Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdXonemgFqTUyMDc5MDMwMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE3MzUzNzY3", "url": "https://github.com/kiegroup/kogito-apps/pull/503#pullrequestreview-517353767", "createdAt": "2020-10-27T05:14:09Z", "commit": {"oid": "cc18b679e2fcb5a7f81448eed56e8f36cfd43345"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "44269748676d93746edca575c320b62ad34974ac", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-apps/commit/44269748676d93746edca575c320b62ad34974ac", "committedDate": "2020-10-27T16:15:15Z", "message": "KOGITO-3617: Jobs Management table"}, "afterCommit": {"oid": "83efde753d26554c22057abeafddd2d6d032d7e9", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-apps/commit/83efde753d26554c22057abeafddd2d6d032d7e9", "committedDate": "2020-10-28T05:49:36Z", "message": "KOGITO-3617: Jobs Management table"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "83efde753d26554c22057abeafddd2d6d032d7e9", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-apps/commit/83efde753d26554c22057abeafddd2d6d032d7e9", "committedDate": "2020-10-28T05:49:36Z", "message": "KOGITO-3617: Jobs Management table"}, "afterCommit": {"oid": "21c9902a8b953516211b7094e0b8b7b0214b78ad", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-apps/commit/21c9902a8b953516211b7094e0b8b7b0214b78ad", "committedDate": "2020-10-28T06:00:09Z", "message": "KOGITO-3617: Jobs Management table"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "21c9902a8b953516211b7094e0b8b7b0214b78ad", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-apps/commit/21c9902a8b953516211b7094e0b8b7b0214b78ad", "committedDate": "2020-10-28T06:00:09Z", "message": "KOGITO-3617: Jobs Management table"}, "afterCommit": {"oid": "3234075be22d60097b97cc117f8981c77451d277", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-apps/commit/3234075be22d60097b97cc117f8981c77451d277", "committedDate": "2020-10-28T06:40:20Z", "message": "KOGITO-3617: Jobs Management table"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1528f692317279a5a6448f264474ae9ca6df4590", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-apps/commit/1528f692317279a5a6448f264474ae9ca6df4590", "committedDate": "2020-10-28T06:42:57Z", "message": "KOGITO-3616: Job management section"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3234075be22d60097b97cc117f8981c77451d277", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-apps/commit/3234075be22d60097b97cc117f8981c77451d277", "committedDate": "2020-10-28T06:40:20Z", "message": "KOGITO-3617: Jobs Management table"}, "afterCommit": {"oid": "6ea29f1ffad51b1b391fb1ba758875237bf44b13", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-apps/commit/6ea29f1ffad51b1b391fb1ba758875237bf44b13", "committedDate": "2020-10-28T10:06:26Z", "message": "KOGITO-3617: Jobs Management table"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6ea29f1ffad51b1b391fb1ba758875237bf44b13", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-apps/commit/6ea29f1ffad51b1b391fb1ba758875237bf44b13", "committedDate": "2020-10-28T10:06:26Z", "message": "KOGITO-3617: Jobs Management table"}, "afterCommit": {"oid": "b27a2957ab934be6c2ddcbe22f580b43e28f108b", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-apps/commit/b27a2957ab934be6c2ddcbe22f580b43e28f108b", "committedDate": "2020-10-28T17:41:13Z", "message": "KOGITO-3617: Jobs Management table"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b27a2957ab934be6c2ddcbe22f580b43e28f108b", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-apps/commit/b27a2957ab934be6c2ddcbe22f580b43e28f108b", "committedDate": "2020-10-28T17:41:13Z", "message": "KOGITO-3617: Jobs Management table"}, "afterCommit": {"oid": "ee5998ca5d9dfc8e2e6873035ba389329173319c", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-apps/commit/ee5998ca5d9dfc8e2e6873035ba389329173319c", "committedDate": "2020-10-29T06:57:55Z", "message": "KOGITO-3617: Jobs Management table"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ee5998ca5d9dfc8e2e6873035ba389329173319c", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-apps/commit/ee5998ca5d9dfc8e2e6873035ba389329173319c", "committedDate": "2020-10-29T06:57:55Z", "message": "KOGITO-3617: Jobs Management table"}, "afterCommit": {"oid": "b9ff701e3a707e72067a64b6b43b15c2ab9f5e4d", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-apps/commit/b9ff701e3a707e72067a64b6b43b15c2ab9f5e4d", "committedDate": "2020-10-29T07:38:01Z", "message": "KOGITO-3617: Jobs Management table"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b9ff701e3a707e72067a64b6b43b15c2ab9f5e4d", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-apps/commit/b9ff701e3a707e72067a64b6b43b15c2ab9f5e4d", "committedDate": "2020-10-29T07:38:01Z", "message": "KOGITO-3617: Jobs Management table"}, "afterCommit": {"oid": "2d7357a3d796cd2bdd438e9bdd7002d328d52f1e", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-apps/commit/2d7357a3d796cd2bdd438e9bdd7002d328d52f1e", "committedDate": "2020-10-29T09:56:09Z", "message": "KOGITO-3617: Jobs Management table"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "2d7357a3d796cd2bdd438e9bdd7002d328d52f1e", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-apps/commit/2d7357a3d796cd2bdd438e9bdd7002d328d52f1e", "committedDate": "2020-10-29T09:56:09Z", "message": "KOGITO-3617: Jobs Management table"}, "afterCommit": {"oid": "9b2c830d08154ab0f3f109a30d9957e36641b1e6", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-apps/commit/9b2c830d08154ab0f3f109a30d9957e36641b1e6", "committedDate": "2020-10-29T10:01:04Z", "message": "KOGITO-3617: Jobs Management table"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9b2c830d08154ab0f3f109a30d9957e36641b1e6", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-apps/commit/9b2c830d08154ab0f3f109a30d9957e36641b1e6", "committedDate": "2020-10-29T10:01:04Z", "message": "KOGITO-3617: Jobs Management table"}, "afterCommit": {"oid": "9d4c24d39e748378e2a0140621e9cb0426a347e0", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-apps/commit/9d4c24d39e748378e2a0140621e9cb0426a347e0", "committedDate": "2020-10-29T10:02:52Z", "message": "KOGITO-3617: Jobs Management table"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9d4c24d39e748378e2a0140621e9cb0426a347e0", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-apps/commit/9d4c24d39e748378e2a0140621e9cb0426a347e0", "committedDate": "2020-10-29T10:02:52Z", "message": "KOGITO-3617: Jobs Management table"}, "afterCommit": {"oid": "3cbb9db691075639f1c3c1ada1db6599cdb0706c", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-apps/commit/3cbb9db691075639f1c3c1ada1db6599cdb0706c", "committedDate": "2020-10-29T10:47:31Z", "message": "KOGITO-3617: Jobs Management table"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3cbb9db691075639f1c3c1ada1db6599cdb0706c", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-apps/commit/3cbb9db691075639f1c3c1ada1db6599cdb0706c", "committedDate": "2020-10-29T10:47:31Z", "message": "KOGITO-3617: Jobs Management table"}, "afterCommit": {"oid": "cbe53f5e82c35d5641dcb6c5fd0b9ab9456ba4c1", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-apps/commit/cbe53f5e82c35d5641dcb6c5fd0b9ab9456ba4c1", "committedDate": "2020-10-29T13:09:23Z", "message": "KOGITO-3617: Jobs Management table"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5NzU0ODMw", "url": "https://github.com/kiegroup/kogito-apps/pull/503#pullrequestreview-519754830", "createdAt": "2020-10-29T14:56:05Z", "commit": {"oid": "cbe53f5e82c35d5641dcb6c5fd0b9ab9456ba4c1"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDo1NjowNlrOHqf2mw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNTo0NToxNFrOHqiRJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyNDEyMw==", "bodyText": "@Sara4994 Here I miss expirationTime", "url": "https://github.com/kiegroup/kogito-apps/pull/503#discussion_r514324123", "createdAt": "2020-10-29T14:56:06Z", "author": {"login": "nmirasch"}, "path": "ui-packages/packages/common/src/graphql/queries.tsx", "diffHunk": "@@ -337,7 +337,27 @@ const GET_JOBS_BY_PROC_INST_ID = gql`\n       scheduledId\n       retries\n       lastUpdate", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbe53f5e82c35d5641dcb6c5fd0b9ab9456ba4c1"}, "originalPosition": 3}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM1MjU4Nw==", "bodyText": "@Sara4994 I guess this is related with the previous comment", "url": "https://github.com/kiegroup/kogito-apps/pull/503#discussion_r514352587", "createdAt": "2020-10-29T15:31:53Z", "author": {"login": "nmirasch"}, "path": "ui-packages/packages/common/src/graphql/types.tsx", "diffHunk": "@@ -1988,7 +2016,6 @@ export namespace GraphQL {\n         scheduledId\n         retries\n         lastUpdate\n-        expirationTime", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbe53f5e82c35d5641dcb6c5fd0b9ab9456ba4c1"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM2MzY4Nw==", "bodyText": "@Sara4994 we are repeating code here that we already have in JobActionsKebab. We need to reuse as much as possible in order to unify and maintain consistency.", "url": "https://github.com/kiegroup/kogito-apps/pull/503#discussion_r514363687", "createdAt": "2020-10-29T15:45:14Z", "author": {"login": "nmirasch"}, "path": "ui-packages/packages/management-console/src/components/Organisms/JobsManagementTable/JobsManagementTable.tsx", "diffHunk": "@@ -0,0 +1,211 @@\n+import React, { useState, useEffect } from 'react';\n+import { Table, TableBody, TableHeader, IRow } from '@patternfly/react-table';\n+import { OUIAProps, componentOuiaProps, GraphQL } from '@kogito-apps/common';\n+import { Tooltip } from '@patternfly/react-core';\n+import { JobsIconCreator, jobCancel, setTitle } from '../../../utils/Utils';\n+import Moment from 'react-moment';\n+import { HistoryIcon } from '@patternfly/react-icons';\n+import { refetchContext } from '../../contexts';\n+\n+interface actionsMeta {\n+  title: string;\n+  onClick: (event, rowId, rowData, extra) => void;\n+}\n+interface rowTitle {\n+  title: JSX.Element;\n+}\n+interface retrievedValueType {\n+  tempRows: rowTitle[];\n+  jobType: string;\n+}\n+interface IOwnProps {\n+  data: GraphQL.GetAllJobsQuery;\n+  handleDetailsToggle: () => void;\n+  handleRescheduleToggle: () => void;\n+  handleCancelModalToggle: () => void;\n+  setModalTitle: (modalTitle: JSX.Element) => void;\n+  setModalContent: (modalContent: string) => void;\n+  setSelectedJob: (job: GraphQL.Job) => void;\n+}\n+\n+const JobsManagementTable: React.FC<IOwnProps & OUIAProps> = ({\n+  data,\n+  handleDetailsToggle,\n+  handleRescheduleToggle,\n+  handleCancelModalToggle,\n+  setModalTitle,\n+  setModalContent,\n+  setSelectedJob,\n+  ouiaId,\n+  ouiaSafe\n+}) => {\n+  const [rows, setRows] = useState<IRow[]>([]);\n+  const editableJobStatus: string[] = ['SCHEDULED', 'ERROR'];\n+  const columns: string[] = ['Id', 'Status', 'Expiration time', 'Last update'];\n+  const jobRow: IRow[] = [];\n+\n+  const handleJobDetails = (id): void => {\n+    const job = data.Jobs.find(job => job.id === id);\n+    setSelectedJob(job);\n+    handleDetailsToggle();\n+  };\n+\n+  const handleJobReschedule = (id): void => {\n+    const job = data.Jobs.find(job => job.id === id);\n+    setSelectedJob(job);\n+    handleRescheduleToggle();\n+  };\n+\n+  const refetch = React.useContext(refetchContext);\n+\n+  const handleCancelAction = (id): void => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbe53f5e82c35d5641dcb6c5fd0b9ab9456ba4c1"}, "originalPosition": 61}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwNTk3NzY3", "url": "https://github.com/kiegroup/kogito-apps/pull/503#pullrequestreview-520597767", "createdAt": "2020-10-30T11:53:18Z", "commit": {"oid": "cbe53f5e82c35d5641dcb6c5fd0b9ab9456ba4c1"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMTo1MzoxOFrOHrL1dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMjowOTowNVrOHrMU2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA0NDcyNQ==", "bodyText": "whitespace formatting.", "url": "https://github.com/kiegroup/kogito-apps/pull/503#discussion_r515044725", "createdAt": "2020-10-30T11:53:18Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/management-console/server/server.js", "diffHunk": "@@ -153,13 +153,19 @@ const resolvers = {\n       return result;\n     },\n     Jobs: async (parent, args) => {\n-      const result = data.JobsData.filter(jobData => {\n-        console.log('Job data args->', args['where'].processInstanceId)\n-        if (args['where'].processInstanceId && args['where'].processInstanceId.equal) {\n-          return jobData.processInstanceId == args['where'].processInstanceId.equal;\n-        }\n-      });\n-      return result;\n+      if(Object.keys(args).length> 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbe53f5e82c35d5641dcb6c5fd0b9ab9456ba4c1"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA0NTUxMQ==", "bodyText": "I would suggest capital initial letter in interface names.", "url": "https://github.com/kiegroup/kogito-apps/pull/503#discussion_r515045511", "createdAt": "2020-10-30T11:54:40Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/management-console/src/components/Organisms/JobsManagementTable/JobsManagementTable.tsx", "diffHunk": "@@ -0,0 +1,211 @@\n+import React, { useState, useEffect } from 'react';\n+import { Table, TableBody, TableHeader, IRow } from '@patternfly/react-table';\n+import { OUIAProps, componentOuiaProps, GraphQL } from '@kogito-apps/common';\n+import { Tooltip } from '@patternfly/react-core';\n+import { JobsIconCreator, jobCancel, setTitle } from '../../../utils/Utils';\n+import Moment from 'react-moment';\n+import { HistoryIcon } from '@patternfly/react-icons';\n+import { refetchContext } from '../../contexts';\n+\n+interface actionsMeta {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbe53f5e82c35d5641dcb6c5fd0b9ab9456ba4c1"}, "originalPosition": 10}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA0NjEwOQ==", "bodyText": "cancelled -> canceled to be in sync", "url": "https://github.com/kiegroup/kogito-apps/pull/503#discussion_r515046109", "createdAt": "2020-10-30T11:55:44Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/management-console/src/components/Organisms/JobsManagementTable/JobsManagementTable.tsx", "diffHunk": "@@ -0,0 +1,211 @@\n+import React, { useState, useEffect } from 'react';\n+import { Table, TableBody, TableHeader, IRow } from '@patternfly/react-table';\n+import { OUIAProps, componentOuiaProps, GraphQL } from '@kogito-apps/common';\n+import { Tooltip } from '@patternfly/react-core';\n+import { JobsIconCreator, jobCancel, setTitle } from '../../../utils/Utils';\n+import Moment from 'react-moment';\n+import { HistoryIcon } from '@patternfly/react-icons';\n+import { refetchContext } from '../../contexts';\n+\n+interface actionsMeta {\n+  title: string;\n+  onClick: (event, rowId, rowData, extra) => void;\n+}\n+interface rowTitle {\n+  title: JSX.Element;\n+}\n+interface retrievedValueType {\n+  tempRows: rowTitle[];\n+  jobType: string;\n+}\n+interface IOwnProps {\n+  data: GraphQL.GetAllJobsQuery;\n+  handleDetailsToggle: () => void;\n+  handleRescheduleToggle: () => void;\n+  handleCancelModalToggle: () => void;\n+  setModalTitle: (modalTitle: JSX.Element) => void;\n+  setModalContent: (modalContent: string) => void;\n+  setSelectedJob: (job: GraphQL.Job) => void;\n+}\n+\n+const JobsManagementTable: React.FC<IOwnProps & OUIAProps> = ({\n+  data,\n+  handleDetailsToggle,\n+  handleRescheduleToggle,\n+  handleCancelModalToggle,\n+  setModalTitle,\n+  setModalContent,\n+  setSelectedJob,\n+  ouiaId,\n+  ouiaSafe\n+}) => {\n+  const [rows, setRows] = useState<IRow[]>([]);\n+  const editableJobStatus: string[] = ['SCHEDULED', 'ERROR'];\n+  const columns: string[] = ['Id', 'Status', 'Expiration time', 'Last update'];\n+  const jobRow: IRow[] = [];\n+\n+  const handleJobDetails = (id): void => {\n+    const job = data.Jobs.find(job => job.id === id);\n+    setSelectedJob(job);\n+    handleDetailsToggle();\n+  };\n+\n+  const handleJobReschedule = (id): void => {\n+    const job = data.Jobs.find(job => job.id === id);\n+    setSelectedJob(job);\n+    handleRescheduleToggle();\n+  };\n+\n+  const refetch = React.useContext(refetchContext);\n+\n+  const handleCancelAction = (id): void => {\n+    const job = data.Jobs.find(job => job.id === id);\n+    jobCancel(\n+      job,\n+      () => {\n+        setModalTitle(setTitle('success', 'Job cancel'));\n+        setModalContent(`The job: ${job.id} is cancelled successfully`);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbe53f5e82c35d5641dcb6c5fd0b9ab9456ba4c1"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA0NjQ5Mw==", "bodyText": "cancelled -> canceled", "url": "https://github.com/kiegroup/kogito-apps/pull/503#discussion_r515046493", "createdAt": "2020-10-30T11:56:27Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/management-console/src/components/Atoms/JobActionsKebab/JobActionsKebab.tsx", "diffHunk": "@@ -51,6 +52,8 @@ const JobActionsKebab: React.FC<IOwnProps & OUIAProps> = ({\n     setRescheduleClicked(!rescheduleClicked);\n   };\n \n+  const refetch = React.useContext(refetchContext);\n+\n   const handleCancelAction = (): void => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbe53f5e82c35d5641dcb6c5fd0b9ab9456ba4c1"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA0NjUzNw==", "bodyText": "+1 to that", "url": "https://github.com/kiegroup/kogito-apps/pull/503#discussion_r515046537", "createdAt": "2020-10-30T11:56:34Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/management-console/src/components/Organisms/JobsManagementTable/JobsManagementTable.tsx", "diffHunk": "@@ -0,0 +1,211 @@\n+import React, { useState, useEffect } from 'react';\n+import { Table, TableBody, TableHeader, IRow } from '@patternfly/react-table';\n+import { OUIAProps, componentOuiaProps, GraphQL } from '@kogito-apps/common';\n+import { Tooltip } from '@patternfly/react-core';\n+import { JobsIconCreator, jobCancel, setTitle } from '../../../utils/Utils';\n+import Moment from 'react-moment';\n+import { HistoryIcon } from '@patternfly/react-icons';\n+import { refetchContext } from '../../contexts';\n+\n+interface actionsMeta {\n+  title: string;\n+  onClick: (event, rowId, rowData, extra) => void;\n+}\n+interface rowTitle {\n+  title: JSX.Element;\n+}\n+interface retrievedValueType {\n+  tempRows: rowTitle[];\n+  jobType: string;\n+}\n+interface IOwnProps {\n+  data: GraphQL.GetAllJobsQuery;\n+  handleDetailsToggle: () => void;\n+  handleRescheduleToggle: () => void;\n+  handleCancelModalToggle: () => void;\n+  setModalTitle: (modalTitle: JSX.Element) => void;\n+  setModalContent: (modalContent: string) => void;\n+  setSelectedJob: (job: GraphQL.Job) => void;\n+}\n+\n+const JobsManagementTable: React.FC<IOwnProps & OUIAProps> = ({\n+  data,\n+  handleDetailsToggle,\n+  handleRescheduleToggle,\n+  handleCancelModalToggle,\n+  setModalTitle,\n+  setModalContent,\n+  setSelectedJob,\n+  ouiaId,\n+  ouiaSafe\n+}) => {\n+  const [rows, setRows] = useState<IRow[]>([]);\n+  const editableJobStatus: string[] = ['SCHEDULED', 'ERROR'];\n+  const columns: string[] = ['Id', 'Status', 'Expiration time', 'Last update'];\n+  const jobRow: IRow[] = [];\n+\n+  const handleJobDetails = (id): void => {\n+    const job = data.Jobs.find(job => job.id === id);\n+    setSelectedJob(job);\n+    handleDetailsToggle();\n+  };\n+\n+  const handleJobReschedule = (id): void => {\n+    const job = data.Jobs.find(job => job.id === id);\n+    setSelectedJob(job);\n+    handleRescheduleToggle();\n+  };\n+\n+  const refetch = React.useContext(refetchContext);\n+\n+  const handleCancelAction = (id): void => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDM2MzY4Nw=="}, "originalCommit": {"oid": "cbe53f5e82c35d5641dcb6c5fd0b9ab9456ba4c1"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA0NjgwOQ==", "bodyText": "Maybe initial capital letter to be in sync with Non-editable below?", "url": "https://github.com/kiegroup/kogito-apps/pull/503#discussion_r515046809", "createdAt": "2020-10-30T11:57:06Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/management-console/src/components/Organisms/JobsManagementTable/JobsManagementTable.tsx", "diffHunk": "@@ -0,0 +1,211 @@\n+import React, { useState, useEffect } from 'react';\n+import { Table, TableBody, TableHeader, IRow } from '@patternfly/react-table';\n+import { OUIAProps, componentOuiaProps, GraphQL } from '@kogito-apps/common';\n+import { Tooltip } from '@patternfly/react-core';\n+import { JobsIconCreator, jobCancel, setTitle } from '../../../utils/Utils';\n+import Moment from 'react-moment';\n+import { HistoryIcon } from '@patternfly/react-icons';\n+import { refetchContext } from '../../contexts';\n+\n+interface actionsMeta {\n+  title: string;\n+  onClick: (event, rowId, rowData, extra) => void;\n+}\n+interface rowTitle {\n+  title: JSX.Element;\n+}\n+interface retrievedValueType {\n+  tempRows: rowTitle[];\n+  jobType: string;\n+}\n+interface IOwnProps {\n+  data: GraphQL.GetAllJobsQuery;\n+  handleDetailsToggle: () => void;\n+  handleRescheduleToggle: () => void;\n+  handleCancelModalToggle: () => void;\n+  setModalTitle: (modalTitle: JSX.Element) => void;\n+  setModalContent: (modalContent: string) => void;\n+  setSelectedJob: (job: GraphQL.Job) => void;\n+}\n+\n+const JobsManagementTable: React.FC<IOwnProps & OUIAProps> = ({\n+  data,\n+  handleDetailsToggle,\n+  handleRescheduleToggle,\n+  handleCancelModalToggle,\n+  setModalTitle,\n+  setModalContent,\n+  setSelectedJob,\n+  ouiaId,\n+  ouiaSafe\n+}) => {\n+  const [rows, setRows] = useState<IRow[]>([]);\n+  const editableJobStatus: string[] = ['SCHEDULED', 'ERROR'];\n+  const columns: string[] = ['Id', 'Status', 'Expiration time', 'Last update'];\n+  const jobRow: IRow[] = [];\n+\n+  const handleJobDetails = (id): void => {\n+    const job = data.Jobs.find(job => job.id === id);\n+    setSelectedJob(job);\n+    handleDetailsToggle();\n+  };\n+\n+  const handleJobReschedule = (id): void => {\n+    const job = data.Jobs.find(job => job.id === id);\n+    setSelectedJob(job);\n+    handleRescheduleToggle();\n+  };\n+\n+  const refetch = React.useContext(refetchContext);\n+\n+  const handleCancelAction = (id): void => {\n+    const job = data.Jobs.find(job => job.id === id);\n+    jobCancel(\n+      job,\n+      () => {\n+        setModalTitle(setTitle('success', 'Job cancel'));\n+        setModalContent(`The job: ${job.id} is cancelled successfully`);\n+      },\n+      errorMessage => {\n+        setModalTitle(setTitle('failure', 'Job cancel'));\n+        setModalContent(\n+          `The job: ${job.id} failed to cancel. Error message: ${errorMessage}`\n+        );\n+      },\n+      refetch\n+    );\n+    handleCancelModalToggle();\n+  };\n+\n+  const dynamicActions = rowData => {\n+    if (rowData.type === 'editable') {\n+      return [\n+        {\n+          title: 'Reschedule',\n+          onClick: (event, rowId, rowData, extra) =>\n+            handleJobReschedule(rowData.rowKey)\n+        },\n+        {\n+          title: 'Cancel',\n+          onClick: (event, rowId, rowData, extra) =>\n+            handleCancelAction(rowData.rowKey)\n+        }\n+      ];\n+    } else {\n+      return [];\n+    }\n+  };\n+\n+  const actionResolver = (rowData): actionsMeta[] => {\n+    const editActions = dynamicActions(rowData);\n+    return [\n+      {\n+        title: 'Details',\n+        onClick: (event, rowId, rowData, extra) =>\n+          handleJobDetails(rowData.rowKey)\n+      },\n+      ...editActions\n+    ];\n+  };\n+\n+  const getValues = (job): retrievedValueType => {\n+    const tempRows: rowTitle[] = [];\n+    let jobType: string = '';\n+    for (const item in job) {\n+      if (item === 'id') {\n+        const ele = {\n+          title: (\n+            <Tooltip content={job.id}>\n+              <span>{job.id}</span>\n+            </Tooltip>\n+          )\n+        };\n+        tempRows.push(ele);\n+      } else if (item === 'status') {\n+        const ele = {\n+          title: JobsIconCreator(job.status)\n+        };\n+        if (editableJobStatus.includes(job[item])) {\n+          jobType = 'editable';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbe53f5e82c35d5641dcb6c5fd0b9ab9456ba4c1"}, "originalPosition": 129}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA0Nzc2Ng==", "bodyText": "filtering is not planned / implemented right now, correct? Meaning - rows are all data there's here, it's not dependent on some sort of filtering?", "url": "https://github.com/kiegroup/kogito-apps/pull/503#discussion_r515047766", "createdAt": "2020-10-30T11:59:05Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/management-console/src/components/Organisms/JobsManagementTable/JobsManagementTable.tsx", "diffHunk": "@@ -0,0 +1,211 @@\n+import React, { useState, useEffect } from 'react';\n+import { Table, TableBody, TableHeader, IRow } from '@patternfly/react-table';\n+import { OUIAProps, componentOuiaProps, GraphQL } from '@kogito-apps/common';\n+import { Tooltip } from '@patternfly/react-core';\n+import { JobsIconCreator, jobCancel, setTitle } from '../../../utils/Utils';\n+import Moment from 'react-moment';\n+import { HistoryIcon } from '@patternfly/react-icons';\n+import { refetchContext } from '../../contexts';\n+\n+interface actionsMeta {\n+  title: string;\n+  onClick: (event, rowId, rowData, extra) => void;\n+}\n+interface rowTitle {\n+  title: JSX.Element;\n+}\n+interface retrievedValueType {\n+  tempRows: rowTitle[];\n+  jobType: string;\n+}\n+interface IOwnProps {\n+  data: GraphQL.GetAllJobsQuery;\n+  handleDetailsToggle: () => void;\n+  handleRescheduleToggle: () => void;\n+  handleCancelModalToggle: () => void;\n+  setModalTitle: (modalTitle: JSX.Element) => void;\n+  setModalContent: (modalContent: string) => void;\n+  setSelectedJob: (job: GraphQL.Job) => void;\n+}\n+\n+const JobsManagementTable: React.FC<IOwnProps & OUIAProps> = ({\n+  data,\n+  handleDetailsToggle,\n+  handleRescheduleToggle,\n+  handleCancelModalToggle,\n+  setModalTitle,\n+  setModalContent,\n+  setSelectedJob,\n+  ouiaId,\n+  ouiaSafe\n+}) => {\n+  const [rows, setRows] = useState<IRow[]>([]);\n+  const editableJobStatus: string[] = ['SCHEDULED', 'ERROR'];\n+  const columns: string[] = ['Id', 'Status', 'Expiration time', 'Last update'];\n+  const jobRow: IRow[] = [];\n+\n+  const handleJobDetails = (id): void => {\n+    const job = data.Jobs.find(job => job.id === id);\n+    setSelectedJob(job);\n+    handleDetailsToggle();\n+  };\n+\n+  const handleJobReschedule = (id): void => {\n+    const job = data.Jobs.find(job => job.id === id);\n+    setSelectedJob(job);\n+    handleRescheduleToggle();\n+  };\n+\n+  const refetch = React.useContext(refetchContext);\n+\n+  const handleCancelAction = (id): void => {\n+    const job = data.Jobs.find(job => job.id === id);\n+    jobCancel(\n+      job,\n+      () => {\n+        setModalTitle(setTitle('success', 'Job cancel'));\n+        setModalContent(`The job: ${job.id} is cancelled successfully`);\n+      },\n+      errorMessage => {\n+        setModalTitle(setTitle('failure', 'Job cancel'));\n+        setModalContent(\n+          `The job: ${job.id} failed to cancel. Error message: ${errorMessage}`\n+        );\n+      },\n+      refetch\n+    );\n+    handleCancelModalToggle();\n+  };\n+\n+  const dynamicActions = rowData => {\n+    if (rowData.type === 'editable') {\n+      return [\n+        {\n+          title: 'Reschedule',\n+          onClick: (event, rowId, rowData, extra) =>\n+            handleJobReschedule(rowData.rowKey)\n+        },\n+        {\n+          title: 'Cancel',\n+          onClick: (event, rowId, rowData, extra) =>\n+            handleCancelAction(rowData.rowKey)\n+        }\n+      ];\n+    } else {\n+      return [];\n+    }\n+  };\n+\n+  const actionResolver = (rowData): actionsMeta[] => {\n+    const editActions = dynamicActions(rowData);\n+    return [\n+      {\n+        title: 'Details',\n+        onClick: (event, rowId, rowData, extra) =>\n+          handleJobDetails(rowData.rowKey)\n+      },\n+      ...editActions\n+    ];\n+  };\n+\n+  const getValues = (job): retrievedValueType => {\n+    const tempRows: rowTitle[] = [];\n+    let jobType: string = '';\n+    for (const item in job) {\n+      if (item === 'id') {\n+        const ele = {\n+          title: (\n+            <Tooltip content={job.id}>\n+              <span>{job.id}</span>\n+            </Tooltip>\n+          )\n+        };\n+        tempRows.push(ele);\n+      } else if (item === 'status') {\n+        const ele = {\n+          title: JobsIconCreator(job.status)\n+        };\n+        if (editableJobStatus.includes(job[item])) {\n+          jobType = 'editable';\n+        } else {\n+          jobType = 'Non-editable';\n+        }\n+        tempRows.push(ele);\n+      } else if (item === 'expirationTime') {\n+        const ele = {\n+          title: (\n+            <React.Fragment>\n+              {job.expirationTime ? (\n+                <>\n+                  {' '}\n+                  expires in{' '}\n+                  <Moment fromNow ago>\n+                    {job.expirationTime}\n+                  </Moment>\n+                </>\n+              ) : (\n+                'N/A'\n+              )}\n+            </React.Fragment>\n+          )\n+        };\n+        tempRows.push(ele);\n+      } else if (item === 'lastUpdate') {\n+        const ele = {\n+          title: (\n+            <>\n+              <HistoryIcon className=\"pf-u-mr-sm\" /> Updated{' '}\n+              <Moment fromNow>{job.lastUpdate}</Moment>\n+            </>\n+          )\n+        };\n+        tempRows.push(ele);\n+      }\n+    }\n+    return { tempRows, jobType };\n+  };\n+\n+  const tableContent = (): void => {\n+    data.Jobs.map(job => {\n+      const retrievedValue = getValues(job);\n+      jobRow.push({\n+        cells: retrievedValue.tempRows,\n+        type: retrievedValue.jobType,\n+        rowKey: job.id\n+      });\n+    });\n+    /* istanbul ignore else */\n+    if (jobRow) {\n+      setRows(prev => [...prev, ...jobRow]);\n+    }\n+  };\n+\n+  const onSelect = (): void => {\n+    return null;\n+  };\n+\n+  useEffect(() => {\n+    tableContent();\n+  }, [data]);\n+\n+  return (\n+    <>\n+      {rows.length > 0 && (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbe53f5e82c35d5641dcb6c5fd0b9ab9456ba4c1"}, "originalPosition": 193}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA0ODQ1OQ==", "bodyText": "mock also Date.now, I've seen some time sensitive items in the component definition.", "url": "https://github.com/kiegroup/kogito-apps/pull/503#discussion_r515048459", "createdAt": "2020-10-30T12:00:27Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/management-console/src/components/Organisms/JobsManagementTable/tests/JobsManagementTable.test.tsx", "diffHunk": "@@ -0,0 +1,252 @@\n+import React from 'react';\n+import JobsManagementTable from '../JobsManagementTable';\n+import { getWrapperAsync, GraphQL } from '@kogito-apps/common';\n+import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\n+import { act } from 'react-dom/test-utils';\n+import * as Utils from '../../../../utils/Utils';\n+import axios from 'axios';\n+import { refetchContext } from '../../../contexts';\n+jest.mock('axios');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbe53f5e82c35d5641dcb6c5fd0b9ab9456ba4c1"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA1MTU4OQ==", "bodyText": "maybe add a period in the end of sentences started with capital letters?", "url": "https://github.com/kiegroup/kogito-apps/pull/503#discussion_r515051589", "createdAt": "2020-10-30T12:06:37Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/management-console/src/components/Templates/JobsManagementPage/JobsManagementPage.tsx", "diffHunk": "@@ -0,0 +1,209 @@\n+import React, { useState, useEffect } from 'react';\n+import { Link, Redirect } from 'react-router-dom';\n+import {\n+  componentOuiaProps,\n+  GraphQL,\n+  KogitoSpinner,\n+  ouiaPageTypeAndObjectId,\n+  OUIAProps,\n+  ServerErrors\n+} from '@kogito-apps/common';\n+import PageTitle from '../../Molecules/PageTitle/PageTitle';\n+import {\n+  Breadcrumb,\n+  BreadcrumbItem,\n+  Bullseye,\n+  Button,\n+  Card,\n+  CardBody,\n+  PageSection,\n+  Toolbar,\n+  ToolbarContent,\n+  ToolbarGroup,\n+  ToolbarItem\n+} from '@patternfly/react-core';\n+import JobsManagementTable from '../../Organisms/JobsManagementTable/JobsManagementTable';\n+import JobsPanelDetailsModal from '../../Atoms/JobsPanelDetailsModal/JobsPanelDetailsModal';\n+import JobsRescheduleModal from '../../Atoms/JobsRescheduleModal/JobsRescheduleModal';\n+import { refetchContext } from '../../contexts';\n+import { setTitle } from '../../../utils/Utils';\n+import JobsCancelModal from '../../Atoms/JobsCancelModal/JobsCancelModal';\n+import { SyncIcon } from '@patternfly/react-icons';\n+\n+const JobsManagementPage: React.FC<OUIAProps> = ({ ouiaId, ouiaSafe }) => {\n+  const { loading, data, error, refetch } = GraphQL.useGetAllJobsQuery({\n+    fetchPolicy: 'network-only',\n+    notifyOnNetworkStatusChange: true\n+  });\n+  const [isDetailsModalOpen, setIsDetailsModalOpen] = useState<boolean>(false);\n+  const [isRescheduleModalOpen, setIsRescheduleModalOpen] = useState<boolean>(\n+    false\n+  );\n+  const [isCancelModalOpen, setIsCancelModalOpen] = useState<boolean>(false);\n+  const [modalTitle, setModalTitle] = useState<JSX.Element>(null);\n+  const [modalContent, setModalContent] = useState<string>('');\n+  const [selectedJob, setSelectedJob] = useState<any>({});\n+  useEffect(() => {\n+    return ouiaPageTypeAndObjectId('jobs-management');\n+  });\n+\n+  const handleDetailsToggle = (): void => {\n+    setIsDetailsModalOpen(!isDetailsModalOpen);\n+  };\n+\n+  const handleRescheduleToggle = (): void => {\n+    setIsRescheduleModalOpen(!isRescheduleModalOpen);\n+  };\n+\n+  const handleCancelModalToggle = (): void => {\n+    setIsCancelModalOpen(!isCancelModalOpen);\n+  };\n+\n+  const detailsAction: JSX.Element[] = [\n+    <Button\n+      key=\"confirm-selection\"\n+      variant=\"primary\"\n+      onClick={handleDetailsToggle}\n+    >\n+      OK\n+    </Button>\n+  ];\n+\n+  const rescheduleActions: JSX.Element[] = [\n+    <Button\n+      key=\"cancel-reschedule\"\n+      variant=\"secondary\"\n+      onClick={handleRescheduleToggle}\n+    >\n+      Cancel\n+    </Button>\n+  ];\n+\n+  const onRefresh = (): void => {\n+    window.location.reload();\n+  };\n+\n+  const renderToolbar = (): JSX.Element => {\n+    return (\n+      <Toolbar\n+        id=\"data-toolbar-with-chip-groups\"\n+        className=\"pf-m-toggle-group-container\"\n+        collapseListedFiltersBreakpoint=\"md\"\n+      >\n+        <ToolbarContent>\n+          <ToolbarGroup>\n+            <ToolbarItem>\n+              <Button\n+                variant=\"plain\"\n+                onClick={() => {\n+                  onRefresh();\n+                }}\n+                id=\"refresh-button\"\n+                ouiaId=\"refresh-button\"\n+                aria-label={'Refresh list'}\n+              >\n+                <SyncIcon />\n+              </Button>\n+            </ToolbarItem>\n+          </ToolbarGroup>\n+        </ToolbarContent>\n+      </Toolbar>\n+    );\n+  };\n+\n+  if (data) {\n+    if (!loading && data.Jobs.length === 0) {\n+      return (\n+        <Redirect\n+          to={{\n+            pathname: '/NoData',\n+            state: {\n+              prev: '/ProcessInstances',\n+              title: 'Jobs not found',\n+              description: `There are no jobs associated with any process instance`,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbe53f5e82c35d5641dcb6c5fd0b9ab9456ba4c1"}, "originalPosition": 123}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA1MTk2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <div {...componentOuiaProps(ouiaId, 'JobsManagementPage', ouiaSafe)}>\n          \n          \n            \n                <div {...componentOuiaProps(ouiaId, 'JobsManagementPage', ouiaSafe?ouiaSafe:!isLoading())}>", "url": "https://github.com/kiegroup/kogito-apps/pull/503#discussion_r515051969", "createdAt": "2020-10-30T12:07:23Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/management-console/src/components/Templates/JobsManagementPage/JobsManagementPage.tsx", "diffHunk": "@@ -0,0 +1,209 @@\n+import React, { useState, useEffect } from 'react';\n+import { Link, Redirect } from 'react-router-dom';\n+import {\n+  componentOuiaProps,\n+  GraphQL,\n+  KogitoSpinner,\n+  ouiaPageTypeAndObjectId,\n+  OUIAProps,\n+  ServerErrors\n+} from '@kogito-apps/common';\n+import PageTitle from '../../Molecules/PageTitle/PageTitle';\n+import {\n+  Breadcrumb,\n+  BreadcrumbItem,\n+  Bullseye,\n+  Button,\n+  Card,\n+  CardBody,\n+  PageSection,\n+  Toolbar,\n+  ToolbarContent,\n+  ToolbarGroup,\n+  ToolbarItem\n+} from '@patternfly/react-core';\n+import JobsManagementTable from '../../Organisms/JobsManagementTable/JobsManagementTable';\n+import JobsPanelDetailsModal from '../../Atoms/JobsPanelDetailsModal/JobsPanelDetailsModal';\n+import JobsRescheduleModal from '../../Atoms/JobsRescheduleModal/JobsRescheduleModal';\n+import { refetchContext } from '../../contexts';\n+import { setTitle } from '../../../utils/Utils';\n+import JobsCancelModal from '../../Atoms/JobsCancelModal/JobsCancelModal';\n+import { SyncIcon } from '@patternfly/react-icons';\n+\n+const JobsManagementPage: React.FC<OUIAProps> = ({ ouiaId, ouiaSafe }) => {\n+  const { loading, data, error, refetch } = GraphQL.useGetAllJobsQuery({\n+    fetchPolicy: 'network-only',\n+    notifyOnNetworkStatusChange: true\n+  });\n+  const [isDetailsModalOpen, setIsDetailsModalOpen] = useState<boolean>(false);\n+  const [isRescheduleModalOpen, setIsRescheduleModalOpen] = useState<boolean>(\n+    false\n+  );\n+  const [isCancelModalOpen, setIsCancelModalOpen] = useState<boolean>(false);\n+  const [modalTitle, setModalTitle] = useState<JSX.Element>(null);\n+  const [modalContent, setModalContent] = useState<string>('');\n+  const [selectedJob, setSelectedJob] = useState<any>({});\n+  useEffect(() => {\n+    return ouiaPageTypeAndObjectId('jobs-management');\n+  });\n+\n+  const handleDetailsToggle = (): void => {\n+    setIsDetailsModalOpen(!isDetailsModalOpen);\n+  };\n+\n+  const handleRescheduleToggle = (): void => {\n+    setIsRescheduleModalOpen(!isRescheduleModalOpen);\n+  };\n+\n+  const handleCancelModalToggle = (): void => {\n+    setIsCancelModalOpen(!isCancelModalOpen);\n+  };\n+\n+  const detailsAction: JSX.Element[] = [\n+    <Button\n+      key=\"confirm-selection\"\n+      variant=\"primary\"\n+      onClick={handleDetailsToggle}\n+    >\n+      OK\n+    </Button>\n+  ];\n+\n+  const rescheduleActions: JSX.Element[] = [\n+    <Button\n+      key=\"cancel-reschedule\"\n+      variant=\"secondary\"\n+      onClick={handleRescheduleToggle}\n+    >\n+      Cancel\n+    </Button>\n+  ];\n+\n+  const onRefresh = (): void => {\n+    window.location.reload();\n+  };\n+\n+  const renderToolbar = (): JSX.Element => {\n+    return (\n+      <Toolbar\n+        id=\"data-toolbar-with-chip-groups\"\n+        className=\"pf-m-toggle-group-container\"\n+        collapseListedFiltersBreakpoint=\"md\"\n+      >\n+        <ToolbarContent>\n+          <ToolbarGroup>\n+            <ToolbarItem>\n+              <Button\n+                variant=\"plain\"\n+                onClick={() => {\n+                  onRefresh();\n+                }}\n+                id=\"refresh-button\"\n+                ouiaId=\"refresh-button\"\n+                aria-label={'Refresh list'}\n+              >\n+                <SyncIcon />\n+              </Button>\n+            </ToolbarItem>\n+          </ToolbarGroup>\n+        </ToolbarContent>\n+      </Toolbar>\n+    );\n+  };\n+\n+  if (data) {\n+    if (!loading && data.Jobs.length === 0) {\n+      return (\n+        <Redirect\n+          to={{\n+            pathname: '/NoData',\n+            state: {\n+              prev: '/ProcessInstances',\n+              title: 'Jobs not found',\n+              description: `There are no jobs associated with any process instance`,\n+              buttonText: 'Go to process instance'\n+            }\n+          }}\n+        />\n+      );\n+    }\n+  }\n+  return (\n+    <div {...componentOuiaProps(ouiaId, 'JobsManagementPage', ouiaSafe)}>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbe53f5e82c35d5641dcb6c5fd0b9ab9456ba4c1"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA1Mjc2MA==", "bodyText": "Is it certain that this will happen on test failure? I think some sort of before/after method hooks would be better place for this.", "url": "https://github.com/kiegroup/kogito-apps/pull/503#discussion_r515052760", "createdAt": "2020-10-30T12:09:05Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/management-console/src/components/Templates/JobsManagementPage/tests/JobsManagementPage.test.tsx", "diffHunk": "@@ -0,0 +1,235 @@\n+import React from 'react';\n+import JobsManagementPage from '../JobsManagementPage';\n+import { getWrapperAsync, GraphQL } from '@kogito-apps/common';\n+import { MockedProvider } from '@apollo/react-testing';\n+import { BrowserRouter } from 'react-router-dom';\n+import { act } from 'react-dom/test-utils';\n+\n+jest.mock('../../../Organisms/JobsManagementTable/JobsManagementTable');\n+jest.mock('../../../Atoms/JobsRescheduleModal/JobsRescheduleModal');\n+jest.mock('../../../Atoms/JobsPanelDetailsModal/JobsPanelDetailsModal');\n+jest.mock('../../../Atoms/JobsCancelModal/JobsCancelModal');\n+const MockedServerErrors = (): React.ReactElement => {\n+  return <></>;\n+};\n+jest.mock('@kogito-apps/common', () => ({\n+  ...jest.requireActual('@kogito-apps/common'),\n+  ServerErrors: () => {\n+    return <MockedServerErrors />;\n+  }\n+}));\n+\n+const MockedBreadcrumb = (): React.ReactElement => {\n+  return <></>;\n+};\n+const MockedIcon = (): React.ReactElement => {\n+  return <></>;\n+};\n+\n+jest.mock('@patternfly/react-core', () => ({\n+  ...jest.requireActual('@patternfly/react-core'),\n+  Breadcrumb: () => <MockedBreadcrumb />\n+}));\n+\n+jest.mock('@patternfly/react-icons', () => ({\n+  ...jest.requireActual('@patternfly/react-icons'),\n+  SyncIcon: () => {\n+    return <MockedIcon />;\n+  }\n+}));\n+describe('Jobs management page tests', () => {\n+  const mocks = [\n+    {\n+      request: {\n+        query: GraphQL.GetAllJobsDocument,\n+        variables: {}\n+      },\n+      result: {\n+        data: {\n+          Jobs: [\n+            {\n+              callbackEndpoint:\n+                'http://localhost:8080/management/jobs/travels/instances/5c56eeff-4cbf-3313-a325-4c895e0afced/timers/6e74a570-31c8-4020-bd70-19be2cb625f3_0',\n+              endpoint: 'http://localhost:4000/jobs',\n+              expirationTime: null,\n+              id: '6e74a570-31c8-4020-bd70-19be2cb625f3_0',\n+              lastUpdate: '2020-08-27T03:35:50.147Z',\n+              priority: 0,\n+              processId: 'travels',\n+              processInstanceId: '8035b580-6ae4-4aa8-9ec0-e18e19809e0b',\n+              repeatInterval: null,\n+              repeatLimit: null,\n+              retries: 0,\n+              rootProcessId: null,\n+              scheduledId: '0',\n+              status: GraphQL.JobStatus.Executed,\n+              __typename: 'Job'\n+            },\n+            {\n+              callbackEndpoint:\n+                'http://localhost:8080/management/jobs/travels/instances/5c56eeff-4cbf-3313-a325-4c895e0afced/timers/dad3aa88-5c1e-4858-a919-6123c675a0fa_0',\n+              endpoint: 'http://localhost:4000/jobs',\n+              expirationTime: '2020-08-27T04:35:54.631Z',\n+              id: 'dad3aa88-5c1e-4858-a919-6123c675a0fa_0',\n+              lastUpdate: '2020-08-27T03:35:54.635Z',\n+              priority: 0,\n+              processId: 'travels',\n+              processInstanceId: '8035b580-6ae4-4aa8-9ec0-e18e19809e0b',\n+              repeatInterval: null,\n+              repeatLimit: null,\n+              retries: 0,\n+              rootProcessId: '',\n+              scheduledId: null,\n+              status: GraphQL.JobStatus.Scheduled,\n+              __typename: 'Job'\n+            },\n+            {\n+              callbackEndpoint:\n+                'http://localhost:8080/management/jobs/travels/instances/5c56eeff-4cbf-3313-a325-4c895e0afced/timers/dad3aa88-5c1e-4858-a919-6123c675a0fa_0',\n+              endpoint: 'http://localhost:4000/jobs',\n+              expirationTime: '2020-08-27T04:35:54.631Z',\n+              id: '2234dde-npce1-2908-b3131-6123c675a0fa_0',\n+              lastUpdate: '2020-08-27T03:35:54.635Z',\n+              priority: 0,\n+              processId: 'travels',\n+              processInstanceId: '8035b580-6ae4-4aa8-9ec0-e18e19809e0b',\n+              repeatInterval: null,\n+              repeatLimit: null,\n+              retries: 0,\n+              rootProcessId: '',\n+              scheduledId: null,\n+              status: GraphQL.JobStatus.Canceled,\n+              __typename: 'Job'\n+            }\n+          ]\n+        }\n+      }\n+    }\n+  ];\n+\n+  const mocks2 = [\n+    {\n+      request: {\n+        query: GraphQL.GetAllJobsDocument,\n+        variables: {}\n+      },\n+      result: {\n+        data: {\n+          Jobs: []\n+        }\n+      }\n+    }\n+  ];\n+\n+  const mocks3 = [\n+    {\n+      request: {\n+        query: GraphQL.GetAllJobsDocument,\n+        variables: {}\n+      },\n+      result: {\n+        data: null,\n+        error: {\n+          message: 'Expected a value of type JobStatus but received: CANCELLED'\n+        }\n+      }\n+    }\n+  ];\n+  it('snapshot test with mock data', async () => {\n+    const wrapper = await getWrapperAsync(\n+      <MockedProvider mocks={mocks} addTypename={false}>\n+        <BrowserRouter>\n+          <JobsManagementPage />\n+        </BrowserRouter>\n+      </MockedProvider>,\n+      'JobsManagementPage'\n+    );\n+    expect(wrapper).toMatchSnapshot();\n+    wrapper.update();\n+    const { location } = window;\n+    delete window.location;\n+    // @ts-ignore\n+    window.location = { reload: jest.fn() };\n+    await act(async () => {\n+      wrapper\n+        .find('#refresh-button')\n+        .first()\n+        .simulate('click');\n+    });\n+    window.location = location;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cbe53f5e82c35d5641dcb6c5fd0b9ab9456ba4c1"}, "originalPosition": 159}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6da1f1665b9875aa8978e2adbc29600632e5baff", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-apps/commit/6da1f1665b9875aa8978e2adbc29600632e5baff", "committedDate": "2020-10-30T12:46:36Z", "message": "KOGITO-3617: Jobs Management table"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cbe53f5e82c35d5641dcb6c5fd0b9ab9456ba4c1", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-apps/commit/cbe53f5e82c35d5641dcb6c5fd0b9ab9456ba4c1", "committedDate": "2020-10-29T13:09:23Z", "message": "KOGITO-3617: Jobs Management table"}, "afterCommit": {"oid": "6da1f1665b9875aa8978e2adbc29600632e5baff", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-apps/commit/6da1f1665b9875aa8978e2adbc29600632e5baff", "committedDate": "2020-10-30T12:46:36Z", "message": "KOGITO-3617: Jobs Management table"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwNjU0ODAz", "url": "https://github.com/kiegroup/kogito-apps/pull/503#pullrequestreview-520654803", "createdAt": "2020-10-30T13:15:54Z", "commit": {"oid": "6da1f1665b9875aa8978e2adbc29600632e5baff"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzoxNTo1NFrOHrOd5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQxMzoxNjo0NVrOHrOfug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA4Nzg0NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ouiaSafe ? ouiaSafe : loading\n          \n          \n            \n                    ouiaSafe ? ouiaSafe : !loading", "url": "https://github.com/kiegroup/kogito-apps/pull/503#discussion_r515087844", "createdAt": "2020-10-30T13:15:54Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/management-console/src/components/Templates/JobsManagementPage/JobsManagementPage.tsx", "diffHunk": "@@ -0,0 +1,215 @@\n+import React, { useState, useEffect } from 'react';\n+import { Link, Redirect } from 'react-router-dom';\n+import {\n+  componentOuiaProps,\n+  GraphQL,\n+  KogitoSpinner,\n+  ouiaPageTypeAndObjectId,\n+  OUIAProps,\n+  ServerErrors\n+} from '@kogito-apps/common';\n+import PageTitle from '../../Molecules/PageTitle/PageTitle';\n+import {\n+  Breadcrumb,\n+  BreadcrumbItem,\n+  Bullseye,\n+  Button,\n+  Card,\n+  CardBody,\n+  PageSection,\n+  Toolbar,\n+  ToolbarContent,\n+  ToolbarGroup,\n+  ToolbarItem\n+} from '@patternfly/react-core';\n+import JobsManagementTable from '../../Organisms/JobsManagementTable/JobsManagementTable';\n+import JobsPanelDetailsModal from '../../Atoms/JobsPanelDetailsModal/JobsPanelDetailsModal';\n+import JobsRescheduleModal from '../../Atoms/JobsRescheduleModal/JobsRescheduleModal';\n+import { refetchContext } from '../../contexts';\n+import { setTitle } from '../../../utils/Utils';\n+import JobsCancelModal from '../../Atoms/JobsCancelModal/JobsCancelModal';\n+import { SyncIcon } from '@patternfly/react-icons';\n+\n+const JobsManagementPage: React.FC<OUIAProps> = ({ ouiaId, ouiaSafe }) => {\n+  const { loading, data, error, refetch } = GraphQL.useGetAllJobsQuery({\n+    fetchPolicy: 'network-only',\n+    notifyOnNetworkStatusChange: true\n+  });\n+  const [isDetailsModalOpen, setIsDetailsModalOpen] = useState<boolean>(false);\n+  const [isRescheduleModalOpen, setIsRescheduleModalOpen] = useState<boolean>(\n+    false\n+  );\n+  const [isCancelModalOpen, setIsCancelModalOpen] = useState<boolean>(false);\n+  const [modalTitle, setModalTitle] = useState<JSX.Element>(null);\n+  const [modalContent, setModalContent] = useState<string>('');\n+  const [selectedJob, setSelectedJob] = useState<any>({});\n+  useEffect(() => {\n+    return ouiaPageTypeAndObjectId('jobs-management');\n+  });\n+\n+  const handleDetailsToggle = (): void => {\n+    setIsDetailsModalOpen(!isDetailsModalOpen);\n+  };\n+\n+  const handleRescheduleToggle = (): void => {\n+    setIsRescheduleModalOpen(!isRescheduleModalOpen);\n+  };\n+\n+  const handleCancelModalToggle = (): void => {\n+    setIsCancelModalOpen(!isCancelModalOpen);\n+  };\n+\n+  const detailsAction: JSX.Element[] = [\n+    <Button\n+      key=\"confirm-selection\"\n+      variant=\"primary\"\n+      onClick={handleDetailsToggle}\n+    >\n+      OK\n+    </Button>\n+  ];\n+\n+  const rescheduleActions: JSX.Element[] = [\n+    <Button\n+      key=\"cancel-reschedule\"\n+      variant=\"secondary\"\n+      onClick={handleRescheduleToggle}\n+    >\n+      Cancel\n+    </Button>\n+  ];\n+\n+  const onRefresh = (): void => {\n+    window.location.reload();\n+  };\n+\n+  const renderToolbar = (): JSX.Element => {\n+    return (\n+      <Toolbar\n+        id=\"data-toolbar-with-chip-groups\"\n+        className=\"pf-m-toggle-group-container\"\n+        collapseListedFiltersBreakpoint=\"md\"\n+      >\n+        <ToolbarContent>\n+          <ToolbarGroup>\n+            <ToolbarItem>\n+              <Button\n+                variant=\"plain\"\n+                onClick={() => {\n+                  onRefresh();\n+                }}\n+                id=\"refresh-button\"\n+                ouiaId=\"refresh-button\"\n+                aria-label={'Refresh list'}\n+              >\n+                <SyncIcon />\n+              </Button>\n+            </ToolbarItem>\n+          </ToolbarGroup>\n+        </ToolbarContent>\n+      </Toolbar>\n+    );\n+  };\n+\n+  if (data) {\n+    if (!loading && data.Jobs.length === 0) {\n+      return (\n+        <Redirect\n+          to={{\n+            pathname: '/NoData',\n+            state: {\n+              prev: '/ProcessInstances',\n+              title: 'Jobs not found',\n+              description: `There are no jobs associated with any process instance.`,\n+              buttonText: 'Go to process instance'\n+            }\n+          }}\n+        />\n+      );\n+    }\n+  }\n+  return (\n+    <div\n+      {...componentOuiaProps(\n+        ouiaId,\n+        'JobsManagementPage',\n+        ouiaSafe ? ouiaSafe : loading", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6da1f1665b9875aa8978e2adbc29600632e5baff"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA4ODMxNA==", "bodyText": "I think you've added it in the test for page.", "url": "https://github.com/kiegroup/kogito-apps/pull/503#discussion_r515088314", "createdAt": "2020-10-30T13:16:45Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/management-console/src/components/Organisms/JobsManagementTable/tests/JobsManagementTable.test.tsx", "diffHunk": "@@ -0,0 +1,252 @@\n+import React from 'react';\n+import JobsManagementTable from '../JobsManagementTable';\n+import { getWrapperAsync, GraphQL } from '@kogito-apps/common';\n+import { Dropdown, DropdownItem, KebabToggle } from '@patternfly/react-core';\n+import { act } from 'react-dom/test-utils';\n+import * as Utils from '../../../../utils/Utils';\n+import axios from 'axios';\n+import { refetchContext } from '../../../contexts';\n+jest.mock('axios');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNTA0ODQ1OQ=="}, "originalCommit": {"oid": "cbe53f5e82c35d5641dcb6c5fd0b9ab9456ba4c1"}, "originalPosition": 9}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "183fbd3753799a88ebbc1b4129859df8d53e30f6", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-apps/commit/183fbd3753799a88ebbc1b4129859df8d53e30f6", "committedDate": "2020-10-30T13:23:53Z", "message": "KOGITO-3617: Jobs Management table"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cfefb7d762f5759a15681cceb38f849e17d4c09", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-apps/commit/2cfefb7d762f5759a15681cceb38f849e17d4c09", "committedDate": "2020-10-30T14:56:36Z", "message": "KOGITO-572: Jobs Management table with actions"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7d98d3d2c218789f0f1abef09a231c04c66813bb", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-apps/commit/7d98d3d2c218789f0f1abef09a231c04c66813bb", "committedDate": "2020-10-30T14:40:02Z", "message": "KOGITO-572: Jobs Management table with actions"}, "afterCommit": {"oid": "2cfefb7d762f5759a15681cceb38f849e17d4c09", "author": {"user": null}, "url": "https://github.com/kiegroup/kogito-apps/commit/2cfefb7d762f5759a15681cceb38f849e17d4c09", "committedDate": "2020-10-30T14:56:36Z", "message": "KOGITO-572: Jobs Management table with actions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwNzU0NTM5", "url": "https://github.com/kiegroup/kogito-apps/pull/503#pullrequestreview-520754539", "createdAt": "2020-10-30T15:01:46Z", "commit": {"oid": "2cfefb7d762f5759a15681cceb38f849e17d4c09"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTIwNzkwMzAy", "url": "https://github.com/kiegroup/kogito-apps/pull/503#pullrequestreview-520790302", "createdAt": "2020-10-30T15:36:49Z", "commit": {"oid": "2cfefb7d762f5759a15681cceb38f849e17d4c09"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4647, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}