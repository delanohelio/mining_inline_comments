{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0Njk5MTc2", "number": 188, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNzoxNjoxNFrODz1cXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODo0MDo0N1rOD5uMTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1Njc5NTgxOnYy", "diffSide": "RIGHT", "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/resource/JobResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxNzoxNjoxNFrOGIfGPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxODoxNjo0OVrOGIhfOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU1MTI5NQ==", "bodyText": "PATCH (like PUT) should target a specific ID, present as a path param.http://restcookbook.com/HTTP%20Methods/patch/", "url": "https://github.com/kiegroup/kogito-apps/pull/188#discussion_r411551295", "createdAt": "2020-04-20T17:16:14Z", "author": {"login": "radtriste"}, "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/resource/JobResource.java", "diffHunk": "@@ -64,6 +65,17 @@\n                 .thenApply(j -> j.orElseThrow(() -> new RuntimeException(\"Failed to schedule job \" + job)));\n     }\n \n+    @PATCH\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    public CompletionStage<ScheduledJob> patch(Job job) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03a97a1ea13248a4b03913135f07aa4cf615f915"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU5MDQ1OQ==", "bodyText": "yep, I agree, added under the path \"/{id}\"", "url": "https://github.com/kiegroup/kogito-apps/pull/188#discussion_r411590459", "createdAt": "2020-04-20T18:16:49Z", "author": {"login": "tiagodolphine"}, "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/resource/JobResource.java", "diffHunk": "@@ -64,6 +65,17 @@\n                 .thenApply(j -> j.orElseThrow(() -> new RuntimeException(\"Failed to schedule job \" + job)));\n     }\n \n+    @PATCH\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    public CompletionStage<ScheduledJob> patch(Job job) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTU1MTI5NQ=="}, "originalCommit": {"oid": "03a97a1ea13248a4b03913135f07aa4cf615f915"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU1OTc3MzEwOnYy", "diffSide": "RIGHT", "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/resource/JobResource.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwODozMTo0OFrOGI5gFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNVQyMDozMzoyNlrOGQ6ebw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk4Mzg5Mw==", "bodyText": "This should not be needed on a patch.\nthe job structure contains only the fields which need to be updated\nso id is not present in it", "url": "https://github.com/kiegroup/kogito-apps/pull/188#discussion_r411983893", "createdAt": "2020-04-21T08:31:48Z", "author": {"login": "radtriste"}, "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/resource/JobResource.java", "diffHunk": "@@ -64,6 +66,25 @@\n                 .thenApply(j -> j.orElseThrow(() -> new RuntimeException(\"Failed to schedule job \" + job)));\n     }\n \n+    @PATCH\n+    @Path(\"/{id}\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    public CompletionStage<ScheduledJob> patch(@PathParam(\"id\") String id, @RequestBody Job job) {\n+        LOGGER.debug(\"REST patch update {}\", job);\n+\n+        //validate parameters for job and id\n+        Optional.ofNullable(job)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ebbf90fa5feb6b688f7444098dd199ef1df6a2af"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDM4ODQ2Mw==", "bodyText": "updated", "url": "https://github.com/kiegroup/kogito-apps/pull/188#discussion_r420388463", "createdAt": "2020-05-05T20:33:26Z", "author": {"login": "tiagodolphine"}, "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/resource/JobResource.java", "diffHunk": "@@ -64,6 +66,25 @@\n                 .thenApply(j -> j.orElseThrow(() -> new RuntimeException(\"Failed to schedule job \" + job)));\n     }\n \n+    @PATCH\n+    @Path(\"/{id}\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    public CompletionStage<ScheduledJob> patch(@PathParam(\"id\") String id, @RequestBody Job job) {\n+        LOGGER.debug(\"REST patch update {}\", job);\n+\n+        //validate parameters for job and id\n+        Optional.ofNullable(job)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTk4Mzg5Mw=="}, "originalCommit": {"oid": "ebbf90fa5feb6b688f7444098dd199ef1df6a2af"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODUwOTA5OnYy", "diffSide": "RIGHT", "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/resource/JobResource.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODozNjo0MlrOGRJKDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMVQxMjo1MDoxOFrOGTazkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYyOTAwNQ==", "bodyText": "ScheduledJob.builder().job(job).build()\ncould we have something like ScheduledJob.from(job) instead that is hiding this implementation ?", "url": "https://github.com/kiegroup/kogito-apps/pull/188#discussion_r420629005", "createdAt": "2020-05-06T08:36:42Z", "author": {"login": "radtriste"}, "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/resource/JobResource.java", "diffHunk": "@@ -64,6 +66,18 @@\n                 .thenApply(j -> j.orElseThrow(() -> new RuntimeException(\"Failed to schedule job \" + job)));\n     }\n \n+    @PATCH\n+    @Path(\"/{id}\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    public CompletionStage<ScheduledJob> patch(@PathParam(\"id\") String id, @RequestBody Job job) {\n+        LOGGER.debug(\"REST patch update {}\", job);\n+        return jobRepository.merge(id, ScheduledJob.builder().job(job).build())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0d735bbfef0184cccdb8930f4abcd9047f1bb45"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAwOTAyNA==", "bodyText": "I didn't get, basically, it is building a new instance of ScheduledJob based on a Job, that's a superclass, the approach of using the builder is to keep immutability. The jobRepository is based on ScheduledJob that's why it was necessary.", "url": "https://github.com/kiegroup/kogito-apps/pull/188#discussion_r423009024", "createdAt": "2020-05-11T12:39:09Z", "author": {"login": "tiagodolphine"}, "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/resource/JobResource.java", "diffHunk": "@@ -64,6 +66,18 @@\n                 .thenApply(j -> j.orElseThrow(() -> new RuntimeException(\"Failed to schedule job \" + job)));\n     }\n \n+    @PATCH\n+    @Path(\"/{id}\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    public CompletionStage<ScheduledJob> patch(@PathParam(\"id\") String id, @RequestBody Job job) {\n+        LOGGER.debug(\"REST patch update {}\", job);\n+        return jobRepository.merge(id, ScheduledJob.builder().job(job).build())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYyOTAwNQ=="}, "originalCommit": {"oid": "f0d735bbfef0184cccdb8930f4abcd9047f1bb45"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMzAxNTMxNQ==", "bodyText": "yeah. I was just thinking about creating a direct method ScheduledJob.from(job) instead of the whole ScheduledJob.builder().job(job).build().\nIt would avoid the long line. it is just esthetic I would say", "url": "https://github.com/kiegroup/kogito-apps/pull/188#discussion_r423015315", "createdAt": "2020-05-11T12:50:18Z", "author": {"login": "radtriste"}, "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/resource/JobResource.java", "diffHunk": "@@ -64,6 +66,18 @@\n                 .thenApply(j -> j.orElseThrow(() -> new RuntimeException(\"Failed to schedule job \" + job)));\n     }\n \n+    @PATCH\n+    @Path(\"/{id}\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @Consumes(MediaType.APPLICATION_JSON)\n+    public CompletionStage<ScheduledJob> patch(@PathParam(\"id\") String id, @RequestBody Job job) {\n+        LOGGER.debug(\"REST patch update {}\", job);\n+        return jobRepository.merge(id, ScheduledJob.builder().job(job).build())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYyOTAwNQ=="}, "originalCommit": {"oid": "f0d735bbfef0184cccdb8930f4abcd9047f1bb45"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxODUyMjM4OnYy", "diffSide": "RIGHT", "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/repository/impl/BaseReactiveJobRepository.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQwODo0MDo0N1rOGRJS-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMjozNDozNVrOGRQ0OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYzMTI5MA==", "bodyText": "could we have that on one line ?\nmake it in fact hard to read like that whereas it is a simple thing...", "url": "https://github.com/kiegroup/kogito-apps/pull/188#discussion_r420631290", "createdAt": "2020-05-06T08:40:47Z", "author": {"login": "radtriste"}, "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/repository/impl/BaseReactiveJobRepository.java", "diffHunk": "@@ -66,4 +69,23 @@ public BaseReactiveJobRepository(Vertx vertx, JobStreams jobStreams) {\n         return delete(job.getId())\n                 .thenApply(j -> jobStreams.publishJobStatusChange(job));\n     }\n+\n+    @Override\n+    public CompletionStage<ScheduledJob> merge(String id, ScheduledJob job) {\n+        return Optional.ofNullable(id)\n+                .filter(StringUtils::isNotBlank)\n+                .filter(s -> StringUtils.isBlank(job.getId()) || s.equals(job.getId()))\n+                .map(s -> get(s)\n+                        .thenApply(Optional::ofNullable)\n+                        .thenApply(current -> current\n+                                .map(j -> ScheduledJob", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0d735bbfef0184cccdb8930f4abcd9047f1bb45"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc1NDQ4OQ==", "bodyText": "I reformatted the method extracting the merge operation into a new method, take a look it is now more clear IMO.", "url": "https://github.com/kiegroup/kogito-apps/pull/188#discussion_r420754489", "createdAt": "2020-05-06T12:34:35Z", "author": {"login": "tiagodolphine"}, "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/repository/impl/BaseReactiveJobRepository.java", "diffHunk": "@@ -66,4 +69,23 @@ public BaseReactiveJobRepository(Vertx vertx, JobStreams jobStreams) {\n         return delete(job.getId())\n                 .thenApply(j -> jobStreams.publishJobStatusChange(job));\n     }\n+\n+    @Override\n+    public CompletionStage<ScheduledJob> merge(String id, ScheduledJob job) {\n+        return Optional.ofNullable(id)\n+                .filter(StringUtils::isNotBlank)\n+                .filter(s -> StringUtils.isBlank(job.getId()) || s.equals(job.getId()))\n+                .map(s -> get(s)\n+                        .thenApply(Optional::ofNullable)\n+                        .thenApply(current -> current\n+                                .map(j -> ScheduledJob", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDYzMTI5MA=="}, "originalCommit": {"oid": "f0d735bbfef0184cccdb8930f4abcd9047f1bb45"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 893, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}