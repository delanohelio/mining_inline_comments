{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1MzM3NDY0", "number": 271, "title": "KOGITO-2086: Implement Task Form Building Block", "bodyText": "JIRA: https://issues.redhat.com/browse/KOGITO-2086\nFirst implementation fo the task form component.\nMany thanks for submitting your Pull Request \u2764\ufe0f!\nPlease make sure that your PR meets the following requirements:\n\n You have read the contributors guide\n Pull Request title is properly formatted: KOGITO-XYZ Subject\n Pull Request title contains the target branch if not targeting master: [0.9.x] KOGITO-XYZ Subject\n Pull Request contains link to the JIRA issue\n Pull Request contains link to any dependent or related Pull Request\n Pull Request contains description of the issue\n Pull Request does not include fixes for issues other than the main ticket", "createdAt": "2020-06-16T16:34:51Z", "url": "https://github.com/kiegroup/kogito-apps/pull/271", "merged": true, "mergeCommit": {"oid": "61de56f2e0ee6e0bded8b393d60e156b3a6329ed"}, "closed": true, "closedAt": "2020-06-23T13:53:22Z", "author": {"login": "pefernan"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcsFRR8gBqjM0NTIzNTk2MzQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcuEVWGAFqTQzNTcxNjExNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8fac39c995927b12ebec455bfeb0d98f92b09c1d", "author": {"user": {"login": "pefernan", "name": "Pere Fern\u00e1ndez"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/8fac39c995927b12ebec455bfeb0d98f92b09c1d", "committedDate": "2020-06-16T16:34:06Z", "message": "KOGITO-2175: Implement Task Form Building Block"}, "afterCommit": {"oid": "3b09b7c9f0bbda4fd3d67df00847ee176a4cedb3", "author": {"user": {"login": "pefernan", "name": "Pere Fern\u00e1ndez"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/3b09b7c9f0bbda4fd3d67df00847ee176a4cedb3", "committedDate": "2020-06-17T08:06:39Z", "message": "KOGITO-2086: Implement Task Form Building Block"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyNDI1MTI3", "url": "https://github.com/kiegroup/kogito-apps/pull/271#pullrequestreview-432425127", "createdAt": "2020-06-17T13:53:38Z", "commit": {"oid": "3b09b7c9f0bbda4fd3d67df00847ee176a4cedb3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzo1MzozOFrOGlG3Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzo1MzozOFrOGlG3Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU2Mjg5MQ==", "bodyText": "@pefernan, we've established to not use version ranges ( ^ ) as in Jenkins the actually build uses a different npm registry, that can cause different version to be resolved.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                \"ajv\": \"^6.10.2\",\n          \n          \n            \n                \"ajv\": \"6.10.2\",", "url": "https://github.com/kiegroup/kogito-apps/pull/271#discussion_r441562891", "createdAt": "2020-06-17T13:53:38Z", "author": {"login": "cristianonicolai"}, "path": "packages/task-console/package.json", "diffHunk": "@@ -31,7 +31,11 @@\n     \"cypress:open\": \"cypress open\"\n   },\n   \"dependencies\": {\n-    \"@kogito-apps/common\": \"1.0.0\"\n+    \"@kogito-apps/common\": \"1.0.0\",\n+    \"ajv\": \"^6.10.2\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b09b7c9f0bbda4fd3d67df00847ee176a4cedb3"}, "originalPosition": 6}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a3835ecac0e0bd7d5b129a66ea023391a4b4f50d", "author": {"user": {"login": "pefernan", "name": "Pere Fern\u00e1ndez"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/a3835ecac0e0bd7d5b129a66ea023391a4b4f50d", "committedDate": "2020-06-17T14:45:45Z", "message": "- Versions fix"}, "afterCommit": {"oid": "afb438c3b9095aa30b8d2f6e8b25e13a5019000e", "author": {"user": {"login": "pefernan", "name": "Pere Fern\u00e1ndez"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/afb438c3b9095aa30b8d2f6e8b25e13a5019000e", "committedDate": "2020-06-17T15:04:38Z", "message": "- Versions fix"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMyMTAwNjU0", "url": "https://github.com/kiegroup/kogito-apps/pull/271#pullrequestreview-432100654", "createdAt": "2020-06-17T06:42:35Z", "commit": {"oid": "8fac39c995927b12ebec455bfeb0d98f92b09c1d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QwNjo0MjozNVrOGk3tmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwODowNDoyOFrOGlkIug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMxNDcxNA==", "bodyText": "I would put react import to the top, or is this enforced by some formatting rule?", "url": "https://github.com/kiegroup/kogito-apps/pull/271#discussion_r441314714", "createdAt": "2020-06-17T06:42:35Z", "author": {"login": "jstastny-cz"}, "path": "packages/task-console/src/components/Atoms/FormFooter/FormFooter.tsx", "diffHunk": "@@ -0,0 +1,29 @@\n+import { FormActionDescription } from '../../../model/FormDescription';\n+import React from 'react';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fac39c995927b12ebec455bfeb0d98f92b09c1d"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMxNTg4OA==", "bodyText": "here probably the actions property should not be set at all in props.", "url": "https://github.com/kiegroup/kogito-apps/pull/271#discussion_r441315888", "createdAt": "2020-06-17T06:45:31Z", "author": {"login": "jstastny-cz"}, "path": "packages/task-console/src/components/Atoms/FormFooter/tests/FormFooter.test.tsx", "diffHunk": "@@ -0,0 +1,84 @@\n+import React from 'react';\n+import { shallow } from 'enzyme';\n+import FormFooter from '../FormFooter';\n+\n+describe('Form Footer test', () => {\n+  it('testing showing actions', () => {\n+    const props = {\n+      actions: [\n+        {\n+          name: 'action1',\n+          phase: 'action1',\n+          outputs: [],\n+          primary: true\n+        },\n+        {\n+          name: 'action2',\n+          phase: 'action2',\n+          outputs: ['output'],\n+          primary: false\n+        }\n+      ],\n+      onActionClick: jest.fn()\n+    };\n+\n+    const wrapper = shallow(<FormFooter {...props} />);\n+    expect(wrapper).toMatchSnapshot();\n+  });\n+\n+  it('testing showing empty actions', () => {\n+    const props = {\n+      actions: [],\n+      onActionClick: jest.fn()\n+    };\n+\n+    const wrapper = shallow(<FormFooter {...props} />);\n+    expect(wrapper).toMatchSnapshot();\n+  });\n+\n+  it('testing showing no actions', () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fac39c995927b12ebec455bfeb0d98f92b09c1d"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMxODIzMA==", "bodyText": "would the enzymeselector like this work here? wrapper.find('[key=\"submit-action1\"]')", "url": "https://github.com/kiegroup/kogito-apps/pull/271#discussion_r441318230", "createdAt": "2020-06-17T06:50:46Z", "author": {"login": "jstastny-cz"}, "path": "packages/task-console/src/components/Atoms/FormFooter/tests/FormFooter.test.tsx", "diffHunk": "@@ -0,0 +1,84 @@\n+import React from 'react';\n+import { shallow } from 'enzyme';\n+import FormFooter from '../FormFooter';\n+\n+describe('Form Footer test', () => {\n+  it('testing showing actions', () => {\n+    const props = {\n+      actions: [\n+        {\n+          name: 'action1',\n+          phase: 'action1',\n+          outputs: [],\n+          primary: true\n+        },\n+        {\n+          name: 'action2',\n+          phase: 'action2',\n+          outputs: ['output'],\n+          primary: false\n+        }\n+      ],\n+      onActionClick: jest.fn()\n+    };\n+\n+    const wrapper = shallow(<FormFooter {...props} />);\n+    expect(wrapper).toMatchSnapshot();\n+  });\n+\n+  it('testing showing empty actions', () => {\n+    const props = {\n+      actions: [],\n+      onActionClick: jest.fn()\n+    };\n+\n+    const wrapper = shallow(<FormFooter {...props} />);\n+    expect(wrapper).toMatchSnapshot();\n+  });\n+\n+  it('testing showing no actions', () => {\n+    const props = {\n+      actions: [],\n+      onActionClick: jest.fn()\n+    };\n+\n+    const wrapper = shallow(<FormFooter {...props} />);\n+    expect(wrapper).toMatchSnapshot();\n+  });\n+\n+  it('testing action click', () => {\n+    const action1 = {\n+      name: 'action1',\n+      phase: 'action1',\n+      outputs: [],\n+      primary: true\n+    };\n+\n+    const action2 = {\n+      name: 'action2',\n+      phase: 'action2',\n+      outputs: ['output'],\n+      primary: false\n+    };\n+\n+    const props = {\n+      actions: [action1, action2],\n+      onActionClick: jest.fn()\n+    };\n+\n+    const wrapper = shallow(<FormFooter {...props} />);\n+    expect(wrapper).toMatchSnapshot();\n+\n+    const button1 = wrapper.findWhere(node => node.key() === 'submit-action1');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fac39c995927b12ebec455bfeb0d98f92b09c1d"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTMzNzc3Ng==", "bodyText": "can't we put the phase to data too?", "url": "https://github.com/kiegroup/kogito-apps/pull/271#discussion_r441337776", "createdAt": "2020-06-17T07:29:40Z", "author": {"login": "jstastny-cz"}, "path": "packages/task-console/src/components/Molecules/FormRenderer/FormRenderer.tsx", "diffHunk": "@@ -0,0 +1,121 @@\n+import React, { useCallback } from 'react';\n+\n+import { AutoFields, AutoForm, ErrorsField } from 'uniforms-patternfly';\n+import ModelConversionTool from '../../../util/uniforms/ModelConversionTool';\n+import JSONSchemaBridge from 'uniforms-bridge-json-schema';\n+import { TaskInfo } from '../../../model/TaskInfo';\n+import {\n+  FormActionDescription,\n+  FormDescription\n+} from '../../../model/FormDescription';\n+import axios from 'axios';\n+import FormFooter from '../../Atoms/FormFooter/FormFooter';\n+import { DefaultFormValidator } from '../../../util/uniforms/FormValidator';\n+\n+interface IOwnProps {\n+  taskInfo: TaskInfo;\n+  form: FormDescription;\n+  model?: any;\n+  successCallback?: (result: string) => void;\n+  errorCallback?: (errorMessage: string) => void;\n+}\n+\n+const FormRenderer: React.FC<IOwnProps> = ({\n+  taskInfo,\n+  form,\n+  model,\n+  successCallback,\n+  errorCallback\n+}) => {\n+  const validator = new DefaultFormValidator(form.schema);\n+\n+  const bridge = new JSONSchemaBridge(form.schema, formModel => {\n+    // Converting back all the JS Dates into String before validating the model\n+    const newModel = ModelConversionTool.convertDateToString(\n+      formModel,\n+      form.schema\n+    );\n+    validator.validate(newModel);\n+  });\n+\n+  // Converting Dates that are in string format into JS Dates so they can be correctly bound to the uniforms DateField\n+  const formData = ModelConversionTool.convertStringToDate(model, form.schema);\n+\n+  let selectedAction;\n+\n+  const submitForm = useCallback(\n+    async (formModel: any, formAction: FormActionDescription) => {\n+      try {\n+        const data = {};\n+\n+        let endpoint = taskInfo.getTaskEndPoint();\n+\n+        if (formAction.phase) {\n+          endpoint += '?phase=' + formAction.phase;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8fac39c995927b12ebec455bfeb0d98f92b09c1d"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTQyNDE0MQ==", "bodyText": "could we organize the imports? I'd expect react dependencies, then external dependencies and local imports grouped together.", "url": "https://github.com/kiegroup/kogito-apps/pull/271#discussion_r441424141", "createdAt": "2020-06-17T09:50:10Z", "author": {"login": "jstastny-cz"}, "path": "packages/task-console/src/components/Molecules/FormRenderer/tests/FormRenderer.test.tsx", "diffHunk": "@@ -0,0 +1,157 @@\n+import { TaskInfoImpl } from '../../../../model/TaskInfo';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3b09b7c9f0bbda4fd3d67df00847ee176a4cedb3"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5OTkwOA==", "bodyText": "when no actions then empty snapshot is expected, right? Just checking.", "url": "https://github.com/kiegroup/kogito-apps/pull/271#discussion_r441999908", "createdAt": "2020-06-18T06:39:32Z", "author": {"login": "jstastny-cz"}, "path": "packages/task-console/src/components/Atoms/FormFooter/tests/__snapshots__/FormFooter.test.tsx.snap", "diffHunk": "@@ -0,0 +1,47 @@\n+// Jest Snapshot v1, https://goo.gl/fbAQLP\n+\n+exports[`Form Footer test testing action click 1`] = `\n+<ActionGroup>\n+  <Component\n+    key=\"submit-action1\"\n+    onClick={[Function]}\n+    type=\"submit\"\n+    variant=\"primary\"\n+  >\n+    action1\n+  </Component>\n+  <Component\n+    key=\"submit-action2\"\n+    onClick={[Function]}\n+    type=\"submit\"\n+    variant=\"secondary\"\n+  >\n+    action2\n+  </Component>\n+</ActionGroup>\n+`;\n+\n+exports[`Form Footer test testing showing actions 1`] = `\n+<ActionGroup>\n+  <Component\n+    key=\"submit-action1\"\n+    onClick={[Function]}\n+    type=\"submit\"\n+    variant=\"primary\"\n+  >\n+    action1\n+  </Component>\n+  <Component\n+    key=\"submit-action2\"\n+    onClick={[Function]}\n+    type=\"submit\"\n+    variant=\"secondary\"\n+  >\n+    action2\n+  </Component>\n+</ActionGroup>\n+`;\n+\n+exports[`Form Footer test testing showing empty actions 1`] = `\"\"`;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afb438c3b9095aa30b8d2f6e8b25e13a5019000e"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAwMDI2NA==", "bodyText": "again, I would group local and external imports together.", "url": "https://github.com/kiegroup/kogito-apps/pull/271#discussion_r442000264", "createdAt": "2020-06-18T06:40:22Z", "author": {"login": "jstastny-cz"}, "path": "packages/task-console/src/components/Molecules/FormRenderer/FormRenderer.tsx", "diffHunk": "@@ -0,0 +1,122 @@\n+import React, { useCallback } from 'react';\n+\n+import { AutoFields, AutoForm, ErrorsField } from 'uniforms-patternfly';\n+import ModelConversionTool from '../../../util/uniforms/ModelConversionTool';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afb438c3b9095aa30b8d2f6e8b25e13a5019000e"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAzMTUzNA==", "bodyText": "typo Successfull -> Successful", "url": "https://github.com/kiegroup/kogito-apps/pull/271#discussion_r442031534", "createdAt": "2020-06-18T07:45:00Z", "author": {"login": "jstastny-cz"}, "path": "packages/task-console/src/components/Molecules/FormRenderer/tests/FormRenderer.test.tsx", "diffHunk": "@@ -0,0 +1,157 @@\n+import { TaskInfoImpl } from '../../../../model/TaskInfo';\n+import { UserTaskInstance } from '../../../../graphql/types';\n+import ApplyForVisaForm from './ApplyForVisa';\n+import React from 'react';\n+import { shallow } from 'enzyme';\n+import FormRenderer from '../FormRenderer';\n+import { AutoForm } from 'uniforms-patternfly';\n+import axios from 'axios';\n+import FormFooter from '../../../Atoms/FormFooter/FormFooter';\n+import { FormActionDescription } from '../../../../model/FormDescription';\n+\n+const userTaskInstance: UserTaskInstance = {\n+  id: '45a73767-5da3-49bf-9c40-d533c3e77ef3',\n+  description: null,\n+  name: 'Apply for visa',\n+  priority: '1',\n+  processInstanceId: '9ae7ce3b-d49c-4f35-b843-8ac3d22fa427',\n+  processId: 'travels',\n+  rootProcessInstanceId: null,\n+  rootProcessId: null,\n+  state: 'Ready',\n+  actualOwner: null,\n+  adminGroups: [],\n+  adminUsers: [],\n+  completed: null,\n+  started: '2020-02-19T11:11:56.282Z',\n+  excludedUsers: [],\n+  potentialGroups: [],\n+  potentialUsers: [],\n+  inputs:\n+    '{\"Skippable\":\"true\",\"trip\":{\"city\":\"Boston\",\"country\":\"US\",\"visaRequired\":true},\"TaskName\":\"VisaApplication\",\"NodeName\":\"Apply for visa\",\"traveller\":{\"firstName\":\"Rachel\",\"lastName\":\"White\",\"email\":\"rwhite@gorle.com\",\"nationality\":\"Polish\",\"address\":{\"street\":\"Cabalone\",\"city\":\"Zerf\",\"zipCode\":\"765756\",\"country\":\"Poland\"}},\"Priority\":\"1\"}',\n+  outputs: '{}',\n+  referenceName: 'VisaApplication',\n+  lastUpdate: '2020-02-19T11:11:56.282Z'\n+};\n+\n+jest.mock('axios');\n+const mockedAxios = axios as jest.Mocked<typeof axios>;\n+let formData;\n+let props;\n+\n+const testSuccessfullRequest = async (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afb438c3b9095aa30b8d2f6e8b25e13a5019000e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAzNDIwMA==", "bodyText": "do we expect anything important in the snapshot that wouldn't be tested elsewhere? I didn't find anything in particular, maybe we can skip the snapshot check in that case.", "url": "https://github.com/kiegroup/kogito-apps/pull/271#discussion_r442034200", "createdAt": "2020-06-18T07:49:51Z", "author": {"login": "jstastny-cz"}, "path": "packages/task-console/src/components/Molecules/FormRenderer/tests/FormRenderer.test.tsx", "diffHunk": "@@ -0,0 +1,157 @@\n+import { TaskInfoImpl } from '../../../../model/TaskInfo';\n+import { UserTaskInstance } from '../../../../graphql/types';\n+import ApplyForVisaForm from './ApplyForVisa';\n+import React from 'react';\n+import { shallow } from 'enzyme';\n+import FormRenderer from '../FormRenderer';\n+import { AutoForm } from 'uniforms-patternfly';\n+import axios from 'axios';\n+import FormFooter from '../../../Atoms/FormFooter/FormFooter';\n+import { FormActionDescription } from '../../../../model/FormDescription';\n+\n+const userTaskInstance: UserTaskInstance = {\n+  id: '45a73767-5da3-49bf-9c40-d533c3e77ef3',\n+  description: null,\n+  name: 'Apply for visa',\n+  priority: '1',\n+  processInstanceId: '9ae7ce3b-d49c-4f35-b843-8ac3d22fa427',\n+  processId: 'travels',\n+  rootProcessInstanceId: null,\n+  rootProcessId: null,\n+  state: 'Ready',\n+  actualOwner: null,\n+  adminGroups: [],\n+  adminUsers: [],\n+  completed: null,\n+  started: '2020-02-19T11:11:56.282Z',\n+  excludedUsers: [],\n+  potentialGroups: [],\n+  potentialUsers: [],\n+  inputs:\n+    '{\"Skippable\":\"true\",\"trip\":{\"city\":\"Boston\",\"country\":\"US\",\"visaRequired\":true},\"TaskName\":\"VisaApplication\",\"NodeName\":\"Apply for visa\",\"traveller\":{\"firstName\":\"Rachel\",\"lastName\":\"White\",\"email\":\"rwhite@gorle.com\",\"nationality\":\"Polish\",\"address\":{\"street\":\"Cabalone\",\"city\":\"Zerf\",\"zipCode\":\"765756\",\"country\":\"Poland\"}},\"Priority\":\"1\"}',\n+  outputs: '{}',\n+  referenceName: 'VisaApplication',\n+  lastUpdate: '2020-02-19T11:11:56.282Z'\n+};\n+\n+jest.mock('axios');\n+const mockedAxios = axios as jest.Mocked<typeof axios>;\n+let formData;\n+let props;\n+\n+const testSuccessfullRequest = async (\n+  action: FormActionDescription,\n+  expectedPayload\n+) => {\n+  const response = {\n+    status: 200,\n+    data: 'Task successfully completed'\n+  };\n+  mockedAxios.post.mockResolvedValue(response);\n+\n+  const wrapper = shallow(<FormRenderer {...props} />);\n+  expect(wrapper).toMatchSnapshot();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afb438c3b9095aa30b8d2f6e8b25e13a5019000e"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAzNzI2MQ==", "bodyText": "Here the ouia page props should be set. In this case it would be data-ouia-page-type  and data-ouia-page-object-id.\nType is just a page-descriptor so in this case can be for example 'user-task' and the id should be the id of the task being presented. Please check the OuiaUtils for methods to set the attributes.", "url": "https://github.com/kiegroup/kogito-apps/pull/271#discussion_r442037261", "createdAt": "2020-06-18T07:55:16Z", "author": {"login": "jstastny-cz"}, "path": "packages/task-console/src/components/Templates/UserTaskInstanceDetailsPage/UserTaskInstanceDetailsPage.tsx", "diffHunk": "@@ -0,0 +1,54 @@\n+import React, { useContext } from 'react';\n+import {\n+  Breadcrumb,\n+  BreadcrumbItem,\n+  Card,\n+  CardBody,\n+  Grid,\n+  GridItem,\n+  PageSection,\n+  withOuiaContext\n+} from '@patternfly/react-core';\n+import TaskConsoleContext, {\n+  IContext\n+} from '../../../context/TaskConsoleContext/TaskConsoleContext';\n+import { Link } from 'react-router-dom';\n+import { TaskInfo } from '../../../model/TaskInfo';\n+import TaskForm from '../../Organisms/TaskForm/TaskForm';\n+import PageTitle from '../../Molecules/PageTitle/PageTitle';\n+\n+const UserTaskInstanceDetailsPage = props => {\n+  const context: IContext<TaskInfo> = useContext(TaskConsoleContext);\n+\n+  const taskInfo = context.getActiveItem();\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afb438c3b9095aa30b8d2f6e8b25e13a5019000e"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjA0MjU1NA==", "bodyText": "Thinking about the approach here.\nSo we have a hierarchy Form -> FormRenderer -> FormFooter, etc\nIn lower level components we're using shallow rendering just to check basic component tree, but here in top-level we're using the wrappers that use mount and produce complex snapshots.\nI would expect for the component tests to test ASAP that is on lowest possible level the snapshots in detail, while in higher-level components we'd mock the lower-level ones to keep the snapshots concise.\nOne huge advantage is to scope the changes in components to affect just the tests for themselves, or the least possible span of tests.\nSo in this case I would expect the rendered form to be snapshot tested in either renderer or even form (I don't know the details which is the lowest level possible) and here using mocks just to check proper passing of the properties.", "url": "https://github.com/kiegroup/kogito-apps/pull/271#discussion_r442042554", "createdAt": "2020-06-18T08:04:28Z", "author": {"login": "jstastny-cz"}, "path": "packages/task-console/src/components/Organisms/TaskForm/tests/TaskForm.test.tsx", "diffHunk": "@@ -0,0 +1,71 @@\n+import axios from 'axios';\n+import { TaskInfo, TaskInfoImpl } from '../../../../model/TaskInfo';\n+import { UserTaskInstance } from '../../../../graphql/types';\n+import React from 'react';\n+import TaskForm from '../TaskForm';\n+import ApplyForVisaForm from './ApplyForVisa';\n+import { getWrapperAsync } from '@kogito-apps/common';\n+\n+jest.mock('axios');\n+const mockedAxios = axios as jest.Mocked<typeof axios>;\n+\n+const userTaskInstance: UserTaskInstance = {\n+  id: '45a73767-5da3-49bf-9c40-d533c3e77ef3',\n+  description: null,\n+  name: 'Apply for visa',\n+  priority: '1',\n+  processInstanceId: '9ae7ce3b-d49c-4f35-b843-8ac3d22fa427',\n+  processId: 'travels',\n+  rootProcessInstanceId: null,\n+  rootProcessId: null,\n+  state: 'Ready',\n+  actualOwner: null,\n+  adminGroups: [],\n+  adminUsers: [],\n+  completed: null,\n+  started: '2020-02-19T11:11:56.282Z',\n+  excludedUsers: [],\n+  potentialGroups: [],\n+  potentialUsers: [],\n+  inputs:\n+    '{\"Skippable\":\"true\",\"trip\":{\"city\":\"Boston\",\"country\":\"US\",\"begin\":\"2020-02-19T23:00:00.000+01:00\",\"end\":\"2020-02-26T23:00:00.000+01:00\",\"visaRequired\":true},\"TaskName\":\"VisaApplication\",\"NodeName\":\"Apply for visa\",\"traveller\":{\"firstName\":\"Rachel\",\"lastName\":\"White\",\"email\":\"rwhite@gorle.com\",\"nationality\":\"Polish\",\"address\":{\"street\":\"Cabalone\",\"city\":\"Zerf\",\"zipCode\":\"765756\",\"country\":\"Poland\"}},\"Priority\":\"1\"}',\n+  outputs: '{}',\n+  referenceName: 'VisaApplication',\n+  lastUpdate: '2020-02-19T11:11:56.282Z'\n+};\n+\n+const taskInfo: TaskInfo = new TaskInfoImpl(\n+  userTaskInstance,\n+  'http://localhost:8080/travels'\n+);\n+\n+describe('TaskForm Test', () => {\n+  it('Test rendering form', async () => {\n+    mockedAxios.get.mockResolvedValue({\n+      status: 200,\n+      data: ApplyForVisaForm\n+    });\n+    const wrapper = await getWrapperAsync(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afb438c3b9095aa30b8d2f6e8b25e13a5019000e"}, "originalPosition": 48}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDMzNjE1ODcz", "url": "https://github.com/kiegroup/kogito-apps/pull/271#pullrequestreview-433615873", "createdAt": "2020-06-18T20:16:45Z", "commit": {"oid": "e0bc664f309f355ffce41f9e700c50b5471a2f0b"}, "state": "COMMENTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDoxNjo0NVrOGl-www==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQyMDoyOTowN1rOGl_HNg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ3ODc4Nw==", "bodyText": "@pefernan Looks like we allow multiple actions to be passed in, so there should be multiple click event handlers? And each click event handler should map to the related action, WDYT?", "url": "https://github.com/kiegroup/kogito-apps/pull/271#discussion_r442478787", "createdAt": "2020-06-18T20:16:45Z", "author": {"login": "yzhao583"}, "path": "packages/task-console/src/components/Atoms/FormFooter/FormFooter.tsx", "diffHunk": "@@ -0,0 +1,29 @@\n+import React from 'react';\n+import { ActionGroup, Button } from '@patternfly/react-core';\n+import { FormActionDescription } from '../../../model/FormDescription';\n+\n+interface IOwnProps {\n+  actions?: FormActionDescription[];\n+  onActionClick: (action: FormActionDescription) => void;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0bc664f309f355ffce41f9e700c50b5471a2f0b"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ3OTMxMQ==", "bodyText": "@pefernan Yeah, so looks like all action button will have the same click event handler, it this what we want here?", "url": "https://github.com/kiegroup/kogito-apps/pull/271#discussion_r442479311", "createdAt": "2020-06-18T20:17:46Z", "author": {"login": "yzhao583"}, "path": "packages/task-console/src/components/Atoms/FormFooter/FormFooter.tsx", "diffHunk": "@@ -0,0 +1,29 @@\n+import React from 'react';\n+import { ActionGroup, Button } from '@patternfly/react-core';\n+import { FormActionDescription } from '../../../model/FormDescription';\n+\n+interface IOwnProps {\n+  actions?: FormActionDescription[];\n+  onActionClick: (action: FormActionDescription) => void;\n+}\n+\n+const FormFooter: React.FC<IOwnProps> = ({ actions, onActionClick }) => {\n+  return actions && actions.length > 0 ? (\n+    <ActionGroup>\n+      {actions.map(action => {\n+        return (\n+          <Button\n+            key={'submit-' + action.name}\n+            type=\"submit\"\n+            variant={action.primary ? 'primary' : 'secondary'}\n+            onClick={() => onActionClick(action)}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0bc664f309f355ffce41f9e700c50b5471a2f0b"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ4MTg1Nw==", "bodyText": "@pefernan Maybe we want to check if data exist in \"response\" object? If no data exist, looks like there will be a runtime error", "url": "https://github.com/kiegroup/kogito-apps/pull/271#discussion_r442481857", "createdAt": "2020-06-18T20:23:30Z", "author": {"login": "yzhao583"}, "path": "packages/task-console/src/components/Molecules/FormRenderer/FormRenderer.tsx", "diffHunk": "@@ -0,0 +1,121 @@\n+import React, { useCallback } from 'react';\n+import axios from 'axios';\n+import JSONSchemaBridge from 'uniforms-bridge-json-schema';\n+import { AutoFields, AutoForm, ErrorsField } from 'uniforms-patternfly';\n+import FormFooter from '../../Atoms/FormFooter/FormFooter';\n+import {\n+  FormActionDescription,\n+  FormDescription\n+} from '../../../model/FormDescription';\n+import { TaskInfo } from '../../../model/TaskInfo';\n+import ModelConversionTool from '../../../util/uniforms/ModelConversionTool';\n+import { DefaultFormValidator } from '../../../util/uniforms/FormValidator';\n+\n+interface IOwnProps {\n+  taskInfo: TaskInfo;\n+  form: FormDescription;\n+  model?: any;\n+  successCallback?: (result: string) => void;\n+  errorCallback?: (errorMessage: string) => void;\n+}\n+\n+const FormRenderer: React.FC<IOwnProps> = ({\n+  taskInfo,\n+  form,\n+  model,\n+  successCallback,\n+  errorCallback\n+}) => {\n+  const validator = new DefaultFormValidator(form.schema);\n+\n+  const bridge = new JSONSchemaBridge(form.schema, formModel => {\n+    // Converting back all the JS Dates into String before validating the model\n+    const newModel = ModelConversionTool.convertDateToString(\n+      formModel,\n+      form.schema\n+    );\n+    return validator.validate(newModel);\n+  });\n+\n+  // Converting Dates that are in string format into JS Dates so they can be correctly bound to the uniforms DateField\n+  const formData = ModelConversionTool.convertStringToDate(model, form.schema);\n+\n+  let selectedAction;\n+\n+  const submitForm = useCallback(\n+    async (formModel: any, formAction: FormActionDescription) => {\n+      try {\n+        const data = {};\n+\n+        let endpoint = taskInfo.getTaskEndPoint();\n+\n+        if (formAction.phase) {\n+          endpoint += '?phase=' + formAction.phase;\n+        }\n+\n+        formAction.outputs.forEach(output => {\n+          if (formModel[output]) {\n+            data[output] = formModel[output];\n+          }\n+        });\n+\n+        const response = await axios.post(endpoint, data, {\n+          headers: {\n+            'Content-Type': 'application/json',\n+            Accept: 'application/json',\n+            crossorigin: 'true',\n+            'Access-Control-Allow-Origin': '*'\n+          }\n+        });\n+\n+        if (response.status === 200) {\n+          if (successCallback) {\n+            successCallback(response.data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0bc664f309f355ffce41f9e700c50b5471a2f0b"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ4MjI2MQ==", "bodyText": "@pefernan Same here.", "url": "https://github.com/kiegroup/kogito-apps/pull/271#discussion_r442482261", "createdAt": "2020-06-18T20:24:17Z", "author": {"login": "yzhao583"}, "path": "packages/task-console/src/components/Molecules/FormRenderer/FormRenderer.tsx", "diffHunk": "@@ -0,0 +1,121 @@\n+import React, { useCallback } from 'react';\n+import axios from 'axios';\n+import JSONSchemaBridge from 'uniforms-bridge-json-schema';\n+import { AutoFields, AutoForm, ErrorsField } from 'uniforms-patternfly';\n+import FormFooter from '../../Atoms/FormFooter/FormFooter';\n+import {\n+  FormActionDescription,\n+  FormDescription\n+} from '../../../model/FormDescription';\n+import { TaskInfo } from '../../../model/TaskInfo';\n+import ModelConversionTool from '../../../util/uniforms/ModelConversionTool';\n+import { DefaultFormValidator } from '../../../util/uniforms/FormValidator';\n+\n+interface IOwnProps {\n+  taskInfo: TaskInfo;\n+  form: FormDescription;\n+  model?: any;\n+  successCallback?: (result: string) => void;\n+  errorCallback?: (errorMessage: string) => void;\n+}\n+\n+const FormRenderer: React.FC<IOwnProps> = ({\n+  taskInfo,\n+  form,\n+  model,\n+  successCallback,\n+  errorCallback\n+}) => {\n+  const validator = new DefaultFormValidator(form.schema);\n+\n+  const bridge = new JSONSchemaBridge(form.schema, formModel => {\n+    // Converting back all the JS Dates into String before validating the model\n+    const newModel = ModelConversionTool.convertDateToString(\n+      formModel,\n+      form.schema\n+    );\n+    return validator.validate(newModel);\n+  });\n+\n+  // Converting Dates that are in string format into JS Dates so they can be correctly bound to the uniforms DateField\n+  const formData = ModelConversionTool.convertStringToDate(model, form.schema);\n+\n+  let selectedAction;\n+\n+  const submitForm = useCallback(\n+    async (formModel: any, formAction: FormActionDescription) => {\n+      try {\n+        const data = {};\n+\n+        let endpoint = taskInfo.getTaskEndPoint();\n+\n+        if (formAction.phase) {\n+          endpoint += '?phase=' + formAction.phase;\n+        }\n+\n+        formAction.outputs.forEach(output => {\n+          if (formModel[output]) {\n+            data[output] = formModel[output];\n+          }\n+        });\n+\n+        const response = await axios.post(endpoint, data, {\n+          headers: {\n+            'Content-Type': 'application/json',\n+            Accept: 'application/json',\n+            crossorigin: 'true',\n+            'Access-Control-Allow-Origin': '*'\n+          }\n+        });\n+\n+        if (response.status === 200) {\n+          if (successCallback) {\n+            successCallback(response.data);\n+          }\n+        } else {\n+          if (errorCallback) {\n+            errorCallback(response.data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0bc664f309f355ffce41f9e700c50b5471a2f0b"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ4MjM4NA==", "bodyText": "@pefernan Same here.", "url": "https://github.com/kiegroup/kogito-apps/pull/271#discussion_r442482384", "createdAt": "2020-06-18T20:24:34Z", "author": {"login": "yzhao583"}, "path": "packages/task-console/src/components/Molecules/FormRenderer/FormRenderer.tsx", "diffHunk": "@@ -0,0 +1,121 @@\n+import React, { useCallback } from 'react';\n+import axios from 'axios';\n+import JSONSchemaBridge from 'uniforms-bridge-json-schema';\n+import { AutoFields, AutoForm, ErrorsField } from 'uniforms-patternfly';\n+import FormFooter from '../../Atoms/FormFooter/FormFooter';\n+import {\n+  FormActionDescription,\n+  FormDescription\n+} from '../../../model/FormDescription';\n+import { TaskInfo } from '../../../model/TaskInfo';\n+import ModelConversionTool from '../../../util/uniforms/ModelConversionTool';\n+import { DefaultFormValidator } from '../../../util/uniforms/FormValidator';\n+\n+interface IOwnProps {\n+  taskInfo: TaskInfo;\n+  form: FormDescription;\n+  model?: any;\n+  successCallback?: (result: string) => void;\n+  errorCallback?: (errorMessage: string) => void;\n+}\n+\n+const FormRenderer: React.FC<IOwnProps> = ({\n+  taskInfo,\n+  form,\n+  model,\n+  successCallback,\n+  errorCallback\n+}) => {\n+  const validator = new DefaultFormValidator(form.schema);\n+\n+  const bridge = new JSONSchemaBridge(form.schema, formModel => {\n+    // Converting back all the JS Dates into String before validating the model\n+    const newModel = ModelConversionTool.convertDateToString(\n+      formModel,\n+      form.schema\n+    );\n+    return validator.validate(newModel);\n+  });\n+\n+  // Converting Dates that are in string format into JS Dates so they can be correctly bound to the uniforms DateField\n+  const formData = ModelConversionTool.convertStringToDate(model, form.schema);\n+\n+  let selectedAction;\n+\n+  const submitForm = useCallback(\n+    async (formModel: any, formAction: FormActionDescription) => {\n+      try {\n+        const data = {};\n+\n+        let endpoint = taskInfo.getTaskEndPoint();\n+\n+        if (formAction.phase) {\n+          endpoint += '?phase=' + formAction.phase;\n+        }\n+\n+        formAction.outputs.forEach(output => {\n+          if (formModel[output]) {\n+            data[output] = formModel[output];\n+          }\n+        });\n+\n+        const response = await axios.post(endpoint, data, {\n+          headers: {\n+            'Content-Type': 'application/json',\n+            Accept: 'application/json',\n+            crossorigin: 'true',\n+            'Access-Control-Allow-Origin': '*'\n+          }\n+        });\n+\n+        if (response.status === 200) {\n+          if (successCallback) {\n+            successCallback(response.data);\n+          }\n+        } else {\n+          if (errorCallback) {\n+            errorCallback(response.data);\n+          }\n+        }\n+      } catch (e) {\n+        if (errorCallback) {\n+          errorCallback(e.response.data);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0bc664f309f355ffce41f9e700c50b5471a2f0b"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjQ4NDUzNA==", "bodyText": "@pefernan Minor: What does \"Pi\" mean? Could we make it more meaningful?Thanks", "url": "https://github.com/kiegroup/kogito-apps/pull/271#discussion_r442484534", "createdAt": "2020-06-18T20:29:07Z", "author": {"login": "yzhao583"}, "path": "packages/task-console/src/components/Molecules/TaskListItem/TaskListItem.tsx", "diffHunk": "@@ -1,54 +1,29 @@\n import Moment from 'react-moment';\n-import React, { useCallback, useState, useEffect } from 'react';\n+import React, { useState, useEffect, useContext } from 'react';\n import {\n-  Alert,\n-  AlertActionCloseButton,\n-  Button,\n   DataListAction,\n   DataListCell,\n   DataListItem,\n   DataListItemCells,\n   DataListItemRow\n } from '@patternfly/react-core';\n-import { useGetProcessInstanceByIdLazyQuery } from '../../../graphql/types';\n-import axios from 'axios';\n-\n-/* tslint:disable:no-string-literal */\n-\n-interface IUserTaskInstance {\n-  id: string;\n-  description: string;\n-  name: string;\n-  priority: string;\n-  processInstanceId: string;\n-  processId: string;\n-  rootProcessInstanceId;\n-  rootProcessId;\n-  state: string;\n-  actualOwner: string;\n-  adminGroups: string;\n-  adminUsers: string;\n-  completed: boolean;\n-  started: string;\n-  excludedUsers: string;\n-  potentialGroups: string;\n-  potentialUsers: string;\n-  inputs: string;\n-  outputs: string;\n-  referenceName: string;\n-}\n+import {\n+  useGetProcessInstanceByIdLazyQuery,\n+  UserTaskInstance\n+} from '../../../graphql/types';\n+import { Link } from 'react-router-dom';\n+import TaskConsoleContext, {\n+  IContext\n+} from '../../../context/TaskConsoleContext/TaskConsoleContext';\n+import { TaskInfoImpl, TaskInfo } from '../../../model/TaskInfo';\n \n export interface IOwnProps {\n   id: number;\n-  userTaskInstanceData: IUserTaskInstance;\n+  userTaskInstanceData: UserTaskInstance;\n }\n \n const TaskListItem: React.FC<IOwnProps> = ({ userTaskInstanceData }) => {\n   const [isPiLoaded, setPiLoaded] = useState(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0bc664f309f355ffce41f9e700c50b5471a2f0b"}, "originalPosition": 58}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e0bc664f309f355ffce41f9e700c50b5471a2f0b", "author": {"user": {"login": "pefernan", "name": "Pere Fern\u00e1ndez"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/e0bc664f309f355ffce41f9e700c50b5471a2f0b", "committedDate": "2020-06-18T13:29:48Z", "message": "- Testing fixes"}, "afterCommit": {"oid": "323a3e0072fc7b325e5c266632b6341cbdb3b4b3", "author": {"user": {"login": "pefernan", "name": "Pere Fern\u00e1ndez"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/323a3e0072fc7b325e5c266632b6341cbdb3b4b3", "committedDate": "2020-06-19T10:48:11Z", "message": "- code suggestions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0NzkwODY4", "url": "https://github.com/kiegroup/kogito-apps/pull/271#pullrequestreview-434790868", "createdAt": "2020-06-22T10:19:17Z", "commit": {"oid": "323a3e0072fc7b325e5c266632b6341cbdb3b4b3"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMDoxOToxN1rOGm6m7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMDoxOToxN1rOGm6m7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ1OTMxMA==", "bodyText": "somewhere there's space between if and parentheses, in others not, please unify this (in the code you've actually changed, not globally).", "url": "https://github.com/kiegroup/kogito-apps/pull/271#discussion_r443459310", "createdAt": "2020-06-22T10:19:17Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/task-console/server/MockData/controllers.js", "diffHunk": "@@ -18,13 +22,52 @@ module.exports = controller = {\n       return err.taskId === req.params.taskId;\n     });\n \n+    const phase = req.query.phase;\n+\n     switch (task[0].complete) {\n       case 'success':\n-        res.send(task[0].message);\n+        let successMessage;\n+\n+        if(phase) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "323a3e0072fc7b325e5c266632b6341cbdb3b4b3"}, "originalPosition": 19}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM0OTA2MDY3", "url": "https://github.com/kiegroup/kogito-apps/pull/271#pullrequestreview-434906067", "createdAt": "2020-06-22T13:09:59Z", "commit": {"oid": "b50d318397ea7f61551843e5a47ae4d930726961"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1MDk2MDcy", "url": "https://github.com/kiegroup/kogito-apps/pull/271#pullrequestreview-435096072", "createdAt": "2020-06-22T16:37:39Z", "commit": {"oid": "b50d318397ea7f61551843e5a47ae4d930726961"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b50d318397ea7f61551843e5a47ae4d930726961", "author": {"user": {"login": "pefernan", "name": "Pere Fern\u00e1ndez"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/b50d318397ea7f61551843e5a47ae4d930726961", "committedDate": "2020-06-22T12:57:58Z", "message": "- code style"}, "afterCommit": {"oid": "c088671cd85d20dfe1d73371f288ea7f9577de32", "author": {"user": {"login": "pefernan", "name": "Pere Fern\u00e1ndez"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/c088671cd85d20dfe1d73371f288ea7f9577de32", "committedDate": "2020-06-22T20:24:49Z", "message": "- code style"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c088671cd85d20dfe1d73371f288ea7f9577de32", "author": {"user": {"login": "pefernan", "name": "Pere Fern\u00e1ndez"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/c088671cd85d20dfe1d73371f288ea7f9577de32", "committedDate": "2020-06-22T20:24:49Z", "message": "- code style"}, "afterCommit": {"oid": "9579416ea047d9ae3707bc1baf36b35032626271", "author": {"user": {"login": "pefernan", "name": "Pere Fern\u00e1ndez"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/9579416ea047d9ae3707bc1baf36b35032626271", "committedDate": "2020-06-23T07:11:54Z", "message": "- code style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "815b24467a9da233999c04f330a924d3c607bc95", "author": {"user": {"login": "pefernan", "name": "Pere Fern\u00e1ndez"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/815b24467a9da233999c04f330a924d3c607bc95", "committedDate": "2020-06-23T07:18:17Z", "message": "KOGITO-2086: Implement Task Form Building Block"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "25c81761ab712a83d42bb556e1ab9d2c50174bb2", "author": {"user": {"login": "pefernan", "name": "Pere Fern\u00e1ndez"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/25c81761ab712a83d42bb556e1ab9d2c50174bb2", "committedDate": "2020-06-23T07:18:17Z", "message": "- Versions fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3226ba8a828ccd9abe3ef54aa27705d63c95af00", "author": {"user": {"login": "pefernan", "name": "Pere Fern\u00e1ndez"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/3226ba8a828ccd9abe3ef54aa27705d63c95af00", "committedDate": "2020-06-23T07:18:17Z", "message": "- Testing fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6abfdcb6634c6d8999198a23bab9c131c4fdcf37", "author": {"user": {"login": "pefernan", "name": "Pere Fern\u00e1ndez"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/6abfdcb6634c6d8999198a23bab9c131c4fdcf37", "committedDate": "2020-06-23T07:18:17Z", "message": "- rebased with latest changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "79769c9202c6a86d431c9b36876aa4771457010c", "author": {"user": {"login": "pefernan", "name": "Pere Fern\u00e1ndez"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/79769c9202c6a86d431c9b36876aa4771457010c", "committedDate": "2020-06-23T07:18:17Z", "message": "- code suggestions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ad82228fd2fcc18e5ec8ea92a794fddd0cf2a523", "author": {"user": {"login": "pefernan", "name": "Pere Fern\u00e1ndez"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/ad82228fd2fcc18e5ec8ea92a794fddd0cf2a523", "committedDate": "2020-06-23T07:18:17Z", "message": "- code style"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "9579416ea047d9ae3707bc1baf36b35032626271", "author": {"user": {"login": "pefernan", "name": "Pere Fern\u00e1ndez"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/9579416ea047d9ae3707bc1baf36b35032626271", "committedDate": "2020-06-23T07:11:54Z", "message": "- code style"}, "afterCommit": {"oid": "ad82228fd2fcc18e5ec8ea92a794fddd0cf2a523", "author": {"user": {"login": "pefernan", "name": "Pere Fern\u00e1ndez"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/ad82228fd2fcc18e5ec8ea92a794fddd0cf2a523", "committedDate": "2020-06-23T07:18:17Z", "message": "- code style"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d7e403ce8848289b57c1edccfc4068b76686e3b", "author": {"user": {"login": "pefernan", "name": "Pere Fern\u00e1ndez"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/5d7e403ce8848289b57c1edccfc4068b76686e3b", "committedDate": "2020-06-23T12:00:28Z", "message": "- Fixing tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "522ee08bede9f726ee93f111f52f0d5d1100a7c7", "author": {"user": {"login": "pefernan", "name": "Pere Fern\u00e1ndez"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/522ee08bede9f726ee93f111f52f0d5d1100a7c7", "committedDate": "2020-06-23T11:49:24Z", "message": "- Fixing tests"}, "afterCommit": {"oid": "5d7e403ce8848289b57c1edccfc4068b76686e3b", "author": {"user": {"login": "pefernan", "name": "Pere Fern\u00e1ndez"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/5d7e403ce8848289b57c1edccfc4068b76686e3b", "committedDate": "2020-06-23T12:00:28Z", "message": "- Fixing tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDM1NzE2MTE2", "url": "https://github.com/kiegroup/kogito-apps/pull/271#pullrequestreview-435716116", "createdAt": "2020-06-23T12:09:32Z", "commit": {"oid": "5d7e403ce8848289b57c1edccfc4068b76686e3b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 123, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}