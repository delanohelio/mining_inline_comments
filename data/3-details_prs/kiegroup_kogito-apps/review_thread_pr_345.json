{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU2Mjg4OTI5", "number": 345, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMjozNzozMVrOESynoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDo0Njo1NFrOEZp1Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4MTM5MTY4OnYy", "diffSide": "RIGHT", "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/TrustyServiceTestUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOFQxMjozNzozMVrOG4Kg4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxMzozOTozMlrOHBpKvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU0NTY5OQ==", "bodyText": "Would it be possible split these long lines to make code more readable?", "url": "https://github.com/kiegroup/kogito-apps/pull/345#discussion_r461545699", "createdAt": "2020-07-28T12:37:31Z", "author": {"login": "jiripetrlik"}, "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/TrustyServiceTestUtils.java", "diffHunk": "@@ -363,19 +397,19 @@ private static TraceHeader buildHeader(String executionId, Long startTs, Long en\n     }\n \n     private static TraceInputValue buildInputDriver(String value, List<Message> messages) {\n-        return new TraceInputValue(INPUT_DRIVER_NODE_ID, INPUT_DRIVER_NODE_NAME, tDriverType, toJsonNode(value), messages);\n+        return new TraceInputValue(INPUT_DRIVER_NODE_ID, INPUT_DRIVER_NODE_NAME, value == null ? vEventDriverNull : vEventDriver, messages);\n     }\n \n     private static TraceInputValue buildInputViolation(String value, List<Message> messages) {\n-        return new TraceInputValue(INPUT_VIOLATION_NODE_ID, INPUT_VIOLATION_NODE_NAME, tViolationType, toJsonNode(value), messages);\n+        return new TraceInputValue(INPUT_VIOLATION_NODE_ID, INPUT_VIOLATION_NODE_NAME, vEventViolation, messages);\n     }\n \n     private static TraceOutputValue buildOutputFine(String value, List<Message> messages) {\n-        return new TraceOutputValue(OUTPUT_FINE_NODE_ID, OUTPUT_FINE_NODE_NAME, EVALUATION_STATUS_SUCCEEDED, tFineType, toJsonNode(value), messages);\n+        return new TraceOutputValue(OUTPUT_FINE_NODE_ID, OUTPUT_FINE_NODE_NAME, EVALUATION_STATUS_SUCCEEDED, vEventFine, Map.of(INPUT_VIOLATION_NODE_NAME, vEventViolation), messages);\n     }\n \n     private static TraceOutputValue buildOutputShouldTheDriverBeSuspended(String status, String value, List<Message> messages) {\n-        return new TraceOutputValue(OUTPUT_SHOULD_THE_DRIVER_BE_SUSPENDED_NODE_ID, OUTPUT_SHOULD_THE_DRIVER_BE_SUSPENDED_NODE_NAME, status, stringType, toJsonNode(value), messages);\n+        return new TraceOutputValue(OUTPUT_SHOULD_THE_DRIVER_BE_SUSPENDED_NODE_ID, OUTPUT_SHOULD_THE_DRIVER_BE_SUSPENDED_NODE_NAME, status, value == null ? null : vEventSuspended, value == null ? Map.of(\"Fine\", vEventFine) : Map.of(\"Driver\", vEventDriver, \"Fine\", vEventFine), messages);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c00361c416a0a60906f8c9957eace8678a96a9cb"}, "originalPosition": 143}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTQ4NTExOQ==", "bodyText": "Done", "url": "https://github.com/kiegroup/kogito-apps/pull/345#discussion_r471485119", "createdAt": "2020-08-17T13:39:32Z", "author": {"login": "kostola"}, "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/TrustyServiceTestUtils.java", "diffHunk": "@@ -363,19 +397,19 @@ private static TraceHeader buildHeader(String executionId, Long startTs, Long en\n     }\n \n     private static TraceInputValue buildInputDriver(String value, List<Message> messages) {\n-        return new TraceInputValue(INPUT_DRIVER_NODE_ID, INPUT_DRIVER_NODE_NAME, tDriverType, toJsonNode(value), messages);\n+        return new TraceInputValue(INPUT_DRIVER_NODE_ID, INPUT_DRIVER_NODE_NAME, value == null ? vEventDriverNull : vEventDriver, messages);\n     }\n \n     private static TraceInputValue buildInputViolation(String value, List<Message> messages) {\n-        return new TraceInputValue(INPUT_VIOLATION_NODE_ID, INPUT_VIOLATION_NODE_NAME, tViolationType, toJsonNode(value), messages);\n+        return new TraceInputValue(INPUT_VIOLATION_NODE_ID, INPUT_VIOLATION_NODE_NAME, vEventViolation, messages);\n     }\n \n     private static TraceOutputValue buildOutputFine(String value, List<Message> messages) {\n-        return new TraceOutputValue(OUTPUT_FINE_NODE_ID, OUTPUT_FINE_NODE_NAME, EVALUATION_STATUS_SUCCEEDED, tFineType, toJsonNode(value), messages);\n+        return new TraceOutputValue(OUTPUT_FINE_NODE_ID, OUTPUT_FINE_NODE_NAME, EVALUATION_STATUS_SUCCEEDED, vEventFine, Map.of(INPUT_VIOLATION_NODE_NAME, vEventViolation), messages);\n     }\n \n     private static TraceOutputValue buildOutputShouldTheDriverBeSuspended(String status, String value, List<Message> messages) {\n-        return new TraceOutputValue(OUTPUT_SHOULD_THE_DRIVER_BE_SUSPENDED_NODE_ID, OUTPUT_SHOULD_THE_DRIVER_BE_SUSPENDED_NODE_NAME, status, stringType, toJsonNode(value), messages);\n+        return new TraceOutputValue(OUTPUT_SHOULD_THE_DRIVER_BE_SUSPENDED_NODE_ID, OUTPUT_SHOULD_THE_DRIVER_BE_SUSPENDED_NODE_NAME, status, value == null ? null : vEventSuspended, value == null ? Map.of(\"Fine\", vEventFine) : Map.of(\"Driver\", vEventDriver, \"Fine\", vEventFine), messages);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MTU0NTY5OQ=="}, "originalCommit": {"oid": "c00361c416a0a60906f8c9957eace8678a96a9cb"}, "originalPosition": 143}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg4NzcyMDA0OnYy", "diffSide": "RIGHT", "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/responses/TypedVariableResponseTest.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yOVQxOToyNTo0OFrOG5G3Aw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQxMzo1MzoxM1rOG-421A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUzNDQwMw==", "bodyText": "It's quite hard to understand what are the created objects and what it's really tested. Isnt't better to create a resource file and deserialize it?\nIf this is not a stable implementation and you prefer to create the things programmatically, do you mind to create a ticket so that we keep track that we have to change it in the future?", "url": "https://github.com/kiegroup/kogito-apps/pull/345#discussion_r462534403", "createdAt": "2020-07-29T19:25:48Z", "author": {"login": "r00ta"}, "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/responses/TypedVariableResponseTest.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.responses;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import io.cloudevents.json.Json;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.trusty.storage.api.model.TypedVariable;\n+\n+class TypedVariableResponseTest {\n+\n+    private static final String FIELD_COMPONENTS = \"components\";\n+    private static final String FIELD_NAME = \"name\";\n+    private static final String FIELD_TYPE_REF = \"typeRef\";\n+    private static final String FIELD_VALUE = \"value\";\n+    private static final String TYPE_REF_NUMBER = \"number\";\n+    private static final String TYPE_REF_STRING = \"string\";\n+    private static final String TYPE_REF_STRUCT = \"StructType\";\n+    private static final String VAR_NAME_COLLECTION = \"tstCollection\";\n+    private static final String VAR_NAME_STRUCT = \"tstStruct\";\n+    private static final String VAR_NAME_UNIT = \"tstUnit\";\n+    private static final String VALUE_AGE = \"age\";\n+    private static final String VALUE_COUNT_ONE = \"One\";\n+    private static final String VALUE_COUNT_TWO = \"Two\";\n+    private static final String VALUE_COUNT_THREE = \"Three\";\n+    private static final String VALUE_HELLO_THIS_IS_A_TEST = \"hello this is a test\";\n+    private static final String VALUE_MILANO = \"Milano\";\n+    private static final String VALUE_MONZA = \"Monza\";\n+    private static final String VALUE_TAVULLIA = \"Tavullia\";\n+    private static final String VALUE_TOWN = \"town\";\n+    private static final int VALUE_34 = 34;\n+    private static final int VALUE_41 = 41;\n+    private static final int VALUE_50 = 50;\n+\n+    @Test\n+    void testCollection() throws JsonProcessingException {\n+        TypedVariableResponse response = TypedVariableResponse.from(buildTestCollection());\n+\n+        Assertions.assertEquals(VAR_NAME_COLLECTION, response.getName());\n+        Assertions.assertEquals(TYPE_REF_STRING, response.getTypeRef());\n+        Assertions.assertNotNull(response.getValue());\n+        Assertions.assertNull(response.getComponents());\n+\n+        Assertions.assertTrue(response.getValue().isArray());\n+        Assertions.assertSame(3, response.getValue().size());\n+        Assertions.assertTrue(response.getValue().get(0).isTextual());\n+        Assertions.assertEquals(VALUE_COUNT_ONE, response.getValue().get(0).textValue());\n+        Assertions.assertTrue(response.getValue().get(1).isTextual());\n+        Assertions.assertEquals(VALUE_COUNT_TWO, response.getValue().get(1).textValue());\n+        Assertions.assertTrue(response.getValue().get(2).isTextual());\n+        Assertions.assertEquals(VALUE_COUNT_THREE, response.getValue().get(2).textValue());\n+    }\n+\n+    @Test\n+    void testCollectionOfStructures() throws JsonProcessingException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b68a0f6f29b150e0e75b7e3b6de1d8411d6e5ad"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU5MTk1Ng==", "bodyText": "This is something that @danielezonca asked me to do.\nImho we should discuss which approach we want to use once for all when he comes back, so that from that moment we'll be all on the same page.", "url": "https://github.com/kiegroup/kogito-apps/pull/345#discussion_r468591956", "createdAt": "2020-08-11T13:47:21Z", "author": {"login": "kostola"}, "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/responses/TypedVariableResponseTest.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.responses;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import io.cloudevents.json.Json;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.trusty.storage.api.model.TypedVariable;\n+\n+class TypedVariableResponseTest {\n+\n+    private static final String FIELD_COMPONENTS = \"components\";\n+    private static final String FIELD_NAME = \"name\";\n+    private static final String FIELD_TYPE_REF = \"typeRef\";\n+    private static final String FIELD_VALUE = \"value\";\n+    private static final String TYPE_REF_NUMBER = \"number\";\n+    private static final String TYPE_REF_STRING = \"string\";\n+    private static final String TYPE_REF_STRUCT = \"StructType\";\n+    private static final String VAR_NAME_COLLECTION = \"tstCollection\";\n+    private static final String VAR_NAME_STRUCT = \"tstStruct\";\n+    private static final String VAR_NAME_UNIT = \"tstUnit\";\n+    private static final String VALUE_AGE = \"age\";\n+    private static final String VALUE_COUNT_ONE = \"One\";\n+    private static final String VALUE_COUNT_TWO = \"Two\";\n+    private static final String VALUE_COUNT_THREE = \"Three\";\n+    private static final String VALUE_HELLO_THIS_IS_A_TEST = \"hello this is a test\";\n+    private static final String VALUE_MILANO = \"Milano\";\n+    private static final String VALUE_MONZA = \"Monza\";\n+    private static final String VALUE_TAVULLIA = \"Tavullia\";\n+    private static final String VALUE_TOWN = \"town\";\n+    private static final int VALUE_34 = 34;\n+    private static final int VALUE_41 = 41;\n+    private static final int VALUE_50 = 50;\n+\n+    @Test\n+    void testCollection() throws JsonProcessingException {\n+        TypedVariableResponse response = TypedVariableResponse.from(buildTestCollection());\n+\n+        Assertions.assertEquals(VAR_NAME_COLLECTION, response.getName());\n+        Assertions.assertEquals(TYPE_REF_STRING, response.getTypeRef());\n+        Assertions.assertNotNull(response.getValue());\n+        Assertions.assertNull(response.getComponents());\n+\n+        Assertions.assertTrue(response.getValue().isArray());\n+        Assertions.assertSame(3, response.getValue().size());\n+        Assertions.assertTrue(response.getValue().get(0).isTextual());\n+        Assertions.assertEquals(VALUE_COUNT_ONE, response.getValue().get(0).textValue());\n+        Assertions.assertTrue(response.getValue().get(1).isTextual());\n+        Assertions.assertEquals(VALUE_COUNT_TWO, response.getValue().get(1).textValue());\n+        Assertions.assertTrue(response.getValue().get(2).isTextual());\n+        Assertions.assertEquals(VALUE_COUNT_THREE, response.getValue().get(2).textValue());\n+    }\n+\n+    @Test\n+    void testCollectionOfStructures() throws JsonProcessingException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUzNDQwMw=="}, "originalCommit": {"oid": "7b68a0f6f29b150e0e75b7e3b6de1d8411d6e5ad"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODU5NjQzNg==", "bodyText": "Here is the original comment: #294 (comment)", "url": "https://github.com/kiegroup/kogito-apps/pull/345#discussion_r468596436", "createdAt": "2020-08-11T13:53:13Z", "author": {"login": "kostola"}, "path": "trusty/trusty-service/src/test/java/org/kie/kogito/trusty/service/responses/TypedVariableResponseTest.java", "diffHunk": "@@ -0,0 +1,204 @@\n+/*\n+ *  Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.kie.kogito.trusty.service.responses;\n+\n+import java.util.List;\n+\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import io.cloudevents.json.Json;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.trusty.storage.api.model.TypedVariable;\n+\n+class TypedVariableResponseTest {\n+\n+    private static final String FIELD_COMPONENTS = \"components\";\n+    private static final String FIELD_NAME = \"name\";\n+    private static final String FIELD_TYPE_REF = \"typeRef\";\n+    private static final String FIELD_VALUE = \"value\";\n+    private static final String TYPE_REF_NUMBER = \"number\";\n+    private static final String TYPE_REF_STRING = \"string\";\n+    private static final String TYPE_REF_STRUCT = \"StructType\";\n+    private static final String VAR_NAME_COLLECTION = \"tstCollection\";\n+    private static final String VAR_NAME_STRUCT = \"tstStruct\";\n+    private static final String VAR_NAME_UNIT = \"tstUnit\";\n+    private static final String VALUE_AGE = \"age\";\n+    private static final String VALUE_COUNT_ONE = \"One\";\n+    private static final String VALUE_COUNT_TWO = \"Two\";\n+    private static final String VALUE_COUNT_THREE = \"Three\";\n+    private static final String VALUE_HELLO_THIS_IS_A_TEST = \"hello this is a test\";\n+    private static final String VALUE_MILANO = \"Milano\";\n+    private static final String VALUE_MONZA = \"Monza\";\n+    private static final String VALUE_TAVULLIA = \"Tavullia\";\n+    private static final String VALUE_TOWN = \"town\";\n+    private static final int VALUE_34 = 34;\n+    private static final int VALUE_41 = 41;\n+    private static final int VALUE_50 = 50;\n+\n+    @Test\n+    void testCollection() throws JsonProcessingException {\n+        TypedVariableResponse response = TypedVariableResponse.from(buildTestCollection());\n+\n+        Assertions.assertEquals(VAR_NAME_COLLECTION, response.getName());\n+        Assertions.assertEquals(TYPE_REF_STRING, response.getTypeRef());\n+        Assertions.assertNotNull(response.getValue());\n+        Assertions.assertNull(response.getComponents());\n+\n+        Assertions.assertTrue(response.getValue().isArray());\n+        Assertions.assertSame(3, response.getValue().size());\n+        Assertions.assertTrue(response.getValue().get(0).isTextual());\n+        Assertions.assertEquals(VALUE_COUNT_ONE, response.getValue().get(0).textValue());\n+        Assertions.assertTrue(response.getValue().get(1).isTextual());\n+        Assertions.assertEquals(VALUE_COUNT_TWO, response.getValue().get(1).textValue());\n+        Assertions.assertTrue(response.getValue().get(2).isTextual());\n+        Assertions.assertEquals(VALUE_COUNT_THREE, response.getValue().get(2).textValue());\n+    }\n+\n+    @Test\n+    void testCollectionOfStructures() throws JsonProcessingException {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2MjUzNDQwMw=="}, "originalCommit": {"oid": "7b68a0f6f29b150e0e75b7e3b6de1d8411d6e5ad"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MzM1MjA2OnYy", "diffSide": "RIGHT", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/responses/ExecutionHeaderResponse.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQyMDo0Njo1NFrOHCmFdw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxMDozNDo1OVrOHDBYsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4MzE5MQ==", "bodyText": "Is this the rest response object?\nDo we need this information in UI side?", "url": "https://github.com/kiegroup/kogito-apps/pull/345#discussion_r472483191", "createdAt": "2020-08-18T20:46:54Z", "author": {"login": "danielezonca"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/responses/ExecutionHeaderResponse.java", "diffHunk": "@@ -33,11 +33,14 @@\n     @JsonProperty(\"executionId\")\n     private String executionId;\n \n+    @JsonProperty(\"sourceUrl\")\n+    private String sourceUrl;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6db551fc24d342e326bb351d428d706d29b0c177"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mjc5MzUxOA==", "bodyText": "Well...I assumed so but I am not sure actually...should I remove it?", "url": "https://github.com/kiegroup/kogito-apps/pull/345#discussion_r472793518", "createdAt": "2020-08-19T07:16:38Z", "author": {"login": "kostola"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/responses/ExecutionHeaderResponse.java", "diffHunk": "@@ -33,11 +33,14 @@\n     @JsonProperty(\"executionId\")\n     private String executionId;\n \n+    @JsonProperty(\"sourceUrl\")\n+    private String sourceUrl;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4MzE5MQ=="}, "originalCommit": {"oid": "6db551fc24d342e326bb351d428d706d29b0c177"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjkzMDQ4MA==", "bodyText": "Removed", "url": "https://github.com/kiegroup/kogito-apps/pull/345#discussion_r472930480", "createdAt": "2020-08-19T10:34:59Z", "author": {"login": "kostola"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/responses/ExecutionHeaderResponse.java", "diffHunk": "@@ -33,11 +33,14 @@\n     @JsonProperty(\"executionId\")\n     private String executionId;\n \n+    @JsonProperty(\"sourceUrl\")\n+    private String sourceUrl;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjQ4MzE5MQ=="}, "originalCommit": {"oid": "6db551fc24d342e326bb351d428d706d29b0c177"}, "originalPosition": 5}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 859, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}