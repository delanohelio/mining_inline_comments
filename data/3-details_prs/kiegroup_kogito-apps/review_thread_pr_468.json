{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkyODQ3ODIw", "number": 468, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNTo1ODoyNFrOEn7tBQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMTowNjoyMVrOEoT8lw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzA4MTAxOnYy", "diffSide": "RIGHT", "path": "security-commons/pom.xml", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNTo1ODoyNFrOHYvZRA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNTo1ODoyNFrOHYvZRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcwNDM4OA==", "bodyText": "If these dependencies are not necessary, please remove them.", "url": "https://github.com/kiegroup/kogito-apps/pull/468#discussion_r495704388", "createdAt": "2020-09-28T05:58:24Z", "author": {"login": "Sgitario"}, "path": "security-commons/pom.xml", "diffHunk": "@@ -0,0 +1,106 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <parent>\n+    <artifactId>kogito-apps</artifactId>\n+    <groupId>org.kie.kogito</groupId>\n+    <version>1.0.0-SNAPSHOT</version>\n+  </parent>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <name>Kogito :: Security Commons</name>\n+  <artifactId>security-commons</artifactId>\n+\n+  <dependencyManagement>\n+    <dependencies>\n+      <dependency>\n+        <groupId>org.kie.kogito</groupId>\n+        <artifactId>kogito-bom</artifactId>\n+        <version>${project.version}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+      <dependency>\n+        <groupId>io.quarkus</groupId>\n+        <artifactId>quarkus-bom</artifactId>\n+        <version>${version.io.quarkus}</version>\n+        <type>pom</type>\n+        <scope>import</scope>\n+      </dependency>\n+    </dependencies>\n+  </dependencyManagement>\n+  <dependencies>\n+\n+    <!--dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-vertx-web</artifactId>\n+    </dependency -->\n+    <!--dependency>\n+      <groupId>io.quarkus</groupId>\n+      <artifactId>quarkus-resteasy</artifactId>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdbacf9515b77c021687910e741a66c1740937c9"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzA5MTE3OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/utils/KeycloakClient.ts", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNjowMzozMVrOHYvfGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNjowMzozMVrOHYvfGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcwNTg4Mg==", "bodyText": "The name \"isReactAuthEnabled\" is accurated? Now, the auth is implemented in quarkus, so maybe just \"isAuthEnabled\" would be more correct?", "url": "https://github.com/kiegroup/kogito-apps/pull/468#discussion_r495705882", "createdAt": "2020-09-28T06:03:31Z", "author": {"login": "Sgitario"}, "path": "ui-packages/packages/common/src/utils/KeycloakClient.ts", "diffHunk": "@@ -31,74 +35,143 @@ const keycloakInstance = createKeycloakInstance();\n export const getKeycloakInstance = (): KeycloakInstance => {\n   return keycloakInstance;\n };\n-export const getUserName = (): string => {\n-  let username = 'Anonymous';\n+\n+let currentSecurityContext;\n+export const getLoadedSecurityContext = (): UserContext => {\n+  if (!currentSecurityContext) {\n+    return {\n+      userName: 'Anonymous',\n+      roles: [],\n+      token: ''\n+    };\n+  }\n+  return currentSecurityContext;\n+}\n+\n+export const loadSecurityContext = async (\n+  onloadSuccess: () => void\n+) => {\n   if (isAuthEnabled()) {\n-    // @ts-ignore\n-    username = getKeycloakInstance().tokenParsed.preferred_username;\n+    if (isReactAuthEnabled()) {\n+      currentSecurityContext = {\n+        // @ts-ignore\n+        userName: getKeycloakInstance().tokenParsed.preferred_username,\n+        roles: getKeycloakInstance().tokenParsed.realm_access.roles,\n+        token: getKeycloakInstance().token\n+      };\n+      onloadSuccess();\n+    } else {\n+      try {\n+        const response = await axios.get(`/api/user/me`, {\n+          headers: {'Access-Control-Allow-Origin': '*'}\n+        });\n+        currentSecurityContext = response.data;\n+        onloadSuccess();\n+      } catch (error) {\n+        currentSecurityContext = {\n+          userName: error.message,\n+          roles: [],\n+          token: ''\n+        };\n+      }\n+    }\n+  } else {\n+    currentSecurityContext = {\n+      userName: 'Anonymous',\n+      roles: [],\n+      token: ''\n+    };\n+    onloadSuccess();\n   }\n-  return username;\n+};\n+\n+export const getUserName = (): string => {\n+  return getLoadedSecurityContext().userName;\n };\n \n export const getToken = (): string => {\n-  // @ts-ignore\n-  return getKeycloakInstance().token;\n+  return getLoadedSecurityContext().token;\n+};\n+\n+export const getRoles = (): string[] => {\n+  return getLoadedSecurityContext().roles;\n+};\n+\n+export const addResponseInterceptor = (client: AxiosInstance, onError: (AxiosRequestConfig) => void) => {\n+  client.interceptors.response.use(response => response,\n+    (error) => {\n+      if (error.response.status === 401) {\n+        onError(error.config);\n+      }\n+      return Promise.reject(error);\n+    });\n };\n \n export const appRenderWithAxiosInterceptorConfig = (\n   appRender: () => void\n ): void => {\n   if (isAuthEnabled()) {\n-    getKeycloakInstance()\n-      .init({ onLoad: 'login-required' })\n-      .success(authenticated => {\n-        if (authenticated) {\n-          appRender();\n-        }\n-      });\n-\n+    if (isReactAuthEnabled()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdbacf9515b77c021687910e741a66c1740937c9"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwMzA5MzQ0OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/management-console/package.json", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQwNjowNDozN1rOHYvgcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOFQxMDoxNzo1MFrOHY3Wxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcwNjIyNg==", "bodyText": "Why do we need this property \"KOGITO_REACT_AUTH_ENABLED\"? Should not we use the KOGITO_AUTH_ENABLED for both quarkus and react apps as they are tied with each other now?", "url": "https://github.com/kiegroup/kogito-apps/pull/468#discussion_r495706226", "createdAt": "2020-09-28T06:04:37Z", "author": {"login": "Sgitario"}, "path": "ui-packages/packages/management-console/package.json", "diffHunk": "@@ -12,7 +12,7 @@\n     \"precommit\": \"lint-staged\",\n     \"build:prod\": \"yarn run lint && webpack --config webpack.prod.js\",\n     \"start\": \"webpack-dev-server --hot --color --progress --info=true --config webpack.dev.js\",\n-    \"start-auth\": \"webpack-dev-server --hot --color --progress --info=true --config webpack.dev.js --define process.env.KOGITO_AUTH_ENABLED=true\",\n+    \"start-auth\": \"webpack-dev-server --hot --color --progress --info=true --config webpack.dev.js --define process.env.KOGITO_AUTH_ENABLED=true --define process.env.KOGITO_REACT_AUTH_ENABLED=true\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cdbacf9515b77c021687910e741a66c1740937c9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcxNzMzNQ==", "bodyText": "@Sgitario the idea is to maintain the two modes of security: with the quarkus application (oidc extension) and at the react side (keycloak.js). That reactAuth enabled (property \"KOGITO_REACT_AUTH_ENABLED) has the goal to differentiate them.\nThe common use would be the quarkus security, but I keep this thinking in future integrations of the MC(react side).", "url": "https://github.com/kiegroup/kogito-apps/pull/468#discussion_r495717335", "createdAt": "2020-09-28T06:37:43Z", "author": {"login": "nmirasch"}, "path": "ui-packages/packages/management-console/package.json", "diffHunk": "@@ -12,7 +12,7 @@\n     \"precommit\": \"lint-staged\",\n     \"build:prod\": \"yarn run lint && webpack --config webpack.prod.js\",\n     \"start\": \"webpack-dev-server --hot --color --progress --info=true --config webpack.dev.js\",\n-    \"start-auth\": \"webpack-dev-server --hot --color --progress --info=true --config webpack.dev.js --define process.env.KOGITO_AUTH_ENABLED=true\",\n+    \"start-auth\": \"webpack-dev-server --hot --color --progress --info=true --config webpack.dev.js --define process.env.KOGITO_AUTH_ENABLED=true --define process.env.KOGITO_REACT_AUTH_ENABLED=true\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcwNjIyNg=="}, "originalCommit": {"oid": "cdbacf9515b77c021687910e741a66c1740937c9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcyNDM0OA==", "bodyText": "I was not aware of this functionality... Is this new property transparent of the overal usage of the KOGITO_AUTH_ENABLED? I mean if I enable the KOGITO_AUTH_ENABLED property, the security will be enabled without taking care of more properties?", "url": "https://github.com/kiegroup/kogito-apps/pull/468#discussion_r495724348", "createdAt": "2020-09-28T06:55:13Z", "author": {"login": "Sgitario"}, "path": "ui-packages/packages/management-console/package.json", "diffHunk": "@@ -12,7 +12,7 @@\n     \"precommit\": \"lint-staged\",\n     \"build:prod\": \"yarn run lint && webpack --config webpack.prod.js\",\n     \"start\": \"webpack-dev-server --hot --color --progress --info=true --config webpack.dev.js\",\n-    \"start-auth\": \"webpack-dev-server --hot --color --progress --info=true --config webpack.dev.js --define process.env.KOGITO_AUTH_ENABLED=true\",\n+    \"start-auth\": \"webpack-dev-server --hot --color --progress --info=true --config webpack.dev.js --define process.env.KOGITO_AUTH_ENABLED=true --define process.env.KOGITO_REACT_AUTH_ENABLED=true\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcwNjIyNg=="}, "originalCommit": {"oid": "cdbacf9515b77c021687910e741a66c1740937c9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgyMzU4MA==", "bodyText": "yes,  when security is enabled.. the property KOGITO_AUTH_ENABLED have to be true in both cases, and if its false is disabled. the only thing is, if the console want to be ran outside the quarkus app with security enabled, an extra property have to be set then :  KOGITO_REACT_AUTH_ENABLED.", "url": "https://github.com/kiegroup/kogito-apps/pull/468#discussion_r495823580", "createdAt": "2020-09-28T09:57:04Z", "author": {"login": "nmirasch"}, "path": "ui-packages/packages/management-console/package.json", "diffHunk": "@@ -12,7 +12,7 @@\n     \"precommit\": \"lint-staged\",\n     \"build:prod\": \"yarn run lint && webpack --config webpack.prod.js\",\n     \"start\": \"webpack-dev-server --hot --color --progress --info=true --config webpack.dev.js\",\n-    \"start-auth\": \"webpack-dev-server --hot --color --progress --info=true --config webpack.dev.js --define process.env.KOGITO_AUTH_ENABLED=true\",\n+    \"start-auth\": \"webpack-dev-server --hot --color --progress --info=true --config webpack.dev.js --define process.env.KOGITO_AUTH_ENABLED=true --define process.env.KOGITO_REACT_AUTH_ENABLED=true\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcwNjIyNg=="}, "originalCommit": {"oid": "cdbacf9515b77c021687910e741a66c1740937c9"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTgzNDgyMg==", "bodyText": "Ok, thanks for the explanation.", "url": "https://github.com/kiegroup/kogito-apps/pull/468#discussion_r495834822", "createdAt": "2020-09-28T10:17:50Z", "author": {"login": "Sgitario"}, "path": "ui-packages/packages/management-console/package.json", "diffHunk": "@@ -12,7 +12,7 @@\n     \"precommit\": \"lint-staged\",\n     \"build:prod\": \"yarn run lint && webpack --config webpack.prod.js\",\n     \"start\": \"webpack-dev-server --hot --color --progress --info=true --config webpack.dev.js\",\n-    \"start-auth\": \"webpack-dev-server --hot --color --progress --info=true --config webpack.dev.js --define process.env.KOGITO_AUTH_ENABLED=true\",\n+    \"start-auth\": \"webpack-dev-server --hot --color --progress --info=true --config webpack.dev.js --define process.env.KOGITO_AUTH_ENABLED=true --define process.env.KOGITO_REACT_AUTH_ENABLED=true\",", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTcwNjIyNg=="}, "originalCommit": {"oid": "cdbacf9515b77c021687910e741a66c1740937c9"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzA1MTIwOnYy", "diffSide": "RIGHT", "path": "security-commons/.gitignore", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMTowNToxNFrOHZUwaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMTowNToxNFrOHZUwaA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxNjUyMA==", "bodyText": "this file can probably removed, there is one at the root level already", "url": "https://github.com/kiegroup/kogito-apps/pull/468#discussion_r496316520", "createdAt": "2020-09-29T01:05:14Z", "author": {"login": "cristianonicolai"}, "path": "security-commons/.gitignore", "diffHunk": "@@ -0,0 +1,14 @@\n+/target", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0d78bca4b2b3c7e687091239efacf8275d006cf"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzA1MjE3OnYy", "diffSide": "RIGHT", "path": "security-commons/src/main/java/org/kie/kogito/security/UserResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMTowNTo0OFrOHZUxAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMTowNTo0OFrOHZUxAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxNjY3NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    private Set<String> roles= Collections.emptySet();\n          \n          \n            \n                    private Set<String> roles = Collections.emptySet();", "url": "https://github.com/kiegroup/kogito-apps/pull/468#discussion_r496316674", "createdAt": "2020-09-29T01:05:48Z", "author": {"login": "cristianonicolai"}, "path": "security-commons/src/main/java/org/kie/kogito/security/UserResource.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.security;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import io.quarkus.security.Authenticated;\n+import io.quarkus.security.credential.TokenCredential;\n+import io.quarkus.security.identity.SecurityIdentity;\n+import org.jboss.resteasy.annotations.cache.NoCache;\n+\n+@Path(UserResource.USER_PATH)\n+@Authenticated\n+public class UserResource {\n+\n+    public static final String USER_PATH = \"/api/user\";\n+\n+    @Inject\n+    SecurityIdentity identity;\n+\n+    @GET\n+    @Path(\"/me\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @NoCache\n+    public User me() {\n+        return new User(identity);\n+    }\n+\n+    protected void setSecurityIdentity(SecurityIdentity securityIdentity) {\n+        this.identity = securityIdentity;\n+    }\n+\n+    public static class User {\n+\n+        private String userName = \"Anonymous\";\n+        private Set<String> roles= Collections.emptySet();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0d78bca4b2b3c7e687091239efacf8275d006cf"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzA1MjcwOnYy", "diffSide": "RIGHT", "path": "security-commons/src/main/java/org/kie/kogito/security/UserResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMTowNjoxMVrOHZUxTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMTowNjoxMVrOHZUxTA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxNjc0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                identity.getPrincipal()!=null &&\n          \n          \n            \n                                identity.getPrincipal() != null &&", "url": "https://github.com/kiegroup/kogito-apps/pull/468#discussion_r496316748", "createdAt": "2020-09-29T01:06:11Z", "author": {"login": "cristianonicolai"}, "path": "security-commons/src/main/java/org/kie/kogito/security/UserResource.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.security;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import io.quarkus.security.Authenticated;\n+import io.quarkus.security.credential.TokenCredential;\n+import io.quarkus.security.identity.SecurityIdentity;\n+import org.jboss.resteasy.annotations.cache.NoCache;\n+\n+@Path(UserResource.USER_PATH)\n+@Authenticated\n+public class UserResource {\n+\n+    public static final String USER_PATH = \"/api/user\";\n+\n+    @Inject\n+    SecurityIdentity identity;\n+\n+    @GET\n+    @Path(\"/me\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @NoCache\n+    public User me() {\n+        return new User(identity);\n+    }\n+\n+    protected void setSecurityIdentity(SecurityIdentity securityIdentity) {\n+        this.identity = securityIdentity;\n+    }\n+\n+    public static class User {\n+\n+        private String userName = \"Anonymous\";\n+        private Set<String> roles= Collections.emptySet();\n+        private String token = \"\";\n+\n+        User(SecurityIdentity identity) {\n+            if(identity != null &&\n+                    identity.getPrincipal()!=null &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0d78bca4b2b3c7e687091239efacf8275d006cf"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEwNzA1MzAzOnYy", "diffSide": "RIGHT", "path": "security-commons/src/main/java/org/kie/kogito/security/UserResource.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMTowNjoyMVrOHZUxgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yOVQwMTowNjoyMVrOHZUxgQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NjMxNjgwMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                identity.getCredential(TokenCredential.class)!=null) {\n          \n          \n            \n                                identity.getCredential(TokenCredential.class) != null) {", "url": "https://github.com/kiegroup/kogito-apps/pull/468#discussion_r496316801", "createdAt": "2020-09-29T01:06:21Z", "author": {"login": "cristianonicolai"}, "path": "security-commons/src/main/java/org/kie/kogito/security/UserResource.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.security;\n+\n+import java.util.Collections;\n+import java.util.Set;\n+\n+import javax.inject.Inject;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+\n+import io.quarkus.security.Authenticated;\n+import io.quarkus.security.credential.TokenCredential;\n+import io.quarkus.security.identity.SecurityIdentity;\n+import org.jboss.resteasy.annotations.cache.NoCache;\n+\n+@Path(UserResource.USER_PATH)\n+@Authenticated\n+public class UserResource {\n+\n+    public static final String USER_PATH = \"/api/user\";\n+\n+    @Inject\n+    SecurityIdentity identity;\n+\n+    @GET\n+    @Path(\"/me\")\n+    @Produces(MediaType.APPLICATION_JSON)\n+    @NoCache\n+    public User me() {\n+        return new User(identity);\n+    }\n+\n+    protected void setSecurityIdentity(SecurityIdentity securityIdentity) {\n+        this.identity = securityIdentity;\n+    }\n+\n+    public static class User {\n+\n+        private String userName = \"Anonymous\";\n+        private Set<String> roles= Collections.emptySet();\n+        private String token = \"\";\n+\n+        User(SecurityIdentity identity) {\n+            if(identity != null &&\n+                    identity.getPrincipal()!=null &&\n+                    identity.getCredential(TokenCredential.class)!=null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f0d78bca4b2b3c7e687091239efacf8275d006cf"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 734, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}