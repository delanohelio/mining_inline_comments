{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1MTY3NjI3", "number": 315, "reviewThreads": {"totalCount": 51, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDoxNDoyMVrOENZy3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNTozOTo0MlrOERgaSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDg5NTY3OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerManageColumns/DomainExplorerManageColumns.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDoxNDoyMVrOGwEawQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNjoyMzoyN1rOGwc20A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1NzIxNw==", "bodyText": "On line 595 down below, the className=\"pf-u-m-md\" should be removed because it is causing too much space between the filter toolbar and chips.", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r453057217", "createdAt": "2020-07-10T20:14:21Z", "author": {"login": "srambach"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerManageColumns/DomainExplorerManageColumns.tsx", "diffHunk": "@@ -391,7 +395,8 @@ const DomainExplorerManageColumns: React.FC<IOwnProps> = ({\n           pagination: {\n             value: { offset: offsetVal, limit: pageSize },\n             type: 'Pagination'\n-          }\n+          },\n+          where: { value: finalFilters, type: argument }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc732b48a34034ef0e13edf49fc9049e2fe8692"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ1NzYxNg==", "bodyText": "@srambach done, thanks", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r453457616", "createdAt": "2020-07-13T06:23:27Z", "author": {"login": "Sara4994"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerManageColumns/DomainExplorerManageColumns.tsx", "diffHunk": "@@ -391,7 +395,8 @@ const DomainExplorerManageColumns: React.FC<IOwnProps> = ({\n           pagination: {\n             value: { offset: offsetVal, limit: pageSize },\n             type: 'Pagination'\n-          }\n+          },\n+          where: { value: finalFilters, type: argument }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1NzIxNw=="}, "originalCommit": {"oid": "edc732b48a34034ef0e13edf49fc9049e2fe8692"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgyNDg5OTE4OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.css", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xMFQyMDoxNTozNVrOGwEc0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwNjoyMzo0MlrOGwc3GQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1Nzc0Nw==", "bodyText": "Please be sure to put a ; at the end of each CSS line.", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r453057747", "createdAt": "2020-07-10T20:15:35Z", "author": {"login": "srambach"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.css", "diffHunk": "@@ -0,0 +1,3 @@\n+.kogito-common--filter-options__inputs {\n+    margin-right: var(--pf-global--spacer--md)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edc732b48a34034ef0e13edf49fc9049e2fe8692"}, "originalPosition": 2}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzQ1NzY4OQ==", "bodyText": "@srambach added \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r453457689", "createdAt": "2020-07-13T06:23:42Z", "author": {"login": "Sara4994"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.css", "diffHunk": "@@ -0,0 +1,3 @@\n+.kogito-common--filter-options__inputs {\n+    margin-right: var(--pf-global--spacer--md)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzA1Nzc0Nw=="}, "originalCommit": {"oid": "edc732b48a34034ef0e13edf49fc9049e2fe8692"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTUyMDQ0OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNjo1NjoxOFrOGycmbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNjo1NjoxOFrOGycmbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU1MDU3Mw==", "bodyText": "can we sort the params alphabetically?", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r455550573", "createdAt": "2020-07-16T06:56:18Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "diffHunk": "@@ -0,0 +1,772 @@\n+import React, { useState, useEffect } from 'react';\n+import {\n+  Select,\n+  SelectVariant,\n+  SelectGroup,\n+  SelectOption,\n+  TextInput,\n+  Button,\n+  Dropdown,\n+  DropdownToggle,\n+  DropdownItem,\n+  InputGroup,\n+  Popover,\n+  PopoverPosition\n+} from '@patternfly/react-core';\n+import { GraphQL } from '../../../graphql/types';\n+\n+import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n+import gql from 'graphql-tag';\n+import { query } from 'gql-query-builder';\n+import { useApolloClient } from 'react-apollo';\n+import { QuestionCircleIcon } from '@patternfly/react-icons';\n+import { validateResponse, set, removeDuplicates } from '../../../utils/Utils';\n+import './DomainExplorerFilterOptions.css';\n+\n+const DomainExplorerFilterOptions = ({\n+  currentDomain,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c405dbf47438104920b24c69c71caf2940027aa7"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTUyMjU2OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNjo1Njo1MVrOGycnlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNjo1Njo1MVrOGycnlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU1MDg3MQ==", "bodyText": "again, can we sort?", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r455550871", "createdAt": "2020-07-16T06:56:51Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "diffHunk": "@@ -0,0 +1,772 @@\n+import React, { useState, useEffect } from 'react';\n+import {\n+  Select,\n+  SelectVariant,\n+  SelectGroup,\n+  SelectOption,\n+  TextInput,\n+  Button,\n+  Dropdown,\n+  DropdownToggle,\n+  DropdownItem,\n+  InputGroup,\n+  Popover,\n+  PopoverPosition\n+} from '@patternfly/react-core';\n+import { GraphQL } from '../../../graphql/types';\n+\n+import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n+import gql from 'graphql-tag';\n+import { query } from 'gql-query-builder';\n+import { useApolloClient } from 'react-apollo';\n+import { QuestionCircleIcon } from '@patternfly/react-icons';\n+import { validateResponse, set, removeDuplicates } from '../../../utils/Utils';\n+import './DomainExplorerFilterOptions.css';\n+\n+const DomainExplorerFilterOptions = ({\n+  currentDomain,\n+  parameters,\n+  setColumnFilters,\n+  setTableLoading,\n+  setDisplayTable,\n+  setDisplayEmptyState,\n+  setFilterError,\n+  getQueryTypes,\n+  filterChips,\n+  setFilterChips,\n+  runFilter,\n+  setRunFilter,\n+  finalFilters,\n+  setFinalFilters,\n+  getSchema,\n+  argument,\n+  reset,\n+  setReset\n+}) => {\n+  // tslint:disable: forin\n+  // tslint:disable: no-floating-promises\n+  const client = useApolloClient();\n+  const [initData2, setInitData2] = useState<any>({\n+    __schema: { queryType: [] }\n+  });\n+  const [isExpanded, setIsExpanded] = useState(false);\n+  const [isFilterDropdownOpen, setIsFilterDropdownOpen] = useState(false);\n+  const [selected, setSelected] = useState('id');\n+  const [selectTypes, setSelectTypes] = useState('equal');\n+  const [textValue, setTextValue] = useState('');\n+  const [inputArray, setInputArray] = useState('');\n+  const [isOpen, setIsOpen] = useState(false);\n+  const [currentArgument, setCurrentArgument] = useState('');\n+  const [currentArgumentScalar, setCurrentArgumentScalar] = useState('String');\n+  const [typeParent, setTypeParent] = useState<any>([]);\n+  const [currentBoolean, setCurrentBoolean] = useState('boolean');\n+  const [stateToggle, setStateToggle] = useState(false);\n+  const [multiStateToggle, setMultiStateToggle] = useState(false);\n+  const [selectedState, setSelectedState] = useState('');\n+  const [multiState, setMultiState] = useState([]);\n+\n+  const nullTypes = [\n+    null,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c405dbf47438104920b24c69c71caf2940027aa7"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTY0ODM5OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerTable/DomainExplorerTable.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNzozNToxOFrOGydzkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDoyNTo1MVrOGykz3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU3MDMyMg==", "bodyText": "filters has -> fitlers have (or filter has)", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r455570322", "createdAt": "2020-07-16T07:35:18Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -323,48 +337,58 @@ const DomainExplorerTable = ({\n           <TableBody rowKey=\"rowKey\" />\n         </Table>\n       )}\n-      {!displayEmptyState && !displayTable && (\n-        <Card component={'div'}>\n-          <CardBody>\n-            <Bullseye>\n-              <EmptyState>\n-                <EmptyStateIcon icon={SearchIcon} />\n-                <Title headingLevel=\"h5\" size=\"lg\">\n-                  No columns selected\n-                </Title>\n-                <EmptyStateBody>\n-                  <Button\n-                    variant=\"link\"\n-                    id=\"retry-columns-button\"\n-                    onClick={handleRetry}\n-                    isInline\n-                  >\n-                    Manage columns\n-                  </Button>{' '}\n-                  to see content\n-                </EmptyStateBody>\n-              </EmptyState>\n-            </Bullseye>\n-          </CardBody>\n-        </Card>\n-      )}\n-      {displayEmptyState && (\n-        <Card component={'div'}>\n-          <CardBody>\n+      <Card component={'div'}>\n+        <CardBody>\n+          {!displayEmptyState &&\n+            !displayTable &&\n+            !filterError &&\n+            filterChips.length > 0 && (\n+              <Bullseye>\n+                <EmptyState>\n+                  <EmptyStateIcon icon={SearchIcon} />\n+                  <Title headingLevel=\"h5\" size=\"lg\">\n+                    No columns selected\n+                  </Title>\n+                  <EmptyStateBody>\n+                    <Button\n+                      variant=\"link\"\n+                      id=\"retry-columns-button\"\n+                      onClick={handleRetry}\n+                      isInline\n+                    >\n+                      Manage columns\n+                    </Button>{' '}\n+                    to see content\n+                  </EmptyStateBody>\n+                </EmptyState>\n+              </Bullseye>\n+            )}\n+          {displayEmptyState && (\n             <Bullseye>\n               <EmptyState>\n                 <EmptyStateIcon icon={SearchIcon} />\n                 <Title headingLevel=\"h5\" size=\"lg\">\n                   No data available\n                 </Title>\n                 <EmptyStateBody>\n-                  Selected domain has no data to display. Check other domains.\n+                  Selected filters has no data to display. Try other filters.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "292508b1af5f894f27bfe48012fa098cb7d8c67b"}, "originalPosition": 106}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY4NTA4Ng==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r455685086", "createdAt": "2020-07-16T10:25:51Z", "author": {"login": "Sara4994"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -323,48 +337,58 @@ const DomainExplorerTable = ({\n           <TableBody rowKey=\"rowKey\" />\n         </Table>\n       )}\n-      {!displayEmptyState && !displayTable && (\n-        <Card component={'div'}>\n-          <CardBody>\n-            <Bullseye>\n-              <EmptyState>\n-                <EmptyStateIcon icon={SearchIcon} />\n-                <Title headingLevel=\"h5\" size=\"lg\">\n-                  No columns selected\n-                </Title>\n-                <EmptyStateBody>\n-                  <Button\n-                    variant=\"link\"\n-                    id=\"retry-columns-button\"\n-                    onClick={handleRetry}\n-                    isInline\n-                  >\n-                    Manage columns\n-                  </Button>{' '}\n-                  to see content\n-                </EmptyStateBody>\n-              </EmptyState>\n-            </Bullseye>\n-          </CardBody>\n-        </Card>\n-      )}\n-      {displayEmptyState && (\n-        <Card component={'div'}>\n-          <CardBody>\n+      <Card component={'div'}>\n+        <CardBody>\n+          {!displayEmptyState &&\n+            !displayTable &&\n+            !filterError &&\n+            filterChips.length > 0 && (\n+              <Bullseye>\n+                <EmptyState>\n+                  <EmptyStateIcon icon={SearchIcon} />\n+                  <Title headingLevel=\"h5\" size=\"lg\">\n+                    No columns selected\n+                  </Title>\n+                  <EmptyStateBody>\n+                    <Button\n+                      variant=\"link\"\n+                      id=\"retry-columns-button\"\n+                      onClick={handleRetry}\n+                      isInline\n+                    >\n+                      Manage columns\n+                    </Button>{' '}\n+                    to see content\n+                  </EmptyStateBody>\n+                </EmptyState>\n+              </Bullseye>\n+            )}\n+          {displayEmptyState && (\n             <Bullseye>\n               <EmptyState>\n                 <EmptyStateIcon icon={SearchIcon} />\n                 <Title headingLevel=\"h5\" size=\"lg\">\n                   No data available\n                 </Title>\n                 <EmptyStateBody>\n-                  Selected domain has no data to display. Check other domains.\n+                  Selected filters has no data to display. Try other filters.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU3MDMyMg=="}, "originalCommit": {"oid": "292508b1af5f894f27bfe48012fa098cb7d8c67b"}, "originalPosition": 106}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTY1MTYzOnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerTable/DomainExplorerTable.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNzozNjoxMVrOGyd1eA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNzozNjoxMVrOGyd1eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU3MDgwOA==", "bodyText": "do we want to end title and body with period since we start with capital letter?", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r455570808", "createdAt": "2020-07-16T07:36:11Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerTable/DomainExplorerTable.tsx", "diffHunk": "@@ -323,48 +337,58 @@ const DomainExplorerTable = ({\n           <TableBody rowKey=\"rowKey\" />\n         </Table>\n       )}\n-      {!displayEmptyState && !displayTable && (\n-        <Card component={'div'}>\n-          <CardBody>\n-            <Bullseye>\n-              <EmptyState>\n-                <EmptyStateIcon icon={SearchIcon} />\n-                <Title headingLevel=\"h5\" size=\"lg\">\n-                  No columns selected\n-                </Title>\n-                <EmptyStateBody>\n-                  <Button\n-                    variant=\"link\"\n-                    id=\"retry-columns-button\"\n-                    onClick={handleRetry}\n-                    isInline\n-                  >\n-                    Manage columns\n-                  </Button>{' '}\n-                  to see content\n-                </EmptyStateBody>\n-              </EmptyState>\n-            </Bullseye>\n-          </CardBody>\n-        </Card>\n-      )}\n-      {displayEmptyState && (\n-        <Card component={'div'}>\n-          <CardBody>\n+      <Card component={'div'}>\n+        <CardBody>\n+          {!displayEmptyState &&\n+            !displayTable &&\n+            !filterError &&\n+            filterChips.length > 0 && (\n+              <Bullseye>\n+                <EmptyState>\n+                  <EmptyStateIcon icon={SearchIcon} />\n+                  <Title headingLevel=\"h5\" size=\"lg\">\n+                    No columns selected\n+                  </Title>\n+                  <EmptyStateBody>\n+                    <Button\n+                      variant=\"link\"\n+                      id=\"retry-columns-button\"\n+                      onClick={handleRetry}\n+                      isInline\n+                    >\n+                      Manage columns\n+                    </Button>{' '}\n+                    to see content\n+                  </EmptyStateBody>\n+                </EmptyState>\n+              </Bullseye>\n+            )}\n+          {displayEmptyState && (\n             <Bullseye>\n               <EmptyState>\n                 <EmptyStateIcon icon={SearchIcon} />\n                 <Title headingLevel=\"h5\" size=\"lg\">\n                   No data available\n                 </Title>\n                 <EmptyStateBody>\n-                  Selected domain has no data to display. Check other domains.\n+                  Selected filters has no data to display. Try other filters.\n                 </EmptyStateBody>\n               </EmptyState>\n             </Bullseye>\n-          </CardBody>\n-        </Card>\n-      )}\n+          )}\n+          {!displayEmptyState && !displayTable && filterError && (\n+            <ServerErrors error={filterError} variant=\"small\" />\n+          )}\n+          {filterChips.length === 0 && (\n+            <KogitoEmptyState\n+              type={KogitoEmptyStateType.Reset}\n+              title=\"No filter applied\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "292508b1af5f894f27bfe48012fa098cb7d8c67b"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTY2NDc5OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerTable/tests/DomainExplorerTable.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNzo0MDowOFrOGyd9YA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMzoxMDo1OVrOGyqNxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU3MjgzMg==", "bodyText": "You can do here similarly to the test above:\n\ndefining some common base props once (lets say containing filterError: '')\nwhere needed important things can be overrided/added by <DomainExplorerTable {...{...props, filterError:'some-error'}} />\n\nwdyt?", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r455572832", "createdAt": "2020-07-16T07:40:08Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerTable/tests/DomainExplorerTable.test.tsx", "diffHunk": "@@ -579,4 +606,225 @@ describe('Domain Explorer Table Component', () => {\n     wrapper.update();\n     expect(wrapper).toMatchSnapshot();\n   });\n+  it('check filter errors', async () => {\n+    const props = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "292508b1af5f894f27bfe48012fa098cb7d8c67b"}, "originalPosition": 108}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc3MzYzNw==", "bodyText": "modified \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r455773637", "createdAt": "2020-07-16T13:10:59Z", "author": {"login": "Sara4994"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerTable/tests/DomainExplorerTable.test.tsx", "diffHunk": "@@ -579,4 +606,225 @@ describe('Domain Explorer Table Component', () => {\n     wrapper.update();\n     expect(wrapper).toMatchSnapshot();\n   });\n+  it('check filter errors', async () => {\n+    const props = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU3MjgzMg=="}, "originalCommit": {"oid": "292508b1af5f894f27bfe48012fa098cb7d8c67b"}, "originalPosition": 108}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTY2ODUyOnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerTable/tests/DomainExplorerTable.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNzo0MTowNlrOGyd_pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMzoxNjo0NlrOGyqb-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU3MzQxMg==", "bodyText": "there's no check of the result", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r455573412", "createdAt": "2020-07-16T07:41:06Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerTable/tests/DomainExplorerTable.test.tsx", "diffHunk": "@@ -579,4 +606,225 @@ describe('Domain Explorer Table Component', () => {\n     wrapper.update();\n     expect(wrapper).toMatchSnapshot();\n   });\n+  it('check filter errors', async () => {\n+    const props = {\n+      columnFilters: [\n+        {\n+          flight: {\n+            arrival: 'Hello World',\n+            __typename: 'Flight',\n+            departure: 'Hello World',\n+            flightNumber: 'Hello World',\n+            gate: 'Hello World',\n+            seat: 'Hello World'\n+          },\n+          metadata: {\n+            processInstances: [\n+              {\n+                businessKey: 'Hello World',\n+                id: 'Hello World',\n+                lastUpdate: 'Tue, 12 May 2020 12:33:58 GMT',\n+                processName: 'Hello World',\n+                start: 'Tue, 12 May 2020 12:33:58 GMT',\n+                state: 'ERROR'\n+              },\n+              {\n+                businessKey: 'Hello World',\n+                id: 'Hello World',\n+                lastUpdate: 'Tue, 12 May 2020 12:33:58 GMT',\n+                processName: 'Hello World',\n+                start: 'Tue, 12 May 2020 12:33:58 GMT',\n+                state: 'ABORTED'\n+              }\n+            ]\n+          }\n+        },\n+        {\n+          flight: {\n+            arrival: null,\n+            __typename: 'Flight',\n+            departure: 'Hello World',\n+            flightNumber: 'Hello World',\n+            gate: 'Hello World',\n+            seat: 'Hello World'\n+          },\n+          metadata: {\n+            processInstances: [\n+              {\n+                businessKey: null,\n+                id: 'Hello World',\n+                lastUpdate: 'Tue, 12 May 2020 12:33:58 GMT',\n+                processName: 'Hello World',\n+                start: 'Tue, 12 May 2020 12:33:58 GMT',\n+                state: 'ERROR'\n+              },\n+              {\n+                businessKey: 'Hello World',\n+                id: 'Hello World',\n+                lastUpdate: 'Tue, 12 May 2020 12:33:58 GMT',\n+                processName: 'Hello World',\n+                start: 'Tue, 12 May 2020 12:33:58 GMT',\n+                state: 'ERROR'\n+              }\n+            ]\n+          }\n+        }\n+      ],\n+      tableLoading: false,\n+      displayTable: false,\n+      displayEmptyState: false,\n+      parameters: [],\n+      selected: [],\n+      isLoadingMore: false,\n+      rows: [\n+        {\n+          cells: [\n+            'Hello World',\n+            'Hello World',\n+            'Hello World',\n+            'Hello World',\n+            'Hello World'\n+          ],\n+          isOpen: false,\n+          rowKey: '0.008857835601127073'\n+        },\n+        {\n+          parent: 0,\n+          rowKey: '0.6632979792309541',\n+          cells: [\n+            {\n+              title: ''\n+            }\n+          ]\n+        }\n+      ],\n+      setRows: jest.fn(),\n+      offset: 0,\n+      handleRetry: jest.fn(),\n+      filterError: 'some error',\n+      finalFilters: {},\n+      filterChips: [],\n+      onDeleteChip: jest.fn()\n+    };\n+    const wrapper = await getWrapperAsync(\n+      <BrowserRouter>\n+        <DomainExplorerTable {...props} />\n+      </BrowserRouter>,\n+      'DomainExplorerTable'\n+    );\n+    wrapper.update();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "292508b1af5f894f27bfe48012fa098cb7d8c67b"}, "originalPosition": 213}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc3NzI3NQ==", "bodyText": "added check", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r455777275", "createdAt": "2020-07-16T13:16:46Z", "author": {"login": "Sara4994"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerTable/tests/DomainExplorerTable.test.tsx", "diffHunk": "@@ -579,4 +606,225 @@ describe('Domain Explorer Table Component', () => {\n     wrapper.update();\n     expect(wrapper).toMatchSnapshot();\n   });\n+  it('check filter errors', async () => {\n+    const props = {\n+      columnFilters: [\n+        {\n+          flight: {\n+            arrival: 'Hello World',\n+            __typename: 'Flight',\n+            departure: 'Hello World',\n+            flightNumber: 'Hello World',\n+            gate: 'Hello World',\n+            seat: 'Hello World'\n+          },\n+          metadata: {\n+            processInstances: [\n+              {\n+                businessKey: 'Hello World',\n+                id: 'Hello World',\n+                lastUpdate: 'Tue, 12 May 2020 12:33:58 GMT',\n+                processName: 'Hello World',\n+                start: 'Tue, 12 May 2020 12:33:58 GMT',\n+                state: 'ERROR'\n+              },\n+              {\n+                businessKey: 'Hello World',\n+                id: 'Hello World',\n+                lastUpdate: 'Tue, 12 May 2020 12:33:58 GMT',\n+                processName: 'Hello World',\n+                start: 'Tue, 12 May 2020 12:33:58 GMT',\n+                state: 'ABORTED'\n+              }\n+            ]\n+          }\n+        },\n+        {\n+          flight: {\n+            arrival: null,\n+            __typename: 'Flight',\n+            departure: 'Hello World',\n+            flightNumber: 'Hello World',\n+            gate: 'Hello World',\n+            seat: 'Hello World'\n+          },\n+          metadata: {\n+            processInstances: [\n+              {\n+                businessKey: null,\n+                id: 'Hello World',\n+                lastUpdate: 'Tue, 12 May 2020 12:33:58 GMT',\n+                processName: 'Hello World',\n+                start: 'Tue, 12 May 2020 12:33:58 GMT',\n+                state: 'ERROR'\n+              },\n+              {\n+                businessKey: 'Hello World',\n+                id: 'Hello World',\n+                lastUpdate: 'Tue, 12 May 2020 12:33:58 GMT',\n+                processName: 'Hello World',\n+                start: 'Tue, 12 May 2020 12:33:58 GMT',\n+                state: 'ERROR'\n+              }\n+            ]\n+          }\n+        }\n+      ],\n+      tableLoading: false,\n+      displayTable: false,\n+      displayEmptyState: false,\n+      parameters: [],\n+      selected: [],\n+      isLoadingMore: false,\n+      rows: [\n+        {\n+          cells: [\n+            'Hello World',\n+            'Hello World',\n+            'Hello World',\n+            'Hello World',\n+            'Hello World'\n+          ],\n+          isOpen: false,\n+          rowKey: '0.008857835601127073'\n+        },\n+        {\n+          parent: 0,\n+          rowKey: '0.6632979792309541',\n+          cells: [\n+            {\n+              title: ''\n+            }\n+          ]\n+        }\n+      ],\n+      setRows: jest.fn(),\n+      offset: 0,\n+      handleRetry: jest.fn(),\n+      filterError: 'some error',\n+      finalFilters: {},\n+      filterChips: [],\n+      onDeleteChip: jest.fn()\n+    };\n+    const wrapper = await getWrapperAsync(\n+      <BrowserRouter>\n+        <DomainExplorerTable {...props} />\n+      </BrowserRouter>,\n+      'DomainExplorerTable'\n+    );\n+    wrapper.update();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU3MzQxMg=="}, "originalCommit": {"oid": "292508b1af5f894f27bfe48012fa098cb7d8c67b"}, "originalPosition": 213}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTY3MDA4OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerTable/tests/DomainExplorerTable.test.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNzo0MTozNFrOGyeAjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNzo0MTozNFrOGyeAjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU3MzY0Ng==", "bodyText": "we should probably check what happens after", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r455573646", "createdAt": "2020-07-16T07:41:34Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerTable/tests/DomainExplorerTable.test.tsx", "diffHunk": "@@ -579,4 +606,225 @@ describe('Domain Explorer Table Component', () => {\n     wrapper.update();\n     expect(wrapper).toMatchSnapshot();\n   });\n+  it('check filter errors', async () => {\n+    const props = {\n+      columnFilters: [\n+        {\n+          flight: {\n+            arrival: 'Hello World',\n+            __typename: 'Flight',\n+            departure: 'Hello World',\n+            flightNumber: 'Hello World',\n+            gate: 'Hello World',\n+            seat: 'Hello World'\n+          },\n+          metadata: {\n+            processInstances: [\n+              {\n+                businessKey: 'Hello World',\n+                id: 'Hello World',\n+                lastUpdate: 'Tue, 12 May 2020 12:33:58 GMT',\n+                processName: 'Hello World',\n+                start: 'Tue, 12 May 2020 12:33:58 GMT',\n+                state: 'ERROR'\n+              },\n+              {\n+                businessKey: 'Hello World',\n+                id: 'Hello World',\n+                lastUpdate: 'Tue, 12 May 2020 12:33:58 GMT',\n+                processName: 'Hello World',\n+                start: 'Tue, 12 May 2020 12:33:58 GMT',\n+                state: 'ABORTED'\n+              }\n+            ]\n+          }\n+        },\n+        {\n+          flight: {\n+            arrival: null,\n+            __typename: 'Flight',\n+            departure: 'Hello World',\n+            flightNumber: 'Hello World',\n+            gate: 'Hello World',\n+            seat: 'Hello World'\n+          },\n+          metadata: {\n+            processInstances: [\n+              {\n+                businessKey: null,\n+                id: 'Hello World',\n+                lastUpdate: 'Tue, 12 May 2020 12:33:58 GMT',\n+                processName: 'Hello World',\n+                start: 'Tue, 12 May 2020 12:33:58 GMT',\n+                state: 'ERROR'\n+              },\n+              {\n+                businessKey: 'Hello World',\n+                id: 'Hello World',\n+                lastUpdate: 'Tue, 12 May 2020 12:33:58 GMT',\n+                processName: 'Hello World',\n+                start: 'Tue, 12 May 2020 12:33:58 GMT',\n+                state: 'ERROR'\n+              }\n+            ]\n+          }\n+        }\n+      ],\n+      tableLoading: false,\n+      displayTable: false,\n+      displayEmptyState: false,\n+      parameters: [],\n+      selected: [],\n+      isLoadingMore: false,\n+      rows: [\n+        {\n+          cells: [\n+            'Hello World',\n+            'Hello World',\n+            'Hello World',\n+            'Hello World',\n+            'Hello World'\n+          ],\n+          isOpen: false,\n+          rowKey: '0.008857835601127073'\n+        },\n+        {\n+          parent: 0,\n+          rowKey: '0.6632979792309541',\n+          cells: [\n+            {\n+              title: ''\n+            }\n+          ]\n+        }\n+      ],\n+      setRows: jest.fn(),\n+      offset: 0,\n+      handleRetry: jest.fn(),\n+      filterError: 'some error',\n+      finalFilters: {},\n+      filterChips: [],\n+      onDeleteChip: jest.fn()\n+    };\n+    const wrapper = await getWrapperAsync(\n+      <BrowserRouter>\n+        <DomainExplorerTable {...props} />\n+      </BrowserRouter>,\n+      'DomainExplorerTable'\n+    );\n+    wrapper.update();\n+  });\n+  it('check empty filter chip', async () => {\n+    const props = {\n+      columnFilters: [\n+        {\n+          flight: {\n+            arrival: 'Hello World',\n+            __typename: 'Flight',\n+            departure: 'Hello World',\n+            flightNumber: 'Hello World',\n+            gate: 'Hello World',\n+            seat: 'Hello World'\n+          },\n+          metadata: {\n+            processInstances: [\n+              {\n+                businessKey: 'Hello World',\n+                id: 'Hello World',\n+                lastUpdate: 'Tue, 12 May 2020 12:33:58 GMT',\n+                processName: 'Hello World',\n+                start: 'Tue, 12 May 2020 12:33:58 GMT',\n+                state: 'ERROR'\n+              },\n+              {\n+                businessKey: 'Hello World',\n+                id: 'Hello World',\n+                lastUpdate: 'Tue, 12 May 2020 12:33:58 GMT',\n+                processName: 'Hello World',\n+                start: 'Tue, 12 May 2020 12:33:58 GMT',\n+                state: 'ABORTED'\n+              }\n+            ]\n+          }\n+        },\n+        {\n+          flight: {\n+            arrival: null,\n+            __typename: 'Flight',\n+            departure: 'Hello World',\n+            flightNumber: 'Hello World',\n+            gate: 'Hello World',\n+            seat: 'Hello World'\n+          },\n+          metadata: {\n+            processInstances: [\n+              {\n+                businessKey: null,\n+                id: 'Hello World',\n+                lastUpdate: 'Tue, 12 May 2020 12:33:58 GMT',\n+                processName: 'Hello World',\n+                start: 'Tue, 12 May 2020 12:33:58 GMT',\n+                state: 'ERROR'\n+              },\n+              {\n+                businessKey: 'Hello World',\n+                id: 'Hello World',\n+                lastUpdate: 'Tue, 12 May 2020 12:33:58 GMT',\n+                processName: 'Hello World',\n+                start: 'Tue, 12 May 2020 12:33:58 GMT',\n+                state: 'ERROR'\n+              }\n+            ]\n+          }\n+        }\n+      ],\n+      tableLoading: false,\n+      displayTable: false,\n+      displayEmptyState: false,\n+      parameters: [],\n+      selected: [],\n+      isLoadingMore: false,\n+      rows: [\n+        {\n+          cells: [\n+            'Hello World',\n+            'Hello World',\n+            'Hello World',\n+            'Hello World',\n+            'Hello World'\n+          ],\n+          isOpen: false,\n+          rowKey: '0.008857835601127073'\n+        },\n+        {\n+          parent: 0,\n+          rowKey: '0.6632979792309541',\n+          cells: [\n+            {\n+              title: ''\n+            }\n+          ]\n+        }\n+      ],\n+      setRows: jest.fn(),\n+      offset: 0,\n+      handleRetry: jest.fn(),\n+      filterError: '',\n+      finalFilters: {},\n+      filterChips: [],\n+      onDeleteChip: jest.fn()\n+    };\n+    const wrapper = await getWrapperAsync(\n+      <BrowserRouter>\n+        <DomainExplorerTable {...props} />\n+      </BrowserRouter>,\n+      'DomainExplorerTable'\n+    );\n+    wrapper.update();\n+    const event = {} as any;\n+    wrapper\n+      .find('button')\n+      .props()\n+      ['onClick'](event);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "292508b1af5f894f27bfe48012fa098cb7d8c67b"}, "originalPosition": 326}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTY3MTgxOnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerTable/tests/__snapshots__/DomainExplorerTable.test.tsx.snap", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNzo0MjowMlrOGyeBpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDoyNToyOVrOGykzEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU3MzkyNg==", "bodyText": "please mock the icons", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r455573926", "createdAt": "2020-07-16T07:42:02Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerTable/tests/__snapshots__/DomainExplorerTable.test.tsx.snap", "diffHunk": "@@ -3512,6 +3516,141 @@ exports[`Domain Explorer Table Component Snapshot test with default props 1`] =\n       </Table>\n     </ComponentWithOuia>\n   </Component>\n+  <Card\n+    component=\"div\"\n+  >\n+    <div\n+      className=\"pf-c-card\"\n+    >\n+      <CardBody>\n+        <div\n+          className=\"pf-c-card__body\"\n+        >\n+          <Component\n+            body=\"Try applying at least one filter to see results\"\n+            onClick={[Function]}\n+            title=\"No filter applied\"\n+            type={2}\n+          >\n+            <Bullseye\n+              data-ouia-component-type=\"kogito-empty-state\"\n+              data-ouia-safe={true}\n+            >\n+              <div\n+                className=\"pf-l-bullseye\"\n+                data-ouia-component-type=\"kogito-empty-state\"\n+                data-ouia-safe={true}\n+              >\n+                <EmptyState\n+                  variant=\"full\"\n+                >\n+                  <div\n+                    className=\"pf-c-empty-state\"\n+                  >\n+                    <EmptyStateIcon\n+                      color=\"var(--pf-global--warning-color--100)\"\n+                      icon={[Function]}\n+                      size=\"sm\"\n+                    >\n+                      <ExclamationTriangleIcon", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "292508b1af5f894f27bfe48012fa098cb7d8c67b"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY4NDg4MA==", "bodyText": "@jstastny-cz these Icon cant be mocked, since they are used inside PF component. So mocking this Icon will not make an effect on snapshots", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r455684880", "createdAt": "2020-07-16T10:25:29Z", "author": {"login": "Sara4994"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerTable/tests/__snapshots__/DomainExplorerTable.test.tsx.snap", "diffHunk": "@@ -3512,6 +3516,141 @@ exports[`Domain Explorer Table Component Snapshot test with default props 1`] =\n       </Table>\n     </ComponentWithOuia>\n   </Component>\n+  <Card\n+    component=\"div\"\n+  >\n+    <div\n+      className=\"pf-c-card\"\n+    >\n+      <CardBody>\n+        <div\n+          className=\"pf-c-card__body\"\n+        >\n+          <Component\n+            body=\"Try applying at least one filter to see results\"\n+            onClick={[Function]}\n+            title=\"No filter applied\"\n+            type={2}\n+          >\n+            <Bullseye\n+              data-ouia-component-type=\"kogito-empty-state\"\n+              data-ouia-safe={true}\n+            >\n+              <div\n+                className=\"pf-l-bullseye\"\n+                data-ouia-component-type=\"kogito-empty-state\"\n+                data-ouia-safe={true}\n+              >\n+                <EmptyState\n+                  variant=\"full\"\n+                >\n+                  <div\n+                    className=\"pf-c-empty-state\"\n+                  >\n+                    <EmptyStateIcon\n+                      color=\"var(--pf-global--warning-color--100)\"\n+                      icon={[Function]}\n+                      size=\"sm\"\n+                    >\n+                      <ExclamationTriangleIcon", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU3MzkyNg=="}, "originalCommit": {"oid": "292508b1af5f894f27bfe48012fa098cb7d8c67b"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTY4Njc3OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/ServerErrors/ServerErrors.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNzo0NTo1MVrOGyeKYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNzo0NTo1MVrOGyeKYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU3NjE2Mw==", "bodyText": "to me this element seems duplicated in both cases. extract into a function or component and just wrap inside the pagesection when needed.", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r455576163", "createdAt": "2020-07-16T07:45:51Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/components/Molecules/ServerErrors/ServerErrors.tsx", "diffHunk": "@@ -20,50 +20,91 @@ const ServerErrors = props => {\n   const [displayError, setDisplayError] = useState(false);\n \n   return (\n-    <PageSection variant=\"light\">\n-      <Bullseye>\n-        <EmptyState variant={EmptyStateVariant.full}>\n-          <EmptyStateIcon\n-            icon={ExclamationCircleIcon}\n-            size=\"md\"\n-            color=\"var(--pf-global--danger-color--100)\"\n-          />\n-          <Title headingLevel=\"h1\" size=\"4xl\">\n-            Error fetching data\n-          </Title>\n-          <EmptyStateBody>\n-            An error occurred while accessing data.{' '}\n-            <Button\n-              variant=\"link\"\n-              isInline\n-              id=\"display-error\"\n-              onClick={() => setDisplayError(!displayError)}\n-            >\n-              See more details\n-            </Button>\n-          </EmptyStateBody>\n-          {displayError && (\n+    <>\n+      {props.variant === 'large' && (\n+        <PageSection variant=\"light\">\n+          <Bullseye>\n+            <EmptyState variant={EmptyStateVariant.full}>\n+              <EmptyStateIcon\n+                icon={ExclamationCircleIcon}\n+                size=\"md\"\n+                color=\"var(--pf-global--danger-color--100)\"\n+              />\n+              <Title headingLevel=\"h1\" size=\"4xl\">\n+                Error fetching data\n+              </Title>\n+              <EmptyStateBody>\n+                An error occurred while accessing data.{' '}\n+                <Button\n+                  variant=\"link\"\n+                  isInline\n+                  id=\"display-error\"\n+                  onClick={() => setDisplayError(!displayError)}\n+                >\n+                  See more details\n+                </Button>\n+              </EmptyStateBody>\n+              {displayError && (\n+                <EmptyStateBody>\n+                  <ClipboardCopy\n+                    isCode\n+                    variant={ClipboardCopyVariant.expansion}\n+                    isExpanded={true}\n+                    className=\"pf-u-text-align-left\"\n+                  >\n+                    {JSON.stringify(props.error)}\n+                  </ClipboardCopy>\n+                </EmptyStateBody>\n+              )}\n+              <Button\n+                variant=\"primary\"\n+                id=\"goback-button\"\n+                onClick={() => props.history.goBack()}\n+              >\n+                Go back\n+              </Button>\n+            </EmptyState>\n+          </Bullseye>\n+        </PageSection>\n+      )}\n+      {props.variant === 'small' && (\n+        <Bullseye>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "292508b1af5f894f27bfe48012fa098cb7d8c67b"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTc0OTk1OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/tests/DomainExplorerFilterOptions.test.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNzo1NjoxOVrOGyez3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNzo1NjoxOVrOGyez3Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU4Njc4MQ==", "bodyText": "don't we have this somewhere in our common configuration?\nI can see this in config/Jest-config/test-setup.js isn't that enough?", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r455586781", "createdAt": "2020-07-16T07:56:19Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/tests/DomainExplorerFilterOptions.test.tsx", "diffHunk": "@@ -0,0 +1,1883 @@\n+import React from 'react';\n+import DomainExplorerFilterOptions from '../DomainExplorerFilterOptions';\n+import reactApollo from 'react-apollo';\n+import { GraphQL } from '../../../../graphql/types';\n+import useGetInputFieldsFromQueryQuery = GraphQL.useGetInputFieldsFromQueryQuery;\n+import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n+import Adapter from 'enzyme-adapter-react-16';\n+import { configure, mount } from 'enzyme';\n+import { act } from 'react-dom/test-utils';\n+\n+configure({ adapter: new Adapter() });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "292508b1af5f894f27bfe48012fa098cb7d8c67b"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTc2Mjc0OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/tests/DomainExplorerFilterOptions.test.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNzo1ODozM1rOGye8hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwNzo1ODozM1rOGye8hg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTU4ODk5OA==", "bodyText": "mockuse -> mockUse", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r455588998", "createdAt": "2020-07-16T07:58:33Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/tests/DomainExplorerFilterOptions.test.tsx", "diffHunk": "@@ -0,0 +1,1883 @@\n+import React from 'react';\n+import DomainExplorerFilterOptions from '../DomainExplorerFilterOptions';\n+import reactApollo from 'react-apollo';\n+import { GraphQL } from '../../../../graphql/types';\n+import useGetInputFieldsFromQueryQuery = GraphQL.useGetInputFieldsFromQueryQuery;\n+import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n+import Adapter from 'enzyme-adapter-react-16';\n+import { configure, mount } from 'enzyme';\n+import { act } from 'react-dom/test-utils';\n+\n+configure({ adapter: new Adapter() });\n+jest.mock('apollo-client');\n+jest.mock('react-apollo', () => {\n+  const ApolloClient = { query: jest.fn() };\n+  return { useApolloClient: jest.fn(() => ApolloClient) };\n+});\n+\n+jest.mock('../../../../graphql/types');\n+// tslint:disable: no-string-literal\n+// tslint:disable: no-unexpected-multiline\n+describe('Domain explorer filter options component tests', () => {\n+  const defaultProps = {\n+    currentDomain: 'Travels',\n+    getQuery: {\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'Query',\n+          fields: [\n+            {\n+              name: 'Travels',\n+              args: [\n+                {\n+                  name: 'where',\n+                  type: { kind: 'INPUT_OBJECT', name: 'TravelsArgument' }\n+                },\n+                {\n+                  name: 'orderBy',\n+                  type: { kind: 'INPUT_OBJECT', name: 'TravelsOrderBy' }\n+                },\n+                {\n+                  name: 'pagination',\n+                  type: { kind: 'INPUT_OBJECT', name: 'Pagination' }\n+                }\n+              ],\n+              type: {\n+                ofType: { name: 'Travels' }\n+              }\n+            }\n+          ]\n+        }\n+      }\n+    },\n+    parameters: [\n+      { flight: ['arrival'] },\n+      { flight: ['departure'] },\n+      { flight: ['gate'] },\n+      {\n+        metadata: [\n+          {\n+            processInstances: [\n+              'id',\n+              'processName',\n+              'state',\n+              'start',\n+              'lastUpdate',\n+              'businessKey'\n+            ]\n+          }\n+        ]\n+      }\n+    ],\n+    setColumnFilters: jest.fn(),\n+    setTableLoading: jest.fn(),\n+    setDisplayTable: jest.fn(),\n+    setDisplayEmptyState: jest.fn(),\n+    setFilterError: jest.fn(),\n+    filterChips: ['metadata / processInstances / state: ACTIVE'],\n+    setFilterChips: jest.fn(),\n+    runFilter: true,\n+    setRunFilter: jest.fn(),\n+    finalFilters: {\n+      metadata: {\n+        processInstances: { state: { equal: 'ACTIVE' } }\n+      },\n+      trip: {\n+        country: {\n+          equal: 'Australia'\n+        }\n+      }\n+    },\n+    argument: 'TravelsArgument',\n+    setFinalFilters: jest.fn(),\n+    getSchema: {\n+      data: {\n+        __type: {\n+          name: 'TravelsArgument',\n+          inputFields: [\n+            { name: 'and', type: { name: null, kind: 'LIST' } },\n+            { name: 'or', type: { name: null, kind: 'LIST' } },\n+            {\n+              name: 'flight',\n+              type: {\n+                name: 'FlightArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'arrival',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'departure',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'flightNumber',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'gate',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'seat',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  }\n+                ]\n+              }\n+            }\n+          ]\n+        }\n+      }\n+    },\n+    reset: false,\n+    setReset: jest.fn()\n+  };\n+  afterEach(() => {\n+    jest.clearAllMocks();\n+  });\n+  let client;\n+  let useApolloClient;\n+  let useEffect;\n+\n+  const mockUseEffect = () => {\n+    useEffect.mockImplementationOnce(f => f());\n+  };\n+\n+  const mockuseApolloClient = () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "292508b1af5f894f27bfe48012fa098cb7d8c67b"}, "originalPosition": 158}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTgzMjUzOnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/tests/DomainExplorerFilterOptions.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwODoxMDo0OFrOGyfsEw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMToxMTozMVrOGymQfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYwMTE3MQ==", "bodyText": "not that it would matter too much, just out of curiosity, can't we use getWrapperAsync() above and just check the snapshot after?", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r455601171", "createdAt": "2020-07-16T08:10:48Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/tests/DomainExplorerFilterOptions.test.tsx", "diffHunk": "@@ -0,0 +1,1883 @@\n+import React from 'react';\n+import DomainExplorerFilterOptions from '../DomainExplorerFilterOptions';\n+import reactApollo from 'react-apollo';\n+import { GraphQL } from '../../../../graphql/types';\n+import useGetInputFieldsFromQueryQuery = GraphQL.useGetInputFieldsFromQueryQuery;\n+import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n+import Adapter from 'enzyme-adapter-react-16';\n+import { configure, mount } from 'enzyme';\n+import { act } from 'react-dom/test-utils';\n+\n+configure({ adapter: new Adapter() });\n+jest.mock('apollo-client');\n+jest.mock('react-apollo', () => {\n+  const ApolloClient = { query: jest.fn() };\n+  return { useApolloClient: jest.fn(() => ApolloClient) };\n+});\n+\n+jest.mock('../../../../graphql/types');\n+// tslint:disable: no-string-literal\n+// tslint:disable: no-unexpected-multiline\n+describe('Domain explorer filter options component tests', () => {\n+  const defaultProps = {\n+    currentDomain: 'Travels',\n+    getQuery: {\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'Query',\n+          fields: [\n+            {\n+              name: 'Travels',\n+              args: [\n+                {\n+                  name: 'where',\n+                  type: { kind: 'INPUT_OBJECT', name: 'TravelsArgument' }\n+                },\n+                {\n+                  name: 'orderBy',\n+                  type: { kind: 'INPUT_OBJECT', name: 'TravelsOrderBy' }\n+                },\n+                {\n+                  name: 'pagination',\n+                  type: { kind: 'INPUT_OBJECT', name: 'Pagination' }\n+                }\n+              ],\n+              type: {\n+                ofType: { name: 'Travels' }\n+              }\n+            }\n+          ]\n+        }\n+      }\n+    },\n+    parameters: [\n+      { flight: ['arrival'] },\n+      { flight: ['departure'] },\n+      { flight: ['gate'] },\n+      {\n+        metadata: [\n+          {\n+            processInstances: [\n+              'id',\n+              'processName',\n+              'state',\n+              'start',\n+              'lastUpdate',\n+              'businessKey'\n+            ]\n+          }\n+        ]\n+      }\n+    ],\n+    setColumnFilters: jest.fn(),\n+    setTableLoading: jest.fn(),\n+    setDisplayTable: jest.fn(),\n+    setDisplayEmptyState: jest.fn(),\n+    setFilterError: jest.fn(),\n+    filterChips: ['metadata / processInstances / state: ACTIVE'],\n+    setFilterChips: jest.fn(),\n+    runFilter: true,\n+    setRunFilter: jest.fn(),\n+    finalFilters: {\n+      metadata: {\n+        processInstances: { state: { equal: 'ACTIVE' } }\n+      },\n+      trip: {\n+        country: {\n+          equal: 'Australia'\n+        }\n+      }\n+    },\n+    argument: 'TravelsArgument',\n+    setFinalFilters: jest.fn(),\n+    getSchema: {\n+      data: {\n+        __type: {\n+          name: 'TravelsArgument',\n+          inputFields: [\n+            { name: 'and', type: { name: null, kind: 'LIST' } },\n+            { name: 'or', type: { name: null, kind: 'LIST' } },\n+            {\n+              name: 'flight',\n+              type: {\n+                name: 'FlightArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'arrival',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'departure',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'flightNumber',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'gate',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'seat',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  }\n+                ]\n+              }\n+            }\n+          ]\n+        }\n+      }\n+    },\n+    reset: false,\n+    setReset: jest.fn()\n+  };\n+  afterEach(() => {\n+    jest.clearAllMocks();\n+  });\n+  let client;\n+  let useApolloClient;\n+  let useEffect;\n+\n+  const mockUseEffect = () => {\n+    useEffect.mockImplementationOnce(f => f());\n+  };\n+\n+  const mockuseApolloClient = () => {\n+    // tslint:disable-next-line: react-hooks-nesting\n+    client = useApolloClient();\n+  };\n+\n+  beforeEach(() => {\n+    useApolloClient = jest.spyOn(reactApollo, 'useApolloClient');\n+    mockuseApolloClient();\n+    useEffect = jest.spyOn(React, 'useEffect');\n+    mockUseEffect();\n+    mockUseEffect();\n+  });\n+  it('Snapshot test with default props', async () => {\n+    const props = {\n+      reset: false,\n+      setReset: jest.fn(),\n+      currentDomain: 'Travels',\n+      getQuery: {\n+        loading: false,\n+        data: {\n+          __type: {\n+            name: 'Query',\n+            fields: [\n+              {\n+                name: 'Travels',\n+                args: [\n+                  {\n+                    name: 'where',\n+                    type: { kind: 'INPUT_OBJECT', name: 'TravelsArgument' }\n+                  },\n+                  {\n+                    name: 'orderBy',\n+                    type: { kind: 'INPUT_OBJECT', name: 'TravelsOrderBy' }\n+                  },\n+                  {\n+                    name: 'pagination',\n+                    type: { kind: 'INPUT_OBJECT', name: 'Pagination' }\n+                  }\n+                ],\n+                type: {\n+                  ofType: { name: 'Travels' }\n+                }\n+              }\n+            ]\n+          }\n+        }\n+      },\n+      parameters: [\n+        {\n+          metadata: [\n+            {\n+              processInstances: [\n+                'id',\n+                'processName',\n+                'state',\n+                'start',\n+                'lastUpdate',\n+                'businessKey'\n+              ]\n+            }\n+          ]\n+        }\n+      ],\n+      setColumnFilters: jest.fn(),\n+      setTableLoading: jest.fn(),\n+      setDisplayTable: jest.fn(),\n+      setDisplayEmptyState: jest.fn(),\n+      setFilterError: jest.fn(),\n+      getQueryTypes: {\n+        loading: false,\n+        data: {\n+          __schema: {\n+            queryType: [\n+              {\n+                name: 'TestArgument',\n+                inputFields: [\n+                  {\n+                    name: 'test',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  }\n+                ]\n+              },\n+              {\n+                name: 'AddressArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'city',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  },\n+                  {\n+                    name: 'country',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  },\n+                  {\n+                    name: 'street',\n+                    type: { name: 'TestArgument', kind: 'INPUT_OBJECT' }\n+                  },\n+                  {\n+                    name: 'zipCode',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  }\n+                ]\n+              },\n+              {\n+                name: 'IdArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  { name: 'id', type: { name: null, kind: 'LIST' } },\n+                  { name: 'equal', type: { name: 'String', kind: 'SCALAR' } },\n+                  { name: 'isNull', type: { name: 'Boolean', kind: 'SCALAR' } }\n+                ]\n+              }\n+            ]\n+          }\n+        }\n+      },\n+      filterChips: [],\n+      setFilterChips: jest.fn(),\n+      runFilter: true,\n+      setRunFilter: jest.fn(),\n+      finalFilters: {\n+        metadata: {\n+          processInstances: { state: { equal: 'ACTIVE' } }\n+        },\n+        trip: {\n+          country: {\n+            equal: 'Australia'\n+          }\n+        }\n+      },\n+      argument: 'TravelsArgument',\n+      setFinalFilters: jest.fn(),\n+      getSchema: {\n+        data: {\n+          __type: {\n+            name: 'TravelsArgument',\n+            inputFields: [\n+              { name: 'and', type: { name: null, kind: 'LIST' } },\n+              { name: 'or', type: { name: null, kind: 'LIST' } },\n+              {\n+                name: 'id',\n+                type: {\n+                  inputFields: [\n+                    { name: 'in', type: { name: null, __typename: '__Type' } },\n+                    {\n+                      name: 'equal',\n+                      type: { name: 'String', __typename: '__Type' }\n+                    },\n+                    {\n+                      name: 'isNull',\n+                      type: { name: 'Boolean', __typename: '__Type' }\n+                    }\n+                  ],\n+                  kind: 'INPUT_OBJECT',\n+                  name: 'IdArgument'\n+                }\n+              },\n+              {\n+                name: 'flight',\n+                type: {\n+                  name: 'FlightArgument',\n+                  kind: 'INPUT_OBJECT',\n+                  inputFields: [\n+                    {\n+                      name: 'arrival',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'departure',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'flightNumber',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'gate',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'seat',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    }\n+                  ]\n+                }\n+              },\n+              {\n+                name: 'hotel',\n+                type: {\n+                  name: 'HotelArgument',\n+                  kind: 'INPUT_OBJECT',\n+                  inputFields: [\n+                    {\n+                      name: 'address',\n+                      type: { name: 'AddressArgument', __typename: '__Type' }\n+                    },\n+                    {\n+                      name: 'bookingNumber',\n+                      type: { name: 'StringArgument', __typename: '__Type' }\n+                    }\n+                  ]\n+                }\n+              }\n+            ]\n+          }\n+        }\n+      }\n+    };\n+    // @ts-ignore\n+    useGetInputFieldsFromTypeQuery.mockReturnValue({\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'IdArgument',\n+          inputFields: [\n+            { name: 'in', type: { name: null, kind: 'LIST' } },\n+            { name: 'equal', type: { name: 'String', kind: 'SCALAR' } },\n+            { name: 'isNull', type: { name: 'Boolean', kind: 'SCALAR' } }\n+          ],\n+          kind: 'INPUT_OBJECT'\n+        }\n+      }\n+    });\n+    // @ts-ignore\n+    useGetInputFieldsFromQueryQuery.mockReturnValue({\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'TravelsArgument',\n+          inputFields: [\n+            {\n+              name: 'and',\n+              type: {\n+                name: null,\n+                kind: 'LIST',\n+                inputFields: null\n+              }\n+            },\n+            {\n+              name: 'or',\n+              type: {\n+                name: null,\n+                kind: 'LIST',\n+                inputFields: null\n+              }\n+            },\n+            {\n+              name: 'flight',\n+              type: {\n+                name: 'FlightArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'arrival',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'departure',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'flightNumber',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'gate',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'seat',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  }\n+                ]\n+              }\n+            },\n+            {\n+              name: 'hotel',\n+              type: {\n+                name: 'HotelArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'address',\n+                    type: {\n+                      name: 'AddressArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'bookingNumber',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'name',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'phone',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'room',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  }\n+                ]\n+              }\n+            }\n+          ]\n+        }\n+      }\n+    });\n+    const wrapper = mount(<DomainExplorerFilterOptions {...props} />);\n+    wrapper.update();\n+    wrapper.setProps({});\n+    const mGraphQLResponse = {\n+      data: {\n+        Travels: [\n+          {\n+            flight: {\n+              arrival: '2020-07-22T03:30:00.000+05:30',\n+              departure: '2020-07-07T03:30:00.000+05:30',\n+              flightNumber: 'MX555',\n+              gate: 'test',\n+              seat: 'test'\n+            },\n+            metadata: {\n+              processInstances: [\n+                {\n+                  businessKey: 'LKJD13',\n+                  id: '37bc93d0-1100-3913-85aa-a8dc253281b0',\n+                  lastUpdate: '2020-07-06T09:16:09.823Z',\n+                  processName: 'travels',\n+                  serviceUrl: 'http://localhost:8080',\n+                  start: '2020-07-06T09:16:09.58Z',\n+                  state: 'ACTIVE'\n+                },\n+                {\n+                  businessKey: null,\n+                  id: '8526d522-24f6-4d12-b975-394a0adeb8f8',\n+                  lastUpdate: '2020-07-06T09:16:09.824Z',\n+                  processName: 'HotelBooking',\n+                  serviceUrl: 'http://localhost:8080',\n+                  start: '2020-07-06T09:16:09.746Z',\n+                  state: 'COMPLETED'\n+                }\n+              ]\n+            }\n+          },\n+          {\n+            flight: {\n+              arrival: '2020-07-23T03:30:00.000+05:30',\n+              departure: '2020-07-10T03:30:00.000+05:30',\n+              flightNumber: 'MX555',\n+              gate: null,\n+              seat: null\n+            },\n+            metadata: {\n+              processInstances: [\n+                {\n+                  businessKey: '4Y0W6E',\n+                  id: 'd2b4967b-e8b1-3232-a07c-d639e08a11d4',\n+                  lastUpdate: '2020-07-06T09:16:55.621Z',\n+                  processName: 'travels',\n+                  serviceUrl: 'http://localhost:8080',\n+                  start: '2020-07-06T09:16:55.609Z',\n+                  state: 'ACTIVE'\n+                },\n+                {\n+                  businessKey: null,\n+                  id: 'cd5f6cc6-7ef4-4eb1-947b-3f53f201ab15',\n+                  lastUpdate: '2020-07-06T09:16:55.621Z',\n+                  processName: 'HotelBooking',\n+                  serviceUrl: 'http://localhost:8080',\n+                  start: '2020-07-06T09:16:55.611Z',\n+                  state: 'COMPLETED'\n+                }\n+              ]\n+            }\n+          }\n+        ]\n+      },\n+      loading: false,\n+      networkStatus: 7,\n+      stale: false\n+    };\n+    client.query.mockReturnValueOnce(mGraphQLResponse);\n+    await Promise.resolve();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "292508b1af5f894f27bfe48012fa098cb7d8c67b"}, "originalPosition": 572}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTcwODc5OQ==", "bodyText": "getWrapperAsync does work nice in my test, so used mock instead", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r455708799", "createdAt": "2020-07-16T11:11:31Z", "author": {"login": "Sara4994"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/tests/DomainExplorerFilterOptions.test.tsx", "diffHunk": "@@ -0,0 +1,1883 @@\n+import React from 'react';\n+import DomainExplorerFilterOptions from '../DomainExplorerFilterOptions';\n+import reactApollo from 'react-apollo';\n+import { GraphQL } from '../../../../graphql/types';\n+import useGetInputFieldsFromQueryQuery = GraphQL.useGetInputFieldsFromQueryQuery;\n+import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n+import Adapter from 'enzyme-adapter-react-16';\n+import { configure, mount } from 'enzyme';\n+import { act } from 'react-dom/test-utils';\n+\n+configure({ adapter: new Adapter() });\n+jest.mock('apollo-client');\n+jest.mock('react-apollo', () => {\n+  const ApolloClient = { query: jest.fn() };\n+  return { useApolloClient: jest.fn(() => ApolloClient) };\n+});\n+\n+jest.mock('../../../../graphql/types');\n+// tslint:disable: no-string-literal\n+// tslint:disable: no-unexpected-multiline\n+describe('Domain explorer filter options component tests', () => {\n+  const defaultProps = {\n+    currentDomain: 'Travels',\n+    getQuery: {\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'Query',\n+          fields: [\n+            {\n+              name: 'Travels',\n+              args: [\n+                {\n+                  name: 'where',\n+                  type: { kind: 'INPUT_OBJECT', name: 'TravelsArgument' }\n+                },\n+                {\n+                  name: 'orderBy',\n+                  type: { kind: 'INPUT_OBJECT', name: 'TravelsOrderBy' }\n+                },\n+                {\n+                  name: 'pagination',\n+                  type: { kind: 'INPUT_OBJECT', name: 'Pagination' }\n+                }\n+              ],\n+              type: {\n+                ofType: { name: 'Travels' }\n+              }\n+            }\n+          ]\n+        }\n+      }\n+    },\n+    parameters: [\n+      { flight: ['arrival'] },\n+      { flight: ['departure'] },\n+      { flight: ['gate'] },\n+      {\n+        metadata: [\n+          {\n+            processInstances: [\n+              'id',\n+              'processName',\n+              'state',\n+              'start',\n+              'lastUpdate',\n+              'businessKey'\n+            ]\n+          }\n+        ]\n+      }\n+    ],\n+    setColumnFilters: jest.fn(),\n+    setTableLoading: jest.fn(),\n+    setDisplayTable: jest.fn(),\n+    setDisplayEmptyState: jest.fn(),\n+    setFilterError: jest.fn(),\n+    filterChips: ['metadata / processInstances / state: ACTIVE'],\n+    setFilterChips: jest.fn(),\n+    runFilter: true,\n+    setRunFilter: jest.fn(),\n+    finalFilters: {\n+      metadata: {\n+        processInstances: { state: { equal: 'ACTIVE' } }\n+      },\n+      trip: {\n+        country: {\n+          equal: 'Australia'\n+        }\n+      }\n+    },\n+    argument: 'TravelsArgument',\n+    setFinalFilters: jest.fn(),\n+    getSchema: {\n+      data: {\n+        __type: {\n+          name: 'TravelsArgument',\n+          inputFields: [\n+            { name: 'and', type: { name: null, kind: 'LIST' } },\n+            { name: 'or', type: { name: null, kind: 'LIST' } },\n+            {\n+              name: 'flight',\n+              type: {\n+                name: 'FlightArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'arrival',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'departure',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'flightNumber',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'gate',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'seat',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  }\n+                ]\n+              }\n+            }\n+          ]\n+        }\n+      }\n+    },\n+    reset: false,\n+    setReset: jest.fn()\n+  };\n+  afterEach(() => {\n+    jest.clearAllMocks();\n+  });\n+  let client;\n+  let useApolloClient;\n+  let useEffect;\n+\n+  const mockUseEffect = () => {\n+    useEffect.mockImplementationOnce(f => f());\n+  };\n+\n+  const mockuseApolloClient = () => {\n+    // tslint:disable-next-line: react-hooks-nesting\n+    client = useApolloClient();\n+  };\n+\n+  beforeEach(() => {\n+    useApolloClient = jest.spyOn(reactApollo, 'useApolloClient');\n+    mockuseApolloClient();\n+    useEffect = jest.spyOn(React, 'useEffect');\n+    mockUseEffect();\n+    mockUseEffect();\n+  });\n+  it('Snapshot test with default props', async () => {\n+    const props = {\n+      reset: false,\n+      setReset: jest.fn(),\n+      currentDomain: 'Travels',\n+      getQuery: {\n+        loading: false,\n+        data: {\n+          __type: {\n+            name: 'Query',\n+            fields: [\n+              {\n+                name: 'Travels',\n+                args: [\n+                  {\n+                    name: 'where',\n+                    type: { kind: 'INPUT_OBJECT', name: 'TravelsArgument' }\n+                  },\n+                  {\n+                    name: 'orderBy',\n+                    type: { kind: 'INPUT_OBJECT', name: 'TravelsOrderBy' }\n+                  },\n+                  {\n+                    name: 'pagination',\n+                    type: { kind: 'INPUT_OBJECT', name: 'Pagination' }\n+                  }\n+                ],\n+                type: {\n+                  ofType: { name: 'Travels' }\n+                }\n+              }\n+            ]\n+          }\n+        }\n+      },\n+      parameters: [\n+        {\n+          metadata: [\n+            {\n+              processInstances: [\n+                'id',\n+                'processName',\n+                'state',\n+                'start',\n+                'lastUpdate',\n+                'businessKey'\n+              ]\n+            }\n+          ]\n+        }\n+      ],\n+      setColumnFilters: jest.fn(),\n+      setTableLoading: jest.fn(),\n+      setDisplayTable: jest.fn(),\n+      setDisplayEmptyState: jest.fn(),\n+      setFilterError: jest.fn(),\n+      getQueryTypes: {\n+        loading: false,\n+        data: {\n+          __schema: {\n+            queryType: [\n+              {\n+                name: 'TestArgument',\n+                inputFields: [\n+                  {\n+                    name: 'test',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  }\n+                ]\n+              },\n+              {\n+                name: 'AddressArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'city',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  },\n+                  {\n+                    name: 'country',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  },\n+                  {\n+                    name: 'street',\n+                    type: { name: 'TestArgument', kind: 'INPUT_OBJECT' }\n+                  },\n+                  {\n+                    name: 'zipCode',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  }\n+                ]\n+              },\n+              {\n+                name: 'IdArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  { name: 'id', type: { name: null, kind: 'LIST' } },\n+                  { name: 'equal', type: { name: 'String', kind: 'SCALAR' } },\n+                  { name: 'isNull', type: { name: 'Boolean', kind: 'SCALAR' } }\n+                ]\n+              }\n+            ]\n+          }\n+        }\n+      },\n+      filterChips: [],\n+      setFilterChips: jest.fn(),\n+      runFilter: true,\n+      setRunFilter: jest.fn(),\n+      finalFilters: {\n+        metadata: {\n+          processInstances: { state: { equal: 'ACTIVE' } }\n+        },\n+        trip: {\n+          country: {\n+            equal: 'Australia'\n+          }\n+        }\n+      },\n+      argument: 'TravelsArgument',\n+      setFinalFilters: jest.fn(),\n+      getSchema: {\n+        data: {\n+          __type: {\n+            name: 'TravelsArgument',\n+            inputFields: [\n+              { name: 'and', type: { name: null, kind: 'LIST' } },\n+              { name: 'or', type: { name: null, kind: 'LIST' } },\n+              {\n+                name: 'id',\n+                type: {\n+                  inputFields: [\n+                    { name: 'in', type: { name: null, __typename: '__Type' } },\n+                    {\n+                      name: 'equal',\n+                      type: { name: 'String', __typename: '__Type' }\n+                    },\n+                    {\n+                      name: 'isNull',\n+                      type: { name: 'Boolean', __typename: '__Type' }\n+                    }\n+                  ],\n+                  kind: 'INPUT_OBJECT',\n+                  name: 'IdArgument'\n+                }\n+              },\n+              {\n+                name: 'flight',\n+                type: {\n+                  name: 'FlightArgument',\n+                  kind: 'INPUT_OBJECT',\n+                  inputFields: [\n+                    {\n+                      name: 'arrival',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'departure',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'flightNumber',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'gate',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'seat',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    }\n+                  ]\n+                }\n+              },\n+              {\n+                name: 'hotel',\n+                type: {\n+                  name: 'HotelArgument',\n+                  kind: 'INPUT_OBJECT',\n+                  inputFields: [\n+                    {\n+                      name: 'address',\n+                      type: { name: 'AddressArgument', __typename: '__Type' }\n+                    },\n+                    {\n+                      name: 'bookingNumber',\n+                      type: { name: 'StringArgument', __typename: '__Type' }\n+                    }\n+                  ]\n+                }\n+              }\n+            ]\n+          }\n+        }\n+      }\n+    };\n+    // @ts-ignore\n+    useGetInputFieldsFromTypeQuery.mockReturnValue({\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'IdArgument',\n+          inputFields: [\n+            { name: 'in', type: { name: null, kind: 'LIST' } },\n+            { name: 'equal', type: { name: 'String', kind: 'SCALAR' } },\n+            { name: 'isNull', type: { name: 'Boolean', kind: 'SCALAR' } }\n+          ],\n+          kind: 'INPUT_OBJECT'\n+        }\n+      }\n+    });\n+    // @ts-ignore\n+    useGetInputFieldsFromQueryQuery.mockReturnValue({\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'TravelsArgument',\n+          inputFields: [\n+            {\n+              name: 'and',\n+              type: {\n+                name: null,\n+                kind: 'LIST',\n+                inputFields: null\n+              }\n+            },\n+            {\n+              name: 'or',\n+              type: {\n+                name: null,\n+                kind: 'LIST',\n+                inputFields: null\n+              }\n+            },\n+            {\n+              name: 'flight',\n+              type: {\n+                name: 'FlightArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'arrival',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'departure',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'flightNumber',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'gate',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'seat',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  }\n+                ]\n+              }\n+            },\n+            {\n+              name: 'hotel',\n+              type: {\n+                name: 'HotelArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'address',\n+                    type: {\n+                      name: 'AddressArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'bookingNumber',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'name',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'phone',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'room',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  }\n+                ]\n+              }\n+            }\n+          ]\n+        }\n+      }\n+    });\n+    const wrapper = mount(<DomainExplorerFilterOptions {...props} />);\n+    wrapper.update();\n+    wrapper.setProps({});\n+    const mGraphQLResponse = {\n+      data: {\n+        Travels: [\n+          {\n+            flight: {\n+              arrival: '2020-07-22T03:30:00.000+05:30',\n+              departure: '2020-07-07T03:30:00.000+05:30',\n+              flightNumber: 'MX555',\n+              gate: 'test',\n+              seat: 'test'\n+            },\n+            metadata: {\n+              processInstances: [\n+                {\n+                  businessKey: 'LKJD13',\n+                  id: '37bc93d0-1100-3913-85aa-a8dc253281b0',\n+                  lastUpdate: '2020-07-06T09:16:09.823Z',\n+                  processName: 'travels',\n+                  serviceUrl: 'http://localhost:8080',\n+                  start: '2020-07-06T09:16:09.58Z',\n+                  state: 'ACTIVE'\n+                },\n+                {\n+                  businessKey: null,\n+                  id: '8526d522-24f6-4d12-b975-394a0adeb8f8',\n+                  lastUpdate: '2020-07-06T09:16:09.824Z',\n+                  processName: 'HotelBooking',\n+                  serviceUrl: 'http://localhost:8080',\n+                  start: '2020-07-06T09:16:09.746Z',\n+                  state: 'COMPLETED'\n+                }\n+              ]\n+            }\n+          },\n+          {\n+            flight: {\n+              arrival: '2020-07-23T03:30:00.000+05:30',\n+              departure: '2020-07-10T03:30:00.000+05:30',\n+              flightNumber: 'MX555',\n+              gate: null,\n+              seat: null\n+            },\n+            metadata: {\n+              processInstances: [\n+                {\n+                  businessKey: '4Y0W6E',\n+                  id: 'd2b4967b-e8b1-3232-a07c-d639e08a11d4',\n+                  lastUpdate: '2020-07-06T09:16:55.621Z',\n+                  processName: 'travels',\n+                  serviceUrl: 'http://localhost:8080',\n+                  start: '2020-07-06T09:16:55.609Z',\n+                  state: 'ACTIVE'\n+                },\n+                {\n+                  businessKey: null,\n+                  id: 'cd5f6cc6-7ef4-4eb1-947b-3f53f201ab15',\n+                  lastUpdate: '2020-07-06T09:16:55.621Z',\n+                  processName: 'HotelBooking',\n+                  serviceUrl: 'http://localhost:8080',\n+                  start: '2020-07-06T09:16:55.611Z',\n+                  state: 'COMPLETED'\n+                }\n+              ]\n+            }\n+          }\n+        ]\n+      },\n+      loading: false,\n+      networkStatus: 7,\n+      stale: false\n+    };\n+    client.query.mockReturnValueOnce(mGraphQLResponse);\n+    await Promise.resolve();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYwMTE3MQ=="}, "originalCommit": {"oid": "292508b1af5f894f27bfe48012fa098cb7d8c67b"}, "originalPosition": 572}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTg1MzA2OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/tests/DomainExplorerFilterOptions.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwODoxNDoxOFrOGyf53g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMzoxMTozNFrOGyqPJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYwNDcwMg==", "bodyText": "we're resolving the promise now (I assume it is to wait for mount to wrap up) - so all the find() and simulate() were called while the components were still loading?", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r455604702", "createdAt": "2020-07-16T08:14:18Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/tests/DomainExplorerFilterOptions.test.tsx", "diffHunk": "@@ -0,0 +1,1883 @@\n+import React from 'react';\n+import DomainExplorerFilterOptions from '../DomainExplorerFilterOptions';\n+import reactApollo from 'react-apollo';\n+import { GraphQL } from '../../../../graphql/types';\n+import useGetInputFieldsFromQueryQuery = GraphQL.useGetInputFieldsFromQueryQuery;\n+import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n+import Adapter from 'enzyme-adapter-react-16';\n+import { configure, mount } from 'enzyme';\n+import { act } from 'react-dom/test-utils';\n+\n+configure({ adapter: new Adapter() });\n+jest.mock('apollo-client');\n+jest.mock('react-apollo', () => {\n+  const ApolloClient = { query: jest.fn() };\n+  return { useApolloClient: jest.fn(() => ApolloClient) };\n+});\n+\n+jest.mock('../../../../graphql/types');\n+// tslint:disable: no-string-literal\n+// tslint:disable: no-unexpected-multiline\n+describe('Domain explorer filter options component tests', () => {\n+  const defaultProps = {\n+    currentDomain: 'Travels',\n+    getQuery: {\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'Query',\n+          fields: [\n+            {\n+              name: 'Travels',\n+              args: [\n+                {\n+                  name: 'where',\n+                  type: { kind: 'INPUT_OBJECT', name: 'TravelsArgument' }\n+                },\n+                {\n+                  name: 'orderBy',\n+                  type: { kind: 'INPUT_OBJECT', name: 'TravelsOrderBy' }\n+                },\n+                {\n+                  name: 'pagination',\n+                  type: { kind: 'INPUT_OBJECT', name: 'Pagination' }\n+                }\n+              ],\n+              type: {\n+                ofType: { name: 'Travels' }\n+              }\n+            }\n+          ]\n+        }\n+      }\n+    },\n+    parameters: [\n+      { flight: ['arrival'] },\n+      { flight: ['departure'] },\n+      { flight: ['gate'] },\n+      {\n+        metadata: [\n+          {\n+            processInstances: [\n+              'id',\n+              'processName',\n+              'state',\n+              'start',\n+              'lastUpdate',\n+              'businessKey'\n+            ]\n+          }\n+        ]\n+      }\n+    ],\n+    setColumnFilters: jest.fn(),\n+    setTableLoading: jest.fn(),\n+    setDisplayTable: jest.fn(),\n+    setDisplayEmptyState: jest.fn(),\n+    setFilterError: jest.fn(),\n+    filterChips: ['metadata / processInstances / state: ACTIVE'],\n+    setFilterChips: jest.fn(),\n+    runFilter: true,\n+    setRunFilter: jest.fn(),\n+    finalFilters: {\n+      metadata: {\n+        processInstances: { state: { equal: 'ACTIVE' } }\n+      },\n+      trip: {\n+        country: {\n+          equal: 'Australia'\n+        }\n+      }\n+    },\n+    argument: 'TravelsArgument',\n+    setFinalFilters: jest.fn(),\n+    getSchema: {\n+      data: {\n+        __type: {\n+          name: 'TravelsArgument',\n+          inputFields: [\n+            { name: 'and', type: { name: null, kind: 'LIST' } },\n+            { name: 'or', type: { name: null, kind: 'LIST' } },\n+            {\n+              name: 'flight',\n+              type: {\n+                name: 'FlightArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'arrival',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'departure',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'flightNumber',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'gate',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'seat',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  }\n+                ]\n+              }\n+            }\n+          ]\n+        }\n+      }\n+    },\n+    reset: false,\n+    setReset: jest.fn()\n+  };\n+  afterEach(() => {\n+    jest.clearAllMocks();\n+  });\n+  let client;\n+  let useApolloClient;\n+  let useEffect;\n+\n+  const mockUseEffect = () => {\n+    useEffect.mockImplementationOnce(f => f());\n+  };\n+\n+  const mockuseApolloClient = () => {\n+    // tslint:disable-next-line: react-hooks-nesting\n+    client = useApolloClient();\n+  };\n+\n+  beforeEach(() => {\n+    useApolloClient = jest.spyOn(reactApollo, 'useApolloClient');\n+    mockuseApolloClient();\n+    useEffect = jest.spyOn(React, 'useEffect');\n+    mockUseEffect();\n+    mockUseEffect();\n+  });\n+  it('Snapshot test with default props', async () => {\n+    const props = {\n+      reset: false,\n+      setReset: jest.fn(),\n+      currentDomain: 'Travels',\n+      getQuery: {\n+        loading: false,\n+        data: {\n+          __type: {\n+            name: 'Query',\n+            fields: [\n+              {\n+                name: 'Travels',\n+                args: [\n+                  {\n+                    name: 'where',\n+                    type: { kind: 'INPUT_OBJECT', name: 'TravelsArgument' }\n+                  },\n+                  {\n+                    name: 'orderBy',\n+                    type: { kind: 'INPUT_OBJECT', name: 'TravelsOrderBy' }\n+                  },\n+                  {\n+                    name: 'pagination',\n+                    type: { kind: 'INPUT_OBJECT', name: 'Pagination' }\n+                  }\n+                ],\n+                type: {\n+                  ofType: { name: 'Travels' }\n+                }\n+              }\n+            ]\n+          }\n+        }\n+      },\n+      parameters: [\n+        {\n+          metadata: [\n+            {\n+              processInstances: [\n+                'id',\n+                'processName',\n+                'state',\n+                'start',\n+                'lastUpdate',\n+                'businessKey'\n+              ]\n+            }\n+          ]\n+        }\n+      ],\n+      setColumnFilters: jest.fn(),\n+      setTableLoading: jest.fn(),\n+      setDisplayTable: jest.fn(),\n+      setDisplayEmptyState: jest.fn(),\n+      setFilterError: jest.fn(),\n+      getQueryTypes: {\n+        loading: false,\n+        data: {\n+          __schema: {\n+            queryType: [\n+              {\n+                name: 'TestArgument',\n+                inputFields: [\n+                  {\n+                    name: 'test',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  }\n+                ]\n+              },\n+              {\n+                name: 'AddressArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'city',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  },\n+                  {\n+                    name: 'country',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  },\n+                  {\n+                    name: 'street',\n+                    type: { name: 'TestArgument', kind: 'INPUT_OBJECT' }\n+                  },\n+                  {\n+                    name: 'zipCode',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  }\n+                ]\n+              },\n+              {\n+                name: 'IdArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  { name: 'id', type: { name: null, kind: 'LIST' } },\n+                  { name: 'equal', type: { name: 'String', kind: 'SCALAR' } },\n+                  { name: 'isNull', type: { name: 'Boolean', kind: 'SCALAR' } }\n+                ]\n+              }\n+            ]\n+          }\n+        }\n+      },\n+      filterChips: [],\n+      setFilterChips: jest.fn(),\n+      runFilter: true,\n+      setRunFilter: jest.fn(),\n+      finalFilters: {\n+        metadata: {\n+          processInstances: { state: { equal: 'ACTIVE' } }\n+        },\n+        trip: {\n+          country: {\n+            equal: 'Australia'\n+          }\n+        }\n+      },\n+      argument: 'TravelsArgument',\n+      setFinalFilters: jest.fn(),\n+      getSchema: {\n+        data: {\n+          __type: {\n+            name: 'TravelsArgument',\n+            inputFields: [\n+              { name: 'and', type: { name: null, kind: 'LIST' } },\n+              { name: 'or', type: { name: null, kind: 'LIST' } },\n+              {\n+                name: 'id',\n+                type: {\n+                  inputFields: [\n+                    { name: 'in', type: { name: null, __typename: '__Type' } },\n+                    {\n+                      name: 'equal',\n+                      type: { name: 'String', __typename: '__Type' }\n+                    },\n+                    {\n+                      name: 'isNull',\n+                      type: { name: 'Boolean', __typename: '__Type' }\n+                    }\n+                  ],\n+                  kind: 'INPUT_OBJECT',\n+                  name: 'IdArgument'\n+                }\n+              },\n+              {\n+                name: 'flight',\n+                type: {\n+                  name: 'FlightArgument',\n+                  kind: 'INPUT_OBJECT',\n+                  inputFields: [\n+                    {\n+                      name: 'arrival',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'departure',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'flightNumber',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'gate',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'seat',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    }\n+                  ]\n+                }\n+              },\n+              {\n+                name: 'hotel',\n+                type: {\n+                  name: 'HotelArgument',\n+                  kind: 'INPUT_OBJECT',\n+                  inputFields: [\n+                    {\n+                      name: 'address',\n+                      type: { name: 'AddressArgument', __typename: '__Type' }\n+                    },\n+                    {\n+                      name: 'bookingNumber',\n+                      type: { name: 'StringArgument', __typename: '__Type' }\n+                    }\n+                  ]\n+                }\n+              }\n+            ]\n+          }\n+        }\n+      }\n+    };\n+    // @ts-ignore\n+    useGetInputFieldsFromTypeQuery.mockReturnValue({\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'IdArgument',\n+          inputFields: [\n+            { name: 'in', type: { name: null, kind: 'LIST' } },\n+            { name: 'equal', type: { name: 'String', kind: 'SCALAR' } },\n+            { name: 'isNull', type: { name: 'Boolean', kind: 'SCALAR' } }\n+          ],\n+          kind: 'INPUT_OBJECT'\n+        }\n+      }\n+    });\n+    // @ts-ignore\n+    useGetInputFieldsFromQueryQuery.mockReturnValue({\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'TravelsArgument',\n+          inputFields: [\n+            {\n+              name: 'and',\n+              type: {\n+                name: null,\n+                kind: 'LIST',\n+                inputFields: null\n+              }\n+            },\n+            {\n+              name: 'or',\n+              type: {\n+                name: null,\n+                kind: 'LIST',\n+                inputFields: null\n+              }\n+            },\n+            {\n+              name: 'flight',\n+              type: {\n+                name: 'FlightArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'arrival',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'departure',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'flightNumber',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'gate',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'seat',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  }\n+                ]\n+              }\n+            },\n+            {\n+              name: 'hotel',\n+              type: {\n+                name: 'HotelArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'address',\n+                    type: {\n+                      name: 'AddressArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'bookingNumber',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'name',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'phone',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'room',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  }\n+                ]\n+              }\n+            }\n+          ]\n+        }\n+      }\n+    });\n+    const wrapper = mount(<DomainExplorerFilterOptions {...props} />);\n+    wrapper.update();\n+    wrapper.setProps({});\n+    const mGraphQLResponse = {\n+      data: {\n+        Travels: [\n+          {\n+            flight: {\n+              arrival: '2020-07-22T03:30:00.000+05:30',\n+              departure: '2020-07-07T03:30:00.000+05:30',\n+              flightNumber: 'MX555',\n+              gate: 'test',\n+              seat: 'test'\n+            },\n+            metadata: {\n+              processInstances: [\n+                {\n+                  businessKey: 'LKJD13',\n+                  id: '37bc93d0-1100-3913-85aa-a8dc253281b0',\n+                  lastUpdate: '2020-07-06T09:16:09.823Z',\n+                  processName: 'travels',\n+                  serviceUrl: 'http://localhost:8080',\n+                  start: '2020-07-06T09:16:09.58Z',\n+                  state: 'ACTIVE'\n+                },\n+                {\n+                  businessKey: null,\n+                  id: '8526d522-24f6-4d12-b975-394a0adeb8f8',\n+                  lastUpdate: '2020-07-06T09:16:09.824Z',\n+                  processName: 'HotelBooking',\n+                  serviceUrl: 'http://localhost:8080',\n+                  start: '2020-07-06T09:16:09.746Z',\n+                  state: 'COMPLETED'\n+                }\n+              ]\n+            }\n+          },\n+          {\n+            flight: {\n+              arrival: '2020-07-23T03:30:00.000+05:30',\n+              departure: '2020-07-10T03:30:00.000+05:30',\n+              flightNumber: 'MX555',\n+              gate: null,\n+              seat: null\n+            },\n+            metadata: {\n+              processInstances: [\n+                {\n+                  businessKey: '4Y0W6E',\n+                  id: 'd2b4967b-e8b1-3232-a07c-d639e08a11d4',\n+                  lastUpdate: '2020-07-06T09:16:55.621Z',\n+                  processName: 'travels',\n+                  serviceUrl: 'http://localhost:8080',\n+                  start: '2020-07-06T09:16:55.609Z',\n+                  state: 'ACTIVE'\n+                },\n+                {\n+                  businessKey: null,\n+                  id: 'cd5f6cc6-7ef4-4eb1-947b-3f53f201ab15',\n+                  lastUpdate: '2020-07-06T09:16:55.621Z',\n+                  processName: 'HotelBooking',\n+                  serviceUrl: 'http://localhost:8080',\n+                  start: '2020-07-06T09:16:55.611Z',\n+                  state: 'COMPLETED'\n+                }\n+              ]\n+            }\n+          }\n+        ]\n+      },\n+      loading: false,\n+      networkStatus: 7,\n+      stale: false\n+    };\n+    client.query.mockReturnValueOnce(mGraphQLResponse);\n+    await Promise.resolve();\n+    expect(wrapper).toMatchSnapshot();\n+  });\n+  it('Trigger onselect function on field select', async () => {\n+    const mGraphQLResponse = {\n+      data: {\n+        Travels: []\n+      },\n+      loading: false,\n+      networkStatus: 7,\n+      stale: false\n+    };\n+    client.query.mockReturnValueOnce(mGraphQLResponse);\n+    const getQueryTypes = {\n+      loading: false,\n+      data: {\n+        __schema: {\n+          queryType: [\n+            {\n+              name: 'AddressArgument',\n+              kind: 'INPUT_OBJECT',\n+              inputFields: [\n+                {\n+                  name: 'city',\n+                  type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                },\n+                {\n+                  name: 'country',\n+                  type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                },\n+                {\n+                  name: 'street',\n+                  type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                },\n+                {\n+                  name: 'zipCode',\n+                  type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                }\n+              ]\n+            },\n+            {\n+              name: 'IdArgument',\n+              kind: 'INPUT_OBJECT',\n+              inputFields: [\n+                { name: 'id', type: { name: null, kind: 'LIST' } },\n+                { name: 'equal', type: { name: 'String', kind: 'SCALAR' } },\n+                { name: 'isNull', type: { name: 'Boolean', kind: 'SCALAR' } }\n+              ]\n+            }\n+          ]\n+        }\n+      }\n+    };\n+    const wrapper = mount(\n+      <DomainExplorerFilterOptions {...{ ...defaultProps, getQueryTypes }} />\n+    );\n+    wrapper.update();\n+    wrapper.setProps({});\n+\n+    // @ts-ignore\n+    useGetInputFieldsFromQueryQuery.mockReturnValue({\n+      loading: false,\n+      data: {}\n+    });\n+    // @ts-ignore\n+    useGetInputFieldsFromTypeQuery.mockReturnValue({\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'IdArgument',\n+          inputFields: [\n+            { name: 'in', type: { name: null, kind: 'LIST' } },\n+            { name: 'equal', type: { name: 'String', kind: 'SCALAR' } },\n+            { name: 'isNull', type: { name: 'Boolean', kind: 'SCALAR' } }\n+          ],\n+          kind: 'INPUT_OBJECT'\n+        }\n+      }\n+    });\n+    const obj = {\n+      nativeEvent: {\n+        target: {\n+          parentElement: {\n+            parentElement: {\n+              getAttribute: jest.fn(() => 'id')\n+            }\n+          }\n+        }\n+      },\n+      target: {}\n+    } as any;\n+    const obj2 = {\n+      target: {\n+        innerText: 'equal'\n+      }\n+    } as any;\n+    // simulate on select prop on fields dropdown to make a selection\n+    act(() => {\n+      wrapper\n+        .find('#select-field')\n+        .first()\n+        .props()\n+        ['onSelect'](obj);\n+    });\n+    // simulate on clear prop on fields dropdown\n+    act(() => {\n+      wrapper\n+        .find('#select-field')\n+        .first()\n+        .props()\n+        ['onClear']();\n+    });\n+    // simulate dropdown to select an operator\n+    act(() => {\n+      wrapper\n+        .find('#select-operator')\n+        .first()\n+        .props()\n+        ['onSelect'](obj2);\n+    });\n+    // check input textbox when the operator is either \"equal\" or \"like\"\n+    wrapper\n+      .update()\n+      .find('input')\n+      .at(1)\n+      .simulate('change', 'Hello');\n+    // trigger button click after setting isDisable false on button\n+    act(() => {\n+      wrapper\n+        .find('#button-with-string')\n+        .at(2)\n+        .props()['isDisabled'] = false;\n+      wrapper\n+        .find('#button-with-string')\n+        .at(2)\n+        .props()['disabled'] = false;\n+      const event = {} as React.MouseEvent<HTMLButtonElement, MouseEvent>;\n+      wrapper\n+        .find('#button-with-string')\n+        .at(2)\n+        .props()\n+        ['onClick'](event);\n+    });\n+    await Promise.resolve();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "292508b1af5f894f27bfe48012fa098cb7d8c67b"}, "originalPosition": 715}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc3Mzk5MA==", "bodyText": "actually this wasnt required on this line... so removed it.", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r455773990", "createdAt": "2020-07-16T13:11:34Z", "author": {"login": "Sara4994"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/tests/DomainExplorerFilterOptions.test.tsx", "diffHunk": "@@ -0,0 +1,1883 @@\n+import React from 'react';\n+import DomainExplorerFilterOptions from '../DomainExplorerFilterOptions';\n+import reactApollo from 'react-apollo';\n+import { GraphQL } from '../../../../graphql/types';\n+import useGetInputFieldsFromQueryQuery = GraphQL.useGetInputFieldsFromQueryQuery;\n+import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n+import Adapter from 'enzyme-adapter-react-16';\n+import { configure, mount } from 'enzyme';\n+import { act } from 'react-dom/test-utils';\n+\n+configure({ adapter: new Adapter() });\n+jest.mock('apollo-client');\n+jest.mock('react-apollo', () => {\n+  const ApolloClient = { query: jest.fn() };\n+  return { useApolloClient: jest.fn(() => ApolloClient) };\n+});\n+\n+jest.mock('../../../../graphql/types');\n+// tslint:disable: no-string-literal\n+// tslint:disable: no-unexpected-multiline\n+describe('Domain explorer filter options component tests', () => {\n+  const defaultProps = {\n+    currentDomain: 'Travels',\n+    getQuery: {\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'Query',\n+          fields: [\n+            {\n+              name: 'Travels',\n+              args: [\n+                {\n+                  name: 'where',\n+                  type: { kind: 'INPUT_OBJECT', name: 'TravelsArgument' }\n+                },\n+                {\n+                  name: 'orderBy',\n+                  type: { kind: 'INPUT_OBJECT', name: 'TravelsOrderBy' }\n+                },\n+                {\n+                  name: 'pagination',\n+                  type: { kind: 'INPUT_OBJECT', name: 'Pagination' }\n+                }\n+              ],\n+              type: {\n+                ofType: { name: 'Travels' }\n+              }\n+            }\n+          ]\n+        }\n+      }\n+    },\n+    parameters: [\n+      { flight: ['arrival'] },\n+      { flight: ['departure'] },\n+      { flight: ['gate'] },\n+      {\n+        metadata: [\n+          {\n+            processInstances: [\n+              'id',\n+              'processName',\n+              'state',\n+              'start',\n+              'lastUpdate',\n+              'businessKey'\n+            ]\n+          }\n+        ]\n+      }\n+    ],\n+    setColumnFilters: jest.fn(),\n+    setTableLoading: jest.fn(),\n+    setDisplayTable: jest.fn(),\n+    setDisplayEmptyState: jest.fn(),\n+    setFilterError: jest.fn(),\n+    filterChips: ['metadata / processInstances / state: ACTIVE'],\n+    setFilterChips: jest.fn(),\n+    runFilter: true,\n+    setRunFilter: jest.fn(),\n+    finalFilters: {\n+      metadata: {\n+        processInstances: { state: { equal: 'ACTIVE' } }\n+      },\n+      trip: {\n+        country: {\n+          equal: 'Australia'\n+        }\n+      }\n+    },\n+    argument: 'TravelsArgument',\n+    setFinalFilters: jest.fn(),\n+    getSchema: {\n+      data: {\n+        __type: {\n+          name: 'TravelsArgument',\n+          inputFields: [\n+            { name: 'and', type: { name: null, kind: 'LIST' } },\n+            { name: 'or', type: { name: null, kind: 'LIST' } },\n+            {\n+              name: 'flight',\n+              type: {\n+                name: 'FlightArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'arrival',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'departure',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'flightNumber',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'gate',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'seat',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  }\n+                ]\n+              }\n+            }\n+          ]\n+        }\n+      }\n+    },\n+    reset: false,\n+    setReset: jest.fn()\n+  };\n+  afterEach(() => {\n+    jest.clearAllMocks();\n+  });\n+  let client;\n+  let useApolloClient;\n+  let useEffect;\n+\n+  const mockUseEffect = () => {\n+    useEffect.mockImplementationOnce(f => f());\n+  };\n+\n+  const mockuseApolloClient = () => {\n+    // tslint:disable-next-line: react-hooks-nesting\n+    client = useApolloClient();\n+  };\n+\n+  beforeEach(() => {\n+    useApolloClient = jest.spyOn(reactApollo, 'useApolloClient');\n+    mockuseApolloClient();\n+    useEffect = jest.spyOn(React, 'useEffect');\n+    mockUseEffect();\n+    mockUseEffect();\n+  });\n+  it('Snapshot test with default props', async () => {\n+    const props = {\n+      reset: false,\n+      setReset: jest.fn(),\n+      currentDomain: 'Travels',\n+      getQuery: {\n+        loading: false,\n+        data: {\n+          __type: {\n+            name: 'Query',\n+            fields: [\n+              {\n+                name: 'Travels',\n+                args: [\n+                  {\n+                    name: 'where',\n+                    type: { kind: 'INPUT_OBJECT', name: 'TravelsArgument' }\n+                  },\n+                  {\n+                    name: 'orderBy',\n+                    type: { kind: 'INPUT_OBJECT', name: 'TravelsOrderBy' }\n+                  },\n+                  {\n+                    name: 'pagination',\n+                    type: { kind: 'INPUT_OBJECT', name: 'Pagination' }\n+                  }\n+                ],\n+                type: {\n+                  ofType: { name: 'Travels' }\n+                }\n+              }\n+            ]\n+          }\n+        }\n+      },\n+      parameters: [\n+        {\n+          metadata: [\n+            {\n+              processInstances: [\n+                'id',\n+                'processName',\n+                'state',\n+                'start',\n+                'lastUpdate',\n+                'businessKey'\n+              ]\n+            }\n+          ]\n+        }\n+      ],\n+      setColumnFilters: jest.fn(),\n+      setTableLoading: jest.fn(),\n+      setDisplayTable: jest.fn(),\n+      setDisplayEmptyState: jest.fn(),\n+      setFilterError: jest.fn(),\n+      getQueryTypes: {\n+        loading: false,\n+        data: {\n+          __schema: {\n+            queryType: [\n+              {\n+                name: 'TestArgument',\n+                inputFields: [\n+                  {\n+                    name: 'test',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  }\n+                ]\n+              },\n+              {\n+                name: 'AddressArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'city',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  },\n+                  {\n+                    name: 'country',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  },\n+                  {\n+                    name: 'street',\n+                    type: { name: 'TestArgument', kind: 'INPUT_OBJECT' }\n+                  },\n+                  {\n+                    name: 'zipCode',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  }\n+                ]\n+              },\n+              {\n+                name: 'IdArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  { name: 'id', type: { name: null, kind: 'LIST' } },\n+                  { name: 'equal', type: { name: 'String', kind: 'SCALAR' } },\n+                  { name: 'isNull', type: { name: 'Boolean', kind: 'SCALAR' } }\n+                ]\n+              }\n+            ]\n+          }\n+        }\n+      },\n+      filterChips: [],\n+      setFilterChips: jest.fn(),\n+      runFilter: true,\n+      setRunFilter: jest.fn(),\n+      finalFilters: {\n+        metadata: {\n+          processInstances: { state: { equal: 'ACTIVE' } }\n+        },\n+        trip: {\n+          country: {\n+            equal: 'Australia'\n+          }\n+        }\n+      },\n+      argument: 'TravelsArgument',\n+      setFinalFilters: jest.fn(),\n+      getSchema: {\n+        data: {\n+          __type: {\n+            name: 'TravelsArgument',\n+            inputFields: [\n+              { name: 'and', type: { name: null, kind: 'LIST' } },\n+              { name: 'or', type: { name: null, kind: 'LIST' } },\n+              {\n+                name: 'id',\n+                type: {\n+                  inputFields: [\n+                    { name: 'in', type: { name: null, __typename: '__Type' } },\n+                    {\n+                      name: 'equal',\n+                      type: { name: 'String', __typename: '__Type' }\n+                    },\n+                    {\n+                      name: 'isNull',\n+                      type: { name: 'Boolean', __typename: '__Type' }\n+                    }\n+                  ],\n+                  kind: 'INPUT_OBJECT',\n+                  name: 'IdArgument'\n+                }\n+              },\n+              {\n+                name: 'flight',\n+                type: {\n+                  name: 'FlightArgument',\n+                  kind: 'INPUT_OBJECT',\n+                  inputFields: [\n+                    {\n+                      name: 'arrival',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'departure',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'flightNumber',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'gate',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'seat',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    }\n+                  ]\n+                }\n+              },\n+              {\n+                name: 'hotel',\n+                type: {\n+                  name: 'HotelArgument',\n+                  kind: 'INPUT_OBJECT',\n+                  inputFields: [\n+                    {\n+                      name: 'address',\n+                      type: { name: 'AddressArgument', __typename: '__Type' }\n+                    },\n+                    {\n+                      name: 'bookingNumber',\n+                      type: { name: 'StringArgument', __typename: '__Type' }\n+                    }\n+                  ]\n+                }\n+              }\n+            ]\n+          }\n+        }\n+      }\n+    };\n+    // @ts-ignore\n+    useGetInputFieldsFromTypeQuery.mockReturnValue({\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'IdArgument',\n+          inputFields: [\n+            { name: 'in', type: { name: null, kind: 'LIST' } },\n+            { name: 'equal', type: { name: 'String', kind: 'SCALAR' } },\n+            { name: 'isNull', type: { name: 'Boolean', kind: 'SCALAR' } }\n+          ],\n+          kind: 'INPUT_OBJECT'\n+        }\n+      }\n+    });\n+    // @ts-ignore\n+    useGetInputFieldsFromQueryQuery.mockReturnValue({\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'TravelsArgument',\n+          inputFields: [\n+            {\n+              name: 'and',\n+              type: {\n+                name: null,\n+                kind: 'LIST',\n+                inputFields: null\n+              }\n+            },\n+            {\n+              name: 'or',\n+              type: {\n+                name: null,\n+                kind: 'LIST',\n+                inputFields: null\n+              }\n+            },\n+            {\n+              name: 'flight',\n+              type: {\n+                name: 'FlightArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'arrival',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'departure',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'flightNumber',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'gate',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'seat',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  }\n+                ]\n+              }\n+            },\n+            {\n+              name: 'hotel',\n+              type: {\n+                name: 'HotelArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'address',\n+                    type: {\n+                      name: 'AddressArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'bookingNumber',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'name',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'phone',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'room',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  }\n+                ]\n+              }\n+            }\n+          ]\n+        }\n+      }\n+    });\n+    const wrapper = mount(<DomainExplorerFilterOptions {...props} />);\n+    wrapper.update();\n+    wrapper.setProps({});\n+    const mGraphQLResponse = {\n+      data: {\n+        Travels: [\n+          {\n+            flight: {\n+              arrival: '2020-07-22T03:30:00.000+05:30',\n+              departure: '2020-07-07T03:30:00.000+05:30',\n+              flightNumber: 'MX555',\n+              gate: 'test',\n+              seat: 'test'\n+            },\n+            metadata: {\n+              processInstances: [\n+                {\n+                  businessKey: 'LKJD13',\n+                  id: '37bc93d0-1100-3913-85aa-a8dc253281b0',\n+                  lastUpdate: '2020-07-06T09:16:09.823Z',\n+                  processName: 'travels',\n+                  serviceUrl: 'http://localhost:8080',\n+                  start: '2020-07-06T09:16:09.58Z',\n+                  state: 'ACTIVE'\n+                },\n+                {\n+                  businessKey: null,\n+                  id: '8526d522-24f6-4d12-b975-394a0adeb8f8',\n+                  lastUpdate: '2020-07-06T09:16:09.824Z',\n+                  processName: 'HotelBooking',\n+                  serviceUrl: 'http://localhost:8080',\n+                  start: '2020-07-06T09:16:09.746Z',\n+                  state: 'COMPLETED'\n+                }\n+              ]\n+            }\n+          },\n+          {\n+            flight: {\n+              arrival: '2020-07-23T03:30:00.000+05:30',\n+              departure: '2020-07-10T03:30:00.000+05:30',\n+              flightNumber: 'MX555',\n+              gate: null,\n+              seat: null\n+            },\n+            metadata: {\n+              processInstances: [\n+                {\n+                  businessKey: '4Y0W6E',\n+                  id: 'd2b4967b-e8b1-3232-a07c-d639e08a11d4',\n+                  lastUpdate: '2020-07-06T09:16:55.621Z',\n+                  processName: 'travels',\n+                  serviceUrl: 'http://localhost:8080',\n+                  start: '2020-07-06T09:16:55.609Z',\n+                  state: 'ACTIVE'\n+                },\n+                {\n+                  businessKey: null,\n+                  id: 'cd5f6cc6-7ef4-4eb1-947b-3f53f201ab15',\n+                  lastUpdate: '2020-07-06T09:16:55.621Z',\n+                  processName: 'HotelBooking',\n+                  serviceUrl: 'http://localhost:8080',\n+                  start: '2020-07-06T09:16:55.611Z',\n+                  state: 'COMPLETED'\n+                }\n+              ]\n+            }\n+          }\n+        ]\n+      },\n+      loading: false,\n+      networkStatus: 7,\n+      stale: false\n+    };\n+    client.query.mockReturnValueOnce(mGraphQLResponse);\n+    await Promise.resolve();\n+    expect(wrapper).toMatchSnapshot();\n+  });\n+  it('Trigger onselect function on field select', async () => {\n+    const mGraphQLResponse = {\n+      data: {\n+        Travels: []\n+      },\n+      loading: false,\n+      networkStatus: 7,\n+      stale: false\n+    };\n+    client.query.mockReturnValueOnce(mGraphQLResponse);\n+    const getQueryTypes = {\n+      loading: false,\n+      data: {\n+        __schema: {\n+          queryType: [\n+            {\n+              name: 'AddressArgument',\n+              kind: 'INPUT_OBJECT',\n+              inputFields: [\n+                {\n+                  name: 'city',\n+                  type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                },\n+                {\n+                  name: 'country',\n+                  type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                },\n+                {\n+                  name: 'street',\n+                  type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                },\n+                {\n+                  name: 'zipCode',\n+                  type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                }\n+              ]\n+            },\n+            {\n+              name: 'IdArgument',\n+              kind: 'INPUT_OBJECT',\n+              inputFields: [\n+                { name: 'id', type: { name: null, kind: 'LIST' } },\n+                { name: 'equal', type: { name: 'String', kind: 'SCALAR' } },\n+                { name: 'isNull', type: { name: 'Boolean', kind: 'SCALAR' } }\n+              ]\n+            }\n+          ]\n+        }\n+      }\n+    };\n+    const wrapper = mount(\n+      <DomainExplorerFilterOptions {...{ ...defaultProps, getQueryTypes }} />\n+    );\n+    wrapper.update();\n+    wrapper.setProps({});\n+\n+    // @ts-ignore\n+    useGetInputFieldsFromQueryQuery.mockReturnValue({\n+      loading: false,\n+      data: {}\n+    });\n+    // @ts-ignore\n+    useGetInputFieldsFromTypeQuery.mockReturnValue({\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'IdArgument',\n+          inputFields: [\n+            { name: 'in', type: { name: null, kind: 'LIST' } },\n+            { name: 'equal', type: { name: 'String', kind: 'SCALAR' } },\n+            { name: 'isNull', type: { name: 'Boolean', kind: 'SCALAR' } }\n+          ],\n+          kind: 'INPUT_OBJECT'\n+        }\n+      }\n+    });\n+    const obj = {\n+      nativeEvent: {\n+        target: {\n+          parentElement: {\n+            parentElement: {\n+              getAttribute: jest.fn(() => 'id')\n+            }\n+          }\n+        }\n+      },\n+      target: {}\n+    } as any;\n+    const obj2 = {\n+      target: {\n+        innerText: 'equal'\n+      }\n+    } as any;\n+    // simulate on select prop on fields dropdown to make a selection\n+    act(() => {\n+      wrapper\n+        .find('#select-field')\n+        .first()\n+        .props()\n+        ['onSelect'](obj);\n+    });\n+    // simulate on clear prop on fields dropdown\n+    act(() => {\n+      wrapper\n+        .find('#select-field')\n+        .first()\n+        .props()\n+        ['onClear']();\n+    });\n+    // simulate dropdown to select an operator\n+    act(() => {\n+      wrapper\n+        .find('#select-operator')\n+        .first()\n+        .props()\n+        ['onSelect'](obj2);\n+    });\n+    // check input textbox when the operator is either \"equal\" or \"like\"\n+    wrapper\n+      .update()\n+      .find('input')\n+      .at(1)\n+      .simulate('change', 'Hello');\n+    // trigger button click after setting isDisable false on button\n+    act(() => {\n+      wrapper\n+        .find('#button-with-string')\n+        .at(2)\n+        .props()['isDisabled'] = false;\n+      wrapper\n+        .find('#button-with-string')\n+        .at(2)\n+        .props()['disabled'] = false;\n+      const event = {} as React.MouseEvent<HTMLButtonElement, MouseEvent>;\n+      wrapper\n+        .find('#button-with-string')\n+        .at(2)\n+        .props()\n+        ['onClick'](event);\n+    });\n+    await Promise.resolve();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYwNDcwMg=="}, "originalCommit": {"oid": "292508b1af5f894f27bfe48012fa098cb7d8c67b"}, "originalPosition": 715}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTg1NzQwOnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/tests/DomainExplorerFilterOptions.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwODoxNDo1OVrOGyf8sw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMzoxMTo1MlrOGyqP8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYwNTQyNw==", "bodyText": "Shouldn't we verify what happened after each step?", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r455605427", "createdAt": "2020-07-16T08:14:59Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/tests/DomainExplorerFilterOptions.test.tsx", "diffHunk": "@@ -0,0 +1,1883 @@\n+import React from 'react';\n+import DomainExplorerFilterOptions from '../DomainExplorerFilterOptions';\n+import reactApollo from 'react-apollo';\n+import { GraphQL } from '../../../../graphql/types';\n+import useGetInputFieldsFromQueryQuery = GraphQL.useGetInputFieldsFromQueryQuery;\n+import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n+import Adapter from 'enzyme-adapter-react-16';\n+import { configure, mount } from 'enzyme';\n+import { act } from 'react-dom/test-utils';\n+\n+configure({ adapter: new Adapter() });\n+jest.mock('apollo-client');\n+jest.mock('react-apollo', () => {\n+  const ApolloClient = { query: jest.fn() };\n+  return { useApolloClient: jest.fn(() => ApolloClient) };\n+});\n+\n+jest.mock('../../../../graphql/types');\n+// tslint:disable: no-string-literal\n+// tslint:disable: no-unexpected-multiline\n+describe('Domain explorer filter options component tests', () => {\n+  const defaultProps = {\n+    currentDomain: 'Travels',\n+    getQuery: {\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'Query',\n+          fields: [\n+            {\n+              name: 'Travels',\n+              args: [\n+                {\n+                  name: 'where',\n+                  type: { kind: 'INPUT_OBJECT', name: 'TravelsArgument' }\n+                },\n+                {\n+                  name: 'orderBy',\n+                  type: { kind: 'INPUT_OBJECT', name: 'TravelsOrderBy' }\n+                },\n+                {\n+                  name: 'pagination',\n+                  type: { kind: 'INPUT_OBJECT', name: 'Pagination' }\n+                }\n+              ],\n+              type: {\n+                ofType: { name: 'Travels' }\n+              }\n+            }\n+          ]\n+        }\n+      }\n+    },\n+    parameters: [\n+      { flight: ['arrival'] },\n+      { flight: ['departure'] },\n+      { flight: ['gate'] },\n+      {\n+        metadata: [\n+          {\n+            processInstances: [\n+              'id',\n+              'processName',\n+              'state',\n+              'start',\n+              'lastUpdate',\n+              'businessKey'\n+            ]\n+          }\n+        ]\n+      }\n+    ],\n+    setColumnFilters: jest.fn(),\n+    setTableLoading: jest.fn(),\n+    setDisplayTable: jest.fn(),\n+    setDisplayEmptyState: jest.fn(),\n+    setFilterError: jest.fn(),\n+    filterChips: ['metadata / processInstances / state: ACTIVE'],\n+    setFilterChips: jest.fn(),\n+    runFilter: true,\n+    setRunFilter: jest.fn(),\n+    finalFilters: {\n+      metadata: {\n+        processInstances: { state: { equal: 'ACTIVE' } }\n+      },\n+      trip: {\n+        country: {\n+          equal: 'Australia'\n+        }\n+      }\n+    },\n+    argument: 'TravelsArgument',\n+    setFinalFilters: jest.fn(),\n+    getSchema: {\n+      data: {\n+        __type: {\n+          name: 'TravelsArgument',\n+          inputFields: [\n+            { name: 'and', type: { name: null, kind: 'LIST' } },\n+            { name: 'or', type: { name: null, kind: 'LIST' } },\n+            {\n+              name: 'flight',\n+              type: {\n+                name: 'FlightArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'arrival',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'departure',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'flightNumber',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'gate',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'seat',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  }\n+                ]\n+              }\n+            }\n+          ]\n+        }\n+      }\n+    },\n+    reset: false,\n+    setReset: jest.fn()\n+  };\n+  afterEach(() => {\n+    jest.clearAllMocks();\n+  });\n+  let client;\n+  let useApolloClient;\n+  let useEffect;\n+\n+  const mockUseEffect = () => {\n+    useEffect.mockImplementationOnce(f => f());\n+  };\n+\n+  const mockuseApolloClient = () => {\n+    // tslint:disable-next-line: react-hooks-nesting\n+    client = useApolloClient();\n+  };\n+\n+  beforeEach(() => {\n+    useApolloClient = jest.spyOn(reactApollo, 'useApolloClient');\n+    mockuseApolloClient();\n+    useEffect = jest.spyOn(React, 'useEffect');\n+    mockUseEffect();\n+    mockUseEffect();\n+  });\n+  it('Snapshot test with default props', async () => {\n+    const props = {\n+      reset: false,\n+      setReset: jest.fn(),\n+      currentDomain: 'Travels',\n+      getQuery: {\n+        loading: false,\n+        data: {\n+          __type: {\n+            name: 'Query',\n+            fields: [\n+              {\n+                name: 'Travels',\n+                args: [\n+                  {\n+                    name: 'where',\n+                    type: { kind: 'INPUT_OBJECT', name: 'TravelsArgument' }\n+                  },\n+                  {\n+                    name: 'orderBy',\n+                    type: { kind: 'INPUT_OBJECT', name: 'TravelsOrderBy' }\n+                  },\n+                  {\n+                    name: 'pagination',\n+                    type: { kind: 'INPUT_OBJECT', name: 'Pagination' }\n+                  }\n+                ],\n+                type: {\n+                  ofType: { name: 'Travels' }\n+                }\n+              }\n+            ]\n+          }\n+        }\n+      },\n+      parameters: [\n+        {\n+          metadata: [\n+            {\n+              processInstances: [\n+                'id',\n+                'processName',\n+                'state',\n+                'start',\n+                'lastUpdate',\n+                'businessKey'\n+              ]\n+            }\n+          ]\n+        }\n+      ],\n+      setColumnFilters: jest.fn(),\n+      setTableLoading: jest.fn(),\n+      setDisplayTable: jest.fn(),\n+      setDisplayEmptyState: jest.fn(),\n+      setFilterError: jest.fn(),\n+      getQueryTypes: {\n+        loading: false,\n+        data: {\n+          __schema: {\n+            queryType: [\n+              {\n+                name: 'TestArgument',\n+                inputFields: [\n+                  {\n+                    name: 'test',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  }\n+                ]\n+              },\n+              {\n+                name: 'AddressArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'city',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  },\n+                  {\n+                    name: 'country',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  },\n+                  {\n+                    name: 'street',\n+                    type: { name: 'TestArgument', kind: 'INPUT_OBJECT' }\n+                  },\n+                  {\n+                    name: 'zipCode',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  }\n+                ]\n+              },\n+              {\n+                name: 'IdArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  { name: 'id', type: { name: null, kind: 'LIST' } },\n+                  { name: 'equal', type: { name: 'String', kind: 'SCALAR' } },\n+                  { name: 'isNull', type: { name: 'Boolean', kind: 'SCALAR' } }\n+                ]\n+              }\n+            ]\n+          }\n+        }\n+      },\n+      filterChips: [],\n+      setFilterChips: jest.fn(),\n+      runFilter: true,\n+      setRunFilter: jest.fn(),\n+      finalFilters: {\n+        metadata: {\n+          processInstances: { state: { equal: 'ACTIVE' } }\n+        },\n+        trip: {\n+          country: {\n+            equal: 'Australia'\n+          }\n+        }\n+      },\n+      argument: 'TravelsArgument',\n+      setFinalFilters: jest.fn(),\n+      getSchema: {\n+        data: {\n+          __type: {\n+            name: 'TravelsArgument',\n+            inputFields: [\n+              { name: 'and', type: { name: null, kind: 'LIST' } },\n+              { name: 'or', type: { name: null, kind: 'LIST' } },\n+              {\n+                name: 'id',\n+                type: {\n+                  inputFields: [\n+                    { name: 'in', type: { name: null, __typename: '__Type' } },\n+                    {\n+                      name: 'equal',\n+                      type: { name: 'String', __typename: '__Type' }\n+                    },\n+                    {\n+                      name: 'isNull',\n+                      type: { name: 'Boolean', __typename: '__Type' }\n+                    }\n+                  ],\n+                  kind: 'INPUT_OBJECT',\n+                  name: 'IdArgument'\n+                }\n+              },\n+              {\n+                name: 'flight',\n+                type: {\n+                  name: 'FlightArgument',\n+                  kind: 'INPUT_OBJECT',\n+                  inputFields: [\n+                    {\n+                      name: 'arrival',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'departure',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'flightNumber',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'gate',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'seat',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    }\n+                  ]\n+                }\n+              },\n+              {\n+                name: 'hotel',\n+                type: {\n+                  name: 'HotelArgument',\n+                  kind: 'INPUT_OBJECT',\n+                  inputFields: [\n+                    {\n+                      name: 'address',\n+                      type: { name: 'AddressArgument', __typename: '__Type' }\n+                    },\n+                    {\n+                      name: 'bookingNumber',\n+                      type: { name: 'StringArgument', __typename: '__Type' }\n+                    }\n+                  ]\n+                }\n+              }\n+            ]\n+          }\n+        }\n+      }\n+    };\n+    // @ts-ignore\n+    useGetInputFieldsFromTypeQuery.mockReturnValue({\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'IdArgument',\n+          inputFields: [\n+            { name: 'in', type: { name: null, kind: 'LIST' } },\n+            { name: 'equal', type: { name: 'String', kind: 'SCALAR' } },\n+            { name: 'isNull', type: { name: 'Boolean', kind: 'SCALAR' } }\n+          ],\n+          kind: 'INPUT_OBJECT'\n+        }\n+      }\n+    });\n+    // @ts-ignore\n+    useGetInputFieldsFromQueryQuery.mockReturnValue({\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'TravelsArgument',\n+          inputFields: [\n+            {\n+              name: 'and',\n+              type: {\n+                name: null,\n+                kind: 'LIST',\n+                inputFields: null\n+              }\n+            },\n+            {\n+              name: 'or',\n+              type: {\n+                name: null,\n+                kind: 'LIST',\n+                inputFields: null\n+              }\n+            },\n+            {\n+              name: 'flight',\n+              type: {\n+                name: 'FlightArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'arrival',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'departure',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'flightNumber',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'gate',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'seat',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  }\n+                ]\n+              }\n+            },\n+            {\n+              name: 'hotel',\n+              type: {\n+                name: 'HotelArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'address',\n+                    type: {\n+                      name: 'AddressArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'bookingNumber',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'name',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'phone',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'room',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  }\n+                ]\n+              }\n+            }\n+          ]\n+        }\n+      }\n+    });\n+    const wrapper = mount(<DomainExplorerFilterOptions {...props} />);\n+    wrapper.update();\n+    wrapper.setProps({});\n+    const mGraphQLResponse = {\n+      data: {\n+        Travels: [\n+          {\n+            flight: {\n+              arrival: '2020-07-22T03:30:00.000+05:30',\n+              departure: '2020-07-07T03:30:00.000+05:30',\n+              flightNumber: 'MX555',\n+              gate: 'test',\n+              seat: 'test'\n+            },\n+            metadata: {\n+              processInstances: [\n+                {\n+                  businessKey: 'LKJD13',\n+                  id: '37bc93d0-1100-3913-85aa-a8dc253281b0',\n+                  lastUpdate: '2020-07-06T09:16:09.823Z',\n+                  processName: 'travels',\n+                  serviceUrl: 'http://localhost:8080',\n+                  start: '2020-07-06T09:16:09.58Z',\n+                  state: 'ACTIVE'\n+                },\n+                {\n+                  businessKey: null,\n+                  id: '8526d522-24f6-4d12-b975-394a0adeb8f8',\n+                  lastUpdate: '2020-07-06T09:16:09.824Z',\n+                  processName: 'HotelBooking',\n+                  serviceUrl: 'http://localhost:8080',\n+                  start: '2020-07-06T09:16:09.746Z',\n+                  state: 'COMPLETED'\n+                }\n+              ]\n+            }\n+          },\n+          {\n+            flight: {\n+              arrival: '2020-07-23T03:30:00.000+05:30',\n+              departure: '2020-07-10T03:30:00.000+05:30',\n+              flightNumber: 'MX555',\n+              gate: null,\n+              seat: null\n+            },\n+            metadata: {\n+              processInstances: [\n+                {\n+                  businessKey: '4Y0W6E',\n+                  id: 'd2b4967b-e8b1-3232-a07c-d639e08a11d4',\n+                  lastUpdate: '2020-07-06T09:16:55.621Z',\n+                  processName: 'travels',\n+                  serviceUrl: 'http://localhost:8080',\n+                  start: '2020-07-06T09:16:55.609Z',\n+                  state: 'ACTIVE'\n+                },\n+                {\n+                  businessKey: null,\n+                  id: 'cd5f6cc6-7ef4-4eb1-947b-3f53f201ab15',\n+                  lastUpdate: '2020-07-06T09:16:55.621Z',\n+                  processName: 'HotelBooking',\n+                  serviceUrl: 'http://localhost:8080',\n+                  start: '2020-07-06T09:16:55.611Z',\n+                  state: 'COMPLETED'\n+                }\n+              ]\n+            }\n+          }\n+        ]\n+      },\n+      loading: false,\n+      networkStatus: 7,\n+      stale: false\n+    };\n+    client.query.mockReturnValueOnce(mGraphQLResponse);\n+    await Promise.resolve();\n+    expect(wrapper).toMatchSnapshot();\n+  });\n+  it('Trigger onselect function on field select', async () => {\n+    const mGraphQLResponse = {\n+      data: {\n+        Travels: []\n+      },\n+      loading: false,\n+      networkStatus: 7,\n+      stale: false\n+    };\n+    client.query.mockReturnValueOnce(mGraphQLResponse);\n+    const getQueryTypes = {\n+      loading: false,\n+      data: {\n+        __schema: {\n+          queryType: [\n+            {\n+              name: 'AddressArgument',\n+              kind: 'INPUT_OBJECT',\n+              inputFields: [\n+                {\n+                  name: 'city',\n+                  type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                },\n+                {\n+                  name: 'country',\n+                  type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                },\n+                {\n+                  name: 'street',\n+                  type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                },\n+                {\n+                  name: 'zipCode',\n+                  type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                }\n+              ]\n+            },\n+            {\n+              name: 'IdArgument',\n+              kind: 'INPUT_OBJECT',\n+              inputFields: [\n+                { name: 'id', type: { name: null, kind: 'LIST' } },\n+                { name: 'equal', type: { name: 'String', kind: 'SCALAR' } },\n+                { name: 'isNull', type: { name: 'Boolean', kind: 'SCALAR' } }\n+              ]\n+            }\n+          ]\n+        }\n+      }\n+    };\n+    const wrapper = mount(\n+      <DomainExplorerFilterOptions {...{ ...defaultProps, getQueryTypes }} />\n+    );\n+    wrapper.update();\n+    wrapper.setProps({});\n+\n+    // @ts-ignore\n+    useGetInputFieldsFromQueryQuery.mockReturnValue({\n+      loading: false,\n+      data: {}\n+    });\n+    // @ts-ignore\n+    useGetInputFieldsFromTypeQuery.mockReturnValue({\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'IdArgument',\n+          inputFields: [\n+            { name: 'in', type: { name: null, kind: 'LIST' } },\n+            { name: 'equal', type: { name: 'String', kind: 'SCALAR' } },\n+            { name: 'isNull', type: { name: 'Boolean', kind: 'SCALAR' } }\n+          ],\n+          kind: 'INPUT_OBJECT'\n+        }\n+      }\n+    });\n+    const obj = {\n+      nativeEvent: {\n+        target: {\n+          parentElement: {\n+            parentElement: {\n+              getAttribute: jest.fn(() => 'id')\n+            }\n+          }\n+        }\n+      },\n+      target: {}\n+    } as any;\n+    const obj2 = {\n+      target: {\n+        innerText: 'equal'\n+      }\n+    } as any;\n+    // simulate on select prop on fields dropdown to make a selection", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "292508b1af5f894f27bfe48012fa098cb7d8c67b"}, "originalPosition": 668}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc3NDE5Mg==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r455774192", "createdAt": "2020-07-16T13:11:52Z", "author": {"login": "Sara4994"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/tests/DomainExplorerFilterOptions.test.tsx", "diffHunk": "@@ -0,0 +1,1883 @@\n+import React from 'react';\n+import DomainExplorerFilterOptions from '../DomainExplorerFilterOptions';\n+import reactApollo from 'react-apollo';\n+import { GraphQL } from '../../../../graphql/types';\n+import useGetInputFieldsFromQueryQuery = GraphQL.useGetInputFieldsFromQueryQuery;\n+import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n+import Adapter from 'enzyme-adapter-react-16';\n+import { configure, mount } from 'enzyme';\n+import { act } from 'react-dom/test-utils';\n+\n+configure({ adapter: new Adapter() });\n+jest.mock('apollo-client');\n+jest.mock('react-apollo', () => {\n+  const ApolloClient = { query: jest.fn() };\n+  return { useApolloClient: jest.fn(() => ApolloClient) };\n+});\n+\n+jest.mock('../../../../graphql/types');\n+// tslint:disable: no-string-literal\n+// tslint:disable: no-unexpected-multiline\n+describe('Domain explorer filter options component tests', () => {\n+  const defaultProps = {\n+    currentDomain: 'Travels',\n+    getQuery: {\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'Query',\n+          fields: [\n+            {\n+              name: 'Travels',\n+              args: [\n+                {\n+                  name: 'where',\n+                  type: { kind: 'INPUT_OBJECT', name: 'TravelsArgument' }\n+                },\n+                {\n+                  name: 'orderBy',\n+                  type: { kind: 'INPUT_OBJECT', name: 'TravelsOrderBy' }\n+                },\n+                {\n+                  name: 'pagination',\n+                  type: { kind: 'INPUT_OBJECT', name: 'Pagination' }\n+                }\n+              ],\n+              type: {\n+                ofType: { name: 'Travels' }\n+              }\n+            }\n+          ]\n+        }\n+      }\n+    },\n+    parameters: [\n+      { flight: ['arrival'] },\n+      { flight: ['departure'] },\n+      { flight: ['gate'] },\n+      {\n+        metadata: [\n+          {\n+            processInstances: [\n+              'id',\n+              'processName',\n+              'state',\n+              'start',\n+              'lastUpdate',\n+              'businessKey'\n+            ]\n+          }\n+        ]\n+      }\n+    ],\n+    setColumnFilters: jest.fn(),\n+    setTableLoading: jest.fn(),\n+    setDisplayTable: jest.fn(),\n+    setDisplayEmptyState: jest.fn(),\n+    setFilterError: jest.fn(),\n+    filterChips: ['metadata / processInstances / state: ACTIVE'],\n+    setFilterChips: jest.fn(),\n+    runFilter: true,\n+    setRunFilter: jest.fn(),\n+    finalFilters: {\n+      metadata: {\n+        processInstances: { state: { equal: 'ACTIVE' } }\n+      },\n+      trip: {\n+        country: {\n+          equal: 'Australia'\n+        }\n+      }\n+    },\n+    argument: 'TravelsArgument',\n+    setFinalFilters: jest.fn(),\n+    getSchema: {\n+      data: {\n+        __type: {\n+          name: 'TravelsArgument',\n+          inputFields: [\n+            { name: 'and', type: { name: null, kind: 'LIST' } },\n+            { name: 'or', type: { name: null, kind: 'LIST' } },\n+            {\n+              name: 'flight',\n+              type: {\n+                name: 'FlightArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'arrival',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'departure',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'flightNumber',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'gate',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'seat',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  }\n+                ]\n+              }\n+            }\n+          ]\n+        }\n+      }\n+    },\n+    reset: false,\n+    setReset: jest.fn()\n+  };\n+  afterEach(() => {\n+    jest.clearAllMocks();\n+  });\n+  let client;\n+  let useApolloClient;\n+  let useEffect;\n+\n+  const mockUseEffect = () => {\n+    useEffect.mockImplementationOnce(f => f());\n+  };\n+\n+  const mockuseApolloClient = () => {\n+    // tslint:disable-next-line: react-hooks-nesting\n+    client = useApolloClient();\n+  };\n+\n+  beforeEach(() => {\n+    useApolloClient = jest.spyOn(reactApollo, 'useApolloClient');\n+    mockuseApolloClient();\n+    useEffect = jest.spyOn(React, 'useEffect');\n+    mockUseEffect();\n+    mockUseEffect();\n+  });\n+  it('Snapshot test with default props', async () => {\n+    const props = {\n+      reset: false,\n+      setReset: jest.fn(),\n+      currentDomain: 'Travels',\n+      getQuery: {\n+        loading: false,\n+        data: {\n+          __type: {\n+            name: 'Query',\n+            fields: [\n+              {\n+                name: 'Travels',\n+                args: [\n+                  {\n+                    name: 'where',\n+                    type: { kind: 'INPUT_OBJECT', name: 'TravelsArgument' }\n+                  },\n+                  {\n+                    name: 'orderBy',\n+                    type: { kind: 'INPUT_OBJECT', name: 'TravelsOrderBy' }\n+                  },\n+                  {\n+                    name: 'pagination',\n+                    type: { kind: 'INPUT_OBJECT', name: 'Pagination' }\n+                  }\n+                ],\n+                type: {\n+                  ofType: { name: 'Travels' }\n+                }\n+              }\n+            ]\n+          }\n+        }\n+      },\n+      parameters: [\n+        {\n+          metadata: [\n+            {\n+              processInstances: [\n+                'id',\n+                'processName',\n+                'state',\n+                'start',\n+                'lastUpdate',\n+                'businessKey'\n+              ]\n+            }\n+          ]\n+        }\n+      ],\n+      setColumnFilters: jest.fn(),\n+      setTableLoading: jest.fn(),\n+      setDisplayTable: jest.fn(),\n+      setDisplayEmptyState: jest.fn(),\n+      setFilterError: jest.fn(),\n+      getQueryTypes: {\n+        loading: false,\n+        data: {\n+          __schema: {\n+            queryType: [\n+              {\n+                name: 'TestArgument',\n+                inputFields: [\n+                  {\n+                    name: 'test',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  }\n+                ]\n+              },\n+              {\n+                name: 'AddressArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'city',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  },\n+                  {\n+                    name: 'country',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  },\n+                  {\n+                    name: 'street',\n+                    type: { name: 'TestArgument', kind: 'INPUT_OBJECT' }\n+                  },\n+                  {\n+                    name: 'zipCode',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  }\n+                ]\n+              },\n+              {\n+                name: 'IdArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  { name: 'id', type: { name: null, kind: 'LIST' } },\n+                  { name: 'equal', type: { name: 'String', kind: 'SCALAR' } },\n+                  { name: 'isNull', type: { name: 'Boolean', kind: 'SCALAR' } }\n+                ]\n+              }\n+            ]\n+          }\n+        }\n+      },\n+      filterChips: [],\n+      setFilterChips: jest.fn(),\n+      runFilter: true,\n+      setRunFilter: jest.fn(),\n+      finalFilters: {\n+        metadata: {\n+          processInstances: { state: { equal: 'ACTIVE' } }\n+        },\n+        trip: {\n+          country: {\n+            equal: 'Australia'\n+          }\n+        }\n+      },\n+      argument: 'TravelsArgument',\n+      setFinalFilters: jest.fn(),\n+      getSchema: {\n+        data: {\n+          __type: {\n+            name: 'TravelsArgument',\n+            inputFields: [\n+              { name: 'and', type: { name: null, kind: 'LIST' } },\n+              { name: 'or', type: { name: null, kind: 'LIST' } },\n+              {\n+                name: 'id',\n+                type: {\n+                  inputFields: [\n+                    { name: 'in', type: { name: null, __typename: '__Type' } },\n+                    {\n+                      name: 'equal',\n+                      type: { name: 'String', __typename: '__Type' }\n+                    },\n+                    {\n+                      name: 'isNull',\n+                      type: { name: 'Boolean', __typename: '__Type' }\n+                    }\n+                  ],\n+                  kind: 'INPUT_OBJECT',\n+                  name: 'IdArgument'\n+                }\n+              },\n+              {\n+                name: 'flight',\n+                type: {\n+                  name: 'FlightArgument',\n+                  kind: 'INPUT_OBJECT',\n+                  inputFields: [\n+                    {\n+                      name: 'arrival',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'departure',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'flightNumber',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'gate',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'seat',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    }\n+                  ]\n+                }\n+              },\n+              {\n+                name: 'hotel',\n+                type: {\n+                  name: 'HotelArgument',\n+                  kind: 'INPUT_OBJECT',\n+                  inputFields: [\n+                    {\n+                      name: 'address',\n+                      type: { name: 'AddressArgument', __typename: '__Type' }\n+                    },\n+                    {\n+                      name: 'bookingNumber',\n+                      type: { name: 'StringArgument', __typename: '__Type' }\n+                    }\n+                  ]\n+                }\n+              }\n+            ]\n+          }\n+        }\n+      }\n+    };\n+    // @ts-ignore\n+    useGetInputFieldsFromTypeQuery.mockReturnValue({\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'IdArgument',\n+          inputFields: [\n+            { name: 'in', type: { name: null, kind: 'LIST' } },\n+            { name: 'equal', type: { name: 'String', kind: 'SCALAR' } },\n+            { name: 'isNull', type: { name: 'Boolean', kind: 'SCALAR' } }\n+          ],\n+          kind: 'INPUT_OBJECT'\n+        }\n+      }\n+    });\n+    // @ts-ignore\n+    useGetInputFieldsFromQueryQuery.mockReturnValue({\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'TravelsArgument',\n+          inputFields: [\n+            {\n+              name: 'and',\n+              type: {\n+                name: null,\n+                kind: 'LIST',\n+                inputFields: null\n+              }\n+            },\n+            {\n+              name: 'or',\n+              type: {\n+                name: null,\n+                kind: 'LIST',\n+                inputFields: null\n+              }\n+            },\n+            {\n+              name: 'flight',\n+              type: {\n+                name: 'FlightArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'arrival',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'departure',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'flightNumber',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'gate',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'seat',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  }\n+                ]\n+              }\n+            },\n+            {\n+              name: 'hotel',\n+              type: {\n+                name: 'HotelArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'address',\n+                    type: {\n+                      name: 'AddressArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'bookingNumber',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'name',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'phone',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'room',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  }\n+                ]\n+              }\n+            }\n+          ]\n+        }\n+      }\n+    });\n+    const wrapper = mount(<DomainExplorerFilterOptions {...props} />);\n+    wrapper.update();\n+    wrapper.setProps({});\n+    const mGraphQLResponse = {\n+      data: {\n+        Travels: [\n+          {\n+            flight: {\n+              arrival: '2020-07-22T03:30:00.000+05:30',\n+              departure: '2020-07-07T03:30:00.000+05:30',\n+              flightNumber: 'MX555',\n+              gate: 'test',\n+              seat: 'test'\n+            },\n+            metadata: {\n+              processInstances: [\n+                {\n+                  businessKey: 'LKJD13',\n+                  id: '37bc93d0-1100-3913-85aa-a8dc253281b0',\n+                  lastUpdate: '2020-07-06T09:16:09.823Z',\n+                  processName: 'travels',\n+                  serviceUrl: 'http://localhost:8080',\n+                  start: '2020-07-06T09:16:09.58Z',\n+                  state: 'ACTIVE'\n+                },\n+                {\n+                  businessKey: null,\n+                  id: '8526d522-24f6-4d12-b975-394a0adeb8f8',\n+                  lastUpdate: '2020-07-06T09:16:09.824Z',\n+                  processName: 'HotelBooking',\n+                  serviceUrl: 'http://localhost:8080',\n+                  start: '2020-07-06T09:16:09.746Z',\n+                  state: 'COMPLETED'\n+                }\n+              ]\n+            }\n+          },\n+          {\n+            flight: {\n+              arrival: '2020-07-23T03:30:00.000+05:30',\n+              departure: '2020-07-10T03:30:00.000+05:30',\n+              flightNumber: 'MX555',\n+              gate: null,\n+              seat: null\n+            },\n+            metadata: {\n+              processInstances: [\n+                {\n+                  businessKey: '4Y0W6E',\n+                  id: 'd2b4967b-e8b1-3232-a07c-d639e08a11d4',\n+                  lastUpdate: '2020-07-06T09:16:55.621Z',\n+                  processName: 'travels',\n+                  serviceUrl: 'http://localhost:8080',\n+                  start: '2020-07-06T09:16:55.609Z',\n+                  state: 'ACTIVE'\n+                },\n+                {\n+                  businessKey: null,\n+                  id: 'cd5f6cc6-7ef4-4eb1-947b-3f53f201ab15',\n+                  lastUpdate: '2020-07-06T09:16:55.621Z',\n+                  processName: 'HotelBooking',\n+                  serviceUrl: 'http://localhost:8080',\n+                  start: '2020-07-06T09:16:55.611Z',\n+                  state: 'COMPLETED'\n+                }\n+              ]\n+            }\n+          }\n+        ]\n+      },\n+      loading: false,\n+      networkStatus: 7,\n+      stale: false\n+    };\n+    client.query.mockReturnValueOnce(mGraphQLResponse);\n+    await Promise.resolve();\n+    expect(wrapper).toMatchSnapshot();\n+  });\n+  it('Trigger onselect function on field select', async () => {\n+    const mGraphQLResponse = {\n+      data: {\n+        Travels: []\n+      },\n+      loading: false,\n+      networkStatus: 7,\n+      stale: false\n+    };\n+    client.query.mockReturnValueOnce(mGraphQLResponse);\n+    const getQueryTypes = {\n+      loading: false,\n+      data: {\n+        __schema: {\n+          queryType: [\n+            {\n+              name: 'AddressArgument',\n+              kind: 'INPUT_OBJECT',\n+              inputFields: [\n+                {\n+                  name: 'city',\n+                  type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                },\n+                {\n+                  name: 'country',\n+                  type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                },\n+                {\n+                  name: 'street',\n+                  type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                },\n+                {\n+                  name: 'zipCode',\n+                  type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                }\n+              ]\n+            },\n+            {\n+              name: 'IdArgument',\n+              kind: 'INPUT_OBJECT',\n+              inputFields: [\n+                { name: 'id', type: { name: null, kind: 'LIST' } },\n+                { name: 'equal', type: { name: 'String', kind: 'SCALAR' } },\n+                { name: 'isNull', type: { name: 'Boolean', kind: 'SCALAR' } }\n+              ]\n+            }\n+          ]\n+        }\n+      }\n+    };\n+    const wrapper = mount(\n+      <DomainExplorerFilterOptions {...{ ...defaultProps, getQueryTypes }} />\n+    );\n+    wrapper.update();\n+    wrapper.setProps({});\n+\n+    // @ts-ignore\n+    useGetInputFieldsFromQueryQuery.mockReturnValue({\n+      loading: false,\n+      data: {}\n+    });\n+    // @ts-ignore\n+    useGetInputFieldsFromTypeQuery.mockReturnValue({\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'IdArgument',\n+          inputFields: [\n+            { name: 'in', type: { name: null, kind: 'LIST' } },\n+            { name: 'equal', type: { name: 'String', kind: 'SCALAR' } },\n+            { name: 'isNull', type: { name: 'Boolean', kind: 'SCALAR' } }\n+          ],\n+          kind: 'INPUT_OBJECT'\n+        }\n+      }\n+    });\n+    const obj = {\n+      nativeEvent: {\n+        target: {\n+          parentElement: {\n+            parentElement: {\n+              getAttribute: jest.fn(() => 'id')\n+            }\n+          }\n+        }\n+      },\n+      target: {}\n+    } as any;\n+    const obj2 = {\n+      target: {\n+        innerText: 'equal'\n+      }\n+    } as any;\n+    // simulate on select prop on fields dropdown to make a selection", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYwNTQyNw=="}, "originalCommit": {"oid": "292508b1af5f894f27bfe48012fa098cb7d8c67b"}, "originalPosition": 668}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTg2MzQ1OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/tests/DomainExplorerFilterOptions.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwODoxNjowMFrOGygAuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMzoxMTo1N1rOGyqQIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYwNjQ1Ng==", "bodyText": "Again I would expect an expect after each such step.", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r455606456", "createdAt": "2020-07-16T08:16:00Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/tests/DomainExplorerFilterOptions.test.tsx", "diffHunk": "@@ -0,0 +1,1883 @@\n+import React from 'react';\n+import DomainExplorerFilterOptions from '../DomainExplorerFilterOptions';\n+import reactApollo from 'react-apollo';\n+import { GraphQL } from '../../../../graphql/types';\n+import useGetInputFieldsFromQueryQuery = GraphQL.useGetInputFieldsFromQueryQuery;\n+import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n+import Adapter from 'enzyme-adapter-react-16';\n+import { configure, mount } from 'enzyme';\n+import { act } from 'react-dom/test-utils';\n+\n+configure({ adapter: new Adapter() });\n+jest.mock('apollo-client');\n+jest.mock('react-apollo', () => {\n+  const ApolloClient = { query: jest.fn() };\n+  return { useApolloClient: jest.fn(() => ApolloClient) };\n+});\n+\n+jest.mock('../../../../graphql/types');\n+// tslint:disable: no-string-literal\n+// tslint:disable: no-unexpected-multiline\n+describe('Domain explorer filter options component tests', () => {\n+  const defaultProps = {\n+    currentDomain: 'Travels',\n+    getQuery: {\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'Query',\n+          fields: [\n+            {\n+              name: 'Travels',\n+              args: [\n+                {\n+                  name: 'where',\n+                  type: { kind: 'INPUT_OBJECT', name: 'TravelsArgument' }\n+                },\n+                {\n+                  name: 'orderBy',\n+                  type: { kind: 'INPUT_OBJECT', name: 'TravelsOrderBy' }\n+                },\n+                {\n+                  name: 'pagination',\n+                  type: { kind: 'INPUT_OBJECT', name: 'Pagination' }\n+                }\n+              ],\n+              type: {\n+                ofType: { name: 'Travels' }\n+              }\n+            }\n+          ]\n+        }\n+      }\n+    },\n+    parameters: [\n+      { flight: ['arrival'] },\n+      { flight: ['departure'] },\n+      { flight: ['gate'] },\n+      {\n+        metadata: [\n+          {\n+            processInstances: [\n+              'id',\n+              'processName',\n+              'state',\n+              'start',\n+              'lastUpdate',\n+              'businessKey'\n+            ]\n+          }\n+        ]\n+      }\n+    ],\n+    setColumnFilters: jest.fn(),\n+    setTableLoading: jest.fn(),\n+    setDisplayTable: jest.fn(),\n+    setDisplayEmptyState: jest.fn(),\n+    setFilterError: jest.fn(),\n+    filterChips: ['metadata / processInstances / state: ACTIVE'],\n+    setFilterChips: jest.fn(),\n+    runFilter: true,\n+    setRunFilter: jest.fn(),\n+    finalFilters: {\n+      metadata: {\n+        processInstances: { state: { equal: 'ACTIVE' } }\n+      },\n+      trip: {\n+        country: {\n+          equal: 'Australia'\n+        }\n+      }\n+    },\n+    argument: 'TravelsArgument',\n+    setFinalFilters: jest.fn(),\n+    getSchema: {\n+      data: {\n+        __type: {\n+          name: 'TravelsArgument',\n+          inputFields: [\n+            { name: 'and', type: { name: null, kind: 'LIST' } },\n+            { name: 'or', type: { name: null, kind: 'LIST' } },\n+            {\n+              name: 'flight',\n+              type: {\n+                name: 'FlightArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'arrival',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'departure',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'flightNumber',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'gate',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'seat',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  }\n+                ]\n+              }\n+            }\n+          ]\n+        }\n+      }\n+    },\n+    reset: false,\n+    setReset: jest.fn()\n+  };\n+  afterEach(() => {\n+    jest.clearAllMocks();\n+  });\n+  let client;\n+  let useApolloClient;\n+  let useEffect;\n+\n+  const mockUseEffect = () => {\n+    useEffect.mockImplementationOnce(f => f());\n+  };\n+\n+  const mockuseApolloClient = () => {\n+    // tslint:disable-next-line: react-hooks-nesting\n+    client = useApolloClient();\n+  };\n+\n+  beforeEach(() => {\n+    useApolloClient = jest.spyOn(reactApollo, 'useApolloClient');\n+    mockuseApolloClient();\n+    useEffect = jest.spyOn(React, 'useEffect');\n+    mockUseEffect();\n+    mockUseEffect();\n+  });\n+  it('Snapshot test with default props', async () => {\n+    const props = {\n+      reset: false,\n+      setReset: jest.fn(),\n+      currentDomain: 'Travels',\n+      getQuery: {\n+        loading: false,\n+        data: {\n+          __type: {\n+            name: 'Query',\n+            fields: [\n+              {\n+                name: 'Travels',\n+                args: [\n+                  {\n+                    name: 'where',\n+                    type: { kind: 'INPUT_OBJECT', name: 'TravelsArgument' }\n+                  },\n+                  {\n+                    name: 'orderBy',\n+                    type: { kind: 'INPUT_OBJECT', name: 'TravelsOrderBy' }\n+                  },\n+                  {\n+                    name: 'pagination',\n+                    type: { kind: 'INPUT_OBJECT', name: 'Pagination' }\n+                  }\n+                ],\n+                type: {\n+                  ofType: { name: 'Travels' }\n+                }\n+              }\n+            ]\n+          }\n+        }\n+      },\n+      parameters: [\n+        {\n+          metadata: [\n+            {\n+              processInstances: [\n+                'id',\n+                'processName',\n+                'state',\n+                'start',\n+                'lastUpdate',\n+                'businessKey'\n+              ]\n+            }\n+          ]\n+        }\n+      ],\n+      setColumnFilters: jest.fn(),\n+      setTableLoading: jest.fn(),\n+      setDisplayTable: jest.fn(),\n+      setDisplayEmptyState: jest.fn(),\n+      setFilterError: jest.fn(),\n+      getQueryTypes: {\n+        loading: false,\n+        data: {\n+          __schema: {\n+            queryType: [\n+              {\n+                name: 'TestArgument',\n+                inputFields: [\n+                  {\n+                    name: 'test',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  }\n+                ]\n+              },\n+              {\n+                name: 'AddressArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'city',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  },\n+                  {\n+                    name: 'country',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  },\n+                  {\n+                    name: 'street',\n+                    type: { name: 'TestArgument', kind: 'INPUT_OBJECT' }\n+                  },\n+                  {\n+                    name: 'zipCode',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  }\n+                ]\n+              },\n+              {\n+                name: 'IdArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  { name: 'id', type: { name: null, kind: 'LIST' } },\n+                  { name: 'equal', type: { name: 'String', kind: 'SCALAR' } },\n+                  { name: 'isNull', type: { name: 'Boolean', kind: 'SCALAR' } }\n+                ]\n+              }\n+            ]\n+          }\n+        }\n+      },\n+      filterChips: [],\n+      setFilterChips: jest.fn(),\n+      runFilter: true,\n+      setRunFilter: jest.fn(),\n+      finalFilters: {\n+        metadata: {\n+          processInstances: { state: { equal: 'ACTIVE' } }\n+        },\n+        trip: {\n+          country: {\n+            equal: 'Australia'\n+          }\n+        }\n+      },\n+      argument: 'TravelsArgument',\n+      setFinalFilters: jest.fn(),\n+      getSchema: {\n+        data: {\n+          __type: {\n+            name: 'TravelsArgument',\n+            inputFields: [\n+              { name: 'and', type: { name: null, kind: 'LIST' } },\n+              { name: 'or', type: { name: null, kind: 'LIST' } },\n+              {\n+                name: 'id',\n+                type: {\n+                  inputFields: [\n+                    { name: 'in', type: { name: null, __typename: '__Type' } },\n+                    {\n+                      name: 'equal',\n+                      type: { name: 'String', __typename: '__Type' }\n+                    },\n+                    {\n+                      name: 'isNull',\n+                      type: { name: 'Boolean', __typename: '__Type' }\n+                    }\n+                  ],\n+                  kind: 'INPUT_OBJECT',\n+                  name: 'IdArgument'\n+                }\n+              },\n+              {\n+                name: 'flight',\n+                type: {\n+                  name: 'FlightArgument',\n+                  kind: 'INPUT_OBJECT',\n+                  inputFields: [\n+                    {\n+                      name: 'arrival',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'departure',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'flightNumber',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'gate',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'seat',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    }\n+                  ]\n+                }\n+              },\n+              {\n+                name: 'hotel',\n+                type: {\n+                  name: 'HotelArgument',\n+                  kind: 'INPUT_OBJECT',\n+                  inputFields: [\n+                    {\n+                      name: 'address',\n+                      type: { name: 'AddressArgument', __typename: '__Type' }\n+                    },\n+                    {\n+                      name: 'bookingNumber',\n+                      type: { name: 'StringArgument', __typename: '__Type' }\n+                    }\n+                  ]\n+                }\n+              }\n+            ]\n+          }\n+        }\n+      }\n+    };\n+    // @ts-ignore\n+    useGetInputFieldsFromTypeQuery.mockReturnValue({\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'IdArgument',\n+          inputFields: [\n+            { name: 'in', type: { name: null, kind: 'LIST' } },\n+            { name: 'equal', type: { name: 'String', kind: 'SCALAR' } },\n+            { name: 'isNull', type: { name: 'Boolean', kind: 'SCALAR' } }\n+          ],\n+          kind: 'INPUT_OBJECT'\n+        }\n+      }\n+    });\n+    // @ts-ignore\n+    useGetInputFieldsFromQueryQuery.mockReturnValue({\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'TravelsArgument',\n+          inputFields: [\n+            {\n+              name: 'and',\n+              type: {\n+                name: null,\n+                kind: 'LIST',\n+                inputFields: null\n+              }\n+            },\n+            {\n+              name: 'or',\n+              type: {\n+                name: null,\n+                kind: 'LIST',\n+                inputFields: null\n+              }\n+            },\n+            {\n+              name: 'flight',\n+              type: {\n+                name: 'FlightArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'arrival',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'departure',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'flightNumber',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'gate',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'seat',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  }\n+                ]\n+              }\n+            },\n+            {\n+              name: 'hotel',\n+              type: {\n+                name: 'HotelArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'address',\n+                    type: {\n+                      name: 'AddressArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'bookingNumber',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'name',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'phone',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'room',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  }\n+                ]\n+              }\n+            }\n+          ]\n+        }\n+      }\n+    });\n+    const wrapper = mount(<DomainExplorerFilterOptions {...props} />);\n+    wrapper.update();\n+    wrapper.setProps({});\n+    const mGraphQLResponse = {\n+      data: {\n+        Travels: [\n+          {\n+            flight: {\n+              arrival: '2020-07-22T03:30:00.000+05:30',\n+              departure: '2020-07-07T03:30:00.000+05:30',\n+              flightNumber: 'MX555',\n+              gate: 'test',\n+              seat: 'test'\n+            },\n+            metadata: {\n+              processInstances: [\n+                {\n+                  businessKey: 'LKJD13',\n+                  id: '37bc93d0-1100-3913-85aa-a8dc253281b0',\n+                  lastUpdate: '2020-07-06T09:16:09.823Z',\n+                  processName: 'travels',\n+                  serviceUrl: 'http://localhost:8080',\n+                  start: '2020-07-06T09:16:09.58Z',\n+                  state: 'ACTIVE'\n+                },\n+                {\n+                  businessKey: null,\n+                  id: '8526d522-24f6-4d12-b975-394a0adeb8f8',\n+                  lastUpdate: '2020-07-06T09:16:09.824Z',\n+                  processName: 'HotelBooking',\n+                  serviceUrl: 'http://localhost:8080',\n+                  start: '2020-07-06T09:16:09.746Z',\n+                  state: 'COMPLETED'\n+                }\n+              ]\n+            }\n+          },\n+          {\n+            flight: {\n+              arrival: '2020-07-23T03:30:00.000+05:30',\n+              departure: '2020-07-10T03:30:00.000+05:30',\n+              flightNumber: 'MX555',\n+              gate: null,\n+              seat: null\n+            },\n+            metadata: {\n+              processInstances: [\n+                {\n+                  businessKey: '4Y0W6E',\n+                  id: 'd2b4967b-e8b1-3232-a07c-d639e08a11d4',\n+                  lastUpdate: '2020-07-06T09:16:55.621Z',\n+                  processName: 'travels',\n+                  serviceUrl: 'http://localhost:8080',\n+                  start: '2020-07-06T09:16:55.609Z',\n+                  state: 'ACTIVE'\n+                },\n+                {\n+                  businessKey: null,\n+                  id: 'cd5f6cc6-7ef4-4eb1-947b-3f53f201ab15',\n+                  lastUpdate: '2020-07-06T09:16:55.621Z',\n+                  processName: 'HotelBooking',\n+                  serviceUrl: 'http://localhost:8080',\n+                  start: '2020-07-06T09:16:55.611Z',\n+                  state: 'COMPLETED'\n+                }\n+              ]\n+            }\n+          }\n+        ]\n+      },\n+      loading: false,\n+      networkStatus: 7,\n+      stale: false\n+    };\n+    client.query.mockReturnValueOnce(mGraphQLResponse);\n+    await Promise.resolve();\n+    expect(wrapper).toMatchSnapshot();\n+  });\n+  it('Trigger onselect function on field select', async () => {\n+    const mGraphQLResponse = {\n+      data: {\n+        Travels: []\n+      },\n+      loading: false,\n+      networkStatus: 7,\n+      stale: false\n+    };\n+    client.query.mockReturnValueOnce(mGraphQLResponse);\n+    const getQueryTypes = {\n+      loading: false,\n+      data: {\n+        __schema: {\n+          queryType: [\n+            {\n+              name: 'AddressArgument',\n+              kind: 'INPUT_OBJECT',\n+              inputFields: [\n+                {\n+                  name: 'city',\n+                  type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                },\n+                {\n+                  name: 'country',\n+                  type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                },\n+                {\n+                  name: 'street',\n+                  type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                },\n+                {\n+                  name: 'zipCode',\n+                  type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                }\n+              ]\n+            },\n+            {\n+              name: 'IdArgument',\n+              kind: 'INPUT_OBJECT',\n+              inputFields: [\n+                { name: 'id', type: { name: null, kind: 'LIST' } },\n+                { name: 'equal', type: { name: 'String', kind: 'SCALAR' } },\n+                { name: 'isNull', type: { name: 'Boolean', kind: 'SCALAR' } }\n+              ]\n+            }\n+          ]\n+        }\n+      }\n+    };\n+    const wrapper = mount(\n+      <DomainExplorerFilterOptions {...{ ...defaultProps, getQueryTypes }} />\n+    );\n+    wrapper.update();\n+    wrapper.setProps({});\n+\n+    // @ts-ignore\n+    useGetInputFieldsFromQueryQuery.mockReturnValue({\n+      loading: false,\n+      data: {}\n+    });\n+    // @ts-ignore\n+    useGetInputFieldsFromTypeQuery.mockReturnValue({\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'IdArgument',\n+          inputFields: [\n+            { name: 'in', type: { name: null, kind: 'LIST' } },\n+            { name: 'equal', type: { name: 'String', kind: 'SCALAR' } },\n+            { name: 'isNull', type: { name: 'Boolean', kind: 'SCALAR' } }\n+          ],\n+          kind: 'INPUT_OBJECT'\n+        }\n+      }\n+    });\n+    const obj = {\n+      nativeEvent: {\n+        target: {\n+          parentElement: {\n+            parentElement: {\n+              getAttribute: jest.fn(() => 'id')\n+            }\n+          }\n+        }\n+      },\n+      target: {}\n+    } as any;\n+    const obj2 = {\n+      target: {\n+        innerText: 'equal'\n+      }\n+    } as any;\n+    // simulate on select prop on fields dropdown to make a selection\n+    act(() => {\n+      wrapper\n+        .find('#select-field')\n+        .first()\n+        .props()\n+        ['onSelect'](obj);\n+    });\n+    // simulate on clear prop on fields dropdown\n+    act(() => {\n+      wrapper\n+        .find('#select-field')\n+        .first()\n+        .props()\n+        ['onClear']();\n+    });\n+    // simulate dropdown to select an operator\n+    act(() => {\n+      wrapper\n+        .find('#select-operator')\n+        .first()\n+        .props()\n+        ['onSelect'](obj2);\n+    });\n+    // check input textbox when the operator is either \"equal\" or \"like\"\n+    wrapper\n+      .update()\n+      .find('input')\n+      .at(1)\n+      .simulate('change', 'Hello');\n+    // trigger button click after setting isDisable false on button\n+    act(() => {\n+      wrapper\n+        .find('#button-with-string')\n+        .at(2)\n+        .props()['isDisabled'] = false;\n+      wrapper\n+        .find('#button-with-string')\n+        .at(2)\n+        .props()['disabled'] = false;\n+      const event = {} as React.MouseEvent<HTMLButtonElement, MouseEvent>;\n+      wrapper\n+        .find('#button-with-string')\n+        .at(2)\n+        .props()\n+        ['onClick'](event);\n+    });\n+    await Promise.resolve();\n+    expect(wrapper.find('input')).toBeTruthy();\n+    expect(wrapper.find('#button-with-string')).toBeTruthy();\n+  });\n+  it('check \"in\" operator', async () => {\n+    const getQueryTypes = {\n+      loading: false,\n+      data: {\n+        __schema: {\n+          queryType: [\n+            {\n+              name: 'AddressArgument',\n+              kind: 'INPUT_OBJECT',\n+              inputFields: [\n+                {\n+                  name: 'city',\n+                  type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                },\n+                {\n+                  name: 'country',\n+                  type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                },\n+                {\n+                  name: 'street',\n+                  type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                },\n+                {\n+                  name: 'zipCode',\n+                  type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                }\n+              ]\n+            },\n+            {\n+              name: 'IdArgument',\n+              kind: 'INPUT_OBJECT',\n+              inputFields: [\n+                { name: 'id', type: { name: null, kind: 'LIST' } },\n+                { name: 'equal', type: { name: 'String', kind: 'SCALAR' } },\n+                { name: 'isNull', type: { name: 'Boolean', kind: 'SCALAR' } }\n+              ]\n+            }\n+          ]\n+        }\n+      }\n+    };\n+    const wrapper = mount(\n+      <DomainExplorerFilterOptions {...{ ...defaultProps, getQueryTypes }} />\n+    );\n+    wrapper.update();\n+    wrapper.setProps({});\n+    // @ts-ignore\n+    useGetInputFieldsFromQueryQuery.mockReturnValue({\n+      loading: false,\n+      data: {}\n+    });\n+    // @ts-ignore\n+    useGetInputFieldsFromTypeQuery.mockReturnValue({\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'IdArgument',\n+          inputFields: [\n+            { name: 'in', type: { name: null, kind: 'LIST' } },\n+            { name: 'equal', type: { name: 'String', kind: 'SCALAR' } },\n+            { name: 'isNull', type: { name: 'Boolean', kind: 'SCALAR' } }\n+          ],\n+          kind: 'INPUT_OBJECT'\n+        }\n+      }\n+    });\n+    const obj = {\n+      nativeEvent: {\n+        target: {\n+          parentElement: {\n+            parentElement: {\n+              getAttribute: jest.fn(() => 'id')\n+            }\n+          }\n+        }\n+      },\n+      target: {\n+        textContent: 'id'\n+      }\n+    } as any;\n+    const obj2 = {\n+      target: {\n+        innerText: 'in'\n+      }\n+    } as any;\n+    // simulate on select prop on fields dropdown to make a selection", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "292508b1af5f894f27bfe48012fa098cb7d8c67b"}, "originalPosition": 804}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc3NDI0MA==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r455774240", "createdAt": "2020-07-16T13:11:57Z", "author": {"login": "Sara4994"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/tests/DomainExplorerFilterOptions.test.tsx", "diffHunk": "@@ -0,0 +1,1883 @@\n+import React from 'react';\n+import DomainExplorerFilterOptions from '../DomainExplorerFilterOptions';\n+import reactApollo from 'react-apollo';\n+import { GraphQL } from '../../../../graphql/types';\n+import useGetInputFieldsFromQueryQuery = GraphQL.useGetInputFieldsFromQueryQuery;\n+import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n+import Adapter from 'enzyme-adapter-react-16';\n+import { configure, mount } from 'enzyme';\n+import { act } from 'react-dom/test-utils';\n+\n+configure({ adapter: new Adapter() });\n+jest.mock('apollo-client');\n+jest.mock('react-apollo', () => {\n+  const ApolloClient = { query: jest.fn() };\n+  return { useApolloClient: jest.fn(() => ApolloClient) };\n+});\n+\n+jest.mock('../../../../graphql/types');\n+// tslint:disable: no-string-literal\n+// tslint:disable: no-unexpected-multiline\n+describe('Domain explorer filter options component tests', () => {\n+  const defaultProps = {\n+    currentDomain: 'Travels',\n+    getQuery: {\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'Query',\n+          fields: [\n+            {\n+              name: 'Travels',\n+              args: [\n+                {\n+                  name: 'where',\n+                  type: { kind: 'INPUT_OBJECT', name: 'TravelsArgument' }\n+                },\n+                {\n+                  name: 'orderBy',\n+                  type: { kind: 'INPUT_OBJECT', name: 'TravelsOrderBy' }\n+                },\n+                {\n+                  name: 'pagination',\n+                  type: { kind: 'INPUT_OBJECT', name: 'Pagination' }\n+                }\n+              ],\n+              type: {\n+                ofType: { name: 'Travels' }\n+              }\n+            }\n+          ]\n+        }\n+      }\n+    },\n+    parameters: [\n+      { flight: ['arrival'] },\n+      { flight: ['departure'] },\n+      { flight: ['gate'] },\n+      {\n+        metadata: [\n+          {\n+            processInstances: [\n+              'id',\n+              'processName',\n+              'state',\n+              'start',\n+              'lastUpdate',\n+              'businessKey'\n+            ]\n+          }\n+        ]\n+      }\n+    ],\n+    setColumnFilters: jest.fn(),\n+    setTableLoading: jest.fn(),\n+    setDisplayTable: jest.fn(),\n+    setDisplayEmptyState: jest.fn(),\n+    setFilterError: jest.fn(),\n+    filterChips: ['metadata / processInstances / state: ACTIVE'],\n+    setFilterChips: jest.fn(),\n+    runFilter: true,\n+    setRunFilter: jest.fn(),\n+    finalFilters: {\n+      metadata: {\n+        processInstances: { state: { equal: 'ACTIVE' } }\n+      },\n+      trip: {\n+        country: {\n+          equal: 'Australia'\n+        }\n+      }\n+    },\n+    argument: 'TravelsArgument',\n+    setFinalFilters: jest.fn(),\n+    getSchema: {\n+      data: {\n+        __type: {\n+          name: 'TravelsArgument',\n+          inputFields: [\n+            { name: 'and', type: { name: null, kind: 'LIST' } },\n+            { name: 'or', type: { name: null, kind: 'LIST' } },\n+            {\n+              name: 'flight',\n+              type: {\n+                name: 'FlightArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'arrival',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'departure',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'flightNumber',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'gate',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'seat',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  }\n+                ]\n+              }\n+            }\n+          ]\n+        }\n+      }\n+    },\n+    reset: false,\n+    setReset: jest.fn()\n+  };\n+  afterEach(() => {\n+    jest.clearAllMocks();\n+  });\n+  let client;\n+  let useApolloClient;\n+  let useEffect;\n+\n+  const mockUseEffect = () => {\n+    useEffect.mockImplementationOnce(f => f());\n+  };\n+\n+  const mockuseApolloClient = () => {\n+    // tslint:disable-next-line: react-hooks-nesting\n+    client = useApolloClient();\n+  };\n+\n+  beforeEach(() => {\n+    useApolloClient = jest.spyOn(reactApollo, 'useApolloClient');\n+    mockuseApolloClient();\n+    useEffect = jest.spyOn(React, 'useEffect');\n+    mockUseEffect();\n+    mockUseEffect();\n+  });\n+  it('Snapshot test with default props', async () => {\n+    const props = {\n+      reset: false,\n+      setReset: jest.fn(),\n+      currentDomain: 'Travels',\n+      getQuery: {\n+        loading: false,\n+        data: {\n+          __type: {\n+            name: 'Query',\n+            fields: [\n+              {\n+                name: 'Travels',\n+                args: [\n+                  {\n+                    name: 'where',\n+                    type: { kind: 'INPUT_OBJECT', name: 'TravelsArgument' }\n+                  },\n+                  {\n+                    name: 'orderBy',\n+                    type: { kind: 'INPUT_OBJECT', name: 'TravelsOrderBy' }\n+                  },\n+                  {\n+                    name: 'pagination',\n+                    type: { kind: 'INPUT_OBJECT', name: 'Pagination' }\n+                  }\n+                ],\n+                type: {\n+                  ofType: { name: 'Travels' }\n+                }\n+              }\n+            ]\n+          }\n+        }\n+      },\n+      parameters: [\n+        {\n+          metadata: [\n+            {\n+              processInstances: [\n+                'id',\n+                'processName',\n+                'state',\n+                'start',\n+                'lastUpdate',\n+                'businessKey'\n+              ]\n+            }\n+          ]\n+        }\n+      ],\n+      setColumnFilters: jest.fn(),\n+      setTableLoading: jest.fn(),\n+      setDisplayTable: jest.fn(),\n+      setDisplayEmptyState: jest.fn(),\n+      setFilterError: jest.fn(),\n+      getQueryTypes: {\n+        loading: false,\n+        data: {\n+          __schema: {\n+            queryType: [\n+              {\n+                name: 'TestArgument',\n+                inputFields: [\n+                  {\n+                    name: 'test',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  }\n+                ]\n+              },\n+              {\n+                name: 'AddressArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'city',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  },\n+                  {\n+                    name: 'country',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  },\n+                  {\n+                    name: 'street',\n+                    type: { name: 'TestArgument', kind: 'INPUT_OBJECT' }\n+                  },\n+                  {\n+                    name: 'zipCode',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  }\n+                ]\n+              },\n+              {\n+                name: 'IdArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  { name: 'id', type: { name: null, kind: 'LIST' } },\n+                  { name: 'equal', type: { name: 'String', kind: 'SCALAR' } },\n+                  { name: 'isNull', type: { name: 'Boolean', kind: 'SCALAR' } }\n+                ]\n+              }\n+            ]\n+          }\n+        }\n+      },\n+      filterChips: [],\n+      setFilterChips: jest.fn(),\n+      runFilter: true,\n+      setRunFilter: jest.fn(),\n+      finalFilters: {\n+        metadata: {\n+          processInstances: { state: { equal: 'ACTIVE' } }\n+        },\n+        trip: {\n+          country: {\n+            equal: 'Australia'\n+          }\n+        }\n+      },\n+      argument: 'TravelsArgument',\n+      setFinalFilters: jest.fn(),\n+      getSchema: {\n+        data: {\n+          __type: {\n+            name: 'TravelsArgument',\n+            inputFields: [\n+              { name: 'and', type: { name: null, kind: 'LIST' } },\n+              { name: 'or', type: { name: null, kind: 'LIST' } },\n+              {\n+                name: 'id',\n+                type: {\n+                  inputFields: [\n+                    { name: 'in', type: { name: null, __typename: '__Type' } },\n+                    {\n+                      name: 'equal',\n+                      type: { name: 'String', __typename: '__Type' }\n+                    },\n+                    {\n+                      name: 'isNull',\n+                      type: { name: 'Boolean', __typename: '__Type' }\n+                    }\n+                  ],\n+                  kind: 'INPUT_OBJECT',\n+                  name: 'IdArgument'\n+                }\n+              },\n+              {\n+                name: 'flight',\n+                type: {\n+                  name: 'FlightArgument',\n+                  kind: 'INPUT_OBJECT',\n+                  inputFields: [\n+                    {\n+                      name: 'arrival',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'departure',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'flightNumber',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'gate',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'seat',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    }\n+                  ]\n+                }\n+              },\n+              {\n+                name: 'hotel',\n+                type: {\n+                  name: 'HotelArgument',\n+                  kind: 'INPUT_OBJECT',\n+                  inputFields: [\n+                    {\n+                      name: 'address',\n+                      type: { name: 'AddressArgument', __typename: '__Type' }\n+                    },\n+                    {\n+                      name: 'bookingNumber',\n+                      type: { name: 'StringArgument', __typename: '__Type' }\n+                    }\n+                  ]\n+                }\n+              }\n+            ]\n+          }\n+        }\n+      }\n+    };\n+    // @ts-ignore\n+    useGetInputFieldsFromTypeQuery.mockReturnValue({\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'IdArgument',\n+          inputFields: [\n+            { name: 'in', type: { name: null, kind: 'LIST' } },\n+            { name: 'equal', type: { name: 'String', kind: 'SCALAR' } },\n+            { name: 'isNull', type: { name: 'Boolean', kind: 'SCALAR' } }\n+          ],\n+          kind: 'INPUT_OBJECT'\n+        }\n+      }\n+    });\n+    // @ts-ignore\n+    useGetInputFieldsFromQueryQuery.mockReturnValue({\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'TravelsArgument',\n+          inputFields: [\n+            {\n+              name: 'and',\n+              type: {\n+                name: null,\n+                kind: 'LIST',\n+                inputFields: null\n+              }\n+            },\n+            {\n+              name: 'or',\n+              type: {\n+                name: null,\n+                kind: 'LIST',\n+                inputFields: null\n+              }\n+            },\n+            {\n+              name: 'flight',\n+              type: {\n+                name: 'FlightArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'arrival',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'departure',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'flightNumber',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'gate',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'seat',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  }\n+                ]\n+              }\n+            },\n+            {\n+              name: 'hotel',\n+              type: {\n+                name: 'HotelArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'address',\n+                    type: {\n+                      name: 'AddressArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'bookingNumber',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'name',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'phone',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'room',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  }\n+                ]\n+              }\n+            }\n+          ]\n+        }\n+      }\n+    });\n+    const wrapper = mount(<DomainExplorerFilterOptions {...props} />);\n+    wrapper.update();\n+    wrapper.setProps({});\n+    const mGraphQLResponse = {\n+      data: {\n+        Travels: [\n+          {\n+            flight: {\n+              arrival: '2020-07-22T03:30:00.000+05:30',\n+              departure: '2020-07-07T03:30:00.000+05:30',\n+              flightNumber: 'MX555',\n+              gate: 'test',\n+              seat: 'test'\n+            },\n+            metadata: {\n+              processInstances: [\n+                {\n+                  businessKey: 'LKJD13',\n+                  id: '37bc93d0-1100-3913-85aa-a8dc253281b0',\n+                  lastUpdate: '2020-07-06T09:16:09.823Z',\n+                  processName: 'travels',\n+                  serviceUrl: 'http://localhost:8080',\n+                  start: '2020-07-06T09:16:09.58Z',\n+                  state: 'ACTIVE'\n+                },\n+                {\n+                  businessKey: null,\n+                  id: '8526d522-24f6-4d12-b975-394a0adeb8f8',\n+                  lastUpdate: '2020-07-06T09:16:09.824Z',\n+                  processName: 'HotelBooking',\n+                  serviceUrl: 'http://localhost:8080',\n+                  start: '2020-07-06T09:16:09.746Z',\n+                  state: 'COMPLETED'\n+                }\n+              ]\n+            }\n+          },\n+          {\n+            flight: {\n+              arrival: '2020-07-23T03:30:00.000+05:30',\n+              departure: '2020-07-10T03:30:00.000+05:30',\n+              flightNumber: 'MX555',\n+              gate: null,\n+              seat: null\n+            },\n+            metadata: {\n+              processInstances: [\n+                {\n+                  businessKey: '4Y0W6E',\n+                  id: 'd2b4967b-e8b1-3232-a07c-d639e08a11d4',\n+                  lastUpdate: '2020-07-06T09:16:55.621Z',\n+                  processName: 'travels',\n+                  serviceUrl: 'http://localhost:8080',\n+                  start: '2020-07-06T09:16:55.609Z',\n+                  state: 'ACTIVE'\n+                },\n+                {\n+                  businessKey: null,\n+                  id: 'cd5f6cc6-7ef4-4eb1-947b-3f53f201ab15',\n+                  lastUpdate: '2020-07-06T09:16:55.621Z',\n+                  processName: 'HotelBooking',\n+                  serviceUrl: 'http://localhost:8080',\n+                  start: '2020-07-06T09:16:55.611Z',\n+                  state: 'COMPLETED'\n+                }\n+              ]\n+            }\n+          }\n+        ]\n+      },\n+      loading: false,\n+      networkStatus: 7,\n+      stale: false\n+    };\n+    client.query.mockReturnValueOnce(mGraphQLResponse);\n+    await Promise.resolve();\n+    expect(wrapper).toMatchSnapshot();\n+  });\n+  it('Trigger onselect function on field select', async () => {\n+    const mGraphQLResponse = {\n+      data: {\n+        Travels: []\n+      },\n+      loading: false,\n+      networkStatus: 7,\n+      stale: false\n+    };\n+    client.query.mockReturnValueOnce(mGraphQLResponse);\n+    const getQueryTypes = {\n+      loading: false,\n+      data: {\n+        __schema: {\n+          queryType: [\n+            {\n+              name: 'AddressArgument',\n+              kind: 'INPUT_OBJECT',\n+              inputFields: [\n+                {\n+                  name: 'city',\n+                  type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                },\n+                {\n+                  name: 'country',\n+                  type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                },\n+                {\n+                  name: 'street',\n+                  type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                },\n+                {\n+                  name: 'zipCode',\n+                  type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                }\n+              ]\n+            },\n+            {\n+              name: 'IdArgument',\n+              kind: 'INPUT_OBJECT',\n+              inputFields: [\n+                { name: 'id', type: { name: null, kind: 'LIST' } },\n+                { name: 'equal', type: { name: 'String', kind: 'SCALAR' } },\n+                { name: 'isNull', type: { name: 'Boolean', kind: 'SCALAR' } }\n+              ]\n+            }\n+          ]\n+        }\n+      }\n+    };\n+    const wrapper = mount(\n+      <DomainExplorerFilterOptions {...{ ...defaultProps, getQueryTypes }} />\n+    );\n+    wrapper.update();\n+    wrapper.setProps({});\n+\n+    // @ts-ignore\n+    useGetInputFieldsFromQueryQuery.mockReturnValue({\n+      loading: false,\n+      data: {}\n+    });\n+    // @ts-ignore\n+    useGetInputFieldsFromTypeQuery.mockReturnValue({\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'IdArgument',\n+          inputFields: [\n+            { name: 'in', type: { name: null, kind: 'LIST' } },\n+            { name: 'equal', type: { name: 'String', kind: 'SCALAR' } },\n+            { name: 'isNull', type: { name: 'Boolean', kind: 'SCALAR' } }\n+          ],\n+          kind: 'INPUT_OBJECT'\n+        }\n+      }\n+    });\n+    const obj = {\n+      nativeEvent: {\n+        target: {\n+          parentElement: {\n+            parentElement: {\n+              getAttribute: jest.fn(() => 'id')\n+            }\n+          }\n+        }\n+      },\n+      target: {}\n+    } as any;\n+    const obj2 = {\n+      target: {\n+        innerText: 'equal'\n+      }\n+    } as any;\n+    // simulate on select prop on fields dropdown to make a selection\n+    act(() => {\n+      wrapper\n+        .find('#select-field')\n+        .first()\n+        .props()\n+        ['onSelect'](obj);\n+    });\n+    // simulate on clear prop on fields dropdown\n+    act(() => {\n+      wrapper\n+        .find('#select-field')\n+        .first()\n+        .props()\n+        ['onClear']();\n+    });\n+    // simulate dropdown to select an operator\n+    act(() => {\n+      wrapper\n+        .find('#select-operator')\n+        .first()\n+        .props()\n+        ['onSelect'](obj2);\n+    });\n+    // check input textbox when the operator is either \"equal\" or \"like\"\n+    wrapper\n+      .update()\n+      .find('input')\n+      .at(1)\n+      .simulate('change', 'Hello');\n+    // trigger button click after setting isDisable false on button\n+    act(() => {\n+      wrapper\n+        .find('#button-with-string')\n+        .at(2)\n+        .props()['isDisabled'] = false;\n+      wrapper\n+        .find('#button-with-string')\n+        .at(2)\n+        .props()['disabled'] = false;\n+      const event = {} as React.MouseEvent<HTMLButtonElement, MouseEvent>;\n+      wrapper\n+        .find('#button-with-string')\n+        .at(2)\n+        .props()\n+        ['onClick'](event);\n+    });\n+    await Promise.resolve();\n+    expect(wrapper.find('input')).toBeTruthy();\n+    expect(wrapper.find('#button-with-string')).toBeTruthy();\n+  });\n+  it('check \"in\" operator', async () => {\n+    const getQueryTypes = {\n+      loading: false,\n+      data: {\n+        __schema: {\n+          queryType: [\n+            {\n+              name: 'AddressArgument',\n+              kind: 'INPUT_OBJECT',\n+              inputFields: [\n+                {\n+                  name: 'city',\n+                  type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                },\n+                {\n+                  name: 'country',\n+                  type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                },\n+                {\n+                  name: 'street',\n+                  type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                },\n+                {\n+                  name: 'zipCode',\n+                  type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                }\n+              ]\n+            },\n+            {\n+              name: 'IdArgument',\n+              kind: 'INPUT_OBJECT',\n+              inputFields: [\n+                { name: 'id', type: { name: null, kind: 'LIST' } },\n+                { name: 'equal', type: { name: 'String', kind: 'SCALAR' } },\n+                { name: 'isNull', type: { name: 'Boolean', kind: 'SCALAR' } }\n+              ]\n+            }\n+          ]\n+        }\n+      }\n+    };\n+    const wrapper = mount(\n+      <DomainExplorerFilterOptions {...{ ...defaultProps, getQueryTypes }} />\n+    );\n+    wrapper.update();\n+    wrapper.setProps({});\n+    // @ts-ignore\n+    useGetInputFieldsFromQueryQuery.mockReturnValue({\n+      loading: false,\n+      data: {}\n+    });\n+    // @ts-ignore\n+    useGetInputFieldsFromTypeQuery.mockReturnValue({\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'IdArgument',\n+          inputFields: [\n+            { name: 'in', type: { name: null, kind: 'LIST' } },\n+            { name: 'equal', type: { name: 'String', kind: 'SCALAR' } },\n+            { name: 'isNull', type: { name: 'Boolean', kind: 'SCALAR' } }\n+          ],\n+          kind: 'INPUT_OBJECT'\n+        }\n+      }\n+    });\n+    const obj = {\n+      nativeEvent: {\n+        target: {\n+          parentElement: {\n+            parentElement: {\n+              getAttribute: jest.fn(() => 'id')\n+            }\n+          }\n+        }\n+      },\n+      target: {\n+        textContent: 'id'\n+      }\n+    } as any;\n+    const obj2 = {\n+      target: {\n+        innerText: 'in'\n+      }\n+    } as any;\n+    // simulate on select prop on fields dropdown to make a selection", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYwNjQ1Ng=="}, "originalCommit": {"oid": "292508b1af5f894f27bfe48012fa098cb7d8c67b"}, "originalPosition": 804}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MTg4MDQ0OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/tests/__snapshots__/DomainExplorerFilterOptions.test.tsx.snap", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQwODoxOTo0M1rOGygL-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMDoyNToxNFrOGykyfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYwOTMzOQ==", "bodyText": "we could mock the icon.", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r455609339", "createdAt": "2020-07-16T08:19:43Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/tests/__snapshots__/DomainExplorerFilterOptions.test.tsx.snap", "diffHunk": "@@ -0,0 +1,1040 @@\n+// Jest Snapshot v1, https://goo.gl/fbAQLP\n+\n+exports[`Domain explorer filter options component tests Snapshot test with default props 1`] = `\n+<Memo(DomainExplorerFilterOptions)\n+  argument=\"TravelsArgument\"\n+  currentDomain=\"Travels\"\n+  filterChips={Array []}\n+  finalFilters={\n+    Object {\n+      \"metadata\": Object {\n+        \"processInstances\": Object {\n+          \"state\": Object {\n+            \"equal\": \"ACTIVE\",\n+          },\n+        },\n+      },\n+      \"trip\": Object {\n+        \"country\": Object {\n+          \"equal\": \"Australia\",\n+        },\n+      },\n+    }\n+  }\n+  getQuery={\n+    Object {\n+      \"data\": Object {\n+        \"__type\": Object {\n+          \"fields\": Array [\n+            Object {\n+              \"args\": Array [\n+                Object {\n+                  \"name\": \"where\",\n+                  \"type\": Object {\n+                    \"kind\": \"INPUT_OBJECT\",\n+                    \"name\": \"TravelsArgument\",\n+                  },\n+                },\n+                Object {\n+                  \"name\": \"orderBy\",\n+                  \"type\": Object {\n+                    \"kind\": \"INPUT_OBJECT\",\n+                    \"name\": \"TravelsOrderBy\",\n+                  },\n+                },\n+                Object {\n+                  \"name\": \"pagination\",\n+                  \"type\": Object {\n+                    \"kind\": \"INPUT_OBJECT\",\n+                    \"name\": \"Pagination\",\n+                  },\n+                },\n+              ],\n+              \"name\": \"Travels\",\n+              \"type\": Object {\n+                \"ofType\": Object {\n+                  \"name\": \"Travels\",\n+                },\n+              },\n+            },\n+          ],\n+          \"name\": \"Query\",\n+        },\n+      },\n+      \"loading\": false,\n+    }\n+  }\n+  getQueryTypes={\n+    Object {\n+      \"data\": Object {\n+        \"__schema\": Object {\n+          \"queryType\": Array [\n+            Object {\n+              \"inputFields\": Array [\n+                Object {\n+                  \"name\": \"test\",\n+                  \"type\": Object {\n+                    \"kind\": \"INPUT_OBJECT\",\n+                    \"name\": \"StringArgument\",\n+                  },\n+                },\n+              ],\n+              \"name\": \"TestArgument\",\n+            },\n+            Object {\n+              \"inputFields\": Array [\n+                Object {\n+                  \"name\": \"city\",\n+                  \"type\": Object {\n+                    \"kind\": \"INPUT_OBJECT\",\n+                    \"name\": \"StringArgument\",\n+                  },\n+                },\n+                Object {\n+                  \"name\": \"country\",\n+                  \"type\": Object {\n+                    \"kind\": \"INPUT_OBJECT\",\n+                    \"name\": \"StringArgument\",\n+                  },\n+                },\n+                Object {\n+                  \"name\": \"street\",\n+                  \"type\": Object {\n+                    \"kind\": \"INPUT_OBJECT\",\n+                    \"name\": \"TestArgument\",\n+                  },\n+                },\n+                Object {\n+                  \"name\": \"zipCode\",\n+                  \"type\": Object {\n+                    \"kind\": \"INPUT_OBJECT\",\n+                    \"name\": \"StringArgument\",\n+                  },\n+                },\n+              ],\n+              \"kind\": \"INPUT_OBJECT\",\n+              \"name\": \"AddressArgument\",\n+            },\n+            Object {\n+              \"inputFields\": Array [\n+                Object {\n+                  \"name\": \"id\",\n+                  \"type\": Object {\n+                    \"kind\": \"LIST\",\n+                    \"name\": null,\n+                  },\n+                },\n+                Object {\n+                  \"name\": \"equal\",\n+                  \"type\": Object {\n+                    \"kind\": \"SCALAR\",\n+                    \"name\": \"String\",\n+                  },\n+                },\n+                Object {\n+                  \"name\": \"isNull\",\n+                  \"type\": Object {\n+                    \"kind\": \"SCALAR\",\n+                    \"name\": \"Boolean\",\n+                  },\n+                },\n+              ],\n+              \"kind\": \"INPUT_OBJECT\",\n+              \"name\": \"IdArgument\",\n+            },\n+          ],\n+        },\n+      },\n+      \"loading\": false,\n+    }\n+  }\n+  getSchema={\n+    Object {\n+      \"data\": Object {\n+        \"__type\": Object {\n+          \"inputFields\": Array [\n+            Object {\n+              \"name\": \"and\",\n+              \"type\": Object {\n+                \"kind\": \"LIST\",\n+                \"name\": null,\n+              },\n+            },\n+            Object {\n+              \"name\": \"or\",\n+              \"type\": Object {\n+                \"kind\": \"LIST\",\n+                \"name\": null,\n+              },\n+            },\n+            Object {\n+              \"name\": \"id\",\n+              \"type\": Object {\n+                \"inputFields\": Array [\n+                  Object {\n+                    \"name\": \"in\",\n+                    \"type\": Object {\n+                      \"__typename\": \"__Type\",\n+                      \"name\": null,\n+                    },\n+                  },\n+                  Object {\n+                    \"name\": \"equal\",\n+                    \"type\": Object {\n+                      \"__typename\": \"__Type\",\n+                      \"name\": \"String\",\n+                    },\n+                  },\n+                  Object {\n+                    \"name\": \"isNull\",\n+                    \"type\": Object {\n+                      \"__typename\": \"__Type\",\n+                      \"name\": \"Boolean\",\n+                    },\n+                  },\n+                ],\n+                \"kind\": \"INPUT_OBJECT\",\n+                \"name\": \"IdArgument\",\n+              },\n+            },\n+            Object {\n+              \"name\": \"flight\",\n+              \"type\": Object {\n+                \"inputFields\": Array [\n+                  Object {\n+                    \"name\": \"arrival\",\n+                    \"type\": Object {\n+                      \"name\": \"StringArgument\",\n+                    },\n+                  },\n+                  Object {\n+                    \"name\": \"departure\",\n+                    \"type\": Object {\n+                      \"name\": \"StringArgument\",\n+                    },\n+                  },\n+                  Object {\n+                    \"name\": \"flightNumber\",\n+                    \"type\": Object {\n+                      \"name\": \"StringArgument\",\n+                    },\n+                  },\n+                  Object {\n+                    \"name\": \"gate\",\n+                    \"type\": Object {\n+                      \"name\": \"StringArgument\",\n+                    },\n+                  },\n+                  Object {\n+                    \"name\": \"seat\",\n+                    \"type\": Object {\n+                      \"name\": \"StringArgument\",\n+                    },\n+                  },\n+                ],\n+                \"kind\": \"INPUT_OBJECT\",\n+                \"name\": \"FlightArgument\",\n+              },\n+            },\n+            Object {\n+              \"name\": \"hotel\",\n+              \"type\": Object {\n+                \"inputFields\": Array [\n+                  Object {\n+                    \"name\": \"address\",\n+                    \"type\": Object {\n+                      \"__typename\": \"__Type\",\n+                      \"name\": \"AddressArgument\",\n+                    },\n+                  },\n+                  Object {\n+                    \"name\": \"bookingNumber\",\n+                    \"type\": Object {\n+                      \"__typename\": \"__Type\",\n+                      \"name\": \"StringArgument\",\n+                    },\n+                  },\n+                ],\n+                \"kind\": \"INPUT_OBJECT\",\n+                \"name\": \"HotelArgument\",\n+              },\n+            },\n+          ],\n+          \"name\": \"TravelsArgument\",\n+        },\n+      },\n+    }\n+  }\n+  parameters={\n+    Array [\n+      Object {\n+        \"metadata\": Array [\n+          Object {\n+            \"processInstances\": Array [\n+              \"id\",\n+              \"processName\",\n+              \"state\",\n+              \"start\",\n+              \"lastUpdate\",\n+              \"businessKey\",\n+            ],\n+          },\n+        ],\n+      },\n+    ]\n+  }\n+  reset={false}\n+  runFilter={true}\n+  setColumnFilters={[MockFunction]}\n+  setDisplayEmptyState={\n+    [MockFunction] {\n+      \"calls\": Array [\n+        Array [\n+          false,\n+        ],\n+      ],\n+      \"results\": Array [\n+        Object {\n+          \"type\": \"return\",\n+          \"value\": undefined,\n+        },\n+      ],\n+    }\n+  }\n+  setDisplayTable={\n+    [MockFunction] {\n+      \"calls\": Array [\n+        Array [\n+          false,\n+        ],\n+      ],\n+      \"results\": Array [\n+        Object {\n+          \"type\": \"return\",\n+          \"value\": undefined,\n+        },\n+      ],\n+    }\n+  }\n+  setFilterChips={[MockFunction]}\n+  setFilterError={[MockFunction]}\n+  setFinalFilters={[MockFunction]}\n+  setReset={\n+    [MockFunction] {\n+      \"calls\": Array [\n+        Array [\n+          false,\n+        ],\n+      ],\n+      \"results\": Array [\n+        Object {\n+          \"type\": \"return\",\n+          \"value\": undefined,\n+        },\n+      ],\n+    }\n+  }\n+  setRunFilter={\n+    [MockFunction] {\n+      \"calls\": Array [\n+        Array [\n+          false,\n+        ],\n+      ],\n+      \"results\": Array [\n+        Object {\n+          \"type\": \"return\",\n+          \"value\": undefined,\n+        },\n+      ],\n+    }\n+  }\n+  setTableLoading={\n+    [MockFunction] {\n+      \"calls\": Array [\n+        Array [\n+          true,\n+        ],\n+        Array [\n+          false,\n+        ],\n+      ],\n+      \"results\": Array [\n+        Object {\n+          \"type\": \"return\",\n+          \"value\": undefined,\n+        },\n+        Object {\n+          \"type\": \"return\",\n+          \"value\": undefined,\n+        },\n+      ],\n+    }\n+  }\n+>\n+  <Component\n+    ariaLabelledBy=\"Select a field\"\n+    id=\"select-field\"\n+    isExpanded={false}\n+    isGrouped={true}\n+    maxHeight=\"60vh\"\n+    onClear={[Function]}\n+    onSelect={[Function]}\n+    onToggle={[Function]}\n+    placeholderText=\"Select a field\"\n+    selections=\"\"\n+    variant=\"typeahead\"\n+  >\n+    <ComponentWithOuia\n+      component={[Function]}\n+      componentProps={\n+        Object {\n+          \"ariaLabelledBy\": \"Select a field\",\n+          \"children\": Array [\n+            <SelectGroup\n+              id=\"\"\n+              label=\" \"\n+              value=\" \"\n+            >\n+              <SelectOption\n+                className=\"\"\n+                component=\"button\"\n+                index={0}\n+                isChecked={false}\n+                isDisabled={false}\n+                isFocused={false}\n+                isNoResultsOption={false}\n+                isPlaceholder={false}\n+                isSelected={false}\n+                keyHandler={[Function]}\n+                onClick={[Function]}\n+                sendRef={[Function]}\n+                value=\"id\"\n+              />\n+            </SelectGroup>,\n+            <SelectGroup\n+              id=\"flight\"\n+              label=\"flight\"\n+              value=\"flight\"\n+            >\n+              <SelectOption\n+                className=\"\"\n+                component=\"button\"\n+                index={0}\n+                isChecked={false}\n+                isDisabled={false}\n+                isFocused={false}\n+                isNoResultsOption={false}\n+                isPlaceholder={false}\n+                isSelected={false}\n+                keyHandler={[Function]}\n+                onClick={[Function]}\n+                sendRef={[Function]}\n+                value=\"arrivalflight\"\n+              >\n+                arrival\n+              </SelectOption>\n+              <SelectOption\n+                className=\"\"\n+                component=\"button\"\n+                index={0}\n+                isChecked={false}\n+                isDisabled={false}\n+                isFocused={false}\n+                isNoResultsOption={false}\n+                isPlaceholder={false}\n+                isSelected={false}\n+                keyHandler={[Function]}\n+                onClick={[Function]}\n+                sendRef={[Function]}\n+                value=\"departureflight\"\n+              >\n+                departure\n+              </SelectOption>\n+              <SelectOption\n+                className=\"\"\n+                component=\"button\"\n+                index={0}\n+                isChecked={false}\n+                isDisabled={false}\n+                isFocused={false}\n+                isNoResultsOption={false}\n+                isPlaceholder={false}\n+                isSelected={false}\n+                keyHandler={[Function]}\n+                onClick={[Function]}\n+                sendRef={[Function]}\n+                value=\"flightNumberflight\"\n+              >\n+                flightNumber\n+              </SelectOption>\n+              <SelectOption\n+                className=\"\"\n+                component=\"button\"\n+                index={0}\n+                isChecked={false}\n+                isDisabled={false}\n+                isFocused={false}\n+                isNoResultsOption={false}\n+                isPlaceholder={false}\n+                isSelected={false}\n+                keyHandler={[Function]}\n+                onClick={[Function]}\n+                sendRef={[Function]}\n+                value=\"gateflight\"\n+              >\n+                gate\n+              </SelectOption>\n+              <SelectOption\n+                className=\"\"\n+                component=\"button\"\n+                index={0}\n+                isChecked={false}\n+                isDisabled={false}\n+                isFocused={false}\n+                isNoResultsOption={false}\n+                isPlaceholder={false}\n+                isSelected={false}\n+                keyHandler={[Function]}\n+                onClick={[Function]}\n+                sendRef={[Function]}\n+                value=\"seatflight\"\n+              >\n+                seat\n+              </SelectOption>\n+            </SelectGroup>,\n+            <SelectGroup\n+              id=\"TestArgument\"\n+              label=\"hotel / address / street\"\n+              value=\"hotel / address / street\"\n+            >\n+              <SelectOption\n+                className=\"\"\n+                component=\"button\"\n+                index={0}\n+                isChecked={false}\n+                isDisabled={false}\n+                isFocused={false}\n+                isNoResultsOption={false}\n+                isPlaceholder={false}\n+                isSelected={false}\n+                keyHandler={[Function]}\n+                onClick={[Function]}\n+                sendRef={[Function]}\n+                value=\"testhotelTestArgument\"\n+              >\n+                test\n+              </SelectOption>\n+            </SelectGroup>,\n+            <SelectGroup\n+              id=\"AddressArgument\"\n+              label=\"hotel / address\"\n+              value=\"hotel / address\"\n+            >\n+              <SelectOption\n+                className=\"\"\n+                component=\"button\"\n+                index={0}\n+                isChecked={false}\n+                isDisabled={false}\n+                isFocused={false}\n+                isNoResultsOption={false}\n+                isPlaceholder={false}\n+                isSelected={false}\n+                keyHandler={[Function]}\n+                onClick={[Function]}\n+                sendRef={[Function]}\n+                value=\"cityhotelAddressArgument\"\n+              >\n+                city\n+              </SelectOption>\n+              <SelectOption\n+                className=\"\"\n+                component=\"button\"\n+                index={0}\n+                isChecked={false}\n+                isDisabled={false}\n+                isFocused={false}\n+                isNoResultsOption={false}\n+                isPlaceholder={false}\n+                isSelected={false}\n+                keyHandler={[Function]}\n+                onClick={[Function]}\n+                sendRef={[Function]}\n+                value=\"countryhotelAddressArgument\"\n+              >\n+                country\n+              </SelectOption>\n+              <SelectOption\n+                className=\"\"\n+                component=\"button\"\n+                index={0}\n+                isChecked={false}\n+                isDisabled={false}\n+                isFocused={false}\n+                isNoResultsOption={false}\n+                isPlaceholder={false}\n+                isSelected={false}\n+                keyHandler={[Function]}\n+                onClick={[Function]}\n+                sendRef={[Function]}\n+                value=\"zipCodehotelAddressArgument\"\n+              >\n+                zipCode\n+              </SelectOption>\n+            </SelectGroup>,\n+            <SelectGroup\n+              id=\"hotel\"\n+              label=\"hotel\"\n+              value=\"hotel\"\n+            >\n+              <SelectOption\n+                className=\"\"\n+                component=\"button\"\n+                index={0}\n+                isChecked={false}\n+                isDisabled={false}\n+                isFocused={false}\n+                isNoResultsOption={false}\n+                isPlaceholder={false}\n+                isSelected={false}\n+                keyHandler={[Function]}\n+                onClick={[Function]}\n+                sendRef={[Function]}\n+                value=\"bookingNumberhotel\"\n+              >\n+                bookingNumber\n+              </SelectOption>\n+            </SelectGroup>,\n+          ],\n+          \"id\": \"select-field\",\n+          \"isExpanded\": false,\n+          \"isGrouped\": true,\n+          \"maxHeight\": \"60vh\",\n+          \"onClear\": [Function],\n+          \"onSelect\": [Function],\n+          \"onToggle\": [Function],\n+          \"placeholderText\": \"Select a field\",\n+          \"selections\": \"\",\n+          \"variant\": \"typeahead\",\n+        }\n+      }\n+      consumerContext={null}\n+    >\n+      <Select\n+        aria-label=\"\"\n+        ariaLabelClear=\"Clear all\"\n+        ariaLabelRemove=\"Remove\"\n+        ariaLabelToggle=\"Options menu\"\n+        ariaLabelTypeAhead=\"\"\n+        ariaLabelledBy=\"Select a field\"\n+        className=\"\"\n+        createText=\"Create\"\n+        customContent={null}\n+        direction=\"down\"\n+        hasInlineFilter={false}\n+        id=\"select-field\"\n+        isCreatable={false}\n+        isDisabled={false}\n+        isExpanded={false}\n+        isGrouped={true}\n+        isPlain={false}\n+        maxHeight=\"60vh\"\n+        noResultsFoundText=\"No results found\"\n+        onClear={[Function]}\n+        onCreateOption={[Function]}\n+        onFilter={null}\n+        onSelect={[Function]}\n+        onToggle={[Function]}\n+        ouiaContext={\n+          Object {\n+            \"isOuia\": false,\n+            \"ouiaId\": null,\n+          }\n+        }\n+        placeholderText=\"Select a field\"\n+        selections=\"\"\n+        toggleIcon={null}\n+        toggleId={null}\n+        variant=\"typeahead\"\n+        width=\"\"\n+      >\n+        <div\n+          className=\"pf-c-select\"\n+          style={\n+            Object {\n+              \"width\": \"\",\n+            }\n+          }\n+        >\n+          <SelectToggle\n+            ariaLabelToggle=\"Options menu\"\n+            ariaLabelledBy=\"Select a field pf-toggle-id-4\"\n+            className=\"\"\n+            handleTypeaheadKeys={[Function]}\n+            hasClearButton={true}\n+            id=\"pf-toggle-id-4\"\n+            isActive={false}\n+            isDisabled={false}\n+            isExpanded={false}\n+            isFocused={false}\n+            isHovered={false}\n+            isPlain={false}\n+            onClose={[Function]}\n+            onEnter={[Function]}\n+            onToggle={[Function]}\n+            parentRef={\n+              Object {\n+                \"current\": <div\n+                  class=\"pf-c-select\"\n+                >\n+                  <div\n+                    class=\"pf-c-select__toggle pf-m-typeahead\"\n+                  >\n+                    <div\n+                      class=\"pf-c-select__toggle-wrapper\"\n+                    >\n+                      <input\n+                        aria-label=\"\"\n+                        autocomplete=\"off\"\n+                        class=\"pf-c-form-control pf-c-select__toggle-typeahead\"\n+                        id=\"pf-toggle-id-4-select-typeahead\"\n+                        placeholder=\"Select a field\"\n+                        type=\"text\"\n+                        value=\"\"\n+                      />\n+                    </div>\n+                    \n+                    <button\n+                      aria-expanded=\"false\"\n+                      aria-haspopup=\"listbox\"\n+                      aria-label=\"Options menu\"\n+                      aria-labelledby=\"Select a field pf-toggle-id-4\"\n+                      class=\"pf-c-button pf-c-select__toggle-button pf-m-plain\"\n+                      id=\"pf-toggle-id-4\"\n+                      type=\"button\"\n+                    >\n+                      <svg\n+                        aria-hidden=\"true\"\n+                        class=\"pf-c-select__toggle-arrow\"\n+                        fill=\"currentColor\"\n+                        height=\"1em\"\n+                        role=\"img\"\n+                        style=\"vertical-align: -0.125em;\"\n+                        viewBox=\"0 0 320 512\"\n+                        width=\"1em\"\n+                      >\n+                        <path\n+                          d=\"M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z\"\n+                          transform=\"\"\n+                        />\n+                      </svg>\n+                    </button>\n+                  </div>\n+                </div>,\n+              }\n+            }\n+            type=\"button\"\n+            variant=\"typeahead\"\n+          >\n+            <div\n+              className=\"pf-c-select__toggle pf-m-typeahead\"\n+              onClick={[Function]}\n+              onKeyDown={[Function]}\n+            >\n+              <div\n+                className=\"pf-c-select__toggle-wrapper\"\n+              >\n+                <input\n+                  aria-activedescendant={null}\n+                  aria-label=\"\"\n+                  autoComplete=\"off\"\n+                  className=\"pf-c-form-control pf-c-select__toggle-typeahead\"\n+                  disabled={false}\n+                  id=\"pf-toggle-id-4-select-typeahead\"\n+                  onChange={[Function]}\n+                  onClick={[Function]}\n+                  onFocus={[Function]}\n+                  placeholder=\"Select a field\"\n+                  type=\"text\"\n+                  value=\"\"\n+                />\n+              </div>\n+              <button\n+                aria-expanded={false}\n+                aria-haspopup=\"listbox\"\n+                aria-label=\"Options menu\"\n+                aria-labelledby=\"Select a field pf-toggle-id-4\"\n+                className=\"pf-c-button pf-c-select__toggle-button pf-m-plain\"\n+                disabled={false}\n+                id=\"pf-toggle-id-4\"\n+                onClick={[Function]}\n+                type=\"button\"\n+              >\n+                <CaretDownIcon", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "292508b1af5f894f27bfe48012fa098cb7d8c67b"}, "originalPosition": 774}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTY4NDczMw==", "bodyText": "@jstastny-cz these Icon cant be mocked, since they are used inside PF component. So mocking this Icon will not make an effect on snapshots", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r455684733", "createdAt": "2020-07-16T10:25:14Z", "author": {"login": "Sara4994"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/tests/__snapshots__/DomainExplorerFilterOptions.test.tsx.snap", "diffHunk": "@@ -0,0 +1,1040 @@\n+// Jest Snapshot v1, https://goo.gl/fbAQLP\n+\n+exports[`Domain explorer filter options component tests Snapshot test with default props 1`] = `\n+<Memo(DomainExplorerFilterOptions)\n+  argument=\"TravelsArgument\"\n+  currentDomain=\"Travels\"\n+  filterChips={Array []}\n+  finalFilters={\n+    Object {\n+      \"metadata\": Object {\n+        \"processInstances\": Object {\n+          \"state\": Object {\n+            \"equal\": \"ACTIVE\",\n+          },\n+        },\n+      },\n+      \"trip\": Object {\n+        \"country\": Object {\n+          \"equal\": \"Australia\",\n+        },\n+      },\n+    }\n+  }\n+  getQuery={\n+    Object {\n+      \"data\": Object {\n+        \"__type\": Object {\n+          \"fields\": Array [\n+            Object {\n+              \"args\": Array [\n+                Object {\n+                  \"name\": \"where\",\n+                  \"type\": Object {\n+                    \"kind\": \"INPUT_OBJECT\",\n+                    \"name\": \"TravelsArgument\",\n+                  },\n+                },\n+                Object {\n+                  \"name\": \"orderBy\",\n+                  \"type\": Object {\n+                    \"kind\": \"INPUT_OBJECT\",\n+                    \"name\": \"TravelsOrderBy\",\n+                  },\n+                },\n+                Object {\n+                  \"name\": \"pagination\",\n+                  \"type\": Object {\n+                    \"kind\": \"INPUT_OBJECT\",\n+                    \"name\": \"Pagination\",\n+                  },\n+                },\n+              ],\n+              \"name\": \"Travels\",\n+              \"type\": Object {\n+                \"ofType\": Object {\n+                  \"name\": \"Travels\",\n+                },\n+              },\n+            },\n+          ],\n+          \"name\": \"Query\",\n+        },\n+      },\n+      \"loading\": false,\n+    }\n+  }\n+  getQueryTypes={\n+    Object {\n+      \"data\": Object {\n+        \"__schema\": Object {\n+          \"queryType\": Array [\n+            Object {\n+              \"inputFields\": Array [\n+                Object {\n+                  \"name\": \"test\",\n+                  \"type\": Object {\n+                    \"kind\": \"INPUT_OBJECT\",\n+                    \"name\": \"StringArgument\",\n+                  },\n+                },\n+              ],\n+              \"name\": \"TestArgument\",\n+            },\n+            Object {\n+              \"inputFields\": Array [\n+                Object {\n+                  \"name\": \"city\",\n+                  \"type\": Object {\n+                    \"kind\": \"INPUT_OBJECT\",\n+                    \"name\": \"StringArgument\",\n+                  },\n+                },\n+                Object {\n+                  \"name\": \"country\",\n+                  \"type\": Object {\n+                    \"kind\": \"INPUT_OBJECT\",\n+                    \"name\": \"StringArgument\",\n+                  },\n+                },\n+                Object {\n+                  \"name\": \"street\",\n+                  \"type\": Object {\n+                    \"kind\": \"INPUT_OBJECT\",\n+                    \"name\": \"TestArgument\",\n+                  },\n+                },\n+                Object {\n+                  \"name\": \"zipCode\",\n+                  \"type\": Object {\n+                    \"kind\": \"INPUT_OBJECT\",\n+                    \"name\": \"StringArgument\",\n+                  },\n+                },\n+              ],\n+              \"kind\": \"INPUT_OBJECT\",\n+              \"name\": \"AddressArgument\",\n+            },\n+            Object {\n+              \"inputFields\": Array [\n+                Object {\n+                  \"name\": \"id\",\n+                  \"type\": Object {\n+                    \"kind\": \"LIST\",\n+                    \"name\": null,\n+                  },\n+                },\n+                Object {\n+                  \"name\": \"equal\",\n+                  \"type\": Object {\n+                    \"kind\": \"SCALAR\",\n+                    \"name\": \"String\",\n+                  },\n+                },\n+                Object {\n+                  \"name\": \"isNull\",\n+                  \"type\": Object {\n+                    \"kind\": \"SCALAR\",\n+                    \"name\": \"Boolean\",\n+                  },\n+                },\n+              ],\n+              \"kind\": \"INPUT_OBJECT\",\n+              \"name\": \"IdArgument\",\n+            },\n+          ],\n+        },\n+      },\n+      \"loading\": false,\n+    }\n+  }\n+  getSchema={\n+    Object {\n+      \"data\": Object {\n+        \"__type\": Object {\n+          \"inputFields\": Array [\n+            Object {\n+              \"name\": \"and\",\n+              \"type\": Object {\n+                \"kind\": \"LIST\",\n+                \"name\": null,\n+              },\n+            },\n+            Object {\n+              \"name\": \"or\",\n+              \"type\": Object {\n+                \"kind\": \"LIST\",\n+                \"name\": null,\n+              },\n+            },\n+            Object {\n+              \"name\": \"id\",\n+              \"type\": Object {\n+                \"inputFields\": Array [\n+                  Object {\n+                    \"name\": \"in\",\n+                    \"type\": Object {\n+                      \"__typename\": \"__Type\",\n+                      \"name\": null,\n+                    },\n+                  },\n+                  Object {\n+                    \"name\": \"equal\",\n+                    \"type\": Object {\n+                      \"__typename\": \"__Type\",\n+                      \"name\": \"String\",\n+                    },\n+                  },\n+                  Object {\n+                    \"name\": \"isNull\",\n+                    \"type\": Object {\n+                      \"__typename\": \"__Type\",\n+                      \"name\": \"Boolean\",\n+                    },\n+                  },\n+                ],\n+                \"kind\": \"INPUT_OBJECT\",\n+                \"name\": \"IdArgument\",\n+              },\n+            },\n+            Object {\n+              \"name\": \"flight\",\n+              \"type\": Object {\n+                \"inputFields\": Array [\n+                  Object {\n+                    \"name\": \"arrival\",\n+                    \"type\": Object {\n+                      \"name\": \"StringArgument\",\n+                    },\n+                  },\n+                  Object {\n+                    \"name\": \"departure\",\n+                    \"type\": Object {\n+                      \"name\": \"StringArgument\",\n+                    },\n+                  },\n+                  Object {\n+                    \"name\": \"flightNumber\",\n+                    \"type\": Object {\n+                      \"name\": \"StringArgument\",\n+                    },\n+                  },\n+                  Object {\n+                    \"name\": \"gate\",\n+                    \"type\": Object {\n+                      \"name\": \"StringArgument\",\n+                    },\n+                  },\n+                  Object {\n+                    \"name\": \"seat\",\n+                    \"type\": Object {\n+                      \"name\": \"StringArgument\",\n+                    },\n+                  },\n+                ],\n+                \"kind\": \"INPUT_OBJECT\",\n+                \"name\": \"FlightArgument\",\n+              },\n+            },\n+            Object {\n+              \"name\": \"hotel\",\n+              \"type\": Object {\n+                \"inputFields\": Array [\n+                  Object {\n+                    \"name\": \"address\",\n+                    \"type\": Object {\n+                      \"__typename\": \"__Type\",\n+                      \"name\": \"AddressArgument\",\n+                    },\n+                  },\n+                  Object {\n+                    \"name\": \"bookingNumber\",\n+                    \"type\": Object {\n+                      \"__typename\": \"__Type\",\n+                      \"name\": \"StringArgument\",\n+                    },\n+                  },\n+                ],\n+                \"kind\": \"INPUT_OBJECT\",\n+                \"name\": \"HotelArgument\",\n+              },\n+            },\n+          ],\n+          \"name\": \"TravelsArgument\",\n+        },\n+      },\n+    }\n+  }\n+  parameters={\n+    Array [\n+      Object {\n+        \"metadata\": Array [\n+          Object {\n+            \"processInstances\": Array [\n+              \"id\",\n+              \"processName\",\n+              \"state\",\n+              \"start\",\n+              \"lastUpdate\",\n+              \"businessKey\",\n+            ],\n+          },\n+        ],\n+      },\n+    ]\n+  }\n+  reset={false}\n+  runFilter={true}\n+  setColumnFilters={[MockFunction]}\n+  setDisplayEmptyState={\n+    [MockFunction] {\n+      \"calls\": Array [\n+        Array [\n+          false,\n+        ],\n+      ],\n+      \"results\": Array [\n+        Object {\n+          \"type\": \"return\",\n+          \"value\": undefined,\n+        },\n+      ],\n+    }\n+  }\n+  setDisplayTable={\n+    [MockFunction] {\n+      \"calls\": Array [\n+        Array [\n+          false,\n+        ],\n+      ],\n+      \"results\": Array [\n+        Object {\n+          \"type\": \"return\",\n+          \"value\": undefined,\n+        },\n+      ],\n+    }\n+  }\n+  setFilterChips={[MockFunction]}\n+  setFilterError={[MockFunction]}\n+  setFinalFilters={[MockFunction]}\n+  setReset={\n+    [MockFunction] {\n+      \"calls\": Array [\n+        Array [\n+          false,\n+        ],\n+      ],\n+      \"results\": Array [\n+        Object {\n+          \"type\": \"return\",\n+          \"value\": undefined,\n+        },\n+      ],\n+    }\n+  }\n+  setRunFilter={\n+    [MockFunction] {\n+      \"calls\": Array [\n+        Array [\n+          false,\n+        ],\n+      ],\n+      \"results\": Array [\n+        Object {\n+          \"type\": \"return\",\n+          \"value\": undefined,\n+        },\n+      ],\n+    }\n+  }\n+  setTableLoading={\n+    [MockFunction] {\n+      \"calls\": Array [\n+        Array [\n+          true,\n+        ],\n+        Array [\n+          false,\n+        ],\n+      ],\n+      \"results\": Array [\n+        Object {\n+          \"type\": \"return\",\n+          \"value\": undefined,\n+        },\n+        Object {\n+          \"type\": \"return\",\n+          \"value\": undefined,\n+        },\n+      ],\n+    }\n+  }\n+>\n+  <Component\n+    ariaLabelledBy=\"Select a field\"\n+    id=\"select-field\"\n+    isExpanded={false}\n+    isGrouped={true}\n+    maxHeight=\"60vh\"\n+    onClear={[Function]}\n+    onSelect={[Function]}\n+    onToggle={[Function]}\n+    placeholderText=\"Select a field\"\n+    selections=\"\"\n+    variant=\"typeahead\"\n+  >\n+    <ComponentWithOuia\n+      component={[Function]}\n+      componentProps={\n+        Object {\n+          \"ariaLabelledBy\": \"Select a field\",\n+          \"children\": Array [\n+            <SelectGroup\n+              id=\"\"\n+              label=\" \"\n+              value=\" \"\n+            >\n+              <SelectOption\n+                className=\"\"\n+                component=\"button\"\n+                index={0}\n+                isChecked={false}\n+                isDisabled={false}\n+                isFocused={false}\n+                isNoResultsOption={false}\n+                isPlaceholder={false}\n+                isSelected={false}\n+                keyHandler={[Function]}\n+                onClick={[Function]}\n+                sendRef={[Function]}\n+                value=\"id\"\n+              />\n+            </SelectGroup>,\n+            <SelectGroup\n+              id=\"flight\"\n+              label=\"flight\"\n+              value=\"flight\"\n+            >\n+              <SelectOption\n+                className=\"\"\n+                component=\"button\"\n+                index={0}\n+                isChecked={false}\n+                isDisabled={false}\n+                isFocused={false}\n+                isNoResultsOption={false}\n+                isPlaceholder={false}\n+                isSelected={false}\n+                keyHandler={[Function]}\n+                onClick={[Function]}\n+                sendRef={[Function]}\n+                value=\"arrivalflight\"\n+              >\n+                arrival\n+              </SelectOption>\n+              <SelectOption\n+                className=\"\"\n+                component=\"button\"\n+                index={0}\n+                isChecked={false}\n+                isDisabled={false}\n+                isFocused={false}\n+                isNoResultsOption={false}\n+                isPlaceholder={false}\n+                isSelected={false}\n+                keyHandler={[Function]}\n+                onClick={[Function]}\n+                sendRef={[Function]}\n+                value=\"departureflight\"\n+              >\n+                departure\n+              </SelectOption>\n+              <SelectOption\n+                className=\"\"\n+                component=\"button\"\n+                index={0}\n+                isChecked={false}\n+                isDisabled={false}\n+                isFocused={false}\n+                isNoResultsOption={false}\n+                isPlaceholder={false}\n+                isSelected={false}\n+                keyHandler={[Function]}\n+                onClick={[Function]}\n+                sendRef={[Function]}\n+                value=\"flightNumberflight\"\n+              >\n+                flightNumber\n+              </SelectOption>\n+              <SelectOption\n+                className=\"\"\n+                component=\"button\"\n+                index={0}\n+                isChecked={false}\n+                isDisabled={false}\n+                isFocused={false}\n+                isNoResultsOption={false}\n+                isPlaceholder={false}\n+                isSelected={false}\n+                keyHandler={[Function]}\n+                onClick={[Function]}\n+                sendRef={[Function]}\n+                value=\"gateflight\"\n+              >\n+                gate\n+              </SelectOption>\n+              <SelectOption\n+                className=\"\"\n+                component=\"button\"\n+                index={0}\n+                isChecked={false}\n+                isDisabled={false}\n+                isFocused={false}\n+                isNoResultsOption={false}\n+                isPlaceholder={false}\n+                isSelected={false}\n+                keyHandler={[Function]}\n+                onClick={[Function]}\n+                sendRef={[Function]}\n+                value=\"seatflight\"\n+              >\n+                seat\n+              </SelectOption>\n+            </SelectGroup>,\n+            <SelectGroup\n+              id=\"TestArgument\"\n+              label=\"hotel / address / street\"\n+              value=\"hotel / address / street\"\n+            >\n+              <SelectOption\n+                className=\"\"\n+                component=\"button\"\n+                index={0}\n+                isChecked={false}\n+                isDisabled={false}\n+                isFocused={false}\n+                isNoResultsOption={false}\n+                isPlaceholder={false}\n+                isSelected={false}\n+                keyHandler={[Function]}\n+                onClick={[Function]}\n+                sendRef={[Function]}\n+                value=\"testhotelTestArgument\"\n+              >\n+                test\n+              </SelectOption>\n+            </SelectGroup>,\n+            <SelectGroup\n+              id=\"AddressArgument\"\n+              label=\"hotel / address\"\n+              value=\"hotel / address\"\n+            >\n+              <SelectOption\n+                className=\"\"\n+                component=\"button\"\n+                index={0}\n+                isChecked={false}\n+                isDisabled={false}\n+                isFocused={false}\n+                isNoResultsOption={false}\n+                isPlaceholder={false}\n+                isSelected={false}\n+                keyHandler={[Function]}\n+                onClick={[Function]}\n+                sendRef={[Function]}\n+                value=\"cityhotelAddressArgument\"\n+              >\n+                city\n+              </SelectOption>\n+              <SelectOption\n+                className=\"\"\n+                component=\"button\"\n+                index={0}\n+                isChecked={false}\n+                isDisabled={false}\n+                isFocused={false}\n+                isNoResultsOption={false}\n+                isPlaceholder={false}\n+                isSelected={false}\n+                keyHandler={[Function]}\n+                onClick={[Function]}\n+                sendRef={[Function]}\n+                value=\"countryhotelAddressArgument\"\n+              >\n+                country\n+              </SelectOption>\n+              <SelectOption\n+                className=\"\"\n+                component=\"button\"\n+                index={0}\n+                isChecked={false}\n+                isDisabled={false}\n+                isFocused={false}\n+                isNoResultsOption={false}\n+                isPlaceholder={false}\n+                isSelected={false}\n+                keyHandler={[Function]}\n+                onClick={[Function]}\n+                sendRef={[Function]}\n+                value=\"zipCodehotelAddressArgument\"\n+              >\n+                zipCode\n+              </SelectOption>\n+            </SelectGroup>,\n+            <SelectGroup\n+              id=\"hotel\"\n+              label=\"hotel\"\n+              value=\"hotel\"\n+            >\n+              <SelectOption\n+                className=\"\"\n+                component=\"button\"\n+                index={0}\n+                isChecked={false}\n+                isDisabled={false}\n+                isFocused={false}\n+                isNoResultsOption={false}\n+                isPlaceholder={false}\n+                isSelected={false}\n+                keyHandler={[Function]}\n+                onClick={[Function]}\n+                sendRef={[Function]}\n+                value=\"bookingNumberhotel\"\n+              >\n+                bookingNumber\n+              </SelectOption>\n+            </SelectGroup>,\n+          ],\n+          \"id\": \"select-field\",\n+          \"isExpanded\": false,\n+          \"isGrouped\": true,\n+          \"maxHeight\": \"60vh\",\n+          \"onClear\": [Function],\n+          \"onSelect\": [Function],\n+          \"onToggle\": [Function],\n+          \"placeholderText\": \"Select a field\",\n+          \"selections\": \"\",\n+          \"variant\": \"typeahead\",\n+        }\n+      }\n+      consumerContext={null}\n+    >\n+      <Select\n+        aria-label=\"\"\n+        ariaLabelClear=\"Clear all\"\n+        ariaLabelRemove=\"Remove\"\n+        ariaLabelToggle=\"Options menu\"\n+        ariaLabelTypeAhead=\"\"\n+        ariaLabelledBy=\"Select a field\"\n+        className=\"\"\n+        createText=\"Create\"\n+        customContent={null}\n+        direction=\"down\"\n+        hasInlineFilter={false}\n+        id=\"select-field\"\n+        isCreatable={false}\n+        isDisabled={false}\n+        isExpanded={false}\n+        isGrouped={true}\n+        isPlain={false}\n+        maxHeight=\"60vh\"\n+        noResultsFoundText=\"No results found\"\n+        onClear={[Function]}\n+        onCreateOption={[Function]}\n+        onFilter={null}\n+        onSelect={[Function]}\n+        onToggle={[Function]}\n+        ouiaContext={\n+          Object {\n+            \"isOuia\": false,\n+            \"ouiaId\": null,\n+          }\n+        }\n+        placeholderText=\"Select a field\"\n+        selections=\"\"\n+        toggleIcon={null}\n+        toggleId={null}\n+        variant=\"typeahead\"\n+        width=\"\"\n+      >\n+        <div\n+          className=\"pf-c-select\"\n+          style={\n+            Object {\n+              \"width\": \"\",\n+            }\n+          }\n+        >\n+          <SelectToggle\n+            ariaLabelToggle=\"Options menu\"\n+            ariaLabelledBy=\"Select a field pf-toggle-id-4\"\n+            className=\"\"\n+            handleTypeaheadKeys={[Function]}\n+            hasClearButton={true}\n+            id=\"pf-toggle-id-4\"\n+            isActive={false}\n+            isDisabled={false}\n+            isExpanded={false}\n+            isFocused={false}\n+            isHovered={false}\n+            isPlain={false}\n+            onClose={[Function]}\n+            onEnter={[Function]}\n+            onToggle={[Function]}\n+            parentRef={\n+              Object {\n+                \"current\": <div\n+                  class=\"pf-c-select\"\n+                >\n+                  <div\n+                    class=\"pf-c-select__toggle pf-m-typeahead\"\n+                  >\n+                    <div\n+                      class=\"pf-c-select__toggle-wrapper\"\n+                    >\n+                      <input\n+                        aria-label=\"\"\n+                        autocomplete=\"off\"\n+                        class=\"pf-c-form-control pf-c-select__toggle-typeahead\"\n+                        id=\"pf-toggle-id-4-select-typeahead\"\n+                        placeholder=\"Select a field\"\n+                        type=\"text\"\n+                        value=\"\"\n+                      />\n+                    </div>\n+                    \n+                    <button\n+                      aria-expanded=\"false\"\n+                      aria-haspopup=\"listbox\"\n+                      aria-label=\"Options menu\"\n+                      aria-labelledby=\"Select a field pf-toggle-id-4\"\n+                      class=\"pf-c-button pf-c-select__toggle-button pf-m-plain\"\n+                      id=\"pf-toggle-id-4\"\n+                      type=\"button\"\n+                    >\n+                      <svg\n+                        aria-hidden=\"true\"\n+                        class=\"pf-c-select__toggle-arrow\"\n+                        fill=\"currentColor\"\n+                        height=\"1em\"\n+                        role=\"img\"\n+                        style=\"vertical-align: -0.125em;\"\n+                        viewBox=\"0 0 320 512\"\n+                        width=\"1em\"\n+                      >\n+                        <path\n+                          d=\"M31.3 192h257.3c17.8 0 26.7 21.5 14.1 34.1L174.1 354.8c-7.8 7.8-20.5 7.8-28.3 0L17.2 226.1C4.6 213.5 13.5 192 31.3 192z\"\n+                          transform=\"\"\n+                        />\n+                      </svg>\n+                    </button>\n+                  </div>\n+                </div>,\n+              }\n+            }\n+            type=\"button\"\n+            variant=\"typeahead\"\n+          >\n+            <div\n+              className=\"pf-c-select__toggle pf-m-typeahead\"\n+              onClick={[Function]}\n+              onKeyDown={[Function]}\n+            >\n+              <div\n+                className=\"pf-c-select__toggle-wrapper\"\n+              >\n+                <input\n+                  aria-activedescendant={null}\n+                  aria-label=\"\"\n+                  autoComplete=\"off\"\n+                  className=\"pf-c-form-control pf-c-select__toggle-typeahead\"\n+                  disabled={false}\n+                  id=\"pf-toggle-id-4-select-typeahead\"\n+                  onChange={[Function]}\n+                  onClick={[Function]}\n+                  onFocus={[Function]}\n+                  placeholder=\"Select a field\"\n+                  type=\"text\"\n+                  value=\"\"\n+                />\n+              </div>\n+              <button\n+                aria-expanded={false}\n+                aria-haspopup=\"listbox\"\n+                aria-label=\"Options menu\"\n+                aria-labelledby=\"Select a field pf-toggle-id-4\"\n+                className=\"pf-c-button pf-c-select__toggle-button pf-m-plain\"\n+                disabled={false}\n+                id=\"pf-toggle-id-4\"\n+                onClick={[Function]}\n+                type=\"button\"\n+              >\n+                <CaretDownIcon", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTYwOTMzOQ=="}, "originalCommit": {"oid": "292508b1af5f894f27bfe48012fa098cb7d8c67b"}, "originalPosition": 774}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzA0Mjc5OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/tests/DomainExplorerFilterOptions.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMzozNzo0OVrOGyrUrw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjo0MzozN1rOGyzc_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc5MTc5MQ==", "bodyText": "should be removed?", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r455791791", "createdAt": "2020-07-16T13:37:49Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/tests/DomainExplorerFilterOptions.test.tsx", "diffHunk": "@@ -0,0 +1,1879 @@\n+import React from 'react';\n+import DomainExplorerFilterOptions from '../DomainExplorerFilterOptions';\n+import reactApollo from 'react-apollo';\n+import { GraphQL } from '../../../../graphql/types';\n+import useGetInputFieldsFromQueryQuery = GraphQL.useGetInputFieldsFromQueryQuery;\n+import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n+import { mount } from 'enzyme';\n+import { act } from 'react-dom/test-utils';\n+\n+jest.mock('apollo-client');\n+jest.mock('react-apollo', () => {\n+  const ApolloClient = { query: jest.fn() };\n+  return { useApolloClient: jest.fn(() => ApolloClient) };\n+});\n+\n+jest.mock('../../../../graphql/types');\n+// tslint:disable: no-string-literal\n+// tslint:disable: no-unexpected-multiline\n+describe('Domain explorer filter options component tests', () => {\n+  const mGraphQLResponse = {\n+    data: {\n+      Travels: [\n+        {\n+          flight: {\n+            arrival: '2020-07-22T03:30:00.000+05:30',\n+            departure: '2020-07-07T03:30:00.000+05:30',\n+            flightNumber: 'MX555',\n+            gate: null,\n+            seat: null\n+          },\n+          metadata: {\n+            processInstances: [\n+              {\n+                businessKey: 'LKJD13',\n+                id: '37bc93d0-1100-3913-85aa-a8dc253281b0',\n+                lastUpdate: '2020-07-06T09:16:09.823Z',\n+                processName: 'travels',\n+                serviceUrl: 'http://localhost:8080',\n+                start: '2020-07-06T09:16:09.58Z',\n+                state: 'ACTIVE'\n+              },\n+              {\n+                businessKey: null,\n+                id: '8526d522-24f6-4d12-b975-394a0adeb8f8',\n+                lastUpdate: '2020-07-06T09:16:09.824Z',\n+                processName: 'HotelBooking',\n+                serviceUrl: 'http://localhost:8080',\n+                start: '2020-07-06T09:16:09.746Z',\n+                state: 'COMPLETED'\n+              }\n+            ]\n+          }\n+        },\n+        {\n+          flight: {\n+            arrival: '2020-07-23T03:30:00.000+05:30',\n+            departure: '2020-07-10T03:30:00.000+05:30',\n+            flightNumber: 'MX555',\n+            gate: null,\n+            seat: null\n+          },\n+          metadata: {\n+            processInstances: [\n+              {\n+                businessKey: '4Y0W6E',\n+                id: 'd2b4967b-e8b1-3232-a07c-d639e08a11d4',\n+                lastUpdate: '2020-07-06T09:16:55.621Z',\n+                processName: 'travels',\n+                serviceUrl: 'http://localhost:8080',\n+                start: '2020-07-06T09:16:55.609Z',\n+                state: 'ACTIVE'\n+              },\n+              {\n+                businessKey: null,\n+                id: 'cd5f6cc6-7ef4-4eb1-947b-3f53f201ab15',\n+                lastUpdate: '2020-07-06T09:16:55.621Z',\n+                processName: 'HotelBooking',\n+                serviceUrl: 'http://localhost:8080',\n+                start: '2020-07-06T09:16:55.611Z',\n+                state: 'COMPLETED'\n+              }\n+            ]\n+          }\n+        }\n+      ]\n+    },\n+    loading: false,\n+    networkStatus: 7,\n+    stale: false\n+  };\n+  const defaultProps = {\n+    currentDomain: 'Travels',\n+    getQuery: {\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'Query',\n+          fields: [\n+            {\n+              name: 'Travels',\n+              args: [\n+                {\n+                  name: 'where',\n+                  type: { kind: 'INPUT_OBJECT', name: 'TravelsArgument' }\n+                },\n+                {\n+                  name: 'orderBy',\n+                  type: { kind: 'INPUT_OBJECT', name: 'TravelsOrderBy' }\n+                },\n+                {\n+                  name: 'pagination',\n+                  type: { kind: 'INPUT_OBJECT', name: 'Pagination' }\n+                }\n+              ],\n+              type: {\n+                ofType: { name: 'Travels' }\n+              }\n+            }\n+          ]\n+        }\n+      }\n+    },\n+    parameters: [\n+      { flight: ['arrival'] },\n+      { flight: ['departure'] },\n+      { flight: ['gate'] },\n+      {\n+        metadata: [\n+          {\n+            processInstances: [\n+              'id',\n+              'processName',\n+              'state',\n+              'start',\n+              'lastUpdate',\n+              'businessKey'\n+            ]\n+          }\n+        ]\n+      }\n+    ],\n+    setColumnFilters: jest.fn(),\n+    setTableLoading: jest.fn(),\n+    setDisplayTable: jest.fn(),\n+    setDisplayEmptyState: jest.fn(),\n+    setFilterError: jest.fn(),\n+    filterChips: ['metadata / processInstances / state: ACTIVE'],\n+    setFilterChips: jest.fn(),\n+    runFilter: true,\n+    setRunFilter: jest.fn(),\n+    finalFilters: {\n+      metadata: {\n+        processInstances: { state: { equal: 'ACTIVE' } }\n+      },\n+      trip: {\n+        country: {\n+          equal: 'Australia'\n+        }\n+      }\n+    },\n+    argument: 'TravelsArgument',\n+    setFinalFilters: jest.fn(),\n+    getSchema: {\n+      data: {\n+        __type: {\n+          name: 'TravelsArgument',\n+          inputFields: [\n+            { name: 'and', type: { name: null, kind: 'LIST' } },\n+            { name: 'or', type: { name: null, kind: 'LIST' } },\n+            {\n+              name: 'flight',\n+              type: {\n+                name: 'FlightArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'arrival',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'departure',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'flightNumber',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'gate',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'seat',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  }\n+                ]\n+              }\n+            }\n+          ]\n+        }\n+      }\n+    },\n+    reset: false,\n+    setReset: jest.fn()\n+  };\n+  afterEach(() => {\n+    jest.clearAllMocks();\n+  });\n+  let client;\n+  let useApolloClient;\n+  let useEffect;\n+\n+  const mockUseEffect = () => {\n+    useEffect.mockImplementationOnce(f => f());\n+  };\n+\n+  const mockUseApolloClient = () => {\n+    // tslint:disable-next-line: react-hooks-nesting\n+    client = useApolloClient();\n+  };\n+\n+  beforeEach(() => {\n+    useApolloClient = jest.spyOn(reactApollo, 'useApolloClient');\n+    mockUseApolloClient();\n+    useEffect = jest.spyOn(React, 'useEffect');\n+    mockUseEffect();\n+    mockUseEffect();\n+  });\n+  it('Snapshot test with default props', async () => {\n+    const props = {\n+      reset: false,\n+      setReset: jest.fn(),\n+      currentDomain: 'Travels',\n+      getQuery: {\n+        loading: false,\n+        data: {\n+          __type: {\n+            name: 'Query',\n+            fields: [\n+              {\n+                name: 'Travels',\n+                args: [\n+                  {\n+                    name: 'where',\n+                    type: { kind: 'INPUT_OBJECT', name: 'TravelsArgument' }\n+                  },\n+                  {\n+                    name: 'orderBy',\n+                    type: { kind: 'INPUT_OBJECT', name: 'TravelsOrderBy' }\n+                  },\n+                  {\n+                    name: 'pagination',\n+                    type: { kind: 'INPUT_OBJECT', name: 'Pagination' }\n+                  }\n+                ],\n+                type: {\n+                  ofType: { name: 'Travels' }\n+                }\n+              }\n+            ]\n+          }\n+        }\n+      },\n+      parameters: [\n+        {\n+          metadata: [\n+            {\n+              processInstances: [\n+                'id',\n+                'processName',\n+                'state',\n+                'start',\n+                'lastUpdate',\n+                'businessKey'\n+              ]\n+            }\n+          ]\n+        }\n+      ],\n+      setColumnFilters: jest.fn(),\n+      setTableLoading: jest.fn(),\n+      setDisplayTable: jest.fn(),\n+      setDisplayEmptyState: jest.fn(),\n+      setFilterError: jest.fn(),\n+      getQueryTypes: {\n+        loading: false,\n+        data: {\n+          __schema: {\n+            queryType: [\n+              {\n+                name: 'TestArgument',\n+                inputFields: [\n+                  {\n+                    name: 'test',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  }\n+                ]\n+              },\n+              {\n+                name: 'AddressArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'city',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  },\n+                  {\n+                    name: 'country',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  },\n+                  {\n+                    name: 'street',\n+                    type: { name: 'TestArgument', kind: 'INPUT_OBJECT' }\n+                  },\n+                  {\n+                    name: 'zipCode',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  }\n+                ]\n+              },\n+              {\n+                name: 'IdArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  { name: 'id', type: { name: null, kind: 'LIST' } },\n+                  { name: 'equal', type: { name: 'String', kind: 'SCALAR' } },\n+                  { name: 'isNull', type: { name: 'Boolean', kind: 'SCALAR' } }\n+                ]\n+              }\n+            ]\n+          }\n+        }\n+      },\n+      filterChips: [],\n+      setFilterChips: jest.fn(),\n+      runFilter: true,\n+      setRunFilter: jest.fn(),\n+      finalFilters: {\n+        metadata: {\n+          processInstances: { state: { equal: 'ACTIVE' } }\n+        },\n+        trip: {\n+          country: {\n+            equal: 'Australia'\n+          }\n+        }\n+      },\n+      argument: 'TravelsArgument',\n+      setFinalFilters: jest.fn(),\n+      getSchema: {\n+        data: {\n+          __type: {\n+            name: 'TravelsArgument',\n+            inputFields: [\n+              { name: 'and', type: { name: null, kind: 'LIST' } },\n+              { name: 'or', type: { name: null, kind: 'LIST' } },\n+              {\n+                name: 'id',\n+                type: {\n+                  inputFields: [\n+                    { name: 'in', type: { name: null, __typename: '__Type' } },\n+                    {\n+                      name: 'equal',\n+                      type: { name: 'String', __typename: '__Type' }\n+                    },\n+                    {\n+                      name: 'isNull',\n+                      type: { name: 'Boolean', __typename: '__Type' }\n+                    }\n+                  ],\n+                  kind: 'INPUT_OBJECT',\n+                  name: 'IdArgument'\n+                }\n+              },\n+              {\n+                name: 'flight',\n+                type: {\n+                  name: 'FlightArgument',\n+                  kind: 'INPUT_OBJECT',\n+                  inputFields: [\n+                    {\n+                      name: 'arrival',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'departure',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'flightNumber',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'gate',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'seat',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    }\n+                  ]\n+                }\n+              },\n+              {\n+                name: 'hotel',\n+                type: {\n+                  name: 'HotelArgument',\n+                  kind: 'INPUT_OBJECT',\n+                  inputFields: [\n+                    {\n+                      name: 'address',\n+                      type: { name: 'AddressArgument', __typename: '__Type' }\n+                    },\n+                    {\n+                      name: 'bookingNumber',\n+                      type: { name: 'StringArgument', __typename: '__Type' }\n+                    }\n+                  ]\n+                }\n+              }\n+            ]\n+          }\n+        }\n+      }\n+    };\n+    // @ts-ignore\n+    useGetInputFieldsFromTypeQuery.mockReturnValue({\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'IdArgument',\n+          inputFields: [\n+            { name: 'in', type: { name: null, kind: 'LIST' } },\n+            { name: 'equal', type: { name: 'String', kind: 'SCALAR' } },\n+            { name: 'isNull', type: { name: 'Boolean', kind: 'SCALAR' } }\n+          ],\n+          kind: 'INPUT_OBJECT'\n+        }\n+      }\n+    });\n+    // @ts-ignore\n+    useGetInputFieldsFromQueryQuery.mockReturnValue({\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'TravelsArgument',\n+          inputFields: [\n+            {\n+              name: 'and',\n+              type: {\n+                name: null,\n+                kind: 'LIST',\n+                inputFields: null\n+              }\n+            },\n+            {\n+              name: 'or',\n+              type: {\n+                name: null,\n+                kind: 'LIST',\n+                inputFields: null\n+              }\n+            },\n+            {\n+              name: 'flight',\n+              type: {\n+                name: 'FlightArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'arrival',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'departure',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'flightNumber',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'gate',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'seat',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  }\n+                ]\n+              }\n+            },\n+            {\n+              name: 'hotel',\n+              type: {\n+                name: 'HotelArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'address',\n+                    type: {\n+                      name: 'AddressArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'bookingNumber',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'name',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'phone',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'room',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  }\n+                ]\n+              }\n+            }\n+          ]\n+        }\n+      }\n+    });\n+    const wrapper = mount(<DomainExplorerFilterOptions {...props} />);\n+    wrapper.update();\n+    wrapper.setProps({});\n+    // const mGraphQLResponse = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93d5c1144c05f68cd746b26789cbe34518d34b5d"}, "originalPosition": 569}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkyNDk4OA==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r455924988", "createdAt": "2020-07-16T16:43:37Z", "author": {"login": "Sara4994"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/tests/DomainExplorerFilterOptions.test.tsx", "diffHunk": "@@ -0,0 +1,1879 @@\n+import React from 'react';\n+import DomainExplorerFilterOptions from '../DomainExplorerFilterOptions';\n+import reactApollo from 'react-apollo';\n+import { GraphQL } from '../../../../graphql/types';\n+import useGetInputFieldsFromQueryQuery = GraphQL.useGetInputFieldsFromQueryQuery;\n+import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n+import { mount } from 'enzyme';\n+import { act } from 'react-dom/test-utils';\n+\n+jest.mock('apollo-client');\n+jest.mock('react-apollo', () => {\n+  const ApolloClient = { query: jest.fn() };\n+  return { useApolloClient: jest.fn(() => ApolloClient) };\n+});\n+\n+jest.mock('../../../../graphql/types');\n+// tslint:disable: no-string-literal\n+// tslint:disable: no-unexpected-multiline\n+describe('Domain explorer filter options component tests', () => {\n+  const mGraphQLResponse = {\n+    data: {\n+      Travels: [\n+        {\n+          flight: {\n+            arrival: '2020-07-22T03:30:00.000+05:30',\n+            departure: '2020-07-07T03:30:00.000+05:30',\n+            flightNumber: 'MX555',\n+            gate: null,\n+            seat: null\n+          },\n+          metadata: {\n+            processInstances: [\n+              {\n+                businessKey: 'LKJD13',\n+                id: '37bc93d0-1100-3913-85aa-a8dc253281b0',\n+                lastUpdate: '2020-07-06T09:16:09.823Z',\n+                processName: 'travels',\n+                serviceUrl: 'http://localhost:8080',\n+                start: '2020-07-06T09:16:09.58Z',\n+                state: 'ACTIVE'\n+              },\n+              {\n+                businessKey: null,\n+                id: '8526d522-24f6-4d12-b975-394a0adeb8f8',\n+                lastUpdate: '2020-07-06T09:16:09.824Z',\n+                processName: 'HotelBooking',\n+                serviceUrl: 'http://localhost:8080',\n+                start: '2020-07-06T09:16:09.746Z',\n+                state: 'COMPLETED'\n+              }\n+            ]\n+          }\n+        },\n+        {\n+          flight: {\n+            arrival: '2020-07-23T03:30:00.000+05:30',\n+            departure: '2020-07-10T03:30:00.000+05:30',\n+            flightNumber: 'MX555',\n+            gate: null,\n+            seat: null\n+          },\n+          metadata: {\n+            processInstances: [\n+              {\n+                businessKey: '4Y0W6E',\n+                id: 'd2b4967b-e8b1-3232-a07c-d639e08a11d4',\n+                lastUpdate: '2020-07-06T09:16:55.621Z',\n+                processName: 'travels',\n+                serviceUrl: 'http://localhost:8080',\n+                start: '2020-07-06T09:16:55.609Z',\n+                state: 'ACTIVE'\n+              },\n+              {\n+                businessKey: null,\n+                id: 'cd5f6cc6-7ef4-4eb1-947b-3f53f201ab15',\n+                lastUpdate: '2020-07-06T09:16:55.621Z',\n+                processName: 'HotelBooking',\n+                serviceUrl: 'http://localhost:8080',\n+                start: '2020-07-06T09:16:55.611Z',\n+                state: 'COMPLETED'\n+              }\n+            ]\n+          }\n+        }\n+      ]\n+    },\n+    loading: false,\n+    networkStatus: 7,\n+    stale: false\n+  };\n+  const defaultProps = {\n+    currentDomain: 'Travels',\n+    getQuery: {\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'Query',\n+          fields: [\n+            {\n+              name: 'Travels',\n+              args: [\n+                {\n+                  name: 'where',\n+                  type: { kind: 'INPUT_OBJECT', name: 'TravelsArgument' }\n+                },\n+                {\n+                  name: 'orderBy',\n+                  type: { kind: 'INPUT_OBJECT', name: 'TravelsOrderBy' }\n+                },\n+                {\n+                  name: 'pagination',\n+                  type: { kind: 'INPUT_OBJECT', name: 'Pagination' }\n+                }\n+              ],\n+              type: {\n+                ofType: { name: 'Travels' }\n+              }\n+            }\n+          ]\n+        }\n+      }\n+    },\n+    parameters: [\n+      { flight: ['arrival'] },\n+      { flight: ['departure'] },\n+      { flight: ['gate'] },\n+      {\n+        metadata: [\n+          {\n+            processInstances: [\n+              'id',\n+              'processName',\n+              'state',\n+              'start',\n+              'lastUpdate',\n+              'businessKey'\n+            ]\n+          }\n+        ]\n+      }\n+    ],\n+    setColumnFilters: jest.fn(),\n+    setTableLoading: jest.fn(),\n+    setDisplayTable: jest.fn(),\n+    setDisplayEmptyState: jest.fn(),\n+    setFilterError: jest.fn(),\n+    filterChips: ['metadata / processInstances / state: ACTIVE'],\n+    setFilterChips: jest.fn(),\n+    runFilter: true,\n+    setRunFilter: jest.fn(),\n+    finalFilters: {\n+      metadata: {\n+        processInstances: { state: { equal: 'ACTIVE' } }\n+      },\n+      trip: {\n+        country: {\n+          equal: 'Australia'\n+        }\n+      }\n+    },\n+    argument: 'TravelsArgument',\n+    setFinalFilters: jest.fn(),\n+    getSchema: {\n+      data: {\n+        __type: {\n+          name: 'TravelsArgument',\n+          inputFields: [\n+            { name: 'and', type: { name: null, kind: 'LIST' } },\n+            { name: 'or', type: { name: null, kind: 'LIST' } },\n+            {\n+              name: 'flight',\n+              type: {\n+                name: 'FlightArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'arrival',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'departure',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'flightNumber',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'gate',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'seat',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  }\n+                ]\n+              }\n+            }\n+          ]\n+        }\n+      }\n+    },\n+    reset: false,\n+    setReset: jest.fn()\n+  };\n+  afterEach(() => {\n+    jest.clearAllMocks();\n+  });\n+  let client;\n+  let useApolloClient;\n+  let useEffect;\n+\n+  const mockUseEffect = () => {\n+    useEffect.mockImplementationOnce(f => f());\n+  };\n+\n+  const mockUseApolloClient = () => {\n+    // tslint:disable-next-line: react-hooks-nesting\n+    client = useApolloClient();\n+  };\n+\n+  beforeEach(() => {\n+    useApolloClient = jest.spyOn(reactApollo, 'useApolloClient');\n+    mockUseApolloClient();\n+    useEffect = jest.spyOn(React, 'useEffect');\n+    mockUseEffect();\n+    mockUseEffect();\n+  });\n+  it('Snapshot test with default props', async () => {\n+    const props = {\n+      reset: false,\n+      setReset: jest.fn(),\n+      currentDomain: 'Travels',\n+      getQuery: {\n+        loading: false,\n+        data: {\n+          __type: {\n+            name: 'Query',\n+            fields: [\n+              {\n+                name: 'Travels',\n+                args: [\n+                  {\n+                    name: 'where',\n+                    type: { kind: 'INPUT_OBJECT', name: 'TravelsArgument' }\n+                  },\n+                  {\n+                    name: 'orderBy',\n+                    type: { kind: 'INPUT_OBJECT', name: 'TravelsOrderBy' }\n+                  },\n+                  {\n+                    name: 'pagination',\n+                    type: { kind: 'INPUT_OBJECT', name: 'Pagination' }\n+                  }\n+                ],\n+                type: {\n+                  ofType: { name: 'Travels' }\n+                }\n+              }\n+            ]\n+          }\n+        }\n+      },\n+      parameters: [\n+        {\n+          metadata: [\n+            {\n+              processInstances: [\n+                'id',\n+                'processName',\n+                'state',\n+                'start',\n+                'lastUpdate',\n+                'businessKey'\n+              ]\n+            }\n+          ]\n+        }\n+      ],\n+      setColumnFilters: jest.fn(),\n+      setTableLoading: jest.fn(),\n+      setDisplayTable: jest.fn(),\n+      setDisplayEmptyState: jest.fn(),\n+      setFilterError: jest.fn(),\n+      getQueryTypes: {\n+        loading: false,\n+        data: {\n+          __schema: {\n+            queryType: [\n+              {\n+                name: 'TestArgument',\n+                inputFields: [\n+                  {\n+                    name: 'test',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  }\n+                ]\n+              },\n+              {\n+                name: 'AddressArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'city',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  },\n+                  {\n+                    name: 'country',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  },\n+                  {\n+                    name: 'street',\n+                    type: { name: 'TestArgument', kind: 'INPUT_OBJECT' }\n+                  },\n+                  {\n+                    name: 'zipCode',\n+                    type: { name: 'StringArgument', kind: 'INPUT_OBJECT' }\n+                  }\n+                ]\n+              },\n+              {\n+                name: 'IdArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  { name: 'id', type: { name: null, kind: 'LIST' } },\n+                  { name: 'equal', type: { name: 'String', kind: 'SCALAR' } },\n+                  { name: 'isNull', type: { name: 'Boolean', kind: 'SCALAR' } }\n+                ]\n+              }\n+            ]\n+          }\n+        }\n+      },\n+      filterChips: [],\n+      setFilterChips: jest.fn(),\n+      runFilter: true,\n+      setRunFilter: jest.fn(),\n+      finalFilters: {\n+        metadata: {\n+          processInstances: { state: { equal: 'ACTIVE' } }\n+        },\n+        trip: {\n+          country: {\n+            equal: 'Australia'\n+          }\n+        }\n+      },\n+      argument: 'TravelsArgument',\n+      setFinalFilters: jest.fn(),\n+      getSchema: {\n+        data: {\n+          __type: {\n+            name: 'TravelsArgument',\n+            inputFields: [\n+              { name: 'and', type: { name: null, kind: 'LIST' } },\n+              { name: 'or', type: { name: null, kind: 'LIST' } },\n+              {\n+                name: 'id',\n+                type: {\n+                  inputFields: [\n+                    { name: 'in', type: { name: null, __typename: '__Type' } },\n+                    {\n+                      name: 'equal',\n+                      type: { name: 'String', __typename: '__Type' }\n+                    },\n+                    {\n+                      name: 'isNull',\n+                      type: { name: 'Boolean', __typename: '__Type' }\n+                    }\n+                  ],\n+                  kind: 'INPUT_OBJECT',\n+                  name: 'IdArgument'\n+                }\n+              },\n+              {\n+                name: 'flight',\n+                type: {\n+                  name: 'FlightArgument',\n+                  kind: 'INPUT_OBJECT',\n+                  inputFields: [\n+                    {\n+                      name: 'arrival',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'departure',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'flightNumber',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'gate',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    },\n+                    {\n+                      name: 'seat',\n+                      type: {\n+                        name: 'StringArgument'\n+                      }\n+                    }\n+                  ]\n+                }\n+              },\n+              {\n+                name: 'hotel',\n+                type: {\n+                  name: 'HotelArgument',\n+                  kind: 'INPUT_OBJECT',\n+                  inputFields: [\n+                    {\n+                      name: 'address',\n+                      type: { name: 'AddressArgument', __typename: '__Type' }\n+                    },\n+                    {\n+                      name: 'bookingNumber',\n+                      type: { name: 'StringArgument', __typename: '__Type' }\n+                    }\n+                  ]\n+                }\n+              }\n+            ]\n+          }\n+        }\n+      }\n+    };\n+    // @ts-ignore\n+    useGetInputFieldsFromTypeQuery.mockReturnValue({\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'IdArgument',\n+          inputFields: [\n+            { name: 'in', type: { name: null, kind: 'LIST' } },\n+            { name: 'equal', type: { name: 'String', kind: 'SCALAR' } },\n+            { name: 'isNull', type: { name: 'Boolean', kind: 'SCALAR' } }\n+          ],\n+          kind: 'INPUT_OBJECT'\n+        }\n+      }\n+    });\n+    // @ts-ignore\n+    useGetInputFieldsFromQueryQuery.mockReturnValue({\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'TravelsArgument',\n+          inputFields: [\n+            {\n+              name: 'and',\n+              type: {\n+                name: null,\n+                kind: 'LIST',\n+                inputFields: null\n+              }\n+            },\n+            {\n+              name: 'or',\n+              type: {\n+                name: null,\n+                kind: 'LIST',\n+                inputFields: null\n+              }\n+            },\n+            {\n+              name: 'flight',\n+              type: {\n+                name: 'FlightArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'arrival',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'departure',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'flightNumber',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'gate',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'seat',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  }\n+                ]\n+              }\n+            },\n+            {\n+              name: 'hotel',\n+              type: {\n+                name: 'HotelArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'address',\n+                    type: {\n+                      name: 'AddressArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'bookingNumber',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'name',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'phone',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'room',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  }\n+                ]\n+              }\n+            }\n+          ]\n+        }\n+      }\n+    });\n+    const wrapper = mount(<DomainExplorerFilterOptions {...props} />);\n+    wrapper.update();\n+    wrapper.setProps({});\n+    // const mGraphQLResponse = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc5MTc5MQ=="}, "originalCommit": {"oid": "93d5c1144c05f68cd746b26789cbe34518d34b5d"}, "originalPosition": 569}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzA5MjQzOnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/utils/tests/Utils.test.ts", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMzo0OToxMlrOGyrz8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNzowMDo1MFrOGy0GJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc5OTc5NA==", "bodyText": "should we check the object now?", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r455799794", "createdAt": "2020-07-16T13:49:12Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/utils/tests/Utils.test.ts", "diffHunk": "@@ -83,4 +89,23 @@ describe('Tests for utility functions', () => {\n     const objValue = 'country';\n     filterColumnSelection(selectionArray, objValue);\n   });\n+  it('Test deleteKey utility function', () => {\n+    const tempObj = {\n+      metadata: {\n+        processInstances: { state: { equal: 'ACTIVE' } }\n+      }\n+    };\n+    const removeString = ['metadata', 'processInstances', 'state'];\n+    deleteKey(tempObj, removeString);\n+  });\n+  it('Test clearEmpties utility function', () => {\n+    const obj = { country: { equal: 'Australia' } };\n+    clearEmpties(obj);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93d5c1144c05f68cd746b26789cbe34518d34b5d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgwMzM3Mw==", "bodyText": "And please add tests with more cases", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r455803373", "createdAt": "2020-07-16T13:53:57Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/utils/tests/Utils.test.ts", "diffHunk": "@@ -83,4 +89,23 @@ describe('Tests for utility functions', () => {\n     const objValue = 'country';\n     filterColumnSelection(selectionArray, objValue);\n   });\n+  it('Test deleteKey utility function', () => {\n+    const tempObj = {\n+      metadata: {\n+        processInstances: { state: { equal: 'ACTIVE' } }\n+      }\n+    };\n+    const removeString = ['metadata', 'processInstances', 'state'];\n+    deleteKey(tempObj, removeString);\n+  });\n+  it('Test clearEmpties utility function', () => {\n+    const obj = { country: { equal: 'Australia' } };\n+    clearEmpties(obj);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc5OTc5NA=="}, "originalCommit": {"oid": "93d5c1144c05f68cd746b26789cbe34518d34b5d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkzNTUyNg==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r455935526", "createdAt": "2020-07-16T17:00:50Z", "author": {"login": "Sara4994"}, "path": "ui-packages/packages/common/src/utils/tests/Utils.test.ts", "diffHunk": "@@ -83,4 +89,23 @@ describe('Tests for utility functions', () => {\n     const objValue = 'country';\n     filterColumnSelection(selectionArray, objValue);\n   });\n+  it('Test deleteKey utility function', () => {\n+    const tempObj = {\n+      metadata: {\n+        processInstances: { state: { equal: 'ACTIVE' } }\n+      }\n+    };\n+    const removeString = ['metadata', 'processInstances', 'state'];\n+    deleteKey(tempObj, removeString);\n+  });\n+  it('Test clearEmpties utility function', () => {\n+    const obj = { country: { equal: 'Australia' } };\n+    clearEmpties(obj);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTc5OTc5NA=="}, "originalCommit": {"oid": "93d5c1144c05f68cd746b26789cbe34518d34b5d"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzExNzQ0OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/utils/tests/Utils.test.ts", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMzo1NDozNFrOGysDmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjo0Mzo1M1rOGyzdgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgwMzgwMQ==", "bodyText": "we should check the outcome", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r455803801", "createdAt": "2020-07-16T13:54:34Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/utils/tests/Utils.test.ts", "diffHunk": "@@ -83,4 +89,23 @@ describe('Tests for utility functions', () => {\n     const objValue = 'country';\n     filterColumnSelection(selectionArray, objValue);\n   });\n+  it('Test deleteKey utility function', () => {\n+    const tempObj = {\n+      metadata: {\n+        processInstances: { state: { equal: 'ACTIVE' } }\n+      }\n+    };\n+    const removeString = ['metadata', 'processInstances', 'state'];\n+    deleteKey(tempObj, removeString);\n+  });\n+  it('Test clearEmpties utility function', () => {\n+    const obj = { country: { equal: 'Australia' } };\n+    clearEmpties(obj);\n+  });\n+  it('Test set function', () => {\n+    const obj = { trip: { country: { equal: 'India' } } };\n+    const keys = 'trip,country,equal';\n+    const value = 'India';\n+    set(obj, keys, value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93d5c1144c05f68cd746b26789cbe34518d34b5d"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkyNTEyMw==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r455925123", "createdAt": "2020-07-16T16:43:53Z", "author": {"login": "Sara4994"}, "path": "ui-packages/packages/common/src/utils/tests/Utils.test.ts", "diffHunk": "@@ -83,4 +89,23 @@ describe('Tests for utility functions', () => {\n     const objValue = 'country';\n     filterColumnSelection(selectionArray, objValue);\n   });\n+  it('Test deleteKey utility function', () => {\n+    const tempObj = {\n+      metadata: {\n+        processInstances: { state: { equal: 'ACTIVE' } }\n+      }\n+    };\n+    const removeString = ['metadata', 'processInstances', 'state'];\n+    deleteKey(tempObj, removeString);\n+  });\n+  it('Test clearEmpties utility function', () => {\n+    const obj = { country: { equal: 'Australia' } };\n+    clearEmpties(obj);\n+  });\n+  it('Test set function', () => {\n+    const obj = { trip: { country: { equal: 'India' } } };\n+    const keys = 'trip,country,equal';\n+    const value = 'India';\n+    set(obj, keys, value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgwMzgwMQ=="}, "originalCommit": {"oid": "93d5c1144c05f68cd746b26789cbe34518d34b5d"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0MzEzMDU0OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/ServerErrors/tests/ServerErrors.test.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxMzo1NzowM1rOGysLUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQxNjo0NjowOVrOGyzi-g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgwNTc3Ng==", "bodyText": "can we check what the click did?", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r455805776", "createdAt": "2020-07-16T13:57:03Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/components/Molecules/ServerErrors/tests/ServerErrors.test.tsx", "diffHunk": "@@ -55,4 +64,27 @@ describe('ServerErrors component tests', () => {\n         .props()['children']\n     ).toEqual('\"some error\"');\n   });\n+  it('snapshot testing with small variant ', () => {\n+    const wrapper = getWrapper(\n+      <BrowserRouter>\n+        <ServerErrors {...props2} />\n+      </BrowserRouter>,\n+      'ServerErrors'\n+    );\n+    expect(wrapper).toMatchSnapshot();\n+  });\n+\n+  /* tslint:disable */\n+  it('display error button click with small variant ', () => {\n+    const wrapper = mount(\n+      <BrowserRouter>\n+        <ServerErrors {...props2} />\n+      </BrowserRouter>\n+    );\n+    wrapper\n+      .find('#display-error')\n+      .first()\n+      .simulate('click');\n+    wrapper.update();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "93d5c1144c05f68cd746b26789cbe34518d34b5d"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTkyNjUyMg==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r455926522", "createdAt": "2020-07-16T16:46:09Z", "author": {"login": "Sara4994"}, "path": "ui-packages/packages/common/src/components/Molecules/ServerErrors/tests/ServerErrors.test.tsx", "diffHunk": "@@ -55,4 +64,27 @@ describe('ServerErrors component tests', () => {\n         .props()['children']\n     ).toEqual('\"some error\"');\n   });\n+  it('snapshot testing with small variant ', () => {\n+    const wrapper = getWrapper(\n+      <BrowserRouter>\n+        <ServerErrors {...props2} />\n+      </BrowserRouter>,\n+      'ServerErrors'\n+    );\n+    expect(wrapper).toMatchSnapshot();\n+  });\n+\n+  /* tslint:disable */\n+  it('display error button click with small variant ', () => {\n+    const wrapper = mount(\n+      <BrowserRouter>\n+        <ServerErrors {...props2} />\n+      </BrowserRouter>\n+    );\n+    wrapper\n+      .find('#display-error')\n+      .first()\n+      .simulate('click');\n+    wrapper.update();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NTgwNTc3Ng=="}, "originalCommit": {"oid": "93d5c1144c05f68cd746b26789cbe34518d34b5d"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDcxMjk2OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDoyNzoyOVrOGy7i_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwNjo0MjowN1rOG0qOkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA1NzU5Nw==", "bodyText": "@Sara4994 we have to avoid use process instance stuff in common package to keep that to find other kind of assets.\nI think the generic part of the  domain explorer have to filter just by domain data, (thinking in reuse this component for other purposes)", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r456057597", "createdAt": "2020-07-16T20:27:29Z", "author": {"login": "nmirasch"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "diffHunk": "@@ -0,0 +1,773 @@\n+import React, { useState, useEffect } from 'react';\n+import {\n+  Select,\n+  SelectVariant,\n+  SelectGroup,\n+  SelectOption,\n+  TextInput,\n+  Button,\n+  Dropdown,\n+  DropdownToggle,\n+  DropdownItem,\n+  InputGroup,\n+  Popover,\n+  PopoverPosition\n+} from '@patternfly/react-core';\n+import { GraphQL } from '../../../graphql/types';\n+\n+import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n+import gql from 'graphql-tag';\n+import { query } from 'gql-query-builder';\n+import { useApolloClient } from 'react-apollo';\n+import { QuestionCircleIcon } from '@patternfly/react-icons';\n+import { validateResponse, set, removeDuplicates } from '../../../utils/Utils';\n+import './DomainExplorerFilterOptions.css';\n+\n+const DomainExplorerFilterOptions = ({\n+  argument,\n+  currentDomain,\n+  filterChips,\n+  finalFilters,\n+  getQueryTypes,\n+  getSchema,\n+  parameters,\n+  runFilter,\n+  reset,\n+  setColumnFilters,\n+  setDisplayTable,\n+  setDisplayEmptyState,\n+  setFinalFilters,\n+  setFilterError,\n+  setFilterChips,\n+  setReset,\n+  setRunFilter,\n+  setTableLoading\n+}) => {\n+  // tslint:disable: forin\n+  // tslint:disable: no-floating-promises\n+  const client = useApolloClient();\n+  const [initData2, setInitData2] = useState<any>({\n+    __schema: { queryType: [] }\n+  });\n+  const [isExpanded, setIsExpanded] = useState(false);\n+  const [isFilterDropdownOpen, setIsFilterDropdownOpen] = useState(false);\n+  const [selected, setSelected] = useState('id');\n+  const [selectTypes, setSelectTypes] = useState('equal');\n+  const [textValue, setTextValue] = useState('');\n+  const [inputArray, setInputArray] = useState('');\n+  const [isOpen, setIsOpen] = useState(false);\n+  const [currentArgument, setCurrentArgument] = useState('');\n+  const [currentArgumentScalar, setCurrentArgumentScalar] = useState('String');\n+  const [typeParent, setTypeParent] = useState<any>([]);\n+  const [currentBoolean, setCurrentBoolean] = useState('boolean');\n+  const [stateToggle, setStateToggle] = useState(false);\n+  const [multiStateToggle, setMultiStateToggle] = useState(false);\n+  const [selectedState, setSelectedState] = useState('');\n+  const [multiState, setMultiState] = useState([]);\n+\n+  const nullTypes = [\n+    null,\n+    'Boolean',\n+    'BooleanArgument',\n+    'DateArgument',\n+    'DateRange',\n+    'IdArgument',\n+    'NumericRange',\n+    'NumericArgument',\n+    'ProcessInstanceState',\n+    'ProcessInstanceStateArgument',\n+    'String',\n+    'StringArgument',\n+    'StringArrayArgument'\n+  ];\n+\n+  const scalarTypes = ['Boolean', 'String'];\n+\n+  const nonArgs = [null, 'Boolean', 'String'];\n+  const stateArray = [", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b41657435e587fac99d1e714e86ddd9b0b46de1"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE4NDg5NA==", "bodyText": "+1 will be very hard to make it generic later on. I believe this can be avoided if you check that the attribute is of type enum. Then you can get the enum values from the schema itself.", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r456184894", "createdAt": "2020-07-17T02:34:09Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "diffHunk": "@@ -0,0 +1,773 @@\n+import React, { useState, useEffect } from 'react';\n+import {\n+  Select,\n+  SelectVariant,\n+  SelectGroup,\n+  SelectOption,\n+  TextInput,\n+  Button,\n+  Dropdown,\n+  DropdownToggle,\n+  DropdownItem,\n+  InputGroup,\n+  Popover,\n+  PopoverPosition\n+} from '@patternfly/react-core';\n+import { GraphQL } from '../../../graphql/types';\n+\n+import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n+import gql from 'graphql-tag';\n+import { query } from 'gql-query-builder';\n+import { useApolloClient } from 'react-apollo';\n+import { QuestionCircleIcon } from '@patternfly/react-icons';\n+import { validateResponse, set, removeDuplicates } from '../../../utils/Utils';\n+import './DomainExplorerFilterOptions.css';\n+\n+const DomainExplorerFilterOptions = ({\n+  argument,\n+  currentDomain,\n+  filterChips,\n+  finalFilters,\n+  getQueryTypes,\n+  getSchema,\n+  parameters,\n+  runFilter,\n+  reset,\n+  setColumnFilters,\n+  setDisplayTable,\n+  setDisplayEmptyState,\n+  setFinalFilters,\n+  setFilterError,\n+  setFilterChips,\n+  setReset,\n+  setRunFilter,\n+  setTableLoading\n+}) => {\n+  // tslint:disable: forin\n+  // tslint:disable: no-floating-promises\n+  const client = useApolloClient();\n+  const [initData2, setInitData2] = useState<any>({\n+    __schema: { queryType: [] }\n+  });\n+  const [isExpanded, setIsExpanded] = useState(false);\n+  const [isFilterDropdownOpen, setIsFilterDropdownOpen] = useState(false);\n+  const [selected, setSelected] = useState('id');\n+  const [selectTypes, setSelectTypes] = useState('equal');\n+  const [textValue, setTextValue] = useState('');\n+  const [inputArray, setInputArray] = useState('');\n+  const [isOpen, setIsOpen] = useState(false);\n+  const [currentArgument, setCurrentArgument] = useState('');\n+  const [currentArgumentScalar, setCurrentArgumentScalar] = useState('String');\n+  const [typeParent, setTypeParent] = useState<any>([]);\n+  const [currentBoolean, setCurrentBoolean] = useState('boolean');\n+  const [stateToggle, setStateToggle] = useState(false);\n+  const [multiStateToggle, setMultiStateToggle] = useState(false);\n+  const [selectedState, setSelectedState] = useState('');\n+  const [multiState, setMultiState] = useState([]);\n+\n+  const nullTypes = [\n+    null,\n+    'Boolean',\n+    'BooleanArgument',\n+    'DateArgument',\n+    'DateRange',\n+    'IdArgument',\n+    'NumericRange',\n+    'NumericArgument',\n+    'ProcessInstanceState',\n+    'ProcessInstanceStateArgument',\n+    'String',\n+    'StringArgument',\n+    'StringArrayArgument'\n+  ];\n+\n+  const scalarTypes = ['Boolean', 'String'];\n+\n+  const nonArgs = [null, 'Boolean', 'String'];\n+  const stateArray = [", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA1NzU5Nw=="}, "originalCommit": {"oid": "4b41657435e587fac99d1e714e86ddd9b0b46de1"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjMzNDc0OA==", "bodyText": "@cristianonicolai  i did try to get enum by having check, I got enum as type for field = state, operator = 'equal'. But in case of field = state, operator = 'in' type is provided as LIST. Thats the reason i had to keep those values in an array", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r456334748", "createdAt": "2020-07-17T09:38:36Z", "author": {"login": "Sara4994"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "diffHunk": "@@ -0,0 +1,773 @@\n+import React, { useState, useEffect } from 'react';\n+import {\n+  Select,\n+  SelectVariant,\n+  SelectGroup,\n+  SelectOption,\n+  TextInput,\n+  Button,\n+  Dropdown,\n+  DropdownToggle,\n+  DropdownItem,\n+  InputGroup,\n+  Popover,\n+  PopoverPosition\n+} from '@patternfly/react-core';\n+import { GraphQL } from '../../../graphql/types';\n+\n+import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n+import gql from 'graphql-tag';\n+import { query } from 'gql-query-builder';\n+import { useApolloClient } from 'react-apollo';\n+import { QuestionCircleIcon } from '@patternfly/react-icons';\n+import { validateResponse, set, removeDuplicates } from '../../../utils/Utils';\n+import './DomainExplorerFilterOptions.css';\n+\n+const DomainExplorerFilterOptions = ({\n+  argument,\n+  currentDomain,\n+  filterChips,\n+  finalFilters,\n+  getQueryTypes,\n+  getSchema,\n+  parameters,\n+  runFilter,\n+  reset,\n+  setColumnFilters,\n+  setDisplayTable,\n+  setDisplayEmptyState,\n+  setFinalFilters,\n+  setFilterError,\n+  setFilterChips,\n+  setReset,\n+  setRunFilter,\n+  setTableLoading\n+}) => {\n+  // tslint:disable: forin\n+  // tslint:disable: no-floating-promises\n+  const client = useApolloClient();\n+  const [initData2, setInitData2] = useState<any>({\n+    __schema: { queryType: [] }\n+  });\n+  const [isExpanded, setIsExpanded] = useState(false);\n+  const [isFilterDropdownOpen, setIsFilterDropdownOpen] = useState(false);\n+  const [selected, setSelected] = useState('id');\n+  const [selectTypes, setSelectTypes] = useState('equal');\n+  const [textValue, setTextValue] = useState('');\n+  const [inputArray, setInputArray] = useState('');\n+  const [isOpen, setIsOpen] = useState(false);\n+  const [currentArgument, setCurrentArgument] = useState('');\n+  const [currentArgumentScalar, setCurrentArgumentScalar] = useState('String');\n+  const [typeParent, setTypeParent] = useState<any>([]);\n+  const [currentBoolean, setCurrentBoolean] = useState('boolean');\n+  const [stateToggle, setStateToggle] = useState(false);\n+  const [multiStateToggle, setMultiStateToggle] = useState(false);\n+  const [selectedState, setSelectedState] = useState('');\n+  const [multiState, setMultiState] = useState([]);\n+\n+  const nullTypes = [\n+    null,\n+    'Boolean',\n+    'BooleanArgument',\n+    'DateArgument',\n+    'DateRange',\n+    'IdArgument',\n+    'NumericRange',\n+    'NumericArgument',\n+    'ProcessInstanceState',\n+    'ProcessInstanceStateArgument',\n+    'String',\n+    'StringArgument',\n+    'StringArrayArgument'\n+  ];\n+\n+  const scalarTypes = ['Boolean', 'String'];\n+\n+  const nonArgs = [null, 'Boolean', 'String'];\n+  const stateArray = [", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA1NzU5Nw=="}, "originalCommit": {"oid": "4b41657435e587fac99d1e714e86ddd9b0b46de1"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzAxODE2NA==", "bodyText": "the ProcessInstanceStateArgument defines equal and in as types, one is a single ProcessInstanceState and the other is and array of ProcessInstanceState. If the type is a list, should be possible to get the actual type. https://github.com/kiegroup/kogito-apps/blob/master/data-index/data-index-service/src/main/resources/schema.graphqls#L243", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r457018164", "createdAt": "2020-07-20T03:38:54Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "diffHunk": "@@ -0,0 +1,773 @@\n+import React, { useState, useEffect } from 'react';\n+import {\n+  Select,\n+  SelectVariant,\n+  SelectGroup,\n+  SelectOption,\n+  TextInput,\n+  Button,\n+  Dropdown,\n+  DropdownToggle,\n+  DropdownItem,\n+  InputGroup,\n+  Popover,\n+  PopoverPosition\n+} from '@patternfly/react-core';\n+import { GraphQL } from '../../../graphql/types';\n+\n+import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n+import gql from 'graphql-tag';\n+import { query } from 'gql-query-builder';\n+import { useApolloClient } from 'react-apollo';\n+import { QuestionCircleIcon } from '@patternfly/react-icons';\n+import { validateResponse, set, removeDuplicates } from '../../../utils/Utils';\n+import './DomainExplorerFilterOptions.css';\n+\n+const DomainExplorerFilterOptions = ({\n+  argument,\n+  currentDomain,\n+  filterChips,\n+  finalFilters,\n+  getQueryTypes,\n+  getSchema,\n+  parameters,\n+  runFilter,\n+  reset,\n+  setColumnFilters,\n+  setDisplayTable,\n+  setDisplayEmptyState,\n+  setFinalFilters,\n+  setFilterError,\n+  setFilterChips,\n+  setReset,\n+  setRunFilter,\n+  setTableLoading\n+}) => {\n+  // tslint:disable: forin\n+  // tslint:disable: no-floating-promises\n+  const client = useApolloClient();\n+  const [initData2, setInitData2] = useState<any>({\n+    __schema: { queryType: [] }\n+  });\n+  const [isExpanded, setIsExpanded] = useState(false);\n+  const [isFilterDropdownOpen, setIsFilterDropdownOpen] = useState(false);\n+  const [selected, setSelected] = useState('id');\n+  const [selectTypes, setSelectTypes] = useState('equal');\n+  const [textValue, setTextValue] = useState('');\n+  const [inputArray, setInputArray] = useState('');\n+  const [isOpen, setIsOpen] = useState(false);\n+  const [currentArgument, setCurrentArgument] = useState('');\n+  const [currentArgumentScalar, setCurrentArgumentScalar] = useState('String');\n+  const [typeParent, setTypeParent] = useState<any>([]);\n+  const [currentBoolean, setCurrentBoolean] = useState('boolean');\n+  const [stateToggle, setStateToggle] = useState(false);\n+  const [multiStateToggle, setMultiStateToggle] = useState(false);\n+  const [selectedState, setSelectedState] = useState('');\n+  const [multiState, setMultiState] = useState([]);\n+\n+  const nullTypes = [\n+    null,\n+    'Boolean',\n+    'BooleanArgument',\n+    'DateArgument',\n+    'DateRange',\n+    'IdArgument',\n+    'NumericRange',\n+    'NumericArgument',\n+    'ProcessInstanceState',\n+    'ProcessInstanceStateArgument',\n+    'String',\n+    'StringArgument',\n+    'StringArrayArgument'\n+  ];\n+\n+  const scalarTypes = ['Boolean', 'String'];\n+\n+  const nonArgs = [null, 'Boolean', 'String'];\n+  const stateArray = [", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA1NzU5Nw=="}, "originalCommit": {"oid": "4b41657435e587fac99d1e714e86ddd9b0b46de1"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg3MDk5NA==", "bodyText": "@cristianonicolai @nmirasch as suggested handled using query to fetch enum", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r457870994", "createdAt": "2020-07-21T06:42:07Z", "author": {"login": "Sara4994"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "diffHunk": "@@ -0,0 +1,773 @@\n+import React, { useState, useEffect } from 'react';\n+import {\n+  Select,\n+  SelectVariant,\n+  SelectGroup,\n+  SelectOption,\n+  TextInput,\n+  Button,\n+  Dropdown,\n+  DropdownToggle,\n+  DropdownItem,\n+  InputGroup,\n+  Popover,\n+  PopoverPosition\n+} from '@patternfly/react-core';\n+import { GraphQL } from '../../../graphql/types';\n+\n+import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n+import gql from 'graphql-tag';\n+import { query } from 'gql-query-builder';\n+import { useApolloClient } from 'react-apollo';\n+import { QuestionCircleIcon } from '@patternfly/react-icons';\n+import { validateResponse, set, removeDuplicates } from '../../../utils/Utils';\n+import './DomainExplorerFilterOptions.css';\n+\n+const DomainExplorerFilterOptions = ({\n+  argument,\n+  currentDomain,\n+  filterChips,\n+  finalFilters,\n+  getQueryTypes,\n+  getSchema,\n+  parameters,\n+  runFilter,\n+  reset,\n+  setColumnFilters,\n+  setDisplayTable,\n+  setDisplayEmptyState,\n+  setFinalFilters,\n+  setFilterError,\n+  setFilterChips,\n+  setReset,\n+  setRunFilter,\n+  setTableLoading\n+}) => {\n+  // tslint:disable: forin\n+  // tslint:disable: no-floating-promises\n+  const client = useApolloClient();\n+  const [initData2, setInitData2] = useState<any>({\n+    __schema: { queryType: [] }\n+  });\n+  const [isExpanded, setIsExpanded] = useState(false);\n+  const [isFilterDropdownOpen, setIsFilterDropdownOpen] = useState(false);\n+  const [selected, setSelected] = useState('id');\n+  const [selectTypes, setSelectTypes] = useState('equal');\n+  const [textValue, setTextValue] = useState('');\n+  const [inputArray, setInputArray] = useState('');\n+  const [isOpen, setIsOpen] = useState(false);\n+  const [currentArgument, setCurrentArgument] = useState('');\n+  const [currentArgumentScalar, setCurrentArgumentScalar] = useState('String');\n+  const [typeParent, setTypeParent] = useState<any>([]);\n+  const [currentBoolean, setCurrentBoolean] = useState('boolean');\n+  const [stateToggle, setStateToggle] = useState(false);\n+  const [multiStateToggle, setMultiStateToggle] = useState(false);\n+  const [selectedState, setSelectedState] = useState('');\n+  const [multiState, setMultiState] = useState([]);\n+\n+  const nullTypes = [\n+    null,\n+    'Boolean',\n+    'BooleanArgument',\n+    'DateArgument',\n+    'DateRange',\n+    'IdArgument',\n+    'NumericRange',\n+    'NumericArgument',\n+    'ProcessInstanceState',\n+    'ProcessInstanceStateArgument',\n+    'String',\n+    'StringArgument',\n+    'StringArrayArgument'\n+  ];\n+\n+  const scalarTypes = ['Boolean', 'String'];\n+\n+  const nonArgs = [null, 'Boolean', 'String'];\n+  const stateArray = [", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA1NzU5Nw=="}, "originalCommit": {"oid": "4b41657435e587fac99d1e714e86ddd9b0b46de1"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NDc5MjI2OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xNlQyMDo1MDo1OVrOGy8T7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNDozMTo0OVrOGzE_Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA3MDEyNw==", "bodyText": "@Sara4994  could you find a better name for this?", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r456070127", "createdAt": "2020-07-16T20:50:59Z", "author": {"login": "nmirasch"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "diffHunk": "@@ -0,0 +1,773 @@\n+import React, { useState, useEffect } from 'react';\n+import {\n+  Select,\n+  SelectVariant,\n+  SelectGroup,\n+  SelectOption,\n+  TextInput,\n+  Button,\n+  Dropdown,\n+  DropdownToggle,\n+  DropdownItem,\n+  InputGroup,\n+  Popover,\n+  PopoverPosition\n+} from '@patternfly/react-core';\n+import { GraphQL } from '../../../graphql/types';\n+\n+import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n+import gql from 'graphql-tag';\n+import { query } from 'gql-query-builder';\n+import { useApolloClient } from 'react-apollo';\n+import { QuestionCircleIcon } from '@patternfly/react-icons';\n+import { validateResponse, set, removeDuplicates } from '../../../utils/Utils';\n+import './DomainExplorerFilterOptions.css';\n+\n+const DomainExplorerFilterOptions = ({\n+  argument,\n+  currentDomain,\n+  filterChips,\n+  finalFilters,\n+  getQueryTypes,\n+  getSchema,\n+  parameters,\n+  runFilter,\n+  reset,\n+  setColumnFilters,\n+  setDisplayTable,\n+  setDisplayEmptyState,\n+  setFinalFilters,\n+  setFilterError,\n+  setFilterChips,\n+  setReset,\n+  setRunFilter,\n+  setTableLoading\n+}) => {\n+  // tslint:disable: forin\n+  // tslint:disable: no-floating-promises\n+  const client = useApolloClient();\n+  const [initData2, setInitData2] = useState<any>({\n+    __schema: { queryType: [] }\n+  });\n+  const [isExpanded, setIsExpanded] = useState(false);\n+  const [isFilterDropdownOpen, setIsFilterDropdownOpen] = useState(false);\n+  const [selected, setSelected] = useState('id');\n+  const [selectTypes, setSelectTypes] = useState('equal');\n+  const [textValue, setTextValue] = useState('');\n+  const [inputArray, setInputArray] = useState('');\n+  const [isOpen, setIsOpen] = useState(false);\n+  const [currentArgument, setCurrentArgument] = useState('');\n+  const [currentArgumentScalar, setCurrentArgumentScalar] = useState('String');\n+  const [typeParent, setTypeParent] = useState<any>([]);\n+  const [currentBoolean, setCurrentBoolean] = useState('boolean');\n+  const [stateToggle, setStateToggle] = useState(false);\n+  const [multiStateToggle, setMultiStateToggle] = useState(false);\n+  const [selectedState, setSelectedState] = useState('');\n+  const [multiState, setMultiState] = useState([]);\n+\n+  const nullTypes = [", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b41657435e587fac99d1e714e86ddd9b0b46de1"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIxMjI3MA==", "bodyText": "changed \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r456212270", "createdAt": "2020-07-17T04:31:49Z", "author": {"login": "Sara4994"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "diffHunk": "@@ -0,0 +1,773 @@\n+import React, { useState, useEffect } from 'react';\n+import {\n+  Select,\n+  SelectVariant,\n+  SelectGroup,\n+  SelectOption,\n+  TextInput,\n+  Button,\n+  Dropdown,\n+  DropdownToggle,\n+  DropdownItem,\n+  InputGroup,\n+  Popover,\n+  PopoverPosition\n+} from '@patternfly/react-core';\n+import { GraphQL } from '../../../graphql/types';\n+\n+import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n+import gql from 'graphql-tag';\n+import { query } from 'gql-query-builder';\n+import { useApolloClient } from 'react-apollo';\n+import { QuestionCircleIcon } from '@patternfly/react-icons';\n+import { validateResponse, set, removeDuplicates } from '../../../utils/Utils';\n+import './DomainExplorerFilterOptions.css';\n+\n+const DomainExplorerFilterOptions = ({\n+  argument,\n+  currentDomain,\n+  filterChips,\n+  finalFilters,\n+  getQueryTypes,\n+  getSchema,\n+  parameters,\n+  runFilter,\n+  reset,\n+  setColumnFilters,\n+  setDisplayTable,\n+  setDisplayEmptyState,\n+  setFinalFilters,\n+  setFilterError,\n+  setFilterChips,\n+  setReset,\n+  setRunFilter,\n+  setTableLoading\n+}) => {\n+  // tslint:disable: forin\n+  // tslint:disable: no-floating-promises\n+  const client = useApolloClient();\n+  const [initData2, setInitData2] = useState<any>({\n+    __schema: { queryType: [] }\n+  });\n+  const [isExpanded, setIsExpanded] = useState(false);\n+  const [isFilterDropdownOpen, setIsFilterDropdownOpen] = useState(false);\n+  const [selected, setSelected] = useState('id');\n+  const [selectTypes, setSelectTypes] = useState('equal');\n+  const [textValue, setTextValue] = useState('');\n+  const [inputArray, setInputArray] = useState('');\n+  const [isOpen, setIsOpen] = useState(false);\n+  const [currentArgument, setCurrentArgument] = useState('');\n+  const [currentArgumentScalar, setCurrentArgumentScalar] = useState('String');\n+  const [typeParent, setTypeParent] = useState<any>([]);\n+  const [currentBoolean, setCurrentBoolean] = useState('boolean');\n+  const [stateToggle, setStateToggle] = useState(false);\n+  const [multiStateToggle, setMultiStateToggle] = useState(false);\n+  const [selectedState, setSelectedState] = useState('');\n+  const [multiState, setMultiState] = useState([]);\n+\n+  const nullTypes = [", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjA3MDEyNw=="}, "originalCommit": {"oid": "4b41657435e587fac99d1e714e86ddd9b0b46de1"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NTU2Mzg5OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerManageColumns/DomainExplorerManageColumns.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMjozNTo0NFrOGzDV_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwNDozODoyN1rOGzFFUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE4NTM0MQ==", "bodyText": "would be possible to define the actual type here?", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r456185341", "createdAt": "2020-07-17T02:35:44Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerManageColumns/DomainExplorerManageColumns.tsx", "diffHunk": "@@ -53,6 +57,8 @@ export interface IOwnProps {\n   metaData: any;\n   setIsModalOpen: any;\n   isModalOpen: boolean;\n+  finalFilters: any;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b41657435e587fac99d1e714e86ddd9b0b46de1"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjIxMzg0MA==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r456213840", "createdAt": "2020-07-17T04:38:27Z", "author": {"login": "Sara4994"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerManageColumns/DomainExplorerManageColumns.tsx", "diffHunk": "@@ -53,6 +57,8 @@ export interface IOwnProps {\n   metaData: any;\n   setIsModalOpen: any;\n   isModalOpen: boolean;\n+  finalFilters: any;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE4NTM0MQ=="}, "originalCommit": {"oid": "4b41657435e587fac99d1e714e86ddd9b0b46de1"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NTU2Njk3OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Organisms/DomainExplorer/DomainExplorer.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMjozNzo0N1rOGzDXyw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMjozNzo0N1rOGzDXyw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE4NTgwMw==", "bodyText": "please use specific types", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r456185803", "createdAt": "2020-07-17T02:37:47Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/common/src/components/Organisms/DomainExplorer/DomainExplorer.tsx", "diffHunk": "@@ -5,33 +5,45 @@ import {\n   DataToolbarToggleGroup,\n   DataToolbarGroup,\n   Card,\n-  Bullseye\n+  Bullseye,\n+  DataToolbarItem,\n+  DataToolbarFilter\n } from '@patternfly/react-core';\n import { FilterIcon } from '@patternfly/react-icons';\n+import DomainExplorerFilterOptions from '../../Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions';\n import DomainExplorerManageColumns from '../../Molecules/DomainExplorerManageColumns/DomainExplorerManageColumns';\n import DomainExplorerTable from '../../Molecules/DomainExplorerTable/DomainExplorerTable';\n import KogitoSpinner from '../../Atoms/KogitoSpinner/KogitoSpinner';\n import LoadMore from '../../Atoms/LoadMore/LoadMore';\n import ServerErrors from '../../Molecules/ServerErrors/ServerErrors';\n+import { deleteKey, clearEmpties } from '../../../utils/Utils';\n import './DomainExplorer.css';\n \n import { GraphQL } from '../../../graphql/types';\n import useGetQueryTypesQuery = GraphQL.useGetQueryTypesQuery;\n import useGetQueryFieldsQuery = GraphQL.useGetQueryFieldsQuery;\n import useGetColumnPickerAttributesQuery = GraphQL.useGetColumnPickerAttributesQuery;\n-\n+import useGetInputFieldsFromQueryQuery = GraphQL.useGetInputFieldsFromQueryQuery;\n interface IOwnProps {\n   domainName: string;\n   rememberedParams: any;\n   rememberedSelections: any;\n   metaData: any;\n+  rememberedFilters: any;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b41657435e587fac99d1e714e86ddd9b0b46de1"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg0NTU3NzI5OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Organisms/DomainExplorer/DomainExplorer.tsx", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xN1QwMjo0NDowM1rOGzDeGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNToxODo0N1rOG18g7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE4NzQxNw==", "bodyText": "It seems just a big dependency between these components, in high level, it should mostly get a domain that is needed to find out the schema object and have a method callback about when a new filter is applied", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r456187417", "createdAt": "2020-07-17T02:44:03Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/common/src/components/Organisms/DomainExplorer/DomainExplorer.tsx", "diffHunk": "@@ -113,68 +146,136 @@ const DomainExplorer: React.FC<IOwnProps> = ({\n       setEnableCache(true);\n       setParameters(rememberedParams);\n       setSelected(rememberedSelections);\n+      setFinalFilters(rememberedFilters);\n+      setFilterChips(rememberedChips);\n     } else {\n       setParameters(prev => [...defaultParams, ...prev]);\n       setSelected(selections);\n     }\n   }, [columnPickerType, selections.length > 0]);\n \n+  const onDeleteChip = (type = '', id = '') => {\n+    if (type) {\n+      setFilterChips(prev => prev.filter(item => item !== id));\n+      const chipText = id.split(':');\n+      let removeString = chipText[0].split('/');\n+      removeString = removeString.map(stringEle => stringEle.trim());\n+      let tempObj = finalFilters;\n+      tempObj = deleteKey(tempObj, removeString);\n+      const FinalObj = clearEmpties(tempObj);\n+      setFinalFilters(FinalObj);\n+      setRunFilter(true);\n+    } else {\n+      setFinalFilters({\n+        metadata: {\n+          processInstances: {\n+            state: {\n+              equal: 'ACTIVE'\n+            }\n+          }\n+        }\n+      });\n+      setFilterChips(['metadata / processInstances / state: ACTIVE']);\n+      setReset(true);\n+    }\n+  };\n   const renderToolbar = () => {\n     return (\n       <DataToolbar\n         id=\"data-toolbar-with-chip-groups\"\n         className=\"pf-m-toggle-group-container\"\n         collapseListedFiltersBreakpoint=\"md\"\n+        clearAllFilters={onDeleteChip}\n+        clearFiltersButtonText=\"Reset to default\"\n       >\n         <DataToolbarContent>\n-          <DataToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"md\">\n-            <DataToolbarGroup>\n-              {!getPicker.loading && (\n-                <DomainExplorerManageColumns\n-                  columnPickerType={columnPickerType}\n-                  setColumnFilters={onAddColumnFilters}\n-                  setTableLoading={setTableLoading}\n-                  getQueryTypes={getQueryTypes}\n-                  setDisplayTable={setDisplayTable}\n-                  parameters={parameters}\n-                  setParameters={setParameters}\n-                  selected={selected}\n-                  setSelected={setSelected}\n-                  data={data}\n-                  getPicker={getPicker}\n-                  setError={setError}\n-                  setDisplayEmptyState={setDisplayEmptyState}\n-                  rememberedParams={rememberedParams}\n-                  enableCache={enableCache}\n-                  setEnableCache={setEnableCache}\n-                  pageSize={pageSize}\n-                  offsetVal={offset}\n-                  setOffsetVal={setOffset}\n-                  setPageSize={setPageSize}\n-                  setIsLoadingMore={setIsLoadingMore}\n-                  isLoadingMore={isLoadingMore}\n-                  metaData={metaData}\n-                  setIsModalOpen={setIsModalOpen}\n-                  isModalOpen={isModalOpen}\n-                />\n-              )}\n-            </DataToolbarGroup>\n-          </DataToolbarToggleGroup>\n+          {!getPicker.loading && (\n+            <>\n+              <DataToolbarToggleGroup\n+                toggleIcon={<FilterIcon />}\n+                breakpoint=\"xl\"\n+              >\n+                {!getQuery.loading && !getQueryTypes.loading && (\n+                  <DataToolbarFilter\n+                    categoryName=\"Filters\"\n+                    chips={filterChips}\n+                    deleteChip={onDeleteChip}\n+                  >\n+                    <DataToolbarItem>\n+                      <DomainExplorerFilterOptions\n+                        argument={argument}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b41657435e587fac99d1e714e86ddd9b0b46de1"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzg3MTgwMQ==", "bodyText": "@cristianonicolai as discussed, removed query from ManageColumns component and some of its dependencies. Now query inside FilterOptions component works generic to handle manage columns and filters", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r457871801", "createdAt": "2020-07-21T06:44:08Z", "author": {"login": "Sara4994"}, "path": "ui-packages/packages/common/src/components/Organisms/DomainExplorer/DomainExplorer.tsx", "diffHunk": "@@ -113,68 +146,136 @@ const DomainExplorer: React.FC<IOwnProps> = ({\n       setEnableCache(true);\n       setParameters(rememberedParams);\n       setSelected(rememberedSelections);\n+      setFinalFilters(rememberedFilters);\n+      setFilterChips(rememberedChips);\n     } else {\n       setParameters(prev => [...defaultParams, ...prev]);\n       setSelected(selections);\n     }\n   }, [columnPickerType, selections.length > 0]);\n \n+  const onDeleteChip = (type = '', id = '') => {\n+    if (type) {\n+      setFilterChips(prev => prev.filter(item => item !== id));\n+      const chipText = id.split(':');\n+      let removeString = chipText[0].split('/');\n+      removeString = removeString.map(stringEle => stringEle.trim());\n+      let tempObj = finalFilters;\n+      tempObj = deleteKey(tempObj, removeString);\n+      const FinalObj = clearEmpties(tempObj);\n+      setFinalFilters(FinalObj);\n+      setRunFilter(true);\n+    } else {\n+      setFinalFilters({\n+        metadata: {\n+          processInstances: {\n+            state: {\n+              equal: 'ACTIVE'\n+            }\n+          }\n+        }\n+      });\n+      setFilterChips(['metadata / processInstances / state: ACTIVE']);\n+      setReset(true);\n+    }\n+  };\n   const renderToolbar = () => {\n     return (\n       <DataToolbar\n         id=\"data-toolbar-with-chip-groups\"\n         className=\"pf-m-toggle-group-container\"\n         collapseListedFiltersBreakpoint=\"md\"\n+        clearAllFilters={onDeleteChip}\n+        clearFiltersButtonText=\"Reset to default\"\n       >\n         <DataToolbarContent>\n-          <DataToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"md\">\n-            <DataToolbarGroup>\n-              {!getPicker.loading && (\n-                <DomainExplorerManageColumns\n-                  columnPickerType={columnPickerType}\n-                  setColumnFilters={onAddColumnFilters}\n-                  setTableLoading={setTableLoading}\n-                  getQueryTypes={getQueryTypes}\n-                  setDisplayTable={setDisplayTable}\n-                  parameters={parameters}\n-                  setParameters={setParameters}\n-                  selected={selected}\n-                  setSelected={setSelected}\n-                  data={data}\n-                  getPicker={getPicker}\n-                  setError={setError}\n-                  setDisplayEmptyState={setDisplayEmptyState}\n-                  rememberedParams={rememberedParams}\n-                  enableCache={enableCache}\n-                  setEnableCache={setEnableCache}\n-                  pageSize={pageSize}\n-                  offsetVal={offset}\n-                  setOffsetVal={setOffset}\n-                  setPageSize={setPageSize}\n-                  setIsLoadingMore={setIsLoadingMore}\n-                  isLoadingMore={isLoadingMore}\n-                  metaData={metaData}\n-                  setIsModalOpen={setIsModalOpen}\n-                  isModalOpen={isModalOpen}\n-                />\n-              )}\n-            </DataToolbarGroup>\n-          </DataToolbarToggleGroup>\n+          {!getPicker.loading && (\n+            <>\n+              <DataToolbarToggleGroup\n+                toggleIcon={<FilterIcon />}\n+                breakpoint=\"xl\"\n+              >\n+                {!getQuery.loading && !getQueryTypes.loading && (\n+                  <DataToolbarFilter\n+                    categoryName=\"Filters\"\n+                    chips={filterChips}\n+                    deleteChip={onDeleteChip}\n+                  >\n+                    <DataToolbarItem>\n+                      <DomainExplorerFilterOptions\n+                        argument={argument}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE4NzQxNw=="}, "originalCommit": {"oid": "4b41657435e587fac99d1e714e86ddd9b0b46de1"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxOTE4MQ==", "bodyText": "@Sara4994 thats good but still feels that the dependency between DomainExplorer and DomainExplorerFilterOptions is huge, based on the amount of arguments we have in here. Would be good if that could be avoided.", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r459219181", "createdAt": "2020-07-23T05:18:47Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/common/src/components/Organisms/DomainExplorer/DomainExplorer.tsx", "diffHunk": "@@ -113,68 +146,136 @@ const DomainExplorer: React.FC<IOwnProps> = ({\n       setEnableCache(true);\n       setParameters(rememberedParams);\n       setSelected(rememberedSelections);\n+      setFinalFilters(rememberedFilters);\n+      setFilterChips(rememberedChips);\n     } else {\n       setParameters(prev => [...defaultParams, ...prev]);\n       setSelected(selections);\n     }\n   }, [columnPickerType, selections.length > 0]);\n \n+  const onDeleteChip = (type = '', id = '') => {\n+    if (type) {\n+      setFilterChips(prev => prev.filter(item => item !== id));\n+      const chipText = id.split(':');\n+      let removeString = chipText[0].split('/');\n+      removeString = removeString.map(stringEle => stringEle.trim());\n+      let tempObj = finalFilters;\n+      tempObj = deleteKey(tempObj, removeString);\n+      const FinalObj = clearEmpties(tempObj);\n+      setFinalFilters(FinalObj);\n+      setRunFilter(true);\n+    } else {\n+      setFinalFilters({\n+        metadata: {\n+          processInstances: {\n+            state: {\n+              equal: 'ACTIVE'\n+            }\n+          }\n+        }\n+      });\n+      setFilterChips(['metadata / processInstances / state: ACTIVE']);\n+      setReset(true);\n+    }\n+  };\n   const renderToolbar = () => {\n     return (\n       <DataToolbar\n         id=\"data-toolbar-with-chip-groups\"\n         className=\"pf-m-toggle-group-container\"\n         collapseListedFiltersBreakpoint=\"md\"\n+        clearAllFilters={onDeleteChip}\n+        clearFiltersButtonText=\"Reset to default\"\n       >\n         <DataToolbarContent>\n-          <DataToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"md\">\n-            <DataToolbarGroup>\n-              {!getPicker.loading && (\n-                <DomainExplorerManageColumns\n-                  columnPickerType={columnPickerType}\n-                  setColumnFilters={onAddColumnFilters}\n-                  setTableLoading={setTableLoading}\n-                  getQueryTypes={getQueryTypes}\n-                  setDisplayTable={setDisplayTable}\n-                  parameters={parameters}\n-                  setParameters={setParameters}\n-                  selected={selected}\n-                  setSelected={setSelected}\n-                  data={data}\n-                  getPicker={getPicker}\n-                  setError={setError}\n-                  setDisplayEmptyState={setDisplayEmptyState}\n-                  rememberedParams={rememberedParams}\n-                  enableCache={enableCache}\n-                  setEnableCache={setEnableCache}\n-                  pageSize={pageSize}\n-                  offsetVal={offset}\n-                  setOffsetVal={setOffset}\n-                  setPageSize={setPageSize}\n-                  setIsLoadingMore={setIsLoadingMore}\n-                  isLoadingMore={isLoadingMore}\n-                  metaData={metaData}\n-                  setIsModalOpen={setIsModalOpen}\n-                  isModalOpen={isModalOpen}\n-                />\n-              )}\n-            </DataToolbarGroup>\n-          </DataToolbarToggleGroup>\n+          {!getPicker.loading && (\n+            <>\n+              <DataToolbarToggleGroup\n+                toggleIcon={<FilterIcon />}\n+                breakpoint=\"xl\"\n+              >\n+                {!getQuery.loading && !getQueryTypes.loading && (\n+                  <DataToolbarFilter\n+                    categoryName=\"Filters\"\n+                    chips={filterChips}\n+                    deleteChip={onDeleteChip}\n+                  >\n+                    <DataToolbarItem>\n+                      <DomainExplorerFilterOptions\n+                        argument={argument}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NjE4NzQxNw=="}, "originalCommit": {"oid": "4b41657435e587fac99d1e714e86ddd9b0b46de1"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NzU0ODkwOnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwODoyMjozMFrOG0tY6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwODoyMjozMFrOG0tY6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkyMjc5NA==", "bodyText": "please remove commented code", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r457922794", "createdAt": "2020-07-21T08:22:30Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "diffHunk": "@@ -0,0 +1,774 @@\n+import React, { useState, useEffect } from 'react';\n+import {\n+  Select,\n+  SelectVariant,\n+  SelectGroup,\n+  SelectOption,\n+  TextInput,\n+  Button,\n+  Dropdown,\n+  DropdownToggle,\n+  DropdownItem,\n+  InputGroup,\n+  Popover,\n+  PopoverPosition\n+} from '@patternfly/react-core';\n+import { GraphQL } from '../../../graphql/types';\n+import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n+import gql from 'graphql-tag';\n+import { query } from 'gql-query-builder';\n+import { useApolloClient } from 'react-apollo';\n+import { QuestionCircleIcon } from '@patternfly/react-icons';\n+import { validateResponse, set, removeDuplicates } from '../../../utils/Utils';\n+import './DomainExplorerFilterOptions.css';\n+\n+const DomainExplorerFilterOptions = ({\n+  argument,\n+  currentDomain,\n+  filterChips,\n+  finalFilters,\n+  getQueryTypes,\n+  getSchema,\n+  parameters,\n+  runQuery,\n+  reset,\n+  setColumnFilters,\n+  setDisplayTable,\n+  setDisplayEmptyState,\n+  setFinalFilters,\n+  setFilterError,\n+  setFilterChips,\n+  setReset,\n+  setRunQuery,\n+  setTableLoading,\n+  offsetVal,\n+  pageSize,\n+  setEnableRefresh,\n+  enableCache,\n+  setIsLoadingMore\n+}) => {\n+  // tslint:disable: forin\n+  // tslint:disable: no-floating-promises\n+  const client = useApolloClient();\n+  const [initData2, setInitData2] = useState<any>({\n+    __schema: { queryType: [] }\n+  });\n+  const [isExpanded, setIsExpanded] = useState(false);\n+  const [isFilterDropdownOpen, setIsFilterDropdownOpen] = useState(false);\n+  const [selected, setSelected] = useState('id');\n+  const [selectTypes, setSelectTypes] = useState('equal');\n+  const [textValue, setTextValue] = useState('');\n+  const [inputArray, setInputArray] = useState('');\n+  const [isOpen, setIsOpen] = useState(false);\n+  const [currentArgument, setCurrentArgument] = useState('');\n+  const [currentArgumentScalar, setCurrentArgumentScalar] = useState('String');\n+  const [typeParent, setTypeParent] = useState<any>([]);\n+  const [currentBoolean, setCurrentBoolean] = useState('boolean');\n+  const [stateToggle, setStateToggle] = useState(false);\n+  const [multiStateToggle, setMultiStateToggle] = useState(false);\n+  const [selectedState, setSelectedState] = useState('');\n+  const [multiState, setMultiState] = useState([]);\n+  const [enumArray, setEnumArray] = useState([]);\n+  const scalarArgs = [\n+    null,\n+    'Boolean',\n+    'BooleanArgument',\n+    'DateArgument',\n+    'DateRange',\n+    'IdArgument',\n+    'NumericRange',\n+    'NumericArgument',\n+    'ProcessInstanceState',\n+    'ProcessInstanceStateArgument',\n+    'String',\n+    'StringArgument',\n+    'StringArrayArgument'\n+  ];\n+\n+  const scalarTypes = ['Boolean', 'String'];\n+\n+  const nonArgs = [null, 'Boolean', 'String'];\n+  // const stateArray = [];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7c7879c7a38053014f62ddcdc99bbea8b471b43d"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NzYwOTcwOnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwODozODozOFrOG0t-eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwODo0Mzo1MlrOG0uKfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkzMjQxMA==", "bodyText": "can we create a function returning boolean and name based on what it checks? It's not clear form the condition itself.", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r457932410", "createdAt": "2020-07-21T08:38:38Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "diffHunk": "@@ -0,0 +1,774 @@\n+import React, { useState, useEffect } from 'react';\n+import {\n+  Select,\n+  SelectVariant,\n+  SelectGroup,\n+  SelectOption,\n+  TextInput,\n+  Button,\n+  Dropdown,\n+  DropdownToggle,\n+  DropdownItem,\n+  InputGroup,\n+  Popover,\n+  PopoverPosition\n+} from '@patternfly/react-core';\n+import { GraphQL } from '../../../graphql/types';\n+import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n+import gql from 'graphql-tag';\n+import { query } from 'gql-query-builder';\n+import { useApolloClient } from 'react-apollo';\n+import { QuestionCircleIcon } from '@patternfly/react-icons';\n+import { validateResponse, set, removeDuplicates } from '../../../utils/Utils';\n+import './DomainExplorerFilterOptions.css';\n+\n+const DomainExplorerFilterOptions = ({\n+  argument,\n+  currentDomain,\n+  enableCache,\n+  filterChips,\n+  finalFilters,\n+  getQueryTypes,\n+  getSchema,\n+  offsetVal,\n+  pageSize,\n+  parameters,\n+  runQuery,\n+  reset,\n+  setColumnFilters,\n+  setDisplayTable,\n+  setDisplayEmptyState,\n+  setEnableRefresh,\n+  setFinalFilters,\n+  setFilterError,\n+  setFilterChips,\n+  setIsLoadingMore,\n+  setReset,\n+  setRunQuery,\n+  setTableLoading\n+}) => {\n+  // tslint:disable: forin\n+  // tslint:disable: no-floating-promises\n+  const client = useApolloClient();\n+  const [initData2, setInitData2] = useState<any>({\n+    __schema: { queryType: [] }\n+  });\n+  const [isExpanded, setIsExpanded] = useState(false);\n+  const [isFilterDropdownOpen, setIsFilterDropdownOpen] = useState(false);\n+  const [selected, setSelected] = useState('id');\n+  const [selectTypes, setSelectTypes] = useState('equal');\n+  const [textValue, setTextValue] = useState('');\n+  const [inputArray, setInputArray] = useState('');\n+  const [isOpen, setIsOpen] = useState(false);\n+  const [currentArgument, setCurrentArgument] = useState('');\n+  const [currentArgumentScalar, setCurrentArgumentScalar] = useState('String');\n+  const [typeParent, setTypeParent] = useState<any>([]);\n+  const [currentBoolean, setCurrentBoolean] = useState('boolean');\n+  const [stateToggle, setStateToggle] = useState(false);\n+  const [multiStateToggle, setMultiStateToggle] = useState(false);\n+  const [selectedState, setSelectedState] = useState('');\n+  const [multiState, setMultiState] = useState([]);\n+  const [enumArray, setEnumArray] = useState([]);\n+  const scalarArgs = [\n+    null,\n+    'Boolean',\n+    'BooleanArgument',\n+    'DateArgument',\n+    'DateRange',\n+    'IdArgument',\n+    'NumericRange',\n+    'NumericArgument',\n+    'ProcessInstanceState',\n+    'ProcessInstanceStateArgument',\n+    'String',\n+    'StringArgument',\n+    'StringArrayArgument'\n+  ];\n+\n+  const scalarTypes = ['Boolean', 'String'];\n+\n+  const nonArgs = [null, 'Boolean', 'String'];\n+  // const stateArray = [];\n+  useEffect(() => {\n+    setInitData2(getQueryTypes.data);\n+  }, [getQueryTypes.data]);\n+\n+  const onFieldToggle = _isExpanded => {\n+    setIsExpanded(_isExpanded);\n+  };\n+\n+  const getTypes = useGetInputFieldsFromTypeQuery({\n+    variables: {\n+      type: currentArgument\n+    }\n+  });\n+\n+  const onToggle = _isOpen => {\n+    setIsFilterDropdownOpen(_isOpen);\n+  };\n+  const onSelect = event => {\n+    setSelectTypes(event.target.innerText);\n+    setIsFilterDropdownOpen(false);\n+    const typeName =\n+      getTypes.data.__type &&\n+      getTypes.data.__type.inputFields.find(item => {\n+        if (item.name === event.target.innerText) {\n+          return item;\n+        }\n+      });\n+    if (\n+      typeName.type.kind === 'ENUM' ||", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be63fbfacaadca1158b9b56780e3a4a88b0819f5"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkzNTQ4Ng==", "bodyText": "Maybe moving the whole logic into a separate function would help - and leave onSelect just to call the functions\nconst onSelect = event => {\n    setSelectTypes(event.target.innerText);\n    setIsFilterDropdownOpen(false);\n    newlyAddedFunction(itemName:string);\n}", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r457935486", "createdAt": "2020-07-21T08:43:52Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "diffHunk": "@@ -0,0 +1,774 @@\n+import React, { useState, useEffect } from 'react';\n+import {\n+  Select,\n+  SelectVariant,\n+  SelectGroup,\n+  SelectOption,\n+  TextInput,\n+  Button,\n+  Dropdown,\n+  DropdownToggle,\n+  DropdownItem,\n+  InputGroup,\n+  Popover,\n+  PopoverPosition\n+} from '@patternfly/react-core';\n+import { GraphQL } from '../../../graphql/types';\n+import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n+import gql from 'graphql-tag';\n+import { query } from 'gql-query-builder';\n+import { useApolloClient } from 'react-apollo';\n+import { QuestionCircleIcon } from '@patternfly/react-icons';\n+import { validateResponse, set, removeDuplicates } from '../../../utils/Utils';\n+import './DomainExplorerFilterOptions.css';\n+\n+const DomainExplorerFilterOptions = ({\n+  argument,\n+  currentDomain,\n+  enableCache,\n+  filterChips,\n+  finalFilters,\n+  getQueryTypes,\n+  getSchema,\n+  offsetVal,\n+  pageSize,\n+  parameters,\n+  runQuery,\n+  reset,\n+  setColumnFilters,\n+  setDisplayTable,\n+  setDisplayEmptyState,\n+  setEnableRefresh,\n+  setFinalFilters,\n+  setFilterError,\n+  setFilterChips,\n+  setIsLoadingMore,\n+  setReset,\n+  setRunQuery,\n+  setTableLoading\n+}) => {\n+  // tslint:disable: forin\n+  // tslint:disable: no-floating-promises\n+  const client = useApolloClient();\n+  const [initData2, setInitData2] = useState<any>({\n+    __schema: { queryType: [] }\n+  });\n+  const [isExpanded, setIsExpanded] = useState(false);\n+  const [isFilterDropdownOpen, setIsFilterDropdownOpen] = useState(false);\n+  const [selected, setSelected] = useState('id');\n+  const [selectTypes, setSelectTypes] = useState('equal');\n+  const [textValue, setTextValue] = useState('');\n+  const [inputArray, setInputArray] = useState('');\n+  const [isOpen, setIsOpen] = useState(false);\n+  const [currentArgument, setCurrentArgument] = useState('');\n+  const [currentArgumentScalar, setCurrentArgumentScalar] = useState('String');\n+  const [typeParent, setTypeParent] = useState<any>([]);\n+  const [currentBoolean, setCurrentBoolean] = useState('boolean');\n+  const [stateToggle, setStateToggle] = useState(false);\n+  const [multiStateToggle, setMultiStateToggle] = useState(false);\n+  const [selectedState, setSelectedState] = useState('');\n+  const [multiState, setMultiState] = useState([]);\n+  const [enumArray, setEnumArray] = useState([]);\n+  const scalarArgs = [\n+    null,\n+    'Boolean',\n+    'BooleanArgument',\n+    'DateArgument',\n+    'DateRange',\n+    'IdArgument',\n+    'NumericRange',\n+    'NumericArgument',\n+    'ProcessInstanceState',\n+    'ProcessInstanceStateArgument',\n+    'String',\n+    'StringArgument',\n+    'StringArrayArgument'\n+  ];\n+\n+  const scalarTypes = ['Boolean', 'String'];\n+\n+  const nonArgs = [null, 'Boolean', 'String'];\n+  // const stateArray = [];\n+  useEffect(() => {\n+    setInitData2(getQueryTypes.data);\n+  }, [getQueryTypes.data]);\n+\n+  const onFieldToggle = _isExpanded => {\n+    setIsExpanded(_isExpanded);\n+  };\n+\n+  const getTypes = useGetInputFieldsFromTypeQuery({\n+    variables: {\n+      type: currentArgument\n+    }\n+  });\n+\n+  const onToggle = _isOpen => {\n+    setIsFilterDropdownOpen(_isOpen);\n+  };\n+  const onSelect = event => {\n+    setSelectTypes(event.target.innerText);\n+    setIsFilterDropdownOpen(false);\n+    const typeName =\n+      getTypes.data.__type &&\n+      getTypes.data.__type.inputFields.find(item => {\n+        if (item.name === event.target.innerText) {\n+          return item;\n+        }\n+      });\n+    if (\n+      typeName.type.kind === 'ENUM' ||", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkzMjQxMA=="}, "originalCommit": {"oid": "be63fbfacaadca1158b9b56780e3a4a88b0819f5"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NzY1NjA1OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwODo1MDo0OFrOG0ua7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwODo1MDo0OFrOG0ua7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1NzkzOTY5NA==", "bodyText": "please also here - introduce a function whose name would be indicate the purpose and just call it from the onChange.", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r457939694", "createdAt": "2020-07-21T08:50:48Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "diffHunk": "@@ -0,0 +1,774 @@\n+import React, { useState, useEffect } from 'react';\n+import {\n+  Select,\n+  SelectVariant,\n+  SelectGroup,\n+  SelectOption,\n+  TextInput,\n+  Button,\n+  Dropdown,\n+  DropdownToggle,\n+  DropdownItem,\n+  InputGroup,\n+  Popover,\n+  PopoverPosition\n+} from '@patternfly/react-core';\n+import { GraphQL } from '../../../graphql/types';\n+import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n+import gql from 'graphql-tag';\n+import { query } from 'gql-query-builder';\n+import { useApolloClient } from 'react-apollo';\n+import { QuestionCircleIcon } from '@patternfly/react-icons';\n+import { validateResponse, set, removeDuplicates } from '../../../utils/Utils';\n+import './DomainExplorerFilterOptions.css';\n+\n+const DomainExplorerFilterOptions = ({\n+  argument,\n+  currentDomain,\n+  enableCache,\n+  filterChips,\n+  finalFilters,\n+  getQueryTypes,\n+  getSchema,\n+  offsetVal,\n+  pageSize,\n+  parameters,\n+  runQuery,\n+  reset,\n+  setColumnFilters,\n+  setDisplayTable,\n+  setDisplayEmptyState,\n+  setEnableRefresh,\n+  setFinalFilters,\n+  setFilterError,\n+  setFilterChips,\n+  setIsLoadingMore,\n+  setReset,\n+  setRunQuery,\n+  setTableLoading\n+}) => {\n+  // tslint:disable: forin\n+  // tslint:disable: no-floating-promises\n+  const client = useApolloClient();\n+  const [initData2, setInitData2] = useState<any>({\n+    __schema: { queryType: [] }\n+  });\n+  const [isExpanded, setIsExpanded] = useState(false);\n+  const [isFilterDropdownOpen, setIsFilterDropdownOpen] = useState(false);\n+  const [selected, setSelected] = useState('id');\n+  const [selectTypes, setSelectTypes] = useState('equal');\n+  const [textValue, setTextValue] = useState('');\n+  const [inputArray, setInputArray] = useState('');\n+  const [isOpen, setIsOpen] = useState(false);\n+  const [currentArgument, setCurrentArgument] = useState('');\n+  const [currentArgumentScalar, setCurrentArgumentScalar] = useState('String');\n+  const [typeParent, setTypeParent] = useState<any>([]);\n+  const [currentBoolean, setCurrentBoolean] = useState('boolean');\n+  const [stateToggle, setStateToggle] = useState(false);\n+  const [multiStateToggle, setMultiStateToggle] = useState(false);\n+  const [selectedState, setSelectedState] = useState('');\n+  const [multiState, setMultiState] = useState([]);\n+  const [enumArray, setEnumArray] = useState([]);\n+  const scalarArgs = [\n+    null,\n+    'Boolean',\n+    'BooleanArgument',\n+    'DateArgument',\n+    'DateRange',\n+    'IdArgument',\n+    'NumericRange',\n+    'NumericArgument',\n+    'ProcessInstanceState',\n+    'ProcessInstanceStateArgument',\n+    'String',\n+    'StringArgument',\n+    'StringArrayArgument'\n+  ];\n+\n+  const scalarTypes = ['Boolean', 'String'];\n+\n+  const nonArgs = [null, 'Boolean', 'String'];\n+  // const stateArray = [];\n+  useEffect(() => {\n+    setInitData2(getQueryTypes.data);\n+  }, [getQueryTypes.data]);\n+\n+  const onFieldToggle = _isExpanded => {\n+    setIsExpanded(_isExpanded);\n+  };\n+\n+  const getTypes = useGetInputFieldsFromTypeQuery({\n+    variables: {\n+      type: currentArgument\n+    }\n+  });\n+\n+  const onToggle = _isOpen => {\n+    setIsFilterDropdownOpen(_isOpen);\n+  };\n+  const onSelect = event => {\n+    setSelectTypes(event.target.innerText);\n+    setIsFilterDropdownOpen(false);\n+    const typeName =\n+      getTypes.data.__type &&\n+      getTypes.data.__type.inputFields.find(item => {\n+        if (item.name === event.target.innerText) {\n+          return item;\n+        }\n+      });\n+    if (\n+      typeName.type.kind === 'ENUM' ||\n+      (typeName.type.ofType && typeName.type.ofType.kind === 'ENUM')\n+    ) {\n+      if (typeName.type.name === null) {\n+        setCurrentArgumentScalar('MultiSelection');\n+        setEnumArray(typeName.type.ofType.enumValues);\n+      } else {\n+        setCurrentArgumentScalar('stateSelection');\n+        setEnumArray(typeName.type.enumValues);\n+      }\n+    } else {\n+      if (scalarTypes.includes(typeName.type.name)) {\n+        setCurrentArgumentScalar(typeName.type.name);\n+      } else {\n+        setCurrentArgumentScalar('ArrayString');\n+      }\n+    }\n+  };\n+\n+  const typesMenuItems =\n+    !getTypes.loading &&\n+    getTypes.data.__type &&\n+    getTypes.data.__type.inputFields.map((data, index) => (\n+      <SelectOption key={index} value={data.name} />\n+    ));\n+\n+  const textBoxChange = value => {\n+    setTextValue(value);\n+  };\n+\n+  const textGroupChange = value => {\n+    setInputArray(value);\n+  };\n+\n+  const onSelectBoolean = event => {\n+    setCurrentBoolean(event.target.innerText);\n+    setIsOpen(!isOpen);\n+  };\n+\n+  const onToggleBoolean = _isOpen => {\n+    setIsOpen(_isOpen);\n+  };\n+\n+  const dropdownItems = [\n+    <DropdownItem key=\"true\" component=\"button\">\n+      true{' '}\n+    </DropdownItem>,\n+    <DropdownItem key=\"false\" component=\"button\">\n+      false{' '}\n+    </DropdownItem>\n+  ];\n+\n+  const fetchSchema = option => {\n+    return (\n+      !getQueryTypes.loading &&\n+      getQueryTypes.data.__schema &&\n+      getQueryTypes.data.__schema.queryType.find(item => {\n+        if (item.name === option.type.name) {\n+          return item;\n+        }\n+      })\n+    );\n+  };\n+  let childItems;\n+  let finalResult: any = [];\n+  const childSelectionItems = (_data, title, ...attr) => {\n+    let nestedTitles = '';\n+    childItems =\n+      !getQueryTypes.loading &&\n+      _data.map(group => {\n+        const label = title + ' / ' + attr.join();\n+        const childEle = (\n+          <SelectGroup\n+            label={label.replace(/\\,/g, '')}\n+            key={'kie-filter-item-' + label.replace(/\\,/g, '')}\n+            id={group.name}\n+            value={label.replace(/\\,/g, '')}\n+          >\n+            {group.inputFields !== null &&\n+              group.inputFields\n+                .filter((item, _index) => {\n+                  if (!scalarArgs.includes(item.type.name)) {\n+                    const tempData = [];\n+                    const schemaObj = fetchSchema(item);\n+                    tempData.push(schemaObj);\n+                    nestedTitles = nestedTitles + ' / ' + item.name;\n+                    childSelectionItems(tempData, title, attr, nestedTitles);\n+                  } else {\n+                    return item;\n+                  }\n+                })\n+                .map(item => {\n+                  return (\n+                    <SelectOption\n+                      key={'kie-filter-item-' + group.name + title + item.name}\n+                      value={item.name + title + group.name}\n+                    >\n+                      {item.name}\n+                    </SelectOption>\n+                  );\n+                })}\n+          </SelectGroup>\n+        );\n+        return childEle;\n+      });\n+    finalResult.push(childItems);\n+  };\n+  const rootElementsArray = [];\n+  const selectionItems = () => {\n+    !getSchema.loading &&\n+      getSchema.data.__type &&\n+      getSchema.data.__type.inputFields\n+        .filter((group, index) => {\n+          if (group.type.kind !== 'LIST') {\n+            return group;\n+          }\n+        })\n+        .map((group, index) => {\n+          let groupItem;\n+          let rootItem;\n+          group.type.inputFields.filter(item => {\n+            if (!nonArgs.includes(item.type.name)) {\n+              groupItem = group;\n+            } else {\n+              rootItem = group;\n+            }\n+          });\n+          if (rootItem) {\n+            const _rootElement = (\n+              <SelectOption key={rootItem.name} value={rootItem.name} />\n+            );\n+            !rootElementsArray.includes(_rootElement) &&\n+              rootElementsArray.push(_rootElement);\n+          }\n+\n+          let ele;\n+          if (groupItem) {\n+            ele = (\n+              <SelectGroup\n+                label={groupItem.name}\n+                key={index}\n+                id={groupItem.name}\n+                value={groupItem.name}\n+              >\n+                {groupItem.type.inputFields &&\n+                  groupItem.type.inputFields\n+                    .filter((item, _index) => {\n+                      if (!scalarArgs.includes(item.type.name)) {\n+                        const tempData = [];\n+                        const _v = fetchSchema(item);\n+                        tempData.push(_v);\n+                        childSelectionItems(\n+                          tempData,\n+                          groupItem.name,\n+                          item.name\n+                        );\n+                      } else {\n+                        return item;\n+                      }\n+                    })\n+                    .map((item, _index) => {\n+                      return (\n+                        <SelectOption\n+                          key={_index}\n+                          value={item.name + groupItem.name}\n+                        >\n+                          {item.name}\n+                        </SelectOption>\n+                      );\n+                    })}\n+              </SelectGroup>\n+            );\n+          }\n+          ele && !finalResult.includes(ele) && finalResult.push(ele);\n+        });\n+  };\n+\n+  const rootElement: any = (\n+    <SelectGroup label=\" \" key={'kie-filter-item-' + ' '} id=\"\" value=\" \">\n+      {rootElementsArray}\n+    </SelectGroup>\n+  );\n+  finalResult.unshift(rootElement);\n+  const onChange = (event, selection, isPlaceholder) => {\n+    const innerText = event.target.innerText;\n+    setSelected(innerText);\n+    const parent = event.nativeEvent.target.parentElement.parentElement.getAttribute(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be63fbfacaadca1158b9b56780e3a4a88b0819f5"}, "originalPosition": 306}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NzY4OTkzOnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwODo1OToyOVrOG0uwSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwODo1OToyOVrOG0uwSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk0NTE2MQ==", "bodyText": "this hits readability - does the invocation of unshift need to be here? I think it does not need to be in between the const definitions, right? Please move below all const definitions.", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r457945161", "createdAt": "2020-07-21T08:59:29Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "diffHunk": "@@ -0,0 +1,774 @@\n+import React, { useState, useEffect } from 'react';\n+import {\n+  Select,\n+  SelectVariant,\n+  SelectGroup,\n+  SelectOption,\n+  TextInput,\n+  Button,\n+  Dropdown,\n+  DropdownToggle,\n+  DropdownItem,\n+  InputGroup,\n+  Popover,\n+  PopoverPosition\n+} from '@patternfly/react-core';\n+import { GraphQL } from '../../../graphql/types';\n+import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n+import gql from 'graphql-tag';\n+import { query } from 'gql-query-builder';\n+import { useApolloClient } from 'react-apollo';\n+import { QuestionCircleIcon } from '@patternfly/react-icons';\n+import { validateResponse, set, removeDuplicates } from '../../../utils/Utils';\n+import './DomainExplorerFilterOptions.css';\n+\n+const DomainExplorerFilterOptions = ({\n+  argument,\n+  currentDomain,\n+  enableCache,\n+  filterChips,\n+  finalFilters,\n+  getQueryTypes,\n+  getSchema,\n+  offsetVal,\n+  pageSize,\n+  parameters,\n+  runQuery,\n+  reset,\n+  setColumnFilters,\n+  setDisplayTable,\n+  setDisplayEmptyState,\n+  setEnableRefresh,\n+  setFinalFilters,\n+  setFilterError,\n+  setFilterChips,\n+  setIsLoadingMore,\n+  setReset,\n+  setRunQuery,\n+  setTableLoading\n+}) => {\n+  // tslint:disable: forin\n+  // tslint:disable: no-floating-promises\n+  const client = useApolloClient();\n+  const [initData2, setInitData2] = useState<any>({\n+    __schema: { queryType: [] }\n+  });\n+  const [isExpanded, setIsExpanded] = useState(false);\n+  const [isFilterDropdownOpen, setIsFilterDropdownOpen] = useState(false);\n+  const [selected, setSelected] = useState('id');\n+  const [selectTypes, setSelectTypes] = useState('equal');\n+  const [textValue, setTextValue] = useState('');\n+  const [inputArray, setInputArray] = useState('');\n+  const [isOpen, setIsOpen] = useState(false);\n+  const [currentArgument, setCurrentArgument] = useState('');\n+  const [currentArgumentScalar, setCurrentArgumentScalar] = useState('String');\n+  const [typeParent, setTypeParent] = useState<any>([]);\n+  const [currentBoolean, setCurrentBoolean] = useState('boolean');\n+  const [stateToggle, setStateToggle] = useState(false);\n+  const [multiStateToggle, setMultiStateToggle] = useState(false);\n+  const [selectedState, setSelectedState] = useState('');\n+  const [multiState, setMultiState] = useState([]);\n+  const [enumArray, setEnumArray] = useState([]);\n+  const scalarArgs = [\n+    null,\n+    'Boolean',\n+    'BooleanArgument',\n+    'DateArgument',\n+    'DateRange',\n+    'IdArgument',\n+    'NumericRange',\n+    'NumericArgument',\n+    'ProcessInstanceState',\n+    'ProcessInstanceStateArgument',\n+    'String',\n+    'StringArgument',\n+    'StringArrayArgument'\n+  ];\n+\n+  const scalarTypes = ['Boolean', 'String'];\n+\n+  const nonArgs = [null, 'Boolean', 'String'];\n+  // const stateArray = [];\n+  useEffect(() => {\n+    setInitData2(getQueryTypes.data);\n+  }, [getQueryTypes.data]);\n+\n+  const onFieldToggle = _isExpanded => {\n+    setIsExpanded(_isExpanded);\n+  };\n+\n+  const getTypes = useGetInputFieldsFromTypeQuery({\n+    variables: {\n+      type: currentArgument\n+    }\n+  });\n+\n+  const onToggle = _isOpen => {\n+    setIsFilterDropdownOpen(_isOpen);\n+  };\n+  const onSelect = event => {\n+    setSelectTypes(event.target.innerText);\n+    setIsFilterDropdownOpen(false);\n+    const typeName =\n+      getTypes.data.__type &&\n+      getTypes.data.__type.inputFields.find(item => {\n+        if (item.name === event.target.innerText) {\n+          return item;\n+        }\n+      });\n+    if (\n+      typeName.type.kind === 'ENUM' ||\n+      (typeName.type.ofType && typeName.type.ofType.kind === 'ENUM')\n+    ) {\n+      if (typeName.type.name === null) {\n+        setCurrentArgumentScalar('MultiSelection');\n+        setEnumArray(typeName.type.ofType.enumValues);\n+      } else {\n+        setCurrentArgumentScalar('stateSelection');\n+        setEnumArray(typeName.type.enumValues);\n+      }\n+    } else {\n+      if (scalarTypes.includes(typeName.type.name)) {\n+        setCurrentArgumentScalar(typeName.type.name);\n+      } else {\n+        setCurrentArgumentScalar('ArrayString');\n+      }\n+    }\n+  };\n+\n+  const typesMenuItems =\n+    !getTypes.loading &&\n+    getTypes.data.__type &&\n+    getTypes.data.__type.inputFields.map((data, index) => (\n+      <SelectOption key={index} value={data.name} />\n+    ));\n+\n+  const textBoxChange = value => {\n+    setTextValue(value);\n+  };\n+\n+  const textGroupChange = value => {\n+    setInputArray(value);\n+  };\n+\n+  const onSelectBoolean = event => {\n+    setCurrentBoolean(event.target.innerText);\n+    setIsOpen(!isOpen);\n+  };\n+\n+  const onToggleBoolean = _isOpen => {\n+    setIsOpen(_isOpen);\n+  };\n+\n+  const dropdownItems = [\n+    <DropdownItem key=\"true\" component=\"button\">\n+      true{' '}\n+    </DropdownItem>,\n+    <DropdownItem key=\"false\" component=\"button\">\n+      false{' '}\n+    </DropdownItem>\n+  ];\n+\n+  const fetchSchema = option => {\n+    return (\n+      !getQueryTypes.loading &&\n+      getQueryTypes.data.__schema &&\n+      getQueryTypes.data.__schema.queryType.find(item => {\n+        if (item.name === option.type.name) {\n+          return item;\n+        }\n+      })\n+    );\n+  };\n+  let childItems;\n+  let finalResult: any = [];\n+  const childSelectionItems = (_data, title, ...attr) => {\n+    let nestedTitles = '';\n+    childItems =\n+      !getQueryTypes.loading &&\n+      _data.map(group => {\n+        const label = title + ' / ' + attr.join();\n+        const childEle = (\n+          <SelectGroup\n+            label={label.replace(/\\,/g, '')}\n+            key={'kie-filter-item-' + label.replace(/\\,/g, '')}\n+            id={group.name}\n+            value={label.replace(/\\,/g, '')}\n+          >\n+            {group.inputFields !== null &&\n+              group.inputFields\n+                .filter((item, _index) => {\n+                  if (!scalarArgs.includes(item.type.name)) {\n+                    const tempData = [];\n+                    const schemaObj = fetchSchema(item);\n+                    tempData.push(schemaObj);\n+                    nestedTitles = nestedTitles + ' / ' + item.name;\n+                    childSelectionItems(tempData, title, attr, nestedTitles);\n+                  } else {\n+                    return item;\n+                  }\n+                })\n+                .map(item => {\n+                  return (\n+                    <SelectOption\n+                      key={'kie-filter-item-' + group.name + title + item.name}\n+                      value={item.name + title + group.name}\n+                    >\n+                      {item.name}\n+                    </SelectOption>\n+                  );\n+                })}\n+          </SelectGroup>\n+        );\n+        return childEle;\n+      });\n+    finalResult.push(childItems);\n+  };\n+  const rootElementsArray = [];\n+  const selectionItems = () => {\n+    !getSchema.loading &&\n+      getSchema.data.__type &&\n+      getSchema.data.__type.inputFields\n+        .filter((group, index) => {\n+          if (group.type.kind !== 'LIST') {\n+            return group;\n+          }\n+        })\n+        .map((group, index) => {\n+          let groupItem;\n+          let rootItem;\n+          group.type.inputFields.filter(item => {\n+            if (!nonArgs.includes(item.type.name)) {\n+              groupItem = group;\n+            } else {\n+              rootItem = group;\n+            }\n+          });\n+          if (rootItem) {\n+            const _rootElement = (\n+              <SelectOption key={rootItem.name} value={rootItem.name} />\n+            );\n+            !rootElementsArray.includes(_rootElement) &&\n+              rootElementsArray.push(_rootElement);\n+          }\n+\n+          let ele;\n+          if (groupItem) {\n+            ele = (\n+              <SelectGroup\n+                label={groupItem.name}\n+                key={index}\n+                id={groupItem.name}\n+                value={groupItem.name}\n+              >\n+                {groupItem.type.inputFields &&\n+                  groupItem.type.inputFields\n+                    .filter((item, _index) => {\n+                      if (!scalarArgs.includes(item.type.name)) {\n+                        const tempData = [];\n+                        const _v = fetchSchema(item);\n+                        tempData.push(_v);\n+                        childSelectionItems(\n+                          tempData,\n+                          groupItem.name,\n+                          item.name\n+                        );\n+                      } else {\n+                        return item;\n+                      }\n+                    })\n+                    .map((item, _index) => {\n+                      return (\n+                        <SelectOption\n+                          key={_index}\n+                          value={item.name + groupItem.name}\n+                        >\n+                          {item.name}\n+                        </SelectOption>\n+                      );\n+                    })}\n+              </SelectGroup>\n+            );\n+          }\n+          ele && !finalResult.includes(ele) && finalResult.push(ele);\n+        });\n+  };\n+\n+  const rootElement: any = (\n+    <SelectGroup label=\" \" key={'kie-filter-item-' + ' '} id=\"\" value=\" \">\n+      {rootElementsArray}\n+    </SelectGroup>\n+  );\n+  finalResult.unshift(rootElement);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be63fbfacaadca1158b9b56780e3a4a88b0819f5"}, "originalPosition": 302}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NzY5MzkyOnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwOTowMDozMVrOG0uyxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwOTowMDozMVrOG0uyxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk0NTc5OQ==", "bodyText": "please move useEffect hooks next to each other.", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r457945799", "createdAt": "2020-07-21T09:00:31Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "diffHunk": "@@ -0,0 +1,774 @@\n+import React, { useState, useEffect } from 'react';\n+import {\n+  Select,\n+  SelectVariant,\n+  SelectGroup,\n+  SelectOption,\n+  TextInput,\n+  Button,\n+  Dropdown,\n+  DropdownToggle,\n+  DropdownItem,\n+  InputGroup,\n+  Popover,\n+  PopoverPosition\n+} from '@patternfly/react-core';\n+import { GraphQL } from '../../../graphql/types';\n+import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n+import gql from 'graphql-tag';\n+import { query } from 'gql-query-builder';\n+import { useApolloClient } from 'react-apollo';\n+import { QuestionCircleIcon } from '@patternfly/react-icons';\n+import { validateResponse, set, removeDuplicates } from '../../../utils/Utils';\n+import './DomainExplorerFilterOptions.css';\n+\n+const DomainExplorerFilterOptions = ({\n+  argument,\n+  currentDomain,\n+  enableCache,\n+  filterChips,\n+  finalFilters,\n+  getQueryTypes,\n+  getSchema,\n+  offsetVal,\n+  pageSize,\n+  parameters,\n+  runQuery,\n+  reset,\n+  setColumnFilters,\n+  setDisplayTable,\n+  setDisplayEmptyState,\n+  setEnableRefresh,\n+  setFinalFilters,\n+  setFilterError,\n+  setFilterChips,\n+  setIsLoadingMore,\n+  setReset,\n+  setRunQuery,\n+  setTableLoading\n+}) => {\n+  // tslint:disable: forin\n+  // tslint:disable: no-floating-promises\n+  const client = useApolloClient();\n+  const [initData2, setInitData2] = useState<any>({\n+    __schema: { queryType: [] }\n+  });\n+  const [isExpanded, setIsExpanded] = useState(false);\n+  const [isFilterDropdownOpen, setIsFilterDropdownOpen] = useState(false);\n+  const [selected, setSelected] = useState('id');\n+  const [selectTypes, setSelectTypes] = useState('equal');\n+  const [textValue, setTextValue] = useState('');\n+  const [inputArray, setInputArray] = useState('');\n+  const [isOpen, setIsOpen] = useState(false);\n+  const [currentArgument, setCurrentArgument] = useState('');\n+  const [currentArgumentScalar, setCurrentArgumentScalar] = useState('String');\n+  const [typeParent, setTypeParent] = useState<any>([]);\n+  const [currentBoolean, setCurrentBoolean] = useState('boolean');\n+  const [stateToggle, setStateToggle] = useState(false);\n+  const [multiStateToggle, setMultiStateToggle] = useState(false);\n+  const [selectedState, setSelectedState] = useState('');\n+  const [multiState, setMultiState] = useState([]);\n+  const [enumArray, setEnumArray] = useState([]);\n+  const scalarArgs = [\n+    null,\n+    'Boolean',\n+    'BooleanArgument',\n+    'DateArgument',\n+    'DateRange',\n+    'IdArgument',\n+    'NumericRange',\n+    'NumericArgument',\n+    'ProcessInstanceState',\n+    'ProcessInstanceStateArgument',\n+    'String',\n+    'StringArgument',\n+    'StringArrayArgument'\n+  ];\n+\n+  const scalarTypes = ['Boolean', 'String'];\n+\n+  const nonArgs = [null, 'Boolean', 'String'];\n+  // const stateArray = [];\n+  useEffect(() => {\n+    setInitData2(getQueryTypes.data);\n+  }, [getQueryTypes.data]);\n+\n+  const onFieldToggle = _isExpanded => {\n+    setIsExpanded(_isExpanded);\n+  };\n+\n+  const getTypes = useGetInputFieldsFromTypeQuery({\n+    variables: {\n+      type: currentArgument\n+    }\n+  });\n+\n+  const onToggle = _isOpen => {\n+    setIsFilterDropdownOpen(_isOpen);\n+  };\n+  const onSelect = event => {\n+    setSelectTypes(event.target.innerText);\n+    setIsFilterDropdownOpen(false);\n+    const typeName =\n+      getTypes.data.__type &&\n+      getTypes.data.__type.inputFields.find(item => {\n+        if (item.name === event.target.innerText) {\n+          return item;\n+        }\n+      });\n+    if (\n+      typeName.type.kind === 'ENUM' ||\n+      (typeName.type.ofType && typeName.type.ofType.kind === 'ENUM')\n+    ) {\n+      if (typeName.type.name === null) {\n+        setCurrentArgumentScalar('MultiSelection');\n+        setEnumArray(typeName.type.ofType.enumValues);\n+      } else {\n+        setCurrentArgumentScalar('stateSelection');\n+        setEnumArray(typeName.type.enumValues);\n+      }\n+    } else {\n+      if (scalarTypes.includes(typeName.type.name)) {\n+        setCurrentArgumentScalar(typeName.type.name);\n+      } else {\n+        setCurrentArgumentScalar('ArrayString');\n+      }\n+    }\n+  };\n+\n+  const typesMenuItems =\n+    !getTypes.loading &&\n+    getTypes.data.__type &&\n+    getTypes.data.__type.inputFields.map((data, index) => (\n+      <SelectOption key={index} value={data.name} />\n+    ));\n+\n+  const textBoxChange = value => {\n+    setTextValue(value);\n+  };\n+\n+  const textGroupChange = value => {\n+    setInputArray(value);\n+  };\n+\n+  const onSelectBoolean = event => {\n+    setCurrentBoolean(event.target.innerText);\n+    setIsOpen(!isOpen);\n+  };\n+\n+  const onToggleBoolean = _isOpen => {\n+    setIsOpen(_isOpen);\n+  };\n+\n+  const dropdownItems = [\n+    <DropdownItem key=\"true\" component=\"button\">\n+      true{' '}\n+    </DropdownItem>,\n+    <DropdownItem key=\"false\" component=\"button\">\n+      false{' '}\n+    </DropdownItem>\n+  ];\n+\n+  const fetchSchema = option => {\n+    return (\n+      !getQueryTypes.loading &&\n+      getQueryTypes.data.__schema &&\n+      getQueryTypes.data.__schema.queryType.find(item => {\n+        if (item.name === option.type.name) {\n+          return item;\n+        }\n+      })\n+    );\n+  };\n+  let childItems;\n+  let finalResult: any = [];\n+  const childSelectionItems = (_data, title, ...attr) => {\n+    let nestedTitles = '';\n+    childItems =\n+      !getQueryTypes.loading &&\n+      _data.map(group => {\n+        const label = title + ' / ' + attr.join();\n+        const childEle = (\n+          <SelectGroup\n+            label={label.replace(/\\,/g, '')}\n+            key={'kie-filter-item-' + label.replace(/\\,/g, '')}\n+            id={group.name}\n+            value={label.replace(/\\,/g, '')}\n+          >\n+            {group.inputFields !== null &&\n+              group.inputFields\n+                .filter((item, _index) => {\n+                  if (!scalarArgs.includes(item.type.name)) {\n+                    const tempData = [];\n+                    const schemaObj = fetchSchema(item);\n+                    tempData.push(schemaObj);\n+                    nestedTitles = nestedTitles + ' / ' + item.name;\n+                    childSelectionItems(tempData, title, attr, nestedTitles);\n+                  } else {\n+                    return item;\n+                  }\n+                })\n+                .map(item => {\n+                  return (\n+                    <SelectOption\n+                      key={'kie-filter-item-' + group.name + title + item.name}\n+                      value={item.name + title + group.name}\n+                    >\n+                      {item.name}\n+                    </SelectOption>\n+                  );\n+                })}\n+          </SelectGroup>\n+        );\n+        return childEle;\n+      });\n+    finalResult.push(childItems);\n+  };\n+  const rootElementsArray = [];\n+  const selectionItems = () => {\n+    !getSchema.loading &&\n+      getSchema.data.__type &&\n+      getSchema.data.__type.inputFields\n+        .filter((group, index) => {\n+          if (group.type.kind !== 'LIST') {\n+            return group;\n+          }\n+        })\n+        .map((group, index) => {\n+          let groupItem;\n+          let rootItem;\n+          group.type.inputFields.filter(item => {\n+            if (!nonArgs.includes(item.type.name)) {\n+              groupItem = group;\n+            } else {\n+              rootItem = group;\n+            }\n+          });\n+          if (rootItem) {\n+            const _rootElement = (\n+              <SelectOption key={rootItem.name} value={rootItem.name} />\n+            );\n+            !rootElementsArray.includes(_rootElement) &&\n+              rootElementsArray.push(_rootElement);\n+          }\n+\n+          let ele;\n+          if (groupItem) {\n+            ele = (\n+              <SelectGroup\n+                label={groupItem.name}\n+                key={index}\n+                id={groupItem.name}\n+                value={groupItem.name}\n+              >\n+                {groupItem.type.inputFields &&\n+                  groupItem.type.inputFields\n+                    .filter((item, _index) => {\n+                      if (!scalarArgs.includes(item.type.name)) {\n+                        const tempData = [];\n+                        const _v = fetchSchema(item);\n+                        tempData.push(_v);\n+                        childSelectionItems(\n+                          tempData,\n+                          groupItem.name,\n+                          item.name\n+                        );\n+                      } else {\n+                        return item;\n+                      }\n+                    })\n+                    .map((item, _index) => {\n+                      return (\n+                        <SelectOption\n+                          key={_index}\n+                          value={item.name + groupItem.name}\n+                        >\n+                          {item.name}\n+                        </SelectOption>\n+                      );\n+                    })}\n+              </SelectGroup>\n+            );\n+          }\n+          ele && !finalResult.includes(ele) && finalResult.push(ele);\n+        });\n+  };\n+\n+  const rootElement: any = (\n+    <SelectGroup label=\" \" key={'kie-filter-item-' + ' '} id=\"\" value=\" \">\n+      {rootElementsArray}\n+    </SelectGroup>\n+  );\n+  finalResult.unshift(rootElement);\n+  const onChange = (event, selection, isPlaceholder) => {\n+    const innerText = event.target.innerText;\n+    setSelected(innerText);\n+    const parent = event.nativeEvent.target.parentElement.parentElement.getAttribute(\n+      'value'\n+    );\n+    let tempParents;\n+    let lastEle;\n+    if (parent !== ' ') {\n+      tempParents = parent.split(' / ');\n+      setTypeParent(tempParents);\n+      lastEle = tempParents.slice(-1)[0];\n+    } else {\n+      tempParents = [innerText];\n+      lastEle = tempParents.slice(-1)[0];\n+    }\n+    let arg;\n+    if (lastEle === 'processInstances') {\n+      let str = lastEle.charAt(0).toUpperCase() + lastEle.slice(1);\n+      str = str.substring(0, str.length - 1);\n+      arg = str + 'MetaArgument';\n+    } else if (lastEle === 'userTasks') {\n+      let str = lastEle.charAt(0).toUpperCase() + lastEle.slice(1);\n+      str = str.substring(0, str.length - 1);\n+      arg = str + 'InstanceMetaArgument';\n+    } else {\n+      const str = lastEle.charAt(0).toUpperCase() + lastEle.slice(1);\n+      arg = str + 'Argument';\n+    }\n+    const argType = initData2.__schema.queryType.find(type => {\n+      if (type.name === arg) {\n+        return type;\n+      }\n+    });\n+\n+    const argField = argType.inputFields.find(data => {\n+      if (data.name === innerText) {\n+        return data;\n+      }\n+    });\n+\n+    if (argField === undefined) {\n+      setCurrentArgument(argType.name);\n+    } else {\n+      if (argField.type.kind === 'INPUT_OBJECT') {\n+        setCurrentArgument(argField.type.name);\n+      } else {\n+        setCurrentArgumentScalar(argField.type.name);\n+      }\n+    }\n+    setSelectTypes('');\n+    setIsExpanded(false);\n+  };\n+\n+  const onStateToggle = _isOpen => {\n+    setStateToggle(_isOpen);\n+  };\n+\n+  const onStateSelect = event => {\n+    const selection = event.target.innerText;\n+    setSelectedState(selection);\n+    setStateToggle(!stateToggle);\n+  };\n+\n+  const onMultiStateToggle = _isOpen => {\n+    setMultiStateToggle(_isOpen);\n+  };\n+\n+  const onMultiStateSelect = (event, selection) => {\n+    if (multiState.includes(selection)) {\n+      setMultiState(prev => prev.filter(item => item !== selection));\n+    } else {\n+      setMultiState(prev => [...prev, selection]);\n+    }\n+    setMultiStateToggle(!multiStateToggle);\n+  };\n+\n+  const onLoad = () => {\n+    const innerText = 'id';\n+    let tempParents;\n+    tempParents = [innerText];\n+    const lastEle = tempParents.slice(-1)[0];\n+    let arg;\n+    const str = lastEle.charAt(0).toUpperCase() + lastEle.slice(1);\n+    arg = str + 'Argument';\n+    const argType = getQueryTypes.data.__schema.queryType.find(type => {\n+      if (type.name === arg) {\n+        return type;\n+      }\n+    });\n+    const argField = argType.inputFields.find(data => {\n+      if (data.name === innerText) {\n+        return data;\n+      }\n+    });\n+    if (argField === undefined) {\n+      setCurrentArgument(argType.name);\n+      setCurrentArgumentScalar('String');\n+      setTextValue('');\n+      setInputArray('');\n+      setCurrentBoolean('boolean');\n+      setMultiState([]);\n+      setSelectedState('');\n+    }\n+  };\n+\n+  !getSchema.loading && selectionItems();\n+  finalResult = finalResult.flat();\n+\n+  useEffect(() => {\n+    setReset(true);\n+  }, []);\n+\n+  useEffect(() => {\n+    if (reset === true) {\n+      setSelected('id');\n+      setSelectTypes('equal');\n+      setTypeParent('');\n+      onLoad();\n+      setRunQuery(true);\n+    }\n+  }, [reset]);\n+  const obj: any = {};\n+  const setPlaceHolders = () => {\n+    currentArgumentScalar === 'String' && setTextValue('');\n+    currentArgumentScalar === 'Boolean' && setCurrentBoolean('boolean');\n+    currentArgumentScalar === 'ArrayString' && setInputArray('');\n+    currentArgumentScalar === 'stateSelection' && setSelectedState('');\n+    currentArgumentScalar === 'MultiSelection' && setMultiState([]);\n+    setSelectTypes('');\n+    setSelected('');\n+  };\n+  async function generateFilterQuery() {\n+    reset !== true && setPlaceHolders();\n+    setTableLoading(true);\n+    setEnableRefresh(true);\n+    if (parameters.length > 1 && Object.keys(finalFilters).length > 0) {\n+      const Query = query({\n+        operation: currentDomain,\n+        variables: {\n+          pagination: {\n+            value: { offset: offsetVal, limit: pageSize },\n+            type: 'Pagination'\n+          },\n+          where: { value: finalFilters, type: argument }\n+        },\n+        fields: parameters\n+      });\n+      try {\n+        const response = await client.query({\n+          query: gql`\n+            ${Query.query}\n+          `,\n+          variables: Query.variables,\n+          fetchPolicy: enableCache ? 'cache-first' : 'network-only'\n+        });\n+        const firstKey = Object.keys(response.data)[0];\n+        if (response.data[firstKey].length > 0) {\n+          setFilterError('');\n+          const resp = response.data;\n+          const respKeys = Object.keys(resp)[0];\n+          const tableContent = resp[respKeys];\n+          const finalResp = [];\n+          tableContent.map(content => {\n+            const finalObject = validateResponse(content, parameters);\n+            finalResp.push(finalObject);\n+          });\n+          setColumnFilters(finalResp);\n+          setTableLoading(false);\n+          setRunQuery(false);\n+          setDisplayTable(true);\n+          setDisplayEmptyState(false);\n+        } else {\n+          setDisplayEmptyState(true);\n+          setTableLoading(false);\n+          setRunQuery(false);\n+        }\n+      } catch (error) {\n+        setFilterError(error);\n+        setTableLoading(false);\n+        setDisplayTable(false);\n+        setDisplayEmptyState(false);\n+        setRunQuery(false);\n+      }\n+    } else {\n+      setTableLoading(false);\n+      setDisplayEmptyState(false);\n+      setDisplayTable(false);\n+      setRunQuery(false);\n+    }\n+    setReset(false);\n+    setIsLoadingMore(false);\n+  }\n+\n+  const validateChip = (parentString, _selected, _selectTypes, value) => {\n+    if (_selectTypes === 'equal') {\n+      return parentString\n+        ? `${parentString} / ${_selected}: ${value}`\n+        : `${_selected}: ${value}`;\n+    } else if (_selectTypes === 'isNull') {\n+      if (value === true) {\n+        return parentString\n+          ? `${parentString} / ${_selected}: is null`\n+          : `${_selected}: is null`;\n+      } else {\n+        return parentString\n+          ? `${parentString} / ${_selected}: is not null`\n+          : `${_selected}: is not null`;\n+      }\n+    } else if (_selectTypes === 'in') {\n+      return parentString\n+        ? `${parentString} / ${_selected}: is in ${value}`\n+        : `${_selected}: is in ${value}`;\n+    } else {\n+      return parentString\n+        ? `${parentString} / ${_selected}: ${_selectTypes} ${value}`\n+        : `${_selected}: ${_selectTypes} ${value}`;\n+    }\n+  };\n+\n+  const checkChipArray = (chipSelections, chipText) => {\n+    let value = '';\n+    filterChips.forEach(item => {\n+      const tempItem = item.split(':');\n+      if (tempItem[0] === chipSelections) {\n+        value = item;\n+      }\n+    });\n+    if (value.length > 0) {\n+      const index = filterChips.indexOf(value);\n+      setFilterChips(prev => {\n+        prev.splice(index, 1);\n+        return [...prev, chipText];\n+      });\n+    } else {\n+      setFilterChips(prev => [...prev, chipText]);\n+    }\n+  };\n+\n+  const validataScalarArgument = (scalarType, objKeys, value) => {\n+    let parentString = '';\n+    let chipText = '';\n+    typeParent &&\n+      typeParent.map(parent => (parentString = parentString + ' / ' + parent));\n+    parentString = parentString.substring(3);\n+    if (scalarType === 'ArrayString') {\n+      chipText = validateChip(parentString, selected, selectTypes, inputArray);\n+      let chipSelections = '';\n+      if (typeParent) {\n+        chipSelections = `${parentString} / ${selected}`;\n+      } else {\n+        chipSelections = selected;\n+      }\n+      checkChipArray(chipSelections, chipText);\n+      const tempArray = inputArray.split(',');\n+      set(obj, objKeys, tempArray);\n+    } else {\n+      chipText = validateChip(parentString, selected, selectTypes, value);\n+      let chipSelections = '';\n+      if (typeParent) {\n+        chipSelections = `${parentString} / ${selected}`;\n+      } else {\n+        chipSelections = selected;\n+      }\n+      checkChipArray(chipSelections, chipText);\n+      set(obj, objKeys, value);\n+    }\n+    setFinalFilters(() => {\n+      if (finalFilters.hasOwnProperty(typeParent)) {\n+        const te: any = Object.values(obj)[0];\n+        finalFilters[typeParent] = { ...finalFilters[typeParent], ...te };\n+        return finalFilters;\n+      } else {\n+        return { ...finalFilters, ...obj };\n+      }\n+    });\n+    setTypeParent('');\n+    setRunQuery(true);\n+  };\n+\n+  const onApplyFilter = () => {\n+    let objKeys;\n+    if (typeParent.length > 0) {\n+      objKeys = `${typeParent},${selected},${selectTypes}`;\n+    } else {\n+      objKeys = `${selected},${selectTypes}`;\n+    }\n+    if (currentArgumentScalar === 'Boolean') {\n+      validataScalarArgument(currentArgumentScalar, objKeys, currentBoolean);\n+    } else if (currentArgumentScalar === 'ArrayString') {\n+      validataScalarArgument(currentArgumentScalar, objKeys, selectedState);\n+    } else if (currentArgumentScalar === 'stateSelection') {\n+      validataScalarArgument(currentArgumentScalar, objKeys, selectedState);\n+    } else if (currentArgumentScalar === 'MultiSelection') {\n+      validataScalarArgument(currentArgumentScalar, objKeys, multiState);\n+    } else {\n+      validataScalarArgument(currentArgumentScalar, objKeys, textValue);\n+    }\n+  };\n+\n+  useEffect(() => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be63fbfacaadca1158b9b56780e3a4a88b0819f5"}, "originalPosition": 603}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1Nzc3Mjc3OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwOToyMTozNFrOG0vi-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwOToyMTozNFrOG0vi-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk1ODEzNw==", "bodyText": "What do you think of similar rewrite? (plus there's a typo in validataScalarArgument)\n  const valueToValidate = (currentArgumentScalar) => {\n    switch (currentArgumentScalar)\n      case 'Boolean': return currentBoolean;\n      case 'ArrayString': return selectedState;\n      case 'stateSelection': return selectedState;\n      case 'MultiSelection': return multiState;\n      default: return textValue;\n    }\n  }\n  const validataScalarArgument = (scalarType, objKeys) => {\n    const value = valueToValidate(scalarType);\n    let parentString = '';\n    let chipText = '';\n    typeParent &&\n      typeParent.map(parent => (parentString = parentString + ' / ' + parent));\n    parentString = parentString.substring(3);\n    if (scalarType === 'ArrayString') {\n      chipText = validateChip(parentString, selected, selectTypes, inputArray);\n      let chipSelections = '';\n      if (typeParent) {\n        chipSelections = `${parentString} / ${selected}`;\n      } else {\n        chipSelections = selected;\n      }\n      checkChipArray(chipSelections, chipText);\n      const tempArray = inputArray.split(',');\n      set(obj, objKeys, tempArray);\n    } else {\n      chipText = validateChip(parentString, selected, selectTypes, value);\n      let chipSelections = '';\n      if (typeParent) {\n        chipSelections = `${parentString} / ${selected}`;\n      } else {\n        chipSelections = selected;\n      }\n      checkChipArray(chipSelections, chipText);\n      set(obj, objKeys, value);\n    }\n    setFinalFilters(() => {\n      if (finalFilters.hasOwnProperty(typeParent)) {\n        const te: any = Object.values(obj)[0];\n        finalFilters[typeParent] = { ...finalFilters[typeParent], ...te };\n        return finalFilters;\n      } else {\n        return { ...finalFilters, ...obj };\n      }\n    });\n    setTypeParent('');\n    setRunQuery(true);\n  };\n\n  const onApplyFilter = () => {\n    let objKeys;\n    if (typeParent.length > 0) {\n      objKeys = `${typeParent},${selected},${selectTypes}`;\n    } else {\n      objKeys = `${selected},${selectTypes}`;\n    }\n    validataScalarArgument(currentArgumentScalar, objKeys);\n  };", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r457958137", "createdAt": "2020-07-21T09:21:34Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "diffHunk": "@@ -0,0 +1,774 @@\n+import React, { useState, useEffect } from 'react';\n+import {\n+  Select,\n+  SelectVariant,\n+  SelectGroup,\n+  SelectOption,\n+  TextInput,\n+  Button,\n+  Dropdown,\n+  DropdownToggle,\n+  DropdownItem,\n+  InputGroup,\n+  Popover,\n+  PopoverPosition\n+} from '@patternfly/react-core';\n+import { GraphQL } from '../../../graphql/types';\n+import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n+import gql from 'graphql-tag';\n+import { query } from 'gql-query-builder';\n+import { useApolloClient } from 'react-apollo';\n+import { QuestionCircleIcon } from '@patternfly/react-icons';\n+import { validateResponse, set, removeDuplicates } from '../../../utils/Utils';\n+import './DomainExplorerFilterOptions.css';\n+\n+const DomainExplorerFilterOptions = ({\n+  argument,\n+  currentDomain,\n+  enableCache,\n+  filterChips,\n+  finalFilters,\n+  getQueryTypes,\n+  getSchema,\n+  offsetVal,\n+  pageSize,\n+  parameters,\n+  runQuery,\n+  reset,\n+  setColumnFilters,\n+  setDisplayTable,\n+  setDisplayEmptyState,\n+  setEnableRefresh,\n+  setFinalFilters,\n+  setFilterError,\n+  setFilterChips,\n+  setIsLoadingMore,\n+  setReset,\n+  setRunQuery,\n+  setTableLoading\n+}) => {\n+  // tslint:disable: forin\n+  // tslint:disable: no-floating-promises\n+  const client = useApolloClient();\n+  const [initData2, setInitData2] = useState<any>({\n+    __schema: { queryType: [] }\n+  });\n+  const [isExpanded, setIsExpanded] = useState(false);\n+  const [isFilterDropdownOpen, setIsFilterDropdownOpen] = useState(false);\n+  const [selected, setSelected] = useState('id');\n+  const [selectTypes, setSelectTypes] = useState('equal');\n+  const [textValue, setTextValue] = useState('');\n+  const [inputArray, setInputArray] = useState('');\n+  const [isOpen, setIsOpen] = useState(false);\n+  const [currentArgument, setCurrentArgument] = useState('');\n+  const [currentArgumentScalar, setCurrentArgumentScalar] = useState('String');\n+  const [typeParent, setTypeParent] = useState<any>([]);\n+  const [currentBoolean, setCurrentBoolean] = useState('boolean');\n+  const [stateToggle, setStateToggle] = useState(false);\n+  const [multiStateToggle, setMultiStateToggle] = useState(false);\n+  const [selectedState, setSelectedState] = useState('');\n+  const [multiState, setMultiState] = useState([]);\n+  const [enumArray, setEnumArray] = useState([]);\n+  const scalarArgs = [\n+    null,\n+    'Boolean',\n+    'BooleanArgument',\n+    'DateArgument',\n+    'DateRange',\n+    'IdArgument',\n+    'NumericRange',\n+    'NumericArgument',\n+    'ProcessInstanceState',\n+    'ProcessInstanceStateArgument',\n+    'String',\n+    'StringArgument',\n+    'StringArrayArgument'\n+  ];\n+\n+  const scalarTypes = ['Boolean', 'String'];\n+\n+  const nonArgs = [null, 'Boolean', 'String'];\n+  // const stateArray = [];\n+  useEffect(() => {\n+    setInitData2(getQueryTypes.data);\n+  }, [getQueryTypes.data]);\n+\n+  const onFieldToggle = _isExpanded => {\n+    setIsExpanded(_isExpanded);\n+  };\n+\n+  const getTypes = useGetInputFieldsFromTypeQuery({\n+    variables: {\n+      type: currentArgument\n+    }\n+  });\n+\n+  const onToggle = _isOpen => {\n+    setIsFilterDropdownOpen(_isOpen);\n+  };\n+  const onSelect = event => {\n+    setSelectTypes(event.target.innerText);\n+    setIsFilterDropdownOpen(false);\n+    const typeName =\n+      getTypes.data.__type &&\n+      getTypes.data.__type.inputFields.find(item => {\n+        if (item.name === event.target.innerText) {\n+          return item;\n+        }\n+      });\n+    if (\n+      typeName.type.kind === 'ENUM' ||\n+      (typeName.type.ofType && typeName.type.ofType.kind === 'ENUM')\n+    ) {\n+      if (typeName.type.name === null) {\n+        setCurrentArgumentScalar('MultiSelection');\n+        setEnumArray(typeName.type.ofType.enumValues);\n+      } else {\n+        setCurrentArgumentScalar('stateSelection');\n+        setEnumArray(typeName.type.enumValues);\n+      }\n+    } else {\n+      if (scalarTypes.includes(typeName.type.name)) {\n+        setCurrentArgumentScalar(typeName.type.name);\n+      } else {\n+        setCurrentArgumentScalar('ArrayString');\n+      }\n+    }\n+  };\n+\n+  const typesMenuItems =\n+    !getTypes.loading &&\n+    getTypes.data.__type &&\n+    getTypes.data.__type.inputFields.map((data, index) => (\n+      <SelectOption key={index} value={data.name} />\n+    ));\n+\n+  const textBoxChange = value => {\n+    setTextValue(value);\n+  };\n+\n+  const textGroupChange = value => {\n+    setInputArray(value);\n+  };\n+\n+  const onSelectBoolean = event => {\n+    setCurrentBoolean(event.target.innerText);\n+    setIsOpen(!isOpen);\n+  };\n+\n+  const onToggleBoolean = _isOpen => {\n+    setIsOpen(_isOpen);\n+  };\n+\n+  const dropdownItems = [\n+    <DropdownItem key=\"true\" component=\"button\">\n+      true{' '}\n+    </DropdownItem>,\n+    <DropdownItem key=\"false\" component=\"button\">\n+      false{' '}\n+    </DropdownItem>\n+  ];\n+\n+  const fetchSchema = option => {\n+    return (\n+      !getQueryTypes.loading &&\n+      getQueryTypes.data.__schema &&\n+      getQueryTypes.data.__schema.queryType.find(item => {\n+        if (item.name === option.type.name) {\n+          return item;\n+        }\n+      })\n+    );\n+  };\n+  let childItems;\n+  let finalResult: any = [];\n+  const childSelectionItems = (_data, title, ...attr) => {\n+    let nestedTitles = '';\n+    childItems =\n+      !getQueryTypes.loading &&\n+      _data.map(group => {\n+        const label = title + ' / ' + attr.join();\n+        const childEle = (\n+          <SelectGroup\n+            label={label.replace(/\\,/g, '')}\n+            key={'kie-filter-item-' + label.replace(/\\,/g, '')}\n+            id={group.name}\n+            value={label.replace(/\\,/g, '')}\n+          >\n+            {group.inputFields !== null &&\n+              group.inputFields\n+                .filter((item, _index) => {\n+                  if (!scalarArgs.includes(item.type.name)) {\n+                    const tempData = [];\n+                    const schemaObj = fetchSchema(item);\n+                    tempData.push(schemaObj);\n+                    nestedTitles = nestedTitles + ' / ' + item.name;\n+                    childSelectionItems(tempData, title, attr, nestedTitles);\n+                  } else {\n+                    return item;\n+                  }\n+                })\n+                .map(item => {\n+                  return (\n+                    <SelectOption\n+                      key={'kie-filter-item-' + group.name + title + item.name}\n+                      value={item.name + title + group.name}\n+                    >\n+                      {item.name}\n+                    </SelectOption>\n+                  );\n+                })}\n+          </SelectGroup>\n+        );\n+        return childEle;\n+      });\n+    finalResult.push(childItems);\n+  };\n+  const rootElementsArray = [];\n+  const selectionItems = () => {\n+    !getSchema.loading &&\n+      getSchema.data.__type &&\n+      getSchema.data.__type.inputFields\n+        .filter((group, index) => {\n+          if (group.type.kind !== 'LIST') {\n+            return group;\n+          }\n+        })\n+        .map((group, index) => {\n+          let groupItem;\n+          let rootItem;\n+          group.type.inputFields.filter(item => {\n+            if (!nonArgs.includes(item.type.name)) {\n+              groupItem = group;\n+            } else {\n+              rootItem = group;\n+            }\n+          });\n+          if (rootItem) {\n+            const _rootElement = (\n+              <SelectOption key={rootItem.name} value={rootItem.name} />\n+            );\n+            !rootElementsArray.includes(_rootElement) &&\n+              rootElementsArray.push(_rootElement);\n+          }\n+\n+          let ele;\n+          if (groupItem) {\n+            ele = (\n+              <SelectGroup\n+                label={groupItem.name}\n+                key={index}\n+                id={groupItem.name}\n+                value={groupItem.name}\n+              >\n+                {groupItem.type.inputFields &&\n+                  groupItem.type.inputFields\n+                    .filter((item, _index) => {\n+                      if (!scalarArgs.includes(item.type.name)) {\n+                        const tempData = [];\n+                        const _v = fetchSchema(item);\n+                        tempData.push(_v);\n+                        childSelectionItems(\n+                          tempData,\n+                          groupItem.name,\n+                          item.name\n+                        );\n+                      } else {\n+                        return item;\n+                      }\n+                    })\n+                    .map((item, _index) => {\n+                      return (\n+                        <SelectOption\n+                          key={_index}\n+                          value={item.name + groupItem.name}\n+                        >\n+                          {item.name}\n+                        </SelectOption>\n+                      );\n+                    })}\n+              </SelectGroup>\n+            );\n+          }\n+          ele && !finalResult.includes(ele) && finalResult.push(ele);\n+        });\n+  };\n+\n+  const rootElement: any = (\n+    <SelectGroup label=\" \" key={'kie-filter-item-' + ' '} id=\"\" value=\" \">\n+      {rootElementsArray}\n+    </SelectGroup>\n+  );\n+  finalResult.unshift(rootElement);\n+  const onChange = (event, selection, isPlaceholder) => {\n+    const innerText = event.target.innerText;\n+    setSelected(innerText);\n+    const parent = event.nativeEvent.target.parentElement.parentElement.getAttribute(\n+      'value'\n+    );\n+    let tempParents;\n+    let lastEle;\n+    if (parent !== ' ') {\n+      tempParents = parent.split(' / ');\n+      setTypeParent(tempParents);\n+      lastEle = tempParents.slice(-1)[0];\n+    } else {\n+      tempParents = [innerText];\n+      lastEle = tempParents.slice(-1)[0];\n+    }\n+    let arg;\n+    if (lastEle === 'processInstances') {\n+      let str = lastEle.charAt(0).toUpperCase() + lastEle.slice(1);\n+      str = str.substring(0, str.length - 1);\n+      arg = str + 'MetaArgument';\n+    } else if (lastEle === 'userTasks') {\n+      let str = lastEle.charAt(0).toUpperCase() + lastEle.slice(1);\n+      str = str.substring(0, str.length - 1);\n+      arg = str + 'InstanceMetaArgument';\n+    } else {\n+      const str = lastEle.charAt(0).toUpperCase() + lastEle.slice(1);\n+      arg = str + 'Argument';\n+    }\n+    const argType = initData2.__schema.queryType.find(type => {\n+      if (type.name === arg) {\n+        return type;\n+      }\n+    });\n+\n+    const argField = argType.inputFields.find(data => {\n+      if (data.name === innerText) {\n+        return data;\n+      }\n+    });\n+\n+    if (argField === undefined) {\n+      setCurrentArgument(argType.name);\n+    } else {\n+      if (argField.type.kind === 'INPUT_OBJECT') {\n+        setCurrentArgument(argField.type.name);\n+      } else {\n+        setCurrentArgumentScalar(argField.type.name);\n+      }\n+    }\n+    setSelectTypes('');\n+    setIsExpanded(false);\n+  };\n+\n+  const onStateToggle = _isOpen => {\n+    setStateToggle(_isOpen);\n+  };\n+\n+  const onStateSelect = event => {\n+    const selection = event.target.innerText;\n+    setSelectedState(selection);\n+    setStateToggle(!stateToggle);\n+  };\n+\n+  const onMultiStateToggle = _isOpen => {\n+    setMultiStateToggle(_isOpen);\n+  };\n+\n+  const onMultiStateSelect = (event, selection) => {\n+    if (multiState.includes(selection)) {\n+      setMultiState(prev => prev.filter(item => item !== selection));\n+    } else {\n+      setMultiState(prev => [...prev, selection]);\n+    }\n+    setMultiStateToggle(!multiStateToggle);\n+  };\n+\n+  const onLoad = () => {\n+    const innerText = 'id';\n+    let tempParents;\n+    tempParents = [innerText];\n+    const lastEle = tempParents.slice(-1)[0];\n+    let arg;\n+    const str = lastEle.charAt(0).toUpperCase() + lastEle.slice(1);\n+    arg = str + 'Argument';\n+    const argType = getQueryTypes.data.__schema.queryType.find(type => {\n+      if (type.name === arg) {\n+        return type;\n+      }\n+    });\n+    const argField = argType.inputFields.find(data => {\n+      if (data.name === innerText) {\n+        return data;\n+      }\n+    });\n+    if (argField === undefined) {\n+      setCurrentArgument(argType.name);\n+      setCurrentArgumentScalar('String');\n+      setTextValue('');\n+      setInputArray('');\n+      setCurrentBoolean('boolean');\n+      setMultiState([]);\n+      setSelectedState('');\n+    }\n+  };\n+\n+  !getSchema.loading && selectionItems();\n+  finalResult = finalResult.flat();\n+\n+  useEffect(() => {\n+    setReset(true);\n+  }, []);\n+\n+  useEffect(() => {\n+    if (reset === true) {\n+      setSelected('id');\n+      setSelectTypes('equal');\n+      setTypeParent('');\n+      onLoad();\n+      setRunQuery(true);\n+    }\n+  }, [reset]);\n+  const obj: any = {};\n+  const setPlaceHolders = () => {\n+    currentArgumentScalar === 'String' && setTextValue('');\n+    currentArgumentScalar === 'Boolean' && setCurrentBoolean('boolean');\n+    currentArgumentScalar === 'ArrayString' && setInputArray('');\n+    currentArgumentScalar === 'stateSelection' && setSelectedState('');\n+    currentArgumentScalar === 'MultiSelection' && setMultiState([]);\n+    setSelectTypes('');\n+    setSelected('');\n+  };\n+  async function generateFilterQuery() {\n+    reset !== true && setPlaceHolders();\n+    setTableLoading(true);\n+    setEnableRefresh(true);\n+    if (parameters.length > 1 && Object.keys(finalFilters).length > 0) {\n+      const Query = query({\n+        operation: currentDomain,\n+        variables: {\n+          pagination: {\n+            value: { offset: offsetVal, limit: pageSize },\n+            type: 'Pagination'\n+          },\n+          where: { value: finalFilters, type: argument }\n+        },\n+        fields: parameters\n+      });\n+      try {\n+        const response = await client.query({\n+          query: gql`\n+            ${Query.query}\n+          `,\n+          variables: Query.variables,\n+          fetchPolicy: enableCache ? 'cache-first' : 'network-only'\n+        });\n+        const firstKey = Object.keys(response.data)[0];\n+        if (response.data[firstKey].length > 0) {\n+          setFilterError('');\n+          const resp = response.data;\n+          const respKeys = Object.keys(resp)[0];\n+          const tableContent = resp[respKeys];\n+          const finalResp = [];\n+          tableContent.map(content => {\n+            const finalObject = validateResponse(content, parameters);\n+            finalResp.push(finalObject);\n+          });\n+          setColumnFilters(finalResp);\n+          setTableLoading(false);\n+          setRunQuery(false);\n+          setDisplayTable(true);\n+          setDisplayEmptyState(false);\n+        } else {\n+          setDisplayEmptyState(true);\n+          setTableLoading(false);\n+          setRunQuery(false);\n+        }\n+      } catch (error) {\n+        setFilterError(error);\n+        setTableLoading(false);\n+        setDisplayTable(false);\n+        setDisplayEmptyState(false);\n+        setRunQuery(false);\n+      }\n+    } else {\n+      setTableLoading(false);\n+      setDisplayEmptyState(false);\n+      setDisplayTable(false);\n+      setRunQuery(false);\n+    }\n+    setReset(false);\n+    setIsLoadingMore(false);\n+  }\n+\n+  const validateChip = (parentString, _selected, _selectTypes, value) => {\n+    if (_selectTypes === 'equal') {\n+      return parentString\n+        ? `${parentString} / ${_selected}: ${value}`\n+        : `${_selected}: ${value}`;\n+    } else if (_selectTypes === 'isNull') {\n+      if (value === true) {\n+        return parentString\n+          ? `${parentString} / ${_selected}: is null`\n+          : `${_selected}: is null`;\n+      } else {\n+        return parentString\n+          ? `${parentString} / ${_selected}: is not null`\n+          : `${_selected}: is not null`;\n+      }\n+    } else if (_selectTypes === 'in') {\n+      return parentString\n+        ? `${parentString} / ${_selected}: is in ${value}`\n+        : `${_selected}: is in ${value}`;\n+    } else {\n+      return parentString\n+        ? `${parentString} / ${_selected}: ${_selectTypes} ${value}`\n+        : `${_selected}: ${_selectTypes} ${value}`;\n+    }\n+  };\n+\n+  const checkChipArray = (chipSelections, chipText) => {\n+    let value = '';\n+    filterChips.forEach(item => {\n+      const tempItem = item.split(':');\n+      if (tempItem[0] === chipSelections) {\n+        value = item;\n+      }\n+    });\n+    if (value.length > 0) {\n+      const index = filterChips.indexOf(value);\n+      setFilterChips(prev => {\n+        prev.splice(index, 1);\n+        return [...prev, chipText];\n+      });\n+    } else {\n+      setFilterChips(prev => [...prev, chipText]);\n+    }\n+  };\n+\n+  const validataScalarArgument = (scalarType, objKeys, value) => {\n+    let parentString = '';\n+    let chipText = '';\n+    typeParent &&\n+      typeParent.map(parent => (parentString = parentString + ' / ' + parent));\n+    parentString = parentString.substring(3);\n+    if (scalarType === 'ArrayString') {\n+      chipText = validateChip(parentString, selected, selectTypes, inputArray);\n+      let chipSelections = '';\n+      if (typeParent) {\n+        chipSelections = `${parentString} / ${selected}`;\n+      } else {\n+        chipSelections = selected;\n+      }\n+      checkChipArray(chipSelections, chipText);\n+      const tempArray = inputArray.split(',');\n+      set(obj, objKeys, tempArray);\n+    } else {\n+      chipText = validateChip(parentString, selected, selectTypes, value);\n+      let chipSelections = '';\n+      if (typeParent) {\n+        chipSelections = `${parentString} / ${selected}`;\n+      } else {\n+        chipSelections = selected;\n+      }\n+      checkChipArray(chipSelections, chipText);\n+      set(obj, objKeys, value);\n+    }\n+    setFinalFilters(() => {\n+      if (finalFilters.hasOwnProperty(typeParent)) {\n+        const te: any = Object.values(obj)[0];\n+        finalFilters[typeParent] = { ...finalFilters[typeParent], ...te };\n+        return finalFilters;\n+      } else {\n+        return { ...finalFilters, ...obj };\n+      }\n+    });\n+    setTypeParent('');\n+    setRunQuery(true);\n+  };\n+\n+  const onApplyFilter = () => {\n+    let objKeys;\n+    if (typeParent.length > 0) {\n+      objKeys = `${typeParent},${selected},${selectTypes}`;\n+    } else {\n+      objKeys = `${selected},${selectTypes}`;\n+    }\n+    if (currentArgumentScalar === 'Boolean') {\n+      validataScalarArgument(currentArgumentScalar, objKeys, currentBoolean);\n+    } else if (currentArgumentScalar === 'ArrayString') {\n+      validataScalarArgument(currentArgumentScalar, objKeys, selectedState);\n+    } else if (currentArgumentScalar === 'stateSelection') {\n+      validataScalarArgument(currentArgumentScalar, objKeys, selectedState);\n+    } else if (currentArgumentScalar === 'MultiSelection') {\n+      validataScalarArgument(currentArgumentScalar, objKeys, multiState);\n+    } else {\n+      validataScalarArgument(currentArgumentScalar, objKeys, textValue);\n+    }\n+  };", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be63fbfacaadca1158b9b56780e3a4a88b0819f5"}, "originalPosition": 601}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1Nzc5ODQ2OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/tests/DomainExplorerFilterOptions.test.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwOToyODoxM1rOG0vynw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwOToyODoxM1rOG0vynw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk2MjE0Mw==", "bodyText": "why invoked twice here? to mock implementation twice?", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r457962143", "createdAt": "2020-07-21T09:28:13Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/tests/DomainExplorerFilterOptions.test.tsx", "diffHunk": "@@ -0,0 +1,1890 @@\n+import React from 'react';\n+import DomainExplorerFilterOptions from '../DomainExplorerFilterOptions';\n+import reactApollo from 'react-apollo';\n+import { GraphQL } from '../../../../graphql/types';\n+import useGetInputFieldsFromQueryQuery = GraphQL.useGetInputFieldsFromQueryQuery;\n+import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n+import { mount } from 'enzyme';\n+import { act } from 'react-dom/test-utils';\n+\n+jest.mock('apollo-client');\n+jest.mock('react-apollo', () => {\n+  const ApolloClient = { query: jest.fn() };\n+  return { useApolloClient: jest.fn(() => ApolloClient) };\n+});\n+\n+jest.mock('../../../../graphql/types');\n+// tslint:disable: no-string-literal\n+// tslint:disable: no-unexpected-multiline\n+describe('Domain explorer filter options component tests', () => {\n+  const mGraphQLResponse = {\n+    data: {\n+      Travels: [\n+        {\n+          flight: {\n+            arrival: '2020-07-22T03:30:00.000+05:30',\n+            departure: '2020-07-07T03:30:00.000+05:30',\n+            flightNumber: 'MX555',\n+            gate: null,\n+            seat: null\n+          },\n+          metadata: {\n+            processInstances: [\n+              {\n+                businessKey: 'LKJD13',\n+                id: '37bc93d0-1100-3913-85aa-a8dc253281b0',\n+                lastUpdate: '2020-07-06T09:16:09.823Z',\n+                processName: 'travels',\n+                serviceUrl: 'http://localhost:8080',\n+                start: '2020-07-06T09:16:09.58Z',\n+                state: 'ACTIVE'\n+              },\n+              {\n+                businessKey: null,\n+                id: '8526d522-24f6-4d12-b975-394a0adeb8f8',\n+                lastUpdate: '2020-07-06T09:16:09.824Z',\n+                processName: 'HotelBooking',\n+                serviceUrl: 'http://localhost:8080',\n+                start: '2020-07-06T09:16:09.746Z',\n+                state: 'COMPLETED'\n+              }\n+            ]\n+          }\n+        },\n+        {\n+          flight: {\n+            arrival: '2020-07-23T03:30:00.000+05:30',\n+            departure: '2020-07-10T03:30:00.000+05:30',\n+            flightNumber: 'MX555',\n+            gate: null,\n+            seat: null\n+          },\n+          metadata: {\n+            processInstances: [\n+              {\n+                businessKey: '4Y0W6E',\n+                id: 'd2b4967b-e8b1-3232-a07c-d639e08a11d4',\n+                lastUpdate: '2020-07-06T09:16:55.621Z',\n+                processName: 'travels',\n+                serviceUrl: 'http://localhost:8080',\n+                start: '2020-07-06T09:16:55.609Z',\n+                state: 'ACTIVE'\n+              },\n+              {\n+                businessKey: null,\n+                id: 'cd5f6cc6-7ef4-4eb1-947b-3f53f201ab15',\n+                lastUpdate: '2020-07-06T09:16:55.621Z',\n+                processName: 'HotelBooking',\n+                serviceUrl: 'http://localhost:8080',\n+                start: '2020-07-06T09:16:55.611Z',\n+                state: 'COMPLETED'\n+              }\n+            ]\n+          }\n+        }\n+      ]\n+    },\n+    loading: false,\n+    networkStatus: 7,\n+    stale: false\n+  };\n+  const mGraphQLResponse2 = {\n+    data: {\n+      Travels: []\n+    }\n+  };\n+  const defaultProps = {\n+    currentDomain: 'Travels',\n+    getQuery: {\n+      loading: false,\n+      data: {\n+        __type: {\n+          name: 'Query',\n+          fields: [\n+            {\n+              name: 'Travels',\n+              args: [\n+                {\n+                  name: 'where',\n+                  type: { kind: 'INPUT_OBJECT', name: 'TravelsArgument' }\n+                },\n+                {\n+                  name: 'orderBy',\n+                  type: { kind: 'INPUT_OBJECT', name: 'TravelsOrderBy' }\n+                },\n+                {\n+                  name: 'pagination',\n+                  type: { kind: 'INPUT_OBJECT', name: 'Pagination' }\n+                }\n+              ],\n+              type: {\n+                ofType: { name: 'Travels' }\n+              }\n+            }\n+          ]\n+        }\n+      }\n+    },\n+    parameters: [\n+      { flight: ['arrival'] },\n+      { flight: ['departure'] },\n+      { flight: ['gate'] },\n+      {\n+        metadata: [\n+          {\n+            processInstances: [\n+              'id',\n+              'processName',\n+              'state',\n+              'start',\n+              'lastUpdate',\n+              'businessKey'\n+            ]\n+          }\n+        ]\n+      }\n+    ],\n+    setIsLoadingMore: jest.fn(),\n+    setColumnFilters: jest.fn(),\n+    setTableLoading: jest.fn(),\n+    setDisplayTable: jest.fn(),\n+    setDisplayEmptyState: jest.fn(),\n+    setFilterError: jest.fn(),\n+    filterChips: ['metadata / processInstances / state: ACTIVE'],\n+    setFilterChips: jest.fn(),\n+    runQuery: true,\n+    setRunQuery: jest.fn(),\n+    finalFilters: {\n+      metadata: {\n+        processInstances: { state: { equal: 'ACTIVE' } }\n+      },\n+      trip: {\n+        country: {\n+          equal: 'Australia'\n+        }\n+      }\n+    },\n+    argument: 'TravelsArgument',\n+    setFinalFilters: jest.fn(),\n+    getSchema: {\n+      data: {\n+        __type: {\n+          name: 'TravelsArgument',\n+          inputFields: [\n+            { name: 'and', type: { name: null, kind: 'LIST' } },\n+            { name: 'or', type: { name: null, kind: 'LIST' } },\n+            {\n+              name: 'flight',\n+              type: {\n+                name: 'FlightArgument',\n+                kind: 'INPUT_OBJECT',\n+                inputFields: [\n+                  {\n+                    name: 'arrival',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'departure',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'flightNumber',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'gate',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  },\n+                  {\n+                    name: 'seat',\n+                    type: {\n+                      name: 'StringArgument'\n+                    }\n+                  }\n+                ]\n+              }\n+            }\n+          ]\n+        }\n+      }\n+    },\n+    reset: false,\n+    setReset: jest.fn(),\n+    offsetVal: 0,\n+    pageSize: 10,\n+    setEnableRefresh: jest.fn(),\n+    enableCache: false\n+  };\n+  afterEach(() => {\n+    jest.clearAllMocks();\n+  });\n+  let client;\n+  let useApolloClient;\n+  let useEffect;\n+\n+  const mockUseEffect = () => {\n+    useEffect.mockImplementationOnce(f => f());\n+  };\n+\n+  const mockUseApolloClient = () => {\n+    // tslint:disable-next-line: react-hooks-nesting\n+    client = useApolloClient();\n+  };\n+\n+  beforeEach(() => {\n+    useApolloClient = jest.spyOn(reactApollo, 'useApolloClient');\n+    mockUseApolloClient();\n+    useEffect = jest.spyOn(React, 'useEffect');\n+    mockUseEffect();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be63fbfacaadca1158b9b56780e3a4a88b0819f5"}, "originalPosition": 246}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg1NzgzMDA1OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerManageColumns/tests/DomainExplorerManageColumns.test.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwOTozNjo0M1rOG0wGYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMVQwOTozNjo0M1rOG0wGYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1Nzk2NzIwMA==", "bodyText": "we can keep just {...props} here when not overriding any value", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r457967200", "createdAt": "2020-07-21T09:36:43Z", "author": {"login": "jstastny-cz"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerManageColumns/tests/DomainExplorerManageColumns.test.tsx", "diffHunk": "@@ -1149,7 +650,7 @@ describe('Domain Explorer Manage columns component', () => {\n       stale: true\n     };\n     client.query.mockReturnValueOnce(mGraphQLResponse);\n-    const wrapper = mount(<DomainExplorerManageColumns {...props} />);\n+    const wrapper = mount(<DomainExplorerManageColumns {...{ ...props }} />);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "be63fbfacaadca1158b9b56780e3a4a88b0819f5"}, "originalPosition": 1075}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTczMTM1OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Organisms/DomainExplorer/DomainExplorer.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNzowMjoyOFrOG1VVxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNzowMjoyOFrOG1VVxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU3NzM0OQ==", "bodyText": "@Sara4994  could we use here defaultfilter received as parameter?", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r458577349", "createdAt": "2020-07-22T07:02:28Z", "author": {"login": "nmirasch"}, "path": "ui-packages/packages/common/src/components/Organisms/DomainExplorer/DomainExplorer.tsx", "diffHunk": "@@ -113,68 +161,130 @@ const DomainExplorer: React.FC<IOwnProps> = ({\n       setEnableCache(true);\n       setParameters(rememberedParams);\n       setSelected(rememberedSelections);\n+      setFinalFilters(rememberedFilters);\n+      setFilterChips(rememberedChips);\n     } else {\n       setParameters(prev => [...defaultParams, ...prev]);\n       setSelected(selections);\n     }\n   }, [columnPickerType, selections.length > 0]);\n \n+  const onDeleteChip = (type = '', id = '') => {\n+    if (type) {\n+      setFilterChips(prev => prev.filter(item => item !== id));\n+      const chipText = id.split(':');\n+      let removeString = chipText[0].split('/');\n+      removeString = removeString.map(stringEle => stringEle.trim());\n+      let tempObj = finalFilters;\n+      tempObj = deleteKey(tempObj, removeString);\n+      const FinalObj = clearEmpties(tempObj);\n+      setFinalFilters(FinalObj);\n+      setRunQuery(true);\n+    } else {\n+      setFinalFilters({", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "935a8c94e8bc2902bb68d35b991078763573d3cd"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2MTczMjY0OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Organisms/DomainExplorer/DomainExplorer.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNzowMjo1NlrOG1VWmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yMlQwNzowMjo1NlrOG1VWmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1ODU3NzU2MA==", "bodyText": "@Sara4994  could we use here defaultChip received as parameter?", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r458577560", "createdAt": "2020-07-22T07:02:56Z", "author": {"login": "nmirasch"}, "path": "ui-packages/packages/common/src/components/Organisms/DomainExplorer/DomainExplorer.tsx", "diffHunk": "@@ -113,68 +161,130 @@ const DomainExplorer: React.FC<IOwnProps> = ({\n       setEnableCache(true);\n       setParameters(rememberedParams);\n       setSelected(rememberedSelections);\n+      setFinalFilters(rememberedFilters);\n+      setFilterChips(rememberedChips);\n     } else {\n       setParameters(prev => [...defaultParams, ...prev]);\n       setSelected(selections);\n     }\n   }, [columnPickerType, selections.length > 0]);\n \n+  const onDeleteChip = (type = '', id = '') => {\n+    if (type) {\n+      setFilterChips(prev => prev.filter(item => item !== id));\n+      const chipText = id.split(':');\n+      let removeString = chipText[0].split('/');\n+      removeString = removeString.map(stringEle => stringEle.trim());\n+      let tempObj = finalFilters;\n+      tempObj = deleteKey(tempObj, removeString);\n+      const FinalObj = clearEmpties(tempObj);\n+      setFinalFilters(FinalObj);\n+      setRunQuery(true);\n+    } else {\n+      setFinalFilters({\n+        metadata: {\n+          processInstances: {\n+            state: {\n+              equal: 'ACTIVE'\n+            }\n+          }\n+        }\n+      });\n+      setFilterChips(['metadata / processInstances / state: ACTIVE']);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "935a8c94e8bc2902bb68d35b991078763573d3cd"}, "originalPosition": 156}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTc5NjI1OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDo1ODoxN1rOG18POQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNDo1ODoxN1rOG18POQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxNDY0OQ==", "bodyText": "this should be generic for any enum, could it be merged if the lines above?", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r459214649", "createdAt": "2020-07-23T04:58:17Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "diffHunk": "@@ -0,0 +1,794 @@\n+import React, { useState, useEffect } from 'react';\n+import {\n+  Select,\n+  SelectVariant,\n+  SelectGroup,\n+  SelectOption,\n+  TextInput,\n+  Button,\n+  Dropdown,\n+  DropdownToggle,\n+  DropdownItem,\n+  InputGroup,\n+  Popover,\n+  PopoverPosition\n+} from '@patternfly/react-core';\n+import { GraphQL } from '../../../graphql/types';\n+import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n+import gql from 'graphql-tag';\n+import { query } from 'gql-query-builder';\n+import { useApolloClient } from 'react-apollo';\n+import { QuestionCircleIcon } from '@patternfly/react-icons';\n+import { validateResponse, set, removeDuplicates } from '../../../utils/Utils';\n+import './DomainExplorerFilterOptions.css';\n+\n+const DomainExplorerFilterOptions = ({\n+  argument,\n+  currentDomain,\n+  enableCache,\n+  filterChips,\n+  finalFilters,\n+  getQueryTypes,\n+  getSchema,\n+  loadMoreClicked,\n+  offsetVal,\n+  pageSize,\n+  parameters,\n+  runQuery,\n+  reset,\n+  setColumnFilters,\n+  setDisplayTable,\n+  setDisplayEmptyState,\n+  setEnableRefresh,\n+  setFinalFilters,\n+  setFilterError,\n+  setFilterChips,\n+  setIsLoadingMore,\n+  setLoadMoreClicked,\n+  setOffset,\n+  setReset,\n+  setRunQuery,\n+  setTableLoading\n+}) => {\n+  // tslint:disable: forin\n+  // tslint:disable: no-floating-promises\n+  const client = useApolloClient();\n+  const [initData2, setInitData2] = useState<any>({\n+    __schema: { queryType: [] }\n+  });\n+  const [isExpanded, setIsExpanded] = useState(false);\n+  const [isFilterDropdownOpen, setIsFilterDropdownOpen] = useState(false);\n+  const [selected, setSelected] = useState('id');\n+  const [selectTypes, setSelectTypes] = useState('equal');\n+  const [textValue, setTextValue] = useState('');\n+  const [inputArray, setInputArray] = useState('');\n+  const [isOpen, setIsOpen] = useState(false);\n+  const [currentArgument, setCurrentArgument] = useState('');\n+  const [currentArgumentScalar, setCurrentArgumentScalar] = useState('String');\n+  const [typeParent, setTypeParent] = useState<any>([]);\n+  const [currentBoolean, setCurrentBoolean] = useState('boolean');\n+  const [stateToggle, setStateToggle] = useState(false);\n+  const [multiStateToggle, setMultiStateToggle] = useState(false);\n+  const [selectedState, setSelectedState] = useState('');\n+  const [multiState, setMultiState] = useState([]);\n+  const [enumArray, setEnumArray] = useState([]);\n+  const scalarArgs = [\n+    null,\n+    'Boolean',\n+    'BooleanArgument',\n+    'DateArgument',\n+    'DateRange',\n+    'IdArgument',\n+    'NumericRange',\n+    'NumericArgument',\n+    'ProcessInstanceState',\n+    'ProcessInstanceStateArgument',\n+    'String',\n+    'StringArgument',\n+    'StringArrayArgument'\n+  ];\n+\n+  const scalarTypes = ['Boolean', 'String'];\n+\n+  const nonArgs = [null, 'Boolean', 'String'];\n+  useEffect(() => {\n+    setInitData2(getQueryTypes.data);\n+  }, [getQueryTypes.data]);\n+\n+  const onFieldToggle = _isExpanded => {\n+    setIsExpanded(_isExpanded);\n+  };\n+\n+  const getTypes = useGetInputFieldsFromTypeQuery({\n+    variables: {\n+      type: currentArgument\n+    }\n+  });\n+\n+  const onToggle = _isOpen => {\n+    setIsFilterDropdownOpen(_isOpen);\n+  };\n+  const checkType = innerText => {\n+    const typeName =\n+      getTypes.data.__type &&\n+      getTypes.data.__type.inputFields.find(item => {\n+        if (item.name === innerText) {\n+          return item;\n+        }\n+      });\n+    if (\n+      typeName.type.kind === 'ENUM' ||\n+      (typeName.type.ofType && typeName.type.ofType.kind === 'ENUM')\n+    ) {\n+      if (typeName.type.name === null) {\n+        setCurrentArgumentScalar('MultiSelection');\n+        setEnumArray(typeName.type.ofType.enumValues);\n+      } else {\n+        setCurrentArgumentScalar('stateSelection');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4361e32729ca3ee7bcb8e4f73f9deb0f0a947d86"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTgyMDA4OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerManageColumns/DomainExplorerManageColumns.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNToxMzo1MFrOG18cnQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNToxMzo1MFrOG18cnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxODA3Nw==", "bodyText": "please use more specific types", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r459218077", "createdAt": "2020-07-23T05:13:50Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerManageColumns/DomainExplorerManageColumns.tsx", "diffHunk": "@@ -22,75 +22,50 @@ import {\n import { SyncIcon } from '@patternfly/react-icons';\n import './DomainExplorerManageColumns.css';\n import _ from 'lodash';\n-import gql from 'graphql-tag';\n-import { query } from 'gql-query-builder';\n-import { useApolloClient } from 'react-apollo';\n-import { validateResponse, filterColumnSelection } from '../../../utils/Utils';\n+import { filterColumnSelection, removeDuplicates } from '../../../utils/Utils';\n \n export interface IOwnProps {\n   columnPickerType: any;\n-  setColumnFilters: any;\n-  setTableLoading: any;\n   getQueryTypes: any;\n-  setDisplayTable: any;\n-  parameters: any;\n   setParameters: any;\n   selected: any;\n   setSelected: any;\n   data: any;\n   getPicker: any;\n-  setError: any;\n-  setDisplayEmptyState: any;\n-  rememberedParams: any;\n-  enableCache: boolean;\n-  setEnableCache: any;\n-  offsetVal: number;\n-  pageSize: number;\n   setOffsetVal: (offsetVal: number) => void;\n   setPageSize: (pageSize: number) => void;\n-  setIsLoadingMore: (isLoadingMoreVal: boolean) => void;\n-  isLoadingMore: boolean;\n   metaData: any;\n   setIsModalOpen: any;\n   isModalOpen: boolean;\n+  setRunQuery: any;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5495f2be84231a8c91ab5230d70c98cb9b4aa47f"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTgyMzM2OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Organisms/DomainExplorer/DomainExplorer.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNToxNTo0MlrOG18eaA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNTozNzoxMlrOG2QRMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxODUzNg==", "bodyText": "please use more specific types", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r459218536", "createdAt": "2020-07-23T05:15:42Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/common/src/components/Organisms/DomainExplorer/DomainExplorer.tsx", "diffHunk": "@@ -5,59 +5,93 @@ import {\n   DataToolbarToggleGroup,\n   DataToolbarGroup,\n   Card,\n-  Bullseye\n+  Bullseye,\n+  DataToolbarItem,\n+  DataToolbarFilter\n } from '@patternfly/react-core';\n import { FilterIcon } from '@patternfly/react-icons';\n+import DomainExplorerFilterOptions from '../../Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions';\n import DomainExplorerManageColumns from '../../Molecules/DomainExplorerManageColumns/DomainExplorerManageColumns';\n import DomainExplorerTable from '../../Molecules/DomainExplorerTable/DomainExplorerTable';\n import KogitoSpinner from '../../Atoms/KogitoSpinner/KogitoSpinner';\n import LoadMore from '../../Atoms/LoadMore/LoadMore';\n import ServerErrors from '../../Molecules/ServerErrors/ServerErrors';\n+import { deleteKey, clearEmpties } from '../../../utils/Utils';\n import './DomainExplorer.css';\n \n import { GraphQL } from '../../../graphql/types';\n import useGetQueryTypesQuery = GraphQL.useGetQueryTypesQuery;\n import useGetQueryFieldsQuery = GraphQL.useGetQueryFieldsQuery;\n import useGetColumnPickerAttributesQuery = GraphQL.useGetColumnPickerAttributesQuery;\n-\n+import useGetInputFieldsFromQueryQuery = GraphQL.useGetInputFieldsFromQueryQuery;\n interface IOwnProps {\n   domainName: string;\n   rememberedParams: any;\n   rememberedSelections: any;\n   metaData: any;\n+  rememberedFilters: object;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5495f2be84231a8c91ab5230d70c98cb9b4aa47f"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU0MjgzNQ==", "bodyText": "still mostly using any", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r459542835", "createdAt": "2020-07-23T15:37:12Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/common/src/components/Organisms/DomainExplorer/DomainExplorer.tsx", "diffHunk": "@@ -5,59 +5,93 @@ import {\n   DataToolbarToggleGroup,\n   DataToolbarGroup,\n   Card,\n-  Bullseye\n+  Bullseye,\n+  DataToolbarItem,\n+  DataToolbarFilter\n } from '@patternfly/react-core';\n import { FilterIcon } from '@patternfly/react-icons';\n+import DomainExplorerFilterOptions from '../../Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions';\n import DomainExplorerManageColumns from '../../Molecules/DomainExplorerManageColumns/DomainExplorerManageColumns';\n import DomainExplorerTable from '../../Molecules/DomainExplorerTable/DomainExplorerTable';\n import KogitoSpinner from '../../Atoms/KogitoSpinner/KogitoSpinner';\n import LoadMore from '../../Atoms/LoadMore/LoadMore';\n import ServerErrors from '../../Molecules/ServerErrors/ServerErrors';\n+import { deleteKey, clearEmpties } from '../../../utils/Utils';\n import './DomainExplorer.css';\n \n import { GraphQL } from '../../../graphql/types';\n import useGetQueryTypesQuery = GraphQL.useGetQueryTypesQuery;\n import useGetQueryFieldsQuery = GraphQL.useGetQueryFieldsQuery;\n import useGetColumnPickerAttributesQuery = GraphQL.useGetColumnPickerAttributesQuery;\n-\n+import useGetInputFieldsFromQueryQuery = GraphQL.useGetInputFieldsFromQueryQuery;\n interface IOwnProps {\n   domainName: string;\n   rememberedParams: any;\n   rememberedSelections: any;\n   metaData: any;\n+  rememberedFilters: object;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxODUzNg=="}, "originalCommit": {"oid": "5495f2be84231a8c91ab5230d70c98cb9b4aa47f"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTgzMDIwOnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/graphql/graphql.schema.json", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNToyMDoyNFrOG18icA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNToyMDoyNFrOG18icA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxOTU2OA==", "bodyText": "@Sara4994 please dont include custom types in here. Please regenerate without deploying proto files to data index.", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r459219568", "createdAt": "2020-07-23T05:20:24Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/common/src/graphql/graphql.schema.json", "diffHunk": "@@ -153,6 +153,100 @@\n             },\n             \"isDeprecated\": false,\n             \"deprecationReason\": null\n+          },\n+          {\n+            \"name\": \"Travels\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5495f2be84231a8c91ab5230d70c98cb9b4aa47f"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTgzMTk1OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/graphql/types.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNToyMTozN1rOG18jcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxMzo1MzowMlrOG2Ljlw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxOTgyNg==", "bodyText": "as mentioned, custom types should not be added to our types, please regenerate the graphql schema.", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r459219826", "createdAt": "2020-07-23T05:21:37Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/common/src/graphql/types.tsx", "diffHunk": "@@ -16,6 +16,28 @@ export namespace GraphQL {\n     DateTime: any;\n   };\n \n+  export type Address = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5495f2be84231a8c91ab5230d70c98cb9b4aa47f"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTQ2NTYyMw==", "bodyText": "done", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r459465623", "createdAt": "2020-07-23T13:53:02Z", "author": {"login": "Sara4994"}, "path": "ui-packages/packages/common/src/graphql/types.tsx", "diffHunk": "@@ -16,6 +16,28 @@ export namespace GraphQL {\n     DateTime: any;\n   };\n \n+  export type Address = {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIxOTgyNg=="}, "originalCommit": {"oid": "5495f2be84231a8c91ab5230d70c98cb9b4aa47f"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTgzNjY4OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/utils/Utils.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNToyNDoxNlrOG18l_A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNToyNDoxNlrOG18l_A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyMDQ3Ng==", "bodyText": "feels like some magic going on here, maybe adding some comments to describe the goal of each of these methods and a more specific name could help to understand.", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r459220476", "createdAt": "2020-07-23T05:24:16Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/common/src/utils/Utils.ts", "diffHunk": "@@ -98,3 +98,50 @@ export const filterColumnSelection = (selectionArray, objValue) => {\n   }\n   return res;\n };\n+\n+export const deleteKey = (testObj, pathArray) => {\n+  const _obj = testObj;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5495f2be84231a8c91ab5230d70c98cb9b4aa47f"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTgzNzk0OnYy", "diffSide": "RIGHT", "path": "yarn.lock", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNToyNDo1OVrOG18mwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNToyNDo1OVrOG18mwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyMDY3Mg==", "bodyText": "please remove file from PR.", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r459220672", "createdAt": "2020-07-23T05:24:59Z", "author": {"login": "cristianonicolai"}, "path": "yarn.lock", "diffHunk": "@@ -0,0 +1,4 @@\n+# THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5495f2be84231a8c91ab5230d70c98cb9b4aa47f"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTg4Nzc5OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNTo1NDo1MlrOG19CtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNTo1NDo1MlrOG19CtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyNzgyOA==", "bodyText": "do we still need to handle this, isnt enough to just handle as an enum?", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r459227828", "createdAt": "2020-07-23T05:54:52Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "diffHunk": "@@ -0,0 +1,794 @@\n+import React, { useState, useEffect } from 'react';\n+import {\n+  Select,\n+  SelectVariant,\n+  SelectGroup,\n+  SelectOption,\n+  TextInput,\n+  Button,\n+  Dropdown,\n+  DropdownToggle,\n+  DropdownItem,\n+  InputGroup,\n+  Popover,\n+  PopoverPosition\n+} from '@patternfly/react-core';\n+import { GraphQL } from '../../../graphql/types';\n+import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n+import gql from 'graphql-tag';\n+import { query } from 'gql-query-builder';\n+import { useApolloClient } from 'react-apollo';\n+import { QuestionCircleIcon } from '@patternfly/react-icons';\n+import { validateResponse, set, removeDuplicates } from '../../../utils/Utils';\n+import './DomainExplorerFilterOptions.css';\n+\n+const DomainExplorerFilterOptions = ({\n+  argument,\n+  currentDomain,\n+  enableCache,\n+  filterChips,\n+  finalFilters,\n+  getQueryTypes,\n+  getSchema,\n+  loadMoreClicked,\n+  offsetVal,\n+  pageSize,\n+  parameters,\n+  runQuery,\n+  reset,\n+  setColumnFilters,\n+  setDisplayTable,\n+  setDisplayEmptyState,\n+  setEnableRefresh,\n+  setFinalFilters,\n+  setFilterError,\n+  setFilterChips,\n+  setIsLoadingMore,\n+  setLoadMoreClicked,\n+  setOffset,\n+  setReset,\n+  setRunQuery,\n+  setTableLoading\n+}) => {\n+  // tslint:disable: forin\n+  // tslint:disable: no-floating-promises\n+  const client = useApolloClient();\n+  const [initData2, setInitData2] = useState<any>({\n+    __schema: { queryType: [] }\n+  });\n+  const [isExpanded, setIsExpanded] = useState(false);\n+  const [isFilterDropdownOpen, setIsFilterDropdownOpen] = useState(false);\n+  const [selected, setSelected] = useState('id');\n+  const [selectTypes, setSelectTypes] = useState('equal');\n+  const [textValue, setTextValue] = useState('');\n+  const [inputArray, setInputArray] = useState('');\n+  const [isOpen, setIsOpen] = useState(false);\n+  const [currentArgument, setCurrentArgument] = useState('');\n+  const [currentArgumentScalar, setCurrentArgumentScalar] = useState('String');\n+  const [typeParent, setTypeParent] = useState<any>([]);\n+  const [currentBoolean, setCurrentBoolean] = useState('boolean');\n+  const [stateToggle, setStateToggle] = useState(false);\n+  const [multiStateToggle, setMultiStateToggle] = useState(false);\n+  const [selectedState, setSelectedState] = useState('');\n+  const [multiState, setMultiState] = useState([]);\n+  const [enumArray, setEnumArray] = useState([]);\n+  const scalarArgs = [\n+    null,\n+    'Boolean',\n+    'BooleanArgument',\n+    'DateArgument',\n+    'DateRange',\n+    'IdArgument',\n+    'NumericRange',\n+    'NumericArgument',\n+    'ProcessInstanceState',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5495f2be84231a8c91ab5230d70c98cb9b4aa47f"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NTkwMTQxOnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNjowMjoxMVrOG19KpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QwNjowMjoxMVrOG19KpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTIyOTg2MA==", "bodyText": "shouldnt be the parent component be the one responsible for sending the queries when the filters change?", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r459229860", "createdAt": "2020-07-23T06:02:11Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "diffHunk": "@@ -0,0 +1,794 @@\n+import React, { useState, useEffect } from 'react';\n+import {\n+  Select,\n+  SelectVariant,\n+  SelectGroup,\n+  SelectOption,\n+  TextInput,\n+  Button,\n+  Dropdown,\n+  DropdownToggle,\n+  DropdownItem,\n+  InputGroup,\n+  Popover,\n+  PopoverPosition\n+} from '@patternfly/react-core';\n+import { GraphQL } from '../../../graphql/types';\n+import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n+import gql from 'graphql-tag';\n+import { query } from 'gql-query-builder';\n+import { useApolloClient } from 'react-apollo';\n+import { QuestionCircleIcon } from '@patternfly/react-icons';\n+import { validateResponse, set, removeDuplicates } from '../../../utils/Utils';\n+import './DomainExplorerFilterOptions.css';\n+\n+const DomainExplorerFilterOptions = ({\n+  argument,\n+  currentDomain,\n+  enableCache,\n+  filterChips,\n+  finalFilters,\n+  getQueryTypes,\n+  getSchema,\n+  loadMoreClicked,\n+  offsetVal,\n+  pageSize,\n+  parameters,\n+  runQuery,\n+  reset,\n+  setColumnFilters,\n+  setDisplayTable,\n+  setDisplayEmptyState,\n+  setEnableRefresh,\n+  setFinalFilters,\n+  setFilterError,\n+  setFilterChips,\n+  setIsLoadingMore,\n+  setLoadMoreClicked,\n+  setOffset,\n+  setReset,\n+  setRunQuery,\n+  setTableLoading\n+}) => {\n+  // tslint:disable: forin\n+  // tslint:disable: no-floating-promises\n+  const client = useApolloClient();\n+  const [initData2, setInitData2] = useState<any>({\n+    __schema: { queryType: [] }\n+  });\n+  const [isExpanded, setIsExpanded] = useState(false);\n+  const [isFilterDropdownOpen, setIsFilterDropdownOpen] = useState(false);\n+  const [selected, setSelected] = useState('id');\n+  const [selectTypes, setSelectTypes] = useState('equal');\n+  const [textValue, setTextValue] = useState('');\n+  const [inputArray, setInputArray] = useState('');\n+  const [isOpen, setIsOpen] = useState(false);\n+  const [currentArgument, setCurrentArgument] = useState('');\n+  const [currentArgumentScalar, setCurrentArgumentScalar] = useState('String');\n+  const [typeParent, setTypeParent] = useState<any>([]);\n+  const [currentBoolean, setCurrentBoolean] = useState('boolean');\n+  const [stateToggle, setStateToggle] = useState(false);\n+  const [multiStateToggle, setMultiStateToggle] = useState(false);\n+  const [selectedState, setSelectedState] = useState('');\n+  const [multiState, setMultiState] = useState([]);\n+  const [enumArray, setEnumArray] = useState([]);\n+  const scalarArgs = [\n+    null,\n+    'Boolean',\n+    'BooleanArgument',\n+    'DateArgument',\n+    'DateRange',\n+    'IdArgument',\n+    'NumericRange',\n+    'NumericArgument',\n+    'ProcessInstanceState',\n+    'ProcessInstanceStateArgument',\n+    'String',\n+    'StringArgument',\n+    'StringArrayArgument'\n+  ];\n+\n+  const scalarTypes = ['Boolean', 'String'];\n+\n+  const nonArgs = [null, 'Boolean', 'String'];\n+  useEffect(() => {\n+    setInitData2(getQueryTypes.data);\n+  }, [getQueryTypes.data]);\n+\n+  const onFieldToggle = _isExpanded => {\n+    setIsExpanded(_isExpanded);\n+  };\n+\n+  const getTypes = useGetInputFieldsFromTypeQuery({\n+    variables: {\n+      type: currentArgument\n+    }\n+  });\n+\n+  const onToggle = _isOpen => {\n+    setIsFilterDropdownOpen(_isOpen);\n+  };\n+  const checkType = innerText => {\n+    const typeName =\n+      getTypes.data.__type &&\n+      getTypes.data.__type.inputFields.find(item => {\n+        if (item.name === innerText) {\n+          return item;\n+        }\n+      });\n+    if (\n+      typeName.type.kind === 'ENUM' ||\n+      (typeName.type.ofType && typeName.type.ofType.kind === 'ENUM')\n+    ) {\n+      if (typeName.type.name === null) {\n+        setCurrentArgumentScalar('MultiSelection');\n+        setEnumArray(typeName.type.ofType.enumValues);\n+      } else {\n+        setCurrentArgumentScalar('stateSelection');\n+        setEnumArray(typeName.type.enumValues);\n+      }\n+    } else {\n+      if (scalarTypes.includes(typeName.type.name)) {\n+        setCurrentArgumentScalar(typeName.type.name);\n+      } else {\n+        setCurrentArgumentScalar('ArrayString');\n+      }\n+    }\n+  };\n+  const onSelect = event => {\n+    setSelectTypes(event.target.innerText);\n+    setIsFilterDropdownOpen(false);\n+    checkType(event.target.innerText);\n+  };\n+\n+  const typesMenuItems =\n+    !getTypes.loading &&\n+    getTypes.data.__type &&\n+    getTypes.data.__type.inputFields.map((data, index) => (\n+      <SelectOption key={index} value={data.name} />\n+    ));\n+\n+  const textBoxChange = value => {\n+    setTextValue(value);\n+  };\n+\n+  const textGroupChange = value => {\n+    setInputArray(value);\n+  };\n+\n+  const onSelectBoolean = event => {\n+    setCurrentBoolean(event.target.innerText);\n+    setIsOpen(!isOpen);\n+  };\n+\n+  const onToggleBoolean = _isOpen => {\n+    setIsOpen(_isOpen);\n+  };\n+\n+  const dropdownItems = [\n+    <DropdownItem key=\"true\" component=\"button\">\n+      true{' '}\n+    </DropdownItem>,\n+    <DropdownItem key=\"false\" component=\"button\">\n+      false{' '}\n+    </DropdownItem>\n+  ];\n+\n+  const fetchSchema = option => {\n+    return (\n+      !getQueryTypes.loading &&\n+      getQueryTypes.data.__schema &&\n+      getQueryTypes.data.__schema.queryType.find(item => {\n+        if (item.name === option.type.name) {\n+          return item;\n+        }\n+      })\n+    );\n+  };\n+  let childItems;\n+  let finalResult: any = [];\n+  const childSelectionItems = (_data, title, ...attr) => {\n+    let nestedTitles = '';\n+    childItems =\n+      !getQueryTypes.loading &&\n+      _data.map(group => {\n+        const label = title + ' / ' + attr.join();\n+        const childEle = (\n+          <SelectGroup\n+            label={label.replace(/\\,/g, '')}\n+            key={'kie-filter-item-' + label.replace(/\\,/g, '')}\n+            id={group.name}\n+            value={label.replace(/\\,/g, '')}\n+          >\n+            {group.inputFields !== null &&\n+              group.inputFields\n+                .filter((item, _index) => {\n+                  if (!scalarArgs.includes(item.type.name)) {\n+                    const tempData = [];\n+                    const schemaObj = fetchSchema(item);\n+                    tempData.push(schemaObj);\n+                    nestedTitles = nestedTitles + ' / ' + item.name;\n+                    childSelectionItems(tempData, title, attr, nestedTitles);\n+                  } else {\n+                    return item;\n+                  }\n+                })\n+                .map(item => {\n+                  return (\n+                    <SelectOption\n+                      key={'kie-filter-item-' + group.name + title + item.name}\n+                      value={item.name + title + group.name}\n+                    >\n+                      {item.name}\n+                    </SelectOption>\n+                  );\n+                })}\n+          </SelectGroup>\n+        );\n+        return childEle;\n+      });\n+    finalResult.push(childItems);\n+  };\n+  const rootElementsArray = [];\n+  const selectionItems = () => {\n+    !getSchema.loading &&\n+      getSchema.data.__type &&\n+      getSchema.data.__type.inputFields\n+        .filter((group, index) => {\n+          if (group.type.kind !== 'LIST') {\n+            return group;\n+          }\n+        })\n+        .map((group, index) => {\n+          let groupItem;\n+          let rootItem;\n+          group.type.inputFields.filter(item => {\n+            if (!nonArgs.includes(item.type.name)) {\n+              groupItem = group;\n+            } else {\n+              rootItem = group;\n+            }\n+          });\n+          if (rootItem) {\n+            const _rootElement = (\n+              <SelectOption key={rootItem.name} value={rootItem.name} />\n+            );\n+            !rootElementsArray.includes(_rootElement) &&\n+              rootElementsArray.push(_rootElement);\n+          }\n+\n+          let ele;\n+          if (groupItem) {\n+            ele = (\n+              <SelectGroup\n+                label={groupItem.name}\n+                key={index}\n+                id={groupItem.name}\n+                value={groupItem.name}\n+              >\n+                {groupItem.type.inputFields &&\n+                  groupItem.type.inputFields\n+                    .filter((item, _index) => {\n+                      if (!scalarArgs.includes(item.type.name)) {\n+                        const tempData = [];\n+                        const _v = fetchSchema(item);\n+                        tempData.push(_v);\n+                        childSelectionItems(\n+                          tempData,\n+                          groupItem.name,\n+                          item.name\n+                        );\n+                      } else {\n+                        return item;\n+                      }\n+                    })\n+                    .map((item, _index) => {\n+                      return (\n+                        <SelectOption\n+                          key={_index}\n+                          value={item.name + groupItem.name}\n+                        >\n+                          {item.name}\n+                        </SelectOption>\n+                      );\n+                    })}\n+              </SelectGroup>\n+            );\n+          }\n+          ele && !finalResult.includes(ele) && finalResult.push(ele);\n+        });\n+  };\n+\n+  const rootElement: any = (\n+    <SelectGroup label=\" \" key={'kie-filter-item-' + ' '} id=\"\" value=\" \">\n+      {rootElementsArray}\n+    </SelectGroup>\n+  );\n+\n+  const getOperators = (innerText, parent) => {\n+    let tempParents;\n+    let lastEle;\n+    if (parent !== ' ') {\n+      tempParents = parent.split(' / ');\n+      setTypeParent(tempParents);\n+      lastEle = tempParents.slice(-1)[0];\n+    } else {\n+      tempParents = [innerText];\n+      lastEle = tempParents.slice(-1)[0];\n+    }\n+    let arg;\n+    if (lastEle === 'processInstances') {\n+      let str = lastEle.charAt(0).toUpperCase() + lastEle.slice(1);\n+      str = str.substring(0, str.length - 1);\n+      arg = str + 'MetaArgument';\n+    } else if (lastEle === 'userTasks') {\n+      let str = lastEle.charAt(0).toUpperCase() + lastEle.slice(1);\n+      str = str.substring(0, str.length - 1);\n+      arg = str + 'InstanceMetaArgument';\n+    } else {\n+      const str = lastEle.charAt(0).toUpperCase() + lastEle.slice(1);\n+      arg = str + 'Argument';\n+    }\n+    const argType = initData2.__schema.queryType.find(type => {\n+      if (type.name === arg) {\n+        return type;\n+      }\n+    });\n+\n+    const argField = argType.inputFields.find(data => {\n+      if (data.name === innerText) {\n+        return data;\n+      }\n+    });\n+\n+    if (argField === undefined) {\n+      setCurrentArgument(argType.name);\n+    } else {\n+      if (argField.type.kind === 'INPUT_OBJECT') {\n+        setCurrentArgument(argField.type.name);\n+      } else {\n+        setCurrentArgumentScalar(argField.type.name);\n+      }\n+    }\n+    setSelectTypes('');\n+    setIsExpanded(false);\n+  };\n+  const onChange = (event, selection, isPlaceholder) => {\n+    const innerText = event.target.innerText;\n+    setSelected(innerText);\n+    const parent = event.nativeEvent.target.parentElement.parentElement.getAttribute(\n+      'value'\n+    );\n+    getOperators(innerText, parent);\n+  };\n+\n+  const onStateToggle = _isOpen => {\n+    setStateToggle(_isOpen);\n+  };\n+\n+  const onStateSelect = event => {\n+    const selection = event.target.innerText;\n+    setSelectedState(selection);\n+    setStateToggle(!stateToggle);\n+  };\n+\n+  const onMultiStateToggle = _isOpen => {\n+    setMultiStateToggle(_isOpen);\n+  };\n+\n+  const onMultiStateSelect = (event, selection) => {\n+    if (multiState.includes(selection)) {\n+      setMultiState(prev => prev.filter(item => item !== selection));\n+    } else {\n+      setMultiState(prev => [...prev, selection]);\n+    }\n+    setMultiStateToggle(!multiStateToggle);\n+  };\n+\n+  const onLoad = () => {\n+    const innerText = 'id';\n+    let tempParents;\n+    tempParents = [innerText];\n+    const lastEle = tempParents.slice(-1)[0];\n+    let arg;\n+    const str = lastEle.charAt(0).toUpperCase() + lastEle.slice(1);\n+    arg = str + 'Argument';\n+    const argType = getQueryTypes.data.__schema.queryType.find(type => {\n+      if (type.name === arg) {\n+        return type;\n+      }\n+    });\n+    const argField = argType.inputFields.find(data => {\n+      if (data.name === innerText) {\n+        return data;\n+      }\n+    });\n+    if (argField === undefined) {\n+      setCurrentArgument(argType.name);\n+      setCurrentArgumentScalar('String');\n+      setTextValue('');\n+      setInputArray('');\n+      setCurrentBoolean('boolean');\n+      setMultiState([]);\n+      setSelectedState('');\n+    }\n+  };\n+\n+  finalResult.unshift(rootElement);\n+\n+  !getSchema.loading && selectionItems();\n+  finalResult = finalResult.flat();\n+\n+  useEffect(() => {\n+    setReset(true);\n+  }, []);\n+\n+  useEffect(() => {\n+    runQuery && generateFilterQuery();\n+  }, [runQuery]);\n+\n+  useEffect(() => {\n+    if (reset === true) {\n+      setSelected('id');\n+      setSelectTypes('equal');\n+      setTypeParent('');\n+      onLoad();\n+      setRunQuery(true);\n+    }\n+  }, [reset]);\n+  const obj: any = {};\n+  const setPlaceHolders = () => {\n+    currentArgumentScalar === 'String' && setTextValue('');\n+    currentArgumentScalar === 'Boolean' && setCurrentBoolean('boolean');\n+    currentArgumentScalar === 'ArrayString' && setInputArray('');\n+    currentArgumentScalar === 'stateSelection' && setSelectedState('');\n+    currentArgumentScalar === 'MultiSelection' && setMultiState([]);\n+    setSelectTypes('');\n+    setSelected('');\n+  };\n+  async function generateFilterQuery() {\n+    reset !== true && setPlaceHolders();\n+    setTableLoading(true);\n+    setEnableRefresh(true);\n+    if (parameters.length > 1 && Object.keys(finalFilters).length > 0) {\n+      const Query = query({", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5495f2be84231a8c91ab5230d70c98cb9b4aa47f"}, "originalPosition": 454}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2Nzg4ODM2OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNTozMTo0OFrOG2QClw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNjo1MjozMVrOG2TMIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUzOTA5NQ==", "bodyText": "do we need special handling for ProcessInstanceStateArgument ?", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r459539095", "createdAt": "2020-07-23T15:31:48Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "diffHunk": "@@ -0,0 +1,777 @@\n+import React, { useState, useEffect } from 'react';\n+import {\n+  Select,\n+  SelectVariant,\n+  SelectGroup,\n+  SelectOption,\n+  TextInput,\n+  Button,\n+  Dropdown,\n+  DropdownToggle,\n+  DropdownItem,\n+  InputGroup,\n+  Popover,\n+  PopoverPosition\n+} from '@patternfly/react-core';\n+import { GraphQL } from '../../../graphql/types';\n+import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n+import gql from 'graphql-tag';\n+import { useApolloClient } from 'react-apollo';\n+import { QuestionCircleIcon } from '@patternfly/react-icons';\n+import { validateResponse, set, removeDuplicates } from '../../../utils/Utils';\n+import '../../styles.css';\n+\n+const DomainExplorerFilterOptions = ({\n+  enableCache,\n+  filterChips,\n+  finalFilters,\n+  getQueryTypes,\n+  getSchema,\n+  loadMoreClicked,\n+  parameters,\n+  Query,\n+  runQuery,\n+  reset,\n+  setColumnFilters,\n+  setDisplayTable,\n+  setDisplayEmptyState,\n+  setEnableRefresh,\n+  setFinalFilters,\n+  setFilterError,\n+  setFilterChips,\n+  setIsLoadingMore,\n+  setLoadMoreClicked,\n+  setOffset,\n+  setReset,\n+  setRunQuery,\n+  setTableLoading\n+}) => {\n+  // tslint:disable: forin\n+  // tslint:disable: no-floating-promises\n+  const client = useApolloClient();\n+  const [initData2, setInitData2] = useState<any>({\n+    __schema: { queryType: [] }\n+  });\n+  const [isExpanded, setIsExpanded] = useState(false);\n+  const [isFilterDropdownOpen, setIsFilterDropdownOpen] = useState(false);\n+  const [selected, setSelected] = useState('id');\n+  const [selectTypes, setSelectTypes] = useState('equal');\n+  const [textValue, setTextValue] = useState('');\n+  const [inputArray, setInputArray] = useState('');\n+  const [isOpen, setIsOpen] = useState(false);\n+  const [currentArgument, setCurrentArgument] = useState('');\n+  const [currentArgumentScalar, setCurrentArgumentScalar] = useState('String');\n+  const [typeParent, setTypeParent] = useState<any>([]);\n+  const [currentBoolean, setCurrentBoolean] = useState('boolean');\n+  const [stateToggle, setStateToggle] = useState(false);\n+  const [multiStateToggle, setMultiStateToggle] = useState(false);\n+  const [selectedState, setSelectedState] = useState('');\n+  const [multiState, setMultiState] = useState([]);\n+  const [enumArray, setEnumArray] = useState([]);\n+  const scalarArgs = [\n+    null,\n+    'Boolean',\n+    'BooleanArgument',\n+    'DateArgument',\n+    'DateRange',\n+    'IdArgument',\n+    'NumericRange',\n+    'NumericArgument',\n+    'ProcessInstanceStateArgument',", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f8ab9c7cc75e9eed9fc4a48e7a4e38dd4729a7e"}, "originalPosition": 80}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU5MDY4OQ==", "bodyText": "yes it is required for now, to avoid below attributes on the first dropdown\ninput ProcessInstanceStateArgument {\nequal: ProcessInstanceState\nin: [ProcessInstanceState]\n}", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r459590689", "createdAt": "2020-07-23T16:52:31Z", "author": {"login": "Sara4994"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerFilterOptions/DomainExplorerFilterOptions.tsx", "diffHunk": "@@ -0,0 +1,777 @@\n+import React, { useState, useEffect } from 'react';\n+import {\n+  Select,\n+  SelectVariant,\n+  SelectGroup,\n+  SelectOption,\n+  TextInput,\n+  Button,\n+  Dropdown,\n+  DropdownToggle,\n+  DropdownItem,\n+  InputGroup,\n+  Popover,\n+  PopoverPosition\n+} from '@patternfly/react-core';\n+import { GraphQL } from '../../../graphql/types';\n+import useGetInputFieldsFromTypeQuery = GraphQL.useGetInputFieldsFromTypeQuery;\n+import gql from 'graphql-tag';\n+import { useApolloClient } from 'react-apollo';\n+import { QuestionCircleIcon } from '@patternfly/react-icons';\n+import { validateResponse, set, removeDuplicates } from '../../../utils/Utils';\n+import '../../styles.css';\n+\n+const DomainExplorerFilterOptions = ({\n+  enableCache,\n+  filterChips,\n+  finalFilters,\n+  getQueryTypes,\n+  getSchema,\n+  loadMoreClicked,\n+  parameters,\n+  Query,\n+  runQuery,\n+  reset,\n+  setColumnFilters,\n+  setDisplayTable,\n+  setDisplayEmptyState,\n+  setEnableRefresh,\n+  setFinalFilters,\n+  setFilterError,\n+  setFilterChips,\n+  setIsLoadingMore,\n+  setLoadMoreClicked,\n+  setOffset,\n+  setReset,\n+  setRunQuery,\n+  setTableLoading\n+}) => {\n+  // tslint:disable: forin\n+  // tslint:disable: no-floating-promises\n+  const client = useApolloClient();\n+  const [initData2, setInitData2] = useState<any>({\n+    __schema: { queryType: [] }\n+  });\n+  const [isExpanded, setIsExpanded] = useState(false);\n+  const [isFilterDropdownOpen, setIsFilterDropdownOpen] = useState(false);\n+  const [selected, setSelected] = useState('id');\n+  const [selectTypes, setSelectTypes] = useState('equal');\n+  const [textValue, setTextValue] = useState('');\n+  const [inputArray, setInputArray] = useState('');\n+  const [isOpen, setIsOpen] = useState(false);\n+  const [currentArgument, setCurrentArgument] = useState('');\n+  const [currentArgumentScalar, setCurrentArgumentScalar] = useState('String');\n+  const [typeParent, setTypeParent] = useState<any>([]);\n+  const [currentBoolean, setCurrentBoolean] = useState('boolean');\n+  const [stateToggle, setStateToggle] = useState(false);\n+  const [multiStateToggle, setMultiStateToggle] = useState(false);\n+  const [selectedState, setSelectedState] = useState('');\n+  const [multiState, setMultiState] = useState([]);\n+  const [enumArray, setEnumArray] = useState([]);\n+  const scalarArgs = [\n+    null,\n+    'Boolean',\n+    'BooleanArgument',\n+    'DateArgument',\n+    'DateRange',\n+    'IdArgument',\n+    'NumericRange',\n+    'NumericArgument',\n+    'ProcessInstanceStateArgument',", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTUzOTA5NQ=="}, "originalCommit": {"oid": "9f8ab9c7cc75e9eed9fc4a48e7a4e38dd4729a7e"}, "originalPosition": 80}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzkwNjQyOnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerManageColumns/DomainExplorerManageColumns.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNTozNTo0OVrOG2QNqw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNTozNTo0OVrOG2QNqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU0MTkzMQ==", "bodyText": "please use specific type", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r459541931", "createdAt": "2020-07-23T15:35:49Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/common/src/components/Molecules/DomainExplorerManageColumns/DomainExplorerManageColumns.tsx", "diffHunk": "@@ -22,75 +22,50 @@ import {\n import { SyncIcon } from '@patternfly/react-icons';\n import '../../styles.css';\n import _ from 'lodash';\n-import gql from 'graphql-tag';\n-import { query } from 'gql-query-builder';\n-import { useApolloClient } from 'react-apollo';\n-import { validateResponse, filterColumnSelection } from '../../../utils/Utils';\n+import { filterColumnSelection, removeDuplicates } from '../../../utils/Utils';\n \n export interface IOwnProps {\n   columnPickerType: any;\n-  setColumnFilters: any;\n-  setTableLoading: any;\n   getQueryTypes: any;\n-  setDisplayTable: any;\n-  parameters: any;\n   setParameters: any;\n   selected: any;\n   setSelected: any;\n   data: any;\n   getPicker: any;\n-  setError: any;\n-  setDisplayEmptyState: any;\n-  rememberedParams: any;\n-  enableCache: boolean;\n-  setEnableCache: any;\n-  offsetVal: number;\n-  pageSize: number;\n   setOffsetVal: (offsetVal: number) => void;\n   setPageSize: (pageSize: number) => void;\n-  setIsLoadingMore: (isLoadingMoreVal: boolean) => void;\n-  isLoadingMore: boolean;\n   metaData: any;\n-  setIsModalOpen: any;\n+  setIsModalOpen: (isModalOpen: boolean) => void;\n   isModalOpen: boolean;\n+  setRunQuery: (runQuery: boolean) => void;\n+  setEnableRefresh: (enableRefresh: boolean) => void;\n+  enableRefresh: any;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f8ab9c7cc75e9eed9fc4a48e7a4e38dd4729a7e"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzkxNTgwOnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/components/Organisms/DomainExplorer/DomainExplorer.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNTozODowNlrOG2QTow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNTozODowNlrOG2QTow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU0MzQ1OQ==", "bodyText": "can you rename to something more meaningful, like domainQuery ?", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r459543459", "createdAt": "2020-07-23T15:38:06Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/common/src/components/Organisms/DomainExplorer/DomainExplorer.tsx", "diffHunk": "@@ -113,68 +163,134 @@ const DomainExplorer: React.FC<IOwnProps> = ({\n       setEnableCache(true);\n       setParameters(rememberedParams);\n       setSelected(rememberedSelections);\n+      setFinalFilters(rememberedFilters);\n+      setFilterChips(rememberedChips);\n     } else {\n       setParameters(prev => [...defaultParams, ...prev]);\n       setSelected(selections);\n     }\n   }, [columnPickerType, selections.length > 0]);\n \n+  const onDeleteChip = (type = '', id = '') => {\n+    if (type) {\n+      setFilterChips(prev => prev.filter(item => item !== id));\n+      const chipText = id.split(':');\n+      let removeString = chipText[0].split('/');\n+      removeString = removeString.map(stringEle => stringEle.trim());\n+      let tempObj = finalFilters;\n+      tempObj = deleteKey(tempObj, removeString);\n+      const FinalObj = clearEmpties(tempObj);\n+      setFinalFilters(FinalObj);\n+      setRunQuery(true);\n+    } else {\n+      setFinalFilters(defaultFilter);\n+      defaultChip.length > 0 && setFilterChips(defaultChip);\n+      setReset(true);\n+    }\n+  };\n+\n+  const Query = query({", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f8ab9c7cc75e9eed9fc4a48e7a4e38dd4729a7e"}, "originalPosition": 155}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzkxOTM5OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/common/src/utils/Utils.ts", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNTozODo1OFrOG2QV8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNTozODo1OFrOG2QV8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU0NDA1MA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            // functio that removes single property from object\n          \n          \n            \n            // function that removes single property from object", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r459544050", "createdAt": "2020-07-23T15:38:58Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/common/src/utils/Utils.ts", "diffHunk": "@@ -98,3 +99,53 @@ export const filterColumnSelection = (selectionArray, objValue) => {\n   }\n   return res;\n };\n+\n+// functio that removes single property from object", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f8ab9c7cc75e9eed9fc4a48e7a4e38dd4729a7e"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjg2NzkyMjY2OnYy", "diffSide": "RIGHT", "path": "ui-packages/packages/management-console/src/components/Templates/DomainExplorerPage/DomainExplorerPage.tsx", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNTozOTo0MlrOG2QX-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0yM1QxNTozOTo0MlrOG2QX-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1OTU0NDU2OA==", "bodyText": "use more specific types?", "url": "https://github.com/kiegroup/kogito-apps/pull/315#discussion_r459544568", "createdAt": "2020-07-23T15:39:42Z", "author": {"login": "cristianonicolai"}, "path": "ui-packages/packages/management-console/src/components/Templates/DomainExplorerPage/DomainExplorerPage.tsx", "diffHunk": "@@ -24,6 +24,8 @@ interface MatchProps {\n interface LocationProps {\n   parameters?: any[];\n   selected?: any[];\n+  finalFilters?: any;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9f8ab9c7cc75e9eed9fc4a48e7a4e38dd4729a7e"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 799, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}