{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxMDcxNTEy", "number": 466, "title": "KOGITO-3119 - Job Service - Infinispan 11 upgrade", "bodyText": "Many thanks for submitting your Pull Request \u2764\ufe0f!\nPlease make sure that your PR meets the following requirements:\n\n You have read the contributors guide\n Pull Request title is properly formatted: KOGITO-XYZ Subject\n Pull Request title contains the target branch if not targeting master: [0.9.x] KOGITO-XYZ Subject\n Pull Request contains link to the JIRA issue\n Pull Request contains link to any dependent or related Pull Request\n Pull Request contains description of the issue\n Pull Request does not include fixes for issues other than the main ticket", "createdAt": "2020-09-22T16:52:15Z", "url": "https://github.com/kiegroup/kogito-apps/pull/466", "merged": true, "mergeCommit": {"oid": "18a5fc55bed185e51253fc39d4cd1dca08b9c65a"}, "closed": true, "closedAt": "2020-09-29T14:36:13Z", "author": {"login": "tiagodolphine"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLiQjHgFqTQ5Mzk1NzA2Nw==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdNo94vgFqTQ5ODUyNTMyOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDkzOTU3MDY3", "url": "https://github.com/kiegroup/kogito-apps/pull/466#pullrequestreview-493957067", "createdAt": "2020-09-23T01:15:34Z", "commit": {"oid": "9923e9b49777505b71841569424c3e8046633823"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMToxNTozNFrOHWRknQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwMToyNDozNVrOHWRzMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzExODYyMQ==", "bodyText": "@tiagodolphine do we need the analyze part? AFAIK that would be to break down the content, but this status field is a single value right?", "url": "https://github.com/kiegroup/kogito-apps/pull/466#discussion_r493118621", "createdAt": "2020-09-23T01:15:34Z", "author": {"login": "cristianonicolai"}, "path": "jobs-service/src/main/resources/META-INF/library.proto", "diffHunk": "@@ -1,16 +1,20 @@\n package job.service;\n \n+/* @Indexed */\n message JobDetails {\n   optional string id = 1;\n   optional string correlationId = 2;\n+  /* @Field(store = Store.YES, analyze = Analyze.YES, analyzer = @Analyzer(definition = \"keyword\")) */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9923e9b49777505b71841569424c3e8046633823"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzExOTA1MA==", "bodyText": "perhaps j.status in ( value1, value2 ) ?", "url": "https://github.com/kiegroup/kogito-apps/pull/466#discussion_r493119050", "createdAt": "2020-09-23T01:17:12Z", "author": {"login": "cristianonicolai"}, "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/repository/infinispan/InfinispanJobRepository.java", "diffHunk": "@@ -89,36 +107,37 @@ public InfinispanJobRepository(Vertx vertx,\n \n     @Override\n     public PublisherBuilder<JobDetails> findAll() {\n-        return ReactiveStreams\n-                .fromIterable(queryFactory.from(JobDetails.class)\n-                                      .<JobDetails>build()\n-                                      .list());\n+        Query<JobDetails> query = queryFactory.<JobDetails>create(\"from job.service.JobDetails\");\n+        return ReactiveStreams.fromIterable(query.execute().list());\n     }\n \n     @Override\n     public PublisherBuilder<JobDetails> findByStatus(JobStatus... status) {\n-        return ReactiveStreams.fromIterable(queryFactory.from(JobDetails.class)\n-                                                    .having(\"status\")\n-                                                    .in(Arrays.stream(status)\n-                                                                .map(JobStatus::name)\n-                                                                .collect(Collectors.toList()))\n-                                                    .<JobDetails>build()\n-                                                    .list());\n+        Query<JobDetails> query = queryFactory.create(\"from job.service.JobDetails j \" +\n+                                                              \"where \" +\n+                                                              \"and j.status:(\" + createStatusQuery(status) + \")\");\n+        return ReactiveStreams.fromIterable(query.execute().list());\n     }\n \n+    @Override\n     public PublisherBuilder<JobDetails> findByStatusBetweenDatesOrderByPriority(ZonedDateTime from, ZonedDateTime to,\n                                                                                 JobStatus... status) {\n-        return ReactiveStreams.fromIterable(queryFactory.from(JobDetails.class)\n-                                                    .having(\"status\")\n-                                                    .in(Arrays.stream(status)\n-                                                                .map(JobStatus::name)\n-                                                                .collect(Collectors.toList()))\n-                                                    .and()\n-                                                    .having(\"trigger.nextFireTime\")\n-                                                    .between(DateUtil.zonedDateTimeToInstant(from),\n-                                                             DateUtil.zonedDateTimeToInstant(to))\n-                                                    .orderBy(\"priority\", SortOrder.DESC)\n-                                                    .<JobDetails>build()\n-                                                    .list());\n+        Query<JobDetails> query = queryFactory.create(\"from job.service.JobDetails j \" +\n+                                                              \"where \" +\n+                                                              \"j.trigger.nextFireTime > :from \" +\n+                                                              \"and j.trigger.nextFireTime < :to \" +\n+                                                              \"and j.status:(\" +  createStatusQuery(status) + \") \" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9923e9b49777505b71841569424c3e8046633823"}, "originalPosition": 111}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzEyMjM1Mw==", "bodyText": "@tiagodolphine would be important to try to have a consistent behaviour here compared to other services, see https://github.com/kiegroup/kogito-apps/blob/master/persistence-commons/persistence-commons-infinispan/src/main/java/org/kie/kogito/persistence/infinispan/cache/InfinispanCacheManager.java#L79.\nPoint is that the user should be able to define a template. That template allows users to take over the configuration on Infinispan side to match their need. Then if thats not provided, the default cache configuration would be in place as you specified here.", "url": "https://github.com/kiegroup/kogito-apps/pull/466#discussion_r493122353", "createdAt": "2020-09-23T01:24:35Z", "author": {"login": "cristianonicolai"}, "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/repository/infinispan/InfinispanConfiguration.java", "diffHunk": "@@ -50,9 +65,37 @@ private Caches() {\n     @Readiness\n     public HealthCheck infinispanHealthCheck(@ConfigProperty(name = PERSISTENCE_CONFIG_KEY) Optional<String> persistence,\n                                              Instance<RemoteCacheManager> cacheManagerInstance) {\n-        return persistence\n-                .filter(\"infinispan\"::equals)\n+        return isEnabled(persistence)\n                 .<HealthCheck>map(p -> new InfinispanHealthCheck(cacheManagerInstance))\n                 .orElse(() -> HealthCheckResponse.up(\"In Memory Persistence\"));\n     }\n+\n+    private Optional<String> isEnabled(Optional<String> persistence) {\n+        return persistence\n+                .filter(\"infinispan\"::equals);\n+    }\n+\n+    void initializeCaches(@Observes @Priority(Interceptor.Priority.PLATFORM_BEFORE) StartupEvent startupEvent,\n+                          @ConfigProperty(name = PERSISTENCE_CONFIG_KEY) Optional<String> persistence,\n+                          RemoteCacheManager remoteCacheManager,\n+                          Event<InfinispanInitialized> initializedEvent) {\n+        isEnabled(persistence)\n+                .map(c -> remoteCacheManager.administration().getOrCreateCache(JOB_DETAILS, getCacheTemplate()))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9923e9b49777505b71841569424c3e8046633823"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "550a7bc6e863c62b968736e8b98d615b423436f4", "author": {"user": {"login": "tiagodolphine", "name": "Tiago Dolphine"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/550a7bc6e863c62b968736e8b98d615b423436f4", "committedDate": "2020-09-23T21:01:32Z", "message": "KOGITO-3119 - Job Service - Infinispan 11 upgrade"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a4ffbdf92cb3e79e26bfa1fbd625311530d38680", "author": {"user": {"login": "tiagodolphine", "name": "Tiago Dolphine"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/a4ffbdf92cb3e79e26bfa1fbd625311530d38680", "committedDate": "2020-09-23T21:01:32Z", "message": "Fix broken tests because ispn client was being initialized even with the in-memory persistence enabled"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "183897a9039c409a32384041adbfc4844e90a614", "author": {"user": {"login": "tiagodolphine", "name": "Tiago Dolphine"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/183897a9039c409a32384041adbfc4844e90a614", "committedDate": "2020-09-23T21:01:33Z", "message": "add InfinispanConfigurationTest"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b49f2aaf88d2355ff7813f2b4fad472d48acf8f2", "author": {"user": {"login": "tiagodolphine", "name": "Tiago Dolphine"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/b49f2aaf88d2355ff7813f2b4fad472d48acf8f2", "committedDate": "2020-09-24T17:28:13Z", "message": "Fix query and template to work with ispn10 an ispn11, using IN operation instead of ':'"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "07b7661c9e4c97f1b9b7ff6692469ec7002ddf5c", "author": {"user": {"login": "tiagodolphine", "name": "Tiago Dolphine"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/07b7661c9e4c97f1b9b7ff6692469ec7002ddf5c", "committedDate": "2020-09-23T15:55:00Z", "message": "add InfinispanConfigurationTest"}, "afterCommit": {"oid": "b49f2aaf88d2355ff7813f2b4fad472d48acf8f2", "author": {"user": {"login": "tiagodolphine", "name": "Tiago Dolphine"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/b49f2aaf88d2355ff7813f2b4fad472d48acf8f2", "committedDate": "2020-09-24T17:28:13Z", "message": "Fix query and template to work with ispn10 an ispn11, using IN operation instead of ':'"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b86a9900a492bc47d14824f7385b5743ea9c9a85", "author": {"user": {"login": "tiagodolphine", "name": "Tiago Dolphine"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/b86a9900a492bc47d14824f7385b5743ea9c9a85", "committedDate": "2020-09-24T17:38:13Z", "message": "using IN operator on job by status query"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d71907111fc5b18f7c75f1b484dd2a6f9ea8252e", "author": {"user": {"login": "tiagodolphine", "name": "Tiago Dolphine"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/d71907111fc5b18f7c75f1b484dd2a6f9ea8252e", "committedDate": "2020-09-24T17:46:21Z", "message": "Removing analyze annotation from protobuf file"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2MzU5ODY3", "url": "https://github.com/kiegroup/kogito-apps/pull/466#pullrequestreview-496359867", "createdAt": "2020-09-25T12:08:03Z", "commit": {"oid": "d71907111fc5b18f7c75f1b484dd2a6f9ea8252e"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2NDM1NDM0", "url": "https://github.com/kiegroup/kogito-apps/pull/466#pullrequestreview-496435434", "createdAt": "2020-09-25T13:48:17Z", "commit": {"oid": "d71907111fc5b18f7c75f1b484dd2a6f9ea8252e"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMzo0ODoxN1rOHYEZwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNVQxMzo0ODoxN1rOHYEZwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NTAwMDAwMg==", "bodyText": "Don't we want to change the schema to https://infinispan.org/schemas/infinispan-server-11.0.xsd?", "url": "https://github.com/kiegroup/kogito-apps/pull/466#discussion_r495000002", "createdAt": "2020-09-25T13:48:17Z", "author": {"login": "ricardozanini"}, "path": "jobs-service/docker/infinispan/infinispan.xml", "diffHunk": "@@ -0,0 +1,27 @@\n+<infinispan xmlns='urn:infinispan:config:10.0' xsi:schemaLocation='urn:infinispan:config:10.0 http://www.infinispan.org/schemas/infinispan-config-10.0.xsd                             urn:infinispan:server:10.0 http://www.infinispan.org/schemas/infinispan-server-10.0.xsd' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'>\n+  <server xmlns='urn:infinispan:server:10.0'>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d71907111fc5b18f7c75f1b484dd2a6f9ea8252e"}, "originalPosition": 2}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "629984a71f56083287ba9e5af0fdaccffb15e73c", "author": {"user": {"login": "tiagodolphine", "name": "Tiago Dolphine"}}, "url": "https://github.com/kiegroup/kogito-apps/commit/629984a71f56083287ba9e5af0fdaccffb15e73c", "committedDate": "2020-09-25T14:09:24Z", "message": "changing infinispan xsd to 11 on docker-compose"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk2ODU0MDcx", "url": "https://github.com/kiegroup/kogito-apps/pull/466#pullrequestreview-496854071", "createdAt": "2020-09-25T20:57:24Z", "commit": {"oid": "629984a71f56083287ba9e5af0fdaccffb15e73c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk4NTI1MzI5", "url": "https://github.com/kiegroup/kogito-apps/pull/466#pullrequestreview-498525329", "createdAt": "2020-09-29T14:22:03Z", "commit": {"oid": "629984a71f56083287ba9e5af0fdaccffb15e73c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4796, "cost": 1, "resetAt": "2021-11-01T16:19:10Z"}}}