{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY4ODIyNTEx", "number": 395, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjo1NToyMlrOEZIIZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNToxNDo0M1rOEZh8Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0NzgzMDc5OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/local/lime/DatasetEncoder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjo1NToyMlrOHBw5Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjo1NToyMlrOHBw5Og==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYxMTcwNg==", "bodyText": "Please split this line, it is hard to read :)", "url": "https://github.com/kiegroup/kogito-apps/pull/395#discussion_r471611706", "createdAt": "2020-08-17T16:55:22Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/local/lime/DatasetEncoder.java", "diffHunk": "@@ -93,99 +97,15 @@\n         return trainingSet;\n     }\n \n-    private List<List<Double>> getColumnData(List<PredictionInput> perturbedInputs) {\n-        List<List<Double>> columnData = new LinkedList<>();\n+    private List<List<double[]>> getColumnData(List<PredictionInput> perturbedInputs) {\n+        List<List<double[]>> columnData = new LinkedList<>();\n \n         for (int t = 0; t < targetInput.getFeatures().size(); t++) {\n             Feature originalFeature = targetInput.getFeatures().get(t);\n-            switch (originalFeature.getType()) {\n-                case NUMBER:\n-                    encodeNumbers(perturbedInputs, targetInput, columnData, t);\n-                    break;\n-                case TEXT:\n-                    encodeText(perturbedInputs, columnData, originalFeature);\n-                    break;\n-                case CATEGORICAL:\n-                case BINARY:\n-                case TIME:\n-                case URI:\n-                case DURATION:\n-                case VECTOR:\n-                case CURRENCY:\n-                case UNDEFINED:\n-                    encodeEquals(perturbedInputs, columnData, t, originalFeature);\n-                    break;\n-                case BOOLEAN:\n-                    // boolean are automatically encoded as 1s or 0s\n-                    List<Double> featureValues = new LinkedList<>();\n-                    for (PredictionInput pi : perturbedInputs) {\n-                        featureValues.add(pi.getFeatures().get(t).getValue().asNumber());\n-                    }\n-                    columnData.add(featureValues);\n-                    break;\n-                default:\n-                    throw new LocalExplanationException(\"could not encoded features of type \" + originalFeature.getType());\n-            }\n+            int finalT = t;\n+            List<double[]> encode = originalFeature.getType().encode(originalFeature.getValue(), perturbedInputs.stream().map(predictionInput -> predictionInput.getFeatures().get(finalT).getValue()).toArray(Value<?>[]::new));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "645df85fa389f297713db894e38e90aa9b2fb041"}, "originalPosition": 110}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Nzg0Mjc3OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Value.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjo1ODozMVrOHBxAbw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNjo1ODozMVrOHBxAbw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYxMzU1MQ==", "bodyText": "Can you please add an explicit if( instanceof) to improve readability?", "url": "https://github.com/kiegroup/kogito-apps/pull/395#discussion_r471613551", "createdAt": "2020-08-17T16:58:31Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Value.java", "diffHunk": "@@ -34,6 +36,11 @@ public Value(S underlyingObject) {\n     }\n \n     public String asString() {\n+        try {\n+            List<Feature> composite = (List<Feature>) underlyingObject;\n+            return composite.stream().map(f -> f.getValue().asString()).collect(Collectors.joining(\" \"));\n+        } catch (ClassCastException ignored) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "645df85fa389f297713db894e38e90aa9b2fb041"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk0Nzg5MTEyOnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Type.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzowNzo1MlrOHBxgdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xN1QxNzowNzo1MlrOHBxgdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MTYyMTc0OQ==", "bodyText": "javadoc?", "url": "https://github.com/kiegroup/kogito-apps/pull/395#discussion_r471621749", "createdAt": "2020-08-17T17:07:52Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Type.java", "diffHunk": "@@ -55,4 +374,9 @@ public String toString() {\n         return String.valueOf(value);\n     }\n \n+    public abstract Value<?> drop(Value<?> value);\n+\n+    public abstract Value<?> perturb(Value<?> value, PerturbationContext perturbationContext);\n+\n+    public abstract List<double[]> encode(Value<?> target, Value<?>... values);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "645df85fa389f297713db894e38e90aa9b2fb041"}, "originalPosition": 374}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MTIwMDE3OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/utils/ExplainabilityMetrics.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxMjoyMTo0M1rOHCQ3ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNDo0NDowNFrOHCX9yA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzNTUyNA==", "bodyText": "Can you please clarify this change?\nThe logic seems to be quite different so I do not understand if it was broken before or what :)", "url": "https://github.com/kiegroup/kogito-apps/pull/395#discussion_r472135524", "createdAt": "2020-08-18T12:21:43Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/utils/ExplainabilityMetrics.java", "diffHunk": "@@ -70,14 +72,42 @@ public static double quantifyExplainability(int inputCognitiveChunks, int output\n      * @return the saliency impact\n      */\n     public static double impactScore(PredictionProvider model, Prediction prediction, List<FeatureImportance> topFeatures) {\n-        List<String> importantFeatureNames = topFeatures.stream().map(f -> f.getFeature().getName()).collect(Collectors.toList());\n \n-        List<Feature> newFeatures = new LinkedList<>();\n-        for (Feature feature : prediction.getInput().getFeatures()) {\n-            Feature newFeature = DataUtils.dropFeature(feature, importantFeatureNames);\n-            newFeatures.add(newFeature);\n+        List<Feature> copy = List.copyOf(prediction.getInput().getFeatures());\n+\n+        for (FeatureImportance featureImportance : topFeatures) {\n+            Feature topFeature = featureImportance.getFeature();\n+            String name = topFeature.getName();\n+            Value<?> value = topFeature.getValue();\n+            Feature droppedFeature = null;\n+            for (Feature feature : copy) {\n+                if (name.equals(feature.getName())) {\n+                    if (value.equals(feature.getValue())) {\n+                        droppedFeature = FeatureFactory.copyOf(feature, feature.getType().drop(value));\n+                    } else {\n+                        List<Feature> linearizedFeatures = DataUtils.getLinearizedFeatures(List.of(feature));\n+                        int i = 0;\n+                        for (Feature linearizedFeature : linearizedFeatures) {\n+                            if (value.equals(linearizedFeature.getValue())) {\n+                                Feature e = linearizedFeatures.get(i);\n+                                linearizedFeatures.set(i, FeatureFactory.copyOf(e, e.getType().drop(value)));\n+                                droppedFeature = FeatureFactory.newCompositeFeature(name, linearizedFeatures);\n+                                break;\n+                            } else {\n+                                i++;\n+                            }\n+                        }\n+                    }\n+                    break;\n+                }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ceb79a8e905f8da8ba9029f27d118304164af192"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI1MTg0OA==", "bodyText": "the change looks more verbose than previous version because previously the longish feature dropping procedure was encapsulated inside DataUtils#dropFeature which was relying on a not so nice switch statement.\nI'll move the above mentioned code inside a new DataUtils#dropFeature method.", "url": "https://github.com/kiegroup/kogito-apps/pull/395#discussion_r472251848", "createdAt": "2020-08-18T14:44:04Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/utils/ExplainabilityMetrics.java", "diffHunk": "@@ -70,14 +72,42 @@ public static double quantifyExplainability(int inputCognitiveChunks, int output\n      * @return the saliency impact\n      */\n     public static double impactScore(PredictionProvider model, Prediction prediction, List<FeatureImportance> topFeatures) {\n-        List<String> importantFeatureNames = topFeatures.stream().map(f -> f.getFeature().getName()).collect(Collectors.toList());\n \n-        List<Feature> newFeatures = new LinkedList<>();\n-        for (Feature feature : prediction.getInput().getFeatures()) {\n-            Feature newFeature = DataUtils.dropFeature(feature, importantFeatureNames);\n-            newFeatures.add(newFeature);\n+        List<Feature> copy = List.copyOf(prediction.getInput().getFeatures());\n+\n+        for (FeatureImportance featureImportance : topFeatures) {\n+            Feature topFeature = featureImportance.getFeature();\n+            String name = topFeature.getName();\n+            Value<?> value = topFeature.getValue();\n+            Feature droppedFeature = null;\n+            for (Feature feature : copy) {\n+                if (name.equals(feature.getName())) {\n+                    if (value.equals(feature.getValue())) {\n+                        droppedFeature = FeatureFactory.copyOf(feature, feature.getType().drop(value));\n+                    } else {\n+                        List<Feature> linearizedFeatures = DataUtils.getLinearizedFeatures(List.of(feature));\n+                        int i = 0;\n+                        for (Feature linearizedFeature : linearizedFeatures) {\n+                            if (value.equals(linearizedFeature.getValue())) {\n+                                Feature e = linearizedFeatures.get(i);\n+                                linearizedFeatures.set(i, FeatureFactory.copyOf(e, e.getType().drop(value)));\n+                                droppedFeature = FeatureFactory.newCompositeFeature(name, linearizedFeatures);\n+                                break;\n+                            } else {\n+                                i++;\n+                            }\n+                        }\n+                    }\n+                    break;\n+                }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjEzNTUyNA=="}, "originalCommit": {"oid": "ceb79a8e905f8da8ba9029f27d118304164af192"}, "originalPosition": 68}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1MjA1OTM5OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNToxNDo0M1rOHCZXIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOFQxNToxOToyNFrOHCZkCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI3NDcyMw==", "bodyText": "Why this? The whole repo is already configured to use jdk 11 ( see here )", "url": "https://github.com/kiegroup/kogito-apps/pull/395#discussion_r472274723", "createdAt": "2020-08-18T15:14:43Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-core/pom.xml", "diffHunk": "@@ -10,6 +10,18 @@\n \n   <artifactId>explainability-core</artifactId>\n   <name>Kogito :: Explainability Core</name>\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-compiler-plugin</artifactId>\n+        <configuration>\n+          <source>10</source>\n+          <target>10</target>\n+        </configuration>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ac6412b845c9939eea50961ea8041e2f02d6dd3"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI3ODAyNA==", "bodyText": "it is indeed an error, not sure how it got in.", "url": "https://github.com/kiegroup/kogito-apps/pull/395#discussion_r472278024", "createdAt": "2020-08-18T15:19:24Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/pom.xml", "diffHunk": "@@ -10,6 +10,18 @@\n \n   <artifactId>explainability-core</artifactId>\n   <name>Kogito :: Explainability Core</name>\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-compiler-plugin</artifactId>\n+        <configuration>\n+          <source>10</source>\n+          <target>10</target>\n+        </configuration>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MjI3NDcyMw=="}, "originalCommit": {"oid": "5ac6412b845c9939eea50961ea8041e2f02d6dd3"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 627, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}