{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQxMzUwMTE4", "number": 299, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzoyODoyMFrOEKgsuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzo0NzowMFrOEKhJjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDU2OTUyOnYy", "diffSide": "RIGHT", "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/model/Milestone.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzoyODoyMFrOGrl5bA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzoyODoyMFrOGrl5bA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM2Mjg2MA==", "bodyText": "can we make it fluent?", "url": "https://github.com/kiegroup/kogito-apps/pull/299#discussion_r448362860", "createdAt": "2020-07-01T13:28:20Z", "author": {"login": "ruromero"}, "path": "data-index/data-index-storage/data-index-storage-api/src/main/java/org/kie/kogito/index/model/Milestone.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.model;\n+\n+public class Milestone {\n+\n+    private String id;\n+    private String name;\n+    private String status;\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public void setId(String id) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a88a21a45092ceff9bcfd482c2b69c51573842ca"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc5NDY0MzM1OnYy", "diffSide": "RIGHT", "path": "data-index/data-index-storage/data-index-storage-infinispan/src/test/java/org/kie/kogito/index/infinispan/protostream/MilestoneMarshallerTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzo0NzowMFrOGrmohw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMVQxMzo0NzowMFrOGrmohw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODM3NDkxOQ==", "bodyText": "Please use constants, will allow a better maintenance.", "url": "https://github.com/kiegroup/kogito-apps/pull/299#discussion_r448374919", "createdAt": "2020-07-01T13:47:00Z", "author": {"login": "ruromero"}, "path": "data-index/data-index-storage/data-index-storage-infinispan/src/test/java/org/kie/kogito/index/infinispan/protostream/MilestoneMarshallerTest.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.kie.kogito.index.infinispan.protostream;\n+\n+import java.io.IOException;\n+\n+import org.infinispan.protostream.MessageMarshaller;\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.index.model.Milestone;\n+import org.mockito.InOrder;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.mockito.Mockito.inOrder;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+public class MilestoneMarshallerTest {\n+\n+    @Test\n+    public void testReadFrom() throws IOException {\n+        MessageMarshaller.ProtoStreamReader reader = mock(MessageMarshaller.ProtoStreamReader.class);\n+        when(reader.readString(\"id\")).thenReturn(\"id\");\n+        when(reader.readString(\"name\")).thenReturn(\"name\");\n+        when(reader.readString(\"status\")).thenReturn(\"status\");\n+\n+        Milestone milestone = new MilestoneMarshaller(null).readFrom(reader);\n+\n+        assertThat(milestone)\n+                .isNotNull()\n+                .hasFieldOrPropertyWithValue(\"id\", \"id\")\n+                .hasFieldOrPropertyWithValue(\"name\", \"name\")\n+                .hasFieldOrPropertyWithValue(\"status\", \"status\");\n+\n+        InOrder inOrder = inOrder(reader);\n+        inOrder.verify(reader).readString(\"id\");\n+        inOrder.verify(reader).readString(\"name\");\n+        inOrder.verify(reader).readString(\"status\");\n+    }\n+\n+    @Test\n+    public void testWriteTo() throws IOException {\n+        Milestone milestone = new Milestone();\n+        milestone.setId(\"id\");\n+        milestone.setName(\"name\");\n+        milestone.setStatus(\"status\");\n+\n+        MessageMarshaller.ProtoStreamWriter writer = mock(MessageMarshaller.ProtoStreamWriter.class);\n+\n+        new MilestoneMarshaller(null).writeTo(writer, milestone);\n+\n+        InOrder inOrder = inOrder(writer);\n+        inOrder.verify(writer).writeString(\"id\", \"id\");\n+        inOrder.verify(writer).writeString(\"name\", \"name\");\n+        inOrder.verify(writer).writeString(\"status\", \"status\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a88a21a45092ceff9bcfd482c2b69c51573842ca"}, "originalPosition": 68}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 785, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}