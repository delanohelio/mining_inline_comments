{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA0MDY1MDIz", "number": 486, "reviewThreads": {"totalCount": 44, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODowOToxNFrOEwH-xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMzowNDo0MlrOE_JAZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4ODk3ODYyOnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/lime/AggregatedLimeExplainer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODowOToxNFrOHlfb3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODowOToxNFrOHlfb3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA3NDM5OA==", "bodyText": "Some notes:\n\nYou can send to predictAsync the whole list of PredictionInput instead of one by one\nYou should remove all get() and use thenApply / thenCompose to combine all the async calls\nMake number of samples as constructor param\nMake this method returns CompletableFuture<Map<String, Saliency>>", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r509074398", "createdAt": "2020-10-21T08:09:14Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/lime/AggregatedLimeExplainer.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.global.lime;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.stream.Collectors;\n+\n+import org.kie.kogito.explainability.global.GlobalExplainer;\n+import org.kie.kogito.explainability.local.lime.LimeExplainer;\n+import org.kie.kogito.explainability.model.Prediction;\n+import org.kie.kogito.explainability.model.PredictionInput;\n+import org.kie.kogito.explainability.model.PredictionProvider;\n+import org.kie.kogito.explainability.model.PredictionProviderMetadata;\n+import org.kie.kogito.explainability.model.Saliency;\n+\n+/**\n+ * Global explainer aggregating LIME explanations over a number of inputs by reporting the mean feature importance for\n+ * each feature.\n+ */\n+public class AggregatedLimeExplainer implements GlobalExplainer<Map<String, Saliency>> {\n+\n+    private final LimeExplainer limeExplainer;\n+\n+    public AggregatedLimeExplainer(LimeExplainer limeExplainer) {\n+        this.limeExplainer = limeExplainer;\n+    }\n+\n+    @Override\n+    public Map<String, Saliency> explain(PredictionProvider model, PredictionProviderMetadata metadata)\n+            throws InterruptedException, ExecutionException {\n+        List<PredictionInput> inputs = metadata.getDataDistribution().sample(100);\n+        List<Saliency> saliencies = new ArrayList<>();\n+        for (PredictionInput input : inputs) {\n+            Prediction prediction = new Prediction(input, model.predictAsync(List.of(input)).get().get(0));\n+            saliencies.addAll(limeExplainer.explainAsync(prediction, model).get().values());\n+        }\n+        List<Saliency> merged = Saliency.merge(saliencies.toArray(new Saliency[0]));\n+        Map<String, Saliency> meanSaliencyMap = new HashMap<>();\n+        for (Saliency saliency: merged) {\n+            meanSaliencyMap.put(saliency.getOutput().getName(), saliency);\n+        }\n+        return meanSaliencyMap;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fab83a364f8450ecbc1c65e8dfb37b0c0973344f"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTAyMjc3OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODoxOTozM1rOHlf2vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNzozNTozOFrOHoDf2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4MTI3OA==", "bodyText": "Don't abuse of stream :)\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            double[] featureXSvalues = featureDistribution.sample(seriesLength).stream().map(Value::asNumber).map(Number::doubleValue).mapToDouble(d -> d).sorted().toArray();\n          \n          \n            \n                            double[] featureXSvalues = featureDistribution.sample(seriesLength).stream().mapToDouble(v -> v.asNumber().doubleValue()).sorted().toArray();\n          \n      \n    \n    \n  \n\nWhy do you sort them? Is it needed?", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r509081278", "createdAt": "2020-10-21T08:19:33Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainer.java", "diffHunk": "@@ -81,12 +82,12 @@ public PartialDependencePlotExplainer() {\n         DataDistribution dataDistribution = metadata.getDataDistribution();\n         int noOfFeatures = metadata.getInputShape().getFeatures().size();\n \n-        List<FeatureDistribution> featureDistributions = dataDistribution.getFeatureDistributions();\n+        List<FeatureDistribution> featureDistributions = dataDistribution.asFeatureDistributions();\n         for (int featureIndex = 0; featureIndex < noOfFeatures; featureIndex++) {\n             for (int outputIndex = 0; outputIndex < metadata.getOutputShape().getOutputs().size(); outputIndex++) {\n                 // generate samples for the feature under analysis\n-                double[] featureXSvalues = DataUtils.generateSamples(featureDistributions.get(featureIndex).getMin(),\n-                                                                     featureDistributions.get(featureIndex).getMax(), seriesLength);\n+                FeatureDistribution featureDistribution = featureDistributions.get(featureIndex);\n+                double[] featureXSvalues = featureDistribution.sample(seriesLength).stream().map(Value::asNumber).map(Number::doubleValue).mapToDouble(d -> d).sorted().toArray();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fab83a364f8450ecbc1c65e8dfb37b0c0973344f"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc2MjM5Mg==", "bodyText": "yes, because the related \"plot\" will then show the output trend as feature value increases (where it makes sense, e.g. with numbers).", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r511762392", "createdAt": "2020-10-26T07:35:38Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainer.java", "diffHunk": "@@ -81,12 +82,12 @@ public PartialDependencePlotExplainer() {\n         DataDistribution dataDistribution = metadata.getDataDistribution();\n         int noOfFeatures = metadata.getInputShape().getFeatures().size();\n \n-        List<FeatureDistribution> featureDistributions = dataDistribution.getFeatureDistributions();\n+        List<FeatureDistribution> featureDistributions = dataDistribution.asFeatureDistributions();\n         for (int featureIndex = 0; featureIndex < noOfFeatures; featureIndex++) {\n             for (int outputIndex = 0; outputIndex < metadata.getOutputShape().getOutputs().size(); outputIndex++) {\n                 // generate samples for the feature under analysis\n-                double[] featureXSvalues = DataUtils.generateSamples(featureDistributions.get(featureIndex).getMin(),\n-                                                                     featureDistributions.get(featureIndex).getMax(), seriesLength);\n+                FeatureDistribution featureDistribution = featureDistributions.get(featureIndex);\n+                double[] featureXSvalues = featureDistribution.sample(seriesLength).stream().map(Value::asNumber).map(Number::doubleValue).mapToDouble(d -> d).sorted().toArray();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4MTI3OA=="}, "originalCommit": {"oid": "fab83a364f8450ecbc1c65e8dfb37b0c0973344f"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTAyNzA3OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwODoyMDozMlrOHlf5dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNzozNjoxOVrOHoDg-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4MTk3NQ==", "bodyText": "Same as above\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        double[] featureData = featureDistributions.get(i).sample(seriesLength).stream()\n          \n          \n            \n                                .map(Value::asNumber).map(Number::doubleValue).mapToDouble(d -> d).sorted().toArray();\n          \n          \n            \n                        double[] featureData = featureDistributions.get(i).sample(seriesLength).stream()\n          \n          \n            \n                                .mapToDouble(v -> v.asNumber().doubleValue()).sorted().toArray();", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r509081975", "createdAt": "2020-10-21T08:20:32Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainer.java", "diffHunk": "@@ -175,9 +176,8 @@ public PartialDependencePlotExplainer() {\n     private double[][] generateDistributions(int noOfFeatures, List<FeatureDistribution> featureDistributions) {\n         double[][] trainingData = new double[noOfFeatures][seriesLength];\n         for (int i = 0; i < noOfFeatures; i++) {\n-            double[] featureData = DataUtils.generateData(featureDistributions.get(i).getMean(),\n-                                                          featureDistributions.get(i).getStdDev(), seriesLength,\n-                                                          random);\n+            double[] featureData = featureDistributions.get(i).sample(seriesLength).stream()\n+                    .map(Value::asNumber).map(Number::doubleValue).mapToDouble(d -> d).sorted().toArray();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fab83a364f8450ecbc1c65e8dfb37b0c0973344f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc2MjY4MA==", "bodyText": "here we can avoid the sorting actually.", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r511762680", "createdAt": "2020-10-26T07:36:19Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainer.java", "diffHunk": "@@ -175,9 +176,8 @@ public PartialDependencePlotExplainer() {\n     private double[][] generateDistributions(int noOfFeatures, List<FeatureDistribution> featureDistributions) {\n         double[][] trainingData = new double[noOfFeatures][seriesLength];\n         for (int i = 0; i < noOfFeatures; i++) {\n-            double[] featureData = DataUtils.generateData(featureDistributions.get(i).getMean(),\n-                                                          featureDistributions.get(i).getStdDev(), seriesLength,\n-                                                          random);\n+            double[] featureData = featureDistributions.get(i).sample(seriesLength).stream()\n+                    .map(Value::asNumber).map(Number::doubleValue).mapToDouble(d -> d).sorted().toArray();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTA4MTk3NQ=="}, "originalCommit": {"oid": "fab83a364f8450ecbc1c65e8dfb37b0c0973344f"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTMyOTY3OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/lime/AggregatedLimeExplainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwOToyOToyNVrOHli1qg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNTo1MjoxMVrOHlzkpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEzMDE1NA==", "bodyText": "Perhaps the sample size could be customisable (with a fallback default)?", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r509130154", "createdAt": "2020-10-21T09:29:25Z", "author": {"login": "ruivieira"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/lime/AggregatedLimeExplainer.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.global.lime;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.stream.Collectors;\n+\n+import org.kie.kogito.explainability.global.GlobalExplainer;\n+import org.kie.kogito.explainability.local.lime.LimeExplainer;\n+import org.kie.kogito.explainability.model.Prediction;\n+import org.kie.kogito.explainability.model.PredictionInput;\n+import org.kie.kogito.explainability.model.PredictionProvider;\n+import org.kie.kogito.explainability.model.PredictionProviderMetadata;\n+import org.kie.kogito.explainability.model.Saliency;\n+\n+/**\n+ * Global explainer aggregating LIME explanations over a number of inputs by reporting the mean feature importance for\n+ * each feature.\n+ */\n+public class AggregatedLimeExplainer implements GlobalExplainer<Map<String, Saliency>> {\n+\n+    private final LimeExplainer limeExplainer;\n+\n+    public AggregatedLimeExplainer(LimeExplainer limeExplainer) {\n+        this.limeExplainer = limeExplainer;\n+    }\n+\n+    @Override\n+    public Map<String, Saliency> explain(PredictionProvider model, PredictionProviderMetadata metadata)\n+            throws InterruptedException, ExecutionException {\n+        List<PredictionInput> inputs = metadata.getDataDistribution().sample(100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fab83a364f8450ecbc1c65e8dfb37b0c0973344f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQwNDMyNQ==", "bodyText": "yeah, definitely. Same as per LimeExplainer.", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r509404325", "createdAt": "2020-10-21T15:52:11Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/lime/AggregatedLimeExplainer.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.global.lime;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.stream.Collectors;\n+\n+import org.kie.kogito.explainability.global.GlobalExplainer;\n+import org.kie.kogito.explainability.local.lime.LimeExplainer;\n+import org.kie.kogito.explainability.model.Prediction;\n+import org.kie.kogito.explainability.model.PredictionInput;\n+import org.kie.kogito.explainability.model.PredictionProvider;\n+import org.kie.kogito.explainability.model.PredictionProviderMetadata;\n+import org.kie.kogito.explainability.model.Saliency;\n+\n+/**\n+ * Global explainer aggregating LIME explanations over a number of inputs by reporting the mean feature importance for\n+ * each feature.\n+ */\n+public class AggregatedLimeExplainer implements GlobalExplainer<Map<String, Saliency>> {\n+\n+    private final LimeExplainer limeExplainer;\n+\n+    public AggregatedLimeExplainer(LimeExplainer limeExplainer) {\n+        this.limeExplainer = limeExplainer;\n+    }\n+\n+    @Override\n+    public Map<String, Saliency> explain(PredictionProvider model, PredictionProviderMetadata metadata)\n+            throws InterruptedException, ExecutionException {\n+        List<PredictionInput> inputs = metadata.getDataDistribution().sample(100);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEzMDE1NA=="}, "originalCommit": {"oid": "fab83a364f8450ecbc1c65e8dfb37b0c0973344f"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTMzNjg2OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/lime/AggregatedLimeExplainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwOTozMTowMVrOHli56w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNToxODozM1rOH2jn0g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEzMTI0Mw==", "bodyText": "General comments to this global explainer class:\nI think it should be useful to support a scenario where we already have Predictions (aka both input and output) and we just need to apply limeExplainer. For example this is true if we have training/historical data.\nWhat about extend PredictionProviderMetadata to support a similar scenario? It will probably require to change the explain method too (like create a method CompletableFuture<List<Prediction>> extractPrediction(model, metadata) that get prediction data if available or calculate them)", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r509131243", "createdAt": "2020-10-21T09:31:01Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/lime/AggregatedLimeExplainer.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.global.lime;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.stream.Collectors;\n+\n+import org.kie.kogito.explainability.global.GlobalExplainer;\n+import org.kie.kogito.explainability.local.lime.LimeExplainer;\n+import org.kie.kogito.explainability.model.Prediction;\n+import org.kie.kogito.explainability.model.PredictionInput;\n+import org.kie.kogito.explainability.model.PredictionProvider;\n+import org.kie.kogito.explainability.model.PredictionProviderMetadata;\n+import org.kie.kogito.explainability.model.Saliency;\n+\n+/**\n+ * Global explainer aggregating LIME explanations over a number of inputs by reporting the mean feature importance for\n+ * each feature.\n+ */\n+public class AggregatedLimeExplainer implements GlobalExplainer<Map<String, Saliency>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fab83a364f8450ecbc1c65e8dfb37b0c0973344f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk2ODc4Ng==", "bodyText": "I think that's a good idea, generally speaking. I think it would be better to let the user decide whether using existing Predictions or generating new ones via model.predictAsync, so I would probably create a different interface for that purpose (and AggregatedLimeExplainer would implement that too).", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r526968786", "createdAt": "2020-11-19T15:18:33Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/lime/AggregatedLimeExplainer.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.global.lime;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.stream.Collectors;\n+\n+import org.kie.kogito.explainability.global.GlobalExplainer;\n+import org.kie.kogito.explainability.local.lime.LimeExplainer;\n+import org.kie.kogito.explainability.model.Prediction;\n+import org.kie.kogito.explainability.model.PredictionInput;\n+import org.kie.kogito.explainability.model.PredictionProvider;\n+import org.kie.kogito.explainability.model.PredictionProviderMetadata;\n+import org.kie.kogito.explainability.model.Saliency;\n+\n+/**\n+ * Global explainer aggregating LIME explanations over a number of inputs by reporting the mean feature importance for\n+ * each feature.\n+ */\n+public class AggregatedLimeExplainer implements GlobalExplainer<Map<String, Saliency>> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEzMTI0Mw=="}, "originalCommit": {"oid": "fab83a364f8450ecbc1c65e8dfb37b0c0973344f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTM0MTAwOnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/NumericFeatureDistribution.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwOTozMjowNFrOHli8pg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNTo1NDozMFrOHlzreQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEzMTk0Mg==", "bodyText": "PredictionInputsDataDistribution has a nice optimisation (returning all samples when sampleSize > inputs.size()) with the added benefit that it won't given an index error if we ask for more samples than inputs.\nCould it be added here too?", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r509131942", "createdAt": "2020-10-21T09:32:04Z", "author": {"login": "ruivieira"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/NumericFeatureDistribution.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Numeric feature distribution based on {@code double[]}.\n+ */\n+public class NumericFeatureDistribution implements FeatureDistribution {\n+\n+    private final Feature feature;\n+    private final double[] doubles;\n+\n+    public NumericFeatureDistribution(Feature feature, double[] doubles) {\n+        this.feature = feature;\n+        this.doubles = doubles;\n+    }\n+\n+    @Override\n+    public Feature getFeature() {\n+        return feature;\n+    }\n+\n+    @Override\n+    public Value<?> sample() {\n+        return sample(1).get(0);\n+    }\n+\n+    @Override\n+    public List<Value<?>> sample(int sampleSize) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fab83a364f8450ecbc1c65e8dfb37b0c0973344f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTIyNTY3MA==", "bodyText": "Please add a log message in similar scenarios like \"required 100 samples but only 10 available\"", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r509225670", "createdAt": "2020-10-21T12:12:10Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/NumericFeatureDistribution.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Numeric feature distribution based on {@code double[]}.\n+ */\n+public class NumericFeatureDistribution implements FeatureDistribution {\n+\n+    private final Feature feature;\n+    private final double[] doubles;\n+\n+    public NumericFeatureDistribution(Feature feature, double[] doubles) {\n+        this.feature = feature;\n+        this.doubles = doubles;\n+    }\n+\n+    @Override\n+    public Feature getFeature() {\n+        return feature;\n+    }\n+\n+    @Override\n+    public Value<?> sample() {\n+        return sample(1).get(0);\n+    }\n+\n+    @Override\n+    public List<Value<?>> sample(int sampleSize) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEzMTk0Mg=="}, "originalCommit": {"oid": "fab83a364f8450ecbc1c65e8dfb37b0c0973344f"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQwNjA3Mw==", "bodyText": "agree with both comments, thanks!", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r509406073", "createdAt": "2020-10-21T15:54:30Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/NumericFeatureDistribution.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Numeric feature distribution based on {@code double[]}.\n+ */\n+public class NumericFeatureDistribution implements FeatureDistribution {\n+\n+    private final Feature feature;\n+    private final double[] doubles;\n+\n+    public NumericFeatureDistribution(Feature feature, double[] doubles) {\n+        this.feature = feature;\n+        this.doubles = doubles;\n+    }\n+\n+    @Override\n+    public Feature getFeature() {\n+        return feature;\n+    }\n+\n+    @Override\n+    public Value<?> sample() {\n+        return sample(1).get(0);\n+    }\n+\n+    @Override\n+    public List<Value<?>> sample(int sampleSize) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTEzMTk0Mg=="}, "originalCommit": {"oid": "fab83a364f8450ecbc1c65e8dfb37b0c0973344f"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTQzNTUxOnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/GenericFeatureDistribution.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQwOTo1NToxNVrOHlj3lQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNjowNjoxOFrOHl0NCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE0NzAyOQ==", "bodyText": "Same comment as in NumericFeatureDistribution.sample()", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r509147029", "createdAt": "2020-10-21T09:55:15Z", "author": {"login": "ruivieira"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/GenericFeatureDistribution.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+\n+import org.kie.kogito.explainability.utils.DataUtils;\n+\n+/**\n+ * Feature distribution based on list of {@code Values}.\n+ */\n+public class GenericFeatureDistribution implements FeatureDistribution {\n+\n+    private final Feature feature;\n+    private final List<Value<?>> values;\n+\n+    public GenericFeatureDistribution(Feature feature, List<Value<?>> values) {\n+        this.feature = feature;\n+        this.values = Collections.unmodifiableList(values);\n+    }\n+\n+    @Override\n+    public Feature getFeature() {\n+        return feature;\n+    }\n+\n+    @Override\n+    public Value<?> sample() {\n+        return sample(1).get(0);\n+    }\n+\n+    @Override\n+    public List<Value<?>> sample(int sampleSize) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fab83a364f8450ecbc1c65e8dfb37b0c0973344f"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQxNDY2Nw==", "bodyText": "agreed", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r509414667", "createdAt": "2020-10-21T16:06:18Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/GenericFeatureDistribution.java", "diffHunk": "@@ -0,0 +1,63 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+\n+import org.kie.kogito.explainability.utils.DataUtils;\n+\n+/**\n+ * Feature distribution based on list of {@code Values}.\n+ */\n+public class GenericFeatureDistribution implements FeatureDistribution {\n+\n+    private final Feature feature;\n+    private final List<Value<?>> values;\n+\n+    public GenericFeatureDistribution(Feature feature, List<Value<?>> values) {\n+        this.feature = feature;\n+        this.values = Collections.unmodifiableList(values);\n+    }\n+\n+    @Override\n+    public Feature getFeature() {\n+        return feature;\n+    }\n+\n+    @Override\n+    public Value<?> sample() {\n+        return sample(1).get(0);\n+    }\n+\n+    @Override\n+    public List<Value<?>> sample(int sampleSize) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE0NzAyOQ=="}, "originalCommit": {"oid": "fab83a364f8450ecbc1c65e8dfb37b0c0973344f"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTQ4OTIwOnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Output.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMDowODo0OFrOHlkYYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMDowODo0OFrOHlkYYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE1NTQyNg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.name = name;\n          \n          \n            \n                    this.type = type;\n          \n          \n            \n                    this.value = new Value<>(null);\n          \n          \n            \n                    this.score = 0d;\n          \n          \n            \n                    this(name, type, new Value<>(null), 0d);", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r509155426", "createdAt": "2020-10-21T10:08:48Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Output.java", "diffHunk": "@@ -25,6 +27,13 @@\n     private final double score;\n     private final String name;\n \n+    public Output(String name, Type type) {\n+        this.name = name;\n+        this.type = type;\n+        this.value = new Value<>(null);\n+        this.score = 0d;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fab83a364f8450ecbc1c65e8dfb37b0c0973344f"}, "originalPosition": 17}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTQ5NzE2OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/utils/DataUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMDoxMDo0OVrOHlkdPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yNlQwNzozNzozOFrOHoDi-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE1NjY3MA==", "bodyText": "What's the reason of this change?", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r509156670", "createdAt": "2020-10-21T10:10:49Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/utils/DataUtils.java", "diffHunk": "@@ -165,7 +167,7 @@ else if (upperBound > lowerBound) {\n                 perturbationSize = perturbationContext.getRandom().ints(lowerBound, 1 + upperBound).findFirst().orElse(1);\n             }\n             if (perturbationSize > 0) {\n-                int[] indexesToBePerturbed = perturbationContext.getRandom().ints(1, newFeatures.size())\n+                int[] indexesToBePerturbed = perturbationContext.getRandom().ints(0, newFeatures.size())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fab83a364f8450ecbc1c65e8dfb37b0c0973344f"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMTc2MzE5Mw==", "bodyText": "I didn't have the fix for KOGITO-3564.\nI can drop it now.", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r511763193", "createdAt": "2020-10-26T07:37:38Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/utils/DataUtils.java", "diffHunk": "@@ -165,7 +167,7 @@ else if (upperBound > lowerBound) {\n                 perturbationSize = perturbationContext.getRandom().ints(lowerBound, 1 + upperBound).findFirst().orElse(1);\n             }\n             if (perturbationSize > 0) {\n-                int[] indexesToBePerturbed = perturbationContext.getRandom().ints(1, newFeatures.size())\n+                int[] indexesToBePerturbed = perturbationContext.getRandom().ints(0, newFeatures.size())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE1NjY3MA=="}, "originalCommit": {"oid": "fab83a364f8450ecbc1c65e8dfb37b0c0973344f"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTUwOTQ1OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMDoxNDowOVrOHlkk5A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxMzozNzowMVrOH2e39g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE1ODYyOA==", "bodyText": "What's the reason of this change?", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r509158628", "createdAt": "2020-10-21T10:14:09Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainerTest.java", "diffHunk": "@@ -98,7 +97,7 @@ private void assertGraph(PartialDependenceGraph pdp) {\n         for (int i = 0; i < pdp.getX().length; i++) {\n             assertNotEquals(Double.NaN, pdp.getY()[i]);\n             if (i > 0) {\n-                assertTrue(pdp.getX()[i] > pdp.getX()[i - 1]);\n+                assertTrue(pdp.getX()[i] >= pdp.getX()[i - 1]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fab83a364f8450ecbc1c65e8dfb37b0c0973344f"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjg5MDk5OA==", "bodyText": "I have adjusted the test to better reflect the semantics of what one can expect from PDP graphs there.", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r526890998", "createdAt": "2020-11-19T13:37:01Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainerTest.java", "diffHunk": "@@ -98,7 +97,7 @@ private void assertGraph(PartialDependenceGraph pdp) {\n         for (int i = 0; i < pdp.getX().length; i++) {\n             assertNotEquals(Double.NaN, pdp.getY()[i]);\n             if (i > 0) {\n-                assertTrue(pdp.getX()[i] > pdp.getX()[i - 1]);\n+                assertTrue(pdp.getX()[i] >= pdp.getX()[i - 1]);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE1ODYyOA=="}, "originalCommit": {"oid": "fab83a364f8450ecbc1c65e8dfb37b0c0973344f"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTUzNzQ4OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/lime/AggregatedLimeExplainer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMDoyMTo0MlrOHlk2nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMDoyMTo0MlrOHlk2nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE2MzE2Nw==", "bodyText": "What about make merge accept a List<Saliency> so you can avoid to convert to array and then convert again to list?", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r509163167", "createdAt": "2020-10-21T10:21:42Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/lime/AggregatedLimeExplainer.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.global.lime;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.stream.Collectors;\n+\n+import org.kie.kogito.explainability.global.GlobalExplainer;\n+import org.kie.kogito.explainability.local.lime.LimeExplainer;\n+import org.kie.kogito.explainability.model.Prediction;\n+import org.kie.kogito.explainability.model.PredictionInput;\n+import org.kie.kogito.explainability.model.PredictionProvider;\n+import org.kie.kogito.explainability.model.PredictionProviderMetadata;\n+import org.kie.kogito.explainability.model.Saliency;\n+\n+/**\n+ * Global explainer aggregating LIME explanations over a number of inputs by reporting the mean feature importance for\n+ * each feature.\n+ */\n+public class AggregatedLimeExplainer implements GlobalExplainer<Map<String, Saliency>> {\n+\n+    private final LimeExplainer limeExplainer;\n+\n+    public AggregatedLimeExplainer(LimeExplainer limeExplainer) {\n+        this.limeExplainer = limeExplainer;\n+    }\n+\n+    @Override\n+    public Map<String, Saliency> explain(PredictionProvider model, PredictionProviderMetadata metadata)\n+            throws InterruptedException, ExecutionException {\n+        List<PredictionInput> inputs = metadata.getDataDistribution().sample(100);\n+        List<Saliency> saliencies = new ArrayList<>();\n+        for (PredictionInput input : inputs) {\n+            Prediction prediction = new Prediction(input, model.predictAsync(List.of(input)).get().get(0));\n+            saliencies.addAll(limeExplainer.explainAsync(prediction, model).get().values());\n+        }\n+        List<Saliency> merged = Saliency.merge(saliencies.toArray(new Saliency[0]));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fab83a364f8450ecbc1c65e8dfb37b0c0973344f"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTU4MjQyOnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/PredictionInputsDataDistribution.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMDozNDowOVrOHllTEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxNjozNzoyMlrOHl1gBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE3MDQ0OQ==", "bodyText": "IIUC when considering a large list, perhaps get a random element directly by index could be better than shuffling the entire collection, since it's O(1) vs O(N)?", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r509170449", "createdAt": "2020-10-21T10:34:09Z", "author": {"login": "ruivieira"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/PredictionInputsDataDistribution.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Data distribution based on list of {@code PredictionInputs}.\n+ */\n+public class PredictionInputsDataDistribution implements DataDistribution {\n+\n+    private final List<PredictionInput> inputs;\n+\n+    public PredictionInputsDataDistribution(List<PredictionInput> inputs) {\n+        this.inputs = Collections.unmodifiableList(inputs);\n+    }\n+\n+    @Override\n+    public PredictionInput sample() {\n+        List<PredictionInput> copy = new java.util.ArrayList<>(inputs);\n+        Collections.shuffle(copy);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fab83a364f8450ecbc1c65e8dfb37b0c0973344f"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTQzNTkxMQ==", "bodyText": "the reason for not having done that already is that I'm starting to dislike having Random objects all over the API.\nBut I guess the performance difference is worth the annoyance :-)", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r509435911", "createdAt": "2020-10-21T16:37:22Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/PredictionInputsDataDistribution.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Data distribution based on list of {@code PredictionInputs}.\n+ */\n+public class PredictionInputsDataDistribution implements DataDistribution {\n+\n+    private final List<PredictionInput> inputs;\n+\n+    public PredictionInputsDataDistribution(List<PredictionInput> inputs) {\n+        this.inputs = Collections.unmodifiableList(inputs);\n+    }\n+\n+    @Override\n+    public PredictionInput sample() {\n+        List<PredictionInput> copy = new java.util.ArrayList<>(inputs);\n+        Collections.shuffle(copy);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE3MDQ0OQ=="}, "originalCommit": {"oid": "fab83a364f8450ecbc1c65e8dfb37b0c0973344f"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzE4OTY0ODUzOnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/model/SaliencyTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yMVQxMDo1MjozNlrOHll7ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNzo0ODozMFrOHnCi-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE4MDc5NQ==", "bodyText": "I don't know if it's worth to test when multiple features have the same importance, perhaps not...", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r509180795", "createdAt": "2020-10-21T10:52:36Z", "author": {"login": "ruivieira"}, "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/model/SaliencyTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.explainability.TestUtils;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class SaliencyTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fab83a364f8450ecbc1c65e8dfb37b0c0973344f"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY5ODIzMw==", "bodyText": "good idea.", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r510698233", "createdAt": "2020-10-23T07:48:30Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/model/SaliencyTest.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.explainability.TestUtils;\n+\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class SaliencyTest {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwOTE4MDc5NQ=="}, "originalCommit": {"oid": "fab83a364f8450ecbc1c65e8dfb37b0c0973344f"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMjM3Nzc4OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/NumericFeatureDistribution.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMzozODo1OFrOHo8oxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNDo1NToxOFrOH2iebw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY5ODU2NQ==", "bodyText": "Shouldn't we rather throw an exception or something. User may not notice this in logs.", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r512698565", "createdAt": "2020-10-27T13:38:58Z", "author": {"login": "jiripetrlik"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/NumericFeatureDistribution.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Numeric feature distribution based on {@code double[]}.\n+ */\n+public class NumericFeatureDistribution implements FeatureDistribution {\n+\n+    private final Logger LOGGER = LoggerFactory.getLogger(NumericFeatureDistribution.class);\n+\n+    private final Feature feature;\n+    private final double[] doubles;\n+\n+    public NumericFeatureDistribution(Feature feature, double[] doubles) {\n+        this.feature = feature;\n+        this.doubles = doubles;\n+    }\n+\n+    @Override\n+    public Feature getFeature() {\n+        return feature;\n+    }\n+\n+    @Override\n+    public Value<?> sample() {\n+        return sample(1).get(0);\n+    }\n+\n+    @Override\n+    public List<Value<?>> sample(int sampleSize) {\n+        if (sampleSize >= doubles.length) {\n+            LOGGER.warn(\"required {} samples, but only {} are available\", sampleSize, doubles.length);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88275fbe8030386c759726e3da7b66fc0a7d39d7"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk0OTk5OQ==", "bodyText": "I've made it possible to sample a no. of samples bigger than the sample size (so generated data will contain duplicates).", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r526949999", "createdAt": "2020-11-19T14:55:18Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/NumericFeatureDistribution.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Numeric feature distribution based on {@code double[]}.\n+ */\n+public class NumericFeatureDistribution implements FeatureDistribution {\n+\n+    private final Logger LOGGER = LoggerFactory.getLogger(NumericFeatureDistribution.class);\n+\n+    private final Feature feature;\n+    private final double[] doubles;\n+\n+    public NumericFeatureDistribution(Feature feature, double[] doubles) {\n+        this.feature = feature;\n+        this.doubles = doubles;\n+    }\n+\n+    @Override\n+    public Feature getFeature() {\n+        return feature;\n+    }\n+\n+    @Override\n+    public Value<?> sample() {\n+        return sample(1).get(0);\n+    }\n+\n+    @Override\n+    public List<Value<?>> sample(int sampleSize) {\n+        if (sampleSize >= doubles.length) {\n+            LOGGER.warn(\"required {} samples, but only {} are available\", sampleSize, doubles.length);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY5ODU2NQ=="}, "originalCommit": {"oid": "88275fbe8030386c759726e3da7b66fc0a7d39d7"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMjM4MDg2OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/PredictionInputsDataDistribution.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMzozOTozNFrOHo8qpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNDo1NToyNFrOH2iewA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY5OTA0NQ==", "bodyText": "Again shouldn't we throw exception here?", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r512699045", "createdAt": "2020-10-27T13:39:34Z", "author": {"login": "jiripetrlik"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/PredictionInputsDataDistribution.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Data distribution based on list of {@code PredictionInputs}.\n+ */\n+public class PredictionInputsDataDistribution implements DataDistribution {\n+\n+    private final Logger LOGGER = LoggerFactory.getLogger(PredictionInputsDataDistribution.class);\n+\n+    private final List<PredictionInput> inputs;\n+\n+    public PredictionInputsDataDistribution(List<PredictionInput> inputs) {\n+        this.inputs = Collections.unmodifiableList(inputs);\n+    }\n+\n+    @Override\n+    public PredictionInput sample() {\n+        List<PredictionInput> copy = new java.util.ArrayList<>(inputs);\n+        Collections.shuffle(copy);\n+        return copy.get(0);\n+    }\n+\n+    @Override\n+    public List<PredictionInput> sample(int sampleSize) {\n+        if (sampleSize >= inputs.size()) {\n+            LOGGER.warn(\"required {} samples, but only {} are available\", sampleSize, inputs.size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88275fbe8030386c759726e3da7b66fc0a7d39d7"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk1MDA4MA==", "bodyText": "I've made it possible to sample a no. of samples bigger than the sample size (so generated data will contain duplicates).", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r526950080", "createdAt": "2020-11-19T14:55:24Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/PredictionInputsDataDistribution.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Data distribution based on list of {@code PredictionInputs}.\n+ */\n+public class PredictionInputsDataDistribution implements DataDistribution {\n+\n+    private final Logger LOGGER = LoggerFactory.getLogger(PredictionInputsDataDistribution.class);\n+\n+    private final List<PredictionInput> inputs;\n+\n+    public PredictionInputsDataDistribution(List<PredictionInput> inputs) {\n+        this.inputs = Collections.unmodifiableList(inputs);\n+    }\n+\n+    @Override\n+    public PredictionInput sample() {\n+        List<PredictionInput> copy = new java.util.ArrayList<>(inputs);\n+        Collections.shuffle(copy);\n+        return copy.get(0);\n+    }\n+\n+    @Override\n+    public List<PredictionInput> sample(int sampleSize) {\n+        if (sampleSize >= inputs.size()) {\n+            LOGGER.warn(\"required {} samples, but only {} are available\", sampleSize, inputs.size());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjY5OTA0NQ=="}, "originalCommit": {"oid": "88275fbe8030386c759726e3da7b66fc0a7d39d7"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIxMjM5MzE3OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/global/lime/AggregatedLimeExplainerTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMzo0MjowMFrOHo8yUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yN1QxMzo0MjowMFrOHo8yUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMjcwMTAwOA==", "bodyText": "I think it would be better to use fixed seed here.", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r512701008", "createdAt": "2020-10-27T13:42:00Z", "author": {"login": "jiripetrlik"}, "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/global/lime/AggregatedLimeExplainerTest.java", "diffHunk": "@@ -0,0 +1,71 @@\n+package org.kie.kogito.explainability.global.lime;\n+\n+import java.util.LinkedList;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Random;\n+import java.util.concurrent.ExecutionException;\n+import java.util.stream.Collectors;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.explainability.TestUtils;\n+import org.kie.kogito.explainability.local.lime.LimeExplainer;\n+import org.kie.kogito.explainability.model.DataDistribution;\n+import org.kie.kogito.explainability.model.Feature;\n+import org.kie.kogito.explainability.model.FeatureFactory;\n+import org.kie.kogito.explainability.model.FeatureImportance;\n+import org.kie.kogito.explainability.model.Output;\n+import org.kie.kogito.explainability.model.PredictionInput;\n+import org.kie.kogito.explainability.model.PredictionOutput;\n+import org.kie.kogito.explainability.model.PredictionProvider;\n+import org.kie.kogito.explainability.model.PredictionProviderMetadata;\n+import org.kie.kogito.explainability.model.Saliency;\n+import org.kie.kogito.explainability.model.Type;\n+import org.kie.kogito.explainability.model.Value;\n+import org.kie.kogito.explainability.utils.DataUtils;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class AggregatedLimeExplainerTest {\n+\n+    @Test\n+    void testExplain() throws ExecutionException, InterruptedException {\n+        PredictionProvider evenFeatureModel = TestUtils.getSumSkipModel(1);\n+        PredictionProviderMetadata metadata = new PredictionProviderMetadata() {\n+            @Override\n+            public DataDistribution getDataDistribution() {\n+                return DataUtils.generateRandomDataDistribution(3, 100, new Random());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "88275fbe8030386c759726e3da7b66fc0a7d39d7"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNDExMzA4OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/pom.xml", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNToyMDoxOFrOH2jtPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwOToxNjozMlrOH9RTJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk3MDE3Mg==", "bodyText": "Where is it used? I cannot find any usage", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r526970172", "createdAt": "2020-11-19T15:20:18Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-core/pom.xml", "diffHunk": "@@ -19,6 +19,10 @@\n       <groupId>org.apache.commons</groupId>\n       <artifactId>commons-lang3</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>com.google.guava</groupId>\n+      <artifactId>guava</artifactId>\n+    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8f8c61825d565b8c2abe377475fb40a3e6b825e"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY2OTM2MA==", "bodyText": "leftover from the initial draft, will remove it, thanks for spotting it.", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r531669360", "createdAt": "2020-11-27T15:43:45Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/pom.xml", "diffHunk": "@@ -19,6 +19,10 @@\n       <groupId>org.apache.commons</groupId>\n       <artifactId>commons-lang3</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>com.google.guava</groupId>\n+      <artifactId>guava</artifactId>\n+    </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk3MDE3Mg=="}, "originalCommit": {"oid": "e8f8c61825d565b8c2abe377475fb40a3e6b825e"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY3MTM3Mg==", "bodyText": "ah no! it's actually used in IndependentFeatureDistribution to generate the cartesian product of the feature values.", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r531671372", "createdAt": "2020-11-27T15:48:08Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/pom.xml", "diffHunk": "@@ -19,6 +19,10 @@\n       <groupId>org.apache.commons</groupId>\n       <artifactId>commons-lang3</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>com.google.guava</groupId>\n+      <artifactId>guava</artifactId>\n+    </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk3MDE3Mg=="}, "originalCommit": {"oid": "e8f8c61825d565b8c2abe377475fb40a3e6b825e"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDAwODYxNQ==", "bodyText": "I'm dropping guava as it's only used here, hence reimplementing cartesian product.", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r534008615", "createdAt": "2020-12-02T09:16:32Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/pom.xml", "diffHunk": "@@ -19,6 +19,10 @@\n       <groupId>org.apache.commons</groupId>\n       <artifactId>commons-lang3</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>com.google.guava</groupId>\n+      <artifactId>guava</artifactId>\n+    </dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk3MDE3Mg=="}, "originalCommit": {"oid": "e8f8c61825d565b8c2abe377475fb40a3e6b825e"}, "originalPosition": 7}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNDE2NzEyOnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/GenericFeatureDistribution.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNTozMDo1OFrOH2kO8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNTo0NDowMFrOH7Ch6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk3ODgwMA==", "bodyText": "This could produce to index out of bound if values is an empty list", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r526978800", "createdAt": "2020-11-19T15:30:58Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/GenericFeatureDistribution.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Feature distribution based on list of {@code Values}.\n+ */\n+public class GenericFeatureDistribution implements FeatureDistribution {\n+\n+    private final Logger LOGGER = LoggerFactory.getLogger(GenericFeatureDistribution.class);\n+\n+    private final Feature feature;\n+    private final List<Value<?>> values;\n+\n+    public GenericFeatureDistribution(Feature feature, List<Value<?>> values) {\n+        this.feature = feature;\n+        this.values = Collections.unmodifiableList(values);\n+    }\n+\n+    @Override\n+    public Feature getFeature() {\n+        return feature;\n+    }\n+\n+    @Override\n+    public Value<?> sample() {\n+        return sample(1).get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8f8c61825d565b8c2abe377475fb40a3e6b825e"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY2OTQ4Mg==", "bodyText": "correct, thanks, I'll fix it.", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r531669482", "createdAt": "2020-11-27T15:44:00Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/GenericFeatureDistribution.java", "diffHunk": "@@ -0,0 +1,70 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Feature distribution based on list of {@code Values}.\n+ */\n+public class GenericFeatureDistribution implements FeatureDistribution {\n+\n+    private final Logger LOGGER = LoggerFactory.getLogger(GenericFeatureDistribution.class);\n+\n+    private final Feature feature;\n+    private final List<Value<?>> values;\n+\n+    public GenericFeatureDistribution(Feature feature, List<Value<?>> values) {\n+        this.feature = feature;\n+        this.values = Collections.unmodifiableList(values);\n+    }\n+\n+    @Override\n+    public Feature getFeature() {\n+        return feature;\n+    }\n+\n+    @Override\n+    public Value<?> sample() {\n+        return sample(1).get(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk3ODgwMA=="}, "originalCommit": {"oid": "e8f8c61825d565b8c2abe377475fb40a3e6b825e"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNDE2OTA1OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/NumericFeatureDistribution.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0xOVQxNTozMToyNFrOH2kQOw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNTo0NDowOVrOH7CiMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk3OTEzMQ==", "bodyText": "Same as above", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r526979131", "createdAt": "2020-11-19T15:31:24Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/NumericFeatureDistribution.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Numeric feature distribution based on {@code double[]}.\n+ */\n+public class NumericFeatureDistribution implements FeatureDistribution {\n+\n+    private final Feature feature;\n+    private final double[] doubles;\n+\n+    public NumericFeatureDistribution(Feature feature, double[] doubles) {\n+        this.feature = feature;\n+        this.doubles = doubles;\n+    }\n+\n+    @Override\n+    public Feature getFeature() {\n+        return feature;\n+    }\n+\n+    @Override\n+    public Value<?> sample() {\n+        return sample(1).get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8f8c61825d565b8c2abe377475fb40a3e6b825e"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY2OTU1NQ==", "bodyText": "correct, thanks, I'll fix it.", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r531669555", "createdAt": "2020-11-27T15:44:09Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/NumericFeatureDistribution.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Numeric feature distribution based on {@code double[]}.\n+ */\n+public class NumericFeatureDistribution implements FeatureDistribution {\n+\n+    private final Feature feature;\n+    private final double[] doubles;\n+\n+    public NumericFeatureDistribution(Feature feature, double[] doubles) {\n+        this.feature = feature;\n+        this.doubles = doubles;\n+    }\n+\n+    @Override\n+    public Feature getFeature() {\n+        return feature;\n+    }\n+\n+    @Override\n+    public Value<?> sample() {\n+        return sample(1).get(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNjk3OTEzMQ=="}, "originalCommit": {"oid": "e8f8c61825d565b8c2abe377475fb40a3e6b825e"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzUzMjM0OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/lime/AggregatedLimeExplainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODoxMzo0NlrOH3E1nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOTozMjo0MlrOH3H7nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUxMjk4OA==", "bodyText": "private static final int DEFAULT_SAMPLE_SIZE = 100?", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r527512988", "createdAt": "2020-11-20T08:13:46Z", "author": {"login": "r00ta"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/lime/AggregatedLimeExplainer.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.global.lime;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.kie.kogito.explainability.global.ExistingPredictionsGlobalExplainer;\n+import org.kie.kogito.explainability.global.GlobalExplainer;\n+import org.kie.kogito.explainability.local.lime.LimeExplainer;\n+import org.kie.kogito.explainability.model.Prediction;\n+import org.kie.kogito.explainability.model.PredictionInput;\n+import org.kie.kogito.explainability.model.PredictionProvider;\n+import org.kie.kogito.explainability.model.PredictionProviderMetadata;\n+import org.kie.kogito.explainability.model.Saliency;\n+import org.kie.kogito.explainability.utils.DataUtils;\n+\n+/**\n+ * Global explainer aggregating LIME explanations over a number of inputs by reporting the mean feature importance for\n+ * each feature.\n+ */\n+public class AggregatedLimeExplainer implements GlobalExplainer<CompletableFuture<Map<String, Saliency>>>,\n+                                                ExistingPredictionsGlobalExplainer<CompletableFuture<Map<String, Saliency>>> {\n+\n+    private final LimeExplainer limeExplainer;\n+    private final int sampleSize;\n+\n+    public AggregatedLimeExplainer(LimeExplainer limeExplainer) {\n+        this(limeExplainer, 100);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2af39d9536e62bd2b8a5b9f6b39ff3b290d175a"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2MzY3OQ==", "bodyText": "sure", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r527563679", "createdAt": "2020-11-20T09:32:42Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/lime/AggregatedLimeExplainer.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.global.lime;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.kie.kogito.explainability.global.ExistingPredictionsGlobalExplainer;\n+import org.kie.kogito.explainability.global.GlobalExplainer;\n+import org.kie.kogito.explainability.local.lime.LimeExplainer;\n+import org.kie.kogito.explainability.model.Prediction;\n+import org.kie.kogito.explainability.model.PredictionInput;\n+import org.kie.kogito.explainability.model.PredictionProvider;\n+import org.kie.kogito.explainability.model.PredictionProviderMetadata;\n+import org.kie.kogito.explainability.model.Saliency;\n+import org.kie.kogito.explainability.utils.DataUtils;\n+\n+/**\n+ * Global explainer aggregating LIME explanations over a number of inputs by reporting the mean feature importance for\n+ * each feature.\n+ */\n+public class AggregatedLimeExplainer implements GlobalExplainer<CompletableFuture<Map<String, Saliency>>>,\n+                                                ExistingPredictionsGlobalExplainer<CompletableFuture<Map<String, Saliency>>> {\n+\n+    private final LimeExplainer limeExplainer;\n+    private final int sampleSize;\n+\n+    public AggregatedLimeExplainer(LimeExplainer limeExplainer) {\n+        this(limeExplainer, 100);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUxMjk4OA=="}, "originalCommit": {"oid": "c2af39d9536e62bd2b8a5b9f6b39ff3b290d175a"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzYxMTczOnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/GenericFeatureDistribution.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODozNTo0MlrOH3FjpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMTowNjo0NlrOH3LSKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUyNDc3Mg==", "bodyText": "public static List<Value<?>> sample(int sampleSize) {\n        List<Value<?>> copy = new java.util.ArrayList<>(values);\n        Collections.shuffle(copy);\n        return copy.subList(0, sampleSize);\n    }\n\n?", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r527524772", "createdAt": "2020-11-20T08:35:42Z", "author": {"login": "r00ta"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/GenericFeatureDistribution.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Feature distribution based on list of {@code Values}.\n+ */\n+public class GenericFeatureDistribution implements FeatureDistribution {\n+\n+    private final Feature feature;\n+    private final List<Value<?>> values;\n+\n+    public GenericFeatureDistribution(Feature feature, List<Value<?>> values) {\n+        this.feature = feature;\n+        this.values = Collections.unmodifiableList(values);\n+    }\n+\n+    @Override\n+    public Feature getFeature() {\n+        return feature;\n+    }\n+\n+    @Override\n+    public Value<?> sample() {\n+        return sample(1).get(0);\n+    }\n+\n+    @Override\n+    public List<Value<?>> sample(int sampleSize) {\n+        List<Value<?>> copy = new java.util.ArrayList<>(values);\n+        List<Value<?>> samples = new ArrayList<>(sampleSize);\n+        for (int i = 0; i < sampleSize; i++) {\n+            if (i % values.size() == 0) {\n+                Collections.shuffle(copy);\n+            }\n+            samples.add(copy.get(i));\n+        }\n+        return samples;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2af39d9536e62bd2b8a5b9f6b39ff3b290d175a"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2ODk4NA==", "bodyText": "I like the suggested change, I need to also make it possible to return a List whose size is bigger than the original values List (hence a subList wouldn't always work here).", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r527568984", "createdAt": "2020-11-20T09:41:55Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/GenericFeatureDistribution.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Feature distribution based on list of {@code Values}.\n+ */\n+public class GenericFeatureDistribution implements FeatureDistribution {\n+\n+    private final Feature feature;\n+    private final List<Value<?>> values;\n+\n+    public GenericFeatureDistribution(Feature feature, List<Value<?>> values) {\n+        this.feature = feature;\n+        this.values = Collections.unmodifiableList(values);\n+    }\n+\n+    @Override\n+    public Feature getFeature() {\n+        return feature;\n+    }\n+\n+    @Override\n+    public Value<?> sample() {\n+        return sample(1).get(0);\n+    }\n+\n+    @Override\n+    public List<Value<?>> sample(int sampleSize) {\n+        List<Value<?>> copy = new java.util.ArrayList<>(values);\n+        List<Value<?>> samples = new ArrayList<>(sampleSize);\n+        for (int i = 0; i < sampleSize; i++) {\n+            if (i % values.size() == 0) {\n+                Collections.shuffle(copy);\n+            }\n+            samples.add(copy.get(i));\n+        }\n+        return samples;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUyNDc3Mg=="}, "originalCommit": {"oid": "c2af39d9536e62bd2b8a5b9f6b39ff3b290d175a"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU4MDcxMg==", "bodyText": "@tteofili I'm probably wrong here, but if it's sampling with replacement would something like\nList<Value<?>> samples = new Random()\n   .ints(sampleSize, 0, values.size()-1)\n   .mapToObj(i -> values.get(i))\n   .collect(Collectors.toList());\n\nwork?", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r527580712", "createdAt": "2020-11-20T10:00:28Z", "author": {"login": "ruivieira"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/GenericFeatureDistribution.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Feature distribution based on list of {@code Values}.\n+ */\n+public class GenericFeatureDistribution implements FeatureDistribution {\n+\n+    private final Feature feature;\n+    private final List<Value<?>> values;\n+\n+    public GenericFeatureDistribution(Feature feature, List<Value<?>> values) {\n+        this.feature = feature;\n+        this.values = Collections.unmodifiableList(values);\n+    }\n+\n+    @Override\n+    public Feature getFeature() {\n+        return feature;\n+    }\n+\n+    @Override\n+    public Value<?> sample() {\n+        return sample(1).get(0);\n+    }\n+\n+    @Override\n+    public List<Value<?>> sample(int sampleSize) {\n+        List<Value<?>> copy = new java.util.ArrayList<>(values);\n+        List<Value<?>> samples = new ArrayList<>(sampleSize);\n+        for (int i = 0; i < sampleSize; i++) {\n+            if (i % values.size() == 0) {\n+                Collections.shuffle(copy);\n+            }\n+            samples.add(copy.get(i));\n+        }\n+        return samples;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUyNDc3Mg=="}, "originalCommit": {"oid": "c2af39d9536e62bd2b8a5b9f6b39ff3b290d175a"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYxODYwMg==", "bodyText": "agreed, I'll abstract inside an utility method in DataUtils, thanks!", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r527618602", "createdAt": "2020-11-20T11:06:46Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/GenericFeatureDistribution.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Feature distribution based on list of {@code Values}.\n+ */\n+public class GenericFeatureDistribution implements FeatureDistribution {\n+\n+    private final Feature feature;\n+    private final List<Value<?>> values;\n+\n+    public GenericFeatureDistribution(Feature feature, List<Value<?>> values) {\n+        this.feature = feature;\n+        this.values = Collections.unmodifiableList(values);\n+    }\n+\n+    @Override\n+    public Feature getFeature() {\n+        return feature;\n+    }\n+\n+    @Override\n+    public Value<?> sample() {\n+        return sample(1).get(0);\n+    }\n+\n+    @Override\n+    public List<Value<?>> sample(int sampleSize) {\n+        List<Value<?>> copy = new java.util.ArrayList<>(values);\n+        List<Value<?>> samples = new ArrayList<>(sampleSize);\n+        for (int i = 0; i < sampleSize; i++) {\n+            if (i % values.size() == 0) {\n+                Collections.shuffle(copy);\n+            }\n+            samples.add(copy.get(i));\n+        }\n+        return samples;\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUyNDc3Mg=="}, "originalCommit": {"oid": "c2af39d9536e62bd2b8a5b9f6b39ff3b290d175a"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzY0MzIzOnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/IndependentFeaturesDatatDistribution.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODo0NTowN1rOH3F3IA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOTo0MToxMlrOH3IOlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUyOTc2MA==", "bodyText": "Minor comment: getFeatureDistributions?", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r527529760", "createdAt": "2020-11-20T08:45:07Z", "author": {"login": "r00ta"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/IndependentFeaturesDatatDistribution.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * Data distribution based on list of {@code FeatureDistributions}.\n+ */\n+public class IndependentFeaturesDatatDistribution implements DataDistribution {\n+\n+    private final List<FeatureDistribution> featureDistributions;\n+\n+    public IndependentFeaturesDatatDistribution(List<FeatureDistribution> featureDistributions) {\n+        this.featureDistributions = Collections.unmodifiableList(featureDistributions);\n+    }\n+\n+    @Override\n+    public PredictionInput sample() {\n+        List<Feature> features = new ArrayList<>(featureDistributions.size());\n+        for (FeatureDistribution featureDistribution : featureDistributions) {\n+            Feature feature = featureDistribution.getFeature();\n+            features.add(FeatureFactory.copyOf(feature, featureDistribution.sample()));\n+        }\n+        return new PredictionInput(features);\n+    }\n+\n+    @Override\n+    public List<PredictionInput> sample(int sampleSize) {\n+        List<PredictionInput> inputs = new ArrayList<>(sampleSize);\n+        for (int i = 0; i < sampleSize; i++) {\n+            inputs.add(sample());\n+        }\n+        return inputs;\n+    }\n+\n+    @Override\n+    public List<PredictionInput> getAllSamples() {\n+        List<Set<Feature>> featureEnumerations = new ArrayList<>(featureDistributions.size());\n+        for (FeatureDistribution featureDistribution : featureDistributions) {\n+            List<Value<?>> allValues = featureDistribution.getAllSamples();\n+            Set<Feature> currentFeatures = new HashSet<>(allValues.size());\n+            Feature feature = featureDistribution.getFeature();\n+            for (Value<?> v : allValues) {\n+                Feature f = FeatureFactory.copyOf(feature, v);\n+                currentFeatures.add(f);\n+            }\n+            featureEnumerations.add(currentFeatures);\n+        }\n+        Set<List<Feature>> cartesianProduct = Sets.cartesianProduct(featureEnumerations);\n+        List<PredictionInput> inputs = new ArrayList<>(cartesianProduct.size());\n+        for (List<Feature> features : cartesianProduct) {\n+            inputs.add(new PredictionInput(features));\n+        }\n+        return inputs;\n+    }\n+\n+    @Override\n+    public List<FeatureDistribution> asFeatureDistributions() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2af39d9536e62bd2b8a5b9f6b39ff3b290d175a"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU2ODUzMw==", "bodyText": "not a strong opinion, but I preferred as  because the DataDistribution interface might or might not be made up of independent feature distributions, so this method would actually transform the underlying data to such a List.", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r527568533", "createdAt": "2020-11-20T09:41:12Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/IndependentFeaturesDatatDistribution.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * Data distribution based on list of {@code FeatureDistributions}.\n+ */\n+public class IndependentFeaturesDatatDistribution implements DataDistribution {\n+\n+    private final List<FeatureDistribution> featureDistributions;\n+\n+    public IndependentFeaturesDatatDistribution(List<FeatureDistribution> featureDistributions) {\n+        this.featureDistributions = Collections.unmodifiableList(featureDistributions);\n+    }\n+\n+    @Override\n+    public PredictionInput sample() {\n+        List<Feature> features = new ArrayList<>(featureDistributions.size());\n+        for (FeatureDistribution featureDistribution : featureDistributions) {\n+            Feature feature = featureDistribution.getFeature();\n+            features.add(FeatureFactory.copyOf(feature, featureDistribution.sample()));\n+        }\n+        return new PredictionInput(features);\n+    }\n+\n+    @Override\n+    public List<PredictionInput> sample(int sampleSize) {\n+        List<PredictionInput> inputs = new ArrayList<>(sampleSize);\n+        for (int i = 0; i < sampleSize; i++) {\n+            inputs.add(sample());\n+        }\n+        return inputs;\n+    }\n+\n+    @Override\n+    public List<PredictionInput> getAllSamples() {\n+        List<Set<Feature>> featureEnumerations = new ArrayList<>(featureDistributions.size());\n+        for (FeatureDistribution featureDistribution : featureDistributions) {\n+            List<Value<?>> allValues = featureDistribution.getAllSamples();\n+            Set<Feature> currentFeatures = new HashSet<>(allValues.size());\n+            Feature feature = featureDistribution.getFeature();\n+            for (Value<?> v : allValues) {\n+                Feature f = FeatureFactory.copyOf(feature, v);\n+                currentFeatures.add(f);\n+            }\n+            featureEnumerations.add(currentFeatures);\n+        }\n+        Set<List<Feature>> cartesianProduct = Sets.cartesianProduct(featureEnumerations);\n+        List<PredictionInput> inputs = new ArrayList<>(cartesianProduct.size());\n+        for (List<Feature> features : cartesianProduct) {\n+            inputs.add(new PredictionInput(features));\n+        }\n+        return inputs;\n+    }\n+\n+    @Override\n+    public List<FeatureDistribution> asFeatureDistributions() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUyOTc2MA=="}, "originalCommit": {"oid": "c2af39d9536e62bd2b8a5b9f6b39ff3b290d175a"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzY0NTcxOnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/NumericFeatureDistribution.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODo0NTo0NVrOH3F4iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMTowNTo0M1rOH3LQGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUzMDEyMw==", "bodyText": "Same as before", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r527530123", "createdAt": "2020-11-20T08:45:45Z", "author": {"login": "r00ta"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/NumericFeatureDistribution.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Numeric feature distribution based on {@code double[]}.\n+ */\n+public class NumericFeatureDistribution implements FeatureDistribution {\n+\n+    private final Feature feature;\n+    private final double[] doubles;\n+\n+    public NumericFeatureDistribution(Feature feature, double[] doubles) {\n+        this.feature = feature;\n+        this.doubles = doubles;\n+    }\n+\n+    @Override\n+    public Feature getFeature() {\n+        return feature;\n+    }\n+\n+    @Override\n+    public Value<?> sample() {\n+        return sample(1).get(0);\n+    }\n+\n+    @Override\n+    public List<Value<?>> sample(int sampleSize) {\n+        List<Double> copy = Arrays.stream(doubles).boxed().collect(Collectors.toList());\n+        List<Value<?>> samples = new ArrayList<>(sampleSize);\n+        for (int i = 0; i < sampleSize; i++) {\n+            if (i % doubles.length == 0) {\n+                Collections.shuffle(copy);\n+            }\n+            samples.add(new Value<>(copy.get(i % doubles.length)));\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2af39d9536e62bd2b8a5b9f6b39ff3b290d175a"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYxODA3Mg==", "bodyText": "will do sampling with replacament in a common matter as per @ruivieira's soggestion", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r527618072", "createdAt": "2020-11-20T11:05:43Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/NumericFeatureDistribution.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Numeric feature distribution based on {@code double[]}.\n+ */\n+public class NumericFeatureDistribution implements FeatureDistribution {\n+\n+    private final Feature feature;\n+    private final double[] doubles;\n+\n+    public NumericFeatureDistribution(Feature feature, double[] doubles) {\n+        this.feature = feature;\n+        this.doubles = doubles;\n+    }\n+\n+    @Override\n+    public Feature getFeature() {\n+        return feature;\n+    }\n+\n+    @Override\n+    public Value<?> sample() {\n+        return sample(1).get(0);\n+    }\n+\n+    @Override\n+    public List<Value<?>> sample(int sampleSize) {\n+        List<Double> copy = Arrays.stream(doubles).boxed().collect(Collectors.toList());\n+        List<Value<?>> samples = new ArrayList<>(sampleSize);\n+        for (int i = 0; i < sampleSize; i++) {\n+            if (i % doubles.length == 0) {\n+                Collections.shuffle(copy);\n+            }\n+            samples.add(new Value<>(copy.get(i % doubles.length)));\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUzMDEyMw=="}, "originalCommit": {"oid": "c2af39d9536e62bd2b8a5b9f6b39ff3b290d175a"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzY0ODg0OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/GenericFeatureDistribution.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODo0Njo0NFrOH3F6mg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMTowNTowMlrOH3LOkg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUzMDY1MA==", "bodyText": "I see that in other implementations getAllSample shuffles the collection before it is returned. Should we do the same here?", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r527530650", "createdAt": "2020-11-20T08:46:44Z", "author": {"login": "r00ta"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/GenericFeatureDistribution.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Feature distribution based on list of {@code Values}.\n+ */\n+public class GenericFeatureDistribution implements FeatureDistribution {\n+\n+    private final Feature feature;\n+    private final List<Value<?>> values;\n+\n+    public GenericFeatureDistribution(Feature feature, List<Value<?>> values) {\n+        this.feature = feature;\n+        this.values = Collections.unmodifiableList(values);\n+    }\n+\n+    @Override\n+    public Feature getFeature() {\n+        return feature;\n+    }\n+\n+    @Override\n+    public Value<?> sample() {\n+        return sample(1).get(0);\n+    }\n+\n+    @Override\n+    public List<Value<?>> sample(int sampleSize) {\n+        List<Value<?>> copy = new java.util.ArrayList<>(values);\n+        List<Value<?>> samples = new ArrayList<>(sampleSize);\n+        for (int i = 0; i < sampleSize; i++) {\n+            if (i % values.size() == 0) {\n+                Collections.shuffle(copy);\n+            }\n+            samples.add(copy.get(i));\n+        }\n+        return samples;\n+    }\n+\n+    @Override\n+    public List<Value<?>> getAllSamples() {\n+        return values;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2af39d9536e62bd2b8a5b9f6b39ff3b290d175a"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzYxNzY4Mg==", "bodyText": "yes, the behavior (shuffling) should be consistent across the implementations.", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r527617682", "createdAt": "2020-11-20T11:05:02Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/GenericFeatureDistribution.java", "diffHunk": "@@ -0,0 +1,62 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * Feature distribution based on list of {@code Values}.\n+ */\n+public class GenericFeatureDistribution implements FeatureDistribution {\n+\n+    private final Feature feature;\n+    private final List<Value<?>> values;\n+\n+    public GenericFeatureDistribution(Feature feature, List<Value<?>> values) {\n+        this.feature = feature;\n+        this.values = Collections.unmodifiableList(values);\n+    }\n+\n+    @Override\n+    public Feature getFeature() {\n+        return feature;\n+    }\n+\n+    @Override\n+    public Value<?> sample() {\n+        return sample(1).get(0);\n+    }\n+\n+    @Override\n+    public List<Value<?>> sample(int sampleSize) {\n+        List<Value<?>> copy = new java.util.ArrayList<>(values);\n+        List<Value<?>> samples = new ArrayList<>(sampleSize);\n+        for (int i = 0; i < sampleSize; i++) {\n+            if (i % values.size() == 0) {\n+                Collections.shuffle(copy);\n+            }\n+            samples.add(copy.get(i));\n+        }\n+        return samples;\n+    }\n+\n+    @Override\n+    public List<Value<?>> getAllSamples() {\n+        return values;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUzMDY1MA=="}, "originalCommit": {"oid": "c2af39d9536e62bd2b8a5b9f6b39ff3b290d175a"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzY2MzI4OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/PredictionInputsDataDistribution.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODo1MDo1NVrOH3GDrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDoyMTo1NVrOH3JvGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUzMjk3Mw==", "bodyText": "In the other implementations of DataDistribution the method sample is without resampling, the same element can't be picked more than one time (and sampleSize must be <= thelist.size()). Here the same method works with sampleSize > inputs.size() and is with resampling, is this intended?", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r527532973", "createdAt": "2020-11-20T08:50:55Z", "author": {"login": "r00ta"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/PredictionInputsDataDistribution.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.security.SecureRandom;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+\n+/**\n+ * Data distribution based on list of {@code PredictionInputs}.\n+ */\n+public class PredictionInputsDataDistribution implements DataDistribution {\n+\n+    private final List<PredictionInput> inputs;\n+    private final Random random;\n+\n+    public PredictionInputsDataDistribution(List<PredictionInput> inputs) {\n+        this(inputs, new SecureRandom());\n+    }\n+\n+    public PredictionInputsDataDistribution(List<PredictionInput> inputs, Random random) {\n+        this.inputs = Collections.unmodifiableList(inputs);\n+        this.random = random;\n+    }\n+\n+    @Override\n+    public PredictionInput sample() {\n+        List<PredictionInput> copy = new java.util.ArrayList<>(inputs);\n+        Collections.shuffle(copy);\n+        return copy.get(0);\n+    }\n+\n+    @Override\n+    public List<PredictionInput> sample(int sampleSize) {\n+        List<PredictionInput> samples = new ArrayList<>(sampleSize);\n+        for (int i = 0; i < sampleSize; i++) {\n+            int index = random.nextInt(inputs.size() - 1);\n+            index = index % inputs.size();\n+            samples.add(inputs.get(index));\n+        }\n+        return samples;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2af39d9536e62bd2b8a5b9f6b39ff3b290d175a"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU3OTc3NA==", "bodyText": "in IndependentFeaturesDatatDistribution this is not explicitly done because there's no fixed list of PredictionInputs to sample from, in there sample() is called n times regardless of the dimensionality of the underlying FeatureDistributions therefore repetition might happen and there's no need to explicitly re-sample.\nI'll add a test in  IndependentFeaturesDatatDistributionTest to cover this scenario there as well.", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r527579774", "createdAt": "2020-11-20T09:59:03Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/PredictionInputsDataDistribution.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.security.SecureRandom;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+\n+/**\n+ * Data distribution based on list of {@code PredictionInputs}.\n+ */\n+public class PredictionInputsDataDistribution implements DataDistribution {\n+\n+    private final List<PredictionInput> inputs;\n+    private final Random random;\n+\n+    public PredictionInputsDataDistribution(List<PredictionInput> inputs) {\n+        this(inputs, new SecureRandom());\n+    }\n+\n+    public PredictionInputsDataDistribution(List<PredictionInput> inputs, Random random) {\n+        this.inputs = Collections.unmodifiableList(inputs);\n+        this.random = random;\n+    }\n+\n+    @Override\n+    public PredictionInput sample() {\n+        List<PredictionInput> copy = new java.util.ArrayList<>(inputs);\n+        Collections.shuffle(copy);\n+        return copy.get(0);\n+    }\n+\n+    @Override\n+    public List<PredictionInput> sample(int sampleSize) {\n+        List<PredictionInput> samples = new ArrayList<>(sampleSize);\n+        for (int i = 0; i < sampleSize; i++) {\n+            int index = random.nextInt(inputs.size() - 1);\n+            index = index % inputs.size();\n+            samples.add(inputs.get(index));\n+        }\n+        return samples;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUzMjk3Mw=="}, "originalCommit": {"oid": "c2af39d9536e62bd2b8a5b9f6b39ff3b290d175a"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU4MDQ4NQ==", "bodyText": "anyway in general it should be possible to draw as many samples as one wish, without requiring knowledge about the underlying data / feature distribution size. I'll double check this can be done in all the affected classes.", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r527580485", "createdAt": "2020-11-20T10:00:07Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/PredictionInputsDataDistribution.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.security.SecureRandom;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+\n+/**\n+ * Data distribution based on list of {@code PredictionInputs}.\n+ */\n+public class PredictionInputsDataDistribution implements DataDistribution {\n+\n+    private final List<PredictionInput> inputs;\n+    private final Random random;\n+\n+    public PredictionInputsDataDistribution(List<PredictionInput> inputs) {\n+        this(inputs, new SecureRandom());\n+    }\n+\n+    public PredictionInputsDataDistribution(List<PredictionInput> inputs, Random random) {\n+        this.inputs = Collections.unmodifiableList(inputs);\n+        this.random = random;\n+    }\n+\n+    @Override\n+    public PredictionInput sample() {\n+        List<PredictionInput> copy = new java.util.ArrayList<>(inputs);\n+        Collections.shuffle(copy);\n+        return copy.get(0);\n+    }\n+\n+    @Override\n+    public List<PredictionInput> sample(int sampleSize) {\n+        List<PredictionInput> samples = new ArrayList<>(sampleSize);\n+        for (int i = 0; i < sampleSize; i++) {\n+            int index = random.nextInt(inputs.size() - 1);\n+            index = index % inputs.size();\n+            samples.add(inputs.get(index));\n+        }\n+        return samples;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUzMjk3Mw=="}, "originalCommit": {"oid": "c2af39d9536e62bd2b8a5b9f6b39ff3b290d175a"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU5MzI0MA==", "bodyText": "all in all I think the best solution is to just call sample() n times avoiding any unnecessary guards on the sample size.", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r527593240", "createdAt": "2020-11-20T10:21:55Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/PredictionInputsDataDistribution.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.security.SecureRandom;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+\n+/**\n+ * Data distribution based on list of {@code PredictionInputs}.\n+ */\n+public class PredictionInputsDataDistribution implements DataDistribution {\n+\n+    private final List<PredictionInput> inputs;\n+    private final Random random;\n+\n+    public PredictionInputsDataDistribution(List<PredictionInput> inputs) {\n+        this(inputs, new SecureRandom());\n+    }\n+\n+    public PredictionInputsDataDistribution(List<PredictionInput> inputs, Random random) {\n+        this.inputs = Collections.unmodifiableList(inputs);\n+        this.random = random;\n+    }\n+\n+    @Override\n+    public PredictionInput sample() {\n+        List<PredictionInput> copy = new java.util.ArrayList<>(inputs);\n+        Collections.shuffle(copy);\n+        return copy.get(0);\n+    }\n+\n+    @Override\n+    public List<PredictionInput> sample(int sampleSize) {\n+        List<PredictionInput> samples = new ArrayList<>(sampleSize);\n+        for (int i = 0; i < sampleSize; i++) {\n+            int index = random.nextInt(inputs.size() - 1);\n+            index = index % inputs.size();\n+            samples.add(inputs.get(index));\n+        }\n+        return samples;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUzMjk3Mw=="}, "originalCommit": {"oid": "c2af39d9536e62bd2b8a5b9f6b39ff3b290d175a"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzY3Mzg3OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Saliency.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODo1NDowMFrOH3GKQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDowMDo0MlrOH3I-3g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUzNDY1OQ==", "bodyText": "remove newline :D", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r527534659", "createdAt": "2020-11-20T08:54:00Z", "author": {"login": "r00ta"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Saliency.java", "diffHunk": "@@ -58,8 +65,41 @@ public Output getOutput() {\n     @Override\n     public String toString() {\n         return \"Saliency{\" +\n-                \"perFeatureImportance=\" + perFeatureImportance +\n+                \"output=\" + output +\n+                \", perFeatureImportance=\" + perFeatureImportance +\n                 '}';\n     }\n-}\n \n+    /**\n+     * Merge saliencies so that they are aggregated by {@code Output} and the resulting list of associated\n+     * {@code FeatureImportance}s is derived by calculating the mean score for each feature across all such saliencies.\n+     *\n+     * @param saliencies a collection of saliency maps\n+     * @return a map of merged saliencies, one for each output appearing in the input saliencies\n+     */\n+    public static Map<String, Saliency> merge(Collection<Map<String, Saliency>> saliencies) {\n+        Map<String, Saliency> finalResult = new HashMap<>();\n+\n+        // group Saliencies by Output\n+        Map<Output, List<Saliency>> flatten = saliencies.stream()\n+                .map(Map::values)\n+                .flatMap(Collection::stream)\n+                .collect(Collectors.groupingBy(Saliency::getOutput));\n+\n+        // calculate mean feature importance\n+        for (Map.Entry<Output, List<Saliency>> saliencyEntry : flatten.entrySet()) {\n+            List<FeatureImportance> result = new ArrayList<>();\n+            List<FeatureImportance> fis = saliencyEntry.getValue().stream().map(s -> s.perFeatureImportance).flatMap(Collection::stream).collect(Collectors.toList());\n+            Map<Feature, List<FeatureImportance>> collect = fis.stream().collect(Collectors.groupingBy(fi -> FeatureFactory.copyOf(fi.getFeature(), new Value<>(null))));\n+            for (Map.Entry<Feature, List<FeatureImportance>> entry : collect.entrySet()) {\n+                double meanScore = entry.getValue().stream().map(FeatureImportance::getScore).flatMapToDouble(DoubleStream::of).average().orElse(0);\n+                result.add(new FeatureImportance(entry.getKey(), meanScore));\n+            }\n+            result.sort(Comparator.comparing(f -> f.getFeature().getName()));\n+            finalResult.put(saliencyEntry.getKey().getName(), new Saliency(saliencyEntry.getKey(), result));\n+        }\n+        return finalResult;\n+    }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2af39d9536e62bd2b8a5b9f6b39ff3b290d175a"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU4MDg5NA==", "bodyText": "oki", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r527580894", "createdAt": "2020-11-20T10:00:42Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Saliency.java", "diffHunk": "@@ -58,8 +65,41 @@ public Output getOutput() {\n     @Override\n     public String toString() {\n         return \"Saliency{\" +\n-                \"perFeatureImportance=\" + perFeatureImportance +\n+                \"output=\" + output +\n+                \", perFeatureImportance=\" + perFeatureImportance +\n                 '}';\n     }\n-}\n \n+    /**\n+     * Merge saliencies so that they are aggregated by {@code Output} and the resulting list of associated\n+     * {@code FeatureImportance}s is derived by calculating the mean score for each feature across all such saliencies.\n+     *\n+     * @param saliencies a collection of saliency maps\n+     * @return a map of merged saliencies, one for each output appearing in the input saliencies\n+     */\n+    public static Map<String, Saliency> merge(Collection<Map<String, Saliency>> saliencies) {\n+        Map<String, Saliency> finalResult = new HashMap<>();\n+\n+        // group Saliencies by Output\n+        Map<Output, List<Saliency>> flatten = saliencies.stream()\n+                .map(Map::values)\n+                .flatMap(Collection::stream)\n+                .collect(Collectors.groupingBy(Saliency::getOutput));\n+\n+        // calculate mean feature importance\n+        for (Map.Entry<Output, List<Saliency>> saliencyEntry : flatten.entrySet()) {\n+            List<FeatureImportance> result = new ArrayList<>();\n+            List<FeatureImportance> fis = saliencyEntry.getValue().stream().map(s -> s.perFeatureImportance).flatMap(Collection::stream).collect(Collectors.toList());\n+            Map<Feature, List<FeatureImportance>> collect = fis.stream().collect(Collectors.groupingBy(fi -> FeatureFactory.copyOf(fi.getFeature(), new Value<>(null))));\n+            for (Map.Entry<Feature, List<FeatureImportance>> entry : collect.entrySet()) {\n+                double meanScore = entry.getValue().stream().map(FeatureImportance::getScore).flatMapToDouble(DoubleStream::of).average().orElse(0);\n+                result.add(new FeatureImportance(entry.getKey(), meanScore));\n+            }\n+            result.sort(Comparator.comparing(f -> f.getFeature().getName()));\n+            finalResult.put(saliencyEntry.getKey().getName(), new Saliency(saliencyEntry.getKey(), result));\n+        }\n+        return finalResult;\n+    }\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUzNDY1OQ=="}, "originalCommit": {"oid": "c2af39d9536e62bd2b8a5b9f6b39ff3b290d175a"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzY4NTMzOnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainerTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwODo1NzowMVrOH3GQ5g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDowMDo1NFrOH3I_ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUzNjM1OA==", "bodyText": "Should we set the seed here as well?", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r527536358", "createdAt": "2020-11-20T08:57:01Z", "author": {"login": "r00ta"}, "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainerTest.java", "diffHunk": "@@ -54,7 +53,7 @@\n     PredictionProviderMetadata metadata = new PredictionProviderMetadata() {\n         @Override\n         public DataDistribution getDataDistribution() {\n-            return DataUtils.generateRandomDataDistribution(3, 100, new FakeRandom());\n+            return DataUtils.generateRandomDataDistribution(3, 100, new Random());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2af39d9536e62bd2b8a5b9f6b39ff3b290d175a"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU4MTAzNA==", "bodyText": "yes, good point.", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r527581034", "createdAt": "2020-11-20T10:00:54Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/global/pdp/PartialDependencePlotExplainerTest.java", "diffHunk": "@@ -54,7 +53,7 @@\n     PredictionProviderMetadata metadata = new PredictionProviderMetadata() {\n         @Override\n         public DataDistribution getDataDistribution() {\n-            return DataUtils.generateRandomDataDistribution(3, 100, new FakeRandom());\n+            return DataUtils.generateRandomDataDistribution(3, 100, new Random());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzUzNjM1OA=="}, "originalCommit": {"oid": "c2af39d9536e62bd2b8a5b9f6b39ff3b290d175a"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzc2MDQ3OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/model/GenericFeatureDistributionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOTowODo1M1rOH3HCAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMzoyMjo1N1rOH3PcWg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU0ODkyOQ==", "bodyText": "What do you think if we aggregate the three tests in one? At the end they are checking that sample(), sample(int) and getAllSamples returns something, we might do something like\n    @Test\n    void testNumericGetAllSamples() {\n        Feature feature = TestUtils.getMockedNumericFeature();\n        double[] doubles = DataUtils.generateSamples(0, 10, 10);\n        List<Value<?>> values = Arrays.stream(doubles).mapToObj(Value::new).collect(Collectors.toList());\n        GenericFeatureDistribution numericFeatureDistribution = new GenericFeatureDistribution(feature, values);\n        Assertions.assertEquals(10, numericFeatureDistribution.getAllSamples().size());\n        Assertions.assertEquals(3, numericFeatureDistribution.sample(3).size());\n        Assertions.assertTrue(numericFeatureDistribution.sample().asNumber()).isBetween(0d, 10d));\n    }\n\nAssuming that  DataUtils.generateSamples is already unit tested I don't think it's necessary to test that every element is between 0 and 10.\nI would put a unit test for the case numericFeatureDistribution.sample(11) instead", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r527548929", "createdAt": "2020-11-20T09:08:53Z", "author": {"login": "r00ta"}, "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/model/GenericFeatureDistributionTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.explainability.TestUtils;\n+import org.kie.kogito.explainability.utils.DataUtils;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class GenericFeatureDistributionTest {\n+\n+    @Test\n+    void testNumericSample() {\n+        Feature feature = TestUtils.getMockedNumericFeature();\n+        double[] doubles = DataUtils.generateSamples(0, 10, 10);\n+        List<Value<?>> values = Arrays.stream(doubles).mapToObj(Value::new).collect(Collectors.toList());\n+        GenericFeatureDistribution numericFeatureDistribution = new GenericFeatureDistribution(feature, values);\n+        Value<?> sample = numericFeatureDistribution.sample();\n+        assertNotNull(sample);\n+        assertNotNull(sample.getUnderlyingObject());\n+        assertThat(sample.asNumber()).isBetween(0d, 10d);\n+    }\n+\n+    @Test\n+    void testNumericSamples() {\n+        Feature feature = TestUtils.getMockedNumericFeature();\n+        double[] doubles = DataUtils.generateSamples(0, 10, 10);\n+        List<Value<?>> values = Arrays.stream(doubles).mapToObj(Value::new).collect(Collectors.toList());\n+        GenericFeatureDistribution numericFeatureDistribution = new GenericFeatureDistribution(feature, values);\n+        List<Value<?>> samples = numericFeatureDistribution.sample(3);\n+        assertNotNull(samples);\n+        assertEquals(3, samples.size());\n+        for (Value<?> sample : samples) {\n+            assertNotNull(sample);\n+            assertNotNull(sample.getUnderlyingObject());\n+            assertThat(sample.asNumber()).isBetween(0d, 10d);\n+        }\n+    }\n+\n+    @Test\n+    void testNumericGetAllSamples() {\n+        Feature feature = TestUtils.getMockedNumericFeature();\n+        double[] doubles = DataUtils.generateSamples(0, 10, 10);\n+        List<Value<?>> values = Arrays.stream(doubles).mapToObj(Value::new).collect(Collectors.toList());\n+        GenericFeatureDistribution numericFeatureDistribution = new GenericFeatureDistribution(feature, values);\n+        List<Value<?>> samples = numericFeatureDistribution.getAllSamples();\n+        assertNotNull(samples);\n+        assertEquals(10, samples.size());\n+        for (Value<?> sample : samples) {\n+            assertNotNull(sample);\n+            assertNotNull(sample.getUnderlyingObject());\n+            assertThat(sample.asNumber()).isBetween(0d, 10d);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2af39d9536e62bd2b8a5b9f6b39ff3b290d175a"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzY4Njc0Ng==", "bodyText": "ok, I will unify them as suggested and create a new one for the \"bigger than distribution size\" case.", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r527686746", "createdAt": "2020-11-20T13:22:57Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/model/GenericFeatureDistributionTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.explainability.TestUtils;\n+import org.kie.kogito.explainability.utils.DataUtils;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class GenericFeatureDistributionTest {\n+\n+    @Test\n+    void testNumericSample() {\n+        Feature feature = TestUtils.getMockedNumericFeature();\n+        double[] doubles = DataUtils.generateSamples(0, 10, 10);\n+        List<Value<?>> values = Arrays.stream(doubles).mapToObj(Value::new).collect(Collectors.toList());\n+        GenericFeatureDistribution numericFeatureDistribution = new GenericFeatureDistribution(feature, values);\n+        Value<?> sample = numericFeatureDistribution.sample();\n+        assertNotNull(sample);\n+        assertNotNull(sample.getUnderlyingObject());\n+        assertThat(sample.asNumber()).isBetween(0d, 10d);\n+    }\n+\n+    @Test\n+    void testNumericSamples() {\n+        Feature feature = TestUtils.getMockedNumericFeature();\n+        double[] doubles = DataUtils.generateSamples(0, 10, 10);\n+        List<Value<?>> values = Arrays.stream(doubles).mapToObj(Value::new).collect(Collectors.toList());\n+        GenericFeatureDistribution numericFeatureDistribution = new GenericFeatureDistribution(feature, values);\n+        List<Value<?>> samples = numericFeatureDistribution.sample(3);\n+        assertNotNull(samples);\n+        assertEquals(3, samples.size());\n+        for (Value<?> sample : samples) {\n+            assertNotNull(sample);\n+            assertNotNull(sample.getUnderlyingObject());\n+            assertThat(sample.asNumber()).isBetween(0d, 10d);\n+        }\n+    }\n+\n+    @Test\n+    void testNumericGetAllSamples() {\n+        Feature feature = TestUtils.getMockedNumericFeature();\n+        double[] doubles = DataUtils.generateSamples(0, 10, 10);\n+        List<Value<?>> values = Arrays.stream(doubles).mapToObj(Value::new).collect(Collectors.toList());\n+        GenericFeatureDistribution numericFeatureDistribution = new GenericFeatureDistribution(feature, values);\n+        List<Value<?>> samples = numericFeatureDistribution.getAllSamples();\n+        assertNotNull(samples);\n+        assertEquals(10, samples.size());\n+        for (Value<?> sample : samples) {\n+            assertNotNull(sample);\n+            assertNotNull(sample.getUnderlyingObject());\n+            assertThat(sample.asNumber()).isBetween(0d, 10d);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU0ODkyOQ=="}, "originalCommit": {"oid": "c2af39d9536e62bd2b8a5b9f6b39ff3b290d175a"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzc2MjY0OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/model/GenericFeatureDistributionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOTowOToxNFrOH3HDeQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOTowOToxNFrOH3HDeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU0OTMwNQ==", "bodyText": "Same for this", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r527549305", "createdAt": "2020-11-20T09:09:14Z", "author": {"login": "r00ta"}, "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/model/GenericFeatureDistributionTest.java", "diffHunk": "@@ -0,0 +1,118 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.explainability.TestUtils;\n+import org.kie.kogito.explainability.utils.DataUtils;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class GenericFeatureDistributionTest {\n+\n+    @Test\n+    void testNumericSample() {\n+        Feature feature = TestUtils.getMockedNumericFeature();\n+        double[] doubles = DataUtils.generateSamples(0, 10, 10);\n+        List<Value<?>> values = Arrays.stream(doubles).mapToObj(Value::new).collect(Collectors.toList());\n+        GenericFeatureDistribution numericFeatureDistribution = new GenericFeatureDistribution(feature, values);\n+        Value<?> sample = numericFeatureDistribution.sample();\n+        assertNotNull(sample);\n+        assertNotNull(sample.getUnderlyingObject());\n+        assertThat(sample.asNumber()).isBetween(0d, 10d);\n+    }\n+\n+    @Test\n+    void testNumericSamples() {\n+        Feature feature = TestUtils.getMockedNumericFeature();\n+        double[] doubles = DataUtils.generateSamples(0, 10, 10);\n+        List<Value<?>> values = Arrays.stream(doubles).mapToObj(Value::new).collect(Collectors.toList());\n+        GenericFeatureDistribution numericFeatureDistribution = new GenericFeatureDistribution(feature, values);\n+        List<Value<?>> samples = numericFeatureDistribution.sample(3);\n+        assertNotNull(samples);\n+        assertEquals(3, samples.size());\n+        for (Value<?> sample : samples) {\n+            assertNotNull(sample);\n+            assertNotNull(sample.getUnderlyingObject());\n+            assertThat(sample.asNumber()).isBetween(0d, 10d);\n+        }\n+    }\n+\n+    @Test\n+    void testNumericGetAllSamples() {\n+        Feature feature = TestUtils.getMockedNumericFeature();\n+        double[] doubles = DataUtils.generateSamples(0, 10, 10);\n+        List<Value<?>> values = Arrays.stream(doubles).mapToObj(Value::new).collect(Collectors.toList());\n+        GenericFeatureDistribution numericFeatureDistribution = new GenericFeatureDistribution(feature, values);\n+        List<Value<?>> samples = numericFeatureDistribution.getAllSamples();\n+        assertNotNull(samples);\n+        assertEquals(10, samples.size());\n+        for (Value<?> sample : samples) {\n+            assertNotNull(sample);\n+            assertNotNull(sample.getUnderlyingObject());\n+            assertThat(sample.asNumber()).isBetween(0d, 10d);\n+        }\n+    }\n+\n+    @Test\n+    void testStringSample() {\n+        Feature feature = TestUtils.getMockedNumericFeature();\n+        String[] words = \"a b c d e f g h i j k l m n o p q r s u v w x y z\".split(\" \");\n+        List<Value<?>> values = Arrays.stream(words).map(Value::new).collect(Collectors.toList());\n+        GenericFeatureDistribution numericFeatureDistribution = new GenericFeatureDistribution(feature, values);\n+        Value<?> sample = numericFeatureDistribution.sample();\n+        assertNotNull(sample);\n+        assertNotNull(sample.getUnderlyingObject());\n+        assertThat(sample.asString()).isBetween(\"a\", \"z\");\n+    }\n+\n+    @Test\n+    void testStringSamples() {\n+        Feature feature = TestUtils.getMockedNumericFeature();\n+        String[] words = \"a b c d e f g h i j k l m n o p q r s u v w x y z\".split(\" \");\n+        List<Value<?>> values = Arrays.stream(words).map(Value::new).collect(Collectors.toList());\n+        GenericFeatureDistribution numericFeatureDistribution = new GenericFeatureDistribution(feature, values);\n+        List<Value<?>> samples = numericFeatureDistribution.sample(3);\n+        assertNotNull(samples);\n+        assertEquals(3, samples.size());\n+        for (Value<?> sample : samples) {\n+            assertNotNull(sample);\n+            assertNotNull(sample.getUnderlyingObject());\n+            assertThat(sample.asString()).isBetween(\"a\", \"z\");\n+        }\n+    }\n+\n+    @Test\n+    void testStringGetAllSamples() {\n+        Feature feature = TestUtils.getMockedNumericFeature();\n+        String[] words = \"a b c d e f g h i j k l m n o p q r s t u v w x y z\".split(\" \");\n+        List<Value<?>> values = Arrays.stream(words).map(Value::new).collect(Collectors.toList());\n+        GenericFeatureDistribution numericFeatureDistribution = new GenericFeatureDistribution(feature, values);\n+        List<Value<?>> samples = numericFeatureDistribution.getAllSamples();\n+        assertNotNull(samples);\n+        assertEquals(26, samples.size());\n+        for (Value<?> sample : samples) {\n+            assertNotNull(sample);\n+            assertNotNull(sample.getUnderlyingObject());\n+            assertThat(sample.asString()).isBetween(\"a\", \"z\");\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2af39d9536e62bd2b8a5b9f6b39ff3b290d175a"}, "originalPosition": 117}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzc2Nzk5OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/model/IndependentFeaturesDatatDistributionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOTowOTo1NVrOH3HG2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOTowOTo1NVrOH3HG2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU1MDE3MQ==", "bodyText": "Same as before", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r527550171", "createdAt": "2020-11-20T09:09:55Z", "author": {"login": "r00ta"}, "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/model/IndependentFeaturesDatatDistributionTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.explainability.TestUtils;\n+import org.kie.kogito.explainability.utils.DataUtils;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+\n+class IndependentFeaturesDatatDistributionTest {\n+\n+    @Test\n+    void testSample() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2af39d9536e62bd2b8a5b9f6b39ff3b290d175a"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzc2OTI4OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/model/NumericFeatureDistributionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOToxMDoxNlrOH3HHsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOToxMDoxNlrOH3HHsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU1MDM4NQ==", "bodyText": "same as before", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r527550385", "createdAt": "2020-11-20T09:10:16Z", "author": {"login": "r00ta"}, "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/model/NumericFeatureDistributionTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.explainability.TestUtils;\n+import org.kie.kogito.explainability.utils.DataUtils;\n+\n+import static org.assertj.core.api.Assertions.assertThat;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class NumericFeatureDistributionTest {\n+\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2af39d9536e62bd2b8a5b9f6b39ff3b290d175a"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzc3MDk1OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/model/PredictionInputsDataDistributionTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOToxMDo0MFrOH3HIug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOToxMDo0MFrOH3HIug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU1MDY1MA==", "bodyText": "same as before", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r527550650", "createdAt": "2020-11-20T09:10:40Z", "author": {"login": "r00ta"}, "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/model/PredictionInputsDataDistributionTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.explainability.TestUtils;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class PredictionInputsDataDistributionTest {\n+\n+    @Test\n+    void testSample() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2af39d9536e62bd2b8a5b9f6b39ff3b290d175a"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzc4MjE3OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Saliency.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOToxMzo1MlrOH3HPrQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDoyMzowM1rOH3JxvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU1MjQyOQ==", "bodyText": "Is this unit tested?", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r527552429", "createdAt": "2020-11-20T09:13:52Z", "author": {"login": "r00ta"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Saliency.java", "diffHunk": "@@ -58,8 +65,41 @@ public Output getOutput() {\n     @Override\n     public String toString() {\n         return \"Saliency{\" +\n-                \"perFeatureImportance=\" + perFeatureImportance +\n+                \"output=\" + output +\n+                \", perFeatureImportance=\" + perFeatureImportance +\n                 '}';\n     }\n-}\n \n+    /**\n+     * Merge saliencies so that they are aggregated by {@code Output} and the resulting list of associated\n+     * {@code FeatureImportance}s is derived by calculating the mean score for each feature across all such saliencies.\n+     *\n+     * @param saliencies a collection of saliency maps\n+     * @return a map of merged saliencies, one for each output appearing in the input saliencies\n+     */\n+    public static Map<String, Saliency> merge(Collection<Map<String, Saliency>> saliencies) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2af39d9536e62bd2b8a5b9f6b39ff3b290d175a"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU5MzkxNw==", "bodyText": "yes, in SaliencyTest", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r527593917", "createdAt": "2020-11-20T10:23:03Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/Saliency.java", "diffHunk": "@@ -58,8 +65,41 @@ public Output getOutput() {\n     @Override\n     public String toString() {\n         return \"Saliency{\" +\n-                \"perFeatureImportance=\" + perFeatureImportance +\n+                \"output=\" + output +\n+                \", perFeatureImportance=\" + perFeatureImportance +\n                 '}';\n     }\n-}\n \n+    /**\n+     * Merge saliencies so that they are aggregated by {@code Output} and the resulting list of associated\n+     * {@code FeatureImportance}s is derived by calculating the mean score for each feature across all such saliencies.\n+     *\n+     * @param saliencies a collection of saliency maps\n+     * @return a map of merged saliencies, one for each output appearing in the input saliencies\n+     */\n+    public static Map<String, Saliency> merge(Collection<Map<String, Saliency>> saliencies) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU1MjQyOQ=="}, "originalCommit": {"oid": "c2af39d9536e62bd2b8a5b9f6b39ff3b290d175a"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwNzc4MzQ3OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/lime/AggregatedLimeExplainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQwOToxNDoxNVrOH3HQhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxMDoyMzo0MFrOH3JzEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU1MjY0NA==", "bodyText": "Maybe I missed them, but do we have tests for those?", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r527552644", "createdAt": "2020-11-20T09:14:15Z", "author": {"login": "r00ta"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/lime/AggregatedLimeExplainer.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.global.lime;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.kie.kogito.explainability.global.ExistingPredictionsGlobalExplainer;\n+import org.kie.kogito.explainability.global.GlobalExplainer;\n+import org.kie.kogito.explainability.local.lime.LimeExplainer;\n+import org.kie.kogito.explainability.model.Prediction;\n+import org.kie.kogito.explainability.model.PredictionInput;\n+import org.kie.kogito.explainability.model.PredictionProvider;\n+import org.kie.kogito.explainability.model.PredictionProviderMetadata;\n+import org.kie.kogito.explainability.model.Saliency;\n+import org.kie.kogito.explainability.utils.DataUtils;\n+\n+/**\n+ * Global explainer aggregating LIME explanations over a number of inputs by reporting the mean feature importance for\n+ * each feature.\n+ */\n+public class AggregatedLimeExplainer implements GlobalExplainer<CompletableFuture<Map<String, Saliency>>>,\n+                                                ExistingPredictionsGlobalExplainer<CompletableFuture<Map<String, Saliency>>> {\n+\n+    private final LimeExplainer limeExplainer;\n+    private final int sampleSize;\n+\n+    public AggregatedLimeExplainer(LimeExplainer limeExplainer) {\n+        this(limeExplainer, 100);\n+    }\n+\n+    public AggregatedLimeExplainer(LimeExplainer limeExplainer, int sampleSize) {\n+        this.limeExplainer = limeExplainer;\n+        this.sampleSize = sampleSize;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Map<String, Saliency>> explain(PredictionProvider model, PredictionProviderMetadata metadata) {\n+        List<PredictionInput> inputs = metadata.getDataDistribution().sample(sampleSize); // sample inputs from the data distribution\n+\n+        return model.predictAsync(inputs) // execute the model on the inputs\n+                .thenApply(os -> DataUtils.getPredictions(inputs, os)) // generate predictions from inputs and outputs\n+                .thenCompose(ps -> explain(model, ps)); // explain predictions\n+    }\n+\n+    @Override\n+    public CompletableFuture<Map<String, Saliency>> explain(PredictionProvider model, Collection<Prediction> predictions) {\n+        return CompletableFuture.completedFuture(predictions)\n+                .thenApply(p -> p.stream().map(prediction -> limeExplainer.explainAsync(prediction, model)) // extract saliency for each input\n+                        .map(CompletableFuture::join) // aggregate all the saliencies\n+                        .reduce(Collections.emptyMap(), (m1, m2) -> Saliency.merge(List.of(m1, m2)))); // merge all the saliencies together\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c2af39d9536e62bd2b8a5b9f6b39ff3b290d175a"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU5NDI1OA==", "bodyText": "yes, they are tested in AggregatedLimeExplainerTest.", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r527594258", "createdAt": "2020-11-20T10:23:40Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/lime/AggregatedLimeExplainer.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.global.lime;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.kie.kogito.explainability.global.ExistingPredictionsGlobalExplainer;\n+import org.kie.kogito.explainability.global.GlobalExplainer;\n+import org.kie.kogito.explainability.local.lime.LimeExplainer;\n+import org.kie.kogito.explainability.model.Prediction;\n+import org.kie.kogito.explainability.model.PredictionInput;\n+import org.kie.kogito.explainability.model.PredictionProvider;\n+import org.kie.kogito.explainability.model.PredictionProviderMetadata;\n+import org.kie.kogito.explainability.model.Saliency;\n+import org.kie.kogito.explainability.utils.DataUtils;\n+\n+/**\n+ * Global explainer aggregating LIME explanations over a number of inputs by reporting the mean feature importance for\n+ * each feature.\n+ */\n+public class AggregatedLimeExplainer implements GlobalExplainer<CompletableFuture<Map<String, Saliency>>>,\n+                                                ExistingPredictionsGlobalExplainer<CompletableFuture<Map<String, Saliency>>> {\n+\n+    private final LimeExplainer limeExplainer;\n+    private final int sampleSize;\n+\n+    public AggregatedLimeExplainer(LimeExplainer limeExplainer) {\n+        this(limeExplainer, 100);\n+    }\n+\n+    public AggregatedLimeExplainer(LimeExplainer limeExplainer, int sampleSize) {\n+        this.limeExplainer = limeExplainer;\n+        this.sampleSize = sampleSize;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Map<String, Saliency>> explain(PredictionProvider model, PredictionProviderMetadata metadata) {\n+        List<PredictionInput> inputs = metadata.getDataDistribution().sample(sampleSize); // sample inputs from the data distribution\n+\n+        return model.predictAsync(inputs) // execute the model on the inputs\n+                .thenApply(os -> DataUtils.getPredictions(inputs, os)) // generate predictions from inputs and outputs\n+                .thenCompose(ps -> explain(model, ps)); // explain predictions\n+    }\n+\n+    @Override\n+    public CompletableFuture<Map<String, Saliency>> explain(PredictionProvider model, Collection<Prediction> predictions) {\n+        return CompletableFuture.completedFuture(predictions)\n+                .thenApply(p -> p.stream().map(prediction -> limeExplainer.explainAsync(prediction, model)) // extract saliency for each input\n+                        .map(CompletableFuture::join) // aggregate all the saliencies\n+                        .reduce(Collections.emptyMap(), (m1, m2) -> Saliency.merge(List.of(m1, m2)))); // merge all the saliencies together\n+    }\n+}", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzU1MjY0NA=="}, "originalCommit": {"oid": "c2af39d9536e62bd2b8a5b9f6b39ff3b290d175a"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTEzMzc4OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/utils/DataUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDozMjo0MFrOH4HfjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMzoxNTowOVrOH4M8cA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYwNTA2OQ==", "bodyText": "If I'm not wrong, according to the doc if you do value.size() - 1 the last value is never picked\nhttps://docs.oracle.com/javase/8/docs/api/java/util/Random.html#ints-long-int-int-", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r528605069", "createdAt": "2020-11-23T10:32:40Z", "author": {"login": "r00ta"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/utils/DataUtils.java", "diffHunk": "@@ -408,4 +400,32 @@ private static void linearizeFeature(List<Feature> flattenedFeatures, Feature f)\n             flattenedFeatures.add(f);\n         }\n     }\n+\n+    /**\n+     * Build Predictions from PredictionInputs and PredictionOutputs.\n+     *\n+     * @param inputs prediction inputs\n+     * @param os     prediction outputs\n+     * @return a list of predictions\n+     */\n+    public static List<Prediction> getPredictions(List<PredictionInput> inputs, List<PredictionOutput> os) {\n+        return IntStream.range(0, os.size())\n+                .mapToObj(i -> new Prediction(inputs.get(i), os.get(i))).collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * Sample (with replacement) from a list of values.\n+     *\n+     * @param values     the list to sample from\n+     * @param sampleSize the no. of samples to draw\n+     * @param random     a random instance\n+     * @param <T>        the type of values to sample\n+     * @return a list of sampled values\n+     */\n+    public static <T> List<T> sampleWithReplacement(List<T> values, int sampleSize, Random random) {\n+        return random\n+                .ints(sampleSize, 0, values.size() - 1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "453560cc4ef9351f143e723a3f7740a9d975668c"}, "originalPosition": 82}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODY5NDM4NA==", "bodyText": "correct, thanks for spotting it out!", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r528694384", "createdAt": "2020-11-23T13:15:09Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/utils/DataUtils.java", "diffHunk": "@@ -408,4 +400,32 @@ private static void linearizeFeature(List<Feature> flattenedFeatures, Feature f)\n             flattenedFeatures.add(f);\n         }\n     }\n+\n+    /**\n+     * Build Predictions from PredictionInputs and PredictionOutputs.\n+     *\n+     * @param inputs prediction inputs\n+     * @param os     prediction outputs\n+     * @return a list of predictions\n+     */\n+    public static List<Prediction> getPredictions(List<PredictionInput> inputs, List<PredictionOutput> os) {\n+        return IntStream.range(0, os.size())\n+                .mapToObj(i -> new Prediction(inputs.get(i), os.get(i))).collect(Collectors.toList());\n+    }\n+\n+    /**\n+     * Sample (with replacement) from a list of values.\n+     *\n+     * @param values     the list to sample from\n+     * @param sampleSize the no. of samples to draw\n+     * @param random     a random instance\n+     * @param <T>        the type of values to sample\n+     * @return a list of sampled values\n+     */\n+    public static <T> List<T> sampleWithReplacement(List<T> values, int sampleSize, Random random) {\n+        return random\n+                .ints(sampleSize, 0, values.size() - 1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYwNTA2OQ=="}, "originalCommit": {"oid": "453560cc4ef9351f143e723a3f7740a9d975668c"}, "originalPosition": 82}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTE0NTU4OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/NumericFeatureDistribution.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDozNTo0MVrOH4Hmig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxNDo0NDoxNVrOH4QgsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYwNjg1OA==", "bodyText": "Arrays.asList(doubles) is enought isnt't?", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r528606858", "createdAt": "2020-11-23T10:35:41Z", "author": {"login": "r00ta"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/NumericFeatureDistribution.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.security.SecureRandom;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.stream.Collectors;\n+\n+import org.kie.kogito.explainability.utils.DataUtils;\n+\n+/**\n+ * Numeric feature distribution based on {@code double[]}.\n+ */\n+public class NumericFeatureDistribution implements FeatureDistribution {\n+\n+    private final Feature feature;\n+    private final double[] doubles;\n+    private final Random random;\n+\n+    public NumericFeatureDistribution(Feature feature, double[] doubles) {\n+        this(feature, doubles, new SecureRandom());\n+    }\n+\n+    public NumericFeatureDistribution(Feature feature, double[] doubles, Random random) {\n+        this.feature = feature;\n+        this.doubles = doubles;\n+        this.random = random;\n+    }\n+\n+    @Override\n+    public Feature getFeature() {\n+        return feature;\n+    }\n+\n+    @Override\n+    public Value<?> sample() {\n+        return sample(1).get(0);\n+    }\n+\n+    @Override\n+    public List<Value<?>> sample(int sampleSize) {\n+        return DataUtils.sampleWithReplacement(toValuesList(), sampleSize, random);\n+    }\n+\n+    private List<Value<?>> toValuesList() {\n+        return Arrays.stream(doubles).boxed().map(Value::new).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "453560cc4ef9351f143e723a3f7740a9d975668c"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwODMzMw==", "bodyText": "this is used to map a double[] into a List<Value<Double>>, it seems to me it's needed.", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r528708333", "createdAt": "2020-11-23T13:38:02Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/NumericFeatureDistribution.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.security.SecureRandom;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.stream.Collectors;\n+\n+import org.kie.kogito.explainability.utils.DataUtils;\n+\n+/**\n+ * Numeric feature distribution based on {@code double[]}.\n+ */\n+public class NumericFeatureDistribution implements FeatureDistribution {\n+\n+    private final Feature feature;\n+    private final double[] doubles;\n+    private final Random random;\n+\n+    public NumericFeatureDistribution(Feature feature, double[] doubles) {\n+        this(feature, doubles, new SecureRandom());\n+    }\n+\n+    public NumericFeatureDistribution(Feature feature, double[] doubles, Random random) {\n+        this.feature = feature;\n+        this.doubles = doubles;\n+        this.random = random;\n+    }\n+\n+    @Override\n+    public Feature getFeature() {\n+        return feature;\n+    }\n+\n+    @Override\n+    public Value<?> sample() {\n+        return sample(1).get(0);\n+    }\n+\n+    @Override\n+    public List<Value<?>> sample(int sampleSize) {\n+        return DataUtils.sampleWithReplacement(toValuesList(), sampleSize, random);\n+    }\n+\n+    private List<Value<?>> toValuesList() {\n+        return Arrays.stream(doubles).boxed().map(Value::new).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYwNjg1OA=="}, "originalCommit": {"oid": "453560cc4ef9351f143e723a3f7740a9d975668c"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODc1MjgxNw==", "bodyText": "my bad, your're right", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r528752817", "createdAt": "2020-11-23T14:44:15Z", "author": {"login": "r00ta"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/NumericFeatureDistribution.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.security.SecureRandom;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.stream.Collectors;\n+\n+import org.kie.kogito.explainability.utils.DataUtils;\n+\n+/**\n+ * Numeric feature distribution based on {@code double[]}.\n+ */\n+public class NumericFeatureDistribution implements FeatureDistribution {\n+\n+    private final Feature feature;\n+    private final double[] doubles;\n+    private final Random random;\n+\n+    public NumericFeatureDistribution(Feature feature, double[] doubles) {\n+        this(feature, doubles, new SecureRandom());\n+    }\n+\n+    public NumericFeatureDistribution(Feature feature, double[] doubles, Random random) {\n+        this.feature = feature;\n+        this.doubles = doubles;\n+        this.random = random;\n+    }\n+\n+    @Override\n+    public Feature getFeature() {\n+        return feature;\n+    }\n+\n+    @Override\n+    public Value<?> sample() {\n+        return sample(1).get(0);\n+    }\n+\n+    @Override\n+    public List<Value<?>> sample(int sampleSize) {\n+        return DataUtils.sampleWithReplacement(toValuesList(), sampleSize, random);\n+    }\n+\n+    private List<Value<?>> toValuesList() {\n+        return Arrays.stream(doubles).boxed().map(Value::new).collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYwNjg1OA=="}, "originalCommit": {"oid": "453560cc4ef9351f143e723a3f7740a9d975668c"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxNTE4Njc2OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/model/PredictionInputsDataDistributionTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMDo0Njo0NFrOH4H_dw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QxMzozOTowNFrOH4N1Mg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYxMzIzOQ==", "bodyText": "Are these two tests covering the same scenario?", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r528613239", "createdAt": "2020-11-23T10:46:44Z", "author": {"login": "r00ta"}, "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/model/PredictionInputsDataDistributionTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.explainability.TestUtils;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class PredictionInputsDataDistributionTest {\n+\n+    @Test\n+    void testSample() {\n+        List<PredictionInput> inputs = new ArrayList<>(3);\n+        inputs.add(new PredictionInput(List.of(TestUtils.getMockedTextFeature(\"foo\"))));\n+        inputs.add(new PredictionInput(List.of(TestUtils.getMockedTextFeature(\"bar\"))));\n+        inputs.add(new PredictionInput(List.of(TestUtils.getMockedTextFeature(\"asd\"))));\n+        PredictionInputsDataDistribution predictionInputsDataDistribution = new PredictionInputsDataDistribution(inputs);\n+        PredictionInput sample = predictionInputsDataDistribution.sample();\n+        assertNotNull(sample);\n+        assertTrue(inputs.contains(sample));\n+    }\n+\n+    @Test\n+    void testSamples() {\n+        List<PredictionInput> inputs = new ArrayList<>(3);\n+        inputs.add(new PredictionInput(List.of(TestUtils.getMockedTextFeature(\"foo\"))));\n+        inputs.add(new PredictionInput(List.of(TestUtils.getMockedTextFeature(\"bar\"))));\n+        inputs.add(new PredictionInput(List.of(TestUtils.getMockedTextFeature(\"asd\"))));\n+        PredictionInputsDataDistribution predictionInputsDataDistribution = new PredictionInputsDataDistribution(inputs);\n+        assertEquals(3, predictionInputsDataDistribution.getAllSamples().size());\n+        List<PredictionInput> samples = predictionInputsDataDistribution.sample(2);\n+        assertNotNull(samples);\n+        assertEquals(2, samples.size());\n+        for (PredictionInput sample : samples) {\n+            assertTrue(inputs.contains(sample));\n+        }\n+    }\n+\n+    @Test\n+    void testLargerSamples() {\n+        List<PredictionInput> inputs = new ArrayList<>(3);\n+        inputs.add(new PredictionInput(List.of(TestUtils.getMockedTextFeature(\"foo\"))));\n+        inputs.add(new PredictionInput(List.of(TestUtils.getMockedTextFeature(\"bar\"))));\n+        inputs.add(new PredictionInput(List.of(TestUtils.getMockedTextFeature(\"asd\"))));\n+        PredictionInputsDataDistribution predictionInputsDataDistribution = new PredictionInputsDataDistribution(inputs);\n+        List<PredictionInput> samples = predictionInputsDataDistribution.sample(12);\n+        assertNotNull(samples);\n+        assertEquals(12, samples.size());\n+        for (PredictionInput sample : samples) {\n+            assertTrue(inputs.contains(sample));\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "453560cc4ef9351f143e723a3f7740a9d975668c"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODcwODkxNA==", "bodyText": "the second one covers the case for the sampleSize being bigger than the actual underlying data distribution size.", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r528708914", "createdAt": "2020-11-23T13:39:04Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/model/PredictionInputsDataDistributionTest.java", "diffHunk": "@@ -0,0 +1,90 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Test;\n+import org.kie.kogito.explainability.TestUtils;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+class PredictionInputsDataDistributionTest {\n+\n+    @Test\n+    void testSample() {\n+        List<PredictionInput> inputs = new ArrayList<>(3);\n+        inputs.add(new PredictionInput(List.of(TestUtils.getMockedTextFeature(\"foo\"))));\n+        inputs.add(new PredictionInput(List.of(TestUtils.getMockedTextFeature(\"bar\"))));\n+        inputs.add(new PredictionInput(List.of(TestUtils.getMockedTextFeature(\"asd\"))));\n+        PredictionInputsDataDistribution predictionInputsDataDistribution = new PredictionInputsDataDistribution(inputs);\n+        PredictionInput sample = predictionInputsDataDistribution.sample();\n+        assertNotNull(sample);\n+        assertTrue(inputs.contains(sample));\n+    }\n+\n+    @Test\n+    void testSamples() {\n+        List<PredictionInput> inputs = new ArrayList<>(3);\n+        inputs.add(new PredictionInput(List.of(TestUtils.getMockedTextFeature(\"foo\"))));\n+        inputs.add(new PredictionInput(List.of(TestUtils.getMockedTextFeature(\"bar\"))));\n+        inputs.add(new PredictionInput(List.of(TestUtils.getMockedTextFeature(\"asd\"))));\n+        PredictionInputsDataDistribution predictionInputsDataDistribution = new PredictionInputsDataDistribution(inputs);\n+        assertEquals(3, predictionInputsDataDistribution.getAllSamples().size());\n+        List<PredictionInput> samples = predictionInputsDataDistribution.sample(2);\n+        assertNotNull(samples);\n+        assertEquals(2, samples.size());\n+        for (PredictionInput sample : samples) {\n+            assertTrue(inputs.contains(sample));\n+        }\n+    }\n+\n+    @Test\n+    void testLargerSamples() {\n+        List<PredictionInput> inputs = new ArrayList<>(3);\n+        inputs.add(new PredictionInput(List.of(TestUtils.getMockedTextFeature(\"foo\"))));\n+        inputs.add(new PredictionInput(List.of(TestUtils.getMockedTextFeature(\"bar\"))));\n+        inputs.add(new PredictionInput(List.of(TestUtils.getMockedTextFeature(\"asd\"))));\n+        PredictionInputsDataDistribution predictionInputsDataDistribution = new PredictionInputsDataDistribution(inputs);\n+        List<PredictionInput> samples = predictionInputsDataDistribution.sample(12);\n+        assertNotNull(samples);\n+        assertEquals(12, samples.size());\n+        for (PredictionInput sample : samples) {\n+            assertTrue(inputs.contains(sample));\n+        }\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODYxMzIzOQ=="}, "originalCommit": {"oid": "453560cc4ef9351f143e723a3f7740a9d975668c"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMxOTM2NjM4OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/utils/DataUtilsTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwNzo1NTozM1rOH4v9rA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNFQwODowMTo1NFrOH4wLgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI2ODE0MA==", "bodyText": "It would be better to make this deterministic, wdyt?\nyou might want to test if sampleWithReplacement works when values.size() < sampleSize for example", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r529268140", "createdAt": "2020-11-24T07:55:33Z", "author": {"login": "r00ta"}, "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/utils/DataUtilsTest.java", "diffHunk": "@@ -400,4 +401,14 @@ void testDropLinearizedFeature() {\n             assertNotEquals(source, newFeature);\n         }\n     }\n+\n+    @Test\n+    void testSampleWithReplacement() {\n+        List<Double> values = Arrays.stream(DataUtils.generateData(0, 1, 100, random)).boxed().collect(Collectors.toList());\n+        int sampleSize = random.nextInt(100);\n+        List<Double> samples = DataUtils.sampleWithReplacement(values, sampleSize, random);\n+        assertNotNull(samples);\n+        assertEquals(sampleSize, samples.size());\n+        assertThat(values).contains(samples.get(random.nextInt(sampleSize - 1)));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a9c2e8c527e3db2e3335582d0bc44f9dfd30d198"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI3MTY4MA==", "bodyText": "sure, makes sense.", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r529271680", "createdAt": "2020-11-24T08:01:54Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/test/java/org/kie/kogito/explainability/utils/DataUtilsTest.java", "diffHunk": "@@ -400,4 +401,14 @@ void testDropLinearizedFeature() {\n             assertNotEquals(source, newFeature);\n         }\n     }\n+\n+    @Test\n+    void testSampleWithReplacement() {\n+        List<Double> values = Arrays.stream(DataUtils.generateData(0, 1, 100, random)).boxed().collect(Collectors.toList());\n+        int sampleSize = random.nextInt(100);\n+        List<Double> samples = DataUtils.sampleWithReplacement(values, sampleSize, random);\n+        assertNotNull(samples);\n+        assertEquals(sampleSize, samples.size());\n+        assertThat(values).contains(samples.get(random.nextInt(sampleSize - 1)));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyOTI2ODE0MA=="}, "originalCommit": {"oid": "a9c2e8c527e3db2e3335582d0bc44f9dfd30d198"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMyNTU1OTg2OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/NumericFeatureDistribution.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQwOTo1ODo1NVrOH5rpqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMDoxMDoyN1rOH5sH8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI0NjA1OA==", "bodyText": "I was wondering: since the array doubles is private and when it is used it's always converted to a list, is it better to convert it to a List<Value<?>> in the constructor so that it's done only once and not repeated every time a method is called?", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r530246058", "createdAt": "2020-11-25T09:58:55Z", "author": {"login": "r00ta"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/NumericFeatureDistribution.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.security.SecureRandom;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.stream.Collectors;\n+\n+import org.kie.kogito.explainability.utils.DataUtils;\n+\n+/**\n+ * Numeric feature distribution based on {@code double[]}.\n+ */\n+public class NumericFeatureDistribution implements FeatureDistribution {\n+\n+    private final Feature feature;\n+    private final double[] doubles;\n+    private final Random random;\n+\n+    public NumericFeatureDistribution(Feature feature, double[] doubles) {\n+        this(feature, doubles, new SecureRandom());\n+    }\n+\n+    public NumericFeatureDistribution(Feature feature, double[] doubles, Random random) {\n+        this.feature = feature;\n+        this.doubles = doubles;\n+        this.random = random;\n+    }\n+\n+    @Override\n+    public Feature getFeature() {\n+        return feature;\n+    }\n+\n+    @Override\n+    public Value<?> sample() {\n+        return sample(1).get(0);\n+    }\n+\n+    @Override\n+    public List<Value<?>> sample(int sampleSize) {\n+        return DataUtils.sampleWithReplacement(toValuesList(doubles), sampleSize, random);\n+    }\n+\n+    private List<Value<?>> toValuesList(double[] doubles) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fcd69cc92fe54f4fbba08bb93dfbcf6453fcbe41"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI1MzgxMQ==", "bodyText": "+1", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r530253811", "createdAt": "2020-11-25T10:10:27Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/NumericFeatureDistribution.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.security.SecureRandom;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+import java.util.stream.Collectors;\n+\n+import org.kie.kogito.explainability.utils.DataUtils;\n+\n+/**\n+ * Numeric feature distribution based on {@code double[]}.\n+ */\n+public class NumericFeatureDistribution implements FeatureDistribution {\n+\n+    private final Feature feature;\n+    private final double[] doubles;\n+    private final Random random;\n+\n+    public NumericFeatureDistribution(Feature feature, double[] doubles) {\n+        this(feature, doubles, new SecureRandom());\n+    }\n+\n+    public NumericFeatureDistribution(Feature feature, double[] doubles, Random random) {\n+        this.feature = feature;\n+        this.doubles = doubles;\n+        this.random = random;\n+    }\n+\n+    @Override\n+    public Feature getFeature() {\n+        return feature;\n+    }\n+\n+    @Override\n+    public Value<?> sample() {\n+        return sample(1).get(0);\n+    }\n+\n+    @Override\n+    public List<Value<?>> sample(int sampleSize) {\n+        return DataUtils.sampleWithReplacement(toValuesList(doubles), sampleSize, random);\n+    }\n+\n+    private List<Value<?>> toValuesList(double[] doubles) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDI0NjA1OA=="}, "originalCommit": {"oid": "fcd69cc92fe54f4fbba08bb93dfbcf6453fcbe41"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDcyNDg5OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/lime/AggregatedLimeExplainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNDo1NjoxOFrOH7BIlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMDo0NzowNFrOH9VFZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY0NjYxNQ==", "bodyText": "Please create a ticket to review this code, we should be able to compose requests without the CompletableFuture::join", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r531646615", "createdAt": "2020-11-27T14:56:18Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/lime/AggregatedLimeExplainer.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.global.lime;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.kie.kogito.explainability.global.ExistingPredictionsGlobalExplainer;\n+import org.kie.kogito.explainability.global.GlobalExplainer;\n+import org.kie.kogito.explainability.local.lime.LimeExplainer;\n+import org.kie.kogito.explainability.model.Prediction;\n+import org.kie.kogito.explainability.model.PredictionInput;\n+import org.kie.kogito.explainability.model.PredictionProvider;\n+import org.kie.kogito.explainability.model.PredictionProviderMetadata;\n+import org.kie.kogito.explainability.model.Saliency;\n+import org.kie.kogito.explainability.utils.DataUtils;\n+\n+/**\n+ * Global explainer aggregating LIME explanations over a number of inputs by reporting the mean feature importance for\n+ * each feature.\n+ */\n+public class AggregatedLimeExplainer implements GlobalExplainer<CompletableFuture<Map<String, Saliency>>>,\n+                                                ExistingPredictionsGlobalExplainer<CompletableFuture<Map<String, Saliency>>> {\n+\n+    private static final int DEFAULT_SAMPLE_SIZE = 100;\n+\n+    private final LimeExplainer limeExplainer;\n+    private final int sampleSize;\n+\n+    public AggregatedLimeExplainer(LimeExplainer limeExplainer) {\n+        this(limeExplainer, DEFAULT_SAMPLE_SIZE);\n+    }\n+\n+    public AggregatedLimeExplainer(LimeExplainer limeExplainer, int sampleSize) {\n+        this.limeExplainer = limeExplainer;\n+        this.sampleSize = sampleSize;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Map<String, Saliency>> explain(PredictionProvider model, PredictionProviderMetadata metadata) {\n+        List<PredictionInput> inputs = metadata.getDataDistribution().sample(sampleSize); // sample inputs from the data distribution\n+\n+        return model.predictAsync(inputs) // execute the model on the inputs\n+                .thenApply(os -> DataUtils.getPredictions(inputs, os)) // generate predictions from inputs and outputs\n+                .thenCompose(ps -> explain(model, ps)); // explain predictions\n+    }\n+\n+    @Override\n+    public CompletableFuture<Map<String, Saliency>> explain(PredictionProvider model, Collection<Prediction> predictions) {\n+        return CompletableFuture.completedFuture(predictions)\n+                .thenApply(p -> p.stream().map(prediction -> limeExplainer.explainAsync(prediction, model)) // extract saliency for each input\n+                        .map(CompletableFuture::join) // aggregate all the saliencies\n+                        .reduce(Collections.emptyMap(), (m1, m2) -> Saliency.merge(List.of(m1, m2)))); // merge all the saliencies together", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c45c4b2d0b9778c975f6e7793f19b67c62e27d3"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA3MDYzMQ==", "bodyText": "I've created https://issues.redhat.com/browse/FAI-334 to track this.", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r534070631", "createdAt": "2020-12-02T10:47:04Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/lime/AggregatedLimeExplainer.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.global.lime;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.kie.kogito.explainability.global.ExistingPredictionsGlobalExplainer;\n+import org.kie.kogito.explainability.global.GlobalExplainer;\n+import org.kie.kogito.explainability.local.lime.LimeExplainer;\n+import org.kie.kogito.explainability.model.Prediction;\n+import org.kie.kogito.explainability.model.PredictionInput;\n+import org.kie.kogito.explainability.model.PredictionProvider;\n+import org.kie.kogito.explainability.model.PredictionProviderMetadata;\n+import org.kie.kogito.explainability.model.Saliency;\n+import org.kie.kogito.explainability.utils.DataUtils;\n+\n+/**\n+ * Global explainer aggregating LIME explanations over a number of inputs by reporting the mean feature importance for\n+ * each feature.\n+ */\n+public class AggregatedLimeExplainer implements GlobalExplainer<CompletableFuture<Map<String, Saliency>>>,\n+                                                ExistingPredictionsGlobalExplainer<CompletableFuture<Map<String, Saliency>>> {\n+\n+    private static final int DEFAULT_SAMPLE_SIZE = 100;\n+\n+    private final LimeExplainer limeExplainer;\n+    private final int sampleSize;\n+\n+    public AggregatedLimeExplainer(LimeExplainer limeExplainer) {\n+        this(limeExplainer, DEFAULT_SAMPLE_SIZE);\n+    }\n+\n+    public AggregatedLimeExplainer(LimeExplainer limeExplainer, int sampleSize) {\n+        this.limeExplainer = limeExplainer;\n+        this.sampleSize = sampleSize;\n+    }\n+\n+    @Override\n+    public CompletableFuture<Map<String, Saliency>> explain(PredictionProvider model, PredictionProviderMetadata metadata) {\n+        List<PredictionInput> inputs = metadata.getDataDistribution().sample(sampleSize); // sample inputs from the data distribution\n+\n+        return model.predictAsync(inputs) // execute the model on the inputs\n+                .thenApply(os -> DataUtils.getPredictions(inputs, os)) // generate predictions from inputs and outputs\n+                .thenCompose(ps -> explain(model, ps)); // explain predictions\n+    }\n+\n+    @Override\n+    public CompletableFuture<Map<String, Saliency>> explain(PredictionProvider model, Collection<Prediction> predictions) {\n+        return CompletableFuture.completedFuture(predictions)\n+                .thenApply(p -> p.stream().map(prediction -> limeExplainer.explainAsync(prediction, model)) // extract saliency for each input\n+                        .map(CompletableFuture::join) // aggregate all the saliencies\n+                        .reduce(Collections.emptyMap(), (m1, m2) -> Saliency.merge(List.of(m1, m2)))); // merge all the saliencies together", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY0NjYxNQ=="}, "originalCommit": {"oid": "6c45c4b2d0b9778c975f6e7793f19b67c62e27d3"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDczNTkwOnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/lime/AggregatedLimeExplainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNDo1OToyM1rOH7BO8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwOTo0Nzo0NlrOH9SntQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY0ODI0MQ==", "bodyText": "What about review it to use LimeConfig?", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r531648241", "createdAt": "2020-11-27T14:59:23Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/lime/AggregatedLimeExplainer.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.global.lime;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.kie.kogito.explainability.global.ExistingPredictionsGlobalExplainer;\n+import org.kie.kogito.explainability.global.GlobalExplainer;\n+import org.kie.kogito.explainability.local.lime.LimeExplainer;\n+import org.kie.kogito.explainability.model.Prediction;\n+import org.kie.kogito.explainability.model.PredictionInput;\n+import org.kie.kogito.explainability.model.PredictionProvider;\n+import org.kie.kogito.explainability.model.PredictionProviderMetadata;\n+import org.kie.kogito.explainability.model.Saliency;\n+import org.kie.kogito.explainability.utils.DataUtils;\n+\n+/**\n+ * Global explainer aggregating LIME explanations over a number of inputs by reporting the mean feature importance for\n+ * each feature.\n+ */\n+public class AggregatedLimeExplainer implements GlobalExplainer<CompletableFuture<Map<String, Saliency>>>,\n+                                                ExistingPredictionsGlobalExplainer<CompletableFuture<Map<String, Saliency>>> {\n+\n+    private static final int DEFAULT_SAMPLE_SIZE = 100;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c45c4b2d0b9778c975f6e7793f19b67c62e27d3"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDAzMDI2MQ==", "bodyText": "agreed, it'll rely on the underlying LimeExplainer#getLimeConfig() settings.", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r534030261", "createdAt": "2020-12-02T09:47:46Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/lime/AggregatedLimeExplainer.java", "diffHunk": "@@ -0,0 +1,71 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.global.lime;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+\n+import org.kie.kogito.explainability.global.ExistingPredictionsGlobalExplainer;\n+import org.kie.kogito.explainability.global.GlobalExplainer;\n+import org.kie.kogito.explainability.local.lime.LimeExplainer;\n+import org.kie.kogito.explainability.model.Prediction;\n+import org.kie.kogito.explainability.model.PredictionInput;\n+import org.kie.kogito.explainability.model.PredictionProvider;\n+import org.kie.kogito.explainability.model.PredictionProviderMetadata;\n+import org.kie.kogito.explainability.model.Saliency;\n+import org.kie.kogito.explainability.utils.DataUtils;\n+\n+/**\n+ * Global explainer aggregating LIME explanations over a number of inputs by reporting the mean feature importance for\n+ * each feature.\n+ */\n+public class AggregatedLimeExplainer implements GlobalExplainer<CompletableFuture<Map<String, Saliency>>>,\n+                                                ExistingPredictionsGlobalExplainer<CompletableFuture<Map<String, Saliency>>> {\n+\n+    private static final int DEFAULT_SAMPLE_SIZE = 100;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY0ODI0MQ=="}, "originalCommit": {"oid": "6c45c4b2d0b9778c975f6e7793f19b67c62e27d3"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDgxNzcyOnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/ExistingPredictionsGlobalExplainer.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNToyNTozN1rOH7B_qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQxMDo0MzowMlrOH9U7Uw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY2MDcxNQ==", "bodyText": "What about merge this interface with GlobalExplainer and have two different methods explainFromPrediction and explainFromMetadata?\nYou can also default implement explainFromMetadata\n    default public T explainFromMetadata(PredictionProvider model, PredictionProviderMetadata metadata) {\n        List<PredictionInput> inputs = metadata.getDataDistribution().sample(sampleSize); // sample inputs from the data distribution\n\n        return model.predictAsync(inputs) // execute the model on the inputs\n                .thenApply(os -> DataUtils.getPredictions(inputs, os)) // generate predictions from inputs and outputs\n                .thenCompose(ps -> explain(model, ps)); // explain predictions\n    }", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r531660715", "createdAt": "2020-11-27T15:25:37Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/ExistingPredictionsGlobalExplainer.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.global;\n+\n+import java.util.Collection;\n+\n+import org.kie.kogito.explainability.model.Prediction;\n+import org.kie.kogito.explainability.model.PredictionProvider;\n+\n+/**\n+ * A global explainability method that leverages existing predictions (e.g. from historical data) instead of generating\n+ * new ones for the purpose of explainability.\n+ *\n+ * @param <T> the type of global explanation generated\n+ */\n+public interface ExistingPredictionsGlobalExplainer<T> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c45c4b2d0b9778c975f6e7793f19b67c62e27d3"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDA2ODA1MQ==", "bodyText": "agree on unifying the two interfaces, for now I'd not add a default method since we only have two impls, also the PDPExplainer works explicitly with feature distributions independently and would rather not make use of the existing outputs (as the inputs need to be \"crafted\" specifically and outputs need to be recalculated).", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r534068051", "createdAt": "2020-12-02T10:43:02Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/global/ExistingPredictionsGlobalExplainer.java", "diffHunk": "@@ -0,0 +1,39 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.global;\n+\n+import java.util.Collection;\n+\n+import org.kie.kogito.explainability.model.Prediction;\n+import org.kie.kogito.explainability.model.PredictionProvider;\n+\n+/**\n+ * A global explainability method that leverages existing predictions (e.g. from historical data) instead of generating\n+ * new ones for the purpose of explainability.\n+ *\n+ * @param <T> the type of global explanation generated\n+ */\n+public interface ExistingPredictionsGlobalExplainer<T> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY2MDcxNQ=="}, "originalCommit": {"oid": "6c45c4b2d0b9778c975f6e7793f19b67c62e27d3"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMzNDgyMzQ3OnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/PredictionInputsDataDistribution.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNToyNzoyOFrOH7CDGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yN1QxNToyNzoyOFrOH7CDGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMTY2MTU5Mg==", "bodyText": "Please verify if this could throw an index out of bound", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r531661592", "createdAt": "2020-11-27T15:27:28Z", "author": {"login": "danielezonca"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/PredictionInputsDataDistribution.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.security.SecureRandom;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Random;\n+\n+import org.kie.kogito.explainability.utils.DataUtils;\n+\n+/**\n+ * Data distribution based on list of {@code PredictionInputs}.\n+ */\n+public class PredictionInputsDataDistribution implements DataDistribution {\n+\n+    private final List<PredictionInput> inputs;\n+    private final Random random;\n+\n+    public PredictionInputsDataDistribution(List<PredictionInput> inputs) {\n+        this(inputs, new SecureRandom());\n+    }\n+\n+    public PredictionInputsDataDistribution(List<PredictionInput> inputs, Random random) {\n+        this.inputs = Collections.unmodifiableList(inputs);\n+        this.random = random;\n+    }\n+\n+    @Override\n+    public PredictionInput sample() {\n+        return sample(1).get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c45c4b2d0b9778c975f6e7793f19b67c62e27d3"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM0NjQzMzAxOnYy", "diffSide": "RIGHT", "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/IndependentFeaturesDatatDistribution.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQxMzowNDo0MlrOH8rpNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMlQwOToxNTo0NlrOH9RRIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM5MTY2OQ==", "bodyText": "@tteofili sorry I've missed this in the first review, is IndependentFeaturesDatatDistribution a typo? (i.e. should be IndependentFeaturesDataDistribution).\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            public class IndependentFeaturesDatatDistribution implements DataDistribution {\n          \n          \n            \n            public class IndependentFeaturesDataDistribution implements DataDistribution {", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r533391669", "createdAt": "2020-12-01T13:04:42Z", "author": {"login": "ruivieira"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/IndependentFeaturesDatatDistribution.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * Data distribution based on list of {@code FeatureDistributions}.\n+ */\n+public class IndependentFeaturesDatatDistribution implements DataDistribution {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6c45c4b2d0b9778c975f6e7793f19b67c62e27d3"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNDAwODA5OQ==", "bodyText": "thanks a lot Rui for having spotted this \ud83d\udc4d", "url": "https://github.com/kiegroup/kogito-apps/pull/486#discussion_r534008099", "createdAt": "2020-12-02T09:15:46Z", "author": {"login": "tteofili"}, "path": "explainability/explainability-core/src/main/java/org/kie/kogito/explainability/model/IndependentFeaturesDatatDistribution.java", "diffHunk": "@@ -0,0 +1,81 @@\n+/*\n+ * Copyright 2020 Red Hat, Inc. and/or its affiliates.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.kie.kogito.explainability.model;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import com.google.common.collect.Sets;\n+\n+/**\n+ * Data distribution based on list of {@code FeatureDistributions}.\n+ */\n+public class IndependentFeaturesDatatDistribution implements DataDistribution {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzM5MTY2OQ=="}, "originalCommit": {"oid": "6c45c4b2d0b9778c975f6e7793f19b67c62e27d3"}, "originalPosition": 29}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1138, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}