{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzMzc4NjU1", "number": 370, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwODowMToyMVrOEVto1g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwODowMToyMVrOEVto1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjAzMjg2OnYy", "diffSide": "RIGHT", "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/api/ExecutionsApiV1.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwODowMToyMVrOG8nwfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQwOTozNTozOFrOG8r45w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIxOTEzMg==", "bodyText": "add TODO comment to replace null null?", "url": "https://github.com/kiegroup/kogito-apps/pull/370#discussion_r466219132", "createdAt": "2020-08-06T08:01:21Z", "author": {"login": "r00ta"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/api/ExecutionsApiV1.java", "diffHunk": "@@ -142,4 +146,52 @@ private OffsetDateTime parseParameterDate(String date) {\n \n         return ZonedDateTime.parse(date, DateTimeFormatter.ISO_OFFSET_DATE_TIME).toOffsetDateTime();\n     }\n+\n+    /**\n+     * Gets the model associated with an execution.\n+     *\n+     * @param executionId The execution ID.\n+     * @return The model associated with the execution.\n+     */\n+    @GET\n+    @Path(\"/{executionId}/model\")\n+    @APIResponses(value = {\n+            @APIResponse(description = \"Gets the model associated with an execution.\", responseCode = \"200\", content = @Content(mediaType = MediaType.TEXT_PLAIN, schema = @Schema(type = SchemaType.STRING))),\n+            @APIResponse(description = \"Bad Request\", responseCode = \"400\", content = @Content(mediaType = MediaType.TEXT_PLAIN))\n+    }\n+    )\n+    @Operation(summary = \"Gets the model associated with an execution.\")\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public Response getModel(\n+            @Parameter(\n+                    name = \"executionId\",\n+                    description = \"The execution ID.\",\n+                    required = true,\n+                    schema = @Schema(implementation = String.class)\n+            ) @PathParam(\"executionId\") String executionId) {\n+        return handleModelRequest(executionId);\n+    }\n+\n+    private Response handleModelRequest(String executionId) {\n+        return retrieveModel(executionId)\n+                .map(definition -> Response.ok(definition).build())\n+                .orElseGet(() -> Response.status(Response.Status.BAD_REQUEST.getStatusCode()).build());\n+    }\n+\n+    private Optional<String> retrieveModel(String executionId) {\n+        try {\n+            Optional<Decision> decision = retrieveDecision(executionId);\n+            return decision.map(d -> executionService.getModelById(ModelIdCreator.makeIdentifier(null, null, null, d.getExecutedModelName(), d.getExecutedModelNamespace())));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "afbce0d3afd028b0fcf94521240d72c682c09ac7"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjI4NjgyMw==", "bodyText": "Done (in new commit).", "url": "https://github.com/kiegroup/kogito-apps/pull/370#discussion_r466286823", "createdAt": "2020-08-06T09:35:38Z", "author": {"login": "manstis"}, "path": "trusty/trusty-service/src/main/java/org/kie/kogito/trusty/service/api/ExecutionsApiV1.java", "diffHunk": "@@ -142,4 +146,52 @@ private OffsetDateTime parseParameterDate(String date) {\n \n         return ZonedDateTime.parse(date, DateTimeFormatter.ISO_OFFSET_DATE_TIME).toOffsetDateTime();\n     }\n+\n+    /**\n+     * Gets the model associated with an execution.\n+     *\n+     * @param executionId The execution ID.\n+     * @return The model associated with the execution.\n+     */\n+    @GET\n+    @Path(\"/{executionId}/model\")\n+    @APIResponses(value = {\n+            @APIResponse(description = \"Gets the model associated with an execution.\", responseCode = \"200\", content = @Content(mediaType = MediaType.TEXT_PLAIN, schema = @Schema(type = SchemaType.STRING))),\n+            @APIResponse(description = \"Bad Request\", responseCode = \"400\", content = @Content(mediaType = MediaType.TEXT_PLAIN))\n+    }\n+    )\n+    @Operation(summary = \"Gets the model associated with an execution.\")\n+    @Produces(MediaType.TEXT_PLAIN)\n+    public Response getModel(\n+            @Parameter(\n+                    name = \"executionId\",\n+                    description = \"The execution ID.\",\n+                    required = true,\n+                    schema = @Schema(implementation = String.class)\n+            ) @PathParam(\"executionId\") String executionId) {\n+        return handleModelRequest(executionId);\n+    }\n+\n+    private Response handleModelRequest(String executionId) {\n+        return retrieveModel(executionId)\n+                .map(definition -> Response.ok(definition).build())\n+                .orElseGet(() -> Response.status(Response.Status.BAD_REQUEST.getStatusCode()).build());\n+    }\n+\n+    private Optional<String> retrieveModel(String executionId) {\n+        try {\n+            Optional<Decision> decision = retrieveDecision(executionId);\n+            return decision.map(d -> executionService.getModelById(ModelIdCreator.makeIdentifier(null, null, null, d.getExecutedModelName(), d.getExecutedModelNamespace())));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjIxOTEzMg=="}, "originalCommit": {"oid": "afbce0d3afd028b0fcf94521240d72c682c09ac7"}, "originalPosition": 61}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 882, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}