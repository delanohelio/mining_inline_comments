{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE2ODM3Mzg2", "number": 215, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODo1NjozMFrOD7-UWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzowMjowMlrOD8Dfww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjEzNTk1OnYy", "diffSide": "RIGHT", "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/scheduler/BaseTimerJobScheduler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODo1NjozMFrOGUoC8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODo1NjozMFrOGUoC8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI4MDgxOA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                 * Flag to allow anf force a job with expirationTime in the past to be executed immediately. If false and\n          \n          \n            \n                 * exception will be thrown.\n          \n          \n            \n                 * Flag to allow and force a job with expirationTime in the past to be executed immediately. If false an\n          \n          \n            \n                 * exception will be thrown.", "url": "https://github.com/kiegroup/kogito-apps/pull/215#discussion_r424280818", "createdAt": "2020-05-13T08:56:30Z", "author": {"login": "radtriste"}, "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/scheduler/BaseTimerJobScheduler.java", "diffHunk": "@@ -55,6 +55,13 @@\n     @ConfigProperty(name = \"kogito.jobs-service.maxIntervalLimitToRetryMillis\")\n     long maxIntervalLimitToRetryMillis;\n \n+    /**\n+     * Flag to allow anf force a job with expirationTime in the past to be executed immediately. If false and\n+     * exception will be thrown.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3e4eaf617793a216cba89a6e7548e75ddf964c7"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjE0OTEyOnYy", "diffSide": "RIGHT", "path": "jobs-service/src/main/resources/application.properties", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTowMDowMVrOGUoLhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNTo0MjozNlrOGU32XA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI4MzAxMg==", "bodyText": "should we enable it by default ?", "url": "https://github.com/kiegroup/kogito-apps/pull/215#discussion_r424283012", "createdAt": "2020-05-13T09:00:01Z", "author": {"login": "radtriste"}, "path": "jobs-service/src/main/resources/application.properties", "diffHunk": "@@ -60,6 +60,7 @@ kogito.jobs-service.backoffRetryMillis=1000\n kogito.service.url=http://localhost:8080\n kogito.jobs-service.schedulerChunkInMinutes=10\n kogito.jobs-service.loadJobIntervalInMinutes=10\n+kogito.jobs-service.forceExecuteExpiredJobs=true", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3e4eaf617793a216cba89a6e7548e75ddf964c7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM4MjU3MA==", "bodyText": "we need to decide it, to keep the jbpm behavior it should be true, but we can change with configuration, so up to us to define the default value, wdyt?", "url": "https://github.com/kiegroup/kogito-apps/pull/215#discussion_r424382570", "createdAt": "2020-05-13T12:02:49Z", "author": {"login": "tiagodolphine"}, "path": "jobs-service/src/main/resources/application.properties", "diffHunk": "@@ -60,6 +60,7 @@ kogito.jobs-service.backoffRetryMillis=1000\n kogito.service.url=http://localhost:8080\n kogito.jobs-service.schedulerChunkInMinutes=10\n kogito.jobs-service.loadJobIntervalInMinutes=10\n+kogito.jobs-service.forceExecuteExpiredJobs=true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI4MzAxMg=="}, "originalCommit": {"oid": "d3e4eaf617793a216cba89a6e7548e75ddf964c7"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDUzOTc0MA==", "bodyText": "let's keep jbpm behavior so we don't confuse the users", "url": "https://github.com/kiegroup/kogito-apps/pull/215#discussion_r424539740", "createdAt": "2020-05-13T15:42:36Z", "author": {"login": "radtriste"}, "path": "jobs-service/src/main/resources/application.properties", "diffHunk": "@@ -60,6 +60,7 @@ kogito.jobs-service.backoffRetryMillis=1000\n kogito.service.url=http://localhost:8080\n kogito.jobs-service.schedulerChunkInMinutes=10\n kogito.jobs-service.loadJobIntervalInMinutes=10\n+kogito.jobs-service.forceExecuteExpiredJobs=true", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI4MzAxMg=="}, "originalCommit": {"oid": "d3e4eaf617793a216cba89a6e7548e75ddf964c7"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjE2MTIyOnYy", "diffSide": "RIGHT", "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/scheduler/JobSchedulerManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTowMzowNlrOGUoTNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMjowMTozOVrOGUuODQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI4NDk4MQ==", "bodyText": "only minus one day ? this is quite arbitrary ... shouldn't that be also configurable ?", "url": "https://github.com/kiegroup/kogito-apps/pull/215#discussion_r424284981", "createdAt": "2020-05-13T09:03:06Z", "author": {"login": "radtriste"}, "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/scheduler/JobSchedulerManager.java", "diffHunk": "@@ -99,7 +99,8 @@ void loadScheduledJobs() {\n     }\n \n     private PublisherBuilder<ScheduledJob> loadJobsInCurrentChunk() {\n-        return repository.findByStatusBetweenDatesOrderByPriority(DateUtil.now(), DateUtil.now().plusMinutes(schedulerChunkInMinutes),\n+        return repository.findByStatusBetweenDatesOrderByPriority(DateUtil.now().minusDays(1),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3e4eaf617793a216cba89a6e7548e75ddf964c7"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDM4MTk2NQ==", "bodyText": "yep, I agree, in fact I added this during the tests to allow when loading persisted jobs, to schedule \"expired\" ones when the force configuration set, but it should be a configuration parameter indeed. Any suggestion for the default value/time for instance minutes, hours, days, etc.", "url": "https://github.com/kiegroup/kogito-apps/pull/215#discussion_r424381965", "createdAt": "2020-05-13T12:01:39Z", "author": {"login": "tiagodolphine"}, "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/scheduler/JobSchedulerManager.java", "diffHunk": "@@ -99,7 +99,8 @@ void loadScheduledJobs() {\n     }\n \n     private PublisherBuilder<ScheduledJob> loadJobsInCurrentChunk() {\n-        return repository.findByStatusBetweenDatesOrderByPriority(DateUtil.now(), DateUtil.now().plusMinutes(schedulerChunkInMinutes),\n+        return repository.findByStatusBetweenDatesOrderByPriority(DateUtil.now().minusDays(1),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI4NDk4MQ=="}, "originalCommit": {"oid": "d3e4eaf617793a216cba89a6e7548e75ddf964c7"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0Mjk4NDM1OnYy", "diffSide": "RIGHT", "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/scheduler/BaseTimerJobScheduler.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMzowMjowMlrOGUwcOg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxNDoxMzo0OFrOGUzqBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQxODM2Mg==", "bodyText": "Is there any specific reason to use Optional here?\nThe property is specified in application.properties anyway.", "url": "https://github.com/kiegroup/kogito-apps/pull/215#discussion_r424418362", "createdAt": "2020-05-13T13:02:02Z", "author": {"login": "sutaakar"}, "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/scheduler/BaseTimerJobScheduler.java", "diffHunk": "@@ -55,6 +55,13 @@\n     @ConfigProperty(name = \"kogito.jobs-service.maxIntervalLimitToRetryMillis\")\n     long maxIntervalLimitToRetryMillis;\n \n+    /**\n+     * Flag to allow and force a job with expirationTime in the past to be executed immediately. If false an\n+     * exception will be thrown.\n+     */\n+    @ConfigProperty(name = \"kogito.jobs-service.forceExecuteExpiredJobs\")\n+    Optional<Boolean> forceExecuteExpiredJobs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "17287f3ed9ea4df659e78fd6d8b8012281f7400a"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQyNDMzOQ==", "bodyText": "The property is used on the calculateInterval method where I prefer to use a functional approach there, otherwise, I would need to use Optional.of()... anyway any specific reason to not use Optional?", "url": "https://github.com/kiegroup/kogito-apps/pull/215#discussion_r424424339", "createdAt": "2020-05-13T13:11:04Z", "author": {"login": "tiagodolphine"}, "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/scheduler/BaseTimerJobScheduler.java", "diffHunk": "@@ -55,6 +55,13 @@\n     @ConfigProperty(name = \"kogito.jobs-service.maxIntervalLimitToRetryMillis\")\n     long maxIntervalLimitToRetryMillis;\n \n+    /**\n+     * Flag to allow and force a job with expirationTime in the past to be executed immediately. If false an\n+     * exception will be thrown.\n+     */\n+    @ConfigProperty(name = \"kogito.jobs-service.forceExecuteExpiredJobs\")\n+    Optional<Boolean> forceExecuteExpiredJobs;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQxODM2Mg=="}, "originalCommit": {"oid": "17287f3ed9ea4df659e78fd6d8b8012281f7400a"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQ3MTA0Nw==", "bodyText": "I was just curious what is the rationale behind.\nOk to be kept like that.", "url": "https://github.com/kiegroup/kogito-apps/pull/215#discussion_r424471047", "createdAt": "2020-05-13T14:13:48Z", "author": {"login": "sutaakar"}, "path": "jobs-service/src/main/java/org/kie/kogito/jobs/service/scheduler/BaseTimerJobScheduler.java", "diffHunk": "@@ -55,6 +55,13 @@\n     @ConfigProperty(name = \"kogito.jobs-service.maxIntervalLimitToRetryMillis\")\n     long maxIntervalLimitToRetryMillis;\n \n+    /**\n+     * Flag to allow and force a job with expirationTime in the past to be executed immediately. If false an\n+     * exception will be thrown.\n+     */\n+    @ConfigProperty(name = \"kogito.jobs-service.forceExecuteExpiredJobs\")\n+    Optional<Boolean> forceExecuteExpiredJobs;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQxODM2Mg=="}, "originalCommit": {"oid": "17287f3ed9ea4df659e78fd6d8b8012281f7400a"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 925, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}