{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwMDI1ODcy", "number": 3044, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMTowMzowNlrODd1GlA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwNzo0MjowNFrODeNR7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNjA1MzMyOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMTowMzowNlrOFmqHvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQyMTo1OToxMFrOFmrrIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA4MDMxNw==", "bodyText": "Maybe we can avoid the if conditions here by creating a description class in the extractor with fields content and type.\nprepareDescription(info.getDescription().getContent(), info.getDescription().getType());", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3044#discussion_r376080317", "createdAt": "2020-02-06T21:03:06Z", "author": {"login": "yausername"}, "path": "app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java", "diffHunk": "@@ -1126,7 +1142,20 @@ public void handleResult(@NonNull StreamInfo info) {\n             videoUploadDateView.setVisibility(View.GONE);\n         }\n \n-        prepareDescription(info.getDescription());\n+        int serviceId = info.getServiceId();\n+\n+        if (serviceId != YOUTUBE_SERVICE_ID) {\n+            videoDescriptionView.setAutoLinkMask(Linkify.WEB_URLS);\n+        }\n+\n+        if (serviceId == PEERTUBE_SERVICE_ID) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c95126f5458295d8a7ba05317a5d60b9950cc4b8"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA4MjM4OQ==", "bodyText": "Sounds like a good solution", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3044#discussion_r376082389", "createdAt": "2020-02-06T21:07:41Z", "author": {"login": "TobiGr"}, "path": "app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java", "diffHunk": "@@ -1126,7 +1142,20 @@ public void handleResult(@NonNull StreamInfo info) {\n             videoUploadDateView.setVisibility(View.GONE);\n         }\n \n-        prepareDescription(info.getDescription());\n+        int serviceId = info.getServiceId();\n+\n+        if (serviceId != YOUTUBE_SERVICE_ID) {\n+            videoDescriptionView.setAutoLinkMask(Linkify.WEB_URLS);\n+        }\n+\n+        if (serviceId == PEERTUBE_SERVICE_ID) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA4MDMxNw=="}, "originalCommit": {"oid": "c95126f5458295d8a7ba05317a5d60b9950cc4b8"}, "originalPosition": 109}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjEwNTc2MA==", "bodyText": "Isn't it better for readability to make\nprepareDescription(info.getDescription()), with prepareDescription(Description description)?", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3044#discussion_r376105760", "createdAt": "2020-02-06T21:59:10Z", "author": {"login": "B0pol"}, "path": "app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java", "diffHunk": "@@ -1126,7 +1142,20 @@ public void handleResult(@NonNull StreamInfo info) {\n             videoUploadDateView.setVisibility(View.GONE);\n         }\n \n-        prepareDescription(info.getDescription());\n+        int serviceId = info.getServiceId();\n+\n+        if (serviceId != YOUTUBE_SERVICE_ID) {\n+            videoDescriptionView.setAutoLinkMask(Linkify.WEB_URLS);\n+        }\n+\n+        if (serviceId == PEERTUBE_SERVICE_ID) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjA4MDMxNw=="}, "originalCommit": {"oid": "c95126f5458295d8a7ba05317a5d60b9950cc4b8"}, "originalPosition": 109}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNzA0NzYzOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QwNjozNTo0OVrOFmzfZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzowMjoyNlrOFm8T8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIzMzgzMQ==", "bodyText": "How about checking for non-html instead of non-youtube?\nAlso, it would be better to move this into prepareDescription", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3044#discussion_r376233831", "createdAt": "2020-02-07T06:35:49Z", "author": {"login": "yausername"}, "path": "app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java", "diffHunk": "@@ -1126,6 +1135,10 @@ public void handleResult(@NonNull StreamInfo info) {\n             videoUploadDateView.setVisibility(View.GONE);\n         }\n \n+        if (info.getServiceId() != ServiceList.YouTube.getServiceId()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "55837c11ba1dd4db6f13a18b70d0bb19bf01c98b"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjM3ODM1Mg==", "bodyText": "I thought about that but it was late in the evening. Thanks for the reminder", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3044#discussion_r376378352", "createdAt": "2020-02-07T13:02:26Z", "author": {"login": "B0pol"}, "path": "app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java", "diffHunk": "@@ -1126,6 +1135,10 @@ public void handleResult(@NonNull StreamInfo info) {\n             videoUploadDateView.setVisibility(View.GONE);\n         }\n \n+        if (info.getServiceId() != ServiceList.YouTube.getServiceId()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjIzMzgzMQ=="}, "originalCommit": {"oid": "55837c11ba1dd4db6f13a18b70d0bb19bf01c98b"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMDAxNDUzOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQwNzo0MjowNFrOFnPnsA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQxMDoxOToxM1rOFnQCMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5NDcwNA==", "bodyText": "Sorry for asking for so many changes but we would be better off not manipulating the string since it can be buggy.\nWe can add a markdown library to render later in a separate PR.", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3044#discussion_r376694704", "createdAt": "2020-02-08T07:42:04Z", "author": {"login": "yausername"}, "path": "app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java", "diffHunk": "@@ -919,28 +917,43 @@ private VideoStream getSelectedVideoStream() {\n         return sortedVideoStreams != null ? sortedVideoStreams.get(selectedVideoStreamIndex) : null;\n     }\n \n-    private void prepareDescription(final String descriptionHtml) {\n-        if (TextUtils.isEmpty(descriptionHtml)) {\n+    private void prepareDescription(Description description) {\n+        if (TextUtils.isEmpty(description.getContent()) || description == Description.emptyDescription) {\n             return;\n         }\n \n-        disposables.add(Single.just(descriptionHtml)\n-                .map((@io.reactivex.annotations.NonNull String description) -> {\n-                    Spanned parsedDescription;\n-                    if (Build.VERSION.SDK_INT >= 24) {\n-                        parsedDescription = Html.fromHtml(description, 0);\n-                    } else {\n-                        //noinspection deprecation\n-                        parsedDescription = Html.fromHtml(description);\n-                    }\n-                    return parsedDescription;\n-                })\n-                .subscribeOn(Schedulers.computation())\n-                .observeOn(AndroidSchedulers.mainThread())\n-                .subscribe((@io.reactivex.annotations.NonNull Spanned spanned) -> {\n-                    videoDescriptionView.setText(spanned);\n-                    videoDescriptionView.setVisibility(View.VISIBLE);\n-                }));\n+        if (description.getType() != Description.HTML) {\n+            videoDescriptionView.setAutoLinkMask(Linkify.WEB_URLS);\n+        }\n+\n+        if (description.getType() == Description.HTML) {\n+            disposables.add(Single.just(description.getContent())\n+                    .map((@io.reactivex.annotations.NonNull String descriptionText) -> {\n+                        Spanned parsedDescription;\n+                        if (Build.VERSION.SDK_INT >= 24) {\n+                            parsedDescription = Html.fromHtml(descriptionText, 0);\n+                        } else {\n+                            //noinspection deprecation\n+                            parsedDescription = Html.fromHtml(descriptionText);\n+                        }\n+                        return parsedDescription;\n+                    })\n+                    .subscribeOn(Schedulers.computation())\n+                    .observeOn(AndroidSchedulers.mainThread())\n+                    .subscribe((@io.reactivex.annotations.NonNull Spanned spanned) -> {\n+                        videoDescriptionView.setText(spanned);\n+                        videoDescriptionView.setVisibility(View.VISIBLE);\n+                    }));\n+        } else if (description.getType() == Description.MARKDOWN) {\n+            //in the future we would use a library or a good method to show markdown.\n+            //rn, we just remove **bold**, and let PLAIN_TEXT otherwise\n+            videoDescriptionView.setText(description.getContent().replace(\"**\", \"\"), TextView.BufferType.SPANNABLE);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "badaff8ebcd6f446a6a4b575adba43d627b4c7c2"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwMDI0OQ==", "bodyText": "I added Markwon library, it works perfectly.", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3044#discussion_r376700249", "createdAt": "2020-02-08T09:51:40Z", "author": {"login": "B0pol"}, "path": "app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java", "diffHunk": "@@ -919,28 +917,43 @@ private VideoStream getSelectedVideoStream() {\n         return sortedVideoStreams != null ? sortedVideoStreams.get(selectedVideoStreamIndex) : null;\n     }\n \n-    private void prepareDescription(final String descriptionHtml) {\n-        if (TextUtils.isEmpty(descriptionHtml)) {\n+    private void prepareDescription(Description description) {\n+        if (TextUtils.isEmpty(description.getContent()) || description == Description.emptyDescription) {\n             return;\n         }\n \n-        disposables.add(Single.just(descriptionHtml)\n-                .map((@io.reactivex.annotations.NonNull String description) -> {\n-                    Spanned parsedDescription;\n-                    if (Build.VERSION.SDK_INT >= 24) {\n-                        parsedDescription = Html.fromHtml(description, 0);\n-                    } else {\n-                        //noinspection deprecation\n-                        parsedDescription = Html.fromHtml(description);\n-                    }\n-                    return parsedDescription;\n-                })\n-                .subscribeOn(Schedulers.computation())\n-                .observeOn(AndroidSchedulers.mainThread())\n-                .subscribe((@io.reactivex.annotations.NonNull Spanned spanned) -> {\n-                    videoDescriptionView.setText(spanned);\n-                    videoDescriptionView.setVisibility(View.VISIBLE);\n-                }));\n+        if (description.getType() != Description.HTML) {\n+            videoDescriptionView.setAutoLinkMask(Linkify.WEB_URLS);\n+        }\n+\n+        if (description.getType() == Description.HTML) {\n+            disposables.add(Single.just(description.getContent())\n+                    .map((@io.reactivex.annotations.NonNull String descriptionText) -> {\n+                        Spanned parsedDescription;\n+                        if (Build.VERSION.SDK_INT >= 24) {\n+                            parsedDescription = Html.fromHtml(descriptionText, 0);\n+                        } else {\n+                            //noinspection deprecation\n+                            parsedDescription = Html.fromHtml(descriptionText);\n+                        }\n+                        return parsedDescription;\n+                    })\n+                    .subscribeOn(Schedulers.computation())\n+                    .observeOn(AndroidSchedulers.mainThread())\n+                    .subscribe((@io.reactivex.annotations.NonNull Spanned spanned) -> {\n+                        videoDescriptionView.setText(spanned);\n+                        videoDescriptionView.setVisibility(View.VISIBLE);\n+                    }));\n+        } else if (description.getType() == Description.MARKDOWN) {\n+            //in the future we would use a library or a good method to show markdown.\n+            //rn, we just remove **bold**, and let PLAIN_TEXT otherwise\n+            videoDescriptionView.setText(description.getContent().replace(\"**\", \"\"), TextView.BufferType.SPANNABLE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5NDcwNA=="}, "originalCommit": {"oid": "badaff8ebcd6f446a6a4b575adba43d627b4c7c2"}, "originalPosition": 85}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwMTQ5MQ==", "bodyText": "Awesome!", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3044#discussion_r376701491", "createdAt": "2020-02-08T10:19:13Z", "author": {"login": "yausername"}, "path": "app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java", "diffHunk": "@@ -919,28 +917,43 @@ private VideoStream getSelectedVideoStream() {\n         return sortedVideoStreams != null ? sortedVideoStreams.get(selectedVideoStreamIndex) : null;\n     }\n \n-    private void prepareDescription(final String descriptionHtml) {\n-        if (TextUtils.isEmpty(descriptionHtml)) {\n+    private void prepareDescription(Description description) {\n+        if (TextUtils.isEmpty(description.getContent()) || description == Description.emptyDescription) {\n             return;\n         }\n \n-        disposables.add(Single.just(descriptionHtml)\n-                .map((@io.reactivex.annotations.NonNull String description) -> {\n-                    Spanned parsedDescription;\n-                    if (Build.VERSION.SDK_INT >= 24) {\n-                        parsedDescription = Html.fromHtml(description, 0);\n-                    } else {\n-                        //noinspection deprecation\n-                        parsedDescription = Html.fromHtml(description);\n-                    }\n-                    return parsedDescription;\n-                })\n-                .subscribeOn(Schedulers.computation())\n-                .observeOn(AndroidSchedulers.mainThread())\n-                .subscribe((@io.reactivex.annotations.NonNull Spanned spanned) -> {\n-                    videoDescriptionView.setText(spanned);\n-                    videoDescriptionView.setVisibility(View.VISIBLE);\n-                }));\n+        if (description.getType() != Description.HTML) {\n+            videoDescriptionView.setAutoLinkMask(Linkify.WEB_URLS);\n+        }\n+\n+        if (description.getType() == Description.HTML) {\n+            disposables.add(Single.just(description.getContent())\n+                    .map((@io.reactivex.annotations.NonNull String descriptionText) -> {\n+                        Spanned parsedDescription;\n+                        if (Build.VERSION.SDK_INT >= 24) {\n+                            parsedDescription = Html.fromHtml(descriptionText, 0);\n+                        } else {\n+                            //noinspection deprecation\n+                            parsedDescription = Html.fromHtml(descriptionText);\n+                        }\n+                        return parsedDescription;\n+                    })\n+                    .subscribeOn(Schedulers.computation())\n+                    .observeOn(AndroidSchedulers.mainThread())\n+                    .subscribe((@io.reactivex.annotations.NonNull Spanned spanned) -> {\n+                        videoDescriptionView.setText(spanned);\n+                        videoDescriptionView.setVisibility(View.VISIBLE);\n+                    }));\n+        } else if (description.getType() == Description.MARKDOWN) {\n+            //in the future we would use a library or a good method to show markdown.\n+            //rn, we just remove **bold**, and let PLAIN_TEXT otherwise\n+            videoDescriptionView.setText(description.getContent().replace(\"**\", \"\"), TextView.BufferType.SPANNABLE);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjY5NDcwNA=="}, "originalCommit": {"oid": "badaff8ebcd6f446a6a4b575adba43d627b4c7c2"}, "originalPosition": 85}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3256, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}