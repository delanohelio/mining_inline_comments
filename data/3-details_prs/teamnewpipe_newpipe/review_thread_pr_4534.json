{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA1MDIxNDMw", "number": 4534, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMDoyODozMFrOFO1yhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMDozMDo0MVrOFO11hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMTA1NjY4OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMDoyODozMFrOIT2BZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMDoyODozMFrOIT2BZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY3ODk0OQ==", "bodyText": "You can use shouldShowPlayWithKodi() now:\n\n  \n    \n      NewPipe/app/src/main/java/org/schabi/newpipe/util/KoreUtil.java\n    \n    \n         Line 19\n      in\n      8fd48a8\n    \n    \n    \n    \n\n        \n          \n           public static boolean shouldShowPlayWithKodi(final Context context, final int serviceId) {", "url": "https://github.com/TeamNewPipe/NewPipe/pull/4534#discussion_r557678949", "createdAt": "2021-01-14T20:28:30Z", "author": {"login": "TobiGr"}, "path": "app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java", "diffHunk": "@@ -779,6 +811,14 @@ public void onLoadingFailed(final String imageUri, final View view,\n         }\n     }\n \n+    private void showHideKodiButton() {\n+        // show kodi button if it supports the current service and it is enabled in settings\n+        final boolean showKodiButton = KoreUtil.isServiceSupportedByKore(serviceId)\n+                && PreferenceManager.getDefaultSharedPreferences(requireContext())\n+                .getBoolean(getString(R.string.show_play_with_kodi_key), false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebf81f79e0fe82551efb208221d770ff0995273"}, "originalPosition": 383}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzUxMTA2NDM2OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMDozMDo0MVrOIT2GFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMS0xNFQyMDozMDo0MVrOIT2GFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU1NzY4MDE0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        if (relatedStreamsLayout == null) { //phone\n          \n          \n            \n                            pageAdapter.updateItem(RELATED_TAB_TAG,\n          \n          \n            \n                                    RelatedVideosFragment.getInstance(info));\n          \n          \n            \n                        } else { //tablet\n          \n          \n            \n                        if (relatedStreamsLayout == null) { // phone\n          \n          \n            \n                            pageAdapter.updateItem(RELATED_TAB_TAG,\n          \n          \n            \n                                    RelatedVideosFragment.getInstance(info));\n          \n          \n            \n                        } else { // tablet + TV", "url": "https://github.com/TeamNewPipe/NewPipe/pull/4534#discussion_r557680148", "createdAt": "2021-01-14T20:30:41Z", "author": {"login": "TobiGr"}, "path": "app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java", "diffHunk": "@@ -980,37 +1020,88 @@ private void runWorker(final boolean forceLoad, final boolean addToBackStack) {\n                 });\n     }\n \n+    /*//////////////////////////////////////////////////////////////////////////\n+    // Tabs\n+    //////////////////////////////////////////////////////////////////////////*/\n+\n     private void initTabs() {\n         if (pageAdapter.getCount() != 0) {\n             selectedTabTag = pageAdapter.getItemTitle(viewPager.getCurrentItem());\n         }\n         pageAdapter.clearAllItems();\n+        tabIcons.clear();\n+        tabContentDescriptions.clear();\n \n         if (shouldShowComments()) {\n             pageAdapter.addFragment(\n                     CommentsFragment.getInstance(serviceId, url, title), COMMENTS_TAB_TAG);\n+            tabIcons.add(R.drawable.ic_comment_white_24dp);\n+            tabContentDescriptions.add(R.string.comments_tab_description);\n         }\n \n-        if (showRelatedStreams && null == relatedStreamsLayout) {\n-            //temp empty fragment. will be updated in handleResult\n+        if (showRelatedStreams && relatedStreamsLayout == null) {\n+            // temp empty fragment. will be updated in handleResult\n             pageAdapter.addFragment(new Fragment(), RELATED_TAB_TAG);\n+            tabIcons.add(R.drawable.ic_art_track_white_24dp);\n+            tabContentDescriptions.add(R.string.related_streams_tab_description);\n         }\n \n-        if (pageAdapter.getCount() == 0) {\n-            pageAdapter.addFragment(new EmptyFragment(), EMPTY_TAB_TAG);\n+        if (showDescription) {\n+            // temp empty fragment. will be updated in handleResult\n+            pageAdapter.addFragment(new Fragment(), DESCRIPTION_TAB_TAG);\n+            tabIcons.add(R.drawable.ic_description_white_24dp);\n+            tabContentDescriptions.add(R.string.description_tab_description);\n         }\n-\n         pageAdapter.notifyDataSetUpdate();\n \n-        if (pageAdapter.getCount() < 2) {\n-            tabLayout.setVisibility(View.GONE);\n-        } else {\n+        if (pageAdapter.getCount() >= 2) {\n             final int position = pageAdapter.getItemPositionByTitle(selectedTabTag);\n             if (position != -1) {\n                 viewPager.setCurrentItem(position);\n             }\n-            tabLayout.setVisibility(View.VISIBLE);\n+            updateTabIconsAndContentDescriptions();\n+        }\n+        updateTabLayoutVisibility();\n+    }\n+\n+    /**\n+     * To be called whenever {@link #pageAdapter} is modified, since that triggers a refresh in\n+     * {@link #tabLayout} resetting all tab's icons and content descriptions. This reads icons from\n+     * {@link #tabIcons} and content descriptions from {@link #tabContentDescriptions}, which are\n+     * all set in {@link #initTabs()}\n+     */\n+    private void updateTabIconsAndContentDescriptions() {\n+        for (int i = 0; i < tabIcons.size(); ++i) {\n+            final TabLayout.Tab tab = tabLayout.getTabAt(i);\n+            if (tab != null) {\n+                tab.setIcon(tabIcons.get(i));\n+                tab.setContentDescription(tabContentDescriptions.get(i));\n+            }\n+        }\n+    }\n+\n+    private void updateTabs(@NonNull final StreamInfo info) {\n+        if (showRelatedStreams) {\n+            if (relatedStreamsLayout == null) { //phone\n+                pageAdapter.updateItem(RELATED_TAB_TAG,\n+                        RelatedVideosFragment.getInstance(info));\n+            } else { //tablet", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cebf81f79e0fe82551efb208221d770ff0995273"}, "originalPosition": 468}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2967, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}