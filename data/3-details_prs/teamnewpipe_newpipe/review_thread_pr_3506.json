{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDExODU0NzQ0", "number": 3506, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjoxODo1MVrOD4WmSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMDowOTozMVrOEJep_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDE3MDk4OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/org/schabi/newpipe/settings/SelectPlaylistFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjoxODo1MVrOGPIXEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjoxODo1MVrOGPIXEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxODgwMQ==", "bodyText": "Just do .subscribe(this::displayPlaylists, this::onError) (I didn't test that). You should also store the Disposable it returns and dispose it in onDestroy().", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3506#discussion_r418518801", "createdAt": "2020-05-01T12:18:51Z", "author": {"login": "wb9688"}, "path": "app/src/main/java/org/schabi/newpipe/settings/SelectPlaylistFragment.java", "diffHunk": "@@ -0,0 +1,240 @@\n+package org.schabi.newpipe.settings;\n+\n+import android.app.Activity;\n+import android.content.DialogInterface;\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.ImageView;\n+import android.widget.ProgressBar;\n+import android.widget.TextView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.fragment.app.DialogFragment;\n+import androidx.recyclerview.widget.LinearLayoutManager;\n+import androidx.recyclerview.widget.RecyclerView;\n+\n+import com.nostra13.universalimageloader.core.DisplayImageOptions;\n+import com.nostra13.universalimageloader.core.ImageLoader;\n+\n+import org.schabi.newpipe.NewPipeDatabase;\n+import org.schabi.newpipe.R;\n+import org.schabi.newpipe.database.AppDatabase;\n+import org.schabi.newpipe.database.LocalItem;\n+import org.schabi.newpipe.database.playlist.PlaylistLocalItem;\n+import org.schabi.newpipe.database.playlist.PlaylistMetadataEntry;\n+import org.schabi.newpipe.database.playlist.model.PlaylistRemoteEntity;\n+import org.schabi.newpipe.local.playlist.LocalPlaylistManager;\n+import org.schabi.newpipe.local.playlist.RemotePlaylistManager;\n+import org.schabi.newpipe.report.ErrorActivity;\n+import org.schabi.newpipe.report.UserAction;\n+import org.schabi.newpipe.util.PlaylistItemsUtils;\n+\n+import java.util.List;\n+import java.util.Vector;\n+\n+import io.reactivex.Flowable;\n+import io.reactivex.Observer;\n+import io.reactivex.android.schedulers.AndroidSchedulers;\n+import io.reactivex.disposables.Disposable;\n+import io.reactivex.schedulers.Schedulers;\n+\n+public class SelectPlaylistFragment extends DialogFragment {\n+    /**\n+     * This contains the base display options for images.\n+     */\n+    private static final DisplayImageOptions DISPLAY_IMAGE_OPTIONS\n+            = new DisplayImageOptions.Builder().cacheInMemory(true).build();\n+\n+    private final ImageLoader imageLoader = ImageLoader.getInstance();\n+\n+    private OnSelectedLisener onSelectedLisener = null;\n+    private OnCancelListener onCancelListener = null;\n+\n+    private ProgressBar progressBar;\n+    private TextView emptyView;\n+    private RecyclerView recyclerView;\n+\n+    private List<PlaylistLocalItem> playlists = new Vector<>();\n+\n+    public void setOnSelectedLisener(final OnSelectedLisener listener) {\n+        onSelectedLisener = listener;\n+    }\n+\n+    public void setOnCancelListener(final OnCancelListener listener) {\n+        onCancelListener = listener;\n+    }\n+\n+    /*//////////////////////////////////////////////////////////////////////////\n+    // Init\n+    //////////////////////////////////////////////////////////////////////////*/\n+\n+    @Override\n+    public View onCreateView(@NonNull final LayoutInflater inflater, final ViewGroup container,\n+                             final Bundle savedInstanceState) {\n+        View v = inflater.inflate(R.layout.select_playlist_fragment, container, false);\n+        recyclerView = v.findViewById(R.id.items_list);\n+        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));\n+        SelectPlaylistAdapter playlistAdapter = new SelectPlaylistAdapter();\n+        recyclerView.setAdapter(playlistAdapter);\n+\n+        progressBar = v.findViewById(R.id.progressBar);\n+        emptyView = v.findViewById(R.id.empty_state_view);\n+        progressBar.setVisibility(View.VISIBLE);\n+        recyclerView.setVisibility(View.GONE);\n+        emptyView.setVisibility(View.GONE);\n+\n+        final AppDatabase database = NewPipeDatabase.getInstance(this.getContext());\n+        LocalPlaylistManager localPlaylistManager = new LocalPlaylistManager(database);\n+        RemotePlaylistManager remotePlaylistManager = new RemotePlaylistManager(database);\n+\n+        Flowable.combineLatest(localPlaylistManager.getPlaylists(),\n+                remotePlaylistManager.getPlaylists(), PlaylistItemsUtils::merge)\n+                .toObservable()\n+                .subscribeOn(Schedulers.io())\n+                .observeOn(AndroidSchedulers.mainThread())\n+                .subscribe(getPlaylistsObserver());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c998d4eb352813d366e8bdac00b93a4969ba0cee"}, "originalPosition": 97}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDE3NjQ2OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/org/schabi/newpipe/settings/SelectPlaylistFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjoyMTo0OVrOGPIaKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjoyMTo0OVrOGPIaKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUxOTU5Mw==", "bodyText": "There's a typo here (and in other places), it should be OnSelectedListener", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3506#discussion_r418519593", "createdAt": "2020-05-01T12:21:49Z", "author": {"login": "wb9688"}, "path": "app/src/main/java/org/schabi/newpipe/settings/SelectPlaylistFragment.java", "diffHunk": "@@ -0,0 +1,240 @@\n+package org.schabi.newpipe.settings;\n+\n+import android.app.Activity;\n+import android.content.DialogInterface;\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.ImageView;\n+import android.widget.ProgressBar;\n+import android.widget.TextView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.fragment.app.DialogFragment;\n+import androidx.recyclerview.widget.LinearLayoutManager;\n+import androidx.recyclerview.widget.RecyclerView;\n+\n+import com.nostra13.universalimageloader.core.DisplayImageOptions;\n+import com.nostra13.universalimageloader.core.ImageLoader;\n+\n+import org.schabi.newpipe.NewPipeDatabase;\n+import org.schabi.newpipe.R;\n+import org.schabi.newpipe.database.AppDatabase;\n+import org.schabi.newpipe.database.LocalItem;\n+import org.schabi.newpipe.database.playlist.PlaylistLocalItem;\n+import org.schabi.newpipe.database.playlist.PlaylistMetadataEntry;\n+import org.schabi.newpipe.database.playlist.model.PlaylistRemoteEntity;\n+import org.schabi.newpipe.local.playlist.LocalPlaylistManager;\n+import org.schabi.newpipe.local.playlist.RemotePlaylistManager;\n+import org.schabi.newpipe.report.ErrorActivity;\n+import org.schabi.newpipe.report.UserAction;\n+import org.schabi.newpipe.util.PlaylistItemsUtils;\n+\n+import java.util.List;\n+import java.util.Vector;\n+\n+import io.reactivex.Flowable;\n+import io.reactivex.Observer;\n+import io.reactivex.android.schedulers.AndroidSchedulers;\n+import io.reactivex.disposables.Disposable;\n+import io.reactivex.schedulers.Schedulers;\n+\n+public class SelectPlaylistFragment extends DialogFragment {\n+    /**\n+     * This contains the base display options for images.\n+     */\n+    private static final DisplayImageOptions DISPLAY_IMAGE_OPTIONS\n+            = new DisplayImageOptions.Builder().cacheInMemory(true).build();\n+\n+    private final ImageLoader imageLoader = ImageLoader.getInstance();\n+\n+    private OnSelectedLisener onSelectedLisener = null;\n+    private OnCancelListener onCancelListener = null;\n+\n+    private ProgressBar progressBar;\n+    private TextView emptyView;\n+    private RecyclerView recyclerView;\n+\n+    private List<PlaylistLocalItem> playlists = new Vector<>();\n+\n+    public void setOnSelectedLisener(final OnSelectedLisener listener) {\n+        onSelectedLisener = listener;\n+    }\n+\n+    public void setOnCancelListener(final OnCancelListener listener) {\n+        onCancelListener = listener;\n+    }\n+\n+    /*//////////////////////////////////////////////////////////////////////////\n+    // Init\n+    //////////////////////////////////////////////////////////////////////////*/\n+\n+    @Override\n+    public View onCreateView(@NonNull final LayoutInflater inflater, final ViewGroup container,\n+                             final Bundle savedInstanceState) {\n+        View v = inflater.inflate(R.layout.select_playlist_fragment, container, false);\n+        recyclerView = v.findViewById(R.id.items_list);\n+        recyclerView.setLayoutManager(new LinearLayoutManager(getContext()));\n+        SelectPlaylistAdapter playlistAdapter = new SelectPlaylistAdapter();\n+        recyclerView.setAdapter(playlistAdapter);\n+\n+        progressBar = v.findViewById(R.id.progressBar);\n+        emptyView = v.findViewById(R.id.empty_state_view);\n+        progressBar.setVisibility(View.VISIBLE);\n+        recyclerView.setVisibility(View.GONE);\n+        emptyView.setVisibility(View.GONE);\n+\n+        final AppDatabase database = NewPipeDatabase.getInstance(this.getContext());\n+        LocalPlaylistManager localPlaylistManager = new LocalPlaylistManager(database);\n+        RemotePlaylistManager remotePlaylistManager = new RemotePlaylistManager(database);\n+\n+        Flowable.combineLatest(localPlaylistManager.getPlaylists(),\n+                remotePlaylistManager.getPlaylists(), PlaylistItemsUtils::merge)\n+                .toObservable()\n+                .subscribeOn(Schedulers.io())\n+                .observeOn(AndroidSchedulers.mainThread())\n+                .subscribe(getPlaylistsObserver());\n+\n+        return v;\n+    }\n+\n+    /*//////////////////////////////////////////////////////////////////////////\n+    // Handle actions\n+    //////////////////////////////////////////////////////////////////////////*/\n+\n+    @Override\n+    public void onCancel(final DialogInterface dialogInterface) {\n+        super.onCancel(dialogInterface);\n+        if (onCancelListener != null) {\n+            onCancelListener.onCancel();\n+        }\n+    }\n+\n+    private void clickedItem(final int position) {\n+        if (onSelectedLisener != null) {\n+            LocalItem selectedItem = playlists.get(position);\n+\n+            if (selectedItem instanceof PlaylistMetadataEntry) {\n+                final PlaylistMetadataEntry entry = ((PlaylistMetadataEntry) selectedItem);\n+                onSelectedLisener\n+                        .onLocalPlaylistSelected(entry.uid, entry.name);\n+\n+            } else if (selectedItem instanceof PlaylistRemoteEntity) {\n+                final PlaylistRemoteEntity entry = ((PlaylistRemoteEntity) selectedItem);\n+                onSelectedLisener.onRemotePlaylistSelected(\n+                        entry.getServiceId(), entry.getUrl(), entry.getName());\n+            }\n+        }\n+        dismiss();\n+    }\n+\n+    /*//////////////////////////////////////////////////////////////////////////\n+    // Item handling\n+    //////////////////////////////////////////////////////////////////////////*/\n+\n+    private void displayPlaylists(final List<PlaylistLocalItem> newPlaylists) {\n+        this.playlists = newPlaylists;\n+        progressBar.setVisibility(View.GONE);\n+        if (newPlaylists.isEmpty()) {\n+            emptyView.setVisibility(View.VISIBLE);\n+            return;\n+        }\n+        recyclerView.setVisibility(View.VISIBLE);\n+\n+    }\n+\n+    private Observer<List<PlaylistLocalItem>> getPlaylistsObserver() {\n+        return new Observer<List<PlaylistLocalItem>>() {\n+            @Override\n+            public void onSubscribe(final Disposable d) { }\n+\n+            @Override\n+            public void onNext(final List<PlaylistLocalItem> newPlaylists) {\n+                displayPlaylists(newPlaylists);\n+            }\n+\n+            @Override\n+            public void onError(final Throwable exception) {\n+                SelectPlaylistFragment.this.onError(exception);\n+            }\n+\n+            @Override\n+            public void onComplete() { }\n+        };\n+    }\n+\n+    /*//////////////////////////////////////////////////////////////////////////\n+    // Error\n+    //////////////////////////////////////////////////////////////////////////*/\n+\n+    protected void onError(final Throwable e) {\n+        final Activity activity = getActivity();\n+        ErrorActivity.reportError(activity, e, activity.getClass(), null, ErrorActivity.ErrorInfo\n+                .make(UserAction.UI_ERROR, \"none\", \"\", R.string.app_ui_crash));\n+    }\n+\n+    /*//////////////////////////////////////////////////////////////////////////\n+    // Interfaces\n+    //////////////////////////////////////////////////////////////////////////*/\n+\n+    public interface OnSelectedLisener {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c998d4eb352813d366e8bdac00b93a4969ba0cee"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYwNDE4MDg2OnYy", "diffSide": "RIGHT", "path": "app/src/main/res/layout/select_playlist_fragment.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjoyNDowOFrOGPIcmw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wMVQxMjoyNDowOFrOGPIcmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxODUyMDIxOQ==", "bodyText": "Please end with a newline (that's why we need #3394, so that your IDE would do that automatically\u2026)", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3506#discussion_r418520219", "createdAt": "2020-05-01T12:24:08Z", "author": {"login": "wb9688"}, "path": "app/src/main/res/layout/select_playlist_fragment.xml", "diffHunk": "@@ -0,0 +1,43 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    xmlns:tools=\"http://schemas.android.com/tools\"\n+    android:orientation=\"vertical\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"match_parent\"\n+    android:padding=\"13dp\">\n+\n+    <TextView\n+        android:id=\"@+id/titleTextView\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        android:layout_marginStart=\"10dp\"\n+        android:layout_marginLeft=\"10dp\"\n+        android:layout_marginTop=\"5dp\"\n+        android:layout_marginEnd=\"5dp\"\n+        android:layout_marginRight=\"5dp\"\n+        android:layout_marginBottom=\"10dp\"\n+        android:text=\"@string/select_a_playlist\"\n+        android:textAppearance=\"?android:attr/textAppearanceLarge\" />\n+\n+    <androidx.recyclerview.widget.RecyclerView\n+        android:id=\"@+id/items_list\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        tools:listitem=\"@layout/list_playlist_mini_item\"></androidx.recyclerview.widget.RecyclerView>\n+\n+\n+    <TextView\n+        android:id=\"@+id/empty_state_view\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        android:layout_margin=\"10dp\"\n+        android:text=\"@string/no_playlist_bookmarked_yet\"\n+        android:textAppearance=\"?android:attr/textAppearanceListItem\" />\n+\n+    <ProgressBar\n+        android:id=\"@+id/progressBar\"\n+        style=\"?android:attr/progressBarStyle\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        android:layout_margin=\"5dp\"/>\n+</LinearLayout>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c998d4eb352813d366e8bdac00b93a4969ba0cee"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjE3NTUzOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/org/schabi/newpipe/settings/tabs/ChooseTabsFragment.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxODo0MjoyOVrOGQNRhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxOTozNzo0OFrOGQPOpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY0Nzg3OQ==", "bodyText": "You should use a string resource here, maybe other languages use different signatures than \"S/P\" to express \"playlist P comes from service S\"", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3506#discussion_r419647879", "createdAt": "2020-05-04T18:42:29Z", "author": {"login": "Stypox"}, "path": "app/src/main/java/org/schabi/newpipe/settings/tabs/ChooseTabsFragment.java", "diffHunk": "@@ -392,6 +415,13 @@ void bind(final int position, final TabViewHolder holder) {\n                         tabName = NewPipe.getNameOfService(((Tab.ChannelTab) tab)\n                                 .getChannelServiceId()) + \"/\" + tab.getTabName(requireContext());\n                         break;\n+                    case PLAYLIST:\n+                        final int serviceId = ((Tab.PlaylistTab) tab).getPlaylistServiceId();\n+                        final String serviceName = serviceId == -1\n+                                ? getString(R.string.local)\n+                                : NewPipe.getNameOfService(serviceId);\n+                        tabName = serviceName + \"/\" + tab.getTabName(requireContext());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f99a3b7b583a9cee2bc8e7cb9839dec251885c9"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY2Mzg3NA==", "bodyText": "Also, is there really a need to show the service name? This is not being done with channels afaik", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3506#discussion_r419663874", "createdAt": "2020-05-04T19:09:36Z", "author": {"login": "Stypox"}, "path": "app/src/main/java/org/schabi/newpipe/settings/tabs/ChooseTabsFragment.java", "diffHunk": "@@ -392,6 +415,13 @@ void bind(final int position, final TabViewHolder holder) {\n                         tabName = NewPipe.getNameOfService(((Tab.ChannelTab) tab)\n                                 .getChannelServiceId()) + \"/\" + tab.getTabName(requireContext());\n                         break;\n+                    case PLAYLIST:\n+                        final int serviceId = ((Tab.PlaylistTab) tab).getPlaylistServiceId();\n+                        final String serviceName = serviceId == -1\n+                                ? getString(R.string.local)\n+                                : NewPipe.getNameOfService(serviceId);\n+                        tabName = serviceName + \"/\" + tab.getTabName(requireContext());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY0Nzg3OQ=="}, "originalCommit": {"oid": "8f99a3b7b583a9cee2bc8e7cb9839dec251885c9"}, "originalPosition": 105}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY3OTkxMA==", "bodyText": "@Stypox: It's actually done the same way for channels, so this is OK here. See https://github.com/Royosef/NewPipe/blob/8f99a3b7b583a9cee2bc8e7cb9839dec251885c9/app/src/main/java/org/schabi/newpipe/settings/tabs/ChooseTabsFragment.java#L416", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3506#discussion_r419679910", "createdAt": "2020-05-04T19:37:48Z", "author": {"login": "wb9688"}, "path": "app/src/main/java/org/schabi/newpipe/settings/tabs/ChooseTabsFragment.java", "diffHunk": "@@ -392,6 +415,13 @@ void bind(final int position, final TabViewHolder holder) {\n                         tabName = NewPipe.getNameOfService(((Tab.ChannelTab) tab)\n                                 .getChannelServiceId()) + \"/\" + tab.getTabName(requireContext());\n                         break;\n+                    case PLAYLIST:\n+                        final int serviceId = ((Tab.PlaylistTab) tab).getPlaylistServiceId();\n+                        final String serviceName = serviceId == -1\n+                                ? getString(R.string.local)\n+                                : NewPipe.getNameOfService(serviceId);\n+                        tabName = serviceName + \"/\" + tab.getTabName(requireContext());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY0Nzg3OQ=="}, "originalCommit": {"oid": "8f99a3b7b583a9cee2bc8e7cb9839dec251885c9"}, "originalPosition": 105}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjE4NDg4OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxODo0NTowOVrOGQNXjg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxODo0NTowOVrOGQNXjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY0OTQyMg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        this.playlistName = \"<no-name>\";\n          \n          \n            \n                        this.playlistId = -1;\n          \n          \n            \n                        this.playlistType = LocalItemType.PLAYLIST_LOCAL_ITEM;\n          \n          \n            \n                        this.playlistServiceId = -1;\n          \n          \n            \n                        this.playlistUrl = \"<no-url>\";\n          \n          \n            \n                        this(-1, \"<no-name>\")", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3506#discussion_r419649422", "createdAt": "2020-05-04T18:45:09Z", "author": {"login": "Stypox"}, "path": "app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java", "diffHunk": "@@ -482,4 +489,134 @@ private String getDefaultKioskId(final Context context) {\n             return kioskId;\n         }\n     }\n+\n+    public static class PlaylistTab extends Tab {\n+        public static final int ID = 8;\n+        private static final String JSON_PLAYLIST_SERVICE_ID_KEY = \"playlist_service_id\";\n+        private static final String JSON_PLAYLIST_URL_KEY = \"playlist_url\";\n+        private static final String JSON_PLAYLIST_NAME_KEY = \"playlist_name\";\n+        private static final String JSON_PLAYLIST_ID_KEY = \"playlist_id\";\n+        private static final String JSON_PLAYLIST_TYPE_KEY = \"playlist_type\";\n+        private int playlistServiceId;\n+        private String playlistUrl;\n+        private String playlistName;\n+        private long playlistId;\n+        private LocalItemType playlistType;\n+\n+        private PlaylistTab() {\n+            this.playlistName = \"<no-name>\";\n+            this.playlistId = -1;\n+            this.playlistType = LocalItemType.PLAYLIST_LOCAL_ITEM;\n+            this.playlistServiceId = -1;\n+            this.playlistUrl = \"<no-url>\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f99a3b7b583a9cee2bc8e7cb9839dec251885c9"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjE5MzI2OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxODo0NzoyNlrOGQNcsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxODo0NzoyNlrOGQNcsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY1MDczOQ==", "bodyText": "If it is possible that the playlist name is null, then add @Nullable to its declaration, otherwise remove this check (also below)", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3506#discussion_r419650739", "createdAt": "2020-05-04T18:47:26Z", "author": {"login": "Stypox"}, "path": "app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java", "diffHunk": "@@ -482,4 +489,134 @@ private String getDefaultKioskId(final Context context) {\n             return kioskId;\n         }\n     }\n+\n+    public static class PlaylistTab extends Tab {\n+        public static final int ID = 8;\n+        private static final String JSON_PLAYLIST_SERVICE_ID_KEY = \"playlist_service_id\";\n+        private static final String JSON_PLAYLIST_URL_KEY = \"playlist_url\";\n+        private static final String JSON_PLAYLIST_NAME_KEY = \"playlist_name\";\n+        private static final String JSON_PLAYLIST_ID_KEY = \"playlist_id\";\n+        private static final String JSON_PLAYLIST_TYPE_KEY = \"playlist_type\";\n+        private int playlistServiceId;\n+        private String playlistUrl;\n+        private String playlistName;\n+        private long playlistId;\n+        private LocalItemType playlistType;\n+\n+        private PlaylistTab() {\n+            this.playlistName = \"<no-name>\";\n+            this.playlistId = -1;\n+            this.playlistType = LocalItemType.PLAYLIST_LOCAL_ITEM;\n+            this.playlistServiceId = -1;\n+            this.playlistUrl = \"<no-url>\";\n+        }\n+\n+        public PlaylistTab(final long playlistId, final String playlistName) {\n+            this.playlistName = playlistName;\n+            this.playlistId = playlistId;\n+            this.playlistType = LocalItemType.PLAYLIST_LOCAL_ITEM;\n+            this.playlistServiceId = -1;\n+            this.playlistUrl = \"<no-url>\";\n+        }\n+\n+        public PlaylistTab(final int playlistServiceId, final String playlistUrl,\n+                           final String playlistName) {\n+            this.playlistServiceId = playlistServiceId;\n+            this.playlistUrl = playlistUrl;\n+            this.playlistName = playlistName;\n+            this.playlistType = LocalItemType.PLAYLIST_REMOTE_ITEM;\n+            this.playlistId = -1;\n+        }\n+\n+        public PlaylistTab(final JsonObject jsonObject) {\n+            super(jsonObject);\n+        }\n+\n+        @Override\n+        public int getTabId() {\n+            return ID;\n+        }\n+\n+        @Override\n+        public String getTabName(final Context context) {\n+            return playlistName;\n+        }\n+\n+        @DrawableRes\n+        @Override\n+        public int getTabIconRes(final Context context) {\n+            return ThemeHelper.resolveResourceIdFromAttr(context, R.attr.ic_bookmark);\n+        }\n+\n+        @Override\n+        public Fragment getFragment(final Context context) {\n+            if (playlistType == LocalItemType.PLAYLIST_LOCAL_ITEM) {\n+                return LocalPlaylistFragment.getInstance(playlistId,\n+                        playlistName == null ? \"\" : playlistName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f99a3b7b583a9cee2bc8e7cb9839dec251885c9"}, "originalPosition": 116}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjIzMjgxOnYy", "diffSide": "RIGHT", "path": "app/src/main/res/layout/select_playlist_fragment.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxODo1ODowN1rOGQN1PA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxODo1ODowN1rOGQN1PA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY1NzAyMA==", "bodyText": "Split on two lines\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    tools:listitem=\"@layout/list_playlist_mini_item\"></androidx.recyclerview.widget.RecyclerView>\n          \n          \n            \n                    tools:listitem=\"@layout/list_playlist_mini_item\">\n          \n          \n            \n                    \n          \n          \n            \n                </androidx.recyclerview.widget.RecyclerView>", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3506#discussion_r419657020", "createdAt": "2020-05-04T18:58:07Z", "author": {"login": "Stypox"}, "path": "app/src/main/res/layout/select_playlist_fragment.xml", "diffHunk": "@@ -0,0 +1,43 @@\n+<?xml version=\"1.0\" encoding=\"utf-8\"?>\n+<LinearLayout xmlns:android=\"http://schemas.android.com/apk/res/android\"\n+    xmlns:tools=\"http://schemas.android.com/tools\"\n+    android:orientation=\"vertical\"\n+    android:layout_width=\"match_parent\"\n+    android:layout_height=\"match_parent\"\n+    android:padding=\"13dp\">\n+\n+    <TextView\n+        android:id=\"@+id/titleTextView\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        android:layout_marginStart=\"10dp\"\n+        android:layout_marginLeft=\"10dp\"\n+        android:layout_marginTop=\"5dp\"\n+        android:layout_marginEnd=\"5dp\"\n+        android:layout_marginRight=\"5dp\"\n+        android:layout_marginBottom=\"10dp\"\n+        android:text=\"@string/select_a_playlist\"\n+        android:textAppearance=\"?android:attr/textAppearanceLarge\" />\n+\n+    <androidx.recyclerview.widget.RecyclerView\n+        android:id=\"@+id/items_list\"\n+        android:layout_width=\"match_parent\"\n+        android:layout_height=\"wrap_content\"\n+        tools:listitem=\"@layout/list_playlist_mini_item\"></androidx.recyclerview.widget.RecyclerView>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f99a3b7b583a9cee2bc8e7cb9839dec251885c9"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxMjI0NDgwOnYy", "diffSide": "RIGHT", "path": "app/src/main/res/values/strings.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNFQxOTowMTowMVrOGQN8dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxOTo1OToyOFrOGp_4ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY1ODg2OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <string name=\"playlist_page_summary\">Playlist Page</string>\n          \n          \n            \n                <string name=\"playlist_page_summary\">Playlist page</string>", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3506#discussion_r419658869", "createdAt": "2020-05-04T19:01:01Z", "author": {"login": "Stypox"}, "path": "app/src/main/res/values/strings.xml", "diffHunk": "@@ -650,4 +652,5 @@\n     <string name=\"feed_use_dedicated_fetch_method_disable_button\">Disable fast mode</string>\n     <string name=\"feed_use_dedicated_fetch_method_help_text\">Do you think feed loading is too slow? If so, try enabling fast loading (you can change it in settings or by pressing the button below).\\n\\nNewPipe offers two feed loading strategies:\\n\u2022 Fetching the whole subscription channel, which is slow but complete.\\n\u2022 Using a dedicated service endpoint, which is fast but usually not complete.\\n\\nThe difference between the two is that the fast one usually lacks some information, like the item\\'s duration or type (can\\'t distinguish between live videos and normal ones) and it may return less items.\\n\\nYouTube is an example of a service that offers this fast method with its RSS feed.\\n\\nSo the choice boils down to what you prefer: speed or precise information.</string>\n     <string name=\"content_not_supported\">This content is not yet supported by NewPipe.\\n\\nIt will hopefully be supported in a future version.</string>\n+    <string name=\"playlist_page_summary\">Playlist Page</string>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8f99a3b7b583a9cee2bc8e7cb9839dec251885c9"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5MTUyMw==", "bodyText": "Could you apply this?", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3506#discussion_r446691523", "createdAt": "2020-06-28T19:59:28Z", "author": {"login": "Stypox"}, "path": "app/src/main/res/values/strings.xml", "diffHunk": "@@ -650,4 +652,5 @@\n     <string name=\"feed_use_dedicated_fetch_method_disable_button\">Disable fast mode</string>\n     <string name=\"feed_use_dedicated_fetch_method_help_text\">Do you think feed loading is too slow? If so, try enabling fast loading (you can change it in settings or by pressing the button below).\\n\\nNewPipe offers two feed loading strategies:\\n\u2022 Fetching the whole subscription channel, which is slow but complete.\\n\u2022 Using a dedicated service endpoint, which is fast but usually not complete.\\n\\nThe difference between the two is that the fast one usually lacks some information, like the item\\'s duration or type (can\\'t distinguish between live videos and normal ones) and it may return less items.\\n\\nYouTube is an example of a service that offers this fast method with its RSS feed.\\n\\nSo the choice boils down to what you prefer: speed or precise information.</string>\n     <string name=\"content_not_supported\">This content is not yet supported by NewPipe.\\n\\nIt will hopefully be supported in a future version.</string>\n+    <string name=\"playlist_page_summary\">Playlist Page</string>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxOTY1ODg2OQ=="}, "originalCommit": {"oid": "8f99a3b7b583a9cee2bc8e7cb9839dec251885c9"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzQxODE5OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/org/schabi/newpipe/settings/SelectPlaylistFragment.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxMzoyODoyNlrOGp9bIg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQwOToyMjozMlrOGs68rg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MTE3MA==", "bodyText": "This doesn't seem to be called anywhere (same for the other Select*Fragments I think)", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3506#discussion_r446651170", "createdAt": "2020-06-28T13:28:26Z", "author": {"login": "wb9688"}, "path": "app/src/main/java/org/schabi/newpipe/settings/SelectPlaylistFragment.java", "diffHunk": "@@ -0,0 +1,226 @@\n+package org.schabi.newpipe.settings;\n+\n+import android.app.Activity;\n+import android.content.DialogInterface;\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.ImageView;\n+import android.widget.ProgressBar;\n+import android.widget.TextView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.fragment.app.DialogFragment;\n+import androidx.recyclerview.widget.LinearLayoutManager;\n+import androidx.recyclerview.widget.RecyclerView;\n+\n+import com.nostra13.universalimageloader.core.DisplayImageOptions;\n+import com.nostra13.universalimageloader.core.ImageLoader;\n+\n+import org.schabi.newpipe.NewPipeDatabase;\n+import org.schabi.newpipe.R;\n+import org.schabi.newpipe.database.AppDatabase;\n+import org.schabi.newpipe.database.LocalItem;\n+import org.schabi.newpipe.database.playlist.PlaylistLocalItem;\n+import org.schabi.newpipe.database.playlist.PlaylistMetadataEntry;\n+import org.schabi.newpipe.database.playlist.model.PlaylistRemoteEntity;\n+import org.schabi.newpipe.local.playlist.LocalPlaylistManager;\n+import org.schabi.newpipe.local.playlist.RemotePlaylistManager;\n+import org.schabi.newpipe.report.ErrorActivity;\n+import org.schabi.newpipe.report.UserAction;\n+import org.schabi.newpipe.util.PlaylistItemsUtils;\n+\n+import java.util.List;\n+import java.util.Vector;\n+\n+import io.reactivex.Flowable;\n+import io.reactivex.disposables.Disposable;\n+\n+public class SelectPlaylistFragment extends DialogFragment {\n+    /**\n+     * This contains the base display options for images.\n+     */\n+    private static final DisplayImageOptions DISPLAY_IMAGE_OPTIONS\n+            = new DisplayImageOptions.Builder().cacheInMemory(true).build();\n+\n+    private final ImageLoader imageLoader = ImageLoader.getInstance();\n+\n+    private OnSelectedListener onSelectedListener = null;\n+    private OnCancelListener onCancelListener = null;\n+\n+    private ProgressBar progressBar;\n+    private TextView emptyView;\n+    private RecyclerView recyclerView;\n+    private Disposable playlistsSubscriber;\n+\n+    private List<PlaylistLocalItem> playlists = new Vector<>();\n+\n+    public void setOnSelectedListener(final OnSelectedListener listener) {\n+        onSelectedListener = listener;\n+    }\n+\n+    public void setOnCancelListener(final OnCancelListener listener) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13f66b076d73ea7f126adab4a6c4bb8b213b6ace"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc1NjMzNA==", "bodyText": "Let's keep this here for now. Both settings and tabs need a full refactor anyway", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3506#discussion_r449756334", "createdAt": "2020-07-04T09:22:32Z", "author": {"login": "Stypox"}, "path": "app/src/main/java/org/schabi/newpipe/settings/SelectPlaylistFragment.java", "diffHunk": "@@ -0,0 +1,226 @@\n+package org.schabi.newpipe.settings;\n+\n+import android.app.Activity;\n+import android.content.DialogInterface;\n+import android.os.Bundle;\n+import android.view.LayoutInflater;\n+import android.view.View;\n+import android.view.ViewGroup;\n+import android.widget.ImageView;\n+import android.widget.ProgressBar;\n+import android.widget.TextView;\n+\n+import androidx.annotation.NonNull;\n+import androidx.fragment.app.DialogFragment;\n+import androidx.recyclerview.widget.LinearLayoutManager;\n+import androidx.recyclerview.widget.RecyclerView;\n+\n+import com.nostra13.universalimageloader.core.DisplayImageOptions;\n+import com.nostra13.universalimageloader.core.ImageLoader;\n+\n+import org.schabi.newpipe.NewPipeDatabase;\n+import org.schabi.newpipe.R;\n+import org.schabi.newpipe.database.AppDatabase;\n+import org.schabi.newpipe.database.LocalItem;\n+import org.schabi.newpipe.database.playlist.PlaylistLocalItem;\n+import org.schabi.newpipe.database.playlist.PlaylistMetadataEntry;\n+import org.schabi.newpipe.database.playlist.model.PlaylistRemoteEntity;\n+import org.schabi.newpipe.local.playlist.LocalPlaylistManager;\n+import org.schabi.newpipe.local.playlist.RemotePlaylistManager;\n+import org.schabi.newpipe.report.ErrorActivity;\n+import org.schabi.newpipe.report.UserAction;\n+import org.schabi.newpipe.util.PlaylistItemsUtils;\n+\n+import java.util.List;\n+import java.util.Vector;\n+\n+import io.reactivex.Flowable;\n+import io.reactivex.disposables.Disposable;\n+\n+public class SelectPlaylistFragment extends DialogFragment {\n+    /**\n+     * This contains the base display options for images.\n+     */\n+    private static final DisplayImageOptions DISPLAY_IMAGE_OPTIONS\n+            = new DisplayImageOptions.Builder().cacheInMemory(true).build();\n+\n+    private final ImageLoader imageLoader = ImageLoader.getInstance();\n+\n+    private OnSelectedListener onSelectedListener = null;\n+    private OnCancelListener onCancelListener = null;\n+\n+    private ProgressBar progressBar;\n+    private TextView emptyView;\n+    private RecyclerView recyclerView;\n+    private Disposable playlistsSubscriber;\n+\n+    private List<PlaylistLocalItem> playlists = new Vector<>();\n+\n+    public void setOnSelectedListener(final OnSelectedListener listener) {\n+        onSelectedListener = listener;\n+    }\n+\n+    public void setOnCancelListener(final OnCancelListener listener) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MTE3MA=="}, "originalCommit": {"oid": "13f66b076d73ea7f126adab4a6c4bb8b213b6ace"}, "originalPosition": 63}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4MzQyMTM4OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/org/schabi/newpipe/util/PlaylistItemsUtils.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQxMzozMjowMFrOGp9cpQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQwOToyMToyN1rOGs68VQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MTU1Nw==", "bodyText": "In general I'm not a fan of creating a util class for just one function. I don't have a better place though.", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3506#discussion_r446651557", "createdAt": "2020-06-28T13:32:00Z", "author": {"login": "wb9688"}, "path": "app/src/main/java/org/schabi/newpipe/util/PlaylistItemsUtils.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.schabi.newpipe.util;\n+\n+import org.schabi.newpipe.database.playlist.PlaylistLocalItem;\n+import org.schabi.newpipe.database.playlist.PlaylistMetadataEntry;\n+import org.schabi.newpipe.database.playlist.model.PlaylistRemoteEntity;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+public final class PlaylistItemsUtils {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13f66b076d73ea7f126adab4a6c4bb8b213b6ace"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTc1NjI0NQ==", "bodyText": "I think a static function in PlaylistLocalItem would be a good solution (that now is a 10 lines file, i.e. an interface, so it makes sense to add another function that takes care of implementers of that interface)", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3506#discussion_r449756245", "createdAt": "2020-07-04T09:21:27Z", "author": {"login": "Stypox"}, "path": "app/src/main/java/org/schabi/newpipe/util/PlaylistItemsUtils.java", "diffHunk": "@@ -0,0 +1,38 @@\n+package org.schabi.newpipe.util;\n+\n+import org.schabi.newpipe.database.playlist.PlaylistLocalItem;\n+import org.schabi.newpipe.database.playlist.PlaylistMetadataEntry;\n+import org.schabi.newpipe.database.playlist.model.PlaylistRemoteEntity;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+public final class PlaylistItemsUtils {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY1MTU1Nw=="}, "originalCommit": {"oid": "13f66b076d73ea7f126adab4a6c4bb8b213b6ace"}, "originalPosition": 11}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mzc0MjgwOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMDowMTo0NlrOGp_5vA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMDowMTo0NlrOGp_5vA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5MTc3Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        final boolean baseEquals = super.equals(obj)\n          \n          \n            \n                                && Objects.equals(playlistType, ((PlaylistTab) obj).playlistType)\n          \n          \n            \n                                && Objects.equals(playlistName, ((PlaylistTab) obj).playlistName);\n          \n          \n            \n            \n          \n          \n            \n                        if (!baseEquals) {\n          \n          \n            \n                            return false;\n          \n          \n            \n                        }\n          \n          \n            \n                        if (!(super.equals(obj)\n          \n          \n            \n                                && Objects.equals(playlistType, ((PlaylistTab) obj).playlistType)\n          \n          \n            \n                                && Objects.equals(playlistName, ((PlaylistTab) obj).playlistName))) {\n          \n          \n            \n                            return false;\n          \n          \n            \n                        }", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3506#discussion_r446691772", "createdAt": "2020-06-28T20:01:46Z", "author": {"login": "Stypox"}, "path": "app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java", "diffHunk": "@@ -482,4 +489,128 @@ private String getDefaultKioskId(final Context context) {\n             return kioskId;\n         }\n     }\n+\n+    public static class PlaylistTab extends Tab {\n+        public static final int ID = 8;\n+        private static final String JSON_PLAYLIST_SERVICE_ID_KEY = \"playlist_service_id\";\n+        private static final String JSON_PLAYLIST_URL_KEY = \"playlist_url\";\n+        private static final String JSON_PLAYLIST_NAME_KEY = \"playlist_name\";\n+        private static final String JSON_PLAYLIST_ID_KEY = \"playlist_id\";\n+        private static final String JSON_PLAYLIST_TYPE_KEY = \"playlist_type\";\n+        private int playlistServiceId;\n+        private String playlistUrl;\n+        private String playlistName;\n+        private long playlistId;\n+        private LocalItemType playlistType;\n+\n+        private PlaylistTab() {\n+            this(-1, \"<no-name>\");\n+        }\n+\n+        public PlaylistTab(final long playlistId, final String playlistName) {\n+            this.playlistName = playlistName;\n+            this.playlistId = playlistId;\n+            this.playlistType = LocalItemType.PLAYLIST_LOCAL_ITEM;\n+            this.playlistServiceId = -1;\n+            this.playlistUrl = \"<no-url>\";\n+        }\n+\n+        public PlaylistTab(final int playlistServiceId, final String playlistUrl,\n+                           final String playlistName) {\n+            this.playlistServiceId = playlistServiceId;\n+            this.playlistUrl = playlistUrl;\n+            this.playlistName = playlistName;\n+            this.playlistType = LocalItemType.PLAYLIST_REMOTE_ITEM;\n+            this.playlistId = -1;\n+        }\n+\n+        public PlaylistTab(final JsonObject jsonObject) {\n+            super(jsonObject);\n+        }\n+\n+        @Override\n+        public int getTabId() {\n+            return ID;\n+        }\n+\n+        @Override\n+        public String getTabName(final Context context) {\n+            return playlistName;\n+        }\n+\n+        @DrawableRes\n+        @Override\n+        public int getTabIconRes(final Context context) {\n+            return ThemeHelper.resolveResourceIdFromAttr(context, R.attr.ic_bookmark);\n+        }\n+\n+        @Override\n+        public Fragment getFragment(final Context context) {\n+            if (playlistType == LocalItemType.PLAYLIST_LOCAL_ITEM) {\n+                return LocalPlaylistFragment.getInstance(playlistId, playlistName);\n+\n+            } else { // playlistType == LocalItemType.PLAYLIST_REMOTE_ITEM\n+                return PlaylistFragment.getInstance(playlistServiceId, playlistUrl, playlistName);\n+            }\n+        }\n+\n+        @Override\n+        protected void writeDataToJson(final JsonSink writerSink) {\n+            writerSink.value(JSON_PLAYLIST_SERVICE_ID_KEY, playlistServiceId)\n+                    .value(JSON_PLAYLIST_URL_KEY, playlistUrl)\n+                    .value(JSON_PLAYLIST_NAME_KEY, playlistName)\n+                    .value(JSON_PLAYLIST_ID_KEY, playlistId)\n+                    .value(JSON_PLAYLIST_TYPE_KEY, playlistType.toString());\n+        }\n+\n+        @Override\n+        protected void readDataFromJson(final JsonObject jsonObject) {\n+            playlistServiceId = jsonObject.getInt(JSON_PLAYLIST_SERVICE_ID_KEY, -1);\n+            playlistUrl = jsonObject.getString(JSON_PLAYLIST_URL_KEY, \"<no-url>\");\n+            playlistName = jsonObject.getString(JSON_PLAYLIST_NAME_KEY, \"<no-name>\");\n+            playlistId = jsonObject.getInt(JSON_PLAYLIST_ID_KEY, -1);\n+            playlistType = LocalItemType.valueOf(\n+                    jsonObject.getString(JSON_PLAYLIST_TYPE_KEY,\n+                            LocalItemType.PLAYLIST_LOCAL_ITEM.toString())\n+            );\n+        }\n+\n+        @Override\n+        public boolean equals(final Object obj) {\n+            final boolean baseEquals = super.equals(obj)\n+                    && Objects.equals(playlistType, ((PlaylistTab) obj).playlistType)\n+                    && Objects.equals(playlistName, ((PlaylistTab) obj).playlistName);\n+\n+            if (!baseEquals) {\n+                return false;\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13f66b076d73ea7f126adab4a6c4bb8b213b6ace"}, "originalPosition": 147}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mzc0MzgzOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMDowMjo1N1rOGp_6Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMDowMjo1N1rOGp_6Ow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5MTg5OQ==", "bodyText": "This allows the remotePlaylistEquals part to not be calculated when localPlaylistEquals is true and also looks better imo\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        final boolean localPlaylistEquals = playlistId == ((PlaylistTab) obj).playlistId;\n          \n          \n            \n                        final boolean remotePlaylistEquals =\n          \n          \n            \n                                playlistServiceId == ((PlaylistTab) obj).playlistServiceId\n          \n          \n            \n                                        && Objects.equals(playlistUrl, ((PlaylistTab) obj).playlistUrl);\n          \n          \n            \n            \n          \n          \n            \n                        return localPlaylistEquals || remotePlaylistEquals;\n          \n          \n            \n                        return playlistId == ((PlaylistTab) obj).playlistId                               // local\n          \n          \n            \n                                || (playlistServiceId == ((PlaylistTab) obj).playlistServiceId            // remote\n          \n          \n            \n                                        && Objects.equals(playlistUrl, ((PlaylistTab) obj).playlistUrl));", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3506#discussion_r446691899", "createdAt": "2020-06-28T20:02:57Z", "author": {"login": "Stypox"}, "path": "app/src/main/java/org/schabi/newpipe/settings/tabs/Tab.java", "diffHunk": "@@ -482,4 +489,128 @@ private String getDefaultKioskId(final Context context) {\n             return kioskId;\n         }\n     }\n+\n+    public static class PlaylistTab extends Tab {\n+        public static final int ID = 8;\n+        private static final String JSON_PLAYLIST_SERVICE_ID_KEY = \"playlist_service_id\";\n+        private static final String JSON_PLAYLIST_URL_KEY = \"playlist_url\";\n+        private static final String JSON_PLAYLIST_NAME_KEY = \"playlist_name\";\n+        private static final String JSON_PLAYLIST_ID_KEY = \"playlist_id\";\n+        private static final String JSON_PLAYLIST_TYPE_KEY = \"playlist_type\";\n+        private int playlistServiceId;\n+        private String playlistUrl;\n+        private String playlistName;\n+        private long playlistId;\n+        private LocalItemType playlistType;\n+\n+        private PlaylistTab() {\n+            this(-1, \"<no-name>\");\n+        }\n+\n+        public PlaylistTab(final long playlistId, final String playlistName) {\n+            this.playlistName = playlistName;\n+            this.playlistId = playlistId;\n+            this.playlistType = LocalItemType.PLAYLIST_LOCAL_ITEM;\n+            this.playlistServiceId = -1;\n+            this.playlistUrl = \"<no-url>\";\n+        }\n+\n+        public PlaylistTab(final int playlistServiceId, final String playlistUrl,\n+                           final String playlistName) {\n+            this.playlistServiceId = playlistServiceId;\n+            this.playlistUrl = playlistUrl;\n+            this.playlistName = playlistName;\n+            this.playlistType = LocalItemType.PLAYLIST_REMOTE_ITEM;\n+            this.playlistId = -1;\n+        }\n+\n+        public PlaylistTab(final JsonObject jsonObject) {\n+            super(jsonObject);\n+        }\n+\n+        @Override\n+        public int getTabId() {\n+            return ID;\n+        }\n+\n+        @Override\n+        public String getTabName(final Context context) {\n+            return playlistName;\n+        }\n+\n+        @DrawableRes\n+        @Override\n+        public int getTabIconRes(final Context context) {\n+            return ThemeHelper.resolveResourceIdFromAttr(context, R.attr.ic_bookmark);\n+        }\n+\n+        @Override\n+        public Fragment getFragment(final Context context) {\n+            if (playlistType == LocalItemType.PLAYLIST_LOCAL_ITEM) {\n+                return LocalPlaylistFragment.getInstance(playlistId, playlistName);\n+\n+            } else { // playlistType == LocalItemType.PLAYLIST_REMOTE_ITEM\n+                return PlaylistFragment.getInstance(playlistServiceId, playlistUrl, playlistName);\n+            }\n+        }\n+\n+        @Override\n+        protected void writeDataToJson(final JsonSink writerSink) {\n+            writerSink.value(JSON_PLAYLIST_SERVICE_ID_KEY, playlistServiceId)\n+                    .value(JSON_PLAYLIST_URL_KEY, playlistUrl)\n+                    .value(JSON_PLAYLIST_NAME_KEY, playlistName)\n+                    .value(JSON_PLAYLIST_ID_KEY, playlistId)\n+                    .value(JSON_PLAYLIST_TYPE_KEY, playlistType.toString());\n+        }\n+\n+        @Override\n+        protected void readDataFromJson(final JsonObject jsonObject) {\n+            playlistServiceId = jsonObject.getInt(JSON_PLAYLIST_SERVICE_ID_KEY, -1);\n+            playlistUrl = jsonObject.getString(JSON_PLAYLIST_URL_KEY, \"<no-url>\");\n+            playlistName = jsonObject.getString(JSON_PLAYLIST_NAME_KEY, \"<no-name>\");\n+            playlistId = jsonObject.getInt(JSON_PLAYLIST_ID_KEY, -1);\n+            playlistType = LocalItemType.valueOf(\n+                    jsonObject.getString(JSON_PLAYLIST_TYPE_KEY,\n+                            LocalItemType.PLAYLIST_LOCAL_ITEM.toString())\n+            );\n+        }\n+\n+        @Override\n+        public boolean equals(final Object obj) {\n+            final boolean baseEquals = super.equals(obj)\n+                    && Objects.equals(playlistType, ((PlaylistTab) obj).playlistType)\n+                    && Objects.equals(playlistName, ((PlaylistTab) obj).playlistName);\n+\n+            if (!baseEquals) {\n+                return false;\n+            }\n+\n+            final boolean localPlaylistEquals = playlistId == ((PlaylistTab) obj).playlistId;\n+            final boolean remotePlaylistEquals =\n+                    playlistServiceId == ((PlaylistTab) obj).playlistServiceId\n+                            && Objects.equals(playlistUrl, ((PlaylistTab) obj).playlistUrl);\n+\n+            return localPlaylistEquals || remotePlaylistEquals;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13f66b076d73ea7f126adab4a6c4bb8b213b6ace"}, "originalPosition": 154}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4Mzc0OTExOnYy", "diffSide": "RIGHT", "path": "app/src/main/res/values/strings.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMDowOTozMVrOGp_8ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOFQyMDowOTozMVrOGp_8ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjY5MjU0Nw==", "bodyText": "Resuggesting as GitHub does not show the other review comment\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                <string name=\"playlist_page_summary\">Playlist Page</string>\n          \n          \n            \n                <string name=\"playlist_page_summary\">Playlist page</string>", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3506#discussion_r446692547", "createdAt": "2020-06-28T20:09:31Z", "author": {"login": "Stypox"}, "path": "app/src/main/res/values/strings.xml", "diffHunk": "@@ -650,4 +652,5 @@\n     <string name=\"detail_sub_channel_thumbnail_view_description\">Channel\\'s avatar thumbnail</string>\n     <string name=\"channel_created_by\">Created by %s</string>\n     <string name=\"video_detail_by\">By %s</string>\n+    <string name=\"playlist_page_summary\">Playlist Page</string>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "13f66b076d73ea7f126adab4a6c4bb8b213b6ace"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3176, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}