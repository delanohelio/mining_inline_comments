{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYyNDI1OTAw", "number": 2957, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMDoxMjowMVrODXyzWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOToxNjo1OFrODZJDeQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI2Mjc2MTg3OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/org/schabi/newpipe/streams/SrtFromTtmlWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMDoxMjowMVrOFdSN_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0xNFQxMDoxMjowMVrOFdSN_g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NjI1MTUxOA==", "bodyText": "I guess this one is faster.\n    private final Charset charset = StandardCharsets.UTF_8;", "url": "https://github.com/TeamNewPipe/NewPipe/pull/2957#discussion_r366251518", "createdAt": "2020-01-14T10:12:01Z", "author": {"login": "TobiGr"}, "path": "app/src/main/java/org/schabi/newpipe/streams/SrtFromTtmlWriter.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package org.schabi.newpipe.streams;\n+\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n+import org.jsoup.nodes.Node;\n+import org.jsoup.nodes.TextNode;\n+import org.jsoup.parser.Parser;\n+import org.jsoup.select.Elements;\n+import org.schabi.newpipe.streams.io.SharpStream;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.text.ParseException;\n+\n+/**\n+ * @author kapodamy\n+ */\n+public class SrtFromTtmlWriter {\n+    private static final String NEW_LINE = \"\\r\\n\";\n+\n+    private SharpStream out;\n+    private boolean ignoreEmptyFrames;\n+    private final Charset charset = Charset.forName(\"utf-8\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "42ec6f0810332904fbb22d1d3dd87a8ce442c655"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3Njg4NzEyOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/org/schabi/newpipe/streams/SrtFromTtmlWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOToxNTowMVrOFfXl4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOToxNTowMVrOFfXl4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQzNjcwNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            .replace('.', ',');// Str uses comma as decimal separator\n          \n          \n            \n                            .replace('.', ',');// Srt uses comma as decimal separator", "url": "https://github.com/TeamNewPipe/NewPipe/pull/2957#discussion_r368436705", "createdAt": "2020-01-20T09:15:01Z", "author": {"login": "TobiGr"}, "path": "app/src/main/java/org/schabi/newpipe/streams/SrtFromTtmlWriter.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package org.schabi.newpipe.streams;\n+\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n+import org.jsoup.nodes.Node;\n+import org.jsoup.nodes.TextNode;\n+import org.jsoup.parser.Parser;\n+import org.jsoup.select.Elements;\n+import org.schabi.newpipe.streams.io.SharpStream;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+\n+/**\n+ * @author kapodamy\n+ */\n+public class SrtFromTtmlWriter {\n+    private static final String NEW_LINE = \"\\r\\n\";\n+\n+    private SharpStream out;\n+    private boolean ignoreEmptyFrames;\n+    private final Charset charset = StandardCharsets.UTF_8;\n+\n+    private int frameIndex = 0;\n+\n+    public SrtFromTtmlWriter(SharpStream out, boolean ignoreEmptyFrames) {\n+        this.out = out;\n+        this.ignoreEmptyFrames = ignoreEmptyFrames;\n+    }\n+\n+    private static String getTimestamp(Element frame, String attr) {\n+        return frame\n+                .attr(attr)\n+                .replace('.', ',');// Str uses comma as decimal separator", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2d3e2c7e0799fbc9fba717d7cc586dbf63ac241"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI3Njg5MzM3OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/org/schabi/newpipe/streams/SrtFromTtmlWriter.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOToxNjo1OFrOFfXpgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yMFQwOToxNjo1OFrOFfXpgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2ODQzNzYzMg==", "bodyText": "Just to increase readability.\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    Elements paragraph_list = doc.select(\"body>div>p\");\n          \n          \n            \n                    Elements paragraph_list = doc.select(\"body > div > p\");", "url": "https://github.com/TeamNewPipe/NewPipe/pull/2957#discussion_r368437632", "createdAt": "2020-01-20T09:16:58Z", "author": {"login": "TobiGr"}, "path": "app/src/main/java/org/schabi/newpipe/streams/SrtFromTtmlWriter.java", "diffHunk": "@@ -0,0 +1,95 @@\n+package org.schabi.newpipe.streams;\n+\n+import org.jsoup.Jsoup;\n+import org.jsoup.nodes.Document;\n+import org.jsoup.nodes.Element;\n+import org.jsoup.nodes.Node;\n+import org.jsoup.nodes.TextNode;\n+import org.jsoup.parser.Parser;\n+import org.jsoup.select.Elements;\n+import org.schabi.newpipe.streams.io.SharpStream;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.nio.charset.Charset;\n+import java.nio.charset.StandardCharsets;\n+\n+/**\n+ * @author kapodamy\n+ */\n+public class SrtFromTtmlWriter {\n+    private static final String NEW_LINE = \"\\r\\n\";\n+\n+    private SharpStream out;\n+    private boolean ignoreEmptyFrames;\n+    private final Charset charset = StandardCharsets.UTF_8;\n+\n+    private int frameIndex = 0;\n+\n+    public SrtFromTtmlWriter(SharpStream out, boolean ignoreEmptyFrames) {\n+        this.out = out;\n+        this.ignoreEmptyFrames = ignoreEmptyFrames;\n+    }\n+\n+    private static String getTimestamp(Element frame, String attr) {\n+        return frame\n+                .attr(attr)\n+                .replace('.', ',');// Str uses comma as decimal separator\n+    }\n+\n+    private void writeFrame(String begin, String end, StringBuilder text) throws IOException {\n+        writeString(String.valueOf(frameIndex++));\n+        writeString(NEW_LINE);\n+        writeString(begin);\n+        writeString(\" --> \");\n+        writeString(end);\n+        writeString(NEW_LINE);\n+        writeString(text.toString());\n+        writeString(NEW_LINE);\n+        writeString(NEW_LINE);\n+    }\n+\n+    private void writeString(String text) throws IOException {\n+        out.write(text.getBytes(charset));\n+    }\n+\n+    public void build(SharpStream ttml) throws IOException {\n+        /*\n+         * TTML parser with BASIC support\n+         * multiple CUE is not supported\n+         * styling is not supported\n+         * tag timestamps (in auto-generated subtitles) are not supported, maybe in the future\n+         * also TimestampTagOption enum is not applicable\n+         * Language parsing is not supported\n+         */\n+\n+        // parse XML\n+        byte[] buffer = new byte[(int) ttml.available()];\n+        ttml.read(buffer);\n+        Document doc = Jsoup.parse(new ByteArrayInputStream(buffer), \"UTF-8\", \"\", Parser.xmlParser());\n+\n+        StringBuilder text = new StringBuilder(128);\n+        Elements paragraph_list = doc.select(\"body>div>p\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a2d3e2c7e0799fbc9fba717d7cc586dbf63ac241"}, "originalPosition": 72}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3244, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}