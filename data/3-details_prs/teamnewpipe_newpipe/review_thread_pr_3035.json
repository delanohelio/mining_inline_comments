{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY4NzIyMTc5", "number": 3035, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMDowNjo0NVrODbtD8w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxNzoxOTozOVrODcbWxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwMzc2NDM1OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/org/schabi/newpipe/ReCaptchaActivity.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOVQyMDowNjo0NVrOFjV73A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDoxMTo0NVrOFj4cpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYwMzg2OA==", "bodyText": "It might be good to check the service id first. Just in case we get a reCAPTCHA from a different service.", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3035#discussion_r372603868", "createdAt": "2020-01-29T20:06:45Z", "author": {"login": "TobiGr"}, "path": "app/src/main/java/org/schabi/newpipe/ReCaptchaActivity.java", "diffHunk": "@@ -89,74 +91,89 @@ protected void onCreate(Bundle savedInstanceState) {\n         myWebView.loadUrl(url);\n     }\n \n-    private class ReCaptchaWebViewClient extends WebViewClient {\n-        private final Activity context;\n-        private String mCookies;\n+    @Override\n+    public boolean onCreateOptionsMenu(Menu menu) {\n+        boolean ret = super.onCreateOptionsMenu(menu);\n \n-        ReCaptchaWebViewClient(Activity ctx) {\n-            context = ctx;\n+        ActionBar actionBar = getSupportActionBar();\n+        if (actionBar != null) {\n+            actionBar.setDisplayHomeAsUpEnabled(true);\n+            actionBar.setHomeAsUpIndicator(getResources().getDrawable(R.drawable.ic_done_white_24dp));\n+            actionBar.setTitle(R.string.title_activity_recaptcha);\n+            actionBar.setSubtitle(R.string.subtitle_activity_recaptcha);\n         }\n \n-        @Override\n-        public void onPageStarted(WebView view, String url, Bitmap favicon) {\n-            // TODO: Start Loader\n-            super.onPageStarted(view, url, favicon);\n+        return ret;\n+    }\n+\n+    @Override\n+    public void onBackPressed() {\n+        saveCookiesAndFinish();\n+    }\n+\n+    @Override\n+    public boolean onOptionsItemSelected(MenuItem item) {\n+        int id = item.getItemId();\n+        switch (id) {\n+            case android.R.id.home:\n+                saveCookiesAndFinish();\n+                return true;\n+            default:\n+                return false;\n         }\n+    }\n \n-        @Override\n-        public void onPageFinished(WebView view, String url) {\n-            String cookies = CookieManager.getInstance().getCookie(url);\n+    private void saveCookiesAndFinish() {\n+        if (!foundCookies.isEmpty()) {\n+            // Give cookies to Downloader class\n+            DownloaderImpl.getInstance().setCookies(foundCookies);\n+            setResult(RESULT_OK);\n+        }\n \n-            // TODO: Stop Loader\n+        Intent intent = new Intent(this, org.schabi.newpipe.MainActivity.class);\n+        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n+        NavUtils.navigateUpTo(this, intent);\n+    }\n \n-            // find cookies : s_gl & goojf and Add cookies to Downloader\n-            if (find_access_cookies(cookies)) {\n-                // Give cookies to Downloader class\n-                DownloaderImpl.getInstance().setCookies(mCookies);\n \n-                // Closing activity and return to parent\n-                setResult(RESULT_OK);\n-                finish();\n-            }\n-        }\n \n-        private boolean find_access_cookies(String cookies) {\n-            boolean ret = false;\n-            String c_s_gl = \"\";\n-            String c_goojf = \"\";\n-\n-            String[] parts = cookies.split(\"; \");\n-            for (String part : parts) {\n-                if (part.trim().startsWith(\"s_gl\")) {\n-                    c_s_gl = part.trim();\n-                }\n-                if (part.trim().startsWith(\"goojf\")) {\n-                    c_goojf = part.trim();\n-                }\n+    private void handleCookies(@Nullable String cookies) {\n+        if (MainActivity.DEBUG) Log.d(TAG, \"handleCookies: cookies=\" + (cookies == null ? \"null\" : cookies));\n+        if (cookies == null) return;\n+\n+        addYoutubeCookies(cookies);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "702e41b1650236a3912536b2734241a758d70c57"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE1ODkwNA==", "bodyText": "This could be done, but it would require modifying the downloader making it service-aware, so that it can throw service-aware recaptcha exceptions. Another option would be to recognize the service from the url using its url handler, but API urls wouldn't be probably recognized.\nSo I think this is good as it is, since if the addYoutubeCookies() function is able to find YouTube cookies they get saved, otherwise they do not. And, as the comment on the line below suggests, it is simple to add new cookie extractors for other services in the future.", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3035#discussion_r373158904", "createdAt": "2020-01-30T19:49:56Z", "author": {"login": "Stypox"}, "path": "app/src/main/java/org/schabi/newpipe/ReCaptchaActivity.java", "diffHunk": "@@ -89,74 +91,89 @@ protected void onCreate(Bundle savedInstanceState) {\n         myWebView.loadUrl(url);\n     }\n \n-    private class ReCaptchaWebViewClient extends WebViewClient {\n-        private final Activity context;\n-        private String mCookies;\n+    @Override\n+    public boolean onCreateOptionsMenu(Menu menu) {\n+        boolean ret = super.onCreateOptionsMenu(menu);\n \n-        ReCaptchaWebViewClient(Activity ctx) {\n-            context = ctx;\n+        ActionBar actionBar = getSupportActionBar();\n+        if (actionBar != null) {\n+            actionBar.setDisplayHomeAsUpEnabled(true);\n+            actionBar.setHomeAsUpIndicator(getResources().getDrawable(R.drawable.ic_done_white_24dp));\n+            actionBar.setTitle(R.string.title_activity_recaptcha);\n+            actionBar.setSubtitle(R.string.subtitle_activity_recaptcha);\n         }\n \n-        @Override\n-        public void onPageStarted(WebView view, String url, Bitmap favicon) {\n-            // TODO: Start Loader\n-            super.onPageStarted(view, url, favicon);\n+        return ret;\n+    }\n+\n+    @Override\n+    public void onBackPressed() {\n+        saveCookiesAndFinish();\n+    }\n+\n+    @Override\n+    public boolean onOptionsItemSelected(MenuItem item) {\n+        int id = item.getItemId();\n+        switch (id) {\n+            case android.R.id.home:\n+                saveCookiesAndFinish();\n+                return true;\n+            default:\n+                return false;\n         }\n+    }\n \n-        @Override\n-        public void onPageFinished(WebView view, String url) {\n-            String cookies = CookieManager.getInstance().getCookie(url);\n+    private void saveCookiesAndFinish() {\n+        if (!foundCookies.isEmpty()) {\n+            // Give cookies to Downloader class\n+            DownloaderImpl.getInstance().setCookies(foundCookies);\n+            setResult(RESULT_OK);\n+        }\n \n-            // TODO: Stop Loader\n+        Intent intent = new Intent(this, org.schabi.newpipe.MainActivity.class);\n+        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n+        NavUtils.navigateUpTo(this, intent);\n+    }\n \n-            // find cookies : s_gl & goojf and Add cookies to Downloader\n-            if (find_access_cookies(cookies)) {\n-                // Give cookies to Downloader class\n-                DownloaderImpl.getInstance().setCookies(mCookies);\n \n-                // Closing activity and return to parent\n-                setResult(RESULT_OK);\n-                finish();\n-            }\n-        }\n \n-        private boolean find_access_cookies(String cookies) {\n-            boolean ret = false;\n-            String c_s_gl = \"\";\n-            String c_goojf = \"\";\n-\n-            String[] parts = cookies.split(\"; \");\n-            for (String part : parts) {\n-                if (part.trim().startsWith(\"s_gl\")) {\n-                    c_s_gl = part.trim();\n-                }\n-                if (part.trim().startsWith(\"goojf\")) {\n-                    c_goojf = part.trim();\n-                }\n+    private void handleCookies(@Nullable String cookies) {\n+        if (MainActivity.DEBUG) Log.d(TAG, \"handleCookies: cookies=\" + (cookies == null ? \"null\" : cookies));\n+        if (cookies == null) return;\n+\n+        addYoutubeCookies(cookies);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYwMzg2OA=="}, "originalCommit": {"oid": "702e41b1650236a3912536b2734241a758d70c57"}, "originalPosition": 171}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE2OTMxNg==", "bodyText": "Okay :)", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3035#discussion_r373169316", "createdAt": "2020-01-30T20:11:45Z", "author": {"login": "TobiGr"}, "path": "app/src/main/java/org/schabi/newpipe/ReCaptchaActivity.java", "diffHunk": "@@ -89,74 +91,89 @@ protected void onCreate(Bundle savedInstanceState) {\n         myWebView.loadUrl(url);\n     }\n \n-    private class ReCaptchaWebViewClient extends WebViewClient {\n-        private final Activity context;\n-        private String mCookies;\n+    @Override\n+    public boolean onCreateOptionsMenu(Menu menu) {\n+        boolean ret = super.onCreateOptionsMenu(menu);\n \n-        ReCaptchaWebViewClient(Activity ctx) {\n-            context = ctx;\n+        ActionBar actionBar = getSupportActionBar();\n+        if (actionBar != null) {\n+            actionBar.setDisplayHomeAsUpEnabled(true);\n+            actionBar.setHomeAsUpIndicator(getResources().getDrawable(R.drawable.ic_done_white_24dp));\n+            actionBar.setTitle(R.string.title_activity_recaptcha);\n+            actionBar.setSubtitle(R.string.subtitle_activity_recaptcha);\n         }\n \n-        @Override\n-        public void onPageStarted(WebView view, String url, Bitmap favicon) {\n-            // TODO: Start Loader\n-            super.onPageStarted(view, url, favicon);\n+        return ret;\n+    }\n+\n+    @Override\n+    public void onBackPressed() {\n+        saveCookiesAndFinish();\n+    }\n+\n+    @Override\n+    public boolean onOptionsItemSelected(MenuItem item) {\n+        int id = item.getItemId();\n+        switch (id) {\n+            case android.R.id.home:\n+                saveCookiesAndFinish();\n+                return true;\n+            default:\n+                return false;\n         }\n+    }\n \n-        @Override\n-        public void onPageFinished(WebView view, String url) {\n-            String cookies = CookieManager.getInstance().getCookie(url);\n+    private void saveCookiesAndFinish() {\n+        if (!foundCookies.isEmpty()) {\n+            // Give cookies to Downloader class\n+            DownloaderImpl.getInstance().setCookies(foundCookies);\n+            setResult(RESULT_OK);\n+        }\n \n-            // TODO: Stop Loader\n+        Intent intent = new Intent(this, org.schabi.newpipe.MainActivity.class);\n+        intent.addFlags(Intent.FLAG_ACTIVITY_CLEAR_TOP);\n+        NavUtils.navigateUpTo(this, intent);\n+    }\n \n-            // find cookies : s_gl & goojf and Add cookies to Downloader\n-            if (find_access_cookies(cookies)) {\n-                // Give cookies to Downloader class\n-                DownloaderImpl.getInstance().setCookies(mCookies);\n \n-                // Closing activity and return to parent\n-                setResult(RESULT_OK);\n-                finish();\n-            }\n-        }\n \n-        private boolean find_access_cookies(String cookies) {\n-            boolean ret = false;\n-            String c_s_gl = \"\";\n-            String c_goojf = \"\";\n-\n-            String[] parts = cookies.split(\"; \");\n-            for (String part : parts) {\n-                if (part.trim().startsWith(\"s_gl\")) {\n-                    c_s_gl = part.trim();\n-                }\n-                if (part.trim().startsWith(\"goojf\")) {\n-                    c_goojf = part.trim();\n-                }\n+    private void handleCookies(@Nullable String cookies) {\n+        if (MainActivity.DEBUG) Log.d(TAG, \"handleCookies: cookies=\" + (cookies == null ? \"null\" : cookies));\n+        if (cookies == null) return;\n+\n+        addYoutubeCookies(cookies);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MjYwMzg2OA=="}, "originalCommit": {"oid": "702e41b1650236a3912536b2734241a758d70c57"}, "originalPosition": 171}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNzQ1Mzg3OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/org/schabi/newpipe/ReCaptchaActivity.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQyMDo1MDowNFrOFj5eiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxMjozMDo1NlrOFkdk7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4NjE4NA==", "bodyText": "I was not able to get a reCAPTCHA while visiting peertube.co.uk, so I could not test your PR. However from what I can say when reading the code, it looks like there is no theme handling in the toolbar. Please ensure to have the correct button color when using the light theme.", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3035#discussion_r373186184", "createdAt": "2020-01-30T20:50:04Z", "author": {"login": "TobiGr"}, "path": "app/src/main/java/org/schabi/newpipe/ReCaptchaActivity.java", "diffHunk": "@@ -89,74 +90,89 @@ protected void onCreate(Bundle savedInstanceState) {\n         myWebView.loadUrl(url);\n     }\n \n-    private class ReCaptchaWebViewClient extends WebViewClient {\n-        private final Activity context;\n-        private String mCookies;\n+    @Override\n+    public boolean onCreateOptionsMenu(Menu menu) {\n+        boolean ret = super.onCreateOptionsMenu(menu);\n+\n+        ActionBar actionBar = getSupportActionBar();\n+        if (actionBar != null) {\n+            actionBar.setDisplayHomeAsUpEnabled(true);\n+            actionBar.setHomeAsUpIndicator(getResources().getDrawable(R.drawable.ic_done_white_24dp));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "54098b925f7e258f62544ee3092e4712e79bf9fb"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzYzNjM2NA==", "bodyText": "Unfortunately I am unable to test, too (I keep getting Network Errors in peertube.co.uk). But since the app bar background color is always red I don't think it is a problem to have an always white icon. @B0pol could you test how it looks with a white theme?", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3035#discussion_r373636364", "createdAt": "2020-01-31T19:04:16Z", "author": {"login": "Stypox"}, "path": "app/src/main/java/org/schabi/newpipe/ReCaptchaActivity.java", "diffHunk": "@@ -89,74 +90,89 @@ protected void onCreate(Bundle savedInstanceState) {\n         myWebView.loadUrl(url);\n     }\n \n-    private class ReCaptchaWebViewClient extends WebViewClient {\n-        private final Activity context;\n-        private String mCookies;\n+    @Override\n+    public boolean onCreateOptionsMenu(Menu menu) {\n+        boolean ret = super.onCreateOptionsMenu(menu);\n+\n+        ActionBar actionBar = getSupportActionBar();\n+        if (actionBar != null) {\n+            actionBar.setDisplayHomeAsUpEnabled(true);\n+            actionBar.setHomeAsUpIndicator(getResources().getDrawable(R.drawable.ic_done_white_24dp));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4NjE4NA=="}, "originalCommit": {"oid": "54098b925f7e258f62544ee3092e4712e79bf9fb"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzY0NDcxNA==", "bodyText": "Oh, apparently other menu icons are black in white theme even though they are on the exact same background color as dark theme, which is strange. With white theme this is, respectively, how the app and the recaptcha activity look: should I make the recaptcha activity's icon/text color black?", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3035#discussion_r373644714", "createdAt": "2020-01-31T19:23:49Z", "author": {"login": "Stypox"}, "path": "app/src/main/java/org/schabi/newpipe/ReCaptchaActivity.java", "diffHunk": "@@ -89,74 +90,89 @@ protected void onCreate(Bundle savedInstanceState) {\n         myWebView.loadUrl(url);\n     }\n \n-    private class ReCaptchaWebViewClient extends WebViewClient {\n-        private final Activity context;\n-        private String mCookies;\n+    @Override\n+    public boolean onCreateOptionsMenu(Menu menu) {\n+        boolean ret = super.onCreateOptionsMenu(menu);\n+\n+        ActionBar actionBar = getSupportActionBar();\n+        if (actionBar != null) {\n+            actionBar.setDisplayHomeAsUpEnabled(true);\n+            actionBar.setHomeAsUpIndicator(getResources().getDrawable(R.drawable.ic_done_white_24dp));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4NjE4NA=="}, "originalCommit": {"oid": "54098b925f7e258f62544ee3092e4712e79bf9fb"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc3NzY0Nw==", "bodyText": "I agree that the black text looks not good. But I'd suggest to use the same colors as in the current theme for consistency. Could you open an issue to ask for help polishing the light theme?", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3035#discussion_r373777647", "createdAt": "2020-02-01T12:30:56Z", "author": {"login": "TobiGr"}, "path": "app/src/main/java/org/schabi/newpipe/ReCaptchaActivity.java", "diffHunk": "@@ -89,74 +90,89 @@ protected void onCreate(Bundle savedInstanceState) {\n         myWebView.loadUrl(url);\n     }\n \n-    private class ReCaptchaWebViewClient extends WebViewClient {\n-        private final Activity context;\n-        private String mCookies;\n+    @Override\n+    public boolean onCreateOptionsMenu(Menu menu) {\n+        boolean ret = super.onCreateOptionsMenu(menu);\n+\n+        ActionBar actionBar = getSupportActionBar();\n+        if (actionBar != null) {\n+            actionBar.setDisplayHomeAsUpEnabled(true);\n+            actionBar.setHomeAsUpIndicator(getResources().getDrawable(R.drawable.ic_done_white_24dp));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzE4NjE4NA=="}, "originalCommit": {"oid": "54098b925f7e258f62544ee3092e4712e79bf9fb"}, "originalPosition": 96}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMTM0OTE3OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/org/schabi/newpipe/ReCaptchaActivity.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxNzoxOTozOVrOFkeY7A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wMVQxNzoxOTozOVrOFkeY7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mzc5MDk1Ng==", "bodyText": "I guess this was accidentally committed.", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3035#discussion_r373790956", "createdAt": "2020-02-01T17:19:39Z", "author": {"login": "TobiGr"}, "path": "app/src/main/java/org/schabi/newpipe/ReCaptchaActivity.java", "diffHunk": "@@ -138,8 +140,10 @@ private void saveCookiesAndFinish() {\n \n \n \n-    private void handleCookies(@Nullable String cookies) {\n-        if (MainActivity.DEBUG) Log.d(TAG, \"handleCookies: cookies=\" + (cookies == null ? \"null\" : cookies));\n+    private void handleCookies(String url) {\n+        String cookies = CookieManager.getInstance().getCookie(url);\n+        if (MainActivity.DEBUG) Log.d(TAG, \"handleCookies: url=\" + url + \"; cookies=\" + (cookies == null ? \"null\" : cookies));\n+        Log.e(TAG, \"handleCookies: url=\" + url + \"; cookies=\" + (cookies == null ? \"null\" : cookies));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c3c84dff643fe736e0729b65ff897df4d7d8d495"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3253, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}