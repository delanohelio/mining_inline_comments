{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0NTI0NzM1", "number": 3279, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxMDo0MDo1N1rODsTfKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxMDo0MDo1N1rODsTfKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3NzgzMjExOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxMDo0MDo1N1rOF9Ii4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxNzo1NjoyOVrOF9LLcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY0NzQ1OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    int errorId = exception instanceof YoutubeStreamExtractor.DecryptException\n          \n          \n            \n                            ? R.string.youtube_signature_decryption_error\n          \n          \n            \n                            : exception instanceof ParsingException\n          \n          \n            \n                            ? R.string.parsing_error\n          \n          \n            \n                            : R.string.general_error;\n          \n          \n            \n                    onUnrecoverableError(exception,\n          \n          \n            \n                            UserAction.REQUESTED_STREAM,\n          \n          \n            \n                            NewPipe.getNameOfService(serviceId),\n          \n          \n            \n                            url,\n          \n          \n            \n                            errorId);\n          \n          \n            \n                    int errorId = exception instanceof YoutubeStreamExtractor.DecryptException\n          \n          \n            \n                            ? R.string.youtube_signature_decryption_error\n          \n          \n            \n                            : exception instanceof ParsingException\n          \n          \n            \n                            ? R.string.parsing_error\n          \n          \n            \n                            : R.string.general_error;\n          \n          \n            \n            \n          \n          \n            \n                    onUnrecoverableError(exception,\n          \n          \n            \n                            UserAction.REQUESTED_STREAM,\n          \n          \n            \n                            NewPipe.getNameOfService(serviceId),\n          \n          \n            \n                            url,\n          \n          \n            \n                            errorId);", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3279#discussion_r399647458", "createdAt": "2020-03-28T10:40:57Z", "author": {"login": "TobiGr"}, "path": "app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java", "diffHunk": "@@ -1220,20 +1219,16 @@ public void openDownloadDialog() {\n     protected boolean onError(Throwable exception) {\n         if (super.onError(exception)) return true;\n \n-        else if (exception instanceof ContentNotAvailableException) {\n-            showError(getString(R.string.content_not_available), false);\n-        } else {\n-            int errorId = exception instanceof YoutubeStreamExtractor.DecryptException\n-                    ? R.string.youtube_signature_decryption_error\n-                    : exception instanceof ParsingException\n-                    ? R.string.parsing_error\n-                    : R.string.general_error;\n-            onUnrecoverableError(exception,\n-                    UserAction.REQUESTED_STREAM,\n-                    NewPipe.getNameOfService(serviceId),\n-                    url,\n-                    errorId);\n-        }\n+        int errorId = exception instanceof YoutubeStreamExtractor.DecryptException\n+                ? R.string.youtube_signature_decryption_error\n+                : exception instanceof ParsingException\n+                ? R.string.parsing_error\n+                : R.string.general_error;\n+        onUnrecoverableError(exception,\n+                UserAction.REQUESTED_STREAM,\n+                NewPipe.getNameOfService(serviceId),\n+                url,\n+                errorId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3fbc85fb09adc24084f7cefc202c73d7da23b542"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY5MDYxMA==", "bodyText": "Done.", "url": "https://github.com/TeamNewPipe/NewPipe/pull/3279#discussion_r399690610", "createdAt": "2020-03-28T17:56:29Z", "author": {"login": "mauriciocolli"}, "path": "app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java", "diffHunk": "@@ -1220,20 +1219,16 @@ public void openDownloadDialog() {\n     protected boolean onError(Throwable exception) {\n         if (super.onError(exception)) return true;\n \n-        else if (exception instanceof ContentNotAvailableException) {\n-            showError(getString(R.string.content_not_available), false);\n-        } else {\n-            int errorId = exception instanceof YoutubeStreamExtractor.DecryptException\n-                    ? R.string.youtube_signature_decryption_error\n-                    : exception instanceof ParsingException\n-                    ? R.string.parsing_error\n-                    : R.string.general_error;\n-            onUnrecoverableError(exception,\n-                    UserAction.REQUESTED_STREAM,\n-                    NewPipe.getNameOfService(serviceId),\n-                    url,\n-                    errorId);\n-        }\n+        int errorId = exception instanceof YoutubeStreamExtractor.DecryptException\n+                ? R.string.youtube_signature_decryption_error\n+                : exception instanceof ParsingException\n+                ? R.string.parsing_error\n+                : R.string.general_error;\n+        onUnrecoverableError(exception,\n+                UserAction.REQUESTED_STREAM,\n+                NewPipe.getNameOfService(serviceId),\n+                url,\n+                errorId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY0NzQ1OA=="}, "originalCommit": {"oid": "3fbc85fb09adc24084f7cefc202c73d7da23b542"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3216, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}