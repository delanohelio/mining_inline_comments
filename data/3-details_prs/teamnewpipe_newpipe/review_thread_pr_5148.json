{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM2OTQ4OTEw", "number": 5148, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMVQxNjozNToyOVrOFcyWkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMVQxOTozODo0NVrOFczf-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1NzI5NDI0OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/org/schabi/newpipe/error/ErrorActivity.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMVQxNjozNToyOVrOIo-IKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMVQxNjozNToyOVrOIo-IKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTgzMTg1MQ==", "bodyText": "I cannot comment on the line below...\nIt might be a good idea to use a slightly different Email subject:\npublic final String ERROR_EMAIL_SUBJECT\n            = \"Exception in  \" + getString(R.string.app_name) + BuildConfig.VERSION_NAME;", "url": "https://github.com/TeamNewPipe/NewPipe/pull/5148#discussion_r579831851", "createdAt": "2021-02-21T16:35:29Z", "author": {"login": "TobiGr"}, "path": "app/src/main/java/org/schabi/newpipe/error/ErrorActivity.java", "diffHunk": "@@ -70,7 +61,6 @@\n     public static final String TAG = ErrorActivity.class.toString();\n     // BUNDLE TAGS\n     public static final String ERROR_INFO = \"error_info\";\n-    public static final String ERROR_LIST = \"error_list\";\n \n     public static final String ERROR_EMAIL_ADDRESS = \"crashreport@newpipe.schabi.org\";\n     public static final String ERROR_EMAIL_SUBJECT", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ef7c6c4f67880e06ef7a1f7cdbd49bdb6bbff5e"}, "originalPosition": 54}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1NzQwMDc2OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/org/schabi/newpipe/error/ErrorPanelHelper.kt", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMVQxODoyMDozNlrOIo-7HA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMVQyMDo1NToyMFrOIpAG1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg0NDg5Mg==", "bodyText": "why is the companion object at the end of the file? (just a question, because it does not contain any important values)", "url": "https://github.com/TeamNewPipe/NewPipe/pull/5148#discussion_r579844892", "createdAt": "2021-02-21T18:20:36Z", "author": {"login": "TobiGr"}, "path": "app/src/main/java/org/schabi/newpipe/error/ErrorPanelHelper.kt", "diffHunk": "@@ -0,0 +1,121 @@\n+package org.schabi.newpipe.error\n+\n+import android.content.Context\n+import android.content.Intent\n+import android.util.Log\n+import android.view.View\n+import android.widget.Button\n+import android.widget.TextView\n+import androidx.core.view.isVisible\n+import androidx.fragment.app.Fragment\n+import com.jakewharton.rxbinding4.view.clicks\n+import io.reactivex.rxjava3.android.schedulers.AndroidSchedulers\n+import io.reactivex.rxjava3.disposables.Disposable\n+import org.schabi.newpipe.MainActivity\n+import org.schabi.newpipe.R\n+import org.schabi.newpipe.extractor.exceptions.ContentNotAvailableException\n+import org.schabi.newpipe.extractor.exceptions.ContentNotSupportedException\n+import org.schabi.newpipe.extractor.exceptions.ReCaptchaException\n+import org.schabi.newpipe.ktx.animate\n+import org.schabi.newpipe.ktx.isInterruptedCaused\n+import org.schabi.newpipe.ktx.isNetworkRelated\n+import java.util.concurrent.TimeUnit\n+\n+class ErrorPanelHelper(\n+    private val fragment: Fragment,\n+    rootView: View,\n+    onRetry: Runnable\n+) {\n+    private val context: Context = rootView.context!!\n+    private val errorPanelRoot: View = rootView.findViewById(R.id.error_panel)\n+    private val errorTextView: TextView = errorPanelRoot.findViewById(R.id.error_message_view)\n+    private val errorButtonAction: Button = errorPanelRoot.findViewById(R.id.error_button_action)\n+    private val errorButtonRetry: Button = errorPanelRoot.findViewById(R.id.error_button_retry)\n+\n+    private var errorDisposable: Disposable? = null\n+\n+    init {\n+        errorDisposable = errorButtonRetry.clicks()\n+            .debounce(300, TimeUnit.MILLISECONDS)\n+            .observeOn(AndroidSchedulers.mainThread())\n+            .subscribe { onRetry.run() }\n+    }\n+\n+    fun showError(errorInfo: ErrorInfo) {\n+\n+        if (errorInfo.throwable != null && errorInfo.throwable!!.isInterruptedCaused) {\n+            if (DEBUG) {\n+                Log.w(TAG, \"onError() isInterruptedCaused! = [$errorInfo.throwable]\")\n+            }\n+            return\n+        }\n+\n+        errorButtonAction.isVisible = true\n+        if (errorInfo.throwable is ReCaptchaException) {\n+            errorButtonAction.setText(R.string.recaptcha_solve)\n+            errorButtonAction.setOnClickListener {\n+                // Starting ReCaptcha Challenge Activity\n+                val intent = Intent(context, ReCaptchaActivity::class.java)\n+                intent.putExtra(\n+                    ReCaptchaActivity.RECAPTCHA_URL_EXTRA,\n+                    (errorInfo.throwable as ReCaptchaException).url\n+                )\n+                fragment.startActivityForResult(intent, ReCaptchaActivity.RECAPTCHA_REQUEST)\n+                errorButtonAction.setOnClickListener(null)\n+            }\n+            errorTextView.setText(R.string.recaptcha_request_toast)\n+            errorButtonRetry.isVisible = true\n+        } else {\n+            errorButtonAction.setText(R.string.error_snackbar_action)\n+            errorButtonAction.setOnClickListener {\n+                ErrorActivity.reportError(context, errorInfo)\n+            }\n+\n+            when {\n+                errorInfo.throwable is ContentNotAvailableException -> {\n+                    errorTextView.setText(R.string.content_not_available)\n+                    errorButtonRetry.isVisible = false\n+                }\n+                errorInfo.throwable != null && errorInfo.throwable!!.isNetworkRelated -> {\n+                    errorTextView.setText(R.string.network_error)\n+                    errorButtonRetry.isVisible = true\n+                }\n+                errorInfo.throwable is ContentNotSupportedException -> {\n+                    errorTextView.setText(R.string.content_not_supported)\n+                    errorButtonRetry.isVisible = false\n+                }\n+                else -> {\n+                    errorTextView.setText(R.string.error_snackbar_message)\n+                    errorButtonRetry.isVisible = true\n+                }\n+            }\n+        }\n+        errorPanelRoot.animate(true, 300)\n+    }\n+\n+    fun showTextError(errorString: String) {\n+        errorButtonAction.isVisible = false\n+        errorButtonRetry.isVisible = false\n+        errorTextView.text = errorString\n+    }\n+\n+    fun hide() {\n+        errorButtonAction.setOnClickListener(null)\n+        errorPanelRoot.animate(false, 150)\n+    }\n+\n+    fun isVisible(): Boolean {\n+        return errorPanelRoot.isVisible\n+    }\n+\n+    fun dispose() {\n+        errorButtonAction.setOnClickListener(null)\n+        errorButtonRetry.setOnClickListener(null)\n+        errorDisposable?.dispose()\n+    }\n+\n+    companion object {\n+        val TAG: String = ErrorPanelHelper::class.simpleName!!\n+        val DEBUG: Boolean = MainActivity.DEBUG\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ef7c6c4f67880e06ef7a1f7cdbd49bdb6bbff5e"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg2NDI3OQ==", "bodyText": "Isn't that the standard for Kotlin?", "url": "https://github.com/TeamNewPipe/NewPipe/pull/5148#discussion_r579864279", "createdAt": "2021-02-21T20:55:20Z", "author": {"login": "Stypox"}, "path": "app/src/main/java/org/schabi/newpipe/error/ErrorPanelHelper.kt", "diffHunk": "@@ -0,0 +1,121 @@\n+package org.schabi.newpipe.error\n+\n+import android.content.Context\n+import android.content.Intent\n+import android.util.Log\n+import android.view.View\n+import android.widget.Button\n+import android.widget.TextView\n+import androidx.core.view.isVisible\n+import androidx.fragment.app.Fragment\n+import com.jakewharton.rxbinding4.view.clicks\n+import io.reactivex.rxjava3.android.schedulers.AndroidSchedulers\n+import io.reactivex.rxjava3.disposables.Disposable\n+import org.schabi.newpipe.MainActivity\n+import org.schabi.newpipe.R\n+import org.schabi.newpipe.extractor.exceptions.ContentNotAvailableException\n+import org.schabi.newpipe.extractor.exceptions.ContentNotSupportedException\n+import org.schabi.newpipe.extractor.exceptions.ReCaptchaException\n+import org.schabi.newpipe.ktx.animate\n+import org.schabi.newpipe.ktx.isInterruptedCaused\n+import org.schabi.newpipe.ktx.isNetworkRelated\n+import java.util.concurrent.TimeUnit\n+\n+class ErrorPanelHelper(\n+    private val fragment: Fragment,\n+    rootView: View,\n+    onRetry: Runnable\n+) {\n+    private val context: Context = rootView.context!!\n+    private val errorPanelRoot: View = rootView.findViewById(R.id.error_panel)\n+    private val errorTextView: TextView = errorPanelRoot.findViewById(R.id.error_message_view)\n+    private val errorButtonAction: Button = errorPanelRoot.findViewById(R.id.error_button_action)\n+    private val errorButtonRetry: Button = errorPanelRoot.findViewById(R.id.error_button_retry)\n+\n+    private var errorDisposable: Disposable? = null\n+\n+    init {\n+        errorDisposable = errorButtonRetry.clicks()\n+            .debounce(300, TimeUnit.MILLISECONDS)\n+            .observeOn(AndroidSchedulers.mainThread())\n+            .subscribe { onRetry.run() }\n+    }\n+\n+    fun showError(errorInfo: ErrorInfo) {\n+\n+        if (errorInfo.throwable != null && errorInfo.throwable!!.isInterruptedCaused) {\n+            if (DEBUG) {\n+                Log.w(TAG, \"onError() isInterruptedCaused! = [$errorInfo.throwable]\")\n+            }\n+            return\n+        }\n+\n+        errorButtonAction.isVisible = true\n+        if (errorInfo.throwable is ReCaptchaException) {\n+            errorButtonAction.setText(R.string.recaptcha_solve)\n+            errorButtonAction.setOnClickListener {\n+                // Starting ReCaptcha Challenge Activity\n+                val intent = Intent(context, ReCaptchaActivity::class.java)\n+                intent.putExtra(\n+                    ReCaptchaActivity.RECAPTCHA_URL_EXTRA,\n+                    (errorInfo.throwable as ReCaptchaException).url\n+                )\n+                fragment.startActivityForResult(intent, ReCaptchaActivity.RECAPTCHA_REQUEST)\n+                errorButtonAction.setOnClickListener(null)\n+            }\n+            errorTextView.setText(R.string.recaptcha_request_toast)\n+            errorButtonRetry.isVisible = true\n+        } else {\n+            errorButtonAction.setText(R.string.error_snackbar_action)\n+            errorButtonAction.setOnClickListener {\n+                ErrorActivity.reportError(context, errorInfo)\n+            }\n+\n+            when {\n+                errorInfo.throwable is ContentNotAvailableException -> {\n+                    errorTextView.setText(R.string.content_not_available)\n+                    errorButtonRetry.isVisible = false\n+                }\n+                errorInfo.throwable != null && errorInfo.throwable!!.isNetworkRelated -> {\n+                    errorTextView.setText(R.string.network_error)\n+                    errorButtonRetry.isVisible = true\n+                }\n+                errorInfo.throwable is ContentNotSupportedException -> {\n+                    errorTextView.setText(R.string.content_not_supported)\n+                    errorButtonRetry.isVisible = false\n+                }\n+                else -> {\n+                    errorTextView.setText(R.string.error_snackbar_message)\n+                    errorButtonRetry.isVisible = true\n+                }\n+            }\n+        }\n+        errorPanelRoot.animate(true, 300)\n+    }\n+\n+    fun showTextError(errorString: String) {\n+        errorButtonAction.isVisible = false\n+        errorButtonRetry.isVisible = false\n+        errorTextView.text = errorString\n+    }\n+\n+    fun hide() {\n+        errorButtonAction.setOnClickListener(null)\n+        errorPanelRoot.animate(false, 150)\n+    }\n+\n+    fun isVisible(): Boolean {\n+        return errorPanelRoot.isVisible\n+    }\n+\n+    fun dispose() {\n+        errorButtonAction.setOnClickListener(null)\n+        errorButtonRetry.setOnClickListener(null)\n+        errorDisposable?.dispose()\n+    }\n+\n+    companion object {\n+        val TAG: String = ErrorPanelHelper::class.simpleName!!\n+        val DEBUG: Boolean = MainActivity.DEBUG\n+    }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg0NDg5Mg=="}, "originalCommit": {"oid": "7ef7c6c4f67880e06ef7a1f7cdbd49bdb6bbff5e"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1NzQxOTcxOnYy", "diffSide": "RIGHT", "path": "app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMVQxODozOTowNVrOIo_EJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMVQyMDo1Njo1OFrOIpAHuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg0NzIwNQ==", "bodyText": "Why is this needed?", "url": "https://github.com/TeamNewPipe/NewPipe/pull/5148#discussion_r579847205", "createdAt": "2021-02-21T18:39:05Z", "author": {"login": "TobiGr"}, "path": "app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java", "diffHunk": "@@ -932,18 +927,22 @@ private void initTabs() {\n         }\n \n         if (showRelatedStreams && binding.relatedStreamsLayout == null) {\n-            //temp empty fragment. will be updated in handleResult\n-            pageAdapter.addFragment(new Fragment(), RELATED_TAB_TAG);\n+            // temp empty fragment. will be updated in handleResult\n+            pageAdapter.addFragment(new EmptyFragment(false), RELATED_TAB_TAG);\n             tabIcons.add(R.drawable.ic_art_track_white_24dp);\n             tabContentDescriptions.add(R.string.related_streams_tab_description);\n         }\n \n         if (showDescription) {\n             // temp empty fragment. will be updated in handleResult\n-            pageAdapter.addFragment(new Fragment(), DESCRIPTION_TAB_TAG);\n+            pageAdapter.addFragment(new EmptyFragment(false), DESCRIPTION_TAB_TAG);\n             tabIcons.add(R.drawable.ic_description_white_24dp);\n             tabContentDescriptions.add(R.string.description_tab_description);\n         }\n+\n+        if (pageAdapter.getCount() == 0) {\n+            pageAdapter.addFragment(new EmptyFragment(true), EMPTY_TAB_TAG);\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ef7c6c4f67880e06ef7a1f7cdbd49bdb6bbff5e"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg2NDUwNw==", "bodyText": "Because otherwise there would be scrolling issues, since the scrollable view would not extend to the lower half of the screen", "url": "https://github.com/TeamNewPipe/NewPipe/pull/5148#discussion_r579864507", "createdAt": "2021-02-21T20:56:58Z", "author": {"login": "Stypox"}, "path": "app/src/main/java/org/schabi/newpipe/fragments/detail/VideoDetailFragment.java", "diffHunk": "@@ -932,18 +927,22 @@ private void initTabs() {\n         }\n \n         if (showRelatedStreams && binding.relatedStreamsLayout == null) {\n-            //temp empty fragment. will be updated in handleResult\n-            pageAdapter.addFragment(new Fragment(), RELATED_TAB_TAG);\n+            // temp empty fragment. will be updated in handleResult\n+            pageAdapter.addFragment(new EmptyFragment(false), RELATED_TAB_TAG);\n             tabIcons.add(R.drawable.ic_art_track_white_24dp);\n             tabContentDescriptions.add(R.string.related_streams_tab_description);\n         }\n \n         if (showDescription) {\n             // temp empty fragment. will be updated in handleResult\n-            pageAdapter.addFragment(new Fragment(), DESCRIPTION_TAB_TAG);\n+            pageAdapter.addFragment(new EmptyFragment(false), DESCRIPTION_TAB_TAG);\n             tabIcons.add(R.drawable.ic_description_white_24dp);\n             tabContentDescriptions.add(R.string.description_tab_description);\n         }\n+\n+        if (pageAdapter.getCount() == 0) {\n+            pageAdapter.addFragment(new EmptyFragment(true), EMPTY_TAB_TAG);\n+        }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg0NzIwNQ=="}, "originalCommit": {"oid": "7ef7c6c4f67880e06ef7a1f7cdbd49bdb6bbff5e"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzY1NzQ4MjE5OnYy", "diffSide": "RIGHT", "path": "app/src/main/java/org/schabi/newpipe/local/subscription/SubscriptionsImportFragment.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMVQxOTozODo0NVrOIo_hjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMS0wMi0yMVQxOTozODo0NVrOIo_hjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU3OTg1NDczNQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                                        \"Service don't support importing\",\n          \n          \n            \n                                        \"Service does not support importing subscriptions\",", "url": "https://github.com/TeamNewPipe/NewPipe/pull/5148#discussion_r579854735", "createdAt": "2021-02-21T19:38:45Z", "author": {"login": "TobiGr"}, "path": "app/src/main/java/org/schabi/newpipe/local/subscription/SubscriptionsImportFragment.java", "diffHunk": "@@ -84,10 +84,12 @@ public void onCreate(final Bundle savedInstanceState) {\n \n         setupServiceVariables();\n         if (supportedSources.isEmpty() && currentServiceId != Constants.NO_SERVICE_ID) {\n-            ErrorActivity.reportError(activity, Collections.emptyList(), null, null,\n-                    ErrorInfo.make(UserAction.SOMETHING_ELSE,\n+            ErrorActivity.reportErrorInSnackbar(activity,\n+                    new ErrorInfo(new String[]{}, UserAction.SUBSCRIPTION_IMPORT_EXPORT,\n                             NewPipe.getNameOfService(currentServiceId),\n-                            \"Service don't support importing\", R.string.general_error));\n+                            \"Service don't support importing\",", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7ef7c6c4f67880e06ef7a1f7cdbd49bdb6bbff5e"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3022, "cost": 1, "resetAt": "2021-11-13T14:23:39Z"}}}