{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwNzExMzQ1", "number": 9, "title": "Request body with test", "bodyText": "#7 - implemented request body publisher and unit test. Enabled qulice.", "createdAt": "2020-02-04T08:43:55Z", "url": "https://github.com/artipie/http/pull/9", "merged": true, "mergeCommit": {"oid": "4090c033cc8503b74c0ae8ba7ffebd9d71e06f6d"}, "closed": true, "closedAt": "2020-02-04T13:03:27Z", "author": {"login": "g4s8"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcAvmdtAH2gAyMzcwNzExMzQ1OjE1NzFkN2U1YjRlNjE0MDRiNGJhNDA3OTAwOTNlMDIyZTY5M2ZmZmE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBABy3AFqTM1MjkxMTcyMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "1571d7e5b4e61404b4ba40790093e022e693fffa", "author": {"user": {"login": "g4s8", "name": "Kirill"}}, "url": "https://github.com/artipie/http/commit/1571d7e5b4e61404b4ba40790093e022e693fffa", "committedDate": "2020-02-03T16:33:38Z", "message": "#7 - stream publisher"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ada3b10d43ec1e9c854f9e4a0339f3f8b60272c9", "author": {"user": {"login": "g4s8", "name": "Kirill"}}, "url": "https://github.com/artipie/http/commit/ada3b10d43ec1e9c854f9e4a0339f3f8b60272c9", "committedDate": "2020-02-04T08:39:35Z", "message": "#7 - request body"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyODE4ODU3", "url": "https://github.com/artipie/http/pull/9#pullrequestreview-352818857", "createdAt": "2020-02-04T09:13:34Z", "commit": {"oid": "ada3b10d43ec1e9c854f9e4a0339f3f8b60272c9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToxMzozNVrOFlMwPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQwOToyMToxMVrOFlM-Kg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1MDU5MQ==", "bodyText": "@g4s8 I get the feeling I see this kind of rx dependencies in all the artipie projects. Can you add a comment <!-- --> explaining what they are for? They are for tests, obviously, but what tools do they actually provide?", "url": "https://github.com/artipie/http/pull/9#discussion_r374550591", "createdAt": "2020-02-04T09:13:35Z", "author": {"login": "amihaiemil"}, "path": "pom.xml", "diffHunk": "@@ -44,6 +44,18 @@\n       <version>${junit-platform.version}</version>\n       <scope>test</scope>\n     </dependency>\n+    <dependency>\n+      <groupId>io.reactivex.rxjava3</groupId>\n+      <artifactId>rxjava</artifactId>\n+      <version>3.0.0-RC6</version>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>com.github.akarnokd</groupId>\n+      <artifactId>rxjava3-jdk8-interop</artifactId>\n+      <version>3.0.0-RC6</version>\n+      <scope>test</scope>\n+    </dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ada3b10d43ec1e9c854f9e4a0339f3f8b60272c9"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1MDc4Nw==", "bodyText": "@g4s8 I guess this is the max buffersize. Should we name it as such?", "url": "https://github.com/artipie/http/pull/9#discussion_r374550787", "createdAt": "2020-02-04T09:14:00Z", "author": {"login": "amihaiemil"}, "path": "src/main/java/com/artipie/http/tk/TkRequest.java", "diffHunk": "@@ -86,6 +86,11 @@ public String line() throws IOException {\n      */\n     private static final class BodySubstription implements Subscription {\n \n+        /**\n+         * Buffer size for stream reading.\n+         */\n+        private static final int BUF_SIZE = 1024 * 8;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ada3b10d43ec1e9c854f9e4a0339f3f8b60272c9"}, "originalPosition": 7}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1MTE5NA==", "bodyText": "@g4s8 Can we have a test for this method as well? For instance, what happens if cancel() is called twice, or if request(bytes) is called after cancel()?", "url": "https://github.com/artipie/http/pull/9#discussion_r374551194", "createdAt": "2020-02-04T09:14:56Z", "author": {"login": "amihaiemil"}, "path": "src/main/java/com/artipie/http/tk/TkRequest.java", "diffHunk": "@@ -108,16 +113,52 @@ public String line() throws IOException {\n \n         @Override\n         public void request(final long bytes) {\n-            throw new UnsupportedOperationException(\n-                String.format(\"request not implemented: %s/%s\", this.stream, this.receiver)\n-            );\n+            try {\n+                this.read(bytes);\n+            } catch (final IOException | IllegalArgumentException err) {\n+                this.receiver.onError(err);\n+            }\n         }\n \n         @Override\n         public void cancel() {\n-            throw new UnsupportedOperationException(\n-                String.format(\"cancel not implemented: %s/%s\", this.stream, this.receiver)\n-            );\n+            try {\n+                this.stream.close();\n+            } catch (final IOException err) {\n+                this.receiver.onError(err);\n+            }\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ada3b10d43ec1e9c854f9e4a0339f3f8b60272c9"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1MTQ5Mg==", "bodyText": "@g4s8 I would put this if in the request() method, right before calling this method.", "url": "https://github.com/artipie/http/pull/9#discussion_r374551492", "createdAt": "2020-02-04T09:15:36Z", "author": {"login": "amihaiemil"}, "path": "src/main/java/com/artipie/http/tk/TkRequest.java", "diffHunk": "@@ -108,16 +113,52 @@ public String line() throws IOException {\n \n         @Override\n         public void request(final long bytes) {\n-            throw new UnsupportedOperationException(\n-                String.format(\"request not implemented: %s/%s\", this.stream, this.receiver)\n-            );\n+            try {\n+                this.read(bytes);\n+            } catch (final IOException | IllegalArgumentException err) {\n+                this.receiver.onError(err);\n+            }\n         }\n \n         @Override\n         public void cancel() {\n-            throw new UnsupportedOperationException(\n-                String.format(\"cancel not implemented: %s/%s\", this.stream, this.receiver)\n-            );\n+            try {\n+                this.stream.close();\n+            } catch (final IOException err) {\n+                this.receiver.onError(err);\n+            }\n+        }\n+\n+        /**\n+         * Read bytes from stream into receiver.\n+         * @param bytes Amount of bytes to read\n+         * @throws IOException On stream error\n+         */\n+        private void read(final long bytes) throws IOException {\n+            if (bytes <= 0) {\n+                throw new IllegalArgumentException(String.format(\"can't request %d bytes\", bytes));\n+            }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ada3b10d43ec1e9c854f9e4a0339f3f8b60272c9"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1MjUzMg==", "bodyText": "@g4s8 Is it possible to write this test by using a String, or some chars? Something more meaningful than actual hardcoded bytes :D", "url": "https://github.com/artipie/http/pull/9#discussion_r374552532", "createdAt": "2020-02-04T09:17:51Z", "author": {"login": "amihaiemil"}, "path": "src/test/java/com/artipie/http/tk/TkRequestTest.java", "diffHunk": "@@ -77,4 +80,30 @@ void readsEmptyHeaders() throws Exception {\n             Matchers.anEmptyMap()\n         );\n     }\n+\n+    @Test\n+    void readsBody() throws Exception {\n+        final byte[] body = new byte[]{0x00, 0x01, 0x02, 0x03};", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ada3b10d43ec1e9c854f9e4a0339f3f8b60272c9"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1MzE0Ng==", "bodyText": "@g4s8 onNext what? What does this method do actually? :D", "url": "https://github.com/artipie/http/pull/9#discussion_r374553146", "createdAt": "2020-02-04T09:19:09Z", "author": {"login": "amihaiemil"}, "path": "src/main/java/com/artipie/http/tk/TkRequest.java", "diffHunk": "@@ -108,16 +113,52 @@ public String line() throws IOException {\n \n         @Override\n         public void request(final long bytes) {\n-            throw new UnsupportedOperationException(\n-                String.format(\"request not implemented: %s/%s\", this.stream, this.receiver)\n-            );\n+            try {\n+                this.read(bytes);\n+            } catch (final IOException | IllegalArgumentException err) {\n+                this.receiver.onError(err);\n+            }\n         }\n \n         @Override\n         public void cancel() {\n-            throw new UnsupportedOperationException(\n-                String.format(\"cancel not implemented: %s/%s\", this.stream, this.receiver)\n-            );\n+            try {\n+                this.stream.close();\n+            } catch (final IOException err) {\n+                this.receiver.onError(err);\n+            }\n+        }\n+\n+        /**\n+         * Read bytes from stream into receiver.\n+         * @param bytes Amount of bytes to read\n+         * @throws IOException On stream error\n+         */\n+        private void read(final long bytes) throws IOException {\n+            if (bytes <= 0) {\n+                throw new IllegalArgumentException(String.format(\"can't request %d bytes\", bytes));\n+            }\n+            final byte[] buf = new byte[TkRequest.BodySubstription.BUF_SIZE];\n+            long total = 0;\n+            while (total < bytes) {\n+                final int len;\n+                if (total + TkRequest.BodySubstription.BUF_SIZE <= bytes) {\n+                    len = TkRequest.BodySubstription.BUF_SIZE;\n+                } else {\n+                    len = (int) (bytes - total);\n+                }\n+                final int read = this.stream.read(buf, 0, len);\n+                total += read;\n+                if (read == -1) {\n+                    this.stream.close();\n+                    this.receiver.onComplete();\n+                    break;\n+                } else {\n+                    for (int pos = 0; pos < read; ++pos) {\n+                        this.receiver.onNext(buf[pos]);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ada3b10d43ec1e9c854f9e4a0339f3f8b60272c9"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDU1NDE1NA==", "bodyText": "@g4s8 I think this should be >= instead of <=. So if the maximum buf size is exceeded, then len takes buf_size. But I am not sure :D\nUgly algorithm... Isn't it possible to write this algorithm with class IOUtils from Apache Commons or something?", "url": "https://github.com/artipie/http/pull/9#discussion_r374554154", "createdAt": "2020-02-04T09:21:11Z", "author": {"login": "amihaiemil"}, "path": "src/main/java/com/artipie/http/tk/TkRequest.java", "diffHunk": "@@ -108,16 +113,52 @@ public String line() throws IOException {\n \n         @Override\n         public void request(final long bytes) {\n-            throw new UnsupportedOperationException(\n-                String.format(\"request not implemented: %s/%s\", this.stream, this.receiver)\n-            );\n+            try {\n+                this.read(bytes);\n+            } catch (final IOException | IllegalArgumentException err) {\n+                this.receiver.onError(err);\n+            }\n         }\n \n         @Override\n         public void cancel() {\n-            throw new UnsupportedOperationException(\n-                String.format(\"cancel not implemented: %s/%s\", this.stream, this.receiver)\n-            );\n+            try {\n+                this.stream.close();\n+            } catch (final IOException err) {\n+                this.receiver.onError(err);\n+            }\n+        }\n+\n+        /**\n+         * Read bytes from stream into receiver.\n+         * @param bytes Amount of bytes to read\n+         * @throws IOException On stream error\n+         */\n+        private void read(final long bytes) throws IOException {\n+            if (bytes <= 0) {\n+                throw new IllegalArgumentException(String.format(\"can't request %d bytes\", bytes));\n+            }\n+            final byte[] buf = new byte[TkRequest.BodySubstription.BUF_SIZE];\n+            long total = 0;\n+            while (total < bytes) {\n+                final int len;\n+                if (total + TkRequest.BodySubstription.BUF_SIZE <= bytes) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ada3b10d43ec1e9c854f9e4a0339f3f8b60272c9"}, "originalPosition": 51}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de96b7ec3e7edd1daf99b6323ec2dd258dc8d82b", "author": {"user": {"login": "g4s8", "name": "Kirill"}}, "url": "https://github.com/artipie/http/commit/de96b7ec3e7edd1daf99b6323ec2dd258dc8d82b", "committedDate": "2020-02-04T11:19:46Z", "message": "#7 - (cr) review fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyOTExNzIz", "url": "https://github.com/artipie/http/pull/9#pullrequestreview-352911723", "createdAt": "2020-02-04T11:41:58Z", "commit": {"oid": "de96b7ec3e7edd1daf99b6323ec2dd258dc8d82b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3274, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}