{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5MjIzMzU3", "number": 77, "title": "116 1", "bodyText": "add RsWithHeaders object", "createdAt": "2020-03-16T13:07:34Z", "url": "https://github.com/artipie/http/pull/77", "merged": true, "mergeCommit": {"oid": "878d09e2a1b67c2914c4b1f8448b693f5d1a11e3"}, "closed": true, "closedAt": "2020-03-18T11:55:04Z", "author": {"login": "Guseyn"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcONBpNgH2gAyMzg5MjIzMzU3OjJkMzViMDYyM2U0NTE1ZGViY2ZhMTJhMGIyNmNkMWZmMDc2ODg2ZGM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcO19XUgH2gAyMzg5MjIzMzU3OjU2ODAyMmY0NGUwZTc0ZWJlNTE3NGU2NGQ2YmIyMjMzYTNiMzJjM2U=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2d35b0623e4515debcfa12a0b26cd1ff076886dc", "author": {"user": {"login": "Guseyn", "name": "Guseyn Ismayylov"}}, "url": "https://github.com/artipie/http/commit/2d35b0623e4515debcfa12a0b26cd1ff076886dc", "committedDate": "2020-03-16T12:11:35Z", "message": "resolve #116"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3e57d37d0a783eaead9cd265975d11223751c5c5", "author": {"user": {"login": "Guseyn", "name": "Guseyn Ismayylov"}}, "url": "https://github.com/artipie/http/commit/3e57d37d0a783eaead9cd265975d11223751c5c5", "committedDate": "2020-03-16T13:05:16Z", "message": "fix lint"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "696632f353e7d1b42ff0ce99251e9a6e0875686f", "author": {"user": {"login": "Guseyn", "name": "Guseyn Ismayylov"}}, "url": "https://github.com/artipie/http/commit/696632f353e7d1b42ff0ce99251e9a6e0875686f", "committedDate": "2020-03-16T14:12:49Z", "message": "concat headers"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1NzE3NjIx", "url": "https://github.com/artipie/http/pull/77#pullrequestreview-375717621", "createdAt": "2020-03-17T03:27:16Z", "commit": {"oid": "696632f353e7d1b42ff0ce99251e9a6e0875686f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMzoyNzoxNlrOF3MyUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QwMzoyNzoxNlrOF3MyUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzQyNTQ5MQ==", "bodyText": "@Guseyn Here we are adding new headers instead of overriding them as the javadoc says, is that right?", "url": "https://github.com/artipie/http/pull/77#discussion_r393425491", "createdAt": "2020-03-17T03:27:16Z", "author": {"login": "paulodamaso"}, "path": "src/main/java/com/artipie/http/rs/RsWithHeaders.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.rs;\n+\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import com.google.common.collect.Iterables;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.CompletionStage;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * RsWithHeaders.\n+ *\n+ * @since 0.1\n+ */\n+public final class RsWithHeaders implements Response {\n+\n+    /**\n+     * Origin response.\n+     */\n+    private final Response origin;\n+\n+    /**\n+     * Headers.\n+     */\n+    private final Iterable<Map.Entry<String, String>> headers;\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param origin Response\n+     * @param headers Headers\n+     */\n+    public RsWithHeaders(\n+        final Response origin,\n+        final Iterable<Map.Entry<String, String>> headers) {\n+        this.origin = origin;\n+        this.headers = headers;\n+    }\n+\n+    @Override\n+    public CompletionStage<Void> send(final Connection con) {\n+        return this.origin.send(new RsWithHeaders.ConWithHeaders(con, this.headers));\n+    }\n+\n+    /**\n+     * Connection with overridden headers.\n+     * @since 0.3\n+     */\n+    private static final class ConWithHeaders implements Connection {\n+\n+        /**\n+         * Origin connection.\n+         */\n+        private final Connection origin;\n+\n+        /**\n+         * New headers.\n+         */\n+        private final Iterable<Map.Entry<String, String>> headers;\n+\n+        /**\n+         * Ctor.\n+         *\n+         * @param origin Connection\n+         * @param headers Headers\n+         */\n+        private ConWithHeaders(\n+            final Connection origin,\n+            final Iterable<Map.Entry<String, String>> headers) {\n+            this.origin = origin;\n+            this.headers = headers;\n+        }\n+\n+        @Override\n+        public CompletionStage<Void> accept(\n+            final RsStatus status,\n+            final Iterable<Map.Entry<String, String>> hrs,\n+            final Publisher<ByteBuffer> body) {\n+            return this.origin.accept(status, Iterables.concat(this.headers, hrs), body);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "696632f353e7d1b42ff0ce99251e9a6e0875686f"}, "originalPosition": 104}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4471efd5981abc708376d567acea97909ccc67cf", "author": {"user": {"login": "Guseyn", "name": "Guseyn Ismayylov"}}, "url": "https://github.com/artipie/http/commit/4471efd5981abc708376d567acea97909ccc67cf", "committedDate": "2020-03-17T07:07:40Z", "message": "fix javadoc"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1OTc3Mzgz", "url": "https://github.com/artipie/http/pull/77#pullrequestreview-375977383", "createdAt": "2020-03-17T12:13:46Z", "commit": {"oid": "4471efd5981abc708376d567acea97909ccc67cf"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2MTcyODcz", "url": "https://github.com/artipie/http/pull/77#pullrequestreview-376172873", "createdAt": "2020-03-17T15:57:52Z", "commit": {"oid": "4471efd5981abc708376d567acea97909ccc67cf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTo1Nzo1MlrOF3i2fQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xN1QxNTo1ODo0NFrOF3i5JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc4NzAwNQ==", "bodyText": "@Guseyn can we add additional constructor with single key-value header, e.g. RsWithHeaders(Response origin, String name, String value)? It seems this constructor will be more popular than with Iterable<Map.Entry<String, String>>", "url": "https://github.com/artipie/http/pull/77#discussion_r393787005", "createdAt": "2020-03-17T15:57:52Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/http/rs/RsWithHeaders.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.rs;\n+\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import com.google.common.collect.Iterables;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.CompletionStage;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * RsWithHeaders.\n+ *\n+ * @since 0.1\n+ */\n+public final class RsWithHeaders implements Response {\n+\n+    /**\n+     * Origin response.\n+     */\n+    private final Response origin;\n+\n+    /**\n+     * Headers.\n+     */\n+    private final Iterable<Map.Entry<String, String>> headers;\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param origin Response\n+     * @param headers Headers\n+     */\n+    public RsWithHeaders(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4471efd5981abc708376d567acea97909ccc67cf"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mzc4NzY4NA==", "bodyText": "@Guseyn there should be next minor version", "url": "https://github.com/artipie/http/pull/77#discussion_r393787684", "createdAt": "2020-03-17T15:58:44Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/http/rs/RsWithHeaders.java", "diffHunk": "@@ -0,0 +1,107 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.rs;\n+\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import com.google.common.collect.Iterables;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.CompletionStage;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * RsWithHeaders.\n+ *\n+ * @since 0.1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4471efd5981abc708376d567acea97909ccc67cf"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "78bc60ede3d8756ffa587a49ba35fdd55ad27c9f", "author": {"user": {"login": "Guseyn", "name": "Guseyn Ismayylov"}}, "url": "https://github.com/artipie/http/commit/78bc60ede3d8756ffa587a49ba35fdd55ad27c9f", "committedDate": "2020-03-18T10:13:44Z", "message": "additional ctor for RsWithHeaders"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NzU4ODk1", "url": "https://github.com/artipie/http/pull/77#pullrequestreview-376758895", "createdAt": "2020-03-18T11:01:51Z", "commit": {"oid": "78bc60ede3d8756ffa587a49ba35fdd55ad27c9f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTowMTo1MVrOF3_8nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTowMTo1MVrOF3_8nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI2MzcxMQ==", "bodyText": "@Guseyn can we avoid using {{ add(..); }} here?", "url": "https://github.com/artipie/http/pull/77#discussion_r394263711", "createdAt": "2020-03-18T11:01:51Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/http/rs/RsWithHeaders.java", "diffHunk": "@@ -62,6 +64,18 @@ public RsWithHeaders(\n         this.headers = headers;\n     }\n \n+    /**\n+     * Ctor.\n+     *\n+     * @param origin Response\n+     */\n+    public RsWithHeaders(Response origin, String name, String value) {\n+        this.origin = origin;\n+        this.headers = new ArrayList<Map.Entry<String, String>>(){{\n+            add(new MapEntry<>(name, value));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "78bc60ede3d8756ffa587a49ba35fdd55ad27c9f"}, "originalPosition": 23}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d1a68b8f4061935ecb1410daa1996b4818e27ca7", "author": {"user": {"login": "Guseyn", "name": "Guseyn Ismayylov"}}, "url": "https://github.com/artipie/http/commit/d1a68b8f4061935ecb1410daa1996b4818e27ca7", "committedDate": "2020-03-18T11:29:15Z", "message": "rs with headers: fix lint"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc2NzgxNDEw", "url": "https://github.com/artipie/http/pull/77#pullrequestreview-376781410", "createdAt": "2020-03-18T11:36:25Z", "commit": {"oid": "d1a68b8f4061935ecb1410daa1996b4818e27ca7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTozNjoyNVrOF4BDGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMTozNjoyNVrOF4BDGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDI4MTc1NA==", "bodyText": "@Guseyn please improve javadocs for class", "url": "https://github.com/artipie/http/pull/77#discussion_r394281754", "createdAt": "2020-03-18T11:36:25Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/http/rs/RsWithHeaders.java", "diffHunk": "@@ -0,0 +1,123 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.rs;\n+\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import com.google.common.collect.Iterables;\n+import java.nio.ByteBuffer;\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.concurrent.CompletionStage;\n+import org.cactoos.map.MapEntry;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * RsWithHeaders.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d1a68b8f4061935ecb1410daa1996b4818e27ca7"}, "originalPosition": 38}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a17f884a946932f7cc7ce634a14e82da88402b77", "author": {"user": {"login": "Guseyn", "name": "Guseyn Ismayylov"}}, "url": "https://github.com/artipie/http/commit/a17f884a946932f7cc7ce634a14e82da88402b77", "committedDate": "2020-03-18T11:49:40Z", "message": "fixed"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "568022f44e0e74ebe5174e64d6bb2233a3b32c3e", "author": {"user": {"login": "Guseyn", "name": "Guseyn Ismayylov"}}, "url": "https://github.com/artipie/http/commit/568022f44e0e74ebe5174e64d6bb2233a3b32c3e", "committedDate": "2020-03-18T11:53:01Z", "message": "fix version"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3126, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}