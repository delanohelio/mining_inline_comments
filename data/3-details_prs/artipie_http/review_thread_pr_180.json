{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM2OTA0MDA4", "number": 180, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzoyNzo1MFrOEHBPJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzo0MDozMFrOEHBdvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1Nzk1NzQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/http/group/GroupResult.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzoyNzo1MFrOGmK5vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzoyNzo1MFrOGmK5vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY3NzY5NQ==", "bodyText": "@g4s8 please expand the description.", "url": "https://github.com/artipie/http/pull/180#discussion_r442677695", "createdAt": "2020-06-19T07:27:50Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/http/group/GroupResult.java", "diffHunk": "@@ -0,0 +1,120 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.group;\n+\n+import com.artipie.http.Connection;\n+import com.artipie.http.Headers;\n+import com.artipie.http.rs.RsStatus;\n+import java.nio.ByteBuffer;\n+import java.util.concurrent.CompletionStage;\n+import org.reactivestreams.Publisher;\n+import org.reactivestreams.Subscriber;\n+import org.reactivestreams.Subscription;\n+\n+/**\n+ * Response result.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "176e09c858f8ee0ac33e5f2790af92fb9ce74360"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1Nzk1NzkxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/http/group/GroupResponse.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzoyODowMVrOGmK6Cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzoyODowMVrOGmK6Cw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY3Nzc3MQ==", "bodyText": "@g4s8 please expand the description.", "url": "https://github.com/artipie/http/pull/180#discussion_r442677771", "createdAt": "2020-06-19T07:28:01Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/http/group/GroupResponse.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.group;\n+\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+/**\n+ * Group response.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "176e09c858f8ee0ac33e5f2790af92fb9ce74360"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1Nzk2Mjk2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/http/group/GroupResponse.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzoyOTo1NVrOGmK9WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzoyOTo1NVrOGmK9WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY3ODYxNw==", "bodyText": "@g4s8 I think it would be more readable and robust to use IntStream.range(0,this.responses.size()) instead of forloop", "url": "https://github.com/artipie/http/pull/180#discussion_r442678617", "createdAt": "2020-06-19T07:29:55Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/http/group/GroupResponse.java", "diffHunk": "@@ -0,0 +1,66 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.group;\n+\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+\n+/**\n+ * Group response.\n+ * @since 0.11\n+ */\n+final class GroupResponse implements Response {\n+\n+    /**\n+     * Responses.\n+     */\n+    private final List<Response> responses;\n+\n+    /**\n+     * New group response.\n+     * @param responses Responses to group\n+     */\n+    GroupResponse(final List<Response> responses) {\n+        this.responses = responses;\n+    }\n+\n+    @Override\n+    public CompletionStage<Void> send(final Connection con) {\n+        final GroupResults results = new GroupResults(this.responses.size());\n+        final List<CompletableFuture<Void>> futures = new ArrayList<>(this.responses.size());\n+        for (int pos = 0; pos < this.responses.size(); ++pos) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "176e09c858f8ee0ac33e5f2790af92fb9ce74360"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1Nzk3OTI0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/http/group/GroupResults.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzozNToyN1rOGmLHDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQxMTo1NzozN1rOGmSRVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4MTEwMA==", "bodyText": "@g4s8 we can use IntStream here as well", "url": "https://github.com/artipie/http/pull/180#discussion_r442681100", "createdAt": "2020-06-19T07:35:27Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/http/group/GroupResults.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.group;\n+\n+import com.artipie.http.Connection;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Group response results aggregator.\n+ * <p>This class is not thread safe.</p>\n+ * @since 0.11\n+ */\n+final class GroupResults {\n+\n+    /**\n+     * List of results.\n+     */\n+    private final List<GroupResult> list;\n+\n+    /**\n+     * Done flag.\n+     */\n+    private final AtomicBoolean done;\n+\n+    /**\n+     * New results aggregator.\n+     * @param cap Capacity\n+     */\n+    GroupResults(final int cap) {\n+        this(new ArrayList<>(cap));\n+    }\n+\n+    /**\n+     * Primary constructor.\n+     * @param list List of results\n+     */\n+    private GroupResults(final List<GroupResult> list) {\n+        this.list = list;\n+        this.done = new AtomicBoolean();\n+    }\n+\n+    /**\n+     * Complete results.\n+     * <p>\n+     * This method checks if the response can be completed. If the result was succeed and\n+     * all previous ordered results were completed and failed, then the whole response will\n+     * be replied to the {@link Connection}. If any previous results is not completed, then\n+     * this result will be placed in the list to wait all previous results.\n+     * </p>\n+     * @param order Order of result\n+     * @param result Repayable result\n+     * @param con Connection to use for replay\n+     * @return Future\n+     * @checkstyle ReturnCountCheck (25 lines)\n+     */\n+    @SuppressWarnings(\"PMD.OnlyOneReturn\")\n+    public CompletionStage<Void> complete(final int order, final GroupResult result,\n+        final Connection con) {\n+        if (this.done.get()) {\n+            result.cancel();\n+            return CompletableFuture.completedFuture(null);\n+        }\n+        this.list.set(order, result);\n+        for (int pos = 0; pos < this.list.size(); ++pos) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "176e09c858f8ee0ac33e5f2790af92fb9ce74360"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Mjc5ODQyMQ==", "bodyText": "@Vatavuk I don't see the benefits of IntStream here. In previous comment I've replaced for loop with IntStream with .map() to simplify the code, but here it'll be exactly the same expect this change.", "url": "https://github.com/artipie/http/pull/180#discussion_r442798421", "createdAt": "2020-06-19T11:57:37Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/http/group/GroupResults.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.group;\n+\n+import com.artipie.http.Connection;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Group response results aggregator.\n+ * <p>This class is not thread safe.</p>\n+ * @since 0.11\n+ */\n+final class GroupResults {\n+\n+    /**\n+     * List of results.\n+     */\n+    private final List<GroupResult> list;\n+\n+    /**\n+     * Done flag.\n+     */\n+    private final AtomicBoolean done;\n+\n+    /**\n+     * New results aggregator.\n+     * @param cap Capacity\n+     */\n+    GroupResults(final int cap) {\n+        this(new ArrayList<>(cap));\n+    }\n+\n+    /**\n+     * Primary constructor.\n+     * @param list List of results\n+     */\n+    private GroupResults(final List<GroupResult> list) {\n+        this.list = list;\n+        this.done = new AtomicBoolean();\n+    }\n+\n+    /**\n+     * Complete results.\n+     * <p>\n+     * This method checks if the response can be completed. If the result was succeed and\n+     * all previous ordered results were completed and failed, then the whole response will\n+     * be replied to the {@link Connection}. If any previous results is not completed, then\n+     * this result will be placed in the list to wait all previous results.\n+     * </p>\n+     * @param order Order of result\n+     * @param result Repayable result\n+     * @param con Connection to use for replay\n+     * @return Future\n+     * @checkstyle ReturnCountCheck (25 lines)\n+     */\n+    @SuppressWarnings(\"PMD.OnlyOneReturn\")\n+    public CompletionStage<Void> complete(final int order, final GroupResult result,\n+        final Connection con) {\n+        if (this.done.get()) {\n+            result.cancel();\n+            return CompletableFuture.completedFuture(null);\n+        }\n+        this.list.set(order, result);\n+        for (int pos = 0; pos < this.list.size(); ++pos) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4MTEwMA=="}, "originalCommit": {"oid": "176e09c858f8ee0ac33e5f2790af92fb9ce74360"}, "originalPosition": 91}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1Nzk5NDg1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/http/group/GroupResults.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzo0MDozMFrOGmLQZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOVQwNzo0MDozMFrOGmLQZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjY4MzQ5NA==", "bodyText": "@g4s8 I think we should check here if order is greater than list size in order to avoid IndexOutOfBoundsException", "url": "https://github.com/artipie/http/pull/180#discussion_r442683494", "createdAt": "2020-06-19T07:40:30Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/http/group/GroupResults.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.group;\n+\n+import com.artipie.http.Connection;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.CompletableFuture;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+\n+/**\n+ * Group response results aggregator.\n+ * <p>This class is not thread safe.</p>\n+ * @since 0.11\n+ */\n+final class GroupResults {\n+\n+    /**\n+     * List of results.\n+     */\n+    private final List<GroupResult> list;\n+\n+    /**\n+     * Done flag.\n+     */\n+    private final AtomicBoolean done;\n+\n+    /**\n+     * New results aggregator.\n+     * @param cap Capacity\n+     */\n+    GroupResults(final int cap) {\n+        this(new ArrayList<>(cap));\n+    }\n+\n+    /**\n+     * Primary constructor.\n+     * @param list List of results\n+     */\n+    private GroupResults(final List<GroupResult> list) {\n+        this.list = list;\n+        this.done = new AtomicBoolean();\n+    }\n+\n+    /**\n+     * Complete results.\n+     * <p>\n+     * This method checks if the response can be completed. If the result was succeed and\n+     * all previous ordered results were completed and failed, then the whole response will\n+     * be replied to the {@link Connection}. If any previous results is not completed, then\n+     * this result will be placed in the list to wait all previous results.\n+     * </p>\n+     * @param order Order of result\n+     * @param result Repayable result\n+     * @param con Connection to use for replay\n+     * @return Future\n+     * @checkstyle ReturnCountCheck (25 lines)\n+     */\n+    @SuppressWarnings(\"PMD.OnlyOneReturn\")\n+    public CompletionStage<Void> complete(final int order, final GroupResult result,\n+        final Connection con) {\n+        if (this.done.get()) {\n+            result.cancel();\n+            return CompletableFuture.completedFuture(null);\n+        }\n+        this.list.set(order, result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "176e09c858f8ee0ac33e5f2790af92fb9ce74360"}, "originalPosition": 90}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1876, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}