{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY5NTYyNDky", "number": 4, "title": "Takes request wrapper", "bodyText": "#3 - added Takes implementation of Request", "createdAt": "2020-01-31T12:38:01Z", "url": "https://github.com/artipie/http/pull/4", "merged": true, "mergeCommit": {"oid": "661805a6d7f756d7fac34ffc5bb5544816d197dc"}, "closed": true, "closedAt": "2020-02-03T12:28:27Z", "author": {"login": "g4s8"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABb_uXGEgH2gAyMzY5NTYyNDkyOjgxYWNmZjFkNTNkYTgzMjIyYmFkZWVhYjE2MzczMGE3ZGQ1YjdlNGU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcApfbVgFqTM1MjExNDMyOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "81acff1d53da83222badeeab163730a7dd5b7e4e", "author": {"user": {"login": "g4s8", "name": "Kirill"}}, "url": "https://github.com/artipie/http/commit/81acff1d53da83222badeeab163730a7dd5b7e4e", "committedDate": "2020-01-31T12:33:01Z", "message": "#3 - takes request wrapper"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUxNTAwODM5", "url": "https://github.com/artipie/http/pull/4#pullrequestreview-351500839", "createdAt": "2020-01-31T13:23:57Z", "commit": {"oid": "81acff1d53da83222badeeab163730a7dd5b7e4e"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzoyMzo1N1rOFkLMlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMVQxMzoyOTozNVrOFkLVQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ3NjUwMw==", "bodyText": "@g4s8 Are you sure Takes is provided? By which module?", "url": "https://github.com/artipie/http/pull/4#discussion_r373476503", "createdAt": "2020-01-31T13:23:57Z", "author": {"login": "amihaiemil"}, "path": "pom.xml", "diffHunk": "@@ -14,6 +14,17 @@\n     <maven.compiler.target>11</maven.compiler.target>\n   </properties>\n   <dependencies>\n+    <dependency>\n+      <groupId>org.takes</groupId>\n+      <artifactId>takes</artifactId>\n+      <version>1.19</version>\n+      <scope>provided</scope>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81acff1d53da83222badeeab163730a7dd5b7e4e"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ3NjgwNg==", "bodyText": "@g4s8 Why do we need our own Request interface? Can't we work directly with Takes' requests?", "url": "https://github.com/artipie/http/pull/4#discussion_r373476806", "createdAt": "2020-01-31T13:24:51Z", "author": {"login": "amihaiemil"}, "path": "src/main/java/com/artipie/http/tk/TkRequest.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.tk;\n+\n+import com.artipie.http.Request;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.concurrent.Flow.Publisher;\n+import java.util.concurrent.Flow.Subscriber;\n+import java.util.concurrent.Flow.Subscription;\n+import org.cactoos.map.MapEntry;\n+import org.cactoos.map.MapOf;\n+import org.takes.rq.RqHeaders;\n+\n+/**\n+ * Takes request wrapper.\n+ * @since 0.1\n+ */\n+public final class TkRequest implements Request {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81acff1d53da83222badeeab163730a7dd5b7e4e"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ3NzY0Mg==", "bodyText": "@g4s8 What about tests for this class and the inner classes?", "url": "https://github.com/artipie/http/pull/4#discussion_r373477642", "createdAt": "2020-01-31T13:26:53Z", "author": {"login": "amihaiemil"}, "path": "src/main/java/com/artipie/http/tk/TkRequest.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.tk;\n+\n+import com.artipie.http.Request;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.concurrent.Flow.Publisher;\n+import java.util.concurrent.Flow.Subscriber;\n+import java.util.concurrent.Flow.Subscription;\n+import org.cactoos.map.MapEntry;\n+import org.cactoos.map.MapOf;\n+import org.takes.rq.RqHeaders;\n+\n+/**\n+ * Takes request wrapper.\n+ * @since 0.1\n+ */\n+public final class TkRequest implements Request {\n+\n+    /**\n+     * Takes request.\n+     */\n+    private final org.takes.Request tkreq;\n+\n+    /**\n+     * Ctor.\n+     * @param tkreq Takes request\n+     */\n+    public TkRequest(final org.takes.Request tkreq) {\n+        this.tkreq = tkreq;\n+    }\n+\n+    @Override\n+    public String line() throws IOException {\n+        return this.tkreq.head().iterator().next();\n+    }\n+\n+    @Override\n+    public Map<String, Iterable<String>> headers() throws IOException {\n+        final RqHeaders.Smart req = new RqHeaders.Smart(this.tkreq);\n+        return new MapOf<>(\n+            name -> new MapEntry<>(name, req.header(name)),\n+            req.names()\n+        );\n+    }\n+\n+    @Override\n+    public Publisher<Byte> body() throws IOException {\n+        return new TkRequest.BodyPublisher(this.tkreq.body());\n+    }\n+\n+    /**\n+     * Flow subscription for request body.\n+     * @since 0.1\n+     * @todo #3:30min Implement this class.\n+     *  It should read requested amount of bytes on `request` method call\n+     *  and submit it to the receiver.\n+     *  When the stream is ended it should notify the receiver via `onComplete` call.\n+     *  On failure it should call `onError` of receiver.\n+     *  If cancellation requested via `cancel` method of Subscription it should close the\n+     *  stream and exit. Also, the stream should be closed when complete.\n+     */\n+    private static final class BodySubstription implements Subscription {\n+\n+        /**\n+         * Request input stream.\n+         */\n+        private final InputStream stream;\n+\n+        /**\n+         * Flow subscriber as receiver.\n+         */\n+        private final Subscriber<? super Byte> receiver;\n+\n+        /**\n+         * Flow subscriptions from request input stream.\n+         * @param stream Request input stream\n+         * @param receiver Flow subscriber as receiver\n+         */\n+        BodySubstription(final InputStream stream, final Subscriber<? super Byte> receiver) {\n+            this.stream = stream;\n+            this.receiver = receiver;\n+        }\n+\n+        @Override\n+        public void request(final long bytes) {\n+            throw new UnsupportedOperationException(\n+                String.format(\"request not implemented: %s/%s\", this.stream, this.receiver)\n+            );\n+        }\n+\n+        @Override\n+        public void cancel() {\n+            throw new UnsupportedOperationException(\n+                String.format(\"cancel not implemented: %s/%s\", this.stream, this.receiver)\n+            );\n+        }\n+    }\n+\n+    /**\n+     * Flow publisher for request body.\n+     * <p>\n+     * It encapsulates the {@link InputStream} and implements {@link Publisher}\n+     * interface from JDK9 Flow API.\n+     * </p>\n+     * @since 0.1\n+     */\n+    private static final class BodyPublisher implements Publisher<Byte> {\n+\n+        /**\n+         * Request input stream.\n+         */\n+        private final InputStream stream;\n+\n+        /**\n+         * Publisher from request stream.\n+         * @param stream Request stream\n+         */\n+        BodyPublisher(final InputStream stream) {\n+            this.stream = stream;\n+        }\n+\n+        @Override\n+        public void subscribe(final Subscriber<? super Byte> subscriber) {\n+            subscriber.onSubscribe(new TkRequest.BodySubstription(this.stream, subscriber));\n+        }\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81acff1d53da83222badeeab163730a7dd5b7e4e"}, "originalPosition": 152}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ3ODIxMw==", "bodyText": "@g4s8 Why should this class be private? Is it only needed here?", "url": "https://github.com/artipie/http/pull/4#discussion_r373478213", "createdAt": "2020-01-31T13:28:22Z", "author": {"login": "amihaiemil"}, "path": "src/main/java/com/artipie/http/tk/TkRequest.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.tk;\n+\n+import com.artipie.http.Request;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.concurrent.Flow.Publisher;\n+import java.util.concurrent.Flow.Subscriber;\n+import java.util.concurrent.Flow.Subscription;\n+import org.cactoos.map.MapEntry;\n+import org.cactoos.map.MapOf;\n+import org.takes.rq.RqHeaders;\n+\n+/**\n+ * Takes request wrapper.\n+ * @since 0.1\n+ */\n+public final class TkRequest implements Request {\n+\n+    /**\n+     * Takes request.\n+     */\n+    private final org.takes.Request tkreq;\n+\n+    /**\n+     * Ctor.\n+     * @param tkreq Takes request\n+     */\n+    public TkRequest(final org.takes.Request tkreq) {\n+        this.tkreq = tkreq;\n+    }\n+\n+    @Override\n+    public String line() throws IOException {\n+        return this.tkreq.head().iterator().next();\n+    }\n+\n+    @Override\n+    public Map<String, Iterable<String>> headers() throws IOException {\n+        final RqHeaders.Smart req = new RqHeaders.Smart(this.tkreq);\n+        return new MapOf<>(\n+            name -> new MapEntry<>(name, req.header(name)),\n+            req.names()\n+        );\n+    }\n+\n+    @Override\n+    public Publisher<Byte> body() throws IOException {\n+        return new TkRequest.BodyPublisher(this.tkreq.body());\n+    }\n+\n+    /**\n+     * Flow subscription for request body.\n+     * @since 0.1\n+     * @todo #3:30min Implement this class.\n+     *  It should read requested amount of bytes on `request` method call\n+     *  and submit it to the receiver.\n+     *  When the stream is ended it should notify the receiver via `onComplete` call.\n+     *  On failure it should call `onError` of receiver.\n+     *  If cancellation requested via `cancel` method of Subscription it should close the\n+     *  stream and exit. Also, the stream should be closed when complete.\n+     */\n+    private static final class BodySubstription implements Subscription {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81acff1d53da83222badeeab163730a7dd5b7e4e"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ3ODM3Mw==", "bodyText": "@g4s8 Same here, why a private class? Will there be no visible Publisher implementations in this library?", "url": "https://github.com/artipie/http/pull/4#discussion_r373478373", "createdAt": "2020-01-31T13:28:42Z", "author": {"login": "amihaiemil"}, "path": "src/main/java/com/artipie/http/tk/TkRequest.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.tk;\n+\n+import com.artipie.http.Request;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.concurrent.Flow.Publisher;\n+import java.util.concurrent.Flow.Subscriber;\n+import java.util.concurrent.Flow.Subscription;\n+import org.cactoos.map.MapEntry;\n+import org.cactoos.map.MapOf;\n+import org.takes.rq.RqHeaders;\n+\n+/**\n+ * Takes request wrapper.\n+ * @since 0.1\n+ */\n+public final class TkRequest implements Request {\n+\n+    /**\n+     * Takes request.\n+     */\n+    private final org.takes.Request tkreq;\n+\n+    /**\n+     * Ctor.\n+     * @param tkreq Takes request\n+     */\n+    public TkRequest(final org.takes.Request tkreq) {\n+        this.tkreq = tkreq;\n+    }\n+\n+    @Override\n+    public String line() throws IOException {\n+        return this.tkreq.head().iterator().next();\n+    }\n+\n+    @Override\n+    public Map<String, Iterable<String>> headers() throws IOException {\n+        final RqHeaders.Smart req = new RqHeaders.Smart(this.tkreq);\n+        return new MapOf<>(\n+            name -> new MapEntry<>(name, req.header(name)),\n+            req.names()\n+        );\n+    }\n+\n+    @Override\n+    public Publisher<Byte> body() throws IOException {\n+        return new TkRequest.BodyPublisher(this.tkreq.body());\n+    }\n+\n+    /**\n+     * Flow subscription for request body.\n+     * @since 0.1\n+     * @todo #3:30min Implement this class.\n+     *  It should read requested amount of bytes on `request` method call\n+     *  and submit it to the receiver.\n+     *  When the stream is ended it should notify the receiver via `onComplete` call.\n+     *  On failure it should call `onError` of receiver.\n+     *  If cancellation requested via `cancel` method of Subscription it should close the\n+     *  stream and exit. Also, the stream should be closed when complete.\n+     */\n+    private static final class BodySubstription implements Subscription {\n+\n+        /**\n+         * Request input stream.\n+         */\n+        private final InputStream stream;\n+\n+        /**\n+         * Flow subscriber as receiver.\n+         */\n+        private final Subscriber<? super Byte> receiver;\n+\n+        /**\n+         * Flow subscriptions from request input stream.\n+         * @param stream Request input stream\n+         * @param receiver Flow subscriber as receiver\n+         */\n+        BodySubstription(final InputStream stream, final Subscriber<? super Byte> receiver) {\n+            this.stream = stream;\n+            this.receiver = receiver;\n+        }\n+\n+        @Override\n+        public void request(final long bytes) {\n+            throw new UnsupportedOperationException(\n+                String.format(\"request not implemented: %s/%s\", this.stream, this.receiver)\n+            );\n+        }\n+\n+        @Override\n+        public void cancel() {\n+            throw new UnsupportedOperationException(\n+                String.format(\"cancel not implemented: %s/%s\", this.stream, this.receiver)\n+            );\n+        }\n+    }\n+\n+    /**\n+     * Flow publisher for request body.\n+     * <p>\n+     * It encapsulates the {@link InputStream} and implements {@link Publisher}\n+     * interface from JDK9 Flow API.\n+     * </p>\n+     * @since 0.1\n+     */\n+    private static final class BodyPublisher implements Publisher<Byte> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "81acff1d53da83222badeeab163730a7dd5b7e4e"}, "originalPosition": 132}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ3ODcyMQ==", "bodyText": "@g4s8 Also, I would name this class InputStreamPublisher -- it knows nothing about any HTTP request or body. It just animates an InputStream which could come from anywhere, not necessarily an HTTP Request.", "url": "https://github.com/artipie/http/pull/4#discussion_r373478721", "createdAt": "2020-01-31T13:29:35Z", "author": {"login": "amihaiemil"}, "path": "src/main/java/com/artipie/http/tk/TkRequest.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.tk;\n+\n+import com.artipie.http.Request;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.concurrent.Flow.Publisher;\n+import java.util.concurrent.Flow.Subscriber;\n+import java.util.concurrent.Flow.Subscription;\n+import org.cactoos.map.MapEntry;\n+import org.cactoos.map.MapOf;\n+import org.takes.rq.RqHeaders;\n+\n+/**\n+ * Takes request wrapper.\n+ * @since 0.1\n+ */\n+public final class TkRequest implements Request {\n+\n+    /**\n+     * Takes request.\n+     */\n+    private final org.takes.Request tkreq;\n+\n+    /**\n+     * Ctor.\n+     * @param tkreq Takes request\n+     */\n+    public TkRequest(final org.takes.Request tkreq) {\n+        this.tkreq = tkreq;\n+    }\n+\n+    @Override\n+    public String line() throws IOException {\n+        return this.tkreq.head().iterator().next();\n+    }\n+\n+    @Override\n+    public Map<String, Iterable<String>> headers() throws IOException {\n+        final RqHeaders.Smart req = new RqHeaders.Smart(this.tkreq);\n+        return new MapOf<>(\n+            name -> new MapEntry<>(name, req.header(name)),\n+            req.names()\n+        );\n+    }\n+\n+    @Override\n+    public Publisher<Byte> body() throws IOException {\n+        return new TkRequest.BodyPublisher(this.tkreq.body());\n+    }\n+\n+    /**\n+     * Flow subscription for request body.\n+     * @since 0.1\n+     * @todo #3:30min Implement this class.\n+     *  It should read requested amount of bytes on `request` method call\n+     *  and submit it to the receiver.\n+     *  When the stream is ended it should notify the receiver via `onComplete` call.\n+     *  On failure it should call `onError` of receiver.\n+     *  If cancellation requested via `cancel` method of Subscription it should close the\n+     *  stream and exit. Also, the stream should be closed when complete.\n+     */\n+    private static final class BodySubstription implements Subscription {\n+\n+        /**\n+         * Request input stream.\n+         */\n+        private final InputStream stream;\n+\n+        /**\n+         * Flow subscriber as receiver.\n+         */\n+        private final Subscriber<? super Byte> receiver;\n+\n+        /**\n+         * Flow subscriptions from request input stream.\n+         * @param stream Request input stream\n+         * @param receiver Flow subscriber as receiver\n+         */\n+        BodySubstription(final InputStream stream, final Subscriber<? super Byte> receiver) {\n+            this.stream = stream;\n+            this.receiver = receiver;\n+        }\n+\n+        @Override\n+        public void request(final long bytes) {\n+            throw new UnsupportedOperationException(\n+                String.format(\"request not implemented: %s/%s\", this.stream, this.receiver)\n+            );\n+        }\n+\n+        @Override\n+        public void cancel() {\n+            throw new UnsupportedOperationException(\n+                String.format(\"cancel not implemented: %s/%s\", this.stream, this.receiver)\n+            );\n+        }\n+    }\n+\n+    /**\n+     * Flow publisher for request body.\n+     * <p>\n+     * It encapsulates the {@link InputStream} and implements {@link Publisher}\n+     * interface from JDK9 Flow API.\n+     * </p>\n+     * @since 0.1\n+     */\n+    private static final class BodyPublisher implements Publisher<Byte> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MzQ3ODM3Mw=="}, "originalCommit": {"oid": "81acff1d53da83222badeeab163730a7dd5b7e4e"}, "originalPosition": 132}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f667219c1091c9ae9ca076a2495d8410c30a8dc", "author": {"user": {"login": "g4s8", "name": "Kirill"}}, "url": "https://github.com/artipie/http/commit/6f667219c1091c9ae9ca076a2495d8410c30a8dc", "committedDate": "2020-02-03T08:59:59Z", "message": "#3 - (cr) review fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMTE0MzI4", "url": "https://github.com/artipie/http/pull/4#pullrequestreview-352114328", "createdAt": "2020-02-03T09:26:31Z", "commit": {"oid": "6f667219c1091c9ae9ca076a2495d8410c30a8dc"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3269, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}