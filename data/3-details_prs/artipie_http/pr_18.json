{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxMzI0NDM2", "number": 18, "title": "Api improvements", "bodyText": "line, headers, body should not throw any exceptions\nresponse body should be a publisher, not a subscriber\n\nfixes #19", "createdAt": "2020-02-05T11:34:10Z", "url": "https://github.com/artipie/http/pull/18", "merged": true, "mergeCommit": {"oid": "9cf91a911be4d6210c72f66412985067c71cc840"}, "closed": true, "closedAt": "2020-02-06T10:29:31Z", "author": {"login": "Sammers21"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBUf4kAH2gAyMzcxMzI0NDM2OjM0ZTUxNjM3YmMwNmNhMWI5OTFlM2U2YWJiZTM5MmMyYzhiYjhjZmI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBoD-WgFqTM1NDMzODk4Ng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "34e51637bc06ca1b991e3e6abbe392c2c8bb8cfb", "author": {"user": {"login": "Sammers21", "name": "Pavel Drankov"}}, "url": "https://github.com/artipie/http/commit/34e51637bc06ca1b991e3e6abbe392c2c8bb8cfb", "committedDate": "2020-02-05T11:32:56Z", "message": "api improvements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNzY4ODA1", "url": "https://github.com/artipie/http/pull/18#pullrequestreview-353768805", "createdAt": "2020-02-05T14:43:03Z", "commit": {"oid": "8b79138474b4b7058bdfd09a5c265a2fa4acca2f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNDo0MzowM1rOFl6QBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNDo0NDo0MFrOFl6T0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI5NjAwNA==", "bodyText": "@Sammers21 I'd keep it as Map<String, Iterable<String>> for two reasons:\n1 - list provides API to modify itself, it's not acceptable in case of response. Response headers should not be changed after construction\n2 - readability - it would be easier to understand that headers is a mapping with one-to-many relation when using Map", "url": "https://github.com/artipie/http/pull/18#discussion_r375296004", "createdAt": "2020-02-05T14:43:03Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/http/Destination.java", "diffHunk": "@@ -21,48 +21,26 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  * SOFTWARE.\n  */\n-\n package com.artipie.http;\n \n-import java.io.IOException;\n+import java.util.List;\n import java.util.Map;\n import java.util.concurrent.Flow;\n \n /**\n- * HTTP request.\n- * @see <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html\">RFC2616</a>\n+ * The destination to be rendered.\n  * @since 0.1\n  */\n-public interface Request {\n-\n-    /**\n-     * Request line.\n-     * <p>\n-     * See 5.1 section of rfc2616.\n-     * Request line is {@code Method SP Request-URI SP HTTP-Version CRLF}.\n-     * </p>\n-     * @return Line string\n-     * @throws IOException On IO failure\n-     */\n-    String line() throws IOException;\n+public interface Destination {\n \n     /**\n-     * General headers, request headers and entity headers.\n-     * <p>\n-     * See 4.5, 5.3 and 7.1 sections of rfc2616.\n-     * </p>\n-     * @return Map of header values by name\n-     * @throws IOException On IO failure\n+     * Render the destination.\n+     * @param code The http status code.\n+     * @param headers The http request headers.\n+     * @param body The http response body.\n      */\n-    Map<String, Iterable<String>> headers() throws IOException;\n+    void renderIt(int code,\n+        List<Map.Entry<String, String>> headers,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b79138474b4b7058bdfd09a5c265a2fa4acca2f"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI5NjQ0Mg==", "bodyText": "@Sammers21 same here about headers. Also, it would be hard to find header by name using list of entries", "url": "https://github.com/artipie/http/pull/18#discussion_r375296442", "createdAt": "2020-02-05T14:43:47Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/http/Slice.java", "diffHunk": "@@ -39,9 +40,13 @@\n public interface Slice {\n \n     /**\n-     * Try to respond for the request.\n-     * @param req Request\n-     * @return Future response\n+     * Respond to a http request.\n+     * @param line The request line\n+     * @param headers The request headers\n+     * @param body The request body\n+     * @return The response.\n      */\n-    CompletableFuture<Response> respond(Request req);\n+    Response response(String line,\n+        List<Map.Entry<String, String>> headers,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b79138474b4b7058bdfd09a5c265a2fa4acca2f"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTI5Njk3OQ==", "bodyText": "@Sammers21 why did you remove javadoc links to HTTP spec from Response class?", "url": "https://github.com/artipie/http/pull/18#discussion_r375296979", "createdAt": "2020-02-05T14:44:40Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/http/Response.java", "diffHunk": "@@ -35,30 +33,9 @@\n public interface Response {\n \n     /**\n-     * Status line.\n-     * <p>\n-     * Status line is {@code HTTP-Version SP Status-Code SP Reason-Phrase CRLF}.\n-     * See 6.1 section of rfc2616.\n-     * </p>\n-     * @return Status string\n-     */\n-    String status();\n-\n-    /**\n-     * General headers, response headers, entity headers.\n-     * <p>\n-     * See 4.5, 6.2 and 7.1 section of rfc2616.\n-     * </p>\n-     * @return Headers map of values by name\n-     */\n-    Map<String, Iterable<String>> headers();\n-\n-    /**\n-     * Response body flow.\n-     * <p>\n-     * See 7.2 section of rfc2616.\n-     * </p>\n-     * @return Bytes flow\n+     * Render response.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8b79138474b4b7058bdfd09a5c265a2fa4acca2f"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "363a79981e3b6ee57add33021bce1c17669d111b", "author": {"user": {"login": "Sammers21", "name": "Pavel Drankov"}}, "url": "https://github.com/artipie/http/commit/363a79981e3b6ee57add33021bce1c17669d111b", "committedDate": "2020-02-06T10:09:05Z", "message": "api improvements"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fbabf02242d3cfd7ac980a6a4de0b1bd7913e010", "author": {"user": {"login": "Sammers21", "name": "Pavel Drankov"}}, "url": "https://github.com/artipie/http/commit/fbabf02242d3cfd7ac980a6a4de0b1bd7913e010", "committedDate": "2020-02-06T10:08:40Z", "message": "api improvements"}, "afterCommit": {"oid": "363a79981e3b6ee57add33021bce1c17669d111b", "author": {"user": {"login": "Sammers21", "name": "Pavel Drankov"}}, "url": "https://github.com/artipie/http/commit/363a79981e3b6ee57add33021bce1c17669d111b", "committedDate": "2020-02-06T10:09:05Z", "message": "api improvements"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MzMwOTcx", "url": "https://github.com/artipie/http/pull/18#pullrequestreview-354330971", "createdAt": "2020-02-06T10:08:28Z", "commit": {"oid": "251f10eeefaa315f3d600bede7a7cd7972809399"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMDowODoyOFrOFmVlPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMDowOTowNlrOFmVmgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc0MzgwNw==", "bodyText": "@Sammers21 I think it should be names accept(), see #18 (comment)\nAlso, I don't think we need CompletableFuture here, since when we're asking  connection to accept response data, we don't care how and when exactly connection will accept it", "url": "https://github.com/artipie/http/pull/18#discussion_r375743807", "createdAt": "2020-02-06T10:08:28Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/http/Connection.java", "diffHunk": "@@ -21,48 +21,25 @@\n  * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  * SOFTWARE.\n  */\n-\n package com.artipie.http;\n \n-import java.io.IOException;\n import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n import java.util.concurrent.Flow;\n \n /**\n- * HTTP request.\n- * @see <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html\">RFC2616</a>\n+ * The http connection.\n  * @since 0.1\n  */\n-public interface Request {\n-\n-    /**\n-     * Request line.\n-     * <p>\n-     * See 5.1 section of rfc2616.\n-     * Request line is {@code Method SP Request-URI SP HTTP-Version CRLF}.\n-     * </p>\n-     * @return Line string\n-     * @throws IOException On IO failure\n-     */\n-    String line() throws IOException;\n-\n-    /**\n-     * General headers, request headers and entity headers.\n-     * <p>\n-     * See 4.5, 5.3 and 7.1 sections of rfc2616.\n-     * </p>\n-     * @return Map of header values by name\n-     * @throws IOException On IO failure\n-     */\n-    Map<String, Iterable<String>> headers() throws IOException;\n+public interface Connection {\n \n     /**\n-     * Message body, represented as bytes flow.\n-     * <p>\n-     * See 4.3 section of rfc2616.\n-     * </p>\n-     * @return Bytes flow\n-     * @throws IOException On IO failure\n+     * Render the destination.\n+     * @param code The http status code.\n+     * @param headers The http request headers.\n+     * @param body The http response body.\n      */\n-    Flow.Publisher<Byte> body() throws IOException;\n+    CompletableFuture<Void> respond(int code,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "251f10eeefaa315f3d600bede7a7cd7972809399"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc0NDEyOA==", "bodyText": "@Sammers21 same here: when we send response via connection, we don't care when the connection will accept it. It's not async operation, because response should not perform blocking operations on send(), all body flow will be published via Publisher<> body interface.", "url": "https://github.com/artipie/http/pull/18#discussion_r375744128", "createdAt": "2020-02-06T10:09:06Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/http/Response.java", "diffHunk": "@@ -35,30 +33,10 @@\n public interface Response {\n \n     /**\n-     * Status line.\n-     * <p>\n-     * Status line is {@code HTTP-Version SP Status-Code SP Reason-Phrase CRLF}.\n-     * See 6.1 section of rfc2616.\n-     * </p>\n-     * @return Status string\n-     */\n-    String status();\n-\n-    /**\n-     * General headers, response headers, entity headers.\n-     * <p>\n-     * See 4.5, 6.2 and 7.1 section of rfc2616.\n-     * </p>\n-     * @return Headers map of values by name\n-     */\n-    Map<String, Iterable<String>> headers();\n-\n-    /**\n-     * Response body flow.\n-     * <p>\n-     * See 7.2 section of rfc2616.\n-     * </p>\n-     * @return Bytes flow\n+     * Send the response.\n+     *\n+     * @param connection Connection to send the response to\n+     * @return Completion or error signal.\n      */\n-    Flow.Subscriber<Byte> body();\n+     CompletableFuture<Void> send(Connection connection);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "251f10eeefaa315f3d600bede7a7cd7972809399"}, "originalPosition": 47}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d4bab76b57bb5728d216760a6f412cf9e698e557", "author": {"user": {"login": "Sammers21", "name": "Pavel Drankov"}}, "url": "https://github.com/artipie/http/commit/d4bab76b57bb5728d216760a6f412cf9e698e557", "committedDate": "2020-02-06T10:15:42Z", "message": "fix return types"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d841f748dd3434e24bff98c9e9d1588bf75213f0", "author": {"user": {"login": "Sammers21", "name": "Pavel Drankov"}}, "url": "https://github.com/artipie/http/commit/d841f748dd3434e24bff98c9e9d1588bf75213f0", "committedDate": "2020-02-06T10:17:39Z", "message": "respond -> accept"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0MzM4OTg2", "url": "https://github.com/artipie/http/pull/18#pullrequestreview-354338986", "createdAt": "2020-02-06T10:20:33Z", "commit": {"oid": "d841f748dd3434e24bff98c9e9d1588bf75213f0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3284, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}