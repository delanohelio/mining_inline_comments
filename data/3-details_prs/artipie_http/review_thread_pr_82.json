{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5NzI3ODQy", "number": 82, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNjo0OTo1NFrODo_H8A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNjo0OTo1NFrODo_H8A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0MzAzODU2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/http/stream/ByteByByteSplit.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwNjo0OTo1NFrOF34F3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQwODoxNjo1MlrOF36NOg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEzNTAwNQ==", "bodyText": "@Sammers21 do we need synchronization on throwing exception?", "url": "https://github.com/artipie/http/pull/82#discussion_r394135005", "createdAt": "2020-03-18T06:49:54Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/http/stream/ByteByByteSplit.java", "diffHunk": "@@ -144,13 +152,17 @@ public void subscribe(final Subscriber<? super Publisher<ByteBuffer>> sub) {\n             new Subscription() {\n                 @Override\n                 public void request(final long ask) {\n-                    ByteByByteSplit.this.downDemand.updateAndGet(operand -> operand + ask);\n-                    ByteByByteSplit.this.upstream.get().get().request(ask);\n+                    synchronized (ByteByByteSplit.this.downSync) {\n+                        ByteByByteSplit.this.downDemand.updateAndGet(operand -> operand + ask);\n+                        ByteByByteSplit.this.upstream.get().get().request(ask);\n+                    }\n                 }\n \n                 @Override\n                 public void cancel() {\n-                    throw new IllegalStateException(\"Cancel is not allowed\");\n+                    synchronized (ByteByByteSplit.this.downSync) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "03d7e2bf2c60e48adb497dd0aa4771570fca5692"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2MjQ2NQ==", "bodyText": "@Vatavuk, the rule is to acquire a specific lock for downstream operations, even if it does not look reasonable now.", "url": "https://github.com/artipie/http/pull/82#discussion_r394162465", "createdAt": "2020-03-18T08:01:27Z", "author": {"login": "Sammers21"}, "path": "src/main/java/com/artipie/http/stream/ByteByByteSplit.java", "diffHunk": "@@ -144,13 +152,17 @@ public void subscribe(final Subscriber<? super Publisher<ByteBuffer>> sub) {\n             new Subscription() {\n                 @Override\n                 public void request(final long ask) {\n-                    ByteByByteSplit.this.downDemand.updateAndGet(operand -> operand + ask);\n-                    ByteByByteSplit.this.upstream.get().get().request(ask);\n+                    synchronized (ByteByByteSplit.this.downSync) {\n+                        ByteByByteSplit.this.downDemand.updateAndGet(operand -> operand + ask);\n+                        ByteByByteSplit.this.upstream.get().get().request(ask);\n+                    }\n                 }\n \n                 @Override\n                 public void cancel() {\n-                    throw new IllegalStateException(\"Cancel is not allowed\");\n+                    synchronized (ByteByByteSplit.this.downSync) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEzNTAwNQ=="}, "originalCommit": {"oid": "03d7e2bf2c60e48adb497dd0aa4771570fca5692"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDE2OTY1OA==", "bodyText": "@Sammers21 ok", "url": "https://github.com/artipie/http/pull/82#discussion_r394169658", "createdAt": "2020-03-18T08:16:52Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/http/stream/ByteByByteSplit.java", "diffHunk": "@@ -144,13 +152,17 @@ public void subscribe(final Subscriber<? super Publisher<ByteBuffer>> sub) {\n             new Subscription() {\n                 @Override\n                 public void request(final long ask) {\n-                    ByteByByteSplit.this.downDemand.updateAndGet(operand -> operand + ask);\n-                    ByteByByteSplit.this.upstream.get().get().request(ask);\n+                    synchronized (ByteByByteSplit.this.downSync) {\n+                        ByteByByteSplit.this.downDemand.updateAndGet(operand -> operand + ask);\n+                        ByteByByteSplit.this.upstream.get().get().request(ask);\n+                    }\n                 }\n \n                 @Override\n                 public void cancel() {\n-                    throw new IllegalStateException(\"Cancel is not allowed\");\n+                    synchronized (ByteByByteSplit.this.downSync) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDEzNTAwNQ=="}, "originalCommit": {"oid": "03d7e2bf2c60e48adb497dd0aa4771570fca5692"}, "originalPosition": 59}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1798, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}