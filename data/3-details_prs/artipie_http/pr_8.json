{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwMzY0OTIz", "number": 8, "title": "Unit test for takes request", "bodyText": "#6 - added unit test for takes request", "createdAt": "2020-02-03T15:03:03Z", "url": "https://github.com/artipie/http/pull/8", "merged": true, "mergeCommit": {"oid": "454864e34efabbe5c42402589441388601555816"}, "closed": true, "closedAt": "2020-02-03T16:36:33Z", "author": {"login": "g4s8"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcAuO4PAH2gAyMzcwMzY0OTIzOjBiNjJjMWMxZDhmMzRhZTkzYzk1NzU0OGQ2YjY3YTg2ZjQ3ODZhYjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcAvgHdAFqTM1MjM4NTcxMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "0b62c1c1d8f34ae93c957548d6b67a86f4786ab6", "author": {"user": {"login": "g4s8", "name": "Kirill"}}, "url": "https://github.com/artipie/http/commit/0b62c1c1d8f34ae93c957548d6b67a86f4786ab6", "committedDate": "2020-02-03T14:57:58Z", "message": "#6 - unit test for takes request"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMzM0Nzg4", "url": "https://github.com/artipie/http/pull/8#pullrequestreview-352334788", "createdAt": "2020-02-03T15:22:46Z", "commit": {"oid": "0b62c1c1d8f34ae93c957548d6b67a86f4786ab6"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNToyMjo0NlrOFk1Jag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxNToyODo1NlrOFk1YsA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2MzgxOA==", "bodyText": "@g4s8 is optional true equivalent to scope provided?", "url": "https://github.com/artipie/http/pull/8#discussion_r374163818", "createdAt": "2020-02-03T15:22:46Z", "author": {"login": "amihaiemil"}, "path": "pom.xml", "diffHunk": "@@ -12,19 +12,38 @@\n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n     <maven.compiler.source>11</maven.compiler.source>\n     <maven.compiler.target>11</maven.compiler.target>\n+    <junit-platform.version>5.4.2</junit-platform.version>\n   </properties>\n   <dependencies>\n     <dependency>\n       <groupId>org.takes</groupId>\n       <artifactId>takes</artifactId>\n       <version>1.19</version>\n-      <scope>provided</scope>\n+      <optional>true</optional>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b62c1c1d8f34ae93c957548d6b67a86f4786ab6"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2NTc0Mg==", "bodyText": "@g4s8 According to this documentation: https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages\nThe term Status line applies to a Response, not a Request. For Request the term is Start line.\nCan you rename the test?", "url": "https://github.com/artipie/http/pull/8#discussion_r374165742", "createdAt": "2020-02-03T15:25:47Z", "author": {"login": "amihaiemil"}, "path": "src/test/java/com/artipie/http/tk/TkRequestTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.tk;\n+\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Test;\n+import org.takes.rq.RqFake;\n+import org.takes.rq.RqWithHeader;\n+\n+/**\n+ * Test case for {@link TkRequest}.\n+ * @since 0.1\n+ */\n+final class TkRequestTest {\n+    @Test\n+    void readsStatusLine() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b62c1c1d8f34ae93c957548d6b67a86f4786ab6"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2NjA3Mw==", "bodyText": "@g4s8 Is the line() method from Takes or from our interface? If it's on our side, I would name it startLine()", "url": "https://github.com/artipie/http/pull/8#discussion_r374166073", "createdAt": "2020-02-03T15:26:16Z", "author": {"login": "amihaiemil"}, "path": "src/test/java/com/artipie/http/tk/TkRequestTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.tk;\n+\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Test;\n+import org.takes.rq.RqFake;\n+import org.takes.rq.RqWithHeader;\n+\n+/**\n+ * Test case for {@link TkRequest}.\n+ * @since 0.1\n+ */\n+final class TkRequestTest {\n+    @Test\n+    void readsStatusLine() throws Exception {\n+        MatcherAssert.assertThat(\n+            new TkRequest(new RqFake(\"PUT\")).line(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b62c1c1d8f34ae93c957548d6b67a86f4786ab6"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2NjUzNA==", "bodyText": "@g4s8 The start line should also contain the HTTP version like HTTP/1.1 (according to the same Mozzila Docu)", "url": "https://github.com/artipie/http/pull/8#discussion_r374166534", "createdAt": "2020-02-03T15:27:00Z", "author": {"login": "amihaiemil"}, "path": "src/test/java/com/artipie/http/tk/TkRequestTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.tk;\n+\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Test;\n+import org.takes.rq.RqFake;\n+import org.takes.rq.RqWithHeader;\n+\n+/**\n+ * Test case for {@link TkRequest}.\n+ * @since 0.1\n+ */\n+final class TkRequestTest {\n+    @Test\n+    void readsStatusLine() throws Exception {\n+        MatcherAssert.assertThat(\n+            new TkRequest(new RqFake(\"PUT\")).line(),\n+            Matchers.equalTo(\"PUT /\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b62c1c1d8f34ae93c957548d6b67a86f4786ab6"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2NzAyNQ==", "bodyText": "@g4s8 This matcher is confusing. You assert that it should contain host and www.example.com, but these 2 strings are not specified above, where you instantiate the Request", "url": "https://github.com/artipie/http/pull/8#discussion_r374167025", "createdAt": "2020-02-03T15:27:49Z", "author": {"login": "amihaiemil"}, "path": "src/test/java/com/artipie/http/tk/TkRequestTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.tk;\n+\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Test;\n+import org.takes.rq.RqFake;\n+import org.takes.rq.RqWithHeader;\n+\n+/**\n+ * Test case for {@link TkRequest}.\n+ * @since 0.1\n+ */\n+final class TkRequestTest {\n+    @Test\n+    void readsStatusLine() throws Exception {\n+        MatcherAssert.assertThat(\n+            new TkRequest(new RqFake(\"PUT\")).line(),\n+            Matchers.equalTo(\"PUT /\")\n+        );\n+    }\n+\n+    @Test\n+    void readsHeasers() throws Exception {\n+        MatcherAssert.assertThat(\n+            new TkRequest(\n+                new RqWithHeader(\n+                    new RqWithHeader(new RqFake(), \"X-Test\", \"1\"), \"X-Test\", \"2\"\n+                )\n+            ).headers(),\n+            Matchers.allOf(\n+                Matchers.aMapWithSize(2),\n+                Matchers.hasEntry(\n+                    Matchers.containsStringIgnoringCase(\"host\"),\n+                    Matchers.containsInAnyOrder(\"www.example.com\")\n+                ),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b62c1c1d8f34ae93c957548d6b67a86f4786ab6"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2NzQ5NQ==", "bodyText": "@g4s8 It would be nice to have a test which verifies the behaviour of the method when there are no headers set. Will it return null, an empty list, or will it throw an exception?", "url": "https://github.com/artipie/http/pull/8#discussion_r374167495", "createdAt": "2020-02-03T15:28:35Z", "author": {"login": "amihaiemil"}, "path": "src/test/java/com/artipie/http/tk/TkRequestTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.tk;\n+\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Test;\n+import org.takes.rq.RqFake;\n+import org.takes.rq.RqWithHeader;\n+\n+/**\n+ * Test case for {@link TkRequest}.\n+ * @since 0.1\n+ */\n+final class TkRequestTest {\n+    @Test\n+    void readsStatusLine() throws Exception {\n+        MatcherAssert.assertThat(\n+            new TkRequest(new RqFake(\"PUT\")).line(),\n+            Matchers.equalTo(\"PUT /\")\n+        );\n+    }\n+\n+    @Test\n+    void readsHeasers() throws Exception {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b62c1c1d8f34ae93c957548d6b67a86f4786ab6"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDE2NzcyOA==", "bodyText": "@g4s8 You added tests for start line and headers. How about a test for the body of the request?", "url": "https://github.com/artipie/http/pull/8#discussion_r374167728", "createdAt": "2020-02-03T15:28:56Z", "author": {"login": "amihaiemil"}, "path": "src/test/java/com/artipie/http/tk/TkRequestTest.java", "diffHunk": "@@ -0,0 +1,67 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.tk;\n+\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Test;\n+import org.takes.rq.RqFake;\n+import org.takes.rq.RqWithHeader;\n+\n+/**\n+ * Test case for {@link TkRequest}.\n+ * @since 0.1\n+ */\n+final class TkRequestTest {\n+    @Test\n+    void readsStatusLine() throws Exception {\n+        MatcherAssert.assertThat(\n+            new TkRequest(new RqFake(\"PUT\")).line(),\n+            Matchers.equalTo(\"PUT /\")\n+        );\n+    }\n+\n+    @Test\n+    void readsHeasers() throws Exception {\n+        MatcherAssert.assertThat(\n+            new TkRequest(\n+                new RqWithHeader(\n+                    new RqWithHeader(new RqFake(), \"X-Test\", \"1\"), \"X-Test\", \"2\"\n+                )\n+            ).headers(),\n+            Matchers.allOf(\n+                Matchers.aMapWithSize(2),\n+                Matchers.hasEntry(\n+                    Matchers.containsStringIgnoringCase(\"host\"),\n+                    Matchers.containsInAnyOrder(\"www.example.com\")\n+                ),\n+                Matchers.hasEntry(\n+                    Matchers.containsStringIgnoringCase(\"X-Test\"),\n+                    Matchers.containsInAnyOrder(\"1\", \"2\")\n+                )\n+            )\n+        );\n+    }\n+}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b62c1c1d8f34ae93c957548d6b67a86f4786ab6"}, "originalPosition": 67}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c94dbee5e50917e50279895a465a504cc93ed9ce", "author": {"user": {"login": "g4s8", "name": "Kirill"}}, "url": "https://github.com/artipie/http/commit/c94dbee5e50917e50279895a465a504cc93ed9ce", "committedDate": "2020-02-03T16:19:24Z", "message": "#6 - (cr) review fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUyMzg1NzEz", "url": "https://github.com/artipie/http/pull/8#pullrequestreview-352385713", "createdAt": "2020-02-03T16:26:42Z", "commit": {"oid": "c94dbee5e50917e50279895a465a504cc93ed9ce"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3271, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}