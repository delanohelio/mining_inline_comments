{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0NzMwNzMx", "number": 98, "title": "Authentication and authorization interfaces", "bodyText": "#97 - added authentication interface: Identities, authorization provider Permissions and Slice to perform auth checks: SliceAuth.", "createdAt": "2020-03-27T12:39:21Z", "url": "https://github.com/artipie/http/pull/98", "merged": true, "mergeCommit": {"oid": "8a73ecec18becf429684127cebc09af760f1b05f"}, "closed": true, "closedAt": "2020-03-30T07:19:55Z", "author": {"login": "g4s8"}, "timelineItems": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcRv8MkgH2gAyMzk0NzMwNzMxOjAxMmIyMTkxOTBjY2RkODI3Zjg4N2UxNDgyNGJjOWQyNGMyOGQ3Nzg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcSpJUGAFqTM4MzU4MjAwMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "012b219190ccdd827f887e14824bc9d24c28d778", "author": {"user": {"login": "g4s8", "name": "Kirill"}}, "url": "https://github.com/artipie/http/commit/012b219190ccdd827f887e14824bc9d24c28d778", "committedDate": "2020-03-27T12:34:05Z", "message": "#97 - authentication and authorization interfaces and slice"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzMjkyMTk5", "url": "https://github.com/artipie/http/pull/98#pullrequestreview-383292199", "createdAt": "2020-03-28T07:45:29Z", "commit": {"oid": "012b219190ccdd827f887e14824bc9d24c28d778"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwNzo0NToyOVrOF9HqHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQwNzo1MjoxNFrOF9HsGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYzMjkyNQ==", "bodyText": "@g4s8 Let's switch places of arguments. I believe its more readable to use this class as new Permission(\"upload\", permissions), to have dependencies at the end.", "url": "https://github.com/artipie/http/pull/98#discussion_r399632925", "createdAt": "2020-03-28T07:45:29Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/http/auth/SliceAuth.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.auth;\n+\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice wrapper with authorization and authentication.\n+ * <p>\n+ * Example: the class which allows upload only for users with 'upload' permissions\n+ * and resolves user identity by \"http-basic\" mechanism:\n+ * <pre><code>\n+ * new SliceAuth(\n+ *   new SliceUpload(storage),\n+ *   new SliceAuth.Authorization(permissions, \"upload\"),\n+ *   new AuthBasic(passwords)\n+ * );\n+ * </code></pre>\n+ * </p>\n+ * @since 0.8\n+ */\n+public final class SliceAuth implements Slice {\n+\n+    /**\n+     * Origin slice.\n+     */\n+    private final Slice origin;\n+\n+    /**\n+     * Authorization.\n+     */\n+    private final Permission perm;\n+\n+    /**\n+     * Authentication.\n+     */\n+    private final Identities ids;\n+\n+    /**\n+     * Ctor.\n+     * @param origin Origin slice\n+     * @param perm Authorization mechanism\n+     * @param ids Authentication mechanism\n+     */\n+    public SliceAuth(final Slice origin, final Permission perm, final Identities ids) {\n+        this.origin = origin;\n+        this.ids = ids;\n+        this.perm = perm;\n+    }\n+\n+    @Override\n+    public Response response(final String line,\n+        final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        return this.ids.user(line, headers)\n+            .map(this.perm::allowed).map(\n+                allowed -> {\n+                    final Response rsp;\n+                    if (allowed) {\n+                        rsp = this.origin.response(line, headers, body);\n+                    } else {\n+                        rsp = new RsWithStatus(RsStatus.FORBIDDEN);\n+                    }\n+                    return rsp;\n+                }\n+            ).orElse(new RsWithStatus(RsStatus.UNAUTHORIZED));\n+    }\n+\n+    /**\n+     * Authorization mechanism with single permission check for slice.\n+     * @since 0.8\n+     */\n+    public static final class Permission {\n+\n+        /**\n+         * All permissions.\n+         */\n+        private final Permissions perm;\n+\n+        /**\n+         * Action to perform.\n+         */\n+        private final String action;\n+\n+        /**\n+         * Ctor.\n+         * @param perm Permissions\n+         * @param action Action\n+         */\n+        public Permission(final Permissions perm, final String action) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "012b219190ccdd827f887e14824bc9d24c28d778"}, "originalPosition": 117}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYzMzMxNQ==", "bodyText": "@g4s8 I think it would be nice for a user to be able to create his own permissions by extending Permission and providing action in the super ctor, for example:\nnew UploadPermission(permissions) using ctor -> super(\"upload\", permissions)\nWDYT? If you agree we can remove final from the class definition and make allowed method final. Or we can turn Permission into an interface..", "url": "https://github.com/artipie/http/pull/98#discussion_r399633315", "createdAt": "2020-03-28T07:50:25Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/http/auth/SliceAuth.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.auth;\n+\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice wrapper with authorization and authentication.\n+ * <p>\n+ * Example: the class which allows upload only for users with 'upload' permissions\n+ * and resolves user identity by \"http-basic\" mechanism:\n+ * <pre><code>\n+ * new SliceAuth(\n+ *   new SliceUpload(storage),\n+ *   new SliceAuth.Authorization(permissions, \"upload\"),\n+ *   new AuthBasic(passwords)\n+ * );\n+ * </code></pre>\n+ * </p>\n+ * @since 0.8\n+ */\n+public final class SliceAuth implements Slice {\n+\n+    /**\n+     * Origin slice.\n+     */\n+    private final Slice origin;\n+\n+    /**\n+     * Authorization.\n+     */\n+    private final Permission perm;\n+\n+    /**\n+     * Authentication.\n+     */\n+    private final Identities ids;\n+\n+    /**\n+     * Ctor.\n+     * @param origin Origin slice\n+     * @param perm Authorization mechanism\n+     * @param ids Authentication mechanism\n+     */\n+    public SliceAuth(final Slice origin, final Permission perm, final Identities ids) {\n+        this.origin = origin;\n+        this.ids = ids;\n+        this.perm = perm;\n+    }\n+\n+    @Override\n+    public Response response(final String line,\n+        final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        return this.ids.user(line, headers)\n+            .map(this.perm::allowed).map(\n+                allowed -> {\n+                    final Response rsp;\n+                    if (allowed) {\n+                        rsp = this.origin.response(line, headers, body);\n+                    } else {\n+                        rsp = new RsWithStatus(RsStatus.FORBIDDEN);\n+                    }\n+                    return rsp;\n+                }\n+            ).orElse(new RsWithStatus(RsStatus.UNAUTHORIZED));\n+    }\n+\n+    /**\n+     * Authorization mechanism with single permission check for slice.\n+     * @since 0.8\n+     */\n+    public static final class Permission {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "012b219190ccdd827f887e14824bc9d24c28d778"}, "originalPosition": 100}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYzMzM3Ng==", "bodyText": "@g4s8 How about we move the function into Identities.NONE or Identities.NON_EXISTING to make it reusable?", "url": "https://github.com/artipie/http/pull/98#discussion_r399633376", "createdAt": "2020-03-28T07:51:31Z", "author": {"login": "Vatavuk"}, "path": "src/test/java/com/artipie/http/auth/SliceAuthTest.java", "diffHunk": "@@ -0,0 +1,91 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.auth;\n+\n+import com.artipie.http.hm.RsHasStatus;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithStatus;\n+import com.artipie.http.slice.SliceSimple;\n+import io.reactivex.Flowable;\n+import java.util.Collections;\n+import java.util.Optional;\n+import org.hamcrest.MatcherAssert;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test case for {@link SliceAuth}.\n+ *\n+ * @since 0.8\n+ */\n+public final class SliceAuthTest {\n+\n+    @Test\n+    void proxyToOriginSliceIfAllowed() {\n+        MatcherAssert.assertThat(\n+            new SliceAuth(\n+                new SliceSimple(new RsWithStatus(RsStatus.OK)),\n+                new SliceAuth.Permission(Permissions.FREE, \"any\"),\n+                Identities.ANONYMOUS\n+            ).response(\n+                new RequestLine(\"GET\", \"/foo\", \"HTTP/1.1\").toString(),\n+                Collections.emptyList(),\n+                Flowable.empty()\n+            ),\n+            new RsHasStatus(RsStatus.OK)\n+        );\n+    }\n+\n+    @Test\n+    void returnsUnauthorizedErrorIfUnableToAuthenticate() {\n+        MatcherAssert.assertThat(\n+            new SliceAuth(\n+                new SliceSimple(new RsWithStatus(RsStatus.OK)),\n+                new SliceAuth.Permission(Permissions.FREE, \"none\"),\n+                (line, headers) -> Optional.empty()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "012b219190ccdd827f887e14824bc9d24c28d778"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTYzMzQzNA==", "bodyText": "@g4s8 SliceAuth.Permission instead of SliceAuth.Authorization", "url": "https://github.com/artipie/http/pull/98#discussion_r399633434", "createdAt": "2020-03-28T07:52:14Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/http/auth/SliceAuth.java", "diffHunk": "@@ -0,0 +1,131 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.auth;\n+\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice wrapper with authorization and authentication.\n+ * <p>\n+ * Example: the class which allows upload only for users with 'upload' permissions\n+ * and resolves user identity by \"http-basic\" mechanism:\n+ * <pre><code>\n+ * new SliceAuth(\n+ *   new SliceUpload(storage),\n+ *   new SliceAuth.Authorization(permissions, \"upload\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "012b219190ccdd827f887e14824bc9d24c28d778"}, "originalPosition": 42}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6daa2fa00f342d858d610c647a4454c08346a68c", "author": {"user": {"login": "g4s8", "name": "Kirill"}}, "url": "https://github.com/artipie/http/commit/6daa2fa00f342d858d610c647a4454c08346a68c", "committedDate": "2020-03-30T07:02:47Z", "message": "#97 - review fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d9b961bdb0462867e051ee1f81684606a57a92b", "author": {"user": {"login": "g4s8", "name": "Kirill"}}, "url": "https://github.com/artipie/http/commit/7d9b961bdb0462867e051ee1f81684606a57a92b", "committedDate": "2020-03-30T07:10:50Z", "message": "#97 - (cr) readme fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzgzNTgyMDAy", "url": "https://github.com/artipie/http/pull/98#pullrequestreview-383582002", "createdAt": "2020-03-30T07:12:32Z", "commit": {"oid": "6daa2fa00f342d858d610c647a4454c08346a68c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNzoxMjozM1rOF9cTIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwNzoxMjozM1rOF9cTIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTk3MTEwNw==", "bodyText": "@g4s8 new Permission.ByName(\"upload\", permissions)", "url": "https://github.com/artipie/http/pull/98#discussion_r399971107", "createdAt": "2020-03-30T07:12:33Z", "author": {"login": "Vatavuk"}, "path": "README.md", "diffHunk": "@@ -75,6 +75,34 @@ class Repo extends Slice.Wrap {\n }\n ```\n \n+### Authentication\n+\n+Authentication protocol is specified by `Identities` interface\n+which parses user identity from request head (line and headers).\n+\n+Possible implementations are:\n+ - Basic - from HTTP basic uthentication\n+ - ... TBD\n+\n+### Authorization\n+\n+Authorization is specified by `Permissions` interface which checks user permissions\n+for action. It can be encapsulated by `SliceAuth` wrapper to perform authorization checks:\n+```java\n+final Slice slice = new SliceAuth(\n+  new SliceUpload(storage),\n+  new SliceAuth.Permission(permissions, \"upload\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6daa2fa00f342d858d610c647a4454c08346a68c"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3145, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}