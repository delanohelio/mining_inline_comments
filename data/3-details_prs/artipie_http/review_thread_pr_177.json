{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0NTIyMDQy", "number": 177, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDoxMjo0M1rOEH54pA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDoxNToyNVrOEH58Jg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzIzODc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/http/rs/RsWithBody.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDoxMjo0NFrOGnioPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDoxMjo0NFrOGnioPg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDExNTAwNg==", "bodyText": "@g4s8 I'd suggest to keep RsWithHeaders.ConWithHeaders private and implement this method by wrapping this.origin into RsWithHeaders", "url": "https://github.com/artipie/http/pull/177#discussion_r444115006", "createdAt": "2020-06-23T10:12:44Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/http/rs/RsWithBody.java", "diffHunk": "@@ -94,18 +96,47 @@ public RsWithBody(final Publisher<ByteBuffer> body) {\n     }\n \n     /**\n-     * Decorates origin response body with publisher.\n-     * @param origin Response\n+     * Response with body from publisher.\n+     * @param origin Origin response\n      * @param body Publisher\n      */\n     public RsWithBody(final Response origin, final Publisher<ByteBuffer> body) {\n+        this(origin, new Content.From(body));\n+    }\n+\n+    /**\n+     * Decorates origin response body with content.\n+     * @param origin Response\n+     * @param body Content\n+     */\n+    public RsWithBody(final Response origin, final Content body) {\n         this.origin = origin;\n         this.body = body;\n     }\n \n     @Override\n     public CompletionStage<Void> send(final Connection con) {\n-        return this.origin.send(new RsWithBody.ConWithBody(con, this.body));\n+        return this.origin.send(\n+            new RsWithBody.ConWithBody(\n+                this.body.size()\n+                    .map(size -> RsWithBody.withSize(con, size))\n+                    .orElse(con),\n+                this.body\n+            )\n+        );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3134ea75fcf4ab89114cca952e3c7d3a9edb485"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2NzI0Nzc0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/http/rs/RsWithBody.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDoxNToyNVrOGnit7g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yM1QxMDoxNToyNVrOGnit7g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NDExNjQ2Mg==", "bodyText": "@g4s8 this new feature of is not tested, it would be great to add tests for RsWithBody class to check that header is sent to connection if Content has size specified", "url": "https://github.com/artipie/http/pull/177#discussion_r444116462", "createdAt": "2020-06-23T10:15:25Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/http/rs/RsWithBody.java", "diffHunk": "@@ -94,18 +96,47 @@ public RsWithBody(final Publisher<ByteBuffer> body) {\n     }\n \n     /**\n-     * Decorates origin response body with publisher.\n-     * @param origin Response\n+     * Response with body from publisher.\n+     * @param origin Origin response\n      * @param body Publisher\n      */\n     public RsWithBody(final Response origin, final Publisher<ByteBuffer> body) {\n+        this(origin, new Content.From(body));\n+    }\n+\n+    /**\n+     * Decorates origin response body with content.\n+     * @param origin Response\n+     * @param body Content\n+     */\n+    public RsWithBody(final Response origin, final Content body) {\n         this.origin = origin;\n         this.body = body;\n     }\n \n     @Override\n     public CompletionStage<Void> send(final Connection con) {\n-        return this.origin.send(new RsWithBody.ConWithBody(con, this.body));\n+        return this.origin.send(\n+            new RsWithBody.ConWithBody(\n+                this.body.size()\n+                    .map(size -> RsWithBody.withSize(con, size))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d3134ea75fcf4ab89114cca952e3c7d3a9edb485"}, "originalPosition": 66}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1868, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}