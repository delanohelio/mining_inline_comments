{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYzOTIxMzU0", "number": 215, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDozMTozMVrOEV2tTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDozMTozMVrOEV2tTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMzUxODg2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/http/hm/ResponseMatcher.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDozMTozMVrOG82O3Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxNDo0MToxMVrOG82pKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ1NjI4NQ==", "bodyText": "@olegmoz I'd use single order for constructor parameters: now we have status, body, headers and status, headers, body. I think second option would be more correct here.", "url": "https://github.com/artipie/http/pull/215#discussion_r466456285", "createdAt": "2020-08-06T14:31:31Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/http/hm/ResponseMatcher.java", "diffHunk": "@@ -39,11 +39,37 @@\n \n     /**\n      * Ctor.\n+     *\n      * @param status Expected status\n      * @param body Expected body\n      * @param headers Expected headers\n      */\n-    public ResponseMatcher(final RsStatus status, final byte[] body, final Header... headers) {\n+    public ResponseMatcher(\n+        final RsStatus status,\n+        final byte[] body,\n+        final Iterable<? extends Map.Entry<String, String>> headers\n+    ) {\n+        super(\n+            new ListOf<Matcher<? super Response>>(\n+                new RsHasStatus(status),\n+                new RsHasHeaders(headers),\n+                new RsHasBody(body)\n+            )\n+        );\n+    }\n+\n+    /**\n+     * Ctor.\n+     * @param status Expected status\n+     * @param body Expected body\n+     * @param headers Expected headers\n+     */\n+    @SafeVarargs\n+    public ResponseMatcher(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f27e5223bb30ff84a192e61afb70c678deabd232"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ2MzAxOQ==", "bodyText": "@g4s8 thanks, fixed parameters order for this method", "url": "https://github.com/artipie/http/pull/215#discussion_r466463019", "createdAt": "2020-08-06T14:41:11Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/http/hm/ResponseMatcher.java", "diffHunk": "@@ -39,11 +39,37 @@\n \n     /**\n      * Ctor.\n+     *\n      * @param status Expected status\n      * @param body Expected body\n      * @param headers Expected headers\n      */\n-    public ResponseMatcher(final RsStatus status, final byte[] body, final Header... headers) {\n+    public ResponseMatcher(\n+        final RsStatus status,\n+        final byte[] body,\n+        final Iterable<? extends Map.Entry<String, String>> headers\n+    ) {\n+        super(\n+            new ListOf<Matcher<? super Response>>(\n+                new RsHasStatus(status),\n+                new RsHasHeaders(headers),\n+                new RsHasBody(body)\n+            )\n+        );\n+    }\n+\n+    /**\n+     * Ctor.\n+     * @param status Expected status\n+     * @param body Expected body\n+     * @param headers Expected headers\n+     */\n+    @SafeVarargs\n+    public ResponseMatcher(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQ1NjI4NQ=="}, "originalCommit": {"oid": "f27e5223bb30ff84a192e61afb70c678deabd232"}, "originalPosition": 42}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1896, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}