{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg5MTYwOTMx", "number": 75, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzoxNDozNVrODpGrxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzoxNzo0OFrODpGwiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDI3NzE4OnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzoxNDozNVrOF4EWww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwODo1MDo0OFrOF4k_RA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMzNTkzOQ==", "bodyText": "@Guseyn this composition can be moved to constructor (SliceRoute can't be changed and doesn't have side effects):\nclass Repo extends Slice.Wrap {\n  Repo(Storage storage) {\n    super(\n      new SliceRoute.Path(new RtRule.ByMethod(RqMethod.PUT.value()), new SliceUpload(storage)),\n      new SliceRoute.Path(new RtRule.ByMethod(RqMethod.GET.value()), new SliceDownload(storage)),\n      SliceRoute.FALLBACK, new SliceSimple(RsStatus.METHOD_NOT_ALLOWED)\n    );\n}", "url": "https://github.com/artipie/http/pull/75#discussion_r394335939", "createdAt": "2020-03-18T13:14:35Z", "author": {"login": "g4s8"}, "path": "README.md", "diffHunk": "@@ -58,6 +58,56 @@ server asks response to send itself to connection, response asks connection\n to accept the data. Artipie adapter are not supposed to implement this interface,\n it should be done by HTTP server implementation, e.g. vertex-server module.\n \n+## Some useful examples for different objects\n+\n+### Routing\n+\n+You can do routing in the following style:\n+\n+```java\n+@Override\n+public Response response(\n+    final String line,\n+    final Iterable<Map.Entry<String, String>> headers,\n+    final Publisher<ByteBuffer> body) {\n+    return new SliceRoute(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87941f9404216c6d556b672fa9f92c301864fbc2"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg3MDU5Ng==", "bodyText": "@g4s8 done.", "url": "https://github.com/artipie/http/pull/75#discussion_r394870596", "createdAt": "2020-03-19T08:50:48Z", "author": {"login": "Guseyn"}, "path": "README.md", "diffHunk": "@@ -58,6 +58,56 @@ server asks response to send itself to connection, response asks connection\n to accept the data. Artipie adapter are not supposed to implement this interface,\n it should be done by HTTP server implementation, e.g. vertex-server module.\n \n+## Some useful examples for different objects\n+\n+### Routing\n+\n+You can do routing in the following style:\n+\n+```java\n+@Override\n+public Response response(\n+    final String line,\n+    final Iterable<Map.Entry<String, String>> headers,\n+    final Publisher<ByteBuffer> body) {\n+    return new SliceRoute(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMzNTkzOQ=="}, "originalCommit": {"oid": "87941f9404216c6d556b672fa9f92c301864fbc2"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDI4MTIzOnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzoxNTozNVrOF4EZQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwODo0ODo0MVrOF4k6zA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMzNjU3OQ==", "bodyText": "@Guseyn I'd say \"reading request\" or \"parsing request\"", "url": "https://github.com/artipie/http/pull/75#discussion_r394336579", "createdAt": "2020-03-18T13:15:35Z", "author": {"login": "g4s8"}, "path": "README.md", "diffHunk": "@@ -58,6 +58,56 @@ server asks response to send itself to connection, response asks connection\n to accept the data. Artipie adapter are not supposed to implement this interface,\n it should be done by HTTP server implementation, e.g. vertex-server module.\n \n+## Some useful examples for different objects\n+\n+### Routing\n+\n+You can do routing in the following style:\n+\n+```java\n+@Override\n+public Response response(\n+    final String line,\n+    final Iterable<Map.Entry<String, String>> headers,\n+    final Publisher<ByteBuffer> body) {\n+    return new SliceRoute(\n+        new SliceRoute.Path(new RtRule.ByMethod(RqMethod.PUT.value()), new SliceUpload(storage)),\n+        new SliceRoute.Path(new RtRule.ByMethod(RqMethod.GET.value()), new SliceDownload(storage)),\n+        new SliceRoute.Path((line, headers) -> true, (line, headers, body) -> new RsWithStatus(RsStatus.METHOD_NOT_ALLOWED))\n+    ).response(line, headers, body);\n+}\n+```\n+\n+### Main components of request", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87941f9404216c6d556b672fa9f92c301864fbc2"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2OTQ1Mg==", "bodyText": "@g4s8 I think it's ok, because \"reading request\" or \"parsing request\" is more about the process, but here I want to emphasize that how we can get components of request", "url": "https://github.com/artipie/http/pull/75#discussion_r394869452", "createdAt": "2020-03-19T08:48:41Z", "author": {"login": "Guseyn"}, "path": "README.md", "diffHunk": "@@ -58,6 +58,56 @@ server asks response to send itself to connection, response asks connection\n to accept the data. Artipie adapter are not supposed to implement this interface,\n it should be done by HTTP server implementation, e.g. vertex-server module.\n \n+## Some useful examples for different objects\n+\n+### Routing\n+\n+You can do routing in the following style:\n+\n+```java\n+@Override\n+public Response response(\n+    final String line,\n+    final Iterable<Map.Entry<String, String>> headers,\n+    final Publisher<ByteBuffer> body) {\n+    return new SliceRoute(\n+        new SliceRoute.Path(new RtRule.ByMethod(RqMethod.PUT.value()), new SliceUpload(storage)),\n+        new SliceRoute.Path(new RtRule.ByMethod(RqMethod.GET.value()), new SliceDownload(storage)),\n+        new SliceRoute.Path((line, headers) -> true, (line, headers, body) -> new RsWithStatus(RsStatus.METHOD_NOT_ALLOWED))\n+    ).response(line, headers, body);\n+}\n+```\n+\n+### Main components of request", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMzNjU3OQ=="}, "originalCommit": {"oid": "87941f9404216c6d556b672fa9f92c301864fbc2"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDI4MzU5OnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzoxNjoxM1rOF4EauQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwODo0OTo0M1rOF4k87A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMzNjk1Mw==", "bodyText": "@Guseyn what specific header? It can be named reading header values", "url": "https://github.com/artipie/http/pull/75#discussion_r394336953", "createdAt": "2020-03-18T13:16:13Z", "author": {"login": "g4s8"}, "path": "README.md", "diffHunk": "@@ -58,6 +58,56 @@ server asks response to send itself to connection, response asks connection\n to accept the data. Artipie adapter are not supposed to implement this interface,\n it should be done by HTTP server implementation, e.g. vertex-server module.\n \n+## Some useful examples for different objects\n+\n+### Routing\n+\n+You can do routing in the following style:\n+\n+```java\n+@Override\n+public Response response(\n+    final String line,\n+    final Iterable<Map.Entry<String, String>> headers,\n+    final Publisher<ByteBuffer> body) {\n+    return new SliceRoute(\n+        new SliceRoute.Path(new RtRule.ByMethod(RqMethod.PUT.value()), new SliceUpload(storage)),\n+        new SliceRoute.Path(new RtRule.ByMethod(RqMethod.GET.value()), new SliceDownload(storage)),\n+        new SliceRoute.Path((line, headers) -> true, (line, headers, body) -> new RsWithStatus(RsStatus.METHOD_NOT_ALLOWED))\n+    ).response(line, headers, body);\n+}\n+```\n+\n+### Main components of request\n+\n+```java\n+final RequestLineFrom request = new RequestLineFrom(line);\n+final Uri uri = request.uri();\n+final RqMethod = request.method();\n+```\n+\n+### Specific header", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87941f9404216c6d556b672fa9f92c301864fbc2"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg2OTk5Ng==", "bodyText": "@g4s8 By specific header I mean a single header value by specified key(as probably how it will be used in most cases)", "url": "https://github.com/artipie/http/pull/75#discussion_r394869996", "createdAt": "2020-03-19T08:49:43Z", "author": {"login": "Guseyn"}, "path": "README.md", "diffHunk": "@@ -58,6 +58,56 @@ server asks response to send itself to connection, response asks connection\n to accept the data. Artipie adapter are not supposed to implement this interface,\n it should be done by HTTP server implementation, e.g. vertex-server module.\n \n+## Some useful examples for different objects\n+\n+### Routing\n+\n+You can do routing in the following style:\n+\n+```java\n+@Override\n+public Response response(\n+    final String line,\n+    final Iterable<Map.Entry<String, String>> headers,\n+    final Publisher<ByteBuffer> body) {\n+    return new SliceRoute(\n+        new SliceRoute.Path(new RtRule.ByMethod(RqMethod.PUT.value()), new SliceUpload(storage)),\n+        new SliceRoute.Path(new RtRule.ByMethod(RqMethod.GET.value()), new SliceDownload(storage)),\n+        new SliceRoute.Path((line, headers) -> true, (line, headers, body) -> new RsWithStatus(RsStatus.METHOD_NOT_ALLOWED))\n+    ).response(line, headers, body);\n+}\n+```\n+\n+### Main components of request\n+\n+```java\n+final RequestLineFrom request = new RequestLineFrom(line);\n+final Uri uri = request.uri();\n+final RqMethod = request.method();\n+```\n+\n+### Specific header", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMzNjk1Mw=="}, "originalCommit": {"oid": "87941f9404216c6d556b672fa9f92c301864fbc2"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NDI4OTM5OnYy", "diffSide": "RIGHT", "path": "README.md", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQxMzoxNzo0OFrOF4EeTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQwODo0OTo1M1rOF4k9Pg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMzNzg3MA==", "bodyText": "@Guseyn I don't think \"setup\" is the right word here, maybe we can say \"returning of async responses\"", "url": "https://github.com/artipie/http/pull/75#discussion_r394337870", "createdAt": "2020-03-18T13:17:48Z", "author": {"login": "g4s8"}, "path": "README.md", "diffHunk": "@@ -58,6 +58,56 @@ server asks response to send itself to connection, response asks connection\n to accept the data. Artipie adapter are not supposed to implement this interface,\n it should be done by HTTP server implementation, e.g. vertex-server module.\n \n+## Some useful examples for different objects\n+\n+### Routing\n+\n+You can do routing in the following style:\n+\n+```java\n+@Override\n+public Response response(\n+    final String line,\n+    final Iterable<Map.Entry<String, String>> headers,\n+    final Publisher<ByteBuffer> body) {\n+    return new SliceRoute(\n+        new SliceRoute.Path(new RtRule.ByMethod(RqMethod.PUT.value()), new SliceUpload(storage)),\n+        new SliceRoute.Path(new RtRule.ByMethod(RqMethod.GET.value()), new SliceDownload(storage)),\n+        new SliceRoute.Path((line, headers) -> true, (line, headers, body) -> new RsWithStatus(RsStatus.METHOD_NOT_ALLOWED))\n+    ).response(line, headers, body);\n+}\n+```\n+\n+### Main components of request\n+\n+```java\n+final RequestLineFrom request = new RequestLineFrom(line);\n+final Uri uri = request.uri();\n+final RqMethod = request.method();\n+```\n+\n+### Specific header\n+\n+```java\n+new RqHeaders.Single(headers, \"x-header-name\");\n+```\n+\n+### Setup for async response", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "87941f9404216c6d556b672fa9f92c301864fbc2"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg3MDA3OA==", "bodyText": "@g4s8 ok.", "url": "https://github.com/artipie/http/pull/75#discussion_r394870078", "createdAt": "2020-03-19T08:49:53Z", "author": {"login": "Guseyn"}, "path": "README.md", "diffHunk": "@@ -58,6 +58,56 @@ server asks response to send itself to connection, response asks connection\n to accept the data. Artipie adapter are not supposed to implement this interface,\n it should be done by HTTP server implementation, e.g. vertex-server module.\n \n+## Some useful examples for different objects\n+\n+### Routing\n+\n+You can do routing in the following style:\n+\n+```java\n+@Override\n+public Response response(\n+    final String line,\n+    final Iterable<Map.Entry<String, String>> headers,\n+    final Publisher<ByteBuffer> body) {\n+    return new SliceRoute(\n+        new SliceRoute.Path(new RtRule.ByMethod(RqMethod.PUT.value()), new SliceUpload(storage)),\n+        new SliceRoute.Path(new RtRule.ByMethod(RqMethod.GET.value()), new SliceDownload(storage)),\n+        new SliceRoute.Path((line, headers) -> true, (line, headers, body) -> new RsWithStatus(RsStatus.METHOD_NOT_ALLOWED))\n+    ).response(line, headers, body);\n+}\n+```\n+\n+### Main components of request\n+\n+```java\n+final RequestLineFrom request = new RequestLineFrom(line);\n+final Uri uri = request.uri();\n+final RqMethod = request.method();\n+```\n+\n+### Specific header\n+\n+```java\n+new RqHeaders.Single(headers, \"x-header-name\");\n+```\n+\n+### Setup for async response", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDMzNzg3MA=="}, "originalCommit": {"oid": "87941f9404216c6d556b672fa9f92c301864fbc2"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1979, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}