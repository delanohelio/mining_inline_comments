{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5NTU3NDU0", "number": 150, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoxNjoxOFrOD95Pjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMToyMTozNFrOD-6ocw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjI3NTk5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/http/slice/LoggingSlice.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoxNjoxOFrOGXqhbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDo0ODo1N1rOGYPlZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ2NzExNw==", "bodyText": "@olegmoz Wouldn't we be loggin the exception twice in this case (one in line 96 and another in 103)?", "url": "https://github.com/artipie/http/pull/150#discussion_r427467117", "createdAt": "2020-05-19T17:16:18Z", "author": {"login": "paulodamaso"}, "path": "src/main/java/com/artipie/http/slice/LoggingSlice.java", "diffHunk": "@@ -81,8 +87,33 @@ public Response response(\n         final StringBuilder msg = new StringBuilder(\">> \").append(line);\n         LoggingSlice.append(msg, headers);\n         Logger.log(this.level, this.slice, msg.toString());\n-        return connection -> this.slice.response(line, headers, body)\n-            .send(new LoggingConnection(connection));\n+        return connection -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42da09d0a76f6a36ea2fb83c127402e8b485dcb"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA3NDM0MQ==", "bodyText": "@paulodamaso no, that won't happen. These two cases for different cases of errors: thrown in sync code or returned normally as completion stage", "url": "https://github.com/artipie/http/pull/150#discussion_r428074341", "createdAt": "2020-05-20T14:48:57Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/http/slice/LoggingSlice.java", "diffHunk": "@@ -81,8 +87,33 @@ public Response response(\n         final StringBuilder msg = new StringBuilder(\">> \").append(line);\n         LoggingSlice.append(msg, headers);\n         Logger.log(this.level, this.slice, msg.toString());\n-        return connection -> this.slice.response(line, headers, body)\n-            .send(new LoggingConnection(connection));\n+        return connection -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ2NzExNw=="}, "originalCommit": {"oid": "b42da09d0a76f6a36ea2fb83c127402e8b485dcb"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjI4NzIxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/http/slice/LoggingSlice.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoxOToyM1rOGXqokA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDo1OTowNVrOGYQFTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ2ODk0NA==", "bodyText": "@olegmoz How about creating a new class, Logged? We could reuse it in all other slices, and it would be easier to unit test it", "url": "https://github.com/artipie/http/pull/150#discussion_r427468944", "createdAt": "2020-05-19T17:19:23Z", "author": {"login": "paulodamaso"}, "path": "src/main/java/com/artipie/http/slice/LoggingSlice.java", "diffHunk": "@@ -81,8 +87,33 @@ public Response response(\n         final StringBuilder msg = new StringBuilder(\">> \").append(line);\n         LoggingSlice.append(msg, headers);\n         Logger.log(this.level, this.slice, msg.toString());\n-        return connection -> this.slice.response(line, headers, body)\n-            .send(new LoggingConnection(connection));\n+        return connection -> {\n+            try {\n+                return this.slice.response(line, headers, body)\n+                    .send(new LoggingConnection(connection))\n+                    .exceptionally(\n+                        throwable -> {\n+                            this.log(throwable);\n+                            Throwables.throwIfUnchecked(throwable);\n+                            throw new CompletionException(throwable);\n+                        }\n+                    );\n+            } catch (final Exception ex) {\n+                this.log(ex);\n+                throw ex;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Writes throwable to logger.\n+     *\n+     * @param throwable Throwable to be logged.\n+     */\n+    private void log(final Throwable throwable) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42da09d0a76f6a36ea2fb83c127402e8b485dcb"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA4MjUwOQ==", "bodyText": "@paulodamaso sorry, I do not like the idea. Logged does not make much sense to me and looks like artificial way to provide log method implementation", "url": "https://github.com/artipie/http/pull/150#discussion_r428082509", "createdAt": "2020-05-20T14:59:05Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/http/slice/LoggingSlice.java", "diffHunk": "@@ -81,8 +87,33 @@ public Response response(\n         final StringBuilder msg = new StringBuilder(\">> \").append(line);\n         LoggingSlice.append(msg, headers);\n         Logger.log(this.level, this.slice, msg.toString());\n-        return connection -> this.slice.response(line, headers, body)\n-            .send(new LoggingConnection(connection));\n+        return connection -> {\n+            try {\n+                return this.slice.response(line, headers, body)\n+                    .send(new LoggingConnection(connection))\n+                    .exceptionally(\n+                        throwable -> {\n+                            this.log(throwable);\n+                            Throwables.throwIfUnchecked(throwable);\n+                            throw new CompletionException(throwable);\n+                        }\n+                    );\n+            } catch (final Exception ex) {\n+                this.log(ex);\n+                throw ex;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Writes throwable to logger.\n+     *\n+     * @param throwable Throwable to be logged.\n+     */\n+    private void log(final Throwable throwable) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ2ODk0NA=="}, "originalCommit": {"oid": "b42da09d0a76f6a36ea2fb83c127402e8b485dcb"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2MjMwOTMxOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/artipie/http/slice/LoggingSliceTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xOVQxNzoyNDo1MlrOGXq2WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNDo1ODowN1rOGYQCWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3MjQ3Mw==", "bodyText": "@olegmoz I don't see the utility of these tests; we are not assuring that the exception was logged. How about:\n\nextract the private log method to a new class (see above)\nmake this class receive a writer\nexecute the LoggingSlicewith error and check if the error log was appended to the writer", "url": "https://github.com/artipie/http/pull/150#discussion_r427472473", "createdAt": "2020-05-19T17:24:52Z", "author": {"login": "paulodamaso"}, "path": "src/test/java/com/artipie/http/slice/LoggingSliceTest.java", "diffHunk": "@@ -61,4 +67,63 @@ void shouldLogRequestAndResponse() {\n             (status, headers, body) -> CompletableFuture.allOf()\n         ).toCompletableFuture().join();\n     }\n+\n+    @Test\n+    void shouldLogAndPreserveExceptionInSlice() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b42da09d0a76f6a36ea2fb83c127402e8b485dcb"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODA4MTc1NQ==", "bodyText": "@paulodamaso I do not agree that these tests are useless, it is important that errors are not getting consumed by this slice. Though that's true, that main functionality of this class is not tested. There was discussion about it when this class was first created, and we agreed that testing it does not worth the effort of mocking logging system.\nAlso providing the logging method in constructor will make usage of this class harder. That is why logging is done by static methods everywhere.", "url": "https://github.com/artipie/http/pull/150#discussion_r428081755", "createdAt": "2020-05-20T14:58:07Z", "author": {"login": "olegmoz"}, "path": "src/test/java/com/artipie/http/slice/LoggingSliceTest.java", "diffHunk": "@@ -61,4 +67,63 @@ void shouldLogRequestAndResponse() {\n             (status, headers, body) -> CompletableFuture.allOf()\n         ).toCompletableFuture().join();\n     }\n+\n+    @Test\n+    void shouldLogAndPreserveExceptionInSlice() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzQ3MjQ3Mw=="}, "originalCommit": {"oid": "b42da09d0a76f6a36ea2fb83c127402e8b485dcb"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Mjk4MjI4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/http/slice/LoggingSlice.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMToxODo0M1rOGZTnoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMTo0NDoyNVrOGZUPKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE4OTAyNA==", "bodyText": "@olegmoz why CompletionException here? According to the javadoc, it can be\n\nthrown when an error or other exception is encountered in the course of completing a result or task\n\nBut this throwable can be propagated from underlying slice error.", "url": "https://github.com/artipie/http/pull/150#discussion_r429189024", "createdAt": "2020-05-22T11:18:43Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/http/slice/LoggingSlice.java", "diffHunk": "@@ -81,8 +87,33 @@ public Response response(\n         final StringBuilder msg = new StringBuilder(\">> \").append(line);\n         LoggingSlice.append(msg, headers);\n         Logger.log(this.level, this.slice, msg.toString());\n-        return connection -> this.slice.response(line, headers, body)\n-            .send(new LoggingConnection(connection));\n+        return connection -> {\n+            try {\n+                return this.slice.response(line, headers, body)\n+                    .send(new LoggingConnection(connection))\n+                    .exceptionally(\n+                        throwable -> {\n+                            this.log(throwable);\n+                            Throwables.throwIfUnchecked(throwable);\n+                            throw new CompletionException(throwable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "733e9781a7cbe6127d48e484856d7cdb60717184"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5OTE0Nw==", "bodyText": "@g4s8 didn't think of way to propagate the throwable as is. Found a solution now", "url": "https://github.com/artipie/http/pull/150#discussion_r429199147", "createdAt": "2020-05-22T11:44:25Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/http/slice/LoggingSlice.java", "diffHunk": "@@ -81,8 +87,33 @@ public Response response(\n         final StringBuilder msg = new StringBuilder(\">> \").append(line);\n         LoggingSlice.append(msg, headers);\n         Logger.log(this.level, this.slice, msg.toString());\n-        return connection -> this.slice.response(line, headers, body)\n-            .send(new LoggingConnection(connection));\n+        return connection -> {\n+            try {\n+                return this.slice.response(line, headers, body)\n+                    .send(new LoggingConnection(connection))\n+                    .exceptionally(\n+                        throwable -> {\n+                            this.log(throwable);\n+                            Throwables.throwIfUnchecked(throwable);\n+                            throw new CompletionException(throwable);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE4OTAyNA=="}, "originalCommit": {"oid": "733e9781a7cbe6127d48e484856d7cdb60717184"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3Mjk4OTMxOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/http/slice/LoggingSlice.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMToyMTozNFrOGZTr8Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMlQxMTo0NDozNlrOGZUPdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5MDEyOQ==", "bodyText": "@olegmoz these 3 lines can be simplified to:\nLogger.log(this.level, this.slice, \"Failure: %[exception]s\", throwable);", "url": "https://github.com/artipie/http/pull/150#discussion_r429190129", "createdAt": "2020-05-22T11:21:34Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/http/slice/LoggingSlice.java", "diffHunk": "@@ -81,8 +87,33 @@ public Response response(\n         final StringBuilder msg = new StringBuilder(\">> \").append(line);\n         LoggingSlice.append(msg, headers);\n         Logger.log(this.level, this.slice, msg.toString());\n-        return connection -> this.slice.response(line, headers, body)\n-            .send(new LoggingConnection(connection));\n+        return connection -> {\n+            try {\n+                return this.slice.response(line, headers, body)\n+                    .send(new LoggingConnection(connection))\n+                    .exceptionally(\n+                        throwable -> {\n+                            this.log(throwable);\n+                            Throwables.throwIfUnchecked(throwable);\n+                            throw new CompletionException(throwable);\n+                        }\n+                    );\n+            } catch (final Exception ex) {\n+                this.log(ex);\n+                throw ex;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Writes throwable to logger.\n+     *\n+     * @param throwable Throwable to be logged.\n+     */\n+    private void log(final Throwable throwable) {\n+        final StringWriter writer = new StringWriter();\n+        throwable.printStackTrace(new PrintWriter(writer));\n+        Logger.log(this.level, this.slice, \"Failure: %s\", writer.toString());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "733e9781a7cbe6127d48e484856d7cdb60717184"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5OTIyMQ==", "bodyText": "@g4s8 simplified it, thanks!", "url": "https://github.com/artipie/http/pull/150#discussion_r429199221", "createdAt": "2020-05-22T11:44:36Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/http/slice/LoggingSlice.java", "diffHunk": "@@ -81,8 +87,33 @@ public Response response(\n         final StringBuilder msg = new StringBuilder(\">> \").append(line);\n         LoggingSlice.append(msg, headers);\n         Logger.log(this.level, this.slice, msg.toString());\n-        return connection -> this.slice.response(line, headers, body)\n-            .send(new LoggingConnection(connection));\n+        return connection -> {\n+            try {\n+                return this.slice.response(line, headers, body)\n+                    .send(new LoggingConnection(connection))\n+                    .exceptionally(\n+                        throwable -> {\n+                            this.log(throwable);\n+                            Throwables.throwIfUnchecked(throwable);\n+                            throw new CompletionException(throwable);\n+                        }\n+                    );\n+            } catch (final Exception ex) {\n+                this.log(ex);\n+                throw ex;\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Writes throwable to logger.\n+     *\n+     * @param throwable Throwable to be logged.\n+     */\n+    private void log(final Throwable throwable) {\n+        final StringWriter writer = new StringWriter();\n+        throwable.printStackTrace(new PrintWriter(writer));\n+        Logger.log(this.level, this.slice, \"Failure: %s\", writer.toString());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTE5MDEyOQ=="}, "originalCommit": {"oid": "733e9781a7cbe6127d48e484856d7cdb60717184"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1848, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}