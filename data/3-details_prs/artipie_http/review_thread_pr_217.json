{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY2NjQxMTU4", "number": 217, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDowMDowNVrOEXpAVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDoxNDoxMlrOEXpYdg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjI0NTM1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/http/rs/RsStatus.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDowMDowNVrOG_ip9w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDowMDowNVrOG_ip9w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI4MTI3MQ==", "bodyText": "@genryxy in this project we do not use popular getter/setter naming convention. We are naming methods as verbs if the do some action and as nouns if they return some value. So here it would be more along the lines to name methods error, clientError, serverError.", "url": "https://github.com/artipie/http/pull/217#discussion_r469281271", "createdAt": "2020-08-12T14:00:05Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/http/rs/RsStatus.java", "diffHunk": "@@ -152,6 +152,33 @@ public String code() {\n         return this.string;\n     }\n \n+    /**\n+     * Checks whether the RsStatus is a client error.\n+     * @return True if the RsStatus is a client error, otherwise - false.\n+     * @since 0.16\n+     */\n+    public boolean isClientError() {\n+        return this.string.charAt(0) == '4';\n+    }\n+\n+    /**\n+     * Checks whether the RsStatus is a server error.\n+     * @return True if the RsStatus is a server error, otherwise - false.\n+     * @since 0.16\n+     */\n+    public boolean isServerError() {\n+        return this.string.charAt(0) == '5';\n+    }\n+\n+    /**\n+     * Checks whether the RsStatus is an error.\n+     * @return True if the RsStatus is an error, otherwise - false.\n+     * @since 0.16\n+     */\n+    public boolean isError() {\n+        return this.isClientError() || this.isServerError();\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae8c1f9d1d4395fed0277cad3938b1ee7bb48c97"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjI1MDA5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/http/rs/RsStatus.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDowMTowM1rOG_is0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDowMTowM1rOG_is0w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI4MjAwMw==", "bodyText": "@genryxy I'd suggest to extract common code for checking first symbol into private method", "url": "https://github.com/artipie/http/pull/217#discussion_r469282003", "createdAt": "2020-08-12T14:01:03Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/http/rs/RsStatus.java", "diffHunk": "@@ -152,6 +152,33 @@ public String code() {\n         return this.string;\n     }\n \n+    /**\n+     * Checks whether the RsStatus is a client error.\n+     * @return True if the RsStatus is a client error, otherwise - false.\n+     * @since 0.16\n+     */\n+    public boolean isClientError() {\n+        return this.string.charAt(0) == '4';\n+    }\n+\n+    /**\n+     * Checks whether the RsStatus is a server error.\n+     * @return True if the RsStatus is a server error, otherwise - false.\n+     * @since 0.16\n+     */\n+    public boolean isServerError() {\n+        return this.string.charAt(0) == '5';\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae8c1f9d1d4395fed0277cad3938b1ee7bb48c97"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjI2MjA0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/http/rs/RsStatus.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDowMzo0N1rOG_i0gQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDowMzo0N1rOG_i0gQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI4Mzk2OQ==", "bodyText": "@genryxy please add all classes of status codes from RFC, it's 6.x points in the document", "url": "https://github.com/artipie/http/pull/217#discussion_r469283969", "createdAt": "2020-08-12T14:03:47Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/http/rs/RsStatus.java", "diffHunk": "@@ -152,6 +152,33 @@ public String code() {\n         return this.string;\n     }\n ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae8c1f9d1d4395fed0277cad3938b1ee7bb48c97"}, "originalPosition": 3}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjI3MTU0OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/artipie/http/rs/RsStatusTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDowNTo1OVrOG_i6ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDowNTo1OVrOG_i6ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI4NTQ4Mg==", "bodyText": "@genryxy we are using hamcrest matchers for all tests in the project. Also if test has more then assertion, that it needs an assertion message", "url": "https://github.com/artipie/http/pull/217#discussion_r469285482", "createdAt": "2020-08-12T14:05:59Z", "author": {"login": "olegmoz"}, "path": "src/test/java/com/artipie/http/rs/RsStatusTest.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.rs;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test for {@link RsStatus}.\n+ *\n+ * @since 0.16\n+ */\n+final class RsStatusTest {\n+    @Test\n+    void createsClientError() {\n+        final RsStatus status = RsStatus.BAD_REQUEST;\n+        Assertions.assertTrue(status.isClientError());\n+        Assertions.assertTrue(status.isError());\n+        Assertions.assertFalse(status.isServerError());\n+    }\n+\n+    @Test\n+    void createsServerError() {\n+        final RsStatus status = RsStatus.INTERNAL_ERROR;\n+        Assertions.assertFalse(status.isClientError());\n+        Assertions.assertTrue(status.isError());\n+        Assertions.assertTrue(status.isServerError());\n+    }\n+\n+    @Test\n+    void createsNotError() {\n+        final RsStatus success = RsStatus.OK;\n+        final RsStatus rscontinue = RsStatus.CONTINUE;\n+        final RsStatus found = RsStatus.FOUND;\n+        Assertions.assertFalse(success.isError());\n+        Assertions.assertFalse(rscontinue.isError());\n+        Assertions.assertFalse(found.isError());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae8c1f9d1d4395fed0277cad3938b1ee7bb48c97"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjI3OTYzOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/artipie/http/rs/RsStatusTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDowNzo1OFrOG_i_fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDowNzo1OFrOG_i_fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI4Njc4Mg==", "bodyText": "@genryxy it would be better to use @ParameterizedTest here, to run same test for several status codes", "url": "https://github.com/artipie/http/pull/217#discussion_r469286782", "createdAt": "2020-08-12T14:07:58Z", "author": {"login": "olegmoz"}, "path": "src/test/java/com/artipie/http/rs/RsStatusTest.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.rs;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test for {@link RsStatus}.\n+ *\n+ * @since 0.16\n+ */\n+final class RsStatusTest {\n+    @Test\n+    void createsClientError() {\n+        final RsStatus status = RsStatus.BAD_REQUEST;\n+        Assertions.assertTrue(status.isClientError());\n+        Assertions.assertTrue(status.isError());\n+        Assertions.assertFalse(status.isServerError());\n+    }\n+\n+    @Test\n+    void createsServerError() {\n+        final RsStatus status = RsStatus.INTERNAL_ERROR;\n+        Assertions.assertFalse(status.isClientError());\n+        Assertions.assertTrue(status.isError());\n+        Assertions.assertTrue(status.isServerError());\n+    }\n+\n+    @Test\n+    void createsNotError() {\n+        final RsStatus success = RsStatus.OK;\n+        final RsStatus rscontinue = RsStatus.CONTINUE;\n+        final RsStatus found = RsStatus.FOUND;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae8c1f9d1d4395fed0277cad3938b1ee7bb48c97"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzMjMwNzEwOnYy", "diffSide": "RIGHT", "path": "src/test/java/com/artipie/http/rs/RsStatusTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDoxNDoxMlrOG_jQsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMlQxNDo0MDoxOFrOG_kbcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI5MTE4Nw==", "bodyText": "@genryxy test method names do not make much sense as RsStatus does not create anything. I'd rather name them shouldBe[ClientError/ServerError/Error] or test[ClientError/ServerError/Error]. WDYT?", "url": "https://github.com/artipie/http/pull/217#discussion_r469291187", "createdAt": "2020-08-12T14:14:12Z", "author": {"login": "olegmoz"}, "path": "src/test/java/com/artipie/http/rs/RsStatusTest.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.rs;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test for {@link RsStatus}.\n+ *\n+ * @since 0.16\n+ */\n+final class RsStatusTest {\n+    @Test\n+    void createsClientError() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ae8c1f9d1d4395fed0277cad3938b1ee7bb48c97"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTMxMDMyMQ==", "bodyText": "@olegmoz thanks, I think you're right", "url": "https://github.com/artipie/http/pull/217#discussion_r469310321", "createdAt": "2020-08-12T14:40:18Z", "author": {"login": "genryxy"}, "path": "src/test/java/com/artipie/http/rs/RsStatusTest.java", "diffHunk": "@@ -0,0 +1,61 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.rs;\n+\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test for {@link RsStatus}.\n+ *\n+ * @since 0.16\n+ */\n+final class RsStatusTest {\n+    @Test\n+    void createsClientError() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2OTI5MTE4Nw=="}, "originalCommit": {"oid": "ae8c1f9d1d4395fed0277cad3938b1ee7bb48c97"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1899, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}