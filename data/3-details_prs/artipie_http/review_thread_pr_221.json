{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY3MzQ0NzMz", "number": 221, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNjoxOToyNVrOEYWaYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNjoyMToxNFrOEYWb3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTY4NDgzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/http/rt/RlByMethods.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNjoxOToyNVrOHAo3TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNjoxOToyNVrOHAo3TA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQzMTU2NA==", "bodyText": "@g4s8 guess there is a typo and class should be named RtByMethod, not RlByMethod", "url": "https://github.com/artipie/http/pull/221#discussion_r470431564", "createdAt": "2020-08-14T06:19:25Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/http/rt/RlByMethods.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.rt;\n+\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rq.RqMethod;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Route by HTTP methods rule.\n+ * @since 0.16\n+ */\n+public final class RlByMethods implements RtRule {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba970ef093f9e0264e4d759b190d5270584c6e5d"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkzOTY4ODYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/http/rt/RlByMethods.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNjoyMToxNFrOHAo5WQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xNFQwNjoyMToxNFrOHAo5WQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MDQzMjA4OQ==", "bodyText": "@g4s8 I'd suggest to add a test for this method", "url": "https://github.com/artipie/http/pull/221#discussion_r470432089", "createdAt": "2020-08-14T06:21:14Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/http/rt/RlByMethods.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.rt;\n+\n+import com.artipie.http.rq.RequestLineFrom;\n+import com.artipie.http.rq.RqMethod;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n+\n+/**\n+ * Route by HTTP methods rule.\n+ * @since 0.16\n+ */\n+public final class RlByMethods implements RtRule {\n+\n+    /**\n+     * Standard method rules.\n+     * @since 0.16\n+     */\n+    public enum Standard implements RtRule {\n+        /**\n+         * Rule for {@code GET} method.\n+         */\n+        GET(new RlByMethods(RqMethod.GET)),\n+        /**\n+         * Rule for {@code POST} method.\n+         */\n+        POST(new RlByMethods(RqMethod.POST)),\n+        /**\n+         * Rule for {@code PUT} method.\n+         */\n+        PUT(new RlByMethods(RqMethod.PUT)),\n+        /**\n+         * Rule for {@code DELETE} method.\n+         */\n+        DELETE(new RlByMethods(RqMethod.DELETE)),\n+        /**\n+         * All common read methods.\n+         */\n+        ALL_READ(new RlByMethods(RqMethod.GET, RqMethod.HEAD, RqMethod.OPTIONS)),\n+        /**\n+         * All common write methods.\n+         */\n+        ALL_WRITE(new RlByMethods(RqMethod.PUT, RqMethod.POST, RqMethod.DELETE, RqMethod.PATCH));\n+\n+        /**\n+         * Origin rule.\n+         */\n+        private final RtRule origin;\n+\n+        /**\n+         * Ctor.\n+         * @param origin Rule\n+         */\n+        Standard(final RtRule origin) {\n+            this.origin = origin;\n+        }\n+\n+        @Override\n+        public boolean apply(final String line,\n+            final Iterable<Map.Entry<String, String>> headers) {\n+            return this.origin.apply(line, headers);\n+        }\n+    }\n+\n+    /**\n+     * Method name.\n+     */\n+    private final Set<RqMethod> methods;\n+\n+    /**\n+     * Route by methods.\n+     * @param methods Method names\n+     */\n+    public RlByMethods(final RqMethod... methods) {\n+        this(new HashSet<>(Arrays.asList(methods)));\n+    }\n+\n+    /**\n+     * Route by methods.\n+     * @param methods Method names\n+     */\n+    public RlByMethods(final Set<RqMethod> methods) {\n+        this.methods = Collections.unmodifiableSet(methods);\n+    }\n+\n+    @Override\n+    public boolean apply(final String line,\n+        final Iterable<Map.Entry<String, String>> headers) {\n+        return this.methods.contains(new RequestLineFrom(line).method());\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ba970ef093f9e0264e4d759b190d5270584c6e5d"}, "originalPosition": 115}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1904, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}