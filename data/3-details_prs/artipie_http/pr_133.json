{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NjczOTk0", "number": 133, "title": "#131 - Added Header class", "bodyText": "Closes #131\nAdded Header class", "createdAt": "2020-04-21T13:27:23Z", "url": "https://github.com/artipie/http/pull/133", "merged": true, "mergeCommit": {"oid": "d2d08c8dd3a371789b7256d21f5c5f77e90ef6f5"}, "closed": true, "closedAt": "2020-04-22T09:26:24Z", "author": {"login": "olegmoz"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcZzr9pAH2gAyNDA2NjczOTk0OjQ4ZDdmOWZiY2ZiNjFmZmY5MWZmNWEyZDRkZTNjZDVhYmQ3MTk0YzA=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaE1mqgFqTM5ODAwNzE4NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "48d7f9fbcfb61fff91ff5a2d4de3cd5abd7194c0", "author": {"user": {"login": "olegmoz", "name": "Oleg Mozzhechkov"}}, "url": "https://github.com/artipie/http/commit/48d7f9fbcfb61fff91ff5a2d4de3cd5abd7194c0", "committedDate": "2020-04-21T13:27:22Z", "message": "#131 - Added Header class"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3NDcyMzky", "url": "https://github.com/artipie/http/pull/133#pullrequestreview-397472392", "createdAt": "2020-04-21T16:30:17Z", "commit": {"oid": "48d7f9fbcfb61fff91ff5a2d4de3cd5abd7194c0"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3ODczMTA2", "url": "https://github.com/artipie/http/pull/133#pullrequestreview-397873106", "createdAt": "2020-04-22T06:18:17Z", "commit": {"oid": "48d7f9fbcfb61fff91ff5a2d4de3cd5abd7194c0"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjoxODoxN1rOGJlNGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQwNjoyMTowN1rOGJlSHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjY5OTkyOA==", "bodyText": "@olegmoz can we use single SP for header value. It's not required by specification, but recommended https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2\n\nThe field value MAY be preceded by any amount of LWS, though a single SP is preferred.", "url": "https://github.com/artipie/http/pull/133#discussion_r412699928", "createdAt": "2020-04-22T06:18:17Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/http/rs/Header.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.rs;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * HTTP header.\n+ * Name of header is considered to be case-insensitive when compared to one another.\n+ *\n+ * @since 0.8\n+ */\n+public final class Header implements Map.Entry<String, String> {\n+\n+    /**\n+     * Name.\n+     */\n+    private final String name;\n+\n+    /**\n+     * Value.\n+     */\n+    private final String value;\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param entry Entry representing a header.\n+     */\n+    public Header(final Map.Entry<String, String> entry) {\n+        this(entry.getKey(), entry.getValue());\n+    }\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param name Name.\n+     * @param value Value.\n+     */\n+    public Header(final String name, final String value) {\n+        this.name = name;\n+        this.value = value;\n+    }\n+\n+    @Override\n+    public String getKey() {\n+        return this.name;\n+    }\n+\n+    @Override\n+    public String getValue() {\n+        return this.value;\n+    }\n+\n+    @Override\n+    public String setValue(final String ignored) {\n+        throw new UnsupportedOperationException(\"Value cannot be modified\");\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"PMD.OnlyOneReturn\")\n+    public boolean equals(final Object that) {\n+        if (this == that) {\n+            return true;\n+        }\n+        if (that == null || getClass() != that.getClass()) {\n+            return false;\n+        }\n+        final Header header = (Header) that;\n+        return this.lowercaseName().equals(header.lowercaseName())\n+            && this.value.equals(header.value);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return Objects.hash(this.lowercaseName(), this.value);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return String.format(\"%s:%s\", this.name, this.value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48d7f9fbcfb61fff91ff5a2d4de3cd5abd7194c0"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjcwMTIxNQ==", "bodyText": "@olegmoz header value starts with first non-whitespace char, so I'd trim all leading whitespaces (LWS) here", "url": "https://github.com/artipie/http/pull/133#discussion_r412701215", "createdAt": "2020-04-22T06:21:07Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/http/rs/Header.java", "diffHunk": "@@ -0,0 +1,115 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.rs;\n+\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+\n+/**\n+ * HTTP header.\n+ * Name of header is considered to be case-insensitive when compared to one another.\n+ *\n+ * @since 0.8\n+ */\n+public final class Header implements Map.Entry<String, String> {\n+\n+    /**\n+     * Name.\n+     */\n+    private final String name;\n+\n+    /**\n+     * Value.\n+     */\n+    private final String value;\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param entry Entry representing a header.\n+     */\n+    public Header(final Map.Entry<String, String> entry) {\n+        this(entry.getKey(), entry.getValue());\n+    }\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param name Name.\n+     * @param value Value.\n+     */\n+    public Header(final String name, final String value) {\n+        this.name = name;\n+        this.value = value;\n+    }\n+\n+    @Override\n+    public String getKey() {\n+        return this.name;\n+    }\n+\n+    @Override\n+    public String getValue() {\n+        return this.value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "48d7f9fbcfb61fff91ff5a2d4de3cd5abd7194c0"}, "originalPosition": 75}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3b85446a6d603533bb25e8e8b2aa40cdd2096589", "author": {"user": {"login": "olegmoz", "name": "Oleg Mozzhechkov"}}, "url": "https://github.com/artipie/http/commit/3b85446a6d603533bb25e8e8b2aa40cdd2096589", "committedDate": "2020-04-22T08:16:51Z", "message": "#131 - Changes by review"}, "afterCommit": {"oid": "060a6dccf2fc097f3c4d746998f1a7e3cd3f5d7c", "author": {"user": {"login": "olegmoz", "name": "Oleg Mozzhechkov"}}, "url": "https://github.com/artipie/http/commit/060a6dccf2fc097f3c4d746998f1a7e3cd3f5d7c", "committedDate": "2020-04-22T08:25:07Z", "message": "#131 - Changes by review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "060a6dccf2fc097f3c4d746998f1a7e3cd3f5d7c", "author": {"user": {"login": "olegmoz", "name": "Oleg Mozzhechkov"}}, "url": "https://github.com/artipie/http/commit/060a6dccf2fc097f3c4d746998f1a7e3cd3f5d7c", "committedDate": "2020-04-22T08:25:07Z", "message": "#131 - Changes by review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MDA3MTg1", "url": "https://github.com/artipie/http/pull/133#pullrequestreview-398007185", "createdAt": "2020-04-22T09:26:17Z", "commit": {"oid": "060a6dccf2fc097f3c4d746998f1a7e3cd3f5d7c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3179, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}