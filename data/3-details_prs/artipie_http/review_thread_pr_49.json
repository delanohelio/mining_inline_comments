{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3ODE2OTU3", "number": 49, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxODoyMjozN1rODhoXbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxODozMTo0MlrODhoi8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NTkwOTU3OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/artipie/http/rq/RqHeadersTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxODoyMjozN1rOFseLHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMTowNzo0M1rOFszdfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE3NjAyOA==", "bodyText": "@g4s8 Please add a failure message to this assertion", "url": "https://github.com/artipie/http/pull/49#discussion_r382176028", "createdAt": "2020-02-20T18:22:37Z", "author": {"login": "paulodamaso"}, "path": "src/test/java/com/artipie/http/rq/RqHeadersTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.rq;\n+\n+import org.cactoos.iterable.IterableOf;\n+import org.cactoos.list.ListOf;\n+import org.cactoos.map.MapEntry;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.collection.IsIterableContainingInOrder;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.llorllale.cactoos.matchers.TextHasString;\n+\n+/**\n+ * Test case for {@link RqHeaders}.\n+ *\n+ * @since 0.4\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+public final class RqHeadersTest {\n+\n+    @Test\n+    void findsAllHeaderValues() {\n+        final String first = \"1\";\n+        final String second = \"2\";\n+        MatcherAssert.assertThat(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "164257e0d518c073054a188c835fd51a6c0f9441"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ2MTIzOA==", "bodyText": "@paulodamaso why? This method has descriptive name (I think) and has the only assertion, why do we need to duplicate method name in assertion messag?", "url": "https://github.com/artipie/http/pull/49#discussion_r382461238", "createdAt": "2020-02-21T08:51:26Z", "author": {"login": "g4s8"}, "path": "src/test/java/com/artipie/http/rq/RqHeadersTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.rq;\n+\n+import org.cactoos.iterable.IterableOf;\n+import org.cactoos.list.ListOf;\n+import org.cactoos.map.MapEntry;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.collection.IsIterableContainingInOrder;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.llorllale.cactoos.matchers.TextHasString;\n+\n+/**\n+ * Test case for {@link RqHeaders}.\n+ *\n+ * @since 0.4\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+public final class RqHeadersTest {\n+\n+    @Test\n+    void findsAllHeaderValues() {\n+        final String first = \"1\";\n+        final String second = \"2\";\n+        MatcherAssert.assertThat(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE3NjAyOA=="}, "originalCommit": {"oid": "164257e0d518c073054a188c835fd51a6c0f9441"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyNDc5OQ==", "bodyText": "@g4s8 We are all using failure messages in the assertions (at least I ask the reviewers to put them), so it's a good idea to make the code uniform. Also, I think that a human friendly message won't hurt in this case", "url": "https://github.com/artipie/http/pull/49#discussion_r382524799", "createdAt": "2020-02-21T11:07:43Z", "author": {"login": "paulodamaso"}, "path": "src/test/java/com/artipie/http/rq/RqHeadersTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.rq;\n+\n+import org.cactoos.iterable.IterableOf;\n+import org.cactoos.list.ListOf;\n+import org.cactoos.map.MapEntry;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.collection.IsIterableContainingInOrder;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.llorllale.cactoos.matchers.TextHasString;\n+\n+/**\n+ * Test case for {@link RqHeaders}.\n+ *\n+ * @since 0.4\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+public final class RqHeadersTest {\n+\n+    @Test\n+    void findsAllHeaderValues() {\n+        final String first = \"1\";\n+        final String second = \"2\";\n+        MatcherAssert.assertThat(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE3NjAyOA=="}, "originalCommit": {"oid": "164257e0d518c073054a188c835fd51a6c0f9441"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NTkxMjM2OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/artipie/http/rq/RqHeadersTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxODoyMzoxOVrOFseMqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQwODo1MTozNFrOFsvlbg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE3NjQyNg==", "bodyText": "@g4s8 Please add a failure message to this assertion", "url": "https://github.com/artipie/http/pull/49#discussion_r382176426", "createdAt": "2020-02-20T18:23:19Z", "author": {"login": "paulodamaso"}, "path": "src/test/java/com/artipie/http/rq/RqHeadersTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.rq;\n+\n+import org.cactoos.iterable.IterableOf;\n+import org.cactoos.list.ListOf;\n+import org.cactoos.map.MapEntry;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.collection.IsIterableContainingInOrder;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.llorllale.cactoos.matchers.TextHasString;\n+\n+/**\n+ * Test case for {@link RqHeaders}.\n+ *\n+ * @since 0.4\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+public final class RqHeadersTest {\n+\n+    @Test\n+    void findsAllHeaderValues() {\n+        final String first = \"1\";\n+        final String second = \"2\";\n+        MatcherAssert.assertThat(\n+            new RqHeaders(\n+                new IterableOf<>(\n+                    new MapEntry<>(\"x-header\", first),\n+                    new MapEntry<>(\"Accept\", \"application/json\"),\n+                    new MapEntry<>(\"X-Header\", second)\n+                ),\n+                \"X-header\"\n+            ),\n+            new IsIterableContainingInOrder<>(\n+                new ListOf<>(\n+                    new IsEqual<>(first),\n+                    new IsEqual<>(second)\n+                )\n+            )\n+        );\n+    }\n+\n+    @Test\n+    void findSingleValue() {\n+        final String value = \"text/plain\";\n+        MatcherAssert.assertThat(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "164257e0d518c073054a188c835fd51a6c0f9441"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ2MTI5NA==", "bodyText": "@paulodamaso same here", "url": "https://github.com/artipie/http/pull/49#discussion_r382461294", "createdAt": "2020-02-21T08:51:34Z", "author": {"login": "g4s8"}, "path": "src/test/java/com/artipie/http/rq/RqHeadersTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.rq;\n+\n+import org.cactoos.iterable.IterableOf;\n+import org.cactoos.list.ListOf;\n+import org.cactoos.map.MapEntry;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.collection.IsIterableContainingInOrder;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Assertions;\n+import org.junit.jupiter.api.Test;\n+import org.llorllale.cactoos.matchers.TextHasString;\n+\n+/**\n+ * Test case for {@link RqHeaders}.\n+ *\n+ * @since 0.4\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+public final class RqHeadersTest {\n+\n+    @Test\n+    void findsAllHeaderValues() {\n+        final String first = \"1\";\n+        final String second = \"2\";\n+        MatcherAssert.assertThat(\n+            new RqHeaders(\n+                new IterableOf<>(\n+                    new MapEntry<>(\"x-header\", first),\n+                    new MapEntry<>(\"Accept\", \"application/json\"),\n+                    new MapEntry<>(\"X-Header\", second)\n+                ),\n+                \"X-header\"\n+            ),\n+            new IsIterableContainingInOrder<>(\n+                new ListOf<>(\n+                    new IsEqual<>(first),\n+                    new IsEqual<>(second)\n+                )\n+            )\n+        );\n+    }\n+\n+    @Test\n+    void findSingleValue() {\n+        final String value = \"text/plain\";\n+        MatcherAssert.assertThat(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE3NjQyNg=="}, "originalCommit": {"oid": "164257e0d518c073054a188c835fd51a6c0f9441"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2NTkzOTA3OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/http/rq/RqHeaders.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxODozMTo0MlrOFsedsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMVQxMToxMzo0NFrOFsznIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE4MDc4Nw==", "bodyText": "@g4s8 I just see one inconsistency here: if RqHeaders contract follows ListEnvelope<String>, we expect that a Single header to be a String. In this case, you've made it Text. To avoid confusion and keep similar constructs being represented by the same classes, make RqHeaders contract follows ListEnvelope<Text>and makeSingleimplementText`", "url": "https://github.com/artipie/http/pull/49#discussion_r382180787", "createdAt": "2020-02-20T18:31:42Z", "author": {"login": "paulodamaso"}, "path": "src/main/java/com/artipie/http/rq/RqHeaders.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.rq;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import org.cactoos.Text;\n+import org.cactoos.collection.Filtered;\n+import org.cactoos.list.ListEnvelope;\n+import org.cactoos.list.Mapped;\n+\n+/**\n+ * Request headers.\n+ * <p>\n+ * Request header values by name from headers.\n+ * Usage (assume {@link com.artipie.http.Slice} implementation):\n+ * <pre><code>\n+ *  Response response(String line, Iterable&lt;Map.Entry&lt;String, String&gt;&gt; headers,\n+ *      Flow.Publisher&lt;ByteBuffer&gt; body) {\n+ *          List&lt;String&gt; values = new RqHeaders(headers, \"content-type\");\n+ *          // use these headers\n+ *  }\n+ * </code></pre>\n+ * Header names are case-insensitive, according to\n+ * <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2\">RFC2616 SPEC</a>:\n+ * <br>\n+ * &gt; Each header field consists of a name followed by a colon (\":\") and the field value.\n+ * <br>\n+ * &gt; Field names are case-insensitive\n+ * </p>\n+ * @since 0.4\n+ */\n+public final class RqHeaders extends ListEnvelope<String> implements List<String> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "164257e0d518c073054a188c835fd51a6c0f9441"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjQ2MTkyNw==", "bodyText": "@paulodamaso I don't agree: List<String> is a source object of multiple strings, but Text is a source object for single string, so the semantic of both classes List<String> -> String and Text -> String are similar, don't you think?", "url": "https://github.com/artipie/http/pull/49#discussion_r382461927", "createdAt": "2020-02-21T08:52:59Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/http/rq/RqHeaders.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.rq;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import org.cactoos.Text;\n+import org.cactoos.collection.Filtered;\n+import org.cactoos.list.ListEnvelope;\n+import org.cactoos.list.Mapped;\n+\n+/**\n+ * Request headers.\n+ * <p>\n+ * Request header values by name from headers.\n+ * Usage (assume {@link com.artipie.http.Slice} implementation):\n+ * <pre><code>\n+ *  Response response(String line, Iterable&lt;Map.Entry&lt;String, String&gt;&gt; headers,\n+ *      Flow.Publisher&lt;ByteBuffer&gt; body) {\n+ *          List&lt;String&gt; values = new RqHeaders(headers, \"content-type\");\n+ *          // use these headers\n+ *  }\n+ * </code></pre>\n+ * Header names are case-insensitive, according to\n+ * <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2\">RFC2616 SPEC</a>:\n+ * <br>\n+ * &gt; Each header field consists of a name followed by a colon (\":\") and the field value.\n+ * <br>\n+ * &gt; Field names are case-insensitive\n+ * </p>\n+ * @since 0.4\n+ */\n+public final class RqHeaders extends ListEnvelope<String> implements List<String> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE4MDc4Nw=="}, "originalCommit": {"oid": "164257e0d518c073054a188c835fd51a6c0f9441"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjUyNzI2Nw==", "bodyText": "@g4s8 I don't see this way, it is strange to me that a single header is represented by a Text object and a collection of Headers is represented by a List<String> one. In my opinion we should chose one way to represent a single header (Text or String, doesn't really matter) and use a collection of this this very same type to represent a collection of headers. In fact, maybe we should have Header object and have Headers collective  as being a collection of Header, but I think that this may be outside of the scope of this issue", "url": "https://github.com/artipie/http/pull/49#discussion_r382527267", "createdAt": "2020-02-21T11:13:44Z", "author": {"login": "paulodamaso"}, "path": "src/main/java/com/artipie/http/rq/RqHeaders.java", "diffHunk": "@@ -0,0 +1,117 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.rq;\n+\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.Objects;\n+import org.cactoos.Text;\n+import org.cactoos.collection.Filtered;\n+import org.cactoos.list.ListEnvelope;\n+import org.cactoos.list.Mapped;\n+\n+/**\n+ * Request headers.\n+ * <p>\n+ * Request header values by name from headers.\n+ * Usage (assume {@link com.artipie.http.Slice} implementation):\n+ * <pre><code>\n+ *  Response response(String line, Iterable&lt;Map.Entry&lt;String, String&gt;&gt; headers,\n+ *      Flow.Publisher&lt;ByteBuffer&gt; body) {\n+ *          List&lt;String&gt; values = new RqHeaders(headers, \"content-type\");\n+ *          // use these headers\n+ *  }\n+ * </code></pre>\n+ * Header names are case-insensitive, according to\n+ * <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec4.html#sec4.2\">RFC2616 SPEC</a>:\n+ * <br>\n+ * &gt; Each header field consists of a name followed by a colon (\":\") and the field value.\n+ * <br>\n+ * &gt; Field names are case-insensitive\n+ * </p>\n+ * @since 0.4\n+ */\n+public final class RqHeaders extends ListEnvelope<String> implements List<String> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjE4MDc4Nw=="}, "originalCommit": {"oid": "164257e0d518c073054a188c835fd51a6c0f9441"}, "originalPosition": 56}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1959, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}