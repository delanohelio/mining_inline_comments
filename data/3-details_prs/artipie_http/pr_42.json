{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3MDEwMTM5", "number": 42, "title": "Async implementations of slice and response", "bodyText": "#41 - added async implementations for Slice and Response based on CompletionStage, returning 500 error in case of unhandled exception in CompletionStage.", "createdAt": "2020-02-19T07:35:46Z", "url": "https://github.com/artipie/http/pull/42", "merged": true, "mergeCommit": {"oid": "612eb5835c4b3ce8b80061532741cba5f0aa308e"}, "closed": true, "closedAt": "2020-02-27T09:29:50Z", "author": {"login": "g4s8"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcFxa-dgH2gAyMzc3MDEwMTM5OjAyNGNmZDgxZjIwMDE0YThjNDM4MDU0NjZlNWE3NWMwZmMwNTNiYTc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcIWyYWgH2gAyMzc3MDEwMTM5OmZmMDRjODkyMGViNzc0ZDhlOTUxMjBmZWVlY2ZkOWVhNDgxOTY0N2M=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "024cfd81f20014a8c43805466e5a75c0fc053ba7", "author": {"user": {"login": "g4s8", "name": "Kirill"}}, "url": "https://github.com/artipie/http/commit/024cfd81f20014a8c43805466e5a75c0fc053ba7", "committedDate": "2020-02-19T07:30:31Z", "message": "#41 - async implementations"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxNzk4NDAx", "url": "https://github.com/artipie/http/pull/42#pullrequestreview-361798401", "createdAt": "2020-02-20T10:41:00Z", "commit": {"oid": "024cfd81f20014a8c43805466e5a75c0fc053ba7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYzMjM4NjU5", "url": "https://github.com/artipie/http/pull/42#pullrequestreview-363238659", "createdAt": "2020-02-24T09:04:07Z", "commit": {"oid": "024cfd81f20014a8c43805466e5a75c0fc053ba7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwOTowNDowN1rOFtZLxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yNFQwOTowNDo1OVrOFtZM1g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE0Mjg1NA==", "bodyText": "@g4s8 just wondering here, we don't have any public constructor for either RsAsync or AsyncSlice, is it ever only going to be instantiated from this package?", "url": "https://github.com/artipie/http/pull/42#discussion_r383142854", "createdAt": "2020-02-24T09:04:07Z", "author": {"login": "carlosmiranda"}, "path": "src/main/java/com/artipie/http/async/RsAsync.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.async;\n+\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import com.artipie.http.rs.RsWithBody;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.nio.charset.StandardCharsets;\n+import java.util.concurrent.CompletionStage;\n+\n+/**\n+ * Asynchronous {@link Response} implementation.\n+ * <p>\n+ * Response which send itself to connection only when\n+ * underlying {@link CompletionStage} with response is ready.\n+ * If completion stage fails, this decorator sends 500 status code with\n+ * message text as a body.\n+ * </p>\n+ * @since 0.4\n+ */\n+public final class RsAsync implements Response {\n+\n+    /**\n+     * Async response.\n+     */\n+    private final CompletionStage<Response> rsp;\n+\n+    /**\n+     * Ctor.\n+     * @param rsp Response\n+     */\n+    RsAsync(final CompletionStage<Response> rsp) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "024cfd81f20014a8c43805466e5a75c0fc053ba7"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MzE0MzEyNg==", "bodyText": "@g4s8 wouldn't we need at least a public constructor for AsyncSlice if not perhaps RsAsync too? Because both classes are public. Or is everything going to be instantiated from this package to be passed on elsewhere?", "url": "https://github.com/artipie/http/pull/42#discussion_r383143126", "createdAt": "2020-02-24T09:04:59Z", "author": {"login": "carlosmiranda"}, "path": "src/main/java/com/artipie/http/async/AsyncSlice.java", "diffHunk": "@@ -0,0 +1,69 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.async;\n+\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.CompletionStage;\n+import java.util.concurrent.Flow;\n+\n+/**\n+ * Asynchronous {@link Slice} implementation.\n+ * <p>\n+ * This slice encapsulates {@link CompletionStage} of {@link Slice}\n+ * and returns {@link RsAsync} with completion stage mapping.\n+ * </p>\n+ * @since 0.4\n+ * @todo #41:30min Add unit tests for AsyncSlice and RsAsync.\n+ *  Tests should verify the positive case, when slice and response\n+ *  completes normally; And exceptional behavior, when 500 error should be\n+ *  sent to connection.\n+ */\n+public final class AsyncSlice implements Slice {\n+\n+    /**\n+     * Async slice.\n+     */\n+    private final CompletionStage<Slice> slice;\n+\n+    /**\n+     * Ctor.\n+     * @param slice Async slice.\n+     */\n+    AsyncSlice(final CompletionStage<Slice> slice) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "024cfd81f20014a8c43805466e5a75c0fc053ba7"}, "originalPosition": 57}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ff04c8920eb774d8e95120feeecfd9ea4819647c", "author": {"user": {"login": "g4s8", "name": "Kirill"}}, "url": "https://github.com/artipie/http/commit/ff04c8920eb774d8e95120feeecfd9ea4819647c", "committedDate": "2020-02-27T08:10:25Z", "message": "#41 - (cr) public constructors"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3307, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}