{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI1NzY1NDIw", "number": 168, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNToxNDo0N1rOEBZkHg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNToxNDo0N1rOEBZkHg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5OTAyODc4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/http/Headers.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNToxNDo0N1rOGdOQYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wMVQxNToxNDo0N1rOGdOQYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMzI5NTQ1Nw==", "bodyText": "@olenagerasimova please change all overridden methods to be final", "url": "https://github.com/artipie/http/pull/168#discussion_r433295457", "createdAt": "2020-06-01T15:14:47Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/http/Headers.java", "diffHunk": "@@ -100,4 +100,47 @@ public void forEach(final Consumer<? super Map.Entry<String, String>> action) {\n             return this.origin.spliterator();\n         }\n     }\n+\n+    /**\n+     * Abstract decorator for {@link Headers}.\n+     * @since 0.10\n+     */\n+    abstract class Wrap implements Headers {\n+\n+        /**\n+         * Origin headers.\n+         */\n+        private final Iterable<Map.Entry<String, String>> origin;\n+\n+        /**\n+         * Ctor.\n+         * @param origin Origin headers\n+         */\n+        protected Wrap(final Iterable<Map.Entry<String, String>> origin) {\n+            this.origin = origin;\n+        }\n+\n+        /**\n+         * Ctor.\n+         * @param origin Origin headers\n+         */\n+        protected Wrap(final Header... origin) {\n+            this(Arrays.asList(origin));\n+        }\n+\n+        @Override\n+        public Iterator<Map.Entry<String, String>> iterator() {\n+            return this.origin.iterator();\n+        }\n+\n+        @Override\n+        public void forEach(final Consumer<? super Map.Entry<String, String>> action) {\n+            this.origin.forEach(action);\n+        }\n+\n+        @Override\n+        public Spliterator<Map.Entry<String, String>> spliterator() {\n+            return this.origin.spliterator();\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "71de5dc542c5a4e65a022676dbb8424c24be9df2"}, "originalPosition": 45}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1859, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}