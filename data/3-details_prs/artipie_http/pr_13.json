{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwODY0OTM3", "number": 13, "title": "Request line helper object", "bodyText": "#12 - added request line helper object with unit tests", "createdAt": "2020-02-04T14:23:12Z", "url": "https://github.com/artipie/http/pull/13", "merged": true, "mergeCommit": {"oid": "8e05d2ac38112e06735dc4c21b1dff7f83d69623"}, "closed": true, "closedAt": "2020-02-06T14:23:14Z", "author": {"login": "g4s8"}, "timelineItems": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBCPxxgH2gAyMzcwODY0OTM3OjM0MGYzY2M0Zjc1MTQ2NjJkODFhODg2ZDc3MGQ2NTA1YTgxZDc5YWE=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcBrT_1AFqTM1NDQ3NDM5NQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "340f3cc4f7514662d81a886d770d6505a81d79aa", "author": {"user": {"login": "g4s8", "name": "Kirill"}}, "url": "https://github.com/artipie/http/commit/340f3cc4f7514662d81a886d770d6505a81d79aa", "committedDate": "2020-02-04T14:17:03Z", "message": "#12 - request line helper object"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNTM5MDc3", "url": "https://github.com/artipie/http/pull/13#pullrequestreview-353539077", "createdAt": "2020-02-05T08:36:43Z", "commit": {"oid": "340f3cc4f7514662d81a886d770d6505a81d79aa"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwODozNjo0M1rOFlvbbQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwODozNjo0M1rOFlvbbQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTExODcwMQ==", "bodyText": "@g4s8 maybe it's better to rewrite it using ItemAt?\nreturn new IoChecked<>(\n    () -> new ItemAt<>(\n        idx,\n        new Split(\n            this.line,\n            \"\\\\s\"\n        )\n    ).value().asString()\n).value();\n\nOr even simpler if we're able to change exception in signature to just Exception:\nnew ItemAt<>(\n    idx,\n    new Split(\n        this.line,\n        \"\\\\s\"\n    )\n).value().asString();\n\nAnother option is to change method signature to private Text part(final int idx) throws IOException. That'll give us opportunity to write even more concise:\nnew IoChecked<>(\n    new ItemAt<>(\n        idx,\n        new Split(\n            this.line,\n            \"\\\\s\"\n        )\n    )\n).value();", "url": "https://github.com/artipie/http/pull/13#discussion_r375118701", "createdAt": "2020-02-05T08:36:43Z", "author": {"login": "iakunin"}, "path": "src/main/java/com/artipie/http/rq/RequestLine.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.rq;\n+\n+import com.artipie.http.Request;\n+import java.io.IOException;\n+import java.net.URI;\n+import org.cactoos.Text;\n+import org.cactoos.scalar.IoChecked;\n+import org.cactoos.text.TextOf;\n+\n+/**\n+ * Request line helper object.\n+ * <p>\n+ * See 5.1 section of RFC2616:<br/>\n+ * The Request-Line begins with a method token,\n+ * followed by the Request-URI and the protocol version,\n+ * and ending with {@code CRLF}.\n+ * The elements are separated by SP characters.\n+ * No {@code CR} or {@code LF} is allowed except in the final {@code CRLF} sequence.\n+ * <br/>\n+ * {@code Request-Line = Method SP Request-URI SP HTTP-Version CRLF}.\n+ * </p>\n+ * @see <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html\">RFC2616</a>\n+ * @since 0.1\n+ */\n+public final class RequestLine {\n+\n+    /**\n+     * HTTP request line.\n+     */\n+    private final Text line;\n+\n+    /**\n+     * Request line of HTTP request.\n+     * @param req HTTP request\n+     */\n+    public RequestLine(final Request req) {\n+        this(req::line);\n+    }\n+\n+    /**\n+     * New reqiest line from string.\n+     * @param line Request line string\n+     */\n+    public RequestLine(final String line) {\n+        this(new TextOf(line));\n+    }\n+\n+    /**\n+     * Primary ctor.\n+     * @param line HTTP request line\n+     */\n+    public RequestLine(final Text line) {\n+        this.line = line;\n+    }\n+\n+    /**\n+     * Request method.\n+     * @return Method name\n+     * @throws IOException In case of IO error\n+     */\n+    public String method() throws IOException {\n+        return this.part(0);\n+    }\n+\n+    /**\n+     * Request URI.\n+     * @return URI of the request\n+     * @throws IOException In case of IO error\n+     */\n+    public URI uri() throws IOException {\n+        return URI.create(this.part(1));\n+    }\n+\n+    /**\n+     * HTTP version.\n+     * @return HTTP version string\n+     * @throws IOException In case of IO error\n+     */\n+    public String version() throws IOException {\n+        return this.part(2);\n+    }\n+\n+    /**\n+     * Part of request line.\n+     * @param idx Part index\n+     * @return Part string\n+     * @throws IOException In case of IO error\n+     */\n+    private String part(final int idx) throws IOException {\n+        return new IoChecked<>(this.line::asString).value().split(\"\\\\s\")[idx];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "340f3cc4f7514662d81a886d770d6505a81d79aa"}, "originalPosition": 114}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNjQ1OTYw", "url": "https://github.com/artipie/http/pull/13#pullrequestreview-353645960", "createdAt": "2020-02-05T11:29:33Z", "commit": {"oid": "340f3cc4f7514662d81a886d770d6505a81d79aa"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzUzNjYzMTkw", "url": "https://github.com/artipie/http/pull/13#pullrequestreview-353663190", "createdAt": "2020-02-05T12:01:35Z", "commit": {"oid": "340f3cc4f7514662d81a886d770d6505a81d79aa"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjowMTozNVrOFl1V7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxMjowMTozNVrOFl1V7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTIxNTU5OQ==", "bodyText": "@g4s8 here can be ArrayIndexOutOfBoundsException: should we handle this case?", "url": "https://github.com/artipie/http/pull/13#discussion_r375215599", "createdAt": "2020-02-05T12:01:35Z", "author": {"login": "iakunin"}, "path": "src/main/java/com/artipie/http/rq/RequestLine.java", "diffHunk": "@@ -0,0 +1,116 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.rq;\n+\n+import com.artipie.http.Request;\n+import java.io.IOException;\n+import java.net.URI;\n+import org.cactoos.Text;\n+import org.cactoos.scalar.IoChecked;\n+import org.cactoos.text.TextOf;\n+\n+/**\n+ * Request line helper object.\n+ * <p>\n+ * See 5.1 section of RFC2616:<br/>\n+ * The Request-Line begins with a method token,\n+ * followed by the Request-URI and the protocol version,\n+ * and ending with {@code CRLF}.\n+ * The elements are separated by SP characters.\n+ * No {@code CR} or {@code LF} is allowed except in the final {@code CRLF} sequence.\n+ * <br/>\n+ * {@code Request-Line = Method SP Request-URI SP HTTP-Version CRLF}.\n+ * </p>\n+ * @see <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html\">RFC2616</a>\n+ * @since 0.1\n+ */\n+public final class RequestLine {\n+\n+    /**\n+     * HTTP request line.\n+     */\n+    private final Text line;\n+\n+    /**\n+     * Request line of HTTP request.\n+     * @param req HTTP request\n+     */\n+    public RequestLine(final Request req) {\n+        this(req::line);\n+    }\n+\n+    /**\n+     * New reqiest line from string.\n+     * @param line Request line string\n+     */\n+    public RequestLine(final String line) {\n+        this(new TextOf(line));\n+    }\n+\n+    /**\n+     * Primary ctor.\n+     * @param line HTTP request line\n+     */\n+    public RequestLine(final Text line) {\n+        this.line = line;\n+    }\n+\n+    /**\n+     * Request method.\n+     * @return Method name\n+     * @throws IOException In case of IO error\n+     */\n+    public String method() throws IOException {\n+        return this.part(0);\n+    }\n+\n+    /**\n+     * Request URI.\n+     * @return URI of the request\n+     * @throws IOException In case of IO error\n+     */\n+    public URI uri() throws IOException {\n+        return URI.create(this.part(1));\n+    }\n+\n+    /**\n+     * HTTP version.\n+     * @return HTTP version string\n+     * @throws IOException In case of IO error\n+     */\n+    public String version() throws IOException {\n+        return this.part(2);\n+    }\n+\n+    /**\n+     * Part of request line.\n+     * @param idx Part index\n+     * @return Part string\n+     * @throws IOException In case of IO error\n+     */\n+    private String part(final int idx) throws IOException {\n+        return new IoChecked<>(this.line::asString).value().split(\"\\\\s\")[idx];", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "340f3cc4f7514662d81a886d770d6505a81d79aa"}, "originalPosition": 114}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0a610577ff4476dab0df9cbcc80d2d7935b5e633", "author": {"user": {"login": "g4s8", "name": "Kirill"}}, "url": "https://github.com/artipie/http/commit/0a610577ff4476dab0df9cbcc80d2d7935b5e633", "committedDate": "2020-02-06T10:32:45Z", "message": "#12 - merged master"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4a5c8097b1523dac325dc4fb8600bf4c51b8d2a3", "author": {"user": {"login": "g4s8", "name": "Kirill"}}, "url": "https://github.com/artipie/http/commit/4a5c8097b1523dac325dc4fb8600bf4c51b8d2a3", "committedDate": "2020-02-06T12:37:06Z", "message": "#12 - (cr) added todo"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6e1d00a2638378a143df47aeae7854acf65688ec", "author": {"user": {"login": "g4s8", "name": "Kirill"}}, "url": "https://github.com/artipie/http/commit/6e1d00a2638378a143df47aeae7854acf65688ec", "committedDate": "2020-02-06T13:23:16Z", "message": "#12 - updated request line"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU0NDc0Mzk1", "url": "https://github.com/artipie/http/pull/13#pullrequestreview-354474395", "createdAt": "2020-02-06T14:07:46Z", "commit": {"oid": "6e1d00a2638378a143df47aeae7854acf65688ec"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3281, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}