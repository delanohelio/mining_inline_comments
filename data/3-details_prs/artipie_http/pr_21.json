{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcxODY2Nzcz", "number": 21, "title": "Response with status and matcher", "bodyText": "#17 - added response with status and hamcrest matcher to verify response status", "createdAt": "2020-02-06T12:13:03Z", "url": "https://github.com/artipie/http/pull/21", "merged": true, "mergeCommit": {"oid": "1fba1823e6a8fedac5e56f0dfdd91c0807607e0c"}, "closed": true, "closedAt": "2020-02-08T07:27:43Z", "author": {"login": "g4s8"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcBpngeAH2gAyMzcxODY2NzczOmM5M2EyMmZmM2M1MmM5NTY3YWI5NzJlNzM0MWE0ZTBlYTE2YWZkMWQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcCTQ0jAFqTM1NTU0NjE1MQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c93a22ff3c52c9567ab972e7341a4e0ea16afd1d", "author": {"user": {"login": "g4s8", "name": "Kirill"}}, "url": "https://github.com/artipie/http/commit/c93a22ff3c52c9567ab972e7341a4e0ea16afd1d", "committedDate": "2020-02-06T12:09:16Z", "message": "#17 - response with status and matcher"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MTY5OTQ1", "url": "https://github.com/artipie/http/pull/21#pullrequestreview-355169945", "createdAt": "2020-02-07T13:54:46Z", "commit": {"oid": "c93a22ff3c52c9567ab972e7341a4e0ea16afd1d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxMzo1NDo0NlrOFm9soQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDowNDo0N1rOFm9_ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQwMTA1Nw==", "bodyText": "@g4s8 How about using cactoos-matchers to make assertions without using hamcrest static classes and methods?", "url": "https://github.com/artipie/http/pull/21#discussion_r376401057", "createdAt": "2020-02-07T13:54:46Z", "author": {"login": "paulodamaso"}, "path": "src/test/java/com/artipie/http/rs/StatusResponseTest.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.rs;\n+\n+import com.artipie.http.hm.RsHasStatus;\n+import org.hamcrest.MatcherAssert;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test case for {@link StatusResponse}.\n+ * @since 0.1\n+ */\n+final class StatusResponseTest {\n+    @Test\n+    void usesStatus() throws Exception {\n+        final int code = 404;\n+        MatcherAssert.assertThat(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c93a22ff3c52c9567ab972e7341a4e0ea16afd1d"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQwMjUwMA==", "bodyText": "@g4s8 IIRC we have very similar implementations on a response object in takes and cactoos-http project. Wouldn't be a good idea to use one of them?", "url": "https://github.com/artipie/http/pull/21#discussion_r376402500", "createdAt": "2020-02-07T13:57:43Z", "author": {"login": "paulodamaso"}, "path": "src/main/java/com/artipie/http/Response.java", "diffHunk": "@@ -23,13 +23,21 @@\n  */\n package com.artipie.http;\n \n+import java.util.Collections;\n+import wtf.g4s8.jflows.PubEmpty;\n+\n /**\n  * HTTP response.\n  * @see <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html\">RFC2616</a>\n  * @since 0.1\n  */\n public interface Response {\n \n+    /**\n+     * Empty response.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c93a22ff3c52c9567ab972e7341a4e0ea16afd1d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQwNTI1Nw==", "bodyText": "@g4s8 This implementation is rather confuse to me: IMHO we the Response object should be created by the connection, and not the other way around. Also, the way it is implemented sends the status to the connection, which looks like strange because we just get the status AFTER we try to send something", "url": "https://github.com/artipie/http/pull/21#discussion_r376405257", "createdAt": "2020-02-07T14:03:33Z", "author": {"login": "paulodamaso"}, "path": "src/main/java/com/artipie/http/rs/StatusResponse.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.rs;\n+\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import java.util.Map.Entry;\n+import java.util.concurrent.Flow.Publisher;\n+\n+/**\n+ * Response with status.\n+ * @since 0.1\n+ */\n+public final class StatusResponse implements Response {\n+\n+    /**\n+     * Origin response.\n+     */\n+    private final Response origin;\n+\n+    /**\n+     * Status code.\n+     */\n+    private final int code;\n+\n+    /**\n+     * New response with status.\n+     * @param code Status code\n+     */\n+    public StatusResponse(final int code) {\n+        this(Response.EMPTY, code);\n+    }\n+\n+    /**\n+     * Override status code for response.\n+     * @param origin Response to override\n+     * @param code Status code\n+     */\n+    public StatusResponse(final Response origin, final int code) {\n+        this.origin = origin;\n+        this.code = code;\n+    }\n+\n+    @Override\n+    public void send(final Connection con) {\n+        this.origin.send(new StatusResponse.ConWithStatus(con, this.code));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c93a22ff3c52c9567ab972e7341a4e0ea16afd1d"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQwNTg2Ng==", "bodyText": "@g4s8 I don't see the point in having this class. Are we supposed to use it outside our tests?", "url": "https://github.com/artipie/http/pull/21#discussion_r376405866", "createdAt": "2020-02-07T14:04:47Z", "author": {"login": "paulodamaso"}, "path": "src/main/java/com/artipie/http/hm/RsHasStatus.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.hm;\n+\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import java.util.Map.Entry;\n+import java.util.concurrent.Flow.Publisher;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.hamcrest.Description;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.TypeSafeMatcher;\n+import org.hamcrest.core.IsEqual;\n+\n+/**\n+ * Matcher to verify response status.\n+ * @since 0.1\n+ */\n+public final class RsHasStatus extends TypeSafeMatcher<Response> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c93a22ff3c52c9567ab972e7341a4e0ea16afd1d"}, "originalPosition": 41}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1MTk1Njc4", "url": "https://github.com/artipie/http/pull/21#pullrequestreview-355195678", "createdAt": "2020-02-07T14:33:29Z", "commit": {"oid": "c93a22ff3c52c9567ab972e7341a4e0ea16afd1d"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDozMzoyOVrOFm-5DA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wN1QxNDozODozMVrOFm_Dsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMDYyMA==", "bodyText": "@g4s8 I think that this class should be named ResponseHasStatus or just HasStatus then", "url": "https://github.com/artipie/http/pull/21#discussion_r376420620", "createdAt": "2020-02-07T14:33:29Z", "author": {"login": "paulodamaso"}, "path": "src/main/java/com/artipie/http/hm/RsHasStatus.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.hm;\n+\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import java.util.Map.Entry;\n+import java.util.concurrent.Flow.Publisher;\n+import java.util.concurrent.atomic.AtomicInteger;\n+import org.hamcrest.Description;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.TypeSafeMatcher;\n+import org.hamcrest.core.IsEqual;\n+\n+/**\n+ * Matcher to verify response status.\n+ * @since 0.1\n+ */\n+public final class RsHasStatus extends TypeSafeMatcher<Response> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQwNTg2Ng=="}, "originalCommit": {"oid": "c93a22ff3c52c9567ab972e7341a4e0ea16afd1d"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMTQ2Nw==", "bodyText": "@g4s8 Wouldn't WithStatus or ResponseWithStatus be better?", "url": "https://github.com/artipie/http/pull/21#discussion_r376421467", "createdAt": "2020-02-07T14:35:05Z", "author": {"login": "paulodamaso"}, "path": "src/main/java/com/artipie/http/rs/StatusResponse.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.rs;\n+\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import java.util.Map.Entry;\n+import java.util.concurrent.Flow.Publisher;\n+\n+/**\n+ * Response with status.\n+ * @since 0.1\n+ */\n+public final class StatusResponse implements Response {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c93a22ff3c52c9567ab972e7341a4e0ea16afd1d"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMjk5OA==", "bodyText": "@g4s8 All right then", "url": "https://github.com/artipie/http/pull/21#discussion_r376422998", "createdAt": "2020-02-07T14:37:53Z", "author": {"login": "paulodamaso"}, "path": "src/test/java/com/artipie/http/rs/StatusResponseTest.java", "diffHunk": "@@ -0,0 +1,44 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.rs;\n+\n+import com.artipie.http.hm.RsHasStatus;\n+import org.hamcrest.MatcherAssert;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test case for {@link StatusResponse}.\n+ * @since 0.1\n+ */\n+final class StatusResponseTest {\n+    @Test\n+    void usesStatus() throws Exception {\n+        final int code = 404;\n+        MatcherAssert.assertThat(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQwMTA1Nw=="}, "originalCommit": {"oid": "c93a22ff3c52c9567ab972e7341a4e0ea16afd1d"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMzE0NQ==", "bodyText": "@g4s8 ok", "url": "https://github.com/artipie/http/pull/21#discussion_r376423145", "createdAt": "2020-02-07T14:38:10Z", "author": {"login": "paulodamaso"}, "path": "src/main/java/com/artipie/http/rs/StatusResponse.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.rs;\n+\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import java.util.Map.Entry;\n+import java.util.concurrent.Flow.Publisher;\n+\n+/**\n+ * Response with status.\n+ * @since 0.1\n+ */\n+public final class StatusResponse implements Response {\n+\n+    /**\n+     * Origin response.\n+     */\n+    private final Response origin;\n+\n+    /**\n+     * Status code.\n+     */\n+    private final int code;\n+\n+    /**\n+     * New response with status.\n+     * @param code Status code\n+     */\n+    public StatusResponse(final int code) {\n+        this(Response.EMPTY, code);\n+    }\n+\n+    /**\n+     * Override status code for response.\n+     * @param origin Response to override\n+     * @param code Status code\n+     */\n+    public StatusResponse(final Response origin, final int code) {\n+        this.origin = origin;\n+        this.code = code;\n+    }\n+\n+    @Override\n+    public void send(final Connection con) {\n+        this.origin.send(new StatusResponse.ConWithStatus(con, this.code));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQwNTI1Nw=="}, "originalCommit": {"oid": "c93a22ff3c52c9567ab972e7341a4e0ea16afd1d"}, "originalPosition": 68}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQyMzM0Ng==", "bodyText": "@g4s8 I understood now", "url": "https://github.com/artipie/http/pull/21#discussion_r376423346", "createdAt": "2020-02-07T14:38:31Z", "author": {"login": "paulodamaso"}, "path": "src/main/java/com/artipie/http/Response.java", "diffHunk": "@@ -23,13 +23,21 @@\n  */\n package com.artipie.http;\n \n+import java.util.Collections;\n+import wtf.g4s8.jflows.PubEmpty;\n+\n /**\n  * HTTP response.\n  * @see <a href=\"https://www.w3.org/Protocols/rfc2616/rfc2616-sec6.html\">RFC2616</a>\n  * @since 0.1\n  */\n public interface Response {\n \n+    /**\n+     * Empty response.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjQwMjUwMA=="}, "originalCommit": {"oid": "c93a22ff3c52c9567ab972e7341a4e0ea16afd1d"}, "originalPosition": 15}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1fba1823e6a8fedac5e56f0dfdd91c0807607e0c", "author": {"user": {"login": "g4s8", "name": "Kirill"}}, "url": "https://github.com/artipie/http/commit/1fba1823e6a8fedac5e56f0dfdd91c0807607e0c", "committedDate": "2020-02-07T14:45:48Z", "message": "#17 - renamed response"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NTI0NjA4", "url": "https://github.com/artipie/http/pull/21#pullrequestreview-355524608", "createdAt": "2020-02-08T02:41:20Z", "commit": {"oid": "1fba1823e6a8fedac5e56f0dfdd91c0807607e0c"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU1NTQ2MTUx", "url": "https://github.com/artipie/http/pull/21#pullrequestreview-355546151", "createdAt": "2020-02-08T12:40:19Z", "commit": {"oid": "1fba1823e6a8fedac5e56f0dfdd91c0807607e0c"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQxMjo0MDoxOVrOFnQbMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wOFQxMjo0MDoxOVrOFnQbMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NjcwNzg4OA==", "bodyText": "Rs is confusing", "url": "https://github.com/artipie/http/pull/21#discussion_r376707888", "createdAt": "2020-02-08T12:40:19Z", "author": {"login": "Sammers21"}, "path": "src/main/java/com/artipie/http/rs/RsWithStatus.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.rs;\n+\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import java.util.Map.Entry;\n+import java.util.concurrent.Flow.Publisher;\n+\n+/**\n+ * Response with status.\n+ * @since 0.1\n+ */\n+public final class RsWithStatus implements Response {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1fba1823e6a8fedac5e56f0dfdd91c0807607e0c"}, "originalPosition": 36}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3286, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}