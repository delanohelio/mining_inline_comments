{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk2ODg4ODAy", "number": 248, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzoyMjo0OVrOEpz-CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwODoyNDozMVrOEqNenA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjc4NTM2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/http/auth/BasicAuthSlice.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzoyMjo0OVrOHbtbAA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzoyMjo0OVrOHbtbAA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgxNzc5Mg==", "bodyText": "@olenagerasimova we have PREFIX constant that is also \"Basic\", but with space. Also Basic auth scheme name is used in Authorization.Basic class. I'd propose to join them all into single constant.", "url": "https://github.com/artipie/http/pull/248#discussion_r498817792", "createdAt": "2020-10-02T13:22:49Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/http/auth/BasicAuthSlice.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.auth;\n+\n+import com.artipie.http.Headers;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.headers.Authorization;\n+import com.artipie.http.headers.WwwAuthenticate;\n+import com.artipie.http.rq.RqHeaders;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithHeaders;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.cactoos.text.Base64Decoded;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice with basic authentication.\n+ * @since 0.17\n+ */\n+public final class BasicAuthSlice implements Slice {\n+\n+    /**\n+     * Basic authentication prefix.\n+     */\n+    private static final String PREFIX = \"Basic \";\n+\n+    /**\n+     * Origin.\n+     */\n+    private final Slice origin;\n+\n+    /**\n+     * Authorization.\n+     */\n+    private final Authentication auth;\n+\n+    /**\n+     * Permissions.\n+     */\n+    private final Permission perm;\n+\n+    /**\n+     * Ctor.\n+     * @param origin Origin slice\n+     * @param auth Authorization\n+     * @param perm Permissions\n+     */\n+    public BasicAuthSlice(final Slice origin, final Authentication auth, final Permission perm) {\n+        this.origin = origin;\n+        this.auth = auth;\n+        this.perm = perm;\n+    }\n+\n+    @Override\n+    public Response response(final String line, final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        return this.user(headers)\n+            .map(this.perm::allowed).map(\n+                allowed -> {\n+                    final Response rsp;\n+                    if (allowed) {\n+                        rsp = this.origin.response(line, headers, body);\n+                    } else {\n+                        rsp = new RsWithStatus(RsStatus.FORBIDDEN);\n+                    }\n+                    return rsp;\n+                }\n+            ).orElseGet(\n+                () -> {\n+                    final Response rsp;\n+                    if (this.perm.allowed(Permissions.ANY_USER)) {\n+                        rsp = this.origin.response(line, headers, body);\n+                    } else {\n+                        rsp = new RsWithHeaders(\n+                            new RsWithStatus(RsStatus.UNAUTHORIZED),\n+                            new Headers.From(new WwwAuthenticate(\"Basic\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c474fb6cce3ecaaa101100ae6b0822af7a5d9fff"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyMjc5NDg4OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/artipie/http/auth/BasicAuthSliceTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzoyNToxOFrOHbtgpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wMlQxMzoyNToxOFrOHbtgpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5ODgxOTIzNg==", "bodyText": "@olenagerasimova I think we can simplify new Permission.ByName(\"read\", (user, action) -> false) to just (user, action) -> false", "url": "https://github.com/artipie/http/pull/248#discussion_r498819236", "createdAt": "2020-10-02T13:25:18Z", "author": {"login": "olegmoz"}, "path": "src/test/java/com/artipie/http/auth/BasicAuthSliceTest.java", "diffHunk": "@@ -0,0 +1,101 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.auth;\n+\n+import com.artipie.asto.Content;\n+import com.artipie.http.Headers;\n+import com.artipie.http.headers.Authorization;\n+import com.artipie.http.headers.Header;\n+import com.artipie.http.hm.RsHasHeaders;\n+import com.artipie.http.hm.RsHasStatus;\n+import com.artipie.http.hm.SliceHasResponse;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithStatus;\n+import com.artipie.http.rs.StandardRs;\n+import com.artipie.http.slice.SliceSimple;\n+import java.util.Optional;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Test for {@link BasicAuthSlice}.\n+ * @since 0.17\n+ * @checkstyle ClassDataAbstractionCouplingCheck (500 lines)\n+ */\n+final class BasicAuthSliceTest {\n+\n+    @Test\n+    void proxyToOriginSliceIfAllowed() {\n+        MatcherAssert.assertThat(\n+            new BasicAuthSlice(\n+                new SliceSimple(StandardRs.OK),\n+                (user, pswd) -> Optional.of(new Authentication.User(\"someone\")),\n+                user -> true\n+            ),\n+            new SliceHasResponse(\n+                new RsHasStatus(RsStatus.OK),\n+                new RequestLine(\"GET\", \"/foo\")\n+            )\n+        );\n+    }\n+\n+    @Test\n+    void returnsUnauthorizedErrorIfUnableToAuthenticate() {\n+        MatcherAssert.assertThat(\n+            new BasicAuthSlice(\n+                new SliceSimple(StandardRs.OK),\n+                (user, pswd) -> Optional.empty(),\n+                user -> false\n+            ),\n+            new SliceHasResponse(\n+                Matchers.allOf(\n+                    new RsHasStatus(RsStatus.UNAUTHORIZED),\n+                    new RsHasHeaders(new Header(\"WWW-Authenticate\", \"Basic\"))\n+                ),\n+                new RequestLine(\"POST\", \"/bar\", \"HTTP/1.2\")\n+            )\n+        );\n+    }\n+\n+    @Test\n+    void returnsForbiddenIfNotAllowed() {\n+        final String name = \"john\";\n+        MatcherAssert.assertThat(\n+            new BasicAuthSlice(\n+                new SliceSimple(new RsWithStatus(RsStatus.OK)),\n+                (user, pswd) -> Optional.of(new Authentication.User(name)),\n+                new Permission.ByName(\"read\", (user, action) -> false)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c474fb6cce3ecaaa101100ae6b0822af7a5d9fff"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEyNjk2NDc2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/http/auth/BasicAuthSlice.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwODoyNDozMVrOHcSacQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNVQwODoyNDozMVrOHcSacQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5OTQyMzg1Nw==", "bodyText": "@olenagerasimova name of this field is not really appropriate especially when exposed outside of class. It is a \"prefix\" when you look at header value as a string, but it's meaning is name authentication scheme which could also be Bearer, Digest etc. I'd suggest to change this field name to SCHEME, that would make more sense to one who reads the code.", "url": "https://github.com/artipie/http/pull/248#discussion_r499423857", "createdAt": "2020-10-05T08:24:31Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/http/auth/BasicAuthSlice.java", "diffHunk": "@@ -0,0 +1,122 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.auth;\n+\n+import com.artipie.http.Headers;\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.headers.Authorization;\n+import com.artipie.http.headers.WwwAuthenticate;\n+import com.artipie.http.rq.RqHeaders;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithHeaders;\n+import com.artipie.http.rs.RsWithStatus;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.Optional;\n+import org.cactoos.text.Base64Decoded;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice with basic authentication.\n+ * @since 0.17\n+ */\n+public final class BasicAuthSlice implements Slice {\n+\n+    /**\n+     * Basic authentication prefix.\n+     */\n+    public static final String PREFIX = \"Basic\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a1cc982b9fc006fe1a49ffbb83c6f7cedc5a3ec8"}, "originalPosition": 50}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1915, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}