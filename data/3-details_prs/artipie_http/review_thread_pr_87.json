{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzkwNDI5Mjkx", "number": 87, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMDo1NFrODpQxqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjo1NlrODpQ0Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTkzMDY0OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/artipie/http/hm/RsHasBodyTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMDo1NFrOF4VIig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMToxNTo0M1rOF4p9UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMDgyNg==", "bodyText": "@olegmoz we can instantiate RsHasBody only once", "url": "https://github.com/artipie/http/pull/87#discussion_r394610826", "createdAt": "2020-03-18T20:10:54Z", "author": {"login": "Vatavuk"}, "path": "src/test/java/com/artipie/http/hm/RsHasBodyTest.java", "diffHunk": "@@ -71,4 +76,23 @@ void shouldNotMatchNotEqualBody() {\n         );\n     }\n \n+    @ParameterizedTest\n+    @ValueSource(strings = {\"data\", \"chunk1,chunk2\"})\n+    void shouldMatchResponseTwice(final String chunks) {\n+        final String[] elements = chunks.split(\",\");\n+        final byte[] data = String.join(\"\", elements).getBytes();\n+        final Response response = new RsWithBody(\n+            Flowable.fromIterable(\n+                Stream.of(elements)\n+                    .map(String::getBytes)\n+                    .map(ByteBuffer::wrap)\n+                    .collect(Collectors.toList())\n+            )\n+        );\n+        new RsHasBody(data).matches(response);\n+        MatcherAssert.assertThat(\n+            new RsHasBody(data).matches(response),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6ca013f6da25bc6c58228e118063180633e5f94"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg0NzgyOA==", "bodyText": "@Vatavuk did this on purpose, to not allow just caching body or match result in matcher instance to be a solution", "url": "https://github.com/artipie/http/pull/87#discussion_r394847828", "createdAt": "2020-03-19T08:04:56Z", "author": {"login": "olegmoz"}, "path": "src/test/java/com/artipie/http/hm/RsHasBodyTest.java", "diffHunk": "@@ -71,4 +76,23 @@ void shouldNotMatchNotEqualBody() {\n         );\n     }\n \n+    @ParameterizedTest\n+    @ValueSource(strings = {\"data\", \"chunk1,chunk2\"})\n+    void shouldMatchResponseTwice(final String chunks) {\n+        final String[] elements = chunks.split(\",\");\n+        final byte[] data = String.join(\"\", elements).getBytes();\n+        final Response response = new RsWithBody(\n+            Flowable.fromIterable(\n+                Stream.of(elements)\n+                    .map(String::getBytes)\n+                    .map(ByteBuffer::wrap)\n+                    .collect(Collectors.toList())\n+            )\n+        );\n+        new RsHasBody(data).matches(response);\n+        MatcherAssert.assertThat(\n+            new RsHasBody(data).matches(response),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMDgyNg=="}, "originalCommit": {"oid": "f6ca013f6da25bc6c58228e118063180633e5f94"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk1MjAxNg==", "bodyText": "@olegmoz ok", "url": "https://github.com/artipie/http/pull/87#discussion_r394952016", "createdAt": "2020-03-19T11:15:43Z", "author": {"login": "Vatavuk"}, "path": "src/test/java/com/artipie/http/hm/RsHasBodyTest.java", "diffHunk": "@@ -71,4 +76,23 @@ void shouldNotMatchNotEqualBody() {\n         );\n     }\n \n+    @ParameterizedTest\n+    @ValueSource(strings = {\"data\", \"chunk1,chunk2\"})\n+    void shouldMatchResponseTwice(final String chunks) {\n+        final String[] elements = chunks.split(\",\");\n+        final byte[] data = String.join(\"\", elements).getBytes();\n+        final Response response = new RsWithBody(\n+            Flowable.fromIterable(\n+                Stream.of(elements)\n+                    .map(String::getBytes)\n+                    .map(ByteBuffer::wrap)\n+                    .collect(Collectors.toList())\n+            )\n+        );\n+        new RsHasBody(data).matches(response);\n+        MatcherAssert.assertThat(\n+            new RsHasBody(data).matches(response),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMDgyNg=="}, "originalCommit": {"oid": "f6ca013f6da25bc6c58228e118063180633e5f94"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ0NTkzNzU0OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/artipie/http/hm/RsHasBodyTest.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOFQyMDoxMjo1NlrOF4VMrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xOVQxMToxNTo1OFrOF4p92Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMTg4Ng==", "bodyText": "@olegmoz why do we need this magic? Can we instantiate elements variable in the test method without annotations?", "url": "https://github.com/artipie/http/pull/87#discussion_r394611886", "createdAt": "2020-03-18T20:12:56Z", "author": {"login": "Vatavuk"}, "path": "src/test/java/com/artipie/http/hm/RsHasBodyTest.java", "diffHunk": "@@ -71,4 +76,23 @@ void shouldNotMatchNotEqualBody() {\n         );\n     }\n \n+    @ParameterizedTest\n+    @ValueSource(strings = {\"data\", \"chunk1,chunk2\"})", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6ca013f6da25bc6c58228e118063180633e5f94"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDg0NzM5Ng==", "bodyText": "@Vatavuk we need to test same think with 2 inputs: single buffer in stream, multiple buffers in stream. I think that parameterized test is good solution for that. I'm not fan of annotations at all, but this the way JUnit framework works.", "url": "https://github.com/artipie/http/pull/87#discussion_r394847396", "createdAt": "2020-03-19T08:03:48Z", "author": {"login": "olegmoz"}, "path": "src/test/java/com/artipie/http/hm/RsHasBodyTest.java", "diffHunk": "@@ -71,4 +76,23 @@ void shouldNotMatchNotEqualBody() {\n         );\n     }\n \n+    @ParameterizedTest\n+    @ValueSource(strings = {\"data\", \"chunk1,chunk2\"})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMTg4Ng=="}, "originalCommit": {"oid": "f6ca013f6da25bc6c58228e118063180633e5f94"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDk1MjE1Mw==", "bodyText": "@olegmoz ok", "url": "https://github.com/artipie/http/pull/87#discussion_r394952153", "createdAt": "2020-03-19T11:15:58Z", "author": {"login": "Vatavuk"}, "path": "src/test/java/com/artipie/http/hm/RsHasBodyTest.java", "diffHunk": "@@ -71,4 +76,23 @@ void shouldNotMatchNotEqualBody() {\n         );\n     }\n \n+    @ParameterizedTest\n+    @ValueSource(strings = {\"data\", \"chunk1,chunk2\"})", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5NDYxMTg4Ng=="}, "originalCommit": {"oid": "f6ca013f6da25bc6c58228e118063180633e5f94"}, "originalPosition": 23}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1804, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}