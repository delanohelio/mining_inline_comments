{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwMzcxODYx", "number": 108, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOTozMDoxN1rODvtawg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzozNDoxMFrODv3liQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzUzNzk0OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/http/rs/RsFull.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOTozMDoxN1rOGCS4XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDoxNTo0NVrOGCUZ-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1OTY3Nw==", "bodyText": "@Guseyn expand the description", "url": "https://github.com/artipie/http/pull/108#discussion_r405059677", "createdAt": "2020-04-07T19:30:17Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/http/rs/RsFull.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.rs;\n+\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.CompletionStage;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * RsFull.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf7329174be5eb2224fa3910e53365b5a4439be6"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4NDY2NA==", "bodyText": "@victornoel done", "url": "https://github.com/artipie/http/pull/108#discussion_r405084664", "createdAt": "2020-04-07T20:15:45Z", "author": {"login": "Guseyn"}, "path": "src/main/java/com/artipie/http/rs/RsFull.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.rs;\n+\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.CompletionStage;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * RsFull.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA1OTY3Nw=="}, "originalCommit": {"oid": "cf7329174be5eb2224fa3910e53365b5a4439be6"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzU2OTQ2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/http/rs/RsFull.java", "isResolved": false, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOTozOTo0OVrOGCTMUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDoxNjoyNFrOGCUbUw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2NDc4Ng==", "bodyText": "@Guseyn this object composition is unnecessary. We already have origin which will do all this wrapping in its RsWith classes. It should be just this.origin.send(connection)", "url": "https://github.com/artipie/http/pull/108#discussion_r405064786", "createdAt": "2020-04-07T19:39:49Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/http/rs/RsFull.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.rs;\n+\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.CompletionStage;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * RsFull.\n+ *\n+ * @since 0.8\n+ * @checkstyle ParameterNumberCheck (500 lines)\n+ */\n+public final class RsFull implements Response {\n+\n+    /**\n+     * Origin response.\n+     */\n+    private final Response origin;\n+\n+    /**\n+     * Status code.\n+     */\n+    private final RsStatus status;\n+\n+    /**\n+     * Headers.\n+     */\n+    private final Iterable<Map.Entry<String, String>> headers;\n+\n+    /**\n+     * Body publisher.\n+     */\n+    private final Publisher<ByteBuffer> body;\n+\n+    /**\n+     * Ctor.\n+     * @param origin Origin response\n+     * @param status Status code\n+     * @param headers Headers\n+     * @param body Response body\n+     */\n+    public RsFull(\n+        final Response origin,\n+        final RsStatus status,\n+        final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        this.origin = new RsWithStatus(\n+            new RsWithHeaders(\n+                new RsWithBody(\n+                    origin, body\n+                ), headers\n+            ), status\n+        );\n+        this.status = status;\n+        this.headers = headers;\n+        this.body = body;\n+    }\n+\n+    @Override\n+    public CompletionStage<Void> send(final Connection connection) {\n+        return this.origin.send(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf7329174be5eb2224fa3910e53365b5a4439be6"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4MTY2Mw==", "bodyText": "@victornoel thanks, fixed.", "url": "https://github.com/artipie/http/pull/108#discussion_r405081663", "createdAt": "2020-04-07T20:10:17Z", "author": {"login": "Guseyn"}, "path": "src/main/java/com/artipie/http/rs/RsFull.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.rs;\n+\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.CompletionStage;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * RsFull.\n+ *\n+ * @since 0.8\n+ * @checkstyle ParameterNumberCheck (500 lines)\n+ */\n+public final class RsFull implements Response {\n+\n+    /**\n+     * Origin response.\n+     */\n+    private final Response origin;\n+\n+    /**\n+     * Status code.\n+     */\n+    private final RsStatus status;\n+\n+    /**\n+     * Headers.\n+     */\n+    private final Iterable<Map.Entry<String, String>> headers;\n+\n+    /**\n+     * Body publisher.\n+     */\n+    private final Publisher<ByteBuffer> body;\n+\n+    /**\n+     * Ctor.\n+     * @param origin Origin response\n+     * @param status Status code\n+     * @param headers Headers\n+     * @param body Response body\n+     */\n+    public RsFull(\n+        final Response origin,\n+        final RsStatus status,\n+        final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        this.origin = new RsWithStatus(\n+            new RsWithHeaders(\n+                new RsWithBody(\n+                    origin, body\n+                ), headers\n+            ), status\n+        );\n+        this.status = status;\n+        this.headers = headers;\n+        this.body = body;\n+    }\n+\n+    @Override\n+    public CompletionStage<Void> send(final Connection connection) {\n+        return this.origin.send(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2NDc4Ng=="}, "originalCommit": {"oid": "cf7329174be5eb2224fa3910e53365b5a4439be6"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4Mzc1NQ==", "bodyText": "@Guseyn I suppose you meant @Vatavuk ;)", "url": "https://github.com/artipie/http/pull/108#discussion_r405083755", "createdAt": "2020-04-07T20:14:03Z", "author": {"login": "victornoel"}, "path": "src/main/java/com/artipie/http/rs/RsFull.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.rs;\n+\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.CompletionStage;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * RsFull.\n+ *\n+ * @since 0.8\n+ * @checkstyle ParameterNumberCheck (500 lines)\n+ */\n+public final class RsFull implements Response {\n+\n+    /**\n+     * Origin response.\n+     */\n+    private final Response origin;\n+\n+    /**\n+     * Status code.\n+     */\n+    private final RsStatus status;\n+\n+    /**\n+     * Headers.\n+     */\n+    private final Iterable<Map.Entry<String, String>> headers;\n+\n+    /**\n+     * Body publisher.\n+     */\n+    private final Publisher<ByteBuffer> body;\n+\n+    /**\n+     * Ctor.\n+     * @param origin Origin response\n+     * @param status Status code\n+     * @param headers Headers\n+     * @param body Response body\n+     */\n+    public RsFull(\n+        final Response origin,\n+        final RsStatus status,\n+        final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        this.origin = new RsWithStatus(\n+            new RsWithHeaders(\n+                new RsWithBody(\n+                    origin, body\n+                ), headers\n+            ), status\n+        );\n+        this.status = status;\n+        this.headers = headers;\n+        this.body = body;\n+    }\n+\n+    @Override\n+    public CompletionStage<Void> send(final Connection connection) {\n+        return this.origin.send(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2NDc4Ng=="}, "originalCommit": {"oid": "cf7329174be5eb2224fa3910e53365b5a4439be6"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4NDg5NA==", "bodyText": "@Vatavuk fixed, thanks.", "url": "https://github.com/artipie/http/pull/108#discussion_r405084894", "createdAt": "2020-04-07T20:16:12Z", "author": {"login": "Guseyn"}, "path": "src/main/java/com/artipie/http/rs/RsFull.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.rs;\n+\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.CompletionStage;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * RsFull.\n+ *\n+ * @since 0.8\n+ * @checkstyle ParameterNumberCheck (500 lines)\n+ */\n+public final class RsFull implements Response {\n+\n+    /**\n+     * Origin response.\n+     */\n+    private final Response origin;\n+\n+    /**\n+     * Status code.\n+     */\n+    private final RsStatus status;\n+\n+    /**\n+     * Headers.\n+     */\n+    private final Iterable<Map.Entry<String, String>> headers;\n+\n+    /**\n+     * Body publisher.\n+     */\n+    private final Publisher<ByteBuffer> body;\n+\n+    /**\n+     * Ctor.\n+     * @param origin Origin response\n+     * @param status Status code\n+     * @param headers Headers\n+     * @param body Response body\n+     */\n+    public RsFull(\n+        final Response origin,\n+        final RsStatus status,\n+        final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        this.origin = new RsWithStatus(\n+            new RsWithHeaders(\n+                new RsWithBody(\n+                    origin, body\n+                ), headers\n+            ), status\n+        );\n+        this.status = status;\n+        this.headers = headers;\n+        this.body = body;\n+    }\n+\n+    @Override\n+    public CompletionStage<Void> send(final Connection connection) {\n+        return this.origin.send(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2NDc4Ng=="}, "originalCommit": {"oid": "cf7329174be5eb2224fa3910e53365b5a4439be6"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4NTAxMQ==", "bodyText": "@Guseyn I suppose you meant @Vatavuk ;)\n\nYeah, sorry:)", "url": "https://github.com/artipie/http/pull/108#discussion_r405085011", "createdAt": "2020-04-07T20:16:24Z", "author": {"login": "Guseyn"}, "path": "src/main/java/com/artipie/http/rs/RsFull.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.rs;\n+\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.CompletionStage;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * RsFull.\n+ *\n+ * @since 0.8\n+ * @checkstyle ParameterNumberCheck (500 lines)\n+ */\n+public final class RsFull implements Response {\n+\n+    /**\n+     * Origin response.\n+     */\n+    private final Response origin;\n+\n+    /**\n+     * Status code.\n+     */\n+    private final RsStatus status;\n+\n+    /**\n+     * Headers.\n+     */\n+    private final Iterable<Map.Entry<String, String>> headers;\n+\n+    /**\n+     * Body publisher.\n+     */\n+    private final Publisher<ByteBuffer> body;\n+\n+    /**\n+     * Ctor.\n+     * @param origin Origin response\n+     * @param status Status code\n+     * @param headers Headers\n+     * @param body Response body\n+     */\n+    public RsFull(\n+        final Response origin,\n+        final RsStatus status,\n+        final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body) {\n+        this.origin = new RsWithStatus(\n+            new RsWithHeaders(\n+                new RsWithBody(\n+                    origin, body\n+                ), headers\n+            ), status\n+        );\n+        this.status = status;\n+        this.headers = headers;\n+        this.body = body;\n+    }\n+\n+    @Override\n+    public CompletionStage<Void> send(final Connection connection) {\n+        return this.origin.send(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2NDc4Ng=="}, "originalCommit": {"oid": "cf7329174be5eb2224fa3910e53365b5a4439be6"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzU3MDMwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/http/rs/RsWithHeaders.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOTo0MDowOFrOGCTM6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzozNToyNFrOGCilFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2NDkzOQ==", "bodyText": "@Guseyn leave this private", "url": "https://github.com/artipie/http/pull/108#discussion_r405064939", "createdAt": "2020-04-07T19:40:08Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/http/rs/RsWithHeaders.java", "diffHunk": "@@ -87,7 +87,7 @@ public RsWithHeaders(\n      * Connection with additional headers.\n      * @since 0.3\n      */\n-    private static final class ConWithHeaders implements Connection {\n+    public static final class ConWithHeaders implements Connection {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf7329174be5eb2224fa3910e53365b5a4439be6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4NTM5OQ==", "bodyText": "@Vatavuk fixed", "url": "https://github.com/artipie/http/pull/108#discussion_r405085399", "createdAt": "2020-04-07T20:17:08Z", "author": {"login": "Guseyn"}, "path": "src/main/java/com/artipie/http/rs/RsWithHeaders.java", "diffHunk": "@@ -87,7 +87,7 @@ public RsWithHeaders(\n      * Connection with additional headers.\n      * @since 0.3\n      */\n-    private static final class ConWithHeaders implements Connection {\n+    public static final class ConWithHeaders implements Connection {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2NDkzOQ=="}, "originalCommit": {"oid": "cf7329174be5eb2224fa3910e53365b5a4439be6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMxNjg4NQ==", "bodyText": "@Guseyn it seems to be not fixed - I can see it in PR diff", "url": "https://github.com/artipie/http/pull/108#discussion_r405316885", "createdAt": "2020-04-08T07:35:24Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/http/rs/RsWithHeaders.java", "diffHunk": "@@ -87,7 +87,7 @@ public RsWithHeaders(\n      * Connection with additional headers.\n      * @since 0.3\n      */\n-    private static final class ConWithHeaders implements Connection {\n+    public static final class ConWithHeaders implements Connection {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2NDkzOQ=="}, "originalCommit": {"oid": "cf7329174be5eb2224fa3910e53365b5a4439be6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzU3MDQ5OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/http/rs/RsWithBody.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOTo0MDoxMVrOGCTNBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDoxNzoxN1rOGCUdJA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2NDk2NA==", "bodyText": "@Guseyn leave this private", "url": "https://github.com/artipie/http/pull/108#discussion_r405064964", "createdAt": "2020-04-07T19:40:11Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/http/rs/RsWithBody.java", "diffHunk": "@@ -116,7 +116,7 @@ public RsWithBody(final Response origin, final Publisher<ByteBuffer> body) {\n      * Connection with body publisher.\n      * @since 0.3\n      */\n-    private static final class ConWithBody implements Connection {\n+    public static final class ConWithBody implements Connection {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf7329174be5eb2224fa3910e53365b5a4439be6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4NTQ3Ng==", "bodyText": "@Vatavuk fixed.", "url": "https://github.com/artipie/http/pull/108#discussion_r405085476", "createdAt": "2020-04-07T20:17:17Z", "author": {"login": "Guseyn"}, "path": "src/main/java/com/artipie/http/rs/RsWithBody.java", "diffHunk": "@@ -116,7 +116,7 @@ public RsWithBody(final Response origin, final Publisher<ByteBuffer> body) {\n      * Connection with body publisher.\n      * @since 0.3\n      */\n-    private static final class ConWithBody implements Connection {\n+    public static final class ConWithBody implements Connection {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2NDk2NA=="}, "originalCommit": {"oid": "cf7329174be5eb2224fa3910e53365b5a4439be6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzU3MTYwOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/http/rs/RsWithHeaders.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOTo0MDozMVrOGCTNwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDoxNzozMFrOGCUdnQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2NTE1Mg==", "bodyText": "@Guseyn leave this private", "url": "https://github.com/artipie/http/pull/108#discussion_r405065152", "createdAt": "2020-04-07T19:40:31Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/http/rs/RsWithHeaders.java", "diffHunk": "@@ -105,7 +105,7 @@ public RsWithHeaders(\n          * @param origin Connection\n          * @param headers Headers\n          */\n-        private ConWithHeaders(\n+        public ConWithHeaders(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf7329174be5eb2224fa3910e53365b5a4439be6"}, "originalPosition": 14}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4NTU5Nw==", "bodyText": "@Vatavuk fixed.", "url": "https://github.com/artipie/http/pull/108#discussion_r405085597", "createdAt": "2020-04-07T20:17:30Z", "author": {"login": "Guseyn"}, "path": "src/main/java/com/artipie/http/rs/RsWithHeaders.java", "diffHunk": "@@ -105,7 +105,7 @@ public RsWithHeaders(\n          * @param origin Connection\n          * @param headers Headers\n          */\n-        private ConWithHeaders(\n+        public ConWithHeaders(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2NTE1Mg=="}, "originalCommit": {"oid": "cf7329174be5eb2224fa3910e53365b5a4439be6"}, "originalPosition": 14}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMzU3MTc1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/http/rs/RsWithStatus.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxOTo0MDozNFrOGCTN3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QyMDoxNzozOVrOGCUeBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2NTE4Mg==", "bodyText": "@Guseyn leave this private", "url": "https://github.com/artipie/http/pull/108#discussion_r405065182", "createdAt": "2020-04-07T19:40:34Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/http/rs/RsWithStatus.java", "diffHunk": "@@ -79,7 +79,7 @@ public String toString() {\n      * Connection with overridden status code.\n      * @since 0.1\n      */\n-    private static final class ConWithStatus implements Connection {\n+    public static final class ConWithStatus implements Connection {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cf7329174be5eb2224fa3910e53365b5a4439be6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA4NTcwMw==", "bodyText": "@Vatavuk fixed", "url": "https://github.com/artipie/http/pull/108#discussion_r405085703", "createdAt": "2020-04-07T20:17:39Z", "author": {"login": "Guseyn"}, "path": "src/main/java/com/artipie/http/rs/RsWithStatus.java", "diffHunk": "@@ -79,7 +79,7 @@ public String toString() {\n      * Connection with overridden status code.\n      * @since 0.1\n      */\n-    private static final class ConWithStatus implements Connection {\n+    public static final class ConWithStatus implements Connection {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTA2NTE4Mg=="}, "originalCommit": {"oid": "cf7329174be5eb2224fa3910e53365b5a4439be6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTE5OTkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/http/rs/RsFull.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzozMzowMFrOGCigSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzozMzowMFrOGCigSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMxNTY1Ng==", "bodyText": "@Guseyn we don't need this parameter, since this constructor is complete: it includes status, headers and body - so nothing to override for origin", "url": "https://github.com/artipie/http/pull/108#discussion_r405315656", "createdAt": "2020-04-08T07:33:00Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/http/rs/RsFull.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.rs;\n+\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.CompletionStage;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * RsFull, response with status code, headers and body.\n+ *\n+ * @since 0.8\n+ * @checkstyle ParameterNumberCheck (500 lines)\n+ */\n+public final class RsFull implements Response {\n+\n+    /**\n+     * Origin response.\n+     */\n+    private final Response origin;\n+\n+    /**\n+     * Ctor.\n+     * @param origin Origin response\n+     * @param status Status code\n+     * @param headers Headers\n+     * @param body Response body\n+     */\n+    public RsFull(\n+        final Response origin,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d31a518e4dacf49df4af28a1b300fe082a8ac66"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTIwMzkzOnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/http/rs/RsFull.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzozNDoxMFrOGCiiyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwNzozNDoxMFrOGCiiyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMxNjI5OA==", "bodyText": "@Guseyn this suppression is not needed, if you remove origin constructor param", "url": "https://github.com/artipie/http/pull/108#discussion_r405316298", "createdAt": "2020-04-08T07:34:10Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/http/rs/RsFull.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.rs;\n+\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import java.util.concurrent.CompletionStage;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * RsFull, response with status code, headers and body.\n+ *\n+ * @since 0.8\n+ * @checkstyle ParameterNumberCheck (500 lines)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3d31a518e4dacf49df4af28a1b300fe082a8ac66"}, "originalPosition": 38}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1821, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}