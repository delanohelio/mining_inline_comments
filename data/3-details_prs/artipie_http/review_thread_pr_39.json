{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2NTc3MjYz", "number": 39, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzoxOToxMVrODgyH2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzoyMjo1OFrODgyNLg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzAyMjM1OnYy", "diffSide": "RIGHT", "path": "src/test/java/com/artipie/http/hm/RsHasBodyTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzoxOToxMVrOFrLSwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNjo1Nzo0OVrOFrc4vQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgxODExNA==", "bodyText": "@olegmoz Please add a failure message and avoid using static matchers", "url": "https://github.com/artipie/http/pull/39#discussion_r380818114", "createdAt": "2020-02-18T17:19:11Z", "author": {"login": "paulodamaso"}, "path": "src/test/java/com/artipie/http/hm/RsHasBodyTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.hm;\n+\n+import com.artipie.http.Response;\n+import io.reactivex.Flowable;\n+import java.nio.ByteBuffer;\n+import java.util.Collections;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Test;\n+import org.reactivestreams.FlowAdapters;\n+\n+/**\n+ * Tests for {@link RsHasBody}.\n+ *\n+ * @since 0.4\n+ */\n+class RsHasBodyTest {\n+\n+    @Test\n+    void shouldMatchEqualBody() {\n+        final int code = 200;\n+        final Response response = connection -> {\n+            connection.accept(\n+                code,\n+                Collections.emptyList(),\n+                FlowAdapters.toFlowPublisher(\n+                    Flowable.fromArray(\n+                        ByteBuffer.wrap(\"he\".getBytes()),\n+                        ByteBuffer.wrap(\"ll\".getBytes()),\n+                        ByteBuffer.wrap(\"o\".getBytes())\n+                    )\n+                )\n+            );\n+        };\n+        MatcherAssert.assertThat(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c929a02e34bf4efaed927dabf92511b3ba2891d6"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEwNjM2NQ==", "bodyText": "@carlosmiranda fixed", "url": "https://github.com/artipie/http/pull/39#discussion_r381106365", "createdAt": "2020-02-19T06:57:49Z", "author": {"login": "olegmoz"}, "path": "src/test/java/com/artipie/http/hm/RsHasBodyTest.java", "diffHunk": "@@ -0,0 +1,80 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.hm;\n+\n+import com.artipie.http.Response;\n+import io.reactivex.Flowable;\n+import java.nio.ByteBuffer;\n+import java.util.Collections;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.Matchers;\n+import org.junit.jupiter.api.Test;\n+import org.reactivestreams.FlowAdapters;\n+\n+/**\n+ * Tests for {@link RsHasBody}.\n+ *\n+ * @since 0.4\n+ */\n+class RsHasBodyTest {\n+\n+    @Test\n+    void shouldMatchEqualBody() {\n+        final int code = 200;\n+        final Response response = connection -> {\n+            connection.accept(\n+                code,\n+                Collections.emptyList(),\n+                FlowAdapters.toFlowPublisher(\n+                    Flowable.fromArray(\n+                        ByteBuffer.wrap(\"he\".getBytes()),\n+                        ByteBuffer.wrap(\"ll\".getBytes()),\n+                        ByteBuffer.wrap(\"o\".getBytes())\n+                    )\n+                )\n+            );\n+        };\n+        MatcherAssert.assertThat(", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgxODExNA=="}, "originalCommit": {"oid": "c929a02e34bf4efaed927dabf92511b3ba2891d6"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzAzNTk4OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/http/hm/RsHasBody.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzoyMjo1OFrOFrLbUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQwNjo1NTowNVrOFrc1kA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgyMDMwNg==", "bodyText": "@olegmoz Couldn't you just create a fake Response object with the desired body, instead making a connection to create it?", "url": "https://github.com/artipie/http/pull/39#discussion_r380820306", "createdAt": "2020-02-18T17:22:58Z", "author": {"login": "paulodamaso"}, "path": "src/main/java/com/artipie/http/hm/RsHasBody.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.hm;\n+\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import io.reactivex.Flowable;\n+import java.nio.ByteBuffer;\n+import java.util.Map.Entry;\n+import java.util.concurrent.Flow;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.hamcrest.Description;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.TypeSafeMatcher;\n+import org.hamcrest.core.IsEqual;\n+import org.reactivestreams.FlowAdapters;\n+\n+/**\n+ * Matcher to verify response body.\n+ *\n+ * @since 0.1\n+ */\n+public final class RsHasBody extends TypeSafeMatcher<Response> {\n+\n+    /**\n+     * Body matcher.\n+     */\n+    private final Matcher<byte[]> body;\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param body Body to match\n+     */\n+    public RsHasBody(final byte[] body) {\n+        this(new IsEqual<>(body));\n+    }\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param body Body matcher\n+     */\n+    public RsHasBody(final Matcher<byte[]> body) {\n+        this.body = body;\n+    }\n+\n+    @Override\n+    public void describeTo(final Description description) {\n+        description.appendDescriptionOf(this.body);\n+    }\n+\n+    @Override\n+    public boolean matchesSafely(final Response item) {\n+        final AtomicReference<byte[]> out = new AtomicReference<>();\n+        item.send(new RsHasBody.FakeConnection(out));\n+        return this.body.matches(out.get());\n+    }\n+\n+    /**\n+     * Fake connection.\n+     *\n+     * @since 0.1\n+     */\n+    private static final class FakeConnection implements Connection {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c929a02e34bf4efaed927dabf92511b3ba2891d6"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTEwNTU1Mg==", "bodyText": "@carlosmiranda I am afraid I have to create a connection, because I am making a matcher of Response and I need to collect the data Response is feeding to a connection.", "url": "https://github.com/artipie/http/pull/39#discussion_r381105552", "createdAt": "2020-02-19T06:55:05Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/http/hm/RsHasBody.java", "diffHunk": "@@ -0,0 +1,128 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+\n+package com.artipie.http.hm;\n+\n+import com.artipie.http.Connection;\n+import com.artipie.http.Response;\n+import io.reactivex.Flowable;\n+import java.nio.ByteBuffer;\n+import java.util.Map.Entry;\n+import java.util.concurrent.Flow;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.hamcrest.Description;\n+import org.hamcrest.Matcher;\n+import org.hamcrest.TypeSafeMatcher;\n+import org.hamcrest.core.IsEqual;\n+import org.reactivestreams.FlowAdapters;\n+\n+/**\n+ * Matcher to verify response body.\n+ *\n+ * @since 0.1\n+ */\n+public final class RsHasBody extends TypeSafeMatcher<Response> {\n+\n+    /**\n+     * Body matcher.\n+     */\n+    private final Matcher<byte[]> body;\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param body Body to match\n+     */\n+    public RsHasBody(final byte[] body) {\n+        this(new IsEqual<>(body));\n+    }\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param body Body matcher\n+     */\n+    public RsHasBody(final Matcher<byte[]> body) {\n+        this.body = body;\n+    }\n+\n+    @Override\n+    public void describeTo(final Description description) {\n+        description.appendDescriptionOf(this.body);\n+    }\n+\n+    @Override\n+    public boolean matchesSafely(final Response item) {\n+        final AtomicReference<byte[]> out = new AtomicReference<>();\n+        item.send(new RsHasBody.FakeConnection(out));\n+        return this.body.matches(out.get());\n+    }\n+\n+    /**\n+     * Fake connection.\n+     *\n+     * @since 0.1\n+     */\n+    private static final class FakeConnection implements Connection {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgyMDMwNg=="}, "originalCommit": {"oid": "c929a02e34bf4efaed927dabf92511b3ba2891d6"}, "originalPosition": 87}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1946, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}