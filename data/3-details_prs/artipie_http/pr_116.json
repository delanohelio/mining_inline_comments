{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAyMTI0Mzgw", "number": 116, "title": "#115 added removefirstpart with a test", "bodyText": "PR for #115: added removefirstpart with a test", "createdAt": "2020-04-11T02:04:58Z", "url": "https://github.com/artipie/http/pull/116", "merged": true, "mergeCommit": {"oid": "085c65c59ff10a2061a9236eead79ef9eaacb779"}, "closed": true, "closedAt": "2020-04-20T15:46:48Z", "author": {"login": "ammaratef45"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcWb60fAH2gAyNDAyMTI0MzgwOjk2YmRmYWU3MDE5NjdkZWQ0ZTY0YWU4YTdhOGZmZmE0NWVjN2Q2ZDI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcZhFF0gFqTM5NjU4MDQyOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "96bdfae701967ded4e64ae8a7a8fffa45ec7d6d2", "author": {"user": {"login": "ammaratef45", "name": "Ammar Hussein"}}, "url": "https://github.com/artipie/http/commit/96bdfae701967ded4e64ae8a7a8fffa45ec7d6d2", "committedDate": "2020-04-11T02:04:06Z", "message": "#115 added removefirstpart with a test"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxODcyMDY1", "url": "https://github.com/artipie/http/pull/116#pullrequestreview-391872065", "createdAt": "2020-04-12T16:08:17Z", "commit": {"oid": "96bdfae701967ded4e64ae8a7a8fffa45ec7d6d2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNjowODoxOFrOGEWp0w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNjoyMTo0NFrOGEWwpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxODY0Mw==", "bodyText": "@ammaratef45 expand the description. We are removing initial part of the URI, not just some artificial first part. Add an example too.", "url": "https://github.com/artipie/http/pull/116#discussion_r407218643", "createdAt": "2020-04-12T16:08:18Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/http/slice/RemoveFirstPart.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.slice;\n+\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice that removes the first part from the request.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96bdfae701967ded4e64ae8a7a8fffa45ec7d6d2"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxODg2OA==", "bodyText": "@ammaratef45 expand the test name. What is the test scenario?", "url": "https://github.com/artipie/http/pull/116#discussion_r407218868", "createdAt": "2020-04-12T16:09:54Z", "author": {"login": "Vatavuk"}, "path": "src/test/java/com/artipie/http/slice/RemoveFirstPartTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.slice;\n+\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithHeaders;\n+import com.artipie.http.rs.RsWithStatus;\n+import io.reactivex.Flowable;\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import org.cactoos.map.MapEntry;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Test;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Test case for {@link RemoveFirstPart}.\n+ * @since 0.8\n+ */\n+class RemoveFirstPartTest {\n+\n+    @Test\n+    void response() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96bdfae701967ded4e64ae8a7a8fffa45ec7d6d2"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxOTA1MA==", "bodyText": "@ammaratef45 let's rename it to just url to make it more readable.", "url": "https://github.com/artipie/http/pull/116#discussion_r407219050", "createdAt": "2020-04-12T16:11:03Z", "author": {"login": "Vatavuk"}, "path": "src/test/java/com/artipie/http/slice/RemoveFirstPartTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.slice;\n+\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithHeaders;\n+import com.artipie.http.rs.RsWithStatus;\n+import io.reactivex.Flowable;\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import org.cactoos.map.MapEntry;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Test;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Test case for {@link RemoveFirstPart}.\n+ * @since 0.8\n+ */\n+class RemoveFirstPartTest {\n+\n+    @Test\n+    void response() {\n+        final String allurl = get(\"http://www.w3.org/pub/WWW/TheProject.html\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96bdfae701967ded4e64ae8a7a8fffa45ec7d6d2"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxOTIzNQ==", "bodyText": "@ammaratef45 this method sounds like we are retrieving something from the server. Maybe we can rename it to something like requestLine. That would be much easier to understand.", "url": "https://github.com/artipie/http/pull/116#discussion_r407219235", "createdAt": "2020-04-12T16:12:44Z", "author": {"login": "Vatavuk"}, "path": "src/test/java/com/artipie/http/slice/RemoveFirstPartTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.slice;\n+\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithHeaders;\n+import com.artipie.http.rs.RsWithStatus;\n+import io.reactivex.Flowable;\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import org.cactoos.map.MapEntry;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Test;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Test case for {@link RemoveFirstPart}.\n+ * @since 0.8\n+ */\n+class RemoveFirstPartTest {\n+\n+    @Test\n+    void response() {\n+        final String allurl = get(\"http://www.w3.org/pub/WWW/TheProject.html\");\n+        final String partedurl = get(\"http://www.w3.org/WWW/TheProject.html\");\n+        new RemoveFirstPart(new LineSlice()).response(\n+            allurl,\n+            Arrays.asList(\n+                new MapEntry<>(\"Content-Length\", \"0\"),\n+                new MapEntry<>(\"Content-Type\", \"whatever\")\n+            ),\n+            Flowable.empty()\n+        ).send(\n+            (status, headers, body) -> {\n+                final String line = headers.iterator().next().getValue();\n+                MatcherAssert.assertThat(\n+                    \"url retrieved\",\n+                    line,\n+                    IsEqual.equalTo(partedurl)\n+                );\n+                return CompletableFuture.allOf();\n+            }\n+        );\n+    }\n+\n+    private static String get(final String path) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96bdfae701967ded4e64ae8a7a8fffa45ec7d6d2"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIxOTMwMw==", "bodyText": "@ammaratef45 you can inline this variable.", "url": "https://github.com/artipie/http/pull/116#discussion_r407219303", "createdAt": "2020-04-12T16:13:11Z", "author": {"login": "Vatavuk"}, "path": "src/test/java/com/artipie/http/slice/RemoveFirstPartTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.slice;\n+\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithHeaders;\n+import com.artipie.http.rs.RsWithStatus;\n+import io.reactivex.Flowable;\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import org.cactoos.map.MapEntry;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Test;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Test case for {@link RemoveFirstPart}.\n+ * @since 0.8\n+ */\n+class RemoveFirstPartTest {\n+\n+    @Test\n+    void response() {\n+        final String allurl = get(\"http://www.w3.org/pub/WWW/TheProject.html\");\n+        final String partedurl = get(\"http://www.w3.org/WWW/TheProject.html\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96bdfae701967ded4e64ae8a7a8fffa45ec7d6d2"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIyMDM4OQ==", "bodyText": "@ammaratef45 the class name sound very strange and will not be obvious to other developers what to expect from such a class name. How about renaming it to HiddenRoutingSlice or NormalizedUriSlice or something like that. The intention of this class is to hide repository routing from repository implementations.  Its not easy to find appropriate naming here but let's try something different if you agree.", "url": "https://github.com/artipie/http/pull/116#discussion_r407220389", "createdAt": "2020-04-12T16:21:44Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/http/slice/RemoveFirstPart.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.slice;\n+\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice that removes the first part from the request.\n+ * @since 0.8\n+ */\n+public class RemoveFirstPart implements Slice {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96bdfae701967ded4e64ae8a7a8fffa45ec7d6d2"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkxODczNTYw", "url": "https://github.com/artipie/http/pull/116#pullrequestreview-391873560", "createdAt": "2020-04-12T16:24:45Z", "commit": {"oid": "96bdfae701967ded4e64ae8a7a8fffa45ec7d6d2"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNjoyNDo0NVrOGEWyMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xMlQxNjoyNDo0NVrOGEWyMw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzIyMDc4Nw==", "bodyText": "@ammaratef45 I believe we can get IndexOutOfBoundsException here, we should add additional check.", "url": "https://github.com/artipie/http/pull/116#discussion_r407220787", "createdAt": "2020-04-12T16:24:45Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/http/slice/RemoveFirstPart.java", "diffHunk": "@@ -0,0 +1,64 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.slice;\n+\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice that removes the first part from the request.\n+ * @since 0.8\n+ */\n+public class RemoveFirstPart implements Slice {\n+\n+    /**\n+     * Delegate slice.\n+     */\n+    private final Slice slice;\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param slice Slice.\n+     */\n+    public RemoveFirstPart(final Slice slice) {\n+        this.slice = slice;\n+    }\n+\n+    // @checkstyle DesignForExtensionCheck (1 line)\n+    @Override\n+    public Response response(\n+        final String line,\n+        final Iterable<Map.Entry<String, String>> headers,\n+        final Publisher<ByteBuffer> body\n+    ) {\n+        // @checkstyle MagicNumberCheck (1 line)\n+        final String newline = String.join(\"/\", ArrayUtils.remove(line.split(\"/\"), 3));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "96bdfae701967ded4e64ae8a7a8fffa45ec7d6d2"}, "originalPosition": 61}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ac1cf9f5ad54ddce1b23e623433ea6cfa1124371", "author": {"user": {"login": "ammaratef45", "name": "Ammar Hussein"}}, "url": "https://github.com/artipie/http/commit/ac1cf9f5ad54ddce1b23e623433ea6cfa1124371", "committedDate": "2020-04-12T19:34:09Z", "message": "#115 resolved review comments"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMDEwNTcw", "url": "https://github.com/artipie/http/pull/116#pullrequestreview-392010570", "createdAt": "2020-04-13T07:57:21Z", "commit": {"oid": "ac1cf9f5ad54ddce1b23e623433ea6cfa1124371"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwNzo1NzoyMlrOGEfoQA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xM1QwNzo1NzoyMlrOGEfoQA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNzM2NTY5Ng==", "bodyText": "@ammaratef45 let's rename it to removesInitialPartOfUri to be more explicit of what to expect of the test.", "url": "https://github.com/artipie/http/pull/116#discussion_r407365696", "createdAt": "2020-04-13T07:57:22Z", "author": {"login": "Vatavuk"}, "path": "src/test/java/com/artipie/http/slice/HiddenRoutingSliceTest.java", "diffHunk": "@@ -0,0 +1,95 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.slice;\n+\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithHeaders;\n+import com.artipie.http.rs.RsWithStatus;\n+import io.reactivex.Flowable;\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import org.cactoos.map.MapEntry;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Test;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Test case for {@link HiddenRoutingSlice}.\n+ * @since 0.8\n+ */\n+class HiddenRoutingSliceTest {\n+\n+    @Test\n+    void isFirstPartRemoved() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ac1cf9f5ad54ddce1b23e623433ea6cfa1124371"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76b5d13d90b874d34539a6c3d7550e8c65971c47", "author": {"user": {"login": "ammaratef45", "name": "Ammar Hussein"}}, "url": "https://github.com/artipie/http/commit/76b5d13d90b874d34539a6c3d7550e8c65971c47", "committedDate": "2020-04-13T15:44:04Z", "message": "#115 prevented indexoutofbounds exception"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyMjc4OTI5", "url": "https://github.com/artipie/http/pull/116#pullrequestreview-392278929", "createdAt": "2020-04-13T17:00:01Z", "commit": {"oid": "76b5d13d90b874d34539a6c3d7550e8c65971c47"}, "state": "DISMISSED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzkyODQzODYy", "url": "https://github.com/artipie/http/pull/116#pullrequestreview-392843862", "createdAt": "2020-04-14T11:38:21Z", "commit": {"oid": "76b5d13d90b874d34539a6c3d7550e8c65971c47"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMTozODoyMVrOGFKjWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xNFQxMTozOTo0N1rOGFKmRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA2ODk1NQ==", "bodyText": "@ammaratef45 HTTP request line may contain both kinds: abosule URI and absolute path, see https://www.w3.org/Protocols/rfc2616/rfc2616-sec5.html#sec5.1.2\n\nRequest-URI    = \"*\" | absoluteURI | abs_path | authority\n\nSo it would be not correct to split it at 5 slash symbols, we need to parse it using URI class or something similar", "url": "https://github.com/artipie/http/pull/116#discussion_r408068955", "createdAt": "2020-04-14T11:38:21Z", "author": {"login": "g4s8"}, "path": "src/test/java/com/artipie/http/slice/HiddenRoutingSliceTest.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.slice;\n+\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithHeaders;\n+import com.artipie.http.rs.RsWithStatus;\n+import io.reactivex.Flowable;\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import org.cactoos.map.MapEntry;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Test;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Test case for {@link HiddenRoutingSlice}.\n+ * @since 0.8\n+ */\n+class HiddenRoutingSliceTest {\n+\n+    @Test\n+    void removesInitialPartOfUri() {\n+        new HiddenRoutingSlice(new LineSlice()).response(\n+            requestLine(\"http://www.w3.org/pub/WWW/TheProject.html\"),\n+            Arrays.asList(\n+                new MapEntry<>(\"Content-Length\", \"0\"),\n+                new MapEntry<>(\"Content-Type\", \"whatever\")\n+            ),\n+            Flowable.empty()\n+        ).send(\n+            (status, headers, body) -> {\n+                final String line = headers.iterator().next().getValue();\n+                MatcherAssert.assertThat(\n+                    \"url retrieved\",\n+                    line,\n+                    IsEqual.equalTo(requestLine(\"http://www.w3.org/WWW/TheProject.html\"))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76b5d13d90b874d34539a6c3d7550e8c65971c47"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwODA2OTcwMw==", "bodyText": "@ammaratef45 it seems these headers are not needed for unit test", "url": "https://github.com/artipie/http/pull/116#discussion_r408069703", "createdAt": "2020-04-14T11:39:47Z", "author": {"login": "g4s8"}, "path": "src/test/java/com/artipie/http/slice/HiddenRoutingSliceTest.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.slice;\n+\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithHeaders;\n+import com.artipie.http.rs.RsWithStatus;\n+import io.reactivex.Flowable;\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import org.cactoos.map.MapEntry;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Test;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Test case for {@link HiddenRoutingSlice}.\n+ * @since 0.8\n+ */\n+class HiddenRoutingSliceTest {\n+\n+    @Test\n+    void removesInitialPartOfUri() {\n+        new HiddenRoutingSlice(new LineSlice()).response(\n+            requestLine(\"http://www.w3.org/pub/WWW/TheProject.html\"),\n+            Arrays.asList(\n+                new MapEntry<>(\"Content-Length\", \"0\"),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76b5d13d90b874d34539a6c3d7550e8c65971c47"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8896eb39c2e5176e2268ca1cfa0c5fbac3e71347", "author": {"user": {"login": "ammaratef45", "name": "Ammar Hussein"}}, "url": "https://github.com/artipie/http/commit/8896eb39c2e5176e2268ca1cfa0c5fbac3e71347", "committedDate": "2020-04-17T22:13:36Z", "message": "#115 added uri builder to handle path"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2MTY5MDg1", "url": "https://github.com/artipie/http/pull/116#pullrequestreview-396169085", "createdAt": "2020-04-20T06:25:28Z", "commit": {"oid": "8896eb39c2e5176e2268ca1cfa0c5fbac3e71347"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNjoyNToyOFrOGIE99w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwNjoyODo0MFrOGIFDYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyMzE5MQ==", "bodyText": "@ammaratef45 you can mark the class as final to get rid of this warning", "url": "https://github.com/artipie/http/pull/116#discussion_r411123191", "createdAt": "2020-04-20T06:25:28Z", "author": {"login": "g4s8"}, "path": "src/main/java/com/artipie/http/slice/HiddenRoutingSlice.java", "diffHunk": "@@ -0,0 +1,82 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.slice;\n+\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import java.net.URI;\n+import java.net.URISyntaxException;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.http.client.utils.URIBuilder;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Slice that removes the first part from the request URI.\n+ * for example `GET http://www.w3.org/pub/WWW/TheProject.html HTTP/1.1`\n+ * would be `GET http://www.w3.org/WWW/TheProject.html HTTP/1.1`\n+ *\n+ * @since 0.8\n+ */\n+public class HiddenRoutingSlice implements Slice {\n+\n+    /**\n+     * Delegate slice.\n+     */\n+    private final Slice slice;\n+\n+    /**\n+     * Ctor.\n+     *\n+     * @param slice Slice.\n+     */\n+    public HiddenRoutingSlice(final Slice slice) {\n+        this.slice = slice;\n+    }\n+\n+    // @checkstyle DesignForExtensionCheck (1 line)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8896eb39c2e5176e2268ca1cfa0c5fbac3e71347"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTEyNDU3OQ==", "bodyText": "@ammaratef45 can you add a test to verify that the absolute path works as well as absolute URI? E.g. request line GET /one/two/three HTTP/1.1 returns /two/three path?", "url": "https://github.com/artipie/http/pull/116#discussion_r411124579", "createdAt": "2020-04-20T06:28:40Z", "author": {"login": "g4s8"}, "path": "src/test/java/com/artipie/http/slice/HiddenRoutingSliceTest.java", "diffHunk": "@@ -0,0 +1,109 @@\n+/*\n+ * MIT License\n+ *\n+ * Copyright (c) 2020 Artipie\n+ *\n+ * Permission is hereby granted, free of charge, to any person obtaining a copy\n+ * of this software and associated documentation files (the \"Software\"), to deal\n+ * in the Software without restriction, including without limitation the rights\n+ * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n+ * copies of the Software, and to permit persons to whom the Software is\n+ * furnished to do so, subject to the following conditions:\n+ *\n+ * The above copyright notice and this permission notice shall be included in all\n+ * copies or substantial portions of the Software.\n+ *\n+ * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n+ * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n+ * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n+ * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n+ * SOFTWARE.\n+ */\n+package com.artipie.http.slice;\n+\n+import com.artipie.http.Response;\n+import com.artipie.http.Slice;\n+import com.artipie.http.rq.RequestLine;\n+import com.artipie.http.rs.RsStatus;\n+import com.artipie.http.rs.RsWithHeaders;\n+import com.artipie.http.rs.RsWithStatus;\n+import io.reactivex.Flowable;\n+import java.nio.ByteBuffer;\n+import java.util.Arrays;\n+import java.util.Map;\n+import java.util.concurrent.CompletableFuture;\n+import org.hamcrest.MatcherAssert;\n+import org.hamcrest.core.IsEqual;\n+import org.junit.jupiter.api.Test;\n+import org.reactivestreams.Publisher;\n+\n+/**\n+ * Test case for {@link HiddenRoutingSlice}.\n+ * @since 0.8\n+ */\n+class HiddenRoutingSliceTest {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8896eb39c2e5176e2268ca1cfa0c5fbac3e71347"}, "originalPosition": 46}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c66f092737860b066d6453a6f97bc6b052890f8e", "author": {"user": {"login": "ammaratef45", "name": "Ammar Hussein"}}, "url": "https://github.com/artipie/http/commit/c66f092737860b066d6453a6f97bc6b052890f8e", "committedDate": "2020-04-20T15:16:19Z", "message": "#115 added a test for absolute paths"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0d4d7e15541139445918ee89f6d1a7614859220a", "author": {"user": {"login": "ammaratef45", "name": "Ammar Hussein"}}, "url": "https://github.com/artipie/http/commit/0d4d7e15541139445918ee89f6d1a7614859220a", "committedDate": "2020-04-20T15:21:07Z", "message": "#115 added a test for absolute paths"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NTgwNDI5", "url": "https://github.com/artipie/http/pull/116#pullrequestreview-396580429", "createdAt": "2020-04-20T15:46:37Z", "commit": {"oid": "0d4d7e15541139445918ee89f6d1a7614859220a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3166, "cost": 1, "resetAt": "2021-11-01T11:59:11Z"}}}