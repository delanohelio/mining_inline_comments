{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzOTk4MDA2", "number": 142, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMjowNjo0MlrOD5yPZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMjowOToxMVrOD5ySsQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTE4NTY1OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/http/rs/Header.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMjowNjo0MlrOGRP18g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzoyNjoyMVrOGRS3GA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDczODU0Ng==", "bodyText": "@olegmoz let's throw exception here to make this class immutable", "url": "https://github.com/artipie/http/pull/142#discussion_r420738546", "createdAt": "2020-05-06T12:06:42Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/http/rs/Header.java", "diffHunk": "@@ -112,4 +112,56 @@ public String toString() {\n     private String lowercaseName() {\n         return this.name.toLowerCase(Locale.US);\n     }\n+\n+    /**\n+     * Abstract decorator for Header.\n+     *\n+     * @since 0.9\n+     */\n+    abstract static class Wrap implements Map.Entry<String, String> {\n+\n+        /**\n+         * Origin header.\n+         */\n+        private final Map.Entry<String, String> header;\n+\n+        /**\n+         * Ctor.\n+         *\n+         * @param header Header.\n+         */\n+        protected Wrap(final Map.Entry<String, String> header) {\n+            this.header = header;\n+        }\n+\n+        @Override\n+        public String getKey() {\n+            return this.header.getKey();\n+        }\n+\n+        @Override\n+        public String getValue() {\n+            return this.header.getValue();\n+        }\n+\n+        @Override\n+        public String setValue(final String value) {\n+            return this.header.setValue(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a48e443a73ba63097955158307ffcb0f80f4775"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc3MTUzNw==", "bodyText": "@Vatavuk I think that immutability should depend on header and this wrapper does not have to enforce it", "url": "https://github.com/artipie/http/pull/142#discussion_r420771537", "createdAt": "2020-05-06T13:01:59Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/http/rs/Header.java", "diffHunk": "@@ -112,4 +112,56 @@ public String toString() {\n     private String lowercaseName() {\n         return this.name.toLowerCase(Locale.US);\n     }\n+\n+    /**\n+     * Abstract decorator for Header.\n+     *\n+     * @since 0.9\n+     */\n+    abstract static class Wrap implements Map.Entry<String, String> {\n+\n+        /**\n+         * Origin header.\n+         */\n+        private final Map.Entry<String, String> header;\n+\n+        /**\n+         * Ctor.\n+         *\n+         * @param header Header.\n+         */\n+        protected Wrap(final Map.Entry<String, String> header) {\n+            this.header = header;\n+        }\n+\n+        @Override\n+        public String getKey() {\n+            return this.header.getKey();\n+        }\n+\n+        @Override\n+        public String getValue() {\n+            return this.header.getValue();\n+        }\n+\n+        @Override\n+        public String setValue(final String value) {\n+            return this.header.setValue(value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDczODU0Ng=="}, "originalCommit": {"oid": "1a48e443a73ba63097955158307ffcb0f80f4775"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc4Nzk5Mg==", "bodyText": "@olegmoz ok", "url": "https://github.com/artipie/http/pull/142#discussion_r420787992", "createdAt": "2020-05-06T13:26:21Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/http/rs/Header.java", "diffHunk": "@@ -112,4 +112,56 @@ public String toString() {\n     private String lowercaseName() {\n         return this.name.toLowerCase(Locale.US);\n     }\n+\n+    /**\n+     * Abstract decorator for Header.\n+     *\n+     * @since 0.9\n+     */\n+    abstract static class Wrap implements Map.Entry<String, String> {\n+\n+        /**\n+         * Origin header.\n+         */\n+        private final Map.Entry<String, String> header;\n+\n+        /**\n+         * Ctor.\n+         *\n+         * @param header Header.\n+         */\n+        protected Wrap(final Map.Entry<String, String> header) {\n+            this.header = header;\n+        }\n+\n+        @Override\n+        public String getKey() {\n+            return this.header.getKey();\n+        }\n+\n+        @Override\n+        public String getValue() {\n+            return this.header.getValue();\n+        }\n+\n+        @Override\n+        public String setValue(final String value) {\n+            return this.header.setValue(value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDczODU0Ng=="}, "originalCommit": {"oid": "1a48e443a73ba63097955158307ffcb0f80f4775"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTE4NjM2OnYy", "diffSide": "RIGHT", "path": "src/main/java/com/artipie/http/rs/Header.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMjowNjo1NFrOGRP2ZA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzowMjowOFrOGRR3Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDczODY2MA==", "bodyText": "@olegmoz all methods should be final", "url": "https://github.com/artipie/http/pull/142#discussion_r420738660", "createdAt": "2020-05-06T12:06:54Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/http/rs/Header.java", "diffHunk": "@@ -112,4 +112,56 @@ public String toString() {\n     private String lowercaseName() {\n         return this.name.toLowerCase(Locale.US);\n     }\n+\n+    /**\n+     * Abstract decorator for Header.\n+     *\n+     * @since 0.9\n+     */\n+    abstract static class Wrap implements Map.Entry<String, String> {\n+\n+        /**\n+         * Origin header.\n+         */\n+        private final Map.Entry<String, String> header;\n+\n+        /**\n+         * Ctor.\n+         *\n+         * @param header Header.\n+         */\n+        protected Wrap(final Map.Entry<String, String> header) {\n+            this.header = header;\n+        }\n+\n+        @Override\n+        public String getKey() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a48e443a73ba63097955158307ffcb0f80f4775"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc3MTYzNQ==", "bodyText": "@Vatavuk fixed, thanks", "url": "https://github.com/artipie/http/pull/142#discussion_r420771635", "createdAt": "2020-05-06T13:02:08Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/http/rs/Header.java", "diffHunk": "@@ -112,4 +112,56 @@ public String toString() {\n     private String lowercaseName() {\n         return this.name.toLowerCase(Locale.US);\n     }\n+\n+    /**\n+     * Abstract decorator for Header.\n+     *\n+     * @since 0.9\n+     */\n+    abstract static class Wrap implements Map.Entry<String, String> {\n+\n+        /**\n+         * Origin header.\n+         */\n+        private final Map.Entry<String, String> header;\n+\n+        /**\n+         * Ctor.\n+         *\n+         * @param header Header.\n+         */\n+        protected Wrap(final Map.Entry<String, String> header) {\n+            this.header = header;\n+        }\n+\n+        @Override\n+        public String getKey() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDczODY2MA=="}, "originalCommit": {"oid": "1a48e443a73ba63097955158307ffcb0f80f4775"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYxOTE5NDA5OnYy", "diffSide": "LEFT", "path": "src/main/java/com/artipie/http/rs/Header.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMjowOToxMVrOGRP7Kg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0wNlQxMzowMjo1MFrOGRR40A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDczOTg4Mg==", "bodyText": "@olegmoz why have you remove this check? If we compare this class with non-header object we will get class cast exception", "url": "https://github.com/artipie/http/pull/142#discussion_r420739882", "createdAt": "2020-05-06T12:09:11Z", "author": {"login": "Vatavuk"}, "path": "src/main/java/com/artipie/http/rs/Header.java", "diffHunk": "@@ -86,7 +86,7 @@ public boolean equals(final Object that) {\n         if (this == that) {\n             return true;\n         }\n-        if (that == null || getClass() != that.getClass()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1a48e443a73ba63097955158307ffcb0f80f4775"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDc3MjA0OA==", "bodyText": "@Vatavuk thanks for pointing this out, fixed it and made proper equals in Wrap too", "url": "https://github.com/artipie/http/pull/142#discussion_r420772048", "createdAt": "2020-05-06T13:02:50Z", "author": {"login": "olegmoz"}, "path": "src/main/java/com/artipie/http/rs/Header.java", "diffHunk": "@@ -86,7 +86,7 @@ public boolean equals(final Object that) {\n         if (this == that) {\n             return true;\n         }\n-        if (that == null || getClass() != that.getClass()) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMDczOTg4Mg=="}, "originalCommit": {"oid": "1a48e443a73ba63097955158307ffcb0f80f4775"}, "originalPosition": 4}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1843, "cost": 1, "resetAt": "2021-11-12T09:44:50Z"}}}