{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk1OTI3NDQx", "number": 4449, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzo0NjoyN1rODs5OAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTowNDozMVrODvmtjw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NDAxNDA5OnYy", "diffSide": "RIGHT", "path": "src/io/flutter/survey/FlutterSurvey.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQyMzo0NjoyN1rOF-ARSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxNDoxNDoyN1rOF-X5tA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2MDQ1Nw==", "bodyText": "I assume that the start date is inclusive, and the end date is exclusive? Or are they both inclusive?\nThis should likely read something like now.isEqualToOrAfter(startDate).", "url": "https://github.com/flutter/flutter-intellij/pull/4449#discussion_r400560457", "createdAt": "2020-03-30T23:46:27Z", "author": {"login": "devoncarew"}, "path": "src/io/flutter/survey/FlutterSurvey.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 The Chromium Authors. All rights reserved.\n+ * Use of this source code is governed by a BSD-style license that can be\n+ * found in the LICENSE file.\n+ */\n+package io.flutter.survey;\n+\n+import com.google.gson.JsonObject;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.time.LocalDate;\n+import java.time.format.DateTimeFormatter;\n+\n+public class FlutterSurvey {\n+  final String uniqueId;\n+  final LocalDate startDate;\n+  final LocalDate endDate;\n+\n+  final String title;\n+  final String urlPrefix;\n+\n+  FlutterSurvey(String uniqueId, String startDate, String endDate, String title, String urlPrefix) {\n+    this.uniqueId = uniqueId;\n+    this.startDate = parseDate(startDate);\n+    this.endDate = parseDate(endDate);\n+    this.title = title;\n+    this.urlPrefix = urlPrefix;\n+  }\n+\n+  private static LocalDate parseDate(String date) {\n+    return LocalDate.from(DateTimeFormatter.ISO_DATE_TIME.parse(date));\n+  }\n+\n+  public static FlutterSurvey fromJson(@NotNull JsonObject json) {\n+    return new FlutterSurvey(json.getAsJsonPrimitive(\"uniqueId\").getAsString(),\n+                             json.getAsJsonPrimitive(\"startDate\").getAsString(),\n+                             json.getAsJsonPrimitive(\"endDate\").getAsString(),\n+                             json.getAsJsonPrimitive(\"title\").getAsString(),\n+                             json.getAsJsonPrimitive(\"url\").getAsString()\n+    );\n+  }\n+\n+  boolean isSurveyOpen() {\n+    final LocalDate now = LocalDate.now();\n+    return now.isAfter(startDate) && now.isBefore(endDate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3e87ebf9307e3ba0103d832e99e3c511baf55759"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2NTQwNw==", "bodyText": "I guess inclusive/exclusive won't matter that much, because both start date and end date actually specify the time, in addition to the date. So something consistent would work..?\n\"startDate\": \"2020-03-03T09:00:00-08:00\",\n\"endDate\": \"2020-03-10T09:00:00-07:00\"\n\nOr perhaps I should change the names of the objects to startDateAndTime and 'endDateAndTime` to avoid confusion?", "url": "https://github.com/flutter/flutter-intellij/pull/4449#discussion_r400565407", "createdAt": "2020-03-31T00:02:36Z", "author": {"login": "jayoung-lee"}, "path": "src/io/flutter/survey/FlutterSurvey.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 The Chromium Authors. All rights reserved.\n+ * Use of this source code is governed by a BSD-style license that can be\n+ * found in the LICENSE file.\n+ */\n+package io.flutter.survey;\n+\n+import com.google.gson.JsonObject;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.time.LocalDate;\n+import java.time.format.DateTimeFormatter;\n+\n+public class FlutterSurvey {\n+  final String uniqueId;\n+  final LocalDate startDate;\n+  final LocalDate endDate;\n+\n+  final String title;\n+  final String urlPrefix;\n+\n+  FlutterSurvey(String uniqueId, String startDate, String endDate, String title, String urlPrefix) {\n+    this.uniqueId = uniqueId;\n+    this.startDate = parseDate(startDate);\n+    this.endDate = parseDate(endDate);\n+    this.title = title;\n+    this.urlPrefix = urlPrefix;\n+  }\n+\n+  private static LocalDate parseDate(String date) {\n+    return LocalDate.from(DateTimeFormatter.ISO_DATE_TIME.parse(date));\n+  }\n+\n+  public static FlutterSurvey fromJson(@NotNull JsonObject json) {\n+    return new FlutterSurvey(json.getAsJsonPrimitive(\"uniqueId\").getAsString(),\n+                             json.getAsJsonPrimitive(\"startDate\").getAsString(),\n+                             json.getAsJsonPrimitive(\"endDate\").getAsString(),\n+                             json.getAsJsonPrimitive(\"title\").getAsString(),\n+                             json.getAsJsonPrimitive(\"url\").getAsString()\n+    );\n+  }\n+\n+  boolean isSurveyOpen() {\n+    final LocalDate now = LocalDate.now();\n+    return now.isAfter(startDate) && now.isBefore(endDate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2MDQ1Nw=="}, "originalCommit": {"oid": "3e87ebf9307e3ba0103d832e99e3c511baf55759"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU5OTEwNw==", "bodyText": "Ah, I'd written that thinking that it was for a day, not a date+time; agree that it doesn't matter if we're just talking about a second or millisecond.", "url": "https://github.com/flutter/flutter-intellij/pull/4449#discussion_r400599107", "createdAt": "2020-03-31T02:02:45Z", "author": {"login": "devoncarew"}, "path": "src/io/flutter/survey/FlutterSurvey.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 The Chromium Authors. All rights reserved.\n+ * Use of this source code is governed by a BSD-style license that can be\n+ * found in the LICENSE file.\n+ */\n+package io.flutter.survey;\n+\n+import com.google.gson.JsonObject;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.time.LocalDate;\n+import java.time.format.DateTimeFormatter;\n+\n+public class FlutterSurvey {\n+  final String uniqueId;\n+  final LocalDate startDate;\n+  final LocalDate endDate;\n+\n+  final String title;\n+  final String urlPrefix;\n+\n+  FlutterSurvey(String uniqueId, String startDate, String endDate, String title, String urlPrefix) {\n+    this.uniqueId = uniqueId;\n+    this.startDate = parseDate(startDate);\n+    this.endDate = parseDate(endDate);\n+    this.title = title;\n+    this.urlPrefix = urlPrefix;\n+  }\n+\n+  private static LocalDate parseDate(String date) {\n+    return LocalDate.from(DateTimeFormatter.ISO_DATE_TIME.parse(date));\n+  }\n+\n+  public static FlutterSurvey fromJson(@NotNull JsonObject json) {\n+    return new FlutterSurvey(json.getAsJsonPrimitive(\"uniqueId\").getAsString(),\n+                             json.getAsJsonPrimitive(\"startDate\").getAsString(),\n+                             json.getAsJsonPrimitive(\"endDate\").getAsString(),\n+                             json.getAsJsonPrimitive(\"title\").getAsString(),\n+                             json.getAsJsonPrimitive(\"url\").getAsString()\n+    );\n+  }\n+\n+  boolean isSurveyOpen() {\n+    final LocalDate now = LocalDate.now();\n+    return now.isAfter(startDate) && now.isBefore(endDate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2MDQ1Nw=="}, "originalCommit": {"oid": "3e87ebf9307e3ba0103d832e99e3c511baf55759"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk0NjgyOQ==", "bodyText": "if we're just talking about a second or millisecond\n\nExactly my thinking.\n\nOr perhaps I should change the names of the objects to startDateAndTime and 'endDateAndTime` to avoid confusion?\n\nI don't  think it's necessary but  happy to go with the flow.", "url": "https://github.com/flutter/flutter-intellij/pull/4449#discussion_r400946829", "createdAt": "2020-03-31T14:13:27Z", "author": {"login": "pq"}, "path": "src/io/flutter/survey/FlutterSurvey.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 The Chromium Authors. All rights reserved.\n+ * Use of this source code is governed by a BSD-style license that can be\n+ * found in the LICENSE file.\n+ */\n+package io.flutter.survey;\n+\n+import com.google.gson.JsonObject;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.time.LocalDate;\n+import java.time.format.DateTimeFormatter;\n+\n+public class FlutterSurvey {\n+  final String uniqueId;\n+  final LocalDate startDate;\n+  final LocalDate endDate;\n+\n+  final String title;\n+  final String urlPrefix;\n+\n+  FlutterSurvey(String uniqueId, String startDate, String endDate, String title, String urlPrefix) {\n+    this.uniqueId = uniqueId;\n+    this.startDate = parseDate(startDate);\n+    this.endDate = parseDate(endDate);\n+    this.title = title;\n+    this.urlPrefix = urlPrefix;\n+  }\n+\n+  private static LocalDate parseDate(String date) {\n+    return LocalDate.from(DateTimeFormatter.ISO_DATE_TIME.parse(date));\n+  }\n+\n+  public static FlutterSurvey fromJson(@NotNull JsonObject json) {\n+    return new FlutterSurvey(json.getAsJsonPrimitive(\"uniqueId\").getAsString(),\n+                             json.getAsJsonPrimitive(\"startDate\").getAsString(),\n+                             json.getAsJsonPrimitive(\"endDate\").getAsString(),\n+                             json.getAsJsonPrimitive(\"title\").getAsString(),\n+                             json.getAsJsonPrimitive(\"url\").getAsString()\n+    );\n+  }\n+\n+  boolean isSurveyOpen() {\n+    final LocalDate now = LocalDate.now();\n+    return now.isAfter(startDate) && now.isBefore(endDate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2MDQ1Nw=="}, "originalCommit": {"oid": "3e87ebf9307e3ba0103d832e99e3c511baf55759"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDk0NzYzNg==", "bodyText": "Updated to now.isEqual(startDate) || now.isAfter(startDate) ...", "url": "https://github.com/flutter/flutter-intellij/pull/4449#discussion_r400947636", "createdAt": "2020-03-31T14:14:27Z", "author": {"login": "pq"}, "path": "src/io/flutter/survey/FlutterSurvey.java", "diffHunk": "@@ -0,0 +1,47 @@\n+/*\n+ * Copyright 2020 The Chromium Authors. All rights reserved.\n+ * Use of this source code is governed by a BSD-style license that can be\n+ * found in the LICENSE file.\n+ */\n+package io.flutter.survey;\n+\n+import com.google.gson.JsonObject;\n+import org.jetbrains.annotations.NotNull;\n+\n+import java.time.LocalDate;\n+import java.time.format.DateTimeFormatter;\n+\n+public class FlutterSurvey {\n+  final String uniqueId;\n+  final LocalDate startDate;\n+  final LocalDate endDate;\n+\n+  final String title;\n+  final String urlPrefix;\n+\n+  FlutterSurvey(String uniqueId, String startDate, String endDate, String title, String urlPrefix) {\n+    this.uniqueId = uniqueId;\n+    this.startDate = parseDate(startDate);\n+    this.endDate = parseDate(endDate);\n+    this.title = title;\n+    this.urlPrefix = urlPrefix;\n+  }\n+\n+  private static LocalDate parseDate(String date) {\n+    return LocalDate.from(DateTimeFormatter.ISO_DATE_TIME.parse(date));\n+  }\n+\n+  public static FlutterSurvey fromJson(@NotNull JsonObject json) {\n+    return new FlutterSurvey(json.getAsJsonPrimitive(\"uniqueId\").getAsString(),\n+                             json.getAsJsonPrimitive(\"startDate\").getAsString(),\n+                             json.getAsJsonPrimitive(\"endDate\").getAsString(),\n+                             json.getAsJsonPrimitive(\"title\").getAsString(),\n+                             json.getAsJsonPrimitive(\"url\").getAsString()\n+    );\n+  }\n+\n+  boolean isSurveyOpen() {\n+    final LocalDate now = LocalDate.now();\n+    return now.isAfter(startDate) && now.isBefore(endDate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDU2MDQ1Nw=="}, "originalCommit": {"oid": "3e87ebf9307e3ba0103d832e99e3c511baf55759"}, "originalPosition": 45}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjQzOTE5OnYy", "diffSide": "RIGHT", "path": "src/io/flutter/survey/FlutterSurveyNotifications.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTowNDozMVrOGCIDeA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTowNTo1M1rOGCIHZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg4MjI5Ng==", "bodyText": "@pq - it looks like the following code happens synchronously on whatever thread we were called on (potentially the EDT)?\nYou may change this to working on a background thread (and if necessary, switching back the EDT at the very end).\nWe use a few different ways to execute in background threads - one is ApplicationManager.getApplication().executeOnPooledThread() (not sure if other's may be more appropriate).", "url": "https://github.com/flutter/flutter-intellij/pull/4449#discussion_r404882296", "createdAt": "2020-04-07T15:04:31Z", "author": {"login": "devoncarew"}, "path": "src/io/flutter/survey/FlutterSurveyNotifications.java", "diffHunk": "@@ -94,26 +72,23 @@ private void check(@NotNull VirtualFile file) {\n     });\n   }\n \n-  @NotNull final Project myProject;\n-\n-  FlutterSurveyNotifications(@NotNull Project project) {\n-    this.myProject = project;\n-  }\n-\n   private void checkForDisplaySurvey() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4f572edbe0184bfcf524340c11d9ecf54a92edc9"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg4MzMwMQ==", "bodyText": "Yup. I'm looking at this very thing! Sorry I missed it first time through!", "url": "https://github.com/flutter/flutter-intellij/pull/4449#discussion_r404883301", "createdAt": "2020-04-07T15:05:53Z", "author": {"login": "pq"}, "path": "src/io/flutter/survey/FlutterSurveyNotifications.java", "diffHunk": "@@ -94,26 +72,23 @@ private void check(@NotNull VirtualFile file) {\n     });\n   }\n \n-  @NotNull final Project myProject;\n-\n-  FlutterSurveyNotifications(@NotNull Project project) {\n-    this.myProject = project;\n-  }\n-\n   private void checkForDisplaySurvey() {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg4MjI5Ng=="}, "originalCommit": {"oid": "4f572edbe0184bfcf524340c11d9ecf54a92edc9"}, "originalPosition": 71}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 300, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}