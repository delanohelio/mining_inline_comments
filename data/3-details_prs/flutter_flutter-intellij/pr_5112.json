{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1NDkxMjM1", "number": 5112, "title": "Add devtools service", "bodyText": "This change is to start running a DevTools server for the duration of a project instead of having it associated with an application.\nCurrently we don't use the daemon to serve DevTools for non-bazel projects, but this should be okay once we're using pub global run devtools in flutter tools.", "createdAt": "2020-12-09T22:01:01Z", "url": "https://github.com/flutter/flutter-intellij/pull/5112", "merged": true, "mergeCommit": {"oid": "492a7196babddef8fd201023023e9131cf129b72"}, "closed": true, "closedAt": "2020-12-10T23:48:35Z", "author": {"login": "helin24"}, "timelineItems": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdkmfS2gH2gAyNTM1NDkxMjM1OmQ1NGQ5NTU0YmZhYTkxZTkwNjQ2NmFmNWIxNTJmZjhmZDhmZTE0NDc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdk8Cx9gH2gAyNTM1NDkxMjM1OjEwNTkyZTc4YmFjYTZkNjU4OGMyMTRiMWQyYjQ1MjM4ZWNhMGZiNjY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "d54d9554bfaa91e906466af5b152ff8fd8fe1447", "author": {"user": {"login": "helin24", "name": "Helin Shiah"}}, "url": "https://github.com/flutter/flutter-intellij/commit/d54d9554bfaa91e906466af5b152ff8fd8fe1447", "committedDate": "2020-12-09T22:29:05Z", "message": "Add devtools service"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3e4cf1e994833d9c504dbc0fc169954d8225d6ce", "author": {"user": {"login": "helin24", "name": "Helin Shiah"}}, "url": "https://github.com/flutter/flutter-intellij/commit/3e4cf1e994833d9c504dbc0fc169954d8225d6ce", "committedDate": "2020-12-09T20:27:51Z", "message": "Add devtools service WIP"}, "afterCommit": {"oid": "d54d9554bfaa91e906466af5b152ff8fd8fe1447", "author": {"user": {"login": "helin24", "name": "Helin Shiah"}}, "url": "https://github.com/flutter/flutter-intellij/commit/d54d9554bfaa91e906466af5b152ff8fd8fe1447", "committedDate": "2020-12-09T22:29:05Z", "message": "Add devtools service"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4ODEyNjQ3", "url": "https://github.com/flutter/flutter-intellij/pull/5112#pullrequestreview-548812647", "createdAt": "2020-12-10T04:36:57Z", "commit": {"oid": "d54d9554bfaa91e906466af5b152ff8fd8fe1447"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDozNjo1N1rOIC1J-A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDozNjo1N1rOIC1J-A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgzODk2OA==", "bodyText": "no need for an inner class. Nust write as a Lambda.", "url": "https://github.com/flutter/flutter-intellij/pull/5112#discussion_r539838968", "createdAt": "2020-12-10T04:36:57Z", "author": {"login": "jacob314"}, "path": "src/io/flutter/run/daemon/DaemonApi.java", "diffHunk": "@@ -404,6 +408,14 @@ RestartResult parseResult(JsonElement result) {\n     }\n   }\n \n+  private static class DaemonShutdown extends Params<Boolean> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d54d9554bfaa91e906466af5b152ff8fd8fe1447"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4ODEzMDg3", "url": "https://github.com/flutter/flutter-intellij/pull/5112#pullrequestreview-548813087", "createdAt": "2020-12-10T04:38:25Z", "commit": {"oid": "d54d9554bfaa91e906466af5b152ff8fd8fe1447"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDozODoyNVrOIC1L1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDozODoyNVrOIC1L1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTgzOTQ0NQ==", "bodyText": "have you tested that this code gracefully handles changing your flutter project?", "url": "https://github.com/flutter/flutter-intellij/pull/5112#discussion_r539839445", "createdAt": "2020-12-10T04:38:25Z", "author": {"login": "jacob314"}, "path": "src/io/flutter/run/daemon/DevToolsService.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 The Chromium Authors. All rights reserved.\n+ * Use of this source code is governed by a BSD-style license that can be\n+ * found in the LICENSE file.\n+ */\n+package io.flutter.run.daemon;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.intellij.execution.ExecutionException;\n+import com.intellij.execution.configurations.GeneralCommandLine;\n+import com.intellij.execution.process.ProcessHandler;\n+import com.intellij.openapi.components.ServiceManager;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.project.ProjectManager;\n+import com.intellij.openapi.project.ProjectManagerListener;\n+import com.intellij.openapi.util.io.FileUtil;\n+import com.intellij.openapi.vfs.CharsetToolkit;\n+import io.flutter.FlutterUtils;\n+import io.flutter.android.IntelliJAndroidSdk;\n+import io.flutter.bazel.Workspace;\n+import io.flutter.bazel.WorkspaceCache;\n+import io.flutter.sdk.FlutterSdk;\n+import io.flutter.sdk.FlutterSdkUtil;\n+import io.flutter.utils.MostlySilentOsProcessHandler;\n+import org.jetbrains.annotations.NotNull;\n+\n+import static com.jetbrains.lang.dart.ide.runner.server.vmService.VmServiceWrapper.LOG;\n+\n+public class DevToolsService {\n+  private class DevToolsServiceListener implements DaemonEvent.Listener {\n+  }\n+\n+  @NotNull private final Project project;\n+  private DaemonApi daemonApi;\n+  private ProcessHandler process;\n+  private DevToolsInstance devToolsInstance;\n+\n+  @NotNull\n+  public static DevToolsService getInstance(@NotNull final Project project) {\n+    return ServiceManager.getService(project, DevToolsService.class);\n+  }\n+\n+  private DevToolsService(@NotNull final Project project) {\n+    this.project = project;\n+    try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d54d9554bfaa91e906466af5b152ff8fd8fe1447"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4ODEzNzcw", "url": "https://github.com/flutter/flutter-intellij/pull/5112#pullrequestreview-548813770", "createdAt": "2020-12-10T04:40:48Z", "commit": {"oid": "d54d9554bfaa91e906466af5b152ff8fd8fe1447"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDo0MDo0OFrOIC1O1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDo0MDo0OFrOIC1O1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0MDIxMw==", "bodyText": "what happens if the flutter sdk changes once this is already initialized?", "url": "https://github.com/flutter/flutter-intellij/pull/5112#discussion_r539840213", "createdAt": "2020-12-10T04:40:48Z", "author": {"login": "jacob314"}, "path": "src/io/flutter/run/daemon/DevToolsService.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 The Chromium Authors. All rights reserved.\n+ * Use of this source code is governed by a BSD-style license that can be\n+ * found in the LICENSE file.\n+ */\n+package io.flutter.run.daemon;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.intellij.execution.ExecutionException;\n+import com.intellij.execution.configurations.GeneralCommandLine;\n+import com.intellij.execution.process.ProcessHandler;\n+import com.intellij.openapi.components.ServiceManager;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.project.ProjectManager;\n+import com.intellij.openapi.project.ProjectManagerListener;\n+import com.intellij.openapi.util.io.FileUtil;\n+import com.intellij.openapi.vfs.CharsetToolkit;\n+import io.flutter.FlutterUtils;\n+import io.flutter.android.IntelliJAndroidSdk;\n+import io.flutter.bazel.Workspace;\n+import io.flutter.bazel.WorkspaceCache;\n+import io.flutter.sdk.FlutterSdk;\n+import io.flutter.sdk.FlutterSdkUtil;\n+import io.flutter.utils.MostlySilentOsProcessHandler;\n+import org.jetbrains.annotations.NotNull;\n+\n+import static com.jetbrains.lang.dart.ide.runner.server.vmService.VmServiceWrapper.LOG;\n+\n+public class DevToolsService {\n+  private class DevToolsServiceListener implements DaemonEvent.Listener {\n+  }\n+\n+  @NotNull private final Project project;\n+  private DaemonApi daemonApi;\n+  private ProcessHandler process;\n+  private DevToolsInstance devToolsInstance;\n+\n+  @NotNull\n+  public static DevToolsService getInstance(@NotNull final Project project) {\n+    return ServiceManager.getService(project, DevToolsService.class);\n+  }\n+\n+  private DevToolsService(@NotNull final Project project) {\n+    this.project = project;\n+    try {\n+      final GeneralCommandLine command = chooseCommand(project);\n+      assert command != null;\n+      this.process = new MostlySilentOsProcessHandler(command);\n+      daemonApi = new DaemonApi(process);\n+      daemonApi.listen(process, new DevToolsServiceListener());\n+      daemonApi.devToolsServe().thenAccept((DaemonApi.DevToolsAddress address) -> {\n+        if (!project.isOpen()) {\n+          // We should skip starting DevTools (and doing any UI work) if the project has been closed.\n+          return;\n+        }\n+        if (address == null) {\n+          LOG.error(\"DevTools address was null\");\n+        }\n+        else {\n+          devToolsInstance = new DevToolsInstance(address.host, address.port);\n+        }\n+      });\n+    }\n+    catch (ExecutionException e) {\n+      e.printStackTrace();\n+    }\n+\n+    ProjectManager.getInstance().addProjectManagerListener(project, new ProjectManagerListener() {\n+      @Override\n+      public void projectClosing(@NotNull Project project) {\n+        daemonApi.daemonShutdown();\n+        if (!process.isProcessTerminated()) {\n+          process.destroyProcess();\n+        }\n+      }\n+    });\n+  }\n+\n+  private static GeneralCommandLine chooseCommand(@NotNull final Project project) {\n+    final String androidHome = IntelliJAndroidSdk.chooseAndroidHome(project, false);\n+\n+    // Use daemon script if this is a bazel project.\n+    final Workspace workspace = WorkspaceCache.getInstance(project).get();\n+    if (workspace != null) {\n+      final String script = workspace.getDaemonScript();\n+      if (script != null) {\n+        return createCommand(workspace.getRoot().getPath(), script, ImmutableList.of(), androidHome);\n+      }\n+\n+    }\n+\n+    // Otherwise, use the Flutter SDK.\n+    final FlutterSdk sdk = FlutterSdk.getFlutterSdk(project);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d54d9554bfaa91e906466af5b152ff8fd8fe1447"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4ODE1MTk3", "url": "https://github.com/flutter/flutter-intellij/pull/5112#pullrequestreview-548815197", "createdAt": "2020-12-10T04:45:36Z", "commit": {"oid": "d54d9554bfaa91e906466af5b152ff8fd8fe1447"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDo0NTozNlrOIC1U0Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDo0NTozNlrOIC1U0Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0MTc0NQ==", "bodyText": "why are we passing android home in. That seems like it has nothing to do with serving devtools. We should either share this code with the regular code to launch the daemon or remove code that is unrelated to the launching a daemon just to serve devtools.", "url": "https://github.com/flutter/flutter-intellij/pull/5112#discussion_r539841745", "createdAt": "2020-12-10T04:45:36Z", "author": {"login": "jacob314"}, "path": "src/io/flutter/run/daemon/DevToolsService.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 The Chromium Authors. All rights reserved.\n+ * Use of this source code is governed by a BSD-style license that can be\n+ * found in the LICENSE file.\n+ */\n+package io.flutter.run.daemon;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.intellij.execution.ExecutionException;\n+import com.intellij.execution.configurations.GeneralCommandLine;\n+import com.intellij.execution.process.ProcessHandler;\n+import com.intellij.openapi.components.ServiceManager;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.project.ProjectManager;\n+import com.intellij.openapi.project.ProjectManagerListener;\n+import com.intellij.openapi.util.io.FileUtil;\n+import com.intellij.openapi.vfs.CharsetToolkit;\n+import io.flutter.FlutterUtils;\n+import io.flutter.android.IntelliJAndroidSdk;\n+import io.flutter.bazel.Workspace;\n+import io.flutter.bazel.WorkspaceCache;\n+import io.flutter.sdk.FlutterSdk;\n+import io.flutter.sdk.FlutterSdkUtil;\n+import io.flutter.utils.MostlySilentOsProcessHandler;\n+import org.jetbrains.annotations.NotNull;\n+\n+import static com.jetbrains.lang.dart.ide.runner.server.vmService.VmServiceWrapper.LOG;\n+\n+public class DevToolsService {\n+  private class DevToolsServiceListener implements DaemonEvent.Listener {\n+  }\n+\n+  @NotNull private final Project project;\n+  private DaemonApi daemonApi;\n+  private ProcessHandler process;\n+  private DevToolsInstance devToolsInstance;\n+\n+  @NotNull\n+  public static DevToolsService getInstance(@NotNull final Project project) {\n+    return ServiceManager.getService(project, DevToolsService.class);\n+  }\n+\n+  private DevToolsService(@NotNull final Project project) {\n+    this.project = project;\n+    try {\n+      final GeneralCommandLine command = chooseCommand(project);\n+      assert command != null;\n+      this.process = new MostlySilentOsProcessHandler(command);\n+      daemonApi = new DaemonApi(process);\n+      daemonApi.listen(process, new DevToolsServiceListener());\n+      daemonApi.devToolsServe().thenAccept((DaemonApi.DevToolsAddress address) -> {\n+        if (!project.isOpen()) {\n+          // We should skip starting DevTools (and doing any UI work) if the project has been closed.\n+          return;\n+        }\n+        if (address == null) {\n+          LOG.error(\"DevTools address was null\");\n+        }\n+        else {\n+          devToolsInstance = new DevToolsInstance(address.host, address.port);\n+        }\n+      });\n+    }\n+    catch (ExecutionException e) {\n+      e.printStackTrace();\n+    }\n+\n+    ProjectManager.getInstance().addProjectManagerListener(project, new ProjectManagerListener() {\n+      @Override\n+      public void projectClosing(@NotNull Project project) {\n+        daemonApi.daemonShutdown();\n+        if (!process.isProcessTerminated()) {\n+          process.destroyProcess();\n+        }\n+      }\n+    });\n+  }\n+\n+  private static GeneralCommandLine chooseCommand(@NotNull final Project project) {\n+    final String androidHome = IntelliJAndroidSdk.chooseAndroidHome(project, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d54d9554bfaa91e906466af5b152ff8fd8fe1447"}, "originalPosition": 80}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4ODE1OTIw", "url": "https://github.com/flutter/flutter-intellij/pull/5112#pullrequestreview-548815920", "createdAt": "2020-12-10T04:48:05Z", "commit": {"oid": "d54d9554bfaa91e906466af5b152ff8fd8fe1447"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDo0ODowNVrOIC1X4Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNDo0ODowNVrOIC1X4Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTg0MjUyOQ==", "bodyText": "How can a caller of this know whether the devtools instance has started yet or not?\nPerhaps vend a CompletableFuture with the devToolsInstance or a boolean indicating the service has started.", "url": "https://github.com/flutter/flutter-intellij/pull/5112#discussion_r539842529", "createdAt": "2020-12-10T04:48:05Z", "author": {"login": "jacob314"}, "path": "src/io/flutter/run/daemon/DevToolsService.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * Copyright 2020 The Chromium Authors. All rights reserved.\n+ * Use of this source code is governed by a BSD-style license that can be\n+ * found in the LICENSE file.\n+ */\n+package io.flutter.run.daemon;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.intellij.execution.ExecutionException;\n+import com.intellij.execution.configurations.GeneralCommandLine;\n+import com.intellij.execution.process.ProcessHandler;\n+import com.intellij.openapi.components.ServiceManager;\n+import com.intellij.openapi.project.Project;\n+import com.intellij.openapi.project.ProjectManager;\n+import com.intellij.openapi.project.ProjectManagerListener;\n+import com.intellij.openapi.util.io.FileUtil;\n+import com.intellij.openapi.vfs.CharsetToolkit;\n+import io.flutter.FlutterUtils;\n+import io.flutter.android.IntelliJAndroidSdk;\n+import io.flutter.bazel.Workspace;\n+import io.flutter.bazel.WorkspaceCache;\n+import io.flutter.sdk.FlutterSdk;\n+import io.flutter.sdk.FlutterSdkUtil;\n+import io.flutter.utils.MostlySilentOsProcessHandler;\n+import org.jetbrains.annotations.NotNull;\n+\n+import static com.jetbrains.lang.dart.ide.runner.server.vmService.VmServiceWrapper.LOG;\n+\n+public class DevToolsService {\n+  private class DevToolsServiceListener implements DaemonEvent.Listener {\n+  }\n+\n+  @NotNull private final Project project;\n+  private DaemonApi daemonApi;\n+  private ProcessHandler process;\n+  private DevToolsInstance devToolsInstance;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d54d9554bfaa91e906466af5b152ff8fd8fe1447"}, "originalPosition": 36}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "adf5fe0c7c96d9aff50770a61ac95acbc7cd3f99", "author": {"user": {"login": "helin24", "name": "Helin Shiah"}}, "url": "https://github.com/flutter/flutter-intellij/commit/adf5fe0c7c96d9aff50770a61ac95acbc7cd3f99", "committedDate": "2020-12-10T19:20:36Z", "message": "Make instance completable, remove android_home"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f79f5fce1e4abeaeac5a1e2d2b946e0a1ea6ed91", "author": {"user": {"login": "helin24", "name": "Helin Shiah"}}, "url": "https://github.com/flutter/flutter-intellij/commit/f79f5fce1e4abeaeac5a1e2d2b946e0a1ea6ed91", "committedDate": "2020-12-10T19:34:05Z", "message": "Add null command check for unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bea3318a9686935410da2457860c0d18a60e724b", "author": {"user": {"login": "helin24", "name": "Helin Shiah"}}, "url": "https://github.com/flutter/flutter-intellij/commit/bea3318a9686935410da2457860c0d18a60e724b", "committedDate": "2020-12-10T22:22:03Z", "message": "Fix tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5Njk1MTI1", "url": "https://github.com/flutter/flutter-intellij/pull/5112#pullrequestreview-549695125", "createdAt": "2020-12-10T23:32:46Z", "commit": {"oid": "bea3318a9686935410da2457860c0d18a60e724b"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "10592e78baca6d6588c214b1d2b45238eca0fb66", "author": {"user": {"login": "helin24", "name": "Helin Shiah"}}, "url": "https://github.com/flutter/flutter-intellij/commit/10592e78baca6d6588c214b1d2b45238eca0fb66", "committedDate": "2020-12-10T23:35:51Z", "message": "Revert to DaemonShutdown class"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3037, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}