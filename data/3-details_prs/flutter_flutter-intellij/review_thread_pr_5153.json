{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQ2MTk5MDU0", "number": 5153, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxOTowNDozOVrOFJmXxA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMDoyMzozOFrOFJnRaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NjEwMTgwOnYy", "diffSide": "RIGHT", "path": "src/io/flutter/ProjectOpenActivity.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxOTowNDozOVrOIMAFNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxOTowNDozOVrOIMAFNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ1NTE1Nw==", "bodyText": "We usually great a getService method on classes instead that passes in a Project instance. That is a bit cleaner than calling getService on the project itself.", "url": "https://github.com/flutter/flutter-intellij/pull/5153#discussion_r549455157", "createdAt": "2020-12-28T19:04:39Z", "author": {"login": "jacob314"}, "path": "src/io/flutter/ProjectOpenActivity.java", "diffHunk": "@@ -40,12 +42,15 @@\n public class ProjectOpenActivity implements StartupActivity, DumbAware {\n   public static final ProjectType FLUTTER_PROJECT_TYPE = new ProjectType(\"io.flutter\");\n   private static final Logger LOG = Logger.getInstance(ProjectOpenActivity.class);\n+  private boolean indexingFinished = false;\n \n   public ProjectOpenActivity() {\n   }\n \n   @Override\n   public void runActivity(@NotNull Project project) {\n+    project.getService(TimeTracker.class).setProjectOpenTime();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e326aa4d6b56d893cb09e9efb238d65316133d9f"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NjEwNDk4OnYy", "diffSide": "RIGHT", "path": "src/io/flutter/ProjectOpenActivity.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxOTowNjoyNFrOIMAG_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMDoyMTowNlrOIMBVbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ1NTYxNA==", "bodyText": "Is this method ever actually called with (indexingFinished == true)?\nIf you are trying to catch an internal logic error, change this to\nassert(!indexingFinished) to clarify the intent.", "url": "https://github.com/flutter/flutter-intellij/pull/5153#discussion_r549455614", "createdAt": "2020-12-28T19:06:24Z", "author": {"login": "jacob314"}, "path": "src/io/flutter/ProjectOpenActivity.java", "diffHunk": "@@ -71,6 +76,21 @@ public void runActivity(@NotNull Project project) {\n     // TODO(messick) Re-enable this after dropping support for 2020.2.\n     //excludeAndroidFrameworkDetector(project);\n \n+    // Report time when indexing finishes.\n+    DumbService.getInstance(project).runWhenSmart(() -> {\n+      if (!indexingFinished) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e326aa4d6b56d893cb09e9efb238d65316133d9f"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ3NTY5Mg==", "bodyText": "Oh right. I don't need this, was thinking this might run multiple times but that's not the case.", "url": "https://github.com/flutter/flutter-intellij/pull/5153#discussion_r549475692", "createdAt": "2020-12-28T20:21:06Z", "author": {"login": "helin24"}, "path": "src/io/flutter/ProjectOpenActivity.java", "diffHunk": "@@ -71,6 +76,21 @@ public void runActivity(@NotNull Project project) {\n     // TODO(messick) Re-enable this after dropping support for 2020.2.\n     //excludeAndroidFrameworkDetector(project);\n \n+    // Report time when indexing finishes.\n+    DumbService.getInstance(project).runWhenSmart(() -> {\n+      if (!indexingFinished) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ1NTYxNA=="}, "originalCommit": {"oid": "e326aa4d6b56d893cb09e9efb238d65316133d9f"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NjEwNjg3OnYy", "diffSide": "RIGHT", "path": "src/io/flutter/analytics/TimeTracker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxOTowNzoxOFrOIMAH-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxOTowNzoxOFrOIMAH-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ1NTg2NQ==", "bodyText": "make this like the other services in the project that have a getInstance method that takes a project.", "url": "https://github.com/flutter/flutter-intellij/pull/5153#discussion_r549455865", "createdAt": "2020-12-28T19:07:18Z", "author": {"login": "jacob314"}, "path": "src/io/flutter/analytics/TimeTracker.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2020 The Chromium Authors. All rights reserved.\n+ * Use of this source code is governed by a BSD-style license that can be\n+ * found in the LICENSE file.\n+ */\n+package io.flutter.analytics;\n+\n+import com.intellij.openapi.components.Service;\n+import com.intellij.openapi.project.Project;\n+\n+@Service\n+public final class TimeTracker {\n+  private final Project project;\n+  private Long projectOpenTime;\n+\n+  public TimeTracker(Project project) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e326aa4d6b56d893cb09e9efb238d65316133d9f"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NjEwOTM5OnYy", "diffSide": "RIGHT", "path": "src/io/flutter/analytics/TimeTracker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxOTowODozMlrOIMAJUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxOTowODozMlrOIMAJUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ1NjIwOA==", "bodyText": "nit: avoid starting methods that aren't setters with the word set. Maybe call this: onProjectOpen()", "url": "https://github.com/flutter/flutter-intellij/pull/5153#discussion_r549456208", "createdAt": "2020-12-28T19:08:32Z", "author": {"login": "jacob314"}, "path": "src/io/flutter/analytics/TimeTracker.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2020 The Chromium Authors. All rights reserved.\n+ * Use of this source code is governed by a BSD-style license that can be\n+ * found in the LICENSE file.\n+ */\n+package io.flutter.analytics;\n+\n+import com.intellij.openapi.components.Service;\n+import com.intellij.openapi.project.Project;\n+\n+@Service\n+public final class TimeTracker {\n+  private final Project project;\n+  private Long projectOpenTime;\n+\n+  public TimeTracker(Project project) {\n+    this.project = project;\n+  }\n+\n+  public void setProjectOpenTime() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e326aa4d6b56d893cb09e9efb238d65316133d9f"}, "originalPosition": 20}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NjExMDk5OnYy", "diffSide": "RIGHT", "path": "src/io/flutter/analytics/TimeTracker.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxOTowOToxOVrOIMAKIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxOTowOToxOVrOIMAKIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ1NjQxOQ==", "bodyText": "Avoid methods that return boxed numbers. Add an assert that projectOpenTime != null and return a long.\nPerhaps return 0 if the project hasn't been opened.", "url": "https://github.com/flutter/flutter-intellij/pull/5153#discussion_r549456419", "createdAt": "2020-12-28T19:09:19Z", "author": {"login": "jacob314"}, "path": "src/io/flutter/analytics/TimeTracker.java", "diffHunk": "@@ -0,0 +1,30 @@\n+/*\n+ * Copyright 2020 The Chromium Authors. All rights reserved.\n+ * Use of this source code is governed by a BSD-style license that can be\n+ * found in the LICENSE file.\n+ */\n+package io.flutter.analytics;\n+\n+import com.intellij.openapi.components.Service;\n+import com.intellij.openapi.project.Project;\n+\n+@Service\n+public final class TimeTracker {\n+  private final Project project;\n+  private Long projectOpenTime;\n+\n+  public TimeTracker(Project project) {\n+    this.project = project;\n+  }\n+\n+  public void setProjectOpenTime() {\n+    this.projectOpenTime = System.currentTimeMillis();\n+  }\n+\n+  public Long millisSinceProjectOpen() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e326aa4d6b56d893cb09e9efb238d65316133d9f"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NjExMTk2OnYy", "diffSide": "RIGHT", "path": "src/io/flutter/dart/FlutterDartAnalysisServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxOTowOTo1MVrOIMAKtg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxOTowOTo1MVrOIMAKtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ1NjU2Ng==", "bodyText": "add a separate isProjectOpen instead of using a null Long to indicate unopened.", "url": "https://github.com/flutter/flutter-intellij/pull/5153#discussion_r549456566", "createdAt": "2020-12-28T19:09:51Z", "author": {"login": "jacob314"}, "path": "src/io/flutter/dart/FlutterDartAnalysisServer.java", "diffHunk": "@@ -77,7 +81,25 @@ public void serverConnected(String s) {\n           sendSubscriptions();\n         }\n       }\n+\n+      @Override\n+      public void computedErrors(String file, List<AnalysisError> errors) {\n+        if (!hasComputedErrors) {\n+          final Long millisSinceProjectOpen = project.getService(TimeTracker.class).millisSinceProjectOpen();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e326aa4d6b56d893cb09e9efb238d65316133d9f"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NjExMzExOnYy", "diffSide": "RIGHT", "path": "src/io/flutter/dart/FlutterDartAnalysisServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxOToxMDo0MFrOIMALaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQxOToxMDo0MFrOIMALaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ1Njc0Nw==", "bodyText": "if you have to convert the long to an int, return it as an int instead.", "url": "https://github.com/flutter/flutter-intellij/pull/5153#discussion_r549456747", "createdAt": "2020-12-28T19:10:40Z", "author": {"login": "jacob314"}, "path": "src/io/flutter/dart/FlutterDartAnalysisServer.java", "diffHunk": "@@ -77,7 +81,25 @@ public void serverConnected(String s) {\n           sendSubscriptions();\n         }\n       }\n+\n+      @Override\n+      public void computedErrors(String file, List<AnalysisError> errors) {\n+        if (!hasComputedErrors) {\n+          final Long millisSinceProjectOpen = project.getService(TimeTracker.class).millisSinceProjectOpen();\n+          if (millisSinceProjectOpen != null) {\n+            FlutterInitializer.getAnalytics().sendEventMetric(\n+              \"startup\",\n+              \"analysisComputedErrors\",\n+              millisSinceProjectOpen.intValue()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e326aa4d6b56d893cb09e9efb238d65316133d9f"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NjI0OTM5OnYy", "diffSide": "RIGHT", "path": "src/io/flutter/dart/FlutterDartAnalysisServer.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMDoyMzozOFrOIMBXtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQyMDoyMzozOFrOIMBXtA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTQ3NjI3Ng==", "bodyText": "use TimeTracker.getInstance here as well.", "url": "https://github.com/flutter/flutter-intellij/pull/5153#discussion_r549476276", "createdAt": "2020-12-28T20:23:38Z", "author": {"login": "jacob314"}, "path": "src/io/flutter/dart/FlutterDartAnalysisServer.java", "diffHunk": "@@ -84,22 +84,18 @@ public void serverConnected(String s) {\n \n       @Override\n       public void computedErrors(String file, List<AnalysisError> errors) {\n-        if (!hasComputedErrors) {\n-          final Long millisSinceProjectOpen = project.getService(TimeTracker.class).millisSinceProjectOpen();\n-          if (millisSinceProjectOpen != null) {\n-            FlutterInitializer.getAnalytics().sendEventMetric(\n-              \"startup\",\n-              \"analysisComputedErrors\",\n-              millisSinceProjectOpen.intValue()\n-            );\n-          }\n+        if (!hasComputedErrors && project.isOpen()) {\n+          FlutterInitializer.getAnalytics().sendEventMetric(\n+            \"startup\",\n+            \"analysisComputedErrors\",\n+            project.getService(TimeTracker.class).millisSinceProjectOpen()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d9a1bccc9dc6a9c714e303a16494d1cd8208628a"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 429, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}