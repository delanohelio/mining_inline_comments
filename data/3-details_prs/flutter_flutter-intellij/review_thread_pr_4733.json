{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyMjk3NTc2", "number": 4733, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjoyNTo0OVrOEanGTg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODoyOTo1NFrOEaqAlQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MzM5MDIyOnYy", "diffSide": "RIGHT", "path": "src/io/flutter/devtools/DevToolsManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxNjoyNTo0OVrOHEJfyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODoyODoxNVrOHEOHAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDExMTk0Ng==", "bodyText": "comment why we do this for Bazel only for now (non-bazel projects currently have a flutter daemon with an older version of devtools).", "url": "https://github.com/flutter/flutter-intellij/pull/4733#discussion_r474111946", "createdAt": "2020-08-20T16:25:49Z", "author": {"login": "jacob314"}, "path": "src/io/flutter/devtools/DevToolsManager.java", "diffHunk": "@@ -259,26 +260,47 @@ private void openBrowserImpl(String uri, String screen) {\n       devToolsInstance.openBrowserAndConnect(uri, screen);\n     }\n     else {\n-      @Nullable final OSProcessHandler handler =\n-        isBazel(project) ? getProcessHandlerForBazel() : getProcessHandlerForPub();\n+      if (isBazel(project)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d701273bf35830e62db0d94ebb9643c0e2de3355"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE4NzUyMQ==", "bodyText": "one more thing. we also don't do any flutter version checking so this wouldn't be safe externally as stable probably doesn't support this daemon api.", "url": "https://github.com/flutter/flutter-intellij/pull/4733#discussion_r474187521", "createdAt": "2020-08-20T18:28:15Z", "author": {"login": "jacob314"}, "path": "src/io/flutter/devtools/DevToolsManager.java", "diffHunk": "@@ -259,26 +260,47 @@ private void openBrowserImpl(String uri, String screen) {\n       devToolsInstance.openBrowserAndConnect(uri, screen);\n     }\n     else {\n-      @Nullable final OSProcessHandler handler =\n-        isBazel(project) ? getProcessHandlerForBazel() : getProcessHandlerForPub();\n+      if (isBazel(project)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDExMTk0Ng=="}, "originalCommit": {"oid": "d701273bf35830e62db0d94ebb9643c0e2de3355"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Mzg0ODYzOnYy", "diffSide": "RIGHT", "path": "src/io/flutter/devtools/DevToolsManager.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODoyNDo1OFrOHEN_yg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODoyNDo1OFrOHEN_yg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE4NTY3NA==", "bodyText": "should we report an error here? We weren't able to open devtools as the app closed.", "url": "https://github.com/flutter/flutter-intellij/pull/4733#discussion_r474185674", "createdAt": "2020-08-20T18:24:58Z", "author": {"login": "jacob314"}, "path": "src/io/flutter/devtools/DevToolsManager.java", "diffHunk": "@@ -259,26 +260,49 @@ private void openBrowserImpl(String uri, String screen) {\n       devToolsInstance.openBrowserAndConnect(uri, screen);\n     }\n     else {\n-      @Nullable final OSProcessHandler handler =\n-        isBazel(project) ? getProcessHandlerForBazel() : getProcessHandlerForPub();\n-\n-      if (handler != null) {\n-        // TODO(devoncarew) Add a Task.Backgroundable here; \"Starting devtools...\"\n-\n-        // start the server\n-        DevToolsInstance.startServer(handler, instance -> {\n-          devToolsInstance = instance;\n+      // For internal users, we can connect to the DevTools server started by flutter daemon. For external users, the flutter daemon has an\n+      // older version of DevTools, so we launch the server using `pub global run` instead.\n+      if (isBazel(project)) {\n+        final Optional<FlutterApp> first =\n+          FlutterApp.allFromProjectProcess(project).stream().filter((FlutterApp app) -> app.getProject() == project).findFirst();\n+\n+        if (!first.isPresent()) {\n+          return;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "794ae358c34c8132beee9c38292dba01d7e45473"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Mzg1MTc4OnYy", "diffSide": "RIGHT", "path": "src/io/flutter/devtools/DevToolsManager.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODoyNTo0OFrOHEOBqA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMDo0NzoxNFrOHESuTQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE4NjE1Mg==", "bodyText": "at each async boundary we probably need to make sure the project hasn't been closed in whcih case we should quietly cancel the request.", "url": "https://github.com/flutter/flutter-intellij/pull/4733#discussion_r474186152", "createdAt": "2020-08-20T18:25:48Z", "author": {"login": "jacob314"}, "path": "src/io/flutter/devtools/DevToolsManager.java", "diffHunk": "@@ -259,26 +260,49 @@ private void openBrowserImpl(String uri, String screen) {\n       devToolsInstance.openBrowserAndConnect(uri, screen);\n     }\n     else {\n-      @Nullable final OSProcessHandler handler =\n-        isBazel(project) ? getProcessHandlerForBazel() : getProcessHandlerForPub();\n-\n-      if (handler != null) {\n-        // TODO(devoncarew) Add a Task.Backgroundable here; \"Starting devtools...\"\n-\n-        // start the server\n-        DevToolsInstance.startServer(handler, instance -> {\n-          devToolsInstance = instance;\n+      // For internal users, we can connect to the DevTools server started by flutter daemon. For external users, the flutter daemon has an\n+      // older version of DevTools, so we launch the server using `pub global run` instead.\n+      if (isBazel(project)) {\n+        final Optional<FlutterApp> first =\n+          FlutterApp.allFromProjectProcess(project).stream().filter((FlutterApp app) -> app.getProject() == project).findFirst();\n+\n+        if (!first.isPresent()) {\n+          return;\n+        }\n \n-          devToolsInstance.openBrowserAndConnect(uri, screen);\n-        }, () -> {\n-          // Listen for closing; null out the devToolsInstance.\n-          devToolsInstance = null;\n+        first.get().serveDevTools().thenAccept((Pair<String, Integer> hostAndPort) -> {\n+          if (hostAndPort == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "794ae358c34c8132beee9c38292dba01d7e45473"}, "originalPosition": 52}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI2MzExNw==", "bodyText": "This means a check of whether someone has closed down the IntelliJ project? And we probably should also check if the app has been disconnected?", "url": "https://github.com/flutter/flutter-intellij/pull/4733#discussion_r474263117", "createdAt": "2020-08-20T20:47:14Z", "author": {"login": "helin24"}, "path": "src/io/flutter/devtools/DevToolsManager.java", "diffHunk": "@@ -259,26 +260,49 @@ private void openBrowserImpl(String uri, String screen) {\n       devToolsInstance.openBrowserAndConnect(uri, screen);\n     }\n     else {\n-      @Nullable final OSProcessHandler handler =\n-        isBazel(project) ? getProcessHandlerForBazel() : getProcessHandlerForPub();\n-\n-      if (handler != null) {\n-        // TODO(devoncarew) Add a Task.Backgroundable here; \"Starting devtools...\"\n-\n-        // start the server\n-        DevToolsInstance.startServer(handler, instance -> {\n-          devToolsInstance = instance;\n+      // For internal users, we can connect to the DevTools server started by flutter daemon. For external users, the flutter daemon has an\n+      // older version of DevTools, so we launch the server using `pub global run` instead.\n+      if (isBazel(project)) {\n+        final Optional<FlutterApp> first =\n+          FlutterApp.allFromProjectProcess(project).stream().filter((FlutterApp app) -> app.getProject() == project).findFirst();\n+\n+        if (!first.isPresent()) {\n+          return;\n+        }\n \n-          devToolsInstance.openBrowserAndConnect(uri, screen);\n-        }, () -> {\n-          // Listen for closing; null out the devToolsInstance.\n-          devToolsInstance = null;\n+        first.get().serveDevTools().thenAccept((Pair<String, Integer> hostAndPort) -> {\n+          if (hostAndPort == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE4NjE1Mg=="}, "originalCommit": {"oid": "794ae358c34c8132beee9c38292dba01d7e45473"}, "originalPosition": 52}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Mzg1NjIzOnYy", "diffSide": "RIGHT", "path": "src/io/flutter/devtools/DevToolsManager.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODoyNjo1N1rOHEOEVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQyMTozMjozNVrOHEUCqg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE4NjgzOQ==", "bodyText": "use your username for new TODOs", "url": "https://github.com/flutter/flutter-intellij/pull/4733#discussion_r474186839", "createdAt": "2020-08-20T18:26:57Z", "author": {"login": "jacob314"}, "path": "src/io/flutter/devtools/DevToolsManager.java", "diffHunk": "@@ -259,26 +260,49 @@ private void openBrowserImpl(String uri, String screen) {\n       devToolsInstance.openBrowserAndConnect(uri, screen);\n     }\n     else {\n-      @Nullable final OSProcessHandler handler =\n-        isBazel(project) ? getProcessHandlerForBazel() : getProcessHandlerForPub();\n-\n-      if (handler != null) {\n-        // TODO(devoncarew) Add a Task.Backgroundable here; \"Starting devtools...\"\n-\n-        // start the server\n-        DevToolsInstance.startServer(handler, instance -> {\n-          devToolsInstance = instance;\n+      // For internal users, we can connect to the DevTools server started by flutter daemon. For external users, the flutter daemon has an\n+      // older version of DevTools, so we launch the server using `pub global run` instead.\n+      if (isBazel(project)) {\n+        final Optional<FlutterApp> first =\n+          FlutterApp.allFromProjectProcess(project).stream().filter((FlutterApp app) -> app.getProject() == project).findFirst();\n+\n+        if (!first.isPresent()) {\n+          return;\n+        }\n \n-          devToolsInstance.openBrowserAndConnect(uri, screen);\n-        }, () -> {\n-          // Listen for closing; null out the devToolsInstance.\n-          devToolsInstance = null;\n+        first.get().serveDevTools().thenAccept((Pair<String, Integer> hostAndPort) -> {\n+          if (hostAndPort == null) {\n+            @Nullable final OSProcessHandler handler = getProcessHandlerForBazel();\n+            startDevToolsServerAndConnect(handler, uri, screen);\n+          } else {\n+            devToolsInstance = new DevToolsInstance(hostAndPort.first, hostAndPort.second);\n+            devToolsInstance.openBrowserAndConnect(uri, screen);\n+          }\n         });\n+      } else {\n+        @Nullable final OSProcessHandler handler = getProcessHandlerForPub();\n+        startDevToolsServerAndConnect(handler, uri, screen);\n       }\n-      else {\n-        // TODO(devoncarew): We should provide feedback to callers that the open browser call failed.\n+    }\n+  }\n+\n+  private void startDevToolsServerAndConnect(OSProcessHandler handler, String uri, String screen) {\n+    if (handler != null) {\n+      // TODO(devoncarew) Add a Task.Backgroundable here; \"Starting devtools...\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "794ae358c34c8132beee9c38292dba01d7e45473"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI2NTIxOQ==", "bodyText": "I didn't want to put my name here since I just moved this block of code without changes, do you think this is enough of a change where I should take ownership of the TODO?", "url": "https://github.com/flutter/flutter-intellij/pull/4733#discussion_r474265219", "createdAt": "2020-08-20T20:51:28Z", "author": {"login": "helin24"}, "path": "src/io/flutter/devtools/DevToolsManager.java", "diffHunk": "@@ -259,26 +260,49 @@ private void openBrowserImpl(String uri, String screen) {\n       devToolsInstance.openBrowserAndConnect(uri, screen);\n     }\n     else {\n-      @Nullable final OSProcessHandler handler =\n-        isBazel(project) ? getProcessHandlerForBazel() : getProcessHandlerForPub();\n-\n-      if (handler != null) {\n-        // TODO(devoncarew) Add a Task.Backgroundable here; \"Starting devtools...\"\n-\n-        // start the server\n-        DevToolsInstance.startServer(handler, instance -> {\n-          devToolsInstance = instance;\n+      // For internal users, we can connect to the DevTools server started by flutter daemon. For external users, the flutter daemon has an\n+      // older version of DevTools, so we launch the server using `pub global run` instead.\n+      if (isBazel(project)) {\n+        final Optional<FlutterApp> first =\n+          FlutterApp.allFromProjectProcess(project).stream().filter((FlutterApp app) -> app.getProject() == project).findFirst();\n+\n+        if (!first.isPresent()) {\n+          return;\n+        }\n \n-          devToolsInstance.openBrowserAndConnect(uri, screen);\n-        }, () -> {\n-          // Listen for closing; null out the devToolsInstance.\n-          devToolsInstance = null;\n+        first.get().serveDevTools().thenAccept((Pair<String, Integer> hostAndPort) -> {\n+          if (hostAndPort == null) {\n+            @Nullable final OSProcessHandler handler = getProcessHandlerForBazel();\n+            startDevToolsServerAndConnect(handler, uri, screen);\n+          } else {\n+            devToolsInstance = new DevToolsInstance(hostAndPort.first, hostAndPort.second);\n+            devToolsInstance.openBrowserAndConnect(uri, screen);\n+          }\n         });\n+      } else {\n+        @Nullable final OSProcessHandler handler = getProcessHandlerForPub();\n+        startDevToolsServerAndConnect(handler, uri, screen);\n       }\n-      else {\n-        // TODO(devoncarew): We should provide feedback to callers that the open browser call failed.\n+    }\n+  }\n+\n+  private void startDevToolsServerAndConnect(OSProcessHandler handler, String uri, String screen) {\n+    if (handler != null) {\n+      // TODO(devoncarew) Add a Task.Backgroundable here; \"Starting devtools...\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE4NjgzOQ=="}, "originalCommit": {"oid": "794ae358c34c8132beee9c38292dba01d7e45473"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDI4NDcxNA==", "bodyText": "you did the right thing. I saw the lower one was a move but I didn't scroll up high enough to spot this one.", "url": "https://github.com/flutter/flutter-intellij/pull/4733#discussion_r474284714", "createdAt": "2020-08-20T21:32:35Z", "author": {"login": "jacob314"}, "path": "src/io/flutter/devtools/DevToolsManager.java", "diffHunk": "@@ -259,26 +260,49 @@ private void openBrowserImpl(String uri, String screen) {\n       devToolsInstance.openBrowserAndConnect(uri, screen);\n     }\n     else {\n-      @Nullable final OSProcessHandler handler =\n-        isBazel(project) ? getProcessHandlerForBazel() : getProcessHandlerForPub();\n-\n-      if (handler != null) {\n-        // TODO(devoncarew) Add a Task.Backgroundable here; \"Starting devtools...\"\n-\n-        // start the server\n-        DevToolsInstance.startServer(handler, instance -> {\n-          devToolsInstance = instance;\n+      // For internal users, we can connect to the DevTools server started by flutter daemon. For external users, the flutter daemon has an\n+      // older version of DevTools, so we launch the server using `pub global run` instead.\n+      if (isBazel(project)) {\n+        final Optional<FlutterApp> first =\n+          FlutterApp.allFromProjectProcess(project).stream().filter((FlutterApp app) -> app.getProject() == project).findFirst();\n+\n+        if (!first.isPresent()) {\n+          return;\n+        }\n \n-          devToolsInstance.openBrowserAndConnect(uri, screen);\n-        }, () -> {\n-          // Listen for closing; null out the devToolsInstance.\n-          devToolsInstance = null;\n+        first.get().serveDevTools().thenAccept((Pair<String, Integer> hostAndPort) -> {\n+          if (hostAndPort == null) {\n+            @Nullable final OSProcessHandler handler = getProcessHandlerForBazel();\n+            startDevToolsServerAndConnect(handler, uri, screen);\n+          } else {\n+            devToolsInstance = new DevToolsInstance(hostAndPort.first, hostAndPort.second);\n+            devToolsInstance.openBrowserAndConnect(uri, screen);\n+          }\n         });\n+      } else {\n+        @Nullable final OSProcessHandler handler = getProcessHandlerForPub();\n+        startDevToolsServerAndConnect(handler, uri, screen);\n       }\n-      else {\n-        // TODO(devoncarew): We should provide feedback to callers that the open browser call failed.\n+    }\n+  }\n+\n+  private void startDevToolsServerAndConnect(OSProcessHandler handler, String uri, String screen) {\n+    if (handler != null) {\n+      // TODO(devoncarew) Add a Task.Backgroundable here; \"Starting devtools...\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE4NjgzOQ=="}, "originalCommit": {"oid": "794ae358c34c8132beee9c38292dba01d7e45473"}, "originalPosition": 71}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2Mzg2NzA5OnYy", "diffSide": "RIGHT", "path": "src/io/flutter/run/daemon/DaemonApi.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODoyOTo1NFrOHEOK8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxODoyOTo1NFrOHEOK8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NDE4ODUzMA==", "bodyText": "nit: create a little Value class for this instead of using Pair.\nWith Pair it isn't obvious what the two fields are but it would be really obvious with a simple data class with a host and port field.", "url": "https://github.com/flutter/flutter-intellij/pull/4733#discussion_r474188530", "createdAt": "2020-08-20T18:29:54Z", "author": {"login": "jacob314"}, "path": "src/io/flutter/run/daemon/DaemonApi.java", "diffHunk": "@@ -80,6 +81,10 @@\n     return send(\"app.stop\", new AppStop(appId));\n   }\n \n+  CompletableFuture<Pair<String, Integer>> devToolsServe() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "794ae358c34c8132beee9c38292dba01d7e45473"}, "originalPosition": 12}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 506, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}