{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIwMzkwMTc4", "number": 4558, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNjoyMzoyNFrOD-S5jw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNjoyNDozOVrOD-S7UA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NjQ3OTUxOnYy", "diffSide": "RIGHT", "path": "tool/plugin/lib/edit.dart", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNjoyMzoyNFrOGYTzyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNjozMTo1N1rOGYUIpw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0MzU2MQ==", "bodyText": "this might format better if you end the version param w/ a trailing comma: version: '4.1',),", "url": "https://github.com/flutter/flutter-intellij/pull/4558#discussion_r428143561", "createdAt": "2020-05-20T16:23:24Z", "author": {"login": "devoncarew"}, "path": "tool/plugin/lib/edit.dart", "diffHunk": "@@ -4,14 +4,271 @@\n  * found in the LICENSE file.\n  */\n \n-//import 'dart:async';\n-//import 'dart:convert';\n-//import 'dart:io';\n+import 'dart:async';\n+import 'dart:io';\n \n-//import 'package:path/path.dart' as p;\n+import 'build_spec.dart';\n+import 'util.dart';\n \n-//import 'build_spec.dart';\n-//import 'globals.dart';\n+Set<EditCommand> appliedEditCommands = {};\n \n-class Edit {\n-}\n\\ No newline at end of file\n+void checkAndClearAppliedEditCommands() {\n+  if (appliedEditCommands.length != editCommands.length) {\n+    var commands = <EditCommand>{};\n+    commands.addAll(editCommands);\n+    commands.removeAll(appliedEditCommands);\n+    separator(\"UNUSED EditCommand\");\n+    commands.forEach((cmd) => log(cmd.toString()));\n+  }\n+  appliedEditCommands.clear();\n+}\n+\n+List<EditCommand> editCommands = [\n+  EditAndroidModuleLibraryManager(),\n+  EditFlutterProjectSystem(),\n+  EditFlutterDescriptionProvider(),\n+  Subst(\n+      path: 'flutter-studio/src/io/flutter/project/FlutterProjectSystem.java',\n+      initial:\n+          'gradleProjectSystem.getAndroidFacetsWithPackageName(project, packageName, scope)',\n+      replacement: 'Collections.emptyList()',\n+      version: '4.0'),\n+  Subst(\n+      path:\n+          'flutter-studio/src/io/flutter/actions/FlutterShowStructureSettingsAction.java',\n+      initial: 'import com.android.tools.idea.gradle.structure.actions.AndroidShowStructureSettingsAction;',\n+      replacement: 'import com.android.tools.idea.gradle.actions.AndroidShowStructureSettingsAction;',\n+      versions: ['3.6', '4.0', '2020.1']),\n+  Subst(\n+      path: 'flutter-studio/src/io/flutter/actions/OpenAndroidModule.java',\n+      initial: 'findGradleTarget',\n+      replacement: 'findImportTarget',\n+      versions: ['3.6', '4.0', '2020.1']),\n+  Subst(\n+      path: 'src/io/flutter/utils/AndroidUtils.java',\n+      initial:\n+          'import com.android.tools.idea.gradle.dsl.parser.BuildModelContext;',\n+      replacement:\n+          'import com.android.tools.idea.gradle.dsl.model.BuildModelContext;',\n+      version: '4.1'),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc071a649df6d3b87ab689020a08a23a86c752e7"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0ODkwMw==", "bodyText": "Yes, it looks a little better, thanks.", "url": "https://github.com/flutter/flutter-intellij/pull/4558#discussion_r428148903", "createdAt": "2020-05-20T16:31:57Z", "author": {"login": "stevemessick"}, "path": "tool/plugin/lib/edit.dart", "diffHunk": "@@ -4,14 +4,271 @@\n  * found in the LICENSE file.\n  */\n \n-//import 'dart:async';\n-//import 'dart:convert';\n-//import 'dart:io';\n+import 'dart:async';\n+import 'dart:io';\n \n-//import 'package:path/path.dart' as p;\n+import 'build_spec.dart';\n+import 'util.dart';\n \n-//import 'build_spec.dart';\n-//import 'globals.dart';\n+Set<EditCommand> appliedEditCommands = {};\n \n-class Edit {\n-}\n\\ No newline at end of file\n+void checkAndClearAppliedEditCommands() {\n+  if (appliedEditCommands.length != editCommands.length) {\n+    var commands = <EditCommand>{};\n+    commands.addAll(editCommands);\n+    commands.removeAll(appliedEditCommands);\n+    separator(\"UNUSED EditCommand\");\n+    commands.forEach((cmd) => log(cmd.toString()));\n+  }\n+  appliedEditCommands.clear();\n+}\n+\n+List<EditCommand> editCommands = [\n+  EditAndroidModuleLibraryManager(),\n+  EditFlutterProjectSystem(),\n+  EditFlutterDescriptionProvider(),\n+  Subst(\n+      path: 'flutter-studio/src/io/flutter/project/FlutterProjectSystem.java',\n+      initial:\n+          'gradleProjectSystem.getAndroidFacetsWithPackageName(project, packageName, scope)',\n+      replacement: 'Collections.emptyList()',\n+      version: '4.0'),\n+  Subst(\n+      path:\n+          'flutter-studio/src/io/flutter/actions/FlutterShowStructureSettingsAction.java',\n+      initial: 'import com.android.tools.idea.gradle.structure.actions.AndroidShowStructureSettingsAction;',\n+      replacement: 'import com.android.tools.idea.gradle.actions.AndroidShowStructureSettingsAction;',\n+      versions: ['3.6', '4.0', '2020.1']),\n+  Subst(\n+      path: 'flutter-studio/src/io/flutter/actions/OpenAndroidModule.java',\n+      initial: 'findGradleTarget',\n+      replacement: 'findImportTarget',\n+      versions: ['3.6', '4.0', '2020.1']),\n+  Subst(\n+      path: 'src/io/flutter/utils/AndroidUtils.java',\n+      initial:\n+          'import com.android.tools.idea.gradle.dsl.parser.BuildModelContext;',\n+      replacement:\n+          'import com.android.tools.idea.gradle.dsl.model.BuildModelContext;',\n+      version: '4.1'),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0MzU2MQ=="}, "originalCommit": {"oid": "dc071a649df6d3b87ab689020a08a23a86c752e7"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY2NjQ4NDAwOnYy", "diffSide": "RIGHT", "path": "tool/plugin/lib/edit.dart", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNjoyNDozOVrOGYT22A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQxNjozMjowMFrOGYUIww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0NDM0NA==", "bodyText": "this could use the expression shorthand: ==>", "url": "https://github.com/flutter/flutter-intellij/pull/4558#discussion_r428144344", "createdAt": "2020-05-20T16:24:39Z", "author": {"login": "devoncarew"}, "path": "tool/plugin/lib/edit.dart", "diffHunk": "@@ -4,14 +4,271 @@\n  * found in the LICENSE file.\n  */\n \n-//import 'dart:async';\n-//import 'dart:convert';\n-//import 'dart:io';\n+import 'dart:async';\n+import 'dart:io';\n \n-//import 'package:path/path.dart' as p;\n+import 'build_spec.dart';\n+import 'util.dart';\n \n-//import 'build_spec.dart';\n-//import 'globals.dart';\n+Set<EditCommand> appliedEditCommands = {};\n \n-class Edit {\n-}\n\\ No newline at end of file\n+void checkAndClearAppliedEditCommands() {\n+  if (appliedEditCommands.length != editCommands.length) {\n+    var commands = <EditCommand>{};\n+    commands.addAll(editCommands);\n+    commands.removeAll(appliedEditCommands);\n+    separator(\"UNUSED EditCommand\");\n+    commands.forEach((cmd) => log(cmd.toString()));\n+  }\n+  appliedEditCommands.clear();\n+}\n+\n+List<EditCommand> editCommands = [\n+  EditAndroidModuleLibraryManager(),\n+  EditFlutterProjectSystem(),\n+  EditFlutterDescriptionProvider(),\n+  Subst(\n+      path: 'flutter-studio/src/io/flutter/project/FlutterProjectSystem.java',\n+      initial:\n+          'gradleProjectSystem.getAndroidFacetsWithPackageName(project, packageName, scope)',\n+      replacement: 'Collections.emptyList()',\n+      version: '4.0'),\n+  Subst(\n+      path:\n+          'flutter-studio/src/io/flutter/actions/FlutterShowStructureSettingsAction.java',\n+      initial: 'import com.android.tools.idea.gradle.structure.actions.AndroidShowStructureSettingsAction;',\n+      replacement: 'import com.android.tools.idea.gradle.actions.AndroidShowStructureSettingsAction;',\n+      versions: ['3.6', '4.0', '2020.1']),\n+  Subst(\n+      path: 'flutter-studio/src/io/flutter/actions/OpenAndroidModule.java',\n+      initial: 'findGradleTarget',\n+      replacement: 'findImportTarget',\n+      versions: ['3.6', '4.0', '2020.1']),\n+  Subst(\n+      path: 'src/io/flutter/utils/AndroidUtils.java',\n+      initial:\n+          'import com.android.tools.idea.gradle.dsl.parser.BuildModelContext;',\n+      replacement:\n+          'import com.android.tools.idea.gradle.dsl.model.BuildModelContext;',\n+      version: '4.1'),\n+];\n+\n+// Used to test checkAndClearAppliedEditCommands()\n+class Unused extends EditCommand {\n+  @override\n+  String get path => 'unused';\n+\n+  @override\n+  String convert(BuildSpec spec) {\n+    return null;\n+  }\n+}\n+\n+class EditAndroidModuleLibraryManager extends EditCommand {\n+  @override\n+  String get path =>\n+      'flutter-studio/src/io/flutter/android/AndroidModuleLibraryManager.java';\n+\n+  @override\n+  String convert(BuildSpec spec) {\n+    if (spec.version.startsWith('3.6')) {\n+      var processedFile, source;\n+      processedFile = File(\n+          'flutter-studio/src/io/flutter/android/AndroidModuleLibraryManager.java');\n+      source = processedFile.readAsStringSync();\n+      var original = source;\n+      source = source.replaceAll(\n+        'super(filePath',\n+        'super(filePath.toString()',\n+      );\n+      // Starting with 3.6 we need to call a simplified init().\n+      // This is where the $PROJECT_FILE$ macro is defined, #registerComponents.\n+      source = source.replaceAll(\n+        'getStateStore().setPath(path',\n+        'getStateStore().setPath(path.toString()',\n+      );\n+      processedFile.writeAsStringSync(source);\n+      return original;\n+    } else {\n+      return null;\n+    }\n+  }\n+}\n+\n+class EditFlutterProjectSystem extends EditCommand {\n+  @override\n+  String get path =>\n+      'flutter-studio/src/io/flutter/project/FlutterProjectSystem.java';\n+\n+  @override\n+  String convert(BuildSpec spec) {\n+    if (!spec.version.startsWith('4.')) {\n+      var processedFile, source;\n+      processedFile = File(\n+          'flutter-studio/src/io/flutter/project/FlutterProjectSystem.java');\n+      source = processedFile.readAsStringSync();\n+      var original = source;\n+      source = source.replaceAll(\n+        'import com.android.tools.idea.projectsystem.SourceProvidersFactory;',\n+        '',\n+      );\n+      source = source.replaceAll(' SourceProvidersFactory ', ' Object ');\n+      source = source.replaceAll(\n+        'gradleProjectSystem.getSourceProvidersFactory()',\n+        'new Object()',\n+      );\n+      source = source.replaceAll(\n+        'gradleProjectSystem.getAndroidFacetsWithPackageName(project, packageName, scope)',\n+        'Collections.emptyList()',\n+      );\n+      if (spec.version.startsWith('3.6')) {\n+        source = source.replaceAll(\n+          'gradleProjectSystem.getSubmodules()',\n+          'new java.util.ArrayList()',\n+        );\n+      }\n+      processedFile.writeAsStringSync(source);\n+      return original;\n+    } else {\n+      return null;\n+    }\n+  }\n+}\n+\n+class EditFlutterDescriptionProvider extends EditCommand {\n+  @override\n+  String get path =>\n+      'flutter-studio/src/io/flutter/module/FlutterDescriptionProvider.java';\n+\n+  @override\n+  String convert(BuildSpec spec) {\n+    if (!spec.version.startsWith('4.')) {\n+      var processedFile, source;\n+      processedFile = File(\n+          'flutter-studio/src/io/flutter/module/FlutterDescriptionProvider.java');\n+      source = processedFile.readAsStringSync();\n+      var original = source;\n+      source = source.replaceAll(\n+        'import com.android.tools.idea.npw.model.ProjectSyncInvoker',\n+        'import com.android.tools.idea.npw.model.NewModuleModel',\n+      );\n+      source = source.replaceAll(\n+        'createStep(@NotNull Project model, @NotNull ProjectSyncInvoker invoker, String parent)',\n+        'createStep(@NotNull NewModuleModel model)',\n+      );\n+      source = source.replaceAll(\n+        'FlutterProjectModel model(@NotNull Project project,',\n+        'FlutterProjectModel model(@NotNull NewModuleModel project,',\n+      );\n+      source = source.replaceAll(\n+        'mySharedModel.getValue().project().setValue(project);',\n+        'mySharedModel.getValue().project().setValue(project.getProject().getValue());',\n+      );\n+      processedFile.writeAsStringSync(source);\n+      return original;\n+    } else {\n+      return null;\n+    }\n+  }\n+}\n+\n+/// Apply all the editCommands applicable to a given BuildSpec.\n+Future<int> applyEdits(BuildSpec spec, Function compileFn) async {\n+  // Handle skipped files.\n+  for (String file in spec.filesToSkip) {\n+    var entity =\n+        FileSystemEntity.isFileSync(file) ? File(file) : Directory(file);\n+    if (entity.existsSync()) {\n+      await entity.rename('$file~');\n+      if (entity is File) {\n+        var stubFile = File('${file}_stub');\n+        if (stubFile.existsSync()) {\n+          await stubFile.copy('$file');\n+        }\n+      }\n+    }\n+  }\n+\n+  var edited = <EditCommand, String>{};\n+  try {\n+    editCommands.forEach((edit) {\n+      var source = edit.convert(spec);\n+      if (source != null) {\n+        edited[edit] = source;\n+        appliedEditCommands.add(edit);\n+      }\n+    });\n+\n+    return await compileFn.call();\n+  } finally {\n+    // Restore sources.\n+    edited.forEach((edit, source) {\n+      log('Restoring ${edit.path}');\n+      edit.restore(source);\n+    });\n+\n+    // Restore skipped files.\n+    for (var file in spec.filesToSkip) {\n+      var name = '$file~';\n+      var entity =\n+          FileSystemEntity.isFileSync(name) ? File(name) : Directory(name);\n+      if (entity.existsSync()) {\n+        await entity.rename(file);\n+      }\n+    }\n+  }\n+}\n+\n+/// Make some changes to a source file prior to compiling for a specific IDE.\n+abstract class EditCommand {\n+  String convert(BuildSpec spec);\n+\n+  void restore(String source) {\n+    var processedFile = File(path);\n+    processedFile.writeAsStringSync(source);\n+  }\n+\n+  String get path;\n+}\n+\n+/// Single substitution in a file for one or more IDE versions.\n+class Subst extends EditCommand {\n+  @override\n+  String path;\n+  String initial;\n+  String replacement;\n+  List<String> versions;\n+\n+  Subst({this.versions, this.initial, this.replacement, this.path, version})\n+      : assert(initial != null),\n+        assert(replacement != null),\n+        assert(path != null) {\n+    if (version != null) {\n+      // Disallow both version and versions keywords.\n+      assert(versions == null);\n+      versions = [version];\n+    }\n+  }\n+\n+  @override\n+  String convert(BuildSpec spec) {\n+    if (versionMatches(spec)) {\n+      var processedFile = File(path);\n+      var source = processedFile.readAsStringSync();\n+      var original = source;\n+      source = source.replaceAll(initial, replacement);\n+      processedFile.writeAsStringSync(source);\n+      return original;\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  String toString() {\n+    return \"Subst(path: $path, versions: $versions)\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "dc071a649df6d3b87ab689020a08a23a86c752e7"}, "originalPosition": 274}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0ODkzMQ==", "bodyText": "Done!", "url": "https://github.com/flutter/flutter-intellij/pull/4558#discussion_r428148931", "createdAt": "2020-05-20T16:32:00Z", "author": {"login": "stevemessick"}, "path": "tool/plugin/lib/edit.dart", "diffHunk": "@@ -4,14 +4,271 @@\n  * found in the LICENSE file.\n  */\n \n-//import 'dart:async';\n-//import 'dart:convert';\n-//import 'dart:io';\n+import 'dart:async';\n+import 'dart:io';\n \n-//import 'package:path/path.dart' as p;\n+import 'build_spec.dart';\n+import 'util.dart';\n \n-//import 'build_spec.dart';\n-//import 'globals.dart';\n+Set<EditCommand> appliedEditCommands = {};\n \n-class Edit {\n-}\n\\ No newline at end of file\n+void checkAndClearAppliedEditCommands() {\n+  if (appliedEditCommands.length != editCommands.length) {\n+    var commands = <EditCommand>{};\n+    commands.addAll(editCommands);\n+    commands.removeAll(appliedEditCommands);\n+    separator(\"UNUSED EditCommand\");\n+    commands.forEach((cmd) => log(cmd.toString()));\n+  }\n+  appliedEditCommands.clear();\n+}\n+\n+List<EditCommand> editCommands = [\n+  EditAndroidModuleLibraryManager(),\n+  EditFlutterProjectSystem(),\n+  EditFlutterDescriptionProvider(),\n+  Subst(\n+      path: 'flutter-studio/src/io/flutter/project/FlutterProjectSystem.java',\n+      initial:\n+          'gradleProjectSystem.getAndroidFacetsWithPackageName(project, packageName, scope)',\n+      replacement: 'Collections.emptyList()',\n+      version: '4.0'),\n+  Subst(\n+      path:\n+          'flutter-studio/src/io/flutter/actions/FlutterShowStructureSettingsAction.java',\n+      initial: 'import com.android.tools.idea.gradle.structure.actions.AndroidShowStructureSettingsAction;',\n+      replacement: 'import com.android.tools.idea.gradle.actions.AndroidShowStructureSettingsAction;',\n+      versions: ['3.6', '4.0', '2020.1']),\n+  Subst(\n+      path: 'flutter-studio/src/io/flutter/actions/OpenAndroidModule.java',\n+      initial: 'findGradleTarget',\n+      replacement: 'findImportTarget',\n+      versions: ['3.6', '4.0', '2020.1']),\n+  Subst(\n+      path: 'src/io/flutter/utils/AndroidUtils.java',\n+      initial:\n+          'import com.android.tools.idea.gradle.dsl.parser.BuildModelContext;',\n+      replacement:\n+          'import com.android.tools.idea.gradle.dsl.model.BuildModelContext;',\n+      version: '4.1'),\n+];\n+\n+// Used to test checkAndClearAppliedEditCommands()\n+class Unused extends EditCommand {\n+  @override\n+  String get path => 'unused';\n+\n+  @override\n+  String convert(BuildSpec spec) {\n+    return null;\n+  }\n+}\n+\n+class EditAndroidModuleLibraryManager extends EditCommand {\n+  @override\n+  String get path =>\n+      'flutter-studio/src/io/flutter/android/AndroidModuleLibraryManager.java';\n+\n+  @override\n+  String convert(BuildSpec spec) {\n+    if (spec.version.startsWith('3.6')) {\n+      var processedFile, source;\n+      processedFile = File(\n+          'flutter-studio/src/io/flutter/android/AndroidModuleLibraryManager.java');\n+      source = processedFile.readAsStringSync();\n+      var original = source;\n+      source = source.replaceAll(\n+        'super(filePath',\n+        'super(filePath.toString()',\n+      );\n+      // Starting with 3.6 we need to call a simplified init().\n+      // This is where the $PROJECT_FILE$ macro is defined, #registerComponents.\n+      source = source.replaceAll(\n+        'getStateStore().setPath(path',\n+        'getStateStore().setPath(path.toString()',\n+      );\n+      processedFile.writeAsStringSync(source);\n+      return original;\n+    } else {\n+      return null;\n+    }\n+  }\n+}\n+\n+class EditFlutterProjectSystem extends EditCommand {\n+  @override\n+  String get path =>\n+      'flutter-studio/src/io/flutter/project/FlutterProjectSystem.java';\n+\n+  @override\n+  String convert(BuildSpec spec) {\n+    if (!spec.version.startsWith('4.')) {\n+      var processedFile, source;\n+      processedFile = File(\n+          'flutter-studio/src/io/flutter/project/FlutterProjectSystem.java');\n+      source = processedFile.readAsStringSync();\n+      var original = source;\n+      source = source.replaceAll(\n+        'import com.android.tools.idea.projectsystem.SourceProvidersFactory;',\n+        '',\n+      );\n+      source = source.replaceAll(' SourceProvidersFactory ', ' Object ');\n+      source = source.replaceAll(\n+        'gradleProjectSystem.getSourceProvidersFactory()',\n+        'new Object()',\n+      );\n+      source = source.replaceAll(\n+        'gradleProjectSystem.getAndroidFacetsWithPackageName(project, packageName, scope)',\n+        'Collections.emptyList()',\n+      );\n+      if (spec.version.startsWith('3.6')) {\n+        source = source.replaceAll(\n+          'gradleProjectSystem.getSubmodules()',\n+          'new java.util.ArrayList()',\n+        );\n+      }\n+      processedFile.writeAsStringSync(source);\n+      return original;\n+    } else {\n+      return null;\n+    }\n+  }\n+}\n+\n+class EditFlutterDescriptionProvider extends EditCommand {\n+  @override\n+  String get path =>\n+      'flutter-studio/src/io/flutter/module/FlutterDescriptionProvider.java';\n+\n+  @override\n+  String convert(BuildSpec spec) {\n+    if (!spec.version.startsWith('4.')) {\n+      var processedFile, source;\n+      processedFile = File(\n+          'flutter-studio/src/io/flutter/module/FlutterDescriptionProvider.java');\n+      source = processedFile.readAsStringSync();\n+      var original = source;\n+      source = source.replaceAll(\n+        'import com.android.tools.idea.npw.model.ProjectSyncInvoker',\n+        'import com.android.tools.idea.npw.model.NewModuleModel',\n+      );\n+      source = source.replaceAll(\n+        'createStep(@NotNull Project model, @NotNull ProjectSyncInvoker invoker, String parent)',\n+        'createStep(@NotNull NewModuleModel model)',\n+      );\n+      source = source.replaceAll(\n+        'FlutterProjectModel model(@NotNull Project project,',\n+        'FlutterProjectModel model(@NotNull NewModuleModel project,',\n+      );\n+      source = source.replaceAll(\n+        'mySharedModel.getValue().project().setValue(project);',\n+        'mySharedModel.getValue().project().setValue(project.getProject().getValue());',\n+      );\n+      processedFile.writeAsStringSync(source);\n+      return original;\n+    } else {\n+      return null;\n+    }\n+  }\n+}\n+\n+/// Apply all the editCommands applicable to a given BuildSpec.\n+Future<int> applyEdits(BuildSpec spec, Function compileFn) async {\n+  // Handle skipped files.\n+  for (String file in spec.filesToSkip) {\n+    var entity =\n+        FileSystemEntity.isFileSync(file) ? File(file) : Directory(file);\n+    if (entity.existsSync()) {\n+      await entity.rename('$file~');\n+      if (entity is File) {\n+        var stubFile = File('${file}_stub');\n+        if (stubFile.existsSync()) {\n+          await stubFile.copy('$file');\n+        }\n+      }\n+    }\n+  }\n+\n+  var edited = <EditCommand, String>{};\n+  try {\n+    editCommands.forEach((edit) {\n+      var source = edit.convert(spec);\n+      if (source != null) {\n+        edited[edit] = source;\n+        appliedEditCommands.add(edit);\n+      }\n+    });\n+\n+    return await compileFn.call();\n+  } finally {\n+    // Restore sources.\n+    edited.forEach((edit, source) {\n+      log('Restoring ${edit.path}');\n+      edit.restore(source);\n+    });\n+\n+    // Restore skipped files.\n+    for (var file in spec.filesToSkip) {\n+      var name = '$file~';\n+      var entity =\n+          FileSystemEntity.isFileSync(name) ? File(name) : Directory(name);\n+      if (entity.existsSync()) {\n+        await entity.rename(file);\n+      }\n+    }\n+  }\n+}\n+\n+/// Make some changes to a source file prior to compiling for a specific IDE.\n+abstract class EditCommand {\n+  String convert(BuildSpec spec);\n+\n+  void restore(String source) {\n+    var processedFile = File(path);\n+    processedFile.writeAsStringSync(source);\n+  }\n+\n+  String get path;\n+}\n+\n+/// Single substitution in a file for one or more IDE versions.\n+class Subst extends EditCommand {\n+  @override\n+  String path;\n+  String initial;\n+  String replacement;\n+  List<String> versions;\n+\n+  Subst({this.versions, this.initial, this.replacement, this.path, version})\n+      : assert(initial != null),\n+        assert(replacement != null),\n+        assert(path != null) {\n+    if (version != null) {\n+      // Disallow both version and versions keywords.\n+      assert(versions == null);\n+      versions = [version];\n+    }\n+  }\n+\n+  @override\n+  String convert(BuildSpec spec) {\n+    if (versionMatches(spec)) {\n+      var processedFile = File(path);\n+      var source = processedFile.readAsStringSync();\n+      var original = source;\n+      source = source.replaceAll(initial, replacement);\n+      processedFile.writeAsStringSync(source);\n+      return original;\n+    } else {\n+      return null;\n+    }\n+  }\n+\n+  String toString() {\n+    return \"Subst(path: $path, versions: $versions)\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyODE0NDM0NA=="}, "originalCommit": {"oid": "dc071a649df6d3b87ab689020a08a23a86c752e7"}, "originalPosition": 274}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 319, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}