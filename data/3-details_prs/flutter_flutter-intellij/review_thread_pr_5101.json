{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTMzMzA2NDMz", "number": 5101, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNDoxMToyMFrOFBzF-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNDoxMTo0MFrOFBzGpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NDMwMDEwOnYy", "diffSide": "RIGHT", "path": "tool/plugin/lib/plugin.dart", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNDoxMToyMFrOIAolkg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNjoxMTowN1rOIAuXMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzNTg5MA==", "bodyText": "Nit: we don't use travis anymore. We generate the github actions file now.", "url": "https://github.com/flutter/flutter-intellij/pull/5101#discussion_r537535890", "createdAt": "2020-12-07T14:11:20Z", "author": {"login": "stevemessick"}, "path": "tool/plugin/lib/plugin.dart", "diffHunk": "@@ -589,21 +591,21 @@ https://plugins.jetbrains.com/plugin/uploadPlugin\n   }\n }\n \n-/// Generate the plugin.xml from the plugin.xml.template file.\n-/// If the --release argument is given, create a git branch and\n-/// commit the new file to it, assuming the release checks pass.\n+/// Generate the plugin.xml from the plugin.xml.template file. If the --release\n+/// argument is given, create a git branch and commit the new file to it,\n+/// assuming the release checks pass.\n ///\n-/// Note: The product-matrix.json file includes a build spec for the\n-/// EAP version at the end. When the EAP version is released that needs\n-/// to be updated.\n+/// Note: The product-matrix.json file includes a build spec for the EAP version\n+/// at the end. When the EAP version is released that needs to be updated.\n class GenerateCommand extends ProductCommand {\n   final BuildCommandRunner runner;\n \n   GenerateCommand(this.runner) : super('generate');\n \n-  String get description =>\n-      'Generate a valid plugin.xml and .travis.yml for the Flutter plugin.\\n'\n-      'The plugin.xml.template and product-matrix.json are used as input.';\n+  String get description => 'Generate plugin.xml, .travis.yml, and '", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b1d9ed8e475e09c3e4e135317cd4a3873ff2881"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYzMDUxMg==", "bodyText": "updates", "url": "https://github.com/flutter/flutter-intellij/pull/5101#discussion_r537630512", "createdAt": "2020-12-07T16:11:07Z", "author": {"login": "devoncarew"}, "path": "tool/plugin/lib/plugin.dart", "diffHunk": "@@ -589,21 +591,21 @@ https://plugins.jetbrains.com/plugin/uploadPlugin\n   }\n }\n \n-/// Generate the plugin.xml from the plugin.xml.template file.\n-/// If the --release argument is given, create a git branch and\n-/// commit the new file to it, assuming the release checks pass.\n+/// Generate the plugin.xml from the plugin.xml.template file. If the --release\n+/// argument is given, create a git branch and commit the new file to it,\n+/// assuming the release checks pass.\n ///\n-/// Note: The product-matrix.json file includes a build spec for the\n-/// EAP version at the end. When the EAP version is released that needs\n-/// to be updated.\n+/// Note: The product-matrix.json file includes a build spec for the EAP version\n+/// at the end. When the EAP version is released that needs to be updated.\n class GenerateCommand extends ProductCommand {\n   final BuildCommandRunner runner;\n \n   GenerateCommand(this.runner) : super('generate');\n \n-  String get description =>\n-      'Generate a valid plugin.xml and .travis.yml for the Flutter plugin.\\n'\n-      'The plugin.xml.template and product-matrix.json are used as input.';\n+  String get description => 'Generate plugin.xml, .travis.yml, and '", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzNTg5MA=="}, "originalCommit": {"oid": "7b1d9ed8e475e09c3e4e135317cd4a3873ff2881"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NDMwMDU1OnYy", "diffSide": "RIGHT", "path": "tool/plugin/lib/plugin.dart", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNDoxMToyN1rOIAol3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNjoxMToxN1rOIAuXtQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzNTk2Ng==", "bodyText": "Maybe add a README explaining double quotes are not allowed and new templates have to be manually added to the xml file?", "url": "https://github.com/flutter/flutter-intellij/pull/5101#discussion_r537535966", "createdAt": "2020-12-07T14:11:27Z", "author": {"login": "stevemessick"}, "path": "tool/plugin/lib/plugin.dart", "diffHunk": "@@ -624,6 +627,48 @@ class GenerateCommand extends ProductCommand {\n \n   SyntheticBuildSpec makeSyntheticSpec(List specs) =>\n       SyntheticBuildSpec.fromJson(specs[0], release, specs[2]);\n+\n+  void generateLiveTemplates() {\n+    // Find all the live templates.\n+    final templateFragments = Directory(p.join('resources', 'liveTemplates'))\n+        .listSync()\n+        .where((entity) => entity is File)\n+        .where((file) => p.extension(file.path) == 'txt')\n+        .cast<File>()\n+        .toList();\n+    final templateFile =\n+        File(p.join('resources', 'liveTemplates', 'flutter_miscellaneous.xml'));\n+    var contents = templateFile.readAsStringSync();\n+\n+    log('writing ${p.relative(templateFile.path)}');\n+\n+    for (var file in templateFragments) {\n+      final name = p.basenameWithoutExtension(file.path);\n+\n+      var replaceContents = file.readAsStringSync();\n+      replaceContents = replaceContents\n+          .replaceAll('\\n', '&#10;')\n+          .replaceAll('<', '&lt;')\n+          .replaceAll('>', '&gt;');\n+\n+      // look for '<template name=\"$name\" value=\"...\"'\n+      final regexp = RegExp('<template name=\"$name\" value=\"([^\"]+)\"');", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b1d9ed8e475e09c3e4e135317cd4a3873ff2881"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYzMDY0NQ==", "bodyText": "Good idea - I'll add one.", "url": "https://github.com/flutter/flutter-intellij/pull/5101#discussion_r537630645", "createdAt": "2020-12-07T16:11:17Z", "author": {"login": "devoncarew"}, "path": "tool/plugin/lib/plugin.dart", "diffHunk": "@@ -624,6 +627,48 @@ class GenerateCommand extends ProductCommand {\n \n   SyntheticBuildSpec makeSyntheticSpec(List specs) =>\n       SyntheticBuildSpec.fromJson(specs[0], release, specs[2]);\n+\n+  void generateLiveTemplates() {\n+    // Find all the live templates.\n+    final templateFragments = Directory(p.join('resources', 'liveTemplates'))\n+        .listSync()\n+        .where((entity) => entity is File)\n+        .where((file) => p.extension(file.path) == 'txt')\n+        .cast<File>()\n+        .toList();\n+    final templateFile =\n+        File(p.join('resources', 'liveTemplates', 'flutter_miscellaneous.xml'));\n+    var contents = templateFile.readAsStringSync();\n+\n+    log('writing ${p.relative(templateFile.path)}');\n+\n+    for (var file in templateFragments) {\n+      final name = p.basenameWithoutExtension(file.path);\n+\n+      var replaceContents = file.readAsStringSync();\n+      replaceContents = replaceContents\n+          .replaceAll('\\n', '&#10;')\n+          .replaceAll('<', '&lt;')\n+          .replaceAll('>', '&gt;');\n+\n+      // look for '<template name=\"$name\" value=\"...\"'\n+      final regexp = RegExp('<template name=\"$name\" value=\"([^\"]+)\"');", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzNTk2Ng=="}, "originalCommit": {"oid": "7b1d9ed8e475e09c3e4e135317cd4a3873ff2881"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NDMwMTA0OnYy", "diffSide": "RIGHT", "path": "tool/plugin/lib/plugin.dart", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNDoxMTozNFrOIAomKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNjoxODozNVrOIAutUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzNjA0MA==", "bodyText": "I don't understand this constraint. It makes it hard to add new live templates. I understand we need to control the size of the pop-up but this means we have to manually add a new one to the xml file.", "url": "https://github.com/flutter/flutter-intellij/pull/5101#discussion_r537536040", "createdAt": "2020-12-07T14:11:34Z", "author": {"login": "stevemessick"}, "path": "tool/plugin/lib/plugin.dart", "diffHunk": "@@ -624,6 +627,48 @@ class GenerateCommand extends ProductCommand {\n \n   SyntheticBuildSpec makeSyntheticSpec(List specs) =>\n       SyntheticBuildSpec.fromJson(specs[0], release, specs[2]);\n+\n+  void generateLiveTemplates() {\n+    // Find all the live templates.\n+    final templateFragments = Directory(p.join('resources', 'liveTemplates'))\n+        .listSync()\n+        .where((entity) => entity is File)\n+        .where((file) => p.extension(file.path) == 'txt')\n+        .cast<File>()\n+        .toList();\n+    final templateFile =\n+        File(p.join('resources', 'liveTemplates', 'flutter_miscellaneous.xml'));\n+    var contents = templateFile.readAsStringSync();\n+\n+    log('writing ${p.relative(templateFile.path)}');\n+\n+    for (var file in templateFragments) {\n+      final name = p.basenameWithoutExtension(file.path);\n+\n+      var replaceContents = file.readAsStringSync();\n+      replaceContents = replaceContents\n+          .replaceAll('\\n', '&#10;')\n+          .replaceAll('<', '&lt;')\n+          .replaceAll('>', '&gt;');\n+\n+      // look for '<template name=\"$name\" value=\"...\"'\n+      final regexp = RegExp('<template name=\"$name\" value=\"([^\"]+)\"');\n+      final match = regexp.firstMatch(contents);\n+      if (match == null) {\n+        throw 'No entry found for \"$name\" live template in ${templateFile.path}';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b1d9ed8e475e09c3e4e135317cd4a3873ff2881"}, "originalPosition": 93}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYzNjE3Ng==", "bodyText": "Yeah, this is only here so that we can provide feedback if an entry isn't found during the copy / in-line stage. We don't have enough info in the txt files to create a full xml entry in the live templates file.\nWhen adding a new template, people will need to create a new entry both in the xml file and create a new txt file. I added that into - how to add a new live template - to the readme.", "url": "https://github.com/flutter/flutter-intellij/pull/5101#discussion_r537636176", "createdAt": "2020-12-07T16:18:35Z", "author": {"login": "devoncarew"}, "path": "tool/plugin/lib/plugin.dart", "diffHunk": "@@ -624,6 +627,48 @@ class GenerateCommand extends ProductCommand {\n \n   SyntheticBuildSpec makeSyntheticSpec(List specs) =>\n       SyntheticBuildSpec.fromJson(specs[0], release, specs[2]);\n+\n+  void generateLiveTemplates() {\n+    // Find all the live templates.\n+    final templateFragments = Directory(p.join('resources', 'liveTemplates'))\n+        .listSync()\n+        .where((entity) => entity is File)\n+        .where((file) => p.extension(file.path) == 'txt')\n+        .cast<File>()\n+        .toList();\n+    final templateFile =\n+        File(p.join('resources', 'liveTemplates', 'flutter_miscellaneous.xml'));\n+    var contents = templateFile.readAsStringSync();\n+\n+    log('writing ${p.relative(templateFile.path)}');\n+\n+    for (var file in templateFragments) {\n+      final name = p.basenameWithoutExtension(file.path);\n+\n+      var replaceContents = file.readAsStringSync();\n+      replaceContents = replaceContents\n+          .replaceAll('\\n', '&#10;')\n+          .replaceAll('<', '&lt;')\n+          .replaceAll('>', '&gt;');\n+\n+      // look for '<template name=\"$name\" value=\"...\"'\n+      final regexp = RegExp('<template name=\"$name\" value=\"([^\"]+)\"');\n+      final match = regexp.firstMatch(contents);\n+      if (match == null) {\n+        throw 'No entry found for \"$name\" live template in ${templateFile.path}';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzNjA0MA=="}, "originalCommit": {"oid": "7b1d9ed8e475e09c3e4e135317cd4a3873ff2881"}, "originalPosition": 93}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3NDMwMTgxOnYy", "diffSide": "RIGHT", "path": "tool/plugin/lib/plugin.dart", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNDoxMTo0MFrOIAomiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNjoxODo1MVrOIAuuRg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzNjEzNg==", "bodyText": "Nit: \"content\"", "url": "https://github.com/flutter/flutter-intellij/pull/5101#discussion_r537536136", "createdAt": "2020-12-07T14:11:40Z", "author": {"login": "stevemessick"}, "path": "tool/plugin/lib/plugin.dart", "diffHunk": "@@ -624,6 +627,48 @@ class GenerateCommand extends ProductCommand {\n \n   SyntheticBuildSpec makeSyntheticSpec(List specs) =>\n       SyntheticBuildSpec.fromJson(specs[0], release, specs[2]);\n+\n+  void generateLiveTemplates() {\n+    // Find all the live templates.\n+    final templateFragments = Directory(p.join('resources', 'liveTemplates'))\n+        .listSync()\n+        .where((entity) => entity is File)\n+        .where((file) => p.extension(file.path) == 'txt')\n+        .cast<File>()\n+        .toList();\n+    final templateFile =\n+        File(p.join('resources', 'liveTemplates', 'flutter_miscellaneous.xml'));\n+    var contents = templateFile.readAsStringSync();\n+\n+    log('writing ${p.relative(templateFile.path)}');\n+\n+    for (var file in templateFragments) {\n+      final name = p.basenameWithoutExtension(file.path);\n+\n+      var replaceContents = file.readAsStringSync();\n+      replaceContents = replaceContents\n+          .replaceAll('\\n', '&#10;')\n+          .replaceAll('<', '&lt;')\n+          .replaceAll('>', '&gt;');\n+\n+      // look for '<template name=\"$name\" value=\"...\"'\n+      final regexp = RegExp('<template name=\"$name\" value=\"([^\"]+)\"');\n+      final match = regexp.firstMatch(contents);\n+      if (match == null) {\n+        throw 'No entry found for \"$name\" live template in ${templateFile.path}';\n+      }\n+\n+      // Replace the existing content in the xml live template file with the\n+      // contwnt from the template $name.txt file.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b1d9ed8e475e09c3e4e135317cd4a3873ff2881"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzYzNjQyMg==", "bodyText": "done", "url": "https://github.com/flutter/flutter-intellij/pull/5101#discussion_r537636422", "createdAt": "2020-12-07T16:18:51Z", "author": {"login": "devoncarew"}, "path": "tool/plugin/lib/plugin.dart", "diffHunk": "@@ -624,6 +627,48 @@ class GenerateCommand extends ProductCommand {\n \n   SyntheticBuildSpec makeSyntheticSpec(List specs) =>\n       SyntheticBuildSpec.fromJson(specs[0], release, specs[2]);\n+\n+  void generateLiveTemplates() {\n+    // Find all the live templates.\n+    final templateFragments = Directory(p.join('resources', 'liveTemplates'))\n+        .listSync()\n+        .where((entity) => entity is File)\n+        .where((file) => p.extension(file.path) == 'txt')\n+        .cast<File>()\n+        .toList();\n+    final templateFile =\n+        File(p.join('resources', 'liveTemplates', 'flutter_miscellaneous.xml'));\n+    var contents = templateFile.readAsStringSync();\n+\n+    log('writing ${p.relative(templateFile.path)}');\n+\n+    for (var file in templateFragments) {\n+      final name = p.basenameWithoutExtension(file.path);\n+\n+      var replaceContents = file.readAsStringSync();\n+      replaceContents = replaceContents\n+          .replaceAll('\\n', '&#10;')\n+          .replaceAll('<', '&lt;')\n+          .replaceAll('>', '&gt;');\n+\n+      // look for '<template name=\"$name\" value=\"...\"'\n+      final regexp = RegExp('<template name=\"$name\" value=\"([^\"]+)\"');\n+      final match = regexp.firstMatch(contents);\n+      if (match == null) {\n+        throw 'No entry found for \"$name\" live template in ${templateFile.path}';\n+      }\n+\n+      // Replace the existing content in the xml live template file with the\n+      // contwnt from the template $name.txt file.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzUzNjEzNg=="}, "originalCommit": {"oid": "7b1d9ed8e475e09c3e4e135317cd4a3873ff2881"}, "originalPosition": 97}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 402, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}