{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNzYyODc3", "number": 4373, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNjowNjo0MlrODfPMNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxODoxNjowOFrODfpgqw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MDgxMzMyOnYy", "diffSide": "RIGHT", "path": "src/io/flutter/vmService/DisplayRefreshRateManager.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNjowNjo0MlrOFo0rbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMlQxNjozMDo0OFrOFo1pmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM1MDQ0NA==", "bodyText": "It looks like get() may also block the thread until the value is ready?\nI believe the underlying issue here is that we're using clocking calls and this code path can be called from the event thread. I suspect what we need to do is to move to a non-blocking call (which may be something like .whenComplete()?), and then use that to determine the display refresh rate, and return the value as a future.\n(Java futures definitely have a much larger API surface area than the Dart variant)", "url": "https://github.com/flutter/flutter-intellij/pull/4373#discussion_r378350444", "createdAt": "2020-02-12T16:06:42Z", "author": {"login": "devoncarew"}, "path": "src/io/flutter/vmService/DisplayRefreshRateManager.java", "diffHunk": "@@ -80,18 +80,18 @@ public Double getCurrentDisplayRefreshRateRaw() {\n   private CompletableFuture<Double> getDisplayRefreshRate() {\n     final double unknownRefreshRate = 0.0;\n \n-    final String flutterViewId = vmServiceManager.getFlutterViewId().exceptionally(exception -> {\n-      // We often see \"java.lang.RuntimeException: Method not found\" from here; perhaps a race condition?\n-      LOG.warn(exception.getMessage());\n-      return null;\n-    }).join();\n-\n-    if (flutterViewId == null) {\n+    try {\n+      final String flutterViewId = vmServiceManager.getFlutterViewId().exceptionally(exception -> {\n+        // We often see \"java.lang.RuntimeException: Method not found\" from here; perhaps a race condition?\n+        LOG.warn(exception.getMessage());\n+        return null;\n+      }).get();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "edb7617cccf699691fb9243fe09f39eab09e481c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM1MjMwMQ==", "bodyText": "The issue with whenComplete is that it returns a CompletableFuture<T> . In this case T is a String because that is the value we expect from getFlutterViewId. However, we need to return CompletableFuture<Double> for displayRefreshRate.", "url": "https://github.com/flutter/flutter-intellij/pull/4373#discussion_r378352301", "createdAt": "2020-02-12T16:09:28Z", "author": {"login": "kenzieschmoll"}, "path": "src/io/flutter/vmService/DisplayRefreshRateManager.java", "diffHunk": "@@ -80,18 +80,18 @@ public Double getCurrentDisplayRefreshRateRaw() {\n   private CompletableFuture<Double> getDisplayRefreshRate() {\n     final double unknownRefreshRate = 0.0;\n \n-    final String flutterViewId = vmServiceManager.getFlutterViewId().exceptionally(exception -> {\n-      // We often see \"java.lang.RuntimeException: Method not found\" from here; perhaps a race condition?\n-      LOG.warn(exception.getMessage());\n-      return null;\n-    }).join();\n-\n-    if (flutterViewId == null) {\n+    try {\n+      final String flutterViewId = vmServiceManager.getFlutterViewId().exceptionally(exception -> {\n+        // We often see \"java.lang.RuntimeException: Method not found\" from here; perhaps a race condition?\n+        LOG.warn(exception.getMessage());\n+        return null;\n+      }).get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM1MDQ0NA=="}, "originalCommit": {"oid": "edb7617cccf699691fb9243fe09f39eab09e481c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM1NTM3Mg==", "bodyText": "You may try creating a CompletableFuture<Double> foo at the start of the method, starting the future work to get the flutterViewId, and return the foo completable future. When you have the flutter view ID, you can then request the display rate. Once you have a value for that you should be able to call foo.complete(displayRefreshRate).", "url": "https://github.com/flutter/flutter-intellij/pull/4373#discussion_r378355372", "createdAt": "2020-02-12T16:14:04Z", "author": {"login": "devoncarew"}, "path": "src/io/flutter/vmService/DisplayRefreshRateManager.java", "diffHunk": "@@ -80,18 +80,18 @@ public Double getCurrentDisplayRefreshRateRaw() {\n   private CompletableFuture<Double> getDisplayRefreshRate() {\n     final double unknownRefreshRate = 0.0;\n \n-    final String flutterViewId = vmServiceManager.getFlutterViewId().exceptionally(exception -> {\n-      // We often see \"java.lang.RuntimeException: Method not found\" from here; perhaps a race condition?\n-      LOG.warn(exception.getMessage());\n-      return null;\n-    }).join();\n-\n-    if (flutterViewId == null) {\n+    try {\n+      final String flutterViewId = vmServiceManager.getFlutterViewId().exceptionally(exception -> {\n+        // We often see \"java.lang.RuntimeException: Method not found\" from here; perhaps a race condition?\n+        LOG.warn(exception.getMessage());\n+        return null;\n+      }).get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM1MDQ0NA=="}, "originalCommit": {"oid": "edb7617cccf699691fb9243fe09f39eab09e481c"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM2NjM2Mw==", "bodyText": "I think I found a way around this by returning outside of whenComplete. PTAL.", "url": "https://github.com/flutter/flutter-intellij/pull/4373#discussion_r378366363", "createdAt": "2020-02-12T16:30:48Z", "author": {"login": "kenzieschmoll"}, "path": "src/io/flutter/vmService/DisplayRefreshRateManager.java", "diffHunk": "@@ -80,18 +80,18 @@ public Double getCurrentDisplayRefreshRateRaw() {\n   private CompletableFuture<Double> getDisplayRefreshRate() {\n     final double unknownRefreshRate = 0.0;\n \n-    final String flutterViewId = vmServiceManager.getFlutterViewId().exceptionally(exception -> {\n-      // We often see \"java.lang.RuntimeException: Method not found\" from here; perhaps a race condition?\n-      LOG.warn(exception.getMessage());\n-      return null;\n-    }).join();\n-\n-    if (flutterViewId == null) {\n+    try {\n+      final String flutterViewId = vmServiceManager.getFlutterViewId().exceptionally(exception -> {\n+        // We often see \"java.lang.RuntimeException: Method not found\" from here; perhaps a race condition?\n+        LOG.warn(exception.getMessage());\n+        return null;\n+      }).get();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODM1MDQ0NA=="}, "originalCommit": {"oid": "edb7617cccf699691fb9243fe09f39eab09e481c"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NDkxODM3OnYy", "diffSide": "RIGHT", "path": "src/io/flutter/vmService/DisplayRefreshRateManager.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzoxMTozMlrOFpcUhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxNzozMTo1NFrOFpdABw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5OTk0Mg==", "bodyText": "If t is not null here, should we instead complete displayRefreshRate with the defaultRefreshRate?", "url": "https://github.com/flutter/flutter-intellij/pull/4373#discussion_r378999942", "createdAt": "2020-02-13T17:11:32Z", "author": {"login": "devoncarew"}, "path": "src/io/flutter/vmService/DisplayRefreshRateManager.java", "diffHunk": "@@ -78,20 +78,22 @@ public Double getCurrentDisplayRefreshRateRaw() {\n   }\n \n   private CompletableFuture<Double> getDisplayRefreshRate() {\n-    final double unknownRefreshRate = 0.0;\n-\n-    final String flutterViewId = vmServiceManager.getFlutterViewId().exceptionally(exception -> {\n+    final CompletableFuture<Double> displayRefreshRate = new CompletableFuture<Double>();\n+    vmServiceManager.getFlutterViewId().exceptionally(exception -> {\n       // We often see \"java.lang.RuntimeException: Method not found\" from here; perhaps a race condition?\n       LOG.warn(exception.getMessage());\n       return null;\n-    }).join();\n-\n-    if (flutterViewId == null) {\n-      // Fail gracefully by returning the default.\n-      return CompletableFuture.completedFuture(defaultRefreshRate);\n-    }\n-\n-    return invokeGetDisplayRefreshRate(flutterViewId);\n+    }).whenComplete((String id, Throwable throwable) -> {\n+      if (id == null) {\n+        // Fail gracefully by returning the default.\n+        displayRefreshRate.complete(defaultRefreshRate);\n+      } else {\n+        invokeGetDisplayRefreshRate(id).whenComplete((Double refreshRate, Throwable t) -> {\n+          displayRefreshRate.complete(refreshRate);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8bd71e5b4deb15ec0e81f8d58742a4236b625af7"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAwNjE2NA==", "bodyText": "Added exception handling via exceptionally()", "url": "https://github.com/flutter/flutter-intellij/pull/4373#discussion_r379006164", "createdAt": "2020-02-13T17:22:41Z", "author": {"login": "kenzieschmoll"}, "path": "src/io/flutter/vmService/DisplayRefreshRateManager.java", "diffHunk": "@@ -78,20 +78,22 @@ public Double getCurrentDisplayRefreshRateRaw() {\n   }\n \n   private CompletableFuture<Double> getDisplayRefreshRate() {\n-    final double unknownRefreshRate = 0.0;\n-\n-    final String flutterViewId = vmServiceManager.getFlutterViewId().exceptionally(exception -> {\n+    final CompletableFuture<Double> displayRefreshRate = new CompletableFuture<Double>();\n+    vmServiceManager.getFlutterViewId().exceptionally(exception -> {\n       // We often see \"java.lang.RuntimeException: Method not found\" from here; perhaps a race condition?\n       LOG.warn(exception.getMessage());\n       return null;\n-    }).join();\n-\n-    if (flutterViewId == null) {\n-      // Fail gracefully by returning the default.\n-      return CompletableFuture.completedFuture(defaultRefreshRate);\n-    }\n-\n-    return invokeGetDisplayRefreshRate(flutterViewId);\n+    }).whenComplete((String id, Throwable throwable) -> {\n+      if (id == null) {\n+        // Fail gracefully by returning the default.\n+        displayRefreshRate.complete(defaultRefreshRate);\n+      } else {\n+        invokeGetDisplayRefreshRate(id).whenComplete((Double refreshRate, Throwable t) -> {\n+          displayRefreshRate.complete(refreshRate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5OTk0Mg=="}, "originalCommit": {"oid": "8bd71e5b4deb15ec0e81f8d58742a4236b625af7"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAwODgyMA==", "bodyText": "I think you either want to use thenApplyAsync() and exceptionally(), or use whenComplete(). It looks like whenComplete gives you both the value, if it completes nornally or the exception if it fails.", "url": "https://github.com/flutter/flutter-intellij/pull/4373#discussion_r379008820", "createdAt": "2020-02-13T17:27:42Z", "author": {"login": "devoncarew"}, "path": "src/io/flutter/vmService/DisplayRefreshRateManager.java", "diffHunk": "@@ -78,20 +78,22 @@ public Double getCurrentDisplayRefreshRateRaw() {\n   }\n \n   private CompletableFuture<Double> getDisplayRefreshRate() {\n-    final double unknownRefreshRate = 0.0;\n-\n-    final String flutterViewId = vmServiceManager.getFlutterViewId().exceptionally(exception -> {\n+    final CompletableFuture<Double> displayRefreshRate = new CompletableFuture<Double>();\n+    vmServiceManager.getFlutterViewId().exceptionally(exception -> {\n       // We often see \"java.lang.RuntimeException: Method not found\" from here; perhaps a race condition?\n       LOG.warn(exception.getMessage());\n       return null;\n-    }).join();\n-\n-    if (flutterViewId == null) {\n-      // Fail gracefully by returning the default.\n-      return CompletableFuture.completedFuture(defaultRefreshRate);\n-    }\n-\n-    return invokeGetDisplayRefreshRate(flutterViewId);\n+    }).whenComplete((String id, Throwable throwable) -> {\n+      if (id == null) {\n+        // Fail gracefully by returning the default.\n+        displayRefreshRate.complete(defaultRefreshRate);\n+      } else {\n+        invokeGetDisplayRefreshRate(id).whenComplete((Double refreshRate, Throwable t) -> {\n+          displayRefreshRate.complete(refreshRate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5OTk0Mg=="}, "originalCommit": {"oid": "8bd71e5b4deb15ec0e81f8d58742a4236b625af7"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAxMTA3OQ==", "bodyText": "done.", "url": "https://github.com/flutter/flutter-intellij/pull/4373#discussion_r379011079", "createdAt": "2020-02-13T17:31:54Z", "author": {"login": "kenzieschmoll"}, "path": "src/io/flutter/vmService/DisplayRefreshRateManager.java", "diffHunk": "@@ -78,20 +78,22 @@ public Double getCurrentDisplayRefreshRateRaw() {\n   }\n \n   private CompletableFuture<Double> getDisplayRefreshRate() {\n-    final double unknownRefreshRate = 0.0;\n-\n-    final String flutterViewId = vmServiceManager.getFlutterViewId().exceptionally(exception -> {\n+    final CompletableFuture<Double> displayRefreshRate = new CompletableFuture<Double>();\n+    vmServiceManager.getFlutterViewId().exceptionally(exception -> {\n       // We often see \"java.lang.RuntimeException: Method not found\" from here; perhaps a race condition?\n       LOG.warn(exception.getMessage());\n       return null;\n-    }).join();\n-\n-    if (flutterViewId == null) {\n-      // Fail gracefully by returning the default.\n-      return CompletableFuture.completedFuture(defaultRefreshRate);\n-    }\n-\n-    return invokeGetDisplayRefreshRate(flutterViewId);\n+    }).whenComplete((String id, Throwable throwable) -> {\n+      if (id == null) {\n+        // Fail gracefully by returning the default.\n+        displayRefreshRate.complete(defaultRefreshRate);\n+      } else {\n+        invokeGetDisplayRefreshRate(id).whenComplete((Double refreshRate, Throwable t) -> {\n+          displayRefreshRate.complete(refreshRate);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODk5OTk0Mg=="}, "originalCommit": {"oid": "8bd71e5b4deb15ec0e81f8d58742a4236b625af7"}, "originalPosition": 26}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0NTEyNTU1OnYy", "diffSide": "RIGHT", "path": "src/io/flutter/vmService/DisplayRefreshRateManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxODoxNjowOFrOFpeY_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxODoxOToxNlrOFpefxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAzMzg1Mw==", "bodyText": "This needs an else statement, otherwise when t != null we'll call displayRefreshRate.complete() twice.", "url": "https://github.com/flutter/flutter-intellij/pull/4373#discussion_r379033853", "createdAt": "2020-02-13T18:16:08Z", "author": {"login": "devoncarew"}, "path": "src/io/flutter/vmService/DisplayRefreshRateManager.java", "diffHunk": "@@ -78,20 +78,25 @@ public Double getCurrentDisplayRefreshRateRaw() {\n   }\n \n   private CompletableFuture<Double> getDisplayRefreshRate() {\n-    final double unknownRefreshRate = 0.0;\n-\n-    final String flutterViewId = vmServiceManager.getFlutterViewId().exceptionally(exception -> {\n-      // We often see \"java.lang.RuntimeException: Method not found\" from here; perhaps a race condition?\n-      LOG.warn(exception.getMessage());\n-      return null;\n-    }).join();\n-\n-    if (flutterViewId == null) {\n-      // Fail gracefully by returning the default.\n-      return CompletableFuture.completedFuture(defaultRefreshRate);\n-    }\n-\n-    return invokeGetDisplayRefreshRate(flutterViewId);\n+    final CompletableFuture<Double> displayRefreshRate = new CompletableFuture<Double>();\n+    vmServiceManager.getFlutterViewId().whenComplete((String id, Throwable throwable) -> {\n+      if (throwable != null) {\n+        // We often see \"java.lang.RuntimeException: Method not found\" from here; perhaps a race condition?\n+        LOG.warn(throwable.getMessage());\n+        // Fail gracefully by returning the default.\n+        displayRefreshRate.complete(defaultRefreshRate);\n+      } else {\n+        invokeGetDisplayRefreshRate(id).whenComplete((Double refreshRate, Throwable t) -> {\n+          if (t != null) {\n+            LOG.warn(t.getMessage());\n+            // Fail gracefully by returning the default.\n+            displayRefreshRate.complete(defaultRefreshRate);\n+          }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19ba420f6ee7302fe3a38e29fc76e2110905d8e8"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAzNTU4OA==", "bodyText": "whoops. thanks for catching. fixed.", "url": "https://github.com/flutter/flutter-intellij/pull/4373#discussion_r379035588", "createdAt": "2020-02-13T18:19:16Z", "author": {"login": "kenzieschmoll"}, "path": "src/io/flutter/vmService/DisplayRefreshRateManager.java", "diffHunk": "@@ -78,20 +78,25 @@ public Double getCurrentDisplayRefreshRateRaw() {\n   }\n \n   private CompletableFuture<Double> getDisplayRefreshRate() {\n-    final double unknownRefreshRate = 0.0;\n-\n-    final String flutterViewId = vmServiceManager.getFlutterViewId().exceptionally(exception -> {\n-      // We often see \"java.lang.RuntimeException: Method not found\" from here; perhaps a race condition?\n-      LOG.warn(exception.getMessage());\n-      return null;\n-    }).join();\n-\n-    if (flutterViewId == null) {\n-      // Fail gracefully by returning the default.\n-      return CompletableFuture.completedFuture(defaultRefreshRate);\n-    }\n-\n-    return invokeGetDisplayRefreshRate(flutterViewId);\n+    final CompletableFuture<Double> displayRefreshRate = new CompletableFuture<Double>();\n+    vmServiceManager.getFlutterViewId().whenComplete((String id, Throwable throwable) -> {\n+      if (throwable != null) {\n+        // We often see \"java.lang.RuntimeException: Method not found\" from here; perhaps a race condition?\n+        LOG.warn(throwable.getMessage());\n+        // Fail gracefully by returning the default.\n+        displayRefreshRate.complete(defaultRefreshRate);\n+      } else {\n+        invokeGetDisplayRefreshRate(id).whenComplete((Double refreshRate, Throwable t) -> {\n+          if (t != null) {\n+            LOG.warn(t.getMessage());\n+            // Fail gracefully by returning the default.\n+            displayRefreshRate.complete(defaultRefreshRate);\n+          }", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3OTAzMzg1Mw=="}, "originalCommit": {"oid": "19ba420f6ee7302fe3a38e29fc76e2110905d8e8"}, "originalPosition": 31}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 275, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}