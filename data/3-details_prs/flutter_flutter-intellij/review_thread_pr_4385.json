{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2NzM2OTg1", "number": 4385, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzo0MzoyM1rODgyo2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMTo0MDoyNVrODhO1jQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzEwNjgxOnYy", "diffSide": "RIGHT", "path": "src/io/flutter/run/common/CommonTestConfigUtils.java", "isResolved": false, "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzo0MzoyM1rOFrMG7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNzowOToxMFrOFrv2HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzMTQ3MQ==", "bodyText": "what if the outline has changed? we need to clear out the cache in that case.", "url": "https://github.com/flutter/flutter-intellij/pull/4385#discussion_r380831471", "createdAt": "2020-02-18T17:43:23Z", "author": {"login": "jacob314"}, "path": "src/io/flutter/run/common/CommonTestConfigUtils.java", "diffHunk": "@@ -84,21 +84,22 @@ private void clearCachedInfo() {\n     }\n \n     final FlutterOutline outline = outlineService.getIfUpdated(file);\n+    final String path = file.getVirtualFile().getPath();\n     // If the outline is outdated, then request a new pass to generate line markers.\n     if (outline == null) {\n-      clearCachedInfo();\n+      clearCachedInfo(path);\n       outlineService.addListener(getListenerForFile(file));\n       return new HashMap<>();\n     }\n \n     synchronized (this) {\n       // Visit the fields on the outline to get which calls are actual named tests.\n-      if (cachedCallToTestType == null) {\n-        cachedCallToTestType = new HashMap<>();\n-        populateTestTypeMap(outline, cachedCallToTestType, file);\n+      if (!cachedCallToTestType.containsKey(path)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0acff30bda37a8e880f959a9cf9f4af215566aa8"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0MDMzNQ==", "bodyText": "The outline given will be null and the cache will be cleared.\nCF: the comments above and the documentation for outlineService.getIfUpdated:\n\n  \n    \n      flutter-intellij/src/io/flutter/editor/ActiveEditorsOutlineService.java\n    \n    \n        Lines 187 to 194\n      in\n      f69eec4\n    \n    \n    \n    \n\n        \n          \n             /** \n        \n\n        \n          \n              * Gets the {@link FlutterOutline} for {@param file} if and only if the outline is up to date with the file. \n        \n\n        \n          \n              * \n        \n\n        \n          \n              * <p> \n        \n\n        \n          \n              * Returns null if the file is out of date. \n        \n\n        \n          \n              */ \n        \n\n        \n          \n             @Nullable \n        \n\n        \n          \n             public FlutterOutline getIfUpdated(@NotNull PsiFile file) {", "url": "https://github.com/flutter/flutter-intellij/pull/4385#discussion_r380840335", "createdAt": "2020-02-18T17:59:46Z", "author": {"login": "DaveShuckerow"}, "path": "src/io/flutter/run/common/CommonTestConfigUtils.java", "diffHunk": "@@ -84,21 +84,22 @@ private void clearCachedInfo() {\n     }\n \n     final FlutterOutline outline = outlineService.getIfUpdated(file);\n+    final String path = file.getVirtualFile().getPath();\n     // If the outline is outdated, then request a new pass to generate line markers.\n     if (outline == null) {\n-      clearCachedInfo();\n+      clearCachedInfo(path);\n       outlineService.addListener(getListenerForFile(file));\n       return new HashMap<>();\n     }\n \n     synchronized (this) {\n       // Visit the fields on the outline to get which calls are actual named tests.\n-      if (cachedCallToTestType == null) {\n-        cachedCallToTestType = new HashMap<>();\n-        populateTestTypeMap(outline, cachedCallToTestType, file);\n+      if (!cachedCallToTestType.containsKey(path)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzMTQ3MQ=="}, "originalCommit": {"oid": "0acff30bda37a8e880f959a9cf9f4af215566aa8"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0Mzg4MQ==", "bodyText": "that is not a safe assumption.\nThe only assumption safe to depend on is the outline will be null if it is out of date.\nFor example, imagine if another service such as the the widget indent guides or HotUI is also requesting outlines using ActiveEditorsOutlineService, you could easily get a non-null outline even though it is different than the outline your cache is based on.", "url": "https://github.com/flutter/flutter-intellij/pull/4385#discussion_r380843881", "createdAt": "2020-02-18T18:06:50Z", "author": {"login": "jacob314"}, "path": "src/io/flutter/run/common/CommonTestConfigUtils.java", "diffHunk": "@@ -84,21 +84,22 @@ private void clearCachedInfo() {\n     }\n \n     final FlutterOutline outline = outlineService.getIfUpdated(file);\n+    final String path = file.getVirtualFile().getPath();\n     // If the outline is outdated, then request a new pass to generate line markers.\n     if (outline == null) {\n-      clearCachedInfo();\n+      clearCachedInfo(path);\n       outlineService.addListener(getListenerForFile(file));\n       return new HashMap<>();\n     }\n \n     synchronized (this) {\n       // Visit the fields on the outline to get which calls are actual named tests.\n-      if (cachedCallToTestType == null) {\n-        cachedCallToTestType = new HashMap<>();\n-        populateTestTypeMap(outline, cachedCallToTestType, file);\n+      if (!cachedCallToTestType.containsKey(path)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzMTQ3MQ=="}, "originalCommit": {"oid": "0acff30bda37a8e880f959a9cf9f4af215566aa8"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0NzI1Mw==", "bodyText": "This code checks if the outline is outdated and returns null if so.\nIf you have suggestions for how to improve the heuristic, they are welcome.", "url": "https://github.com/flutter/flutter-intellij/pull/4385#discussion_r380847253", "createdAt": "2020-02-18T18:13:13Z", "author": {"login": "DaveShuckerow"}, "path": "src/io/flutter/run/common/CommonTestConfigUtils.java", "diffHunk": "@@ -84,21 +84,22 @@ private void clearCachedInfo() {\n     }\n \n     final FlutterOutline outline = outlineService.getIfUpdated(file);\n+    final String path = file.getVirtualFile().getPath();\n     // If the outline is outdated, then request a new pass to generate line markers.\n     if (outline == null) {\n-      clearCachedInfo();\n+      clearCachedInfo(path);\n       outlineService.addListener(getListenerForFile(file));\n       return new HashMap<>();\n     }\n \n     synchronized (this) {\n       // Visit the fields on the outline to get which calls are actual named tests.\n-      if (cachedCallToTestType == null) {\n-        cachedCallToTestType = new HashMap<>();\n-        populateTestTypeMap(outline, cachedCallToTestType, file);\n+      if (!cachedCallToTestType.containsKey(path)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzMTQ3MQ=="}, "originalCommit": {"oid": "0acff30bda37a8e880f959a9cf9f4af215566aa8"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg2OTA4OA==", "bodyText": "the getIfUpdated method is fine as written. What you need to do is not depend on getting a null outline for the case that there was an update. To do that you should store what the outline was in CommonTestConfigUtils so that you can tell if you have gotten a new outline so need to update your cache.", "url": "https://github.com/flutter/flutter-intellij/pull/4385#discussion_r380869088", "createdAt": "2020-02-18T18:55:38Z", "author": {"login": "jacob314"}, "path": "src/io/flutter/run/common/CommonTestConfigUtils.java", "diffHunk": "@@ -84,21 +84,22 @@ private void clearCachedInfo() {\n     }\n \n     final FlutterOutline outline = outlineService.getIfUpdated(file);\n+    final String path = file.getVirtualFile().getPath();\n     // If the outline is outdated, then request a new pass to generate line markers.\n     if (outline == null) {\n-      clearCachedInfo();\n+      clearCachedInfo(path);\n       outlineService.addListener(getListenerForFile(file));\n       return new HashMap<>();\n     }\n \n     synchronized (this) {\n       // Visit the fields on the outline to get which calls are actual named tests.\n-      if (cachedCallToTestType == null) {\n-        cachedCallToTestType = new HashMap<>();\n-        populateTestTypeMap(outline, cachedCallToTestType, file);\n+      if (!cachedCallToTestType.containsKey(path)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzMTQ3MQ=="}, "originalCommit": {"oid": "0acff30bda37a8e880f959a9cf9f4af215566aa8"}, "originalPosition": 33}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQxNjk4OQ==", "bodyText": "Done.", "url": "https://github.com/flutter/flutter-intellij/pull/4385#discussion_r381416989", "createdAt": "2020-02-19T17:09:10Z", "author": {"login": "DaveShuckerow"}, "path": "src/io/flutter/run/common/CommonTestConfigUtils.java", "diffHunk": "@@ -84,21 +84,22 @@ private void clearCachedInfo() {\n     }\n \n     final FlutterOutline outline = outlineService.getIfUpdated(file);\n+    final String path = file.getVirtualFile().getPath();\n     // If the outline is outdated, then request a new pass to generate line markers.\n     if (outline == null) {\n-      clearCachedInfo();\n+      clearCachedInfo(path);\n       outlineService.addListener(getListenerForFile(file));\n       return new HashMap<>();\n     }\n \n     synchronized (this) {\n       // Visit the fields on the outline to get which calls are actual named tests.\n-      if (cachedCallToTestType == null) {\n-        cachedCallToTestType = new HashMap<>();\n-        populateTestTypeMap(outline, cachedCallToTestType, file);\n+      if (!cachedCallToTestType.containsKey(path)) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzMTQ3MQ=="}, "originalCommit": {"oid": "0acff30bda37a8e880f959a9cf9f4af215566aa8"}, "originalPosition": 33}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzExMDY4OnYy", "diffSide": "RIGHT", "path": "src/io/flutter/run/common/CommonTestConfigUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNzo0NDozMlrOFrMJVw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODowMTo0OFrOFrMtmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzMjA4Nw==", "bodyText": "caching DartCallExpressions will cause us to hang on to old IntelliJ ASTs and leave us vulnerable to if IntelliJ recomputes AST nodes. It is safer to use file offsets as keys.", "url": "https://github.com/flutter/flutter-intellij/pull/4385#discussion_r380832087", "createdAt": "2020-02-18T17:44:32Z", "author": {"login": "jacob314"}, "path": "src/io/flutter/run/common/CommonTestConfigUtils.java", "diffHunk": "@@ -64,11 +64,11 @@ public TestType asTestCall(@NotNull PsiElement element) {\n     return null;\n   }\n \n-  Map<DartCallExpression, TestType> cachedCallToTestType;\n+  private final Map<String, Map<DartCallExpression, TestType>> cachedCallToTestType = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0acff30bda37a8e880f959a9cf9f4af215566aa8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0MTM2OQ==", "bodyText": "Done.", "url": "https://github.com/flutter/flutter-intellij/pull/4385#discussion_r380841369", "createdAt": "2020-02-18T18:01:48Z", "author": {"login": "DaveShuckerow"}, "path": "src/io/flutter/run/common/CommonTestConfigUtils.java", "diffHunk": "@@ -64,11 +64,11 @@ public TestType asTestCall(@NotNull PsiElement element) {\n     return null;\n   }\n \n-  Map<DartCallExpression, TestType> cachedCallToTestType;\n+  private final Map<String, Map<DartCallExpression, TestType>> cachedCallToTestType = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDgzMjA4Nw=="}, "originalCommit": {"oid": "0acff30bda37a8e880f959a9cf9f4af215566aa8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NzIwMDg5OnYy", "diffSide": "RIGHT", "path": "src/io/flutter/run/common/CommonTestConfigUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxODoxMTozMVrOFrNBFA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQxNzo1NzozN1rOFrxkIQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0NjM1Ng==", "bodyText": "optimization: move this findElementAt call so you only call it when unit_test_group or unit_test_test is found. Currently we are doing this fairly expensive operation a lot more times than we need to.\nI do like that you are still using\nfile.findElementAt to avoid location calculation bugs.", "url": "https://github.com/flutter/flutter-intellij/pull/4385#discussion_r380846356", "createdAt": "2020-02-18T18:11:31Z", "author": {"login": "jacob314"}, "path": "src/io/flutter/run/common/CommonTestConfigUtils.java", "diffHunk": "@@ -160,7 +161,7 @@ protected ActiveEditorsOutlineService getActiveEditorsOutlineService(@NotNull Pr\n    * Traverses the {@param outline} tree and adds to {@param callToTestType } the {@link DartCallExpression}s that are tests or test groups.\n    */\n   private void populateTestTypeMap(@NotNull FlutterOutline outline,\n-                                   @NotNull Map<DartCallExpression, TestType> callToTestType,\n+                                   @NotNull Map<Integer, TestType> callToTestType,\n                                    @NotNull PsiFile file) {\n     final PsiElement element = file.findElementAt(outline.getOffset());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9a1a89ba27b1f8c6490f839dec6810d4c7160b70"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTQ0NTE1Mw==", "bodyText": "Done.", "url": "https://github.com/flutter/flutter-intellij/pull/4385#discussion_r381445153", "createdAt": "2020-02-19T17:57:37Z", "author": {"login": "DaveShuckerow"}, "path": "src/io/flutter/run/common/CommonTestConfigUtils.java", "diffHunk": "@@ -160,7 +161,7 @@ protected ActiveEditorsOutlineService getActiveEditorsOutlineService(@NotNull Pr\n    * Traverses the {@param outline} tree and adds to {@param callToTestType } the {@link DartCallExpression}s that are tests or test groups.\n    */\n   private void populateTestTypeMap(@NotNull FlutterOutline outline,\n-                                   @NotNull Map<DartCallExpression, TestType> callToTestType,\n+                                   @NotNull Map<Integer, TestType> callToTestType,\n                                    @NotNull PsiFile file) {\n     final PsiElement element = file.findElementAt(outline.getOffset());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDg0NjM1Ng=="}, "originalCommit": {"oid": "9a1a89ba27b1f8c6490f839dec6810d4c7160b70"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTYzMDA5OnYy", "diffSide": "RIGHT", "path": "src/io/flutter/run/common/CommonTestConfigUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMTowODoyN1rOFr3q4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMTozNjoxNlrOFr4fvw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NTE4Nw==", "bodyText": "nit: rather than two maps with the same key, define a class  with both the\nFltuterOutline and the Map<Integer, TestType> as fields.", "url": "https://github.com/flutter/flutter-intellij/pull/4385#discussion_r381545187", "createdAt": "2020-02-19T21:08:27Z", "author": {"login": "jacob314"}, "path": "src/io/flutter/run/common/CommonTestConfigUtils.java", "diffHunk": "@@ -64,49 +64,57 @@ public TestType asTestCall(@NotNull PsiElement element) {\n     return null;\n   }\n \n-  Map<DartCallExpression, TestType> cachedCallToTestType;\n+  private final Map<String, Map<Integer, TestType>> cachedCallToTestType = new HashMap<>();\n+  private final Map<String, FlutterOutline> pathToPreviouslyUsedOutline = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aac9cf121fc785c8b8de52811ccbedb089b9718a"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU1ODcxOQ==", "bodyText": "Done.", "url": "https://github.com/flutter/flutter-intellij/pull/4385#discussion_r381558719", "createdAt": "2020-02-19T21:36:16Z", "author": {"login": "DaveShuckerow"}, "path": "src/io/flutter/run/common/CommonTestConfigUtils.java", "diffHunk": "@@ -64,49 +64,57 @@ public TestType asTestCall(@NotNull PsiElement element) {\n     return null;\n   }\n \n-  Map<DartCallExpression, TestType> cachedCallToTestType;\n+  private final Map<String, Map<Integer, TestType>> cachedCallToTestType = new HashMap<>();\n+  private final Map<String, FlutterOutline> pathToPreviouslyUsedOutline = new HashMap<>();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NTE4Nw=="}, "originalCommit": {"oid": "aac9cf121fc785c8b8de52811ccbedb089b9718a"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTY0MzU0OnYy", "diffSide": "RIGHT", "path": "testSrc/unit/io/flutter/testing/FakeActiveEditorsOutlineService.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMToxMjo1MVrOFr3zag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMTozNjoxM1rOFr4fnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NzM3MA==", "bodyText": "nit: remove the result local variable.", "url": "https://github.com/flutter/flutter-intellij/pull/4385#discussion_r381547370", "createdAt": "2020-02-19T21:12:51Z", "author": {"login": "jacob314"}, "path": "testSrc/unit/io/flutter/testing/FakeActiveEditorsOutlineService.java", "diffHunk": "@@ -38,16 +40,20 @@ public void loadOutline(@NotNull String flutterOutlinePath) {\n       e.printStackTrace();\n       outlineContents = null;\n     }\n-    flutterOutline = null;\n+    FlutterOutline flutterOutline = null;\n     if (outlineContents != null) {\n       flutterOutline = FlutterOutline.fromJson(new JsonParser().parse(outlineContents).getAsJsonObject());\n     }\n+    pathToFlutterOutline.put(filePath, flutterOutline);\n+\n   }\n \n   @Nullable\n   @Override\n   public FlutterOutline getOutline(String path) {\n-    return flutterOutline;\n+    // The path string that we get will be prepended with a '/' character, compared to how the cache was initialized.\n+    final FlutterOutline result = pathToFlutterOutline.get(path);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aac9cf121fc785c8b8de52811ccbedb089b9718a"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU1ODY4Nw==", "bodyText": "Done.", "url": "https://github.com/flutter/flutter-intellij/pull/4385#discussion_r381558687", "createdAt": "2020-02-19T21:36:13Z", "author": {"login": "DaveShuckerow"}, "path": "testSrc/unit/io/flutter/testing/FakeActiveEditorsOutlineService.java", "diffHunk": "@@ -38,16 +40,20 @@ public void loadOutline(@NotNull String flutterOutlinePath) {\n       e.printStackTrace();\n       outlineContents = null;\n     }\n-    flutterOutline = null;\n+    FlutterOutline flutterOutline = null;\n     if (outlineContents != null) {\n       flutterOutline = FlutterOutline.fromJson(new JsonParser().parse(outlineContents).getAsJsonObject());\n     }\n+    pathToFlutterOutline.put(filePath, flutterOutline);\n+\n   }\n \n   @Nullable\n   @Override\n   public FlutterOutline getOutline(String path) {\n-    return flutterOutline;\n+    // The path string that we get will be prepended with a '/' character, compared to how the cache was initialized.\n+    final FlutterOutline result = pathToFlutterOutline.get(path);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU0NzM3MA=="}, "originalCommit": {"oid": "aac9cf121fc785c8b8de52811ccbedb089b9718a"}, "originalPosition": 44}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTcyNDc0OnYy", "diffSide": "RIGHT", "path": "src/io/flutter/run/common/CommonTestConfigUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMTozOTozN1rOFr4l3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMzo0MTozMFrOFr7tDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU2MDI4Nw==", "bodyText": "nit: the cleaner pattern for this in java is\nfinal entry = cache.get(path);", "url": "https://github.com/flutter/flutter-intellij/pull/4385#discussion_r381560287", "createdAt": "2020-02-19T21:39:37Z", "author": {"login": "jacob314"}, "path": "src/io/flutter/run/common/CommonTestConfigUtils.java", "diffHunk": "@@ -89,7 +87,7 @@ private void clearCachedInfo(String path) {\n     final String path = file.getVirtualFile().getPath();\n     final boolean outlineOutdated;\n     synchronized (this) {\n-      outlineOutdated = pathToPreviouslyUsedOutline.containsKey(path) && outline != pathToPreviouslyUsedOutline.get(path);\n+      outlineOutdated = cache.containsKey(path) && outline != cache.get(path).outline;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc8fa438e5bc6c9eebf97d833d5f9fbfef2d3a23"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYxMTI3Nw==", "bodyText": "Done.", "url": "https://github.com/flutter/flutter-intellij/pull/4385#discussion_r381611277", "createdAt": "2020-02-19T23:41:30Z", "author": {"login": "DaveShuckerow"}, "path": "src/io/flutter/run/common/CommonTestConfigUtils.java", "diffHunk": "@@ -89,7 +87,7 @@ private void clearCachedInfo(String path) {\n     final String path = file.getVirtualFile().getPath();\n     final boolean outlineOutdated;\n     synchronized (this) {\n-      outlineOutdated = pathToPreviouslyUsedOutline.containsKey(path) && outline != pathToPreviouslyUsedOutline.get(path);\n+      outlineOutdated = cache.containsKey(path) && outline != cache.get(path).outline;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU2MDI4Nw=="}, "originalCommit": {"oid": "fc8fa438e5bc6c9eebf97d833d5f9fbfef2d3a23"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM2MTcyNjg1OnYy", "diffSide": "RIGHT", "path": "src/io/flutter/run/common/CommonTestConfigUtils.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMTo0MDoyNVrOFr4nPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOVQyMzo0MToyOVrOFr7s_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU2MDYzNw==", "bodyText": "nit: cache the OutlineCache entry as a local variable so you don't have to read it out of a cache.", "url": "https://github.com/flutter/flutter-intellij/pull/4385#discussion_r381560637", "createdAt": "2020-02-19T21:40:25Z", "author": {"login": "jacob314"}, "path": "src/io/flutter/run/common/CommonTestConfigUtils.java", "diffHunk": "@@ -99,14 +97,8 @@ private void clearCachedInfo(String path) {\n     }\n \n     synchronized (this) {\n-      pathToPreviouslyUsedOutline.put(path, outline);\n-      // Visit the fields on the outline to get which calls are actual named tests.\n-      if (!cachedCallToTestType.containsKey(path)) {\n-        cachedCallToTestType.put(path, new HashMap<>());\n-        populateTestTypeMap(outline, cachedCallToTestType.get(path), file);\n-      }\n-\n-      return cachedCallToTestType.get(path);\n+      cache.put(path, new OutlineCache(outline, file));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fc8fa438e5bc6c9eebf97d833d5f9fbfef2d3a23"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTYxMTI2Mw==", "bodyText": "Done.", "url": "https://github.com/flutter/flutter-intellij/pull/4385#discussion_r381611263", "createdAt": "2020-02-19T23:41:29Z", "author": {"login": "DaveShuckerow"}, "path": "src/io/flutter/run/common/CommonTestConfigUtils.java", "diffHunk": "@@ -99,14 +97,8 @@ private void clearCachedInfo(String path) {\n     }\n \n     synchronized (this) {\n-      pathToPreviouslyUsedOutline.put(path, outline);\n-      // Visit the fields on the outline to get which calls are actual named tests.\n-      if (!cachedCallToTestType.containsKey(path)) {\n-        cachedCallToTestType.put(path, new HashMap<>());\n-        populateTestTypeMap(outline, cachedCallToTestType.get(path), file);\n-      }\n-\n-      return cachedCallToTestType.get(path);\n+      cache.put(path, new OutlineCache(outline, file));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTU2MDYzNw=="}, "originalCommit": {"oid": "fc8fa438e5bc6c9eebf97d833d5f9fbfef2d3a23"}, "originalPosition": 37}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 282, "cost": 1, "resetAt": "2021-11-12T18:49:56Z"}}}