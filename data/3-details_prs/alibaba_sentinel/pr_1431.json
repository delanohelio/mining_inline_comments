{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA4OTI2MDMy", "number": 1431, "title": "[1416]  fix sentinel-apache-dubbo-adapter full GC problem", "bodyText": "Does this pull request fix one issue?\nfix #1416\nDescribe how you did it\nThe reason for  Full GC is  CtEntry   stored in RpcContext can't be clear correctly when application process a nested dubbo-rpc. For example: [A(client)] -> [B(provider) -> C(provider)].\nAs we know that, one-time dubbo-rpc in sentinel will create two CtEntry: interfaceEntry, methodEntry. According to design, at the beginning of  rpc  we create refer-CtEntries and  put them it Dubbo#RpcContext, clear the Dubbo#RpcContext's refer-CtEntries when finised. It does well when just do a direct rpc. But while lauch a  nested dubbo-rpc [B(provider) -> C(provider)]), The B(provider)'s CtEntries will not be clear correctly. Because B and C use the fixed-same key for store CtEntries. C  remove the key firstly, B will not find the key ,skip the clear logic   lead to   ContextUtil.exit()  take no effect  the key point lead to Full GC.\nStore Logic\ninterfaceEntry = SphU.entry(interfaceResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.IN);\nrpcContext.set(DubboUtils.DUBBO_INTERFACE_ENTRY_KEY, interfaceEntry);\nmethodEntry = SphU.entry(methodResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.IN, invocation.getArguments());\nrpcContext.set(DubboUtils.DUBBO_METHOD_ENTRY_KEY, methodEntry);\n\nClear Logic\nEntry interfaceEntry = (Entry) RpcContext.getContext().get(DubboUtils.DUBBO_INTERFACE_ENTRY_KEY);\nEntry methodEntry = (Entry) RpcContext.getContext().get(DubboUtils.DUBBO_METHOD_ENTRY_KEY);\n  if (methodEntry != null) {\n            Tracer.traceEntry(throwable, methodEntry);\n            methodEntry.exit();\n            RpcContext.getContext().remove(DubboUtils.DUBBO_METHOD_ENTRY_KEY);\n }\n if (interfaceEntry != null) {\n            Tracer.traceEntry(throwable, interfaceEntry);\n            interfaceEntry.exit();\n            RpcContext.getContext().remove(DubboUtils.DUBBO_INTERFACE_ENTRY_KEY);\n  }\n\nSentinel ContextUtil is a Thread-Local Design, Dubbo use thread-pool manager dubbo-rpc thread.\nif  ContextUtil.exit() don't take effect, when new Request come in the context  the  more entries will refer which can't be collected by  gc.  Over time the full gc will occr.\nAnd  the solution is also simple: just assign different key to different request.\nDescribe how to verify it\nSpecial notes for reviews", "createdAt": "2020-04-25T15:33:47Z", "url": "https://github.com/alibaba/Sentinel/pull/1431", "merged": true, "mergeCommit": {"oid": "5d439adf60d33ef8a99b35075684354e900a73a1"}, "closed": true, "closedAt": "2020-06-04T12:30:57Z", "author": {"login": "linlinisme"}, "timelineItems": {"totalCount": 14, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcbGdX0gH2gAyNDA4OTI2MDMyOmVkM2IyZWUzZDE4YTg4ZTY4Y2FiM2M5NjJjOWRlODZiMWIxYjBiNTU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcn9Pd_AFqTQyNDM5MDk1Mw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "ed3b2ee3d18a88e68cab3c962c9de86b1b1b0b55", "author": {"user": null}, "url": "https://github.com/alibaba/Sentinel/commit/ed3b2ee3d18a88e68cab3c962c9de86b1b1b0b55", "committedDate": "2020-04-25T13:53:33Z", "message": "[1416] fix sentinel-apache-dubbo-adapter full gc problem"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2dbdd715f5a22b4a73e682d979d96bbc6c2615fc", "author": {"user": null}, "url": "https://github.com/alibaba/Sentinel/commit/2dbdd715f5a22b4a73e682d979d96bbc6c2615fc", "committedDate": "2020-04-25T13:54:21Z", "message": "[1416] fix sentinel-apache-dubbo-adapter full gc problem"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b854e2d7ae185f8d0efb5a85caee432d436a6757", "author": {"user": null}, "url": "https://github.com/alibaba/Sentinel/commit/b854e2d7ae185f8d0efb5a85caee432d436a6757", "committedDate": "2020-04-25T15:53:38Z", "message": "[1416] fix test error and update dubbo version"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69f51170046bce4d912fed6ddd64c88f9e540c36", "author": {"user": null}, "url": "https://github.com/alibaba/Sentinel/commit/69f51170046bce4d912fed6ddd64c88f9e540c36", "committedDate": "2020-04-25T16:01:35Z", "message": "[1416] fix test error and update dubbo version"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNDA3MzMz", "url": "https://github.com/alibaba/Sentinel/pull/1431#pullrequestreview-400407333", "createdAt": "2020-04-25T16:09:49Z", "commit": {"oid": "2dbdd715f5a22b4a73e682d979d96bbc6c2615fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxNjowOTo0OVrOGL3NHw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxNjowOTo0OVrOGL3NHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA5MTk5OQ==", "bodyText": "It's good adding a DubboUtils#getInterfaceName for resue.\nNow the interfaceResource and methodResource key are merged into one key, but the key name is methodResourceName, is it better using a fixed key(Provider and consumer use different fix key)?\n@sczyh30 How about your opinion?", "url": "https://github.com/alibaba/Sentinel/pull/1431#discussion_r415091999", "createdAt": "2020-04-25T16:09:49Z", "author": {"login": "cdfive"}, "path": "sentinel-adapter/sentinel-apache-dubbo-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/dubbo/SentinelDubboProviderFilter.java", "diffHunk": "@@ -61,15 +61,13 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept\n         Entry methodEntry = null;\n         try {\n             String methodResourceName = DubboUtils.getResourceName(invoker, invocation, DubboConfig.getDubboProviderPrefix());\n-            String interfaceResourceName = DubboConfig.getDubboInterfaceGroupAndVersionEnabled() ? invoker.getUrl().getColonSeparatedKey()\n-                    : invoker.getInterface().getName();\n+            String interfaceResourceName = DubboUtils.getInterfaceName(invoker);\n             // Only need to create entrance context at provider side, as context will take effect\n             // at entrance of invocation chain only (for inbound traffic).\n             ContextUtil.enter(methodResourceName, application);\n             interfaceEntry = SphU.entry(interfaceResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.IN);\n-            rpcContext.set(DubboUtils.DUBBO_INTERFACE_ENTRY_KEY, interfaceEntry);\n             methodEntry = SphU.entry(methodResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.IN, invocation.getArguments());\n-            rpcContext.set(DubboUtils.DUBBO_METHOD_ENTRY_KEY, methodEntry);\n+            rpcContext.set(methodResourceName, new Entry[]{interfaceEntry, methodEntry});\n             return invoker.invoke(invocation);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dbdd715f5a22b4a73e682d979d96bbc6c2615fc"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNDA4MTA4", "url": "https://github.com/alibaba/Sentinel/pull/1431#pullrequestreview-400408108", "createdAt": "2020-04-25T16:18:32Z", "commit": {"oid": "2dbdd715f5a22b4a73e682d979d96bbc6c2615fc"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxNjoxODozMlrOGL3TcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNVQxNjoxODozMlrOGL3TcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTA5MzYxNw==", "bodyText": "As both SentinelDubboProviderFilter and SentinelDubboConsumerFilter share this method,  DubboConfig.getDubboConsumerPrefix() may not correct, when providerPrefix, consumerPrefix have different settings.\nIf use methodResourceName as key, here we may need to differentiate provider and consumer.", "url": "https://github.com/alibaba/Sentinel/pull/1431#discussion_r415093617", "createdAt": "2020-04-25T16:18:32Z", "author": {"login": "cdfive"}, "path": "sentinel-adapter/sentinel-apache-dubbo-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/dubbo/BaseSentinelDubboFilter.java", "diffHunk": "@@ -38,43 +42,46 @@ public BaseSentinelDubboFilter() {\n     static class SentinelDubboListener implements Listener {\n \n         public void onResponse(Result appResponse, Invoker<?> invoker, Invocation invocation) {\n-            onSuccess(appResponse, invoker);\n+            onSuccess(appResponse, invoker, invocation);\n         }\n \n         //for compatible dubbo 2.7.5 rename onResponse to onMessage\n         public void onMessage(Result appResponse, Invoker<?> invoker, Invocation invocation) {\n-            onSuccess(appResponse, invoker);\n+            onSuccess(appResponse, invoker, invocation);\n         }\n \n-        private void onSuccess(Result appResponse, Invoker<?> invoker) {\n+        private void onSuccess(Result appResponse, Invoker<?> invoker, Invocation invocation) {\n             if (DubboConfig.getDubboBizExceptionTraceEnabled()) {\n-                traceAndExit(appResponse.getException(), invoker.getUrl());\n+                traceAndExit(appResponse.getException(), invoker, invocation);\n             } else {\n-                traceAndExit(null, invoker.getUrl());\n+                traceAndExit(null, invoker, invocation);\n             }\n         }\n \n         @Override\n         public void onError(Throwable t, Invoker<?> invoker, Invocation invocation) {\n-            traceAndExit(t, invoker.getUrl());\n+            traceAndExit(t, invoker, invocation);\n         }\n \n     }\n \n-    static void traceAndExit(Throwable throwable, URL url) {\n-        Entry interfaceEntry = (Entry) RpcContext.getContext().get(DubboUtils.DUBBO_INTERFACE_ENTRY_KEY);\n-        Entry methodEntry = (Entry) RpcContext.getContext().get(DubboUtils.DUBBO_METHOD_ENTRY_KEY);\n-        if (methodEntry != null) {\n-            Tracer.traceEntry(throwable, methodEntry);\n-            methodEntry.exit();\n-            RpcContext.getContext().remove(DubboUtils.DUBBO_METHOD_ENTRY_KEY);\n-        }\n-        if (interfaceEntry != null) {\n-            Tracer.traceEntry(throwable, interfaceEntry);\n-            interfaceEntry.exit();\n-            RpcContext.getContext().remove(DubboUtils.DUBBO_INTERFACE_ENTRY_KEY);\n+    static void traceAndExit(Throwable throwable, Invoker invoker, Invocation invocation) {\n+        String methodResourceName = DubboUtils.getResourceName(invoker, invocation, DubboConfig.getDubboConsumerPrefix());\n+        Entry[] entries = (Entry[]) RpcContext.getContext().get(methodResourceName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2dbdd715f5a22b4a73e682d979d96bbc6c2615fc"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f9ad2bd7f6941f55db733af02b2a3df3b70770ff", "author": {"user": null}, "url": "https://github.com/alibaba/Sentinel/commit/f9ad2bd7f6941f55db733af02b2a3df3b70770ff", "committedDate": "2020-04-26T01:07:09Z", "message": "[1416] BaseSentinelDubboFilter add getMethodName() and getInterfaceName() method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNDk2Njkw", "url": "https://github.com/alibaba/Sentinel/pull/1431#pullrequestreview-400496690", "createdAt": "2020-04-26T12:08:13Z", "commit": {"oid": "f9ad2bd7f6941f55db733af02b2a3df3b70770ff"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMjowODoxNFrOGMDmGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxMjowODoxNFrOGMDmGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTI5NTAwMA==", "bodyText": "This may cause leak of interfaceEntry when the methodEntry is blocked. Refer #1124 (comment)", "url": "https://github.com/alibaba/Sentinel/pull/1431#discussion_r415295000", "createdAt": "2020-04-26T12:08:14Z", "author": {"login": "sczyh30"}, "path": "sentinel-adapter/sentinel-apache-dubbo-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/dubbo/SentinelDubboProviderFilter.java", "diffHunk": "@@ -60,16 +70,14 @@ public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcExcept\n         Entry interfaceEntry = null;\n         Entry methodEntry = null;\n         try {\n-            String methodResourceName = DubboUtils.getResourceName(invoker, invocation, DubboConfig.getDubboProviderPrefix());\n-            String interfaceResourceName = DubboConfig.getDubboInterfaceGroupAndVersionEnabled() ? invoker.getUrl().getColonSeparatedKey()\n-                    : invoker.getInterface().getName();\n+            String methodResourceName = getMethodName(invoker, invocation);\n+            String interfaceResourceName = getInterfaceName(invoker);\n             // Only need to create entrance context at provider side, as context will take effect\n             // at entrance of invocation chain only (for inbound traffic).\n             ContextUtil.enter(methodResourceName, application);\n             interfaceEntry = SphU.entry(interfaceResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.IN);\n-            rpcContext.set(DubboUtils.DUBBO_INTERFACE_ENTRY_KEY, interfaceEntry);\n             methodEntry = SphU.entry(methodResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.IN, invocation.getArguments());\n-            rpcContext.set(DubboUtils.DUBBO_METHOD_ENTRY_KEY, methodEntry);\n+            rpcContext.set(methodResourceName, new Entry[]{interfaceEntry, methodEntry});", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9ad2bd7f6941f55db733af02b2a3df3b70770ff"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNTEyMTcw", "url": "https://github.com/alibaba/Sentinel/pull/1431#pullrequestreview-400512170", "createdAt": "2020-04-26T14:42:28Z", "commit": {"oid": "f9ad2bd7f6941f55db733af02b2a3df3b70770ff"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNDo0MjoyOFrOGMFf3w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNDo0MjoyOFrOGMFf3w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMyNjE3NQ==", "bodyText": "It's better to keep only one blank line here.\nAlso Line#78,Line#80.\nLine#104 can be removed for better and uniform formatting.", "url": "https://github.com/alibaba/Sentinel/pull/1431#discussion_r415326175", "createdAt": "2020-04-26T14:42:28Z", "author": {"login": "cdfive"}, "path": "sentinel-adapter/sentinel-apache-dubbo-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/dubbo/BaseSentinelDubboFilter.java", "diffHunk": "@@ -35,47 +38,69 @@ public BaseSentinelDubboFilter() {\n         this.listener = new SentinelDubboListener();\n     }\n \n-    static class SentinelDubboListener implements Listener {\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f9ad2bd7f6941f55db733af02b2a3df3b70770ff"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f224ff7522644b9d0284c1ef01d51eca63fe17b", "author": {"user": null}, "url": "https://github.com/alibaba/Sentinel/commit/1f224ff7522644b9d0284c1ef01d51eca63fe17b", "committedDate": "2020-04-28T01:23:57Z", "message": "[1416] refactor  SentinelDubboConsumerFilter and SentinelDubboProviderFilter"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "57c689259c3cc9265f66df596c86e0159eb7b2d7", "author": {"user": null}, "url": "https://github.com/alibaba/Sentinel/commit/57c689259c3cc9265f66df596c86e0159eb7b2d7", "committedDate": "2020-04-28T14:19:00Z", "message": "[1416] BaseSentinelDubboFilter add getMethodName() and getInterfaceName() method"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE4MjIxNDIz", "url": "https://github.com/alibaba/Sentinel/pull/1431#pullrequestreview-418221423", "createdAt": "2020-05-26T11:51:49Z", "commit": {"oid": "57c689259c3cc9265f66df596c86e0159eb7b2d7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMTo1MTo1MFrOGaau6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxMTo1MTo1MFrOGaau6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDM1NDE1Mw==", "bodyText": "How about using Deque instead to avoid bad performance? Stack is derived from Vector, whose operations are wrapped with synchronized.", "url": "https://github.com/alibaba/Sentinel/pull/1431#discussion_r430354153", "createdAt": "2020-05-26T11:51:50Z", "author": {"login": "sczyh30"}, "path": "sentinel-adapter/sentinel-apache-dubbo-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/dubbo/SentinelDubboConsumerFilter.java", "diffHunk": "@@ -52,33 +55,87 @@ public SentinelDubboConsumerFilter() {\n         RecordLog.info(\"Sentinel Apache Dubbo consumer filter initialized\");\n     }\n \n+    @Override\n+    String getMethodName(Invoker invoker, Invocation invocation) {\n+        return DubboUtils.getResourceName(invoker, invocation, DubboConfig.getDubboConsumerPrefix());\n+    }\n+\n+    @Override\n+    String getInterfaceName(Invoker invoker) {\n+        return DubboUtils.getInterfaceName(invoker);\n+    }\n+\n     @Override\n     public Result invoke(Invoker<?> invoker, Invocation invocation) throws RpcException {\n+        InvokeMode invokeMode = RpcUtils.getInvokeMode(invoker.getUrl(), invocation);\n+        if (InvokeMode.SYNC == invokeMode) {\n+            return syncInvoke(invoker, invocation);\n+        } else {\n+            return asyncInvoke(invoker, invocation);\n+        }\n+\n+    }\n+\n+    private Result syncInvoke(Invoker<?> invoker, Invocation invocation) {\n         Entry interfaceEntry = null;\n         Entry methodEntry = null;\n-        RpcContext rpcContext = RpcContext.getContext();\n+        String methodResourceName = getMethodName(invoker, invocation);\n+        String interfaceResourceName = getInterfaceName(invoker);\n         try {\n-            String methodResourceName = DubboUtils.getResourceName(invoker, invocation, DubboConfig.getDubboConsumerPrefix());\n-            String interfaceResourceName = DubboConfig.getDubboInterfaceGroupAndVersionEnabled() ? invoker.getUrl().getColonSeparatedKey()\n-                    : invoker.getInterface().getName();\n-            InvokeMode invokeMode = RpcUtils.getInvokeMode(invoker.getUrl(), invocation);\n-\n-            if (InvokeMode.SYNC == invokeMode) {\n-                interfaceEntry = SphU.entry(interfaceResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.OUT);\n-                rpcContext.set(DubboUtils.DUBBO_INTERFACE_ENTRY_KEY, interfaceEntry);\n-                methodEntry = SphU.entry(methodResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.OUT, invocation.getArguments());\n-            } else {\n-                // should generate the AsyncEntry when the invoke model in future or async\n-                interfaceEntry = SphU.asyncEntry(interfaceResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.OUT);\n-                rpcContext.set(DubboUtils.DUBBO_INTERFACE_ENTRY_KEY, interfaceEntry);\n-                methodEntry = SphU.asyncEntry(methodResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.OUT, 1, invocation.getArguments());\n+            interfaceEntry = SphU.entry(interfaceResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.OUT);\n+            methodEntry = SphU.entry(methodResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.OUT, invocation.getArguments());\n+            Result result = invoker.invoke(invocation);\n+            if (result.hasException()) {\n+                Tracer.traceEntry(result.getException(), interfaceEntry);\n+                Tracer.traceEntry(result.getException(), methodEntry);\n+            }\n+            return result;\n+        } catch (BlockException e) {\n+            return DubboFallbackRegistry.getConsumerFallback().handle(invoker, invocation, e);\n+        } catch (RpcException e) {\n+            Tracer.traceEntry(e, interfaceEntry);\n+            Tracer.traceEntry(e, methodEntry);\n+            throw e;\n+        } finally {\n+            if (methodEntry != null) {\n+                methodEntry.exit();\n+            }\n+            if (interfaceEntry != null) {\n+                interfaceEntry.exit();\n             }\n-            rpcContext.set(DubboUtils.DUBBO_METHOD_ENTRY_KEY, methodEntry);\n-            return invoker.invoke(invocation);\n+        }\n+    }\n+\n+\n+    private Result asyncInvoke(Invoker<?> invoker, Invocation invocation) {\n+        Stack<Entry> entryStack = new Stack<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "57c689259c3cc9265f66df596c86e0159eb7b2d7"}, "originalPosition": 96}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0766b9ca709483a4c06f68d7826a45092cc7cb71", "author": {"user": null}, "url": "https://github.com/alibaba/Sentinel/commit/0766b9ca709483a4c06f68d7826a45092cc7cb71", "committedDate": "2020-05-26T15:41:04Z", "message": "[1416] replace Stack with LinkedList for improve performance\n\n[1416] replace Stack with LinkedList for improve performance"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI0MzkwOTUz", "url": "https://github.com/alibaba/Sentinel/pull/1431#pullrequestreview-424390953", "createdAt": "2020-06-04T12:30:14Z", "commit": {"oid": "0766b9ca709483a4c06f68d7826a45092cc7cb71"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3915, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}