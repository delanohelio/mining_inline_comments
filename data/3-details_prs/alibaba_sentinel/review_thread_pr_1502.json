{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIyMjc1Mjg0", "number": 1502, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMzo0OTo1OVrOD_QTtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNDoyMzowMFrOD_smtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjU0MDY5OnYy", "diffSide": "RIGHT", "path": "sentinel-extension/sentinel-datasource-eureka/src/main/java/com/alibaba/csp/sentinel/datasource/eureka/EurekaDataSource.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMzo0OTo1OVrOGZ0FAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMzo0OTo1OVrOGZ0FAQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcyMDgzMw==", "bodyText": "Should you  add the license header here?", "url": "https://github.com/alibaba/Sentinel/pull/1502#discussion_r429720833", "createdAt": "2020-05-25T03:49:59Z", "author": {"login": "yunfeiyanggzq"}, "path": "sentinel-extension/sentinel-datasource-eureka/src/main/java/com/alibaba/csp/sentinel/datasource/eureka/EurekaDataSource.java", "diffHunk": "@@ -0,0 +1,200 @@\n+package com.alibaba.csp.sentinel.datasource.eureka;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a7ab2eb95fd74f93d99145489954dda4b3c51df"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY3NjU0NjA1OnYy", "diffSide": "RIGHT", "path": "sentinel-extension/sentinel-datasource-eureka/README.md", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMzo1NToxMlrOGZ0IAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNVQwMzo1NToxMlrOGZ0IAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyOTcyMTYwMg==", "bodyText": "you need to call [Eureka-REST-operations](https://github.com/Netflix/eureka/wiki/Eureka-REST-operations) update instance metadata: ->you need to call [Eureka-REST-operations](https://github.com/Netflix/eureka/wiki/Eureka-REST-operations) to  update instance metadata: miss a  to?", "url": "https://github.com/alibaba/Sentinel/pull/1502#discussion_r429721602", "createdAt": "2020-05-25T03:55:12Z", "author": {"login": "yunfeiyanggzq"}, "path": "sentinel-extension/sentinel-datasource-eureka/README.md", "diffHunk": "@@ -0,0 +1,62 @@\n+# Sentinel DataSource Eureka\n+\n+Sentinel DataSource Eureka provides integration with [Eureka](https://github.com/Netflix/eureka) so that Eureka\n+can be the dynamic rule data source of Sentinel.\n+\n+To use Sentinel DataSource Eureka, you should add the following dependency:\n+\n+```xml\n+<dependency>\n+    <groupId>com.alibaba.csp</groupId>\n+    <artifactId>sentinel-datasource-eureka</artifactId>\n+    <version>x.y.z</version>\n+</dependency>\n+```\n+\n+Then you can create an `EurekaDataSource` and register to rule managers.\n+\n+SDK usage:\n+\n+```java\n+EurekaDataSource<List<FlowRule>> eurekaDataSource = new EurekaDataSource(\"app-id\", \"instance-id\",\n+        Arrays.asList(\"http://localhost:8761/eureka\", \"http://localhost:8762/eureka\", \"http://localhost:8763/eureka\"),\n+        \"rule-key\", new Converter<String, List<FlowRule>>() {\n+    @Override\n+    public List<FlowRule> convert(String o) {\n+        return JSON.parseObject(o, new TypeReference<List<FlowRule>>() {\n+        });\n+    }\n+});\n+FlowRuleManager.register2Property(eurekaDataSource.getProperty());\n+```\n+\n+Example for Spring Cloud Application:\n+\n+```java\n+@Bean\n+public EurekaDataSource<List<FlowRule>> eurekaDataSource(EurekaInstanceConfig eurekaInstanceConfig, EurekaClientConfig eurekaClientConfig) {\n+\n+    List<String> serviceUrls = EndpointUtils.getServiceUrlsFromConfig(eurekaClientConfig,\n+            eurekaInstanceConfig.getMetadataMap().get(\"zone\"), eurekaClientConfig.shouldPreferSameZoneEureka());\n+\n+    EurekaDataSource<List<FlowRule>> eurekaDataSource = new EurekaDataSource(eurekaInstanceConfig.getAppname(),\n+            eurekaInstanceConfig.getInstanceId(), serviceUrls, \"flowrules\", new Converter<String, List<FlowRule>>() {\n+        @Override\n+        public List<FlowRule> convert(String o) {\n+            return JSON.parseObject(o, new TypeReference<List<FlowRule>>() {\n+            });\n+        }\n+    });\n+\n+    FlowRuleManager.register2Property(eurekaDataSource.getProperty());\n+    return eurekaDataSource;\n+}\n+\n+```\n+\n+To refresh the rule dynamically,you need to call [Eureka-REST-operations](https://github.com/Netflix/eureka/wiki/Eureka-REST-operations)\n+update instance metadata:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5a7ab2eb95fd74f93d99145489954dda4b3c51df"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY4MTE3Njg2OnYy", "diffSide": "RIGHT", "path": "sentinel-extension/sentinel-datasource-eureka/src/main/java/com/alibaba/csp/sentinel/datasource/eureka/EurekaDataSource.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yNlQxNDoyMzowMFrOGagrqg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOFQwMjoxNTowMFrOGbjXaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ1MTYyNg==", "bodyText": "#Line100,#Line101 can be removed since the super constructor has checked their validation.\nValid the parameters in order seems better reading : )", "url": "https://github.com/alibaba/Sentinel/pull/1502#discussion_r430451626", "createdAt": "2020-05-26T14:23:00Z", "author": {"login": "cdfive"}, "path": "sentinel-extension/sentinel-datasource-eureka/src/main/java/com/alibaba/csp/sentinel/datasource/eureka/EurekaDataSource.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.csp.sentinel.datasource.eureka;\n+\n+import com.alibaba.csp.sentinel.datasource.AutoRefreshDataSource;\n+import com.alibaba.csp.sentinel.datasource.Converter;\n+import com.alibaba.csp.sentinel.datasource.ReadableDataSource;\n+import com.alibaba.csp.sentinel.log.RecordLog;\n+import com.alibaba.csp.sentinel.util.AssertUtil;\n+import com.alibaba.csp.sentinel.util.StringUtil;\n+import com.alibaba.fastjson.JSON;\n+\n+import java.io.*;\n+import java.net.HttpURLConnection;\n+import java.net.InetAddress;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * <p>\n+ * A {@link ReadableDataSource} based on Eureka. This class will automatically\n+ * fetches the metadata of the instance every period.\n+ * </p>\n+ * <p>\n+ * Limitations: Default refresh interval is 10s. Because there is synchronization between eureka servers,\n+ * it may take longer to take effect.\n+ * </p>\n+ *\n+ * @author: liyang\n+ * @create: 2020-05-23 12:01\n+ */\n+public class EurekaDataSource<T> extends AutoRefreshDataSource<String, T> {\n+\n+    private static final long DEFAULT_REFRESH_MS = 10000;\n+\n+    /**\n+     * connect timeout: 3s\n+     */\n+    private static final int DEFAULT_CONNECT_TIMEOUT_MS = 3000;\n+\n+    /**\n+     * read timeout: 30s\n+     */\n+    private static final int DEFAULT_READ_TIMEOUT_MS = 30000;\n+\n+\n+    private int connectTimeoutMills;\n+\n+\n+    private int readTimeoutMills;\n+\n+    /**\n+     * eureka instance appid\n+     */\n+    private String appId;\n+    /**\n+     * eureka instance id\n+     */\n+    private String instanceId;\n+\n+    /**\n+     * collect of eureka server urls\n+     */\n+    private List<String> serviceUrls;\n+\n+    /**\n+     * metadata key of the rule source\n+     */\n+    private String ruleKey;\n+\n+\n+    public EurekaDataSource(String appId, String instanceId, List<String> serviceUrls, String ruleKey,\n+                            Converter<String, T> configParser) {\n+        this(appId, instanceId, serviceUrls, ruleKey, configParser, DEFAULT_REFRESH_MS, DEFAULT_CONNECT_TIMEOUT_MS, DEFAULT_READ_TIMEOUT_MS);\n+    }\n+\n+\n+    public EurekaDataSource(String appId, String instanceId, List<String> serviceUrls, String ruleKey,\n+                            Converter<String, T> configParser, long refreshMs, int connectTimeoutMills,\n+                            int readTimeoutMills) {\n+        super(configParser, refreshMs);\n+        AssertUtil.notNull(appId, \"appId can't be null\");\n+        AssertUtil.notNull(instanceId, \"instanceId can't be null\");\n+        AssertUtil.notNull(ruleKey, \"ruleKey can't be null\");\n+        AssertUtil.notNull(configParser, \"configParser can't be null\");\n+        AssertUtil.assertState(refreshMs > 0, \"refreshMs must be greater than 0\");\n+        AssertUtil.assertState(connectTimeoutMills > 0, \"connectTimeoutMills must be greater than 0\");\n+        AssertUtil.assertState(readTimeoutMills > 0, \"readTimeoutMills must be greater than 0\");\n+        AssertUtil.assertNotEmpty(serviceUrls, \"serviceUrls can't be empty\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e54ed1d465a4661440615cce43cbe592d99e8c99"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMTU0NDE3MQ==", "bodyText": "Good idea!", "url": "https://github.com/alibaba/Sentinel/pull/1502#discussion_r431544171", "createdAt": "2020-05-28T02:15:00Z", "author": {"login": "pleasecheckhere2016"}, "path": "sentinel-extension/sentinel-datasource-eureka/src/main/java/com/alibaba/csp/sentinel/datasource/eureka/EurekaDataSource.java", "diffHunk": "@@ -0,0 +1,215 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.csp.sentinel.datasource.eureka;\n+\n+import com.alibaba.csp.sentinel.datasource.AutoRefreshDataSource;\n+import com.alibaba.csp.sentinel.datasource.Converter;\n+import com.alibaba.csp.sentinel.datasource.ReadableDataSource;\n+import com.alibaba.csp.sentinel.log.RecordLog;\n+import com.alibaba.csp.sentinel.util.AssertUtil;\n+import com.alibaba.csp.sentinel.util.StringUtil;\n+import com.alibaba.fastjson.JSON;\n+\n+import java.io.*;\n+import java.net.HttpURLConnection;\n+import java.net.InetAddress;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+\n+/**\n+ * <p>\n+ * A {@link ReadableDataSource} based on Eureka. This class will automatically\n+ * fetches the metadata of the instance every period.\n+ * </p>\n+ * <p>\n+ * Limitations: Default refresh interval is 10s. Because there is synchronization between eureka servers,\n+ * it may take longer to take effect.\n+ * </p>\n+ *\n+ * @author: liyang\n+ * @create: 2020-05-23 12:01\n+ */\n+public class EurekaDataSource<T> extends AutoRefreshDataSource<String, T> {\n+\n+    private static final long DEFAULT_REFRESH_MS = 10000;\n+\n+    /**\n+     * connect timeout: 3s\n+     */\n+    private static final int DEFAULT_CONNECT_TIMEOUT_MS = 3000;\n+\n+    /**\n+     * read timeout: 30s\n+     */\n+    private static final int DEFAULT_READ_TIMEOUT_MS = 30000;\n+\n+\n+    private int connectTimeoutMills;\n+\n+\n+    private int readTimeoutMills;\n+\n+    /**\n+     * eureka instance appid\n+     */\n+    private String appId;\n+    /**\n+     * eureka instance id\n+     */\n+    private String instanceId;\n+\n+    /**\n+     * collect of eureka server urls\n+     */\n+    private List<String> serviceUrls;\n+\n+    /**\n+     * metadata key of the rule source\n+     */\n+    private String ruleKey;\n+\n+\n+    public EurekaDataSource(String appId, String instanceId, List<String> serviceUrls, String ruleKey,\n+                            Converter<String, T> configParser) {\n+        this(appId, instanceId, serviceUrls, ruleKey, configParser, DEFAULT_REFRESH_MS, DEFAULT_CONNECT_TIMEOUT_MS, DEFAULT_READ_TIMEOUT_MS);\n+    }\n+\n+\n+    public EurekaDataSource(String appId, String instanceId, List<String> serviceUrls, String ruleKey,\n+                            Converter<String, T> configParser, long refreshMs, int connectTimeoutMills,\n+                            int readTimeoutMills) {\n+        super(configParser, refreshMs);\n+        AssertUtil.notNull(appId, \"appId can't be null\");\n+        AssertUtil.notNull(instanceId, \"instanceId can't be null\");\n+        AssertUtil.notNull(ruleKey, \"ruleKey can't be null\");\n+        AssertUtil.notNull(configParser, \"configParser can't be null\");\n+        AssertUtil.assertState(refreshMs > 0, \"refreshMs must be greater than 0\");\n+        AssertUtil.assertState(connectTimeoutMills > 0, \"connectTimeoutMills must be greater than 0\");\n+        AssertUtil.assertState(readTimeoutMills > 0, \"readTimeoutMills must be greater than 0\");\n+        AssertUtil.assertNotEmpty(serviceUrls, \"serviceUrls can't be empty\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMDQ1MTYyNg=="}, "originalCommit": {"oid": "e54ed1d465a4661440615cce43cbe592d99e8c99"}, "originalPosition": 104}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4181, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}