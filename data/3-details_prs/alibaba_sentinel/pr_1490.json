{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE5NTY2NTI4", "number": 1490, "title": "Refactor degrade hierarchy with new circuit breaker mechanism and improve strategy", "bodyText": "Describe what this PR does / why we need it\nRefactor legacy degrade hierarchy with new circuit breaker mechanism and improve strategy.\nDoes this pull request fix one issue?\nResolves #1421, #1032, #951, #154, #308, #56\nDescribe how you did it\n\nAdd CircuitBreaker abstraction (with half-open state) and add circuit breaker state change event observer support. Now Sentinel follows the canonical circuit breaker pattern (with some improvements).\nMake statistics of each rule dependent (to support arbitrary statistic interval).\nImprove RTT-based circuit breaking strategy (avg RT \u2192 slow request ratio).\nAdd simple \"probe\" mechanism (aka. half-open).\nRefactor mechanism of metric recording and state change handling for circuit breakers: record RT and error when requests have completed (i.e. onExit, based on #1420).\n\nDescribe how to verify it\nRun the test cases and demo.\nSpecial notes for reviews\nThis PR contains internal breaking changes (and some behavioral changes for RT-based circuit breaking).", "createdAt": "2020-05-18T15:12:13Z", "url": "https://github.com/alibaba/Sentinel/pull/1490", "merged": true, "mergeCommit": {"oid": "19db20f00d7f8334de67d03f90ead22bf998530c"}, "closed": true, "closedAt": "2020-07-30T11:00:16Z", "author": {"login": "sczyh30"}, "timelineItems": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcihmEEgBqjMzNDc4ODkxNzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc5ZWVLgFqTQ1NjgyNTI0NA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "df75e2224114fdd131148736519ba0300843c8da", "author": {"user": {"login": "sczyh30", "name": "Eric Zhao"}}, "url": "https://github.com/alibaba/Sentinel/commit/df75e2224114fdd131148736519ba0300843c8da", "committedDate": "2020-05-18T15:00:59Z", "message": "Update test cases for circuit breaking\n\nSigned-off-by: Eric Zhao <sczyh16@gmail.com>"}, "afterCommit": {"oid": "c017b12789fd86fb0e42955696ce74dcef09c94f", "author": {"user": {"login": "sczyh30", "name": "Eric Zhao"}}, "url": "https://github.com/alibaba/Sentinel/commit/c017b12789fd86fb0e42955696ce74dcef09c94f", "committedDate": "2020-05-18T15:27:25Z", "message": "Update test cases for circuit breaking\n\nSigned-off-by: Eric Zhao <sczyh16@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1MTYzNjc1", "url": "https://github.com/alibaba/Sentinel/pull/1490#pullrequestreview-415163675", "createdAt": "2020-05-20T09:40:32Z", "commit": {"oid": "4c043ed94b2e949a7e8871690e0d9008d273efdd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwOTo0MDozMlrOGYDjhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwOTo0MDozMlrOGYDjhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg3NzI1Mg==", "bodyText": "Inside getExistingSameCbOrNew method, the design of reuse the circuit breaker if the rule remains unchanged.is smart. I tried with DegradeRuleManager.loadRules in different places, it works. A small question is that, if using DegradeRuleManager.loadRules(rules) first time, and rules have two same DegradeRule , there will be two CircuitBreaker created, since in the first time, the static circuitBreakers variable is null.", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r427877252", "createdAt": "2020-05-20T09:40:32Z", "author": {"login": "cdfive"}, "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/degrade/DegradeRuleManager.java", "diffHunk": "@@ -146,88 +142,128 @@ public static boolean setRulesForResource(String resourceName, Set<DegradeRule>\n             }\n             return currentProperty.updateValue(allRules);\n         } catch (Throwable e) {\n-            RecordLog.warn(\n-                \"[DegradeRuleManager] Unexpected error when setting degrade rules for resource: \" + resourceName, e);\n+            RecordLog.error(\"[DegradeRuleManager] Unexpected error when setting circuit breaking\"\n+                + \" rules for resource: \" + resourceName, e);\n+            return false;\n+        }\n+    }\n+\n+    private static CircuitBreaker getExistingSameCbOrNew(/*@Valid*/ DegradeRule rule) {\n+        List<CircuitBreaker> cbs = getCircuitBreakers(rule.getResource());\n+        if (cbs == null || cbs.isEmpty()) {\n+            return newCircuitBreakerFrom(rule);\n+        }\n+        for (CircuitBreaker cb : cbs) {\n+            if (rule.equals(cb.getRule())) {\n+                // Reuse the circuit breaker if the rule remains unchanged.\n+                return cb;\n+            }\n+        }\n+        return newCircuitBreakerFrom(rule);\n+    }\n+\n+    /**\n+     * Create a circuit breaker instance from provided circuit breaking rule.\n+     *\n+     * @param rule a valid circuit breaking rule\n+     * @return new circuit breaker based on provided rule; null if rule is invalid or unsupported type\n+     */\n+    private static CircuitBreaker newCircuitBreakerFrom(/*@Valid*/ DegradeRule rule) {\n+        switch (rule.getGrade()) {\n+            case RuleConstant.DEGRADE_GRADE_RT:\n+                return new ResponseTimeCircuitBreaker(rule);\n+            case RuleConstant.DEGRADE_GRADE_EXCEPTION_RATIO:\n+            case RuleConstant.DEGRADE_GRADE_EXCEPTION_COUNT:\n+                return new ExceptionCircuitBreaker(rule);\n+            default:\n+                return null;\n+        }\n+    }\n+\n+    public static boolean isValidRule(DegradeRule rule) {\n+        boolean baseValid = rule != null && !StringUtil.isBlank(rule.getResource())\n+            && rule.getCount() >= 0 && rule.getTimeWindow() > 0;\n+        if (!baseValid) {\n+            return false;\n+        }\n+        if (rule.getMinRequestAmount() <= 0 || rule.getStatIntervalMs() <= 0) {\n             return false;\n         }\n+        switch (rule.getGrade()) {\n+            case RuleConstant.DEGRADE_GRADE_RT:\n+                return rule.getSlowRatioThreshold() >= 0 && rule.getSlowRatioThreshold() <= 1;\n+            case RuleConstant.DEGRADE_GRADE_EXCEPTION_RATIO:\n+                return rule.getCount() <= 1;\n+            case RuleConstant.DEGRADE_GRADE_EXCEPTION_COUNT:\n+                return true;\n+            default:\n+                return false;\n+        }\n     }\n \n     private static class RulePropertyListener implements PropertyListener<List<DegradeRule>> {\n \n+        private synchronized void reloadFrom(List<DegradeRule> list) {\n+            Map<String, List<CircuitBreaker>> cbs = buildCircuitBreakers(list);\n+            Map<String, Set<DegradeRule>> rm = new HashMap<>(cbs.size());\n+\n+            for (Map.Entry<String, List<CircuitBreaker>> e : cbs.entrySet()) {\n+                if (e.getValue() == null || e.getValue().isEmpty()) {\n+                    continue;\n+                }\n+                Set<DegradeRule> rules = new HashSet<>(e.getValue().size());\n+                for (CircuitBreaker cb : e.getValue()) {\n+                    rules.add(cb.getRule());\n+                }\n+                rm.put(e.getKey(), rules);\n+            }\n+\n+            DegradeRuleManager.circuitBreakers = cbs;\n+            DegradeRuleManager.ruleMap = rm;\n+        }\n+\n         @Override\n         public void configUpdate(List<DegradeRule> conf) {\n-            Map<String, Set<DegradeRule>> rules = loadDegradeConf(conf);\n-            if (rules != null) {\n-                degradeRules.clear();\n-                degradeRules.putAll(rules);\n-            }\n-            RecordLog.info(\"[DegradeRuleManager] Degrade rules received: \" + degradeRules);\n+            reloadFrom(conf);\n+            RecordLog.info(\"[DegradeRuleManager] Degrade rules has been updated to: \" + ruleMap);\n         }\n \n         @Override\n         public void configLoad(List<DegradeRule> conf) {\n-            Map<String, Set<DegradeRule>> rules = loadDegradeConf(conf);\n-            if (rules != null) {\n-                degradeRules.clear();\n-                degradeRules.putAll(rules);\n-            }\n-            RecordLog.info(\"[DegradeRuleManager] Degrade rules loaded: \" + degradeRules);\n+            reloadFrom(conf);\n+            RecordLog.info(\"[DegradeRuleManager] Degrade rules loaded: \" + ruleMap);\n         }\n \n-        private Map<String, Set<DegradeRule>> loadDegradeConf(List<DegradeRule> list) {\n-            Map<String, Set<DegradeRule>> newRuleMap = new ConcurrentHashMap<>();\n-\n+        private Map<String, List<CircuitBreaker>> buildCircuitBreakers(List<DegradeRule> list) {\n+            Map<String, List<CircuitBreaker>> cbMap = new HashMap<>(8);\n             if (list == null || list.isEmpty()) {\n-                return newRuleMap;\n+                return cbMap;\n             }\n-\n             for (DegradeRule rule : list) {\n                 if (!isValidRule(rule)) {\n-                    RecordLog.warn(\n-                        \"[DegradeRuleManager] Ignoring invalid degrade rule when loading new rules: \" + rule);\n+                    RecordLog.warn(\"[DegradeRuleManager] Ignoring invalid rule when loading new rules: \" + rule);\n                     continue;\n                 }\n \n                 if (StringUtil.isBlank(rule.getLimitApp())) {\n                     rule.setLimitApp(RuleConstant.LIMIT_APP_DEFAULT);\n                 }\n-\n-                String identity = rule.getResource();\n-                Set<DegradeRule> ruleSet = newRuleMap.get(identity);\n-                if (ruleSet == null) {\n-                    ruleSet = new HashSet<>();\n-                    newRuleMap.put(identity, ruleSet);\n+                CircuitBreaker cb = getExistingSameCbOrNew(rule);\n+                if (cb == null) {\n+                    RecordLog.warn(\"[DegradeRuleManager] Unknown circuit breaking strategy, ignoring: \" + rule);\n+                    continue;\n                 }\n-                ruleSet.add(rule);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c043ed94b2e949a7e8871690e0d9008d273efdd"}, "originalPosition": 249}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDE1MTY1ODU0", "url": "https://github.com/alibaba/Sentinel/pull/1490#pullrequestreview-415165854", "createdAt": "2020-05-20T09:43:17Z", "commit": {"oid": "4c043ed94b2e949a7e8871690e0d9008d273efdd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwOTo0MzoxN1rOGYDqJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yMFQwOTo0MzoxN1rOGYDqJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg3ODk0OQ==", "bodyText": "This judgement seems can be removed since Line#63.", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r427878949", "createdAt": "2020-05-20T09:43:17Z", "author": {"login": "cdfive"}, "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/degrade/DegradeSlot.java", "diffHunk": "@@ -15,30 +15,73 @@\n  */\n package com.alibaba.csp.sentinel.slots.block.degrade;\n \n+import java.util.List;\n+\n+import com.alibaba.csp.sentinel.Entry;\n import com.alibaba.csp.sentinel.context.Context;\n import com.alibaba.csp.sentinel.node.DefaultNode;\n import com.alibaba.csp.sentinel.slotchain.AbstractLinkedProcessorSlot;\n import com.alibaba.csp.sentinel.slotchain.ProcessorSlot;\n import com.alibaba.csp.sentinel.slotchain.ResourceWrapper;\n+import com.alibaba.csp.sentinel.slots.block.BlockException;\n+import com.alibaba.csp.sentinel.slots.block.degrade.circuitbreaker.CircuitBreaker;\n import com.alibaba.csp.sentinel.spi.SpiOrder;\n+import com.alibaba.csp.sentinel.util.TimeUtil;\n \n /**\n- * A {@link ProcessorSlot} dedicates to {@link DegradeRule} checking.\n+ * A {@link ProcessorSlot} dedicates to circuit breaking.\n  *\n- * @author leyou\n+ * @author Carpenter Lee\n+ * @author Eric Zhao\n  */\n @SpiOrder(-1000)\n public class DegradeSlot extends AbstractLinkedProcessorSlot<DefaultNode> {\n \n     @Override\n-    public void entry(Context context, ResourceWrapper resourceWrapper, DefaultNode node, int count, boolean prioritized, Object... args)\n-        throws Throwable {\n-        DegradeRuleManager.checkDegrade(resourceWrapper, context, node, count);\n+    public void entry(Context context, ResourceWrapper resourceWrapper, DefaultNode node, int count,\n+                      boolean prioritized, Object... args) throws Throwable {\n+        performChecking(resourceWrapper);\n+\n         fireEntry(context, resourceWrapper, node, count, prioritized, args);\n     }\n \n+    void performChecking(ResourceWrapper r) throws BlockException {\n+        List<CircuitBreaker> circuitBreakers = DegradeRuleManager.getCircuitBreakers(r.getName());\n+        if (circuitBreakers == null || circuitBreakers.isEmpty()) {\n+            return;\n+        }\n+        for (CircuitBreaker cb : circuitBreakers) {\n+            if (!cb.tryPass()) {\n+                throw new DegradeException(cb.getRule().getLimitApp(), cb.getRule());\n+            }\n+        }\n+    }\n+\n     @Override\n-    public void exit(Context context, ResourceWrapper resourceWrapper, int count, Object... args) {\n-        fireExit(context, resourceWrapper, count, args);\n+    public void exit(Context context, ResourceWrapper r, int count, Object... args) {\n+        Entry curEntry = context.getCurEntry();\n+        if (curEntry.getBlockError() != null) {\n+            fireExit(context, r, count, args);\n+            return;\n+        }\n+        List<CircuitBreaker> circuitBreakers = DegradeRuleManager.getCircuitBreakers(r.getName());\n+        if (circuitBreakers == null || circuitBreakers.isEmpty()) {\n+            fireExit(context, r, count, args);\n+            return;\n+        }\n+\n+        if (curEntry.getBlockError() == null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c043ed94b2e949a7e8871690e0d9008d273efdd"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI1OTQ3NTMy", "url": "https://github.com/alibaba/Sentinel/pull/1490#pullrequestreview-425947532", "createdAt": "2020-06-08T06:38:06Z", "commit": {"oid": "4c043ed94b2e949a7e8871690e0d9008d273efdd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNjozODowNlrOGgQ0dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOFQwNjozODowNlrOGgQ0dQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNjQ4MzE4OQ==", "bodyText": "If thare are two breakers and curState is open, one breaker tryPass and change state to half open, but other breaker tryPass return false, it is right that no request be allowed. but the below requests will not be allowed because two breakers tryPass can't both be true.", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r436483189", "createdAt": "2020-06-08T06:38:06Z", "author": {"login": "wavesZh"}, "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/degrade/circuitbreaker/AbstractCircuitBreaker.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright 1999-2019 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.csp.sentinel.slots.block.degrade.circuitbreaker;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.alibaba.csp.sentinel.slots.block.degrade.DegradeRule;\n+import com.alibaba.csp.sentinel.slots.block.degrade.DegradeRuleManager;\n+import com.alibaba.csp.sentinel.util.AssertUtil;\n+import com.alibaba.csp.sentinel.util.TimeUtil;\n+\n+/**\n+ * @author Eric Zhao\n+ * @since 1.8.0\n+ */\n+public abstract class AbstractCircuitBreaker implements CircuitBreaker {\n+\n+    protected final DegradeRule rule;\n+    protected final int retryTimeoutMs;\n+\n+    private final EventObserverRegistry observerRegistry;\n+\n+    protected final AtomicReference<State> currentState = new AtomicReference<>(State.CLOSED);\n+    protected volatile long nextRetryTimestamp;\n+\n+    public AbstractCircuitBreaker(DegradeRule rule) {\n+        this(rule, EventObserverRegistry.getInstance());\n+    }\n+\n+    AbstractCircuitBreaker(DegradeRule rule, EventObserverRegistry observerRegistry) {\n+        AssertUtil.notNull(observerRegistry, \"observerRegistry cannot be null\");\n+        if (!DegradeRuleManager.isValidRule(rule)) {\n+            throw new IllegalArgumentException(\"Invalid DegradeRule: \" + rule);\n+        }\n+        this.observerRegistry = observerRegistry;\n+        this.rule = rule;\n+        this.retryTimeoutMs = rule.getTimeWindow() * 1000;\n+    }\n+\n+    @Override\n+    public DegradeRule getRule() {\n+        return rule;\n+    }\n+\n+    @Override\n+    public State currentState() {\n+        return currentState.get();\n+    }\n+\n+    @Override\n+    public boolean tryPass() {\n+        // Template implementation.\n+        if (currentState.get() == State.CLOSED) {\n+            return true;\n+        }\n+        if (currentState.get() == State.OPEN) {\n+            // For half-open state we allow a request for trial.\n+            return retryTimeoutArrived() && fromOpenToHalfOpen();\n+        }\n+        return false;\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c043ed94b2e949a7e8871690e0d9008d273efdd"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI2NzQ0NDM5", "url": "https://github.com/alibaba/Sentinel/pull/1490#pullrequestreview-426744439", "createdAt": "2020-06-09T02:20:17Z", "commit": {"oid": "4c043ed94b2e949a7e8871690e0d9008d273efdd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMjoyMDoxN1rOGg2g6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0wOVQwMjoyMDoxN1rOGg2g6g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzNzEwMDc3OA==", "bodyText": "I think \"attempt/try\" is better than \"retry\"", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r437100778", "createdAt": "2020-06-09T02:20:17Z", "author": {"login": "wavesZh"}, "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/degrade/circuitbreaker/AbstractCircuitBreaker.java", "diffHunk": "@@ -0,0 +1,147 @@\n+/*\n+ * Copyright 1999-2019 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.csp.sentinel.slots.block.degrade.circuitbreaker;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import com.alibaba.csp.sentinel.slots.block.degrade.DegradeRule;\n+import com.alibaba.csp.sentinel.slots.block.degrade.DegradeRuleManager;\n+import com.alibaba.csp.sentinel.util.AssertUtil;\n+import com.alibaba.csp.sentinel.util.TimeUtil;\n+\n+/**\n+ * @author Eric Zhao\n+ * @since 1.8.0\n+ */\n+public abstract class AbstractCircuitBreaker implements CircuitBreaker {\n+\n+    protected final DegradeRule rule;\n+    protected final int retryTimeoutMs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c043ed94b2e949a7e8871690e0d9008d273efdd"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyNTgyMDk1", "url": "https://github.com/alibaba/Sentinel/pull/1490#pullrequestreview-442582095", "createdAt": "2020-07-04T02:19:33Z", "commit": {"oid": "4c043ed94b2e949a7e8871690e0d9008d273efdd"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNFQwMjoxOTozNFrOGs5W9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNVQwMzoxODoyOVrOGs_QYw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczMDI5Mw==", "bodyText": "Why don't use ruleMap here? Though they are equivalent on performance i think but maybe makes more sense.", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r449730293", "createdAt": "2020-07-04T02:19:34Z", "author": {"login": "jasonjoo2010"}, "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/degrade/DegradeRuleManager.java", "diffHunk": "@@ -98,12 +87,19 @@ public static boolean hasConfig(String resource) {\n      */\n     public static List<DegradeRule> getRules() {\n         List<DegradeRule> rules = new ArrayList<>();\n-        for (Map.Entry<String, Set<DegradeRule>> entry : degradeRules.entrySet()) {\n-            rules.addAll(entry.getValue());\n+        for (Map.Entry<String, List<CircuitBreaker>> entry : circuitBreakers.entrySet()) {\n+            for (CircuitBreaker cb : entry.getValue()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c043ed94b2e949a7e8871690e0d9008d273efdd"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczMDQyOA==", "bodyText": "I think it's not necessary for this condition branch. Because they are private logics.", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r449730428", "createdAt": "2020-07-04T02:21:41Z", "author": {"login": "jasonjoo2010"}, "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/degrade/DegradeRuleManager.java", "diffHunk": "@@ -146,88 +142,128 @@ public static boolean setRulesForResource(String resourceName, Set<DegradeRule>\n             }\n             return currentProperty.updateValue(allRules);\n         } catch (Throwable e) {\n-            RecordLog.warn(\n-                \"[DegradeRuleManager] Unexpected error when setting degrade rules for resource: \" + resourceName, e);\n+            RecordLog.error(\"[DegradeRuleManager] Unexpected error when setting circuit breaking\"\n+                + \" rules for resource: \" + resourceName, e);\n+            return false;\n+        }\n+    }\n+\n+    private static CircuitBreaker getExistingSameCbOrNew(/*@Valid*/ DegradeRule rule) {\n+        List<CircuitBreaker> cbs = getCircuitBreakers(rule.getResource());\n+        if (cbs == null || cbs.isEmpty()) {\n+            return newCircuitBreakerFrom(rule);\n+        }\n+        for (CircuitBreaker cb : cbs) {\n+            if (rule.equals(cb.getRule())) {\n+                // Reuse the circuit breaker if the rule remains unchanged.\n+                return cb;\n+            }\n+        }\n+        return newCircuitBreakerFrom(rule);\n+    }\n+\n+    /**\n+     * Create a circuit breaker instance from provided circuit breaking rule.\n+     *\n+     * @param rule a valid circuit breaking rule\n+     * @return new circuit breaker based on provided rule; null if rule is invalid or unsupported type\n+     */\n+    private static CircuitBreaker newCircuitBreakerFrom(/*@Valid*/ DegradeRule rule) {\n+        switch (rule.getGrade()) {\n+            case RuleConstant.DEGRADE_GRADE_RT:\n+                return new ResponseTimeCircuitBreaker(rule);\n+            case RuleConstant.DEGRADE_GRADE_EXCEPTION_RATIO:\n+            case RuleConstant.DEGRADE_GRADE_EXCEPTION_COUNT:\n+                return new ExceptionCircuitBreaker(rule);\n+            default:\n+                return null;\n+        }\n+    }\n+\n+    public static boolean isValidRule(DegradeRule rule) {\n+        boolean baseValid = rule != null && !StringUtil.isBlank(rule.getResource())\n+            && rule.getCount() >= 0 && rule.getTimeWindow() > 0;\n+        if (!baseValid) {\n+            return false;\n+        }\n+        if (rule.getMinRequestAmount() <= 0 || rule.getStatIntervalMs() <= 0) {\n             return false;\n         }\n+        switch (rule.getGrade()) {\n+            case RuleConstant.DEGRADE_GRADE_RT:\n+                return rule.getSlowRatioThreshold() >= 0 && rule.getSlowRatioThreshold() <= 1;\n+            case RuleConstant.DEGRADE_GRADE_EXCEPTION_RATIO:\n+                return rule.getCount() <= 1;\n+            case RuleConstant.DEGRADE_GRADE_EXCEPTION_COUNT:\n+                return true;\n+            default:\n+                return false;\n+        }\n     }\n \n     private static class RulePropertyListener implements PropertyListener<List<DegradeRule>> {\n \n+        private synchronized void reloadFrom(List<DegradeRule> list) {\n+            Map<String, List<CircuitBreaker>> cbs = buildCircuitBreakers(list);\n+            Map<String, Set<DegradeRule>> rm = new HashMap<>(cbs.size());\n+\n+            for (Map.Entry<String, List<CircuitBreaker>> e : cbs.entrySet()) {\n+                if (e.getValue() == null || e.getValue().isEmpty()) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c043ed94b2e949a7e8871690e0d9008d273efdd"}, "originalPosition": 179}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczMDY5Nw==", "bodyText": "Is it really concurrent? And the time lapse is really tiny here.", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r449730697", "createdAt": "2020-07-04T02:26:16Z", "author": {"login": "jasonjoo2010"}, "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/degrade/DegradeSlot.java", "diffHunk": "@@ -15,30 +15,73 @@\n  */\n package com.alibaba.csp.sentinel.slots.block.degrade;\n \n+import java.util.List;\n+\n+import com.alibaba.csp.sentinel.Entry;\n import com.alibaba.csp.sentinel.context.Context;\n import com.alibaba.csp.sentinel.node.DefaultNode;\n import com.alibaba.csp.sentinel.slotchain.AbstractLinkedProcessorSlot;\n import com.alibaba.csp.sentinel.slotchain.ProcessorSlot;\n import com.alibaba.csp.sentinel.slotchain.ResourceWrapper;\n+import com.alibaba.csp.sentinel.slots.block.BlockException;\n+import com.alibaba.csp.sentinel.slots.block.degrade.circuitbreaker.CircuitBreaker;\n import com.alibaba.csp.sentinel.spi.SpiOrder;\n+import com.alibaba.csp.sentinel.util.TimeUtil;\n \n /**\n- * A {@link ProcessorSlot} dedicates to {@link DegradeRule} checking.\n+ * A {@link ProcessorSlot} dedicates to circuit breaking.\n  *\n- * @author leyou\n+ * @author Carpenter Lee\n+ * @author Eric Zhao\n  */\n @SpiOrder(-1000)\n public class DegradeSlot extends AbstractLinkedProcessorSlot<DefaultNode> {\n \n     @Override\n-    public void entry(Context context, ResourceWrapper resourceWrapper, DefaultNode node, int count, boolean prioritized, Object... args)\n-        throws Throwable {\n-        DegradeRuleManager.checkDegrade(resourceWrapper, context, node, count);\n+    public void entry(Context context, ResourceWrapper resourceWrapper, DefaultNode node, int count,\n+                      boolean prioritized, Object... args) throws Throwable {\n+        performChecking(resourceWrapper);\n+\n         fireEntry(context, resourceWrapper, node, count, prioritized, args);\n     }\n \n+    void performChecking(ResourceWrapper r) throws BlockException {\n+        List<CircuitBreaker> circuitBreakers = DegradeRuleManager.getCircuitBreakers(r.getName());\n+        if (circuitBreakers == null || circuitBreakers.isEmpty()) {\n+            return;\n+        }\n+        for (CircuitBreaker cb : circuitBreakers) {\n+            if (!cb.tryPass()) {\n+                throw new DegradeException(cb.getRule().getLimitApp(), cb.getRule());\n+            }\n+        }\n+    }\n+\n     @Override\n-    public void exit(Context context, ResourceWrapper resourceWrapper, int count, Object... args) {\n-        fireExit(context, resourceWrapper, count, args);\n+    public void exit(Context context, ResourceWrapper r, int count, Object... args) {\n+        Entry curEntry = context.getCurEntry();\n+        if (curEntry.getBlockError() != null) {\n+            fireExit(context, r, count, args);\n+            return;\n+        }\n+        List<CircuitBreaker> circuitBreakers = DegradeRuleManager.getCircuitBreakers(r.getName());\n+        if (circuitBreakers == null || circuitBreakers.isEmpty()) {\n+            fireExit(context, r, count, args);\n+            return;\n+        }\n+\n+        if (curEntry.getBlockError() == null) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNzg3ODk0OQ=="}, "originalCommit": {"oid": "4c043ed94b2e949a7e8871690e0d9008d273efdd"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczMTc4Mg==", "bodyText": "How about replacing them into void onChange(CircuitBreaker.State prev, CircuitBreaker.State cur, DegradeRule rule, double snapshotValue);. It seems simpler.", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r449731782", "createdAt": "2020-07-04T02:45:50Z", "author": {"login": "jasonjoo2010"}, "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/degrade/circuitbreaker/CircuitBreakerStateChangeObserver.java", "diffHunk": "@@ -0,0 +1,50 @@\n+/*\n+ * Copyright 1999-2019 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.csp.sentinel.slots.block.degrade.circuitbreaker;\n+\n+import com.alibaba.csp.sentinel.slots.block.degrade.DegradeRule;\n+\n+/**\n+ * @author Eric Zhao\n+ * @since 1.8.0\n+ */\n+public interface CircuitBreakerStateChangeObserver {\n+\n+    /**\n+     * Observer method triggered when circuit breaker state transformed to {@code CLOSED}.\n+     *\n+     * @param prev previous state of the circuit breaker\n+     * @param rule associated rule\n+     */\n+    void onTransformToClosed(CircuitBreaker.State prev, DegradeRule rule);\n+\n+    /**\n+     * Observer method triggered when circuit breaker state transformed to {@code OPEN}.\n+     *\n+     * @param prev          previous state of the circuit breaker\n+     * @param rule          associated rule\n+     * @param snapshotValue triggered value on circuit breaker opens\n+     */\n+    void onTransformToOpen(CircuitBreaker.State prev, DegradeRule rule, double snapshotValue);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c043ed94b2e949a7e8871690e0d9008d273efdd"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczMTkxNw==", "bodyText": "So is it better to use something like SHUT, CUT, PASS, etc. ,  to avoid ambiguous?", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r449731917", "createdAt": "2020-07-04T02:48:53Z", "author": {"login": "jasonjoo2010"}, "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/degrade/circuitbreaker/CircuitBreaker.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 1999-2019 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.csp.sentinel.slots.block.degrade.circuitbreaker;\n+\n+import com.alibaba.csp.sentinel.slots.block.degrade.DegradeRule;\n+\n+/**\n+ * Basic circuit breaker interface.\n+ *\n+ * @author Eric Zhao\n+ */\n+public interface CircuitBreaker {\n+\n+    /**\n+     * Get the associated circuit breaking rule.\n+     *\n+     * @return associated circuit breaking rule\n+     */\n+    DegradeRule getRule();\n+\n+    /**\n+     * Acquires permission of an invocation only if it is available at the time of invocation.\n+     *\n+     * @return {@code true} if permission was acquired and {@code false} otherwise\n+     */\n+    boolean tryPass();\n+\n+    /**\n+     * Get current state of the circuit breaker.\n+     *\n+     * @return current state of the circuit breaker\n+     */\n+    State currentState();\n+\n+    /**\n+     * Record a completed request with the given response time and error (if present) and\n+     * handle state transformation of the circuit breaker.\n+     *\n+     * @param rt the response time of this entry\n+     * @param error the error of this entry (if present)\n+     */\n+    void onRequestComplete(long rt, Throwable error);\n+\n+    /**\n+     * Circuit breaker state.\n+     */\n+    enum State {\n+        /**\n+         * In {@code OPEN} state, all requests will be rejected until the next retry time point.\n+         */\n+        OPEN,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c043ed94b2e949a7e8871690e0d9008d273efdd"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczMjAxMg==", "bodyText": "Just a naming suggestion. It's okay if nobody could misunderstand it. But i think only providers and developers on it will not", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r449732012", "createdAt": "2020-07-04T02:50:16Z", "author": {"login": "jasonjoo2010"}, "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/degrade/circuitbreaker/CircuitBreaker.java", "diffHunk": "@@ -0,0 +1,72 @@\n+/*\n+ * Copyright 1999-2019 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.csp.sentinel.slots.block.degrade.circuitbreaker;\n+\n+import com.alibaba.csp.sentinel.slots.block.degrade.DegradeRule;\n+\n+/**\n+ * Basic circuit breaker interface.\n+ *\n+ * @author Eric Zhao\n+ */\n+public interface CircuitBreaker {\n+\n+    /**\n+     * Get the associated circuit breaking rule.\n+     *\n+     * @return associated circuit breaking rule\n+     */\n+    DegradeRule getRule();\n+\n+    /**\n+     * Acquires permission of an invocation only if it is available at the time of invocation.\n+     *\n+     * @return {@code true} if permission was acquired and {@code false} otherwise\n+     */\n+    boolean tryPass();\n+\n+    /**\n+     * Get current state of the circuit breaker.\n+     *\n+     * @return current state of the circuit breaker\n+     */\n+    State currentState();\n+\n+    /**\n+     * Record a completed request with the given response time and error (if present) and\n+     * handle state transformation of the circuit breaker.\n+     *\n+     * @param rt the response time of this entry\n+     * @param error the error of this entry (if present)\n+     */\n+    void onRequestComplete(long rt, Throwable error);\n+\n+    /**\n+     * Circuit breaker state.\n+     */\n+    enum State {\n+        /**\n+         * In {@code OPEN} state, all requests will be rejected until the next retry time point.\n+         */\n+        OPEN,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczMTkxNw=="}, "originalCommit": {"oid": "4c043ed94b2e949a7e8871690e0d9008d273efdd"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTczMjM3OA==", "bodyText": "To avoid ambiguous better to use breaks enables cuts off", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r449732378", "createdAt": "2020-07-04T02:56:53Z", "author": {"login": "jasonjoo2010"}, "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/degrade/circuitbreaker/CircuitBreakerStrategy.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 1999-2020 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      https://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.csp.sentinel.slots.block.degrade.circuitbreaker;\n+\n+/**\n+ * @author Eric Zhao\n+ * @since 1.8.0\n+ */\n+public enum CircuitBreakerStrategy {\n+\n+    /**\n+     * Circuit breaker opens when slow request ratio exceeds the threshold.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c043ed94b2e949a7e8871690e0d9008d273efdd"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgyNjU4MA==", "bodyText": "Here is a missing property in new implementation. Is that acceptable in compatibility?", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r449826580", "createdAt": "2020-07-05T03:11:47Z", "author": {"login": "jasonjoo2010"}, "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/degrade/DegradeRule.java", "diffHunk": "@@ -52,47 +45,45 @@\n  * </ul>\n  *\n  * @author jialiang.linjl\n+ * @author Eric Zhao\n  */\n public class DegradeRule extends AbstractRule {\n \n-    @SuppressWarnings(\"PMD.ThreadPoolCreationRule\")\n-    private static ScheduledExecutorService pool = Executors.newScheduledThreadPool(\n-        Runtime.getRuntime().availableProcessors(), new NamedThreadFactory(\"sentinel-degrade-reset-task\", true));\n-\n     public DegradeRule() {}\n \n     public DegradeRule(String resourceName) {\n         setResource(resourceName);\n     }\n \n     /**\n-     * RT threshold or exception ratio threshold count.\n+     * Circuit breaking strategy (0: average RT, 1: exception ratio, 2: exception count).\n      */\n-    private double count;\n+    private int grade = RuleConstant.DEGRADE_GRADE_RT;\n \n     /**\n-     * Degrade recover timeout (in seconds) when degradation occurs.\n+     * Threshold count.\n      */\n-    private int timeWindow;\n+    private double count;\n \n     /**\n-     * Degrade strategy (0: average RT, 1: exception ratio, 2: exception count).\n+     * Recovery timeout (in seconds) when circuit breaker opens. After the timeout, the circuit breaker will\n+     * transform to half-open state for trying a few requests.\n      */\n-    private int grade = RuleConstant.DEGRADE_GRADE_RT;\n+    private int timeWindow;\n \n     /**\n-     * Minimum number of consecutive slow requests that can trigger RT circuit breaking.\n+     * Minimum number of requests (in an active statistic time span) that can trigger circuit breaking.\n      *\n      * @since 1.7.0\n      */\n-    private int rtSlowRequestAmount = RuleConstant.DEGRADE_DEFAULT_SLOW_REQUEST_AMOUNT;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c043ed94b2e949a7e8871690e0d9008d273efdd"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0OTgyNjkxNQ==", "bodyText": "And here's a problem that if something went wrong which may cause RT down to more than 10s (100ms for normal) . Our breaker will cut the traffic after 10s. Maybe we could improve it (or as a new issue and do it in future) that unfinished entries could be recorded as statIntervalMs when slidingCounter is reset.", "url": "https://github.com/alibaba/Sentinel/pull/1490#discussion_r449826915", "createdAt": "2020-07-05T03:18:29Z", "author": {"login": "jasonjoo2010"}, "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/degrade/DegradeSlot.java", "diffHunk": "@@ -15,30 +15,73 @@\n  */\n package com.alibaba.csp.sentinel.slots.block.degrade;\n \n+import java.util.List;\n+\n+import com.alibaba.csp.sentinel.Entry;\n import com.alibaba.csp.sentinel.context.Context;\n import com.alibaba.csp.sentinel.node.DefaultNode;\n import com.alibaba.csp.sentinel.slotchain.AbstractLinkedProcessorSlot;\n import com.alibaba.csp.sentinel.slotchain.ProcessorSlot;\n import com.alibaba.csp.sentinel.slotchain.ResourceWrapper;\n+import com.alibaba.csp.sentinel.slots.block.BlockException;\n+import com.alibaba.csp.sentinel.slots.block.degrade.circuitbreaker.CircuitBreaker;\n import com.alibaba.csp.sentinel.spi.SpiOrder;\n+import com.alibaba.csp.sentinel.util.TimeUtil;\n \n /**\n- * A {@link ProcessorSlot} dedicates to {@link DegradeRule} checking.\n+ * A {@link ProcessorSlot} dedicates to circuit breaking.\n  *\n- * @author leyou\n+ * @author Carpenter Lee\n+ * @author Eric Zhao\n  */\n @SpiOrder(-1000)\n public class DegradeSlot extends AbstractLinkedProcessorSlot<DefaultNode> {\n \n     @Override\n-    public void entry(Context context, ResourceWrapper resourceWrapper, DefaultNode node, int count, boolean prioritized, Object... args)\n-        throws Throwable {\n-        DegradeRuleManager.checkDegrade(resourceWrapper, context, node, count);\n+    public void entry(Context context, ResourceWrapper resourceWrapper, DefaultNode node, int count,\n+                      boolean prioritized, Object... args) throws Throwable {\n+        performChecking(resourceWrapper);\n+\n         fireEntry(context, resourceWrapper, node, count, prioritized, args);\n     }\n \n+    void performChecking(ResourceWrapper r) throws BlockException {\n+        List<CircuitBreaker> circuitBreakers = DegradeRuleManager.getCircuitBreakers(r.getName());\n+        if (circuitBreakers == null || circuitBreakers.isEmpty()) {\n+            return;\n+        }\n+        for (CircuitBreaker cb : circuitBreakers) {\n+            if (!cb.tryPass()) {\n+                throw new DegradeException(cb.getRule().getLimitApp(), cb.getRule());\n+            }\n+        }\n+    }\n+\n     @Override\n-    public void exit(Context context, ResourceWrapper resourceWrapper, int count, Object... args) {\n-        fireExit(context, resourceWrapper, count, args);\n+    public void exit(Context context, ResourceWrapper r, int count, Object... args) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4c043ed94b2e949a7e8871690e0d9008d273efdd"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2e4f60879d594eafacf4655b6a5c07d21c51dde1", "author": {"user": {"login": "sczyh30", "name": "Eric Zhao"}}, "url": "https://github.com/alibaba/Sentinel/commit/2e4f60879d594eafacf4655b6a5c07d21c51dde1", "committedDate": "2020-07-28T02:16:46Z", "message": "Refactor degrade hierarchy with new circuit breaker mechanism and improve strategy\n\n* Add `CircuitBreaker` abstraction (with half-open state) and add circuit breaker state change event observer support.\n* Improve circuit breaking strategy (avg RT \u2192 slow request ratio) and make statistics of each rule dependent (to support arbitrary statistic interval).\n* Add simple \"trial\" mechanism (aka. half-open).\n* Refactor mechanism of metric recording and state change handling for circuit breakers: record RT and error when requests have completed (i.e. `onExit`, based on #1420).\n\nSigned-off-by: Eric Zhao <sczyh16@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "174300103b0df564607a45cf3223df0764d67e94", "author": {"user": {"login": "sczyh30", "name": "Eric Zhao"}}, "url": "https://github.com/alibaba/Sentinel/commit/174300103b0df564607a45cf3223df0764d67e94", "committedDate": "2020-07-28T02:16:47Z", "message": "Update test cases for circuit breaking\n\nSigned-off-by: Eric Zhao <sczyh16@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17395c01cc77d5d6d9213e9f2333ab3ee4331a20", "author": {"user": {"login": "sczyh30", "name": "Eric Zhao"}}, "url": "https://github.com/alibaba/Sentinel/commit/17395c01cc77d5d6d9213e9f2333ab3ee4331a20", "committedDate": "2020-07-28T02:16:47Z", "message": "Update demo for circuit breaking (DegradeRule)\n\nSigned-off-by: Eric Zhao <sczyh16@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "4c043ed94b2e949a7e8871690e0d9008d273efdd", "author": {"user": {"login": "sczyh30", "name": "Eric Zhao"}}, "url": "https://github.com/alibaba/Sentinel/commit/4c043ed94b2e949a7e8871690e0d9008d273efdd", "committedDate": "2020-05-19T06:56:35Z", "message": "Update demo for circuit breaking (DegradeRule)\n\nSigned-off-by: Eric Zhao <sczyh16@gmail.com>"}, "afterCommit": {"oid": "17395c01cc77d5d6d9213e9f2333ab3ee4331a20", "author": {"user": {"login": "sczyh30", "name": "Eric Zhao"}}, "url": "https://github.com/alibaba/Sentinel/commit/17395c01cc77d5d6d9213e9f2333ab3ee4331a20", "committedDate": "2020-07-28T02:16:47Z", "message": "Update demo for circuit breaking (DegradeRule)\n\nSigned-off-by: Eric Zhao <sczyh16@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU2ODI1MjQ0", "url": "https://github.com/alibaba/Sentinel/pull/1490#pullrequestreview-456825244", "createdAt": "2020-07-28T16:51:47Z", "commit": {"oid": "17395c01cc77d5d6d9213e9f2333ab3ee4331a20"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3939, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}