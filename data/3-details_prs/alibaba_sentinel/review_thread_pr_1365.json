{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk0ODQzMjQ4", "number": 1365, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxNjozNzowNlrODsVL6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxNjo0MjowM1rODsVNnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3ODExMDUwOnYy", "diffSide": "RIGHT", "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/util/SpiLoader.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxNjozNzowNlrOF9KqMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQwMjoyOTozN1rOF9N5Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY4MjA5Ng==", "bodyText": "Although these codes are not changed in this PR but i should point out there are two ways to optimize a little, just FYI:\n\nlist should have an initial capacity specified because we know it(Same to orderWrappers)\nIt's an in order copying so add(T obj) is enough and will make sense.", "url": "https://github.com/alibaba/Sentinel/pull/1365#discussion_r399682096", "createdAt": "2020-03-28T16:37:06Z", "author": {"login": "jasonjoo2010"}, "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/util/SpiLoader.java", "diffHunk": "@@ -219,16 +233,16 @@\n                 int order = SpiOrderResolver.resolveOrder(spi);\n                 // Since SPI is lazy initialized in ServiceLoader, we use online sort algorithm here.\n                 SpiOrderResolver.insertSorted(orderWrappers, spi, order);\n-                RecordLog.info(\"[SpiLoader] Found {0} SPI: {1} with order \" + order, clazz.getSimpleName(),\n-                        spi.getClass().getCanonicalName());\n+                RecordLog.debug(\"[SpiLoader] Found {} SPI: {} with order {}\", clazz.getSimpleName(),\n+                        spi.getClass().getCanonicalName(), order);\n             }\n             List<T> list = new ArrayList<>();\n             for (int i = 0; i < orderWrappers.size(); i++) {\n                 list.add(i, orderWrappers.get(i).spi);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84de476fdb5c7908ec398e11eeddc6aac6ec3781"}, "originalPosition": 99}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczNTA4Ng==", "bodyText": "Good idea! They have been improved, please check.", "url": "https://github.com/alibaba/Sentinel/pull/1365#discussion_r399735086", "createdAt": "2020-03-29T02:29:37Z", "author": {"login": "cdfive"}, "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/util/SpiLoader.java", "diffHunk": "@@ -219,16 +233,16 @@\n                 int order = SpiOrderResolver.resolveOrder(spi);\n                 // Since SPI is lazy initialized in ServiceLoader, we use online sort algorithm here.\n                 SpiOrderResolver.insertSorted(orderWrappers, spi, order);\n-                RecordLog.info(\"[SpiLoader] Found {0} SPI: {1} with order \" + order, clazz.getSimpleName(),\n-                        spi.getClass().getCanonicalName());\n+                RecordLog.debug(\"[SpiLoader] Found {} SPI: {} with order {}\", clazz.getSimpleName(),\n+                        spi.getClass().getCanonicalName(), order);\n             }\n             List<T> list = new ArrayList<>();\n             for (int i = 0; i < orderWrappers.size(); i++) {\n                 list.add(i, orderWrappers.get(i).spi);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY4MjA5Ng=="}, "originalCommit": {"oid": "84de476fdb5c7908ec398e11eeddc6aac6ec3781"}, "originalPosition": 99}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ3ODExNDg3OnYy", "diffSide": "RIGHT", "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/util/SpiLoader.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOFQxNjo0MjowNFrOF9KsWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0yOVQwMjo0MTozN1rOF9N8eA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY4MjY0OQ==", "bodyText": "warn and ERROR are a little confused(Although it's also not included in this PR actually).\nAnd after several iterations enhancing logging of Sentinel is it still necessary to use printStackTrace() directly? We just make a decision and go.", "url": "https://github.com/alibaba/Sentinel/pull/1365#discussion_r399682649", "createdAt": "2020-03-28T16:42:04Z", "author": {"login": "jasonjoo2010"}, "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/util/SpiLoader.java", "diffHunk": "@@ -219,16 +233,16 @@\n                 int order = SpiOrderResolver.resolveOrder(spi);\n                 // Since SPI is lazy initialized in ServiceLoader, we use online sort algorithm here.\n                 SpiOrderResolver.insertSorted(orderWrappers, spi, order);\n-                RecordLog.info(\"[SpiLoader] Found {0} SPI: {1} with order \" + order, clazz.getSimpleName(),\n-                        spi.getClass().getCanonicalName());\n+                RecordLog.debug(\"[SpiLoader] Found {} SPI: {} with order {}\", clazz.getSimpleName(),\n+                        spi.getClass().getCanonicalName(), order);\n             }\n             List<T> list = new ArrayList<>();\n             for (int i = 0; i < orderWrappers.size(); i++) {\n                 list.add(i, orderWrappers.get(i).spi);\n             }\n             return list;\n         } catch (Throwable t) {\n-            RecordLog.warn(\"[SpiLoader] ERROR: loadDifferentInstanceListSorted failed\", t);\n+            RecordLog.warn(\"[SpiLoader] ERROR: loadPrototypeInstanceListSorted failed\", t);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "84de476fdb5c7908ec398e11eeddc6aac6ec3781"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczNTY3NQ==", "bodyText": "Yes, in Exception catch block, use ERROR is better, it has been fixed, please check.\n\nAnd after several iterations enhancing logging of Sentinel is it still necessary to use printStackTrace() directly? We just make a decision and go.\n\nUse printStackTrace() directly doesn't look good indeed, maybe printStackTrace() is useful for users to view directly, since RecordLog log the message info file by default, so I haven't removed it, and waiting for your confirm.I also wonder that if we could throw RuntimeException in the catch block.\nBTW, the catch block seems to be never happen or extremely small probability.", "url": "https://github.com/alibaba/Sentinel/pull/1365#discussion_r399735675", "createdAt": "2020-03-29T02:37:56Z", "author": {"login": "cdfive"}, "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/util/SpiLoader.java", "diffHunk": "@@ -219,16 +233,16 @@\n                 int order = SpiOrderResolver.resolveOrder(spi);\n                 // Since SPI is lazy initialized in ServiceLoader, we use online sort algorithm here.\n                 SpiOrderResolver.insertSorted(orderWrappers, spi, order);\n-                RecordLog.info(\"[SpiLoader] Found {0} SPI: {1} with order \" + order, clazz.getSimpleName(),\n-                        spi.getClass().getCanonicalName());\n+                RecordLog.debug(\"[SpiLoader] Found {} SPI: {} with order {}\", clazz.getSimpleName(),\n+                        spi.getClass().getCanonicalName(), order);\n             }\n             List<T> list = new ArrayList<>();\n             for (int i = 0; i < orderWrappers.size(); i++) {\n                 list.add(i, orderWrappers.get(i).spi);\n             }\n             return list;\n         } catch (Throwable t) {\n-            RecordLog.warn(\"[SpiLoader] ERROR: loadDifferentInstanceListSorted failed\", t);\n+            RecordLog.warn(\"[SpiLoader] ERROR: loadPrototypeInstanceListSorted failed\", t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY4MjY0OQ=="}, "originalCommit": {"oid": "84de476fdb5c7908ec398e11eeddc6aac6ec3781"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTczNTkyOA==", "bodyText": "Yes, in Exception catch block, use ERROR is better, it has been fixed, please check.\n\nAnd after several iterations enhancing logging of Sentinel is it still necessary to use printStackTrace() directly? We just make a decision and go.\n\nUse printStackTrace() directly doesn't look good indeed, maybe printStackTrace() is useful for users to view directly, since RecordLog log the message info file by default, so I haven't removed it, and waiting for your confirm.I also wonder that if we could throw RuntimeException in the catch block.\nBTW, the catch block seems to be never happen or extremely small probability.\n\nYeah actually i have no position here and we could keep it then", "url": "https://github.com/alibaba/Sentinel/pull/1365#discussion_r399735928", "createdAt": "2020-03-29T02:41:37Z", "author": {"login": "jasonjoo2010"}, "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/util/SpiLoader.java", "diffHunk": "@@ -219,16 +233,16 @@\n                 int order = SpiOrderResolver.resolveOrder(spi);\n                 // Since SPI is lazy initialized in ServiceLoader, we use online sort algorithm here.\n                 SpiOrderResolver.insertSorted(orderWrappers, spi, order);\n-                RecordLog.info(\"[SpiLoader] Found {0} SPI: {1} with order \" + order, clazz.getSimpleName(),\n-                        spi.getClass().getCanonicalName());\n+                RecordLog.debug(\"[SpiLoader] Found {} SPI: {} with order {}\", clazz.getSimpleName(),\n+                        spi.getClass().getCanonicalName(), order);\n             }\n             List<T> list = new ArrayList<>();\n             for (int i = 0; i < orderWrappers.size(); i++) {\n                 list.add(i, orderWrappers.get(i).spi);\n             }\n             return list;\n         } catch (Throwable t) {\n-            RecordLog.warn(\"[SpiLoader] ERROR: loadDifferentInstanceListSorted failed\", t);\n+            RecordLog.warn(\"[SpiLoader] ERROR: loadPrototypeInstanceListSorted failed\", t);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5OTY4MjY0OQ=="}, "originalCommit": {"oid": "84de476fdb5c7908ec398e11eeddc6aac6ec3781"}, "originalPosition": 104}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4143, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}