{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDU3MDA4OTU5", "number": 1631, "title": "[feature]finish cluster concurrent flow control rule checker", "bodyText": "Signed-off-by: yunfeiyanggzq yunfeiyang@buaa.edu.cn\n\nDescribe what this PR does / why we need it\n\u5b8c\u6210\u96c6\u7fa4\u5e76\u53d1\u6d41\u63a7\u6d41\u63a7\u89c4\u5219\u6e90\n\nDoes this pull request fix one issue?\n\nFixes #1629  \u6b64\u5904\u6709\u9879\u76ee\u6574\u4f53\u4ee3\u7801\u548c\u6d4b\u8bd5\u8bf4\u660e\nDescribe how you did it\n\u672cpr\u662f\u96c6\u7fa4\u5e76\u53d1\u6d41\u63a7\u7684\u4e00\u90e8\u5206\u4ee3\u7801\uff0c\u4e3b\u8981\u5b8c\u6210DefaultTokenService,\u672c\u4ee3\u7801\u5e76\u6ca1\u6709\u63a5\u5165FlowSlot\u7684FlowCheker\u4e2d\uff0c\u6240\u4ee5\u5bf9\u73b0\u6709\u7684\u4e1a\u52a1\u5e76\u6ca1\u6709\u53d1\u751f\u4efb\u4f55\u7684\u6539\u53d8\u3002\u4e3b\u8981\u7684\u529f\u80fd\u662f\u5b9e\u73b0\u4e86\u96c6\u7fa4\u5e76\u53d1\u6d41\u63a7\u7684\u89c4\u5219\u6e90,\u4e0d\u80fd\u8fdb\u884cnetty\u901a\u4fe1\n\u6539\u9020sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/flow/ClusterFlowConfig.java\uff0c\u8c03\u6574\u96c6\u7fa4\u6d41\u63a7\u89c4\u5219\uff0c\u589e\u52a0\u5e76\u53d1\u6d41\u63a7\u7684\u76f8\u5e94\u63a7\u5236\u53c2\u6570\n\u6539\u9020sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/flow/rule/ClusterFlowRuleManager.java \u4e3b\u8981\u9002\u914d\u5e76\u53d1\u96c6\u7fa4\u6d41\u63a7\u4e2d\u7684\u4e00\u4e9b\u53c2\u6570\u68c0\u6d4b\u3002\n\u65b0\u589esentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/flow/statistic/concurrent/CurrentConcurrencyManager.java \u7ef4\u62a4\u6bcf\u4e2arule\u6240\u5bf9\u5e94\u7684\u5f53\u524d\u5e76\u53d1\u91cf\n\u65b0\u589esentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/flow/statistic/concurrent/TokenCacheNodeManager.java \u5b58\u50a8\u76ee\u524d\u7684token\u4fe1\u606f\n\u65b0\u589esentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/flow/statistic/concurrent/expire/RegularExpireStrategy.java \u5220\u9664\u8fc7\u671ftoken\n\u65b0\u589esentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/flow/ConcurrentClusterFlowChecker.java \u4e3b\u8981\u5bf9token\u662f\u5426\u80fd\u5206\u53d1\u8fdb\u884c\u68c0\u6d4b\u548c\u56de\u6536token\nserver\u7aef\u65b0\u589e\u63a5\u53e3\n /**\n     * Request acquire concurrent tokens from remote token server.\n     *\n     * @param clientAddress the address of the request belong.\n     * @param ruleId ruleId the unique rule ID\n     * @param acquireCount token count to acquire\n     * @return result of the token request\n     */\n    TokenResult requestConcurrentToken(String clientAddress,Long ruleId,int acquireCount);\n    /**\n     * Request lease concurrent tokens from remote token server.\n     *\n     * @param tokenId the unique token ID\n     */\n    void releaseConcurrentToken(Long tokenId);\n\nDescribe how to verify it\n\u67e5\u770b\u5355\u5143\u6d4b\u8bd5\u3002\nSpecial notes for reviews", "createdAt": "2020-07-27T08:51:06Z", "url": "https://github.com/alibaba/Sentinel/pull/1631", "merged": true, "mergeCommit": {"oid": "4feb16a202005376740ec48af40d203505088afb"}, "closed": true, "closedAt": "2020-09-16T02:38:12Z", "author": {"login": "yunfeiyanggzq"}, "timelineItems": {"totalCount": 17, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc4-LAxgBqjM1ODg4OTU4MDQ=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdJTAw1gFqTQ4OTIzMTI3OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "5d01ef16b28f5ad2b5434649b99bb8b445acd05e", "author": {"user": {"login": "yunfeiyanggzq", "name": "ZhiQiang Gu"}}, "url": "https://github.com/alibaba/Sentinel/commit/5d01ef16b28f5ad2b5434649b99bb8b445acd05e", "committedDate": "2020-07-27T09:03:37Z", "message": "fix test\n\nSigned-off-by: yunfeiyanggzq <yunfeiyang@buaa.edu.cn>"}, "afterCommit": {"oid": "ab867b31c0e7b996ed8df0590ab3f051b2915f4e", "author": {"user": {"login": "yunfeiyanggzq", "name": "ZhiQiang Gu"}}, "url": "https://github.com/alibaba/Sentinel/commit/ab867b31c0e7b996ed8df0590ab3f051b2915f4e", "committedDate": "2020-07-27T09:11:37Z", "message": "fix test\n\nSigned-off-by: yunfeiyanggzq <yunfeiyang@buaa.edu.cn>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ab867b31c0e7b996ed8df0590ab3f051b2915f4e", "author": {"user": {"login": "yunfeiyanggzq", "name": "ZhiQiang Gu"}}, "url": "https://github.com/alibaba/Sentinel/commit/ab867b31c0e7b996ed8df0590ab3f051b2915f4e", "committedDate": "2020-07-27T09:11:37Z", "message": "fix test\n\nSigned-off-by: yunfeiyanggzq <yunfeiyang@buaa.edu.cn>"}, "afterCommit": {"oid": "6d8cc45540663aa3a93e1b1a267124730c1c3128", "author": {"user": {"login": "yunfeiyanggzq", "name": "ZhiQiang Gu"}}, "url": "https://github.com/alibaba/Sentinel/commit/6d8cc45540663aa3a93e1b1a267124730c1c3128", "committedDate": "2020-07-27T09:21:58Z", "message": "fix test\n\nSigned-off-by: yunfeiyanggzq <yunfeiyang@buaa.edu.cn>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "6d8cc45540663aa3a93e1b1a267124730c1c3128", "author": {"user": {"login": "yunfeiyanggzq", "name": "ZhiQiang Gu"}}, "url": "https://github.com/alibaba/Sentinel/commit/6d8cc45540663aa3a93e1b1a267124730c1c3128", "committedDate": "2020-07-27T09:21:58Z", "message": "fix test\n\nSigned-off-by: yunfeiyanggzq <yunfeiyang@buaa.edu.cn>"}, "afterCommit": {"oid": "d74c0bc7747e25fcdd985f03993920ba6e4a3c3f", "author": {"user": {"login": "yunfeiyanggzq", "name": "ZhiQiang Gu"}}, "url": "https://github.com/alibaba/Sentinel/commit/d74c0bc7747e25fcdd985f03993920ba6e4a3c3f", "committedDate": "2020-07-27T09:41:16Z", "message": "s\n\nSigned-off-by: yunfeiyanggzq <yunfeiyang@buaa.edu.cn>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDU5NzIzMjYx", "url": "https://github.com/alibaba/Sentinel/pull/1631#pullrequestreview-459723261", "createdAt": "2020-08-03T03:04:39Z", "commit": {"oid": "0ddd0e5eb32e9083476863eaefcd35ac4a5d2e13"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwMzowNDozOVrOG6qxkA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wM1QwMzowNDozOVrOG6qxkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDE3MTQwOA==", "bodyText": "Why clientAddress is needed here? The token server could get the remote address from Netty context.\nAnd maybe this can be merged in requestToken?", "url": "https://github.com/alibaba/Sentinel/pull/1631#discussion_r464171408", "createdAt": "2020-08-03T03:04:39Z", "author": {"login": "sczyh30"}, "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/cluster/TokenService.java", "diffHunk": "@@ -44,4 +44,21 @@\n      * @return result of the token request\n      */\n     TokenResult requestParamToken(Long ruleId, int acquireCount, Collection<Object> params);\n+\n+    /**\n+     * Request acquire concurrent tokens from remote token server.\n+     *\n+     * @param clientAddress the address of the request belong.\n+     * @param ruleId ruleId the unique rule ID\n+     * @param acquireCount token count to acquire\n+     * @return result of the token request\n+     */\n+    TokenResult requestConcurrentToken(String clientAddress,Long ruleId,int acquireCount);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ddd0e5eb32e9083476863eaefcd35ac4a5d2e13"}, "originalPosition": 13}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNDY2Njc1", "url": "https://github.com/alibaba/Sentinel/pull/1631#pullrequestreview-460466675", "createdAt": "2020-08-04T03:10:55Z", "commit": {"oid": "0ddd0e5eb32e9083476863eaefcd35ac4a5d2e13"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMzoxMDo1NlrOG7PfOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMzoxMDo1NlrOG7PfOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3MjkyMA==", "bodyText": "We may need to pay attention to the memory and GC footprint when there are large amount of requests coming.", "url": "https://github.com/alibaba/Sentinel/pull/1631#discussion_r464772920", "createdAt": "2020-08-04T03:10:56Z", "author": {"login": "sczyh30"}, "path": "sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/flow/ConcurrentClusterFlowChecker.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.csp.sentinel.cluster.flow;\n+\n+import com.alibaba.csp.sentinel.cluster.TokenResult;\n+import com.alibaba.csp.sentinel.cluster.TokenResultStatus;\n+import com.alibaba.csp.sentinel.cluster.flow.rule.ClusterFlowRuleManager;\n+import com.alibaba.csp.sentinel.cluster.flow.statistic.concurrent.CurrentConcurrencyManager;\n+import com.alibaba.csp.sentinel.cluster.flow.statistic.concurrent.TokenCacheNode;\n+import com.alibaba.csp.sentinel.cluster.flow.statistic.concurrent.TokenCacheNodeManager;\n+import com.alibaba.csp.sentinel.cluster.server.log.ClusterServerStatLogUtil;\n+import com.alibaba.csp.sentinel.log.RecordLog;\n+import com.alibaba.csp.sentinel.slots.block.ClusterRuleConstant;\n+import com.alibaba.csp.sentinel.slots.block.flow.FlowRule;\n+\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * @author yunfeiyanggzq\n+ */\n+final public class ConcurrentClusterFlowChecker {\n+\n+    public static double calcGlobalThreshold(FlowRule rule) {\n+        double count = rule.getCount();\n+        switch (rule.getClusterConfig().getThresholdType()) {\n+            case ClusterRuleConstant.FLOW_THRESHOLD_GLOBAL:\n+                return count;\n+            case ClusterRuleConstant.FLOW_THRESHOLD_AVG_LOCAL:\n+            default:\n+                int connectedCount = ClusterFlowRuleManager.getConnectedCount(rule.getClusterConfig().getFlowId());\n+                return count * connectedCount;\n+        }\n+    }\n+\n+    public static TokenResult acquireConcurrentToken(/*@Valid*/ String clientAddress,FlowRule rule, int acquireCount) {\n+        long flowId = rule.getClusterConfig().getFlowId();\n+        AtomicInteger nowCalls = CurrentConcurrencyManager.get(flowId);\n+        if (nowCalls == null) {\n+            RecordLog.warn(\"[ConcurrentClusterFlowChecker] Fail to get nowCalls by flowId<{}>\", flowId);\n+            return new TokenResult(TokenResultStatus.FAIL);\n+        }\n+\n+        // check before enter the lock to improve the efficiency\n+        if (nowCalls.get() + acquireCount > calcGlobalThreshold(rule)) {\n+            ClusterServerStatLogUtil.log(\"concurrent|block|\" + flowId, acquireCount);\n+            return new TokenResult(TokenResultStatus.BLOCKED);\n+        }\n+\n+        // ensure the atomicity of operations\n+        // lock different nowCalls to improve the efficiency\n+        synchronized (nowCalls) {\n+            // check again whether the request can pass.\n+            if (nowCalls.get() + acquireCount > calcGlobalThreshold(rule)) {\n+                ClusterServerStatLogUtil.log(\"concurrent|block|\" + flowId, acquireCount);\n+                return new TokenResult(TokenResultStatus.BLOCKED);\n+            } else {\n+                nowCalls.getAndAdd(acquireCount);\n+            }\n+        }\n+        ClusterServerStatLogUtil.log(\"concurrent|pass|\" + flowId, acquireCount);\n+        TokenCacheNode node = TokenCacheNode.generateTokenCacheNode(rule, acquireCount, clientAddress);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ddd0e5eb32e9083476863eaefcd35ac4a5d2e13"}, "originalPosition": 74}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYwNDY4MzYx", "url": "https://github.com/alibaba/Sentinel/pull/1631#pullrequestreview-460468361", "createdAt": "2020-08-04T03:17:24Z", "commit": {"oid": "0ddd0e5eb32e9083476863eaefcd35ac4a5d2e13"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMzoxNzoyNFrOG7Plgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNFQwMzoyNzoxNFrOG7PuxQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3NDUzMA==", "bodyText": "How about returning boolean instead? And this function does not \"update\" but actually \"add concurrency\".", "url": "https://github.com/alibaba/Sentinel/pull/1631#discussion_r464774530", "createdAt": "2020-08-04T03:17:24Z", "author": {"login": "sczyh30"}, "path": "sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/flow/statistic/concurrent/CurrentConcurrencyManager.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.csp.sentinel.cluster.flow.statistic.concurrent;\n+\n+import com.alibaba.csp.sentinel.concurrent.NamedThreadFactory;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * We use a ConcurrentHashMap<long, AtomicInteger> type structure to store nowCalls corresponding to\n+ * rules, where the key is flowId and the value is nowCalls. Because nowCalls may be accessed and\n+ * modified by multiple threads, we consider to design it as an AtomicInteger class . Each newly\n+ * created rule will add a nowCalls object to this map. If the concurrency corresponding to a rule changes,\n+ * we will update the corresponding nowCalls in real time. Each request to obtain a token will increase the nowCalls;\n+ * and the request to release the token will reduce the nowCalls.\n+ *\n+ * @author yunfeiyanggzq\n+ */\n+public final class CurrentConcurrencyManager {\n+    /**\n+     * use ConcurrentHashMap to store the nowCalls of rules.\n+     */\n+    private static final ConcurrentHashMap<Long, AtomicInteger> NOW_CALLS_MAP = new ConcurrentHashMap<Long, AtomicInteger>();\n+\n+    @SuppressWarnings(\"PMD.ThreadPoolCreationRule\")\n+    private static final ScheduledExecutorService SCHEDULER = Executors.newScheduledThreadPool(1,\n+            new NamedThreadFactory(\"sentinel-cluster-concurrency-record-task\", true));\n+\n+    static {\n+        ClusterConcurrentCheckerLogListener logTask = new ClusterConcurrentCheckerLogListener();\n+        SCHEDULER.scheduleAtFixedRate(logTask, 0, 1, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * update current concurrency.\n+     */\n+    public static Boolean update(Long flowId, Integer count) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ddd0e5eb32e9083476863eaefcd35ac4a5d2e13"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3NDk1Mg==", "bodyText": "Usually, the getXxxMap() operation should not be public exported.", "url": "https://github.com/alibaba/Sentinel/pull/1631#discussion_r464774952", "createdAt": "2020-08-04T03:19:17Z", "author": {"login": "sczyh30"}, "path": "sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/flow/statistic/concurrent/CurrentConcurrencyManager.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.csp.sentinel.cluster.flow.statistic.concurrent;\n+\n+import com.alibaba.csp.sentinel.concurrent.NamedThreadFactory;\n+\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * We use a ConcurrentHashMap<long, AtomicInteger> type structure to store nowCalls corresponding to\n+ * rules, where the key is flowId and the value is nowCalls. Because nowCalls may be accessed and\n+ * modified by multiple threads, we consider to design it as an AtomicInteger class . Each newly\n+ * created rule will add a nowCalls object to this map. If the concurrency corresponding to a rule changes,\n+ * we will update the corresponding nowCalls in real time. Each request to obtain a token will increase the nowCalls;\n+ * and the request to release the token will reduce the nowCalls.\n+ *\n+ * @author yunfeiyanggzq\n+ */\n+public final class CurrentConcurrencyManager {\n+    /**\n+     * use ConcurrentHashMap to store the nowCalls of rules.\n+     */\n+    private static final ConcurrentHashMap<Long, AtomicInteger> NOW_CALLS_MAP = new ConcurrentHashMap<Long, AtomicInteger>();\n+\n+    @SuppressWarnings(\"PMD.ThreadPoolCreationRule\")\n+    private static final ScheduledExecutorService SCHEDULER = Executors.newScheduledThreadPool(1,\n+            new NamedThreadFactory(\"sentinel-cluster-concurrency-record-task\", true));\n+\n+    static {\n+        ClusterConcurrentCheckerLogListener logTask = new ClusterConcurrentCheckerLogListener();\n+        SCHEDULER.scheduleAtFixedRate(logTask, 0, 1, TimeUnit.SECONDS);\n+    }\n+\n+    /**\n+     * update current concurrency.\n+     */\n+    public static Boolean update(Long flowId, Integer count) {\n+\n+        AtomicInteger nowCalls = NOW_CALLS_MAP.get(flowId);\n+        if (nowCalls == null) {\n+            return false;\n+        }\n+        nowCalls.getAndAdd(count);\n+        return true;\n+    }\n+\n+    /**\n+     * get the current concurrency.\n+     */\n+    public static AtomicInteger get(Long flowId) {\n+        return NOW_CALLS_MAP.get(flowId);\n+    }\n+\n+    /**\n+     * delete the current concurrency.\n+     */\n+    public static void remove(Long flowId) {\n+        NOW_CALLS_MAP.remove(flowId);\n+    }\n+\n+    /**\n+     * add the current concurrency.\n+     */\n+    public static void put(Long flowId, Integer nowCalls) {\n+        NOW_CALLS_MAP.put(flowId, new AtomicInteger(nowCalls));\n+    }\n+\n+    /**\n+     * check flow id.\n+     */\n+    public static boolean containsFlowId(Long flowId) {\n+        return NOW_CALLS_MAP.containsKey(flowId);\n+    }\n+\n+    /**\n+     * get NOW_CALLS_MAP.\n+     */\n+    public static ConcurrentHashMap<Long, AtomicInteger> getConcurrencyMap() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ddd0e5eb32e9083476863eaefcd35ac4a5d2e13"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3NTI1OA==", "bodyText": "Improve the naming here?", "url": "https://github.com/alibaba/Sentinel/pull/1631#discussion_r464775258", "createdAt": "2020-08-04T03:20:35Z", "author": {"login": "sczyh30"}, "path": "sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/flow/statistic/concurrent/expire/RegularExpireStrategy.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.csp.sentinel.cluster.flow.statistic.concurrent.expire;\n+\n+import com.alibaba.csp.sentinel.cluster.flow.rule.ClusterFlowRuleManager;\n+import com.alibaba.csp.sentinel.cluster.flow.statistic.concurrent.CurrentConcurrencyManager;\n+import com.alibaba.csp.sentinel.cluster.flow.statistic.concurrent.TokenCacheNode;\n+import com.alibaba.csp.sentinel.cluster.server.connection.ConnectionManager;\n+import com.alibaba.csp.sentinel.concurrent.NamedThreadFactory;\n+import com.alibaba.csp.sentinel.log.RecordLog;\n+import com.alibaba.csp.sentinel.util.AssertUtil;\n+import com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * We need to consider the situation that the token client goes offline\n+ * or the resource call times out. It can be detected by sourceTimeout\n+ * and clientTimeout. The resource calls timeout detection is triggered\n+ * on the token client. If the resource is called over time, the token\n+ * client will request the token server to release token or refresh the\n+ * token. The client offline detection is triggered on the token server.\n+ * If the offline detection time is exceeded, token server will trigger\n+ * the detection token client\u2019s status. If the token client is offline,\n+ * token server will delete the corresponding tokenId. If it is not offline,\n+ * token server will continue to save it.\n+ *\n+ * @author yunfeiyanggzq\n+ **/\n+public class RegularExpireStrategy implements ExpireStrategy {\n+    /**\n+     * The max number of token deleted each time,\n+     * the number of expired key-value pairs deleted each time does not exceed this number\n+     */\n+    private long executeCount = 1000;\n+    /**\n+     * Length of time for task execution\n+     */\n+    private long executeDuration = 600;\n+    /**\n+     * Frequency of task execution\n+     */\n+    private long executeRate = 1000;\n+    /**\n+     * the local cache of tokenId\n+     */\n+    private ConcurrentLinkedHashMap<Long, TokenCacheNode> localCache;\n+\n+    @SuppressWarnings(\"PMD.ThreadPoolCreationRule\")\n+    private static ScheduledExecutorService executor = Executors.newScheduledThreadPool(1,\n+            new NamedThreadFactory(\"regular clear expired token thread\"));\n+\n+\n+    public RegularExpireStrategy() {\n+    }\n+\n+    @Override\n+    public void removeExpireKey(ConcurrentLinkedHashMap localCache) {\n+        AssertUtil.isTrue(localCache != null, \" local cache can't be null\");\n+        this.localCache = localCache;\n+        executor.scheduleAtFixedRate(new MyTask(), 0, executeRate, TimeUnit.MILLISECONDS);\n+    }\n+\n+    private class MyTask implements Runnable {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ddd0e5eb32e9083476863eaefcd35ac4a5d2e13"}, "originalPosition": 83}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3NTg3Mg==", "bodyText": "Can we use CacheMap interface here instead of a concrete type?", "url": "https://github.com/alibaba/Sentinel/pull/1631#discussion_r464775872", "createdAt": "2020-08-04T03:23:09Z", "author": {"login": "sczyh30"}, "path": "sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/flow/statistic/concurrent/expire/ExpireStrategy.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.csp.sentinel.cluster.flow.statistic.concurrent.expire;\n+\n+import com.alibaba.csp.sentinel.cluster.flow.statistic.concurrent.TokenCacheNode;\n+import com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\n+\n+/**\n+ * @author yunfeiyagnggzq\n+ */\n+public interface ExpireStrategy<K, V> {\n+    /**\n+     * clean expireKey-Value\n+     *\n+     * @param map the map needs to detect expired tokens.\n+     * @return the number of the key cleaned\n+     */\n+    void removeExpireKey(ConcurrentLinkedHashMap<Long, TokenCacheNode> map);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ddd0e5eb32e9083476863eaefcd35ac4a5d2e13"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3NTk5Nw==", "bodyText": "It's unused?", "url": "https://github.com/alibaba/Sentinel/pull/1631#discussion_r464775997", "createdAt": "2020-08-04T03:23:36Z", "author": {"login": "sczyh30"}, "path": "sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/flow/statistic/concurrent/expire/ExpireStrategy.java", "diffHunk": "@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.csp.sentinel.cluster.flow.statistic.concurrent.expire;\n+\n+import com.alibaba.csp.sentinel.cluster.flow.statistic.concurrent.TokenCacheNode;\n+import com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\n+\n+/**\n+ * @author yunfeiyagnggzq\n+ */\n+public interface ExpireStrategy<K, V> {\n+    /**\n+     * clean expireKey-Value\n+     *\n+     * @param map the map needs to detect expired tokens.\n+     * @return the number of the key cleaned", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ddd0e5eb32e9083476863eaefcd35ac4a5d2e13"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NDc3NjkwMQ==", "bodyText": "The removeExpireKey method here is confusing. It actually starts a periodical task instead of removing the keys immediately (so it's not allowed to invoke more than once). The design should be improved.", "url": "https://github.com/alibaba/Sentinel/pull/1631#discussion_r464776901", "createdAt": "2020-08-04T03:27:14Z", "author": {"login": "sczyh30"}, "path": "sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/flow/statistic/concurrent/expire/RegularExpireStrategy.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * Copyright 1999-2018 Alibaba Group Holding Ltd.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package com.alibaba.csp.sentinel.cluster.flow.statistic.concurrent.expire;\n+\n+import com.alibaba.csp.sentinel.cluster.flow.rule.ClusterFlowRuleManager;\n+import com.alibaba.csp.sentinel.cluster.flow.statistic.concurrent.CurrentConcurrencyManager;\n+import com.alibaba.csp.sentinel.cluster.flow.statistic.concurrent.TokenCacheNode;\n+import com.alibaba.csp.sentinel.cluster.server.connection.ConnectionManager;\n+import com.alibaba.csp.sentinel.concurrent.NamedThreadFactory;\n+import com.alibaba.csp.sentinel.log.RecordLog;\n+import com.alibaba.csp.sentinel.util.AssertUtil;\n+import com.googlecode.concurrentlinkedhashmap.ConcurrentLinkedHashMap;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.ScheduledExecutorService;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.atomic.AtomicInteger;\n+\n+/**\n+ * We need to consider the situation that the token client goes offline\n+ * or the resource call times out. It can be detected by sourceTimeout\n+ * and clientTimeout. The resource calls timeout detection is triggered\n+ * on the token client. If the resource is called over time, the token\n+ * client will request the token server to release token or refresh the\n+ * token. The client offline detection is triggered on the token server.\n+ * If the offline detection time is exceeded, token server will trigger\n+ * the detection token client\u2019s status. If the token client is offline,\n+ * token server will delete the corresponding tokenId. If it is not offline,\n+ * token server will continue to save it.\n+ *\n+ * @author yunfeiyanggzq\n+ **/\n+public class RegularExpireStrategy implements ExpireStrategy {\n+    /**\n+     * The max number of token deleted each time,\n+     * the number of expired key-value pairs deleted each time does not exceed this number\n+     */\n+    private long executeCount = 1000;\n+    /**\n+     * Length of time for task execution\n+     */\n+    private long executeDuration = 600;\n+    /**\n+     * Frequency of task execution\n+     */\n+    private long executeRate = 1000;\n+    /**\n+     * the local cache of tokenId\n+     */\n+    private ConcurrentLinkedHashMap<Long, TokenCacheNode> localCache;\n+\n+    @SuppressWarnings(\"PMD.ThreadPoolCreationRule\")\n+    private static ScheduledExecutorService executor = Executors.newScheduledThreadPool(1,\n+            new NamedThreadFactory(\"regular clear expired token thread\"));\n+\n+\n+    public RegularExpireStrategy() {\n+    }\n+\n+    @Override\n+    public void removeExpireKey(ConcurrentLinkedHashMap localCache) {\n+        AssertUtil.isTrue(localCache != null, \" local cache can't be null\");\n+        this.localCache = localCache;\n+        executor.scheduleAtFixedRate(new MyTask(), 0, executeRate, TimeUnit.MILLISECONDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0ddd0e5eb32e9083476863eaefcd35ac4a5d2e13"}, "originalPosition": 80}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0ddd0e5eb32e9083476863eaefcd35ac4a5d2e13", "author": {"user": {"login": "yunfeiyanggzq", "name": "ZhiQiang Gu"}}, "url": "https://github.com/alibaba/Sentinel/commit/0ddd0e5eb32e9083476863eaefcd35ac4a5d2e13", "committedDate": "2020-07-27T10:21:17Z", "message": "fix pmd warn\n\nSigned-off-by: yunfeiyanggzq <yunfeiyang@buaa.edu.cn>"}, "afterCommit": {"oid": "17c3ff7a443752b4d37c19ef56b90f4637cc3dd5", "author": {"user": {"login": "yunfeiyanggzq", "name": "ZhiQiang Gu"}}, "url": "https://github.com/alibaba/Sentinel/commit/17c3ff7a443752b4d37c19ef56b90f4637cc3dd5", "committedDate": "2020-07-23T02:15:01Z", "message": "test: Add unit test for sentinel-cluster-server and polish code (#1529)\n\nSigned-off-by: yunfeiyanggzq <yunfeiyang@buaa.edu.cn>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "ebbfc857d44bdae1616395506f3b2f5d5e787097", "author": {"user": {"login": "yunfeiyanggzq", "name": "ZhiQiang Gu"}}, "url": "https://github.com/alibaba/Sentinel/commit/ebbfc857d44bdae1616395506f3b2f5d5e787097", "committedDate": "2020-08-04T08:12:08Z", "message": "finish the cluster concurrent flow rule checker\n\nSigned-off-by: yunfeiyanggzq <yunfeiyang@buaa.edu.cn>"}, "afterCommit": {"oid": "3943abb51846f2b959641ac9d758b748d4aeb8b2", "author": {"user": {"login": "yunfeiyanggzq", "name": "ZhiQiang Gu"}}, "url": "https://github.com/alibaba/Sentinel/commit/3943abb51846f2b959641ac9d758b748d4aeb8b2", "committedDate": "2020-08-04T09:07:33Z", "message": "finish the default token server\n\nSigned-off-by: yunfeiyanggzq <yunfeiyang@buaa.edu.cn>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e3cf99839c1a46a903bcf5778b9373cb3a332144", "author": {"user": {"login": "yunfeiyanggzq", "name": "ZhiQiang Gu"}}, "url": "https://github.com/alibaba/Sentinel/commit/e3cf99839c1a46a903bcf5778b9373cb3a332144", "committedDate": "2020-08-04T09:23:48Z", "message": "modify\n\nSigned-off-by: yunfeiyanggzq <yunfeiyang@buaa.edu.cn>"}, "afterCommit": {"oid": "d4d2d477a3ad2ee6111b27cdf1034d33d8d72281", "author": {"user": {"login": "yunfeiyanggzq", "name": "ZhiQiang Gu"}}, "url": "https://github.com/alibaba/Sentinel/commit/d4d2d477a3ad2ee6111b27cdf1034d33d8d72281", "committedDate": "2020-08-20T07:30:29Z", "message": "finish the default token server\n\nSigned-off-by: yunfeiyanggzq <yunfeiyang@buaa.edu.cn>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNzYyODg4", "url": "https://github.com/alibaba/Sentinel/pull/1631#pullrequestreview-481762888", "createdAt": "2020-09-03T11:54:20Z", "commit": {"oid": "d4d2d477a3ad2ee6111b27cdf1034d33d8d72281"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMTo1NDoyMFrOHMjHDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMTo1NDoyMFrOHMjHDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4MjkyMDIwNQ==", "bodyText": "Could you please reformat your code?", "url": "https://github.com/alibaba/Sentinel/pull/1631#discussion_r482920205", "createdAt": "2020-09-03T11:54:20Z", "author": {"login": "sczyh30"}, "path": "sentinel-cluster/sentinel-cluster-server-default/src/main/java/com/alibaba/csp/sentinel/cluster/flow/rule/ClusterFlowRuleManager.java", "diffHunk": "@@ -351,6 +358,9 @@ private static void applyClusterFlowRule(List<FlowRule> list, /*@Valid*/ String\n             ruleMap.put(flowId, rule);\n             FLOW_NAMESPACE_MAP.put(flowId, namespace);\n             flowIdSet.add(flowId);\n+            if(!CurrentConcurrencyManager.containsFlowId(flowId)){", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d4d2d477a3ad2ee6111b27cdf1034d33d8d72281"}, "originalPosition": 32}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2926e286f40578be9942aa768fed511045e455bc", "author": {"user": {"login": "yunfeiyanggzq", "name": "ZhiQiang Gu"}}, "url": "https://github.com/alibaba/Sentinel/commit/2926e286f40578be9942aa768fed511045e455bc", "committedDate": "2020-09-04T00:51:51Z", "message": "add cluster concurrent flow control param into flow rule\n\nSigned-off-by: yunfeiyanggzq <yunfeiyang@buaa.edu.cn>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f7d93546c94fae4d2b723327723fef5dbcd17b9b", "author": {"user": {"login": "yunfeiyanggzq", "name": "ZhiQiang Gu"}}, "url": "https://github.com/alibaba/Sentinel/commit/f7d93546c94fae4d2b723327723fef5dbcd17b9b", "committedDate": "2020-09-04T00:54:18Z", "message": "add cluster concurrent  flow control interface into TokenService\n\nSigned-off-by: yunfeiyanggzq <yunfeiyang@buaa.edu.cn>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c496afdf8762a6ac988389cd6945022bc4af567", "author": {"user": {"login": "yunfeiyanggzq", "name": "ZhiQiang Gu"}}, "url": "https://github.com/alibaba/Sentinel/commit/5c496afdf8762a6ac988389cd6945022bc4af567", "committedDate": "2020-09-04T00:56:52Z", "message": "finish concurrent flow control checker\n\nSigned-off-by: yunfeiyanggzq <yunfeiyang@buaa.edu.cn>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "7faf1b17c4e9c3607683615da822269797ba5ead", "author": {"user": {"login": "yunfeiyanggzq", "name": "ZhiQiang Gu"}}, "url": "https://github.com/alibaba/Sentinel/commit/7faf1b17c4e9c3607683615da822269797ba5ead", "committedDate": "2020-09-03T12:00:24Z", "message": "reformat code\n\nSigned-off-by: yunfeiyanggzq <yunfeiyang@buaa.edu.cn>"}, "afterCommit": {"oid": "49f7da6c74692e1f7010b66dbee175d1c1227b99", "author": {"user": {"login": "yunfeiyanggzq", "name": "ZhiQiang Gu"}}, "url": "https://github.com/alibaba/Sentinel/commit/49f7da6c74692e1f7010b66dbee175d1c1227b99", "committedDate": "2020-09-04T00:57:18Z", "message": "unit tests for this pr\n\nSigned-off-by: yunfeiyanggzq <yunfeiyang@buaa.edu.cn>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1f0ce3bb1626d034d9f95945bba7a18ee56066e9", "author": {"user": {"login": "yunfeiyanggzq", "name": "ZhiQiang Gu"}}, "url": "https://github.com/alibaba/Sentinel/commit/1f0ce3bb1626d034d9f95945bba7a18ee56066e9", "committedDate": "2020-09-04T01:22:57Z", "message": "unit tests for cluster concurrent flow control checker\n\nSigned-off-by: yunfeiyanggzq <yunfeiyang@buaa.edu.cn>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "49f7da6c74692e1f7010b66dbee175d1c1227b99", "author": {"user": {"login": "yunfeiyanggzq", "name": "ZhiQiang Gu"}}, "url": "https://github.com/alibaba/Sentinel/commit/49f7da6c74692e1f7010b66dbee175d1c1227b99", "committedDate": "2020-09-04T00:57:18Z", "message": "unit tests for this pr\n\nSigned-off-by: yunfeiyanggzq <yunfeiyang@buaa.edu.cn>"}, "afterCommit": {"oid": "1f0ce3bb1626d034d9f95945bba7a18ee56066e9", "author": {"user": {"login": "yunfeiyanggzq", "name": "ZhiQiang Gu"}}, "url": "https://github.com/alibaba/Sentinel/commit/1f0ce3bb1626d034d9f95945bba7a18ee56066e9", "committedDate": "2020-09-04T01:22:57Z", "message": "unit tests for cluster concurrent flow control checker\n\nSigned-off-by: yunfeiyanggzq <yunfeiyang@buaa.edu.cn>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDg5MjMxMjc5", "url": "https://github.com/alibaba/Sentinel/pull/1631#pullrequestreview-489231279", "createdAt": "2020-09-16T02:31:35Z", "commit": {"oid": "1f0ce3bb1626d034d9f95945bba7a18ee56066e9"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4010, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}