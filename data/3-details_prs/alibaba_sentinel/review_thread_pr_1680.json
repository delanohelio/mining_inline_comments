{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwMTk0ODMw", "number": 1680, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzoyODo0NVrOEaFLFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMTo1OToyN1rOEaRKxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1NzgzMTg5OnYy", "diffSide": "RIGHT", "path": "sentinel-adapter/sentinel-apache-dubbo-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/dubbo/SentinelDubboConsumerFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xOVQxNzoyODo0NVrOHDSFPw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMTo0ODo0MFrOHDlmIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwNDAzMQ==", "bodyText": "Maybe the priority list is throwable -> r.exception indicating throwable is more fatal. How do you think about it?", "url": "https://github.com/alibaba/Sentinel/pull/1680#discussion_r473204031", "createdAt": "2020-08-19T17:28:45Z", "author": {"login": "jasonjoo2010"}, "path": "sentinel-adapter/sentinel-apache-dubbo-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/dubbo/SentinelDubboConsumerFilter.java", "diffHunk": "@@ -98,24 +101,26 @@ private Result syncInvoke(Invoker<?> invoker, Invocation invocation) {\n         }\n     }\n \n-\n     private Result asyncInvoke(Invoker<?> invoker, Invocation invocation) {\n         LinkedList<EntryHolder> queue = new LinkedList<>();\n         String prefix = DubboAdapterGlobalConfig.getDubboConsumerResNamePrefixKey();\n         String interfaceResourceName = getInterfaceName(invoker, prefix);\n         String methodResourceName = getMethodName(invoker, invocation, prefix);\n         try {\n-            queue.push(new EntryHolder(SphU.asyncEntry(interfaceResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.OUT), null));\n-            queue.push(new EntryHolder(SphU.asyncEntry(methodResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.OUT, 1, invocation.getArguments()), invocation.getArguments()));\n+            queue.push(new EntryHolder(\n+                SphU.asyncEntry(interfaceResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.OUT), null));\n+            queue.push(new EntryHolder(\n+                SphU.asyncEntry(methodResourceName, ResourceTypeConstants.COMMON_RPC,\n+                    EntryType.OUT, 1, invocation.getArguments()), invocation.getArguments()));\n             Result result = invoker.invoke(invocation);\n-            result.whenCompleteWithContext(new BiConsumer<Result, Throwable>() {\n-                @Override\n-                public void accept(Result result, Throwable throwable) {\n-                    while (!queue.isEmpty()) {\n-                        EntryHolder holder = queue.pop();\n-                        Tracer.traceEntry(result.getException(), holder.entry);\n-                        exitEntry(holder);\n-                    }\n+            result.whenCompleteWithContext((r, throwable) -> {\n+                while (!queue.isEmpty()) {\n+                    EntryHolder holder = queue.pop();\n+                    Throwable error = Optional.ofNullable(r)\n+                        .map(Result::getException)\n+                        .orElse(throwable);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "20229fc2c9a47c38a0ec07c6609a72b17cdedc0b"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzUyMzc0Nw==", "bodyText": "Updated, please check.", "url": "https://github.com/alibaba/Sentinel/pull/1680#discussion_r473523747", "createdAt": "2020-08-20T01:48:40Z", "author": {"login": "sczyh30"}, "path": "sentinel-adapter/sentinel-apache-dubbo-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/dubbo/SentinelDubboConsumerFilter.java", "diffHunk": "@@ -98,24 +101,26 @@ private Result syncInvoke(Invoker<?> invoker, Invocation invocation) {\n         }\n     }\n \n-\n     private Result asyncInvoke(Invoker<?> invoker, Invocation invocation) {\n         LinkedList<EntryHolder> queue = new LinkedList<>();\n         String prefix = DubboAdapterGlobalConfig.getDubboConsumerResNamePrefixKey();\n         String interfaceResourceName = getInterfaceName(invoker, prefix);\n         String methodResourceName = getMethodName(invoker, invocation, prefix);\n         try {\n-            queue.push(new EntryHolder(SphU.asyncEntry(interfaceResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.OUT), null));\n-            queue.push(new EntryHolder(SphU.asyncEntry(methodResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.OUT, 1, invocation.getArguments()), invocation.getArguments()));\n+            queue.push(new EntryHolder(\n+                SphU.asyncEntry(interfaceResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.OUT), null));\n+            queue.push(new EntryHolder(\n+                SphU.asyncEntry(methodResourceName, ResourceTypeConstants.COMMON_RPC,\n+                    EntryType.OUT, 1, invocation.getArguments()), invocation.getArguments()));\n             Result result = invoker.invoke(invocation);\n-            result.whenCompleteWithContext(new BiConsumer<Result, Throwable>() {\n-                @Override\n-                public void accept(Result result, Throwable throwable) {\n-                    while (!queue.isEmpty()) {\n-                        EntryHolder holder = queue.pop();\n-                        Tracer.traceEntry(result.getException(), holder.entry);\n-                        exitEntry(holder);\n-                    }\n+            result.whenCompleteWithContext((r, throwable) -> {\n+                while (!queue.isEmpty()) {\n+                    EntryHolder holder = queue.pop();\n+                    Throwable error = Optional.ofNullable(r)\n+                        .map(Result::getException)\n+                        .orElse(throwable);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzIwNDAzMQ=="}, "originalCommit": {"oid": "20229fc2c9a47c38a0ec07c6609a72b17cdedc0b"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk1OTc5NzE4OnYy", "diffSide": "RIGHT", "path": "sentinel-adapter/sentinel-apache-dubbo-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/dubbo/SentinelDubboConsumerFilter.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMTo1OToyN1rOHDmCgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQwMjowMzoxOVrOHDmL5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzUzMTAwOQ==", "bodyText": "It's better to set error outside the loop because there are always more than one elements in stack.", "url": "https://github.com/alibaba/Sentinel/pull/1680#discussion_r473531009", "createdAt": "2020-08-20T01:59:27Z", "author": {"login": "jasonjoo2010"}, "path": "sentinel-adapter/sentinel-apache-dubbo-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/dubbo/SentinelDubboConsumerFilter.java", "diffHunk": "@@ -98,24 +101,27 @@ private Result syncInvoke(Invoker<?> invoker, Invocation invocation) {\n         }\n     }\n \n-\n     private Result asyncInvoke(Invoker<?> invoker, Invocation invocation) {\n         LinkedList<EntryHolder> queue = new LinkedList<>();\n         String prefix = DubboAdapterGlobalConfig.getDubboConsumerResNamePrefixKey();\n         String interfaceResourceName = getInterfaceName(invoker, prefix);\n         String methodResourceName = getMethodName(invoker, invocation, prefix);\n         try {\n-            queue.push(new EntryHolder(SphU.asyncEntry(interfaceResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.OUT), null));\n-            queue.push(new EntryHolder(SphU.asyncEntry(methodResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.OUT, 1, invocation.getArguments()), invocation.getArguments()));\n+            queue.push(new EntryHolder(\n+                SphU.asyncEntry(interfaceResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.OUT), null));\n+            queue.push(new EntryHolder(\n+                SphU.asyncEntry(methodResourceName, ResourceTypeConstants.COMMON_RPC,\n+                    EntryType.OUT, 1, invocation.getArguments()), invocation.getArguments()));\n             Result result = invoker.invoke(invocation);\n-            result.whenCompleteWithContext(new BiConsumer<Result, Throwable>() {\n-                @Override\n-                public void accept(Result result, Throwable throwable) {\n-                    while (!queue.isEmpty()) {\n-                        EntryHolder holder = queue.pop();\n-                        Tracer.traceEntry(result.getException(), holder.entry);\n-                        exitEntry(holder);\n+            result.whenCompleteWithContext((r, throwable) -> {\n+                while (!queue.isEmpty()) {\n+                    EntryHolder holder = queue.pop();\n+                    Throwable error = throwable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e0280b9b3dbe893dbd30f55de1e4cc5e6fabf83f"}, "originalPosition": 69}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzUzMzQxNQ==", "bodyText": "Updated", "url": "https://github.com/alibaba/Sentinel/pull/1680#discussion_r473533415", "createdAt": "2020-08-20T02:03:19Z", "author": {"login": "sczyh30"}, "path": "sentinel-adapter/sentinel-apache-dubbo-adapter/src/main/java/com/alibaba/csp/sentinel/adapter/dubbo/SentinelDubboConsumerFilter.java", "diffHunk": "@@ -98,24 +101,27 @@ private Result syncInvoke(Invoker<?> invoker, Invocation invocation) {\n         }\n     }\n \n-\n     private Result asyncInvoke(Invoker<?> invoker, Invocation invocation) {\n         LinkedList<EntryHolder> queue = new LinkedList<>();\n         String prefix = DubboAdapterGlobalConfig.getDubboConsumerResNamePrefixKey();\n         String interfaceResourceName = getInterfaceName(invoker, prefix);\n         String methodResourceName = getMethodName(invoker, invocation, prefix);\n         try {\n-            queue.push(new EntryHolder(SphU.asyncEntry(interfaceResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.OUT), null));\n-            queue.push(new EntryHolder(SphU.asyncEntry(methodResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.OUT, 1, invocation.getArguments()), invocation.getArguments()));\n+            queue.push(new EntryHolder(\n+                SphU.asyncEntry(interfaceResourceName, ResourceTypeConstants.COMMON_RPC, EntryType.OUT), null));\n+            queue.push(new EntryHolder(\n+                SphU.asyncEntry(methodResourceName, ResourceTypeConstants.COMMON_RPC,\n+                    EntryType.OUT, 1, invocation.getArguments()), invocation.getArguments()));\n             Result result = invoker.invoke(invocation);\n-            result.whenCompleteWithContext(new BiConsumer<Result, Throwable>() {\n-                @Override\n-                public void accept(Result result, Throwable throwable) {\n-                    while (!queue.isEmpty()) {\n-                        EntryHolder holder = queue.pop();\n-                        Tracer.traceEntry(result.getException(), holder.entry);\n-                        exitEntry(holder);\n+            result.whenCompleteWithContext((r, throwable) -> {\n+                while (!queue.isEmpty()) {\n+                    EntryHolder holder = queue.pop();\n+                    Throwable error = throwable;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3MzUzMTAwOQ=="}, "originalCommit": {"oid": "e0280b9b3dbe893dbd30f55de1e4cc5e6fabf83f"}, "originalPosition": 69}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4108, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}