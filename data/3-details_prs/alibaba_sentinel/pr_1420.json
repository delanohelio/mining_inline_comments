{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA2NzI1Nzc3", "number": 1420, "title": "Refactor the mechanism of recording error (on completed)", "bodyText": "Describe what this PR does / why we need it\nRefactor the mechanism of recording error (record on completed).\nDoes this pull request fix one issue?\nResolves #1419\nDescribe how you did it\n\nRefactor for Entry: Separate block exception (blockError) and biz exception (error). Use setError(ex) to mark error for this invocation.\nRefactor for StatisticSlot: record the biz exception on entry completed (if error is present)\nPolish Tracer with entry.setError(ex) mechanism.\nPolish MetricExitCallback#exit with the new error tracing mechanism.\n\nDescribe how to verify it\nRun the test cases.\nSpecial notes for reviews\nThe upcoming refactor of circuit breaking depends on the mechanism.", "createdAt": "2020-04-21T14:51:08Z", "url": "https://github.com/alibaba/Sentinel/pull/1420", "merged": true, "mergeCommit": {"oid": "516e36fd83af2e9bcdc64d3813175d3dfb0be8ee"}, "closed": true, "closedAt": "2020-04-28T02:11:19Z", "author": {"login": "sczyh30"}, "timelineItems": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcaVaq3gFqTM5ODc1NTQ1NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcbbn7OgFqTQwMDUxMTE2Nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4NzU1NDU0", "url": "https://github.com/alibaba/Sentinel/pull/1420#pullrequestreview-398755454", "createdAt": "2020-04-23T04:45:15Z", "commit": {"oid": "59704f2cd5c7c0c18d33775d1fea8db33d55a490"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNDo0NToxNVrOGKWVyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QwNDo0NToxNVrOGKWVyQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzUwNDk2OQ==", "bodyText": "This recordCompleteFor makes it more clear to record for related node.\nIn StatisticSlot#exit of previous version, there is a judgement for max rt:\nint maxStatisticRt = SentinelConfig.statisticMaxRt();\nif (rt > maxStatisticRt) {\n    rt = maxStatisticRt;\n}\nIs it still needed here or some other place?\nI found that in MetricBucket\npublic void addRT(long rt) {\n    add(MetricEvent.RT, rt);\n    // Not thread-safe, but it's okay.\n    if (rt < minRt) {\n        minRt = rt;\n    }\n}\nIf a RT which is greater than default maxRT, it will still be added with actual value,\nnot quite sure about it, and the minRT seems not the same meaning as judgement of maxRT.", "url": "https://github.com/alibaba/Sentinel/pull/1420#discussion_r413504969", "createdAt": "2020-04-23T04:45:15Z", "author": {"login": "cdfive"}, "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/statistic/StatisticSlot.java", "diffHunk": "@@ -171,4 +150,16 @@ public void exit(Context context, ResourceWrapper resourceWrapper, int count, Ob\n \n         fireExit(context, resourceWrapper, count);\n     }\n+\n+    private void recordCompleteFor(Node node, int batchCount, long rt, Throwable error) {\n+        if (node == null) {\n+            return;\n+        }\n+        node.addRtAndSuccess(rt, batchCount);\n+        node.decreaseThreadNum();\n+\n+        if (error != null && !(error instanceof BlockException)) {\n+            node.increaseExceptionQps(batchCount);\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59704f2cd5c7c0c18d33775d1fea8db33d55a490"}, "originalPosition": 98}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MTk5NTUz", "url": "https://github.com/alibaba/Sentinel/pull/1420#pullrequestreview-399199553", "createdAt": "2020-04-23T15:11:29Z", "commit": {"oid": "59704f2cd5c7c0c18d33775d1fea8db33d55a490"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNToxMToyOVrOGKtW8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNToxMToyOVrOGKtW8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg4MjA5OA==", "bodyText": "How about keeping the same suffix of the two fields?", "url": "https://github.com/alibaba/Sentinel/pull/1420#discussion_r413882098", "createdAt": "2020-04-23T15:11:29Z", "author": {"login": "cdfive"}, "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/Entry.java", "diffHunk": "@@ -52,14 +54,19 @@\n \n     private static final Object[] OBJECTS0 = new Object[0];\n \n-    private long createTime;\n+    private final long createTime;\n+    private long completeTimestamp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59704f2cd5c7c0c18d33775d1fea8db33d55a490"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MjEyODU3", "url": "https://github.com/alibaba/Sentinel/pull/1420#pullrequestreview-399212857", "createdAt": "2020-04-23T15:24:46Z", "commit": {"oid": "59704f2cd5c7c0c18d33775d1fea8db33d55a490"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNToyNDo0NlrOGKuC6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNToyNDo0NlrOGKuC6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg5MzM1Mw==", "bodyText": "The parameter count now is unused, do we have no scenes that need to use it?\nAs @Deprecated is marked, maybe the caller SentinelReactorSubscriber#L150 and ReactorSphU#L60 use the newer method is better.", "url": "https://github.com/alibaba/Sentinel/pull/1420#discussion_r413893353", "createdAt": "2020-04-23T15:24:46Z", "author": {"login": "cdfive"}, "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/Tracer.java", "diffHunk": "@@ -39,87 +35,81 @@\n     protected Tracer() {}\n \n     /**\n-     * Trace provided {@link Throwable} and increment exception count to entry in current context.\n+     * Trace provided {@link Throwable} to the resource entry in current context.\n      *\n      * @param e exception to record\n      */\n     public static void trace(Throwable e) {\n-        trace(e, 1);\n+        traceContext(e, ContextUtil.getContext());\n     }\n \n     /**\n-     * Trace provided {@link Throwable} and add exception count to entry in current context.\n+     * Trace provided {@link Throwable} to current entry in current context.\n      *\n      * @param e     exception to record\n      * @param count exception count to add\n      */\n+    @Deprecated\n     public static void trace(Throwable e, int count) {\n         traceContext(e, count, ContextUtil.getContext());\n     }\n \n     /**\n-     * Trace provided {@link Throwable} and add exception count to current entry in provided context.\n+     * Trace provided {@link Throwable} to current entry of given entrance context.\n      *\n      * @param e     exception to record\n-     * @param count exception count to add\n-     * @since 1.4.2\n+     * @param context target entrance context\n+     * @since 1.8.0\n      */\n-    public static void traceContext(Throwable e, int count, Context context) {\n+    public static void traceContext(Throwable e, Context context) {\n         if (!shouldTrace(e)) {\n             return;\n         }\n \n         if (context == null || context instanceof NullContext) {\n             return;\n         }\n-\n-        DefaultNode curNode = (DefaultNode)context.getCurNode();\n-        traceExceptionToNode(e, count, context.getCurEntry(), curNode);\n-    }\n-\n-    /**\n-     * Trace provided {@link Throwable} and increment exception count to provided entry.\n-     *\n-     * @param e exception to record\n-     * @since 1.4.2\n-     */\n-    public static void traceEntry(Throwable e, Entry entry) {\n-        traceEntry(e, 1, entry);\n+        traceEntryInternal(e, context.getCurEntry());\n     }\n \n     /**\n-     * Trace provided {@link Throwable} and add exception count to provided entry.\n+     * Trace provided {@link Throwable} and add exception count to current entry in provided context.\n      *\n      * @param e     exception to record\n      * @param count exception count to add\n      * @since 1.4.2\n      */\n-    public static void traceEntry(Throwable e, int count, Entry entry) {\n+    @Deprecated\n+    public static void traceContext(Throwable e, int count, Context context) {\n         if (!shouldTrace(e)) {\n             return;\n         }\n-        if (entry == null || entry.getCurNode() == null) {\n+\n+        if (context == null || context instanceof NullContext) {\n             return;\n         }\n-\n-        DefaultNode curNode = (DefaultNode)entry.getCurNode();\n-        traceExceptionToNode(e, count, entry, curNode);\n+        traceEntryInternal(e, context.getCurEntry());\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59704f2cd5c7c0c18d33775d1fea8db33d55a490"}, "originalPosition": 96}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk5MjIwMzAy", "url": "https://github.com/alibaba/Sentinel/pull/1420#pullrequestreview-399220302", "createdAt": "2020-04-23T15:32:13Z", "commit": {"oid": "59704f2cd5c7c0c18d33775d1fea8db33d55a490"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNTozMjoxNFrOGKubDQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yM1QxNTozMjoxNFrOGKubDQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzg5OTUzMw==", "bodyText": "clusterNode.trace(t, count); is removed here, and is it right understanding that the increaseExceptionQps now is in the StatisticSlot#recordCompleteFor method. But the operation of cluserNode seems missing, is it affects?", "url": "https://github.com/alibaba/Sentinel/pull/1420#discussion_r413899533", "createdAt": "2020-04-23T15:32:14Z", "author": {"login": "cdfive"}, "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/Tracer.java", "diffHunk": "@@ -39,87 +35,81 @@\n     protected Tracer() {}\n \n     /**\n-     * Trace provided {@link Throwable} and increment exception count to entry in current context.\n+     * Trace provided {@link Throwable} to the resource entry in current context.\n      *\n      * @param e exception to record\n      */\n     public static void trace(Throwable e) {\n-        trace(e, 1);\n+        traceContext(e, ContextUtil.getContext());\n     }\n \n     /**\n-     * Trace provided {@link Throwable} and add exception count to entry in current context.\n+     * Trace provided {@link Throwable} to current entry in current context.\n      *\n      * @param e     exception to record\n      * @param count exception count to add\n      */\n+    @Deprecated\n     public static void trace(Throwable e, int count) {\n         traceContext(e, count, ContextUtil.getContext());\n     }\n \n     /**\n-     * Trace provided {@link Throwable} and add exception count to current entry in provided context.\n+     * Trace provided {@link Throwable} to current entry of given entrance context.\n      *\n      * @param e     exception to record\n-     * @param count exception count to add\n-     * @since 1.4.2\n+     * @param context target entrance context\n+     * @since 1.8.0\n      */\n-    public static void traceContext(Throwable e, int count, Context context) {\n+    public static void traceContext(Throwable e, Context context) {\n         if (!shouldTrace(e)) {\n             return;\n         }\n \n         if (context == null || context instanceof NullContext) {\n             return;\n         }\n-\n-        DefaultNode curNode = (DefaultNode)context.getCurNode();\n-        traceExceptionToNode(e, count, context.getCurEntry(), curNode);\n-    }\n-\n-    /**\n-     * Trace provided {@link Throwable} and increment exception count to provided entry.\n-     *\n-     * @param e exception to record\n-     * @since 1.4.2\n-     */\n-    public static void traceEntry(Throwable e, Entry entry) {\n-        traceEntry(e, 1, entry);\n+        traceEntryInternal(e, context.getCurEntry());\n     }\n \n     /**\n-     * Trace provided {@link Throwable} and add exception count to provided entry.\n+     * Trace provided {@link Throwable} and add exception count to current entry in provided context.\n      *\n      * @param e     exception to record\n      * @param count exception count to add\n      * @since 1.4.2\n      */\n-    public static void traceEntry(Throwable e, int count, Entry entry) {\n+    @Deprecated\n+    public static void traceContext(Throwable e, int count, Context context) {\n         if (!shouldTrace(e)) {\n             return;\n         }\n-        if (entry == null || entry.getCurNode() == null) {\n+\n+        if (context == null || context instanceof NullContext) {\n             return;\n         }\n-\n-        DefaultNode curNode = (DefaultNode)entry.getCurNode();\n-        traceExceptionToNode(e, count, entry, curNode);\n+        traceEntryInternal(e, context.getCurEntry());\n     }\n \n-    private static void traceExceptionToNode(Throwable t, int count, Entry entry, DefaultNode curNode) {\n-        if (curNode == null) {\n+    /**\n+     * Trace provided {@link Throwable} to the given resource entry.\n+     *\n+     * @param e exception to record\n+     * @since 1.4.2\n+     */\n+    public static void traceEntry(Throwable e, Entry entry) {\n+        if (!shouldTrace(e)) {\n             return;\n         }\n-        for (MetricExtension m : MetricExtensionProvider.getMetricExtensions()) {\n-            m.addException(entry.getResourceWrapper().getName(), count, t);\n-        }\n+        traceEntryInternal(e, entry);\n+    }\n \n-        // clusterNode can be null when Constants.ON is false.\n-        ClusterNode clusterNode = curNode.getClusterNode();\n-        if (clusterNode == null) {\n+    private static void traceEntryInternal(/*@NeedToTrace*/ Throwable e, Entry entry) {\n+        if (entry == null) {\n             return;\n         }\n-        clusterNode.trace(t, count);\n+\n+        entry.setError(e);\n     }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "59704f2cd5c7c0c18d33775d1fea8db33d55a490"}, "originalPosition": 126}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "59704f2cd5c7c0c18d33775d1fea8db33d55a490", "author": {"user": {"login": "sczyh30", "name": "Eric Zhao"}}, "url": "https://github.com/alibaba/Sentinel/commit/59704f2cd5c7c0c18d33775d1fea8db33d55a490", "committedDate": "2020-04-21T08:14:32Z", "message": "Polish Tracer with entry.setError(ex) mechanism\n\nSigned-off-by: Eric Zhao <sczyh16@gmail.com>"}, "afterCommit": {"oid": "daaf5cd13f3feff85f3df125fcecff0e04f9f457", "author": {"user": {"login": "sczyh30", "name": "Eric Zhao"}}, "url": "https://github.com/alibaba/Sentinel/commit/daaf5cd13f3feff85f3df125fcecff0e04f9f457", "committedDate": "2020-04-26T12:59:48Z", "message": "Polish Tracer with entry.setError(ex) mechanism\n\nSigned-off-by: Eric Zhao <sczyh16@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fcd5451fd47ac4784996b204f747eb84bbf374e7", "author": {"user": {"login": "sczyh30", "name": "Eric Zhao"}}, "url": "https://github.com/alibaba/Sentinel/commit/fcd5451fd47ac4784996b204f747eb84bbf374e7", "committedDate": "2020-04-26T13:02:39Z", "message": "Refactor the mechanism of recording error in Entry and StatisticSlot\n\n* Also polish related complete callbacks\n\nSigned-off-by: Eric Zhao <sczyh16@gmail.com>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "847f23ca79b52c308b39b229549b009b9772aeb0", "author": {"user": {"login": "sczyh30", "name": "Eric Zhao"}}, "url": "https://github.com/alibaba/Sentinel/commit/847f23ca79b52c308b39b229549b009b9772aeb0", "committedDate": "2020-04-26T13:02:39Z", "message": "Polish Tracer with entry.setError(ex) mechanism\n\nSigned-off-by: Eric Zhao <sczyh16@gmail.com>"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "daaf5cd13f3feff85f3df125fcecff0e04f9f457", "author": {"user": {"login": "sczyh30", "name": "Eric Zhao"}}, "url": "https://github.com/alibaba/Sentinel/commit/daaf5cd13f3feff85f3df125fcecff0e04f9f457", "committedDate": "2020-04-26T12:59:48Z", "message": "Polish Tracer with entry.setError(ex) mechanism\n\nSigned-off-by: Eric Zhao <sczyh16@gmail.com>"}, "afterCommit": {"oid": "847f23ca79b52c308b39b229549b009b9772aeb0", "author": {"user": {"login": "sczyh30", "name": "Eric Zhao"}}, "url": "https://github.com/alibaba/Sentinel/commit/847f23ca79b52c308b39b229549b009b9772aeb0", "committedDate": "2020-04-26T13:02:39Z", "message": "Polish Tracer with entry.setError(ex) mechanism\n\nSigned-off-by: Eric Zhao <sczyh16@gmail.com>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNTA5NDA2", "url": "https://github.com/alibaba/Sentinel/pull/1420#pullrequestreview-400509406", "createdAt": "2020-04-26T14:16:14Z", "commit": {"oid": "847f23ca79b52c308b39b229549b009b9772aeb0"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNDoxNjoxNFrOGMFKDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yNlQxNDoxNjoxNFrOGMFKDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxNTMyMDU4OA==", "bodyText": "I found that with the new design, we needn't increaseExceptionQps here(Unexpected error), which looks nicer.\nBy the way, context.getCurEntry().setError(e) looks equivalent to Tracer.traceContext(e, context), and the difference is that traceContext has shouldTrace judgement.\nSince almost never happens here, both are okay, right?", "url": "https://github.com/alibaba/Sentinel/pull/1420#discussion_r415320588", "createdAt": "2020-04-26T14:16:14Z", "author": {"login": "cdfive"}, "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/statistic/StatisticSlot.java", "diffHunk": "@@ -115,52 +115,31 @@ public void entry(Context context, ResourceWrapper resourceWrapper, DefaultNode\n \n             throw e;\n         } catch (Throwable e) {\n-            // Unexpected error, set error to current entry.\n+            // Unexpected internal error, set error to current entry.\n             context.getCurEntry().setError(e);\n \n-            // This should not happen.\n-            node.increaseExceptionQps(count);\n-            if (context.getCurEntry().getOriginNode() != null) {\n-                context.getCurEntry().getOriginNode().increaseExceptionQps(count);\n-            }\n-\n-            if (resourceWrapper.getEntryType() == EntryType.IN) {\n-                Constants.ENTRY_NODE.increaseExceptionQps(count);\n-            }\n             throw e;\n         }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "847f23ca79b52c308b39b229549b009b9772aeb0"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDAwNTExMTY3", "url": "https://github.com/alibaba/Sentinel/pull/1420#pullrequestreview-400511167", "createdAt": "2020-04-26T14:33:05Z", "commit": {"oid": "847f23ca79b52c308b39b229549b009b9772aeb0"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3912, "cost": 1, "resetAt": "2021-10-29T17:30:11Z"}}}