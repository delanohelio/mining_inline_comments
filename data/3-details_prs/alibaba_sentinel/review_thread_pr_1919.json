{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTQyOTAwMzA5", "number": 1919, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwNjoyNjo1OVrOFJcmCQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwNjoyNjo1OVrOFJcmCQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzQ1NDQ5OTkzOnYy", "diffSide": "RIGHT", "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/flow/FlowRuleManager.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwNjoyNjo1OVrOILyXVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yOFQwNjozODoxMlrOILyfRw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIzMDQyMQ==", "bodyText": "Can we add a metricLogFlushIntervalSec() method in SentinelConfig to resolve the metric flushing interval, and leverage the method here?", "url": "https://github.com/alibaba/Sentinel/pull/1919#discussion_r549230421", "createdAt": "2020-12-28T06:26:59Z", "author": {"login": "sczyh30"}, "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/flow/FlowRuleManager.java", "diffHunk": "@@ -61,9 +62,42 @@\n     static {\n         flowRules.set(Collections.<String, List<FlowRule>>emptyMap());\n         currentProperty.addListener(LISTENER);\n-        SCHEDULER.scheduleAtFixedRate(new MetricTimerListener(), 0, 1, TimeUnit.SECONDS);\n+        startMetricTimerListener();\n     }\n-\n+    \n+    /**\n+     * <p> Start the MetricTimerListener\n+     * <ol>\n+     *     <li>if the {@link SentinelConfig#METRIC_FLUSH_INTERVAL} more than 0,\n+     * the timer will run with the {@link SentinelConfig#METRIC_FLUSH_INTERVAL} as the rate </li>.\n+     *      <li>if the {@link SentinelConfig#METRIC_FLUSH_INTERVAL} less than 0(include) or value is not valid,\n+     * then means the timer will not be started </li>\n+     * <ol></p>\n+     */\n+    private static void startMetricTimerListener() {\n+        long flushInterval;\n+        String flushIntervalStr = SentinelConfig.getConfig(SentinelConfig.METRIC_FLUSH_INTERVAL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9d427e560176dfa18da20e0b49e89ac95c7abf50"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIzMjQ1NQ==", "bodyText": "@sczyh30 yes, that is more reasonable to put the time valid code into entrance. I will change the code later.", "url": "https://github.com/alibaba/Sentinel/pull/1919#discussion_r549232455", "createdAt": "2020-12-28T06:38:12Z", "author": {"login": "brotherlu-xcq"}, "path": "sentinel-core/src/main/java/com/alibaba/csp/sentinel/slots/block/flow/FlowRuleManager.java", "diffHunk": "@@ -61,9 +62,42 @@\n     static {\n         flowRules.set(Collections.<String, List<FlowRule>>emptyMap());\n         currentProperty.addListener(LISTENER);\n-        SCHEDULER.scheduleAtFixedRate(new MetricTimerListener(), 0, 1, TimeUnit.SECONDS);\n+        startMetricTimerListener();\n     }\n-\n+    \n+    /**\n+     * <p> Start the MetricTimerListener\n+     * <ol>\n+     *     <li>if the {@link SentinelConfig#METRIC_FLUSH_INTERVAL} more than 0,\n+     * the timer will run with the {@link SentinelConfig#METRIC_FLUSH_INTERVAL} as the rate </li>.\n+     *      <li>if the {@link SentinelConfig#METRIC_FLUSH_INTERVAL} less than 0(include) or value is not valid,\n+     * then means the timer will not be started </li>\n+     * <ol></p>\n+     */\n+    private static void startMetricTimerListener() {\n+        long flushInterval;\n+        String flushIntervalStr = SentinelConfig.getConfig(SentinelConfig.METRIC_FLUSH_INTERVAL);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0OTIzMDQyMQ=="}, "originalCommit": {"oid": "9d427e560176dfa18da20e0b49e89ac95c7abf50"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4135, "cost": 1, "resetAt": "2021-11-11T21:28:48Z"}}}