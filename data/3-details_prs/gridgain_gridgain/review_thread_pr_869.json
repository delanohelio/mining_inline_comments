{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY1ODE0MjYz", "number": 869, "reviewThreads": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMjo0NDo0NFrODaCmxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMjowMDowMlrODdqHTg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjMyMjYyOnYy", "diffSide": "RIGHT", "path": "modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/JettyRestProcessorAbstractSelfTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMjo0NDo0NFrOFgxgtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMzozNjozMlrOFg-UKQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkwOTk0MA==", "bodyText": "missing javadoc", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r369909940", "createdAt": "2020-01-23T02:44:44Z", "author": {"login": "nva"}, "path": "modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/JettyRestProcessorAbstractSelfTest.java", "diffHunk": "@@ -147,6 +150,8 @@\n     /** Used to sent request charset. */\n     private static final String CHARSET = StandardCharsets.UTF_8.name();\n \n+    private static final String UNSUPPORTED_KEY_TYPE = \"Specified key type is not supported\";", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d57b566ad803bee760d275f1b19485a30817bcb1"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDExOTcyMQ==", "bodyText": "Added.", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r370119721", "createdAt": "2020-01-23T13:36:32Z", "author": {"login": "vsisko"}, "path": "modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/JettyRestProcessorAbstractSelfTest.java", "diffHunk": "@@ -147,6 +150,8 @@\n     /** Used to sent request charset. */\n     private static final String CHARSET = StandardCharsets.UTF_8.name();\n \n+    private static final String UNSUPPORTED_KEY_TYPE = \"Specified key type is not supported\";", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkwOTk0MA=="}, "originalCommit": {"oid": "d57b566ad803bee760d275f1b19485a30817bcb1"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjMzNTg0OnYy", "diffSide": "RIGHT", "path": "modules/rest-http/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheGetValueTaskArg.java", "isResolved": false, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMjo1NTo1NlrOFgxorA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwODoyNjozM1rOFicYBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxMTk4MA==", "bodyText": "Why do you send enum as string?", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r369911980", "createdAt": "2020-01-23T02:55:56Z", "author": {"login": "nva"}, "path": "modules/rest-http/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheGetValueTaskArg.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.visor.cache;\n+\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+import org.apache.ignite.internal.dto.IgniteDataTransferObject;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+\n+/**\n+ * Argument for {@link VisorCacheGetValueTask}.\n+ */\n+public class VisorCacheGetValueTaskArg extends IgniteDataTransferObject {\n+    /** */\n+    private static final long serialVersionUID = 0L;\n+\n+    /** Cache name. */\n+    private String cacheName;\n+\n+    /** Type of key object. String presentation of {@link VisorObjectType} value. */\n+    private String type;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d57b566ad803bee760d275f1b19485a30817bcb1"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEyMDEzNA==", "bodyText": "To send of error from task if new key types will be added.", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r370120134", "createdAt": "2020-01-23T13:37:24Z", "author": {"login": "vsisko"}, "path": "modules/rest-http/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheGetValueTaskArg.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.visor.cache;\n+\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+import org.apache.ignite.internal.dto.IgniteDataTransferObject;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+\n+/**\n+ * Argument for {@link VisorCacheGetValueTask}.\n+ */\n+public class VisorCacheGetValueTaskArg extends IgniteDataTransferObject {\n+    /** */\n+    private static final long serialVersionUID = 0L;\n+\n+    /** Cache name. */\n+    private String cacheName;\n+\n+    /** Type of key object. String presentation of {@link VisorObjectType} value. */\n+    private String type;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxMTk4MA=="}, "originalCommit": {"oid": "d57b566ad803bee760d275f1b19485a30817bcb1"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDQ5MDI4NQ==", "bodyText": "I think we shouldn't send request with invalid params. For example disable such variant in UI, by features.\n@akuznetsov-gridgain What do you think?", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r370490285", "createdAt": "2020-01-24T06:35:00Z", "author": {"login": "nva"}, "path": "modules/rest-http/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheGetValueTaskArg.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.visor.cache;\n+\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+import org.apache.ignite.internal.dto.IgniteDataTransferObject;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+\n+/**\n+ * Argument for {@link VisorCacheGetValueTask}.\n+ */\n+public class VisorCacheGetValueTaskArg extends IgniteDataTransferObject {\n+    /** */\n+    private static final long serialVersionUID = 0L;\n+\n+    /** Cache name. */\n+    private String cacheName;\n+\n+    /** Type of key object. String presentation of {@link VisorObjectType} value. */\n+    private String type;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxMTk4MA=="}, "originalCommit": {"oid": "d57b566ad803bee760d275f1b19485a30817bcb1"}, "originalPosition": 37}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY2MDgwNg==", "bodyText": "Changed to Enum. Implemented deserializer for BinaryObject type.", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r371660806", "createdAt": "2020-01-28T08:26:33Z", "author": {"login": "vsisko"}, "path": "modules/rest-http/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheGetValueTaskArg.java", "diffHunk": "@@ -0,0 +1,98 @@\n+/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.visor.cache;\n+\n+import java.io.IOException;\n+import java.io.ObjectInput;\n+import java.io.ObjectOutput;\n+import org.apache.ignite.internal.dto.IgniteDataTransferObject;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+\n+/**\n+ * Argument for {@link VisorCacheGetValueTask}.\n+ */\n+public class VisorCacheGetValueTaskArg extends IgniteDataTransferObject {\n+    /** */\n+    private static final long serialVersionUID = 0L;\n+\n+    /** Cache name. */\n+    private String cacheName;\n+\n+    /** Type of key object. String presentation of {@link VisorObjectType} value. */\n+    private String type;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxMTk4MA=="}, "originalCommit": {"oid": "d57b566ad803bee760d275f1b19485a30817bcb1"}, "originalPosition": 37}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjMzNjI3OnYy", "diffSide": "RIGHT", "path": "modules/rest-http/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheGetValueTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMjo1NjoyNFrOFgxo-g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMzozNzo1MFrOFg-Wlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxMjA1OA==", "bodyText": "Should throw exception in this case.", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r369912058", "createdAt": "2020-01-23T02:56:24Z", "author": {"login": "nva"}, "path": "modules/rest-http/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheGetValueTask.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.visor.cache;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.sql.Date;\n+import java.sql.Timestamp;\n+import java.util.Iterator;\n+import java.util.UUID;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.binary.BinaryObject;\n+import org.apache.ignite.binary.BinaryObjectBuilder;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.processors.task.GridInternal;\n+import org.apache.ignite.internal.processors.task.GridVisorManagementTask;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.visor.VisorJob;\n+import org.apache.ignite.internal.visor.VisorOneNodeTask;\n+import org.apache.ignite.internal.visor.query.VisorQueryUtils;\n+import org.apache.ignite.internal.visor.util.VisorTaskUtils;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Task that get value in specified cache for specified key value.\n+ */\n+@GridInternal\n+@GridVisorManagementTask\n+public class VisorCacheGetValueTask extends VisorOneNodeTask<VisorCacheGetValueTaskArg, VisorCacheModifyTaskResult> {\n+    /** */\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    /** */\n+    private static final long serialVersionUID = 0L;\n+\n+    /** {@inheritDoc} */\n+    @Override protected VisorCacheModifyJob job(VisorCacheGetValueTaskArg arg) {\n+        return new VisorCacheModifyJob(arg, debug);\n+    }\n+\n+    /**\n+     * Job that get value in specified cache for specified key value.\n+     */\n+    private static class VisorCacheModifyJob extends VisorJob<VisorCacheGetValueTaskArg, VisorCacheModifyTaskResult> {\n+        /** */\n+        private static final long serialVersionUID = 0L;\n+\n+        /**\n+         * Create job.\n+         *\n+         * @param arg Task argument.\n+         * @param debug Debug flag.\n+         */\n+        private VisorCacheModifyJob(VisorCacheGetValueTaskArg arg, boolean debug) {\n+            super(arg, debug);\n+        }\n+\n+        /**\n+         * Convert string value to value of specified type.\n+         *\n+         * @param type Expected type.\n+         * @param value String presentation of value.\n+         * @return Value of specified type.\n+         */\n+        private Object parseArgumentValue(VisorObjectType type, String value) {\n+            switch (type) {\n+                case CHARACTER:\n+                    return value.charAt(0);\n+\n+                case INT:\n+                    return Integer.valueOf(value);\n+\n+                case LONG:\n+                    return Long.valueOf(value);\n+\n+                case SHORT:\n+                    return Short.valueOf(value);\n+\n+                case BYTE:\n+                    return Byte.valueOf(value);\n+\n+                case FLOAT:\n+                    return Float.valueOf(value);\n+\n+                case DOUBLE:\n+                    return Double.valueOf(value);\n+\n+                case BOOLEAN:\n+                    return Boolean.valueOf(value);\n+\n+                case UUID:\n+                    return UUID.fromString(value);\n+\n+                case TIMESTAMP:\n+                    return new Timestamp(Long.parseLong(value));\n+\n+                case DATE:\n+                    return new Date(Long.parseLong(value));\n+\n+                case BINARY:\n+                    try {\n+                        JsonNode obj = MAPPER.readTree(value);\n+\n+                        return constructBinaryValue(obj);\n+                    }\n+                    catch (IOException e) {\n+                        throw new IgniteException(\"Failed to read key object\", e);\n+                    }\n+\n+                default:\n+                    return value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d57b566ad803bee760d275f1b19485a30817bcb1"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEyMDM0Mg==", "bodyText": "Changed.", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r370120342", "createdAt": "2020-01-23T13:37:50Z", "author": {"login": "vsisko"}, "path": "modules/rest-http/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheGetValueTask.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.visor.cache;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.sql.Date;\n+import java.sql.Timestamp;\n+import java.util.Iterator;\n+import java.util.UUID;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.binary.BinaryObject;\n+import org.apache.ignite.binary.BinaryObjectBuilder;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.processors.task.GridInternal;\n+import org.apache.ignite.internal.processors.task.GridVisorManagementTask;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.visor.VisorJob;\n+import org.apache.ignite.internal.visor.VisorOneNodeTask;\n+import org.apache.ignite.internal.visor.query.VisorQueryUtils;\n+import org.apache.ignite.internal.visor.util.VisorTaskUtils;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Task that get value in specified cache for specified key value.\n+ */\n+@GridInternal\n+@GridVisorManagementTask\n+public class VisorCacheGetValueTask extends VisorOneNodeTask<VisorCacheGetValueTaskArg, VisorCacheModifyTaskResult> {\n+    /** */\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    /** */\n+    private static final long serialVersionUID = 0L;\n+\n+    /** {@inheritDoc} */\n+    @Override protected VisorCacheModifyJob job(VisorCacheGetValueTaskArg arg) {\n+        return new VisorCacheModifyJob(arg, debug);\n+    }\n+\n+    /**\n+     * Job that get value in specified cache for specified key value.\n+     */\n+    private static class VisorCacheModifyJob extends VisorJob<VisorCacheGetValueTaskArg, VisorCacheModifyTaskResult> {\n+        /** */\n+        private static final long serialVersionUID = 0L;\n+\n+        /**\n+         * Create job.\n+         *\n+         * @param arg Task argument.\n+         * @param debug Debug flag.\n+         */\n+        private VisorCacheModifyJob(VisorCacheGetValueTaskArg arg, boolean debug) {\n+            super(arg, debug);\n+        }\n+\n+        /**\n+         * Convert string value to value of specified type.\n+         *\n+         * @param type Expected type.\n+         * @param value String presentation of value.\n+         * @return Value of specified type.\n+         */\n+        private Object parseArgumentValue(VisorObjectType type, String value) {\n+            switch (type) {\n+                case CHARACTER:\n+                    return value.charAt(0);\n+\n+                case INT:\n+                    return Integer.valueOf(value);\n+\n+                case LONG:\n+                    return Long.valueOf(value);\n+\n+                case SHORT:\n+                    return Short.valueOf(value);\n+\n+                case BYTE:\n+                    return Byte.valueOf(value);\n+\n+                case FLOAT:\n+                    return Float.valueOf(value);\n+\n+                case DOUBLE:\n+                    return Double.valueOf(value);\n+\n+                case BOOLEAN:\n+                    return Boolean.valueOf(value);\n+\n+                case UUID:\n+                    return UUID.fromString(value);\n+\n+                case TIMESTAMP:\n+                    return new Timestamp(Long.parseLong(value));\n+\n+                case DATE:\n+                    return new Date(Long.parseLong(value));\n+\n+                case BINARY:\n+                    try {\n+                        JsonNode obj = MAPPER.readTree(value);\n+\n+                        return constructBinaryValue(obj);\n+                    }\n+                    catch (IOException e) {\n+                        throw new IgniteException(\"Failed to read key object\", e);\n+                    }\n+\n+                default:\n+                    return value;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxMjA1OA=="}, "originalCommit": {"oid": "d57b566ad803bee760d275f1b19485a30817bcb1"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjM0MDQ2OnYy", "diffSide": "RIGHT", "path": "modules/rest-http/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheGetValueTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMzowMDowNVrOFgxr3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMzozODowMVrOFg-W6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxMjc5Ng==", "bodyText": "Please define wrapper class and map to it:\n{\nclassName,\nfields: [...]\n}", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r369912796", "createdAt": "2020-01-23T03:00:05Z", "author": {"login": "nva"}, "path": "modules/rest-http/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheGetValueTask.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.visor.cache;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.sql.Date;\n+import java.sql.Timestamp;\n+import java.util.Iterator;\n+import java.util.UUID;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.binary.BinaryObject;\n+import org.apache.ignite.binary.BinaryObjectBuilder;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.processors.task.GridInternal;\n+import org.apache.ignite.internal.processors.task.GridVisorManagementTask;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.visor.VisorJob;\n+import org.apache.ignite.internal.visor.VisorOneNodeTask;\n+import org.apache.ignite.internal.visor.query.VisorQueryUtils;\n+import org.apache.ignite.internal.visor.util.VisorTaskUtils;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Task that get value in specified cache for specified key value.\n+ */\n+@GridInternal\n+@GridVisorManagementTask\n+public class VisorCacheGetValueTask extends VisorOneNodeTask<VisorCacheGetValueTaskArg, VisorCacheModifyTaskResult> {\n+    /** */\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    /** */\n+    private static final long serialVersionUID = 0L;\n+\n+    /** {@inheritDoc} */\n+    @Override protected VisorCacheModifyJob job(VisorCacheGetValueTaskArg arg) {\n+        return new VisorCacheModifyJob(arg, debug);\n+    }\n+\n+    /**\n+     * Job that get value in specified cache for specified key value.\n+     */\n+    private static class VisorCacheModifyJob extends VisorJob<VisorCacheGetValueTaskArg, VisorCacheModifyTaskResult> {\n+        /** */\n+        private static final long serialVersionUID = 0L;\n+\n+        /**\n+         * Create job.\n+         *\n+         * @param arg Task argument.\n+         * @param debug Debug flag.\n+         */\n+        private VisorCacheModifyJob(VisorCacheGetValueTaskArg arg, boolean debug) {\n+            super(arg, debug);\n+        }\n+\n+        /**\n+         * Convert string value to value of specified type.\n+         *\n+         * @param type Expected type.\n+         * @param value String presentation of value.\n+         * @return Value of specified type.\n+         */\n+        private Object parseArgumentValue(VisorObjectType type, String value) {\n+            switch (type) {\n+                case CHARACTER:\n+                    return value.charAt(0);\n+\n+                case INT:\n+                    return Integer.valueOf(value);\n+\n+                case LONG:\n+                    return Long.valueOf(value);\n+\n+                case SHORT:\n+                    return Short.valueOf(value);\n+\n+                case BYTE:\n+                    return Byte.valueOf(value);\n+\n+                case FLOAT:\n+                    return Float.valueOf(value);\n+\n+                case DOUBLE:\n+                    return Double.valueOf(value);\n+\n+                case BOOLEAN:\n+                    return Boolean.valueOf(value);\n+\n+                case UUID:\n+                    return UUID.fromString(value);\n+\n+                case TIMESTAMP:\n+                    return new Timestamp(Long.parseLong(value));\n+\n+                case DATE:\n+                    return new Date(Long.parseLong(value));\n+\n+                case BINARY:\n+                    try {\n+                        JsonNode obj = MAPPER.readTree(value);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d57b566ad803bee760d275f1b19485a30817bcb1"}, "originalPosition": 118}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEyMDQyNA==", "bodyText": "Wrapper implemented.", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r370120424", "createdAt": "2020-01-23T13:38:01Z", "author": {"login": "vsisko"}, "path": "modules/rest-http/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheGetValueTask.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.visor.cache;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.sql.Date;\n+import java.sql.Timestamp;\n+import java.util.Iterator;\n+import java.util.UUID;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.binary.BinaryObject;\n+import org.apache.ignite.binary.BinaryObjectBuilder;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.processors.task.GridInternal;\n+import org.apache.ignite.internal.processors.task.GridVisorManagementTask;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.visor.VisorJob;\n+import org.apache.ignite.internal.visor.VisorOneNodeTask;\n+import org.apache.ignite.internal.visor.query.VisorQueryUtils;\n+import org.apache.ignite.internal.visor.util.VisorTaskUtils;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Task that get value in specified cache for specified key value.\n+ */\n+@GridInternal\n+@GridVisorManagementTask\n+public class VisorCacheGetValueTask extends VisorOneNodeTask<VisorCacheGetValueTaskArg, VisorCacheModifyTaskResult> {\n+    /** */\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    /** */\n+    private static final long serialVersionUID = 0L;\n+\n+    /** {@inheritDoc} */\n+    @Override protected VisorCacheModifyJob job(VisorCacheGetValueTaskArg arg) {\n+        return new VisorCacheModifyJob(arg, debug);\n+    }\n+\n+    /**\n+     * Job that get value in specified cache for specified key value.\n+     */\n+    private static class VisorCacheModifyJob extends VisorJob<VisorCacheGetValueTaskArg, VisorCacheModifyTaskResult> {\n+        /** */\n+        private static final long serialVersionUID = 0L;\n+\n+        /**\n+         * Create job.\n+         *\n+         * @param arg Task argument.\n+         * @param debug Debug flag.\n+         */\n+        private VisorCacheModifyJob(VisorCacheGetValueTaskArg arg, boolean debug) {\n+            super(arg, debug);\n+        }\n+\n+        /**\n+         * Convert string value to value of specified type.\n+         *\n+         * @param type Expected type.\n+         * @param value String presentation of value.\n+         * @return Value of specified type.\n+         */\n+        private Object parseArgumentValue(VisorObjectType type, String value) {\n+            switch (type) {\n+                case CHARACTER:\n+                    return value.charAt(0);\n+\n+                case INT:\n+                    return Integer.valueOf(value);\n+\n+                case LONG:\n+                    return Long.valueOf(value);\n+\n+                case SHORT:\n+                    return Short.valueOf(value);\n+\n+                case BYTE:\n+                    return Byte.valueOf(value);\n+\n+                case FLOAT:\n+                    return Float.valueOf(value);\n+\n+                case DOUBLE:\n+                    return Double.valueOf(value);\n+\n+                case BOOLEAN:\n+                    return Boolean.valueOf(value);\n+\n+                case UUID:\n+                    return UUID.fromString(value);\n+\n+                case TIMESTAMP:\n+                    return new Timestamp(Long.parseLong(value));\n+\n+                case DATE:\n+                    return new Date(Long.parseLong(value));\n+\n+                case BINARY:\n+                    try {\n+                        JsonNode obj = MAPPER.readTree(value);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxMjc5Ng=="}, "originalCommit": {"oid": "d57b566ad803bee760d275f1b19485a30817bcb1"}, "originalPosition": 118}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4NjM0OTQ0OnYy", "diffSide": "RIGHT", "path": "modules/rest-http/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheGetValueTask.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QwMzowNzo1MVrOFgxxeg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxMzozODoxNlrOFg-XZA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxNDIzNA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            throw new IllegalArgumentException(\"Failed to find cache with specified name [cacheName=\" + arg.getCacheName() + \"]\");\n          \n          \n            \n                            throw new IllegalArgumentException(\"Failed to find cache with specified name: \" + arg.getCacheName());", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r369914234", "createdAt": "2020-01-23T03:07:51Z", "author": {"login": "nva"}, "path": "modules/rest-http/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheGetValueTask.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.visor.cache;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.sql.Date;\n+import java.sql.Timestamp;\n+import java.util.Iterator;\n+import java.util.UUID;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.binary.BinaryObject;\n+import org.apache.ignite.binary.BinaryObjectBuilder;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.processors.task.GridInternal;\n+import org.apache.ignite.internal.processors.task.GridVisorManagementTask;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.visor.VisorJob;\n+import org.apache.ignite.internal.visor.VisorOneNodeTask;\n+import org.apache.ignite.internal.visor.query.VisorQueryUtils;\n+import org.apache.ignite.internal.visor.util.VisorTaskUtils;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Task that get value in specified cache for specified key value.\n+ */\n+@GridInternal\n+@GridVisorManagementTask\n+public class VisorCacheGetValueTask extends VisorOneNodeTask<VisorCacheGetValueTaskArg, VisorCacheModifyTaskResult> {\n+    /** */\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    /** */\n+    private static final long serialVersionUID = 0L;\n+\n+    /** {@inheritDoc} */\n+    @Override protected VisorCacheModifyJob job(VisorCacheGetValueTaskArg arg) {\n+        return new VisorCacheModifyJob(arg, debug);\n+    }\n+\n+    /**\n+     * Job that get value in specified cache for specified key value.\n+     */\n+    private static class VisorCacheModifyJob extends VisorJob<VisorCacheGetValueTaskArg, VisorCacheModifyTaskResult> {\n+        /** */\n+        private static final long serialVersionUID = 0L;\n+\n+        /**\n+         * Create job.\n+         *\n+         * @param arg Task argument.\n+         * @param debug Debug flag.\n+         */\n+        private VisorCacheModifyJob(VisorCacheGetValueTaskArg arg, boolean debug) {\n+            super(arg, debug);\n+        }\n+\n+        /**\n+         * Convert string value to value of specified type.\n+         *\n+         * @param type Expected type.\n+         * @param value String presentation of value.\n+         * @return Value of specified type.\n+         */\n+        private Object parseArgumentValue(VisorObjectType type, String value) {\n+            switch (type) {\n+                case CHARACTER:\n+                    return value.charAt(0);\n+\n+                case INT:\n+                    return Integer.valueOf(value);\n+\n+                case LONG:\n+                    return Long.valueOf(value);\n+\n+                case SHORT:\n+                    return Short.valueOf(value);\n+\n+                case BYTE:\n+                    return Byte.valueOf(value);\n+\n+                case FLOAT:\n+                    return Float.valueOf(value);\n+\n+                case DOUBLE:\n+                    return Double.valueOf(value);\n+\n+                case BOOLEAN:\n+                    return Boolean.valueOf(value);\n+\n+                case UUID:\n+                    return UUID.fromString(value);\n+\n+                case TIMESTAMP:\n+                    return new Timestamp(Long.parseLong(value));\n+\n+                case DATE:\n+                    return new Date(Long.parseLong(value));\n+\n+                case BINARY:\n+                    try {\n+                        JsonNode obj = MAPPER.readTree(value);\n+\n+                        return constructBinaryValue(obj);\n+                    }\n+                    catch (IOException e) {\n+                        throw new IgniteException(\"Failed to read key object\", e);\n+                    }\n+\n+                default:\n+                    return value;\n+            }\n+        }\n+\n+        /**\n+         * Construct {@link BinaryObject} value specified in JSON object.\n+         *\n+         * @param value JSON specification of {@link BinaryObject} value.\n+         * @return {@link BinaryObject} for specified value.\n+         */\n+        private BinaryObject constructBinaryValue(JsonNode value) {\n+            String clsName = value.get(\"className\").textValue();\n+\n+            BinaryObjectBuilder b = ignite.binary().builder(clsName);\n+\n+            for (Iterator<JsonNode> it = value.get(\"fields\").elements(); it.hasNext();) {\n+                JsonNode fld = it.next();\n+\n+                String fldName = fld.get(\"name\").textValue();\n+                VisorObjectType fldType = VisorObjectType.valueOf(fld.get(\"type\").textValue());\n+                JsonNode fldValue = fld.get(\"value\");\n+\n+                if (fldType == VisorObjectType.BINARY)\n+                    b.setField(fldName, constructBinaryValue(fldValue));\n+                else\n+                    b.setField(fldName, parseArgumentValue(fldType, fldValue.asText()));\n+            }\n+\n+            return b.build();\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override protected VisorCacheModifyTaskResult run(final VisorCacheGetValueTaskArg arg) {\n+            assert arg != null;\n+\n+            String cacheName = arg.getCacheName();\n+            assert cacheName != null;\n+\n+            @Nullable IgniteCache<Object, Object> cache = ignite.cache(cacheName);\n+\n+            ignite.context().cache().internalCache(cacheName);\n+\n+            if (cache == null)\n+                throw new IllegalArgumentException(\"Failed to find cache with specified name [cacheName=\" + arg.getCacheName() + \"]\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d57b566ad803bee760d275f1b19485a30817bcb1"}, "originalPosition": 170}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDEyMDU0OA==", "bodyText": "Message changed.", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r370120548", "createdAt": "2020-01-23T13:38:16Z", "author": {"login": "vsisko"}, "path": "modules/rest-http/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheGetValueTask.java", "diffHunk": "@@ -0,0 +1,203 @@\n+/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.visor.cache;\n+\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.sql.Date;\n+import java.sql.Timestamp;\n+import java.util.Iterator;\n+import java.util.UUID;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.binary.BinaryObject;\n+import org.apache.ignite.binary.BinaryObjectBuilder;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.processors.task.GridInternal;\n+import org.apache.ignite.internal.processors.task.GridVisorManagementTask;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.visor.VisorJob;\n+import org.apache.ignite.internal.visor.VisorOneNodeTask;\n+import org.apache.ignite.internal.visor.query.VisorQueryUtils;\n+import org.apache.ignite.internal.visor.util.VisorTaskUtils;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Task that get value in specified cache for specified key value.\n+ */\n+@GridInternal\n+@GridVisorManagementTask\n+public class VisorCacheGetValueTask extends VisorOneNodeTask<VisorCacheGetValueTaskArg, VisorCacheModifyTaskResult> {\n+    /** */\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n+\n+    /** */\n+    private static final long serialVersionUID = 0L;\n+\n+    /** {@inheritDoc} */\n+    @Override protected VisorCacheModifyJob job(VisorCacheGetValueTaskArg arg) {\n+        return new VisorCacheModifyJob(arg, debug);\n+    }\n+\n+    /**\n+     * Job that get value in specified cache for specified key value.\n+     */\n+    private static class VisorCacheModifyJob extends VisorJob<VisorCacheGetValueTaskArg, VisorCacheModifyTaskResult> {\n+        /** */\n+        private static final long serialVersionUID = 0L;\n+\n+        /**\n+         * Create job.\n+         *\n+         * @param arg Task argument.\n+         * @param debug Debug flag.\n+         */\n+        private VisorCacheModifyJob(VisorCacheGetValueTaskArg arg, boolean debug) {\n+            super(arg, debug);\n+        }\n+\n+        /**\n+         * Convert string value to value of specified type.\n+         *\n+         * @param type Expected type.\n+         * @param value String presentation of value.\n+         * @return Value of specified type.\n+         */\n+        private Object parseArgumentValue(VisorObjectType type, String value) {\n+            switch (type) {\n+                case CHARACTER:\n+                    return value.charAt(0);\n+\n+                case INT:\n+                    return Integer.valueOf(value);\n+\n+                case LONG:\n+                    return Long.valueOf(value);\n+\n+                case SHORT:\n+                    return Short.valueOf(value);\n+\n+                case BYTE:\n+                    return Byte.valueOf(value);\n+\n+                case FLOAT:\n+                    return Float.valueOf(value);\n+\n+                case DOUBLE:\n+                    return Double.valueOf(value);\n+\n+                case BOOLEAN:\n+                    return Boolean.valueOf(value);\n+\n+                case UUID:\n+                    return UUID.fromString(value);\n+\n+                case TIMESTAMP:\n+                    return new Timestamp(Long.parseLong(value));\n+\n+                case DATE:\n+                    return new Date(Long.parseLong(value));\n+\n+                case BINARY:\n+                    try {\n+                        JsonNode obj = MAPPER.readTree(value);\n+\n+                        return constructBinaryValue(obj);\n+                    }\n+                    catch (IOException e) {\n+                        throw new IgniteException(\"Failed to read key object\", e);\n+                    }\n+\n+                default:\n+                    return value;\n+            }\n+        }\n+\n+        /**\n+         * Construct {@link BinaryObject} value specified in JSON object.\n+         *\n+         * @param value JSON specification of {@link BinaryObject} value.\n+         * @return {@link BinaryObject} for specified value.\n+         */\n+        private BinaryObject constructBinaryValue(JsonNode value) {\n+            String clsName = value.get(\"className\").textValue();\n+\n+            BinaryObjectBuilder b = ignite.binary().builder(clsName);\n+\n+            for (Iterator<JsonNode> it = value.get(\"fields\").elements(); it.hasNext();) {\n+                JsonNode fld = it.next();\n+\n+                String fldName = fld.get(\"name\").textValue();\n+                VisorObjectType fldType = VisorObjectType.valueOf(fld.get(\"type\").textValue());\n+                JsonNode fldValue = fld.get(\"value\");\n+\n+                if (fldType == VisorObjectType.BINARY)\n+                    b.setField(fldName, constructBinaryValue(fldValue));\n+                else\n+                    b.setField(fldName, parseArgumentValue(fldType, fldValue.asText()));\n+            }\n+\n+            return b.build();\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override protected VisorCacheModifyTaskResult run(final VisorCacheGetValueTaskArg arg) {\n+            assert arg != null;\n+\n+            String cacheName = arg.getCacheName();\n+            assert cacheName != null;\n+\n+            @Nullable IgniteCache<Object, Object> cache = ignite.cache(cacheName);\n+\n+            ignite.context().cache().internalCache(cacheName);\n+\n+            if (cache == null)\n+                throw new IllegalArgumentException(\"Failed to find cache with specified name [cacheName=\" + arg.getCacheName() + \"]\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2OTkxNDIzNA=="}, "originalCommit": {"oid": "d57b566ad803bee760d275f1b19485a30817bcb1"}, "originalPosition": 170}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI4ODk1MzI1OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/IgniteFeatures.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yM1QxOTo0NzozNFrOFhKjiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0yOFQwODoyNTo0NFrOFicW4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyMDI2Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                WC_CACHE_GET_VALUE(31);\n          \n          \n            \n                WC_GET_CACHE_VALUE(31);", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r370320267", "createdAt": "2020-01-23T19:47:34Z", "author": {"login": "akuznetsov-gridgain"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/IgniteFeatures.java", "diffHunk": "@@ -112,7 +112,10 @@\n     MANAGEMENT_CONSOLE(28),\n \n     /** Long operations dump timeout. */\n-    LONG_OPERATIONS_DUMP_TIMEOUT(30);\n+    LONG_OPERATIONS_DUMP_TIMEOUT(30),\n+\n+    /** Cluster has task to get value from cache by key value. */\n+    WC_CACHE_GET_VALUE(31);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d967f62de05addaad814c36f3f07caac2fda3c04"}, "originalPosition": 8}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MTY2MDUxMg==", "bodyText": "Renamed", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r371660512", "createdAt": "2020-01-28T08:25:44Z", "author": {"login": "vsisko"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/IgniteFeatures.java", "diffHunk": "@@ -112,7 +112,10 @@\n     MANAGEMENT_CONSOLE(28),\n \n     /** Long operations dump timeout. */\n-    LONG_OPERATIONS_DUMP_TIMEOUT(30);\n+    LONG_OPERATIONS_DUMP_TIMEOUT(30),\n+\n+    /** Cluster has task to get value from cache by key value. */\n+    WC_CACHE_GET_VALUE(31);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3MDMyMDI2Nw=="}, "originalCommit": {"oid": "d967f62de05addaad814c36f3f07caac2fda3c04"}, "originalPosition": 8}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMwNDk3MzQyOnYy", "diffSide": "RIGHT", "path": "modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/JettyRestProcessorAbstractSelfTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0zMFQwNzoyOTowNlrOFjheNQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNzozMDoyNFrOFlt-4w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc5Mjg4NQ==", "bodyText": "Do we need this?", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r372792885", "createdAt": "2020-01-30T07:29:06Z", "author": {"login": "nva"}, "path": "modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/JettyRestProcessorAbstractSelfTest.java", "diffHunk": "@@ -1636,6 +1644,184 @@ public void testExe() throws Exception {\n         assertResponseContainsError(ret, \"Failed to find mandatory parameter in request: id\");\n     }\n \n+    /**\n+     * Tests work of VisorCacheGetValueTask via {@link VisorGatewayTask}.\n+     *\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    public void testVisorGetCacheValueTask() throws Exception {\n+        ClusterNode locNode = grid(1).localNode();\n+\n+        Person p = new Person(100, \"John\", \"Doe\", 300);\n+\n+        // Check integer key.\n+        jcache().put(1, p);\n+\n+        String ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, VisorDataType.INT, \"1\"));\n+\n+        info(\"VisorCacheGetValueTask result for Integer key: \" + ret);\n+\n+        JsonNode res = jsonTaskResult(ret);\n+\n+        String resStr = res.get(\"result\").toString();\n+\n+        assertTrue(resStr.contains(\"\\\"id\\\":\" + p.getId()));\n+        assertTrue(resStr.contains(\"\\\"orgId\\\":\" + p.getOrganizationId()));\n+        assertTrue(resStr.contains(\"\\\"firstName\\\":\\\"\" + p.getFirstName() + \"\\\"\"));\n+        assertTrue(resStr.contains(\"\\\"lastName\\\":\\\"\" + p.getLastName() + \"\\\"\"));\n+        assertTrue(resStr.contains(\"\\\"salary\\\":\" + p.getSalary()));\n+\n+        // Check UUID key.\n+        UUID uuidKey = UUID.randomUUID();\n+\n+        jcache().put(uuidKey, 2);\n+\n+        ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, VisorDataType.UUID, uuidKey.toString()));\n+\n+        info(\"VisorCacheGetValueTask result for UUID key: \" + ret);\n+\n+        res = jsonTaskResult(ret);\n+\n+        resStr = res.get(\"result\").toString();\n+\n+        assertTrue(\"2\".equals(resStr));\n+\n+        // Check Timestamp key.\n+        long timestamp = System.currentTimeMillis();\n+\n+        jcache().put(new Timestamp(timestamp), 3);\n+\n+        ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, VisorDataType.TIMESTAMP, timestamp));\n+\n+        info(\"VisorCacheGetValueTask result for Timestamp key: \" + ret);\n+\n+        res = jsonTaskResult(ret);\n+\n+        resStr = res.get(\"result\").toString();\n+\n+        assertTrue(\"3\".equals(resStr));\n+\n+        // Check Date key.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2d94a9aaf2d5ae63ca87652dc8e592b2b8174045"}, "originalPosition": 121}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA5NTAxMQ==", "bodyText": "It can be uncommented to reproduce bug with transaction lock.", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r375095011", "createdAt": "2020-02-05T07:30:24Z", "author": {"login": "vsisko"}, "path": "modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/JettyRestProcessorAbstractSelfTest.java", "diffHunk": "@@ -1636,6 +1644,184 @@ public void testExe() throws Exception {\n         assertResponseContainsError(ret, \"Failed to find mandatory parameter in request: id\");\n     }\n \n+    /**\n+     * Tests work of VisorCacheGetValueTask via {@link VisorGatewayTask}.\n+     *\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    public void testVisorGetCacheValueTask() throws Exception {\n+        ClusterNode locNode = grid(1).localNode();\n+\n+        Person p = new Person(100, \"John\", \"Doe\", 300);\n+\n+        // Check integer key.\n+        jcache().put(1, p);\n+\n+        String ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, VisorDataType.INT, \"1\"));\n+\n+        info(\"VisorCacheGetValueTask result for Integer key: \" + ret);\n+\n+        JsonNode res = jsonTaskResult(ret);\n+\n+        String resStr = res.get(\"result\").toString();\n+\n+        assertTrue(resStr.contains(\"\\\"id\\\":\" + p.getId()));\n+        assertTrue(resStr.contains(\"\\\"orgId\\\":\" + p.getOrganizationId()));\n+        assertTrue(resStr.contains(\"\\\"firstName\\\":\\\"\" + p.getFirstName() + \"\\\"\"));\n+        assertTrue(resStr.contains(\"\\\"lastName\\\":\\\"\" + p.getLastName() + \"\\\"\"));\n+        assertTrue(resStr.contains(\"\\\"salary\\\":\" + p.getSalary()));\n+\n+        // Check UUID key.\n+        UUID uuidKey = UUID.randomUUID();\n+\n+        jcache().put(uuidKey, 2);\n+\n+        ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, VisorDataType.UUID, uuidKey.toString()));\n+\n+        info(\"VisorCacheGetValueTask result for UUID key: \" + ret);\n+\n+        res = jsonTaskResult(ret);\n+\n+        resStr = res.get(\"result\").toString();\n+\n+        assertTrue(\"2\".equals(resStr));\n+\n+        // Check Timestamp key.\n+        long timestamp = System.currentTimeMillis();\n+\n+        jcache().put(new Timestamp(timestamp), 3);\n+\n+        ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, VisorDataType.TIMESTAMP, timestamp));\n+\n+        info(\"VisorCacheGetValueTask result for Timestamp key: \" + ret);\n+\n+        res = jsonTaskResult(ret);\n+\n+        resStr = res.get(\"result\").toString();\n+\n+        assertTrue(\"3\".equals(resStr));\n+\n+        // Check Date key.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3Mjc5Mjg4NQ=="}, "originalCommit": {"oid": "2d94a9aaf2d5ae63ca87652dc8e592b2b8174045"}, "originalPosition": 121}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjc0MjQ2OnYy", "diffSide": "RIGHT", "path": "modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/JettyRestProcessorAbstractSelfTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMToxNzozMFrOFlQhag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMToxNzozMFrOFlQhag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYxMjMzMA==", "bodyText": "Please add comment like \\\\ TODO GG-XXXXX Investigate why DATE_SQL hangs during test.", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r374612330", "createdAt": "2020-02-04T11:17:30Z", "author": {"login": "akuznetsov-gridgain"}, "path": "modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/JettyRestProcessorAbstractSelfTest.java", "diffHunk": "@@ -1636,6 +1644,190 @@ public void testExe() throws Exception {\n         assertResponseContainsError(ret, \"Failed to find mandatory parameter in request: id\");\n     }\n \n+    /**\n+     * Tests work of VisorCacheGetValueTask via {@link VisorGatewayTask}.\n+     *\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    public void testVisorGetCacheValueTask() throws Exception {\n+        ClusterNode locNode = grid(1).localNode();\n+\n+        Person p = new Person(100, \"John\", \"Doe\", 300);\n+\n+        // Check integer key.\n+        jcache().put(1, p);\n+\n+        String ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, \"{\\\"type\\\":\\\"\" + VisorDataType.INT + \"\\\",\\\"value\\\":\\\"1\\\"}\"));\n+\n+        info(\"VisorCacheGetValueTask result for Integer key: \" + ret);\n+\n+        JsonNode res = jsonTaskResult(ret);\n+\n+        String resStr = res.get(\"result\").toString();\n+\n+        assertTrue(resStr.contains(\"\\\"id\\\":\" + p.getId()));\n+        assertTrue(resStr.contains(\"\\\"orgId\\\":\" + p.getOrganizationId()));\n+        assertTrue(resStr.contains(\"\\\"firstName\\\":\\\"\" + p.getFirstName() + \"\\\"\"));\n+        assertTrue(resStr.contains(\"\\\"lastName\\\":\\\"\" + p.getLastName() + \"\\\"\"));\n+        assertTrue(resStr.contains(\"\\\"salary\\\":\" + p.getSalary()));\n+\n+        // Check UUID key.\n+        UUID uuidKey = UUID.randomUUID();\n+\n+        jcache().put(uuidKey, 2);\n+\n+        ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, \"{\\\"type\\\":\\\"\" + VisorDataType.UUID + \"\\\",\\\"value\\\":\\\"\" + uuidKey.toString() + \"\\\"}\"));\n+\n+        info(\"VisorCacheGetValueTask result for UUID key: \" + ret);\n+\n+        res = jsonTaskResult(ret);\n+\n+        resStr = res.get(\"result\").toString();\n+\n+        assertTrue(\"2\".equals(resStr));\n+\n+        // Check Timestamp key.\n+        long timestamp = System.currentTimeMillis();\n+\n+        jcache().put(new Timestamp(timestamp), 3);\n+\n+        ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, \"{\\\"type\\\":\\\"\" + VisorDataType.TIMESTAMP + \"\\\",\\\"value\\\":\\\"\" + timestamp + \"\\\"}\"));\n+\n+        info(\"VisorCacheGetValueTask result for Timestamp key: \" + ret);\n+\n+        res = jsonTaskResult(ret);\n+\n+        resStr = res.get(\"result\").toString();\n+\n+        assertTrue(\"3\".equals(resStr));\n+\n+        // Check Date key.\n+        //jcache().put(new Date(timestamp), 4);\n+\n+        //ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+        //    .setNode(locNode)\n+        //    .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+        //    .addArguments(DEFAULT_CACHE_NAME, \"{\\\"type\\\":\\\"\" + VisorDataType.DATE_SQL + \"\\\",\\\"value\\\":\\\"\" + timestamp + \"\\\"}\"));\n+        //\n+        //info(\"VisorCacheGetValueTask result for Date key: \" + ret);\n+        //\n+        //res = jsonTaskResult(ret);\n+        //\n+        //resStr = res.get(\"result\").toString();\n+        //\n+        //assertTrue(\"4\".equals(resStr));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "871b6051869edb0cc4bb0cb697b15a6ac9731fe6"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNjc0Nzk1OnYy", "diffSide": "RIGHT", "path": "modules/rest-http/src/main/java/org/apache/ignite/internal/processors/rest/protocols/http/jetty/GridJettyObjectMapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMToxOTozOVrOFlQlAQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMjozNDoyN1rOFmZhyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYxMzI0OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /** Custom deserializer for {@link BinaryObjectImpl} */\n          \n          \n            \n                /** Custom deserializer for {@link VisorCacheKeyObject} */", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r374613249", "createdAt": "2020-02-04T11:19:39Z", "author": {"login": "akuznetsov-gridgain"}, "path": "modules/rest-http/src/main/java/org/apache/ignite/internal/processors/rest/protocols/http/jetty/GridJettyObjectMapper.java", "diffHunk": "@@ -121,6 +138,226 @@ public GridJettyObjectMapper() {\n         }\n     }\n \n+    /** Custom deserializer for {@link BinaryObjectImpl} */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "871b6051869edb0cc4bb0cb697b15a6ac9731fe6"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgwODQ1OA==", "bodyText": "Fixed.", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r375808458", "createdAt": "2020-02-06T12:34:27Z", "author": {"login": "vsisko"}, "path": "modules/rest-http/src/main/java/org/apache/ignite/internal/processors/rest/protocols/http/jetty/GridJettyObjectMapper.java", "diffHunk": "@@ -121,6 +138,226 @@ public GridJettyObjectMapper() {\n         }\n     }\n \n+    /** Custom deserializer for {@link BinaryObjectImpl} */", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDYxMzI0OQ=="}, "originalCommit": {"oid": "871b6051869edb0cc4bb0cb697b15a6ac9731fe6"}, "originalPosition": 65}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzA3MTcyOnYy", "diffSide": "RIGHT", "path": "modules/rest-http/src/main/java/org/apache/ignite/internal/processors/rest/protocols/http/jetty/GridJettyObjectMapper.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxMzoxNzo0MlrOFlTpMg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMjozNDozNlrOFmZh_Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY2MzQ3NA==", "bodyText": "\"java\" imports should be first, please configure you IDE.", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r374663474", "createdAt": "2020-02-04T13:17:42Z", "author": {"login": "akuznetsov-gridgain"}, "path": "modules/rest-http/src/main/java/org/apache/ignite/internal/processors/rest/protocols/http/jetty/GridJettyObjectMapper.java", "diffHunk": "@@ -32,13 +32,29 @@\n import com.fasterxml.jackson.databind.module.SimpleModule;\n import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;\n import com.fasterxml.jackson.databind.ser.SerializerFactory;\n-\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.sql.Date;\n+import java.sql.SQLException;\n+import java.sql.Timestamp;\n+import java.text.DateFormat;\n+import java.time.Instant;\n+import java.util.LinkedHashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.UUID;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "871b6051869edb0cc4bb0cb697b15a6ac9731fe6"}, "originalPosition": 36}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgwODUwOQ==", "bodyText": "Sorted.", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r375808509", "createdAt": "2020-02-06T12:34:36Z", "author": {"login": "vsisko"}, "path": "modules/rest-http/src/main/java/org/apache/ignite/internal/processors/rest/protocols/http/jetty/GridJettyObjectMapper.java", "diffHunk": "@@ -32,13 +32,29 @@\n import com.fasterxml.jackson.databind.module.SimpleModule;\n import com.fasterxml.jackson.databind.ser.DefaultSerializerProvider;\n import com.fasterxml.jackson.databind.ser.SerializerFactory;\n-\n+import java.io.IOException;\n+import java.math.BigDecimal;\n+import java.math.BigInteger;\n+import java.sql.Date;\n+import java.sql.SQLException;\n+import java.sql.Timestamp;\n+import java.text.DateFormat;\n+import java.time.Instant;\n+import java.util.LinkedHashMap;\n+import java.util.Locale;\n+import java.util.Map;\n+import java.util.UUID;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY2MzQ3NA=="}, "originalCommit": {"oid": "871b6051869edb0cc4bb0cb697b15a6ac9731fe6"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzI5OTE2OnYy", "diffSide": "RIGHT", "path": "modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/JettyRestProcessorAbstractSelfTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNDoyNDoxNlrOFlV0Xw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQxNToxODoyNFrOFl7nug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY5OTEwMw==", "bodyText": "Maybe String.format() would help to save some space and would be better to read", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r374699103", "createdAt": "2020-02-04T14:24:16Z", "author": {"login": "MaxLosevskoy"}, "path": "modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/JettyRestProcessorAbstractSelfTest.java", "diffHunk": "@@ -1636,6 +1644,190 @@ public void testExe() throws Exception {\n         assertResponseContainsError(ret, \"Failed to find mandatory parameter in request: id\");\n     }\n \n+    /**\n+     * Tests work of VisorCacheGetValueTask via {@link VisorGatewayTask}.\n+     *\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    public void testVisorGetCacheValueTask() throws Exception {\n+        ClusterNode locNode = grid(1).localNode();\n+\n+        Person p = new Person(100, \"John\", \"Doe\", 300);\n+\n+        // Check integer key.\n+        jcache().put(1, p);\n+\n+        String ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, \"{\\\"type\\\":\\\"\" + VisorDataType.INT + \"\\\",\\\"value\\\":\\\"1\\\"}\"));\n+\n+        info(\"VisorCacheGetValueTask result for Integer key: \" + ret);\n+\n+        JsonNode res = jsonTaskResult(ret);\n+\n+        String resStr = res.get(\"result\").toString();\n+\n+        assertTrue(resStr.contains(\"\\\"id\\\":\" + p.getId()));\n+        assertTrue(resStr.contains(\"\\\"orgId\\\":\" + p.getOrganizationId()));\n+        assertTrue(resStr.contains(\"\\\"firstName\\\":\\\"\" + p.getFirstName() + \"\\\"\"));\n+        assertTrue(resStr.contains(\"\\\"lastName\\\":\\\"\" + p.getLastName() + \"\\\"\"));\n+        assertTrue(resStr.contains(\"\\\"salary\\\":\" + p.getSalary()));\n+\n+        // Check UUID key.\n+        UUID uuidKey = UUID.randomUUID();\n+\n+        jcache().put(uuidKey, 2);\n+\n+        ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, \"{\\\"type\\\":\\\"\" + VisorDataType.UUID + \"\\\",\\\"value\\\":\\\"\" + uuidKey.toString() + \"\\\"}\"));\n+\n+        info(\"VisorCacheGetValueTask result for UUID key: \" + ret);\n+\n+        res = jsonTaskResult(ret);\n+\n+        resStr = res.get(\"result\").toString();\n+\n+        assertTrue(\"2\".equals(resStr));\n+\n+        // Check Timestamp key.\n+        long timestamp = System.currentTimeMillis();\n+\n+        jcache().put(new Timestamp(timestamp), 3);\n+\n+        ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, \"{\\\"type\\\":\\\"\" + VisorDataType.TIMESTAMP + \"\\\",\\\"value\\\":\\\"\" + timestamp + \"\\\"}\"));\n+\n+        info(\"VisorCacheGetValueTask result for Timestamp key: \" + ret);\n+\n+        res = jsonTaskResult(ret);\n+\n+        resStr = res.get(\"result\").toString();\n+\n+        assertTrue(\"3\".equals(resStr));\n+\n+        // Check Date key.\n+        //jcache().put(new Date(timestamp), 4);\n+\n+        //ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+        //    .setNode(locNode)\n+        //    .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+        //    .addArguments(DEFAULT_CACHE_NAME, \"{\\\"type\\\":\\\"\" + VisorDataType.DATE_SQL + \"\\\",\\\"value\\\":\\\"\" + timestamp + \"\\\"}\"));\n+        //\n+        //info(\"VisorCacheGetValueTask result for Date key: \" + ret);\n+        //\n+        //res = jsonTaskResult(ret);\n+        //\n+        //resStr = res.get(\"result\").toString();\n+        //\n+        //assertTrue(\"4\".equals(resStr));\n+\n+        // Check object key.\n+        jcache().put(p, 5);\n+\n+        ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME,\n+                \"{\" +\n+                    \"\\\"type\\\":\\\"\" + VisorDataType.BINARY + \"\\\",\" +", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "871b6051869edb0cc4bb0cb697b15a6ac9731fe6"}, "originalPosition": 145}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTMxODQ1OA==", "bodyText": "Changed.", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r375318458", "createdAt": "2020-02-05T15:18:24Z", "author": {"login": "vsisko"}, "path": "modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/JettyRestProcessorAbstractSelfTest.java", "diffHunk": "@@ -1636,6 +1644,190 @@ public void testExe() throws Exception {\n         assertResponseContainsError(ret, \"Failed to find mandatory parameter in request: id\");\n     }\n \n+    /**\n+     * Tests work of VisorCacheGetValueTask via {@link VisorGatewayTask}.\n+     *\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    public void testVisorGetCacheValueTask() throws Exception {\n+        ClusterNode locNode = grid(1).localNode();\n+\n+        Person p = new Person(100, \"John\", \"Doe\", 300);\n+\n+        // Check integer key.\n+        jcache().put(1, p);\n+\n+        String ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, \"{\\\"type\\\":\\\"\" + VisorDataType.INT + \"\\\",\\\"value\\\":\\\"1\\\"}\"));\n+\n+        info(\"VisorCacheGetValueTask result for Integer key: \" + ret);\n+\n+        JsonNode res = jsonTaskResult(ret);\n+\n+        String resStr = res.get(\"result\").toString();\n+\n+        assertTrue(resStr.contains(\"\\\"id\\\":\" + p.getId()));\n+        assertTrue(resStr.contains(\"\\\"orgId\\\":\" + p.getOrganizationId()));\n+        assertTrue(resStr.contains(\"\\\"firstName\\\":\\\"\" + p.getFirstName() + \"\\\"\"));\n+        assertTrue(resStr.contains(\"\\\"lastName\\\":\\\"\" + p.getLastName() + \"\\\"\"));\n+        assertTrue(resStr.contains(\"\\\"salary\\\":\" + p.getSalary()));\n+\n+        // Check UUID key.\n+        UUID uuidKey = UUID.randomUUID();\n+\n+        jcache().put(uuidKey, 2);\n+\n+        ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, \"{\\\"type\\\":\\\"\" + VisorDataType.UUID + \"\\\",\\\"value\\\":\\\"\" + uuidKey.toString() + \"\\\"}\"));\n+\n+        info(\"VisorCacheGetValueTask result for UUID key: \" + ret);\n+\n+        res = jsonTaskResult(ret);\n+\n+        resStr = res.get(\"result\").toString();\n+\n+        assertTrue(\"2\".equals(resStr));\n+\n+        // Check Timestamp key.\n+        long timestamp = System.currentTimeMillis();\n+\n+        jcache().put(new Timestamp(timestamp), 3);\n+\n+        ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, \"{\\\"type\\\":\\\"\" + VisorDataType.TIMESTAMP + \"\\\",\\\"value\\\":\\\"\" + timestamp + \"\\\"}\"));\n+\n+        info(\"VisorCacheGetValueTask result for Timestamp key: \" + ret);\n+\n+        res = jsonTaskResult(ret);\n+\n+        resStr = res.get(\"result\").toString();\n+\n+        assertTrue(\"3\".equals(resStr));\n+\n+        // Check Date key.\n+        //jcache().put(new Date(timestamp), 4);\n+\n+        //ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+        //    .setNode(locNode)\n+        //    .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+        //    .addArguments(DEFAULT_CACHE_NAME, \"{\\\"type\\\":\\\"\" + VisorDataType.DATE_SQL + \"\\\",\\\"value\\\":\\\"\" + timestamp + \"\\\"}\"));\n+        //\n+        //info(\"VisorCacheGetValueTask result for Date key: \" + ret);\n+        //\n+        //res = jsonTaskResult(ret);\n+        //\n+        //resStr = res.get(\"result\").toString();\n+        //\n+        //assertTrue(\"4\".equals(resStr));\n+\n+        // Check object key.\n+        jcache().put(p, 5);\n+\n+        ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME,\n+                \"{\" +\n+                    \"\\\"type\\\":\\\"\" + VisorDataType.BINARY + \"\\\",\" +", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDY5OTEwMw=="}, "originalCommit": {"oid": "871b6051869edb0cc4bb0cb697b15a6ac9731fe6"}, "originalPosition": 145}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxNzM1NjI0OnYy", "diffSide": "RIGHT", "path": "modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/JettyRestProcessorAbstractSelfTest.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNFQxNDozOTo0MVrOFlWYDw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNVQwNzozMTozMVrOFluAYA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcwODIzOQ==", "bodyText": "I guess the following line is missing:\nassertTrue(err.isNull());", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r374708239", "createdAt": "2020-02-04T14:39:41Z", "author": {"login": "MaxLosevskoy"}, "path": "modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/JettyRestProcessorAbstractSelfTest.java", "diffHunk": "@@ -1636,6 +1644,190 @@ public void testExe() throws Exception {\n         assertResponseContainsError(ret, \"Failed to find mandatory parameter in request: id\");\n     }\n \n+    /**\n+     * Tests work of VisorCacheGetValueTask via {@link VisorGatewayTask}.\n+     *\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    public void testVisorGetCacheValueTask() throws Exception {\n+        ClusterNode locNode = grid(1).localNode();\n+\n+        Person p = new Person(100, \"John\", \"Doe\", 300);\n+\n+        // Check integer key.\n+        jcache().put(1, p);\n+\n+        String ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, \"{\\\"type\\\":\\\"\" + VisorDataType.INT + \"\\\",\\\"value\\\":\\\"1\\\"}\"));\n+\n+        info(\"VisorCacheGetValueTask result for Integer key: \" + ret);\n+\n+        JsonNode res = jsonTaskResult(ret);\n+\n+        String resStr = res.get(\"result\").toString();\n+\n+        assertTrue(resStr.contains(\"\\\"id\\\":\" + p.getId()));\n+        assertTrue(resStr.contains(\"\\\"orgId\\\":\" + p.getOrganizationId()));\n+        assertTrue(resStr.contains(\"\\\"firstName\\\":\\\"\" + p.getFirstName() + \"\\\"\"));\n+        assertTrue(resStr.contains(\"\\\"lastName\\\":\\\"\" + p.getLastName() + \"\\\"\"));\n+        assertTrue(resStr.contains(\"\\\"salary\\\":\" + p.getSalary()));\n+\n+        // Check UUID key.\n+        UUID uuidKey = UUID.randomUUID();\n+\n+        jcache().put(uuidKey, 2);\n+\n+        ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, \"{\\\"type\\\":\\\"\" + VisorDataType.UUID + \"\\\",\\\"value\\\":\\\"\" + uuidKey.toString() + \"\\\"}\"));\n+\n+        info(\"VisorCacheGetValueTask result for UUID key: \" + ret);\n+\n+        res = jsonTaskResult(ret);\n+\n+        resStr = res.get(\"result\").toString();\n+\n+        assertTrue(\"2\".equals(resStr));\n+\n+        // Check Timestamp key.\n+        long timestamp = System.currentTimeMillis();\n+\n+        jcache().put(new Timestamp(timestamp), 3);\n+\n+        ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, \"{\\\"type\\\":\\\"\" + VisorDataType.TIMESTAMP + \"\\\",\\\"value\\\":\\\"\" + timestamp + \"\\\"}\"));\n+\n+        info(\"VisorCacheGetValueTask result for Timestamp key: \" + ret);\n+\n+        res = jsonTaskResult(ret);\n+\n+        resStr = res.get(\"result\").toString();\n+\n+        assertTrue(\"3\".equals(resStr));\n+\n+        // Check Date key.\n+        //jcache().put(new Date(timestamp), 4);\n+\n+        //ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+        //    .setNode(locNode)\n+        //    .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+        //    .addArguments(DEFAULT_CACHE_NAME, \"{\\\"type\\\":\\\"\" + VisorDataType.DATE_SQL + \"\\\",\\\"value\\\":\\\"\" + timestamp + \"\\\"}\"));\n+        //\n+        //info(\"VisorCacheGetValueTask result for Date key: \" + ret);\n+        //\n+        //res = jsonTaskResult(ret);\n+        //\n+        //resStr = res.get(\"result\").toString();\n+        //\n+        //assertTrue(\"4\".equals(resStr));\n+\n+        // Check object key.\n+        jcache().put(p, 5);\n+\n+        ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME,\n+                \"{\" +\n+                    \"\\\"type\\\":\\\"\" + VisorDataType.BINARY + \"\\\",\" +\n+                    \"\\\"value\\\":{\" +\n+                        \"\\\"className\\\":\\\"\" + Person.class.getName() + \"\\\",\" +\n+                        \"\\\"fields\\\":[\" +\n+                        \"{\\\"type\\\":\\\"INT\\\",\\\"name\\\":\\\"id\\\",\\\"value\\\":\" + p.getId() + \"},\" +\n+                        \"{\\\"type\\\":\\\"INT\\\",\\\"name\\\":\\\"orgId\\\",\\\"value\\\":\" + p.getOrganizationId() + \"},\" +\n+                        \"{\\\"type\\\":\\\"STRING\\\",\\\"name\\\":\\\"firstName\\\",\\\"value\\\":\\\"\" + p.getFirstName() + \"\\\"},\" +\n+                        \"{\\\"type\\\":\\\"STRING\\\",\\\"name\\\":\\\"lastName\\\",\\\"value\\\":\\\"\" + p.getLastName() + \"\\\"},\" +\n+                        \"{\\\"type\\\":\\\"DOUBLE\\\",\\\"name\\\":\\\"salary\\\",\\\"value\\\":\" + p.getSalary() + \"}\" +\n+                        \"]\" +\n+                    \"}\" +\n+                \"}\"));\n+\n+        info(\"VisorCacheGetValueTask result for binary key: \" + ret);\n+\n+        res = jsonTaskResult(ret);\n+\n+        assertEquals(\"5\", res.get(\"result\").toString());\n+\n+        // Check composite object key.\n+        CompositeKeyExternal key = new CompositeKeyExternal(new CompositeKeyInternal());\n+\n+        jcache().put(key, 6);\n+\n+        ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME,\n+                \"{\" +\n+                    \"\\\"type\\\":\\\"\" + VisorDataType.BINARY + \"\\\",\" +\n+                    \"\\\"value\\\":{\" +\n+                        \"\\\"className\\\":\\\"\" + CompositeKeyExternal.class.getName() + \"\\\",\" +\n+                        \"\\\"fields\\\":[\" +\n+                            \"{\\\"type\\\":\\\"INT\\\",\\\"name\\\":\\\"id\\\",\\\"value\\\":\" + key.getId() + \"},\" +\n+                            \"{\\\"type\\\":\\\"BINARY\\\",\\\"name\\\":\\\"internal\\\",\\\"value\\\":{\" +\n+                                \"\\\"className\\\":\\\"\" + CompositeKeyInternal.class.getName() + \"\\\",\" +\n+                                \"\\\"fields\\\":[{\\\"type\\\":\\\"INT\\\",\\\"name\\\":\\\"id\\\",\\\"value\\\":\" + key.getInternal().getId() + \"}]\" +\n+                            \"}}\" +\n+                        \"]\" +\n+                    \"}\" +\n+                \"}\"));\n+\n+        info(\"VisorCacheGetValueTask result for binary key: \" + ret);\n+\n+        res = jsonTaskResult(ret);\n+\n+        assertEquals(\"6\", res.get(\"result\").toString());\n+    }\n+\n+    /**\n+     * Tests work of VisorCacheGetValueTask with unsupported key type.\n+     *\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    public void testVisorGetCacheValueForUnsupportedKey() throws Exception {\n+        ClusterNode locNode = grid(1).localNode();\n+\n+        String ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, \"{\\\"type\\\":\\\"UNSUPPORTED\\\",\\\"value\\\":\\\"1\\\"}\"));\n+\n+        info(\"VisorCacheGetValueTask result for unsupported key type: \" + ret);\n+\n+        JsonNode err = jsonTaskErrorResult(ret);\n+\n+        assertFalse(err.isNull());\n+        assertTrue(err.textValue().contains(UNSUPPORTED_KEY_TYPE));\n+    }\n+\n+    /**\n+     * Tests work of VisorCacheGetValueTask result with missed value.\n+     *\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    public void testVisorGetCacheValueWithMissedValue() throws Exception {\n+        ClusterNode locNode = grid(1).localNode();\n+\n+        String ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, \"{\\\"type\\\":\\\"\" + VisorDataType.INT + \"\\\",\\\"value\\\":\\\"1\\\"}\"));\n+\n+        info(\"VisorCacheGetValueTask result for integer key type with missed value: \" + ret);\n+\n+        JsonNode res = jsonTaskResult(ret);\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "871b6051869edb0cc4bb0cb697b15a6ac9731fe6"}, "originalPosition": 233}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTA5NTM5Mg==", "bodyText": "jsonTaskResult function contains check assertTrue(res.get(\"error\").isNull()).", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r375095392", "createdAt": "2020-02-05T07:31:31Z", "author": {"login": "vsisko"}, "path": "modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/JettyRestProcessorAbstractSelfTest.java", "diffHunk": "@@ -1636,6 +1644,190 @@ public void testExe() throws Exception {\n         assertResponseContainsError(ret, \"Failed to find mandatory parameter in request: id\");\n     }\n \n+    /**\n+     * Tests work of VisorCacheGetValueTask via {@link VisorGatewayTask}.\n+     *\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    public void testVisorGetCacheValueTask() throws Exception {\n+        ClusterNode locNode = grid(1).localNode();\n+\n+        Person p = new Person(100, \"John\", \"Doe\", 300);\n+\n+        // Check integer key.\n+        jcache().put(1, p);\n+\n+        String ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, \"{\\\"type\\\":\\\"\" + VisorDataType.INT + \"\\\",\\\"value\\\":\\\"1\\\"}\"));\n+\n+        info(\"VisorCacheGetValueTask result for Integer key: \" + ret);\n+\n+        JsonNode res = jsonTaskResult(ret);\n+\n+        String resStr = res.get(\"result\").toString();\n+\n+        assertTrue(resStr.contains(\"\\\"id\\\":\" + p.getId()));\n+        assertTrue(resStr.contains(\"\\\"orgId\\\":\" + p.getOrganizationId()));\n+        assertTrue(resStr.contains(\"\\\"firstName\\\":\\\"\" + p.getFirstName() + \"\\\"\"));\n+        assertTrue(resStr.contains(\"\\\"lastName\\\":\\\"\" + p.getLastName() + \"\\\"\"));\n+        assertTrue(resStr.contains(\"\\\"salary\\\":\" + p.getSalary()));\n+\n+        // Check UUID key.\n+        UUID uuidKey = UUID.randomUUID();\n+\n+        jcache().put(uuidKey, 2);\n+\n+        ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, \"{\\\"type\\\":\\\"\" + VisorDataType.UUID + \"\\\",\\\"value\\\":\\\"\" + uuidKey.toString() + \"\\\"}\"));\n+\n+        info(\"VisorCacheGetValueTask result for UUID key: \" + ret);\n+\n+        res = jsonTaskResult(ret);\n+\n+        resStr = res.get(\"result\").toString();\n+\n+        assertTrue(\"2\".equals(resStr));\n+\n+        // Check Timestamp key.\n+        long timestamp = System.currentTimeMillis();\n+\n+        jcache().put(new Timestamp(timestamp), 3);\n+\n+        ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, \"{\\\"type\\\":\\\"\" + VisorDataType.TIMESTAMP + \"\\\",\\\"value\\\":\\\"\" + timestamp + \"\\\"}\"));\n+\n+        info(\"VisorCacheGetValueTask result for Timestamp key: \" + ret);\n+\n+        res = jsonTaskResult(ret);\n+\n+        resStr = res.get(\"result\").toString();\n+\n+        assertTrue(\"3\".equals(resStr));\n+\n+        // Check Date key.\n+        //jcache().put(new Date(timestamp), 4);\n+\n+        //ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+        //    .setNode(locNode)\n+        //    .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+        //    .addArguments(DEFAULT_CACHE_NAME, \"{\\\"type\\\":\\\"\" + VisorDataType.DATE_SQL + \"\\\",\\\"value\\\":\\\"\" + timestamp + \"\\\"}\"));\n+        //\n+        //info(\"VisorCacheGetValueTask result for Date key: \" + ret);\n+        //\n+        //res = jsonTaskResult(ret);\n+        //\n+        //resStr = res.get(\"result\").toString();\n+        //\n+        //assertTrue(\"4\".equals(resStr));\n+\n+        // Check object key.\n+        jcache().put(p, 5);\n+\n+        ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME,\n+                \"{\" +\n+                    \"\\\"type\\\":\\\"\" + VisorDataType.BINARY + \"\\\",\" +\n+                    \"\\\"value\\\":{\" +\n+                        \"\\\"className\\\":\\\"\" + Person.class.getName() + \"\\\",\" +\n+                        \"\\\"fields\\\":[\" +\n+                        \"{\\\"type\\\":\\\"INT\\\",\\\"name\\\":\\\"id\\\",\\\"value\\\":\" + p.getId() + \"},\" +\n+                        \"{\\\"type\\\":\\\"INT\\\",\\\"name\\\":\\\"orgId\\\",\\\"value\\\":\" + p.getOrganizationId() + \"},\" +\n+                        \"{\\\"type\\\":\\\"STRING\\\",\\\"name\\\":\\\"firstName\\\",\\\"value\\\":\\\"\" + p.getFirstName() + \"\\\"},\" +\n+                        \"{\\\"type\\\":\\\"STRING\\\",\\\"name\\\":\\\"lastName\\\",\\\"value\\\":\\\"\" + p.getLastName() + \"\\\"},\" +\n+                        \"{\\\"type\\\":\\\"DOUBLE\\\",\\\"name\\\":\\\"salary\\\",\\\"value\\\":\" + p.getSalary() + \"}\" +\n+                        \"]\" +\n+                    \"}\" +\n+                \"}\"));\n+\n+        info(\"VisorCacheGetValueTask result for binary key: \" + ret);\n+\n+        res = jsonTaskResult(ret);\n+\n+        assertEquals(\"5\", res.get(\"result\").toString());\n+\n+        // Check composite object key.\n+        CompositeKeyExternal key = new CompositeKeyExternal(new CompositeKeyInternal());\n+\n+        jcache().put(key, 6);\n+\n+        ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME,\n+                \"{\" +\n+                    \"\\\"type\\\":\\\"\" + VisorDataType.BINARY + \"\\\",\" +\n+                    \"\\\"value\\\":{\" +\n+                        \"\\\"className\\\":\\\"\" + CompositeKeyExternal.class.getName() + \"\\\",\" +\n+                        \"\\\"fields\\\":[\" +\n+                            \"{\\\"type\\\":\\\"INT\\\",\\\"name\\\":\\\"id\\\",\\\"value\\\":\" + key.getId() + \"},\" +\n+                            \"{\\\"type\\\":\\\"BINARY\\\",\\\"name\\\":\\\"internal\\\",\\\"value\\\":{\" +\n+                                \"\\\"className\\\":\\\"\" + CompositeKeyInternal.class.getName() + \"\\\",\" +\n+                                \"\\\"fields\\\":[{\\\"type\\\":\\\"INT\\\",\\\"name\\\":\\\"id\\\",\\\"value\\\":\" + key.getInternal().getId() + \"}]\" +\n+                            \"}}\" +\n+                        \"]\" +\n+                    \"}\" +\n+                \"}\"));\n+\n+        info(\"VisorCacheGetValueTask result for binary key: \" + ret);\n+\n+        res = jsonTaskResult(ret);\n+\n+        assertEquals(\"6\", res.get(\"result\").toString());\n+    }\n+\n+    /**\n+     * Tests work of VisorCacheGetValueTask with unsupported key type.\n+     *\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    public void testVisorGetCacheValueForUnsupportedKey() throws Exception {\n+        ClusterNode locNode = grid(1).localNode();\n+\n+        String ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, \"{\\\"type\\\":\\\"UNSUPPORTED\\\",\\\"value\\\":\\\"1\\\"}\"));\n+\n+        info(\"VisorCacheGetValueTask result for unsupported key type: \" + ret);\n+\n+        JsonNode err = jsonTaskErrorResult(ret);\n+\n+        assertFalse(err.isNull());\n+        assertTrue(err.textValue().contains(UNSUPPORTED_KEY_TYPE));\n+    }\n+\n+    /**\n+     * Tests work of VisorCacheGetValueTask result with missed value.\n+     *\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    public void testVisorGetCacheValueWithMissedValue() throws Exception {\n+        ClusterNode locNode = grid(1).localNode();\n+\n+        String ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, \"{\\\"type\\\":\\\"\" + VisorDataType.INT + \"\\\",\\\"value\\\":\\\"1\\\"}\"));\n+\n+        info(\"VisorCacheGetValueTask result for integer key type with missed value: \" + ret);\n+\n+        JsonNode res = jsonTaskResult(ret);\n+", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDcwODIzOQ=="}, "originalCommit": {"oid": "871b6051869edb0cc4bb0cb697b15a6ac9731fe6"}, "originalPosition": 233}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNDIzNjIxOnYy", "diffSide": "RIGHT", "path": "modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/JettyRestProcessorAbstractSelfTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMTo1Mzo0M1rOFmYhTA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMjozNDo1NlrOFmZieQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc5MTk0OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    //Check Date key.\n          \n          \n            \n                    // TODO GG-XXXXX Check Date key.", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r375791948", "createdAt": "2020-02-06T11:53:43Z", "author": {"login": "akuznetsov-gridgain"}, "path": "modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/JettyRestProcessorAbstractSelfTest.java", "diffHunk": "@@ -1636,6 +1645,246 @@ public void testExe() throws Exception {\n         assertResponseContainsError(ret, \"Failed to find mandatory parameter in request: id\");\n     }\n \n+    /**\n+     * Tests work of VisorCacheGetValueTask via {@link VisorGatewayTask}.\n+     *\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    public void testVisorGetCacheValueTask() throws Exception {\n+        ClusterNode locNode = grid(1).localNode();\n+\n+        Person p = new Person(100, \"John\", \"Doe\", 300);\n+\n+        // Check integer key.\n+        jcache().put(1, p);\n+\n+        String ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, String.format(\"{\\\"type\\\":\\\"%s\\\",\\\"value\\\":\\\"%s\\\"}\", VisorDataType.INT, 1)));\n+\n+        info(\"VisorCacheGetValueTask result for Integer key: \" + ret);\n+\n+        JsonNode res = jsonTaskResult(ret);\n+\n+        String resStr = res.get(\"result\").toString();\n+\n+        assertTrue(resStr.contains(\"\\\"id\\\":\" + p.getId()));\n+        assertTrue(resStr.contains(\"\\\"orgId\\\":\" + p.getOrganizationId()));\n+        assertTrue(resStr.contains(\"\\\"firstName\\\":\\\"\" + p.getFirstName() + \"\\\"\"));\n+        assertTrue(resStr.contains(\"\\\"lastName\\\":\\\"\" + p.getLastName() + \"\\\"\"));\n+        assertTrue(resStr.contains(\"\\\"salary\\\":\" + p.getSalary()));\n+\n+        // Check UUID key.\n+        UUID uuidKey = UUID.randomUUID();\n+\n+        jcache().put(uuidKey, 2);\n+\n+        ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME,\n+                String.format(\"{\\\"type\\\":\\\"%s\\\",\\\"value\\\":\\\"%s\\\"}\", VisorDataType.UUID, uuidKey.toString())\n+            )\n+        );\n+\n+        info(\"VisorCacheGetValueTask result for UUID key: \" + ret);\n+\n+        res = jsonTaskResult(ret);\n+\n+        resStr = res.get(\"result\").toString();\n+\n+        assertTrue(\"2\".equals(resStr));\n+\n+        // Check Timestamp key.\n+        long timestamp = System.currentTimeMillis();\n+\n+        jcache().put(new Timestamp(timestamp), 3);\n+\n+        ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME,\n+                String.format(\"{\\\"type\\\":\\\"%s\\\",\\\"value\\\":\\\"%s\\\"}\", VisorDataType.TIMESTAMP, timestamp)\n+            )\n+        );\n+\n+        info(\"VisorCacheGetValueTask result for Timestamp key: \" + ret);\n+\n+        res = jsonTaskResult(ret);\n+\n+        resStr = res.get(\"result\").toString();\n+\n+        assertTrue(\"3\".equals(resStr));\n+\n+        //Check Date key.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffa484f1b897277d54022f94082b28051b49edf2"}, "originalPosition": 135}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgwODYzMw==", "bodyText": "Link added.", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r375808633", "createdAt": "2020-02-06T12:34:56Z", "author": {"login": "vsisko"}, "path": "modules/clients/src/test/java/org/apache/ignite/internal/processors/rest/JettyRestProcessorAbstractSelfTest.java", "diffHunk": "@@ -1636,6 +1645,246 @@ public void testExe() throws Exception {\n         assertResponseContainsError(ret, \"Failed to find mandatory parameter in request: id\");\n     }\n \n+    /**\n+     * Tests work of VisorCacheGetValueTask via {@link VisorGatewayTask}.\n+     *\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    public void testVisorGetCacheValueTask() throws Exception {\n+        ClusterNode locNode = grid(1).localNode();\n+\n+        Person p = new Person(100, \"John\", \"Doe\", 300);\n+\n+        // Check integer key.\n+        jcache().put(1, p);\n+\n+        String ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME, String.format(\"{\\\"type\\\":\\\"%s\\\",\\\"value\\\":\\\"%s\\\"}\", VisorDataType.INT, 1)));\n+\n+        info(\"VisorCacheGetValueTask result for Integer key: \" + ret);\n+\n+        JsonNode res = jsonTaskResult(ret);\n+\n+        String resStr = res.get(\"result\").toString();\n+\n+        assertTrue(resStr.contains(\"\\\"id\\\":\" + p.getId()));\n+        assertTrue(resStr.contains(\"\\\"orgId\\\":\" + p.getOrganizationId()));\n+        assertTrue(resStr.contains(\"\\\"firstName\\\":\\\"\" + p.getFirstName() + \"\\\"\"));\n+        assertTrue(resStr.contains(\"\\\"lastName\\\":\\\"\" + p.getLastName() + \"\\\"\"));\n+        assertTrue(resStr.contains(\"\\\"salary\\\":\" + p.getSalary()));\n+\n+        // Check UUID key.\n+        UUID uuidKey = UUID.randomUUID();\n+\n+        jcache().put(uuidKey, 2);\n+\n+        ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME,\n+                String.format(\"{\\\"type\\\":\\\"%s\\\",\\\"value\\\":\\\"%s\\\"}\", VisorDataType.UUID, uuidKey.toString())\n+            )\n+        );\n+\n+        info(\"VisorCacheGetValueTask result for UUID key: \" + ret);\n+\n+        res = jsonTaskResult(ret);\n+\n+        resStr = res.get(\"result\").toString();\n+\n+        assertTrue(\"2\".equals(resStr));\n+\n+        // Check Timestamp key.\n+        long timestamp = System.currentTimeMillis();\n+\n+        jcache().put(new Timestamp(timestamp), 3);\n+\n+        ret = content(new VisorGatewayArgument(VisorCacheGetValueTask.class)\n+            .setNode(locNode)\n+            .setTaskArgument(VisorCacheGetValueTaskArg.class)\n+            .addArguments(DEFAULT_CACHE_NAME,\n+                String.format(\"{\\\"type\\\":\\\"%s\\\",\\\"value\\\":\\\"%s\\\"}\", VisorDataType.TIMESTAMP, timestamp)\n+            )\n+        );\n+\n+        info(\"VisorCacheGetValueTask result for Timestamp key: \" + ret);\n+\n+        res = jsonTaskResult(ret);\n+\n+        resStr = res.get(\"result\").toString();\n+\n+        assertTrue(\"3\".equals(resStr));\n+\n+        //Check Date key.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc5MTk0OA=="}, "originalCommit": {"oid": "ffa484f1b897277d54022f94082b28051b49edf2"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNDI0NTM1OnYy", "diffSide": "RIGHT", "path": "modules/rest-http/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheGetValueTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMTo1NzowNVrOFmYmyA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMjozNDowMVrOFmZg-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc5MzM1Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        @Nullable IgniteCache<Object, Object> cache = ignite.cache(cacheName);\n          \n          \n            \n                        IgniteCache<Object, Object> cache = ignite.cache(cacheName);", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r375793352", "createdAt": "2020-02-06T11:57:05Z", "author": {"login": "akuznetsov-gridgain"}, "path": "modules/rest-http/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheGetValueTask.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.visor.cache;\n+\n+import java.util.UUID;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.binary.BinaryObject;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.processors.task.GridInternal;\n+import org.apache.ignite.internal.processors.task.GridVisorManagementTask;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.apache.ignite.internal.visor.VisorJob;\n+import org.apache.ignite.internal.visor.VisorOneNodeTask;\n+import org.apache.ignite.internal.visor.util.VisorTaskUtils;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Task that get value in specified cache for specified key value.\n+ */\n+@GridInternal\n+@GridVisorManagementTask\n+public class VisorCacheGetValueTask extends VisorOneNodeTask<VisorCacheGetValueTaskArg, VisorCacheModifyTaskResult> {\n+    /** */\n+    private static final long serialVersionUID = 0L;\n+\n+    /** {@inheritDoc} */\n+    @Override protected VisorCacheGetValueJob job(VisorCacheGetValueTaskArg arg) {\n+        return new VisorCacheGetValueJob(arg, debug);\n+    }\n+\n+    /**\n+     * Job that get value in specified cache for specified key value.\n+     */\n+    private static class VisorCacheGetValueJob extends VisorJob<VisorCacheGetValueTaskArg, VisorCacheModifyTaskResult> {\n+        /** */\n+        private static final long serialVersionUID = 0L;\n+\n+        /**\n+         * Create job.\n+         *\n+         * @param arg Task argument.\n+         * @param debug Debug flag.\n+         */\n+        private VisorCacheGetValueJob(VisorCacheGetValueTaskArg arg, boolean debug) {\n+            super(arg, debug);\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override protected VisorCacheModifyTaskResult run(final VisorCacheGetValueTaskArg arg) {\n+            assert arg != null;\n+\n+            String cacheName = arg.getCacheName();\n+            assert cacheName != null;\n+\n+            @Nullable IgniteCache<Object, Object> cache = ignite.cache(cacheName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffa484f1b897277d54022f94082b28051b49edf2"}, "originalPosition": 70}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgwODI0OQ==", "bodyText": "Removed nullable.", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r375808249", "createdAt": "2020-02-06T12:34:01Z", "author": {"login": "vsisko"}, "path": "modules/rest-http/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheGetValueTask.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.visor.cache;\n+\n+import java.util.UUID;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.binary.BinaryObject;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.processors.task.GridInternal;\n+import org.apache.ignite.internal.processors.task.GridVisorManagementTask;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.apache.ignite.internal.visor.VisorJob;\n+import org.apache.ignite.internal.visor.VisorOneNodeTask;\n+import org.apache.ignite.internal.visor.util.VisorTaskUtils;\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Task that get value in specified cache for specified key value.\n+ */\n+@GridInternal\n+@GridVisorManagementTask\n+public class VisorCacheGetValueTask extends VisorOneNodeTask<VisorCacheGetValueTaskArg, VisorCacheModifyTaskResult> {\n+    /** */\n+    private static final long serialVersionUID = 0L;\n+\n+    /** {@inheritDoc} */\n+    @Override protected VisorCacheGetValueJob job(VisorCacheGetValueTaskArg arg) {\n+        return new VisorCacheGetValueJob(arg, debug);\n+    }\n+\n+    /**\n+     * Job that get value in specified cache for specified key value.\n+     */\n+    private static class VisorCacheGetValueJob extends VisorJob<VisorCacheGetValueTaskArg, VisorCacheModifyTaskResult> {\n+        /** */\n+        private static final long serialVersionUID = 0L;\n+\n+        /**\n+         * Create job.\n+         *\n+         * @param arg Task argument.\n+         * @param debug Debug flag.\n+         */\n+        private VisorCacheGetValueJob(VisorCacheGetValueTaskArg arg, boolean debug) {\n+            super(arg, debug);\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override protected VisorCacheModifyTaskResult run(final VisorCacheGetValueTaskArg arg) {\n+            assert arg != null;\n+\n+            String cacheName = arg.getCacheName();\n+            assert cacheName != null;\n+\n+            @Nullable IgniteCache<Object, Object> cache = ignite.cache(cacheName);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc5MzM1Mg=="}, "originalCommit": {"oid": "ffa484f1b897277d54022f94082b28051b49edf2"}, "originalPosition": 70}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNDI0NjE1OnYy", "diffSide": "RIGHT", "path": "modules/rest-http/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheGetValueTask.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMTo1NzoyNVrOFmYnUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMjozNDoxNFrOFmZhXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc5MzQ4OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            import org.jetbrains.annotations.Nullable;", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r375793488", "createdAt": "2020-02-06T11:57:25Z", "author": {"login": "akuznetsov-gridgain"}, "path": "modules/rest-http/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheGetValueTask.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.visor.cache;\n+\n+import java.util.UUID;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.binary.BinaryObject;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.processors.task.GridInternal;\n+import org.apache.ignite.internal.processors.task.GridVisorManagementTask;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.apache.ignite.internal.visor.VisorJob;\n+import org.apache.ignite.internal.visor.VisorOneNodeTask;\n+import org.apache.ignite.internal.visor.util.VisorTaskUtils;\n+import org.jetbrains.annotations.Nullable;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffa484f1b897277d54022f94082b28051b49edf2"}, "originalPosition": 30}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgwODM1MA==", "bodyText": "Removed nullable.", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r375808350", "createdAt": "2020-02-06T12:34:14Z", "author": {"login": "vsisko"}, "path": "modules/rest-http/src/main/java/org/apache/ignite/internal/visor/cache/VisorCacheGetValueTask.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.visor.cache;\n+\n+import java.util.UUID;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.binary.BinaryObject;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.internal.processors.task.GridInternal;\n+import org.apache.ignite.internal.processors.task.GridVisorManagementTask;\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.apache.ignite.internal.visor.VisorJob;\n+import org.apache.ignite.internal.visor.VisorOneNodeTask;\n+import org.apache.ignite.internal.visor.util.VisorTaskUtils;\n+import org.jetbrains.annotations.Nullable;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc5MzQ4OA=="}, "originalCommit": {"oid": "ffa484f1b897277d54022f94082b28051b49edf2"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMyNDI1Mjk0OnYy", "diffSide": "RIGHT", "path": "modules/rest-http/src/main/java/org/apache/ignite/internal/visor/cache/VisorDataType.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMjowMDowM1rOFmYraw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wNlQxMjozMzozOFrOFmZgUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc5NDUzOQ==", "bodyText": "Please sort types in groups.", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r375794539", "createdAt": "2020-02-06T12:00:03Z", "author": {"login": "akuznetsov-gridgain"}, "path": "modules/rest-http/src/main/java/org/apache/ignite/internal/visor/cache/VisorDataType.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.visor.cache;\n+\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Enumeration of all supported cache key types in {@link VisorCacheGetValueTask}.\n+ */\n+public enum VisorDataType {\n+    /**  */\n+    STRING,\n+\n+    /**  */\n+    CHARACTER,\n+\n+    /**  */\n+    INT,\n+\n+    /**  */\n+    LONG,\n+\n+    /**  */\n+    SHORT,\n+\n+    /**  */\n+    BYTE,\n+\n+    /**  */\n+    FLOAT,\n+\n+    /**  */\n+    DOUBLE,\n+\n+    /**  */\n+    BOOLEAN,\n+\n+    /**  */\n+    DATE_UTIL,\n+\n+    /**  */\n+    DATE_SQL,\n+\n+    /**  */\n+    TIMESTAMP,\n+\n+    /**  */\n+    UUID,\n+\n+    /**  */\n+    BINARY,\n+\n+    /**  */\n+    INSTANT,\n+\n+    /**  */\n+    BIG_DECIMAL,\n+\n+    /**  */\n+    BIG_INTEGER;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ffa484f1b897277d54022f94082b28051b49edf2"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTgwODA4MQ==", "bodyText": "Sorted.", "url": "https://github.com/gridgain/gridgain/pull/869#discussion_r375808081", "createdAt": "2020-02-06T12:33:38Z", "author": {"login": "vsisko"}, "path": "modules/rest-http/src/main/java/org/apache/ignite/internal/visor/cache/VisorDataType.java", "diffHunk": "@@ -0,0 +1,88 @@\n+/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.visor.cache;\n+\n+import org.jetbrains.annotations.Nullable;\n+\n+/**\n+ * Enumeration of all supported cache key types in {@link VisorCacheGetValueTask}.\n+ */\n+public enum VisorDataType {\n+    /**  */\n+    STRING,\n+\n+    /**  */\n+    CHARACTER,\n+\n+    /**  */\n+    INT,\n+\n+    /**  */\n+    LONG,\n+\n+    /**  */\n+    SHORT,\n+\n+    /**  */\n+    BYTE,\n+\n+    /**  */\n+    FLOAT,\n+\n+    /**  */\n+    DOUBLE,\n+\n+    /**  */\n+    BOOLEAN,\n+\n+    /**  */\n+    DATE_UTIL,\n+\n+    /**  */\n+    DATE_SQL,\n+\n+    /**  */\n+    TIMESTAMP,\n+\n+    /**  */\n+    UUID,\n+\n+    /**  */\n+    BINARY,\n+\n+    /**  */\n+    INSTANT,\n+\n+    /**  */\n+    BIG_DECIMAL,\n+\n+    /**  */\n+    BIG_INTEGER;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NTc5NDUzOQ=="}, "originalCommit": {"oid": "ffa484f1b897277d54022f94082b28051b49edf2"}, "originalPosition": 74}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3165, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}