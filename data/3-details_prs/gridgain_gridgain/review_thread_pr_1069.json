{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAzMjU4MTc4", "number": 1069, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDoxOTo1NlrODy65uA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDozNjoyMVrODy7S9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzIwNDQwOnYy", "diffSide": "RIGHT", "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/checkpoint/CheckpointTempFilesCleanupOnStartupTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDoxOTo1NlrOGHP-FA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDoxOTo1NlrOGHP-FA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI1NDg2OA==", "bodyText": "Do you really need this setting?", "url": "https://github.com/gridgain/gridgain/pull/1069#discussion_r410254868", "createdAt": "2020-04-17T14:19:56Z", "author": {"login": "alievmirza"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/checkpoint/CheckpointTempFilesCleanupOnStartupTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache.persistence.db.checkpoint;\n+\n+import java.io.File;\n+import java.util.UUID;\n+import org.apache.ignite.configuration.DataStorageConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.events.EventType;\n+import org.apache.ignite.failure.StopNodeFailureHandler;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+\n+import static org.apache.ignite.internal.processors.cache.persistence.file.FilePageStoreManager.DFLT_STORE_DIR;\n+\n+/**\n+ *\n+ */\n+public class CheckpointTempFilesCleanupOnStartupTest extends GridCommonAbstractTest {\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTest() throws Exception {\n+        super.beforeTest();\n+\n+        stopAllGrids();\n+\n+        cleanPersistenceDir();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTest() throws Exception {\n+        stopAllGrids();\n+\n+        cleanPersistenceDir();\n+\n+        super.afterTest();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(igniteInstanceName);\n+\n+        cfg.setConsistentId(igniteInstanceName);\n+\n+        DataStorageConfiguration storageCfg = new DataStorageConfiguration();\n+\n+        storageCfg.getDefaultDataRegionConfiguration()\n+            .setPersistenceEnabled(true);\n+\n+        cfg.setDataStorageConfiguration(storageCfg);\n+\n+        cfg.setFailureHandler(new StopNodeFailureHandler());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75414682c396cccf9c360c8a3f58a4392f0fc735"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzIwNDcwOnYy", "diffSide": "RIGHT", "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/checkpoint/CheckpointTempFilesCleanupOnStartupTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDoxOTo1OVrOGHP-Pw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDoxOTo1OVrOGHP-Pw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI1NDkxMQ==", "bodyText": "Please add comment that describes the test", "url": "https://github.com/gridgain/gridgain/pull/1069#discussion_r410254911", "createdAt": "2020-04-17T14:19:59Z", "author": {"login": "alievmirza"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/checkpoint/CheckpointTempFilesCleanupOnStartupTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache.persistence.db.checkpoint;\n+\n+import java.io.File;\n+import java.util.UUID;\n+import org.apache.ignite.configuration.DataStorageConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.events.EventType;\n+import org.apache.ignite.failure.StopNodeFailureHandler;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+\n+import static org.apache.ignite.internal.processors.cache.persistence.file.FilePageStoreManager.DFLT_STORE_DIR;\n+\n+/**\n+ *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75414682c396cccf9c360c8a3f58a4392f0fc735"}, "originalPosition": 32}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzIwNzAxOnYy", "diffSide": "RIGHT", "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/checkpoint/CheckpointTempFilesCleanupOnStartupTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDoyMDoyOVrOGHP_sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDoyMDoyOVrOGHP_sg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI1NTI4Mg==", "bodyText": "The same as previous, do you really need this setting?", "url": "https://github.com/gridgain/gridgain/pull/1069#discussion_r410255282", "createdAt": "2020-04-17T14:20:29Z", "author": {"login": "alievmirza"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/checkpoint/CheckpointTempFilesCleanupOnStartupTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache.persistence.db.checkpoint;\n+\n+import java.io.File;\n+import java.util.UUID;\n+import org.apache.ignite.configuration.DataStorageConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.events.EventType;\n+import org.apache.ignite.failure.StopNodeFailureHandler;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+\n+import static org.apache.ignite.internal.processors.cache.persistence.file.FilePageStoreManager.DFLT_STORE_DIR;\n+\n+/**\n+ *\n+ */\n+public class CheckpointTempFilesCleanupOnStartupTest extends GridCommonAbstractTest {\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTest() throws Exception {\n+        super.beforeTest();\n+\n+        stopAllGrids();\n+\n+        cleanPersistenceDir();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTest() throws Exception {\n+        stopAllGrids();\n+\n+        cleanPersistenceDir();\n+\n+        super.afterTest();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(igniteInstanceName);\n+\n+        cfg.setConsistentId(igniteInstanceName);\n+\n+        DataStorageConfiguration storageCfg = new DataStorageConfiguration();\n+\n+        storageCfg.getDefaultDataRegionConfiguration()\n+            .setPersistenceEnabled(true);\n+\n+        cfg.setDataStorageConfiguration(storageCfg);\n+\n+        cfg.setFailureHandler(new StopNodeFailureHandler());\n+\n+        cfg.setIncludeEventTypes(EventType.EVTS_ALL);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75414682c396cccf9c360c8a3f58a4392f0fc735"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzIxMDYwOnYy", "diffSide": "RIGHT", "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/checkpoint/CheckpointTempFilesCleanupOnStartupTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDoyMToyN1rOGHQCFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDoyMToyN1rOGHQCFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI1NTg5NA==", "bodyText": "missed space after comma", "url": "https://github.com/gridgain/gridgain/pull/1069#discussion_r410255894", "createdAt": "2020-04-17T14:21:27Z", "author": {"login": "alievmirza"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/checkpoint/CheckpointTempFilesCleanupOnStartupTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache.persistence.db.checkpoint;\n+\n+import java.io.File;\n+import java.util.UUID;\n+import org.apache.ignite.configuration.DataStorageConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.events.EventType;\n+import org.apache.ignite.failure.StopNodeFailureHandler;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+\n+import static org.apache.ignite.internal.processors.cache.persistence.file.FilePageStoreManager.DFLT_STORE_DIR;\n+\n+/**\n+ *\n+ */\n+public class CheckpointTempFilesCleanupOnStartupTest extends GridCommonAbstractTest {\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTest() throws Exception {\n+        super.beforeTest();\n+\n+        stopAllGrids();\n+\n+        cleanPersistenceDir();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTest() throws Exception {\n+        stopAllGrids();\n+\n+        cleanPersistenceDir();\n+\n+        super.afterTest();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(igniteInstanceName);\n+\n+        cfg.setConsistentId(igniteInstanceName);\n+\n+        DataStorageConfiguration storageCfg = new DataStorageConfiguration();\n+\n+        storageCfg.getDefaultDataRegionConfiguration()\n+            .setPersistenceEnabled(true);\n+\n+        cfg.setDataStorageConfiguration(storageCfg);\n+\n+        cfg.setFailureHandler(new StopNodeFailureHandler());\n+\n+        cfg.setIncludeEventTypes(EventType.EVTS_ALL);\n+\n+        return cfg;\n+    }\n+\n+    /**\n+     * Test that tmp checkpoints are getting deleted on startup\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testRestartWithTmpCheckpoint() throws Exception {\n+        File dbDir = U.resolveWorkDirectory(U.defaultWorkDirectory(), DFLT_STORE_DIR, false);\n+\n+        String nodeId = UUID.randomUUID().toString();\n+\n+        File nodeDir = new File(new File(dbDir.getAbsolutePath(),U.maskForFileName(nodeId)), \"cp\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75414682c396cccf9c360c8a3f58a4392f0fc735"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzI1NzI2OnYy", "diffSide": "RIGHT", "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/checkpoint/CheckpointTempFilesCleanupOnStartupTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDozMzoyM1rOGHQg6Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNToxMzozM1rOGHSE1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2Mzc4NQ==", "bodyText": "Where did this filename come from? Is this just a random name?", "url": "https://github.com/gridgain/gridgain/pull/1069#discussion_r410263785", "createdAt": "2020-04-17T14:33:23Z", "author": {"login": "alievmirza"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/checkpoint/CheckpointTempFilesCleanupOnStartupTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache.persistence.db.checkpoint;\n+\n+import java.io.File;\n+import java.util.UUID;\n+import org.apache.ignite.configuration.DataStorageConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.events.EventType;\n+import org.apache.ignite.failure.StopNodeFailureHandler;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+\n+import static org.apache.ignite.internal.processors.cache.persistence.file.FilePageStoreManager.DFLT_STORE_DIR;\n+\n+/**\n+ *\n+ */\n+public class CheckpointTempFilesCleanupOnStartupTest extends GridCommonAbstractTest {\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTest() throws Exception {\n+        super.beforeTest();\n+\n+        stopAllGrids();\n+\n+        cleanPersistenceDir();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTest() throws Exception {\n+        stopAllGrids();\n+\n+        cleanPersistenceDir();\n+\n+        super.afterTest();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(igniteInstanceName);\n+\n+        cfg.setConsistentId(igniteInstanceName);\n+\n+        DataStorageConfiguration storageCfg = new DataStorageConfiguration();\n+\n+        storageCfg.getDefaultDataRegionConfiguration()\n+            .setPersistenceEnabled(true);\n+\n+        cfg.setDataStorageConfiguration(storageCfg);\n+\n+        cfg.setFailureHandler(new StopNodeFailureHandler());\n+\n+        cfg.setIncludeEventTypes(EventType.EVTS_ALL);\n+\n+        return cfg;\n+    }\n+\n+    /**\n+     * Test that tmp checkpoints are getting deleted on startup\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testRestartWithTmpCheckpoint() throws Exception {\n+        File dbDir = U.resolveWorkDirectory(U.defaultWorkDirectory(), DFLT_STORE_DIR, false);\n+\n+        String nodeId = UUID.randomUUID().toString();\n+\n+        File nodeDir = new File(new File(dbDir.getAbsolutePath(),U.maskForFileName(nodeId)), \"cp\");\n+\n+        nodeDir.mkdirs();\n+\n+        File tmpFileLeftAfterCrash = new File(nodeDir, \"1586870171036-d346c814-aa03-4d66-bf1e-2951a04268f9-END.bin.tmp\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75414682c396cccf9c360c8a3f58a4392f0fc735"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI4OTM2Nw==", "bodyText": "The filename came from the issue's stacktrace and has no real meaning", "url": "https://github.com/gridgain/gridgain/pull/1069#discussion_r410289367", "createdAt": "2020-04-17T15:13:33Z", "author": {"login": "SammyVimes"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/checkpoint/CheckpointTempFilesCleanupOnStartupTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache.persistence.db.checkpoint;\n+\n+import java.io.File;\n+import java.util.UUID;\n+import org.apache.ignite.configuration.DataStorageConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.events.EventType;\n+import org.apache.ignite.failure.StopNodeFailureHandler;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+\n+import static org.apache.ignite.internal.processors.cache.persistence.file.FilePageStoreManager.DFLT_STORE_DIR;\n+\n+/**\n+ *\n+ */\n+public class CheckpointTempFilesCleanupOnStartupTest extends GridCommonAbstractTest {\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTest() throws Exception {\n+        super.beforeTest();\n+\n+        stopAllGrids();\n+\n+        cleanPersistenceDir();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTest() throws Exception {\n+        stopAllGrids();\n+\n+        cleanPersistenceDir();\n+\n+        super.afterTest();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(igniteInstanceName);\n+\n+        cfg.setConsistentId(igniteInstanceName);\n+\n+        DataStorageConfiguration storageCfg = new DataStorageConfiguration();\n+\n+        storageCfg.getDefaultDataRegionConfiguration()\n+            .setPersistenceEnabled(true);\n+\n+        cfg.setDataStorageConfiguration(storageCfg);\n+\n+        cfg.setFailureHandler(new StopNodeFailureHandler());\n+\n+        cfg.setIncludeEventTypes(EventType.EVTS_ALL);\n+\n+        return cfg;\n+    }\n+\n+    /**\n+     * Test that tmp checkpoints are getting deleted on startup\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testRestartWithTmpCheckpoint() throws Exception {\n+        File dbDir = U.resolveWorkDirectory(U.defaultWorkDirectory(), DFLT_STORE_DIR, false);\n+\n+        String nodeId = UUID.randomUUID().toString();\n+\n+        File nodeDir = new File(new File(dbDir.getAbsolutePath(),U.maskForFileName(nodeId)), \"cp\");\n+\n+        nodeDir.mkdirs();\n+\n+        File tmpFileLeftAfterCrash = new File(nodeDir, \"1586870171036-d346c814-aa03-4d66-bf1e-2951a04268f9-END.bin.tmp\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2Mzc4NQ=="}, "originalCommit": {"oid": "75414682c396cccf9c360c8a3f58a4392f0fc735"}, "originalPosition": 88}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjU0NzI2OTAyOnYy", "diffSide": "RIGHT", "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/checkpoint/CheckpointTempFilesCleanupOnStartupTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDozNjoyMVrOGHQoQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxNDozNjoyMVrOGHQoQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDI2NTY2Nw==", "bodyText": "Remove redundant empty line.", "url": "https://github.com/gridgain/gridgain/pull/1069#discussion_r410265667", "createdAt": "2020-04-17T14:36:21Z", "author": {"login": "alievmirza"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/persistence/db/checkpoint/CheckpointTempFilesCleanupOnStartupTest.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache.persistence.db.checkpoint;\n+\n+import java.io.File;\n+import java.util.UUID;\n+import org.apache.ignite.configuration.DataStorageConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.events.EventType;\n+import org.apache.ignite.failure.StopNodeFailureHandler;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+\n+import static org.apache.ignite.internal.processors.cache.persistence.file.FilePageStoreManager.DFLT_STORE_DIR;\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "75414682c396cccf9c360c8a3f58a4392f0fc735"}, "originalPosition": 30}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3104, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}