{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAwNTY4Mjg5", "number": 1039, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwODoxNToxMVrODv4f2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwODoxNToxMVrODv4f2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxNTM1MzIwOnYy", "diffSide": "RIGHT", "path": "modules/platforms/cpp/odbc-test/include/odbc_test_suite.h", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwODoxNToxMVrOGCj_Fg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwODoxNToxMVrOGCj_Fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTMzOTkyNg==", "bodyText": "This blank line is sometimes present, sometimes isn't", "url": "https://github.com/gridgain/gridgain/pull/1039#discussion_r405339926", "createdAt": "2020-04-08T08:15:11Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/cpp/odbc-test/include/odbc_test_suite.h", "diffHunk": "@@ -129,13 +139,176 @@ namespace ignite\n              */\n             void InsertNonFullBatchSelect(int recordsNum, int splitAt);\n \n+            /**\n+             * Get test i8Field.\n+             *\n+             * @param idx Index.\n+             * @return Corresponding i8Field value.\n+             */\n+            static int8_t GetTestI8Field(int64_t idx);\n+\n+            /**\n+             * Check i8Field test value.\n+             * @param idx Index.\n+             * @param value Value to test.\n+             */\n+            static void CheckTestI8Value(int idx, int8_t value);\n+\n+            /**\n+             * Get test i16Field.\n+             *\n+             * @param idx Index.\n+             * @return Corresponding i16Field value.\n+             */\n+            static int16_t GetTestI16Field(int64_t idx);\n+\n+            /**\n+             * Check i16Field test value.\n+             * @param idx Index.\n+             * @param value Value to test.\n+             */\n+            static void CheckTestI16Value(int idx, int16_t value);\n+\n+            /**\n+             * Get test i32Field.\n+             *\n+             * @param idx Index.\n+             * @return Corresponding i32Field value.\n+             */\n+            static int32_t GetTestI32Field(int64_t idx);\n+\n+            /**\n+             * Check i32Field test value.\n+             * @param idx Index.\n+             * @param value Value to test.\n+             */\n+            static void CheckTestI32Value(int idx, int32_t value);\n+\n             /**\n              * Get test string.\n              *\n-             * @param ind Index.\n+             * @param idx Index.\n              * @return Corresponding test string.\n              */\n-            static std::string getTestString(int64_t ind);\n+            static std::string GetTestString(int64_t idx);\n+\n+            /**\n+             * Check strField test value.\n+             * @param idx Index.\n+             * @param value Value to test.\n+             */\n+            static void CheckTestStringValue(int idx, const std::string& value);\n+\n+            /**\n+             * Get test floatField.\n+             *\n+             * @param idx Index.\n+             * @return Corresponding floatField value.\n+             */\n+            static float GetTestFloatField(int64_t idx);\n+\n+            /**\n+             * Check floatField test value.\n+             * @param idx Index.\n+             * @param value Value to test.\n+             */\n+            static void CheckTestFloatValue(int idx, float value);\n+\n+            /**\n+             * Get test doubleField.\n+             *", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7b87a09328fe2832e4104bf5a051ee5cb17f2354"}, "originalPosition": 109}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3092, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}