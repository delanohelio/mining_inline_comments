{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNTk0NTkz", "number": 1340, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNToxMzowMlrOEVdSDg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNTozMjo1OFrOEVd0BA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTM1MzEwOnYy", "diffSide": "RIGHT", "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryDeploymentToClientTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNToxMzowM1rOG8OPwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNToxMzowM1rOG8OPwg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgwMTE1NA==", "bodyText": "2020", "url": "https://github.com/gridgain/gridgain/pull/1340#discussion_r465801154", "createdAt": "2020-08-05T15:13:03Z", "author": {"login": "sk0x50"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryDeploymentToClientTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1ce4740a6146f75239487c4233e12abfedcc55a"}, "originalPosition": 2}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTM2NjY5OnYy", "diffSide": "RIGHT", "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryDeploymentToClientTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNToxNjowOFrOG8OYfg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNToxNjowOFrOG8OYfg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgwMzM5MA==", "bodyText": "I don't think you need explicitly set shared TcpDiscoverySpi here, this step should be done at GridAbstractTest#getConfiguration(String igniteInstanceName, IgniteTestResources rsrcs).\nPlease take a look at GridAbstractTest.sharedStaticIpFinder and its usages.", "url": "https://github.com/gridgain/gridgain/pull/1340#discussion_r465803390", "createdAt": "2020-08-05T15:16:08Z", "author": {"login": "sk0x50"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryDeploymentToClientTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache.query.continuous;\n+\n+import java.util.Map;\n+import javax.cache.configuration.Factory;\n+import javax.cache.event.CacheEntryEventFilter;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.cache.query.AbstractContinuousQuery;\n+import org.apache.ignite.cache.query.ContinuousQuery;\n+import org.apache.ignite.configuration.CacheConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.processors.continuous.GridContinuousProcessor;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.apache.ignite.spi.communication.tcp.TcpCommunicationSpi;\n+import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;\n+import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder;\n+import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+\n+import static org.apache.ignite.internal.processors.cache.GridCacheUtils.UTILITY_CACHE_NAME;\n+\n+/**\n+ * Tests for continuous query deployment to client nodes.\n+ */\n+public class CacheContinuousQueryDeploymentToClientTest extends GridCommonAbstractTest {\n+    /** */\n+    private static TcpDiscoveryIpFinder ipFinder = new TcpDiscoveryVmIpFinder(true);\n+\n+    /** Cache name. */\n+    private static final String CACHE_NAME = \"test_cache\";\n+\n+    /** {@inheritDoc} */\n+    @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(igniteInstanceName);\n+\n+        cfg.setPeerClassLoadingEnabled(true);\n+\n+        cfg.setDiscoverySpi(new TcpDiscoverySpi().setIpFinder(ipFinder));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1ce4740a6146f75239487c4233e12abfedcc55a"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTM4MjAwOnYy", "diffSide": "RIGHT", "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryDeploymentToClientTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNToxOToyOVrOG8OiCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNToxOToyOVrOG8OiCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgwNTgzMg==", "bodyText": "This property relates to communication via shared memory (aka SHMEM). You can just remove this line, I think.", "url": "https://github.com/gridgain/gridgain/pull/1340#discussion_r465805832", "createdAt": "2020-08-05T15:19:29Z", "author": {"login": "sk0x50"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryDeploymentToClientTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache.query.continuous;\n+\n+import java.util.Map;\n+import javax.cache.configuration.Factory;\n+import javax.cache.event.CacheEntryEventFilter;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.cache.query.AbstractContinuousQuery;\n+import org.apache.ignite.cache.query.ContinuousQuery;\n+import org.apache.ignite.configuration.CacheConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.processors.continuous.GridContinuousProcessor;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.apache.ignite.spi.communication.tcp.TcpCommunicationSpi;\n+import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;\n+import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder;\n+import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+\n+import static org.apache.ignite.internal.processors.cache.GridCacheUtils.UTILITY_CACHE_NAME;\n+\n+/**\n+ * Tests for continuous query deployment to client nodes.\n+ */\n+public class CacheContinuousQueryDeploymentToClientTest extends GridCommonAbstractTest {\n+    /** */\n+    private static TcpDiscoveryIpFinder ipFinder = new TcpDiscoveryVmIpFinder(true);\n+\n+    /** Cache name. */\n+    private static final String CACHE_NAME = \"test_cache\";\n+\n+    /** {@inheritDoc} */\n+    @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(igniteInstanceName);\n+\n+        cfg.setPeerClassLoadingEnabled(true);\n+\n+        cfg.setDiscoverySpi(new TcpDiscoverySpi().setIpFinder(ipFinder));\n+\n+        cfg.setCacheConfiguration(new CacheConfiguration<>(CACHE_NAME));\n+\n+        ((TcpCommunicationSpi)cfg.getCommunicationSpi()).setSharedMemoryPort(-1);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1ce4740a6146f75239487c4233e12abfedcc55a"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTM5ODQ4OnYy", "diffSide": "RIGHT", "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryDeploymentToClientTest.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNToyMzoxNFrOG8Osiw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNToyMzoxNFrOG8Osiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgwODUyMw==", "bodyText": "It seems to me, using Map<?, ?> would be better (here and below).", "url": "https://github.com/gridgain/gridgain/pull/1340#discussion_r465808523", "createdAt": "2020-08-05T15:23:14Z", "author": {"login": "sk0x50"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/query/continuous/CacheContinuousQueryDeploymentToClientTest.java", "diffHunk": "@@ -0,0 +1,155 @@\n+/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache.query.continuous;\n+\n+import java.util.Map;\n+import javax.cache.configuration.Factory;\n+import javax.cache.event.CacheEntryEventFilter;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.cache.query.AbstractContinuousQuery;\n+import org.apache.ignite.cache.query.ContinuousQuery;\n+import org.apache.ignite.configuration.CacheConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.processors.continuous.GridContinuousProcessor;\n+import org.apache.ignite.internal.util.typedef.internal.U;\n+import org.apache.ignite.spi.communication.tcp.TcpCommunicationSpi;\n+import org.apache.ignite.spi.discovery.tcp.TcpDiscoverySpi;\n+import org.apache.ignite.spi.discovery.tcp.ipfinder.TcpDiscoveryIpFinder;\n+import org.apache.ignite.spi.discovery.tcp.ipfinder.vm.TcpDiscoveryVmIpFinder;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+\n+import static org.apache.ignite.internal.processors.cache.GridCacheUtils.UTILITY_CACHE_NAME;\n+\n+/**\n+ * Tests for continuous query deployment to client nodes.\n+ */\n+public class CacheContinuousQueryDeploymentToClientTest extends GridCommonAbstractTest {\n+    /** */\n+    private static TcpDiscoveryIpFinder ipFinder = new TcpDiscoveryVmIpFinder(true);\n+\n+    /** Cache name. */\n+    private static final String CACHE_NAME = \"test_cache\";\n+\n+    /** {@inheritDoc} */\n+    @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(igniteInstanceName);\n+\n+        cfg.setPeerClassLoadingEnabled(true);\n+\n+        cfg.setDiscoverySpi(new TcpDiscoverySpi().setIpFinder(ipFinder));\n+\n+        cfg.setCacheConfiguration(new CacheConfiguration<>(CACHE_NAME));\n+\n+        ((TcpCommunicationSpi)cfg.getCommunicationSpi()).setSharedMemoryPort(-1);\n+\n+        return cfg;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTest() throws Exception {\n+        stopAllGrids();\n+\n+        super.afterTest();\n+    }\n+\n+    /**\n+     * Test starts 1 server node and 1 client node. The client node deploys\n+     * CQ for the cache {@link #CACHE_NAME}. After that another client node is started.\n+     * Expected that CQ won't be deployed to the new client, since the client doesn't\n+     * store any data.\n+     *\n+     * @throws Exception If failed.\n+     */\n+    @Test\n+    public void testDeploymentToNewClient() throws Exception {\n+        startGrid(0);\n+\n+        IgniteEx client1 = startClientGrid(1);\n+\n+        IgniteCache<Integer, String> cache = client1.cache(CACHE_NAME);\n+\n+        AbstractContinuousQuery<Integer, String> qry = new ContinuousQuery<Integer, String>()\n+            .setLocalListener(evts -> {\n+                // No-op.\n+            })\n+            .setRemoteFilterFactory((Factory<CacheEntryEventFilter<Integer, String>>)() -> evt -> true);\n+\n+        cache.query(qry);\n+\n+        IgniteEx client2 = startClientGrid(2);\n+\n+        GridContinuousProcessor proc = client2.context().continuous();\n+\n+        assertInfosMap(U.field(proc, \"locInfos\"));\n+        assertInfosMap(U.field(proc, \"rmtInfos\"));\n+        assertEquals(0, ((Map)U.field(proc, \"startFuts\")).size());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1ce4740a6146f75239487c4233e12abfedcc55a"}, "originalPosition": 101}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkwOTQ0MDA0OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNTozMjo1OFrOG8PGxg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNVQxNTozMjo1OFrOG8PGxg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NTgxNTIzOA==", "bodyText": "Why is FailureHandler called before unregistering the CQ handler?\nI don't think, this is an issue, but could you please clarify?", "url": "https://github.com/gridgain/gridgain/pull/1340#discussion_r465815238", "createdAt": "2020-08-05T15:32:58Z", "author": {"login": "sk0x50"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/continuous/GridContinuousProcessor.java", "diffHunk": "@@ -660,13 +660,34 @@ private void registerHandlerOnJoin(UUID srcNodeId, UUID routineId, IgnitePredica\n                 ctx.resource().injectGeneric(nodeFilter);\n \n             if (nodeFilter == null || nodeFilter.apply(ctx.discovery().localNode())) {\n-                    registerHandler(srcNodeId,\n+                registerHandler(srcNodeId,\n                         routineId,\n                         hnd,\n                         bufSize,\n                         interval,\n                         autoUnsubscribe,\n                         false);\n+\n+                if (ctx.config().isPeerClassLoadingEnabled()) {\n+                    // Peer class loading cannot be performed before a node joins, so we delay the deployment.\n+                    // Run the deployment task in the system pool to avoid blocking of the discovery thread.\n+                    ctx.discovery().localJoinFuture().listen(f -> ctx.closure().runLocalSafe(new GridPlainRunnable() {\n+                        @Override public void run() {\n+                            try {\n+                                hnd.p2pUnmarshal(srcNodeId, ctx);\n+                            }\n+                            catch (IgniteCheckedException | IgniteException e) {\n+                                U.error(log, \"Failed to unmarshal continuous routine handler [\" +\n+                                    \"routineId=\" + routineId +\n+                                    \", srcNodeId=\" + srcNodeId + ']', e);\n+\n+                                ctx.failure().process(new FailureContext(FailureType.CRITICAL_ERROR, e));\n+\n+                                unregisterHandler(routineId, hnd, false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f1ce4740a6146f75239487c4233e12abfedcc55a"}, "originalPosition": 28}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3306, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}