{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ1MDQwMDM5", "number": 1286, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwODozMjoyNlrOEMYxkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwODozMjoyNlrOEMYxkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxNDI0Mjc1OnYy", "diffSide": "RIGHT", "path": "modules/platforms/cpp/odbc-test/src/utility_test.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwODozMjoyNlrOGudu9g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wOFQwODo1MzowOFrOGuehMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM3NDgzOA==", "bodyText": "Should we also test values with fractional parts?", "url": "https://github.com/gridgain/gridgain/pull/1286#discussion_r451374838", "createdAt": "2020-07-08T08:32:26Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/cpp/odbc-test/src/utility_test.cpp", "diffHunk": "@@ -89,4 +89,58 @@ BOOST_AUTO_TEST_CASE(TestUtilityWriteReadString)\n     BOOST_REQUIRE(outStr4.empty());\n }\n \n+void CheckDecimalWriteRead(const std::string& val)\n+{\n+    using namespace ignite::impl::binary;\n+    using namespace ignite::impl::interop;\n+    using namespace ignite::common;\n+    using namespace ignite::utility;\n+\n+    InteropUnpooledMemory mem(1024);\n+    InteropOutputStream outStream(&mem);\n+    BinaryWriterImpl writer(&outStream, 0);\n+\n+    Decimal decimal(val);\n+\n+    WriteDecimal(writer, decimal);\n+\n+    outStream.Synchronize();\n+\n+    InteropInputStream inStream(&mem);\n+    BinaryReaderImpl reader(&inStream);\n+\n+    Decimal out;\n+    ReadDecimal(reader, out);\n+\n+    std::stringstream converter;\n+    converter << out;\n+\n+    std::string res = converter.str();\n+\n+    BOOST_CHECK_EQUAL(res, val);\n+}\n+\n+/**\n+ * Check that Decimal writing and reading works as expected.\n+ *\n+ * 1. Create Decimal value.\n+ * 2. Write using standard serialization algorithm.\n+ * 3. Read using standard de-serialization algorithm.\n+ * 4. Check that initial and read value are equal.\n+ *\n+ * Repeat with the following values: 0, 1, -1, 42, -42, 160, -160, 34729864879625196, -34729864879625196\n+ */\n+BOOST_AUTO_TEST_CASE(TestUtilityWriteReadDecimal)\n+{\n+    CheckDecimalWriteRead(\"0\");\n+    CheckDecimalWriteRead(\"1\");\n+    CheckDecimalWriteRead(\"-1\");\n+    CheckDecimalWriteRead(\"42\");\n+    CheckDecimalWriteRead(\"-42\");\n+    CheckDecimalWriteRead(\"160\");\n+    CheckDecimalWriteRead(\"-160\");\n+    CheckDecimalWriteRead(\"34729864879625196\");\n+    CheckDecimalWriteRead(\"-34729864879625196\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8599cb97afce575d28677cecb52d2b178b13538f"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM4NzY5OA==", "bodyText": "Good point. Added.", "url": "https://github.com/gridgain/gridgain/pull/1286#discussion_r451387698", "createdAt": "2020-07-08T08:53:08Z", "author": {"login": "isapego"}, "path": "modules/platforms/cpp/odbc-test/src/utility_test.cpp", "diffHunk": "@@ -89,4 +89,58 @@ BOOST_AUTO_TEST_CASE(TestUtilityWriteReadString)\n     BOOST_REQUIRE(outStr4.empty());\n }\n \n+void CheckDecimalWriteRead(const std::string& val)\n+{\n+    using namespace ignite::impl::binary;\n+    using namespace ignite::impl::interop;\n+    using namespace ignite::common;\n+    using namespace ignite::utility;\n+\n+    InteropUnpooledMemory mem(1024);\n+    InteropOutputStream outStream(&mem);\n+    BinaryWriterImpl writer(&outStream, 0);\n+\n+    Decimal decimal(val);\n+\n+    WriteDecimal(writer, decimal);\n+\n+    outStream.Synchronize();\n+\n+    InteropInputStream inStream(&mem);\n+    BinaryReaderImpl reader(&inStream);\n+\n+    Decimal out;\n+    ReadDecimal(reader, out);\n+\n+    std::stringstream converter;\n+    converter << out;\n+\n+    std::string res = converter.str();\n+\n+    BOOST_CHECK_EQUAL(res, val);\n+}\n+\n+/**\n+ * Check that Decimal writing and reading works as expected.\n+ *\n+ * 1. Create Decimal value.\n+ * 2. Write using standard serialization algorithm.\n+ * 3. Read using standard de-serialization algorithm.\n+ * 4. Check that initial and read value are equal.\n+ *\n+ * Repeat with the following values: 0, 1, -1, 42, -42, 160, -160, 34729864879625196, -34729864879625196\n+ */\n+BOOST_AUTO_TEST_CASE(TestUtilityWriteReadDecimal)\n+{\n+    CheckDecimalWriteRead(\"0\");\n+    CheckDecimalWriteRead(\"1\");\n+    CheckDecimalWriteRead(\"-1\");\n+    CheckDecimalWriteRead(\"42\");\n+    CheckDecimalWriteRead(\"-42\");\n+    CheckDecimalWriteRead(\"160\");\n+    CheckDecimalWriteRead(\"-160\");\n+    CheckDecimalWriteRead(\"34729864879625196\");\n+    CheckDecimalWriteRead(\"-34729864879625196\");", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTM3NDgzOA=="}, "originalCommit": {"oid": "8599cb97afce575d28677cecb52d2b178b13538f"}, "originalPosition": 55}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3345, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}