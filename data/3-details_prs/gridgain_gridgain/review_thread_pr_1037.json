{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzk5OTgxMjEz", "number": 1037, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDo1MjowN1rODvmUWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTowNzo0MlrODvmzag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjM3NDY1OnYy", "diffSide": "RIGHT", "path": "modules/platforms/cpp/odbc-test/src/queries_test.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNDo1MjowN1rOGCHbHQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMTowODowOVrOGCbhHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg3MTk2NQ==", "bodyText": "I'm definitely not an expert here, but why do we need a cycle with 200 loops?\nIs it supposed to be 1000/123?", "url": "https://github.com/gridgain/gridgain/pull/1037#discussion_r404871965", "createdAt": "2020-04-07T14:52:07Z", "author": {"login": "ashapkin"}, "path": "modules/platforms/cpp/odbc-test/src/queries_test.cpp", "diffHunk": "@@ -1667,7 +1667,41 @@ BOOST_AUTO_TEST_CASE(TestAffectedRows)\n     if (!SQL_SUCCEEDED(ret))\n         BOOST_FAIL(GetOdbcErrorMessage(SQL_HANDLE_STMT, stmt));\n \n-    BOOST_CHECK_EQUAL(affected, 0);\n+    BOOST_CHECK_EQUAL(affected, 1024);\n+}\n+\n+BOOST_AUTO_TEST_CASE(TestAffectedRowsOnSelect)\n+{\n+    Connect(\"DRIVER={Apache Ignite};ADDRESS=127.0.0.1:11110;SCHEMA=cache;PAGE_SIZE=123\");\n+\n+    const int recordsNum = 1000;\n+\n+    // Inserting values.\n+    InsertTestStrings(recordsNum);\n+\n+    // Just selecting everything to make sure everything is OK\n+    SQLCHAR selectReq[] = \"SELECT _key, strField FROM TestType ORDER BY _key\";\n+\n+    SQLRETURN ret = SQLExecDirect(stmt, selectReq, sizeof(selectReq));\n+\n+    if (!SQL_SUCCEEDED(ret))\n+        BOOST_FAIL(GetOdbcErrorMessage(SQL_HANDLE_STMT, stmt));\n+\n+    for (int i = 0; i < 200; ++i)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7909346537e8d60b1580713af1ed4681e6664917"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwMTE4MA==", "bodyText": "123 is the number of records which transferred by a single network request-response and thus stay cached in driver. But records still fetched one by one by application. I've intentionally made number of fetches more than page size (to be sure paging is working properly with this feature), but less than the whole result set.", "url": "https://github.com/gridgain/gridgain/pull/1037#discussion_r405201180", "createdAt": "2020-04-08T01:08:09Z", "author": {"login": "isapego"}, "path": "modules/platforms/cpp/odbc-test/src/queries_test.cpp", "diffHunk": "@@ -1667,7 +1667,41 @@ BOOST_AUTO_TEST_CASE(TestAffectedRows)\n     if (!SQL_SUCCEEDED(ret))\n         BOOST_FAIL(GetOdbcErrorMessage(SQL_HANDLE_STMT, stmt));\n \n-    BOOST_CHECK_EQUAL(affected, 0);\n+    BOOST_CHECK_EQUAL(affected, 1024);\n+}\n+\n+BOOST_AUTO_TEST_CASE(TestAffectedRowsOnSelect)\n+{\n+    Connect(\"DRIVER={Apache Ignite};ADDRESS=127.0.0.1:11110;SCHEMA=cache;PAGE_SIZE=123\");\n+\n+    const int recordsNum = 1000;\n+\n+    // Inserting values.\n+    InsertTestStrings(recordsNum);\n+\n+    // Just selecting everything to make sure everything is OK\n+    SQLCHAR selectReq[] = \"SELECT _key, strField FROM TestType ORDER BY _key\";\n+\n+    SQLRETURN ret = SQLExecDirect(stmt, selectReq, sizeof(selectReq));\n+\n+    if (!SQL_SUCCEEDED(ret))\n+        BOOST_FAIL(GetOdbcErrorMessage(SQL_HANDLE_STMT, stmt));\n+\n+    for (int i = 0; i < 200; ++i)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg3MTk2NQ=="}, "originalCommit": {"oid": "7909346537e8d60b1580713af1ed4681e6664917"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUxMjQ1NDE4OnYy", "diffSide": "RIGHT", "path": "modules/platforms/cpp/odbc/src/query/data_query.cpp", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wN1QxNTowNzo0MlrOGCIM-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOFQwMTowMzo0NFrOGCbcrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg4NDcyOQ==", "bodyText": "Just in case: different connections could yield different results for the same query.", "url": "https://github.com/gridgain/gridgain/pull/1037#discussion_r404884729", "createdAt": "2020-04-07T15:07:42Z", "author": {"login": "ashapkin"}, "path": "modules/platforms/cpp/odbc/src/query/data_query.cpp", "diffHunk": "@@ -181,7 +181,11 @@ namespace ignite\n             int64_t DataQuery::AffectedRows() const\n             {\n                 int64_t affected = rowsAffectedIdx < rowsAffected.size() ? rowsAffected[rowsAffectedIdx] : 0;\n-                return affected < 0 ? 0 : affected;\n+\n+                if (affected >= 0)\n+                    return affected;\n+\n+                return connection.GetConfiguration().GetPageSize();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7909346537e8d60b1580713af1ed4681e6664917"}, "originalPosition": 9}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNTIwMDA0NQ==", "bodyText": "This is an expected behavior. Also, this is not a query, this is API call.", "url": "https://github.com/gridgain/gridgain/pull/1037#discussion_r405200045", "createdAt": "2020-04-08T01:03:44Z", "author": {"login": "isapego"}, "path": "modules/platforms/cpp/odbc/src/query/data_query.cpp", "diffHunk": "@@ -181,7 +181,11 @@ namespace ignite\n             int64_t DataQuery::AffectedRows() const\n             {\n                 int64_t affected = rowsAffectedIdx < rowsAffected.size() ? rowsAffected[rowsAffectedIdx] : 0;\n-                return affected < 0 ? 0 : affected;\n+\n+                if (affected >= 0)\n+                    return affected;\n+\n+                return connection.GetConfiguration().GetPageSize();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNDg4NDcyOQ=="}, "originalCommit": {"oid": "7909346537e8d60b1580713af1ed4681e6664917"}, "originalPosition": 9}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3090, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}