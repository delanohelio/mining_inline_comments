{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1NTgxMTAy", "number": 1466, "title": "GG-28240 Compression alpha", "bodyText": "", "createdAt": "2020-09-30T15:08:11Z", "url": "https://github.com/gridgain/gridgain/pull/1466", "merged": true, "mergeCommit": {"oid": "1c952b91bff506f53de6e16c5ed085ea2bbc0ee3"}, "closed": true, "closedAt": "2020-11-11T14:28:31Z", "author": {"login": "alamar"}, "timelineItems": {"totalCount": 23, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdN-0qOgBqjM4MjUyMzMzNDg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdbeJb9gBqjM5ODM4ODUxOTc=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "008bc4d8a9c098737e967f901156df44eabae5cc", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/008bc4d8a9c098737e967f901156df44eabae5cc", "committedDate": "2020-09-30T14:36:04Z", "message": "GG-30839 Split into Compression SPI configuration and implementation."}, "afterCommit": {"oid": "33ea568890a35beb1c5331c7d74b26f213b89532", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/33ea568890a35beb1c5331c7d74b26f213b89532", "committedDate": "2020-09-30T15:49:41Z", "message": "GG-30839 Split into Compression SPI configuration and implementation."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "33ea568890a35beb1c5331c7d74b26f213b89532", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/33ea568890a35beb1c5331c7d74b26f213b89532", "committedDate": "2020-09-30T15:49:41Z", "message": "GG-30839 Split into Compression SPI configuration and implementation."}, "afterCommit": {"oid": "c17f0258b68710682ecf7fc280d12efea42cc66a", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/c17f0258b68710682ecf7fc280d12efea42cc66a", "committedDate": "2020-10-02T14:17:38Z", "message": "GG-30986 Gzip-based CompressionSpi."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "c17f0258b68710682ecf7fc280d12efea42cc66a", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/c17f0258b68710682ecf7fc280d12efea42cc66a", "committedDate": "2020-10-02T14:17:38Z", "message": "GG-30986 Gzip-based CompressionSpi."}, "afterCommit": {"oid": "908ce265fc449b6a408bb0ea172adacfebb02bca", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/908ce265fc449b6a408bb0ea172adacfebb02bca", "committedDate": "2020-10-05T13:57:52Z", "message": "GG-30986 Gzip-based CompressionSpi."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "908ce265fc449b6a408bb0ea172adacfebb02bca", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/908ce265fc449b6a408bb0ea172adacfebb02bca", "committedDate": "2020-10-05T13:57:52Z", "message": "GG-30986 Gzip-based CompressionSpi."}, "afterCommit": {"oid": "78ebe7c9c768a58a3cc9a17a49a8c04b0516cc6a", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/78ebe7c9c768a58a3cc9a17a49a8c04b0516cc6a", "committedDate": "2020-10-07T16:42:31Z", "message": "GG-30986 Add tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "78ebe7c9c768a58a3cc9a17a49a8c04b0516cc6a", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/78ebe7c9c768a58a3cc9a17a49a8c04b0516cc6a", "committedDate": "2020-10-07T16:42:31Z", "message": "GG-30986 Add tests"}, "afterCommit": {"oid": "aa6371ea902ca14a5e8e7dd4727e0e0fc8957e0a", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/aa6371ea902ca14a5e8e7dd4727e0e0fc8957e0a", "committedDate": "2020-10-09T14:17:23Z", "message": "GG-30986 Add tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "aa6371ea902ca14a5e8e7dd4727e0e0fc8957e0a", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/aa6371ea902ca14a5e8e7dd4727e0e0fc8957e0a", "committedDate": "2020-10-09T14:17:23Z", "message": "GG-30986 Add tests"}, "afterCommit": {"oid": "263c24df2a2263ffec3f483ff73344b628e7a05e", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/263c24df2a2263ffec3f483ff73344b628e7a05e", "committedDate": "2020-10-09T19:27:39Z", "message": "GG-30986 Add tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "263c24df2a2263ffec3f483ff73344b628e7a05e", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/263c24df2a2263ffec3f483ff73344b628e7a05e", "committedDate": "2020-10-09T19:27:39Z", "message": "GG-30986 Add tests"}, "afterCommit": {"oid": "3b1d90426cc116926229d9715502d5a4dbaaf694", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/3b1d90426cc116926229d9715502d5a4dbaaf694", "committedDate": "2020-10-14T14:53:12Z", "message": "GG-28240 Allow pluggable entry-level compression."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3b1d90426cc116926229d9715502d5a4dbaaf694", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/3b1d90426cc116926229d9715502d5a4dbaaf694", "committedDate": "2020-10-14T14:53:12Z", "message": "GG-28240 Allow pluggable entry-level compression."}, "afterCommit": {"oid": "1aeb096ae67d3e6d6af8af0d693357f3d4e610d8", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/1aeb096ae67d3e6d6af8af0d693357f3d4e610d8", "committedDate": "2020-10-19T12:50:00Z", "message": "GG-28240 Allow pluggable entry-level compression."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "1aeb096ae67d3e6d6af8af0d693357f3d4e610d8", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/1aeb096ae67d3e6d6af8af0d693357f3d4e610d8", "committedDate": "2020-10-19T12:50:00Z", "message": "GG-28240 Allow pluggable entry-level compression."}, "afterCommit": {"oid": "d1f0ab565063cc5f0c2ff8af8fc80fc39a130650", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/d1f0ab565063cc5f0c2ff8af8fc80fc39a130650", "committedDate": "2020-10-20T13:51:08Z", "message": "GG-28240 Allow pluggable entry-level compression.\n\nAlso bump zstd library version."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d1f0ab565063cc5f0c2ff8af8fc80fc39a130650", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/d1f0ab565063cc5f0c2ff8af8fc80fc39a130650", "committedDate": "2020-10-20T13:51:08Z", "message": "GG-28240 Allow pluggable entry-level compression.\n\nAlso bump zstd library version."}, "afterCommit": {"oid": "8c88c6e497b027cd44902f6c39aaf3a0fd4ca365", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/8c88c6e497b027cd44902f6c39aaf3a0fd4ca365", "committedDate": "2020-10-22T18:54:50Z", "message": "GG-28240 Allow pluggable entry-level compression.\n\nAlso bump zstd library version."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8c88c6e497b027cd44902f6c39aaf3a0fd4ca365", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/8c88c6e497b027cd44902f6c39aaf3a0fd4ca365", "committedDate": "2020-10-22T18:54:50Z", "message": "GG-28240 Allow pluggable entry-level compression.\n\nAlso bump zstd library version."}, "afterCommit": {"oid": "3aa08ba8ec01dc80b2eb18d185a5758fabf79e6f", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/3aa08ba8ec01dc80b2eb18d185a5758fabf79e6f", "committedDate": "2020-10-23T14:26:59Z", "message": "GG-28240 Allow pluggable entry-level compression.\n\nAlso bump zstd library version."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "3aa08ba8ec01dc80b2eb18d185a5758fabf79e6f", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/3aa08ba8ec01dc80b2eb18d185a5758fabf79e6f", "committedDate": "2020-10-23T14:26:59Z", "message": "GG-28240 Allow pluggable entry-level compression.\n\nAlso bump zstd library version."}, "afterCommit": {"oid": "f69cb7f217866a823a2f71f654cc42d25f5030dd", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/f69cb7f217866a823a2f71f654cc42d25f5030dd", "committedDate": "2020-10-23T14:38:44Z", "message": "GG-28240 Allow pluggable entry-level compression.\n\nAlso bump zstd library version."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f69cb7f217866a823a2f71f654cc42d25f5030dd", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/f69cb7f217866a823a2f71f654cc42d25f5030dd", "committedDate": "2020-10-23T14:38:44Z", "message": "GG-28240 Allow pluggable entry-level compression.\n\nAlso bump zstd library version."}, "afterCommit": {"oid": "3d7e75e8114f5166845d2f94ce6772c53a5cf6e1", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/3d7e75e8114f5166845d2f94ce6772c53a5cf6e1", "committedDate": "2020-10-26T11:54:35Z", "message": "Fix tests"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "17e4e192e2ea8a2eb70858d15e0a77ec0f68d8cf", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/17e4e192e2ea8a2eb70858d15e0a77ec0f68d8cf", "committedDate": "2020-10-26T14:41:20Z", "message": "Additional test coverage."}, "afterCommit": {"oid": "cb5fca9a6850567157afb7955b33ac5268a299f8", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/cb5fca9a6850567157afb7955b33ac5268a299f8", "committedDate": "2020-10-27T16:14:48Z", "message": "Additional test coverage."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "cb5fca9a6850567157afb7955b33ac5268a299f8", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/cb5fca9a6850567157afb7955b33ac5268a299f8", "committedDate": "2020-10-27T16:14:48Z", "message": "Additional test coverage."}, "afterCommit": {"oid": "bd08f5e3a0ff93ee848066ebc795b84e5c9bcf99", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/bd08f5e3a0ff93ee848066ebc795b84e5c9bcf99", "committedDate": "2020-10-28T09:58:47Z", "message": "Additional test coverage."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "bd08f5e3a0ff93ee848066ebc795b84e5c9bcf99", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/bd08f5e3a0ff93ee848066ebc795b84e5c9bcf99", "committedDate": "2020-10-28T09:58:47Z", "message": "Additional test coverage."}, "afterCommit": {"oid": "fac6db1e358cf3032c1d76ac382531087ba75c6f", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/fac6db1e358cf3032c1d76ac382531087ba75c6f", "committedDate": "2020-10-28T12:12:31Z", "message": "Additional test coverage."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fac6db1e358cf3032c1d76ac382531087ba75c6f", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/fac6db1e358cf3032c1d76ac382531087ba75c6f", "committedDate": "2020-10-28T12:12:31Z", "message": "Additional test coverage."}, "afterCommit": {"oid": "e53c28242b3d0d16e11854016c0e0c1c47788b24", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/e53c28242b3d0d16e11854016c0e0c1c47788b24", "committedDate": "2020-10-28T16:37:11Z", "message": "Additional test coverage."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e53c28242b3d0d16e11854016c0e0c1c47788b24", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/e53c28242b3d0d16e11854016c0e0c1c47788b24", "committedDate": "2020-10-28T16:37:11Z", "message": "Additional test coverage."}, "afterCommit": {"oid": "d02e5704562bd075c0bdefff197ab27c476429f5", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/d02e5704562bd075c0bdefff197ab27c476429f5", "committedDate": "2020-10-29T09:40:01Z", "message": "Additional test coverage."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "d02e5704562bd075c0bdefff197ab27c476429f5", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/d02e5704562bd075c0bdefff197ab27c476429f5", "committedDate": "2020-10-29T09:40:01Z", "message": "Additional test coverage."}, "afterCommit": {"oid": "451f0862c144b5790a2d97504c2d8e4478bc5195", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/451f0862c144b5790a2d97504c2d8e4478bc5195", "committedDate": "2020-10-29T10:33:16Z", "message": "Additional test coverage."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE5NzI5MDEz", "url": "https://github.com/gridgain/gridgain/pull/1466#pullrequestreview-519729013", "createdAt": "2020-10-29T14:32:32Z", "commit": {"oid": "451f0862c144b5790a2d97504c2d8e4478bc5195"}, "state": "COMMENTED", "comments": {"totalCount": 9, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDozMjozM1rOHqesjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNToxMTo0NlrOHqgnsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMwNTE2NQ==", "bodyText": "It is not implementation, it is configuration.", "url": "https://github.com/gridgain/gridgain/pull/1466#discussion_r514305165", "createdAt": "2020-10-29T14:32:33Z", "author": {"login": "agura"}, "path": "modules/core/src/main/java/org/apache/ignite/configuration/CacheConfiguration.java", "diffHunk": "@@ -419,6 +421,11 @@\n      */\n     private boolean encryptionEnabled;\n \n+    /**\n+     * Cache entry compression implementation. If provided, data in cache will be compressed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "451f0862c144b5790a2d97504c2d8e4478bc5195"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMxMDA2Mw==", "bodyText": "Please, avoid empty comments.", "url": "https://github.com/gridgain/gridgain/pull/1466#discussion_r514310063", "createdAt": "2020-10-29T14:38:39Z", "author": {"login": "agura"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectImpl.java", "diffHunk": "@@ -52,6 +53,9 @@\n  */\n @IgniteCodeGeneratingFail // Fields arr and start should not be generated by MessageCodeGenerator.\n public final class BinaryObjectImpl extends BinaryObjectExImpl implements Externalizable, KeyCacheObject {\n+    /** */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "451f0862c144b5790a2d97504c2d8e4478bc5195"}, "originalPosition": 12}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMxMDE3Mg==", "bodyText": "Please, avoid empty comments.", "url": "https://github.com/gridgain/gridgain/pull/1466#discussion_r514310172", "createdAt": "2020-10-29T14:38:48Z", "author": {"login": "agura"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectImpl.java", "diffHunk": "@@ -62,6 +66,10 @@\n     /** */\n     private byte[] arr;\n \n+    /** */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "451f0862c144b5790a2d97504c2d8e4478bc5195"}, "originalPosition": 22}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMxMTc3OA==", "bodyText": "Here a rule about an empty line after each expression is still valid.", "url": "https://github.com/gridgain/gridgain/pull/1466#discussion_r514311778", "createdAt": "2020-10-29T14:40:48Z", "author": {"login": "agura"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectImpl.java", "diffHunk": "@@ -168,30 +176,86 @@ public BinaryObjectImpl(BinaryContext ctx, byte[] arr, int start) {\n \n     /** {@inheritDoc} */\n     @Override public boolean putValue(ByteBuffer buf) throws IgniteCheckedException {\n-        return putValue(buf, 0, CacheObjectAdapter.objectPutSize(length()));\n+        return putValue(buf, 0, valueBytesLength(null));\n     }\n \n     /** {@inheritDoc} */\n     @Override public int putValue(long addr) throws IgniteCheckedException {\n-        return CacheObjectAdapter.putValue(addr, cacheObjectType(), arr, start, length());\n+        byte type = cacheObjectType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "451f0862c144b5790a2d97504c2d8e4478bc5195"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMxMTgzMw==", "bodyText": "Here a rule about an empty line after each expression is still valid.", "url": "https://github.com/gridgain/gridgain/pull/1466#discussion_r514311833", "createdAt": "2020-10-29T14:40:52Z", "author": {"login": "agura"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectImpl.java", "diffHunk": "@@ -168,30 +176,86 @@ public BinaryObjectImpl(BinaryContext ctx, byte[] arr, int start) {\n \n     /** {@inheritDoc} */\n     @Override public boolean putValue(ByteBuffer buf) throws IgniteCheckedException {\n-        return putValue(buf, 0, CacheObjectAdapter.objectPutSize(length()));\n+        return putValue(buf, 0, valueBytesLength(null));\n     }\n \n     /** {@inheritDoc} */\n     @Override public int putValue(long addr) throws IgniteCheckedException {\n-        return CacheObjectAdapter.putValue(addr, cacheObjectType(), arr, start, length());\n+        byte type = cacheObjectType();\n+        byte[] arr = this.arr;\n+        int len = length();\n+\n+        if (detached()) {\n+            assert compressedArr != null : \"putValue() called before prepareForCache()\";\n+\n+            if (compressedArr.length > 0) {\n+                type = CacheObject.TYPE_BINARY_COMPRESSED;\n+\n+                arr = compressedArr;\n+\n+                len = compressedArr.length;\n+            }\n+        }\n+\n+        return CacheObjectAdapter.putValue(addr, type, arr, start, len);\n     }\n \n     /** {@inheritDoc} */\n     @Override public boolean putValue(final ByteBuffer buf, int off, int len) throws IgniteCheckedException {\n-        return CacheObjectAdapter.putValue(cacheObjectType(), buf, off, len, arr, start);\n+        byte type = cacheObjectType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "451f0862c144b5790a2d97504c2d8e4478bc5195"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyMDI0MQ==", "bodyText": "What if type == TYPE_BINARY_COMPRESSED? Is there any test to verify comparing of compressed keys?", "url": "https://github.com/gridgain/gridgain/pull/1466#discussion_r514320241", "createdAt": "2020-10-29T14:51:21Z", "author": {"login": "agura"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/tree/CacheDataTree.java", "diffHunk": "@@ -461,38 +462,42 @@ private int compareKeys(KeyCacheObject key, final long link) throws IgniteChecke\n                     if (grp.storeCacheIdInDataPage())\n                         addr += 4; // Skip cache id.\n \n-                    final int len = PageUtils.getInt(addr, 0);\n+                    byte type = PageUtils.getByte(addr, 4);\n \n-                    int lenCmp = Integer.compare(len, bytes.length);\n+                    if (type != CacheObject.TYPE_BINARY_COMPRESSED) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "451f0862c144b5790a2d97504c2d8e4478bc5195"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyMjAwNQ==", "bodyText": "Why it is critical if compressionStrategy couldn't be closed? May be close-quite semantic is more suitable here. WDYT?", "url": "https://github.com/gridgain/gridgain/pull/1466#discussion_r514322005", "createdAt": "2020-10-29T14:53:39Z", "author": {"login": "agura"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheGroupContext.java", "diffHunk": "@@ -854,6 +862,15 @@ void stopGroup() {\n         preldr.onKernalStop();\n \n         ctx.io().removeCacheGroupHandlers(grpId);\n+\n+        if (compressionStrategy != null) {\n+            try {\n+                compressionStrategy.close();\n+            }\n+            catch (Exception ex) {\n+                throw new IgniteException(ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "451f0862c144b5790a2d97504c2d8e4478bc5195"}, "originalPosition": 62}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMzMzIzMg==", "bodyText": "It is really unreadable snippet :) What if we just replace usage below like this:\n if (compressionConfiguration != null) {\n            compressionStrategy = CU.entryCompressionStrategies(ctx).get(compressionConfiguration.getClass())\n                .apply(compressionConfiguration);\n\n            compressionStrategy.start(ctx, cfg);\n }", "url": "https://github.com/gridgain/gridgain/pull/1466#discussion_r514333232", "createdAt": "2020-10-29T15:07:27Z", "author": {"login": "agura"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java", "diffHunk": "@@ -2461,6 +2467,21 @@ private CacheGroupContext startCacheGroup(\n         boolean persistenceEnabled = recoveryMode || sharedCtx.localNode().isClient() ? desc.persistenceEnabled() :\n             dataRegion != null && dataRegion.config().isPersistenceEnabled();\n \n+        EntryCompressionStrategy compressionStrategy = null;\n+\n+        Map<Class<? extends EntryCompressionConfiguration>,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "451f0862c144b5790a2d97504c2d8e4478bc5195"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMzNjY5MQ==", "bodyText": "Please, don't use nonNull in such cases. Most code uses val != null and there is no any reason for change this style.\nUse nonNull only as simple lambda-expressions (see corresponding javadoc).", "url": "https://github.com/gridgain/gridgain/pull/1466#discussion_r514336691", "createdAt": "2020-10-29T15:11:46Z", "author": {"login": "agura"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java", "diffHunk": "@@ -2117,6 +2120,29 @@ public static boolean isCacheTemplateName(String cacheName) {\n         return strategies;\n     }\n \n+    /**\n+     * Getting available cache entry compression strategies.\n+     *\n+     * @param kernalCtx Kernal context.\n+     * @return Mapping of configuration class to strategy class.\n+     */\n+    public static Map<Class<? extends EntryCompressionConfiguration>,\n+        IgniteClosure<EntryCompressionConfiguration, EntryCompressionStrategy>>\n+        entryCompressionStrategies(GridKernalContext kernalCtx) {\n+        Map strategies = new HashMap<>();\n+\n+        // Adding strategies from plugins.\n+        EntryCompressionStrategySupplier[] suppliers = kernalCtx.plugins()\n+            .extensions(EntryCompressionStrategySupplier.class);\n+\n+        if (nonNull(suppliers)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "451f0862c144b5790a2d97504c2d8e4478bc5195"}, "originalPosition": 36}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTI0MzYzMjUw", "url": "https://github.com/gridgain/gridgain/pull/1466#pullrequestreview-524363250", "createdAt": "2020-11-05T15:14:32Z", "commit": {"oid": "2443428061ef22c037c86ee82979657fb6a4a85a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNToxNDozMlrOHuH_Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNToxNDozMlrOHuH_Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODEyNzM2Mg==", "bodyText": "Looks like a copy-paste error here: we pass compressKeys flag when preparing value, not key.", "url": "https://github.com/gridgain/gridgain/pull/1466#discussion_r518127362", "createdAt": "2020-11-05T15:14:32Z", "author": {"login": "sergey-chugunov-1985"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheOffheapManagerImpl.java", "diffHunk": "@@ -1879,8 +1886,13 @@ private void invoke0(GridCacheContext cctx, CacheSearchRow row, OffheapInvokeClo\n                     return false;\n \n                 for (GridCacheMvccEntryInfo info : hist) {\n+                    CacheObject val = info.value();\n+\n+                    if (val != null)\n+                        val = val.prepareForCache(coCtx, coCtx.compressKeys());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2443428061ef22c037c86ee82979657fb6a4a85a"}, "originalPosition": 77}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1c952b91bff506f53de6e16c5ed085ea2bbc0ee3", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/1c952b91bff506f53de6e16c5ed085ea2bbc0ee3", "committedDate": "2020-11-11T13:40:24Z", "message": "GG-28240 Allow pluggable entry-level compression.\n\nAlso bump zstd library version."}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "0aaa1b733d985bfef35ed9c02d82010bcd7cc668", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/0aaa1b733d985bfef35ed9c02d82010bcd7cc668", "committedDate": "2020-11-10T12:40:02Z", "message": "TDA fixes phase III"}, "afterCommit": {"oid": "1c952b91bff506f53de6e16c5ed085ea2bbc0ee3", "author": {"user": {"login": "alamar", "name": "Ilya Kaznacheev"}}, "url": "https://github.com/gridgain/gridgain/commit/1c952b91bff506f53de6e16c5ed085ea2bbc0ee3", "committedDate": "2020-11-11T13:40:24Z", "message": "GG-28240 Allow pluggable entry-level compression.\n\nAlso bump zstd library version."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4, "cost": 1, "resetAt": "2021-11-01T14:20:25Z"}}}