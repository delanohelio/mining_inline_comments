{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQ4MDg2ODI1", "number": 1302, "title": "GG-28800  [IGNITE-2890] .NET: Add CacheConfiguration.NodeFilter", "bodyText": "WIP implementation of a NodeFilter", "createdAt": "2020-07-13T08:22:44Z", "url": "https://github.com/gridgain/gridgain/pull/1302", "merged": true, "mergeCommit": {"oid": "367a0231381fd5ad093a57154de7d2e9dc4bb302"}, "closed": true, "closedAt": "2020-10-09T10:59:56Z", "author": {"login": "ashapkin"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc0epoTAFqTQ0NzEwNjkwNA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdQnusBgH2gAyNDQ4MDg2ODI1OmUwZTNjYzA3YTJlOTlmNTIzOTA0N2JhYzEyZTdkZjFlODA2Y2Q5NmY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQ3MTA2OTA0", "url": "https://github.com/gridgain/gridgain/pull/1302#pullrequestreview-447106904", "createdAt": "2020-07-13T09:58:40Z", "commit": {"oid": "f7033f0f859801c46f23e8984cdac6d033c6a7c5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QwOTo1ODo0MVrOGwhoXQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0xM1QxMDoxMjo0MVrOGwiIUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUzNTgzNw==", "bodyText": "I don't think this is a rolling upgrade breaker. This data does not go over the wire.\nAlso, we could keep existing format and just write null/empty values for detached nodes, to minimize changes.", "url": "https://github.com/gridgain/gridgain/pull/1302#discussion_r453535837", "createdAt": "2020-07-13T09:58:41Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Cluster/ClusterNodeImpl.cs", "diffHunk": "@@ -73,23 +76,60 @@ internal class ClusterNodeImpl : IClusterNode\n         /// <param name=\"reader\">The reader.</param>\n         public ClusterNodeImpl(IBinaryRawReader reader)\n         {\n-            var id = reader.ReadGuid();\n+            //C++ breaker.\n+            _isDetached = reader.ReadBoolean();\n+\n+            //If there would be any errors, the cluster will hang.\n+            //Rolling upgrade breaker.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7033f0f859801c46f23e8984cdac6d033c6a7c5"}, "originalPosition": 19}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUzNzkxOA==", "bodyText": "This id is already present in the base class", "url": "https://github.com/gridgain/gridgain/pull/1302#discussion_r453537918", "createdAt": "2020-07-13T10:02:04Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cluster/PlatformClusterNodeFilterImpl.java", "diffHunk": "@@ -29,10 +33,12 @@\n /**\n  * Interop cluster node filter.\n  */\n-public class PlatformClusterNodeFilterImpl extends PlatformAbstractPredicate implements PlatformClusterNodeFilter {\n+public class PlatformClusterNodeFilterImpl extends PlatformAbstractPredicate implements PlatformClusterNodeFilter, Binarylizable {\n     /** */\n     private static final long serialVersionUID = 0L;\n \n+    private int handleId = -1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7033f0f859801c46f23e8984cdac6d033c6a7c5"}, "originalPosition": 20}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUzODk5OA==", "bodyText": "This likely breaks rolling upgrades compatibility, and I'm not sure if we need to override at all.", "url": "https://github.com/gridgain/gridgain/pull/1302#discussion_r453538998", "createdAt": "2020-07-13T10:03:40Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cluster/PlatformClusterNodeFilterImpl.java", "diffHunk": "@@ -80,4 +114,14 @@ public void setIgniteInstance(Ignite ignite) {\n     public Object getInternalPredicate() {\n         return pred;\n     }\n+\n+    @Override\n+    public void writeBinary(BinaryWriter writer) throws BinaryObjectException {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7033f0f859801c46f23e8984cdac6d033c6a7c5"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzUzOTI0Ng==", "bodyText": "Can we call ctx.createClusterNodeFilter instead?", "url": "https://github.com/gridgain/gridgain/pull/1302#discussion_r453539246", "createdAt": "2020-07-13T10:04:06Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/platform/utils/PlatformConfigurationUtils.java", "diffHunk": "@@ -227,6 +231,16 @@ public static CacheConfiguration readCacheConfiguration(BinaryRawReaderEx in) {\n         ccfg.setAffinity(readAffinityFunction(in));\n         ccfg.setExpiryPolicyFactory(readExpiryPolicyFactory(in));\n \n+        if (in.readBoolean())\n+            ccfg.setNodeFilter(readAttributeNodeFilter(in));\n+        else {\n+            Object nativeFilter = in.readObjectDetached();\n+            if (nativeFilter != null) {\n+                PlatformClusterNodeFilterImpl filter = new PlatformClusterNodeFilterImpl(nativeFilter, ctx);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7033f0f859801c46f23e8984cdac6d033c6a7c5"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU0MDQ0MQ==", "bodyText": "We should throw a descriptive exception instead. Using .NET node filter in mixed cluster is not supported. Silently ignoring this will lead to unexpected behavior.", "url": "https://github.com/gridgain/gridgain/pull/1302#discussion_r453540441", "createdAt": "2020-07-13T10:06:09Z", "author": {"login": "ptupitsyn"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/platform/cluster/PlatformClusterNodeFilterImpl.java", "diffHunk": "@@ -48,21 +54,49 @@ public PlatformClusterNodeFilterImpl() {\n      */\n     public PlatformClusterNodeFilterImpl(Object pred, PlatformContext ctx) {\n         super(pred, 0, ctx);\n+\n+        init();\n     }\n \n-    /** {@inheritDoc} */\n-    @Override public boolean apply(ClusterNode clusterNode) {\n+    /* Initializes the cluster node filter */\n+    public void init(){\n         try (PlatformMemory mem = ctx.memory().allocate()) {\n             PlatformOutputStream out = mem.output();\n \n             BinaryRawWriterEx writer = ctx.writer(out);\n \n             writer.writeObject(pred);\n+            out.synchronize();\n+\n+            handleId = ctx.gateway().clusterNodeFilterCreate(mem.pointer());\n+        }\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public boolean apply(ClusterNode clusterNode)  {\n+\n+        if(ctx == null){\n+            return false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7033f0f859801c46f23e8984cdac6d033c6a7c5"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU0MTM1MQ==", "bodyText": "This should be in Apache.Ignite.Core.Cluster namespace / folder.", "url": "https://github.com/gridgain/gridgain/pull/1302#discussion_r453541351", "createdAt": "2020-07-13T10:07:46Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Cluster/AttributeNodeFilter.cs", "diffHunk": "@@ -0,0 +1,113 @@\n+\ufeff/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Impl.Cluster", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7033f0f859801c46f23e8984cdac6d033c6a7c5"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU0MTczMA==", "bodyText": "Everything in Impl should be internal", "url": "https://github.com/gridgain/gridgain/pull/1302#discussion_r453541730", "createdAt": "2020-07-13T10:08:31Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Impl/Cache/NodeFilter.cs", "diffHunk": "@@ -0,0 +1,84 @@\n+\ufeffusing System;\n+using System.Collections.Generic;\n+using System.Linq;\n+using System.Text;\n+\n+namespace Apache.Ignite.Core.Impl.Cache\n+{\n+    using Apache.Ignite.Core.Cache.Store;\n+    using Apache.Ignite.Core.Cluster;\n+    using Apache.Ignite.Core.Common;\n+    using Apache.Ignite.Core.Impl.Binary;\n+    using Apache.Ignite.Core.Impl.Cache.Store;\n+    using Apache.Ignite.Core.Impl.Handle;\n+\n+    public class NodeFilter", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7033f0f859801c46f23e8984cdac6d033c6a7c5"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MzU0NDAxOA==", "bodyText": "Looks like there is no test for initial cache configuration:\n            var igniteCfg = new IgniteConfiguration\n            {\n                CacheConfiguration = new[]\n                {\n                    new CacheConfiguration\n                    {\n                        Name = \"abc\",\n                        NodeFilter = new CustomFilter()\n                    },\n                }\n            };", "url": "https://github.com/gridgain/gridgain/pull/1302#discussion_r453544018", "createdAt": "2020-07-13T10:12:41Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core.Tests/Cache/CacheNodeFilterTest.cs", "diffHunk": "@@ -0,0 +1,311 @@\n+\ufeff/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Tests.Cache\n+{\n+    using System;\n+    using System.Collections.Generic;\n+    using System.IO;\n+    using System.Linq;\n+    using Apache.Ignite.Core.Cache.Configuration;\n+    using Apache.Ignite.Core.Cluster;\n+    using Apache.Ignite.Core.Impl.Cluster;\n+    using NUnit.Framework;\n+\n+    /// <summary>\n+    /// Cache node filter tests.\n+    /// </summary>\n+    [TestFixture]\n+    public class CacheNodeFilterTest\n+    {\n+        /** */\n+        private const string AttrKey2 = \"attr2\";\n+\n+        /**  */\n+        private const int AttrVal2 = 3;\n+\n+        /** */\n+        private const string AttrKey3 = \"my-key\";\n+\n+        /**  */\n+        private const string AttrVal3 = \"my-val\";\n+\n+        /** Grid instances. */\n+        private IIgnite _grid1, _grid2, _grid3;\n+\n+        /// <summary>\n+        ///  Fixture setup.\n+        /// </summary>\n+        [TestFixtureSetUp]\n+        public void TestFixtureSetUp()\n+        {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f7033f0f859801c46f23e8984cdac6d033c6a7c5"}, "originalPosition": 54}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "322f31708e93995804b0dd28594181078c0c12ff", "author": {"user": {"login": "ashapkin", "name": "Aleksandr Shapkin"}}, "url": "https://github.com/gridgain/gridgain/commit/322f31708e93995804b0dd28594181078c0c12ff", "committedDate": "2020-08-23T22:38:19Z", "message": "AttibuteNodeFilter implementation"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f7033f0f859801c46f23e8984cdac6d033c6a7c5", "author": {"user": {"login": "ashapkin", "name": "Aleksandr Shapkin"}}, "url": "https://github.com/gridgain/gridgain/commit/f7033f0f859801c46f23e8984cdac6d033c6a7c5", "committedDate": "2020-07-13T08:20:55Z", "message": "Fix DetachedNode, possible exceptions and AttributeNodeFilter"}, "afterCommit": {"oid": "322f31708e93995804b0dd28594181078c0c12ff", "author": {"user": {"login": "ashapkin", "name": "Aleksandr Shapkin"}}, "url": "https://github.com/gridgain/gridgain/commit/322f31708e93995804b0dd28594181078c0c12ff", "committedDate": "2020-08-23T22:38:19Z", "message": "AttibuteNodeFilter implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7fb17f7ff77169471a8e76a90dc57764f2bb68f9", "author": {"user": {"login": "ashapkin", "name": "Aleksandr Shapkin"}}, "url": "https://github.com/gridgain/gridgain/commit/7fb17f7ff77169471a8e76a90dc57764f2bb68f9", "committedDate": "2020-08-23T23:54:53Z", "message": "Xsd"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNzE2NjU2", "url": "https://github.com/gridgain/gridgain/pull/1302#pullrequestreview-481716656", "createdAt": "2020-09-03T10:44:58Z", "commit": {"oid": "7fb17f7ff77169471a8e76a90dc57764f2bb68f9"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMDo0NDo1OFrOHMg3AQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMDo0NTo1MVrOHMg48g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg4MzMyOQ==", "bodyText": "Extra blank line", "url": "https://github.com/gridgain/gridgain/pull/1302#discussion_r482883329", "createdAt": "2020-09-03T10:44:58Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Cluster/AttributeNodeFilter.cs", "diffHunk": "@@ -0,0 +1,112 @@\n+\ufeff/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Cluster\n+{\n+    using System;\n+    using System.Collections.Generic;\n+    using System.Diagnostics;\n+    using Apache.Ignite.Core.Binary;\n+    using Apache.Ignite.Core.Impl.Common;\n+\n+    /// <summary>\n+    /// Attribute node filter.\n+    ///\n+    /// The filter will evaluate to true if a node has provided attribute set to\n+    /// corresponding values.\n+    ///\n+    /// You can set user attribute using <see cref=\"IgniteConfiguration.UserAttributes\"/> property. \n+    /// </summary>\n+    public sealed class AttributeNodeFilter : IClusterNodeFilter\n+    {\n+        /// <summary>\n+        /// Attributes dictionary match.\n+        /// </summary>\n+        public IDictionary<string, object> Attributes { get; set; }\n+\n+        /// <summary>\n+        /// Initializes a new instance of <see cref=\"AttributeNodeFilter\"/>.\n+        /// </summary>\n+        public AttributeNodeFilter()\n+        {\n+        }\n+\n+        /// <summary>\n+        /// Initializes a new instance of <see cref=\"AttributeNodeFilter\"/>.\n+        /// </summary>\n+        /// <param name=\"attrName\">Attribute name.</param>\n+        /// <param name=\"attrValue\">Attribute value.</param>\n+        public AttributeNodeFilter(string attrName, object attrValue)\n+        {\n+            IgniteArgumentCheck.NotNullOrEmpty(attrName, \"attrName\");\n+\n+            Attributes = new Dictionary<string, object>(1)\n+            {\n+                {attrName, attrValue}\n+            };\n+        }\n+", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fb17f7ff77169471a8e76a90dc57764f2bb68f9"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg4MzQzNw==", "bodyText": "// No-op.", "url": "https://github.com/gridgain/gridgain/pull/1302#discussion_r482883437", "createdAt": "2020-09-03T10:45:07Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Cluster/AttributeNodeFilter.cs", "diffHunk": "@@ -0,0 +1,112 @@\n+\ufeff/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Cluster\n+{\n+    using System;\n+    using System.Collections.Generic;\n+    using System.Diagnostics;\n+    using Apache.Ignite.Core.Binary;\n+    using Apache.Ignite.Core.Impl.Common;\n+\n+    /// <summary>\n+    /// Attribute node filter.\n+    ///\n+    /// The filter will evaluate to true if a node has provided attribute set to\n+    /// corresponding values.\n+    ///\n+    /// You can set user attribute using <see cref=\"IgniteConfiguration.UserAttributes\"/> property. \n+    /// </summary>\n+    public sealed class AttributeNodeFilter : IClusterNodeFilter\n+    {\n+        /// <summary>\n+        /// Attributes dictionary match.\n+        /// </summary>\n+        public IDictionary<string, object> Attributes { get; set; }\n+\n+        /// <summary>\n+        /// Initializes a new instance of <see cref=\"AttributeNodeFilter\"/>.\n+        /// </summary>\n+        public AttributeNodeFilter()\n+        {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fb17f7ff77169471a8e76a90dc57764f2bb68f9"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg4MzgyNg==", "bodyText": "Attributes can be set to null by the user", "url": "https://github.com/gridgain/gridgain/pull/1302#discussion_r482883826", "createdAt": "2020-09-03T10:45:51Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Cluster/AttributeNodeFilter.cs", "diffHunk": "@@ -0,0 +1,112 @@\n+\ufeff/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Cluster\n+{\n+    using System;\n+    using System.Collections.Generic;\n+    using System.Diagnostics;\n+    using Apache.Ignite.Core.Binary;\n+    using Apache.Ignite.Core.Impl.Common;\n+\n+    /// <summary>\n+    /// Attribute node filter.\n+    ///\n+    /// The filter will evaluate to true if a node has provided attribute set to\n+    /// corresponding values.\n+    ///\n+    /// You can set user attribute using <see cref=\"IgniteConfiguration.UserAttributes\"/> property. \n+    /// </summary>\n+    public sealed class AttributeNodeFilter : IClusterNodeFilter\n+    {\n+        /// <summary>\n+        /// Attributes dictionary match.\n+        /// </summary>\n+        public IDictionary<string, object> Attributes { get; set; }\n+\n+        /// <summary>\n+        /// Initializes a new instance of <see cref=\"AttributeNodeFilter\"/>.\n+        /// </summary>\n+        public AttributeNodeFilter()\n+        {\n+        }\n+\n+        /// <summary>\n+        /// Initializes a new instance of <see cref=\"AttributeNodeFilter\"/>.\n+        /// </summary>\n+        /// <param name=\"attrName\">Attribute name.</param>\n+        /// <param name=\"attrValue\">Attribute value.</param>\n+        public AttributeNodeFilter(string attrName, object attrValue)\n+        {\n+            IgniteArgumentCheck.NotNullOrEmpty(attrName, \"attrName\");\n+\n+            Attributes = new Dictionary<string, object>(1)\n+            {\n+                {attrName, attrValue}\n+            };\n+        }\n+\n+\n+        /** <inheritdoc /> */\n+        public bool Invoke(IClusterNode node)\n+        {\n+            throw new NotSupportedException(\"Should not be called from .NET side.\");\n+        }\n+\n+        /// <summary>\n+        /// Initializes a new instance of <see cref=\"AttributeNodeFilter\"/> from a binary reader.\n+        /// </summary>\n+        /// <param name=\"reader\">Reader.</param>\n+        internal AttributeNodeFilter(IBinaryRawReader reader)\n+        {\n+            IgniteArgumentCheck.NotNull(reader, \"reader\");\n+\n+            int count = reader.ReadInt();\n+\n+            Debug.Assert(count > 0);\n+\n+            Attributes = new Dictionary<string, object>(count);\n+\n+            while (count > 0)\n+            {\n+                string attrKey = reader.ReadString();\n+                object attrVal = reader.ReadObject<object>();\n+\n+                Debug.Assert(attrKey != null);\n+\n+                Attributes[attrKey] = attrVal;\n+\n+                count--;\n+            }\n+        }\n+\n+        /// <summary>\n+        /// Writes the instance to a writer.\n+        /// </summary>\n+        /// <param name=\"writer\">Writer.</param>\n+        internal void Write(IBinaryRawWriter writer)\n+        {\n+            writer.WriteInt(Attributes.Count);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fb17f7ff77169471a8e76a90dc57764f2bb68f9"}, "originalPosition": 102}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDgxNzE3NjYw", "url": "https://github.com/gridgain/gridgain/pull/1302#pullrequestreview-481717660", "createdAt": "2020-09-03T10:46:21Z", "commit": {"oid": "7fb17f7ff77169471a8e76a90dc57764f2bb68f9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMDo0NjoyMVrOHMg6LA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0wM1QxMDo0NjoyMVrOHMg6LA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4Mjg4NDE0MA==", "bodyText": "Please add a test for this case", "url": "https://github.com/gridgain/gridgain/pull/1302#discussion_r482884140", "createdAt": "2020-09-03T10:46:21Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Cache/Configuration/CacheConfiguration.cs", "diffHunk": "@@ -447,6 +450,26 @@ internal void Write(BinaryWriter writer)\n             AffinityFunctionSerializer.Write(writer, AffinityFunction);\n             ExpiryPolicySerializer.WritePolicyFactory(writer, ExpiryPolicyFactory);\n \n+            if (NodeFilter != null)\n+            {\n+                writer.WriteBoolean(true);\n+\n+                var attributeNodeFilter = NodeFilter as AttributeNodeFilter;\n+                if (attributeNodeFilter == null)\n+                {\n+                    throw new NotSupportedException(string.Format(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7fb17f7ff77169471a8e76a90dc57764f2bb68f9"}, "originalPosition": 37}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "61af126dae78e0aa6d84d607584ebb51d094bdd6", "author": {"user": {"login": "ashapkin", "name": "Aleksandr Shapkin"}}, "url": "https://github.com/gridgain/gridgain/commit/61af126dae78e0aa6d84d607584ebb51d094bdd6", "committedDate": "2020-09-20T17:18:21Z", "message": "Fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b5641b30e74c1fd1d6fd720038ac7e5ce9f983f8", "author": {"user": {"login": "ashapkin", "name": "Aleksandr Shapkin"}}, "url": "https://github.com/gridgain/gridgain/commit/b5641b30e74c1fd1d6fd720038ac7e5ce9f983f8", "committedDate": "2020-09-20T17:34:40Z", "message": "Merge remote-tracking branch 'gridgain-ce/master' into gg-28800"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "42c93b5bc5f79e74cf30e7e8e91e15ab8cbe2c83", "author": {"user": {"login": "ashapkin", "name": "Aleksandr Shapkin"}}, "url": "https://github.com/gridgain/gridgain/commit/42c93b5bc5f79e74cf30e7e8e91e15ab8cbe2c83", "committedDate": "2020-09-23T22:43:40Z", "message": "TC fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "51c80cd9bd310089df30c707aa1c05df949c75d3", "author": {"user": {"login": "ashapkin", "name": "Aleksandr Shapkin"}}, "url": "https://github.com/gridgain/gridgain/commit/51c80cd9bd310089df30c707aa1c05df949c75d3", "committedDate": "2020-09-24T09:14:17Z", "message": "Fix line separator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3f279bd1a7cb1075c268794bb5bc559dcdaa9704", "author": {"user": {"login": "ashapkin", "name": "Aleksandr Shapkin"}}, "url": "https://github.com/gridgain/gridgain/commit/3f279bd1a7cb1075c268794bb5bc559dcdaa9704", "committedDate": "2020-09-24T11:24:51Z", "message": "Fix tests"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk1ODA4NzY3", "url": "https://github.com/gridgain/gridgain/pull/1302#pullrequestreview-495808767", "createdAt": "2020-09-24T17:46:05Z", "commit": {"oid": "3f279bd1a7cb1075c268794bb5bc559dcdaa9704"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzo0NjowNVrOHXl5TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yNFQxNzo1Mjo1MlrOHXmIfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUwMDE3Mg==", "bodyText": "The filter will evaluate to true if a node has all specified attributes with corresponding values", "url": "https://github.com/gridgain/gridgain/pull/1302#discussion_r494500172", "createdAt": "2020-09-24T17:46:05Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Cluster/AttributeNodeFilter.cs", "diffHunk": "@@ -0,0 +1,129 @@\n+\ufeff/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Cluster\n+{\n+    using System;\n+    using System.Collections.Generic;\n+    using System.Diagnostics;\n+    using System.Diagnostics.CodeAnalysis;\n+    using Apache.Ignite.Core.Binary;\n+    using Apache.Ignite.Core.Impl.Common;\n+\n+    /// <summary>\n+    /// Attribute node filter.\n+    ///\n+    /// The filter will evaluate to true if a node has provided attribute set to", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f279bd1a7cb1075c268794bb5bc559dcdaa9704"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUwMDM3OA==", "bodyText": "/// <para />", "url": "https://github.com/gridgain/gridgain/pull/1302#discussion_r494500378", "createdAt": "2020-09-24T17:46:29Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Cluster/AttributeNodeFilter.cs", "diffHunk": "@@ -0,0 +1,129 @@\n+\ufeff/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Cluster\n+{\n+    using System;\n+    using System.Collections.Generic;\n+    using System.Diagnostics;\n+    using System.Diagnostics.CodeAnalysis;\n+    using Apache.Ignite.Core.Binary;\n+    using Apache.Ignite.Core.Impl.Common;\n+\n+    /// <summary>\n+    /// Attribute node filter.\n+    ///", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f279bd1a7cb1075c268794bb5bc559dcdaa9704"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUwMDQ0OQ==", "bodyText": "/// <para />", "url": "https://github.com/gridgain/gridgain/pull/1302#discussion_r494500449", "createdAt": "2020-09-24T17:46:36Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Cluster/AttributeNodeFilter.cs", "diffHunk": "@@ -0,0 +1,129 @@\n+\ufeff/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Cluster\n+{\n+    using System;\n+    using System.Collections.Generic;\n+    using System.Diagnostics;\n+    using System.Diagnostics.CodeAnalysis;\n+    using Apache.Ignite.Core.Binary;\n+    using Apache.Ignite.Core.Impl.Common;\n+\n+    /// <summary>\n+    /// Attribute node filter.\n+    ///\n+    /// The filter will evaluate to true if a node has provided attribute set to\n+    /// corresponding values.\n+    ///", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f279bd1a7cb1075c268794bb5bc559dcdaa9704"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUwMDczNg==", "bodyText": "You can set node attributes using ...", "url": "https://github.com/gridgain/gridgain/pull/1302#discussion_r494500736", "createdAt": "2020-09-24T17:47:05Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Cluster/AttributeNodeFilter.cs", "diffHunk": "@@ -0,0 +1,129 @@\n+\ufeff/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+namespace Apache.Ignite.Core.Cluster\n+{\n+    using System;\n+    using System.Collections.Generic;\n+    using System.Diagnostics;\n+    using System.Diagnostics.CodeAnalysis;\n+    using Apache.Ignite.Core.Binary;\n+    using Apache.Ignite.Core.Impl.Common;\n+\n+    /// <summary>\n+    /// Attribute node filter.\n+    ///\n+    /// The filter will evaluate to true if a node has provided attribute set to\n+    /// corresponding values.\n+    ///\n+    /// You can set user attribute using <see cref=\"IgniteConfiguration.UserAttributes\"/> property. ", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f279bd1a7cb1075c268794bb5bc559dcdaa9704"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUwMzE5OA==", "bodyText": "Gets or sets the cluster node filter. Cache will be started only on nodes that match the filter.", "url": "https://github.com/gridgain/gridgain/pull/1302#discussion_r494503198", "createdAt": "2020-09-24T17:51:16Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Cache/Configuration/CacheConfiguration.cs", "diffHunk": "@@ -948,5 +971,12 @@ public string MemoryPolicyName\n         /// </summary>\n         [IgniteExperimental]\n         public PlatformCacheConfiguration PlatformCacheConfiguration { get; set; }\n+\n+        /// <summary>\n+        /// Cluster node filter.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f279bd1a7cb1075c268794bb5bc559dcdaa9704"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5NDUwNDA2MA==", "bodyText": "attributeNodeFilter.Write(writer);", "url": "https://github.com/gridgain/gridgain/pull/1302#discussion_r494504060", "createdAt": "2020-09-24T17:52:52Z", "author": {"login": "ptupitsyn"}, "path": "modules/platforms/dotnet/Apache.Ignite.Core/Cache/Configuration/CacheConfiguration.cs", "diffHunk": "@@ -447,6 +450,26 @@ internal void Write(BinaryWriter writer)\n             AffinityFunctionSerializer.Write(writer, AffinityFunction);\n             ExpiryPolicySerializer.WritePolicyFactory(writer, ExpiryPolicyFactory);\n \n+            if (NodeFilter != null)\n+            {\n+                writer.WriteBoolean(true);\n+\n+                var attributeNodeFilter = NodeFilter as AttributeNodeFilter;\n+                if (attributeNodeFilter == null)\n+                {\n+                    throw new NotSupportedException(string.Format(\n+                        \"Unsupported CacheConfiguration.NodeFilter: '{0}'. \" +\n+                        \"Only predefined implementations are supported: '{1}'\",\n+                        NodeFilter.GetType().Name, typeof(AttributeNodeFilter).Name));\n+                }\n+\n+                ((AttributeNodeFilter) NodeFilter).Write(writer);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3f279bd1a7cb1075c268794bb5bc559dcdaa9704"}, "originalPosition": 43}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c334080f5833d720d5ba74a6cfc85ef8e5cad79", "author": {"user": {"login": "ashapkin", "name": "Aleksandr Shapkin"}}, "url": "https://github.com/gridgain/gridgain/commit/8c334080f5833d720d5ba74a6cfc85ef8e5cad79", "committedDate": "2020-10-07T16:38:10Z", "message": "Fix xml docs"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTA0MTYxODM5", "url": "https://github.com/gridgain/gridgain/pull/1302#pullrequestreview-504161839", "createdAt": "2020-10-07T18:34:35Z", "commit": {"oid": "8c334080f5833d720d5ba74a6cfc85ef8e5cad79"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a420f635a2e258c2c01daa2fe0b962f3cd760b1b", "author": {"user": {"login": "ashapkin", "name": "Aleksandr Shapkin"}}, "url": "https://github.com/gridgain/gridgain/commit/a420f635a2e258c2c01daa2fe0b962f3cd760b1b", "committedDate": "2020-10-08T10:39:43Z", "message": "Merge remote-tracking branch 'gridgain-ce/master' into gg-28800"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e0e3cc07a2e99f5239047bac12e7df1e806cd96f", "author": {"user": {"login": "ashapkin", "name": "Aleksandr Shapkin"}}, "url": "https://github.com/gridgain/gridgain/commit/e0e3cc07a2e99f5239047bac12e7df1e806cd96f", "committedDate": "2020-10-08T20:37:19Z", "message": "Merge remote-tracking branch 'gridgain-ce/master' into gg-28800"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4152, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}