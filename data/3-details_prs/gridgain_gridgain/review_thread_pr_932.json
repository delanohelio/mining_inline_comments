{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2NDgyNzkw", "number": 932, "reviewThreads": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwODozNTo1OFrODgmoZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwODo0MzozNlrODgmxBQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NTEzOTU5OnYy", "diffSide": "RIGHT", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwODozNTo1OFrOFq5RGA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwODozNTo1OFrOFq5RGA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUyMjc3Ng==", "bodyText": "Objects.requireNonNull(fName);\nObjects.requireNonNull(cls);", "url": "https://github.com/gridgain/gridgain/pull/932#discussion_r380522776", "createdAt": "2020-02-18T08:35:58Z", "author": {"login": "AMashenkov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/IgniteH2Indexing.java", "diffHunk": "@@ -3157,4 +3162,38 @@ public LongRunningQueryManager longRunningQueries() {\n \n         return idx == null ? 0 : idx.size();\n     }\n+\n+    /**\n+     * Register predefined custom aggregate functions.\n+     *\n+     * @throws IgniteCheckedException If failed.\n+     */\n+    private void registerAggregateFunctions() throws IgniteCheckedException {\n+        registerAggregateFunction(GridFirstValueFunction.NAME, GridFirstValueFunction.class);\n+        registerAggregateFunction(GridLastValueFunction.NAME, GridLastValueFunction.class);\n+    }\n+\n+    /**\n+     * Register custom aggregate function.\n+     *\n+     * @param fnName SQL function name.\n+     * @param cls Function implementation class.\n+     * @throws IgniteCheckedException If failed.\n+     */\n+    public void registerAggregateFunction(String fnName,\n+        Class<? extends AggregateFunction> cls) throws IgniteCheckedException {\n+        if (fnName == null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2920dcb3358b60d7fa1f5a2f79a3b83438e15d3"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NTE0MTMxOnYy", "diffSide": "RIGHT", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridAggregateOrderedFunction.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwODozNjozNFrOFq5SKQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwOTowOTozMVrOFq6S8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUyMzA0OQ==", "bodyText": "@param comparator", "url": "https://github.com/gridgain/gridgain/pull/932#discussion_r380523049", "createdAt": "2020-02-18T08:36:34Z", "author": {"login": "AMashenkov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridAggregateOrderedFunction.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.query.h2.sql;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Comparator;\n+import org.h2.api.AggregateFunction;\n+\n+/**\n+ *  SQL aggregate function to select the first or last value in the sorted group.\n+ */\n+public class GridAggregateOrderedFunction implements AggregateFunction {\n+    /** */\n+    protected Object[] currentVal;\n+\n+    /** Ascending order. */\n+    protected boolean asc;\n+\n+    /** Nulls-last comparator. */\n+    protected Comparator<? super Comparable> comparator;\n+\n+    /**\n+     * @param asc ascending order.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2920dcb3358b60d7fa1f5a2f79a3b83438e15d3"}, "originalPosition": 38}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUzOTYzNQ==", "bodyText": "Fixed", "url": "https://github.com/gridgain/gridgain/pull/932#discussion_r380539635", "createdAt": "2020-02-18T09:09:31Z", "author": {"login": "pvinokurov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridAggregateOrderedFunction.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.query.h2.sql;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.Comparator;\n+import org.h2.api.AggregateFunction;\n+\n+/**\n+ *  SQL aggregate function to select the first or last value in the sorted group.\n+ */\n+public class GridAggregateOrderedFunction implements AggregateFunction {\n+    /** */\n+    protected Object[] currentVal;\n+\n+    /** Ascending order. */\n+    protected boolean asc;\n+\n+    /** Nulls-last comparator. */\n+    protected Comparator<? super Comparable> comparator;\n+\n+    /**\n+     * @param asc ascending order.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUyMzA0OQ=="}, "originalCommit": {"oid": "b2920dcb3358b60d7fa1f5a2f79a3b83438e15d3"}, "originalPosition": 38}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NTE1Njg4OnYy", "diffSide": "RIGHT", "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwODo0MjowM1rOFq5b9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxNjoyOTo0MFrOFrJapQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUyNTU1Ng==", "bodyText": "Why UNKNOWN_FUNCTION is used as a type for user aggregate functions?", "url": "https://github.com/gridgain/gridgain/pull/932#discussion_r380525556", "createdAt": "2020-02-18T08:42:03Z", "author": {"login": "AMashenkov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java", "diffHunk": "@@ -1860,6 +1860,9 @@ private void splitAggregate(\n \n                 break;\n \n+            case UNKNOWN_FUNCTION:", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2920dcb3358b60d7fa1f5a2f79a3b83438e15d3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU2MDgzOQ==", "bodyText": "UNKNOWN_FUNCTION is used for custom functions.\nThe idea is to use UNKNOWN_FUNCTION for all custom functions including aggregate.\n@tledkov-gridgain, Does it make sense?", "url": "https://github.com/gridgain/gridgain/pull/932#discussion_r380560839", "createdAt": "2020-02-18T09:46:17Z", "author": {"login": "pvinokurov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java", "diffHunk": "@@ -1860,6 +1860,9 @@ private void splitAggregate(\n \n                 break;\n \n+            case UNKNOWN_FUNCTION:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUyNTU1Ng=="}, "originalCommit": {"oid": "b2920dcb3358b60d7fa1f5a2f79a3b83438e15d3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDU3NjA5Mg==", "bodyText": "Can this break non-aggregate functions?\nDo we have a test for non-collocated case using non-aggregate custom functions?", "url": "https://github.com/gridgain/gridgain/pull/932#discussion_r380576092", "createdAt": "2020-02-18T10:12:29Z", "author": {"login": "AMashenkov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java", "diffHunk": "@@ -1860,6 +1860,9 @@ private void splitAggregate(\n \n                 break;\n \n+            case UNKNOWN_FUNCTION:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUyNTU1Ng=="}, "originalCommit": {"oid": "b2920dcb3358b60d7fa1f5a2f79a3b83438e15d3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDcxMjUzMA==", "bodyText": "It can't break non-aggregate functions since they don't participate in map/reduce scenario.", "url": "https://github.com/gridgain/gridgain/pull/932#discussion_r380712530", "createdAt": "2020-02-18T14:39:47Z", "author": {"login": "pvinokurov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java", "diffHunk": "@@ -1860,6 +1860,9 @@ private void splitAggregate(\n \n                 break;\n \n+            case UNKNOWN_FUNCTION:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUyNTU1Ng=="}, "originalCommit": {"oid": "b2920dcb3358b60d7fa1f5a2f79a3b83438e15d3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDc4NzM2NQ==", "bodyText": "There is test IgniteCacheAbstractQuerySelfTest#testUserDefinedFunction for custom functions", "url": "https://github.com/gridgain/gridgain/pull/932#discussion_r380787365", "createdAt": "2020-02-18T16:29:40Z", "author": {"login": "pvinokurov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/sql/GridSqlQuerySplitter.java", "diffHunk": "@@ -1860,6 +1860,9 @@ private void splitAggregate(\n \n                 break;\n \n+            case UNKNOWN_FUNCTION:", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUyNTU1Ng=="}, "originalCommit": {"oid": "b2920dcb3358b60d7fa1f5a2f79a3b83438e15d3"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NTE2MTY1OnYy", "diffSide": "RIGHT", "path": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/IgniteSqlCustomAggregationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwODo0MzozNlrOFq5e1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQwODo0MzozNlrOFq5e1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDUyNjI5Mw==", "bodyText": "Let's rename \"lists\" -> \"rows\"", "url": "https://github.com/gridgain/gridgain/pull/932#discussion_r380526293", "createdAt": "2020-02-18T08:43:36Z", "author": {"login": "AMashenkov"}, "path": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/IgniteSqlCustomAggregationTest.java", "diffHunk": "@@ -0,0 +1,348 @@\n+/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.query;\n+\n+import java.sql.Connection;\n+import java.sql.SQLException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.Callable;\n+import java.util.stream.Collectors;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.cache.CacheMode;\n+import org.apache.ignite.cache.affinity.AffinityKeyMapped;\n+import org.apache.ignite.cache.query.SqlFieldsQuery;\n+import org.apache.ignite.cache.query.annotations.QuerySqlField;\n+import org.apache.ignite.configuration.CacheConfiguration;\n+import org.apache.ignite.configuration.IgniteConfiguration;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.processors.cache.index.AbstractIndexingCommonTest;\n+import org.apache.ignite.internal.processors.query.h2.IgniteH2Indexing;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.h2.api.AggregateFunction;\n+import org.h2.jdbc.JdbcSQLSyntaxErrorException;\n+import org.junit.Test;\n+\n+/**\n+ * Tests for registration custom aggregation functions.\n+ */\n+public class IgniteSqlCustomAggregationTest extends AbstractIndexingCommonTest {\n+    /** */\n+    private static final String CACHE_NAME = \"cache\";\n+\n+    /** {@inheritDoc} */\n+    @Override protected IgniteConfiguration getConfiguration(String igniteInstanceName) throws Exception {\n+        IgniteConfiguration cfg = super.getConfiguration(igniteInstanceName);\n+\n+        CacheConfiguration<PersonKey, Person> cacheCfg = new CacheConfiguration<PersonKey, Person>(CACHE_NAME)\n+            .setIndexedTypes(PersonKey.class, Person.class)\n+            .setCacheMode(CacheMode.PARTITIONED)\n+            .setBackups(0);\n+\n+        cfg.setCacheConfiguration(cacheCfg);\n+\n+        return cfg;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTest() throws Exception {\n+        super.beforeTest();\n+\n+        startGrids(3);\n+        startClientGrid(3);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTest() throws Exception {\n+        super.afterTest();\n+\n+        stopAllGrids(false);\n+    }\n+\n+    /**\n+     * @throws Exception If error.\n+     */\n+    @Test\n+    public void testAggregateFunctionsCollocated() throws Exception {\n+        IgniteEx ignite = grid(3);\n+\n+        IgniteCache<PersonKey, Person> cache = ignite.cache(CACHE_NAME);\n+\n+        loadCacheWithoutNullValues(cache);\n+\n+        List<List<?>> lists = cache.query(new SqlFieldsQuery(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b2920dcb3358b60d7fa1f5a2f79a3b83438e15d3"}, "originalPosition": 88}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3129, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}