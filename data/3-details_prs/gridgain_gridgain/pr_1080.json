{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDA0OTQxMTcw", "number": 1080, "title": "GG-24028: Implement query history action.", "bodyText": "", "createdAt": "2020-04-17T06:09:19Z", "url": "https://github.com/gridgain/gridgain/pull/1080", "merged": true, "mergeCommit": {"oid": "d317adb109824e7d818471dcfcf3c0d130ab558b"}, "closed": true, "closedAt": "2020-04-22T16:10:58Z", "author": {"login": "somjik-api"}, "timelineItems": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcYbAD1AH2gAyNDA0OTQxMTcwOjRiZjc1YjVkMGVmMDE1YTU1NjIyMjVlZjMyMjI1OTQ5MmU2ZjgyYWU=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcaKkXUgH2gAyNDA0OTQxMTcwOjk3OThlNDU0ZWZkN2NmYmU0YTg2YmE5Mzg0ZjQ2NmQ1NjU5YmM5OTY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "4bf75b5d0ef015a5562225ef322259492e6f82ae", "author": {"user": null}, "url": "https://github.com/gridgain/gridgain/commit/4bf75b5d0ef015a5562225ef322259492e6f82ae", "committedDate": "2020-04-17T06:07:46Z", "message": "GG-24028: Implement query history action."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk1MzY5MTg0", "url": "https://github.com/gridgain/gridgain/pull/1080#pullrequestreview-395369184", "createdAt": "2020-04-17T11:17:51Z", "commit": {"oid": "4bf75b5d0ef015a5562225ef322259492e6f82ae"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMToxNzo1MVrOGHKCZQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0xN1QxMToyNTo1NVrOGHKQFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE1NzY2OQ==", "bodyText": "Lets just check for SCAN", "url": "https://github.com/gridgain/gridgain/pull/1080#discussion_r410157669", "createdAt": "2020-04-17T11:17:51Z", "author": {"login": "akuznetsov-gridgain"}, "path": "modules/management-console-agent/src/main/java/org/apache/ignite/internal/agent/action/query/QueryHistoryMetricsCollectorTask.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.agent.action.query;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.compute.ComputeJob;\n+import org.apache.ignite.compute.ComputeJobAdapter;\n+import org.apache.ignite.compute.ComputeJobResult;\n+import org.apache.ignite.compute.ComputeTaskAdapter;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.agent.dto.action.query.QueryDetailMetrics;\n+import org.apache.ignite.internal.processors.cache.GridCacheProcessor;\n+import org.apache.ignite.internal.processors.cache.query.GridCacheQueryDetailMetricsAdapter;\n+import org.apache.ignite.internal.processors.cache.query.GridCacheQueryDetailMetricsKey;\n+import org.apache.ignite.internal.processors.query.GridQueryIndexing;\n+import org.apache.ignite.internal.processors.query.QueryHistoryMetrics;\n+import org.apache.ignite.internal.processors.query.h2.IgniteH2Indexing;\n+import org.apache.ignite.resources.IgniteInstanceResource;\n+\n+import static java.util.function.Function.identity;\n+import static java.util.stream.Collectors.toList;\n+import static java.util.stream.Collectors.toMap;\n+import static org.apache.ignite.internal.processors.cache.GridCacheUtils.isSystemCache;\n+import static org.apache.ignite.internal.processors.cache.query.GridCacheQueryType.SQL;\n+import static org.apache.ignite.internal.processors.cache.query.GridCacheQueryType.SQL_FIELDS;\n+\n+/**\n+ * Query history metrics collector task.\n+ */\n+public class QueryHistoryMetricsCollectorTask extends ComputeTaskAdapter<Long, Collection<QueryDetailMetrics>> {\n+    /** {@inheritDoc} */\n+    @Override public Map<? extends ComputeJob, ClusterNode> map(List<ClusterNode> subgrid, Long arg) throws IgniteException {\n+       return subgrid.stream().collect(toMap(n -> new QueryHistoryMetricsCollectorJob(arg), identity()));\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public Collection<QueryDetailMetrics> reduce(List<ComputeJobResult> results) throws IgniteException {\n+        Map<GridCacheQueryDetailMetricsKey, GridCacheQueryDetailMetricsAdapter> taskRes = new HashMap<>();\n+\n+        for (ComputeJobResult res : results) {\n+            if (res.getException() != null)\n+                throw res.getException();\n+\n+            res.<Map<GridCacheQueryDetailMetricsKey, GridCacheQueryDetailMetricsAdapter>>getData()\n+                .forEach((key, value) -> taskRes.merge(key, value, GridCacheQueryDetailMetricsAdapter::aggregate));\n+        }\n+\n+        return taskRes.values().stream()\n+            .map(this::mapMetric)\n+            .collect(toList());\n+    }\n+\n+    /**\n+     * @param m Metrics adapter.\n+     * @return Query detail metrics.\n+     */\n+    private QueryDetailMetrics mapMetric(GridCacheQueryDetailMetricsAdapter m) {\n+        return new QueryDetailMetrics()\n+            .setQuery(m.query())\n+            .setQueryType(m.queryType())\n+            .setExecutions(m.executions())\n+            .setFailures(m.failures())\n+            .setLastStartTime(m.lastStartTime())\n+            .setCompletions(m.completions())\n+            .setCache(m.cache())\n+            .setMaxTime(m.maximumTime())\n+            .setMinTime(m.minimumTime())\n+            .setTotalTime(m.totalTime());\n+    }\n+\n+    /**\n+     * Query history metrics collector job.\n+     */\n+    private static class QueryHistoryMetricsCollectorJob extends ComputeJobAdapter {\n+        /** Ignite. */\n+        @IgniteInstanceResource\n+        private IgniteEx ignite;\n+\n+        /**\n+         * @param arg Argument.\n+         */\n+        public QueryHistoryMetricsCollectorJob(Long arg) {\n+            setArguments(arg);\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public Map<GridCacheQueryDetailMetricsKey, GridCacheQueryDetailMetricsAdapter> execute() {\n+            long since = argument(0);\n+\n+            GridQueryIndexing indexing = ignite.context().query().getIndexing();\n+\n+            GridCacheProcessor cacheProc = ignite.context().cache();\n+\n+            Stream<GridCacheQueryDetailMetricsAdapter> cacheMetricsStream = cacheProc.cacheNames().stream()\n+                .filter(name -> !isSystemCache(name))\n+                .map(cacheProc::cache)\n+                .filter(cache -> cache != null && cache.context().started())\n+                .flatMap(cache -> cache.context().queries().detailMetrics().stream())\n+                .filter(m -> m.lastStartTime() > since)\n+                .filter(m -> m.key().getQueryType() != SQL || m.key().getQueryType() != SQL_FIELDS);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bf75b5d0ef015a5562225ef322259492e6f82ae"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMDE2MTE3Mw==", "bodyText": "Lets create issue for universal way to pass task arguments with support when cluster contains nodes of different versions. We can use IgniteDataTransferObject or Map<String, Object> for example.", "url": "https://github.com/gridgain/gridgain/pull/1080#discussion_r410161173", "createdAt": "2020-04-17T11:25:55Z", "author": {"login": "akuznetsov-gridgain"}, "path": "modules/management-console-agent/src/main/java/org/apache/ignite/internal/agent/action/query/QueryHistoryMetricsCollectorTask.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.agent.action.query;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.compute.ComputeJob;\n+import org.apache.ignite.compute.ComputeJobAdapter;\n+import org.apache.ignite.compute.ComputeJobResult;\n+import org.apache.ignite.compute.ComputeTaskAdapter;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.agent.dto.action.query.QueryDetailMetrics;\n+import org.apache.ignite.internal.processors.cache.GridCacheProcessor;\n+import org.apache.ignite.internal.processors.cache.query.GridCacheQueryDetailMetricsAdapter;\n+import org.apache.ignite.internal.processors.cache.query.GridCacheQueryDetailMetricsKey;\n+import org.apache.ignite.internal.processors.query.GridQueryIndexing;\n+import org.apache.ignite.internal.processors.query.QueryHistoryMetrics;\n+import org.apache.ignite.internal.processors.query.h2.IgniteH2Indexing;\n+import org.apache.ignite.resources.IgniteInstanceResource;\n+\n+import static java.util.function.Function.identity;\n+import static java.util.stream.Collectors.toList;\n+import static java.util.stream.Collectors.toMap;\n+import static org.apache.ignite.internal.processors.cache.GridCacheUtils.isSystemCache;\n+import static org.apache.ignite.internal.processors.cache.query.GridCacheQueryType.SQL;\n+import static org.apache.ignite.internal.processors.cache.query.GridCacheQueryType.SQL_FIELDS;\n+\n+/**\n+ * Query history metrics collector task.\n+ */\n+public class QueryHistoryMetricsCollectorTask extends ComputeTaskAdapter<Long, Collection<QueryDetailMetrics>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bf75b5d0ef015a5562225ef322259492e6f82ae"}, "originalPosition": 50}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4187424e5b49aa92426f2f607da98443672bae38", "author": {"user": null}, "url": "https://github.com/gridgain/gridgain/commit/4187424e5b49aa92426f2f607da98443672bae38", "committedDate": "2020-04-20T10:24:14Z", "message": "GG-24028: Review fixes."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2Mjc2NTcx", "url": "https://github.com/gridgain/gridgain/pull/1080#pullrequestreview-396276571", "createdAt": "2020-04-20T09:14:40Z", "commit": {"oid": "4bf75b5d0ef015a5562225ef322259492e6f82ae"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwOToxNDo0MFrOGIK8gw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQwOToxOTo0MVrOGILJrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIyMTEyMw==", "bodyText": "I think we should mark this task as @GridInternal", "url": "https://github.com/gridgain/gridgain/pull/1080#discussion_r411221123", "createdAt": "2020-04-20T09:14:40Z", "author": {"login": "nva"}, "path": "modules/management-console-agent/src/main/java/org/apache/ignite/internal/agent/action/query/QueryHistoryMetricsCollectorTask.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.agent.action.query;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.compute.ComputeJob;\n+import org.apache.ignite.compute.ComputeJobAdapter;\n+import org.apache.ignite.compute.ComputeJobResult;\n+import org.apache.ignite.compute.ComputeTaskAdapter;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.agent.dto.action.query.QueryDetailMetrics;\n+import org.apache.ignite.internal.processors.cache.GridCacheProcessor;\n+import org.apache.ignite.internal.processors.cache.query.GridCacheQueryDetailMetricsAdapter;\n+import org.apache.ignite.internal.processors.cache.query.GridCacheQueryDetailMetricsKey;\n+import org.apache.ignite.internal.processors.query.GridQueryIndexing;\n+import org.apache.ignite.internal.processors.query.QueryHistoryMetrics;\n+import org.apache.ignite.internal.processors.query.h2.IgniteH2Indexing;\n+import org.apache.ignite.resources.IgniteInstanceResource;\n+\n+import static java.util.function.Function.identity;\n+import static java.util.stream.Collectors.toList;\n+import static java.util.stream.Collectors.toMap;\n+import static org.apache.ignite.internal.processors.cache.GridCacheUtils.isSystemCache;\n+import static org.apache.ignite.internal.processors.cache.query.GridCacheQueryType.SQL;\n+import static org.apache.ignite.internal.processors.cache.query.GridCacheQueryType.SQL_FIELDS;\n+\n+/**\n+ * Query history metrics collector task.\n+ */\n+public class QueryHistoryMetricsCollectorTask extends ComputeTaskAdapter<Long, Collection<QueryDetailMetrics>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bf75b5d0ef015a5562225ef322259492e6f82ae"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIyMTQwOA==", "bodyText": "Missing:\n/** */\nprivate static final long serialVersionUID = 0L;", "url": "https://github.com/gridgain/gridgain/pull/1080#discussion_r411221408", "createdAt": "2020-04-20T09:15:07Z", "author": {"login": "nva"}, "path": "modules/management-console-agent/src/main/java/org/apache/ignite/internal/agent/action/query/QueryHistoryMetricsCollectorTask.java", "diffHunk": "@@ -0,0 +1,170 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.agent.action.query;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.compute.ComputeJob;\n+import org.apache.ignite.compute.ComputeJobAdapter;\n+import org.apache.ignite.compute.ComputeJobResult;\n+import org.apache.ignite.compute.ComputeTaskAdapter;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.agent.dto.action.query.QueryDetailMetrics;\n+import org.apache.ignite.internal.processors.cache.GridCacheProcessor;\n+import org.apache.ignite.internal.processors.cache.query.GridCacheQueryDetailMetricsAdapter;\n+import org.apache.ignite.internal.processors.cache.query.GridCacheQueryDetailMetricsKey;\n+import org.apache.ignite.internal.processors.query.GridQueryIndexing;\n+import org.apache.ignite.internal.processors.query.QueryHistoryMetrics;\n+import org.apache.ignite.internal.processors.query.h2.IgniteH2Indexing;\n+import org.apache.ignite.resources.IgniteInstanceResource;\n+\n+import static java.util.function.Function.identity;\n+import static java.util.stream.Collectors.toList;\n+import static java.util.stream.Collectors.toMap;\n+import static org.apache.ignite.internal.processors.cache.GridCacheUtils.isSystemCache;\n+import static org.apache.ignite.internal.processors.cache.query.GridCacheQueryType.SQL;\n+import static org.apache.ignite.internal.processors.cache.query.GridCacheQueryType.SQL_FIELDS;\n+\n+/**\n+ * Query history metrics collector task.\n+ */\n+public class QueryHistoryMetricsCollectorTask extends ComputeTaskAdapter<Long, Collection<QueryDetailMetrics>> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bf75b5d0ef015a5562225ef322259492e6f82ae"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTIyNDQ5Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        .executeAsync(new QueryHistoryMetricsCollectorTask(), since);\n          \n          \n            \n                        .executeAsync(QueryHistoryMetricsCollectorTask.class, since);", "url": "https://github.com/gridgain/gridgain/pull/1080#discussion_r411224492", "createdAt": "2020-04-20T09:19:41Z", "author": {"login": "nva"}, "path": "modules/management-console-agent/src/main/java/org/apache/ignite/internal/agent/action/controller/QueryActionsController.java", "diffHunk": "@@ -216,4 +219,13 @@ public QueryActionsController(GridKernalContext ctx) {\n             )\n             .collect(toList());\n     }\n+\n+    /**\n+     * @param since Since.\n+     * @return List of query detail metrics.\n+     */\n+    public ComputeTaskFuture<Collection<QueryDetailMetrics>> history(long since) {\n+        return ctx.grid().compute(ctx.grid().cluster().forServers())\n+            .executeAsync(new QueryHistoryMetricsCollectorTask(), since);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bf75b5d0ef015a5562225ef322259492e6f82ae"}, "originalPosition": 40}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2Mzc2NDE1", "url": "https://github.com/gridgain/gridgain/pull/1080#pullrequestreview-396376415", "createdAt": "2020-04-20T11:42:41Z", "commit": {"oid": "4187424e5b49aa92426f2f607da98443672bae38"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMTo0Mjo0MlrOGIQYMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMFQxMjowNzowOFrOGIROUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMxMDEyOQ==", "bodyText": "Each invocation to aggregate results in a new object. This procedure generates a lot of garbage this way.", "url": "https://github.com/gridgain/gridgain/pull/1080#discussion_r411310129", "createdAt": "2020-04-20T11:42:42Z", "author": {"login": "dmekhanikov"}, "path": "modules/management-console-agent/src/main/java/org/apache/ignite/internal/agent/action/query/QueryHistoryMetricsCollectorTask.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.agent.action.query;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.compute.ComputeJob;\n+import org.apache.ignite.compute.ComputeJobAdapter;\n+import org.apache.ignite.compute.ComputeJobResult;\n+import org.apache.ignite.compute.ComputeTaskAdapter;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.agent.dto.action.query.QueryDetailMetrics;\n+import org.apache.ignite.internal.processors.cache.GridCacheProcessor;\n+import org.apache.ignite.internal.processors.cache.query.GridCacheQueryDetailMetricsAdapter;\n+import org.apache.ignite.internal.processors.cache.query.GridCacheQueryDetailMetricsKey;\n+import org.apache.ignite.internal.processors.query.GridQueryIndexing;\n+import org.apache.ignite.internal.processors.query.QueryHistoryMetrics;\n+import org.apache.ignite.internal.processors.query.h2.IgniteH2Indexing;\n+import org.apache.ignite.resources.IgniteInstanceResource;\n+\n+import static java.util.function.Function.identity;\n+import static java.util.stream.Collectors.toList;\n+import static java.util.stream.Collectors.toMap;\n+import static org.apache.ignite.internal.processors.cache.GridCacheUtils.isSystemCache;\n+import static org.apache.ignite.internal.processors.cache.query.GridCacheQueryType.SCAN;\n+import static org.apache.ignite.internal.processors.cache.query.GridCacheQueryType.SQL_FIELDS;\n+\n+/**\n+ * Query history metrics collector task.\n+ */\n+public class QueryHistoryMetricsCollectorTask extends ComputeTaskAdapter<Long, Collection<QueryDetailMetrics>> {\n+    /** {@inheritDoc} */\n+    @Override public Map<? extends ComputeJob, ClusterNode> map(List<ClusterNode> subgrid, Long arg) throws IgniteException {\n+       return subgrid.stream().collect(toMap(n -> new QueryHistoryMetricsCollectorJob(arg), identity()));\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public Collection<QueryDetailMetrics> reduce(List<ComputeJobResult> results) throws IgniteException {\n+        Map<GridCacheQueryDetailMetricsKey, GridCacheQueryDetailMetricsAdapter> taskRes = new HashMap<>();\n+\n+        for (ComputeJobResult res : results) {\n+            if (res.getException() != null)\n+                throw res.getException();\n+\n+            res.<Map<GridCacheQueryDetailMetricsKey, GridCacheQueryDetailMetricsAdapter>>getData()\n+                .forEach((key, value) -> taskRes.merge(key, value, GridCacheQueryDetailMetricsAdapter::aggregate));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4187424e5b49aa92426f2f607da98443672bae38"}, "originalPosition": 65}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMxOTU4Ng==", "bodyText": "Someone will have to collect all that garbage, you know.", "url": "https://github.com/gridgain/gridgain/pull/1080#discussion_r411319586", "createdAt": "2020-04-20T11:59:21Z", "author": {"login": "dmekhanikov"}, "path": "modules/management-console-agent/src/main/java/org/apache/ignite/internal/agent/action/query/QueryHistoryMetricsCollectorTask.java", "diffHunk": "@@ -0,0 +1,169 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.agent.action.query;\n+\n+import java.util.Collection;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Stream;\n+import org.apache.ignite.IgniteException;\n+import org.apache.ignite.cluster.ClusterNode;\n+import org.apache.ignite.compute.ComputeJob;\n+import org.apache.ignite.compute.ComputeJobAdapter;\n+import org.apache.ignite.compute.ComputeJobResult;\n+import org.apache.ignite.compute.ComputeTaskAdapter;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.agent.dto.action.query.QueryDetailMetrics;\n+import org.apache.ignite.internal.processors.cache.GridCacheProcessor;\n+import org.apache.ignite.internal.processors.cache.query.GridCacheQueryDetailMetricsAdapter;\n+import org.apache.ignite.internal.processors.cache.query.GridCacheQueryDetailMetricsKey;\n+import org.apache.ignite.internal.processors.query.GridQueryIndexing;\n+import org.apache.ignite.internal.processors.query.QueryHistoryMetrics;\n+import org.apache.ignite.internal.processors.query.h2.IgniteH2Indexing;\n+import org.apache.ignite.resources.IgniteInstanceResource;\n+\n+import static java.util.function.Function.identity;\n+import static java.util.stream.Collectors.toList;\n+import static java.util.stream.Collectors.toMap;\n+import static org.apache.ignite.internal.processors.cache.GridCacheUtils.isSystemCache;\n+import static org.apache.ignite.internal.processors.cache.query.GridCacheQueryType.SCAN;\n+import static org.apache.ignite.internal.processors.cache.query.GridCacheQueryType.SQL_FIELDS;\n+\n+/**\n+ * Query history metrics collector task.\n+ */\n+public class QueryHistoryMetricsCollectorTask extends ComputeTaskAdapter<Long, Collection<QueryDetailMetrics>> {\n+    /** {@inheritDoc} */\n+    @Override public Map<? extends ComputeJob, ClusterNode> map(List<ClusterNode> subgrid, Long arg) throws IgniteException {\n+       return subgrid.stream().collect(toMap(n -> new QueryHistoryMetricsCollectorJob(arg), identity()));\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public Collection<QueryDetailMetrics> reduce(List<ComputeJobResult> results) throws IgniteException {\n+        Map<GridCacheQueryDetailMetricsKey, GridCacheQueryDetailMetricsAdapter> taskRes = new HashMap<>();\n+\n+        for (ComputeJobResult res : results) {\n+            if (res.getException() != null)\n+                throw res.getException();\n+\n+            res.<Map<GridCacheQueryDetailMetricsKey, GridCacheQueryDetailMetricsAdapter>>getData()\n+                .forEach((key, value) -> taskRes.merge(key, value, GridCacheQueryDetailMetricsAdapter::aggregate));\n+        }\n+\n+        return taskRes.values().stream()\n+            .map(this::mapMetric)\n+            .collect(toList());\n+    }\n+\n+    /**\n+     * @param m Metrics adapter.\n+     * @return Query detail metrics.\n+     */\n+    private QueryDetailMetrics mapMetric(GridCacheQueryDetailMetricsAdapter m) {\n+        return new QueryDetailMetrics()\n+            .setQuery(m.query())\n+            .setQueryType(m.queryType())\n+            .setExecutions(m.executions())\n+            .setFailures(m.failures())\n+            .setLastStartTime(m.lastStartTime())\n+            .setCompletions(m.completions())\n+            .setCache(m.cache())\n+            .setMaxTime(m.maximumTime())\n+            .setMinTime(m.minimumTime())\n+            .setTotalTime(m.totalTime());\n+    }\n+\n+    /**\n+     * Query history metrics collector job.\n+     */\n+    private static class QueryHistoryMetricsCollectorJob extends ComputeJobAdapter {\n+        /** Ignite. */\n+        @IgniteInstanceResource\n+        private IgniteEx ignite;\n+\n+        /**\n+         * @param arg Argument.\n+         */\n+        public QueryHistoryMetricsCollectorJob(Long arg) {\n+            setArguments(arg);\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public Map<GridCacheQueryDetailMetricsKey, GridCacheQueryDetailMetricsAdapter> execute() {\n+            long since = argument(0);\n+\n+            GridQueryIndexing indexing = ignite.context().query().getIndexing();\n+\n+            GridCacheProcessor cacheProc = ignite.context().cache();\n+\n+            Stream<GridCacheQueryDetailMetricsAdapter> cacheMetricsStream = cacheProc.cacheNames().stream()\n+                .filter(name -> !isSystemCache(name))\n+                .map(cacheProc::cache)\n+                .filter(cache -> cache != null && cache.context().started())\n+                .flatMap(cache -> cache.context().queries().detailMetrics().stream())\n+                .filter(m -> m.lastStartTime() > since && m.key().getQueryType() == SCAN);\n+\n+            if (indexing instanceof IgniteH2Indexing) {\n+                Collection<QueryHistoryMetrics> metrics = ((IgniteH2Indexing)indexing)\n+                    .runningQueryManager().queryHistoryMetrics().values();\n+\n+                cacheMetricsStream = Stream.concat(\n+                    cacheMetricsStream,\n+                    metrics.stream().map(this::toMetricAdapter)\n+                );\n+            }\n+\n+            return cacheMetricsStream\n+                .collect(\n+                    toMap(\n+                        GridCacheQueryDetailMetricsAdapter::key,\n+                        identity(),\n+                        GridCacheQueryDetailMetricsAdapter::aggregate", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4187424e5b49aa92426f2f607da98443672bae38"}, "originalPosition": 136}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTMyMzk4NA==", "bodyText": "Please add a test for queries sent not from the GGCC API, but to Ignite directly.", "url": "https://github.com/gridgain/gridgain/pull/1080#discussion_r411323984", "createdAt": "2020-04-20T12:07:08Z", "author": {"login": "dmekhanikov"}, "path": "modules/management-console-agent/src/test/java/org/apache/ignite/internal/agent/action/controller/QueryActionsControllerTest.java", "diffHunk": "@@ -544,6 +544,93 @@ public void shouldReturnRunningQueriesFromCoordinatorNode() {\n         });\n     }\n \n+    /**\n+     * 1. Create and fill the cache with Integer key and String value.\n+     * 2. Execute sql query: SELECT count(*), sleep() FROM \"TestCache\".STRING and wait completion.\n+     * 3. Execute scan query for TestCache and wait completion.\n+     * 4. Send the \"QueryActions.history\" action with \"since\" argument equals to 1.\n+     * 5. Assert that query history contains 2 queries.\n+     * 6. Assert that SCAN and SQL_FIELDS query present in query history.\n+     * 7. Assert that history queries contains a correct queries text presentation.\n+     */\n+    @Test\n+    public void shouldReturnQueryHistory() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4187424e5b49aa92426f2f607da98443672bae38"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d8f57dce3ebbc693c92ea3d08568e65f70d6dbd", "author": {"user": null}, "url": "https://github.com/gridgain/gridgain/commit/2d8f57dce3ebbc693c92ea3d08568e65f70d6dbd", "committedDate": "2020-04-20T15:17:14Z", "message": "GG-24028: Fix issues with garbage, serial version UID and add test."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2NjM2MTky", "url": "https://github.com/gridgain/gridgain/pull/1080#pullrequestreview-396636192", "createdAt": "2020-04-20T16:52:13Z", "commit": {"oid": "2d8f57dce3ebbc693c92ea3d08568e65f70d6dbd"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19a9266a7cb11bd7d7174c42a4d3e3db918294bf", "author": {"user": null}, "url": "https://github.com/gridgain/gridgain/commit/19a9266a7cb11bd7d7174c42a4d3e3db918294bf", "committedDate": "2020-04-20T17:04:23Z", "message": "GG-24028: Add additional test."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk2OTQzMTMw", "url": "https://github.com/gridgain/gridgain/pull/1080#pullrequestreview-396943130", "createdAt": "2020-04-21T02:22:30Z", "commit": {"oid": "19a9266a7cb11bd7d7174c42a4d3e3db918294bf"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMjoyMjozMFrOGIvg-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwMjoyMjozMFrOGIvg-Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMTgyMDI4MQ==", "bodyText": "Changes in the base class it's a bad idea. Let's map to QueryDetailMetrics and move merge to it.", "url": "https://github.com/gridgain/gridgain/pull/1080#discussion_r411820281", "createdAt": "2020-04-21T02:22:30Z", "author": {"login": "nva"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/query/GridCacheQueryDetailMetricsAdapter.java", "diffHunk": "@@ -157,6 +157,24 @@ public GridCacheQueryDetailMetricsAdapter aggregate(QueryDetailMetrics m) {\n         );\n     }\n \n+    /**\n+     * Aggregate metrics.\n+     *\n+     * @param m Other metrics to take into account.\n+     * @return Aggregated metrics.\n+     */\n+    public GridCacheQueryDetailMetricsAdapter merge(QueryDetailMetrics m) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "19a9266a7cb11bd7d7174c42a4d3e3db918294bf"}, "originalPosition": 10}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a3929cdc04324360aa598a13638066ee9e34c456", "author": {"user": null}, "url": "https://github.com/gridgain/gridgain/commit/a3929cdc04324360aa598a13638066ee9e34c456", "committedDate": "2020-04-21T06:37:11Z", "message": "GG-24028: revert change in GridCacheQueryDetailMetricsAdapter."}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk3MTQwMzAx", "url": "https://github.com/gridgain/gridgain/pull/1080#pullrequestreview-397140301", "createdAt": "2020-04-21T09:13:23Z", "commit": {"oid": "a3929cdc04324360aa598a13638066ee9e34c456"}, "state": "APPROVED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwOToxMzoyM1rOGI7ZSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMVQwOToxMzoyM1rOGI7ZSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMjAxNDkyMg==", "bodyText": "Is this good idea to use same name as interface org.apache.ignite.cache.query.QueryDetailMetrics in core module?", "url": "https://github.com/gridgain/gridgain/pull/1080#discussion_r412014922", "createdAt": "2020-04-21T09:13:23Z", "author": {"login": "nva"}, "path": "modules/management-console-agent/src/main/java/org/apache/ignite/internal/agent/dto/action/query/QueryDetailMetrics.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.agent.dto.action.query;\n+\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+\n+/**\n+ * Query detail metrics.\n+ */\n+public class QueryDetailMetrics {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3929cdc04324360aa598a13638066ee9e34c456"}, "originalPosition": 24}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzk4MjQ4MTEx", "url": "https://github.com/gridgain/gridgain/pull/1080#pullrequestreview-398248111", "createdAt": "2020-04-22T14:26:56Z", "commit": {"oid": "a3929cdc04324360aa598a13638066ee9e34c456"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDoyNjo1NlrOGJ5ZnA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0yMlQxNDoyNzoxMVrOGJ5aZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAzMDgxMg==", "bodyText": "Too many \"ni\"", "url": "https://github.com/gridgain/gridgain/pull/1080#discussion_r413030812", "createdAt": "2020-04-22T14:26:56Z", "author": {"login": "dmekhanikov"}, "path": "modules/management-console-agent/src/main/java/org/apache/ignite/internal/agent/dto/action/query/QueryDetailMetrics.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.agent.dto.action.query;\n+\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+\n+/**\n+ * Query detail metrics.\n+ */\n+public class QueryDetailMetrics {\n+    /** Textual query representation. */\n+    private String qry;\n+\n+    /** Query type. */\n+    private String qryType;\n+\n+    /** Cache name. */\n+    private String cache;\n+\n+    /** Number of executions. */\n+    private long execs;\n+\n+    /** Number of completions executions. */\n+    private long completions;\n+\n+    /** Number of failures. */\n+    private long failures;\n+\n+    /** Minimum time of execution. */\n+    private long minTime = -1;\n+\n+    /** Maximum time of execution. */\n+    private long maxTime;\n+\n+    /** Sum of execution time of completions time. */\n+    private long totalTime;\n+\n+    /** Sum of execution time of completions time. */\n+    private long lastStartTime;\n+\n+    /**\n+     * @return Query.\n+     */\n+    public String getQuery() {\n+        return qry;\n+    }\n+\n+    /**\n+     * @param qry Query.\n+     * @return {@code This} for chaining method calls.\n+     */\n+    public QueryDetailMetrics setQuery(String qry) {\n+        this.qry = qry;\n+\n+        return this;\n+    }\n+\n+    /**\n+     * @return Query type.\n+     */\n+    public String getQueryType() {\n+        return qryType;\n+    }\n+\n+    /**\n+     * @param qryType Query type.\n+     * @return {@code This} for chaining method calls.\n+     */\n+    public QueryDetailMetrics setQueryType(String qryType) {\n+        this.qryType = qryType;\n+\n+        return this;\n+    }\n+\n+    /**\n+     * @return Minimal execution time.\n+     */\n+    public long getMinTime() {\n+        return minTime;\n+    }\n+\n+    /**\n+     * @param minTime Mininimal time.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3929cdc04324360aa598a13638066ee9e34c456"}, "originalPosition": 97}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQxMzAzMTAxNQ==", "bodyText": "Too many \"this\"-es", "url": "https://github.com/gridgain/gridgain/pull/1080#discussion_r413031015", "createdAt": "2020-04-22T14:27:11Z", "author": {"login": "dmekhanikov"}, "path": "modules/management-console-agent/src/main/java/org/apache/ignite/internal/agent/dto/action/query/QueryDetailMetrics.java", "diffHunk": "@@ -0,0 +1,247 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.agent.dto.action.query;\n+\n+import org.apache.ignite.internal.util.typedef.internal.S;\n+\n+/**\n+ * Query detail metrics.\n+ */\n+public class QueryDetailMetrics {\n+    /** Textual query representation. */\n+    private String qry;\n+\n+    /** Query type. */\n+    private String qryType;\n+\n+    /** Cache name. */\n+    private String cache;\n+\n+    /** Number of executions. */\n+    private long execs;\n+\n+    /** Number of completions executions. */\n+    private long completions;\n+\n+    /** Number of failures. */\n+    private long failures;\n+\n+    /** Minimum time of execution. */\n+    private long minTime = -1;\n+\n+    /** Maximum time of execution. */\n+    private long maxTime;\n+\n+    /** Sum of execution time of completions time. */\n+    private long totalTime;\n+\n+    /** Sum of execution time of completions time. */\n+    private long lastStartTime;\n+\n+    /**\n+     * @return Query.\n+     */\n+    public String getQuery() {\n+        return qry;\n+    }\n+\n+    /**\n+     * @param qry Query.\n+     * @return {@code This} for chaining method calls.\n+     */\n+    public QueryDetailMetrics setQuery(String qry) {\n+        this.qry = qry;\n+\n+        return this;\n+    }\n+\n+    /**\n+     * @return Query type.\n+     */\n+    public String getQueryType() {\n+        return qryType;\n+    }\n+\n+    /**\n+     * @param qryType Query type.\n+     * @return {@code This} for chaining method calls.\n+     */\n+    public QueryDetailMetrics setQueryType(String qryType) {\n+        this.qryType = qryType;\n+\n+        return this;\n+    }\n+\n+    /**\n+     * @return Minimal execution time.\n+     */\n+    public long getMinTime() {\n+        return minTime;\n+    }\n+\n+    /**\n+     * @param minTime Mininimal time.\n+     * @return {@code This} for chaining method calls.\n+     */\n+    public QueryDetailMetrics setMinTime(long minTime) {\n+        this.minTime = this.minTime;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a3929cdc04324360aa598a13638066ee9e34c456"}, "originalPosition": 101}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9798e454efd7cfbe4a86ba9384f466d5659bc996", "author": {"user": null}, "url": "https://github.com/gridgain/gridgain/commit/9798e454efd7cfbe4a86ba9384f466d5659bc996", "committedDate": "2020-04-22T16:06:53Z", "message": "GG-24028: Review fixes."}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4315, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}