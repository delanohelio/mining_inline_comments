{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk1NTgxMTAy", "number": 1466, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDozMjozM1rOEzU3PQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNToxNDozMlrOE1s9dg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjU0NjUzOnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/configuration/CacheConfiguration.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDozMjozM1rOHqesjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDozMjozM1rOHqesjQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMwNTE2NQ==", "bodyText": "It is not implementation, it is configuration.", "url": "https://github.com/gridgain/gridgain/pull/1466#discussion_r514305165", "createdAt": "2020-10-29T14:32:33Z", "author": {"login": "agura"}, "path": "modules/core/src/main/java/org/apache/ignite/configuration/CacheConfiguration.java", "diffHunk": "@@ -419,6 +421,11 @@\n      */\n     private boolean encryptionEnabled;\n \n+    /**\n+     * Cache entry compression implementation. If provided, data in cache will be compressed.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "451f0862c144b5790a2d97504c2d8e4478bc5195"}, "originalPosition": 21}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjU3NzQwOnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDozODozOVrOHqe_rw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDozODozOVrOHqe_rw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMxMDA2Mw==", "bodyText": "Please, avoid empty comments.", "url": "https://github.com/gridgain/gridgain/pull/1466#discussion_r514310063", "createdAt": "2020-10-29T14:38:39Z", "author": {"login": "agura"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectImpl.java", "diffHunk": "@@ -52,6 +53,9 @@\n  */\n @IgniteCodeGeneratingFail // Fields arr and start should not be generated by MessageCodeGenerator.\n public final class BinaryObjectImpl extends BinaryObjectExImpl implements Externalizable, KeyCacheObject {\n+    /** */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "451f0862c144b5790a2d97504c2d8e4478bc5195"}, "originalPosition": 12}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjU3Nzk1OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDozODo0OFrOHqfAHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDozODo0OFrOHqfAHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMxMDE3Mg==", "bodyText": "Please, avoid empty comments.", "url": "https://github.com/gridgain/gridgain/pull/1466#discussion_r514310172", "createdAt": "2020-10-29T14:38:48Z", "author": {"login": "agura"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectImpl.java", "diffHunk": "@@ -62,6 +66,10 @@\n     /** */\n     private byte[] arr;\n \n+    /** */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "451f0862c144b5790a2d97504c2d8e4478bc5195"}, "originalPosition": 22}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjU4ODA2OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDo0MDo0OFrOHqfGYg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDo0MDo0OFrOHqfGYg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMxMTc3OA==", "bodyText": "Here a rule about an empty line after each expression is still valid.", "url": "https://github.com/gridgain/gridgain/pull/1466#discussion_r514311778", "createdAt": "2020-10-29T14:40:48Z", "author": {"login": "agura"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectImpl.java", "diffHunk": "@@ -168,30 +176,86 @@ public BinaryObjectImpl(BinaryContext ctx, byte[] arr, int start) {\n \n     /** {@inheritDoc} */\n     @Override public boolean putValue(ByteBuffer buf) throws IgniteCheckedException {\n-        return putValue(buf, 0, CacheObjectAdapter.objectPutSize(length()));\n+        return putValue(buf, 0, valueBytesLength(null));\n     }\n \n     /** {@inheritDoc} */\n     @Override public int putValue(long addr) throws IgniteCheckedException {\n-        return CacheObjectAdapter.putValue(addr, cacheObjectType(), arr, start, length());\n+        byte type = cacheObjectType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "451f0862c144b5790a2d97504c2d8e4478bc5195"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjU4ODM5OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectImpl.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDo0MDo1MlrOHqfGmQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDo0MDo1MlrOHqfGmQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMxMTgzMw==", "bodyText": "Here a rule about an empty line after each expression is still valid.", "url": "https://github.com/gridgain/gridgain/pull/1466#discussion_r514311833", "createdAt": "2020-10-29T14:40:52Z", "author": {"login": "agura"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectImpl.java", "diffHunk": "@@ -168,30 +176,86 @@ public BinaryObjectImpl(BinaryContext ctx, byte[] arr, int start) {\n \n     /** {@inheritDoc} */\n     @Override public boolean putValue(ByteBuffer buf) throws IgniteCheckedException {\n-        return putValue(buf, 0, CacheObjectAdapter.objectPutSize(length()));\n+        return putValue(buf, 0, valueBytesLength(null));\n     }\n \n     /** {@inheritDoc} */\n     @Override public int putValue(long addr) throws IgniteCheckedException {\n-        return CacheObjectAdapter.putValue(addr, cacheObjectType(), arr, start, length());\n+        byte type = cacheObjectType();\n+        byte[] arr = this.arr;\n+        int len = length();\n+\n+        if (detached()) {\n+            assert compressedArr != null : \"putValue() called before prepareForCache()\";\n+\n+            if (compressedArr.length > 0) {\n+                type = CacheObject.TYPE_BINARY_COMPRESSED;\n+\n+                arr = compressedArr;\n+\n+                len = compressedArr.length;\n+            }\n+        }\n+\n+        return CacheObjectAdapter.putValue(addr, type, arr, start, len);\n     }\n \n     /** {@inheritDoc} */\n     @Override public boolean putValue(final ByteBuffer buf, int off, int len) throws IgniteCheckedException {\n-        return CacheObjectAdapter.putValue(cacheObjectType(), buf, off, len, arr, start);\n+        byte type = cacheObjectType();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "451f0862c144b5790a2d97504c2d8e4478bc5195"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjYzOTkxOnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/tree/CacheDataTree.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDo1MToyMVrOHqfncQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0zMFQwOTowNzozMVrOHrGfrA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyMDI0MQ==", "bodyText": "What if type == TYPE_BINARY_COMPRESSED? Is there any test to verify comparing of compressed keys?", "url": "https://github.com/gridgain/gridgain/pull/1466#discussion_r514320241", "createdAt": "2020-10-29T14:51:21Z", "author": {"login": "agura"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/tree/CacheDataTree.java", "diffHunk": "@@ -461,38 +462,42 @@ private int compareKeys(KeyCacheObject key, final long link) throws IgniteChecke\n                     if (grp.storeCacheIdInDataPage())\n                         addr += 4; // Skip cache id.\n \n-                    final int len = PageUtils.getInt(addr, 0);\n+                    byte type = PageUtils.getByte(addr, 4);\n \n-                    int lenCmp = Integer.compare(len, bytes.length);\n+                    if (type != CacheObject.TYPE_BINARY_COMPRESSED) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "451f0862c144b5790a2d97504c2d8e4478bc5195"}, "originalPosition": 16}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDk1NzIyOA==", "bodyText": "If type is CacheObject.TYPE_BINARY_COMPRESSED then regular non-optimized comparison takes place, such as with keys larger than page - fetch both entries off PDS, unwrap, compare.", "url": "https://github.com/gridgain/gridgain/pull/1466#discussion_r514957228", "createdAt": "2020-10-30T09:07:31Z", "author": {"login": "alamar"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/tree/CacheDataTree.java", "diffHunk": "@@ -461,38 +462,42 @@ private int compareKeys(KeyCacheObject key, final long link) throws IgniteChecke\n                     if (grp.storeCacheIdInDataPage())\n                         addr += 4; // Skip cache id.\n \n-                    final int len = PageUtils.getInt(addr, 0);\n+                    byte type = PageUtils.getByte(addr, 4);\n \n-                    int lenCmp = Integer.compare(len, bytes.length);\n+                    if (type != CacheObject.TYPE_BINARY_COMPRESSED) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyMDI0MQ=="}, "originalCommit": {"oid": "451f0862c144b5790a2d97504c2d8e4478bc5195"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjY1MDA3OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheGroupContext.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDo1MzozOVrOHqfuVQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNDo1MzozOVrOHqfuVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMyMjAwNQ==", "bodyText": "Why it is critical if compressionStrategy couldn't be closed? May be close-quite semantic is more suitable here. WDYT?", "url": "https://github.com/gridgain/gridgain/pull/1466#discussion_r514322005", "createdAt": "2020-10-29T14:53:39Z", "author": {"login": "agura"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/CacheGroupContext.java", "diffHunk": "@@ -854,6 +862,15 @@ void stopGroup() {\n         preldr.onKernalStop();\n \n         ctx.io().removeCacheGroupHandlers(grpId);\n+\n+        if (compressionStrategy != null) {\n+            try {\n+                compressionStrategy.close();\n+            }\n+            catch (Exception ex) {\n+                throw new IgniteException(ex);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "451f0862c144b5790a2d97504c2d8e4478bc5195"}, "originalPosition": 62}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjcyMDQyOnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNTowNzoyN1rOHqgaMA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNTowNzoyN1rOHqgaMA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMzMzIzMg==", "bodyText": "It is really unreadable snippet :) What if we just replace usage below like this:\n if (compressionConfiguration != null) {\n            compressionStrategy = CU.entryCompressionStrategies(ctx).get(compressionConfiguration.getClass())\n                .apply(compressionConfiguration);\n\n            compressionStrategy.start(ctx, cfg);\n }", "url": "https://github.com/gridgain/gridgain/pull/1466#discussion_r514333232", "createdAt": "2020-10-29T15:07:27Z", "author": {"login": "agura"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheProcessor.java", "diffHunk": "@@ -2461,6 +2467,21 @@ private CacheGroupContext startCacheGroup(\n         boolean persistenceEnabled = recoveryMode || sharedCtx.localNode().isClient() ? desc.persistenceEnabled() :\n             dataRegion != null && dataRegion.config().isPersistenceEnabled();\n \n+        EntryCompressionStrategy compressionStrategy = null;\n+\n+        Map<Class<? extends EntryCompressionConfiguration>,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "451f0862c144b5790a2d97504c2d8e4478bc5195"}, "originalPosition": 58}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzIyMjc0MjI3OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNToxMTo0NlrOHqgnsw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yOVQxNToxMTo0NlrOHqgnsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxNDMzNjY5MQ==", "bodyText": "Please, don't use nonNull in such cases. Most code uses val != null and there is no any reason for change this style.\nUse nonNull only as simple lambda-expressions (see corresponding javadoc).", "url": "https://github.com/gridgain/gridgain/pull/1466#discussion_r514336691", "createdAt": "2020-10-29T15:11:46Z", "author": {"login": "agura"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/GridCacheUtils.java", "diffHunk": "@@ -2117,6 +2120,29 @@ public static boolean isCacheTemplateName(String cacheName) {\n         return strategies;\n     }\n \n+    /**\n+     * Getting available cache entry compression strategies.\n+     *\n+     * @param kernalCtx Kernal context.\n+     * @return Mapping of configuration class to strategy class.\n+     */\n+    public static Map<Class<? extends EntryCompressionConfiguration>,\n+        IgniteClosure<EntryCompressionConfiguration, EntryCompressionStrategy>>\n+        entryCompressionStrategies(GridKernalContext kernalCtx) {\n+        Map strategies = new HashMap<>();\n+\n+        // Adding strategies from plugins.\n+        EntryCompressionStrategySupplier[] suppliers = kernalCtx.plugins()\n+            .extensions(EntryCompressionStrategySupplier.class);\n+\n+        if (nonNull(suppliers)) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "451f0862c144b5790a2d97504c2d8e4478bc5195"}, "originalPosition": 36}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzI0NzQ2NjE0OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheOffheapManagerImpl.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNToxNDozMlrOHuH_Ag==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0wNVQxNjoxODozNVrOHuLFcA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODEyNzM2Mg==", "bodyText": "Looks like a copy-paste error here: we pass compressKeys flag when preparing value, not key.", "url": "https://github.com/gridgain/gridgain/pull/1466#discussion_r518127362", "createdAt": "2020-11-05T15:14:32Z", "author": {"login": "sergey-chugunov-1985"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheOffheapManagerImpl.java", "diffHunk": "@@ -1879,8 +1886,13 @@ private void invoke0(GridCacheContext cctx, CacheSearchRow row, OffheapInvokeClo\n                     return false;\n \n                 for (GridCacheMvccEntryInfo info : hist) {\n+                    CacheObject val = info.value();\n+\n+                    if (val != null)\n+                        val = val.prepareForCache(coCtx, coCtx.compressKeys());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "2443428061ef22c037c86ee82979657fb6a4a85a"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODE3ODE2MA==", "bodyText": "Thank you, I will fix.", "url": "https://github.com/gridgain/gridgain/pull/1466#discussion_r518178160", "createdAt": "2020-11-05T16:18:35Z", "author": {"login": "alamar"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/cache/IgniteCacheOffheapManagerImpl.java", "diffHunk": "@@ -1879,8 +1886,13 @@ private void invoke0(GridCacheContext cctx, CacheSearchRow row, OffheapInvokeClo\n                     return false;\n \n                 for (GridCacheMvccEntryInfo info : hist) {\n+                    CacheObject val = info.value();\n+\n+                    if (val != null)\n+                        val = val.prepareForCache(coCtx, coCtx.compressKeys());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxODEyNzM2Mg=="}, "originalCommit": {"oid": "2443428061ef22c037c86ee82979657fb6a4a85a"}, "originalPosition": 77}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3268, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}