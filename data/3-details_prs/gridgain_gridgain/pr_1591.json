{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI1ODQzOTYx", "number": 1591, "title": "GG-31027: statistics store", "bodyText": "Store statistics in local metastorage", "createdAt": "2020-11-23T16:18:56Z", "url": "https://github.com/gridgain/gridgain/pull/1591", "merged": true, "mergeCommit": {"oid": "348d4abb173117a77f3abde39247b555c5c2b518"}, "closed": true, "closedAt": "2020-12-03T13:15:55Z", "author": {"login": "Berkof"}, "timelineItems": {"totalCount": 16, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdfVjZAgH2gAyNTI1ODQzOTYxOmMzNzc2NzVmNGIyYzFlMGZlOWMyMTc1MGYzODkxYTRiNmVjM2VmYzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdihUnrgH2gAyNTI1ODQzOTYxOjI0YjEzOWY4Yjk0MDk5Y2QxM2MxMDQ3NTNkYzcxNDJlOTNiZTFmOWQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "c377675f4b2c1e0fe9c21750f3891a4b6ec3efc7", "author": {"user": null}, "url": "https://github.com/gridgain/gridgain/commit/c377675f4b2c1e0fe9c21750f3891a4b6ec3efc7", "committedDate": "2020-11-23T13:55:33Z", "message": "GG-31027: Statistics storage implementation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdd5a74c4ee6c1509a5f2115fef9af91801580ce", "author": {"user": null}, "url": "https://github.com/gridgain/gridgain/commit/fdd5a74c4ee6c1509a5f2115fef9af91801580ce", "committedDate": "2020-11-23T16:17:37Z", "message": "Merge remote-tracking branch 'gridgain-ce/master' into gg-31027"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "652ab10b366070d91d2396b14dfc2cfad786f99f", "author": {"user": null}, "url": "https://github.com/gridgain/gridgain/commit/652ab10b366070d91d2396b14dfc2cfad786f99f", "committedDate": "2020-11-24T10:56:39Z", "message": "GG-31027: minor autotests fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NDI4NTAw", "url": "https://github.com/gridgain/gridgain/pull/1591#pullrequestreview-538428500", "createdAt": "2020-11-25T12:04:40Z", "commit": {"oid": "652ab10b366070d91d2396b14dfc2cfad786f99f"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMjowNDo0MFrOH5wYiA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxMjozMTozMFrOH5xTUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMyMzU5Mg==", "bodyText": "why we are collecting them then?", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r530323592", "createdAt": "2020-11-25T12:04:40Z", "author": {"login": "korlov42"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/ColumnStatisticsCollector.java", "diffHunk": "@@ -136,6 +137,13 @@ public ColumnStatistics finish() {\n \n         int averageSize = averageSize(size, total, nullsCnt);\n \n+        TypeInfo colTypeInfo = col.getType();\n+\n+        // Avoid serializing complex types.\n+        if (colTypeInfo == TypeInfo.TYPE_ARRAY || colTypeInfo == TypeInfo.TYPE_ENUM_UNDEFINED", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "652ab10b366070d91d2396b14dfc2cfad786f99f"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMyNDQ1OQ==", "bodyText": "missed in javadoc", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r530324459", "createdAt": "2020-11-25T12:06:14Z", "author": {"login": "korlov42"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/IgniteStatisticsRepositoryImpl.java", "diffHunk": "@@ -46,26 +55,38 @@\n      *\n      * @param storeData If {@code true} - node stores data locally, {@code false} - otherwise.\n      * @param persistence If {@code true} - node have persistence store, {@code false} - otherwise.\n+     * @param subscriptionProcessor Subscription processor.\n      * @param statisticsManager Ignite statistics manager.\n      * @param log Ignite logger to use.\n      */\n     public IgniteStatisticsRepositoryImpl(\n             boolean storeData,\n             boolean persistence,\n+            IgniteCacheDatabaseSharedManager database,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "652ab10b366070d91d2396b14dfc2cfad786f99f"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMyNTQyOQ==", "bodyText": "The log param got renamed", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r530325429", "createdAt": "2020-11-25T12:08:04Z", "author": {"login": "korlov42"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/IgniteStatisticsRepositoryImpl.java", "diffHunk": "@@ -46,26 +55,38 @@\n      *\n      * @param storeData If {@code true} - node stores data locally, {@code false} - otherwise.\n      * @param persistence If {@code true} - node have persistence store, {@code false} - otherwise.\n+     * @param subscriptionProcessor Subscription processor.\n      * @param statisticsManager Ignite statistics manager.\n      * @param log Ignite logger to use.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "652ab10b366070d91d2396b14dfc2cfad786f99f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMzMDY0NQ==", "bodyText": "missed space", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r530330645", "createdAt": "2020-11-25T12:17:37Z", "author": {"login": "korlov42"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/IgniteStatisticsRepositoryImpl.java", "diffHunk": "@@ -46,26 +55,38 @@\n      *\n      * @param storeData If {@code true} - node stores data locally, {@code false} - otherwise.\n      * @param persistence If {@code true} - node have persistence store, {@code false} - otherwise.\n+     * @param subscriptionProcessor Subscription processor.\n      * @param statisticsManager Ignite statistics manager.\n      * @param log Ignite logger to use.\n      */\n     public IgniteStatisticsRepositoryImpl(\n             boolean storeData,\n             boolean persistence,\n+            IgniteCacheDatabaseSharedManager database,\n+            GridInternalSubscriptionProcessor subscriptionProcessor,\n             IgniteStatisticsManagerImpl statisticsManager,\n-            IgniteLogger log) {\n+            Function<Class<?>, IgniteLogger> logSupplier\n+    ) {\n         if (storeData) {\n             // Persistence store\n-            partsStats = (persistence) ? null : new ConcurrentHashMap<>();\n+            if (persistence) {\n+                store = new IgniteStatisticsStoreImpl(subscriptionProcessor, database,this, logSupplier);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "652ab10b366070d91d2396b14dfc2cfad786f99f"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMzMTY1MA==", "bodyText": "whether the store should be persistent or not could be defined by presence of database", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r530331650", "createdAt": "2020-11-25T12:19:31Z", "author": {"login": "korlov42"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/IgniteStatisticsRepositoryImpl.java", "diffHunk": "@@ -46,26 +55,38 @@\n      *\n      * @param storeData If {@code true} - node stores data locally, {@code false} - otherwise.\n      * @param persistence If {@code true} - node have persistence store, {@code false} - otherwise.\n+     * @param subscriptionProcessor Subscription processor.\n      * @param statisticsManager Ignite statistics manager.\n      * @param log Ignite logger to use.\n      */\n     public IgniteStatisticsRepositoryImpl(\n             boolean storeData,\n             boolean persistence,\n+            IgniteCacheDatabaseSharedManager database,\n+            GridInternalSubscriptionProcessor subscriptionProcessor,\n             IgniteStatisticsManagerImpl statisticsManager,\n-            IgniteLogger log) {\n+            Function<Class<?>, IgniteLogger> logSupplier\n+    ) {\n         if (storeData) {\n             // Persistence store\n-            partsStats = (persistence) ? null : new ConcurrentHashMap<>();\n+            if (persistence) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "652ab10b366070d91d2396b14dfc2cfad786f99f"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMzNjk1Nw==", "bodyText": "it's just a common store interface. And this should has two implementation: one is in-memory and another is persistent", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r530336957", "createdAt": "2020-11-25T12:28:41Z", "author": {"login": "korlov42"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/IgniteStatisticsStore.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.ignite.internal.processors.query.stat;\n+\n+import java.util.Collection;\n+\n+/**\n+ * Statistics persistence store interface.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "652ab10b366070d91d2396b14dfc2cfad786f99f"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDMzODY0MA==", "bodyText": "let's get rid of all these local collections in favor of a in-memory store implementation", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r530338640", "createdAt": "2020-11-25T12:31:30Z", "author": {"login": "korlov42"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/IgniteStatisticsRepositoryImpl.java", "diffHunk": "@@ -46,26 +55,38 @@\n      *\n      * @param storeData If {@code true} - node stores data locally, {@code false} - otherwise.\n      * @param persistence If {@code true} - node have persistence store, {@code false} - otherwise.\n+     * @param subscriptionProcessor Subscription processor.\n      * @param statisticsManager Ignite statistics manager.\n      * @param log Ignite logger to use.\n      */\n     public IgniteStatisticsRepositoryImpl(\n             boolean storeData,\n             boolean persistence,\n+            IgniteCacheDatabaseSharedManager database,\n+            GridInternalSubscriptionProcessor subscriptionProcessor,\n             IgniteStatisticsManagerImpl statisticsManager,\n-            IgniteLogger log) {\n+            Function<Class<?>, IgniteLogger> logSupplier\n+    ) {\n         if (storeData) {\n             // Persistence store\n-            partsStats = (persistence) ? null : new ConcurrentHashMap<>();\n+            if (persistence) {\n+                store = new IgniteStatisticsStoreImpl(subscriptionProcessor, database,this, logSupplier);\n+                partsStats = null;\n+            }\n+            else {\n+                store = null;\n+                partsStats = new ConcurrentHashMap<>();\n+            }\n             localStats = new ConcurrentHashMap<>();\n         }\n         else {\n             // Cache only global statistics, no store\n+            store = null;\n             partsStats = null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "652ab10b366070d91d2396b14dfc2cfad786f99f"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NTYzNzA2", "url": "https://github.com/gridgain/gridgain/pull/1591#pullrequestreview-538563706", "createdAt": "2020-11-25T14:38:19Z", "commit": {"oid": "652ab10b366070d91d2396b14dfc2cfad786f99f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNDozODoxOVrOH52Vaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNDozODoxOVrOH52Vaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQyMTA5OQ==", "bodyText": "I think passing \"null\" to vararg is a misusage.\nMethod calls below are equal, in the first 2 cases a implicit empty array will be created.\nmethod((Object)null)\nmethod()\nmethod(new Object[0])", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r530421099", "createdAt": "2020-11-25T14:38:19Z", "author": {"login": "AMashenkov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/IgniteStatisticsManagerImpl.java", "diffHunk": "@@ -103,7 +105,7 @@ public IgniteStatisticsRepository statisticsRepository() {\n      * @param colNames Column names.\n      * @return Column with specified names.\n      */\n-    private Column[] filterColumns(Column[] columns, String... colNames) {\n+    private Column[] filterColumns(Column[] columns, @Nullable String... colNames) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "652ab10b366070d91d2396b14dfc2cfad786f99f"}, "originalPosition": 25}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NTcwOTAw", "url": "https://github.com/gridgain/gridgain/pull/1591#pullrequestreview-538570900", "createdAt": "2020-11-25T14:45:15Z", "commit": {"oid": "652ab10b366070d91d2396b14dfc2cfad786f99f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNDo0NToxNVrOH52o-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNDo0NToxNVrOH52o-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQyNjEwNw==", "bodyText": "static long serialVersionUid  is mandatory.", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r530426107", "createdAt": "2020-11-25T14:45:15Z", "author": {"login": "AMashenkov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/StatsKey.java", "diffHunk": "@@ -15,12 +15,13 @@\n  */\n package org.apache.ignite.internal.processors.query.stat;\n \n+import java.io.Serializable;\n import java.util.Objects;\n \n /**\n  * Statistics key.\n  */\n-public class StatsKey {\n+public class StatsKey implements Serializable {\n     /** Object schema. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "652ab10b366070d91d2396b14dfc2cfad786f99f"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM4NjAxNjU3", "url": "https://github.com/gridgain/gridgain/pull/1591#pullrequestreview-538601657", "createdAt": "2020-11-25T15:16:48Z", "commit": {"oid": "652ab10b366070d91d2396b14dfc2cfad786f99f"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNVQxNToxNjo0OFrOH54ECA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwODoxMDowOVrOH6P2oQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ0OTQxNg==", "bodyText": "this is not related to the current PR", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r530449416", "createdAt": "2020-11-25T15:16:48Z", "author": {"login": "korlov42"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/messages/StatsPropagationMessage.java", "diffHunk": "@@ -0,0 +1,150 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.ignite.internal.processors.query.stat.messages;\n+\n+import org.apache.ignite.internal.GridDirectCollection;\n+import org.apache.ignite.plugin.extensions.communication.Message;\n+import org.apache.ignite.plugin.extensions.communication.MessageCollectionItemType;\n+import org.apache.ignite.plugin.extensions.communication.MessageReader;\n+import org.apache.ignite.plugin.extensions.communication.MessageWriter;\n+\n+import java.io.Externalizable;\n+import java.nio.ByteBuffer;\n+import java.util.List;\n+import java.util.UUID;\n+\n+/**\n+ * Message to send statistics.\n+ */\n+public class StatsPropagationMessage implements Message {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "652ab10b366070d91d2396b14dfc2cfad786f99f"}, "originalPosition": 32}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDQ1OTgxNw==", "bodyText": "is there a reason to expose all these fields?", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r530459817", "createdAt": "2020-11-25T15:31:08Z", "author": {"login": "korlov42"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/messages/StatsObjectData.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.ignite.internal.processors.query.stat.messages;\n+\n+import org.apache.ignite.internal.processors.query.stat.StatsKey;\n+import org.apache.ignite.internal.processors.query.stat.StatsType;\n+import org.apache.ignite.plugin.extensions.communication.Message;\n+import org.apache.ignite.plugin.extensions.communication.MessageReader;\n+import org.apache.ignite.plugin.extensions.communication.MessageWriter;\n+\n+import java.io.Externalizable;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+\n+/**\n+ * Statistics for some object (index or table) in database,\n+ */\n+public class StatsObjectData implements Message {\n+    /** */\n+    private static final long serialVersionUID = 0L;\n+\n+    /** */\n+    public static final short TYPE_CODE = 178;\n+\n+    /** Statistics key. */\n+    public StatsKey key;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "652ab10b366070d91d2396b14dfc2cfad786f99f"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDU0MjU1MQ==", "bodyText": "the same about Message", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r530542551", "createdAt": "2020-11-25T17:35:02Z", "author": {"login": "korlov42"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/messages/StatsObjectData.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.ignite.internal.processors.query.stat.messages;\n+\n+import org.apache.ignite.internal.processors.query.stat.StatsKey;\n+import org.apache.ignite.internal.processors.query.stat.StatsType;\n+import org.apache.ignite.plugin.extensions.communication.Message;\n+import org.apache.ignite.plugin.extensions.communication.MessageReader;\n+import org.apache.ignite.plugin.extensions.communication.MessageWriter;\n+\n+import java.io.Externalizable;\n+import java.nio.ByteBuffer;\n+import java.util.Map;\n+\n+/**\n+ * Statistics for some object (index or table) in database,\n+ */\n+public class StatsObjectData implements Message {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "652ab10b366070d91d2396b14dfc2cfad786f99f"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDgzOTIwMQ==", "bodyText": "think, for now it could be just Serializable, not Message", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r530839201", "createdAt": "2020-11-26T08:10:09Z", "author": {"login": "korlov42"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/messages/StatsColumnData.java", "diffHunk": "@@ -0,0 +1,281 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.ignite.internal.processors.query.stat.messages;\n+\n+import org.apache.ignite.internal.processors.query.h2.twostep.msg.GridH2ValueMessage;\n+import org.apache.ignite.plugin.extensions.communication.Message;\n+import org.apache.ignite.plugin.extensions.communication.MessageReader;\n+import org.apache.ignite.plugin.extensions.communication.MessageWriter;\n+\n+import java.io.Externalizable;\n+import java.nio.ByteBuffer;\n+\n+public class StatsColumnData implements Message {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "652ab10b366070d91d2396b14dfc2cfad786f99f"}, "originalPosition": 26}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTM5MTUxNDkz", "url": "https://github.com/gridgain/gridgain/pull/1591#pullrequestreview-539151493", "createdAt": "2020-11-26T09:47:06Z", "commit": {"oid": "652ab10b366070d91d2396b14dfc2cfad786f99f"}, "state": "COMMENTED", "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQwOTo0NzowNlrOH6TjNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yNlQxMDoxNDoxNFrOH6UprA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDg5OTc2NA==", "bodyText": "Could it be private?", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r530899764", "createdAt": "2020-11-26T09:47:06Z", "author": {"login": "korlov42"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/IgniteStatisticsStoreImpl.java", "diffHunk": "@@ -0,0 +1,468 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.ignite.internal.processors.query.stat;\n+\n+import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.IgniteLogger;\n+import org.apache.ignite.internal.processors.cache.persistence.IgniteCacheDatabaseSharedManager;\n+import org.apache.ignite.internal.processors.cache.persistence.metastorage.MetastorageLifecycleListener;\n+import org.apache.ignite.internal.processors.cache.persistence.metastorage.ReadOnlyMetastorage;\n+import org.apache.ignite.internal.processors.cache.persistence.metastorage.ReadWriteMetastorage;\n+import org.apache.ignite.internal.processors.query.stat.messages.StatsObjectData;\n+import org.apache.ignite.internal.processors.subscription.GridInternalSubscriptionProcessor;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.BiConsumer;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Sql statistics storage in metastore.\n+ * Will store all statistics related objects with prefix \"stats.\"\n+ * Store only partition level statistics.\n+ */\n+public class IgniteStatisticsStoreImpl implements IgniteStatisticsStore, MetastorageLifecycleListener {\n+    // In local meta store it store partitions statistics by path: stats.<SCHEMA>.<OBJECT>.<partId>\n+    private static final String META_SEPARATOR = \".\";\n+\n+    /** Local metastore statistics prefix. */\n+    private static final String META_STAT_PREFIX = \"stats\";\n+\n+    /** Logger. */\n+    private IgniteLogger log;\n+\n+    /** Database shared manager. */\n+    IgniteCacheDatabaseSharedManager database;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "652ab10b366070d91d2396b14dfc2cfad786f99f"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkwMjQyNQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    return Integer.valueOf(partIdStr);\n          \n          \n            \n                    return Integer.parseInt(partIdStr);", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r530902425", "createdAt": "2020-11-26T09:51:13Z", "author": {"login": "korlov42"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/IgniteStatisticsStoreImpl.java", "diffHunk": "@@ -0,0 +1,468 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.ignite.internal.processors.query.stat;\n+\n+import org.apache.ignite.IgniteCheckedException;\n+import org.apache.ignite.IgniteLogger;\n+import org.apache.ignite.internal.processors.cache.persistence.IgniteCacheDatabaseSharedManager;\n+import org.apache.ignite.internal.processors.cache.persistence.metastorage.MetastorageLifecycleListener;\n+import org.apache.ignite.internal.processors.cache.persistence.metastorage.ReadOnlyMetastorage;\n+import org.apache.ignite.internal.processors.cache.persistence.metastorage.ReadWriteMetastorage;\n+import org.apache.ignite.internal.processors.query.stat.messages.StatsObjectData;\n+import org.apache.ignite.internal.processors.subscription.GridInternalSubscriptionProcessor;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.function.BiConsumer;\n+import java.util.function.Function;\n+import java.util.stream.Collectors;\n+\n+/**\n+ * Sql statistics storage in metastore.\n+ * Will store all statistics related objects with prefix \"stats.\"\n+ * Store only partition level statistics.\n+ */\n+public class IgniteStatisticsStoreImpl implements IgniteStatisticsStore, MetastorageLifecycleListener {\n+    // In local meta store it store partitions statistics by path: stats.<SCHEMA>.<OBJECT>.<partId>\n+    private static final String META_SEPARATOR = \".\";\n+\n+    /** Local metastore statistics prefix. */\n+    private static final String META_STAT_PREFIX = \"stats\";\n+\n+    /** Logger. */\n+    private IgniteLogger log;\n+\n+    /** Database shared manager. */\n+    IgniteCacheDatabaseSharedManager database;\n+\n+    /** Statistics repository. */\n+    private IgniteStatisticsRepository repository;\n+\n+    /** Metastorage. */\n+    private volatile ReadWriteMetastorage metastore;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param subscriptionProcessor Grid subscription processor to track metastorage availability.\n+     * @param database Database shared manager to lock db while reading/writing metastorage.\n+     * @param repository Repository to fulfill on metastore available.\n+     * @param logSupplier Logger getting function.\n+     */\n+    public IgniteStatisticsStoreImpl(\n+            GridInternalSubscriptionProcessor subscriptionProcessor,\n+            IgniteCacheDatabaseSharedManager database,\n+            IgniteStatisticsRepository repository,\n+            Function<Class<?>, IgniteLogger> logSupplier\n+    ) {\n+        this.database = database;\n+        this.repository = repository;\n+        subscriptionProcessor.registerMetastorageListener(this);\n+\n+        this.log = logSupplier.apply(IgniteStatisticsStoreImpl.class);\n+    }\n+\n+    /**\n+     * Get partition id from storage key.\n+     *\n+     * @param metaKey Meta key to get partition id from.\n+     * @return Partition id.\n+     */\n+    private int getPartitionId(String metaKey) {\n+        int partIdx = metaKey.lastIndexOf(META_SEPARATOR);\n+        String partIdStr = metaKey.substring(partIdx + 1);\n+\n+        return Integer.valueOf(partIdStr);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "652ab10b366070d91d2396b14dfc2cfad786f99f"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkxNzU1NQ==", "bodyText": "space is missing", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r530917555", "createdAt": "2020-11-26T10:13:53Z", "author": {"login": "korlov42"}, "path": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/stat/StatisticsAbstractTest.java", "diffHunk": "@@ -271,4 +283,29 @@ protected void updateStatistics(String table, String... tables) {\n             throw new IgniteException(ex);\n         }\n     }\n+\n+    /**\n+     * Get object statistics.\n+     *\n+     * @param rowsCnt Rows count.\n+     * @return Object statistics.\n+     */\n+    protected ObjectStatisticsImpl getStatistics(long rowsCnt) {\n+        ColumnStatistics columnStatistics = new ColumnStatistics(null, null,100,0, 100,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "652ab10b366070d91d2396b14dfc2cfad786f99f"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMDkxNzgwNA==", "bodyText": "space is missing", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r530917804", "createdAt": "2020-11-26T10:14:14Z", "author": {"login": "korlov42"}, "path": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/stat/StatisticsAbstractTest.java", "diffHunk": "@@ -271,4 +283,29 @@ protected void updateStatistics(String table, String... tables) {\n             throw new IgniteException(ex);\n         }\n     }\n+\n+    /**\n+     * Get object statistics.\n+     *\n+     * @param rowsCnt Rows count.\n+     * @return Object statistics.\n+     */\n+    protected ObjectStatisticsImpl getStatistics(long rowsCnt) {\n+        ColumnStatistics columnStatistics = new ColumnStatistics(null, null,100,0, 100,\n+                0, new byte[0]);\n+        return new ObjectStatisticsImpl(rowsCnt, Collections.singletonMap(\"col1\", columnStatistics));\n+    }\n+\n+    /**\n+     * Get object partition statistics.\n+     *\n+     * @param partId Partition id.\n+     * @return Object partition statistics with specified partition id.\n+     */\n+    protected ObjectPartitionStatisticsImpl getPartitionStatistics(int partId) {\n+        ColumnStatistics columnStatistics = new ColumnStatistics(null, null,100,0, 100,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "652ab10b366070d91d2396b14dfc2cfad786f99f"}, "originalPosition": 75}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "45181f017b009a524e2959fa27ee0dfbfff752a0", "author": {"user": null}, "url": "https://github.com/gridgain/gridgain/commit/45181f017b009a524e2959fa27ee0dfbfff752a0", "committedDate": "2020-11-30T13:13:56Z", "message": "GG-31027: add more test, fix minor review notices."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "aa95d5d267f92975dfef1dce0232d22e72212dfd", "author": {"user": null}, "url": "https://github.com/gridgain/gridgain/commit/aa95d5d267f92975dfef1dce0232d22e72212dfd", "committedDate": "2020-11-30T13:21:54Z", "message": "GG-31027: checkstyle fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxNjIzNjU3", "url": "https://github.com/gridgain/gridgain/pull/1591#pullrequestreview-541623657", "createdAt": "2020-12-01T08:25:52Z", "commit": {"oid": "aa95d5d267f92975dfef1dce0232d22e72212dfd"}, "state": "COMMENTED", "comments": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwODoyNTo1MlrOH8c6TA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwOToxMzoyMVrOH8fnrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE1MDI4NA==", "bodyText": "it's better to make it final, because it should not be changed", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r533150284", "createdAt": "2020-12-01T08:25:52Z", "author": {"login": "korlov42"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/ColumnStatisticsCollector.java", "diffHunk": "@@ -43,6 +44,9 @@\n     /** Maximum value. */\n     private Value max = null;\n \n+    /** Is column has complex type. */\n+    private boolean complexType;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa95d5d267f92975dfef1dce0232d22e72212dfd"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE1MzY4Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    partsStats.put(key,buildStatisticsMap(key, statistics));\n          \n          \n            \n                    partsStats.put(key, buildStatisticsMap(key, statistics));", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r533153682", "createdAt": "2020-12-01T08:31:40Z", "author": {"login": "korlov42"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/IgniteStatisticsInMemoryStoreImpl.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.ignite.internal.processors.query.stat;\n+\n+import org.apache.ignite.IgniteLogger;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+/**\n+ * Sql statistics storage in metastore.\n+ * Will store all statistics related objects with prefix \"stats.\"\n+ * Store only partition level statistics.\n+ */\n+public class IgniteStatisticsInMemoryStoreImpl implements IgniteStatisticsStore {\n+    /** Table -> Partition -> Partition Statistics map, populated only on server nodes without persistence enabled. */\n+    private final Map<StatsKey, Map<Integer, ObjectPartitionStatisticsImpl>> partsStats = new ConcurrentHashMap<>();\n+\n+    /** Logger. */\n+    private final IgniteLogger log;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param logSupplier Logger getting function.\n+     */\n+    public IgniteStatisticsInMemoryStoreImpl(Function<Class<?>, IgniteLogger> logSupplier) {\n+        this.log = logSupplier.apply(IgniteStatisticsInMemoryStoreImpl.class);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearAllStatistics() {\n+        partsStats.clear();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void replaceLocalPartitionsStatistics(\n+            StatsKey key,\n+            Collection<ObjectPartitionStatisticsImpl> statistics\n+    ) {\n+        partsStats.put(key,buildStatisticsMap(key, statistics));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa95d5d267f92975dfef1dce0232d22e72212dfd"}, "originalPosition": 57}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE1NDYzNw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        StatsKey key,\n          \n          \n            \n                        Collection<ObjectPartitionStatisticsImpl> statistics\n          \n          \n            \n                    StatsKey key,\n          \n          \n            \n                    Collection<ObjectPartitionStatisticsImpl> statistics", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r533154637", "createdAt": "2020-12-01T08:33:21Z", "author": {"login": "korlov42"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/IgniteStatisticsInMemoryStoreImpl.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.ignite.internal.processors.query.stat;\n+\n+import org.apache.ignite.IgniteLogger;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+/**\n+ * Sql statistics storage in metastore.\n+ * Will store all statistics related objects with prefix \"stats.\"\n+ * Store only partition level statistics.\n+ */\n+public class IgniteStatisticsInMemoryStoreImpl implements IgniteStatisticsStore {\n+    /** Table -> Partition -> Partition Statistics map, populated only on server nodes without persistence enabled. */\n+    private final Map<StatsKey, Map<Integer, ObjectPartitionStatisticsImpl>> partsStats = new ConcurrentHashMap<>();\n+\n+    /** Logger. */\n+    private final IgniteLogger log;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param logSupplier Logger getting function.\n+     */\n+    public IgniteStatisticsInMemoryStoreImpl(Function<Class<?>, IgniteLogger> logSupplier) {\n+        this.log = logSupplier.apply(IgniteStatisticsInMemoryStoreImpl.class);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearAllStatistics() {\n+        partsStats.clear();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void replaceLocalPartitionsStatistics(\n+            StatsKey key,\n+            Collection<ObjectPartitionStatisticsImpl> statistics", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa95d5d267f92975dfef1dce0232d22e72212dfd"}, "originalPosition": 55}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE1NjAwOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                            v = new HashMap<>();\n          \n          \n            \n                        v.put(statistics.partId(), statistics);\n          \n          \n            \n                            v = new HashMap<>();\n          \n          \n            \n                            \n          \n          \n            \n                        v.put(statistics.partId(), statistics);", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r533156009", "createdAt": "2020-12-01T08:35:39Z", "author": {"login": "korlov42"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/IgniteStatisticsInMemoryStoreImpl.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.ignite.internal.processors.query.stat;\n+\n+import org.apache.ignite.IgniteLogger;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+/**\n+ * Sql statistics storage in metastore.\n+ * Will store all statistics related objects with prefix \"stats.\"\n+ * Store only partition level statistics.\n+ */\n+public class IgniteStatisticsInMemoryStoreImpl implements IgniteStatisticsStore {\n+    /** Table -> Partition -> Partition Statistics map, populated only on server nodes without persistence enabled. */\n+    private final Map<StatsKey, Map<Integer, ObjectPartitionStatisticsImpl>> partsStats = new ConcurrentHashMap<>();\n+\n+    /** Logger. */\n+    private final IgniteLogger log;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param logSupplier Logger getting function.\n+     */\n+    public IgniteStatisticsInMemoryStoreImpl(Function<Class<?>, IgniteLogger> logSupplier) {\n+        this.log = logSupplier.apply(IgniteStatisticsInMemoryStoreImpl.class);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearAllStatistics() {\n+        partsStats.clear();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void replaceLocalPartitionsStatistics(\n+            StatsKey key,\n+            Collection<ObjectPartitionStatisticsImpl> statistics\n+    ) {\n+        partsStats.put(key,buildStatisticsMap(key, statistics));\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public Collection<ObjectPartitionStatisticsImpl> getLocalPartitionsStatistics(StatsKey key) {\n+        Map<Integer, ObjectPartitionStatisticsImpl> objStatisticsMap = partsStats.get(key);\n+\n+        return (objStatisticsMap == null) ? Collections.emptyList() : objStatisticsMap.values();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearLocalPartitionsStatistics(StatsKey key) {\n+        partsStats.remove(key);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void saveLocalPartitionStatistics(StatsKey key, ObjectPartitionStatisticsImpl statistics) {\n+        partsStats.compute(key, (k, v) -> {\n+            if (v == null)\n+                v = new HashMap<>();\n+            v.put(statistics.partId(), statistics);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa95d5d267f92975dfef1dce0232d22e72212dfd"}, "originalPosition": 77}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE2MDM1NA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                        return objPartsStat.get(partId);\n          \n          \n            \n                        return objPartsStat.get(partId);", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r533160354", "createdAt": "2020-12-01T08:42:54Z", "author": {"login": "korlov42"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/IgniteStatisticsInMemoryStoreImpl.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.ignite.internal.processors.query.stat;\n+\n+import org.apache.ignite.IgniteLogger;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+/**\n+ * Sql statistics storage in metastore.\n+ * Will store all statistics related objects with prefix \"stats.\"\n+ * Store only partition level statistics.\n+ */\n+public class IgniteStatisticsInMemoryStoreImpl implements IgniteStatisticsStore {\n+    /** Table -> Partition -> Partition Statistics map, populated only on server nodes without persistence enabled. */\n+    private final Map<StatsKey, Map<Integer, ObjectPartitionStatisticsImpl>> partsStats = new ConcurrentHashMap<>();\n+\n+    /** Logger. */\n+    private final IgniteLogger log;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param logSupplier Logger getting function.\n+     */\n+    public IgniteStatisticsInMemoryStoreImpl(Function<Class<?>, IgniteLogger> logSupplier) {\n+        this.log = logSupplier.apply(IgniteStatisticsInMemoryStoreImpl.class);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearAllStatistics() {\n+        partsStats.clear();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void replaceLocalPartitionsStatistics(\n+            StatsKey key,\n+            Collection<ObjectPartitionStatisticsImpl> statistics\n+    ) {\n+        partsStats.put(key,buildStatisticsMap(key, statistics));\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public Collection<ObjectPartitionStatisticsImpl> getLocalPartitionsStatistics(StatsKey key) {\n+        Map<Integer, ObjectPartitionStatisticsImpl> objStatisticsMap = partsStats.get(key);\n+\n+        return (objStatisticsMap == null) ? Collections.emptyList() : objStatisticsMap.values();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearLocalPartitionsStatistics(StatsKey key) {\n+        partsStats.remove(key);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void saveLocalPartitionStatistics(StatsKey key, ObjectPartitionStatisticsImpl statistics) {\n+        partsStats.compute(key, (k, v) -> {\n+            if (v == null)\n+                v = new HashMap<>();\n+            v.put(statistics.partId(), statistics);\n+\n+            return v;\n+        });\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public ObjectPartitionStatisticsImpl getLocalPartitionStatistics(StatsKey key, int partId) {\n+        Map<Integer, ObjectPartitionStatisticsImpl> objPartsStat = partsStats.get(key);\n+        if (objPartsStat != null)\n+            return objPartsStat.get(partId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa95d5d267f92975dfef1dce0232d22e72212dfd"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE2MDY1MA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    partsStats.computeIfPresent(key, (k,v) -> {\n          \n          \n            \n                        v.remove(partId);\n          \n          \n            \n                        return v;\n          \n          \n            \n                    partsStats.computeIfPresent(key, (k, v) -> {\n          \n          \n            \n                        v.remove(partId);\n          \n          \n            \n                        \n          \n          \n            \n                        return v;", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r533160650", "createdAt": "2020-12-01T08:43:25Z", "author": {"login": "korlov42"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/IgniteStatisticsInMemoryStoreImpl.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.ignite.internal.processors.query.stat;\n+\n+import org.apache.ignite.IgniteLogger;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+/**\n+ * Sql statistics storage in metastore.\n+ * Will store all statistics related objects with prefix \"stats.\"\n+ * Store only partition level statistics.\n+ */\n+public class IgniteStatisticsInMemoryStoreImpl implements IgniteStatisticsStore {\n+    /** Table -> Partition -> Partition Statistics map, populated only on server nodes without persistence enabled. */\n+    private final Map<StatsKey, Map<Integer, ObjectPartitionStatisticsImpl>> partsStats = new ConcurrentHashMap<>();\n+\n+    /** Logger. */\n+    private final IgniteLogger log;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param logSupplier Logger getting function.\n+     */\n+    public IgniteStatisticsInMemoryStoreImpl(Function<Class<?>, IgniteLogger> logSupplier) {\n+        this.log = logSupplier.apply(IgniteStatisticsInMemoryStoreImpl.class);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearAllStatistics() {\n+        partsStats.clear();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void replaceLocalPartitionsStatistics(\n+            StatsKey key,\n+            Collection<ObjectPartitionStatisticsImpl> statistics\n+    ) {\n+        partsStats.put(key,buildStatisticsMap(key, statistics));\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public Collection<ObjectPartitionStatisticsImpl> getLocalPartitionsStatistics(StatsKey key) {\n+        Map<Integer, ObjectPartitionStatisticsImpl> objStatisticsMap = partsStats.get(key);\n+\n+        return (objStatisticsMap == null) ? Collections.emptyList() : objStatisticsMap.values();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearLocalPartitionsStatistics(StatsKey key) {\n+        partsStats.remove(key);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void saveLocalPartitionStatistics(StatsKey key, ObjectPartitionStatisticsImpl statistics) {\n+        partsStats.compute(key, (k, v) -> {\n+            if (v == null)\n+                v = new HashMap<>();\n+            v.put(statistics.partId(), statistics);\n+\n+            return v;\n+        });\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public ObjectPartitionStatisticsImpl getLocalPartitionStatistics(StatsKey key, int partId) {\n+        Map<Integer, ObjectPartitionStatisticsImpl> objPartsStat = partsStats.get(key);\n+        if (objPartsStat != null)\n+            return objPartsStat.get(partId);\n+        return null;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearLocalPartitionStatistics(StatsKey key, int partId) {\n+        partsStats.computeIfPresent(key, (k,v) -> {\n+            v.remove(partId);\n+            return v;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa95d5d267f92975dfef1dce0232d22e72212dfd"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE2MDgwNA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    partsStats.computeIfPresent(key, (k,v) -> {\n          \n          \n            \n                        for (Integer partId : partIds)\n          \n          \n            \n                            v.remove(partId);\n          \n          \n            \n                        return v;\n          \n          \n            \n                    partsStats.computeIfPresent(key, (k, v) -> {\n          \n          \n            \n                        for (Integer partId : partIds)\n          \n          \n            \n                            v.remove(partId);\n          \n          \n            \n                            \n          \n          \n            \n                        return v;", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r533160804", "createdAt": "2020-12-01T08:43:40Z", "author": {"login": "korlov42"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/IgniteStatisticsInMemoryStoreImpl.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.ignite.internal.processors.query.stat;\n+\n+import org.apache.ignite.IgniteLogger;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+/**\n+ * Sql statistics storage in metastore.\n+ * Will store all statistics related objects with prefix \"stats.\"\n+ * Store only partition level statistics.\n+ */\n+public class IgniteStatisticsInMemoryStoreImpl implements IgniteStatisticsStore {\n+    /** Table -> Partition -> Partition Statistics map, populated only on server nodes without persistence enabled. */\n+    private final Map<StatsKey, Map<Integer, ObjectPartitionStatisticsImpl>> partsStats = new ConcurrentHashMap<>();\n+\n+    /** Logger. */\n+    private final IgniteLogger log;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param logSupplier Logger getting function.\n+     */\n+    public IgniteStatisticsInMemoryStoreImpl(Function<Class<?>, IgniteLogger> logSupplier) {\n+        this.log = logSupplier.apply(IgniteStatisticsInMemoryStoreImpl.class);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearAllStatistics() {\n+        partsStats.clear();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void replaceLocalPartitionsStatistics(\n+            StatsKey key,\n+            Collection<ObjectPartitionStatisticsImpl> statistics\n+    ) {\n+        partsStats.put(key,buildStatisticsMap(key, statistics));\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public Collection<ObjectPartitionStatisticsImpl> getLocalPartitionsStatistics(StatsKey key) {\n+        Map<Integer, ObjectPartitionStatisticsImpl> objStatisticsMap = partsStats.get(key);\n+\n+        return (objStatisticsMap == null) ? Collections.emptyList() : objStatisticsMap.values();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearLocalPartitionsStatistics(StatsKey key) {\n+        partsStats.remove(key);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void saveLocalPartitionStatistics(StatsKey key, ObjectPartitionStatisticsImpl statistics) {\n+        partsStats.compute(key, (k, v) -> {\n+            if (v == null)\n+                v = new HashMap<>();\n+            v.put(statistics.partId(), statistics);\n+\n+            return v;\n+        });\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public ObjectPartitionStatisticsImpl getLocalPartitionStatistics(StatsKey key, int partId) {\n+        Map<Integer, ObjectPartitionStatisticsImpl> objPartsStat = partsStats.get(key);\n+        if (objPartsStat != null)\n+            return objPartsStat.get(partId);\n+        return null;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearLocalPartitionStatistics(StatsKey key, int partId) {\n+        partsStats.computeIfPresent(key, (k,v) -> {\n+            v.remove(partId);\n+            return v;\n+        });\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearLocalPartitionsStatistics(StatsKey key, Collection<Integer> partIds) {\n+        partsStats.computeIfPresent(key, (k,v) -> {\n+            for (Integer partId : partIds)\n+                v.remove(partId);\n+            return v;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa95d5d267f92975dfef1dce0232d22e72212dfd"}, "originalPosition": 104}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE4OTA4Nw==", "bodyText": "Returning a projection of the original map could lead to an error since it is possible to clear the collection outside the store", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r533189087", "createdAt": "2020-12-01T09:08:44Z", "author": {"login": "korlov42"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/IgniteStatisticsInMemoryStoreImpl.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.ignite.internal.processors.query.stat;\n+\n+import org.apache.ignite.IgniteLogger;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+/**\n+ * Sql statistics storage in metastore.\n+ * Will store all statistics related objects with prefix \"stats.\"\n+ * Store only partition level statistics.\n+ */\n+public class IgniteStatisticsInMemoryStoreImpl implements IgniteStatisticsStore {\n+    /** Table -> Partition -> Partition Statistics map, populated only on server nodes without persistence enabled. */\n+    private final Map<StatsKey, Map<Integer, ObjectPartitionStatisticsImpl>> partsStats = new ConcurrentHashMap<>();\n+\n+    /** Logger. */\n+    private final IgniteLogger log;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param logSupplier Logger getting function.\n+     */\n+    public IgniteStatisticsInMemoryStoreImpl(Function<Class<?>, IgniteLogger> logSupplier) {\n+        this.log = logSupplier.apply(IgniteStatisticsInMemoryStoreImpl.class);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearAllStatistics() {\n+        partsStats.clear();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void replaceLocalPartitionsStatistics(\n+            StatsKey key,\n+            Collection<ObjectPartitionStatisticsImpl> statistics\n+    ) {\n+        partsStats.put(key,buildStatisticsMap(key, statistics));\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public Collection<ObjectPartitionStatisticsImpl> getLocalPartitionsStatistics(StatsKey key) {\n+        Map<Integer, ObjectPartitionStatisticsImpl> objStatisticsMap = partsStats.get(key);\n+\n+        return (objStatisticsMap == null) ? Collections.emptyList() : objStatisticsMap.values();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa95d5d267f92975dfef1dce0232d22e72212dfd"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE5NDEzMQ==", "bodyText": "it should be CHM since it's possible for two different threads to read and modify statistics by the same object concurrently", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r533194131", "createdAt": "2020-12-01T09:12:53Z", "author": {"login": "korlov42"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/IgniteStatisticsInMemoryStoreImpl.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.ignite.internal.processors.query.stat;\n+\n+import org.apache.ignite.IgniteLogger;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+/**\n+ * Sql statistics storage in metastore.\n+ * Will store all statistics related objects with prefix \"stats.\"\n+ * Store only partition level statistics.\n+ */\n+public class IgniteStatisticsInMemoryStoreImpl implements IgniteStatisticsStore {\n+    /** Table -> Partition -> Partition Statistics map, populated only on server nodes without persistence enabled. */\n+    private final Map<StatsKey, Map<Integer, ObjectPartitionStatisticsImpl>> partsStats = new ConcurrentHashMap<>();\n+\n+    /** Logger. */\n+    private final IgniteLogger log;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param logSupplier Logger getting function.\n+     */\n+    public IgniteStatisticsInMemoryStoreImpl(Function<Class<?>, IgniteLogger> logSupplier) {\n+        this.log = logSupplier.apply(IgniteStatisticsInMemoryStoreImpl.class);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearAllStatistics() {\n+        partsStats.clear();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void replaceLocalPartitionsStatistics(\n+            StatsKey key,\n+            Collection<ObjectPartitionStatisticsImpl> statistics\n+    ) {\n+        partsStats.put(key,buildStatisticsMap(key, statistics));\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public Collection<ObjectPartitionStatisticsImpl> getLocalPartitionsStatistics(StatsKey key) {\n+        Map<Integer, ObjectPartitionStatisticsImpl> objStatisticsMap = partsStats.get(key);\n+\n+        return (objStatisticsMap == null) ? Collections.emptyList() : objStatisticsMap.values();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearLocalPartitionsStatistics(StatsKey key) {\n+        partsStats.remove(key);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void saveLocalPartitionStatistics(StatsKey key, ObjectPartitionStatisticsImpl statistics) {\n+        partsStats.compute(key, (k, v) -> {\n+            if (v == null)\n+                v = new HashMap<>();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa95d5d267f92975dfef1dce0232d22e72212dfd"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzE5NDY2OQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                private Map<Integer, ObjectPartitionStatisticsImpl> buildStatisticsMap(\n          \n          \n            \n                        StatsKey key,\n          \n          \n            \n                        Collection<ObjectPartitionStatisticsImpl> statistics\n          \n          \n            \n                ) {\n          \n          \n            \n                private Map<Integer, ObjectPartitionStatisticsImpl> buildStatisticsMap(\n          \n          \n            \n                    StatsKey key,\n          \n          \n            \n                    Collection<ObjectPartitionStatisticsImpl> statistics\n          \n          \n            \n                ) {", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r533194669", "createdAt": "2020-12-01T09:13:21Z", "author": {"login": "korlov42"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/IgniteStatisticsInMemoryStoreImpl.java", "diffHunk": "@@ -0,0 +1,127 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.ignite.internal.processors.query.stat;\n+\n+import org.apache.ignite.IgniteLogger;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.function.Function;\n+\n+/**\n+ * Sql statistics storage in metastore.\n+ * Will store all statistics related objects with prefix \"stats.\"\n+ * Store only partition level statistics.\n+ */\n+public class IgniteStatisticsInMemoryStoreImpl implements IgniteStatisticsStore {\n+    /** Table -> Partition -> Partition Statistics map, populated only on server nodes without persistence enabled. */\n+    private final Map<StatsKey, Map<Integer, ObjectPartitionStatisticsImpl>> partsStats = new ConcurrentHashMap<>();\n+\n+    /** Logger. */\n+    private final IgniteLogger log;\n+\n+    /**\n+     * Constructor.\n+     *\n+     * @param logSupplier Logger getting function.\n+     */\n+    public IgniteStatisticsInMemoryStoreImpl(Function<Class<?>, IgniteLogger> logSupplier) {\n+        this.log = logSupplier.apply(IgniteStatisticsInMemoryStoreImpl.class);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearAllStatistics() {\n+        partsStats.clear();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void replaceLocalPartitionsStatistics(\n+            StatsKey key,\n+            Collection<ObjectPartitionStatisticsImpl> statistics\n+    ) {\n+        partsStats.put(key,buildStatisticsMap(key, statistics));\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public Collection<ObjectPartitionStatisticsImpl> getLocalPartitionsStatistics(StatsKey key) {\n+        Map<Integer, ObjectPartitionStatisticsImpl> objStatisticsMap = partsStats.get(key);\n+\n+        return (objStatisticsMap == null) ? Collections.emptyList() : objStatisticsMap.values();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearLocalPartitionsStatistics(StatsKey key) {\n+        partsStats.remove(key);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void saveLocalPartitionStatistics(StatsKey key, ObjectPartitionStatisticsImpl statistics) {\n+        partsStats.compute(key, (k, v) -> {\n+            if (v == null)\n+                v = new HashMap<>();\n+            v.put(statistics.partId(), statistics);\n+\n+            return v;\n+        });\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public ObjectPartitionStatisticsImpl getLocalPartitionStatistics(StatsKey key, int partId) {\n+        Map<Integer, ObjectPartitionStatisticsImpl> objPartsStat = partsStats.get(key);\n+        if (objPartsStat != null)\n+            return objPartsStat.get(partId);\n+        return null;\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearLocalPartitionStatistics(StatsKey key, int partId) {\n+        partsStats.computeIfPresent(key, (k,v) -> {\n+            v.remove(partId);\n+            return v;\n+        });\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public void clearLocalPartitionsStatistics(StatsKey key, Collection<Integer> partIds) {\n+        partsStats.computeIfPresent(key, (k,v) -> {\n+            for (Integer partId : partIds)\n+                v.remove(partId);\n+            return v;\n+        });\n+    }\n+\n+    /**\n+     * Convert collection of partition level statistics into map(partId->partStatistics).\n+     *\n+     * @param key Object key.\n+     * @param statistics Collection of tables partition statistics.\n+     * @return Partition id to statistics map.\n+     */\n+    private Map<Integer, ObjectPartitionStatisticsImpl> buildStatisticsMap(\n+            StatsKey key,\n+            Collection<ObjectPartitionStatisticsImpl> statistics\n+    ) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa95d5d267f92975dfef1dce0232d22e72212dfd"}, "originalPosition": 118}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQxNzEwMTU0", "url": "https://github.com/gridgain/gridgain/pull/1591#pullrequestreview-541710154", "createdAt": "2020-12-01T09:31:56Z", "commit": {"oid": "aa95d5d267f92975dfef1dce0232d22e72212dfd"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwOTozMTo1NlrOH8hQlg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wMVQwOTozMTo1NlrOH8hQlg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzMzIyMTUyNg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    statsRepos = new IgniteStatisticsRepositoryImpl(storeData, db, ctx.internalSubscriptionProcessor(),this,\n          \n          \n            \n                    statsRepos = new IgniteStatisticsRepositoryImpl(storeData, db, ctx.internalSubscriptionProcessor(), this,", "url": "https://github.com/gridgain/gridgain/pull/1591#discussion_r533221526", "createdAt": "2020-12-01T09:31:56Z", "author": {"login": "korlov42"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/stat/IgniteStatisticsManagerImpl.java", "diffHunk": "@@ -71,9 +72,10 @@ public IgniteStatisticsManagerImpl(GridKernalContext ctx, SchemaManager schemaMg\n         log = ctx.log(IgniteStatisticsManagerImpl.class);\n \n         boolean storeData = !(ctx.config().isClientMode() || ctx.isDaemon());\n-        boolean persistence = GridCacheUtils.isPersistenceEnabled(ctx.config());\n-        IgniteLogger repositoryLogger = ctx.log(IgniteStatisticsRepositoryImpl.class);\n-        statsRepos = new IgniteStatisticsRepositoryImpl(storeData, persistence, this, repositoryLogger);\n+        IgniteCacheDatabaseSharedManager db = (GridCacheUtils.isPersistenceEnabled(ctx.config())) ?\n+                ctx.cache().context().database() : null;\n+        statsRepos = new IgniteStatisticsRepositoryImpl(storeData, db, ctx.internalSubscriptionProcessor(),this,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "aa95d5d267f92975dfef1dce0232d22e72212dfd"}, "originalPosition": 17}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2f786bbe782af37be10c1954244c19710827be06", "author": {"user": null}, "url": "https://github.com/gridgain/gridgain/commit/2f786bbe782af37be10c1954244c19710827be06", "committedDate": "2020-12-01T11:21:34Z", "message": "GG-31027: fix concurrent access issue in statistics in memory store; style fixes."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "351278fa680ea673c8aeabe77c54396b795c855a", "author": {"user": null}, "url": "https://github.com/gridgain/gridgain/commit/351278fa680ea673c8aeabe77c54396b795c855a", "committedDate": "2020-12-01T19:31:03Z", "message": "GG-31027: codestyle fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQyNjg4NzAx", "url": "https://github.com/gridgain/gridgain/pull/1591#pullrequestreview-542688701", "createdAt": "2020-12-02T10:19:32Z", "commit": {"oid": "351278fa680ea673c8aeabe77c54396b795c855a"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "24b139f8b94099cd13c104753dc7142e93be1f9d", "author": {"user": null}, "url": "https://github.com/gridgain/gridgain/commit/24b139f8b94099cd13c104753dc7142e93be1f9d", "committedDate": "2020-12-03T11:20:03Z", "message": "GG-31027: remove abstract test class from suite"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4956, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}