{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzcwMjc4MzQx", "number": 895, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMzoxNzoxM1rODcoK5w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNDo1Nzo1N1rODefBjg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMxMzQ0ODcxOnYy", "diffSide": "RIGHT", "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/ivan/BinaryToStringClassNotFoundProblem.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0wM1QxMzoxNzoxM1rOFkw9Hg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwOToxNzozOVrOFoBo2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA5NTEzNA==", "bodyText": "Such \"todo\" looks like a violation of code style to me.\nWe should use the following format: // TODO GG-XXXXX cleanup tmp files carefully.\nWhere GG-XXXXX - is a number of issue where this will be fixed.", "url": "https://github.com/gridgain/gridgain/pull/895#discussion_r374095134", "createdAt": "2020-02-03T13:17:13Z", "author": {"login": "akuznetsov-gridgain"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/ivan/BinaryToStringClassNotFoundProblem.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache.ivan;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Constructor;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import javax.tools.JavaCompiler;\n+import javax.tools.ToolProvider;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.configuration.CacheConfiguration;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+\n+/** */\n+public class BinaryToStringClassNotFoundProblem extends GridCommonAbstractTest {\n+    /** */\n+    @Test\n+    public void testToStringInaccessibleOptimizedMarshallerClass() throws Exception {\n+        URLClassLoader extClsLdr = extClassLoader(\"Problematic.java\", \"\" +\n+            \"import java.io.Externalizable;\\n\" +\n+            \"import java.io.IOException;\\n\" +\n+            \"import java.io.ObjectInput;\\n\" +\n+            \"import java.io.ObjectOutput;\\n\" +\n+            \"\\n\" +\n+            \"public class Problematic implements Externalizable {\\n\" +\n+            \"    int x;\\n\" +\n+            \"\\n\" +\n+            \"    private Problematic() {\\n\" +\n+            \"    }\\n\" +\n+            \"\\n\" +\n+            \"    public Problematic(int x) {\\n\" +\n+            \"        this.x = x;\\n\" +\n+            \"    }\\n\" +\n+            \"\\n\" +\n+            \"    @Override public void writeExternal(ObjectOutput out) throws IOException {\\n\" +\n+            \"        out.writeInt(x);\\n\" +\n+            \"    }\\n\" +\n+            \"\\n\" +\n+            \"    @Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {\\n\" +\n+            \"        x = in.readInt();\\n\" +\n+            \"    }\\n\" +\n+            \"}\");\n+\n+        Object ext = newExtInstance(extClsLdr);\n+\n+        IgniteEx ign = startGrid(0);\n+\n+        IgniteCache<Object, Object> cache = ign.getOrCreateCache(new CacheConfiguration<>(DEFAULT_CACHE_NAME));\n+\n+        cache.put(1, new TestContainer(ext));\n+\n+        assertTrue(cache.withKeepBinary().get(1).toString()\n+            .matches(\"org.apache.ignite.internal.processors.cache.ivan.BinaryToStringClassCastProblem\\\\$TestContainer \" +\n+                \"\\\\[idHash=-?\\\\d+, hash=-?\\\\d+, x=Problematic\\\\(Class not found\\\\)]\"));\n+    }\n+\n+    /** */\n+    private URLClassLoader extClassLoader(String srcFileName, String srcCode) throws IOException {\n+        // t0d0 cleanup tmp files carefully", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ab18a21a3559de3097e0ed4c770aa5afd936b9b8"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUxNDIwMA==", "bodyText": "I cleaned up test code.", "url": "https://github.com/gridgain/gridgain/pull/895#discussion_r377514200", "createdAt": "2020-02-11T09:17:39Z", "author": {"login": "pavlukhin"}, "path": "modules/core/src/test/java/org/apache/ignite/internal/processors/cache/ivan/BinaryToStringClassNotFoundProblem.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.internal.processors.cache.ivan;\n+\n+import java.io.IOException;\n+import java.lang.reflect.Constructor;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import javax.tools.JavaCompiler;\n+import javax.tools.ToolProvider;\n+import org.apache.ignite.IgniteCache;\n+import org.apache.ignite.configuration.CacheConfiguration;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+\n+/** */\n+public class BinaryToStringClassNotFoundProblem extends GridCommonAbstractTest {\n+    /** */\n+    @Test\n+    public void testToStringInaccessibleOptimizedMarshallerClass() throws Exception {\n+        URLClassLoader extClsLdr = extClassLoader(\"Problematic.java\", \"\" +\n+            \"import java.io.Externalizable;\\n\" +\n+            \"import java.io.IOException;\\n\" +\n+            \"import java.io.ObjectInput;\\n\" +\n+            \"import java.io.ObjectOutput;\\n\" +\n+            \"\\n\" +\n+            \"public class Problematic implements Externalizable {\\n\" +\n+            \"    int x;\\n\" +\n+            \"\\n\" +\n+            \"    private Problematic() {\\n\" +\n+            \"    }\\n\" +\n+            \"\\n\" +\n+            \"    public Problematic(int x) {\\n\" +\n+            \"        this.x = x;\\n\" +\n+            \"    }\\n\" +\n+            \"\\n\" +\n+            \"    @Override public void writeExternal(ObjectOutput out) throws IOException {\\n\" +\n+            \"        out.writeInt(x);\\n\" +\n+            \"    }\\n\" +\n+            \"\\n\" +\n+            \"    @Override public void readExternal(ObjectInput in) throws IOException, ClassNotFoundException {\\n\" +\n+            \"        x = in.readInt();\\n\" +\n+            \"    }\\n\" +\n+            \"}\");\n+\n+        Object ext = newExtInstance(extClsLdr);\n+\n+        IgniteEx ign = startGrid(0);\n+\n+        IgniteCache<Object, Object> cache = ign.getOrCreateCache(new CacheConfiguration<>(DEFAULT_CACHE_NAME));\n+\n+        cache.put(1, new TestContainer(ext));\n+\n+        assertTrue(cache.withKeepBinary().get(1).toString()\n+            .matches(\"org.apache.ignite.internal.processors.cache.ivan.BinaryToStringClassCastProblem\\\\$TestContainer \" +\n+                \"\\\\[idHash=-?\\\\d+, hash=-?\\\\d+, x=Problematic\\\\(Class not found\\\\)]\"));\n+    }\n+\n+    /** */\n+    private URLClassLoader extClassLoader(String srcFileName, String srcCode) throws IOException {\n+        // t0d0 cleanup tmp files carefully", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NDA5NTEzNA=="}, "originalCommit": {"oid": "ab18a21a3559de3097e0ed4c770aa5afd936b9b8"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzMjkyMTc0OnYy", "diffSide": "RIGHT", "path": "modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java", "isResolved": false, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMFQxNDo1Nzo1OFrOFnpKwg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQwOToxNTo0MFrOFoBlQg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzExMzI4Mg==", "bodyText": "No ; for this case?", "url": "https://github.com/gridgain/gridgain/pull/895#discussion_r377113282", "createdAt": "2020-02-10T14:57:58Z", "author": {"login": "MaxLosevskoy"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java", "diffHunk": "@@ -240,6 +242,23 @@ private String toString(BinaryReaderHandles ctx, IdentityHashMap<BinaryObject, I\n         return buf.toString();\n     }\n \n+    /** */\n+    private Object fieldForToString(BinaryReaderHandles ctx, String name) {\n+        try {\n+            return field(ctx, name);\n+        }\n+        catch (Exception e) {\n+            OptimizedMarshallerInaccessibleClassException e1 =\n+                X.cause(e, OptimizedMarshallerInaccessibleClassException.class);\n+\n+            String msg = \"Failed to create a string representation\";\n+\n+            return e1 != null\n+                ? \"(\" + msg + \": class not found \" + e1.inaccessibleClass() + \")\"", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "e8fc38537c420a6a9f838afa48bc8d64f22487c6"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzExNDE1Nw==", "bodyText": "? \"(\" + msg + \": class \" + e1.inaccessibleClass() + \" not found);\"", "url": "https://github.com/gridgain/gridgain/pull/895#discussion_r377114157", "createdAt": "2020-02-10T14:59:14Z", "author": {"login": "MaxLosevskoy"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java", "diffHunk": "@@ -240,6 +242,23 @@ private String toString(BinaryReaderHandles ctx, IdentityHashMap<BinaryObject, I\n         return buf.toString();\n     }\n \n+    /** */\n+    private Object fieldForToString(BinaryReaderHandles ctx, String name) {\n+        try {\n+            return field(ctx, name);\n+        }\n+        catch (Exception e) {\n+            OptimizedMarshallerInaccessibleClassException e1 =\n+                X.cause(e, OptimizedMarshallerInaccessibleClassException.class);\n+\n+            String msg = \"Failed to create a string representation\";\n+\n+            return e1 != null\n+                ? \"(\" + msg + \": class not found \" + e1.inaccessibleClass() + \")\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzExMzI4Mg=="}, "originalCommit": {"oid": "e8fc38537c420a6a9f838afa48bc8d64f22487c6"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzUxMzI4Mg==", "bodyText": "I suppose there is no ; in both cases. There are 2 options for a message here:\n\n(Failed to create a string representation: class not found ExternalTestClass1)\n(Failed to create a string representation)", "url": "https://github.com/gridgain/gridgain/pull/895#discussion_r377513282", "createdAt": "2020-02-11T09:15:40Z", "author": {"login": "pavlukhin"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/binary/BinaryObjectExImpl.java", "diffHunk": "@@ -240,6 +242,23 @@ private String toString(BinaryReaderHandles ctx, IdentityHashMap<BinaryObject, I\n         return buf.toString();\n     }\n \n+    /** */\n+    private Object fieldForToString(BinaryReaderHandles ctx, String name) {\n+        try {\n+            return field(ctx, name);\n+        }\n+        catch (Exception e) {\n+            OptimizedMarshallerInaccessibleClassException e1 =\n+                X.cause(e, OptimizedMarshallerInaccessibleClassException.class);\n+\n+            String msg = \"Failed to create a string representation\";\n+\n+            return e1 != null\n+                ? \"(\" + msg + \": class not found \" + e1.inaccessibleClass() + \")\"", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzExMzI4Mg=="}, "originalCommit": {"oid": "e8fc38537c420a6a9f838afa48bc8d64f22487c6"}, "originalPosition": 34}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3174, "cost": 1, "resetAt": "2021-11-12T20:28:25Z"}}}