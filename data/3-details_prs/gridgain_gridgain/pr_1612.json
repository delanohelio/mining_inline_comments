{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI5NDM2MjUx", "number": 1612, "title": "GG-31881 [IGNITE-12582] Add Spring EL support in Spring Data.", "bodyText": "", "createdAt": "2020-11-30T10:05:53Z", "url": "https://github.com/gridgain/gridgain/pull/1612", "merged": true, "mergeCommit": {"oid": "bf74962cccd282949671f065cbf52ce885715fa7"}, "closed": true, "closedAt": "2021-01-12T08:09:44Z", "author": {"login": "SammyVimes"}, "timelineItems": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdosJngAFqTU1NzEzNDI1NA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdpkJZzgFqTU1ODc4NDU4OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU3MTM0MjU0", "url": "https://github.com/gridgain/gridgain/pull/1612#pullrequestreview-557134254", "createdAt": "2020-12-22T14:50:15Z", "commit": {"oid": "a0fa7a6fb3a78a7c531bdc459194bdb876297ab2"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNDo1MDoxNVrOIJ9wow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yMlQxNToxOTo0N1rOIJ-xIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMxOTk3MQ==", "bodyText": "Context is never used.", "url": "https://github.com/gridgain/gridgain/pull/1612#discussion_r547319971", "createdAt": "2020-12-22T14:50:15Z", "author": {"login": "wirtsleg"}, "path": "modules/spring-data-2.0/src/main/java/org/apache/ignite/springdata20/repository/support/IgniteRepositoryFactory.java", "diffHunk": "@@ -44,6 +49,18 @@\n     /** Ignite instance */\n     private Ignite ignite;\n \n+    /** Spring application context */\n+    private ApplicationContext ctx;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0fa7a6fb3a78a7c531bdc459194bdb876297ab2"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyMDc5MQ==", "bodyText": "Context is never used.", "url": "https://github.com/gridgain/gridgain/pull/1612#discussion_r547320791", "createdAt": "2020-12-22T14:51:47Z", "author": {"login": "wirtsleg"}, "path": "modules/spring-data-2.2/src/main/java/org/apache/ignite/springdata22/repository/support/IgniteRepositoryFactory.java", "diffHunk": "@@ -45,6 +50,18 @@\n     /** Ignite instance */\n     private Ignite ignite;\n \n+    /** Spring application context */\n+    private ApplicationContext ctx;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0fa7a6fb3a78a7c531bdc459194bdb876297ab2"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyMjY5Nw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.ignite = Ignition.start(cfg);\n          \n          \n            \n            \n          \n          \n            \n                    this.ctx = ctx;\n          \n          \n            \n            \n          \n          \n            \n                    this.beanFactory = new DefaultListableBeanFactory(ctx.getAutowireCapableBeanFactory());\n          \n          \n            \n            \n          \n          \n            \n                    this.beanExpressionContext = new BeanExpressionContext(beanFactory, null);\n          \n          \n            \n                    this(Ignition.start(cfg), ctx);", "url": "https://github.com/gridgain/gridgain/pull/1612#discussion_r547322697", "createdAt": "2020-12-22T14:55:18Z", "author": {"login": "wirtsleg"}, "path": "modules/spring-data-2.0/src/main/java/org/apache/ignite/springdata20/repository/support/IgniteRepositoryFactory.java", "diffHunk": "@@ -62,8 +85,14 @@ public IgniteRepositoryFactory(Ignite ignite) {\n      *\n      * @param cfg Ignite configuration.\n      */\n-    public IgniteRepositoryFactory(IgniteConfiguration cfg) {\n+    public IgniteRepositoryFactory(IgniteConfiguration cfg, ApplicationContext ctx) {\n         this.ignite = Ignition.start(cfg);\n+\n+        this.ctx = ctx;\n+\n+        this.beanFactory = new DefaultListableBeanFactory(ctx.getAutowireCapableBeanFactory());\n+\n+        this.beanExpressionContext = new BeanExpressionContext(beanFactory, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0fa7a6fb3a78a7c531bdc459194bdb876297ab2"}, "originalPosition": 59}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyMjk3Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    this.ignite = Ignition.start(springCfgPath);\n          \n          \n            \n            \n          \n          \n            \n                    this.ctx = ctx;\n          \n          \n            \n            \n          \n          \n            \n                    this.beanFactory = new DefaultListableBeanFactory(ctx.getAutowireCapableBeanFactory());\n          \n          \n            \n            \n          \n          \n            \n                    this.beanExpressionContext = new BeanExpressionContext(beanFactory, null);\n          \n          \n            \n                    this(Ignition.start(springCfgPath), ctx);", "url": "https://github.com/gridgain/gridgain/pull/1612#discussion_r547322976", "createdAt": "2020-12-22T14:55:48Z", "author": {"login": "wirtsleg"}, "path": "modules/spring-data-2.0/src/main/java/org/apache/ignite/springdata20/repository/support/IgniteRepositoryFactory.java", "diffHunk": "@@ -72,8 +101,14 @@ public IgniteRepositoryFactory(IgniteConfiguration cfg) {\n      *\n      * @param springCfgPath A path to Ignite configuration.\n      */\n-    public IgniteRepositoryFactory(String springCfgPath) {\n+    public IgniteRepositoryFactory(String springCfgPath, ApplicationContext ctx) {\n         this.ignite = Ignition.start(springCfgPath);\n+\n+        this.ctx = ctx;\n+\n+        this.beanFactory = new DefaultListableBeanFactory(ctx.getAutowireCapableBeanFactory());\n+\n+        this.beanExpressionContext = new BeanExpressionContext(beanFactory, null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0fa7a6fb3a78a7c531bdc459194bdb876297ab2"}, "originalPosition": 75}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyNTMwMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /**\n          \n          \n            \n                 *  evaluate the SpEL expression\n          \n          \n            \n                 *\n          \n          \n            \n                 * @param spelExpression SpEL expression\n          \n          \n            \n                 * @return the result of execution of the SpEL expression\n          \n          \n            \n                 */\n          \n          \n            \n                /**\n          \n          \n            \n                 *  Evaluate the SpEL expression\n          \n          \n            \n                 *\n          \n          \n            \n                 * @param spelExpression SpEL expression\n          \n          \n            \n                 * @return The result of execution of the SpEL expression\n          \n          \n            \n                 */", "url": "https://github.com/gridgain/gridgain/pull/1612#discussion_r547325300", "createdAt": "2020-12-22T14:59:52Z", "author": {"login": "wirtsleg"}, "path": "modules/spring-data-2.0/src/main/java/org/apache/ignite/springdata20/repository/support/IgniteRepositoryFactory.java", "diffHunk": "@@ -107,11 +142,23 @@ public IgniteRepositoryFactory(String springCfgPath) {\n         Assert.hasText(annotation.cacheName(), \"Set a name of an Apache Ignite cache using @RepositoryConfig \" +\n             \"annotation to map this repository to the underlying cache.\");\n \n-        repoToCache.put(repoItf, annotation.cacheName());\n+        String cacheName = evaluateExpression(annotation.cacheName());\n+\n+        repoToCache.put(repoItf, cacheName);\n \n         return super.getRepositoryMetadata(repoItf);\n     }\n \n+    /**\n+     *  evaluate the SpEL expression\n+     *\n+     * @param spelExpression SpEL expression\n+     * @return the result of execution of the SpEL expression\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0fa7a6fb3a78a7c531bdc459194bdb876297ab2"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyODE2MA==", "bodyText": "Javadoc is missing.", "url": "https://github.com/gridgain/gridgain/pull/1612#discussion_r547328160", "createdAt": "2020-12-22T15:05:03Z", "author": {"login": "wirtsleg"}, "path": "modules/spring-data-2.0/src/test/java/org/apache/ignite/springdata/IgniteSpringDataCrudSelfExpressionTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.springdata;\n+\n+import org.apache.ignite.springdata.misc.ApplicationConfiguration;\n+import org.apache.ignite.springdata.misc.Person;\n+import org.apache.ignite.springdata.misc.PersonExpressionRepository;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+\n+/**\n+ * Test with using repository which is configured by Spring EL\n+ */\n+public class IgniteSpringDataCrudSelfExpressionTest extends GridCommonAbstractTest {\n+    /** Repository. */\n+    private static PersonExpressionRepository repo;\n+\n+    /** Context. */\n+    private static AnnotationConfigApplicationContext ctx;\n+\n+    /** Number of entries to store */\n+    private static int CACHE_SIZE = 1000;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTestsStarted() throws Exception {\n+        super.beforeTestsStarted();\n+\n+        ctx = new AnnotationConfigApplicationContext();\n+\n+        ctx.register(ApplicationConfiguration.class);\n+\n+        ctx.refresh();\n+\n+        repo = ctx.getBean(PersonExpressionRepository.class);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTest() throws Exception {\n+        super.beforeTest();\n+\n+        fillInRepository();\n+\n+        assertEquals(CACHE_SIZE, repo.count());\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTest() throws Exception {\n+        repo.deleteAll();\n+\n+        assertEquals(0, repo.count());\n+\n+        super.afterTest();\n+    }\n+\n+    /**\n+     *\n+     */\n+    private void fillInRepository() {\n+        for (int i = 0; i < CACHE_SIZE - 5; i++) {\n+            repo.save(i, new Person(\"person\" + Integer.toHexString(i),\n+                \"lastName\" + Integer.toHexString((i + 16) % 256)));\n+        }\n+\n+        repo.save((int) repo.count(), new Person(\"uniquePerson\", \"uniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTestsStopped() throws Exception {\n+        ctx.destroy();\n+    }\n+\n+    @Test\n+    public void testPutGet() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0fa7a6fb3a78a7c531bdc459194bdb876297ab2"}, "originalPosition": 92}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyODcxNA==", "bodyText": "Javadoc is missing.", "url": "https://github.com/gridgain/gridgain/pull/1612#discussion_r547328714", "createdAt": "2020-12-22T15:05:58Z", "author": {"login": "wirtsleg"}, "path": "modules/spring-data-2.0/src/test/java/org/apache/ignite/springdata/misc/CacheNamesBean.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.springdata.misc;\n+\n+/**\n+ * The bean with cache names\n+ */\n+public class CacheNamesBean {\n+\n+    private String personCacheName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0fa7a6fb3a78a7c531bdc459194bdb876297ab2"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyODgxMA==", "bodyText": "Javadoc is missing.", "url": "https://github.com/gridgain/gridgain/pull/1612#discussion_r547328810", "createdAt": "2020-12-22T15:06:06Z", "author": {"login": "wirtsleg"}, "path": "modules/spring-data-2.0/src/test/java/org/apache/ignite/springdata/misc/CacheNamesBean.java", "diffHunk": "@@ -0,0 +1,38 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.springdata.misc;\n+\n+/**\n+ * The bean with cache names\n+ */\n+public class CacheNamesBean {\n+\n+    private String personCacheName;\n+\n+    /**\n+     * Get name of cache for persons\n+     *\n+     * @return name of cache\n+     */\n+    public String getPersonCacheName() {\n+        return personCacheName;\n+    }\n+\n+    public void setPersonCacheName(String personCacheName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0fa7a6fb3a78a7c531bdc459194bdb876297ab2"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMyOTgxOQ==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                /**\n          \n          \n            \n                 *  evaluate the SpEL expression\n          \n          \n            \n                 *\n          \n          \n            \n                 * @param spelExpression SpEL expression\n          \n          \n            \n                 * @return the result of execution of the SpEL expression\n          \n          \n            \n                 */\n          \n          \n            \n                /**\n          \n          \n            \n                 *  Evaluate the SpEL expression\n          \n          \n            \n                 *\n          \n          \n            \n                 * @param spelExpression SpEL expression\n          \n          \n            \n                 * @return The result of execution of the SpEL expression\n          \n          \n            \n                 */", "url": "https://github.com/gridgain/gridgain/pull/1612#discussion_r547329819", "createdAt": "2020-12-22T15:07:54Z", "author": {"login": "wirtsleg"}, "path": "modules/spring-data-2.2/src/main/java/org/apache/ignite/springdata22/repository/support/IgniteRepositoryFactory.java", "diffHunk": "@@ -108,11 +143,23 @@ public IgniteRepositoryFactory(String springCfgPath) {\n         Assert.hasText(annotation.cacheName(), \"Set a name of an Apache Ignite cache using @RepositoryConfig \" +\n             \"annotation to map this repository to the underlying cache.\");\n \n-        repoToCache.put(repoItf, annotation.cacheName());\n+        String cacheName = evaluateExpression(annotation.cacheName());\n+\n+        repoToCache.put(repoItf, cacheName);\n \n         return super.getRepositoryMetadata(repoItf);\n     }\n \n+    /**\n+     *  evaluate the SpEL expression\n+     *\n+     * @param spelExpression SpEL expression\n+     * @return the result of execution of the SpEL expression\n+     */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0fa7a6fb3a78a7c531bdc459194bdb876297ab2"}, "originalPosition": 96}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzMDEwNg==", "bodyText": "Javadoc is missing.", "url": "https://github.com/gridgain/gridgain/pull/1612#discussion_r547330106", "createdAt": "2020-12-22T15:08:25Z", "author": {"login": "wirtsleg"}, "path": "modules/spring-data-2.2/src/test/java/org/apache/ignite/springdata/IgniteSpringDataCrudSelfExpressionTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.springdata;\n+\n+import org.apache.ignite.springdata.misc.ApplicationConfiguration;\n+import org.apache.ignite.springdata.misc.Person;\n+import org.apache.ignite.springdata.misc.PersonExpressionRepository;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+\n+/**\n+ * Test with using repository which is configured by Spring EL\n+ */\n+public class IgniteSpringDataCrudSelfExpressionTest extends GridCommonAbstractTest {\n+    /** Repository. */\n+    private static PersonExpressionRepository repo;\n+\n+    /** Context. */\n+    private static AnnotationConfigApplicationContext ctx;\n+\n+    /** Number of entries to store */\n+    private static int CACHE_SIZE = 1000;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTestsStarted() throws Exception {\n+        super.beforeTestsStarted();\n+\n+        ctx = new AnnotationConfigApplicationContext();\n+\n+        ctx.register(ApplicationConfiguration.class);\n+\n+        ctx.refresh();\n+\n+        repo = ctx.getBean(PersonExpressionRepository.class);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTest() throws Exception {\n+        super.beforeTest();\n+\n+        fillInRepository();\n+\n+        assertEquals(CACHE_SIZE, repo.count());\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTest() throws Exception {\n+        repo.deleteAll();\n+\n+        assertEquals(0, repo.count());\n+\n+        super.afterTest();\n+    }\n+\n+    /**\n+     *\n+     */\n+    private void fillInRepository() {\n+        for (int i = 0; i < CACHE_SIZE - 5; i++) {\n+            repo.save(i, new Person(\"person\" + Integer.toHexString(i),\n+                \"lastName\" + Integer.toHexString((i + 16) % 256)));\n+        }\n+\n+        repo.save((int) repo.count(), new Person(\"uniquePerson\", \"uniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTestsStopped() throws Exception {\n+        ctx.destroy();\n+    }\n+\n+    @Test", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0fa7a6fb3a78a7c531bdc459194bdb876297ab2"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzMDIwMg==", "bodyText": "Javadoc is missing.", "url": "https://github.com/gridgain/gridgain/pull/1612#discussion_r547330202", "createdAt": "2020-12-22T15:08:37Z", "author": {"login": "wirtsleg"}, "path": "modules/spring-data-2.2/src/test/java/org/apache/ignite/springdata/misc/CacheNamesBean.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.springdata.misc;\n+\n+/**\n+ * The bean with cache names\n+ */\n+public class CacheNamesBean {\n+\n+    private String personCacheName;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0fa7a6fb3a78a7c531bdc459194bdb876297ab2"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzMDI2MA==", "bodyText": "Javadoc is missing.", "url": "https://github.com/gridgain/gridgain/pull/1612#discussion_r547330260", "createdAt": "2020-12-22T15:08:43Z", "author": {"login": "wirtsleg"}, "path": "modules/spring-data-2.2/src/test/java/org/apache/ignite/springdata/misc/CacheNamesBean.java", "diffHunk": "@@ -0,0 +1,37 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.springdata.misc;\n+\n+/**\n+ * The bean with cache names\n+ */\n+public class CacheNamesBean {\n+\n+    private String personCacheName;\n+\n+    /**\n+     *  Get name of cache for persons\n+     * @return name of cache\n+     */\n+    public String getPersonCacheName() {\n+        return personCacheName;\n+    }\n+\n+    public void setPersonCacheName(String personCacheName) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0fa7a6fb3a78a7c531bdc459194bdb876297ab2"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzMjU3MQ==", "bodyText": "Deprecated\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ctx.destroy();\n          \n          \n            \n                    ctx.close();", "url": "https://github.com/gridgain/gridgain/pull/1612#discussion_r547332571", "createdAt": "2020-12-22T15:12:56Z", "author": {"login": "wirtsleg"}, "path": "modules/spring-data-2.0/src/test/java/org/apache/ignite/springdata/IgniteSpringDataCrudSelfExpressionTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.springdata;\n+\n+import org.apache.ignite.springdata.misc.ApplicationConfiguration;\n+import org.apache.ignite.springdata.misc.Person;\n+import org.apache.ignite.springdata.misc.PersonExpressionRepository;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+\n+/**\n+ * Test with using repository which is configured by Spring EL\n+ */\n+public class IgniteSpringDataCrudSelfExpressionTest extends GridCommonAbstractTest {\n+    /** Repository. */\n+    private static PersonExpressionRepository repo;\n+\n+    /** Context. */\n+    private static AnnotationConfigApplicationContext ctx;\n+\n+    /** Number of entries to store */\n+    private static int CACHE_SIZE = 1000;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTestsStarted() throws Exception {\n+        super.beforeTestsStarted();\n+\n+        ctx = new AnnotationConfigApplicationContext();\n+\n+        ctx.register(ApplicationConfiguration.class);\n+\n+        ctx.refresh();\n+\n+        repo = ctx.getBean(PersonExpressionRepository.class);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTest() throws Exception {\n+        super.beforeTest();\n+\n+        fillInRepository();\n+\n+        assertEquals(CACHE_SIZE, repo.count());\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTest() throws Exception {\n+        repo.deleteAll();\n+\n+        assertEquals(0, repo.count());\n+\n+        super.afterTest();\n+    }\n+\n+    /**\n+     *\n+     */\n+    private void fillInRepository() {\n+        for (int i = 0; i < CACHE_SIZE - 5; i++) {\n+            repo.save(i, new Person(\"person\" + Integer.toHexString(i),\n+                \"lastName\" + Integer.toHexString((i + 16) % 256)));\n+        }\n+\n+        repo.save((int) repo.count(), new Person(\"uniquePerson\", \"uniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTestsStopped() throws Exception {\n+        ctx.destroy();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0fa7a6fb3a78a7c531bdc459194bdb876297ab2"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzMjc0Mg==", "bodyText": "Deprecated\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                    ctx.destroy();\n          \n          \n            \n                    ctx.close();", "url": "https://github.com/gridgain/gridgain/pull/1612#discussion_r547332742", "createdAt": "2020-12-22T15:13:12Z", "author": {"login": "wirtsleg"}, "path": "modules/spring-data-2.2/src/test/java/org/apache/ignite/springdata/IgniteSpringDataCrudSelfExpressionTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.springdata;\n+\n+import org.apache.ignite.springdata.misc.ApplicationConfiguration;\n+import org.apache.ignite.springdata.misc.Person;\n+import org.apache.ignite.springdata.misc.PersonExpressionRepository;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+\n+/**\n+ * Test with using repository which is configured by Spring EL\n+ */\n+public class IgniteSpringDataCrudSelfExpressionTest extends GridCommonAbstractTest {\n+    /** Repository. */\n+    private static PersonExpressionRepository repo;\n+\n+    /** Context. */\n+    private static AnnotationConfigApplicationContext ctx;\n+\n+    /** Number of entries to store */\n+    private static int CACHE_SIZE = 1000;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTestsStarted() throws Exception {\n+        super.beforeTestsStarted();\n+\n+        ctx = new AnnotationConfigApplicationContext();\n+\n+        ctx.register(ApplicationConfiguration.class);\n+\n+        ctx.refresh();\n+\n+        repo = ctx.getBean(PersonExpressionRepository.class);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTest() throws Exception {\n+        super.beforeTest();\n+\n+        fillInRepository();\n+\n+        assertEquals(CACHE_SIZE, repo.count());\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTest() throws Exception {\n+        repo.deleteAll();\n+\n+        assertEquals(0, repo.count());\n+\n+        super.afterTest();\n+    }\n+\n+    /**\n+     *\n+     */\n+    private void fillInRepository() {\n+        for (int i = 0; i < CACHE_SIZE - 5; i++) {\n+            repo.save(i, new Person(\"person\" + Integer.toHexString(i),\n+                \"lastName\" + Integer.toHexString((i + 16) % 256)));\n+        }\n+\n+        repo.save((int) repo.count(), new Person(\"uniquePerson\", \"uniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTestsStopped() throws Exception {\n+        ctx.destroy();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0fa7a6fb3a78a7c531bdc459194bdb876297ab2"}, "originalPosition": 88}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0NzMzNjQ4Mw==", "bodyText": "This test has a lot of strange logic.\n\nFills cache with unique and non-unique elements without any reason\nChecks for saving without id\n\nIn my opinion, it should just check repository bean is not null and do 1 put, 1 get (just in case).", "url": "https://github.com/gridgain/gridgain/pull/1612#discussion_r547336483", "createdAt": "2020-12-22T15:19:47Z", "author": {"login": "wirtsleg"}, "path": "modules/spring-data-2.2/src/test/java/org/apache/ignite/springdata/IgniteSpringDataCrudSelfExpressionTest.java", "diffHunk": "@@ -0,0 +1,112 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.springdata;\n+\n+import org.apache.ignite.springdata.misc.ApplicationConfiguration;\n+import org.apache.ignite.springdata.misc.Person;\n+import org.apache.ignite.springdata.misc.PersonExpressionRepository;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+\n+/**\n+ * Test with using repository which is configured by Spring EL\n+ */\n+public class IgniteSpringDataCrudSelfExpressionTest extends GridCommonAbstractTest {\n+    /** Repository. */\n+    private static PersonExpressionRepository repo;\n+\n+    /** Context. */\n+    private static AnnotationConfigApplicationContext ctx;\n+\n+    /** Number of entries to store */\n+    private static int CACHE_SIZE = 1000;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTestsStarted() throws Exception {\n+        super.beforeTestsStarted();\n+\n+        ctx = new AnnotationConfigApplicationContext();\n+\n+        ctx.register(ApplicationConfiguration.class);\n+\n+        ctx.refresh();\n+\n+        repo = ctx.getBean(PersonExpressionRepository.class);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTest() throws Exception {\n+        super.beforeTest();\n+\n+        fillInRepository();\n+\n+        assertEquals(CACHE_SIZE, repo.count());\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTest() throws Exception {\n+        repo.deleteAll();\n+\n+        assertEquals(0, repo.count());\n+\n+        super.afterTest();\n+    }\n+\n+    /**\n+     *\n+     */\n+    private void fillInRepository() {\n+        for (int i = 0; i < CACHE_SIZE - 5; i++) {\n+            repo.save(i, new Person(\"person\" + Integer.toHexString(i),\n+                \"lastName\" + Integer.toHexString((i + 16) % 256)));\n+        }\n+\n+        repo.save((int) repo.count(), new Person(\"uniquePerson\", \"uniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+        repo.save((int) repo.count(), new Person(\"nonUniquePerson\", \"nonUniqueLastName\"));\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTestsStopped() throws Exception {\n+        ctx.destroy();\n+    }\n+\n+    @Test\n+    public void testPutGet() {\n+        Person person = new Person(\"some_name\", \"some_surname\");\n+\n+        int id = CACHE_SIZE + 1;\n+\n+        assertEquals(person, repo.save(id, person));\n+\n+        assertTrue(repo.existsById(id));\n+\n+        assertEquals(person, repo.findById(id).get());\n+\n+        try {\n+            repo.save(person);\n+\n+            fail(\"Managed to save a Person without ID\");\n+        }\n+        catch (UnsupportedOperationException e) {\n+            //excepted\n+        }\n+    }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a0fa7a6fb3a78a7c531bdc459194bdb876297ab2"}, "originalPosition": 111}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1dd2828f62ec51f56a0e225ac83672a40bd118dc", "author": {"user": {"login": "schernolyas", "name": "Sergey Chernolyas"}}, "url": "https://github.com/gridgain/gridgain/commit/1dd2828f62ec51f56a0e225ac83672a40bd118dc", "committedDate": "2020-12-24T15:34:41Z", "message": "GG-31881 [IGNITE-12582] Add Spring EL support in Spring Data."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd5cfc50fba706eaab759af0f59d4998bacf8b87", "author": {"user": {"login": "SammyVimes", "name": "Semyon Danilov"}}, "url": "https://github.com/gridgain/gridgain/commit/cd5cfc50fba706eaab759af0f59d4998bacf8b87", "committedDate": "2020-12-24T15:34:41Z", "message": "."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "76ec5ff649042d7ee06b3264f769fe85b8a04aff", "author": {"user": {"login": "SammyVimes", "name": "Semyon Danilov"}}, "url": "https://github.com/gridgain/gridgain/commit/76ec5ff649042d7ee06b3264f769fe85b8a04aff", "committedDate": "2020-12-24T15:34:41Z", "message": "GG-31881 Review fixes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "57a5773f9b0e61ba3b32211838b13e378420200d", "author": {"user": {"login": "SammyVimes", "name": "Semyon Danilov"}}, "url": "https://github.com/gridgain/gridgain/commit/57a5773f9b0e61ba3b32211838b13e378420200d", "committedDate": "2020-12-23T14:00:02Z", "message": "GG-31881 Review fixes"}, "afterCommit": {"oid": "76ec5ff649042d7ee06b3264f769fe85b8a04aff", "author": {"user": {"login": "SammyVimes", "name": "Semyon Danilov"}}, "url": "https://github.com/gridgain/gridgain/commit/76ec5ff649042d7ee06b3264f769fe85b8a04aff", "committedDate": "2020-12-24T15:34:41Z", "message": "GG-31881 Review fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTU4Nzg0NTg5", "url": "https://github.com/gridgain/gridgain/pull/1612#pullrequestreview-558784589", "createdAt": "2020-12-25T08:34:17Z", "commit": {"oid": "76ec5ff649042d7ee06b3264f769fe85b8a04aff"}, "state": "APPROVED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQwODozNDoxOFrOILaJsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0yNVQwODozNDo0OFrOILaKDw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODgzMzcxMw==", "bodyText": "Let's simplify this test a bit.\n\n  \n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                @Test\n          \n          \n            \n                public void testFailIfSaveWithoutId() {\n          \n          \n            \n                    assertNotNull(repo);\n          \n          \n            \n            \n          \n          \n            \n                    Person person = new Person(\"some_name\", \"some_surname\");\n          \n          \n            \n            \n          \n          \n            \n                    try {\n          \n          \n            \n                        repo.save(person);\n          \n          \n            \n            \n          \n          \n            \n                        fail(\"Managed to save a Person without ID\");\n          \n          \n            \n                    }\n          \n          \n            \n                    catch (UnsupportedOperationException e) {\n          \n          \n            \n                        //excepted\n          \n          \n            \n                    }\n          \n          \n            \n                @Test(expected = UnsupportedOperationException.class)\n          \n          \n            \n                public void testFailIfSaveWithoutId() {\n          \n          \n            \n                    assertNotNull(repo);\n          \n          \n            \n            \n          \n          \n            \n                    Person person = new Person(\"some_name\", \"some_surname\");\n          \n          \n            \n            \n          \n          \n            \n                    repo.save(person);", "url": "https://github.com/gridgain/gridgain/pull/1612#discussion_r548833713", "createdAt": "2020-12-25T08:34:18Z", "author": {"login": "wirtsleg"}, "path": "modules/spring-data-2.0/src/test/java/org/apache/ignite/springdata/IgniteSpringDataCrudSelfExpressionTest.java", "diffHunk": "@@ -0,0 +1,104 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.springdata;\n+\n+import org.apache.ignite.springdata.misc.ApplicationConfiguration;\n+import org.apache.ignite.springdata.misc.Person;\n+import org.apache.ignite.springdata.misc.PersonExpressionRepository;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+\n+/**\n+ * Test with using repository which is configured by Spring EL\n+ */\n+public class IgniteSpringDataCrudSelfExpressionTest extends GridCommonAbstractTest {\n+    /** Repository. */\n+    private static PersonExpressionRepository repo;\n+\n+    /** Context. */\n+    private static AnnotationConfigApplicationContext ctx;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTestsStarted() throws Exception {\n+        super.beforeTestsStarted();\n+\n+        ctx = new AnnotationConfigApplicationContext();\n+\n+        ctx.register(ApplicationConfiguration.class);\n+\n+        ctx.refresh();\n+\n+        repo = ctx.getBean(PersonExpressionRepository.class);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTest() throws Exception {\n+        super.beforeTest();\n+\n+        assertEquals(0, repo.count());\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTest() throws Exception {\n+        repo.deleteAll();\n+\n+        assertEquals(0, repo.count());\n+\n+        super.afterTest();\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTestsStopped() throws Exception {\n+        ctx.close();\n+    }\n+\n+    /**\n+     * Test that put and get operations are working.\n+     */\n+    @Test\n+    public void testPutGet() {\n+        assertNotNull(repo);\n+\n+        Person person = new Person(\"some_name\", \"some_surname\");\n+\n+        assertEquals(person, repo.save(0, person));\n+\n+        assertTrue(repo.existsById(0));\n+\n+        assertEquals(person, repo.findById(0).get());\n+    }\n+\n+    /**\n+     * Test that saving without an id fails.\n+     */\n+    @Test\n+    public void testFailIfSaveWithoutId() {\n+        assertNotNull(repo);\n+\n+        Person person = new Person(\"some_name\", \"some_surname\");\n+\n+        try {\n+            repo.save(person);\n+\n+            fail(\"Managed to save a Person without ID\");\n+        }\n+        catch (UnsupportedOperationException e) {\n+            //excepted\n+        }", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76ec5ff649042d7ee06b3264f769fe85b8a04aff"}, "originalPosition": 102}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0ODgzMzgwNw==", "bodyText": "And this too.", "url": "https://github.com/gridgain/gridgain/pull/1612#discussion_r548833807", "createdAt": "2020-12-25T08:34:48Z", "author": {"login": "wirtsleg"}, "path": "modules/spring-data-2.2/src/test/java/org/apache/ignite/springdata/IgniteSpringDataCrudSelfExpressionTest.java", "diffHunk": "@@ -0,0 +1,99 @@\n+/*\n+ * Copyright 2020 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.ignite.springdata;\n+\n+import org.apache.ignite.springdata.misc.ApplicationConfiguration;\n+import org.apache.ignite.springdata.misc.Person;\n+import org.apache.ignite.springdata.misc.PersonExpressionRepository;\n+import org.apache.ignite.testframework.junits.common.GridCommonAbstractTest;\n+import org.junit.Test;\n+import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n+\n+/**\n+ * Test with using repository which is configured by Spring EL\n+ */\n+public class IgniteSpringDataCrudSelfExpressionTest extends GridCommonAbstractTest {\n+    /** Repository. */\n+    private static PersonExpressionRepository repo;\n+\n+    /** Context. */\n+    private static AnnotationConfigApplicationContext ctx;\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTestsStarted() throws Exception {\n+        super.beforeTestsStarted();\n+\n+        ctx = new AnnotationConfigApplicationContext();\n+\n+        ctx.register(ApplicationConfiguration.class);\n+\n+        ctx.refresh();\n+\n+        repo = ctx.getBean(PersonExpressionRepository.class);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void beforeTest() throws Exception {\n+        super.beforeTest();\n+\n+        assertEquals(0, repo.count());\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override protected void afterTest() throws Exception {\n+        repo.deleteAll();\n+\n+        assertEquals(0, repo.count());\n+\n+        super.afterTest();\n+    }\n+\n+    /**\n+     * Test that put and get operations are working.\n+     */\n+    @Test\n+    public void testPutGet() {\n+        assertNotNull(repo);\n+\n+        Person person = new Person(\"some_name\", \"some_surname\");\n+\n+        assertEquals(person, repo.save(0, person));\n+\n+        assertTrue(repo.existsById(0));\n+\n+        assertEquals(person, repo.findById(0).get());\n+    }\n+\n+    /**\n+     * Test that saving without an id fails.\n+     */\n+    @Test\n+    public void testFailIfSaveWithoutId() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "76ec5ff649042d7ee06b3264f769fe85b8a04aff"}, "originalPosition": 85}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4828, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}