{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc3MjQ2MTY3", "number": 939, "title": "GG-26598 Expose per query memory usage", "bodyText": "", "createdAt": "2020-02-19T16:05:55Z", "url": "https://github.com/gridgain/gridgain/pull/939", "merged": true, "mergeCommit": {"oid": "58aaab5d7ab3056fff642d2a0c2371dedf85d500"}, "closed": true, "closedAt": "2020-03-17T09:19:04Z", "author": {"login": "korlov42"}, "timelineItems": {"totalCount": 72, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcGHrkSgBqjMwNTUwMTUyMjI=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcOOP6-gH2gAyMzc3MjQ2MTY3OjExYjM3NGZkNGU0MGMxNjY5MTc0ZDk3ZGE2Y2I0YTU5OWE1MmVhMjk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "10f710e884f692372a0d96aee16b45661e6453ec", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/10f710e884f692372a0d96aee16b45661e6453ec", "committedDate": "2020-02-20T09:01:18Z", "message": "fix docs and style"}, "afterCommit": {"oid": "1d97ccf67649703a38c232b227c1f645fadfbb0b", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/1d97ccf67649703a38c232b227c1f645fadfbb0b", "committedDate": "2020-02-20T09:26:14Z", "message": "fix docs and style"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "93ba044a008a471a78a15fcad6230247ef8ca8db", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/93ba044a008a471a78a15fcad6230247ef8ca8db", "committedDate": "2020-02-20T11:43:46Z", "message": "fix NPE when quota not set"}, "afterCommit": {"oid": "8afb926f4b39deadf6d769ee3d28b48f0c32191d", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/8afb926f4b39deadf6d769ee3d28b48f0c32191d", "committedDate": "2020-02-20T12:54:41Z", "message": "fix NPE when quota not set"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzYxODg0NTA5", "url": "https://github.com/gridgain/gridgain/pull/939#pullrequestreview-361884509", "createdAt": "2020-02-20T13:07:00Z", "commit": {"oid": "8afb926f4b39deadf6d769ee3d28b48f0c32191d"}, "state": "COMMENTED", "comments": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxMzowNzowMFrOFsSlcQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0yMFQxNDowNDoyMFrOFsUgiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk4NjE2MQ==", "bodyText": "Can we encapsulate the tracking-related fields and logic into a dedicated object? Like IgniteTrace in gg-27202? I think we need to separate statistics gathering from the actual free memory tracking.", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r381986161", "createdAt": "2020-02-20T13:07:00Z", "author": {"login": "rkondakov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java", "diffHunk": "@@ -50,6 +51,18 @@\n     /** Memory reserved by query. */\n     private long reserved;\n \n+    /** Maximum number of bytes reserved by query. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8afb926f4b39deadf6d769ee3d28b48f0c32191d"}, "originalPosition": 21}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk5MTkyMQ==", "bodyText": "Should we track memory usage for statistics purposes even when the actual memory tracking (OOM prevention) is turned off?", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r381991921", "createdAt": "2020-02-20T13:18:53Z", "author": {"login": "rkondakov"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/query/RunningQueryManager.java", "diffHunk": "@@ -125,7 +148,8 @@ public Long register(String qry, GridCacheQueryType qryType, String schemaName,\n             schemaName,\n             System.currentTimeMillis(),\n             cancel,\n-            loc\n+            loc,\n+            memTracker == null ? DUMMY_TRACKER : memTracker", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8afb926f4b39deadf6d769ee3d28b48f0c32191d"}, "originalPosition": 45}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MTk5Mzk3Mg==", "bodyText": "Typo:\n\nofloaded", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r381993972", "createdAt": "2020-02-20T13:22:57Z", "author": {"login": "rkondakov"}, "path": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/oom/DiskSpillingMemoryTrackerTest.java", "diffHunk": "@@ -0,0 +1,84 @@\n+/*\n+ * Copyright 2019 GridGain Systems, Inc. and Contributors.\n+ *\n+ * Licensed under the GridGain Community Edition License (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *     https://www.gridgain.com/products/software/community-edition/gridgain-community-edition-license\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.ignite.internal.processors.query.oom;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.ignite.internal.IgniteEx;\n+import org.apache.ignite.internal.processors.query.GridQueryMemoryTracker;\n+import org.apache.ignite.internal.processors.query.h2.QueryMemoryManager;\n+import org.apache.ignite.testframework.GridTestUtils;\n+import org.junit.Test;\n+\n+/**\n+ * Test cases to ensure that ofloaded data properly tracked by memory tracker.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8afb926f4b39deadf6d769ee3d28b48f0c32191d"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAwNTA3MQ==", "bodyText": "Redundant initialization", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r382005071", "createdAt": "2020-02-20T13:43:05Z", "author": {"login": "rkondakov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/disk/AbstractExternalResult.java", "diffHunk": "@@ -25,23 +25,25 @@\n /**\n  * Basic class for external result.\n  */\n-@SuppressWarnings({\"MissortedModifiers\", \"WeakerAccess\", \"ForLoopReplaceableByForEach\"})\n+@SuppressWarnings({\"WeakerAccess\", \"ForLoopReplaceableByForEach\"})\n public abstract class AbstractExternalResult<T> implements AutoCloseable {\n-\n     /** Logger. */\n     protected final IgniteLogger log;\n \n     /** Current size in rows. */\n     protected int size;\n \n+    /** */\n+    protected long swapped = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8afb926f4b39deadf6d769ee3d28b48f0c32191d"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAxNjE0MA==", "bodyText": "In my opinion it is not the best way to track data amount that spilled to disk. I can see two drawbacks here:\n\nCode in external results became more complicated because of the tracking part\nIt is easy very easy to make a mistake and forget to count some disk offloads with this approach. Like it happened for ExternalResultHashIndex\n\nI think that using specialized FileIoFactory for tracking spilled files is more solid solution here. See example TrackableFileIoFactory in gg-27202 branch.", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r382016140", "createdAt": "2020-02-20T14:01:59Z", "author": {"login": "rkondakov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/disk/PlainExternalResult.java", "diffHunk": "@@ -115,16 +115,19 @@ private void spillRows() {\n         if (F.isEmpty(rowBuff))\n             return;\n \n-        data.store(rowBuff);\n+        long swapped = data.store(rowBuff);\n+\n+        memTracker.swap(swapped);\n+        this.swapped += swapped;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8afb926f4b39deadf6d769ee3d28b48f0c32191d"}, "originalPosition": 17}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAxNzAzMQ==", "bodyText": "Seems like this field is not used here", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r382017031", "createdAt": "2020-02-20T14:03:24Z", "author": {"login": "rkondakov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/twostep/GridReduceQueryExecutor.java", "diffHunk": "@@ -126,7 +127,10 @@\n     private IgniteLogger log;\n \n     /** */\n-    private final AtomicLong qryIdGen = new AtomicLong();\n+    private final RunningQueryManager runningQryMgr;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8afb926f4b39deadf6d769ee3d28b48f0c32191d"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MjAxNzY3NQ==", "bodyText": "Redundant initialization", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r382017675", "createdAt": "2020-02-20T14:04:20Z", "author": {"login": "rkondakov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2ManagedGroupByData.java", "diffHunk": "@@ -57,6 +57,9 @@\n     /** */\n     private int size;\n \n+    /** */\n+    private long swapped = 0;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8afb926f4b39deadf6d769ee3d28b48f0c32191d"}, "originalPosition": 14}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "befcf5000dc94af7e9952b036738a512a1939529", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/befcf5000dc94af7e9952b036738a512a1939529", "committedDate": "2020-02-28T08:07:46Z", "message": "DRAFT: mem metrics for system view"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "071af2afe1ee9ab728f45ee0a09afab7150e6783", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/071af2afe1ee9ab728f45ee0a09afab7150e6783", "committedDate": "2020-02-28T09:07:12Z", "message": "fix compilation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8dae651f667727d4c1497f24def5ebe7fd56844d", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/8dae651f667727d4c1497f24def5ebe7fd56844d", "committedDate": "2020-03-01T18:20:04Z", "message": "another wip commit"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "26ab675233017039d37fffa27bfab8e3d3fb5939", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/26ab675233017039d37fffa27bfab8e3d3fb5939", "committedDate": "2020-02-25T08:26:04Z", "message": "fix failed tests"}, "afterCommit": {"oid": "8dae651f667727d4c1497f24def5ebe7fd56844d", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/8dae651f667727d4c1497f24def5ebe7fd56844d", "committedDate": "2020-03-01T18:20:04Z", "message": "another wip commit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40d79418306f334e74a4901a2890e4dc887a0620", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/40d79418306f334e74a4901a2890e4dc887a0620", "committedDate": "2020-03-01T20:26:57Z", "message": "refactoring"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0cb6b879462cf944b6f3e041eec8cd30f3bacc60", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/0cb6b879462cf944b6f3e041eec8cd30f3bacc60", "committedDate": "2020-03-01T21:03:20Z", "message": "minors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e8f075e675b8764f1f7b686d27bfa9251692fe70", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/e8f075e675b8764f1f7b686d27bfa9251692fe70", "committedDate": "2020-03-01T21:16:13Z", "message": "fix compilation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ae76c3e616933cbef7a7a912082106a2db955eee", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/ae76c3e616933cbef7a7a912082106a2db955eee", "committedDate": "2020-03-02T10:17:34Z", "message": "fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9708e6beabd3cc7b48295fd604f4e940608f5385", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/9708e6beabd3cc7b48295fd604f4e940608f5385", "committedDate": "2020-03-02T11:10:11Z", "message": "fix npe"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5f19b17dce07321fc387912b787271a23858d65b", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/5f19b17dce07321fc387912b787271a23858d65b", "committedDate": "2020-03-02T11:42:28Z", "message": "fix JDBC quota test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d97f90f2eae8de2ae547543cd97b827cc70ff6d", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/9d97f90f2eae8de2ae547543cd97b827cc70ff6d", "committedDate": "2020-03-02T11:51:28Z", "message": "rename interface"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MTcwMDkw", "url": "https://github.com/gridgain/gridgain/pull/939#pullrequestreview-367170090", "createdAt": "2020-03-02T12:44:53Z", "commit": {"oid": "9708e6beabd3cc7b48295fd604f4e940608f5385"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMjo0NDo1M1rOFweMuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMjo0NDo1M1rOFweMuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM3MDc0NA==", "bodyText": "non-atomic update\nRace is possible while updating  globalQuota and globalQuotaStr from different threads.", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r386370744", "createdAt": "2020-03-02T12:44:53Z", "author": {"login": "AMashenkov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryManager.java", "diffHunk": "@@ -244,9 +228,20 @@ public boolean onQuotaExceeded(long size) {\n      *\n      * @param newGlobalQuota New global query quota.\n      */\n-    public synchronized void setGlobalQuota(String newGlobalQuota) {\n-        this.globalQuota = U.parseBytes(newGlobalQuota);\n-        this.globalQuotaStr = newGlobalQuota;\n+    public void setGlobalQuota(String newGlobalQuota) {\n+        long globalQuota0 = U.parseBytes(newGlobalQuota);\n+        long heapSize = Runtime.getRuntime().maxMemory();\n+\n+        A.ensure(\n+            heapSize > globalQuota0,\n+            \"Sql global memory quota can't be more than heap size: heapSize=\"\n+                + heapSize + \", quotaSize=\" + globalQuota0\n+        );\n+\n+        A.ensure(globalQuota0 >= 0, \"Sql global memory quota must be >= 0: quotaSize=\" + globalQuota0);\n+\n+        globalQuota = globalQuota0;\n+        globalQuotaStr = newGlobalQuota;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9708e6beabd3cc7b48295fd604f4e940608f5385"}, "originalPosition": 159}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY3MTc0NDkx", "url": "https://github.com/gridgain/gridgain/pull/939#pullrequestreview-367174491", "createdAt": "2020-03-02T12:52:47Z", "commit": {"oid": "9708e6beabd3cc7b48295fd604f4e940608f5385"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMjo1Mjo0N1rOFwea2Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wMlQxMjo1Mjo0N1rOFwea2Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4NjM3NDM2MQ==", "bodyText": "It looks like there is no need to mark method with 'synchronized' just to read volatile field", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r386374361", "createdAt": "2020-03-02T12:52:47Z", "author": {"login": "AMashenkov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java", "diffHunk": "@@ -179,21 +182,36 @@ private boolean onQuotaExceeded() {\n     private void releaseFromParent() {\n         long toReleaseFromParent = reservedFromParent - reserved;\n \n-        parent.released(toReleaseFromParent);\n+        parent.release(toReleaseFromParent);\n \n         reservedFromParent -= toReleaseFromParent;\n \n         assert reservedFromParent >= 0 : reservedFromParent;\n     }\n \n     /** {@inheritDoc} */\n-    @Override public synchronized long memoryReserved() {\n+    @Override public synchronized long reserved() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9708e6beabd3cc7b48295fd604f4e940608f5385"}, "originalPosition": 155}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ca1d2aa85a4838610adaf423450b61a7b8fc90e8", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/ca1d2aa85a4838610adaf423450b61a7b8fc90e8", "committedDate": "2020-03-03T06:05:41Z", "message": "another attempt to get green visa"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "48cd37e2dc468afc04afc82fa9ae2a97726a9609", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/48cd37e2dc468afc04afc82fa9ae2a97726a9609", "committedDate": "2020-03-03T10:05:57Z", "message": "save the progress"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb4b5c82c97cafa5c74fd6f7c482b1aa63f308de", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/cb4b5c82c97cafa5c74fd6f7c482b1aa63f308de", "committedDate": "2020-03-03T11:16:06Z", "message": "fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "dc3575f1dcde70d7b1f6840050fd91bd365038d7", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/dc3575f1dcde70d7b1f6840050fd91bd365038d7", "committedDate": "2020-03-03T13:01:34Z", "message": "save the progress"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "317c5592198e02352234a8f71c1bbb2681b0040b", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/317c5592198e02352234a8f71c1bbb2681b0040b", "committedDate": "2020-03-03T13:35:21Z", "message": "minors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2262f9886257de14eb765f703bbe903619dd11a1", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/2262f9886257de14eb765f703bbe903619dd11a1", "committedDate": "2020-03-04T07:21:30Z", "message": "fix failed tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbb183f415294196ec3288504d848e3175be5eaa", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/fbb183f415294196ec3288504d848e3175be5eaa", "committedDate": "2020-03-04T09:39:11Z", "message": "minors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68df8071e510416aaa076f46244be540f406fd13", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/68df8071e510416aaa076f46244be540f406fd13", "committedDate": "2020-03-04T13:15:45Z", "message": "save the progress"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12d75e939a64115b366a9c88b0f06c2d62f84109", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/12d75e939a64115b366a9c88b0f06c2d62f84109", "committedDate": "2020-03-04T13:45:34Z", "message": "save the progress"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a8260e09a51a92322876a84d59a41358019bb79d", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/a8260e09a51a92322876a84d59a41358019bb79d", "committedDate": "2020-03-04T14:40:34Z", "message": "minors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "de3dd2ae3f106045b4340273542ef81211931b6a", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/de3dd2ae3f106045b4340273542ef81211931b6a", "committedDate": "2020-03-04T16:24:38Z", "message": "minors"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NDIxNzg0", "url": "https://github.com/gridgain/gridgain/pull/939#pullrequestreview-369421784", "createdAt": "2020-03-05T09:43:26Z", "commit": {"oid": "de3dd2ae3f106045b4340273542ef81211931b6a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTo0MzoyNlrOFyMlgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTo0MzoyNlrOFyMlgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3OTMzMQ==", "bodyText": "H2 has function to close Autoclosables: IOUtils.closeSilently()", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r388179331", "createdAt": "2020-03-05T09:43:26Z", "author": {"login": "AMashenkov"}, "path": "modules/h2/src/main/java/org/h2/index/HashJoinIndex.java", "diffHunk": "@@ -508,12 +507,15 @@ private boolean checkConditions(Session ses, Row r) {\n     public void clearHashTable(Session session) {\n         hashTbl = null;\n \n-        if (memoryReserved > 0) {\n-            assert session.memoryTracker() != null;\n-\n-            session.memoryTracker().released(memoryReserved);\n+        if (tracker != null) {\n+            try {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de3dd2ae3f106045b4340273542ef81211931b6a"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NDIyNjM1", "url": "https://github.com/gridgain/gridgain/pull/939#pullrequestreview-369422635", "createdAt": "2020-03-05T09:44:40Z", "commit": {"oid": "de3dd2ae3f106045b4340273542ef81211931b6a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTo0NDo0MFrOFyMoBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTo0NDo0MFrOFyMoBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE3OTk3NQ==", "bodyText": "Let's help GC in anyway\nif (values != null)\nvalues = null;\nif (tracker != null)\ntracker.release ....", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r388179975", "createdAt": "2020-03-05T09:44:40Z", "author": {"login": "AMashenkov"}, "path": "modules/h2/src/main/java/org/h2/expression/aggregate/AggregateDataCollecting.java", "diffHunk": "@@ -153,17 +155,16 @@ public Value getSharedArgument() {\n \n     /** {@inheritDoc} */\n     @Override public void cleanup(Session ses) {\n-        H2MemoryTracker memTracker;\n-        if (values != null && (memTracker = ses.memoryTracker()) != null) {\n+        if (values != null && tracker != null) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de3dd2ae3f106045b4340273542ef81211931b6a"}, "originalPosition": 38}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NDI4NTI5", "url": "https://github.com/gridgain/gridgain/pull/939#pullrequestreview-369428529", "createdAt": "2020-03-05T09:52:42Z", "commit": {"oid": "de3dd2ae3f106045b4340273542ef81211931b6a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTo1Mjo0MlrOFyM6CA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTo1Mjo0MlrOFyM6CA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4NDU4NA==", "bodyText": "This looks non optimal.\nLet's make stacktrace analyse as a second condition.\nif (canceled && X.hasCause...)\nAlso this conditions can be checked after 'errorCode' check.", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r388184584", "createdAt": "2020-03-05T09:52:42Z", "author": {"login": "AMashenkov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2ResultSetIterator.java", "diffHunk": "@@ -162,6 +163,9 @@ private boolean fetchPage() throws IgniteCheckedException {\n                     return false;\n             }\n             catch (SQLException e) {\n+                if (X.hasCause(e, QueryMemoryTracker.TrackerWasClosedException.class) && canceled)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de3dd2ae3f106045b4340273542ef81211931b6a"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NDI5MzI3", "url": "https://github.com/gridgain/gridgain/pull/939#pullrequestreview-369429327", "createdAt": "2020-03-05T09:53:48Z", "commit": {"oid": "de3dd2ae3f106045b4340273542ef81211931b6a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTo1Mzo0OFrOFyM8dA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQwOTo1Mzo0OFrOFyM8dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODE4NTIwNA==", "bodyText": "Is it safe to skip Iterator close() call?", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r388185204", "createdAt": "2020-03-05T09:53:48Z", "author": {"login": "AMashenkov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2ResultSetIterator.java", "diffHunk": "@@ -180,6 +184,9 @@ private boolean fetchPage() throws IgniteCheckedException {\n                     page.add(row);\n                 }\n                 catch (SQLException e) {\n+                    if (X.hasCause(e, QueryMemoryTracker.TrackerWasClosedException.class) && canceled)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de3dd2ae3f106045b4340273542ef81211931b6a"}, "originalPosition": 22}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NDUwNTI1", "url": "https://github.com/gridgain/gridgain/pull/939#pullrequestreview-369450525", "createdAt": "2020-03-05T10:23:52Z", "commit": {"oid": "de3dd2ae3f106045b4340273542ef81211931b6a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDoyMzo1MlrOFyN9Wg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDoyMzo1MlrOFyN9Wg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwMTgxOA==", "bodyText": "Actually, there is no need to have reference to AtomicBoolean object.\nIt can be replaced with primitive and CAS can be replaced with Unsafe field update operation.", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r388201818", "createdAt": "2020-03-05T10:23:52Z", "author": {"login": "AMashenkov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java", "diffHunk": "@@ -203,74 +224,223 @@ public boolean isOffloadingEnabled() {\n         return offloadingEnabled;\n     }\n \n+    /** {@inheritDoc} */\n+    @Override public synchronized void swap(long size) {\n+        assert size >= 0;\n+\n+        if (size == 0)\n+            return;\n+\n+        checkClosed();\n+\n+        if (parent != null)\n+            parent.swap(size);\n+\n+        writtenOnDisk += size;\n+        totalWrittenOnDisk += size;\n+        maxWrittenOnDisk = Math.max(maxWrittenOnDisk, writtenOnDisk);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public synchronized void unswap(long size) {\n+        assert size >= 0;\n+\n+        if (size == 0)\n+            return;\n+\n+        checkClosed();\n+\n+        if (parent != null)\n+            parent.unswap(size);\n+\n+        writtenOnDisk -= size;\n+    }\n+\n     /**\n-     * @return {@code True} if closed, {@code False} otherwise.\n+     * @return {@code true} if closed, {@code false} otherwise.\n      */\n-    public synchronized boolean closed() {\n+    @Override public boolean closed() {\n         return closed;\n     }\n \n     /** {@inheritDoc} */\n-    @Override public synchronized void close() {\n+    @Override public void close() {\n         // It is not expected to be called concurrently with reserve\\release.\n         // But query can be cancelled concurrently on query finish.\n-        if (closed)\n+        if (!closing.compareAndSet(false, true))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de3dd2ae3f106045b4340273542ef81211931b6a"}, "originalPosition": 245}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NDUxNDMy", "url": "https://github.com/gridgain/gridgain/pull/939#pullrequestreview-369451432", "createdAt": "2020-03-05T10:25:09Z", "commit": {"oid": "de3dd2ae3f106045b4340273542ef81211931b6a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDoyNTowOVrOFyOAKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDoyNTowOVrOFyOAKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwMjUzNg==", "bodyText": "There is no need to have heavy concurrent structure as collection is used mostly in single thread.\nWe can wrap it into synchronized", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r388202536", "createdAt": "2020-03-05T10:25:09Z", "author": {"login": "AMashenkov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java", "diffHunk": "@@ -203,74 +224,223 @@ public boolean isOffloadingEnabled() {\n         return offloadingEnabled;\n     }\n \n+    /** {@inheritDoc} */\n+    @Override public synchronized void swap(long size) {\n+        assert size >= 0;\n+\n+        if (size == 0)\n+            return;\n+\n+        checkClosed();\n+\n+        if (parent != null)\n+            parent.swap(size);\n+\n+        writtenOnDisk += size;\n+        totalWrittenOnDisk += size;\n+        maxWrittenOnDisk = Math.max(maxWrittenOnDisk, writtenOnDisk);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public synchronized void unswap(long size) {\n+        assert size >= 0;\n+\n+        if (size == 0)\n+            return;\n+\n+        checkClosed();\n+\n+        if (parent != null)\n+            parent.unswap(size);\n+\n+        writtenOnDisk -= size;\n+    }\n+\n     /**\n-     * @return {@code True} if closed, {@code False} otherwise.\n+     * @return {@code true} if closed, {@code false} otherwise.\n      */\n-    public synchronized boolean closed() {\n+    @Override public boolean closed() {\n         return closed;\n     }\n \n     /** {@inheritDoc} */\n-    @Override public synchronized void close() {\n+    @Override public void close() {\n         // It is not expected to be called concurrently with reserve\\release.\n         // But query can be cancelled concurrently on query finish.\n-        if (closed)\n+        if (!closing.compareAndSet(false, true))\n             return;\n \n+        for (H2MemoryTracker child : children)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de3dd2ae3f106045b4340273542ef81211931b6a"}, "originalPosition": 248}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzY5NDUyOTI2", "url": "https://github.com/gridgain/gridgain/pull/939#pullrequestreview-369452926", "createdAt": "2020-03-05T10:27:17Z", "commit": {"oid": "de3dd2ae3f106045b4340273542ef81211931b6a"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDoyNzoxOFrOFyOExg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxMDoyNzoxOFrOFyOExg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODIwMzcxOA==", "bodyText": "synchronized", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r388203718", "createdAt": "2020-03-05T10:27:18Z", "author": {"login": "AMashenkov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java", "diffHunk": "@@ -203,74 +224,223 @@ public boolean isOffloadingEnabled() {\n         return offloadingEnabled;\n     }\n \n+    /** {@inheritDoc} */\n+    @Override public synchronized void swap(long size) {\n+        assert size >= 0;\n+\n+        if (size == 0)\n+            return;\n+\n+        checkClosed();\n+\n+        if (parent != null)\n+            parent.swap(size);\n+\n+        writtenOnDisk += size;\n+        totalWrittenOnDisk += size;\n+        maxWrittenOnDisk = Math.max(maxWrittenOnDisk, writtenOnDisk);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public synchronized void unswap(long size) {\n+        assert size >= 0;\n+\n+        if (size == 0)\n+            return;\n+\n+        checkClosed();\n+\n+        if (parent != null)\n+            parent.unswap(size);\n+\n+        writtenOnDisk -= size;\n+    }\n+\n     /**\n-     * @return {@code True} if closed, {@code False} otherwise.\n+     * @return {@code true} if closed, {@code false} otherwise.\n      */\n-    public synchronized boolean closed() {\n+    @Override public boolean closed() {\n         return closed;\n     }\n \n     /** {@inheritDoc} */\n-    @Override public synchronized void close() {\n+    @Override public void close() {\n         // It is not expected to be called concurrently with reserve\\release.\n         // But query can be cancelled concurrently on query finish.\n-        if (closed)\n+        if (!closing.compareAndSet(false, true))\n             return;\n \n+        for (H2MemoryTracker child : children)\n+            child.close();\n+\n         closed = true;\n \n         reserved = 0;\n \n         if (parent != null)\n-            parent.released(reservedFromParent);\n+            parent.release(reservedFromParent);\n \n-        if (log.isDebugEnabled()) {\n-            log.debug(\"Query has been completed with memory metrics: [bytesConsumed=\"  + totalReserved +\n-                \", bytesOffloaded=\" + totalWrittenOnDisk + \", filesCreated=\" + filesCreated +\n-                \", query=\" + qryDesc + ']');\n-        }\n+        onChildClosed(this);\n     }\n \n-    /**\n-     * @return Total number of bytes written on disk.\n-     */\n-    public long totalWrittenOnDisk() {\n-        return totalWrittenOnDisk;\n+    /** {@inheritDoc} */\n+    @Override public synchronized void incrementFilesCreated() {\n+        if (parent != null)\n+            parent.incrementFilesCreated();\n+\n+        filesCreated++;\n     }\n \n     /** {@inheritDoc} */\n-    @Override public synchronized void addTotalWrittenOnDisk(long written) {\n-        this.totalWrittenOnDisk += written;\n-    }\n+    @Override public H2MemoryTracker createChildTracker() {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "de3dd2ae3f106045b4340273542ef81211931b6a"}, "originalPosition": 284}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8eb17e884a8872215837da42eb32293bfb3021c1", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/8eb17e884a8872215837da42eb32293bfb3021c1", "committedDate": "2020-03-05T11:48:33Z", "message": "fix resource cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3c4fba49e2362adb932629617b02b9952bd4285a", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/3c4fba49e2362adb932629617b02b9952bd4285a", "committedDate": "2020-03-05T11:51:43Z", "message": "Merge remote-tracking branch 'gridgain-ce/master' into gg-26598"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a2b7a0101fb972146fffd2f5894eeec6fa9a25c3", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/a2b7a0101fb972146fffd2f5894eeec6fa9a25c3", "committedDate": "2020-03-05T13:20:37Z", "message": "review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c895c69cc62f0f1f159d41d0339c458ff8fec293", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/c895c69cc62f0f1f159d41d0339c458ff8fec293", "committedDate": "2020-03-05T13:55:11Z", "message": "review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "17fc88ca4dd35091808a956ca72ff61e1d9da123", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/17fc88ca4dd35091808a956ca72ff61e1d9da123", "committedDate": "2020-03-05T16:58:01Z", "message": "Merge remote-tracking branch 'gridgain-ce/master' into gg-26598"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0aa4ef682beba600a34586ea51af1abecc84958c", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/0aa4ef682beba600a34586ea51af1abecc84958c", "committedDate": "2020-03-06T07:10:45Z", "message": "fix jdbc2 query quota test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2d3332e27d2457d4515522769a53ee739e0dd25a", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/2d3332e27d2457d4515522769a53ee739e0dd25a", "committedDate": "2020-03-06T08:17:27Z", "message": "add test for child tracker verification"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4539bc347c43488f0594ec532f6247300fd5d6c0", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/4539bc347c43488f0594ec532f6247300fd5d6c0", "committedDate": "2020-03-06T18:12:10Z", "message": "review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "68a17877ef420e749a5ca770ad29e58333ab4b25", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/68a17877ef420e749a5ca770ad29e58333ab4b25", "committedDate": "2020-03-10T09:18:59Z", "message": "fix failed tests after review"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzcxNzk3NTkz", "url": "https://github.com/gridgain/gridgain/pull/939#pullrequestreview-371797593", "createdAt": "2020-03-10T09:37:47Z", "commit": {"oid": "68a17877ef420e749a5ca770ad29e58333ab4b25"}, "state": "COMMENTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQwOTozNzo0N1rOF0HYPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xMFQxMDoxMTozMlrOF0IkOQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5MTE2NA==", "bodyText": "may be rename to memTrackerProvider, in order to not confuse with QueryMemoryTracker instances?", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r390191164", "createdAt": "2020-03-10T09:37:47Z", "author": {"login": "mshonichev"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/query/GridRunningQueryInfo.java", "diffHunk": "@@ -47,6 +47,9 @@\n     /** */\n     private final boolean loc;\n \n+    /** */\n+    private final GridQueryMemoryMetricProvider memTracker;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68a17877ef420e749a5ca770ad29e58333ab4b25"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5Mjk5Ng==", "bodyText": "Could you provide example of text queries ?", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r390192996", "createdAt": "2020-03-10T09:41:05Z", "author": {"login": "mshonichev"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/query/RunningQueryManager.java", "diffHunk": "@@ -44,14 +46,44 @@\n     /** Name of the MetricRegistry which metrics measure stats of queries initiated by user. */\n     public static final String SQL_USER_QUERIES_REG_NAME = \"sql.queries.user\";\n \n+    /** Dummy memory metric provider that returns only -1's. */\n+    // This provider used to highlight that query has no tracker at all.\n+    // It could be intentionally in case of streaming or text queries", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68a17877ef420e749a5ca770ad29e58333ab4b25"}, "originalPosition": 23}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5NDA2OQ==", "bodyText": "Do we have any kind of protection against resource leak in case queries are only registered and never unregistered?", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r390194069", "createdAt": "2020-03-10T09:43:04Z", "author": {"login": "mshonichev"}, "path": "modules/core/src/main/java/org/apache/ignite/internal/processors/query/RunningQueryManager.java", "diffHunk": "@@ -153,6 +191,15 @@ public void unregister(Long qryId, @Nullable Throwable failReason) {\n         if (qry == null)\n             return;\n \n+        if (qry.memoryTracker() instanceof AutoCloseable)\n+            U.close((AutoCloseable)qry.memoryTracker(), log);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68a17877ef420e749a5ca770ad29e58333ab4b25"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDE5NzAyNg==", "bodyText": "As far as I know, query can continue executing after connection close, am I right?\nWouldn't .close() break OOM protection for that case?", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r390197026", "createdAt": "2020-03-10T09:47:59Z", "author": {"login": "mshonichev"}, "path": "modules/h2/src/main/java/org/h2/engine/Session.java", "diffHunk": "@@ -960,6 +975,11 @@ public void close() {\n             try {\n                 database.checkPowerOff();\n \n+                H2MemoryTracker tracker = memoryTracker;\n+                if (tracker != null) {\n+                    tracker.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68a17877ef420e749a5ca770ad29e58333ab4b25"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwMTA5Mg==", "bodyText": "need add inResult = null here too?", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r390201092", "createdAt": "2020-03-10T09:54:47Z", "author": {"login": "mshonichev"}, "path": "modules/h2/src/main/java/org/h2/index/IndexCursor.java", "diffHunk": "@@ -296,6 +300,9 @@ public boolean previous() {\n \n     @Override\n     public void close() throws Exception {\n+        if (inResult != null)\n+            inResult.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68a17877ef420e749a5ca770ad29e58333ab4b25"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwMTc3Mw==", "bodyText": "(y)", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r390201773", "createdAt": "2020-03-10T09:55:49Z", "author": {"login": "mshonichev"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2QueryInfo.java", "diffHunk": "@@ -53,19 +59,22 @@\n     private final boolean lazy;\n \n     /** Prepared statement. */\n+    @GridToStringExclude", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68a17877ef420e749a5ca770ad29e58333ab4b25"}, "originalPosition": 26}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwMzYzMA==", "bodyText": "Did we change conventions about negative values are reserved for disable memory tracking again ?\nIf yes, documentation ticket must be created with currently actual behavior description.", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r390203630", "createdAt": "2020-03-10T09:58:56Z", "author": {"login": "mshonichev"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryManager.java", "diffHunk": "@@ -174,48 +171,35 @@ public QueryMemoryManager(GridKernalContext ctx) {\n     /**\n      * Query memory tracker factory method.\n      *\n-     * Note: If 'maxQueryMemory' is zero, then {@link QueryMemoryManager#qryQuota}  will be used.\n-     * Note: Negative values are reserved for disable memory tracking.\n+     * Note: If 'maxQueryMemory' is zero, then {@link QueryMemoryManager#qryQuota} will be used.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68a17877ef420e749a5ca770ad29e58333ab4b25"}, "originalPosition": 73}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwNTY3NQ==", "bodyText": "I don't understand that logic reserve anyway even if parent reservation fails.\nWhy don't use finally here?", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r390205675", "createdAt": "2020-03-10T10:02:31Z", "author": {"login": "mshonichev"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java", "diffHunk": "@@ -203,74 +235,239 @@ public boolean isOffloadingEnabled() {\n         return offloadingEnabled;\n     }\n \n+    /** {@inheritDoc} */\n+    @Override public synchronized void swap(long size) {\n+        assert size >= 0;\n+\n+        if (size == 0)\n+            return;\n+\n+        checkClosed();\n+\n+        if (parent != null)\n+            parent.swap(size);\n+\n+        writtenOnDisk += size;\n+        totalWrittenOnDisk += size;\n+        maxWrittenOnDisk = Math.max(maxWrittenOnDisk, writtenOnDisk);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public synchronized void unswap(long size) {\n+        assert size >= 0;\n+\n+        if (size == 0)\n+            return;\n+\n+        checkClosed();\n+\n+        if (parent != null)\n+            parent.unswap(size);\n+\n+        writtenOnDisk -= size;\n+    }\n+\n     /**\n-     * @return {@code True} if closed, {@code False} otherwise.\n+     * @return {@code true} if closed, {@code false} otherwise.\n      */\n-    public synchronized boolean closed() {\n+    @Override public boolean closed() {\n         return closed;\n     }\n \n     /** {@inheritDoc} */\n-    @Override public synchronized void close() {\n+    @Override public void close() {\n         // It is not expected to be called concurrently with reserve\\release.\n         // But query can be cancelled concurrently on query finish.\n-        if (closed)\n+        if (!STATE_UPDATER.compareAndSet(this, NORMALLY_OPERATING_STATE, CLOSING_OR_CLOSED_STATE))\n             return;\n \n+        synchronized (this) {\n+            for (H2MemoryTracker child : children)\n+                child.close();\n+\n+            children.clear();\n+        }\n+\n         closed = true;\n \n         reserved = 0;\n \n         if (parent != null)\n-            parent.released(reservedFromParent);\n-\n-        if (log.isDebugEnabled()) {\n-            log.debug(\"Query has been completed with memory metrics: [bytesConsumed=\"  + totalReserved +\n-                \", bytesOffloaded=\" + totalWrittenOnDisk + \", filesCreated=\" + filesCreated +\n-                \", query=\" + qryDesc + ']');\n-        }\n+            parent.release(reservedFromParent);\n     }\n \n-    /**\n-     * @return Total number of bytes written on disk.\n-     */\n-    public long totalWrittenOnDisk() {\n-        return totalWrittenOnDisk;\n+    /** {@inheritDoc} */\n+    @Override public synchronized void incrementFilesCreated() {\n+        if (parent != null)\n+            parent.incrementFilesCreated();\n+\n+        filesCreated++;\n     }\n \n     /** {@inheritDoc} */\n-    @Override public synchronized void addTotalWrittenOnDisk(long written) {\n-        this.totalWrittenOnDisk += written;\n-    }\n+    @Override public synchronized H2MemoryTracker createChildTracker() {\n+        checkClosed();\n \n-    /**\n-     * @return Total bytes reserved by current query.\n-     */\n-    public long totalReserved() {\n-        return totalReserved;\n-    }\n+        H2MemoryTracker child = new ChildMemoryTracker(this);\n \n-    /**\n-     * @return Total files number created by current query.\n-     */\n-    public int filesCreated() {\n-        return filesCreated;\n-    }\n+        children.add(child);\n \n-    /** {@inheritDoc} */\n-    @Override public synchronized void incrementFilesCreated() {\n-        this.filesCreated++;\n+        return child;\n     }\n \n-    /**\n-     * @return Query descriptor.\n-     */\n-    public String queryDescriptor() {\n-        return qryDesc;\n+    /** {@inheritDoc} */\n+    @Override public synchronized void onChildClosed(H2MemoryTracker child) {\n+        if (state != CLOSING_OR_CLOSED_STATE)\n+            children.remove(child);\n     }\n \n     /** {@inheritDoc} */\n     @Override public String toString() {\n         return S.toString(QueryMemoryTracker.class, this);\n     }\n-}\n\\ No newline at end of file\n+\n+    /** */\n+    private static class ChildMemoryTracker implements H2MemoryTracker {\n+        /** State updater. */\n+        private static final AtomicIntegerFieldUpdater<ChildMemoryTracker> STATE_UPDATER\n+            = AtomicIntegerFieldUpdater.newUpdater(ChildMemoryTracker.class, \"state\");\n+\n+        /** */\n+        private final H2MemoryTracker parent;\n+\n+        /** */\n+        private long reserved;\n+\n+        /** */\n+        private long writtenOnDisk;\n+\n+        /** */\n+        private long totalWrittenOnDisk;\n+\n+        /** */\n+        private volatile int state;\n+\n+        /**\n+         * @param parent Parent.\n+         */\n+        public ChildMemoryTracker(H2MemoryTracker parent) {\n+            this.parent = parent;\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public boolean reserve(long size) {\n+            checkClosed();\n+\n+            boolean res;\n+            try {\n+                res = parent.reserve(size);\n+            }\n+            catch (IgniteSQLException ex) {\n+                reserved += size;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68a17877ef420e749a5ca770ad29e58333ab4b25"}, "originalPosition": 377}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIwNjQxNg==", "bodyText": "shouldn't try .. catch be added here too?", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r390206416", "createdAt": "2020-03-10T10:03:46Z", "author": {"login": "mshonichev"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java", "diffHunk": "@@ -203,74 +235,239 @@ public boolean isOffloadingEnabled() {\n         return offloadingEnabled;\n     }\n \n+    /** {@inheritDoc} */\n+    @Override public synchronized void swap(long size) {\n+        assert size >= 0;\n+\n+        if (size == 0)\n+            return;\n+\n+        checkClosed();\n+\n+        if (parent != null)\n+            parent.swap(size);\n+\n+        writtenOnDisk += size;\n+        totalWrittenOnDisk += size;\n+        maxWrittenOnDisk = Math.max(maxWrittenOnDisk, writtenOnDisk);\n+    }\n+\n+    /** {@inheritDoc} */\n+    @Override public synchronized void unswap(long size) {\n+        assert size >= 0;\n+\n+        if (size == 0)\n+            return;\n+\n+        checkClosed();\n+\n+        if (parent != null)\n+            parent.unswap(size);\n+\n+        writtenOnDisk -= size;\n+    }\n+\n     /**\n-     * @return {@code True} if closed, {@code False} otherwise.\n+     * @return {@code true} if closed, {@code false} otherwise.\n      */\n-    public synchronized boolean closed() {\n+    @Override public boolean closed() {\n         return closed;\n     }\n \n     /** {@inheritDoc} */\n-    @Override public synchronized void close() {\n+    @Override public void close() {\n         // It is not expected to be called concurrently with reserve\\release.\n         // But query can be cancelled concurrently on query finish.\n-        if (closed)\n+        if (!STATE_UPDATER.compareAndSet(this, NORMALLY_OPERATING_STATE, CLOSING_OR_CLOSED_STATE))\n             return;\n \n+        synchronized (this) {\n+            for (H2MemoryTracker child : children)\n+                child.close();\n+\n+            children.clear();\n+        }\n+\n         closed = true;\n \n         reserved = 0;\n \n         if (parent != null)\n-            parent.released(reservedFromParent);\n-\n-        if (log.isDebugEnabled()) {\n-            log.debug(\"Query has been completed with memory metrics: [bytesConsumed=\"  + totalReserved +\n-                \", bytesOffloaded=\" + totalWrittenOnDisk + \", filesCreated=\" + filesCreated +\n-                \", query=\" + qryDesc + ']');\n-        }\n+            parent.release(reservedFromParent);\n     }\n \n-    /**\n-     * @return Total number of bytes written on disk.\n-     */\n-    public long totalWrittenOnDisk() {\n-        return totalWrittenOnDisk;\n+    /** {@inheritDoc} */\n+    @Override public synchronized void incrementFilesCreated() {\n+        if (parent != null)\n+            parent.incrementFilesCreated();\n+\n+        filesCreated++;\n     }\n \n     /** {@inheritDoc} */\n-    @Override public synchronized void addTotalWrittenOnDisk(long written) {\n-        this.totalWrittenOnDisk += written;\n-    }\n+    @Override public synchronized H2MemoryTracker createChildTracker() {\n+        checkClosed();\n \n-    /**\n-     * @return Total bytes reserved by current query.\n-     */\n-    public long totalReserved() {\n-        return totalReserved;\n-    }\n+        H2MemoryTracker child = new ChildMemoryTracker(this);\n \n-    /**\n-     * @return Total files number created by current query.\n-     */\n-    public int filesCreated() {\n-        return filesCreated;\n-    }\n+        children.add(child);\n \n-    /** {@inheritDoc} */\n-    @Override public synchronized void incrementFilesCreated() {\n-        this.filesCreated++;\n+        return child;\n     }\n \n-    /**\n-     * @return Query descriptor.\n-     */\n-    public String queryDescriptor() {\n-        return qryDesc;\n+    /** {@inheritDoc} */\n+    @Override public synchronized void onChildClosed(H2MemoryTracker child) {\n+        if (state != CLOSING_OR_CLOSED_STATE)\n+            children.remove(child);\n     }\n \n     /** {@inheritDoc} */\n     @Override public String toString() {\n         return S.toString(QueryMemoryTracker.class, this);\n     }\n-}\n\\ No newline at end of file\n+\n+    /** */\n+    private static class ChildMemoryTracker implements H2MemoryTracker {\n+        /** State updater. */\n+        private static final AtomicIntegerFieldUpdater<ChildMemoryTracker> STATE_UPDATER\n+            = AtomicIntegerFieldUpdater.newUpdater(ChildMemoryTracker.class, \"state\");\n+\n+        /** */\n+        private final H2MemoryTracker parent;\n+\n+        /** */\n+        private long reserved;\n+\n+        /** */\n+        private long writtenOnDisk;\n+\n+        /** */\n+        private long totalWrittenOnDisk;\n+\n+        /** */\n+        private volatile int state;\n+\n+        /**\n+         * @param parent Parent.\n+         */\n+        public ChildMemoryTracker(H2MemoryTracker parent) {\n+            this.parent = parent;\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public boolean reserve(long size) {\n+            checkClosed();\n+\n+            boolean res;\n+            try {\n+                res = parent.reserve(size);\n+            }\n+            catch (IgniteSQLException ex) {\n+                reserved += size;\n+\n+                throw ex;\n+            }\n+\n+            reserved += size;\n+\n+            return res;\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public void release(long size) {\n+            checkClosed();\n+\n+            reserved -= size;\n+\n+            parent.release(size);\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public long writtenOnDisk() {\n+            return writtenOnDisk;\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public long totalWrittenOnDisk() {\n+            return totalWrittenOnDisk;\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public long reserved() {\n+            return reserved;\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public void swap(long size) {\n+            checkClosed();\n+\n+            parent.swap(size);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68a17877ef420e749a5ca770ad29e58333ab4b25"}, "originalPosition": 415}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIxMDE4NQ==", "bodyText": "why was test expectation changed ?", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r390210185", "createdAt": "2020-03-10T10:10:46Z", "author": {"login": "mshonichev"}, "path": "modules/indexing/src/test/java/org/apache/ignite/internal/metric/SqlStatisticOffloadingTest.java", "diffHunk": "@@ -80,7 +80,7 @@ public void testOffloadStats() {\n         // Ensure that metrics increased.\n         Metrics m1 = withdrawMetrics();\n \n-        Metrics expected = m0.add(Metrics.of(6249, 6249, 1, 16878, 16878, 1)); // Expected numbers of written bytes.\n+        Metrics expected = m0.add(Metrics.of(6249, 6249, 1, 16878, 16878, 2)); // Expected numbers of written bytes.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "68a17877ef420e749a5ca770ad29e58333ab4b25"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIxMDYxNw==", "bodyText": "same question about JdbcQueryQuotaTest, btw, why was memory quota doubled there ?", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r390210617", "createdAt": "2020-03-10T10:11:32Z", "author": {"login": "mshonichev"}, "path": "modules/indexing/src/test/java/org/apache/ignite/internal/metric/SqlStatisticOffloadingTest.java", "diffHunk": "@@ -80,7 +80,7 @@ public void testOffloadStats() {\n         // Ensure that metrics increased.\n         Metrics m1 = withdrawMetrics();\n \n-        Metrics expected = m0.add(Metrics.of(6249, 6249, 1, 16878, 16878, 1)); // Expected numbers of written bytes.\n+        Metrics expected = m0.add(Metrics.of(6249, 6249, 1, 16878, 16878, 2)); // Expected numbers of written bytes.", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MDIxMDE4NQ=="}, "originalCommit": {"oid": "68a17877ef420e749a5ca770ad29e58333ab4b25"}, "originalPosition": 5}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a92bfb05d14cf079f18fdd7f8befed605ada743a", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/a92bfb05d14cf079f18fdd7f8befed605ada743a", "committedDate": "2020-03-10T12:41:37Z", "message": "review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29eaaab19f8e082296dbb3d947d1deea5ebe2b60", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/29eaaab19f8e082296dbb3d947d1deea5ebe2b60", "committedDate": "2020-03-11T12:41:51Z", "message": "tests for testplan"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "df1454f5690a86fc1f28d728f60ab667b7510a65", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/df1454f5690a86fc1f28d728f60ab667b7510a65", "committedDate": "2020-03-11T12:43:14Z", "message": "add new test to suit"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "acde264d8790ad4c163b28cee541edc793d6fe04", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/acde264d8790ad4c163b28cee541edc793d6fe04", "committedDate": "2020-03-12T09:22:53Z", "message": "minors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c36f5f7b60389640dcf21a90edf0cc5094bfe660", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/c36f5f7b60389640dcf21a90edf0cc5094bfe660", "committedDate": "2020-03-13T07:09:39Z", "message": "disable memory tracking"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59886b58e2c0efd007b2974da811001742c0d9c6", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/59886b58e2c0efd007b2974da811001742c0d9c6", "committedDate": "2020-03-13T11:33:50Z", "message": "mock qry info"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "004d0aeddd1ba85e2c7ed9319ef037fb4c4552f7", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/004d0aeddd1ba85e2c7ed9319ef037fb4c4552f7", "committedDate": "2020-03-13T14:24:29Z", "message": "change H2QueryInfo description building"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "761726bfb587bfef82e4c1599bf1997979e593c9", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/761726bfb587bfef82e4c1599bf1997979e593c9", "committedDate": "2020-03-13T16:09:21Z", "message": "supplier for description"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9f6f1d7012ddfa9777fe71459ca85899ebb617e5", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/9f6f1d7012ddfa9777fe71459ca85899ebb617e5", "committedDate": "2020-03-15T09:07:28Z", "message": "one more try"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d", "committedDate": "2020-03-15T14:57:33Z", "message": "minor"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7642ca020ce0f80e6edabcdd6556c18f540f5ff8", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/7642ca020ce0f80e6edabcdd6556c18f540f5ff8", "committedDate": "2020-03-16T08:03:24Z", "message": "minors"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0OTkwNjQz", "url": "https://github.com/gridgain/gridgain/pull/939#pullrequestreview-374990643", "createdAt": "2020-03-16T08:16:54Z", "commit": {"oid": "f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODoxNjo1NFrOF2paxw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODoxNjo1NFrOF2paxw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg0NjAyMw==", "bodyText": "Braces", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r392846023", "createdAt": "2020-03-16T08:16:54Z", "author": {"login": "AMashenkov"}, "path": "modules/h2/src/main/java/org/h2/engine/Session.java", "diffHunk": "@@ -960,6 +977,11 @@ public void close() {\n             try {\n                 database.checkPowerOff();\n \n+                H2MemoryTracker tracker = memoryTracker;\n+                if (tracker != null) {\n+                    tracker.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d"}, "originalPosition": 44}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0OTkxMTY4", "url": "https://github.com/gridgain/gridgain/pull/939#pullrequestreview-374991168", "createdAt": "2020-03-16T08:17:52Z", "commit": {"oid": "f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODoxNzo1MlrOF2pcVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODoxNzo1MlrOF2pcVA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg0NjQyMA==", "bodyText": "Braces", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r392846420", "createdAt": "2020-03-16T08:17:52Z", "author": {"login": "AMashenkov"}, "path": "modules/h2/src/main/java/org/h2/index/IndexCursor.java", "diffHunk": "@@ -135,6 +134,11 @@ public void prepare(Session s, ArrayList<IndexCondition> indexConditions) {\n                 if ((isStart || isEnd) && !canUseIndexFor(inColumn)) {\n                     inColumn = null;\n                     inList = null;\n+\n+                    if (inResult != null) {\n+                        inResult.close();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d"}, "originalPosition": 14}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0OTkyMDE2", "url": "https://github.com/gridgain/gridgain/pull/939#pullrequestreview-374992016", "createdAt": "2020-03-16T08:19:29Z", "commit": {"oid": "f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODoxOToyOVrOF2pfAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODoxOToyOVrOF2pfAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg0NzEwNw==", "bodyText": "Braces", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r392847107", "createdAt": "2020-03-16T08:19:29Z", "author": {"login": "AMashenkov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2ManagedLocalResult.java", "diffHunk": "@@ -391,6 +396,7 @@ private void addRowsToDisk(boolean forcePlainResult) {\n \n     /** {@inheritDoc} */\n     @Override public void done() {\n+        initMemTracker();\n         if (external != null) {\n             addRowsToDisk(false);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0OTkyMTQy", "url": "https://github.com/gridgain/gridgain/pull/939#pullrequestreview-374992142", "createdAt": "2020-03-16T08:19:43Z", "commit": {"oid": "f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODoxOTo0M1rOF2pfXg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODoxOTo0M1rOF2pfXg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg0NzE5OA==", "bodyText": "Braces", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r392847198", "createdAt": "2020-03-16T08:19:43Z", "author": {"login": "AMashenkov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2ManagedLocalResult.java", "diffHunk": "@@ -472,6 +478,7 @@ private void trimExternal(int offset, int limit) {\n         ResultExternal temp = external;\n         external = null;\n         temp.reset();\n+        initMemTracker();\n         while (--offset >= 0) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d"}, "originalPosition": 78}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0OTkyNjcz", "url": "https://github.com/gridgain/gridgain/pull/939#pullrequestreview-374992673", "createdAt": "2020-03-16T08:20:43Z", "commit": {"oid": "f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODoyMDo0M1rOF2phAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODoyMDo0M1rOF2phAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg0NzYxOQ==", "bodyText": "/**\n* @return Query id assigned by {@link RunningQueryManager}. \n*/", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r392847619", "createdAt": "2020-03-16T08:20:43Z", "author": {"login": "AMashenkov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/H2QueryInfo.java", "diffHunk": "@@ -108,6 +114,11 @@ public void printLogMessage(IgniteLogger log, String msg, String additionalInfo)\n         printLogMessage(log, null, msg, additionalInfo);\n     }\n \n+    /** @return Query id assigned by {@link RunningQueryManager}. */", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d"}, "originalPosition": 39}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0OTk1MTMy", "url": "https://github.com/gridgain/gridgain/pull/939#pullrequestreview-374995132", "createdAt": "2020-03-16T08:24:59Z", "commit": {"oid": "f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODoyNDo1OVrOF2ppCA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODoyNDo1OVrOF2ppCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg0OTY3Mg==", "bodyText": "Let's either uncomment or remove this.", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r392849672", "createdAt": "2020-03-16T08:24:59Z", "author": {"login": "AMashenkov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryManager.java", "diffHunk": "@@ -174,48 +171,38 @@ public QueryMemoryManager(GridKernalContext ctx) {\n     /**\n      * Query memory tracker factory method.\n      *\n-     * Note: If 'maxQueryMemory' is zero, then {@link QueryMemoryManager#qryQuota}  will be used.\n-     * Note: Negative values are reserved for disable memory tracking.\n+     * Note: If 'maxQueryMemory' is zero, then {@link QueryMemoryManager#qryQuota} will be used.\n      *\n      * @param maxQryMemory Query memory limit in bytes.\n-     * @param qryDesc Query descriptor.\n      * @return Query memory tracker.\n      */\n-    public QueryMemoryTracker createQueryMemoryTracker(long maxQryMemory, String qryDesc) {\n-        assert maxQryMemory >= 0;\n-\n-        if (maxQryMemory == 0)\n-            maxQryMemory = qryQuota;\n-\n+    public GridQueryMemoryMetricProvider createQueryMemoryTracker(long maxQryMemory) {\n         long globalQuota0 = globalQuota;\n \n-        if (maxQryMemory == 0 && globalQuota0 == 0) {\n-            if (log.isDebugEnabled()) {\n-                log.debug(\"No memory quota configured for the query. \" +\n-                    \"It will be executed without memory tracking: \"  + qryDesc);\n-            }\n-\n-            return null;\n-        }\n+//        if (maxQryMemory == 0 && globalQuota0 == 0 && qryQuota == 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d"}, "originalPosition": 96}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc0OTk3OTQ1", "url": "https://github.com/gridgain/gridgain/pull/939#pullrequestreview-374997945", "createdAt": "2020-03-16T08:29:50Z", "commit": {"oid": "f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODoyOTo1MFrOF2pyMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODoyOTo1MFrOF2pyMQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1MjAxNw==", "bodyText": "Is it ok?\nNegative values were allowed for disabling global quota.", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r392852017", "createdAt": "2020-03-16T08:29:50Z", "author": {"login": "AMashenkov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryManager.java", "diffHunk": "@@ -239,7 +226,18 @@ public boolean onQuotaExceeded(long size) {\n      * @param newGlobalQuota New global query quota.\n      */\n     public synchronized void setGlobalQuota(String newGlobalQuota) {\n-        this.globalQuota = U.parseBytes(newGlobalQuota);\n+        long globalQuota0 = U.parseBytes(newGlobalQuota);\n+        long heapSize = Runtime.getRuntime().maxMemory();\n+\n+        A.ensure(\n+            heapSize > globalQuota0,\n+            \"Sql global memory quota can't be more than heap size: heapSize=\"\n+                + heapSize + \", quotaSize=\" + globalQuota0\n+        );\n+\n+        A.ensure(globalQuota0 >= 0, \"Sql global memory quota must be >= 0: quotaSize=\" + globalQuota0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d"}, "originalPosition": 146}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MDAxNDgw", "url": "https://github.com/gridgain/gridgain/pull/939#pullrequestreview-375001480", "createdAt": "2020-03-16T08:35:48Z", "commit": {"oid": "f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODozNTo0OFrOF2p9Iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODozNTo0OFrOF2p9Iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1NDgxOQ==", "bodyText": "What do you think about STATE_INITIAL and STATE_CLOSED names?", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r392854819", "createdAt": "2020-03-16T08:35:48Z", "author": {"login": "AMashenkov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/QueryMemoryTracker.java", "diffHunk": "@@ -16,21 +16,33 @@\n \n package org.apache.ignite.internal.processors.query.h2;\n \n-import org.apache.ignite.IgniteLogger;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.atomic.AtomicIntegerFieldUpdater;\n import org.apache.ignite.internal.processors.cache.query.IgniteQueryErrorCode;\n+import org.apache.ignite.internal.processors.query.GridQueryMemoryMetricProvider;\n import org.apache.ignite.internal.processors.query.IgniteSQLException;\n+import org.apache.ignite.internal.util.tostring.GridToStringExclude;\n import org.apache.ignite.internal.util.typedef.internal.S;\n \n /**\n  * Query memory tracker.\n  *\n  * Track query memory usage and throws an exception if query tries to allocate memory over limit.\n  */\n-public class QueryMemoryTracker implements H2MemoryTracker {\n-    /** Logger. */\n-    private final IgniteLogger log;\n+public class QueryMemoryTracker implements H2MemoryTracker, GridQueryMemoryMetricProvider {\n+    /** State updater. */\n+    private static final AtomicIntegerFieldUpdater<QueryMemoryTracker> STATE_UPDATER\n+        = AtomicIntegerFieldUpdater.newUpdater(QueryMemoryTracker.class, \"state\");\n+\n+    /** Tracker is not closed and not in the middle of the closing process. */\n+    private static final int NORMALLY_OPERATING_STATE = 0;\n+\n+    /** Tracker is closed or in the middle of the closing process. */\n+    private static final int CLOSING_OR_CLOSED_STATE = 1;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d"}, "originalPosition": 31}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MDAyNzM1", "url": "https://github.com/gridgain/gridgain/pull/939#pullrequestreview-375002735", "createdAt": "2020-03-16T08:37:37Z", "commit": {"oid": "f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODozNzozN1rOF2qBSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODozNzozN1rOF2qBSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1NTg4MA==", "bodyText": "Missed loop braces", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r392855880", "createdAt": "2020-03-16T08:37:37Z", "author": {"login": "AMashenkov"}, "path": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/LazyOnDmlTest.java", "diffHunk": "@@ -171,6 +170,10 @@ public static Collection parameters() {\n             \"UNION ALL \" +\n             \"SELECT 31, 24, 'TWO-FOUR'\");\n \n+        for (H2ManagedLocalResult res : localResults)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d"}, "originalPosition": 12}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MDAzMDQx", "url": "https://github.com/gridgain/gridgain/pull/939#pullrequestreview-375003041", "createdAt": "2020-03-16T08:38:03Z", "commit": {"oid": "f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODozODowM1rOF2qCIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODozODowM1rOF2qCIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1NjA5OQ==", "bodyText": "Missed loop braces", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r392856099", "createdAt": "2020-03-16T08:38:03Z", "author": {"login": "AMashenkov"}, "path": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/LazyOnDmlTest.java", "diffHunk": "@@ -208,6 +211,10 @@ else if (cacheMode == CacheMode.REPLICATED)\n \n         }\n         finally {\n+            for (H2ManagedLocalResult res : localResults)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MDAzODg0", "url": "https://github.com/gridgain/gridgain/pull/939#pullrequestreview-375003884", "createdAt": "2020-03-16T08:39:27Z", "commit": {"oid": "f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODozOToyN1rOF2qEzQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODozOToyN1rOF2qEzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1Njc4MQ==", "bodyText": "Braces", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r392856781", "createdAt": "2020-03-16T08:39:27Z", "author": {"login": "AMashenkov"}, "path": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/oom/AbstractQueryMemoryTrackerSelfTest.java", "diffHunk": "@@ -103,6 +103,10 @@\n         maxMem = MB;\n         useJdbcV2GlobalQuotaCfg = false;\n \n+        for (H2ManagedLocalResult res : localResults)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d"}, "originalPosition": 15}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MDAzOTU5", "url": "https://github.com/gridgain/gridgain/pull/939#pullrequestreview-375003959", "createdAt": "2020-03-16T08:39:35Z", "commit": {"oid": "f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODozOTozNVrOF2qE-w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQwODozOTozNVrOF2qE-w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5Mjg1NjgyNw==", "bodyText": "braces", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r392856827", "createdAt": "2020-03-16T08:39:35Z", "author": {"login": "AMashenkov"}, "path": "modules/indexing/src/test/java/org/apache/ignite/internal/processors/query/oom/AbstractQueryMemoryTrackerSelfTest.java", "diffHunk": "@@ -113,6 +117,10 @@\n \n     /** {@inheritDoc} */\n     @Override protected void afterTest() throws Exception {\n+        for (H2ManagedLocalResult res : localResults)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f3ec1944c5474ba57bb783aebf7ca7cb89bffa6d"}, "originalPosition": 26}]}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "e6f6a302c5a4d8afc173928f0120dadce5e8ceae", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/e6f6a302c5a4d8afc173928f0120dadce5e8ceae", "committedDate": "2020-03-16T11:11:30Z", "message": "review fixes"}, "afterCommit": {"oid": "563d4cd38a2c1d3709270fcb5df13c528a731e19", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/563d4cd38a2c1d3709270fcb5df13c528a731e19", "committedDate": "2020-03-16T11:15:25Z", "message": "review fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4fb2a479047fbab02d4414132d7d4cc574ffae23", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/4fb2a479047fbab02d4414132d7d4cc574ffae23", "committedDate": "2020-03-16T13:15:32Z", "message": "review fixes"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8809d9549a4f440cc9ab6dc002610c650cda4913", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/8809d9549a4f440cc9ab6dc002610c650cda4913", "committedDate": "2020-03-16T11:45:04Z", "message": "Merge branch 'master' into gg-26598"}, "afterCommit": {"oid": "4fb2a479047fbab02d4414132d7d4cc574ffae23", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/4fb2a479047fbab02d4414132d7d4cc574ffae23", "committedDate": "2020-03-16T13:15:32Z", "message": "review fixes"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3Mzc1MjAzNTMz", "url": "https://github.com/gridgain/gridgain/pull/939#pullrequestreview-375203533", "createdAt": "2020-03-16T13:18:31Z", "commit": {"oid": "8809d9549a4f440cc9ab6dc002610c650cda4913"}, "state": "COMMENTED", "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzoxOTozM1rOF2zz3A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xNlQxMzoyMDowNlrOF2z1Ag==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAxNjI4NA==", "bodyText": "Why do we count unspill bytes here, but not in trackReads()?", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r393016284", "createdAt": "2020-03-16T13:19:33Z", "author": {"login": "rkondakov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/disk/TrackableFileIoFactory.java", "diffHunk": "@@ -149,7 +149,23 @@ private void trackWrites(int written) {\n                 metrics.trackOffloadingWritten(written);\n \n             if (tracker != null)\n-                tracker.addTotalWrittenOnDisk(written);\n+                tracker.spill(written);\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public void clear() throws IOException {\n+            super.clear();\n+\n+            tracker.unspill(tracker.writtenOnDisk());\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public void close() throws IOException {\n+            super.close();\n+\n+            tracker.unspill(tracker.writtenOnDisk());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fb2a479047fbab02d4414132d7d4cc574ffae23"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MzAxNjU3OA==", "bodyText": "See question below", "url": "https://github.com/gridgain/gridgain/pull/939#discussion_r393016578", "createdAt": "2020-03-16T13:20:06Z", "author": {"login": "rkondakov"}, "path": "modules/indexing/src/main/java/org/apache/ignite/internal/processors/query/h2/disk/TrackableFileIoFactory.java", "diffHunk": "@@ -149,7 +149,23 @@ private void trackWrites(int written) {\n                 metrics.trackOffloadingWritten(written);\n \n             if (tracker != null)\n-                tracker.addTotalWrittenOnDisk(written);\n+                tracker.spill(written);\n+        }\n+\n+        /** {@inheritDoc} */\n+        @Override public void clear() throws IOException {\n+            super.clear();\n+\n+            tracker.unspill(tracker.writtenOnDisk());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4fb2a479047fbab02d4414132d7d4cc574ffae23"}, "originalPosition": 21}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "11b374fd4e40c1669174d97da6cb4a599a52ea29", "author": {"user": {"login": "korlov42", "name": null}}, "url": "https://github.com/gridgain/gridgain/commit/11b374fd4e40c1669174d97da6cb4a599a52ea29", "committedDate": "2020-03-16T13:37:05Z", "message": "Merge branch 'master' into gg-26598"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 4374, "cost": 1, "resetAt": "2021-11-01T14:51:55Z"}}}