{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzOTQ5NzQ1", "number": 6746, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMToyNzoxOVrOEA2qhw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMToyODozMlrOEA2rxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzMxMDc5OnYy", "diffSide": "RIGHT", "path": "de.metas.business/src/main/java/de/metas/invoice/impl/InvoiceLineBL.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMToyNzoxOVrOGcY8hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMToyNzoxOVrOGcY8hw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyMjAyMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tlogger.debug(\"invoice line has both Price_UOM_ID=null and C_UOM_ID={}; return result ={}\", uomId.getRepoId(), result);\n          \n          \n            \n            \t\t\tlogger.debug(\"invoice line has Price_UOM_ID=null and C_UOM_ID={}; return result ={}\", uomId.getRepoId(), result);", "url": "https://github.com/metasfresh/metasfresh/pull/6746#discussion_r432422023", "createdAt": "2020-05-29T11:27:19Z", "author": {"login": "metas-ts"}, "path": "de.metas.business/src/main/java/de/metas/invoice/impl/InvoiceLineBL.java", "diffHunk": "@@ -267,65 +279,90 @@ private TaxCategoryId getTaxCategoryFromOrder(\n \t@Override\n \tpublic void setQtyInvoicedInPriceUOM(final I_C_InvoiceLine invoiceLine)\n \t{\n-\t\tfinal BigDecimal qtyInvoicedInPriceUOM = calculateQtyInvoicedInPriceUOM(invoiceLine);\n-\t\tinvoiceLine.setQtyInvoicedInPriceUOM(qtyInvoicedInPriceUOM);\n+\t\ttry (final MDCCloseable ignored = TableRecordMDC.putTableRecordReference(invoiceLine))\n+\t\t{\n+\t\t\tfinal Quantity qtyInvoicedInPriceUOM = calculateQtyInvoicedInPriceUOM(invoiceLine);\n+\t\t\tinvoiceLine.setQtyInvoicedInPriceUOM(qtyInvoicedInPriceUOM.toBigDecimal());\n+\t\t}\n \t}\n \n-\tprivate BigDecimal calculateQtyInvoicedInPriceUOM(@NonNull final I_C_InvoiceLine ilRecord)\n+\tprivate Quantity calculateQtyInvoicedInPriceUOM(@NonNull final I_C_InvoiceLine ilRecord)\n \t{\n \t\tfinal BigDecimal qtyEntered = ilRecord.getQtyEntered();\n \t\tCheck.assumeNotNull(qtyEntered, \"qtyEntered not null; ilRecord={}\", ilRecord);\n \n \t\tfinal UomId priceUomId = UomId.ofRepoIdOrNull(ilRecord.getPrice_UOM_ID());\n-\t\tif (priceUomId == null)\n-\t\t{\n-\t\t\treturn qtyEntered;\n-\t\t}\n-\n+\t\tfinal UomId uomId = UomId.ofRepoIdOrNull(ilRecord.getC_UOM_ID());\n \t\tfinal ProductId productId = ProductId.ofRepoIdOrNull(ilRecord.getM_Product_ID());\n \n-\t\tfinal IUOMConversionBL uomConversionBL = Services.get(IUOMConversionBL.class);\n-\t\tfinal BigDecimal qtyInPriceUOM = uomConversionBL.convertQty(\n-\t\t\t\tUOMConversionContext.of(productId),\n-\t\t\t\tqtyEntered,\n-\t\t\t\tUomId.ofRepoId(ilRecord.getC_UOM_ID()),\n-\t\t\t\tpriceUomId);\n+\t\tif (priceUomId != null && uomId != null)\n+\t\t{\n+\t\t\tfinal IUOMConversionBL uomConversionBL = Services.get(IUOMConversionBL.class);\n \n-\t\treturn qtyInPriceUOM;\n+\t\t\tfinal Quantity qtyToConvert = Quantitys.create(qtyEntered, uomId);\n+\t\t\tfinal Quantity result = uomConversionBL.convertQuantityTo(qtyToConvert, UOMConversionContext.of(productId), priceUomId);\n+\t\t\tlogger.debug(\"invoice line has both Price_UOM_ID={} and C_UOM_ID={}; return result={}\", priceUomId.getRepoId(), uomId.getRepoId(), result);\n+\t\t\treturn result;\n+\t\t}\n+\t\telse if (uomId != null)\n+\t\t{\n+\t\t\tfinal Quantity result = Quantitys.create(qtyEntered, uomId);\n+\t\t\tlogger.debug(\"invoice line has both Price_UOM_ID=null and C_UOM_ID={}; return result ={}\", uomId.getRepoId(), result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6509858a91c2da13d13a52141f1cadd9d23ad13"}, "originalPosition": 265}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzMxMTczOnYy", "diffSide": "RIGHT", "path": "de.metas.business/src/main/java/de/metas/invoice/impl/InvoiceLineBL.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMToyNzo0NFrOGcY9Ig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMToyNzo0NFrOGcY9Ig==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyMjE3OA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tlogger.debug(\"invoice line has Price_UOM_ID=null and C_UOM_ID=null and M_Product_ID={}; return result={}\", productId.getRepoId(), result);\n          \n          \n            \n            \t\t\tlogger.debug(\"invoice line has Price_UOM_ID=null, C_UOM_ID=null and M_Product_ID={}; return result={}\", productId.getRepoId(), result);", "url": "https://github.com/metasfresh/metasfresh/pull/6746#discussion_r432422178", "createdAt": "2020-05-29T11:27:44Z", "author": {"login": "metas-ts"}, "path": "de.metas.business/src/main/java/de/metas/invoice/impl/InvoiceLineBL.java", "diffHunk": "@@ -267,65 +279,90 @@ private TaxCategoryId getTaxCategoryFromOrder(\n \t@Override\n \tpublic void setQtyInvoicedInPriceUOM(final I_C_InvoiceLine invoiceLine)\n \t{\n-\t\tfinal BigDecimal qtyInvoicedInPriceUOM = calculateQtyInvoicedInPriceUOM(invoiceLine);\n-\t\tinvoiceLine.setQtyInvoicedInPriceUOM(qtyInvoicedInPriceUOM);\n+\t\ttry (final MDCCloseable ignored = TableRecordMDC.putTableRecordReference(invoiceLine))\n+\t\t{\n+\t\t\tfinal Quantity qtyInvoicedInPriceUOM = calculateQtyInvoicedInPriceUOM(invoiceLine);\n+\t\t\tinvoiceLine.setQtyInvoicedInPriceUOM(qtyInvoicedInPriceUOM.toBigDecimal());\n+\t\t}\n \t}\n \n-\tprivate BigDecimal calculateQtyInvoicedInPriceUOM(@NonNull final I_C_InvoiceLine ilRecord)\n+\tprivate Quantity calculateQtyInvoicedInPriceUOM(@NonNull final I_C_InvoiceLine ilRecord)\n \t{\n \t\tfinal BigDecimal qtyEntered = ilRecord.getQtyEntered();\n \t\tCheck.assumeNotNull(qtyEntered, \"qtyEntered not null; ilRecord={}\", ilRecord);\n \n \t\tfinal UomId priceUomId = UomId.ofRepoIdOrNull(ilRecord.getPrice_UOM_ID());\n-\t\tif (priceUomId == null)\n-\t\t{\n-\t\t\treturn qtyEntered;\n-\t\t}\n-\n+\t\tfinal UomId uomId = UomId.ofRepoIdOrNull(ilRecord.getC_UOM_ID());\n \t\tfinal ProductId productId = ProductId.ofRepoIdOrNull(ilRecord.getM_Product_ID());\n \n-\t\tfinal IUOMConversionBL uomConversionBL = Services.get(IUOMConversionBL.class);\n-\t\tfinal BigDecimal qtyInPriceUOM = uomConversionBL.convertQty(\n-\t\t\t\tUOMConversionContext.of(productId),\n-\t\t\t\tqtyEntered,\n-\t\t\t\tUomId.ofRepoId(ilRecord.getC_UOM_ID()),\n-\t\t\t\tpriceUomId);\n+\t\tif (priceUomId != null && uomId != null)\n+\t\t{\n+\t\t\tfinal IUOMConversionBL uomConversionBL = Services.get(IUOMConversionBL.class);\n \n-\t\treturn qtyInPriceUOM;\n+\t\t\tfinal Quantity qtyToConvert = Quantitys.create(qtyEntered, uomId);\n+\t\t\tfinal Quantity result = uomConversionBL.convertQuantityTo(qtyToConvert, UOMConversionContext.of(productId), priceUomId);\n+\t\t\tlogger.debug(\"invoice line has both Price_UOM_ID={} and C_UOM_ID={}; return result={}\", priceUomId.getRepoId(), uomId.getRepoId(), result);\n+\t\t\treturn result;\n+\t\t}\n+\t\telse if (uomId != null)\n+\t\t{\n+\t\t\tfinal Quantity result = Quantitys.create(qtyEntered, uomId);\n+\t\t\tlogger.debug(\"invoice line has both Price_UOM_ID=null and C_UOM_ID={}; return result ={}\", uomId.getRepoId(), result);\n+\t\t\treturn result;\n+\t\t}\n+\t\telse if (productId != null)\n+\t\t{\n+\t\t\tfinal UomId stockUomId = Services.get(IProductBL.class).getStockUOMId(productId);\n+\t\t\tfinal Quantity result = Quantitys.create(ilRecord.getQtyInvoiced(), stockUomId);\n+\t\t\tlogger.debug(\"invoice line has Price_UOM_ID=null and C_UOM_ID=null and M_Product_ID={}; return result={}\", productId.getRepoId(), result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6509858a91c2da13d13a52141f1cadd9d23ad13"}, "originalPosition": 272}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY5MzMxMzk2OnYy", "diffSide": "RIGHT", "path": "de.metas.business/src/main/java/de/metas/invoice/impl/InvoiceLineBL.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMToyODozMlrOGcY-nA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMToyODozMlrOGcY-nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyMjU1Ng==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tthrow new AdempiereException(\"given param 'invoiceLine' needs to have at least M_Product_ID>0\")\n          \n          \n            \n            \t\tthrow new AdempiereException(\"given param 'invoiceLine' needs to have at least M_Product_ID>0 or C_UOM_ID>0\")", "url": "https://github.com/metasfresh/metasfresh/pull/6746#discussion_r432422556", "createdAt": "2020-05-29T11:28:32Z", "author": {"login": "metas-ts"}, "path": "de.metas.business/src/main/java/de/metas/invoice/impl/InvoiceLineBL.java", "diffHunk": "@@ -267,65 +279,90 @@ private TaxCategoryId getTaxCategoryFromOrder(\n \t@Override\n \tpublic void setQtyInvoicedInPriceUOM(final I_C_InvoiceLine invoiceLine)\n \t{\n-\t\tfinal BigDecimal qtyInvoicedInPriceUOM = calculateQtyInvoicedInPriceUOM(invoiceLine);\n-\t\tinvoiceLine.setQtyInvoicedInPriceUOM(qtyInvoicedInPriceUOM);\n+\t\ttry (final MDCCloseable ignored = TableRecordMDC.putTableRecordReference(invoiceLine))\n+\t\t{\n+\t\t\tfinal Quantity qtyInvoicedInPriceUOM = calculateQtyInvoicedInPriceUOM(invoiceLine);\n+\t\t\tinvoiceLine.setQtyInvoicedInPriceUOM(qtyInvoicedInPriceUOM.toBigDecimal());\n+\t\t}\n \t}\n \n-\tprivate BigDecimal calculateQtyInvoicedInPriceUOM(@NonNull final I_C_InvoiceLine ilRecord)\n+\tprivate Quantity calculateQtyInvoicedInPriceUOM(@NonNull final I_C_InvoiceLine ilRecord)\n \t{\n \t\tfinal BigDecimal qtyEntered = ilRecord.getQtyEntered();\n \t\tCheck.assumeNotNull(qtyEntered, \"qtyEntered not null; ilRecord={}\", ilRecord);\n \n \t\tfinal UomId priceUomId = UomId.ofRepoIdOrNull(ilRecord.getPrice_UOM_ID());\n-\t\tif (priceUomId == null)\n-\t\t{\n-\t\t\treturn qtyEntered;\n-\t\t}\n-\n+\t\tfinal UomId uomId = UomId.ofRepoIdOrNull(ilRecord.getC_UOM_ID());\n \t\tfinal ProductId productId = ProductId.ofRepoIdOrNull(ilRecord.getM_Product_ID());\n \n-\t\tfinal IUOMConversionBL uomConversionBL = Services.get(IUOMConversionBL.class);\n-\t\tfinal BigDecimal qtyInPriceUOM = uomConversionBL.convertQty(\n-\t\t\t\tUOMConversionContext.of(productId),\n-\t\t\t\tqtyEntered,\n-\t\t\t\tUomId.ofRepoId(ilRecord.getC_UOM_ID()),\n-\t\t\t\tpriceUomId);\n+\t\tif (priceUomId != null && uomId != null)\n+\t\t{\n+\t\t\tfinal IUOMConversionBL uomConversionBL = Services.get(IUOMConversionBL.class);\n \n-\t\treturn qtyInPriceUOM;\n+\t\t\tfinal Quantity qtyToConvert = Quantitys.create(qtyEntered, uomId);\n+\t\t\tfinal Quantity result = uomConversionBL.convertQuantityTo(qtyToConvert, UOMConversionContext.of(productId), priceUomId);\n+\t\t\tlogger.debug(\"invoice line has both Price_UOM_ID={} and C_UOM_ID={}; return result={}\", priceUomId.getRepoId(), uomId.getRepoId(), result);\n+\t\t\treturn result;\n+\t\t}\n+\t\telse if (uomId != null)\n+\t\t{\n+\t\t\tfinal Quantity result = Quantitys.create(qtyEntered, uomId);\n+\t\t\tlogger.debug(\"invoice line has both Price_UOM_ID=null and C_UOM_ID={}; return result ={}\", uomId.getRepoId(), result);\n+\t\t\treturn result;\n+\t\t}\n+\t\telse if (productId != null)\n+\t\t{\n+\t\t\tfinal UomId stockUomId = Services.get(IProductBL.class).getStockUOMId(productId);\n+\t\t\tfinal Quantity result = Quantitys.create(ilRecord.getQtyInvoiced(), stockUomId);\n+\t\t\tlogger.debug(\"invoice line has Price_UOM_ID=null and C_UOM_ID=null and M_Product_ID={}; return result={}\", productId.getRepoId(), result);\n+\t\t\treturn result;\n+\t\t}\n+\n+\t\t// this private method shouldn't have called\n+\t\tthrow new AdempiereException(\"given param 'invoiceLine' needs to have at least M_Product_ID>0\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6509858a91c2da13d13a52141f1cadd9d23ad13"}, "originalPosition": 277}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1437, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}