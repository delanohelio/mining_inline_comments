{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI0NzM0MDA2", "number": 10272, "reviewThreads": {"totalCount": 7, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNDozMTo1OVrOE7kOHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNDo0MTo0MFrOE7kdyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODk0ODc2OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/impexp/format/ImpFormat.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNDozMTo1OVrOH3SIHA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNjoxNjozM1rOH4AWDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzczMDcxNg==", "bodyText": "consider java.nio.charset.Charset (or some other immutable alternative) instead of String", "url": "https://github.com/metasfresh/metasfresh/pull/10272#discussion_r527730716", "createdAt": "2020-11-20T14:31:59Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/impexp/format/ImpFormat.java", "diffHunk": "@@ -42,7 +47,9 @@ private ImpFormat(\n \t\t\tfinal boolean multiLine,\n \t\t\tfinal boolean manualImport,\n \t\t\t@NonNull final ImportTableDescriptor importTableDescriptor,\n-\t\t\t@NonNull @Singular final List<ImpFormatColumn> columns)\n+\t\t\t@NonNull @Singular final List<ImpFormatColumn> columns,\n+\t\t\t@NonNull final String charset,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "050cf8d40137394763ae1258ef526025948a5d83"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ4Nzk0OA==", "bodyText": "Done", "url": "https://github.com/metasfresh/metasfresh/pull/10272#discussion_r528487948", "createdAt": "2020-11-23T06:16:33Z", "author": {"login": "TheBestPessimist"}, "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/impexp/format/ImpFormat.java", "diffHunk": "@@ -42,7 +47,9 @@ private ImpFormat(\n \t\t\tfinal boolean multiLine,\n \t\t\tfinal boolean manualImport,\n \t\t\t@NonNull final ImportTableDescriptor importTableDescriptor,\n-\t\t\t@NonNull @Singular final List<ImpFormatColumn> columns)\n+\t\t\t@NonNull @Singular final List<ImpFormatColumn> columns,\n+\t\t\t@NonNull final String charset,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzczMDcxNg=="}, "originalCommit": {"oid": "050cf8d40137394763ae1258ef526025948a5d83"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODk1MjY0OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/impexp/format/ImpFormat.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNDozMjo1NVrOH3SKcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNjoxNzo0OVrOH4AXPw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzczMTMxNA==", "bodyText": "pls validate/normalize this parameter\ne.g.\nskipFirstNRows = skipFirstNRows > 0 ? skipFirstNRows : 0;", "url": "https://github.com/metasfresh/metasfresh/pull/10272#discussion_r527731314", "createdAt": "2020-11-20T14:32:55Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/impexp/format/ImpFormat.java", "diffHunk": "@@ -54,6 +61,8 @@ private ImpFormat(\n \t\tthis.manualImport = manualImport;\n \t\tthis.importTableDescriptor = importTableDescriptor;\n \t\tthis.columns = ImmutableList.copyOf(columns);\n+\t\tthis.charset = charset;\n+\t\tthis.skipFirstNRows = skipFirstNRows;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "050cf8d40137394763ae1258ef526025948a5d83"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ4ODI1NQ==", "bodyText": "as in \"don't allow negative values\".\nBetter suggestion: Math.max(skipFirstNRows, 0)\nDone", "url": "https://github.com/metasfresh/metasfresh/pull/10272#discussion_r528488255", "createdAt": "2020-11-23T06:17:49Z", "author": {"login": "TheBestPessimist"}, "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/impexp/format/ImpFormat.java", "diffHunk": "@@ -54,6 +61,8 @@ private ImpFormat(\n \t\tthis.manualImport = manualImport;\n \t\tthis.importTableDescriptor = importTableDescriptor;\n \t\tthis.columns = ImmutableList.copyOf(columns);\n+\t\tthis.charset = charset;\n+\t\tthis.skipFirstNRows = skipFirstNRows;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzczMTMxNA=="}, "originalCommit": {"oid": "050cf8d40137394763ae1258ef526025948a5d83"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODk1NjIyOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/impexp/parser/ImpDataParser.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNDozMzo1NFrOH3SMvw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNjoyODowMlrOH4AhIg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzczMTkwMw==", "bodyText": "same as above.\n\nconsider using Charset\nnormalize/validate skipFirstNRows", "url": "https://github.com/metasfresh/metasfresh/pull/10272#discussion_r527731903", "createdAt": "2020-11-20T14:33:54Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/impexp/parser/ImpDataParser.java", "diffHunk": "@@ -39,25 +37,31 @@\n @ToString\n public final class ImpDataParser\n {\n-\tprivate static final Charset CHARSET = StandardCharsets.UTF_8;\n-\n \tprivate final boolean multiline;\n \tprivate final ImpDataLineParser lineParser;\n+\tprivate final String charset;\n+\tprivate final int skipFirstNRows;\n \n \t@Builder\n \tprivate ImpDataParser(\n \t\t\tfinal boolean multiline,\n-\t\t\t@NonNull final ImpDataLineParser lineParser)\n+\t\t\t@NonNull final ImpDataLineParser lineParser,\n+\t\t\t@NonNull final String charset,\n+\t\t\tfinal int skipFirstNRows\n+\t)\n \t{\n \t\tthis.multiline = multiline;\n \t\tthis.lineParser = lineParser;\n+\t\tthis.charset = charset;\n+\t\tthis.skipFirstNRows = skipFirstNRows;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "050cf8d40137394763ae1258ef526025948a5d83"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ5MDc4Ng==", "bodyText": "done", "url": "https://github.com/metasfresh/metasfresh/pull/10272#discussion_r528490786", "createdAt": "2020-11-23T06:28:02Z", "author": {"login": "TheBestPessimist"}, "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/impexp/parser/ImpDataParser.java", "diffHunk": "@@ -39,25 +37,31 @@\n @ToString\n public final class ImpDataParser\n {\n-\tprivate static final Charset CHARSET = StandardCharsets.UTF_8;\n-\n \tprivate final boolean multiline;\n \tprivate final ImpDataLineParser lineParser;\n+\tprivate final String charset;\n+\tprivate final int skipFirstNRows;\n \n \t@Builder\n \tprivate ImpDataParser(\n \t\t\tfinal boolean multiline,\n-\t\t\t@NonNull final ImpDataLineParser lineParser)\n+\t\t\t@NonNull final ImpDataLineParser lineParser,\n+\t\t\t@NonNull final String charset,\n+\t\t\tfinal int skipFirstNRows\n+\t)\n \t{\n \t\tthis.multiline = multiline;\n \t\tthis.lineParser = lineParser;\n+\t\tthis.charset = charset;\n+\t\tthis.skipFirstNRows = skipFirstNRows;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzczMTkwMw=="}, "originalCommit": {"oid": "050cf8d40137394763ae1258ef526025948a5d83"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODk2ODEzOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/impexp/BankStatementImportProcess.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNDozNjo0MFrOH3SUBw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNjo0MToxMFrOH4Atiw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzczMzc2Nw==", "bodyText": "avoid hardcoded \"S\".\nPls use X_I_BankStatement.AMOUNTPLUSINDICATOR_Debit or X_I_BankStatement.AMOUNTPLUSINDICATOR_Credit", "url": "https://github.com/metasfresh/metasfresh/pull/10272#discussion_r527733767", "createdAt": "2020-11-20T14:36:40Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/impexp/BankStatementImportProcess.java", "diffHunk": "@@ -175,62 +180,147 @@ private void createBankStatementLine(final I_I_BankStatement importRecord)\n \n \t\tfinal CurrencyId currencyId = CurrencyId.ofRepoId(importRecord.getC_Currency_ID());\n \n-\t\tfinal BankStatementLineId bankStatementLineId = bankStatementDAO.createBankStatementLine(BankStatementLineCreateRequest.builder()\n-\t\t\t\t.bankStatementId(BankStatementId.ofRepoId(importRecord.getC_BankStatement_ID()))\n-\t\t\t\t.orgId(OrgId.ofRepoId(importRecord.getAD_Org_ID()))\n-\t\t\t\t.lineNo(importRecord.getLine())\n-\t\t\t\t//\n-\t\t\t\t.bpartnerId(BPartnerId.ofRepoIdOrNull(importRecord.getC_BPartner_ID()))\n-\t\t\t\t.importedBillPartnerName(importRecord.getBill_BPartner_Name())\n-\t\t\t\t.importedBillPartnerIBAN(importRecord.getIBAN_To())\n-\t\t\t\t//\n-\t\t\t\t.referenceNo(importRecord.getReferenceNo())\n-\t\t\t\t.lineDescription(importRecord.getLineDescription())\n-\t\t\t\t.memo(importRecord.getMemo())\n-\t\t\t\t//\n-\t\t\t\t.statementLineDate(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getStatementLineDate(), importRecord.getStatementDate())))\n-\t\t\t\t.dateAcct(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getDateAcct(), importRecord.getStatementDate())))\n-\t\t\t\t.valutaDate(TimeUtil.asLocalDate(importRecord.getValutaDate()))\n-\t\t\t\t//\n-\t\t\t\t.statementAmt(Money.of(importRecord.getStmtAmt(), currencyId))\n-\t\t\t\t.trxAmt(Money.of(importRecord.getTrxAmt(), currencyId))\n-\t\t\t\t.chargeAmt(Money.of(importRecord.getChargeAmt(), currencyId))\n-\t\t\t\t.interestAmt(Money.of(importRecord.getInterestAmt(), currencyId))\n-\t\t\t\t.chargeId(ChargeId.ofRepoIdOrNull(importRecord.getC_Charge_ID()))\n-\t\t\t\t//\n-\t\t\t\t.eft(ElectronicFundsTransfer.builder()\n-\t\t\t\t\t\t.trxId(importRecord.getEftTrxID())\n-\t\t\t\t\t\t.trxType(importRecord.getEftTrxType())\n-\t\t\t\t\t\t.checkNo(importRecord.getEftCheckNo())\n-\t\t\t\t\t\t.reference(importRecord.getEftReference())\n-\t\t\t\t\t\t.memo(importRecord.getEftMemo())\n-\t\t\t\t\t\t.payee(importRecord.getEftPayee())\n-\t\t\t\t\t\t.payeeAccount(importRecord.getEftPayeeAccount())\n-\t\t\t\t\t\t.statementLineDate(TimeUtil.asLocalDate(importRecord.getEftStatementLineDate()))\n-\t\t\t\t\t\t.valutaDate(TimeUtil.asLocalDate(importRecord.getEftValutaDate()))\n-\t\t\t\t\t\t.currency(importRecord.getEftCurrency())\n-\t\t\t\t\t\t.amt(importRecord.getEftAmt())\n-\t\t\t\t\t\t.build())\n-\t\t\t\t//\n-\t\t\t\t.build());\n+\t\tfinal BankStatementLineId bankStatementLineId = bankStatementDAO.createBankStatementLine(\n+\t\t\t\tBankStatementLineCreateRequest.builder()\n+\t\t\t\t\t\t.bankStatementId(BankStatementId.ofRepoId(importRecord.getC_BankStatement_ID()))\n+\t\t\t\t\t\t.orgId(OrgId.ofRepoId(importRecord.getAD_Org_ID()))\n+\t\t\t\t\t\t.lineNo(importRecord.getLine())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.bpartnerId(BPartnerId.ofRepoIdOrNull(importRecord.getC_BPartner_ID()))\n+\t\t\t\t\t\t.importedBillPartnerName(importRecord.getBill_BPartner_Name())\n+\t\t\t\t\t\t.importedBillPartnerIBAN(importRecord.getIBAN_To())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.referenceNo(importRecord.getReferenceNo())\n+\t\t\t\t\t\t.lineDescription(importRecord.getLineDescription())\n+\t\t\t\t\t\t.memo(importRecord.getMemo())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.statementLineDate(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getStatementLineDate(), importRecord.getStatementDate())))\n+\t\t\t\t\t\t.dateAcct(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getDateAcct(), importRecord.getStatementDate())))\n+\t\t\t\t\t\t.valutaDate(TimeUtil.asLocalDate(importRecord.getValutaDate()))\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.statementAmt(Money.of(importRecord.getStmtAmt(), currencyId))\n+\t\t\t\t\t\t.trxAmt(Money.of(importRecord.getTrxAmt(), currencyId))\n+\t\t\t\t\t\t.chargeAmt(Money.of(importRecord.getChargeAmt(), currencyId))\n+\t\t\t\t\t\t.interestAmt(Money.of(importRecord.getInterestAmt(), currencyId))\n+\t\t\t\t\t\t.chargeId(ChargeId.ofRepoIdOrNull(importRecord.getC_Charge_ID()))\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.eft(ElectronicFundsTransfer.builder()\n+\t\t\t\t\t\t\t\t\t .trxId(importRecord.getEftTrxID())\n+\t\t\t\t\t\t\t\t\t .trxType(importRecord.getEftTrxType())\n+\t\t\t\t\t\t\t\t\t .checkNo(importRecord.getEftCheckNo())\n+\t\t\t\t\t\t\t\t\t .reference(importRecord.getEftReference())\n+\t\t\t\t\t\t\t\t\t .memo(importRecord.getEftMemo())\n+\t\t\t\t\t\t\t\t\t .payee(importRecord.getEftPayee())\n+\t\t\t\t\t\t\t\t\t .payeeAccount(importRecord.getEftPayeeAccount())\n+\t\t\t\t\t\t\t\t\t .statementLineDate(TimeUtil.asLocalDate(importRecord.getEftStatementLineDate()))\n+\t\t\t\t\t\t\t\t\t .valutaDate(TimeUtil.asLocalDate(importRecord.getEftValutaDate()))\n+\t\t\t\t\t\t\t\t\t .currency(importRecord.getEftCurrency())\n+\t\t\t\t\t\t\t\t\t .amt(importRecord.getEftAmt())\n+\t\t\t\t\t\t\t\t\t .build())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.build());\n \n \t\timportRecord.setC_BankStatementLine_ID(bankStatementLineId.getRepoId());\n \t}\n \n \tprivate BankStatementId createBankStatement(@NonNull final I_I_BankStatement importBankStatement)\n \t{\n \t\treturn bankStatementDAO.createBankStatement(BankStatementCreateRequest.builder()\n-\t\t\t\t.orgId(OrgId.ofRepoId(importBankStatement.getAD_Org_ID()))\n-\t\t\t\t.orgBankAccountId(BankAccountId.ofRepoId(importBankStatement.getC_BP_BankAccount_ID()))\n-\t\t\t\t// TODO add documentNo to import\n-\t\t\t\t.statementDate(TimeUtil.asLocalDate(importBankStatement.getStatementDate()))\n-\t\t\t\t.name(importBankStatement.getName())\n-\t\t\t\t.description(importBankStatement.getDescription())\n-\t\t\t\t.eft(BankStatementCreateRequest.ElectronicFundsTransfer.builder()\n-\t\t\t\t\t\t.statementDate(TimeUtil.asLocalDate(importBankStatement.getEftStatementDate()))\n-\t\t\t\t\t\t.statementReference(importBankStatement.getEftStatementReference())\n-\t\t\t\t\t\t.build())\n-\t\t\t\t.build());\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.orgId(OrgId.ofRepoId(importBankStatement.getAD_Org_ID()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.orgBankAccountId(BankAccountId.ofRepoId(importBankStatement.getC_BP_BankAccount_ID()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// TODO add documentNo to import\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.statementDate(TimeUtil.asLocalDate(importBankStatement.getStatementDate()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.name(importBankStatement.getName())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(importBankStatement.getDescription())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.eft(BankStatementCreateRequest.ElectronicFundsTransfer.builder()\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .statementDate(TimeUtil.asLocalDate(importBankStatement.getEftStatementDate()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .statementReference(importBankStatement.getEftStatementReference())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .build())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.build());\n+\t}\n+\n+\t@VisibleForTesting\n+\tstatic void computeUpdateLineAmts(@NonNull final I_I_BankStatement importRecord)\n+\t{\n+\t\tfinal String amtFormat = getAmtFormat(importRecord);\n+\n+\t\tif (X_I_BankStatement.AMTFORMAT_AmountPlusIndicator.equals(amtFormat))\n+\t\t{\n+\t\t\tfinal BigDecimal trxAmt;\n+\t\t\tfinal boolean isDebit = \"S\".equals(importRecord.getDebitOrCreditIndicator());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "050cf8d40137394763ae1258ef526025948a5d83"}, "originalPosition": 185}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ5Mzk2Mw==", "bodyText": "done", "url": "https://github.com/metasfresh/metasfresh/pull/10272#discussion_r528493963", "createdAt": "2020-11-23T06:41:10Z", "author": {"login": "TheBestPessimist"}, "path": "backend/de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/impexp/BankStatementImportProcess.java", "diffHunk": "@@ -175,62 +180,147 @@ private void createBankStatementLine(final I_I_BankStatement importRecord)\n \n \t\tfinal CurrencyId currencyId = CurrencyId.ofRepoId(importRecord.getC_Currency_ID());\n \n-\t\tfinal BankStatementLineId bankStatementLineId = bankStatementDAO.createBankStatementLine(BankStatementLineCreateRequest.builder()\n-\t\t\t\t.bankStatementId(BankStatementId.ofRepoId(importRecord.getC_BankStatement_ID()))\n-\t\t\t\t.orgId(OrgId.ofRepoId(importRecord.getAD_Org_ID()))\n-\t\t\t\t.lineNo(importRecord.getLine())\n-\t\t\t\t//\n-\t\t\t\t.bpartnerId(BPartnerId.ofRepoIdOrNull(importRecord.getC_BPartner_ID()))\n-\t\t\t\t.importedBillPartnerName(importRecord.getBill_BPartner_Name())\n-\t\t\t\t.importedBillPartnerIBAN(importRecord.getIBAN_To())\n-\t\t\t\t//\n-\t\t\t\t.referenceNo(importRecord.getReferenceNo())\n-\t\t\t\t.lineDescription(importRecord.getLineDescription())\n-\t\t\t\t.memo(importRecord.getMemo())\n-\t\t\t\t//\n-\t\t\t\t.statementLineDate(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getStatementLineDate(), importRecord.getStatementDate())))\n-\t\t\t\t.dateAcct(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getDateAcct(), importRecord.getStatementDate())))\n-\t\t\t\t.valutaDate(TimeUtil.asLocalDate(importRecord.getValutaDate()))\n-\t\t\t\t//\n-\t\t\t\t.statementAmt(Money.of(importRecord.getStmtAmt(), currencyId))\n-\t\t\t\t.trxAmt(Money.of(importRecord.getTrxAmt(), currencyId))\n-\t\t\t\t.chargeAmt(Money.of(importRecord.getChargeAmt(), currencyId))\n-\t\t\t\t.interestAmt(Money.of(importRecord.getInterestAmt(), currencyId))\n-\t\t\t\t.chargeId(ChargeId.ofRepoIdOrNull(importRecord.getC_Charge_ID()))\n-\t\t\t\t//\n-\t\t\t\t.eft(ElectronicFundsTransfer.builder()\n-\t\t\t\t\t\t.trxId(importRecord.getEftTrxID())\n-\t\t\t\t\t\t.trxType(importRecord.getEftTrxType())\n-\t\t\t\t\t\t.checkNo(importRecord.getEftCheckNo())\n-\t\t\t\t\t\t.reference(importRecord.getEftReference())\n-\t\t\t\t\t\t.memo(importRecord.getEftMemo())\n-\t\t\t\t\t\t.payee(importRecord.getEftPayee())\n-\t\t\t\t\t\t.payeeAccount(importRecord.getEftPayeeAccount())\n-\t\t\t\t\t\t.statementLineDate(TimeUtil.asLocalDate(importRecord.getEftStatementLineDate()))\n-\t\t\t\t\t\t.valutaDate(TimeUtil.asLocalDate(importRecord.getEftValutaDate()))\n-\t\t\t\t\t\t.currency(importRecord.getEftCurrency())\n-\t\t\t\t\t\t.amt(importRecord.getEftAmt())\n-\t\t\t\t\t\t.build())\n-\t\t\t\t//\n-\t\t\t\t.build());\n+\t\tfinal BankStatementLineId bankStatementLineId = bankStatementDAO.createBankStatementLine(\n+\t\t\t\tBankStatementLineCreateRequest.builder()\n+\t\t\t\t\t\t.bankStatementId(BankStatementId.ofRepoId(importRecord.getC_BankStatement_ID()))\n+\t\t\t\t\t\t.orgId(OrgId.ofRepoId(importRecord.getAD_Org_ID()))\n+\t\t\t\t\t\t.lineNo(importRecord.getLine())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.bpartnerId(BPartnerId.ofRepoIdOrNull(importRecord.getC_BPartner_ID()))\n+\t\t\t\t\t\t.importedBillPartnerName(importRecord.getBill_BPartner_Name())\n+\t\t\t\t\t\t.importedBillPartnerIBAN(importRecord.getIBAN_To())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.referenceNo(importRecord.getReferenceNo())\n+\t\t\t\t\t\t.lineDescription(importRecord.getLineDescription())\n+\t\t\t\t\t\t.memo(importRecord.getMemo())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.statementLineDate(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getStatementLineDate(), importRecord.getStatementDate())))\n+\t\t\t\t\t\t.dateAcct(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getDateAcct(), importRecord.getStatementDate())))\n+\t\t\t\t\t\t.valutaDate(TimeUtil.asLocalDate(importRecord.getValutaDate()))\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.statementAmt(Money.of(importRecord.getStmtAmt(), currencyId))\n+\t\t\t\t\t\t.trxAmt(Money.of(importRecord.getTrxAmt(), currencyId))\n+\t\t\t\t\t\t.chargeAmt(Money.of(importRecord.getChargeAmt(), currencyId))\n+\t\t\t\t\t\t.interestAmt(Money.of(importRecord.getInterestAmt(), currencyId))\n+\t\t\t\t\t\t.chargeId(ChargeId.ofRepoIdOrNull(importRecord.getC_Charge_ID()))\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.eft(ElectronicFundsTransfer.builder()\n+\t\t\t\t\t\t\t\t\t .trxId(importRecord.getEftTrxID())\n+\t\t\t\t\t\t\t\t\t .trxType(importRecord.getEftTrxType())\n+\t\t\t\t\t\t\t\t\t .checkNo(importRecord.getEftCheckNo())\n+\t\t\t\t\t\t\t\t\t .reference(importRecord.getEftReference())\n+\t\t\t\t\t\t\t\t\t .memo(importRecord.getEftMemo())\n+\t\t\t\t\t\t\t\t\t .payee(importRecord.getEftPayee())\n+\t\t\t\t\t\t\t\t\t .payeeAccount(importRecord.getEftPayeeAccount())\n+\t\t\t\t\t\t\t\t\t .statementLineDate(TimeUtil.asLocalDate(importRecord.getEftStatementLineDate()))\n+\t\t\t\t\t\t\t\t\t .valutaDate(TimeUtil.asLocalDate(importRecord.getEftValutaDate()))\n+\t\t\t\t\t\t\t\t\t .currency(importRecord.getEftCurrency())\n+\t\t\t\t\t\t\t\t\t .amt(importRecord.getEftAmt())\n+\t\t\t\t\t\t\t\t\t .build())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.build());\n \n \t\timportRecord.setC_BankStatementLine_ID(bankStatementLineId.getRepoId());\n \t}\n \n \tprivate BankStatementId createBankStatement(@NonNull final I_I_BankStatement importBankStatement)\n \t{\n \t\treturn bankStatementDAO.createBankStatement(BankStatementCreateRequest.builder()\n-\t\t\t\t.orgId(OrgId.ofRepoId(importBankStatement.getAD_Org_ID()))\n-\t\t\t\t.orgBankAccountId(BankAccountId.ofRepoId(importBankStatement.getC_BP_BankAccount_ID()))\n-\t\t\t\t// TODO add documentNo to import\n-\t\t\t\t.statementDate(TimeUtil.asLocalDate(importBankStatement.getStatementDate()))\n-\t\t\t\t.name(importBankStatement.getName())\n-\t\t\t\t.description(importBankStatement.getDescription())\n-\t\t\t\t.eft(BankStatementCreateRequest.ElectronicFundsTransfer.builder()\n-\t\t\t\t\t\t.statementDate(TimeUtil.asLocalDate(importBankStatement.getEftStatementDate()))\n-\t\t\t\t\t\t.statementReference(importBankStatement.getEftStatementReference())\n-\t\t\t\t\t\t.build())\n-\t\t\t\t.build());\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.orgId(OrgId.ofRepoId(importBankStatement.getAD_Org_ID()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.orgBankAccountId(BankAccountId.ofRepoId(importBankStatement.getC_BP_BankAccount_ID()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// TODO add documentNo to import\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.statementDate(TimeUtil.asLocalDate(importBankStatement.getStatementDate()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.name(importBankStatement.getName())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(importBankStatement.getDescription())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.eft(BankStatementCreateRequest.ElectronicFundsTransfer.builder()\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .statementDate(TimeUtil.asLocalDate(importBankStatement.getEftStatementDate()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .statementReference(importBankStatement.getEftStatementReference())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .build())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.build());\n+\t}\n+\n+\t@VisibleForTesting\n+\tstatic void computeUpdateLineAmts(@NonNull final I_I_BankStatement importRecord)\n+\t{\n+\t\tfinal String amtFormat = getAmtFormat(importRecord);\n+\n+\t\tif (X_I_BankStatement.AMTFORMAT_AmountPlusIndicator.equals(amtFormat))\n+\t\t{\n+\t\t\tfinal BigDecimal trxAmt;\n+\t\t\tfinal boolean isDebit = \"S\".equals(importRecord.getDebitOrCreditIndicator());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzczMzc2Nw=="}, "originalCommit": {"oid": "050cf8d40137394763ae1258ef526025948a5d83"}, "originalPosition": 185}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODk3NTMxOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/impexp/BankStatementImportProcess.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNDozODoyM1rOH3SYZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNjo0MzoxM1rOH4AvrQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzczNDg4Nw==", "bodyText": "IMHO here the stmtAmt shall be trxAmt + chargeAmt + interestAmt", "url": "https://github.com/metasfresh/metasfresh/pull/10272#discussion_r527734887", "createdAt": "2020-11-20T14:38:23Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/impexp/BankStatementImportProcess.java", "diffHunk": "@@ -175,62 +180,147 @@ private void createBankStatementLine(final I_I_BankStatement importRecord)\n \n \t\tfinal CurrencyId currencyId = CurrencyId.ofRepoId(importRecord.getC_Currency_ID());\n \n-\t\tfinal BankStatementLineId bankStatementLineId = bankStatementDAO.createBankStatementLine(BankStatementLineCreateRequest.builder()\n-\t\t\t\t.bankStatementId(BankStatementId.ofRepoId(importRecord.getC_BankStatement_ID()))\n-\t\t\t\t.orgId(OrgId.ofRepoId(importRecord.getAD_Org_ID()))\n-\t\t\t\t.lineNo(importRecord.getLine())\n-\t\t\t\t//\n-\t\t\t\t.bpartnerId(BPartnerId.ofRepoIdOrNull(importRecord.getC_BPartner_ID()))\n-\t\t\t\t.importedBillPartnerName(importRecord.getBill_BPartner_Name())\n-\t\t\t\t.importedBillPartnerIBAN(importRecord.getIBAN_To())\n-\t\t\t\t//\n-\t\t\t\t.referenceNo(importRecord.getReferenceNo())\n-\t\t\t\t.lineDescription(importRecord.getLineDescription())\n-\t\t\t\t.memo(importRecord.getMemo())\n-\t\t\t\t//\n-\t\t\t\t.statementLineDate(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getStatementLineDate(), importRecord.getStatementDate())))\n-\t\t\t\t.dateAcct(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getDateAcct(), importRecord.getStatementDate())))\n-\t\t\t\t.valutaDate(TimeUtil.asLocalDate(importRecord.getValutaDate()))\n-\t\t\t\t//\n-\t\t\t\t.statementAmt(Money.of(importRecord.getStmtAmt(), currencyId))\n-\t\t\t\t.trxAmt(Money.of(importRecord.getTrxAmt(), currencyId))\n-\t\t\t\t.chargeAmt(Money.of(importRecord.getChargeAmt(), currencyId))\n-\t\t\t\t.interestAmt(Money.of(importRecord.getInterestAmt(), currencyId))\n-\t\t\t\t.chargeId(ChargeId.ofRepoIdOrNull(importRecord.getC_Charge_ID()))\n-\t\t\t\t//\n-\t\t\t\t.eft(ElectronicFundsTransfer.builder()\n-\t\t\t\t\t\t.trxId(importRecord.getEftTrxID())\n-\t\t\t\t\t\t.trxType(importRecord.getEftTrxType())\n-\t\t\t\t\t\t.checkNo(importRecord.getEftCheckNo())\n-\t\t\t\t\t\t.reference(importRecord.getEftReference())\n-\t\t\t\t\t\t.memo(importRecord.getEftMemo())\n-\t\t\t\t\t\t.payee(importRecord.getEftPayee())\n-\t\t\t\t\t\t.payeeAccount(importRecord.getEftPayeeAccount())\n-\t\t\t\t\t\t.statementLineDate(TimeUtil.asLocalDate(importRecord.getEftStatementLineDate()))\n-\t\t\t\t\t\t.valutaDate(TimeUtil.asLocalDate(importRecord.getEftValutaDate()))\n-\t\t\t\t\t\t.currency(importRecord.getEftCurrency())\n-\t\t\t\t\t\t.amt(importRecord.getEftAmt())\n-\t\t\t\t\t\t.build())\n-\t\t\t\t//\n-\t\t\t\t.build());\n+\t\tfinal BankStatementLineId bankStatementLineId = bankStatementDAO.createBankStatementLine(\n+\t\t\t\tBankStatementLineCreateRequest.builder()\n+\t\t\t\t\t\t.bankStatementId(BankStatementId.ofRepoId(importRecord.getC_BankStatement_ID()))\n+\t\t\t\t\t\t.orgId(OrgId.ofRepoId(importRecord.getAD_Org_ID()))\n+\t\t\t\t\t\t.lineNo(importRecord.getLine())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.bpartnerId(BPartnerId.ofRepoIdOrNull(importRecord.getC_BPartner_ID()))\n+\t\t\t\t\t\t.importedBillPartnerName(importRecord.getBill_BPartner_Name())\n+\t\t\t\t\t\t.importedBillPartnerIBAN(importRecord.getIBAN_To())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.referenceNo(importRecord.getReferenceNo())\n+\t\t\t\t\t\t.lineDescription(importRecord.getLineDescription())\n+\t\t\t\t\t\t.memo(importRecord.getMemo())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.statementLineDate(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getStatementLineDate(), importRecord.getStatementDate())))\n+\t\t\t\t\t\t.dateAcct(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getDateAcct(), importRecord.getStatementDate())))\n+\t\t\t\t\t\t.valutaDate(TimeUtil.asLocalDate(importRecord.getValutaDate()))\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.statementAmt(Money.of(importRecord.getStmtAmt(), currencyId))\n+\t\t\t\t\t\t.trxAmt(Money.of(importRecord.getTrxAmt(), currencyId))\n+\t\t\t\t\t\t.chargeAmt(Money.of(importRecord.getChargeAmt(), currencyId))\n+\t\t\t\t\t\t.interestAmt(Money.of(importRecord.getInterestAmt(), currencyId))\n+\t\t\t\t\t\t.chargeId(ChargeId.ofRepoIdOrNull(importRecord.getC_Charge_ID()))\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.eft(ElectronicFundsTransfer.builder()\n+\t\t\t\t\t\t\t\t\t .trxId(importRecord.getEftTrxID())\n+\t\t\t\t\t\t\t\t\t .trxType(importRecord.getEftTrxType())\n+\t\t\t\t\t\t\t\t\t .checkNo(importRecord.getEftCheckNo())\n+\t\t\t\t\t\t\t\t\t .reference(importRecord.getEftReference())\n+\t\t\t\t\t\t\t\t\t .memo(importRecord.getEftMemo())\n+\t\t\t\t\t\t\t\t\t .payee(importRecord.getEftPayee())\n+\t\t\t\t\t\t\t\t\t .payeeAccount(importRecord.getEftPayeeAccount())\n+\t\t\t\t\t\t\t\t\t .statementLineDate(TimeUtil.asLocalDate(importRecord.getEftStatementLineDate()))\n+\t\t\t\t\t\t\t\t\t .valutaDate(TimeUtil.asLocalDate(importRecord.getEftValutaDate()))\n+\t\t\t\t\t\t\t\t\t .currency(importRecord.getEftCurrency())\n+\t\t\t\t\t\t\t\t\t .amt(importRecord.getEftAmt())\n+\t\t\t\t\t\t\t\t\t .build())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.build());\n \n \t\timportRecord.setC_BankStatementLine_ID(bankStatementLineId.getRepoId());\n \t}\n \n \tprivate BankStatementId createBankStatement(@NonNull final I_I_BankStatement importBankStatement)\n \t{\n \t\treturn bankStatementDAO.createBankStatement(BankStatementCreateRequest.builder()\n-\t\t\t\t.orgId(OrgId.ofRepoId(importBankStatement.getAD_Org_ID()))\n-\t\t\t\t.orgBankAccountId(BankAccountId.ofRepoId(importBankStatement.getC_BP_BankAccount_ID()))\n-\t\t\t\t// TODO add documentNo to import\n-\t\t\t\t.statementDate(TimeUtil.asLocalDate(importBankStatement.getStatementDate()))\n-\t\t\t\t.name(importBankStatement.getName())\n-\t\t\t\t.description(importBankStatement.getDescription())\n-\t\t\t\t.eft(BankStatementCreateRequest.ElectronicFundsTransfer.builder()\n-\t\t\t\t\t\t.statementDate(TimeUtil.asLocalDate(importBankStatement.getEftStatementDate()))\n-\t\t\t\t\t\t.statementReference(importBankStatement.getEftStatementReference())\n-\t\t\t\t\t\t.build())\n-\t\t\t\t.build());\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.orgId(OrgId.ofRepoId(importBankStatement.getAD_Org_ID()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.orgBankAccountId(BankAccountId.ofRepoId(importBankStatement.getC_BP_BankAccount_ID()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// TODO add documentNo to import\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.statementDate(TimeUtil.asLocalDate(importBankStatement.getStatementDate()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.name(importBankStatement.getName())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(importBankStatement.getDescription())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.eft(BankStatementCreateRequest.ElectronicFundsTransfer.builder()\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .statementDate(TimeUtil.asLocalDate(importBankStatement.getEftStatementDate()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .statementReference(importBankStatement.getEftStatementReference())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .build())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.build());\n+\t}\n+\n+\t@VisibleForTesting\n+\tstatic void computeUpdateLineAmts(@NonNull final I_I_BankStatement importRecord)\n+\t{\n+\t\tfinal String amtFormat = getAmtFormat(importRecord);\n+\n+\t\tif (X_I_BankStatement.AMTFORMAT_AmountPlusIndicator.equals(amtFormat))\n+\t\t{\n+\t\t\tfinal BigDecimal trxAmt;\n+\t\t\tfinal boolean isDebit = \"S\".equals(importRecord.getDebitOrCreditIndicator());\n+\t\t\tif (isDebit)\n+\t\t\t{\n+\t\t\t\ttrxAmt = importRecord.getDebitOrCreditAmt().negate();\n+\t\t\t}\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\ttrxAmt = importRecord.getDebitOrCreditAmt();\n+\t\t\t}\n+\n+\t\t\timportRecord.setTrxAmt(trxAmt);\n+\t\t\tfinal BigDecimal stmtAmt = trxAmt.add(importRecord.getChargeAmt()).add(importRecord.getInterestAmt());\n+\t\t\timportRecord.setStmtAmt(stmtAmt);\n+\t\t}\n+\t\telse if (X_I_BankStatement.AMTFORMAT_DebitPlusCredit.equals(amtFormat))\n+\t\t{\n+\t\t\tfinal BigDecimal stmtAmt = importRecord.getCreditStmtAmt().subtract(importRecord.getDebitStmtAmt());\n+\t\t\timportRecord.setStmtAmt(stmtAmt);\n+\t\t\tfinal BigDecimal trxAmt = stmtAmt.subtract(importRecord.getInterestAmt()).subtract(importRecord.getChargeAmt());\n+\t\t\timportRecord.setTrxAmt(trxAmt);\n+\t\t}\n+\t\telse if (X_I_BankStatement.AMTFORMAT_Straight.equals(amtFormat))\n+\t\t{\n+\t\t\timportRecord.setStmtAmt(importRecord.getTrxAmt());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "050cf8d40137394763ae1258ef526025948a5d83"}, "originalPosition": 208}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ5NDUwOQ==", "bodyText": "done", "url": "https://github.com/metasfresh/metasfresh/pull/10272#discussion_r528494509", "createdAt": "2020-11-23T06:43:13Z", "author": {"login": "TheBestPessimist"}, "path": "backend/de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/impexp/BankStatementImportProcess.java", "diffHunk": "@@ -175,62 +180,147 @@ private void createBankStatementLine(final I_I_BankStatement importRecord)\n \n \t\tfinal CurrencyId currencyId = CurrencyId.ofRepoId(importRecord.getC_Currency_ID());\n \n-\t\tfinal BankStatementLineId bankStatementLineId = bankStatementDAO.createBankStatementLine(BankStatementLineCreateRequest.builder()\n-\t\t\t\t.bankStatementId(BankStatementId.ofRepoId(importRecord.getC_BankStatement_ID()))\n-\t\t\t\t.orgId(OrgId.ofRepoId(importRecord.getAD_Org_ID()))\n-\t\t\t\t.lineNo(importRecord.getLine())\n-\t\t\t\t//\n-\t\t\t\t.bpartnerId(BPartnerId.ofRepoIdOrNull(importRecord.getC_BPartner_ID()))\n-\t\t\t\t.importedBillPartnerName(importRecord.getBill_BPartner_Name())\n-\t\t\t\t.importedBillPartnerIBAN(importRecord.getIBAN_To())\n-\t\t\t\t//\n-\t\t\t\t.referenceNo(importRecord.getReferenceNo())\n-\t\t\t\t.lineDescription(importRecord.getLineDescription())\n-\t\t\t\t.memo(importRecord.getMemo())\n-\t\t\t\t//\n-\t\t\t\t.statementLineDate(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getStatementLineDate(), importRecord.getStatementDate())))\n-\t\t\t\t.dateAcct(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getDateAcct(), importRecord.getStatementDate())))\n-\t\t\t\t.valutaDate(TimeUtil.asLocalDate(importRecord.getValutaDate()))\n-\t\t\t\t//\n-\t\t\t\t.statementAmt(Money.of(importRecord.getStmtAmt(), currencyId))\n-\t\t\t\t.trxAmt(Money.of(importRecord.getTrxAmt(), currencyId))\n-\t\t\t\t.chargeAmt(Money.of(importRecord.getChargeAmt(), currencyId))\n-\t\t\t\t.interestAmt(Money.of(importRecord.getInterestAmt(), currencyId))\n-\t\t\t\t.chargeId(ChargeId.ofRepoIdOrNull(importRecord.getC_Charge_ID()))\n-\t\t\t\t//\n-\t\t\t\t.eft(ElectronicFundsTransfer.builder()\n-\t\t\t\t\t\t.trxId(importRecord.getEftTrxID())\n-\t\t\t\t\t\t.trxType(importRecord.getEftTrxType())\n-\t\t\t\t\t\t.checkNo(importRecord.getEftCheckNo())\n-\t\t\t\t\t\t.reference(importRecord.getEftReference())\n-\t\t\t\t\t\t.memo(importRecord.getEftMemo())\n-\t\t\t\t\t\t.payee(importRecord.getEftPayee())\n-\t\t\t\t\t\t.payeeAccount(importRecord.getEftPayeeAccount())\n-\t\t\t\t\t\t.statementLineDate(TimeUtil.asLocalDate(importRecord.getEftStatementLineDate()))\n-\t\t\t\t\t\t.valutaDate(TimeUtil.asLocalDate(importRecord.getEftValutaDate()))\n-\t\t\t\t\t\t.currency(importRecord.getEftCurrency())\n-\t\t\t\t\t\t.amt(importRecord.getEftAmt())\n-\t\t\t\t\t\t.build())\n-\t\t\t\t//\n-\t\t\t\t.build());\n+\t\tfinal BankStatementLineId bankStatementLineId = bankStatementDAO.createBankStatementLine(\n+\t\t\t\tBankStatementLineCreateRequest.builder()\n+\t\t\t\t\t\t.bankStatementId(BankStatementId.ofRepoId(importRecord.getC_BankStatement_ID()))\n+\t\t\t\t\t\t.orgId(OrgId.ofRepoId(importRecord.getAD_Org_ID()))\n+\t\t\t\t\t\t.lineNo(importRecord.getLine())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.bpartnerId(BPartnerId.ofRepoIdOrNull(importRecord.getC_BPartner_ID()))\n+\t\t\t\t\t\t.importedBillPartnerName(importRecord.getBill_BPartner_Name())\n+\t\t\t\t\t\t.importedBillPartnerIBAN(importRecord.getIBAN_To())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.referenceNo(importRecord.getReferenceNo())\n+\t\t\t\t\t\t.lineDescription(importRecord.getLineDescription())\n+\t\t\t\t\t\t.memo(importRecord.getMemo())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.statementLineDate(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getStatementLineDate(), importRecord.getStatementDate())))\n+\t\t\t\t\t\t.dateAcct(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getDateAcct(), importRecord.getStatementDate())))\n+\t\t\t\t\t\t.valutaDate(TimeUtil.asLocalDate(importRecord.getValutaDate()))\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.statementAmt(Money.of(importRecord.getStmtAmt(), currencyId))\n+\t\t\t\t\t\t.trxAmt(Money.of(importRecord.getTrxAmt(), currencyId))\n+\t\t\t\t\t\t.chargeAmt(Money.of(importRecord.getChargeAmt(), currencyId))\n+\t\t\t\t\t\t.interestAmt(Money.of(importRecord.getInterestAmt(), currencyId))\n+\t\t\t\t\t\t.chargeId(ChargeId.ofRepoIdOrNull(importRecord.getC_Charge_ID()))\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.eft(ElectronicFundsTransfer.builder()\n+\t\t\t\t\t\t\t\t\t .trxId(importRecord.getEftTrxID())\n+\t\t\t\t\t\t\t\t\t .trxType(importRecord.getEftTrxType())\n+\t\t\t\t\t\t\t\t\t .checkNo(importRecord.getEftCheckNo())\n+\t\t\t\t\t\t\t\t\t .reference(importRecord.getEftReference())\n+\t\t\t\t\t\t\t\t\t .memo(importRecord.getEftMemo())\n+\t\t\t\t\t\t\t\t\t .payee(importRecord.getEftPayee())\n+\t\t\t\t\t\t\t\t\t .payeeAccount(importRecord.getEftPayeeAccount())\n+\t\t\t\t\t\t\t\t\t .statementLineDate(TimeUtil.asLocalDate(importRecord.getEftStatementLineDate()))\n+\t\t\t\t\t\t\t\t\t .valutaDate(TimeUtil.asLocalDate(importRecord.getEftValutaDate()))\n+\t\t\t\t\t\t\t\t\t .currency(importRecord.getEftCurrency())\n+\t\t\t\t\t\t\t\t\t .amt(importRecord.getEftAmt())\n+\t\t\t\t\t\t\t\t\t .build())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.build());\n \n \t\timportRecord.setC_BankStatementLine_ID(bankStatementLineId.getRepoId());\n \t}\n \n \tprivate BankStatementId createBankStatement(@NonNull final I_I_BankStatement importBankStatement)\n \t{\n \t\treturn bankStatementDAO.createBankStatement(BankStatementCreateRequest.builder()\n-\t\t\t\t.orgId(OrgId.ofRepoId(importBankStatement.getAD_Org_ID()))\n-\t\t\t\t.orgBankAccountId(BankAccountId.ofRepoId(importBankStatement.getC_BP_BankAccount_ID()))\n-\t\t\t\t// TODO add documentNo to import\n-\t\t\t\t.statementDate(TimeUtil.asLocalDate(importBankStatement.getStatementDate()))\n-\t\t\t\t.name(importBankStatement.getName())\n-\t\t\t\t.description(importBankStatement.getDescription())\n-\t\t\t\t.eft(BankStatementCreateRequest.ElectronicFundsTransfer.builder()\n-\t\t\t\t\t\t.statementDate(TimeUtil.asLocalDate(importBankStatement.getEftStatementDate()))\n-\t\t\t\t\t\t.statementReference(importBankStatement.getEftStatementReference())\n-\t\t\t\t\t\t.build())\n-\t\t\t\t.build());\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.orgId(OrgId.ofRepoId(importBankStatement.getAD_Org_ID()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.orgBankAccountId(BankAccountId.ofRepoId(importBankStatement.getC_BP_BankAccount_ID()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// TODO add documentNo to import\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.statementDate(TimeUtil.asLocalDate(importBankStatement.getStatementDate()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.name(importBankStatement.getName())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(importBankStatement.getDescription())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.eft(BankStatementCreateRequest.ElectronicFundsTransfer.builder()\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .statementDate(TimeUtil.asLocalDate(importBankStatement.getEftStatementDate()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .statementReference(importBankStatement.getEftStatementReference())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .build())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.build());\n+\t}\n+\n+\t@VisibleForTesting\n+\tstatic void computeUpdateLineAmts(@NonNull final I_I_BankStatement importRecord)\n+\t{\n+\t\tfinal String amtFormat = getAmtFormat(importRecord);\n+\n+\t\tif (X_I_BankStatement.AMTFORMAT_AmountPlusIndicator.equals(amtFormat))\n+\t\t{\n+\t\t\tfinal BigDecimal trxAmt;\n+\t\t\tfinal boolean isDebit = \"S\".equals(importRecord.getDebitOrCreditIndicator());\n+\t\t\tif (isDebit)\n+\t\t\t{\n+\t\t\t\ttrxAmt = importRecord.getDebitOrCreditAmt().negate();\n+\t\t\t}\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\ttrxAmt = importRecord.getDebitOrCreditAmt();\n+\t\t\t}\n+\n+\t\t\timportRecord.setTrxAmt(trxAmt);\n+\t\t\tfinal BigDecimal stmtAmt = trxAmt.add(importRecord.getChargeAmt()).add(importRecord.getInterestAmt());\n+\t\t\timportRecord.setStmtAmt(stmtAmt);\n+\t\t}\n+\t\telse if (X_I_BankStatement.AMTFORMAT_DebitPlusCredit.equals(amtFormat))\n+\t\t{\n+\t\t\tfinal BigDecimal stmtAmt = importRecord.getCreditStmtAmt().subtract(importRecord.getDebitStmtAmt());\n+\t\t\timportRecord.setStmtAmt(stmtAmt);\n+\t\t\tfinal BigDecimal trxAmt = stmtAmt.subtract(importRecord.getInterestAmt()).subtract(importRecord.getChargeAmt());\n+\t\t\timportRecord.setTrxAmt(trxAmt);\n+\t\t}\n+\t\telse if (X_I_BankStatement.AMTFORMAT_Straight.equals(amtFormat))\n+\t\t{\n+\t\t\timportRecord.setStmtAmt(importRecord.getTrxAmt());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzczNDg4Nw=="}, "originalCommit": {"oid": "050cf8d40137394763ae1258ef526025948a5d83"}, "originalPosition": 208}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODk3NzEwOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/impexp/BankStatementImportProcess.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNDozODo1NVrOH3SZoA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwODo0ODo1OVrOH4Dw6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzczNTIwMA==", "bodyText": "what case is this?\nShouldn't we throw exception for this case?", "url": "https://github.com/metasfresh/metasfresh/pull/10272#discussion_r527735200", "createdAt": "2020-11-20T14:38:55Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/impexp/BankStatementImportProcess.java", "diffHunk": "@@ -175,62 +180,147 @@ private void createBankStatementLine(final I_I_BankStatement importRecord)\n \n \t\tfinal CurrencyId currencyId = CurrencyId.ofRepoId(importRecord.getC_Currency_ID());\n \n-\t\tfinal BankStatementLineId bankStatementLineId = bankStatementDAO.createBankStatementLine(BankStatementLineCreateRequest.builder()\n-\t\t\t\t.bankStatementId(BankStatementId.ofRepoId(importRecord.getC_BankStatement_ID()))\n-\t\t\t\t.orgId(OrgId.ofRepoId(importRecord.getAD_Org_ID()))\n-\t\t\t\t.lineNo(importRecord.getLine())\n-\t\t\t\t//\n-\t\t\t\t.bpartnerId(BPartnerId.ofRepoIdOrNull(importRecord.getC_BPartner_ID()))\n-\t\t\t\t.importedBillPartnerName(importRecord.getBill_BPartner_Name())\n-\t\t\t\t.importedBillPartnerIBAN(importRecord.getIBAN_To())\n-\t\t\t\t//\n-\t\t\t\t.referenceNo(importRecord.getReferenceNo())\n-\t\t\t\t.lineDescription(importRecord.getLineDescription())\n-\t\t\t\t.memo(importRecord.getMemo())\n-\t\t\t\t//\n-\t\t\t\t.statementLineDate(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getStatementLineDate(), importRecord.getStatementDate())))\n-\t\t\t\t.dateAcct(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getDateAcct(), importRecord.getStatementDate())))\n-\t\t\t\t.valutaDate(TimeUtil.asLocalDate(importRecord.getValutaDate()))\n-\t\t\t\t//\n-\t\t\t\t.statementAmt(Money.of(importRecord.getStmtAmt(), currencyId))\n-\t\t\t\t.trxAmt(Money.of(importRecord.getTrxAmt(), currencyId))\n-\t\t\t\t.chargeAmt(Money.of(importRecord.getChargeAmt(), currencyId))\n-\t\t\t\t.interestAmt(Money.of(importRecord.getInterestAmt(), currencyId))\n-\t\t\t\t.chargeId(ChargeId.ofRepoIdOrNull(importRecord.getC_Charge_ID()))\n-\t\t\t\t//\n-\t\t\t\t.eft(ElectronicFundsTransfer.builder()\n-\t\t\t\t\t\t.trxId(importRecord.getEftTrxID())\n-\t\t\t\t\t\t.trxType(importRecord.getEftTrxType())\n-\t\t\t\t\t\t.checkNo(importRecord.getEftCheckNo())\n-\t\t\t\t\t\t.reference(importRecord.getEftReference())\n-\t\t\t\t\t\t.memo(importRecord.getEftMemo())\n-\t\t\t\t\t\t.payee(importRecord.getEftPayee())\n-\t\t\t\t\t\t.payeeAccount(importRecord.getEftPayeeAccount())\n-\t\t\t\t\t\t.statementLineDate(TimeUtil.asLocalDate(importRecord.getEftStatementLineDate()))\n-\t\t\t\t\t\t.valutaDate(TimeUtil.asLocalDate(importRecord.getEftValutaDate()))\n-\t\t\t\t\t\t.currency(importRecord.getEftCurrency())\n-\t\t\t\t\t\t.amt(importRecord.getEftAmt())\n-\t\t\t\t\t\t.build())\n-\t\t\t\t//\n-\t\t\t\t.build());\n+\t\tfinal BankStatementLineId bankStatementLineId = bankStatementDAO.createBankStatementLine(\n+\t\t\t\tBankStatementLineCreateRequest.builder()\n+\t\t\t\t\t\t.bankStatementId(BankStatementId.ofRepoId(importRecord.getC_BankStatement_ID()))\n+\t\t\t\t\t\t.orgId(OrgId.ofRepoId(importRecord.getAD_Org_ID()))\n+\t\t\t\t\t\t.lineNo(importRecord.getLine())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.bpartnerId(BPartnerId.ofRepoIdOrNull(importRecord.getC_BPartner_ID()))\n+\t\t\t\t\t\t.importedBillPartnerName(importRecord.getBill_BPartner_Name())\n+\t\t\t\t\t\t.importedBillPartnerIBAN(importRecord.getIBAN_To())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.referenceNo(importRecord.getReferenceNo())\n+\t\t\t\t\t\t.lineDescription(importRecord.getLineDescription())\n+\t\t\t\t\t\t.memo(importRecord.getMemo())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.statementLineDate(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getStatementLineDate(), importRecord.getStatementDate())))\n+\t\t\t\t\t\t.dateAcct(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getDateAcct(), importRecord.getStatementDate())))\n+\t\t\t\t\t\t.valutaDate(TimeUtil.asLocalDate(importRecord.getValutaDate()))\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.statementAmt(Money.of(importRecord.getStmtAmt(), currencyId))\n+\t\t\t\t\t\t.trxAmt(Money.of(importRecord.getTrxAmt(), currencyId))\n+\t\t\t\t\t\t.chargeAmt(Money.of(importRecord.getChargeAmt(), currencyId))\n+\t\t\t\t\t\t.interestAmt(Money.of(importRecord.getInterestAmt(), currencyId))\n+\t\t\t\t\t\t.chargeId(ChargeId.ofRepoIdOrNull(importRecord.getC_Charge_ID()))\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.eft(ElectronicFundsTransfer.builder()\n+\t\t\t\t\t\t\t\t\t .trxId(importRecord.getEftTrxID())\n+\t\t\t\t\t\t\t\t\t .trxType(importRecord.getEftTrxType())\n+\t\t\t\t\t\t\t\t\t .checkNo(importRecord.getEftCheckNo())\n+\t\t\t\t\t\t\t\t\t .reference(importRecord.getEftReference())\n+\t\t\t\t\t\t\t\t\t .memo(importRecord.getEftMemo())\n+\t\t\t\t\t\t\t\t\t .payee(importRecord.getEftPayee())\n+\t\t\t\t\t\t\t\t\t .payeeAccount(importRecord.getEftPayeeAccount())\n+\t\t\t\t\t\t\t\t\t .statementLineDate(TimeUtil.asLocalDate(importRecord.getEftStatementLineDate()))\n+\t\t\t\t\t\t\t\t\t .valutaDate(TimeUtil.asLocalDate(importRecord.getEftValutaDate()))\n+\t\t\t\t\t\t\t\t\t .currency(importRecord.getEftCurrency())\n+\t\t\t\t\t\t\t\t\t .amt(importRecord.getEftAmt())\n+\t\t\t\t\t\t\t\t\t .build())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.build());\n \n \t\timportRecord.setC_BankStatementLine_ID(bankStatementLineId.getRepoId());\n \t}\n \n \tprivate BankStatementId createBankStatement(@NonNull final I_I_BankStatement importBankStatement)\n \t{\n \t\treturn bankStatementDAO.createBankStatement(BankStatementCreateRequest.builder()\n-\t\t\t\t.orgId(OrgId.ofRepoId(importBankStatement.getAD_Org_ID()))\n-\t\t\t\t.orgBankAccountId(BankAccountId.ofRepoId(importBankStatement.getC_BP_BankAccount_ID()))\n-\t\t\t\t// TODO add documentNo to import\n-\t\t\t\t.statementDate(TimeUtil.asLocalDate(importBankStatement.getStatementDate()))\n-\t\t\t\t.name(importBankStatement.getName())\n-\t\t\t\t.description(importBankStatement.getDescription())\n-\t\t\t\t.eft(BankStatementCreateRequest.ElectronicFundsTransfer.builder()\n-\t\t\t\t\t\t.statementDate(TimeUtil.asLocalDate(importBankStatement.getEftStatementDate()))\n-\t\t\t\t\t\t.statementReference(importBankStatement.getEftStatementReference())\n-\t\t\t\t\t\t.build())\n-\t\t\t\t.build());\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.orgId(OrgId.ofRepoId(importBankStatement.getAD_Org_ID()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.orgBankAccountId(BankAccountId.ofRepoId(importBankStatement.getC_BP_BankAccount_ID()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// TODO add documentNo to import\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.statementDate(TimeUtil.asLocalDate(importBankStatement.getStatementDate()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.name(importBankStatement.getName())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(importBankStatement.getDescription())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.eft(BankStatementCreateRequest.ElectronicFundsTransfer.builder()\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .statementDate(TimeUtil.asLocalDate(importBankStatement.getEftStatementDate()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .statementReference(importBankStatement.getEftStatementReference())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .build())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.build());\n+\t}\n+\n+\t@VisibleForTesting\n+\tstatic void computeUpdateLineAmts(@NonNull final I_I_BankStatement importRecord)\n+\t{\n+\t\tfinal String amtFormat = getAmtFormat(importRecord);\n+\n+\t\tif (X_I_BankStatement.AMTFORMAT_AmountPlusIndicator.equals(amtFormat))\n+\t\t{\n+\t\t\tfinal BigDecimal trxAmt;\n+\t\t\tfinal boolean isDebit = \"S\".equals(importRecord.getDebitOrCreditIndicator());\n+\t\t\tif (isDebit)\n+\t\t\t{\n+\t\t\t\ttrxAmt = importRecord.getDebitOrCreditAmt().negate();\n+\t\t\t}\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\ttrxAmt = importRecord.getDebitOrCreditAmt();\n+\t\t\t}\n+\n+\t\t\timportRecord.setTrxAmt(trxAmt);\n+\t\t\tfinal BigDecimal stmtAmt = trxAmt.add(importRecord.getChargeAmt()).add(importRecord.getInterestAmt());\n+\t\t\timportRecord.setStmtAmt(stmtAmt);\n+\t\t}\n+\t\telse if (X_I_BankStatement.AMTFORMAT_DebitPlusCredit.equals(amtFormat))\n+\t\t{\n+\t\t\tfinal BigDecimal stmtAmt = importRecord.getCreditStmtAmt().subtract(importRecord.getDebitStmtAmt());\n+\t\t\timportRecord.setStmtAmt(stmtAmt);\n+\t\t\tfinal BigDecimal trxAmt = stmtAmt.subtract(importRecord.getInterestAmt()).subtract(importRecord.getChargeAmt());\n+\t\t\timportRecord.setTrxAmt(trxAmt);\n+\t\t}\n+\t\telse if (X_I_BankStatement.AMTFORMAT_Straight.equals(amtFormat))\n+\t\t{\n+\t\t\timportRecord.setStmtAmt(importRecord.getTrxAmt());\n+\t\t}\n+\n+\t\t{\n+\t\t\tfinal BigDecimal sum = importRecord.getTrxAmt().add(importRecord.getInterestAmt()).add(importRecord.getChargeAmt());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "050cf8d40137394763ae1258ef526025948a5d83"}, "originalPosition": 212}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ5NDgzNw==", "bodyText": "This is the case where our amt calculations are wrong, and we are throwing an error:\nif StmtAmt != TrxAmt + ChargeAmt + InterestAmt then throw exception.", "url": "https://github.com/metasfresh/metasfresh/pull/10272#discussion_r528494837", "createdAt": "2020-11-23T06:44:41Z", "author": {"login": "TheBestPessimist"}, "path": "backend/de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/impexp/BankStatementImportProcess.java", "diffHunk": "@@ -175,62 +180,147 @@ private void createBankStatementLine(final I_I_BankStatement importRecord)\n \n \t\tfinal CurrencyId currencyId = CurrencyId.ofRepoId(importRecord.getC_Currency_ID());\n \n-\t\tfinal BankStatementLineId bankStatementLineId = bankStatementDAO.createBankStatementLine(BankStatementLineCreateRequest.builder()\n-\t\t\t\t.bankStatementId(BankStatementId.ofRepoId(importRecord.getC_BankStatement_ID()))\n-\t\t\t\t.orgId(OrgId.ofRepoId(importRecord.getAD_Org_ID()))\n-\t\t\t\t.lineNo(importRecord.getLine())\n-\t\t\t\t//\n-\t\t\t\t.bpartnerId(BPartnerId.ofRepoIdOrNull(importRecord.getC_BPartner_ID()))\n-\t\t\t\t.importedBillPartnerName(importRecord.getBill_BPartner_Name())\n-\t\t\t\t.importedBillPartnerIBAN(importRecord.getIBAN_To())\n-\t\t\t\t//\n-\t\t\t\t.referenceNo(importRecord.getReferenceNo())\n-\t\t\t\t.lineDescription(importRecord.getLineDescription())\n-\t\t\t\t.memo(importRecord.getMemo())\n-\t\t\t\t//\n-\t\t\t\t.statementLineDate(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getStatementLineDate(), importRecord.getStatementDate())))\n-\t\t\t\t.dateAcct(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getDateAcct(), importRecord.getStatementDate())))\n-\t\t\t\t.valutaDate(TimeUtil.asLocalDate(importRecord.getValutaDate()))\n-\t\t\t\t//\n-\t\t\t\t.statementAmt(Money.of(importRecord.getStmtAmt(), currencyId))\n-\t\t\t\t.trxAmt(Money.of(importRecord.getTrxAmt(), currencyId))\n-\t\t\t\t.chargeAmt(Money.of(importRecord.getChargeAmt(), currencyId))\n-\t\t\t\t.interestAmt(Money.of(importRecord.getInterestAmt(), currencyId))\n-\t\t\t\t.chargeId(ChargeId.ofRepoIdOrNull(importRecord.getC_Charge_ID()))\n-\t\t\t\t//\n-\t\t\t\t.eft(ElectronicFundsTransfer.builder()\n-\t\t\t\t\t\t.trxId(importRecord.getEftTrxID())\n-\t\t\t\t\t\t.trxType(importRecord.getEftTrxType())\n-\t\t\t\t\t\t.checkNo(importRecord.getEftCheckNo())\n-\t\t\t\t\t\t.reference(importRecord.getEftReference())\n-\t\t\t\t\t\t.memo(importRecord.getEftMemo())\n-\t\t\t\t\t\t.payee(importRecord.getEftPayee())\n-\t\t\t\t\t\t.payeeAccount(importRecord.getEftPayeeAccount())\n-\t\t\t\t\t\t.statementLineDate(TimeUtil.asLocalDate(importRecord.getEftStatementLineDate()))\n-\t\t\t\t\t\t.valutaDate(TimeUtil.asLocalDate(importRecord.getEftValutaDate()))\n-\t\t\t\t\t\t.currency(importRecord.getEftCurrency())\n-\t\t\t\t\t\t.amt(importRecord.getEftAmt())\n-\t\t\t\t\t\t.build())\n-\t\t\t\t//\n-\t\t\t\t.build());\n+\t\tfinal BankStatementLineId bankStatementLineId = bankStatementDAO.createBankStatementLine(\n+\t\t\t\tBankStatementLineCreateRequest.builder()\n+\t\t\t\t\t\t.bankStatementId(BankStatementId.ofRepoId(importRecord.getC_BankStatement_ID()))\n+\t\t\t\t\t\t.orgId(OrgId.ofRepoId(importRecord.getAD_Org_ID()))\n+\t\t\t\t\t\t.lineNo(importRecord.getLine())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.bpartnerId(BPartnerId.ofRepoIdOrNull(importRecord.getC_BPartner_ID()))\n+\t\t\t\t\t\t.importedBillPartnerName(importRecord.getBill_BPartner_Name())\n+\t\t\t\t\t\t.importedBillPartnerIBAN(importRecord.getIBAN_To())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.referenceNo(importRecord.getReferenceNo())\n+\t\t\t\t\t\t.lineDescription(importRecord.getLineDescription())\n+\t\t\t\t\t\t.memo(importRecord.getMemo())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.statementLineDate(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getStatementLineDate(), importRecord.getStatementDate())))\n+\t\t\t\t\t\t.dateAcct(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getDateAcct(), importRecord.getStatementDate())))\n+\t\t\t\t\t\t.valutaDate(TimeUtil.asLocalDate(importRecord.getValutaDate()))\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.statementAmt(Money.of(importRecord.getStmtAmt(), currencyId))\n+\t\t\t\t\t\t.trxAmt(Money.of(importRecord.getTrxAmt(), currencyId))\n+\t\t\t\t\t\t.chargeAmt(Money.of(importRecord.getChargeAmt(), currencyId))\n+\t\t\t\t\t\t.interestAmt(Money.of(importRecord.getInterestAmt(), currencyId))\n+\t\t\t\t\t\t.chargeId(ChargeId.ofRepoIdOrNull(importRecord.getC_Charge_ID()))\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.eft(ElectronicFundsTransfer.builder()\n+\t\t\t\t\t\t\t\t\t .trxId(importRecord.getEftTrxID())\n+\t\t\t\t\t\t\t\t\t .trxType(importRecord.getEftTrxType())\n+\t\t\t\t\t\t\t\t\t .checkNo(importRecord.getEftCheckNo())\n+\t\t\t\t\t\t\t\t\t .reference(importRecord.getEftReference())\n+\t\t\t\t\t\t\t\t\t .memo(importRecord.getEftMemo())\n+\t\t\t\t\t\t\t\t\t .payee(importRecord.getEftPayee())\n+\t\t\t\t\t\t\t\t\t .payeeAccount(importRecord.getEftPayeeAccount())\n+\t\t\t\t\t\t\t\t\t .statementLineDate(TimeUtil.asLocalDate(importRecord.getEftStatementLineDate()))\n+\t\t\t\t\t\t\t\t\t .valutaDate(TimeUtil.asLocalDate(importRecord.getEftValutaDate()))\n+\t\t\t\t\t\t\t\t\t .currency(importRecord.getEftCurrency())\n+\t\t\t\t\t\t\t\t\t .amt(importRecord.getEftAmt())\n+\t\t\t\t\t\t\t\t\t .build())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.build());\n \n \t\timportRecord.setC_BankStatementLine_ID(bankStatementLineId.getRepoId());\n \t}\n \n \tprivate BankStatementId createBankStatement(@NonNull final I_I_BankStatement importBankStatement)\n \t{\n \t\treturn bankStatementDAO.createBankStatement(BankStatementCreateRequest.builder()\n-\t\t\t\t.orgId(OrgId.ofRepoId(importBankStatement.getAD_Org_ID()))\n-\t\t\t\t.orgBankAccountId(BankAccountId.ofRepoId(importBankStatement.getC_BP_BankAccount_ID()))\n-\t\t\t\t// TODO add documentNo to import\n-\t\t\t\t.statementDate(TimeUtil.asLocalDate(importBankStatement.getStatementDate()))\n-\t\t\t\t.name(importBankStatement.getName())\n-\t\t\t\t.description(importBankStatement.getDescription())\n-\t\t\t\t.eft(BankStatementCreateRequest.ElectronicFundsTransfer.builder()\n-\t\t\t\t\t\t.statementDate(TimeUtil.asLocalDate(importBankStatement.getEftStatementDate()))\n-\t\t\t\t\t\t.statementReference(importBankStatement.getEftStatementReference())\n-\t\t\t\t\t\t.build())\n-\t\t\t\t.build());\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.orgId(OrgId.ofRepoId(importBankStatement.getAD_Org_ID()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.orgBankAccountId(BankAccountId.ofRepoId(importBankStatement.getC_BP_BankAccount_ID()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// TODO add documentNo to import\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.statementDate(TimeUtil.asLocalDate(importBankStatement.getStatementDate()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.name(importBankStatement.getName())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(importBankStatement.getDescription())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.eft(BankStatementCreateRequest.ElectronicFundsTransfer.builder()\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .statementDate(TimeUtil.asLocalDate(importBankStatement.getEftStatementDate()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .statementReference(importBankStatement.getEftStatementReference())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .build())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.build());\n+\t}\n+\n+\t@VisibleForTesting\n+\tstatic void computeUpdateLineAmts(@NonNull final I_I_BankStatement importRecord)\n+\t{\n+\t\tfinal String amtFormat = getAmtFormat(importRecord);\n+\n+\t\tif (X_I_BankStatement.AMTFORMAT_AmountPlusIndicator.equals(amtFormat))\n+\t\t{\n+\t\t\tfinal BigDecimal trxAmt;\n+\t\t\tfinal boolean isDebit = \"S\".equals(importRecord.getDebitOrCreditIndicator());\n+\t\t\tif (isDebit)\n+\t\t\t{\n+\t\t\t\ttrxAmt = importRecord.getDebitOrCreditAmt().negate();\n+\t\t\t}\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\ttrxAmt = importRecord.getDebitOrCreditAmt();\n+\t\t\t}\n+\n+\t\t\timportRecord.setTrxAmt(trxAmt);\n+\t\t\tfinal BigDecimal stmtAmt = trxAmt.add(importRecord.getChargeAmt()).add(importRecord.getInterestAmt());\n+\t\t\timportRecord.setStmtAmt(stmtAmt);\n+\t\t}\n+\t\telse if (X_I_BankStatement.AMTFORMAT_DebitPlusCredit.equals(amtFormat))\n+\t\t{\n+\t\t\tfinal BigDecimal stmtAmt = importRecord.getCreditStmtAmt().subtract(importRecord.getDebitStmtAmt());\n+\t\t\timportRecord.setStmtAmt(stmtAmt);\n+\t\t\tfinal BigDecimal trxAmt = stmtAmt.subtract(importRecord.getInterestAmt()).subtract(importRecord.getChargeAmt());\n+\t\t\timportRecord.setTrxAmt(trxAmt);\n+\t\t}\n+\t\telse if (X_I_BankStatement.AMTFORMAT_Straight.equals(amtFormat))\n+\t\t{\n+\t\t\timportRecord.setStmtAmt(importRecord.getTrxAmt());\n+\t\t}\n+\n+\t\t{\n+\t\t\tfinal BigDecimal sum = importRecord.getTrxAmt().add(importRecord.getInterestAmt()).add(importRecord.getChargeAmt());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzczNTIwMA=="}, "originalCommit": {"oid": "050cf8d40137394763ae1258ef526025948a5d83"}, "originalPosition": 212}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODU0Mzk3Nw==", "bodyText": "ahh, got it. thx for explaining.\nit's fine!", "url": "https://github.com/metasfresh/metasfresh/pull/10272#discussion_r528543977", "createdAt": "2020-11-23T08:48:59Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/impexp/BankStatementImportProcess.java", "diffHunk": "@@ -175,62 +180,147 @@ private void createBankStatementLine(final I_I_BankStatement importRecord)\n \n \t\tfinal CurrencyId currencyId = CurrencyId.ofRepoId(importRecord.getC_Currency_ID());\n \n-\t\tfinal BankStatementLineId bankStatementLineId = bankStatementDAO.createBankStatementLine(BankStatementLineCreateRequest.builder()\n-\t\t\t\t.bankStatementId(BankStatementId.ofRepoId(importRecord.getC_BankStatement_ID()))\n-\t\t\t\t.orgId(OrgId.ofRepoId(importRecord.getAD_Org_ID()))\n-\t\t\t\t.lineNo(importRecord.getLine())\n-\t\t\t\t//\n-\t\t\t\t.bpartnerId(BPartnerId.ofRepoIdOrNull(importRecord.getC_BPartner_ID()))\n-\t\t\t\t.importedBillPartnerName(importRecord.getBill_BPartner_Name())\n-\t\t\t\t.importedBillPartnerIBAN(importRecord.getIBAN_To())\n-\t\t\t\t//\n-\t\t\t\t.referenceNo(importRecord.getReferenceNo())\n-\t\t\t\t.lineDescription(importRecord.getLineDescription())\n-\t\t\t\t.memo(importRecord.getMemo())\n-\t\t\t\t//\n-\t\t\t\t.statementLineDate(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getStatementLineDate(), importRecord.getStatementDate())))\n-\t\t\t\t.dateAcct(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getDateAcct(), importRecord.getStatementDate())))\n-\t\t\t\t.valutaDate(TimeUtil.asLocalDate(importRecord.getValutaDate()))\n-\t\t\t\t//\n-\t\t\t\t.statementAmt(Money.of(importRecord.getStmtAmt(), currencyId))\n-\t\t\t\t.trxAmt(Money.of(importRecord.getTrxAmt(), currencyId))\n-\t\t\t\t.chargeAmt(Money.of(importRecord.getChargeAmt(), currencyId))\n-\t\t\t\t.interestAmt(Money.of(importRecord.getInterestAmt(), currencyId))\n-\t\t\t\t.chargeId(ChargeId.ofRepoIdOrNull(importRecord.getC_Charge_ID()))\n-\t\t\t\t//\n-\t\t\t\t.eft(ElectronicFundsTransfer.builder()\n-\t\t\t\t\t\t.trxId(importRecord.getEftTrxID())\n-\t\t\t\t\t\t.trxType(importRecord.getEftTrxType())\n-\t\t\t\t\t\t.checkNo(importRecord.getEftCheckNo())\n-\t\t\t\t\t\t.reference(importRecord.getEftReference())\n-\t\t\t\t\t\t.memo(importRecord.getEftMemo())\n-\t\t\t\t\t\t.payee(importRecord.getEftPayee())\n-\t\t\t\t\t\t.payeeAccount(importRecord.getEftPayeeAccount())\n-\t\t\t\t\t\t.statementLineDate(TimeUtil.asLocalDate(importRecord.getEftStatementLineDate()))\n-\t\t\t\t\t\t.valutaDate(TimeUtil.asLocalDate(importRecord.getEftValutaDate()))\n-\t\t\t\t\t\t.currency(importRecord.getEftCurrency())\n-\t\t\t\t\t\t.amt(importRecord.getEftAmt())\n-\t\t\t\t\t\t.build())\n-\t\t\t\t//\n-\t\t\t\t.build());\n+\t\tfinal BankStatementLineId bankStatementLineId = bankStatementDAO.createBankStatementLine(\n+\t\t\t\tBankStatementLineCreateRequest.builder()\n+\t\t\t\t\t\t.bankStatementId(BankStatementId.ofRepoId(importRecord.getC_BankStatement_ID()))\n+\t\t\t\t\t\t.orgId(OrgId.ofRepoId(importRecord.getAD_Org_ID()))\n+\t\t\t\t\t\t.lineNo(importRecord.getLine())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.bpartnerId(BPartnerId.ofRepoIdOrNull(importRecord.getC_BPartner_ID()))\n+\t\t\t\t\t\t.importedBillPartnerName(importRecord.getBill_BPartner_Name())\n+\t\t\t\t\t\t.importedBillPartnerIBAN(importRecord.getIBAN_To())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.referenceNo(importRecord.getReferenceNo())\n+\t\t\t\t\t\t.lineDescription(importRecord.getLineDescription())\n+\t\t\t\t\t\t.memo(importRecord.getMemo())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.statementLineDate(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getStatementLineDate(), importRecord.getStatementDate())))\n+\t\t\t\t\t\t.dateAcct(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getDateAcct(), importRecord.getStatementDate())))\n+\t\t\t\t\t\t.valutaDate(TimeUtil.asLocalDate(importRecord.getValutaDate()))\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.statementAmt(Money.of(importRecord.getStmtAmt(), currencyId))\n+\t\t\t\t\t\t.trxAmt(Money.of(importRecord.getTrxAmt(), currencyId))\n+\t\t\t\t\t\t.chargeAmt(Money.of(importRecord.getChargeAmt(), currencyId))\n+\t\t\t\t\t\t.interestAmt(Money.of(importRecord.getInterestAmt(), currencyId))\n+\t\t\t\t\t\t.chargeId(ChargeId.ofRepoIdOrNull(importRecord.getC_Charge_ID()))\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.eft(ElectronicFundsTransfer.builder()\n+\t\t\t\t\t\t\t\t\t .trxId(importRecord.getEftTrxID())\n+\t\t\t\t\t\t\t\t\t .trxType(importRecord.getEftTrxType())\n+\t\t\t\t\t\t\t\t\t .checkNo(importRecord.getEftCheckNo())\n+\t\t\t\t\t\t\t\t\t .reference(importRecord.getEftReference())\n+\t\t\t\t\t\t\t\t\t .memo(importRecord.getEftMemo())\n+\t\t\t\t\t\t\t\t\t .payee(importRecord.getEftPayee())\n+\t\t\t\t\t\t\t\t\t .payeeAccount(importRecord.getEftPayeeAccount())\n+\t\t\t\t\t\t\t\t\t .statementLineDate(TimeUtil.asLocalDate(importRecord.getEftStatementLineDate()))\n+\t\t\t\t\t\t\t\t\t .valutaDate(TimeUtil.asLocalDate(importRecord.getEftValutaDate()))\n+\t\t\t\t\t\t\t\t\t .currency(importRecord.getEftCurrency())\n+\t\t\t\t\t\t\t\t\t .amt(importRecord.getEftAmt())\n+\t\t\t\t\t\t\t\t\t .build())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.build());\n \n \t\timportRecord.setC_BankStatementLine_ID(bankStatementLineId.getRepoId());\n \t}\n \n \tprivate BankStatementId createBankStatement(@NonNull final I_I_BankStatement importBankStatement)\n \t{\n \t\treturn bankStatementDAO.createBankStatement(BankStatementCreateRequest.builder()\n-\t\t\t\t.orgId(OrgId.ofRepoId(importBankStatement.getAD_Org_ID()))\n-\t\t\t\t.orgBankAccountId(BankAccountId.ofRepoId(importBankStatement.getC_BP_BankAccount_ID()))\n-\t\t\t\t// TODO add documentNo to import\n-\t\t\t\t.statementDate(TimeUtil.asLocalDate(importBankStatement.getStatementDate()))\n-\t\t\t\t.name(importBankStatement.getName())\n-\t\t\t\t.description(importBankStatement.getDescription())\n-\t\t\t\t.eft(BankStatementCreateRequest.ElectronicFundsTransfer.builder()\n-\t\t\t\t\t\t.statementDate(TimeUtil.asLocalDate(importBankStatement.getEftStatementDate()))\n-\t\t\t\t\t\t.statementReference(importBankStatement.getEftStatementReference())\n-\t\t\t\t\t\t.build())\n-\t\t\t\t.build());\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.orgId(OrgId.ofRepoId(importBankStatement.getAD_Org_ID()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.orgBankAccountId(BankAccountId.ofRepoId(importBankStatement.getC_BP_BankAccount_ID()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// TODO add documentNo to import\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.statementDate(TimeUtil.asLocalDate(importBankStatement.getStatementDate()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.name(importBankStatement.getName())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(importBankStatement.getDescription())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.eft(BankStatementCreateRequest.ElectronicFundsTransfer.builder()\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .statementDate(TimeUtil.asLocalDate(importBankStatement.getEftStatementDate()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .statementReference(importBankStatement.getEftStatementReference())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .build())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.build());\n+\t}\n+\n+\t@VisibleForTesting\n+\tstatic void computeUpdateLineAmts(@NonNull final I_I_BankStatement importRecord)\n+\t{\n+\t\tfinal String amtFormat = getAmtFormat(importRecord);\n+\n+\t\tif (X_I_BankStatement.AMTFORMAT_AmountPlusIndicator.equals(amtFormat))\n+\t\t{\n+\t\t\tfinal BigDecimal trxAmt;\n+\t\t\tfinal boolean isDebit = \"S\".equals(importRecord.getDebitOrCreditIndicator());\n+\t\t\tif (isDebit)\n+\t\t\t{\n+\t\t\t\ttrxAmt = importRecord.getDebitOrCreditAmt().negate();\n+\t\t\t}\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\ttrxAmt = importRecord.getDebitOrCreditAmt();\n+\t\t\t}\n+\n+\t\t\timportRecord.setTrxAmt(trxAmt);\n+\t\t\tfinal BigDecimal stmtAmt = trxAmt.add(importRecord.getChargeAmt()).add(importRecord.getInterestAmt());\n+\t\t\timportRecord.setStmtAmt(stmtAmt);\n+\t\t}\n+\t\telse if (X_I_BankStatement.AMTFORMAT_DebitPlusCredit.equals(amtFormat))\n+\t\t{\n+\t\t\tfinal BigDecimal stmtAmt = importRecord.getCreditStmtAmt().subtract(importRecord.getDebitStmtAmt());\n+\t\t\timportRecord.setStmtAmt(stmtAmt);\n+\t\t\tfinal BigDecimal trxAmt = stmtAmt.subtract(importRecord.getInterestAmt()).subtract(importRecord.getChargeAmt());\n+\t\t\timportRecord.setTrxAmt(trxAmt);\n+\t\t}\n+\t\telse if (X_I_BankStatement.AMTFORMAT_Straight.equals(amtFormat))\n+\t\t{\n+\t\t\timportRecord.setStmtAmt(importRecord.getTrxAmt());\n+\t\t}\n+\n+\t\t{\n+\t\t\tfinal BigDecimal sum = importRecord.getTrxAmt().add(importRecord.getInterestAmt()).add(importRecord.getChargeAmt());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzczNTIwMA=="}, "originalCommit": {"oid": "050cf8d40137394763ae1258ef526025948a5d83"}, "originalPosition": 212}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzMwODk4ODkwOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/impexp/BankStatementImportProcess.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yMFQxNDo0MTo0MFrOH3SgxQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMS0yM1QwNjoxMjoyN1rOH4ASeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzczNzAyOQ==", "bodyText": "use de.metas.util.StringUtils#trimBlankToNull on of of the list descriptions parts.\ni.e.\n.join(\nStringUtils.trimBlankToNull(importRecord.getLineDescription()),\nStringUtils.trimBlankToNull(importRecord.getLineDescriptionExtra_1()),\n....\n);", "url": "https://github.com/metasfresh/metasfresh/pull/10272#discussion_r527737029", "createdAt": "2020-11-20T14:41:40Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/impexp/BankStatementImportProcess.java", "diffHunk": "@@ -175,62 +180,147 @@ private void createBankStatementLine(final I_I_BankStatement importRecord)\n \n \t\tfinal CurrencyId currencyId = CurrencyId.ofRepoId(importRecord.getC_Currency_ID());\n \n-\t\tfinal BankStatementLineId bankStatementLineId = bankStatementDAO.createBankStatementLine(BankStatementLineCreateRequest.builder()\n-\t\t\t\t.bankStatementId(BankStatementId.ofRepoId(importRecord.getC_BankStatement_ID()))\n-\t\t\t\t.orgId(OrgId.ofRepoId(importRecord.getAD_Org_ID()))\n-\t\t\t\t.lineNo(importRecord.getLine())\n-\t\t\t\t//\n-\t\t\t\t.bpartnerId(BPartnerId.ofRepoIdOrNull(importRecord.getC_BPartner_ID()))\n-\t\t\t\t.importedBillPartnerName(importRecord.getBill_BPartner_Name())\n-\t\t\t\t.importedBillPartnerIBAN(importRecord.getIBAN_To())\n-\t\t\t\t//\n-\t\t\t\t.referenceNo(importRecord.getReferenceNo())\n-\t\t\t\t.lineDescription(importRecord.getLineDescription())\n-\t\t\t\t.memo(importRecord.getMemo())\n-\t\t\t\t//\n-\t\t\t\t.statementLineDate(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getStatementLineDate(), importRecord.getStatementDate())))\n-\t\t\t\t.dateAcct(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getDateAcct(), importRecord.getStatementDate())))\n-\t\t\t\t.valutaDate(TimeUtil.asLocalDate(importRecord.getValutaDate()))\n-\t\t\t\t//\n-\t\t\t\t.statementAmt(Money.of(importRecord.getStmtAmt(), currencyId))\n-\t\t\t\t.trxAmt(Money.of(importRecord.getTrxAmt(), currencyId))\n-\t\t\t\t.chargeAmt(Money.of(importRecord.getChargeAmt(), currencyId))\n-\t\t\t\t.interestAmt(Money.of(importRecord.getInterestAmt(), currencyId))\n-\t\t\t\t.chargeId(ChargeId.ofRepoIdOrNull(importRecord.getC_Charge_ID()))\n-\t\t\t\t//\n-\t\t\t\t.eft(ElectronicFundsTransfer.builder()\n-\t\t\t\t\t\t.trxId(importRecord.getEftTrxID())\n-\t\t\t\t\t\t.trxType(importRecord.getEftTrxType())\n-\t\t\t\t\t\t.checkNo(importRecord.getEftCheckNo())\n-\t\t\t\t\t\t.reference(importRecord.getEftReference())\n-\t\t\t\t\t\t.memo(importRecord.getEftMemo())\n-\t\t\t\t\t\t.payee(importRecord.getEftPayee())\n-\t\t\t\t\t\t.payeeAccount(importRecord.getEftPayeeAccount())\n-\t\t\t\t\t\t.statementLineDate(TimeUtil.asLocalDate(importRecord.getEftStatementLineDate()))\n-\t\t\t\t\t\t.valutaDate(TimeUtil.asLocalDate(importRecord.getEftValutaDate()))\n-\t\t\t\t\t\t.currency(importRecord.getEftCurrency())\n-\t\t\t\t\t\t.amt(importRecord.getEftAmt())\n-\t\t\t\t\t\t.build())\n-\t\t\t\t//\n-\t\t\t\t.build());\n+\t\tfinal BankStatementLineId bankStatementLineId = bankStatementDAO.createBankStatementLine(\n+\t\t\t\tBankStatementLineCreateRequest.builder()\n+\t\t\t\t\t\t.bankStatementId(BankStatementId.ofRepoId(importRecord.getC_BankStatement_ID()))\n+\t\t\t\t\t\t.orgId(OrgId.ofRepoId(importRecord.getAD_Org_ID()))\n+\t\t\t\t\t\t.lineNo(importRecord.getLine())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.bpartnerId(BPartnerId.ofRepoIdOrNull(importRecord.getC_BPartner_ID()))\n+\t\t\t\t\t\t.importedBillPartnerName(importRecord.getBill_BPartner_Name())\n+\t\t\t\t\t\t.importedBillPartnerIBAN(importRecord.getIBAN_To())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.referenceNo(importRecord.getReferenceNo())\n+\t\t\t\t\t\t.lineDescription(importRecord.getLineDescription())\n+\t\t\t\t\t\t.memo(importRecord.getMemo())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.statementLineDate(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getStatementLineDate(), importRecord.getStatementDate())))\n+\t\t\t\t\t\t.dateAcct(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getDateAcct(), importRecord.getStatementDate())))\n+\t\t\t\t\t\t.valutaDate(TimeUtil.asLocalDate(importRecord.getValutaDate()))\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.statementAmt(Money.of(importRecord.getStmtAmt(), currencyId))\n+\t\t\t\t\t\t.trxAmt(Money.of(importRecord.getTrxAmt(), currencyId))\n+\t\t\t\t\t\t.chargeAmt(Money.of(importRecord.getChargeAmt(), currencyId))\n+\t\t\t\t\t\t.interestAmt(Money.of(importRecord.getInterestAmt(), currencyId))\n+\t\t\t\t\t\t.chargeId(ChargeId.ofRepoIdOrNull(importRecord.getC_Charge_ID()))\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.eft(ElectronicFundsTransfer.builder()\n+\t\t\t\t\t\t\t\t\t .trxId(importRecord.getEftTrxID())\n+\t\t\t\t\t\t\t\t\t .trxType(importRecord.getEftTrxType())\n+\t\t\t\t\t\t\t\t\t .checkNo(importRecord.getEftCheckNo())\n+\t\t\t\t\t\t\t\t\t .reference(importRecord.getEftReference())\n+\t\t\t\t\t\t\t\t\t .memo(importRecord.getEftMemo())\n+\t\t\t\t\t\t\t\t\t .payee(importRecord.getEftPayee())\n+\t\t\t\t\t\t\t\t\t .payeeAccount(importRecord.getEftPayeeAccount())\n+\t\t\t\t\t\t\t\t\t .statementLineDate(TimeUtil.asLocalDate(importRecord.getEftStatementLineDate()))\n+\t\t\t\t\t\t\t\t\t .valutaDate(TimeUtil.asLocalDate(importRecord.getEftValutaDate()))\n+\t\t\t\t\t\t\t\t\t .currency(importRecord.getEftCurrency())\n+\t\t\t\t\t\t\t\t\t .amt(importRecord.getEftAmt())\n+\t\t\t\t\t\t\t\t\t .build())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.build());\n \n \t\timportRecord.setC_BankStatementLine_ID(bankStatementLineId.getRepoId());\n \t}\n \n \tprivate BankStatementId createBankStatement(@NonNull final I_I_BankStatement importBankStatement)\n \t{\n \t\treturn bankStatementDAO.createBankStatement(BankStatementCreateRequest.builder()\n-\t\t\t\t.orgId(OrgId.ofRepoId(importBankStatement.getAD_Org_ID()))\n-\t\t\t\t.orgBankAccountId(BankAccountId.ofRepoId(importBankStatement.getC_BP_BankAccount_ID()))\n-\t\t\t\t// TODO add documentNo to import\n-\t\t\t\t.statementDate(TimeUtil.asLocalDate(importBankStatement.getStatementDate()))\n-\t\t\t\t.name(importBankStatement.getName())\n-\t\t\t\t.description(importBankStatement.getDescription())\n-\t\t\t\t.eft(BankStatementCreateRequest.ElectronicFundsTransfer.builder()\n-\t\t\t\t\t\t.statementDate(TimeUtil.asLocalDate(importBankStatement.getEftStatementDate()))\n-\t\t\t\t\t\t.statementReference(importBankStatement.getEftStatementReference())\n-\t\t\t\t\t\t.build())\n-\t\t\t\t.build());\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.orgId(OrgId.ofRepoId(importBankStatement.getAD_Org_ID()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.orgBankAccountId(BankAccountId.ofRepoId(importBankStatement.getC_BP_BankAccount_ID()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// TODO add documentNo to import\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.statementDate(TimeUtil.asLocalDate(importBankStatement.getStatementDate()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.name(importBankStatement.getName())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(importBankStatement.getDescription())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.eft(BankStatementCreateRequest.ElectronicFundsTransfer.builder()\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .statementDate(TimeUtil.asLocalDate(importBankStatement.getEftStatementDate()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .statementReference(importBankStatement.getEftStatementReference())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .build())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.build());\n+\t}\n+\n+\t@VisibleForTesting\n+\tstatic void computeUpdateLineAmts(@NonNull final I_I_BankStatement importRecord)\n+\t{\n+\t\tfinal String amtFormat = getAmtFormat(importRecord);\n+\n+\t\tif (X_I_BankStatement.AMTFORMAT_AmountPlusIndicator.equals(amtFormat))\n+\t\t{\n+\t\t\tfinal BigDecimal trxAmt;\n+\t\t\tfinal boolean isDebit = \"S\".equals(importRecord.getDebitOrCreditIndicator());\n+\t\t\tif (isDebit)\n+\t\t\t{\n+\t\t\t\ttrxAmt = importRecord.getDebitOrCreditAmt().negate();\n+\t\t\t}\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\ttrxAmt = importRecord.getDebitOrCreditAmt();\n+\t\t\t}\n+\n+\t\t\timportRecord.setTrxAmt(trxAmt);\n+\t\t\tfinal BigDecimal stmtAmt = trxAmt.add(importRecord.getChargeAmt()).add(importRecord.getInterestAmt());\n+\t\t\timportRecord.setStmtAmt(stmtAmt);\n+\t\t}\n+\t\telse if (X_I_BankStatement.AMTFORMAT_DebitPlusCredit.equals(amtFormat))\n+\t\t{\n+\t\t\tfinal BigDecimal stmtAmt = importRecord.getCreditStmtAmt().subtract(importRecord.getDebitStmtAmt());\n+\t\t\timportRecord.setStmtAmt(stmtAmt);\n+\t\t\tfinal BigDecimal trxAmt = stmtAmt.subtract(importRecord.getInterestAmt()).subtract(importRecord.getChargeAmt());\n+\t\t\timportRecord.setTrxAmt(trxAmt);\n+\t\t}\n+\t\telse if (X_I_BankStatement.AMTFORMAT_Straight.equals(amtFormat))\n+\t\t{\n+\t\t\timportRecord.setStmtAmt(importRecord.getTrxAmt());\n+\t\t}\n+\n+\t\t{\n+\t\t\tfinal BigDecimal sum = importRecord.getTrxAmt().add(importRecord.getInterestAmt()).add(importRecord.getChargeAmt());\n+\t\t\tif (importRecord.getStmtAmt().compareTo(sum) != 0)\n+\t\t\t{\n+\t\t\t\tthrow new AdempiereException(\"Invalid amount\");\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate static void updateDescription(@NonNull final I_I_BankStatement importRecord)\n+\t{\n+\t\tfinal String lineDescription = Joiner.on(\" / \")\n+\t\t\t\t.skipNulls()\n+\t\t\t\t.join(importRecord.getLineDescription(),", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "050cf8d40137394763ae1258ef526025948a5d83"}, "originalPosition": 224}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyODQ4NzAzMg==", "bodyText": "done", "url": "https://github.com/metasfresh/metasfresh/pull/10272#discussion_r528487032", "createdAt": "2020-11-23T06:12:27Z", "author": {"login": "TheBestPessimist"}, "path": "backend/de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/impexp/BankStatementImportProcess.java", "diffHunk": "@@ -175,62 +180,147 @@ private void createBankStatementLine(final I_I_BankStatement importRecord)\n \n \t\tfinal CurrencyId currencyId = CurrencyId.ofRepoId(importRecord.getC_Currency_ID());\n \n-\t\tfinal BankStatementLineId bankStatementLineId = bankStatementDAO.createBankStatementLine(BankStatementLineCreateRequest.builder()\n-\t\t\t\t.bankStatementId(BankStatementId.ofRepoId(importRecord.getC_BankStatement_ID()))\n-\t\t\t\t.orgId(OrgId.ofRepoId(importRecord.getAD_Org_ID()))\n-\t\t\t\t.lineNo(importRecord.getLine())\n-\t\t\t\t//\n-\t\t\t\t.bpartnerId(BPartnerId.ofRepoIdOrNull(importRecord.getC_BPartner_ID()))\n-\t\t\t\t.importedBillPartnerName(importRecord.getBill_BPartner_Name())\n-\t\t\t\t.importedBillPartnerIBAN(importRecord.getIBAN_To())\n-\t\t\t\t//\n-\t\t\t\t.referenceNo(importRecord.getReferenceNo())\n-\t\t\t\t.lineDescription(importRecord.getLineDescription())\n-\t\t\t\t.memo(importRecord.getMemo())\n-\t\t\t\t//\n-\t\t\t\t.statementLineDate(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getStatementLineDate(), importRecord.getStatementDate())))\n-\t\t\t\t.dateAcct(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getDateAcct(), importRecord.getStatementDate())))\n-\t\t\t\t.valutaDate(TimeUtil.asLocalDate(importRecord.getValutaDate()))\n-\t\t\t\t//\n-\t\t\t\t.statementAmt(Money.of(importRecord.getStmtAmt(), currencyId))\n-\t\t\t\t.trxAmt(Money.of(importRecord.getTrxAmt(), currencyId))\n-\t\t\t\t.chargeAmt(Money.of(importRecord.getChargeAmt(), currencyId))\n-\t\t\t\t.interestAmt(Money.of(importRecord.getInterestAmt(), currencyId))\n-\t\t\t\t.chargeId(ChargeId.ofRepoIdOrNull(importRecord.getC_Charge_ID()))\n-\t\t\t\t//\n-\t\t\t\t.eft(ElectronicFundsTransfer.builder()\n-\t\t\t\t\t\t.trxId(importRecord.getEftTrxID())\n-\t\t\t\t\t\t.trxType(importRecord.getEftTrxType())\n-\t\t\t\t\t\t.checkNo(importRecord.getEftCheckNo())\n-\t\t\t\t\t\t.reference(importRecord.getEftReference())\n-\t\t\t\t\t\t.memo(importRecord.getEftMemo())\n-\t\t\t\t\t\t.payee(importRecord.getEftPayee())\n-\t\t\t\t\t\t.payeeAccount(importRecord.getEftPayeeAccount())\n-\t\t\t\t\t\t.statementLineDate(TimeUtil.asLocalDate(importRecord.getEftStatementLineDate()))\n-\t\t\t\t\t\t.valutaDate(TimeUtil.asLocalDate(importRecord.getEftValutaDate()))\n-\t\t\t\t\t\t.currency(importRecord.getEftCurrency())\n-\t\t\t\t\t\t.amt(importRecord.getEftAmt())\n-\t\t\t\t\t\t.build())\n-\t\t\t\t//\n-\t\t\t\t.build());\n+\t\tfinal BankStatementLineId bankStatementLineId = bankStatementDAO.createBankStatementLine(\n+\t\t\t\tBankStatementLineCreateRequest.builder()\n+\t\t\t\t\t\t.bankStatementId(BankStatementId.ofRepoId(importRecord.getC_BankStatement_ID()))\n+\t\t\t\t\t\t.orgId(OrgId.ofRepoId(importRecord.getAD_Org_ID()))\n+\t\t\t\t\t\t.lineNo(importRecord.getLine())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.bpartnerId(BPartnerId.ofRepoIdOrNull(importRecord.getC_BPartner_ID()))\n+\t\t\t\t\t\t.importedBillPartnerName(importRecord.getBill_BPartner_Name())\n+\t\t\t\t\t\t.importedBillPartnerIBAN(importRecord.getIBAN_To())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.referenceNo(importRecord.getReferenceNo())\n+\t\t\t\t\t\t.lineDescription(importRecord.getLineDescription())\n+\t\t\t\t\t\t.memo(importRecord.getMemo())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.statementLineDate(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getStatementLineDate(), importRecord.getStatementDate())))\n+\t\t\t\t\t\t.dateAcct(TimeUtil.asLocalDate(CoalesceUtil.coalesce(importRecord.getDateAcct(), importRecord.getStatementDate())))\n+\t\t\t\t\t\t.valutaDate(TimeUtil.asLocalDate(importRecord.getValutaDate()))\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.statementAmt(Money.of(importRecord.getStmtAmt(), currencyId))\n+\t\t\t\t\t\t.trxAmt(Money.of(importRecord.getTrxAmt(), currencyId))\n+\t\t\t\t\t\t.chargeAmt(Money.of(importRecord.getChargeAmt(), currencyId))\n+\t\t\t\t\t\t.interestAmt(Money.of(importRecord.getInterestAmt(), currencyId))\n+\t\t\t\t\t\t.chargeId(ChargeId.ofRepoIdOrNull(importRecord.getC_Charge_ID()))\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.eft(ElectronicFundsTransfer.builder()\n+\t\t\t\t\t\t\t\t\t .trxId(importRecord.getEftTrxID())\n+\t\t\t\t\t\t\t\t\t .trxType(importRecord.getEftTrxType())\n+\t\t\t\t\t\t\t\t\t .checkNo(importRecord.getEftCheckNo())\n+\t\t\t\t\t\t\t\t\t .reference(importRecord.getEftReference())\n+\t\t\t\t\t\t\t\t\t .memo(importRecord.getEftMemo())\n+\t\t\t\t\t\t\t\t\t .payee(importRecord.getEftPayee())\n+\t\t\t\t\t\t\t\t\t .payeeAccount(importRecord.getEftPayeeAccount())\n+\t\t\t\t\t\t\t\t\t .statementLineDate(TimeUtil.asLocalDate(importRecord.getEftStatementLineDate()))\n+\t\t\t\t\t\t\t\t\t .valutaDate(TimeUtil.asLocalDate(importRecord.getEftValutaDate()))\n+\t\t\t\t\t\t\t\t\t .currency(importRecord.getEftCurrency())\n+\t\t\t\t\t\t\t\t\t .amt(importRecord.getEftAmt())\n+\t\t\t\t\t\t\t\t\t .build())\n+\t\t\t\t\t\t//\n+\t\t\t\t\t\t.build());\n \n \t\timportRecord.setC_BankStatementLine_ID(bankStatementLineId.getRepoId());\n \t}\n \n \tprivate BankStatementId createBankStatement(@NonNull final I_I_BankStatement importBankStatement)\n \t{\n \t\treturn bankStatementDAO.createBankStatement(BankStatementCreateRequest.builder()\n-\t\t\t\t.orgId(OrgId.ofRepoId(importBankStatement.getAD_Org_ID()))\n-\t\t\t\t.orgBankAccountId(BankAccountId.ofRepoId(importBankStatement.getC_BP_BankAccount_ID()))\n-\t\t\t\t// TODO add documentNo to import\n-\t\t\t\t.statementDate(TimeUtil.asLocalDate(importBankStatement.getStatementDate()))\n-\t\t\t\t.name(importBankStatement.getName())\n-\t\t\t\t.description(importBankStatement.getDescription())\n-\t\t\t\t.eft(BankStatementCreateRequest.ElectronicFundsTransfer.builder()\n-\t\t\t\t\t\t.statementDate(TimeUtil.asLocalDate(importBankStatement.getEftStatementDate()))\n-\t\t\t\t\t\t.statementReference(importBankStatement.getEftStatementReference())\n-\t\t\t\t\t\t.build())\n-\t\t\t\t.build());\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.orgId(OrgId.ofRepoId(importBankStatement.getAD_Org_ID()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.orgBankAccountId(BankAccountId.ofRepoId(importBankStatement.getC_BP_BankAccount_ID()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t// TODO add documentNo to import\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.statementDate(TimeUtil.asLocalDate(importBankStatement.getStatementDate()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.name(importBankStatement.getName())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.description(importBankStatement.getDescription())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.eft(BankStatementCreateRequest.ElectronicFundsTransfer.builder()\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .statementDate(TimeUtil.asLocalDate(importBankStatement.getEftStatementDate()))\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .statementReference(importBankStatement.getEftStatementReference())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t .build())\n+\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t.build());\n+\t}\n+\n+\t@VisibleForTesting\n+\tstatic void computeUpdateLineAmts(@NonNull final I_I_BankStatement importRecord)\n+\t{\n+\t\tfinal String amtFormat = getAmtFormat(importRecord);\n+\n+\t\tif (X_I_BankStatement.AMTFORMAT_AmountPlusIndicator.equals(amtFormat))\n+\t\t{\n+\t\t\tfinal BigDecimal trxAmt;\n+\t\t\tfinal boolean isDebit = \"S\".equals(importRecord.getDebitOrCreditIndicator());\n+\t\t\tif (isDebit)\n+\t\t\t{\n+\t\t\t\ttrxAmt = importRecord.getDebitOrCreditAmt().negate();\n+\t\t\t}\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\ttrxAmt = importRecord.getDebitOrCreditAmt();\n+\t\t\t}\n+\n+\t\t\timportRecord.setTrxAmt(trxAmt);\n+\t\t\tfinal BigDecimal stmtAmt = trxAmt.add(importRecord.getChargeAmt()).add(importRecord.getInterestAmt());\n+\t\t\timportRecord.setStmtAmt(stmtAmt);\n+\t\t}\n+\t\telse if (X_I_BankStatement.AMTFORMAT_DebitPlusCredit.equals(amtFormat))\n+\t\t{\n+\t\t\tfinal BigDecimal stmtAmt = importRecord.getCreditStmtAmt().subtract(importRecord.getDebitStmtAmt());\n+\t\t\timportRecord.setStmtAmt(stmtAmt);\n+\t\t\tfinal BigDecimal trxAmt = stmtAmt.subtract(importRecord.getInterestAmt()).subtract(importRecord.getChargeAmt());\n+\t\t\timportRecord.setTrxAmt(trxAmt);\n+\t\t}\n+\t\telse if (X_I_BankStatement.AMTFORMAT_Straight.equals(amtFormat))\n+\t\t{\n+\t\t\timportRecord.setStmtAmt(importRecord.getTrxAmt());\n+\t\t}\n+\n+\t\t{\n+\t\t\tfinal BigDecimal sum = importRecord.getTrxAmt().add(importRecord.getInterestAmt()).add(importRecord.getChargeAmt());\n+\t\t\tif (importRecord.getStmtAmt().compareTo(sum) != 0)\n+\t\t\t{\n+\t\t\t\tthrow new AdempiereException(\"Invalid amount\");\n+\t\t\t}\n+\t\t}\n+\t}\n+\n+\tprivate static void updateDescription(@NonNull final I_I_BankStatement importRecord)\n+\t{\n+\t\tfinal String lineDescription = Joiner.on(\" / \")\n+\t\t\t\t.skipNulls()\n+\t\t\t\t.join(importRecord.getLineDescription(),", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUyNzczNzAyOQ=="}, "originalCommit": {"oid": "050cf8d40137394763ae1258ef526025948a5d83"}, "originalPosition": 224}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1155, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}