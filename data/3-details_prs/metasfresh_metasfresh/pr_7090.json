{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNTU2MDM4", "number": 7090, "title": "Show in Main and Grid view that a Notice/Comment is available #7089", "bodyText": "#7089", "createdAt": "2020-08-04T06:26:12Z", "url": "https://github.com/metasfresh/metasfresh/pull/7090", "merged": true, "mergeCommit": {"oid": "21d415882d18def735488fb6b9cdde140dd6c3ec"}, "closed": true, "closedAt": "2020-08-10T05:56:50Z", "author": {"login": "TheBestPessimist"}, "timelineItems": {"totalCount": 29, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABc7mQeUAH2gAyNDYyNTU2MDM4OjU1NTc3MmY0M2Y3M2NlMjVhZGU5ZWNhYzY2N2VlYWUxYjMzNWQ0Mzc=", "endCursor": "Y3Vyc29yOnYyOpPPAAABc92Yv1AFqTQ2NTAzNzI0OQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "555772f43f73ce25ade9ecac667eeae1b335d437", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/555772f43f73ce25ade9ecac667eeae1b335d437", "committedDate": "2020-08-04T13:02:00Z", "message": "Add field `JSONViewRow.HasComments`\n\nIf true this record has at least a comment\nIf false or missing this row does not have any comments\n\nhttps://github.com/metasfresh/metasfresh/issues/7089"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5a3213856cdec8dd597f21ad8739631a835f3167", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/5a3213856cdec8dd597f21ad8739631a835f3167", "committedDate": "2020-08-04T13:02:00Z", "message": "Add `CommentEntryRepository.hasComments`\n\nhttps://github.com/metasfresh/metasfresh/issues/7089"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "841965da61beb53237f036826400ab61297bbf78", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/841965da61beb53237f036826400ab61297bbf78", "committedDate": "2020-08-04T13:02:00Z", "message": "Fix sql query for `CommentEntryRepository.hasComments`\n\nhttps://github.com/metasfresh/metasfresh/issues/7089"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9ff7d8ad392f099ce87e019491767bb3ab9212e9", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/9ff7d8ad392f099ce87e019491767bb3ab9212e9", "committedDate": "2020-08-04T13:03:14Z", "message": "Grid view: Add `JSONViewRow.hasComments` and set it using data from CommentsService\n\nhttps://github.com/metasfresh/metasfresh/issues/7089"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b74e66de0cf38cf0347b0c9c3ff3e4d16990be47", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/b74e66de0cf38cf0347b0c9c3ff3e4d16990be47", "committedDate": "2020-08-04T13:03:23Z", "message": "Single view: Add `JSONDocument.hasComments` and set it using data from CommentsService\n\nFor single view we are interested in RootDocuments only.\n\nhttps://github.com/metasfresh/metasfresh/issues/7089"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6f92c0db3309c2c1a41d6fb507ba4d622296dd77", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/6f92c0db3309c2c1a41d6fb507ba4d622296dd77", "committedDate": "2020-08-04T13:03:23Z", "message": "Fix warnings\n\nhttps://github.com/metasfresh/metasfresh/issues/7089"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4e30b0b9305c8324ec19856d6878e1ac455baca3", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/4e30b0b9305c8324ec19856d6878e1ac455baca3", "committedDate": "2020-08-04T13:03:23Z", "message": "Add unit test\n\nhttps://github.com/metasfresh/metasfresh/issues/7089"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f9667c66883a69fb1ea27925beca4efd73651a81", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/f9667c66883a69fb1ea27925beca4efd73651a81", "committedDate": "2020-08-04T12:57:18Z", "message": "Add unit test\n\nhttps://github.com/metasfresh/metasfresh/issues/7089"}, "afterCommit": {"oid": "4e30b0b9305c8324ec19856d6878e1ac455baca3", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/4e30b0b9305c8324ec19856d6878e1ac455baca3", "committedDate": "2020-08-04T13:03:23Z", "message": "Add unit test\n\nhttps://github.com/metasfresh/metasfresh/issues/7089"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "421afa6b5f4aa8ec54e18c5a268007b36af11ef4", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/421afa6b5f4aa8ec54e18c5a268007b36af11ef4", "committedDate": "2020-08-04T14:20:19Z", "message": "#7089 styling for the notification dot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "92a77b51f6dbedf0b99220cdfb1062903b2e6b61", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/92a77b51f6dbedf0b99220cdfb1062903b2e6b61", "committedDate": "2020-08-04T14:20:19Z", "message": "#7089 show notifications dot"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3befd20da835ca8d0daf657e9f6f23e3158d7b7d", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/3befd20da835ca8d0daf657e9f6f23e3158d7b7d", "committedDate": "2020-08-04T14:20:19Z", "message": "#7089 update unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2de7585badf3459fdc3418d4118e20ca562afe71", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/2de7585badf3459fdc3418d4118e20ca562afe71", "committedDate": "2020-08-05T09:13:18Z", "message": "#7089 remove the notification dot from the header dropdown"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a69e918e9a0601e0777753fe9486af3f60fe40a2", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/a69e918e9a0601e0777753fe9486af3f60fe40a2", "committedDate": "2020-08-05T09:13:36Z", "message": "#7089 fix setting `hasComments` value in the store on saving"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a63886754dc5995b07c77e8b70a50c9b5afb9048", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/a63886754dc5995b07c77e8b70a50c9b5afb9048", "committedDate": "2020-08-06T08:57:11Z", "message": "`DocumentDescriptorFactory` throws error when creating TableRecordReference from String\n\nhttps://github.com/metasfresh/metasfresh/issues/7089"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3fabe15a9bb0eba373523fd4022264171784767d", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/3fabe15a9bb0eba373523fd4022264171784767d", "committedDate": "2020-08-06T08:57:38Z", "message": "`CommentsService` handle nulls and empty values\n\nhttps://github.com/metasfresh/metasfresh/issues/7089"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5d4800cb54cf788e2c0ca09b04a937ad09acec2c", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/5d4800cb54cf788e2c0ca09b04a937ad09acec2c", "committedDate": "2020-08-06T09:11:28Z", "message": "`CommentsService`: receive DocumentPath when creating or listing the Comments\n\nhttps://github.com/metasfresh/metasfresh/issues/7089"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYyMzk5Mjg5", "url": "https://github.com/metasfresh/metasfresh/pull/7090#pullrequestreview-462399289", "createdAt": "2020-08-06T10:32:39Z", "commit": {"oid": "5d4800cb54cf788e2c0ca09b04a937ad09acec2c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMDozMjozOVrOG8t6Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMDo0OToxOFrOG8uaOw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMxOTg5MA==", "bodyText": "pls use the return value of this function instead of stressing the cache for each value...", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466319890", "createdAt": "2020-08-06T10:32:39Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/comments/CommentEntryRepository.java", "diffHunk": "@@ -89,6 +108,17 @@ public void createCommentEntry(final @NonNull String characterData, @NonNull fin\n \t\t\t\t.collect(GuavaCollectors.toImmutableList());\n \t}\n \n+\t@NonNull\n+\tpublic Map<TableRecordReference, Boolean> hasComments(@NonNull final Collection<TableRecordReference> references)\n+\t{\n+\t\tfinal ImmutableMap.Builder<TableRecordReference, Boolean> result = ImmutableMap.builder();\n+\n+\t\treferenceHasCommentsCache.getAllOrLoad(references, this::checkReferenceHasComments);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d4800cb54cf788e2c0ca09b04a937ad09acec2c"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyMDIyMg==", "bodyText": "better just invalidate the cache for that tableRecordReference.\nkeep in mind that ur method is executed in trx...", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466320222", "createdAt": "2020-08-06T10:33:17Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/comments/CommentEntryRepository.java", "diffHunk": "@@ -67,6 +84,8 @@ public void createCommentEntry(final @NonNull String characterData, @NonNull fin\n \t\tchatEntry.setCharacterData(characterData);\n \t\tchatEntry.setChatEntryType(X_CM_ChatEntry.CHATENTRYTYPE_NoteFlat);\n \t\tInterfaceWrapperHelper.save(chatEntry);\n+\n+\t\treferenceHasCommentsCache.put(tableRecordReference, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d4800cb54cf788e2c0ca09b04a937ad09acec2c"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyMDM3NA==", "bodyText": "that's a bit too much. IMHO 1000 would be sufficient.", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466320374", "createdAt": "2020-08-06T10:33:38Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/comments/CommentEntryRepository.java", "diffHunk": "@@ -57,6 +67,13 @@\n \tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n \tprivate final IADTableDAO tableDAO = Services.get(IADTableDAO.class);\n \n+\tprivate final CCache<TableRecordReference, Boolean> referenceHasCommentsCache = CCache.<TableRecordReference, Boolean>builder()\n+\t\t\t.cacheName(\"referenceHasCommentsCache\")\n+\t\t\t.cacheMapType(CCache.CacheMapType.LRU)\n+\t\t\t.initialCapacity(10_000)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d4800cb54cf788e2c0ca09b04a937ad09acec2c"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyMTEyMw==", "bodyText": "instead of tablesForRecords i would call it recordIdsByTableId", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466321123", "createdAt": "2020-08-06T10:35:05Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/comments/CommentEntryRepository.java", "diffHunk": "@@ -131,10 +161,45 @@ private CommentEntryParentId getOrCreateParent(final @NonNull TableRecordReferen\n \tprivate CommentEntryParentId getParentIdOrNull(final @NonNull TableRecordReference tableRecordReference)\n \t{\n \t\treturn queryBL.createQueryBuilder(I_CM_Chat.class)\n+\t\t\t\t.addOnlyActiveRecordsFilter()\n \t\t\t\t.addEqualsFilter(I_CM_Chat.COLUMNNAME_AD_Table_ID, tableRecordReference.getAD_Table_ID())\n \t\t\t\t.addEqualsFilter(I_CM_Chat.COLUMNNAME_Record_ID, tableRecordReference.getRecord_ID())\n \t\t\t\t.orderBy(I_CM_Chat.COLUMNNAME_CM_Chat_ID)\n \t\t\t\t.create()\n \t\t\t\t.firstId(CommentEntryParentId::ofRepoIdOrNull);\n \t}\n+\n+\t@NonNull\n+\tprivate Map<TableRecordReference, Boolean> checkReferenceHasComments(@NonNull final Collection<TableRecordReference> referencesUnknownStatus)\n+\t{\n+\t\tfinal ImmutableListMultimap<Integer, Integer> tablesForRecords = referencesUnknownStatus.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d4800cb54cf788e2c0ca09b04a937ad09acec2c"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyMTQ5MQ==", "bodyText": "but why?", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466321491", "createdAt": "2020-08-06T10:35:53Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/comments/CommentEntryRepository.java", "diffHunk": "@@ -131,10 +161,45 @@ private CommentEntryParentId getOrCreateParent(final @NonNull TableRecordReferen\n \tprivate CommentEntryParentId getParentIdOrNull(final @NonNull TableRecordReference tableRecordReference)\n \t{\n \t\treturn queryBL.createQueryBuilder(I_CM_Chat.class)\n+\t\t\t\t.addOnlyActiveRecordsFilter()\n \t\t\t\t.addEqualsFilter(I_CM_Chat.COLUMNNAME_AD_Table_ID, tableRecordReference.getAD_Table_ID())\n \t\t\t\t.addEqualsFilter(I_CM_Chat.COLUMNNAME_Record_ID, tableRecordReference.getRecord_ID())\n \t\t\t\t.orderBy(I_CM_Chat.COLUMNNAME_CM_Chat_ID)\n \t\t\t\t.create()\n \t\t\t\t.firstId(CommentEntryParentId::ofRepoIdOrNull);\n \t}\n+\n+\t@NonNull\n+\tprivate Map<TableRecordReference, Boolean> checkReferenceHasComments(@NonNull final Collection<TableRecordReference> referencesUnknownStatus)\n+\t{\n+\t\tfinal ImmutableListMultimap<Integer, Integer> tablesForRecords = referencesUnknownStatus.stream()\n+\t\t\t\t.collect(ImmutableListMultimap.toImmutableListMultimap(TableRecordReference::getAD_Table_ID, TableRecordReference::getRecord_ID));\n+\n+\t\t// first query returns nothing. Rest of the queries return the correct data\n+\t\tfinal IQuery<I_CM_Chat> query = queryBL.createQueryBuilder(I_CM_Chat.class)\n+\t\t\t\t.addEqualsFilter(I_CM_Chat.COLUMNNAME_CM_Chat_ID, -1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d4800cb54cf788e2c0ca09b04a937ad09acec2c"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyMTU1OQ==", "bodyText": ":(((", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466321559", "createdAt": "2020-08-06T10:36:01Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/comments/CommentEntryRepository.java", "diffHunk": "@@ -131,10 +161,45 @@ private CommentEntryParentId getOrCreateParent(final @NonNull TableRecordReferen\n \tprivate CommentEntryParentId getParentIdOrNull(final @NonNull TableRecordReference tableRecordReference)\n \t{\n \t\treturn queryBL.createQueryBuilder(I_CM_Chat.class)\n+\t\t\t\t.addOnlyActiveRecordsFilter()\n \t\t\t\t.addEqualsFilter(I_CM_Chat.COLUMNNAME_AD_Table_ID, tableRecordReference.getAD_Table_ID())\n \t\t\t\t.addEqualsFilter(I_CM_Chat.COLUMNNAME_Record_ID, tableRecordReference.getRecord_ID())\n \t\t\t\t.orderBy(I_CM_Chat.COLUMNNAME_CM_Chat_ID)\n \t\t\t\t.create()\n \t\t\t\t.firstId(CommentEntryParentId::ofRepoIdOrNull);\n \t}\n+\n+\t@NonNull\n+\tprivate Map<TableRecordReference, Boolean> checkReferenceHasComments(@NonNull final Collection<TableRecordReference> referencesUnknownStatus)\n+\t{\n+\t\tfinal ImmutableListMultimap<Integer, Integer> tablesForRecords = referencesUnknownStatus.stream()\n+\t\t\t\t.collect(ImmutableListMultimap.toImmutableListMultimap(TableRecordReference::getAD_Table_ID, TableRecordReference::getRecord_ID));\n+\n+\t\t// first query returns nothing. Rest of the queries return the correct data\n+\t\tfinal IQuery<I_CM_Chat> query = queryBL.createQueryBuilder(I_CM_Chat.class)\n+\t\t\t\t.addEqualsFilter(I_CM_Chat.COLUMNNAME_CM_Chat_ID, -1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyMTQ5MQ=="}, "originalCommit": {"oid": "5d4800cb54cf788e2c0ca09b04a937ad09acec2c"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyMjg2OA==", "bodyText": "avoid using mutable objects as constants", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466322868", "createdAt": "2020-08-06T10:38:51Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/comments/CommentsService.java", "diffHunk": "@@ -22,37 +22,104 @@\n \n package de.metas.ui.web.comments;\n \n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import de.metas.comments.CommentEntry;\n import de.metas.comments.CommentEntryRepository;\n import de.metas.ui.web.comments.json.JSONComment;\n import de.metas.ui.web.comments.json.JSONCommentCreateRequest;\n+import de.metas.ui.web.view.IViewRow;\n+import de.metas.ui.web.window.datatypes.DocumentPath;\n import de.metas.ui.web.window.datatypes.json.DateTimeConverters;\n+import de.metas.ui.web.window.descriptor.factory.DocumentDescriptorFactory;\n import de.metas.user.api.IUserDAO;\n import de.metas.util.GuavaCollectors;\n+import de.metas.util.ImmutableMapEntry;\n import de.metas.util.Services;\n import lombok.NonNull;\n import org.adempiere.util.lang.impl.TableRecordReference;\n import org.springframework.stereotype.Service;\n \n+import javax.annotation.Nullable;\n import java.time.ZoneId;\n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.Comparator;\n+import java.util.IdentityHashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n \n @Service\n public class CommentsService\n {\n \tprivate final CommentEntryRepository commentEntryRepository;\n+\tprivate final DocumentDescriptorFactory documentDescriptorFactory;\n \tfinal IUserDAO userDAO = Services.get(IUserDAO.class);\n \n-\tpublic CommentsService(final CommentEntryRepository commentEntryRepository)\n+\tpublic static final IdentityHashMap<IViewRow, Boolean> NO_COMMENTS = new IdentityHashMap<>(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d4800cb54cf788e2c0ca09b04a937ad09acec2c"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyMzEzNA==", "bodyText": "why not @NonNull row?", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466323134", "createdAt": "2020-08-06T10:39:26Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/comments/CommentsService.java", "diffHunk": "@@ -22,37 +22,104 @@\n \n package de.metas.ui.web.comments;\n \n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import de.metas.comments.CommentEntry;\n import de.metas.comments.CommentEntryRepository;\n import de.metas.ui.web.comments.json.JSONComment;\n import de.metas.ui.web.comments.json.JSONCommentCreateRequest;\n+import de.metas.ui.web.view.IViewRow;\n+import de.metas.ui.web.window.datatypes.DocumentPath;\n import de.metas.ui.web.window.datatypes.json.DateTimeConverters;\n+import de.metas.ui.web.window.descriptor.factory.DocumentDescriptorFactory;\n import de.metas.user.api.IUserDAO;\n import de.metas.util.GuavaCollectors;\n+import de.metas.util.ImmutableMapEntry;\n import de.metas.util.Services;\n import lombok.NonNull;\n import org.adempiere.util.lang.impl.TableRecordReference;\n import org.springframework.stereotype.Service;\n \n+import javax.annotation.Nullable;\n import java.time.ZoneId;\n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.Comparator;\n+import java.util.IdentityHashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n \n @Service\n public class CommentsService\n {\n \tprivate final CommentEntryRepository commentEntryRepository;\n+\tprivate final DocumentDescriptorFactory documentDescriptorFactory;\n \tfinal IUserDAO userDAO = Services.get(IUserDAO.class);\n \n-\tpublic CommentsService(final CommentEntryRepository commentEntryRepository)\n+\tpublic static final IdentityHashMap<IViewRow, Boolean> NO_COMMENTS = new IdentityHashMap<>(0);\n+\n+\tpublic CommentsService(final CommentEntryRepository commentEntryRepository, final DocumentDescriptorFactory documentDescriptorFactory)\n \t{\n \t\tthis.commentEntryRepository = commentEntryRepository;\n+\t\tthis.documentDescriptorFactory = documentDescriptorFactory;\n+\t}\n+\n+\t@NonNull\n+\tpublic final IdentityHashMap<IViewRow, Boolean> hasComments(@Nullable final IViewRow row)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d4800cb54cf788e2c0ca09b04a937ad09acec2c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyNDEzMQ==", "bodyText": "why Boolean object and not primitive boolean?", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466324131", "createdAt": "2020-08-06T10:41:22Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/comments/CommentsService.java", "diffHunk": "@@ -22,37 +22,104 @@\n \n package de.metas.ui.web.comments;\n \n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import de.metas.comments.CommentEntry;\n import de.metas.comments.CommentEntryRepository;\n import de.metas.ui.web.comments.json.JSONComment;\n import de.metas.ui.web.comments.json.JSONCommentCreateRequest;\n+import de.metas.ui.web.view.IViewRow;\n+import de.metas.ui.web.window.datatypes.DocumentPath;\n import de.metas.ui.web.window.datatypes.json.DateTimeConverters;\n+import de.metas.ui.web.window.descriptor.factory.DocumentDescriptorFactory;\n import de.metas.user.api.IUserDAO;\n import de.metas.util.GuavaCollectors;\n+import de.metas.util.ImmutableMapEntry;\n import de.metas.util.Services;\n import lombok.NonNull;\n import org.adempiere.util.lang.impl.TableRecordReference;\n import org.springframework.stereotype.Service;\n \n+import javax.annotation.Nullable;\n import java.time.ZoneId;\n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.Comparator;\n+import java.util.IdentityHashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n \n @Service\n public class CommentsService\n {\n \tprivate final CommentEntryRepository commentEntryRepository;\n+\tprivate final DocumentDescriptorFactory documentDescriptorFactory;\n \tfinal IUserDAO userDAO = Services.get(IUserDAO.class);\n \n-\tpublic CommentsService(final CommentEntryRepository commentEntryRepository)\n+\tpublic static final IdentityHashMap<IViewRow, Boolean> NO_COMMENTS = new IdentityHashMap<>(0);\n+\n+\tpublic CommentsService(final CommentEntryRepository commentEntryRepository, final DocumentDescriptorFactory documentDescriptorFactory)\n \t{\n \t\tthis.commentEntryRepository = commentEntryRepository;\n+\t\tthis.documentDescriptorFactory = documentDescriptorFactory;\n+\t}\n+\n+\t@NonNull\n+\tpublic final IdentityHashMap<IViewRow, Boolean> hasComments(@Nullable final IViewRow row)\n+\t{\n+\t\tif (row == null)\n+\t\t{\n+\t\t\treturn NO_COMMENTS;\n+\t\t}\n+\n+\t\treturn hasComments(Collections.singletonList(row));\n+\t}\n+\n+\t@NonNull\n+\tpublic final IdentityHashMap<IViewRow, Boolean> hasComments(@NonNull final Collection<? extends IViewRow> rows)\n+\t{\n+\t\tif (rows.isEmpty())\n+\t\t{\n+\t\t\treturn NO_COMMENTS;\n+\t\t}\n+\n+\t\tfinal ImmutableMap<IViewRow, TableRecordReference> rowsForReferences = rows.stream()\n+\t\t\t\t.flatMap(IViewRow::streamRecursive)\n+\t\t\t\t.flatMap(this::toStreamOfValidTableReferences)\n+\t\t\t\t.collect(GuavaCollectors.toImmutableMap());\n+\n+\t\tfinal Map<TableRecordReference, Boolean> referencesWithComments = commentEntryRepository.hasComments(rowsForReferences.values());\n+\n+\t\tfinal IdentityHashMap<IViewRow, Boolean> result = new IdentityHashMap<>();\n+\t\tfor (final IViewRow row : rows)\n+\t\t{\n+\t\t\tfinal TableRecordReference ref = rowsForReferences.get(row);\n+\t\t\tresult.put(row, referencesWithComments.getOrDefault(ref, false));\n+\t\t}\n+\n+\t\treturn result;\n \t}\n \n \t@NonNull\n-\tpublic List<JSONComment> getCommentsFor(@NonNull final TableRecordReference tableRecordReference, final ZoneId zoneId)\n+\tpublic Boolean hasComments(@NonNull final DocumentPath documentPath)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d4800cb54cf788e2c0ca09b04a937ad09acec2c"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyNTA0OA==", "bodyText": "use our formatting... i.e. space after comma", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466325048", "createdAt": "2020-08-06T10:43:08Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/view/ViewRestController.java", "diffHunk": "@@ -214,7 +229,12 @@ public JSONViewResult deleteStickyFilter(\n \n \t\tfinal IView newView = viewsRepo.deleteStickyFilter(viewId, filterId);\n \t\tfinal JSONOptions jsonOpts = newJSONOptions();\n-\t\treturn JSONViewResult.of(ViewResult.ofView(newView), ViewRowOverridesHelper.getViewRowOverrides(newView), jsonOpts);\n+\t\tfinal ViewResult viewResult = ViewResult.ofView(newView);\n+\n+\t\tfinal List<IViewRow> rows = viewResult.isPageLoaded() ? viewResult.getPage() : Collections.emptyList();\n+\t\tfinal IdentityHashMap<IViewRow, Boolean> documentsWithComments = commentsService.hasComments(rows);\n+\n+\t\treturn JSONViewResult.of(viewResult, ViewRowOverridesHelper.getViewRowOverrides(newView), jsonOpts,documentsWithComments);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d4800cb54cf788e2c0ca09b04a937ad09acec2c"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyODEyMw==", "bodyText": "for me now it becomes obvious that\n\ninstead of IdentityHashMap<IViewRow, Boolean> we shall introduce our ViewRowComments class\ninside ViewRowComments avoid, instead of indexing by IViewRow, indexing by row id's would be sufficient (DocumentId)\navoid indexing by fat objects by all means\nmake sure ViewRowComments it's immutable (i.e. use ImmutbleMap inside it)", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466328123", "createdAt": "2020-08-06T10:49:18Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/comments/CommentsService.java", "diffHunk": "@@ -22,37 +22,104 @@\n \n package de.metas.ui.web.comments;\n \n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import de.metas.comments.CommentEntry;\n import de.metas.comments.CommentEntryRepository;\n import de.metas.ui.web.comments.json.JSONComment;\n import de.metas.ui.web.comments.json.JSONCommentCreateRequest;\n+import de.metas.ui.web.view.IViewRow;\n+import de.metas.ui.web.window.datatypes.DocumentPath;\n import de.metas.ui.web.window.datatypes.json.DateTimeConverters;\n+import de.metas.ui.web.window.descriptor.factory.DocumentDescriptorFactory;\n import de.metas.user.api.IUserDAO;\n import de.metas.util.GuavaCollectors;\n+import de.metas.util.ImmutableMapEntry;\n import de.metas.util.Services;\n import lombok.NonNull;\n import org.adempiere.util.lang.impl.TableRecordReference;\n import org.springframework.stereotype.Service;\n \n+import javax.annotation.Nullable;\n import java.time.ZoneId;\n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.Comparator;\n+import java.util.IdentityHashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n \n @Service\n public class CommentsService\n {\n \tprivate final CommentEntryRepository commentEntryRepository;\n+\tprivate final DocumentDescriptorFactory documentDescriptorFactory;\n \tfinal IUserDAO userDAO = Services.get(IUserDAO.class);\n \n-\tpublic CommentsService(final CommentEntryRepository commentEntryRepository)\n+\tpublic static final IdentityHashMap<IViewRow, Boolean> NO_COMMENTS = new IdentityHashMap<>(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyMjg2OA=="}, "originalCommit": {"oid": "5d4800cb54cf788e2c0ca09b04a937ad09acec2c"}, "originalPosition": 41}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "75871a890a7e518b2e0fb545caccb69d509af85d", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/75871a890a7e518b2e0fb545caccb69d509af85d", "committedDate": "2020-08-06T13:53:38Z", "message": "Introduce `ViewRowComments` which stores the list of rowIds and if they have comments or not.\n\nNo longer passing around a Map with this data, but using a proper object\n\nhttps://github.com/metasfresh/metasfresh/issues/7089"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4cd09f5311f18a49c4cce2688eb27f5c6b06d939", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/4cd09f5311f18a49c4cce2688eb27f5c6b06d939", "committedDate": "2020-08-06T13:54:00Z", "message": "`DocumentDescriptorFactory`: handle string window id\n\nhttps://github.com/metasfresh/metasfresh/issues/7089"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5ca5b29a6bad32dbf89a63dadfe80f660d4435c9", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/5ca5b29a6bad32dbf89a63dadfe80f660d4435c9", "committedDate": "2020-08-06T13:54:33Z", "message": "Refactor query\n\nhttps://github.com/metasfresh/metasfresh/issues/7089"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMTM3NDM2", "url": "https://github.com/metasfresh/metasfresh/pull/7090#pullrequestreview-463137436", "createdAt": "2020-08-07T08:40:17Z", "commit": {"oid": "5ca5b29a6bad32dbf89a63dadfe80f660d4435c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODo0MDoxN1rOG9RmSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODo0MDoxN1rOG9RmSg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkwNDY1MA==", "bodyText": "awhy not getComments?", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466904650", "createdAt": "2020-08-07T08:40:17Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/comments/CommentsService.java", "diffHunk": "@@ -22,37 +22,97 @@\n \n package de.metas.ui.web.comments;\n \n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import de.metas.comments.CommentEntry;\n import de.metas.comments.CommentEntryRepository;\n import de.metas.ui.web.comments.json.JSONComment;\n import de.metas.ui.web.comments.json.JSONCommentCreateRequest;\n+import de.metas.ui.web.view.IViewRow;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import de.metas.ui.web.window.datatypes.DocumentPath;\n import de.metas.ui.web.window.datatypes.json.DateTimeConverters;\n+import de.metas.ui.web.window.descriptor.factory.DocumentDescriptorFactory;\n import de.metas.user.api.IUserDAO;\n import de.metas.util.GuavaCollectors;\n+import de.metas.util.ImmutableMapEntry;\n import de.metas.util.Services;\n import lombok.NonNull;\n import org.adempiere.util.lang.impl.TableRecordReference;\n import org.springframework.stereotype.Service;\n \n import java.time.ZoneId;\n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n \n @Service\n public class CommentsService\n {\n \tprivate final CommentEntryRepository commentEntryRepository;\n+\tprivate final DocumentDescriptorFactory documentDescriptorFactory;\n \tfinal IUserDAO userDAO = Services.get(IUserDAO.class);\n \n-\tpublic CommentsService(final CommentEntryRepository commentEntryRepository)\n+\tpublic static final ViewRowComments NO_COMMENTS = ViewRowComments.of(ImmutableMap.of());\n+\n+\tpublic CommentsService(final CommentEntryRepository commentEntryRepository, final DocumentDescriptorFactory documentDescriptorFactory)\n \t{\n \t\tthis.commentEntryRepository = commentEntryRepository;\n+\t\tthis.documentDescriptorFactory = documentDescriptorFactory;\n+\t}\n+\n+\t@NonNull\n+\tpublic final ViewRowComments hasComments(@NonNull final IViewRow row)\n+\t{\n+\t\treturn hasComments(Collections.singletonList(row));\n \t}\n \n \t@NonNull\n-\tpublic List<JSONComment> getCommentsFor(@NonNull final TableRecordReference tableRecordReference, final ZoneId zoneId)\n+\tpublic final ViewRowComments hasComments(@NonNull final Collection<? extends IViewRow> rows)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca5b29a6bad32dbf89a63dadfe80f660d4435c9"}, "originalPosition": 56}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMTM3NTQ4", "url": "https://github.com/metasfresh/metasfresh/pull/7090#pullrequestreview-463137548", "createdAt": "2020-08-07T08:40:26Z", "commit": {"oid": "5ca5b29a6bad32dbf89a63dadfe80f660d4435c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODo0MDoyNlrOG9RmoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODo0MDoyNlrOG9RmoQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkwNDczNw==", "bodyText": "why not getComments?", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466904737", "createdAt": "2020-08-07T08:40:26Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/comments/CommentsService.java", "diffHunk": "@@ -22,37 +22,97 @@\n \n package de.metas.ui.web.comments;\n \n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import de.metas.comments.CommentEntry;\n import de.metas.comments.CommentEntryRepository;\n import de.metas.ui.web.comments.json.JSONComment;\n import de.metas.ui.web.comments.json.JSONCommentCreateRequest;\n+import de.metas.ui.web.view.IViewRow;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import de.metas.ui.web.window.datatypes.DocumentPath;\n import de.metas.ui.web.window.datatypes.json.DateTimeConverters;\n+import de.metas.ui.web.window.descriptor.factory.DocumentDescriptorFactory;\n import de.metas.user.api.IUserDAO;\n import de.metas.util.GuavaCollectors;\n+import de.metas.util.ImmutableMapEntry;\n import de.metas.util.Services;\n import lombok.NonNull;\n import org.adempiere.util.lang.impl.TableRecordReference;\n import org.springframework.stereotype.Service;\n \n import java.time.ZoneId;\n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n \n @Service\n public class CommentsService\n {\n \tprivate final CommentEntryRepository commentEntryRepository;\n+\tprivate final DocumentDescriptorFactory documentDescriptorFactory;\n \tfinal IUserDAO userDAO = Services.get(IUserDAO.class);\n \n-\tpublic CommentsService(final CommentEntryRepository commentEntryRepository)\n+\tpublic static final ViewRowComments NO_COMMENTS = ViewRowComments.of(ImmutableMap.of());\n+\n+\tpublic CommentsService(final CommentEntryRepository commentEntryRepository, final DocumentDescriptorFactory documentDescriptorFactory)\n \t{\n \t\tthis.commentEntryRepository = commentEntryRepository;\n+\t\tthis.documentDescriptorFactory = documentDescriptorFactory;\n+\t}\n+\n+\t@NonNull\n+\tpublic final ViewRowComments hasComments(@NonNull final IViewRow row)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca5b29a6bad32dbf89a63dadfe80f660d4435c9"}, "originalPosition": 49}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMTM4NTA2", "url": "https://github.com/metasfresh/metasfresh/pull/7090#pullrequestreview-463138506", "createdAt": "2020-08-07T08:41:51Z", "commit": {"oid": "5ca5b29a6bad32dbf89a63dadfe80f660d4435c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODo0MTo1MVrOG9RphA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODo0MTo1MVrOG9RphA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkwNTQ3Ng==", "bodyText": "pls decide if u want @Value or @Data :)\ni would go with @Value", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466905476", "createdAt": "2020-08-07T08:41:51Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/comments/ViewRowComments.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.comments;\n+\n+import com.google.common.collect.ImmutableMap;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import lombok.Data;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+import java.util.Map;\n+\n+@Value\n+@Data\n+public class ViewRowComments", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca5b29a6bad32dbf89a63dadfe80f660d4435c9"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDYzMTQxNjcw", "url": "https://github.com/metasfresh/metasfresh/pull/7090#pullrequestreview-463141670", "createdAt": "2020-08-07T08:46:49Z", "commit": {"oid": "5ca5b29a6bad32dbf89a63dadfe80f660d4435c9"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODo0Njo0OVrOG9RzUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODo0Njo0OVrOG9RzUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkwNzk4NQ==", "bodyText": "pls move it to ViewRowComments and call it EMPTY", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466907985", "createdAt": "2020-08-07T08:46:49Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/comments/CommentsService.java", "diffHunk": "@@ -22,37 +22,97 @@\n \n package de.metas.ui.web.comments;\n \n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import de.metas.comments.CommentEntry;\n import de.metas.comments.CommentEntryRepository;\n import de.metas.ui.web.comments.json.JSONComment;\n import de.metas.ui.web.comments.json.JSONCommentCreateRequest;\n+import de.metas.ui.web.view.IViewRow;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import de.metas.ui.web.window.datatypes.DocumentPath;\n import de.metas.ui.web.window.datatypes.json.DateTimeConverters;\n+import de.metas.ui.web.window.descriptor.factory.DocumentDescriptorFactory;\n import de.metas.user.api.IUserDAO;\n import de.metas.util.GuavaCollectors;\n+import de.metas.util.ImmutableMapEntry;\n import de.metas.util.Services;\n import lombok.NonNull;\n import org.adempiere.util.lang.impl.TableRecordReference;\n import org.springframework.stereotype.Service;\n \n import java.time.ZoneId;\n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n \n @Service\n public class CommentsService\n {\n \tprivate final CommentEntryRepository commentEntryRepository;\n+\tprivate final DocumentDescriptorFactory documentDescriptorFactory;\n \tfinal IUserDAO userDAO = Services.get(IUserDAO.class);\n \n-\tpublic CommentsService(final CommentEntryRepository commentEntryRepository)\n+\tpublic static final ViewRowComments NO_COMMENTS = ViewRowComments.of(ImmutableMap.of());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca5b29a6bad32dbf89a63dadfe80f660d4435c9"}, "originalPosition": 40}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "d88c5572d6f6305bd788a6820e659bcd31fd10d0", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/d88c5572d6f6305bd788a6820e659bcd31fd10d0", "committedDate": "2020-08-07T09:40:16Z", "message": "Fixes and refactorings\n\nhttps://github.com/metasfresh/metasfresh/issues/7089"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3333ef54f6a9929ddc1cdced59070190113d52b2", "author": {"user": {"login": "teosarca", "name": "Teo Sarca"}}, "url": "https://github.com/metasfresh/metasfresh/commit/3333ef54f6a9929ddc1cdced59070190113d52b2", "committedDate": "2020-08-07T11:43:15Z", "message": "Merge branch 'master' into gh7089-comment-is-available"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29474647bc3c231586c9e9f922c817ecd2a69259", "author": {"user": {"login": "teosarca", "name": "Teo Sarca"}}, "url": "https://github.com/metasfresh/metasfresh/commit/29474647bc3c231586c9e9f922c817ecd2a69259", "committedDate": "2020-08-07T12:45:24Z", "message": "QA"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a027dce53f47929caa05d70bb18895d77d35277c", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/a027dce53f47929caa05d70bb18895d77d35277c", "committedDate": "2020-08-10T05:31:11Z", "message": "Fixes and refactorings\n\nhttps://github.com/metasfresh/metasfresh/issues/7089"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDY1MDM3MjQ5", "url": "https://github.com/metasfresh/metasfresh/pull/7090#pullrequestreview-465037249", "createdAt": "2020-08-11T12:57:22Z", "commit": {"oid": "a027dce53f47929caa05d70bb18895d77d35277c"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3244, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}