{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQwMDY0NzM5", "number": 6911, "reviewThreads": {"totalCount": 10, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODowNjo1OVrOEJlLpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODo1MjoyM1rOEMM6JA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDgxODMwOnYy", "diffSide": "RIGHT", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/process/WEBUI_CloneLine.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODowNjo1OVrOGqJQIw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODowNjo1OVrOGqJQIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0NDk2Mw==", "bodyText": "use rejectWithInternalReason(...) as it's clearer", "url": "https://github.com/metasfresh/metasfresh/pull/6911#discussion_r446844963", "createdAt": "2020-06-29T08:06:59Z", "author": {"login": "metas-ts"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/process/WEBUI_CloneLine.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.process;\n+\n+import de.metas.process.IProcessPrecondition;\n+import de.metas.process.IProcessPreconditionsContext;\n+import de.metas.process.JavaProcess;\n+import de.metas.process.ProcessPreconditionsResolution;\n+import de.metas.ui.web.window.model.DocumentCollection;\n+import lombok.NonNull;\n+import org.adempiere.model.CopyRecordFactory;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.compiere.SpringContextHolder;\n+\n+import javax.annotation.Nullable;\n+\n+public class WEBUI_CloneLine extends JavaProcess implements IProcessPrecondition\n+{\n+\tDocumentCollection documentCollectionService = SpringContextHolder.instance.getBean(DocumentCollection.class);\n+\n+\t@Nullable\n+\t@Override\n+\tprotected String doIt() throws Exception\n+\t{\n+\t\t// To be replaced with table id of the selected row's table and row id\n+\t\t// Also, if we are gonna support multiple rows cloning we could put the following 2 lines in a foreach (rowId : rowIds) statement\n+\t\tfinal TableRecordReference tableRecordReference = TableRecordReference.of(getTable_ID(), getRecord_ID());\n+\t\tdocumentCollectionService.duplicateDocumentInTrxGeneric(tableRecordReference, getProcessInfo().getAdWindowId());\n+\t\treturn null;\n+\t}\n+\n+\t@Override\n+\tpublic void flush()\n+\t{\n+\n+\t}\n+\n+\t@Override\n+\tpublic boolean isAllowThreadInherited()\n+\t{\n+\t\treturn false;\n+\t}\n+\n+\t@Override\n+\tpublic ProcessPreconditionsResolution checkPreconditionsApplicable(final @NonNull IProcessPreconditionsContext context)\n+\t{\n+\t\tif (context.getAdTabId() == null)\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution.reject();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4aecca323191599866c67ba4ba8474debd16f9bf"}, "originalPosition": 69}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDgyMTY5OnYy", "diffSide": "RIGHT", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/process/WEBUI_CloneLine.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODowNzo1NVrOGqJSGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNTozMDoxMFrOGuEDaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0NTQ2NQ==", "bodyText": "there is a constant we return if all is fine..MSG_OK afair..", "url": "https://github.com/metasfresh/metasfresh/pull/6911#discussion_r446845465", "createdAt": "2020-06-29T08:07:55Z", "author": {"login": "metas-ts"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/process/WEBUI_CloneLine.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.process;\n+\n+import de.metas.process.IProcessPrecondition;\n+import de.metas.process.IProcessPreconditionsContext;\n+import de.metas.process.JavaProcess;\n+import de.metas.process.ProcessPreconditionsResolution;\n+import de.metas.ui.web.window.model.DocumentCollection;\n+import lombok.NonNull;\n+import org.adempiere.model.CopyRecordFactory;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.compiere.SpringContextHolder;\n+\n+import javax.annotation.Nullable;\n+\n+public class WEBUI_CloneLine extends JavaProcess implements IProcessPrecondition\n+{\n+\tDocumentCollection documentCollectionService = SpringContextHolder.instance.getBean(DocumentCollection.class);\n+\n+\t@Nullable\n+\t@Override\n+\tprotected String doIt() throws Exception\n+\t{\n+\t\t// To be replaced with table id of the selected row's table and row id\n+\t\t// Also, if we are gonna support multiple rows cloning we could put the following 2 lines in a foreach (rowId : rowIds) statement\n+\t\tfinal TableRecordReference tableRecordReference = TableRecordReference.of(getTable_ID(), getRecord_ID());\n+\t\tdocumentCollectionService.duplicateDocumentInTrxGeneric(tableRecordReference, getProcessInfo().getAdWindowId());\n+\t\treturn null;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4aecca323191599866c67ba4ba8474debd16f9bf"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk1NDA5MQ==", "bodyText": "Done", "url": "https://github.com/metasfresh/metasfresh/pull/6911#discussion_r450954091", "createdAt": "2020-07-07T15:30:10Z", "author": {"login": "dragospodariu96"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/process/WEBUI_CloneLine.java", "diffHunk": "@@ -0,0 +1,77 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.process;\n+\n+import de.metas.process.IProcessPrecondition;\n+import de.metas.process.IProcessPreconditionsContext;\n+import de.metas.process.JavaProcess;\n+import de.metas.process.ProcessPreconditionsResolution;\n+import de.metas.ui.web.window.model.DocumentCollection;\n+import lombok.NonNull;\n+import org.adempiere.model.CopyRecordFactory;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.compiere.SpringContextHolder;\n+\n+import javax.annotation.Nullable;\n+\n+public class WEBUI_CloneLine extends JavaProcess implements IProcessPrecondition\n+{\n+\tDocumentCollection documentCollectionService = SpringContextHolder.instance.getBean(DocumentCollection.class);\n+\n+\t@Nullable\n+\t@Override\n+\tprotected String doIt() throws Exception\n+\t{\n+\t\t// To be replaced with table id of the selected row's table and row id\n+\t\t// Also, if we are gonna support multiple rows cloning we could put the following 2 lines in a foreach (rowId : rowIds) statement\n+\t\tfinal TableRecordReference tableRecordReference = TableRecordReference.of(getTable_ID(), getRecord_ID());\n+\t\tdocumentCollectionService.duplicateDocumentInTrxGeneric(tableRecordReference, getProcessInfo().getAdWindowId());\n+\t\treturn null;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0NTQ2NQ=="}, "originalCommit": {"oid": "4aecca323191599866c67ba4ba8474debd16f9bf"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDgyNjQxOnYy", "diffSide": "RIGHT", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/process/config/StandardProcessConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODowOToxNVrOGqJU4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNTozMDowNlrOGuEDSQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0NjE3OQ==", "bodyText": "not sure why you picked this class name..why not something more \"speaking\"?", "url": "https://github.com/metasfresh/metasfresh/pull/6911#discussion_r446846179", "createdAt": "2020-06-29T08:09:15Z", "author": {"login": "metas-ts"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/process/config/StandardProcessConfig.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.process.config;\n+\n+import de.metas.process.IADProcessDAO;\n+import de.metas.process.RelatedProcessDescriptor;\n+import de.metas.ui.web.process.WEBUI_CloneLine;\n+import de.metas.util.Services;\n+import org.springframework.stereotype.Component;\n+\n+import javax.annotation.PostConstruct;\n+\n+@Component\n+public class StandardProcessConfig", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4aecca323191599866c67ba4ba8474debd16f9bf"}, "originalPosition": 34}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk1NDA1Nw==", "bodyText": "Done", "url": "https://github.com/metasfresh/metasfresh/pull/6911#discussion_r450954057", "createdAt": "2020-07-07T15:30:06Z", "author": {"login": "dragospodariu96"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/process/config/StandardProcessConfig.java", "diffHunk": "@@ -0,0 +1,48 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.process.config;\n+\n+import de.metas.process.IADProcessDAO;\n+import de.metas.process.RelatedProcessDescriptor;\n+import de.metas.ui.web.process.WEBUI_CloneLine;\n+import de.metas.util.Services;\n+import org.springframework.stereotype.Component;\n+\n+import javax.annotation.PostConstruct;\n+\n+@Component\n+public class StandardProcessConfig", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0NjE3OQ=="}, "originalCommit": {"oid": "4aecca323191599866c67ba4ba8474debd16f9bf"}, "originalPosition": 34}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc4NDgzMTcyOnYy", "diffSide": "RIGHT", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/window/model/DocumentCollection.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yOVQwODoxMDo0MVrOGqJX_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxNTozMDoxNlrOGuEDsg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0Njk3Mw==", "bodyText": "if they can't/shall not be null, then please use lombok's @NonNull annotation", "url": "https://github.com/metasfresh/metasfresh/pull/6911#discussion_r446846973", "createdAt": "2020-06-29T08:10:41Z", "author": {"login": "metas-ts"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/window/model/DocumentCollection.java", "diffHunk": "@@ -790,10 +789,17 @@ private DocumentPath duplicateDocumentInTrx(final DocumentPath fromDocumentPath)\n \n \t\tfinal TableRecordReference fromRecordRef = getTableRecordReference(fromDocumentPath);\n \n+\t\treturn duplicateDocumentInTrxGeneric(fromRecordRef, fromDocumentPath.getAdWindowIdOrNull());\n+\n+\t}\n+\n+\tpublic DocumentPath duplicateDocumentInTrxGeneric(final TableRecordReference fromRecordRef, final AdWindowId windowId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4aecca323191599866c67ba4ba8474debd16f9bf"}, "originalPosition": 25}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDk1NDE2Mg==", "bodyText": "Addrssed this", "url": "https://github.com/metasfresh/metasfresh/pull/6911#discussion_r450954162", "createdAt": "2020-07-07T15:30:16Z", "author": {"login": "dragospodariu96"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/window/model/DocumentCollection.java", "diffHunk": "@@ -790,10 +789,17 @@ private DocumentPath duplicateDocumentInTrx(final DocumentPath fromDocumentPath)\n \n \t\tfinal TableRecordReference fromRecordRef = getTableRecordReference(fromDocumentPath);\n \n+\t\treturn duplicateDocumentInTrxGeneric(fromRecordRef, fromDocumentPath.getAdWindowIdOrNull());\n+\n+\t}\n+\n+\tpublic DocumentPath duplicateDocumentInTrxGeneric(final TableRecordReference fromRecordRef, final AdWindowId windowId)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0Njg0Njk3Mw=="}, "originalCommit": {"oid": "4aecca323191599866c67ba4ba8474debd16f9bf"}, "originalPosition": 25}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjI2NDM5OnYy", "diffSide": "RIGHT", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/process/WEBUI_CloneLine.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODo0MjowOVrOGuLFJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODo0MjowOVrOGuLFJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA2OTIyMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tfinal TableRecordReference tableRecordReference = new ArrayList<TableRecordReference>(TableRecordReference.ofSet(getProcessInfo().getSelectedIncludedRecords())).get(0);\n          \n          \n            \n            \t\tfinal TableRecordReference tableRecordReference = CollectionUtils.singleElementOrNull(getProcessInfo().getSelectedIncludedRecords());\n          \n          \n            \n            \t\tif(tableRecordReference == null)\n          \n          \n            \n            \t\t{\n          \n          \n            \n            \t\t\taddLog(\"The precondition of one selected included record does not hold anymore; -> doing nothing\");\n          \n          \n            \n            \t\t\treturn MSG_OK;\n          \n          \n            \n            \t\t}", "url": "https://github.com/metasfresh/metasfresh/pull/6911#discussion_r451069221", "createdAt": "2020-07-07T18:42:09Z", "author": {"login": "metas-ts"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/process/WEBUI_CloneLine.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.process;\n+\n+import de.metas.process.IProcessPrecondition;\n+import de.metas.process.IProcessPreconditionsContext;\n+import de.metas.process.JavaProcess;\n+import de.metas.process.ProcessPreconditionsResolution;\n+import de.metas.ui.web.window.model.DocumentCollection;\n+import lombok.NonNull;\n+import org.adempiere.model.CopyRecordFactory;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.compiere.SpringContextHolder;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+\n+public class WEBUI_CloneLine extends JavaProcess implements IProcessPrecondition\n+{\n+\tDocumentCollection documentCollectionService = SpringContextHolder.instance.getBean(DocumentCollection.class);\n+\n+\t@Nullable\n+\t@Override\n+\tprotected String doIt() throws Exception\n+\t{\n+\t\tfinal TableRecordReference tableRecordReference = new ArrayList<TableRecordReference>(TableRecordReference.ofSet(getProcessInfo().getSelectedIncludedRecords())).get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b64daf5920d86def97d3aa96e7420181ea5888ad"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjI2NjQ0OnYy", "diffSide": "RIGHT", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/process/WEBUI_CloneLine.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODo0Mjo0N1rOGuLGZg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODo0Mjo0N1rOGuLGZg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA2OTU0Mg==", "bodyText": "why override flush with an empty method?", "url": "https://github.com/metasfresh/metasfresh/pull/6911#discussion_r451069542", "createdAt": "2020-07-07T18:42:47Z", "author": {"login": "metas-ts"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/process/WEBUI_CloneLine.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.process;\n+\n+import de.metas.process.IProcessPrecondition;\n+import de.metas.process.IProcessPreconditionsContext;\n+import de.metas.process.JavaProcess;\n+import de.metas.process.ProcessPreconditionsResolution;\n+import de.metas.ui.web.window.model.DocumentCollection;\n+import lombok.NonNull;\n+import org.adempiere.model.CopyRecordFactory;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.compiere.SpringContextHolder;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+\n+public class WEBUI_CloneLine extends JavaProcess implements IProcessPrecondition\n+{\n+\tDocumentCollection documentCollectionService = SpringContextHolder.instance.getBean(DocumentCollection.class);\n+\n+\t@Nullable\n+\t@Override\n+\tprotected String doIt() throws Exception\n+\t{\n+\t\tfinal TableRecordReference tableRecordReference = new ArrayList<TableRecordReference>(TableRecordReference.ofSet(getProcessInfo().getSelectedIncludedRecords())).get(0);\n+\t\tfinal TableRecordReference parentRef = TableRecordReference.of(getTable_ID(), getRecord_ID());\n+\t\tdocumentCollectionService.duplicateTabRowInTrx(parentRef, tableRecordReference, getProcessInfo().getAdWindowId());\n+\t\treturn MSG_OK;\n+\t}\n+\n+\t@Override\n+\tpublic void flush()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b64daf5920d86def97d3aa96e7420181ea5888ad"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjI2NzMxOnYy", "diffSide": "RIGHT", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/process/WEBUI_CloneLine.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODo0MzowMlrOGuLG8g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODo0MzowMlrOGuLG8g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA2OTY4Mg==", "bodyText": "why override isAllowThreadInherited?", "url": "https://github.com/metasfresh/metasfresh/pull/6911#discussion_r451069682", "createdAt": "2020-07-07T18:43:02Z", "author": {"login": "metas-ts"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/process/WEBUI_CloneLine.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.process;\n+\n+import de.metas.process.IProcessPrecondition;\n+import de.metas.process.IProcessPreconditionsContext;\n+import de.metas.process.JavaProcess;\n+import de.metas.process.ProcessPreconditionsResolution;\n+import de.metas.ui.web.window.model.DocumentCollection;\n+import lombok.NonNull;\n+import org.adempiere.model.CopyRecordFactory;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.compiere.SpringContextHolder;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+\n+public class WEBUI_CloneLine extends JavaProcess implements IProcessPrecondition\n+{\n+\tDocumentCollection documentCollectionService = SpringContextHolder.instance.getBean(DocumentCollection.class);\n+\n+\t@Nullable\n+\t@Override\n+\tprotected String doIt() throws Exception\n+\t{\n+\t\tfinal TableRecordReference tableRecordReference = new ArrayList<TableRecordReference>(TableRecordReference.ofSet(getProcessInfo().getSelectedIncludedRecords())).get(0);\n+\t\tfinal TableRecordReference parentRef = TableRecordReference.of(getTable_ID(), getRecord_ID());\n+\t\tdocumentCollectionService.duplicateTabRowInTrx(parentRef, tableRecordReference, getProcessInfo().getAdWindowId());\n+\t\treturn MSG_OK;\n+\t}\n+\n+\t@Override\n+\tpublic void flush()\n+\t{\n+\n+\t}\n+\n+\t@Override\n+\tpublic boolean isAllowThreadInherited()\n+\t{", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b64daf5920d86def97d3aa96e7420181ea5888ad"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjI2OTQyOnYy", "diffSide": "RIGHT", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/process/WEBUI_CloneLine.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODo0Mzo0MFrOGuLIPQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODo0Mzo0MFrOGuLIPQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA3MDAxMw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\treturn ProcessPreconditionsResolution.rejectWithInternalReason(\"More than one row selected.\");\n          \n          \n            \n            \t\t\treturn ProcessPreconditionsResolution.rejectWithInternalReason(\"More or less than one row selected.\");", "url": "https://github.com/metasfresh/metasfresh/pull/6911#discussion_r451070013", "createdAt": "2020-07-07T18:43:40Z", "author": {"login": "metas-ts"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/process/WEBUI_CloneLine.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.process;\n+\n+import de.metas.process.IProcessPrecondition;\n+import de.metas.process.IProcessPreconditionsContext;\n+import de.metas.process.JavaProcess;\n+import de.metas.process.ProcessPreconditionsResolution;\n+import de.metas.ui.web.window.model.DocumentCollection;\n+import lombok.NonNull;\n+import org.adempiere.model.CopyRecordFactory;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.compiere.SpringContextHolder;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+\n+public class WEBUI_CloneLine extends JavaProcess implements IProcessPrecondition\n+{\n+\tDocumentCollection documentCollectionService = SpringContextHolder.instance.getBean(DocumentCollection.class);\n+\n+\t@Nullable\n+\t@Override\n+\tprotected String doIt() throws Exception\n+\t{\n+\t\tfinal TableRecordReference tableRecordReference = new ArrayList<TableRecordReference>(TableRecordReference.ofSet(getProcessInfo().getSelectedIncludedRecords())).get(0);\n+\t\tfinal TableRecordReference parentRef = TableRecordReference.of(getTable_ID(), getRecord_ID());\n+\t\tdocumentCollectionService.duplicateTabRowInTrx(parentRef, tableRecordReference, getProcessInfo().getAdWindowId());\n+\t\treturn MSG_OK;\n+\t}\n+\n+\t@Override\n+\tpublic void flush()\n+\t{\n+\n+\t}\n+\n+\t@Override\n+\tpublic boolean isAllowThreadInherited()\n+\t{\n+\t\treturn false;\n+\t}\n+\n+\t@Override\n+\tpublic ProcessPreconditionsResolution checkPreconditionsApplicable(final @NonNull IProcessPreconditionsContext context)\n+\t{\n+\t\tif (context.getAdTabId() == null)\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution.rejectWithInternalReason(\"No row(s) from a tab selected.\");\n+\t\t}\n+\n+\t\t//making sure only one row is selected at a time\n+\t\tif (context.getSelectedIncludedRecords().size() != 1)\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution.rejectWithInternalReason(\"More than one row selected.\");", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b64daf5920d86def97d3aa96e7420181ea5888ad"}, "originalPosition": 75}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjI3MzI0OnYy", "diffSide": "RIGHT", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/process/WEBUI_CloneLine.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODo0NDo0NlrOGuLKfQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODo0NDo0NlrOGuLKfQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA3MDU4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tTableRecordReference ref = new ArrayList<TableRecordReference>(TableRecordReference.ofSet(context.getSelectedIncludedRecords())).get(0);\n          \n          \n            \n            \t\tfinal TableRecordReference ref = CollectionUtils.singleElement(getProcessInfo().getSelectedIncludedRecords());", "url": "https://github.com/metasfresh/metasfresh/pull/6911#discussion_r451070589", "createdAt": "2020-07-07T18:44:46Z", "author": {"login": "metas-ts"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/process/WEBUI_CloneLine.java", "diffHunk": "@@ -0,0 +1,86 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.process;\n+\n+import de.metas.process.IProcessPrecondition;\n+import de.metas.process.IProcessPreconditionsContext;\n+import de.metas.process.JavaProcess;\n+import de.metas.process.ProcessPreconditionsResolution;\n+import de.metas.ui.web.window.model.DocumentCollection;\n+import lombok.NonNull;\n+import org.adempiere.model.CopyRecordFactory;\n+import org.adempiere.util.lang.impl.TableRecordReference;\n+import org.compiere.SpringContextHolder;\n+\n+import javax.annotation.Nullable;\n+import java.util.ArrayList;\n+\n+public class WEBUI_CloneLine extends JavaProcess implements IProcessPrecondition\n+{\n+\tDocumentCollection documentCollectionService = SpringContextHolder.instance.getBean(DocumentCollection.class);\n+\n+\t@Nullable\n+\t@Override\n+\tprotected String doIt() throws Exception\n+\t{\n+\t\tfinal TableRecordReference tableRecordReference = new ArrayList<TableRecordReference>(TableRecordReference.ofSet(getProcessInfo().getSelectedIncludedRecords())).get(0);\n+\t\tfinal TableRecordReference parentRef = TableRecordReference.of(getTable_ID(), getRecord_ID());\n+\t\tdocumentCollectionService.duplicateTabRowInTrx(parentRef, tableRecordReference, getProcessInfo().getAdWindowId());\n+\t\treturn MSG_OK;\n+\t}\n+\n+\t@Override\n+\tpublic void flush()\n+\t{\n+\n+\t}\n+\n+\t@Override\n+\tpublic boolean isAllowThreadInherited()\n+\t{\n+\t\treturn false;\n+\t}\n+\n+\t@Override\n+\tpublic ProcessPreconditionsResolution checkPreconditionsApplicable(final @NonNull IProcessPreconditionsContext context)\n+\t{\n+\t\tif (context.getAdTabId() == null)\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution.rejectWithInternalReason(\"No row(s) from a tab selected.\");\n+\t\t}\n+\n+\t\t//making sure only one row is selected at a time\n+\t\tif (context.getSelectedIncludedRecords().size() != 1)\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution.rejectWithInternalReason(\"More than one row selected.\");\n+\t\t}\n+\n+\t\tTableRecordReference ref = new ArrayList<TableRecordReference>(TableRecordReference.ofSet(context.getSelectedIncludedRecords())).get(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b64daf5920d86def97d3aa96e7420181ea5888ad"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjgxMjI5ODYwOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.salescandidate.base/src/main/java/de/metas/ordercandidate/modelvalidator/C_OrderLine.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODo1MjoyM1rOGuLZzA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wN1QxODo1MjoyM1rOGuLZzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MTA3NDUwOA==", "bodyText": "with respect to\n\nOBS: Enabled copyrecordfactory for salesorderline to be able to test it on at least a tab. (In the future this can be enabled for more).\n\nWhy wait for the future? Suggestion:\n\nfind the usages of CopyRecordFactory.enableForTableName.\nif the factory is enable for a parent (e.g. C_Order or DD_Order) then also add a second line there to enable it also for the line", "url": "https://github.com/metasfresh/metasfresh/pull/6911#discussion_r451074508", "createdAt": "2020-07-07T18:52:23Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.salescandidate.base/src/main/java/de/metas/ordercandidate/modelvalidator/C_OrderLine.java", "diffHunk": "@@ -39,6 +40,13 @@\n @Component\n public class C_OrderLine\n {\n+\n+\t@Init\n+\tpublic void init()\n+\t{\n+\t\tCopyRecordFactory.enableForTableName(I_C_OrderLine.Table_Name);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b64daf5920d86def97d3aa96e7420181ea5888ad"}, "originalPosition": 35}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1398, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}