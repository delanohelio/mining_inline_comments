{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDI0NDY2MTQx", "number": 6752, "title": "Window Distribution Order enhancements", "bodyText": "refs: #6713", "createdAt": "2020-05-28T12:52:45Z", "url": "https://github.com/metasfresh/metasfresh/pull/6752", "merged": true, "mergeCommit": {"oid": "ac432f3912dfc209a5479aac2647c51ca5f05bb8"}, "closed": true, "closedAt": "2020-06-02T08:12:18Z", "author": {"login": "pvpurcarcosmin"}, "timelineItems": {"totalCount": 21, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcltVS0AH2gAyNDI0NDY2MTQxOjY0OWJjZGM3ODYzNzY4YmIyZmEwZDdmMWI2ODkwODk0YmQ3ZTAwY2E=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcnOfDVgH2gAyNDI0NDY2MTQxOjc4OTJhNTY3ODcyNTJjZjljZjU4OWIwODJlMWM5Nzg3M2IxNzEzNmI=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "649bcdc7863768bb2fa0d7f1b6890894bd7e00ca", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/649bcdc7863768bb2fa0d7f1b6890894bd7e00ca", "committedDate": "2020-05-28T12:50:16Z", "message": "Window Distribution Order enhancements\nrefs: https://github.com/metasfresh/metasfresh/issues/6713"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7515233e608694db118cdc30277f74da262ff942", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/7515233e608694db118cdc30277f74da262ff942", "committedDate": "2020-05-29T15:26:58Z", "message": "Window Distribution Order enhancements\nrefs: https://github.com/metasfresh/metasfresh/issues/6713"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82afdbb69c44d78d652692271bf22b3e29a8963e", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/82afdbb69c44d78d652692271bf22b3e29a8963e", "committedDate": "2020-05-29T15:29:09Z", "message": "Window Distribution Order enhancements\nrefs: https://github.com/metasfresh/metasfresh/issues/6713"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "c49a6301b8f35a793f8f294dffa501b4784147a7", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/c49a6301b8f35a793f8f294dffa501b4784147a7", "committedDate": "2020-05-29T17:19:35Z", "message": "removed code from old approach\nrefs: https://github.com/metasfresh/metasfresh/issues/6713"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxMTcwNjU3", "url": "https://github.com/metasfresh/metasfresh/pull/6752#pullrequestreview-421170657", "createdAt": "2020-05-29T17:59:07Z", "commit": {"oid": "c49a6301b8f35a793f8f294dffa501b4784147a7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzo1OTowN1rOGcmySw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxNzo1OTowN1rOGcmySw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjY0ODc3OQ==", "bodyText": "do we display de_CH and de_DE translations for 'Warehouse from' and 'Warehouse to'?", "url": "https://github.com/metasfresh/metasfresh/pull/6752#discussion_r432648779", "createdAt": "2020-05-29T17:59:07Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.handlingunits.base/src/main/sql/postgresql/system/5559900_sys_gh6713_add_warehouse_from_and_to_on_DD_Order.sql", "diffHunk": "@@ -0,0 +1,130 @@\n+-- 2020-05-25T08:07:21.440Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_Element (AD_Client_ID,AD_Element_ID,AD_Org_ID,ColumnName,Created,CreatedBy,EntityType,IsActive,Name,PrintName,Updated,UpdatedBy) VALUES (0,577736,0,'M_Warehouse_From_ID',TO_TIMESTAMP('2020-05-25 11:07:21','YYYY-MM-DD HH24:MI:SS'),100,'D','Y','Warehouse from','Warehouse from',TO_TIMESTAMP('2020-05-25 11:07:21','YYYY-MM-DD HH24:MI:SS'),100)\n+;\n+\n+-- 2020-05-25T08:07:21.459Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_Element_Trl (AD_Language,AD_Element_ID, CommitWarning,Description,Help,Name,PO_Description,PO_Help,PO_Name,PO_PrintName,PrintName,WEBUI_NameBrowse,WEBUI_NameNew,WEBUI_NameNewBreadcrumb, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language, t.AD_Element_ID, t.CommitWarning,t.Description,t.Help,t.Name,t.PO_Description,t.PO_Help,t.PO_Name,t.PO_PrintName,t.PrintName,t.WEBUI_NameBrowse,t.WEBUI_NameNew,t.WEBUI_NameNewBreadcrumb, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Element t WHERE l.IsActive='Y'AND (l.IsSystemLanguage='Y' OR l.IsBaseLanguage='Y') AND t.AD_Element_ID=577736 AND NOT EXISTS (SELECT 1 FROM AD_Element_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Element_ID=t.AD_Element_ID)\n+;\n+\n+-- 2020-05-25T08:09:58.846Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_Element (AD_Client_ID,AD_Element_ID,AD_Org_ID,ColumnName,Created,CreatedBy,EntityType,IsActive,Name,PrintName,Updated,UpdatedBy) VALUES (0,577737,0,'M_Warehouse_To_ID',TO_TIMESTAMP('2020-05-25 11:09:58','YYYY-MM-DD HH24:MI:SS'),100,'D','Y','Warehouse to','Warehouse to',TO_TIMESTAMP('2020-05-25 11:09:58','YYYY-MM-DD HH24:MI:SS'),100)\n+;\n+\n+-- 2020-05-25T08:09:58.847Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_Element_Trl (AD_Language,AD_Element_ID, CommitWarning,Description,Help,Name,PO_Description,PO_Help,PO_Name,PO_PrintName,PrintName,WEBUI_NameBrowse,WEBUI_NameNew,WEBUI_NameNewBreadcrumb, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language, t.AD_Element_ID, t.CommitWarning,t.Description,t.Help,t.Name,t.PO_Description,t.PO_Help,t.PO_Name,t.PO_PrintName,t.PrintName,t.WEBUI_NameBrowse,t.WEBUI_NameNew,t.WEBUI_NameNewBreadcrumb, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Element t WHERE l.IsActive='Y'AND (l.IsSystemLanguage='Y' OR l.IsBaseLanguage='Y') AND t.AD_Element_ID=577737 AND NOT EXISTS (SELECT 1 FROM AD_Element_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Element_ID=t.AD_Element_ID)\n+;\n+\n+-- 2020-05-25T08:11:45.967Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_Column (AD_Client_ID,AD_Column_ID,AD_Element_ID,AD_Org_ID,AD_Reference_ID,AD_Reference_Value_ID,AD_Table_ID,ColumnName,Created,CreatedBy,DDL_NoForeignKey,DefaultValue,EntityType,FacetFilterSeqNo,FieldLength,IsActive,IsAdvancedText,IsAllowLogging,IsAlwaysUpdateable,IsAutoApplyValidationRule,IsAutocomplete,IsCalculated,IsDimension,IsDLMPartitionBoundary,IsEncrypted,IsFacetFilter,IsForceIncludeInGeneratedModel,IsGenericZoomKeyColumn,IsGenericZoomOrigin,IsIdentifier,IsKey,IsLazyLoading,IsMandatory,IsParent,IsRangeFilter,IsSelectionColumn,IsShowFilterIncrementButtons,IsStaleable,IsSyncDatabase,IsTranslated,IsUpdateable,IsUseDocSequence,MaxFacetsToFetch,Name,SelectionColumnSeqNo,SeqNo,Updated,UpdatedBy,Version) VALUES (0,570819,577736,0,30,540420,53037,'M_Warehouse_From_ID',TO_TIMESTAMP('2020-05-25 11:11:45','YYYY-MM-DD HH24:MI:SS'),100,'N','540008','EE01',0,10,'Y','N','Y','N','N','N','N','N','N','N','N','N','N','N','N','N','N','Y','N','N','N','N','N','N','N','Y','N',0,'Warehouse from',0,0,TO_TIMESTAMP('2020-05-25 11:11:45','YYYY-MM-DD HH24:MI:SS'),100,0)\n+;\n+\n+-- 2020-05-25T08:11:45.979Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_Column_Trl (AD_Language,AD_Column_ID, Name, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language, t.AD_Column_ID, t.Name, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Column t WHERE l.IsActive='Y'AND (l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N') AND t.AD_Column_ID=570819 AND NOT EXISTS (SELECT 1 FROM AD_Column_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Column_ID=t.AD_Column_ID)\n+;\n+\n+-- 2020-05-25T08:11:46.128Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+/* DDL */  select update_Column_Translation_From_AD_Element(577736) \n+;\n+\n+-- 2020-05-25T08:11:58.930Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+/* DDL */ SELECT public.db_alter_table('DD_Order','ALTER TABLE public.DD_Order ADD COLUMN M_Warehouse_From_ID NUMERIC(10) DEFAULT 540008 NOT NULL')\n+;\n+\n+-- 2020-05-25T08:11:59.850Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+ALTER TABLE DD_Order ADD CONSTRAINT MWarehouseFrom_DDOrder FOREIGN KEY (M_Warehouse_From_ID) REFERENCES public.M_Warehouse DEFERRABLE INITIALLY DEFERRED\n+;\n+\n+-- 2020-05-25T08:13:04.894Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_Column (AD_Client_ID,AD_Column_ID,AD_Element_ID,AD_Org_ID,AD_Reference_ID,AD_Reference_Value_ID,AD_Table_ID,ColumnName,Created,CreatedBy,DDL_NoForeignKey,DefaultValue,EntityType,FacetFilterSeqNo,FieldLength,IsActive,IsAdvancedText,IsAllowLogging,IsAlwaysUpdateable,IsAutoApplyValidationRule,IsAutocomplete,IsCalculated,IsDimension,IsDLMPartitionBoundary,IsEncrypted,IsFacetFilter,IsForceIncludeInGeneratedModel,IsGenericZoomKeyColumn,IsGenericZoomOrigin,IsIdentifier,IsKey,IsLazyLoading,IsMandatory,IsParent,IsRangeFilter,IsSelectionColumn,IsShowFilterIncrementButtons,IsStaleable,IsSyncDatabase,IsTranslated,IsUpdateable,IsUseDocSequence,MaxFacetsToFetch,Name,ReadOnlyLogic,SelectionColumnSeqNo,SeqNo,Updated,UpdatedBy,Version) VALUES (0,570820,577737,0,30,540420,53037,'M_Warehouse_To_ID',TO_TIMESTAMP('2020-05-25 11:13:04','YYYY-MM-DD HH24:MI:SS'),100,'N','540005','EE01',0,10,'Y','N','Y','N','N','N','N','N','N','N','N','N','N','N','N','N','N','Y','N','N','N','N','N','N','N','Y','N',0,'Warehouse to','',0,0,TO_TIMESTAMP('2020-05-25 11:13:04','YYYY-MM-DD HH24:MI:SS'),100,0)\n+;\n+\n+-- 2020-05-25T08:13:04.897Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_Column_Trl (AD_Language,AD_Column_ID, Name, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language, t.AD_Column_ID, t.Name, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Column t WHERE l.IsActive='Y'AND (l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N') AND t.AD_Column_ID=570820 AND NOT EXISTS (SELECT 1 FROM AD_Column_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Column_ID=t.AD_Column_ID)\n+;\n+\n+-- 2020-05-25T08:13:04.899Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+/* DDL */  select update_Column_Translation_From_AD_Element(577737) \n+;\n+\n+-- 2020-05-25T08:13:29.659Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+/* DDL */ SELECT public.db_alter_table('DD_Order','ALTER TABLE public.DD_Order ADD COLUMN M_Warehouse_To_ID NUMERIC(10) DEFAULT 540005 NOT NULL')\n+;\n+\n+-- 2020-05-25T08:13:30.175Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+ALTER TABLE DD_Order ADD CONSTRAINT MWarehouseTo_DDOrder FOREIGN KEY (M_Warehouse_To_ID) REFERENCES public.M_Warehouse DEFERRABLE INITIALLY DEFERRED\n+;\n+\n+-- 2020-05-26T21:29:17.677Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_Field (AD_Client_ID,AD_Column_ID,AD_Field_ID,AD_Org_ID,AD_Tab_ID,ColumnDisplayLength,Created,CreatedBy,DisplayLength,EntityType,IncludedTabHeight,IsActive,IsDisplayed,IsDisplayedGrid,IsEncrypted,IsFieldOnly,IsHeading,IsReadOnly,IsSameLine,Name,SeqNo,SeqNoGrid,SortNo,SpanX,SpanY,Updated,UpdatedBy) VALUES (0,570819,613898,0,53055,0,TO_TIMESTAMP('2020-05-27 00:29:15','YYYY-MM-DD HH24:MI:SS'),100,0,'EE01',0,'Y','Y','Y','N','N','N','N','N','Warehouse from',450,440,0,1,1,TO_TIMESTAMP('2020-05-27 00:29:15','YYYY-MM-DD HH24:MI:SS'),100)\n+;\n+\n+-- 2020-05-26T21:29:18.309Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_Field_Trl (AD_Language,AD_Field_ID, Description,Help,Name, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language, t.AD_Field_ID, t.Description,t.Help,t.Name, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Field t WHERE l.IsActive='Y'AND (l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N') AND t.AD_Field_ID=613898 AND NOT EXISTS (SELECT 1 FROM AD_Field_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Field_ID=t.AD_Field_ID)\n+;\n+\n+-- 2020-05-26T21:29:18.409Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+/* DDL */  select update_FieldTranslation_From_AD_Name_Element(577736)\n+;\n+\n+-- 2020-05-26T21:29:18.484Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+DELETE FROM AD_Element_Link WHERE AD_Field_ID=613898\n+;\n+\n+-- 2020-05-26T21:29:18.533Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+/* DDL */ select AD_Element_Link_Create_Missing_Field(613898)\n+;\n+\n+-- 2020-05-26T21:29:59.153Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_Field (AD_Client_ID,AD_Column_ID,AD_Field_ID,AD_Org_ID,AD_Tab_ID,ColumnDisplayLength,Created,CreatedBy,DisplayLength,EntityType,IncludedTabHeight,IsActive,IsDisplayed,IsDisplayedGrid,IsEncrypted,IsFieldOnly,IsHeading,IsReadOnly,IsSameLine,Name,SeqNo,SeqNoGrid,SortNo,SpanX,SpanY,Updated,UpdatedBy) VALUES (0,570820,613899,0,53055,0,TO_TIMESTAMP('2020-05-27 00:29:58','YYYY-MM-DD HH24:MI:SS'),100,0,'EE01',0,'Y','Y','Y','N','N','N','N','N','Warehouse to',460,450,0,1,1,TO_TIMESTAMP('2020-05-27 00:29:58','YYYY-MM-DD HH24:MI:SS'),100)\n+;\n+\n+-- 2020-05-26T21:29:59.296Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_Field_Trl (AD_Language,AD_Field_ID, Description,Help,Name, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language, t.AD_Field_ID, t.Description,t.Help,t.Name, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Field t WHERE l.IsActive='Y'AND (l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N') AND t.AD_Field_ID=613899 AND NOT EXISTS (SELECT 1 FROM AD_Field_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Field_ID=t.AD_Field_ID)\n+;\n+\n+-- 2020-05-26T21:29:59.343Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+/* DDL */  select update_FieldTranslation_From_AD_Name_Element(577737)\n+;\n+\n+-- 2020-05-26T21:29:59.393Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+DELETE FROM AD_Element_Link WHERE AD_Field_ID=613899\n+;\n+\n+-- 2020-05-26T21:29:59.442Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+/* DDL */ select AD_Element_Link_Create_Missing_Field(613899)\n+;\n+\n+-- 2020-05-26T21:31:01.644Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_UI_Element (AD_Client_ID,AD_Field_ID,AD_Org_ID,AD_Tab_ID,AD_UI_ElementGroup_ID,AD_UI_Element_ID,AD_UI_ElementType,Created,CreatedBy,IsActive,IsAdvancedField,IsAllowFiltering,IsDisplayed,IsDisplayedGrid,IsDisplayed_SideList,IsMultiLine,MultiLine_LinesCount,Name,SeqNo,SeqNoGrid,SeqNo_SideList,Updated,UpdatedBy) VALUES (0,613898,0,53055,540423,569848,'F',TO_TIMESTAMP('2020-05-27 00:31:01','YYYY-MM-DD HH24:MI:SS'),100,'Y','Y','N','Y','N','N','N',0,'Warehouse from',420,0,0,TO_TIMESTAMP('2020-05-27 00:31:01','YYYY-MM-DD HH24:MI:SS'),100)\n+;\n+\n+-- 2020-05-26T21:31:24.090Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_UI_Element (AD_Client_ID,AD_Field_ID,AD_Org_ID,AD_Tab_ID,AD_UI_ElementGroup_ID,AD_UI_Element_ID,AD_UI_ElementType,Created,CreatedBy,IsActive,IsAdvancedField,IsAllowFiltering,IsDisplayed,IsDisplayedGrid,IsDisplayed_SideList,IsMultiLine,MultiLine_LinesCount,Name,SeqNo,SeqNoGrid,SeqNo_SideList,Updated,UpdatedBy) VALUES (0,613899,0,53055,540423,569849,'F',TO_TIMESTAMP('2020-05-27 00:31:23','YYYY-MM-DD HH24:MI:SS'),100,'Y','Y','N','Y','N','N','N',0,'Warehouse to',430,0,0,TO_TIMESTAMP('2020-05-27 00:31:23','YYYY-MM-DD HH24:MI:SS'),100)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c49a6301b8f35a793f8f294dffa501b4784147a7"}, "originalPosition": 128}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNDc0Mjc0", "url": "https://github.com/metasfresh/metasfresh/pull/6752#pullrequestreview-421474274", "createdAt": "2020-05-31T08:51:06Z", "commit": {"oid": "c49a6301b8f35a793f8f294dffa501b4784147a7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwODo1MTowNlrOGc3onA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwODo1MTowNlrOGc3onA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNDgyOA==", "bodyText": "pls introduce I_DD_OrderLine IDDOrderDAO.getLineById(int ddOrderLineId) and use it here.\nAvoid direct InterfaceWrapperHelper.load calls outside of repository/DAO.", "url": "https://github.com/metasfresh/metasfresh/pull/6752#discussion_r432924828", "createdAt": "2020-05-31T08:51:06Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/ddorder/process/WEBUI_DD_OrderLine_MoveSelected_HU.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.ddorder.process;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.handlingunits.ddorder.api.IHUDDOrderBL;\n+import de.metas.handlingunits.model.I_DD_OrderLine;\n+import de.metas.handlingunits.model.I_M_HU;\n+import de.metas.process.IProcessDefaultParameter;\n+import de.metas.process.IProcessDefaultParametersProvider;\n+import de.metas.process.IProcessPrecondition;\n+import de.metas.process.Param;\n+import de.metas.process.ProcessPreconditionsResolution;\n+import de.metas.ui.web.handlingunits.HUEditorRow;\n+import de.metas.ui.web.handlingunits.HUEditorView;\n+import de.metas.ui.web.handlingunits.WEBUI_HU_Constants;\n+import de.metas.ui.web.process.adprocess.ViewBasedProcessTemplate;\n+import de.metas.ui.web.view.IViewsRepository;\n+import de.metas.ui.web.view.ViewId;\n+import de.metas.ui.web.window.datatypes.DocumentIdsSelection;\n+import de.metas.util.Services;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.compiere.SpringContextHolder;\n+\n+public class WEBUI_DD_OrderLine_MoveSelected_HU extends ViewBasedProcessTemplate implements IProcessPrecondition, IProcessDefaultParametersProvider\n+{\n+\tprivate final IViewsRepository viewsRepository = SpringContextHolder.instance.getBean(IViewsRepository.class);\n+\tprivate final IHUDDOrderBL huDDOrderBL = Services.get(IHUDDOrderBL.class);\n+\n+\tprivate static final String PARAM_M_HU_ID = I_M_HU.COLUMNNAME_M_HU_ID;\n+\t@Param(parameterName = PARAM_M_HU_ID, mandatory = true)\n+\tprivate int mHuID;\n+\n+\tprivate static final String PARAM_DD_ORDER_LINE_ID = I_DD_OrderLine.COLUMNNAME_DD_OrderLine_ID;\n+\t@Param(parameterName = PARAM_DD_ORDER_LINE_ID, mandatory = true)\n+\tprivate int ddOrderLineId;\n+\n+\tprivate static final String PARAM_LOCATOR_TO_ID = I_DD_OrderLine.COLUMNNAME_M_LocatorTo_ID;\n+\t@Param(parameterName = PARAM_LOCATOR_TO_ID, mandatory = true)\n+\tprivate int paramLocatorToId;\n+\n+\n+\n+\tpublic ProcessPreconditionsResolution checkPreconditionsApplicable()\n+\t{\n+\t\tif (getSelectedRowIds().isEmpty())\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution.rejectBecauseNoSelection();\n+\t\t}\n+\t\telse if (getSelectedRowIds().isMoreThanOneDocumentId())\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution.rejectBecauseNotSingleSelection();\n+\t\t}\n+\t\telse if (huEditorWasNotOpenedFromADDOrderLine())\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution\n+\t\t\t\t\t.rejectWithInternalReason(\"The process should only be available when the HUEditor was opened from a DD_OrderLine window!\");\n+\t\t}\n+\t\telse if (selectedRowIsNotATopHU())\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution\n+\t\t\t\t\t.reject(msgBL.getTranslatableMsgText(WEBUI_HU_Constants.MSG_WEBUI_ONLY_TOP_LEVEL_HU));\n+\t\t}\n+\n+\t\treturn ProcessPreconditionsResolution.accept();\n+\t}\n+\n+\t@Override\n+\tprotected String doIt() throws Exception\n+\t{\n+\n+\t\tfinal I_DD_OrderLine selectedDDOrderLine = InterfaceWrapperHelper.load(ddOrderLineId, I_DD_OrderLine.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c49a6301b8f35a793f8f294dffa501b4784147a7"}, "originalPosition": 93}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNDc0Mzcw", "url": "https://github.com/metasfresh/metasfresh/pull/6752#pullrequestreview-421474370", "createdAt": "2020-05-31T08:52:48Z", "commit": {"oid": "c49a6301b8f35a793f8f294dffa501b4784147a7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwODo1Mjo0OVrOGc3pCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwODo1Mjo0OVrOGc3pCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNDkzOQ==", "bodyText": "use IDDOrderDAO.getLineById\n(see above)", "url": "https://github.com/metasfresh/metasfresh/pull/6752#discussion_r432924939", "createdAt": "2020-05-31T08:52:49Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/ddorder/process/WEBUI_DD_OrderLine_MoveSelected_HU.java", "diffHunk": "@@ -0,0 +1,166 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.ddorder.process;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.handlingunits.ddorder.api.IHUDDOrderBL;\n+import de.metas.handlingunits.model.I_DD_OrderLine;\n+import de.metas.handlingunits.model.I_M_HU;\n+import de.metas.process.IProcessDefaultParameter;\n+import de.metas.process.IProcessDefaultParametersProvider;\n+import de.metas.process.IProcessPrecondition;\n+import de.metas.process.Param;\n+import de.metas.process.ProcessPreconditionsResolution;\n+import de.metas.ui.web.handlingunits.HUEditorRow;\n+import de.metas.ui.web.handlingunits.HUEditorView;\n+import de.metas.ui.web.handlingunits.WEBUI_HU_Constants;\n+import de.metas.ui.web.process.adprocess.ViewBasedProcessTemplate;\n+import de.metas.ui.web.view.IViewsRepository;\n+import de.metas.ui.web.view.ViewId;\n+import de.metas.ui.web.window.datatypes.DocumentIdsSelection;\n+import de.metas.util.Services;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.compiere.SpringContextHolder;\n+\n+public class WEBUI_DD_OrderLine_MoveSelected_HU extends ViewBasedProcessTemplate implements IProcessPrecondition, IProcessDefaultParametersProvider\n+{\n+\tprivate final IViewsRepository viewsRepository = SpringContextHolder.instance.getBean(IViewsRepository.class);\n+\tprivate final IHUDDOrderBL huDDOrderBL = Services.get(IHUDDOrderBL.class);\n+\n+\tprivate static final String PARAM_M_HU_ID = I_M_HU.COLUMNNAME_M_HU_ID;\n+\t@Param(parameterName = PARAM_M_HU_ID, mandatory = true)\n+\tprivate int mHuID;\n+\n+\tprivate static final String PARAM_DD_ORDER_LINE_ID = I_DD_OrderLine.COLUMNNAME_DD_OrderLine_ID;\n+\t@Param(parameterName = PARAM_DD_ORDER_LINE_ID, mandatory = true)\n+\tprivate int ddOrderLineId;\n+\n+\tprivate static final String PARAM_LOCATOR_TO_ID = I_DD_OrderLine.COLUMNNAME_M_LocatorTo_ID;\n+\t@Param(parameterName = PARAM_LOCATOR_TO_ID, mandatory = true)\n+\tprivate int paramLocatorToId;\n+\n+\n+\n+\tpublic ProcessPreconditionsResolution checkPreconditionsApplicable()\n+\t{\n+\t\tif (getSelectedRowIds().isEmpty())\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution.rejectBecauseNoSelection();\n+\t\t}\n+\t\telse if (getSelectedRowIds().isMoreThanOneDocumentId())\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution.rejectBecauseNotSingleSelection();\n+\t\t}\n+\t\telse if (huEditorWasNotOpenedFromADDOrderLine())\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution\n+\t\t\t\t\t.rejectWithInternalReason(\"The process should only be available when the HUEditor was opened from a DD_OrderLine window!\");\n+\t\t}\n+\t\telse if (selectedRowIsNotATopHU())\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution\n+\t\t\t\t\t.reject(msgBL.getTranslatableMsgText(WEBUI_HU_Constants.MSG_WEBUI_ONLY_TOP_LEVEL_HU));\n+\t\t}\n+\n+\t\treturn ProcessPreconditionsResolution.accept();\n+\t}\n+\n+\t@Override\n+\tprotected String doIt() throws Exception\n+\t{\n+\n+\t\tfinal I_DD_OrderLine selectedDDOrderLine = InterfaceWrapperHelper.load(ddOrderLineId, I_DD_OrderLine.class);\n+\n+\t\tfinal I_M_HU huToMove = InterfaceWrapperHelper.load(mHuID, I_M_HU.class);\n+\n+\t\thuDDOrderBL.createMovements()\n+\t\t\t\t.setDDOrderLines(ImmutableList.of(selectedDDOrderLine))\n+\t\t\t\t.setLocatorToIdOverride(paramLocatorToId)\n+\t\t\t\t.setDoDirectMovements(true)\n+\t\t\t\t.setFailIfCannotAllocate(true)\n+\t\t\t\t.allocateHU(huToMove)\n+\t\t\t\t.processWithinOwnTrx();\n+\n+\t\treturn MSG_OK;\n+\t}\n+\n+\tprivate boolean huEditorWasNotOpenedFromADDOrderLine()\n+\t{\n+\t\tfinal ViewId parentViewId = getView().getParentViewId();\n+\n+\t\tif (parentViewId == null || getView().getParentRowId() == null)\n+\t\t{\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\tfinal String parentViewTableName = viewsRepository.getView(parentViewId).getTableNameOrNull();\n+\n+\t\treturn !I_DD_OrderLine.Table_Name.equals(parentViewTableName);\n+\t}\n+\n+\tprivate boolean selectedRowIsNotATopHU()\n+\t{\n+\t\treturn getView(HUEditorView.class)\n+\t\t\t\t.streamByIds(getSelectedRowIds())\n+\t\t\t\t.noneMatch(HUEditorRow::isTopLevel);\n+\t}\n+\n+\t@Override\n+\tpublic Object getParameterDefaultValue(final IProcessDefaultParameter parameter)\n+\t{\n+\t\tfinal I_DD_OrderLine ddOrderLine = getSelectedDDOrderLine();\n+\n+\t\tfinal String parameterName = parameter.getColumnName();\n+\t\tif (PARAM_M_HU_ID.equals(parameterName))\n+\t\t{\n+\t\t\treturn getRecord_ID();\n+\t\t}\n+\t\telse if (PARAM_DD_ORDER_LINE_ID.equals(parameterName))\n+\t\t{\n+\t\t\treturn ddOrderLine.getDD_OrderLine_ID();\n+\t\t}\n+\t\telse if (PARAM_LOCATOR_TO_ID.equals(parameterName))\n+\t\t{\n+\t\t\treturn ddOrderLine.getM_LocatorTo_ID();\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\treturn IProcessDefaultParametersProvider.DEFAULT_VALUE_NOTAVAILABLE;\n+\t\t}\n+\t}\n+\n+\tprivate I_DD_OrderLine getSelectedDDOrderLine()\n+\t{\n+\t\tfinal ViewId parentViewId = getView().getParentViewId();\n+\t\tfinal DocumentIdsSelection selectedParentRow = DocumentIdsSelection.of(ImmutableList.of(getView().getParentRowId()));\n+\n+\t\tfinal int selectedOrderLineId = viewsRepository.getView(parentViewId)\n+\t\t\t\t.streamByIds(selectedParentRow)\n+\t\t\t\t.findFirst()\n+\t\t\t\t.orElseThrow(() -> new AdempiereException(\"No DD_OrderLine was selected!\"))\n+\t\t\t\t.getFieldValueAsInt(I_DD_OrderLine.COLUMNNAME_DD_OrderLine_ID, -1);\n+\n+\t\treturn InterfaceWrapperHelper.load(selectedOrderLineId, I_DD_OrderLine.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c49a6301b8f35a793f8f294dffa501b4784147a7"}, "originalPosition": 164}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNDc0NDc4", "url": "https://github.com/metasfresh/metasfresh/pull/6752#pullrequestreview-421474478", "createdAt": "2020-05-31T08:54:17Z", "commit": {"oid": "c49a6301b8f35a793f8f294dffa501b4784147a7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwODo1NDoxN1rOGc3pfA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwODo1NDoxN1rOGc3pfA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNTA1Mg==", "bodyText": "createHUEditorView would be  better than openHUEditor because it's not opening the view.", "url": "https://github.com/metasfresh/metasfresh/pull/6752#discussion_r432925052", "createdAt": "2020-05-31T08:54:17Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/ddorder/process/WEBUI_MoveHUs_HUEditor_Launcher.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.ddorder.process;\n+\n+import de.metas.handlingunits.IHUQueryBuilder;\n+import de.metas.handlingunits.IHandlingUnitsDAO;\n+import de.metas.handlingunits.model.I_DD_OrderLine;\n+import de.metas.handlingunits.model.X_M_HU;\n+import de.metas.process.IProcessPrecondition;\n+import de.metas.process.ProcessExecutionResult;\n+import de.metas.process.ProcessPreconditionsResolution;\n+import de.metas.product.ProductId;\n+import de.metas.ui.web.handlingunits.HUIdsFilterHelper;\n+import de.metas.ui.web.process.adprocess.ViewBasedProcessTemplate;\n+import de.metas.ui.web.view.CreateViewRequest;\n+import de.metas.ui.web.view.IView;\n+import de.metas.ui.web.view.IViewsRepository;\n+import de.metas.ui.web.view.json.JSONViewDataType;\n+import de.metas.util.Services;\n+import org.compiere.SpringContextHolder;\n+\n+import static de.metas.ui.web.ddorder.HUsToMoveViewFactory.WINDOW_ID;\n+import static de.metas.ui.web.ddorder.HUsToMoveViewFactory.WINDOW_ID_STRING;\n+\n+public class WEBUI_MoveHUs_HUEditor_Launcher extends ViewBasedProcessTemplate implements IProcessPrecondition\n+{\n+\n+\tpublic ProcessPreconditionsResolution checkPreconditionsApplicable()\n+\t{\n+\t\tif (getSelectedRowIds().isEmpty())\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution.rejectBecauseNoSelection();\n+\t\t}\n+\t\telse if (getSelectedRowIds().isMoreThanOneDocumentId())\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution.rejectBecauseNotSingleSelection();\n+\t\t}\n+\n+\t\treturn ProcessPreconditionsResolution.accept();\n+\t}\n+\n+\tprivate final IViewsRepository viewsRepo = SpringContextHolder.instance.getBean(IViewsRepository.class);\n+\n+\t@Override protected String doIt() throws Exception\n+\t{\n+\t\tfinal I_DD_OrderLine ddOrderLine = getRecord(I_DD_OrderLine.class);\n+\n+\t\tfinal IView husToMove = openHUEditor(ddOrderLine);\n+\n+\t\tgetResult().setWebuiViewToOpen(ProcessExecutionResult.WebuiViewToOpen.builder()\n+\t\t\t\t.viewId(husToMove.getViewId().getViewId())\n+\t\t\t\t.profileId(WINDOW_ID_STRING)\n+\t\t\t\t.target(ProcessExecutionResult.ViewOpenTarget.ModalOverlay)\n+\t\t\t\t.build());\n+\n+\t\treturn MSG_OK;\n+\t}\n+\n+\tprivate IView openHUEditor(final I_DD_OrderLine orderLine)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c49a6301b8f35a793f8f294dffa501b4784147a7"}, "originalPosition": 79}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNDc0NTI2", "url": "https://github.com/metasfresh/metasfresh/pull/6752#pullrequestreview-421474526", "createdAt": "2020-05-31T08:54:54Z", "commit": {"oid": "c49a6301b8f35a793f8f294dffa501b4784147a7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwODo1NDo1NFrOGc3ptA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwODo1NDo1NFrOGc3ptA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNTEwOA==", "bodyText": "use IDDOrderDAO.getLineById", "url": "https://github.com/metasfresh/metasfresh/pull/6752#discussion_r432925108", "createdAt": "2020-05-31T08:54:54Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/ddorder/process/WEBUI_MoveHUs_HUEditor_Launcher.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.ddorder.process;\n+\n+import de.metas.handlingunits.IHUQueryBuilder;\n+import de.metas.handlingunits.IHandlingUnitsDAO;\n+import de.metas.handlingunits.model.I_DD_OrderLine;\n+import de.metas.handlingunits.model.X_M_HU;\n+import de.metas.process.IProcessPrecondition;\n+import de.metas.process.ProcessExecutionResult;\n+import de.metas.process.ProcessPreconditionsResolution;\n+import de.metas.product.ProductId;\n+import de.metas.ui.web.handlingunits.HUIdsFilterHelper;\n+import de.metas.ui.web.process.adprocess.ViewBasedProcessTemplate;\n+import de.metas.ui.web.view.CreateViewRequest;\n+import de.metas.ui.web.view.IView;\n+import de.metas.ui.web.view.IViewsRepository;\n+import de.metas.ui.web.view.json.JSONViewDataType;\n+import de.metas.util.Services;\n+import org.compiere.SpringContextHolder;\n+\n+import static de.metas.ui.web.ddorder.HUsToMoveViewFactory.WINDOW_ID;\n+import static de.metas.ui.web.ddorder.HUsToMoveViewFactory.WINDOW_ID_STRING;\n+\n+public class WEBUI_MoveHUs_HUEditor_Launcher extends ViewBasedProcessTemplate implements IProcessPrecondition\n+{\n+\n+\tpublic ProcessPreconditionsResolution checkPreconditionsApplicable()\n+\t{\n+\t\tif (getSelectedRowIds().isEmpty())\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution.rejectBecauseNoSelection();\n+\t\t}\n+\t\telse if (getSelectedRowIds().isMoreThanOneDocumentId())\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution.rejectBecauseNotSingleSelection();\n+\t\t}\n+\n+\t\treturn ProcessPreconditionsResolution.accept();\n+\t}\n+\n+\tprivate final IViewsRepository viewsRepo = SpringContextHolder.instance.getBean(IViewsRepository.class);\n+\n+\t@Override protected String doIt() throws Exception\n+\t{\n+\t\tfinal I_DD_OrderLine ddOrderLine = getRecord(I_DD_OrderLine.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c49a6301b8f35a793f8f294dffa501b4784147a7"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNDc0NjAx", "url": "https://github.com/metasfresh/metasfresh/pull/6752#pullrequestreview-421474601", "createdAt": "2020-05-31T08:55:51Z", "commit": {"oid": "c49a6301b8f35a793f8f294dffa501b4784147a7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwODo1NTo1MlrOGc3qFQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwODo1NTo1MlrOGc3qFQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNTIwNQ==", "bodyText": "extract Services.get(IHandlingUnitsDAO.class) as a class field (i.e. handlingUnitsDAO)", "url": "https://github.com/metasfresh/metasfresh/pull/6752#discussion_r432925205", "createdAt": "2020-05-31T08:55:52Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/ddorder/process/WEBUI_MoveHUs_HUEditor_Launcher.java", "diffHunk": "@@ -0,0 +1,102 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.ddorder.process;\n+\n+import de.metas.handlingunits.IHUQueryBuilder;\n+import de.metas.handlingunits.IHandlingUnitsDAO;\n+import de.metas.handlingunits.model.I_DD_OrderLine;\n+import de.metas.handlingunits.model.X_M_HU;\n+import de.metas.process.IProcessPrecondition;\n+import de.metas.process.ProcessExecutionResult;\n+import de.metas.process.ProcessPreconditionsResolution;\n+import de.metas.product.ProductId;\n+import de.metas.ui.web.handlingunits.HUIdsFilterHelper;\n+import de.metas.ui.web.process.adprocess.ViewBasedProcessTemplate;\n+import de.metas.ui.web.view.CreateViewRequest;\n+import de.metas.ui.web.view.IView;\n+import de.metas.ui.web.view.IViewsRepository;\n+import de.metas.ui.web.view.json.JSONViewDataType;\n+import de.metas.util.Services;\n+import org.compiere.SpringContextHolder;\n+\n+import static de.metas.ui.web.ddorder.HUsToMoveViewFactory.WINDOW_ID;\n+import static de.metas.ui.web.ddorder.HUsToMoveViewFactory.WINDOW_ID_STRING;\n+\n+public class WEBUI_MoveHUs_HUEditor_Launcher extends ViewBasedProcessTemplate implements IProcessPrecondition\n+{\n+\n+\tpublic ProcessPreconditionsResolution checkPreconditionsApplicable()\n+\t{\n+\t\tif (getSelectedRowIds().isEmpty())\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution.rejectBecauseNoSelection();\n+\t\t}\n+\t\telse if (getSelectedRowIds().isMoreThanOneDocumentId())\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution.rejectBecauseNotSingleSelection();\n+\t\t}\n+\n+\t\treturn ProcessPreconditionsResolution.accept();\n+\t}\n+\n+\tprivate final IViewsRepository viewsRepo = SpringContextHolder.instance.getBean(IViewsRepository.class);\n+\n+\t@Override protected String doIt() throws Exception\n+\t{\n+\t\tfinal I_DD_OrderLine ddOrderLine = getRecord(I_DD_OrderLine.class);\n+\n+\t\tfinal IView husToMove = openHUEditor(ddOrderLine);\n+\n+\t\tgetResult().setWebuiViewToOpen(ProcessExecutionResult.WebuiViewToOpen.builder()\n+\t\t\t\t.viewId(husToMove.getViewId().getViewId())\n+\t\t\t\t.profileId(WINDOW_ID_STRING)\n+\t\t\t\t.target(ProcessExecutionResult.ViewOpenTarget.ModalOverlay)\n+\t\t\t\t.build());\n+\n+\t\treturn MSG_OK;\n+\t}\n+\n+\tprivate IView openHUEditor(final I_DD_OrderLine orderLine)\n+\t{\n+\t\tfinal IHUQueryBuilder huQuery = createHUQuery(orderLine);\n+\n+\t\tfinal CreateViewRequest request = CreateViewRequest.builder(WINDOW_ID, JSONViewDataType.includedView)\n+\t\t\t\t.addStickyFilters(HUIdsFilterHelper.createFilter(huQuery))\n+\t\t\t\t.setParentViewId(getView().getViewId())\n+\t\t\t\t.setParentRowId(getSelectedRowIds().getSingleDocumentId())\n+\t\t\t\t.build();\n+\n+\t\treturn viewsRepo.createView(request);\n+\t}\n+\n+\tprivate IHUQueryBuilder createHUQuery(final I_DD_OrderLine orderLine)\n+\t{\n+\t\treturn Services.get(IHandlingUnitsDAO.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c49a6301b8f35a793f8f294dffa501b4784147a7"}, "originalPosition": 94}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNDc0Njkz", "url": "https://github.com/metasfresh/metasfresh/pull/6752#pullrequestreview-421474693", "createdAt": "2020-05-31T08:57:15Z", "commit": {"oid": "c49a6301b8f35a793f8f294dffa501b4784147a7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwODo1NzoxNVrOGc3qaw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwODo1NzoxNVrOGc3qaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNTI5MQ==", "bodyText": "use HUPIItemProductId instead of int.", "url": "https://github.com/metasfresh/metasfresh/pull/6752#discussion_r432925291", "createdAt": "2020-05-31T08:57:15Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/quickinput/ddorderline/DDOrderLineQuickInputDescriptorFactory.java", "diffHunk": "@@ -0,0 +1,152 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.quickinput.ddorderline;\n+\n+import com.google.common.collect.ImmutableSet;\n+import de.metas.i18n.IMsgBL;\n+import de.metas.lang.SOTrx;\n+import de.metas.ui.web.quickinput.IQuickInputDescriptorFactory;\n+import de.metas.ui.web.quickinput.QuickInputConstants;\n+import de.metas.ui.web.quickinput.QuickInputDescriptor;\n+import de.metas.ui.web.quickinput.QuickInputLayoutDescriptor;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import de.metas.ui.web.window.datatypes.DocumentType;\n+import de.metas.ui.web.window.datatypes.LookupValue;\n+import de.metas.ui.web.window.descriptor.DetailId;\n+import de.metas.ui.web.window.descriptor.DocumentEntityDescriptor;\n+import de.metas.ui.web.window.descriptor.DocumentFieldDescriptor;\n+import de.metas.ui.web.window.descriptor.DocumentFieldWidgetType;\n+import de.metas.ui.web.window.descriptor.sql.SqlLookupDescriptor;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.expression.api.ConstantLogicExpression;\n+import org.compiere.util.DisplayType;\n+import org.eevolution.model.I_DD_OrderLine;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.Optional;\n+import java.util.Set;\n+\n+@Component\n+public class DDOrderLineQuickInputDescriptorFactory implements IQuickInputDescriptorFactory\n+{\n+\tprivate final IMsgBL msgBL = Services.get(IMsgBL.class);\n+\n+\tprivate final DDOrderLineQuickInputCallout ddOrderLineQuickInputCallout;\n+\n+\tprivate static final int M_PRODUCT_STOCKED_AD_REFERENCE_ID = 171;\n+\tprivate static final int DD_OrderLine_M_HU_PI_Item_Product = 540299;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c49a6301b8f35a793f8f294dffa501b4784147a7"}, "originalPosition": 58}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNDc0OTc4", "url": "https://github.com/metasfresh/metasfresh/pull/6752#pullrequestreview-421474978", "createdAt": "2020-05-31T09:00:47Z", "commit": {"oid": "c49a6301b8f35a793f8f294dffa501b4784147a7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwOTowMDo0N1rOGc3rpA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwOTowMDo0N1rOGc3rpA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNTYwNA==", "bodyText": "use one of IProductBL.getStockingUOM..  methods", "url": "https://github.com/metasfresh/metasfresh/pull/6752#discussion_r432925604", "createdAt": "2020-05-31T09:00:47Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/quickinput/ddorderline/DDOrderLineQuickInputProcessor.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.quickinput.ddorderline;\n+\n+import com.google.common.collect.ImmutableSet;\n+import de.metas.adempiere.gui.search.IHUPackingAware;\n+import de.metas.adempiere.gui.search.IHUPackingAwareBL;\n+import de.metas.adempiere.gui.search.impl.DDOrderLineHUPackingAware;\n+import de.metas.handlingunits.model.I_DD_OrderLine;\n+import de.metas.product.ProductId;\n+import de.metas.ui.web.quickinput.IQuickInputProcessor;\n+import de.metas.ui.web.quickinput.QuickInput;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.adempiere.warehouse.LocatorId;\n+import org.adempiere.warehouse.WarehouseId;\n+import org.adempiere.warehouse.api.IWarehouseBL;\n+import org.eevolution.model.I_DD_Order;\n+\n+import java.math.BigDecimal;\n+import java.util.Set;\n+\n+public class DDOrderLineQuickInputProcessor implements IQuickInputProcessor\n+{\n+\tprivate final IWarehouseBL warehouseBL = Services.get(IWarehouseBL.class);\n+\tprivate final IHUPackingAwareBL huPackingAwareBL = Services.get(IHUPackingAwareBL .class);\n+\n+\t@Override\n+\tpublic Set<DocumentId> process(final QuickInput quickInput)\n+\t{\n+\t\tfinal IDDOrderLineQuickInput ddOrderQuickInput = quickInput.getQuickInputDocumentAs(IDDOrderLineQuickInput.class);\n+\n+\t\tfinal ProductId productId = ProductId.ofRepoId(ddOrderQuickInput.getM_Product_ID());\n+\t\tfinal int mHUPIProductID = ddOrderQuickInput.getM_HU_PI_Item_Product_ID();\n+\t\tfinal BigDecimal qty = ddOrderQuickInput.getQty();\n+\n+\t\tfinal I_DD_Order ddOrder = quickInput.getRootDocumentAs(I_DD_Order.class);\n+\t\tfinal I_DD_OrderLine ddOrderLine = InterfaceWrapperHelper.newInstance(I_DD_OrderLine.class, ddOrder);\n+\t\tddOrderLine.setIsInvoiced(false);\n+\t\tddOrderLine.setDD_Order_ID(ddOrder.getDD_Order_ID());\n+\n+\t\tddOrderLine.setM_Product_ID(productId.getRepoId());\n+\t\tddOrderLine.setC_UOM_ID(ddOrderQuickInput.getM_Product().getC_UOM_ID());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c49a6301b8f35a793f8f294dffa501b4784147a7"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNDc1MDI4", "url": "https://github.com/metasfresh/metasfresh/pull/6752#pullrequestreview-421475028", "createdAt": "2020-05-31T09:01:25Z", "commit": {"oid": "c49a6301b8f35a793f8f294dffa501b4784147a7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwOTowMToyNVrOGc3r1Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwOTowMToyNVrOGc3r1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNTY1Mw==", "bodyText": "use HUPIItemProductId instead of int", "url": "https://github.com/metasfresh/metasfresh/pull/6752#discussion_r432925653", "createdAt": "2020-05-31T09:01:25Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/quickinput/ddorderline/DDOrderLineQuickInputProcessor.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.quickinput.ddorderline;\n+\n+import com.google.common.collect.ImmutableSet;\n+import de.metas.adempiere.gui.search.IHUPackingAware;\n+import de.metas.adempiere.gui.search.IHUPackingAwareBL;\n+import de.metas.adempiere.gui.search.impl.DDOrderLineHUPackingAware;\n+import de.metas.handlingunits.model.I_DD_OrderLine;\n+import de.metas.product.ProductId;\n+import de.metas.ui.web.quickinput.IQuickInputProcessor;\n+import de.metas.ui.web.quickinput.QuickInput;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.adempiere.warehouse.LocatorId;\n+import org.adempiere.warehouse.WarehouseId;\n+import org.adempiere.warehouse.api.IWarehouseBL;\n+import org.eevolution.model.I_DD_Order;\n+\n+import java.math.BigDecimal;\n+import java.util.Set;\n+\n+public class DDOrderLineQuickInputProcessor implements IQuickInputProcessor\n+{\n+\tprivate final IWarehouseBL warehouseBL = Services.get(IWarehouseBL.class);\n+\tprivate final IHUPackingAwareBL huPackingAwareBL = Services.get(IHUPackingAwareBL .class);\n+\n+\t@Override\n+\tpublic Set<DocumentId> process(final QuickInput quickInput)\n+\t{\n+\t\tfinal IDDOrderLineQuickInput ddOrderQuickInput = quickInput.getQuickInputDocumentAs(IDDOrderLineQuickInput.class);\n+\n+\t\tfinal ProductId productId = ProductId.ofRepoId(ddOrderQuickInput.getM_Product_ID());\n+\t\tfinal int mHUPIProductID = ddOrderQuickInput.getM_HU_PI_Item_Product_ID();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c49a6301b8f35a793f8f294dffa501b4784147a7"}, "originalPosition": 57}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNDc1MjU1", "url": "https://github.com/metasfresh/metasfresh/pull/6752#pullrequestreview-421475255", "createdAt": "2020-05-31T09:04:44Z", "commit": {"oid": "c49a6301b8f35a793f8f294dffa501b4784147a7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwOTowNDo0NVrOGc3stw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwOTowNDo0NVrOGc3stw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNTg3OQ==", "bodyText": "pls consider extracting the logic from this method and introduce\nint IDDOrderBL.addLine(DDOrderLineCreateRequest request)\nwhich basically creates the dd order line and returns the DD_OrderLine_ID.\nIdeally, DDOrderLineQuickInputProcessor shall contain glue code.... as much as possbile.", "url": "https://github.com/metasfresh/metasfresh/pull/6752#discussion_r432925879", "createdAt": "2020-05-31T09:04:45Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/quickinput/ddorderline/DDOrderLineQuickInputProcessor.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.quickinput.ddorderline;\n+\n+import com.google.common.collect.ImmutableSet;\n+import de.metas.adempiere.gui.search.IHUPackingAware;\n+import de.metas.adempiere.gui.search.IHUPackingAwareBL;\n+import de.metas.adempiere.gui.search.impl.DDOrderLineHUPackingAware;\n+import de.metas.handlingunits.model.I_DD_OrderLine;\n+import de.metas.product.ProductId;\n+import de.metas.ui.web.quickinput.IQuickInputProcessor;\n+import de.metas.ui.web.quickinput.QuickInput;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.adempiere.warehouse.LocatorId;\n+import org.adempiere.warehouse.WarehouseId;\n+import org.adempiere.warehouse.api.IWarehouseBL;\n+import org.eevolution.model.I_DD_Order;\n+\n+import java.math.BigDecimal;\n+import java.util.Set;\n+\n+public class DDOrderLineQuickInputProcessor implements IQuickInputProcessor\n+{\n+\tprivate final IWarehouseBL warehouseBL = Services.get(IWarehouseBL.class);\n+\tprivate final IHUPackingAwareBL huPackingAwareBL = Services.get(IHUPackingAwareBL .class);\n+\n+\t@Override\n+\tpublic Set<DocumentId> process(final QuickInput quickInput)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c49a6301b8f35a793f8f294dffa501b4784147a7"}, "originalPosition": 52}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNDc1NDE2", "url": "https://github.com/metasfresh/metasfresh/pull/6752#pullrequestreview-421475416", "createdAt": "2020-05-31T09:06:55Z", "commit": {"oid": "c49a6301b8f35a793f8f294dffa501b4784147a7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwOTowNjo1NVrOGc3taQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwOTowNjo1NVrOGc3taQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNjA1Nw==", "bodyText": "this method is pointless because warehouseBL.getDefaultLocatorId(warehouseId) never returns null.\nbetter, let's annotate warehouseBL.getDefaultLocatorId(warehouseId) with @NonNull\nsee org.adempiere.warehouse.api.impl.WarehouseBL.getDefaultLocatorId(WarehouseId) which is creating the locator if missing.", "url": "https://github.com/metasfresh/metasfresh/pull/6752#discussion_r432926057", "createdAt": "2020-05-31T09:06:55Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/quickinput/ddorderline/DDOrderLineQuickInputProcessor.java", "diffHunk": "@@ -0,0 +1,110 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.quickinput.ddorderline;\n+\n+import com.google.common.collect.ImmutableSet;\n+import de.metas.adempiere.gui.search.IHUPackingAware;\n+import de.metas.adempiere.gui.search.IHUPackingAwareBL;\n+import de.metas.adempiere.gui.search.impl.DDOrderLineHUPackingAware;\n+import de.metas.handlingunits.model.I_DD_OrderLine;\n+import de.metas.product.ProductId;\n+import de.metas.ui.web.quickinput.IQuickInputProcessor;\n+import de.metas.ui.web.quickinput.QuickInput;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.adempiere.warehouse.LocatorId;\n+import org.adempiere.warehouse.WarehouseId;\n+import org.adempiere.warehouse.api.IWarehouseBL;\n+import org.eevolution.model.I_DD_Order;\n+\n+import java.math.BigDecimal;\n+import java.util.Set;\n+\n+public class DDOrderLineQuickInputProcessor implements IQuickInputProcessor\n+{\n+\tprivate final IWarehouseBL warehouseBL = Services.get(IWarehouseBL.class);\n+\tprivate final IHUPackingAwareBL huPackingAwareBL = Services.get(IHUPackingAwareBL .class);\n+\n+\t@Override\n+\tpublic Set<DocumentId> process(final QuickInput quickInput)\n+\t{\n+\t\tfinal IDDOrderLineQuickInput ddOrderQuickInput = quickInput.getQuickInputDocumentAs(IDDOrderLineQuickInput.class);\n+\n+\t\tfinal ProductId productId = ProductId.ofRepoId(ddOrderQuickInput.getM_Product_ID());\n+\t\tfinal int mHUPIProductID = ddOrderQuickInput.getM_HU_PI_Item_Product_ID();\n+\t\tfinal BigDecimal qty = ddOrderQuickInput.getQty();\n+\n+\t\tfinal I_DD_Order ddOrder = quickInput.getRootDocumentAs(I_DD_Order.class);\n+\t\tfinal I_DD_OrderLine ddOrderLine = InterfaceWrapperHelper.newInstance(I_DD_OrderLine.class, ddOrder);\n+\t\tddOrderLine.setIsInvoiced(false);\n+\t\tddOrderLine.setDD_Order_ID(ddOrder.getDD_Order_ID());\n+\n+\t\tddOrderLine.setM_Product_ID(productId.getRepoId());\n+\t\tddOrderLine.setC_UOM_ID(ddOrderQuickInput.getM_Product().getC_UOM_ID());\n+\n+\t\tfinal WarehouseId warehouseIdFrom = WarehouseId.ofRepoId(ddOrder.getM_Warehouse_From_ID());\n+\t\tfinal LocatorId locatorFromId = getDefaultLocatorID(warehouseIdFrom, \"DD_Order.M_Warehouse_From_ID\");\n+\t\tddOrderLine.setM_Locator_ID(locatorFromId.getRepoId());\n+\n+\t\tfinal WarehouseId warehouseToId = WarehouseId.ofRepoId(ddOrder.getM_Warehouse_To_ID());\n+\t\tfinal LocatorId locatorToId = getDefaultLocatorID(warehouseToId, \"DD_Order.M_Warehouse_To_ID\");\n+\t\tddOrderLine.setM_LocatorTo_ID(locatorToId.getRepoId());\n+\n+\t\tif (mHUPIProductID > 0)\n+\t\t{\n+\t\t\tddOrderLine.setM_HU_PI_Item_Product_ID(mHUPIProductID);\n+\t\t\tddOrderLine.setQtyEnteredTU(qty);\n+\n+\t\t\tfinal IHUPackingAware packingAware = new DDOrderLineHUPackingAware(ddOrderLine);\n+\n+\t\t\thuPackingAwareBL.setQtyCUFromQtyTU(packingAware, qty.intValue());\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\tddOrderLine.setQtyEntered(qty);\n+\t\t}\n+\n+\t\tInterfaceWrapperHelper.saveRecord(ddOrderLine);\n+\n+\t\tfinal DocumentId documentId = DocumentId.of(ddOrderLine.getDD_OrderLine_ID());\n+\t\treturn ImmutableSet.of(documentId);\n+\t}\n+\n+\t@NonNull\n+\tprivate LocatorId getDefaultLocatorID(@NonNull final WarehouseId warehouseId, @NonNull final String warehouseIDColumn)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c49a6301b8f35a793f8f294dffa501b4784147a7"}, "originalPosition": 97}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNDc1NTY2", "url": "https://github.com/metasfresh/metasfresh/pull/6752#pullrequestreview-421475566", "createdAt": "2020-05-31T09:08:49Z", "commit": {"oid": "c49a6301b8f35a793f8f294dffa501b4784147a7"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwOTowODo1MFrOGc3t9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQwOTowODo1MFrOGc3t9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjkyNjE5Nw==", "bodyText": "who is M_Wareohuse_ID=540005?\nCan we avoid hardcoding it?", "url": "https://github.com/metasfresh/metasfresh/pull/6752#discussion_r432926197", "createdAt": "2020-05-31T09:08:50Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.handlingunits.base/src/main/sql/postgresql/system/5559900_sys_gh6713_add_warehouse_from_and_to_on_DD_Order.sql", "diffHunk": "@@ -0,0 +1,130 @@\n+-- 2020-05-25T08:07:21.440Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_Element (AD_Client_ID,AD_Element_ID,AD_Org_ID,ColumnName,Created,CreatedBy,EntityType,IsActive,Name,PrintName,Updated,UpdatedBy) VALUES (0,577736,0,'M_Warehouse_From_ID',TO_TIMESTAMP('2020-05-25 11:07:21','YYYY-MM-DD HH24:MI:SS'),100,'D','Y','Warehouse from','Warehouse from',TO_TIMESTAMP('2020-05-25 11:07:21','YYYY-MM-DD HH24:MI:SS'),100)\n+;\n+\n+-- 2020-05-25T08:07:21.459Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_Element_Trl (AD_Language,AD_Element_ID, CommitWarning,Description,Help,Name,PO_Description,PO_Help,PO_Name,PO_PrintName,PrintName,WEBUI_NameBrowse,WEBUI_NameNew,WEBUI_NameNewBreadcrumb, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language, t.AD_Element_ID, t.CommitWarning,t.Description,t.Help,t.Name,t.PO_Description,t.PO_Help,t.PO_Name,t.PO_PrintName,t.PrintName,t.WEBUI_NameBrowse,t.WEBUI_NameNew,t.WEBUI_NameNewBreadcrumb, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Element t WHERE l.IsActive='Y'AND (l.IsSystemLanguage='Y' OR l.IsBaseLanguage='Y') AND t.AD_Element_ID=577736 AND NOT EXISTS (SELECT 1 FROM AD_Element_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Element_ID=t.AD_Element_ID)\n+;\n+\n+-- 2020-05-25T08:09:58.846Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_Element (AD_Client_ID,AD_Element_ID,AD_Org_ID,ColumnName,Created,CreatedBy,EntityType,IsActive,Name,PrintName,Updated,UpdatedBy) VALUES (0,577737,0,'M_Warehouse_To_ID',TO_TIMESTAMP('2020-05-25 11:09:58','YYYY-MM-DD HH24:MI:SS'),100,'D','Y','Warehouse to','Warehouse to',TO_TIMESTAMP('2020-05-25 11:09:58','YYYY-MM-DD HH24:MI:SS'),100)\n+;\n+\n+-- 2020-05-25T08:09:58.847Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_Element_Trl (AD_Language,AD_Element_ID, CommitWarning,Description,Help,Name,PO_Description,PO_Help,PO_Name,PO_PrintName,PrintName,WEBUI_NameBrowse,WEBUI_NameNew,WEBUI_NameNewBreadcrumb, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language, t.AD_Element_ID, t.CommitWarning,t.Description,t.Help,t.Name,t.PO_Description,t.PO_Help,t.PO_Name,t.PO_PrintName,t.PrintName,t.WEBUI_NameBrowse,t.WEBUI_NameNew,t.WEBUI_NameNewBreadcrumb, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Element t WHERE l.IsActive='Y'AND (l.IsSystemLanguage='Y' OR l.IsBaseLanguage='Y') AND t.AD_Element_ID=577737 AND NOT EXISTS (SELECT 1 FROM AD_Element_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Element_ID=t.AD_Element_ID)\n+;\n+\n+-- 2020-05-25T08:11:45.967Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_Column (AD_Client_ID,AD_Column_ID,AD_Element_ID,AD_Org_ID,AD_Reference_ID,AD_Reference_Value_ID,AD_Table_ID,ColumnName,Created,CreatedBy,DDL_NoForeignKey,DefaultValue,EntityType,FacetFilterSeqNo,FieldLength,IsActive,IsAdvancedText,IsAllowLogging,IsAlwaysUpdateable,IsAutoApplyValidationRule,IsAutocomplete,IsCalculated,IsDimension,IsDLMPartitionBoundary,IsEncrypted,IsFacetFilter,IsForceIncludeInGeneratedModel,IsGenericZoomKeyColumn,IsGenericZoomOrigin,IsIdentifier,IsKey,IsLazyLoading,IsMandatory,IsParent,IsRangeFilter,IsSelectionColumn,IsShowFilterIncrementButtons,IsStaleable,IsSyncDatabase,IsTranslated,IsUpdateable,IsUseDocSequence,MaxFacetsToFetch,Name,SelectionColumnSeqNo,SeqNo,Updated,UpdatedBy,Version) VALUES (0,570819,577736,0,30,540420,53037,'M_Warehouse_From_ID',TO_TIMESTAMP('2020-05-25 11:11:45','YYYY-MM-DD HH24:MI:SS'),100,'N','540008','EE01',0,10,'Y','N','Y','N','N','N','N','N','N','N','N','N','N','N','N','N','N','Y','N','N','N','N','N','N','N','Y','N',0,'Warehouse from',0,0,TO_TIMESTAMP('2020-05-25 11:11:45','YYYY-MM-DD HH24:MI:SS'),100,0)\n+;\n+\n+-- 2020-05-25T08:11:45.979Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_Column_Trl (AD_Language,AD_Column_ID, Name, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language, t.AD_Column_ID, t.Name, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Column t WHERE l.IsActive='Y'AND (l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N') AND t.AD_Column_ID=570819 AND NOT EXISTS (SELECT 1 FROM AD_Column_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Column_ID=t.AD_Column_ID)\n+;\n+\n+-- 2020-05-25T08:11:46.128Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+/* DDL */  select update_Column_Translation_From_AD_Element(577736) \n+;\n+\n+-- 2020-05-25T08:11:58.930Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+/* DDL */ SELECT public.db_alter_table('DD_Order','ALTER TABLE public.DD_Order ADD COLUMN M_Warehouse_From_ID NUMERIC(10) DEFAULT 540008 NOT NULL')\n+;\n+\n+-- 2020-05-25T08:11:59.850Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+ALTER TABLE DD_Order ADD CONSTRAINT MWarehouseFrom_DDOrder FOREIGN KEY (M_Warehouse_From_ID) REFERENCES public.M_Warehouse DEFERRABLE INITIALLY DEFERRED\n+;\n+\n+-- 2020-05-25T08:13:04.894Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_Column (AD_Client_ID,AD_Column_ID,AD_Element_ID,AD_Org_ID,AD_Reference_ID,AD_Reference_Value_ID,AD_Table_ID,ColumnName,Created,CreatedBy,DDL_NoForeignKey,DefaultValue,EntityType,FacetFilterSeqNo,FieldLength,IsActive,IsAdvancedText,IsAllowLogging,IsAlwaysUpdateable,IsAutoApplyValidationRule,IsAutocomplete,IsCalculated,IsDimension,IsDLMPartitionBoundary,IsEncrypted,IsFacetFilter,IsForceIncludeInGeneratedModel,IsGenericZoomKeyColumn,IsGenericZoomOrigin,IsIdentifier,IsKey,IsLazyLoading,IsMandatory,IsParent,IsRangeFilter,IsSelectionColumn,IsShowFilterIncrementButtons,IsStaleable,IsSyncDatabase,IsTranslated,IsUpdateable,IsUseDocSequence,MaxFacetsToFetch,Name,ReadOnlyLogic,SelectionColumnSeqNo,SeqNo,Updated,UpdatedBy,Version) VALUES (0,570820,577737,0,30,540420,53037,'M_Warehouse_To_ID',TO_TIMESTAMP('2020-05-25 11:13:04','YYYY-MM-DD HH24:MI:SS'),100,'N','540005','EE01',0,10,'Y','N','Y','N','N','N','N','N','N','N','N','N','N','N','N','N','N','Y','N','N','N','N','N','N','N','Y','N',0,'Warehouse to','',0,0,TO_TIMESTAMP('2020-05-25 11:13:04','YYYY-MM-DD HH24:MI:SS'),100,0)\n+;\n+\n+-- 2020-05-25T08:13:04.897Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+INSERT INTO AD_Column_Trl (AD_Language,AD_Column_ID, Name, IsTranslated,AD_Client_ID,AD_Org_ID,Created,Createdby,Updated,UpdatedBy) SELECT l.AD_Language, t.AD_Column_ID, t.Name, 'N',t.AD_Client_ID,t.AD_Org_ID,t.Created,t.Createdby,t.Updated,t.UpdatedBy FROM AD_Language l, AD_Column t WHERE l.IsActive='Y'AND (l.IsSystemLanguage='Y' AND l.IsBaseLanguage='N') AND t.AD_Column_ID=570820 AND NOT EXISTS (SELECT 1 FROM AD_Column_Trl tt WHERE tt.AD_Language=l.AD_Language AND tt.AD_Column_ID=t.AD_Column_ID)\n+;\n+\n+-- 2020-05-25T08:13:04.899Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+/* DDL */  select update_Column_Translation_From_AD_Element(577737) \n+;\n+\n+-- 2020-05-25T08:13:29.659Z\n+-- I forgot to set the DICTIONARY_ID_COMMENTS System Configurator\n+/* DDL */ SELECT public.db_alter_table('DD_Order','ALTER TABLE public.DD_Order ADD COLUMN M_Warehouse_To_ID NUMERIC(10) DEFAULT 540005 NOT NULL')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "c49a6301b8f35a793f8f294dffa501b4784147a7"}, "originalPosition": 63}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNDc1NjY0", "url": "https://github.com/metasfresh/metasfresh/pull/6752#pullrequestreview-421475664", "createdAt": "2020-05-31T09:10:19Z", "commit": {"oid": "c49a6301b8f35a793f8f294dffa501b4784147a7"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6257d7302f809694c9a7f76a745fc64ccebe8b4b", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/6257d7302f809694c9a7f76a745fc64ccebe8b4b", "committedDate": "2020-05-31T12:21:46Z", "message": "req changes\nrefs: https://github.com/metasfresh/metasfresh/issues/6713"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNDk0NzAz", "url": "https://github.com/metasfresh/metasfresh/pull/6752#pullrequestreview-421494703", "createdAt": "2020-05-31T13:27:54Z", "commit": {"oid": "6257d7302f809694c9a7f76a745fc64ccebe8b4b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxMzoyNzo1NFrOGc4__Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxMzoyNzo1NFrOGc4__Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk0NzE5Nw==", "bodyText": "also @NonNull param", "url": "https://github.com/metasfresh/metasfresh/pull/6752#discussion_r432947197", "createdAt": "2020-05-31T13:27:54Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.adempiere.libero.libero/src/main/java/org/eevolution/api/impl/DDOrderDAO.java", "diffHunk": "@@ -242,4 +246,20 @@ public void save(@NonNull final I_DD_OrderLine_Or_Alternative ddOrderLineOrAlter\n \t{\n \t\tsaveRecord(ddOrderLineOrAlternative);\n \t}\n+\n+\n+\t@NonNull\n+\tpublic I_DD_OrderLine getLineById(final DDOrderLineId ddOrderLineID)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6257d7302f809694c9a7f76a745fc64ccebe8b4b"}, "originalPosition": 114}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIxNDk0NzQx", "url": "https://github.com/metasfresh/metasfresh/pull/6752#pullrequestreview-421494741", "createdAt": "2020-05-31T13:28:21Z", "commit": {"oid": "6257d7302f809694c9a7f76a745fc64ccebe8b4b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxMzoyODoyMlrOGc5AJQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0zMVQxMzoyODoyMlrOGc5AJQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjk0NzIzNw==", "bodyText": "nice!", "url": "https://github.com/metasfresh/metasfresh/pull/6752#discussion_r432947237", "createdAt": "2020-05-31T13:28:22Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.adempiere.libero.libero/src/main/java/org/eevolution/api/impl/DDOrderDAO.java", "diffHunk": "@@ -24,42 +52,18 @@\n  * #L%\n  */\n \n-import java.util.List;\n-\n-import org.adempiere.ad.dao.ConstantQueryFilter;\n-import org.adempiere.ad.dao.IQueryBL;\n-import org.adempiere.ad.dao.IQueryBuilder;\n-import org.adempiere.ad.dao.IQueryFilter;\n-import org.compiere.model.I_M_Forecast;\n-import org.compiere.model.I_M_MovementLine;\n-import org.eevolution.api.IDDOrderDAO;\n-import org.eevolution.model.I_DD_Order;\n-import org.eevolution.model.I_DD_OrderLine;\n-import org.eevolution.model.I_DD_OrderLine_Alternative;\n-import org.eevolution.model.I_DD_OrderLine_Or_Alternative;\n-import org.eevolution.model.I_PP_MRP;\n-import org.eevolution.model.I_PP_MRP_Alloc;\n-import org.eevolution.model.I_PP_Order;\n-import org.eevolution.model.X_PP_MRP;\n-import org.eevolution.mrp.api.IMRPDAO;\n-import org.slf4j.Logger;\n-\n-import de.metas.logging.LogManager;\n-import de.metas.material.planning.pporder.LiberoException;\n-import de.metas.util.Check;\n-import de.metas.util.Services;\n-import lombok.NonNull;\n-\n public class DDOrderDAO implements IDDOrderDAO\n {\n \tprivate final transient Logger logger = LogManager.getLogger(getClass());\n \n+\tprivate final  IQueryBL queryBL = Services.get(IQueryBL.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "6257d7302f809694c9a7f76a745fc64ccebe8b4b"}, "originalPosition": 68}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7892a56787252cf9cf589b082e1c97873b17136b", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/7892a56787252cf9cf589b082e1c97873b17136b", "committedDate": "2020-06-02T06:01:43Z", "message": "req changes 2\nrefs: https://github.com/metasfresh/metasfresh/issues/6713"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3340, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}