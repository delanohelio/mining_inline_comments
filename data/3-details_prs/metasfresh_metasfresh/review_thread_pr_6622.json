{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE1NzIwNTQy", "number": 6622, "reviewThreads": {"totalCount": 8, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNDowMTo1N1rOD6_A4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNDoxNjowM1rOD6_GIw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTc2NDE2OnYy", "diffSide": "RIGHT", "path": "frontend/src/components/window/Column.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNDowMTo1N1rOGTEfWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNDowMTo1N1rOGTEfWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY0OTY5MQ==", "bodyText": "this should be a separated component", "url": "https://github.com/metasfresh/metasfresh/pull/6622#discussion_r422649691", "createdAt": "2020-05-10T14:01:57Z", "author": {"login": "petrican"}, "path": "frontend/src/components/window/Column.js", "diffHunk": "@@ -0,0 +1,163 @@\n+import React, { PureComponent } from 'react';\n+import PropTypes from 'prop-types';\n+import classnames from 'classnames';\n+import ElementGroup from './ElementGroup';\n+import EntryTable from '../table/EntryTable';\n+\n+class Column extends PureComponent {\n+  constructor(props) {\n+    super(props);\n+\n+    if (props.isModal) {\n+      this.tabIndex = {\n+        firstColumn: 0,\n+        secondColumn: 0,\n+      };\n+    } else {\n+      this.tabIndex = {\n+        firstColumn: 1,\n+        secondColumn: 2,\n+      };\n+    }\n+  }\n+\n+  render() {\n+    const { columnLayout, colWidth } = this.props;\n+    const { isDataEntry } = this.props;\n+    const elementGroups = columnLayout.elementGroups;\n+\n+    if (isDataEntry) {\n+      return (\n+        <div className=\"col-sm-12\">{this.renderEntryTable(elementGroups)}</div>\n+      );\n+    } else {\n+      if (elementGroups === undefined || elementGroups.length == 0) {\n+        return null;\n+      }\n+\n+      return (\n+        <div className={`col-sm-${colWidth}`}>\n+          {elementGroups && this.renderElementGroups(elementGroups)}\n+        </div>\n+      );\n+    }\n+  }\n+\n+  renderElementGroups = (groups) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7848bed4039f55242181fe4883175951c9ac3b0f"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTc2NDUwOnYy", "diffSide": "RIGHT", "path": "frontend/src/components/window/Column.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNDowMjoyNVrOGTEfhA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNDowMjoyNVrOGTEfhA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY0OTczMg==", "bodyText": "this should be a separated component also", "url": "https://github.com/metasfresh/metasfresh/pull/6622#discussion_r422649732", "createdAt": "2020-05-10T14:02:25Z", "author": {"login": "petrican"}, "path": "frontend/src/components/window/Column.js", "diffHunk": "@@ -0,0 +1,163 @@\n+import React, { PureComponent } from 'react';\n+import PropTypes from 'prop-types';\n+import classnames from 'classnames';\n+import ElementGroup from './ElementGroup';\n+import EntryTable from '../table/EntryTable';\n+\n+class Column extends PureComponent {\n+  constructor(props) {\n+    super(props);\n+\n+    if (props.isModal) {\n+      this.tabIndex = {\n+        firstColumn: 0,\n+        secondColumn: 0,\n+      };\n+    } else {\n+      this.tabIndex = {\n+        firstColumn: 1,\n+        secondColumn: 2,\n+      };\n+    }\n+  }\n+\n+  render() {\n+    const { columnLayout, colWidth } = this.props;\n+    const { isDataEntry } = this.props;\n+    const elementGroups = columnLayout.elementGroups;\n+\n+    if (isDataEntry) {\n+      return (\n+        <div className=\"col-sm-12\">{this.renderEntryTable(elementGroups)}</div>\n+      );\n+    } else {\n+      if (elementGroups === undefined || elementGroups.length == 0) {\n+        return null;\n+      }\n+\n+      return (\n+        <div className={`col-sm-${colWidth}`}>\n+          {elementGroups && this.renderElementGroups(elementGroups)}\n+        </div>\n+      );\n+    }\n+  }\n+\n+  renderElementGroups = (groups) => {\n+    const { windowId, tabId, rowId, dataId } = this.props;\n+    const { data } = this.props;\n+    const { isFirst, isModal, isAdvanced, isFullScreen } = this.props;\n+    const {\n+      onBlurWidget,\n+      addRefToWidgets,\n+      requestElementGroupFocus,\n+    } = this.props;\n+\n+    return groups.map((elementGroupLayout, elementGroupIndex) => {\n+      const shouldBeFocused = isFirst && elementGroupIndex === 0;\n+      const tabIndex =\n+        elementGroupLayout.type === 'primary'\n+          ? this.tabIndex.firstColumn\n+          : this.tabIndex.secondColumn;\n+\n+      return (\n+        <ElementGroup\n+          key={'elemGroups' + elementGroupIndex}\n+          //\n+          elementGroupLayout={elementGroupLayout}\n+          //\n+          windowId={windowId}\n+          tabId={tabId}\n+          rowId={rowId}\n+          dataId={dataId}\n+          //\n+          data={data}\n+          //\n+          shouldBeFocused={shouldBeFocused}\n+          tabIndex={tabIndex}\n+          isModal={isModal}\n+          isAdvanced={isAdvanced}\n+          isFullScreen={isFullScreen}\n+          //\n+          onBlurWidget={onBlurWidget}\n+          addRefToWidgets={addRefToWidgets}\n+          requestElementGroupFocus={requestElementGroupFocus}\n+        />\n+      );\n+    });\n+  };\n+\n+  renderEntryTable = (groups) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7848bed4039f55242181fe4883175951c9ac3b0f"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTc2Nzc0OnYy", "diffSide": "RIGHT", "path": "frontend/src/components/window/Element.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNDowNTo1OVrOGTEhDA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNDowNTo1OVrOGTEhDA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1MDEyNA==", "bodyText": "Why -1 ? Pls explain", "url": "https://github.com/metasfresh/metasfresh/pull/6622#discussion_r422650124", "createdAt": "2020-05-10T14:05:59Z", "author": {"login": "petrican"}, "path": "frontend/src/components/window/Element.js", "diffHunk": "@@ -0,0 +1,66 @@\n+import React, { PureComponent } from 'react';\n+import PropTypes from 'prop-types';\n+import MasterWidget from '../widget/MasterWidget';\n+\n+class Element extends PureComponent {\n+  render() {\n+    const { windowId, tabId, rowId, dataId } = this.props;\n+    const { elementLayout, elementIndex } = this.props;\n+    const { isFocused, tabIndex } = this.props;\n+    const { data } = this.props;\n+    const { isModal, isAdvanced, isFullScreen } = this.props;\n+    const { addRefToWidgets, onBlurWidget } = this.props;\n+\n+    const autoFocus = isFocused && elementIndex === 0;\n+    const widgetData = elementLayout.fields.map(\n+      (item) => data[item.field] || -1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7848bed4039f55242181fe4883175951c9ac3b0f"}, "originalPosition": 16}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTc3Mjc2OnYy", "diffSide": "RIGHT", "path": "frontend/src/components/window/Element.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNDoxMTowM1rOGTEjbA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNDoxMTowM1rOGTEjbA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1MDczMg==", "bodyText": "You can remove those // . You you think the propTypes is too big you can put it in a separated file.", "url": "https://github.com/metasfresh/metasfresh/pull/6622#discussion_r422650732", "createdAt": "2020-05-10T14:11:03Z", "author": {"login": "petrican"}, "path": "frontend/src/components/window/Element.js", "diffHunk": "@@ -0,0 +1,66 @@\n+import React, { PureComponent } from 'react';\n+import PropTypes from 'prop-types';\n+import MasterWidget from '../widget/MasterWidget';\n+\n+class Element extends PureComponent {\n+  render() {\n+    const { windowId, tabId, rowId, dataId } = this.props;\n+    const { elementLayout, elementIndex } = this.props;\n+    const { isFocused, tabIndex } = this.props;\n+    const { data } = this.props;\n+    const { isModal, isAdvanced, isFullScreen } = this.props;\n+    const { addRefToWidgets, onBlurWidget } = this.props;\n+\n+    const autoFocus = isFocused && elementIndex === 0;\n+    const widgetData = elementLayout.fields.map(\n+      (item) => data[item.field] || -1\n+    );\n+    const fieldName = elementLayout.fields ? elementLayout.fields[0].field : '';\n+    const relativeDocId = data.ID && data.ID.value;\n+\n+    return (\n+      <MasterWidget\n+        ref={addRefToWidgets}\n+        entity=\"window\"\n+        key={'element' + elementIndex}\n+        windowType={windowId}\n+        dataId={dataId}\n+        widgetData={widgetData}\n+        isModal={!!isModal}\n+        tabId={tabId}\n+        rowId={rowId}\n+        relativeDocId={relativeDocId}\n+        isAdvanced={isAdvanced}\n+        tabIndex={tabIndex}\n+        autoFocus={!isModal && autoFocus}\n+        fullScreen={isFullScreen}\n+        fieldName={fieldName}\n+        onBlurWidget={onBlurWidget}\n+        {...elementLayout}\n+      />\n+    );\n+  }\n+}\n+\n+Element.propTypes = {\n+  elementLayout: PropTypes.object.isRequired,\n+  elementIndex: PropTypes.number.isRequired,\n+  //", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7848bed4039f55242181fe4883175951c9ac3b0f"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTc3MzUwOnYy", "diffSide": "RIGHT", "path": "frontend/src/components/window/ElementGroup.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNDoxMjowMlrOGTEjyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNDoxMjowMlrOGTEjyg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1MDgyNg==", "bodyText": "Separated component", "url": "https://github.com/metasfresh/metasfresh/pull/6622#discussion_r422650826", "createdAt": "2020-05-10T14:12:02Z", "author": {"login": "petrican"}, "path": "frontend/src/components/window/ElementGroup.js", "diffHunk": "@@ -0,0 +1,99 @@\n+import React, { PureComponent } from 'react';\n+import PropTypes from 'prop-types';\n+import classnames from 'classnames';\n+\n+import ElementsLine from './ElementsLine';\n+\n+class ElementGroup extends PureComponent {\n+  render() {\n+    const {\n+      elementGroupLayout,\n+      shouldBeFocused,\n+      isModal,\n+      requestElementGroupFocus,\n+    } = this.props;\n+\n+    if (\n+      elementGroupLayout.elementsLine === undefined ||\n+      elementGroupLayout.elementsLine.length == 0\n+    ) {\n+      return null;\n+    }\n+\n+    return (\n+      <div\n+        ref={(c) => {\n+          if (c && isModal && shouldBeFocused) {\n+            requestElementGroupFocus(c);\n+          }\n+        }}\n+        className={classnames('panel panel-spaced panel-distance', {\n+          'panel-bordered panel-primary': elementGroupLayout.type === 'primary',\n+          'panel-secondary': elementGroupLayout.type !== 'primary',\n+        })}\n+      >\n+        {this.renderElementsLinesArray(elementGroupLayout.elementsLine)}\n+      </div>\n+    );\n+  }\n+\n+  renderElementsLinesArray = (elementsLinesLayoutArray) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7848bed4039f55242181fe4883175951c9ac3b0f"}, "originalPosition": 40}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTc3NTAxOnYy", "diffSide": "RIGHT", "path": "frontend/src/components/window/ElementsLine.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNDoxMzoyN1rOGTEkdA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNDoxMzoyN1rOGTEkdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1MDk5Ng==", "bodyText": "Separated component", "url": "https://github.com/metasfresh/metasfresh/pull/6622#discussion_r422650996", "createdAt": "2020-05-10T14:13:27Z", "author": {"login": "petrican"}, "path": "frontend/src/components/window/ElementsLine.js", "diffHunk": "@@ -0,0 +1,78 @@\n+import React, { PureComponent } from 'react';\n+import PropTypes from 'prop-types';\n+\n+import Element from './Element';\n+\n+class ElementsLine extends PureComponent {\n+  render() {\n+    const { elementsLineLayout } = this.props;\n+\n+    if (\n+      elementsLineLayout.elements === undefined ||\n+      elementsLineLayout.elements.length == 0\n+    ) {\n+      return null;\n+    }\n+\n+    return (\n+      <div className=\"elements-line\">\n+        {this.renderElements(elementsLineLayout.elements)}\n+      </div>\n+    );\n+  }\n+\n+  renderElements = (elements) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7848bed4039f55242181fe4883175951c9ac3b0f"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTc3NTgxOnYy", "diffSide": "RIGHT", "path": "frontend/src/components/window/Section.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNDoxNDoxMFrOGTEk2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNDoxNDoxMFrOGTEk2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1MTA5OQ==", "bodyText": "separate component", "url": "https://github.com/metasfresh/metasfresh/pull/6622#discussion_r422651099", "createdAt": "2020-05-10T14:14:10Z", "author": {"login": "petrican"}, "path": "frontend/src/components/window/Section.js", "diffHunk": "@@ -0,0 +1,117 @@\n+import React, { PureComponent } from 'react';\n+import PropTypes from 'prop-types';\n+import classnames from 'classnames';\n+import Separator from '../Separator';\n+import Column from './Column';\n+import { INITIALLY_OPEN, INITIALLY_CLOSED } from '../../constants/Constants';\n+\n+class Section extends PureComponent {\n+  render() {\n+    const { sectionLayout, sectionIndex } = this.props;\n+    const { extendedData } = this.props;\n+    const { isSectionCollapsed, toggleSectionCollapsed } = this.props;\n+\n+    const { title, columns, closableMode } = sectionLayout;\n+    const collapsible =\n+      closableMode === INITIALLY_OPEN || closableMode === INITIALLY_CLOSED;\n+\n+    return (\n+      <div className={classnames('section', { collapsed: isSectionCollapsed })}>\n+        {title && (\n+          <Separator\n+            title={title}\n+            idx={sectionIndex}\n+            sectionCollapsed={isSectionCollapsed}\n+            collapsible={collapsible}\n+            tabId={extendedData.tabId}\n+            onClick={toggleSectionCollapsed}\n+          />\n+        )}\n+        <div\n+          className={classnames('row', {\n+            'collapsible-section': collapsible,\n+            collapsed: isSectionCollapsed,\n+          })}\n+        >\n+          {columns && this.renderColumns(columns)}\n+        </div>\n+      </div>\n+    );\n+  }\n+\n+  renderColumns = (columns) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7848bed4039f55242181fe4883175951c9ac3b0f"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjYzMTc3NzYzOnYy", "diffSide": "RIGHT", "path": "frontend/src/components/window/Section.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNDoxNjowM1rOGTElrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xMFQxNDoxNjowM1rOGTElrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyMjY1MTMxMA==", "bodyText": "you can use uuid combined with col for optimisation", "url": "https://github.com/metasfresh/metasfresh/pull/6622#discussion_r422651310", "createdAt": "2020-05-10T14:16:03Z", "author": {"login": "petrican"}, "path": "frontend/src/components/window/Section.js", "diffHunk": "@@ -0,0 +1,117 @@\n+import React, { PureComponent } from 'react';\n+import PropTypes from 'prop-types';\n+import classnames from 'classnames';\n+import Separator from '../Separator';\n+import Column from './Column';\n+import { INITIALLY_OPEN, INITIALLY_CLOSED } from '../../constants/Constants';\n+\n+class Section extends PureComponent {\n+  render() {\n+    const { sectionLayout, sectionIndex } = this.props;\n+    const { extendedData } = this.props;\n+    const { isSectionCollapsed, toggleSectionCollapsed } = this.props;\n+\n+    const { title, columns, closableMode } = sectionLayout;\n+    const collapsible =\n+      closableMode === INITIALLY_OPEN || closableMode === INITIALLY_CLOSED;\n+\n+    return (\n+      <div className={classnames('section', { collapsed: isSectionCollapsed })}>\n+        {title && (\n+          <Separator\n+            title={title}\n+            idx={sectionIndex}\n+            sectionCollapsed={isSectionCollapsed}\n+            collapsible={collapsible}\n+            tabId={extendedData.tabId}\n+            onClick={toggleSectionCollapsed}\n+          />\n+        )}\n+        <div\n+          className={classnames('row', {\n+            'collapsible-section': collapsible,\n+            collapsed: isSectionCollapsed,\n+          })}\n+        >\n+          {columns && this.renderColumns(columns)}\n+        </div>\n+      </div>\n+    );\n+  }\n+\n+  renderColumns = (columns) => {\n+    const { sectionIndex } = this.props;\n+    const { windowId, tabId, rowId, dataId } = this.props;\n+    const { data, isDataEntry, extendedData, rowData } = this.props;\n+    const { isModal, isAdvanced, isFullScreen } = this.props;\n+    const {\n+      addRefToWidgets,\n+      onBlurWidget,\n+      requestElementGroupFocus,\n+    } = this.props;\n+\n+    const maxRows = 12;\n+    const colWidth = Math.floor(maxRows / columns.length);\n+\n+    const isFirstSection = sectionIndex === 0;\n+\n+    return columns.map((columnLayout, columnIndex) => {\n+      const isFirstColumn = isFirstSection && columnIndex === 0;\n+      return (\n+        <Column\n+          key={`col-${columnIndex}`}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "7848bed4039f55242181fe4883175951c9ac3b0f"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1509, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}