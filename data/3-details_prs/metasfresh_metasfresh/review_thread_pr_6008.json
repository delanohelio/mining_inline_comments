{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzYwNDY1NTgx", "number": 6008, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNzowNzo1MFrODWwVPA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNToyMzoyMlrODW43CQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MTg3MTMyOnYy", "diffSide": "RIGHT", "path": "de.metas.business/src/main/java/de/metas/pricing/service/ProductPrices.java", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQwNzowNzo1MFrOFbsfjQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxMTo0OTowM1rOFbzYrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU4NDg0NQ==", "bodyText": "Create an AD_Message record with translations (we'll need en_US, de_DE and de_CH) and use IMsg (Services.get(IMsg.class)) to get a translatable string instance.\nPassing hardcoded strings  generally doesn't make sense for user-errors", "url": "https://github.com/metasfresh/metasfresh/pull/6008#discussion_r364584845", "createdAt": "2020-01-09T07:07:50Z", "author": {"login": "metas-ts"}, "path": "de.metas.business/src/main/java/de/metas/pricing/service/ProductPrices.java", "diffHunk": "@@ -124,6 +127,38 @@ public static void assertMainProductPriceIsNotDuplicate(final I_M_ProductPrice p\n \t\tgetFirstOrThrowExceptionIfMoreThanOne(allMainPrices);\n \t}\n \n+\tpublic static void assertUomConversionExists(final I_M_ProductPrice productPrice)\n+\t{\n+\t\tif (productPrice == null || !productPrice.isActive())\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tif (productPrice.isInvalidPrice())\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfinal IProductDAO productDAO = Services.get(IProductDAO.class);\n+\t\tfinal org.compiere.model.I_M_Product product = productDAO.getById(productPrice.getM_Product_ID());\n+\n+\t\tif (UomId.ofRepoId(product.getC_UOM_ID()).equals(UomId.ofRepoId(productPrice.getC_UOM_ID())))\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfinal IUOMConversionDAO uomConversionRepo = Services.get(IUOMConversionDAO.class);\n+\t\tfinal ProductId productId = ProductId.ofRepoId(productPrice.getM_Product_ID());\n+\n+\t\tUOMConversionsMap conversionsMap = uomConversionRepo.getProductConversions(productId);\n+\n+\t\tif (conversionsMap.getRateIfExists(UomId.ofRepoId(product.getC_UOM_ID()), UomId.ofRepoId(productPrice.getC_UOM_ID())).isPresent())\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\t\tthrow new AdempiereException(\"UOM Conversion to the selected UOM doesn't exist\").markAsUserValidationError();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "ce6fd776cfb1f0b959d466934e612137c0d46e6e"}, "originalPosition": 61}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDY5Nzc3NA==", "bodyText": "fully agree", "url": "https://github.com/metasfresh/metasfresh/pull/6008#discussion_r364697774", "createdAt": "2020-01-09T11:49:03Z", "author": {"login": "teosarca"}, "path": "de.metas.business/src/main/java/de/metas/pricing/service/ProductPrices.java", "diffHunk": "@@ -124,6 +127,38 @@ public static void assertMainProductPriceIsNotDuplicate(final I_M_ProductPrice p\n \t\tgetFirstOrThrowExceptionIfMoreThanOne(allMainPrices);\n \t}\n \n+\tpublic static void assertUomConversionExists(final I_M_ProductPrice productPrice)\n+\t{\n+\t\tif (productPrice == null || !productPrice.isActive())\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tif (productPrice.isInvalidPrice())\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfinal IProductDAO productDAO = Services.get(IProductDAO.class);\n+\t\tfinal org.compiere.model.I_M_Product product = productDAO.getById(productPrice.getM_Product_ID());\n+\n+\t\tif (UomId.ofRepoId(product.getC_UOM_ID()).equals(UomId.ofRepoId(productPrice.getC_UOM_ID())))\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfinal IUOMConversionDAO uomConversionRepo = Services.get(IUOMConversionDAO.class);\n+\t\tfinal ProductId productId = ProductId.ofRepoId(productPrice.getM_Product_ID());\n+\n+\t\tUOMConversionsMap conversionsMap = uomConversionRepo.getProductConversions(productId);\n+\n+\t\tif (conversionsMap.getRateIfExists(UomId.ofRepoId(product.getC_UOM_ID()), UomId.ofRepoId(productPrice.getC_UOM_ID())).isPresent())\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\t\tthrow new AdempiereException(\"UOM Conversion to the selected UOM doesn't exist\").markAsUserValidationError();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDU4NDg0NQ=="}, "originalCommit": {"oid": "ce6fd776cfb1f0b959d466934e612137c0d46e6e"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjI1MzI2ODU3OnYy", "diffSide": "RIGHT", "path": "de.metas.business/src/main/java/de/metas/pricing/service/ProductPrices.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNToyMzoyMlrOFb5j-Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMS0wOVQxNToyNjoxOFrOFb5q8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc5ODk2OQ==", "bodyText": "why were the checks here unnecessary? remember, you never know who is going to call this public static method.\nMaybe you can annotate the productPrice parameter with @NonNull (lombok!), but i thik you should check still for IsActive and IsValid", "url": "https://github.com/metasfresh/metasfresh/pull/6008#discussion_r364798969", "createdAt": "2020-01-09T15:23:22Z", "author": {"login": "metas-ts"}, "path": "de.metas.business/src/main/java/de/metas/pricing/service/ProductPrices.java", "diffHunk": "@@ -124,6 +130,29 @@ public static void assertMainProductPriceIsNotDuplicate(final I_M_ProductPrice p\n \t\tgetFirstOrThrowExceptionIfMoreThanOne(allMainPrices);\n \t}\n \n+\tpublic static void assertUomConversionExists(final I_M_ProductPrice productPrice)\n+\t{\n+\t\tfinal IProductDAO productDAO = Services.get(IProductDAO.class);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "088ad39a251539b0cfe10319e5446e07a73965c6"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDgwMDc1NQ==", "bodyText": "As it's only called in one place right now, it gets called at the same time as the assert before it (the one that checks that the product price is not duplicate), and the checks are removed are already gone through there.\nBut sure, for further use cases or the case the assert that checks the price is not duplicate gets changed I could add them to be there.", "url": "https://github.com/metasfresh/metasfresh/pull/6008#discussion_r364800755", "createdAt": "2020-01-09T15:26:18Z", "author": {"login": "dragospodariu96"}, "path": "de.metas.business/src/main/java/de/metas/pricing/service/ProductPrices.java", "diffHunk": "@@ -124,6 +130,29 @@ public static void assertMainProductPriceIsNotDuplicate(final I_M_ProductPrice p\n \t\tgetFirstOrThrowExceptionIfMoreThanOne(allMainPrices);\n \t}\n \n+\tpublic static void assertUomConversionExists(final I_M_ProductPrice productPrice)\n+\t{\n+\t\tfinal IProductDAO productDAO = Services.get(IProductDAO.class);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM2NDc5ODk2OQ=="}, "originalCommit": {"oid": "088ad39a251539b0cfe10319e5446e07a73965c6"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1530, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}