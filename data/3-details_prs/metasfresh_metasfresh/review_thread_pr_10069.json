{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDk4NTY3NTAz", "number": 10069, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNToyMToyM1rOEqyy9Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNToyMToyM1rOEqyy9Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzEzMzA3ODkzOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.material/dispo-commons/src/main/java/de/metas/material/dispo/commons/repository/atp/AvailableToPromiseResultBuilder.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNToyMToyM1rOHdM_ew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0wNlQxNToyMToyM1rOHdM_ew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUwMDM4MzYxMQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tbuckets.forEach(bucket -> bucket.addQtyToAllMatchingGroups(request));\n          \n          \n            \n            \t\t// note that we might select more quantities than we actually wanted (bc of the way we match attributes in the query using LIKE)\n          \n          \n            \n            \t\t// for that reason, we need to be lenient in case not all quantities can be added to a bucked\n          \n          \n            \n            \t\tbuckets.forEach(bucket -> bucket.addQtyToAllMatchingGroups(request));", "url": "https://github.com/metasfresh/metasfresh/pull/10069#discussion_r500383611", "createdAt": "2020-10-06T15:21:23Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.material/dispo-commons/src/main/java/de/metas/material/dispo/commons/repository/atp/AvailableToPromiseResultBuilder.java", "diffHunk": "@@ -105,24 +103,7 @@ public AvailableToPromiseResult build()\n \n \tpublic void addQtyToAllMatchingGroups(@NonNull final AddToResultGroupRequest request)\n \t{\n-\t\tboolean addedToAtLeastOneGroup = false;\n-\t\tfor (final AvailableToPromiseResultBucket bucket : buckets)\n-\t\t{\n-\t\t\tif (bucket.addQtyToAllMatchingGroups(request))\n-\t\t\t{\n-\t\t\t\taddedToAtLeastOneGroup = true;\n-\t\t\t}\n-\t\t}\n-\n-\t\tif (!addedToAtLeastOneGroup)\n-\t\t{\n-\t\t\tthrow new AdempiereException(\"No matching group found for AddToResultGroupRequest\")\n-\t\t\t\t\t.appendParametersToMessage()\n-\t\t\t\t\t.setParameter(\"request\", request)\n-\t\t\t\t\t.setParameter(\"buckets\", buckets)\n-\t\t\t\t\t.setParameter(\"this\", this);\n-\t\t}\n-\n+\t\tbuckets.forEach(bucket -> bucket.addQtyToAllMatchingGroups(request));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8da0fc238fa9634e32fa152e94ce8f1e86261d96"}, "originalPosition": 49}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1212, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}