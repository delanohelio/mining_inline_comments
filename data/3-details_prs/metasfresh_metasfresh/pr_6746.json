{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDIzOTQ5NzQ1", "number": 6746, "title": "show helpful error message on missing price", "bodyText": "InvoiceLineBL: improve logging; fix the issue by telling the pricing engine to throw an exception on missing price\n\nbefore this, there was some secondary error which did not guide anyone to the real problem\n\n\nIPricingBL: minor javadoc fix\nAttachmentEntryService: only minor javadoc-addition", "createdAt": "2020-05-27T15:51:22Z", "url": "https://github.com/metasfresh/metasfresh/pull/6746", "merged": true, "mergeCommit": {"oid": "075af468bb3031bc795742518f1b3ee554772a5c"}, "closed": true, "closedAt": "2020-05-29T11:30:56Z", "author": {"login": "metas-ts"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABclbUYrgH2gAyNDIzOTQ5NzQ1OjczNWI5Y2Q4OTgyNmI3ODZhNmZhOWMzYTE2MWM0NDA5NDhkMGI3Yjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcmAybSgH2gAyNDIzOTQ5NzQ1OjI3YmUyZWQyY2YxNWUyODkwZDhhMTE0YmI2YTEzNGY2ZTQ3MGM2NjQ=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "735b9cd89826b786a6fa9c3a161c440948d0b7b9", "author": {"user": {"login": "metas-ts", "name": "Tobias Sch\u00f6neberg"}}, "url": "https://github.com/metasfresh/metasfresh/commit/735b9cd89826b786a6fa9c3a161c440948d0b7b9", "committedDate": "2020-05-27T15:50:59Z", "message": "show helpful error message on missing price\n\n* InvoiceLineBL: improve logging; fix the issue by telling the pricing engine to throw an exception on missing price\n  * before this, there was some secondary error which did not guide anyone to the real problem\n* IPricingBL: minor javadoc fix\n* AttachmentEntryService: only minor javadoc-addition"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6509858a91c2da13d13a52141f1cadd9d23ad13", "author": {"user": {"login": "metas-ts", "name": "Tobias Sch\u00f6neberg"}}, "url": "https://github.com/metasfresh/metasfresh/commit/f6509858a91c2da13d13a52141f1cadd9d23ad13", "committedDate": "2020-05-29T10:41:52Z", "message": "minor: get rid of deprecated Env.ZERO"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDIwODY4MjQ3", "url": "https://github.com/metasfresh/metasfresh/pull/6746#pullrequestreview-420868247", "createdAt": "2020-05-29T11:27:19Z", "commit": {"oid": "f6509858a91c2da13d13a52141f1cadd9d23ad13"}, "state": "COMMENTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMToyNzoxOVrOGcY8hw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0yOVQxMToyODozMlrOGcY-nA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyMjAyMw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tlogger.debug(\"invoice line has both Price_UOM_ID=null and C_UOM_ID={}; return result ={}\", uomId.getRepoId(), result);\n          \n          \n            \n            \t\t\tlogger.debug(\"invoice line has Price_UOM_ID=null and C_UOM_ID={}; return result ={}\", uomId.getRepoId(), result);", "url": "https://github.com/metasfresh/metasfresh/pull/6746#discussion_r432422023", "createdAt": "2020-05-29T11:27:19Z", "author": {"login": "metas-ts"}, "path": "de.metas.business/src/main/java/de/metas/invoice/impl/InvoiceLineBL.java", "diffHunk": "@@ -267,65 +279,90 @@ private TaxCategoryId getTaxCategoryFromOrder(\n \t@Override\n \tpublic void setQtyInvoicedInPriceUOM(final I_C_InvoiceLine invoiceLine)\n \t{\n-\t\tfinal BigDecimal qtyInvoicedInPriceUOM = calculateQtyInvoicedInPriceUOM(invoiceLine);\n-\t\tinvoiceLine.setQtyInvoicedInPriceUOM(qtyInvoicedInPriceUOM);\n+\t\ttry (final MDCCloseable ignored = TableRecordMDC.putTableRecordReference(invoiceLine))\n+\t\t{\n+\t\t\tfinal Quantity qtyInvoicedInPriceUOM = calculateQtyInvoicedInPriceUOM(invoiceLine);\n+\t\t\tinvoiceLine.setQtyInvoicedInPriceUOM(qtyInvoicedInPriceUOM.toBigDecimal());\n+\t\t}\n \t}\n \n-\tprivate BigDecimal calculateQtyInvoicedInPriceUOM(@NonNull final I_C_InvoiceLine ilRecord)\n+\tprivate Quantity calculateQtyInvoicedInPriceUOM(@NonNull final I_C_InvoiceLine ilRecord)\n \t{\n \t\tfinal BigDecimal qtyEntered = ilRecord.getQtyEntered();\n \t\tCheck.assumeNotNull(qtyEntered, \"qtyEntered not null; ilRecord={}\", ilRecord);\n \n \t\tfinal UomId priceUomId = UomId.ofRepoIdOrNull(ilRecord.getPrice_UOM_ID());\n-\t\tif (priceUomId == null)\n-\t\t{\n-\t\t\treturn qtyEntered;\n-\t\t}\n-\n+\t\tfinal UomId uomId = UomId.ofRepoIdOrNull(ilRecord.getC_UOM_ID());\n \t\tfinal ProductId productId = ProductId.ofRepoIdOrNull(ilRecord.getM_Product_ID());\n \n-\t\tfinal IUOMConversionBL uomConversionBL = Services.get(IUOMConversionBL.class);\n-\t\tfinal BigDecimal qtyInPriceUOM = uomConversionBL.convertQty(\n-\t\t\t\tUOMConversionContext.of(productId),\n-\t\t\t\tqtyEntered,\n-\t\t\t\tUomId.ofRepoId(ilRecord.getC_UOM_ID()),\n-\t\t\t\tpriceUomId);\n+\t\tif (priceUomId != null && uomId != null)\n+\t\t{\n+\t\t\tfinal IUOMConversionBL uomConversionBL = Services.get(IUOMConversionBL.class);\n \n-\t\treturn qtyInPriceUOM;\n+\t\t\tfinal Quantity qtyToConvert = Quantitys.create(qtyEntered, uomId);\n+\t\t\tfinal Quantity result = uomConversionBL.convertQuantityTo(qtyToConvert, UOMConversionContext.of(productId), priceUomId);\n+\t\t\tlogger.debug(\"invoice line has both Price_UOM_ID={} and C_UOM_ID={}; return result={}\", priceUomId.getRepoId(), uomId.getRepoId(), result);\n+\t\t\treturn result;\n+\t\t}\n+\t\telse if (uomId != null)\n+\t\t{\n+\t\t\tfinal Quantity result = Quantitys.create(qtyEntered, uomId);\n+\t\t\tlogger.debug(\"invoice line has both Price_UOM_ID=null and C_UOM_ID={}; return result ={}\", uomId.getRepoId(), result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6509858a91c2da13d13a52141f1cadd9d23ad13"}, "originalPosition": 265}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyMjE3OA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\tlogger.debug(\"invoice line has Price_UOM_ID=null and C_UOM_ID=null and M_Product_ID={}; return result={}\", productId.getRepoId(), result);\n          \n          \n            \n            \t\t\tlogger.debug(\"invoice line has Price_UOM_ID=null, C_UOM_ID=null and M_Product_ID={}; return result={}\", productId.getRepoId(), result);", "url": "https://github.com/metasfresh/metasfresh/pull/6746#discussion_r432422178", "createdAt": "2020-05-29T11:27:44Z", "author": {"login": "metas-ts"}, "path": "de.metas.business/src/main/java/de/metas/invoice/impl/InvoiceLineBL.java", "diffHunk": "@@ -267,65 +279,90 @@ private TaxCategoryId getTaxCategoryFromOrder(\n \t@Override\n \tpublic void setQtyInvoicedInPriceUOM(final I_C_InvoiceLine invoiceLine)\n \t{\n-\t\tfinal BigDecimal qtyInvoicedInPriceUOM = calculateQtyInvoicedInPriceUOM(invoiceLine);\n-\t\tinvoiceLine.setQtyInvoicedInPriceUOM(qtyInvoicedInPriceUOM);\n+\t\ttry (final MDCCloseable ignored = TableRecordMDC.putTableRecordReference(invoiceLine))\n+\t\t{\n+\t\t\tfinal Quantity qtyInvoicedInPriceUOM = calculateQtyInvoicedInPriceUOM(invoiceLine);\n+\t\t\tinvoiceLine.setQtyInvoicedInPriceUOM(qtyInvoicedInPriceUOM.toBigDecimal());\n+\t\t}\n \t}\n \n-\tprivate BigDecimal calculateQtyInvoicedInPriceUOM(@NonNull final I_C_InvoiceLine ilRecord)\n+\tprivate Quantity calculateQtyInvoicedInPriceUOM(@NonNull final I_C_InvoiceLine ilRecord)\n \t{\n \t\tfinal BigDecimal qtyEntered = ilRecord.getQtyEntered();\n \t\tCheck.assumeNotNull(qtyEntered, \"qtyEntered not null; ilRecord={}\", ilRecord);\n \n \t\tfinal UomId priceUomId = UomId.ofRepoIdOrNull(ilRecord.getPrice_UOM_ID());\n-\t\tif (priceUomId == null)\n-\t\t{\n-\t\t\treturn qtyEntered;\n-\t\t}\n-\n+\t\tfinal UomId uomId = UomId.ofRepoIdOrNull(ilRecord.getC_UOM_ID());\n \t\tfinal ProductId productId = ProductId.ofRepoIdOrNull(ilRecord.getM_Product_ID());\n \n-\t\tfinal IUOMConversionBL uomConversionBL = Services.get(IUOMConversionBL.class);\n-\t\tfinal BigDecimal qtyInPriceUOM = uomConversionBL.convertQty(\n-\t\t\t\tUOMConversionContext.of(productId),\n-\t\t\t\tqtyEntered,\n-\t\t\t\tUomId.ofRepoId(ilRecord.getC_UOM_ID()),\n-\t\t\t\tpriceUomId);\n+\t\tif (priceUomId != null && uomId != null)\n+\t\t{\n+\t\t\tfinal IUOMConversionBL uomConversionBL = Services.get(IUOMConversionBL.class);\n \n-\t\treturn qtyInPriceUOM;\n+\t\t\tfinal Quantity qtyToConvert = Quantitys.create(qtyEntered, uomId);\n+\t\t\tfinal Quantity result = uomConversionBL.convertQuantityTo(qtyToConvert, UOMConversionContext.of(productId), priceUomId);\n+\t\t\tlogger.debug(\"invoice line has both Price_UOM_ID={} and C_UOM_ID={}; return result={}\", priceUomId.getRepoId(), uomId.getRepoId(), result);\n+\t\t\treturn result;\n+\t\t}\n+\t\telse if (uomId != null)\n+\t\t{\n+\t\t\tfinal Quantity result = Quantitys.create(qtyEntered, uomId);\n+\t\t\tlogger.debug(\"invoice line has both Price_UOM_ID=null and C_UOM_ID={}; return result ={}\", uomId.getRepoId(), result);\n+\t\t\treturn result;\n+\t\t}\n+\t\telse if (productId != null)\n+\t\t{\n+\t\t\tfinal UomId stockUomId = Services.get(IProductBL.class).getStockUOMId(productId);\n+\t\t\tfinal Quantity result = Quantitys.create(ilRecord.getQtyInvoiced(), stockUomId);\n+\t\t\tlogger.debug(\"invoice line has Price_UOM_ID=null and C_UOM_ID=null and M_Product_ID={}; return result={}\", productId.getRepoId(), result);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6509858a91c2da13d13a52141f1cadd9d23ad13"}, "originalPosition": 272}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzMjQyMjU1Ng==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tthrow new AdempiereException(\"given param 'invoiceLine' needs to have at least M_Product_ID>0\")\n          \n          \n            \n            \t\tthrow new AdempiereException(\"given param 'invoiceLine' needs to have at least M_Product_ID>0 or C_UOM_ID>0\")", "url": "https://github.com/metasfresh/metasfresh/pull/6746#discussion_r432422556", "createdAt": "2020-05-29T11:28:32Z", "author": {"login": "metas-ts"}, "path": "de.metas.business/src/main/java/de/metas/invoice/impl/InvoiceLineBL.java", "diffHunk": "@@ -267,65 +279,90 @@ private TaxCategoryId getTaxCategoryFromOrder(\n \t@Override\n \tpublic void setQtyInvoicedInPriceUOM(final I_C_InvoiceLine invoiceLine)\n \t{\n-\t\tfinal BigDecimal qtyInvoicedInPriceUOM = calculateQtyInvoicedInPriceUOM(invoiceLine);\n-\t\tinvoiceLine.setQtyInvoicedInPriceUOM(qtyInvoicedInPriceUOM);\n+\t\ttry (final MDCCloseable ignored = TableRecordMDC.putTableRecordReference(invoiceLine))\n+\t\t{\n+\t\t\tfinal Quantity qtyInvoicedInPriceUOM = calculateQtyInvoicedInPriceUOM(invoiceLine);\n+\t\t\tinvoiceLine.setQtyInvoicedInPriceUOM(qtyInvoicedInPriceUOM.toBigDecimal());\n+\t\t}\n \t}\n \n-\tprivate BigDecimal calculateQtyInvoicedInPriceUOM(@NonNull final I_C_InvoiceLine ilRecord)\n+\tprivate Quantity calculateQtyInvoicedInPriceUOM(@NonNull final I_C_InvoiceLine ilRecord)\n \t{\n \t\tfinal BigDecimal qtyEntered = ilRecord.getQtyEntered();\n \t\tCheck.assumeNotNull(qtyEntered, \"qtyEntered not null; ilRecord={}\", ilRecord);\n \n \t\tfinal UomId priceUomId = UomId.ofRepoIdOrNull(ilRecord.getPrice_UOM_ID());\n-\t\tif (priceUomId == null)\n-\t\t{\n-\t\t\treturn qtyEntered;\n-\t\t}\n-\n+\t\tfinal UomId uomId = UomId.ofRepoIdOrNull(ilRecord.getC_UOM_ID());\n \t\tfinal ProductId productId = ProductId.ofRepoIdOrNull(ilRecord.getM_Product_ID());\n \n-\t\tfinal IUOMConversionBL uomConversionBL = Services.get(IUOMConversionBL.class);\n-\t\tfinal BigDecimal qtyInPriceUOM = uomConversionBL.convertQty(\n-\t\t\t\tUOMConversionContext.of(productId),\n-\t\t\t\tqtyEntered,\n-\t\t\t\tUomId.ofRepoId(ilRecord.getC_UOM_ID()),\n-\t\t\t\tpriceUomId);\n+\t\tif (priceUomId != null && uomId != null)\n+\t\t{\n+\t\t\tfinal IUOMConversionBL uomConversionBL = Services.get(IUOMConversionBL.class);\n \n-\t\treturn qtyInPriceUOM;\n+\t\t\tfinal Quantity qtyToConvert = Quantitys.create(qtyEntered, uomId);\n+\t\t\tfinal Quantity result = uomConversionBL.convertQuantityTo(qtyToConvert, UOMConversionContext.of(productId), priceUomId);\n+\t\t\tlogger.debug(\"invoice line has both Price_UOM_ID={} and C_UOM_ID={}; return result={}\", priceUomId.getRepoId(), uomId.getRepoId(), result);\n+\t\t\treturn result;\n+\t\t}\n+\t\telse if (uomId != null)\n+\t\t{\n+\t\t\tfinal Quantity result = Quantitys.create(qtyEntered, uomId);\n+\t\t\tlogger.debug(\"invoice line has both Price_UOM_ID=null and C_UOM_ID={}; return result ={}\", uomId.getRepoId(), result);\n+\t\t\treturn result;\n+\t\t}\n+\t\telse if (productId != null)\n+\t\t{\n+\t\t\tfinal UomId stockUomId = Services.get(IProductBL.class).getStockUOMId(productId);\n+\t\t\tfinal Quantity result = Quantitys.create(ilRecord.getQtyInvoiced(), stockUomId);\n+\t\t\tlogger.debug(\"invoice line has Price_UOM_ID=null and C_UOM_ID=null and M_Product_ID={}; return result={}\", productId.getRepoId(), result);\n+\t\t\treturn result;\n+\t\t}\n+\n+\t\t// this private method shouldn't have called\n+\t\tthrow new AdempiereException(\"given param 'invoiceLine' needs to have at least M_Product_ID>0\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "f6509858a91c2da13d13a52141f1cadd9d23ad13"}, "originalPosition": 277}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "27be2ed2cf15e2890d8a114bb6a134f6e470c664", "author": {"user": {"login": "metas-ts", "name": "Tobias Sch\u00f6neberg"}}, "url": "https://github.com/metasfresh/metasfresh/commit/27be2ed2cf15e2890d8a114bb6a134f6e470c664", "committedDate": "2020-05-29T11:30:17Z", "message": "Apply suggestions from code review\r\n\r\nPR #6746"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3336, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}