{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg0MzQ2MTc0", "number": 6313, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjowNjozOFrODle9VA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjowODo0OFrODlfA5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjMxMTI0OnYy", "diffSide": "RIGHT", "path": "de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/impl/ESRBPBankAccountDAO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjowNjozOFrOFyZvyg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNTo0ODoyNlrOFytzPA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM5NDk1NA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t * Formatting done according to https://www.gkb.ch/de/Documents/DC/Beratung-Produkte/Factsheets-Flyers/Handbuch-ESR/ESR-Handbuch-Postfinance-DE.pdf\n          \n          \n            \n            \t * Explode the given {@code esrString} into a number of syntactically equivalent strings that can be matched against {@code C_BP_BankAccount.ESR_RenderedAccountNo}.\n          \n          \n            \n            \t * Formatting done according to https://www.gkb.ch/de/Documents/DC/Beratung-Produkte/Factsheets-Flyers/Handbuch-ESR/ESR-Handbuch-Postfinance-DE.pdf", "url": "https://github.com/metasfresh/metasfresh/pull/6313#discussion_r388394954", "createdAt": "2020-03-05T16:06:38Z", "author": {"login": "metas-ts"}, "path": "de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/impl/ESRBPBankAccountDAO.java", "diffHunk": "@@ -64,6 +69,57 @@\n \t\t\t\t.list();\n \t}\n \n+\t/**\n+\t * Formatting done according to https://www.gkb.ch/de/Documents/DC/Beratung-Produkte/Factsheets-Flyers/Handbuch-ESR/ESR-Handbuch-Postfinance-DE.pdf", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8f0ec5e1211b0883ee8eba4f62d293f6c5f79e9"}, "originalPosition": 31}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcyMzUxNg==", "bodyText": "added the explanation. now that i've read yours it makes so much sense what you wrote, but yesterday i totally couldn't figure out a good explanation.", "url": "https://github.com/metasfresh/metasfresh/pull/6313#discussion_r388723516", "createdAt": "2020-03-06T05:48:26Z", "author": {"login": "TheBestPessimist"}, "path": "de.metas.payment.esr/src/main/java/de/metas/payment/esr/api/impl/ESRBPBankAccountDAO.java", "diffHunk": "@@ -64,6 +69,57 @@\n \t\t\t\t.list();\n \t}\n \n+\t/**\n+\t * Formatting done according to https://www.gkb.ch/de/Documents/DC/Beratung-Produkte/Factsheets-Flyers/Handbuch-ESR/ESR-Handbuch-Postfinance-DE.pdf", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM5NDk1NA=="}, "originalCommit": {"oid": "a8f0ec5e1211b0883ee8eba4f62d293f6c5f79e9"}, "originalPosition": 31}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjMxNjI3OnYy", "diffSide": "RIGHT", "path": "de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/exception/BankingException.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjowNzo1MlrOFyZzEg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNTo1NDozOVrOFyt4Tg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM5NTc5NA==", "bodyText": "how to fix what in particular; anyways, this hardcoded stuff needs fixing, sooner or later. an additional unsolved TODO is therefore not a big deal for me", "url": "https://github.com/metasfresh/metasfresh/pull/6313#discussion_r388395794", "createdAt": "2020-03-05T16:07:52Z", "author": {"login": "metas-ts"}, "path": "de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/exception/BankingException.java", "diffHunk": "@@ -95,8 +95,9 @@ protected ITranslatableString buildMessage()\n \t\tif (targetAcct != null)\n \t\t{\n \t\t\tsb.append(\"Zielkonto:\\n\");\n-\t\t\tsb.append(\"\\tEmpfaenger: \")\n-\t\t\t\t\t.append(targetAcct.getC_BPartner().getName());\n+\t\t\t // TODO tbp: how to fix this?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8f0ec5e1211b0883ee8eba4f62d293f6c5f79e9"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcyMjkyMA==", "bodyText": "how to referred to getting the bpartner name. there's no more C_BP_BankAccount.getC_BPartner(), only C_BP_BankAccount.getC_BPartner_ID(), and i dont think loading the bpdao service and reading the name each time is a good idea.", "url": "https://github.com/metasfresh/metasfresh/pull/6313#discussion_r388722920", "createdAt": "2020-03-06T05:45:20Z", "author": {"login": "TheBestPessimist"}, "path": "de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/exception/BankingException.java", "diffHunk": "@@ -95,8 +95,9 @@ protected ITranslatableString buildMessage()\n \t\tif (targetAcct != null)\n \t\t{\n \t\t\tsb.append(\"Zielkonto:\\n\");\n-\t\t\tsb.append(\"\\tEmpfaenger: \")\n-\t\t\t\t\t.append(targetAcct.getC_BPartner().getName());\n+\t\t\t // TODO tbp: how to fix this?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM5NTc5NA=="}, "originalCommit": {"oid": "a8f0ec5e1211b0883ee8eba4f62d293f6c5f79e9"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcyNDgxNA==", "bodyText": "Generally, i think it's not a terrible idea bc the record is cached if you load it outside of any particular transaction, which the DAO-methods usually do.\nAnd besides: make an educated guess as to what C_BP_BankAccount.getC_BPartner() did under the hood \ud83e\udd13", "url": "https://github.com/metasfresh/metasfresh/pull/6313#discussion_r388724814", "createdAt": "2020-03-06T05:54:39Z", "author": {"login": "metas-ts"}, "path": "de.metas.banking/de.metas.banking.base/src/main/java/de/metas/banking/exception/BankingException.java", "diffHunk": "@@ -95,8 +95,9 @@ protected ITranslatableString buildMessage()\n \t\tif (targetAcct != null)\n \t\t{\n \t\t\tsb.append(\"Zielkonto:\\n\");\n-\t\t\tsb.append(\"\\tEmpfaenger: \")\n-\t\t\t\t\t.append(targetAcct.getC_BPartner().getName());\n+\t\t\t // TODO tbp: how to fix this?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM5NTc5NA=="}, "originalCommit": {"oid": "a8f0ec5e1211b0883ee8eba4f62d293f6c5f79e9"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQwNjMyMDM3OnYy", "diffSide": "RIGHT", "path": "de.metas.payment.esr/src/test/java/de/metas/payment/esr/api/impl/ESRBPBankAccountDAOTest.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNVQxNjowODo0OFrOFyZ1vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0wNlQwNTo1MDowM1rOFyt0aA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM5NjQ3OA==", "bodyText": "there are nice AssertJ things for this; pls let me know next time you write unit tests, I can show you examples", "url": "https://github.com/metasfresh/metasfresh/pull/6313#discussion_r388396478", "createdAt": "2020-03-05T16:08:48Z", "author": {"login": "metas-ts"}, "path": "de.metas.payment.esr/src/test/java/de/metas/payment/esr/api/impl/ESRBPBankAccountDAOTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * #%L\n+ * de.metas.payment.esr\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.payment.esr.api.impl;\n+\n+import com.google.common.collect.ImmutableSet;\n+import org.assertj.core.api.Assertions;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Arrays;\n+\n+import static de.metas.payment.esr.api.impl.ESRBPBankAccountDAO.createMatchingESRAccountNumbers;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class ESRBPBankAccountDAOTest\n+{\n+\t@Nested\n+\tclass MatchingESRAccountNumbersTest\n+\t{\n+\t\t@Test\n+\t\tvoid esrHas9Digits()\n+\t\t{\n+\t\t\tfinal ImmutableSet<String> esrs = createMatchingESRAccountNumbers(\"01-1067-4\");\n+\t\t\tesrs.forEach(s -> assertEquals(9, s.length()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a8f0ec5e1211b0883ee8eba4f62d293f6c5f79e9"}, "originalPosition": 44}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODcyMzgxNg==", "bodyText": "i keep telling to myself i have to learn assertj, but then a new urgent task comes...", "url": "https://github.com/metasfresh/metasfresh/pull/6313#discussion_r388723816", "createdAt": "2020-03-06T05:50:03Z", "author": {"login": "TheBestPessimist"}, "path": "de.metas.payment.esr/src/test/java/de/metas/payment/esr/api/impl/ESRBPBankAccountDAOTest.java", "diffHunk": "@@ -0,0 +1,65 @@\n+/*\n+ * #%L\n+ * de.metas.payment.esr\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.payment.esr.api.impl;\n+\n+import com.google.common.collect.ImmutableSet;\n+import org.assertj.core.api.Assertions;\n+import org.junit.jupiter.api.Nested;\n+import org.junit.jupiter.api.Test;\n+\n+import java.util.Arrays;\n+\n+import static de.metas.payment.esr.api.impl.ESRBPBankAccountDAO.createMatchingESRAccountNumbers;\n+import static org.junit.jupiter.api.Assertions.*;\n+\n+class ESRBPBankAccountDAOTest\n+{\n+\t@Nested\n+\tclass MatchingESRAccountNumbersTest\n+\t{\n+\t\t@Test\n+\t\tvoid esrHas9Digits()\n+\t\t{\n+\t\t\tfinal ImmutableSet<String> esrs = createMatchingESRAccountNumbers(\"01-1067-4\");\n+\t\t\tesrs.forEach(s -> assertEquals(9, s.length()));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4ODM5NjQ3OA=="}, "originalCommit": {"oid": "a8f0ec5e1211b0883ee8eba4f62d293f6c5f79e9"}, "originalPosition": 44}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1412, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}