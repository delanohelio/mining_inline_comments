{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzg3ODQwODA3", "number": 6349, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNTo1Nzo0MFrODn4riQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNTo1Nzo0MFrODn4riQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQzMTQ5NzA1OnYy", "diffSide": "RIGHT", "path": "de.metas.business/src/main/java/de/metas/pricing/service/impl/PricingBL.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNTo1Nzo0MFrOF2JM7Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0xM1QxNTo1Nzo0MFrOF2JM7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM5MjMxODE4OQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tif(quantity == null || quantity.signum() == 0)\n          \n          \n            \n            \t\t{\n          \n          \n            \n            \t\t\tpricingCtx.setQty(BigDecimal.ONE);\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \n          \n          \n            \n            \t\tif (quantity != null)\n          \n          \n            \n            \t\t{\n          \n          \n            \n            \t\t\tif (quantity.signum() != 0)\n          \n          \n            \n            \t\t\t{\n          \n          \n            \n            \t\t\t\tpricingCtx.setQty(quantity.toBigDecimal());\n          \n          \n            \n            \t\t\t}\n          \n          \n            \n            \n          \n          \n            \n            \t\t\tpricingCtx.setUomId(quantity.getUomId());\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \t\tif (quantity == null)\n          \n          \n            \n            \t\t{\t\t\t\n          \n          \n            \n            \t\t\tpricingCtx.setQty(ONE);\n          \n          \n            \n            \t\t} \n          \n          \n            \n            \t\telse \n          \n          \n            \n            \t\t{\n          \n          \n            \n            \t\t\tpricingCtx.setQty(quantity.isZero() ? ONE: quantity.toBigDecimal());\n          \n          \n            \n            \t\t\tpricingCtx.setUomId(quantity.getUomId());\n          \n          \n            \n            \t\t}\n          \n      \n    \n    \n  \n\nif think this should be equivalent, pls check. at any rate, i think it's clearer", "url": "https://github.com/metasfresh/metasfresh/pull/6349#discussion_r392318189", "createdAt": "2020-03-13T15:57:40Z", "author": {"login": "metas-ts"}, "path": "de.metas.business/src/main/java/de/metas/pricing/service/impl/PricingBL.java", "diffHunk": "@@ -113,18 +113,22 @@ public IEditablePricingContext createInitialContext(\n \t\tpricingCtx.setBPartnerId(bPartnerId);\n \t\tpricingCtx.setConvertPriceToContextUOM(true); // backward compatibility\n \n+\n+\t\tif(quantity == null || quantity.signum() == 0)\n+\t\t{\n+\t\t\tpricingCtx.setQty(BigDecimal.ONE);\n+\t\t}\n+\n \t\tif (quantity != null)\n \t\t{\n \t\t\tif (quantity.signum() != 0)\n \t\t\t{\n \t\t\t\tpricingCtx.setQty(quantity.toBigDecimal());\n \t\t\t}\n+\n \t\t\tpricingCtx.setUomId(quantity.getUomId());\n \t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "06c58bbb936721cee7b19e4fb6a19eedb4625899"}, "originalPosition": 18}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1431, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}