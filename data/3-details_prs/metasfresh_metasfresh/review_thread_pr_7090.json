{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDYyNTU2MDM4", "number": 7090, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMDozMjozOVrOEVxbig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODo0Njo0OVrOEWIgzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjY1NDE4OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/comments/CommentEntryRepository.java", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMDozMjozOVrOG8t6Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOTozNDoxMVrOG9TRHw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMxOTg5MA==", "bodyText": "pls use the return value of this function instead of stressing the cache for each value...", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466319890", "createdAt": "2020-08-06T10:32:39Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/comments/CommentEntryRepository.java", "diffHunk": "@@ -89,6 +108,17 @@ public void createCommentEntry(final @NonNull String characterData, @NonNull fin\n \t\t\t\t.collect(GuavaCollectors.toImmutableList());\n \t}\n \n+\t@NonNull\n+\tpublic Map<TableRecordReference, Boolean> hasComments(@NonNull final Collection<TableRecordReference> references)\n+\t{\n+\t\tfinal ImmutableMap.Builder<TableRecordReference, Boolean> result = ImmutableMap.builder();\n+\n+\t\treferenceHasCommentsCache.getAllOrLoad(references, this::checkReferenceHasComments);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d4800cb54cf788e2c0ca09b04a937ad09acec2c"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM3NDU1Ng==", "bodyText": "getAllOrLoad returns a collection of booleans, and their order is not guaranteed.\nI can't really use the return value of the function call, because i cannot match the TRR with the respective result.", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466374556", "createdAt": "2020-08-06T12:26:13Z", "author": {"login": "TheBestPessimist"}, "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/comments/CommentEntryRepository.java", "diffHunk": "@@ -89,6 +108,17 @@ public void createCommentEntry(final @NonNull String characterData, @NonNull fin\n \t\t\t\t.collect(GuavaCollectors.toImmutableList());\n \t}\n \n+\t@NonNull\n+\tpublic Map<TableRecordReference, Boolean> hasComments(@NonNull final Collection<TableRecordReference> references)\n+\t{\n+\t\tfinal ImmutableMap.Builder<TableRecordReference, Boolean> result = ImmutableMap.builder();\n+\n+\t\treferenceHasCommentsCache.getAllOrLoad(references, this::checkReferenceHasComments);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMxOTg5MA=="}, "originalCommit": {"oid": "5d4800cb54cf788e2c0ca09b04a937ad09acec2c"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQxOTYxNg==", "bodyText": "clarified with teo. it's fine like this", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466419616", "createdAt": "2020-08-06T13:40:11Z", "author": {"login": "TheBestPessimist"}, "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/comments/CommentEntryRepository.java", "diffHunk": "@@ -89,6 +108,17 @@ public void createCommentEntry(final @NonNull String characterData, @NonNull fin\n \t\t\t\t.collect(GuavaCollectors.toImmutableList());\n \t}\n \n+\t@NonNull\n+\tpublic Map<TableRecordReference, Boolean> hasComments(@NonNull final Collection<TableRecordReference> references)\n+\t{\n+\t\tfinal ImmutableMap.Builder<TableRecordReference, Boolean> result = ImmutableMap.builder();\n+\n+\t\treferenceHasCommentsCache.getAllOrLoad(references, this::checkReferenceHasComments);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMxOTg5MA=="}, "originalCommit": {"oid": "5d4800cb54cf788e2c0ca09b04a937ad09acec2c"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkwNDEzMw==", "bodyText": "no no, pls:\n\nintroduce ReferenceSummary private static class\nrename referenceHasCommentsCache to referenceSummaryCache\n\nthen u will be able to use it something like\nList<ReferenceComment> referenceSummaryList = referenceHasCommentsCache.getAllOrLoad(references, this::checkReferenceHasComments);\n\nreturn referenceSummaryList.stream()\n.collect(ImmutableMap.toImmutableMap(ReferenceComment::getRecordRef, ReferenceComment::hasComments));", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466904133", "createdAt": "2020-08-07T08:39:12Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/comments/CommentEntryRepository.java", "diffHunk": "@@ -89,6 +108,17 @@ public void createCommentEntry(final @NonNull String characterData, @NonNull fin\n \t\t\t\t.collect(GuavaCollectors.toImmutableList());\n \t}\n \n+\t@NonNull\n+\tpublic Map<TableRecordReference, Boolean> hasComments(@NonNull final Collection<TableRecordReference> references)\n+\t{\n+\t\tfinal ImmutableMap.Builder<TableRecordReference, Boolean> result = ImmutableMap.builder();\n+\n+\t\treferenceHasCommentsCache.getAllOrLoad(references, this::checkReferenceHasComments);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMxOTg5MA=="}, "originalCommit": {"oid": "5d4800cb54cf788e2c0ca09b04a937ad09acec2c"}, "originalPosition": 66}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMTk5OQ==", "bodyText": "done", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466931999", "createdAt": "2020-08-07T09:34:11Z", "author": {"login": "TheBestPessimist"}, "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/comments/CommentEntryRepository.java", "diffHunk": "@@ -89,6 +108,17 @@ public void createCommentEntry(final @NonNull String characterData, @NonNull fin\n \t\t\t\t.collect(GuavaCollectors.toImmutableList());\n \t}\n \n+\t@NonNull\n+\tpublic Map<TableRecordReference, Boolean> hasComments(@NonNull final Collection<TableRecordReference> references)\n+\t{\n+\t\tfinal ImmutableMap.Builder<TableRecordReference, Boolean> result = ImmutableMap.builder();\n+\n+\t\treferenceHasCommentsCache.getAllOrLoad(references, this::checkReferenceHasComments);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMxOTg5MA=="}, "originalCommit": {"oid": "5d4800cb54cf788e2c0ca09b04a937ad09acec2c"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjY1NjI4OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/comments/CommentEntryRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMDozMzoxN1rOG8t7Xg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMjoyNzozOVrOG8xSxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyMDIyMg==", "bodyText": "better just invalidate the cache for that tableRecordReference.\nkeep in mind that ur method is executed in trx...", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466320222", "createdAt": "2020-08-06T10:33:17Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/comments/CommentEntryRepository.java", "diffHunk": "@@ -67,6 +84,8 @@ public void createCommentEntry(final @NonNull String characterData, @NonNull fin\n \t\tchatEntry.setCharacterData(characterData);\n \t\tchatEntry.setChatEntryType(X_CM_ChatEntry.CHATENTRYTYPE_NoteFlat);\n \t\tInterfaceWrapperHelper.save(chatEntry);\n+\n+\t\treferenceHasCommentsCache.put(tableRecordReference, true);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d4800cb54cf788e2c0ca09b04a937ad09acec2c"}, "originalPosition": 53}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM3NTM2NA==", "bodyText": "done", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466375364", "createdAt": "2020-08-06T12:27:39Z", "author": {"login": "TheBestPessimist"}, "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/comments/CommentEntryRepository.java", "diffHunk": "@@ -67,6 +84,8 @@ public void createCommentEntry(final @NonNull String characterData, @NonNull fin\n \t\tchatEntry.setCharacterData(characterData);\n \t\tchatEntry.setChatEntryType(X_CM_ChatEntry.CHATENTRYTYPE_NoteFlat);\n \t\tInterfaceWrapperHelper.save(chatEntry);\n+\n+\t\treferenceHasCommentsCache.put(tableRecordReference, true);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyMDIyMg=="}, "originalCommit": {"oid": "5d4800cb54cf788e2c0ca09b04a937ad09acec2c"}, "originalPosition": 53}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjY1NzMwOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/comments/CommentEntryRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMDozMzozOFrOG8t79g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMjoyNzo1NFrOG8xTUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyMDM3NA==", "bodyText": "that's a bit too much. IMHO 1000 would be sufficient.", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466320374", "createdAt": "2020-08-06T10:33:38Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/comments/CommentEntryRepository.java", "diffHunk": "@@ -57,6 +67,13 @@\n \tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n \tprivate final IADTableDAO tableDAO = Services.get(IADTableDAO.class);\n \n+\tprivate final CCache<TableRecordReference, Boolean> referenceHasCommentsCache = CCache.<TableRecordReference, Boolean>builder()\n+\t\t\t.cacheName(\"referenceHasCommentsCache\")\n+\t\t\t.cacheMapType(CCache.CacheMapType.LRU)\n+\t\t\t.initialCapacity(10_000)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d4800cb54cf788e2c0ca09b04a937ad09acec2c"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM3NTUwNg==", "bodyText": "done", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466375506", "createdAt": "2020-08-06T12:27:54Z", "author": {"login": "TheBestPessimist"}, "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/comments/CommentEntryRepository.java", "diffHunk": "@@ -57,6 +67,13 @@\n \tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n \tprivate final IADTableDAO tableDAO = Services.get(IADTableDAO.class);\n \n+\tprivate final CCache<TableRecordReference, Boolean> referenceHasCommentsCache = CCache.<TableRecordReference, Boolean>builder()\n+\t\t\t.cacheName(\"referenceHasCommentsCache\")\n+\t\t\t.cacheMapType(CCache.CacheMapType.LRU)\n+\t\t\t.initialCapacity(10_000)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyMDM3NA=="}, "originalCommit": {"oid": "5d4800cb54cf788e2c0ca09b04a937ad09acec2c"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjY2MjQ3OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/comments/CommentEntryRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMDozNTowNVrOG8t-4w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMjoyOTowOVrOG8xV8w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyMTEyMw==", "bodyText": "instead of tablesForRecords i would call it recordIdsByTableId", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466321123", "createdAt": "2020-08-06T10:35:05Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/comments/CommentEntryRepository.java", "diffHunk": "@@ -131,10 +161,45 @@ private CommentEntryParentId getOrCreateParent(final @NonNull TableRecordReferen\n \tprivate CommentEntryParentId getParentIdOrNull(final @NonNull TableRecordReference tableRecordReference)\n \t{\n \t\treturn queryBL.createQueryBuilder(I_CM_Chat.class)\n+\t\t\t\t.addOnlyActiveRecordsFilter()\n \t\t\t\t.addEqualsFilter(I_CM_Chat.COLUMNNAME_AD_Table_ID, tableRecordReference.getAD_Table_ID())\n \t\t\t\t.addEqualsFilter(I_CM_Chat.COLUMNNAME_Record_ID, tableRecordReference.getRecord_ID())\n \t\t\t\t.orderBy(I_CM_Chat.COLUMNNAME_CM_Chat_ID)\n \t\t\t\t.create()\n \t\t\t\t.firstId(CommentEntryParentId::ofRepoIdOrNull);\n \t}\n+\n+\t@NonNull\n+\tprivate Map<TableRecordReference, Boolean> checkReferenceHasComments(@NonNull final Collection<TableRecordReference> referencesUnknownStatus)\n+\t{\n+\t\tfinal ImmutableListMultimap<Integer, Integer> tablesForRecords = referencesUnknownStatus.stream()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d4800cb54cf788e2c0ca09b04a937ad09acec2c"}, "originalPosition": 90}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM3NjE3OQ==", "bodyText": "That's a better name. Done", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466376179", "createdAt": "2020-08-06T12:29:09Z", "author": {"login": "TheBestPessimist"}, "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/comments/CommentEntryRepository.java", "diffHunk": "@@ -131,10 +161,45 @@ private CommentEntryParentId getOrCreateParent(final @NonNull TableRecordReferen\n \tprivate CommentEntryParentId getParentIdOrNull(final @NonNull TableRecordReference tableRecordReference)\n \t{\n \t\treturn queryBL.createQueryBuilder(I_CM_Chat.class)\n+\t\t\t\t.addOnlyActiveRecordsFilter()\n \t\t\t\t.addEqualsFilter(I_CM_Chat.COLUMNNAME_AD_Table_ID, tableRecordReference.getAD_Table_ID())\n \t\t\t\t.addEqualsFilter(I_CM_Chat.COLUMNNAME_Record_ID, tableRecordReference.getRecord_ID())\n \t\t\t\t.orderBy(I_CM_Chat.COLUMNNAME_CM_Chat_ID)\n \t\t\t\t.create()\n \t\t\t\t.firstId(CommentEntryParentId::ofRepoIdOrNull);\n \t}\n+\n+\t@NonNull\n+\tprivate Map<TableRecordReference, Boolean> checkReferenceHasComments(@NonNull final Collection<TableRecordReference> referencesUnknownStatus)\n+\t{\n+\t\tfinal ImmutableListMultimap<Integer, Integer> tablesForRecords = referencesUnknownStatus.stream()", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyMTEyMw=="}, "originalCommit": {"oid": "5d4800cb54cf788e2c0ca09b04a937ad09acec2c"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjY2NDk5OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/comments/CommentEntryRepository.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMDozNTo1M1rOG8uAUw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzo1MjoxNVrOG80gow==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyMTQ5MQ==", "bodyText": "but why?", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466321491", "createdAt": "2020-08-06T10:35:53Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/comments/CommentEntryRepository.java", "diffHunk": "@@ -131,10 +161,45 @@ private CommentEntryParentId getOrCreateParent(final @NonNull TableRecordReferen\n \tprivate CommentEntryParentId getParentIdOrNull(final @NonNull TableRecordReference tableRecordReference)\n \t{\n \t\treturn queryBL.createQueryBuilder(I_CM_Chat.class)\n+\t\t\t\t.addOnlyActiveRecordsFilter()\n \t\t\t\t.addEqualsFilter(I_CM_Chat.COLUMNNAME_AD_Table_ID, tableRecordReference.getAD_Table_ID())\n \t\t\t\t.addEqualsFilter(I_CM_Chat.COLUMNNAME_Record_ID, tableRecordReference.getRecord_ID())\n \t\t\t\t.orderBy(I_CM_Chat.COLUMNNAME_CM_Chat_ID)\n \t\t\t\t.create()\n \t\t\t\t.firstId(CommentEntryParentId::ofRepoIdOrNull);\n \t}\n+\n+\t@NonNull\n+\tprivate Map<TableRecordReference, Boolean> checkReferenceHasComments(@NonNull final Collection<TableRecordReference> referencesUnknownStatus)\n+\t{\n+\t\tfinal ImmutableListMultimap<Integer, Integer> tablesForRecords = referencesUnknownStatus.stream()\n+\t\t\t\t.collect(ImmutableListMultimap.toImmutableListMultimap(TableRecordReference::getAD_Table_ID, TableRecordReference::getRecord_ID));\n+\n+\t\t// first query returns nothing. Rest of the queries return the correct data\n+\t\tfinal IQuery<I_CM_Chat> query = queryBL.createQueryBuilder(I_CM_Chat.class)\n+\t\t\t\t.addEqualsFilter(I_CM_Chat.COLUMNNAME_CM_Chat_ID, -1)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d4800cb54cf788e2c0ca09b04a937ad09acec2c"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyMTU1OQ==", "bodyText": ":(((", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466321559", "createdAt": "2020-08-06T10:36:01Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/comments/CommentEntryRepository.java", "diffHunk": "@@ -131,10 +161,45 @@ private CommentEntryParentId getOrCreateParent(final @NonNull TableRecordReferen\n \tprivate CommentEntryParentId getParentIdOrNull(final @NonNull TableRecordReference tableRecordReference)\n \t{\n \t\treturn queryBL.createQueryBuilder(I_CM_Chat.class)\n+\t\t\t\t.addOnlyActiveRecordsFilter()\n \t\t\t\t.addEqualsFilter(I_CM_Chat.COLUMNNAME_AD_Table_ID, tableRecordReference.getAD_Table_ID())\n \t\t\t\t.addEqualsFilter(I_CM_Chat.COLUMNNAME_Record_ID, tableRecordReference.getRecord_ID())\n \t\t\t\t.orderBy(I_CM_Chat.COLUMNNAME_CM_Chat_ID)\n \t\t\t\t.create()\n \t\t\t\t.firstId(CommentEntryParentId::ofRepoIdOrNull);\n \t}\n+\n+\t@NonNull\n+\tprivate Map<TableRecordReference, Boolean> checkReferenceHasComments(@NonNull final Collection<TableRecordReference> referencesUnknownStatus)\n+\t{\n+\t\tfinal ImmutableListMultimap<Integer, Integer> tablesForRecords = referencesUnknownStatus.stream()\n+\t\t\t\t.collect(ImmutableListMultimap.toImmutableListMultimap(TableRecordReference::getAD_Table_ID, TableRecordReference::getRecord_ID));\n+\n+\t\t// first query returns nothing. Rest of the queries return the correct data\n+\t\tfinal IQuery<I_CM_Chat> query = queryBL.createQueryBuilder(I_CM_Chat.class)\n+\t\t\t\t.addEqualsFilter(I_CM_Chat.COLUMNNAME_CM_Chat_ID, -1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyMTQ5MQ=="}, "originalCommit": {"oid": "5d4800cb54cf788e2c0ca09b04a937ad09acec2c"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQyODA2Nw==", "bodyText": "Teo suggested to use .reduce(IQuery.unionDistict()).\nTIL", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466428067", "createdAt": "2020-08-06T13:52:15Z", "author": {"login": "TheBestPessimist"}, "path": "backend/de.metas.adempiere.adempiere/base/src/main/java/de/metas/comments/CommentEntryRepository.java", "diffHunk": "@@ -131,10 +161,45 @@ private CommentEntryParentId getOrCreateParent(final @NonNull TableRecordReferen\n \tprivate CommentEntryParentId getParentIdOrNull(final @NonNull TableRecordReference tableRecordReference)\n \t{\n \t\treturn queryBL.createQueryBuilder(I_CM_Chat.class)\n+\t\t\t\t.addOnlyActiveRecordsFilter()\n \t\t\t\t.addEqualsFilter(I_CM_Chat.COLUMNNAME_AD_Table_ID, tableRecordReference.getAD_Table_ID())\n \t\t\t\t.addEqualsFilter(I_CM_Chat.COLUMNNAME_Record_ID, tableRecordReference.getRecord_ID())\n \t\t\t\t.orderBy(I_CM_Chat.COLUMNNAME_CM_Chat_ID)\n \t\t\t\t.create()\n \t\t\t\t.firstId(CommentEntryParentId::ofRepoIdOrNull);\n \t}\n+\n+\t@NonNull\n+\tprivate Map<TableRecordReference, Boolean> checkReferenceHasComments(@NonNull final Collection<TableRecordReference> referencesUnknownStatus)\n+\t{\n+\t\tfinal ImmutableListMultimap<Integer, Integer> tablesForRecords = referencesUnknownStatus.stream()\n+\t\t\t\t.collect(ImmutableListMultimap.toImmutableListMultimap(TableRecordReference::getAD_Table_ID, TableRecordReference::getRecord_ID));\n+\n+\t\t// first query returns nothing. Rest of the queries return the correct data\n+\t\tfinal IQuery<I_CM_Chat> query = queryBL.createQueryBuilder(I_CM_Chat.class)\n+\t\t\t\t.addEqualsFilter(I_CM_Chat.COLUMNNAME_CM_Chat_ID, -1)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyMTQ5MQ=="}, "originalCommit": {"oid": "5d4800cb54cf788e2c0ca09b04a937ad09acec2c"}, "originalPosition": 95}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjY3MzA5OnYy", "diffSide": "RIGHT", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/comments/CommentsService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMDozODo1MVrOG8uFtA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzowOToxOVrOG8yvpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyMjg2OA==", "bodyText": "avoid using mutable objects as constants", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466322868", "createdAt": "2020-08-06T10:38:51Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/comments/CommentsService.java", "diffHunk": "@@ -22,37 +22,104 @@\n \n package de.metas.ui.web.comments;\n \n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import de.metas.comments.CommentEntry;\n import de.metas.comments.CommentEntryRepository;\n import de.metas.ui.web.comments.json.JSONComment;\n import de.metas.ui.web.comments.json.JSONCommentCreateRequest;\n+import de.metas.ui.web.view.IViewRow;\n+import de.metas.ui.web.window.datatypes.DocumentPath;\n import de.metas.ui.web.window.datatypes.json.DateTimeConverters;\n+import de.metas.ui.web.window.descriptor.factory.DocumentDescriptorFactory;\n import de.metas.user.api.IUserDAO;\n import de.metas.util.GuavaCollectors;\n+import de.metas.util.ImmutableMapEntry;\n import de.metas.util.Services;\n import lombok.NonNull;\n import org.adempiere.util.lang.impl.TableRecordReference;\n import org.springframework.stereotype.Service;\n \n+import javax.annotation.Nullable;\n import java.time.ZoneId;\n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.Comparator;\n+import java.util.IdentityHashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n \n @Service\n public class CommentsService\n {\n \tprivate final CommentEntryRepository commentEntryRepository;\n+\tprivate final DocumentDescriptorFactory documentDescriptorFactory;\n \tfinal IUserDAO userDAO = Services.get(IUserDAO.class);\n \n-\tpublic CommentsService(final CommentEntryRepository commentEntryRepository)\n+\tpublic static final IdentityHashMap<IViewRow, Boolean> NO_COMMENTS = new IdentityHashMap<>(0);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d4800cb54cf788e2c0ca09b04a937ad09acec2c"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyODEyMw==", "bodyText": "for me now it becomes obvious that\n\ninstead of IdentityHashMap<IViewRow, Boolean> we shall introduce our ViewRowComments class\ninside ViewRowComments avoid, instead of indexing by IViewRow, indexing by row id's would be sufficient (DocumentId)\navoid indexing by fat objects by all means\nmake sure ViewRowComments it's immutable (i.e. use ImmutbleMap inside it)", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466328123", "createdAt": "2020-08-06T10:49:18Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/comments/CommentsService.java", "diffHunk": "@@ -22,37 +22,104 @@\n \n package de.metas.ui.web.comments;\n \n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import de.metas.comments.CommentEntry;\n import de.metas.comments.CommentEntryRepository;\n import de.metas.ui.web.comments.json.JSONComment;\n import de.metas.ui.web.comments.json.JSONCommentCreateRequest;\n+import de.metas.ui.web.view.IViewRow;\n+import de.metas.ui.web.window.datatypes.DocumentPath;\n import de.metas.ui.web.window.datatypes.json.DateTimeConverters;\n+import de.metas.ui.web.window.descriptor.factory.DocumentDescriptorFactory;\n import de.metas.user.api.IUserDAO;\n import de.metas.util.GuavaCollectors;\n+import de.metas.util.ImmutableMapEntry;\n import de.metas.util.Services;\n import lombok.NonNull;\n import org.adempiere.util.lang.impl.TableRecordReference;\n import org.springframework.stereotype.Service;\n \n+import javax.annotation.Nullable;\n import java.time.ZoneId;\n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.Comparator;\n+import java.util.IdentityHashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n \n @Service\n public class CommentsService\n {\n \tprivate final CommentEntryRepository commentEntryRepository;\n+\tprivate final DocumentDescriptorFactory documentDescriptorFactory;\n \tfinal IUserDAO userDAO = Services.get(IUserDAO.class);\n \n-\tpublic CommentsService(final CommentEntryRepository commentEntryRepository)\n+\tpublic static final IdentityHashMap<IViewRow, Boolean> NO_COMMENTS = new IdentityHashMap<>(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyMjg2OA=="}, "originalCommit": {"oid": "5d4800cb54cf788e2c0ca09b04a937ad09acec2c"}, "originalPosition": 41}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM5OTE0MQ==", "bodyText": "done", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466399141", "createdAt": "2020-08-06T13:09:19Z", "author": {"login": "TheBestPessimist"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/comments/CommentsService.java", "diffHunk": "@@ -22,37 +22,104 @@\n \n package de.metas.ui.web.comments;\n \n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import de.metas.comments.CommentEntry;\n import de.metas.comments.CommentEntryRepository;\n import de.metas.ui.web.comments.json.JSONComment;\n import de.metas.ui.web.comments.json.JSONCommentCreateRequest;\n+import de.metas.ui.web.view.IViewRow;\n+import de.metas.ui.web.window.datatypes.DocumentPath;\n import de.metas.ui.web.window.datatypes.json.DateTimeConverters;\n+import de.metas.ui.web.window.descriptor.factory.DocumentDescriptorFactory;\n import de.metas.user.api.IUserDAO;\n import de.metas.util.GuavaCollectors;\n+import de.metas.util.ImmutableMapEntry;\n import de.metas.util.Services;\n import lombok.NonNull;\n import org.adempiere.util.lang.impl.TableRecordReference;\n import org.springframework.stereotype.Service;\n \n+import javax.annotation.Nullable;\n import java.time.ZoneId;\n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.Comparator;\n+import java.util.IdentityHashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n \n @Service\n public class CommentsService\n {\n \tprivate final CommentEntryRepository commentEntryRepository;\n+\tprivate final DocumentDescriptorFactory documentDescriptorFactory;\n \tfinal IUserDAO userDAO = Services.get(IUserDAO.class);\n \n-\tpublic CommentsService(final CommentEntryRepository commentEntryRepository)\n+\tpublic static final IdentityHashMap<IViewRow, Boolean> NO_COMMENTS = new IdentityHashMap<>(0);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyMjg2OA=="}, "originalCommit": {"oid": "5d4800cb54cf788e2c0ca09b04a937ad09acec2c"}, "originalPosition": 41}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjY3NDgwOnYy", "diffSide": "RIGHT", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/comments/CommentsService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMDozOToyNlrOG8uGvg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMzo0MDoyNVrOG80AUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyMzEzNA==", "bodyText": "why not @NonNull row?", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466323134", "createdAt": "2020-08-06T10:39:26Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/comments/CommentsService.java", "diffHunk": "@@ -22,37 +22,104 @@\n \n package de.metas.ui.web.comments;\n \n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import de.metas.comments.CommentEntry;\n import de.metas.comments.CommentEntryRepository;\n import de.metas.ui.web.comments.json.JSONComment;\n import de.metas.ui.web.comments.json.JSONCommentCreateRequest;\n+import de.metas.ui.web.view.IViewRow;\n+import de.metas.ui.web.window.datatypes.DocumentPath;\n import de.metas.ui.web.window.datatypes.json.DateTimeConverters;\n+import de.metas.ui.web.window.descriptor.factory.DocumentDescriptorFactory;\n import de.metas.user.api.IUserDAO;\n import de.metas.util.GuavaCollectors;\n+import de.metas.util.ImmutableMapEntry;\n import de.metas.util.Services;\n import lombok.NonNull;\n import org.adempiere.util.lang.impl.TableRecordReference;\n import org.springframework.stereotype.Service;\n \n+import javax.annotation.Nullable;\n import java.time.ZoneId;\n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.Comparator;\n+import java.util.IdentityHashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n \n @Service\n public class CommentsService\n {\n \tprivate final CommentEntryRepository commentEntryRepository;\n+\tprivate final DocumentDescriptorFactory documentDescriptorFactory;\n \tfinal IUserDAO userDAO = Services.get(IUserDAO.class);\n \n-\tpublic CommentsService(final CommentEntryRepository commentEntryRepository)\n+\tpublic static final IdentityHashMap<IViewRow, Boolean> NO_COMMENTS = new IdentityHashMap<>(0);\n+\n+\tpublic CommentsService(final CommentEntryRepository commentEntryRepository, final DocumentDescriptorFactory documentDescriptorFactory)\n \t{\n \t\tthis.commentEntryRepository = commentEntryRepository;\n+\t\tthis.documentDescriptorFactory = documentDescriptorFactory;\n+\t}\n+\n+\t@NonNull\n+\tpublic final IdentityHashMap<IViewRow, Boolean> hasComments(@Nullable final IViewRow row)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d4800cb54cf788e2c0ca09b04a937ad09acec2c"}, "originalPosition": 50}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjQxOTc5NA==", "bodyText": "at some point i got an error in a view, not sure where.", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466419794", "createdAt": "2020-08-06T13:40:25Z", "author": {"login": "TheBestPessimist"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/comments/CommentsService.java", "diffHunk": "@@ -22,37 +22,104 @@\n \n package de.metas.ui.web.comments;\n \n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import de.metas.comments.CommentEntry;\n import de.metas.comments.CommentEntryRepository;\n import de.metas.ui.web.comments.json.JSONComment;\n import de.metas.ui.web.comments.json.JSONCommentCreateRequest;\n+import de.metas.ui.web.view.IViewRow;\n+import de.metas.ui.web.window.datatypes.DocumentPath;\n import de.metas.ui.web.window.datatypes.json.DateTimeConverters;\n+import de.metas.ui.web.window.descriptor.factory.DocumentDescriptorFactory;\n import de.metas.user.api.IUserDAO;\n import de.metas.util.GuavaCollectors;\n+import de.metas.util.ImmutableMapEntry;\n import de.metas.util.Services;\n import lombok.NonNull;\n import org.adempiere.util.lang.impl.TableRecordReference;\n import org.springframework.stereotype.Service;\n \n+import javax.annotation.Nullable;\n import java.time.ZoneId;\n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.Comparator;\n+import java.util.IdentityHashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n \n @Service\n public class CommentsService\n {\n \tprivate final CommentEntryRepository commentEntryRepository;\n+\tprivate final DocumentDescriptorFactory documentDescriptorFactory;\n \tfinal IUserDAO userDAO = Services.get(IUserDAO.class);\n \n-\tpublic CommentsService(final CommentEntryRepository commentEntryRepository)\n+\tpublic static final IdentityHashMap<IViewRow, Boolean> NO_COMMENTS = new IdentityHashMap<>(0);\n+\n+\tpublic CommentsService(final CommentEntryRepository commentEntryRepository, final DocumentDescriptorFactory documentDescriptorFactory)\n \t{\n \t\tthis.commentEntryRepository = commentEntryRepository;\n+\t\tthis.documentDescriptorFactory = documentDescriptorFactory;\n+\t}\n+\n+\t@NonNull\n+\tpublic final IdentityHashMap<IViewRow, Boolean> hasComments(@Nullable final IViewRow row)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyMzEzNA=="}, "originalCommit": {"oid": "5d4800cb54cf788e2c0ca09b04a937ad09acec2c"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjY4MTE0OnYy", "diffSide": "RIGHT", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/comments/CommentsService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMDo0MToyMlrOG8uKow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMjo0MTo0MlrOG8xwrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyNDEzMQ==", "bodyText": "why Boolean object and not primitive boolean?", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466324131", "createdAt": "2020-08-06T10:41:22Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/comments/CommentsService.java", "diffHunk": "@@ -22,37 +22,104 @@\n \n package de.metas.ui.web.comments;\n \n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import de.metas.comments.CommentEntry;\n import de.metas.comments.CommentEntryRepository;\n import de.metas.ui.web.comments.json.JSONComment;\n import de.metas.ui.web.comments.json.JSONCommentCreateRequest;\n+import de.metas.ui.web.view.IViewRow;\n+import de.metas.ui.web.window.datatypes.DocumentPath;\n import de.metas.ui.web.window.datatypes.json.DateTimeConverters;\n+import de.metas.ui.web.window.descriptor.factory.DocumentDescriptorFactory;\n import de.metas.user.api.IUserDAO;\n import de.metas.util.GuavaCollectors;\n+import de.metas.util.ImmutableMapEntry;\n import de.metas.util.Services;\n import lombok.NonNull;\n import org.adempiere.util.lang.impl.TableRecordReference;\n import org.springframework.stereotype.Service;\n \n+import javax.annotation.Nullable;\n import java.time.ZoneId;\n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.Comparator;\n+import java.util.IdentityHashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n \n @Service\n public class CommentsService\n {\n \tprivate final CommentEntryRepository commentEntryRepository;\n+\tprivate final DocumentDescriptorFactory documentDescriptorFactory;\n \tfinal IUserDAO userDAO = Services.get(IUserDAO.class);\n \n-\tpublic CommentsService(final CommentEntryRepository commentEntryRepository)\n+\tpublic static final IdentityHashMap<IViewRow, Boolean> NO_COMMENTS = new IdentityHashMap<>(0);\n+\n+\tpublic CommentsService(final CommentEntryRepository commentEntryRepository, final DocumentDescriptorFactory documentDescriptorFactory)\n \t{\n \t\tthis.commentEntryRepository = commentEntryRepository;\n+\t\tthis.documentDescriptorFactory = documentDescriptorFactory;\n+\t}\n+\n+\t@NonNull\n+\tpublic final IdentityHashMap<IViewRow, Boolean> hasComments(@Nullable final IViewRow row)\n+\t{\n+\t\tif (row == null)\n+\t\t{\n+\t\t\treturn NO_COMMENTS;\n+\t\t}\n+\n+\t\treturn hasComments(Collections.singletonList(row));\n+\t}\n+\n+\t@NonNull\n+\tpublic final IdentityHashMap<IViewRow, Boolean> hasComments(@NonNull final Collection<? extends IViewRow> rows)\n+\t{\n+\t\tif (rows.isEmpty())\n+\t\t{\n+\t\t\treturn NO_COMMENTS;\n+\t\t}\n+\n+\t\tfinal ImmutableMap<IViewRow, TableRecordReference> rowsForReferences = rows.stream()\n+\t\t\t\t.flatMap(IViewRow::streamRecursive)\n+\t\t\t\t.flatMap(this::toStreamOfValidTableReferences)\n+\t\t\t\t.collect(GuavaCollectors.toImmutableMap());\n+\n+\t\tfinal Map<TableRecordReference, Boolean> referencesWithComments = commentEntryRepository.hasComments(rowsForReferences.values());\n+\n+\t\tfinal IdentityHashMap<IViewRow, Boolean> result = new IdentityHashMap<>();\n+\t\tfor (final IViewRow row : rows)\n+\t\t{\n+\t\t\tfinal TableRecordReference ref = rowsForReferences.get(row);\n+\t\t\tresult.put(row, referencesWithComments.getOrDefault(ref, false));\n+\t\t}\n+\n+\t\treturn result;\n \t}\n \n \t@NonNull\n-\tpublic List<JSONComment> getCommentsFor(@NonNull final TableRecordReference tableRecordReference, final ZoneId zoneId)\n+\tpublic Boolean hasComments(@NonNull final DocumentPath documentPath)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d4800cb54cf788e2c0ca09b04a937ad09acec2c"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM4MzAyMw==", "bodyText": "mistake", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466383023", "createdAt": "2020-08-06T12:41:42Z", "author": {"login": "TheBestPessimist"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/comments/CommentsService.java", "diffHunk": "@@ -22,37 +22,104 @@\n \n package de.metas.ui.web.comments;\n \n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import de.metas.comments.CommentEntry;\n import de.metas.comments.CommentEntryRepository;\n import de.metas.ui.web.comments.json.JSONComment;\n import de.metas.ui.web.comments.json.JSONCommentCreateRequest;\n+import de.metas.ui.web.view.IViewRow;\n+import de.metas.ui.web.window.datatypes.DocumentPath;\n import de.metas.ui.web.window.datatypes.json.DateTimeConverters;\n+import de.metas.ui.web.window.descriptor.factory.DocumentDescriptorFactory;\n import de.metas.user.api.IUserDAO;\n import de.metas.util.GuavaCollectors;\n+import de.metas.util.ImmutableMapEntry;\n import de.metas.util.Services;\n import lombok.NonNull;\n import org.adempiere.util.lang.impl.TableRecordReference;\n import org.springframework.stereotype.Service;\n \n+import javax.annotation.Nullable;\n import java.time.ZoneId;\n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.Comparator;\n+import java.util.IdentityHashMap;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n \n @Service\n public class CommentsService\n {\n \tprivate final CommentEntryRepository commentEntryRepository;\n+\tprivate final DocumentDescriptorFactory documentDescriptorFactory;\n \tfinal IUserDAO userDAO = Services.get(IUserDAO.class);\n \n-\tpublic CommentsService(final CommentEntryRepository commentEntryRepository)\n+\tpublic static final IdentityHashMap<IViewRow, Boolean> NO_COMMENTS = new IdentityHashMap<>(0);\n+\n+\tpublic CommentsService(final CommentEntryRepository commentEntryRepository, final DocumentDescriptorFactory documentDescriptorFactory)\n \t{\n \t\tthis.commentEntryRepository = commentEntryRepository;\n+\t\tthis.documentDescriptorFactory = documentDescriptorFactory;\n+\t}\n+\n+\t@NonNull\n+\tpublic final IdentityHashMap<IViewRow, Boolean> hasComments(@Nullable final IViewRow row)\n+\t{\n+\t\tif (row == null)\n+\t\t{\n+\t\t\treturn NO_COMMENTS;\n+\t\t}\n+\n+\t\treturn hasComments(Collections.singletonList(row));\n+\t}\n+\n+\t@NonNull\n+\tpublic final IdentityHashMap<IViewRow, Boolean> hasComments(@NonNull final Collection<? extends IViewRow> rows)\n+\t{\n+\t\tif (rows.isEmpty())\n+\t\t{\n+\t\t\treturn NO_COMMENTS;\n+\t\t}\n+\n+\t\tfinal ImmutableMap<IViewRow, TableRecordReference> rowsForReferences = rows.stream()\n+\t\t\t\t.flatMap(IViewRow::streamRecursive)\n+\t\t\t\t.flatMap(this::toStreamOfValidTableReferences)\n+\t\t\t\t.collect(GuavaCollectors.toImmutableMap());\n+\n+\t\tfinal Map<TableRecordReference, Boolean> referencesWithComments = commentEntryRepository.hasComments(rowsForReferences.values());\n+\n+\t\tfinal IdentityHashMap<IViewRow, Boolean> result = new IdentityHashMap<>();\n+\t\tfor (final IViewRow row : rows)\n+\t\t{\n+\t\t\tfinal TableRecordReference ref = rowsForReferences.get(row);\n+\t\t\tresult.put(row, referencesWithComments.getOrDefault(ref, false));\n+\t\t}\n+\n+\t\treturn result;\n \t}\n \n \t@NonNull\n-\tpublic List<JSONComment> getCommentsFor(@NonNull final TableRecordReference tableRecordReference, final ZoneId zoneId)\n+\tpublic Boolean hasComments(@NonNull final DocumentPath documentPath)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyNDEzMQ=="}, "originalCommit": {"oid": "5d4800cb54cf788e2c0ca09b04a937ad09acec2c"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxMjY4NzE4OnYy", "diffSide": "RIGHT", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/view/ViewRestController.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMDo0MzowOFrOG8uOOA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wNlQxMjo0MjozMlrOG8xyeA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyNTA0OA==", "bodyText": "use our formatting... i.e. space after comma", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466325048", "createdAt": "2020-08-06T10:43:08Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/view/ViewRestController.java", "diffHunk": "@@ -214,7 +229,12 @@ public JSONViewResult deleteStickyFilter(\n \n \t\tfinal IView newView = viewsRepo.deleteStickyFilter(viewId, filterId);\n \t\tfinal JSONOptions jsonOpts = newJSONOptions();\n-\t\treturn JSONViewResult.of(ViewResult.ofView(newView), ViewRowOverridesHelper.getViewRowOverrides(newView), jsonOpts);\n+\t\tfinal ViewResult viewResult = ViewResult.ofView(newView);\n+\n+\t\tfinal List<IViewRow> rows = viewResult.isPageLoaded() ? viewResult.getPage() : Collections.emptyList();\n+\t\tfinal IdentityHashMap<IViewRow, Boolean> documentsWithComments = commentsService.hasComments(rows);\n+\n+\t\treturn JSONViewResult.of(viewResult, ViewRowOverridesHelper.getViewRowOverrides(newView), jsonOpts,documentsWithComments);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5d4800cb54cf788e2c0ca09b04a937ad09acec2c"}, "originalPosition": 127}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjM4MzQ4MA==", "bodyText": "Forgot to indent.", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466383480", "createdAt": "2020-08-06T12:42:32Z", "author": {"login": "TheBestPessimist"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/view/ViewRestController.java", "diffHunk": "@@ -214,7 +229,12 @@ public JSONViewResult deleteStickyFilter(\n \n \t\tfinal IView newView = viewsRepo.deleteStickyFilter(viewId, filterId);\n \t\tfinal JSONOptions jsonOpts = newJSONOptions();\n-\t\treturn JSONViewResult.of(ViewResult.ofView(newView), ViewRowOverridesHelper.getViewRowOverrides(newView), jsonOpts);\n+\t\tfinal ViewResult viewResult = ViewResult.ofView(newView);\n+\n+\t\tfinal List<IViewRow> rows = viewResult.isPageLoaded() ? viewResult.getPage() : Collections.emptyList();\n+\t\tfinal IdentityHashMap<IViewRow, Boolean> documentsWithComments = commentsService.hasComments(rows);\n+\n+\t\treturn JSONViewResult.of(viewResult, ViewRowOverridesHelper.getViewRowOverrides(newView), jsonOpts,documentsWithComments);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjMyNTA0OA=="}, "originalCommit": {"oid": "5d4800cb54cf788e2c0ca09b04a937ad09acec2c"}, "originalPosition": 127}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjQxNDExOnYy", "diffSide": "RIGHT", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/comments/CommentsService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODo0MDoxN1rOG9RmSg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOTozNjoxM1rOG9TU6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkwNDY1MA==", "bodyText": "awhy not getComments?", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466904650", "createdAt": "2020-08-07T08:40:17Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/comments/CommentsService.java", "diffHunk": "@@ -22,37 +22,97 @@\n \n package de.metas.ui.web.comments;\n \n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import de.metas.comments.CommentEntry;\n import de.metas.comments.CommentEntryRepository;\n import de.metas.ui.web.comments.json.JSONComment;\n import de.metas.ui.web.comments.json.JSONCommentCreateRequest;\n+import de.metas.ui.web.view.IViewRow;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import de.metas.ui.web.window.datatypes.DocumentPath;\n import de.metas.ui.web.window.datatypes.json.DateTimeConverters;\n+import de.metas.ui.web.window.descriptor.factory.DocumentDescriptorFactory;\n import de.metas.user.api.IUserDAO;\n import de.metas.util.GuavaCollectors;\n+import de.metas.util.ImmutableMapEntry;\n import de.metas.util.Services;\n import lombok.NonNull;\n import org.adempiere.util.lang.impl.TableRecordReference;\n import org.springframework.stereotype.Service;\n \n import java.time.ZoneId;\n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n \n @Service\n public class CommentsService\n {\n \tprivate final CommentEntryRepository commentEntryRepository;\n+\tprivate final DocumentDescriptorFactory documentDescriptorFactory;\n \tfinal IUserDAO userDAO = Services.get(IUserDAO.class);\n \n-\tpublic CommentsService(final CommentEntryRepository commentEntryRepository)\n+\tpublic static final ViewRowComments NO_COMMENTS = ViewRowComments.of(ImmutableMap.of());\n+\n+\tpublic CommentsService(final CommentEntryRepository commentEntryRepository, final DocumentDescriptorFactory documentDescriptorFactory)\n \t{\n \t\tthis.commentEntryRepository = commentEntryRepository;\n+\t\tthis.documentDescriptorFactory = documentDescriptorFactory;\n+\t}\n+\n+\t@NonNull\n+\tpublic final ViewRowComments hasComments(@NonNull final IViewRow row)\n+\t{\n+\t\treturn hasComments(Collections.singletonList(row));\n \t}\n \n \t@NonNull\n-\tpublic List<JSONComment> getCommentsFor(@NonNull final TableRecordReference tableRecordReference, final ZoneId zoneId)\n+\tpublic final ViewRowComments hasComments(@NonNull final Collection<? extends IViewRow> rows)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca5b29a6bad32dbf89a63dadfe80f660d4435c9"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMjk3MQ==", "bodyText": "done", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466932971", "createdAt": "2020-08-07T09:36:13Z", "author": {"login": "TheBestPessimist"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/comments/CommentsService.java", "diffHunk": "@@ -22,37 +22,97 @@\n \n package de.metas.ui.web.comments;\n \n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import de.metas.comments.CommentEntry;\n import de.metas.comments.CommentEntryRepository;\n import de.metas.ui.web.comments.json.JSONComment;\n import de.metas.ui.web.comments.json.JSONCommentCreateRequest;\n+import de.metas.ui.web.view.IViewRow;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import de.metas.ui.web.window.datatypes.DocumentPath;\n import de.metas.ui.web.window.datatypes.json.DateTimeConverters;\n+import de.metas.ui.web.window.descriptor.factory.DocumentDescriptorFactory;\n import de.metas.user.api.IUserDAO;\n import de.metas.util.GuavaCollectors;\n+import de.metas.util.ImmutableMapEntry;\n import de.metas.util.Services;\n import lombok.NonNull;\n import org.adempiere.util.lang.impl.TableRecordReference;\n import org.springframework.stereotype.Service;\n \n import java.time.ZoneId;\n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n \n @Service\n public class CommentsService\n {\n \tprivate final CommentEntryRepository commentEntryRepository;\n+\tprivate final DocumentDescriptorFactory documentDescriptorFactory;\n \tfinal IUserDAO userDAO = Services.get(IUserDAO.class);\n \n-\tpublic CommentsService(final CommentEntryRepository commentEntryRepository)\n+\tpublic static final ViewRowComments NO_COMMENTS = ViewRowComments.of(ImmutableMap.of());\n+\n+\tpublic CommentsService(final CommentEntryRepository commentEntryRepository, final DocumentDescriptorFactory documentDescriptorFactory)\n \t{\n \t\tthis.commentEntryRepository = commentEntryRepository;\n+\t\tthis.documentDescriptorFactory = documentDescriptorFactory;\n+\t}\n+\n+\t@NonNull\n+\tpublic final ViewRowComments hasComments(@NonNull final IViewRow row)\n+\t{\n+\t\treturn hasComments(Collections.singletonList(row));\n \t}\n \n \t@NonNull\n-\tpublic List<JSONComment> getCommentsFor(@NonNull final TableRecordReference tableRecordReference, final ZoneId zoneId)\n+\tpublic final ViewRowComments hasComments(@NonNull final Collection<? extends IViewRow> rows)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkwNDY1MA=="}, "originalCommit": {"oid": "5ca5b29a6bad32dbf89a63dadfe80f660d4435c9"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjQxNDY1OnYy", "diffSide": "RIGHT", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/comments/CommentsService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODo0MDoyNlrOG9RmoQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOTozNjoxOFrOG9TVEA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkwNDczNw==", "bodyText": "why not getComments?", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466904737", "createdAt": "2020-08-07T08:40:26Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/comments/CommentsService.java", "diffHunk": "@@ -22,37 +22,97 @@\n \n package de.metas.ui.web.comments;\n \n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import de.metas.comments.CommentEntry;\n import de.metas.comments.CommentEntryRepository;\n import de.metas.ui.web.comments.json.JSONComment;\n import de.metas.ui.web.comments.json.JSONCommentCreateRequest;\n+import de.metas.ui.web.view.IViewRow;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import de.metas.ui.web.window.datatypes.DocumentPath;\n import de.metas.ui.web.window.datatypes.json.DateTimeConverters;\n+import de.metas.ui.web.window.descriptor.factory.DocumentDescriptorFactory;\n import de.metas.user.api.IUserDAO;\n import de.metas.util.GuavaCollectors;\n+import de.metas.util.ImmutableMapEntry;\n import de.metas.util.Services;\n import lombok.NonNull;\n import org.adempiere.util.lang.impl.TableRecordReference;\n import org.springframework.stereotype.Service;\n \n import java.time.ZoneId;\n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n \n @Service\n public class CommentsService\n {\n \tprivate final CommentEntryRepository commentEntryRepository;\n+\tprivate final DocumentDescriptorFactory documentDescriptorFactory;\n \tfinal IUserDAO userDAO = Services.get(IUserDAO.class);\n \n-\tpublic CommentsService(final CommentEntryRepository commentEntryRepository)\n+\tpublic static final ViewRowComments NO_COMMENTS = ViewRowComments.of(ImmutableMap.of());\n+\n+\tpublic CommentsService(final CommentEntryRepository commentEntryRepository, final DocumentDescriptorFactory documentDescriptorFactory)\n \t{\n \t\tthis.commentEntryRepository = commentEntryRepository;\n+\t\tthis.documentDescriptorFactory = documentDescriptorFactory;\n+\t}\n+\n+\t@NonNull\n+\tpublic final ViewRowComments hasComments(@NonNull final IViewRow row)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca5b29a6bad32dbf89a63dadfe80f660d4435c9"}, "originalPosition": 49}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMzAwOA==", "bodyText": "done", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466933008", "createdAt": "2020-08-07T09:36:18Z", "author": {"login": "TheBestPessimist"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/comments/CommentsService.java", "diffHunk": "@@ -22,37 +22,97 @@\n \n package de.metas.ui.web.comments;\n \n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import de.metas.comments.CommentEntry;\n import de.metas.comments.CommentEntryRepository;\n import de.metas.ui.web.comments.json.JSONComment;\n import de.metas.ui.web.comments.json.JSONCommentCreateRequest;\n+import de.metas.ui.web.view.IViewRow;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import de.metas.ui.web.window.datatypes.DocumentPath;\n import de.metas.ui.web.window.datatypes.json.DateTimeConverters;\n+import de.metas.ui.web.window.descriptor.factory.DocumentDescriptorFactory;\n import de.metas.user.api.IUserDAO;\n import de.metas.util.GuavaCollectors;\n+import de.metas.util.ImmutableMapEntry;\n import de.metas.util.Services;\n import lombok.NonNull;\n import org.adempiere.util.lang.impl.TableRecordReference;\n import org.springframework.stereotype.Service;\n \n import java.time.ZoneId;\n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n \n @Service\n public class CommentsService\n {\n \tprivate final CommentEntryRepository commentEntryRepository;\n+\tprivate final DocumentDescriptorFactory documentDescriptorFactory;\n \tfinal IUserDAO userDAO = Services.get(IUserDAO.class);\n \n-\tpublic CommentsService(final CommentEntryRepository commentEntryRepository)\n+\tpublic static final ViewRowComments NO_COMMENTS = ViewRowComments.of(ImmutableMap.of());\n+\n+\tpublic CommentsService(final CommentEntryRepository commentEntryRepository, final DocumentDescriptorFactory documentDescriptorFactory)\n \t{\n \t\tthis.commentEntryRepository = commentEntryRepository;\n+\t\tthis.documentDescriptorFactory = documentDescriptorFactory;\n+\t}\n+\n+\t@NonNull\n+\tpublic final ViewRowComments hasComments(@NonNull final IViewRow row)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkwNDczNw=="}, "originalCommit": {"oid": "5ca5b29a6bad32dbf89a63dadfe80f660d4435c9"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjQxOTQ5OnYy", "diffSide": "RIGHT", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/comments/ViewRowComments.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODo0MTo1MVrOG9RphA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOTozNjozOVrOG9TVzQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkwNTQ3Ng==", "bodyText": "pls decide if u want @Value or @Data :)\ni would go with @Value", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466905476", "createdAt": "2020-08-07T08:41:51Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/comments/ViewRowComments.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.comments;\n+\n+import com.google.common.collect.ImmutableMap;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import lombok.Data;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+import java.util.Map;\n+\n+@Value\n+@Data\n+public class ViewRowComments", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca5b29a6bad32dbf89a63dadfe80f660d4435c9"}, "originalPosition": 35}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMzE5Nw==", "bodyText": "Value is correct", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466933197", "createdAt": "2020-08-07T09:36:39Z", "author": {"login": "TheBestPessimist"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/comments/ViewRowComments.java", "diffHunk": "@@ -0,0 +1,53 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.comments;\n+\n+import com.google.common.collect.ImmutableMap;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import lombok.Data;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+import java.util.Map;\n+\n+@Value\n+@Data\n+public class ViewRowComments", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkwNTQ3Ng=="}, "originalCommit": {"oid": "5ca5b29a6bad32dbf89a63dadfe80f660d4435c9"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkxNjQzNTk3OnYy", "diffSide": "RIGHT", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/comments/CommentsService.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwODo0Njo0OVrOG9RzUQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0wN1QwOTozNjo0NVrOG9TV9g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkwNzk4NQ==", "bodyText": "pls move it to ViewRowComments and call it EMPTY", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466907985", "createdAt": "2020-08-07T08:46:49Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/comments/CommentsService.java", "diffHunk": "@@ -22,37 +22,97 @@\n \n package de.metas.ui.web.comments;\n \n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import de.metas.comments.CommentEntry;\n import de.metas.comments.CommentEntryRepository;\n import de.metas.ui.web.comments.json.JSONComment;\n import de.metas.ui.web.comments.json.JSONCommentCreateRequest;\n+import de.metas.ui.web.view.IViewRow;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import de.metas.ui.web.window.datatypes.DocumentPath;\n import de.metas.ui.web.window.datatypes.json.DateTimeConverters;\n+import de.metas.ui.web.window.descriptor.factory.DocumentDescriptorFactory;\n import de.metas.user.api.IUserDAO;\n import de.metas.util.GuavaCollectors;\n+import de.metas.util.ImmutableMapEntry;\n import de.metas.util.Services;\n import lombok.NonNull;\n import org.adempiere.util.lang.impl.TableRecordReference;\n import org.springframework.stereotype.Service;\n \n import java.time.ZoneId;\n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n \n @Service\n public class CommentsService\n {\n \tprivate final CommentEntryRepository commentEntryRepository;\n+\tprivate final DocumentDescriptorFactory documentDescriptorFactory;\n \tfinal IUserDAO userDAO = Services.get(IUserDAO.class);\n \n-\tpublic CommentsService(final CommentEntryRepository commentEntryRepository)\n+\tpublic static final ViewRowComments NO_COMMENTS = ViewRowComments.of(ImmutableMap.of());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5ca5b29a6bad32dbf89a63dadfe80f660d4435c9"}, "originalPosition": 40}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkzMzIzOA==", "bodyText": "done", "url": "https://github.com/metasfresh/metasfresh/pull/7090#discussion_r466933238", "createdAt": "2020-08-07T09:36:45Z", "author": {"login": "TheBestPessimist"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/comments/CommentsService.java", "diffHunk": "@@ -22,37 +22,97 @@\n \n package de.metas.ui.web.comments;\n \n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n import de.metas.comments.CommentEntry;\n import de.metas.comments.CommentEntryRepository;\n import de.metas.ui.web.comments.json.JSONComment;\n import de.metas.ui.web.comments.json.JSONCommentCreateRequest;\n+import de.metas.ui.web.view.IViewRow;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import de.metas.ui.web.window.datatypes.DocumentPath;\n import de.metas.ui.web.window.datatypes.json.DateTimeConverters;\n+import de.metas.ui.web.window.descriptor.factory.DocumentDescriptorFactory;\n import de.metas.user.api.IUserDAO;\n import de.metas.util.GuavaCollectors;\n+import de.metas.util.ImmutableMapEntry;\n import de.metas.util.Services;\n import lombok.NonNull;\n import org.adempiere.util.lang.impl.TableRecordReference;\n import org.springframework.stereotype.Service;\n \n import java.time.ZoneId;\n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.stream.Stream;\n \n @Service\n public class CommentsService\n {\n \tprivate final CommentEntryRepository commentEntryRepository;\n+\tprivate final DocumentDescriptorFactory documentDescriptorFactory;\n \tfinal IUserDAO userDAO = Services.get(IUserDAO.class);\n \n-\tpublic CommentsService(final CommentEntryRepository commentEntryRepository)\n+\tpublic static final ViewRowComments NO_COMMENTS = ViewRowComments.of(ImmutableMap.of());", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2NjkwNzk4NQ=="}, "originalCommit": {"oid": "5ca5b29a6bad32dbf89a63dadfe80f660d4435c9"}, "originalPosition": 40}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1347, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}