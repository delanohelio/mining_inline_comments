{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM1ODQ3Njk3", "number": 6872, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzo1MzozNlrOEGXEYA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMzo0NjoxMFrOEGjXcQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTA0ODY0OnYy", "diffSide": "RIGHT", "path": "frontend/src/components/widget/MasterWidget.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzo1MzozNlrOGlG28w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNjowNToyOVrOGlgwpQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU2Mjg2Nw==", "bodyText": "why not just import the 3 ACs we actually need ?", "url": "https://github.com/metasfresh/metasfresh/pull/6872#discussion_r441562867", "createdAt": "2020-06-17T13:53:36Z", "author": {"login": "siemiatj"}, "path": "frontend/src/components/widget/MasterWidget.js", "diffHunk": "@@ -1,89 +1,84 @@\n import PropTypes from 'prop-types';\n-import React, { Component } from 'react';\n+import React, { PureComponent } from 'react';\n import { connect } from 'react-redux';\n import Moment from 'moment-timezone';\n import * as windowActions from '../../actions/WindowActions';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "813eb6821f99b76620e1be308d60706689cba857"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4NzIzNw==", "bodyText": "Agree. Done", "url": "https://github.com/metasfresh/metasfresh/pull/6872#discussion_r441987237", "createdAt": "2020-06-18T06:05:29Z", "author": {"login": "petrican"}, "path": "frontend/src/components/widget/MasterWidget.js", "diffHunk": "@@ -1,89 +1,84 @@\n import PropTypes from 'prop-types';\n-import React, { Component } from 'react';\n+import React, { PureComponent } from 'react';\n import { connect } from 'react-redux';\n import Moment from 'moment-timezone';\n import * as windowActions from '../../actions/WindowActions';", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU2Mjg2Nw=="}, "originalCommit": {"oid": "813eb6821f99b76620e1be308d60706689cba857"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTA2MTE0OnYy", "diffSide": "RIGHT", "path": "frontend/src/utils/widgetHelper.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzo1NjoyNFrOGlG_dQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNzoxNDoyNFrOGlieaQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU2NTA0NQ==", "bodyText": "Are we sure we can run split on widgetValue at all times ?", "url": "https://github.com/metasfresh/metasfresh/pull/6872#discussion_r441565045", "createdAt": "2020-06-17T13:56:24Z", "author": {"login": "siemiatj"}, "path": "frontend/src/utils/widgetHelper.js", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * @method isNumberField\n+ * @summary verifies if the widgetType passed as argument is a number field or not. Returns a boolean value\n+ * @param {string} widgetType\n+ */\n+export function isNumberField(widgetType) {\n+  switch (widgetType) {\n+    case 'Integer':\n+    case 'Amount':\n+    case 'Quantity':\n+      return true;\n+    default:\n+      return false;\n+  }\n+}\n+\n+/**\n+ * @method formatValueByWidgetType\n+ * @summary Performs patching at MasterWidget level, shaping in the same time the `value` for various cases\n+ * @param {string} widgetType\n+ * @param {string|undefined} value\n+ */\n+export function formatValueByWidgetType({ widgetType, value }) {\n+  const numberField = isNumberField(widgetType);\n+  if (widgetType === 'Quantity' && value === '') {\n+    return null;\n+  } else if (numberField && !value) {\n+    return '0';\n+  }\n+}\n+\n+/**\n+ * @method validatePrecision\n+ * @summary Validates the precision based on the widget value and type props\n+ * @param {string} widgetValue\n+ * @param {string} widgetType\n+ * @param {integer} precision\n+ */\n+export function validatePrecision({ widgetValue, widgetType, precision }) {\n+  let precisionProcessed = precision;\n+\n+  if (widgetType === 'Integer' || widgetType === 'Quantity') {\n+    precisionProcessed = 0;\n+  }\n+\n+  return precisionProcessed < (widgetValue.split('.')[1] || []).length", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "813eb6821f99b76620e1be308d60706689cba857"}, "originalPosition": 46}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MjAxNTMzNw==", "bodyText": "Added extra checks and also unit tests for such cases.", "url": "https://github.com/metasfresh/metasfresh/pull/6872#discussion_r442015337", "createdAt": "2020-06-18T07:14:24Z", "author": {"login": "petrican"}, "path": "frontend/src/utils/widgetHelper.js", "diffHunk": "@@ -0,0 +1,49 @@\n+/**\n+ * @method isNumberField\n+ * @summary verifies if the widgetType passed as argument is a number field or not. Returns a boolean value\n+ * @param {string} widgetType\n+ */\n+export function isNumberField(widgetType) {\n+  switch (widgetType) {\n+    case 'Integer':\n+    case 'Amount':\n+    case 'Quantity':\n+      return true;\n+    default:\n+      return false;\n+  }\n+}\n+\n+/**\n+ * @method formatValueByWidgetType\n+ * @summary Performs patching at MasterWidget level, shaping in the same time the `value` for various cases\n+ * @param {string} widgetType\n+ * @param {string|undefined} value\n+ */\n+export function formatValueByWidgetType({ widgetType, value }) {\n+  const numberField = isNumberField(widgetType);\n+  if (widgetType === 'Quantity' && value === '') {\n+    return null;\n+  } else if (numberField && !value) {\n+    return '0';\n+  }\n+}\n+\n+/**\n+ * @method validatePrecision\n+ * @summary Validates the precision based on the widget value and type props\n+ * @param {string} widgetValue\n+ * @param {string} widgetType\n+ * @param {integer} precision\n+ */\n+export function validatePrecision({ widgetValue, widgetType, precision }) {\n+  let precisionProcessed = precision;\n+\n+  if (widgetType === 'Integer' || widgetType === 'Quantity') {\n+    precisionProcessed = 0;\n+  }\n+\n+  return precisionProcessed < (widgetValue.split('.')[1] || []).length", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU2NTA0NQ=="}, "originalCommit": {"oid": "813eb6821f99b76620e1be308d60706689cba857"}, "originalPosition": 46}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MTA2NzU3OnYy", "diffSide": "RIGHT", "path": "frontend/src/components/widget/MasterWidget.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QxMzo1Nzo0NFrOGlHDhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNjowNzo0M1rOGlgzuw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU2NjA4Ng==", "bodyText": "I don't think we need a comment for built-in React functions. I always remove them because it's an unnecessary noise.", "url": "https://github.com/metasfresh/metasfresh/pull/6872#discussion_r441566086", "createdAt": "2020-06-17T13:57:44Z", "author": {"login": "siemiatj"}, "path": "frontend/src/components/widget/MasterWidget.js", "diffHunk": "@@ -260,7 +204,7 @@ class MasterWidget extends Component {\n \n   /**\n    * @method render\n-   * @summary ToDo: Describe the method.\n+   * @summary Main render function", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "813eb6821f99b76620e1be308d60706689cba857"}, "originalPosition": 305}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4ODAyNw==", "bodyText": "Ok", "url": "https://github.com/metasfresh/metasfresh/pull/6872#discussion_r441988027", "createdAt": "2020-06-18T06:07:43Z", "author": {"login": "petrican"}, "path": "frontend/src/components/widget/MasterWidget.js", "diffHunk": "@@ -260,7 +204,7 @@ class MasterWidget extends Component {\n \n   /**\n    * @method render\n-   * @summary ToDo: Describe the method.\n+   * @summary Main render function", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTU2NjA4Ng=="}, "originalCommit": {"oid": "813eb6821f99b76620e1be308d60706689cba857"}, "originalPosition": 305}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MzA1ODAyOnYy", "diffSide": "RIGHT", "path": "frontend/src/components/widget/MasterWidget.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMzo0MzowMlrOGla7NA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNjoxODozMlrOGlhCUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg5MTYzNg==", "bodyText": "can we use less cryptic variable name ?", "url": "https://github.com/metasfresh/metasfresh/pull/6872#discussion_r441891636", "createdAt": "2020-06-17T23:43:02Z", "author": {"login": "siemiatj"}, "path": "frontend/src/components/widget/MasterWidget.js", "diffHunk": "@@ -1,89 +1,84 @@\n import PropTypes from 'prop-types';\n-import React, { Component } from 'react';\n+import React, { PureComponent } from 'react';\n import { connect } from 'react-redux';\n import Moment from 'moment-timezone';\n import * as windowActions from '../../actions/WindowActions';\n import { getZoomIntoWindow } from '../../api';\n import { convertTimeStringToMoment } from '../../utils/documentListHelper';\n import { formatDateWithZeros } from '../../utils/documentListHelper';\n import RawWidget from './RawWidget';\n+import {\n+  validatePrecision,\n+  formatValueByWidgetType,\n+} from '../../utils/widgetHelper';\n+import { DATE_FIELD_TYPES, TIME_FIELD_TYPES } from '../../constants/Constants';\n+import _ from 'lodash';\n \n-function isNumberField(widgetType) {\n-  switch (widgetType) {\n-    case 'Integer':\n-    case 'Amount':\n-    case 'Quantity':\n-      return true;\n-    default:\n-      return false;\n-  }\n-}\n-\n-const dateParse = ['Date', 'DateTime', 'ZonedDateTime', 'Timestamp', 'Time'];\n+const dateParse = [...DATE_FIELD_TYPES, ...TIME_FIELD_TYPES];\n \n /**\n  * @file Class based component.\n  * @module MasterWidget\n  * @extends Component\n  */\n-class MasterWidget extends Component {\n-  state = {\n-    updated: false,\n-    edited: false,\n-    data: '',\n-  };\n-\n-  componentDidMount() {\n+class MasterWidget extends PureComponent {\n+  constructor(props) {\n+    super(props);\n     const { data, widgetData, clearValue } = this.props;\n-\n-    // `clearValue` removes current field value for the widget. This is used when\n-    // user focuses on table cell and starts typing\n-    this.setState({\n+    // `clearValue` removes current field value for the widget. This is used when user focuses on table cell and starts typing\n+    this.state = {\n+      updated: false,\n+      edited: false,\n       data: data || (clearValue ? '' : widgetData[0].value),\n-    });\n+      widgetData: props.widgetData, // this is used for comparison in the getDerivedStateFromProps lifecycle\n+    };\n   }\n \n-  UNSAFE_componentWillReceiveProps(nextProps) {\n-    const { widgetData, widgetType } = this.props;\n-    const { edited, data } = this.state;\n+  /**\n+   * @method getDerivedStateFromProps\n+   * @summary is invoked right before calling the render method, both on the initial mount and on subsequent updates\n+   *          updates the data and the widgetData from the MasterWidget state, also the updated flag\n+   *          Used this in order to ditch the deprecated UNSAFE_componentWillReceiveProps\n+   */\n+  static getDerivedStateFromProps(nextProps, prevState) {\n+    const { widgetType } = nextProps;\n+    const { edited, widgetData } = prevState;\n     let next = nextProps.widgetData[0].value;\n+    let bringsModifs = widgetData[0] && !_.isEqual(widgetData[0].value, next);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "813eb6821f99b76620e1be308d60706689cba857"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk5MTc2Mg==", "bodyText": "Yes", "url": "https://github.com/metasfresh/metasfresh/pull/6872#discussion_r441991762", "createdAt": "2020-06-18T06:18:32Z", "author": {"login": "petrican"}, "path": "frontend/src/components/widget/MasterWidget.js", "diffHunk": "@@ -1,89 +1,84 @@\n import PropTypes from 'prop-types';\n-import React, { Component } from 'react';\n+import React, { PureComponent } from 'react';\n import { connect } from 'react-redux';\n import Moment from 'moment-timezone';\n import * as windowActions from '../../actions/WindowActions';\n import { getZoomIntoWindow } from '../../api';\n import { convertTimeStringToMoment } from '../../utils/documentListHelper';\n import { formatDateWithZeros } from '../../utils/documentListHelper';\n import RawWidget from './RawWidget';\n+import {\n+  validatePrecision,\n+  formatValueByWidgetType,\n+} from '../../utils/widgetHelper';\n+import { DATE_FIELD_TYPES, TIME_FIELD_TYPES } from '../../constants/Constants';\n+import _ from 'lodash';\n \n-function isNumberField(widgetType) {\n-  switch (widgetType) {\n-    case 'Integer':\n-    case 'Amount':\n-    case 'Quantity':\n-      return true;\n-    default:\n-      return false;\n-  }\n-}\n-\n-const dateParse = ['Date', 'DateTime', 'ZonedDateTime', 'Timestamp', 'Time'];\n+const dateParse = [...DATE_FIELD_TYPES, ...TIME_FIELD_TYPES];\n \n /**\n  * @file Class based component.\n  * @module MasterWidget\n  * @extends Component\n  */\n-class MasterWidget extends Component {\n-  state = {\n-    updated: false,\n-    edited: false,\n-    data: '',\n-  };\n-\n-  componentDidMount() {\n+class MasterWidget extends PureComponent {\n+  constructor(props) {\n+    super(props);\n     const { data, widgetData, clearValue } = this.props;\n-\n-    // `clearValue` removes current field value for the widget. This is used when\n-    // user focuses on table cell and starts typing\n-    this.setState({\n+    // `clearValue` removes current field value for the widget. This is used when user focuses on table cell and starts typing\n+    this.state = {\n+      updated: false,\n+      edited: false,\n       data: data || (clearValue ? '' : widgetData[0].value),\n-    });\n+      widgetData: props.widgetData, // this is used for comparison in the getDerivedStateFromProps lifecycle\n+    };\n   }\n \n-  UNSAFE_componentWillReceiveProps(nextProps) {\n-    const { widgetData, widgetType } = this.props;\n-    const { edited, data } = this.state;\n+  /**\n+   * @method getDerivedStateFromProps\n+   * @summary is invoked right before calling the render method, both on the initial mount and on subsequent updates\n+   *          updates the data and the widgetData from the MasterWidget state, also the updated flag\n+   *          Used this in order to ditch the deprecated UNSAFE_componentWillReceiveProps\n+   */\n+  static getDerivedStateFromProps(nextProps, prevState) {\n+    const { widgetType } = nextProps;\n+    const { edited, widgetData } = prevState;\n     let next = nextProps.widgetData[0].value;\n+    let bringsModifs = widgetData[0] && !_.isEqual(widgetData[0].value, next);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg5MTYzNg=="}, "originalCommit": {"oid": "813eb6821f99b76620e1be308d60706689cba857"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc1MzA2MzUzOnYy", "diffSide": "RIGHT", "path": "frontend/src/components/widget/MasterWidget.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xN1QyMzo0NjoxMFrOGla-kA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xOFQwNjoxMzowMFrOGlg64A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg5MjQ5Ng==", "bodyText": "Does this really give us anything ?", "url": "https://github.com/metasfresh/metasfresh/pull/6872#discussion_r441892496", "createdAt": "2020-06-17T23:46:10Z", "author": {"login": "siemiatj"}, "path": "frontend/src/components/widget/MasterWidget.js", "diffHunk": "@@ -102,31 +97,15 @@ class MasterWidget extends Component {\n       isAdvanced = false,\n       viewId,\n     } = this.props;\n-    const numberField = isNumberField(widgetType);\n \n-    if (widgetType === 'Quantity' && value === '') {\n-      value = null;\n-    } else if (numberField && !value) {\n-      value = '0';\n-    }\n-\n-    let { entity } = this.props;\n-    let currRowId = rowId;\n+    let entity = viewId ? 'documentView' : this.props.entity;\n+    value = formatValueByWidgetType({ widgetType, value });\n+    let currRowId = rowId === 'NEW' ? relativeDocId : rowId;\n     let ret = null;\n-    let isEdit = false;\n-\n-    if (rowId === 'NEW') {\n-      currRowId = relativeDocId;\n-    }\n+    let isEdit = viewId ? true : false;\n \n-    if (widgetType !== 'Button') {\n+    widgetType !== 'Button' &&", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "813eb6821f99b76620e1be308d60706689cba857"}, "originalPosition": 166}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTk4OTg1Ng==", "bodyText": "Yes. One line of code less. Using such through the app whenever is possible it will reduce the overall lines of code written.", "url": "https://github.com/metasfresh/metasfresh/pull/6872#discussion_r441989856", "createdAt": "2020-06-18T06:13:00Z", "author": {"login": "petrican"}, "path": "frontend/src/components/widget/MasterWidget.js", "diffHunk": "@@ -102,31 +97,15 @@ class MasterWidget extends Component {\n       isAdvanced = false,\n       viewId,\n     } = this.props;\n-    const numberField = isNumberField(widgetType);\n \n-    if (widgetType === 'Quantity' && value === '') {\n-      value = null;\n-    } else if (numberField && !value) {\n-      value = '0';\n-    }\n-\n-    let { entity } = this.props;\n-    let currRowId = rowId;\n+    let entity = viewId ? 'documentView' : this.props.entity;\n+    value = formatValueByWidgetType({ widgetType, value });\n+    let currRowId = rowId === 'NEW' ? relativeDocId : rowId;\n     let ret = null;\n-    let isEdit = false;\n-\n-    if (rowId === 'NEW') {\n-      currRowId = relativeDocId;\n-    }\n+    let isEdit = viewId ? true : false;\n \n-    if (widgetType !== 'Button') {\n+    widgetType !== 'Button' &&", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MTg5MjQ5Ng=="}, "originalCommit": {"oid": "813eb6821f99b76620e1be308d60706689cba857"}, "originalPosition": 166}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1499, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}