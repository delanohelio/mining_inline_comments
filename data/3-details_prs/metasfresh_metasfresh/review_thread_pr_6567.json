{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNDg2Nzky", "number": 6567, "reviewThreads": {"totalCount": 13, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNDozNjoxNVrOD75-eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNToyMTozOVrOD76a1Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTQyNDU4OnYy", "diffSide": "RIGHT", "path": "frontend/src/api/view.js", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNDozNjoxNVrOGUhIbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTozMzoxMVrOGUpcUA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2NzUzNA==", "bodyText": "Can you pls use one single param and that to be and object containing those ? Thanks", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424167534", "createdAt": "2020-05-13T04:36:15Z", "author": {"login": "petrican"}, "path": "frontend/src/api/view.js", "diffHunk": "@@ -180,7 +180,7 @@ export function locationConfigRequest() {\n   return get(`${config.API_URL}/geolocation/config`);\n }\n \n-export function deleteView(windowId, viewId, action) {\n+export function deleteViewRequest(windowId, viewId, action) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIzNzAwOA==", "bodyText": "You are aware it's not in the scope of the issue, right ? Also though I see a reason to switch to object properties when we have 5+ parameters, here I don't really see any advantage", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424237008", "createdAt": "2020-05-13T07:45:22Z", "author": {"login": "siemiatj"}, "path": "frontend/src/api/view.js", "diffHunk": "@@ -180,7 +180,7 @@ export function locationConfigRequest() {\n   return get(`${config.API_URL}/geolocation/config`);\n }\n \n-export function deleteView(windowId, viewId, action) {\n+export function deleteViewRequest(windowId, viewId, action) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2NzUzNA=="}, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMwMzY5Ng==", "bodyText": "5+ it's not my taste, to be honest, but if that's easy to follow in javascript world, I am ready to obey.", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424303696", "createdAt": "2020-05-13T09:33:11Z", "author": {"login": "teosarca"}, "path": "frontend/src/api/view.js", "diffHunk": "@@ -180,7 +180,7 @@ export function locationConfigRequest() {\n   return get(`${config.API_URL}/geolocation/config`);\n }\n \n-export function deleteView(windowId, viewId, action) {\n+export function deleteViewRequest(windowId, viewId, action) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2NzUzNA=="}, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTQyODQ0OnYy", "diffSide": "RIGHT", "path": "frontend/src/components/app/RawModal.js", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNDozOToxOFrOGUhK4g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTozNDo0NFrOGUpf5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2ODE2Mg==", "bodyText": "Same as above. Pls use an object as param contaning the windowType, viewId, type. Thanks", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424168162", "createdAt": "2020-05-13T04:39:18Z", "author": {"login": "petrican"}, "path": "frontend/src/components/app/RawModal.js", "diffHunk": "@@ -232,8 +232,7 @@ class RawModal extends Component {\n       }\n \n       await this.removeModal();\n-\n-      await deleteView(windowType, viewId, type);\n+      await deleteViewRequest(windowType, viewId, type);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIzOTU1MA==", "bodyText": "also, where possible and time/budget fit, pls rename windowType to windowId. So we would share the same ubiquitous across the whole application.", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424239550", "createdAt": "2020-05-13T07:49:44Z", "author": {"login": "teosarca"}, "path": "frontend/src/components/app/RawModal.js", "diffHunk": "@@ -232,8 +232,7 @@ class RawModal extends Component {\n       }\n \n       await this.removeModal();\n-\n-      await deleteView(windowType, viewId, type);\n+      await deleteViewRequest(windowType, viewId, type);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2ODE2Mg=="}, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI3MjMwMQ==", "bodyText": "We're over the budget already so I don't want to get sidetracked doing things that are not in the scope of this issue. I've only renamed this function because it has the same name as a redux action creator.", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424272301", "createdAt": "2020-05-13T08:43:12Z", "author": {"login": "siemiatj"}, "path": "frontend/src/components/app/RawModal.js", "diffHunk": "@@ -232,8 +232,7 @@ class RawModal extends Component {\n       }\n \n       await this.removeModal();\n-\n-      await deleteView(windowType, viewId, type);\n+      await deleteViewRequest(windowType, viewId, type);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2ODE2Mg=="}, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMwNDYxMw==", "bodyText": "ok, i understand.\nNext time, pls make sure to consider the 'ubiquitous language` fixes when doing the estimation.", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424304613", "createdAt": "2020-05-13T09:34:44Z", "author": {"login": "teosarca"}, "path": "frontend/src/components/app/RawModal.js", "diffHunk": "@@ -232,8 +232,7 @@ class RawModal extends Component {\n       }\n \n       await this.removeModal();\n-\n-      await deleteView(windowType, viewId, type);\n+      await deleteViewRequest(windowType, viewId, type);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2ODE2Mg=="}, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 15}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTQ0MzM4OnYy", "diffSide": "RIGHT", "path": "frontend/src/actions/ViewActions.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNDo0OTo1M1rOGUhULA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzo0NjoyOFrOGUlabg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MDU0MA==", "bodyText": "Add pls doc about params and a brief description of what this function does and what's its purpose. Thanks", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424170540", "createdAt": "2020-05-13T04:49:53Z", "author": {"login": "petrican"}, "path": "frontend/src/actions/ViewActions.js", "diffHunk": "@@ -136,20 +198,32 @@ export function updateViewData(id, rows, tabId) {\n   };\n }\n \n+/**\n+ * @method fetchLocationConfigSuccess\n+ * @summary\n+ */\n function fetchLocationConfigSuccess(id, data) {\n   return {\n     type: FETCH_LOCATION_CONFIG_SUCCESS,\n     payload: { id, data },\n   };\n }\n \n+/**\n+ * @method fetchLocationConfigError\n+ * @summary\n+ */\n function fetchLocationConfigError(id, error) {\n   return {\n     type: FETCH_LOCATION_CONFIG_ERROR,\n     payload: { id, error },\n   };\n }\n \n+/**\n+ * @method addLocationData\n+ * @summary", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIzNzY3OA==", "bodyText": "Not in the scope. I just added it to have anything as far as the code comments go.", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424237678", "createdAt": "2020-05-13T07:46:28Z", "author": {"login": "siemiatj"}, "path": "frontend/src/actions/ViewActions.js", "diffHunk": "@@ -136,20 +198,32 @@ export function updateViewData(id, rows, tabId) {\n   };\n }\n \n+/**\n+ * @method fetchLocationConfigSuccess\n+ * @summary\n+ */\n function fetchLocationConfigSuccess(id, data) {\n   return {\n     type: FETCH_LOCATION_CONFIG_SUCCESS,\n     payload: { id, data },\n   };\n }\n \n+/**\n+ * @method fetchLocationConfigError\n+ * @summary\n+ */\n function fetchLocationConfigError(id, error) {\n   return {\n     type: FETCH_LOCATION_CONFIG_ERROR,\n     payload: { id, error },\n   };\n }\n \n+/**\n+ * @method addLocationData\n+ * @summary", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MDU0MA=="}, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 195}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTQ1MTU0OnYy", "diffSide": "RIGHT", "path": "frontend/src/actions/WindowActions.js", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNDo1NTowOFrOGUhZOQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODozOTowNlrOGUnXFA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MTgzMw==", "bodyText": "If this is not needed we can remove the commented code. We can always find this function from previous versions of the code if it's really needed.", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424171833", "createdAt": "2020-05-13T04:55:08Z", "author": {"login": "petrican"}, "path": "frontend/src/actions/WindowActions.js", "diffHunk": "@@ -521,38 +528,64 @@ export function deselectTableItems(ids, windowType, viewId) {\n \n // THUNK ACTIONS\n \n-export function initTabs(layout, windowType, docId, isModal) {\n-  return async (dispatch) => {\n-    const requests = [];\n-    const tabTmp = {};\n-\n-    if (layout) {\n-      layout.map((tab, index) => {\n-        tabTmp[tab.tabId] = {};\n-\n-        if ((tab.tabId && index === 0) || !tab.queryOnActivate) {\n-          requests.push(getTab(tab.tabId, windowType, docId));\n-        }\n-      });\n+// TODO: Just a quick thunk action creator to test Tables reducer\n+// but looks like this can actually replace the `initTabs`.\n+/*\n+ * @method fetchTab\n+ * @summary Action creator for fetching single tab's rows\n+ */\n+export function fetchTab(tabId, windowType, docId) {\n+  return (dispatch) => {\n+    return getTabRequest(tabId, windowType, docId)\n+      .then((response) => {\n+        const tableId = `${windowType}_${docId}_${tabId}`;\n+        const tableData = { result: response };\n \n-      return await Promise.all(requests).then((responses) => {\n-        responses.forEach((res) => {\n-          // needed for finding tabId\n-          const rowZero = res && res[0];\n-          if (rowZero) {\n-            const tabId = rowZero.tabId;\n-            tabTmp[tabId] = res;\n-          }\n-        });\n+        dispatch(updateTabTable(tableId, tableData));\n \n-        dispatch(addRowData(tabTmp, getScope(isModal)));\n+        return Promise.resolve(response);\n+      })\n+      .catch((error) => {\n+        //show error message ?\n+        return Promise.resolve(error);\n       });\n-    }\n-\n-    return Promise.resolve(null);\n   };\n }\n \n+// TODO: Figure out if we still need this as it looks like we can just fetch", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIzODU0Mw==", "bodyText": "Yeeah so I'm kinda reluctant to do it at this point as it's gonna be easier to revert it by just uncommenting code imho.", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424238543", "createdAt": "2020-05-13T07:48:02Z", "author": {"login": "siemiatj"}, "path": "frontend/src/actions/WindowActions.js", "diffHunk": "@@ -521,38 +528,64 @@ export function deselectTableItems(ids, windowType, viewId) {\n \n // THUNK ACTIONS\n \n-export function initTabs(layout, windowType, docId, isModal) {\n-  return async (dispatch) => {\n-    const requests = [];\n-    const tabTmp = {};\n-\n-    if (layout) {\n-      layout.map((tab, index) => {\n-        tabTmp[tab.tabId] = {};\n-\n-        if ((tab.tabId && index === 0) || !tab.queryOnActivate) {\n-          requests.push(getTab(tab.tabId, windowType, docId));\n-        }\n-      });\n+// TODO: Just a quick thunk action creator to test Tables reducer\n+// but looks like this can actually replace the `initTabs`.\n+/*\n+ * @method fetchTab\n+ * @summary Action creator for fetching single tab's rows\n+ */\n+export function fetchTab(tabId, windowType, docId) {\n+  return (dispatch) => {\n+    return getTabRequest(tabId, windowType, docId)\n+      .then((response) => {\n+        const tableId = `${windowType}_${docId}_${tabId}`;\n+        const tableData = { result: response };\n \n-      return await Promise.all(requests).then((responses) => {\n-        responses.forEach((res) => {\n-          // needed for finding tabId\n-          const rowZero = res && res[0];\n-          if (rowZero) {\n-            const tabId = rowZero.tabId;\n-            tabTmp[tabId] = res;\n-          }\n-        });\n+        dispatch(updateTabTable(tableId, tableData));\n \n-        dispatch(addRowData(tabTmp, getScope(isModal)));\n+        return Promise.resolve(response);\n+      })\n+      .catch((error) => {\n+        //show error message ?\n+        return Promise.resolve(error);\n       });\n-    }\n-\n-    return Promise.resolve(null);\n   };\n }\n \n+// TODO: Figure out if we still need this as it looks like we can just fetch", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MTgzMw=="}, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI2OTU4OA==", "bodyText": "Maybe leave some small comment in here instead with link to the PR/commit in which we removed the function to find our way around quick in case of an urgent fix/revert ?", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424269588", "createdAt": "2020-05-13T08:39:06Z", "author": {"login": "petrican"}, "path": "frontend/src/actions/WindowActions.js", "diffHunk": "@@ -521,38 +528,64 @@ export function deselectTableItems(ids, windowType, viewId) {\n \n // THUNK ACTIONS\n \n-export function initTabs(layout, windowType, docId, isModal) {\n-  return async (dispatch) => {\n-    const requests = [];\n-    const tabTmp = {};\n-\n-    if (layout) {\n-      layout.map((tab, index) => {\n-        tabTmp[tab.tabId] = {};\n-\n-        if ((tab.tabId && index === 0) || !tab.queryOnActivate) {\n-          requests.push(getTab(tab.tabId, windowType, docId));\n-        }\n-      });\n+// TODO: Just a quick thunk action creator to test Tables reducer\n+// but looks like this can actually replace the `initTabs`.\n+/*\n+ * @method fetchTab\n+ * @summary Action creator for fetching single tab's rows\n+ */\n+export function fetchTab(tabId, windowType, docId) {\n+  return (dispatch) => {\n+    return getTabRequest(tabId, windowType, docId)\n+      .then((response) => {\n+        const tableId = `${windowType}_${docId}_${tabId}`;\n+        const tableData = { result: response };\n \n-      return await Promise.all(requests).then((responses) => {\n-        responses.forEach((res) => {\n-          // needed for finding tabId\n-          const rowZero = res && res[0];\n-          if (rowZero) {\n-            const tabId = rowZero.tabId;\n-            tabTmp[tabId] = res;\n-          }\n-        });\n+        dispatch(updateTabTable(tableId, tableData));\n \n-        dispatch(addRowData(tabTmp, getScope(isModal)));\n+        return Promise.resolve(response);\n+      })\n+      .catch((error) => {\n+        //show error message ?\n+        return Promise.resolve(error);\n       });\n-    }\n-\n-    return Promise.resolve(null);\n   };\n }\n \n+// TODO: Figure out if we still need this as it looks like we can just fetch", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MTgzMw=="}, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 87}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTQ2MTI4OnYy", "diffSide": "RIGHT", "path": "frontend/src/actions/WindowActions.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNTowMTowOVrOGUhe7w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNTowMTowOVrOGUhe7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MzI5NQ==", "bodyText": "pls use ===. here .  Also maybe it's wise to use  documentId.toLowerCase() === 'new' in case someone does pass by mistake 'New' or 'nEw' or something like that. Might not happen but just as a safety check", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424173295", "createdAt": "2020-05-13T05:01:09Z", "author": {"login": "petrican"}, "path": "frontend/src/actions/WindowActions.js", "diffHunk": "@@ -620,87 +653,123 @@ export function initWindow(windowType, docId, tabId, rowId = null, isAdvanced) {\n  * Main method to generate window\n  */\n export function createWindow(\n-  windowId,\n-  docId = 'NEW',\n+  windowType,\n+  documentId = 'NEW',\n   tabId,\n   rowId,\n   isModal = false,\n   isAdvanced\n ) {\n   return (dispatch) => {\n-    if (docId == 'new') {\n-      docId = 'NEW';\n+    if (documentId == 'new') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 140}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTQ2MzU5OnYy", "diffSide": "RIGHT", "path": "frontend/src/actions/WindowActions.js", "isResolved": false, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNTowMjozM1rOGUhgWA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNTowMzo0NFrOGUhhkA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MzY1Ng==", "bodyText": "===", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424173656", "createdAt": "2020-05-13T05:02:33Z", "author": {"login": "petrican"}, "path": "frontend/src/actions/WindowActions.js", "diffHunk": "@@ -620,87 +653,123 @@ export function initWindow(windowType, docId, tabId, rowId = null, isAdvanced) {\n  * Main method to generate window\n  */\n export function createWindow(\n-  windowId,\n-  docId = 'NEW',\n+  windowType,\n+  documentId = 'NEW',\n   tabId,\n   rowId,\n   isModal = false,\n   isAdvanced\n ) {\n   return (dispatch) => {\n-    if (docId == 'new') {\n-      docId = 'NEW';\n+    if (documentId == 'new') {\n+      documentId = 'NEW';\n     }\n \n     // this chain is really important,\n     // to do not re-render widgets on init\n-    return dispatch(initWindow(windowId, docId, tabId, rowId, isAdvanced)).then(\n-      (response) => {\n-        if (!response || !response.data) {\n-          return Promise.resolve(null);\n-        }\n-\n-        if (docId == 'NEW' && !isModal) {\n-          dispatch(setLatestNewDocument(response.data[0].id));\n-          // redirect immedietely\n-          return dispatch(\n-            replace(`/window/${windowId}/${response.data[0].id}`)\n-          );\n-        }\n+    return dispatch(\n+      initWindow(windowType, documentId, tabId, rowId, isAdvanced)\n+    ).then((response) => {\n+      if (!response || !response.data) {\n+        return Promise.resolve(null);\n+      }\n \n-        let elem = 0;\n+      const data = response.data[0];\n+      const tabs = data.includedTabsInfo;\n+      let docId = data.id;\n \n-        response.data.forEach((value, index) => {\n-          if (value.rowId === rowId) {\n-            elem = index;\n-          }\n+      if (tabs) {\n+        Object.values(tabs).forEach((tab) => {\n+          const { tabId } = tab;\n+          const tableId = `${windowType}_${docId}_${tabId}`;\n+          const tableData = {\n+            windowType,\n+            docId,\n+            tabId,\n+            ...tab,\n+          };\n+          dispatch(createTabTable(tableId, tableData));\n         });\n+      }\n \n-        if (docId === 'NEW') {\n-          dispatch(updateModal(null, response.data[0].id));\n+      if (documentId == 'NEW' && !isModal) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3Mzk2OA==", "bodyText": "also you might wanna do a similar check documentId.toUpperCase() === 'NEW' for safety", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424173968", "createdAt": "2020-05-13T05:03:44Z", "author": {"login": "petrican"}, "path": "frontend/src/actions/WindowActions.js", "diffHunk": "@@ -620,87 +653,123 @@ export function initWindow(windowType, docId, tabId, rowId = null, isAdvanced) {\n  * Main method to generate window\n  */\n export function createWindow(\n-  windowId,\n-  docId = 'NEW',\n+  windowType,\n+  documentId = 'NEW',\n   tabId,\n   rowId,\n   isModal = false,\n   isAdvanced\n ) {\n   return (dispatch) => {\n-    if (docId == 'new') {\n-      docId = 'NEW';\n+    if (documentId == 'new') {\n+      documentId = 'NEW';\n     }\n \n     // this chain is really important,\n     // to do not re-render widgets on init\n-    return dispatch(initWindow(windowId, docId, tabId, rowId, isAdvanced)).then(\n-      (response) => {\n-        if (!response || !response.data) {\n-          return Promise.resolve(null);\n-        }\n-\n-        if (docId == 'NEW' && !isModal) {\n-          dispatch(setLatestNewDocument(response.data[0].id));\n-          // redirect immedietely\n-          return dispatch(\n-            replace(`/window/${windowId}/${response.data[0].id}`)\n-          );\n-        }\n+    return dispatch(\n+      initWindow(windowType, documentId, tabId, rowId, isAdvanced)\n+    ).then((response) => {\n+      if (!response || !response.data) {\n+        return Promise.resolve(null);\n+      }\n \n-        let elem = 0;\n+      const data = response.data[0];\n+      const tabs = data.includedTabsInfo;\n+      let docId = data.id;\n \n-        response.data.forEach((value, index) => {\n-          if (value.rowId === rowId) {\n-            elem = index;\n-          }\n+      if (tabs) {\n+        Object.values(tabs).forEach((tab) => {\n+          const { tabId } = tab;\n+          const tableId = `${windowType}_${docId}_${tabId}`;\n+          const tableData = {\n+            windowType,\n+            docId,\n+            tabId,\n+            ...tab,\n+          };\n+          dispatch(createTabTable(tableId, tableData));\n         });\n+      }\n \n-        if (docId === 'NEW') {\n-          dispatch(updateModal(null, response.data[0].id));\n+      if (documentId == 'NEW' && !isModal) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MzY1Ng=="}, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 191}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTQ2ODgzOnYy", "diffSide": "RIGHT", "path": "frontend/src/actions/WindowActions.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNTowNTozN1rOGUhjcg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNTowNTozN1rOGUhjcg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3NDQ1MA==", "bodyText": "Should we have a safety check for such case to be sure ?", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424174450", "createdAt": "2020-05-13T05:05:37Z", "author": {"login": "petrican"}, "path": "frontend/src/actions/WindowActions.js", "diffHunk": "@@ -620,87 +653,123 @@ export function initWindow(windowType, docId, tabId, rowId = null, isAdvanced) {\n  * Main method to generate window\n  */\n export function createWindow(\n-  windowId,\n-  docId = 'NEW',\n+  windowType,\n+  documentId = 'NEW',\n   tabId,\n   rowId,\n   isModal = false,\n   isAdvanced\n ) {\n   return (dispatch) => {\n-    if (docId == 'new') {\n-      docId = 'NEW';\n+    if (documentId == 'new') {\n+      documentId = 'NEW';\n     }\n \n     // this chain is really important,\n     // to do not re-render widgets on init\n-    return dispatch(initWindow(windowId, docId, tabId, rowId, isAdvanced)).then(\n-      (response) => {\n-        if (!response || !response.data) {\n-          return Promise.resolve(null);\n-        }\n-\n-        if (docId == 'NEW' && !isModal) {\n-          dispatch(setLatestNewDocument(response.data[0].id));\n-          // redirect immedietely\n-          return dispatch(\n-            replace(`/window/${windowId}/${response.data[0].id}`)\n-          );\n-        }\n+    return dispatch(\n+      initWindow(windowType, documentId, tabId, rowId, isAdvanced)\n+    ).then((response) => {\n+      if (!response || !response.data) {\n+        return Promise.resolve(null);\n+      }\n \n-        let elem = 0;\n+      const data = response.data[0];\n+      const tabs = data.includedTabsInfo;\n+      let docId = data.id;\n \n-        response.data.forEach((value, index) => {\n-          if (value.rowId === rowId) {\n-            elem = index;\n-          }\n+      if (tabs) {\n+        Object.values(tabs).forEach((tab) => {\n+          const { tabId } = tab;\n+          const tableId = `${windowType}_${docId}_${tabId}`;\n+          const tableData = {\n+            windowType,\n+            docId,\n+            tabId,\n+            ...tab,\n+          };\n+          dispatch(createTabTable(tableId, tableData));\n         });\n+      }\n \n-        if (docId === 'NEW') {\n-          dispatch(updateModal(null, response.data[0].id));\n+      if (documentId == 'NEW' && !isModal) {\n+        dispatch(setLatestNewDocument(docId));\n+        // redirect immedietely\n+        return dispatch(replace(`/window/${windowType}/${docId}`));\n+      }\n+\n+      let elem = 0;\n+\n+      response.data.forEach((value, index) => {\n+        if (value.rowId === rowId) {\n+          elem = index;\n         }\n+      });\n \n-        docId = response.data[elem].id;\n-        dispatch(\n-          initDataSuccess({\n-            data: parseToDisplay(response.data[elem].fieldsByName),\n-            docId,\n-            saveStatus: response.data[0].saveStatus,\n-            scope: getScope(isModal),\n-            standardActions: response.data[0].standardActions,\n-            validStatus: response.data[0].validStatus,\n-            includedTabsInfo: response.data[0].includedTabsInfo,\n-            websocket: response.data[0].websocketEndpoint,\n-          })\n-        );\n+      if (documentId === 'NEW') {\n+        dispatch(updateModal(null, docId));\n+      }\n \n-        if (isModal) {\n-          if (rowId === 'NEW') {\n-            dispatch(\n-              mapDataToState(response.data, false, 'NEW', docId, windowId)\n-            );\n-            dispatch(updateStatus(response.data));\n-            dispatch(updateModal(response.data[0].rowId));\n-          }\n-        } else {\n-          dispatch(getWindowBreadcrumb(windowId));\n+      // TODO: Is `elem` ever different than 0 ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 232}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTQ3OTQxOnYy", "diffSide": "RIGHT", "path": "frontend/src/actions/WindowActions.js", "isResolved": false, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNToxMDo0M1rOGUhpIA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNToxMDo0M1rOGUhpIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3NTkwNA==", "bodyText": "Remove it pls if it's the case . Like I said in one of my previous comment we can always get the code back from the repo. Code should be clean without forgotten spread comments within it. Thanks", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424175904", "createdAt": "2020-05-13T05:10:43Z", "author": {"login": "petrican"}, "path": "frontend/src/actions/WindowActions.js", "diffHunk": "@@ -620,87 +653,123 @@ export function initWindow(windowType, docId, tabId, rowId = null, isAdvanced) {\n  * Main method to generate window\n  */\n export function createWindow(\n-  windowId,\n-  docId = 'NEW',\n+  windowType,\n+  documentId = 'NEW',\n   tabId,\n   rowId,\n   isModal = false,\n   isAdvanced\n ) {\n   return (dispatch) => {\n-    if (docId == 'new') {\n-      docId = 'NEW';\n+    if (documentId == 'new') {\n+      documentId = 'NEW';\n     }\n \n     // this chain is really important,\n     // to do not re-render widgets on init\n-    return dispatch(initWindow(windowId, docId, tabId, rowId, isAdvanced)).then(\n-      (response) => {\n-        if (!response || !response.data) {\n-          return Promise.resolve(null);\n-        }\n-\n-        if (docId == 'NEW' && !isModal) {\n-          dispatch(setLatestNewDocument(response.data[0].id));\n-          // redirect immedietely\n-          return dispatch(\n-            replace(`/window/${windowId}/${response.data[0].id}`)\n-          );\n-        }\n+    return dispatch(\n+      initWindow(windowType, documentId, tabId, rowId, isAdvanced)\n+    ).then((response) => {\n+      if (!response || !response.data) {\n+        return Promise.resolve(null);\n+      }\n \n-        let elem = 0;\n+      const data = response.data[0];\n+      const tabs = data.includedTabsInfo;\n+      let docId = data.id;\n \n-        response.data.forEach((value, index) => {\n-          if (value.rowId === rowId) {\n-            elem = index;\n-          }\n+      if (tabs) {\n+        Object.values(tabs).forEach((tab) => {\n+          const { tabId } = tab;\n+          const tableId = `${windowType}_${docId}_${tabId}`;\n+          const tableData = {\n+            windowType,\n+            docId,\n+            tabId,\n+            ...tab,\n+          };\n+          dispatch(createTabTable(tableId, tableData));\n         });\n+      }\n \n-        if (docId === 'NEW') {\n-          dispatch(updateModal(null, response.data[0].id));\n+      if (documentId == 'NEW' && !isModal) {\n+        dispatch(setLatestNewDocument(docId));\n+        // redirect immedietely\n+        return dispatch(replace(`/window/${windowType}/${docId}`));\n+      }\n+\n+      let elem = 0;\n+\n+      response.data.forEach((value, index) => {\n+        if (value.rowId === rowId) {\n+          elem = index;\n         }\n+      });\n \n-        docId = response.data[elem].id;\n-        dispatch(\n-          initDataSuccess({\n-            data: parseToDisplay(response.data[elem].fieldsByName),\n-            docId,\n-            saveStatus: response.data[0].saveStatus,\n-            scope: getScope(isModal),\n-            standardActions: response.data[0].standardActions,\n-            validStatus: response.data[0].validStatus,\n-            includedTabsInfo: response.data[0].includedTabsInfo,\n-            websocket: response.data[0].websocketEndpoint,\n-          })\n-        );\n+      if (documentId === 'NEW') {\n+        dispatch(updateModal(null, docId));\n+      }\n \n-        if (isModal) {\n-          if (rowId === 'NEW') {\n-            dispatch(\n-              mapDataToState(response.data, false, 'NEW', docId, windowId)\n-            );\n-            dispatch(updateStatus(response.data));\n-            dispatch(updateModal(response.data[0].rowId));\n-          }\n-        } else {\n-          dispatch(getWindowBreadcrumb(windowId));\n+      // TODO: Is `elem` ever different than 0 ?\n+      docId = response.data[elem].id;\n+      dispatch(\n+        initDataSuccess({\n+          data: parseToDisplay(response.data[elem].fieldsByName),\n+          docId,\n+          saveStatus: data.saveStatus,\n+          scope: getScope(isModal),\n+          standardActions: data.standardActions,\n+          validStatus: data.validStatus,\n+          includedTabsInfo: data.includedTabsInfo,\n+          websocket: data.websocketEndpoint,\n+        })\n+      );\n+\n+      if (isModal) {\n+        if (rowId === 'NEW') {\n+          dispatch(\n+            mapDataToState(response.data, false, 'NEW', docId, windowType)\n+          );\n+          dispatch(updateStatus(response.data));\n+          dispatch(updateModal(data.rowId));\n         }\n+      } else {\n+        dispatch(getWindowBreadcrumb(windowType));\n+      }\n \n-        return getLayout('window', windowId, tabId, null, null, isAdvanced)\n-          .then((response) =>\n-            dispatch(initLayoutSuccess(response.data, getScope(isModal)))\n-          )\n-          .then((response) => {\n-            if (!isModal) {\n-              return dispatch(\n-                initTabs(response.layout.tabs, windowId, docId, isModal)\n-              );\n+      return (\n+        getLayout('window', windowType, tabId, null, null, isAdvanced)\n+          .then(({ data }) => {\n+            const layoutTabs = data.tabs;\n+\n+            if (layoutTabs.length) {\n+              Object.values(layoutTabs).forEach((tab) => {\n+                const { tabId } = tab;\n+                const tableId = `${windowType}_${docId}_${tabId}`;\n+                const tableData = {\n+                  windowType,\n+                  docId,\n+                  tabId,\n+                  ...tab,\n+                };\n+                dispatch(updateTabTable(tableId, tableData));\n+              });\n             }\n-            return Promise.resolve(null);\n+\n+            dispatch(initLayoutSuccess(data, getScope(isModal)));\n           })\n-          .catch((e) => Promise.reject(e));\n-      }\n-    );\n+          // TODO: looks like this can be removed ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 293}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTQ4MTE5OnYy", "diffSide": "RIGHT", "path": "frontend/src/components/app/DocumentList/index.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNToxMTo1NlrOGUhqSw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwODo0MToxOVrOGUncuA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3NjIwMw==", "bodyText": "Has this been clarified after the meeting with Teo ? Can we remove it ?", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424176203", "createdAt": "2020-05-13T05:11:56Z", "author": {"login": "petrican"}, "path": "frontend/src/components/app/DocumentList/index.js", "diffHunk": "@@ -524,6 +528,7 @@ class DocumentListContainer extends Component {\n \n         const pageColumnInfosByFieldName = response.columnsByFieldName;\n \n+        // TODO: There is some sorcery happening here. Why are we doing this ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI3MTAzMg==", "bodyText": "Yeah, I'll create an issue and mention it here.", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424271032", "createdAt": "2020-05-13T08:41:19Z", "author": {"login": "siemiatj"}, "path": "frontend/src/components/app/DocumentList/index.js", "diffHunk": "@@ -524,6 +528,7 @@ class DocumentListContainer extends Component {\n \n         const pageColumnInfosByFieldName = response.columnsByFieldName;\n \n+        // TODO: There is some sorcery happening here. Why are we doing this ?", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3NjIwMw=="}, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTQ4NDU1OnYy", "diffSide": "RIGHT", "path": "frontend/src/actions/WindowActions.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNToxMzo1MFrOGUhsSQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzo0OToxN1rOGUlgrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3NjcxMw==", "bodyText": "Pls use object for params", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424176713", "createdAt": "2020-05-13T05:13:50Z", "author": {"login": "petrican"}, "path": "frontend/src/actions/WindowActions.js", "diffHunk": "@@ -521,38 +528,64 @@ export function deselectTableItems(ids, windowType, viewId) {\n \n // THUNK ACTIONS\n \n-export function initTabs(layout, windowType, docId, isModal) {\n-  return async (dispatch) => {\n-    const requests = [];\n-    const tabTmp = {};\n-\n-    if (layout) {\n-      layout.map((tab, index) => {\n-        tabTmp[tab.tabId] = {};\n-\n-        if ((tab.tabId && index === 0) || !tab.queryOnActivate) {\n-          requests.push(getTab(tab.tabId, windowType, docId));\n-        }\n-      });\n+// TODO: Just a quick thunk action creator to test Tables reducer\n+// but looks like this can actually replace the `initTabs`.\n+/*\n+ * @method fetchTab\n+ * @summary Action creator for fetching single tab's rows\n+ */\n+export function fetchTab(tabId, windowType, docId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDIzOTI3OA==", "bodyText": "Same as above. I don't see the advantage especially that we're still using windowId in some places so it might turn out this will cause some unexpected issues.", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424239278", "createdAt": "2020-05-13T07:49:17Z", "author": {"login": "siemiatj"}, "path": "frontend/src/actions/WindowActions.js", "diffHunk": "@@ -521,38 +528,64 @@ export function deselectTableItems(ids, windowType, viewId) {\n \n // THUNK ACTIONS\n \n-export function initTabs(layout, windowType, docId, isModal) {\n-  return async (dispatch) => {\n-    const requests = [];\n-    const tabTmp = {};\n-\n-    if (layout) {\n-      layout.map((tab, index) => {\n-        tabTmp[tab.tabId] = {};\n-\n-        if ((tab.tabId && index === 0) || !tab.queryOnActivate) {\n-          requests.push(getTab(tab.tabId, windowType, docId));\n-        }\n-      });\n+// TODO: Just a quick thunk action creator to test Tables reducer\n+// but looks like this can actually replace the `initTabs`.\n+/*\n+ * @method fetchTab\n+ * @summary Action creator for fetching single tab's rows\n+ */\n+export function fetchTab(tabId, windowType, docId) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3NjcxMw=="}, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTQ4Njk2OnYy", "diffSide": "RIGHT", "path": "frontend/src/actions/WindowActions.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNToxNToxM1rOGUhtuA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNToyMzo0OFrOGUh2HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3NzA4MA==", "bodyText": "should we have a dedicated function for forming the tableId ? wdyt ?", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424177080", "createdAt": "2020-05-13T05:15:13Z", "author": {"login": "petrican"}, "path": "frontend/src/actions/WindowActions.js", "diffHunk": "@@ -521,38 +528,64 @@ export function deselectTableItems(ids, windowType, viewId) {\n \n // THUNK ACTIONS\n \n-export function initTabs(layout, windowType, docId, isModal) {\n-  return async (dispatch) => {\n-    const requests = [];\n-    const tabTmp = {};\n-\n-    if (layout) {\n-      layout.map((tab, index) => {\n-        tabTmp[tab.tabId] = {};\n-\n-        if ((tab.tabId && index === 0) || !tab.queryOnActivate) {\n-          requests.push(getTab(tab.tabId, windowType, docId));\n-        }\n-      });\n+// TODO: Just a quick thunk action creator to test Tables reducer\n+// but looks like this can actually replace the `initTabs`.\n+/*\n+ * @method fetchTab\n+ * @summary Action creator for fetching single tab's rows\n+ */\n+export function fetchTab(tabId, windowType, docId) {\n+  return (dispatch) => {\n+    return getTabRequest(tabId, windowType, docId)\n+      .then((response) => {\n+        const tableId = `${windowType}_${docId}_${tabId}`;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3OTIyOQ==", "bodyText": "You already have a function for forming that right ? Can you pls use that here instead and whenever we have similar table id formatting? Thanks", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424179229", "createdAt": "2020-05-13T05:23:48Z", "author": {"login": "petrican"}, "path": "frontend/src/actions/WindowActions.js", "diffHunk": "@@ -521,38 +528,64 @@ export function deselectTableItems(ids, windowType, viewId) {\n \n // THUNK ACTIONS\n \n-export function initTabs(layout, windowType, docId, isModal) {\n-  return async (dispatch) => {\n-    const requests = [];\n-    const tabTmp = {};\n-\n-    if (layout) {\n-      layout.map((tab, index) => {\n-        tabTmp[tab.tabId] = {};\n-\n-        if ((tab.tabId && index === 0) || !tab.queryOnActivate) {\n-          requests.push(getTab(tab.tabId, windowType, docId));\n-        }\n-      });\n+// TODO: Just a quick thunk action creator to test Tables reducer\n+// but looks like this can actually replace the `initTabs`.\n+/*\n+ * @method fetchTab\n+ * @summary Action creator for fetching single tab's rows\n+ */\n+export function fetchTab(tabId, windowType, docId) {\n+  return (dispatch) => {\n+    return getTabRequest(tabId, windowType, docId)\n+      .then((response) => {\n+        const tableId = `${windowType}_${docId}_${tabId}`;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3NzA4MA=="}, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTQ5MTQ1OnYy", "diffSide": "RIGHT", "path": "frontend/src/components/window/Tab.js", "isResolved": true, "comments": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNToxNzo1OVrOGUhwZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwOTozMDo0NVrOGUpWVw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3Nzc2Nw==", "bodyText": "https://github.com/ryanmcdermott/clean-code-javascript#functions", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424177767", "createdAt": "2020-05-13T05:17:59Z", "author": {"login": "petrican"}, "path": "frontend/src/components/window/Tab.js", "diffHunk": "@@ -31,16 +35,17 @@ class Tab extends Component {\n         : '';\n \n       if (singleRowView) {\n-        getTab(tabId, windowId, docId).then((res) => {\n+        fetchTab(tabId, windowId, docId).then((res) => {\n           if (res.length) {\n-            dispatch(updateMasterData(res[0]));\n-            dispatch(addRowData({ [tabId]: res }, 'master'));\n+            updateMasterData(res[0]);\n+            addRowData({ [tabId]: res }, 'master');\n             onChange && onChange();\n           }\n         });\n+        fetchTab(tabId, windowId, docId);\n       } else {\n-        getTab(tabId, windowId, docId, query).then((res) => {\n-          dispatch(addRowData({ [tabId]: res }, 'master'));\n+        fetchTab(tabId, windowId, docId, query).then((res) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0MzIxMg==", "bodyText": "I don't know who Ryan McDermott is so not really convinced his style guide is any kind of market standard. As mentioned above - although it does make sense to switch to named parameters in some cases, most of the time it's a premature optimization. And in our case we're not great at naming conventions, and often we use different names for the same parameter (windowId/windowType) or have duplicated names (docId/docid). So there might be unexpected side effects.", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424243212", "createdAt": "2020-05-13T07:55:43Z", "author": {"login": "siemiatj"}, "path": "frontend/src/components/window/Tab.js", "diffHunk": "@@ -31,16 +35,17 @@ class Tab extends Component {\n         : '';\n \n       if (singleRowView) {\n-        getTab(tabId, windowId, docId).then((res) => {\n+        fetchTab(tabId, windowId, docId).then((res) => {\n           if (res.length) {\n-            dispatch(updateMasterData(res[0]));\n-            dispatch(addRowData({ [tabId]: res }, 'master'));\n+            updateMasterData(res[0]);\n+            addRowData({ [tabId]: res }, 'master');\n             onChange && onChange();\n           }\n         });\n+        fetchTab(tabId, windowId, docId);\n       } else {\n-        getTab(tabId, windowId, docId, query).then((res) => {\n-          dispatch(addRowData({ [tabId]: res }, 'master'));\n+        fetchTab(tabId, windowId, docId, query).then((res) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3Nzc2Nw=="}, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI2OTA4OA==", "bodyText": "I don't know who Ryan McDermott\n\nme neither but those are the coding standards we (all) agreed to use.\nOfc we can improve them but i am eager to understand why when having a certain number of params, why is not using named parameters?\nPS: that coding style was adapted from Uncle Bob's Clean Code book.... which is widely adopted.\n\nAnd in our case we're not great at naming conventions,\n\nThat's true.\n\nand often we use different names for the same parameter (windowId/windowType) or have duplicated names (docId/docid).\n\nThat's also true.\n\nSo there might be unexpected side effects.\n\ncan u pls enumarete a couple of those side effects?", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424269088", "createdAt": "2020-05-13T08:38:22Z", "author": {"login": "teosarca"}, "path": "frontend/src/components/window/Tab.js", "diffHunk": "@@ -31,16 +35,17 @@ class Tab extends Component {\n         : '';\n \n       if (singleRowView) {\n-        getTab(tabId, windowId, docId).then((res) => {\n+        fetchTab(tabId, windowId, docId).then((res) => {\n           if (res.length) {\n-            dispatch(updateMasterData(res[0]));\n-            dispatch(addRowData({ [tabId]: res }, 'master'));\n+            updateMasterData(res[0]);\n+            addRowData({ [tabId]: res }, 'master');\n             onChange && onChange();\n           }\n         });\n+        fetchTab(tabId, windowId, docId);\n       } else {\n-        getTab(tabId, windowId, docId, query).then((res) => {\n-          dispatch(addRowData({ [tabId]: res }, 'master'));\n+        fetchTab(tabId, windowId, docId, query).then((res) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3Nzc2Nw=="}, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI3MDgzMQ==", "bodyText": "Like... shit breaks because we're not sending the right parameter ? windowId is undefined in the URL ? The problem is that without having static typing changes like this will always be prone to errors if done in a hurry. So I'd rather create a separate task for this than to learn the hard way that we've missed the variable in one critical spot.", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424270831", "createdAt": "2020-05-13T08:40:58Z", "author": {"login": "siemiatj"}, "path": "frontend/src/components/window/Tab.js", "diffHunk": "@@ -31,16 +35,17 @@ class Tab extends Component {\n         : '';\n \n       if (singleRowView) {\n-        getTab(tabId, windowId, docId).then((res) => {\n+        fetchTab(tabId, windowId, docId).then((res) => {\n           if (res.length) {\n-            dispatch(updateMasterData(res[0]));\n-            dispatch(addRowData({ [tabId]: res }, 'master'));\n+            updateMasterData(res[0]);\n+            addRowData({ [tabId]: res }, 'master');\n             onChange && onChange();\n           }\n         });\n+        fetchTab(tabId, windowId, docId);\n       } else {\n-        getTab(tabId, windowId, docId, query).then((res) => {\n-          dispatch(addRowData({ [tabId]: res }, 'master'));\n+        fetchTab(tabId, windowId, docId, query).then((res) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3Nzc2Nw=="}, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDMwMjE2Nw==", "bodyText": "can u give me a concrete example? i.e. which functions might break?\nI briefly scrolled over the code and I saw those param names are quite local.\nAlso pressing F2 in VSCode will do the rename for you without any trouble.\nE separate task would mean separate testing.\nAnd a task like 'refactor the var name' i barely can see approved.\nI could understand refactoring in interactions and have different iterations because you want to refactor & stabilize  (btw, Martin Fowler has a nice book about Refactoring techniques),\nbut it's hard for me to see a refactor var names task realistic.\nI know that we were not good at naming things, so we named the same thing in several ways introducing to developers.\nBut we can change. We can fix it one by one when we touch that part of the code.\nElse, my fear is that in one year we will talk about same problems and we will contemplate same issues.", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424302167", "createdAt": "2020-05-13T09:30:45Z", "author": {"login": "teosarca"}, "path": "frontend/src/components/window/Tab.js", "diffHunk": "@@ -31,16 +35,17 @@ class Tab extends Component {\n         : '';\n \n       if (singleRowView) {\n-        getTab(tabId, windowId, docId).then((res) => {\n+        fetchTab(tabId, windowId, docId).then((res) => {\n           if (res.length) {\n-            dispatch(updateMasterData(res[0]));\n-            dispatch(addRowData({ [tabId]: res }, 'master'));\n+            updateMasterData(res[0]);\n+            addRowData({ [tabId]: res }, 'master');\n             onChange && onChange();\n           }\n         });\n+        fetchTab(tabId, windowId, docId);\n       } else {\n-        getTab(tabId, windowId, docId, query).then((res) => {\n-          dispatch(addRowData({ [tabId]: res }, 'master'));\n+        fetchTab(tabId, windowId, docId, query).then((res) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3Nzc2Nw=="}, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 48}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MTQ5NzE3OnYy", "diffSide": "RIGHT", "path": "frontend/src/reducers/tables.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNToyMTozOVrOGUh0Bw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNzo1MToxOVrOGUllmw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3ODY5NQ==", "bodyText": "Oh I see we have the table Id gen function in here. I didn't spot it on the first check. Pls use it in all the places where table ID is formed.", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424178695", "createdAt": "2020-05-13T05:21:39Z", "author": {"login": "petrican"}, "path": "frontend/src/reducers/tables.js", "diffHunk": "@@ -0,0 +1,115 @@\n+import produce from 'immer';\n+import { get } from 'lodash';\n+import { createSelector } from 'reselect';\n+\n+import * as types from '../constants/ActionTypes';\n+\n+export const tableState = {\n+  windowType: null,\n+  viewId: null,\n+  docId: null,\n+  tabId: null,\n+  selected: [],\n+  rows: [],\n+  // row columns\n+  columns: [],\n+  activeSort: false,\n+  headerProperties: {},\n+\n+  //header columns\n+  headerElements: {},\n+  emptyText: null,\n+  emptyHint: null,\n+  page: 0,\n+  firstRow: 0,\n+  size: 0,\n+  orderBy: [],\n+  defaultOrderBys: [],\n+  pageLength: 0,\n+  queryLimit: 0,\n+  queryLimitHit: false,\n+  dataPending: false,\n+  dataError: false,\n+  tabIndex: 0,\n+  internalName: null,\n+  queryOnActivate: true,\n+  supportQuickInput: true,\n+\n+  // includedTabsInfo\n+  allowCreateNew: true,\n+  allowCreateNewReason: null,\n+  allowDelete: true,\n+  stale: false,\n+};\n+\n+// we store the length of the tables structure for the sake of testing and debugging\n+export const initialState = { length: 0 };\n+\n+/**\n+ * @method getTableId\n+ * @summary Small helper function to generate the table id depending on the values (if viewId is\n+ * provided, we'll use only that for grids, and if not - it's a tab table so document id\n+ * and tab ids are expected ).\n+ */\n+export const getTableId = ({ windowType, viewId, docId, tabId }) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDI0MDUzOQ==", "bodyText": "consider renaming\n\nwindowType to windowId\ndocId to documentId", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424240539", "createdAt": "2020-05-13T07:51:19Z", "author": {"login": "teosarca"}, "path": "frontend/src/reducers/tables.js", "diffHunk": "@@ -0,0 +1,115 @@\n+import produce from 'immer';\n+import { get } from 'lodash';\n+import { createSelector } from 'reselect';\n+\n+import * as types from '../constants/ActionTypes';\n+\n+export const tableState = {\n+  windowType: null,\n+  viewId: null,\n+  docId: null,\n+  tabId: null,\n+  selected: [],\n+  rows: [],\n+  // row columns\n+  columns: [],\n+  activeSort: false,\n+  headerProperties: {},\n+\n+  //header columns\n+  headerElements: {},\n+  emptyText: null,\n+  emptyHint: null,\n+  page: 0,\n+  firstRow: 0,\n+  size: 0,\n+  orderBy: [],\n+  defaultOrderBys: [],\n+  pageLength: 0,\n+  queryLimit: 0,\n+  queryLimitHit: false,\n+  dataPending: false,\n+  dataError: false,\n+  tabIndex: 0,\n+  internalName: null,\n+  queryOnActivate: true,\n+  supportQuickInput: true,\n+\n+  // includedTabsInfo\n+  allowCreateNew: true,\n+  allowCreateNewReason: null,\n+  allowDelete: true,\n+  stale: false,\n+};\n+\n+// we store the length of the tables structure for the sake of testing and debugging\n+export const initialState = { length: 0 };\n+\n+/**\n+ * @method getTableId\n+ * @summary Small helper function to generate the table id depending on the values (if viewId is\n+ * provided, we'll use only that for grids, and if not - it's a tab table so document id\n+ * and tab ids are expected ).\n+ */\n+export const getTableId = ({ windowType, viewId, docId, tabId }) => {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3ODY5NQ=="}, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 54}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1619, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}