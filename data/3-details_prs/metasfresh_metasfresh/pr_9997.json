{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxNjEzMTEy", "number": 9997, "title": "#9987 Enable a discount for ESR payments ", "bodyText": "Enable a discount for ESR payments #9987", "createdAt": "2020-09-23T08:39:39Z", "url": "https://github.com/metasfresh/metasfresh/pull/9997", "merged": true, "mergeCommit": {"oid": "583cf4f2c5b10927c1e080c60da72d03a37cdf8e"}, "closed": true, "closedAt": "2020-09-24T13:51:44Z", "author": {"login": "cristinamghita"}, "timelineItems": {"totalCount": 22, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdLXCfEAH2gAyNDkxNjEzMTEyOjUxNGIxMGVlN2FlYjQ3MmY2MjljMzQxNjkzOThkM2QxYjUwMTUzNjk=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdMBL42gH2gAyNDkxNjEzMTEyOjQ3OTk1MWYzMDNiNDFhMTliM2U4NTkxNDlhZTVjY2Q3OWRmOTE2ZWM=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "514b10ee7aeb472f629c34169398d3d1b5015369", "author": {"user": {"login": "cristinamghita", "name": "Cristina Ghita"}}, "url": "https://github.com/metasfresh/metasfresh/commit/514b10ee7aeb472f629c34169398d3d1b5015369", "committedDate": "2020-09-22T12:20:56Z", "message": "#9987 Enable ESR Payment discounts\n\n#9987 Enable ESR Payment discounts"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8c08c0a235c242a16c9e2e2a33fc761f3b84b9cc", "author": {"user": {"login": "cristinamghita", "name": "Cristina Ghita"}}, "url": "https://github.com/metasfresh/metasfresh/commit/8c08c0a235c242a16c9e2e2a33fc761f3b84b9cc", "committedDate": "2020-09-23T05:36:49Z", "message": "#9987 Register disocunt handler"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e14de8e5d2823f13e85744b1cdc608a2a845f31a", "author": {"user": {"login": "cristinamghita", "name": "Cristina Ghita"}}, "url": "https://github.com/metasfresh/metasfresh/commit/e14de8e5d2823f13e85744b1cdc608a2a845f31a", "committedDate": "2020-09-23T05:48:44Z", "message": "#9987 Fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29f58e800651f8db077bc7e82de4768fd45dc1b8", "author": {"user": {"login": "cristinamghita", "name": "Cristina Ghita"}}, "url": "https://github.com/metasfresh/metasfresh/commit/29f58e800651f8db077bc7e82de4768fd45dc1b8", "committedDate": "2020-09-23T07:24:52Z", "message": "#9987 Aloowe Discount when selecting actions"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NDUxOTIx", "url": "https://github.com/metasfresh/metasfresh/pull/9997#pullrequestreview-494451921", "createdAt": "2020-09-23T09:05:19Z", "commit": {"oid": "29f58e800651f8db077bc7e82de4768fd45dc1b8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTowNToxOVrOHWfTRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTowNToxOVrOHWfTRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM0MzU1Nw==", "bodyText": "i guess u can simply use runInThreadInheritedTrx", "url": "https://github.com/metasfresh/metasfresh/pull/9997#discussion_r493343557", "createdAt": "2020-09-23T09:05:19Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.payment.esr/src/main/java/de/metas/payment/esr/actionhandler/impl/DiscountESRActionHandler.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package de.metas.payment.esr.actionhandler.impl;\n+\n+import org.adempiere.ad.trx.api.ITrxManager;\n+import org.adempiere.ad.trx.api.OnTrxMissingPolicy;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.compiere.model.I_C_Invoice;\n+import org.compiere.model.I_C_Payment;\n+import org.compiere.util.TrxRunnable;\n+\n+import de.metas.currency.Amount;\n+import de.metas.invoice.InvoiceId;\n+import de.metas.invoice.service.IInvoiceBL;\n+import de.metas.invoice.service.IInvoiceDAO;\n+import de.metas.payment.PaymentId;\n+import de.metas.payment.esr.ESRConstants;\n+import de.metas.payment.esr.model.I_ESR_ImportLine;\n+import de.metas.util.Check;\n+import de.metas.util.Services;\n+\n+/**\n+ * Handler for {@link de.metas.payment.esr.model.X_ESR_ImportLine#EESR_PAYMENT_ACTION_Discount}. This handler discounts the open amount of the line's invoice. For lines that don't have an\n+ * invoice, the handler does nothing.\n+ * \n+ */\n+public class DiscountESRActionHandler extends AbstractESRActionHandler\n+{\n+\tfinal IInvoiceBL invoiceBL = Services.get(IInvoiceBL.class);\n+\tfinal IInvoiceDAO invoiceDAO = Services.get(IInvoiceDAO.class);\n+\tfinal ITrxManager trxManager = Services.get(ITrxManager.class);\n+\n+\t@Override\n+\tpublic boolean process(final I_ESR_ImportLine line, final String message)\n+\t{\n+\t\tsuper.process(line, message);\n+\n+\t\tCheck.assumeNotNull(line.getESR_Payment_Action(), \"@\" + ESRConstants.ERR_ESR_LINE_WITH_NO_PAYMENT_ACTION + \"@\");\n+\n+\t\tfinal I_C_Invoice invoice = line.getC_Invoice();\n+\t\tif (invoice == null)\n+\t\t{\n+\t\t\t// We have nothing to do, but the line should still be flagged as processed.\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\t// sanity check: there must be an payment with a negative OverUnderAmt\n+\n+\t\tfinal PaymentId esrImportLinePaymentId = PaymentId.ofRepoIdOrNull(line.getC_Payment_ID());\n+\t\tfinal I_C_Payment payment = esrImportLinePaymentId == null ? null\n+\t\t\t\t: paymentDAO.getById(esrImportLinePaymentId);\n+\n+\t\tfinal String trxName = trxManager.getThreadInheritedTrxName(OnTrxMissingPolicy.ReturnTrxNone);\n+\n+//\t\tInterfaceWrapperHelper.refresh(payment, trxName); // refresh the payment : very important; otherwise the over amount is not seen\n+//\t\tInterfaceWrapperHelper.refresh(invoice, trxName); // refresh the payment : very important; otherwise the over amount is not seen\n+\t\tCheck.assumeNotNull(payment, \"Null payment for line {}\", line.getESR_ImportLine_ID());\n+\t\tCheck.errorIf(payment.getOverUnderAmt().signum() > 0, \"Exces payment for line {}. Can't discount this\", line.getESR_ImportLine_ID());\n+\n+\t\tfinal Amount discount = invoiceDAO.retrieveOpenAmt(InvoiceId.ofRepoId(invoice.getC_Invoice_ID()));\n+\n+\t\ttrxManager.run(trxName, new TrxRunnable()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29f58e800651f8db077bc7e82de4768fd45dc1b8"}, "originalPosition": 60}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NDUyNjg5", "url": "https://github.com/metasfresh/metasfresh/pull/9997#pullrequestreview-494452689", "createdAt": "2020-09-23T09:06:16Z", "commit": {"oid": "29f58e800651f8db077bc7e82de4768fd45dc1b8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTowNjoxN1rOHWfXLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTowNjoxN1rOHWfXLQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM0NDU1Nw==", "bodyText": "discount shall be Amount.\nPls avoid using BigDecimal for amounts and quantities.", "url": "https://github.com/metasfresh/metasfresh/pull/9997#discussion_r493344557", "createdAt": "2020-09-23T09:06:17Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java", "diffHunk": "@@ -1746,4 +1746,40 @@ public PaymentRule getDefaultPaymentRule()\n \t\treturn sysconfigs.getReferenceListAware(SYSCONFIG_C_Invoice_PaymentRule, PaymentRule.OnCredit, PaymentRule.class);\n \t}\n \n+\t@Override\n+\tpublic final void discountInvoice(final org.compiere.model.I_C_Invoice invoice, final BigDecimal discountAmt, final String description)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29f58e800651f8db077bc7e82de4768fd45dc1b8"}, "originalPosition": 5}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NDUzOTM2", "url": "https://github.com/metasfresh/metasfresh/pull/9997#pullrequestreview-494453936", "createdAt": "2020-09-23T09:07:53Z", "commit": {"oid": "29f58e800651f8db077bc7e82de4768fd45dc1b8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTowNzo1M1rOHWfdFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTowNzo1M1rOHWfdFg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM0NjA3MA==", "bodyText": "not sure if using invoice's DateAcct/DateInvoiced is correct.", "url": "https://github.com/metasfresh/metasfresh/pull/9997#discussion_r493346070", "createdAt": "2020-09-23T09:07:53Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java", "diffHunk": "@@ -1746,4 +1746,40 @@ public PaymentRule getDefaultPaymentRule()\n \t\treturn sysconfigs.getReferenceListAware(SYSCONFIG_C_Invoice_PaymentRule, PaymentRule.OnCredit, PaymentRule.class);\n \t}\n \n+\t@Override\n+\tpublic final void discountInvoice(final org.compiere.model.I_C_Invoice invoice, final BigDecimal discountAmt, final String description)\n+\t{\n+\t\tif (discountAmt.signum() == 0)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfinal BigDecimal discountAmtAbs;\n+\t\tif (!invoice.isSOTrx())\n+\t\t{\n+\t\t\t// API\n+\t\t\tdiscountAmtAbs = discountAmt.negate();\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\t// ARI\n+\t\t\tdiscountAmtAbs = discountAmt;\n+\t\t}\n+\n+\t\t// @formatter:off\n+\t\tServices.get(IAllocationBL.class).newBuilder()\n+\t\t\t.orgId(invoice.getAD_Org_ID())\n+\t\t\t.currencyId(invoice.getC_Currency_ID())\n+\t\t\t.dateAcct(invoice.getDateAcct())\n+\t\t\t.dateTrx(invoice.getDateInvoiced())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29f58e800651f8db077bc7e82de4768fd45dc1b8"}, "originalPosition": 29}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NDU2Mjc5", "url": "https://github.com/metasfresh/metasfresh/pull/9997#pullrequestreview-494456279", "createdAt": "2020-09-23T09:10:49Z", "commit": {"oid": "29f58e800651f8db077bc7e82de4768fd45dc1b8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOToxMDo0OVrOHWfnKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOToxMDo0OVrOHWfnKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM0ODY0OA==", "bodyText": "why is that needed?", "url": "https://github.com/metasfresh/metasfresh/pull/9997#discussion_r493348648", "createdAt": "2020-09-23T09:10:49Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.payment.esr/src/main/java/de/metas/payment/esr/actionhandler/impl/DiscountESRActionHandler.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package de.metas.payment.esr.actionhandler.impl;\n+\n+import org.adempiere.ad.trx.api.ITrxManager;\n+import org.adempiere.ad.trx.api.OnTrxMissingPolicy;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.compiere.model.I_C_Invoice;\n+import org.compiere.model.I_C_Payment;\n+import org.compiere.util.TrxRunnable;\n+\n+import de.metas.currency.Amount;\n+import de.metas.invoice.InvoiceId;\n+import de.metas.invoice.service.IInvoiceBL;\n+import de.metas.invoice.service.IInvoiceDAO;\n+import de.metas.payment.PaymentId;\n+import de.metas.payment.esr.ESRConstants;\n+import de.metas.payment.esr.model.I_ESR_ImportLine;\n+import de.metas.util.Check;\n+import de.metas.util.Services;\n+\n+/**\n+ * Handler for {@link de.metas.payment.esr.model.X_ESR_ImportLine#EESR_PAYMENT_ACTION_Discount}. This handler discounts the open amount of the line's invoice. For lines that don't have an\n+ * invoice, the handler does nothing.\n+ * \n+ */\n+public class DiscountESRActionHandler extends AbstractESRActionHandler\n+{\n+\tfinal IInvoiceBL invoiceBL = Services.get(IInvoiceBL.class);\n+\tfinal IInvoiceDAO invoiceDAO = Services.get(IInvoiceDAO.class);\n+\tfinal ITrxManager trxManager = Services.get(ITrxManager.class);\n+\n+\t@Override\n+\tpublic boolean process(final I_ESR_ImportLine line, final String message)\n+\t{\n+\t\tsuper.process(line, message);\n+\n+\t\tCheck.assumeNotNull(line.getESR_Payment_Action(), \"@\" + ESRConstants.ERR_ESR_LINE_WITH_NO_PAYMENT_ACTION + \"@\");\n+\n+\t\tfinal I_C_Invoice invoice = line.getC_Invoice();\n+\t\tif (invoice == null)\n+\t\t{\n+\t\t\t// We have nothing to do, but the line should still be flagged as processed.\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\t// sanity check: there must be an payment with a negative OverUnderAmt\n+\n+\t\tfinal PaymentId esrImportLinePaymentId = PaymentId.ofRepoIdOrNull(line.getC_Payment_ID());\n+\t\tfinal I_C_Payment payment = esrImportLinePaymentId == null ? null\n+\t\t\t\t: paymentDAO.getById(esrImportLinePaymentId);\n+\n+\t\tfinal String trxName = trxManager.getThreadInheritedTrxName(OnTrxMissingPolicy.ReturnTrxNone);\n+\n+//\t\tInterfaceWrapperHelper.refresh(payment, trxName); // refresh the payment : very important; otherwise the over amount is not seen\n+//\t\tInterfaceWrapperHelper.refresh(invoice, trxName); // refresh the payment : very important; otherwise the over amount is not seen\n+\t\tCheck.assumeNotNull(payment, \"Null payment for line {}\", line.getESR_ImportLine_ID());\n+\t\tCheck.errorIf(payment.getOverUnderAmt().signum() > 0, \"Exces payment for line {}. Can't discount this\", line.getESR_ImportLine_ID());\n+\n+\t\tfinal Amount discount = invoiceDAO.retrieveOpenAmt(InvoiceId.ofRepoId(invoice.getC_Invoice_ID()));\n+\n+\t\ttrxManager.run(trxName, new TrxRunnable()\n+\t\t{\n+\t\t\t@Override\n+\t\t\tpublic void run(String trxName) throws Exception\n+\t\t\t{\n+\t\t\t\t// must assure that the invoice has transaction\n+\t\t\t\tInterfaceWrapperHelper.refresh(invoice, trxName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29f58e800651f8db077bc7e82de4768fd45dc1b8"}, "originalPosition": 66}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NDU2ODEw", "url": "https://github.com/metasfresh/metasfresh/pull/9997#pullrequestreview-494456810", "createdAt": "2020-09-23T09:11:23Z", "commit": {"oid": "29f58e800651f8db077bc7e82de4768fd45dc1b8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "091d2df7684046b96b64f0df76caf2aee8e5e198", "author": {"user": {"login": "cristinamghita", "name": "Cristina Ghita"}}, "url": "https://github.com/metasfresh/metasfresh/commit/091d2df7684046b96b64f0df76caf2aee8e5e198", "committedDate": "2020-09-23T09:58:19Z", "message": "#9987 Minor changes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b218932053ce355e2fc28b5de728434fe55d52e0", "author": {"user": {"login": "cristinamghita", "name": "Cristina Ghita"}}, "url": "https://github.com/metasfresh/metasfresh/commit/b218932053ce355e2fc28b5de728434fe55d52e0", "committedDate": "2020-09-23T09:58:56Z", "message": "#9987 Imports"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NTQyMTg1", "url": "https://github.com/metasfresh/metasfresh/pull/9997#pullrequestreview-494542185", "createdAt": "2020-09-23T11:03:52Z", "commit": {"oid": "091d2df7684046b96b64f0df76caf2aee8e5e198"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMTowMzo1MlrOHWmG4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMTowMzo1MlrOHWmG4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ1NTA3Mg==", "bodyText": "use the discountAmt's currency", "url": "https://github.com/metasfresh/metasfresh/pull/9997#discussion_r493455072", "createdAt": "2020-09-23T11:03:52Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java", "diffHunk": "@@ -1746,4 +1747,40 @@ public PaymentRule getDefaultPaymentRule()\n \t\treturn sysconfigs.getReferenceListAware(SYSCONFIG_C_Invoice_PaymentRule, PaymentRule.OnCredit, PaymentRule.class);\n \t}\n \n+\t@Override\n+\tpublic final void discountInvoice(final @NonNull org.compiere.model.I_C_Invoice invoice, final @NonNull Amount discountAmt , final String description)\n+\t{\n+\t\tif (discountAmt .signum() == 0)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfinal BigDecimal discountAmtAbs;\n+\t\tif (!invoice.isSOTrx())\n+\t\t{\n+\t\t\t// API\n+\t\t\tdiscountAmtAbs = discountAmt.getAsBigDecimal().negate();\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\t// ARI\n+\t\t\tdiscountAmtAbs = discountAmt.getAsBigDecimal();\n+\t\t}\n+\n+\t\t// @formatter:off\n+\t\tServices.get(IAllocationBL.class).newBuilder()\n+\t\t\t.orgId(invoice.getAD_Org_ID())\n+\t\t\t.currencyId(invoice.getC_Currency_ID())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "091d2df7684046b96b64f0df76caf2aee8e5e198"}, "originalPosition": 35}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDk0NTQyMzc0", "url": "https://github.com/metasfresh/metasfresh/pull/9997#pullrequestreview-494542374", "createdAt": "2020-09-23T11:04:09Z", "commit": {"oid": "091d2df7684046b96b64f0df76caf2aee8e5e198"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMTowNDowOVrOHWmHpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMTowNDowOVrOHWmHpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ1NTI3MA==", "bodyText": "avoid BigDecimal at all. Use Amount type", "url": "https://github.com/metasfresh/metasfresh/pull/9997#discussion_r493455270", "createdAt": "2020-09-23T11:04:09Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java", "diffHunk": "@@ -1746,4 +1747,40 @@ public PaymentRule getDefaultPaymentRule()\n \t\treturn sysconfigs.getReferenceListAware(SYSCONFIG_C_Invoice_PaymentRule, PaymentRule.OnCredit, PaymentRule.class);\n \t}\n \n+\t@Override\n+\tpublic final void discountInvoice(final @NonNull org.compiere.model.I_C_Invoice invoice, final @NonNull Amount discountAmt , final String description)\n+\t{\n+\t\tif (discountAmt .signum() == 0)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfinal BigDecimal discountAmtAbs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "091d2df7684046b96b64f0df76caf2aee8e5e198"}, "originalPosition": 20}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8ba2322e394d330077101b0b52141398f147d456", "author": {"user": {"login": "cristinamghita", "name": "Cristina Ghita"}}, "url": "https://github.com/metasfresh/metasfresh/commit/8ba2322e394d330077101b0b52141398f147d456", "committedDate": "2020-09-23T14:06:50Z", "message": "#9987 Use amount"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fdb3d7ffcac8c5a44f7bb4c2a3d02ed00abda9f7", "author": {"user": {"login": "cristinamghita", "name": "Cristina Ghita"}}, "url": "https://github.com/metasfresh/metasfresh/commit/fdb3d7ffcac8c5a44f7bb4c2a3d02ed00abda9f7", "committedDate": "2020-09-23T14:27:25Z", "message": "#9987 Use payment date for the new allocation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7010c952f4a45e9fa0279538add145cae204b84b", "author": {"user": {"login": "cristinamghita", "name": "Cristina Ghita"}}, "url": "https://github.com/metasfresh/metasfresh/commit/7010c952f4a45e9fa0279538add145cae204b84b", "committedDate": "2020-09-23T15:16:47Z", "message": "#9987 Trying to fix test"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9dd64fcf82ecfa872e6362a48ec0b5dbfbd37051", "author": {"user": {"login": "cristinamghita", "name": "Cristina Ghita"}}, "url": "https://github.com/metasfresh/metasfresh/commit/9dd64fcf82ecfa872e6362a48ec0b5dbfbd37051", "committedDate": "2020-09-24T07:35:42Z", "message": "#9987 Register CurrencyRepository for testing"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "29ce89382fed4759e9098c63d89835281c67b1ce", "author": {"user": {"login": "cristinamghita", "name": "Cristina Ghita"}}, "url": "https://github.com/metasfresh/metasfresh/commit/29ce89382fed4759e9098c63d89835281c67b1ce", "committedDate": "2020-09-24T07:47:50Z", "message": "#9987 Update trl"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "19a015a83b8ae391d52693b15239021de180666c", "author": {"user": {"login": "cristinamghita", "name": "Cristina Ghita"}}, "url": "https://github.com/metasfresh/metasfresh/commit/19a015a83b8ae391d52693b15239021de180666c", "committedDate": "2020-09-24T08:26:22Z", "message": "#9987 Fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "415cfab56362df295e02a6b6fbd76ef3fd414561", "author": {"user": {"login": "cristinamghita", "name": "Cristina Ghita"}}, "url": "https://github.com/metasfresh/metasfresh/commit/415cfab56362df295e02a6b6fbd76ef3fd414561", "committedDate": "2020-09-24T08:36:42Z", "message": "#9987 Final fixes for tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4546b212e92689153bee2d171e9224be9e61b80e", "author": {"user": {"login": "cristinamghita", "name": "Cristina Ghita"}}, "url": "https://github.com/metasfresh/metasfresh/commit/4546b212e92689153bee2d171e9224be9e61b80e", "committedDate": "2020-09-24T12:31:58Z", "message": "#9987 Final fixes for tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "479951f303b41a19b3e859149ae5ccd79df916ec", "author": {"user": {"login": "cristinamghita", "name": "Cristina Ghita"}}, "url": "https://github.com/metasfresh/metasfresh/commit/479951f303b41a19b3e859149ae5ccd79df916ec", "committedDate": "2020-09-24T13:27:13Z", "message": "Merge branch 'intensive_care_uat' into gh9987"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3062, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}