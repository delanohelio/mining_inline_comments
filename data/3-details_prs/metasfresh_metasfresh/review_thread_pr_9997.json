{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxNjEzMTEy", "number": 9997, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTowNToxOVrOEmdQ6g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMTowNDowOVrOEmhXUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NzYwODEwOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.payment.esr/src/main/java/de/metas/payment/esr/actionhandler/impl/DiscountESRActionHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTowNToxOVrOHWfTRQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTowNToxOVrOHWfTRQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM0MzU1Nw==", "bodyText": "i guess u can simply use runInThreadInheritedTrx", "url": "https://github.com/metasfresh/metasfresh/pull/9997#discussion_r493343557", "createdAt": "2020-09-23T09:05:19Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.payment.esr/src/main/java/de/metas/payment/esr/actionhandler/impl/DiscountESRActionHandler.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package de.metas.payment.esr.actionhandler.impl;\n+\n+import org.adempiere.ad.trx.api.ITrxManager;\n+import org.adempiere.ad.trx.api.OnTrxMissingPolicy;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.compiere.model.I_C_Invoice;\n+import org.compiere.model.I_C_Payment;\n+import org.compiere.util.TrxRunnable;\n+\n+import de.metas.currency.Amount;\n+import de.metas.invoice.InvoiceId;\n+import de.metas.invoice.service.IInvoiceBL;\n+import de.metas.invoice.service.IInvoiceDAO;\n+import de.metas.payment.PaymentId;\n+import de.metas.payment.esr.ESRConstants;\n+import de.metas.payment.esr.model.I_ESR_ImportLine;\n+import de.metas.util.Check;\n+import de.metas.util.Services;\n+\n+/**\n+ * Handler for {@link de.metas.payment.esr.model.X_ESR_ImportLine#EESR_PAYMENT_ACTION_Discount}. This handler discounts the open amount of the line's invoice. For lines that don't have an\n+ * invoice, the handler does nothing.\n+ * \n+ */\n+public class DiscountESRActionHandler extends AbstractESRActionHandler\n+{\n+\tfinal IInvoiceBL invoiceBL = Services.get(IInvoiceBL.class);\n+\tfinal IInvoiceDAO invoiceDAO = Services.get(IInvoiceDAO.class);\n+\tfinal ITrxManager trxManager = Services.get(ITrxManager.class);\n+\n+\t@Override\n+\tpublic boolean process(final I_ESR_ImportLine line, final String message)\n+\t{\n+\t\tsuper.process(line, message);\n+\n+\t\tCheck.assumeNotNull(line.getESR_Payment_Action(), \"@\" + ESRConstants.ERR_ESR_LINE_WITH_NO_PAYMENT_ACTION + \"@\");\n+\n+\t\tfinal I_C_Invoice invoice = line.getC_Invoice();\n+\t\tif (invoice == null)\n+\t\t{\n+\t\t\t// We have nothing to do, but the line should still be flagged as processed.\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\t// sanity check: there must be an payment with a negative OverUnderAmt\n+\n+\t\tfinal PaymentId esrImportLinePaymentId = PaymentId.ofRepoIdOrNull(line.getC_Payment_ID());\n+\t\tfinal I_C_Payment payment = esrImportLinePaymentId == null ? null\n+\t\t\t\t: paymentDAO.getById(esrImportLinePaymentId);\n+\n+\t\tfinal String trxName = trxManager.getThreadInheritedTrxName(OnTrxMissingPolicy.ReturnTrxNone);\n+\n+//\t\tInterfaceWrapperHelper.refresh(payment, trxName); // refresh the payment : very important; otherwise the over amount is not seen\n+//\t\tInterfaceWrapperHelper.refresh(invoice, trxName); // refresh the payment : very important; otherwise the over amount is not seen\n+\t\tCheck.assumeNotNull(payment, \"Null payment for line {}\", line.getESR_ImportLine_ID());\n+\t\tCheck.errorIf(payment.getOverUnderAmt().signum() > 0, \"Exces payment for line {}. Can't discount this\", line.getESR_ImportLine_ID());\n+\n+\t\tfinal Amount discount = invoiceDAO.retrieveOpenAmt(InvoiceId.ofRepoId(invoice.getC_Invoice_ID()));\n+\n+\t\ttrxManager.run(trxName, new TrxRunnable()", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29f58e800651f8db077bc7e82de4768fd45dc1b8"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NzYxNDA1OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTowNjoxN1rOHWfXLQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOToxMDowMlrOHWfkrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM0NDU1Nw==", "bodyText": "discount shall be Amount.\nPls avoid using BigDecimal for amounts and quantities.", "url": "https://github.com/metasfresh/metasfresh/pull/9997#discussion_r493344557", "createdAt": "2020-09-23T09:06:17Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java", "diffHunk": "@@ -1746,4 +1746,40 @@ public PaymentRule getDefaultPaymentRule()\n \t\treturn sysconfigs.getReferenceListAware(SYSCONFIG_C_Invoice_PaymentRule, PaymentRule.OnCredit, PaymentRule.class);\n \t}\n \n+\t@Override\n+\tpublic final void discountInvoice(final org.compiere.model.I_C_Invoice invoice, final BigDecimal discountAmt, final String description)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29f58e800651f8db077bc7e82de4768fd45dc1b8"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM0ODAxNA==", "bodyText": "also document that discountAmt is not AP corrected.\ni.e. \"10 EUR discount\" means \"-10 EUR\" in case of Sales Invoice and \"+10 EUR\" in case of Vendor invoice.", "url": "https://github.com/metasfresh/metasfresh/pull/9997#discussion_r493348014", "createdAt": "2020-09-23T09:10:02Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java", "diffHunk": "@@ -1746,4 +1746,40 @@ public PaymentRule getDefaultPaymentRule()\n \t\treturn sysconfigs.getReferenceListAware(SYSCONFIG_C_Invoice_PaymentRule, PaymentRule.OnCredit, PaymentRule.class);\n \t}\n \n+\t@Override\n+\tpublic final void discountInvoice(final org.compiere.model.I_C_Invoice invoice, final BigDecimal discountAmt, final String description)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM0NDU1Nw=="}, "originalCommit": {"oid": "29f58e800651f8db077bc7e82de4768fd45dc1b8"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NzYyMzU2OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTowNzo1M1rOHWfdFg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMDowODozOFrOHWjEdA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM0NjA3MA==", "bodyText": "not sure if using invoice's DateAcct/DateInvoiced is correct.", "url": "https://github.com/metasfresh/metasfresh/pull/9997#discussion_r493346070", "createdAt": "2020-09-23T09:07:53Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java", "diffHunk": "@@ -1746,4 +1746,40 @@ public PaymentRule getDefaultPaymentRule()\n \t\treturn sysconfigs.getReferenceListAware(SYSCONFIG_C_Invoice_PaymentRule, PaymentRule.OnCredit, PaymentRule.class);\n \t}\n \n+\t@Override\n+\tpublic final void discountInvoice(final org.compiere.model.I_C_Invoice invoice, final BigDecimal discountAmt, final String description)\n+\t{\n+\t\tif (discountAmt.signum() == 0)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfinal BigDecimal discountAmtAbs;\n+\t\tif (!invoice.isSOTrx())\n+\t\t{\n+\t\t\t// API\n+\t\t\tdiscountAmtAbs = discountAmt.negate();\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\t// ARI\n+\t\t\tdiscountAmtAbs = discountAmt;\n+\t\t}\n+\n+\t\t// @formatter:off\n+\t\tServices.get(IAllocationBL.class).newBuilder()\n+\t\t\t.orgId(invoice.getAD_Org_ID())\n+\t\t\t.currencyId(invoice.getC_Currency_ID())\n+\t\t\t.dateAcct(invoice.getDateAcct())\n+\t\t\t.dateTrx(invoice.getDateInvoiced())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29f58e800651f8db077bc7e82de4768fd45dc1b8"}, "originalPosition": 29}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQwNTMwMA==", "bodyText": "Need to clear it with Mark", "url": "https://github.com/metasfresh/metasfresh/pull/9997#discussion_r493405300", "createdAt": "2020-09-23T10:08:38Z", "author": {"login": "cristinamghita"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java", "diffHunk": "@@ -1746,4 +1746,40 @@ public PaymentRule getDefaultPaymentRule()\n \t\treturn sysconfigs.getReferenceListAware(SYSCONFIG_C_Invoice_PaymentRule, PaymentRule.OnCredit, PaymentRule.class);\n \t}\n \n+\t@Override\n+\tpublic final void discountInvoice(final org.compiere.model.I_C_Invoice invoice, final BigDecimal discountAmt, final String description)\n+\t{\n+\t\tif (discountAmt.signum() == 0)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfinal BigDecimal discountAmtAbs;\n+\t\tif (!invoice.isSOTrx())\n+\t\t{\n+\t\t\t// API\n+\t\t\tdiscountAmtAbs = discountAmt.negate();\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\t// ARI\n+\t\t\tdiscountAmtAbs = discountAmt;\n+\t\t}\n+\n+\t\t// @formatter:off\n+\t\tServices.get(IAllocationBL.class).newBuilder()\n+\t\t\t.orgId(invoice.getAD_Org_ID())\n+\t\t\t.currencyId(invoice.getC_Currency_ID())\n+\t\t\t.dateAcct(invoice.getDateAcct())\n+\t\t\t.dateTrx(invoice.getDateInvoiced())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM0NjA3MA=="}, "originalCommit": {"oid": "29f58e800651f8db077bc7e82de4768fd45dc1b8"}, "originalPosition": 29}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NzYzOTIxOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.payment.esr/src/main/java/de/metas/payment/esr/actionhandler/impl/DiscountESRActionHandler.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOToxMDo0OVrOHWfnKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOToxMDo0OVrOHWfnKA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM0ODY0OA==", "bodyText": "why is that needed?", "url": "https://github.com/metasfresh/metasfresh/pull/9997#discussion_r493348648", "createdAt": "2020-09-23T09:10:49Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.payment.esr/src/main/java/de/metas/payment/esr/actionhandler/impl/DiscountESRActionHandler.java", "diffHunk": "@@ -0,0 +1,74 @@\n+package de.metas.payment.esr.actionhandler.impl;\n+\n+import org.adempiere.ad.trx.api.ITrxManager;\n+import org.adempiere.ad.trx.api.OnTrxMissingPolicy;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.compiere.model.I_C_Invoice;\n+import org.compiere.model.I_C_Payment;\n+import org.compiere.util.TrxRunnable;\n+\n+import de.metas.currency.Amount;\n+import de.metas.invoice.InvoiceId;\n+import de.metas.invoice.service.IInvoiceBL;\n+import de.metas.invoice.service.IInvoiceDAO;\n+import de.metas.payment.PaymentId;\n+import de.metas.payment.esr.ESRConstants;\n+import de.metas.payment.esr.model.I_ESR_ImportLine;\n+import de.metas.util.Check;\n+import de.metas.util.Services;\n+\n+/**\n+ * Handler for {@link de.metas.payment.esr.model.X_ESR_ImportLine#EESR_PAYMENT_ACTION_Discount}. This handler discounts the open amount of the line's invoice. For lines that don't have an\n+ * invoice, the handler does nothing.\n+ * \n+ */\n+public class DiscountESRActionHandler extends AbstractESRActionHandler\n+{\n+\tfinal IInvoiceBL invoiceBL = Services.get(IInvoiceBL.class);\n+\tfinal IInvoiceDAO invoiceDAO = Services.get(IInvoiceDAO.class);\n+\tfinal ITrxManager trxManager = Services.get(ITrxManager.class);\n+\n+\t@Override\n+\tpublic boolean process(final I_ESR_ImportLine line, final String message)\n+\t{\n+\t\tsuper.process(line, message);\n+\n+\t\tCheck.assumeNotNull(line.getESR_Payment_Action(), \"@\" + ESRConstants.ERR_ESR_LINE_WITH_NO_PAYMENT_ACTION + \"@\");\n+\n+\t\tfinal I_C_Invoice invoice = line.getC_Invoice();\n+\t\tif (invoice == null)\n+\t\t{\n+\t\t\t// We have nothing to do, but the line should still be flagged as processed.\n+\t\t\treturn true;\n+\t\t}\n+\n+\t\t// sanity check: there must be an payment with a negative OverUnderAmt\n+\n+\t\tfinal PaymentId esrImportLinePaymentId = PaymentId.ofRepoIdOrNull(line.getC_Payment_ID());\n+\t\tfinal I_C_Payment payment = esrImportLinePaymentId == null ? null\n+\t\t\t\t: paymentDAO.getById(esrImportLinePaymentId);\n+\n+\t\tfinal String trxName = trxManager.getThreadInheritedTrxName(OnTrxMissingPolicy.ReturnTrxNone);\n+\n+//\t\tInterfaceWrapperHelper.refresh(payment, trxName); // refresh the payment : very important; otherwise the over amount is not seen\n+//\t\tInterfaceWrapperHelper.refresh(invoice, trxName); // refresh the payment : very important; otherwise the over amount is not seen\n+\t\tCheck.assumeNotNull(payment, \"Null payment for line {}\", line.getESR_ImportLine_ID());\n+\t\tCheck.errorIf(payment.getOverUnderAmt().signum() > 0, \"Exces payment for line {}. Can't discount this\", line.getESR_ImportLine_ID());\n+\n+\t\tfinal Amount discount = invoiceDAO.retrieveOpenAmt(InvoiceId.ofRepoId(invoice.getC_Invoice_ID()));\n+\n+\t\ttrxManager.run(trxName, new TrxRunnable()\n+\t\t{\n+\t\t\t@Override\n+\t\t\tpublic void run(String trxName) throws Exception\n+\t\t\t{\n+\t\t\t\t// must assure that the invoice has transaction\n+\t\t\t\tInterfaceWrapperHelper.refresh(invoice, trxName);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "29f58e800651f8db077bc7e82de4768fd45dc1b8"}, "originalPosition": 66}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4ODI3ODYxOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMTowMzo1MlrOHWmG4A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMTowMzo1MlrOHWmG4A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ1NTA3Mg==", "bodyText": "use the discountAmt's currency", "url": "https://github.com/metasfresh/metasfresh/pull/9997#discussion_r493455072", "createdAt": "2020-09-23T11:03:52Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java", "diffHunk": "@@ -1746,4 +1747,40 @@ public PaymentRule getDefaultPaymentRule()\n \t\treturn sysconfigs.getReferenceListAware(SYSCONFIG_C_Invoice_PaymentRule, PaymentRule.OnCredit, PaymentRule.class);\n \t}\n \n+\t@Override\n+\tpublic final void discountInvoice(final @NonNull org.compiere.model.I_C_Invoice invoice, final @NonNull Amount discountAmt , final String description)\n+\t{\n+\t\tif (discountAmt .signum() == 0)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfinal BigDecimal discountAmtAbs;\n+\t\tif (!invoice.isSOTrx())\n+\t\t{\n+\t\t\t// API\n+\t\t\tdiscountAmtAbs = discountAmt.getAsBigDecimal().negate();\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\t// ARI\n+\t\t\tdiscountAmtAbs = discountAmt.getAsBigDecimal();\n+\t\t}\n+\n+\t\t// @formatter:off\n+\t\tServices.get(IAllocationBL.class).newBuilder()\n+\t\t\t.orgId(invoice.getAD_Org_ID())\n+\t\t\t.currencyId(invoice.getC_Currency_ID())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "091d2df7684046b96b64f0df76caf2aee8e5e198"}, "originalPosition": 35}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4ODI3OTg1OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMTowNDowOVrOHWmHpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QxMTowNDowOVrOHWmHpg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzQ1NTI3MA==", "bodyText": "avoid BigDecimal at all. Use Amount type", "url": "https://github.com/metasfresh/metasfresh/pull/9997#discussion_r493455270", "createdAt": "2020-09-23T11:04:09Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/service/impl/AbstractInvoiceBL.java", "diffHunk": "@@ -1746,4 +1747,40 @@ public PaymentRule getDefaultPaymentRule()\n \t\treturn sysconfigs.getReferenceListAware(SYSCONFIG_C_Invoice_PaymentRule, PaymentRule.OnCredit, PaymentRule.class);\n \t}\n \n+\t@Override\n+\tpublic final void discountInvoice(final @NonNull org.compiere.model.I_C_Invoice invoice, final @NonNull Amount discountAmt , final String description)\n+\t{\n+\t\tif (discountAmt .signum() == 0)\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfinal BigDecimal discountAmtAbs;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "091d2df7684046b96b64f0df76caf2aee8e5e198"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1185, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}