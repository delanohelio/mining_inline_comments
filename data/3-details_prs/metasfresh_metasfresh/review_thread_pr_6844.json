{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM0NDM0MTM0", "number": 6844, "reviewThreads": {"totalCount": 12, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMDo0OTowMlrOEFfGyQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMTozMjo1OFrOEFf6gg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTg3OTc3OnYy", "diffSide": "RIGHT", "path": "frontend/src/components/table/TableCell.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMDo0OTowM1rOGjs_vg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMjo0MToxMlrOGjwagw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA5MDU1OA==", "bodyText": "pls document what is state", "url": "https://github.com/metasfresh/metasfresh/pull/6844#discussion_r440090558", "createdAt": "2020-06-15T10:49:03Z", "author": {"login": "teosarca"}, "path": "frontend/src/components/table/TableCell.js", "diffHunk": "@@ -1,184 +1,51 @@\n-import Moment from 'moment-timezone';\n import PropTypes from 'prop-types';\n-import numeral from 'numeral';\n import React, { PureComponent, createRef } from 'react';\n import classnames from 'classnames';\n-\n import MasterWidget from '../widget/MasterWidget';\n-import {\n-  AMOUNT_FIELD_TYPES,\n-  AMOUNT_FIELD_FORMATS_BY_PRECISION,\n-  SPECIAL_FIELD_TYPES,\n-  DATE_FIELD_TYPES,\n-  TIME_FIELD_TYPES,\n-  DATE_FIELD_FORMATS,\n-  TIME_REGEX_TEST,\n-  TIME_FORMAT,\n-} from '../../constants/Constants';\n+import { getDateFormat, fieldValueToString } from '../../utils/tableHelpers';\n+import { DATE_FIELD_FORMATS } from '../../constants/Constants';\n import WidgetTooltip from '../widget/WidgetTooltip';\n-\n class TableCell extends PureComponent {\n-  static getAmountFormatByPrecision = (precision) =>\n-    precision &&\n-    precision >= 0 &&\n-    precision < AMOUNT_FIELD_FORMATS_BY_PRECISION.length\n-      ? AMOUNT_FIELD_FORMATS_BY_PRECISION[precision]\n-      : null;\n-\n-  static getDateFormat = (fieldType) => DATE_FIELD_FORMATS[fieldType];\n-\n-  static createDate = (fieldValue, fieldType) => {\n-    if (fieldValue) {\n-      return !Moment.isMoment(fieldValue) && fieldValue.match(TIME_REGEX_TEST)\n-        ? Moment.utc(Moment.duration(fieldValue).asMilliseconds()).format(\n-            TIME_FORMAT\n-          )\n-        : Moment(fieldValue).format(TableCell.getDateFormat(fieldType));\n-    }\n-\n-    return '';\n-  };\n-\n-  static createAmount = (fieldValue, precision, isGerman) => {\n-    if (fieldValue) {\n-      const fieldValueAsNum = numeral(parseFloat(fieldValue));\n-      const numberFormat = TableCell.getAmountFormatByPrecision(precision);\n-      const returnValue = numberFormat\n-        ? fieldValueAsNum.format(numberFormat)\n-        : fieldValueAsNum.format();\n-\n-      // For German natives we want to show numbers with comma as a value separator\n-      // https://github.com/metasfresh/me03/issues/1822\n-      if (isGerman && parseFloat(returnValue) != null) {\n-        const commaRegexp = /,/g;\n-        commaRegexp.test(returnValue);\n-        const lastIdx = commaRegexp.lastIndex;\n-\n-        if (lastIdx) {\n-          return returnValue;\n-        }\n-\n-        return `${returnValue}`.replace('.', ',');\n-      }\n-\n-      return returnValue;\n-    }\n-\n-    return '';\n-  };\n-\n-  static createSpecialField = (fieldType, fieldValue) => {\n-    switch (fieldType) {\n-      case 'Color': {\n-        const style = {\n-          backgroundColor: fieldValue,\n-        };\n-        return <span className=\"widget-color-display\" style={style} />;\n-      }\n-      default:\n-        return fieldValue;\n-    }\n-  };\n-\n-  // @TODO: THIS NEEDS URGENT REFACTORING, WHY THE HECK ARE WE RETURNING\n-  // SIX DIFFERENT TYPES OF VALUES HERE ? UBER-BAD DESIGN !\n-  static fieldValueToString = (\n-    fieldValue,\n-    fieldType = 'Text',\n-    precision = null,\n-    isGerman\n-  ) => {\n-    if (fieldValue === null) {\n-      return '';\n-    }\n-\n-    switch (typeof fieldValue) {\n-      case 'object': {\n-        if (Array.isArray(fieldValue)) {\n-          return fieldValue\n-            .map((value) => TableCell.fieldValueToString(value, fieldType))\n-            .join(' - ');\n-        }\n-\n-        return DATE_FIELD_TYPES.includes(fieldType) ||\n-          TIME_FIELD_TYPES.includes(fieldType)\n-          ? TableCell.createDate(fieldValue, fieldType)\n-          : fieldValue.caption;\n-      }\n-      case 'boolean': {\n-        return fieldValue ? (\n-          <i className=\"meta-icon-checkbox-1\" />\n-        ) : (\n-          <i className=\"meta-icon-checkbox\" />\n-        );\n-      }\n-      case 'string': {\n-        if (\n-          DATE_FIELD_TYPES.includes(fieldType) ||\n-          TIME_FIELD_TYPES.includes(fieldType)\n-        ) {\n-          return TableCell.createDate(fieldValue, fieldType);\n-        } else if (AMOUNT_FIELD_TYPES.includes(fieldType)) {\n-          return TableCell.createAmount(fieldValue, precision, isGerman);\n-        } else if (SPECIAL_FIELD_TYPES.includes(fieldType)) {\n-          return TableCell.createSpecialField(fieldType, fieldValue);\n-        }\n-        return fieldValue;\n-      }\n-      default: {\n-        return fieldValue;\n-      }\n-    }\n-  };\n-\n   constructor(props) {\n     super(props);\n-\n     this.widget = createRef();\n-\n     this.clearWidgetValue = false;\n \n     this.state = {\n-      tooltipToggled: false,\n+      tooltipToggled: false, // keeping in the local state the flag for the tooltip\n     };\n   }\n \n-  UNSAFE_componentWillReceiveProps(nextProps) {\n-    const { updateRow, readonly, rowId, tdValue } = this.props;\n-    const { tdValue: nextTdValue } = nextProps;\n-    // We should avoid highlighting when whole row is exchanged (sorting)\n-    if (rowId !== nextProps.rowId) {\n-      return;\n-    }\n-\n-    if (!readonly && tdValue !== nextTdValue) {\n-      updateRow();\n-    }\n-  }\n-\n-  widgetTooltipToggle = (field, value) => {\n+  /**\n+   * @method widgetTooltipToggle\n+   * @summary Alternative method to open dropdown, in case of disabled opening on focus.\n+   * @param {string|null} value\n+   */\n+  widgetTooltipToggle = (value) => {\n     const curVal = this.state.tooltipToggled;\n     const newVal = value != null ? value : !curVal;\n \n-    this.setState({\n-      tooltipToggled: newVal,\n-    });\n+    this.setState({ tooltipToggled: newVal });\n   };\n \n+  /**\n+   * @method handleBackdropLock\n+   * @summary checks widget against widget list and calls parent onClickOutside fnct\n+   * @param {object} state", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33012efc68354443443e7f55b817cea62f16d015"}, "originalPosition": 181}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE0NjU2Mw==", "bodyText": "Done", "url": "https://github.com/metasfresh/metasfresh/pull/6844#discussion_r440146563", "createdAt": "2020-06-15T12:41:12Z", "author": {"login": "petrican"}, "path": "frontend/src/components/table/TableCell.js", "diffHunk": "@@ -1,184 +1,51 @@\n-import Moment from 'moment-timezone';\n import PropTypes from 'prop-types';\n-import numeral from 'numeral';\n import React, { PureComponent, createRef } from 'react';\n import classnames from 'classnames';\n-\n import MasterWidget from '../widget/MasterWidget';\n-import {\n-  AMOUNT_FIELD_TYPES,\n-  AMOUNT_FIELD_FORMATS_BY_PRECISION,\n-  SPECIAL_FIELD_TYPES,\n-  DATE_FIELD_TYPES,\n-  TIME_FIELD_TYPES,\n-  DATE_FIELD_FORMATS,\n-  TIME_REGEX_TEST,\n-  TIME_FORMAT,\n-} from '../../constants/Constants';\n+import { getDateFormat, fieldValueToString } from '../../utils/tableHelpers';\n+import { DATE_FIELD_FORMATS } from '../../constants/Constants';\n import WidgetTooltip from '../widget/WidgetTooltip';\n-\n class TableCell extends PureComponent {\n-  static getAmountFormatByPrecision = (precision) =>\n-    precision &&\n-    precision >= 0 &&\n-    precision < AMOUNT_FIELD_FORMATS_BY_PRECISION.length\n-      ? AMOUNT_FIELD_FORMATS_BY_PRECISION[precision]\n-      : null;\n-\n-  static getDateFormat = (fieldType) => DATE_FIELD_FORMATS[fieldType];\n-\n-  static createDate = (fieldValue, fieldType) => {\n-    if (fieldValue) {\n-      return !Moment.isMoment(fieldValue) && fieldValue.match(TIME_REGEX_TEST)\n-        ? Moment.utc(Moment.duration(fieldValue).asMilliseconds()).format(\n-            TIME_FORMAT\n-          )\n-        : Moment(fieldValue).format(TableCell.getDateFormat(fieldType));\n-    }\n-\n-    return '';\n-  };\n-\n-  static createAmount = (fieldValue, precision, isGerman) => {\n-    if (fieldValue) {\n-      const fieldValueAsNum = numeral(parseFloat(fieldValue));\n-      const numberFormat = TableCell.getAmountFormatByPrecision(precision);\n-      const returnValue = numberFormat\n-        ? fieldValueAsNum.format(numberFormat)\n-        : fieldValueAsNum.format();\n-\n-      // For German natives we want to show numbers with comma as a value separator\n-      // https://github.com/metasfresh/me03/issues/1822\n-      if (isGerman && parseFloat(returnValue) != null) {\n-        const commaRegexp = /,/g;\n-        commaRegexp.test(returnValue);\n-        const lastIdx = commaRegexp.lastIndex;\n-\n-        if (lastIdx) {\n-          return returnValue;\n-        }\n-\n-        return `${returnValue}`.replace('.', ',');\n-      }\n-\n-      return returnValue;\n-    }\n-\n-    return '';\n-  };\n-\n-  static createSpecialField = (fieldType, fieldValue) => {\n-    switch (fieldType) {\n-      case 'Color': {\n-        const style = {\n-          backgroundColor: fieldValue,\n-        };\n-        return <span className=\"widget-color-display\" style={style} />;\n-      }\n-      default:\n-        return fieldValue;\n-    }\n-  };\n-\n-  // @TODO: THIS NEEDS URGENT REFACTORING, WHY THE HECK ARE WE RETURNING\n-  // SIX DIFFERENT TYPES OF VALUES HERE ? UBER-BAD DESIGN !\n-  static fieldValueToString = (\n-    fieldValue,\n-    fieldType = 'Text',\n-    precision = null,\n-    isGerman\n-  ) => {\n-    if (fieldValue === null) {\n-      return '';\n-    }\n-\n-    switch (typeof fieldValue) {\n-      case 'object': {\n-        if (Array.isArray(fieldValue)) {\n-          return fieldValue\n-            .map((value) => TableCell.fieldValueToString(value, fieldType))\n-            .join(' - ');\n-        }\n-\n-        return DATE_FIELD_TYPES.includes(fieldType) ||\n-          TIME_FIELD_TYPES.includes(fieldType)\n-          ? TableCell.createDate(fieldValue, fieldType)\n-          : fieldValue.caption;\n-      }\n-      case 'boolean': {\n-        return fieldValue ? (\n-          <i className=\"meta-icon-checkbox-1\" />\n-        ) : (\n-          <i className=\"meta-icon-checkbox\" />\n-        );\n-      }\n-      case 'string': {\n-        if (\n-          DATE_FIELD_TYPES.includes(fieldType) ||\n-          TIME_FIELD_TYPES.includes(fieldType)\n-        ) {\n-          return TableCell.createDate(fieldValue, fieldType);\n-        } else if (AMOUNT_FIELD_TYPES.includes(fieldType)) {\n-          return TableCell.createAmount(fieldValue, precision, isGerman);\n-        } else if (SPECIAL_FIELD_TYPES.includes(fieldType)) {\n-          return TableCell.createSpecialField(fieldType, fieldValue);\n-        }\n-        return fieldValue;\n-      }\n-      default: {\n-        return fieldValue;\n-      }\n-    }\n-  };\n-\n   constructor(props) {\n     super(props);\n-\n     this.widget = createRef();\n-\n     this.clearWidgetValue = false;\n \n     this.state = {\n-      tooltipToggled: false,\n+      tooltipToggled: false, // keeping in the local state the flag for the tooltip\n     };\n   }\n \n-  UNSAFE_componentWillReceiveProps(nextProps) {\n-    const { updateRow, readonly, rowId, tdValue } = this.props;\n-    const { tdValue: nextTdValue } = nextProps;\n-    // We should avoid highlighting when whole row is exchanged (sorting)\n-    if (rowId !== nextProps.rowId) {\n-      return;\n-    }\n-\n-    if (!readonly && tdValue !== nextTdValue) {\n-      updateRow();\n-    }\n-  }\n-\n-  widgetTooltipToggle = (field, value) => {\n+  /**\n+   * @method widgetTooltipToggle\n+   * @summary Alternative method to open dropdown, in case of disabled opening on focus.\n+   * @param {string|null} value\n+   */\n+  widgetTooltipToggle = (value) => {\n     const curVal = this.state.tooltipToggled;\n     const newVal = value != null ? value : !curVal;\n \n-    this.setState({\n-      tooltipToggled: newVal,\n-    });\n+    this.setState({ tooltipToggled: newVal });\n   };\n \n+  /**\n+   * @method handleBackdropLock\n+   * @summary checks widget against widget list and calls parent onClickOutside fnct\n+   * @param {object} state", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA5MDU1OA=="}, "originalCommit": {"oid": "33012efc68354443443e7f55b817cea62f16d015"}, "originalPosition": 181}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTg5NTI4OnYy", "diffSide": "RIGHT", "path": "frontend/src/components/table/TableCell.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMDo1NDoyM1rOGjtJjw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoyNjoyNlrOGjyEKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA5MzA3MQ==", "bodyText": "why not making sure we get the right entity when <TableCell ...> is called?", "url": "https://github.com/metasfresh/metasfresh/pull/6844#discussion_r440093071", "createdAt": "2020-06-15T10:54:23Z", "author": {"login": "teosarca"}, "path": "frontend/src/components/table/TableCell.js", "diffHunk": "@@ -303,20 +244,7 @@ class TableCell extends PureComponent {\n           })\n         : null;\n \n-    if (cellExtended) {\n-      style = {\n-        height: extendLongText * 20,\n-      };\n-    }\n-\n-    let entityEffective;\n-    if (viewId) {\n-      entityEffective = 'documentView';\n-    } else if (mainTable) {\n-      entityEffective = 'window';\n-    } else {\n-      entityEffective = entity;\n-    }\n+    let entityEffective = this.getEntity({ viewId, mainTable, entity });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33012efc68354443443e7f55b817cea62f16d015"}, "originalPosition": 402}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE3MzYxMA==", "bodyText": "Fixed. Ditched the getEntity function and passing just the entity along", "url": "https://github.com/metasfresh/metasfresh/pull/6844#discussion_r440173610", "createdAt": "2020-06-15T13:26:26Z", "author": {"login": "petrican"}, "path": "frontend/src/components/table/TableCell.js", "diffHunk": "@@ -303,20 +244,7 @@ class TableCell extends PureComponent {\n           })\n         : null;\n \n-    if (cellExtended) {\n-      style = {\n-        height: extendLongText * 20,\n-      };\n-    }\n-\n-    let entityEffective;\n-    if (viewId) {\n-      entityEffective = 'documentView';\n-    } else if (mainTable) {\n-      entityEffective = 'window';\n-    } else {\n-      entityEffective = entity;\n-    }\n+    let entityEffective = this.getEntity({ viewId, mainTable, entity });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA5MzA3MQ=="}, "originalCommit": {"oid": "33012efc68354443443e7f55b817cea62f16d015"}, "originalPosition": 402}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTkwNTEyOnYy", "diffSide": "RIGHT", "path": "frontend/src/components/table/TableCell.js", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMDo1NzoyNFrOGjtPrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNDozMjowNVrOGkK3iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA5NDYzOA==", "bodyText": "why we need activeLocale and not using our functions from utils/locale.js?", "url": "https://github.com/metasfresh/metasfresh/pull/6844#discussion_r440094638", "createdAt": "2020-06-15T10:57:24Z", "author": {"login": "teosarca"}, "path": "frontend/src/components/table/TableCell.js", "diffHunk": "@@ -431,6 +359,7 @@ TableCell.propTypes = {\n   viewId: PropTypes.string,\n   modalVisible: PropTypes.bool,\n   docId: PropTypes.any,\n+  activeLocale: PropTypes.object,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33012efc68354443443e7f55b817cea62f16d015"}, "originalPosition": 410}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE0NTkwMQ==", "bodyText": "This is because activeLocale is passed from the parent component. Also note that this was branched from a branch that did not had the changes added in utils/locale.js. This will be fixed along with the merging on which @siemiatj is currently working on.", "url": "https://github.com/metasfresh/metasfresh/pull/6844#discussion_r440145901", "createdAt": "2020-06-15T12:39:57Z", "author": {"login": "petrican"}, "path": "frontend/src/components/table/TableCell.js", "diffHunk": "@@ -431,6 +359,7 @@ TableCell.propTypes = {\n   viewId: PropTypes.string,\n   modalVisible: PropTypes.bool,\n   docId: PropTypes.any,\n+  activeLocale: PropTypes.object,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA5NDYzOA=="}, "originalCommit": {"oid": "33012efc68354443443e7f55b817cea62f16d015"}, "originalPosition": 410}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI1MTM0Mg==", "bodyText": "@petrican @siemiatj  ok, but just to be sure.\nAt the end i would expect to have the locale\n\nonly in local store and accessed via getCurrentActiveLocale function\nor we have it in redux state and accessed from there or mapped to properties.\n\nWhat I would really avoid is having it in both places.\nPS: personally I think the best way would be to have it in redux store...", "url": "https://github.com/metasfresh/metasfresh/pull/6844#discussion_r440251342", "createdAt": "2020-06-15T15:16:09Z", "author": {"login": "teosarca"}, "path": "frontend/src/components/table/TableCell.js", "diffHunk": "@@ -431,6 +359,7 @@ TableCell.propTypes = {\n   viewId: PropTypes.string,\n   modalVisible: PropTypes.bool,\n   docId: PropTypes.any,\n+  activeLocale: PropTypes.object,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA5NDYzOA=="}, "originalCommit": {"oid": "33012efc68354443443e7f55b817cea62f16d015"}, "originalPosition": 410}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU3OTk3OQ==", "bodyText": "Ok I will sync with @siemiatj after everything is merged together to make sure there's only one way of getting the locale across the app. Thanks", "url": "https://github.com/metasfresh/metasfresh/pull/6844#discussion_r440579979", "createdAt": "2020-06-16T04:32:05Z", "author": {"login": "petrican"}, "path": "frontend/src/components/table/TableCell.js", "diffHunk": "@@ -431,6 +359,7 @@ TableCell.propTypes = {\n   viewId: PropTypes.string,\n   modalVisible: PropTypes.bool,\n   docId: PropTypes.any,\n+  activeLocale: PropTypes.object,", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA5NDYzOA=="}, "originalCommit": {"oid": "33012efc68354443443e7f55b817cea62f16d015"}, "originalPosition": 410}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTkwOTU0OnYy", "diffSide": "RIGHT", "path": "frontend/src/utils/tableHelpers.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMDo1ODo1NVrOGjtSlw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNjowNzo0MVrOGkMd7Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA5NTM4Mw==", "bodyText": "pls add unit test(s)", "url": "https://github.com/metasfresh/metasfresh/pull/6844#discussion_r440095383", "createdAt": "2020-06-15T10:58:55Z", "author": {"login": "teosarca"}, "path": "frontend/src/utils/tableHelpers.js", "diffHunk": "@@ -62,6 +75,38 @@ export function constructorFn() {\n   };\n }\n \n+/**\n+ * @method getAmountFormatByPrecisiont\n+ * @param {string} precision\n+ **/\n+export function getAmountFormatByPrecision(precision) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33012efc68354443443e7f55b817cea62f16d015"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYwNjE4OQ==", "bodyText": "Done", "url": "https://github.com/metasfresh/metasfresh/pull/6844#discussion_r440606189", "createdAt": "2020-06-16T06:07:41Z", "author": {"login": "petrican"}, "path": "frontend/src/utils/tableHelpers.js", "diffHunk": "@@ -62,6 +75,38 @@ export function constructorFn() {\n   };\n }\n \n+/**\n+ * @method getAmountFormatByPrecisiont\n+ * @param {string} precision\n+ **/\n+export function getAmountFormatByPrecision(precision) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA5NTM4Mw=="}, "originalCommit": {"oid": "33012efc68354443443e7f55b817cea62f16d015"}, "originalPosition": 27}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTkxMTM0OnYy", "diffSide": "RIGHT", "path": "frontend/src/utils/tableHelpers.js", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMDo1OToyOFrOGjtTsQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzoxNDoyNVrOGjxmvg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA5NTY2NQ==", "bodyText": "pls add unit test(s)", "url": "https://github.com/metasfresh/metasfresh/pull/6844#discussion_r440095665", "createdAt": "2020-06-15T10:59:28Z", "author": {"login": "teosarca"}, "path": "frontend/src/utils/tableHelpers.js", "diffHunk": "@@ -91,6 +136,146 @@ export function getSizeClass(col) {\n   }\n }\n \n+/**\n+ * @method createDate\n+ * @param {object} containing the fieldValue, fieldType and the active locale\n+ * @summary creates a Date using Moment lib formatting it with the locale passed as param\n+ */\n+export function createDate({ fieldValue, fieldType, activeLocale }) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33012efc68354443443e7f55b817cea62f16d015"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA5ODAyNg==", "bodyText": "also, instead of activeLocale={key, caption}, IMHO just sending the language name would be enough (i.e. activeLocale.key).", "url": "https://github.com/metasfresh/metasfresh/pull/6844#discussion_r440098026", "createdAt": "2020-06-15T11:04:27Z", "author": {"login": "teosarca"}, "path": "frontend/src/utils/tableHelpers.js", "diffHunk": "@@ -91,6 +136,146 @@ export function getSizeClass(col) {\n   }\n }\n \n+/**\n+ * @method createDate\n+ * @param {object} containing the fieldValue, fieldType and the active locale\n+ * @summary creates a Date using Moment lib formatting it with the locale passed as param\n+ */\n+export function createDate({ fieldValue, fieldType, activeLocale }) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA5NTY2NQ=="}, "originalCommit": {"oid": "33012efc68354443443e7f55b817cea62f16d015"}, "originalPosition": 67}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE2NjA3OA==", "bodyText": "// Adding a TODO in here and will make sure that after we have the utils/locale.js will adapt\nAlso added comment in the next issues such that we won't forget -> metasfresh/me03#4540 (comment)", "url": "https://github.com/metasfresh/metasfresh/pull/6844#discussion_r440166078", "createdAt": "2020-06-15T13:14:25Z", "author": {"login": "petrican"}, "path": "frontend/src/utils/tableHelpers.js", "diffHunk": "@@ -91,6 +136,146 @@ export function getSizeClass(col) {\n   }\n }\n \n+/**\n+ * @method createDate\n+ * @param {object} containing the fieldValue, fieldType and the active locale\n+ * @summary creates a Date using Moment lib formatting it with the locale passed as param\n+ */\n+export function createDate({ fieldValue, fieldType, activeLocale }) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA5NTY2NQ=="}, "originalCommit": {"oid": "33012efc68354443443e7f55b817cea62f16d015"}, "originalPosition": 67}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTkxMTc4OnYy", "diffSide": "RIGHT", "path": "frontend/src/utils/tableHelpers.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMDo1OTozOFrOGjtUAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMDo1OTozOFrOGjtUAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA5NTc0Nw==", "bodyText": "pls add unit test(s)", "url": "https://github.com/metasfresh/metasfresh/pull/6844#discussion_r440095747", "createdAt": "2020-06-15T10:59:38Z", "author": {"login": "teosarca"}, "path": "frontend/src/utils/tableHelpers.js", "diffHunk": "@@ -91,6 +136,146 @@ export function getSizeClass(col) {\n   }\n }\n \n+/**\n+ * @method createDate\n+ * @param {object} containing the fieldValue, fieldType and the active locale\n+ * @summary creates a Date using Moment lib formatting it with the locale passed as param\n+ */\n+export function createDate({ fieldValue, fieldType, activeLocale }) {\n+  const languageKey = activeLocale ? activeLocale.key : null;\n+  if (fieldValue) {\n+    return !Moment.isMoment(fieldValue) && fieldValue.match(TIME_REGEX_TEST)\n+      ? Moment.utc(Moment.duration(fieldValue).asMilliseconds())\n+          .locale(languageKey)\n+          .format(TIME_FORMAT)\n+      : Moment(fieldValue)\n+          .locale(languageKey)\n+          .format(getDateFormat(fieldType));\n+  }\n+\n+  return '';\n+}\n+\n+/**\n+ * @method createAmount\n+ * @param {string} fieldValue\n+ * @param {string} precision\n+ * @param {boolean} isGerman\n+ * @summary creates an amount for a given value with the desired precision and it provides special formatting\n+ *          for the case when german language is set\n+ */\n+export function createAmount(fieldValue, precision, isGerman) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33012efc68354443443e7f55b817cea62f16d015"}, "originalPosition": 90}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTkxMjI1OnYy", "diffSide": "RIGHT", "path": "frontend/src/utils/tableHelpers.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMDo1OTo0OVrOGjtUVA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNjowNzo1MFrOGkMeGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA5NTgyOA==", "bodyText": "pls add unit test(s)", "url": "https://github.com/metasfresh/metasfresh/pull/6844#discussion_r440095828", "createdAt": "2020-06-15T10:59:49Z", "author": {"login": "teosarca"}, "path": "frontend/src/utils/tableHelpers.js", "diffHunk": "@@ -91,6 +136,146 @@ export function getSizeClass(col) {\n   }\n }\n \n+/**\n+ * @method createDate\n+ * @param {object} containing the fieldValue, fieldType and the active locale\n+ * @summary creates a Date using Moment lib formatting it with the locale passed as param\n+ */\n+export function createDate({ fieldValue, fieldType, activeLocale }) {\n+  const languageKey = activeLocale ? activeLocale.key : null;\n+  if (fieldValue) {\n+    return !Moment.isMoment(fieldValue) && fieldValue.match(TIME_REGEX_TEST)\n+      ? Moment.utc(Moment.duration(fieldValue).asMilliseconds())\n+          .locale(languageKey)\n+          .format(TIME_FORMAT)\n+      : Moment(fieldValue)\n+          .locale(languageKey)\n+          .format(getDateFormat(fieldType));\n+  }\n+\n+  return '';\n+}\n+\n+/**\n+ * @method createAmount\n+ * @param {string} fieldValue\n+ * @param {string} precision\n+ * @param {boolean} isGerman\n+ * @summary creates an amount for a given value with the desired precision and it provides special formatting\n+ *          for the case when german language is set\n+ */\n+export function createAmount(fieldValue, precision, isGerman) {\n+  if (fieldValue) {\n+    const fieldValueAsNum = numeral(parseFloat(fieldValue));\n+    const numberFormat = getAmountFormatByPrecision(precision);\n+    const returnValue = numberFormat\n+      ? fieldValueAsNum.format(numberFormat)\n+      : fieldValueAsNum.format();\n+\n+    // For German natives we want to show numbers with comma as a value separator\n+    // https://github.com/metasfresh/me03/issues/1822\n+    if (isGerman && parseFloat(returnValue) != null) {\n+      const commaRegexp = /,/g;\n+      commaRegexp.test(returnValue);\n+      const lastIdx = commaRegexp.lastIndex;\n+\n+      if (lastIdx) {\n+        return returnValue;\n+      }\n+\n+      return `${returnValue}`.replace('.', ',');\n+    }\n+\n+    return returnValue;\n+  }\n+\n+  return '';\n+}\n+\n+/**\n+ * @method createSpecialField\n+ * @param {string}  fieldType\n+ * @param {string}  fieldValue\n+ * @summary For the special case of fieldType being of type 'Color' it will show a circle in the TableCell\n+ *          with the hex value given - fieldValue\n+ *          More details on : https://github.com/metasfresh/metasfresh-webui-frontend-legacy/issues/1603\n+ */\n+export function createSpecialField(fieldType, fieldValue) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33012efc68354443443e7f55b817cea62f16d015"}, "originalPosition": 126}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYwNjIzNA==", "bodyText": "Done", "url": "https://github.com/metasfresh/metasfresh/pull/6844#discussion_r440606234", "createdAt": "2020-06-16T06:07:50Z", "author": {"login": "petrican"}, "path": "frontend/src/utils/tableHelpers.js", "diffHunk": "@@ -91,6 +136,146 @@ export function getSizeClass(col) {\n   }\n }\n \n+/**\n+ * @method createDate\n+ * @param {object} containing the fieldValue, fieldType and the active locale\n+ * @summary creates a Date using Moment lib formatting it with the locale passed as param\n+ */\n+export function createDate({ fieldValue, fieldType, activeLocale }) {\n+  const languageKey = activeLocale ? activeLocale.key : null;\n+  if (fieldValue) {\n+    return !Moment.isMoment(fieldValue) && fieldValue.match(TIME_REGEX_TEST)\n+      ? Moment.utc(Moment.duration(fieldValue).asMilliseconds())\n+          .locale(languageKey)\n+          .format(TIME_FORMAT)\n+      : Moment(fieldValue)\n+          .locale(languageKey)\n+          .format(getDateFormat(fieldType));\n+  }\n+\n+  return '';\n+}\n+\n+/**\n+ * @method createAmount\n+ * @param {string} fieldValue\n+ * @param {string} precision\n+ * @param {boolean} isGerman\n+ * @summary creates an amount for a given value with the desired precision and it provides special formatting\n+ *          for the case when german language is set\n+ */\n+export function createAmount(fieldValue, precision, isGerman) {\n+  if (fieldValue) {\n+    const fieldValueAsNum = numeral(parseFloat(fieldValue));\n+    const numberFormat = getAmountFormatByPrecision(precision);\n+    const returnValue = numberFormat\n+      ? fieldValueAsNum.format(numberFormat)\n+      : fieldValueAsNum.format();\n+\n+    // For German natives we want to show numbers with comma as a value separator\n+    // https://github.com/metasfresh/me03/issues/1822\n+    if (isGerman && parseFloat(returnValue) != null) {\n+      const commaRegexp = /,/g;\n+      commaRegexp.test(returnValue);\n+      const lastIdx = commaRegexp.lastIndex;\n+\n+      if (lastIdx) {\n+        return returnValue;\n+      }\n+\n+      return `${returnValue}`.replace('.', ',');\n+    }\n+\n+    return returnValue;\n+  }\n+\n+  return '';\n+}\n+\n+/**\n+ * @method createSpecialField\n+ * @param {string}  fieldType\n+ * @param {string}  fieldValue\n+ * @summary For the special case of fieldType being of type 'Color' it will show a circle in the TableCell\n+ *          with the hex value given - fieldValue\n+ *          More details on : https://github.com/metasfresh/metasfresh-webui-frontend-legacy/issues/1603\n+ */\n+export function createSpecialField(fieldType, fieldValue) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA5NTgyOA=="}, "originalCommit": {"oid": "33012efc68354443443e7f55b817cea62f16d015"}, "originalPosition": 126}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTkxMjcwOnYy", "diffSide": "RIGHT", "path": "frontend/src/utils/tableHelpers.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMDo1OTo1NlrOGjtUmg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNjowNzo1NlrOGkMeNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA5NTg5OA==", "bodyText": "pls add unit test(s)", "url": "https://github.com/metasfresh/metasfresh/pull/6844#discussion_r440095898", "createdAt": "2020-06-15T10:59:56Z", "author": {"login": "teosarca"}, "path": "frontend/src/utils/tableHelpers.js", "diffHunk": "@@ -91,6 +136,146 @@ export function getSizeClass(col) {\n   }\n }\n \n+/**\n+ * @method createDate\n+ * @param {object} containing the fieldValue, fieldType and the active locale\n+ * @summary creates a Date using Moment lib formatting it with the locale passed as param\n+ */\n+export function createDate({ fieldValue, fieldType, activeLocale }) {\n+  const languageKey = activeLocale ? activeLocale.key : null;\n+  if (fieldValue) {\n+    return !Moment.isMoment(fieldValue) && fieldValue.match(TIME_REGEX_TEST)\n+      ? Moment.utc(Moment.duration(fieldValue).asMilliseconds())\n+          .locale(languageKey)\n+          .format(TIME_FORMAT)\n+      : Moment(fieldValue)\n+          .locale(languageKey)\n+          .format(getDateFormat(fieldType));\n+  }\n+\n+  return '';\n+}\n+\n+/**\n+ * @method createAmount\n+ * @param {string} fieldValue\n+ * @param {string} precision\n+ * @param {boolean} isGerman\n+ * @summary creates an amount for a given value with the desired precision and it provides special formatting\n+ *          for the case when german language is set\n+ */\n+export function createAmount(fieldValue, precision, isGerman) {\n+  if (fieldValue) {\n+    const fieldValueAsNum = numeral(parseFloat(fieldValue));\n+    const numberFormat = getAmountFormatByPrecision(precision);\n+    const returnValue = numberFormat\n+      ? fieldValueAsNum.format(numberFormat)\n+      : fieldValueAsNum.format();\n+\n+    // For German natives we want to show numbers with comma as a value separator\n+    // https://github.com/metasfresh/me03/issues/1822\n+    if (isGerman && parseFloat(returnValue) != null) {\n+      const commaRegexp = /,/g;\n+      commaRegexp.test(returnValue);\n+      const lastIdx = commaRegexp.lastIndex;\n+\n+      if (lastIdx) {\n+        return returnValue;\n+      }\n+\n+      return `${returnValue}`.replace('.', ',');\n+    }\n+\n+    return returnValue;\n+  }\n+\n+  return '';\n+}\n+\n+/**\n+ * @method createSpecialField\n+ * @param {string}  fieldType\n+ * @param {string}  fieldValue\n+ * @summary For the special case of fieldType being of type 'Color' it will show a circle in the TableCell\n+ *          with the hex value given - fieldValue\n+ *          More details on : https://github.com/metasfresh/metasfresh-webui-frontend-legacy/issues/1603\n+ */\n+export function createSpecialField(fieldType, fieldValue) {\n+  switch (fieldType) {\n+    case 'Color': {\n+      const style = {\n+        backgroundColor: fieldValue,\n+      };\n+      return <span className=\"widget-color-display\" style={style} />;\n+    }\n+    default:\n+      return fieldValue;\n+  }\n+}\n+\n+/**\n+ * @method fieldValueToString\n+ * @param {string} fieldValue\n+ * @param {string} fieldType\n+ * @param {string} precision\n+ * @param {boolean} isGerman\n+ * @param {string} activeLocale\n+ * @summary This is a patch function to mangle the desired output used at table level within TableCell, Filters components\n+ */\n+export function fieldValueToString({", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33012efc68354443443e7f55b817cea62f16d015"}, "originalPosition": 148}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDYwNjI2MQ==", "bodyText": "Done", "url": "https://github.com/metasfresh/metasfresh/pull/6844#discussion_r440606261", "createdAt": "2020-06-16T06:07:56Z", "author": {"login": "petrican"}, "path": "frontend/src/utils/tableHelpers.js", "diffHunk": "@@ -91,6 +136,146 @@ export function getSizeClass(col) {\n   }\n }\n \n+/**\n+ * @method createDate\n+ * @param {object} containing the fieldValue, fieldType and the active locale\n+ * @summary creates a Date using Moment lib formatting it with the locale passed as param\n+ */\n+export function createDate({ fieldValue, fieldType, activeLocale }) {\n+  const languageKey = activeLocale ? activeLocale.key : null;\n+  if (fieldValue) {\n+    return !Moment.isMoment(fieldValue) && fieldValue.match(TIME_REGEX_TEST)\n+      ? Moment.utc(Moment.duration(fieldValue).asMilliseconds())\n+          .locale(languageKey)\n+          .format(TIME_FORMAT)\n+      : Moment(fieldValue)\n+          .locale(languageKey)\n+          .format(getDateFormat(fieldType));\n+  }\n+\n+  return '';\n+}\n+\n+/**\n+ * @method createAmount\n+ * @param {string} fieldValue\n+ * @param {string} precision\n+ * @param {boolean} isGerman\n+ * @summary creates an amount for a given value with the desired precision and it provides special formatting\n+ *          for the case when german language is set\n+ */\n+export function createAmount(fieldValue, precision, isGerman) {\n+  if (fieldValue) {\n+    const fieldValueAsNum = numeral(parseFloat(fieldValue));\n+    const numberFormat = getAmountFormatByPrecision(precision);\n+    const returnValue = numberFormat\n+      ? fieldValueAsNum.format(numberFormat)\n+      : fieldValueAsNum.format();\n+\n+    // For German natives we want to show numbers with comma as a value separator\n+    // https://github.com/metasfresh/me03/issues/1822\n+    if (isGerman && parseFloat(returnValue) != null) {\n+      const commaRegexp = /,/g;\n+      commaRegexp.test(returnValue);\n+      const lastIdx = commaRegexp.lastIndex;\n+\n+      if (lastIdx) {\n+        return returnValue;\n+      }\n+\n+      return `${returnValue}`.replace('.', ',');\n+    }\n+\n+    return returnValue;\n+  }\n+\n+  return '';\n+}\n+\n+/**\n+ * @method createSpecialField\n+ * @param {string}  fieldType\n+ * @param {string}  fieldValue\n+ * @summary For the special case of fieldType being of type 'Color' it will show a circle in the TableCell\n+ *          with the hex value given - fieldValue\n+ *          More details on : https://github.com/metasfresh/metasfresh-webui-frontend-legacy/issues/1603\n+ */\n+export function createSpecialField(fieldType, fieldValue) {\n+  switch (fieldType) {\n+    case 'Color': {\n+      const style = {\n+        backgroundColor: fieldValue,\n+      };\n+      return <span className=\"widget-color-display\" style={style} />;\n+    }\n+    default:\n+      return fieldValue;\n+  }\n+}\n+\n+/**\n+ * @method fieldValueToString\n+ * @param {string} fieldValue\n+ * @param {string} fieldType\n+ * @param {string} precision\n+ * @param {boolean} isGerman\n+ * @param {string} activeLocale\n+ * @summary This is a patch function to mangle the desired output used at table level within TableCell, Filters components\n+ */\n+export function fieldValueToString({", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA5NTg5OA=="}, "originalCommit": {"oid": "33012efc68354443443e7f55b817cea62f16d015"}, "originalPosition": 148}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTkyMDY4OnYy", "diffSide": "RIGHT", "path": "frontend/src/components/table/TableCell.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMTowMjoyMlrOGjtZQw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMzowMjo1MFrOGjxLng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA5NzA5MQ==", "bodyText": "pls, move this line near the place where it is first used.\nAlso, not sure if it would bring any benefit, but this value can be calculated once on construction time instead of each time on render().", "url": "https://github.com/metasfresh/metasfresh/pull/6844#discussion_r440097091", "createdAt": "2020-06-15T11:02:22Z", "author": {"login": "teosarca"}, "path": "frontend/src/components/table/TableCell.js", "diffHunk": "@@ -259,35 +219,16 @@ class TableCell extends PureComponent {\n       viewId,\n       modalVisible,\n       onClickOutside,\n-      isGerman,\n     } = this.props;\n     const widgetData = getWidgetData(item, isEditable, supportFieldEdit);\n-\n     const docId = `${this.props.docId}`;\n     const { tooltipToggled } = this.state;\n-    const tdValue = !isEdited\n-      ? TableCell.fieldValueToString(\n-          widgetData[0].value,\n-          item.widgetType,\n-          widgetData[0].precision,\n-          isGerman\n-        )\n-      : null;\n-    const description =\n-      widgetData[0].value && widgetData[0].value.description\n-        ? widgetData[0].value.description\n-        : tdValue;\n-    let tdTitle =\n-      item.widgetType === 'YesNo' ||\n-      item.widgetType === 'Switch' ||\n-      item.widgetType === 'Color'\n-        ? ''\n-        : description;\n+    const tdValue = this.getTdValue(widgetData);\n+    const description = this.getDescription({ widgetData, tdValue });\n+    let tdTitle = this.getTdTitle({ item, description });\n     const isOpenDatePicker = isEdited && item.widgetType === 'Date';\n-    const isDateField = DATE_FIELD_FORMATS[item.widgetType]\n-      ? TableCell.getDateFormat(item.widgetType)\n-      : false;\n-    let style = {};\n+    const isDateField = this.checkIfDateField({ item });", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33012efc68354443443e7f55b817cea62f16d015"}, "originalPosition": 379}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDE1OTEzNA==", "bodyText": "As discussed. Props change", "url": "https://github.com/metasfresh/metasfresh/pull/6844#discussion_r440159134", "createdAt": "2020-06-15T13:02:50Z", "author": {"login": "petrican"}, "path": "frontend/src/components/table/TableCell.js", "diffHunk": "@@ -259,35 +219,16 @@ class TableCell extends PureComponent {\n       viewId,\n       modalVisible,\n       onClickOutside,\n-      isGerman,\n     } = this.props;\n     const widgetData = getWidgetData(item, isEditable, supportFieldEdit);\n-\n     const docId = `${this.props.docId}`;\n     const { tooltipToggled } = this.state;\n-    const tdValue = !isEdited\n-      ? TableCell.fieldValueToString(\n-          widgetData[0].value,\n-          item.widgetType,\n-          widgetData[0].precision,\n-          isGerman\n-        )\n-      : null;\n-    const description =\n-      widgetData[0].value && widgetData[0].value.description\n-        ? widgetData[0].value.description\n-        : tdValue;\n-    let tdTitle =\n-      item.widgetType === 'YesNo' ||\n-      item.widgetType === 'Switch' ||\n-      item.widgetType === 'Color'\n-        ? ''\n-        : description;\n+    const tdValue = this.getTdValue(widgetData);\n+    const description = this.getDescription({ widgetData, tdValue });\n+    let tdTitle = this.getTdTitle({ item, description });\n     const isOpenDatePicker = isEdited && item.widgetType === 'Date';\n-    const isDateField = DATE_FIELD_FORMATS[item.widgetType]\n-      ? TableCell.getDateFormat(item.widgetType)\n-      : false;\n-    let style = {};\n+    const isDateField = this.checkIfDateField({ item });", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA5NzA5MQ=="}, "originalCommit": {"oid": "33012efc68354443443e7f55b817cea62f16d015"}, "originalPosition": 379}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTkzMTI1OnYy", "diffSide": "RIGHT", "path": "frontend/src/components/table/TableCell.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMTowNjowMVrOGjtf6A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMTowNjowMVrOGjtf6A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDA5ODc5Mg==", "bodyText": "pls document what value is", "url": "https://github.com/metasfresh/metasfresh/pull/6844#discussion_r440098792", "createdAt": "2020-06-15T11:06:01Z", "author": {"login": "teosarca"}, "path": "frontend/src/components/table/TableCell.js", "diffHunk": "@@ -1,184 +1,51 @@\n-import Moment from 'moment-timezone';\n import PropTypes from 'prop-types';\n-import numeral from 'numeral';\n import React, { PureComponent, createRef } from 'react';\n import classnames from 'classnames';\n-\n import MasterWidget from '../widget/MasterWidget';\n-import {\n-  AMOUNT_FIELD_TYPES,\n-  AMOUNT_FIELD_FORMATS_BY_PRECISION,\n-  SPECIAL_FIELD_TYPES,\n-  DATE_FIELD_TYPES,\n-  TIME_FIELD_TYPES,\n-  DATE_FIELD_FORMATS,\n-  TIME_REGEX_TEST,\n-  TIME_FORMAT,\n-} from '../../constants/Constants';\n+import { getDateFormat, fieldValueToString } from '../../utils/tableHelpers';\n+import { DATE_FIELD_FORMATS } from '../../constants/Constants';\n import WidgetTooltip from '../widget/WidgetTooltip';\n-\n class TableCell extends PureComponent {\n-  static getAmountFormatByPrecision = (precision) =>\n-    precision &&\n-    precision >= 0 &&\n-    precision < AMOUNT_FIELD_FORMATS_BY_PRECISION.length\n-      ? AMOUNT_FIELD_FORMATS_BY_PRECISION[precision]\n-      : null;\n-\n-  static getDateFormat = (fieldType) => DATE_FIELD_FORMATS[fieldType];\n-\n-  static createDate = (fieldValue, fieldType) => {\n-    if (fieldValue) {\n-      return !Moment.isMoment(fieldValue) && fieldValue.match(TIME_REGEX_TEST)\n-        ? Moment.utc(Moment.duration(fieldValue).asMilliseconds()).format(\n-            TIME_FORMAT\n-          )\n-        : Moment(fieldValue).format(TableCell.getDateFormat(fieldType));\n-    }\n-\n-    return '';\n-  };\n-\n-  static createAmount = (fieldValue, precision, isGerman) => {\n-    if (fieldValue) {\n-      const fieldValueAsNum = numeral(parseFloat(fieldValue));\n-      const numberFormat = TableCell.getAmountFormatByPrecision(precision);\n-      const returnValue = numberFormat\n-        ? fieldValueAsNum.format(numberFormat)\n-        : fieldValueAsNum.format();\n-\n-      // For German natives we want to show numbers with comma as a value separator\n-      // https://github.com/metasfresh/me03/issues/1822\n-      if (isGerman && parseFloat(returnValue) != null) {\n-        const commaRegexp = /,/g;\n-        commaRegexp.test(returnValue);\n-        const lastIdx = commaRegexp.lastIndex;\n-\n-        if (lastIdx) {\n-          return returnValue;\n-        }\n-\n-        return `${returnValue}`.replace('.', ',');\n-      }\n-\n-      return returnValue;\n-    }\n-\n-    return '';\n-  };\n-\n-  static createSpecialField = (fieldType, fieldValue) => {\n-    switch (fieldType) {\n-      case 'Color': {\n-        const style = {\n-          backgroundColor: fieldValue,\n-        };\n-        return <span className=\"widget-color-display\" style={style} />;\n-      }\n-      default:\n-        return fieldValue;\n-    }\n-  };\n-\n-  // @TODO: THIS NEEDS URGENT REFACTORING, WHY THE HECK ARE WE RETURNING\n-  // SIX DIFFERENT TYPES OF VALUES HERE ? UBER-BAD DESIGN !\n-  static fieldValueToString = (\n-    fieldValue,\n-    fieldType = 'Text',\n-    precision = null,\n-    isGerman\n-  ) => {\n-    if (fieldValue === null) {\n-      return '';\n-    }\n-\n-    switch (typeof fieldValue) {\n-      case 'object': {\n-        if (Array.isArray(fieldValue)) {\n-          return fieldValue\n-            .map((value) => TableCell.fieldValueToString(value, fieldType))\n-            .join(' - ');\n-        }\n-\n-        return DATE_FIELD_TYPES.includes(fieldType) ||\n-          TIME_FIELD_TYPES.includes(fieldType)\n-          ? TableCell.createDate(fieldValue, fieldType)\n-          : fieldValue.caption;\n-      }\n-      case 'boolean': {\n-        return fieldValue ? (\n-          <i className=\"meta-icon-checkbox-1\" />\n-        ) : (\n-          <i className=\"meta-icon-checkbox\" />\n-        );\n-      }\n-      case 'string': {\n-        if (\n-          DATE_FIELD_TYPES.includes(fieldType) ||\n-          TIME_FIELD_TYPES.includes(fieldType)\n-        ) {\n-          return TableCell.createDate(fieldValue, fieldType);\n-        } else if (AMOUNT_FIELD_TYPES.includes(fieldType)) {\n-          return TableCell.createAmount(fieldValue, precision, isGerman);\n-        } else if (SPECIAL_FIELD_TYPES.includes(fieldType)) {\n-          return TableCell.createSpecialField(fieldType, fieldValue);\n-        }\n-        return fieldValue;\n-      }\n-      default: {\n-        return fieldValue;\n-      }\n-    }\n-  };\n-\n   constructor(props) {\n     super(props);\n-\n     this.widget = createRef();\n-\n     this.clearWidgetValue = false;\n \n     this.state = {\n-      tooltipToggled: false,\n+      tooltipToggled: false, // keeping in the local state the flag for the tooltip\n     };\n   }\n \n-  UNSAFE_componentWillReceiveProps(nextProps) {\n-    const { updateRow, readonly, rowId, tdValue } = this.props;\n-    const { tdValue: nextTdValue } = nextProps;\n-    // We should avoid highlighting when whole row is exchanged (sorting)\n-    if (rowId !== nextProps.rowId) {\n-      return;\n-    }\n-\n-    if (!readonly && tdValue !== nextTdValue) {\n-      updateRow();\n-    }\n-  }\n-\n-  widgetTooltipToggle = (field, value) => {\n+  /**\n+   * @method widgetTooltipToggle\n+   * @summary Alternative method to open dropdown, in case of disabled opening on focus.\n+   * @param {string|null} value", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33012efc68354443443e7f55b817cea62f16d015"}, "originalPosition": 166}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MTk0NDc5OnYy", "diffSide": "RIGHT", "path": "frontend/src/components/table/TableCell.js", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMToxMDoyN1rOGjtoWQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNDozOToyNFrOGkK-fg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEwMDk1Mw==", "bodyText": "I think this was == null because it's a falsy value check, and not a strict comparison. So worth checking what clearValue can be called with to be sure it's ok to make this change.", "url": "https://github.com/metasfresh/metasfresh/pull/6844#discussion_r440100953", "createdAt": "2020-06-15T11:10:27Z", "author": {"login": "siemiatj"}, "path": "frontend/src/components/table/TableCell.js", "diffHunk": "@@ -224,15 +104,95 @@ class TableCell extends PureComponent {\n     } = this.props;\n     const widgetData = getWidgetData(item, isEditable, supportFieldEdit);\n \n-    if (isEditable) {\n-      handleDoubleClick(e, property, true, widgetData[0]);\n-    }\n+    isEditable && handleDoubleClick(e, property, true, widgetData[0]);\n   };\n \n+  /**\n+   * @method clearValue\n+   * @summary Set `clearWidgetValue` value based on a given `reset` param\n+   * {string|null} reset\n+   */\n   clearValue = (reset) => {\n-    this.clearWidgetValue = reset == null ? true : false;\n+    this.clearWidgetValue = reset === null ? true : false;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33012efc68354443443e7f55b817cea62f16d015"}, "originalPosition": 260}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEzNzUwOA==", "bodyText": "Reverting as you are right. When is undefined  it this.clearWidgetValue will be true. I've checked the calls in the TableItem", "url": "https://github.com/metasfresh/metasfresh/pull/6844#discussion_r440137508", "createdAt": "2020-06-15T12:24:07Z", "author": {"login": "petrican"}, "path": "frontend/src/components/table/TableCell.js", "diffHunk": "@@ -224,15 +104,95 @@ class TableCell extends PureComponent {\n     } = this.props;\n     const widgetData = getWidgetData(item, isEditable, supportFieldEdit);\n \n-    if (isEditable) {\n-      handleDoubleClick(e, property, true, widgetData[0]);\n-    }\n+    isEditable && handleDoubleClick(e, property, true, widgetData[0]);\n   };\n \n+  /**\n+   * @method clearValue\n+   * @summary Set `clearWidgetValue` value based on a given `reset` param\n+   * {string|null} reset\n+   */\n   clearValue = (reset) => {\n-    this.clearWidgetValue = reset == null ? true : false;\n+    this.clearWidgetValue = reset === null ? true : false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEwMDk1Mw=="}, "originalCommit": {"oid": "33012efc68354443443e7f55b817cea62f16d015"}, "originalPosition": 260}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI0NzIwMQ==", "bodyText": "@petrican  why not documenting this inside clearValue function because it seems it wasn't obvious.\nAlso I think it would make sense to document the reset parameter.", "url": "https://github.com/metasfresh/metasfresh/pull/6844#discussion_r440247201", "createdAt": "2020-06-15T15:10:41Z", "author": {"login": "teosarca"}, "path": "frontend/src/components/table/TableCell.js", "diffHunk": "@@ -224,15 +104,95 @@ class TableCell extends PureComponent {\n     } = this.props;\n     const widgetData = getWidgetData(item, isEditable, supportFieldEdit);\n \n-    if (isEditable) {\n-      handleDoubleClick(e, property, true, widgetData[0]);\n-    }\n+    isEditable && handleDoubleClick(e, property, true, widgetData[0]);\n   };\n \n+  /**\n+   * @method clearValue\n+   * @summary Set `clearWidgetValue` value based on a given `reset` param\n+   * {string|null} reset\n+   */\n   clearValue = (reset) => {\n-    this.clearWidgetValue = reset == null ? true : false;\n+    this.clearWidgetValue = reset === null ? true : false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEwMDk1Mw=="}, "originalCommit": {"oid": "33012efc68354443443e7f55b817cea62f16d015"}, "originalPosition": 260}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU4MTc1OA==", "bodyText": "Done.", "url": "https://github.com/metasfresh/metasfresh/pull/6844#discussion_r440581758", "createdAt": "2020-06-16T04:39:24Z", "author": {"login": "petrican"}, "path": "frontend/src/components/table/TableCell.js", "diffHunk": "@@ -224,15 +104,95 @@ class TableCell extends PureComponent {\n     } = this.props;\n     const widgetData = getWidgetData(item, isEditable, supportFieldEdit);\n \n-    if (isEditable) {\n-      handleDoubleClick(e, property, true, widgetData[0]);\n-    }\n+    isEditable && handleDoubleClick(e, property, true, widgetData[0]);\n   };\n \n+  /**\n+   * @method clearValue\n+   * @summary Set `clearWidgetValue` value based on a given `reset` param\n+   * {string|null} reset\n+   */\n   clearValue = (reset) => {\n-    this.clearWidgetValue = reset == null ? true : false;\n+    this.clearWidgetValue = reset === null ? true : false;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDEwMDk1Mw=="}, "originalCommit": {"oid": "33012efc68354443443e7f55b817cea62f16d015"}, "originalPosition": 260}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc0MjAxMjE4OnYy", "diffSide": "RIGHT", "path": "frontend/src/components/table/TableCell.js", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNVQxMTozMjo1OFrOGjuScw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xNlQwNDoxOTowM1rOGkKrrw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExMTczMQ==", "bodyText": "is there a type event ?", "url": "https://github.com/metasfresh/metasfresh/pull/6844#discussion_r440111731", "createdAt": "2020-06-15T11:32:58Z", "author": {"login": "siemiatj"}, "path": "frontend/src/components/table/TableCell.js", "diffHunk": "@@ -1,184 +1,51 @@\n-import Moment from 'moment-timezone';\n import PropTypes from 'prop-types';\n-import numeral from 'numeral';\n import React, { PureComponent, createRef } from 'react';\n import classnames from 'classnames';\n-\n import MasterWidget from '../widget/MasterWidget';\n-import {\n-  AMOUNT_FIELD_TYPES,\n-  AMOUNT_FIELD_FORMATS_BY_PRECISION,\n-  SPECIAL_FIELD_TYPES,\n-  DATE_FIELD_TYPES,\n-  TIME_FIELD_TYPES,\n-  DATE_FIELD_FORMATS,\n-  TIME_REGEX_TEST,\n-  TIME_FORMAT,\n-} from '../../constants/Constants';\n+import { getDateFormat, fieldValueToString } from '../../utils/tableHelpers';\n+import { DATE_FIELD_FORMATS } from '../../constants/Constants';\n import WidgetTooltip from '../widget/WidgetTooltip';\n-\n class TableCell extends PureComponent {\n-  static getAmountFormatByPrecision = (precision) =>\n-    precision &&\n-    precision >= 0 &&\n-    precision < AMOUNT_FIELD_FORMATS_BY_PRECISION.length\n-      ? AMOUNT_FIELD_FORMATS_BY_PRECISION[precision]\n-      : null;\n-\n-  static getDateFormat = (fieldType) => DATE_FIELD_FORMATS[fieldType];\n-\n-  static createDate = (fieldValue, fieldType) => {\n-    if (fieldValue) {\n-      return !Moment.isMoment(fieldValue) && fieldValue.match(TIME_REGEX_TEST)\n-        ? Moment.utc(Moment.duration(fieldValue).asMilliseconds()).format(\n-            TIME_FORMAT\n-          )\n-        : Moment(fieldValue).format(TableCell.getDateFormat(fieldType));\n-    }\n-\n-    return '';\n-  };\n-\n-  static createAmount = (fieldValue, precision, isGerman) => {\n-    if (fieldValue) {\n-      const fieldValueAsNum = numeral(parseFloat(fieldValue));\n-      const numberFormat = TableCell.getAmountFormatByPrecision(precision);\n-      const returnValue = numberFormat\n-        ? fieldValueAsNum.format(numberFormat)\n-        : fieldValueAsNum.format();\n-\n-      // For German natives we want to show numbers with comma as a value separator\n-      // https://github.com/metasfresh/me03/issues/1822\n-      if (isGerman && parseFloat(returnValue) != null) {\n-        const commaRegexp = /,/g;\n-        commaRegexp.test(returnValue);\n-        const lastIdx = commaRegexp.lastIndex;\n-\n-        if (lastIdx) {\n-          return returnValue;\n-        }\n-\n-        return `${returnValue}`.replace('.', ',');\n-      }\n-\n-      return returnValue;\n-    }\n-\n-    return '';\n-  };\n-\n-  static createSpecialField = (fieldType, fieldValue) => {\n-    switch (fieldType) {\n-      case 'Color': {\n-        const style = {\n-          backgroundColor: fieldValue,\n-        };\n-        return <span className=\"widget-color-display\" style={style} />;\n-      }\n-      default:\n-        return fieldValue;\n-    }\n-  };\n-\n-  // @TODO: THIS NEEDS URGENT REFACTORING, WHY THE HECK ARE WE RETURNING\n-  // SIX DIFFERENT TYPES OF VALUES HERE ? UBER-BAD DESIGN !\n-  static fieldValueToString = (\n-    fieldValue,\n-    fieldType = 'Text',\n-    precision = null,\n-    isGerman\n-  ) => {\n-    if (fieldValue === null) {\n-      return '';\n-    }\n-\n-    switch (typeof fieldValue) {\n-      case 'object': {\n-        if (Array.isArray(fieldValue)) {\n-          return fieldValue\n-            .map((value) => TableCell.fieldValueToString(value, fieldType))\n-            .join(' - ');\n-        }\n-\n-        return DATE_FIELD_TYPES.includes(fieldType) ||\n-          TIME_FIELD_TYPES.includes(fieldType)\n-          ? TableCell.createDate(fieldValue, fieldType)\n-          : fieldValue.caption;\n-      }\n-      case 'boolean': {\n-        return fieldValue ? (\n-          <i className=\"meta-icon-checkbox-1\" />\n-        ) : (\n-          <i className=\"meta-icon-checkbox\" />\n-        );\n-      }\n-      case 'string': {\n-        if (\n-          DATE_FIELD_TYPES.includes(fieldType) ||\n-          TIME_FIELD_TYPES.includes(fieldType)\n-        ) {\n-          return TableCell.createDate(fieldValue, fieldType);\n-        } else if (AMOUNT_FIELD_TYPES.includes(fieldType)) {\n-          return TableCell.createAmount(fieldValue, precision, isGerman);\n-        } else if (SPECIAL_FIELD_TYPES.includes(fieldType)) {\n-          return TableCell.createSpecialField(fieldType, fieldValue);\n-        }\n-        return fieldValue;\n-      }\n-      default: {\n-        return fieldValue;\n-      }\n-    }\n-  };\n-\n   constructor(props) {\n     super(props);\n-\n     this.widget = createRef();\n-\n     this.clearWidgetValue = false;\n \n     this.state = {\n-      tooltipToggled: false,\n+      tooltipToggled: false, // keeping in the local state the flag for the tooltip\n     };\n   }\n \n-  UNSAFE_componentWillReceiveProps(nextProps) {\n-    const { updateRow, readonly, rowId, tdValue } = this.props;\n-    const { tdValue: nextTdValue } = nextProps;\n-    // We should avoid highlighting when whole row is exchanged (sorting)\n-    if (rowId !== nextProps.rowId) {\n-      return;\n-    }\n-\n-    if (!readonly && tdValue !== nextTdValue) {\n-      updateRow();\n-    }\n-  }\n-\n-  widgetTooltipToggle = (field, value) => {\n+  /**\n+   * @method widgetTooltipToggle\n+   * @summary Alternative method to open dropdown, in case of disabled opening on focus.\n+   * @param {string|null} value\n+   */\n+  widgetTooltipToggle = (value) => {\n     const curVal = this.state.tooltipToggled;\n     const newVal = value != null ? value : !curVal;\n \n-    this.setState({\n-      tooltipToggled: newVal,\n-    });\n+    this.setState({ tooltipToggled: newVal });\n   };\n \n+  /**\n+   * @method handleBackdropLock\n+   * @summary checks widget against widget list and calls parent onClickOutside fnct\n+   * @param {object} state\n+   */\n   handleBackdropLock = (state) => {\n     const { item } = this.props;\n-\n-    if (\n-      !['ProductAttributes', 'Attributes', 'List', 'Lookup'].includes(\n-        item.widgetType\n-      )\n-    ) {\n-      if (!state) {\n-        this.props.onClickOutside();\n-      }\n+    const widgetsList = ['ProductAttributes', 'Attributes', 'List', 'Lookup'];\n+    if (!widgetsList.includes(item.widgetType)) {\n+      !state && this.props.onClickOutside();\n     }\n   };\n \n+  /**\n+   * @method handleKeyDown\n+   * @summary Key down function handler\n+   * @param {object} e", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33012efc68354443443e7f55b817cea62f16d015"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExNzgyMQ==", "bodyText": "this is the corresponding event from a text input for example when you change a value within a table cell by typing something in that specific cell.", "url": "https://github.com/metasfresh/metasfresh/pull/6844#discussion_r440117821", "createdAt": "2020-06-15T11:45:56Z", "author": {"login": "petrican"}, "path": "frontend/src/components/table/TableCell.js", "diffHunk": "@@ -1,184 +1,51 @@\n-import Moment from 'moment-timezone';\n import PropTypes from 'prop-types';\n-import numeral from 'numeral';\n import React, { PureComponent, createRef } from 'react';\n import classnames from 'classnames';\n-\n import MasterWidget from '../widget/MasterWidget';\n-import {\n-  AMOUNT_FIELD_TYPES,\n-  AMOUNT_FIELD_FORMATS_BY_PRECISION,\n-  SPECIAL_FIELD_TYPES,\n-  DATE_FIELD_TYPES,\n-  TIME_FIELD_TYPES,\n-  DATE_FIELD_FORMATS,\n-  TIME_REGEX_TEST,\n-  TIME_FORMAT,\n-} from '../../constants/Constants';\n+import { getDateFormat, fieldValueToString } from '../../utils/tableHelpers';\n+import { DATE_FIELD_FORMATS } from '../../constants/Constants';\n import WidgetTooltip from '../widget/WidgetTooltip';\n-\n class TableCell extends PureComponent {\n-  static getAmountFormatByPrecision = (precision) =>\n-    precision &&\n-    precision >= 0 &&\n-    precision < AMOUNT_FIELD_FORMATS_BY_PRECISION.length\n-      ? AMOUNT_FIELD_FORMATS_BY_PRECISION[precision]\n-      : null;\n-\n-  static getDateFormat = (fieldType) => DATE_FIELD_FORMATS[fieldType];\n-\n-  static createDate = (fieldValue, fieldType) => {\n-    if (fieldValue) {\n-      return !Moment.isMoment(fieldValue) && fieldValue.match(TIME_REGEX_TEST)\n-        ? Moment.utc(Moment.duration(fieldValue).asMilliseconds()).format(\n-            TIME_FORMAT\n-          )\n-        : Moment(fieldValue).format(TableCell.getDateFormat(fieldType));\n-    }\n-\n-    return '';\n-  };\n-\n-  static createAmount = (fieldValue, precision, isGerman) => {\n-    if (fieldValue) {\n-      const fieldValueAsNum = numeral(parseFloat(fieldValue));\n-      const numberFormat = TableCell.getAmountFormatByPrecision(precision);\n-      const returnValue = numberFormat\n-        ? fieldValueAsNum.format(numberFormat)\n-        : fieldValueAsNum.format();\n-\n-      // For German natives we want to show numbers with comma as a value separator\n-      // https://github.com/metasfresh/me03/issues/1822\n-      if (isGerman && parseFloat(returnValue) != null) {\n-        const commaRegexp = /,/g;\n-        commaRegexp.test(returnValue);\n-        const lastIdx = commaRegexp.lastIndex;\n-\n-        if (lastIdx) {\n-          return returnValue;\n-        }\n-\n-        return `${returnValue}`.replace('.', ',');\n-      }\n-\n-      return returnValue;\n-    }\n-\n-    return '';\n-  };\n-\n-  static createSpecialField = (fieldType, fieldValue) => {\n-    switch (fieldType) {\n-      case 'Color': {\n-        const style = {\n-          backgroundColor: fieldValue,\n-        };\n-        return <span className=\"widget-color-display\" style={style} />;\n-      }\n-      default:\n-        return fieldValue;\n-    }\n-  };\n-\n-  // @TODO: THIS NEEDS URGENT REFACTORING, WHY THE HECK ARE WE RETURNING\n-  // SIX DIFFERENT TYPES OF VALUES HERE ? UBER-BAD DESIGN !\n-  static fieldValueToString = (\n-    fieldValue,\n-    fieldType = 'Text',\n-    precision = null,\n-    isGerman\n-  ) => {\n-    if (fieldValue === null) {\n-      return '';\n-    }\n-\n-    switch (typeof fieldValue) {\n-      case 'object': {\n-        if (Array.isArray(fieldValue)) {\n-          return fieldValue\n-            .map((value) => TableCell.fieldValueToString(value, fieldType))\n-            .join(' - ');\n-        }\n-\n-        return DATE_FIELD_TYPES.includes(fieldType) ||\n-          TIME_FIELD_TYPES.includes(fieldType)\n-          ? TableCell.createDate(fieldValue, fieldType)\n-          : fieldValue.caption;\n-      }\n-      case 'boolean': {\n-        return fieldValue ? (\n-          <i className=\"meta-icon-checkbox-1\" />\n-        ) : (\n-          <i className=\"meta-icon-checkbox\" />\n-        );\n-      }\n-      case 'string': {\n-        if (\n-          DATE_FIELD_TYPES.includes(fieldType) ||\n-          TIME_FIELD_TYPES.includes(fieldType)\n-        ) {\n-          return TableCell.createDate(fieldValue, fieldType);\n-        } else if (AMOUNT_FIELD_TYPES.includes(fieldType)) {\n-          return TableCell.createAmount(fieldValue, precision, isGerman);\n-        } else if (SPECIAL_FIELD_TYPES.includes(fieldType)) {\n-          return TableCell.createSpecialField(fieldType, fieldValue);\n-        }\n-        return fieldValue;\n-      }\n-      default: {\n-        return fieldValue;\n-      }\n-    }\n-  };\n-\n   constructor(props) {\n     super(props);\n-\n     this.widget = createRef();\n-\n     this.clearWidgetValue = false;\n \n     this.state = {\n-      tooltipToggled: false,\n+      tooltipToggled: false, // keeping in the local state the flag for the tooltip\n     };\n   }\n \n-  UNSAFE_componentWillReceiveProps(nextProps) {\n-    const { updateRow, readonly, rowId, tdValue } = this.props;\n-    const { tdValue: nextTdValue } = nextProps;\n-    // We should avoid highlighting when whole row is exchanged (sorting)\n-    if (rowId !== nextProps.rowId) {\n-      return;\n-    }\n-\n-    if (!readonly && tdValue !== nextTdValue) {\n-      updateRow();\n-    }\n-  }\n-\n-  widgetTooltipToggle = (field, value) => {\n+  /**\n+   * @method widgetTooltipToggle\n+   * @summary Alternative method to open dropdown, in case of disabled opening on focus.\n+   * @param {string|null} value\n+   */\n+  widgetTooltipToggle = (value) => {\n     const curVal = this.state.tooltipToggled;\n     const newVal = value != null ? value : !curVal;\n \n-    this.setState({\n-      tooltipToggled: newVal,\n-    });\n+    this.setState({ tooltipToggled: newVal });\n   };\n \n+  /**\n+   * @method handleBackdropLock\n+   * @summary checks widget against widget list and calls parent onClickOutside fnct\n+   * @param {object} state\n+   */\n   handleBackdropLock = (state) => {\n     const { item } = this.props;\n-\n-    if (\n-      !['ProductAttributes', 'Attributes', 'List', 'Lookup'].includes(\n-        item.widgetType\n-      )\n-    ) {\n-      if (!state) {\n-        this.props.onClickOutside();\n-      }\n+    const widgetsList = ['ProductAttributes', 'Attributes', 'List', 'Lookup'];\n+    if (!widgetsList.includes(item.widgetType)) {\n+      !state && this.props.onClickOutside();\n     }\n   };\n \n+  /**\n+   * @method handleKeyDown\n+   * @summary Key down function handler\n+   * @param {object} e", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExMTczMQ=="}, "originalCommit": {"oid": "33012efc68354443443e7f55b817cea62f16d015"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDI0ODQ3MA==", "bodyText": "@petrican  why not writing this info as @param e documentation?", "url": "https://github.com/metasfresh/metasfresh/pull/6844#discussion_r440248470", "createdAt": "2020-06-15T15:12:23Z", "author": {"login": "teosarca"}, "path": "frontend/src/components/table/TableCell.js", "diffHunk": "@@ -1,184 +1,51 @@\n-import Moment from 'moment-timezone';\n import PropTypes from 'prop-types';\n-import numeral from 'numeral';\n import React, { PureComponent, createRef } from 'react';\n import classnames from 'classnames';\n-\n import MasterWidget from '../widget/MasterWidget';\n-import {\n-  AMOUNT_FIELD_TYPES,\n-  AMOUNT_FIELD_FORMATS_BY_PRECISION,\n-  SPECIAL_FIELD_TYPES,\n-  DATE_FIELD_TYPES,\n-  TIME_FIELD_TYPES,\n-  DATE_FIELD_FORMATS,\n-  TIME_REGEX_TEST,\n-  TIME_FORMAT,\n-} from '../../constants/Constants';\n+import { getDateFormat, fieldValueToString } from '../../utils/tableHelpers';\n+import { DATE_FIELD_FORMATS } from '../../constants/Constants';\n import WidgetTooltip from '../widget/WidgetTooltip';\n-\n class TableCell extends PureComponent {\n-  static getAmountFormatByPrecision = (precision) =>\n-    precision &&\n-    precision >= 0 &&\n-    precision < AMOUNT_FIELD_FORMATS_BY_PRECISION.length\n-      ? AMOUNT_FIELD_FORMATS_BY_PRECISION[precision]\n-      : null;\n-\n-  static getDateFormat = (fieldType) => DATE_FIELD_FORMATS[fieldType];\n-\n-  static createDate = (fieldValue, fieldType) => {\n-    if (fieldValue) {\n-      return !Moment.isMoment(fieldValue) && fieldValue.match(TIME_REGEX_TEST)\n-        ? Moment.utc(Moment.duration(fieldValue).asMilliseconds()).format(\n-            TIME_FORMAT\n-          )\n-        : Moment(fieldValue).format(TableCell.getDateFormat(fieldType));\n-    }\n-\n-    return '';\n-  };\n-\n-  static createAmount = (fieldValue, precision, isGerman) => {\n-    if (fieldValue) {\n-      const fieldValueAsNum = numeral(parseFloat(fieldValue));\n-      const numberFormat = TableCell.getAmountFormatByPrecision(precision);\n-      const returnValue = numberFormat\n-        ? fieldValueAsNum.format(numberFormat)\n-        : fieldValueAsNum.format();\n-\n-      // For German natives we want to show numbers with comma as a value separator\n-      // https://github.com/metasfresh/me03/issues/1822\n-      if (isGerman && parseFloat(returnValue) != null) {\n-        const commaRegexp = /,/g;\n-        commaRegexp.test(returnValue);\n-        const lastIdx = commaRegexp.lastIndex;\n-\n-        if (lastIdx) {\n-          return returnValue;\n-        }\n-\n-        return `${returnValue}`.replace('.', ',');\n-      }\n-\n-      return returnValue;\n-    }\n-\n-    return '';\n-  };\n-\n-  static createSpecialField = (fieldType, fieldValue) => {\n-    switch (fieldType) {\n-      case 'Color': {\n-        const style = {\n-          backgroundColor: fieldValue,\n-        };\n-        return <span className=\"widget-color-display\" style={style} />;\n-      }\n-      default:\n-        return fieldValue;\n-    }\n-  };\n-\n-  // @TODO: THIS NEEDS URGENT REFACTORING, WHY THE HECK ARE WE RETURNING\n-  // SIX DIFFERENT TYPES OF VALUES HERE ? UBER-BAD DESIGN !\n-  static fieldValueToString = (\n-    fieldValue,\n-    fieldType = 'Text',\n-    precision = null,\n-    isGerman\n-  ) => {\n-    if (fieldValue === null) {\n-      return '';\n-    }\n-\n-    switch (typeof fieldValue) {\n-      case 'object': {\n-        if (Array.isArray(fieldValue)) {\n-          return fieldValue\n-            .map((value) => TableCell.fieldValueToString(value, fieldType))\n-            .join(' - ');\n-        }\n-\n-        return DATE_FIELD_TYPES.includes(fieldType) ||\n-          TIME_FIELD_TYPES.includes(fieldType)\n-          ? TableCell.createDate(fieldValue, fieldType)\n-          : fieldValue.caption;\n-      }\n-      case 'boolean': {\n-        return fieldValue ? (\n-          <i className=\"meta-icon-checkbox-1\" />\n-        ) : (\n-          <i className=\"meta-icon-checkbox\" />\n-        );\n-      }\n-      case 'string': {\n-        if (\n-          DATE_FIELD_TYPES.includes(fieldType) ||\n-          TIME_FIELD_TYPES.includes(fieldType)\n-        ) {\n-          return TableCell.createDate(fieldValue, fieldType);\n-        } else if (AMOUNT_FIELD_TYPES.includes(fieldType)) {\n-          return TableCell.createAmount(fieldValue, precision, isGerman);\n-        } else if (SPECIAL_FIELD_TYPES.includes(fieldType)) {\n-          return TableCell.createSpecialField(fieldType, fieldValue);\n-        }\n-        return fieldValue;\n-      }\n-      default: {\n-        return fieldValue;\n-      }\n-    }\n-  };\n-\n   constructor(props) {\n     super(props);\n-\n     this.widget = createRef();\n-\n     this.clearWidgetValue = false;\n \n     this.state = {\n-      tooltipToggled: false,\n+      tooltipToggled: false, // keeping in the local state the flag for the tooltip\n     };\n   }\n \n-  UNSAFE_componentWillReceiveProps(nextProps) {\n-    const { updateRow, readonly, rowId, tdValue } = this.props;\n-    const { tdValue: nextTdValue } = nextProps;\n-    // We should avoid highlighting when whole row is exchanged (sorting)\n-    if (rowId !== nextProps.rowId) {\n-      return;\n-    }\n-\n-    if (!readonly && tdValue !== nextTdValue) {\n-      updateRow();\n-    }\n-  }\n-\n-  widgetTooltipToggle = (field, value) => {\n+  /**\n+   * @method widgetTooltipToggle\n+   * @summary Alternative method to open dropdown, in case of disabled opening on focus.\n+   * @param {string|null} value\n+   */\n+  widgetTooltipToggle = (value) => {\n     const curVal = this.state.tooltipToggled;\n     const newVal = value != null ? value : !curVal;\n \n-    this.setState({\n-      tooltipToggled: newVal,\n-    });\n+    this.setState({ tooltipToggled: newVal });\n   };\n \n+  /**\n+   * @method handleBackdropLock\n+   * @summary checks widget against widget list and calls parent onClickOutside fnct\n+   * @param {object} state\n+   */\n   handleBackdropLock = (state) => {\n     const { item } = this.props;\n-\n-    if (\n-      !['ProductAttributes', 'Attributes', 'List', 'Lookup'].includes(\n-        item.widgetType\n-      )\n-    ) {\n-      if (!state) {\n-        this.props.onClickOutside();\n-      }\n+    const widgetsList = ['ProductAttributes', 'Attributes', 'List', 'Lookup'];\n+    if (!widgetsList.includes(item.widgetType)) {\n+      !state && this.props.onClickOutside();\n     }\n   };\n \n+  /**\n+   * @method handleKeyDown\n+   * @summary Key down function handler\n+   * @param {object} e", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExMTczMQ=="}, "originalCommit": {"oid": "33012efc68354443443e7f55b817cea62f16d015"}, "originalPosition": 203}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDU3Njk0Mw==", "bodyText": "Ok I'll add it in there. Thanks", "url": "https://github.com/metasfresh/metasfresh/pull/6844#discussion_r440576943", "createdAt": "2020-06-16T04:19:03Z", "author": {"login": "petrican"}, "path": "frontend/src/components/table/TableCell.js", "diffHunk": "@@ -1,184 +1,51 @@\n-import Moment from 'moment-timezone';\n import PropTypes from 'prop-types';\n-import numeral from 'numeral';\n import React, { PureComponent, createRef } from 'react';\n import classnames from 'classnames';\n-\n import MasterWidget from '../widget/MasterWidget';\n-import {\n-  AMOUNT_FIELD_TYPES,\n-  AMOUNT_FIELD_FORMATS_BY_PRECISION,\n-  SPECIAL_FIELD_TYPES,\n-  DATE_FIELD_TYPES,\n-  TIME_FIELD_TYPES,\n-  DATE_FIELD_FORMATS,\n-  TIME_REGEX_TEST,\n-  TIME_FORMAT,\n-} from '../../constants/Constants';\n+import { getDateFormat, fieldValueToString } from '../../utils/tableHelpers';\n+import { DATE_FIELD_FORMATS } from '../../constants/Constants';\n import WidgetTooltip from '../widget/WidgetTooltip';\n-\n class TableCell extends PureComponent {\n-  static getAmountFormatByPrecision = (precision) =>\n-    precision &&\n-    precision >= 0 &&\n-    precision < AMOUNT_FIELD_FORMATS_BY_PRECISION.length\n-      ? AMOUNT_FIELD_FORMATS_BY_PRECISION[precision]\n-      : null;\n-\n-  static getDateFormat = (fieldType) => DATE_FIELD_FORMATS[fieldType];\n-\n-  static createDate = (fieldValue, fieldType) => {\n-    if (fieldValue) {\n-      return !Moment.isMoment(fieldValue) && fieldValue.match(TIME_REGEX_TEST)\n-        ? Moment.utc(Moment.duration(fieldValue).asMilliseconds()).format(\n-            TIME_FORMAT\n-          )\n-        : Moment(fieldValue).format(TableCell.getDateFormat(fieldType));\n-    }\n-\n-    return '';\n-  };\n-\n-  static createAmount = (fieldValue, precision, isGerman) => {\n-    if (fieldValue) {\n-      const fieldValueAsNum = numeral(parseFloat(fieldValue));\n-      const numberFormat = TableCell.getAmountFormatByPrecision(precision);\n-      const returnValue = numberFormat\n-        ? fieldValueAsNum.format(numberFormat)\n-        : fieldValueAsNum.format();\n-\n-      // For German natives we want to show numbers with comma as a value separator\n-      // https://github.com/metasfresh/me03/issues/1822\n-      if (isGerman && parseFloat(returnValue) != null) {\n-        const commaRegexp = /,/g;\n-        commaRegexp.test(returnValue);\n-        const lastIdx = commaRegexp.lastIndex;\n-\n-        if (lastIdx) {\n-          return returnValue;\n-        }\n-\n-        return `${returnValue}`.replace('.', ',');\n-      }\n-\n-      return returnValue;\n-    }\n-\n-    return '';\n-  };\n-\n-  static createSpecialField = (fieldType, fieldValue) => {\n-    switch (fieldType) {\n-      case 'Color': {\n-        const style = {\n-          backgroundColor: fieldValue,\n-        };\n-        return <span className=\"widget-color-display\" style={style} />;\n-      }\n-      default:\n-        return fieldValue;\n-    }\n-  };\n-\n-  // @TODO: THIS NEEDS URGENT REFACTORING, WHY THE HECK ARE WE RETURNING\n-  // SIX DIFFERENT TYPES OF VALUES HERE ? UBER-BAD DESIGN !\n-  static fieldValueToString = (\n-    fieldValue,\n-    fieldType = 'Text',\n-    precision = null,\n-    isGerman\n-  ) => {\n-    if (fieldValue === null) {\n-      return '';\n-    }\n-\n-    switch (typeof fieldValue) {\n-      case 'object': {\n-        if (Array.isArray(fieldValue)) {\n-          return fieldValue\n-            .map((value) => TableCell.fieldValueToString(value, fieldType))\n-            .join(' - ');\n-        }\n-\n-        return DATE_FIELD_TYPES.includes(fieldType) ||\n-          TIME_FIELD_TYPES.includes(fieldType)\n-          ? TableCell.createDate(fieldValue, fieldType)\n-          : fieldValue.caption;\n-      }\n-      case 'boolean': {\n-        return fieldValue ? (\n-          <i className=\"meta-icon-checkbox-1\" />\n-        ) : (\n-          <i className=\"meta-icon-checkbox\" />\n-        );\n-      }\n-      case 'string': {\n-        if (\n-          DATE_FIELD_TYPES.includes(fieldType) ||\n-          TIME_FIELD_TYPES.includes(fieldType)\n-        ) {\n-          return TableCell.createDate(fieldValue, fieldType);\n-        } else if (AMOUNT_FIELD_TYPES.includes(fieldType)) {\n-          return TableCell.createAmount(fieldValue, precision, isGerman);\n-        } else if (SPECIAL_FIELD_TYPES.includes(fieldType)) {\n-          return TableCell.createSpecialField(fieldType, fieldValue);\n-        }\n-        return fieldValue;\n-      }\n-      default: {\n-        return fieldValue;\n-      }\n-    }\n-  };\n-\n   constructor(props) {\n     super(props);\n-\n     this.widget = createRef();\n-\n     this.clearWidgetValue = false;\n \n     this.state = {\n-      tooltipToggled: false,\n+      tooltipToggled: false, // keeping in the local state the flag for the tooltip\n     };\n   }\n \n-  UNSAFE_componentWillReceiveProps(nextProps) {\n-    const { updateRow, readonly, rowId, tdValue } = this.props;\n-    const { tdValue: nextTdValue } = nextProps;\n-    // We should avoid highlighting when whole row is exchanged (sorting)\n-    if (rowId !== nextProps.rowId) {\n-      return;\n-    }\n-\n-    if (!readonly && tdValue !== nextTdValue) {\n-      updateRow();\n-    }\n-  }\n-\n-  widgetTooltipToggle = (field, value) => {\n+  /**\n+   * @method widgetTooltipToggle\n+   * @summary Alternative method to open dropdown, in case of disabled opening on focus.\n+   * @param {string|null} value\n+   */\n+  widgetTooltipToggle = (value) => {\n     const curVal = this.state.tooltipToggled;\n     const newVal = value != null ? value : !curVal;\n \n-    this.setState({\n-      tooltipToggled: newVal,\n-    });\n+    this.setState({ tooltipToggled: newVal });\n   };\n \n+  /**\n+   * @method handleBackdropLock\n+   * @summary checks widget against widget list and calls parent onClickOutside fnct\n+   * @param {object} state\n+   */\n   handleBackdropLock = (state) => {\n     const { item } = this.props;\n-\n-    if (\n-      !['ProductAttributes', 'Attributes', 'List', 'Lookup'].includes(\n-        item.widgetType\n-      )\n-    ) {\n-      if (!state) {\n-        this.props.onClickOutside();\n-      }\n+    const widgetsList = ['ProductAttributes', 'Attributes', 'List', 'Lookup'];\n+    if (!widgetsList.includes(item.widgetType)) {\n+      !state && this.props.onClickOutside();\n     }\n   };\n \n+  /**\n+   * @method handleKeyDown\n+   * @summary Key down function handler\n+   * @param {object} e", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MDExMTczMQ=="}, "originalCommit": {"oid": "33012efc68354443443e7f55b817cea62f16d015"}, "originalPosition": 203}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1489, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}