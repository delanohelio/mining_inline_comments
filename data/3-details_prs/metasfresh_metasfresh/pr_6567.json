{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDEzNDg2Nzky", "number": 6567, "title": "Move tables to redux", "bodyText": "", "createdAt": "2020-05-05T12:31:56Z", "url": "https://github.com/metasfresh/metasfresh/pull/6567", "merged": true, "mergeCommit": {"oid": "95de88e2b371b8ad618fe9894c8fd839dbb640ad"}, "closed": true, "closedAt": "2020-05-13T11:20:36Z", "author": {"login": "siemiatj"}, "timelineItems": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcgNvbrAFqTQwOTA3NzMwMA==", "endCursor": "Y3Vyc29yOnYyOpPPAAABcg3DN0gFqTQxMDgyNTYxNQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDA5MDc3MzAw", "url": "https://github.com/metasfresh/metasfresh/pull/6567#pullrequestreview-409077300", "createdAt": "2020-05-11T11:12:14Z", "commit": {"oid": "62577cb0b4aa8b7955bd9ba3361dc0fd0291f61b"}, "state": "COMMENTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eb6484aea401ba88732e3edb3c9f646dcfc2c291", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/eb6484aea401ba88732e3edb3c9f646dcfc2c291", "committedDate": "2020-05-11T14:21:52Z", "message": "#4538 create redux essentials for tables\n\nRedux state structure for tables and actions/action creators for grids"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "82079073bcfb873162e16cae2bde008e27d8502f", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/82079073bcfb873162e16cae2bde008e27d8502f", "committedDate": "2020-05-11T14:21:53Z", "message": "#4538 basic fetching for tabs"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2fc5266eff854b6a74a68dcf1f88af0f4844ac95", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/2fc5266eff854b6a74a68dcf1f88af0f4844ac95", "committedDate": "2020-05-11T14:21:53Z", "message": "#4538 progress with tabs\n\nTabs now fetch data via the action creator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1e60e36d468493d8c4d56d3eeca351cd8378f45b", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/1e60e36d468493d8c4d56d3eeca351cd8378f45b", "committedDate": "2020-05-11T14:21:53Z", "message": "#5438 comment-out `initTabs` action creator"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ba5cf42fee8b88397d18cc01f6a869c8c37669d", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/1ba5cf42fee8b88397d18cc01f6a869c8c37669d", "committedDate": "2020-05-11T14:21:53Z", "message": "#5438 use selectors for getting views data\n\nboth locally (in the reducer) and in the app"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "849c6004deb351da24389c10053edc7ee731e2fa", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/849c6004deb351da24389c10053edc7ee731e2fa", "committedDate": "2020-05-11T14:21:54Z", "message": "#5438 extract table elements from layout\n\nand store them in the tables reducer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "53194bdc1f4413d6b3d7f31da18aa06558ab6789", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/53194bdc1f4413d6b3d7f31da18aa06558ab6789", "committedDate": "2020-05-11T14:21:54Z", "message": "#5438 cleanup actions"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6ca2f7f7b263c08d806ee620697b90051fe1e774", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/6ca2f7f7b263c08d806ee620697b90051fe1e774", "committedDate": "2020-05-11T14:21:54Z", "message": "#5438 refactoring tables reducer and some action creators"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "59b153f107a4e66f30488f37ca502cb5e2f38fcd", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/59b153f107a4e66f30488f37ca502cb5e2f38fcd", "committedDate": "2020-05-11T14:21:55Z", "message": "#4538 finishing basic redux handling for Tables\n\n- deleting tables\n- fix data types\n- use Lists for columns\n- comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5c4b64086549c86b6c9ca137d8b0779f4b9103a7", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/5c4b64086549c86b6c9ca137d8b0779f4b9103a7", "committedDate": "2020-05-11T14:21:55Z", "message": "#4538 support activeSort in redux tables\n\nNot used in components, just testing for now so a temporary action type is used."}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ffc779715fa0ac94bac97e542e835b417e492043", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/ffc779715fa0ac94bac97e542e835b417e492043", "committedDate": "2020-05-11T14:21:55Z", "message": "#4538 lint fixes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "705ee18fef07a7e22bd6f230a1573c4e3f7f3509", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/705ee18fef07a7e22bd6f230a1573c4e3f7f3509", "committedDate": "2020-05-11T14:21:56Z", "message": "#4538 another lint fix"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b382871673ff079118c2e975006fcb62d15e2782", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/b382871673ff079118c2e975006fcb62d15e2782", "committedDate": "2020-05-11T14:21:56Z", "message": "#4538 cleanup creating tables\n\n- add comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4c555f780b9b603e52fc21f2178e15b22eb1612d", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/4c555f780b9b603e52fc21f2178e15b22eb1612d", "committedDate": "2020-05-11T14:21:56Z", "message": "#4538 delete grid table when resetting view"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "058ae431619b1689fc64e2d5e39883517e93e170", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/058ae431619b1689fc64e2d5e39883517e93e170", "committedDate": "2020-05-11T14:21:57Z", "message": "#4538 code comments"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "a936608ee6ec987dd8bb9737a5616759d23e0f09", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/a936608ee6ec987dd8bb9737a5616759d23e0f09", "committedDate": "2020-05-11T14:11:14Z", "message": "#4538 code comments"}, "afterCommit": {"oid": "058ae431619b1689fc64e2d5e39883517e93e170", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/058ae431619b1689fc64e2d5e39883517e93e170", "committedDate": "2020-05-11T14:21:57Z", "message": "#4538 code comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "07d0d554c0ac33d54789d8a98a8d6c167c686c01", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/07d0d554c0ac33d54789d8a98a8d6c167c686c01", "committedDate": "2020-05-11T15:38:00Z", "message": "#4538 fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "54800519b049621e98515574c7da922be355de59", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/54800519b049621e98515574c7da922be355de59", "committedDate": "2020-05-11T21:50:22Z", "message": "#4538 fix tests\n\nimprove error handling"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "eab95018e36d110ebae9ea8dfc6cf384792ce327", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/eab95018e36d110ebae9ea8dfc6cf384792ce327", "committedDate": "2020-05-12T18:22:56Z", "message": "#4538 switch to immer\n\ncreate selectors for data"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/bb0eecb6edd79c5e19373e402b9d720f67d6302c", "committedDate": "2020-05-12T18:23:25Z", "message": "#4538 rename api function to avoid naming collisions\n\nt"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwNTgxMDQ1", "url": "https://github.com/metasfresh/metasfresh/pull/6567#pullrequestreview-410581045", "createdAt": "2020-05-13T04:36:15Z", "commit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 15, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNDozNjoxNVrOGUhIbg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QwNToyMzo0OFrOGUh2HQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2NzUzNA==", "bodyText": "Can you pls use one single param and that to be and object containing those ? Thanks", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424167534", "createdAt": "2020-05-13T04:36:15Z", "author": {"login": "petrican"}, "path": "frontend/src/api/view.js", "diffHunk": "@@ -180,7 +180,7 @@ export function locationConfigRequest() {\n   return get(`${config.API_URL}/geolocation/config`);\n }\n \n-export function deleteView(windowId, viewId, action) {\n+export function deleteViewRequest(windowId, viewId, action) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE2ODE2Mg==", "bodyText": "Same as above. Pls use an object as param contaning the windowType, viewId, type. Thanks", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424168162", "createdAt": "2020-05-13T04:39:18Z", "author": {"login": "petrican"}, "path": "frontend/src/components/app/RawModal.js", "diffHunk": "@@ -232,8 +232,7 @@ class RawModal extends Component {\n       }\n \n       await this.removeModal();\n-\n-      await deleteView(windowType, viewId, type);\n+      await deleteViewRequest(windowType, viewId, type);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 15}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MDU0MA==", "bodyText": "Add pls doc about params and a brief description of what this function does and what's its purpose. Thanks", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424170540", "createdAt": "2020-05-13T04:49:53Z", "author": {"login": "petrican"}, "path": "frontend/src/actions/ViewActions.js", "diffHunk": "@@ -136,20 +198,32 @@ export function updateViewData(id, rows, tabId) {\n   };\n }\n \n+/**\n+ * @method fetchLocationConfigSuccess\n+ * @summary\n+ */\n function fetchLocationConfigSuccess(id, data) {\n   return {\n     type: FETCH_LOCATION_CONFIG_SUCCESS,\n     payload: { id, data },\n   };\n }\n \n+/**\n+ * @method fetchLocationConfigError\n+ * @summary\n+ */\n function fetchLocationConfigError(id, error) {\n   return {\n     type: FETCH_LOCATION_CONFIG_ERROR,\n     payload: { id, error },\n   };\n }\n \n+/**\n+ * @method addLocationData\n+ * @summary", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 195}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MTgzMw==", "bodyText": "If this is not needed we can remove the commented code. We can always find this function from previous versions of the code if it's really needed.", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424171833", "createdAt": "2020-05-13T04:55:08Z", "author": {"login": "petrican"}, "path": "frontend/src/actions/WindowActions.js", "diffHunk": "@@ -521,38 +528,64 @@ export function deselectTableItems(ids, windowType, viewId) {\n \n // THUNK ACTIONS\n \n-export function initTabs(layout, windowType, docId, isModal) {\n-  return async (dispatch) => {\n-    const requests = [];\n-    const tabTmp = {};\n-\n-    if (layout) {\n-      layout.map((tab, index) => {\n-        tabTmp[tab.tabId] = {};\n-\n-        if ((tab.tabId && index === 0) || !tab.queryOnActivate) {\n-          requests.push(getTab(tab.tabId, windowType, docId));\n-        }\n-      });\n+// TODO: Just a quick thunk action creator to test Tables reducer\n+// but looks like this can actually replace the `initTabs`.\n+/*\n+ * @method fetchTab\n+ * @summary Action creator for fetching single tab's rows\n+ */\n+export function fetchTab(tabId, windowType, docId) {\n+  return (dispatch) => {\n+    return getTabRequest(tabId, windowType, docId)\n+      .then((response) => {\n+        const tableId = `${windowType}_${docId}_${tabId}`;\n+        const tableData = { result: response };\n \n-      return await Promise.all(requests).then((responses) => {\n-        responses.forEach((res) => {\n-          // needed for finding tabId\n-          const rowZero = res && res[0];\n-          if (rowZero) {\n-            const tabId = rowZero.tabId;\n-            tabTmp[tabId] = res;\n-          }\n-        });\n+        dispatch(updateTabTable(tableId, tableData));\n \n-        dispatch(addRowData(tabTmp, getScope(isModal)));\n+        return Promise.resolve(response);\n+      })\n+      .catch((error) => {\n+        //show error message ?\n+        return Promise.resolve(error);\n       });\n-    }\n-\n-    return Promise.resolve(null);\n   };\n }\n \n+// TODO: Figure out if we still need this as it looks like we can just fetch", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 87}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MzI5NQ==", "bodyText": "pls use ===. here .  Also maybe it's wise to use  documentId.toLowerCase() === 'new' in case someone does pass by mistake 'New' or 'nEw' or something like that. Might not happen but just as a safety check", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424173295", "createdAt": "2020-05-13T05:01:09Z", "author": {"login": "petrican"}, "path": "frontend/src/actions/WindowActions.js", "diffHunk": "@@ -620,87 +653,123 @@ export function initWindow(windowType, docId, tabId, rowId = null, isAdvanced) {\n  * Main method to generate window\n  */\n export function createWindow(\n-  windowId,\n-  docId = 'NEW',\n+  windowType,\n+  documentId = 'NEW',\n   tabId,\n   rowId,\n   isModal = false,\n   isAdvanced\n ) {\n   return (dispatch) => {\n-    if (docId == 'new') {\n-      docId = 'NEW';\n+    if (documentId == 'new') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 140}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MzY1Ng==", "bodyText": "===", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424173656", "createdAt": "2020-05-13T05:02:33Z", "author": {"login": "petrican"}, "path": "frontend/src/actions/WindowActions.js", "diffHunk": "@@ -620,87 +653,123 @@ export function initWindow(windowType, docId, tabId, rowId = null, isAdvanced) {\n  * Main method to generate window\n  */\n export function createWindow(\n-  windowId,\n-  docId = 'NEW',\n+  windowType,\n+  documentId = 'NEW',\n   tabId,\n   rowId,\n   isModal = false,\n   isAdvanced\n ) {\n   return (dispatch) => {\n-    if (docId == 'new') {\n-      docId = 'NEW';\n+    if (documentId == 'new') {\n+      documentId = 'NEW';\n     }\n \n     // this chain is really important,\n     // to do not re-render widgets on init\n-    return dispatch(initWindow(windowId, docId, tabId, rowId, isAdvanced)).then(\n-      (response) => {\n-        if (!response || !response.data) {\n-          return Promise.resolve(null);\n-        }\n-\n-        if (docId == 'NEW' && !isModal) {\n-          dispatch(setLatestNewDocument(response.data[0].id));\n-          // redirect immedietely\n-          return dispatch(\n-            replace(`/window/${windowId}/${response.data[0].id}`)\n-          );\n-        }\n+    return dispatch(\n+      initWindow(windowType, documentId, tabId, rowId, isAdvanced)\n+    ).then((response) => {\n+      if (!response || !response.data) {\n+        return Promise.resolve(null);\n+      }\n \n-        let elem = 0;\n+      const data = response.data[0];\n+      const tabs = data.includedTabsInfo;\n+      let docId = data.id;\n \n-        response.data.forEach((value, index) => {\n-          if (value.rowId === rowId) {\n-            elem = index;\n-          }\n+      if (tabs) {\n+        Object.values(tabs).forEach((tab) => {\n+          const { tabId } = tab;\n+          const tableId = `${windowType}_${docId}_${tabId}`;\n+          const tableData = {\n+            windowType,\n+            docId,\n+            tabId,\n+            ...tab,\n+          };\n+          dispatch(createTabTable(tableId, tableData));\n         });\n+      }\n \n-        if (docId === 'NEW') {\n-          dispatch(updateModal(null, response.data[0].id));\n+      if (documentId == 'NEW' && !isModal) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3Mzk2OA==", "bodyText": "also you might wanna do a similar check documentId.toUpperCase() === 'NEW' for safety", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424173968", "createdAt": "2020-05-13T05:03:44Z", "author": {"login": "petrican"}, "path": "frontend/src/actions/WindowActions.js", "diffHunk": "@@ -620,87 +653,123 @@ export function initWindow(windowType, docId, tabId, rowId = null, isAdvanced) {\n  * Main method to generate window\n  */\n export function createWindow(\n-  windowId,\n-  docId = 'NEW',\n+  windowType,\n+  documentId = 'NEW',\n   tabId,\n   rowId,\n   isModal = false,\n   isAdvanced\n ) {\n   return (dispatch) => {\n-    if (docId == 'new') {\n-      docId = 'NEW';\n+    if (documentId == 'new') {\n+      documentId = 'NEW';\n     }\n \n     // this chain is really important,\n     // to do not re-render widgets on init\n-    return dispatch(initWindow(windowId, docId, tabId, rowId, isAdvanced)).then(\n-      (response) => {\n-        if (!response || !response.data) {\n-          return Promise.resolve(null);\n-        }\n-\n-        if (docId == 'NEW' && !isModal) {\n-          dispatch(setLatestNewDocument(response.data[0].id));\n-          // redirect immedietely\n-          return dispatch(\n-            replace(`/window/${windowId}/${response.data[0].id}`)\n-          );\n-        }\n+    return dispatch(\n+      initWindow(windowType, documentId, tabId, rowId, isAdvanced)\n+    ).then((response) => {\n+      if (!response || !response.data) {\n+        return Promise.resolve(null);\n+      }\n \n-        let elem = 0;\n+      const data = response.data[0];\n+      const tabs = data.includedTabsInfo;\n+      let docId = data.id;\n \n-        response.data.forEach((value, index) => {\n-          if (value.rowId === rowId) {\n-            elem = index;\n-          }\n+      if (tabs) {\n+        Object.values(tabs).forEach((tab) => {\n+          const { tabId } = tab;\n+          const tableId = `${windowType}_${docId}_${tabId}`;\n+          const tableData = {\n+            windowType,\n+            docId,\n+            tabId,\n+            ...tab,\n+          };\n+          dispatch(createTabTable(tableId, tableData));\n         });\n+      }\n \n-        if (docId === 'NEW') {\n-          dispatch(updateModal(null, response.data[0].id));\n+      if (documentId == 'NEW' && !isModal) {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3MzY1Ng=="}, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 191}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3NDQ1MA==", "bodyText": "Should we have a safety check for such case to be sure ?", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424174450", "createdAt": "2020-05-13T05:05:37Z", "author": {"login": "petrican"}, "path": "frontend/src/actions/WindowActions.js", "diffHunk": "@@ -620,87 +653,123 @@ export function initWindow(windowType, docId, tabId, rowId = null, isAdvanced) {\n  * Main method to generate window\n  */\n export function createWindow(\n-  windowId,\n-  docId = 'NEW',\n+  windowType,\n+  documentId = 'NEW',\n   tabId,\n   rowId,\n   isModal = false,\n   isAdvanced\n ) {\n   return (dispatch) => {\n-    if (docId == 'new') {\n-      docId = 'NEW';\n+    if (documentId == 'new') {\n+      documentId = 'NEW';\n     }\n \n     // this chain is really important,\n     // to do not re-render widgets on init\n-    return dispatch(initWindow(windowId, docId, tabId, rowId, isAdvanced)).then(\n-      (response) => {\n-        if (!response || !response.data) {\n-          return Promise.resolve(null);\n-        }\n-\n-        if (docId == 'NEW' && !isModal) {\n-          dispatch(setLatestNewDocument(response.data[0].id));\n-          // redirect immedietely\n-          return dispatch(\n-            replace(`/window/${windowId}/${response.data[0].id}`)\n-          );\n-        }\n+    return dispatch(\n+      initWindow(windowType, documentId, tabId, rowId, isAdvanced)\n+    ).then((response) => {\n+      if (!response || !response.data) {\n+        return Promise.resolve(null);\n+      }\n \n-        let elem = 0;\n+      const data = response.data[0];\n+      const tabs = data.includedTabsInfo;\n+      let docId = data.id;\n \n-        response.data.forEach((value, index) => {\n-          if (value.rowId === rowId) {\n-            elem = index;\n-          }\n+      if (tabs) {\n+        Object.values(tabs).forEach((tab) => {\n+          const { tabId } = tab;\n+          const tableId = `${windowType}_${docId}_${tabId}`;\n+          const tableData = {\n+            windowType,\n+            docId,\n+            tabId,\n+            ...tab,\n+          };\n+          dispatch(createTabTable(tableId, tableData));\n         });\n+      }\n \n-        if (docId === 'NEW') {\n-          dispatch(updateModal(null, response.data[0].id));\n+      if (documentId == 'NEW' && !isModal) {\n+        dispatch(setLatestNewDocument(docId));\n+        // redirect immedietely\n+        return dispatch(replace(`/window/${windowType}/${docId}`));\n+      }\n+\n+      let elem = 0;\n+\n+      response.data.forEach((value, index) => {\n+        if (value.rowId === rowId) {\n+          elem = index;\n         }\n+      });\n \n-        docId = response.data[elem].id;\n-        dispatch(\n-          initDataSuccess({\n-            data: parseToDisplay(response.data[elem].fieldsByName),\n-            docId,\n-            saveStatus: response.data[0].saveStatus,\n-            scope: getScope(isModal),\n-            standardActions: response.data[0].standardActions,\n-            validStatus: response.data[0].validStatus,\n-            includedTabsInfo: response.data[0].includedTabsInfo,\n-            websocket: response.data[0].websocketEndpoint,\n-          })\n-        );\n+      if (documentId === 'NEW') {\n+        dispatch(updateModal(null, docId));\n+      }\n \n-        if (isModal) {\n-          if (rowId === 'NEW') {\n-            dispatch(\n-              mapDataToState(response.data, false, 'NEW', docId, windowId)\n-            );\n-            dispatch(updateStatus(response.data));\n-            dispatch(updateModal(response.data[0].rowId));\n-          }\n-        } else {\n-          dispatch(getWindowBreadcrumb(windowId));\n+      // TODO: Is `elem` ever different than 0 ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 232}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3NTkwNA==", "bodyText": "Remove it pls if it's the case . Like I said in one of my previous comment we can always get the code back from the repo. Code should be clean without forgotten spread comments within it. Thanks", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424175904", "createdAt": "2020-05-13T05:10:43Z", "author": {"login": "petrican"}, "path": "frontend/src/actions/WindowActions.js", "diffHunk": "@@ -620,87 +653,123 @@ export function initWindow(windowType, docId, tabId, rowId = null, isAdvanced) {\n  * Main method to generate window\n  */\n export function createWindow(\n-  windowId,\n-  docId = 'NEW',\n+  windowType,\n+  documentId = 'NEW',\n   tabId,\n   rowId,\n   isModal = false,\n   isAdvanced\n ) {\n   return (dispatch) => {\n-    if (docId == 'new') {\n-      docId = 'NEW';\n+    if (documentId == 'new') {\n+      documentId = 'NEW';\n     }\n \n     // this chain is really important,\n     // to do not re-render widgets on init\n-    return dispatch(initWindow(windowId, docId, tabId, rowId, isAdvanced)).then(\n-      (response) => {\n-        if (!response || !response.data) {\n-          return Promise.resolve(null);\n-        }\n-\n-        if (docId == 'NEW' && !isModal) {\n-          dispatch(setLatestNewDocument(response.data[0].id));\n-          // redirect immedietely\n-          return dispatch(\n-            replace(`/window/${windowId}/${response.data[0].id}`)\n-          );\n-        }\n+    return dispatch(\n+      initWindow(windowType, documentId, tabId, rowId, isAdvanced)\n+    ).then((response) => {\n+      if (!response || !response.data) {\n+        return Promise.resolve(null);\n+      }\n \n-        let elem = 0;\n+      const data = response.data[0];\n+      const tabs = data.includedTabsInfo;\n+      let docId = data.id;\n \n-        response.data.forEach((value, index) => {\n-          if (value.rowId === rowId) {\n-            elem = index;\n-          }\n+      if (tabs) {\n+        Object.values(tabs).forEach((tab) => {\n+          const { tabId } = tab;\n+          const tableId = `${windowType}_${docId}_${tabId}`;\n+          const tableData = {\n+            windowType,\n+            docId,\n+            tabId,\n+            ...tab,\n+          };\n+          dispatch(createTabTable(tableId, tableData));\n         });\n+      }\n \n-        if (docId === 'NEW') {\n-          dispatch(updateModal(null, response.data[0].id));\n+      if (documentId == 'NEW' && !isModal) {\n+        dispatch(setLatestNewDocument(docId));\n+        // redirect immedietely\n+        return dispatch(replace(`/window/${windowType}/${docId}`));\n+      }\n+\n+      let elem = 0;\n+\n+      response.data.forEach((value, index) => {\n+        if (value.rowId === rowId) {\n+          elem = index;\n         }\n+      });\n \n-        docId = response.data[elem].id;\n-        dispatch(\n-          initDataSuccess({\n-            data: parseToDisplay(response.data[elem].fieldsByName),\n-            docId,\n-            saveStatus: response.data[0].saveStatus,\n-            scope: getScope(isModal),\n-            standardActions: response.data[0].standardActions,\n-            validStatus: response.data[0].validStatus,\n-            includedTabsInfo: response.data[0].includedTabsInfo,\n-            websocket: response.data[0].websocketEndpoint,\n-          })\n-        );\n+      if (documentId === 'NEW') {\n+        dispatch(updateModal(null, docId));\n+      }\n \n-        if (isModal) {\n-          if (rowId === 'NEW') {\n-            dispatch(\n-              mapDataToState(response.data, false, 'NEW', docId, windowId)\n-            );\n-            dispatch(updateStatus(response.data));\n-            dispatch(updateModal(response.data[0].rowId));\n-          }\n-        } else {\n-          dispatch(getWindowBreadcrumb(windowId));\n+      // TODO: Is `elem` ever different than 0 ?\n+      docId = response.data[elem].id;\n+      dispatch(\n+        initDataSuccess({\n+          data: parseToDisplay(response.data[elem].fieldsByName),\n+          docId,\n+          saveStatus: data.saveStatus,\n+          scope: getScope(isModal),\n+          standardActions: data.standardActions,\n+          validStatus: data.validStatus,\n+          includedTabsInfo: data.includedTabsInfo,\n+          websocket: data.websocketEndpoint,\n+        })\n+      );\n+\n+      if (isModal) {\n+        if (rowId === 'NEW') {\n+          dispatch(\n+            mapDataToState(response.data, false, 'NEW', docId, windowType)\n+          );\n+          dispatch(updateStatus(response.data));\n+          dispatch(updateModal(data.rowId));\n         }\n+      } else {\n+        dispatch(getWindowBreadcrumb(windowType));\n+      }\n \n-        return getLayout('window', windowId, tabId, null, null, isAdvanced)\n-          .then((response) =>\n-            dispatch(initLayoutSuccess(response.data, getScope(isModal)))\n-          )\n-          .then((response) => {\n-            if (!isModal) {\n-              return dispatch(\n-                initTabs(response.layout.tabs, windowId, docId, isModal)\n-              );\n+      return (\n+        getLayout('window', windowType, tabId, null, null, isAdvanced)\n+          .then(({ data }) => {\n+            const layoutTabs = data.tabs;\n+\n+            if (layoutTabs.length) {\n+              Object.values(layoutTabs).forEach((tab) => {\n+                const { tabId } = tab;\n+                const tableId = `${windowType}_${docId}_${tabId}`;\n+                const tableData = {\n+                  windowType,\n+                  docId,\n+                  tabId,\n+                  ...tab,\n+                };\n+                dispatch(updateTabTable(tableId, tableData));\n+              });\n             }\n-            return Promise.resolve(null);\n+\n+            dispatch(initLayoutSuccess(data, getScope(isModal)));\n           })\n-          .catch((e) => Promise.reject(e));\n-      }\n-    );\n+          // TODO: looks like this can be removed ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 293}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3NjIwMw==", "bodyText": "Has this been clarified after the meeting with Teo ? Can we remove it ?", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424176203", "createdAt": "2020-05-13T05:11:56Z", "author": {"login": "petrican"}, "path": "frontend/src/components/app/DocumentList/index.js", "diffHunk": "@@ -524,6 +528,7 @@ class DocumentListContainer extends Component {\n \n         const pageColumnInfosByFieldName = response.columnsByFieldName;\n \n+        // TODO: There is some sorcery happening here. Why are we doing this ?", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 86}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3NjcxMw==", "bodyText": "Pls use object for params", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424176713", "createdAt": "2020-05-13T05:13:50Z", "author": {"login": "petrican"}, "path": "frontend/src/actions/WindowActions.js", "diffHunk": "@@ -521,38 +528,64 @@ export function deselectTableItems(ids, windowType, viewId) {\n \n // THUNK ACTIONS\n \n-export function initTabs(layout, windowType, docId, isModal) {\n-  return async (dispatch) => {\n-    const requests = [];\n-    const tabTmp = {};\n-\n-    if (layout) {\n-      layout.map((tab, index) => {\n-        tabTmp[tab.tabId] = {};\n-\n-        if ((tab.tabId && index === 0) || !tab.queryOnActivate) {\n-          requests.push(getTab(tab.tabId, windowType, docId));\n-        }\n-      });\n+// TODO: Just a quick thunk action creator to test Tables reducer\n+// but looks like this can actually replace the `initTabs`.\n+/*\n+ * @method fetchTab\n+ * @summary Action creator for fetching single tab's rows\n+ */\n+export function fetchTab(tabId, windowType, docId) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3NzA4MA==", "bodyText": "should we have a dedicated function for forming the tableId ? wdyt ?", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424177080", "createdAt": "2020-05-13T05:15:13Z", "author": {"login": "petrican"}, "path": "frontend/src/actions/WindowActions.js", "diffHunk": "@@ -521,38 +528,64 @@ export function deselectTableItems(ids, windowType, viewId) {\n \n // THUNK ACTIONS\n \n-export function initTabs(layout, windowType, docId, isModal) {\n-  return async (dispatch) => {\n-    const requests = [];\n-    const tabTmp = {};\n-\n-    if (layout) {\n-      layout.map((tab, index) => {\n-        tabTmp[tab.tabId] = {};\n-\n-        if ((tab.tabId && index === 0) || !tab.queryOnActivate) {\n-          requests.push(getTab(tab.tabId, windowType, docId));\n-        }\n-      });\n+// TODO: Just a quick thunk action creator to test Tables reducer\n+// but looks like this can actually replace the `initTabs`.\n+/*\n+ * @method fetchTab\n+ * @summary Action creator for fetching single tab's rows\n+ */\n+export function fetchTab(tabId, windowType, docId) {\n+  return (dispatch) => {\n+    return getTabRequest(tabId, windowType, docId)\n+      .then((response) => {\n+        const tableId = `${windowType}_${docId}_${tabId}`;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3Nzc2Nw==", "bodyText": "https://github.com/ryanmcdermott/clean-code-javascript#functions", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424177767", "createdAt": "2020-05-13T05:17:59Z", "author": {"login": "petrican"}, "path": "frontend/src/components/window/Tab.js", "diffHunk": "@@ -31,16 +35,17 @@ class Tab extends Component {\n         : '';\n \n       if (singleRowView) {\n-        getTab(tabId, windowId, docId).then((res) => {\n+        fetchTab(tabId, windowId, docId).then((res) => {\n           if (res.length) {\n-            dispatch(updateMasterData(res[0]));\n-            dispatch(addRowData({ [tabId]: res }, 'master'));\n+            updateMasterData(res[0]);\n+            addRowData({ [tabId]: res }, 'master');\n             onChange && onChange();\n           }\n         });\n+        fetchTab(tabId, windowId, docId);\n       } else {\n-        getTab(tabId, windowId, docId, query).then((res) => {\n-          dispatch(addRowData({ [tabId]: res }, 'master'));\n+        fetchTab(tabId, windowId, docId, query).then((res) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 48}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3ODY5NQ==", "bodyText": "Oh I see we have the table Id gen function in here. I didn't spot it on the first check. Pls use it in all the places where table ID is formed.", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424178695", "createdAt": "2020-05-13T05:21:39Z", "author": {"login": "petrican"}, "path": "frontend/src/reducers/tables.js", "diffHunk": "@@ -0,0 +1,115 @@\n+import produce from 'immer';\n+import { get } from 'lodash';\n+import { createSelector } from 'reselect';\n+\n+import * as types from '../constants/ActionTypes';\n+\n+export const tableState = {\n+  windowType: null,\n+  viewId: null,\n+  docId: null,\n+  tabId: null,\n+  selected: [],\n+  rows: [],\n+  // row columns\n+  columns: [],\n+  activeSort: false,\n+  headerProperties: {},\n+\n+  //header columns\n+  headerElements: {},\n+  emptyText: null,\n+  emptyHint: null,\n+  page: 0,\n+  firstRow: 0,\n+  size: 0,\n+  orderBy: [],\n+  defaultOrderBys: [],\n+  pageLength: 0,\n+  queryLimit: 0,\n+  queryLimitHit: false,\n+  dataPending: false,\n+  dataError: false,\n+  tabIndex: 0,\n+  internalName: null,\n+  queryOnActivate: true,\n+  supportQuickInput: true,\n+\n+  // includedTabsInfo\n+  allowCreateNew: true,\n+  allowCreateNewReason: null,\n+  allowDelete: true,\n+  stale: false,\n+};\n+\n+// we store the length of the tables structure for the sake of testing and debugging\n+export const initialState = { length: 0 };\n+\n+/**\n+ * @method getTableId\n+ * @summary Small helper function to generate the table id depending on the values (if viewId is\n+ * provided, we'll use only that for grids, and if not - it's a tab table so document id\n+ * and tab ids are expected ).\n+ */\n+export const getTableId = ({ windowType, viewId, docId, tabId }) => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 54}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3OTIyOQ==", "bodyText": "You already have a function for forming that right ? Can you pls use that here instead and whenever we have similar table id formatting? Thanks", "url": "https://github.com/metasfresh/metasfresh/pull/6567#discussion_r424179229", "createdAt": "2020-05-13T05:23:48Z", "author": {"login": "petrican"}, "path": "frontend/src/actions/WindowActions.js", "diffHunk": "@@ -521,38 +528,64 @@ export function deselectTableItems(ids, windowType, viewId) {\n \n // THUNK ACTIONS\n \n-export function initTabs(layout, windowType, docId, isModal) {\n-  return async (dispatch) => {\n-    const requests = [];\n-    const tabTmp = {};\n-\n-    if (layout) {\n-      layout.map((tab, index) => {\n-        tabTmp[tab.tabId] = {};\n-\n-        if ((tab.tabId && index === 0) || !tab.queryOnActivate) {\n-          requests.push(getTab(tab.tabId, windowType, docId));\n-        }\n-      });\n+// TODO: Just a quick thunk action creator to test Tables reducer\n+// but looks like this can actually replace the `initTabs`.\n+/*\n+ * @method fetchTab\n+ * @summary Action creator for fetching single tab's rows\n+ */\n+export function fetchTab(tabId, windowType, docId) {\n+  return (dispatch) => {\n+    return getTabRequest(tabId, windowType, docId)\n+      .then((response) => {\n+        const tableId = `${windowType}_${docId}_${tabId}`;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDE3NzA4MA=="}, "originalCommit": {"oid": "bb0eecb6edd79c5e19373e402b9d720f67d6302c"}, "originalPosition": 60}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "574351bf20fb6b366deb509ae42cf4cf6e3a9052", "author": {"user": null}, "url": "https://github.com/metasfresh/metasfresh/commit/574351bf20fb6b366deb509ae42cf4cf6e3a9052", "committedDate": "2020-05-13T06:21:48Z", "message": "Fix linter error #4538"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f436e00277ccb050494e21c1e8c9a04270ad9292", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/f436e00277ccb050494e21c1e8c9a04270ad9292", "committedDate": "2020-05-13T10:19:17Z", "message": "#4538 fix details view when there are no tables\n\n- use `getTableId` everywhere\n- cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8017cfcd2e0b670a72c392763f4ed162ca366223", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/8017cfcd2e0b670a72c392763f4ed162ca366223", "committedDate": "2020-05-13T10:31:38Z", "message": "#4538 small refactor\n\nf"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDEwODI1NjE1", "url": "https://github.com/metasfresh/metasfresh/pull/6567#pullrequestreview-410825615", "createdAt": "2020-05-13T11:19:57Z", "commit": {"oid": "8017cfcd2e0b670a72c392763f4ed162ca366223"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3528, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}