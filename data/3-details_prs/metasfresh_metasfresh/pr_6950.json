{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDQzNDg5NTM1", "number": 6950, "title": "`Picking Terminal V2`: Add process for picking and packing in 1 step", "bodyText": "#6949", "createdAt": "2020-07-02T12:37:37Z", "url": "https://github.com/metasfresh/metasfresh/pull/6950", "merged": true, "mergeCommit": {"oid": "c03f7d23b7750342c69faa9f1d9db510baebab42"}, "closed": true, "closedAt": "2020-07-07T05:05:08Z", "author": {"login": "TheBestPessimist"}, "timelineItems": {"totalCount": 25, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcyOQGSgH2gAyNDQzNDg5NTM1OmRlMTVmOTM2NzE5MjhlYjE1MjgyYzIzZGIxODc1ODlmMzIxZjdmZjM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcyemHmgFqTQ0MzU2MzE3OA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "de15f93671928eb15282c23db187589f321f7ff3", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/de15f93671928eb15282c23db187589f321f7ff3", "committedDate": "2020-07-06T09:58:33Z", "message": "Extract common process logic to helper component and implement process for both steps\n\nhttps://github.com/metasfresh/metasfresh/issues/6949"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "461debc58ea8887dd86b130838be07eb13e9ebc3", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/461debc58ea8887dd86b130838be07eb13e9ebc3", "committedDate": "2020-07-06T09:58:34Z", "message": "Add column/field `M_HU_PI.IsDefaultForPicking`\n\nhttps://github.com/metasfresh/metasfresh/issues/6949"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "970f8953221f5a200f308046f70c23177b71ccfe", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/970f8953221f5a200f308046f70c23177b71ccfe", "committedDate": "2020-07-06T10:00:09Z", "message": "Use the default PI for picking + ensure there's only 1 set\n\nhttps://github.com/metasfresh/metasfresh/issues/6949"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d8746ee51c04b336072d698fc5127b6c676133a", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/9d8746ee51c04b336072d698fc5127b6c676133a", "committedDate": "2020-07-06T10:00:18Z", "message": "Add sql migration\n\nhttps://github.com/metasfresh/metasfresh/issues/6949"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a933c95284270796f83cacb65be2d3d045b29474", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/a933c95284270796f83cacb65be2d3d045b29474", "committedDate": "2020-07-06T10:00:19Z", "message": "Ensure default Packing Instruction exists before running PickAndPack process\n\nhttps://github.com/metasfresh/metasfresh/issues/6949"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "757de28a8d59ac7096dd35066be33ba4c01bffc5", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/757de28a8d59ac7096dd35066be33ba4c01bffc5", "committedDate": "2020-07-06T10:00:19Z", "message": "Fix wording\n\nhttps://github.com/metasfresh/metasfresh/issues/6949"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0550d77aa600022c1b346350c8c43fdd2e2b8c76", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/0550d77aa600022c1b346350c8c43fdd2e2b8c76", "committedDate": "2020-07-06T10:01:53Z", "message": "Fix warnings\n\nhttps://github.com/metasfresh/metasfresh/issues/6949"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "f5d2feb0e5eb1fba32628abbf7331200c611a48c", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/f5d2feb0e5eb1fba32628abbf7331200c611a48c", "committedDate": "2020-07-06T09:57:43Z", "message": "Fix wording\n\nhttps://github.com/metasfresh/metasfresh/issues/6949"}, "afterCommit": {"oid": "0550d77aa600022c1b346350c8c43fdd2e2b8c76", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/0550d77aa600022c1b346350c8c43fdd2e2b8c76", "committedDate": "2020-07-06T10:01:53Z", "message": "Fix warnings\n\nhttps://github.com/metasfresh/metasfresh/issues/6949"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyOTUxMzA1", "url": "https://github.com/metasfresh/metasfresh/pull/6950#pullrequestreview-442951305", "createdAt": "2020-07-06T10:17:53Z", "commit": {"oid": "0550d77aa600022c1b346350c8c43fdd2e2b8c76"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMDoxNzo1NFrOGtRdgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMDoxNzo1NFrOGtRdgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEyNTE4Nw==", "bodyText": "suggestion: don't have to cache it here. relly entirely on PickingConfigRepositoryV2", "url": "https://github.com/metasfresh/metasfresh/pull/6950#discussion_r450125187", "createdAt": "2020-07-06T10:17:54Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/pickingV2/productsToPick/process/ProductsToPickHelper.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.pickingV2.productsToPick.process;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import de.metas.handlingunits.HuPackingInstructionsId;\n+import de.metas.handlingunits.picking.PickingCandidate;\n+import de.metas.handlingunits.picking.PickingCandidateId;\n+import de.metas.handlingunits.picking.PickingCandidateService;\n+import de.metas.handlingunits.picking.candidate.commands.PickHUResult;\n+import de.metas.handlingunits.picking.requests.PickRequest;\n+import de.metas.ui.web.pickingV2.config.PickingConfigRepositoryV2;\n+import de.metas.ui.web.pickingV2.config.PickingConfigV2;\n+import de.metas.ui.web.pickingV2.productsToPick.rows.ProductsToPickRow;\n+import de.metas.ui.web.pickingV2.productsToPick.rows.ProductsToPickRowsService;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import de.metas.util.GuavaCollectors;\n+import lombok.NonNull;\n+import org.adempiere.util.lang.ImmutablePair;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+@Component\n+class ProductsToPickHelper\n+{\n+\tprivate final PickingCandidateService pickingCandidateService;\n+\tprivate final ProductsToPickRowsService productsToPickRowsService;\n+\n+\tprivate final PickingConfigRepositoryV2 pickingConfigRepo;\n+\tprivate PickingConfigV2 _pickingConfig; // lazy", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0550d77aa600022c1b346350c8c43fdd2e2b8c76"}, "originalPosition": 55}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyOTU3Njgy", "url": "https://github.com/metasfresh/metasfresh/pull/6950#pullrequestreview-442957682", "createdAt": "2020-07-06T10:28:09Z", "commit": {"oid": "0550d77aa600022c1b346350c8c43fdd2e2b8c76"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMDoyODowOVrOGtRxgw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMDoyODowOVrOGtRxgw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEzMDMwNw==", "bodyText": "instead of ImmutablePair<DocumentId, PickingCandidate> why not having a small class like\nclass WebuiPickHUResult { DocumentId rowId; PickingCadidate pickingCandidate } ?", "url": "https://github.com/metasfresh/metasfresh/pull/6950#discussion_r450130307", "createdAt": "2020-07-06T10:28:09Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/pickingV2/productsToPick/process/ProductsToPickHelper.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.pickingV2.productsToPick.process;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import de.metas.handlingunits.HuPackingInstructionsId;\n+import de.metas.handlingunits.picking.PickingCandidate;\n+import de.metas.handlingunits.picking.PickingCandidateId;\n+import de.metas.handlingunits.picking.PickingCandidateService;\n+import de.metas.handlingunits.picking.candidate.commands.PickHUResult;\n+import de.metas.handlingunits.picking.requests.PickRequest;\n+import de.metas.ui.web.pickingV2.config.PickingConfigRepositoryV2;\n+import de.metas.ui.web.pickingV2.config.PickingConfigV2;\n+import de.metas.ui.web.pickingV2.productsToPick.rows.ProductsToPickRow;\n+import de.metas.ui.web.pickingV2.productsToPick.rows.ProductsToPickRowsService;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import de.metas.util.GuavaCollectors;\n+import lombok.NonNull;\n+import org.adempiere.util.lang.ImmutablePair;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+@Component\n+class ProductsToPickHelper\n+{\n+\tprivate final PickingCandidateService pickingCandidateService;\n+\tprivate final ProductsToPickRowsService productsToPickRowsService;\n+\n+\tprivate final PickingConfigRepositoryV2 pickingConfigRepo;\n+\tprivate PickingConfigV2 _pickingConfig; // lazy\n+\n+\tprotected final PickingConfigV2 getPickingConfig()\n+\t{\n+\t\tPickingConfigV2 pickingConfig = _pickingConfig;\n+\t\tif (pickingConfig == null)\n+\t\t{\n+\t\t\tpickingConfig = _pickingConfig = pickingConfigRepo.getPickingConfig();\n+\t\t}\n+\t\treturn pickingConfig;\n+\t}\n+\n+\tProductsToPickHelper(final PickingCandidateService pickingCandidateService,\n+\t\t\tfinal ProductsToPickRowsService productsToPickRowsService,\n+\t\t\tfinal PickingConfigRepositoryV2 pickingConfigRepo)\n+\t{\n+\t\tthis.pickingCandidateService = pickingCandidateService;\n+\t\tthis.productsToPickRowsService = productsToPickRowsService;\n+\t\tthis.pickingConfigRepo = pickingConfigRepo;\n+\t}\n+\n+\t@NonNull\n+\tpublic ImmutableList<ImmutablePair<DocumentId, PickingCandidate>> pick(final List<ProductsToPickRow> selectedRows)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0550d77aa600022c1b346350c8c43fdd2e2b8c76"}, "originalPosition": 77}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyOTU4MDE5", "url": "https://github.com/metasfresh/metasfresh/pull/6950#pullrequestreview-442958019", "createdAt": "2020-07-06T10:28:43Z", "commit": {"oid": "0550d77aa600022c1b346350c8c43fdd2e2b8c76"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMDoyODo0M1rOGtRyhg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMDoyODo0M1rOGtRyhg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEzMDU2Ng==", "bodyText": "minor: u can use ImmutableList.toImmutableList()", "url": "https://github.com/metasfresh/metasfresh/pull/6950#discussion_r450130566", "createdAt": "2020-07-06T10:28:43Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/pickingV2/productsToPick/process/ProductsToPickHelper.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.pickingV2.productsToPick.process;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import de.metas.handlingunits.HuPackingInstructionsId;\n+import de.metas.handlingunits.picking.PickingCandidate;\n+import de.metas.handlingunits.picking.PickingCandidateId;\n+import de.metas.handlingunits.picking.PickingCandidateService;\n+import de.metas.handlingunits.picking.candidate.commands.PickHUResult;\n+import de.metas.handlingunits.picking.requests.PickRequest;\n+import de.metas.ui.web.pickingV2.config.PickingConfigRepositoryV2;\n+import de.metas.ui.web.pickingV2.config.PickingConfigV2;\n+import de.metas.ui.web.pickingV2.productsToPick.rows.ProductsToPickRow;\n+import de.metas.ui.web.pickingV2.productsToPick.rows.ProductsToPickRowsService;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import de.metas.util.GuavaCollectors;\n+import lombok.NonNull;\n+import org.adempiere.util.lang.ImmutablePair;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+@Component\n+class ProductsToPickHelper\n+{\n+\tprivate final PickingCandidateService pickingCandidateService;\n+\tprivate final ProductsToPickRowsService productsToPickRowsService;\n+\n+\tprivate final PickingConfigRepositoryV2 pickingConfigRepo;\n+\tprivate PickingConfigV2 _pickingConfig; // lazy\n+\n+\tprotected final PickingConfigV2 getPickingConfig()\n+\t{\n+\t\tPickingConfigV2 pickingConfig = _pickingConfig;\n+\t\tif (pickingConfig == null)\n+\t\t{\n+\t\t\tpickingConfig = _pickingConfig = pickingConfigRepo.getPickingConfig();\n+\t\t}\n+\t\treturn pickingConfig;\n+\t}\n+\n+\tProductsToPickHelper(final PickingCandidateService pickingCandidateService,\n+\t\t\tfinal ProductsToPickRowsService productsToPickRowsService,\n+\t\t\tfinal PickingConfigRepositoryV2 pickingConfigRepo)\n+\t{\n+\t\tthis.pickingCandidateService = pickingCandidateService;\n+\t\tthis.productsToPickRowsService = productsToPickRowsService;\n+\t\tthis.pickingConfigRepo = pickingConfigRepo;\n+\t}\n+\n+\t@NonNull\n+\tpublic ImmutableList<ImmutablePair<DocumentId, PickingCandidate>> pick(final List<ProductsToPickRow> selectedRows)\n+\t{\n+\t\treturn streamRowsEligibleForPicking(selectedRows)\n+\t\t\t\t.map(row -> {\n+\t\t\t\t\tfinal PickHUResult result = pickingCandidateService.pickHU(createPickRequest(row));\n+\t\t\t\t\treturn ImmutablePair.of(row.getId(), result.getPickingCandidate());\n+\t\t\t\t})\n+\t\t\t\t.collect(GuavaCollectors.toImmutableList());\n+\t}\n+\n+\tpublic ImmutableList<ImmutablePair<DocumentId, PickingCandidate>> setPackingInstruction(final List<ProductsToPickRow> selectedRows, final HuPackingInstructionsId huPackingInstructionsId)\n+\t{\n+\n+\t\tfinal Map<PickingCandidateId, DocumentId> rowIdsByPickingCandidateId = streamRowsEligibleForPacking(selectedRows)\n+\t\t\t\t.collect(ImmutableMap.toImmutableMap(ProductsToPickRow::getPickingCandidateId, ProductsToPickRow::getId));\n+\n+\t\tfinal Set<PickingCandidateId> pickingCandidateIds = rowIdsByPickingCandidateId.keySet();\n+\t\tfinal List<PickingCandidate> pickingCandidates = pickingCandidateService.setHuPackingInstructionId(pickingCandidateIds, huPackingInstructionsId);\n+\n+\t\treturn pickingCandidates.stream()\n+\t\t\t\t.map(cand -> ImmutablePair.of(rowIdsByPickingCandidateId.get(cand.getId()), cand))\n+\t\t\t\t.collect(GuavaCollectors.toImmutableList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0550d77aa600022c1b346350c8c43fdd2e2b8c76"}, "originalPosition": 98}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQyOTU5OTAy", "url": "https://github.com/metasfresh/metasfresh/pull/6950#pullrequestreview-442959902", "createdAt": "2020-07-06T10:31:48Z", "commit": {"oid": "0550d77aa600022c1b346350c8c43fdd2e2b8c76"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMDozMTo0OFrOGtR4iw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMDozMTo0OFrOGtR4iw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDEzMjEwNw==", "bodyText": "not sure if it will work, but consider:\n\nmoving all methods of this class into ProductsToPickRowsService\ndelete this class", "url": "https://github.com/metasfresh/metasfresh/pull/6950#discussion_r450132107", "createdAt": "2020-07-06T10:31:48Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/pickingV2/productsToPick/process/ProductsToPickHelper.java", "diffHunk": "@@ -0,0 +1,134 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.pickingV2.productsToPick.process;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import de.metas.handlingunits.HuPackingInstructionsId;\n+import de.metas.handlingunits.picking.PickingCandidate;\n+import de.metas.handlingunits.picking.PickingCandidateId;\n+import de.metas.handlingunits.picking.PickingCandidateService;\n+import de.metas.handlingunits.picking.candidate.commands.PickHUResult;\n+import de.metas.handlingunits.picking.requests.PickRequest;\n+import de.metas.ui.web.pickingV2.config.PickingConfigRepositoryV2;\n+import de.metas.ui.web.pickingV2.config.PickingConfigV2;\n+import de.metas.ui.web.pickingV2.productsToPick.rows.ProductsToPickRow;\n+import de.metas.ui.web.pickingV2.productsToPick.rows.ProductsToPickRowsService;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import de.metas.util.GuavaCollectors;\n+import lombok.NonNull;\n+import org.adempiere.util.lang.ImmutablePair;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.stream.Stream;\n+\n+@Component\n+class ProductsToPickHelper", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0550d77aa600022c1b346350c8c43fdd2e2b8c76"}, "originalPosition": 49}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7d09e7d5bc6bf42cdd501360b837d8bea4675d16", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/7d09e7d5bc6bf42cdd501360b837d8bea4675d16", "committedDate": "2020-07-06T10:39:11Z", "message": "More fixes\n\nhttps://github.com/metasfresh/metasfresh/issues/6949"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3089e3158da0410429b416a430a3ef0dd87f9afa", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/3089e3158da0410429b416a430a3ef0dd87f9afa", "committedDate": "2020-07-06T10:56:46Z", "message": "Extract `ImmutablePair<DocumentId, PickingCandidate>` to own class\n\nhttps://github.com/metasfresh/metasfresh/issues/6949"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0e29cd005bc8b261cd7189e1cd9a36e5ab73ec69", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/0e29cd005bc8b261cd7189e1cd9a36e5ab73ec69", "committedDate": "2020-07-06T11:04:09Z", "message": "Remove `ProductsToPickHelper` and move all methods to `ProductsToPickRowsService`\n\nhttps://github.com/metasfresh/metasfresh/issues/6949"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "879d8a3d998033d0a7a5ed2840e16c72ace64d1f", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/879d8a3d998033d0a7a5ed2840e16c72ace64d1f", "committedDate": "2020-07-06T11:06:45Z", "message": "Refactoring row update\n\nhttps://github.com/metasfresh/metasfresh/issues/6949"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMDQxNDMx", "url": "https://github.com/metasfresh/metasfresh/pull/6950#pullrequestreview-443041431", "createdAt": "2020-07-06T12:45:23Z", "commit": {"oid": "879d8a3d998033d0a7a5ed2840e16c72ace64d1f"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMjo0NToyM1rOGtVuMw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxMzowMDoyMVrOGtWO7A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDE5NDk5NQ==", "bodyText": "pls extract Services.get(IHandlingUnitsDAO.class) to be a field", "url": "https://github.com/metasfresh/metasfresh/pull/6950#discussion_r450194995", "createdAt": "2020-07-06T12:45:23Z", "author": {"login": "metas-ts"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/pickingV2/productsToPick/process/ProductsToPick_PickAndPackSelected.java", "diffHunk": "@@ -0,0 +1,105 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.pickingV2.productsToPick.process;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.handlingunits.HuPackingInstructionsId;\n+import de.metas.handlingunits.IHandlingUnitsDAO;\n+import de.metas.handlingunits.model.I_M_HU_PI;\n+import de.metas.i18n.AdMessageKey;\n+import de.metas.process.ProcessPreconditionsResolution;\n+import de.metas.process.RunOutOfTrx;\n+import de.metas.ui.web.pickingV2.productsToPick.rows.ProductsToPickRowsService;\n+import de.metas.ui.web.pickingV2.productsToPick.rows.WebuiPickHUResult;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.compiere.SpringContextHolder;\n+\n+public class ProductsToPick_PickAndPackSelected extends ProductsToPickViewBasedProcess\n+{\n+\tprivate final ProductsToPickRowsService rowsService = SpringContextHolder.instance.getBean(ProductsToPickRowsService.class);\n+\n+\tprivate final AdMessageKey MSG_SET_DEFAULT_PACKING_INSTRUCTION = AdMessageKey.of(\"de.metas.ui.web.pickingV2.productsToPick.process.ProductsToPick_PickAndPackSelected.SetDefaultPackingInstruction\");\n+\n+\t@Override\n+\tprotected ProcessPreconditionsResolution checkPreconditionsApplicable()\n+\t{\n+\t\tif (!isPickerProfile())\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution.rejectWithInternalReason(\"only picker shall pick\");\n+\t\t}\n+\n+\t\tif (!rowsService.anyRowsEligibleForPicking(getSelectedRows()))\n+\t\t{\n+\t\t\treturn ProcessPreconditionsResolution.rejectWithInternalReason(\"select only rows that can be picked\");\n+\t\t}\n+\n+\t\treturn ProcessPreconditionsResolution.accept();\n+\t}\n+\n+\t@Override\n+\t@RunOutOfTrx\n+\tprotected String doIt()\n+\t{\n+\t\tensureDefaultPackingInstructionExists();\n+\t\tpick();\n+\t\tpack();\n+\n+\t\tinvalidateView();\n+\n+\t\treturn MSG_OK;\n+\t}\n+\n+\tprivate void pick()\n+\t{\n+\t\tfinal ImmutableList<WebuiPickHUResult> result = rowsService.pick(getSelectedRows());\n+\n+\t\tupdateViewRowFromPickingCandidate(result);\n+\t}\n+\n+\tprivate void pack()\n+\t{\n+\t\tfinal ImmutableList<WebuiPickHUResult> result = rowsService.setPackingInstruction(getSelectedRows(), getHuPackingInstructionsId());\n+\n+\t\tupdateViewRowFromPickingCandidate(result);\n+\t}\n+\n+\t@NonNull\n+\tprivate HuPackingInstructionsId getHuPackingInstructionsId()\n+\t{\n+\t\tfinal I_M_HU_PI defaultPIForPicking = Services.get(IHandlingUnitsDAO.class).retrievePIDefaultForPicking();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879d8a3d998033d0a7a5ed2840e16c72ace64d1f"}, "originalPosition": 91}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIwMDQ2MA==", "bodyText": "we usually ignore inactive records and in the AD_TableIndex-UC's whereclauses we have IsActive='Y'.\nThat way, some old stuff can be deactivated and doesn't play any role anymore and is also left untouched.\nThere are situations where we need also inactive records, but here I don't see why we should deviate from the default approach", "url": "https://github.com/metasfresh/metasfresh/pull/6950#discussion_r450200460", "createdAt": "2020-07-06T12:55:14Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/impl/HandlingUnitsDAO.java", "diffHunk": "@@ -487,6 +487,17 @@ public I_M_HU_Item retrieveAggregatedItemOrNull(final I_M_HU hu, final I_M_HU_PI\n \t\treturn Collections.unmodifiableList(piItems);\n \t}\n \n+\t@Override\n+\t@Nullable\n+\tpublic I_M_HU_PI retrievePIDefaultForPicking()\n+\t{\n+\t\treturn Services.get(IQueryBL.class).createQueryBuilder(I_M_HU_PI.class)\n+\t\t\t\t.addEqualsFilter(I_M_HU_PI.COLUMNNAME_IsDefaultForPicking, true)\n+\t\t\t\t.create()\n+\t\t\t\t.setOnlyActiveRecords(false) // also return inactive PIs", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879d8a3d998033d0a7a5ed2840e16c72ace64d1f"}, "originalPosition": 11}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDIwMzM3Mg==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tif (!newDefault.isDefaultForPicking())\n          \n          \n            \n            \t\t{\n          \n          \n            \n            \t\t\treturn;\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \n          \n          \n            \n            \t\tfinal I_M_HU_PI previousDefault = Services.get(IHandlingUnitsDAO.class).retrievePIDefaultForPicking();\n          \n          \n            \n            \t\tif (previousDefault != null)\n          \n          \n            \n            \t\t{\n          \n          \n            \n            \t\t\tpreviousDefault.setIsDefaultForPicking(false);\n          \n          \n            \n            \t\t\tInterfaceWrapperHelper.save(previousDefault);\n          \n          \n            \n            \t\t}\n          \n          \n            \n            \t\ttry (final MDCCloseable ignored = TableRecordMDC.putTableRecordReference(newDefault))\n          \n          \n            \n            \t\t{\n          \n          \n            \n            \t\t\tif (!newDefault.isDefaultForPicking())\n          \n          \n            \n            \t\t\t{\n          \n          \n            \n            \t\t\t\treturn;\n          \n          \n            \n            \t\t\t}\n          \n          \n            \n            \n          \n          \n            \n            \t\t\tfinal I_M_HU_PI previousDefault = Services.get(IHandlingUnitsDAO.class).retrievePIDefaultForPicking();\n          \n          \n            \n            \t\t\tif (previousDefault != null)\n          \n          \n            \n            \t\t\t{\n          \n          \n            \n            \t\t\t\tlogger.debug(\"M_HU_PI={} is now IsDefaultForPicking; -> Change previousDefault M_HU_PI={} to IsDefaultForPicking='N'\",\n          \n          \n            \n            \t\t\t\t\t\tnewDefault.getM_HU_PI_ID(), previousDefault.getM_HU_PI_ID());\n          \n          \n            \n            \t\t\t\tpreviousDefault.setIsDefaultForPicking(false);\n          \n          \n            \n            \t\t\t\tInterfaceWrapperHelper.save(previousDefault);\n          \n          \n            \n            \t\t\t}\n          \n          \n            \n            \t\t}", "url": "https://github.com/metasfresh/metasfresh/pull/6950#discussion_r450203372", "createdAt": "2020-07-06T13:00:21Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/model/validator/M_HU_PI.java", "diffHunk": "@@ -47,4 +46,22 @@ public void onDeleteMHUPI(final I_M_HU_PI pi)\n \t\t\tInterfaceWrapperHelper.delete(version);\n \t\t}\n \t}\n+\n+\t@ModelChange(timings = { ModelValidator.TYPE_BEFORE_NEW, ModelValidator.TYPE_BEFORE_CHANGE },\n+\t\t\tifColumnsChanged = I_M_HU_PI.COLUMNNAME_IsDefaultForPicking\n+\t)\n+\tpublic void ensureOnlyOneDefaultForPicking(@NonNull final I_M_HU_PI newDefault)\n+\t{\n+\t\tif (!newDefault.isDefaultForPicking())\n+\t\t{\n+\t\t\treturn;\n+\t\t}\n+\n+\t\tfinal I_M_HU_PI previousDefault = Services.get(IHandlingUnitsDAO.class).retrievePIDefaultForPicking();\n+\t\tif (previousDefault != null)\n+\t\t{\n+\t\t\tpreviousDefault.setIsDefaultForPicking(false);\n+\t\t\tInterfaceWrapperHelper.save(previousDefault);\n+\t\t}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879d8a3d998033d0a7a5ed2840e16c72ace64d1f"}, "originalPosition": 59}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMjMxMTE2", "url": "https://github.com/metasfresh/metasfresh/pull/6950#pullrequestreview-443231116", "createdAt": "2020-07-06T16:29:22Z", "commit": {"oid": "3089e3158da0410429b416a430a3ef0dd87f9afa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNjoyOToyMlrOGteoQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNjoyOToyMlrOGteoQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM0MDkyOQ==", "bodyText": "@NonNull", "url": "https://github.com/metasfresh/metasfresh/pull/6950#discussion_r450340929", "createdAt": "2020-07-06T16:29:22Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/pickingV2/productsToPick/process/WebuiPickHUResult.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.pickingV2.productsToPick.process;\n+\n+import de.metas.handlingunits.picking.PickingCandidate;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import lombok.Value;\n+\n+@Value(staticConstructor = \"of\")\n+public class WebuiPickHUResult\n+{\n+\tDocumentId documentId;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3089e3158da0410429b416a430a3ef0dd87f9afa"}, "originalPosition": 32}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMjMxMTk0", "url": "https://github.com/metasfresh/metasfresh/pull/6950#pullrequestreview-443231194", "createdAt": "2020-07-06T16:29:29Z", "commit": {"oid": "3089e3158da0410429b416a430a3ef0dd87f9afa"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNjoyOToyOVrOGteofA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNjoyOToyOVrOGteofA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM0MDk4OA==", "bodyText": "@NonNull", "url": "https://github.com/metasfresh/metasfresh/pull/6950#discussion_r450340988", "createdAt": "2020-07-06T16:29:29Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/pickingV2/productsToPick/process/WebuiPickHUResult.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.pickingV2.productsToPick.process;\n+\n+import de.metas.handlingunits.picking.PickingCandidate;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import lombok.Value;\n+\n+@Value(staticConstructor = \"of\")\n+public class WebuiPickHUResult\n+{\n+\tDocumentId documentId;\n+\tPickingCandidate pickingCandidate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "3089e3158da0410429b416a430a3ef0dd87f9afa"}, "originalPosition": 33}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzMjMxODc3", "url": "https://github.com/metasfresh/metasfresh/pull/6950#pullrequestreview-443231877", "createdAt": "2020-07-06T16:30:22Z", "commit": {"oid": "879d8a3d998033d0a7a5ed2840e16c72ace64d1f"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNjozMDoyM1rOGteqkw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wNlQxNjozMDoyM1rOGteqkw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ1MDM0MTUyMw==", "bodyText": "mark those fields as @NonNull", "url": "https://github.com/metasfresh/metasfresh/pull/6950#discussion_r450341523", "createdAt": "2020-07-06T16:30:23Z", "author": {"login": "teosarca"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/pickingV2/productsToPick/rows/WebuiPickHUResult.java", "diffHunk": "@@ -0,0 +1,35 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.pickingV2.productsToPick.rows;\n+\n+import de.metas.handlingunits.picking.PickingCandidate;\n+import de.metas.ui.web.window.datatypes.DocumentId;\n+import lombok.Value;\n+\n+@Value(staticConstructor = \"of\")\n+public class WebuiPickHUResult\n+{\n+\tDocumentId documentId;\n+\tPickingCandidate pickingCandidate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "879d8a3d998033d0a7a5ed2840e16c72ace64d1f"}, "originalPosition": 33}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cd8784d9fe54b42e243cd31b2169d1fdeed6c827", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/cd8784d9fe54b42e243cd31b2169d1fdeed6c827", "committedDate": "2020-07-07T04:33:30Z", "message": "M_HU_PI.IsDefaultForPicking: ignore active records for UQ constraint\n\nhttps://github.com/metasfresh/metasfresh/issues/6949"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "878263526ab03d70e7a08b7c38103e1cbddad182", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/878263526ab03d70e7a08b7c38103e1cbddad182", "committedDate": "2020-07-07T04:34:44Z", "message": "Introduce `IHandlingUnitsDAO.save(I_M_HU_PI)`\n\nhttps://github.com/metasfresh/metasfresh/issues/6949"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe3cc5966df036589adf696b97c3614fab607690", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/fe3cc5966df036589adf696b97c3614fab607690", "committedDate": "2020-07-07T04:35:23Z", "message": "Log changing the default for picking M_HU_PI\n\nhttps://github.com/metasfresh/metasfresh/issues/6949"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3d58cb8a96038ebb008faa9b4a8337c3e4092541", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/3d58cb8a96038ebb008faa9b4a8337c3e4092541", "committedDate": "2020-07-07T04:35:38Z", "message": "Add nullability\n\nhttps://github.com/metasfresh/metasfresh/issues/6949"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDQzNTYzMTc4", "url": "https://github.com/metasfresh/metasfresh/pull/6950#pullrequestreview-443563178", "createdAt": "2020-07-07T05:01:05Z", "commit": {"oid": "3d58cb8a96038ebb008faa9b4a8337c3e4092541"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3310, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}