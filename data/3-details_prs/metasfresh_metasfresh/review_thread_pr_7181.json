{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcyMzkxMjM0", "number": 7181, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwOTozMjoyOFrOEbfBUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwOTozMjoyOFrOEbfBUg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk3MjU1MjUwOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/ordercandidate/spi/impl/OLCandProductFromPIIPvalidator.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwOTozMjoyOFrOHFcPKg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yNFQwOTozMjoyOFrOHFcPKg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3NTQ2NzU2Mg==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\tLoggables.withLogger(logger, Level.DEBUG).addLog(\"Supplement missing C_OLCand.M_Product_ID = {} from M_HU_PI_Item_Product_ID=\", huPIItemProduct.getM_Product_ID(), huPIItemProduct.getM_HU_PI_Item_Product_ID());\n          \n          \n            \n            \t\t\t\tLoggables.withLogger(logger, Level.DEBUG).addLog(\"Supplement missing C_OLCand.M_Product_ID = {} from M_HU_PI_Item_Product_ID={}\", huPIItemProduct.getM_Product_ID(), huPIItemProduct.getM_HU_PI_Item_Product_ID());", "url": "https://github.com/metasfresh/metasfresh/pull/7181#discussion_r475467562", "createdAt": "2020-08-24T09:32:28Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/ordercandidate/spi/impl/OLCandProductFromPIIPvalidator.java", "diffHunk": "@@ -0,0 +1,74 @@\n+/*\n+ * #%L\n+ * de.metas.handlingunits.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.handlingunits.ordercandidate.spi.impl;\n+\n+import ch.qos.logback.classic.Level;\n+import de.metas.handlingunits.model.I_M_HU_PI_Item_Product;\n+import de.metas.logging.LogManager;\n+import de.metas.ordercandidate.api.IOLCandEffectiveValuesBL;\n+import de.metas.ordercandidate.model.I_C_OLCand;\n+import de.metas.ordercandidate.spi.IOLCandValidator;\n+import de.metas.product.ProductId;\n+import de.metas.util.Loggables;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.slf4j.Logger;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class OLCandProductFromPIIPvalidator implements IOLCandValidator\n+{\n+\tprivate final static transient Logger logger = LogManager.getLogger(OLCandProductFromPIIPvalidator.class);\n+\n+\tprivate final IOLCandEffectiveValuesBL olCandEffectiveValuesBL = Services.get(IOLCandEffectiveValuesBL.class);\n+\n+\t@Override\n+\tpublic int getSeqNo()\n+\t{\n+\t\treturn 10;\n+\t}\n+\n+\t@Override\n+\tpublic void validate(@NonNull final I_C_OLCand olCand)\n+\t{\n+\t\tfinal ProductId productId = olCandEffectiveValuesBL.getM_Product_Effective_ID(olCand);\n+\n+\t\tfinal I_M_HU_PI_Item_Product huPIItemProduct = OLCandPIIPUtil.extractHUPIItemProductOrNull(olCand);\n+\t\tif (huPIItemProduct != null)\n+\t\t{\n+\t\t\tif (productId == null)\n+\t\t\t{\n+\t\t\t\tLoggables.withLogger(logger, Level.DEBUG).addLog(\"Supplement missing C_OLCand.M_Product_ID = {} from M_HU_PI_Item_Product_ID=\", huPIItemProduct.getM_Product_ID(), huPIItemProduct.getM_HU_PI_Item_Product_ID());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "a16999b734af37f265c0e19f8376d56ffd17c480"}, "originalPosition": 62}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1235, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}