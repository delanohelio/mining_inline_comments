{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMTcxNTc0", "number": 6828, "title": "Extend Invoice reversal API to return affected ICs", "bodyText": "#6827", "createdAt": "2020-06-11T15:40:25Z", "url": "https://github.com/metasfresh/metasfresh/pull/6828", "merged": true, "mergeCommit": {"oid": "b8f2961ff028dea239eb69b928c9a0639a9128cd"}, "closed": true, "closedAt": "2020-06-12T09:56:28Z", "author": {"login": "pvpurcarcosmin"}, "timelineItems": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcqQIFogH2gAyNDMzMTcxNTc0OjMzZWQwODYwNDMxMWRlYTA5OTRhMDVmYzE4ZGNhY2EyMGRjYmZlOTM=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcqf1XhgFqTQyOTYxMzUyOA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "33ed08604311dea0994a05fc18dcaca20dcbfe93", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/33ed08604311dea0994a05fc18dcaca20dcbfe93", "committedDate": "2020-06-11T15:38:13Z", "message": "Extend Invoice reversal API to return affected ICs\nhttps://github.com/metasfresh/metasfresh/issues/6827"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NTA4NTkx", "url": "https://github.com/metasfresh/metasfresh/pull/6828#pullrequestreview-429508591", "createdAt": "2020-06-12T07:06:16Z", "commit": {"oid": "33ed08604311dea0994a05fc18dcaca20dcbfe93"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNzowNjoxNlrOGi5X5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwODoxNDoxMlrOGi7L6w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI0NDc3Mw==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tList<I_C_Invoice_Candidate> retrieveInvoiceCandidates(@NonNull final InvoiceId invoiceId);\n          \n          \n            \n            \tList<I_C_Invoice_Candidate> retrieveInvoiceCandidates(@NonNull InvoiceId invoiceId);", "url": "https://github.com/metasfresh/metasfresh/pull/6828#discussion_r439244773", "createdAt": "2020-06-12T07:06:16Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/api/IInvoiceCandDAO.java", "diffHunk": "@@ -85,6 +85,8 @@\n \n \tList<I_C_Invoice_Candidate> retrieveIcForIl(I_C_InvoiceLine invoiceLine);\n \n+\tList<I_C_Invoice_Candidate> retrieveInvoiceCandidates(@NonNull final InvoiceId invoiceId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33ed08604311dea0994a05fc18dcaca20dcbfe93"}, "originalPosition": 64}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3MzgxMA==", "bodyText": "Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tfinal I_C_Invoice invoice = load(invoiceId, I_C_Invoice.class);\n          \n          \n            \n            \n          \n          \n            \n            \t\tfinal IQuery<I_C_Invoice_Line_Alloc> invoiceLineAllocQuery =\n          \n          \n            \n            \t\t\t\tqueryBL.createQueryBuilder(I_C_InvoiceLine.class, invoice)\n          \n          \n            \n            \t\t\t\t\t\t.addEqualsFilter(I_C_InvoiceLine.COLUMNNAME_C_Invoice_ID, invoice.getC_Invoice_ID())\n          \n          \n            \n            \t\tfinal IQuery<I_C_Invoice_Line_Alloc> invoiceLineAllocQuery =\n          \n          \n            \n            \t\t\t\tqueryBL.createQueryBuilder(I_C_InvoiceLine.class, invoice)\n          \n          \n            \n            \t\t\t\t\t\t.addEqualsFilter(I_C_InvoiceLine.COLUMNNAME_C_Invoice_ID, invoiceId)\n          \n      \n    \n    \n  \n\n\nthe equals filter can handle RepoIdAwares\nwe don't need to pass the invoice a context provider; the query-builder can get the thread-local current transaction or create a \"local\" one on the fly", "url": "https://github.com/metasfresh/metasfresh/pull/6828#discussion_r439273810", "createdAt": "2020-06-12T08:12:47Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/api/impl/InvoiceCandDAO.java", "diffHunk": "@@ -573,6 +572,30 @@ public boolean isAvoidRecreate(final I_C_Invoice_Candidate ic)\n \t\t\t\t.addColumn(I_C_Invoice_Candidate.COLUMN_C_Invoice_Candidate_ID);\n \n \t\treturn icQueryBuilder\n+\t\t\t\t.create()\n+\t\t\t\t.list();//\n+\t}\n+\n+\t@NonNull\n+\tpublic List<I_C_Invoice_Candidate> retrieveInvoiceCandidates(@NonNull final InvoiceId invoiceId)\n+\t{\n+\t\tfinal I_C_Invoice invoice = load(invoiceId, I_C_Invoice.class);\n+\n+\t\tfinal IQuery<I_C_Invoice_Line_Alloc> invoiceLineAllocQuery =\n+\t\t\t\tqueryBL.createQueryBuilder(I_C_InvoiceLine.class, invoice)\n+\t\t\t\t\t\t.addEqualsFilter(I_C_InvoiceLine.COLUMNNAME_C_Invoice_ID, invoice.getC_Invoice_ID())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33ed08604311dea0994a05fc18dcaca20dcbfe93"}, "originalPosition": 307}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3NDQ3NQ==", "bodyText": "it's OK like this but you might (didn't check) also use andCollect to get from I_C_Invoice_Line_Alloc to I_C_Invoice_Candidate\nfor next time maybe..", "url": "https://github.com/metasfresh/metasfresh/pull/6828#discussion_r439274475", "createdAt": "2020-06-12T08:14:12Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/api/impl/InvoiceCandDAO.java", "diffHunk": "@@ -573,6 +572,30 @@ public boolean isAvoidRecreate(final I_C_Invoice_Candidate ic)\n \t\t\t\t.addColumn(I_C_Invoice_Candidate.COLUMN_C_Invoice_Candidate_ID);\n \n \t\treturn icQueryBuilder\n+\t\t\t\t.create()\n+\t\t\t\t.list();//\n+\t}\n+\n+\t@NonNull\n+\tpublic List<I_C_Invoice_Candidate> retrieveInvoiceCandidates(@NonNull final InvoiceId invoiceId)\n+\t{\n+\t\tfinal I_C_Invoice invoice = load(invoiceId, I_C_Invoice.class);\n+\n+\t\tfinal IQuery<I_C_Invoice_Line_Alloc> invoiceLineAllocQuery =\n+\t\t\t\tqueryBL.createQueryBuilder(I_C_InvoiceLine.class, invoice)\n+\t\t\t\t\t\t.addEqualsFilter(I_C_InvoiceLine.COLUMNNAME_C_Invoice_ID, invoice.getC_Invoice_ID())\n+\t\t\t\t\t\t//collect invoice line alloc\n+\t\t\t\t\t\t.andCollectChildren(I_C_Invoice_Line_Alloc.COLUMN_C_InvoiceLine_ID)\n+\t\t\t\t\t\t.addOnlyActiveRecordsFilter()\n+\t\t\t\t\t\t.create();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33ed08604311dea0994a05fc18dcaca20dcbfe93"}, "originalPosition": 311}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "2cdfd09f3ceb3acf317b7a298bc3fb5ade3cad11", "author": {"user": {"login": "pvpurcarcosmin", "name": null}}, "url": "https://github.com/metasfresh/metasfresh/commit/2cdfd09f3ceb3acf317b7a298bc3fb5ade3cad11", "committedDate": "2020-06-12T09:53:34Z", "message": "req changes\nhttps://github.com/metasfresh/metasfresh/issues/6827"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NDI5NjEzNTI4", "url": "https://github.com/metasfresh/metasfresh/pull/6828#pullrequestreview-429613528", "createdAt": "2020-06-12T09:56:15Z", "commit": {"oid": "2cdfd09f3ceb3acf317b7a298bc3fb5ade3cad11"}, "state": "APPROVED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3374, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}