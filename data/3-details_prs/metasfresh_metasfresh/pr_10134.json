{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTA2OTYzODc0", "number": 10134, "title": "Refactor Raw/MasterWidget", "bodyText": "Also cleaned up the table events madness.\nRelated to #7126", "createdAt": "2020-10-20T17:05:39Z", "url": "https://github.com/metasfresh/metasfresh/pull/10134", "merged": true, "mergeCommit": {"oid": "85b3b90ab22e75268cbd17fad8d3f5de7f46dc2f"}, "closed": true, "closedAt": "2020-10-26T08:15:08Z", "author": {"login": "siemiatj"}, "timelineItems": {"totalCount": 33, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdVSBVyAFqTUxNTQwOTI1Ng==", "endCursor": "Y3Vyc29yOnYyOpPPAAABdVZEivAH2gAyNTA2OTYzODc0OjgyNjdjNjU0MjU0Mjc4ODdkMDBhMGM4NWMyNmE0NTU5ZTQ4NThlODk=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTE1NDA5MjU2", "url": "https://github.com/metasfresh/metasfresh/pull/10134#pullrequestreview-515409256", "createdAt": "2020-10-23T07:28:50Z", "commit": {"oid": "fe016765f9489e37e751eb58465acf112728d7e3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 11, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNzoyODo1MFrOHnB7DQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMC0yM1QwNzo1NDoyMFrOHnCv2g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY4ODAxMw==", "bodyText": "const newState = {   activeCellName: property  };", "url": "https://github.com/metasfresh/metasfresh/pull/10134#discussion_r510688013", "createdAt": "2020-10-23T07:28:50Z", "author": {"login": "petrican"}, "path": "frontend/src/components/table/TableRow.js", "diffHunk": "@@ -400,22 +408,21 @@ class TableRow extends PureComponent {\n    * @param {function} [cb] - callback function\n    */\n   _focusCell = (property, cb) => {\n-    const { activeCell } = this.state;\n+    const { activeCell, activeCellName } = this.state;\n     const elem = document.activeElement;\n \n-    if (\n-      (activeCell !== elem && !elem.className.includes('js-input-field')) ||\n-      cb\n-    ) {\n-      this.setState(\n-        {\n-          activeCell: elem,\n-          activeCellName: property,\n-        },\n-        () => {\n-          cb && cb();\n-        }\n-      );\n+    if (property !== activeCellName || cb) {\n+      const newState = {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe016765f9489e37e751eb58465acf112728d7e3"}, "originalPosition": 122}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY4OTM2MA==", "bodyText": "rm debug comments", "url": "https://github.com/metasfresh/metasfresh/pull/10134#discussion_r510689360", "createdAt": "2020-10-23T07:31:23Z", "author": {"login": "petrican"}, "path": "frontend/src/components/widget/Lookup/Lookup.js", "diffHunk": "@@ -238,6 +238,8 @@ class Lookup extends Component {\n   };\n \n   handleListBlur = (field) => {\n+    // console.log('handleListBlur: ', field)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe016765f9489e37e751eb58465acf112728d7e3"}, "originalPosition": 4}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY5MDIxNg==", "bodyText": "componentDidMount = () => (this.mounted = true);", "url": "https://github.com/metasfresh/metasfresh/pull/10134#discussion_r510690216", "createdAt": "2020-10-23T07:33:12Z", "author": {"login": "petrican"}, "path": "frontend/src/components/widget/MasterWidget.js", "diffHunk": "@@ -34,6 +36,14 @@ class MasterWidget extends PureComponent {\n     };\n   }\n \n+  componentDidMount = () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe016765f9489e37e751eb58465acf112728d7e3"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY5MDQxMw==", "bodyText": "componentWillMount = () => (this.mounted = false);", "url": "https://github.com/metasfresh/metasfresh/pull/10134#discussion_r510690413", "createdAt": "2020-10-23T07:33:37Z", "author": {"login": "petrican"}, "path": "frontend/src/components/widget/MasterWidget.js", "diffHunk": "@@ -34,6 +36,14 @@ class MasterWidget extends PureComponent {\n     };\n   }\n \n+  componentDidMount = () => {\n+    this.mounted = true;\n+  };\n+\n+  componentWillUnmount = () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe016765f9489e37e751eb58465acf112728d7e3"}, "originalPosition": 28}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY5MTEyOA==", "bodyText": "handleBackDropLock && handleBackdropLock(val);", "url": "https://github.com/metasfresh/metasfresh/pull/10134#discussion_r510691128", "createdAt": "2020-10-23T07:35:01Z", "author": {"login": "petrican"}, "path": "frontend/src/components/widget/MasterWidget.js", "diffHunk": "@@ -232,24 +244,30 @@ class MasterWidget extends PureComponent {\n     onBlurWidget && onBlurWidget(fieldName);\n   };\n \n-  /**\n-   * @method render\n-   * @summary ToDo: Describe the method.\n-   */\n+  handleFocus = () => this.handleFocusFn(true);\n+\n+  handleBlur = () => this.handleFocusFn(false);\n+\n+  handleFocusFn = (val) => {\n+    const { handleBackdropLock } = this.props;\n+\n+    if (handleBackdropLock) {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe016765f9489e37e751eb58465acf112728d7e3"}, "originalPosition": 79}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY5Mzg5Mw==", "bodyText": "This is dup. See line 183-185. I would add this in a function", "url": "https://github.com/metasfresh/metasfresh/pull/10134#discussion_r510693893", "createdAt": "2020-10-23T07:40:26Z", "author": {"login": "petrican"}, "path": "frontend/src/components/widget/RawWidget.js", "diffHunk": "@@ -210,22 +195,30 @@ export class RawWidget extends Component {\n   updateTypedCharacters = (typedText) => {\n     const { fieldName } = this.props;\n     let existingCharsTyped = { ...this.state.charsTyped };\n+\n     existingCharsTyped[fieldName] = typedText.length;\n     this.setState({ charsTyped: existingCharsTyped });\n-    return true;\n   };\n \n   /**\n    * @method handleKeyDown\n    * @summary key handler for the widgets. For number fields we're suppressing up/down\n    *          arrows to enable table row navigation\n-   * @param {*} e\n-   * @param {*} property\n-   * @param {*} value\n+   * @param {*} e - DOM event\n    */\n-  handleKeyDown = (e, property, value) => {\n-    const { lastFormField, widgetType, closeTableField } = this.props;\n+  handleKeyDown = (e) => {\n+    const {\n+      lastFormField,\n+      widgetType,\n+      filterWidget,\n+      fields,\n+      closeTableField,\n+    } = this.props;\n+    const value = e.target.value;\n     const { key } = e;\n+    const widgetField = filterWidget", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe016765f9489e37e751eb58465acf112728d7e3"}, "originalPosition": 250}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY5NDQyNw==", "bodyText": "return (key === 'Tab') ? this.handleBlur(e) : this.handlePatch(widgetField, value);", "url": "https://github.com/metasfresh/metasfresh/pull/10134#discussion_r510694427", "createdAt": "2020-10-23T07:41:26Z", "author": {"login": "petrican"}, "path": "frontend/src/components/widget/RawWidget.js", "diffHunk": "@@ -244,53 +237,37 @@ export class RawWidget extends Component {\n       closeTableField();\n       e.preventDefault();\n \n-      this.handleBlur();\n-\n-      return this.handlePatch(property, value, null, null, true);\n+      return this.handlePatch(widgetField, value, null, null, true);\n     }\n \n     if ((key === 'Enter' || key === 'Tab') && !e.shiftKey) {\n       if (key === 'Enter' && !lastFormField) {\n         e.preventDefault();\n       }\n-      return this.handlePatch(property, value);\n+\n+      if (key === 'Tab') {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe016765f9489e37e751eb58465acf112728d7e3"}, "originalPosition": 272}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY5NTA5Mg==", "bodyText": "here too I would use one single fnct with params to avoid dup code. Shrinks the overall file code", "url": "https://github.com/metasfresh/metasfresh/pull/10134#discussion_r510695092", "createdAt": "2020-10-23T07:42:35Z", "author": {"login": "petrican"}, "path": "frontend/src/components/widget/RawWidget.js", "diffHunk": "@@ -244,53 +237,37 @@ export class RawWidget extends Component {\n       closeTableField();\n       e.preventDefault();\n \n-      this.handleBlur();\n-\n-      return this.handlePatch(property, value, null, null, true);\n+      return this.handlePatch(widgetField, value, null, null, true);\n     }\n \n     if ((key === 'Enter' || key === 'Tab') && !e.shiftKey) {\n       if (key === 'Enter' && !lastFormField) {\n         e.preventDefault();\n       }\n-      return this.handlePatch(property, value);\n+\n+      if (key === 'Tab') {\n+        return this.handleBlur(e);\n+      } else {\n+        return this.handlePatch(widgetField, value);\n+      }\n     }\n   };\n \n   /**\n-   * @method willPatch\n-   * @summary Checks if the value has actually changed between what was cached before.\n-   * @param {*} property\n-   * @param {*} value\n-   * @param {*} valueTo\n+   * @method handleChange\n+   * @summary onChange event handler\n+   * @param {*} e - DOM event\n    */\n-  willPatch = (property, value, valueTo) => {\n-    const { widgetData } = this.props;\n-    const { cachedValue } = this.state;\n-\n-    // if there's no widget value, then nothing could've changed. Unless\n-    // it's a widget for actions (think ActionButton)\n-    const isValue =\n-      widgetData[0].value !== undefined ||\n-      (widgetData[0].status && widgetData[0].status.value !== undefined);\n-    let fieldData = widgetData.find((widget) => widget.field === property);\n-    if (!fieldData) {\n-      fieldData = widgetData[0];\n-    }\n-\n-    let allowPatching =\n-      (isValue &&\n-        (JSON.stringify(fieldData.value) != JSON.stringify(value) ||\n-          JSON.stringify(fieldData.valueTo) != JSON.stringify(valueTo))) ||\n-      JSON.stringify(cachedValue) != JSON.stringify(value) ||\n-      // clear field that had it's cachedValue nulled before\n-      (cachedValue === null && value === null);\n+  handleChange = (e) => {\n+    const { handleChange, filterWidget, fields } = this.props;\n+    const widgetField = filterWidget", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe016765f9489e37e751eb58465acf112728d7e3"}, "originalPosition": 313}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY5Njc2Mw==", "bodyText": "showErrorPopup = () => this.setState({ errorPopup: true });", "url": "https://github.com/metasfresh/metasfresh/pull/10134#discussion_r510696763", "createdAt": "2020-10-23T07:45:43Z", "author": {"login": "petrican"}, "path": "frontend/src/components/widget/RawWidget.js", "diffHunk": "@@ -353,19 +343,38 @@ export class RawWidget extends Component {\n   };\n \n   /**\n-   * @method handleErrorPopup\n-   * @summary ToDo: Describe the method.\n-   * @param {*} value\n+   * @method setWidgetType\n+   * @summary used for password fields, when user wants to reveal the typed password\n+   *\n+   * @param {string} type - toggles between text/password\n+   */\n+  setWidgetType = (type) => {\n+    this.rawWidget.type = type;\n+  };\n+\n+  /**\n+   * @method showErrorPopup\n+   * @summary shows error message on mouse over\n    */\n-  handleErrorPopup = (value) => {\n+  showErrorPopup = () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe016765f9489e37e751eb58465acf112728d7e3"}, "originalPosition": 373}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDY5NzQ4MQ==", "bodyText": "hideErrorPopup = () => this.setState({ errorPopup: false });", "url": "https://github.com/metasfresh/metasfresh/pull/10134#discussion_r510697481", "createdAt": "2020-10-23T07:46:58Z", "author": {"login": "petrican"}, "path": "frontend/src/components/widget/RawWidget.js", "diffHunk": "@@ -353,19 +343,38 @@ export class RawWidget extends Component {\n   };\n \n   /**\n-   * @method handleErrorPopup\n-   * @summary ToDo: Describe the method.\n-   * @param {*} value\n+   * @method setWidgetType\n+   * @summary used for password fields, when user wants to reveal the typed password\n+   *\n+   * @param {string} type - toggles between text/password\n+   */\n+  setWidgetType = (type) => {\n+    this.rawWidget.type = type;\n+  };\n+\n+  /**\n+   * @method showErrorPopup\n+   * @summary shows error message on mouse over\n    */\n-  handleErrorPopup = (value) => {\n+  showErrorPopup = () => {\n     this.setState({\n-      errorPopup: value,\n+      errorPopup: true,\n+    });\n+  };\n+\n+  /**\n+   * @method hideErrorPopup\n+   * @summary hides error message on mouse out\n+   */\n+  hideErrorPopup = () => {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe016765f9489e37e751eb58465acf112728d7e3"}, "originalPosition": 384}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUxMDcwMTUzMA==", "bodyText": "I would put this in a separate  component", "url": "https://github.com/metasfresh/metasfresh/pull/10134#discussion_r510701530", "createdAt": "2020-10-23T07:54:20Z", "author": {"login": "petrican"}, "path": "frontend/src/components/widget/WidgetRenderer.js", "diffHunk": "@@ -0,0 +1,640 @@\n+import React, { Fragment, PureComponent } from 'react';\n+import Moment from 'moment';\n+import classnames from 'classnames';\n+import { get } from 'lodash';\n+\n+import {\n+  DATE_FORMAT,\n+  TIME_FORMAT,\n+  DATE_TIMEZONE_FORMAT,\n+  DATE_FIELD_FORMATS,\n+} from '../../constants/Constants';\n+import { getClassNames, getFormattedDate } from '../../utils/widgetHelpers';\n+import { WidgetRendererPropTypes } from './PropTypes';\n+import { withForwardedRef } from '../hoc/WithRouterAndRef';\n+\n+import ActionButton from './ActionButton';\n+import Attributes from './Attributes/Attributes';\n+import Checkbox from './Checkbox';\n+import DatePicker from './DatePicker';\n+import DatetimeRange from './DatetimeRange';\n+import DevicesWidget from './Devices/DevicesWidget';\n+import Image from './Image';\n+import Labels from './Labels';\n+import Link from './Link';\n+import CharacterLimitInfo from './CharacterLimitInfo';\n+import List from './List/List';\n+import Lookup from './Lookup/Lookup';\n+\n+class WidgetRenderer extends PureComponent {\n+  constructor(props) {\n+    super(props);\n+\n+    this.getClassNames = getClassNames.bind(this);\n+    this.getFormattedDate = getFormattedDate.bind(this);\n+  }\n+\n+  /**\n+   * @method handleDateChange\n+   * @summary calls `handleChange` prop function for date fields, to avoid\n+   * unnecessary anonymous functions\n+   *\n+   * @param {date} date - toggles between text/password\n+   */\n+  handleDateChange = (date) => {\n+    const { widgetField, handleChange } = this.props;\n+    handleChange(widgetField, date);\n+  };\n+\n+  render() {\n+    const {\n+      handleChange,\n+      updated,\n+      isModal,\n+      filterWidget,\n+      filterId,\n+      id,\n+      range,\n+      onHide,\n+      handleBackdropLock,\n+      subentity,\n+      widgetType,\n+      subentityId,\n+      dropdownOpenCallback,\n+      autoFocus,\n+      fullScreen,\n+      fields,\n+      windowType,\n+      dataId,\n+      type,\n+      widgetData,\n+      rowId,\n+      tabId,\n+      docId,\n+      activeTab,\n+      icon,\n+      gridAlign,\n+      entity,\n+      onShow,\n+      caption,\n+      viewId,\n+      listenOnKeys,\n+      listenOnKeysFalse,\n+      closeTableField,\n+      handleZoomInto,\n+      attribute,\n+      allowShowPassword,\n+      onBlurWidget,\n+      isOpenDatePicker,\n+      dateFormat,\n+      initialFocus,\n+      timeZone,\n+      maxLength,\n+      updateHeight,\n+      rowIndex,\n+      onClickOutside,\n+      emptyText,\n+      forceFullWidth,\n+      forceHeight,\n+\n+      // from `renderWidget`\n+      isMultiselect,\n+      widgetField,\n+      widgetProperties,\n+      showErrorBorder,\n+      isFocused,\n+      charsTyped,\n+      readonly,\n+      onPatch,\n+      onListFocus,\n+      onBlurWithParams,\n+      onSetWidgetType,\n+      onHandleProcess,\n+      forwardedRef,\n+    } = this.props;\n+    const { tabIndex, onFocus } = widgetProperties;\n+    const widgetValue = get(widgetProperties, ['value'], null);\n+    widgetProperties.ref = forwardedRef;\n+\n+    const selectedValue = widgetData[0].value\n+      ? widgetData[0].value\n+      : widgetData[0].defaultValue;\n+\n+    const listAndLookupsProps = {\n+      dataId,\n+      attribute,\n+      entity,\n+      subentity,\n+      subentityId,\n+      windowType,\n+      readonly,\n+      updated,\n+      filterWidget,\n+      filterId,\n+      tabId,\n+      rowId,\n+      tabIndex,\n+      viewId,\n+      autoFocus,\n+      onFocus: onListFocus,\n+      onBlur: onBlurWithParams,\n+      align: gridAlign,\n+      mandatory: widgetData[0].mandatory,\n+      parameterName: fields[0].parameterName,\n+      validStatus: widgetData[0].validStatus,\n+      onChange: onPatch,\n+    };\n+    const dateProps = {\n+      field: widgetField,\n+      key: 1,\n+      handleChange,\n+      handleBackdropLock,\n+      inputProps: {\n+        placeholder: fields[0].emptyText,\n+        disabled: readonly,\n+        tabIndex: tabIndex,\n+      },\n+      onChange: this.handleDateChange,\n+    };\n+    const dateRangeProps = {\n+      mandatory: widgetData[0].mandatory,\n+      validStatus: widgetData[0].validStatus,\n+      value: widgetData[0].value,\n+      valueTo: widgetData[0].valueTo,\n+      tabIndex,\n+      onShow,\n+      onHide,\n+    };\n+    const attributesProps = {\n+      entity,\n+      fields,\n+      dataId,\n+      widgetData: widgetData[0],\n+      docType: windowType,\n+      tabId,\n+      rowId,\n+      fieldName: widgetField,\n+      handleBackdropLock,\n+      patch: (option) => onPatch(widgetField, option),\n+      tabIndex,\n+      autoFocus,\n+      readonly,\n+    };\n+\n+    switch (widgetType) {\n+      case 'Date':\n+        if (range) {\n+          // TODO: Watch out! The datetimerange widget as exception,\n+          // is non-controlled input! For further usage, needs\n+          // upgrade.\n+          return (\n+            <DatetimeRange\n+              {...dateRangeProps}\n+              onChange={(value, valueTo) =>\n+                onPatch(\n+                  widgetField,\n+                  value ? Moment(value).format(DATE_FORMAT) : null,\n+                  null,\n+                  valueTo ? Moment(valueTo).format(DATE_FORMAT) : null\n+                )\n+              }\n+              field={widgetField}\n+              timeZone={timeZone}\n+            />\n+          );\n+        } else {\n+          return (\n+            <div className={this.getClassNames({ icon: true })}>\n+              <DatePicker\n+                {...dateProps}\n+                timeFormat={false}\n+                dateFormat={dateFormat || true}\n+                value={widgetValue || widgetData[0].value}\n+                patch={(date) =>\n+                  onPatch(\n+                    widgetField,\n+                    this.getFormattedDate(date, DATE_FORMAT),\n+                    null,\n+                    null,\n+                    true\n+                  )\n+                }\n+                {...{\n+                  isOpenDatePicker,\n+                  timeZone,\n+                }}\n+              />\n+            </div>\n+          );\n+        }\n+      case 'ZonedDateTime':\n+        return (\n+          <div className={this.getClassNames({ icon: true })}>\n+            <DatePicker\n+              {...dateProps}\n+              timeFormat={true}\n+              dateFormat={dateFormat || true}\n+              hasTimeZone={true}\n+              value={widgetValue || widgetData[0].value}\n+              patch={(date) =>\n+                onPatch(\n+                  widgetField,\n+                  this.getFormattedDate(date, DATE_TIMEZONE_FORMAT),\n+                  null,\n+                  null,\n+                  true\n+                )\n+              }\n+              {...{\n+                isOpenDatePicker,\n+                timeZone,\n+              }}\n+            />\n+          </div>\n+        );\n+      case 'Time':\n+        return (\n+          <div className={this.getClassNames({ icon: true })}>\n+            <DatePicker\n+              {...dateProps}\n+              timeFormat={TIME_FORMAT}\n+              dateFormat={false}\n+              value={this.getFormattedDate(widgetValue, TIME_FORMAT)}\n+              patch={(date) =>\n+                onPatch(\n+                  widgetField,\n+                  this.getFormattedDate(date, TIME_FORMAT),\n+                  null,\n+                  null,\n+                  true\n+                )\n+              }\n+              tabIndex={tabIndex}\n+            />\n+          </div>\n+        );\n+      case 'Timestamp':\n+        return (\n+          <div className={this.getClassNames({ icon: true })}>\n+            <DatePicker\n+              {...dateProps}\n+              timeFormat={false}\n+              dateFormat={DATE_FIELD_FORMATS[widgetType]}\n+              value={widgetValue}\n+              patch={(date) =>\n+                onPatch(\n+                  widgetField,\n+                  this.getFormattedDate(date, `x`),\n+                  null,\n+                  null,\n+                  true\n+                )\n+              }\n+              tabIndex={tabIndex}\n+            />\n+          </div>\n+        );\n+      case 'DateRange': {\n+        return (\n+          <DatetimeRange\n+            {...dateRangeProps}\n+            onChange={(value, valueTo) => {\n+              const val = Moment(value).format(DATE_FORMAT);\n+              const valTo = Moment(valueTo).format(DATE_FORMAT);\n+\n+              onPatch(widgetField, {\n+                ...(val && { value: val }),\n+                ...(valTo && { valueTo: valTo }),\n+              });\n+            }}\n+          />\n+        );\n+      }\n+      case 'Lookup':\n+        return (\n+          <Lookup\n+            {...listAndLookupsProps}\n+            properties={fields}\n+            widgetData={widgetData}\n+            placeholder={emptyText ? emptyText : fields[0].emptyText}\n+            rank={type}\n+            isModal={isModal}\n+            selected={widgetValue}\n+            initialFocus={initialFocus}\n+            forceFullWidth={forceFullWidth}\n+            forceHeight={forceHeight}\n+            newRecordCaption={fields[0].newRecordCaption}\n+            newRecordWindowId={fields[0].newRecordWindowId}\n+            listenOnKeys={listenOnKeys}\n+            listenOnKeysFalse={listenOnKeysFalse}\n+            closeTableField={closeTableField}\n+            onBlurWidget={onBlurWidget}\n+            onClickOutside={onClickOutside}\n+          />\n+        );\n+      case 'List':\n+      case 'MultiListValue': {\n+        const commonProps = {\n+          ...listAndLookupsProps,\n+          widgetField,\n+          defaultValue: fields[0].emptyText,\n+          properties: fields[0],\n+          emptyText: fields[0].emptyText,\n+        };\n+        const typeProps = {};\n+\n+        if (widgetType === 'List') {\n+          typeProps.selected = selectedValue;\n+          typeProps.isMultiselect = isMultiselect;\n+        } else {\n+          typeProps.selected = widgetData[0].value || null;\n+          typeProps.isMultiselect = true;\n+        }\n+\n+        return <List {...commonProps} {...typeProps} />;\n+      }\n+      case 'Link':\n+        return (\n+          <Link\n+            getClassNames={() => this.getClassNames({ icon: true })}\n+            {...{\n+              isFocused,\n+              widgetProperties,\n+              icon,\n+              widgetData,\n+              tabIndex,\n+              fullScreen,\n+            }}\n+          />\n+        );\n+      case 'Text':\n+      case 'LongText': {\n+        const classNameParams = { icon: true };\n+        let renderContent = null;\n+\n+        if (widgetType === 'Text') {\n+          renderContent = (\n+            <Fragment>\n+              <input {...widgetProperties} type=\"text\" />\n+              {icon && <i className=\"meta-icon-edit input-icon-right\" />}\n+            </Fragment>\n+          );\n+        } else {\n+          classNameParams.forcedPrimary = true;\n+          renderContent = <textarea {...widgetProperties} />;\n+        }\n+        return (\n+          <div>\n+            <div\n+              className={classnames(this.getClassNames(classNameParams), {\n+                'border-danger': showErrorBorder,\n+              })}\n+            >\n+              {renderContent}\n+            </div>\n+            {charsTyped && charsTyped >= 0 ? (\n+              <CharacterLimitInfo\n+                charsTyped={charsTyped}\n+                maxLength={maxLength}\n+              />\n+            ) : null}\n+          </div>\n+        );\n+      }\n+      case 'Password':\n+        return (", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "fe016765f9489e37e751eb58465acf112728d7e3"}, "originalPosition": 405}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "525e8be249042f1c8c0849cdf33ddb1545f81eb9", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/525e8be249042f1c8c0849cdf33ddb1545f81eb9", "committedDate": "2020-10-23T10:42:43Z", "message": "#7126 removing anonymous event handlers"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "88b5a968944b0af33edc2673a940b159564a0f2c", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/88b5a968944b0af33edc2673a940b159564a0f2c", "committedDate": "2020-10-23T10:44:07Z", "message": "#7126 create WidgetRenderer and move rendering widgets there\n#7126 some cleaning up\n\n# Conflicts:\n#\tfrontend/src/components/filters/Filters.js\n\n# Conflicts:\n#\tfrontend/src/components/widget/RawWidget.js"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "906676b349e38d776a5ce634a6836557d4d76363", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/906676b349e38d776a5ce634a6836557d4d76363", "committedDate": "2020-10-23T10:44:36Z", "message": "#7126 move some functions to widgetHelpers, remove widgetHelper\n#7126 add missing props to WidgetRenderer\n\n# Conflicts:\n#\tfrontend/src/components/widget/RawWidget.js"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "987dc0b835096c2e3bd1c051b3419c7ba31c46de", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/987dc0b835096c2e3bd1c051b3419c7ba31c46de", "committedDate": "2020-10-23T10:44:39Z", "message": "#7126 fix refs solution"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "67ef0a463ad9441f2653224f14f21a2c8677505a", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/67ef0a463ad9441f2653224f14f21a2c8677505a", "committedDate": "2020-10-23T10:44:39Z", "message": "#7126 cleaning up rendering"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a6aa0010c2c8f7d72c00f3fc92cd8763a519f3e", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/9a6aa0010c2c8f7d72c00f3fc92cd8763a519f3e", "committedDate": "2020-10-23T10:44:39Z", "message": "#7126 add props"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5e1d79d631eca5487bd6c122fea66c057ab8e093", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/5e1d79d631eca5487bd6c122fea66c057ab8e093", "committedDate": "2020-10-23T10:44:40Z", "message": "#7126 review cleanup"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "63beadb1c9c76ee42fbd28600bce85a6e83838e0", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/63beadb1c9c76ee42fbd28600bce85a6e83838e0", "committedDate": "2020-10-23T10:44:40Z", "message": "#7126 add comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a62b89be51f9bb79f60d20436ac5f302827c9381", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/a62b89be51f9bb79f60d20436ac5f302827c9381", "committedDate": "2020-10-23T10:44:40Z", "message": "#7126 fix tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "450d493419d60f58593f5007c910c9e4cb710cca", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/450d493419d60f58593f5007c910c9e4cb710cca", "committedDate": "2020-10-23T10:44:40Z", "message": "#7126 remove charsTyped object passed to widgets"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9a520c4724bf7c3ec5b2b90481de2172999d1eff", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/9a520c4724bf7c3ec5b2b90481de2172999d1eff", "committedDate": "2020-10-23T10:44:40Z", "message": "#7126 tests\n\n# Conflicts:\n#\tfrontend/src/components/filters/Filters.js"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "490bc121cc7c0794e6e58aa40f113f5cf955fcf7", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/490bc121cc7c0794e6e58aa40f113f5cf955fcf7", "committedDate": "2020-10-23T10:44:40Z", "message": "#7126 more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fbb85d93d508081eafe4c4bcacea1b2f23ab0baf", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/fbb85d93d508081eafe4c4bcacea1b2f23ab0baf", "committedDate": "2020-10-23T10:44:40Z", "message": "#7126 user typing unit tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "ada1dcecc9e9cbe3310ec0f67e3a5e5547929201", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/ada1dcecc9e9cbe3310ec0f67e3a5e5547929201", "committedDate": "2020-10-23T10:44:40Z", "message": "#7126 fix editing widget\n#7126 add code comments"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "756ce18cfcb88069a4884332fd4a57e6a7977e20", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/756ce18cfcb88069a4884332fd4a57e6a7977e20", "committedDate": "2020-10-23T10:44:40Z", "message": "#7126 export shouldPatch to helper functions\n#7126 small optimizations"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0ae67ed928c5148d9e826cf54323f2665c389617", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/0ae67ed928c5148d9e826cf54323f2665c389617", "committedDate": "2020-10-23T10:44:41Z", "message": "#7126 fix linter error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8f06423799df93c4ee19b195d6c44ff86a580ee3", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/8f06423799df93c4ee19b195d6c44ff86a580ee3", "committedDate": "2020-10-23T10:44:41Z", "message": "#7126 MasterWidget tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "35462e2f8ffcd3efdb16c73f5045d13643dc2ae7", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/35462e2f8ffcd3efdb16c73f5045d13643dc2ae7", "committedDate": "2020-10-23T10:44:41Z", "message": "#7126 more tests"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "89cf945973332b7633e223cb64c15261a04a38bd", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/89cf945973332b7633e223cb64c15261a04a38bd", "committedDate": "2020-10-23T10:44:41Z", "message": "#7126 fix bluring widget fields"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "06b4905d01a07d00309be20204fbe6ca3e4345f8", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/06b4905d01a07d00309be20204fbe6ca3e4345f8", "committedDate": "2020-10-23T10:44:41Z", "message": "#7126 cleaning up the widgets in tables events mess"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "85a9847e7ba42d9dce0dfcac9c7350e6b34246e6", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/85a9847e7ba42d9dce0dfcac9c7350e6b34246e6", "committedDate": "2020-10-23T10:44:41Z", "message": "#7126 fix showing typed characters number\n#7126 fix blur in attributes"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "52069641df2e0d1b421dd1981fbc6b271b81bb5f", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/52069641df2e0d1b421dd1981fbc6b271b81bb5f", "committedDate": "2020-10-23T10:44:41Z", "message": "#7126 remove duplicated and unnecessary event calls"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "803b9fc4f0af1fc6a2390dabead89d7843a260c4", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/803b9fc4f0af1fc6a2390dabead89d7843a260c4", "committedDate": "2020-10-23T10:44:41Z", "message": "#7126 fix console error, when widget was updated after unmounting"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "e5a3989b68c8d8289dccec1c6f46e4bd72a10709", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/e5a3989b68c8d8289dccec1c6f46e4bd72a10709", "committedDate": "2020-10-23T10:44:41Z", "message": "#7126 fix some errors in the grid"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "1ef2e62cacbc10ab4bb75d831de21f28c78ed06a", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/1ef2e62cacbc10ab4bb75d831de21f28c78ed06a", "committedDate": "2020-10-23T10:44:41Z", "message": "#7126 fix Tab navigation"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7eba56d9c3eb506e0c8cff95c4676e27a47d13b2", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/7eba56d9c3eb506e0c8cff95c4676e27a47d13b2", "committedDate": "2020-10-23T10:44:41Z", "message": "#7126 fix handling `{escape}` in edited table cells"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe14c6532a873a3462dc393fcc223ea8f6bcc777", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/fe14c6532a873a3462dc393fcc223ea8f6bcc777", "committedDate": "2020-10-23T10:44:42Z", "message": "#7126 restore old value on `{esc}`"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0bf582b65b08fc8a7332621b9ec1541a7359c0b4", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/0bf582b65b08fc8a7332621b9ec1541a7359c0b4", "committedDate": "2020-10-23T11:10:41Z", "message": "#7126 cleanup after pr review"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "fe016765f9489e37e751eb58465acf112728d7e3", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/fe016765f9489e37e751eb58465acf112728d7e3", "committedDate": "2020-10-22T11:10:23Z", "message": "#7126 restore old value on `{esc}`"}, "afterCommit": {"oid": "0bf582b65b08fc8a7332621b9ec1541a7359c0b4", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/0bf582b65b08fc8a7332621b9ec1541a7359c0b4", "committedDate": "2020-10-23T11:10:41Z", "message": "#7126 cleanup after pr review"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "43a6f8ef6066ed38a356f8cc8771c98813b6abfc", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/43a6f8ef6066ed38a356f8cc8771c98813b6abfc", "committedDate": "2020-10-23T12:30:01Z", "message": "#7126 add test for the extracted widget helper"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "80b1abd8d594e29cfef913d98d19a3fc78ca8bfb", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/80b1abd8d594e29cfef913d98d19a3fc78ca8bfb", "committedDate": "2020-10-23T12:30:20Z", "message": "#7126 refactor widgetrenderer"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "8267c65425427887d00a0c85c26a4559e4858e89", "author": {"user": {"login": "siemiatj", "name": "Kuba Siemi\u0105tkowski"}}, "url": "https://github.com/metasfresh/metasfresh/commit/8267c65425427887d00a0c85c26a4559e4858e89", "committedDate": "2020-10-23T16:22:14Z", "message": "#7126 add tests to extracted widget components"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3109, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}