{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc0MzQ1NDE4", "number": 6178, "title": "Jasper Report: `Account Sheet` - `Kontenblatt`", "bodyText": "#6121", "createdAt": "2020-02-12T14:40:43Z", "url": "https://github.com/metasfresh/metasfresh/pull/6178", "merged": true, "mergeCommit": {"oid": "15546e0607aa729a0b86925305df1d8aa8e9ef47"}, "closed": true, "closedAt": "2020-02-14T11:47:49Z", "author": {"login": "TheBestPessimist"}, "timelineItems": {"totalCount": 30, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABcD3u0FABqjMwMzQxMTMwMjg=", "endCursor": "Y3Vyc29yOnYyOpPPAAABcEN-SngH2gAyMzc0MzQ1NDE4OjZjMzI3OTQ4MGRhMDRkZTIzMDA0NmRmZTIzNGMxYmRjY2M0ZWY2ZTU=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "8ca7a1d3dc2a301a0c04e97007d2daffcf8d955d", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/8ca7a1d3dc2a301a0c04e97007d2daffcf8d955d", "committedDate": "2020-02-13T09:32:56Z", "message": "Merge remote-tracking branch 'origin/master' into gh6121"}, "afterCommit": {"oid": "1906af0218d667a2a5a9e0faa82e8a3af946c7e8", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/1906af0218d667a2a5a9e0faa82e8a3af946c7e8", "committedDate": "2020-02-13T09:38:05Z", "message": "Add Account Sheet Report Process\n\nhttps://github.com/metasfresh/metasfresh/issues/6121"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4MTE0MzY5", "url": "https://github.com/metasfresh/metasfresh/pull/6178#pullrequestreview-358114369", "createdAt": "2020-02-13T10:40:46Z", "commit": {"oid": "1906af0218d667a2a5a9e0faa82e8a3af946c7e8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMDo0MDo0NlrOFpO6Vw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMDo0MDo0NlrOFpO6Vw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MDI0Nw==", "bodyText": "use TMP_AccountSheetReport tablename instead of tbpFilteredFactAcct", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r378780247", "createdAt": "2020-02-13T10:40:46Z", "author": {"login": "teosarca"}, "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/AccountSheetReport.sql", "diffHunk": "@@ -0,0 +1,235 @@\n+DROP FUNCTION IF EXISTS AccountSheetReport(p_dateFrom date, p_dateTo date, p_c_acctschema_id NUMERIC, p_ad_org_id numeric, p_account_id NUMERIC, p_c_activity_id numeric, p_c_project_id numeric);\n+\n+/*\n+- DateFrom/To - mandatory\n+- C_AcctSchema_ID - mandatory\n+- AD_Org_ID - mandatory\n+- Account_ID - optional\n+- C_Activity_ID - optional\n+- C_Project_ID - optional\n+*/\n+CREATE OR REPLACE FUNCTION AccountSheetReport(p_dateFrom date,\n+                                              p_dateTo date,\n+                                              p_c_acctschema_id NUMERIC,\n+                                              p_ad_org_id numeric,\n+                                              p_account_id NUMERIC=NULL,\n+                                              p_c_activity_id numeric=NULL,\n+                                              p_c_project_id numeric=NULL)\n+    RETURNS table\n+            (\n+                dateacct         timestamp WITHOUT TIME ZONE,\n+                documentno       text,\n+                description      text,\n+                amtacctdr        numeric,\n+                amtacctcr        numeric,\n+                account_id       numeric,\n+                fact_acct_id     numeric,\n+                c_doctype_id     numeric,\n+                c_tax_id         numeric,\n+                c_taxcategory_id numeric,\n+                beginningBalance numeric,\n+                endingBalance    numeric\n+            )\n+AS\n+$BODY$\n+DECLARE\n+    v_time                              timestamp;\n+    LINE_TYPE_BEGINNINGBALANCE CONSTANT text = 'B';\n+    LINE_TYPE_TRANSACTION      CONSTANT text = 'T';\n+    v_temp                              numeric;\n+BEGIN\n+    v_time := logDebug('start');\n+\n+    --\n+    -- create temporary table for everything we're working on; it has no rows, only the needed columns\n+    DROP TABLE IF EXISTS tbpFilteredFactAcct;\n+    CREATE TEMPORARY TABLE tbpFilteredFactAcct AS", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1906af0218d667a2a5a9e0faa82e8a3af946c7e8"}, "originalPosition": 46}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4MTE1Njk5", "url": "https://github.com/metasfresh/metasfresh/pull/6178#pullrequestreview-358115699", "createdAt": "2020-02-13T10:42:42Z", "commit": {"oid": "1906af0218d667a2a5a9e0faa82e8a3af946c7e8"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMDo0Mjo0M1rOFpO-aA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMDo0NToyMVrOFpPEZQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MTI4OA==", "bodyText": "don't filter by AccountType", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r378781288", "createdAt": "2020-02-13T10:42:43Z", "author": {"login": "teosarca"}, "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/AccountSheetReport.sql", "diffHunk": "@@ -0,0 +1,235 @@\n+DROP FUNCTION IF EXISTS AccountSheetReport(p_dateFrom date, p_dateTo date, p_c_acctschema_id NUMERIC, p_ad_org_id numeric, p_account_id NUMERIC, p_c_activity_id numeric, p_c_project_id numeric);\n+\n+/*\n+- DateFrom/To - mandatory\n+- C_AcctSchema_ID - mandatory\n+- AD_Org_ID - mandatory\n+- Account_ID - optional\n+- C_Activity_ID - optional\n+- C_Project_ID - optional\n+*/\n+CREATE OR REPLACE FUNCTION AccountSheetReport(p_dateFrom date,\n+                                              p_dateTo date,\n+                                              p_c_acctschema_id NUMERIC,\n+                                              p_ad_org_id numeric,\n+                                              p_account_id NUMERIC=NULL,\n+                                              p_c_activity_id numeric=NULL,\n+                                              p_c_project_id numeric=NULL)\n+    RETURNS table\n+            (\n+                dateacct         timestamp WITHOUT TIME ZONE,\n+                documentno       text,\n+                description      text,\n+                amtacctdr        numeric,\n+                amtacctcr        numeric,\n+                account_id       numeric,\n+                fact_acct_id     numeric,\n+                c_doctype_id     numeric,\n+                c_tax_id         numeric,\n+                c_taxcategory_id numeric,\n+                beginningBalance numeric,\n+                endingBalance    numeric\n+            )\n+AS\n+$BODY$\n+DECLARE\n+    v_time                              timestamp;\n+    LINE_TYPE_BEGINNINGBALANCE CONSTANT text = 'B';\n+    LINE_TYPE_TRANSACTION      CONSTANT text = 'T';\n+    v_temp                              numeric;\n+BEGIN\n+    v_time := logDebug('start');\n+\n+    --\n+    -- create temporary table for everything we're working on; it has no rows, only the needed columns\n+    DROP TABLE IF EXISTS tbpFilteredFactAcct;\n+    CREATE TEMPORARY TABLE tbpFilteredFactAcct AS\n+        (\n+            SELECT fa.*,\n+                   tc.c_taxcategory_id,\n+                   0::numeric beginningBalance,\n+                   0::numeric endingBalance,\n+                   NULL::text lineType\n+            FROM c_elementvalue ev\n+                     INNER JOIN fact_acct fa ON ev.c_elementvalue_id = fa.account_id -- only search for accounts with at least 1 transaction\n+                     LEFT JOIN c_tax t ON fa.c_tax_id = t.c_tax_id\n+                     LEFT JOIN c_taxcategory tc ON t.c_taxcategory_id = tc.c_taxcategory_id\n+            WHERE FALSE\n+        );\n+\n+    v_time := logDebug('created empty temporary table', v_time);\n+\n+\n+    --\n+    -- insert into the temp table the beginningBalance for all the available accounts which have the balance != 0\n+    -- noinspection SqlInsertValues\n+    WITH filteredElementValues AS\n+             (\n+                 SELECT ev.c_elementvalue_id\n+                 FROM c_elementvalue ev\n+                 WHERE TRUE\n+                   AND ev.accounttype = 'A'", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1906af0218d667a2a5a9e0faa82e8a3af946c7e8"}, "originalPosition": 71}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MjM1OQ==", "bodyText": "use\nGET DIAGNOSTICS v_temp = ROW_COUNT; instead of actually counting for logging...", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r378782359", "createdAt": "2020-02-13T10:44:30Z", "author": {"login": "teosarca"}, "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/AccountSheetReport.sql", "diffHunk": "@@ -0,0 +1,235 @@\n+DROP FUNCTION IF EXISTS AccountSheetReport(p_dateFrom date, p_dateTo date, p_c_acctschema_id NUMERIC, p_ad_org_id numeric, p_account_id NUMERIC, p_c_activity_id numeric, p_c_project_id numeric);\n+\n+/*\n+- DateFrom/To - mandatory\n+- C_AcctSchema_ID - mandatory\n+- AD_Org_ID - mandatory\n+- Account_ID - optional\n+- C_Activity_ID - optional\n+- C_Project_ID - optional\n+*/\n+CREATE OR REPLACE FUNCTION AccountSheetReport(p_dateFrom date,\n+                                              p_dateTo date,\n+                                              p_c_acctschema_id NUMERIC,\n+                                              p_ad_org_id numeric,\n+                                              p_account_id NUMERIC=NULL,\n+                                              p_c_activity_id numeric=NULL,\n+                                              p_c_project_id numeric=NULL)\n+    RETURNS table\n+            (\n+                dateacct         timestamp WITHOUT TIME ZONE,\n+                documentno       text,\n+                description      text,\n+                amtacctdr        numeric,\n+                amtacctcr        numeric,\n+                account_id       numeric,\n+                fact_acct_id     numeric,\n+                c_doctype_id     numeric,\n+                c_tax_id         numeric,\n+                c_taxcategory_id numeric,\n+                beginningBalance numeric,\n+                endingBalance    numeric\n+            )\n+AS\n+$BODY$\n+DECLARE\n+    v_time                              timestamp;\n+    LINE_TYPE_BEGINNINGBALANCE CONSTANT text = 'B';\n+    LINE_TYPE_TRANSACTION      CONSTANT text = 'T';\n+    v_temp                              numeric;\n+BEGIN\n+    v_time := logDebug('start');\n+\n+    --\n+    -- create temporary table for everything we're working on; it has no rows, only the needed columns\n+    DROP TABLE IF EXISTS tbpFilteredFactAcct;\n+    CREATE TEMPORARY TABLE tbpFilteredFactAcct AS\n+        (\n+            SELECT fa.*,\n+                   tc.c_taxcategory_id,\n+                   0::numeric beginningBalance,\n+                   0::numeric endingBalance,\n+                   NULL::text lineType\n+            FROM c_elementvalue ev\n+                     INNER JOIN fact_acct fa ON ev.c_elementvalue_id = fa.account_id -- only search for accounts with at least 1 transaction\n+                     LEFT JOIN c_tax t ON fa.c_tax_id = t.c_tax_id\n+                     LEFT JOIN c_taxcategory tc ON t.c_taxcategory_id = tc.c_taxcategory_id\n+            WHERE FALSE\n+        );\n+\n+    v_time := logDebug('created empty temporary table', v_time);\n+\n+\n+    --\n+    -- insert into the temp table the beginningBalance for all the available accounts which have the balance != 0\n+    -- noinspection SqlInsertValues\n+    WITH filteredElementValues AS\n+             (\n+                 SELECT ev.c_elementvalue_id\n+                 FROM c_elementvalue ev\n+                 WHERE TRUE\n+                   AND ev.accounttype = 'A'\n+                   AND (p_account_id IS NULL OR ev.c_elementvalue_id = p_account_id)\n+                 ORDER BY ev.c_elementvalue_id\n+             ),\n+         previousBalances AS\n+             (\n+                 SELECT (de_metas_acct.acctBalanceToDate(ev.c_elementvalue_id, p_c_acctschema_id, (p_dateFrom - INTERVAL '1 day')::date, p_ad_org_id)::de_metas_acct.BalanceAmt).Balance previousDayBalance,\n+                        ev.c_elementvalue_id\n+                 FROM filteredElementValues ev\n+             ),\n+         nonZeroPreviousBalances AS\n+             (\n+                 SELECT *\n+                 FROM previousBalances\n+                 WHERE previousDayBalance != 0\n+             )\n+    INSERT\n+    INTO tbpFilteredFactAcct (beginningBalance, endingBalance, lineType, account_id)\n+    SELECT nonZero.previousDayBalance,\n+           nonZero.previousDayBalance,\n+           LINE_TYPE_BEGINNINGBALANCE,\n+           nonZero.c_elementvalue_id\n+    FROM nonZeroPreviousBalances nonZero;\n+\n+    SELECT count(1) FROM tbpFilteredFactAcct INTO v_temp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1906af0218d667a2a5a9e0faa82e8a3af946c7e8"}, "originalPosition": 95}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MjgyMQ==", "bodyText": "same, avoid using select count(1) for logging purposes", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r378782821", "createdAt": "2020-02-13T10:45:21Z", "author": {"login": "teosarca"}, "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/AccountSheetReport.sql", "diffHunk": "@@ -0,0 +1,235 @@\n+DROP FUNCTION IF EXISTS AccountSheetReport(p_dateFrom date, p_dateTo date, p_c_acctschema_id NUMERIC, p_ad_org_id numeric, p_account_id NUMERIC, p_c_activity_id numeric, p_c_project_id numeric);\n+\n+/*\n+- DateFrom/To - mandatory\n+- C_AcctSchema_ID - mandatory\n+- AD_Org_ID - mandatory\n+- Account_ID - optional\n+- C_Activity_ID - optional\n+- C_Project_ID - optional\n+*/\n+CREATE OR REPLACE FUNCTION AccountSheetReport(p_dateFrom date,\n+                                              p_dateTo date,\n+                                              p_c_acctschema_id NUMERIC,\n+                                              p_ad_org_id numeric,\n+                                              p_account_id NUMERIC=NULL,\n+                                              p_c_activity_id numeric=NULL,\n+                                              p_c_project_id numeric=NULL)\n+    RETURNS table\n+            (\n+                dateacct         timestamp WITHOUT TIME ZONE,\n+                documentno       text,\n+                description      text,\n+                amtacctdr        numeric,\n+                amtacctcr        numeric,\n+                account_id       numeric,\n+                fact_acct_id     numeric,\n+                c_doctype_id     numeric,\n+                c_tax_id         numeric,\n+                c_taxcategory_id numeric,\n+                beginningBalance numeric,\n+                endingBalance    numeric\n+            )\n+AS\n+$BODY$\n+DECLARE\n+    v_time                              timestamp;\n+    LINE_TYPE_BEGINNINGBALANCE CONSTANT text = 'B';\n+    LINE_TYPE_TRANSACTION      CONSTANT text = 'T';\n+    v_temp                              numeric;\n+BEGIN\n+    v_time := logDebug('start');\n+\n+    --\n+    -- create temporary table for everything we're working on; it has no rows, only the needed columns\n+    DROP TABLE IF EXISTS tbpFilteredFactAcct;\n+    CREATE TEMPORARY TABLE tbpFilteredFactAcct AS\n+        (\n+            SELECT fa.*,\n+                   tc.c_taxcategory_id,\n+                   0::numeric beginningBalance,\n+                   0::numeric endingBalance,\n+                   NULL::text lineType\n+            FROM c_elementvalue ev\n+                     INNER JOIN fact_acct fa ON ev.c_elementvalue_id = fa.account_id -- only search for accounts with at least 1 transaction\n+                     LEFT JOIN c_tax t ON fa.c_tax_id = t.c_tax_id\n+                     LEFT JOIN c_taxcategory tc ON t.c_taxcategory_id = tc.c_taxcategory_id\n+            WHERE FALSE\n+        );\n+\n+    v_time := logDebug('created empty temporary table', v_time);\n+\n+\n+    --\n+    -- insert into the temp table the beginningBalance for all the available accounts which have the balance != 0\n+    -- noinspection SqlInsertValues\n+    WITH filteredElementValues AS\n+             (\n+                 SELECT ev.c_elementvalue_id\n+                 FROM c_elementvalue ev\n+                 WHERE TRUE\n+                   AND ev.accounttype = 'A'\n+                   AND (p_account_id IS NULL OR ev.c_elementvalue_id = p_account_id)\n+                 ORDER BY ev.c_elementvalue_id\n+             ),\n+         previousBalances AS\n+             (\n+                 SELECT (de_metas_acct.acctBalanceToDate(ev.c_elementvalue_id, p_c_acctschema_id, (p_dateFrom - INTERVAL '1 day')::date, p_ad_org_id)::de_metas_acct.BalanceAmt).Balance previousDayBalance,\n+                        ev.c_elementvalue_id\n+                 FROM filteredElementValues ev\n+             ),\n+         nonZeroPreviousBalances AS\n+             (\n+                 SELECT *\n+                 FROM previousBalances\n+                 WHERE previousDayBalance != 0\n+             )\n+    INSERT\n+    INTO tbpFilteredFactAcct (beginningBalance, endingBalance, lineType, account_id)\n+    SELECT nonZero.previousDayBalance,\n+           nonZero.previousDayBalance,\n+           LINE_TYPE_BEGINNINGBALANCE,\n+           nonZero.c_elementvalue_id\n+    FROM nonZeroPreviousBalances nonZero;\n+\n+    SELECT count(1) FROM tbpFilteredFactAcct INTO v_temp;\n+    v_time := logDebug('inserted beginningBalance: ' || v_temp || ' records', v_time);\n+\n+\n+    --\n+    -- insert the fact_acct rows into the table\n+    WITH filteredFactAcct AS\n+             (\n+                 SELECT fa.*,\n+                        tc.c_taxcategory_id,\n+                        tbp.beginningBalance::numeric beginningBalance,\n+                        tbp.endingBalance::numeric    endingBalance,\n+                        LINE_TYPE_TRANSACTION\n+                 FROM fact_acct fa\n+                          INNER JOIN tbpFilteredFactAcct tbp ON tbp.account_id = fa.account_id --\n+                          LEFT JOIN c_tax t ON fa.c_tax_id = t.c_tax_id\n+                          LEFT JOIN c_taxcategory tc ON t.c_taxcategory_id = tc.c_taxcategory_id\n+                 WHERE TRUE\n+                   -- AND ev.accounttype = 'A' -- no longer needed here, since we're joining with the already filtered tbpFilteredFactAcct\n+                   AND fa.c_acctschema_id = p_c_acctschema_id\n+                   AND (fa.dateacct >= p_dateFrom AND fa.dateacct <= p_dateTo)\n+                   AND (p_account_id IS NULL OR fa.account_id = p_account_id)\n+                   AND (p_c_activity_id IS NULL OR fa.c_activity_id = p_c_activity_id)\n+                   AND (p_c_project_id IS NULL OR fa.c_project_id = p_c_project_id)\n+             )\n+    INSERT\n+    INTO tbpFilteredFactAcct\n+    SELECT *\n+    FROM filteredFactAcct;\n+\n+    SELECT count(1) FROM tbpFilteredFactAcct INTO v_temp;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1906af0218d667a2a5a9e0faa82e8a3af946c7e8"}, "originalPosition": 125}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3MzU4MTk4MzQ4", "url": "https://github.com/metasfresh/metasfresh/pull/6178#pullrequestreview-358198348", "createdAt": "2020-02-13T13:04:43Z", "commit": {"oid": "4b77f4e8cb29340063c65dd06e206b28125594a5"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMzowNDo0M1rOFpS9Ow==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMzoxMDoxM1rOFpTHtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg0NjUyMw==", "bodyText": "don't need this join", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r378846523", "createdAt": "2020-02-13T13:04:43Z", "author": {"login": "teosarca"}, "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/AccountSheetReport.sql", "diffHunk": "@@ -0,0 +1,238 @@\n+DROP FUNCTION IF EXISTS AccountSheetReport(p_dateFrom date, p_dateTo date, p_c_acctschema_id NUMERIC, p_ad_org_id numeric, p_account_id NUMERIC, p_c_activity_id numeric, p_c_project_id numeric);\n+\n+/*\n+- DateFrom/To - mandatory\n+- C_AcctSchema_ID - mandatory\n+- AD_Org_ID - mandatory\n+- Account_ID - optional\n+- C_Activity_ID - optional\n+- C_Project_ID - optional\n+*/\n+CREATE OR REPLACE FUNCTION AccountSheetReport(p_dateFrom date,\n+                                              p_dateTo date,\n+                                              p_c_acctschema_id NUMERIC,\n+                                              p_ad_org_id numeric,\n+                                              p_account_id NUMERIC=NULL,\n+                                              p_c_activity_id numeric=NULL,\n+                                              p_c_project_id numeric=NULL)\n+    RETURNS table\n+            (\n+                dateacct         timestamp WITHOUT TIME ZONE,\n+                documentno       text,\n+                description      text,\n+                amtacctdr        numeric,\n+                amtacctcr        numeric,\n+                account_id       numeric,\n+                fact_acct_id     numeric,\n+                c_doctype_id     numeric,\n+                c_tax_id         numeric,\n+                c_taxcategory_id numeric,\n+                beginningBalance numeric,\n+                endingBalance    numeric\n+            )\n+AS\n+$BODY$\n+DECLARE\n+    v_time                              timestamp;\n+    LINE_TYPE_BEGINNINGBALANCE CONSTANT text = 'B';\n+    LINE_TYPE_TRANSACTION      CONSTANT text = 'T';\n+    v_temp                              numeric;\n+BEGIN\n+    v_time := logDebug('start');\n+\n+    --\n+    -- create temporary table for everything we're working on; it has no rows, only the needed columns\n+    DROP TABLE IF EXISTS TMP_AccountSheetReport;\n+    CREATE TEMPORARY TABLE TMP_AccountSheetReport AS\n+        (\n+            SELECT fa.*,\n+                   tc.c_taxcategory_id,\n+                   0::numeric beginningBalance,\n+                   0::numeric endingBalance,\n+                   NULL::text lineType\n+            FROM c_elementvalue ev\n+                     INNER JOIN fact_acct fa ON ev.c_elementvalue_id = fa.account_id -- only search for accounts with at least 1 transaction\n+                     LEFT JOIN c_tax t ON fa.c_tax_id = t.c_tax_id\n+                     LEFT JOIN c_taxcategory tc ON t.c_taxcategory_id = tc.c_taxcategory_id\n+            WHERE FALSE\n+        );\n+\n+    v_time := logDebug('created empty temporary table', v_time);\n+\n+\n+    --\n+    -- insert into the temp table the beginningBalance for all the available accounts which have the balance != 0\n+    -- noinspection SqlInsertValues\n+    WITH filteredElementValues AS\n+             (\n+                 SELECT ev.c_elementvalue_id\n+                 FROM c_elementvalue ev\n+                 WHERE TRUE\n+                   AND (p_account_id IS NULL OR ev.c_elementvalue_id = p_account_id)\n+                 ORDER BY ev.c_elementvalue_id\n+             ),\n+         previousBalances AS\n+             (\n+                 SELECT (de_metas_acct.acctBalanceToDate(ev.c_elementvalue_id, p_c_acctschema_id, (p_dateFrom - INTERVAL '1 day')::date, p_ad_org_id)::de_metas_acct.BalanceAmt).Balance previousDayBalance,\n+                        ev.c_elementvalue_id\n+                 FROM filteredElementValues ev\n+             ),\n+         nonZeroPreviousBalances AS\n+             (\n+                 SELECT *\n+                 FROM previousBalances\n+                 WHERE previousDayBalance != 0\n+             )\n+    INSERT\n+    INTO TMP_AccountSheetReport (beginningBalance, endingBalance, lineType, account_id)\n+    SELECT nonZero.previousDayBalance,\n+           nonZero.previousDayBalance,\n+           LINE_TYPE_BEGINNINGBALANCE,\n+           nonZero.c_elementvalue_id\n+    FROM nonZeroPreviousBalances nonZero;\n+\n+    GET DIAGNOSTICS v_temp = ROW_COUNT;\n+    v_time := logDebug('inserted beginningBalance: ' || v_temp || ' records', v_time);\n+\n+\n+    --\n+    -- insert the fact_acct rows into the table\n+    WITH filteredFactAcct AS\n+             (\n+                 SELECT fa.*,\n+                        tc.c_taxcategory_id,\n+                        tmp_fa.beginningBalance::numeric beginningBalance,\n+                        tmp_fa.endingBalance::numeric    endingBalance,\n+                        LINE_TYPE_TRANSACTION\n+                 FROM fact_acct fa\n+                          INNER JOIN TMP_AccountSheetReport tmp_fa ON tmp_fa.account_id = fa.account_id --\n+                          LEFT JOIN c_tax t ON fa.c_tax_id = t.c_tax_id\n+                          LEFT JOIN c_taxcategory tc ON t.c_taxcategory_id = tc.c_taxcategory_id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b77f4e8cb29340063c65dd06e206b28125594a5"}, "originalPosition": 110}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg0NjkwNg==", "bodyText": "just create the table with precisely the columns u need; avoid using this \"tricky\" SELECT", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r378846906", "createdAt": "2020-02-13T13:05:29Z", "author": {"login": "teosarca"}, "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/AccountSheetReport.sql", "diffHunk": "@@ -0,0 +1,238 @@\n+DROP FUNCTION IF EXISTS AccountSheetReport(p_dateFrom date, p_dateTo date, p_c_acctschema_id NUMERIC, p_ad_org_id numeric, p_account_id NUMERIC, p_c_activity_id numeric, p_c_project_id numeric);\n+\n+/*\n+- DateFrom/To - mandatory\n+- C_AcctSchema_ID - mandatory\n+- AD_Org_ID - mandatory\n+- Account_ID - optional\n+- C_Activity_ID - optional\n+- C_Project_ID - optional\n+*/\n+CREATE OR REPLACE FUNCTION AccountSheetReport(p_dateFrom date,\n+                                              p_dateTo date,\n+                                              p_c_acctschema_id NUMERIC,\n+                                              p_ad_org_id numeric,\n+                                              p_account_id NUMERIC=NULL,\n+                                              p_c_activity_id numeric=NULL,\n+                                              p_c_project_id numeric=NULL)\n+    RETURNS table\n+            (\n+                dateacct         timestamp WITHOUT TIME ZONE,\n+                documentno       text,\n+                description      text,\n+                amtacctdr        numeric,\n+                amtacctcr        numeric,\n+                account_id       numeric,\n+                fact_acct_id     numeric,\n+                c_doctype_id     numeric,\n+                c_tax_id         numeric,\n+                c_taxcategory_id numeric,\n+                beginningBalance numeric,\n+                endingBalance    numeric\n+            )\n+AS\n+$BODY$\n+DECLARE\n+    v_time                              timestamp;\n+    LINE_TYPE_BEGINNINGBALANCE CONSTANT text = 'B';\n+    LINE_TYPE_TRANSACTION      CONSTANT text = 'T';\n+    v_temp                              numeric;\n+BEGIN\n+    v_time := logDebug('start');\n+\n+    --\n+    -- create temporary table for everything we're working on; it has no rows, only the needed columns\n+    DROP TABLE IF EXISTS TMP_AccountSheetReport;\n+    CREATE TEMPORARY TABLE TMP_AccountSheetReport AS\n+        (\n+            SELECT fa.*,\n+                   tc.c_taxcategory_id,\n+                   0::numeric beginningBalance,\n+                   0::numeric endingBalance,\n+                   NULL::text lineType\n+            FROM c_elementvalue ev\n+                     INNER JOIN fact_acct fa ON ev.c_elementvalue_id = fa.account_id -- only search for accounts with at least 1 transaction\n+                     LEFT JOIN c_tax t ON fa.c_tax_id = t.c_tax_id\n+                     LEFT JOIN c_taxcategory tc ON t.c_taxcategory_id = tc.c_taxcategory_id\n+            WHERE FALSE\n+        );", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b77f4e8cb29340063c65dd06e206b28125594a5"}, "originalPosition": 58}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODg0OTIwNg==", "bodyText": "export doc type name instead of c_doctype_id\nsame of the other ID columns", "url": "https://github.com/metasfresh/metasfresh/pull/6178#discussion_r378849206", "createdAt": "2020-02-13T13:10:13Z", "author": {"login": "teosarca"}, "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/AccountSheetReport.sql", "diffHunk": "@@ -0,0 +1,238 @@\n+DROP FUNCTION IF EXISTS AccountSheetReport(p_dateFrom date, p_dateTo date, p_c_acctschema_id NUMERIC, p_ad_org_id numeric, p_account_id NUMERIC, p_c_activity_id numeric, p_c_project_id numeric);\n+\n+/*\n+- DateFrom/To - mandatory\n+- C_AcctSchema_ID - mandatory\n+- AD_Org_ID - mandatory\n+- Account_ID - optional\n+- C_Activity_ID - optional\n+- C_Project_ID - optional\n+*/\n+CREATE OR REPLACE FUNCTION AccountSheetReport(p_dateFrom date,\n+                                              p_dateTo date,\n+                                              p_c_acctschema_id NUMERIC,\n+                                              p_ad_org_id numeric,\n+                                              p_account_id NUMERIC=NULL,\n+                                              p_c_activity_id numeric=NULL,\n+                                              p_c_project_id numeric=NULL)\n+    RETURNS table\n+            (\n+                dateacct         timestamp WITHOUT TIME ZONE,\n+                documentno       text,\n+                description      text,\n+                amtacctdr        numeric,\n+                amtacctcr        numeric,\n+                account_id       numeric,\n+                fact_acct_id     numeric,\n+                c_doctype_id     numeric,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4b77f4e8cb29340063c65dd06e206b28125594a5"}, "originalPosition": 27}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "40c854d74feed420a3739b2c1f878c8edcda32da", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/40c854d74feed420a3739b2c1f878c8edcda32da", "committedDate": "2020-02-14T06:32:52Z", "message": "First draft of AccountSheetReport\n\nhttps://github.com/metasfresh/metasfresh/issues/6121"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "a52f0ce19bb3592ad76bc0774d46327629257e43", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/a52f0ce19bb3592ad76bc0774d46327629257e43", "committedDate": "2020-02-14T06:32:52Z", "message": "Working draft of AccountSheetReport\n\nhttps://github.com/metasfresh/metasfresh/issues/6121"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cc8bc257508fbc44117409fd2f14fcc4815d52d4", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/cc8bc257508fbc44117409fd2f14fcc4815d52d4", "committedDate": "2020-02-14T06:32:52Z", "message": "Second working draft of AccountSheetReport; this one's faster\n\nhttps://github.com/metasfresh/metasfresh/issues/6121"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "09abebf59027972afeefedbc4f345b975ba6f867", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/09abebf59027972afeefedbc4f345b975ba6f867", "committedDate": "2020-02-14T06:32:52Z", "message": "Add sql function `logDebug` which prints to the console\n\nhttps://github.com/metasfresh/metasfresh/issues/6121"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b7cab6a7472c2d4ac77da9f47d7d6740d6139403", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/b7cab6a7472c2d4ac77da9f47d7d6740d6139403", "committedDate": "2020-02-14T06:32:52Z", "message": "Update debug logs\n\nhttps://github.com/metasfresh/metasfresh/issues/6121"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "3906cbed786bf884fa21e653c72d1159c916ed73", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/3906cbed786bf884fa21e653c72d1159c916ed73", "committedDate": "2020-02-14T06:32:52Z", "message": "Add how to use to `logDebug`\n\nhttps://github.com/metasfresh/metasfresh/issues/6121"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "297cb8791e43d14dfecd583dacb108efbcb2c1ba", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/297cb8791e43d14dfecd583dacb108efbcb2c1ba", "committedDate": "2020-02-14T06:32:52Z", "message": "Add performance numbers\n\nhttps://github.com/metasfresh/metasfresh/issues/6121"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "5dfac5dc09140cdd305535137d04a43ddc96acad", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/5dfac5dc09140cdd305535137d04a43ddc96acad", "committedDate": "2020-02-14T06:32:52Z", "message": "Rename column to `endingBalance` from `previousBalance` to better suggest the usage\n\nhttps://github.com/metasfresh/metasfresh/issues/6121"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7997677eead062f415608a03418912ca22da9bf1", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/7997677eead062f415608a03418912ca22da9bf1", "committedDate": "2020-02-14T06:32:53Z", "message": "Add the sql functions for AccountSheetReport and logDebug\n\nhttps://github.com/metasfresh/metasfresh/issues/6121"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9d5e34f36ddde2bd02f8870d1d24c4b9cfc52d81", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/9d5e34f36ddde2bd02f8870d1d24c4b9cfc52d81", "committedDate": "2020-02-14T06:32:53Z", "message": "Bugfix: Always show header for excel export, even if there are no rows\n\nThis fixes an AIOUB exception when creating the header\n\nhttps://github.com/metasfresh/metasfresh/issues/6121"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "7f71be4b2b6f65cda082c7fd5b329a5e4232d59c", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/7f71be4b2b6f65cda082c7fd5b329a5e4232d59c", "committedDate": "2020-02-14T06:32:53Z", "message": "Add Account Sheet Report Process\n\nhttps://github.com/metasfresh/metasfresh/issues/6121"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "9717699842a52571599caddf33f56dd6d5089711", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/9717699842a52571599caddf33f56dd6d5089711", "committedDate": "2020-02-14T06:32:53Z", "message": "Rename the temporary table\n\nhttps://github.com/metasfresh/metasfresh/issues/6121"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b22e19660497b15a81403b3061135f9cb93be0a4", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/b22e19660497b15a81403b3061135f9cb93be0a4", "committedDate": "2020-02-14T06:32:53Z", "message": "Filter by `fact_acct.postingType=A`\n\nhttps://github.com/metasfresh/metasfresh/issues/6121"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fe8dd6fdd45812f010efc1c0ce419c99beed6348", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/fe8dd6fdd45812f010efc1c0ce419c99beed6348", "committedDate": "2020-02-14T06:32:53Z", "message": "Use `GET DIAGNOSTICS` instead of `select count`\n\nhttps://github.com/metasfresh/metasfresh/issues/6121"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "165d7f4a12550bc68d4ecd52b00f2920dfc501a9", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/165d7f4a12550bc68d4ecd52b00f2920dfc501a9", "committedDate": "2020-02-14T06:32:53Z", "message": "`logDebug` is actually volatile, not immutable\n\nhttps://github.com/metasfresh/metasfresh/issues/6121"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41e08efec5449d6fb9c97dfd2362046ea588e6d6", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/41e08efec5449d6fb9c97dfd2362046ea588e6d6", "committedDate": "2020-02-14T06:32:53Z", "message": "Update Performance numbers\n\nhttps://github.com/metasfresh/metasfresh/issues/6121"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "767e7f77e4db8994a51e2eeb5f1522f564b97f26", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/767e7f77e4db8994a51e2eeb5f1522f564b97f26", "committedDate": "2020-02-14T06:32:53Z", "message": "Add migration script\n\nhttps://github.com/metasfresh/metasfresh/issues/6121"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "77f8ae3cd2ff2fc42fdf3d45b5aa06d3180a8a78", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/77f8ae3cd2ff2fc42fdf3d45b5aa06d3180a8a78", "committedDate": "2020-02-14T06:32:53Z", "message": "Add plea for help regarding performance\n\nhttps://github.com/metasfresh/metasfresh/issues/6121"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "4f233a497b513be1cf29a64116d8f3891857e88a", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/4f233a497b513be1cf29a64116d8f3891857e88a", "committedDate": "2020-02-14T06:32:53Z", "message": "Properly create the temporary table, instead of using that trick\n\nhttps://github.com/metasfresh/metasfresh/issues/6121"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f6204ea4083ee25ce38bb1248fff3250370c4949", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/f6204ea4083ee25ce38bb1248fff3250370c4949", "committedDate": "2020-02-14T06:32:53Z", "message": "Cleanup\n\nhttps://github.com/metasfresh/metasfresh/issues/6121"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "12be35e24bf9e78724a98efb89ece6ab22aae24b", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/12be35e24bf9e78724a98efb89ece6ab22aae24b", "committedDate": "2020-02-14T07:25:04Z", "message": "Return names instead of IDs\n\nUsers finally know what they're looking at\n\nhttps://github.com/metasfresh/metasfresh/issues/6121"}}, {"__typename": "HeadRefForcePushedEvent", "beforeCommit": {"oid": "b7a807e90114f1d2d46c143212ac1814889da6dd", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/b7a807e90114f1d2d46c143212ac1814889da6dd", "committedDate": "2020-02-13T14:08:42Z", "message": "Return names along with IDs\n\nUsers finally know what they're looking at\n\nhttps://github.com/metasfresh/metasfresh/issues/6121"}, "afterCommit": {"oid": "12be35e24bf9e78724a98efb89ece6ab22aae24b", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/12be35e24bf9e78724a98efb89ece6ab22aae24b", "committedDate": "2020-02-14T07:25:04Z", "message": "Return names instead of IDs\n\nUsers finally know what they're looking at\n\nhttps://github.com/metasfresh/metasfresh/issues/6121"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b760953e121f832e20fdead9822cfcaeae727701", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/b760953e121f832e20fdead9822cfcaeae727701", "committedDate": "2020-02-14T07:40:38Z", "message": "Remove rows which have both amtacctdr == amtacctcr == 0\n\nhttps://github.com/metasfresh/metasfresh/issues/6121"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "69768c8cf92a49521788920687b263555ed241ae", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/69768c8cf92a49521788920687b263555ed241ae", "committedDate": "2020-02-14T07:43:27Z", "message": "Add migration script\n\nhttps://github.com/metasfresh/metasfresh/issues/6121"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "fd0151d84ba300886d3ce8f28e124f0defca8560", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/fd0151d84ba300886d3ce8f28e124f0defca8560", "committedDate": "2020-02-14T10:26:33Z", "message": "Update TRL\n\nhttps://github.com/metasfresh/metasfresh/issues/6121"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "6c3279480da04de230046dfe234c1bdccc4ef6e5", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/6c3279480da04de230046dfe234c1bdccc4ef6e5", "committedDate": "2020-02-14T11:38:35Z", "message": "Update columns order\n\nhttps://github.com/metasfresh/metasfresh/issues/6121"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 3609, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}