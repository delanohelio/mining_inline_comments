{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzczNDg0ODgz", "number": 6160, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMDo0OTo1OVrODewgUA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwODowMTo0NlrODfctwA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTc4NTc2OnYy", "diffSide": "RIGHT", "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/ProfitAndLossBalanceForAccountInPeriod.sql", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMDo0OTo1OVrOFoEejg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMDo0NjozMVrOFpPG5w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU2MDcxOA==", "bodyText": "do we have an index on fas.c_period_id?`if not, do we need one?\nEDI: we have one", "url": "https://github.com/metasfresh/metasfresh/pull/6160#discussion_r377560718", "createdAt": "2020-02-11T10:49:59Z", "author": {"login": "metas-ts"}, "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/ProfitAndLossBalanceForAccountInPeriod.sql", "diffHunk": "@@ -0,0 +1,59 @@\n+DROP FUNCTION IF EXISTS ProfitAndLossBalanceForAccountInPeriod(IN p_C_ElementValue_ID numeric, IN p_startDate timestamp, IN p_endDate timestamp);\n+\n+CREATE OR REPLACE FUNCTION ProfitAndLossBalanceForAccountInPeriod(IN p_C_ElementValue_ID numeric, IN p_startDate timestamp, IN p_endDate timestamp)\n+    RETURNS NUMERIC\n+AS\n+$BODY$\n+\n+WITH periods_between_dates AS\n+         (\n+             SELECT --\n+                    p.c_period_id,\n+                    p.startdate,\n+                    p.enddate\n+             FROM c_period p\n+             WHERE TRUE\n+               AND p.startdate >= p_startDate\n+               AND p.enddate <= p_endDate\n+         ),\n+     fact_acct_summary_for_periods AS\n+         (\n+             -- fact_acct_summary filtered for selected period\n+             SELECT fas.*\n+             FROM periods_between_dates p\n+                      INNER JOIN fact_acct_summary fas ON fas.c_period_id = p.c_period_id", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50b9e1d9c72d2bc66e1da8d7af3874a288fd7492"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYwMDg1MQ==", "bodyText": "Since we already have an index, there is nothing i have to do, right?", "url": "https://github.com/metasfresh/metasfresh/pull/6160#discussion_r377600851", "createdAt": "2020-02-11T12:21:04Z", "author": {"login": "TheBestPessimist"}, "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/ProfitAndLossBalanceForAccountInPeriod.sql", "diffHunk": "@@ -0,0 +1,59 @@\n+DROP FUNCTION IF EXISTS ProfitAndLossBalanceForAccountInPeriod(IN p_C_ElementValue_ID numeric, IN p_startDate timestamp, IN p_endDate timestamp);\n+\n+CREATE OR REPLACE FUNCTION ProfitAndLossBalanceForAccountInPeriod(IN p_C_ElementValue_ID numeric, IN p_startDate timestamp, IN p_endDate timestamp)\n+    RETURNS NUMERIC\n+AS\n+$BODY$\n+\n+WITH periods_between_dates AS\n+         (\n+             SELECT --\n+                    p.c_period_id,\n+                    p.startdate,\n+                    p.enddate\n+             FROM c_period p\n+             WHERE TRUE\n+               AND p.startdate >= p_startDate\n+               AND p.enddate <= p_endDate\n+         ),\n+     fact_acct_summary_for_periods AS\n+         (\n+             -- fact_acct_summary filtered for selected period\n+             SELECT fas.*\n+             FROM periods_between_dates p\n+                      INNER JOIN fact_acct_summary fas ON fas.c_period_id = p.c_period_id", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU2MDcxOA=="}, "originalCommit": {"oid": "50b9e1d9c72d2bc66e1da8d7af3874a288fd7492"}, "originalPosition": 24}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MzQ2Mw==", "bodyText": "Assuming there's nothing else for me to do and marking as resolved", "url": "https://github.com/metasfresh/metasfresh/pull/6160#discussion_r378783463", "createdAt": "2020-02-13T10:46:31Z", "author": {"login": "TheBestPessimist"}, "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/ProfitAndLossBalanceForAccountInPeriod.sql", "diffHunk": "@@ -0,0 +1,59 @@\n+DROP FUNCTION IF EXISTS ProfitAndLossBalanceForAccountInPeriod(IN p_C_ElementValue_ID numeric, IN p_startDate timestamp, IN p_endDate timestamp);\n+\n+CREATE OR REPLACE FUNCTION ProfitAndLossBalanceForAccountInPeriod(IN p_C_ElementValue_ID numeric, IN p_startDate timestamp, IN p_endDate timestamp)\n+    RETURNS NUMERIC\n+AS\n+$BODY$\n+\n+WITH periods_between_dates AS\n+         (\n+             SELECT --\n+                    p.c_period_id,\n+                    p.startdate,\n+                    p.enddate\n+             FROM c_period p\n+             WHERE TRUE\n+               AND p.startdate >= p_startDate\n+               AND p.enddate <= p_endDate\n+         ),\n+     fact_acct_summary_for_periods AS\n+         (\n+             -- fact_acct_summary filtered for selected period\n+             SELECT fas.*\n+             FROM periods_between_dates p\n+                      INNER JOIN fact_acct_summary fas ON fas.c_period_id = p.c_period_id", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU2MDcxOA=="}, "originalCommit": {"oid": "50b9e1d9c72d2bc66e1da8d7af3874a288fd7492"}, "originalPosition": 24}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTgwNzExOnYy", "diffSide": "RIGHT", "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/ProfitAndLossBalanceForAccountInPeriod.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMDo1NzowMFrOFoErwA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMjoxMzozOFrOFoGuiA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU2NDA5Ng==", "bodyText": "when it's possible - i think in this case it is - one should use STABLE(check the docu for details)", "url": "https://github.com/metasfresh/metasfresh/pull/6160#discussion_r377564096", "createdAt": "2020-02-11T10:57:00Z", "author": {"login": "metas-ts"}, "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/ProfitAndLossBalanceForAccountInPeriod.sql", "diffHunk": "@@ -0,0 +1,59 @@\n+DROP FUNCTION IF EXISTS ProfitAndLossBalanceForAccountInPeriod(IN p_C_ElementValue_ID numeric, IN p_startDate timestamp, IN p_endDate timestamp);\n+\n+CREATE OR REPLACE FUNCTION ProfitAndLossBalanceForAccountInPeriod(IN p_C_ElementValue_ID numeric, IN p_startDate timestamp, IN p_endDate timestamp)\n+    RETURNS NUMERIC\n+AS\n+$BODY$\n+\n+WITH periods_between_dates AS\n+         (\n+             SELECT --\n+                    p.c_period_id,\n+                    p.startdate,\n+                    p.enddate\n+             FROM c_period p\n+             WHERE TRUE\n+               AND p.startdate >= p_startDate\n+               AND p.enddate <= p_endDate\n+         ),\n+     fact_acct_summary_for_periods AS\n+         (\n+             -- fact_acct_summary filtered for selected period\n+             SELECT fas.*\n+             FROM periods_between_dates p\n+                      INNER JOIN fact_acct_summary fas ON fas.c_period_id = p.c_period_id\n+             WHERE fas.account_id = p_C_ElementValue_ID\n+         ),\n+     result_table AS\n+         (\n+             SELECT coalesce(sum(acctbalance(fas.account_id, fas.amtacctdr, fas.amtacctcr)), 0) balance\n+             FROM c_elementvalue ev\n+                      INNER JOIN fact_acct_summary_for_periods fas ON fas.account_id = ev.c_elementvalue_id\n+             WHERE TRUE\n+               AND ev.accounttype IN ('E', 'R')\n+               -- only 'Actual' posting type is used\n+               AND fas.postingtype = 'A'\n+             GROUP BY ev.value, ev.name\n+             ORDER BY ev.name\n+         )\n+SELECT balance\n+FROM result_table\n+\n+/**\n+  Why is this union needed?\n+  In case no `fact_acct_summary` for an account_id exists, `result_table` returns no rows. It doesn't return null (so that i can use coalesce), but returns NO rows.\n+     example: SELECT ProfitAndLossBalanceForAccountInPeriod(1, '1993-01-01'::Timestamp, '2992-01-01'::Timestamp); -- this returns NO rows\n+  I have simply added this union in case the select returns nothing. If you have a better solution, i'm more than happy to hear it, as this feels like a hack.\n+ */\n+UNION ALL\n+(\n+    SELECT 0\n+)\n+LIMIT 1\n+    ;\n+$BODY$\n+    LANGUAGE SQL\n+    VOLATILE;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50b9e1d9c72d2bc66e1da8d7af3874a288fd7492"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU5NzU3Ng==", "bodyText": "marked as stable (already checked the docs to see the difference between immutable, stable and volatile, but i still wasn't convinced this is a stable function)", "url": "https://github.com/metasfresh/metasfresh/pull/6160#discussion_r377597576", "createdAt": "2020-02-11T12:13:38Z", "author": {"login": "TheBestPessimist"}, "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/ProfitAndLossBalanceForAccountInPeriod.sql", "diffHunk": "@@ -0,0 +1,59 @@\n+DROP FUNCTION IF EXISTS ProfitAndLossBalanceForAccountInPeriod(IN p_C_ElementValue_ID numeric, IN p_startDate timestamp, IN p_endDate timestamp);\n+\n+CREATE OR REPLACE FUNCTION ProfitAndLossBalanceForAccountInPeriod(IN p_C_ElementValue_ID numeric, IN p_startDate timestamp, IN p_endDate timestamp)\n+    RETURNS NUMERIC\n+AS\n+$BODY$\n+\n+WITH periods_between_dates AS\n+         (\n+             SELECT --\n+                    p.c_period_id,\n+                    p.startdate,\n+                    p.enddate\n+             FROM c_period p\n+             WHERE TRUE\n+               AND p.startdate >= p_startDate\n+               AND p.enddate <= p_endDate\n+         ),\n+     fact_acct_summary_for_periods AS\n+         (\n+             -- fact_acct_summary filtered for selected period\n+             SELECT fas.*\n+             FROM periods_between_dates p\n+                      INNER JOIN fact_acct_summary fas ON fas.c_period_id = p.c_period_id\n+             WHERE fas.account_id = p_C_ElementValue_ID\n+         ),\n+     result_table AS\n+         (\n+             SELECT coalesce(sum(acctbalance(fas.account_id, fas.amtacctdr, fas.amtacctcr)), 0) balance\n+             FROM c_elementvalue ev\n+                      INNER JOIN fact_acct_summary_for_periods fas ON fas.account_id = ev.c_elementvalue_id\n+             WHERE TRUE\n+               AND ev.accounttype IN ('E', 'R')\n+               -- only 'Actual' posting type is used\n+               AND fas.postingtype = 'A'\n+             GROUP BY ev.value, ev.name\n+             ORDER BY ev.name\n+         )\n+SELECT balance\n+FROM result_table\n+\n+/**\n+  Why is this union needed?\n+  In case no `fact_acct_summary` for an account_id exists, `result_table` returns no rows. It doesn't return null (so that i can use coalesce), but returns NO rows.\n+     example: SELECT ProfitAndLossBalanceForAccountInPeriod(1, '1993-01-01'::Timestamp, '2992-01-01'::Timestamp); -- this returns NO rows\n+  I have simply added this union in case the select returns nothing. If you have a better solution, i'm more than happy to hear it, as this feels like a hack.\n+ */\n+UNION ALL\n+(\n+    SELECT 0\n+)\n+LIMIT 1\n+    ;\n+$BODY$\n+    LANGUAGE SQL\n+    VOLATILE;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU2NDA5Ng=="}, "originalCommit": {"oid": "50b9e1d9c72d2bc66e1da8d7af3874a288fd7492"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjMzNTgxMzQyOnYy", "diffSide": "RIGHT", "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/acctBalanceUntilDate.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMDo1OTowNVrOFoEviQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xMVQxMjo1NDo1MFrOFoH2KQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU2NTA2NQ==", "bodyText": "it's great to provide this info, but this please also add it as a comment to the function in question, so future devs can see it there too", "url": "https://github.com/metasfresh/metasfresh/pull/6160#discussion_r377565065", "createdAt": "2020-02-11T10:59:05Z", "author": {"login": "metas-ts"}, "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/acctBalanceUntilDate.sql", "diffHunk": "@@ -1,12 +1,36 @@\n -- Function: de_metas_acct.acctbalanceuntildate(numeric, numeric, date, character)\n \n- DROP FUNCTION IF EXISTS de_metas_acct.acctbalanceuntildate(numeric, numeric, date, character);\n+DROP FUNCTION IF EXISTS de_metas_acct.acctbalanceuntildate(numeric, numeric, date, character);\n \n-DROP FUNCTION IF EXISTS   de_metas_acct.acctbalanceuntildate(p_account_id numeric, p_c_acctschema_id numeric, p_dateacct date,  ad_org_id numeric, p_includepostingtypestatistical character);\n-DROP FUNCTION IF EXISTS   de_metas_acct.acctbalanceuntildate(p_account_id numeric, p_c_acctschema_id numeric, p_dateacct date,  ad_org_id numeric, p_includepostingtypestatistical character, IN  p_ExcludePostingTypeYearEnd character);\n+DROP FUNCTION IF EXISTS de_metas_acct.acctbalanceuntildate(p_account_id numeric, p_c_acctschema_id numeric, p_dateacct date, ad_org_id numeric, p_includepostingtypestatistical character);\n+DROP FUNCTION IF EXISTS de_metas_acct.acctbalanceuntildate(p_account_id numeric, p_c_acctschema_id numeric, p_dateacct date, ad_org_id numeric, p_includepostingtypestatistical character, IN p_ExcludePostingTypeYearEnd character);\n \n+--\n+--\n+--\n+--\n+--\n+-- TODO this will be deleted in https://github.com/metasfresh/metasfresh/issues/6149\n+--      DO NOT USE THIS ANYMORE\n+--      PLEASE USE acctBalanceToDate", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "50b9e1d9c72d2bc66e1da8d7af3874a288fd7492"}, "originalPosition": 18}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzYxNTkxMw==", "bodyText": "Added comment to the function.", "url": "https://github.com/metasfresh/metasfresh/pull/6160#discussion_r377615913", "createdAt": "2020-02-11T12:54:50Z", "author": {"login": "TheBestPessimist"}, "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/acctBalanceUntilDate.sql", "diffHunk": "@@ -1,12 +1,36 @@\n -- Function: de_metas_acct.acctbalanceuntildate(numeric, numeric, date, character)\n \n- DROP FUNCTION IF EXISTS de_metas_acct.acctbalanceuntildate(numeric, numeric, date, character);\n+DROP FUNCTION IF EXISTS de_metas_acct.acctbalanceuntildate(numeric, numeric, date, character);\n \n-DROP FUNCTION IF EXISTS   de_metas_acct.acctbalanceuntildate(p_account_id numeric, p_c_acctschema_id numeric, p_dateacct date,  ad_org_id numeric, p_includepostingtypestatistical character);\n-DROP FUNCTION IF EXISTS   de_metas_acct.acctbalanceuntildate(p_account_id numeric, p_c_acctschema_id numeric, p_dateacct date,  ad_org_id numeric, p_includepostingtypestatistical character, IN  p_ExcludePostingTypeYearEnd character);\n+DROP FUNCTION IF EXISTS de_metas_acct.acctbalanceuntildate(p_account_id numeric, p_c_acctschema_id numeric, p_dateacct date, ad_org_id numeric, p_includepostingtypestatistical character);\n+DROP FUNCTION IF EXISTS de_metas_acct.acctbalanceuntildate(p_account_id numeric, p_c_acctschema_id numeric, p_dateacct date, ad_org_id numeric, p_includepostingtypestatistical character, IN p_ExcludePostingTypeYearEnd character);\n \n+--\n+--\n+--\n+--\n+--\n+-- TODO this will be deleted in https://github.com/metasfresh/metasfresh/issues/6149\n+--      DO NOT USE THIS ANYMORE\n+--      PLEASE USE acctBalanceToDate", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3NzU2NTA2NQ=="}, "originalCommit": {"oid": "50b9e1d9c72d2bc66e1da8d7af3874a288fd7492"}, "originalPosition": 18}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzAyODIyOnYy", "diffSide": "RIGHT", "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/ProfitAndLossReport.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwODowMToyN1rOFpKE9A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMDo1OTo1MlrOFpPj2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcwMTA0NA==", "bodyText": "better name the columns as:\n\nvalue => AccountValue\nname => AccountName\nIsSummary => take out\nthree_years_ago => Balance_3yAgo\ntwo_years_ago => Balance_2yAgo\none_year_ago => Balance_1yAgo\ncurrent_period => Balance", "url": "https://github.com/metasfresh/metasfresh/pull/6160#discussion_r378701044", "createdAt": "2020-02-13T08:01:27Z", "author": {"login": "teosarca"}, "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/ProfitAndLossReport.sql", "diffHunk": "@@ -0,0 +1,39 @@\n+DROP FUNCTION IF EXISTS ProfitAndLossReport(IN p_startDate timestamp, IN p_endDate timestamp, IN p_compareWithPrevious1Year boolean, IN p_compareWithPrevious3Years boolean);\n+DROP FUNCTION IF EXISTS ProfitAndLossReport(IN p_startDate timestamp, IN p_endDate timestamp);\n+\n+CREATE OR REPLACE FUNCTION ProfitAndLossReport(IN p_startDate timestamp, IN p_endDate timestamp)\n+    RETURNS TABLE\n+            (\n+                name            text,\n+                value           text,\n+                isSummary       text,\n+                three_years_ago numeric,\n+                two_years_ago   numeric,\n+                one_year_ago    numeric,\n+                current_period  numeric", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d3ba0254ccfdbbb00c48cbd666afd32428e291c"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc5MDg3Mg==", "bodyText": "updated trl", "url": "https://github.com/metasfresh/metasfresh/pull/6160#discussion_r378790872", "createdAt": "2020-02-13T10:59:52Z", "author": {"login": "TheBestPessimist"}, "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/ProfitAndLossReport.sql", "diffHunk": "@@ -0,0 +1,39 @@\n+DROP FUNCTION IF EXISTS ProfitAndLossReport(IN p_startDate timestamp, IN p_endDate timestamp, IN p_compareWithPrevious1Year boolean, IN p_compareWithPrevious3Years boolean);\n+DROP FUNCTION IF EXISTS ProfitAndLossReport(IN p_startDate timestamp, IN p_endDate timestamp);\n+\n+CREATE OR REPLACE FUNCTION ProfitAndLossReport(IN p_startDate timestamp, IN p_endDate timestamp)\n+    RETURNS TABLE\n+            (\n+                name            text,\n+                value           text,\n+                isSummary       text,\n+                three_years_ago numeric,\n+                two_years_ago   numeric,\n+                one_year_ago    numeric,\n+                current_period  numeric", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcwMTA0NA=="}, "originalCommit": {"oid": "1d3ba0254ccfdbbb00c48cbd666afd32428e291c"}, "originalPosition": 13}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM0MzAyOTEyOnYy", "diffSide": "RIGHT", "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/ProfitAndLossReport.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QwODowMTo0NlrOFpKFgQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xM1QxMDo0NjowNVrOFpPGCA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcwMTE4NQ==", "bodyText": "also filter by ev.IsSummary=N", "url": "https://github.com/metasfresh/metasfresh/pull/6160#discussion_r378701185", "createdAt": "2020-02-13T08:01:46Z", "author": {"login": "teosarca"}, "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/ProfitAndLossReport.sql", "diffHunk": "@@ -0,0 +1,39 @@\n+DROP FUNCTION IF EXISTS ProfitAndLossReport(IN p_startDate timestamp, IN p_endDate timestamp, IN p_compareWithPrevious1Year boolean, IN p_compareWithPrevious3Years boolean);\n+DROP FUNCTION IF EXISTS ProfitAndLossReport(IN p_startDate timestamp, IN p_endDate timestamp);\n+\n+CREATE OR REPLACE FUNCTION ProfitAndLossReport(IN p_startDate timestamp, IN p_endDate timestamp)\n+    RETURNS TABLE\n+            (\n+                name            text,\n+                value           text,\n+                isSummary       text,\n+                three_years_ago numeric,\n+                two_years_ago   numeric,\n+                one_year_ago    numeric,\n+                current_period  numeric\n+            )\n+AS\n+$BODY$\n+\n+SELECT ev.name,\n+       ev.value,\n+       ev.issummary::text,\n+       ProfitAndLossBalanceForAccountInPeriod(ev.c_elementvalue_id, p_startDate - '3 Year'::interval, p_endDate - '3 Year'::interval) three_years_ago_balance,\n+       ProfitAndLossBalanceForAccountInPeriod(ev.c_elementvalue_id, p_startDate - '2 Year'::interval, p_endDate - '2 Year'::interval) two_years_ago_balance,\n+       ProfitAndLossBalanceForAccountInPeriod(ev.c_elementvalue_id, p_startDate - '1 Year'::interval, p_endDate - '1 Year'::interval) one_year_ago_balance,\n+       ProfitAndLossBalanceForAccountInPeriod(ev.c_elementvalue_id, p_startDate, p_endDate)                                           current_balance\n+FROM c_elementvalue ev\n+WHERE TRUE\n+  AND ev.accounttype IN ('E', 'R')", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1d3ba0254ccfdbbb00c48cbd666afd32428e291c"}, "originalPosition": 27}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODc4MzI0MA==", "bodyText": "filtered", "url": "https://github.com/metasfresh/metasfresh/pull/6160#discussion_r378783240", "createdAt": "2020-02-13T10:46:05Z", "author": {"login": "TheBestPessimist"}, "path": "de.metas.acct.base/src/main/sql/postgresql/ddl/functions/ProfitAndLossReport.sql", "diffHunk": "@@ -0,0 +1,39 @@\n+DROP FUNCTION IF EXISTS ProfitAndLossReport(IN p_startDate timestamp, IN p_endDate timestamp, IN p_compareWithPrevious1Year boolean, IN p_compareWithPrevious3Years boolean);\n+DROP FUNCTION IF EXISTS ProfitAndLossReport(IN p_startDate timestamp, IN p_endDate timestamp);\n+\n+CREATE OR REPLACE FUNCTION ProfitAndLossReport(IN p_startDate timestamp, IN p_endDate timestamp)\n+    RETURNS TABLE\n+            (\n+                name            text,\n+                value           text,\n+                isSummary       text,\n+                three_years_ago numeric,\n+                two_years_ago   numeric,\n+                one_year_ago    numeric,\n+                current_period  numeric\n+            )\n+AS\n+$BODY$\n+\n+SELECT ev.name,\n+       ev.value,\n+       ev.issummary::text,\n+       ProfitAndLossBalanceForAccountInPeriod(ev.c_elementvalue_id, p_startDate - '3 Year'::interval, p_endDate - '3 Year'::interval) three_years_ago_balance,\n+       ProfitAndLossBalanceForAccountInPeriod(ev.c_elementvalue_id, p_startDate - '2 Year'::interval, p_endDate - '2 Year'::interval) two_years_ago_balance,\n+       ProfitAndLossBalanceForAccountInPeriod(ev.c_elementvalue_id, p_startDate - '1 Year'::interval, p_endDate - '1 Year'::interval) one_year_ago_balance,\n+       ProfitAndLossBalanceForAccountInPeriod(ev.c_elementvalue_id, p_startDate, p_endDate)                                           current_balance\n+FROM c_elementvalue ev\n+WHERE TRUE\n+  AND ev.accounttype IN ('E', 'R')", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM3ODcwMTE4NQ=="}, "originalCommit": {"oid": "1d3ba0254ccfdbbb00c48cbd666afd32428e291c"}, "originalPosition": 27}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1478, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}