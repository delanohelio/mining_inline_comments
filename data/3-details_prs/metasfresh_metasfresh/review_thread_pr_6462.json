{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDAxMjcyMzkx", "number": 6462, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMToyNDoyMlrODwXVpg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMToyNzoyNVrODwXZMg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDQwNjE0OnYy", "diffSide": "RIGHT", "path": "de.metas.adempiere.adempiere/migration/src/main/sql/postgresql/system/10-de.metas.adempiere/5556570_sys_gh6458_Fix_C_InvoiceLines_With_Invalid_C_Uom_ID_or_Price_Uom_ID.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMToyNDoyMlrOGDUnig==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMjoxNTozN1rOGDWJQw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEzNjcxNA==", "bodyText": "pls add UpdatedBy and Updated with a \"hardcoded\" timestamp, e.g. 2020-04-09 13:23:07.035603+02\non some DBs there might be \"a lot\" of C_InvoiceLines affected by this SQL", "url": "https://github.com/metasfresh/metasfresh/pull/6462#discussion_r406136714", "createdAt": "2020-04-09T11:24:22Z", "author": {"login": "metas-ts"}, "path": "de.metas.adempiere.adempiere/migration/src/main/sql/postgresql/system/10-de.metas.adempiere/5556570_sys_gh6458_Fix_C_InvoiceLines_With_Invalid_C_Uom_ID_or_Price_Uom_ID.sql", "diffHunk": "@@ -0,0 +1,9 @@\n+UPDATE c_invoiceline il", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c7dd1cbb6988856289f631bafe16a827d830961"}, "originalPosition": 1}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE2MTczMQ==", "bodyText": "done", "url": "https://github.com/metasfresh/metasfresh/pull/6462#discussion_r406161731", "createdAt": "2020-04-09T12:15:37Z", "author": {"login": "TheBestPessimist"}, "path": "de.metas.adempiere.adempiere/migration/src/main/sql/postgresql/system/10-de.metas.adempiere/5556570_sys_gh6458_Fix_C_InvoiceLines_With_Invalid_C_Uom_ID_or_Price_Uom_ID.sql", "diffHunk": "@@ -0,0 +1,9 @@\n+UPDATE c_invoiceline il", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEzNjcxNA=="}, "originalCommit": {"oid": "9c7dd1cbb6988856289f631bafe16a827d830961"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjUyMDQxNTIyOnYy", "diffSide": "RIGHT", "path": "de.metas.swat/de.metas.swat.base/src/main/java/org/adempiere/invoice/service/impl/AbstractInvoiceBL.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMToyNzoyNVrOGDUtYw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wOVQxMjoxNzoyOVrOGDWM6Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEzODIxMQ==", "bodyText": "ok - getStockUOMId never returns null", "url": "https://github.com/metasfresh/metasfresh/pull/6462#discussion_r406138211", "createdAt": "2020-04-09T11:27:25Z", "author": {"login": "metas-ts"}, "path": "de.metas.swat/de.metas.swat.base/src/main/java/org/adempiere/invoice/service/impl/AbstractInvoiceBL.java", "diffHunk": "@@ -674,6 +678,29 @@ public void updateDescriptionFromDocTypeTargetId(final org.compiere.model.I_C_In\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic void ensureUOMsAreNotNull(final @NonNull InvoiceId invoiceId)\n+\t{\n+\t\tfinal IInvoiceDAO invoiceDAO = Services.get(IInvoiceDAO.class);\n+\t\tfinal IProductBL productBL = Services.get(IProductBL.class);\n+\n+\t\tfinal List<I_C_InvoiceLine> lines = invoiceDAO.retrieveLines(invoiceId); // // TODO tbp: create this method!\n+\t\tfor (final I_C_InvoiceLine line : lines)\n+\t\t{\n+\t\t\tif (line.getC_UOM_ID() < 1)\n+\t\t\t{\n+\t\t\t\tfinal ProductId productId = ProductId.ofRepoId(line.getM_Product_ID());\n+\t\t\t\tfinal UomId stockUOMId = productBL.getStockUOMId(productId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "9c7dd1cbb6988856289f631bafe16a827d830961"}, "originalPosition": 63}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjE2MjY2NQ==", "bodyText": "Added @NonNull to make that explicit", "url": "https://github.com/metasfresh/metasfresh/pull/6462#discussion_r406162665", "createdAt": "2020-04-09T12:17:29Z", "author": {"login": "TheBestPessimist"}, "path": "de.metas.swat/de.metas.swat.base/src/main/java/org/adempiere/invoice/service/impl/AbstractInvoiceBL.java", "diffHunk": "@@ -674,6 +678,29 @@ public void updateDescriptionFromDocTypeTargetId(final org.compiere.model.I_C_In\n \t\t}\n \t}\n \n+\t@Override\n+\tpublic void ensureUOMsAreNotNull(final @NonNull InvoiceId invoiceId)\n+\t{\n+\t\tfinal IInvoiceDAO invoiceDAO = Services.get(IInvoiceDAO.class);\n+\t\tfinal IProductBL productBL = Services.get(IProductBL.class);\n+\n+\t\tfinal List<I_C_InvoiceLine> lines = invoiceDAO.retrieveLines(invoiceId); // // TODO tbp: create this method!\n+\t\tfor (final I_C_InvoiceLine line : lines)\n+\t\t{\n+\t\t\tif (line.getC_UOM_ID() < 1)\n+\t\t\t{\n+\t\t\t\tfinal ProductId productId = ProductId.ofRepoId(line.getM_Product_ID());\n+\t\t\t\tfinal UomId stockUOMId = productBL.getStockUOMId(productId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwNjEzODIxMQ=="}, "originalCommit": {"oid": "9c7dd1cbb6988856289f631bafe16a827d830961"}, "originalPosition": 63}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1576, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}