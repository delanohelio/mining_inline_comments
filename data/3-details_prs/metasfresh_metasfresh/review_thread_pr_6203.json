{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0Mzc2MjMwMjcx", "number": 6203, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMjoxNDoyMVrODgq9_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMjoxNDoyMVrODgq9_w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjM1NTg1MDIzOnYy", "diffSide": "RIGHT", "path": "de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/api/impl/InvoiceCandDAO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMjoxNDoyMVrOFrAGnw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMi0xOFQxMjoxNDoyMVrOFrAGnw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDM4MDYzNDc4Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t.addEqualsFilter(I_C_Invoice_Candidate.COLUMNNAME_C_Order_ID, orderId)\n          \n          \n            \n            \t\t\t\t.addOnlyActiveRecordsFilter()\n          \n          \n            \n            \t\t\t\t.addEqualsFilter(I_C_Invoice_Candidate.COLUMNNAME_C_Order_ID, orderId)", "url": "https://github.com/metasfresh/metasfresh/pull/6203#discussion_r380634783", "createdAt": "2020-02-18T12:14:21Z", "author": {"login": "metas-ts"}, "path": "de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/api/impl/InvoiceCandDAO.java", "diffHunk": "@@ -1634,22 +1634,36 @@ public String getSQLDefaultFilter(final Properties ctx)\n \t}\n \n \t@Override\n-\tpublic InvoiceCandidateId getFirstInvoiceableInvoiceCandId(final OrderId orderId)\n+\tpublic InvoiceableInvoiceCandIdResult getFirstInvoiceableInvoiceCandId(@NonNull final OrderId orderId)\n \t{\n \t\tfinal IQueryBL queryBL = Services.get(IQueryBL.class);\n-\t\tfinal ICompositeQueryFilter<I_C_Invoice_Candidate> qtyToInvoiceFilter = queryBL.createCompositeQueryFilter(I_C_Invoice_Candidate.class)\n-\t\t\t\t.setJoinOr()\n-\t\t\t\t.addCompareFilter(I_C_Invoice_Candidate.COLUMNNAME_QtyToInvoice, Operator.GREATER, BigDecimal.ZERO)\n-\t\t\t\t.addCompareFilter(I_C_Invoice_Candidate.COLUMNNAME_QtyToInvoice_Override, Operator.GREATER, BigDecimal.ZERO);\n \n-\t\treturn queryBL\n+\t\tfinal List<I_C_Invoice_Candidate> nonFreightCostICs = queryBL\n \t\t\t\t.createQueryBuilder(I_C_Invoice_Candidate.class)\n-\t\t\t\t.addFiltersUnboxed(qtyToInvoiceFilter)\n \t\t\t\t.addEqualsFilter(I_C_Invoice_Candidate.COLUMNNAME_C_Order_ID, orderId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b00485fce04fd00e0c18527c5fe88a96b89f7657"}, "originalPosition": 17}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1499, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}