{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDY1OTEyOTEz", "number": 7122, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwOToxMjoxM1rOEXH7_g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwOToxMzowNFrOEXH9Qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjgyNzUwOnYy", "diffSide": "RIGHT", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/issues/WEBUI_ServicesCompanies_Toggle_Processed.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwOToxMjoxM1rOG-vQEQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwOToxMjoxM1rOG-vQEQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQzOTA1Nw==", "bodyText": "There might be a lot of records to process, so i think it's better to go with\n\nIQueryBL#createCompositeQueryUpdater (=> see e.g. BPBankAccountDAO#deactivateIBANAccountsByBPartnerExcept)\nthen do IQuery#updateDirectly (=> see e.g. AbstractSubscriptionDAO#increaseSeqNosOfSuccessors)\nthen do IModelCacheInvalidationService#invalidate  (=> imho should be OK to invalidate all, with CacheInvalidateMultiRequest#allRecordsForTable)", "url": "https://github.com/metasfresh/metasfresh/pull/7122#discussion_r468439057", "createdAt": "2020-08-11T09:12:13Z", "author": {"login": "metas-ts"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/issues/WEBUI_ServicesCompanies_Toggle_Processed.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.issues;\n+\n+import de.metas.process.IProcessPrecondition;\n+import de.metas.process.IProcessPreconditionsContext;\n+import de.metas.process.JavaProcess;\n+import de.metas.process.Param;\n+import de.metas.process.ProcessPreconditionsResolution;\n+import de.metas.serviceprovider.issue.IssueId;\n+import de.metas.serviceprovider.issue.IssueRepository;\n+import de.metas.serviceprovider.model.I_S_Issue;\n+import de.metas.util.Check;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.ad.dao.IQueryBuilder;\n+import org.adempiere.ad.dao.IQueryFilter;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.compiere.SpringContextHolder;\n+\n+import java.util.List;\n+\n+public class WEBUI_ServicesCompanies_Toggle_Processed extends JavaProcess implements IProcessPrecondition\n+{\n+\tprivate final IssueRepository issueRepository = SpringContextHolder.instance.getBean(IssueRepository.class);\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\n+\n+\tprivate static final String PARAM_PROCESSED = \"Processed\";\n+\t@Param(parameterName = PARAM_PROCESSED, mandatory = true)\n+\tprivate boolean processed;\n+\n+\t@Override\n+\tprotected String doIt() throws Exception\n+\t{\n+\t\tfinal IQueryBuilder<I_S_Issue> selectionQuery = queryBL.createQueryBuilder(I_S_Issue.class);\n+\n+\t\tfinal IQueryFilter<I_S_Issue> selectionFilter = getProcessInfo().getQueryFilterOrElse(null);\n+\t\tif (selectionFilter == null)\n+\t\t{\n+\t\t\tthrow new AdempiereException(\"@NoSelection@\");\n+\t\t}\n+\t\tselectionQuery.filter(selectionFilter);\n+\n+\t\tfinal List<Integer> selectedIssueIds = selectionQuery.create().listIds();\n+\n+\t\tif (Check.isEmpty(selectedIssueIds))\n+\t\t{\n+\t\t\tthrow new AdempiereException(\"@NoSelection@\");\n+\t\t}\n+\n+\t\tselectedIssueIds\n+\t\t\t\t.stream()\n+\t\t\t\t.map(IssueId::ofRepoId)\n+\t\t\t\t.map(issueRepository::getById)\n+\t\t\t\t.peek(issueEntity -> issueEntity.setProcessed(processed))\n+\t\t\t\t.forEach(issueRepository::save);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8493b8eabffbef715196d7ce411c658b657dd557"}, "originalPosition": 78}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjkyNjgzMDc1OnYy", "diffSide": "RIGHT", "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/issues/WEBUI_ServicesCompanies_Toggle_Processed.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwOToxMzowNFrOG-vSAg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0xMVQwOToxMzowNFrOG-vSAg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ2ODQzOTU1NA==", "bodyText": "also filter out thise records that already have the target processed value set", "url": "https://github.com/metasfresh/metasfresh/pull/7122#discussion_r468439554", "createdAt": "2020-08-11T09:13:04Z", "author": {"login": "metas-ts"}, "path": "backend/metasfresh-webui-api/src/main/java/de/metas/ui/web/issues/WEBUI_ServicesCompanies_Toggle_Processed.java", "diffHunk": "@@ -0,0 +1,93 @@\n+/*\n+ * #%L\n+ * metasfresh-webui-api\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.ui.web.issues;\n+\n+import de.metas.process.IProcessPrecondition;\n+import de.metas.process.IProcessPreconditionsContext;\n+import de.metas.process.JavaProcess;\n+import de.metas.process.Param;\n+import de.metas.process.ProcessPreconditionsResolution;\n+import de.metas.serviceprovider.issue.IssueId;\n+import de.metas.serviceprovider.issue.IssueRepository;\n+import de.metas.serviceprovider.model.I_S_Issue;\n+import de.metas.util.Check;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.ad.dao.IQueryBuilder;\n+import org.adempiere.ad.dao.IQueryFilter;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.compiere.SpringContextHolder;\n+\n+import java.util.List;\n+\n+public class WEBUI_ServicesCompanies_Toggle_Processed extends JavaProcess implements IProcessPrecondition\n+{\n+\tprivate final IssueRepository issueRepository = SpringContextHolder.instance.getBean(IssueRepository.class);\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\n+\n+\tprivate static final String PARAM_PROCESSED = \"Processed\";\n+\t@Param(parameterName = PARAM_PROCESSED, mandatory = true)\n+\tprivate boolean processed;\n+\n+\t@Override\n+\tprotected String doIt() throws Exception\n+\t{\n+\t\tfinal IQueryBuilder<I_S_Issue> selectionQuery = queryBL.createQueryBuilder(I_S_Issue.class);\n+\n+\t\tfinal IQueryFilter<I_S_Issue> selectionFilter = getProcessInfo().getQueryFilterOrElse(null);\n+\t\tif (selectionFilter == null)\n+\t\t{\n+\t\t\tthrow new AdempiereException(\"@NoSelection@\");\n+\t\t}\n+\t\tselectionQuery.filter(selectionFilter);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "8493b8eabffbef715196d7ce411c658b657dd557"}, "originalPosition": 64}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1363, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}