{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDgzNjg0Mjc1", "number": 9922, "reviewThreads": {"totalCount": 5, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMzoxODoxOFrOEiHHcw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMzo1MTozM1rOEiIN7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MjAzNjM1OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/receipt/ReceiptRestController.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMzoxODoxOFrOHPzIKw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMzoxODoxOFrOHPzIKw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMyODM2Mw==", "bodyText": "just a minor thing: i believe we should prefer ImmutableList and use immutable collections be default, unless we explicitly want them to be mutable", "url": "https://github.com/metasfresh/metasfresh/pull/9922#discussion_r486328363", "createdAt": "2020-09-10T13:18:18Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/receipt/ReceiptRestController.java", "diffHunk": "@@ -84,17 +85,37 @@ public ResponseEntity createReceipts(@RequestBody final JsonCreateReceiptsReques\n \t\t}\n \t}\n \n+\tprivate JsonCreateReceiptsResponse createReceipts_0(@NonNull final JsonCreateReceiptsRequest jsonCreateReceiptsRequest)\n+\t{\n+\t\tfinal List<InOutId> createdReceiptIds = jsonCreateReceiptsRequest.getJsonCreateReceiptInfoList().isEmpty()\n+\t\t\t\t? ImmutableList.of()\n+\t\t\t\t: receiptService.updateReceiptCandidatesAndGenerateReceipts(jsonCreateReceiptsRequest);\n+\n+\t\tfinal List<InOutId> createdReturnIds = jsonCreateReceiptsRequest.getJsonCreateCustomerReturnInfoList().isEmpty()\n+\t\t\t\t? ImmutableList.of()\n+\t\t\t\t: customerReturnService.handleReturns(jsonCreateReceiptsRequest.getJsonCreateCustomerReturnInfoList());\n+\n+\t\treturn toJsonCreateReceiptsResponse(createdReceiptIds, createdReturnIds);\n+\t}\n+\n \t@NonNull\n-\tprivate JsonCreateReceiptsResponse toJsonCreateReceiptsResponse(@NonNull final List<InOutId> receiptIds)\n+\tprivate JsonCreateReceiptsResponse toJsonCreateReceiptsResponse(@NonNull final List<InOutId> receiptIds, @NonNull final List<InOutId> returnIds)\n \t{\n-\t\tfinal List<JsonMetasfreshId> jsonIds = receiptIds\n+\t\tfinal List<JsonMetasfreshId> jsonReceiptIds = receiptIds\n+\t\t\t\t.stream()\n+\t\t\t\t.map(InOutId::getRepoId)\n+\t\t\t\t.map(JsonMetasfreshId::of)\n+\t\t\t\t.collect(Collectors.toList());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "356f7e2b5c071451ff11bb06375c91de4efc35e0"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MjEwNzMwOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/IHandlingUnitsBL.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMzozMzo0MlrOHPz0Lg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwOTo0ODo1OFrOHQXsXw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMzOTYzMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tvoid setHUStatus(final I_M_HU hu, final IContextAware contextProvider, final String huStatus);\n          \n          \n            \n            \tvoid setHUStatus(I_M_HU hu, IContextAware contextProvider, String huStatus);", "url": "https://github.com/metasfresh/metasfresh/pull/9922#discussion_r486339630", "createdAt": "2020-09-10T13:33:42Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/IHandlingUnitsBL.java", "diffHunk": "@@ -548,4 +545,6 @@ static I_M_HU_PI_Item_Product extractPIItemProductOrNull(final I_M_HU hu)\n \t}\n \n \tAttributesKey getStorageRelevantAttributesKey(@NonNull I_M_HU hu);\n+\n+\tvoid setHUStatus(final I_M_HU hu, final IContextAware contextProvider, final String huStatus);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "356f7e2b5c071451ff11bb06375c91de4efc35e0"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM0MDE0OQ==", "bodyText": "..also, why not have this method in IHUStatusBL directly?", "url": "https://github.com/metasfresh/metasfresh/pull/9922#discussion_r486340149", "createdAt": "2020-09-10T13:34:25Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/IHandlingUnitsBL.java", "diffHunk": "@@ -548,4 +545,6 @@ static I_M_HU_PI_Item_Product extractPIItemProductOrNull(final I_M_HU hu)\n \t}\n \n \tAttributesKey getStorageRelevantAttributesKey(@NonNull I_M_HU hu);\n+\n+\tvoid setHUStatus(final I_M_HU hu, final IContextAware contextProvider, final String huStatus);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMzOTYzMA=="}, "originalCommit": {"oid": "356f7e2b5c071451ff11bb06375c91de4efc35e0"}, "originalPosition": 60}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkyNzQ1NQ==", "bodyText": "mainly because I'm also persisting the HU after the status change, so I was thinking the Status API shouldn;t do that :-?", "url": "https://github.com/metasfresh/metasfresh/pull/9922#discussion_r486927455", "createdAt": "2020-09-11T09:48:58Z", "author": {"login": "pvpurcarcosmin"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/IHandlingUnitsBL.java", "diffHunk": "@@ -548,4 +545,6 @@ static I_M_HU_PI_Item_Product extractPIItemProductOrNull(final I_M_HU hu)\n \t}\n \n \tAttributesKey getStorageRelevantAttributesKey(@NonNull I_M_HU hu);\n+\n+\tvoid setHUStatus(final I_M_HU hu, final IContextAware contextProvider, final String huStatus);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjMzOTYzMA=="}, "originalCommit": {"oid": "356f7e2b5c071451ff11bb06375c91de4efc35e0"}, "originalPosition": 60}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MjEyMjgzOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/inout/impl/CustomerReturnRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMzozNjo0NlrOHPz9_Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwOTo1MDowNFrOHQXw3A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM0MjE0MQ==", "bodyText": "eeee..is this really a repository though? maybe better call it sth like CustomerReturnInOutRecordFactory (...or sth shorter)", "url": "https://github.com/metasfresh/metasfresh/pull/9922#discussion_r486342141", "createdAt": "2020-09-10T13:36:46Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/inout/impl/CustomerReturnRepository.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * #%L\n+ * de.metas.handlingunits.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.handlingunits.inout.impl;\n+\n+import de.metas.handlingunits.model.I_M_InOut;\n+import de.metas.handlingunits.model.I_M_InOutLine;\n+import de.metas.inout.IInOutDAO;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.adempiere.warehouse.WarehouseId;\n+import org.adempiere.warehouse.api.IWarehouseBL;\n+import org.springframework.stereotype.Repository;\n+\n+import static org.compiere.model.X_M_InOut.MOVEMENTTYPE_CustomerReturns;\n+import static org.compiere.util.TimeUtil.asTimestamp;\n+\n+@Repository\n+public class CustomerReturnRepository", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "356f7e2b5c071451ff11bb06375c91de4efc35e0"}, "originalPosition": 39}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkyODYwNA==", "bodyText": "true... will rename it", "url": "https://github.com/metasfresh/metasfresh/pull/9922#discussion_r486928604", "createdAt": "2020-09-11T09:50:04Z", "author": {"login": "pvpurcarcosmin"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/inout/impl/CustomerReturnRepository.java", "diffHunk": "@@ -0,0 +1,106 @@\n+/*\n+ * #%L\n+ * de.metas.handlingunits.base\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.handlingunits.inout.impl;\n+\n+import de.metas.handlingunits.model.I_M_InOut;\n+import de.metas.handlingunits.model.I_M_InOutLine;\n+import de.metas.inout.IInOutDAO;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.adempiere.warehouse.WarehouseId;\n+import org.adempiere.warehouse.api.IWarehouseBL;\n+import org.springframework.stereotype.Repository;\n+\n+import static org.compiere.model.X_M_InOut.MOVEMENTTYPE_CustomerReturns;\n+import static org.compiere.util.TimeUtil.asTimestamp;\n+\n+@Repository\n+public class CustomerReturnRepository", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM0MjE0MQ=="}, "originalCommit": {"oid": "356f7e2b5c071451ff11bb06375c91de4efc35e0"}, "originalPosition": 39}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MjE3ODIxOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/model/validator/M_InOut.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMzo0NToyNFrOHP0jgg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMVQwOTo1MTowNFrOHQX0dA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM1MTc0Ng==", "bodyText": "do we need this though? i thought we just created them?", "url": "https://github.com/metasfresh/metasfresh/pull/9922#discussion_r486351746", "createdAt": "2020-09-10T13:45:24Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/model/validator/M_InOut.java", "diffHunk": "@@ -291,9 +295,13 @@ public void generateHUsForCustomerReturn(final I_M_InOut customerReturn)\n \n \t\tfinal List<I_M_HU> existingHandlingUnits = Services.get(IHUInOutDAO.class).retrieveHandlingUnits(customerReturn);\n \n+\t\t// the handling units are already created\n \t\tif (!existingHandlingUnits.isEmpty())\n \t\t{\n-\t\t\t// the handling units are already created\n+\t\t\tfinal IContextAware contextProvider = InterfaceWrapperHelper.getContextAware(customerReturn);\n+\n+\t\t\t//make sure they all have status active\n+\t\t\texistingHandlingUnits.forEach(hu -> handlingUnitsBL.setHUStatus(hu, contextProvider, X_M_HU.HUSTATUS_Active));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "356f7e2b5c071451ff11bb06375c91de4efc35e0"}, "originalPosition": 74}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjkyOTUyNA==", "bodyText": "yep, as I'm creating them with status planning, and change it to active only when the document is completed.", "url": "https://github.com/metasfresh/metasfresh/pull/9922#discussion_r486929524", "createdAt": "2020-09-11T09:51:04Z", "author": {"login": "pvpurcarcosmin"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/model/validator/M_InOut.java", "diffHunk": "@@ -291,9 +295,13 @@ public void generateHUsForCustomerReturn(final I_M_InOut customerReturn)\n \n \t\tfinal List<I_M_HU> existingHandlingUnits = Services.get(IHUInOutDAO.class).retrieveHandlingUnits(customerReturn);\n \n+\t\t// the handling units are already created\n \t\tif (!existingHandlingUnits.isEmpty())\n \t\t{\n-\t\t\t// the handling units are already created\n+\t\t\tfinal IContextAware contextProvider = InterfaceWrapperHelper.getContextAware(customerReturn);\n+\n+\t\t\t//make sure they all have status active\n+\t\t\texistingHandlingUnits.forEach(hu -> handlingUnitsBL.setHUStatus(hu, contextProvider, X_M_HU.HUSTATUS_Active));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM1MTc0Ng=="}, "originalCommit": {"oid": "356f7e2b5c071451ff11bb06375c91de4efc35e0"}, "originalPosition": 74}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA0MjIxNjc5OnYy", "diffSide": "RIGHT", "path": "misc/services/camel/de-metas-camel-shipping/src/main/java/de/metas/camel/shipping/XmlToJsonBaseProcessor.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMzo1MTozM1rOHP0-iA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0xMFQxMzo1MTozM1rOHP0-iA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ4NjM1ODY2NA==", "bodyText": "teo proposed that we move this to a utility class, because it has no state and therefore doesn't really need to be a super-class..\npls coordinate with him to avaoid nasty conflicts", "url": "https://github.com/metasfresh/metasfresh/pull/9922#discussion_r486358664", "createdAt": "2020-09-10T13:51:33Z", "author": {"login": "metas-ts"}, "path": "misc/services/camel/de-metas-camel-shipping/src/main/java/de/metas/camel/shipping/XmlToJsonBaseProcessor.java", "diffHunk": "@@ -40,18 +40,15 @@\n import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n-import java.util.function.BiFunction;\n import java.util.function.Function;\n-import java.util.stream.Collectors;\n \n public class XmlToJsonBaseProcessor", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "356f7e2b5c071451ff11bb06375c91de4efc35e0"}, "originalPosition": 20}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1284, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}