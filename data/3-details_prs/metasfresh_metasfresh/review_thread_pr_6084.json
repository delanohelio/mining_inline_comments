{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0MzY2NDExNDYz", "number": 6084, "reviewThreads": {"totalCount": 26, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwOTozODo0MVrODsl1XQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDoyNzoxMFrODteLtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MDgzODA1OnYy", "diffSide": "RIGHT", "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/user/UserId.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQwOTozODo0MVrOF9hf_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMDozMTo0NVrOF9jcVQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA1NjMxOQ==", "bodyText": "why not using ofRepoIdOrNull like we have it everywhere (e.g. BPartnerId)?", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400056319", "createdAt": "2020-03-30T09:38:41Z", "author": {"login": "teosarca"}, "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/user/UserId.java", "diffHunk": "@@ -124,4 +124,9 @@ public boolean isRegularUser()\n \t{\n \t\treturn !isSystemUser();\n \t}\n+\n+\tpublic static UserId ofNullableRepoId(final int repoId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77a1a5a18ef82556af7ba7773aa7c28b23a141e6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA3Njc2MQ==", "bodyText": "bc in this case, ofRepoIdOrNull is not working like everywhere else and returns 0 instead of null if parameter repoId is 0.", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400076761", "createdAt": "2020-03-30T10:12:03Z", "author": {"login": "pvpurcarcosmin"}, "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/user/UserId.java", "diffHunk": "@@ -124,4 +124,9 @@ public boolean isRegularUser()\n \t{\n \t\treturn !isSystemUser();\n \t}\n+\n+\tpublic static UserId ofNullableRepoId(final int repoId)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA1NjMxOQ=="}, "originalCommit": {"oid": "77a1a5a18ef82556af7ba7773aa7c28b23a141e6"}, "originalPosition": 5}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA4ODE0OQ==", "bodyText": "AFAU the gist is\n\nthe problem is that we then have two method that mostly do the same. and it it's not clear from the name which does what (i didn't yet check the whole code)", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400088149", "createdAt": "2020-03-30T10:31:45Z", "author": {"login": "metas-ts"}, "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/user/UserId.java", "diffHunk": "@@ -124,4 +124,9 @@ public boolean isRegularUser()\n \t{\n \t\treturn !isSystemUser();\n \t}\n+\n+\tpublic static UserId ofNullableRepoId(final int repoId)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA1NjMxOQ=="}, "originalCommit": {"oid": "77a1a5a18ef82556af7ba7773aa7c28b23a141e6"}, "originalPosition": 5}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTA1MTU2OnYy", "diffSide": "RIGHT", "path": "de.metas.fresh/de.metas.fresh.base/pom.xml", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMDozNTowMVrOF9jjrg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMDozNTowMVrOF9jjrg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA5MDAzMA==", "bodyText": "weird, i wonder why de.metas.salescandidate.base wasn't there before..but seems to make sense", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400090030", "createdAt": "2020-03-30T10:35:01Z", "author": {"login": "metas-ts"}, "path": "de.metas.fresh/de.metas.fresh.base/pom.xml", "diffHunk": "@@ -281,6 +281,18 @@\n \t\t\t<version>${metasfresh.version}</version>\n \t\t</dependency>\n \n+\t\t<dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77a1a5a18ef82556af7ba7773aa7c28b23a141e6"}, "originalPosition": 4}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTEwNTY2OnYy", "diffSide": "RIGHT", "path": "de.metas.issue.tracking.github/pom.xml", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMDo1MDo1NVrOF9kFCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjo1NDoyNFrOF9oSEg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA5ODU3MQ==", "bodyText": "why optional (tbh i never really understood that flag)?", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400098571", "createdAt": "2020-03-30T10:50:55Z", "author": {"login": "metas-ts"}, "path": "de.metas.issue.tracking.github/pom.xml", "diffHunk": "@@ -0,0 +1,65 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>de.metas.parent</artifactId>\n+        <groupId>de.metas</groupId>\n+        <version>10.0.0</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <groupId>de.metas.issue.tracking</groupId>\n+    <artifactId>de.metas.issue.tracking.github</artifactId>\n+\n+    <properties>\n+        <migration-sql-basedir></migration-sql-basedir>\n+        <metasfresh.version>[1,10.0.0]</metasfresh.version>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-api</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-context</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-annotations</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.projectlombok</groupId>\n+            <artifactId>lombok</artifactId>\n+            <scope>provided</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-web</artifactId>\n+        </dependency>\n+\n+        <dependency>", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "77a1a5a18ef82556af7ba7773aa7c28b23a141e6"}, "originalPosition": 47}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE2NzQ0Mg==", "bodyText": "basically, it will not be included in the class path of a module that's dependent on this one. Or in other words, if let's say there is a module Test that has a dependency on de.metas.issue.tracking.github, the optional dependencies from ..github will not be added in class path for Test.\nAnyway, I'll remove the dependency as I've dropped the .properties  file approach somewhere down the road and it's not needed anymore.", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400167442", "createdAt": "2020-03-30T12:54:24Z", "author": {"login": "pvpurcarcosmin"}, "path": "de.metas.issue.tracking.github/pom.xml", "diffHunk": "@@ -0,0 +1,65 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n+         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+    <parent>\n+        <artifactId>de.metas.parent</artifactId>\n+        <groupId>de.metas</groupId>\n+        <version>10.0.0</version>\n+        <relativePath>../pom.xml</relativePath>\n+    </parent>\n+    <modelVersion>4.0.0</modelVersion>\n+\n+    <groupId>de.metas.issue.tracking</groupId>\n+    <artifactId>de.metas.issue.tracking.github</artifactId>\n+\n+    <properties>\n+        <migration-sql-basedir></migration-sql-basedir>\n+        <metasfresh.version>[1,10.0.0]</metasfresh.version>\n+    </properties>\n+\n+    <dependencies>\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-api</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-context</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>com.fasterxml.jackson.core</groupId>\n+            <artifactId>jackson-annotations</artifactId>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.projectlombok</groupId>\n+            <artifactId>lombok</artifactId>\n+            <scope>provided</scope>\n+        </dependency>\n+\n+        <dependency>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-web</artifactId>\n+        </dependency>\n+\n+        <dependency>", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDA5ODU3MQ=="}, "originalCommit": {"oid": "77a1a5a18ef82556af7ba7773aa7c28b23a141e6"}, "originalPosition": 47}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTI3NTgzOnYy", "diffSide": "RIGHT", "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/milestone/MilestoneRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMTo0MTozOFrOF9luBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjo1NDo0NFrOF9oSzA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyNTQ0NA==", "bodyText": "InterfaceWrapperHelper.loadOrNew does this already", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400125444", "createdAt": "2020-03-30T11:41:38Z", "author": {"login": "metas-ts"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/milestone/MilestoneRepository.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.milestone;\n+\n+import de.metas.serviceprovider.model.I_S_Milestone;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.springframework.stereotype.Repository;\n+\n+import java.sql.Timestamp;\n+import java.util.Optional;\n+\n+@Repository\n+public class MilestoneRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\n+\tpublic MilestoneId store(@NonNull final Milestone milestone)\n+\t{\n+\t\tfinal I_S_Milestone record = milestone.getMilestoneId() != null\n+\t\t\t\t? InterfaceWrapperHelper.load(milestone.getMilestoneId(), I_S_Milestone.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE2NzYyOA==", "bodyText": "\ud83e\udd26\u200d\u2642", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400167628", "createdAt": "2020-03-30T12:54:44Z", "author": {"login": "pvpurcarcosmin"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/milestone/MilestoneRepository.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.milestone;\n+\n+import de.metas.serviceprovider.model.I_S_Milestone;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.springframework.stereotype.Repository;\n+\n+import java.sql.Timestamp;\n+import java.util.Optional;\n+\n+@Repository\n+public class MilestoneRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\n+\tpublic MilestoneId store(@NonNull final Milestone milestone)\n+\t{\n+\t\tfinal I_S_Milestone record = milestone.getMilestoneId() != null\n+\t\t\t\t? InterfaceWrapperHelper.load(milestone.getMilestoneId(), I_S_Milestone.class)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEyNTQ0NA=="}, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTM0ODUwOnYy", "diffSide": "RIGHT", "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/budgetissue/BudgetIssueRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjowMzoyM1rOF9mbSA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjowMzoyM1rOF9mbSA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEzNzAzMg==", "bodyText": "we have a dedicated method InterfaceWratterHelper.loadOrNew() for this", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400137032", "createdAt": "2020-03-30T12:03:23Z", "author": {"login": "metas-ts"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/budgetissue/BudgetIssueRepository.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.budgetissue;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.organization.OrgId;\n+import de.metas.serviceprovider.external.issuedetails.ExternalIssueDetailsRepository;\n+import de.metas.serviceprovider.milestone.MilestoneId;\n+import de.metas.serviceprovider.model.I_S_Budget_Issue;\n+import de.metas.serviceprovider.model.I_S_ExternalIssueDetail;\n+import de.metas.uom.UomId;\n+import de.metas.user.UserId;\n+import de.metas.util.Check;\n+import de.metas.util.NumberUtils;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.Optional;\n+\n+@Repository\n+public class BudgetIssueRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\n+\tprivate final ExternalIssueDetailsRepository externalIssueDetailsRepository;\n+\n+\tpublic BudgetIssueRepository(final ExternalIssueDetailsRepository externalIssueDetailsRepository)\n+\t{\n+\t\tthis.externalIssueDetailsRepository = externalIssueDetailsRepository;\n+\t}\n+\n+\tpublic BudgetIssue store(final BudgetIssue budgetIssue)\n+\t{\n+\t\tfinal I_S_Budget_Issue record;\n+\n+\t\tif (budgetIssue.getBudgetIssueId() != null)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 59}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTM1MDM5OnYy", "diffSide": "RIGHT", "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/budgetissue/BudgetIssueRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjowMzo1MlrOF9mccw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjowMzo1MlrOF9mccw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEzNzMzMQ==", "bodyText": "pls call it save to be in line with our conventions", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400137331", "createdAt": "2020-03-30T12:03:52Z", "author": {"login": "metas-ts"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/budgetissue/BudgetIssueRepository.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.budgetissue;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.organization.OrgId;\n+import de.metas.serviceprovider.external.issuedetails.ExternalIssueDetailsRepository;\n+import de.metas.serviceprovider.milestone.MilestoneId;\n+import de.metas.serviceprovider.model.I_S_Budget_Issue;\n+import de.metas.serviceprovider.model.I_S_ExternalIssueDetail;\n+import de.metas.uom.UomId;\n+import de.metas.user.UserId;\n+import de.metas.util.Check;\n+import de.metas.util.NumberUtils;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.Optional;\n+\n+@Repository\n+public class BudgetIssueRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\n+\tprivate final ExternalIssueDetailsRepository externalIssueDetailsRepository;\n+\n+\tpublic BudgetIssueRepository(final ExternalIssueDetailsRepository externalIssueDetailsRepository)\n+\t{\n+\t\tthis.externalIssueDetailsRepository = externalIssueDetailsRepository;\n+\t}\n+\n+\tpublic BudgetIssue store(final BudgetIssue budgetIssue)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 55}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTM1MjE4OnYy", "diffSide": "RIGHT", "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/budgetissue/BudgetIssueRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjowNDoyMFrOF9mdew==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjowNDoyMFrOF9mdew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEzNzU5NQ==", "bodyText": "here you should use saveRecord (conventions).", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400137595", "createdAt": "2020-03-30T12:04:20Z", "author": {"login": "metas-ts"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/budgetissue/BudgetIssueRepository.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.budgetissue;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.organization.OrgId;\n+import de.metas.serviceprovider.external.issuedetails.ExternalIssueDetailsRepository;\n+import de.metas.serviceprovider.milestone.MilestoneId;\n+import de.metas.serviceprovider.model.I_S_Budget_Issue;\n+import de.metas.serviceprovider.model.I_S_ExternalIssueDetail;\n+import de.metas.uom.UomId;\n+import de.metas.user.UserId;\n+import de.metas.util.Check;\n+import de.metas.util.NumberUtils;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.Optional;\n+\n+@Repository\n+public class BudgetIssueRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\n+\tprivate final ExternalIssueDetailsRepository externalIssueDetailsRepository;\n+\n+\tpublic BudgetIssueRepository(final ExternalIssueDetailsRepository externalIssueDetailsRepository)\n+\t{\n+\t\tthis.externalIssueDetailsRepository = externalIssueDetailsRepository;\n+\t}\n+\n+\tpublic BudgetIssue store(final BudgetIssue budgetIssue)\n+\t{\n+\t\tfinal I_S_Budget_Issue record;\n+\n+\t\tif (budgetIssue.getBudgetIssueId() != null)\n+\t\t{\n+\t\t\trecord = InterfaceWrapperHelper.load(budgetIssue.getBudgetIssueId(), I_S_Budget_Issue.class);\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\trecord = InterfaceWrapperHelper.newInstance(I_S_Budget_Issue.class);\n+\t\t}\n+\t\trecord.setAD_Org_ID(budgetIssue.getOrgId().getRepoId());\n+\n+\t\trecord.setName(budgetIssue.getName());\n+\t\trecord.setDescription(budgetIssue.getDescription());\n+\t\trecord.setBudget_Issue_Type(budgetIssue.getType().getValue());\n+\t\trecord.setProcessed(budgetIssue.isProcessed());\n+\n+\t\trecord.setS_Current_Milestone_ID(NumberUtils.asInt(budgetIssue.getMilestoneId(), -1));\n+\n+\t\trecord.setEstimatedEffort(budgetIssue.getEstimatedEffort());\n+\n+\t\trecord.setBudgetedEffort(budgetIssue.getBudgetedEffort());\n+\n+\t\trecord.setAD_User_ID(NumberUtils.asInt(budgetIssue.getAssigneeId(), -1));\n+\n+\t\trecord.setExternalId(budgetIssue.getExternalIssueId());\n+\t\trecord.setExternalIssueNo(budgetIssue.getExternalIssueNo());\n+\t\trecord.setIssueURL(budgetIssue.getExternalIssueURL());\n+\n+\t\tInterfaceWrapperHelper.save(record);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 86}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTM1NDk3OnYy", "diffSide": "RIGHT", "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/budgetissue/BudgetIssueRepository.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjowNToxNlrOF9mfNA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwNzoxMzozM1rOF-IK7w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEzODAzNg==", "bodyText": "i think here you forgot to load the details", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400138036", "createdAt": "2020-03-30T12:05:16Z", "author": {"login": "metas-ts"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/budgetissue/BudgetIssueRepository.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.budgetissue;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.organization.OrgId;\n+import de.metas.serviceprovider.external.issuedetails.ExternalIssueDetailsRepository;\n+import de.metas.serviceprovider.milestone.MilestoneId;\n+import de.metas.serviceprovider.model.I_S_Budget_Issue;\n+import de.metas.serviceprovider.model.I_S_ExternalIssueDetail;\n+import de.metas.uom.UomId;\n+import de.metas.user.UserId;\n+import de.metas.util.Check;\n+import de.metas.util.NumberUtils;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.Optional;\n+\n+@Repository\n+public class BudgetIssueRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\n+\tprivate final ExternalIssueDetailsRepository externalIssueDetailsRepository;\n+\n+\tpublic BudgetIssueRepository(final ExternalIssueDetailsRepository externalIssueDetailsRepository)\n+\t{\n+\t\tthis.externalIssueDetailsRepository = externalIssueDetailsRepository;\n+\t}\n+\n+\tpublic BudgetIssue store(final BudgetIssue budgetIssue)\n+\t{\n+\t\tfinal I_S_Budget_Issue record;\n+\n+\t\tif (budgetIssue.getBudgetIssueId() != null)\n+\t\t{\n+\t\t\trecord = InterfaceWrapperHelper.load(budgetIssue.getBudgetIssueId(), I_S_Budget_Issue.class);\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\trecord = InterfaceWrapperHelper.newInstance(I_S_Budget_Issue.class);\n+\t\t}\n+\t\trecord.setAD_Org_ID(budgetIssue.getOrgId().getRepoId());\n+\n+\t\trecord.setName(budgetIssue.getName());\n+\t\trecord.setDescription(budgetIssue.getDescription());\n+\t\trecord.setBudget_Issue_Type(budgetIssue.getType().getValue());\n+\t\trecord.setProcessed(budgetIssue.isProcessed());\n+\n+\t\trecord.setS_Current_Milestone_ID(NumberUtils.asInt(budgetIssue.getMilestoneId(), -1));\n+\n+\t\trecord.setEstimatedEffort(budgetIssue.getEstimatedEffort());\n+\n+\t\trecord.setBudgetedEffort(budgetIssue.getBudgetedEffort());\n+\n+\t\trecord.setAD_User_ID(NumberUtils.asInt(budgetIssue.getAssigneeId(), -1));\n+\n+\t\trecord.setExternalId(budgetIssue.getExternalIssueId());\n+\t\trecord.setExternalIssueNo(budgetIssue.getExternalIssueNo());\n+\t\trecord.setIssueURL(budgetIssue.getExternalIssueURL());\n+\n+\t\tInterfaceWrapperHelper.save(record);\n+\n+\t\tfinal BudgetIssueId budgetIssueId = BudgetIssueId.ofRepoId(record.getS_Budget_Issue_ID());\n+\t\tbudgetIssue.setBudgetIssueId(budgetIssueId);\n+\n+\t\tpersistIssueDetails(budgetIssue);\n+\n+\t\treturn budgetIssue;\n+\t}\n+\n+\tpublic Optional<BudgetIssue> getEntityByExternalId(@NonNull final String externalIssueId)\n+\t{\n+\t\t final I_S_Budget_Issue budget_issue = queryBL\n+\t\t\t\t.createQueryBuilder(I_S_Budget_Issue.class)\n+\t\t\t\t.addOnlyActiveRecordsFilter()\n+\t\t\t\t.addEqualsFilter(I_S_Budget_Issue.COLUMNNAME_ExternalId, externalIssueId)\n+\t\t\t\t.create()\n+\t\t\t\t.firstOnly(I_S_Budget_Issue.class);\n+\n+\t\t return budget_issue != null ? Optional.of(buildBudgetIssueEntity(budget_issue)) : Optional.empty();\n+\t}\n+\n+\tprivate BudgetIssue buildBudgetIssueEntity(final I_S_Budget_Issue record)\n+\t{\n+\n+\t\treturn BudgetIssue.builder()\n+\t\t\t\t.orgId(OrgId.ofRepoId(record.getAD_Org_ID()))\n+\t\t\t\t.budgetIssueId(BudgetIssueId.ofRepoId(record.getS_Budget_Issue_ID()))\n+\t\t\t\t.effortUomId(UomId.ofRepoId(record.getEffort_UOM_ID()))\n+\t\t\t\t.milestoneId(MilestoneId.ofRepoIdOrNull(record.getS_Current_Milestone_ID()))\n+\t\t\t\t.assigneeId(UserId.ofNullableRepoId(record.getAD_User_ID()))\n+\t\t\t\t.name(record.getName())\n+\t\t\t\t.description(record.getDescription())\n+\t\t\t\t.type(BudgetIssueType.getTypeByValue(record.getBudget_Issue_Type()))\n+\t\t\t\t.processed(record.isProcessed())\n+\t\t\t\t.estimatedEffort(record.getEstimatedEffort())\n+\t\t\t\t.budgetedEffort(record.getBudgetedEffort())\n+\t\t\t\t.externalIssueId(record.getExternalId())\n+\t\t\t\t.externalIssueNo(record.getExternalIssueNo())\n+\t\t\t\t.externalIssueURL(record.getIssueURL())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE2OTgzMA==", "bodyText": "Not really, there is just no need to load them at this point.", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400169830", "createdAt": "2020-03-30T12:58:09Z", "author": {"login": "pvpurcarcosmin"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/budgetissue/BudgetIssueRepository.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.budgetissue;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.organization.OrgId;\n+import de.metas.serviceprovider.external.issuedetails.ExternalIssueDetailsRepository;\n+import de.metas.serviceprovider.milestone.MilestoneId;\n+import de.metas.serviceprovider.model.I_S_Budget_Issue;\n+import de.metas.serviceprovider.model.I_S_ExternalIssueDetail;\n+import de.metas.uom.UomId;\n+import de.metas.user.UserId;\n+import de.metas.util.Check;\n+import de.metas.util.NumberUtils;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.Optional;\n+\n+@Repository\n+public class BudgetIssueRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\n+\tprivate final ExternalIssueDetailsRepository externalIssueDetailsRepository;\n+\n+\tpublic BudgetIssueRepository(final ExternalIssueDetailsRepository externalIssueDetailsRepository)\n+\t{\n+\t\tthis.externalIssueDetailsRepository = externalIssueDetailsRepository;\n+\t}\n+\n+\tpublic BudgetIssue store(final BudgetIssue budgetIssue)\n+\t{\n+\t\tfinal I_S_Budget_Issue record;\n+\n+\t\tif (budgetIssue.getBudgetIssueId() != null)\n+\t\t{\n+\t\t\trecord = InterfaceWrapperHelper.load(budgetIssue.getBudgetIssueId(), I_S_Budget_Issue.class);\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\trecord = InterfaceWrapperHelper.newInstance(I_S_Budget_Issue.class);\n+\t\t}\n+\t\trecord.setAD_Org_ID(budgetIssue.getOrgId().getRepoId());\n+\n+\t\trecord.setName(budgetIssue.getName());\n+\t\trecord.setDescription(budgetIssue.getDescription());\n+\t\trecord.setBudget_Issue_Type(budgetIssue.getType().getValue());\n+\t\trecord.setProcessed(budgetIssue.isProcessed());\n+\n+\t\trecord.setS_Current_Milestone_ID(NumberUtils.asInt(budgetIssue.getMilestoneId(), -1));\n+\n+\t\trecord.setEstimatedEffort(budgetIssue.getEstimatedEffort());\n+\n+\t\trecord.setBudgetedEffort(budgetIssue.getBudgetedEffort());\n+\n+\t\trecord.setAD_User_ID(NumberUtils.asInt(budgetIssue.getAssigneeId(), -1));\n+\n+\t\trecord.setExternalId(budgetIssue.getExternalIssueId());\n+\t\trecord.setExternalIssueNo(budgetIssue.getExternalIssueNo());\n+\t\trecord.setIssueURL(budgetIssue.getExternalIssueURL());\n+\n+\t\tInterfaceWrapperHelper.save(record);\n+\n+\t\tfinal BudgetIssueId budgetIssueId = BudgetIssueId.ofRepoId(record.getS_Budget_Issue_ID());\n+\t\tbudgetIssue.setBudgetIssueId(budgetIssueId);\n+\n+\t\tpersistIssueDetails(budgetIssue);\n+\n+\t\treturn budgetIssue;\n+\t}\n+\n+\tpublic Optional<BudgetIssue> getEntityByExternalId(@NonNull final String externalIssueId)\n+\t{\n+\t\t final I_S_Budget_Issue budget_issue = queryBL\n+\t\t\t\t.createQueryBuilder(I_S_Budget_Issue.class)\n+\t\t\t\t.addOnlyActiveRecordsFilter()\n+\t\t\t\t.addEqualsFilter(I_S_Budget_Issue.COLUMNNAME_ExternalId, externalIssueId)\n+\t\t\t\t.create()\n+\t\t\t\t.firstOnly(I_S_Budget_Issue.class);\n+\n+\t\t return budget_issue != null ? Optional.of(buildBudgetIssueEntity(budget_issue)) : Optional.empty();\n+\t}\n+\n+\tprivate BudgetIssue buildBudgetIssueEntity(final I_S_Budget_Issue record)\n+\t{\n+\n+\t\treturn BudgetIssue.builder()\n+\t\t\t\t.orgId(OrgId.ofRepoId(record.getAD_Org_ID()))\n+\t\t\t\t.budgetIssueId(BudgetIssueId.ofRepoId(record.getS_Budget_Issue_ID()))\n+\t\t\t\t.effortUomId(UomId.ofRepoId(record.getEffort_UOM_ID()))\n+\t\t\t\t.milestoneId(MilestoneId.ofRepoIdOrNull(record.getS_Current_Milestone_ID()))\n+\t\t\t\t.assigneeId(UserId.ofNullableRepoId(record.getAD_User_ID()))\n+\t\t\t\t.name(record.getName())\n+\t\t\t\t.description(record.getDescription())\n+\t\t\t\t.type(BudgetIssueType.getTypeByValue(record.getBudget_Issue_Type()))\n+\t\t\t\t.processed(record.isProcessed())\n+\t\t\t\t.estimatedEffort(record.getEstimatedEffort())\n+\t\t\t\t.budgetedEffort(record.getBudgetedEffort())\n+\t\t\t\t.externalIssueId(record.getExternalId())\n+\t\t\t\t.externalIssueNo(record.getExternalIssueNo())\n+\t\t\t\t.externalIssueURL(record.getIssueURL())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEzODAzNg=="}, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDIwOTU0Nw==", "bodyText": "ok, then pls rename the public method to soemthing like getEntityWithoutDetailsByExternalId", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400209547", "createdAt": "2020-03-30T13:53:49Z", "author": {"login": "metas-ts"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/budgetissue/BudgetIssueRepository.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.budgetissue;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.organization.OrgId;\n+import de.metas.serviceprovider.external.issuedetails.ExternalIssueDetailsRepository;\n+import de.metas.serviceprovider.milestone.MilestoneId;\n+import de.metas.serviceprovider.model.I_S_Budget_Issue;\n+import de.metas.serviceprovider.model.I_S_ExternalIssueDetail;\n+import de.metas.uom.UomId;\n+import de.metas.user.UserId;\n+import de.metas.util.Check;\n+import de.metas.util.NumberUtils;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.Optional;\n+\n+@Repository\n+public class BudgetIssueRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\n+\tprivate final ExternalIssueDetailsRepository externalIssueDetailsRepository;\n+\n+\tpublic BudgetIssueRepository(final ExternalIssueDetailsRepository externalIssueDetailsRepository)\n+\t{\n+\t\tthis.externalIssueDetailsRepository = externalIssueDetailsRepository;\n+\t}\n+\n+\tpublic BudgetIssue store(final BudgetIssue budgetIssue)\n+\t{\n+\t\tfinal I_S_Budget_Issue record;\n+\n+\t\tif (budgetIssue.getBudgetIssueId() != null)\n+\t\t{\n+\t\t\trecord = InterfaceWrapperHelper.load(budgetIssue.getBudgetIssueId(), I_S_Budget_Issue.class);\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\trecord = InterfaceWrapperHelper.newInstance(I_S_Budget_Issue.class);\n+\t\t}\n+\t\trecord.setAD_Org_ID(budgetIssue.getOrgId().getRepoId());\n+\n+\t\trecord.setName(budgetIssue.getName());\n+\t\trecord.setDescription(budgetIssue.getDescription());\n+\t\trecord.setBudget_Issue_Type(budgetIssue.getType().getValue());\n+\t\trecord.setProcessed(budgetIssue.isProcessed());\n+\n+\t\trecord.setS_Current_Milestone_ID(NumberUtils.asInt(budgetIssue.getMilestoneId(), -1));\n+\n+\t\trecord.setEstimatedEffort(budgetIssue.getEstimatedEffort());\n+\n+\t\trecord.setBudgetedEffort(budgetIssue.getBudgetedEffort());\n+\n+\t\trecord.setAD_User_ID(NumberUtils.asInt(budgetIssue.getAssigneeId(), -1));\n+\n+\t\trecord.setExternalId(budgetIssue.getExternalIssueId());\n+\t\trecord.setExternalIssueNo(budgetIssue.getExternalIssueNo());\n+\t\trecord.setIssueURL(budgetIssue.getExternalIssueURL());\n+\n+\t\tInterfaceWrapperHelper.save(record);\n+\n+\t\tfinal BudgetIssueId budgetIssueId = BudgetIssueId.ofRepoId(record.getS_Budget_Issue_ID());\n+\t\tbudgetIssue.setBudgetIssueId(budgetIssueId);\n+\n+\t\tpersistIssueDetails(budgetIssue);\n+\n+\t\treturn budgetIssue;\n+\t}\n+\n+\tpublic Optional<BudgetIssue> getEntityByExternalId(@NonNull final String externalIssueId)\n+\t{\n+\t\t final I_S_Budget_Issue budget_issue = queryBL\n+\t\t\t\t.createQueryBuilder(I_S_Budget_Issue.class)\n+\t\t\t\t.addOnlyActiveRecordsFilter()\n+\t\t\t\t.addEqualsFilter(I_S_Budget_Issue.COLUMNNAME_ExternalId, externalIssueId)\n+\t\t\t\t.create()\n+\t\t\t\t.firstOnly(I_S_Budget_Issue.class);\n+\n+\t\t return budget_issue != null ? Optional.of(buildBudgetIssueEntity(budget_issue)) : Optional.empty();\n+\t}\n+\n+\tprivate BudgetIssue buildBudgetIssueEntity(final I_S_Budget_Issue record)\n+\t{\n+\n+\t\treturn BudgetIssue.builder()\n+\t\t\t\t.orgId(OrgId.ofRepoId(record.getAD_Org_ID()))\n+\t\t\t\t.budgetIssueId(BudgetIssueId.ofRepoId(record.getS_Budget_Issue_ID()))\n+\t\t\t\t.effortUomId(UomId.ofRepoId(record.getEffort_UOM_ID()))\n+\t\t\t\t.milestoneId(MilestoneId.ofRepoIdOrNull(record.getS_Current_Milestone_ID()))\n+\t\t\t\t.assigneeId(UserId.ofNullableRepoId(record.getAD_User_ID()))\n+\t\t\t\t.name(record.getName())\n+\t\t\t\t.description(record.getDescription())\n+\t\t\t\t.type(BudgetIssueType.getTypeByValue(record.getBudget_Issue_Type()))\n+\t\t\t\t.processed(record.isProcessed())\n+\t\t\t\t.estimatedEffort(record.getEstimatedEffort())\n+\t\t\t\t.budgetedEffort(record.getBudgetedEffort())\n+\t\t\t\t.externalIssueId(record.getExternalId())\n+\t\t\t\t.externalIssueNo(record.getExternalIssueNo())\n+\t\t\t\t.externalIssueURL(record.getIssueURL())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEzODAzNg=="}, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 125}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDY4OTkwMw==", "bodyText": "@pvpurcarcosmin  @metas-jb  I disagree.\nThat's a good sign that externalIssueDetails shall not be part of BudgetIssue class. The code is talking to u.\nfeel free to call me if u need details.", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400689903", "createdAt": "2020-03-31T07:13:33Z", "author": {"login": "teosarca"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/budgetissue/BudgetIssueRepository.java", "diffHunk": "@@ -0,0 +1,144 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.budgetissue;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.organization.OrgId;\n+import de.metas.serviceprovider.external.issuedetails.ExternalIssueDetailsRepository;\n+import de.metas.serviceprovider.milestone.MilestoneId;\n+import de.metas.serviceprovider.model.I_S_Budget_Issue;\n+import de.metas.serviceprovider.model.I_S_ExternalIssueDetail;\n+import de.metas.uom.UomId;\n+import de.metas.user.UserId;\n+import de.metas.util.Check;\n+import de.metas.util.NumberUtils;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.Optional;\n+\n+@Repository\n+public class BudgetIssueRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\n+\tprivate final ExternalIssueDetailsRepository externalIssueDetailsRepository;\n+\n+\tpublic BudgetIssueRepository(final ExternalIssueDetailsRepository externalIssueDetailsRepository)\n+\t{\n+\t\tthis.externalIssueDetailsRepository = externalIssueDetailsRepository;\n+\t}\n+\n+\tpublic BudgetIssue store(final BudgetIssue budgetIssue)\n+\t{\n+\t\tfinal I_S_Budget_Issue record;\n+\n+\t\tif (budgetIssue.getBudgetIssueId() != null)\n+\t\t{\n+\t\t\trecord = InterfaceWrapperHelper.load(budgetIssue.getBudgetIssueId(), I_S_Budget_Issue.class);\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\trecord = InterfaceWrapperHelper.newInstance(I_S_Budget_Issue.class);\n+\t\t}\n+\t\trecord.setAD_Org_ID(budgetIssue.getOrgId().getRepoId());\n+\n+\t\trecord.setName(budgetIssue.getName());\n+\t\trecord.setDescription(budgetIssue.getDescription());\n+\t\trecord.setBudget_Issue_Type(budgetIssue.getType().getValue());\n+\t\trecord.setProcessed(budgetIssue.isProcessed());\n+\n+\t\trecord.setS_Current_Milestone_ID(NumberUtils.asInt(budgetIssue.getMilestoneId(), -1));\n+\n+\t\trecord.setEstimatedEffort(budgetIssue.getEstimatedEffort());\n+\n+\t\trecord.setBudgetedEffort(budgetIssue.getBudgetedEffort());\n+\n+\t\trecord.setAD_User_ID(NumberUtils.asInt(budgetIssue.getAssigneeId(), -1));\n+\n+\t\trecord.setExternalId(budgetIssue.getExternalIssueId());\n+\t\trecord.setExternalIssueNo(budgetIssue.getExternalIssueNo());\n+\t\trecord.setIssueURL(budgetIssue.getExternalIssueURL());\n+\n+\t\tInterfaceWrapperHelper.save(record);\n+\n+\t\tfinal BudgetIssueId budgetIssueId = BudgetIssueId.ofRepoId(record.getS_Budget_Issue_ID());\n+\t\tbudgetIssue.setBudgetIssueId(budgetIssueId);\n+\n+\t\tpersistIssueDetails(budgetIssue);\n+\n+\t\treturn budgetIssue;\n+\t}\n+\n+\tpublic Optional<BudgetIssue> getEntityByExternalId(@NonNull final String externalIssueId)\n+\t{\n+\t\t final I_S_Budget_Issue budget_issue = queryBL\n+\t\t\t\t.createQueryBuilder(I_S_Budget_Issue.class)\n+\t\t\t\t.addOnlyActiveRecordsFilter()\n+\t\t\t\t.addEqualsFilter(I_S_Budget_Issue.COLUMNNAME_ExternalId, externalIssueId)\n+\t\t\t\t.create()\n+\t\t\t\t.firstOnly(I_S_Budget_Issue.class);\n+\n+\t\t return budget_issue != null ? Optional.of(buildBudgetIssueEntity(budget_issue)) : Optional.empty();\n+\t}\n+\n+\tprivate BudgetIssue buildBudgetIssueEntity(final I_S_Budget_Issue record)\n+\t{\n+\n+\t\treturn BudgetIssue.builder()\n+\t\t\t\t.orgId(OrgId.ofRepoId(record.getAD_Org_ID()))\n+\t\t\t\t.budgetIssueId(BudgetIssueId.ofRepoId(record.getS_Budget_Issue_ID()))\n+\t\t\t\t.effortUomId(UomId.ofRepoId(record.getEffort_UOM_ID()))\n+\t\t\t\t.milestoneId(MilestoneId.ofRepoIdOrNull(record.getS_Current_Milestone_ID()))\n+\t\t\t\t.assigneeId(UserId.ofNullableRepoId(record.getAD_User_ID()))\n+\t\t\t\t.name(record.getName())\n+\t\t\t\t.description(record.getDescription())\n+\t\t\t\t.type(BudgetIssueType.getTypeByValue(record.getBudget_Issue_Type()))\n+\t\t\t\t.processed(record.isProcessed())\n+\t\t\t\t.estimatedEffort(record.getEstimatedEffort())\n+\t\t\t\t.budgetedEffort(record.getBudgetedEffort())\n+\t\t\t\t.externalIssueId(record.getExternalId())\n+\t\t\t\t.externalIssueNo(record.getExternalIssueNo())\n+\t\t\t\t.externalIssueURL(record.getIssueURL())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEzODAzNg=="}, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 125}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTM2MDg1OnYy", "diffSide": "RIGHT", "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/effortissue/EffortIssueRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjowNzowMlrOF9mi2w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjowNzowMlrOF9mi2w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDEzODk3MQ==", "bodyText": "all the same remarks as in BugdetIssueRepository", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400138971", "createdAt": "2020-03-30T12:07:02Z", "author": {"login": "metas-ts"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/effortissue/EffortIssueRepository.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.effortissue;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.organization.OrgId;\n+import de.metas.serviceprovider.external.issuedetails.ExternalIssueDetailsRepository;\n+import de.metas.serviceprovider.milestone.MilestoneId;\n+import de.metas.serviceprovider.model.I_S_Effort_Issue;\n+import de.metas.serviceprovider.model.I_S_ExternalIssueDetail;\n+import de.metas.uom.UomId;\n+import de.metas.user.UserId;\n+import de.metas.util.Check;\n+import de.metas.util.NumberUtils;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.Optional;\n+\n+@Repository\n+public class EffortIssueRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\tprivate final ExternalIssueDetailsRepository externalIssueDetailsRepository;\n+\n+\tpublic EffortIssueRepository(final ExternalIssueDetailsRepository externalIssueDetailsRepository)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 49}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTM3NTgzOnYy", "diffSide": "RIGHT", "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/github/GithubImportProcess.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjoxMTowOVrOF9mrug==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjoxMTowOVrOF9mrug==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0MTI0Mg==", "bodyText": "check the annotation de.metas.process.Param and how it's used in other processes", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400141242", "createdAt": "2020-03-30T12:11:09Z", "author": {"login": "metas-ts"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/github/GithubImportProcess.java", "diffHunk": "@@ -0,0 +1,111 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.github;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.process.JavaProcess;\n+import de.metas.serviceprovider.external.project.ExternalProjectReference;\n+import de.metas.serviceprovider.external.project.ExternalProjectReferenceId;\n+import de.metas.serviceprovider.external.project.ExternalProjectRepository;\n+import de.metas.serviceprovider.importer.IssueImporterService;\n+import de.metas.serviceprovider.importer.info.ImportIssuesRequest;\n+import de.metas.util.Check;\n+import de.metas.util.Services;\n+import org.adempiere.service.ISysConfigBL;\n+import org.compiere.SpringContextHolder;\n+\n+import static de.metas.serviceprovider.external.project.ExternalSystem.GITHUB;\n+import static de.metas.serviceprovider.github.GithubImporterConstants.GitHubImporterSysConfig.ACCESS_TOKEN;\n+\n+public class GithubImportProcess extends JavaProcess\n+{\n+\tprivate final String PARAM_NAME_EXTERNAL_PROJECT_REFERENCE_ID = \"S_ExternalProjectReference_ID\";\n+\tprivate final String PARAM_NAME_ISSUE_NO = \"IssueNumbers\";\n+\n+\tprivate int externalProjectReferenceId;\n+\tprivate ImmutableList<String> issueNoList;\n+\n+\tprivate final ExternalProjectRepository externalProjectRepository = SpringContextHolder.instance.getBean(ExternalProjectRepository.class);\n+\tprivate final IssueImporterService issueImporterService = SpringContextHolder.instance.getBean(IssueImporterService.class);\n+\tprivate final GithubImporterService githubImporterService = SpringContextHolder.instance.getBean(GithubImporterService.class);\n+\tprivate final ISysConfigBL sysConfigBL = Services.get(ISysConfigBL.class);\n+\n+\n+\t@Override protected String doIt() throws Exception\n+\t{\n+\t\tgetParameters().forEach(param -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTQyMzI1OnYy", "diffSide": "RIGHT", "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/github/GithubImporterService.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMjoyMzozM1rOF9nIlQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODo0MzowNlrOF-LTxA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0ODYyOQ==", "bodyText": "i think this is something for Loggable, too", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400148629", "createdAt": "2020-03-30T12:23:33Z", "author": {"login": "metas-ts"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/github/GithubImporterService.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.github;\n+\n+import ch.qos.logback.classic.Level;\n+import com.google.common.base.Stopwatch;\n+import com.google.common.collect.ImmutableList;\n+import de.metas.issue.tracking.github.api.v3.model.FetchIssueByIdRequest;\n+import de.metas.issue.tracking.github.api.v3.model.GithubMilestone;\n+import de.metas.issue.tracking.github.api.v3.model.Issue;\n+import de.metas.issue.tracking.github.api.v3.model.Label;\n+import de.metas.issue.tracking.github.api.v3.model.ResourceState;\n+import de.metas.issue.tracking.github.api.v3.model.RetrieveIssuesRequest;\n+import de.metas.issue.tracking.github.api.v3.service.GithubClient;\n+import de.metas.logging.LogManager;\n+import de.metas.organization.OrgId;\n+import de.metas.serviceprovider.external.issuedetails.ExternalIssueDetail;\n+import de.metas.serviceprovider.importer.ImportIssuesQueue;\n+import de.metas.serviceprovider.importer.ImportService;\n+import de.metas.serviceprovider.importer.info.ImportIssueInfo;\n+import de.metas.serviceprovider.importer.info.ImportIssuesRequest;\n+import de.metas.serviceprovider.milestone.Milestone;\n+import de.metas.user.UserId;\n+import de.metas.user.api.IUserDAO;\n+import de.metas.util.Check;\n+import de.metas.util.Loggables;\n+import de.metas.util.NumberUtils;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.slf4j.Logger;\n+import org.springframework.stereotype.Service;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static de.metas.issue.tracking.github.api.v3.GitHubApiConstants.LabelType.BUDGET;\n+import static de.metas.issue.tracking.github.api.v3.GitHubApiConstants.LabelType.ESTIMATION;\n+import static de.metas.serviceprovider.external.issuedetails.ExternalIssueDetailType.LABEL;\n+import static de.metas.serviceprovider.github.GithubImporterConstants.CHUNK_SIZE;\n+import static de.metas.serviceprovider.github.GithubImporterConstants.HOUR_UOM_ID;\n+import static de.metas.serviceprovider.importer.ImportConstants.IMPORT_LOG_MESSAGE_PREFIX;\n+\n+@Service\n+public class GithubImporterService implements ImportService\n+{\n+\tprivate static final Logger log = LogManager.getLogger(GithubImporterService.class);\n+\n+\tprivate final ReentrantLock lock = new ReentrantLock();\n+\n+\tprivate final ImportIssuesQueue importIssuesQueue;\n+\tprivate final GithubClient githubClient;\n+\tprivate final IUserDAO userDAO = Services.get(IUserDAO.class);\n+\n+\tpublic GithubImporterService(final ImportIssuesQueue importIssuesQueue, final GithubClient githubClient)\n+\t{\n+\t\tthis.importIssuesQueue = importIssuesQueue;\n+\t\tthis.githubClient = githubClient;\n+\t}\n+\n+\tpublic void start(@NonNull final ImmutableList<ImportIssuesRequest> requestList)\n+\t{\n+\t\tacquireLock();\n+\t\ttry\n+\t\t{\n+\t\t\tfinal Stopwatch stopWatch = Stopwatch.createStarted();\n+\n+\t\t\trequestList.forEach(request -> {\n+\t\t\t\tif (request.importByIds())\n+\t\t\t\t{\n+\t\t\t\t\timportIssuesById(request);\n+\t\t\t\t}\n+\t\t\t\telse\n+\t\t\t\t{\n+\t\t\t\t\timportIssues(request);\n+\t\t\t\t}\n+\t\t\t});\n+\t\t\tlog.info(IMPORT_LOG_MESSAGE_PREFIX + \" GithubImporterService#start() finished work in {} sec. \", stopWatch.stop().elapsed(TimeUnit.SECONDS));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc0MTAzNg==", "bodyText": "also u can use the stopWatch directly. It's default toString() is super user friendly. No need to convert it to seconds or anything else.", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400741036", "createdAt": "2020-03-31T08:42:41Z", "author": {"login": "teosarca"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/github/GithubImporterService.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.github;\n+\n+import ch.qos.logback.classic.Level;\n+import com.google.common.base.Stopwatch;\n+import com.google.common.collect.ImmutableList;\n+import de.metas.issue.tracking.github.api.v3.model.FetchIssueByIdRequest;\n+import de.metas.issue.tracking.github.api.v3.model.GithubMilestone;\n+import de.metas.issue.tracking.github.api.v3.model.Issue;\n+import de.metas.issue.tracking.github.api.v3.model.Label;\n+import de.metas.issue.tracking.github.api.v3.model.ResourceState;\n+import de.metas.issue.tracking.github.api.v3.model.RetrieveIssuesRequest;\n+import de.metas.issue.tracking.github.api.v3.service.GithubClient;\n+import de.metas.logging.LogManager;\n+import de.metas.organization.OrgId;\n+import de.metas.serviceprovider.external.issuedetails.ExternalIssueDetail;\n+import de.metas.serviceprovider.importer.ImportIssuesQueue;\n+import de.metas.serviceprovider.importer.ImportService;\n+import de.metas.serviceprovider.importer.info.ImportIssueInfo;\n+import de.metas.serviceprovider.importer.info.ImportIssuesRequest;\n+import de.metas.serviceprovider.milestone.Milestone;\n+import de.metas.user.UserId;\n+import de.metas.user.api.IUserDAO;\n+import de.metas.util.Check;\n+import de.metas.util.Loggables;\n+import de.metas.util.NumberUtils;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.slf4j.Logger;\n+import org.springframework.stereotype.Service;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static de.metas.issue.tracking.github.api.v3.GitHubApiConstants.LabelType.BUDGET;\n+import static de.metas.issue.tracking.github.api.v3.GitHubApiConstants.LabelType.ESTIMATION;\n+import static de.metas.serviceprovider.external.issuedetails.ExternalIssueDetailType.LABEL;\n+import static de.metas.serviceprovider.github.GithubImporterConstants.CHUNK_SIZE;\n+import static de.metas.serviceprovider.github.GithubImporterConstants.HOUR_UOM_ID;\n+import static de.metas.serviceprovider.importer.ImportConstants.IMPORT_LOG_MESSAGE_PREFIX;\n+\n+@Service\n+public class GithubImporterService implements ImportService\n+{\n+\tprivate static final Logger log = LogManager.getLogger(GithubImporterService.class);\n+\n+\tprivate final ReentrantLock lock = new ReentrantLock();\n+\n+\tprivate final ImportIssuesQueue importIssuesQueue;\n+\tprivate final GithubClient githubClient;\n+\tprivate final IUserDAO userDAO = Services.get(IUserDAO.class);\n+\n+\tpublic GithubImporterService(final ImportIssuesQueue importIssuesQueue, final GithubClient githubClient)\n+\t{\n+\t\tthis.importIssuesQueue = importIssuesQueue;\n+\t\tthis.githubClient = githubClient;\n+\t}\n+\n+\tpublic void start(@NonNull final ImmutableList<ImportIssuesRequest> requestList)\n+\t{\n+\t\tacquireLock();\n+\t\ttry\n+\t\t{\n+\t\t\tfinal Stopwatch stopWatch = Stopwatch.createStarted();\n+\n+\t\t\trequestList.forEach(request -> {\n+\t\t\t\tif (request.importByIds())\n+\t\t\t\t{\n+\t\t\t\t\timportIssuesById(request);\n+\t\t\t\t}\n+\t\t\t\telse\n+\t\t\t\t{\n+\t\t\t\t\timportIssues(request);\n+\t\t\t\t}\n+\t\t\t});\n+\t\t\tlog.info(IMPORT_LOG_MESSAGE_PREFIX + \" GithubImporterService#start() finished work in {} sec. \", stopWatch.stop().elapsed(TimeUnit.SECONDS));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0ODYyOQ=="}, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 103}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc0MTMxNg==", "bodyText": "another observation: when using logging APIs always avoid string concatenation", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400741316", "createdAt": "2020-03-31T08:43:06Z", "author": {"login": "teosarca"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/github/GithubImporterService.java", "diffHunk": "@@ -0,0 +1,265 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.github;\n+\n+import ch.qos.logback.classic.Level;\n+import com.google.common.base.Stopwatch;\n+import com.google.common.collect.ImmutableList;\n+import de.metas.issue.tracking.github.api.v3.model.FetchIssueByIdRequest;\n+import de.metas.issue.tracking.github.api.v3.model.GithubMilestone;\n+import de.metas.issue.tracking.github.api.v3.model.Issue;\n+import de.metas.issue.tracking.github.api.v3.model.Label;\n+import de.metas.issue.tracking.github.api.v3.model.ResourceState;\n+import de.metas.issue.tracking.github.api.v3.model.RetrieveIssuesRequest;\n+import de.metas.issue.tracking.github.api.v3.service.GithubClient;\n+import de.metas.logging.LogManager;\n+import de.metas.organization.OrgId;\n+import de.metas.serviceprovider.external.issuedetails.ExternalIssueDetail;\n+import de.metas.serviceprovider.importer.ImportIssuesQueue;\n+import de.metas.serviceprovider.importer.ImportService;\n+import de.metas.serviceprovider.importer.info.ImportIssueInfo;\n+import de.metas.serviceprovider.importer.info.ImportIssuesRequest;\n+import de.metas.serviceprovider.milestone.Milestone;\n+import de.metas.user.UserId;\n+import de.metas.user.api.IUserDAO;\n+import de.metas.util.Check;\n+import de.metas.util.Loggables;\n+import de.metas.util.NumberUtils;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.slf4j.Logger;\n+import org.springframework.stereotype.Service;\n+\n+import java.math.BigDecimal;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.concurrent.TimeUnit;\n+import java.util.concurrent.locks.ReentrantLock;\n+import java.util.regex.Matcher;\n+import java.util.regex.Pattern;\n+\n+import static de.metas.issue.tracking.github.api.v3.GitHubApiConstants.LabelType.BUDGET;\n+import static de.metas.issue.tracking.github.api.v3.GitHubApiConstants.LabelType.ESTIMATION;\n+import static de.metas.serviceprovider.external.issuedetails.ExternalIssueDetailType.LABEL;\n+import static de.metas.serviceprovider.github.GithubImporterConstants.CHUNK_SIZE;\n+import static de.metas.serviceprovider.github.GithubImporterConstants.HOUR_UOM_ID;\n+import static de.metas.serviceprovider.importer.ImportConstants.IMPORT_LOG_MESSAGE_PREFIX;\n+\n+@Service\n+public class GithubImporterService implements ImportService\n+{\n+\tprivate static final Logger log = LogManager.getLogger(GithubImporterService.class);\n+\n+\tprivate final ReentrantLock lock = new ReentrantLock();\n+\n+\tprivate final ImportIssuesQueue importIssuesQueue;\n+\tprivate final GithubClient githubClient;\n+\tprivate final IUserDAO userDAO = Services.get(IUserDAO.class);\n+\n+\tpublic GithubImporterService(final ImportIssuesQueue importIssuesQueue, final GithubClient githubClient)\n+\t{\n+\t\tthis.importIssuesQueue = importIssuesQueue;\n+\t\tthis.githubClient = githubClient;\n+\t}\n+\n+\tpublic void start(@NonNull final ImmutableList<ImportIssuesRequest> requestList)\n+\t{\n+\t\tacquireLock();\n+\t\ttry\n+\t\t{\n+\t\t\tfinal Stopwatch stopWatch = Stopwatch.createStarted();\n+\n+\t\t\trequestList.forEach(request -> {\n+\t\t\t\tif (request.importByIds())\n+\t\t\t\t{\n+\t\t\t\t\timportIssuesById(request);\n+\t\t\t\t}\n+\t\t\t\telse\n+\t\t\t\t{\n+\t\t\t\t\timportIssues(request);\n+\t\t\t\t}\n+\t\t\t});\n+\t\t\tlog.info(IMPORT_LOG_MESSAGE_PREFIX + \" GithubImporterService#start() finished work in {} sec. \", stopWatch.stop().elapsed(TimeUnit.SECONDS));", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE0ODYyOQ=="}, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 103}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4MTY5MjgwOnYy", "diffSide": "RIGHT", "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/ServiceProviderConstants.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMzoyOTozNVrOF9pvGw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMFQxMzoyOTozNVrOF9pvGw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDE5MTI1OQ==", "bodyText": "i think we don't need this anymore; pls remove", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400191259", "createdAt": "2020-03-30T13:29:35Z", "author": {"login": "metas-ts"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/ServiceProviderConstants.java", "diffHunk": "@@ -0,0 +1,31 @@\n+package de.metas.serviceprovider;\n+\n+import de.metas.product.ProductId;\n+\n+/*\n+ * #%L\n+ * de.metas.contracts\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+\n+public class ServiceProviderConstants\n+{\n+\tpublic static final ProductId SERVICE_PRODUCT_ID = ProductId.ofRepoId(123);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 30}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTEzNTM1OnYy", "diffSide": "RIGHT", "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/budgetissue/BudgetIssueType.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODoyOTo0NFrOF-Kzww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODoyOTo0NFrOF-Kzww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczMzEyMw==", "bodyText": ".filter(v -> v.getValue().equalsIgnoreCase(value))\n\nwhy equalsIgnoreCase?  ...i would avoid it. Go with equals.\n\n.orElse(null);\n\nConsider:\n\nreturning optional\nor throw an exception", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400733123", "createdAt": "2020-03-31T08:29:44Z", "author": {"login": "teosarca"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/budgetissue/BudgetIssueType.java", "diffHunk": "@@ -0,0 +1,45 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.budgetissue;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+\n+import java.util.stream.Stream;\n+\n+@AllArgsConstructor\n+@Getter\n+public enum BudgetIssueType\n+{\n+\tINTERNAL(\"Internal\"),\n+\tEXTERNAL(\"External\");\n+\n+\tprivate final String value;\n+\n+\tpublic static BudgetIssueType getTypeByValue(final String value)\n+\t{\n+\t\treturn Stream.of(values())\n+\t\t\t\t.filter(v -> v.getValue().equalsIgnoreCase(value))\n+\t\t\t\t.findFirst().orElse(null);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTE0MDc0OnYy", "diffSide": "RIGHT", "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/effortissue/EffortIssue.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODozMTowOFrOF-K3Og==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMTowMDoxM1rOF-QUsw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczNDAxMA==", "bodyText": "why not this.estimatedEffort.signum() == 0?", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400734010", "createdAt": "2020-03-31T08:31:08Z", "author": {"login": "teosarca"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/effortissue/EffortIssue.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.effortissue;\n+\n+import de.metas.organization.OrgId;\n+import de.metas.serviceprovider.external.issuedetails.ExternalIssueDetail;\n+import de.metas.serviceprovider.milestone.MilestoneId;\n+import de.metas.uom.UomId;\n+import de.metas.user.UserId;\n+import de.metas.util.Check;\n+import de.metas.util.NumberUtils;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NonNull;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+\n+@Data\n+@Builder\n+public class EffortIssue\n+{\n+\t@NonNull\n+\tprivate OrgId orgId;\n+\n+\tprivate EffortIssueId effortIssueId;\n+\n+\tprivate UserId assigneeId;\n+\n+\t@NonNull\n+\tprivate String name;\n+\n+\tprivate String description;\n+\n+\tprivate MilestoneId milestoneId;\n+\n+\tprivate BigDecimal estimatedEffort;\n+\n+\tprivate BigDecimal budgetedEffort;\n+\n+\t@NonNull\n+\tprivate UomId effortUomId;\n+\n+\tprivate boolean processed;\n+\n+\tprivate String externalIssueId;\n+\n+\tprivate String externalIssueNo;\n+\n+\tprivate String externalIssueURL;\n+\n+\tprivate List<ExternalIssueDetail> externalIssueDetailList;\n+\n+\tpublic void setEstimatedEffortIfNull(final BigDecimal estimatedEffort)\n+\t{\n+\t\tif ( NumberUtils.asBigDecimal(this.estimatedEffort,BigDecimal.ZERO).equals(BigDecimal.ZERO) )", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczNDQyOA==", "bodyText": "also, i would consider introducing a new class for Effort.", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400734428", "createdAt": "2020-03-31T08:31:49Z", "author": {"login": "teosarca"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/effortissue/EffortIssue.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.effortissue;\n+\n+import de.metas.organization.OrgId;\n+import de.metas.serviceprovider.external.issuedetails.ExternalIssueDetail;\n+import de.metas.serviceprovider.milestone.MilestoneId;\n+import de.metas.uom.UomId;\n+import de.metas.user.UserId;\n+import de.metas.util.Check;\n+import de.metas.util.NumberUtils;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NonNull;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+\n+@Data\n+@Builder\n+public class EffortIssue\n+{\n+\t@NonNull\n+\tprivate OrgId orgId;\n+\n+\tprivate EffortIssueId effortIssueId;\n+\n+\tprivate UserId assigneeId;\n+\n+\t@NonNull\n+\tprivate String name;\n+\n+\tprivate String description;\n+\n+\tprivate MilestoneId milestoneId;\n+\n+\tprivate BigDecimal estimatedEffort;\n+\n+\tprivate BigDecimal budgetedEffort;\n+\n+\t@NonNull\n+\tprivate UomId effortUomId;\n+\n+\tprivate boolean processed;\n+\n+\tprivate String externalIssueId;\n+\n+\tprivate String externalIssueNo;\n+\n+\tprivate String externalIssueURL;\n+\n+\tprivate List<ExternalIssueDetail> externalIssueDetailList;\n+\n+\tpublic void setEstimatedEffortIfNull(final BigDecimal estimatedEffort)\n+\t{\n+\t\tif ( NumberUtils.asBigDecimal(this.estimatedEffort,BigDecimal.ZERO).equals(BigDecimal.ZERO) )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczNDAxMA=="}, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 76}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgyMzQ3NQ==", "bodyText": "why not this.estimatedEffort.signum() == 0?\n\nmainly to cover also the case when estimatedEffort is null", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400823475", "createdAt": "2020-03-31T11:00:13Z", "author": {"login": "pvpurcarcosmin"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/effortissue/EffortIssue.java", "diffHunk": "@@ -0,0 +1,113 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.effortissue;\n+\n+import de.metas.organization.OrgId;\n+import de.metas.serviceprovider.external.issuedetails.ExternalIssueDetail;\n+import de.metas.serviceprovider.milestone.MilestoneId;\n+import de.metas.uom.UomId;\n+import de.metas.user.UserId;\n+import de.metas.util.Check;\n+import de.metas.util.NumberUtils;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NonNull;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+\n+@Data\n+@Builder\n+public class EffortIssue\n+{\n+\t@NonNull\n+\tprivate OrgId orgId;\n+\n+\tprivate EffortIssueId effortIssueId;\n+\n+\tprivate UserId assigneeId;\n+\n+\t@NonNull\n+\tprivate String name;\n+\n+\tprivate String description;\n+\n+\tprivate MilestoneId milestoneId;\n+\n+\tprivate BigDecimal estimatedEffort;\n+\n+\tprivate BigDecimal budgetedEffort;\n+\n+\t@NonNull\n+\tprivate UomId effortUomId;\n+\n+\tprivate boolean processed;\n+\n+\tprivate String externalIssueId;\n+\n+\tprivate String externalIssueNo;\n+\n+\tprivate String externalIssueURL;\n+\n+\tprivate List<ExternalIssueDetail> externalIssueDetailList;\n+\n+\tpublic void setEstimatedEffortIfNull(final BigDecimal estimatedEffort)\n+\t{\n+\t\tif ( NumberUtils.asBigDecimal(this.estimatedEffort,BigDecimal.ZERO).equals(BigDecimal.ZERO) )", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczNDAxMA=="}, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 76}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTE0ODA0OnYy", "diffSide": "RIGHT", "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/effortissue/EffortIssueRepository.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODozMzowMVrOF-K7sg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMTowMDo1NlrOF-QWRA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczNTE1NA==", "bodyText": "why do we have to return the parameter?", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400735154", "createdAt": "2020-03-31T08:33:01Z", "author": {"login": "teosarca"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/effortissue/EffortIssueRepository.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.effortissue;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.organization.OrgId;\n+import de.metas.serviceprovider.external.issuedetails.ExternalIssueDetailsRepository;\n+import de.metas.serviceprovider.milestone.MilestoneId;\n+import de.metas.serviceprovider.model.I_S_Effort_Issue;\n+import de.metas.serviceprovider.model.I_S_ExternalIssueDetail;\n+import de.metas.uom.UomId;\n+import de.metas.user.UserId;\n+import de.metas.util.Check;\n+import de.metas.util.NumberUtils;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.Optional;\n+\n+@Repository\n+public class EffortIssueRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\tprivate final ExternalIssueDetailsRepository externalIssueDetailsRepository;\n+\n+\tpublic EffortIssueRepository(final ExternalIssueDetailsRepository externalIssueDetailsRepository)\n+\t{\n+\t\tthis.externalIssueDetailsRepository = externalIssueDetailsRepository;\n+\t}\n+\n+\tpublic EffortIssue store(@NonNull final EffortIssue effortIssue)\n+\t{\n+\t\tfinal I_S_Effort_Issue record = effortIssue.getEffortIssueId() != null\n+\t\t\t\t? InterfaceWrapperHelper.load(effortIssue.getEffortIssueId(), I_S_Effort_Issue.class)\n+\t\t\t\t: InterfaceWrapperHelper.newInstance(I_S_Effort_Issue.class);\n+\n+\t\trecord.setAD_Org_ID(effortIssue.getOrgId().getRepoId());\n+\n+\t\trecord.setName(effortIssue.getName());\n+\t\trecord.setValue(effortIssue.getName());\n+\t\trecord.setDescription(effortIssue.getDescription());\n+\n+\t\trecord.setAD_User_ID(NumberUtils.asInt(effortIssue.getAssigneeId(), -1));\n+\t\trecord.setS_Milestone_ID(NumberUtils.asInt(effortIssue.getMilestoneId(), -1));\n+\t\trecord.setEstimatedEffort(effortIssue.getEstimatedEffort());\n+\t\trecord.setBudgetedEffort(effortIssue.getBudgetedEffort());\n+\t\trecord.setEffort_UOM_ID(effortIssue.getEffortUomId().getRepoId());\n+\n+\t\trecord.setProcessed(effortIssue.isProcessed());\n+\n+\t\trecord.setExternalId(effortIssue.getExternalIssueId());\n+\t\trecord.setIssueURL(effortIssue.getExternalIssueURL());\n+\t\trecord.setExternalIssueNo(effortIssue.getExternalIssueNo());\n+\n+\t\tInterfaceWrapperHelper.save(record);\n+\n+\t\teffortIssue.setEffortIssueId(EffortIssueId.ofRepoId(record.getS_Effort_Issue_ID()));\n+\n+\t\tpersistIssueDetails(effortIssue);\n+\n+\t\treturn effortIssue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczNTI5OQ==", "bodyText": "I would change the method to void", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400735299", "createdAt": "2020-03-31T08:33:17Z", "author": {"login": "teosarca"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/effortissue/EffortIssueRepository.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.effortissue;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.organization.OrgId;\n+import de.metas.serviceprovider.external.issuedetails.ExternalIssueDetailsRepository;\n+import de.metas.serviceprovider.milestone.MilestoneId;\n+import de.metas.serviceprovider.model.I_S_Effort_Issue;\n+import de.metas.serviceprovider.model.I_S_ExternalIssueDetail;\n+import de.metas.uom.UomId;\n+import de.metas.user.UserId;\n+import de.metas.util.Check;\n+import de.metas.util.NumberUtils;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.Optional;\n+\n+@Repository\n+public class EffortIssueRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\tprivate final ExternalIssueDetailsRepository externalIssueDetailsRepository;\n+\n+\tpublic EffortIssueRepository(final ExternalIssueDetailsRepository externalIssueDetailsRepository)\n+\t{\n+\t\tthis.externalIssueDetailsRepository = externalIssueDetailsRepository;\n+\t}\n+\n+\tpublic EffortIssue store(@NonNull final EffortIssue effortIssue)\n+\t{\n+\t\tfinal I_S_Effort_Issue record = effortIssue.getEffortIssueId() != null\n+\t\t\t\t? InterfaceWrapperHelper.load(effortIssue.getEffortIssueId(), I_S_Effort_Issue.class)\n+\t\t\t\t: InterfaceWrapperHelper.newInstance(I_S_Effort_Issue.class);\n+\n+\t\trecord.setAD_Org_ID(effortIssue.getOrgId().getRepoId());\n+\n+\t\trecord.setName(effortIssue.getName());\n+\t\trecord.setValue(effortIssue.getName());\n+\t\trecord.setDescription(effortIssue.getDescription());\n+\n+\t\trecord.setAD_User_ID(NumberUtils.asInt(effortIssue.getAssigneeId(), -1));\n+\t\trecord.setS_Milestone_ID(NumberUtils.asInt(effortIssue.getMilestoneId(), -1));\n+\t\trecord.setEstimatedEffort(effortIssue.getEstimatedEffort());\n+\t\trecord.setBudgetedEffort(effortIssue.getBudgetedEffort());\n+\t\trecord.setEffort_UOM_ID(effortIssue.getEffortUomId().getRepoId());\n+\n+\t\trecord.setProcessed(effortIssue.isProcessed());\n+\n+\t\trecord.setExternalId(effortIssue.getExternalIssueId());\n+\t\trecord.setIssueURL(effortIssue.getExternalIssueURL());\n+\t\trecord.setExternalIssueNo(effortIssue.getExternalIssueNo());\n+\n+\t\tInterfaceWrapperHelper.save(record);\n+\n+\t\teffortIssue.setEffortIssueId(EffortIssueId.ofRepoId(record.getS_Effort_Issue_ID()));\n+\n+\t\tpersistIssueDetails(effortIssue);\n+\n+\t\treturn effortIssue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczNTE1NA=="}, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 84}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgyMzg3Ng==", "bodyText": "trailing code..", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400823876", "createdAt": "2020-03-31T11:00:56Z", "author": {"login": "pvpurcarcosmin"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/effortissue/EffortIssueRepository.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.effortissue;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.organization.OrgId;\n+import de.metas.serviceprovider.external.issuedetails.ExternalIssueDetailsRepository;\n+import de.metas.serviceprovider.milestone.MilestoneId;\n+import de.metas.serviceprovider.model.I_S_Effort_Issue;\n+import de.metas.serviceprovider.model.I_S_ExternalIssueDetail;\n+import de.metas.uom.UomId;\n+import de.metas.user.UserId;\n+import de.metas.util.Check;\n+import de.metas.util.NumberUtils;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.Optional;\n+\n+@Repository\n+public class EffortIssueRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\tprivate final ExternalIssueDetailsRepository externalIssueDetailsRepository;\n+\n+\tpublic EffortIssueRepository(final ExternalIssueDetailsRepository externalIssueDetailsRepository)\n+\t{\n+\t\tthis.externalIssueDetailsRepository = externalIssueDetailsRepository;\n+\t}\n+\n+\tpublic EffortIssue store(@NonNull final EffortIssue effortIssue)\n+\t{\n+\t\tfinal I_S_Effort_Issue record = effortIssue.getEffortIssueId() != null\n+\t\t\t\t? InterfaceWrapperHelper.load(effortIssue.getEffortIssueId(), I_S_Effort_Issue.class)\n+\t\t\t\t: InterfaceWrapperHelper.newInstance(I_S_Effort_Issue.class);\n+\n+\t\trecord.setAD_Org_ID(effortIssue.getOrgId().getRepoId());\n+\n+\t\trecord.setName(effortIssue.getName());\n+\t\trecord.setValue(effortIssue.getName());\n+\t\trecord.setDescription(effortIssue.getDescription());\n+\n+\t\trecord.setAD_User_ID(NumberUtils.asInt(effortIssue.getAssigneeId(), -1));\n+\t\trecord.setS_Milestone_ID(NumberUtils.asInt(effortIssue.getMilestoneId(), -1));\n+\t\trecord.setEstimatedEffort(effortIssue.getEstimatedEffort());\n+\t\trecord.setBudgetedEffort(effortIssue.getBudgetedEffort());\n+\t\trecord.setEffort_UOM_ID(effortIssue.getEffortUomId().getRepoId());\n+\n+\t\trecord.setProcessed(effortIssue.isProcessed());\n+\n+\t\trecord.setExternalId(effortIssue.getExternalIssueId());\n+\t\trecord.setIssueURL(effortIssue.getExternalIssueURL());\n+\t\trecord.setExternalIssueNo(effortIssue.getExternalIssueNo());\n+\n+\t\tInterfaceWrapperHelper.save(record);\n+\n+\t\teffortIssue.setEffortIssueId(EffortIssueId.ofRepoId(record.getS_Effort_Issue_ID()));\n+\n+\t\tpersistIssueDetails(effortIssue);\n+\n+\t\treturn effortIssue;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczNTE1NA=="}, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 84}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTE1NDQ2OnYy", "diffSide": "RIGHT", "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/effortissue/EffortIssueRepository.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODozNDo0NlrOF-K_3g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQxMTowMTo0MFrOF-QXng==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczNjIyMg==", "bodyText": "instead of passing the whole EffortIssue, why not pass the EffortIssueId and the details?", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400736222", "createdAt": "2020-03-31T08:34:46Z", "author": {"login": "teosarca"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/effortissue/EffortIssueRepository.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.effortissue;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.organization.OrgId;\n+import de.metas.serviceprovider.external.issuedetails.ExternalIssueDetailsRepository;\n+import de.metas.serviceprovider.milestone.MilestoneId;\n+import de.metas.serviceprovider.model.I_S_Effort_Issue;\n+import de.metas.serviceprovider.model.I_S_ExternalIssueDetail;\n+import de.metas.uom.UomId;\n+import de.metas.user.UserId;\n+import de.metas.util.Check;\n+import de.metas.util.NumberUtils;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.Optional;\n+\n+@Repository\n+public class EffortIssueRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\tprivate final ExternalIssueDetailsRepository externalIssueDetailsRepository;\n+\n+\tpublic EffortIssueRepository(final ExternalIssueDetailsRepository externalIssueDetailsRepository)\n+\t{\n+\t\tthis.externalIssueDetailsRepository = externalIssueDetailsRepository;\n+\t}\n+\n+\tpublic EffortIssue store(@NonNull final EffortIssue effortIssue)\n+\t{\n+\t\tfinal I_S_Effort_Issue record = effortIssue.getEffortIssueId() != null\n+\t\t\t\t? InterfaceWrapperHelper.load(effortIssue.getEffortIssueId(), I_S_Effort_Issue.class)\n+\t\t\t\t: InterfaceWrapperHelper.newInstance(I_S_Effort_Issue.class);\n+\n+\t\trecord.setAD_Org_ID(effortIssue.getOrgId().getRepoId());\n+\n+\t\trecord.setName(effortIssue.getName());\n+\t\trecord.setValue(effortIssue.getName());\n+\t\trecord.setDescription(effortIssue.getDescription());\n+\n+\t\trecord.setAD_User_ID(NumberUtils.asInt(effortIssue.getAssigneeId(), -1));\n+\t\trecord.setS_Milestone_ID(NumberUtils.asInt(effortIssue.getMilestoneId(), -1));\n+\t\trecord.setEstimatedEffort(effortIssue.getEstimatedEffort());\n+\t\trecord.setBudgetedEffort(effortIssue.getBudgetedEffort());\n+\t\trecord.setEffort_UOM_ID(effortIssue.getEffortUomId().getRepoId());\n+\n+\t\trecord.setProcessed(effortIssue.isProcessed());\n+\n+\t\trecord.setExternalId(effortIssue.getExternalIssueId());\n+\t\trecord.setIssueURL(effortIssue.getExternalIssueURL());\n+\t\trecord.setExternalIssueNo(effortIssue.getExternalIssueNo());\n+\n+\t\tInterfaceWrapperHelper.save(record);\n+\n+\t\teffortIssue.setEffortIssueId(EffortIssueId.ofRepoId(record.getS_Effort_Issue_ID()));\n+\n+\t\tpersistIssueDetails(effortIssue);\n+\n+\t\treturn effortIssue;\n+\t}\n+\n+\tpublic Optional<EffortIssue> getEntityByExternalId(@NonNull final String externalIssueId)\n+\t{\n+\n+\t\tfinal I_S_Effort_Issue effort_issue = queryBL\n+\t\t\t\t.createQueryBuilder(I_S_Effort_Issue.class)\n+\t\t\t\t.addOnlyActiveRecordsFilter()\n+\t\t\t\t.addEqualsFilter(I_S_Effort_Issue.COLUMNNAME_ExternalId, externalIssueId)\n+\t\t\t\t.create()\n+\t\t\t\t.firstOnly(I_S_Effort_Issue.class);\n+\n+\t\treturn effort_issue != null ? Optional.of(buildEffortIssueEntity(effort_issue)) : Optional.empty();\n+\t}\n+\n+\n+\tprivate EffortIssue buildEffortIssueEntity(final I_S_Effort_Issue record)\n+\t{\n+\t\treturn EffortIssue.builder()\n+\t\t\t\t.effortIssueId(EffortIssueId.ofRepoId(record.getS_Effort_Issue_ID()))\n+\t\t\t\t.orgId(OrgId.ofRepoId(record.getAD_Org_ID()))\n+\t\t\t\t.milestoneId(MilestoneId.ofRepoIdOrNull(record.getS_Milestone_ID()))\n+\t\t\t\t.assigneeId(UserId.ofNullableRepoId(record.getAD_User_ID()))\n+\t\t\t\t.name(record.getName())\n+\t\t\t\t.description(record.getDescription())\n+\t\t\t\t.processed(record.isProcessed())\n+\t\t\t\t.estimatedEffort(record.getEstimatedEffort())\n+\t\t\t\t.budgetedEffort(record.getBudgetedEffort())\n+\t\t\t\t.effortUomId(UomId.ofRepoId(record.getEffort_UOM_ID()))\n+\t\t\t\t.externalIssueId(record.getExternalId())\n+\t\t\t\t.externalIssueNo(record.getExternalIssueNo())\n+\t\t\t\t.externalIssueURL(record.getIssueURL())\n+\t\t\t\t.build();\n+\t}\n+\n+\tprivate void persistIssueDetails(final EffortIssue effortIssue)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 120}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgyNDIyMg==", "bodyText": "no reason, I'll go with your suggestion", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400824222", "createdAt": "2020-03-31T11:01:40Z", "author": {"login": "pvpurcarcosmin"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/effortissue/EffortIssueRepository.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.effortissue;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.organization.OrgId;\n+import de.metas.serviceprovider.external.issuedetails.ExternalIssueDetailsRepository;\n+import de.metas.serviceprovider.milestone.MilestoneId;\n+import de.metas.serviceprovider.model.I_S_Effort_Issue;\n+import de.metas.serviceprovider.model.I_S_ExternalIssueDetail;\n+import de.metas.uom.UomId;\n+import de.metas.user.UserId;\n+import de.metas.util.Check;\n+import de.metas.util.NumberUtils;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.Optional;\n+\n+@Repository\n+public class EffortIssueRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\tprivate final ExternalIssueDetailsRepository externalIssueDetailsRepository;\n+\n+\tpublic EffortIssueRepository(final ExternalIssueDetailsRepository externalIssueDetailsRepository)\n+\t{\n+\t\tthis.externalIssueDetailsRepository = externalIssueDetailsRepository;\n+\t}\n+\n+\tpublic EffortIssue store(@NonNull final EffortIssue effortIssue)\n+\t{\n+\t\tfinal I_S_Effort_Issue record = effortIssue.getEffortIssueId() != null\n+\t\t\t\t? InterfaceWrapperHelper.load(effortIssue.getEffortIssueId(), I_S_Effort_Issue.class)\n+\t\t\t\t: InterfaceWrapperHelper.newInstance(I_S_Effort_Issue.class);\n+\n+\t\trecord.setAD_Org_ID(effortIssue.getOrgId().getRepoId());\n+\n+\t\trecord.setName(effortIssue.getName());\n+\t\trecord.setValue(effortIssue.getName());\n+\t\trecord.setDescription(effortIssue.getDescription());\n+\n+\t\trecord.setAD_User_ID(NumberUtils.asInt(effortIssue.getAssigneeId(), -1));\n+\t\trecord.setS_Milestone_ID(NumberUtils.asInt(effortIssue.getMilestoneId(), -1));\n+\t\trecord.setEstimatedEffort(effortIssue.getEstimatedEffort());\n+\t\trecord.setBudgetedEffort(effortIssue.getBudgetedEffort());\n+\t\trecord.setEffort_UOM_ID(effortIssue.getEffortUomId().getRepoId());\n+\n+\t\trecord.setProcessed(effortIssue.isProcessed());\n+\n+\t\trecord.setExternalId(effortIssue.getExternalIssueId());\n+\t\trecord.setIssueURL(effortIssue.getExternalIssueURL());\n+\t\trecord.setExternalIssueNo(effortIssue.getExternalIssueNo());\n+\n+\t\tInterfaceWrapperHelper.save(record);\n+\n+\t\teffortIssue.setEffortIssueId(EffortIssueId.ofRepoId(record.getS_Effort_Issue_ID()));\n+\n+\t\tpersistIssueDetails(effortIssue);\n+\n+\t\treturn effortIssue;\n+\t}\n+\n+\tpublic Optional<EffortIssue> getEntityByExternalId(@NonNull final String externalIssueId)\n+\t{\n+\n+\t\tfinal I_S_Effort_Issue effort_issue = queryBL\n+\t\t\t\t.createQueryBuilder(I_S_Effort_Issue.class)\n+\t\t\t\t.addOnlyActiveRecordsFilter()\n+\t\t\t\t.addEqualsFilter(I_S_Effort_Issue.COLUMNNAME_ExternalId, externalIssueId)\n+\t\t\t\t.create()\n+\t\t\t\t.firstOnly(I_S_Effort_Issue.class);\n+\n+\t\treturn effort_issue != null ? Optional.of(buildEffortIssueEntity(effort_issue)) : Optional.empty();\n+\t}\n+\n+\n+\tprivate EffortIssue buildEffortIssueEntity(final I_S_Effort_Issue record)\n+\t{\n+\t\treturn EffortIssue.builder()\n+\t\t\t\t.effortIssueId(EffortIssueId.ofRepoId(record.getS_Effort_Issue_ID()))\n+\t\t\t\t.orgId(OrgId.ofRepoId(record.getAD_Org_ID()))\n+\t\t\t\t.milestoneId(MilestoneId.ofRepoIdOrNull(record.getS_Milestone_ID()))\n+\t\t\t\t.assigneeId(UserId.ofNullableRepoId(record.getAD_User_ID()))\n+\t\t\t\t.name(record.getName())\n+\t\t\t\t.description(record.getDescription())\n+\t\t\t\t.processed(record.isProcessed())\n+\t\t\t\t.estimatedEffort(record.getEstimatedEffort())\n+\t\t\t\t.budgetedEffort(record.getBudgetedEffort())\n+\t\t\t\t.effortUomId(UomId.ofRepoId(record.getEffort_UOM_ID()))\n+\t\t\t\t.externalIssueId(record.getExternalId())\n+\t\t\t\t.externalIssueNo(record.getExternalIssueNo())\n+\t\t\t\t.externalIssueURL(record.getIssueURL())\n+\t\t\t\t.build();\n+\t}\n+\n+\tprivate void persistIssueDetails(final EffortIssue effortIssue)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczNjIyMg=="}, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 120}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTE1NjE4OnYy", "diffSide": "RIGHT", "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/external/issuedetails/ExternalIssueDetail.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODozNToxNlrOF-LBAw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODozNToxNlrOF-LBAw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczNjUxNQ==", "bodyText": "what is a detailValue?", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400736515", "createdAt": "2020-03-31T08:35:16Z", "author": {"login": "teosarca"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/external/issuedetails/ExternalIssueDetail.java", "diffHunk": "@@ -0,0 +1,43 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.external.issuedetails;\n+\n+import de.metas.organization.OrgId;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Value;\n+\n+\n+@Builder\n+@Value\n+public class ExternalIssueDetail\n+{\n+\t@NonNull\n+\tOrgId orgId;\n+\n+\t@NonNull\n+\tExternalIssueDetailType type;\n+\n+\t@NonNull\n+\tString detailValue;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTE2Njk4OnYy", "diffSide": "RIGHT", "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/external/project/ExternalProjectRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODozODoyNlrOF-LIYQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODozODoyNlrOF-LIYQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczODQwMQ==", "bodyText": "pls rename the method to getByExternalSystem", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400738401", "createdAt": "2020-03-31T08:38:26Z", "author": {"login": "teosarca"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/external/project/ExternalProjectRepository.java", "diffHunk": "@@ -0,0 +1,79 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.external.project;\n+\n+import com.google.common.collect.ImmutableList;\n+import de.metas.organization.OrgId;\n+import de.metas.serviceprovider.model.I_S_ExternalProjectReference;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.Optional;\n+\n+@Repository\n+public class ExternalProjectRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\n+\tpublic ImmutableList<ExternalProjectReference> loadExternalProjectsBySystem(@NonNull final ExternalSystem externalSystem)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTE3NDgxOnYy", "diffSide": "RIGHT", "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/external/project/ExternalProjectType.java", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODo0MDoyNlrOF-LNMQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQyMTowNTowNVrOF-oNBw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczOTYzMw==", "bodyText": "why equals is not enough?", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400739633", "createdAt": "2020-03-31T08:40:26Z", "author": {"login": "teosarca"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/external/project/ExternalProjectType.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.external.project;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+@AllArgsConstructor\n+@Getter\n+public enum ExternalProjectType\n+{\n+\tEFFORT(\"effort\"),\n+\tBUDGET(\"budget\");\n+\n+\tprivate final String value;\n+\n+\tpublic static Optional<ExternalProjectType> getTypeByValue( final String value )\n+\t{\n+\t\treturn Arrays.stream(values())\n+\t\t\t\t.filter(projectType -> projectType.getValue().equalsIgnoreCase(value))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgyNzY0Mw==", "bodyText": "it is, but I used eqaulsIgnoreCase for convenience, to match even though you saved something using incorrect capitalization. why do you feel like it's a must to have equals?", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400827643", "createdAt": "2020-03-31T11:08:20Z", "author": {"login": "pvpurcarcosmin"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/external/project/ExternalProjectType.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.external.project;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+@AllArgsConstructor\n+@Getter\n+public enum ExternalProjectType\n+{\n+\tEFFORT(\"effort\"),\n+\tBUDGET(\"budget\");\n+\n+\tprivate final String value;\n+\n+\tpublic static Optional<ExternalProjectType> getTypeByValue( final String value )\n+\t{\n+\t\treturn Arrays.stream(values())\n+\t\t\t\t.filter(projectType -> projectType.getValue().equalsIgnoreCase(value))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczOTYzMw=="}, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 43}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIxNDcyNw==", "bodyText": "Not a particular reason.\nJust that, when I read eqaulsIgnoreCase i am thinking.... OK, where the hell those are also used with a different case...", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r401214727", "createdAt": "2020-03-31T21:05:05Z", "author": {"login": "teosarca"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/external/project/ExternalProjectType.java", "diffHunk": "@@ -0,0 +1,46 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.external.project;\n+\n+import lombok.AllArgsConstructor;\n+import lombok.Getter;\n+\n+import java.util.Arrays;\n+import java.util.Optional;\n+\n+@AllArgsConstructor\n+@Getter\n+public enum ExternalProjectType\n+{\n+\tEFFORT(\"effort\"),\n+\tBUDGET(\"budget\");\n+\n+\tprivate final String value;\n+\n+\tpublic static Optional<ExternalProjectType> getTypeByValue( final String value )\n+\t{\n+\t\treturn Arrays.stream(values())\n+\t\t\t\t.filter(projectType -> projectType.getValue().equalsIgnoreCase(value))", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDczOTYzMw=="}, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 43}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTIxMTE2OnYy", "diffSide": "RIGHT", "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/importer/IssueImporterService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODo1MDoxNFrOF-LkgA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODo1MDoxNFrOF-LkgA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc0NTYwMA==", "bodyText": "use void return type", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400745600", "createdAt": "2020-03-31T08:50:14Z", "author": {"login": "teosarca"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/importer/IssueImporterService.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.importer;\n+\n+import ch.qos.logback.classic.Level;\n+import com.google.common.collect.ImmutableList;\n+import de.metas.logging.LogManager;\n+import de.metas.serviceprovider.budgetissue.BudgetIssue;\n+import de.metas.serviceprovider.budgetissue.BudgetIssueRepository;\n+import de.metas.serviceprovider.budgetissue.BudgetIssueType;\n+import de.metas.serviceprovider.effortissue.EffortIssue;\n+import de.metas.serviceprovider.effortissue.EffortIssueRepository;\n+import de.metas.serviceprovider.external.project.ExternalProjectType;\n+import de.metas.serviceprovider.importer.info.ImportIssueInfo;\n+import de.metas.serviceprovider.importer.info.ImportIssuesRequest;\n+import de.metas.serviceprovider.milestone.Milestone;\n+import de.metas.serviceprovider.milestone.MilestoneId;\n+import de.metas.serviceprovider.milestone.MilestoneRepository;\n+import de.metas.util.Loggables;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.trx.api.ITrxManager;\n+import org.slf4j.Logger;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static de.metas.serviceprovider.importer.ImportConstants.IMPORT_LOG_MESSAGE_PREFIX;\n+\n+@Service\n+public class IssueImporterService\n+{\n+\tprivate static final Logger log = LogManager.getLogger(IssueImporterService.class);\n+\n+\tprivate final ImportIssuesQueue importIssuesQueue;\n+\tprivate final MilestoneRepository milestoneRepository;\n+\tprivate final BudgetIssueRepository budgetIssueRepository;\n+\tprivate final EffortIssueRepository effortIssueRepository;\n+\tprivate final ITrxManager trxManager =  Services.get(ITrxManager.class);\n+\n+\tpublic IssueImporterService(final ImportIssuesQueue importIssuesQueue, final MilestoneRepository milestoneRepository, final BudgetIssueRepository budgetIssueRepository, final EffortIssueRepository effortIssueRepository)\n+\t{\n+\t\tthis.importIssuesQueue = importIssuesQueue;\n+\t\tthis.milestoneRepository = milestoneRepository;\n+\t\tthis.budgetIssueRepository = budgetIssueRepository;\n+\t\tthis.effortIssueRepository = effortIssueRepository;\n+\t}\n+\n+\tpublic void importIssues(final ImmutableList<ImportIssuesRequest> requestList, final ImportService importService)\n+\t{\n+\t\tfinal CompletableFuture completableFuture =\n+\t\t\t\tCompletableFuture.runAsync(() -> importService.start(requestList));\n+\n+\t\twhile (!completableFuture.isDone() || !importIssuesQueue.isEmpty())\n+\t\t{\n+\t\t\tfinal ImmutableList<ImportIssueInfo> issueInfos = importIssuesQueue.drainAll();\n+\t\t\tissueInfos.forEach(issue -> trxManager.runInNewTrx(localTrx -> importIssue(issue)));\n+\t\t}\n+\t}\n+\n+\tprivate void importIssue(@NonNull final ImportIssueInfo importIssueInfo)\n+\t{\n+\t\ttry\n+\t\t{\n+\t\t\tif (ExternalProjectType.BUDGET.equals(importIssueInfo.getExternalProjectType()))\n+\t\t\t{\n+\t\t\t\timportBudgetIssue(importIssueInfo);\n+\t\t\t}\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\timportEffortIssue(importIssueInfo);\n+\t\t\t}\n+\t\t}\n+\t\tcatch (final Exception e)\n+\t\t{\n+\t\t\tLoggables.withLogger(log, Level.ERROR)\n+\t\t\t\t\t.addLog(IMPORT_LOG_MESSAGE_PREFIX +\"*** Error while importing issue: {}, errorMessage: {}\",importIssueInfo.toString(), e.getMessage(), e);\n+\t\t}\n+\t}\n+\n+\t@NonNull\n+\tprivate Optional<MilestoneId> importMilestone(@NonNull final Milestone milestone)\n+\t{\n+\t\tif (milestone.getExternalId() != null)\n+\t\t{\n+\t\t\tmilestoneRepository.getRepoIdByExternalId(milestone.getExternalId())\n+\t\t\t\t\t.ifPresent(milestone::setMilestoneId);\n+\t\t}\n+\n+\t\tfinal MilestoneId milestoneId = milestoneRepository.store(milestone);\n+\n+\t\treturn Optional.of(milestoneId);\n+\t}\n+\n+\tprivate void importBudgetIssue(@NonNull final ImportIssueInfo importIssueInfo)\n+\t{\n+\t\tif (importIssueInfo.getMilestone() != null)\n+\t\t{\n+\t\t\tfinal Optional<MilestoneId> milestoneId = importMilestone(importIssueInfo.getMilestone());\n+\t\t\tmilestoneId.ifPresent(id -> importIssueInfo.getMilestone().setMilestoneId(id));\n+\t\t}\n+\n+\t\tfinal Optional<BudgetIssue> existingBudgetIssue =\n+\t\t\t\tbudgetIssueRepository.getEntityByExternalId(importIssueInfo.getExternalIssueId());\n+\n+\t\tfinal BudgetIssue budgetIssue;\n+\t\tbudgetIssue = existingBudgetIssue\n+\t\t\t\t.map(issue -> updateExistingBudgetIssue(issue, importIssueInfo))\n+\t\t\t\t.orElseGet(() -> buildBudgetIssue(importIssueInfo));\n+\n+\t\tbudgetIssueRepository.store(budgetIssue);\n+\t}\n+\n+\tprivate BudgetIssue updateExistingBudgetIssue(@NonNull final BudgetIssue existingBudgetIssue,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 135}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTIxMjc3OnYy", "diffSide": "RIGHT", "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/importer/IssueImporterService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODo1MDo0MVrOF-LlmA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODo1MDo0MVrOF-LlmA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc0NTg4MA==", "bodyText": "that's not actually a mapping.\nconsider using ifPresent", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400745880", "createdAt": "2020-03-31T08:50:41Z", "author": {"login": "teosarca"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/importer/IssueImporterService.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.importer;\n+\n+import ch.qos.logback.classic.Level;\n+import com.google.common.collect.ImmutableList;\n+import de.metas.logging.LogManager;\n+import de.metas.serviceprovider.budgetissue.BudgetIssue;\n+import de.metas.serviceprovider.budgetissue.BudgetIssueRepository;\n+import de.metas.serviceprovider.budgetissue.BudgetIssueType;\n+import de.metas.serviceprovider.effortissue.EffortIssue;\n+import de.metas.serviceprovider.effortissue.EffortIssueRepository;\n+import de.metas.serviceprovider.external.project.ExternalProjectType;\n+import de.metas.serviceprovider.importer.info.ImportIssueInfo;\n+import de.metas.serviceprovider.importer.info.ImportIssuesRequest;\n+import de.metas.serviceprovider.milestone.Milestone;\n+import de.metas.serviceprovider.milestone.MilestoneId;\n+import de.metas.serviceprovider.milestone.MilestoneRepository;\n+import de.metas.util.Loggables;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.trx.api.ITrxManager;\n+import org.slf4j.Logger;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static de.metas.serviceprovider.importer.ImportConstants.IMPORT_LOG_MESSAGE_PREFIX;\n+\n+@Service\n+public class IssueImporterService\n+{\n+\tprivate static final Logger log = LogManager.getLogger(IssueImporterService.class);\n+\n+\tprivate final ImportIssuesQueue importIssuesQueue;\n+\tprivate final MilestoneRepository milestoneRepository;\n+\tprivate final BudgetIssueRepository budgetIssueRepository;\n+\tprivate final EffortIssueRepository effortIssueRepository;\n+\tprivate final ITrxManager trxManager =  Services.get(ITrxManager.class);\n+\n+\tpublic IssueImporterService(final ImportIssuesQueue importIssuesQueue, final MilestoneRepository milestoneRepository, final BudgetIssueRepository budgetIssueRepository, final EffortIssueRepository effortIssueRepository)\n+\t{\n+\t\tthis.importIssuesQueue = importIssuesQueue;\n+\t\tthis.milestoneRepository = milestoneRepository;\n+\t\tthis.budgetIssueRepository = budgetIssueRepository;\n+\t\tthis.effortIssueRepository = effortIssueRepository;\n+\t}\n+\n+\tpublic void importIssues(final ImmutableList<ImportIssuesRequest> requestList, final ImportService importService)\n+\t{\n+\t\tfinal CompletableFuture completableFuture =\n+\t\t\t\tCompletableFuture.runAsync(() -> importService.start(requestList));\n+\n+\t\twhile (!completableFuture.isDone() || !importIssuesQueue.isEmpty())\n+\t\t{\n+\t\t\tfinal ImmutableList<ImportIssueInfo> issueInfos = importIssuesQueue.drainAll();\n+\t\t\tissueInfos.forEach(issue -> trxManager.runInNewTrx(localTrx -> importIssue(issue)));\n+\t\t}\n+\t}\n+\n+\tprivate void importIssue(@NonNull final ImportIssueInfo importIssueInfo)\n+\t{\n+\t\ttry\n+\t\t{\n+\t\t\tif (ExternalProjectType.BUDGET.equals(importIssueInfo.getExternalProjectType()))\n+\t\t\t{\n+\t\t\t\timportBudgetIssue(importIssueInfo);\n+\t\t\t}\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\timportEffortIssue(importIssueInfo);\n+\t\t\t}\n+\t\t}\n+\t\tcatch (final Exception e)\n+\t\t{\n+\t\t\tLoggables.withLogger(log, Level.ERROR)\n+\t\t\t\t\t.addLog(IMPORT_LOG_MESSAGE_PREFIX +\"*** Error while importing issue: {}, errorMessage: {}\",importIssueInfo.toString(), e.getMessage(), e);\n+\t\t}\n+\t}\n+\n+\t@NonNull\n+\tprivate Optional<MilestoneId> importMilestone(@NonNull final Milestone milestone)\n+\t{\n+\t\tif (milestone.getExternalId() != null)\n+\t\t{\n+\t\t\tmilestoneRepository.getRepoIdByExternalId(milestone.getExternalId())\n+\t\t\t\t\t.ifPresent(milestone::setMilestoneId);\n+\t\t}\n+\n+\t\tfinal MilestoneId milestoneId = milestoneRepository.store(milestone);\n+\n+\t\treturn Optional.of(milestoneId);\n+\t}\n+\n+\tprivate void importBudgetIssue(@NonNull final ImportIssueInfo importIssueInfo)\n+\t{\n+\t\tif (importIssueInfo.getMilestone() != null)\n+\t\t{\n+\t\t\tfinal Optional<MilestoneId> milestoneId = importMilestone(importIssueInfo.getMilestone());\n+\t\t\tmilestoneId.ifPresent(id -> importIssueInfo.getMilestone().setMilestoneId(id));\n+\t\t}\n+\n+\t\tfinal Optional<BudgetIssue> existingBudgetIssue =\n+\t\t\t\tbudgetIssueRepository.getEntityByExternalId(importIssueInfo.getExternalIssueId());\n+\n+\t\tfinal BudgetIssue budgetIssue;\n+\t\tbudgetIssue = existingBudgetIssue\n+\t\t\t\t.map(issue -> updateExistingBudgetIssue(issue, importIssueInfo))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 129}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTIxNDA5OnYy", "diffSide": "RIGHT", "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/importer/IssueImporterService.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODo1MTowNFrOF-LmZw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODo1MTowNFrOF-LmZw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc0NjA4Nw==", "bodyText": "return void", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400746087", "createdAt": "2020-03-31T08:51:04Z", "author": {"login": "teosarca"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/importer/IssueImporterService.java", "diffHunk": "@@ -0,0 +1,242 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.importer;\n+\n+import ch.qos.logback.classic.Level;\n+import com.google.common.collect.ImmutableList;\n+import de.metas.logging.LogManager;\n+import de.metas.serviceprovider.budgetissue.BudgetIssue;\n+import de.metas.serviceprovider.budgetissue.BudgetIssueRepository;\n+import de.metas.serviceprovider.budgetissue.BudgetIssueType;\n+import de.metas.serviceprovider.effortissue.EffortIssue;\n+import de.metas.serviceprovider.effortissue.EffortIssueRepository;\n+import de.metas.serviceprovider.external.project.ExternalProjectType;\n+import de.metas.serviceprovider.importer.info.ImportIssueInfo;\n+import de.metas.serviceprovider.importer.info.ImportIssuesRequest;\n+import de.metas.serviceprovider.milestone.Milestone;\n+import de.metas.serviceprovider.milestone.MilestoneId;\n+import de.metas.serviceprovider.milestone.MilestoneRepository;\n+import de.metas.util.Loggables;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.trx.api.ITrxManager;\n+import org.slf4j.Logger;\n+import org.springframework.stereotype.Service;\n+\n+import java.util.Optional;\n+import java.util.concurrent.CompletableFuture;\n+\n+import static de.metas.serviceprovider.importer.ImportConstants.IMPORT_LOG_MESSAGE_PREFIX;\n+\n+@Service\n+public class IssueImporterService\n+{\n+\tprivate static final Logger log = LogManager.getLogger(IssueImporterService.class);\n+\n+\tprivate final ImportIssuesQueue importIssuesQueue;\n+\tprivate final MilestoneRepository milestoneRepository;\n+\tprivate final BudgetIssueRepository budgetIssueRepository;\n+\tprivate final EffortIssueRepository effortIssueRepository;\n+\tprivate final ITrxManager trxManager =  Services.get(ITrxManager.class);\n+\n+\tpublic IssueImporterService(final ImportIssuesQueue importIssuesQueue, final MilestoneRepository milestoneRepository, final BudgetIssueRepository budgetIssueRepository, final EffortIssueRepository effortIssueRepository)\n+\t{\n+\t\tthis.importIssuesQueue = importIssuesQueue;\n+\t\tthis.milestoneRepository = milestoneRepository;\n+\t\tthis.budgetIssueRepository = budgetIssueRepository;\n+\t\tthis.effortIssueRepository = effortIssueRepository;\n+\t}\n+\n+\tpublic void importIssues(final ImmutableList<ImportIssuesRequest> requestList, final ImportService importService)\n+\t{\n+\t\tfinal CompletableFuture completableFuture =\n+\t\t\t\tCompletableFuture.runAsync(() -> importService.start(requestList));\n+\n+\t\twhile (!completableFuture.isDone() || !importIssuesQueue.isEmpty())\n+\t\t{\n+\t\t\tfinal ImmutableList<ImportIssueInfo> issueInfos = importIssuesQueue.drainAll();\n+\t\t\tissueInfos.forEach(issue -> trxManager.runInNewTrx(localTrx -> importIssue(issue)));\n+\t\t}\n+\t}\n+\n+\tprivate void importIssue(@NonNull final ImportIssueInfo importIssueInfo)\n+\t{\n+\t\ttry\n+\t\t{\n+\t\t\tif (ExternalProjectType.BUDGET.equals(importIssueInfo.getExternalProjectType()))\n+\t\t\t{\n+\t\t\t\timportBudgetIssue(importIssueInfo);\n+\t\t\t}\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\timportEffortIssue(importIssueInfo);\n+\t\t\t}\n+\t\t}\n+\t\tcatch (final Exception e)\n+\t\t{\n+\t\t\tLoggables.withLogger(log, Level.ERROR)\n+\t\t\t\t\t.addLog(IMPORT_LOG_MESSAGE_PREFIX +\"*** Error while importing issue: {}, errorMessage: {}\",importIssueInfo.toString(), e.getMessage(), e);\n+\t\t}\n+\t}\n+\n+\t@NonNull\n+\tprivate Optional<MilestoneId> importMilestone(@NonNull final Milestone milestone)\n+\t{\n+\t\tif (milestone.getExternalId() != null)\n+\t\t{\n+\t\t\tmilestoneRepository.getRepoIdByExternalId(milestone.getExternalId())\n+\t\t\t\t\t.ifPresent(milestone::setMilestoneId);\n+\t\t}\n+\n+\t\tfinal MilestoneId milestoneId = milestoneRepository.store(milestone);\n+\n+\t\treturn Optional.of(milestoneId);\n+\t}\n+\n+\tprivate void importBudgetIssue(@NonNull final ImportIssueInfo importIssueInfo)\n+\t{\n+\t\tif (importIssueInfo.getMilestone() != null)\n+\t\t{\n+\t\t\tfinal Optional<MilestoneId> milestoneId = importMilestone(importIssueInfo.getMilestone());\n+\t\t\tmilestoneId.ifPresent(id -> importIssueInfo.getMilestone().setMilestoneId(id));\n+\t\t}\n+\n+\t\tfinal Optional<BudgetIssue> existingBudgetIssue =\n+\t\t\t\tbudgetIssueRepository.getEntityByExternalId(importIssueInfo.getExternalIssueId());\n+\n+\t\tfinal BudgetIssue budgetIssue;\n+\t\tbudgetIssue = existingBudgetIssue\n+\t\t\t\t.map(issue -> updateExistingBudgetIssue(issue, importIssueInfo))\n+\t\t\t\t.orElseGet(() -> buildBudgetIssue(importIssueInfo));\n+\n+\t\tbudgetIssueRepository.store(budgetIssue);\n+\t}\n+\n+\tprivate BudgetIssue updateExistingBudgetIssue(@NonNull final BudgetIssue existingBudgetIssue,\n+\t\t\t                                      @NonNull final ImportIssueInfo importIssueInfo)\n+\t{\n+\t\tif (importIssueInfo.getMilestone() != null\n+\t\t\t\t&& importIssueInfo.getMilestone().getMilestoneId() != null)\n+\t\t{\n+\t\t\texistingBudgetIssue.setMilestoneIdIfNull(importIssueInfo.getMilestone().getMilestoneId());\n+\t\t}\n+\t\texistingBudgetIssue.setAssigneeIdIfNull(importIssueInfo.getAssigneeId());\n+\t\texistingBudgetIssue.setDescriptionIfNull(importIssueInfo.getDescription());\n+\t\texistingBudgetIssue.setBudgetedEffortIfNull(importIssueInfo.getBudget());\n+\t\texistingBudgetIssue.setEstimatedEffortIfNull(importIssueInfo.getEstimation());\n+\n+\t\texistingBudgetIssue.setExternalIssueId(importIssueInfo.getExternalIssueId());\n+\t\texistingBudgetIssue.setExternalIssueNo(importIssueInfo.getExternalIssueNo());\n+\t\texistingBudgetIssue.setExternalIssueURL(importIssueInfo.getExternalIssueURL());\n+\t\texistingBudgetIssue.setExternalIssueDetails(importIssueInfo.getExternalIssueDetails());\n+\n+\t\treturn existingBudgetIssue;\n+\t}\n+\n+\tprivate BudgetIssue buildBudgetIssue(@NonNull final ImportIssueInfo importIssueInfo)\n+\t{\n+\t\tfinal MilestoneId milestoneId = importIssueInfo.getMilestone() != null\n+\t\t\t\t? importIssueInfo.getMilestone().getMilestoneId()\n+\t\t\t\t: null;\n+\n+\t\treturn BudgetIssue.builder()\n+\t\t\t\t.name(importIssueInfo.getName())\n+\t\t\t\t.description(importIssueInfo.getDescription())\n+\t\t\t\t.assigneeId(importIssueInfo.getAssigneeId())\n+\t\t\t\t.milestoneId(milestoneId)\n+\t\t\t\t.type(BudgetIssueType.EXTERNAL)\n+\t\t\t\t.externalIssueId(importIssueInfo.getExternalIssueId())\n+\t\t\t\t.externalIssueNo(importIssueInfo.getExternalIssueNo())\n+\t\t\t\t.externalIssueURL(importIssueInfo.getExternalIssueURL())\n+\t\t\t\t.effortUomId(importIssueInfo.getEffortUomId())\n+\t\t\t\t.estimatedEffort(importIssueInfo.getEstimation())\n+\t\t\t\t.budgetedEffort(importIssueInfo.getBudget())\n+\t\t\t\t.processed(importIssueInfo.isProcessed())\n+\t\t\t\t.orgId(importIssueInfo.getOrgId())\n+\t\t\t\t.externalIssueDetails(importIssueInfo.getExternalIssueDetails())\n+\t\t\t\t.build();\n+\t}\n+\n+\tprivate void importEffortIssue(@NonNull final ImportIssueInfo importIssueInfo)\n+\t{\n+\t\tif (importIssueInfo.getMilestone() != null)\n+\t\t{\n+\t\t\tfinal Optional<MilestoneId> milestoneId = importMilestone(importIssueInfo.getMilestone());\n+\t\t\tmilestoneId.ifPresent(milestoneId1 -> importIssueInfo.getMilestone().setMilestoneId(milestoneId1));\n+\t\t}\n+\n+\t\tfinal Optional<EffortIssue> existingEffortIssue =\n+\t\t\t\teffortIssueRepository.getEntityByExternalId(importIssueInfo.getExternalIssueId());\n+\n+\t\tfinal EffortIssue effortIssue;\n+\t\teffortIssue = existingEffortIssue\n+\t\t\t\t.map(issue -> updateExistingEffortIssue(importIssueInfo, issue))\n+\t\t\t\t.orElseGet(() -> buildEffortIssue(importIssueInfo));\n+\n+\t\teffortIssueRepository.store(effortIssue);\n+\t}\n+\n+\tprivate EffortIssue buildEffortIssue(@NonNull final ImportIssueInfo importIssueInfo)\n+\t{\n+\t\tfinal MilestoneId milestoneId = importIssueInfo.getMilestone() != null\n+\t\t\t\t? importIssueInfo.getMilestone().getMilestoneId()\n+\t\t\t\t: null;\n+\n+\t\treturn EffortIssue.builder()\n+\t\t\t\t.name(importIssueInfo.getName())\n+\t\t\t\t.description(importIssueInfo.getDescription())\n+\t\t\t\t.assigneeId(importIssueInfo.getAssigneeId())\n+\t\t\t\t.milestoneId(milestoneId)\n+\t\t\t\t.externalIssueId(importIssueInfo.getExternalIssueId())\n+\t\t\t\t.externalIssueNo(importIssueInfo.getExternalIssueNo())\n+\t\t\t\t.externalIssueURL(importIssueInfo.getExternalIssueURL())\n+\t\t\t\t.estimatedEffort(importIssueInfo.getEstimation())\n+\t\t\t\t.budgetedEffort(importIssueInfo.getBudget())\n+\t\t\t\t.effortUomId(importIssueInfo.getEffortUomId())\n+\t\t\t\t.processed(importIssueInfo.isProcessed())\n+\t\t\t\t.orgId(importIssueInfo.getOrgId())\n+\t\t\t\t.externalIssueDetailList(importIssueInfo.getExternalIssueDetails())\n+\t\t\t\t.build();\n+\t}\n+\n+\tprivate EffortIssue updateExistingEffortIssue(@NonNull final ImportIssueInfo importIssueInfo,", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 222}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTIxODc3OnYy", "diffSide": "RIGHT", "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/milestone/Milestone.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODo1MjoxOVrOF-Lpdg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQwNzo0MDowNVrOF-0Ydw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc0Njg3MA==", "bodyText": "why not ZonedDateTime?", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400746870", "createdAt": "2020-03-31T08:52:19Z", "author": {"login": "teosarca"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/milestone/Milestone.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.milestone;\n+\n+import de.metas.organization.OrgId;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NonNull;\n+\n+import javax.annotation.Nullable;\n+import java.time.LocalDateTime;\n+\n+@Data\n+@Builder\n+public class Milestone\n+{\n+\t@NonNull\n+\tprivate OrgId orgId;\n+\n+\t@Nullable\n+\tprivate MilestoneId milestoneId;\n+\n+\t@Nullable\n+\tprivate String externalId;\n+\n+\t@Nullable\n+\tprivate String description;\n+\n+\t@NonNull\n+\tprivate String name;\n+\n+\t@NonNull\n+\tprivate String value;\n+\n+\t@Nullable\n+\tprivate LocalDateTime dueDate;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDgzMzA4NA==", "bodyText": "no exact reason, LocalDateTime was enough for what I needed.", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400833084", "createdAt": "2020-03-31T11:18:36Z", "author": {"login": "pvpurcarcosmin"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/milestone/Milestone.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.milestone;\n+\n+import de.metas.organization.OrgId;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NonNull;\n+\n+import javax.annotation.Nullable;\n+import java.time.LocalDateTime;\n+\n+@Data\n+@Builder\n+public class Milestone\n+{\n+\t@NonNull\n+\tprivate OrgId orgId;\n+\n+\t@Nullable\n+\tprivate MilestoneId milestoneId;\n+\n+\t@Nullable\n+\tprivate String externalId;\n+\n+\t@Nullable\n+\tprivate String description;\n+\n+\t@NonNull\n+\tprivate String name;\n+\n+\t@NonNull\n+\tprivate String value;\n+\n+\t@Nullable\n+\tprivate LocalDateTime dueDate;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc0Njg3MA=="}, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTIxMzk4MQ==", "bodyText": "IMHO dueDate is a logistic date,  so it has to be precise, so timezone is needed for that.\nLocalDateTime is a date+time but without a time zone.\nIf for example, the due date is \"2020-04-20 13:14\" it's important to know in which timezone, CEST, EEST?\nIf time is not important, I would suggest using LocalDate.", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r401213981", "createdAt": "2020-03-31T21:03:37Z", "author": {"login": "teosarca"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/milestone/Milestone.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.milestone;\n+\n+import de.metas.organization.OrgId;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NonNull;\n+\n+import javax.annotation.Nullable;\n+import java.time.LocalDateTime;\n+\n+@Data\n+@Builder\n+public class Milestone\n+{\n+\t@NonNull\n+\tprivate OrgId orgId;\n+\n+\t@Nullable\n+\tprivate MilestoneId milestoneId;\n+\n+\t@Nullable\n+\tprivate String externalId;\n+\n+\t@Nullable\n+\tprivate String description;\n+\n+\t@NonNull\n+\tprivate String name;\n+\n+\t@NonNull\n+\tprivate String value;\n+\n+\t@Nullable\n+\tprivate LocalDateTime dueDate;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc0Njg3MA=="}, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 56}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQxNDI2Mw==", "bodyText": "I see, since time is not set for dueDate, I'll go with LocalDate, thx.", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r401414263", "createdAt": "2020-04-01T07:40:05Z", "author": {"login": "pvpurcarcosmin"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/milestone/Milestone.java", "diffHunk": "@@ -0,0 +1,59 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.milestone;\n+\n+import de.metas.organization.OrgId;\n+import lombok.Builder;\n+import lombok.Data;\n+import lombok.NonNull;\n+\n+import javax.annotation.Nullable;\n+import java.time.LocalDateTime;\n+\n+@Data\n+@Builder\n+public class Milestone\n+{\n+\t@NonNull\n+\tprivate OrgId orgId;\n+\n+\t@Nullable\n+\tprivate MilestoneId milestoneId;\n+\n+\t@Nullable\n+\tprivate String externalId;\n+\n+\t@Nullable\n+\tprivate String description;\n+\n+\t@NonNull\n+\tprivate String name;\n+\n+\t@NonNull\n+\tprivate String value;\n+\n+\t@Nullable\n+\tprivate LocalDateTime dueDate;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc0Njg3MA=="}, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 56}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4NTIyNjUxOnYy", "diffSide": "RIGHT", "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/milestone/MilestoneRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODo1NDowM1rOF-LuBg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wMy0zMVQwODo1NDowM1rOF-LuBg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMDc0ODAzOA==", "bodyText": "consider\n\nmilestone.setMilestoneId\nreturn void", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r400748038", "createdAt": "2020-03-31T08:54:03Z", "author": {"login": "teosarca"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/milestone/MilestoneRepository.java", "diffHunk": "@@ -0,0 +1,76 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.milestone;\n+\n+import de.metas.serviceprovider.model.I_S_Milestone;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.springframework.stereotype.Repository;\n+\n+import java.sql.Timestamp;\n+import java.util.Optional;\n+\n+@Repository\n+public class MilestoneRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\n+\tpublic MilestoneId store(@NonNull final Milestone milestone)\n+\t{\n+\t\tfinal I_S_Milestone record = milestone.getMilestoneId() != null\n+\t\t\t\t? InterfaceWrapperHelper.load(milestone.getMilestoneId(), I_S_Milestone.class)\n+\t\t\t\t: InterfaceWrapperHelper.newInstance(I_S_Milestone.class);\n+\n+\t\tif (milestone.getDueDate() != null)\n+\t\t{\n+\t\t\trecord.setMilestone_DueDate(Timestamp.valueOf(milestone.getDueDate()));\n+\t\t}\n+\n+\t\trecord.setAD_Org_ID(milestone.getOrgId().getRepoId());\n+\t\trecord.setName(milestone.getName());\n+\t\trecord.setValue(milestone.getValue());\n+\t\trecord.setDescription(milestone.getDescription());\n+\t\trecord.setProcessed(milestone.isProcessed());\n+\n+\t\trecord.setExternalId(milestone.getExternalId());\n+\n+\t\tInterfaceWrapperHelper.save(record);\n+\n+\t\treturn MilestoneId.ofRepoId(record.getS_Milestone_ID());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "d7f8e7968d9df9ef81f558543cd563a714aa47d3"}, "originalPosition": 61}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ4OTk3NzkyOnYy", "diffSide": "RIGHT", "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/user/UserId.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDowMjowNlrOF-5imA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDowNzo1MlrOF-5wIA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ5ODc3Ng==", "bodyText": "sry to bother you again with this, but there is an f missing \ud83d\ude0a", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r401498776", "createdAt": "2020-04-01T10:02:06Z", "author": {"login": "metas-ts"}, "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/user/UserId.java", "diffHunk": "@@ -124,4 +124,10 @@ public boolean isRegularUser()\n \t{\n \t\treturn !isSystemUser();\n \t}\n+\n+\t@Nullable\n+\tpublic static UserId ofRepoIdOrNullISystem(final int repoId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1945cfdec56fc155207fbdda283e001811dad166"}, "originalPosition": 6}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUwMjI0MA==", "bodyText": "actually that was not a typo, I was thinking ofRepoIdOrNullIgnoreSystem, but now that u mentioned it, ofRepoIdOrNullIfSystem it's better \ud83d\udc4d", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r401502240", "createdAt": "2020-04-01T10:07:52Z", "author": {"login": "pvpurcarcosmin"}, "path": "de.metas.adempiere.adempiere/base/src/main/java/de/metas/user/UserId.java", "diffHunk": "@@ -124,4 +124,10 @@ public boolean isRegularUser()\n \t{\n \t\treturn !isSystemUser();\n \t}\n+\n+\t@Nullable\n+\tpublic static UserId ofRepoIdOrNullISystem(final int repoId)", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTQ5ODc3Ng=="}, "originalCommit": {"oid": "1945cfdec56fc155207fbdda283e001811dad166"}, "originalPosition": 6}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjQ5MDA3MDMwOnYy", "diffSide": "RIGHT", "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/issue/IssueRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDoyNzoxMFrOF-6bQQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNC0wMVQxMDoyNzoxMFrOF-6bQQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQwMTUxMzI4MQ==", "bodyText": "@teosarca if you see this, we are aware of the n+1 problem, but chose not to talked it this time. if mass-import (which happens very rarely) becomes too slow, we can still put a staging service in between.\n@pvpurcarcosmin please make sure to have an index on the issue-detail's issue-id column", "url": "https://github.com/metasfresh/metasfresh/pull/6084#discussion_r401513281", "createdAt": "2020-04-01T10:27:10Z", "author": {"login": "metas-ts"}, "path": "de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/issue/IssueRepository.java", "diffHunk": "@@ -0,0 +1,135 @@\n+/*\n+ * #%L\n+ * de.metas.serviceprovider.base\n+ * %%\n+ * Copyright (C) 2019 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.serviceprovider.issue;\n+\n+import de.metas.organization.OrgId;\n+import de.metas.project.ProjectId;\n+import de.metas.serviceprovider.external.issuedetails.ExternalIssueDetailsRepository;\n+import de.metas.serviceprovider.milestone.MilestoneId;\n+import de.metas.serviceprovider.model.I_S_Issue;\n+import de.metas.uom.UomId;\n+import de.metas.user.UserId;\n+import de.metas.util.NumberUtils;\n+import de.metas.util.Services;\n+import lombok.NonNull;\n+import org.adempiere.ad.dao.IQueryBL;\n+import org.adempiere.exceptions.AdempiereException;\n+import org.adempiere.model.InterfaceWrapperHelper;\n+import org.springframework.stereotype.Repository;\n+\n+import java.util.Optional;\n+\n+@Repository\n+public class IssueRepository\n+{\n+\tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n+\n+\tprivate final ExternalIssueDetailsRepository externalIssueDetailsRepository;\n+\n+\tpublic IssueRepository(final ExternalIssueDetailsRepository externalIssueDetailsRepository)\n+\t{\n+\t\tthis.externalIssueDetailsRepository = externalIssueDetailsRepository;\n+\t}\n+\n+\tpublic void save(final IssueEntity issueEntity)\n+\t{\n+\t\tfinal I_S_Issue record;\n+\n+\t\trecord = InterfaceWrapperHelper.loadOrNew(issueEntity.getIssueId(), I_S_Issue.class);\n+\n+\t\trecord.setAD_Org_ID(issueEntity.getOrgId().getRepoId());\n+\t\trecord.setAD_User_ID(NumberUtils.asInt(issueEntity.getAssigneeId(), -1));\n+\t\trecord.setC_Project_ID(NumberUtils.asInt(issueEntity.getProjectId(), -1));\n+\n+\t\trecord.setName(issueEntity.getName());\n+\t\trecord.setValue(issueEntity.getSearchKey());\n+\t\trecord.setDescription(issueEntity.getDescription());\n+\n+\t\trecord.setIssueType(issueEntity.getType().getValue());\n+\t\trecord.setIsEffortIssue(issueEntity.isEffortIssue());\n+\t\trecord.setProcessed(issueEntity.isProcessed());\n+\n+\t\trecord.setS_Milestone_ID(NumberUtils.asInt(issueEntity.getMilestoneId(), -1));\n+\t\trecord.setEstimatedEffort(issueEntity.getEstimatedEffort());\n+\t\trecord.setBudgetedEffort(issueEntity.getBudgetedEffort());\n+\t\trecord.setEffort_UOM_ID(issueEntity.getEffortUomId().getRepoId());\n+\n+\t\trecord.setExternalId(issueEntity.getExternalIssueId());\n+\t\trecord.setExternalIssueNo(issueEntity.getExternalIssueNo());\n+\t\trecord.setIssueURL(issueEntity.getExternalIssueURL());\n+\n+\t\tInterfaceWrapperHelper.saveRecord(record);\n+\n+\t\tfinal IssueId issueId = IssueId.ofRepoId(record.getS_Issue_ID());\n+\n+\t\tissueEntity.setIssueId(issueId);\n+\n+\t\texternalIssueDetailsRepository.persistIssueDetails(issueId, issueEntity.getExternalIssueDetails());\n+\t}\n+\n+\t@NonNull\n+\tpublic Optional<IssueEntity> getEntityByExternalId(@NonNull final String externalIssueId)\n+\t{\n+\t\tfinal I_S_Issue budget_issue = queryBL\n+\t\t\t\t.createQueryBuilder(I_S_Issue.class)\n+\t\t\t\t.addOnlyActiveRecordsFilter()\n+\t\t\t\t.addEqualsFilter(I_S_Issue.COLUMNNAME_ExternalId, externalIssueId)\n+\t\t\t\t.create()\n+\t\t\t\t.firstOnly(I_S_Issue.class);\n+\n+\t\treturn budget_issue != null ? Optional.of(buildIssueEntity(budget_issue)) : Optional.empty();\n+\t}\n+\n+\t@NonNull\n+\tprivate IssueEntity buildIssueEntity(final I_S_Issue record)\n+\t{\n+\t\tfinal Optional<IssueType> issueType = IssueType.getTypeByValue(record.getIssueType());\n+\n+\t\tif (!issueType.isPresent())\n+\t\t{\n+\t\t\tthrow new AdempiereException(\"Unknown IssueType!\").appendParametersToMessage()\n+\t\t\t\t\t.setParameter(\"I_S_Issue\", record);\n+\t\t}\n+\n+\t\treturn IssueEntity.builder()\n+\t\t\t\t.orgId(OrgId.ofRepoId(record.getAD_Org_ID()))\n+\t\t\t\t.projectId(ProjectId.ofRepoId(record.getC_Project_ID()))\n+\t\t\t\t.issueId(IssueId.ofRepoId(record.getS_Issue_ID()))\n+\t\t\t\t.effortUomId(UomId.ofRepoId(record.getEffort_UOM_ID()))\n+\t\t\t\t.milestoneId(MilestoneId.ofRepoIdOrNull(record.getS_Milestone_ID()))\n+\t\t\t\t.assigneeId(UserId.ofRepoIdOrNullISystem(record.getAD_User_ID()))\n+\t\t\t\t.name(record.getName())\n+\t\t\t\t.searchKey(record.getValue())\n+\t\t\t\t.description(record.getDescription())\n+\t\t\t\t.type(issueType.get())\n+\t\t\t\t.processed(record.isProcessed())\n+\t\t\t\t.isEffortIssue(record.isEffortIssue())\n+\t\t\t\t.estimatedEffort(record.getEstimatedEffort())\n+\t\t\t\t.budgetedEffort(record.getBudgetedEffort())\n+\t\t\t\t.externalIssueId(record.getExternalId())\n+\t\t\t\t.externalIssueNo(record.getExternalIssueNo())\n+\t\t\t\t.externalIssueURL(record.getIssueURL())\n+\t\t\t\t.externalIssueDetails(externalIssueDetailsRepository.getByIssueId(IssueId.ofRepoId(record.getS_Issue_ID())))", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "1945cfdec56fc155207fbdda283e001811dad166"}, "originalPosition": 132}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1562, "cost": 1, "resetAt": "2021-11-12T19:05:54Z"}}}