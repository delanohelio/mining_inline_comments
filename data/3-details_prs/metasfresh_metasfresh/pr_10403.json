{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTM1NjgwOTY1", "number": 10403, "title": "REST Endpoint for Invoice data Query by customer", "bodyText": "#10396\nSigned-off-by: TheBestPessimist cristian@tbp.land", "createdAt": "2020-12-10T06:00:39Z", "url": "https://github.com/metasfresh/metasfresh/pull/10403", "merged": true, "mergeCommit": {"oid": "ba72b62861148d16a081adba7762742e0ad2cea5"}, "closed": true, "closedAt": "2020-12-10T12:45:44Z", "author": {"login": "TheBestPessimist"}, "timelineItems": {"totalCount": 19, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpPPAAABdkf3THAH2gAyNTM1NjgwOTY1OjJiYjMzZWQ5NGI4NWE3M2Y1MmIwZGM5ODNhNTg1YmFlOTliNWIwZjY=", "endCursor": "Y3Vyc29yOnYyOpPPAAABdkyMGrgH2gAyNTM1NjgwOTY1OmY0NDJkMjhlNGU2M2M4MjM5YjYwYmFkNDNhMDg2NmQxMmZkZjE1ZjY=", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"__typename": "PullRequestCommit", "commit": {"oid": "2bb33ed94b85a73f52b0dc983a585bae99b5b0f6", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/2bb33ed94b85a73f52b0dc983a585bae99b5b0f6", "committedDate": "2020-12-09T14:45:58Z", "message": "Add InvoiceInfo Endpoint\n\nhttps://github.com/metasfresh/metasfresh/issues/10396\nSigned-off-by: TheBestPessimist <cristian@tbp.land>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "0568af55e7d43996ec1dfae132a59a6d35e7a83b", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/0568af55e7d43996ec1dfae132a59a6d35e7a83b", "committedDate": "2020-12-10T07:02:30Z", "message": "Little fixes here, little fixes there, little fixes everywhere\n\nSigned-off-by: TheBestPessimist <cristian@tbp.land>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4OTAzMTYy", "url": "https://github.com/metasfresh/metasfresh/pull/10403#pullrequestreview-548903162", "createdAt": "2020-12-10T07:04:58Z", "commit": {"oid": "0568af55e7d43996ec1dfae132a59a6d35e7a83b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNzowNDo1OVrOIC6DvQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNzowNDo1OVrOIC6DvQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTkxOTI5Mw==", "bodyText": "pls extract service as field", "url": "https://github.com/metasfresh/metasfresh/pull/10403#discussion_r539919293", "createdAt": "2020-12-10T07:04:59Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/invoice/impl/InvoiceService.java", "diffHunk": "@@ -65,6 +77,34 @@ public boolean hasArchive(@NonNull final InvoiceId invoiceId)\n \t\treturn archiveBL.getLastArchive(TableRecordReference.of(I_C_Invoice.Table_Name, invoiceId));\n \t}\n \n+\t@NonNull\n+\tpublic JSONInvoiceInfoResponse getInvoiceInfo(@NonNull final InvoiceId invoiceId, final String ad_language)\n+\t{\n+\t\tfinal JSONInvoiceInfoResponse.JSONInvoiceInfoResponseBuilder result = JSONInvoiceInfoResponse.builder();\n+\n+\t\tfinal I_C_Invoice invoice = invoiceDAO.getByIdInTrx(invoiceId);\n+\n+\t\tfinal CurrencyCode currency = Services.get(ICurrencyDAO.class).getCurrencyCodeById(CurrencyId.ofRepoId(invoice.getC_Currency_ID()));", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0568af55e7d43996ec1dfae132a59a6d35e7a83b"}, "originalPosition": 53}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4OTA0NTA3", "url": "https://github.com/metasfresh/metasfresh/pull/10403#pullrequestreview-548904507", "createdAt": "2020-12-10T07:08:03Z", "commit": {"oid": "0568af55e7d43996ec1dfae132a59a6d35e7a83b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNzowODowM1rOIC6Opg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNzowODowM1rOIC6Opg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTkyMjA4Ng==", "bodyText": "is there any reason for this naming convention?\ni would prefer camel case", "url": "https://github.com/metasfresh/metasfresh/pull/10403#discussion_r539922086", "createdAt": "2020-12-10T07:08:03Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/invoice/impl/JSONInvoiceInfoResponse.java", "diffHunk": "@@ -0,0 +1,78 @@\n+/*\n+ * #%L\n+ * de.metas.business.rest-api-impl\n+ * %%\n+ * Copyright (C) 2020 metas GmbH\n+ * %%\n+ * This program is free software: you can redistribute it and/or modify\n+ * it under the terms of the GNU General Public License as\n+ * published by the Free Software Foundation, either version 2 of the\n+ * License, or (at your option) any later version.\n+ *\n+ * This program is distributed in the hope that it will be useful,\n+ * but WITHOUT ANY WARRANTY; without even the implied warranty of\n+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n+ * GNU General Public License for more details.\n+ *\n+ * You should have received a copy of the GNU General Public\n+ * License along with this program. If not, see\n+ * <http://www.gnu.org/licenses/gpl-2.0.html>.\n+ * #L%\n+ */\n+\n+package de.metas.rest_api.invoice.impl;\n+\n+import com.fasterxml.jackson.annotation.JsonAutoDetect;\n+import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n+import com.fasterxml.jackson.annotation.JsonInclude;\n+import com.fasterxml.jackson.databind.annotation.JsonDeserialize;\n+import com.fasterxml.jackson.databind.annotation.JsonPOJOBuilder;\n+import de.metas.currency.CurrencyCode;\n+import lombok.Builder;\n+import lombok.NonNull;\n+import lombok.Singular;\n+import lombok.Value;\n+\n+import java.math.BigDecimal;\n+import java.util.List;\n+\n+@Builder\n+@Value\n+@JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.ANY, getterVisibility = JsonAutoDetect.Visibility.NONE, isGetterVisibility = JsonAutoDetect.Visibility.NONE, setterVisibility = JsonAutoDetect.Visibility.NONE)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonDeserialize(builder = JSONInvoiceInfoResponse.JSONInvoiceInfoResponseBuilder.class)\n+public class JSONInvoiceInfoResponse\n+{\n+\t@Singular\n+\t@NonNull\n+\tList<JSONInvoiceLineInfo> lineInfos;\n+\n+\t@JsonIgnoreProperties(ignoreUnknown = true)\n+\t@JsonPOJOBuilder(withPrefix = \"\")\n+\tstatic class JSONInvoiceInfoResponseBuilder\n+\t{\n+\t}\n+}\n+\n+\n+@Builder\n+@Value\n+@JsonAutoDetect(fieldVisibility = JsonAutoDetect.Visibility.ANY, getterVisibility = JsonAutoDetect.Visibility.NONE, isGetterVisibility = JsonAutoDetect.Visibility.NONE, setterVisibility = JsonAutoDetect.Visibility.NONE)\n+@JsonInclude(JsonInclude.Include.NON_NULL)\n+@JsonDeserialize(builder = JSONInvoiceLineInfo.JSONInvoiceLineInfoBuilder.class)\n+class JSONInvoiceLineInfo\n+{\n+\tint line_number;\n+\tString product_name;\n+\tBigDecimal qty_invoiced;\n+\tBigDecimal price;\n+\tBigDecimal tax_rate;\n+\tBigDecimal line_net_amt;\n+\tCurrencyCode currency;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0568af55e7d43996ec1dfae132a59a6d35e7a83b"}, "originalPosition": 71}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4OTA3NDI4", "url": "https://github.com/metasfresh/metasfresh/pull/10403#pullrequestreview-548907428", "createdAt": "2020-12-10T07:13:48Z", "commit": {"oid": "0568af55e7d43996ec1dfae132a59a6d35e7a83b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNzoxMzo0OFrOIC6hfw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNzoxMzo0OFrOIC6hfw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTkyNjkxMQ==", "bodyText": "try/catch, return ResponseEntity.badRequestSomething(JsonError.of...)", "url": "https://github.com/metasfresh/metasfresh/pull/10403#discussion_r539926911", "createdAt": "2020-12-10T07:13:48Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/invoicecandidates/impl/InvoicesRestControllerImpl.java", "diffHunk": "@@ -157,6 +159,28 @@ public InvoicesRestControllerImpl(\n \t\treturn ResponseEntity.notFound().build();\n \t}\n \n+\t@ApiResponses(value = {\n+\t\t\t@ApiResponse(code = 200, message = \"Invoice info retrieved\"),\n+\t\t\t@ApiResponse(code = 401, message = \"You are not authorized\"),\n+\t\t\t@ApiResponse(code = 404, message = \"No Invoice found\")\n+\t})\n+\t@GetMapping(path = \"{invoiceId}/invoiceInfo\", produces = \"application/json\")\n+\t@Override\n+\tpublic ResponseEntity<?> getInvoiceInfo(\n+\t\t\t@ApiParam(required = true, value = \"metasfreshId of the invoice\")\n+\t\t\t@PathVariable(\"invoiceId\") final int invoiceRecordId)\n+\t{\n+\t\tfinal InvoiceId invoiceId = InvoiceId.ofRepoIdOrNull(invoiceRecordId);\n+\t\tif (invoiceId == null)\n+\t\t{\n+\t\t\treturn ResponseEntity.notFound().build();\n+\t\t}\n+\n+\t\tfinal JSONInvoiceInfoResponse invoiceInfo = invoiceService.getInvoiceInfo(invoiceId, Env.getAD_Language());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0568af55e7d43996ec1dfae132a59a6d35e7a83b"}, "originalPosition": 37}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4OTExODMy", "url": "https://github.com/metasfresh/metasfresh/pull/10403#pullrequestreview-548911832", "createdAt": "2020-12-10T07:22:08Z", "commit": {"oid": "0568af55e7d43996ec1dfae132a59a6d35e7a83b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNzoyMjowOFrOIC65nw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNzoyMjowOFrOIC65nw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTkzMzA4Nw==", "bodyText": "i think Optional is not needed because tax record shall always exist for a given ID. If not, it's a db inconsistency and not a missing rate.\nBut, instead of BigDecimal, pls consider returning de.metas.util.lang.Percent", "url": "https://github.com/metasfresh/metasfresh/pull/10403#discussion_r539933087", "createdAt": "2020-12-10T07:22:08Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business/src/main/java/de/metas/tax/api/impl/TaxDAO.java", "diffHunk": "@@ -213,4 +190,15 @@ public ITranslatableString getTaxCategoryNameById(@Nullable final TaxCategoryId\n \n \t\treturn Optional.ofNullable(taxCategoryId);\n \t}\n+\n+\t@Override\n+\tpublic Optional<BigDecimal> getRateById(@NonNull final TaxId taxId)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0568af55e7d43996ec1dfae132a59a6d35e7a83b"}, "originalPosition": 82}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4OTEyODA2", "url": "https://github.com/metasfresh/metasfresh/pull/10403#pullrequestreview-548912806", "createdAt": "2020-12-10T07:24:07Z", "commit": {"oid": "0568af55e7d43996ec1dfae132a59a6d35e7a83b"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNzoyNDowN1rOIC688g==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwNzoyNDowN1rOIC688g==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzOTkzMzkzOA==", "bodyText": "are these HTTP codes still valid for this method?", "url": "https://github.com/metasfresh/metasfresh/pull/10403#discussion_r539933938", "createdAt": "2020-12-10T07:24:07Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/invoicecandidates/impl/InvoicesRestControllerImpl.java", "diffHunk": "@@ -157,6 +159,28 @@ public InvoicesRestControllerImpl(\n \t\treturn ResponseEntity.notFound().build();\n \t}\n \n+\t@ApiResponses(value = {\n+\t\t\t@ApiResponse(code = 200, message = \"Invoice info retrieved\"),\n+\t\t\t@ApiResponse(code = 401, message = \"You are not authorized\"),\n+\t\t\t@ApiResponse(code = 404, message = \"No Invoice found\")", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0568af55e7d43996ec1dfae132a59a6d35e7a83b"}, "originalPosition": 23}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ4OTEzMjg2", "url": "https://github.com/metasfresh/metasfresh/pull/10403#pullrequestreview-548913286", "createdAt": "2020-12-10T07:25:02Z", "commit": {"oid": "0568af55e7d43996ec1dfae132a59a6d35e7a83b"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "cb75dbe51b9bad3b7137c3e4615ffb0ee46d0728", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/cb75dbe51b9bad3b7137c3e4615ffb0ee46d0728", "committedDate": "2020-12-10T07:58:12Z", "message": "Little fixes here, little fixes there, little fixes everywhere\n\nSigned-off-by: TheBestPessimist <cristian@tbp.land>"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "b14820c4fa152750a68bf81bb618539b38277fb3", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/b14820c4fa152750a68bf81bb618539b38277fb3", "committedDate": "2020-12-10T09:07:34Z", "message": "Fix names\n\nSigned-off-by: TheBestPessimist <cristian@tbp.land>"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5MDA4OTAz", "url": "https://github.com/metasfresh/metasfresh/pull/10403#pullrequestreview-549008903", "createdAt": "2020-12-10T09:37:45Z", "commit": {"oid": "b14820c4fa152750a68bf81bb618539b38277fb3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwOTozNzo0NVrOIC_9ww==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwOTozNzo0NVrOIC_9ww==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAxNjA2Nw==", "bodyText": "pls use JsonError class that we already have", "url": "https://github.com/metasfresh/metasfresh/pull/10403#discussion_r540016067", "createdAt": "2020-12-10T09:37:45Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/invoicecandidates/impl/InvoicesRestControllerImpl.java", "diffHunk": "@@ -157,6 +159,35 @@ public InvoicesRestControllerImpl(\n \t\treturn ResponseEntity.notFound().build();\n \t}\n \n+\t@ApiResponses(value = {\n+\t\t\t@ApiResponse(code = 200, message = \"Invoice info retrieved\"),\n+\t\t\t@ApiResponse(code = 401, message = \"You are not authorized\"),\n+\t\t\t@ApiResponse(code = 404, message = \"No Invoice found\"),\n+\t\t\t@ApiResponse(code = 422, message = \"An error happened during Invoice info retrieval\"),\n+\t})\n+\t@GetMapping(path = \"{invoiceId}/invoiceInfo\", produces = \"application/json\")\n+\t@Override\n+\tpublic ResponseEntity<?> getInvoiceInfo(\n+\t\t\t@ApiParam(required = true, value = \"metasfreshId of the invoice\")\n+\t\t\t@PathVariable(\"invoiceId\") final int invoiceRecordId)\n+\t{\n+\t\tfinal InvoiceId invoiceId = InvoiceId.ofRepoIdOrNull(invoiceRecordId);\n+\t\tif (invoiceId == null)\n+\t\t{\n+\t\t\treturn ResponseEntity.notFound().build();\n+\t\t}\n+\n+\t\ttry\n+\t\t{\n+\t\t\tfinal JSONInvoiceInfoResponse invoiceInfo = invoiceService.getInvoiceInfo(invoiceId, Env.getAD_Language());\n+\t\t\treturn ResponseEntity.ok(invoiceInfo);\n+\t\t}\n+\t\tcatch (final Exception e)\n+\t\t{\n+\t\t\treturn ResponseEntity.unprocessableEntity().body(e.getLocalizedMessage());", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b14820c4fa152750a68bf81bb618539b38277fb3"}, "originalPosition": 45}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5MDExODE1", "url": "https://github.com/metasfresh/metasfresh/pull/10403#pullrequestreview-549011815", "createdAt": "2020-12-10T09:40:58Z", "commit": {"oid": "b14820c4fa152750a68bf81bb618539b38277fb3"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwOTo0MDo1OFrOIDAHCw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQwOTo0MDo1OFrOIDAHCw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDAxODQ0Mw==", "bodyText": "now that i am looking, why not using getTaxById... even overriding with a method which takes TaxId as param?", "url": "https://github.com/metasfresh/metasfresh/pull/10403#discussion_r540018443", "createdAt": "2020-12-10T09:40:58Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business/src/main/java/de/metas/tax/api/impl/TaxDAO.java", "diffHunk": "@@ -213,4 +190,15 @@ public ITranslatableString getTaxCategoryNameById(@Nullable final TaxCategoryId\n \n \t\treturn Optional.ofNullable(taxCategoryId);\n \t}\n+\n+\t@Override\n+\tpublic Percent getRateById(@NonNull final TaxId taxId)\n+\t{\n+\t\tfinal I_C_Tax tax = queryBL.createQueryBuilder(I_C_Tax.class)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "b14820c4fa152750a68bf81bb618539b38277fb3"}, "originalPosition": 84}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5MDEzMjQ0", "url": "https://github.com/metasfresh/metasfresh/pull/10403#pullrequestreview-549013244", "createdAt": "2020-12-10T09:42:32Z", "commit": {"oid": "b14820c4fa152750a68bf81bb618539b38277fb3"}, "state": "CHANGES_REQUESTED", "comments": {"totalCount": 0, "pageInfo": {"startCursor": null, "endCursor": null, "hasNextPage": false, "hasPreviousPage": false}, "nodes": []}}, {"__typename": "PullRequestCommit", "commit": {"oid": "41802cf75cbbd9de08b03a6cb9d0c4c68fe29b67", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/41802cf75cbbd9de08b03a6cb9d0c4c68fe29b67", "committedDate": "2020-12-10T11:41:05Z", "message": "Use `JsonError` when returning error"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "507a2af244dd7c89f455fc70e6661da0d539c8c8", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/507a2af244dd7c89f455fc70e6661da0d539c8c8", "committedDate": "2020-12-10T11:43:50Z", "message": "Add `getTaxById` using RepoIdAware"}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5MTI2NTY2", "url": "https://github.com/metasfresh/metasfresh/pull/10403#pullrequestreview-549126566", "createdAt": "2020-12-10T12:00:39Z", "commit": {"oid": "507a2af244dd7c89f455fc70e6661da0d539c8c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMjowMDozOVrOIDF0xA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMjowMDozOVrOIDF0xA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDExMjA2OA==", "bodyText": "isn't de.metas.rest_api.utils.JsonErrors accesible from here?\nthat would create nice instances", "url": "https://github.com/metasfresh/metasfresh/pull/10403#discussion_r540112068", "createdAt": "2020-12-10T12:00:39Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/invoicecandidates/impl/InvoicesRestControllerImpl.java", "diffHunk": "@@ -157,6 +162,42 @@ public InvoicesRestControllerImpl(\n \t\treturn ResponseEntity.notFound().build();\n \t}\n \n+\t@ApiResponses(value = {\n+\t\t\t@ApiResponse(code = 200, message = \"Invoice info retrieved\"),\n+\t\t\t@ApiResponse(code = 401, message = \"You are not authorized\"),\n+\t\t\t@ApiResponse(code = 404, message = \"No Invoice found\"),\n+\t\t\t@ApiResponse(code = 422, message = \"An error happened during Invoice info retrieval\"),\n+\t})\n+\t@GetMapping(path = \"{invoiceId}/invoiceInfo\", produces = \"application/json\")\n+\t@Override\n+\tpublic ResponseEntity<?> getInvoiceInfo(\n+\t\t\t@ApiParam(required = true, value = \"metasfreshId of the invoice\")\n+\t\t\t@PathVariable(\"invoiceId\") final int invoiceRecordId)\n+\t{\n+\t\tfinal InvoiceId invoiceId = InvoiceId.ofRepoIdOrNull(invoiceRecordId);\n+\t\tif (invoiceId == null)\n+\t\t{\n+\t\t\treturn ResponseEntity.notFound().build();\n+\t\t}\n+\n+\t\ttry\n+\t\t{\n+\t\t\tfinal JSONInvoiceInfoResponse invoiceInfo = invoiceService.getInvoiceInfo(invoiceId, Env.getAD_Language());\n+\t\t\treturn ResponseEntity.ok(invoiceInfo);\n+\t\t}\n+\t\tcatch (final Exception ex)\n+\t\t{\n+\t\t\tfinal JsonError error = JsonError.ofSingleItem(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "507a2af244dd7c89f455fc70e6661da0d539c8c8"}, "originalPosition": 50}]}}, {"__typename": "PullRequestReview", "id": "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3NTQ5MTI2Nzg1", "url": "https://github.com/metasfresh/metasfresh/pull/10403#pullrequestreview-549126785", "createdAt": "2020-12-10T12:00:55Z", "commit": {"oid": "507a2af244dd7c89f455fc70e6661da0d539c8c8"}, "state": "COMMENTED", "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMjowMDo1NVrOIDF1hA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0xMFQxMjowMDo1NVrOIDF1hA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDU0MDExMjI2MA==", "bodyText": "same as above", "url": "https://github.com/metasfresh/metasfresh/pull/10403#discussion_r540112260", "createdAt": "2020-12-10T12:00:55Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business.rest-api-impl/src/main/java/de/metas/rest_api/invoicecandidates/impl/InvoicesRestControllerImpl.java", "diffHunk": "@@ -176,9 +217,16 @@ public InvoicesRestControllerImpl(\n \t\t\t\t\t? ResponseEntity.ok(response.get())\n \t\t\t\t\t: ResponseEntity.notFound().build();\n \t\t}\n-\t\tcatch (final Exception e)\n+\t\tcatch (final Exception ex)\n \t\t{\n-\t\t\treturn ResponseEntity.unprocessableEntity().body(e.getLocalizedMessage());\n+\t\t\tfinal JsonError error = JsonError.ofSingleItem(", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "507a2af244dd7c89f455fc70e6661da0d539c8c8"}, "originalPosition": 72}]}}, {"__typename": "PullRequestCommit", "commit": {"oid": "558b0bae82360039c470926b3ef7c0236addb1a5", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/558b0bae82360039c470926b3ef7c0236addb1a5", "committedDate": "2020-12-10T12:05:06Z", "message": "Use nicer builder for creating errors"}}, {"__typename": "PullRequestCommit", "commit": {"oid": "f442d28e4e63c8239b60bad43a0866d12fdf15f6", "author": {"user": {"login": "TheBestPessimist", "name": "TheBestPessimist"}}, "url": "https://github.com/metasfresh/metasfresh/commit/f442d28e4e63c8239b60bad43a0866d12fdf15f6", "committedDate": "2020-12-10T12:06:59Z", "message": "Indentation"}}]}}}, "rateLimit": {"limit": 5000, "remaining": 2961, "cost": 1, "resetAt": "2021-11-01T15:33:45Z"}}}