{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMxNzg2NjM3", "number": 6810, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODozMTozMFrOEEaiKA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMDoyNDowOFrOEHg6Lg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczMDY0NDg4OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.handlingunits.base/src/test/java/de/metas/handlingunits/attributes/impl/split/SplitWeightAttributePropagationTest.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODozMTozMFrOGiBeGQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMFQxODozMTozMFrOGiBeGQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzODMyODg1Nw==", "bodyText": "...brainfart of the day: then maybe better use HUTransformService do the split..just like the user would", "url": "https://github.com/metasfresh/metasfresh/pull/6810#discussion_r438328857", "createdAt": "2020-06-10T18:31:30Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.handlingunits.base/src/test/java/de/metas/handlingunits/attributes/impl/split/SplitWeightAttributePropagationTest.java", "diffHunk": "@@ -260,23 +258,81 @@ public void testSplitWeightTransfer_LU_On_Another_SameType_LU_1TU_7CU()\n \t\t\t\tnewHUWeightsExpectation(\"6.436\", \"5.436\", \"1\", \"0\"));\n \t}\n \n+\t@Test\n+\tpublic void testSplit7TuFromLu()\n+\t{\n+\t\tfinal I_M_HU palletToSplit = createIncomingLoadingUnit(huItemIFCO_10, materialItemProductTomato_10, BigDecimal.valueOf(200), BigDecimal.valueOf(545.217)); // 20 x Tomato TUs with a certain weight. + the weight of the LU+TU\n+\t\t// dev note: weight per TU is 25.01085 ~= 25.011\n+\n+\t\t// final Node luXml = HUXmlConverter.toXml( paletToSplit);\n+\t\t// System.out.println(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\");\n+\t\t// System.out.println(HUXmlConverter.toString(luXml));\n+\n+\t\t// Assert initial data is as expected\n+\t\tassertLoadingUnitStorageWeights(palletToSplit, huItemIFCO_10, 20,\n+\t\t\t\tnewHUWeightsExpectation(\"545.217\", \"500.217\", \"45\", \"0\"),\n+\t\t\t\tnewHUWeightsExpectation(\"520.217\", \"500.217\", \"20\", \"0\") // aggregate TU with the whole qty\n+\t\t);\n+\n+\t\t// TODO tbp: i don't understand what all these params are and what do they do?\n+\t\t// \t\ti need to move 1 TU. i don't care about the CUs, but the TU.", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "4bd79952b199271ce558798f7d3369b7a21b5d0d"}, "originalPosition": 79}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc2MzE0NjcwOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/allocation/spi/impl/AggregateHUTrxListener.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMDoyNDowOFrOGm6w1w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yMlQxMDoyNDowOFrOGm6w1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0MzQ2MTg0Nw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tif (qtyTUsToSplit != null && BigDecimal.ZERO.compareTo(qtyTUsToSplit) != 0)\n          \n          \n            \n            \t\tif (qtyTUsToSplit != null && qtyTUsToSplit.signum() != 0)", "url": "https://github.com/metasfresh/metasfresh/pull/6810#discussion_r443461847", "createdAt": "2020-06-22T10:24:08Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.handlingunits.base/src/main/java/de/metas/handlingunits/allocation/spi/impl/AggregateHUTrxListener.java", "diffHunk": "@@ -148,45 +156,68 @@ private void updateItemQtyAndSplitIfNeeded(final IHUContext huContext, final Map\n \t\t\treturn; // nothing to do\n \t\t}\n \n-\t\tfinal IHUTransactionCandidate trx = itemId2Trx.get(item.getM_HU_Item_ID());\n-\t\tfinal BigDecimal storageQty = storage.getQty(trx.getProductId(), trx.getQuantity().getUOM());\n-\n-\t\t// get the new TU quantity, which as TUs go needs to be an integer\n-\t\tfinal BigDecimal newTuQty = storageQty.divide(cuQtyBeforeLoad,\n-\t\t\t\t0,\n-\t\t\t\tRoundingMode.FLOOR);\n-\n-\t\titem.setQty(newTuQty);\n-\t\tInterfaceWrapperHelper.save(item);\n-\n-\t\t// find out if we need to perform a split in order to preserve the former CU-per-TU quantity\n-\t\tfinal BigDecimal splitQty = computeSplitQty(storageQty, cuQtyBeforeLoad);\n-\n-\t\tif (splitQty.signum() != 0)\n+\t\t// If we split exactly N TUs (integer), there's no need for all the dance to figure out the new correct # of TUs for the qty, and splitting the extra qty.\n+\t\t// We shall just update the new qty of TUs in this aggregate TU.\n+\t\tfinal BigDecimal qtyTUsToSplit = huContext.getProperty(AggregateHUTrxListener.mkQtyTUsToSplitPropertyKey(item));\n+\t\tif (qtyTUsToSplit != null && BigDecimal.ZERO.compareTo(qtyTUsToSplit) != 0)", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "0b1ecfa59aea318223ac8fdfcc70e6a21e087a86"}, "originalPosition": 139}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1469, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}