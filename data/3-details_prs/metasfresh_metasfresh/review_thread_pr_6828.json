{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDMzMTcxNTc0", "number": 6828, "reviewThreads": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNzowNjoxNlrOEE9HLg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwODoxNDoxMlrOEE-PkQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjMxMDIyOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/api/IInvoiceCandDAO.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNzowNjoxNlrOGi5X5Q==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwNzowNjoxNlrOGi5X5Q==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI0NDc3Mw==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \tList<I_C_Invoice_Candidate> retrieveInvoiceCandidates(@NonNull final InvoiceId invoiceId);\n          \n          \n            \n            \tList<I_C_Invoice_Candidate> retrieveInvoiceCandidates(@NonNull InvoiceId invoiceId);", "url": "https://github.com/metasfresh/metasfresh/pull/6828#discussion_r439244773", "createdAt": "2020-06-12T07:06:16Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/api/IInvoiceCandDAO.java", "diffHunk": "@@ -85,6 +85,8 @@\n \n \tList<I_C_Invoice_Candidate> retrieveIcForIl(I_C_InvoiceLine invoiceLine);\n \n+\tList<I_C_Invoice_Candidate> retrieveInvoiceCandidates(@NonNull final InvoiceId invoiceId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33ed08604311dea0994a05fc18dcaca20dcbfe93"}, "originalPosition": 64}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjQ5MTM0OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/api/impl/InvoiceCandDAO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwODoxMjo0N1rOGi7JUg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwODoyNDo1MVrOGi7gaw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3MzgxMA==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\tfinal I_C_Invoice invoice = load(invoiceId, I_C_Invoice.class);\n          \n          \n            \n            \n          \n          \n            \n            \t\tfinal IQuery<I_C_Invoice_Line_Alloc> invoiceLineAllocQuery =\n          \n          \n            \n            \t\t\t\tqueryBL.createQueryBuilder(I_C_InvoiceLine.class, invoice)\n          \n          \n            \n            \t\t\t\t\t\t.addEqualsFilter(I_C_InvoiceLine.COLUMNNAME_C_Invoice_ID, invoice.getC_Invoice_ID())\n          \n          \n            \n            \t\tfinal IQuery<I_C_Invoice_Line_Alloc> invoiceLineAllocQuery =\n          \n          \n            \n            \t\t\t\tqueryBL.createQueryBuilder(I_C_InvoiceLine.class, invoice)\n          \n          \n            \n            \t\t\t\t\t\t.addEqualsFilter(I_C_InvoiceLine.COLUMNNAME_C_Invoice_ID, invoiceId)\n          \n      \n    \n    \n  \n\n\nthe equals filter can handle RepoIdAwares\nwe don't need to pass the invoice a context provider; the query-builder can get the thread-local current transaction or create a \"local\" one on the fly", "url": "https://github.com/metasfresh/metasfresh/pull/6828#discussion_r439273810", "createdAt": "2020-06-12T08:12:47Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/api/impl/InvoiceCandDAO.java", "diffHunk": "@@ -573,6 +572,30 @@ public boolean isAvoidRecreate(final I_C_Invoice_Candidate ic)\n \t\t\t\t.addColumn(I_C_Invoice_Candidate.COLUMN_C_Invoice_Candidate_ID);\n \n \t\treturn icQueryBuilder\n+\t\t\t\t.create()\n+\t\t\t\t.list();//\n+\t}\n+\n+\t@NonNull\n+\tpublic List<I_C_Invoice_Candidate> retrieveInvoiceCandidates(@NonNull final InvoiceId invoiceId)\n+\t{\n+\t\tfinal I_C_Invoice invoice = load(invoiceId, I_C_Invoice.class);\n+\n+\t\tfinal IQuery<I_C_Invoice_Line_Alloc> invoiceLineAllocQuery =\n+\t\t\t\tqueryBL.createQueryBuilder(I_C_InvoiceLine.class, invoice)\n+\t\t\t\t\t\t.addEqualsFilter(I_C_InvoiceLine.COLUMNNAME_C_Invoice_ID, invoice.getC_Invoice_ID())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33ed08604311dea0994a05fc18dcaca20dcbfe93"}, "originalPosition": 307}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3OTcyMw==", "bodyText": "I'll drop the loading of the invoice then, thx!", "url": "https://github.com/metasfresh/metasfresh/pull/6828#discussion_r439279723", "createdAt": "2020-06-12T08:24:51Z", "author": {"login": "pvpurcarcosmin"}, "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/api/impl/InvoiceCandDAO.java", "diffHunk": "@@ -573,6 +572,30 @@ public boolean isAvoidRecreate(final I_C_Invoice_Candidate ic)\n \t\t\t\t.addColumn(I_C_Invoice_Candidate.COLUMN_C_Invoice_Candidate_ID);\n \n \t\treturn icQueryBuilder\n+\t\t\t\t.create()\n+\t\t\t\t.list();//\n+\t}\n+\n+\t@NonNull\n+\tpublic List<I_C_Invoice_Candidate> retrieveInvoiceCandidates(@NonNull final InvoiceId invoiceId)\n+\t{\n+\t\tfinal I_C_Invoice invoice = load(invoiceId, I_C_Invoice.class);\n+\n+\t\tfinal IQuery<I_C_Invoice_Line_Alloc> invoiceLineAllocQuery =\n+\t\t\t\tqueryBL.createQueryBuilder(I_C_InvoiceLine.class, invoice)\n+\t\t\t\t\t\t.addEqualsFilter(I_C_InvoiceLine.COLUMNNAME_C_Invoice_ID, invoice.getC_Invoice_ID())", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3MzgxMA=="}, "originalCommit": {"oid": "33ed08604311dea0994a05fc18dcaca20dcbfe93"}, "originalPosition": 307}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjczNjQ5NTUzOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/api/impl/InvoiceCandDAO.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwODoxNDoxMlrOGi7L6w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0xMlQwODoyNDowOVrOGi7fJg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3NDQ3NQ==", "bodyText": "it's OK like this but you might (didn't check) also use andCollect to get from I_C_Invoice_Line_Alloc to I_C_Invoice_Candidate\nfor next time maybe..", "url": "https://github.com/metasfresh/metasfresh/pull/6828#discussion_r439274475", "createdAt": "2020-06-12T08:14:12Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/api/impl/InvoiceCandDAO.java", "diffHunk": "@@ -573,6 +572,30 @@ public boolean isAvoidRecreate(final I_C_Invoice_Candidate ic)\n \t\t\t\t.addColumn(I_C_Invoice_Candidate.COLUMN_C_Invoice_Candidate_ID);\n \n \t\treturn icQueryBuilder\n+\t\t\t\t.create()\n+\t\t\t\t.list();//\n+\t}\n+\n+\t@NonNull\n+\tpublic List<I_C_Invoice_Candidate> retrieveInvoiceCandidates(@NonNull final InvoiceId invoiceId)\n+\t{\n+\t\tfinal I_C_Invoice invoice = load(invoiceId, I_C_Invoice.class);\n+\n+\t\tfinal IQuery<I_C_Invoice_Line_Alloc> invoiceLineAllocQuery =\n+\t\t\t\tqueryBL.createQueryBuilder(I_C_InvoiceLine.class, invoice)\n+\t\t\t\t\t\t.addEqualsFilter(I_C_InvoiceLine.COLUMNNAME_C_Invoice_ID, invoice.getC_Invoice_ID())\n+\t\t\t\t\t\t//collect invoice line alloc\n+\t\t\t\t\t\t.andCollectChildren(I_C_Invoice_Line_Alloc.COLUMN_C_InvoiceLine_ID)\n+\t\t\t\t\t\t.addOnlyActiveRecordsFilter()\n+\t\t\t\t\t\t.create();", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "33ed08604311dea0994a05fc18dcaca20dcbfe93"}, "originalPosition": 311}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3OTM5OA==", "bodyText": "Oh, just checked the method, that's pretty cool, I'll give it a try. thx!", "url": "https://github.com/metasfresh/metasfresh/pull/6828#discussion_r439279398", "createdAt": "2020-06-12T08:24:09Z", "author": {"login": "pvpurcarcosmin"}, "path": "backend/de.metas.swat/de.metas.swat.base/src/main/java/de/metas/invoicecandidate/api/impl/InvoiceCandDAO.java", "diffHunk": "@@ -573,6 +572,30 @@ public boolean isAvoidRecreate(final I_C_Invoice_Candidate ic)\n \t\t\t\t.addColumn(I_C_Invoice_Candidate.COLUMN_C_Invoice_Candidate_ID);\n \n \t\treturn icQueryBuilder\n+\t\t\t\t.create()\n+\t\t\t\t.list();//\n+\t}\n+\n+\t@NonNull\n+\tpublic List<I_C_Invoice_Candidate> retrieveInvoiceCandidates(@NonNull final InvoiceId invoiceId)\n+\t{\n+\t\tfinal I_C_Invoice invoice = load(invoiceId, I_C_Invoice.class);\n+\n+\t\tfinal IQuery<I_C_Invoice_Line_Alloc> invoiceLineAllocQuery =\n+\t\t\t\tqueryBL.createQueryBuilder(I_C_InvoiceLine.class, invoice)\n+\t\t\t\t\t\t.addEqualsFilter(I_C_InvoiceLine.COLUMNNAME_C_Invoice_ID, invoice.getC_Invoice_ID())\n+\t\t\t\t\t\t//collect invoice line alloc\n+\t\t\t\t\t\t.andCollectChildren(I_C_Invoice_Line_Alloc.COLUMN_C_InvoiceLine_ID)\n+\t\t\t\t\t\t.addOnlyActiveRecordsFilter()\n+\t\t\t\t\t\t.create();", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQzOTI3NDQ3NQ=="}, "originalCommit": {"oid": "33ed08604311dea0994a05fc18dcaca20dcbfe93"}, "originalPosition": 311}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1481, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}