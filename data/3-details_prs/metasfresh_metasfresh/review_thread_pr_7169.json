{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDcwNzgyNTc3", "number": 7169, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDo0NjoyMFrOEaeEGg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDo0NjoyMFrOEaeEGg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjk2MTkxMDAyOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.adempiere.adempiere/migration/src/main/sql/postgresql/system/10-de.metas.adempiere/5565380_sys_gh3856_setM_Forecast.DatePromissed_IfNotExists.sql", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMDo0NjoyMFrOHD7AtQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOC0yMFQxMzo0MDo0NlrOHEByHA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg3NDYxMw==", "bodyText": "u think you need to do sth like\n\n  \n    \n  \n    \n\n  \n  This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n                SELECT startdate::Timestamp\n          \n          \n            \n                FROM c_period p\n          \n          \n            \n                WHERE p.c_period_id = m_forecast.c_period_id\n          \n          \n            \n            \n          \n          \n            \n                UNION\n          \n          \n            \n            \n          \n          \n            \n                SELECT to_timestamp(fiscalyear, 'YYYY') /* eg. 2020.01.01 */\n          \n          \n            \n                FROM c_year y\n          \n          \n            \n                WHERE y.c_year_id = m_forecast.m_forecast_id\n          \n          \n            \n            \n          \n          \n            \n                LIMIT 1\n          \n          \n            \n                SELECT 1 as seq, startdate::Timestamp\n          \n          \n            \n                FROM c_period p\n          \n          \n            \n                WHERE p.c_period_id = m_forecast.c_period_id\n          \n          \n            \n            \n          \n          \n            \n                UNION\n          \n          \n            \n            \n          \n          \n            \n                SELECT 2, to_timestamp(fiscalyear, 'YYYY') /* eg. 2020.01.01 */\n          \n          \n            \n                FROM c_year y\n          \n          \n            \n                WHERE y.c_year_id = m_forecast.m_forecast_id <-- this seems wrong\n          \n          \n            \n                \n          \n          \n            \n                UNION \n          \n          \n            \n                \n          \n          \n            \n                SELECT 3, '2010-01-01'\n          \n          \n            \n                \n          \n          \n            \n                ORDER BY seq\n          \n          \n            \n                LIMIT 1\n          \n      \n    \n    \n  \n\n\nto make sure your subselect prefers the ones with a period_id\nm_forecast.c_year_id is not mandatory, so AFAIU we need a 3rd fallback", "url": "https://github.com/metasfresh/metasfresh/pull/7169#discussion_r473874613", "createdAt": "2020-08-20T10:46:20Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.adempiere.adempiere/migration/src/main/sql/postgresql/system/10-de.metas.adempiere/5565380_sys_gh3856_setM_Forecast.DatePromissed_IfNotExists.sql", "diffHunk": "@@ -0,0 +1,18 @@\n+UPDATE m_forecast\n+SET datepromised = (\n+    SELECT startdate::Timestamp\n+    FROM c_period p\n+    WHERE p.c_period_id = m_forecast.c_period_id\n+\n+    UNION\n+\n+    SELECT to_timestamp(fiscalyear, 'YYYY') /* eg. 2020.01.01 */\n+    FROM c_year y\n+    WHERE y.c_year_id = m_forecast.m_forecast_id\n+\n+    LIMIT 1", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "61cb5c9e1c62246987fa0570c23bbde5c3f388bd"}, "originalPosition": 13}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzk4NTU2NA==", "bodyText": "Fixed", "url": "https://github.com/metasfresh/metasfresh/pull/7169#discussion_r473985564", "createdAt": "2020-08-20T13:40:46Z", "author": {"login": "TheBestPessimist"}, "path": "backend/de.metas.adempiere.adempiere/migration/src/main/sql/postgresql/system/10-de.metas.adempiere/5565380_sys_gh3856_setM_Forecast.DatePromissed_IfNotExists.sql", "diffHunk": "@@ -0,0 +1,18 @@\n+UPDATE m_forecast\n+SET datepromised = (\n+    SELECT startdate::Timestamp\n+    FROM c_period p\n+    WHERE p.c_period_id = m_forecast.c_period_id\n+\n+    UNION\n+\n+    SELECT to_timestamp(fiscalyear, 'YYYY') /* eg. 2020.01.01 */\n+    FROM c_year y\n+    WHERE y.c_year_id = m_forecast.m_forecast_id\n+\n+    LIMIT 1", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ3Mzg3NDYxMw=="}, "originalCommit": {"oid": "61cb5c9e1c62246987fa0570c23bbde5c3f388bd"}, "originalPosition": 13}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1380, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}