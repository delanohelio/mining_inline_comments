{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDE3MzI4MDQ1", "number": 6642, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMjo0Mjo0NlrOD8DBdQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMjo0Mjo0NlrOD8DBdQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjY0MjkwNjc3OnYy", "diffSide": "RIGHT", "path": "backend/de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/issue/IssueRepository.java", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMjo0Mjo0NlrOGUvrTw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNS0xM1QxMjo0Mjo0NlrOGUvrTw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQyNDQwNTgzOQ==", "bodyText": "This file contains bidirectional Unicode text that may be interpreted or compiled differently than what appears below. To review, open the file in an editor that reveals hidden Unicode characters. Learn more about bidirectional Unicode characters\n\n\n  \n\n\n    \n      \n        Suggested change\n        \n          \n    \n\n        \n      \n    \n    \n      \n          \n            \n            \t\t\t\t.addEqualsFilter(I_S_Issue.COLUMNNAME_S_Parent_Issue_ID, parentIssueId.getRepoId())\n          \n          \n            \n            \t\t\t\t.addEqualsFilter(I_S_Issue.COLUMNNAME_S_Parent_Issue_ID, parentIssueId)\n          \n      \n    \n    \n  \n\nit will figure out that parentIssueId is a RepoIdAware", "url": "https://github.com/metasfresh/metasfresh/pull/6642#discussion_r424405839", "createdAt": "2020-05-13T12:42:46Z", "author": {"login": "metas-ts"}, "path": "backend/de.metas.serviceprovider/src/main/java/de/metas/serviceprovider/issue/IssueRepository.java", "diffHunk": "@@ -100,28 +93,41 @@ public IssueEntity getById(@NonNull final IssueId issueId, final boolean loadLab\n \t\t\t\t\t.setParameter(\"S_Issue_Id\", issueId);\n \t\t}\n \n-\t\treturn buildIssueEntity(record, loadLabels);\n+\t\treturn buildIssueEntity(record);\n \t}\n \n \t@NonNull\n-\tpublic Optional<IssueEntity> getByIdOptional(@NonNull final IssueId issueId, final boolean loadLabels)\n+\tpublic Optional<IssueEntity> getByIdOptional(@NonNull final IssueId issueId)\n \t{\n \t\tfinal I_S_Issue record = getRecordOrNull(issueId);\n \n \t\treturn record != null\n-\t\t\t\t? Optional.of(buildIssueEntity(record, loadLabels))\n+\t\t\t\t? Optional.of(buildIssueEntity(record))\n \t\t\t\t: Optional.empty();\n \t}\n \n \t@NonNull\n-\tpublic Optional<IssueEntity> getByExternalURLOptional(@NonNull final String externalURL, final boolean loadLabels)\n+\tpublic Optional<IssueEntity> getByExternalURLOptional(@NonNull final String externalURL)\n \t{\n \t\treturn queryBL.createQueryBuilder(I_S_Issue.class)\n \t\t\t\t.addOnlyActiveRecordsFilter()\n \t\t\t\t.addEqualsFilter(I_S_Issue.COLUMNNAME_IssueURL, externalURL)\n \t\t\t\t.create()\n \t\t\t\t.firstOnlyOptional(I_S_Issue.class)\n-\t\t\t\t.map(record -> buildIssueEntity(record, loadLabels));\n+\t\t\t\t.map(this::buildIssueEntity);\n+\t}\n+\n+\t@NonNull\n+\tpublic ImmutableList<IssueEntity> getDirectlyLinkedSubIssues(@NonNull final IssueId parentIssueId)\n+\t{\n+\t\treturn queryBL.createQueryBuilder(I_S_Issue.class)\n+\t\t\t\t.addOnlyActiveRecordsFilter()\n+\t\t\t\t.addEqualsFilter(I_S_Issue.COLUMNNAME_S_Parent_Issue_ID, parentIssueId.getRepoId())", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "277d93366927d788bf0fc0133afcf9305f684eda"}, "originalPosition": 112}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1516, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}