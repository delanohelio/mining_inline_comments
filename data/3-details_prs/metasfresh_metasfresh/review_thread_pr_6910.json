{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDM5OTgzMTY0", "number": 6910, "reviewThreads": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNTo0NDozOVrOEJAojQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNTo0NjozOFrOEJAp1w==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODgzMDIxOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.business/src/main/java/de/metas/invoice/invoiceProcessingServiceCompany/InvoiceProcessingServiceCompanyConfig.java", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNTo0NDozOVrOGpUYqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNjo0NDowMlrOGpVgNw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk3ODc5Mw==", "bodyText": "consider indexing by bpartnerId", "url": "https://github.com/metasfresh/metasfresh/pull/6910#discussion_r445978793", "createdAt": "2020-06-26T05:44:39Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/invoiceProcessingServiceCompany/InvoiceProcessingServiceCompanyConfig.java", "diffHunk": "@@ -45,6 +49,34 @@\n \t@NonNull\n \tProductId serviceFeeProductId;\n \n+\t@NonNull ZonedDateTime validFrom;\n+\n+\t@Getter(AccessLevel.NONE)\n+\t@NonNull ImmutableList<InvoiceProcessingServiceCompanyConfigBPartnerDetails> bpartnerDetails;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5daad277a614e433908a238954c83649c86fd72d"}, "originalPosition": 51}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk5NzExMQ==", "bodyText": "done", "url": "https://github.com/metasfresh/metasfresh/pull/6910#discussion_r445997111", "createdAt": "2020-06-26T06:44:02Z", "author": {"login": "TheBestPessimist"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/invoiceProcessingServiceCompany/InvoiceProcessingServiceCompanyConfig.java", "diffHunk": "@@ -45,6 +49,34 @@\n \t@NonNull\n \tProductId serviceFeeProductId;\n \n+\t@NonNull ZonedDateTime validFrom;\n+\n+\t@Getter(AccessLevel.NONE)\n+\t@NonNull ImmutableList<InvoiceProcessingServiceCompanyConfigBPartnerDetails> bpartnerDetails;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk3ODc5Mw=="}, "originalCommit": {"oid": "5daad277a614e433908a238954c83649c86fd72d"}, "originalPosition": 51}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMjc3ODgzMzUxOnYy", "diffSide": "RIGHT", "path": "backend/de.metas.business/src/main/java/de/metas/invoice/invoiceProcessingServiceCompany/InvoiceProcessingServiceCompanyConfigRepository.java", "isResolved": true, "comments": {"totalCount": 4, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNi0yNlQwNTo0NjozOFrOGpUaqQ==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wNy0wMlQwNzo0Nzo1M1rOGsBUqQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk3OTMwNQ==", "bodyText": "extract the mapper into a method (static preferably)", "url": "https://github.com/metasfresh/metasfresh/pull/6910#discussion_r445979305", "createdAt": "2020-06-26T05:46:38Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/invoiceProcessingServiceCompany/InvoiceProcessingServiceCompanyConfigRepository.java", "diffHunk": "@@ -47,77 +45,53 @@\n {\n \tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n \n-\tprivate final CCache<InvoiceProcessingServiceCompanyConfigId, InvoiceProcessingServiceCompanyConfig> //\n-\tconfigsById = CCache.<InvoiceProcessingServiceCompanyConfigId, InvoiceProcessingServiceCompanyConfig> builder()\n-\t\t\t.tableName(I_InvoiceProcessingServiceCompany.Table_Name)\n-\t\t\t.build();\n-\n-\tprivate final CCache<Integer, CustomerToConfigAssignmentMap> //\n-\tcustomerToConfigAssignmentsCache = CCache.<Integer, CustomerToConfigAssignmentMap> builder()\n-\t\t\t.tableName(I_InvoiceProcessingServiceCompany_BPartnerAssignment.Table_Name)\n-\t\t\t.build();\n+\tprivate final CCache<Integer, InvoiceProcessingServiceCompanyConfigMap> configsMapCache =\n+\t\t\tCCache.<Integer, InvoiceProcessingServiceCompanyConfigMap>builder()\n+\t\t\t\t\t.tableName(I_InvoiceProcessingServiceCompany.Table_Name)\n+\t\t\t\t\t.additionalTableNameToResetFor(I_InvoiceProcessingServiceCompany_BPartnerAssignment.Table_Name)\n+\t\t\t\t\t.build();\n \n-\tpublic Optional<InvoiceProcessingServiceCompanyConfig> getByCustomerId(@NonNull final BPartnerId customerId)\n+\tpublic Optional<InvoiceProcessingServiceCompanyConfig> getByCustomerId(@NonNull final BPartnerId customerId, @NonNull final ZonedDateTime evaluationDate)\n \t{\n-\t\treturn getConfigIdByCustomerId(customerId)\n-\t\t\t\t.map(this::getById)\n-\t\t\t\t.filter(InvoiceProcessingServiceCompanyConfig::isActive);\n+\t\tfinal InvoiceProcessingServiceCompanyConfigMap config = configsMapCache.getOrLoad(0, this::retrieveAllCompanyConfigs);\n+\t\treturn config.getByCustomerIdAndDate(customerId, evaluationDate);\n \t}\n \n-\tprivate Optional<InvoiceProcessingServiceCompanyConfigId> getConfigIdByCustomerId(@NonNull final BPartnerId customerId)\n+\t@NonNull\n+\tprivate InvoiceProcessingServiceCompanyConfigMap retrieveAllCompanyConfigs()\n \t{\n-\t\tfinal CustomerToConfigAssignmentMap customerToConfigAssignmentMap = customerToConfigAssignmentsCache.getOrLoad(0, this::retrieveCustomerToConfigAssignmentMap);\n-\t\treturn customerToConfigAssignmentMap.getConfigIdByCustomerId(customerId);\n-\t}\n-\n-\tprivate InvoiceProcessingServiceCompanyConfig getById(@NonNull final InvoiceProcessingServiceCompanyConfigId configId)\n-\t{\n-\t\treturn configsById.getOrLoad(configId, this::retrieveById);\n-\t}\n-\n-\tprivate InvoiceProcessingServiceCompanyConfig retrieveById(@NonNull final InvoiceProcessingServiceCompanyConfigId configId)\n-\t{\n-\t\tfinal I_InvoiceProcessingServiceCompany record = loadOutOfTrx(configId, I_InvoiceProcessingServiceCompany.class);\n-\n-\t\treturn InvoiceProcessingServiceCompanyConfig.builder()\n-\t\t\t\t.active(record.isActive())\n-\t\t\t\t.serviceCompanyBPartnerId(BPartnerId.ofRepoId(record.getServiceCompany_BPartner_ID()))\n-\t\t\t\t.serviceInvoiceDocTypeId(DocTypeId.ofRepoId(record.getServiceInvoice_DocType_ID()))\n-\t\t\t\t.serviceFeeProductId(ProductId.ofRepoId(record.getServiceFee_Product_ID()))\n-\t\t\t\t.feePercentageOfGrandTotal(Percent.of(record.getFeePercentageOfGrandTotal()))\n-\t\t\t\t.build();\n+\t\tfinal ImmutableList<InvoiceProcessingServiceCompanyConfig> collect = queryBL.createQueryBuilder(I_InvoiceProcessingServiceCompany.class)\n+\t\t\t\t.addOnlyActiveRecordsFilter()\n+\t\t\t\t.create()\n+\t\t\t\t.iterateAndStream()\n+\t\t\t\t.map(record -> {", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "5daad277a614e433908a238954c83649c86fd72d"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk5MDMyMw==", "bodyText": "Agree with extraction to method, however I don't think it makes sense to have this static, since i'll have to make static retrieveAllBPartnerDetails, and that uses queryBL class field.\nOf course i could just get Services.get(IqueryBL) in the method, but i don't see a point getting it twice.", "url": "https://github.com/metasfresh/metasfresh/pull/6910#discussion_r445990323", "createdAt": "2020-06-26T06:24:12Z", "author": {"login": "TheBestPessimist"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/invoiceProcessingServiceCompany/InvoiceProcessingServiceCompanyConfigRepository.java", "diffHunk": "@@ -47,77 +45,53 @@\n {\n \tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n \n-\tprivate final CCache<InvoiceProcessingServiceCompanyConfigId, InvoiceProcessingServiceCompanyConfig> //\n-\tconfigsById = CCache.<InvoiceProcessingServiceCompanyConfigId, InvoiceProcessingServiceCompanyConfig> builder()\n-\t\t\t.tableName(I_InvoiceProcessingServiceCompany.Table_Name)\n-\t\t\t.build();\n-\n-\tprivate final CCache<Integer, CustomerToConfigAssignmentMap> //\n-\tcustomerToConfigAssignmentsCache = CCache.<Integer, CustomerToConfigAssignmentMap> builder()\n-\t\t\t.tableName(I_InvoiceProcessingServiceCompany_BPartnerAssignment.Table_Name)\n-\t\t\t.build();\n+\tprivate final CCache<Integer, InvoiceProcessingServiceCompanyConfigMap> configsMapCache =\n+\t\t\tCCache.<Integer, InvoiceProcessingServiceCompanyConfigMap>builder()\n+\t\t\t\t\t.tableName(I_InvoiceProcessingServiceCompany.Table_Name)\n+\t\t\t\t\t.additionalTableNameToResetFor(I_InvoiceProcessingServiceCompany_BPartnerAssignment.Table_Name)\n+\t\t\t\t\t.build();\n \n-\tpublic Optional<InvoiceProcessingServiceCompanyConfig> getByCustomerId(@NonNull final BPartnerId customerId)\n+\tpublic Optional<InvoiceProcessingServiceCompanyConfig> getByCustomerId(@NonNull final BPartnerId customerId, @NonNull final ZonedDateTime evaluationDate)\n \t{\n-\t\treturn getConfigIdByCustomerId(customerId)\n-\t\t\t\t.map(this::getById)\n-\t\t\t\t.filter(InvoiceProcessingServiceCompanyConfig::isActive);\n+\t\tfinal InvoiceProcessingServiceCompanyConfigMap config = configsMapCache.getOrLoad(0, this::retrieveAllCompanyConfigs);\n+\t\treturn config.getByCustomerIdAndDate(customerId, evaluationDate);\n \t}\n \n-\tprivate Optional<InvoiceProcessingServiceCompanyConfigId> getConfigIdByCustomerId(@NonNull final BPartnerId customerId)\n+\t@NonNull\n+\tprivate InvoiceProcessingServiceCompanyConfigMap retrieveAllCompanyConfigs()\n \t{\n-\t\tfinal CustomerToConfigAssignmentMap customerToConfigAssignmentMap = customerToConfigAssignmentsCache.getOrLoad(0, this::retrieveCustomerToConfigAssignmentMap);\n-\t\treturn customerToConfigAssignmentMap.getConfigIdByCustomerId(customerId);\n-\t}\n-\n-\tprivate InvoiceProcessingServiceCompanyConfig getById(@NonNull final InvoiceProcessingServiceCompanyConfigId configId)\n-\t{\n-\t\treturn configsById.getOrLoad(configId, this::retrieveById);\n-\t}\n-\n-\tprivate InvoiceProcessingServiceCompanyConfig retrieveById(@NonNull final InvoiceProcessingServiceCompanyConfigId configId)\n-\t{\n-\t\tfinal I_InvoiceProcessingServiceCompany record = loadOutOfTrx(configId, I_InvoiceProcessingServiceCompany.class);\n-\n-\t\treturn InvoiceProcessingServiceCompanyConfig.builder()\n-\t\t\t\t.active(record.isActive())\n-\t\t\t\t.serviceCompanyBPartnerId(BPartnerId.ofRepoId(record.getServiceCompany_BPartner_ID()))\n-\t\t\t\t.serviceInvoiceDocTypeId(DocTypeId.ofRepoId(record.getServiceInvoice_DocType_ID()))\n-\t\t\t\t.serviceFeeProductId(ProductId.ofRepoId(record.getServiceFee_Product_ID()))\n-\t\t\t\t.feePercentageOfGrandTotal(Percent.of(record.getFeePercentageOfGrandTotal()))\n-\t\t\t\t.build();\n+\t\tfinal ImmutableList<InvoiceProcessingServiceCompanyConfig> collect = queryBL.createQueryBuilder(I_InvoiceProcessingServiceCompany.class)\n+\t\t\t\t.addOnlyActiveRecordsFilter()\n+\t\t\t\t.create()\n+\t\t\t\t.iterateAndStream()\n+\t\t\t\t.map(record -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk3OTMwNQ=="}, "originalCommit": {"oid": "5daad277a614e433908a238954c83649c86fd72d"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NjAyOTQ0OQ==", "bodyText": "auch.... that's SQL N+1 problem. u shall avoid it by fetching everything in one round....", "url": "https://github.com/metasfresh/metasfresh/pull/6910#discussion_r446029449", "createdAt": "2020-06-26T08:00:03Z", "author": {"login": "teosarca"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/invoiceProcessingServiceCompany/InvoiceProcessingServiceCompanyConfigRepository.java", "diffHunk": "@@ -47,77 +45,53 @@\n {\n \tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n \n-\tprivate final CCache<InvoiceProcessingServiceCompanyConfigId, InvoiceProcessingServiceCompanyConfig> //\n-\tconfigsById = CCache.<InvoiceProcessingServiceCompanyConfigId, InvoiceProcessingServiceCompanyConfig> builder()\n-\t\t\t.tableName(I_InvoiceProcessingServiceCompany.Table_Name)\n-\t\t\t.build();\n-\n-\tprivate final CCache<Integer, CustomerToConfigAssignmentMap> //\n-\tcustomerToConfigAssignmentsCache = CCache.<Integer, CustomerToConfigAssignmentMap> builder()\n-\t\t\t.tableName(I_InvoiceProcessingServiceCompany_BPartnerAssignment.Table_Name)\n-\t\t\t.build();\n+\tprivate final CCache<Integer, InvoiceProcessingServiceCompanyConfigMap> configsMapCache =\n+\t\t\tCCache.<Integer, InvoiceProcessingServiceCompanyConfigMap>builder()\n+\t\t\t\t\t.tableName(I_InvoiceProcessingServiceCompany.Table_Name)\n+\t\t\t\t\t.additionalTableNameToResetFor(I_InvoiceProcessingServiceCompany_BPartnerAssignment.Table_Name)\n+\t\t\t\t\t.build();\n \n-\tpublic Optional<InvoiceProcessingServiceCompanyConfig> getByCustomerId(@NonNull final BPartnerId customerId)\n+\tpublic Optional<InvoiceProcessingServiceCompanyConfig> getByCustomerId(@NonNull final BPartnerId customerId, @NonNull final ZonedDateTime evaluationDate)\n \t{\n-\t\treturn getConfigIdByCustomerId(customerId)\n-\t\t\t\t.map(this::getById)\n-\t\t\t\t.filter(InvoiceProcessingServiceCompanyConfig::isActive);\n+\t\tfinal InvoiceProcessingServiceCompanyConfigMap config = configsMapCache.getOrLoad(0, this::retrieveAllCompanyConfigs);\n+\t\treturn config.getByCustomerIdAndDate(customerId, evaluationDate);\n \t}\n \n-\tprivate Optional<InvoiceProcessingServiceCompanyConfigId> getConfigIdByCustomerId(@NonNull final BPartnerId customerId)\n+\t@NonNull\n+\tprivate InvoiceProcessingServiceCompanyConfigMap retrieveAllCompanyConfigs()\n \t{\n-\t\tfinal CustomerToConfigAssignmentMap customerToConfigAssignmentMap = customerToConfigAssignmentsCache.getOrLoad(0, this::retrieveCustomerToConfigAssignmentMap);\n-\t\treturn customerToConfigAssignmentMap.getConfigIdByCustomerId(customerId);\n-\t}\n-\n-\tprivate InvoiceProcessingServiceCompanyConfig getById(@NonNull final InvoiceProcessingServiceCompanyConfigId configId)\n-\t{\n-\t\treturn configsById.getOrLoad(configId, this::retrieveById);\n-\t}\n-\n-\tprivate InvoiceProcessingServiceCompanyConfig retrieveById(@NonNull final InvoiceProcessingServiceCompanyConfigId configId)\n-\t{\n-\t\tfinal I_InvoiceProcessingServiceCompany record = loadOutOfTrx(configId, I_InvoiceProcessingServiceCompany.class);\n-\n-\t\treturn InvoiceProcessingServiceCompanyConfig.builder()\n-\t\t\t\t.active(record.isActive())\n-\t\t\t\t.serviceCompanyBPartnerId(BPartnerId.ofRepoId(record.getServiceCompany_BPartner_ID()))\n-\t\t\t\t.serviceInvoiceDocTypeId(DocTypeId.ofRepoId(record.getServiceInvoice_DocType_ID()))\n-\t\t\t\t.serviceFeeProductId(ProductId.ofRepoId(record.getServiceFee_Product_ID()))\n-\t\t\t\t.feePercentageOfGrandTotal(Percent.of(record.getFeePercentageOfGrandTotal()))\n-\t\t\t\t.build();\n+\t\tfinal ImmutableList<InvoiceProcessingServiceCompanyConfig> collect = queryBL.createQueryBuilder(I_InvoiceProcessingServiceCompany.class)\n+\t\t\t\t.addOnlyActiveRecordsFilter()\n+\t\t\t\t.create()\n+\t\t\t\t.iterateAndStream()\n+\t\t\t\t.map(record -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk3OTMwNQ=="}, "originalCommit": {"oid": "5daad277a614e433908a238954c83649c86fd72d"}, "originalPosition": 107}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0ODgxMjIwMQ==", "bodyText": "fixed", "url": "https://github.com/metasfresh/metasfresh/pull/6910#discussion_r448812201", "createdAt": "2020-07-02T07:47:53Z", "author": {"login": "TheBestPessimist"}, "path": "backend/de.metas.business/src/main/java/de/metas/invoice/invoiceProcessingServiceCompany/InvoiceProcessingServiceCompanyConfigRepository.java", "diffHunk": "@@ -47,77 +45,53 @@\n {\n \tprivate final IQueryBL queryBL = Services.get(IQueryBL.class);\n \n-\tprivate final CCache<InvoiceProcessingServiceCompanyConfigId, InvoiceProcessingServiceCompanyConfig> //\n-\tconfigsById = CCache.<InvoiceProcessingServiceCompanyConfigId, InvoiceProcessingServiceCompanyConfig> builder()\n-\t\t\t.tableName(I_InvoiceProcessingServiceCompany.Table_Name)\n-\t\t\t.build();\n-\n-\tprivate final CCache<Integer, CustomerToConfigAssignmentMap> //\n-\tcustomerToConfigAssignmentsCache = CCache.<Integer, CustomerToConfigAssignmentMap> builder()\n-\t\t\t.tableName(I_InvoiceProcessingServiceCompany_BPartnerAssignment.Table_Name)\n-\t\t\t.build();\n+\tprivate final CCache<Integer, InvoiceProcessingServiceCompanyConfigMap> configsMapCache =\n+\t\t\tCCache.<Integer, InvoiceProcessingServiceCompanyConfigMap>builder()\n+\t\t\t\t\t.tableName(I_InvoiceProcessingServiceCompany.Table_Name)\n+\t\t\t\t\t.additionalTableNameToResetFor(I_InvoiceProcessingServiceCompany_BPartnerAssignment.Table_Name)\n+\t\t\t\t\t.build();\n \n-\tpublic Optional<InvoiceProcessingServiceCompanyConfig> getByCustomerId(@NonNull final BPartnerId customerId)\n+\tpublic Optional<InvoiceProcessingServiceCompanyConfig> getByCustomerId(@NonNull final BPartnerId customerId, @NonNull final ZonedDateTime evaluationDate)\n \t{\n-\t\treturn getConfigIdByCustomerId(customerId)\n-\t\t\t\t.map(this::getById)\n-\t\t\t\t.filter(InvoiceProcessingServiceCompanyConfig::isActive);\n+\t\tfinal InvoiceProcessingServiceCompanyConfigMap config = configsMapCache.getOrLoad(0, this::retrieveAllCompanyConfigs);\n+\t\treturn config.getByCustomerIdAndDate(customerId, evaluationDate);\n \t}\n \n-\tprivate Optional<InvoiceProcessingServiceCompanyConfigId> getConfigIdByCustomerId(@NonNull final BPartnerId customerId)\n+\t@NonNull\n+\tprivate InvoiceProcessingServiceCompanyConfigMap retrieveAllCompanyConfigs()\n \t{\n-\t\tfinal CustomerToConfigAssignmentMap customerToConfigAssignmentMap = customerToConfigAssignmentsCache.getOrLoad(0, this::retrieveCustomerToConfigAssignmentMap);\n-\t\treturn customerToConfigAssignmentMap.getConfigIdByCustomerId(customerId);\n-\t}\n-\n-\tprivate InvoiceProcessingServiceCompanyConfig getById(@NonNull final InvoiceProcessingServiceCompanyConfigId configId)\n-\t{\n-\t\treturn configsById.getOrLoad(configId, this::retrieveById);\n-\t}\n-\n-\tprivate InvoiceProcessingServiceCompanyConfig retrieveById(@NonNull final InvoiceProcessingServiceCompanyConfigId configId)\n-\t{\n-\t\tfinal I_InvoiceProcessingServiceCompany record = loadOutOfTrx(configId, I_InvoiceProcessingServiceCompany.class);\n-\n-\t\treturn InvoiceProcessingServiceCompanyConfig.builder()\n-\t\t\t\t.active(record.isActive())\n-\t\t\t\t.serviceCompanyBPartnerId(BPartnerId.ofRepoId(record.getServiceCompany_BPartner_ID()))\n-\t\t\t\t.serviceInvoiceDocTypeId(DocTypeId.ofRepoId(record.getServiceInvoice_DocType_ID()))\n-\t\t\t\t.serviceFeeProductId(ProductId.ofRepoId(record.getServiceFee_Product_ID()))\n-\t\t\t\t.feePercentageOfGrandTotal(Percent.of(record.getFeePercentageOfGrandTotal()))\n-\t\t\t\t.build();\n+\t\tfinal ImmutableList<InvoiceProcessingServiceCompanyConfig> collect = queryBL.createQueryBuilder(I_InvoiceProcessingServiceCompany.class)\n+\t\t\t\t.addOnlyActiveRecordsFilter()\n+\t\t\t\t.create()\n+\t\t\t\t.iterateAndStream()\n+\t\t\t\t.map(record -> {", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ0NTk3OTMwNQ=="}, "originalCommit": {"oid": "5daad277a614e433908a238954c83649c86fd72d"}, "originalPosition": 107}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1394, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}