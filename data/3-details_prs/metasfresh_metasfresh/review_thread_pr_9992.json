{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NDkxMDQ4MTY4", "number": 9992, "reviewThreads": {"totalCount": 6, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODowMToxOVrOEma9cw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODo1OTowOVrOEmdDew==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NzIzMDU5OnYy", "diffSide": "RIGHT", "path": "frontend/src/__tests__/containers/WidgetWrapper.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODowMToxOVrOHWbe2A==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODowMToxOVrOHWbe2A==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI4MDk4NA==", "bodyText": "name of the file should be WidgetWrapper.test.js", "url": "https://github.com/metasfresh/metasfresh/pull/9992#discussion_r493280984", "createdAt": "2020-09-23T08:01:19Z", "author": {"login": "petrican"}, "path": "frontend/src/__tests__/containers/WidgetWrapper.js", "diffHunk": "@@ -0,0 +1,61 @@\n+import React from 'react';", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99df550872dfbd1d31a49e94946e26c4e7759a6d"}, "originalPosition": 1}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NzI2MTkxOnYy", "diffSide": "RIGHT", "path": "frontend/src/components/Process.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODowNjo1MVrOHWbzWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODowNjo1MVrOHWbzWw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzI4NjIzNQ==", "bodyText": "element${idx}", "url": "https://github.com/metasfresh/metasfresh/pull/9992#discussion_r493286235", "createdAt": "2020-09-23T08:06:51Z", "author": {"login": "petrican"}, "path": "frontend/src/components/Process.js", "diffHunk": "@@ -22,43 +19,38 @@ class Process extends Component {\n    * @param {*} type\n    * @todo Write the documentation\n    */\n-  renderElements = (layout, data, type) => {\n-    const { disabled } = this.props;\n+  renderElements = () => {\n+    const { layout, type, disabled } = this.props;\n     const elements = layout.elements;\n-    return elements.map((elem, id) => {\n-      const widgetData = elem.fields.map((item) => data[item.field] || -1);\n+\n+    return elements.map((elem, idx) => {\n+      const element = omit(elem, ['fields']);\n       return (\n-        <div key={`${id}-${layout.pinstanceId}`}>\n-          <MasterWidget\n+        <div key={`${idx}-${layout.pinstanceId}`}>\n+          <WidgetWrapper\n+            renderMaster={true}\n+            dataSource=\"process\"\n+            layoutId={`${idx}`}\n             entity=\"process\"\n-            key={'element' + id}\n-            windowType={type}\n+            key={'element' + idx}", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99df550872dfbd1d31a49e94946e26c4e7759a6d"}, "originalPosition": 50}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NzUwNjEwOnYy", "diffSide": "RIGHT", "path": "frontend/src/components/widget/RawWidget.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODo0Nzo1NVrOHWeQPg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTozMjoxN1rOHWg7eQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMyNjM5OA==", "bodyText": "!==", "url": "https://github.com/metasfresh/metasfresh/pull/9992#discussion_r493326398", "createdAt": "2020-09-23T08:47:55Z", "author": {"login": "petrican"}, "path": "frontend/src/components/widget/RawWidget.js", "diffHunk": "@@ -449,19 +454,19 @@ export class RawWidget extends Component {\n       updateHeight,\n       rowIndex,\n     } = this.props;\n-    let widgetValue = data != null ? data : widgetData[0].value;\n+    let tabIndex = this.props.tabIndex;\n     const { isEdited, charsTyped } = this.state;\n \n+    let widgetValue = data != null ? data : widgetData[0].value;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99df550872dfbd1d31a49e94946e26c4e7759a6d"}, "originalPosition": 72}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM3MDIzMw==", "bodyText": "Nope. This tests for values not set - null and undefined. '' and 0 will still work.", "url": "https://github.com/metasfresh/metasfresh/pull/9992#discussion_r493370233", "createdAt": "2020-09-23T09:32:17Z", "author": {"login": "siemiatj"}, "path": "frontend/src/components/widget/RawWidget.js", "diffHunk": "@@ -449,19 +454,19 @@ export class RawWidget extends Component {\n       updateHeight,\n       rowIndex,\n     } = this.props;\n-    let widgetValue = data != null ? data : widgetData[0].value;\n+    let tabIndex = this.props.tabIndex;\n     const { isEdited, charsTyped } = this.state;\n \n+    let widgetValue = data != null ? data : widgetData[0].value;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMyNjM5OA=="}, "originalCommit": {"oid": "99df550872dfbd1d31a49e94946e26c4e7759a6d"}, "originalPosition": 72}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NzUyNjU0OnYy", "diffSide": "RIGHT", "path": "frontend/src/components/window/Element.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODo1MTozMFrOHWed_w==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTozNjoyOFrOHWhLtg==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMyOTkxOQ==", "bodyText": "wonder if wouldn't be practical to have a function that would format that like getLayoutId({ sectionIndex, columnIndex....aso})\nSimilar to what we have for the table -> getTableId", "url": "https://github.com/metasfresh/metasfresh/pull/9992#discussion_r493329919", "createdAt": "2020-09-23T08:51:30Z", "author": {"login": "petrican"}, "path": "frontend/src/components/window/Element.js", "diffHunk": "@@ -1,42 +1,57 @@\n import React, { PureComponent } from 'react';\n import PropTypes from 'prop-types';\n-import MasterWidget from '../widget/MasterWidget';\n+import { omit } from 'lodash';\n+\n+import WidgetWrapper from '../../containers/WidgetWrapper';\n \n class Element extends PureComponent {\n   render() {\n-    const { windowId, tabId, rowId, dataId } = this.props;\n-    const { elementLayout, elementIndex } = this.props;\n-    const { isFocused, tabIndex } = this.props;\n-    const { data } = this.props;\n-    const { isModal, isAdvanced, isFullScreen } = this.props;\n-    const { addRefToWidgets, onBlurWidget } = this.props;\n+    const {\n+      windowId,\n+      tabId,\n+      rowId,\n+      dataId,\n+      elementLayout,\n+      isFocused,\n+      tabIndex,\n+      isModal,\n+      isAdvanced,\n+      isFullScreen,\n+      addRefToWidgets,\n+      onBlurWidget,\n+      elementIndex,\n+      elementsLineIndex,\n+      elementGroupIndex,\n+      sectionIndex,\n+      columnIndex,\n+    } = this.props;\n \n     const autoFocus = isFocused && elementIndex === 0;\n-    const widgetData = elementLayout.fields.map(\n-      (item) => data[item.field] || -1\n-    );\n     const fieldName = elementLayout.fields ? elementLayout.fields[0].field : '';\n-    const relativeDocId = data.ID && data.ID.value;\n+    const layoutId = `${sectionIndex}_${columnIndex}_${elementGroupIndex}_${elementsLineIndex}_${elementIndex}`;", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99df550872dfbd1d31a49e94946e26c4e7759a6d"}, "originalPosition": 42}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM3NDM5MA==", "bodyText": "Yeah but in this case this is the only place we're using it so extracting this to a separate function wouldn't benefit us in any way.", "url": "https://github.com/metasfresh/metasfresh/pull/9992#discussion_r493374390", "createdAt": "2020-09-23T09:36:28Z", "author": {"login": "siemiatj"}, "path": "frontend/src/components/window/Element.js", "diffHunk": "@@ -1,42 +1,57 @@\n import React, { PureComponent } from 'react';\n import PropTypes from 'prop-types';\n-import MasterWidget from '../widget/MasterWidget';\n+import { omit } from 'lodash';\n+\n+import WidgetWrapper from '../../containers/WidgetWrapper';\n \n class Element extends PureComponent {\n   render() {\n-    const { windowId, tabId, rowId, dataId } = this.props;\n-    const { elementLayout, elementIndex } = this.props;\n-    const { isFocused, tabIndex } = this.props;\n-    const { data } = this.props;\n-    const { isModal, isAdvanced, isFullScreen } = this.props;\n-    const { addRefToWidgets, onBlurWidget } = this.props;\n+    const {\n+      windowId,\n+      tabId,\n+      rowId,\n+      dataId,\n+      elementLayout,\n+      isFocused,\n+      tabIndex,\n+      isModal,\n+      isAdvanced,\n+      isFullScreen,\n+      addRefToWidgets,\n+      onBlurWidget,\n+      elementIndex,\n+      elementsLineIndex,\n+      elementGroupIndex,\n+      sectionIndex,\n+      columnIndex,\n+    } = this.props;\n \n     const autoFocus = isFocused && elementIndex === 0;\n-    const widgetData = elementLayout.fields.map(\n-      (item) => data[item.field] || -1\n-    );\n     const fieldName = elementLayout.fields ? elementLayout.fields[0].field : '';\n-    const relativeDocId = data.ID && data.ID.value;\n+    const layoutId = `${sectionIndex}_${columnIndex}_${elementGroupIndex}_${elementsLineIndex}_${elementIndex}`;", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMyOTkxOQ=="}, "originalCommit": {"oid": "99df550872dfbd1d31a49e94946e26c4e7759a6d"}, "originalPosition": 42}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NzU2ODY3OnYy", "diffSide": "RIGHT", "path": "frontend/src/containers/WidgetWrapper.js", "isResolved": true, "comments": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODo1ODoxNVrOHWe5qw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODo1ODoxNVrOHWe5qw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMzNzAwMw==", "bodyText": "thinking if getWidgetElementData wouldn't be more appropriate as a name", "url": "https://github.com/metasfresh/metasfresh/pull/9992#discussion_r493337003", "createdAt": "2020-09-23T08:58:15Z", "author": {"login": "petrican"}, "path": "frontend/src/containers/WidgetWrapper.js", "diffHunk": "@@ -0,0 +1,153 @@\n+import React, { PureComponent } from 'react';\n+import PropTypes from 'prop-types';\n+import { connect } from 'react-redux';\n+\n+import {\n+  openModal,\n+  patch,\n+  updatePropertyValue,\n+  allowShortcut,\n+  disableShortcut,\n+} from '../actions/WindowActions';\n+import { getCellWidgetData } from '../utils/tableHelpers';\n+import { getTable } from '../reducers/tables';\n+import {\n+  getData,\n+  getWidgetData,\n+  getWidgetFields,\n+  getMasterDocStatus,\n+  getProcessWidgetData,\n+  getProcessWidgetFields,\n+} from '../reducers/windowHandler';\n+\n+import MasterWidget from '../components/widget/MasterWidget';\n+import RawWidget from '../components/widget/RawWidget';\n+\n+/**\n+ * @file Class based component.\n+ * @module WidgetWrapper\n+ * @extends PureComponent\n+ * @summary this is a wrapper around widgets that's responsible for\n+ * fetching data to the component. Depending on the `dataSource` prop it\n+ * has a selection of strategies to get the data from the redux store. No\n+ * `MasterWidget` or `RawWidget` component should be rendered directly - always\n+ * wrap them in `WidgetWrapper` and if needed add another data selector.\n+ */\n+class WidgetWrapper extends PureComponent {\n+  render() {\n+    const { renderMaster } = this.props;\n+\n+    if (renderMaster) {\n+      return <MasterWidget {...this.props} />;\n+    } else {\n+      return <RawWidget {...this.props} />;\n+    }\n+  }\n+}\n+\n+const mapStateToProps = (state, props) => {\n+  const { appHandler, windowHandler } = state;\n+  const {\n+    dataSource,\n+    tableId,\n+    rowIndex,\n+    colIndex,\n+    isEditable,\n+    supportFieldEdit,\n+    layoutId,\n+    fields,\n+    isModal,\n+  } = props;\n+  const data = getData(state, isModal);\n+\n+  let widgetData = null;\n+  let fieldsCopy = null;\n+\n+  switch (dataSource) {\n+    case 'doc-status':\n+      widgetData = getMasterDocStatus(state);\n+\n+      break;\n+    case 'modal':\n+    case 'element':\n+      widgetData = getWidgetData(state, isModal, layoutId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99df550872dfbd1d31a49e94946e26c4e7759a6d"}, "originalPosition": 73}]}}, {"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzA4NzU3MzcxOnYy", "diffSide": "RIGHT", "path": "frontend/src/containers/WidgetWrapper.js", "isResolved": true, "comments": {"totalCount": 2, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwODo1OTowOVrOHWe9Eg==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0wOS0yM1QwOTozMzo1NlrOHWhCJw==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMzNzg3NA==", "bodyText": "Same in here for coherence of naming getWidgetProcessData, getWidgetProcessFields", "url": "https://github.com/metasfresh/metasfresh/pull/9992#discussion_r493337874", "createdAt": "2020-09-23T08:59:09Z", "author": {"login": "petrican"}, "path": "frontend/src/containers/WidgetWrapper.js", "diffHunk": "@@ -0,0 +1,153 @@\n+import React, { PureComponent } from 'react';\n+import PropTypes from 'prop-types';\n+import { connect } from 'react-redux';\n+\n+import {\n+  openModal,\n+  patch,\n+  updatePropertyValue,\n+  allowShortcut,\n+  disableShortcut,\n+} from '../actions/WindowActions';\n+import { getCellWidgetData } from '../utils/tableHelpers';\n+import { getTable } from '../reducers/tables';\n+import {\n+  getData,\n+  getWidgetData,\n+  getWidgetFields,\n+  getMasterDocStatus,\n+  getProcessWidgetData,\n+  getProcessWidgetFields,\n+} from '../reducers/windowHandler';\n+\n+import MasterWidget from '../components/widget/MasterWidget';\n+import RawWidget from '../components/widget/RawWidget';\n+\n+/**\n+ * @file Class based component.\n+ * @module WidgetWrapper\n+ * @extends PureComponent\n+ * @summary this is a wrapper around widgets that's responsible for\n+ * fetching data to the component. Depending on the `dataSource` prop it\n+ * has a selection of strategies to get the data from the redux store. No\n+ * `MasterWidget` or `RawWidget` component should be rendered directly - always\n+ * wrap them in `WidgetWrapper` and if needed add another data selector.\n+ */\n+class WidgetWrapper extends PureComponent {\n+  render() {\n+    const { renderMaster } = this.props;\n+\n+    if (renderMaster) {\n+      return <MasterWidget {...this.props} />;\n+    } else {\n+      return <RawWidget {...this.props} />;\n+    }\n+  }\n+}\n+\n+const mapStateToProps = (state, props) => {\n+  const { appHandler, windowHandler } = state;\n+  const {\n+    dataSource,\n+    tableId,\n+    rowIndex,\n+    colIndex,\n+    isEditable,\n+    supportFieldEdit,\n+    layoutId,\n+    fields,\n+    isModal,\n+  } = props;\n+  const data = getData(state, isModal);\n+\n+  let widgetData = null;\n+  let fieldsCopy = null;\n+\n+  switch (dataSource) {\n+    case 'doc-status':\n+      widgetData = getMasterDocStatus(state);\n+\n+      break;\n+    case 'modal':\n+    case 'element':\n+      widgetData = getWidgetData(state, isModal, layoutId);\n+      fieldsCopy = getWidgetFields(state, isModal, layoutId);\n+\n+      break;\n+    case 'process':\n+      widgetData = getProcessWidgetData(state, true, layoutId);", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "99df550872dfbd1d31a49e94946e26c4e7759a6d"}, "originalPosition": 78}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzM3MTk0Mw==", "bodyText": "It's process's widget data, not widget's process data.", "url": "https://github.com/metasfresh/metasfresh/pull/9992#discussion_r493371943", "createdAt": "2020-09-23T09:33:56Z", "author": {"login": "siemiatj"}, "path": "frontend/src/containers/WidgetWrapper.js", "diffHunk": "@@ -0,0 +1,153 @@\n+import React, { PureComponent } from 'react';\n+import PropTypes from 'prop-types';\n+import { connect } from 'react-redux';\n+\n+import {\n+  openModal,\n+  patch,\n+  updatePropertyValue,\n+  allowShortcut,\n+  disableShortcut,\n+} from '../actions/WindowActions';\n+import { getCellWidgetData } from '../utils/tableHelpers';\n+import { getTable } from '../reducers/tables';\n+import {\n+  getData,\n+  getWidgetData,\n+  getWidgetFields,\n+  getMasterDocStatus,\n+  getProcessWidgetData,\n+  getProcessWidgetFields,\n+} from '../reducers/windowHandler';\n+\n+import MasterWidget from '../components/widget/MasterWidget';\n+import RawWidget from '../components/widget/RawWidget';\n+\n+/**\n+ * @file Class based component.\n+ * @module WidgetWrapper\n+ * @extends PureComponent\n+ * @summary this is a wrapper around widgets that's responsible for\n+ * fetching data to the component. Depending on the `dataSource` prop it\n+ * has a selection of strategies to get the data from the redux store. No\n+ * `MasterWidget` or `RawWidget` component should be rendered directly - always\n+ * wrap them in `WidgetWrapper` and if needed add another data selector.\n+ */\n+class WidgetWrapper extends PureComponent {\n+  render() {\n+    const { renderMaster } = this.props;\n+\n+    if (renderMaster) {\n+      return <MasterWidget {...this.props} />;\n+    } else {\n+      return <RawWidget {...this.props} />;\n+    }\n+  }\n+}\n+\n+const mapStateToProps = (state, props) => {\n+  const { appHandler, windowHandler } = state;\n+  const {\n+    dataSource,\n+    tableId,\n+    rowIndex,\n+    colIndex,\n+    isEditable,\n+    supportFieldEdit,\n+    layoutId,\n+    fields,\n+    isModal,\n+  } = props;\n+  const data = getData(state, isModal);\n+\n+  let widgetData = null;\n+  let fieldsCopy = null;\n+\n+  switch (dataSource) {\n+    case 'doc-status':\n+      widgetData = getMasterDocStatus(state);\n+\n+      break;\n+    case 'modal':\n+    case 'element':\n+      widgetData = getWidgetData(state, isModal, layoutId);\n+      fieldsCopy = getWidgetFields(state, isModal, layoutId);\n+\n+      break;\n+    case 'process':\n+      widgetData = getProcessWidgetData(state, true, layoutId);", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDQ5MzMzNzg3NA=="}, "originalCommit": {"oid": "99df550872dfbd1d31a49e94946e26c4e7759a6d"}, "originalPosition": 78}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1314, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}