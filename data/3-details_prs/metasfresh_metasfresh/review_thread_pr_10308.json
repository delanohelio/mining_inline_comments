{"data": {"repository": {"pullRequest": {"id": "MDExOlB1bGxSZXF1ZXN0NTI3Njc1Njk0", "number": 10308, "reviewThreads": {"totalCount": 1, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjowNToyN1rOFBnMBA==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjowNToyN1rOFBnMBA==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDIzOlB1bGxSZXF1ZXN0UmV2aWV3VGhyZWFkMzM3MjM0OTQ4OnYy", "diffSide": "RIGHT", "path": "frontend/src/actions/Actions.js", "isResolved": true, "comments": {"totalCount": 3, "pageInfo": {"startCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QwNjowNToyN1rOIAXSWw==", "endCursor": "Y3Vyc29yOnYyOpK0MjAyMC0xMi0wN1QxNTowODoyOVrOIArUUQ==", "hasNextPage": false, "hasPreviousPage": false}, "nodes": [{"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI1MjQ0Mw==", "bodyText": "string", "url": "https://github.com/metasfresh/metasfresh/pull/10308#discussion_r537252443", "createdAt": "2020-12-07T06:05:27Z", "author": {"login": "petrican"}, "path": "frontend/src/actions/Actions.js", "diffHunk": "@@ -11,131 +11,166 @@ import {\n } from '../constants/ActionTypes';\n \n import { getQuickActionsId, getQuickActions } from '../reducers/actionsHandler';\n-import { getTable } from '../reducers/tables';\n+import { getTable, getTableId } from '../reducers/tables';\n import { getView } from '../reducers/viewHandler';\n \n /*\n- * @method getTableActions\n+ * @method fetchQuickActions\n  * @summary Action creator that calls the quick actions fetch internally for\n  * when we're updating the table selection \n  \n- * @param {string} tableId\n  * @param {number} windowId\n  * @param {string} viewId\n  * @param {boolean} isModal\n+ * @param {string} viewProfileId\n  */\n-export function getTableActions({ tableId, windowId, viewId, isModal }) {\n+export function fetchQuickActions({\n+  windowId,\n+  viewId,\n+  isModal,\n+  viewProfileId = null,\n+}) {\n   return (dispatch, getState) => {\n+    let actionPromises = null;\n     const state = getState();\n-    const table = getTable(state, tableId);\n-    const selectedIds = table.selected;\n-    const { includedView } = state.viewHandler;\n-    const viewProfileId =\n-      includedView.windowId === windowId ? includedView.viewProfileId : null;\n-    let fetchActions = true;\n-\n-    if (viewId) {\n-      const quickActionsId = getQuickActionsId({\n-        windowId,\n-        viewId,\n-      });\n-      const quickActions = getQuickActions(state, quickActionsId);\n-      fetchActions = quickActions.pending === false;\n-    }\n+    const includedView = state.viewHandler.includedView.windowId\n+      ? state.viewHandler.includedView\n+      : null;\n \n-    if (fetchActions) {\n-      dispatch(\n-        fetchQuickActions({\n-          windowId,\n-          viewId,\n-          viewProfileId,\n-          selectedIds,\n-        })\n-      );\n+    if (includedView) {\n+      viewProfileId = viewProfileId || includedView.viewProfileId;\n+\n+      const isParent = includedView.parentId === windowId;\n+      const isChild = includedView.windowId === windowId;\n+\n+      if (isParent || isChild) {\n+        const requests = dispatch(\n+          getQuickActionRequests({\n+            windowId,\n+            viewId,\n+            includedView,\n+            viewProfileId,\n+            isModal,\n+            isParent,\n+          })\n+        );\n+\n+        actionPromises = [].concat(requests);\n+      }\n+    } else {\n+      const tableId = getTableId({ windowId, viewId });\n+      const table = getTable(state, tableId);\n+\n+      actionPromises = [\n+        dispatch(\n+          requestQuickActions({\n+            windowId,\n+            viewId,\n+            selectedIds: table.selected,\n+            viewProfileId,\n+          })\n+        ),\n+      ];\n     }\n \n-    dispatch(\n-      fetchIncludedQuickActions({\n-        windowId,\n-        selectedIds,\n-        isModal,\n-      })\n-    );\n+    return Promise.all(actionPromises);\n   };\n }\n \n /*\n  * @method fetchIncludedQuickActions\n- * @summary Action creator that calls the quick actions fetch internally for parent/child\n- * quick actions, when a table selection has changed\n+ * @summary Action creator that calls the creates the requests for included quick actions\n  *\n- * @param {string} windowId\n- * @param {array} selectedIds\n+ * @param {number} windowId", "state": "SUBMITTED", "replyTo": null, "originalCommit": {"oid": "cd3168d4dce0c0fb06018576cd18c134d1136b13"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzMwMTQzNA==", "bodyText": "windowid is a number. Viewid is a string", "url": "https://github.com/metasfresh/metasfresh/pull/10308#discussion_r537301434", "createdAt": "2020-12-07T08:04:24Z", "author": {"login": "siemiatj"}, "path": "frontend/src/actions/Actions.js", "diffHunk": "@@ -11,131 +11,166 @@ import {\n } from '../constants/ActionTypes';\n \n import { getQuickActionsId, getQuickActions } from '../reducers/actionsHandler';\n-import { getTable } from '../reducers/tables';\n+import { getTable, getTableId } from '../reducers/tables';\n import { getView } from '../reducers/viewHandler';\n \n /*\n- * @method getTableActions\n+ * @method fetchQuickActions\n  * @summary Action creator that calls the quick actions fetch internally for\n  * when we're updating the table selection \n  \n- * @param {string} tableId\n  * @param {number} windowId\n  * @param {string} viewId\n  * @param {boolean} isModal\n+ * @param {string} viewProfileId\n  */\n-export function getTableActions({ tableId, windowId, viewId, isModal }) {\n+export function fetchQuickActions({\n+  windowId,\n+  viewId,\n+  isModal,\n+  viewProfileId = null,\n+}) {\n   return (dispatch, getState) => {\n+    let actionPromises = null;\n     const state = getState();\n-    const table = getTable(state, tableId);\n-    const selectedIds = table.selected;\n-    const { includedView } = state.viewHandler;\n-    const viewProfileId =\n-      includedView.windowId === windowId ? includedView.viewProfileId : null;\n-    let fetchActions = true;\n-\n-    if (viewId) {\n-      const quickActionsId = getQuickActionsId({\n-        windowId,\n-        viewId,\n-      });\n-      const quickActions = getQuickActions(state, quickActionsId);\n-      fetchActions = quickActions.pending === false;\n-    }\n+    const includedView = state.viewHandler.includedView.windowId\n+      ? state.viewHandler.includedView\n+      : null;\n \n-    if (fetchActions) {\n-      dispatch(\n-        fetchQuickActions({\n-          windowId,\n-          viewId,\n-          viewProfileId,\n-          selectedIds,\n-        })\n-      );\n+    if (includedView) {\n+      viewProfileId = viewProfileId || includedView.viewProfileId;\n+\n+      const isParent = includedView.parentId === windowId;\n+      const isChild = includedView.windowId === windowId;\n+\n+      if (isParent || isChild) {\n+        const requests = dispatch(\n+          getQuickActionRequests({\n+            windowId,\n+            viewId,\n+            includedView,\n+            viewProfileId,\n+            isModal,\n+            isParent,\n+          })\n+        );\n+\n+        actionPromises = [].concat(requests);\n+      }\n+    } else {\n+      const tableId = getTableId({ windowId, viewId });\n+      const table = getTable(state, tableId);\n+\n+      actionPromises = [\n+        dispatch(\n+          requestQuickActions({\n+            windowId,\n+            viewId,\n+            selectedIds: table.selected,\n+            viewProfileId,\n+          })\n+        ),\n+      ];\n     }\n \n-    dispatch(\n-      fetchIncludedQuickActions({\n-        windowId,\n-        selectedIds,\n-        isModal,\n-      })\n-    );\n+    return Promise.all(actionPromises);\n   };\n }\n \n /*\n  * @method fetchIncludedQuickActions\n- * @summary Action creator that calls the quick actions fetch internally for parent/child\n- * quick actions, when a table selection has changed\n+ * @summary Action creator that calls the creates the requests for included quick actions\n  *\n- * @param {string} windowId\n- * @param {array} selectedIds\n+ * @param {number} windowId", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI1MjQ0Mw=="}, "originalCommit": {"oid": "cd3168d4dce0c0fb06018576cd18c134d1136b13"}, "originalPosition": 113}, {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzU4MDYyNQ==", "bodyText": "IMPORTANT: pls always handle IDs are plain Strings.\nThis will allow the backend to change the way we handle IDs or their structure without any notice.", "url": "https://github.com/metasfresh/metasfresh/pull/10308#discussion_r537580625", "createdAt": "2020-12-07T15:08:29Z", "author": {"login": "teosarca"}, "path": "frontend/src/actions/Actions.js", "diffHunk": "@@ -11,131 +11,166 @@ import {\n } from '../constants/ActionTypes';\n \n import { getQuickActionsId, getQuickActions } from '../reducers/actionsHandler';\n-import { getTable } from '../reducers/tables';\n+import { getTable, getTableId } from '../reducers/tables';\n import { getView } from '../reducers/viewHandler';\n \n /*\n- * @method getTableActions\n+ * @method fetchQuickActions\n  * @summary Action creator that calls the quick actions fetch internally for\n  * when we're updating the table selection \n  \n- * @param {string} tableId\n  * @param {number} windowId\n  * @param {string} viewId\n  * @param {boolean} isModal\n+ * @param {string} viewProfileId\n  */\n-export function getTableActions({ tableId, windowId, viewId, isModal }) {\n+export function fetchQuickActions({\n+  windowId,\n+  viewId,\n+  isModal,\n+  viewProfileId = null,\n+}) {\n   return (dispatch, getState) => {\n+    let actionPromises = null;\n     const state = getState();\n-    const table = getTable(state, tableId);\n-    const selectedIds = table.selected;\n-    const { includedView } = state.viewHandler;\n-    const viewProfileId =\n-      includedView.windowId === windowId ? includedView.viewProfileId : null;\n-    let fetchActions = true;\n-\n-    if (viewId) {\n-      const quickActionsId = getQuickActionsId({\n-        windowId,\n-        viewId,\n-      });\n-      const quickActions = getQuickActions(state, quickActionsId);\n-      fetchActions = quickActions.pending === false;\n-    }\n+    const includedView = state.viewHandler.includedView.windowId\n+      ? state.viewHandler.includedView\n+      : null;\n \n-    if (fetchActions) {\n-      dispatch(\n-        fetchQuickActions({\n-          windowId,\n-          viewId,\n-          viewProfileId,\n-          selectedIds,\n-        })\n-      );\n+    if (includedView) {\n+      viewProfileId = viewProfileId || includedView.viewProfileId;\n+\n+      const isParent = includedView.parentId === windowId;\n+      const isChild = includedView.windowId === windowId;\n+\n+      if (isParent || isChild) {\n+        const requests = dispatch(\n+          getQuickActionRequests({\n+            windowId,\n+            viewId,\n+            includedView,\n+            viewProfileId,\n+            isModal,\n+            isParent,\n+          })\n+        );\n+\n+        actionPromises = [].concat(requests);\n+      }\n+    } else {\n+      const tableId = getTableId({ windowId, viewId });\n+      const table = getTable(state, tableId);\n+\n+      actionPromises = [\n+        dispatch(\n+          requestQuickActions({\n+            windowId,\n+            viewId,\n+            selectedIds: table.selected,\n+            viewProfileId,\n+          })\n+        ),\n+      ];\n     }\n \n-    dispatch(\n-      fetchIncludedQuickActions({\n-        windowId,\n-        selectedIds,\n-        isModal,\n-      })\n-    );\n+    return Promise.all(actionPromises);\n   };\n }\n \n /*\n  * @method fetchIncludedQuickActions\n- * @summary Action creator that calls the quick actions fetch internally for parent/child\n- * quick actions, when a table selection has changed\n+ * @summary Action creator that calls the creates the requests for included quick actions\n  *\n- * @param {string} windowId\n- * @param {array} selectedIds\n+ * @param {number} windowId", "state": "SUBMITTED", "replyTo": {"id": "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDUzNzI1MjQ0Mw=="}, "originalCommit": {"oid": "cd3168d4dce0c0fb06018576cd18c134d1136b13"}, "originalPosition": 113}]}}]}}}, "rateLimit": {"limit": 5000, "remaining": 1168, "cost": 1, "resetAt": "2021-11-13T12:10:21Z"}}}